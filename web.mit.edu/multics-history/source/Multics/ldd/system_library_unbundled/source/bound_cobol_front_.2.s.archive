



		    cobol_diag_table_.alm           05/24/89  1045.1rew 05/24/89  0837.4     3157911



" *********************************************************
" *                                                       *
" * Copyright, (C) BULL HN Information Systems Inc., 1989 *
" *                                                       *
" * Copyright (c) 1972 by Massachusetts Institute of      *
" * Technology and Honeywell Information Systems, Inc.    *
" *                                                       *
" *********************************************************

" HISTORY COMMENTS:
"  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8082),
"     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
"     MCR8082 cobol_diag_table_.alm Fix wild array subscript.
"  2) change(89-04-23,Zimmerman), approve(89-04-23,MCR8083),
"     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
"     MCR8083 cobol_diag_table_.alm Fix bug detecting illegal level 77 group
"     item.
"                                                      END HISTORY COMMENTS


name	cobol_diag_table_
cobol_diag_table_:
	segdef	cobol_diag_table_
	oct	000000000013
	oct	000000002271
	oct	000000161427
	oct	000000000000
	oct	000000000050
	oct	000000000050
	oct	000000000265
	oct	000000000335
	oct	000000000342
	oct	000000000677
	oct	000000000176
	oct	000000001075
	oct	000000000474
	oct	000000001571
	oct	000000000100
	oct	000000001671
	oct	000000000000
	oct	000000001671
	oct	000000000033
	oct	000000001724
	oct	000000000336
	oct	000000002262
	oct	000000000007
	oct	000000000000
	oct	000000000000
	oct	000000000001
	oct	000000000050
	oct	000000000003
	oct	000000000000
	oct	000000000051
	oct	000000000065
	oct	000000000003
	oct	000000000051
	oct	000000000136
	oct	000000000057
	oct	000000000003
	oct	000000000000
	oct	000000000215
	oct	000000000072
	oct	000000000003
	oct	000000000056
	oct	000000000307
	oct	000000000076
	oct	000000000003
	oct	000000000000
	oct	000000000405
	oct	000000000047
	oct	000000000002
	oct	000000000000
	oct	000000000454
	oct	000000000043
	oct	000000000003
	oct	000000000000
	oct	000000000517
	oct	000000000104
	oct	000000000002
	oct	000000000000
	oct	000000000623
	oct	000000000124
	oct	000000000003
	oct	000000000000
	oct	000000000747
	oct	000000000015
	oct	000000000003
	oct	000000000000
	oct	000000000764
	oct	000000000035
	oct	000000000001
	oct	000000000000
	oct	000000001021
	oct	000000000030
	oct	000000000001
	oct	000000000000
	oct	000000001051
	oct	000000000043
	oct	000000000002
	oct	000000000000
	oct	000000001114
	oct	000000000054
	oct	000000000002
	oct	000000000012
	oct	000000001170
	oct	000000000115
	oct	000000000003
	oct	000000000000
	oct	000000001305
	oct	000000000052
	oct	000000000001
	oct	000000000000
	oct	000000001357
	oct	000000000071
	oct	000000000003
	oct	000000000000
	oct	000000001450
	oct	000000000104
	oct	000000000002
	oct	000000000000
	oct	000000001554
	oct	000000000077
	oct	000000000002
	oct	000000000005
	oct	000000001653
	oct	000000000032
	oct	000000000002
	oct	000000000000
	oct	000000001705
	oct	000000000041
	oct	000000000003
	oct	000000000005
	oct	000000001746
	oct	000000000022
	oct	000000000003
	oct	000000000012
	oct	000000001770
	oct	000000000060
	oct	000000000003
	oct	000000000000
	oct	000000002050
	oct	000000000060
	oct	000000000003
	oct	000000000000
	oct	000000002130
	oct	000000000061
	oct	000000000003
	oct	000000000000
	oct	000000002211
	oct	000000000102
	oct	000000000003
	oct	000000000000
	oct	000000002313
	oct	000000000067
	oct	000000000003
	oct	000000000000
	oct	000000002402
	oct	000000000024
	oct	000000000003
	oct	000000000000
	oct	000000002426
	oct	000000000123
	oct	000000000002
	oct	000000000000
	oct	000000002551
	oct	000000000054
	oct	000000000002
	oct	000000000000
	oct	000000002625
	oct	000000000053
	oct	000000000002
	oct	000000000000
	oct	000000002700
	oct	000000000066
	oct	000000000002
	oct	000000000000
	oct	000000002766
	oct	000000000132
	oct	000000000002
	oct	000000000000
	oct	000000003120
	oct	000000000132
	oct	000000000002
	oct	000000000000
	oct	000000003252
	oct	000000000041
	oct	000000000003
	oct	000000000000
	oct	000000003313
	oct	000000000050
	oct	000000000003
	oct	000000000000
	oct	000000003363
	oct	000000000136
	oct	000000000003
	oct	000000000000
	oct	000000003521
	oct	000000000044
	oct	000000000003
	oct	000000000000
	oct	000000003565
	oct	000000000045
	oct	000000000003
	oct	000000000005
	oct	000000003632
	oct	000000000105
	oct	000000000002
	oct	000000000000
	oct	000000003737
	oct	000000000041
	oct	000000000002
	oct	000000000000
	oct	000000004000
	oct	000000000043
	oct	000000000002
	oct	000000000000
	oct	000000004043
	oct	000000000050
	oct	000000000002
	oct	000000000000
	oct	000000004113
	oct	000000000132
	oct	000000000002
	oct	000000000000
	oct	000000004245
	oct	000000000052
	oct	000000000003
	oct	000000000000
	oct	000000004317
	oct	000000000104
	oct	000000000003
	oct	000000000000
	oct	000000004423
	oct	000000000046
	oct	000000000001
	oct	000000000000
	oct	000000004471
	oct	000000000106
	oct	000000000002
	oct	000000000000
	oct	000000004577
	oct	000000000124
	oct	000000000001
	oct	000000000000
	oct	000000004723
	oct	000000000052
	oct	000000000002
	oct	000000000000
	oct	000000004775
	oct	000000000054
	oct	000000000002
	oct	000000000000
	oct	000000005051
	oct	000000000042
	oct	000000000002
	oct	000000000000
	oct	000000005113
	oct	000000000062
	oct	000000000002
	oct	000000000000
	oct	000000005175
	oct	000000000037
	oct	000000000003
	oct	000000000000
	oct	000000005234
	oct	000000000105
	oct	000000000001
	oct	000000000000
	oct	000000005341
	oct	000000000056
	oct	000000000003
	oct	000000000000
	oct	000000005417
	oct	000000000055
	oct	000000000001
	oct	000000000000
	oct	000000005474
	oct	000000000051
	oct	000000000002
	oct	000000000000
	oct	000000005545
	oct	000000000043
	oct	000000000002
	oct	000000000000
	oct	000000005610
	oct	000000000042
	oct	000000000003
	oct	000000000000
	oct	000000005652
	oct	000000000051
	oct	000000000002
	oct	000000000000
	oct	000000005723
	oct	000000000045
	oct	000000000002
	oct	000000000000
	oct	000000005770
	oct	000000000034
	oct	000000000002
	oct	000000000000
	oct	000000006024
	oct	000000000104
	oct	000000000002
	oct	000000000000
	oct	000000006130
	oct	000000000061
	oct	000000000003
	oct	000000000000
	oct	000000006211
	oct	000000000103
	oct	000000000002
	oct	000000000000
	oct	000000006314
	oct	000000000064
	oct	000000000003
	oct	000000000000
	oct	000000006400
	oct	000000000067
	oct	000000000003
	oct	000000000000
	oct	000000006467
	oct	000000000037
	oct	000000000002
	oct	000000000000
	oct	000000006526
	oct	000000000107
	oct	000000000003
	oct	000000000000
	oct	000000006635
	oct	000000000107
	oct	000000000003
	oct	000000000000
	oct	000000006744
	oct	000000000035
	oct	000000000003
	oct	000000000000
	oct	000000007001
	oct	000000000133
	oct	000000000003
	oct	000000000000
	oct	000000007134
	oct	000000000042
	oct	000000000003
	oct	000000000000
	oct	000000007176
	oct	000000000076
	oct	000000000003
	oct	000000000000
	oct	000000007274
	oct	000000000041
	oct	000000000002
	oct	000000000000
	oct	000000007335
	oct	000000000057
	oct	000000000003
	oct	000000000000
	oct	000000007414
	oct	000000000047
	oct	000000000003
	oct	000000000000
	oct	000000007463
	oct	000000000060
	oct	000000000003
	oct	000000000000
	oct	000000007543
	oct	000000000035
	oct	000000000003
	oct	000000000000
	oct	000000007600
	oct	000000000073
	oct	000000000002
	oct	000000000000
	oct	000000007673
	oct	000000000100
	oct	000000000003
	oct	000000000000
	oct	000000007773
	oct	000000000074
	oct	000000000003
	oct	000000000000
	oct	000000010067
	oct	000000000146
	oct	000000000003
	oct	000000000000
	oct	000000010235
	oct	000000000104
	oct	000000000003
	oct	000000000000
	oct	000000010341
	oct	000000000044
	oct	000000000003
	oct	000000000000
	oct	000000010405
	oct	000000000044
	oct	000000000003
	oct	000000000000
	oct	000000010451
	oct	000000000035
	oct	000000000003
	oct	000000000000
	oct	000000010506
	oct	000000000036
	oct	000000000003
	oct	000000000000
	oct	000000010544
	oct	000000000044
	oct	000000000003
	oct	000000000000
	oct	000000010610
	oct	000000000066
	oct	000000000003
	oct	000000000000
	oct	000000010676
	oct	000000000035
	oct	000000000003
	oct	000000000000
	oct	000000010733
	oct	000000000035
	oct	000000000003
	oct	000000000000
	oct	000000010770
	oct	000000000054
	oct	000000000003
	oct	000000000000
	oct	000000011044
	oct	000000000102
	oct	000000000003
	oct	000000000000
	oct	000000011146
	oct	000000000070
	oct	000000000003
	oct	000000000000
	oct	000000011236
	oct	000000000053
	oct	000000000003
	oct	000000000000
	oct	000000011311
	oct	000000000047
	oct	000000000003
	oct	000000000000
	oct	000000011360
	oct	000000000047
	oct	000000000003
	oct	000000000000
	oct	000000011427
	oct	000000000061
	oct	000000000003
	oct	000000000000
	oct	000000011510
	oct	000000000050
	oct	000000000003
	oct	000000000000
	oct	000000011560
	oct	000000000060
	oct	000000000003
	oct	000000000000
	oct	000000011640
	oct	000000000074
	oct	000000000003
	oct	000000000000
	oct	000000011734
	oct	000000000072
	oct	000000000002
	oct	000000000000
	oct	000000012026
	oct	000000000037
	oct	000000000002
	oct	000000000000
	oct	000000012065
	oct	000000000100
	oct	000000000003
	oct	000000000000
	oct	000000012165
	oct	000000000041
	oct	000000000002
	oct	000000000000
	oct	000000012226
	oct	000000000061
	oct	000000000003
	oct	000000000000
	oct	000000012307
	oct	000000000010
	oct	000000000002
	oct	000000000000
	oct	000000012317
	oct	000000000067
	oct	000000000002
	oct	000000000000
	oct	000000012406
	oct	000000000106
	oct	000000000002
	oct	000000000000
	oct	000000012514
	oct	000000000055
	oct	000000000002
	oct	000000000000
	oct	000000012571
	oct	000000000062
	oct	000000000003
	oct	000000000000
	oct	000000012653
	oct	000000000010
	oct	000000000002
	oct	000000000000
	oct	000000012663
	oct	000000000010
	oct	000000000002
	oct	000000000000
	oct	000000012673
	oct	000000000051
	oct	000000000001
	oct	000000000000
	oct	000000012744
	oct	000000000063
	oct	000000000001
	oct	000000000000
	oct	000000013027
	oct	000000000064
	oct	000000000001
	oct	000000000000
	oct	000000013113
	oct	000000000056
	oct	000000000002
	oct	000000000000
	oct	000000013171
	oct	000000000074
	oct	000000000002
	oct	000000000000
	oct	000000013265
	oct	000000000056
	oct	000000000002
	oct	000000000000
	oct	000000013343
	oct	000000000053
	oct	000000000002
	oct	000000000000
	oct	000000013416
	oct	000000000056
	oct	000000000002
	oct	000000000000
	oct	000000013474
	oct	000000000040
	oct	000000000002
	oct	000000000000
	oct	000000013534
	oct	000000000113
	oct	000000000003
	oct	000000000000
	oct	000000013647
	oct	000000000104
	oct	000000000003
	oct	000000000000
	oct	000000013753
	oct	000000000060
	oct	000000000003
	oct	000000000000
	oct	000000014033
	oct	000000000105
	oct	000000000002
	oct	000000000000
	oct	000000014140
	oct	000000000030
	oct	000000000001
	oct	000000000000
	oct	000000014170
	oct	000000000035
	oct	000000000003
	oct	000000000000
	oct	000000014225
	oct	000000000051
	oct	000000000002
	oct	000000000000
	oct	000000014276
	oct	000000000037
	oct	000000000002
	oct	000000000000
	oct	000000014335
	oct	000000000111
	oct	000000000002
	oct	000000000000
	oct	000000014446
	oct	000000000052
	oct	000000000003
	oct	000000000000
	oct	000000014520
	oct	000000000041
	oct	000000000002
	oct	000000000000
	oct	000000014561
	oct	000000000101
	oct	000000000001
	oct	000000000000
	oct	000000014662
	oct	000000000044
	oct	000000000003
	oct	000000000000
	oct	000000014726
	oct	000000000052
	oct	000000000003
	oct	000000000000
	oct	000000015000
	oct	000000000142
	oct	000000000002
	oct	000000000000
	oct	000000015142
	oct	000000000057
	oct	000000000003
	oct	000000000000
	oct	000000015221
	oct	000000000066
	oct	000000000002
	oct	000000000000
	oct	000000015307
	oct	000000000120
	oct	000000000002
	oct	000000000000
	oct	000000015427
	oct	000000000150
	oct	000000000001
	oct	000000000000
	oct	000000015577
	oct	000000000035
	oct	000000000001
	oct	000000000000
	oct	000000015634
	oct	000000000011
	oct	000000000003
	oct	000000000000
	oct	000000015645
	oct	000000000076
	oct	000000000002
	oct	000000000000
	oct	000000015743
	oct	000000000043
	oct	000000000003
	oct	000000000000
	oct	000000016006
	oct	000000000045
	oct	000000000003
	oct	000000000000
	oct	000000016053
	oct	000000000123
	oct	000000000002
	oct	000000000000
	oct	000000016176
	oct	000000000140
	oct	000000000001
	oct	000000000000
	oct	000000016336
	oct	000000000027
	oct	000000000003
	oct	000000000000
	oct	000000016365
	oct	000000000033
	oct	000000000001
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000016420
	oct	000000000121
	oct	000000000002
	oct	000000000000
	oct	000000016541
	oct	000000000052
	oct	000000000003
	oct	000000000000
	oct	000000016613
	oct	000000000144
	oct	000000000002
	oct	000000000000
	oct	000000016757
	oct	000000000070
	oct	000000000003
	oct	000000000000
	oct	000000017047
	oct	000000000100
	oct	000000000003
	oct	000000000000
	oct	000000017147
	oct	000000000137
	oct	000000000003
	oct	000000000000
	oct	000000017306
	oct	000000000102
	oct	000000000002
	oct	000000000000
	oct	000000017410
	oct	000000000150
	oct	000000000002
	oct	000000000000
	oct	000000017560
	oct	000000000121
	oct	000000000002
	oct	000000000000
	oct	000000017701
	oct	000000000141
	oct	000000000002
	oct	000000000000
	oct	000000020042
	oct	000000000141
	oct	000000000002
	oct	000000000000
	oct	000000020203
	oct	000000000152
	oct	000000000002
	oct	000000000000
	oct	000000020355
	oct	000000000141
	oct	000000000002
	oct	000000000000
	oct	000000020516
	oct	000000000140
	oct	000000000002
	oct	000000000000
	oct	000000020656
	oct	000000000124
	oct	000000000002
	oct	000000000000
	oct	000000021002
	oct	000000000114
	oct	000000000002
	oct	000000000000
	oct	000000021116
	oct	000000000071
	oct	000000000001
	oct	000000000000
	oct	000000021207
	oct	000000000071
	oct	000000000001
	oct	000000000000
	oct	000000021300
	oct	000000000121
	oct	000000000001
	oct	000000000000
	oct	000000021421
	oct	000000000144
	oct	000000000001
	oct	000000000000
	oct	000000021565
	oct	000000000144
	oct	000000000002
	oct	000000000000
	oct	000000021731
	oct	000000000137
	oct	000000000001
	oct	000000000000
	oct	000000022070
	oct	000000000134
	oct	000000000001
	oct	000000000000
	oct	000000022224
	oct	000000000135
	oct	000000000001
	oct	000000000000
	oct	000000022361
	oct	000000000136
	oct	000000000001
	oct	000000000000
	oct	000000022517
	oct	000000000146
	oct	000000000001
	oct	000000000000
	oct	000000022665
	oct	000000000151
	oct	000000000001
	oct	000000000000
	oct	000000023036
	oct	000000000152
	oct	000000000001
	oct	000000000000
	oct	000000023210
	oct	000000000111
	oct	000000000001
	oct	000000000000
	oct	000000023321
	oct	000000000142
	oct	000000000001
	oct	000000000000
	oct	000000023463
	oct	000000000135
	oct	000000000001
	oct	000000000000
	oct	000000023620
	oct	000000000132
	oct	000000000002
	oct	000000000000
	oct	000000023752
	oct	000000000060
	oct	000000000002
	oct	000000000000
	oct	000000024032
	oct	000000000041
	oct	000000000002
	oct	000000000000
	oct	000000024073
	oct	000000000022
	oct	000000000002
	oct	000000000000
	oct	000000024115
	oct	000000000100
	oct	000000000003
	oct	000000000000
	oct	000000024215
	oct	000000000025
	oct	000000000003
	oct	000000000000
	oct	000000024242
	oct	000000000107
	oct	000000000003
	oct	000000000000
	oct	000000024351
	oct	000000000051
	oct	000000000003
	oct	000000000000
	oct	000000024422
	oct	000000000137
	oct	000000000003
	oct	000000000000
	oct	000000024561
	oct	000000000110
	oct	000000000003
	oct	000000000107
	oct	000000024671
	oct	000000000072
	oct	000000000003
	oct	000000000000
	oct	000000024763
	oct	000000000041
	oct	000000000003
	oct	000000000000
	oct	000000025024
	oct	000000000054
	oct	000000000003
	oct	000000000000
	oct	000000025100
	oct	000000000036
	oct	000000000001
	oct	000000000000
	oct	000000025136
	oct	000000000045
	oct	000000000003
	oct	000000000000
	oct	000000025203
	oct	000000000062
	oct	000000000001
	oct	000000000000
	oct	000000025265
	oct	000000000046
	oct	000000000003
	oct	000000000000
	oct	000000025333
	oct	000000000047
	oct	000000000003
	oct	000000000000
	oct	000000025402
	oct	000000000053
	oct	000000000002
	oct	000000000000
	oct	000000025455
	oct	000000000026
	oct	000000000003
	oct	000000000000
	oct	000000025503
	oct	000000000043
	oct	000000000003
	oct	000000000000
	oct	000000025546
	oct	000000000040
	oct	000000000003
	oct	000000000000
	oct	000000025606
	oct	000000000061
	oct	000000000003
	oct	000000000000
	oct	000000025667
	oct	000000000041
	oct	000000000003
	oct	000000000000
	oct	000000025730
	oct	000000000141
	oct	000000000003
	oct	000000000000
	oct	000000026071
	oct	000000000034
	oct	000000000003
	oct	000000000000
	oct	000000026125
	oct	000000000027
	oct	000000000003
	oct	000000000000
	oct	000000026154
	oct	000000000113
	oct	000000000003
	oct	000000000000
	oct	000000026267
	oct	000000000056
	oct	000000000003
	oct	000000000000
	oct	000000026345
	oct	000000000123
	oct	000000000003
	oct	000000000000
	oct	000000026470
	oct	000000000052
	oct	000000000003
	oct	000000000000
	oct	000000026542
	oct	000000000110
	oct	000000000003
	oct	000000000000
	oct	000000026652
	oct	000000000126
	oct	000000000002
	oct	000000000000
	oct	000000027000
	oct	000000000110
	oct	000000000003
	oct	000000000000
	oct	000000027110
	oct	000000000064
	oct	000000000003
	oct	000000000000
	oct	000000027174
	oct	000000000026
	oct	000000000002
	oct	000000000000
	oct	000000027222
	oct	000000000074
	oct	000000000003
	oct	000000000000
	oct	000000027316
	oct	000000000067
	oct	000000000003
	oct	000000000000
	oct	000000027405
	oct	000000000112
	oct	000000000003
	oct	000000000000
	oct	000000027517
	oct	000000000075
	oct	000000000003
	oct	000000000000
	oct	000000027614
	oct	000000000100
	oct	000000000003
	oct	000000000000
	oct	000000027714
	oct	000000000124
	oct	000000000003
	oct	000000000000
	oct	000000030040
	oct	000000000054
	oct	000000000003
	oct	000000000000
	oct	000000030114
	oct	000000000106
	oct	000000000003
	oct	000000000000
	oct	000000030222
	oct	000000000104
	oct	000000000003
	oct	000000000000
	oct	000000030326
	oct	000000000075
	oct	000000000003
	oct	000000000000
	oct	000000030423
	oct	000000000075
	oct	000000000003
	oct	000000000000
	oct	000000030520
	oct	000000000146
	oct	000000000003
	oct	000000000000
	oct	000000030666
	oct	000000000101
	oct	000000000003
	oct	000000000000
	oct	000000030767
	oct	000000000114
	oct	000000000003
	oct	000000000000
	oct	000000031103
	oct	000000000110
	oct	000000000003
	oct	000000000000
	oct	000000031213
	oct	000000000101
	oct	000000000003
	oct	000000000000
	oct	000000031314
	oct	000000000077
	oct	000000000003
	oct	000000000000
	oct	000000031413
	oct	000000000055
	oct	000000000003
	oct	000000000000
	oct	000000031470
	oct	000000000075
	oct	000000000002
	oct	000000000000
	oct	000000031565
	oct	000000000076
	oct	000000000003
	oct	000000000000
	oct	000000031663
	oct	000000000067
	oct	000000000003
	oct	000000000000
	oct	000000031752
	oct	000000000077
	oct	000000000003
	oct	000000000000
	oct	000000032051
	oct	000000000144
	oct	000000000003
	oct	000000000000
	oct	000000032215
	oct	000000000050
	oct	000000000003
	oct	000000000000
	oct	000000032265
	oct	000000000064
	oct	000000000003
	oct	000000000000
	oct	000000032351
	oct	000000000111
	oct	000000000003
	oct	000000000000
	oct	000000032462
	oct	000000000113
	oct	000000000003
	oct	000000000000
	oct	000000032575
	oct	000000000145
	oct	000000000003
	oct	000000000000
	oct	000000032742
	oct	000000000036
	oct	000000000003
	oct	000000000000
	oct	000000033000
	oct	000000000064
	oct	000000000003
	oct	000000000000
	oct	000000033064
	oct	000000000113
	oct	000000000003
	oct	000000000000
	oct	000000033177
	oct	000000000072
	oct	000000000003
	oct	000000000000
	oct	000000033271
	oct	000000000137
	oct	000000000002
	oct	000000000000
	oct	000000033430
	oct	000000000104
	oct	000000000003
	oct	000000000000
	oct	000000033534
	oct	000000000117
	oct	000000000003
	oct	000000000000
	oct	000000033653
	oct	000000000150
	oct	000000000003
	oct	000000000000
	oct	000000034023
	oct	000000000033
	oct	000000000001
	oct	000000000000
	oct	000000034056
	oct	000000000143
	oct	000000000003
	oct	000000000000
	oct	000000034221
	oct	000000000036
	oct	000000000001
	oct	000000000000
	oct	000000034257
	oct	000000000146
	oct	000000000003
	oct	000000000000
	oct	000000034425
	oct	000000000056
	oct	000000000003
	oct	000000000000
	oct	000000034503
	oct	000000000141
	oct	000000000003
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000034644
	oct	000000000036
	oct	000000000003
	oct	000000000000
	oct	000000034702
	oct	000000000143
	oct	000000000003
	oct	000000000000
	oct	000000035045
	oct	000000000145
	oct	000000000003
	oct	000000000000
	oct	000000035212
	oct	000000000136
	oct	000000000003
	oct	000000000000
	oct	000000035350
	oct	000000000052
	oct	000000000003
	oct	000000000000
	oct	000000035422
	oct	000000000046
	oct	000000000003
	oct	000000000000
	oct	000000035470
	oct	000000000043
	oct	000000000003
	oct	000000000000
	oct	000000035533
	oct	000000000105
	oct	000000000003
	oct	000000000000
	oct	000000035640
	oct	000000000065
	oct	000000000003
	oct	000000000000
	oct	000000035725
	oct	000000000140
	oct	000000000003
	oct	000000000000
	oct	000000036065
	oct	000000000032
	oct	000000000003
	oct	000000000000
	oct	000000036117
	oct	000000000144
	oct	000000000003
	oct	000000000000
	oct	000000036263
	oct	000000000123
	oct	000000000003
	oct	000000000000
	oct	000000036406
	oct	000000000107
	oct	000000000003
	oct	000000000000
	oct	000000036515
	oct	000000000110
	oct	000000000002
	oct	000000000000
	oct	000000036625
	oct	000000000047
	oct	000000000003
	oct	000000000000
	oct	000000036674
	oct	000000000100
	oct	000000000004
	oct	000000000000
	oct	000000036774
	oct	000000000053
	oct	000000000002
	oct	000000000000
	oct	000000037047
	oct	000000000052
	oct	000000000003
	oct	000000000000
	oct	000000037121
	oct	000000000023
	oct	000000000003
	oct	000000000000
	oct	000000037144
	oct	000000000073
	oct	000000000003
	oct	000000000000
	oct	000000037237
	oct	000000000100
	oct	000000000003
	oct	000000000000
	oct	000000037337
	oct	000000000141
	oct	000000000003
	oct	000000000000
	oct	000000037500
	oct	000000000071
	oct	000000000003
	oct	000000000000
	oct	000000037571
	oct	000000000107
	oct	000000000003
	oct	000000000000
	oct	000000037700
	oct	000000000022
	oct	000000000003
	oct	000000000000
	oct	000000037722
	oct	000000000056
	oct	000000000003
	oct	000000000000
	oct	000000040000
	oct	000000000056
	oct	000000000003
	oct	000000000000
	oct	000000040056
	oct	000000000056
	oct	000000000003
	oct	000000000000
	oct	000000040134
	oct	000000000051
	oct	000000000003
	oct	000000000000
	oct	000000040205
	oct	000000000047
	oct	000000000003
	oct	000000000000
	oct	000000040254
	oct	000000000047
	oct	000000000003
	oct	000000000000
	oct	000000040323
	oct	000000000046
	oct	000000000003
	oct	000000000000
	oct	000000040371
	oct	000000000042
	oct	000000000003
	oct	000000000000
	oct	000000040433
	oct	000000000045
	oct	000000000003
	oct	000000000000
	oct	000000040500
	oct	000000000046
	oct	000000000003
	oct	000000000000
	oct	000000040546
	oct	000000000052
	oct	000000000003
	oct	000000000000
	oct	000000040620
	oct	000000000042
	oct	000000000003
	oct	000000000000
	oct	000000040662
	oct	000000000043
	oct	000000000003
	oct	000000000000
	oct	000000040725
	oct	000000000105
	oct	000000000003
	oct	000000000000
	oct	000000041032
	oct	000000000055
	oct	000000000003
	oct	000000000000
	oct	000000041107
	oct	000000000047
	oct	000000000003
	oct	000000000000
	oct	000000041156
	oct	000000000046
	oct	000000000003
	oct	000000000000
	oct	000000041224
	oct	000000000055
	oct	000000000003
	oct	000000000000
	oct	000000041301
	oct	000000000045
	oct	000000000003
	oct	000000000000
	oct	000000041346
	oct	000000000060
	oct	000000000003
	oct	000000000000
	oct	000000041426
	oct	000000000132
	oct	000000000003
	oct	000000000000
	oct	000000041560
	oct	000000000055
	oct	000000000003
	oct	000000000000
	oct	000000041635
	oct	000000000047
	oct	000000000003
	oct	000000000000
	oct	000000041704
	oct	000000000073
	oct	000000000003
	oct	000000000000
	oct	000000041777
	oct	000000000150
	oct	000000000003
	oct	000000000000
	oct	000000042147
	oct	000000000067
	oct	000000000003
	oct	000000000000
	oct	000000042236
	oct	000000000103
	oct	000000000003
	oct	000000000000
	oct	000000042341
	oct	000000000074
	oct	000000000003
	oct	000000000000
	oct	000000042435
	oct	000000000104
	oct	000000000003
	oct	000000000000
	oct	000000042541
	oct	000000000114
	oct	000000000003
	oct	000000000000
	oct	000000042655
	oct	000000000046
	oct	000000000003
	oct	000000000000
	oct	000000042723
	oct	000000000112
	oct	000000000003
	oct	000000000000
	oct	000000043035
	oct	000000000102
	oct	000000000003
	oct	000000000000
	oct	000000043137
	oct	000000000146
	oct	000000000003
	oct	000000000000
	oct	000000043305
	oct	000000000056
	oct	000000000003
	oct	000000000000
	oct	000000043363
	oct	000000000056
	oct	000000000003
	oct	000000000000
	oct	000000043441
	oct	000000000044
	oct	000000000003
	oct	000000000000
	oct	000000043505
	oct	000000000054
	oct	000000000003
	oct	000000000000
	oct	000000043561
	oct	000000000037
	oct	000000000003
	oct	000000000000
	oct	000000043620
	oct	000000000040
	oct	000000000003
	oct	000000000000
	oct	000000043660
	oct	000000000051
	oct	000000000003
	oct	000000000000
	oct	000000043731
	oct	000000000051
	oct	000000000003
	oct	000000000000
	oct	000000044002
	oct	000000000111
	oct	000000000003
	oct	000000000000
	oct	000000044113
	oct	000000000065
	oct	000000000003
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000044200
	oct	000000000066
	oct	000000000002
	oct	000000000000
	oct	000000044266
	oct	000000000101
	oct	000000000002
	oct	000000000000
	oct	000000044367
	oct	000000000067
	oct	000000000001
	oct	000000000000
	oct	000000044456
	oct	000000000071
	oct	000000000001
	oct	000000000000
	oct	000000044547
	oct	000000000030
	oct	000000000001
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000044577
	oct	000000000067
	oct	000000000001
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000044666
	oct	000000000064
	oct	000000000003
	oct	000000000000
	oct	000000044752
	oct	000000000130
	oct	000000000003
	oct	000000000000
	oct	000000045102
	oct	000000000035
	oct	000000000003
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000045137
	oct	000000000061
	oct	000000000003
	oct	000000000000
	oct	000000045220
	oct	000000000145
	oct	000000000003
	oct	000000000000
	oct	000000045365
	oct	000000000031
	oct	000000000003
	oct	000000000000
	oct	000000045416
	oct	000000000027
	oct	000000000003
	oct	000000000000
	oct	000000045445
	oct	000000000107
	oct	000000000001
	oct	000000000000
	oct	000000045554
	oct	000000000041
	oct	000000000003
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000045615
	oct	000000000136
	oct	000000000003
	oct	000000000000
	oct	000000045753
	oct	000000000045
	oct	000000000003
	oct	000000000000
	oct	000000046020
	oct	000000000027
	oct	000000000003
	oct	000000000000
	oct	000000046047
	oct	000000000025
	oct	000000000003
	oct	000000000000
	oct	000000046074
	oct	000000000030
	oct	000000000003
	oct	000000000000
	oct	000000046124
	oct	000000000037
	oct	000000000003
	oct	000000000000
	oct	000000046163
	oct	000000000064
	oct	000000000003
	oct	000000000000
	oct	000000046247
	oct	000000000065
	oct	000000000003
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000046334
	oct	000000000031
	oct	000000000003
	oct	000000000000
	oct	000000046365
	oct	000000000117
	oct	000000000003
	oct	000000000000
	oct	000000046504
	oct	000000000076
	oct	000000000001
	oct	000000000000
	oct	000000046602
	oct	000000000102
	oct	000000000002
	oct	000000000000
	oct	000000046704
	oct	000000000055
	oct	000000000002
	oct	000000000000
	oct	000000046761
	oct	000000000072
	oct	000000000001
	oct	000000000000
	oct	000000047053
	oct	000000000102
	oct	000000000003
	oct	000000000000
	oct	000000047155
	oct	000000000102
	oct	000000000003
	oct	000000000000
	oct	000000047257
	oct	000000000033
	oct	000000000003
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000047312
	oct	000000000120
	oct	000000000003
	oct	000000000000
	oct	000000047432
	oct	000000000125
	oct	000000000002
	oct	000000000000
	oct	000000047557
	oct	000000000134
	oct	000000000003
	oct	000000000000
	oct	000000047713
	oct	000000000076
	oct	000000000001
	oct	000000000000
	oct	000000050011
	oct	000000000133
	oct	000000000002
	oct	000000000000
	oct	000000050144
	oct	000000000153
	oct	000000000002
	oct	000000000000
	oct	000000050317
	oct	000000000106
	oct	000000000003
	oct	000000000000
	oct	000000050425
	oct	000000000031
	oct	000000000004
	oct	000000000000
	oct	000000050456
	oct	000000000032
	oct	000000000004
	oct	000000000000
	oct	000000050510
	oct	000000000033
	oct	000000000003
	oct	000000000000
	oct	000000050543
	oct	000000000134
	oct	000000000001
	oct	000000000000
	oct	000000050677
	oct	000000000070
	oct	000000000003
	oct	000000000000
	oct	000000050767
	oct	000000000121
	oct	000000000001
	oct	000000000000
	oct	000000051110
	oct	000000000060
	oct	000000000003
	oct	000000000000
	oct	000000051170
	oct	000000000100
	oct	000000000003
	oct	000000000000
	oct	000000051270
	oct	000000000020
	oct	000000000003
	oct	000000000000
	oct	000000051310
	oct	000000000137
	oct	000000000001
	oct	000000000000
	oct	000000051447
	oct	000000000104
	oct	000000000003
	oct	000000000000
	oct	000000051553
	oct	000000000075
	oct	000000000003
	oct	000000000000
	oct	000000051650
	oct	000000000075
	oct	000000000002
	oct	000000000000
	oct	000000051745
	oct	000000000027
	oct	000000000003
	oct	000000000000
	oct	000000051774
	oct	000000000036
	oct	000000000003
	oct	000000000000
	oct	000000052032
	oct	000000000062
	oct	000000000002
	oct	000000000000
	oct	000000052114
	oct	000000000076
	oct	000000000002
	oct	000000000000
	oct	000000052212
	oct	000000000107
	oct	000000000003
	oct	000000000000
	oct	000000052321
	oct	000000000037
	oct	000000000003
	oct	000000000000
	oct	000000052360
	oct	000000000055
	oct	000000000002
	oct	000000000000
	oct	000000052435
	oct	000000000134
	oct	000000000001
	oct	000000000000
	oct	000000052571
	oct	000000000114
	oct	000000000002
	oct	000000000000
	oct	000000052705
	oct	000000000130
	oct	000000000001
	oct	000000000000
	oct	000000053035
	oct	000000000062
	oct	000000000003
	oct	000000000000
	oct	000000053117
	oct	000000000041
	oct	000000000001
	oct	000000000000
	oct	000000053160
	oct	000000000073
	oct	000000000003
	oct	000000000000
	oct	000000053253
	oct	000000000057
	oct	000000000003
	oct	000000000000
	oct	000000053332
	oct	000000000110
	oct	000000000002
	oct	000000000000
	oct	000000053442
	oct	000000000066
	oct	000000000003
	oct	000000000000
	oct	000000053530
	oct	000000000056
	oct	000000000003
	oct	000000000000
	oct	000000053606
	oct	000000000051
	oct	000000000003
	oct	000000000000
	oct	000000053657
	oct	000000000051
	oct	000000000003
	oct	000000000000
	oct	000000053730
	oct	000000000070
	oct	000000000003
	oct	000000000000
	oct	000000054020
	oct	000000000104
	oct	000000000003
	oct	000000000000
	oct	000000054124
	oct	000000000104
	oct	000000000003
	oct	000000000000
	oct	000000054230
	oct	000000000104
	oct	000000000003
	oct	000000000000
	oct	000000054334
	oct	000000000110
	oct	000000000003
	oct	000000000000
	oct	000000054444
	oct	000000000110
	oct	000000000003
	oct	000000000000
	oct	000000054554
	oct	000000000060
	oct	000000000003
	oct	000000000000
	oct	000000054634
	oct	000000000131
	oct	000000000003
	oct	000000000000
	oct	000000054765
	oct	000000000125
	oct	000000000002
	oct	000000000000
	oct	000000055112
	oct	000000000111
	oct	000000000002
	oct	000000000000
	oct	000000055223
	oct	000000000125
	oct	000000000002
	oct	000000000000
	oct	000000055350
	oct	000000000125
	oct	000000000003
	oct	000000000000
	oct	000000055475
	oct	000000000211
	oct	000000000003
	oct	000000000000
	oct	000000055706
	oct	000000000132
	oct	000000000003
	oct	000000000000
	oct	000000056040
	oct	000000000110
	oct	000000000002
	oct	000000000000
	oct	000000056150
	oct	000000000152
	oct	000000000002
	oct	000000000000
	oct	000000056322
	oct	000000000175
	oct	000000000002
	oct	000000000000
	oct	000000056517
	oct	000000000136
	oct	000000000003
	oct	000000000000
	oct	000000056655
	oct	000000000151
	oct	000000000003
	oct	000000000000
	oct	000000057026
	oct	000000000260
	oct	000000000003
	oct	000000000000
	oct	000000057306
	oct	000000000202
	oct	000000000003
	oct	000000000000
	oct	000000057510
	oct	000000000173
	oct	000000000002
	oct	000000000000
	oct	000000057703
	oct	000000000216
	oct	000000000002
	oct	000000000000
	oct	000000060121
	oct	000000000066
	oct	000000000002
	oct	000000000000
	oct	000000060207
	oct	000000000202
	oct	000000000003
	oct	000000000000
	oct	000000060411
	oct	000000000207
	oct	000000000003
	oct	000000000000
	oct	000000060620
	oct	000000000164
	oct	000000000003
	oct	000000000000
	oct	000000061004
	oct	000000000220
	oct	000000000003
	oct	000000000000
	oct	000000061224
	oct	000000000203
	oct	000000000003
	oct	000000000000
	oct	000000061427
	oct	000000000143
	oct	000000000003
	oct	000000000000
	oct	000000061572
	oct	000000000160
	oct	000000000003
	oct	000000000000
	oct	000000061752
	oct	000000000072
	oct	000000000003
	oct	000000000000
	oct	000000062044
	oct	000000000116
	oct	000000000003
	oct	000000000000
	oct	000000062162
	oct	000000000122
	oct	000000000003
	oct	000000000000
	oct	000000062304
	oct	000000000115
	oct	000000000003
	oct	000000000000
	oct	000000062421
	oct	000000000114
	oct	000000000003
	oct	000000000000
	oct	000000062535
	oct	000000000152
	oct	000000000003
	oct	000000000000
	oct	000000062707
	oct	000000000064
	oct	000000000003
	oct	000000000000
	oct	000000062773
	oct	000000000224
	oct	000000000003
	oct	000000000000
	oct	000000063217
	oct	000000000037
	oct	000000000003
	oct	000000000000
	oct	000000063256
	oct	000000000266
	oct	000000000003
	oct	000000000000
	oct	000000063544
	oct	000000000051
	oct	000000000003
	oct	000000000000
	oct	000000063615
	oct	000000000215
	oct	000000000003
	oct	000000000000
	oct	000000064032
	oct	000000000077
	oct	000000000003
	oct	000000000000
	oct	000000064131
	oct	000000000064
	oct	000000000002
	oct	000000000000
	oct	000000064215
	oct	000000000205
	oct	000000000003
	oct	000000000000
	oct	000000064422
	oct	000000000074
	oct	000000000003
	oct	000000000000
	oct	000000064516
	oct	000000000142
	oct	000000000003
	oct	000000000000
	oct	000000064660
	oct	000000000134
	oct	000000000003
	oct	000000000000
	oct	000000065014
	oct	000000000102
	oct	000000000003
	oct	000000000000
	oct	000000065116
	oct	000000000136
	oct	000000000003
	oct	000000000000
	oct	000000065254
	oct	000000000215
	oct	000000000003
	oct	000000000000
	oct	000000065471
	oct	000000000210
	oct	000000000003
	oct	000000000000
	oct	000000065701
	oct	000000000214
	oct	000000000003
	oct	000000000000
	oct	000000066115
	oct	000000000144
	oct	000000000003
	oct	000000000000
	oct	000000066261
	oct	000000000160
	oct	000000000003
	oct	000000000000
	oct	000000066441
	oct	000000000101
	oct	000000000003
	oct	000000000000
	oct	000000066542
	oct	000000000134
	oct	000000000003
	oct	000000000000
	oct	000000066676
	oct	000000000044
	oct	000000000003
	oct	000000000000
	oct	000000066742
	oct	000000000113
	oct	000000000003
	oct	000000000000
	oct	000000067055
	oct	000000000072
	oct	000000000003
	oct	000000000000
	oct	000000067147
	oct	000000000141
	oct	000000000003
	oct	000000000000
	oct	000000067310
	oct	000000000126
	oct	000000000003
	oct	000000000000
	oct	000000067436
	oct	000000000106
	oct	000000000003
	oct	000000000000
	oct	000000067544
	oct	000000000066
	oct	000000000003
	oct	000000000000
	oct	000000067632
	oct	000000000073
	oct	000000000003
	oct	000000000000
	oct	000000067725
	oct	000000000133
	oct	000000000002
	oct	000000000000
	oct	000000070060
	oct	000000000172
	oct	000000000002
	oct	000000000000
	oct	000000070252
	oct	000000000127
	oct	000000000003
	oct	000000000000
	oct	000000070401
	oct	000000000073
	oct	000000000002
	oct	000000000000
	oct	000000070474
	oct	000000000114
	oct	000000000003
	oct	000000000000
	oct	000000070610
	oct	000000000112
	oct	000000000002
	oct	000000000000
	oct	000000070722
	oct	000000000160
	oct	000000000002
	oct	000000000000
	oct	000000071102
	oct	000000000136
	oct	000000000002
	oct	000000000000
	oct	000000071240
	oct	000000000152
	oct	000000000002
	oct	000000000000
	oct	000000071412
	oct	000000000160
	oct	000000000002
	oct	000000000000
	oct	000000071572
	oct	000000000212
	oct	000000000003
	oct	000000000000
	oct	000000072004
	oct	000000000114
	oct	000000000003
	oct	000000000000
	oct	000000072120
	oct	000000000107
	oct	000000000003
	oct	000000000000
	oct	000000072227
	oct	000000000143
	oct	000000000003
	oct	000000000000
	oct	000000072372
	oct	000000000223
	oct	000000000003
	oct	000000000000
	oct	000000072615
	oct	000000000113
	oct	000000000003
	oct	000000000000
	oct	000000072730
	oct	000000000103
	oct	000000000003
	oct	000000000000
	oct	000000073033
	oct	000000000204
	oct	000000000003
	oct	000000000000
	oct	000000073237
	oct	000000000162
	oct	000000000003
	oct	000000000000
	oct	000000073421
	oct	000000000330
	oct	000000000003
	oct	000000000000
	oct	000000073751
	oct	000000000220
	oct	000000000003
	oct	000000000000
	oct	000000074171
	oct	000000000236
	oct	000000000003
	oct	000000000000
	oct	000000074427
	oct	000000000171
	oct	000000000003
	oct	000000000000
	oct	000000074620
	oct	000000000254
	oct	000000000003
	oct	000000000000
	oct	000000075074
	oct	000000000207
	oct	000000000003
	oct	000000000000
	oct	000000075303
	oct	000000000225
	oct	000000000003
	oct	000000000000
	oct	000000075530
	oct	000000000220
	oct	000000000003
	oct	000000000000
	oct	000000075750
	oct	000000000160
	oct	000000000003
	oct	000000000000
	oct	000000076130
	oct	000000000262
	oct	000000000003
	oct	000000000000
	oct	000000076412
	oct	000000000222
	oct	000000000003
	oct	000000000000
	oct	000000076634
	oct	000000000211
	oct	000000000003
	oct	000000000000
	oct	000000077045
	oct	000000000162
	oct	000000000003
	oct	000000000000
	oct	000000077227
	oct	000000000202
	oct	000000000003
	oct	000000000000
	oct	000000077431
	oct	000000000136
	oct	000000000003
	oct	000000000000
	oct	000000077567
	oct	000000000302
	oct	000000000003
	oct	000000000000
	oct	000000100071
	oct	000000000206
	oct	000000000003
	oct	000000000000
	oct	000000100277
	oct	000000000204
	oct	000000000003
	oct	000000000000
	oct	000000100503
	oct	000000000211
	oct	000000000003
	oct	000000000000
	oct	000000100714
	oct	000000000244
	oct	000000000003
	oct	000000000000
	oct	000000101160
	oct	000000000216
	oct	000000000003
	oct	000000000000
	oct	000000101376
	oct	000000000024
	oct	000000000003
	oct	000000000000
	oct	000000101422
	oct	000000000032
	oct	000000000003
	oct	000000000000
	oct	000000101454
	oct	000000000024
	oct	000000000003
	oct	000000000000
	oct	000000101500
	oct	000000000025
	oct	000000000003
	oct	000000000000
	oct	000000101525
	oct	000000000037
	oct	000000000003
	oct	000000000000
	oct	000000101564
	oct	000000000036
	oct	000000000003
	oct	000000000000
	oct	000000101622
	oct	000000000037
	oct	000000000003
	oct	000000000000
	oct	000000101661
	oct	000000000026
	oct	000000000003
	oct	000000000000
	oct	000000101707
	oct	000000000027
	oct	000000000003
	oct	000000000000
	oct	000000101736
	oct	000000000026
	oct	000000000003
	oct	000000000000
	oct	000000101764
	oct	000000000025
	oct	000000000003
	oct	000000000000
	oct	000000102011
	oct	000000000023
	oct	000000000003
	oct	000000000000
	oct	000000102034
	oct	000000000024
	oct	000000000003
	oct	000000000000
	oct	000000102060
	oct	000000000024
	oct	000000000003
	oct	000000000000
	oct	000000102104
	oct	000000000030
	oct	000000000003
	oct	000000000000
	oct	000000102134
	oct	000000000024
	oct	000000000003
	oct	000000000000
	oct	000000102160
	oct	000000000036
	oct	000000000003
	oct	000000000000
	oct	000000102216
	oct	000000000055
	oct	000000000003
	oct	000000000000
	oct	000000102273
	oct	000000000063
	oct	000000000003
	oct	000000000000
	oct	000000102356
	oct	000000000123
	oct	000000000002
	oct	000000000000
	oct	000000102501
	oct	000000000033
	oct	000000000003
	oct	000000000000
	oct	000000102534
	oct	000000000032
	oct	000000000003
	oct	000000000000
	oct	000000102566
	oct	000000000043
	oct	000000000003
	oct	000000000000
	oct	000000102631
	oct	000000000067
	oct	000000000003
	oct	000000000000
	oct	000000102720
	oct	000000000107
	oct	000000000003
	oct	000000000000
	oct	000000103027
	oct	000000000131
	oct	000000000001
	oct	000000000000
	oct	000000103160
	oct	000000000046
	oct	000000000002
	oct	000000000000
	oct	000000103226
	oct	000000000042
	oct	000000000003
	oct	000000000000
	oct	000000103270
	oct	000000000025
	oct	000000000003
	oct	000000000000
	oct	000000103315
	oct	000000000057
	oct	000000000003
	oct	000000000000
	oct	000000103374
	oct	000000000074
	oct	000000000003
	oct	000000000000
	oct	000000103470
	oct	000000000037
	oct	000000000003
	oct	000000000000
	oct	000000103527
	oct	000000000027
	oct	000000000003
	oct	000000000000
	oct	000000103556
	oct	000000000066
	oct	000000000003
	oct	000000000000
	oct	000000103644
	oct	000000000035
	oct	000000000003
	oct	000000000000
	oct	000000103701
	oct	000000000042
	oct	000000000003
	oct	000000000000
	oct	000000103743
	oct	000000000041
	oct	000000000003
	oct	000000000000
	oct	000000104004
	oct	000000000123
	oct	000000000003
	oct	000000000000
	oct	000000104127
	oct	000000000101
	oct	000000000003
	oct	000000000000
	oct	000000104230
	oct	000000000061
	oct	000000000003
	oct	000000000000
	oct	000000104311
	oct	000000000032
	oct	000000000003
	oct	000000000000
	oct	000000104343
	oct	000000000054
	oct	000000000003
	oct	000000000000
	oct	000000104417
	oct	000000000110
	oct	000000000003
	oct	000000000000
	oct	000000104527
	oct	000000000054
	oct	000000000003
	oct	000000000000
	oct	000000104603
	oct	000000000105
	oct	000000000003
	oct	000000000000
	oct	000000104710
	oct	000000000076
	oct	000000000003
	oct	000000000000
	oct	000000105006
	oct	000000000050
	oct	000000000003
	oct	000000000000
	oct	000000105056
	oct	000000000030
	oct	000000000003
	oct	000000000000
	oct	000000105106
	oct	000000000057
	oct	000000000003
	oct	000000000000
	oct	000000105165
	oct	000000000047
	oct	000000000003
	oct	000000000000
	oct	000000105234
	oct	000000000041
	oct	000000000003
	oct	000000000000
	oct	000000105275
	oct	000000000026
	oct	000000000003
	oct	000000000000
	oct	000000105323
	oct	000000000050
	oct	000000000003
	oct	000000000000
	oct	000000105373
	oct	000000000045
	oct	000000000003
	oct	000000000000
	oct	000000105440
	oct	000000000036
	oct	000000000003
	oct	000000000000
	oct	000000105476
	oct	000000000035
	oct	000000000003
	oct	000000000000
	oct	000000105533
	oct	000000000031
	oct	000000000003
	oct	000000000000
	oct	000000105564
	oct	000000000062
	oct	000000000003
	oct	000000000000
	oct	000000105646
	oct	000000000045
	oct	000000000003
	oct	000000000000
	oct	000000105713
	oct	000000000031
	oct	000000000003
	oct	000000000000
	oct	000000105744
	oct	000000000034
	oct	000000000003
	oct	000000000000
	oct	000000106000
	oct	000000000034
	oct	000000000003
	oct	000000000000
	oct	000000106034
	oct	000000000030
	oct	000000000003
	oct	000000000000
	oct	000000106064
	oct	000000000063
	oct	000000000003
	oct	000000000000
	oct	000000106147
	oct	000000000027
	oct	000000000003
	oct	000000000000
	oct	000000106176
	oct	000000000047
	oct	000000000003
	oct	000000000000
	oct	000000106245
	oct	000000000052
	oct	000000000003
	oct	000000000000
	oct	000000106317
	oct	000000000055
	oct	000000000003
	oct	000000000000
	oct	000000106374
	oct	000000000053
	oct	000000000003
	oct	000000000000
	oct	000000106447
	oct	000000000031
	oct	000000000003
	oct	000000000000
	oct	000000106500
	oct	000000000061
	oct	000000000003
	oct	000000000000
	oct	000000106561
	oct	000000000117
	oct	000000000003
	oct	000000000000
	oct	000000106700
	oct	000000000054
	oct	000000000003
	oct	000000000000
	oct	000000106754
	oct	000000000030
	oct	000000000003
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000107004
	oct	000000000050
	oct	000000000003
	oct	000000000000
	oct	000000107054
	oct	000000000062
	oct	000000000003
	oct	000000000000
	oct	000000107136
	oct	000000000034
	oct	000000000003
	oct	000000000000
	oct	000000107172
	oct	000000000053
	oct	000000000003
	oct	000000000000
	oct	000000107245
	oct	000000000072
	oct	000000000003
	oct	000000000000
	oct	000000107337
	oct	000000000051
	oct	000000000003
	oct	000000000000
	oct	000000107410
	oct	000000000035
	oct	000000000003
	oct	000000000000
	oct	000000107445
	oct	000000000033
	oct	000000000003
	oct	000000000000
	oct	000000107500
	oct	000000000045
	oct	000000000003
	oct	000000000000
	oct	000000107545
	oct	000000000032
	oct	000000000003
	oct	000000000000
	oct	000000107577
	oct	000000000033
	oct	000000000003
	oct	000000000000
	oct	000000107632
	oct	000000000032
	oct	000000000003
	oct	000000000000
	oct	000000107664
	oct	000000000050
	oct	000000000003
	oct	000000000000
	oct	000000107734
	oct	000000000051
	oct	000000000003
	oct	000000000000
	oct	000000110005
	oct	000000000037
	oct	000000000003
	oct	000000000000
	oct	000000110044
	oct	000000000050
	oct	000000000003
	oct	000000000000
	oct	000000110114
	oct	000000000032
	oct	000000000003
	oct	000000000000
	oct	000000110146
	oct	000000000055
	oct	000000000003
	oct	000000000000
	oct	000000110223
	oct	000000000056
	oct	000000000003
	oct	000000000000
	oct	000000110301
	oct	000000000065
	oct	000000000003
	oct	000000000000
	oct	000000110366
	oct	000000000051
	oct	000000000003
	oct	000000000000
	oct	000000110437
	oct	000000000052
	oct	000000000003
	oct	000000000000
	oct	000000110511
	oct	000000000050
	oct	000000000003
	oct	000000000000
	oct	000000110561
	oct	000000000032
	oct	000000000003
	oct	000000000000
	oct	000000110613
	oct	000000000060
	oct	000000000003
	oct	000000000000
	oct	000000110673
	oct	000000000123
	oct	000000000003
	oct	000000000000
	oct	000000111016
	oct	000000000041
	oct	000000000003
	oct	000000000000
	oct	000000111057
	oct	000000000056
	oct	000000000003
	oct	000000000000
	oct	000000111135
	oct	000000000067
	oct	000000000003
	oct	000000000000
	oct	000000111224
	oct	000000000104
	oct	000000000003
	oct	000000000000
	oct	000000111330
	oct	000000000044
	oct	000000000003
	oct	000000000000
	oct	000000111374
	oct	000000000060
	oct	000000000003
	oct	000000000000
	oct	000000111454
	oct	000000000055
	oct	000000000003
	oct	000000000000
	oct	000000111531
	oct	000000000027
	oct	000000000003
	oct	000000000000
	oct	000000111560
	oct	000000000035
	oct	000000000003
	oct	000000000000
	oct	000000111615
	oct	000000000035
	oct	000000000003
	oct	000000000000
	oct	000000111652
	oct	000000000053
	oct	000000000003
	oct	000000000000
	oct	000000111725
	oct	000000000117
	oct	000000000003
	oct	000000000000
	oct	000000112044
	oct	000000000046
	oct	000000000003
	oct	000000000000
	oct	000000112112
	oct	000000000041
	oct	000000000003
	oct	000000000000
	oct	000000112153
	oct	000000000105
	oct	000000000003
	oct	000000000000
	oct	000000112260
	oct	000000000077
	oct	000000000003
	oct	000000000000
	oct	000000112357
	oct	000000000054
	oct	000000000003
	oct	000000000000
	oct	000000112433
	oct	000000000100
	oct	000000000003
	oct	000000000000
	oct	000000112533
	oct	000000000102
	oct	000000000003
	oct	000000000000
	oct	000000112635
	oct	000000000064
	oct	000000000003
	oct	000000000000
	oct	000000112721
	oct	000000000055
	oct	000000000003
	oct	000000000000
	oct	000000112776
	oct	000000000075
	oct	000000000003
	oct	000000000000
	oct	000000113073
	oct	000000000047
	oct	000000000003
	oct	000000000000
	oct	000000113142
	oct	000000000031
	oct	000000000003
	oct	000000000000
	oct	000000113173
	oct	000000000047
	oct	000000000003
	oct	000000000000
	oct	000000113242
	oct	000000000050
	oct	000000000003
	oct	000000000000
	oct	000000113312
	oct	000000000053
	oct	000000000003
	oct	000000000000
	oct	000000113365
	oct	000000000065
	oct	000000000003
	oct	000000000000
	oct	000000113452
	oct	000000000064
	oct	000000000003
	oct	000000000000
	oct	000000113536
	oct	000000000034
	oct	000000000003
	oct	000000000000
	oct	000000113572
	oct	000000000037
	oct	000000000003
	oct	000000000000
	oct	000000113631
	oct	000000000040
	oct	000000000003
	oct	000000000000
	oct	000000113671
	oct	000000000036
	oct	000000000003
	oct	000000000000
	oct	000000113727
	oct	000000000032
	oct	000000000003
	oct	000000000000
	oct	000000113761
	oct	000000000064
	oct	000000000003
	oct	000000000000
	oct	000000114045
	oct	000000000040
	oct	000000000003
	oct	000000000000
	oct	000000114105
	oct	000000000053
	oct	000000000003
	oct	000000000000
	oct	000000114160
	oct	000000000047
	oct	000000000003
	oct	000000000000
	oct	000000114227
	oct	000000000135
	oct	000000000003
	oct	000000000000
	oct	000000114364
	oct	000000000056
	oct	000000000003
	oct	000000000000
	oct	000000114442
	oct	000000000027
	oct	000000000003
	oct	000000000000
	oct	000000114471
	oct	000000000044
	oct	000000000003
	oct	000000000000
	oct	000000114535
	oct	000000000041
	oct	000000000003
	oct	000000000000
	oct	000000114576
	oct	000000000061
	oct	000000000002
	oct	000000000000
	oct	000000114657
	oct	000000000137
	oct	000000000002
	oct	000000000000
	oct	000000115016
	oct	000000000046
	oct	000000000003
	oct	000000000000
	oct	000000115064
	oct	000000000037
	oct	000000000003
	oct	000000000000
	oct	000000115123
	oct	000000000052
	oct	000000000003
	oct	000000000000
	oct	000000115175
	oct	000000000042
	oct	000000000003
	oct	000000000000
	oct	000000115237
	oct	000000000035
	oct	000000000002
	oct	000000000000
	oct	000000115274
	oct	000000000072
	oct	000000000003
	oct	000000000000
	oct	000000115366
	oct	000000000030
	oct	000000000003
	oct	000000000000
	oct	000000115416
	oct	000000000074
	oct	000000000003
	oct	000000000000
	oct	000000115512
	oct	000000000032
	oct	000000000003
	oct	000000000000
	oct	000000115544
	oct	000000000121
	oct	000000000003
	oct	000000000000
	oct	000000115665
	oct	000000000030
	oct	000000000003
	oct	000000000000
	oct	000000115715
	oct	000000000025
	oct	000000000003
	oct	000000000000
	oct	000000115742
	oct	000000000027
	oct	000000000003
	oct	000000000000
	oct	000000115771
	oct	000000000073
	oct	000000000003
	oct	000000000000
	oct	000000116064
	oct	000000000115
	oct	000000000003
	oct	000000000000
	oct	000000116201
	oct	000000000077
	oct	000000000003
	oct	000000000000
	oct	000000116300
	oct	000000000036
	oct	000000000003
	oct	000000000000
	oct	000000116336
	oct	000000000034
	oct	000000000003
	oct	000000000000
	oct	000000116372
	oct	000000000053
	oct	000000000003
	oct	000000000000
	oct	000000116445
	oct	000000000064
	oct	000000000003
	oct	000000000000
	oct	000000116531
	oct	000000000107
	oct	000000000002
	oct	000000000000
	oct	000000116640
	oct	000000000072
	oct	000000000001
	oct	000000000000
	oct	000000116732
	oct	000000000130
	oct	000000000003
	oct	000000000000
	oct	000000117062
	oct	000000000066
	oct	000000000001
	oct	000000000000
	oct	000000117150
	oct	000000000112
	oct	000000000003
	oct	000000000000
	oct	000000117262
	oct	000000000112
	oct	000000000003
	oct	000000000000
	oct	000000117374
	oct	000000000123
	oct	000000000003
	oct	000000000000
	oct	000000117517
	oct	000000000115
	oct	000000000003
	oct	000000000000
	oct	000000117634
	oct	000000000032
	oct	000000000001
	oct	000000000000
	oct	000000117666
	oct	000000000107
	oct	000000000001
	oct	000000000000
	oct	000000117775
	oct	000000000024
	oct	000000000003
	oct	000000000000
	oct	000000120021
	oct	000000000030
	oct	000000000003
	oct	000000000000
	oct	000000120051
	oct	000000000040
	oct	000000000003
	oct	000000000000
	oct	000000120111
	oct	000000000046
	oct	000000000003
	oct	000000000000
	oct	000000120157
	oct	000000000055
	oct	000000000003
	oct	000000000000
	oct	000000120234
	oct	000000000060
	oct	000000000003
	oct	000000000000
	oct	000000120314
	oct	000000000035
	oct	000000000003
	oct	000000000000
	oct	000000120351
	oct	000000000035
	oct	000000000001
	oct	000000000000
	oct	000000120406
	oct	000000000030
	oct	000000000001
	oct	000000000000
	oct	000000120436
	oct	000000000055
	oct	000000000003
	oct	000000000000
	oct	000000120513
	oct	000000000076
	oct	000000000003
	oct	000000000000
	oct	000000120611
	oct	000000000057
	oct	000000000003
	oct	000000000000
	oct	000000120670
	oct	000000000035
	oct	000000000003
	oct	000000000000
	oct	000000120725
	oct	000000000024
	oct	000000000003
	oct	000000000000
	oct	000000120751
	oct	000000000037
	oct	000000000003
	oct	000000000000
	oct	000000121010
	oct	000000000075
	oct	000000000003
	oct	000000000000
	oct	000000121105
	oct	000000000044
	oct	000000000003
	oct	000000000000
	oct	000000121151
	oct	000000000031
	oct	000000000003
	oct	000000000000
	oct	000000121202
	oct	000000000053
	oct	000000000003
	oct	000000000000
	oct	000000121255
	oct	000000000057
	oct	000000000003
	oct	000000000000
	oct	000000121334
	oct	000000000045
	oct	000000000003
	oct	000000000000
	oct	000000121401
	oct	000000000051
	oct	000000000003
	oct	000000000000
	oct	000000121452
	oct	000000000114
	oct	000000000003
	oct	000000000000
	oct	000000121566
	oct	000000000041
	oct	000000000003
	oct	000000000000
	oct	000000121627
	oct	000000000123
	oct	000000000003
	oct	000000000000
	oct	000000121752
	oct	000000000104
	oct	000000000003
	oct	000000000000
	oct	000000122056
	oct	000000000063
	oct	000000000004
	oct	000000000000
	oct	000000122141
	oct	000000000043
	oct	000000000003
	oct	000000000000
	oct	000000122204
	oct	000000000030
	oct	000000000003
	oct	000000000000
	oct	000000122234
	oct	000000000060
	oct	000000000003
	oct	000000000000
	oct	000000122314
	oct	000000000100
	oct	000000000003
	oct	000000000000
	oct	000000122414
	oct	000000000141
	oct	000000000003
	oct	000000000000
	oct	000000122555
	oct	000000000060
	oct	000000000003
	oct	000000000000
	oct	000000122635
	oct	000000000031
	oct	000000000003
	oct	000000000000
	oct	000000122666
	oct	000000000043
	oct	000000000003
	oct	000000000000
	oct	000000122731
	oct	000000000065
	oct	000000000002
	oct	000000000000
	oct	000000123016
	oct	000000000063
	oct	000000000002
	oct	000000000000
	oct	000000123101
	oct	000000000066
	oct	000000000002
	oct	000000000000
	oct	000000123167
	oct	000000000064
	oct	000000000002
	oct	000000000000
	oct	000000123253
	oct	000000000067
	oct	000000000002
	oct	000000000000
	oct	000000123342
	oct	000000000065
	oct	000000000002
	oct	000000000000
	oct	000000123427
	oct	000000000064
	oct	000000000002
	oct	000000000000
	oct	000000123513
	oct	000000000064
	oct	000000000002
	oct	000000000000
	oct	000000123577
	oct	000000000065
	oct	000000000002
	oct	000000000000
	oct	000000123664
	oct	000000000027
	oct	000000000003
	oct	000000000000
	oct	000000123713
	oct	000000000050
	oct	000000000003
	oct	000000000000
	oct	000000123763
	oct	000000000066
	oct	000000000003
	oct	000000000000
	oct	000000124051
	oct	000000000037
	oct	000000000003
	oct	000000000000
	oct	000000124110
	oct	000000000056
	oct	000000000003
	oct	000000000000
	oct	000000124166
	oct	000000000064
	oct	000000000003
	oct	000000000000
	oct	000000124252
	oct	000000000026
	oct	000000000003
	oct	000000000000
	oct	000000124300
	oct	000000000061
	oct	000000000003
	oct	000000000000
	oct	000000124361
	oct	000000000045
	oct	000000000003
	oct	000000000000
	oct	000000124426
	oct	000000000063
	oct	000000000003
	oct	000000000000
	oct	000000124511
	oct	000000000035
	oct	000000000003
	oct	000000000000
	oct	000000124546
	oct	000000000045
	oct	000000000003
	oct	000000000000
	oct	000000124613
	oct	000000000042
	oct	000000000003
	oct	000000000000
	oct	000000124655
	oct	000000000036
	oct	000000000003
	oct	000000000000
	oct	000000124713
	oct	000000000036
	oct	000000000003
	oct	000000000000
	oct	000000124751
	oct	000000000032
	oct	000000000003
	oct	000000000000
	oct	000000125003
	oct	000000000046
	oct	000000000003
	oct	000000000000
	oct	000000125051
	oct	000000000051
	oct	000000000003
	oct	000000000000
	oct	000000125122
	oct	000000000100
	oct	000000000003
	oct	000000000000
	oct	000000125222
	oct	000000000060
	oct	000000000003
	oct	000000000000
	oct	000000125302
	oct	000000000027
	oct	000000000003
	oct	000000000000
	oct	000000125331
	oct	000000000075
	oct	000000000003
	oct	000000000000
	oct	000000125426
	oct	000000000045
	oct	000000000003
	oct	000000000000
	oct	000000125473
	oct	000000000046
	oct	000000000003
	oct	000000000000
	oct	000000125541
	oct	000000000060
	oct	000000000002
	oct	000000000000
	oct	000000125621
	oct	000000000033
	oct	000000000003
	oct	000000000000
	oct	000000125654
	oct	000000000136
	oct	000000000003
	oct	000000000000
	oct	000000126012
	oct	000000000047
	oct	000000000003
	oct	000000000000
	oct	000000126061
	oct	000000000151
	oct	000000000003
	oct	000000000000
	oct	000000126232
	oct	000000000110
	oct	000000000003
	oct	000000000000
	oct	000000126342
	oct	000000000153
	oct	000000000003
	oct	000000000000
	oct	000000126515
	oct	000000000033
	oct	000000000003
	oct	000000000000
	oct	000000126550
	oct	000000000153
	oct	000000000003
	oct	000000000000
	oct	000000126723
	oct	000000000034
	oct	000000000003
	oct	000000000000
	oct	000000126757
	oct	000000000034
	oct	000000000003
	oct	000000000000
	oct	000000127013
	oct	000000000104
	oct	000000000003
	oct	000000000000
	oct	000000127117
	oct	000000000130
	oct	000000000003
	oct	000000000000
	oct	000000127247
	oct	000000000106
	oct	000000000003
	oct	000000000000
	oct	000000127355
	oct	000000000075
	oct	000000000003
	oct	000000000000
	oct	000000127452
	oct	000000000117
	oct	000000000003
	oct	000000000000
	oct	000000127571
	oct	000000000117
	oct	000000000003
	oct	000000000000
	oct	000000127710
	oct	000000000113
	oct	000000000003
	oct	000000000000
	oct	000000130023
	oct	000000000107
	oct	000000000003
	oct	000000000000
	oct	000000130132
	oct	000000000116
	oct	000000000003
	oct	000000000000
	oct	000000130250
	oct	000000000107
	oct	000000000003
	oct	000000000000
	oct	000000130357
	oct	000000000067
	oct	000000000003
	oct	000000000000
	oct	000000130446
	oct	000000000107
	oct	000000000003
	oct	000000000000
	oct	000000130555
	oct	000000000065
	oct	000000000003
	oct	000000000000
	oct	000000130642
	oct	000000000055
	oct	000000000002
	oct	000000000000
	oct	000000130717
	oct	000000000106
	oct	000000000002
	oct	000000000000
	oct	000000131025
	oct	000000000042
	oct	000000000003
	oct	000000000000
	oct	000000131067
	oct	000000000041
	oct	000000000001
	oct	000000000000
	oct	000000131130
	oct	000000000041
	oct	000000000001
	oct	000000000000
	oct	000000131171
	oct	000000000076
	oct	000000000003
	oct	000000000000
	oct	000000131267
	oct	000000000106
	oct	000000000003
	oct	000000000000
	oct	000000131375
	oct	000000000055
	oct	000000000001
	oct	000000000000
	oct	000000131452
	oct	000000000073
	oct	000000000003
	oct	000000000000
	oct	000000131545
	oct	000000000063
	oct	000000000003
	oct	000000000000
	oct	000000131630
	oct	000000000062
	oct	000000000003
	oct	000000000000
	oct	000000131712
	oct	000000000032
	oct	000000000003
	oct	000000000000
	oct	000000131744
	oct	000000000034
	oct	000000000003
	oct	000000000000
	oct	000000132000
	oct	000000000075
	oct	000000000003
	oct	000000000000
	oct	000000132075
	oct	000000000121
	oct	000000000001
	oct	000000000000
	oct	000000132216
	oct	000000000035
	oct	000000000002
	oct	000000000000
	oct	000000132253
	oct	000000000044
	oct	000000000003
	oct	000000000000
	oct	000000132317
	oct	000000000043
	oct	000000000002
	oct	000000000000
	oct	000000132362
	oct	000000000042
	oct	000000000003
	oct	000000000000
	oct	000000132424
	oct	000000000074
	oct	000000000003
	oct	000000000000
	oct	000000132520
	oct	000000000110
	oct	000000000002
	oct	000000000000
	oct	000000132630
	oct	000000000077
	oct	000000000003
	oct	000000000000
	oct	000000132727
	oct	000000000036
	oct	000000000003
	oct	000000000000
	oct	000000132765
	oct	000000000062
	oct	000000000003
	oct	000000000000
	oct	000000133047
	oct	000000000074
	oct	000000000003
	oct	000000000000
	oct	000000133143
	oct	000000000133
	oct	000000000003
	oct	000000000000
	oct	000000133276
	oct	000000000040
	oct	000000000003
	oct	000000000000
	oct	000000133336
	oct	000000000041
	oct	000000000003
	oct	000000000000
	oct	000000133377
	oct	000000000037
	oct	000000000003
	oct	000000000000
	oct	000000133436
	oct	000000000040
	oct	000000000003
	oct	000000000000
	oct	000000133476
	oct	000000000045
	oct	000000000002
	oct	000000000000
	oct	000000133543
	oct	000000000066
	oct	000000000003
	oct	000000000000
	oct	000000133631
	oct	000000000070
	oct	000000000003
	oct	000000000000
	oct	000000133721
	oct	000000000066
	oct	000000000003
	oct	000000000000
	oct	000000134007
	oct	000000000104
	oct	000000000003
	oct	000000000000
	oct	000000134113
	oct	000000000104
	oct	000000000003
	oct	000000000000
	oct	000000134217
	oct	000000000024
	oct	000000000003
	oct	000000000000
	oct	000000134243
	oct	000000000043
	oct	000000000003
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000134306
	oct	000000000027
	oct	000000000003
	oct	000000000000
	oct	000000134335
	oct	000000000044
	oct	000000000003
	oct	000000000000
	oct	000000134401
	oct	000000000026
	oct	000000000003
	oct	000000000000
	oct	000000134427
	oct	000000000073
	oct	000000000003
	oct	000000000000
	oct	000000134522
	oct	000000000137
	oct	000000000003
	oct	000000000000
	oct	000000134661
	oct	000000000035
	oct	000000000003
	oct	000000000000
	oct	000000134716
	oct	000000000025
	oct	000000000003
	oct	000000000000
	oct	000000134743
	oct	000000000032
	oct	000000000003
	oct	000000000000
	oct	000000134775
	oct	000000000026
	oct	000000000003
	oct	000000000000
	oct	000000135023
	oct	000000000027
	oct	000000000003
	oct	000000000000
	oct	000000135052
	oct	000000000035
	oct	000000000003
	oct	000000000000
	oct	000000135107
	oct	000000000046
	oct	000000000003
	oct	000000000000
	oct	000000135155
	oct	000000000054
	oct	000000000003
	oct	000000000000
	oct	000000135231
	oct	000000000073
	oct	000000000003
	oct	000000000000
	oct	000000135324
	oct	000000000026
	oct	000000000003
	oct	000000000000
	oct	000000135352
	oct	000000000041
	oct	000000000003
	oct	000000000000
	oct	000000135413
	oct	000000000143
	oct	000000000003
	oct	000000000000
	oct	000000135556
	oct	000000000044
	oct	000000000003
	oct	000000000000
	oct	000000135622
	oct	000000000026
	oct	000000000003
	oct	000000000000
	oct	000000135650
	oct	000000000056
	oct	000000000003
	oct	000000000000
	oct	000000135726
	oct	000000000033
	oct	000000000003
	oct	000000000000
	oct	000000135761
	oct	000000000040
	oct	000000000003
	oct	000000000000
	oct	000000136021
	oct	000000000033
	oct	000000000003
	oct	000000000000
	oct	000000136054
	oct	000000000033
	oct	000000000003
	oct	000000000000
	oct	000000136107
	oct	000000000070
	oct	000000000003
	oct	000000000000
	oct	000000136177
	oct	000000000036
	oct	000000000003
	oct	000000000000
	oct	000000136235
	oct	000000000063
	oct	000000000003
	oct	000000000000
	oct	000000136320
	oct	000000000046
	oct	000000000003
	oct	000000000000
	oct	000000136366
	oct	000000000036
	oct	000000000004
	oct	000000000000
	oct	000000136424
	oct	000000000031
	oct	000000000004
	oct	000000000000
	oct	000000136455
	oct	000000000075
	oct	000000000003
	oct	000000000000
	oct	000000136552
	oct	000000000071
	oct	000000000003
	oct	000000000000
	oct	000000136643
	oct	000000000074
	oct	000000000003
	oct	000000000000
	oct	000000136737
	oct	000000000067
	oct	000000000003
	oct	000000000000
	oct	000000137026
	oct	000000000030
	oct	000000000003
	oct	000000000000
	oct	000000137056
	oct	000000000010
	oct	000000000004
	oct	000000000000
	oct	000000137066
	oct	000000000041
	oct	000000000003
	oct	000000000000
	oct	000000137127
	oct	000000000122
	oct	000000000001
	oct	000000000000
	oct	000000137251
	oct	000000000062
	oct	000000000003
	oct	000000000000
	oct	000000137333
	oct	000000000123
	oct	000000000001
	oct	000000000000
	oct	000000137456
	oct	000000000071
	oct	000000000002
	oct	000000000000
	oct	000000137547
	oct	000000000060
	oct	000000000002
	oct	000000000000
	oct	000000137627
	oct	000000000147
	oct	000000000003
	oct	000000000000
	oct	000000137776
	oct	000000000146
	oct	000000000003
	oct	000000000000
	oct	000000140144
	oct	000000000057
	oct	000000000003
	oct	000000000000
	oct	000000140223
	oct	000000000061
	oct	000000000003
	oct	000000000000
	oct	000000140304
	oct	000000000030
	oct	000000000003
	oct	000000000000
	oct	000000140334
	oct	000000000046
	oct	000000000003
	oct	000000000000
	oct	000000140402
	oct	000000000060
	oct	000000000003
	oct	000000000000
	oct	000000140462
	oct	000000000056
	oct	000000000003
	oct	000000000000
	oct	000000140540
	oct	000000000061
	oct	000000000003
	oct	000000000000
	oct	000000140621
	oct	000000000113
	oct	000000000003
	oct	000000000000
	oct	000000140734
	oct	000000000034
	oct	000000000003
	oct	000000000000
	oct	000000140770
	oct	000000000061
	oct	000000000001
	oct	000000000000
	oct	000000141051
	oct	000000000147
	oct	000000000001
	oct	000000000000
	oct	000000141220
	oct	000000000103
	oct	000000000001
	oct	000000000055
	oct	000000141323
	oct	000000000033
	oct	000000000003
	oct	000000000000
	oct	000000141356
	oct	000000000061
	oct	000000000003
	oct	000000000000
	oct	000000141437
	oct	000000000100
	oct	000000000003
	oct	000000000000
	oct	000000141537
	oct	000000000046
	oct	000000000003
	oct	000000000000
	oct	000000141605
	oct	000000000051
	oct	000000000003
	oct	000000000000
	oct	000000141656
	oct	000000000030
	oct	000000000003
	oct	000000000000
	oct	000000141706
	oct	000000000030
	oct	000000000003
	oct	000000000000
	oct	000000141736
	oct	000000000052
	oct	000000000001
	oct	000000000000
	oct	000000142010
	oct	000000000065
	oct	000000000002
	oct	000000000000
	oct	000000142075
	oct	000000000133
	oct	000000000002
	oct	000000000000
	oct	000000142230
	oct	000000000114
	oct	000000000002
	oct	000000000000
	oct	000000142344
	oct	000000000047
	oct	000000000003
	oct	000000000000
	oct	000000142413
	oct	000000000131
	oct	000000000002
	oct	000000000000
	oct	000000142544
	oct	000000000056
	oct	000000000002
	oct	000000000000
	oct	000000142622
	oct	000000000100
	oct	000000000003
	oct	000000000000
	oct	000000142722
	oct	000000000071
	oct	000000000003
	oct	000000000000
	oct	000000143013
	oct	000000000073
	oct	000000000003
	oct	000000000000
	oct	000000143106
	oct	000000000124
	oct	000000000002
	oct	000000000000
	oct	000000143232
	oct	000000000134
	oct	000000000002
	oct	000000000000
	oct	000000143366
	oct	000000000124
	oct	000000000002
	oct	000000000000
	oct	000000143512
	oct	000000000123
	oct	000000000002
	oct	000000000000
	oct	000000143635
	oct	000000000107
	oct	000000000002
	oct	000000000000
	oct	000000143744
	oct	000000000031
	oct	000000000003
	oct	000000000000
	oct	000000143775
	oct	000000000054
	oct	000000000003
	oct	000000000000
	oct	000000144051
	oct	000000000056
	oct	000000000003
	oct	000000000000
	oct	000000144127
	oct	000000000053
	oct	000000000002
	oct	000000000000
	oct	000000144202
	oct	000000000013
	oct	000000000003
	oct	000000000012
	oct	000000144215
	oct	000000000023
	oct	000000000003
	oct	000000000022
	oct	000000144240
	oct	000000000076
	oct	000000000003
	oct	000000000000
	oct	000000144336
	oct	000000000061
	oct	000000000003
	oct	000000000000
	oct	000000144417
	oct	000000000111
	oct	000000000003
	oct	000000000000
	oct	000000144530
	oct	000000000035
	oct	000000000001
	oct	000000000000
	oct	000000144565
	oct	000000000030
	oct	000000000001
	oct	000000000000
	oct	000000144615
	oct	000000000027
	oct	000000000004
	oct	000000000000
	oct	000000144644
	oct	000000000041
	oct	000000000003
	oct	000000000040
	oct	000000144705
	oct	000000000052
	oct	000000000004
	oct	000000000000
	oct	000000144757
	oct	000000000024
	oct	000000000003
	oct	000000000022
	oct	000000145003
	oct	000000000121
	oct	000000000003
	oct	000000000000
	oct	000000145124
	oct	000000000050
	oct	000000000004
	oct	000000000000
	oct	000000145174
	oct	000000000101
	oct	000000000003
	oct	000000000000
	oct	000000145275
	oct	000000000054
	oct	000000000003
	oct	000000000000
	oct	000000145351
	oct	000000000045
	oct	000000000003
	oct	000000000000
	oct	000000145416
	oct	000000000054
	oct	000000000003
	oct	000000000000
	oct	000000145472
	oct	000000000126
	oct	000000000004
	oct	000000000000
	oct	000000145620
	oct	000000000074
	oct	000000000004
	oct	000000000000
	oct	000000145714
	oct	000000000120
	oct	000000000004
	oct	000000000000
	oct	000000146034
	oct	000000000046
	oct	000000000003
	oct	000000000045
	oct	000000146102
	oct	000000000044
	oct	000000000003
	oct	000000000043
	oct	000000146146
	oct	000000000060
	oct	000000000003
	oct	000000000000
	oct	000000146226
	oct	000000000054
	oct	000000000002
	oct	000000000000
	oct	000000146302
	oct	000000000056
	oct	000000000003
	oct	000000000000
	oct	000000146360
	oct	000000000073
	oct	000000000002
	oct	000000000006
	oct	000000146453
	oct	000000000052
	oct	000000000002
	oct	000000000000
	oct	000000146525
	oct	000000000041
	oct	000000000002
	oct	000000000000
	oct	000000146566
	oct	000000000030
	oct	000000000002
	oct	000000000000
	oct	000000146616
	oct	000000000057
	oct	000000000002
	oct	000000000000
	oct	000000146675
	oct	000000000024
	oct	000000000002
	oct	000000000000
	oct	000000146721
	oct	000000000026
	oct	000000000002
	oct	000000000000
	oct	000000146747
	oct	000000000033
	oct	000000000031
	oct	000000000000
	oct	000000147002
	oct	000000000021
	oct	000000000031
	oct	000000000000
	oct	000000147023
	oct	000000000057
	oct	000000000031
	oct	000000000000
	oct	000000147102
	oct	000000000040
	oct	000000000002
	oct	000000000000
	oct	000000147142
	oct	000000000036
	oct	000000000002
	oct	000000000000
	oct	000000147200
	oct	000000000025
	oct	000000000002
	oct	000000000000
	oct	000000147225
	oct	000000000056
	oct	000000000002
	oct	000000000000
	oct	000000147303
	oct	000000000031
	oct	000000000002
	oct	000000000000
	oct	000000147334
	oct	000000000017
	oct	000000000002
	oct	000000000000
	oct	000000147353
	oct	000000000031
	oct	000000000002
	oct	000000000000
	oct	000000147404
	oct	000000000023
	oct	000000000002
	oct	000000000000
	oct	000000147427
	oct	000000000037
	oct	000000000002
	oct	000000000000
	oct	000000147466
	oct	000000000025
	oct	000000000002
	oct	000000000000
	oct	000000147513
	oct	000000000022
	oct	000000000002
	oct	000000000000
	oct	000000147535
	oct	000000000032
	oct	000000000002
	oct	000000000000
	oct	000000147567
	oct	000000000025
	oct	000000000002
	oct	000000000000
	oct	000000147614
	oct	000000000022
	oct	000000000002
	oct	000000000000
	oct	000000147636
	oct	000000000034
	oct	000000000002
	oct	000000000000
	oct	000000147672
	oct	000000000032
	oct	000000000002
	oct	000000000000
	oct	000000147724
	oct	000000000021
	oct	000000000002
	oct	000000000000
	oct	000000147745
	oct	000000000032
	oct	000000000002
	oct	000000000000
	oct	000000147777
	oct	000000000045
	oct	000000000031
	oct	000000000000
	oct	000000150044
	oct	000000000016
	oct	000000000020
	oct	000000000000
	oct	000000150062
	oct	000000000015
	oct	000000000002
	oct	000000000000
	oct	000000150077
	oct	000000000017
	oct	000000000002
	oct	000000000000
	oct	000000150116
	oct	000000000021
	oct	000000000002
	oct	000000000000
	oct	000000150137
	oct	000000000023
	oct	000000000002
	oct	000000000000
	oct	000000150162
	oct	000000000051
	oct	000000000031
	oct	000000000000
	oct	000000150233
	oct	000000000023
	oct	000000000020
	oct	000000000000
	oct	000000150256
	oct	000000000012
	oct	000000000000
	oct	000000000000
	oct	000000150270
	oct	000000000026
	oct	000000000000
	oct	000000000000
	oct	000000150316
	oct	000000000025
	oct	000000000000
	oct	000000000000
	oct	000000150343
	oct	000000000014
	oct	000000000020
	oct	000000000000
	oct	000000150357
	oct	000000000025
	oct	000000000031
	oct	000000000000
	oct	000000150404
	oct	000000000021
	oct	000000000000
	oct	000000000000
	oct	000000150425
	oct	000000000034
	oct	000000000020
	oct	000000000000
	oct	000000150461
	oct	000000000021
	oct	000000000000
	oct	000000000000
	oct	000000150502
	oct	000000000055
	oct	000000000031
	oct	000000000000
	oct	000000150557
	oct	000000000056
	oct	000000000031
	oct	000000000000
	oct	000000150635
	oct	000000000025
	oct	000000000010
	oct	000000000000
	oct	000000150662
	oct	000000000021
	oct	000000000002
	oct	000000000000
	oct	000000150703
	oct	000000000040
	oct	000000000002
	oct	000000000000
	oct	000000150743
	oct	000000000020
	oct	000000000020
	oct	000000000000
	oct	000000150763
	oct	000000000016
	oct	000000000020
	oct	000000000000
	oct	000000151001
	oct	000000000017
	oct	000000000020
	oct	000000000000
	oct	000000151020
	oct	000000000014
	oct	000000000020
	oct	000000000000
	oct	000000151034
	oct	000000000032
	oct	000000000002
	oct	000000000000
	oct	000000151066
	oct	000000000027
	oct	000000000002
	oct	000000000000
	oct	000000151115
	oct	000000000040
	oct	000000000002
	oct	000000000000
	oct	000000151155
	oct	000000000033
	oct	000000000031
	oct	000000000000
	oct	000000151210
	oct	000000000021
	oct	000000000004
	oct	000000000000
	oct	000000151231
	oct	000000000035
	oct	000000000031
	oct	000000000000
	oct	000000151266
	oct	000000000020
	oct	000000000006
	oct	000000000000
	oct	000000151306
	oct	000000000022
	oct	000000000005
	oct	000000000000
	oct	000000151330
	oct	000000000021
	oct	000000000005
	oct	000000000000
	oct	000000151351
	oct	000000000017
	oct	000000000005
	oct	000000000000
	oct	000000151370
	oct	000000000032
	oct	000000000006
	oct	000000000000
	oct	000000151422
	oct	000000000017
	oct	000000000011
	oct	000000000000
	oct	000000151441
	oct	000000000045
	oct	000000000012
	oct	000000000000
	oct	000000151506
	oct	000000000027
	oct	000000000015
	oct	000000000000
	oct	000000151535
	oct	000000000023
	oct	000000000016
	oct	000000000000
	oct	000000151560
	oct	000000000021
	oct	000000000015
	oct	000000000000
	oct	000000151601
	oct	000000000027
	oct	000000000015
	oct	000000000000
	oct	000000151630
	oct	000000000037
	oct	000000000027
	oct	000000000000
	oct	000000151667
	oct	000000000022
	oct	000000000027
	oct	000000000000
	oct	000000151711
	oct	000000000020
	oct	000000000030
	oct	000000000000
	oct	000000151731
	oct	000000000021
	oct	000000000027
	oct	000000000000
	oct	000000151752
	oct	000000000022
	oct	000000000027
	oct	000000000000
	oct	000000151774
	oct	000000000017
	oct	000000000027
	oct	000000000000
	oct	000000152013
	oct	000000000030
	oct	000000000027
	oct	000000000000
	oct	000000152043
	oct	000000000027
	oct	000000000030
	oct	000000000000
	oct	000000152072
	oct	000000000020
	oct	000000000030
	oct	000000000000
	oct	000000152112
	oct	000000000020
	oct	000000000007
	oct	000000000000
	oct	000000152132
	oct	000000000015
	oct	000000000015
	oct	000000000000
	oct	000000152147
	oct	000000000064
	oct	000000000010
	oct	000000000000
	oct	000000152233
	oct	000000000056
	oct	000000000013
	oct	000000000000
	oct	000000152311
	oct	000000000010
	oct	000000000014
	oct	000000000000
	oct	000000152321
	oct	000000000012
	oct	000000000014
	oct	000000000000
	oct	000000152333
	oct	000000000020
	oct	000000000014
	oct	000000000000
	oct	000000152353
	oct	000000000031
	oct	000000000031
	oct	000000000000
	oct	000000152404
	oct	000000000035
	oct	000000000025
	oct	000000000000
	oct	000000152441
	oct	000000000034
	oct	000000000031
	oct	000000000000
	oct	000000152475
	oct	000000000020
	oct	000000000031
	oct	000000000000
	oct	000000152515
	oct	000000000036
	oct	000000000025
	oct	000000000000
	oct	000000152553
	oct	000000000034
	oct	000000000031
	oct	000000000000
	oct	000000152607
	oct	000000000036
	oct	000000000031
	oct	000000000000
	oct	000000152645
	oct	000000000021
	oct	000000000000
	oct	000000000000
	oct	000000152666
	oct	000000000020
	oct	000000000031
	oct	000000000000
	oct	000000152706
	oct	000000000020
	oct	000000000000
	oct	000000000000
	oct	000000152726
	oct	000000000045
	oct	000000000031
	oct	000000000000
	oct	000000152773
	oct	000000000022
	oct	000000000000
	oct	000000000000
	oct	000000153015
	oct	000000000024
	oct	000000000031
	oct	000000000000
	oct	000000153041
	oct	000000000023
	oct	000000000031
	oct	000000000000
	oct	000000153064
	oct	000000000017
	oct	000000000000
	oct	000000000000
	oct	000000153103
	oct	000000000020
	oct	000000000031
	oct	000000000000
	oct	000000153123
	oct	000000000024
	oct	000000000031
	oct	000000000000
	oct	000000153147
	oct	000000000021
	oct	000000000031
	oct	000000000000
	oct	000000153170
	oct	000000000014
	oct	000000000000
	oct	000000000000
	oct	000000153204
	oct	000000000014
	oct	000000000031
	oct	000000000000
	oct	000000153220
	oct	000000000013
	oct	000000000000
	oct	000000000000
	oct	000000153233
	oct	000000000020
	oct	000000000000
	oct	000000000000
	oct	000000153253
	oct	000000000013
	oct	000000000031
	oct	000000000000
	oct	000000153266
	oct	000000000027
	oct	000000000031
	oct	000000000000
	oct	000000153315
	oct	000000000013
	oct	000000000031
	oct	000000000000
	oct	000000153330
	oct	000000000034
	oct	000000000020
	oct	000000000000
	oct	000000153364
	oct	000000000037
	oct	000000000020
	oct	000000000000
	oct	000000153423
	oct	000000000024
	oct	000000000000
	oct	000000000000
	oct	000000153447
	oct	000000000021
	oct	000000000002
	oct	000000000000
	oct	000000153470
	oct	000000000023
	oct	000000000031
	oct	000000000000
	oct	000000153513
	oct	000000000022
	oct	000000000031
	oct	000000000000
	oct	000000153535
	oct	000000000020
	oct	000000000020
	oct	000000000000
	oct	000000153555
	oct	000000000017
	oct	000000000000
	oct	000000000000
	oct	000000153574
	oct	000000000041
	oct	000000000031
	oct	000000000000
	oct	000000153635
	oct	000000000023
	oct	000000000031
	oct	000000000000
	oct	000000153660
	oct	000000000035
	oct	000000000031
	oct	000000000000
	oct	000000153715
	oct	000000000017
	oct	000000000000
	oct	000000000000
	oct	000000153734
	oct	000000000015
	oct	000000000031
	oct	000000000000
	oct	000000153751
	oct	000000000053
	oct	000000000002
	oct	000000000000
	oct	000000154024
	oct	000000000065
	oct	000000000031
	oct	000000000000
	oct	000000154111
	oct	000000000034
	oct	000000000024
	oct	000000000000
	oct	000000154145
	oct	000000000007
	oct	000000000027
	oct	000000000000
	oct	000000154154
	oct	000000000020
	oct	000000000015
	oct	000000000000
	oct	000000154174
	oct	000000000022
	oct	000000000031
	oct	000000000000
	oct	000000154216
	oct	000000000040
	oct	000000000031
	oct	000000000000
	oct	000000154256
	oct	000000000016
	oct	000000000000
	oct	000000000000
	oct	000000154274
	oct	000000000024
	oct	000000000031
	oct	000000000000
	oct	000000154320
	oct	000000000034
	oct	000000000031
	oct	000000000000
	oct	000000154354
	oct	000000000030
	oct	000000000031
	oct	000000000000
	oct	000000154404
	oct	000000000026
	oct	000000000006
	oct	000000000000
	oct	000000154432
	oct	000000000034
	oct	000000000004
	oct	000000000000
	oct	000000154466
	oct	000000000012
	oct	000000000000
	oct	000000000000
	oct	000000154500
	oct	000000000046
	oct	000000000031
	oct	000000000000
	oct	000000154546
	oct	000000000033
	oct	000000000002
	oct	000000000000
	oct	000000154601
	oct	000000000033
	oct	000000000002
	oct	000000000000
	oct	000000154634
	oct	000000000030
	oct	000000000002
	oct	000000000000
	oct	000000154664
	oct	000000000034
	oct	000000000031
	oct	000000000000
	oct	000000154720
	oct	000000000033
	oct	000000000004
	oct	000000000000
	oct	000000154753
	oct	000000000030
	oct	000000000002
	oct	000000000000
	oct	000000155003
	oct	000000000035
	oct	000000000031
	oct	000000000000
	oct	000000155040
	oct	000000000026
	oct	000000000013
	oct	000000000000
	oct	000000155066
	oct	000000000032
	oct	000000000016
	oct	000000000000
	oct	000000155120
	oct	000000000026
	oct	000000000027
	oct	000000000000
	oct	000000155146
	oct	000000000011
	oct	000000000027
	oct	000000000000
	oct	000000155157
	oct	000000000017
	oct	000000000030
	oct	000000000000
	oct	000000155176
	oct	000000000016
	oct	000000000020
	oct	000000000000
	oct	000000155214
	oct	000000000034
	oct	000000000031
	oct	000000000000
	oct	000000155250
	oct	000000000040
	oct	000000000031
	oct	000000000000
	oct	000000155310
	oct	000000000033
	oct	000000000002
	oct	000000000000
	oct	000000155343
	oct	000000000056
	oct	000000000000
	oct	000000000000
	oct	000000155421
	oct	000000000041
	oct	000000000031
	oct	000000000000
	oct	000000155462
	oct	000000000037
	oct	000000000031
	oct	000000000000
	oct	000000155521
	oct	000000000026
	oct	000000000031
	oct	000000000000
	oct	000000155547
	oct	000000000025
	oct	000000000020
	oct	000000000000
	oct	000000155574
	oct	000000000042
	oct	000000000031
	oct	000000000000
	oct	000000155636
	oct	000000000046
	oct	000000000031
	oct	000000000000
	oct	000000155704
	oct	000000000034
	oct	000000000031
	oct	000000000000
	oct	000000155740
	oct	000000000016
	oct	000000000031
	oct	000000000000
	oct	000000155756
	oct	000000000044
	oct	000000000030
	oct	000000000000
	oct	000000156022
	oct	000000000035
	oct	000000000006
	oct	000000000000
	oct	000000156057
	oct	000000000023
	oct	000000000031
	oct	000000000000
	oct	000000156102
	oct	000000000034
	oct	000000000006
	oct	000000000000
	oct	000000156136
	oct	000000000020
	oct	000000000000
	oct	000000000000
	oct	000000156156
	oct	000000000017
	oct	000000000031
	oct	000000000000
	oct	000000156175
	oct	000000000034
	oct	000000000031
	oct	000000000000
	oct	000000156231
	oct	000000000057
	oct	000000000031
	oct	000000000000
	oct	000000156310
	oct	000000000030
	oct	000000000031
	oct	000000000000
	oct	000000156340
	oct	000000000022
	oct	000000000031
	oct	000000000000
	oct	000000156362
	oct	000000000007
	oct	000000000027
	oct	000000000000
	oct	000000156371
	oct	000000000056
	oct	000000000013
	oct	000000000000
	oct	000000156447
	oct	000000000042
	oct	000000000002
	oct	000000000000
	oct	000000156511
	oct	000000000026
	oct	000000000002
	oct	000000000000
	oct	000000156537
	oct	000000000011
	oct	000000000000
	oct	000000000000
	oct	000000156550
	oct	000000000011
	oct	000000000000
	oct	000000000000
	oct	000000156561
	oct	000000000011
	oct	000000000000
	oct	000000000000
	oct	000000156572
	oct	000000000011
	oct	000000000000
	oct	000000000000
	oct	000000156603
	oct	000000000025
	oct	000000000002
	oct	000000000000
	oct	000000156630
	oct	000000000016
	oct	000000000000
	oct	000000000000
	oct	000000156646
	oct	000000000016
	oct	000000000000
	oct	000000000000
	oct	000000156664
	oct	000000000016
	oct	000000000000
	oct	000000000000
	oct	000000156702
	oct	000000000023
	oct	000000000000
	oct	000000000000
	oct	000000156725
	oct	000000000024
	oct	000000000000
	oct	000000000000
	oct	000000156751
	oct	000000000022
	oct	000000000000
	oct	000000000000
	oct	000000156773
	oct	000000000020
	oct	000000000000
	oct	000000000000
	oct	000000157013
	oct	000000000024
	oct	000000000000
	oct	000000000000
	oct	000000157037
	oct	000000000016
	oct	000000000000
	oct	000000000000
	oct	000000157055
	oct	000000000026
	oct	000000000000
	oct	000000000000
	oct	000000157103
	oct	000000000027
	oct	000000000000
	oct	000000000000
	oct	000000157132
	oct	000000000030
	oct	000000000000
	oct	000000000000
	oct	000000157162
	oct	000000000017
	oct	000000000000
	oct	000000000000
	oct	000000157201
	oct	000000000020
	oct	000000000000
	oct	000000000000
	oct	000000157221
	oct	000000000034
	oct	000000000031
	oct	000000000000
	oct	000000157255
	oct	000000000050
	oct	000000000031
	oct	000000000000
	oct	000000157325
	oct	000000000036
	oct	000000000006
	oct	000000000000
	oct	000000157363
	oct	000000000052
	oct	000000000006
	oct	000000000000
	oct	000000157435
	oct	000000000036
	oct	000000000013
	oct	000000000000
	oct	000000157473
	oct	000000000032
	oct	000000000013
	oct	000000000000
	oct	000000157525
	oct	000000000032
	oct	000000000013
	oct	000000000000
	oct	000000157557
	oct	000000000033
	oct	000000000013
	oct	000000000000
	oct	000000157612
	oct	000000000033
	oct	000000000013
	oct	000000000000
	oct	000000157645
	oct	000000000033
	oct	000000000013
	oct	000000000000
	oct	000000157700
	oct	000000000020
	oct	000000000013
	oct	000000000000
	oct	000000157720
	oct	000000000032
	oct	000000000013
	oct	000000000000
	oct	000000157752
	oct	000000000053
	oct	000000000012
	oct	000000000000
	oct	000000160025
	oct	000000000012
	oct	000000000005
	oct	000000000000
	oct	000000160037
	oct	000000000021
	oct	000000000000
	oct	000000000000
	oct	000000000000
	oct	000000000015
	oct	000000000000
	oct	000000000000
	oct	000000160060
	oct	000000000015
	oct	000000000000
	oct	000000000000
	oct	000000160075
	oct	000000000015
	oct	000000000000
	oct	000000000000
	oct	000000160112
	oct	000000000033
	oct	000000000002
	oct	000000000000
	oct	000000160145
	oct	000000000017
	oct	000000000000
	oct	000000000000
	oct	000000160164
	oct	000000000055
	oct	000000000031
	oct	000000000000
	oct	000000160241
	oct	000000000032
	oct	000000000002
	oct	000000000000
	oct	000000160273
	oct	000000000034
	oct	000000000013
	oct	000000000000
	oct	000000160327
	oct	000000000032
	oct	000000000002
	oct	000000000000
	oct	000000160361
	oct	000000000030
	oct	000000000030
	oct	000000000000
	oct	000000160411
	oct	000000000053
	oct	000000000000
	oct	000000000000
	oct	000000160464
	oct	000000000116
	oct	000000000003
	oct	000000000000
	oct	000000160602
	oct	000000000076
	oct	000000000003
	oct	000000000000
	oct	000000160700
	oct	000000000071
	oct	000000000003
	oct	000000000000
	oct	000000160771
	oct	000000000071
	oct	000000000003
	oct	000000000000
	oct	000000161062
	oct	000000000067
	oct	000000000003
	oct	000000000000
	oct	000000161151
	oct	000000000130
	oct	000000000003
	oct	000000000000
	oct	000000161301
	oct	000000000127
	oct	000000000003
	oct	000000000000
	oct	124150151163
	oct	040167157162
	oct	144040143157
	oct	156164141151
	oct	156163040141
	oct	156040151154
	oct	154145147141
	oct	154040143150
	oct	141162141143
	oct	164145162040
	oct	124150151163
	oct	040167157162
	oct	144040145170
	oct	143145145144
	oct	163040164150
	oct	145040155141
	oct	170151155165
	oct	155040154145
	oct	156147164150
	oct	040157146040
	oct	136040143150
	oct	141162141143
	oct	164145162163
	oct	040111154154
	oct	145147141154
	oct	040164145162
	oct	155151156141
	oct	164151157156
	oct	040157146040
	oct	141156040141
	oct	154160150141
	oct	156165155145
	oct	162151143040
	oct	154151164145
	oct	162141154040
	oct	114151164145
	oct	162141154040
	oct	154145156147
	oct	164150040151
	oct	163040172145
	oct	162157040157
	oct	162040145170
	oct	143145145144
	oct	163040155141
	oct	170151155165
	oct	155040157146
	oct	040136040143
	oct	150141162141
	oct	143164145162
	oct	163040111154
	oct	154145147141
	oct	154040143157
	oct	156164151156
	oct	165141164151
	oct	157156040157
	oct	146040141156
	oct	040141154160
	oct	150141156165
	oct	155145162151
	oct	143040157162
	oct	040142151164
	oct	040163164162
	oct	151156147040
	oct	154151164145
	oct	162141154040
	oct	101156040151
	oct	154154145147
	oct	141154040144
	oct	145154151155
	oct	151164145162
	oct	040146157154
	oct	154157167163
	oct	040164150151
	oct	163040167157
	oct	162144040116
	oct	145163164145
	oct	144040103117
	oct	120131040163
	oct	164141164145
	oct	155145156164
	oct	163040141162
	oct	145040151154
	oct	154145147141
	oct	154040111154
	oct	154145147141
	oct	154040143157
	oct	156164151156
	oct	165141164151
	oct	157156040055
	oct	040101162145
	oct	141040101040
	oct	163150157165
	oct	154144040142
	oct	145040142154
	oct	141156153073
	oct	040163157165
	oct	162143145040
	oct	154151156145
	oct	040141143143
	oct	145160164145
	oct	144040111154
	oct	154145147141
	oct	154040143157
	oct	156164151156
	oct	165141164151
	oct	157156040055
	oct	040164150145
	oct	162145040151
	oct	163040156157
	oct	164150151156
	oct	147040146162
	oct	157155040167
	oct	150151143150
	oct	040164157040
	oct	143157156164
	oct	151156165145
	oct	073040163157
	oct	165162143145
	oct	040154151156
	oct	145040151147
	oct	156157162145
	oct	144040123171
	oct	156164141170
	oct	040145162162
	oct	157162040123
	oct	171156164141
	oct	170040143150
	oct	145143153151
	oct	156147040144
	oct	151163143157
	oct	156164151156
	oct	165145144040
	oct	123171156164
	oct	141170040143
	oct	150145143153
	oct	151156147040
	oct	162145163165
	oct	155145144040
	oct	120145162151
	oct	157144040155
	oct	151163163151
	oct	156147040146
	oct	162157155040
	oct	103117120131
	oct	040163164141
	oct	164145155145
	oct	156164040124
	oct	150145040167
	oct	157162144040
	oct	136040151163
	oct	040155151163
	oct	163151156147
	oct	073040151164
	oct	163040160162
	oct	145163145156
	oct	143145040141
	oct	163163165155
	oct	145144040120
	oct	141162164040
	oct	157162040141
	oct	154154040157
	oct	146040164150
	oct	151163040145
	oct	156164162171
	oct	040151163040
	oct	141154162145
	oct	141144171040
	oct	151156040164
	oct	150145040162
	oct	145160154141
	oct	143145155145
	oct	156164040164
	oct	141142154145
	oct	073040145156
	oct	164162171040
	oct	151147156157
	oct	162145144040
	oct	117142163157
	oct	154145164145
	oct	040165163141
	oct	147145040157
	oct	146040116117
	oct	124105040163
	oct	164141164145
	oct	155145156164
	oct	040141143143
	oct	145160164145
	oct	144040114145
	oct	146164040160
	oct	141162164040
	oct	157146040160
	oct	163145165144
	oct	157055164145
	oct	170164040155
	oct	165163164040
	oct	156157164040
	oct	142145040156
	oct	165154154073
	oct	040145156164
	oct	162171040151
	oct	147156157162
	oct	145144040103
	oct	157156164145
	oct	156164163040
	oct	157146040111
	oct	156144151143
	oct	141164157162
	oct	040101162145
	oct	141040050143
	oct	157154165155
	oct	156040067051
	oct	040151163040
	oct	151156166141
	oct	154151144073
	oct	040143150141
	oct	162141143164
	oct	145162040151
	oct	147156157162
	oct	145144040124
	oct	150145040136
	oct	040104111126
	oct	111123111117
	oct	116040150145
	oct	141144145162
	oct	040151163040
	oct	155151163163
	oct	151156147073
	oct	040141156040
	oct	145155160164
	oct	171040144151
	oct	166151163151
	oct	157156040151
	oct	163040141163
	oct	163165155145
	oct	144040104165
	oct	160154151143
	oct	141164145040
	oct	144151166151
	oct	163151157156
	oct	040150145141
	oct	144145162040
	oct	124150145040
	oct	136040104111
	oct	126111123111
	oct	117116040150
	oct	145141144145
	oct	162040151163
	oct	040155151163
	oct	163151156147
	oct	040105162162
	oct	157162040151
	oct	156040136040
	oct	143154141165
	oct	163145040124
	oct	150151163040
	oct	141160160141
	oct	162145156164
	oct	040160162157
	oct	143145144165
	oct	162145055156
	oct	141155145040
	oct	151163040141
	oct	040162145163
	oct	145162166145
	oct	144040167157
	oct	162144040124
	oct	150151163040
	oct	167157162144
	oct	040151163040
	oct	162145163145
	oct	162166145144
	oct	040146157162
	oct	040146165164
	oct	165162145040
	oct	151155160154
	oct	145155145156
	oct	164141164151
	oct	157156040111
	oct	156166141154
	oct	151144040145
	oct	163143141160
	oct	145040163164
	oct	162151156147
	oct	040151156040
	oct	141156040141
	oct	154160150141
	oct	156165155145
	oct	162151143040
	oct	154151164145
	oct	162141154040
	oct	124150151163
	oct	040146145141
	oct	164165162145
	oct	040151163040
	oct	156157164040
	oct	151156143154
	oct	165144145144
	oct	040151156040
	oct	164150145040
	oct	143165162162
	oct	145156164040
	oct	154145166145
	oct	154040157146
	oct	040164150145
	oct	040143157155
	oct	160151154145
	oct	162040125163
	oct	145040157146
	oct	040164150151
	oct	163040146145
	oct	141164165162
	oct	145040151163
	oct	040162145163
	oct	164162151143
	oct	164145144040
	oct	142171040164
	oct	150151163040
	oct	151156163164
	oct	141154154141
	oct	164151157156
	oct	040103117120
	oct	131040146151
	oct	154145040156
	oct	157164040146
	oct	157165156144
	oct	040111154154
	oct	145147141154
	oct	040143157156
	oct	164151156165
	oct	141164151157
	oct	156040055040
	oct	144145142165
	oct	147147151156
	oct	147040154151
	oct	156145163040
	oct	155165163164
	oct	040156157164
	oct	040142145040
	oct	143157156164
	oct	151156165145
	oct	144073040163
	oct	157165162143
	oct	145040154151
	oct	156145040141
	oct	143143145160
	oct	164145144040
	oct	101156040151
	oct	154154145147
	oct	141154040144
	oct	145154151155
	oct	151164145162
	oct	040160162145
	oct	143145144145
	oct	163040164150
	oct	151163040157
	oct	160145162141
	oct	164157162040
	oct	101156040151
	oct	154154145147
	oct	141154040144
	oct	145154151155
	oct	151164145162
	oct	040146157154
	oct	154157167163
	oct	040164150151
	oct	163040157160
	oct	145162141164
	oct	157162040123
	oct	171156164141
	oct	170040143150
	oct	145143153151
	oct	156147040144
	oct	151163143157
	oct	156164151156
	oct	165145144040
	oct	146157162040
	oct	162145155141
	oct	151156144145
	oct	162040157146
	oct	040160162157
	oct	147162141155
	oct	040103117115
	oct	120055061040
	oct	144141164141
	oct	040151163040
	oct	156157164040
	oct	163165160160
	oct	157162164145
	oct	144040055040
	oct	141154154040
	oct	162145146145
	oct	162145156143
	oct	145163040164
	oct	157040151164
	oct	040141162145
	oct	040164162145
	oct	141164145144
	oct	040141163040
	oct	103117115120
	oct	055067040050
	oct	061067055142
	oct	151164040142
	oct	151156141162
	oct	171051040103
	oct	117115120055
	oct	062040144141
	oct	164141040151
	oct	163040156157
	oct	164040163165
	oct	160160157162
	oct	164145144040
	oct	055040141154
	oct	154040162145
	oct	146145162145
	oct	156143145163
	oct	040164157040
	oct	151164040141
	oct	162145040164
	oct	162145141164
	oct	145144040141
	oct	163040103117
	oct	115120055066
	oct	040050063065
	oct	055142151164
	oct	040142151156
	oct	141162171051
	oct	040124150145
	oct	040122105120
	oct	114101103105
	oct	040163164141
	oct	164145155145
	oct	156164040151
	oct	163040151154
	oct	154145147141
	oct	154040124150
	oct	145040103117
	oct	120131040122
	oct	105120114101
	oct	103111116107
	oct	040163164141
	oct	164145155145
	oct	156164040151
	oct	163040151154
	oct	154145147141
	oct	154040111155
	oct	160154145155
	oct	145156164141
	oct	164151157156
	oct	040162145163
	oct	164162151143
	oct	164151157156
	oct	072040101040
	oct	127117122113
	oct	111116107055
	oct	123124117122
	oct	101107105040
	oct	163145143164
	oct	151157156040
	oct	151163040162
	oct	145161165151
	oct	162145144040
	oct	167150145156
	oct	040104105102
	oct	125107107111
	oct	116107055115
	oct	117104105040
	oct	151163040165
	oct	163145144040
	oct	111154154145
	oct	147141154040
	oct	157162040155
	oct	151163163151
	oct	156147040144
	oct	151166151163
	oct	151157156040
	oct	150145141144
	oct	145162163040
	oct	124150145040
	oct	136040123105
	oct	103124111117
	oct	116040167141
	oct	163040160162
	oct	145166151157
	oct	165163154171
	oct	040144145146
	oct	151156145144
	oct	040101040154
	oct	151156145040
	oct	157146040151
	oct	156144145164
	oct	145162155151
	oct	156141164145
	oct	040154145156
	oct	147164150040
	oct	150141163040
	oct	142145145156
	oct	040146157165
	oct	156144054040
	oct	145156144040
	oct	157146040163
	oct	157165162143
	oct	145040141163
	oct	163165155145
	oct	144040124150
	oct	151163040167
	oct	157162144040
	oct	163150157165
	oct	154144040142
	oct	145147151156
	oct	040151156040
	oct	101162145141
	oct	040101040124
	oct	150145040167
	oct	157162144040
	oct	104111126111
	oct	123111117116
	oct	040151163040
	oct	162145161165
	oct	151162145144
	oct	040150145162
	oct	145040101040
	oct	160145162151
	oct	157144040151
	oct	163040162145
	oct	161165151162
	oct	145144040160
	oct	162151157162
	oct	040164157040
	oct	164150151163
	oct	040167157162
	oct	144040124150
	oct	145040120122
	oct	117107122101
	oct	115055111104
	oct	040160141162
	oct	141147162141
	oct	160150040151
	oct	163040155151
	oct	163163151156
	oct	147040055040
	oct	145156164162
	oct	171040156141
	oct	155145040141
	oct	163163165155
	oct	145144040151
	oct	144145156164
	oct	151143141154
	oct	040164157040
	oct	157142152145
	oct	143164040163
	oct	145147155145
	oct	156164040156
	oct	141155145040
	oct	124150145040
	oct	160162157147
	oct	162141155055
	oct	156141155145
	oct	040151163040
	oct	151156143157
	oct	162162145143
	oct	164154171040
	oct	163160145143
	oct	151146151145
	oct	144040124150
	oct	151163040167
	oct	157162144040
	oct	151163040156
	oct	157164040141
	oct	040154145147
	oct	141154040160
	oct	141162141147
	oct	162141160150
	oct	055156141155
	oct	145040151156
	oct	040164150145
	oct	040105156166
	oct	151162157156
	oct	155145156164
	oct	040104151166
	oct	151163151157
	oct	156040101040
	oct	110111123111
	oct	040143157155
	oct	160165164145
	oct	162055156141
	oct	155145040151
	oct	163040162145
	oct	161165151162
	oct	145144040150
	oct	145162145040
	oct	124150145040
	oct	160141162141
	oct	147162141160
	oct	150163040157
	oct	146040164150
	oct	145040111144
	oct	145156164151
	oct	146151143141
	oct	164151157156
	oct	040104151166
	oct	151163151157
	oct	156040141162
	oct	145040156157
	oct	164040151156
	oct	040160162157
	oct	160145162040
	oct	157162144145
	oct	162040124150
	oct	151163040160
	oct	162157147162
	oct	141155040151
	oct	163040142145
	oct	151156147040
	oct	143157155160
	oct	151154145144
	oct	040142171040
	oct	115165154164
	oct	151143163040
	oct	103117102117
	oct	114073040157
	oct	142152145143
	oct	164040143157
	oct	144145040143
	oct	162145141164
	oct	145144040151
	oct	163040146157
	oct	162040115165
	oct	154164151143
	oct	163040124150
	oct	151163040167
	oct	157162144040
	oct	151163040156
	oct	157164040162
	oct	145143157147
	oct	156151172145
	oct	144073040167
	oct	157162144040
	oct	151147156157
	oct	162145144040
	oct	124150145040
	oct	167157162144
	oct	040104101124
	oct	101040157162
	oct	040120122117
	oct	103105104125
	oct	122105040151
	oct	163040162145
	oct	161165151162
	oct	145144040150
	oct	145162145040
	oct	124150145040
	oct	167157162144
	oct	040123105103
	oct	124111117116
	oct	040151163040
	oct	162145161165
	oct	151162145144
	oct	040150145162
	oct	145040124150
	oct	145040167157
	oct	162144040104
	oct	105102125107
	oct	107111116107
	oct	040157162040
	oct	123125120105
	oct	122126111123
	oct	117122040151
	oct	163040162145
	oct	161165151162
	oct	145144040150
	oct	145162145040
	oct	124150145040
	oct	167157162144
	oct	040115117104
	oct	105040151163
	oct	040162145161
	oct	165151162145
	oct	144040150145
	oct	162145040124
	oct	150145040143
	oct	154141165163
	oct	145163040151
	oct	156040164150
	oct	145040123117
	oct	125122103105
	oct	055103117115
	oct	120125124105
	oct	122040160141
	oct	162141147162
	oct	141160150040
	oct	141162145040
	oct	156157164040
	oct	151156040160
	oct	162157160145
	oct	162040157162
	oct	144145162040
	oct	124150145040
	oct	167157162144
	oct	040123105107
	oct	115105116124
	oct	040157162040
	oct	104111126111
	oct	123111117116
	oct	040151163040
	oct	162145161165
	oct	151162145144
	oct	040150145162
	oct	145040101156
	oct	040151156164
	oct	145147145162
	oct	040142145164
	oct	167145145156
	oct	040060040141
	oct	156144040064
	oct	071040151163
	oct	040162145161
	oct	165151162145
	oct	144040150145
	oct	162145040124
	oct	150145040155
	oct	145155157162
	oct	171040163151
	oct	172145040151
	oct	163040151156
	oct	143157162162
	oct	145143164154
	oct	171040163160
	oct	145143151146
	oct	151145144040
	oct	124150145040
	oct	167157162144
	oct	040123105121
	oct	125105116103
	oct	105040151163
	oct	040162145161
	oct	165151162145
	oct	144040150145
	oct	162145040101
	oct	156040141154
	oct	160150141142
	oct	145164055156
	oct	141155145040
	oct	151163040162
	oct	145161165151
	oct	162145144040
	oct	150145162145
	oct	040124150145
	oct	040167157162
	oct	144040117102
	oct	112105103124
	oct	055120122117
	oct	107122101115
	oct	040151163040
	oct	162145161165
	oct	151162145144
	oct	040150145162
	oct	145040124150
	oct	145040167157
	oct	162144040123
	oct	125120105122
	oct	126111123117
	oct	122040151163
	oct	040162145161
	oct	165151162145
	oct	144040150145
	oct	162145040101
	oct	156040151156
	oct	164145147145
	oct	162040151163
	oct	040162145161
	oct	165151162145
	oct	144040150145
	oct	162145040101
	oct	040155151163
	oct	160154141143
	oct	145144040104
	oct	105103111115
	oct	101114055120
	oct	117111116124
	oct	040143154141
	oct	165163145040
	oct	155141171040
	oct	150141166145
	oct	040141146146
	oct	145143164145
	oct	144040154145
	oct	170151143141
	oct	154040141156
	oct	141154171163
	oct	151163040124
	oct	150145040167
	oct	157162144040
	oct	103117115115
	oct	101040157162
	oct	040104105103
	oct	111115101114
	oct	055120117111
	oct	116124040151
	oct	163040162145
	oct	161165151162
	oct	145144040150
	oct	145162145040
	oct	124150145040
	oct	143154141165
	oct	163145163040
	oct	151156040164
	oct	150145040123
	oct	120105103111
	oct	101114055116
	oct	101115105123
	oct	040160141162
	oct	141147162141
	oct	160150040141
	oct	162145040156
	oct	157164040151
	oct	156040160162
	oct	157160145162
	oct	040157162144
	oct	145162040124
	oct	150145040143
	oct	165162162145
	oct	156143171040
	oct	163151147156
	oct	040154151164
	oct	145162141154
	oct	040163160145
	oct	143151146151
	oct	145144040150
	oct	145162145040
	oct	151163040151
	oct	156166141154
	oct	151144040101
	oct	156040141154
	oct	160150141156
	oct	165155145162
	oct	151143040154
	oct	151164145162
	oct	141154040157
	oct	162040141156
	oct	040151156164
	oct	145147145162
	oct	040151163040
	oct	162145161165
	oct	151162145144
	oct	040150145162
	oct	145040124150
	oct	145040167157
	oct	162144040123
	oct	111132105040
	oct	151163040162
	oct	145161165151
	oct	162145144040
	oct	150145162145
	oct	040105151164
	oct	150145162040
	oct	141040155156
	oct	145155157156
	oct	151143055156
	oct	141155145054
	oct	040141156040
	oct	141154160150
	oct	141142145164
	oct	055156141155
	oct	145040157162
	oct	040141040154
	oct	151164145162
	oct	141154040151
	oct	163040162145
	oct	161165151162
	oct	145144040150
	oct	145162145040
	oct	124150145040
	oct	167157162144
	oct	040117116040
	oct	157162040117
	oct	106106040155
	oct	165163164040
	oct	142145040160
	oct	162145143145
	oct	145144145144
	oct	040142171040
	oct	141040165156
	oct	151161165145
	oct	154171040144
	oct	145146151156
	oct	145144040163
	oct	167151164143
	oct	150040156141
	oct	155145040101
	oct	040165163145
	oct	162040167157
	oct	162144040151
	oct	163040162145
	oct	161165151162
	oct	145144040150
	oct	145162145040
	oct	124150145040
	oct	167157162144
	oct	040117116040
	oct	157162040117
	oct	106106040155
	oct	165163164040
	oct	142145040160
	oct	162145143145
	oct	145144145144
	oct	040142171040
	oct	141040165156
	oct	151161165145
	oct	154171040144
	oct	145146151156
	oct	145144040163
	oct	167151164143
	oct	150040156141
	oct	155145040141
	oct	156144040141
	oct	040155156145
	oct	155157156151
	oct	143055156141
	oct	155145040101
	oct	156040141154
	oct	160150141142
	oct	145164055156
	oct	141155145040
	oct	151163040162
	oct	145161165151
	oct	162145144040
	oct	150145162145
	oct	040101040155
	oct	156145155157
	oct	156151143055
	oct	156141155145
	oct	040143154141
	oct	165163145040
	oct	157162040141
	oct	156040141154
	oct	160150141142
	oct	145164040143
	oct	154141165163
	oct	145040151163
	oct	040162145161
	oct	165151162145
	oct	144040150145
	oct	162145040124
	oct	150145040167
	oct	157162144040
	oct	123124101124
	oct	125123040151
	oct	163040162145
	oct	161165151162
	oct	145144040150
	oct	145162145040
	oct	124150145040
	oct	167157162144
	oct	040123123106
	oct	054040126114
	oct	122054040106
	oct	114122040157
	oct	162040102123
	oct	116040151163
	oct	040162145161
	oct	165151162145
	oct	144040150145
	oct	162145040124
	oct	150145040167
	oct	157162144040
	oct	120122117103
	oct	105123123055
	oct	101122105101
	oct	040151163040
	oct	162145161165
	oct	151162145144
	oct	040150145162
	oct	145040101040
	oct	106111114105
	oct	055103117116
	oct	124122117114
	oct	040160141162
	oct	141147162141
	oct	160150040155
	oct	165163164040
	oct	160162145143
	oct	145144145040
	oct	164150151163
	oct	040167157162
	oct	144040101040
	oct	165163145162
	oct	040167157162
	oct	144040151163
	oct	040162145161
	oct	165151162145
	oct	144040150145
	oct	162145040124
	oct	150145040146
	oct	151154145040
	oct	150141163040
	oct	141154162145
	oct	141144171040
	oct	142145145156
	oct	040144145146
	oct	151156145144
	oct	073040164150
	oct	151163040144
	oct	145146151156
	oct	151164151157
	oct	156040151147
	oct	156157162145
	oct	144040101156
	oct	040101123123
	oct	111107116040
	oct	143154141165
	oct	163145040151
	oct	163040162145
	oct	161165151162
	oct	145144040151
	oct	156040164150
	oct	145040160162
	oct	145143145145
	oct	144151156147
	oct	040146151154
	oct	145040144145
	oct	163143162151
	oct	160164151157
	oct	156040101040
	oct	113105131040
	oct	143154141165
	oct	163145040151
	oct	163040162145
	oct	161165151162
	oct	145144040151
	oct	156040164150
	oct	145040160162
	oct	145143145145
	oct	144151156147
	oct	040146151154
	oct	145040144145
	oct	163143162151
	oct	160164151157
	oct	156040101040
	oct	123105114105
	oct	103124040143
	oct	154141165163
	oct	145040155165
	oct	163164040142
	oct	145040146157
	oct	154154157167
	oct	145144040142
	oct	171040141156
	oct	157164150145
	oct	162040123105
	oct	114105103124
	oct	040143154141
	oct	165163145054
	oct	040164150145
	oct	040111055117
	oct	055103117116
	oct	124122117114
	oct	040160141162
	oct	141147162141
	oct	160150040157
	oct	162040104101
	oct	124101040104
	oct	111126111123
	oct	111117116040
	oct	124150145040
	oct	151155160154
	oct	145155145156
	oct	164157162055
	oct	156141155145
	oct	040151156040
	oct	164150151163
	oct	040101123123
	oct	111107116040
	oct	143154141165
	oct	163145040151
	oct	163040151156
	oct	143157162162
	oct	145143164154
	oct	171040163160
	oct	145143151146
	oct	151145144040
	oct	124150151163
	oct	040117122107
	oct	101116111132
	oct	101124111117
	oct	116040143154
	oct	141165163145
	oct	040151163040
	oct	151156166141
	oct	154151144040
	oct	124150151163
	oct	040117122107
	oct	101116111132
	oct	101124111117
	oct	116040143154
	oct	141165163145
	oct	040151163040
	oct	151156166141
	oct	154151144040
	oct	101040165163
	oct	145162040167
	oct	157162144040
	oct	151163040162
	oct	145161165151
	oct	162145144040
	oct	150145162145
	oct	040124150151
	oct	163040101103
	oct	103105123123
	oct	040143154141
	oct	165163145040
	oct	151163040151
	oct	156166141154
	oct	151144040124
	oct	150151163040
	oct	103101124101
	oct	114117107055
	oct	116101115105
	oct	040143154141
	oct	165163145040
	oct	151163040151
	oct	156166141154
	oct	151144040111
	oct	154154145147
	oct	141154040143
	oct	154141165163
	oct	145040163160
	oct	145143151146
	oct	151145144040
	oct	151156040164
	oct	150145040111
	oct	055117055103
	oct	117116124122
	oct	117114040160
	oct	141162141147
	oct	162141160150
	oct	040124150151
	oct	163040101120
	oct	120114131040
	oct	143154141165
	oct	163145040151
	oct	163040151156
	oct	166141154151
	oct	144040101040
	oct	146151154145
	oct	055156141155
	oct	145040151163
	oct	040162145161
	oct	165151162145
	oct	144040150145
	oct	162145040124
	oct	150151163040
	oct	101120120114
	oct	131040101124
	oct	124101103110
	oct	055117120124
	oct	111117116123
	oct	040143154141
	oct	165163145040
	oct	151163040151
	oct	156166141154
	oct	151144040124
	oct	150145040167
	oct	157162144040
	oct	107105116105
	oct	122101124111
	oct	117116054040
	oct	115117104111
	oct	106111103101
	oct	124111117116
	oct	040157162040
	oct	122105120114
	oct	101103105115
	oct	105116124040
	oct	151163040162
	oct	145161165151
	oct	162145144040
	oct	150145162145
	oct	040101040165
	oct	163145162040
	oct	167157162144
	oct	040157162040
	oct	141156040141
	oct	154160150141
	oct	156165155145
	oct	162151143040
	oct	154151164145
	oct	162141154040
	oct	151163040162
	oct	145161165151
	oct	162145144040
	oct	150145162145
	oct	040101040165
	oct	163145162040
	oct	167157162144
	oct	040157162040
	oct	141156040151
	oct	156164145147
	oct	145162040151
	oct	163040162145
	oct	161165151162
	oct	145144040150
	oct	145162145040
	oct	124150145040
	oct	167157162144
	oct	040103101124
	oct	101114117107
	oct	055116101115
	oct	105040151163
	oct	040162145161
	oct	165151162145
	oct	144040150145
	oct	162145040124
	oct	150145040167
	oct	157162144040
	oct	122105105114
	oct	040157162040
	oct	125116111124
	oct	040151163040
	oct	162145161165
	oct	151162145144
	oct	040150145162
	oct	145040124150
	oct	145040167157
	oct	162144040103
	oct	114117103113
	oct	055125116111
	oct	124123040157
	oct	162040122105
	oct	103117122104
	oct	123040151163
	oct	040162145161
	oct	165151162145
	oct	144040150145
	oct	162145040124
	oct	150145040146
	oct	151154145055
	oct	156141155145
	oct	040151156040
	oct	164150151163
	oct	040143154141
	oct	165163145040
	oct	151163040151
	oct	156166141154
	oct	151144040101
	oct	040146151154
	oct	145055156141
	oct	155145040157
	oct	162040103110
	oct	105103113120
	oct	117111116124
	oct	055106111114
	oct	105040151163
	oct	040162145161
	oct	165151162145
	oct	144040150145
	oct	162145040124
	oct	150145040146
	oct	151154145055
	oct	156141155145
	oct	040150141163
	oct	040160162145
	oct	166151157165
	oct	163154171040
	oct	141160160145
	oct	141162145144
	oct	040151156040
	oct	141040123101
	oct	115105040101
	oct	122105101040
	oct	143154141165
	oct	163145040117
	oct	156154171040
	oct	157156145040
	oct	146151154145
	oct	055156141155
	oct	145040167141
	oct	163040163160
	oct	145143151146
	oct	151145144040
	oct	151156040164
	oct	150151163040
	oct	123101115105
	oct	040101122105
	oct	101040143154
	oct	141165163145
	oct	040124150145
	oct	040167157162
	oct	144040106111
	oct	114105040151
	oct	163040162145
	oct	161165151162
	oct	145144040150
	oct	145162145040
	oct	124150145040
	oct	146151154145
	oct	055156141155
	oct	145040150141
	oct	163040160162
	oct	145166151157
	oct	165163154171
	oct	040141160160
	oct	145141162145
	oct	144040151156
	oct	040141040115
	oct	125114124111
	oct	120114105040
	oct	106111114105
	oct	040143154141
	oct	165163145040
	oct	124150145040
	oct	167157162144
	oct	040122105103
	oct	117122104040
	oct	151163040162
	oct	145161165151
	oct	162145144040
	oct	150145162145
	oct	040124150145
	oct	040167157162
	oct	144040124105
	oct	115120117122
	oct	101122131040
	oct	157162040120
	oct	105122115101
	oct	116105116124
	oct	040151163040
	oct	162145161165
	oct	151162145144
	oct	040150145162
	oct	145040105122
	oct	122117122066
	oct	071040124150
	oct	145040167157
	oct	162144040127
	oct	117122104123
	oct	054040103110
	oct	101122101103
	oct	124105122123
	oct	040157162040
	oct	115117104125
	oct	114105123040
	oct	151163040162
	oct	145161165151
	oct	162145144040
	oct	150145162145
	oct	040124150145
	oct	040167157162
	oct	144040123131
	oct	123111116054
	oct	040103117116
	oct	123117114105
	oct	054040123131
	oct	123117125124
	oct	054040114105
	oct	101104111116
	oct	107040157162
	oct	040124122101
	oct	111114111116
	oct	107040151163
	oct	040162145161
	oct	165151162145
	oct	144040150145
	oct	162145040124
	oct	150145040167
	oct	157162144040
	oct	117115111124
	oct	124105104040
	oct	157162040115
	oct	105123123101
	oct	107105040151
	oct	163040162145
	oct	161165151162
	oct	145144040150
	oct	145162145040
	oct	124150145040
	oct	167157162144
	oct	040123125102
	oct	123124111124
	oct	125124111117
	oct	116040157162
	oct	040104105106
	oct	101125114124
	oct	040151163040
	oct	162145161165
	oct	151162145144
	oct	040150145162
	oct	145040105122
	oct	122117122067
	oct	064040105122
	oct	122117122067
	oct	065040101040
	oct	103157156146
	oct	151147165162
	oct	141164151157
	oct	156040123145
	oct	143164151157
	oct	156040151163
	oct	040162145161
	oct	165151162145
	oct	144040150145
	oct	162145040101
	oct	040123117125
	oct	122103105055
	oct	103117115120
	oct	125124105122
	oct	040160141162
	oct	141147162141
	oct	160150040155
	oct	165163164040
	oct	160162145143
	oct	145144145040
	oct	164150151163
	oct	040167157162
	oct	144040101156
	oct	040117102112
	oct	105103124055
	oct	103117115120
	oct	125124105122
	oct	040160141162
	oct	141147162141
	oct	160150040155
	oct	165163164040
	oct	160162145143
	oct	145144145040
	oct	164150151163
	oct	040167157162
	oct	144040124150
	oct	151163040143
	oct	154141165163
	oct	145040151163
	oct	040156157164
	oct	040162145143
	oct	157147156151
	oct	172145144073
	oct	040143154141
	oct	165163145040
	oct	151147156157
	oct	162145144040
	oct	124150145040
	oct	143154141165
	oct	163145054040
	oct	160141162141
	oct	147162141160
	oct	150040157162
	oct	040157160164
	oct	151157156040
	oct	151163040162
	oct	145144165156
	oct	144141156164
	oct	073040151164
	oct	040151163040
	oct	151147156157
	oct	162145144040
	oct	124150145040
	oct	167157162144
	oct	040114105101
	oct	104111116107
	oct	040157162040
	oct	124122101111
	oct	114111116107
	oct	040151163040
	oct	162145161165
	oct	151162145144
	oct	040150145162
	oct	145040124150
	oct	145040167157
	oct	162144040103
	oct	117116123117
	oct	114105040157
	oct	162040123131
	oct	123111116040
	oct	151163040162
	oct	145161165151
	oct	162145144040
	oct	150145162145
	oct	040101156040
	oct	151156164145
	oct	147145162040
	oct	142145164167
	oct	145145156040
	oct	061070040141
	oct	156144040066
	oct	061040151163
	oct	040162145161
	oct	165151162145
	oct	144040150145
	oct	162145040124
	oct	150145040167
	oct	157162144040
	oct	121125105125
	oct	105040151163
	oct	040162145161
	oct	165151162145
	oct	144040150145
	oct	162145040101
	oct	156040141154
	oct	160150141156
	oct	165155145162
	oct	151143040154
	oct	151164145162
	oct	141154040157
	oct	162040141156
	oct	040151156164
	oct	145147145162
	oct	040157162040
	oct	141156040141
	oct	154160150141
	oct	142145164055
	oct	156141155145
	oct	040151163040
	oct	162145161165
	oct	151162145144
	oct	040150145162
	oct	145040101040
	oct	167157162144
	oct	040144145146
	oct	151156151156
	oct	147040141040
	oct	144141164141
	oct	040151164145
	oct	155040165163
	oct	141147145040
	oct	157164150145
	oct	162040164150
	oct	141156040151
	oct	156144145170
	oct	040151163040
	oct	162145161165
	oct	151162145144
	oct	040150145162
	oct	145040124150
	oct	145040167157
	oct	162144040101
	oct	104104122105
	oct	123123040157
	oct	162040141156
	oct	040151156164
	oct	145147145162
	oct	040151163040
	oct	162145161165
	oct	151162145144
	oct	040150145162
	oct	145040124150
	oct	145040143154
	oct	141165163145
	oct	163040151156
	oct	040164150145
	oct	040117102112
	oct	105103124055
	oct	103117115120
	oct	125124105122
	oct	040160141162
	oct	141147162141
	oct	160150040141
	oct	162145040156
	oct	157164040151
	oct	156040160162
	oct	157160145162
	oct	040157162144
	oct	145162040123
	oct	171156164141
	oct	170040143150
	oct	145143153151
	oct	156147040162
	oct	145163165155
	oct	145144040124
	oct	150151163040
	oct	122105122125
	oct	116040143154
	oct	141165163145
	oct	040151163040
	oct	151156166141
	oct	154151144040
	oct	124150145040
	oct	167157162144
	oct	040117102112
	oct	105103124055
	oct	120122117107
	oct	122101115040
	oct	151163040162
	oct	145161165151
	oct	162145144040
	oct	150145162145
	oct	040124150145
	oct	040167157162
	oct	144040102111
	oct	124123040151
	oct	163040162145
	oct	161165151162
	oct	145144040150
	oct	145162145040
	oct	101040160165
	oct	156143164165
	oct	141164151157
	oct	156040143150
	oct	141162141143
	oct	164145162040
	oct	151163040151
	oct	154154145147
	oct	141154040160
	oct	162151157162
	oct	040164157040
	oct	164150151163
	oct	040167157162
	oct	144073040143
	oct	150141162141
	oct	143164145162
	oct	040151147156
	oct	157162145144
	oct	040124150151
	oct	163040101120
	oct	120114131040
	oct	124101120105
	oct	055117120124
	oct	111117116123
	oct	040143154141
	oct	165163145040
	oct	151163040151
	oct	156166141154
	oct	151144040124
	oct	150145040167
	oct	157162144040
	oct	104105124101
	oct	103110040151
	oct	163040162145
	oct	161165151162
	oct	145144040150
	oct	145162145040
	oct	124150145040
	oct	143154141165
	oct	163145163040
	oct	151156040164
	oct	150145040111
	oct	055117055103
	oct	117116124122
	oct	117114040160
	oct	141162141147
	oct	162141160150
	oct	040141162145
	oct	040156157164
	oct	040151156040
	oct	160162157160
	oct	145162040157
	oct	162144145162
	oct	040124150145
	oct	040167157162
	oct	144040117116
	oct	040157162040
	oct	117106106040
	oct	151163040162
	oct	145161165151
	oct	162145144040
	oct	150145162145
	oct	040124150151
	oct	163040101120
	oct	120114131040
	oct	124101120105
	oct	055117120124
	oct	111117116123
	oct	040143154141
	oct	165163145040
	oct	151163040151
	oct	156166141154
	oct	151144040124
	oct	150145040141
	oct	154160150141
	oct	142145164055
	oct	156141155145
	oct	040165163145
	oct	144040151156
	oct	040164150145
	oct	040120122117
	oct	107122101115
	oct	040103117114
	oct	114101124111
	oct	116107040123
	oct	105121125105
	oct	116103105040
	oct	143154141165
	oct	163145040151
	oct	163040156157
	oct	164040144145
	oct	146151156145
	oct	144073040116
	oct	101124111126
	oct	105040151163
	oct	040141163163
	oct	165155145144
	oct	040124150145
	oct	040167157162
	oct	144040111116
	oct	120125124055
	oct	117125124120
	oct	125124040157
	oct	162040104101
	oct	124101040151
	oct	163040162145
	oct	161165151162
	oct	145144040150
	oct	145162145040
	oct	124150151163
	oct	040167157162
	oct	144040151163
	oct	040156157164
	oct	040141040154
	oct	145147151164
	oct	151155141164
	oct	145040146151
	oct	154145055156
	oct	141155145073
	oct	040167157162
	oct	144040151147
	oct	156157162145
	oct	144040124150
	oct	151163040157
	oct	162144151156
	oct	141154040156
	oct	165155142145
	oct	162040151163
	oct	040151147156
	oct	157162145144
	oct	040163151156
	oct	143145040151
	oct	164040151163
	oct	040156157164
	oct	040151156040
	oct	164150145040
	oct	143154157163
	oct	145144040151
	oct	156164145162
	oct	166141154040
	oct	133061040054
	oct	040061062070
	oct	135040117142
	oct	163157154145
	oct	164145040165
	oct	163141147145
	oct	040157146040
	oct	151155160154
	oct	145155145156
	oct	164157162055
	oct	156141155145
	oct	040151156040
	oct	123105121125
	oct	105116103105
	oct	040143154141
	oct	165163145040
	oct	141143143145
	oct	160164145144
	oct	073040151164
	oct	040163150157
	oct	165154144040
	oct	142145040144
	oct	145146151156
	oct	145144040141
	oct	163040141040
	oct	155156145155
	oct	157156151143
	oct	055156141155
	oct	145040123171
	oct	156164141170
	oct	040143150145
	oct	143153151156
	oct	147040144151
	oct	163143157156
	oct	164151156165
	oct	145144040105
	oct	122122117122
	oct	061060065040
	oct	111155160154
	oct	145155145156
	oct	164157162040
	oct	156141155145
	oct	040145170143
	oct	145145144163
	oct	040061066040
	oct	143150141162
	oct	141143164145
	oct	162163054040
	oct	151164040151
	oct	163040142145
	oct	151156147040
	oct	164162165156
	oct	143141164145
	oct	144040111154
	oct	154145147141
	oct	154040156141
	oct	155145040165
	oct	163145144040
	oct	151156040141
	oct	163163151147
	oct	156040143154
	oct	141165163145
	oct	040111154154
	oct	145147141154
	oct	040165163145
	oct	040157146040
	oct	150171160150
	oct	145156040151
	oct	156040144145
	oct	166151143145
	oct	040143157144
	oct	145040124150
	oct	145040141143
	oct	143145163163
	oct	040141156144
	oct	040157162147
	oct	141156151172
	oct	141164151157
	oct	156040143154
	oct	141165163145
	oct	163040141162
	oct	145040151156
	oct	143157155160
	oct	141164151142
	oct	154145054040
	oct	163145161165
	oct	145156164151
	oct	141154040141
	oct	143143145163
	oct	163040151163
	oct	040141163163
	oct	165155145144
	oct	040125163145
	oct	040157146040
	oct	141156040117
	oct	120124111117
	oct	116101114040
	oct	146151154145
	oct	040167151164
	oct	150040157162
	oct	147141156151
	oct	172141164151
	oct	157156040157
	oct	164150145162
	oct	040164150141
	oct	156040163145
	oct	161165145156
	oct	164151141154
	oct	040151163040
	oct	141156040145
	oct	170164145156
	oct	163151157156
	oct	040164157040
	oct	101116123040
	oct	103117102117
	oct	114055067064
	oct	040105122122
	oct	117122061061
	oct	061054040143
	oct	157155160151
	oct	154145162040
	oct	142165147040
	oct	103117115120
	oct	111114105122
	oct	040105122122
	oct	117122040055
	oct	040145162162
	oct	157162040061
	oct	061062040124
	oct	150145040163
	oct	151172145040
	oct	157146040164
	oct	150151163040
	oct	162145144145
	oct	146151156145
	oct	144040151164
	oct	145155040151
	oct	163040165156
	oct	145161165141
	oct	154040164157
	oct	040164150141
	oct	164040157146
	oct	040164150145
	oct	040157142152
	oct	145143164040
	oct	157146040162
	oct	145144145146
	oct	151156151164
	oct	151157156040
	oct	102154157143
	oct	153040163151
	oct	172145040155
	oct	165163164040
	oct	145161165141
	oct	154040155141
	oct	170151155165
	oct	155040162145
	oct	143157162144
	oct	040163151172
	oct	145040124150
	oct	145040163160
	oct	145143151146
	oct	151145144040
	oct	142154157143
	oct	153040163151
	oct	172145040151
	oct	163040164157
	oct	157040163155
	oct	141154154040
	oct	164157040143
	oct	157156164141
	oct	151156040164
	oct	150145040154
	oct	141162147145
	oct	163164040146
	oct	151154145040
	oct	162145143157
	oct	162144073040
	oct	102114117103
	oct	113040123111
	oct	132105040143
	oct	154141165163
	oct	145040151147
	oct	156157162145
	oct	144040124150
	oct	145040162145
	oct	143157162144
	oct	040146157162
	oct	155141164040
	oct	146157162040
	oct	164150151163
	oct	040146151154
	oct	145040151163
	oct	040141154154
	oct	157167145144
	oct	040157156154
	oct	171040157156
	oct	040164141160
	oct	145040124150
	oct	145040162145
	oct	143157162144
	oct	040146157162
	oct	155141164040
	oct	146157162040
	oct	164150151163
	oct	040146151154
	oct	145040151163
	oct	040141154154
	oct	157167145144
	oct	040157156154
	oct	171040157156
	oct	040164141160
	oct	145040157162
	oct	040144151163
	oct	153040124150
	oct	145040104105
	oct	120105116104
	oct	111116107040
	oct	117116040157
	oct	160164151157
	oct	156040157146
	oct	040164150145
	oct	040122105103
	oct	117122104040
	oct	103117116124
	oct	101111116123
	oct	040143154141
	oct	165163145040
	oct	151163040156
	oct	157164040160
	oct	145162155151
	oct	164164145144
	oct	040167151164
	oct	150040164150
	oct	151163040162
	oct	145143157162
	oct	144040146157
	oct	162155141164
	oct	040101040144
	oct	141164141040
	oct	162145143157
	oct	162144040146
	oct	157162040164
	oct	150151163040
	oct	146151154145
	oct	040151163040
	oct	164157157040
	oct	154141162147
	oct	145040146157
	oct	162040164150
	oct	145040163160
	oct	145143151146
	oct	151145144040
	oct	144145166151
	oct	143145040115
	oct	165154164151
	oct	160154171040
	oct	144145146151
	oct	156145144040
	oct	143150141162
	oct	141143164145
	oct	162163040157
	oct	143143165162
	oct	040151156040
	oct	164150145040
	oct	160162145143
	oct	145145144151
	oct	156147040141
	oct	154160150141
	oct	142145164040
	oct	144145146151
	oct	156151164151
	oct	157156073040
	oct	164150145151
	oct	162040146151
	oct	162163164040
	oct	144145146151
	oct	156151164151
	oct	157156040151
	oct	163040165163
	oct	145144040124
	oct	150145040144
	oct	141164141040
	oct	164171160145
	oct	040157146040
	oct	164150151163
	oct	040151164145
	oct	155040166151
	oct	157154141164
	oct	145163040103
	oct	117104105055
	oct	123105124040
	oct	162145161165
	oct	151162145155
	oct	145156164163
	oct	040157146040
	oct	164150145040
	oct	143157156164
	oct	141151156151
	oct	156147040146
	oct	151154145040
	oct	124150145040
	oct	162145143157
	oct	162144040163
	oct	151172145040
	oct	146157162040
	oct	164150151163
	oct	040146151154
	oct	145040151163
	oct	040154145163
	oct	163040164150
	oct	141156040164
	oct	150145040155
	oct	151156151155
	oct	165155040061
	oct	070040143150
	oct	141162141143
	oct	164145162163
	oct	040162145161
	oct	165151162145
	oct	144040146157
	oct	162040101116
	oct	123040164141
	oct	160145040146
	oct	151154145163
	oct	040124150145
	oct	040162145143
	oct	157162144040
	oct	163151172145
	oct	040146157162
	oct	040164150151
	oct	163040146151
	oct	154145040145
	oct	170143145145
	oct	144163040164
	oct	150145040155
	oct	141170151155
	oct	165155040070
	oct	061070070040
	oct	143150141162
	oct	141143164145
	oct	162163040141
	oct	154154157167
	oct	145144040146
	oct	157162040126
	oct	114122040101
	oct	116123040164
	oct	141160145040
	oct	146151154145
	oct	163040124150
	oct	145040162145
	oct	143157162144
	oct	040163151172
	oct	145040146157
	oct	162040164150
	oct	151163040146
	oct	151154145040
	oct	145170143145
	oct	145144163040
	oct	164150145040
	oct	155141170151
	oct	155165155040
	oct	061054060064
	oct	064054064070
	oct	060040143150
	oct	141162141143
	oct	164145162163
	oct	040141154154
	oct	157167145144
	oct	040146157162
	oct	040123120101
	oct	116116105104
	oct	040101116123
	oct	040164141160
	oct	145040146151
	oct	154145163040
	oct	124150145040
	oct	162145143157
	oct	162144040163
	oct	151172145040
	oct	146157162040
	oct	164150151163
	oct	040146151154
	oct	145040145170
	oct	143145145144
	oct	163040164150
	oct	145040155141
	oct	170151155165
	oct	155040070061
	oct	071062040143
	oct	150141162141
	oct	143164145162
	oct	163040141154
	oct	154157167145
	oct	144040146157
	oct	162040126114
	oct	122040101116
	oct	123040164141
	oct	160145040146
	oct	151154145163
	oct	040124150145
	oct	040142154157
	oct	143153040163
	oct	151172145040
	oct	146157162040
	oct	164150151163
	oct	040146151154
	oct	145040151163
	oct	040154145163
	oct	163040164150
	oct	141156040164
	oct	150145040155
	oct	151156151155
	oct	165155040061
	oct	070040143150
	oct	141162141143
	oct	164145162163
	oct	040162145161
	oct	165151162145
	oct	144040146157
	oct	162040101116
	oct	123040164141
	oct	160145040146
	oct	151154145163
	oct	040124150145
	oct	040142154157
	oct	143153040163
	oct	151172145040
	oct	163160145143
	oct	151146151145
	oct	144040146157
	oct	162040164150
	oct	151163040146
	oct	151154145040
	oct	151163040154
	oct	145163163040
	oct	164150141156
	oct	040164150145
	oct	040154141162
	oct	147145163164
	oct	040144145146
	oct	151156145144
	oct	040162145143
	oct	157162144040
	oct	163151172145
	oct	040124150145
	oct	040142154157
	oct	143153040163
	oct	151172145040
	oct	163160145143
	oct	151146151145
	oct	144040146157
	oct	162040164150
	oct	151163040146
	oct	151154145040
	oct	151163040156
	oct	157164040141
	oct	040155165154
	oct	164151160154
	oct	145040157146
	oct	040164150145
	oct	040162145143
	oct	157162144040
	oct	163151172145
	oct	040124150145
	oct	040141143164
	oct	165141154040
	oct	142154157143
	oct	153040163151
	oct	172145040165
	oct	163145144040
	oct	167151154154
	oct	040142145040
	oct	151156143162
	oct	145141163145
	oct	144040141143
	oct	143157162144
	oct	151156147154
	oct	171040124150
	oct	145040141143
	oct	164165141154
	oct	040162145143
	oct	157162144040
	oct	163151172145
	oct	040165163145
	oct	144040167151
	oct	154154040142
	oct	145040141144
	oct	152165163164
	oct	145144040141
	oct	143143157162
	oct	144151156147
	oct	154171040124
	oct	150145040141
	oct	143164165141
	oct	154040162145
	oct	143157162144
	oct	040163151172
	oct	145040165163
	oct	145144040167
	oct	151154154040
	oct	142145040164
	oct	150141164040
	oct	163160145143
	oct	151146151145
	oct	144040151156
	oct	040164150145
	oct	040122105103
	oct	117122104040
	oct	103117116124
	oct	101111116123
	oct	040143154141
	oct	165163145040
	oct	115151156151
	oct	155165155040
	oct	122105103117
	oct	122104040103
	oct	117116124101
	oct	111116123040
	oct	163151172145
	oct	040151163040
	oct	060040157162
	oct	040156157164
	oct	040163160145
	oct	143151146151
	oct	145144040146
	oct	157162040164
	oct	150151163040
	oct	146151154145
	oct	040143157156
	oct	164141151156
	oct	151156147040
	oct	166141162151
	oct	141142154145
	oct	040154145156
	oct	147164150040
	oct	162145143157
	oct	162144163040
	oct	124150145040
	oct	122105103117
	oct	122104040103
	oct	117116124101
	oct	111116123040
	oct	163151172145
	oct	040146157162
	oct	040164150151
	oct	163040146151
	oct	154145040151
	oct	163040151156
	oct	143157156163
	oct	151163164145
	oct	156164040167
	oct	151164150040
	oct	164150141164
	oct	040162145161
	oct	165151162145
	oct	144040142171
	oct	040164150145
	oct	040162145143
	oct	157162144040
	oct	144145163143
	oct	162151160164
	oct	151157156040
	oct	124150145040
	oct	102114117103
	oct	113040103117
	oct	116124101111
	oct	116123040143
	oct	154141165163
	oct	145040146157
	oct	162040164150
	oct	151163040146
	oct	151154145040
	oct	151163040151
	oct	147156157162
	oct	145144040141
	oct	163040142154
	oct	157143153151
	oct	156147040151
	oct	163040156157
	oct	164040141160
	oct	160154151143
	oct	141142154145
	oct	040164157040
	oct	151164163040
	oct	144145166151
	oct	143145040124
	oct	150145040163
	oct	151172145040
	oct	157146040164
	oct	150151163040
	oct	162145144145
	oct	146151156145
	oct	144040154145
	oct	166145154040
	oct	060061040151
	oct	164145155040
	oct	151163040147
	oct	162145141164
	oct	145162040164
	oct	150141156040
	oct	164150141164
	oct	040157146040
	oct	164150145040
	oct	157142152145
	oct	143164040157
	oct	146040162145
	oct	144145146151
	oct	156151164151
	oct	157156040124
	oct	150145040141
	oct	154154157143
	oct	141164151157
	oct	156040157146
	oct	040164150151
	oct	163040151164
	oct	145155040151
	oct	163040151156
	oct	143162145141
	oct	163145144040
	oct	144165145040
	oct	164157040141
	oct	040146157154
	oct	154157167151
	oct	156147040162
	oct	145144145146
	oct	151156145144
	oct	040151164145
	oct	155040157146
	oct	040147162145
	oct	141164145162
	oct	040154145156
	oct	147164150040
	oct	124150145040
	oct	141154154157
	oct	143141164151
	oct	157156040157
	oct	146040164150
	oct	151163040151
	oct	164145155040
	oct	151163040156
	oct	157156055143
	oct	157156164151
	oct	147165157165
	oct	163040144165
	oct	145040164157
	oct	040164150145
	oct	040163171156
	oct	143150162157
	oct	156151172141
	oct	164151157156
	oct	040151155160
	oct	154151145144
	oct	040142171040
	oct	151164163040
	oct	165163141147
	oct	145040124150
	oct	145040141154
	oct	154157143141
	oct	164151157156
	oct	040157146040
	oct	145154145155
	oct	145156164163
	oct	040157146040
	oct	164150151163
	oct	040141162162
	oct	141171040151
	oct	163040156157
	oct	156055143157
	oct	156164151147
	oct	165157165163
	oct	040144165145
	oct	040164157040
	oct	163171156143
	oct	150162157156
	oct	151172141164
	oct	151157156040
	oct	157146040141
	oct	040143157156
	oct	164141151156
	oct	145144040151
	oct	164145155040
	oct	124150145040
	oct	141154154157
	oct	143141164151
	oct	157156040157
	oct	146040164150
	oct	151163040151
	oct	164145155040
	oct	151163040156
	oct	157156055143
	oct	157156164151
	oct	147165157165
	oct	163040144165
	oct	145040164157
	oct	040151155160
	oct	154151143151
	oct	164040142171
	oct	164145040163
	oct	171156143150
	oct	162157156151
	oct	172141164151
	oct	157156040157
	oct	146040104111
	oct	123120114101
	oct	131040165163
	oct	141147145040
	oct	144141164141
	oct	040124150145
	oct	040141154154
	oct	157143141164
	oct	151157156040
	oct	157146040164
	oct	150151163040
	oct	151164145155
	oct	040151163040
	oct	156157156055
	oct	143157156164
	oct	151147165157
	oct	165163040144
	oct	165145040164
	oct	157040151155
	oct	160154151143
	oct	151164040142
	oct	171164145040
	oct	163171156143
	oct	150162157156
	oct	151172141164
	oct	151157156040
	oct	157146040156
	oct	157156055145
	oct	154145155145
	oct	156164141162
	oct	171040144141
	oct	164141040101
	oct	040144165160
	oct	154151143141
	oct	164145040151
	oct	156164145162
	oct	156141154055
	oct	146151154145
	oct	055156141155
	oct	145040150141
	oct	163040142145
	oct	145156040144
	oct	145146151156
	oct	145144054040
	oct	164150151163
	oct	040143157165
	oct	154144040142
	oct	145040144141
	oct	156147145162
	oct	157165163040
	oct	124150145040
	oct	141154154157
	oct	143141164151
	oct	157156040157
	oct	146040164150
	oct	151163040151
	oct	164145155040
	oct	151163040156
	oct	157156055143
	oct	157156164151
	oct	147165157165
	oct	163040144165
	oct	145040164157
	oct	040164150145
	oct	040123131116
	oct	103110122117
	oct	116111132105
	oct	040143154141
	oct	165163145040
	oct	157146040164
	oct	150145040160
	oct	162145143145
	oct	144151156147
	oct	040151164145
	oct	155040124150
	oct	145040141154
	oct	154157143141
	oct	164151157156
	oct	040157146040
	oct	164150151163
	oct	040151164145
	oct	155040151163
	oct	040156157156
	oct	055143157156
	oct	164151147165
	oct	157165163040
	oct	144165145040
	oct	164157040163
	oct	160145143151
	oct	146151143141
	oct	164151157156
	oct	040157146040
	oct	164150145040
	oct	123131116103
	oct	110122117116
	oct	111132105040
	oct	143154141165
	oct	163145040124
	oct	150145040143
	oct	154141165163
	oct	145040101120
	oct	120114131040
	oct	146151154145
	oct	055156141155
	oct	145040111123
	oct	040124105115
	oct	120117122101
	oct	122131040155
	oct	141171040156
	oct	157164040142
	oct	145040165163
	oct	145144040146
	oct	157162040145
	oct	170164145162
	oct	156141154040
	oct	146151154145
	oct	163054040151
	oct	164040151163
	oct	040151147156
	oct	157162145144
	oct	040101040163
	oct	145143164151
	oct	157156040157
	oct	146040164150
	oct	145040104141
	oct	164141040104
	oct	151166151163
	oct	151157156040
	oct	151163040145
	oct	170160145143
	oct	164145144040
	oct	150145162145
	oct	040122145163
	oct	145162166145
	oct	144040167157
	oct	162144040123
	oct	105103124111
	oct	117116040151
	oct	163040155151
	oct	163163151156
	oct	147040120145
	oct	162151157144
	oct	040151163040
	oct	155151163163
	oct	151156147040
	oct	122145144165
	oct	156144141156
	oct	164040106151
	oct	154145040123
	oct	145143164151
	oct	157156040163
	oct	160145143151
	oct	146151145144
	oct	040055040157
	oct	156154171040
	oct	157156145040
	oct	141154154157
	oct	167145144040
	oct	160145162040
	oct	160162157147
	oct	162141155040
	oct	123145143164
	oct	151157156040
	oct	157165164040
	oct	157146040157
	oct	162144145162
	oct	040101040106
	oct	151154145040
	oct	123145143164
	oct	151157156040
	oct	154145166145
	oct	154040151156
	oct	144151143141
	oct	164157162040
	oct	151163040145
	oct	170160145143
	oct	164145144040
	oct	150145162145
	oct	040055040145
	oct	151164150145
	oct	162040106104
	oct	054040123104
	oct	054040157162
	oct	040123101040
	oct	124150145040
	oct	162145143157
	oct	162144040156
	oct	141155145040
	oct	157146040164
	oct	150151163040
	oct	146151154145
	oct	040151163040
	oct	151156040145
	oct	162162157162
	oct	040101040146
	oct	141164141154
	oct	040163171156
	oct	164141170040
	oct	145162162157
	oct	162040145170
	oct	151163164163
	oct	040151156040
	oct	164150145040
	oct	163160145143
	oct	151146151143
	oct	141164151157
	oct	156040157146
	oct	040164150151
	oct	163040162145
	oct	143157162144
	oct	073040163171
	oct	156164141170
	oct	040141156141
	oct	154171163151
	oct	163040156157
	oct	164040143157
	oct	155160154145
	oct	164145144040
	oct	124150145040
	oct	146157154154
	oct	157167151156
	oct	147040144141
	oct	164141040160
	oct	162157160145
	oct	162164151145
	oct	163040151156
	oct	040164150151
	oct	163040144141
	oct	164141040151
	oct	164145155040
	oct	141162145040
	oct	151156143157
	oct	156163151163
	oct	164145156164
	oct	040167151164
	oct	150040136040
	oct	124150151163
	oct	040146151154
	oct	145055156141
	oct	155145040151
	oct	163040156157
	oct	164040144145
	oct	146151156145
	oct	144040151156
	oct	040164150145
	oct	040105156166
	oct	151162157156
	oct	155145156164
	oct	040104151166
	oct	151163151157
	oct	156040111156
	oct	166141154151
	oct	144040106104
	oct	040143154141
	oct	165163145163
	oct	040141162145
	oct	040163160145
	oct	143151146151
	oct	145144040114
	oct	101102105114
	oct	040143154141
	oct	165163145040
	oct	151163040155
	oct	151163163151
	oct	156147040151
	oct	156040143165
	oct	162162145156
	oct	164040106104
	oct	040145156164
	oct	162171040122
	oct	145143157162
	oct	144040144145
	oct	163143162151
	oct	160164151157
	oct	156040151163
	oct	040155151163
	oct	163151156147
	oct	040106151154
	oct	145040162145
	oct	143157162144
	oct	151156147040
	oct	143157144145
	oct	040156141155
	oct	145040151163
	oct	040151156040
	oct	145162162157
	oct	162040103110
	oct	101122101103
	oct	124105122123
	oct	040157160164
	oct	151157156040
	oct	151163040141
	oct	163163165155
	oct	145144040146
	oct	157162040164
	oct	150145040102
	oct	114117103113
	oct	040143154141
	oct	165163145040
	oct	115141170151
	oct	155165155040
	oct	102114117103
	oct	113040163151
	oct	172145040151
	oct	156164145147
	oct	145162040151
	oct	163040155151
	oct	163163151156
	oct	147040115141
	oct	170151155165
	oct	155040122105
	oct	103117122104
	oct	040163151172
	oct	145040151156
	oct	164145147145
	oct	162040151163
	oct	040155151163
	oct	163151156147
	oct	040124150145
	oct	040122105103
	oct	117122104111
	oct	116107040115
	oct	117104105040
	oct	143154141165
	oct	163145040151
	oct	163040156157
	oct	164040163165
	oct	160160157162
	oct	164145144040
	oct	105122122117
	oct	122061071054
	oct	040143157155
	oct	160151154145
	oct	162040142165
	oct	147040101040
	oct	154145147141
	oct	154040144141
	oct	164141055156
	oct	141155145040
	oct	151163040162
	oct	145161165151
	oct	162145144040
	oct	150145162145
	oct	040114151164
	oct	145162141154
	oct	040157162040
	oct	144141164141
	oct	055156141155
	oct	145040151163
	oct	040155151163
	oct	163151156147
	oct	040122145144
	oct	165156144141
	oct	156164040124
	oct	117120040160
	oct	150162141163
	oct	145040163160
	oct	145143151146
	oct	151145144040
	oct	146157162040
	oct	114111116101
	oct	107105040143
	oct	154141165163
	oct	145040114111
	oct	116101107105
	oct	040163160145
	oct	143151146151
	oct	143141164151
	oct	157156040151
	oct	163040151156
	oct	040145162162
	oct	157162040101
	oct	040146141164
	oct	141154040163
	oct	171156164141
	oct	170040145162
	oct	162157162040
	oct	145170151163
	oct	164163040151
	oct	156040164150
	oct	145040163160
	oct	145143151146
	oct	151143141164
	oct	151157156040
	oct	157146040164
	oct	150151163040
	oct	123104040145
	oct	156164162171
	oct	073040163171
	oct	156164141170
	oct	040141156141
	oct	154171163151
	oct	163040156157
	oct	164040143157
	oct	155160154145
	oct	164145144040
	oct	105170160145
	oct	143164145144
	oct	040151156164
	oct	145147145162
	oct	040151163040
	oct	155151163163
	oct	151156147040
	oct	101122105101
	oct	040143154141
	oct	165163145040
	oct	151163040155
	oct	151163163151
	oct	156147040122
	oct	145144165156
	oct	144141156164
	oct	040127157162
	oct	153151156147
	oct	055123164157
	oct	162141147145
	oct	040123145143
	oct	164151157156
	oct	040163160145
	oct	143151146151
	oct	145144040055
	oct	040157156154
	oct	171040157156
	oct	145040141154
	oct	154157167145
	oct	144040160145
	oct	162040160162
	oct	157147162141
	oct	155040101040
	oct	154145166145
	oct	154040157162
	oct	040163145143
	oct	164151157156
	oct	040151156144
	oct	151143141164
	oct	157162040151
	oct	163040162145
	oct	161165151162
	oct	145144040150
	oct	145162145040
	oct	124150145040
	oct	122105104105
	oct	106111116105
	oct	123040143154
	oct	141165163145
	oct	040167150145
	oct	156040165163
	oct	145144040155
	oct	165163164040
	oct	151155155145
	oct	144151141164
	oct	145154171040
	oct	146157154154
	oct	157167040164
	oct	150145040163
	oct	165142152145
	oct	143164040157
	oct	146040162145
	oct	144145146151
	oct	156151164151
	oct	157156040101
	oct	040143154141
	oct	165163145040
	oct	157146040164
	oct	150145040104
	oct	141164141040
	oct	104151166151
	oct	163151157156
	oct	040151163040
	oct	151156040145
	oct	162162157162
	oct	040124150145
	oct	040117103103
	oct	125122123040
	oct	104105120105
	oct	116104111116
	oct	107040117116
	oct	040151164145
	oct	155040155165
	oct	163164040142
	oct	145040146157
	oct	154154157167
	oct	145144040142
	oct	171040157156
	oct	154171040163
	oct	165142157162
	oct	144151156141
	oct	164145040151
	oct	164145155163
	oct	040101040155
	oct	151163155141
	oct	164143150040
	oct	145170151163
	oct	164163040142
	oct	145164167145
	oct	145156040164
	oct	150145040154
	oct	145166145154
	oct	040156165155
	oct	142145162163
	oct	040157146040
	oct	164150145040
	oct	163165142152
	oct	145143164040
	oct	141156144040
	oct	157142152145
	oct	143164040157
	oct	146040162145
	oct	144145146151
	oct	156151164151
	oct	157156040126
	oct	101114125105
	oct	040157146040
	oct	164150151163
	oct	040143157156
	oct	144151164151
	oct	157156055156
	oct	141155145040
	oct	151163040151
	oct	156143157156
	oct	163151163164
	oct	145156164040
	oct	167151164150
	oct	040164150145
	oct	040163160145
	oct	143151146151
	oct	145144040120
	oct	111103124125
	oct	122105040124
	oct	150145040066
	oct	066040122105
	oct	116101115105
	oct	123040151164
	oct	145155040155
	oct	165163164040
	oct	156157164040
	oct	146157154154
	oct	157167040141
	oct	040067067040
	oct	154145166145
	oct	154040151164
	oct	145155040101
	oct	040160145162
	oct	151157144040
	oct	167141163040
	oct	145170160145
	oct	143164145144
	oct	040101040143
	oct	157156144151
	oct	164151157156
	oct	055156141155
	oct	145040155165
	oct	163164040151
	oct	155155145144
	oct	151141164154
	oct	171040146157
	oct	154154157167
	oct	040164150145
	oct	040070070040
	oct	154145166145
	oct	154055156165
	oct	155142145162
	oct	040124150145
	oct	040166141154
	oct	165145040163
	oct	160145143151
	oct	146151145144
	oct	040146157162
	oct	040164150145
	oct	040143157156
	oct	144151164151
	oct	157156055156
	oct	141155145040
	oct	151163040151
	oct	156040145162
	oct	162157162040
	oct	124150145040
	oct	154145166145
	oct	154055156165
	oct	155142145162
	oct	040146157162
	oct	040164150151
	oct	163040144141
	oct	164141040151
	oct	164145155040
	oct	151163040151
	oct	156166141154
	oct	151144054040
	oct	151164040163
	oct	150157165154
	oct	144040142145
	oct	040067067054
	oct	040157162040
	oct	060061055064
	oct	071040101040
	oct	143157156144
	oct	151164151157
	oct	156055156141
	oct	155145040155
	oct	165163164040
	oct	156157164040
	oct	142145040141
	oct	163163157143
	oct	151141164145
	oct	144040167151
	oct	164150040141
	oct	040066066040
	oct	154145166145
	oct	154040151164
	oct	145155040101
	oct	040143157156
	oct	144151164151
	oct	157156055156
	oct	141155145040
	oct	155165163164
	oct	040156157164
	oct	040142145040
	oct	141163163157
	oct	143151141164
	oct	145144040167
	oct	151164150040
	oct	141156040151
	oct	156144145170
	oct	040144141164
	oct	141040151164
	oct	145155040124
	oct	150145040154
	oct	151164145162
	oct	141154040166
	oct	141154165145
	oct	040141146164
	oct	145162040164
	oct	150145040124
	oct	110122125040
	oct	155165163164
	oct	040142145040
	oct	147162145141
	oct	164145162040
	oct	164150141156
	oct	040164150145
	oct	040154151164
	oct	145162141154
	oct	040166141154
	oct	165145040142
	oct	145146157162
	oct	145040124110
	oct	122125040124
	oct	150145040157
	oct	142152145143
	oct	164040157146
	oct	040162145144
	oct	145146151156
	oct	151164151157
	oct	156040151163
	oct	040156157164
	oct	040163160145
	oct	143151146151
	oct	145144040122
	oct	145144165156
	oct	144141156164
	oct	040122105104
	oct	105106111116
	oct	105123040143
	oct	154141165163
	oct	145040163160
	oct	145143151146
	oct	151145144040
	oct	055040157156
	oct	154171040157
	oct	156145040141
	oct	154154157167
	oct	145144040160
	oct	145162040144
	oct	141164141040
	oct	151164145155
	oct	040122145144
	oct	165156144141
	oct	156164040120
	oct	111103124125
	oct	122105040143
	oct	154141165163
	oct	145040163160
	oct	145143151146
	oct	151145144040
	oct	055040157156
	oct	154171040157
	oct	156145040141
	oct	154154157167
	oct	145144040160
	oct	145162040144
	oct	141164141040
	oct	151164145155
	oct	040122145144
	oct	165156144141
	oct	156164040125
	oct	123101107105
	oct	040143154141
	oct	165163145040
	oct	163160145143
	oct	151146151145
	oct	144040055040
	oct	157156154171
	oct	040157156145
	oct	040141154154
	oct	157167145144
	oct	040160145162
	oct	040151164145
	oct	155040122145
	oct	144165156144
	oct	141156164040
	oct	126101114125
	oct	105040143154
	oct	141165163145
	oct	040163160145
	oct	143151146151
	oct	145144040055
	oct	040157156154
	oct	171040157156
	oct	145040141154
	oct	154157167145
	oct	144040160145
	oct	162040151164
	oct	145155040101
	oct	156040117103
	oct	103125122123
	oct	040143154141
	oct	165163145040
	oct	155165163164
	oct	040156157164
	oct	040142145040
	oct	163160145143
	oct	151146151145
	oct	144040146157
	oct	162040141040
	oct	154145166145
	oct	154040060061
	oct	040157162040
	oct	067067040151
	oct	164145155054
	oct	040156157162
	oct	040143141156
	oct	040151164040
	oct	142145040163
	oct	160145143151
	oct	146151145144
	oct	040162145144
	oct	165156144141
	oct	156164154171
	oct	040122145144
	oct	165156144141
	oct	156164040112
	oct	125123124111
	oct	106111105104
	oct	040143154141
	oct	165163145040
	oct	163160145143
	oct	151146151145
	oct	144040055040
	oct	157156154171
	oct	040157156145
	oct	040141154154
	oct	157167145144
	oct	040160145162
	oct	040151164145
	oct	155040122145
	oct	144165156144
	oct	141156164040
	oct	102114101116
	oct	113040127110
	oct	105116040132
	oct	105122117040
	oct	143154141165
	oct	163145040163
	oct	160145143151
	oct	146151145144
	oct	040055040157
	oct	156154171040
	oct	157156145040
	oct	141154154157
	oct	167145144040
	oct	160145162040
	oct	144141164141
	oct	040151164145
	oct	155040122145
	oct	144165156144
	oct	141156164040
	oct	123131116103
	oct	110122117116
	oct	111132105040
	oct	143154141165
	oct	163145040163
	oct	160145143151
	oct	146151145144
	oct	040055040157
	oct	156154171040
	oct	157156145040
	oct	141154154157
	oct	167145144040
	oct	160145162040
	oct	144141164141
	oct	040151164145
	oct	155040122145
	oct	144165156144
	oct	141156164040
	oct	123111107116
	oct	040143154141
	oct	165163145040
	oct	163160145143
	oct	151146151145
	oct	144040055040
	oct	157156154171
	oct	040157156145
	oct	040141154154
	oct	157167145144
	oct	040160145162
	oct	040144141164
	oct	141040151164
	oct	145155040122
	oct	145144165156
	oct	144141156164
	oct	040122105116
	oct	101115105123
	oct	040143154141
	oct	165163145040
	oct	163160145143
	oct	151146151145
	oct	144040055040
	oct	157156154171
	oct	040157156145
	oct	040141154154
	oct	157167145144
	oct	040160145162
	oct	040151164145
	oct	155040123111
	oct	107116040111
	oct	123040114105
	oct	101104111116
	oct	107040157162
	oct	040124122101
	oct	111114111116
	oct	107040151163
	oct	040156157164
	oct	040163160145
	oct	143151146151
	oct	145144040124
	oct	150145040157
	oct	142152145143
	oct	164040157146
	oct	040162145144
	oct	145146151156
	oct	151164151157
	oct	156040155165
	oct	163164040156
	oct	157164040143
	oct	157156164141
	oct	151156040141
	oct	156040117103
	oct	103125122123
	oct	040143154141
	oct	165163145040
	oct	124150145040
	oct	157142152145
	oct	143164040157
	oct	146040162145
	oct	144145146151
	oct	156151164151
	oct	157156040155
	oct	165163164040
	oct	156157164040
	oct	142145040141
	oct	040166141162
	oct	151141142154
	oct	145040154145
	oct	156147164150
	oct	040151164145
	oct	155040124150
	oct	145040157142
	oct	152145143164
	oct	040157146040
	oct	162145144145
	oct	146151156151
	oct	164151157156
	oct	040155165163
	oct	164040156157
	oct	164040142145
	oct	040141040154
	oct	145166145154
	oct	040060061040
	oct	151164145155
	oct	040124150145
	oct	040163165142
	oct	152145143164
	oct	040157146040
	oct	162145144145
	oct	146151156151
	oct	164151157156
	oct	040155165163
	oct	164040156157
	oct	164040142145
	oct	040141040166
	oct	141162151141
	oct	142154145040
	oct	154145156147
	oct	164150040151
	oct	164145155040
	oct	124150145040
	oct	163151172145
	oct	040157146040
	oct	164150145040
	oct	163165142152
	oct	145143164040
	oct	157146040162
	oct	145144145146
	oct	151156151164
	oct	151157156040
	oct	155165163164
	oct	040156157164
	oct	040142145040
	oct	147162145141
	oct	164145162040
	oct	164150141156
	oct	040164150141
	oct	164040157146
	oct	040164150145
	oct	040157142152
	oct	145143164040
	oct	157146040162
	oct	145144145146
	oct	151156151164
	oct	151157156040
	oct	124150145040
	oct	163165142152
	oct	145143164040
	oct	157146040122
	oct	105116101115
	oct	105123040151
	oct	163040156157
	oct	164040163160
	oct	145143151146
	oct	151145144040
	oct	124150145040
	oct	122105116101
	oct	115105123040
	oct	143154141165
	oct	163145040151
	oct	163040155151
	oct	163163151156
	oct	147040146157
	oct	162040164150
	oct	145040066066
	oct	040154145166
	oct	145154040151
	oct	164145155040
	oct	124150145040
	oct	157142152145
	oct	143164040157
	oct	146040122105
	oct	116101115105
	oct	123040144141
	oct	164141055156
	oct	141155145040
	oct	155165163164
	oct	040156157164
	oct	040142145040
	oct	146157165156
	oct	144040151156
	oct	040164150145
	oct	040160162145
	oct	166151157165
	oct	163040162145
	oct	143157162144
	oct	040101040066
	oct	066040154145
	oct	166145154040
	oct	145156164162
	oct	171040155165
	oct	163164040156
	oct	157164040162
	oct	145156141155
	oct	145040141156
	oct	157164150145
	oct	162040066066
	oct	054040060061
	oct	054040070070
	oct	054040157162
	oct	040067067040
	oct	154145166145
	oct	154040144141
	oct	164141040151
	oct	164145155040
	oct	124150145040
	oct	157142152145
	oct	143164040157
	oct	146040122105
	oct	116101115105
	oct	123040155165
	oct	163164040156
	oct	157164040143
	oct	157156164141
	oct	151156040141
	oct	156040117103
	oct	103125122123
	oct	040143154141
	oct	165163145040
	oct	156157162040
	oct	142145040163
	oct	165142157162
	oct	144151156141
	oct	164145040164
	oct	157040141156
	oct	040151164145
	oct	155040143157
	oct	156164141151
	oct	156151156147
	oct	040157156145
	oct	040122145163
	oct	145162166145
	oct	144040167157
	oct	162144040124
	oct	110122125040
	oct	151163040155
	oct	151163163151
	oct	156147040124
	oct	150145040114
	oct	101102105114
	oct	040143154141
	oct	165163145040
	oct	151163040155
	oct	151163163151
	oct	156147040151
	oct	156040164150
	oct	145040143165
	oct	162162145156
	oct	164040106104
	oct	040145156164
	oct	162171040124
	oct	150145040104
	oct	101124101040
	oct	122105103117
	oct	122104123040
	oct	143154141165
	oct	163145040151
	oct	163040156157
	oct	164040141154
	oct	154157167145
	oct	144040151156
	oct	040164150145
	oct	040144145163
	oct	143162151160
	oct	164151157156
	oct	040157146040
	oct	141040162145
	oct	160157162164
	oct	040146151154
	oct	145040124150
	oct	145040122105
	oct	120117122124
	oct	040141156144
	oct	040104101124
	oct	101040122105
	oct	103117122104
	oct	040143154141
	oct	165163145163
	oct	040141162145
	oct	040155165164
	oct	165141154154
	oct	171040145170
	oct	143154165163
	oct	151166145040
	oct	101156040151
	oct	156151164151
	oct	141154040166
	oct	141154165145
	oct	040155165163
	oct	164040156157
	oct	164040142145
	oct	040163160145
	oct	143151146151
	oct	145144040150
	oct	145162145040
	oct	141163040164
	oct	150145040143
	oct	157156164141
	oct	151156151156
	oct	147040147162
	oct	157165160040
	oct	141154162145
	oct	141144171040
	oct	150141163040
	oct	141040126101
	oct	114125105040
	oct	143154141165
	oct	163145040124
	oct	150145040151
	oct	156151164151
	oct	141154040166
	oct	141154165145
	oct	040151163040
	oct	151156143157
	oct	156163151163
	oct	164145156164
	oct	040167151164
	oct	150040164150
	oct	145040120111
	oct	103124125122
	oct	105040157146
	oct	040164150145
	oct	040144141164
	oct	141040151164
	oct	145155040124
	oct	150145040125
	oct	123101107105
	oct	040157146040
	oct	141040163165
	oct	142157162144
	oct	151156141164
	oct	145040151164
	oct	145155040155
	oct	165163164040
	oct	142145040143
	oct	157156163151
	oct	163164145156
	oct	164040167151
	oct	164150040164
	oct	150141164040
	oct	157146040164
	oct	150145040147
	oct	162157165160
	oct	040151164145
	oct	155040127150
	oct	145156040164
	oct	150145040147
	oct	162157165160
	oct	040144141164
	oct	141040151164
	oct	145155040150
	oct	141163040151
	oct	156151164151
	oct	141154040126
	oct	101114125105
	oct	054040164150
	oct	145040163165
	oct	142157162144
	oct	151156141164
	oct	145040151164
	oct	145155040155
	oct	165163164040
	oct	156157164040
	oct	150141166145
	oct	040125123101
	oct	107105040157
	oct	164150145162
	oct	040164150141
	oct	156040104111
	oct	123120114101
	oct	131040112125
	oct	123124111106
	oct	111105104040
	oct	122111107110
	oct	124040151163
	oct	040141163163
	oct	165155145144
	oct	040127150145
	oct	156040164150
	oct	145040147162
	oct	157165160040
	oct	144141164141
	oct	040151164145
	oct	155040150141
	oct	163040151156
	oct	151164151141
	oct	154040126101
	oct	114125105054
	oct	040164150145
	oct	040163165142
	oct	157162144151
	oct	156141164145
	oct	040151164145
	oct	155040155165
	oct	163164040156
	oct	157164040143
	oct	157156164141
	oct	151156040112
	oct	125123124111
	oct	106111105104
	oct	040143154141
	oct	165163145040
	oct	123131116103
	oct	110122117116
	oct	111132105104
	oct	040122111107
	oct	110124040151
	oct	163040141163
	oct	163165155145
	oct	144040127150
	oct	145156040164
	oct	150145040147
	oct	162157165160
	oct	040144141164
	oct	141040151164
	oct	145155040150
	oct	141163040151
	oct	156151164151
	oct	141154040126
	oct	101114125105
	oct	054040164150
	oct	145040163165
	oct	142157162144
	oct	151156141164
	oct	145040151164
	oct	145155040155
	oct	165163164040
	oct	156157164040
	oct	143157156164
	oct	141151156040
	oct	123131116103
	oct	110122117116
	oct	111132105104
	oct	040143154141
	oct	165163145040
	oct	124150145040
	oct	151156151164
	oct	151141154040
	oct	126101114125
	oct	105040163160
	oct	145143151146
	oct	151145144040
	oct	151163040165
	oct	156162145143
	oct	157147156151
	oct	172141142154
	oct	145040124150
	oct	151163040143
	oct	154141165163
	oct	145040151163
	oct	040162145144
	oct	165156144141
	oct	156164154171
	oct	040163160145
	oct	143151146151
	oct	145144040141
	oct	163040164150
	oct	145040143157
	oct	156164141151
	oct	156151156147
	oct	040147162157
	oct	165160040151
	oct	164145155040
	oct	141154162145
	oct	141144171040
	oct	143157156164
	oct	141151156163
	oct	040141040123
	oct	111107116040
	oct	143154141165
	oct	163145040122
	oct	145163145162
	oct	166145144040
	oct	167157162144
	oct	040132105122
	oct	117040151163
	oct	040155151163
	oct	163151156147
	oct	040124150151
	oct	163040112125
	oct	123124111106
	oct	111105104040
	oct	143154141165
	oct	163145040151
	oct	163040151156
	oct	166141154151
	oct	144040141163
	oct	040164150145
	oct	040143157156
	oct	164141151156
	oct	151156147040
	oct	147162157165
	oct	160040151164
	oct	145155040151
	oct	163040141163
	oct	163157143151
	oct	141164145144
	oct	040167151164
	oct	150040141040
	oct	143157156144
	oct	151164151157
	oct	156055156141
	oct	155145163040
	oct	124150151163
	oct	040123131116
	oct	103110122117
	oct	116111132105
	oct	104040143154
	oct	141165163145
	oct	040151163040
	oct	151156166141
	oct	154151144040
	oct	141163040164
	oct	150145040143
	oct	157156164141
	oct	151156151156
	oct	147040147162
	oct	157165160040
	oct	151164145155
	oct	040151163040
	oct	141163163157
	oct	143151141164
	oct	145144040167
	oct	151164150040
	oct	141040143157
	oct	156144151164
	oct	151157156055
	oct	156141155145
	oct	040124150151
	oct	163040125123
	oct	101107105040
	oct	143154141165
	oct	163145040151
	oct	163040151156
	oct	166141154151
	oct	144040141163
	oct	040164150145
	oct	040143157156
	oct	164141151156
	oct	151156147040
	oct	147162157165
	oct	160040151164
	oct	145155040151
	oct	163040141163
	oct	163157143151
	oct	141164145144
	oct	040167151164
	oct	150040141040
	oct	143157156144
	oct	151164151157
	oct	156055156141
	oct	155145040124
	oct	150145040144
	oct	151155145156
	oct	163151157156
	oct	040157146040
	oct	117103103125
	oct	122123040155
	oct	165163164040
	oct	156157164040
	oct	145170143145
	oct	145144040063
	oct	040124150145
	oct	040157143143
	oct	165162162145
	oct	156143145040
	oct	164151155145
	oct	163040151163
	oct	040156157164
	oct	040163160145
	oct	143151146151
	oct	145144040124
	oct	150145040157
	oct	143143165162
	oct	162145156143
	oct	145040164151
	oct	155145163040
	oct	155165163164
	oct	040156157164
	oct	040142145040
	oct	060040124150
	oct	145040155141
	oct	170151155165
	oct	155040157143
	oct	143165162162
	oct	145156143145
	oct	163040155165
	oct	163164040142
	oct	145040147162
	oct	145141164145
	oct	162040164150
	oct	141156040164
	oct	150145040155
	oct	151156151155
	oct	165155040157
	oct	143143165162
	oct	162145156143
	oct	145163040124
	oct	150145040122
	oct	105120117122
	oct	124040141156
	oct	144040114111
	oct	116101107105
	oct	040143154141
	oct	165163145163
	oct	040141162145
	oct	040155165164
	oct	165141154154
	oct	171040145170
	oct	143154165163
	oct	151166145040
	oct	127150145156
	oct	040164150145
	oct	040147162157
	oct	165160040151
	oct	164145155040
	oct	143157156164
	oct	141151156163
	oct	040117103103
	oct	125122123040
	oct	143154141165
	oct	163145054040
	oct	164150145040
	oct	163165142157
	oct	162144151156
	oct	141164145040
	oct	151164145155
	oct	040155165163
	oct	164040156157
	oct	164040142145
	oct	040157146040
	oct	166141162151
	oct	141142154145
	oct	040154145156
	oct	147164150040
	oct	124150145040
	oct	151156144145
	oct	170055156141
	oct	155145040151
	oct	163040155151
	oct	163163151156
	oct	147040115151
	oct	170145144040
	oct	151156144145
	oct	170151156147
	oct	040151163040
	oct	156157164040
	oct	141154154157
	oct	167145144040
	oct	055040167150
	oct	145156040141
	oct	040164141142
	oct	154145040151
	oct	164145155040
	oct	150141163040
	oct	157156145040
	oct	154145166145
	oct	154040151156
	oct	144145170145
	oct	144054040141
	oct	154154040154
	oct	145166145154
	oct	163040155165
	oct	163164040142
	oct	145040151156
	oct	144145170145
	oct	144040124150
	oct	145040123111
	oct	107116040164
	oct	171160145040
	oct	157146040141
	oct	040163165142
	oct	157162144151
	oct	156141164145
	oct	040151164145
	oct	155040155165
	oct	163164040142
	oct	145040143157
	oct	156163151163
	oct	164145156164
	oct	040167151164
	oct	150040164150
	oct	141164040157
	oct	146040164150
	oct	145040147162
	oct	157165160040
	oct	151164145155
	oct	040122145144
	oct	165156144141
	oct	156164040111
	oct	116104105130
	oct	105104040102
	oct	131040143154
	oct	141165163145
	oct	040163160145
	oct	143151146151
	oct	145144040055
	oct	040157156154
	oct	171040157156
	oct	145040141154
	oct	154157167145
	oct	144040160145
	oct	162040144141
	oct	164141040151
	oct	164145155040
	oct	124150145040
	oct	157142152145
	oct	143164040157
	oct	146040162145
	oct	144145146151
	oct	156151164151
	oct	157156040155
	oct	165163164040
	oct	156157164040
	oct	142145040161
	oct	165141154151
	oct	146151145144
	oct	073040161165
	oct	141154151146
	oct	151143141164
	oct	151157156040
	oct	151147156157
	oct	162145144040
	oct	103157155155
	oct	165156151143
	oct	141164151157
	oct	156040123145
	oct	143164151157
	oct	156040160162
	oct	145143145144
	oct	145156143145
	oct	040145162162
	oct	157162040111
	oct	156144145170
	oct	055156141155
	oct	145040164141
	oct	142154145040
	oct	157166145162
	oct	146154157167
	oct	040167150151
	oct	154145040160
	oct	162157143145
	oct	163163151156
	oct	147040103104
	oct	040144145163
	oct	164151156141
	oct	164151157156
	oct	040164141142
	oct	154145040124
	oct	150145040157
	oct	142152145143
	oct	164040157146
	oct	040162145144
	oct	145146151156
	oct	151164151157
	oct	156040155141
	oct	171040142145
	oct	040151156040
	oct	145162162157
	oct	162040114145
	oct	166145154040
	oct	151156144151
	oct	143141164157
	oct	162040103104
	oct	040151163040
	oct	155151163163
	oct	151156147040
	oct	157162040151
	oct	156040145162
	oct	162157162040
	oct	103144055156
	oct	141155145040
	oct	151163040155
	oct	151163163151
	oct	156147040111
	oct	116120125124
	oct	040157162040
	oct	117125124120
	oct	125124040157
	oct	160164151157
	oct	156040155165
	oct	163164040142
	oct	145040163160
	oct	145143151146
	oct	151145144040
	oct	146157162040
	oct	145141143150
	oct	040103104040
	oct	145156164162
	oct	171040117156
	oct	154171040157
	oct	156145040111
	oct	116111124111
	oct	101114040143
	oct	154141165163
	oct	145040151163
	oct	040141154154
	oct	157167145144
	oct	040151156040
	oct	164150145040
	oct	103157155155
	oct	165156151143
	oct	141164151157
	oct	156040123145
	oct	143164151157
	oct	156040127150
	oct	145156040156
	oct	145151164150
	oct	145162040157
	oct	160164151157
	oct	156040151163
	oct	040165163145
	oct	144054040164
	oct	150145040103
	oct	104040145156
	oct	164162171040
	oct	155165163164
	oct	040142145040
	oct	146157154154
	oct	157167145144
	oct	040142171040
	oct	157156145040
	oct	157162040155
	oct	157162145040
	oct	060061040162
	oct	145143157162
	oct	144040144145
	oct	163143162151
	oct	160164151157
	oct	156163040105
	oct	170143145163
	oct	163040144141
	oct	164141055156
	oct	141155145163
	oct	040141162145
	oct	040163160145
	oct	143151146151
	oct	145144040146
	oct	157162040164
	oct	150145040143
	oct	165162162145
	oct	156164040103
	oct	104040145156
	oct	164162171040
	oct	101156040165
	oct	156162145143
	oct	157147156151
	oct	172141142154
	oct	145040103104
	oct	040154145166
	oct	145154040151
	oct	156144151143
	oct	141164157162
	oct	040157162040
	oct	163145143164
	oct	151157156040
	oct	150145141144
	oct	145162040151
	oct	163040145156
	oct	143157165156
	oct	164145162145
	oct	144056040111
	oct	156166141154
	oct	151144040103
	oct	104040143154
	oct	141165163145
	oct	040122145144
	oct	165156144141
	oct	156164040103
	oct	104040151156
	oct	160165164040
	oct	123131115102
	oct	117114111103
	oct	040123125102
	oct	121125105125
	oct	105055061040
	oct	143154141165
	oct	163145040122
	oct	145144165156
	oct	144141156164
	oct	040103104040
	oct	151156160165
	oct	164040123131
	oct	115102117114
	oct	111103040123
	oct	125102121125
	oct	105125105055
	oct	062040143154
	oct	141165163145
	oct	040122145144
	oct	165156144141
	oct	156164040103
	oct	104040151156
	oct	160165164040
	oct	123131115102
	oct	117114111103
	oct	040123125102
	oct	121125105125
	oct	105055063040
	oct	143154141165
	oct	163145040122
	oct	145144165156
	oct	144141156164
	oct	040103104040
	oct	151156160165
	oct	164040123131
	oct	115102117114
	oct	111103040121
	oct	125105125105
	oct	040143154141
	oct	165163145040
	oct	122145144165
	oct	156144141156
	oct	164040103104
	oct	040151156160
	oct	165164040115
	oct	105123123101
	oct	107105040104
	oct	101124105040
	oct	143154141165
	oct	163145040122
	oct	145144165156
	oct	144141156164
	oct	040103104040
	oct	151156160165
	oct	164040115105
	oct	123123101107
	oct	105040124111
	oct	115105040143
	oct	154141165163
	oct	145040122145
	oct	144165156144
	oct	141156164040
	oct	103104040151
	oct	156160165164
	oct	040124105130
	oct	124040114105
	oct	116107124110
	oct	040143154141
	oct	165163145040
	oct	122145144165
	oct	156144141156
	oct	164040103104
	oct	040151156160
	oct	165164040105
	oct	116104040113
	oct	105131040143
	oct	154141165163
	oct	145040122145
	oct	144165156144
	oct	141156164040
	oct	103104040151
	oct	156160165164
	oct	040123124101
	oct	124125123040
	oct	113105131040
	oct	143154141165
	oct	163145040122
	oct	145144165156
	oct	144141156164
	oct	040103104040
	oct	151156160165
	oct	164040121125
	oct	105125105040
	oct	104105120124
	oct	110040143154
	oct	141165163145
	oct	040122145144
	oct	165156144141
	oct	156164040103
	oct	104040151156
	oct	160165164040
	oct	123131115102
	oct	117114111103
	oct	040123117125
	oct	122103105040
	oct	143154141165
	oct	163145040125
	oct	156162145143
	oct	157147156151
	oct	172141142154
	oct	145040103104
	oct	040151156160
	oct	165164040141
	oct	164164162151
	oct	142165164145
	oct	040125156162
	oct	145143157147
	oct	156151172141
	oct	142154145040
	oct	103104040157
	oct	165164160165
	oct	164040141164
	oct	164162151142
	oct	165164145040
	oct	124150145040
	oct	155141170151
	oct	156165155040
	oct	157143143165
	oct	162162145156
	oct	143145040156
	oct	165155142145
	oct	162040155165
	oct	163164040142
	oct	145040156165
	oct	155145162151
	oct	143040151156
	oct	164145147145
	oct	162040147162
	oct	145141164145
	oct	162040164150
	oct	141156040060
	oct	040122145144
	oct	165156144141
	oct	156164040103
	oct	104040157165
	oct	164160165164
	oct	040104105123
	oct	124111116101
	oct	124111117116
	oct	040103117125
	oct	116124040143
	oct	154141165163
	oct	145040122145
	oct	144165156144
	oct	141156164040
	oct	103104040157
	oct	165164160165
	oct	164040124105
	oct	130124040114
	oct	105116107124
	oct	110040143154
	oct	141165163145
	oct	040122145144
	oct	165156144141
	oct	156164040103
	oct	104040157165
	oct	164160165164
	oct	040123124101
	oct	124125123040
	oct	113105131040
	oct	143154141165
	oct	163145040122
	oct	145144165156
	oct	144141156164
	oct	040103104040
	oct	157165164160
	oct	165164040104
	oct	105123124111
	oct	116101124111
	oct	117116040124
	oct	101102114105
	oct	040143154141
	oct	165163145040
	oct	122145144165
	oct	156144141156
	oct	164040103104
	oct	040157165164
	oct	160165164040
	oct	105122122117
	oct	122040113105
	oct	131040143154
	oct	141165163145
	oct	040122145144
	oct	165156144141
	oct	156164040103
	oct	104040157165
	oct	164160165164
	oct	040123131115
	oct	102117114111
	oct	103040104105
	oct	123124111116
	oct	101124111117
	oct	116040143154
	oct	141165163145
	oct	040101040146
	oct	141164141154
	oct	040145162162
	oct	157162040145
	oct	170151163164
	oct	163040151156
	oct	040164150145
	oct	040163160145
	oct	143151146151
	oct	143141164151
	oct	157156040157
	oct	146040164150
	oct	151163040103
	oct	104040145156
	oct	164162171073
	oct	040163171156
	oct	164141170040
	oct	141156141154
	oct	171163151163
	oct	040156157164
	oct	040143157155
	oct	160154145164
	oct	145144040103
	oct	104040151156
	oct	160165164040
	oct	162145143157
	oct	162144040154
	oct	145156147164
	oct	150040155165
	oct	163164040142
	oct	145040070067
	oct	040143150141
	oct	162141143164
	oct	145162163040
	oct	101156040145
	oct	162162157162
	oct	040145170151
	oct	163164163040
	oct	151156040164
	oct	150151163040
	oct	103104040162
	oct	145143157162
	oct	144055156141
	oct	155145040103
	oct	104040157165
	oct	164160165164
	oct	040162145143
	oct	157162144040
	oct	154145156147
	oct	164150040155
	oct	165163164040
	oct	142145040147
	oct	162145141164
	oct	145162040164
	oct	150141156040
	oct	062063040143
	oct	150141162141
	oct	143164145162
	oct	163040101040
	oct	146141164141
	oct	154040145162
	oct	162157162040
	oct	145170151163
	oct	164163040151
	oct	156040164150
	oct	145040163160
	oct	145143151146
	oct	151143141164
	oct	151157156040
	oct	157146040164
	oct	150145040127
	oct	157162153151
	oct	156147055123
	oct	164157162141
	oct	147145040123
	oct	145143164151
	oct	157156073040
	oct	163171156164
	oct	141170040141
	oct	156141154171
	oct	163151163040
	oct	156157164040
	oct	143157155160
	oct	154145164145
	oct	144040124157
	oct	157040155141
	oct	156171040143
	oct	150141162141
	oct	143164145162
	oct	163040163160
	oct	145143151146
	oct	151145144040
	oct	151156040160
	oct	151143164165
	oct	162145040055
	oct	040154151155
	oct	151164040151
	oct	163040063060
	oct	040122145144
	oct	165156144141
	oct	156164040114
	oct	151156153141
	oct	147145040123
	oct	145143164151
	oct	157156040163
	oct	160145143151
	oct	146151145144
	oct	040055040157
	oct	156154171040
	oct	157156145040
	oct	141154154157
	oct	167145144040
	oct	160145162040
	oct	160162157147
	oct	162141155040
	oct	111154154145
	oct	147141154040
	oct	143150141162
	oct	141143164145
	oct	162040163160
	oct	145143151146
	oct	151145144040
	oct	151156040164
	oct	150145040160
	oct	151143164165
	oct	162145040143
	oct	150141162141
	oct	143164145162
	oct	055163164162
	oct	151156147040
	oct	122145144165
	oct	156144141156
	oct	164040103157
	oct	156163164141
	oct	156164040123
	oct	145143164151
	oct	157156040163
	oct	160145143151
	oct	146151145144
	oct	040055040157
	oct	156154171040
	oct	157156145040
	oct	141154154157
	oct	167145144040
	oct	160145162040
	oct	160162157147
	oct	162141155040
	oct	111154154145
	oct	147141154040
	oct	143157155142
	oct	151156141164
	oct	151157156040
	oct	157146040143
	oct	150141162141
	oct	143164145162
	oct	163040163160
	oct	145143151146
	oct	151145144040
	oct	151156040164
	oct	150145040160
	oct	151143164165
	oct	162145040143
	oct	150141162141
	oct	143164145162
	oct	055163164162
	oct	151156147040
	oct	124150145040
	oct	125123101107
	oct	105040163160
	oct	145143151146
	oct	151145144040
	oct	151163040165
	oct	156162145143
	oct	157147156151
	oct	172141142154
	oct	145040124150
	oct	145040154145
	oct	156147164150
	oct	040157146040
	oct	164150145040
	oct	145144151164
	oct	151156147040
	oct	143150141162
	oct	141143164145
	oct	162055163164
	oct	162151156147
	oct	040155165163
	oct	164040156157
	oct	164040145170
	oct	143145145144
	oct	040062065066
	oct	040143150141
	oct	162141143164
	oct	145162163040
	oct	116157040162
	oct	145143145151
	oct	166151156147
	oct	040143150141
	oct	162141143164
	oct	145162163040
	oct	163160145143
	oct	151146151145
	oct	144040151156
	oct	040164150145
	oct	040160151143
	oct	164165162145
	oct	040143150141
	oct	162141143164
	oct	145162055163
	oct	164162151156
	oct	147040101040
	oct	146141164141
	oct	154040163171
	oct	156164141170
	oct	040145162162
	oct	157162040145
	oct	170151163163
	oct	164163040151
	oct	156040164150
	oct	145040163160
	oct	145143151146
	oct	151143141164
	oct	151157156040
	oct	157146040164
	oct	150145040122
	oct	105116101115
	oct	105123040145
	oct	156164162171
	oct	073040163171
	oct	156164141170
	oct	040141156141
	oct	154171163151
	oct	163040156157
	oct	164040143157
	oct	155160154145
	oct	164145144040
	oct	122105103117
	oct	122104111116
	oct	107040115117
	oct	104105040143
	oct	154141165163
	oct	145040151163
	oct	040162145144
	oct	165156144141
	oct	156164040157
	oct	162040151154
	oct	154145147141
	oct	154040102114
	oct	117103113040
	oct	103117116124
	oct	101111116123
	oct	040143154141
	oct	165163145040
	oct	151163040162
	oct	145144165156
	oct	144141156164
	oct	040157162040
	oct	151154154145
	oct	147141154040
	oct	122105103117
	oct	122104040103
	oct	117116124101
	oct	111116123040
	oct	143154141165
	oct	163145040151
	oct	163040162145
	oct	144165156144
	oct	141156164040
	oct	114101102105
	oct	114040122105
	oct	103117122104
	oct	040143154141
	oct	165163145040
	oct	151163040162
	oct	145144165156
	oct	144141156164
	oct	040157162040
	oct	151154154145
	oct	147141154040
	oct	124150145040
	oct	126101114125
	oct	105040117106
	oct	040143154141
	oct	165163145040
	oct	151163040151
	oct	154154145147
	oct	141154040104
	oct	101124101040
	oct	122105103117
	oct	122104040143
	oct	154141165163
	oct	145040151163
	oct	040162145144
	oct	165156144141
	oct	156164040122
	oct	105120117122
	oct	124040111123
	oct	040143154141
	oct	165163145040
	oct	151163040162
	oct	145144165156
	oct	144141156164
	oct	040157162040
	oct	151154154145
	oct	147141154040
	oct	114111116101
	oct	107105040111
	oct	123040143154
	oct	141165163145
	oct	040151163040
	oct	162145144165
	oct	156144141156
	oct	164040157162
	oct	040151154154
	oct	145147141154
	oct	040122145144
	oct	165156144141
	oct	156164040104
	oct	105120105116
	oct	104111116107
	oct	040117116040
	oct	143154141165
	oct	163145040163
	oct	160145143151
	oct	146151145144
	oct	040055040157
	oct	156154171040
	oct	157156145040
	oct	141154154157
	oct	167145144040
	oct	160145162040
	oct	144141164141
	oct	040151164145
	oct	155040124150
	oct	145040163160
	oct	145143151146
	oct	151143141164
	oct	151157156040
	oct	146157162040
	oct	114101102105
	oct	114040122105
	oct	103117122104
	oct	040151163040
	oct	165156162145
	oct	143157147156
	oct	151172141142
	oct	154145040124
	oct	150145040143
	oct	165162162145
	oct	156164040163
	oct	145143164151
	oct	157156040151
	oct	163040141163
	oct	163165155145
	oct	144040164157
	oct	040142145040
	oct	164150145040
	oct	106151154145
	oct	040123145143
	oct	164151157156
	oct	040124150145
	oct	040143165162
	oct	162145156164
	oct	040163145143
	oct	164151157156
	oct	040151163040
	oct	141163163165
	oct	155145144040
	oct	164157040142
	oct	145040164150
	oct	145040127157
	oct	162153151156
	oct	147055123164
	oct	157162141147
	oct	145040123145
	oct	143164151157
	oct	156040123171
	oct	156164141170
	oct	040145162162
	oct	157162040145
	oct	156143157165
	oct	156164145162
	oct	145144073040
	oct	163171156164
	oct	141170040143
	oct	150145143153
	oct	151156147040
	oct	144151163143
	oct	157156164151
	oct	156165145144
	oct	040101040144
	oct	165155155171
	oct	040162145143
	oct	157162144040
	oct	156141155145
	oct	040151163040
	oct	163165160160
	oct	154151145144
	oct	073040163171
	oct	156164141170
	oct	040143150145
	oct	143153151156
	oct	147040162145
	oct	163165155145
	oct	144040123171
	oct	156164141170
	oct	040143150145
	oct	143153151156
	oct	147040162145
	oct	163165155145
	oct	144040122145
	oct	143157162144
	oct	040144145163
	oct	143162151160
	oct	164151157156
	oct	040151163040
	oct	155151163163
	oct	151156147073
	oct	040163171156
	oct	164141170040
	oct	143150145143
	oct	153151156147
	oct	040162145163
	oct	165155145144
	oct	040124150145
	oct	040126101114
	oct	125105040143
	oct	154141165163
	oct	145040146157
	oct	162040164150
	oct	151163040143
	oct	157156144151
	oct	164151157156
	oct	055156141155
	oct	145040151163
	oct	040155151163
	oct	163151156147
	oct	040101040146
	oct	141164141154
	oct	040145162162
	oct	157162040145
	oct	170151163164
	oct	163040151156
	oct	040164150145
	oct	040163160145
	oct	143151146151
	oct	143141164151
	oct	157156040157
	oct	146040164150
	oct	145040144141
	oct	164141040144
	oct	145163143162
	oct	151160164151
	oct	157156040143
	oct	154141165163
	oct	145163040157
	oct	146040164150
	oct	151163040145
	oct	156164162171
	oct	040122145163
	oct	145162166145
	oct	144040167157
	oct	162144040113
	oct	105131040151
	oct	163040155151
	oct	163163151156
	oct	147040124150
	oct	145040154151
	oct	164145162141
	oct	154040146157
	oct	154154157167
	oct	151156147040
	oct	164150145040
	oct	124110122125
	oct	040157160164
	oct	151157156040
	oct	151163040155
	oct	151163163151
	oct	156147040124
	oct	150151163040
	oct	122105116101
	oct	115105123040
	oct	143154141165
	oct	163145040151
	oct	163040151156
	oct	166141154151
	oct	144040141163
	oct	040151164040
	oct	144157145163
	oct	040156157164
	oct	040151155155
	oct	145144151141
	oct	164145154171
	oct	040146157154
	oct	154157167040
	oct	164150145040
	oct	154141163164
	oct	040144141164
	oct	141040145156
	oct	164162171040
	oct	157146040141
	oct	040147162157
	oct	165160040151
	oct	164145155040
	oct	101122105101
	oct	040156141155
	oct	145040151163
	oct	040156157164
	oct	040144145146
	oct	151156145144
	oct	040123104040
	oct	156141155145
	oct	040151163040
	oct	156157164040
	oct	144145146151
	oct	156145144040
	oct	124150145040
	oct	162145143157
	oct	162144040144
	oct	145163143162
	oct	151160164151
	oct	157156040146
	oct	157162040164
	oct	150145040141
	oct	142157166145
	oct	040146151154
	oct	145040144145
	oct	163143162151
	oct	160164151157
	oct	156040145156
	oct	164162171040
	oct	151163040155
	oct	151163163151
	oct	156147040106
	oct	151154145055
	oct	156141155145
	oct	040151163040
	oct	155151163163
	oct	151156147040
	oct	157162040151
	oct	156040145162
	oct	162157162040
	oct	124150151163
	oct	040125123101
	oct	107105040143
	oct	154141165163
	oct	145040151163
	oct	040151156166
	oct	141154151144
	oct	040141163040
	oct	164150145040
	oct	143157156164
	oct	141151156151
	oct	156147040147
	oct	162157165160
	oct	040151164145
	oct	155040151163
	oct	040141163163
	oct	157143151141
	oct	164145144040
	oct	167151164150
	oct	040141040143
	oct	157156144151
	oct	164151157156
	oct	055156141155
	oct	145040125156
	oct	162145143157
	oct	147156151172
	oct	141142154145
	oct	040141164164
	oct	162151142165
	oct	164145040151
	oct	156040103104
	oct	040145156164
	oct	162171040105
	oct	170160145143
	oct	164145144040
	oct	167157162144
	oct	040151163040
	oct	124111115105
	oct	123040105170
	oct	160145143164
	oct	145144040167
	oct	157162144040
	oct	151163040113
	oct	105131040105
	oct	170160145143
	oct	164145144040
	oct	167157162144
	oct	040151163040
	oct	114105116107
	oct	124110040105
	oct	170160145143
	oct	164145144040
	oct	167157162144
	oct	040151163040
	oct	124117120040
	oct	157162040102
	oct	117124124117
	oct	115040122145
	oct	144165156144
	oct	141156164040
	oct	102117124124
	oct	117115040160
	oct	150162141163
	oct	145040163160
	oct	145143151146
	oct	151145144040
	oct	146157162040
	oct	114111116101
	oct	107105040143
	oct	154141165163
	oct	145040122145
	oct	144165156144
	oct	141156164040
	oct	106117117124
	oct	111116107040
	oct	160150162141
	oct	163145040163
	oct	160145143151
	oct	146151145144
	oct	040146157162
	oct	040114111116
	oct	101107105040
	oct	143154141165
	oct	163145040105
	oct	170160145143
	oct	164145144040
	oct	167157162144
	oct	040151163040
	oct	106117117124
	oct	111116107040
	oct	124150145040
	oct	106117117124
	oct	111116107040
	oct	151156164145
	oct	147145162040
	oct	155165163164
	oct	040156157164
	oct	040142145040
	oct	147162145141
	oct	164145162040
	oct	164150141156
	oct	040164150145
	oct	040102117104
	oct	131040151156
	oct	164145147145
	oct	162040151156
	oct	040114111116
	oct	101107105040
	oct	143154141165
	oct	163145040124
	oct	150145040163
	oct	165142152145
	oct	143164040157
	oct	146040162145
	oct	144145146151
	oct	156151164151
	oct	157156040155
	oct	165163164040
	oct	156157164040
	oct	142145040106
	oct	111114114105
	oct	122073040151
	oct	164040151163
	oct	040151147156
	oct	157162145144
	oct	040111156040
	oct	160162145143
	oct	145144151156
	oct	147040126101
	oct	114125105040
	oct	143154141165
	oct	163145054040
	oct	163145143157
	oct	156144040166
	oct	141154165145
	oct	040151163040
	oct	156157164040
	oct	147162145141
	oct	164145162040
	oct	164150141156
	oct	040146151162
	oct	163164040126
	oct	141154165145
	oct	040155141171
	oct	040142145040
	oct	154157156147
	oct	145162040164
	oct	150141156040
	oct	154145156147
	oct	164150040157
	oct	146040144141
	oct	164141040151
	oct	164145155040
	oct	111156040160
	oct	162145143145
	oct	144151156147
	oct	040126101114
	oct	125105040143
	oct	154141165163
	oct	145054040163
	oct	151147156145
	oct	144040151164
	oct	145155040150
	oct	141163040165
	oct	156163151147
	oct	156145144040
	oct	166141154165
	oct	145040111156
	oct	040160162145
	oct	143145144151
	oct	156147040126
	oct	101114125105
	oct	040143154141
	oct	165163145054
	oct	040156165155
	oct	145162151143
	oct	040144141164
	oct	141040151164
	oct	145155040150
	oct	141163040156
	oct	157156156165
	oct	155145162151
	oct	143040166141
	oct	154165145040
	oct	111156040160
	oct	162145143145
	oct	144151156147
	oct	040126101114
	oct	125105040143
	oct	154141165163
	oct	145054040156
	oct	157156156165
	oct	155145162151
	oct	143040144141
	oct	164141040151
	oct	164145155040
	oct	150141163040
	oct	156165155145
	oct	162151143040
	oct	166141154165
	oct	145040111156
	oct	166141154151
	oct	144040143157
	oct	144145055163
	oct	145164040163
	oct	160145143151
	oct	146151145144
	oct	040127150145
	oct	156040106104
	oct	040150141163
	oct	040112111123
	oct	040143157144
	oct	145055163145
	oct	164054040163
	oct	151147156145
	oct	144040156165
	oct	155145162151
	oct	143040144141
	oct	164141040155
	oct	165163164040
	oct	150141166145
	oct	040123111107
	oct	116040111123
	oct	040123105120
	oct	101122101124
	oct	105040143154
	oct	141165163145
	oct	040122145143
	oct	157162144040
	oct	143157156164
	oct	141151156163
	oct	056056056144
	oct	145160145156
	oct	144151156147
	oct	040157156040
	oct	163160145143
	oct	151146151145
	oct	144040151156
	oct	040106104054
	oct	040142165164
	oct	040146151154
	oct	145055143157
	oct	156164162157
	oct	154040145156
	oct	164162171040
	oct	163160145143
	oct	151146151145
	oct	163040106114
	oct	122040124150
	oct	145040123111
	oct	107116040143
	oct	154141165163
	oct	145040155165
	oct	163164040142
	oct	145040141163
	oct	163157143151
	oct	141164145144
	oct	040167151164
	oct	150040141164
	oct	040154145141
	oct	163164040157
	oct	156145040156
	oct	165155145162
	oct	151143040151
	oct	164145155040
	oct	167151164150
	oct	040160151143
	oct	164165162145
	oct	040143157156
	oct	164141151156
	oct	151156147040
	oct	123040122145
	oct	143157162144
	oct	040104145163
	oct	143162151160
	oct	164151157156
	oct	040141163163
	oct	165155145144
	oct	040164157040
	oct	142145040144
	oct	141164141040
	oct	162145143157
	oct	162144040146
	oct	157162040160
	oct	162145143145
	oct	144151156147
	oct	040106104040
	oct	101040154141
	oct	142145154040
	oct	162145143157
	oct	162144040163
	oct	160145143151
	oct	146151145144
	oct	040151156040
	oct	164150145040
	oct	106151154145
	oct	040123145143
	oct	164151157156
	oct	040167141163
	oct	040156157164
	oct	040144145146
	oct	151156145144
	oct	040142171040
	oct	141040122145
	oct	143157162144
	oct	040104145163
	oct	143162151160
	oct	164151157156
	oct	040145156164
	oct	162171040101
	oct	040144141164
	oct	141040162145
	oct	143157162144
	oct	040163160145
	oct	143151146151
	oct	145144040151
	oct	156040141040
	oct	144141164141
	oct	040162145143
	oct	157162144040
	oct	143154141165
	oct	163145040167
	oct	141163040156
	oct	157164040163
	oct	165142163145
	oct	161165145156
	oct	164154171040
	oct	144145146151
	oct	156145144040
	oct	142171040141
	oct	040162145143
	oct	157162144040
	oct	144145163143
	oct	162151160164
	oct	151157156040
	oct	145156164162
	oct	171040124150
	oct	145040154145
	oct	156147164150
	oct	040157146040
	oct	164150151163
	oct	040141154160
	oct	150141156165
	oct	155145162151
	oct	143040154151
	oct	164145162141
	oct	154040155165
	oct	163164040156
	oct	157164040145
	oct	170143145145
	oct	144040061067
	oct	040143150141
	oct	162141143164
	oct	145162163040
	oct	110151145162
	oct	141162143150
	oct	171040164141
	oct	142154145040
	oct	157166145162
	oct	146154157167
	oct	040111156144
	oct	145170055156
	oct	141155145040
	oct	164141142154
	oct	145040157166
	oct	145162146154
	oct	157167040105
	oct	170160145143
	oct	164145144040
	oct	167157162144
	oct	040151163040
	oct	104105120105
	oct	116104111116
	oct	107040124150
	oct	145040103117
	oct	104105055123
	oct	105124040143
	oct	154141165163
	oct	145040157156
	oct	040106104040
	oct	163150157165
	oct	154144040142
	oct	145040141143
	oct	143157155160
	oct	141156151145
	oct	144040142171
	oct	040123111107
	oct	116040111123
	oct	040123105120
	oct	101122101124
	oct	105040146157
	oct	162040163151
	oct	147156145144
	oct	040156165155
	oct	145162151143
	oct	040144141164
	oct	141040127150
	oct	145156040106
	oct	104040150141
	oct	163040112111
	oct	123040143157
	oct	144145055163
	oct	145164054040
	oct	144141164141
	oct	040155165163
	oct	164040142145
	oct	040125123101
	oct	107105040111
	oct	123040104111
	oct	123120114101
	oct	131040124150
	oct	145040103117
	oct	104105055123
	oct	105124040143
	oct	154141165163
	oct	145040157156
	oct	040106104040
	oct	163150157165
	oct	154144040142
	oct	145040141143
	oct	143157155160
	oct	141156151145
	oct	144040142171
	oct	040125123101
	oct	107105040111
	oct	123040104111
	oct	123120114101
	oct	131040146157
	oct	162040141154
	oct	154040144141
	oct	164141040125
	oct	123101107105
	oct	040111123040
	oct	103117115120
	oct	040157162040
	oct	103117115120
	oct	055063040162
	oct	145161165151
	oct	162145163040
	oct	163151147156
	oct	145144040120
	oct	111103124125
	oct	122105040104
	oct	145163164151
	oct	156141164151
	oct	157156040164
	oct	141142154145
	oct	040155165163
	oct	164040157143
	oct	143165162040
	oct	157156154171
	oct	040061040164
	oct	151155145040
	oct	151156040164
	oct	150151163040
	oct	151155160154
	oct	145155145156
	oct	164141164151
	oct	157156040103
	oct	104040154145
	oct	156147164150
	oct	040145162162
	oct	157162040117
	oct	142163157154
	oct	145164145040
	oct	165163141147
	oct	145040157146
	oct	040151155160
	oct	154145155145
	oct	156164157162
	oct	055156141155
	oct	145040151156
	oct	040103117104
	oct	105055123105
	oct	124040143154
	oct	141165163145
	oct	073040151164
	oct	040163150157
	oct	165154144040
	oct	142145040144
	oct	145146151156
	oct	145144040141
	oct	163040141040
	oct	155156145155
	oct	157156151143
	oct	055156141155
	oct	145040124150
	oct	145040146151
	oct	147165162141
	oct	164151166145
	oct	040143157156
	oct	163164141156
	oct	164040101114
	oct	114040155165
	oct	163164040156
	oct	157164040142
	oct	145040165163
	oct	145144040167
	oct	151164150040
	oct	141040156165
	oct	155145162151
	oct	143040154151
	oct	164145162141
	oct	154040124150
	oct	151163040162
	oct	145154145141
	oct	163145040162
	oct	145161165151
	oct	162145163040
	oct	163145160141
	oct	162141164145
	oct	040163151147
	oct	156040146157
	oct	162040163151
	oct	147156145144
	oct	040156165155
	oct	145162151143
	oct	040151164145
	oct	155163040124
	oct	150151163040
	oct	146145141164
	oct	165162145040
	oct	151163040156
	oct	157164040163
	oct	165160160157
	oct	162164145144
	oct	040151156040
	oct	164150151163
	oct	040162145154
	oct	145141163145
	oct	073040151164
	oct	040151163040
	oct	151147156157
	oct	162145144040
	oct	105122122117
	oct	122062060070
	oct	054040143157
	oct	155160151154
	oct	145162040142
	oct	165147040116
	oct	157164040163
	oct	165160160157
	oct	162164145144
	oct	040151156040
	oct	164150151163
	oct	040162145154
	oct	145141163145
	oct	040114141142
	oct	145154040162
	oct	145143157162
	oct	144040146157
	oct	162155141164
	oct	040156157164
	oct	040163165160
	oct	160157162164
	oct	145144040142
	oct	171040164150
	oct	151163040162
	oct	145154145141
	oct	163145040111
	oct	156040164150
	oct	145040160162
	oct	145143145144
	oct	151156147040
	oct	126101114125
	oct	105040143154
	oct	141165163145
	oct	054040165156
	oct	163151147156
	oct	145144040151
	oct	164145155040
	oct	150141163040
	oct	163151147156
	oct	145144040166
	oct	141154165145
	oct	040124150151
	oct	163040151164
	oct	145155040155
	oct	165163164040
	oct	142145040141
	oct	156040165156
	oct	163151147156
	oct	145144040151
	oct	156164145147
	oct	145162040143
	oct	157156164141
	oct	151156151156
	oct	147040164150
	oct	162145145040
	oct	157162040146
	oct	145167145162
	oct	040144151147
	oct	151164163040
	oct	124150145040
	oct	167157162144
	oct	040132105122
	oct	117040151163
	oct	040162145161
	oct	165151162145
	oct	144040150145
	oct	162145040124
	oct	150151163040
	oct	126101114125
	oct	105040143154
	oct	141165163145
	oct	040151163040
	oct	151156166141
	oct	154151144073
	oct	040143154141
	oct	165163145040
	oct	151147156157
	oct	162145144040
	oct	125163145040
	oct	157146040145
	oct	170164145156
	oct	144145144040
	oct	163151155160
	oct	154145040151
	oct	156163145162
	oct	164151157156
	oct	040143150141
	oct	162141143164
	oct	145162163040
	oct	151156040164
	oct	150151163040
	oct	120111103124
	oct	125122105040
	oct	151163040141
	oct	156040145170
	oct	164145156163
	oct	151157156040
	oct	164157040101
	oct	116123040103
	oct	117102117114
	oct	055067064040
	oct	124150151163
	oct	040154145166
	oct	145154040156
	oct	165155142145
	oct	162040151163
	oct	040151154154
	oct	145147141154
	oct	054040151164
	oct	040151163040
	oct	164162145141
	oct	164145144040
	oct	141163040141
	oct	156040165156
	oct	163151147156
	oct	145144040160
	oct	157163151164
	oct	151166145040
	oct	151156164145
	oct	147145162040
	oct	125163145040
	oct	157146040060
	oct	040141163040
	oct	141040154157
	oct	167145162040
	oct	154151155151
	oct	164040151156
	oct	040141040166
	oct	141162151141
	oct	142154145040
	oct	157143143165
	oct	162162145156
	oct	143145040151
	oct	164145155040
	oct	151163040141
	oct	156040145170
	oct	164145156163
	oct	151157156040
	oct	164157040101
	oct	116123040103
	oct	117102117114
	oct	055067064040
	oct	124150151163
	oct	040156165155
	oct	145162151143
	oct	040154151164
	oct	145162141154
	oct	040143157156
	oct	164141151156
	oct	163040155157
	oct	162145040164
	oct	150141156040
	oct	061070040144
	oct	151147151164
	oct	163040124150
	oct	151163040167
	oct	157162144040
	oct	163150157165
	oct	154144040142
	oct	145147151156
	oct	040151156040
	oct	141162145141
	oct	040101040124
	oct	150145040157
	oct	142152145143
	oct	164040157146
	oct	040162145144
	oct	145146151156
	oct	151164151157
	oct	156040150141
	oct	163040156157
	oct	164040142145
	oct	145156040160
	oct	162145166151
	oct	157165163154
	oct	171040144145
	oct	146151156145
	oct	144040101040
	oct	143141164141
	oct	154157147165
	oct	145040156141
	oct	155145040150
	oct	141163040142
	oct	145145156040
	oct	160162145166
	oct	151157165163
	oct	154171040163
	oct	160145143151
	oct	146151145144
	oct	040124150145
	oct	040154145156
	oct	147164150040
	oct	157146040164
	oct	150145040154
	oct	151164145162
	oct	141154040145
	oct	170143145145
	oct	144163040061
	oct	066070040143
	oct	150141162141
	oct	143164145162
	oct	163054040151
	oct	164040151163
	oct	040142145151
	oct	156147040164
	oct	162165156143
	oct	141164145144
	oct	040101156040
	oct	151154154145
	oct	147141154040
	oct	166141154165
	oct	145040150141
	oct	163040142145
	oct	145156040163
	oct	160145143151
	oct	146151145144
	oct	040146157162
	oct	040141040154
	oct	141142145154
	oct	040146151145
	oct	154144040103
	oct	154141165163
	oct	145040156157
	oct	164040141154
	oct	154157167145
	oct	144040167151
	oct	164150040164
	oct	150145040146
	oct	151154145040
	oct	157162147141
	oct	156151172141
	oct	164151157156
	oct	040101040067
	oct	067040154145
	oct	166145154040
	oct	145156164162
	oct	171040155141
	oct	171040156157
	oct	164040142145
	oct	040141040147
	oct	162157165160
	oct	040151164145
	oct	155040101040
	oct	162145143157
	oct	162144040144
	oct	145163143162
	oct	151160164151
	oct	157156040143
	oct	154141165163
	oct	145040167141
	oct	163040145170
	oct	160145143164
	oct	145144040124
	oct	150145040143
	oct	154141165163
	oct	145040150141
	oct	163040160162
	oct	145166151157
	oct	165163154171
	oct	040141160160
	oct	145141162145
	oct	144054040151
	oct	164040151163
	oct	040142145151
	oct	156147040151
	oct	147156157162
	oct	145144040124
	oct	150151163040
	oct	143154141165
	oct	163145040151
	oct	163040151154
	oct	154145147141
	oct	154040151156
	oct	040141040106
	oct	157162155141
	oct	164040061040
	oct	122145160157
	oct	162164040107
	oct	162157165160
	oct	040104145163
	oct	143162151160
	oct	164151157156
	oct	040105156164
	oct	162171040124
	oct	150151163040
	oct	143154141165
	oct	163145040151
	oct	163040151154
	oct	154145147141
	oct	154040151156
	oct	040141040106
	oct	157162155141
	oct	164040062040
	oct	122145160157
	oct	162164040107
	oct	162157165160
	oct	040104145163
	oct	143162151160
	oct	164151157156
	oct	040105156164
	oct	162171040124
	oct	150151163040
	oct	143154141165
	oct	163145040151
	oct	163040151154
	oct	154145147141
	oct	154040151156
	oct	040141040106
	oct	157162155141
	oct	164040063040
	oct	122145160157
	oct	162164040107
	oct	162157165160
	oct	040104145163
	oct	143162151160
	oct	164151157156
	oct	040105156164
	oct	162171040124
	oct	150151163040
	oct	143154141165
	oct	163145040155
	oct	141171040157
	oct	156154171040
	oct	157143143165
	oct	162040151156
	oct	040141040106
	oct	157162155141
	oct	164040061040
	oct	122145160157
	oct	162164040107
	oct	162157165160
	oct	040104145163
	oct	143162151160
	oct	164151157156
	oct	040105156164
	oct	162171040124
	oct	150151163040
	oct	143154141165
	oct	163145040155
	oct	141171040157
	oct	156154171040
	oct	157143143165
	oct	162040151156
	oct	040141040106
	oct	157162155141
	oct	164040063040
	oct	122145160157
	oct	162164040107
	oct	162157165160
	oct	040104145163
	oct	143162151160
	oct	164151157156
	oct	040105156164
	oct	162171040124
	oct	150151163040
	oct	162145160157
	oct	162164040147
	oct	162157165160
	oct	040164171160
	oct	145040155141
	oct	171040157156
	oct	154171040142
	oct	145040144145
	oct	146151156145
	oct	144040157156
	oct	143145040101
	oct	040106157162
	oct	155141164040
	oct	061040122145
	oct	160157162164
	oct	040107162157
	oct	165160040104
	oct	145163143162
	oct	151160164151
	oct	157156040105
	oct	156164162171
	oct	040155165163
	oct	164040143157
	oct	156164141151
	oct	156040141040
	oct	124131120105
	oct	040143154141
	oct	165163145054
	oct	040124131120
	oct	105040104105
	oct	040151163040
	oct	141163163165
	oct	155145144040
	oct	103154141165
	oct	163145163040
	oct	156157164040
	oct	160145162155
	oct	151164164145
	oct	144040151156
	oct	040141040106
	oct	157162155141
	oct	164040061040
	oct	122145160157
	oct	162164040107
	oct	162157165160
	oct	040104145163
	oct	143162151160
	oct	164151157156
	oct	040105156164
	oct	162171040141
	oct	162145040142
	oct	145151156147
	oct	040151147156
	oct	157162145144
	oct	040124150145
	oct	040154145166
	oct	145154040156
	oct	165155142145
	oct	162040151156
	oct	040141040106
	oct	157162155141
	oct	164040061040
	oct	122145160157
	oct	162164040107
	oct	162157165160
	oct	040104145163
	oct	143162151160
	oct	164151157156
	oct	040105156164
	oct	162171040155
	oct	165163164040
	oct	142145040060
	oct	061040103154
	oct	141165163145
	oct	163040156157
	oct	164040160145
	oct	162155151164
	oct	164145144040
	oct	151156040141
	oct	040106157162
	oct	155141164040
	oct	062040122145
	oct	160157162164
	oct	040107162157
	oct	165160040104
	oct	145163143162
	oct	151160164151
	oct	157156040105
	oct	156164162171
	oct	040141162145
	oct	040142145151
	oct	156147040151
	oct	147156157162
	oct	145144040103
	oct	154141165163
	oct	145163040156
	oct	157164040160
	oct	145162155151
	oct	164164145144
	oct	040151156040
	oct	141040106157
	oct	162155141164
	oct	040063040122
	oct	145160157162
	oct	164040107162
	oct	157165160040
	oct	104145163143
	oct	162151160164
	oct	151157156040
	oct	105156164162
	oct	171040141162
	oct	145040142145
	oct	151156147040
	oct	151147156157
	oct	162145144040
	oct	127151164150
	oct	151156040141
	oct	040147151166
	oct	145156040122
	oct	145160157162
	oct	164040107162
	oct	157165160040
	oct	104145163143
	oct	162151160164
	oct	151157156040
	oct	105156164162
	oct	171040163165
	oct	143143145163
	oct	163151166145
	oct	040141142163
	oct	157154165164
	oct	145040114111
	oct	116105040116
	oct	125115102105
	oct	122040143154
	oct	141165163145
	oct	163040155165
	oct	163164040163
	oct	160145143151
	oct	146171040151
	oct	156164145147
	oct	145162163040
	oct	164150141164
	oct	040141162145
	oct	040151156040
	oct	141163143145
	oct	156144151156
	oct	147040157162
	oct	144145162040
	oct	176101040106
	oct	157162155141
	oct	164040063040
	oct	122145160157
	oct	162164040107
	oct	162157165160
	oct	040104145163
	oct	143162151160
	oct	164151157156
	oct	040105156164
	oct	162171040155
	oct	165163164040
	oct	143157156164
	oct	141151156040
	oct	141040120111
	oct	103124125122
	oct	105040143154
	oct	141165163145
	oct	054040120111
	oct	103040130040
	oct	151163040141
	oct	163163165155
	oct	145144040114
	oct	145166145154
	oct	040156165155
	oct	142145162040
	oct	060061040151
	oct	163040151154
	oct	154145147141
	oct	154040151156
	oct	040141040106
	oct	157162155141
	oct	164040063040
	oct	122145160157
	oct	162164040107
	oct	162157165160
	oct	040104145163
	oct	143162151160
	oct	164151157156
	oct	040105156164
	oct	162171040101
	oct	040106157162
	oct	155141164040
	oct	063040122145
	oct	160157162164
	oct	040107162157
	oct	165160040104
	oct	145163143162
	oct	151160164151
	oct	157156040105
	oct	156164162171
	oct	040155165163
	oct	164040143157
	oct	156164141151
	oct	156040141040
	oct	123117125122
	oct	103105057123
	oct	125115057126
	oct	101114125105
	oct	040143154141
	oct	165163145054
	oct	040126101114
	oct	125105040123
	oct	120101103105
	oct	123040151163
	oct	040141163163
	oct	165155145144
	oct	040101040106
	oct	157162155141
	oct	164040063040
	oct	122145160157
	oct	162164040107
	oct	162157165160
	oct	040104145163
	oct	143162151160
	oct	164151157156
	oct	040105156164
	oct	162171040155
	oct	165163164040
	oct	142145040160
	oct	162145143145
	oct	144145144040
	oct	142171040141
	oct	156040145156
	oct	164162171040
	oct	167150151143
	oct	150040143157
	oct	156164141151
	oct	156163040141
	oct	040114111116
	oct	105040143154
	oct	141165163145
	oct	054040114111
	oct	116105040120
	oct	114125123040
	oct	061040151163
	oct	040141163163
	oct	165155145144
	oct	040176104141
	oct	164141040163
	oct	165142157162
	oct	144151156141
	oct	164145040164
	oct	157040141040
	oct	120122105123
	oct	105116124040
	oct	127110105116
	oct	040143154141
	oct	165163145040
	oct	155165163164
	oct	040142145040
	oct	141040163145
	oct	161165145156
	oct	143145040157
	oct	146040154151
	oct	156145163040
	oct	157162040141
	oct	040163145161
	oct	165145156143
	oct	145040157146
	oct	040146151145
	oct	154144163040
	oct	127151164150
	oct	151156040141
	oct	040122145160
	oct	157162164040
	oct	107162157165
	oct	160040104145
	oct	163143162151
	oct	160164151157
	oct	156040105156
	oct	164162171040
	oct	141154154040
	oct	141142163157
	oct	154165164145
	oct	040114111116
	oct	105040156165
	oct	155142145162
	oct	163040155165
	oct	163164040160
	oct	162145143145
	oct	144145040141
	oct	154154040162
	oct	145154141164
	oct	151166145040
	oct	114111116105
	oct	040156165155
	oct	142145162163
	oct	040127151164
	oct	150151156040
	oct	141156040122
	oct	145160157162
	oct	164040107162
	oct	157165160040
	oct	104145163143
	oct	162151160164
	oct	151157156040
	oct	105156164162
	oct	171040141040
	oct	116105130124
	oct	040120101107
	oct	105040160150
	oct	162141163145
	oct	040155141171
	oct	040141160160
	oct	145141162040
	oct	157156154171
	oct	040157156143
	oct	145040141156
	oct	144054040151
	oct	146040160162
	oct	145163145156
	oct	164040155165
	oct	163164040142
	oct	145040151156
	oct	040164150145
	oct	040146151162
	oct	163164040154
	oct	151156145040
	oct	156165155142
	oct	145162040143
	oct	154141165163
	oct	145040151156
	oct	040164150145
	oct	040122145160
	oct	157162164040
	oct	107162157165
	oct	160040104145
	oct	163143162151
	oct	160164151157
	oct	156040105156
	oct	164162171040
	oct	176050062062
	oct	054062051011
	oct	101156040145
	oct	156164162171
	oct	040167150151
	oct	143150040143
	oct	157156164141
	oct	151156163040
	oct	141040114111
	oct	116105040156
	oct	165155142145
	oct	162040143154
	oct	141165163145
	oct	040155165163
	oct	164040156157
	oct	164040143157
	oct	156164141151
	oct	156040141040
	oct	163165142157
	oct	162144151156
	oct	141164145040
	oct	145156164162
	oct	171040164150
	oct	141164040141
	oct	154163157040
	oct	143157156164
	oct	141151156163
	oct	040141040114
	oct	111116105040
	oct	156165155142
	oct	145162040143
	oct	154141165163
	oct	145040176101
	oct	156040145156
	oct	164162171040
	oct	167150151143
	oct	150040143157
	oct	156164141151
	oct	156163040141
	oct	040114111116
	oct	105040156165
	oct	155142145162
	oct	040143154141
	oct	165163145040
	oct	155165163164
	oct	040156157164
	oct	040143157156
	oct	164141151156
	oct	040141040163
	oct	165142157162
	oct	144151156141
	oct	164145040145
	oct	156164162171
	oct	040164150141
	oct	164040141154
	oct	163157040143
	oct	157156164141
	oct	151156163040
	oct	141040114111
	oct	116105040156
	oct	165155142145
	oct	162040143154
	oct	141165163145
	oct	040176105166
	oct	145162171040
	oct	145156164162
	oct	171040164150
	oct	141164040144
	oct	145146151156
	oct	145163040141
	oct	040160162151
	oct	156164141142
	oct	154145040151
	oct	164145155040
	oct	155165163164
	oct	040143157156
	oct	164141151156
	oct	040141040114
	oct	111116105040
	oct	156165155142
	oct	145162040143
	oct	154141165163
	oct	145040157162
	oct	040142145040
	oct	163165142157
	oct	162144151156
	oct	141164145040
	oct	164157040141
	oct	156040145156
	oct	164162171040
	oct	164150141164
	oct	040143157156
	oct	164141151156
	oct	163040141040
	oct	114111116105
	oct	040156165155
	oct	142145162040
	oct	143154141165
	oct	163145040176
	oct	124150151163
	oct	040151156164
	oct	145147145162
	oct	040155165163
	oct	164040156157
	oct	164040145170
	oct	143145145144
	oct	040164150162
	oct	145145040163
	oct	151147156151
	oct	146151143141
	oct	156164040144
	oct	151147151164
	oct	163040111146
	oct	040164150145
	oct	040120101107
	oct	105040143154
	oct	141165163145
	oct	040151163040
	oct	157155151164
	oct	164145144040
	oct	146162157155
	oct	040141156040
	oct	122104040157
	oct	156154171040
	oct	162145154141
	oct	164151166145
	oct	040114111116
	oct	105040156165
	oct	155142145162
	oct	040143154141
	oct	165163145163
	oct	040143141156
	oct	040142145040
	oct	163160145143
	oct	151146151145
	oct	144040151156
	oct	040141156040
	oct	122145160157
	oct	162164040107
	oct	162157165160
	oct	040104145163
	oct	143162151160
	oct	164151157156
	oct	040105156164
	oct	162171040176
	oct	101040114111
	oct	116105040156
	oct	165155142145
	oct	162040143154
	oct	141165163145
	oct	040167151164
	oct	150040164150
	oct	145040116105
	oct	130124040120
	oct	101107105040
	oct	160150162141
	oct	163145040143
	oct	141156040141
	oct	160160145141
	oct	162040157156
	oct	154171040151
	oct	156040164150
	oct	145040144145
	oct	163143162151
	oct	160164151157
	oct	156040157146
	oct	040142157144
	oct	171040147162
	oct	157165160163
	oct	040141156144
	oct	040151156040
	oct	141040122105
	oct	120117122124
	oct	040106117117
	oct	124111116107
	oct	040162145160
	oct	157162164040
	oct	147162157165
	oct	160040176124
	oct	150145040146
	oct	151162163164
	oct	040114111116
	oct	105040156165
	oct	155142145162
	oct	040143154141
	oct	165163145040
	oct	163160145143
	oct	151146151145
	oct	144040167151
	oct	164150151156
	oct	040141040120
	oct	101107105040
	oct	106117117124
	oct	111116107040
	oct	162145160157
	oct	162164040147
	oct	162157165160
	oct	040155165163
	oct	164040150141
	oct	166145040141
	oct	156040141142
	oct	163157154165
	oct	164145040114
	oct	111116105040
	oct	116125115102
	oct	105122040143
	oct	154141165163
	oct	145040176101
	oct	040162145160
	oct	157162164040
	oct	147162157165
	oct	160040145156
	oct	164162171040
	oct	155165163164
	oct	040156157164
	oct	040143157156
	oct	164141151156
	oct	040141040116
	oct	105130124040
	oct	107122117125
	oct	120040143154
	oct	141165163145
	oct	040165156154
	oct	145163163040
	oct	164150145040
	oct	144145163143
	oct	162151160164
	oct	151157156040
	oct	157146040164
	oct	150141164040
	oct	162145160157
	oct	162164040147
	oct	162157165160
	oct	040143157156
	oct	164141151156
	oct	163040141164
	oct	040154145141
	oct	163164040157
	oct	156145040114
	oct	111116105040
	oct	156165155142
	oct	145162040143
	oct	154141165163
	oct	145040176111
	oct	146040164150
	oct	145040120101
	oct	107105040143
	oct	154141165163
	oct	145040151163
	oct	040157155151
	oct	164164145144
	oct	040146162157
	oct	155040164150
	oct	145040122104
	oct	040157156154
	oct	171040141040
	oct	162145154141
	oct	164151166145
	oct	040116105130
	oct	124040107122
	oct	117125120040
	oct	143154141165
	oct	163145040155
	oct	141171040142
	oct	145040163160
	oct	145143151146
	oct	151145144040
	oct	151156040141
	oct	156040122145
	oct	160157162164
	oct	040107162157
	oct	165160040104
	oct	145163143162
	oct	151160164151
	oct	157156040105
	oct	156164162171
	oct	040176124150
	oct	145040116105
	oct	130124040120
	oct	101107105040
	oct	160150162141
	oct	163145040151
	oct	156040164150
	oct	145040116105
	oct	130124040107
	oct	122117125120
	oct	040143154141
	oct	165163145040
	oct	155165163164
	oct	040156157164
	oct	040142145040
	oct	163160145143
	oct	151146151145
	oct	144040151156
	oct	040141040120
	oct	101107105040
	oct	106117117124
	oct	111116107040
	oct	162145160157
	oct	162164040147
	oct	162157165160
	oct	040124150145
	oct	040116105130
	oct	124040107122
	oct	117125120040
	oct	143154141165
	oct	163145040155
	oct	165163164040
	oct	156157164040
	oct	142145040163
	oct	160145143151
	oct	146151145144
	oct	040151156040
	oct	141040122105
	oct	120117122124
	oct	040106117117
	oct	124111116107
	oct	040162145160
	oct	157162164040
	oct	147162157165
	oct	160040157162
	oct	040151156040
	oct	141040120101
	oct	107105040110
	oct	105101104111
	oct	116107040162
	oct	145160157162
	oct	164040147162
	oct	157165160040
	oct	176124150145
	oct	040110105101
	oct	104111116107
	oct	040151156164
	oct	145147145162
	oct	040155165163
	oct	164040142145
	oct	040147162141
	oct	145141164145
	oct	162040164150
	oct	141156040157
	oct	162040145161
	oct	165141154040
	oct	164157040157
	oct	156145040124
	oct	150145040106
	oct	111122123124
	oct	040104105124
	oct	101111114040
	oct	151156164145
	oct	147145162040
	oct	155165163164
	oct	040142145040
	oct	147162145141
	oct	164145162040
	oct	164150141156
	oct	040157162040
	oct	145161165141
	oct	154040164157
	oct	040164150145
	oct	040110105101
	oct	104111116107
	oct	040151156164
	oct	145147145162
	oct	040124150145
	oct	040114101123
	oct	124040104105
	oct	124101111114
	oct	040151156164
	oct	145147145162
	oct	040155165163
	oct	164040142145
	oct	040147162145
	oct	141164145162
	oct	040164150141
	oct	156040157162
	oct	040145161165
	oct	141154040164
	oct	157040164150
	oct	145040106111
	oct	122123124040
	oct	104105124101
	oct	111114040151
	oct	156164145147
	oct	145162040124
	oct	150145040106
	oct	117117124111
	oct	116107040151
	oct	156164145147
	oct	145162040155
	oct	165163164040
	oct	142145040147
	oct	162145141164
	oct	145162040164
	oct	150141156040
	oct	157162040145
	oct	161165141154
	oct	040164157040
	oct	164150145040
	oct	114101123124
	oct	040104105124
	oct	101111114040
	oct	151156164145
	oct	147145162040
	oct	124150145040
	oct	120101107105
	oct	040114111115
	oct	111124040151
	oct	156164145147
	oct	145162040155
	oct	165163164040
	oct	142145040147
	oct	162145141164
	oct	145162040164
	oct	150141156040
	oct	157162040145
	oct	161165141154
	oct	040164157040
	oct	164150145040
	oct	106117117124
	oct	111116107040
	oct	151156164145
	oct	147145162040
	oct	105141143150
	oct	040162145160
	oct	157162164055
	oct	156141155145
	oct	040163160145
	oct	143151146151
	oct	145144040151
	oct	156040164150
	oct	145040122105
	oct	120117122124
	oct	040143154141
	oct	165163145040
	oct	155165163164
	oct	040142145040
	oct	164150145040
	oct	163165142152
	oct	145143164040
	oct	157146040141
	oct	156040122104
	oct	040145156164
	oct	162171040151
	oct	156040164150
	oct	145040122145
	oct	160157162164
	oct	040123145143
	oct	164151157156
	oct	040176101040
	oct	162145160157
	oct	162164055156
	oct	141155145040
	oct	155165163164
	oct	040141160160
	oct	145141162040
	oct	151156040157
	oct	156154171040
	oct	157156145040
	oct	122105120117
	oct	122124040143
	oct	154141165163
	oct	145040124150
	oct	145040163165
	oct	142152145143
	oct	164040157146
	oct	040141040146
	oct	151154145040
	oct	144145163143
	oct	162151160164
	oct	151157156040
	oct	145156164162
	oct	171040164150
	oct	141164040163
	oct	160145143151
	oct	146151145144
	oct	040141040122
	oct	105120117122
	oct	124040143154
	oct	141165163145
	oct	040155141171
	oct	040157156154
	oct	171040142145
	oct	040162145146
	oct	145162145144
	oct	040164157040
	oct	142171040164
	oct	150145040117
	oct	120105116040
	oct	117125124120
	oct	125124054040
	oct	117120105116
	oct	040105130124
	oct	105116104040
	oct	141156144040
	oct	103114117123
	oct	105040163164
	oct	141164145155
	oct	145156164163
	oct	040176124150
	oct	151163040144
	oct	141164141040
	oct	151164145155
	oct	040155165163
	oct	164040142145
	oct	040156165155
	oct	145162151143
	oct	040124150151
	oct	163040144141
	oct	164141040151
	oct	164145155040
	oct	155165163164
	oct	040142145040
	oct	141040123125
	oct	115040143157
	oct	165156164145
	oct	162040167150
	oct	151143150040
	oct	151163040144
	oct	145146151156
	oct	145144040151
	oct	156040164150
	oct	145040163141
	oct	155145040162
	oct	145160157162
	oct	164040147162
	oct	157165160040
	oct	164150141164
	oct	040143157156
	oct	164141151156
	oct	163040164150
	oct	151163040123
	oct	125115040143
	oct	154141165163
	oct	145040157162
	oct	040151156040
	oct	141040162145
	oct	160157162164
	oct	040147162157
	oct	165160040167
	oct	150151143150
	oct	040151163040
	oct	141164040141
	oct	040154157167
	oct	145162040154
	oct	145166145154
	oct	040151156040
	oct	164150145040
	oct	143157156164
	oct	162157154040
	oct	150151145162
	oct	141162143150
	oct	171040176124
	oct	150151163040
	oct	144141164141
	oct	040151164145
	oct	155040155165
	oct	163164040156
	oct	157164040142
	oct	145040141040
	oct	123125115040
	oct	143157165156
	oct	164145162040
	oct	124150151163
	oct	040144141164
	oct	141040156141
	oct	155145040155
	oct	165163164040
	oct	142145040141
	oct	040104105124
	oct	101111114040
	oct	162145160157
	oct	162164040147
	oct	162157165160
	oct	040144145163
	oct	143162151142
	oct	145144040151
	oct	156040164150
	oct	145040163141
	oct	155145040162
	oct	145160157162
	oct	164040141163
	oct	040164150145
	oct	040103117116
	oct	124122117114
	oct	040106117117
	oct	124111116107
	oct	040162145160
	oct	157162164040
	oct	147162157165
	oct	160040167150
	oct	151143150040
	oct	143157156164
	oct	141151156163
	oct	040164150145
	oct	040123125115
	oct	040143154141
	oct	165163145040
	oct	176101040123
	oct	125115040143
	oct	154141165163
	oct	145040155141
	oct	171040157156
	oct	154171040141
	oct	160160145141
	oct	162040151156
	oct	040141040103
	oct	117116124122
	oct	117114040106
	oct	117117124111
	oct	116107040162
	oct	145160157162
	oct	164040147162
	oct	157165160040
	oct	101040163171
	oct	156164141170
	oct	040145162162
	oct	157162040150
	oct	141163040157
	oct	143143165162
	oct	162145144054
	oct	040154145170
	oct	145155145163
	oct	040155141171
	oct	040142145040
	oct	151147156157
	oct	162145144040
	oct	124150151163
	oct	040144141164
	oct	141055156141
	oct	155145040155
	oct	165163164040
	oct	156157164040
	oct	142145040141
	oct	040154157167
	oct	145162040154
	oct	145166145154
	oct	040143157156
	oct	164162157154
	oct	040164150141
	oct	156040164150
	oct	145040141163
	oct	163157143151
	oct	141164145144
	oct	040143157156
	oct	164162157154
	oct	040146157162
	oct	040164150145
	oct	040162145160
	oct	157162164040
	oct	147162157165
	oct	160040151156
	oct	040167150151
	oct	143150040164
	oct	150145040122
	oct	105123105124
	oct	040160150162
	oct	141163145040
	oct	141160160145
	oct	141162163040
	oct	176106111116
	oct	101114040144
	oct	157145163040
	oct	156157164040
	oct	141160160145
	oct	141162040151
	oct	156040164150
	oct	145040103117
	oct	116124122117
	oct	114040143154
	oct	141165163145
	oct	040146157162
	oct	040164150151
	oct	163040162145
	oct	160157162164
	oct	040122110054
	oct	040120110054
	oct	040103110040
	oct	106111116101
	oct	114054040103
	oct	106040106111
	oct	116101114054
	oct	040120106040
	oct	141156144040
	oct	122106040143
	oct	157156164162
	oct	157154040147
	oct	162157165160
	oct	163040155141
	oct	171040141160
	oct	160145141162
	oct	040157156154
	oct	171040157156
	oct	143145040151
	oct	156040141040
	oct	162145160157
	oct	162164040144
	oct	145163143162
	oct	151160164151
	oct	157156040120
	oct	110040141156
	oct	144040120106
	oct	040162145160
	oct	157162164040
	oct	147162157165
	oct	160163040155
	oct	141171040142
	oct	145040163160
	oct	145143151146
	oct	151145144040
	oct	157156154171
	oct	040151146040
	oct	141040120101
	oct	107105040143
	oct	154141165163
	oct	145040151163
	oct	040163160145
	oct	143151146151
	oct	145144040151
	oct	156040164150
	oct	145040122104
	oct	040145156164
	oct	162171040124
	oct	150151163040
	oct	144141164141
	oct	055156141155
	oct	145040155165
	oct	163164040141
	oct	160160145141
	oct	162040151156
	oct	040164150145
	oct	040103117116
	oct	124122117114
	oct	040143154141
	oct	165163145040
	oct	146157162040
	oct	164150145040
	oct	122104040145
	oct	156164162171
	oct	040101164040
	oct	155157163164
	oct	040157156145
	oct	040103110040
	oct	157162040103
	oct	106040147162
	oct	157165160040
	oct	143141156040
	oct	142145040163
	oct	160145143151
	oct	146151145144
	oct	040146157162
	oct	040145141143
	oct	150040144141
	oct	164141055156
	oct	141155145040
	oct	157162040106
	oct	111116101114
	oct	040151156040
	oct	164150145040
	oct	103117116124
	oct	122117114040
	oct	143154141165
	oct	163145040111
	oct	156040103106
	oct	054040120110
	oct	054040120106
	oct	040141156144
	oct	040122106040
	oct	162145160157
	oct	162164040147
	oct	162157165160
	oct	163054040123
	oct	117125122103
	oct	105040143154
	oct	141165163145
	oct	163040141156
	oct	144040125123
	oct	105040163164
	oct	141164145155
	oct	145156164163
	oct	040155165163
	oct	164040156157
	oct	164040162145
	oct	146145162145
	oct	156143145040
	oct	147162157165
	oct	160040144141
	oct	164141040151
	oct	164145155163
	oct	040167150151
	oct	143150040143
	oct	157156164141
	oct	151156040141
	oct	040103117116
	oct	124122117114
	oct	040144141164
	oct	141040151164
	oct	145155040176
	oct	111156040103
	oct	106054040120
	oct	110054040120
	oct	106040141156
	oct	144040122106
	oct	040162145160
	oct	157162164040
	oct	147162157165
	oct	160163054040
	oct	123117125122
	oct	103105040143
	oct	154141165163
	oct	145163040141
	oct	156144040125
	oct	123105040163
	oct	164141164145
	oct	155145156164
	oct	163040155165
	oct	163164040156
	oct	157164040162
	oct	145146145162
	oct	145156143145
	oct	040144141164
	oct	141040151164
	oct	145155163040
	oct	163165142157
	oct	162144151156
	oct	141164145040
	oct	164157040141
	oct	040103117116
	oct	124122117114
	oct	040144141164
	oct	141040151164
	oct	145155040176
	oct	111156040103
	oct	106054040120
	oct	110054040120
	oct	106040141156
	oct	144040122106
	oct	040162145160
	oct	157162164040
	oct	147162157165
	oct	160163054040
	oct	123117125122
	oct	103105040143
	oct	154141165163
	oct	145163040141
	oct	156144040125
	oct	123105040163
	oct	164141164145
	oct	155145156164
	oct	163040155165
	oct	163164040156
	oct	157164040162
	oct	145146145162
	oct	145156143145
	oct	040141040162
	oct	145144145146
	oct	151156151164
	oct	151157156040
	oct	157162040162
	oct	145156141155
	oct	151156147040
	oct	157146040141
	oct	040103117116
	oct	124122117114
	oct	040144141164
	oct	141040151164
	oct	145155040176
	oct	111156040120
	oct	110040141156
	oct	144040120106
	oct	040162145160
	oct	157162164040
	oct	147162157165
	oct	160163040123
	oct	117125122103
	oct	105040143154
	oct	141165163145
	oct	163040141156
	oct	144040125123
	oct	105040163164
	oct	141164145155
	oct	145156164163
	oct	040155165163
	oct	164040156157
	oct	164040162145
	oct	146145162145
	oct	156143145040
	oct	143157156164
	oct	162157154040
	oct	144141164141
	oct	040156141155
	oct	145163040176
	oct	111146040141
	oct	040107105116
	oct	105122101124
	oct	105040162145
	oct	160157162164
	oct	055156141155
	oct	145040163164
	oct	141164145155
	oct	145156164040
	oct	151163040163
	oct	160145143151
	oct	146151145144
	oct	040164150145
	oct	156040164150
	oct	145040122104
	oct	040155165163
	oct	164040151156
	oct	143154165144
	oct	145040156157
	oct	040155157162
	oct	145040164150
	oct	141156040157
	oct	156145040104
	oct	105124101111
	oct	114040162145
	oct	160157162164
	oct	040147162157
	oct	165160040176
	oct	124150145040
	oct	144145163143
	oct	162151160164
	oct	151157156040
	oct	157146040141
	oct	040162145160
	oct	157162164040
	oct	155165163164
	oct	040151156143
	oct	154165144145
	oct	040141164040
	oct	154145141163
	oct	164040157156
	oct	145040142157
	oct	144171040147
	oct	162157165160
	oct	040111146040
	oct	141040107105
	oct	116105122101
	oct	124105040162
	oct	145160157162
	oct	164055156141
	oct	155145040163
	oct	164141164145
	oct	155145156164
	oct	040151163040
	oct	163160145143
	oct	151146151145
	oct	144040164150
	oct	145156040164
	oct	150145040122
	oct	104040155165
	oct	163164040151
	oct	156143154165
	oct	144145040141
	oct	040103117116
	oct	124122117114
	oct	040143154141
	oct	165163145040
	oct	176124150151
	oct	163040144141
	oct	164141055156
	oct	141155145040
	oct	151163040156
	oct	157164040141
	oct	040162145160
	oct	157162164055
	oct	156141155145
	oct	040124150145
	oct	040123125120
	oct	120122105123
	oct	123040163164
	oct	141164145155
	oct	145156164040
	oct	155141171040
	oct	157156154171
	oct	040141160160
	oct	145141162040
	oct	151156040141
	oct	040125123105
	oct	040102105106
	oct	117122105040
	oct	122105120117
	oct	122124111116
	oct	107040160162
	oct	157143145144
	oct	165162145040
	oct	124150151143
	oct	040144141164
	oct	141055156141
	oct	155145040155
	oct	165163164040
	oct	141160160145
	oct	141162040151
	oct	156040160162
	oct	145143151163
	oct	145154171040
	oct	157156145040
	oct	125123105040
	oct	163164141164
	oct	145155145156
	oct	164040107105
	oct	116105122101
	oct	124105054040
	oct	111116111124
	oct	111101124105
	oct	040141156144
	oct	040124105122
	oct	115111116101
	oct	124105040163
	oct	164141164145
	oct	155145156164
	oct	163040155165
	oct	163164040156
	oct	157164040141
	oct	160160145141
	oct	162040151156
	oct	040141040125
	oct	123105040102
	oct	105106117122
	oct	105040122105
	oct	120117122124
	oct	111116107040
	oct	160162157143
	oct	145144165162
	oct	145163040101
	oct	040125123105
	oct	040102105106
	oct	117122105040
	oct	122105120117
	oct	122124111116
	oct	107040160162
	oct	157143145144
	oct	165162145040
	oct	155165163164
	oct	040156157164
	oct	040141154164
	oct	145162040164
	oct	150145040143
	oct	157156164145
	oct	156164163040
	oct	157146040141
	oct	156171040103
	oct	117116124122
	oct	117114040144
	oct	141164141040
	oct	151164145155
	oct	040117156145
	oct	040157162040
	oct	155157162145
	oct	040122145160
	oct	157162164040
	oct	107162157165
	oct	160040104145
	oct	163143162151
	oct	160164151157
	oct	156040105156
	oct	164162151145
	oct	163040155165
	oct	163164040146
	oct	157154154157
	oct	167040164150
	oct	145040122104
	oct	040145156164
	oct	162171040117
	oct	156154171040
	oct	164150145040
	oct	122127103123
	oct	040143141156
	oct	040143150141
	oct	156147145040
	oct	164150145040
	oct	143157156164
	oct	145156164163
	oct	040157146040
	oct	114111116105
	oct	055103117125
	oct	116124105122
	oct	040101040106
	oct	157162155141
	oct	164040062040
	oct	145156164162
	oct	171040155165
	oct	163164040143
	oct	157156164141
	oct	151156040141
	oct	164040154145
	oct	141163164040
	oct	157156145040
	oct	157160164151
	oct	157156141154
	oct	040143154141
	oct	165163145040
	oct	111146040141
	oct	040125123101
	oct	107105040143
	oct	154141165163
	oct	145040141160
	oct	160145141162
	oct	163040151156
	oct	040141040106
	oct	157162155141
	oct	164040063040
	oct	145156164162
	oct	171040164150
	oct	145156040164
	oct	150141164040
	oct	145156164162
	oct	171040155165
	oct	163164040144
	oct	145146151156
	oct	145040141040
	oct	160162151156
	oct	164141142154
	oct	145040151164
	oct	145155040111
	oct	146040164150
	oct	145040125123
	oct	101107105040
	oct	143154141165
	oct	163145040141
	oct	160160145141
	oct	162163040151
	oct	156040141040
	oct	106157162155
	oct	141164040061
	oct	040157162040
	oct	106157162155
	oct	141164040062
	oct	040145156164
	oct	162171054040
	oct	141164040154
	oct	145141163164
	oct	040157156145
	oct	040163165142
	oct	157162144151
	oct	156141164145
	oct	040145156164
	oct	162171040155
	oct	165163164040
	oct	144145146151
	oct	156145040141
	oct	040160162151
	oct	156164141142
	oct	154145040151
	oct	164145155040
	oct	176101040107
	oct	122117125120
	oct	040111116104
	oct	111103101124
	oct	105040155141
	oct	171040141160
	oct	160145141162
	oct	040157156154
	oct	171040151156
	oct	040141040124
	oct	131120105040
	oct	104105124101
	oct	111114040162
	oct	145160157162
	oct	164040164150
	oct	141164040144
	oct	145146151156
	oct	145163040141
	oct	040160162151
	oct	156164141142
	oct	154145040151
	oct	164145155040
	oct	101040114111
	oct	116105040116
	oct	125115102105
	oct	122040143154
	oct	141165163145
	oct	040155165163
	oct	164040156157
	oct	164040142145
	oct	040164150145
	oct	040157156154
	oct	171040143154
	oct	141165163145
	oct	040163160145
	oct	143151146151
	oct	145144040101
	oct	156040145156
	oct	164162171040
	oct	164150141164
	oct	040143157156
	oct	164141151156
	oct	163040141040
	oct	126101114125
	oct	105040143154
	oct	141165163145
	oct	040155165163
	oct	164040141154
	oct	163157040150
	oct	141166145040
	oct	141040103117
	oct	114125115116
	oct	040116125115
	oct	102105122040
	oct	143154141165
	oct	163145040124
	oct	150145040154
	oct	151164145162
	oct	141154040151
	oct	156040164150
	oct	145040103117
	oct	104105040143
	oct	154141165163
	oct	145040155165
	oct	163164040142
	oct	145040141040
	oct	164167157040
	oct	143150141162
	oct	141143164145
	oct	162040156157
	oct	156156165155
	oct	145162151143
	oct	040154151164
	oct	145162141154
	oct	040111146040
	oct	164150145040
	oct	103117104105
	oct	040143154141
	oct	165163145040
	oct	151163040163
	oct	160145143151
	oct	146151145144
	oct	040146157162
	oct	040141156171
	oct	040162145160
	oct	157162164040
	oct	151156040141
	oct	040146151154
	oct	145040164150
	oct	145156040151
	oct	164040155165
	oct	163164040142
	oct	145040163160
	oct	145143151146
	oct	151145144040
	oct	146157162040
	oct	141154154040
	oct	162145160157
	oct	162164163040
	oct	151156040164
	oct	150145040146
	oct	151154145040
	oct	176124150145
	oct	040103117114
	oct	125115116040
	oct	116125115102
	oct	105122040143
	oct	154141165163
	oct	145040143141
	oct	156040157156
	oct	154171040142
	oct	145040163160
	oct	145143151146
	oct	151145144040
	oct	141164040164
	oct	150145040145
	oct	154145155145
	oct	156164141162
	oct	171040154145
	oct	166145154040
	oct	167151164150
	oct	151156040141
	oct	040162145160
	oct	157162164040
	oct	147162157165
	oct	160040176124
	oct	150145040103
	oct	117114125115
	oct	116040116125
	oct	115102105122
	oct	040143154141
	oct	165163145040
	oct	155165163164
	oct	040141160160
	oct	145141162040
	oct	151156040157
	oct	162040142145
	oct	040163165142
	oct	157162144151
	oct	156141164145
	oct	040164157040
	oct	141156040145
	oct	156164162171
	oct	040164150141
	oct	164040143157
	oct	156164141151
	oct	156163040141
	oct	040114111116
	oct	105040116125
	oct	115102105122
	oct	040143154141
	oct	165163145040
	oct	176127151164
	oct	150151156040
	oct	141040147151
	oct	166145156040
	oct	162145160157
	oct	162164040154
	oct	151156145054
	oct	040141154154
	oct	040141142163
	oct	157154165164
	oct	145040103117
	oct	114125115116
	oct	040116125115
	oct	102105122040
	oct	143154141165
	oct	163145163040
	oct	155165163164
	oct	040160162145
	oct	143145144145
	oct	040141154154
	oct	040162145154
	oct	141164151166
	oct	145040103117
	oct	114125115116
	oct	040116125115
	oct	102105122040
	oct	143154141165
	oct	163145163040
	oct	176123165143
	oct	143145163163
	oct	151166145040
	oct	141142163157
	oct	154165164145
	oct	040103117114
	oct	125115116040
	oct	116125115102
	oct	105122040143
	oct	154141165163
	oct	145163040155
	oct	165163164040
	oct	163160145143
	oct	151146171040
	oct	151156164145
	oct	147145162163
	oct	040151156040
	oct	151156143162
	oct	145141163151
	oct	156147040157
	oct	162144145162
	oct	040163165143
	oct	150040164150
	oct	141164040145
	oct	141143150040
	oct	160162151156
	oct	164141142154
	oct	145040151164
	oct	145155040157
	oct	143143165160
	oct	151145163040
	oct	141040165156
	oct	151161165145
	oct	040141162145
	oct	141040176101
	oct	040144141164
	oct	141055156141
	oct	155145040151
	oct	156040164150
	oct	145040103117
	oct	116124122117
	oct	114040143154
	oct	141165163145
	oct	040155165163
	oct	164040156157
	oct	164040142145
	oct	040144145146
	oct	151156145144
	oct	040151156040
	oct	164150145040
	oct	122145160157
	oct	162164040123
	oct	145143164151
	oct	157156040105
	oct	141143150040
	oct	144141164141
	oct	055156141155
	oct	145040151156
	oct	040141040103
	oct	117116124122
	oct	117114040143
	oct	154141165163
	oct	145040155165
	oct	163164040151
	oct	144145156164
	oct	151146171040
	oct	141040144151
	oct	146146145162
	oct	145156164040
	oct	144141164141
	oct	040151164145
	oct	155040101040
	oct	144141164141
	oct	055156141155
	oct	145040151156
	oct	040141040103
	oct	117116124122
	oct	117114040143
	oct	154141165163
	oct	145040155165
	oct	163164040156
	oct	157164040150
	oct	141166145040
	oct	163165142157
	oct	162144151156
	oct	141164145040
	oct	164157040151
	oct	164040141040
	oct	144141164141
	oct	040151164145
	oct	155040167150
	oct	157163145040
	oct	163151172145
	oct	040151163040
	oct	166141162151
	oct	141142154145
	oct	040101164040
	oct	155157163164
	oct	040157156145
	oct	040103117116
	oct	124122117114
	oct	040110105101
	oct	104111116107
	oct	040162145160
	oct	157162164040
	oct	147162157165
	oct	160040141156
	oct	144040157156
	oct	145040103117
	oct	116124122117
	oct	114040106117
	oct	117124111116
	oct	107040162145
	oct	160157162164
	oct	040147162157
	oct	165160040143
	oct	141156040142
	oct	145040163160
	oct	145143151146
	oct	151145144040
	oct	146157162040
	oct	145141143150
	oct	040144141164
	oct	141055156141
	oct	155145040157
	oct	162040106111
	oct	116101114040
	oct	151156040164
	oct	150145040103
	oct	117116124122
	oct	117114123040
	oct	143154141165
	oct	163145040176
	oct	124150145040
	oct	144141164141
	oct	055156141155
	oct	145040155141
	oct	171040141160
	oct	160145141162
	oct	040157156154
	oct	171040157156
	oct	143145040151
	oct	156040164150
	oct	145040103117
	oct	116124122117
	oct	114123040143
	oct	154141165163
	oct	145040146157
	oct	162040164150
	oct	145040122104
	oct	040145156164
	oct	162171040127
	oct	150145156040
	oct	163165142164
	oct	157164141154
	oct	154151156147
	oct	040151163040
	oct	163160145143
	oct	151146151145
	oct	144040164150
	oct	145040141144
	oct	144145156144
	oct	040155141171
	oct	040156157164
	oct	040142145040
	oct	141040163165
	oct	155040143157
	oct	165156164145
	oct	162040124150
	oct	145040116105
	oct	130124040107
	oct	122117125120
	oct	040151156164
	oct	145147145162
	oct	040155165163
	oct	164040142145
	oct	040147162145
	oct	141164145162
	oct	040164150141
	oct	156040164150
	oct	145040154151
	oct	156145040156
	oct	165155142145
	oct	162040157156
	oct	040167150151
	oct	143150040164
	oct	150145040146
	oct	151156141154
	oct	040160162151
	oct	156164040154
	oct	151156145040
	oct	157146040164
	oct	150145040122
	oct	105120117122
	oct	124040110105
	oct	101104111116
	oct	107040147162
	oct	157165160040
	oct	151163040160
	oct	162145163145
	oct	156164145144
	oct	040176124150
	oct	145040116105
	oct	130124040107
	oct	122117125120
	oct	040151156164
	oct	145147145162
	oct	040155165163
	oct	164040142145
	oct	040154145163
	oct	163040164150
	oct	141156040164
	oct	150145040154
	oct	151156145040
	oct	156165155142
	oct	145162040163
	oct	160145143151
	oct	146151145144
	oct	040142171040
	oct	164150145040
	oct	106111122123
	oct	124040104105
	oct	124101111114
	oct	040160150162
	oct	141163145040
	oct	157146040164
	oct	150145040120
	oct	101107105040
	oct	143154141165
	oct	163145040176
	oct	124150145040
	oct	163165155040
	oct	157146040164
	oct	150145040116
	oct	105130124040
	oct	107122117125
	oct	120040151156
	oct	164145147145
	oct	162040141156
	oct	144040164150
	oct	145040154151
	oct	156145040156
	oct	165155142145
	oct	162040157156
	oct	040167150151
	oct	143150040164
	oct	150145040146
	oct	151156141154
	oct	040160162151
	oct	156164040154
	oct	151156145040
	oct	157146040164
	oct	150145040122
	oct	105120117122
	oct	124040110105
	oct	101104111116
	oct	107040147162
	oct	157165160040
	oct	151163040160
	oct	162145163145
	oct	156164145144
	oct	040155165163
	oct	164040142145
	oct	040154145163
	oct	163040164150
	oct	141156040164
	oct	150145040154
	oct	151156145040
	oct	156165155142
	oct	145162040163
	oct	160145143151
	oct	146151145144
	oct	040142171040
	oct	164150145040
	oct	106111122123
	oct	124040104105
	oct	124101111114
	oct	040160150162
	oct	141163145040
	oct	157146040164
	oct	150145040120
	oct	101107105040
	oct	143154141165
	oct	163145040176
	oct	124150145040
	oct	146151162163
	oct	164040154151
	oct	156145040156
	oct	165155142145
	oct	162040157156
	oct	040167150151
	oct	143150040164
	oct	150145040122
	oct	105120117122
	oct	124040110105
	oct	101104111116
	oct	107040147162
	oct	157165160040
	oct	143141156040
	oct	142145040160
	oct	162145163145
	oct	156164145144
	oct	040151163040
	oct	164150145040
	oct	154151156145
	oct	040156165155
	oct	142145162040
	oct	163160145143
	oct	151146151145
	oct	144040142171
	oct	040164150145
	oct	040110105101
	oct	104111116107
	oct	040160150162
	oct	141163145040
	oct	157146040164
	oct	150145040120
	oct	101107105040
	oct	143154141165
	oct	163145040176
	oct	124150145040
	oct	154141163164
	oct	040154151156
	oct	145040156165
	oct	155142145162
	oct	040157156040
	oct	167150151143
	oct	150040164150
	oct	145040122105
	oct	120117122124
	oct	040110105101
	oct	104111116107
	oct	040147162157
	oct	165160040143
	oct	141156040142
	oct	145040160162
	oct	145163145156
	oct	164145144040
	oct	151163040164
	oct	150145040154
	oct	151156145040
	oct	156165155142
	oct	145162040163
	oct	160145143151
	oct	146151145144
	oct	040142171040
	oct	164150145040
	oct	106111122123
	oct	124040104105
	oct	124101111114
	oct	040160150162
	oct	141163145040
	oct	157146040164
	oct	150145040120
	oct	101107105040
	oct	143154141165
	oct	163145040155
	oct	151156165163
	oct	040157156145
	oct	040176124150
	oct	145040154141
	oct	163164040154
	oct	151156145040
	oct	156165155142
	oct	145162040157
	oct	156040167150
	oct	151143150040
	oct	164150145040
	oct	122105120117
	oct	122124040110
	oct	105101104111
	oct	116107040147
	oct	162157165160
	oct	040143141156
	oct	040142145040
	oct	160162145163
	oct	145156164145
	oct	144040151163
	oct	040164150145
	oct	040154151156
	oct	145040156165
	oct	155142145162
	oct	040163160145
	oct	143151146151
	oct	145144040142
	oct	171040164150
	oct	145040120101
	oct	107105040143
	oct	154141165163
	oct	145040176111
	oct	146040164150
	oct	145040122105
	oct	120117122124
	oct	040110105101
	oct	104111116107
	oct	040141156144
	oct	040164150145
	oct	040120101107
	oct	105040110105
	oct	101104111116
	oct	107040147162
	oct	157165160163
	oct	040141162145
	oct	040157156040
	oct	164150145040
	oct	163141155145
	oct	040160141147
	oct	145040164150
	oct	145156040164
	oct	150145040146
	oct	151162163164
	oct	040154151156
	oct	145040157146
	oct	040164150145
	oct	040120101107
	oct	105040110105
	oct	101104111116
	oct	107040147162
	oct	157165160040
	oct	155165163164
	oct	040146157154
	oct	154157167040
	oct	164150145040
	oct	154141163164
	oct	040154151156
	oct	145040157146
	oct	040164150145
	oct	040122105120
	oct	117122124040
	oct	110105101104
	oct	111116107040
	oct	147162157165
	oct	160040176124
	oct	150145040146
	oct	151162163164
	oct	040154151156
	oct	145040157156
	oct	040167150151
	oct	143150040164
	oct	150145040120
	oct	101107105040
	oct	110105101104
	oct	111116107040
	oct	147162157165
	oct	160040143141
	oct	156040142145
	oct	040160162145
	oct	163145156164
	oct	145144040151
	oct	163040164150
	oct	145040154151
	oct	156145040156
	oct	165155142145
	oct	162040163160
	oct	145143151146
	oct	151145144040
	oct	142171040164
	oct	150145040110
	oct	105101104111
	oct	116107040160
	oct	150162141163
	oct	145040157146
	oct	040164150145
	oct	040120101107
	oct	105040143154
	oct	141165163145
	oct	040176124150
	oct	145040154141
	oct	163164040154
	oct	151156145040
	oct	157156040167
	oct	150151143150
	oct	040164150145
	oct	040120101107
	oct	105040110105
	oct	101104111116
	oct	107040147162
	oct	157165160040
	oct	143141156040
	oct	142145040160
	oct	162145163145
	oct	156164145144
	oct	040151163040
	oct	164150145040
	oct	154151156145
	oct	040156165155
	oct	142145162040
	oct	163160145143
	oct	151146151145
	oct	144040142171
	oct	040164150145
	oct	040106111122
	oct	123124040104
	oct	105124101111
	oct	114040160150
	oct	162141163145
	oct	040157146040
	oct	164150145040
	oct	120101107105
	oct	040143154141
	oct	165163145040
	oct	155151156165
	oct	163040157156
	oct	145040176124
	oct	150145040146
	oct	151162163164
	oct	040154151156
	oct	145040157156
	oct	040167150151
	oct	143150040164
	oct	150145040120
	oct	101107105040
	oct	106117117124
	oct	111116107040
	oct	147162157165
	oct	160040143141
	oct	156040142145
	oct	040160162145
	oct	163145156164
	oct	145144040151
	oct	163040164150
	oct	145040154151
	oct	156145040156
	oct	165155142145
	oct	162040163160
	oct	145143151146
	oct	151145144040
	oct	142171040164
	oct	150145040106
	oct	117117124111
	oct	116107040160
	oct	150162141163
	oct	145040157146
	oct	040164150145
	oct	040120101107
	oct	105040143154
	oct	141165163145
	oct	040160154165
	oct	163040157156
	oct	145040176124
	oct	150145040154
	oct	141163164040
	oct	154151156145
	oct	040157156040
	oct	167150151143
	oct	150040164150
	oct	145040120101
	oct	107105040106
	oct	117117124111
	oct	116107040147
	oct	162157165160
	oct	040143141156
	oct	040142145040
	oct	160162145163
	oct	145156164145
	oct	144040151163
	oct	040164150145
	oct	040154151156
	oct	145040156165
	oct	155142145162
	oct	040163160145
	oct	143151146151
	oct	145144040142
	oct	171040164150
	oct	145040120101
	oct	107105040143
	oct	154141165163
	oct	145040176111
	oct	146040164150
	oct	145040120101
	oct	107105040106
	oct	117117124111
	oct	116107040141
	oct	156144040122
	oct	105120117122
	oct	124040106117
	oct	117124111116
	oct	107040147162
	oct	157165160163
	oct	040141162145
	oct	040160162145
	oct	163145156164
	oct	145144040157
	oct	156040164150
	oct	145040163141
	oct	155145040160
	oct	141147145040
	oct	164150145156
	oct	040164150145
	oct	040146151162
	oct	163164040154
	oct	151156145040
	oct	157146040164
	oct	150145040122
	oct	105120117122
	oct	124040106117
	oct	117124111116
	oct	107040147162
	oct	157165160040
	oct	155165163164
	oct	040146157154
	oct	154157167040
	oct	164150145040
	oct	154141163164
	oct	040154151156
	oct	145040157146
	oct	040164150145
	oct	040120101107
	oct	105040106117
	oct	117124111116
	oct	107040147162
	oct	157165160040
	oct	176124150145
	oct	040146151162
	oct	163164040154
	oct	151156145040
	oct	157156040167
	oct	150151143150
	oct	040164150145
	oct	040122105120
	oct	117122124040
	oct	106117117124
	oct	111116107040
	oct	147162157165
	oct	160040143141
	oct	156040142145
	oct	040160162145
	oct	163145156164
	oct	145144040151
	oct	163040164150
	oct	145040154151
	oct	156145040156
	oct	165155142145
	oct	162040163160
	oct	145143151146
	oct	151145144040
	oct	142171040164
	oct	150145040106
	oct	117117124111
	oct	116107040160
	oct	150162141163
	oct	145040157146
	oct	040164150145
	oct	040120101107
	oct	105040143154
	oct	141165163145
	oct	040160154165
	oct	163040157156
	oct	145040176124
	oct	150145040146
	oct	151162163164
	oct	040154151156
	oct	145040157156
	oct	040167150151
	oct	143150040164
	oct	150145040122
	oct	105120117122
	oct	124040106117
	oct	117124111116
	oct	107040147162
	oct	157165160040
	oct	143141156040
	oct	142145040160
	oct	162145163145
	oct	156164145144
	oct	040151163040
	oct	164150145040
	oct	154151156145
	oct	040156165155
	oct	142145162040
	oct	163160145143
	oct	151146151145
	oct	144040142171
	oct	040164150145
	oct	040110105101
	oct	104111116107
	oct	040160150162
	oct	141163145040
	oct	157146040164
	oct	150145040120
	oct	101107105040
	oct	143154141165
	oct	163145040176
	oct	124150145040
	oct	154141163164
	oct	040154151156
	oct	145040157156
	oct	040167150151
	oct	143150040164
	oct	150145040122
	oct	105120117122
	oct	124040106117
	oct	117124111116
	oct	107040147162
	oct	157165160040
	oct	143141156040
	oct	142145040160
	oct	162145163145
	oct	156164145144
	oct	040151163040
	oct	164150145040
	oct	154151156145
	oct	040156165155
	oct	142145162040
	oct	163160145143
	oct	151146151145
	oct	144040142171
	oct	040164150145
	oct	040120101107
	oct	105040143154
	oct	141165163145
	oct	040176124150
	oct	145040116105
	oct	130124040107
	oct	122117125120
	oct	040151156164
	oct	145147145162
	oct	040155165163
	oct	164040142145
	oct	040147162145
	oct	141164145162
	oct	040164150141
	oct	156040164150
	oct	145040154151
	oct	156145040156
	oct	165155142145
	oct	162040157156
	oct	040167150151
	oct	143150040164
	oct	150145040146
	oct	151156141154
	oct	040160162151
	oct	156164040154
	oct	151156145040
	oct	157146040164
	oct	150145040120
	oct	101107105040
	oct	106117117124
	oct	111116107040
	oct	147162157165
	oct	160040151163
	oct	040160162145
	oct	163145156164
	oct	145144040176
	oct	124150145040
	oct	116105130124
	oct	040107122117
	oct	125120040151
	oct	156164145147
	oct	145162040155
	oct	165163164040
	oct	156157164040
	oct	142145040147
	oct	162145141164
	oct	145162040164
	oct	150141156040
	oct	164150145040
	oct	154151156145
	oct	040156165155
	oct	142145162040
	oct	163160145143
	oct	151146151145
	oct	144040142171
	oct	040164150145
	oct	040120101107
	oct	105040143154
	oct	141165163145
	oct	040176124150
	oct	145040163165
	oct	155040157146
	oct	040164150145
	oct	040116105130
	oct	124040107122
	oct	117125120040
	oct	151156164145
	oct	147145162040
	oct	141156144040
	oct	164150145040
	oct	154151156145
	oct	040156165155
	oct	142145162040
	oct	157156040167
	oct	150151143150
	oct	040164150145
	oct	040146151156
	oct	141154040160
	oct	162151156164
	oct	040154151156
	oct	145040157146
	oct	040164150145
	oct	040120101107
	oct	105040106117
	oct	117124111116
	oct	107040147162
	oct	157165160040
	oct	151163040160
	oct	162145163145
	oct	156164145144
	oct	040155165163
	oct	164040156157
	oct	164040142145
	oct	040147162145
	oct	141164145162
	oct	040164150141
	oct	156040164150
	oct	145040154151
	oct	156145040156
	oct	165155142145
	oct	162040163160
	oct	145143151146
	oct	151145144040
	oct	142171040164
	oct	150145040120
	oct	101107105040
	oct	143154141165
	oct	163145040176
	oct	124150145040
	oct	116105130124
	oct	040107122117
	oct	125120040151
	oct	156164145147
	oct	145162040155
	oct	165163164040
	oct	163160145143
	oct	151146171040
	oct	141040154151
	oct	156145040156
	oct	165155142145
	oct	162040164150
	oct	141164040151
	oct	163040156157
	oct	164040154145
	oct	163163040164
	oct	150141156040
	oct	164150141164
	oct	040163160145
	oct	143151146151
	oct	145144040151
	oct	156040164150
	oct	145040106111
	oct	122123124040
	oct	104105124101
	oct	111114040160
	oct	150162141163
	oct	145040157146
	oct	040164150145
	oct	040120101107
	oct	105040143154
	oct	141165163145
	oct	040176124150
	oct	145040116105
	oct	130124040107
	oct	122117125120
	oct	040151156164
	oct	145147145162
	oct	040155165163
	oct	164040163160
	oct	145143151146
	oct	171040141040
	oct	154151156145
	oct	040156165155
	oct	142145162040
	oct	164150141164
	oct	040151163040
	oct	156157164040
	oct	147162145141
	oct	164145162040
	oct	164150141156
	oct	040164150141
	oct	164040163160
	oct	145143151146
	oct	151145144040
	oct	151156040164
	oct	150145040106
	oct	117117124111
	oct	116107040160
	oct	150162141163
	oct	145040157146
	oct	040164150145
	oct	040120101107
	oct	105040143154
	oct	141165163145
	oct	040176124150
	oct	145040146151
	oct	162163164040
	oct	154151156145
	oct	040156165155
	oct	142145162040
	oct	157156040167
	oct	150151143150
	oct	040141040142
	oct	157144171040
	oct	147162157165
	oct	160040143141
	oct	156040142145
	oct	040160162145
	oct	163145156164
	oct	145144040151
	oct	163040164150
	oct	145040154151
	oct	156145040156
	oct	165155142145
	oct	162040163160
	oct	145143151146
	oct	151145144040
	oct	142171040164
	oct	150145040106
	oct	111122123124
	oct	040104105124
	oct	101111114040
	oct	160150162141
	oct	163145040157
	oct	146040164150
	oct	145040120101
	oct	107105040143
	oct	154141165163
	oct	145040176124
	oct	150145040154
	oct	141163164040
	oct	154151156145
	oct	040156165155
	oct	142145162040
	oct	157156040167
	oct	150151143150
	oct	040141040103
	oct	117116124122
	oct	117114040110
	oct	105101104111
	oct	116107040147
	oct	162157165160
	oct	040157162040
	oct	141040104105
	oct	124101111114
	oct	040147162157
	oct	165160040143
	oct	141156040142
	oct	145040160162
	oct	145163145156
	oct	164145144040
	oct	151163040164
	oct	150145040154
	oct	151156145040
	oct	156165155142
	oct	145162040163
	oct	160145143151
	oct	146151145144
	oct	040142171040
	oct	164150145040
	oct	114101123124
	oct	040104105124
	oct	101111114040
	oct	160150162141
	oct	163145040157
	oct	146040164150
	oct	145040120101
	oct	107105040143
	oct	154141165163
	oct	145040176124
	oct	150145040154
	oct	141163164040
	oct	154151156145
	oct	040156165155
	oct	142145162040
	oct	157156040167
	oct	150151143150
	oct	040141040103
	oct	117116124122
	oct	117114040106
	oct	117117124111
	oct	116107040147
	oct	162157165160
	oct	040143141156
	oct	040142145040
	oct	160162145163
	oct	145156164145
	oct	144040151163
	oct	040164150145
	oct	040154151156
	oct	145040156165
	oct	155142145162
	oct	040163160145
	oct	143151146151
	oct	145144040142
	oct	171040164150
	oct	145040106117
	oct	117124111116
	oct	107040160150
	oct	162141163145
	oct	040157146040
	oct	164150145040
	oct	120101107105
	oct	040143154141
	oct	165163145040
	oct	176111154154
	oct	145147141154
	oct	040114111116
	oct	105040143154
	oct	141165163145
	oct	040111154154
	oct	145147141154
	oct	040116105130
	oct	124040107122
	oct	117125120040
	oct	143154141165
	oct	163145040111
	oct	154154145147
	oct	141154040124
	oct	131120105040
	oct	143154141165
	oct	163145040111
	oct	154154145147
	oct	141154040125
	oct	123101107105
	oct	040143154141
	oct	165163145040
	oct	111154154145
	oct	147141154040
	oct	102114101116
	oct	113040127110
	oct	105116040132
	oct	105122117040
	oct	143154141165
	oct	163145040111
	oct	154154145147
	oct	141154040107
	oct	122117125120
	oct	040111116104
	oct	111103101124
	oct	105040143154
	oct	141165163145
	oct	040111154154
	oct	145147141154
	oct	040112125123
	oct	124111106111
	oct	105104040122
	oct	111107110124
	oct	040143154141
	oct	165163145040
	oct	111154154145
	oct	147141154040
	oct	103117114125
	oct	115116040143
	oct	154141165163
	oct	145040111154
	oct	154145147141
	oct	154040120111
	oct	103124125122
	oct	105040143154
	oct	141165163145
	oct	040111154154
	oct	145147141154
	oct	040123117125
	oct	122103105040
	oct	143154141165
	oct	163145040111
	oct	154154145147
	oct	141154040126
	oct	101114125105
	oct	040143154141
	oct	165163145040
	oct	111154154145
	oct	147141154040
	oct	123125115040
	oct	143154141165
	oct	163145040111
	oct	154154145147
	oct	141154040123
	oct	111107116040
	oct	143154141165
	oct	163145040111
	oct	154154145147
	oct	141154040103
	oct	117104105040
	oct	143154141165
	oct	163145040111
	oct	154154145147
	oct	141154040103
	oct	117116124122
	oct	117114123040
	oct	143154141165
	oct	163145040111
	oct	154154145147
	oct	141154040120
	oct	101107105040
	oct	143154141165
	oct	163145040154
	oct	145166145154
	oct	040156165155
	oct	142145162040
	oct	151163040162
	oct	145161165151
	oct	162145144040
	oct	150145162145
	oct	040101040162
	oct	145160157162
	oct	164040144145
	oct	163143162151
	oct	160164151157
	oct	156040143154
	oct	141165163145
	oct	040151163040
	oct	145170160145
	oct	143164145144
	oct	040150145162
	oct	145040101040
	oct	162145160157
	oct	162164040147
	oct	162157165160
	oct	040144145163
	oct	143162151160
	oct	164151157156
	oct	040143154141
	oct	165163145040
	oct	151163040145
	oct	170160145143
	oct	164145144040
	oct	150145162145
	oct	040101040106
	oct	157162155141
	oct	164040063040
	oct	122145160157
	oct	162164040107
	oct	162157165160
	oct	040104145163
	oct	143162151160
	oct	164151157156
	oct	040105156164
	oct	162171040155
	oct	165163164040
	oct	143157156164
	oct	141151156040
	oct	141040120111
	oct	103040143154
	oct	141165163145
	oct	054040120111
	oct	103040130040
	oct	141163163165
	oct	155145144040
	oct	105170160145
	oct	143164145144
	oct	040167157162
	oct	144040151163
	oct	040120122117
	oct	103105104125
	oct	122105040105
	oct	170160145143
	oct	164145144040
	oct	167157162144
	oct	040151163040
	oct	104111126111
	oct	123111117116
	oct	040105170160
	oct	145143164145
	oct	144040167157
	oct	162144040151
	oct	163040125123
	oct	111116107040
	oct	157162040141
	oct	040160145162
	oct	151157144040
	oct	125123111116
	oct	107040156157
	oct	164040141154
	oct	154157167145
	oct	144040167151
	oct	164150040111
	oct	116111124111
	oct	101114040143
	oct	154141165163
	oct	145040151156
	oct	040104141164
	oct	141040104151
	oct	166151163151
	oct	157156040111
	oct	164145155040
	oct	151163040156
	oct	157164040141
	oct	156040060061
	oct	040157162040
	oct	067067040154
	oct	145166145154
	oct	040144141164
	oct	141055156141
	oct	155145040144
	oct	145146151156
	oct	145144040151
	oct	156040164150
	oct	145040114151
	oct	156153141147
	oct	145040123145
	oct	143164151157
	oct	156040124150
	oct	145040156165
	oct	155142145162
	oct	040157146040
	oct	125123111116
	oct	107040160141
	oct	162141155145
	oct	164145162163
	oct	040151163040
	oct	165156145161
	oct	165141154040
	oct	164157040164
	oct	150145040156
	oct	165155142145
	oct	162040163160
	oct	145143151146
	oct	151145144040
	oct	151156040164
	oct	150145040114
	oct	151156153141
	oct	147145040123
	oct	145143164151
	oct	157156040101
	oct	040160145162
	oct	151157144040
	oct	151163040145
	oct	170160145143
	oct	164145144040
	oct	142145146157
	oct	162145040164
	oct	150151163040
	oct	167157162144
	oct	040101040163
	oct	145143164151
	oct	157156040150
	oct	145141144145
	oct	162040151163
	oct	040145170160
	oct	145143164145
	oct	144040150145
	oct	162145040105
	oct	170160145143
	oct	164145144040
	oct	167157162144
	oct	040151163040
	oct	125123105040
	oct	105170160145
	oct	143164145144
	oct	040167157162
	oct	144040151163
	oct	040102105106
	oct	117122105054
	oct	040101106124
	oct	105122054040
	oct	106117122054
	oct	040157162040
	oct	122101116104
	oct	117115040105
	oct	170160145143
	oct	164145144040
	oct	167157162144
	oct	040151163040
	oct	111116120125
	oct	124054040117
	oct	125124120125
	oct	124054040111
	oct	055117054040
	oct	105130124105
	oct	116104054040
	oct	157162040141
	oct	040146151154
	oct	145055156141
	oct	155145040111
	oct	164145155040
	oct	150141163040
	oct	114101102105
	oct	114123040117
	oct	115111124124
	oct	105104040143
	oct	154141165163
	oct	145040105170
	oct	160145143164
	oct	145144040167
	oct	157162144040
	oct	151163040114
	oct	101102105114
	oct	040111164145
	oct	155040151163
	oct	040156157164
	oct	040141040144
	oct	141164141055
	oct	156141155145
	oct	040144145146
	oct	151156145144
	oct	040151156040
	oct	164150145040
	oct	122145160157
	oct	162164040123
	oct	145143164151
	oct	157156040111
	oct	164145155040
	oct	151163040156
	oct	157164040141
	oct	040160141162
	oct	141147162141
	oct	160150055156
	oct	141155145040
	oct	111164145155
	oct	040151163040
	oct	156157164040
	oct	164150145040
	oct	167157162144
	oct	040104105103
	oct	114101122101
	oct	124111126105
	oct	123040105116
	oct	104040103117
	oct	102117114040
	oct	163164141164
	oct	145155145156
	oct	164040151163
	oct	040155151163
	oct	160154141143
	oct	145144040111
	oct	164145155040
	oct	151163040156
	oct	157164040141
	oct	040160141162
	oct	141147162141
	oct	160150055156
	oct	141155145054
	oct	040163145143
	oct	164151157156
	oct	040150145141
	oct	144145162054
	oct	040166145162
	oct	142054040105
	oct	116104040104
	oct	105103114101
	oct	122101124111
	oct	126105123054
	oct	040157162040
	oct	105116104040
	oct	103117102117
	oct	114040111164
	oct	145155040151
	oct	163040156157
	oct	164040141040
	oct	160141162141
	oct	147162141160
	oct	150055156141
	oct	155145054040
	oct	163145143164
	oct	151157156040
	oct	150145141144
	oct	145162054040
	oct	166145162142
	oct	054040157162
	oct	040105116104
	oct	040103117102
	oct	117114040111
	oct	164145155040
	oct	151163040156
	oct	157164040141
	oct	040160141162
	oct	141147162141
	oct	160150055156
	oct	141155145054
	oct	040166145162
	oct	142054040157
	oct	162040105116
	oct	104040103117
	oct	102117114040
	oct	111164145155
	oct	040151163040
	oct	156157164040
	oct	141156040151
	oct	144145156164
	oct	151146151145
	oct	162040122145
	oct	143145151166
	oct	151156147040
	oct	146151145154
	oct	144040146157
	oct	162040164150
	oct	151163040151
	oct	164145155040
	oct	151163040141
	oct	154160150141
	oct	142145164151
	oct	143040111164
	oct	145155040151
	oct	163040156157
	oct	164040141040
	oct	155156145155
	oct	157156151143
	oct	055156141155
	oct	145040157162
	oct	040164150145
	oct	040167157162
	oct	144040104101
	oct	124105054040
	oct	104101131054
	oct	040124111115
	oct	105054040157
	oct	162040104101
	oct	131055117106
	oct	055127105105
	oct	113040111164
	oct	145155040151
	oct	163040156157
	oct	164040156165
	oct	155145162151
	oct	143040141156
	oct	144040154145
	oct	163163040164
	oct	150141156040
	oct	061071040144
	oct	151147151164
	oct	163040111164
	oct	145155040151
	oct	163040156157
	oct	164040156165
	oct	155145162151
	oct	143040141156
	oct	144040154145
	oct	163163040164
	oct	150141156040
	oct	061071040144
	oct	151147151164
	oct	163040157162
	oct	040164150145
	oct	040167157162
	oct	144040124117
	oct	040157162040
	oct	107111126111
	oct	116107040111
	oct	164145155040
	oct	151163040156
	oct	157164040156
	oct	165155145162
	oct	151143040157
	oct	162040156165
	oct	155145162151
	oct	143040145144
	oct	151164145144
	oct	040141156144
	oct	040154145163
	oct	163040164150
	oct	141156040061
	oct	071040144151
	oct	147151164163
	oct	040111164145
	oct	155040151163
	oct	040156157164
	oct	040141156040
	oct	141154164145
	oct	162141142154
	oct	145040160162
	oct	157143145144
	oct	165162145055
	oct	156141155145
	oct	040111164145
	oct	155040151163
	oct	040156157164
	oct	040164150145
	oct	040167157162
	oct	144040124117
	oct	040111164145
	oct	155040151163
	oct	040156157164
	oct	040141040156
	oct	157156156165
	oct	155145162151
	oct	143040154151
	oct	164145162141
	oct	154040157162
	oct	040151144145
	oct	156164151146
	oct	151145162040
	oct	111164145155
	oct	040144157145
	oct	163040156157
	oct	164040142145
	oct	147151156040
	oct	157156040141
	oct	040167157162
	oct	144040142157
	oct	165156144141
	oct	162171040111
	oct	164145155040
	oct	151163040156
	oct	157164040141
	oct	040156157156
	oct	055163157162
	oct	164040146151
	oct	154145055156
	oct	141155145040
	oct	105122122117
	oct	122063062054
	oct	040143157155
	oct	160151154145
	oct	162040142165
	oct	147040111164
	oct	145155040151
	oct	163040156157
	oct	164040164150
	oct	145040167157
	oct	162144040106
	oct	122117115054
	oct	040075054040
	oct	157162040105
	oct	121125101114
	oct	123040111164
	oct	145155040151
	oct	163040156157
	oct	164040164150
	oct	145040167157
	oct	162144040111
	oct	116120125124
	oct	040157162040
	oct	117125124120
	oct	125124040111
	oct	164145155040
	oct	151163040156
	oct	157164040141
	oct	156040157165
	oct	164160165164
	oct	040143144055
	oct	156141155145
	oct	040111164145
	oct	155040151163
	oct	040156157164
	oct	040141156040
	oct	151156160165
	oct	164040143144
	oct	055156141155
	oct	145040111164
	oct	145155040151
	oct	163040156157
	oct	164040164150
	oct	145040167157
	oct	162144040113
	oct	105131040111
	oct	164145155040
	oct	151163040156
	oct	157164040141
	oct	156040141154
	oct	160150141156
	oct	165155145162
	oct	151143040151
	oct	144145156164
	oct	151146151145
	oct	162040157162
	oct	040154151164
	oct	145162141154
	oct	040111164145
	oct	155040151163
	oct	040156157164
	oct	040141156040
	oct	151144145156
	oct	164151146151
	oct	145162040157
	oct	162040154151
	oct	164145162141
	oct	154040111164
	oct	145155040151
	oct	163040156157
	oct	164040166141
	oct	154151144040
	oct	144145166151
	oct	143145040105
	oct	170160145143
	oct	164145144040
	oct	167157162144
	oct	040151163040
	oct	111116124117
	oct	040157162040
	oct	102131040111
	oct	164145155040
	oct	151163040156
	oct	157164040141
	oct	040154141156
	oct	147165141147
	oct	145055156141
	oct	155145040111
	oct	164145155040
	oct	151163040156
	oct	157164040141
	oct	156040122104
	oct	040145156164
	oct	162171040111
	oct	164145155040
	oct	151163040156
	oct	157164040141
	oct	040160162157
	oct	143145144165
	oct	162145055156
	oct	141155145040
	oct	157162040164
	oct	150145040167
	oct	157162144040
	oct	104105120105
	oct	116104111116
	oct	107040111164
	oct	145155040151
	oct	163040156157
	oct	164040141156
	oct	040151156164
	oct	145147145162
	oct	040111164145
	oct	155040151163
	oct	040156157164
	oct	040141040144
	oct	145143154141
	oct	162141164151
	oct	166145040163
	oct	145143164151
	oct	157156055156
	oct	141155145040
	oct	111164145155
	oct	040151163040
	oct	156157164040
	oct	141040162145
	oct	160157162164
	oct	055156141155
	oct	145040157162
	oct	040164150145
	oct	040167157162
	oct	144040101114
	oct	114040111164
	oct	145155040151
	oct	163040156157
	oct	164040141156
	oct	040151144145
	oct	156164151146
	oct	151145162040
	oct	167151164150
	oct	040104111123
	oct	120114101131
	oct	040165163141
	oct	147145040111
	oct	164145155040
	oct	151163040156
	oct	157164040164
	oct	150145040167
	oct	157162144040
	oct	124101114114
	oct	131111116107
	oct	040157162040
	oct	122105120114
	oct	101103111116
	oct	107040111164
	oct	145155040151
	oct	163040156157
	oct	164040164150
	oct	145040167157
	oct	162144040106
	oct	117122040111
	oct	164145155040
	oct	151163040156
	oct	157164040164
	oct	150145040167
	oct	157162144040
	oct	101114114054
	oct	040114105101
	oct	104111116107
	oct	054040157162
	oct	040103110101
	oct	122101103124
	oct	105122123040
	oct	111164145155
	oct	040151163040
	oct	156157164040
	oct	141040156157
	oct	156156165155
	oct	145162151143
	oct	040154151164
	oct	145162141154
	oct	040157162040
	oct	141156040145
	oct	154145155145
	oct	156164141162
	oct	171040144141
	oct	164141040151
	oct	164145155040
	oct	167151164150
	oct	040104111123
	oct	120114101131
	oct	040165163141
	oct	147145040111
	oct	164145155040
	oct	151163040156
	oct	157164040164
	oct	150145040167
	oct	157162144040
	oct	101114114054
	oct	040114105101
	oct	104111116107
	oct	054040157162
	oct	040106111122
	oct	123124040111
	oct	164145155040
	oct	151163040156
	oct	157164040164
	oct	150145040167
	oct	157162144040
	oct	102131040111
	oct	164145155040
	oct	163151172145
	oct	040151163040
	oct	156157164040
	oct	145161165141
	oct	154040164157
	oct	040151164145
	oct	155040162145
	oct	160154141143
	oct	145144040122
	oct	145143145151
	oct	166151156147
	oct	040146151145
	oct	154144040156
	oct	157164040143
	oct	157155160141
	oct	164151142154
	oct	145040167151
	oct	164150040163
	oct	145156144151
	oct	156147040146
	oct	151145154144
	oct	040111164145
	oct	155040151163
	oct	040156157164
	oct	040164150145
	oct	040167157162
	oct	144040107111
	oct	126111116107
	oct	040111164145
	oct	155040151163
	oct	040156157164
	oct	040164150145
	oct	040167157162
	oct	144040111116
	oct	120125124054
	oct	040117125124
	oct	120125124054
	oct	040157162040
	oct	111055117040
	oct	106151154145
	oct	040151163040
	oct	156157164040
	oct	163151156147
	oct	154145040162
	oct	145145154057
	oct	165156151164
	oct	040167151164
	oct	150040163145
	oct	161165145156
	oct	164151141154
	oct	040157162147
	oct	141156151172
	oct	141164151157
	oct	156040111164
	oct	145155040151
	oct	163040156157
	oct	164040141040
	oct	156157156055
	oct	163157162164
	oct	040155141163
	oct	163040163164
	oct	157162141147
	oct	145040146151
	oct	154145040111
	oct	164145155040
	oct	151163040156
	oct	157164040141
	oct	040160162157
	oct	143145144165
	oct	162145055156
	oct	141155145040
	oct	111164145155
	oct	040151163040
	oct	156157164040
	oct	164150145040
	oct	167157162144
	oct	040124111115
	oct	105123040111
	oct	164145155040
	oct	151163040156
	oct	157164040156
	oct	165155145162
	oct	151143040157
	oct	162040141156
	oct	040151156144
	oct	145170055156
	oct	141155145040
	oct	111164145155
	oct	040151163040
	oct	156157164040
	oct	164150145040
	oct	167157162144
	oct	040106122117
	oct	115040111164
	oct	145155040151
	oct	163040156157
	oct	164040164150
	oct	145040167157
	oct	162144040125
	oct	116124111114
	oct	040111164145
	oct	155040151163
	oct	040156157164
	oct	040141040163
	oct	145143164151
	oct	157156040156
	oct	141155145111
	oct	164145155040
	oct	151163040156
	oct	157164040141
	oct	156040123101
	oct	040156141155
	oct	145040157162
	oct	040141040162
	oct	145143157162
	oct	144040156141
	oct	155145040106
	oct	151154145040
	oct	155165163164
	oct	040156157164
	oct	040150141166
	oct	145040166141
	oct	162151141142
	oct	154145040163
	oct	151172145040
	oct	162145143157
	oct	162144163040
	oct	111164145155
	oct	040151163040
	oct	163141155145
	oct	040141162145
	oct	141040141163
	oct	040146151154
	oct	145055156141
	oct	155145040111
	oct	164145155040
	oct	151163040156
	oct	157164040164
	oct	150145040167
	oct	157162144040
	oct	115105123123
	oct	101107105040
	oct	157162040123
	oct	105107115105
	oct	116124040111
	oct	164145155040
	oct	151163040156
	oct	157164040164
	oct	150145040167
	oct	157162144040
	oct	111116124117
	oct	040111164145
	oct	155040151163
	oct	040156157164
	oct	040141040162
	oct	145143157162
	oct	144040156141
	oct	155145040151
	oct	156040141163
	oct	163157143151
	oct	141164145144
	oct	040146151154
	oct	145040111164
	oct	145155040151
	oct	163040156157
	oct	164040167151
	oct	164150151156
	oct	040163157162
	oct	164040151156
	oct	160165164040
	oct	160162157143
	oct	145144165162
	oct	145040162141
	oct	156147145040
	oct	111164145155
	oct	040151163040
	oct	156157164040
	oct	167151164150
	oct	151156040163
	oct	157162164057
	oct	155145162147
	oct	145040157165
	oct	164160165164
	oct	040160162157
	oct	143145144165
	oct	162145040162
	oct	141156147145
	oct	040111164145
	oct	155040151163
	oct	040156157164
	oct	040141156040
	oct	141163163157
	oct	143151141164
	oct	145144040163
	oct	157162164040
	oct	146151154145
	oct	055156141155
	oct	145040111164
	oct	145155040151
	oct	163040156157
	oct	164040141156
	oct	040151144145
	oct	156164151146
	oct	151145162040
	oct	157162040164
	oct	150145040167
	oct	157162144040
	oct	101114114040
	oct	111164145155
	oct	040151163040
	oct	156157164040
	oct	141156040151
	oct	144145156164
	oct	151146151145
	oct	162040157162
	oct	040151156144
	oct	145170055156
	oct	141155145040
	oct	111164145155
	oct	040151163040
	oct	156157164040
	oct	164150145040
	oct	167157162144
	oct	040127110105
	oct	116040111164
	oct	145155040151
	oct	163040156157
	oct	164040141040
	oct	160157163151
	oct	164151166145
	oct	040151156164
	oct	145147145162
	oct	040157162040
	oct	141156040151
	oct	156144145170
	oct	055156141155
	oct	145040111164
	oct	145155040151
	oct	163040156157
	oct	164040156157
	oct	156055163165
	oct	142163143162
	oct	151160164145
	oct	144040141156
	oct	144040156157
	oct	156055151156
	oct	144145170145
	oct	144040167151
	oct	164150040142
	oct	157164150040
	oct	117103103125
	oct	122123040141
	oct	156144040111
	oct	116104105130
	oct	105104040102
	oct	131040143154
	oct	141165163145
	oct	040111164145
	oct	155040144157
	oct	145163040156
	oct	157164040150
	oct	141166145040
	oct	113105131040
	oct	111123040143
	oct	154141165163
	oct	145040111164
	oct	145155040151
	oct	163040156157
	oct	164040141040
	oct	155141163163
	oct	040163164157
	oct	162141147145
	oct	040162141156
	oct	144157155040
	oct	141143143145
	oct	163163040146
	oct	151154145040
	oct	111164145155
	oct	040151163040
	oct	156157164040
	oct	141156040151
	oct	144145156164
	oct	151146151145
	oct	162040157162
	oct	040164150145
	oct	040167157162
	oct	144040105123
	oct	111054040105
	oct	115111054040
	oct	157162040105
	oct	124111040111
	oct	164145155040
	oct	151163040156
	oct	157164040141
	oct	156040151156
	oct	164145147145
	oct	162054040151
	oct	144145156164
	oct	151146151145
	oct	162054040155
	oct	156145155157
	oct	156151143055
	oct	156141155145
	oct	054040157162
	oct	040164150145
	oct	040167157162
	oct	144040120101
	oct	107105040111
	oct	164145155040
	oct	151163040156
	oct	157164040164
	oct	150145040167
	oct	157162144040
	oct	125120054040
	oct	104117127116
	oct	040157162040
	oct	124117040111
	oct	164145155040
	oct	151163040156
	oct	157164040141
	oct	156040151156
	oct	144145170055
	oct	156141155145
	oct	040157162040
	oct	141040160157
	oct	163151164151
	oct	166145040151
	oct	156164145147
	oct	145162040111
	oct	164145155040
	oct	151163040156
	oct	157164040141
	oct	156040151156
	oct	144145170040
	oct	144141164141
	oct	040151164145
	oct	155040157162
	oct	040141156040
	oct	151156164145
	oct	147145162040
	oct	111164145155
	oct	040151163040
	oct	156157164040
	oct	141156040151
	oct	156164145147
	oct	145162040111
	oct	164145155040
	oct	151163040156
	oct	157164040141
	oct	040163157162
	oct	164040146151
	oct	154145055156
	oct	141155145040
	oct	111164145155
	oct	040151163040
	oct	156157164040
	oct	141040163157
	oct	162164040146
	oct	151154145055
	oct	156141155145
	oct	040111164145
	oct	155040151163
	oct	040156157164
	oct	040141040144
	oct	141164141055
	oct	156141155145
	oct	040151156040
	oct	141163163157
	oct	143151141164
	oct	145144040146
	oct	151154145040
	oct	111164145155
	oct	040151163040
	oct	156157164040
	oct	141040144141
	oct	164141055156
	oct	141155145040
	oct	157162040164
	oct	150145040167
	oct	157162144040
	oct	117116054040
	oct	104105123103
	oct	105116104111
	oct	116107054040
	oct	101123103105
	oct	116104111116
	oct	107054040111
	oct	116120125124
	oct	054040157162
	oct	040125123111
	oct	116107040111
	oct	164145155040
	oct	151163040156
	oct	157164040164
	oct	150145040167
	oct	157162144040
	oct	117125124120
	oct	125124040157
	oct	162040107111
	oct	126111116107
	oct	040111164145
	oct	155040144157
	oct	145163040156
	oct	157164040150
	oct	141166145040
	oct	104111123120
	oct	114101131040
	oct	165163141147
	oct	145040111164
	oct	145155040151
	oct	163040156157
	oct	164040141156
	oct	040151144145
	oct	156164151146
	oct	151145162054
	oct	040156157156
	oct	156165155145
	oct	162151143040
	oct	154151164145
	oct	162141154054
	oct	040157162040
	oct	164150145040
	oct	167157162144
	oct	040104105114
	oct	111115111124
	oct	105104040111
	oct	164145155040
	oct	151163040156
	oct	157164040141
	oct	156040151144
	oct	145156164151
	oct	146151145054
	oct	040156157156
	oct	156165155145
	oct	162151143040
	oct	154151164145
	oct	162141154054
	oct	040157162040
	oct	164150145040
	oct	167157162144
	oct	040123111132
	oct	105040111164
	oct	145155040151
	oct	163040156157
	oct	164040146151
	oct	170145144040
	oct	154145156147
	oct	164150040167
	oct	151164150040
	oct	104111123120
	oct	114101131040
	oct	165163141147
	oct	145040111164
	oct	145155040151
	oct	163040156157
	oct	164040141156
	oct	040151144145
	oct	156164151146
	oct	151145162054
	oct	040156157156
	oct	156165155145
	oct	162151143040
	oct	154151164145
	oct	162141154054
	oct	040157162040
	oct	164150145040
	oct	167157162144
	oct	040111116124
	oct	117040111164
	oct	145155040151
	oct	163040156157
	oct	164040141040
	oct	156157156055
	oct	145144151164
	oct	145144040145
	oct	154145155145
	oct	156164141162
	oct	171040151144
	oct	145156164151
	oct	146151145162
	oct	040167151164
	oct	150040104111
	oct	123120114101
	oct	131040165163
	oct	141147145040
	oct	111164145155
	oct	040151163040
	oct	156157164040
	oct	141156040145
	oct	154145155145
	oct	156164141162
	oct	171040156165
	oct	155145162151
	oct	143040151156
	oct	164145147145
	oct	162040144141
	oct	164141040151
	oct	164145155040
	oct	111164145155
	oct	040151163040
	oct	156157164040
	oct	141156040151
	oct	144145156164
	oct	151146151145
	oct	162040157162
	oct	040156165155
	oct	145162151143
	oct	040154151164
	oct	145162141154
	oct	040111164145
	oct	155040151163
	oct	040156157164
	oct	040141156040
	oct	151144145156
	oct	164151146151
	oct	145162054040
	oct	156165155145
	oct	162151143040
	oct	154151164145
	oct	162141154054
	oct	040157162040
	oct	164150145040
	oct	167157162144
	oct	040106122117
	oct	115040111164
	oct	145155040151
	oct	163040156157
	oct	164040141040
	oct	146151154145
	oct	055156141155
	oct	145040157162
	oct	040162145160
	oct	157162164055
	oct	156141155145
	oct	040111164145
	oct	155040151163
	oct	040156157164
	oct	040141154160
	oct	150141156165
	oct	155145162151
	oct	143040111164
	oct	145155040151
	oct	163040156157
	oct	164040164150
	oct	145040167157
	oct	162144040111
	oct	116124117040
	oct	157162040104
	oct	105114111115
	oct	111124105104
	oct	040111164145
	oct	155040155165
	oct	163164040156
	oct	157164040142
	oct	145040165163
	oct	145144040167
	oct	151164150157
	oct	165164040104
	oct	105114111115
	oct	111124105104
	oct	040111164145
	oct	155040151163
	oct	040156157164
	oct	040141040162
	oct	145143157162
	oct	144040156141
	oct	155145040151
	oct	156040156157
	oct	156055163157
	oct	162164040146
	oct	151154145040
	oct	111164145155
	oct	040151163040
	oct	156157164040
	oct	141156040151
	oct	144145156164
	oct	151146151145
	oct	162054040151
	oct	156164145147
	oct	145162054040
	oct	157162040155
	oct	156145155157
	oct	156151143055
	oct	156141155145
	oct	040124150145
	oct	040114111116
	oct	101107105040
	oct	143154141165
	oct	163145040151
	oct	163040155151
	oct	163163151156
	oct	147040151156
	oct	040164150145
	oct	040141163163
	oct	157143151141
	oct	164145144040
	oct	146151154145
	oct	040111116126
	oct	101114111104
	oct	040113105131
	oct	040157160164
	oct	151157156040
	oct	145170160145
	oct	143164145144
	oct	040114145146
	oct	164040160141
	oct	162145156164
	oct	150145163151
	oct	163040145170
	oct	160145143164
	oct	145144040150
	oct	145162145040
	oct	122151147150
	oct	164040160141
	oct	162145156164
	oct	150145163151
	oct	163040145170
	oct	160145143164
	oct	145144040150
	oct	145162145040
	oct	111164145155
	oct	040151163040
	oct	156157164040
	oct	141040166141
	oct	154151144040
	oct	163165142163
	oct	143162151160
	oct	164040111164
	oct	145155040163
	oct	150157165154
	oct	144040142145
	oct	040151156144
	oct	145170055156
	oct	141155145040
	oct	111164145155
	oct	040151163040
	oct	156157164040
	oct	141156040151
	oct	156144145170
	oct	055156141155
	oct	145040157162
	oct	040156157164
	oct	040143157162
	oct	162145143164
	oct	040151156144
	oct	145170055156
	oct	141155145040
	oct	111164145155
	oct	040151163040
	oct	156157164040
	oct	141156040165
	oct	156163151147
	oct	156145144040
	oct	151156164145
	oct	147145162040
	oct	104141164141
	oct	055156141155
	oct	145040163165
	oct	142163143162
	oct	151160164040
	oct	163150157165
	oct	154144040156
	oct	157164040142
	oct	145040155157
	oct	144151146151
	oct	145144040105
	oct	170160145143
	oct	164145144040
	oct	167157162144
	oct	040151163040
	oct	101114114054
	oct	040114105101
	oct	104111116107
	oct	040157162040
	oct	125116124111
	oct	114040111164
	oct	145155040151
	oct	163040156157
	oct	164040141040
	oct	157156145040
	oct	143150141162
	oct	141143164145
	oct	162040154151
	oct	164145162141
	oct	154040157162
	oct	040141156040
	oct	151144145156
	oct	164151146151
	oct	145162040167
	oct	151164150040
	oct	104111123120
	oct	114101131040
	oct	165163141147
	oct	145040141156
	oct	144040143157
	oct	156163151163
	oct	164145156164
	oct	040143154141
	oct	163163040105
	oct	170160145143
	oct	164145144040
	oct	167157162144
	oct	040151163040
	oct	101114114054
	oct	040114105101
	oct	104111116107
	oct	054040125116
	oct	124111114040
	oct	157162040106
	oct	111122123124
	oct	040105170160
	oct	145143164145
	oct	144040167157
	oct	162144040151
	oct	163040106111
	oct	122123124040
	oct	111164145155
	oct	040151163040
	oct	156157164040
	oct	145154145155
	oct	145156164141
	oct	162171040157
	oct	162040162145
	oct	144145146151
	oct	156145144040
	oct	105170160145
	oct	143164145144
	oct	040167157162
	oct	144040151163
	oct	040124110122
	oct	117125107110
	oct	040157162040
	oct	124110122125
	oct	040124150151
	oct	163040160157
	oct	151156164040
	oct	143141156040
	oct	156145166145
	oct	162040142145
	oct	040162145141
	oct	143150145144
	oct	040144165162
	oct	151156147040
	oct	145170145143
	oct	165164151157
	oct	156040124150
	oct	151163040163
	oct	164141164145
	oct	155145156164
	oct	040143141156
	oct	040156145166
	oct	145162040142
	oct	145040162145
	oct	141143150145
	oct	144040144165
	oct	162151156147
	oct	040145170145
	oct	143165164151
	oct	157156040144
	oct	165145040164
	oct	157040141040
	oct	160162145143
	oct	145144151156
	oct	147040165156
	oct	143157156144
	oct	151164151157
	oct	156141154040
	oct	164162141156
	oct	163146145162
	oct	040111164145
	oct	155040151163
	oct	040156157164
	oct	040164150145
	oct	040167157162
	oct	144040122125
	oct	116040157162
	oct	040141040154
	oct	151164145162
	oct	141154040111
	oct	164145155040
	oct	151163040156
	oct	157164040141
	oct	156040151155
	oct	160145162141
	oct	164151166145
	oct	040166145162
	oct	142040105170
	oct	160145143164
	oct	145144040167
	oct	157162144040
	oct	151163040123
	oct	105103124111
	oct	117116040050
	oct	143157155160
	oct	151154145162
	oct	040145162162
	oct	157162051040
	oct	120141162141
	oct	147162141160
	oct	150055156141
	oct	155145040144
	oct	145146151156
	oct	151164151157
	oct	156040155151
	oct	163163151156
	oct	147040120162
	oct	157143145144
	oct	165162145040
	oct	144145146151
	oct	156151164151
	oct	157156040155
	oct	151163163151
	oct	156147040115
	oct	151163163151
	oct	156147040163
	oct	145143164151
	oct	157156040150
	oct	145141144145
	oct	162040141164
	oct	040142145147
	oct	151156156151
	oct	156147040157
	oct	146040120162
	oct	157143145144
	oct	165162145040
	oct	104151166151
	oct	163151157156
	oct	040101040166
	oct	145162142040
	oct	151163040162
	oct	145161165151
	oct	162145144040
	oct	150145162145
	oct	040123145156
	oct	164145156143
	oct	145040155165
	oct	163164040142
	oct	145040151155
	oct	160145162141
	oct	164151166145
	oct	054040164150
	oct	151163040151
	oct	164145155040
	oct	155141153145
	oct	163040151164
	oct	040143157156
	oct	144151164151
	oct	157156141154
	oct	040105170160
	oct	145143164145
	oct	144040167157
	oct	162144040151
	oct	163040117126
	oct	105122106114
	oct	117127040101
	oct	040156165155
	oct	145162151143
	oct	055145144151
	oct	164145144040
	oct	163145156144
	oct	151156147040
	oct	146151145154
	oct	144040151163
	oct	040156157164
	oct	040141154154
	oct	157167145144
	oct	040167151164
	oct	150040141156
	oct	040141154160
	oct	150141142145
	oct	164151143040
	oct	162145143145
	oct	151166151156
	oct	147040146151
	oct	145154144040
	oct	116117040104
	oct	101124101040
	oct	117120124111
	oct	117116040145
	oct	170160145143
	oct	164145144040
	oct	105170160145
	oct	143164145144
	oct	040167157162
	oct	144040151163
	oct	040113105131
	oct	040101124040
	oct	105116104040
	oct	157160164151
	oct	157156040145
	oct	170160145143
	oct	164145144040
	oct	124150145040
	oct	104145142165
	oct	147040123145
	oct	143164151157
	oct	156040155165
	oct	163164040151
	oct	155155145144
	oct	151141164145
	oct	154171040146
	oct	157154154157
	oct	167040164150
	oct	145040144145
	oct	143154141162
	oct	141164151166
	oct	145163040111
	oct	164145155040
	oct	151163040156
	oct	157164040141
	oct	040143144055
	oct	156141155145
	oct	054040151144
	oct	145156164151
	oct	146151145162
	oct	054040160162
	oct	157143145144
	oct	165162145055
	oct	156141155145
	oct	054040146151
	oct	154145055156
	oct	141155145040
	oct	157162040164
	oct	150145040167
	oct	157162144040
	oct	101114114040
	oct	120157163163
	oct	151142154145
	oct	040162151147
	oct	150164040164
	oct	162165156143
	oct	141164151157
	oct	156040157156
	oct	040160162145
	oct	143145144151
	oct	156147040156
	oct	141155145054
	oct	040146151154
	oct	145055156141
	oct	155145054040
	oct	157162040101
	oct	114114040117
	oct	116040123111
	oct	132105040105
	oct	122122117122
	oct	040157160164
	oct	151157156040
	oct	145170160145
	oct	143164145144
	oct	040105170160
	oct	145143164145
	oct	144040167157
	oct	162144040151
	oct	163040116117
	oct	040157162040
	oct	114117103113
	oct	040101040143
	oct	157156144151
	oct	164151157156
	oct	141154040163
	oct	164141164145
	oct	155145156164
	oct	040155141171
	oct	040156157164
	oct	040157143143
	oct	165162040150
	oct	145162145040
	oct	124150151163
	oct	040166145162
	oct	142040155165
	oct	163164040142
	oct	145040160162
	oct	145143145144
	oct	145144040142
	oct	171040160162
	oct	157143145144
	oct	165162145040
	oct	144145146151
	oct	156151164151
	oct	157156056040
	oct	117166145162
	oct	154141160160
	oct	151156147040
	oct	155141171040
	oct	157143143165
	oct	162040142145
	oct	164167145145
	oct	156040164150
	oct	151163040162
	oct	145143145151
	oct	166151156147
	oct	040151164145
	oct	155040141156
	oct	144040164150
	oct	145040163145
	oct	156144151156
	oct	147040151164
	oct	145155040101
	oct	163163151147
	oct	156155145156
	oct	164040164157
	oct	040164150151
	oct	163040151144
	oct	145156164151
	oct	146151145162
	oct	040162145163
	oct	165154164163
	oct	040151156040
	oct	162151147150
	oct	164040164162
	oct	165156143141
	oct	164151157156
	oct	040101040156
	oct	165155145162
	oct	151143040156
	oct	157156055151
	oct	156164145147
	oct	145162040163
	oct	145156144151
	oct	156147040146
	oct	151145154144
	oct	040151163040
	oct	156157164040
	oct	141154154157
	oct	167145144040
	oct	167151164150
	oct	040141156040
	oct	141154160150
	oct	141156165155
	oct	145162151143
	oct	040162145143
	oct	145151166151
	oct	156147040146
	oct	151145154144
	oct	040101163163
	oct	151147156155
	oct	145156164040
	oct	164157040164
	oct	150151163040
	oct	151144145156
	oct	164151146151
	oct	145162040162
	oct	145163165154
	oct	164163040151
	oct	156040154157
	oct	163163040157
	oct	146040163151
	oct	147156040101
	oct	040156165155
	oct	145162151143
	oct	040163145156
	oct	144151156147
	oct	040146151145
	oct	154144040151
	oct	163040156157
	oct	164040141154
	oct	154157167145
	oct	144040167151
	oct	164150040141
	oct	156040141154
	oct	160150141142
	oct	145164151143
	oct	040162145143
	oct	145151166151
	oct	156147040146
	oct	151145154144
	oct	040101156040
	oct	141154160150
	oct	141142145164
	oct	151143040163
	oct	145156144151
	oct	156147040146
	oct	151145154144
	oct	040151163040
	oct	156157164040
	oct	141154154157
	oct	167145144040
	oct	167151164150
	oct	040141040156
	oct	165155145162
	oct	151143040162
	oct	145143145151
	oct	166151156147
	oct	040146151145
	oct	154144040101
	oct	156040141154
	oct	160150141156
	oct	165155145162
	oct	151143040145
	oct	144151164145
	oct	144040163145
	oct	156144151156
	oct	147040146151
	oct	145154144040
	oct	151163040156
	oct	157164040141
	oct	154154157167
	oct	145144040167
	oct	151164150040
	oct	141040156165
	oct	155145162151
	oct	143040162145
	oct	143145151166
	oct	151156147040
	oct	146151145154
	oct	144040101040
	oct	156165155145
	oct	162151143040
	oct	145144151164
	oct	145144040163
	oct	145156144151
	oct	156147040146
	oct	151145154144
	oct	040151163040
	oct	156157164040
	oct	141154154157
	oct	167145144040
	oct	167151164150
	oct	040141040156
	oct	165155145162
	oct	151143040162
	oct	145143145151
	oct	166151156147
	oct	040146151145
	oct	154144040120
	oct	157163163151
	oct	142154145040
	oct	162151147150
	oct	164040164162
	oct	165156143141
	oct	164151157156
	oct	040101163163
	oct	151147156155
	oct	145156164040
	oct	164157040164
	oct	150151163040
	oct	151144145156
	oct	164151146151
	oct	145162040155
	oct	141171040162
	oct	145163165154
	oct	164040151156
	oct	040154157163
	oct	163040157146
	oct	040163151147
	oct	156151146151
	oct	143141156164
	oct	040144151147
	oct	151164163040
	oct	105170160145
	oct	143164145144
	oct	040167157162
	oct	144040151163
	oct	040116117040
	oct	105170160145
	oct	143164145144
	oct	040167157162
	oct	144040151163
	oct	040122105127
	oct	111116104040
	oct	111164145155
	oct	040151163040
	oct	156157164040
	oct	160141162164
	oct	040157146040
	oct	141040143157
	oct	156144151164
	oct	151157156040
	oct	105170160145
	oct	143164145144
	oct	040167157162
	oct	144040151163
	oct	040111116124
	oct	117054040105
	oct	116104040157
	oct	162040111116
	oct	126101114111
	oct	104040120162
	oct	145143145144
	oct	151156147040
	oct	146151154145
	oct	055156141155
	oct	145040151163
	oct	040156157164
	oct	040141040163
	oct	145161165145
	oct	156164151141
	oct	154040146151
	oct	154145040120
	oct	162145143145
	oct	144151156147
	oct	040146151154
	oct	145055156141
	oct	155145040151
	oct	163040156157
	oct	164040141040
	oct	162141156144
	oct	157155040141
	oct	143143145163
	oct	163040146151
	oct	154145040105
	oct	170160145143
	oct	164145144040
	oct	167157162144
	oct	040151163040
	oct	111116124117
	oct	040157162040
	oct	105116104040
	oct	123171156164
	oct	141170040143
	oct	150145143153
	oct	151156147040
	oct	144151163143
	oct	157156164151
	oct	156165145144
	oct	040123171156
	oct	164141170040
	oct	143150145143
	oct	153151156147
	oct	040162145163
	oct	165155145144
	oct	040125123105
	oct	040156157164
	oct	040160145162
	oct	155151164164
	oct	145144040151
	oct	156040156157
	oct	156055144145
	oct	143154141162
	oct	141164151166
	oct	145040163145
	oct	143164151157
	oct	156040104141
	oct	164141055156
	oct	141155145163
	oct	040141156144
	oct	040151156144
	oct	145170055156
	oct	141155145163
	oct	040156157164
	oct	040141154154
	oct	157167145144
	oct	040164157147
	oct	145164150145
	oct	162040141163
	oct	040163165142
	oct	163143162151
	oct	160164163040
	oct	111155160145
	oct	162141164151
	oct	166145040166
	oct	145162142040
	oct	157162040156
	oct	145170164040
	oct	163145156164
	oct	145156143145
	oct	040145170160
	oct	145143164145
	oct	144040150145
	oct	162145040120
	oct	162157143145
	oct	144165162145
	oct	040144151166
	oct	151163151157
	oct	156040156157
	oct	164040146157
	oct	165156144040
	oct	106151154145
	oct	040151163040
	oct	156157164040
	oct	151156144145
	oct	170145144040
	oct	101124040105
	oct	116104055117
	oct	106055120101
	oct	107105040157
	oct	160164151157
	oct	156040145170
	oct	160145143164
	oct	145144040105
	oct	170160145143
	oct	164145144040
	oct	167157162144
	oct	040151163040
	oct	146151147165
	oct	162141164151
	oct	166145040143
	oct	157156163164
	oct	141156164040
	oct	157162040141
	oct	154160150141
	oct	156165155145
	oct	162151143040
	oct	154151164145
	oct	162141154040
	oct	111164145155
	oct	040151163040
	oct	156157164040
	oct	141156040141
	oct	154164145162
	oct	141142154145
	oct	040151144145
	oct	156164151146
	oct	151145162040
	oct	105170160145
	oct	143164145144
	oct	040167157162
	oct	144040151163
	oct	040120117111
	oct	116124105122
	oct	040111154154
	oct	145147141154
	oct	040162145143
	oct	145151166151
	oct	156147040146
	oct	151145154144
	oct	040151156040
	oct	141040163145
	oct	164040163164
	oct	141164145155
	oct	145156164040
	oct	105170160145
	oct	143164145144
	oct	040167157162
	oct	144040151163
	oct	040124117054
	oct	040125120054
	oct	040104117127
	oct	116040157162
	oct	040141156040
	oct	151156144145
	oct	170055156141
	oct	155145040105
	oct	170160145143
	oct	164145144040
	oct	167157162144
	oct	040151163040
	oct	124117040157
	oct	162040141156
	oct	040151156144
	oct	145170055156
	oct	141155145040
	oct	111154154145
	oct	147141154040
	oct	163145156144
	oct	151156147040
	oct	146151145154
	oct	144040151156
	oct	040141040163
	oct	145164040163
	oct	164141164145
	oct	155145156164
	oct	040111164145
	oct	155040151163
	oct	040156157164
	oct	040141156040
	oct	151156164145
	oct	147145162040
	oct	157162040141
	oct	156040145154
	oct	145155145156
	oct	164141162171
	oct	040151164145
	oct	155040144145
	oct	163143162151
	oct	142145144040
	oct	141163040141
	oct	040156165155
	oct	145162151143
	oct	040151156164
	oct	145147145162
	oct	040105170160
	oct	145143164145
	oct	144040167157
	oct	162144040151
	oct	163040127110
	oct	105116054040
	oct	101124040157
	oct	162040105116
	oct	104040111164
	oct	145155040151
	oct	163040156157
	oct	164040145154
	oct	145155145156
	oct	164141162171
	oct	040141154160
	oct	150141142145
	oct	164151143054
	oct	040141154160
	oct	150141156165
	oct	155145162151
	oct	143054040157
	oct	162040156165
	oct	155145162151
	oct	143040145144
	oct	151164145144
	oct	040157162040
	oct	141040147162
	oct	157165160040
	oct	151164145155
	oct	040111164145
	oct	155040151163
	oct	040156157164
	oct	040141040146
	oct	151147165162
	oct	141164151166
	oct	145040143157
	oct	156163164141
	oct	156164054040
	oct	156157156156
	oct	165155145162
	oct	151143040154
	oct	151164145162
	oct	141154040157
	oct	162040151144
	oct	145156164151
	oct	146151145162
	oct	040123165142
	oct	162157165164
	oct	151156145040
	oct	163164141143
	oct	153040157166
	oct	145162146154
	oct	157167040055
	oct	040156145163
	oct	164151156147
	oct	040154151155
	oct	151164040145
	oct	170143145145
	oct	144145144040
	oct	111164145155
	oct	040151163040
	oct	156157164040
	oct	141040163145
	oct	161165145156
	oct	164151141154
	oct	040146151154
	oct	145055156141
	oct	155145040111
	oct	164145155040
	oct	151163040156
	oct	157164040141
	oct	040144141164
	oct	141055156141
	oct	155145040106
	oct	151154145040
	oct	144157145163
	oct	040156157164
	oct	040150141166
	oct	145040163145
	oct	161165145156
	oct	164151141154
	oct	040157162040
	oct	144171156141
	oct	155151143040
	oct	141143143145
	oct	163163040111
	oct	164145155040
	oct	151163040156
	oct	157164040141
	oct	040157156145
	oct	040143150141
	oct	162141143164
	oct	145162040151
	oct	156164145147
	oct	145162040167
	oct	151164150157
	oct	165164040141
	oct	156040157160
	oct	145162141164
	oct	151157156141
	oct	154040163151
	oct	147156040101
	oct	040162145146
	oct	145162145156
	oct	143145040164
	oct	157040141040
	oct	144145143154
	oct	141162141164
	oct	151166145040
	oct	160162157143
	oct	145144165162
	oct	145055156141
	oct	155145040145
	oct	170151163164
	oct	163040151156
	oct	040164150145
	oct	040156157156
	oct	055144145143
	oct	154141162141
	oct	164151166145
	oct	040160157162
	oct	164151157156
	oct	040157146040
	oct	164150145040
	oct	160162157147
	oct	162141155040
	oct	105170160145
	oct	143164145144
	oct	040167157162
	oct	144040151163
	oct	040101123103
	oct	105116104111
	oct	116107054040
	oct	104105123103
	oct	105116104111
	oct	116107040157
	oct	162040125123
	oct	111116107040
	oct	105170160145
	oct	143164145144
	oct	040167157162
	oct	144040151163
	oct	040122105115
	oct	117126101114
	oct	040105170160
	oct	145143164145
	oct	144040167157
	oct	162144040151
	oct	163040141156
	oct	040157165164
	oct	160165164040
	oct	143144055156
	oct	141155145040
	oct	101040103114
	oct	117123105040
	oct	151163040155
	oct	141144145040
	oct	164157040141
	oct	040146151154
	oct	145040156157
	oct	164040157160
	oct	145156145144
	oct	040142171040
	oct	164150151163
	oct	040160162157
	oct	147162141155
	oct	040101040146
	oct	151154145040
	oct	151163040157
	oct	160145156145
	oct	144040142171
	oct	040164150151
	oct	163040160162
	oct	157147162141
	oct	155054040142
	oct	165164040156
	oct	145166145162
	oct	040143154157
	oct	163145144040
	oct	101040104105
	oct	114105124105
	oct	040151163040
	oct	155141144145
	oct	040164157040
	oct	141040146151
	oct	154145040156
	oct	157164040157
	oct	160145156145
	oct	144040142171
	oct	040164150151
	oct	163040160162
	oct	157147162141
	oct	155040101040
	oct	122105101104
	oct	040151163040
	oct	155141144145
	oct	040164157040
	oct	141040146151
	oct	154145040156
	oct	157164040157
	oct	160145156145
	oct	144040142171
	oct	040164150151
	oct	163040160162
	oct	157147162141
	oct	155040101040
	oct	122105127122
	oct	111124105040
	oct	151163040155
	oct	141144145040
	oct	164157040141
	oct	040146151154
	oct	145040156157
	oct	164040157160
	oct	145156145144
	oct	040142171040
	oct	164150151163
	oct	040160162157
	oct	147162141155
	oct	040101040127
	oct	122111124105
	oct	040151163040
	oct	155141144145
	oct	040164157040
	oct	141040146151
	oct	154145040156
	oct	157164040157
	oct	160145156145
	oct	144040142171
	oct	040164150151
	oct	163040160162
	oct	157147162141
	oct	155040101040
	oct	122105101104
	oct	040151163040
	oct	155141144145
	oct	040164157040
	oct	141040146151
	oct	154145040156
	oct	157164040157
	oct	160145156145
	oct	144040142171
	oct	040164150151
	oct	163040160162
	oct	157147162141
	oct	155040101040
	oct	122105101104
	oct	040151163040
	oct	155141144145
	oct	040164157040
	oct	141040146151
	oct	154145040156
	oct	157164040157
	oct	160145156145
	oct	144040142171
	oct	040164150151
	oct	163040160162
	oct	157147162141
	oct	155040101040
	oct	123124101122
	oct	124040151163
	oct	040155141144
	oct	145040164157
	oct	040141040146
	oct	151154145040
	oct	156157164040
	oct	157160145156
	oct	145144040142
	oct	171040164150
	oct	151163040160
	oct	162157147162
	oct	141155040122
	oct	145154141164
	oct	151157156040
	oct	145170160145
	oct	143164145144
	oct	040150145162
	oct	145040111154
	oct	154145147141
	oct	154040157160
	oct	145162141156
	oct	144040146157
	oct	162040163151
	oct	147156040143
	oct	157156144151
	oct	164151157156
	oct	040164145163
	oct	164040116145
	oct	170164040151
	oct	164145155040
	oct	151163040156
	oct	157164040141
	oct	040122145154
	oct	141164151157
	oct	156054040123
	oct	151147156054
	oct	040157162040
	oct	103154141163
	oct	163040143157
	oct	156144151164
	oct	151157156040
	oct	122151147150
	oct	164040160141
	oct	162145156164
	oct	150163151163
	oct	040145170160
	oct	145143164145
	oct	144040150145
	oct	162145040124
	oct	150145040143
	oct	157162162145
	oct	163160157156
	oct	144151156147
	oct	040154145146
	oct	164040160141
	oct	162145156164
	oct	150145163151
	oct	163040151163
	oct	040155151163
	oct	163151156147
	oct	040111154154
	oct	145147141154
	oct	040157160145
	oct	162141156144
	oct	040146157162
	oct	040141154160
	oct	150141142145
	oct	164151143040
	oct	143154141163
	oct	163040143157
	oct	156144151164
	oct	151157156040
	oct	164145163164
	oct	040143144055
	oct	156141155145
	oct	040145170160
	oct	145143164145
	oct	144040150145
	oct	162145040111
	oct	154154145147
	oct	141154040157
	oct	160145162141
	oct	156144040146
	oct	157162040156
	oct	165155145162
	oct	151143040143
	oct	154141163163
	oct	040143157156
	oct	144151164151
	oct	157156040164
	oct	145163164040
	oct	122145154141
	oct	164151157156
	oct	141154040157
	oct	160145162141
	oct	156144163040
	oct	141162145040
	oct	151156143157
	oct	155160141164
	oct	151142154145
	oct	040124150151
	oct	163040145154
	oct	145155145156
	oct	164040151163
	oct	040156157164
	oct	040141040166
	oct	141154151144
	oct	040142145147
	oct	151156156151
	oct	156147040157
	oct	146040143157
	oct	156144151164
	oct	151157156040
	oct	120141162141
	oct	147162141160
	oct	150055156141
	oct	155145040145
	oct	170160145143
	oct	164145144040
	oct	150145162145
	oct	040126145162
	oct	142040157162
	oct	040156145170
	oct	164040163145
	oct	156164145156
	oct	143145040145
	oct	170160145143
	oct	164145144040
	oct	145162162157
	oct	162040105170
	oct	160145143164
	oct	145144040167
	oct	157162144040
	oct	151163040105
	oct	114123105040
	oct	157162040141
	oct	040160145162
	oct	151157144040
	oct	111154154145
	oct	147141154040
	oct	141162151164
	oct	150155145164
	oct	151143040145
	oct	170160162145
	oct	163163151157
	oct	156040123165
	oct	142152145143
	oct	164040157146
	oct	040143157155
	oct	160141162151
	oct	163157156040
	oct	155151163163
	oct	151156147040
	oct	105170160145
	oct	143164145144
	oct	040167157162
	oct	144040151163
	oct	040123105116
	oct	124105116103
	oct	105040124150
	oct	151163040145
	oct	154145155145
	oct	156164040151
	oct	163040156157
	oct	164040141040
	oct	166141154151
	oct	144040143157
	oct	156144151164
	oct	151157156040
	oct	105170160145
	oct	143164145144
	oct	040167157162
	oct	144040151163
	oct	040124117054
	oct	040124110101
	oct	116040157162
	oct	040141040144
	oct	141164141055
	oct	156141155145
	oct	040111164145
	oct	155040151163
	oct	040156157164
	oct	040141040146
	oct	151154145055
	oct	156141155145
	oct	040157146040
	oct	141040156157
	oct	156055163145
	oct	161165145156
	oct	164151141154
	oct	040141156144
	oct	040156157156
	oct	055163164162
	oct	145141155040
	oct	146151154145
	oct	040105170160
	oct	145143164145
	oct	144040167157
	oct	162144040151
	oct	163040141156
	oct	040151144145
	oct	156164151146
	oct	151145162040
	oct	157162040151
	oct	156160165164
	oct	040143144055
	oct	156141155145
	oct	040105170160
	oct	145143164145
	oct	144040167157
	oct	162144040151
	oct	163040103117
	oct	125116124040
	oct	105170160145
	oct	143164145144
	oct	040167157162
	oct	144040155165
	oct	163164040142
	oct	145040164150
	oct	145040156141
	oct	155145040157
	oct	146040141156
	oct	040145154145
	oct	155145156164
	oct	141162171040
	oct	151156164145
	oct	147145162040
	oct	151164145155
	oct	040111164145
	oct	155040144157
	oct	145163040156
	oct	157164040162
	oct	145146145162
	oct	145156143145
	oct	040151156160
	oct	165164040144
	oct	145166151143
	oct	145040111164
	oct	145155040144
	oct	157145163040
	oct	156157164040
	oct	162145146145
	oct	162145156143
	oct	145040157165
	oct	164160165164
	oct	040144145166
	oct	151143145040
	oct	124150151163
	oct	040167157162
	oct	144040151163
	oct	040162145163
	oct	145162166145
	oct	144040146157
	oct	162040146165
	oct	164165162145
	oct	040151155160
	oct	154145155145
	oct	156164141164
	oct	151157156040
	oct	105170160145
	oct	143164145144
	oct	040167157162
	oct	144040151163
	oct	040114105123
	oct	123040157162
	oct	040074040106
	oct	151154145040
	oct	155165163164
	oct	040142145040
	oct	162145154141
	oct	164151166145
	oct	040050167151
	oct	164150040113
	oct	105131040143
	oct	154141165163
	oct	145051040157
	oct	162040151156
	oct	144145170145
	oct	144040141156
	oct	144040155165
	oct	163164040150
	oct	141166145040
	oct	163145161165
	oct	145156164151
	oct	141154040157
	oct	162040144171
	oct	156141155151
	oct	143040141143
	oct	143145163163
	oct	040105170160
	oct	145143164145
	oct	144040167157
	oct	162144040151
	oct	163040105121
	oct	125101114054
	oct	040107122105
	oct	101124105122
	oct	040157162040
	oct	116117124040
	oct	105170160145
	oct	143164145144
	oct	040167157162
	oct	144040151163
	oct	040164150145
	oct	040144141164
	oct	141055156141
	oct	155145040163
	oct	160145143151
	oct	146151145144
	oct	040151156040
	oct	164150145040
	oct	122105114101
	oct	124111126105
	oct	040113105131
	oct	040160150162
	oct	141163145040
	oct	157146040164
	oct	150145040141
	oct	163163157143
	oct	151141164145
	oct	144040106111
	oct	114105055103
	oct	117116124122
	oct	117114040145
	oct	156164162171
	oct	040101144144
	oct	162145163163
	oct	040157146040
	oct	164150151163
	oct	040151164145
	oct	155040151163
	oct	040156157164
	oct	040164150145
	oct	040163141155
	oct	145040141163
	oct	040164150145
	oct	040141144144
	oct	162145163163
	oct	040157146040
	oct	164150145040
	oct	162145154141
	oct	164151166145
	oct	040153145171
	oct	040105170160
	oct	145143164145
	oct	144040167157
	oct	162144040151
	oct	163040122105
	oct	120114101103
	oct	111116107054
	oct	040111116111
	oct	124111101114
	oct	040157162040
	oct	141040156157
	oct	156156165155
	oct	145162151143
	oct	040154151164
	oct	145162141154
	oct	040157162040
	oct	145154145155
	oct	145156164141
	oct	162171040144
	oct	141164141040
	oct	151164145155
	oct	040167150157
	oct	163145040165
	oct	163141147145
	oct	040151163040
	oct	104111123120
	oct	114101131040
	oct	105170160145
	oct	143164145144
	oct	040167157162
	oct	144040151163
	oct	040122105120
	oct	114101103111
	oct	116107040105
	oct	170160145143
	oct	164145144040
	oct	167157162144
	oct	040151163040
	oct	102131054040
	oct	101114114054
	oct	040156157156
	oct	156165155145
	oct	162151143040
	oct	154151164145
	oct	162141154054
	oct	040141154160
	oct	150141156165
	oct	155145162151
	oct	143040144141
	oct	164141040151
	oct	164145155040
	oct	157162040141
	oct	156171040146
	oct	151147165162
	oct	141164151166
	oct	145040143157
	oct	156163164141
	oct	156164040145
	oct	170143145160
	oct	164040101114
	oct	114040105170
	oct	160145143164
	oct	145144040167
	oct	157162144040
	oct	151163040117
	oct	122040157162
	oct	040111116124
	oct	117040124150
	oct	151163040151
	oct	144145156164
	oct	151146151145
	oct	162040151163
	oct	040151156040
	oct	145162162157
	oct	162040124150
	oct	151163040151
	oct	156164145147
	oct	145162040151
	oct	163040157165
	oct	164163151144
	oct	145040164150
	oct	145040141154
	oct	154157167141
	oct	142154145040
	oct	162141156147
	oct	145040157146
	oct	040151156144
	oct	145170055156
	oct	141155145040
	oct	142145151156
	oct	147040163145
	oct	164040124150
	oct	145040151156
	oct	164145162156
	oct	141154055146
	oct	151154145055
	oct	156141155145
	oct	040151156040
	oct	164150145040
	oct	141163163157
	oct	143151141164
	oct	145144040123
	oct	105114105103
	oct	124040143154
	oct	141165163145
	oct	040155165163
	oct	164040143157
	oct	156164141151
	oct	156040164150
	oct	145040163165
	oct	146146151170
	oct	040055120122
	oct	111116124105
	oct	122040105170
	oct	160145143164
	oct	145144040167
	oct	157162144040
	oct	151163040156
	oct	157156156165
	oct	155145162151
	oct	143040154151
	oct	164145162141
	oct	154040154145
	oct	163163040164
	oct	150141156040
	oct	063062040143
	oct	150141162141
	oct	143164145162
	oct	163040151156
	oct	040154145156
	oct	147164150040
	oct	102157164150
	oct	040160162157
	oct	143145144165
	oct	162145055156
	oct	141155145163
	oct	040155165163
	oct	164040142145
	oct	040151156040
	oct	164150145040
	oct	163141155145
	oct	040144145143
	oct	154141162141
	oct	164151166145
	oct	040163145143
	oct	164151157156
	oct	040105170160
	oct	145143164145
	oct	144040167157
	oct	162144040151
	oct	163040141040
	oct	160157163151
	oct	164151166145
	oct	040151156164
	oct	145147145162
	oct	040157162040
	oct	141156040145
	oct	154145155145
	oct	156164141162
	oct	171040156165
	oct	155145162151
	oct	143040151156
	oct	164145147145
	oct	162040144141
	oct	164141040151
	oct	164145155040
	oct	105170160145
	oct	143164145144
	oct	040167157162
	oct	144040151163
	oct	040141040156
	oct	157156055172
	oct	145162157040
	oct	151156164145
	oct	147145162040
	oct	157162040141
	oct	156040145154
	oct	145155145156
	oct	164141162171
	oct	040156165155
	oct	145162151143
	oct	040151156164
	oct	145147145162
	oct	040144141164
	oct	141040151164
	oct	145155040105
	oct	170160145143
	oct	164145144040
	oct	167157162144
	oct	040151163040
	oct	141156040151
	oct	156144145170
	oct	055156141155
	oct	145054040154
	oct	151164145162
	oct	141154040157
	oct	162040141156
	oct	040145154145
	oct	155145156164
	oct	141162171040
	oct	156165155145
	oct	162151143040
	oct	144141164141
	oct	040151164145
	oct	155040105170
	oct	160145143164
	oct	145144040167
	oct	157162144040
	oct	151163040141
	oct	156040145154
	oct	145155145156
	oct	164141162171
	oct	040156165155
	oct	145162151143
	oct	040144141164
	oct	141040151164
	oct	145155040157
	oct	162040141040
	oct	156157156055
	oct	172145162157
	oct	040154151164
	oct	145162141154
	oct	040124150145
	oct	040151144145
	oct	156164151146
	oct	151145162040
	oct	146157154154
	oct	157167151156
	oct	147040106122
	oct	117115040155
	oct	165163164040
	oct	142145040141
	oct	156040145154
	oct	145155145156
	oct	164141162171
	oct	040156165155
	oct	145162151143
	oct	040151156164
	oct	145147145162
	oct	040144141164
	oct	141040151164
	oct	145155040123
	oct	145143164151
	oct	157156163040
	oct	151156040164
	oct	150145040144
	oct	145143154141
	oct	162141164151
	oct	166145163040
	oct	155165163164
	oct	040143157156
	oct	164141151156
	oct	040163145147
	oct	155145156164
	oct	055156165155
	oct	142145162163
	oct	040154145163
	oct	163040164150
	oct	141156040065
	oct	060040124150
	oct	151163040120
	oct	105122106117
	oct	122115040163
	oct	164141164145
	oct	155145156164
	oct	040166151157
	oct	154141164145
	oct	163040164150
	oct	145040163145
	oct	147155145156
	oct	164141164151
	oct	157156040162
	oct	165154145163
	oct	040124150145
	oct	040163145147
	oct	155145156164
	oct	055156165155
	oct	142145162163
	oct	040155165163
	oct	164040142145
	oct	040141156040
	oct	151156164145
	oct	147145162040
	oct	162141156147
	oct	151156147040
	oct	151156040166
	oct	141154165145
	oct	040146162157
	oct	155040060040
	oct	164150162165
	oct	040071071040
	oct	111164145155
	oct	040144145143
	oct	154141162145
	oct	144040151156
	oct	040103117116
	oct	123124101116
	oct	124040123105
	oct	103124111117
	oct	116040143141
	oct	156156157164
	oct	040142145040
	oct	155157144151
	oct	146151145144
	oct	040101040165
	oct	163145040160
	oct	162157143145
	oct	144165162145
	oct	040141154162
	oct	145141144171
	oct	040145170151
	oct	163164163040
	oct	146157162040
	oct	164150151163
	oct	040146151154
	oct	145040101040
	oct	165163145040
	oct	160162157143
	oct	145144165162
	oct	145040150141
	oct	163040141154
	oct	162145141144
	oct	171040142145
	oct	145156040141
	oct	163163157143
	oct	151141164145
	oct	144040167151
	oct	164150040164
	oct	150151163040
	oct	160162157143
	oct	145163163151
	oct	156147040155
	oct	157144145040
	oct	101040160162
	oct	157143145144
	oct	165162145040
	oct	156141155145
	oct	040151163040
	oct	162145161165
	oct	151162145144
	oct	040150145162
	oct	145040124150
	oct	151163040167
	oct	157162144040
	oct	163150157165
	oct	154144040142
	oct	145147151156
	oct	040151156040
	oct	141162145141
	oct	040101040124
	oct	150151163040
	oct	167157162144
	oct	040163150157
	oct	165154144040
	oct	142145147151
	oct	156040151156
	oct	040141162145
	oct	141040102040
	oct	101040143157
	oct	155160141162
	oct	151163157156
	oct	040150141163
	oct	040142145145
	oct	156040155141
	oct	144145040167
	oct	150151143150
	oct	040144157145
	oct	163040156157
	oct	164040151156
	oct	166157154166
	oct	145040141040
	oct	144141164141
	oct	055156141155
	oct	145040105170
	oct	160145143164
	oct	145144040167
	oct	157162144040
	oct	151163040156
	oct	157156156165
	oct	155145162151
	oct	143040154151
	oct	164145162141
	oct	154040154145
	oct	163163040164
	oct	150141156040
	oct	066066040143
	oct	150141162141
	oct	143164145162
	oct	163040151156
	oct	040154145156
	oct	147164150040
	oct	114145156147
	oct	164150040157
	oct	166145162040
	oct	063060040143
	oct	150141162141
	oct	143164145162
	oct	163040166151
	oct	157154141164
	oct	145163040125
	oct	120114040162
	oct	165154145163
	oct	040106151154
	oct	145040167151
	oct	164150040163
	oct	164162145141
	oct	155040157162
	oct	147141156151
	oct	172141164151
	oct	157156040143
	oct	141156156157
	oct	164040142145
	oct	040157160145
	oct	156145144040
	oct	151156040111
	oct	055117040155
	oct	157144145040
	oct	106151154145
	oct	040157162147
	oct	141156151172
	oct	141164151157
	oct	156040151163
	oct	040156145151
	oct	164150145162
	oct	040163145161
	oct	165145156164
	oct	151141154040
	oct	156157162040
	oct	163164162145
	oct	141155040106
	oct	151154145040
	oct	167151164150
	oct	040163164162
	oct	145141155040
	oct	157162147141
	oct	156151172141
	oct	164151157156
	oct	040143141156
	oct	156157164040
	oct	142145040162
	oct	145167162151
	oct	164164145156
	oct	040103117115
	oct	120111114105
	oct	122040102125
	oct	107054040156
	oct	157167040050
	oct	062064070054
	oct	063051040117
	oct	116040117126
	oct	105122106114
	oct	117127040157
	oct	160164151157
	oct	156040145170
	oct	160145143164
	oct	145144040101
	oct	040163143157
	oct	160145040144
	oct	145154151155
	oct	151164145162
	oct	040143157165
	oct	154144040156
	oct	157164040142
	oct	145040155141
	oct	164143150145
	oct	144040167151
	oct	164150040141
	oct	040163164141
	oct	164145155145
	oct	156164040166
	oct	145162142040
	oct	101040162145
	oct	146145162145
	oct	156143145040
	oct	164157040141
	oct	040156157156
	oct	055144145143
	oct	154141162141
	oct	164151166145
	oct	040160162157
	oct	143145144165
	oct	162145055156
	oct	141155145040
	oct	150141163040
	oct	157143143165
	oct	162162145144
	oct	040151156040
	oct	164150145040
	oct	144145143154
	oct	141162141164
	oct	151166145163
	oct	040124150145
	oct	040167157162
	oct	144040124117
	oct	040151163040
	oct	162145161165
	oct	151162145144
	oct	040150145162
	oct	145040124150
	oct	145040167157
	oct	162144040117
	oct	116040157162
	oct	040117106106
	oct	040151163040
	oct	162145161165
	oct	151162145144
	oct	040150145162
	oct	145040124150
	oct	145040167157
	oct	162144040123
	oct	105121125105
	oct	116103105040
	oct	151163040162
	oct	145161165151
	oct	162145144040
	oct	150145162145
	oct	040101156040
	oct	141154160150
	oct	141142145164
	oct	055156141155
	oct	145040151163
	oct	040162145161
	oct	165151162145
	oct	144040150145
	oct	162145040116
	oct	145151164150
	oct	145162040141
	oct	156040151156
	oct	144145170040
	oct	156141155145
	oct	040156157162
	oct	040141156040
	oct	151156144145
	oct	170040144141
	oct	164141040151
	oct	164145155040
	oct	155141171040
	oct	157143143165
	oct	162040150145
	oct	162145040124
	oct	150151163040
	oct	163165142163
	oct	143162151160
	oct	164145144040
	oct	144141164141
	oct	040151164145
	oct	155040162145
	oct	146145162145
	oct	156143145040
	oct	143157156164
	oct	141151156163
	oct	040141156040
	oct	157165164055
	oct	157146055162
	oct	141156147145
	oct	040163165142
	oct	163143162151
	oct	160164040124
	oct	150151163040
	oct	166141154165
	oct	145040151163
	oct	040157165164
	oct	055157146055
	oct	162141156147
	oct	145040146157
	oct	162040141156
	oct	040151156144
	oct	145170040156
	oct	141155145040
	oct	167150151143
	oct	150040160162
	oct	145143145145
	oct	144163040151
	oct	164040105170
	oct	160145143164
	oct	145144040167
	oct	157162144040
	oct	151163040106
	oct	122117115040
	oct	157162040127
	oct	111124110040
	oct	106151154145
	oct	040157162147
	oct	141156151172
	oct	141164151157
	oct	156040144157
	oct	145163040156
	oct	157164040163
	oct	165160160157
	oct	162164040164
	oct	150151163040
	oct	163164141164
	oct	145155145156
	oct	164040111164
	oct	145155040151
	oct	163040156157
	oct	164040141156
	oct	040151144145
	oct	156164151146
	oct	151145162054
	oct	040151156144
	oct	145170040156
	oct	141155145040
	oct	157162040141
	oct	040160157163
	oct	151164151166
	oct	145040151156
	oct	164145147145
	oct	162040124150
	oct	145040146151
	oct	162163164040
	oct	164145162155
	oct	040151156040
	oct	141156040141
	oct	142142162145
	oct	166151141164
	oct	145144040143
	oct	157155142151
	oct	156145144040
	oct	162145154141
	oct	164151157156
	oct	040143157156
	oct	144151164151
	oct	157156040155
	oct	165163164040
	oct	142145040141
	oct	040162145154
	oct	141164151157
	oct	156040143157
	oct	156144151164
	oct	151157156040
	oct	176124150145
	oct	040167157162
	oct	144040125123
	oct	111116107040
	oct	151163040162
	oct	145161165151
	oct	162145144040
	oct	150145162145
	oct	040101040154
	oct	141156147165
	oct	141147145040
	oct	156141155145
	oct	040151163040
	oct	162145161165
	oct	151162145144
	oct	040150145162
	oct	145040124150
	oct	145040167157
	oct	162144040132
	oct	105122117040
	oct	151163040162
	oct	145161165151
	oct	162145144040
	oct	150145162145
	oct	040101040162
	oct	157165164151
	oct	156145040156
	oct	141155145040
	oct	151163040162
	oct	145161165151
	oct	162145144040
	oct	150145162145
	oct	040101040160
	oct	145162151157
	oct	144040151163
	oct	040162145161
	oct	165151162145
	oct	144040141146
	oct	164145162040
	oct	164150151163
	oct	040167157162
	oct	144040101156
	oct	040151156144
	oct	145170040144
	oct	141164141040
	oct	151164145155
	oct	040151163040
	oct	151154154145
	oct	147141154040
	oct	150145162145
	oct	040151156040
	oct	141040163145
	oct	164040163164
	oct	141164145155
	oct	145156164040
	oct	101156040151
	oct	156164145147
	oct	145162040144
	oct	141164141040
	oct	151164145155
	oct	040151163040
	oct	151154154145
	oct	147141154040
	oct	150145162145
	oct	040151156040
	oct	141040163145
	oct	164040163164
	oct	141164145155
	oct	145156164040
	oct	101156040151
	oct	156164145147
	oct	145162040154
	oct	151164145162
	oct	141154040151
	oct	163040151154
	oct	154145147141
	oct	154040150145
	oct	162145040151
	oct	156040141040
	oct	163145164040
	oct	163164141164
	oct	145155145156
	oct	164040124150
	oct	145040146151
	oct	154145040163
	oct	160145143151
	oct	146151145144
	oct	040151156040
	oct	164150145040
	oct	167162151164
	oct	145040163164
	oct	141164145155
	oct	145156164040
	oct	151156040156
	oct	157164040141
	oct	040154145147
	oct	141154040160
	oct	162151156164
	oct	040146151154
	oct	145040101144
	oct	144162145163
	oct	163040157146
	oct	040164150151
	oct	163040151164
	oct	145155040151
	oct	163040156157
	oct	164040164150
	oct	145040163141
	oct	155145040141
	oct	163040164150
	oct	145040141144
	oct	144162145163
	oct	163040157146
	oct	040141040162
	oct	145143157162
	oct	144040153145
	oct	171040105170
	oct	160145143164
	oct	145144040167
	oct	157162144040
	oct	151163040116
	oct	117040101040
	oct	163143157160
	oct	145040144145
	oct	154151155151
	oct	164145162040
	oct	151163040162
	oct	145161165151
	oct	162145144040
	oct	150145162145
	oct	040126145162
	oct	142040156157
	oct	164040160162
	oct	157143145163
	oct	163145144040
	oct	171145164040
	oct	106151154145
	oct	040157162147
	oct	141156151172
	oct	141164151157
	oct	156040151163
	oct	040156157164
	oct	040163145161
	oct	165145156164
	oct	151141154040
	oct	105170160145
	oct	143164145144
	oct	040167157162
	oct	144040151163
	oct	040106122117
	oct	115040124150
	oct	145040167157
	oct	162144040105
	oct	114123105040
	oct	157162040160
	oct	145162151157
	oct	144040050145
	oct	156144040157
	oct	146040163145
	oct	156164145156
	oct	143145051040
	oct	151163040145
	oct	170160145143
	oct	164145144040
	oct	150145162145
	oct	040124150145
	oct	040116105130
	oct	124040123105
	oct	116124105116
	oct	103105040160
	oct	150162141163
	oct	145040141156
	oct	144040164150
	oct	145040163143
	oct	157160145040
	oct	144145154151
	oct	155151164145
	oct	162040105116
	oct	104055111106
	oct	040155141171
	oct	040156157164
	oct	040157143143
	oct	165162040151
	oct	156040164150
	oct	145040163141
	oct	155145040111
	oct	106040163164
	oct	141164145155
	oct	145156164040
	oct	105170160145
	oct	143164145144
	oct	040167157162
	oct	144040151163
	oct	040105116104
	oct	055117106055
	oct	120101107105
	oct	040105170160
	oct	145143164145
	oct	144040167157
	oct	162144040151
	oct	163040105116
	oct	104040105170
	oct	160145143164
	oct	145144040167
	oct	157162144040
	oct	151163040117
	oct	126105122106
	oct	114117127040
	oct	105170160145
	oct	143164145144
	oct	040167157162
	oct	144040151163
	oct	040123111132
	oct	105040105170
	oct	160145143164
	oct	145144040167
	oct	157162144040
	oct	151163040105
	oct	122122117122
	oct	040105170160
	oct	145143164145
	oct	144040167157
	oct	162144040151
	oct	163040105116
	oct	104055120105
	oct	122106117122
	oct	115040105170
	oct	160145143164
	oct	145144040167
	oct	157162144040
	oct	151163040075
	oct	040157162040
	oct	105121125101
	oct	114040157162
	oct	040105121125
	oct	101114123040
	oct	105170160145
	oct	143164145144
	oct	040167157162
	oct	144040151163
	oct	040111123040
	oct	157162040075
	oct	040157162040
	oct	105121125101
	oct	114040157162
	oct	040105121125
	oct	101114123040
	oct	111164145155
	oct	040151163040
	oct	156157164040
	oct	151144145156
	oct	164151146151
	oct	145162040157
	oct	162040154151
	oct	164145162141
	oct	154040157162
	oct	040141162151
	oct	164150155145
	oct	164151143040
	oct	145170160162
	oct	145163163151
	oct	157156040105
	oct	170160145143
	oct	164145144040
	oct	167157162144
	oct	040151163040
	oct	132105122117
	oct	040111164145
	oct	155040151163
	oct	040156157164
	oct	040144141164
	oct	141040156141
	oct	155145040157
	oct	162040154151
	oct	164145162141
	oct	154040124150
	oct	145040116105
	oct	130124040123
	oct	105116124105
	oct	116103105040
	oct	160150162141
	oct	163145040141
	oct	156144040164
	oct	150145040163
	oct	143157160145
	oct	040144145154
	oct	151155151164
	oct	145162040105
	oct	116104055111
	oct	106040155141
	oct	171040156157
	oct	164040157143
	oct	143165162040
	oct	151156040164
	oct	150145040163
	oct	141155145040
	oct	123105101122
	oct	103110040163
	oct	164141164145
	oct	155145156164
	oct	040122145146
	oct	145162145156
	oct	143145040164
	oct	157040144141
	oct	164141055156
	oct	141155145040
	oct	151163040141
	oct	155142151147
	oct	165157165163
	oct	040104141164
	oct	141055156141
	oct	155145040156
	oct	157164040144
	oct	145146151156
	oct	145144040121
	oct	165141154151
	oct	146151145144
	oct	040162145146
	oct	145162145156
	oct	143145040164
	oct	157040144141
	oct	164141055156
	oct	141155145040
	oct	151163040141
	oct	155142151147
	oct	165157165163
	oct	040120162157
	oct	143145144165
	oct	162145055156
	oct	141155145040
	oct	156157164040
	oct	144145146151
	oct	156145144040
	oct	120162157143
	oct	145144165162
	oct	145055156141
	oct	155145040155
	oct	165154164151
	oct	160154171040
	oct	144145146151
	oct	156145144040
	oct	104141164141
	oct	055156141155
	oct	145040155165
	oct	154164151160
	oct	154171040144
	oct	145146151156
	oct	145144040102
	oct	141144040143
	oct	157155160157
	oct	156145156164
	oct	040151156040
	oct	163165142163
	oct	143162151160
	oct	164040116165
	oct	155145162151
	oct	143040154151
	oct	164145162141
	oct	154054040144
	oct	141164141055
	oct	156141155145
	oct	054040157162
	oct	040151156144
	oct	145170055156
	oct	141155145040
	oct	145170160145
	oct	143164145144
	oct	040150145162
	oct	145040116165
	oct	155145162151
	oct	143040154151
	oct	164145162141
	oct	154040145170
	oct	160145143164
	oct	145144040150
	oct	145162145040
	oct	111156143157
	oct	155160154145
	oct	164145040161
	oct	165141154151
	oct	146151143141
	oct	164151157156
	oct	040055040144
	oct	141164141055
	oct	156141155145
	oct	040145170160
	oct	145143164145
	oct	144040150145
	oct	162145040124
	oct	157157040155
	oct	141156171040
	oct	161165141154
	oct	151146151145
	oct	162163040151
	oct	156040164150
	oct	151163040162
	oct	145146145162
	oct	145156143145
	oct	040121165141
	oct	154151146151
	oct	145144040156
	oct	141155145040
	oct	163164141143
	oct	153040157166
	oct	145162146154
	oct	157167040123
	oct	165142163143
	oct	162151160164
	oct	040163164141
	oct	143153040157
	oct	166145162146
	oct	154157167040
	oct	101040144141
	oct	164141055156
	oct	141155145040
	oct	155165163164
	oct	040156157164
	oct	040141160160
	oct	145141162040
	oct	155157162145
	oct	040164150141
	oct	156040157156
	oct	143145040151
	oct	156040141040
	oct	125123111116
	oct	107040160150
	oct	162141163145
	oct	040111144145
	oct	156164151146
	oct	151145162040
	oct	155165163164
	oct	040150141166
	oct	145040141156
	oct	040117103103
	oct	125122123040
	oct	143154141165
	oct	163145040151
	oct	156040151164
	oct	163040144145
	oct	163143162151
	oct	160164151157
	oct	156040104141
	oct	164141055156
	oct	141155145040
	oct	155165163164
	oct	040150141166
	oct	145040141156
	oct	040111116104
	oct	105130105104
	oct	040102131040
	oct	143154141165
	oct	163145040151
	oct	156040151164
	oct	163040144145
	oct	163143162151
	oct	160164151157
	oct	156040104141
	oct	164141055156
	oct	141155145040
	oct	155165163164
	oct	040150141166
	oct	145040141040
	oct	113105131040
	oct	111123040143
	oct	154141165163
	oct	145040151156
	oct	040151164163
	oct	040144145163
	oct	143162151160
	oct	164151157156
	oct	040104141164
	oct	141055156141
	oct	155145040145
	oct	170160145143
	oct	164145144040
	oct	150145162145
	oct	040105122122
	oct	117122061071
	oct	040111164145
	oct	155040155165
	oct	163164040142
	oct	145040141156
	oct	040165156163
	oct	151147156145
	oct	144040151156
	oct	164145147145
	oct	162040125163
	oct	145040157146
	oct	040141040162
	oct	145154141164
	oct	151166145040
	oct	153145171040
	oct	167151164150
	oct	151156040141
	oct	040162145143
	oct	157162144040
	oct	144145163143
	oct	162151160164
	oct	151157156040
	oct	151163040141
	oct	156040145170
	oct	164145156163
	oct	151157156040
	oct	164157040101
	oct	116123040103
	oct	117102117114
	oct	055067064040
	oct	111164145155
	oct	040155165163
	oct	164040142145
	oct	040141154160
	oct	150141156165
	oct	155145162151
	oct	143040141156
	oct	144040156157
	oct	164040166141
	oct	162151141142
	oct	154145040154
	oct	145156147164
	oct	150040125163
	oct	145040157146
	oct	040141040162
	oct	145143157162
	oct	144040153145
	oct	171040157165
	oct	164163151144
	oct	145040164150
	oct	145040162145
	oct	143157162144
	oct	040144145163
	oct	143162151160
	oct	164151157156
	oct	040151163040
	oct	141156040145
	oct	170164145156
	oct	163151157156
	oct	040164157040
	oct	101116123040
	oct	103117102117
	oct	114055067064
	oct	040124150145
	oct	040163164141
	oct	164165163055
	oct	153145171040
	oct	151163040156
	oct	157164040141
	oct	040164167157
	oct	055143150141
	oct	162141143164
	oct	145162040141
	oct	154160150141
	oct	156165155145
	oct	162151143040
	oct	146151145154
	oct	144040124150
	oct	151163040144
	oct	141164141055
	oct	156141155145
	oct	040151163040
	oct	156157164040
	oct	144145163143
	oct	162151142145
	oct	144040141163
	oct	040141154160
	oct	150141156165
	oct	155145162151
	oct	143040124150
	oct	145040157142
	oct	152145143164
	oct	040157146040
	oct	122105116101
	oct	115105123040
	oct	155165163164
	oct	040156157164
	oct	040150141166
	oct	145040141156
	oct	040117103103
	oct	125122123040
	oct	143154141165
	oct	163145040151
	oct	156040151164
	oct	163040144141
	oct	164141040144
	oct	145163143162
	oct	151160164151
	oct	157156040156
	oct	157162040142
	oct	145040163165
	oct	142157162144
	oct	151156141164
	oct	145040164157
	oct	040157156145
	oct	040101040066
	oct	066040154145
	oct	166145154040
	oct	145156164162
	oct	171040155165
	oct	163164040156
	oct	157164040162
	oct	145156141155
	oct	145040141156
	oct	157164150145
	oct	162040066066
	oct	040154145166
	oct	145154040145
	oct	156164162171
	oct	040156157162
	oct	040143141156
	oct	040151164040
	oct	162145156141
	oct	155145040141
	oct	040067067054
	oct	040070070054
	oct	040157162040
	oct	060061040154
	oct	145166145154
	oct	040145156164
	oct	162171040122
	oct	145156141155
	oct	145040157142
	oct	152145143164
	oct	061040141156
	oct	144040157142
	oct	152145143164
	oct	062040141162
	oct	145141040162
	oct	141156147145
	oct	040143157156
	oct	146154151143
	oct	164040123171
	oct	155142157154
	oct	151143040153
	oct	145171040151
	oct	163040164157
	oct	157040163155
	oct	141154154040
	oct	164157040150
	oct	157154144040
	oct	141144144162
	oct	145163163040
	oct	146157162155
	oct	141164040113
	oct	145171040154
	oct	157143040166
	oct	141154165145
	oct	040164157157
	oct	040154141162
	oct	147145040113
	oct	145171040154
	oct	157143040151
	oct	163040157165
	oct	164163151144
	oct	145040157146
	oct	040164150145
	oct	040162145143
	oct	157162144040
	oct	141162145141
	oct	040101040155
	oct	156145155157
	oct	156151143055
	oct	156141155145
	oct	040155165163
	oct	164040156157
	oct	164040142145
	oct	040165163145
	oct	144040141163
	oct	040141040161
	oct	165141154151
	oct	146151145162
	oct	040101156040
	oct	151156144145
	oct	170055156141
	oct	155145040155
	oct	165163164040
	oct	156157164040
	oct	142145040165
	oct	163145144040
	oct	141163040141
	oct	040161165141
	oct	154151146151
	oct	145162040101
	oct	156040141154
	oct	160150141142
	oct	145164055156
	oct	141155145040
	oct	155165163164
	oct	040156157164
	oct	040142145040
	oct	165163145144
	oct	040141163040
	oct	141040161165
	oct	141154151146
	oct	151145162040
	oct	121165141154
	oct	151146151145
	oct	144040162145
	oct	146145162145
	oct	156143145040
	oct	143157156164
	oct	141151156163
	oct	040141156040
	oct	151164145155
	oct	040167150151
	oct	143150040155
	oct	165163164040
	oct	156157164040
	oct	142145040165
	oct	163145144040
	oct	141163040141
	oct	040161165141
	oct	154151146151
	oct	145162040115
	oct	156145155157
	oct	156151143055
	oct	156141155145
	oct	040145170160
	oct	145143164145
	oct	144040150145
	oct	162145040117
	oct	142163157154
	oct	145164145040
	oct	165163141147
	oct	145040055040
	oct	155156145155
	oct	157156151143
	oct	055156141155
	oct	145040156157
	oct	167040162145
	oct	161165151162
	oct	145144040150
	oct	145162145040
	oct	116117124105
	oct	072040106157
	oct	162040101116
	oct	123040143157
	oct	155160154151
	oct	141156143145
	oct	054040141154
	oct	154040163171
	oct	163164145155
	oct	055156141155
	oct	145163040155
	oct	165163164040
	oct	142145040141
	oct	163163151147
	oct	156145144040
	oct	155156145155
	oct	157156151143
	oct	055156141155
	oct	145163040166
	oct	151141040123
	oct	120105103111
	oct	101114055116
	oct	101115105123
	oct	040160141162
	oct	141147162141
	oct	160150040103
	oct	157155160151
	oct	154141164151
	oct	157156040160
	oct	162157143145
	oct	145144163040
	oct	141163040151
	oct	146040042123
	oct	120105103111
	oct	101114055116
	oct	101115105123
	oct	056040040136
	oct	056042040150
	oct	141144040142
	oct	145145156040
	oct	163160145143
	oct	151146151145
	oct	144040106151
	oct	154145055156
	oct	141155145040
	oct	155165154164
	oct	151160154171
	oct	040144145146
	oct	151156145144
	oct	040124150145
	oct	040114111116
	oct	101107105040
	oct	143154141165
	oct	163145040151
	oct	163040156157
	oct	164040163160
	oct	145143151146
	oct	151145144040
	oct	146157162040
	oct	164150151163
	oct	040146151154
	oct	145040124150
	oct	145040114111
	oct	116101107105
	oct	040143154141
	oct	165163145040
	oct	151163040156
	oct	157164040163
	oct	160145143151
	oct	146151145144
	oct	040146157162
	oct	040141156171
	oct	040146151154
	oct	145040151156
	oct	040164150151
	oct	163040160162
	oct	157147162141
	oct	155040114111
	oct	116101107105
	oct	055103117125
	oct	116124105122
	oct	040162145146
	oct	145162145156
	oct	143145040151
	oct	163040141155
	oct	142151147165
	oct	157165163040
	oct	122145146145
	oct	162145156143
	oct	145040164157
	oct	040160162157
	oct	143145144165
	oct	162145055156
	oct	141155145040
	oct	151163040141
	oct	155142151147
	oct	165157165163
	oct	040106151154
	oct	145055156141
	oct	155145040145
	oct	170160145143
	oct	164145144040
	oct	150145162145
	oct	040104141164
	oct	141055156141
	oct	155145040145
	oct	170160145143
	oct	164145144040
	oct	150145162145
	oct	040124150151
	oct	163040144141
	oct	164141055156
	oct	141155145040
	oct	155165163164
	oct	040144145163
	oct	143162151142
	oct	145040156165
	oct	155145162151
	oct	143040144141
	oct	164141040124
	oct	150151163040
	oct	144141164141
	oct	055156141155
	oct	145040144157
	oct	145163040156
	oct	157164040144
	oct	145163143162
	oct	151142145040
	oct	141156040165
	oct	156163151147
	oct	156145144040
	oct	151156164145
	oct	147145162040
	oct	124150145040
	oct	166141162151
	oct	141142154145
	oct	040165163145
	oct	144040167151
	oct	164150040164
	oct	150145040104
	oct	105120105116
	oct	104111116107
	oct	040117116040
	oct	160150162141
	oct	163145040151
	oct	163040167151
	oct	164150151156
	oct	040164150145
	oct	040162141156
	oct	147145040157
	oct	146040164150
	oct	145040141163
	oct	163157143151
	oct	141164145144
	oct	040141162162
	oct	141171040124
	oct	150145040165
	oct	163145040157
	oct	146040141040
	oct	144141164141
	oct	055156141155
	oct	145040144145
	oct	146151156145
	oct	144040151156
	oct	040164150145
	oct	040103157156
	oct	163164141156
	oct	164040123145
	oct	143164151157
	oct	156040163145
	oct	145155163040
	oct	151154154157
	oct	147151143141
	oct	154040150145
	oct	162145040124
	oct	150151163040
	oct	144141164141
	oct	055156141155
	oct	145040155165
	oct	163164040156
	oct	157164040142
	oct	145040163165
	oct	142163143162
	oct	151160164145
	oct	144040126141
	oct	162151141142
	oct	154145040154
	oct	145156147164
	oct	150040144141
	oct	164141055156
	oct	141155145040
	oct	156157164040
	oct	141154154157
	oct	167145144040
	oct	150145162145
	oct	040055040155
	oct	141170151155
	oct	165155040163
	oct	151172145040
	oct	141163163165
	oct	155145144040
	oct	146157162040
	oct	164150151163
	oct	040164171160
	oct	145040157146
	oct	040165163141
	oct	147145040124
	oct	150151163040
	oct	144141164141
	oct	055156141155
	oct	145040151163
	oct	040144145146
	oct	151156145144
	oct	040151156040
	oct	164150145040
	oct	106151154145
	oct	040123145143
	oct	164151157156
	oct	040124150151
	oct	163040144141
	oct	164141055156
	oct	141155145040
	oct	155165163164
	oct	040156157164
	oct	040142145040
	oct	144145146151
	oct	156145144040
	oct	151156040164
	oct	150145040103
	oct	157155155165
	oct	156151143141
	oct	164151157156
	oct	040123145143
	oct	164151157156
	oct	040124150151
	oct	163040144141
	oct	164141055156
	oct	141155145040
	oct	155165163164
	oct	040156157164
	oct	040142145040
	oct	144145146151
	oct	156145144040
	oct	151156040164
	oct	150145040122
	oct	145160157162
	oct	164040123145
	oct	143164151157
	oct	156040124150
	oct	151163040144
	oct	141164141055
	oct	156141155145
	oct	040155165163
	oct	164040156157
	oct	164040142145
	oct	040144145146
	oct	151156145144
	oct	040151156040
	oct	164150145040
	oct	103157156163
	oct	164141156164
	oct	040123145143
	oct	164151157156
	oct	040124150151
	oct	163040144141
	oct	164141055156
	oct	141155145040
	oct	163150157165
	oct	154144040144
	oct	145163143162
	oct	151142145040
	oct	141156040141
	oct	154160150141
	oct	156165155145
	oct	162151143040
	oct	146151145154
	oct	144040156157
	oct	164040154157
	oct	156147145162
	oct	040164150141
	oct	156040062060
	oct	060040143150
	oct	141162141143
	oct	164145162163
	oct	040124150151
	oct	163040144141
	oct	164141055156
	oct	141155145040
	oct	163150157165
	oct	154144040144
	oct	145163143162
	oct	151142145040
	oct	141040156165
	oct	155145162151
	oct	143040157162
	oct	040141154160
	oct	150141156165
	oct	155145162151
	oct	143040146151
	oct	145154144040
	oct	156157164040
	oct	154157156147
	oct	145162040164
	oct	150141156040
	oct	066040143150
	oct	141162141143
	oct	164145162163
	oct	040124150151
	oct	163040144141
	oct	164141055156
	oct	141155145040
	oct	163150157165
	oct	154144040144
	oct	145163143162
	oct	151142145040
	oct	141156040141
	oct	154160150141
	oct	156165155145
	oct	162151143040
	oct	146151145154
	oct	144040156157
	oct	164040154157
	oct	156147145162
	oct	040164150141
	oct	156040062065
	oct	066040143150
	oct	141162141143
	oct	164145162163
	oct	040124150151
	oct	163040144141
	oct	164141055156
	oct	141155145040
	oct	163150157165
	oct	154144040144
	oct	145163143162
	oct	151142145040
	oct	141156040141
	oct	154160150141
	oct	156165155145
	oct	162151143040
	oct	146151145154
	oct	144040156157
	oct	164040154157
	oct	156147145162
	oct	040164150141
	oct	156040061067
	oct	040143150141
	oct	162141143164
	oct	145162163040
	oct	124150151163
	oct	040144141164
	oct	141055156141
	oct	155145040163
	oct	150157165154
	oct	144040144145
	oct	163143162151
	oct	142145040141
	oct	156040151156
	oct	164145147145
	oct	162040157146
	oct	040156157040
	oct	155157162145
	oct	040164150141
	oct	156040164150
	oct	162145145040
	oct	144151147151
	oct	164163040103
	oct	144055156141
	oct	155145040155
	oct	165154164151
	oct	160154171040
	oct	144145146151
	oct	156145144040
	oct	122145143157
	oct	162144040153
	oct	145171040151
	oct	163040157165
	oct	164163151144
	oct	145040157146
	oct	040162145143
	oct	157162144040
	oct	144145163143
	oct	162151160164
	oct	151157156040
	oct	124167157040
	oct	157162040155
	oct	157162145040
	oct	162145143157
	oct	162144163040
	oct	153145171163
	oct	040150141166
	oct	145040164150
	oct	145040163141
	oct	155145040157
	oct	146146163145
	oct	164040103157
	oct	162162145163
	oct	160157156144
	oct	151156147040
	oct	157160164151
	oct	157156040162
	oct	145163165154
	oct	164163040151
	oct	156040156165
	oct	154154040155
	oct	141164143150
	oct	040111164145
	oct	155040156157
	oct	164040136040
	oct	105170160145
	oct	143164145144
	oct	040167157162
	oct	144040151163
	oct	040136040104
	oct	141164141055
	oct	156141155145
	oct	163040141156
	oct	144040151156
	oct	144145170055
	oct	156141155145
	oct	163040156157
	oct	164040141154
	oct	154157167145
	oct	144040164157
	oct	147145164150
	oct	145162040141
	oct	163040163165
	oct	142163143162
	oct	151160164163
	oct	040101040163
	oct	165142163143
	oct	162151160164
	oct	040155165163
	oct	164040156157
	oct	164040151164
	oct	163145154146
	oct	040162145161
	oct	165151162145
	oct	040163165142
	oct	163143162151
	oct	160164151156
	oct	147040126141
	oct	154165145040
	oct	157146040156
	oct	165155145162
	oct	151143040154
	oct	151164145162
	oct	141154040163
	oct	165142163143
	oct	162151160164
	oct	040145170143
	oct	145145144163
	oct	040155141170
	oct	151155165155
	oct	040156165155
	oct	142145162040
	oct	157146040157
	oct	143143165162
	oct	162145156143
	oct	145163040123
	oct	171156164141
	oct	170040143150
	oct	145143153151
	oct	156147040144
	oct	151163143157
	oct	156164151156
	oct	165145144040
	oct	123171156164
	oct	141170040143
	oct	150145143153
	oct	151156147040
	oct	162145163165
	oct	155145144040
	oct	125156145170
	oct	160145143164
	oct	145144040145
	oct	156144040157
	oct	146040146151
	oct	154145040104
	oct	141164141055
	oct	156141155145
	oct	040144145163
	oct	143162151160
	oct	164151157156
	oct	040143157156
	oct	164141151156
	oct	163040136040
	oct	125156145170
	oct	160145143164
	oct	145144040164
	oct	157153145156
	oct	040151156040
	oct	143157162162
	oct	145163160157
	oct	156144151156
	oct	147040157160
	oct	145162141156
	oct	144040125156
	oct	145170160145
	oct	143164145144
	oct	040167157162
	oct	144040042136
	oct	042040101040
	oct	147162157165
	oct	160040151164
	oct	145155040163
	oct	160145143151
	oct	146151145144
	oct	040142171040
	oct	141040103117
	oct	122122105123
	oct	120117116104
	oct	111116107040
	oct	157160164151
	oct	157156040143
	oct	157156164141
	oct	151156163040
	oct	141156040141
	oct	155142151147
	oct	165157165163
	oct	040144141164
	oct	141055156141
	oct	155145040103
	oct	157162162145
	oct	163160157156
	oct	144151156147
	oct	040153145171
	oct	055151156144
	oct	145170040145
	oct	170143145145
	oct	144163040155
	oct	141170151155
	oct	165155040120
	oct	162145155141
	oct	164165162145
	oct	040145156144
	oct	040157146040
	oct	146151154145
	oct	040144165162
	oct	151156147040
	oct	103117122122
	oct	040157160164
	oct	151157156040
	oct	157162040111
	oct	116111124111
	oct	101114111132
	oct	105040163164
	oct	141164145155
	oct	145156164040
	oct	117160145162
	oct	141156144040
	oct	157146040143
	oct	157162162145
	oct	163160157156
	oct	144151156147
	oct	040155165163
	oct	164040142145
	oct	040147162157
	oct	165160040156
	oct	141155145040
	oct	116145147141
	oct	164151166145
	oct	040156165155
	oct	142145162040
	oct	151163040151
	oct	154154145147
	oct	141154040163
	oct	165142163143
	oct	162151160164
	oct	040122145154
	oct	141164151166
	oct	145040151156
	oct	144145170151
	oct	156147040162
	oct	145161165151
	oct	162145163040
	oct	165156163151
	oct	147156145144
	oct	040154151164
	oct	145162141154
	oct	040103157162
	oct	162145163160
	oct	157156144151
	oct	156147040164
	oct	141142154145
	oct	040157166145
	oct	162146154157
	oct	167040055040
	oct	156165155142
	oct	145162040157
	oct	146040163165
	oct	142157162144
	oct	151156141164
	oct	145040151164
	oct	145155163040
	oct	151156040141
	oct	040147162157
	oct	165160040145
	oct	170143145145
	oct	144163040155
	oct	141170151155
	oct	165155040103
	oct	157162162145
	oct	163160157156
	oct	144151156147
	oct	040163164141
	oct	143153040157
	oct	166145162146
	oct	154157167040
	oct	055040156145
	oct	163164151156
	oct	147040154151
	oct	155151164040
	oct	157146040065
	oct	060040145170
	oct	143145145144
	oct	145144040103
	oct	157162162145
	oct	163160157156
	oct	144151156147
	oct	040144151162
	oct	145143164157
	oct	162171040157
	oct	166145162146
	oct	154157167040
	oct	055040156165
	oct	155145162040
	oct	157146040151
	oct	164145155163
	oct	040151156040
	oct	147162157165
	oct	160040145170
	oct	143145145144
	oct	163040154151
	oct	155151164040
	oct	157146040065
	oct	061062040117
	oct	160145162141
	oct	156144040157
	oct	146040111116
	oct	111124111101
	oct	114111132105
	oct	040155165163
	oct	164040156157
	oct	164040150141
	oct	166145040136
	oct	040117160145
	oct	162141156144
	oct	040157146040
	oct	111116111124
	oct	111101114111
	oct	132105040155
	oct	165163164040
	oct	156157164040
	oct	142145040136
	oct	040111116111
	oct	124111101114
	oct	111132105040
	oct	162145143145
	oct	151166151156
	oct	147040157160
	oct	145162141156
	oct	144040156157
	oct	164040154145
	oct	147141154040
	oct	143141164145
	oct	147157162171
	oct	040127141162
	oct	156151156147
	oct	072040156165
	oct	154154040155
	oct	141164143150
	oct	040151156040
	oct	111116111124
	oct	111101114111
	oct	132105040163
	oct	164141164145
	oct	155145156164
	oct	040111116111
	oct	124111101114
	oct	111132105040
	oct	163145156144
	oct	151156147040
	oct	157160145162
	oct	141156144040
	oct	156157164040
	oct	154145147141
	oct	154040143141
	oct	164145147157
	oct	162171040111
	oct	164145155040
	oct	136040167151
	oct	164150040103
	oct	117122122105
	oct	123120117116
	oct	104111116107
	oct	040157160164
	oct	151157156040
	oct	147151166145
	oct	163040141156
	oct	040165156144
	oct	145146151156
	oct	145144040162
	oct	145163165154
	oct	164040143157
	oct	156164151156
	oct	165141164151
	oct	157156040157
	oct	146040141040
	oct	167157162144
	oct	040157162040
	oct	156165155145
	oct	162151143040
	oct	154151164145
	oct	162141154040
	oct	163145155151
	oct	055143157154
	oct	157156040157
	oct	162040143157
	oct	155155141040
	oct	141163040163
	oct	145160141162
	oct	141164157162
	oct	040104101124
	oct	105055103117
	oct	115120111114
	oct	105104040160
	oct	141162141147
	oct	162141160150
	oct	040144141164
	oct	141055156141
	oct	155145040142
	oct	145147151156
	oct	163040167151
	oct	164150040156
	oct	157156055141
	oct	154160150141
	oct	142145164151
	oct	143040143150
	oct	141162141143
	oct	164145162040
	oct	161165141154
	oct	151146151145
	oct	144040144141
	oct	164141055156
	oct	141155145040
	oct	165163145162
	oct	040144145146
	oct	151156145144
	oct	040141154160
	oct	150141142145
	oct	164040111104
	oct	040160141162
	oct	141147162141
	oct	160150163040
	oct	157165164040
	oct	157146040157
	oct	162144145162
	oct	040103117116
	oct	124122117114
	oct	040104111126
	oct	111123111117
	oct	116040117120
	oct	124111117116
	oct	101114040146
	oct	151154145040
	oct	167151164150
	oct	040156157156
	oct	055163145161
	oct	165145156164
	oct	151141154040
	oct	157162147141
	oct	156151172141
	oct	164151157156
	oct	040076054040
	oct	075054040074
	oct	040141163040
	oct	162145154141
	oct	164151157156
	oct	141154040157
	oct	160145162141
	oct	164157162163
	oct	040157160145
	oct	162141156144
	oct	163040150141
	oct	166151156147
	oct	040165156145
	oct	161165141154
	oct	040163151172
	oct	145163040156
	oct	145163164145
	oct	144040111106
	oct	040163164141
	oct	164145155145
	oct	156164163040
	oct	141162151164
	oct	150155145164
	oct	151143040145
	oct	170160162145
	oct	163163151157
	oct	156040151156
	oct	040141040162
	oct	145154141164
	oct	151157156040
	oct	143157156144
	oct	151164151157
	oct	156040143157
	oct	156144151164
	oct	151157156055
	oct	156141155145
	oct	040143157156
	oct	144151164151
	oct	157156040163
	oct	151147156040
	oct	143157156144
	oct	151164151157
	oct	156040156145
	oct	147141164145
	oct	144040163151
	oct	155160154145
	oct	040143157156
	oct	144151164151
	oct	157156040143
	oct	157155142151
	oct	156145144040
	oct	143157156144
	oct	151164151157
	oct	156040141142
	oct	142162145166
	oct	151141164145
	oct	144040162145
	oct	154141164151
	oct	157156040143
	oct	157156144151
	oct	164151157156
	oct	040103117122
	oct	122105123120
	oct	117116104111
	oct	116107040160
	oct	150162141163
	oct	145040103117
	oct	115120125124
	oct	105040163164
	oct	141164145155
	oct	145156164040
	oct	106122117115
	oct	040155156145
	oct	155157156151
	oct	143055156141
	oct	155145040160
	oct	150162141163
	oct	145040104101
	oct	131057104101
	oct	124105057124
	oct	111115105040
	oct	160150162141
	oct	163145040151
	oct	144145156164
	oct	151146151145
	oct	162040163145
	oct	162151145163
	oct	040124117040
	oct	120122117103
	oct	105105104040
	oct	124117040160
	oct	150162141163
	oct	145040163145
	oct	162151145163
	oct	040125120117
	oct	116040155156
	oct	145155157156
	oct	151143055156
	oct	141155145040
	oct	160150162141
	oct	163145040122
	oct	105115101111
	oct	116104105122
	oct	040160150162
	oct	141163145040
	oct	141154164145
	oct	162141142154
	oct	145040107117
	oct	040124117040
	oct	160141162141
	oct	147162141160
	oct	150040145170
	oct	164145156144
	oct	145144040163
	oct	151155160154
	oct	145040151156
	oct	163145162164
	oct	151157156040
	oct	143150141162
	oct	141143164145
	oct	162163040105
	oct	130124105116
	oct	104040160150
	oct	162141163145
	oct	040125116124
	oct	111114040160
	oct	150162141163
	oct	145040126101
	oct	122131111116
	oct	107040160150
	oct	162141163145
	oct	040123124122
	oct	111116107040
	oct	163164141164
	oct	145155145156
	oct	164040125116
	oct	123124122111
	oct	116107040163
	oct	164141164145
	oct	155145156164
	oct	040160162157
	oct	147162141155
	oct	055151144040
	oct	143157156164
	oct	141151156163
	oct	040165156144
	oct	145162163143
	oct	157162145040
	oct	143150141162
	oct	141143164145
	oct	162040105116
	oct	104055117106
	oct	055120101107
	oct	105040157160
	oct	164151157156
	oct	040106104040
	oct	143154141165
	oct	163145040102
	oct	114117103113
	oct	040103117116
	oct	124101111116
	oct	123040143154
	oct	141165163145
	oct	040114101102
	oct	105114040122
	oct	105103117122
	oct	104123040143
	oct	154141165163
	oct	145040105130
	oct	124105116104
	oct	040155157144
	oct	145040156157
	oct	156055160157
	oct	163151164151
	oct	166145040151
	oct	156164145147
	oct	145162040146
	oct	151154145040
	oct	156141155145
	oct	040163145162
	oct	151145163040
	oct	162145146145
	oct	162145156143
	oct	145040164157
	oct	040114111116
	oct	101107105055
	oct	103117125116
	oct	124105122040
	oct	117120105116
	oct	040155157144
	oct	145040163145
	oct	162151145163
	oct	040141162151
	oct	164150155145
	oct	164151143040
	oct	157160145162
	oct	141164157162
	oct	040156157164
	oct	040163165162
	oct	162157165156
	oct	144145144040
	oct	142171040163
	oct	160141143145
	oct	163040162145
	oct	154141164151
	oct	157156141154
	oct	040143150141
	oct	162141143164
	oct	145162040156
	oct	157164040163
	oct	165162162157
	oct	165156144145
	oct	144040142171
	oct	040163160141
	oct	143145163040
	oct	123105107115
	oct	105116124055
	oct	114111115111
	oct	124040143154
	oct	141165163145
	oct	040156145163
	oct	164145144040
	oct	162145144145
	oct	146151156145
	oct	163040162145
	oct	144145146151
	oct	156145163040
	oct	163165142157
	oct	162144151156
	oct	141164145040
	oct	164157040157
	oct	143143165162
	oct	163040122105
	oct	126105122123
	oct	105104040160
	oct	150162141163
	oct	145040122105
	oct	127111116104
	oct	040160150162
	oct	141163145040
	oct	122105115117
	oct	126101114040
	oct	160150162141
	oct	163145040114
	oct	117103113040
	oct	160150162141
	oct	163145040101
	oct	114114057114
	oct	105101104111
	oct	116107040160
	oct	150162141163
	oct	145040163145
	oct	162151145163
	oct	040124101114
	oct	114131111116
	oct	107040160150
	oct	162141163145
	oct	040163145162
	oct	151145163040
	oct	101114114055
	oct	114105101104
	oct	111116107055
	oct	106111122123
	oct	124040160150
	oct	162141163145
	oct	040163145162
	oct	151145163040
	oct	122105114101
	oct	124111126105
	oct	040113105131
	oct	040167151164
	oct	150151156040
	oct	162145143157
	oct	162144040123
	oct	105101122103
	oct	110040163164
	oct	141164145155
	oct	145156164040
	oct	122105103117
	oct	122104040113
	oct	105131040156
	oct	157164040167
	oct	151164150151
	oct	156040162145
	oct	143157162144
	oct	040115105122
	oct	107105040163
	oct	164141164145
	oct	155145156164
	oct	040122105114
	oct	105101123105
	oct	040163164141
	oct	164145155145
	oct	156164040122
	oct	105124125122
	oct	116040163164
	oct	141164145155
	oct	145156164040
	oct	123117122124
	oct	040163164141
	oct	164145155145
	oct	156164040103
	oct	117114114101
	oct	124111116107
	oct	040123105121
	oct	125105116103
	oct	105040160150
	oct	162141163145
	oct	040103117120
	oct	131040163164
	oct	141164145155
	oct	145156164040
	oct	103117120131
	oct	040163164141
	oct	164145155145
	oct	156164040167
	oct	151164150040
	oct	122105120114
	oct	101103111116
	oct	107040160150
	oct	162141163145
	oct	040103101114
	oct	114040154151
	oct	164145162141
	oct	154040163164
	oct	141164145155
	oct	145156164040
	oct	117116040117
	oct	126105122106
	oct	114117127040
	oct	160150162141
	oct	163145040103
	oct	101116103105
	oct	114040163164
	oct	141164145155
	oct	145156164040
	oct	105130111124
	oct	040120122117
	oct	107122101115
	oct	040163164141
	oct	164145155145
	oct	156164040101
	oct	103103105120
	oct	124040115105
	oct	123123101107
	oct	105040103117
	oct	125116124040
	oct	163164141164
	oct	145155145156
	oct	164040104111
	oct	123101102114
	oct	105040163164
	oct	141164145155
	oct	145156164040
	oct	124105122115
	oct	111116101114
	oct	040160150162
	oct	141163145040
	oct	105116101102
	oct	114105040163
	oct	164141164145
	oct	155145156164
	oct	040122105103
	oct	105111126105
	oct	040163164141
	oct	164145155145
	oct	156164040123
	oct	105107115105
	oct	116124040160
	oct	150162141163
	oct	145040146157
	oct	162155141164
	oct	040062040123
	oct	105116104040
	oct	163164141164
	oct	145155145156
	oct	164040127111
	oct	124110040151
	oct	144145156164
	oct	151146151145
	oct	162040160150
	oct	162141163145
	oct	040127111124
	oct	110040105123
	oct	111040160150
	oct	162141163145
	oct	040163145147
	oct	155145156164
	oct	040156165155
	oct	142145162163
	oct	040125123111
	oct	116107040160
	oct	150162141163
	oct	145040123105
	oct	103124111117
	oct	116047163040
	oct	167151164150
	oct	040145161165
	oct	141154040163
	oct	145147155145
	oct	156164040156
	oct	165155142145
	oct	162163040156
	oct	157164040143
	oct	157156164151
	oct	147165157165
	oct	163040125123
	oct	105040106117
	oct	122040104105
	oct	102125107107
	oct	111116107040
	oct	157156040160
	oct	162157143145
	oct	144165162145
	oct	055156141155
	oct	145040163164
	oct	141164145155
	oct	145156164040
	oct	103104055156
	oct	141155145040
	oct	146151154145
	oct	055156141155
	oct	145040151144
	oct	145156164151
	oct	146151145162
	oct	040156141155
	oct	145040122105
	oct	123105122126
	oct	105104054040
	oct	150157154144
	oct	040163164141
	oct	164145155145
	oct	156164040122
	oct	105123105122
	oct	126105104054
	oct	040151156151
	oct	164151141164
	oct	145040163164
	oct	141164145155
	oct	145156164040
	oct	122105123105
	oct	122126105104
	oct	054040160162
	oct	157143145163
	oct	163040163164
	oct	141164145155
	oct	145156164040
	oct	160165162147
	oct	145040163164
	oct	141164145155
	oct	145156164040
	oct	122105123105
	oct	122126105104
	oct	054040164145
	oct	162155151156
	oct	141164145040
	oct	163164141164
	oct	145155145156
	oct	164040122105
	oct	123105122126
	oct	105104054040
	oct	145170141155
	oct	151156145040
	oct	163164141164
	oct	145155145156
	oct	164040122105
	oct	123105122126
	oct	105104054040
	oct	164162141156
	oct	163146157162
	oct	155040163164
	oct	141164145155
	oct	145156164040
	oct	104105114105
	oct	124105040163
	oct	164141164145
	oct	155145156164
	oct	040105130124
	oct	105122116101
	oct	114040160150
	oct	162141163145
	oct	040123124101
	oct	122124040163
	oct	164141164145
	oct	155145156164
	oct	040164167157
	oct	040144141164
	oct	141055156141
	oct	155145163040
	oct	151156040106
	oct	111114105055
	oct	123124101124
	oct	125123040143
	oct	154141165163
	oct	145040122105
	oct	127122111124
	oct	105040163164
	oct	141164145155
	oct	145156164040
	oct	120122117103
	oct	105123123055
	oct	101122105101
	oct	040160150162
	oct	141163145040
	oct	111116124105
	oct	122103110101
	oct	116107105040
	oct	160150162141
	oct	163145040122
	oct	105101104040
	oct	163164141164
	oct	145155145156
	oct	164040125123
	oct	101107105040
	oct	151163040103
	oct	117115120055
	oct	156040104105
	oct	120105116104
	oct	111116107040
	oct	117116040160
	oct	150162141163
	oct	145040103117
	oct	116123124101
	oct	116124040123
	oct	105103124111
	oct	117116040116
	oct	105130124040
	oct	160150162141
	oct	163145040163
	oct	167151164143
	oct	150055156141
	oct	155145040113
	oct	105131040143
	oct	154141165163
	oct	145040127122
	oct	111124105040
	oct	163164141164
	oct	145155145156
	oct	164040102123
	oct	116040160150
	oct	162141163145
	oct	040106114122
	oct	057126114122
	oct	057123120101
	oct	116116105104
	oct	040160150162
	oct	141163145040
	oct	123123106040
	oct	160150162141
	oct	163145040101
	oct	104126101116
	oct	103111116107
	oct	040151144145
	oct	156164151146
	oct	151145162040
	oct	160150162141
	oct	163145040101
	oct	104126101116
	oct	103111116107
	oct	040155156145
	oct	155157156151
	oct	143055156141
	oct	155145040160
	oct	150162141163
	oct	145040117122
	oct	107101116111
	oct	132101124111
	oct	117116040143
	oct	154141165163
	oct	145040102131
	oct	040143154141
	oct	165163145040
	oct	163145162151
	oct	145163040117
	oct	102112105103
	oct	124040123111
	oct	107116040160
	oct	150162141163
	oct	145040163165
	oct	160145162166
	oct	151163157162
	oct	040143154141
	oct	165163145040
	oct	117120124111
	oct	117116101114
	oct	040160150162
	oct	141163145040
	oct	122105123105
	oct	122126105040
	oct	143154141165
	oct	163145040115
	oct	101130111115
	oct	125115040120
	oct	122117103105
	oct	104125122105
	oct	040123105107
	oct	115105116124
	oct	040143154141
	oct	165163145040
	oct	155145155157
	oct	162171040163
	oct	151172145040
	oct	143154141165
	oct	163145040141
	oct	163163151147
	oct	156040157142
	oct	152145143164
	oct	040160162157
	oct	147162141155
	oct	040143154141
	oct	165163145040
	oct	122105120117
	oct	122124123040
	oct	143154141165
	oct	163145040101
	oct	120120114131
	oct	040143154141
	oct	165163145040
	oct	154145156147
	oct	164150040157
	oct	146040154151
	oct	164145162141
	oct	154040157162
	oct	040144141164
	oct	141055156141
	oct	155145040145
	oct	170143145145
	oct	144163040157
	oct	156145040155
	oct	156145155157
	oct	156151143055
	oct	156141155145
	oct	040156157164
	oct	040144145146
	oct	151156145144
	oct	040151156040
	oct	123120105103
	oct	111101114055
	oct	116101115105
	oct	123040160141
	oct	162141147162
	oct	141160150040
	oct	101114124105
	oct	122116101124
	oct	105040122105
	oct	103117122104
	oct	040113105131
	oct	040143154141
	oct	165163145040
	oct	106111114114
	oct	105122040114
	oct	111116113101
	oct	107105040123
	oct	105103124111
	oct	117116040157
	oct	143143165162
	oct	163040172145
	oct	162157040164
	oct	151155145163
	oct	040161165141
	oct	154151146151
	oct	145162040146
	oct	157162040146
	oct	151154145040
	oct	157162147141
	oct	156151172141
	oct	164151157156
	oct	040122105103
	oct	117122104040
	oct	160150162141
	oct	163145040105
	oct	116104040103
	oct	117102117114
	oct	040163164141
	oct	164145155145
	oct	156164040151
	oct	164145155040
	oct	163150157165
	oct	154144040142
	oct	145147151156
	oct	040151156040
	oct	141162145141
	oct	040101040156
	oct	157156055160
	oct	162151156164
	oct	151156147040
	oct	143150141162
	oct	141143164145
	oct	162163040123
	oct	101115105040
	oct	123117122124
	oct	040101122105
	oct	101040143154
	oct	141165163145
	oct	040101123103
	oct	105116104111
	oct	116107057104
	oct	105123103105
	oct	116104111116
	oct	107040143154
	oct	141165163145
	oct	040124117040
	oct	160150162141
	oct	163145040104
	oct	105103111115
	oct	101114055120
	oct	117111116124
	oct	040111123040
	oct	104105103111
	oct	115101114055
	oct	120117111116
	oct	124040160150
	oct	162141163145
	oct	040154145166
	oct	145154040070
	oct	070040151164
	oct	145155040050
	oct	144145146151
	oct	156151164151
	oct	157156051040
	oct	154145166145
	oct	154040066066
	oct	040151164145
	oct	155040050144
	oct	145146151156
	oct	151164151157
	oct	156051040154
	oct	145166145154
	oct	040156165155
	oct	142145162040
	oct	145170143145
	oct	145144163040
	oct	061060040151
	oct	164145155040
	oct	163150157165
	oct	154144040142
	oct	145147151156
	oct	040151156040
	oct	141162145141
	oct	040102040117
	oct	103103125122
	oct	123040104105
	oct	120105116104
	oct	111116107040
	oct	117116040143
	oct	154141165163
	oct	145040101114
	oct	114040146151
	oct	147165162141
	oct	164151166145
	oct	040143157156
	oct	163164141156
	oct	164040160145
	oct	162151157144
	oct	040156157164
	oct	040146157154
	oct	154157167145
	oct	144040142171
	oct	040163160141
	oct	143145040104
	oct	105102125107
	oct	107111116107
	oct	040115117104
	oct	105040160150
	oct	162141163145
	oct	040103101114
	oct	114040151144
	oct	145156164151
	oct	146151145162
	oct	040163164141
	oct	164145155145
	oct	156164040103
	oct	117115115125
	oct	116111103101
	oct	124111117116
	oct	040123105103
	oct	124111117116
	oct	040103104040
	oct	145156164162
	oct	171040111116
	oct	111124111101
	oct	114040160150
	oct	162141163145
	oct	040114111116
	oct	101107105040
	oct	143154141165
	oct	163145040122
	oct	105123105122
	oct	126105104054
	oct	040162145155
	oct	141162153163
	oct	040160141162
	oct	141147162141
	oct	160150040125
	oct	123111116107
	oct	040160150162
	oct	141163145040
	oct	143157156164
	oct	141151156163
	oct	040141040154
	oct	151164145162
	oct	141154040160
	oct	154165162141
	oct	154040146151
	oct	147165162141
	oct	164151166145
	oct	040143157156
	oct	163164141156
	oct	164040126101
	oct	114125105040
	oct	117106040151
	oct	155160154145
	oct	155145156164
	oct	157162055156
	oct	141155145040
	oct	111123040144
	oct	141164141055
	oct	156141155145
	oct	040143154141
	oct	165163145040
	oct	156157156055
	oct	163164141156
	oct	144141162144
	oct	040162145154
	oct	141164151157
	oct	156141154040
	oct	157160145162
	oct	141164157162
	oct	040156157156
	oct	055163164141
	oct	156144141162
	oct	144040146151
	oct	154145040157
	oct	162147141156
	oct	151172141164
	oct	151157156040
	oct	103101124101
	oct	114117107125
	oct	105055116101
	oct	115105040143
	oct	154141165163
	oct	145040115125
	oct	114124111120
	oct	114105040106
	oct	111114105040
	oct	143154141165
	oct	163145040155
	oct	151163163151
	oct	156147040104
	oct	111126111123
	oct	111117116040
	oct	150145141144
	oct	145162163040
	oct	163165160160
	oct	154151145144
	oct	040155151163
	oct	163151156147
	oct	040120122117
	oct	107122101115
	oct	055111104040
	oct	160141162141
	oct	147162141160
	oct	150040163165
	oct	160160154151
	oct	145144040115
	oct	101130111115
	oct	125115040104
	oct	101124101040
	oct	123105107115
	oct	105116124040
	oct	143154141165
	oct	163145040117
	oct	102112105103
	oct	124040143154
	oct	141165163145
	oct	040144145163
	oct	164151156141
	oct	164151157156
	oct	040164141142
	oct	154145040143
	oct	157165156164
	oct	040145170143
	oct	145145144163
	oct	040157156145
	oct	040155157162
	oct	145040164150
	oct	141156040157
	oct	156145040123
	oct	117122124040
	oct	163164141164
	oct	145155145156
	oct	164040104101
	oct	131055117106
	oct	055127105105
	oct	113040160150
	oct	162141163145
	oct	040123101115
	oct	105040123117
	oct	122124055115
	oct	105122107105
	oct	040101122105
	oct	101040143154
	oct	141165163145
	oct	040103117104
	oct	105055123105
	oct	124040143154
	oct	141165163145
	oct	040120105122
	oct	111117104040
	oct	141163163165
	oct	155145144040
	oct	165163141147
	oct	145163040144
	oct	151146146145
	oct	162040151156
	oct	040143157155
	oct	160141162151
	oct	163157156040
	oct	156157156055
	oct	151156164145
	oct	147145162040
	oct	156165155145
	oct	162151143040
	oct	157160145162
	oct	141156144040
	oct	165163145144
	oct	040151156040
	oct	143157155160
	oct	141162151163
	oct	157156040151
	oct	164145155040
	oct	154145166145
	oct	154040156157
	oct	164040060061
	oct	040157162040
	oct	067067040122
	oct	105120114101
	oct	103105040163
	oct	164141164145
	oct	155145156164
	oct	040106111114
	oct	114105122040
	oct	125123105040
	oct	106117122040
	oct	104105102125
	oct	107107111116
	oct	107040157156
	oct	040101114114
	oct	040120122117
	oct	103105104125
	oct	122105123040
	oct	163164141164
	oct	145155145156
	oct	164040106111
	oct	114114105122
	oct	040165163145
	oct	144040141163
	oct	040143157156
	oct	144151164151
	oct	157156040166
	oct	141162151141
	oct	142154145040
	oct	141162151164
	oct	150155145164
	oct	151143040145
	oct	170160162145
	oct	163163151157
	oct	156040122105
	oct	123105122126
	oct	105104040122
	oct	105123105122
	oct	126105104040
	oct	122105123105
	oct	122126105104
	oct	040122105123
	oct	105122126105
	oct	104040156157
	oct	156055165156
	oct	151161165145
	oct	040144141164
	oct	141040156141
	oct	155145040123
	oct	105114105103
	oct	124040143154
	oct	141165163145
	oct	040101123123
	oct	111107116040
	oct	143154141165
	oct	163145040101
	oct	103103105123
	oct	123040143154
	oct	141165163145
	oct	040106111114
	oct	105040123124
	oct	101124125123
	oct	040143154141
	oct	165163145040
	oct	122105114101
	oct	124111126105
	oct	040113105131
	oct	040143154141
	oct	165163145040
	oct	122105103117
	oct	122104040113
	oct	105131040143
	oct	154141165163
	oct	145040126101
	oct	114125105040
	oct	117106040143
	oct	154141165163
	oct	145040104101
	oct	124101040122
	oct	105103117122
	oct	104123040143
	oct	154141165163
	oct	145040114111
	oct	116101107105
	oct	040143154141
	oct	165163145040
	oct	122105103117
	oct	122104111116
	oct	107040115117
	oct	104105040143
	oct	154141165163
	oct	145040122105
	oct	103117122104
	oct	040103117116
	oct	124101111116
	oct	123040143154
	oct	141165163145
	oct	040125123105
	oct	040146151154
	oct	145040156141
	oct	155145040163
	oct	164141164145
	oct	155145156164
	oct	040117120105
	oct	116040163164
	oct	141164145155
	oct	145156164040
	oct	103114117123
	oct	105040163164
	oct	141164145155
	oct	145156164040
	oct	156157156055
	oct	163145161165
	oct	145156164151
	oct	141154040157
	oct	162147141156
	oct	151172141164
	oct	151157156040
	oct	105130111124
	oct	040163164141
	oct	164145155145
	oct	156164040156
	oct	157164040141
	oct	154157156145
	oct	040151156040
	oct	141040160141
	oct	162141147162
	oct	141160150040
	oct	155157162145
	oct	040164150141
	oct	156040157156
	oct	145040115105
	oct	122107105040
	oct	163164141164
	oct	145155145156
	oct	164040155157
	oct	162145040164
	oct	150141156040
	oct	157156145040
	oct	146151154145
	oct	055156141155
	oct	145040151156
	oct	040141040125
	oct	123111116107
	oct	040160150162
	oct	141163145040
	oct	144145142165
	oct	147040162145
	oct	147151163164
	oct	145162040104
	oct	105102125107
	oct	055103117116
	oct	124105116124
	oct	123040144145
	oct	142165147040
	oct	162145147151
	oct	163164145162
	oct	040104105102
	oct	125107055111
	oct	124105115040
	oct	144145142165
	oct	147040162145
	oct	147151163164
	oct	145162040104
	oct	105102125107
	oct	055114111116
	oct	105040144145
	oct	142165147040
	oct	162145147151
	oct	163164145162
	oct	040104105102
	oct	125107055123
	oct	125102055061
	oct	040144145142
	oct	165147040162
	oct	145147151163
	oct	164145162040
	oct	104105102125
	oct	107055123125
	oct	102055062040
	oct	144145142165
	oct	147040162145
	oct	147151163164
	oct	145162040104
	oct	105102125107
	oct	055123125102
	oct	055063040144
	oct	145142165147
	oct	147151156147
	oct	040154151156
	oct	145163040144
	oct	145142165147
	oct	040162145147
	oct	151163164145
	oct	162040104105
	oct	102125107055
	oct	116101115105
	oct	040103117120
	oct	131040163164
	oct	141164145155
	oct	145156164040
	oct	167151164150
	oct	040117106040
	oct	154151142162
	oct	141162171055
	oct	156141155145
	oct	040160150162
	oct	141163145040
	oct	123104040143
	oct	154141165163
	oct	145040123101
	oct	115105040101
	oct	122105101040
	oct	143154141165
	oct	163145040122
	oct	105122125116
	oct	040143154141
	oct	165163145040
	oct	101120120114
	oct	131040143154
	oct	141165163145
	oct	040156145147
	oct	141164145144
	oct	040143157155
	oct	142151156145
	oct	144040143157
	oct	156144151164
	oct	151157156040
	oct	104131116101
	oct	115111103040
	oct	160150162141
	oct	163145040122
	oct	105116101115
	oct	105123040143
	oct	154141165163
	oct	145054040154
	oct	145166145154
	oct	040156165155
	oct	142145162040
	oct	156157164040
	oct	145161165141
	oct	154040164157
	oct	040066066040
	oct	163151156147
	oct	154145040144
	oct	151147151164
	oct	040154145166
	oct	145154040156
	oct	165155142145
	oct	162040125123
	oct	105040106117
	oct	122040104105
	oct	102125107107
	oct	111116107040
	oct	163164141164
	oct	145155145156
	oct	164040154145
	oct	166145154040
	oct	066066040151
	oct	164145155040
	oct	050162145146
	oct	145162145156
	oct	143145051040
	oct	146157162155
	oct	141164040061
	oct	040123105116
	oct	104040163164
	oct	141164145155
	oct	145156164040
	oct	163145147155
	oct	145156164040
	oct	156165155142
	oct	145162040156
	oct	157164040154
	oct	145163163040
	oct	164150141156
	oct	040163145147
	oct	155145156164
	oct	040154151155
	oct	151164040160
	oct	162157143145
	oct	144165162145
	oct	040156141155
	oct	145040151154
	oct	154145147141
	oct	154054040125
	oct	123105040106
	oct	117122040104
	oct	105102125107
	oct	107111116107
	oct	040117116040
	oct	101114114040
	oct	120122117103
	oct	105104125122
	oct	105123040141
	oct	154162145141
	oct	144171040163
	oct	160145143151
	oct	146151145144
	oct	040160162157
	oct	143145144165
	oct	162145055156
	oct	141155145040
	oct	160162145166
	oct	151157165163
	oct	154171040165
	oct	163145144040
	oct	151156040125
	oct	123105040106
	oct	117122040104
	oct	105102125107
	oct	107111116107
	oct	040163164141
	oct	164145155145
	oct	156164040144
	oct	141164141055
	oct	156141155145
	oct	040160162145
	oct	166151157165
	oct	163154171040
	oct	165163145144
	oct	040151156040
	oct	125123105040
	oct	106117122040
	oct	104105102125
	oct	107107111116
	oct	107040163164
	oct	141164145155
	oct	145156164040
	oct	146151154145
	oct	055156141155
	oct	145040160162
	oct	145166151157
	oct	165163154171
	oct	040165163145
	oct	144040151156
	oct	040125123105
	oct	040106117122
	oct	040104105102
	oct	125107107111
	oct	116107040163
	oct	164141164145
	oct	155145156164
	oct	040143144055
	oct	156141155145
	oct	040160162145
	oct	166151157165
	oct	163154171040
	oct	165163145144
	oct	040151156040
	oct	125123105040
	oct	106117122040
	oct	104105102125
	oct	107107111116
	oct	107040163164
	oct	141164145155
	oct	145156164040
	oct	101114114040
	oct	120122117103
	oct	105104125122
	oct	105123040160
	oct	150162141163
	oct	145040151154
	oct	154145147141
	oct	154054040125
	oct	123105040106
	oct	117122040104
	oct	105102125107
	oct	107111116107
	oct	040117116040
	oct	160162157143
	oct	145144165162
	oct	145055156141
	oct	155145040160
	oct	162145166151
	oct	157165163154
	oct	171040163160
	oct	145143151146
	oct	151145144040
	oct	101114114040
	oct	120122117103
	oct	105104125122
	oct	105123040160
	oct	150162141163
	oct	145040151154
	oct	154145147141
	oct	154054125123
	oct	105040106117
	oct	122040104105
	oct	102125107107
	oct	111116107040
	oct	117116040101
	oct	114114040120
	oct	122117103105
	oct	104125122105
	oct	123040160162
	oct	145166151157
	oct	165163154171
	oct	040163160145
	oct	143151146151
	oct	145144040145
	end
105123040160
	oct	150162141163
	oct	145040151154
	oct	154145147141
	oct	154054125123
	oct	105040106117
	oct	122040104105
	oct	102125107107
	oct	111116107040
	oct	117116040101
	oct	114114040120
	oct	122117103105
	oct	104125122105
	oct	123040160162
	oct	145166151157
	oct	165163154171
	oct	040163160145
	oct	143151146151
	oct	145144040145
	end
120122117103
	oct	105104125122
	oct	105123040160
	oct	150162141163
	oct	145040151154
	oct	154145147141
	oct	154054125123
	oct	105040106117
	oct	122040104105
	oct	102125107107
	oct	111116107040
	oct	117116040101
	oct	114114040120
	oct	122117103105
	oct	104125122105
	oct	123040160162
	oct	145166151157
	oct	165163154171
	oct	040163160145
	oct	143151146151
	oct	145144040000
	end
 



		    cobol_find_secdef.pl1           05/24/89  1045.1rew 05/24/89  0835.3       42318



/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_find_secdef.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 11/18/76 by ORN to eliminate cobol_version_unique include file */
/* Modified since Version 2.0 */

/* format: style3 */
cobol_find_secdef:
     proc (type8_ptr, sectno, hashptr, retptr);

/*  DECLARATION OF THE PARAMETERS  */

dcl	type8_ptr		ptr;			/*  Points to the "type 8" record that contains the name of the section being searched
	for.  (input)  */

dcl	sectno		fixed bin (15);		/*  Contains the section number of the section being searched for.  (input)  */

dcl	hashptr		ptr;			/*  Points to the  string base table.  (input)  */

dcl	retptr		ptr;			/*  Points to the name table buffer entry of the found section definition.  If
	the section name is not found in this load of the name table buffer, retptr is set
	to "null()".  (output)  */



dcl	1 procname	based (retptr),
	  2 size		fixed bin (15),
	  2 line		fixed bin (15),
	  2 column	fixed bin (7),
	  2 type		fixed bin (7),
	  2 string_ptr	ptr,
	  2 prev_rec	ptr,
	  2 info1		bit (1),
	  2 info2		bit (1),
	  2 info3		bit (1),
	  2 info4		bit (1),
	  2 info5		bit (1),
	  2 info6		bit (1),
	  2 info7		bit (1),
	  2 info8		bit (1),
	  2 priority	char (2),
	  2 repl_bits	bit (8),
	  2 section_num	fixed bin (15),
	  2 proc_num	fixed bin (15),
	  2 def_line	fixed bin (15),
	  2 length	fixed bin (7),
	  2 name		char (30);

dcl	template		char (500) based (retptr);
dcl	temp_array	(500) char (1) based (retptr);/*[*/
dcl	arrpntr		(1:512) ptr based (hashptr);	/*]*/
						/*[[[
dcl arrpntr(1:256) ptr based (hashptr);          ]]]*/

dcl	aname		char (30);
dcl	alength		fixed bin (15);
dcl	i		fixed bin (7);

dcl	hashno		fixed bin (15);
dcl	n1		fixed bin (15) based (name_size_ptr);
dcl	name_size_ptr	ptr;
dcl	n		fixed bin (15);
dcl	1 auser_word	based (type8_ptr),
	  2 size		fixed bin (15),
	  2 line		fixed bin (15),
	  2 column	fixed bin (7),
	  2 type		fixed bin (7),
	  2 info1		bit (1),
	  2 info2		bit (1),
	  2 info3		bit (6),
	  2 length	fixed bin (7),
	  2 word		char (30);		/*[*/
dcl	addr		builtin;
dcl	fixed		builtin;
dcl	mod		builtin;
dcl	null		builtin;
dcl	substr		builtin;
dcl	unspec		builtin;			/*]*/


start:
	substr (aname, 1, auser_word.length) = substr (auser_word.word, 1, auser_word.length);
	alength = auser_word.length;
	call hash;				/*  HASH THE SECTION NAME  */

	retptr = arrpntr (hashno);			/*  Get a pointer to the first entry in the name table  buffer string
	with this hash code  */

/*  TRY TO FIND THE SECTION NAME IN THE NAME TABLE BUFFER  */

	do while (retptr ^= null ());

	     if procname.type = 18
	     then do;				/*  The current entry in the name table buffer pointed at by retptr is a section name  */

		     n = size_TOKEN (procname.type) - 3;
		     name_size_ptr = addr (temp_array (n));
		     if alength = n1		/* lengths equal? */
		     then if substr (aname, 1, alength) = substr (template, n + 4, alength)
						/* names the same? */
			then if auser_word.column = procname.proc_num
			     then do;
				     if procname.info5
				     then sectno = procname.section_num;
				     return;
				end;

		end;				/*  The current entry in the name table buffer pointed at by retptr is a section name  */

	     retptr = procname.string_ptr;		/*  Get a pointer to the previous entry in this string of names  */

	end;					/*  DO WHILE  */

/*  When we drop thru to here, retptr is "null()", and the search has not been successful  */

	return;					/*  Simply return  */

hash:
     proc;					/*  AGAIN !!!  */

	hashno = 0;
	do i = 1 to alength;
	     hashno = hashno + fixed (unspec (substr (aname, i, 1)), 15);
	end;

/*[*/
	hashno = mod (hashno, 512) + 1;		/*]*/
						/*[[[    hashno=mod(hashno,256)+1;     ]]]*/

     end hash;

%include cobol_size_values;

     end cobol_find_secdef;
  



		    cobol_generate_report.pl1       05/24/89  1045.1rew 05/24/89  0835.2      763767



/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_generate_report.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 10/25/82 by FCH, [5.1-5], test for missing PIC clause, phx13531 */
/* Modified on 10/22/82 by FCH, [5.1-4], control footing groups not exec, phx13755 */
/* Modified on 02/10/82 by FCH, [5.1-3], no period after WRITE state, phx12454(BUG526) */
/* Modified on 12/22/81 by FCH, [5.1-2], LINE-COUNTER and PAGE-COUNTER must be qualif, phx12120(BUG522) */
/* Modified on 12/21/81 by FCH, [5.1-1], set bit count for rw incl files, phx11819(BUG517) */
/* Modified on 08/31/81 by FCH, [5.0-1], dont enter RW source into the listing, BUG498 */
/* Modified on 06/29/81 by FCH, [4.4-1], dont emit go to dep if only one group, BUG479(TR09695) */
/* Modified since Version 4.4 */






/* format: style3 */
cobol_generate_report:
     proc (rep_list_loc, f_l, tbit);

declare	rep_list_loc	ptr,
	f_l		fixed bin,
	tbit		bit (1);
declare	(g_i_count, control_count, group_number, line_number, field_number)
			fixed bin;
declare	gch		char (32) varying;




declare	cobol_io_$cobol_msf_start
			entry (ptr, ptr);
declare	cobol_swf_get	entry (ptr, bit (32), ptr, fixed bin);
declare	ioa_		entry options (variable);
declare	ioa_$rsnnl	entry options (variable);



declare	(addr, substr, null, size, length, addrel, abs)
			builtin;


/* initialization */
	current_report_loc = rep_list_loc;
	alf_lit_ptr = addr (ALF);
	rwfp = cobol_m1fp;
	ddloc, pdloc = 1;
	first_line = f_l;
	trace_bit = tbit;
	b_incr = 0;
	buffer_size = 132;

	call line_init;
	call gen_S;				/* process the reports */

	do while (current_report_loc ^= null ());


/*[5.1-2]*/
	     if report.page.count ^= 0
	     then call gen_report;

	     current_report_loc = report.rep_next;

	end;

	rwdd = "1"b;
	call rep_term;

/*[5.1-1]*/
	call hcs_$set_bc_seg (cobol_rwdd, 9 * (ddloc - 1), CODE);

/*[5.1-1]*/
	if CODE ^= 0
	then go to err;

/*[5.1-1]*/
	call hcs_$set_bc_seg (cobol_rwpd, 9 * (pdloc - 1), CODE);

/*[5.1-1]*/
	if CODE ^= 0
	then go to err;

	return;

err:						/*[5.1-1]*/
	return;

/*[5.1-1]*/
declare	hcs_$set_bc_seg	entry (ptr, fixed bin (24), fixed bin (35));
						/*[5.1-1]*/
declare	CODE		fixed bin (35);

declare	code		char (32) varying;

gen_report:
     proc;

declare	i		fixed bin;		/* process a report */

	call gen_report_init;

	rwdd = "1"b;


	call rep_descr;				/* report description */

	rwdd = "0"b;


	call emit_rep_pn ("R", 1);			/* report_name section. */
	call test_control_tables;

	call gen_scb;				/* SCB. */

	if report.cf ^= null ()
	then call gen_reset_sums;			/* RESET-SUM. */

	call gen_init;				/*  INIT. */
	call gen_term;				/* TERM. */

	if efg
	then call gen_first_gen;

	call emit_p_br;				/* P-BR. */
	call emit_pincr;				/* P-INCR. */
	call emit_b_abs;				/* B-ABS. */
	call emit_w_bl;				/* W-BL. */

	if control_count ^= 0
	then do;

		call emit_comment ("CONTROL TO PREVIOUS", 32);
		call control_function (1, "C-TO-P", "P");
						/* gen_c_to_p */

		call emit_comment ("CONTROL TO SHADOW", 32);
		call control_function (2, "C-TO-S", "S");
						/* gen_c_to_s */

		call emit_comment ("PREVIOUS TO CONTROL", 32);
		call control_function (3, "P-TO-C", "P");
						/* gen_s_to_c */

		call emit_comment ("SHADOW TO CONTROL", 32);
		call control_function (4, "S-TO-C", "S");
						/* gen_s_to_c */

	     end;

	if report.ch ^= null ()
	then do;
		ch_table_ptr = report.ch;		/* exists(CH group) */

		call emit_comment ("CH GROUPS", 32);

		call emit_exit_para ("CH-EXIT");	/* CH-EXIT. exit. */

		call emit_comment ("EXECUTE CH GROUPS", 32);
		call gen_c_h;

		gch = "CH";

		if ch_table.ch_loc (0) ^= null ()
		then do;
			call emit_comment ("CH FINAL GROUP", 32);
			call ch_group (0);
		     end;

		do i = 1 by 1 to ch_table.ch_size;

		     call emit_comment ("CH GROUP", 32);

		     call ch_group (i);		/* CH-i. i = 0(1)... */

		end;
	     end;

	if report.de ^= null ()
	then do;
		de_table_ptr = report.de;		/* exists(DE group) */

		call emit_comment ("DE GROUPS", 32);

		call emit_exit_para ("DE-EXIT");	/* DE-EXIT. exit. */

		gch = "DE";

		if de_table.det_subtot_all.count ^= 0
		then call emit_stall_para;		/* subtot for all groups */


		if de_table.det_size ^= 0
		then do i = 1 by 1 to de_table.det_size;

			call emit_comment ("DE GROUP", 32);

			call de_group (i);		/* DE-i. i = 1(1)... */

		     end;
		else call de_group (0);

	     end;

	if report.cf ^= null ()
	then do;
		cf_table_ptr = report.cf;		/* exists(CF group) */

		call emit_comment ("CF GROUPS", 32);

		call emit_exit_para ("CF-EXIT");	/* CH-EXIT. exit. */

		call emit_comment ("EXECUTE CF GROUPS", 32);
		call gen_c_f;

		gch = "CF";

		if cf_table.cf_loc (0) ^= null ()
		then do;
			call emit_comment ("CF FINAL GROUP", 32);
			call cf_group (0);
		     end;

		do i = 1 by 1 to cf_table.cf_size;

		     call emit_comment ("CF GROUP", 32);

		     call cf_group (i);		/* CF-i. i = 0(1)... */

		end;
	     end;

	if report.rh ^= null ()
	then do;
		rt_ptr = report.rh;			/* exists(RH group) */

		call emit_comment ("RH GROUP", 32);

		call emit_group_name ("R-H", 10000);	/* RH. */
		call use_proc ("R-H-EXIT");

		gch = "R-H";

		call emit_lines (10000);		/* emit lines in group */
		call emit_exit_para ("R-H-EXIT");	/* RH-EXIT. exit. */
	     end;

	if report.rf ^= null ()
	then do;
		rt_ptr = report.rf;			/* exists(RF group) */

		call emit_comment ("RF GROUP", 32);

		call emit_group_name ("R-F", 10000);	/* RF. */
		call use_proc ("R-F-EXIT");

		gch = "R-F";

		call emit_lines (10000);		/* emit lines in group */
		call emit_exit_para ("R-F-EXIT");	/* RF-EXIT. exit. */
	     end;

	if report.ph ^= null ()
	then do;
		rt_ptr = report.ph;			/* exists(PH group) */

		call emit_comment ("PH GROUP", 32);

		call emit_group_name ("P-H", 10000);	/* PH. */
		call use_proc ("P-H-EXIT");

		gch = "P-H";

		call emit_lines (10000);		/* emit lines in group */
		call emit_exit_para ("P-H-EXIT");	/* PH-EXIT. exit. */
	     end;

	if report.pf ^= null ()
	then do;
		rt_ptr = report.pf;			/* exists(PF group) */

		call emit_comment ("PF GROUP", 32);

		call emit_group_name ("P-F", 10000);	/* PF. */
		call use_proc ("P-F-EXIT");

		gch = "P-F";

		call emit_lines (10000);
		call emit_exit_para ("P-F-EXIT");	/* PF-EXIT. exit. */
	     end;



     end;

rep_term:
     proc;
	call skip_to_a;				/* A margin */
	call append_var_string ("procedure");		/* procedure */
	call emit_line;
     end;

go_to_dep:
     proc (string, j);

declare	string		char (32) varying,
	j		fixed bin;

declare	i		fixed bin;

	call skip_to_b;				/* B margin */
	call append_sep_var_string ("go");		/* go */
	call append_sep_var_string ("to");		/* to */

	do i = 1 by 1 to j;

	     call qual_int_by_rep_proc (string, i);

	end;

	call append_sep_var_string ("depending");	/* depending */
	call append_sep_var_string ("on");		/* on */
	call qual_by_rep ("C-L");
	call append_period;				/* . */

     end;

control_function:
     proc (type, string_1, string_2);

declare	type		fixed bin,
	(string_1, string_2)
			char (32) varying;

declare	i		fixed bin;

/*
				function		type	string_1	string_2

				gen_c_to_p	1	C-TO-P-	P-
				gen_c_to_s	2	C-TO-S-	S-
				gen_p_to_c	3	P-TO-C-	P-
				gen_s_to_c	4	S-TO-C-	S-
*/

	if qual_name_seq_ptr = null ()
	then return;

	call emit_pn (string_1);			/* string_1. */
						/*[4.4-1]*/
	if cf_table.cf_size > 1
	then call go_to_dep (string_1, cf_table.cf_size);

	do i = 1 by 1 to cf_table.cf_size;

/*[4.4-1]*/
	     if cf_table.cf_size > 1
	     then call emit_ind_pn (string_1, i);	/* string_1-i. */

	     call skip_to_b;			/* B margin */
	     call append_sep_var_string ("move");	/* move */

	     go to CF1 (type);

CF1 (1):						/* gen_c_to_p */
CF1 (2):						/* gen_c_to_s */
	     call append_control_name (i);		/* control_name */

	     go to CF1_0;

CF1 (3):						/* gen_p_to_c */
CF1 (4):						/* gen_s_to_c */
	     call control_item (string_2, i);		/* control_data_item */

	     go to CF1_0;

CF1_0:
	     call append_sep_var_string ("to");		/* to */

	     go to CF2 (type);

CF2 (1):						/* gen_c_to_p */
CF2 (2):						/* gen_c_to_s */
	     call control_item (string_2, i);

	     go to CF2_0;

CF2 (3):						/* gen_p_to_c */
CF2 (4):						/* gen_c_to_s */
	     call append_control_name (i);		/* control_name */

	     go to CF2_0;

CF2_0:
	     call append_period;			/* . */

	end;

	call emit_exit_para (string_1 || "-EXIT");	/* string_1-EXIT. exit. */

     end;

gen_S:
     proc;

	rwdd = "0"b;

	call emit_section ("SSSS");			/* SSSS section. */
	call emit_pn ("S");				/* S. */
	call SENT ("stop run");			/*     stop run. */
	call emit_section ("SSS");			/* SSS section. */
	call emit_pn ("S");				/* S. */
	call SENT ("move 1 to SS");			/* move 1 to SS. */

	rwdd = "1"b;

	call descr_line (1, "XXXXX");			/* 01 XXXXX. */
	call descr_line_int (2, "SS", "0");		/* 02 SS comp-6 value 0. */
	call descr_line_int (2, "S-PI", "0");		/* 02 S-PI comp-6 value 0 */

     end;





emit_exit_para:
     proc (string);

declare	string		char (32) varying;

	call skip_to_a;				/* A margin */
	call append_sep_var_string (string);		/* string */
	call append_var_string (".");			/* . */

	call skip_to_b;				/* B margin */
	call append_sep_var_string ("exit");		/* exit */
	call append_period;				/* . */

     end;

control_item:
     proc (string, i);

declare	string		char (32) varying,
	i		fixed bin;

	call qual_by_int (string, i);			/* string-i */

	call append_sep_var_string ("of");		/* of */
	call append_sep_token (report.rep_name_ptr);	/* report_name */

     end;

dl:
     proc (lev_num, name);

declare	lev_num		fixed bin,
	name		char (32) varying;

	call append_level_number (lev_num);		/* level number */
	call append_var_string (name);		/* name */
	call append_sep_var_string ("comp-6");		/* comp-6 */

     end;

emit_pn:
     proc (name);

declare	name		char (32) varying;

	call skip_to_a;				/* A margin */
	call append_sep_var_string (name);		/* name */
	call append_period;				/* . */

     end;

def_val_clauses:
     proc;					/* define value clauses for the	*/
						/* page parameters in a report	*/
						/* description			*/

/* PAGE clause */

	go to P (report.page.type);

P (0):						/* PAGE not defined */
	call descr_line_int (2, "P-G", "0");		/* 02 PAGE value 0 */
	call descr_line_int (2, "H-D", "0");		/* 02 HEADING value 0 */
	call descr_line_int (2, "F-D", "0");		/* 02 FIRST-DETAIL value 0 */
	call descr_line_int (2, "L-D", "0");		/* 02 LAST-DETAIL value 0 */
	call descr_line_int (2, "F-T", "0");		/* 02 FOOTING value 0 */

	return;

P (1):						/* PAGE integer */
P (2):						/* PAGE expression */
	call pg_vcl ("P-G", addr (report.page));	/* 02 PAGE value integer */

	go to P0;

P0:						/* HEADING clause */
	go to H (report.heading.type);

H (0):						/* HEADING not defined */
	call descr_line_int (2, "H-D", "1");		/* 02 HEADING value 1 */

	go to H0;

H (1):						/* HEADING integer */
H (2):						/* HEADING expression */
	call pg_vcl ("H-D", addr (report.heading));	/* 02 HEADING value integer */

	go to H0;

H0:						/* FIRST-DETAIL */
	go to FD (report.first_detail.type);

FD (0):						/* FIRST-DETAIL not defined */
	go to HH (report.heading.type);

HH (0):						/* HEADING not defined */
	call descr_line_int (2, "F-D", "1");		/* 02 FIRST-DETAIL value 1 */

	go to HH0;

HH (1):						/* HEADING integer */
HH (2):						/* HEADING expression */
	call pg_vcl ("F-D", addr (report.heading));	/* 02 FIRST-DETAIL value integer */

	go to HH0;

HH0:
	go to FD0;

FD (1):						/* FIRST-DETAIL integer */
FD (2):						/* FIRST-DETAIL expression */
	call pg_vcl ("F-D", addr (report.first_detail));	/* 02 FIRST-DETAIL value integer */

	go to FD0;

FD0:						/* LAST-DETAIL */
	go to LD (report.last_detail.type);

LD (0):						/* LAST-DETAIL not defined */
	go to F (report.footing.type);

F (0):						/* FOOTING not defined */
	call pg_vcl ("L-D", addr (report.page));	/* 02 LAST-DETAIL value integer */
	call pg_vcl ("F-T", addr (report.footing));	/* 02 FOOTING value integer */

	go to F0;

F (1):						/* FOOTING integer */
F (2):						/* FOOTING expression */
	call pg_vcl ("L-D", addr (report.footing));	/* 02 LAST-DETAIL value integer */
	call pg_vcl ("F-T", addr (report.footing));	/* 02 FOOTING value integer */

	go to F0;

F0:
	go to LD0;

LD (1):						/* LAST-DETAIL integer */
LD (2):						/* LAST-DETAIL expression */
	call pg_vcl ("L-D", addr (report.last_detail));	/* 02 LAST-DETAIL value integer */

	go to FF (report.footing.type);

FF (0):						/* FOOTING not defined */
	call pg_vcl ("F-T", addr (report.last_detail));	/* 02 FOOTING value integer */

	go to FF0;

FF (1):						/* FOOTING integer */
FF (2):						/* FOOTING expression */
	call pg_vcl ("F-T", addr (report.footing));	/* 02 FOOTING value integer */

	go to FF0;

FF0:
	go to LD0;

LD0:
     end;

pg_vcl:
     proc (name, int_loc);

declare	name		char (32) varying,
	int_loc		ptr;



	integer_spec_ptr = int_loc;

	call append_level_number (2);			/* 02 */
	call append_var_string (name);		/* name */
	call append_sep_var_string ("comp-6");		/* comp-6 */
	call append_sep_var_string ("value");		/* value */
	call append_sep_integer (integer_spec.count);	/* integer */
	call append_period;				/* . */

     end;

descr_line:
     proc (lev_num, name);

declare	lev_num		fixed bin,
	name		char (32) varying;

	call dl (lev_num, name);			/* lev_num name comp-6 */
	call append_period;				/* . */

     end;

descr_line_int:
     proc (lev_num, name, value);

declare	lev_num		fixed bin,
	name		char (32) varying,
	value		char (32) varying;

	call dl (lev_num, name);			/* lev_num name comp-6 */
	call append_sep_var_string ("value");		/* value */
	call append_sep_var_string (value);		/* integer */
	call append_period;				/* . */

     end;

gen_scb:
     proc;

declare	i		fixed bin;

	qual_name_seq_ptr = report.controls.loc;

	if qual_name_seq_ptr ^= null ()
	then do;

		call emit_comment ("SET CONTROL BREAK", 32);
		call emit_pn ("SCB");		/* SCB. */

		do i = 1 by 1 to qual_name_seq.qns_size;

		     qual_name_ptr = qual_name_seq.qns_loc (i);

		     call skip_to_b;		/* B margin */

		     if i ^= 1
		     then call append_sep_var_string ("else");
						/* else */
		     call append_sep_var_string ("if"); /* if */
		     call qual_int_by_rep ("P", i);	/* P-i of report-name */
		     call append_sep_var_string ("not");/* not */
		     call append_sep_var_string ("equal");
						/* equal */
		     call append_qual_name (qual_name_ptr);
						/* control */
		     call emit_line;

		     b_incr = 7;

		     call emit_compute_lhs ("C-L", 0);	/* compute CLEVEL of report_name = */
		     call append_sep_integer (i);	/* i */
		     call emit_line;

		     b_incr = 0;
		end;
		call de_word ("else");		/* else */

		b_incr = 7;

		call emit_compute_lhs ("C-L", 0);	/* compute CLEVEL of report_name = */
		call append_sep_var_string ("0");	/* 0 */
		call append_period;			/* . */

		b_incr = 0;

		if g_i_count ^= 0
		then do;

			call emit_rel_int_test ("C-L", "not equal", 0);
						/* if CLEVEL not = 0 */

			b_incr = 3;

			call emit_move_cv_sent ("all zeros", "GR-I");

			b_incr = 0;

		     end;
	     end;

     end;

qual_by_rep:
     proc (name);

declare	name		char (32) varying;

	call append_sep_var_string (name);		/* name */
	call append_sep_var_string ("of");		/* of */
	call append_sep_token (report.rep_name_ptr);	/* report name */

     end;

qual_by_int:
     proc (name, i);

declare	name		char (32) varying,
	i		fixed bin;

	call append_sep_var_string (name);		/* name */
	call append_var_string ("-");			/* - */
	call append_integer (i);			/* i */

     end;

qual_int_by_rep:
     proc (name, i);

declare	name		char (32) varying,
	i		fixed bin;

	call qual_by_int (name, i);			/* name-i */
	call append_sep_var_string ("of");		/* of */
	call append_sep_token (report.rep_name_ptr);	/* report_name */

     end;

emit_ind_pn:
     proc (name, i);

declare	name		char (32) varying,
	i		fixed bin;


	call skip_to_a;				/* A margin */

	if i < 10000
	then call qual_by_int (name, i);
	else call append_var_string (name);		/* name[-i] */

	call append_period;				/* . */
     end;

emit_group_name:
     proc (name, lev);

declare	name		char (32) varying,
	lev		fixed bin;

	call emit_ind_pn (name, lev);

	if root.rt_name_ptr ^= null ()
	then call emit_gp_pn (1);
     end;

emit_gp_pn:
     proc (i);

declare	i		fixed bin;

	call skip_to_a;				/* A margin */
	call append_var_string ("G");			/* G */

	if i ^= 0
	then call append_token (root.rt_name_ptr);	/* token */
	else call append_token (report.rep_name_ptr);

	call append_period;				/* . */
     end;

rep_descr:
     proc;

declare	i		fixed bin;

	call emit_comment ("REPORT DESCRIPTION", 32);
	call append_level_number (1);			/* 01 */
	call append_token (report.rep_name_ptr);	/* report name */
	call append_period;				/* . */

	call def_val_clauses;			/* define val clauses, page params */

	call descr_line (2, "C-L");
	call descr_line (2, "GEN-CTR");
	call descr_line (2, "line-counter");
	call descr_line (2, "page-counter");
	call descr_line (2, "LN-C");
	call descr_line (2, "B-C");
	call descr_line (2, "SNGI");
	call descr_line (2, "S-P");

	call descr_pic_line (2, "RN", "pic x value ""0""");

	g_i_count = report.g_i_count;

	if g_i_count ^= 0
	then do;

		call emit_comment ("GROUP INDICATE CLAUSES", 32);



		call append_level_number (2);		/* 02 */
		call append_var_string ("GR-I pic x("); /* GR-I pic x(*/
		call append_integer (g_i_count);	/* report count */
		call append_var_string (")");		/* ) */
		call append_period;			/* . */

		call append_level_number (2);		/* 02 */
		call append_var_string ("G-I redefines GR-I");
						/* G-I redefines GROUP-INDICATE */
		call append_period;			/* . */

		do i = 1 by 1 to g_i_count;

		     call append_level_number (3);	/* 03 */
		     call append_var_string ("G-I-");	/* G-I- */
		     call append_integer (i);		/* i */
		     call append_sep_var_string ("pic x");
						/* pic x */
		     call append_period;		/* . */

		end;

	     end;

	if report.cf ^= null ()
	then call def_sum_counters;



	if control_count ^= 0
	then do;
		call emit_comment ("PREVIOUS AND SHADOW VALUES", 32);
		call control_struct ("P-V", "P-");
		call control_struct ("S-H", "S-");
	     end;

	call def_line_buffer;
     end;

control_struct:
     proc (string_1, string_2);

declare	(string_1, string_2)
			char (32) varying;
declare	i		fixed bin;

	call append_level_number (2);			/* 02 */
	call append_var_string (string_1);		/* name */
	call append_period;				/* . */

	do i = 1 by 1 to control_count;

	     call append_level_number (3);		/* 03 */
	     call append_var_string (string_2);		/* name */
	     call append_integer (i);			/* i */
	     call append_sep_var_string ("renames");	/* renames */
	     call append_control_name (i);		/* control name */
	     call append_period;			/* . */

	end;

     end;

append_control_name:
     proc (control_num);

declare	control_num	fixed bin;

	qual_name_ptr = control_name_table.cnt_loc (control_num);

	call append_qual_name (qual_name_ptr);

     end;

def_sum_counters:
     proc;					/* define the sum counters associated	*/
						/* with the CF groups in a report	*/
declare	i		fixed bin;

	call emit_comment ("SUM COUNTERS", 32);

	do i = 0 by 1 to cf_table.cf_size;

	     if cf_table.cf_sum_chain (i) ^= null ()
	     then do;				/* CF group defines sum counters */

		     tn_ptr = cf_table.cf_loc (i);	/* loc of CF node */

		     do while (tn_ptr ^= null ());

			call append_level_number (term_node.tn_level + 1);
						/* level number */

			if term_node.tn_name_ptr = null ()
			then call append_var_string ("filler");
			else call append_token (term_node.tn_name_ptr);

/* name */

			if term_node.tn_type = 2	/* root, non-term */
			then if term_node.data_type = 3
						/* sum counter */
			     then call sum_descr;
			     else call append_sep_var_string ("pic x");

			call append_period;		/* . */

			tn_ptr = term_node.tn_next;

		     end;

		end;
	end;

     end;

declare	buffer_size	fixed bin;




def_line_buffer:
     proc;					/* define the line buffer for a report */

declare	p		ptr;
declare	gn		fixed bin;

	call emit_comment ("BLANK LINE BUFFER", 32);
	call emit_lev_item (2, "filler comp-6", "");
	call emit_blank_lines_data;			/* 02 BLANK-LINES ... */
	call emit_end_page_rec;

	call emit_comment ("LINE BUFFER", 32);
	call buffer_name_def ("REP-LINE");		/* 02 REP-LINE-i */
	call emit_lev_item (3, "S-Z comp-6", "");	/* 03 SIZE comp-6 */

	call emit_lev_item (3, "C-D pic xx", """" || code || """");
						/* 03 CODE pic xx value "cc". */
	call emit_lev_item (3, "T-Y pic xx", """: """);	/* 03 TYPE pic xx value """: """. */
	call append_level_number (3);			/* 03 */
	call append_var_string ("B-F");		/* BUFFER */
	call append_pic_x (buffer_size);		/* pic x(buffer_size) */
	call append_period;				/* . */

	line_rd = "1"b;

	if report.rh ^= null ()
	then do;
		gch = "R-H";
		call line_redef (report.rh, 10000);
	     end;
	if report.rf ^= null ()
	then do;
		gch = "R-F";
		call line_redef (report.rf, 10000);
	     end;
	if report.ph ^= null ()
	then do;
		gch = "P-H";
		call line_redef (report.ph, 10000);
	     end;
	if report.pf ^= null ()
	then do;
		gch = "P-F";
		call line_redef (report.pf, 10000);
	     end;

	gch = "DE";

	de_table_ptr = report.de;

	if report.de ^= null ()			/* de groups */
	then do gn = 1 by 1 to de_table.det_size;

		call line_redef (de_table.det_loc (gn), gn);

	     end;

	gch = "CH";

	ch_table_ptr = report.ch;

	if report.ch ^= null ()			/* cf_groups */
	then do gn = 0 by 1 to ch_table.ch_size;

		call line_redef (ch_table.ch_loc (gn), gn);

	     end;

	gch = "CF";

	cf_table_ptr = report.cf;

	if report.cf ^= null ()
	then do gn = 0 by 1 to cf_table.cf_size;

		p = cf_table.cf_loc (gn);
		if p ^= null ()
		then call line_redef (p, gn);

	     end;


	call emit_write_line;
     end;



emit_lev_tok_item:
     proc (lev, p);

declare	lev		fixed bin,
	p		ptr;


	call append_level_number (lev);		/* lev */
	call append_token (p);			/* token */
	call append_period;				/* . */
     end;



emit_lev_item:
     proc (lev, def, val);

declare	lev		fixed bin,
	(def, val)	char (32) varying;

	call append_level_number (lev);		/* level number */
	call append_sep_var_string (def);		/* definition of field */

	if val ^= ""
	then call append_value (val);			/* value val */

	call append_period;				/* . */
     end;

append_value:
     proc (val);

declare	val		char (32) varying;

	call append_sep_var_string ("value");		/* value */
	call append_sep_var_string (val);		/* val */
     end;


declare	line_rd		bit (1);



line_redef:
     proc (node_ptr, gn);				/* emit redef of line buffer */
declare	node_ptr		ptr,
	(gn, fill_size)	fixed bin;
declare	(ltn, first, last, size, field_size, left_fill_size, lev)
			fixed bin;

	if node_ptr = null ()
	then return;


	if line_rd
	then do;
		call emit_comment ("REDEFINITIONS, LINE BUFFER", 32);
		line_rd = "0"b;
	     end;


	call emit_comment (gch || " GROUP", 32);

	rt_ptr = node_ptr;
	LINE_table_ptr = root.line_table_ptr;
	FIELD_table_ptr = root.field_table_ptr;

	do line_number = 1 by 1 to LINE_table.LT_size;

	     call append_level_number (2);		/* 02 */
	     call line_redef_name (gn, line_number);	/* line name */
	     call append_sep_var_string ("redefines");
	     call qual_by_int ("REP-LINE", report.rep_num);
	     call append_period;			/* . */

	     call emit_write_fields ("S-Z");




	     first = LINE_table.LT_first_field (line_number);
	     size = LINE_table.LT_field_count (line_number);
	     last = first + size - 1;
	     field_number = 1;

	     do ltn = first by 1 to last;



		tn_ptr = FIELD_table.FT_loc (ltn);
		field_size = FIELD_table.FT_field_size (ltn);
		left_fill_size = FIELD_table.FT_left_fill_size (ltn);


		if term_node.tn_name_ptr = null () | term_node.data_type = 3
		then lev = 3;
		else do;
			call emit_lev_tok_item (3, term_node.tn_name_ptr);
			lev = 4;
		     end;

		if left_fill_size ^= 0
		then call fill (lev, "filler", left_fill_size);
						/* lev filler pic x(ii) */


		call append_level_number (lev);	/* lev */
		call field_name ("F-", field_number);	/* f-i */

		tn_ptr = FIELD_table.FT_loc (ltn);

		call emit_picture;

		if term_node.sign ^= 0
		then call sign_clause;
		if term_node.blank_zero & ^term_node.non_num
		then call blank_zero;
		if term_node.just_right & term_node.non_num
		then call just_right;
		if term_node.usage_disp
		then call usage;

		call append_period;			/* . */

		field_number = field_number + 1;

	     end;


	     fill_size = LINE_table.LT_line_size (line_number);

	     if fill_size < buffer_size
	     then call fill (3, "filler", buffer_size - fill_size);



	end;

     end;

blank_zero:
     proc;

	call append_sep_var_string ("blank");
	call append_sep_var_string ("when");
	call append_sep_var_string ("zero");
     end;

usage:
     proc;

	call append_sep_var_string ("usage");
	call append_sep_var_string ("display");
     end;

just_right:
     proc;

	call append_sep_var_string ("justified");
	call append_sep_var_string ("right");
     end;
emit_picture:
     proc;					/*[5.1-5]*/
	if term_node.picture = null ()		/*[5.1-5]*/
	then call append_sep_var_string ("pic x");	/*[5.1-5]*/
	else do;
		call append_sep_var_string ("pic");	/* pic */
						/*[5.1-5]*/
		call append_sep_token (term_node.picture);
						/* picture */
						/*[5.1-5]*/
	     end;
     end;
fill:
     proc (lev, name, size);

declare	(lev, size)	fixed bin,
	name		char (32) varying;

	call append_level_number (lev);		/* level number */
	call append_sep_var_string (name);		/* name */
	call append_pic_x (size);			/* pic x (size) */


	call append_period;				/* . */
     end;

emit_blank_lines_data:
     proc;

	call buffer_name_def ("BLANK-LINES");		/* 02 BLANK-LINES-i */
	call bld ("4", "r ");
	call emit_lev_item (3, "BL-C comp-6", "");	/* 03 BLANK-COUNT comp-6. */

     end;

append_pic_x:
     proc (size);

declare	size		fixed bin;

	call append_sep_var_string ("pic x(");		/* pic x( */
	call append_integer (size);			/* size */
	call append_var_string (")");			/* ) */
     end;

sign_clause:
     proc;					/* sign clause */
declare	type		fixed bin;

	type = term_node.sign;

	if type = 0
	then return;				/* missing */

	call append_sep_var_string ("sign");		/* sign */


	if type = 1 | type = 3
	then call append_sep_var_string ("leading");	/* leading */
	else call append_sep_var_string ("trailing");	/* trailing */

	if type = 1 | type = 2
	then return;

	call append_sep_var_string ("separate");	/* separate */

     end;

line_redef_name:
     proc (group_num, line_num);

declare	(group_num, line_num)
			fixed bin;		/* G-i-L-j */
	call append_sep_var_string (gch);		/* gch */

	if group_num < 10000
	then do;
		call append_var_string ("-");		/* - */
		call append_integer (group_num);	/* group_num */
	     end;

	call append_var_string ("-L-");		/* -L- */

	call append_integer (line_num);

     end;
emit_pfex:
     proc (string, i);

declare	string		char (32) varying,
	i		fixed bin;

	call emit_ind_perf (string, i);
	call append_sep_var_string ("thru");
	call qual_int_by_rep_proc (string || "-EXIT", 10000);
	call append_period;
     end;

field_name:
     proc (st, field_num);				/* F-j */
declare	st		char (32) varying,
	field_num		fixed bin;

	call skip_to_b;				/* B margin */
	call append_var_string (st);			/* st */
	call append_integer (field_num);		/* j */

     end;

qual_field_name:
     proc (group_num, line_num, field_num);		/* F-i of G-j-L-k of report_name */
declare	(group_num, line_num, field_num)
			fixed bin;

	call field_name ("F-", field_num);		/* F-i */
	call append_sep_var_string ("of");		/* of */
	call line_redef_name (group_num, line_num);	/* G-j-L-k */
	call append_sep_var_string ("of");		/* of */
	call append_sep_token (report.rep_name_ptr);	/* report_name */

     end;

gen_init:
     proc;					/* INIT of report_name		*/
						/* initialization for a report	*/
	call emit_comment ("INITIATE REPORT", 32);
	call emit_rep_pn ("I", 0);			/* Ireport_name. */
	call emit_reset_state ("B-C", "0");		/* compute BODY-COUNT = 0 */
	call emit_reset_sent ("GEN-CTR", "0");		/* compute GEN-CTR = 0. */


	if report.ng_exists
	then call emit_reset_sent ("SNGI", "0");	/* compute SNGI = 0. */
	if report.controls.loc ^= null ()
	then call emit_reset_sent ("C-L", "1");		/* compute CLEVEL = 1. */


	call emit_reset_sent ("line-counter", "0");	/* compute line-counter = 0. */

	call emit_reset_sent ("page-counter", "1");	/* compute page-counter = 1. */

	if g_i_count ^= 0
	then call emit_move_cv_sent ("all zeros", "GR-I");/* move all zeros to GROUP-INDICATE. */

	if report.cf ^= null ()
	then call emit_perf_sent ("RESET-SUMS");	/* perform RESET-SUMS. */


     end;

gen_term:
     proc;

declare	(abs, rel, line, type, page)
			fixed bin;

	call emit_comment ("TERMINATE REPORT", 32);
	call emit_rep_pn ("T", 0);			/* Treport-name. */

	if report.controls.loc ^= null ()		/* compute CLEVEL of report_name = 0 */
	then do;
		call emit_reset_sent ("C-L", "0");
		call cb_save;
	     end;

	if report.cf ^= null ()
	then do;					/* exists(CF group) */


		call emit_perf_exit_sent ("C-F");	/* perform C-F of report_name. */


		if report.cf -> cf_table.cf_loc (0) ^= null ()
		then call emit_pfex ("CF", 0);	/* perform CF-0 of report_name. */
	     end;
	if report.controls.loc ^= null ()
	then call cb_restore;

	page = report.page.count;

	if report.pf ^= null ()
	then do;					/* exists(PF group */
		rt_ptr = report.pf;

		type = root.next_group.type;

		call emit_bl_abs (root.group_desc.line);/* (i1) root.group_desc.lines PF(abs) */
		call emit_perf_exit_sent ("P-F");	/* perform PF of report_name. */


		go to PFNG (type);

PFNG (0):						/* NG clause (missing) */
		if report.rf ^= null ()
		then do;
			rt_ptr = report.rf;		/* exists(RF group) */
			type = root.group_desc.type;
			line = root.group_desc.line;

			go to rf0 (type);
rf0 (0):
			go to rf00;
rf0 (1):						/* RF(abs) */
			call emit_ABS (line - 1);	/* (i1-1) lines */
			call append_period;
			go to rf00;
rf0 (2):						/* RF(rel) */
			call emit_bl_rel (line);	/* (j1-1) lines */
			if line > 0
			then call append_period;
			go to rf00;
rf0 (3):						/* RF(page) */
			call emit_ABS (page + line);	/* (P + i1) lines */
			call append_period;
			go to rf00;

rf00:
			call emit_perf_exit_sent ("R-F");
						/* perform RF of report_name. */
		     end;

		go to PFNG0;

PFNG (1):						/* NG(abs) */
		abs = root.next_group.value;		/* NG(i1) */

		if report.rf ^= null ()
		then do;
			rt_ptr = report.rf;		/* exists(RF group) */
			type = root.group_desc.type;
			line = root.group_desc.line;

			go to rf1 (type);
rf1 (0):
			go to rf10;
rf1 (1):						/* RF(abs) */
			call emit_ABS (line - 1);	/* (i1-1) lines */
			go to rf10;

rf1 (2):						/* RF(rel) */
			call emit_bl_rel (abs + line);/* (abs + j1) lines */
			go to rf10;

rf1 (3):						/* RF(page) */
			call emit_ABS (page + line);	/* (P + i1) lines */
			go to rf10;

rf10:
			call append_period;

			call emit_perf_exit_sent ("R-F");
						/* perform RF of report_name. */

		     end;

		else call emit_ABS (root.group_desc.line - 1);
						/* (i1-1) lines RF group missing */

		go to PFNG0;

PFNG (2):						/* NG(rel) */
		rel = root.next_group.value;		/* NG(j1) */

		if report.rf ^= null ()
		then do;
			rt_ptr = report.rf;		/* exists(RF group) */
			type = root.group_desc.type;
			line = root.group_desc.line;

			go to rf2 (type);
rf2 (0):
			go to rf20;
rf2 (1):						/* RF(abs) */
			call emit_ABS (line - 1);	/* (i1 - 1) lines */
			go to rf20;

rf2 (2):						/* RF(rel) */
			call emit_bl_rel (rel + line);/* (rel + j1) lines */
			go to rf20;

rf2 (3):						/* RF(page) */
			call emit_ABS (page + line);	/* (page + i1) lines */
			go to rf20;

rf20:
			call append_period;

			call emit_perf_exit_sent ("R-F");
						/* perform RF or report_name. */

		     end;

		go to PFNG0;

PFNG0:
	     end;					/* ^exists(PF group)) */
	else if report.rf ^= null ()
	then do;
		rt_ptr = report.rf;			/* exists(RF group) */
		type = root.group_desc.type;
		line = root.group_desc.line;

		go to rf3 (type);
rf3 (0):
		go to rf30;
rf3 (1):						/* RF(abs) */
		call emit_ABS (line - 1);		/* (i1 - 1) lines */
		go to rf30;

rf3 (2):						/* RF(rel) */
		call emit_bl_rel (line);		/* (j1) lines */
		go to rf30;

rf3 (3):						/* RF(page) */
		call emit_ABS (page + line);		/* (P + i1) lines */
		go to rf30;

rf30:
		call append_period;

		call emit_perf_exit_sent ("R-F");	/* perform RF of report_name. */

	     end;

	call emit_ABS (page + 1);
	call append_period;				/* fill page with blank lines */

/*[5.0-1]*/
	call emit_write_sent ("END-PAGE");		/* write from END-PAGE-i */

     end;




gen_reset_sums:
     proc;					/* RESET-SUMS of report_name	*/

declare	i		fixed bin;

	call emit_comment ("RESET ALL SUM COUNTERS", 32);
	call emit_pn ("RESET-SUMS");			/* RESET-SUMS. */

	do i = 0 by 1 to cf_table.cf_size;

	     sum_ptr = cf_table.cf_sum_chain (i);

	     do while (sum_ptr ^= null ());

		call skip_to_b;			/* B margin */
		call append_var_string ("compute");	/* compute */
		call append_qual_name (sum.sum_qn_ptr); /* sum counter */
		call append_sep_var_string ("= 0");	/* = 0 */
		call append_period;			/* . */

		sum_ptr = sum.sum_next;

	     end;

	end;

     end;



emit_p_br:
     proc;

	call emit_comment ("PAGE BREAK", 32);
	call emit_pn ("P-BR");

	if report.pf ^= null ()
	then do;					/* exists(PF group) */
		rt_ptr = report.pf;			/* (i1 - LC) lines */
		call emit_bl_abs (root.group_desc.line);

		call emit_perf_exit_sent ("P-F");	/* perform PF of report_name. */
	     end;

	call emit_bl_abs (report.page.count + 1);	/* blank lines to eop */
	call emit_perf_sent ("P-INCR");		/* perform P-INCR. */

	if report.ph ^= null ()
	then do;					/* exists(PH group) */
		rt_ptr = report.ph;

		if root.group_desc.type = 1		/* PH(abs) */
		then call emit_bl_abs (root.group_desc.line);

/* ((P + i1 - 1) - LC) lines */

		else call emit_bl_abs (report.heading.count + root.group_desc.line - 1);

/* ((P+H +j1 - 1) - LC) lines */

		call emit_perf_exit_sent ("P-H");	/* perform PH of report_name. */
	     end;





	call emit_reset_sent ("B-C", "0");		/*compute BODY-COUNT = 0 */
     end;

emit_pincr:
     proc;

	call emit_comment ("PAGE-COUNTER INCREMENT", 32);

	call emit_pn ("P-INCR");			/* P-INCR. */
	call emit_reset_sent ("line-counter", "0");	/* compute line-counter = 0. */
	call emit_if_test ("S-PI", "equal", "0");	/* if S-PI equal 0 */
	call emit_incr_sent ("page-counter", 1);	/* page-counter = page-counter + 1. */

	if g_i_count ^= 0
	then call emit_move_cv_sent ("all zeros", "GR-I");/* move all zeros to GROUP-INDICATE. */

/*[5.0-1]*/
	call emit_write_sent ("END-PAGE");		/* write from END-PAGE-i */


     end;




emit_bl_abs:
     proc (line);

declare	line		fixed bin;

	call emit_comment ("EMIT BLANK LINES, ABS", 32);

	if line <= report.page.count + 1
	then do;
		call emit_move_int_state (line, "LN-C");/* move line to LINE-COUNT-i */
		call emit_line;
		call emit_perf_state ("B-ABS");	/* perform B-ABS */
	     end;
	else do;
		call emit_comp_end ("line-counter", line - 1 - report.page.count);

/* compute line-counter = line - 1 - report.page.count */

		call emit_line;
	     end;
     end;

emit_ng_abs:
     proc (line);

declare	line		fixed bin;

	call emit_pb_blank_lines (line, line);

     end;

emit_bl_rel:
     proc (line_count);

declare	line_count	fixed bin;
	if line_count = 0
	then return;

	call emit_comment ("EMIT BLANK LINES, REL", 32);

	call EMIT_REL (line_count - 1, line_count);

     end;

EMIT_REL:
     proc (line1, line2);

declare	(line1, line2)	fixed bin;


	if line1 > 0
	then do;

		call emit_compute_lhs ("BL-C", 0);	/* compute BLANK-COUNT of report_name = */
		call append_sep_integer (line1);	/* line1 */
		call append_sep_var_string ("end-compute");
		call emit_line;



/*[5.1-3]*/
		call emit_write_state ("BLANK-LINES");	/* write BLANK-LINES of report_name */


	     end;


	if line2 > 0
	then call emit_incr_state ("line-counter", line2);
     end;

emit_bl_abs_var:
     proc (string);

declare	string		char (32) varying;

	call emit_comment ("EMIT BLANK LINES, ABS VAR", 32);

	call emit_compute_lhs ("count of BLANK-LINES", 1);/* compute count of BLANK-LINES of report_name = */
	call qual_by_rep (string);			/* string of report_name */
	call append_sep_var_string ("-");		/* - */
	call qual_by_rep ("line-counter");		/* line-counter of report_name */
	call append_sep_var_string ("end-compute");
	call emit_line;



	call emit_incr_var_state ("line-counter", string);/* increment line-counter */
						/*[5.0-1]*/
	call emit_write_sent ("BLANK-LINES");
     end;

emit_WR:
     proc (rec_area);

declare	rec_area		char (32) varying;

	call skip_to_b;				/* B margin */
	call append_var_string ("write");		/* write */
	call append_sep_token (report.file_name);	/* file-name */
	call append_sep_var_string ("from");		/* from */
	call qual_by_int (rec_area, report.rep_num);	/* rec-i */
	call append_sep_var_string ("end-write");	/* end-write */

     end;

emit_incr_sent:
     proc (name, i);

declare	name		char (32) varying,
	i		fixed bin;

	call emit_incr (name, i);
	call append_period;
     end;

emit_incr_state:
     proc (name, i);

declare	name		char (32) varying,
	i		fixed bin;

	call emit_incr (name, i);

	call append_sep_var_string ("end-compute");
	call emit_line;
     end;

emit_incr:
     proc (name, i);

declare	name		char (32) varying,
	i		fixed bin;

	call emit_compute_lhs (name, 1);		/* compute name of report name = */
	call qual_by_rep (name);			/* name of report name */


	if i > 0
	then do;
		call append_sep_var_string ("+");
		call append_sep_integer (i);
	     end;
	else do;
		call append_sep_var_string ("-");
		call append_sep_integer (-i);
	     end;
     end;

emit_incr_var:
     proc (name, incr);

declare	(name, incr)	char (32) varying;

	call skip_to_b;				/* B margin */
	call emit_compute_lhs (name, 1);		/* compute name of report_name = */
	call qual_by_rep (name);			/* name of report_name */
	call append_sep_var_string ("+");		/* + */
	call qual_by_rep (incr);			/* incr of report_name */
     end;

emit_incr_var_state:
     proc (name, incr);

declare	(name, incr)	char (32) varying;

	call emit_incr_var (name, incr);
	call emit_line;
     end;

emit_reset_sent:
     proc (name, value);

declare	(name, value)	char (32) varying;

	call emit_reset (name, value);
	call append_period;
     end;

emit_reset_state:
     proc (name, value);

declare	(name, value)	char (32) varying;

	call emit_reset (name, value);
	call emit_line;
     end;

emit_reset_int_state:
     proc (name, i);

declare	name		char (32) varying,
	i		fixed bin;

	call emit_reset_int (name, i);
	call emit_line;
     end;

emit_reset_int:
     proc (name, i);

declare	name		char (32) varying,
	i		fixed bin;

	call emit_compute_lhs (name, 0);		/* compute name of report_name = */
	call append_sep_integer (i);			/* i */
     end;

emit_reset:
     proc (name, value);

declare	(name, value)	char (32) varying;

	call emit_compute_lhs (name, 0);		/* compute name of report name = */
	call append_sep_var_string (value);		/* value */
     end;

emit_move_cv:
     proc (from, to);

declare	(from, to)	char (32) varying;

	call skip_to_b;				/* B margin */
	call append_var_string ("move");		/* move */
	call append_sep_var_string (from);		/* from */
	call append_sep_var_string ("to");		/* to */
	call qual_by_rep (to);			/* to of report_name */
     end;

emit_move_cv_sent:
     proc (from, to);

declare	(from, to)	char (32) varying;

	call emit_move_cv (from, to);
	call append_period;
     end;

emit_use_proc:
     proc (p);

declare	p		ptr;

	call skip_to_b;				/* B margin */
	call append_sep_var_string ("perform");		/* perform */
	call append_sep_token (p);			/* use_procedure */

     end;

emit_use_proc_sent:
     proc (p);

declare	p		ptr;

	call emit_use_proc (p);
	call append_period;
     end;

use_proc:
     proc (string);

declare	string		char (32) varying;

declare	p		ptr,
	sep		bit (1);

	p = root.use_proc.use_proc_name_ptr;

	if p = null ()
	then return;

	sep = root.use_proc.suppress;

	if sep
	then call SENT ("move 0 to SS");		/* move 0 to SS. */

	call emit_use_proc_sent (p);			/* perform use_procedure. */

	if sep
	then do;

		call LINE ("if SS equal 1");		/* if SS equal 1 */
		call emit_go_to_sent (string);	/* go to string of report_name. */

	     end;

     end;

ch_group:
     proc (i);

declare	i		fixed bin;

	rt_ptr = ch_table.ch_loc (i);
	if rt_ptr = null ()
	then return;

	b_incr = 6;

	call emit_group_name ("CH", i);		/* CH-i. */
	call use_proc ("CH-EXIT");
	call body_group ("CH", i);			/* emit body group */
	call emit_go_to_sent ("CH-EXIT");		/* go to CH-EXIT of report_name. */
     end;

de_group:
     proc (i);

declare	i		fixed bin;


	if i = 1
	then if de_table.det_size = 1
	     then call emit_rn_proc;

	rt_ptr = de_table.det_loc (i);
	gch = "DE";

	call emit_gp_pn (i);			/* Rgroup_name. */
	call emit_pfex ("DE", i);			/* perform DE-i thru DE-EXIT. */
	call emit_ind_pn ("DE", i);			/* DE-i. */

	b_incr = 0;

	if efg
	then call emit_rel_con_test ("GEN-CTR", "equal", "0");
						/* if GEN-CTR of report_name equal 0 */

	b_incr = 3;

	if efg
	then call emit_perf_state ("FG");		/* perform FG of report_name */

	b_incr = 0;


	if report.controls.loc ^= null ()
	then do;
		call de_word ("else");		/* else */

		b_incr = 3;

		call emit_perf_state ("SCB");		/* perform SCB of report_name */

		call emit_rel_con_test ("C-L", "not equal", "0");
						/* if CLEVEL of report_name not equal 0 */

		b_incr = 6;

		call cb_save;


		if report.cf ^= null ()
		then call emit_perf_exit_state ("C-F"); /* perform C-F of report_name */

		call cb_restore;


		if report.ch ^= null ()
		then call emit_perf_exit_state ("C-H"); /* perform C-H of report_name */

		b_incr = 3;

		call de_word ("end-if");		/* end-if */

		b_incr = 0;


	     end;


	if efg
	then call end_sent ("end-if");		/* end-if. */


	if de_table.det_subtot_all.count ^= 0
	then call emit_perf_sent ("SUB-TOT");		/* perform SUB-TOT of report_name. */


	if i ^= 0
	then do;



		if de_table.det_subtot.count (i) ^= 0
		then call emit_sc ("SUBTOTALLING, CURRENT GROUP", de_table.det_subtot.first (i));
						/* perform SUB-TOT-i of report_name. */

		call use_proc ("DE-EXIT");

		if de_table.det_size = 1
		then call emit_rn_test;

		call body_group ("DE", i);		/* emit body group */

	     end;

	call emit_go_to_sent ("DE-EXIT");		/* go to DE-EXIT of report_name. */

     end;


emit_rn_test:
     proc;

	call emit_rel_con_test ("RN", "equal", """1""");	/* if RN equal "1" */
	call emit_move_con_state ("""0""", "RN");	/* move "0" to RN */
	call emit_go_to_sent ("DE-EXIT");		/* go to DE-EXIT */

     end;

emit_rn_proc:
     proc;

	call emit_gp_pn (0);			/* Greport_name. */
	call emit_move_con_state ("""1""", "RN");	/* move "1" to RN */
	call emit_pfex ("DE", 1);			/* perform DE-1 */

     end;

cf_group:
     proc (i);

declare	i		fixed bin;

	rt_ptr = cf_table.cf_loc (i);

	if rt_ptr = null ()
	then return;
	b_incr = 6;

	call emit_group_name ("CF", i);		/* CF-i. */

	if cf_table.cf_crossfoot.count (i) ^= 0
	then call emit_sc ("CROSSFOOTING", cf_table.cf_crossfoot.first (i));


	if cf_table.cf_rollfwd.count (i) ^= 0
	then call emit_sc ("ROLLING FORWARD", cf_table.cf_rollfwd.first (i));


	call use_proc ("CF-EXIT");
	call body_group ("CF", i);			/* emit body group */
	call emit_go_to_sent ("CF-EXIT");		/* go to CF-EXIT of report_name. */


	if cf_table.cf_reset.count (i) ^= 0
	then call emit_reset_para (i);
     end;



declare	(ld, ft)		fixed bin;

body_group:
     proc (string, i);

declare	string		char (32) varying,
	i		fixed bin;
declare	(type, line, size, sz)
			fixed bin;
declare	st		char (32) varying;




	type = root.group_desc.type;
	line = root.group_desc.line;
	size = root.group_desc.size;
	st = string || "-1";
	ld = report.last_detail.count;

	ft = report.footing.count;

	b_incr = 0;

	go to BGT (type);


BGT (0):
	go to BGT0;
BGT (1):						/* Body Group (abs) */
	if report.ng_exists				/* group contains a NEXT GROUP clause */
	then call emit_ind_pn (st, i);		/* string-1-i. */

	call emit_rel_int_test ("line-counter", "not less", line);
						/* if line-counter not < i1 */
	b_incr = 3;

	call emit_perf_state ("P-BR");		/* perform P-BR */

	if report.ng_exists				/* group contains a NEXT GROUP clause */
	then do;
		call emit_rel_con_test ("SNGI", "not equal", "0");

/* if SNGI not = 0 */
		call emit_bl_abs_var ("SNGI");	/* SNGI lines */
		call emit_reset_state ("SNGI", "0");	/* compute SNGI = 0 */

		call emit_ind_go_to_state (st, i);	/* go to string-1-i of report_name */

		call emit_line;
		b_incr = 3;

		call de_word ("end-if");		/* end-if */
	     end;

	b_incr = 0;

	call de_word ("end-if");			/* end-if */
	call emit_bl_abs (line);			/* (i1) lines */

	go to BGT0;

BGT (2):						/* Body Group (rel) */
	call emit_ind_pn (st, i);			/* string-1-i. */
	call emit_rel_con_test ("B-C", "equal", "0");	/* if BODY-COUNT = 0 */
	call emit_ind_go_to_sent (string || "-3", i);	/* go to string-3-i. */

	call pb_test (ld - line - size + 1);		/* test for page break */

	b_incr = 3;

	call emit_perf_state ("P-BR");		/* perform P-BR */
	call emit_reset_state ("B-C", "0");		/* compute BODY-COUNT = 0 */

	call emit_ind_go_to_state (st, i);		/* go to string-1-i of report_name */
	call emit_line;

	b_incr = 0;

	call de_word ("else");			/* else */

	b_incr = 3;

	call emit_bl_rel (line);			/* (j1) lines */
	call de_word ("end-if");			/* end-if */

	b_incr = 0;

	call emit_ind_go_to_sent (string || "-2", i);	/* go to string-2-i. */
	call emit_ind_pn (string || "-3", i);		/* string-3-i. */


	if report.ng_exists				/* group contains a NEXT GROUP clause */
	then do;

		b_incr = 3;

		call emit_rel_con_test ("SNGI", "not equal", "0");
						/* if SNGI not = 0 */

		call emit_bl_abs_var ("SNGI");	/* SNGI lines */

		b_incr = 6;


		call emit_reset_state ("SNGI", "0");	/* compute SNGI = 0 */

		call emit_rel_int_test ("line-counter", "greater", ld - size);
						/* if line-counter > LD - <size> */

		b_incr = 9;

		call emit_perf_state ("P-BR");	/* perform P-BR */

		b_incr = 6;

		call de_word ("end-if");		/* end-if */

		b_incr = 3;

		call de_word ("end-if");		/* end-if */

		b_incr = 0;
	     end;


	call emit_pb_blank_lines (report.first_detail.count - 1, report.first_detail.count);
	call append_period;


	call emit_ind_pn (string || "-2", i);		/* string-2-i. */
	go to BGT0;

BGT (3):						/* Body Group (page) */
	call emit_ind_pn (st, i);			/* string-1-i. */

	call emit_rel_con_test ("B-C", "greater", "0");	/* if BODY-COUNT > 0 */

	b_incr = 3;

	call emit_perf_state ("P-BR");		/* perform P-BR */
	call emit_reset_state ("B-C", "0");		/* compute BODY-COUNT = 0 */

	call emit_ind_go_to_state (st, i);		/* go to string-1-i */
	call emit_line;

	b_incr = 0;

	call de_word ("else");			/* else */

	if report.ng_exists				/* group contains a NEXT GROUP clause */
	then do;
		b_incr = 3;

		call emit_rel_con_test ("SNGI", "greater", "0");
						/* if SNGI > 0 */

		call emit_bl_abs_var ("SNGI");	/* SNGI lines */

		b_incr = 6;

		call emit_reset_state ("SNGI", "0");	/* compute SNGI = 0 */

		b_incr = 3;

		call de_word ("end-if");		/* end-if */

		b_incr = 0;

	     end;

	b_incr = 3;

	call emit_rel_int_test ("line-counter", "not less", line);
						/* if line-counter not < i1 */

	b_incr = 6;

	call emit_perf_state ("P-BR");		/* perform P-BR */

	b_incr = 3;

	call de_word ("end-if");			/* end-if */

	call emit_bl_abs (line - 1);			/* (i1 - 1) lines */

	b_incr = 0;

	call de_word ("end-if");			/* end-if */
	go to BGT0;

BGT0:
	call emit_lines (i);			/* emit lines in group */

	call emit_reset_sent ("B-C", "1");		/* BODY-COUNT = 1 */

	type = root.next_group.type;
	line = root.next_group.value;

	if type = 0
	then return;
	if type = 3 & line = 1
	then return;



	if root.group_type = 5			/* CF group */
	then do;
		call emit_rel_int_test ("C-L", "equal", i);
		b_incr = b_incr + 3;

	     end;					/* if CLEVEL of report_name equal i */

	go to BNG (type);


BNG (1):						/* NEXT GROUP (page) */
	call emit_bl_abs (ft - 1);			/* F - 1 lines */
	go to BNG0;

BNG (2):
	call emit_rel_int_test ("line-counter", "less", line);
	b_incr = b_incr + 3;			/* if line-counter < i1 */

	call emit_bl_abs (line - 1);
	b_incr = b_incr - 3;			/* (i1 - 1) lines */

	call de_word ("else");
	b_incr = b_incr + 3;			/* else */

	call emit_bl_abs (ft);			/* F lines */
	call emit_reset_int_state ("SNGI", line);
	b_incr = b_incr - 3;			/* compute SNGI = i1 */

	call de_word ("end-if");
	b_incr = b_incr - 3;			/* end-if */

	go to BNG0;

BNG (3):						/* NEXT GROUP (rel) */
	call emit_rel_int_test ("line-counter", "less", ft - line);
						/* if line-counter < F - j1 */

	b_incr = b_incr + 3;

	call emit_ng_rel (line);
	b_incr = b_incr - 3;			/* j1 lines */

	call de_word ("else");
	b_incr = b_incr + 3;			/* else */

	call emit_ng_abs (ft);
	b_incr = b_incr - 3;			/* F lines */

	call de_word ("end-if");
	b_incr = b_incr - 3;			/* end-if */

	go to BNG0;

BNG0:
	if root.group_type = 5			/* CF group */
	then call de_word ("end-if");			/* end-if */

	b_incr = 0;

	call append_period;				/* . */

     end;





emit_lines:
     proc (i);

declare	i		fixed bin;

declare	(line_num, prev_line_num, line_count, line_size)
			fixed bin;


declare	(first, last, size, ltn, data_type)
			fixed bin;
declare	nd_loc		ptr;



	group_number = root.group_number;

	LINE_table_ptr = root.line_table_ptr;

	FIELD_table_ptr = root.field_table_ptr;



	do line_number = 1 by 1 to LINE_table.LT_size;

	     line_num = LINE_table.LT_line_num (line_number);
	     line_size = LINE_table.LT_line_size (line_number);

	     if line_number = 1
	     then do;
		     if line_num < 0
		     then prev_line_num = -line_num;
		     else prev_line_num = line_num;
		end;
	     else do;
		     if line_num < 0
		     then do;
			     line_num = -line_num;	/* absolute */
			     call emit_abs (line_num - prev_line_num - 1, line_num);
			     prev_line_num = line_num;
			end;
		     else do;
			     call emit_rel (line_num - 1);
						/* relative */
			     prev_line_num = prev_line_num + line_num;
			end;
		end;

	     call emit_move_cv_sent ("spaces", "B-F");	/* move spaces to BUFFER */

	     call emit_comment ("LINE", 32);
	     field_number = 1;


	     first = LINE_table.LT_first_field (line_number);
	     size = LINE_table.LT_field_count (line_number);
	     last = first + size - 1;

	     do ltn = first by 1 to last;

		call emit_comment ("FIELD", 32);

		tn_ptr = FIELD_table.FT_loc (ltn);
		data_type = term_node.data_type;
		nd_loc = term_node.nd_loc;

		if term_node.group_ind
		then do;
			call emit_irel_con_test ("G-I", term_node.g_i_count, "equal", """0""");
						/* if G-I-i equal "0" */

			b_incr = 3;

			call emit_move_cvi_state ("""1""", "G-I", term_node.g_i_count);
						/* move "1" to G-I-i */

		     end;

		call skip_to_b;			/* B margin */
		call append_var_string ("move");	/* move */

		go to EL (data_type);
EL (0):						/* missing */
						/*[5.1-5]*/
		call append_sep_var_string ("spaces");
		go to EL0;

EL (1):						/* SOURCE */
		call emit_identifier (nd_loc);
		go to EL0;

EL (2):						/* VALUE */
		call append_list (nd_loc);
		go to EL0;

EL (3):						/* SUM */
		call emit_sum_counter_name;
		go to EL0;

EL0:
		call append_sep_var_string ("to");	/* to */
		call qual_field_name (i, line_number, field_number);

		if term_node.group_ind
		then do;
			call emit_line;
			call end_sent ("end-if");
			b_incr = 0;
		     end;

		else call append_period;		/* . */

		field_number = field_number + 1;

	     end;

	     call emit_line_size_init (line_size);	/*[5.0-1]*/
	     call emit_write_sent ("WRITE-LINE");	/* write fn from WRITE-LINE. */



	     b_incr = 0;



	end;

	line_number = line_number + 1;
     end;

emit_identifier:
     proc (p);

declare	p		ptr;

	ident_ptr = p;

	call append_qual_name (ident.id_name_loc);

	ident_ptr = p;

	if ident.subscripts.count ^= 0
	then call append_list (addr (ident.subscripts));

     end;

emit_sum_counter_name:
     proc;

declare	(p, q)		ptr;

	call append_sep_token (term_node.tn_name_ptr);

	p = term_node.tn_up;

	do while (p ^= null ());

	     q = p -> term_node.tn_name_ptr;

	     if q ^= null ()
	     then do;
		     call append_sep_var_string ("of");
		     call append_sep_token (q);
		end;

	     p = p -> term_node.tn_up;

	end;
     end;

gen_first_gen:
     proc;

declare	(i, line, type, heading, value)
			fixed bin;

	call emit_comment ("FIRST GENERATE STATEMENT", 32);
	call emit_pn ("FG");			/* FG. */

	if report.rh ^= null ()
	then do;
		rt_ptr = report.rh;			/* exists(RH group) */

		line = root.group_desc.line;
		type = root.group_desc.type;
		heading = report.heading.count;

		if type = 1
		then call emit_bl_abs (line);		/* (i1) lines RH(abs) */
		else call emit_bl_rel (heading + line - 1);
						/* (H+j1-1) lines RH(rel) */

		call emit_perf_exit_sent ("R-H");	/* perform RH of report_name. */

		type = root.next_group.type;
		value = root.next_group.value;

		go to RHNG (type);			/* NEXT GROUP clause */

RHNG (0):						/* NG clause (missing) */
		go to RHNG0;

RHNG (1):						/* NG clause (NEXT PAGE) */
		call emit_ABS (report.page.count);	/* (P) lines */
		call emit_reset_sent ("line-counter", "0");
						/* compute line-counter of report_name = 0. */
		call emit_reset_sent ("page-counter", "2");
						/* compute page-counter of report_name = 2. */

		go to RHNG0;

RHNG (2):						/* NG clause (integer) */
		call emit_ABS (value);		/* (i1) lines */
		go to RHNG0;

RHNG (3):						/* NG clause (PLUS integer) */
		call emit_bl_rel (value);		/* (j1) lines */
		go to RHNG0;

RHNG0:
		if report.ph ^= null ()
		then call gen_ph (0);		/* exists RH */

	     end;

	else if report.ph ^= null ()
	then call gen_ph (report.heading.count - 1);	/* exists PH */

	if report.controls.loc ^= null ()
	then do;
		call emit_reset_sent ("C-L", "1");	/* compute CLEVEL of report_name = 1. */

		call emit_perf_exit_sent ("C-TO-P");	/* perform C-TO-P of report_name */
	     end;


	if report.ch ^= null ()
	then do;					/* exists(CH groups) */

		ch_table_ptr = report.ch;



		if ch_table.ch_loc (0) ^= null ()
		then call emit_pfex ("CH", 0);	/* perform CH-0 of report_name. */


		call emit_perf_exit_sent ("C-H");	/* perform C-H of report_name. */

	     end;

	call emit_reset_sent ("GEN-CTR", "1");		/* compute GEN-CTR of report_name = 1. */
     end;

emit_go_to_sent:
     proc (string);

declare	string		char (32) varying;

	call emit_go_to (string);			/* go to string of report_name */
	call append_period;				/* . */
     end;

emit_go_to:
     proc (string);

declare	string		char (32) varying;

	call skip_to_b;				/* B margin */
	call append_sep_var_string ("go to");		/* go to */
	call qual_by_rep_proc (string);		/* string of R-report_name */
     end;

emit_ind_go_to_state:
     proc (string, i);

declare	string		char (32) varying,
	i		fixed bin;

	call emit_ind_go_to (string, i);

     end;

emit_ind_go_to_sent:
     proc (string, i);

declare	string		char (32) varying,
	i		fixed bin;

	call emit_ind_go_to_state (string, i);
	call append_period;
     end;

emit_ind_go_to:
     proc (string, i);

declare	string		char (32) varying,
	i		fixed bin;

	call skip_to_b;				/* B margin */
	call append_var_string ("go to");		/*go to */
	call qual_int_by_rep_proc (string, i);		/* string-i of R-report_name */
     end;

emit_ind_perf:
     proc (string, i);

declare	string		char (32) varying,
	i		fixed bin;

	call skip_to_b;				/* B margin */
	call append_var_string ("perform");		/* perform */
	call qual_int_by_rep_proc (string, i);		/* string-i of R-report_name */

     end;

emit_rep_sec_name:
     proc (ch);

declare	ch		char (32) varying;

	call append_sep_var_string (ch);		/* R- */
	call append_token (report.rep_name_ptr);	/* report_name */
     end;

end_sent:
     proc (string);

declare	string		char (32) varying;

	call skip_to_b;				/* B margin */
	call append_var_string (string);		/* string */
	call append_period;				/* . */

     end;

qual_int_by_rep_proc:
     proc (string, i);

declare	string		char (32) varying,
	i		fixed bin;

	if i < 10000
	then call qual_by_int (string, i);		/* string-i */
	else call append_sep_var_string (string);	/* string */

	call append_sep_var_string ("of");		/* of */
	call emit_rep_sec_name ("R");			/* Rreport_name */
     end;

de_word:
     proc (string);

declare	string		char (32) varying;

	call skip_to_b;				/* B margin */
	call append_var_string (string);		/* string */
	call emit_line;

     end;

emit_compute_lhs:
     proc (name, mode);

declare	name		char (32) varying,
	mode		fixed bin;

	call skip_to_b;				/* B margin */
	call append_var_string ("compute");		/* compute */
	call qual_by_rep (name);			/* name of report_name */
	call append_sep_var_string ("=");		/* = */

	if mode = 0
	then return;

	call emit_line;

	call skip_to_col (15 + b_incr);

     end;


emit_rel_con_test:
     proc (var, rel, con);

declare	(var, rel, con)	char (32) varying;

	call if_var_rel (var, rel);			/* if var rel */
	call append_sep_var_string (con);		/* con */
	call emit_line;
     end;

emit_rel_int_test:
     proc (var, rel, i);

declare	(var, rel)	char (32) varying,
	i		fixed bin;

	call if_var_rel (var, rel);			/* if var rel */
	call append_sep_integer (i);			/* i */
	call emit_line;
     end;

if_var_rel:
     proc (var, rel);

declare	(var, rel)	char (32) varying;

	call skip_to_b;				/* B margin */
	call append_var_string ("if");		/* if */
	call qual_by_rep (var);			/* var of report_name */
	call append_sep_var_string (rel);		/* rel */
     end;

if_int_var_rel:
     proc (var, i, rel);

declare	(var, rel)	char (32) varying,
	i		fixed bin;

	call skip_to_b;				/* B margin */
	call append_var_string ("if");		/* if */
	call qual_int_by_rep (var, i);		/* var-i of report_name */
	call append_sep_var_string (rel);		/* rel */
     end;

emit_irel_con_test:
     proc (var, i, rel, con);

declare	(var, rel, con)	char (32) varying,
	i		fixed bin;

	call if_int_var_rel (var, i, rel);
	call append_sep_var_string (con);
	call emit_line;
     end;

emit_move_cvi:
     proc (con, var, i);

declare	(con, var)	char (32) varying,
	i		fixed bin;

	call skip_to_b;				/* B margin */
	call emit_move_con (con);			/* move con to */
	call qual_int_by_rep (var, i);		/* var-i of report_name */
     end;

emit_move_cvi_state:
     proc (con, var, i);

declare	(con, var)	char (32) varying,
	i		fixed bin;

	call emit_move_cvi (con, var, i);
	call emit_line;
     end;

emit_move_con:
     proc (con);

declare	con		char (32) varying;

	call skip_to_b;				/* B margin */
	call append_var_string ("move");		/* move */
	call append_sep_var_string (con);		/* con */
	call append_sep_var_string ("to");		/* to */

     end;

emit_move_con_state:
     proc (con, var);

declare	(con, var)	char (32) varying;

	call emit_move_con (con);
	call qual_by_rep (var);
	call emit_line;
     end;

emit_thru:
     proc (name, suff);

declare	(name, suff)	char (32) varying;

	call append_sep_var_string ("thru");
	call qual_by_rep_proc (name || suff);
     end;

emit_perf_sent:
     proc (name);

declare	name		char (32) varying;

	call emit_perf (name);
	call append_period;				/* . */
     end;

emit_perf_exit_sent:
     proc (name);

declare	name		char (32) varying;

	call emit_perf_exit_state (name);
	call append_period;
     end;




emit_perf_state:
     proc (name);

declare	name		char (32) varying;

	call emit_perf (name);
	call emit_line;

     end;
emit_perf_exit_state:
     proc (name);

declare	name		char (32) varying;

	call emit_perf (name);
	call emit_thru (name, "-EXIT");
	call emit_line;
     end;

emit_perf:
     proc (name);

declare	name		char (32) varying;

	call skip_to_b;				/* B margin */
	call append_sep_var_string ("perform");		/* perform */
	call qual_by_rep_proc (name);			/* name of R-report_name */
     end;

emit_ind_perf_sent:
     proc (string, i);

declare	string		char (32) varying,
	i		fixed bin;

	call emit_ind_perf (string, i);
	call append_period;
     end;

gen_c_h:
     proc;

declare	i		fixed bin;

	call emit_pn ("C-H");			/* C-H. */
						/*[4.4-1]*/
	if ch_table.ch_size > 1
	then call go_to_dep ("C-H", ch_table.ch_size);	/* go to depending */

	do i = 1 by 1 to ch_table.ch_size;

/*[4.4-1]*/
	     if ch_table.ch_size > 1
	     then call emit_ind_pn ("C-H", i);		/* C-H-i. */
	     call skip_to_b;			/* B margin */

	     if ch_table.ch_loc (i) ^= null ()
	     then do;

		     call emit_ind_perf_exit_state ("CH", i);
						/* perform CHi of report_name */
		     call append_period;		/* . */

		end;
	end;

	call emit_exit_para ("C-H-EXIT");		/* C-H-EXIT. exit. */

     end;

gen_c_f:
     proc;

declare	(i, j)		fixed bin;

	call emit_pn ("C-F");			/* C-F. */

	if report.g_i_count ^= 0
	then call emit_move_cv_sent ("all zeros", "GR-I");

	j = cf_table.cf_size;

/*[5.1-4]*/
	if j > 0
	then do i = cf_table.cf_size by -1 to 1;


		if cf_table.cf_loc (i) ^= null ()
		then do;
			call emit_ind_perf_exit_state ("CF", i);
						/* perform CF-i of report_name */

			call append_period;
		     end;

		if cf_table.cf_reset.count (i) ^= 0
		then call emit_ind_perf_sent ("RESET", i);


		if i ^= 1
		then do;

			call skip_to_b;		/* B margin */
			call append_var_string ("if");/* if */
			call qual_by_rep ("C-L");	/* CLEVEL of report_name */
			call append_sep_var_string ("equal");
						/* EQUAL */
			call append_sep_integer (i);	/* i */
			call emit_go_to ("C-F-EXIT"); /* go to C-F-EXIT of report_name */
			call append_period;		/* . */

		     end;
	     end;

	call emit_exit_para ("C-F-EXIT");		/* C-F-EXIT. exit. */

     end;

emit_comment:
     proc (string, pos);

declare	string		char (32) varying,
	pos		fixed bin;

	call skip_to_a;
	substr (line.chars, 7, 1) = "*";
	call skip_to_col (pos);
	call append_var_string (string);
	call emit_line;
     end;

emit_ind_perf_exit_state:
     proc (string, i);

declare	string		char (32) varying,
	i		fixed bin;

	call emit_ind_perf (string, i);
	call emit_thru (string, "-EXIT");
     end;

emit_stall_para:
     proc;


/* subtotalling which occurs for	*/
/* every de group			*/


	call emit_pn ("SUB-TOT");			/* SUB-TOT. */

	call emit_sc ("SUBTOTALLING- ALL GROUPS", de_table.det_subtot_all.first);

     end;

emit_reset_para:
     proc (i);

declare	i		fixed bin;


	reset_chain_entry_ptr = cf_table.cf_reset.first (i);

	call emit_ind_pn ("RESET", i);		/* RESET-i. */

	do while (reset_chain_entry_ptr ^= null ());

	     call skip_to_b;			/* B margin */
	     call append_sep_var_string ("compute");	/* compute */
	     call append_qual_name (reset_chain_entry.loc);
						/* sum counter */
	     call append_sep_var_string ("= 0");	/* = 0 */
	     call append_period;			/* . */

	     reset_chain_entry_ptr = reset_chain_entry.next;

	end;

     end;

emit_sc:
     proc (comm, p);

declare	comm		char (32) varying,
	p		ptr;


	call emit_comment (comm, 32);

	b_incr = 0;
	chain_entry_ptr = p;

	do while (chain_entry_ptr ^= null ());

	     call skip_to_b;			/* B margin */
	     call append_sep_var_string ("add");	/* add */
	     call emit_identifier (chain_entry.ce_loc);	/* addend */
	     call append_sep_var_string ("to");		/* to */
	     call append_qual_name (chain_entry.ce_sum_loc);
						/* sum counter */
	     call append_period;


	     chain_entry_ptr = chain_entry.ce_next;

	end;

     end;

emit_rep_pn:
     proc (ch, type);

declare	ch		char (32) varying,
	type		fixed bin;

	call skip_to_a;

	call emit_rep_sec_name (ch);

	if type ^= 0
	then call append_sep_var_string ("section");

	call append_period;

     end;

qual_by_rep_proc:
     proc (string);

declare	string		char (32) varying;

	call append_sep_var_string (string);		/* string */

	call append_sep_var_string ("of");		/* of */

	call emit_rep_sec_name ("R");			/* Rreport_name */


     end;

declare	1 line,
	  2 next_loc	fixed bin,		/* next location */
	  2 bl_loc	fixed bin,		/* location of last space */
	  2 chars		char (256);

declare	first_line	fixed bin,
	trace_bit		bit (1);

append_var_string:
     proc (string);

/* append a char varying string to	*/
/* the current line			*/

declare	string		char (32) varying;
declare	sz		fixed bin;

	sz = length (string);

	substr (line.chars, line.next_loc, sz) = string;
	line.next_loc = line.next_loc + sz;

     end;

append_refer_string:
     proc (refer_ptr);

/* append a string of characters to the	*/
/* current line. The location of the	*/
/* self defined string is an input	*/
/* parameter			*/

declare	refer_ptr		ptr;
declare	sz		fixed bin;

declare	1 refer_string	based (refer_ptr),
	  2 size		fixed bin,
	  2 string	char (0 refer (refer_string.size));

	sz = refer_string.size;

	substr (line.chars, line.next_loc, sz) = refer_string.string;
	line.next_loc = line.next_loc + sz;

     end;

append_integer:
     proc (bin_int);

/* append a decimal integer to the	*/
/* current string. The location of a	*/
/* binary integer is an input paramater	*/

declare	bin_int		fixed bin;
declare	dec_int		char (4),
	dec_size		fixed bin;


	if bin_int <= 0
	then do;
		dec_int = "0";
		dec_size = 1;
	     end;
	else do;

		call ioa_$rsnnl ("^d", dec_int, dec_size, bin_int);

	     end;

	substr (line.chars, line.next_loc, dec_size) = dec_int;
	line.next_loc = line.next_loc + dec_size;

     end;

append_sep_var_string:
     proc (string);

/* This operation appends a space and	*/
/* then executes the operation	*/
/* append_var_string		*/

declare	string		char (32) varying;

	call append_space;

	call append_var_string (string);

     end;

append_sep_refer_string:
     proc (refer_ptr);

/* This operation appends a space and	*/
/* then executes the operation	*/
/* append_refer_string		*/

declare	refer_ptr		ptr;

	call append_space;

	call append_refer_string (refer_ptr);

     end;

append_sep_integer:
     proc (bin_int);

/* This operation appends a space and	*/
/* then executes the operation	*/
/* append_integer			*/

declare	bin_int		fixed bin;

	call append_space;

	call append_integer (bin_int);

     end;




declare	b_incr		fixed bin;


skip_to_b:
     proc;

/* This operation adds spaces to the	*/
/* current line and insures that the	*/
/* next item placed in the line is in	*/
/* the B field			*/

declare	loc		fixed bin;


	loc = 12 + b_incr;

	if line.next_loc >= loc
	then do;
		if substr (line.chars, line.next_loc - 1, 1) = " "
		then line.bl_loc = line.next_loc - 1;
		else do;
			substr (line.chars, line.next_loc, 1) = " ";
			line.bl_loc = line.next_loc;
			line.next_loc = line.next_loc + 1;
		     end;
	     end;
	else do;
		substr (line.chars, line.next_loc, loc - line.next_loc) = " ";
		line.bl_loc = loc - 1;
		line.next_loc = loc;
	     end;

     end;



skip_to_a:
     proc;

	substr (line.chars, 1, 7) = " ";
	line.bl_loc = 7;
	line.next_loc = 8;
     end;

skip_to_col:
     proc (pos);

declare	pos		fixed bin;

	if pos <= line.next_loc
	then return;

	substr (line.chars, line.next_loc, pos - line.next_loc) = " ";
	line.next_loc = pos;
     end;

append_space:
     proc;

/* append a space to the current line	*/
/* emit a line if required		*/

	if substr (line.chars, line.next_loc - 1, 1) = " "
	then return;

	if line.next_loc < 72
	then call es;
	else if line.next_loc < 74
	then call emit_line;
	else do;
		call emit_line;
		call es;
	     end;

     end;

es:
     proc;

	substr (line.chars, line.next_loc, 1) = " ";
	line.bl_loc = line.next_loc;
	line.next_loc = line.next_loc + 1;

     end;

append_period:
     proc;

/* append a period separator to the	*/
/* current line, emit one or two lines	*/
/* as required			*/

	if line.next_loc < 73
	then do;
		call ep;
		call emit_line;
		call seta;
	     end;
	else do;
		call emit_line;
		call ep;
		call emit_line;
		call seta;
	     end;

     end;

ep:
     proc;

	substr (line.chars, line.next_loc, 1) = ".";
	line.next_loc = line.next_loc + 1;

     end;

seta:
     proc;

	line.bl_loc = 7;
	line.next_loc = 8;

     end;

declare	rwfp		ptr;

append_list:
     proc (list_ptr);

declare	list_ptr		ptr,
	st		bit (32),
	(i, rec_size)	fixed;

	list_def_ptr = list_ptr;

	call cobol_io_$cobol_msf_start (rwfp, addrel (list_def.first, -1));

	do i = 1 by 1 to list_def.count;

	     call cobol_swf_get (rwfp, st, addr_record, rec_size);

	     if substr (st, 17, 16) ^= "0"b
	     then return;

	     call append_sep_token (addr_record);

	end;
     end;




append_token:
     proc (token_ptr);

declare	token_ptr		ptr;

	call get_ref_ptr (token_ptr);

	call append_refer_string (refer_ptr);

     end;
declare	refer_ptr		ptr;




get_ref_ptr:
     proc (token_ptr);

declare	token_ptr		ptr;
declare	type		fixed bin;

	type = token_ptr -> reserved_word.type;

	if type > 8
	then return;

	go to TOK (type);

TOK (0):
TOK (5):
TOK (6):
	return;
TOK (1):
	refer_ptr = addr (token_ptr -> reserved_word.length);
	go to TOK1;

TOK (2):
	refer_ptr = addr (token_ptr -> numeric_lit.places);
	go to TOK1;

TOK (3):
	call quoter (token_ptr);
	go to TOK1;

TOK (4):
	refer_ptr = addr (token_ptr -> picture.length);
	go to TOK1;

TOK (7):
	refer_ptr = addr (token_ptr -> proc_def.name_size);
	go to TOK1;

TOK (8):
	refer_ptr = addr (token_ptr -> user_word.length);
	go to TOK1;

TOK1:
     end;



append_sep_token:
     proc (token_ptr);

declare	token_ptr		ptr;

	call get_ref_ptr (token_ptr);

	call append_sep_refer_string (refer_ptr);

     end;

append_level_number:
     proc (lev_num);				/* append a level number in the A margin	*/
						/* and then emit blanks			*/

declare	lev_num		fixed bin;
declare	sz		fixed bin;

	call skip_to_a;

	if lev_num < 10
	then call append_var_string ("0");		/* 0 */

	call append_integer (lev_num);		/* level number */

	sz = lev_num + lev_num;
	substr (line.chars, line.next_loc, sz) = " ";	/* blanks */

	line.next_loc = line.next_loc + sz;
	line.bl_loc = line.next_loc - 1;

     end;

append_qual_name:
     proc (qn_ptr);					/* append a qualified name, loc of	*/
						/* the qual name is in qual_name_ptr	*/

declare	qn_ptr		ptr;
declare	(i, ct)		fixed bin;

/*[5.1-2]*/
	ct = qn_ptr -> qual_name.qn_size;

/*[5.1-2]*/
	if ct = 1					/*[5.1-2]*/
	then call unqual_name (qn_ptr -> qual_name.qn_loc (1));
						/*[5.1-2]*/
	else do i = 1 by 1 to ct;

		if i ^= 1
		then call append_sep_var_string ("of"); /* of */
		call append_sep_token (qn_ptr -> qual_name.qn_loc (i));
						/* data-name */
	     end;
     end;

emit_line:
     proc;

/* the current line is emitted. If it	*/
/* exceeds 72 characters in length	*/
/* then the last item on the line is	*/
/* saved and placed in the B field of	*/
/* the next line			*/

declare	sz		fixed bin;

	if line.next_loc > 8			/* non empty line */
	then if line.next_loc <= 73			/* short line */
	     then do;
		     call EMIT (line.next_loc);

		     call clear_line;



		end;
	     else do;
		     call EMIT (line.bl_loc);		/* long line */

		     substr (line.chars, 1, 11) = " ";

		     sz = line.next_loc - line.bl_loc - 1;

/* line overflow */

		     substr (line.chars, 12, sz) = substr (line.chars, line.bl_loc + 1);

		     line.bl_loc = 11;
		     line.next_loc = 12 + sz;
		     call EMIT (line.next_loc);
		     call clear_line;
		end;
     end;



declare	rwdd		bit (1),
	(ddloc, pdloc)	fixed bin;

declare	chars		char (1024) based;



EMIT:
     proc (loc);

declare	loc		fixed bin;

/*[5.0-1]*/
	substr (line.chars, 1, 6) = "::::::";		/* dont put into the listing */

	if rwdd
	then do;
		substr (cobol_rwdd -> chars, ddloc, loc) = substr (line.chars, 1, loc - 1) || "
";
		ddloc = ddloc + loc;
	     end;
	else do;
		substr (cobol_rwpd -> chars, pdloc, loc) = substr (line.chars, 1, loc - 1) || "
";
		pdloc = pdloc + loc;
	     end;

     end;

line_init:
     proc;

	line.next_loc = 1;
	line.bl_loc = 1;
	line.chars = " ";
     end;



declare	1 ALF,
	  2 lit_size	fixed bin,
	  2 string	char (136);

declare	1 alf_lit		based (alf_lit_ptr),
	  2 lit_size	fixed bin,
	  2 string	char (136 refer (alf_lit.lit_size));

declare	alf_lit_ptr	ptr;

quoter:
     proc (token_ptr);

declare	token_ptr		ptr;

	ALF.lit_size = token_ptr -> alphanum_lit.lit_size + 2;
	substr (ALF.string, 1, ALF.lit_size) = """" || token_ptr -> alphanum_lit.string || """";

	refer_ptr = alf_lit_ptr;

     end;

emit_write_line:
     proc;

	call emit_comment ("WRITE-LINE", 32);
	call append_level_number (2);
	call qual_by_int ("WRITE-LINE", report.rep_num);
	call append_sep_var_string ("redefines");
	call qual_by_int ("REP-LINE", report.rep_num);
	call append_period;

	call emit_write_fields ("LINE-SIZE");


	call append_level_number (3);
	call append_sep_var_string ("B occurs 1 to 132 times");
	call emit_line;
	call skip_to_b;
	call append_sep_var_string ("depending on");

	call qual_by_rep ("LINE-SIZE");
	call append_sep_var_string ("pic x");
	call append_period;

     end;

emit_write_fields:
     proc (name);

declare	name		char (32) varying;

	call emit_lev_item (3, name || " comp-6", "");
	call emit_lev_item (3, "C-D pic xx", "");
	call emit_lev_item (3, "T-Y pic xx", "");

     end;

declare	efg		bit (1);


gen_report_init:
     proc;

	ch_table_ptr = report.ch;
	cf_table_ptr = report.cf;
	de_table_ptr = report.de;

	code = report.code;

	if code = ""
	then code = "  ";				/* default for report code */

	if ch_table_ptr ^= null ()
	then control_count = cf_table.cf_size;
	else control_count = 0;

	control_name_table_loc = report.controls.loc;




	if report.ph ^= null () | report.rh ^= null () | report.controls.loc ^= null ()
	then efg = "1"b;				/* emit  FG. */
	else efg = "0"b;


     end;




emit_line_size_init:
     proc (size);

declare	size		fixed bin;

	call skip_to_b;				/* B margin */
	call append_var_string ("compute");		/* compute */

	call qual_by_rep ("LINE-SIZE");
	call append_sep_var_string ("=");		/* = */
	call append_sep_integer (size);		/* size */
	call append_period;				/* . */

     end;




buffer_name_def:
     proc (name);

declare	name		char (32) varying;

	call append_level_number (2);			/* 02 */
	call qual_by_int (name, report.rep_num);	/* name-i */
	call append_period;				/* .*/

     end;




emit_pb_blank_lines:
     proc (line1, line2);

declare	(line1, line2)	fixed bin;

	call emit_rel_int_test ("line-counter", "not less", line2);
						/* if line-counter > line */
	call sbc (report.page.count + line1);		/* incr BLANK-COUNT */
	call emit_line;
	call de_word ("else");			/* else */
	call sbc (line1);				/* set BLANK-COUNT */
	call de_word ("end-if");			/* end-if */
	call emit_rel_con_test ("BL-C", "greater", "0");	/* if BLANK-COUNT > 0 */
	call emit_write_state ("BLANK-LINES");		/* write from BLANK-LINES */
	call de_word ("end-if");			/* end-if */
	call emit_comp_end ("line-counter", line2);	/* compute line-counter = line end-compute */


     end;

sbc:
     proc (size);

declare	size		fixed bin;

	call emit_comp ("BL-C", size);		/* compute BLANK-COUNT = size */


	if size = 0
	then return;

	call append_sep_var_string ("-");		/* - */
	call qual_by_rep ("line-counter");		/* line-counter */

     end;




descr_pic_line:
     proc (lev, name, desc);

declare	lev		fixed bin,
	(name, desc)	char (32) varying;

	call append_level_number (lev);		/* lev */
	call append_sep_var_string (name);
	call append_sep_var_string (desc);
	call append_period;				/* . */
     end;



LINE:
     proc (line);

declare	line		char (32) varying;

	call skip_to_b;				/* B margin */
	call append_var_string (line);		/* line */
	call emit_line;
     end;

emit_section:
     proc (name);

declare	name		char (32) varying;

	call skip_to_a;				/* A margin */
	call append_var_string (name);		/* name */
	call append_sep_var_string ("section");		/* section */
	call append_period;				/* . */
     end;




SENT:
     proc (sent);

declare	sent		char (32) varying;

	call skip_to_b;				/* B margin */
	call append_var_string (sent);		/* sent */
	call append_period;				/* . */
     end;


test_control_tables:
     proc;					/* do CH and CF tables contain entries */

	if report.ch ^= null ()
	then call tct (report.ch);
	if report.cf ^= null ()
	then call tct (report.cf);

     end;


tct:
     proc (p);

declare	p		ptr,
	i		fixed bin;

	do i = 1 by 1 to p -> ch_table.ch_size;

	     if p -> ch_table.ch_loc (i) ^= null ()
	     then return;

	end;

	p = null ();

     end;


sum_descr:
     proc;

	call append_sep_var_string ("pic s9(9)v9(9)");
	call append_sep_var_string ("sign leading separate");


     end;

cb_save:
     proc;

	call emit_perf_exit_state ("C-TO-S");		/* perform C-TO-S of report_name */
	call emit_perf_exit_state ("P-TO-C");		/* perform P-TO-C of report_name */

     end;

cb_restore:
     proc;

	call emit_perf_exit_state ("S-TO-C");		/* perform S-TO-C of report_name */
	call emit_perf_exit_state ("C-TO-P");		/* perform C-TO-P of report_name */

     end;



emit_comp:
     proc (var, size);

declare	var		char (32) varying,
	size		fixed bin;

	call emit_compute_lhs (var, 1);		/* compute var = */
	call append_sep_integer (size);		/* size */

     end;


emit_comp_end:
     proc (var, size);

declare	var		char (32) varying,
	size		fixed bin;

	if size > report.page.count
	then size = size - report.page.count;

	call emit_comp (var, size);			/* compute var = size */
	call append_sep_var_string ("end-compute");	/* end-compute */

     end;


emit_comp_write:
     proc (count);

declare	count		fixed bin;

	call emit_comp_end ("BL-C", count);		/* compute BLANK-COUNT = count end-compute */
	call emit_line;

	call emit_write_state ("BLANK-LINES");		/* write from BLANK-LINES */

     end;


emit_rel:
     proc (count);

declare	count		fixed bin;

	if count > 0
	then call emit_comp_write (count);


	call emit_incr_state ("line-counter", count + 1); /* compute line-counter = line-counter + count + 1 */

     end;


emit_abs:
     proc (count, line);

declare	(count, line)	fixed bin;

	if count ^= 0
	then call emit_comp_write (count);



	call emit_comp_end ("line-counter", line);	/* compute line-counter = line end-compute */

     end;


clear_line:
     proc;

	substr (line.chars, 1, 11) = " ";
	line.bl_loc = 11;
	line.next_loc = 12;

     end;


gen_ph:
     proc (incr);

declare	(incr, line, type)	fixed bin;

	rt_ptr = report.ph;				/* PH group */
	line = root.group_desc.line;
	type = root.group_desc.type;

	if type = 1
	then call emit_ABS (line);			/* absolute */
	else call emit_bl_rel (line + incr);		/* relative */

	call emit_perf_exit_sent ("P-H");		/* perform P-H of report_name */

     end;


pb_test:
     proc (line);

declare	line		fixed bin;

	if line < report.page.count
	then call emit_rel_int_test ("line-counter", "greater", line);
						/* if line-counter greater line */
	else call emit_rel_int_test ("line-counter", "equal", 0);
						/* if line-counter = 0 */

     end;


emit_ng_rel:
     proc (line);

declare	line		fixed bin;

	if line <= 1
	then return;

	call EMIT_REL (line - 1, line - 1);

     end;

emit_b_abs:
     proc;

	call emit_comment ("EMIT BLANK LINES", 32);
	call emit_pn ("B-ABS");			/* B-ABS. */

	call emit_rel_var_test ("line-counter", "not less", "LN-C");
						/* IF line-counter >= LINE-COUNT */

	b_incr = b_incr + 3;

	call emit_compute_lhs ("BL-C", 1);		/* compute BLANK-COUNT = */
	call append_integer (report.page.count);	/* page */
	call op_var ("-", "line-counter");		/* - line-counter */
	call emit_line;
	call emit_perf_state ("W-BL");		/* perform W-BL */
	call emit_perf_state ("P-INCR");		/* perform P-INCR */
	call emit_compute_lhs ("BL-C", 1);		/* compute BLANK-COUNT = */
	call qual_by_rep ("LN-C");			/* LINE-COUNT */
	call op_con ("-", "1");			/* - 1 */
	call emit_line;

	call emit_perf_state ("W-BL");		/* perform W-BL */

	b_incr = b_incr - 3;

	call de_word ("else");			/* else */

	b_incr = b_incr + 3;

	call emit_compute_lhs ("BL-C", 1);		/* compute BLANK-COUNT = */
	call qual_by_rep ("LN-C");			/* LINE-COUNT */
	call op_con ("-", "1");			/* - 1 */
	call op_var ("-", "line-counter");		/* - line-counter */
	call emit_line;

	call emit_perf_state ("W-BL");		/* perform W-BL */

	b_incr = b_incr - 3;

	call de_word ("end-if");			/* end-if */
	call append_period;				/* . */

	call emit_compute_lhs ("line-counter", 0);	/* compute line-counter = */
	call qual_by_rep ("LN-C");			/* LINE-COUNT */
	call append_period;				/* . */

     end;

emit_rel_var_test:
     proc (var, rel, con);

declare	(var, rel, con)	char (32) varying;

	call if_var_rel (var, rel);			/* if var rel */
	call qual_by_rep (con);			/* con */
	call emit_line;
     end;

op_con:
     proc (op, con);

declare	(op, con)		char (32) varying;

	call append_sep_var_string (op);
	call append_sep_var_string (con);
     end;

op_var:
     proc (op, var);

declare	(op, var)		char (32) varying;

	call append_sep_var_string (op);
	call qual_by_rep (var);
     end;

emit_w_bl:
     proc;

	call emit_comment ("WRITE BLANK LINES", 32);
	call emit_pn ("W-BL");			/* W-BL. */
	call emit_wr_bl;
     end;

emit_wr_bl:
     proc;

	call emit_rel_con_test ("BL-C", "greater", "0");	/* if BLANK-COUNT > 0 */
	call emit_write_state ("BLANK-LINES");		/* write from BLANK-LINES */
						/*[5.0-1]*/
	call de_word ("end-if.");			/* end-if. */

     end;

emit_end_page_rec:
     proc;

	call buffer_name_def ("END-PAGE");		/* 02 END-PAGE-i. */
	call bld ("0", "n ");
     end;

bld:
     proc (val, type);

declare	(val, type)	char (32) varying;

	call emit_lev_item (3, "S-Z comp-6", val);	/* 03 SIZE comp-6 value val */
	call emit_lev_item (3, "C-D pic xx", """" || code || """");
						/* 03 CODE pic xx value "cc". */
	call emit_lev_item (3, "T-Y pic xx", """" || type || """");
						/* 03 TYPE pic xx value "type" */
     end;

emit_move_int_state:
     proc (line, var);

declare	line		fixed bin,
	var		char (32) varying;

	call skip_to_b;				/* B margin */
	call append_var_string ("move");		/* move */
	call append_sep_integer (line);		/* line */
	call append_sep_var_string ("to");		/* to */
	call qual_by_rep (var);			/* var */
     end;

emit_ABS:
     proc (line);

declare	line		fixed bin;

	call STATE ("compute S-PI = 1");		/* compute S-PI = 1 */
	call emit_bl_abs (line);
	call STATE ("compute S-PI = 0");		/* compute S-PI = 0 */
     end;

emit_if_test:
     proc (var, op, con);

declare	(var, op, con)	char (32) varying;

	call skip_to_b;				/* B margin */
	call append_var_string ("if");
	call append_sep_var_string (var);
	call append_sep_var_string (op);
	call append_sep_var_string (con);		/* if var op con */
	call emit_line;

	call skip_to_b;				/* B margin */
     end;

STATE:
     proc (state);

declare	state		char (32) varying;

	call skip_to_b;				/* B margin */
	call append_var_string (state);
	call emit_line;
     end;

emit_write_state:
     proc (rec_area);

/*[5.0-1]*/
dcl	rec_area		char (32) varying;

/*[5.0-1]*/
	call emit_WR (rec_area);			/*[5.0-1]*/
	call emit_line;
     end;

emit_write_sent:
     proc (rec_area);

/*[5.0-1]*/
dcl	rec_area		char (32) varying;

/*[5.0-1]*/
	call emit_WR (rec_area);			/*[5.0-1]*/
	call append_period;				/*[5.0-1]*/
	call emit_line;
     end;

unqual_name:
     proc (qn_ptr);

/* LINE-COUNTER and PAGE-COUNTER	*/
/* must be qualif by report-name	*/

dcl	qn_ptr		ptr,
	char12		char (12);

/*[5.1-2]*/
	call append_sep_token (qn_ptr);

/*[5.1-2]*/
	if qn_ptr -> user_word.length = 12		/*[5.1-2]*/
	then do;
		char12 = substr (qn_ptr -> user_word.word, 1, 12);

/*[5.1-2]*/
		if char12 = "line-counter" | char12 = "page-counter"
						/*[5.1-2]*/
		then do;

/*[5.1-2]*/
			call append_sep_var_string ("of");
						/*[5.1-2]*/
			call append_sep_token (report.rep_name_ptr);

/*[5.1-2]*/
		     end;

/*[5.1-2]*/
	     end;

     end;



/* control name table */

declare	1 control_name_table
			based (control_name_table_loc),
	  2 cnt_size	fixed bin,
	  2 cnt_loc	(0 refer (control_name_table.cnt_size)) ptr;

declare	control_name_table_loc
			ptr;

declare	1 reserved_word	based,
%include cobol_TYPE1;

declare	1 numeric_lit	based,
%include cobol_TYPE2;

declare	1 alphanum_lit	based,
%include cobol_TYPE3;

declare	1 proc_def	based (addr_record),
%include cobol_TYPE7;

declare	addr_record	ptr;

%include cobol_report_writer;
%include cobol_ext_;
%include cobol_fixed_common;

     end;
 



		    cobol_gns.pl1                   05/24/89  1045.1rew 05/24/89  0835.2      384975



/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_gns.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 11/31/81 by FCH, [5.1-1], reset lerr to prevent loop, phx12017(BUG521) */
/* Modified on 05/19/81 by FCH, [4.4-3], $ and _ allowed in symbols in some cases */
/* Modified on 04/09/81 by FCH, [4.4-2], fix bugs in leveling for validation-81, BUG477 */
/* Modified on 12/05/80 by FCH, [4.4-1], report_writer added */
/* Modified on 04/18/80 by FCH, [4.2-8], zero length non-num lit, "" ,detected(BUG439) */
/* Modified on 04/09/80 by FCH, [4.2-7], fix problems in flagging */
/* Modified on 10/8/79 by MHD, [4.2-6], assigning 9999 to COLUMN for DEBUG statements */
/* Modified on 05/15/79 by FCH, [4.0-5], debug statement */
/* Modified on 04/17/79 by FCH, [4.0-4], " or ' delim alphanum lits */
/* Modified on 04/11/79 by FCH, [4.0-3], ignore term . if skipping copy statement */
/* Modified on 04/05/79 by FCH, [4.0-2], gcos alphalit continuation implemented */
/* Modified on 03/22/79 by FCH, [4.0-1], prepare duplicated data name table */
/* Modified on 03/28/78 by FCH, [3.0-4], lev diag 34 issued as extension */
/* Modified on 01/02/78 by FCH, [3.0-3], program-id containing _ detected */
/* Modified on 11/16/77 by FCH, [3.0-2], leveling diag 44 emitted */
/* Modified on 09/08/77 by FCH, [3.0-1], emit level for leveling diags 1,2, and 4 fixed */
/* Modified since Version 4.0 */





/* format: style3 */
cobol_gns:
     proc;

/* ========================================================================== */
/*                                                                            */
/* Procedure gns is the primary module of the lex complex. it is responsible  */
/* for the original classification and issolation of all items from the users */
/* source cards.	   						  */
/*                                                                            */
/* ========================================================================== */

/*   general overlay for any token    */
dcl	1 token		based (cobol_current),
	  2 fwd_link	pointer,
	  2 back_link	pointer,
	  2 rep_link	pointer,
	  2 l_info	bit (8),
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin;		/*   reserved_word    */
dcl	1 reserved_word	based (cobol_current),
	  2 fwd_link	pointer,
	  2 back_link	pointer,
	  2 rep_link	pointer,
	  2 l_info	bit (8),
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin,		/* = 1 */
	  2 key		fixed bin,
	  2 class		bit (26),
	  2 jump_index	fixed bin,		/*[4.4-1]*/
	  2 length	fixed bin,		/*[4.4-1]*/
	  2 name		char (30);		/*   numeric_lit    */
dcl	1 numeric_lit	based (cobol_current),
	  2 fwd_link	pointer,
	  2 back_link	pointer,
	  2 rep_link	pointer,
	  2 l_info	bit (8),
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin,		/* = 2 */
	  2 info		bit (8),
	  2 sign		char (1),
	  2 exp_sign	char (1),
	  2 exp_places	fixed bin,
	  2 places_left	fixed bin,
	  2 places_right	fixed bin,
	  2 places	fixed bin,
	  2 literal	char (30);

/*   alphanum_lit    */
dcl	1 alphanum_lit	based (cobol_current),
	  2 fwd_link	pointer,
	  2 back_link	pointer,
	  2 rep_link	pointer,
	  2 l_info	bit (8),
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin,		/* = 3 */
	  2 info		bit (8),
	  2 length	fixed bin,
	  2 string	char (200);

/*   picture    */
dcl	1 picture		based (cobol_current),
	  2 fwd_link	pointer,
	  2 back_link	pointer,
	  2 rep_link	pointer,
	  2 l_info	bit (8),
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin,		/* = 4 */
	  2 length	fixed bin,
	  2 string	char (30);

/*   user_word    */
dcl	1 user_word	based (cobol_current),
	  2 fwd_link	pointer,
	  2 back_link	pointer,
	  2 rep_link	pointer,
	  2 l_info	bit (8),
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin,		/* = 8 */
	  2 info		bit (8),
	  2 length	fixed bin,
	  2 word		char (30);

dcl	1 debug		based (cobol_current),
	  2 fwd_link	pointer,
	  2 back_link	pointer,
	  2 rep_link	pointer,
	  2 l_info	bit (8),
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin,
	  2 debug_index	fixed bin,
	  2 on_off	bit (1);

dcl	cobol_lexerr$lexerr3
			entry (fixed bin, bit (1), fixed bin, char (50)) external;
dcl	cobol_gns		entry external;
dcl	cobol_merge	entry ext;
dcl	cobol_insert_token	entry (fixed bin, fixed bin) external;
dcl	cobol_delete_tokens entry (pointer, pointer) external;
declare	cobol_c_list	entry (ptr);
dcl	mask		bit (8);
dcl	(wl, wll, places_left, exp_places, i, save_pcol, rwk)
			fixed bin;
dcl	rwc		bit (26);
dcl	wb		char (256) static;
dcl	(num_sign, exp_sign, per)
			char (1);
dcl	(exp_sw, integer_sw, found_comma)
			bit (1);
dcl	period_sw		bit (1) static init ("0"b);
dcl	dlmck1_sw		bit (1);
dcl	(rep_factor, save_nr_char, slen)
			fixed bin static,
	(c1, hc, hc1)	char (1);
dcl	(hc_ptr, hc1_ptr)	ptr;
dcl	quot_ch		char (1);
declare	np_char		bit (1);
dcl	1 hcs		based,
	  2 lp		bit (5),
	  2 rp		bit (4);
dcl	1 hcs1		based,
	  2 lp		bit (4),
	  2 rp		bit (5);
dcl	1 hcs2		based (hc_ptr),
	  2 fill		bit (3),
	  2 hc_ck		bit (1),
	  2 ehc_ck	bit (1),
	  2 fill2		bit (4);			/*[4.4-2]*/
						/* declare CONT bit(1); */
dcl	(lerr, per_sw)	bit (1) static;
dcl	save_sw		bit (1) static init ("0"b);
dcl	xplus_op		fixed bin static init (182);
dcl	xequal_op		fixed bin static init (102);
dcl	xminus_op		fixed bin static init (183);
dcl	xtimes_op		fixed bin static init (184);
dcl	xdivide_op	fixed bin static init (185);
dcl	xexponent		fixed bin static init (186);
dcl	xleft_paren	fixed bin static init (187);
dcl	xright_paren	fixed bin static init (188);
dcl	xperiod		fixed bin static init (189);
dcl	xgreater_than	fixed bin static init (113);
dcl	xless_than	fixed bin static init (123);
dcl	(addr, fixed, index, null, substr, translate, unspec, mod)
			builtin;

/*[4.4-2]*/
/* CONT = "0"b; */


start:
	dlmck1_sw = "1"b;

	do while (substr (cobol_cards.name, cobol_cards.nr_char, 1) = " ");

	     cobol_cards.nr_char = cobol_cards.nr_char + 1;

	end;

	if substr (cobol_cards.name, cobol_cards.nr_char, 1) = cobol_new_line_character
	then do;					/* get next card and scanoff spaces */
		call cobol_merge;
		go to start;
	     end;

	if cobol_scanoff_sw
	then do;
		per_sw = "0"b;
scanoff:
		do while (substr (cobol_cards.name, cobol_cards.nr_char, 1) = cobol_new_line_character);

		     call cobol_merge;

		     do while (substr (cobol_cards.name, cobol_cards.nr_char, 1) = " ");

			cobol_cards.nr_char = cobol_cards.nr_char + 1;

		     end;

		end;

		if cobol_cards.nr_char < 12
		then return;

		if substr (cobol_cards.name, cobol_cards.nr_char, 1) = "."
		then do;

			if per_sw = "0"b
			then do;
				per_sw = "1"b;

				call cobol_insert_token (1, 0);
						/*[4.0-1]*/
				prev_tok_type = 0;

				reserved_word.line = cobol_save_cln;
				reserved_word.column = cobol_save_col;
				reserved_word.key = xperiod;
				reserved_word.class = "0001"b;
			     end;

			cobol_cards.nr_char = cobol_cards.nr_char + 1;
			goto scanoff;
		     end;

		cobol_cards.nr_char = cobol_cards.nr_char + 1;
		goto scanoff;
	     end;

ck_stack_end:
	if token.fwd_link ^= null ()
	then do;

		cobol_current = token.fwd_link;

		if (token.type = 6) | (token.type = 5)
		then goto ck_stack_end;
		return;
	     end;

	cobol_save_cln = cobol_c_l_n;
	cobol_save_col = cobol_cards.nr_char;
	wl = 1;

/*[4.2-6]*/
	if substr (cobol_cards.name, 1, 6) = "~~~~~~"	/*[4.2-6]*/
	then TOK_COLUMN = 9999;			/*[4.2-6]*/
	else TOK_COLUMN = cobol_save_col;

	if cobol_pic_switch
	then goto pic_proc;				/* switch on first character first */

/*[4.4-1]*/
	new_ch = substr (cobol_cards.name, cobol_cards.nr_char, 1);

/*[4.4-1]*/
	goto l (x (fixed (unspec (new_ch), 15)));

/*[4.4-1]*/
declare	new_ch		char (1);			/* leveling diagnostics */

lev_diag:
     proc (lin, col, num);

declare	(lin, col, num)	fixed bin;

declare	1 diag_item,
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin,
	  2 run		fixed bin,
	  2 number	fixed bin,
	  2 info		bit (32);

	diag_item.size = 28;
	diag_item.type = 5;
	diag_item.run = 9;
	diag_item.info = "0"b;

	diag_item.line = lin;
	diag_item.column = col;
	diag_item.number = num;

	call cobol_c_list (addr (diag_item));

     end;


/* COMMON OPERATOR CODE */

ops1:
	cobol_cards.nr_char = cobol_cards.nr_char + 1;
ops1a:
	if substr (cobol_cards.name, cobol_cards.nr_char, 1) = cobol_new_line_character
	then call cobol_merge;

	call cobol_insert_token (1, 0);

/*[4.0-1]*/
	prev_tok_type = 0;

	reserved_word.key = rwk;
	reserved_word.class = rwc;
	reserved_word.line = cobol_save_cln;		/*[4.2-6]*/
	reserved_word.column = TOK_COLUMN;

/*[4.4-1]*/
	if report_exists				/*[4.4-1]*/
	then do;					/*[4.4-1]*/
		reserved_word.length = 1;		/*[4.4-1]*/
		substr (reserved_word.name, 1, 1) = new_ch;
						/*[4.4-1]*/
		reserved_word.size = reserved_word.size + 5;
						/*[4.4-1]*/
	     end;

/*[4.4-2]*/
/*
	if fixed_common.comp_level < "3" & CONT
	then	do;	call lev_diag	(	reserved_word.line,
						reserved_word.column,
							1
					);

			CONT = "0"b;
		end;
*/
/*[4.4-2]*/

	return;

/* end of first character selection portion */


/* ALPHANUMERIC-- USER WORD */


l (1):						/* user words: a -> z */
alpha:
	mask = "10000000"b;
	wll = 30;
	call swm;

	if lerr
	then do;
w_l_err:
		call cobol_lexerr$lexerr3 (2, "1"b, 2, "30");
						/*[5.1-1]*/
		lerr = "0"b;
		return;
	     end;

	if substr (cobol_cards.name, cobol_cards.nr_char, 1) = cobol_new_line_character
	then do;
		call cobol_merge;

		if cobol_continuation = "1"b
		then do;
			cobol_continuation = "0"b;

/*[4.4-2]*/
/* CONT = "1"b; */

			goto alpha;
		     end;
		goto uw_dlm_ok;
	     end;

	c1 = substr (wb, wl, 1);
	mask = mem_tab (fixed (unspec (c1), 35));

	if mask & "00001000"b
	then if c1 ^= """"
	     then do;

		     if c1 = "."
		     then period_sw = "1"b;
		     else period_sw = "0"b;

		     go to uw_dlm_ok;
		end;

	     else do;
		     call ill_dlm;
		     goto uw_dlm_ok;
		end;

	if cobol_head_words (3) & ^cobol_head_words (4)
	then do;

		if dlmck1_sw
		then dlmck1_sw = "0"b;

		cobol_cards.nr_char = cobol_cards.nr_char + 1;
		wl = wl + 1;
		goto alpha;
	     end;

	if cobol_progid_sw & c1 = "_"			/*[3.0-3]*/
	then do;
		cobol_cards.nr_char = cobol_cards.nr_char + 1;
		wl = wl + 1;
		substr (wb, wl, 1) = /*[3.0-3]*/ substr (cobol_cards.name, cobol_cards.nr_char, 1);

		if substr (wb, wl, 1) = "."		/*[3.0-3]*/
		then do;
			period_sw = "1"b;
			go to uw_dlm_ok;
		     end;				/*[3.0-3]*/
		else go to alpha;			/*[3.0-3]*/
	     end;
	call ill_char;
	return;

uw_dlm_ok:
	wl = wl - 1;

	if substr (wb, wl, 1) = "-"			/* illegal termination of item */
	then do;
		call ill_char;
		return;
	     end;

/*[4.4-1]*/
	if ^processing_report
	then if cobol_lu_sw
	     then substr (wb, 1, wl) = translate (substr (wb, 1, wl), lower_case_alphabet);

	call cobol_insert_token (8, wl);

/*[4.0-1]*/
	if fixed_common.comp_level < "3"		/*[4.0-1]*/
	then /*[4.0-1]*/
	     if prev_tok_type = 1			/*[4.0-1]*/
	     then do;
		     ch36 = substr (wb, 1, wl) || "~";

/*[4.0-1]*/
		     if ch36 ^= "filler~"		/*[4.0-1]*/
		     then /*[4.0-1]*/
			if index (tok_string, "~" || ch36) <= 0
						/*[4.0-1]*/
			then tok_string = tok_string || ch36;
						/*[4.0-1]*/
			else call cobol_ddsyntax$enter_tok_string (ch36);
						/*[4.0-1]*/
		end;

/*[4.0-1]*/
	prev_tok_type = 0;

	user_word.line = cobol_save_cln;		/*[4.2-6]*/
	user_word.column = TOK_COLUMN;
	user_word.length = wl;
	substr (user_word.word, 1, wl) = substr (wb, 1, wl);

/*[4.4-2]*/
/*
	if fixed_common.comp_level < "3" & CONT
	then	do;	call lev_diag	(	user_word.line,
						user_word.column,
						1
					);

			CONT = "0"b;
		end;
*/
/*[4.4-2]*/

	if fixed_common.comp_level < "3" & index ("0123456789", substr (user_word.word, 1, 1)) ^= 0
						/*[3.0-1]*/
	then call lev_diag (user_word.line, user_word.column, 4);

	if fixed_common.comp_level < "5" /* [3.0-4] */ & /* [3.0-4] */ cobol_progid_sw /* [3.0-4] */
	     & /* [3.0-4] */ index (substr (wb, 1, wl), "_") ^= 0
						/* [3.0-4] */
	then call lev_diag (user_word.line,		/*[3.0-3]*/
		user_word.column,			/*[3.0-3]*/
		34 /*[3.0-3]*/);			/*[3.0-3]*/

	if ^dlmck1_sw
	then call cobol_lexerr$lexerr3 (1, "0"b, 0, " ");

	return;


/* NUMERIC LITERIAL (FLOATING POINT) */


l (2):						/* numeric literals: 0 -> 9 */
digit:
	if cobol_head_words (5) & (cobol_cards.nr_char < 12)
	then goto alpha;				/* label--treat as a word */

	num_sign = " ";
d1a:
	integer_sw = "0"b;
	exp_sign = " ";
	exp_sw = "0"b;
	places_left = 0;
	exp_places = 0;
	per = " ";
	found_comma = "0"b;

d1:						/* return label for continuation of part 1 of digits */
						/* following size limit is 30 because of numeric procedure names */
	mask = "01000000"b;
	wll = 30;
	call swm;

	if lerr
	then do;
nl_l_err:
		call cobol_lexerr$lexerr3 (2, "1"b, 2, "30");
						/*[5.1-1]*/
		lerr = "0"b;
		return;
	     end;

	c1 = substr (cobol_cards.name, cobol_cards.nr_char, 1);

	if c1 = cobol_new_line_character
	then do;
		call cobol_merge;

		if cobol_continuation = "1"b
		then do;
			cobol_continuation = "0"b;

/*[4.4-2]*/
/* CONT = "1"b; */

			goto d1;
		     end;

		integer_sw = "1"b;
		places_left = wl - 1;
		goto nl_dlm_ok;
	     end;

	if mem_tab (fixed (unspec (c1), 35)) & "10000000"b
	then goto alpha;

	integer_sw = "1"b;
	places_left = wl - 1;			/* set count field */

	if c1 = cobol_comma_character			/*[4.2-7]*/
	then do;
		found_comma = "1"b;			/*[4.2-7]*/
		cobol_save_cln = cobol_c_l_n;		/*[4.2-7]*/
		cobol_save_col = cobol_cards.nr_char;	/*[4.2-7]*/
	     end;
	else if c1 ^= cobol_decimal_point_character
	then do;
build_nlt:
		c1 = substr (cobol_cards.name, cobol_cards.nr_char, 1);
		mask = mem_tab (fixed (unspec (c1), 35));

		if (mask & "00000001"b) | (c1 = ")")
		then goto nl_dlm_ok;

		if (c1 ^= """") & (c1 ^= "(")
		then do;
			call ill_char;
			return;
		     end;

/*call ill_dlm;*/

nl_dlm_ok:
		wl = wl - 1;

		call cobol_insert_token (2, wl);

		numeric_lit.line = cobol_save_cln;	/*[4.2-6]*/
		numeric_lit.column = TOK_COLUMN;
		numeric_lit.places = wl;
		substr (numeric_lit.info, 1, 1) = integer_sw;
		substr (numeric_lit.info, 2, 1) = exp_sw;
		numeric_lit.sign = num_sign;
		numeric_lit.exp_sign = exp_sign;
		numeric_lit.places_left = places_left;
		numeric_lit.exp_places = exp_places;
		numeric_lit.places_right = wl - places_left - exp_places;
		substr (numeric_lit.literal, 1, wl) = substr (wb, 1, wl);

/*[4.0-1]*/
		if fixed_common.comp_level < "3"
		then do;

/*[4.0-1]*/
			prev_tok_type = 0;

/*[4.0-1]*/
			if cobol_head_words (4) & ^(cobol_head_words (5))
						/*[4.0-1]*/
			then if numeric_lit.sign = " " & numeric_lit.places_right = 0
						/*[4.0-1]*/
			     then do;
				     int_val = fixed (substr (numeric_lit.literal, 1, wl));

/*[4.0-1]*/
				     if int_val >= 2 & int_val <= 49
						/*[4.0-1]*/
				     then prev_tok_type = 1;
						/*[4.0-1]*/
				end;

/*[4.0-1]*/
		     end;

/*[4.4-2]*/
/*
			if fixed_common.comp_level < "3" & CONT
			then	do;	call lev_diag	(	numeric_lit.line,
								numeric_lit.column,
								1
							);

					CONT = "0"b;
				end;
*/
/*[4.4-2]*/

		if per = "."
		then do;				/* Generate reserved word token "." (EOS). */

/*[4.0-3]*/
			token.l_info = linfo;
gen_per:
			cobol_save_col = save_pcol;
			rwk = xperiod;
			rwc = "0001"b;
			goto ops1a;
		     end;
		return;

	     end;

	save_pcol = cobol_cards.nr_char;
	per = substr (cobol_cards.name, save_pcol, 1);	/* save delimiter */
	cobol_cards.nr_char = cobol_cards.nr_char + 1;
	c1 = substr (cobol_cards.name, cobol_cards.nr_char, 1);

/*[4.0-3]*/
	if per = "."
	then linfo = token.l_info;

	if c1 = cobol_new_line_character
	then do;
		call cobol_merge;

		if cobol_continuation = "1"b
		then do;
			cobol_continuation = "0"b;

/*[4.4-2]*/
/* CONT = "1"b; */

			if mem_tab (fixed (unspec (substr (cobol_cards.name, cobol_cards.nr_char, 1)), 35))
			     & "01000000"b
			then if found_comma
			     then do;
				     call ill_char;
				     return;
				end;
			     else go to d2;

			call cobol_lexerr$lexerr3 (9, "1"b, 0, " ");

			return;

		     end;
		goto nl_dlm_ok;
	     end;

	if mem_tab (fixed (unspec (c1), 35)) & "01000000"b
	then if found_comma
	     then do;
		     call ill_char;
		     return;
		end;
	     else go to d2;


/*[4.2-7]*/
	if found_comma				/*[4.2-7]*/
	then if fixed_common.comp_level < "3"		/*[4.2-7]*/
	     then call lev_diag (cobol_save_cln, cobol_save_col, 2);
						/* ;, as sepatator */

	goto build_nlt;

/* right part of a number */

d2:
	integer_sw = "0"b;
	per = " ";
	mask = "01000000"b;
	wll = 18;
	call swm;

	if lerr
	then goto nl_l_err;

	c1 = substr (cobol_cards.name, cobol_cards.nr_char, 1);

	if c1 = cobol_new_line_character
	then do;
		call cobol_merge;

		if cobol_continuation = "1"b
		then do;
			cobol_continuation = "0"b;

/*[4.4-2]*/
/* CONT = "1"b; */

			goto d2;
		     end;
		goto nl_dlm_ok;
	     end;

/*	if c1 ^= "e" & c1 ^= "E" then  */
	goto build_nlt;

/* STRING PROCESSING */

s3:						/* continuation loop label */
	slen =
	     index (substr (cobol_cards.name, cobol_cards.nr_char, cobol_cards.column - cobol_cards.nr_char + 1), """");

	if slen = 0
	then slen = cobol_cards.column - cobol_cards.nr_char;
	else slen = slen - 1;

	if slen + wl - 1 > 200
	then do;
al_l_err:
		call cobol_lexerr$lexerr3 (4, "1"b, 3, "200");
		return;
	     end;

	if slen ^= 0
	then do;

		substr (wb, wl, slen) = substr (cobol_cards.name, cobol_cards.nr_char, slen);
		cobol_cards.nr_char = cobol_cards.nr_char + slen;
						/* terminating " or new_line  */
		wl = wl + slen;			/* cobol_current true size + 1 */

	     end;

	if substr (cobol_cards.name, cobol_cards.nr_char, 1) = cobol_new_line_character
	then do;
		i = cobol_cards.tblanks;

		call cobol_merge;

		if cobol_continuation = "1"b
		then do;
			cobol_continuation = "0"b;

/*[4.4-2]*/
/* CONT = "1"b; */

			if i ^= 0
			then do;
				substr (wb, wl, i) = " ";
				wl = wl + i;
			     end;



			if substr (cobol_cards.name, cobol_cards.nr_char, 1) ^= quot_ch
			then do;
				call cobol_lexerr$lexerr3 (5, "1"b, 0, " ");
				call scan_off;
				return;
			     end;

			cobol_cards.nr_char = cobol_cards.nr_char + 1;
			goto s3;			/* normal continuation */

		     end;

		goto alit_err;
	     end;

	if substr (cobol_cards.name, cobol_cards.nr_char, 1) = quot_ch
	then goto ck_quote;

alit_err:						/* illegal termination of literal string */
	call cobol_lexerr$lexerr3 (3, "1"b, 0, " ");
	call scan_off;
	return;

ck_quote:
	if substr (cobol_cards.name, cobol_cards.nr_char + 1, 1) = quot_ch
	then do;
		substr (wb, wl, 1) = quot_ch;		/* double quote */
		wl = wl + 1;
		cobol_cards.nr_char = cobol_cards.nr_char + 2;
		goto s3;
	     end;

	if substr (cobol_cards.name, cobol_cards.nr_char + 1, 1) = cobol_new_line_character
						/* single quote */
	then do;
		call cobol_merge;

		if cobol_continuation = "1"b
		then do;
			cobol_continuation = "0"b;

/*[4.4-2]*/
/* CONT = "1"b; */

			if substr (cobol_cards.name, cobol_cards.nr_char, 1) ^= quot_ch
			then do;
				call cobol_lexerr$lexerr3 (5, "1"b, 0, " ");
				call scan_off;
				return;
			     end;

/*[4.0-2]*/
/* continued double quote */

/*[4.0-2]*/
			if substr (fixed_common.compile_mode, 1, 1)
						/*[4.0-2]*/
			then do;			/* gcos */

/*[4.0-2]*/
				posit = cobol_cards.nr_char + 1;
						/*[4.0-2]*/
				ch = substr (cobol_cards.name, posit, 1);

ct:						/*[4.0-2]*/
				if ch = quot_ch	/*[4.0-2]*/
				then do;
					posit = posit + 1;
						/*[4.0-2]*/
					ch = substr (cobol_cards.name, posit, 1);

/*[4.0-2]*/
					go to ct; /*[4.0-2]*/
				     end;

/*[4.0-2]*/
				posit = posit - cobol_cards.nr_char;

/*[4.0-2]*/
				if ch = "
"
				then posit = posit - 1;

/*[4.0-2]*/
				if mod (posit, 2) = 1
						/*[4.0-2]*/
				then go to l (3);

/*[4.0-2]*/
			     end;

			goto ck_quote;
		     end;
		goto al_dlm_ok;
	     end;

	hc_ptr = addr (hc);
	hc1_ptr = addr (hc1);
	cobol_cards.nr_char = cobol_cards.nr_char + 1;
	hc = substr (cobol_cards.name, cobol_cards.nr_char, 1);
	hc = hexl_tab (fixed (unspec (hc), 35));

	if hcs2.hc_ck = "0"b
	then goto end_alit;

	np_char = "1"b;

	goto next_hex1;

next_hex:
	cobol_cards.nr_char = cobol_cards.nr_char + 1;
	hc = substr (cobol_cards.name, cobol_cards.nr_char, 1);

	if hc = quot_ch
	then do;
		cobol_cards.nr_char = cobol_cards.nr_char + 1;
		goto s3;
	     end;

	hc = hexl_tab (fixed (unspec (hc), 35));

	if hcs2.hc_ck = "0"b
	then do;

		if substr (cobol_cards.name, cobol_cards.nr_char, 1) = cobol_new_line_character
		then do;
			call cobol_merge;

			if cobol_continuation = "1"b
			then do;
				cobol_continuation = "0"b;

/*[4.4-2]*/
/* CONT = "1"b; */

				if substr (cobol_cards.name, cobol_cards.nr_char, 1) = quot_ch
				then goto next_hex;

			     end;
		     end;
hex_err:
		call cobol_lexerr$lexerr3 (25, "1"b, 0, " ");

		return;

	     end;

next_hex1:
	hc1_ptr -> hcs.lp = hc_ptr -> hcs1.rp;

hex_c:
	cobol_cards.nr_char = cobol_cards.nr_char + 1;
	hc = substr (cobol_cards.name, cobol_cards.nr_char, 1);

	if hc = quot_ch
	then goto hex_err;


	hc = hexl_tab (fixed (unspec (hc), 35));

	if hcs2.hc_ck = "0"b
	then do;

		if substr (cobol_cards.name, cobol_cards.nr_char, 1) = cobol_new_line_character
		then do;
			call cobol_merge;

			if cobol_continuation = "1"b
			then do;
				cobol_continuation = "0"b;

/*[4.4-2]*/
/* CONT = "1"b; */

				if substr (cobol_cards.name, cobol_cards.nr_char, 1) = c1
				then goto hex_c;

			     end;
		     end;

		goto hex_err;

	     end;

	hc1_ptr -> hcs.rp = hc_ptr -> hcs.rp;
	substr (wb, wl, 1) = hc1;
	wl = wl + 1;

	goto next_hex;

end_alit:						/*[4.2-8]*/
	if wl = 1 | wl > 211
	then do;					/* literal too long */
		call cobol_lexerr$lexerr3 (4, "1"b, 3, "200");
		return;
	     end;

	c1 = substr (cobol_cards.name, cobol_cards.nr_char, 1);
	mask = mem_tab (fixed (unspec (c1), 35));

	if (mask & "00000001"b) | (c1 = ")")
	then goto al_dlm_ok;

	call ill_dlm;
al_dlm_ok:
	wl = wl - 1;

	if np_char & fixed_common.comp_level < "5"
	then call lev_diag (cobol_save_cln, cobol_save_col, 134);

	call cobol_insert_token (3, wl);

/*[4.0-1]*/
	prev_tok_type = 0;

	alphanum_lit.line = cobol_save_cln;		/*[4.2-6]*/
	alphanum_lit.column = TOK_COLUMN;
	alphanum_lit.length = wl;
	substr (alphanum_lit.string, 1, wl) = substr (wb, 1, wl);
						/*[4.4-2]*/
	alpha_lit_bit = "0"b;

	return;

/* BIT STRING LITERIALS */

l (3):						/* alpha-numeric literals and bit strings: " */
						/*[4.0-4]*/
	quot_ch = """";				/*[4.4-2]*/
	alpha_lit_bit = "1"b;

l3:						/* bit string */
						/* alphanumeric literal */
	np_char = "0"b;
	cobol_cards.nr_char = cobol_cards.nr_char + 1;
	goto s3;

l (4):						/*[4.0-4]*/
	if substr (fixed_common.compile_mode, 2, 1)	/*[4.0-4]*/
	then do;
		quot_ch = "'";			/*[4.0-4]*/
		go to l3;				/*[4.0-4]*/
	     end;

/*[4.0-4]*/
	go to l (10);				/* COMMA OR SEMI-COLOMN CHARACTERS */

l (5):						/* comma and semi colon */
	cobol_cards.nr_char = cobol_cards.nr_char + 1;

	if ^mem_tab (fixed (unspec (substr (cobol_cards.name, cobol_cards.nr_char, 1)), 35)) & "00000010"b
	then call ill_dlm;

	if fixed_common.comp_level < "3"		/*[3.0-1]*/
	then call lev_diag (cobol_save_cln, cobol_save_col, 2);

	goto start;

/* SIGN--ARITHEMATIC OPERATORS */

l (6):
	;					/*  + operator */
l (18):						/* - operator */
	if cobol_cards.nr_char > 12
	then if substr (cobol_cards.name, cobol_cards.nr_char - 1, 1) = ")"
	     then call ill_dlm1;

	c1 = substr (cobol_cards.name, cobol_cards.nr_char, 1);
	cobol_cards.nr_char = cobol_cards.nr_char + 1;

	if substr (cobol_cards.name, cobol_cards.nr_char, 1) = cobol_new_line_character
	then do;
		call cobol_merge;

		if cobol_continuation = "1"b
		then do;
			cobol_continuation = "0"b;

/*[4.4-2]*/
/* CONT = "1"b; */

		     end;
		else goto sign1;

	     end;

	if mem_tab (fixed (unspec (substr (cobol_cards.name, cobol_cards.nr_char, 1)), 35)) & "01000000"b
	then goto sign2;				/* it is a sign character */

	if substr (cobol_cards.name, cobol_cards.nr_char, 1) = cobol_decimal_point_character
	then go to sign2;

	if ^mem_tab (fixed (unspec (substr (cobol_cards.name, cobol_cards.nr_char, 1)), 35)) & "00000010"b
	then call ill_dlm2;

	cobol_cards.nr_char = cobol_cards.nr_char - 1;

sign1:
	if c1 = "+"
	then do;
		rwk = xplus_op;
		rwc = "01"b;
	     end;
	else do;
		rwk = xminus_op;
		rwc = "01"b;
	     end;

	go to ops1;

/*   ARITHMETIC OPERATOR */

sign2:						/* must be a sign if here else an error */
	num_sign = c1;
	goto d1a;



/* ASTERISK PROCESSOR */

l (7):						/* multiply and exponent operators */
	if cobol_cards.nr_char > 12
	then if substr (cobol_cards.name, cobol_cards.nr_char - 1, 1) = ")"
	     then call ill_dlm1;

	c1 = substr (cobol_cards.name, cobol_cards.nr_char + 1, 1);

	if mem_tab (fixed (unspec (c1), 35)) & "00000010"b
	then do;					/* valid delimiter found */
put_ast:
		rwk = xtimes_op;
		rwc = "01"b;
		goto ops1;
	     end;					/* multiply operator */

	if c1 = "*"
	then do;					/* exponent operator */

		c1 = substr (cobol_cards.name, cobol_cards.nr_char + 2, 1);
		rwk = xexponent;
		rwc = "01"b;

		if ^mem_tab (fixed (unspec (c1), 35)) & "00000010"b
		then call ill_dlm2;

		cobol_cards.nr_char = cobol_cards.nr_char + 1;
		go to ops1;

	     end;					/* legal part */

	call ill_dlm2;				/* must be illegal if here */

	goto put_ast;
l (8):						/* unused */
	call ill_char;
	return;


l (9):						/* slash "/" */
	if cobol_cards.nr_char > 12
	then if substr (cobol_cards.name, cobol_cards.nr_char - 1, 1) = ")"
	     then call ill_dlm1;

	if ^mem_tab (fixed (unspec (substr (cobol_cards.name, cobol_cards.nr_char + 1, 1)), 35)) & "00000010"b
	then call ill_dlm2;

	rwk = xdivide_op;
	rwc = "01"b;

	goto ops1;

/* BAD CHARACTER IN USERS INPUT SOURCE */

l (10):						/* 000->011 013->037 ! # $  : ? @ A->Z [ \ ] ^ _ ` { | } ~ PAD */
	call ill_char;
	return;

ill_char:
     proc;

	call cobol_lexerr$lexerr3 (1, "1"b, 0, " ");
	call scan_off;
     end;

/* SPECIAL OPERATORS--BLANKS NOT REQUIRED>> */

l (11):						/* (  character. */
	rwk = xleft_paren;
	rwc = "0"b;
	goto ops1;

l (12):						/* blank and end of line characters */
	goto start;

l (13):						/* ) character. */
	rwk = xright_paren;
	rwc = "0"b;
	goto ops1;

/* NORMAL OPERATORS */

l (14):						/* "." */
	c1 = substr (cobol_cards.name, cobol_cards.nr_char, 1);

	if ^period_sw				/* if not used as user word delimiter */
	then do;

		if c1 = cobol_decimal_point_character
		then if mem_tab (fixed (unspec (substr (cobol_cards.name, cobol_cards.nr_char + 1, 1)), 35))
			& "01000000"b
		     then go to digit;

	     end;
	else period_sw = "0"b;

	if ^mem_tab (fixed (unspec (substr (cobol_cards.name, cobol_cards.nr_char + 1, 1)), 35)) & "00000010"b
	then do;
		call ill_dlm;

		if fixed_common.comp_level < "5"
		then do;
			call lev_diag (reserved_word.line, reserved_word.column, 145);
		     end;
	     end;

	rwk = xperiod;
	rwc = "0001"b;
	goto ops1;

l (15):						/* "=" and "==" (psuedo-text delimiter) operators */
	c1 = substr (cobol_cards.name, cobol_cards.nr_char + 1, 1);

	if c1 = "="
	then do;
		rwk = 256;			/* == */
		rwc = "0"b;
		cobol_cards.nr_char = cobol_cards.nr_char + 1;
		go to ops1;
	     end;

	if mem_tab (fixed (unspec (c1), 35)) & "00000010"b
	then do;
put_eq:
		rwk = xequal_op;
		rwc = "0000110"b;
		goto ops1;
	     end;

	call ill_dlm;

	goto put_eq;

l (16):						/* "<" */
	if ^mem_tab (fixed (unspec (substr (cobol_cards.name, cobol_cards.nr_char + 1, 1)), 35)) & "00000010"b
	then call ill_dlm;

	rwk = xless_than;
	rwc = "0000110"b;
	goto ops1;

l (17):						/* ">" */
	if ^mem_tab (fixed (unspec (substr (cobol_cards.name, cobol_cards.nr_char + 1, 1)), 35)) & "00000010"b
	then call ill_dlm;

	rwk = xgreater_than;
	rwc = "0000110"b;
	goto ops1;

/* PROCESS PICTURE CHARACTER STRINGS */

pic_proc:						/* picture string processor */
dcl	(cont_flag, cont_flag1)
			bit (1),
	a		char (1),
	(h_index, st_pos)	fixed bin;

	if substr (cobol_cards.name, cobol_cards.nr_char, 1) = "I"
	     | substr (cobol_cards.name, cobol_cards.nr_char, 1) = "i"
	then goto alpha;				/* handle the case of is */

p_p:						/* external entry--cobol_continuation point */
	per = " ";
	mask = "00100000"b;
	wll = 31;
	call swm;

/* (31 to allow for a terminating "." in the scan) */
	if lerr
	then goto w_l_err;

	save_pcol = cobol_cards.nr_char - 1;
	per = substr (cobol_cards.name, save_pcol, 1);




	if substr (cobol_cards.name, cobol_cards.nr_char, 1) = cobol_new_line_character
	then do;
		call cobol_merge;

		if cobol_continuation = "1"b
		then do;
			cobol_continuation = "0"b;

/*[4.4-2]*/
/* CONT = "1"b; */

			goto p_p;
		     end;

		if mem_tab (fixed (unspec (per), 35)) & "00000001"b
		then wl = wl - 2;
		else wl = wl - 1;

		goto p_p2;
	     end;

	if mem_tab (fixed (unspec (substr (wb, wl, 1)), 35)) & "00000001"b
	then do;					/* must back up one character position */
		wl = wl - 1;

		if mem_tab (fixed (unspec (substr (wb, wl, 1)), 35)) & "00000100"b
		then do;				/* delimiter in the string now */
			wl = wl - 1;
p_p2:
			if wl > 30
			then do;			/* too long */
				call cobol_lexerr$lexerr3 (2, "1"b, 2, "30");
				call scan_off;
				return;
			     end;

			if cobol_lu_sw
			then substr (wb, 1, wl) = translate (substr (wb, 1, wl), upper_case_alphabet);

			call cobol_insert_token (4, wl);

/*[4.0-1]*/
			prev_tok_type = 0;

			picture.line = cobol_save_cln;/*[4.2-6]*/
			picture.column = TOK_COLUMN;
			picture.length = wl;

/*[4.4-2]*/
/*
		if fixed_common.comp_level < "3" & CONT
		then	do;	call lev_diag	(	picture.line,
							picture.column,
							1
						);

				CONT = "0"b;
			end;
*/
/*[4.4-2]*/

			if wl > 2
			then do;
				st_pos = 2;
				cont_flag = "1"b;
			     end;
			else cont_flag = "0"b;

			do while (cont_flag);

			     h_index = index (substr (wb, st_pos, wl - st_pos + 1), "-");

			     if h_index = 0
			     then cont_flag = "0"b;
			     else do;

				     st_pos = st_pos + h_index;

				     if st_pos > wl - 1
				     then cont_flag = "0"b;
				     else do;

					     a = substr (wb, st_pos - 2, 1);

					     if a ^= "B" & a ^= "-" & a ^= "/" & a ^= "." & a ^= ","
						& a ^= "0" & a ^= "$"
					     then do;

						     substr (wb, st_pos - 1, 1) = "h";
						     cont_flag1 = "1"b;
						     cont_flag = "0"b;

						     do while (cont_flag1);

							h_index =
							     index (substr (wb, st_pos, wl - st_pos), "-");

							if h_index = 0
							then cont_flag1 = "0"b;
							else do;

								st_pos = st_pos + h_index;

								if st_pos > wl - 1
								then cont_flag1 = "0"b;
								substr (wb, st_pos - 1, 1) = "h";

							     end;
						     end;

						end;
					end;

				end;
			end;

			substr (picture.string, 1, wl) = substr (wb, 1, wl);

			if per = "."
			then goto gen_per;

/*[4.2-7]*/
			if per = ","		/*[4.2-7]*/
			then if fixed_common.comp_level < "3"
						/*[4.2-7]*/
			     then call lev_diag (cobol_c_l_n, save_pcol, 2);
						/* ,; as separator */

			return;
		     end;

		goto p_p2;

	     end;

	call ill_dlm;				/* something fishy here */

/* INTERNAL DEBUG ELEMENT */


	call ill_char;
	return;

initialize:
     entry;

/*[4.4-2]*/
	period_sw, save_sw, alpha_lit_bit = "0"b;

/*[4.0-5]*/
	return;

/*[4.4-2]*/
dcl	alpha_lit_bit	bit (1) static internal;

alpha_lit:
     entry returns (bit (1));

/*[4.4-2]*/
	return (alpha_lit_bit);

set_table:
     entry;

/*[4.4-3]*/
	if substr (fixed_common.compile_mode, 4, 1)	/*[4.4-3]*/
	then do;
		mem_tab (36) = "10100000"b;		/* $ */
						/*[4.4-3]*/
		mem_tab (95) = "10100000"b;		/* _ */

/*[4.4-3]*/
		x (36) = 1;			/* $ */
						/*[4.4-3]*/
		x (95) = 1;			/* _ */
						/*[4.4-3]*/
	     end;					/*[4.4-3]*/
	else do;
		mem_tab (36) = "00100000"b;		/*[4.4-3]*/
		mem_tab (95) = "00100000"b;

/*[4.4-3]*/
		x (36) = 10;			/*[4.4-3]*/
		x (95) = 10;			/*[4.4-3]*/
	     end;

	return;

swm:
     proc;


/* ========================================================================== */
/*                                                                            */
/* this procedure is used to scan a string of characters while they all       */
/* belong to the same set of characters. its paramaters are::                 */
/*       mask--membership to be scanned for.                                   */
/*       ons--output string from the scan.                                    */
/*       onp--output position(updated) from the scan.                         */
/*                                                                            */
/* ========================================================================== */

	slen = cobol_cards.nr_char;
swm_loop:
	if mem_tab (fixed (unspec (substr (cobol_cards.name, slen, 1)), 35)) & mask
	then do;
		slen = slen + 1;
		go to swm_loop;
	     end;

	slen = slen - cobol_cards.nr_char;


	if slen = 0
	then return;

	if slen + wl - 1 > wll
	then do;
		cobol_cards.nr_char = cobol_cards.nr_char + slen;
		lerr = "1"b;
		return;
	     end;
	else lerr = "0"b;

	substr (wb, wl, slen + 1) = substr (cobol_cards.name, cobol_cards.nr_char, slen + 1);
	cobol_cards.nr_char = cobol_cards.nr_char + slen;
	wl = wl + slen;
     end swm;

scan_off:
     proc;
scan_off1:
	if ^mem_tab (fixed (unspec (substr (cobol_cards.name, cobol_cards.nr_char, 1)), 35)) & "00001000"b
	then do;
		cobol_cards.nr_char = cobol_cards.nr_char + 1;
		goto scan_off1;
	     end;

	if substr (cobol_cards.name, cobol_cards.nr_char, 1) = cobol_new_line_character
	then do;
		call cobol_merge;

		if cobol_continuation = "1"b
		then do;
			cobol_continuation = "0"b;	/*[4.4-2]*/
						/* CONT = "1"b; */
			goto scan_off1;
		     end;
	     end;
     end scan_off;

ill_dlm:
     proc;
	call cobol_lexerr$lexerr3 (6, "0"b, 0, " ");
     end ill_dlm;

ill_dlm1:
     proc;
	call cobol_lexerr$lexerr3 (30, "0"b, 0, " ");

	if fixed_common.comp_level < "5"		/*[3.0-2]*/
	then call lev_diag (reserved_word.line,		/*[3.0-2]*/
		reserved_word.column,		/*[3.0-2]*/
		44 /*[3.0-2]*/);			/*[3.0-2]*/


     end ill_dlm1;

ill_dlm2:
     proc;
	call cobol_lexerr$lexerr3 (31, "0"b, 0, " ");

	if fixed_common.comp_level < "5"		/*[3.0-2]*/
	then call lev_diag (reserved_word.line,		/*[3.0-2]*/
		reserved_word.column,		/*[3.0-2]*/
		44 /*[3.0-2]*/);			/*[3.0-2]*/


     end ill_dlm2;

/*[4.0-1]*/
init_tok_string:
     entry;

/*[4.0-1]*/
	prev_tok_type = 0;				/*[4.0-1]*/
	tok_string = "~";

/*[4.0-1]*/
	call cobol_ddsyntax$init_tok_string;

/*[4.0-1]*/
	return;

/*[4.0-1]*/
dcl	cobol_ddsyntax$init_tok_string
			entry;			/*[4.0-1]*/
dcl	cobol_ddsyntax$enter_tok_string
			entry (char (36) varying);

/*[4.0-1]*/
dcl	prev_tok_type	fixed bin static internal;	/*[4.0-1]*/
dcl	tok_string	char (1024) varying static internal;

/*[4.0-1]*/
dcl	ch36		char (36) varying,
	int_val		fixed bin;

/*[4.0-2]*/
dcl	posit		fixed bin,
	ch		char (1),
	linfo		bit (8);


dcl	lower_case_alphabet char (128) static options (constant) init (" 	
 !""#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\]^_`abcdefghijklmnopqrstuvwxyz{|}~");
dcl	upper_case_alphabet char (128) static options (constant) init (" 	
 !""#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`ABCDEFGHIJKLMNOPQRSTUVWXYZ{|}~");


/* +46 [] ->{}
/* process EXPONENT expression %/
/*
/*	exp_sw = "1"b;
/*	cobol_cards.nr_char = cobol_cards.nr_char + 1;		/* skip the e %/
/*	if substr(cobol_cards.name, cobol_cards.nr_char, 1) = cobol_new_line_character then
/*	do;
/*		call cobol_merge;
/*		if cobol_continuation = "1"b then
/*		do;
/*		cobol_continuation = "0"b;
/*		goto d3;
/*		end;
/*	end;
/*
/*d3:	
/*
/*	c1 = substr(cobol_cards.name,cobol_cards.nr_char,1);
/*	if mem_tab(unspec(c1)) & "01000000"b  then
/*	goto d4;
/*	if (c1 = "+") | (c1 = "-") then
/*	do;
/*		exp_sign = c1;
/*		cobol_cards.nr_char = cobol_cards.nr_char + 1;
/*		goto d4;
/*	end;
/*
/* not an exponent expression %/
/*
/*	cobol_cards.nr_char = cobol_cards.nr_char - 1;		/* back up one character %/
/*	goto build_nlt;
/*
/* accumulate exponent value now %/
/*
/*d4:	
/*
/*	mask = "01000000"b;
/*	wll = 18;
/*	call swm;
/*	if lerr then goto nl_l_err;
/*	if substr(cobol_cards.name, cobol_cards.nr_char, 1) = cobol_new_line_character then
/*	do;
/*		call cobol_merge;
/*		if cobol_continuation = "1"b then
/*		do;
/*		cobol_continuation = "0"b;
/*		goto d4;
/*		end;
/*	end;
/*	goto build_nlt;
/*   -46 []->{} */


/* +68 []->{}
/*	bitstr_sw = "0"b;
/*  	goto b_s1a;
/*b_s1:						/* continuation loop label %/
/*	if substr(cobol_cards.name, cobol_cards.nr_char, 1) ^= """" then
/*	do;
/*{%/		call cobol_lexerr$lexerr3(5,"1"b,0," "); /*}%/
/*		call scan_off;
/*		return;
/*	end;
/*b_s1a:	
/*	cobol_cards.nr_char = cobol_cards.nr_char + 1;
/*	mask = "00010000"b;
/*	wll = /*{{{ 64 }}}%/ /*{%/ 200 /*}%/;
/*	call swm;
/*	if lerr then goto al_l_err;
/*	if substr(cobol_cards.name, cobol_cards.nr_char, 1) = cobol_new_line_character then
/*	do;
/*		call cobol_merge;
/*		if cobol_continuation = "1"b then
/*		do;
/*		cobol_continuation = "0"b;
/*		goto b_s1;
/*		end;
/*	end;
/*	if substr(cobol_cards.name,cobol_cards.nr_char,1) = """" then
/*	do;					/* tail delimiter %/
/*		if substr(cobol_cards.name, cobol_cards.nr_char + 1, 1) = """" then goto proc_quote;
/*		cobol_cards.nr_char = cobol_cards.nr_char + 1;
/*
/*b_s2:	    					/* final delimiter processing %/
/*
/*	if substr(cobol_cards.name, cobol_cards.nr_char, 1) = cobol_new_line_character then
/*	do;
/*		call cobol_merge;
/*		if cobol_continuation = "1"b then
/*		do;
/*		cobol_continuation = "0"b;
/*		goto b_s2;
/*		end;
/*	end;
/*		hc = substr(cobol_cards.name, cobol_cards.nr_char, 1);
/*		hc = hexl_tab(unspec(hc));
/*		if unspec(hc) ^= "0"b then goto next_hex2;
/*		if substr(cobol_cards.name,cobol_cards.nr_char,1) = "b" | substr(cobol_cards.name, cobol_cards.nr_char, 1) = "B" then
/*		do;
/*		bitstr_sw = "1"b;
/*		cobol_cards.nr_char = cobol_cards.nr_char + 1;
/*		end;
/*
/*		goto build_alt;
/*	end;
/*	if substr(cobol_cards.name,cobol_cards.nr_char,1)^="(" then
/*	goto s3;					/* only item allowed %/
/*	goto s3;					/* *** This bypasses the repitition code *** %/
/*	cobol_cards.nr_char = cobol_cards.nr_char + 1;
/*	rep_factor = 0;
/*
/*b_s4:	
/*
/*	do while (mem_tab(unspec(substr(cobol_cards.name,cobol_cards.nr_char,1))) & "01000000"b );
/*		rep_factor = rep_factor * 10 + unspec(substr(cobol_cards.name,cobol_cards.nr_char,1)) -
/*		 /*{{{ 240 }}}%/ /*{%/ 48 /*}%/;
/*		cobol_cards.nr_char = cobol_cards.nr_char + 1;
/*	end;					/* digit accumulation loop %/
/*	if substr(cobol_cards.name, cobol_cards.nr_char, 1) = cobol_new_line_character then
/*	do;
/*		call cobol_merge;
/*		if cobol_continuation = "1"b then
/*		do;
/*		cobol_continuation = "0"b;
/*		goto b_s4;
/*		end;
/*	end;
/*	do rep_factor = rep_factor-1 by -1 to 1;
/*		substr(wb,wl,1) = 
/*		substr(wb,wl-1,1); /* duplicate te character %/
/*		wl = wl + 1;
/*	end;					/* expansion part %/
/*
/*b_s3:	
/*
/*	if substr(cobol_cards.name, cobol_cards.nr_char, 1) = cobol_new_line_character then
/*	do;
/*		call cobol_merge;
/*		if cobol_continuation = "1"b then
/*		do;
/*		cobol_continuation = "0"b;
/*		goto b_s3;
/*		end;
/*	end;
/*	if substr(cobol_cards.name,cobol_cards.nr_char,1)^=")"	/* improper delimiter %/
/*	then	do;	call ill_char;
/*			return;
/*		end;
/*	goto b_s1a;
/*   -68 []->{} */

/* +67 []->{} *->%
/*
/*	cobol_cards.nr_char = cobol_cards.nr_char + 1;		/* skip the starting character %/
/*
/*d_c1:	
/*
/*	call cobol_insert_token(8);
/*	user_word.length = 1;
/*	call swm("10000000"b,addr(user_word.word),user_word.length, 3);
/*	if lerr then	do;	call ill_char;
/*				return;
/*			end;
/*
/* we should now have either "on" or "off" %/
/*
/*dcl (p,q) pointer static,
/*    (i, j) fixed bin static,
/*	xp bit (1) static;
/*	p = cobol_current;				/* save the location within the stack %/
/*	if substr(user_word.word,1,2) = "ON" then
/*	xp = "1"b;
/*	else
/*	if substr(user_word.word,1,3) = "OFF" then
/*	xp = "0"b;
/*	else	do;	call ill_char
/*			return;
/*		end;
/*	call cobol_gns;					/* get the next symbol %/
/*	if reserved_word.type = 1 then
/*	if reserved_word.key = xleft_paren then goto l2;
/*	else;
/*	else call lexerr(14, "0"b, 1, "(");		/* missing ( %/
/*
/*l2:	
/*
/*	call cobol_gns;					/* get the first digit value %/
/*	if reserved_word.type ^= 1 then goto l2;
/*	if reserved_word.key ^= xright_paren then goto l2;
/*	q = cobol_current;				/* save the top end of the string %/
/*	cobol_current = p;				/* reset token stack %/
/*	do while (cobol_current ^= q);
/*		if numeric_lit.type = 2 then
/*		do;					/* valid item maybe %/
/*
/* NOTICE==HANDLE CASE OF OUR OWN DEBUG ITEMS FIRST>> %/
/*
/*		i = 0;
/*		do j = 1 to numeric_lit.places;
/*			if mem_tab(unspec(substr(numeric_lit.literal,j,1))) & "01000000"b then
/*			i = i * 10 + unspec(substr(numeric_lit.literal,j,1)) - 48;
/*		end;
/* 		if i <= 25 then
/* 		bug(i) = xp; 
/*		else 
/*		do;				/* not ours %/
/*
/* set type and value into element %/
/*			debug.type = 24;
/*			debug.size =   21;		/* mark exact element size %/
/*			debug.on_off = xp;
/*			debug.debug_index = i;
/*		end;
/*		end;					/* element completed %/
/*		cobol_current = numeric_lit.fwd_link;		/* advance token index %/
/*	end;
/*	cobol_current = q;
/*	call cobol_delete_tokens(p,q);
/*	call cobol_gns;					/* make the actual token active %/
/* 	if (bug(1)) then call trace ("EXIT GNS--debug section"); 
/*	return;
/*  -67 []->{} *->% */

/*  This variable is used to contain the column number to assign to COLUMN */
/* in the token header.  It is either the actual source */
/* column number or 0 (for all columns inserted for debug */

/*[4.2-6]*/
declare	TOK_COLUMN	fixed bin;
%include cobol_ext_lex;
%include cobol_hexl_tab;
%include cobol_gns_tab;
%include cobol_fixed_common;
%include cobol_ext_;

     end cobol_gns;
 



		    cobol_gns1.pl1                  05/24/89  1045.1rew 05/24/89  0835.2       17172



/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_gns1.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* 5/27/77, FCH, fixed bin decls standardized */
/* Modified on 10/26/76 by ORN to eliminate call to obsolete procedure cobol_check_rep */

/* format: style3 */
cobol_gns1:
     proc;

/* This routine is the dispatcher for the basic functions of lex */

declare	cobol_res_words	entry external;
declare	cobol_gns		entry external;

/* declare  cobol_check_rep entry external;  */

/*   general overlay for any token    */

declare	1 token		based (cobol_current),
	  2 fwd_link	pointer,
	  2 back_link	pointer,
	  2 rep_link	pointer,
	  2 l_info	bit (8),
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin;

declare	substr		builtin;

	if cobol_endprog_sw = "1"b
	then return;

	call cobol_gns;

	if substr (token.l_info, 1, 1) = "0"b
	then /*	if cobol_rep_sw then call cobol_check_rep;   */
	     if token.type = 8
	     then call cobol_res_words;

%include cobol_ext_lex;

     end cobol_gns1;




		    cobol_ided.alm                  05/24/89  1045.1rew 05/24/89  0837.3      554076



" *********************************************************
" *                                                       *
" * Copyright, (C) BULL HN Information Systems Inc., 1989 *
" *                                                       *
" * Copyright (c) 1972 by Massachusetts Institute of      *
" * Technology and Honeywell Information Systems, Inc.    *
" *                                                       *
" *********************************************************

" HISTORY COMMENTS:
"  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8082),
"     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
"     MCR8082 cobol_ided.alm Fix wild array subscript.
"                                                      END HISTORY COMMENTS


name	cobol_ided
	entry	cobol_ided
cobol_ided:	save
	epp2	cobol_ided
	spri2	ap|2,*
	return
		equ i_r,0
		equ i_c,1
		equ i_s,3
		equ i_n,2
		equ i_k,4
		equ i_K,5
		equ l_org,*-5
l_1:		vfd a36/    ,36/i_n,36/0,36/(r1dg-l_org)/5,36/a_60
l_2:		vfd a36/    ,36/i_n,36/0,36/(r2dg-l_org)/5,36/a_60
l_3:		vfd a36/    ,36/i_n,36/0,36/(l_4-l_org)/5,36/a_1
l_4:		vfd a36/ 5  ,36/i_r,36/r_control,36/(cd-l_org)/5,36/8
	id:	vfd a36/    ,36/i_r,36/r_identification,36/(id_2-l_org)/5,36/a_15
		vfd a36/    ,36/i_r,36/r_program_id,36/(id_3-l_org)/5,36/a_15
		vfd a36/s   ,36/i_n,36/104,36/(l_5-l_org)/5,36/0
l_5:	id1:	vfd a36/    ,36/i_r,36/089,36/(id_2-l_org)/5,36/a_15
		vfd a36/    ,36/i_r,36/089,36/(id_3-l_org)/5,36/a_15
		vfd a36/s   ,36/i_n,36/0,36/(id1-l_org)/5,36/0
	id_2:	vfd a36/s   ,36/i_c,36/c_areaa,36/(l_6-l_org)/5,36/0
		vfd a36/s   ,36/i_n,36/001,36/(l_6-l_org)/5,36/0
l_6:		vfd a36/s   ,36/i_r,36/r_division,36/(l_7-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/002,36/(l_7-l_org)/5,36/0
l_7:		vfd a36/s   ,36/i_r,36/r_per,36/(l_8-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/003,36/(l_8-l_org)/5,36/a_173
l_8:	id_3:	vfd a36/    ,36/i_r,36/r_program_id,36/(l_9-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/004,36/(id_4-l_org)/5,36/a_60
l_9:	id_1:	vfd a36/s   ,36/i_c,36/c_areaa,36/(l_10-l_org)/5,36/0
		vfd a36/s   ,36/i_n,36/001,36/(l_10-l_org)/5,36/0
l_10:		vfd a36/s   ,36/i_r,36/r_per,36/(l_11-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/003,36/(l_11-l_org)/5,36/a_173
l_11:		vfd a36/s   ,36/i_c,36/c_usrwd,36/(l_12-l_org)/5,36/a_9
		vfd a36/    ,36/i_n,36/005,36/(r1dg-l_org)/5,36/a_60
l_12:		vfd a36/s   ,36/i_r,36/r_per,36/(l_13-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/003,36/(l_13-l_org)/5,36/a_173
l_13:		vfd a36/    ,36/i_c,36/c_areaa,36/(l_14-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/001,36/(l_14-l_org)/5,36/0
l_14:	ed:	vfd a36/    ,36/i_r,36/r_environment,36/(ed_1-l_org)/5,36/a_26
		vfd a36/    ,36/i_n,36/0,36/(idpar-l_org)/5,36/0
	id_4:	vfd a36/ 5  ,36/i_n,36/161,36/(r1dg-l_org)/5,36/25
	cd:	vfd a36/s   ,36/i_c,36/c_areaa,36/(l_15-l_org)/5,36/0
		vfd a36/s   ,36/i_n,36/001,36/(l_15-l_org)/5,36/0
l_15:		vfd a36/s   ,36/i_r,36/r_division,36/(l_16-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/002,36/(l_16-l_org)/5,36/0
l_16:		vfd a36/s   ,36/i_r,36/r_per,36/(l_17-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/003,36/(l_17-l_org)/5,36/a_173
l_17:		vfd a36/    ,36/i_r,36/r_substitution,36/(sub-l_org)/5,36/0
	ds:	vfd a36/s   ,36/i_r,36/r_default,36/(def-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/73,36/(r1dg-l_org)/5,36/0
	def:	vfd a36/s   ,36/i_r,36/r_section,36/(l_18-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/0,36/(def_9-l_org)/5,36/0
l_18:		vfd a36/s   ,36/i_r,36/r_per,36/(l_19-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/003,36/(l_19-l_org)/5,36/a_173
l_19:	def_4:	vfd a36/s   ,36/i_r,36/r_default,36/(l_20-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/0,36/(def_1-l_org)/5,36/0
l_20:	def_9:	vfd a36/s   ,36/i_r,36/r_for,36/(l_21-l_org)/5,36/0
l_21:	def_1:	vfd a36/s   ,36/i_r,36/r_display,36/(disp_1-l_org)/5,36/0
		vfd a36/s   ,36/i_r,36/r_generate,36/(def_5-l_org)/5,36/0
		vfd a36/s   ,36/i_r,36/r_numeric,36/(temp_2-l_org)/5,36/a_162
		vfd a36/s   ,36/i_r,36/r_comp,36/(def_2-l_org)/5,36/a_162
		vfd a36/    ,36/i_c,36/c_clorder,36/(id-l_org)/5,36/0
		vfd a36/s   ,36/i_r,36/r_temporary,36/(temp_0-l_org)/5,36/0
		vfd a36/s   ,36/i_r,36/r_symbolic,36/(symb_1-l_org)/5,36/a_162
		vfd a36/s   ,36/i_r,36/r_accept,36/(acc_1-l_org)/5,36/a_162
		vfd a36/s   ,36/i_r,36/r_sign,36/(disp_2-l_org)/5,36/0
		vfd a36/s   ,36/i_r,36/r_is,36/(disp_3-l_org)/5,36/0
		vfd a36/s   ,36/i_r,36/r_leading,36/(disp_4-l_org)/5,36/a_170
		vfd a36/s   ,36/i_r,36/r_trailing,36/(disp_4-l_org)/5,36/a_171
		vfd a36/    ,36/i_n,36/0,36/(id-l_org)/5,36/0
	def_5:	vfd a36/s   ,36/i_r,36/r_no,36/(l_22-l_org)/5,36/0
		vfd a36/s   ,36/i_r,36/r_aggregate,36/(def_6-l_org)/5,36/0
		vfd a36/s   ,36/i_r,36/r_scalar,36/(def_7-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/0,36/(id-l_org)/5,36/0
l_22:	def_6:	vfd a36/    ,36/i_n,36/0,36/(def_8-l_org)/5,36/a_54
	def_7:	vfd a36/    ,36/i_n,36/0,36/(def_8-l_org)/5,36/a_55
	def_8:	vfd a36/s   ,36/i_r,36/r_descriptors,36/(def_3-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/0,36/(def_3-l_org)/5,36/0
	disp_1:	vfd a36/s   ,36/i_r,36/r_sign,36/(disp_2-l_org)/5,36/0
		vfd a36/s   ,36/i_r,36/r_is,36/(l_23-l_org)/5,36/0
l_23:		vfd a36/s   ,36/i_c,36/c_out_dev,36/(def_3-l_org)/5,36/a_165
		vfd a36/    ,36/i_r,36/r_leading,36/(disp_4-l_org)/5,36/a_170
		vfd a36/    ,36/i_r,36/r_trailing,36/(disp_4-l_org)/5,36/a_171
		vfd a36/    ,36/i_n,36/071,36/(def_4-l_org)/5,36/0
	disp_2:	vfd a36/s   ,36/i_r,36/r_is,36/(l_24-l_org)/5,36/0
l_24:	disp_3:	vfd a36/s   ,36/i_r,36/r_leading,36/(l_25-l_org)/5,36/a_170
		vfd a36/s   ,36/i_r,36/r_trailing,36/(l_25-l_org)/5,36/a_171
		vfd a36/    ,36/i_n,36/081,36/(def_4-l_org)/5,36/0
l_25:	disp_4:	vfd a36/s   ,36/i_r,36/r_separate,36/(l_26-l_org)/5,36/a_172
		vfd a36/    ,36/i_n,36/0,36/(def_3-l_org)/5,36/0
l_26:		vfd a36/s   ,36/i_r,36/r_character,36/(def_3-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/0,36/(def_3-l_org)/5,36/0
	acc_1:	vfd a36/s   ,36/i_r,36/r_is,36/(l_27-l_org)/5,36/0
l_27:		vfd a36/s   ,36/i_c,36/c_in_dev,36/(def_3-l_org)/5,36/a_164
		vfd a36/    ,36/i_n,36/082,36/(def_4-l_org)/5,36/0
	temp_0:	vfd a36/    ,36/i_n,36/0,36/(l_28-l_org)/5,36/a_162
l_28:	temp_1:	vfd a36/s   ,36/i_r,36/r_is,36/(l_29-l_org)/5,36/0
l_29:		vfd a36/s   ,36/i_c,36/c_tempint,36/(def_3-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/083,36/(def_4-l_org)/5,36/0
	temp_2:	vfd a36/s   ,36/i_r,36/r_limit,36/(temp_1-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/0,36/(temp_1-l_org)/5,36/0
	symb_1:	vfd a36/s   ,36/i_r,36/r_queue,36/(l_30-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/084,36/(def_4-l_org)/5,36/0
l_30:		vfd a36/s   ,36/i_r,36/r_is,36/(l_31-l_org)/5,36/0
l_31:		vfd a36/s   ,36/i_r,36/r_omitted,36/(def_3-l_org)/5,36/a_167
		vfd a36/s   ,36/i_r,36/r_message,36/(l_32-l_org)/5,36/a_167
		vfd a36/    ,36/i_n,36/072,36/(def_4-l_org)/5,36/0
l_32:		vfd a36/s   ,36/i_r,36/r_unit,36/(def_3-l_org)/5,36/0
		vfd a36/ 5  ,36/i_n,36/153,36/(def_3-l_org)/5,36/25
	def_2:	vfd a36/s   ,36/i_r,36/r_is,36/(l_33-l_org)/5,36/0
l_33:		vfd a36/s   ,36/i_c,36/c_comptype,36/(def_3-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/086,36/(def_4-l_org)/5,36/0
	def_3:	vfd a36/s   ,36/i_r,36/r_per,36/(l_34-l_org)/5,36/0
l_34:		vfd a36/    ,36/i_c,36/c_dupdef,36/(def_4-l_org)/5,36/a_169
		vfd a36/    ,36/i_n,36/080,36/(def_4-l_org)/5,36/0
	sub:	vfd a36/s   ,36/i_c,36/c_areaa,36/(l_35-l_org)/5,36/0
		vfd a36/s   ,36/i_n,36/001,36/(l_35-l_org)/5,36/0
l_35:		vfd a36/s   ,36/i_r,36/r_section,36/(l_36-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/012,36/(l_36-l_org)/5,36/0
l_36:		vfd a36/s   ,36/i_r,36/r_per,36/(l_37-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/003,36/(l_37-l_org)/5,36/a_173
l_37:	sub_1:	vfd a36/s   ,36/i_r,36/r_default,36/(def-l_org)/5,36/0
		vfd a36/    ,36/i_r,36/r_identification,36/(id_2-l_org)/5,36/0
		vfd a36/    ,36/i_r,36/r_data,36/(div-l_org)/5,36/0
		vfd a36/    ,36/i_c,36/c_areaa,36/(l_38-l_org)/5,36/0
		vfd a36/s   ,36/i_n,36/0,36/(sub_1-l_org)/5,36/0
l_38:	idpar:	vfd a36/s   ,36/i_c,36/c_idparnm,36/(l_39-l_org)/5,36/0
		vfd a36/s   ,36/i_n,36/0,36/(idpar1-l_org)/5,36/0
l_39:		vfd a36/ 5  ,36/i_c,36/c_rempar,36/(l_40-l_org)/5,36/152
l_40:		vfd a36/    ,36/i_c,36/c_dupdef,36/(l_41-l_org)/5,36/a_84
		vfd a36/    ,36/i_n,36/080,36/(l_41-l_org)/5,36/0
l_41:		vfd a36/s   ,36/i_r,36/r_per,36/(l_42-l_org)/5,36/a_10
		vfd a36/    ,36/i_n,36/003,36/(l_42-l_org)/5,36/a_10
l_42:	idpar1:	vfd a36/    ,36/i_c,36/c_areaa,36/(ed-l_org)/5,36/a_11
		vfd a36/s   ,36/i_n,36/0,36/(idpar1-l_org)/5,36/0
	ed_1:	vfd a36/    ,36/i_c,36/c_clorder,36/(l_43-l_org)/5,36/0
		vfd a36/ 5  ,36/i_n,36/7,36/(l_43-l_org)/5,36/25
l_43:	ed_4:	vfd a36/s   ,36/i_c,36/c_areaa,36/(l_44-l_org)/5,36/0
		vfd a36/s   ,36/i_n,36/001,36/(l_44-l_org)/5,36/0
l_44:		vfd a36/s   ,36/i_r,36/r_division,36/(l_45-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/002,36/(r2dg-l_org)/5,36/a_60
l_45:		vfd a36/s   ,36/i_r,36/r_per,36/(l_46-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/003,36/(l_46-l_org)/5,36/a_173
l_46:		vfd a36/    ,36/i_r,36/r_configuration,36/(l_47-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/076,36/(r3dg-l_org)/5,36/a_60
l_47:	ed_2:	vfd a36/s   ,36/i_c,36/c_areaa,36/(l_48-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/001,36/(l_48-l_org)/5,36/0
l_48:		vfd a36/s   ,36/i_r,36/r_section,36/(l_49-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/012,36/(l_49-l_org)/5,36/0
l_49:		vfd a36/s   ,36/i_r,36/r_per,36/(l_50-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/003,36/(l_50-l_org)/5,36/a_173
l_50:		vfd a36/    ,36/i_r,36/r_source_computer,36/(l_51-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/077,36/(objcomp-l_org)/5,36/0
l_51:	ed_3:	vfd a36/s   ,36/i_c,36/c_areaa,36/(l_52-l_org)/5,36/0
		vfd a36/s   ,36/i_n,36/001,36/(l_52-l_org)/5,36/0
l_52:		vfd a36/s   ,36/i_r,36/r_per,36/(l_53-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/003,36/(l_53-l_org)/5,36/a_173
l_53:		vfd a36/s   ,36/i_c,36/0,36/(l_54-l_org)/5,36/a_48
l_54:		vfd a36/s   ,36/i_c,36/c_sc_name,36/(sc_4-l_org)/5,36/a_2
		vfd a36/    ,36/i_n,36/007,36/(l_55-l_org)/5,36/a_2
l_55:	ed_5:	vfd a36/s   ,36/i_r,36/r_per,36/(objcomp-l_org)/5,36/0
		vfd a36/    ,36/i_c,36/c_areaa,36/(objcomp-l_org)/5,36/0
		vfd a36/s   ,36/i_n,36/0,36/(ed_5-l_org)/5,36/0
	sc_4:	vfd a36/    ,36/i_c,36/c_comp_test,36/(l_56-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/009,36/(l_56-l_org)/5,36/0
l_56:	sc_1:	vfd a36/s   ,36/i_r,36/r_with,36/(sc_2-l_org)/5,36/0
l_57:		vfd a36/    ,36/i_r,36/r_debugging,36/(db_1-l_org)/5,36/a_3
		vfd a36/    ,36/i_c,36/c_clorder,36/(l_58-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/015,36/(l_58-l_org)/5,36/0
l_58:		vfd a36/s   ,36/i_r,36/r_per,36/(objcomp-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/003,36/(objcomp-l_org)/5,36/a_173
	sc_2:	vfd a36/    ,36/i_r,36/r_debugging,36/(db_1-l_org)/5,36/a_3
		vfd a36/    ,36/i_n,36/013,36/(r4dg-l_org)/5,36/a_60
	sc_3:	vfd a36/    ,36/i_c,36/c_dupdef,36/(sc_1-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/080,36/(sc_1-l_org)/5,36/0
	db_1:	vfd a36/s2  ,36/i_n,36/146,36/(l_59-l_org)/5,36/11
l_59:		vfd a36/s   ,36/i_r,36/r_mode,36/(sc_3-l_org)/5,36/a_4
		vfd a36/    ,36/i_n,36/014,36/(sc_3-l_org)/5,36/0
	objcomp:	vfd a36/    ,36/i_r,36/r_object_computer,36/(l_60-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/078,36/(r6dg-l_org)/5,36/a_60
l_60:	obj_1:	vfd a36/s   ,36/i_c,36/c_areaa,36/(l_61-l_org)/5,36/0
		vfd a36/s   ,36/i_n,36/001,36/(l_61-l_org)/5,36/0
l_61:		vfd a36/s   ,36/i_r,36/r_per,36/(l_62-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/003,36/(l_62-l_org)/5,36/a_173
l_62:		vfd a36/s   ,36/i_c,36/0,36/(l_63-l_org)/5,36/a_48
l_63:		vfd a36/s   ,36/i_c,36/c_oc_name,36/(oc_4-l_org)/5,36/a_5
		vfd a36/    ,36/i_n,36/007,36/(l_64-l_org)/5,36/a_5
l_64:	oc_5:	vfd a36/s   ,36/i_r,36/r_program,36/(pcs_1-l_org)/5,36/a_40
		vfd a36/s   ,36/i_r,36/r_collating,36/(pcs_2-l_org)/5,36/a_40
		vfd a36/s   ,36/i_r,36/r_sequence,36/(pcs_3-l_org)/5,36/a_6
		vfd a36/    ,36/i_r,36/r_memory,36/(om_1-l_org)/5,36/a_6
		vfd a36/    ,36/i_r,36/r_segment_limit,36/(segl_1-l_org)/5,36/a_6
		vfd a36/s   ,36/i_r,36/r_per,36/(snp-l_org)/5,36/0
		vfd a36/    ,36/i_c,36/c_areaa,36/(snp-l_org)/5,36/0
		vfd a36/s   ,36/i_n,36/0,36/(oc_5-l_org)/5,36/0
	oc_4:	vfd a36/    ,36/i_c,36/c_comp_test,36/(l_65-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/009,36/(l_65-l_org)/5,36/0
l_65:	oc_1:	vfd a36/s   ,36/i_r,36/r_program,36/(pcs_1-l_org)/5,36/0
		vfd a36/s   ,36/i_r,36/r_collating,36/(pcs_2-l_org)/5,36/0
		vfd a36/s   ,36/i_r,36/r_sequence,36/(pcs_3-l_org)/5,36/a_6
		vfd a36/s   ,36/i_r,36/r_memory,36/(om_1-l_org)/5,36/a_6
		vfd a36/    ,36/i_r,36/r_segment_limit,36/(segl_1-l_org)/5,36/a_6
		vfd a36/    ,36/i_c,36/c_clorder,36/(l_66-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/088,36/(l_66-l_org)/5,36/0
l_66:		vfd a36/s   ,36/i_r,36/r_per,36/(snp-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/003,36/(snp-l_org)/5,36/a_173
	oc_3:	vfd a36/    ,36/i_c,36/c_dupdef,36/(oc_1-l_org)/5,36/a_7
		vfd a36/    ,36/i_n,36/080,36/(oc_1-l_org)/5,36/0
	pcs_1:	vfd a36/s   ,36/i_r,36/r_collating,36/(l_67-l_org)/5,36/0
l_67:	pcs_2:	vfd a36/s   ,36/i_r,36/r_sequence,36/(l_68-l_org)/5,36/a_8
		vfd a36/    ,36/i_n,36/019,36/(l_68-l_org)/5,36/a_8
l_68:	pcs_3:	vfd a36/s   ,36/i_r,36/r_is,36/(l_69-l_org)/5,36/0
l_69:		vfd a36/s   ,36/i_c,36/c_alfnam,36/(oc_3-l_org)/5,36/a_63
		vfd a36/    ,36/i_n,36/020,36/(r6dg-l_org)/5,36/a_60
	om_1:	vfd a36/s   ,36/i_r,36/r_size,36/(l_70-l_org)/5,36/0
l_70:		vfd a36/s   ,36/i_c,36/c_integr,36/(l_71-l_org)/5,36/0
l_71:		vfd a36/s   ,36/i_r,36/r_characters,36/(oc_3-l_org)/5,36/0
		vfd a36/s   ,36/i_r,36/r_words,36/(oc_3-l_org)/5,36/0
		vfd a36/s   ,36/i_r,36/r_modules,36/(oc_3-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/070,36/(oc_3-l_org)/5,36/0
	segl_1:	vfd a36/s4  ,36/i_n,36/46,36/(l_72-l_org)/5,36/8
l_72:		vfd a36/s   ,36/i_r,36/r_is,36/(l_73-l_org)/5,36/0
l_73:		vfd a36/    ,36/i_c,36/c_integr,36/(l_74-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/023,36/(r6dg-l_org)/5,36/a_60
l_74:		vfd a36/s   ,36/i_c,36/c_smal50,36/(oc_3-l_org)/5,36/0
		vfd a36/s   ,36/i_n,36/017,36/(oc_3-l_org)/5,36/0
	snp:	vfd a36/    ,36/i_r,36/r_special_names,36/(snp_1-l_org)/5,36/a_13
	snp_2:	vfd a36/    ,36/i_c,36/c_decptok,36/(l_75-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/024,36/(l_75-l_org)/5,36/0
l_75:	snp_9:	vfd a36/    ,36/i_r,36/r_input_output,36/(ios-l_org)/5,36/0
		vfd a36/    ,36/i_r,36/r_data,36/(l_76-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/100,36/(r77dg-l_org)/5,36/a_60
l_76:	div:	vfd a36/s   ,36/i_c,36/c_areaa,36/(l_77-l_org)/5,36/0
		vfd a36/s   ,36/i_n,36/001,36/(l_77-l_org)/5,36/0
l_77:		vfd a36/s   ,36/i_r,36/r_division,36/(l_78-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/002,36/(l_78-l_org)/5,36/0
l_78:	exit:	vfd a36/    ,36/i_n,36/0,36/(exit-l_org)/5,36/a_61
	snp_1:	vfd a36/s   ,36/i_c,36/c_areaa,36/(l_79-l_org)/5,36/0
		vfd a36/s   ,36/i_n,36/001,36/(l_79-l_org)/5,36/0
l_79:		vfd a36/s   ,36/i_r,36/r_per,36/(l_80-l_org)/5,36/0
		vfd a36/s   ,36/i_n,36/003,36/(l_80-l_org)/5,36/a_173
l_80:		vfd a36/s   ,36/i_r,36/r_currency,36/(curr-l_org)/5,36/a_14
		vfd a36/s   ,36/i_r,36/r_decimal_point,36/(dec-l_org)/5,36/a_14
		vfd a36/s   ,36/i_r,36/r_alphabet,36/(alf-l_org)/5,36/a_14
		vfd a36/s   ,36/i_c,36/c_leftname,36/(snp_4-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/0,36/(snp_9-l_org)/5,36/0
	snp_3:	vfd a36/s   ,36/i_r,36/r_currency,36/(curr-l_org)/5,36/a_14
		vfd a36/s   ,36/i_r,36/r_decimal_point,36/(dec-l_org)/5,36/a_14
		vfd a36/s   ,36/i_r,36/r_alphabet,36/(alf-l_org)/5,36/a_14
		vfd a36/s   ,36/i_c,36/c_leftname,36/(snp_4-l_org)/5,36/0
		vfd a36/s   ,36/i_r,36/r_per,36/(l_81-l_org)/5,36/0
		vfd a36/    ,36/i_c,36/c_decptok,36/(l_81-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/024,36/(l_81-l_org)/5,36/0
l_81:		vfd a36/    ,36/i_c,36/c_clorder,36/(snp_9-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/026,36/(snp_9-l_org)/5,36/0
	snp_5:	vfd a36/    ,36/i_c,36/c_dupdef,36/(snp_3-l_org)/5,36/a_65
		vfd a36/    ,36/i_n,36/080,36/(snp_3-l_org)/5,36/0
	snp_4:	vfd a36/s   ,36/i_r,36/r_is,36/(l_82-l_org)/5,36/0
		vfd a36/    ,36/i_r,36/r_on,36/(sw_1-l_org)/5,36/0
		vfd a36/    ,36/i_r,36/r_off,36/(sw_1-l_org)/5,36/0
l_82:		vfd a36/    ,36/i_c,36/c_alphanmlit,36/(alf_1-l_org)/5,36/a_21
		vfd a36/    ,36/i_c,36/c_integr,36/(alf_1-l_org)/5,36/a_21
		vfd a36/    ,36/i_c,36/c_figcon,36/(alf_1-l_org)/5,36/a_21
		vfd a36/s   ,36/i_c,36/c_rightname,36/(snp_6-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/030,36/(r7dg-l_org)/5,36/a_60
	snp_6:	vfd a36/    ,36/i_r,36/r_on,36/(sw_2-l_org)/5,36/a_22
		vfd a36/    ,36/i_r,36/r_off,36/(sw_2-l_org)/5,36/a_22
		vfd a36/    ,36/i_c,36/c_sncl,36/(l_83-l_org)/5,36/0
l_83:		vfd a36/    ,36/i_c,36/c_is_dev,36/(snp_7-l_org)/5,36/0
		vfd a36/    ,36/i_c,36/c_is_alf,36/(snp_5-l_org)/5,36/a_66
		vfd a36/    ,36/i_c,36/c_is_sw,36/(snp_8-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/035,36/(r7dg-l_org)/5,36/a_60
	snp_7:	vfd a36/    ,36/i_c,36/c_dupdev,36/(l_84-l_org)/5,36/a_97
		vfd a36/    ,36/i_n,36/080,36/(l_84-l_org)/5,36/0
l_84:		vfd a36/    ,36/i_n,36/0,36/(snp_3-l_org)/5,36/a_65
	snp_8:	vfd a36/    ,36/i_c,36/c_dupsw,36/(l_85-l_org)/5,36/a_22
		vfd a36/    ,36/i_n,36/080,36/(l_85-l_org)/5,36/0
l_85:		vfd a36/    ,36/i_n,36/0,36/(snp_3-l_org)/5,36/a_65
	sw_1:	vfd a36/    ,36/i_r,36/r_on,36/(l_86-l_org)/5,36/0
		vfd a36/    ,36/i_r,36/r_off,36/(l_86-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/097,36/(r7dg-l_org)/5,36/a_60
l_86:		vfd a36/s   ,36/i_c,36/c_switch,36/(l_87-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/031,36/(r7dg-l_org)/5,36/a_60
l_87:	sw_3:	vfd a36/s   ,36/i_r,36/r_status,36/(l_88-l_org)/5,36/0
l_88:		vfd a36/s   ,36/i_r,36/r_is,36/(l_89-l_org)/5,36/0
l_89:		vfd a36/s   ,36/i_c,36/c_usrwd,36/(l_90-l_org)/5,36/a_23
		vfd a36/    ,36/i_n,36/032,36/(r7dg-l_org)/5,36/a_60
l_90:		vfd a36/    ,36/i_r,36/r_on,36/(l_91-l_org)/5,36/0
		vfd a36/    ,36/i_r,36/r_off,36/(l_91-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/0,36/(snp_3-l_org)/5,36/0
l_91:		vfd a36/s   ,36/i_c,36/c_switch_2,36/(l_92-l_org)/5,36/0
l_92:		vfd a36/s   ,36/i_r,36/r_status,36/(l_93-l_org)/5,36/0
l_93:		vfd a36/s   ,36/i_r,36/r_is,36/(l_94-l_org)/5,36/0
l_94:		vfd a36/s   ,36/i_c,36/c_usrwd,36/(snp_3-l_org)/5,36/a_23
		vfd a36/    ,36/i_n,36/032,36/(r7dg-l_org)/5,36/a_60
	sw_2:	vfd a36/    ,36/i_r,36/r_on,36/(l_95-l_org)/5,36/0
		vfd a36/    ,36/i_r,36/r_off,36/(l_95-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/097,36/(r7dg-l_org)/5,36/a_60
l_95:		vfd a36/s   ,36/i_c,36/c_switch_1,36/(sw_3-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/033,36/(r7dg-l_org)/5,36/a_60
	curr:	vfd a36/s   ,36/i_r,36/r_sign,36/(l_96-l_org)/5,36/0
l_96:		vfd a36/s   ,36/i_r,36/r_is,36/(l_97-l_org)/5,36/0
l_97:		vfd a36/s   ,36/i_c,36/c_currlit,36/(l_98-l_org)/5,36/a_19
		vfd a36/    ,36/i_n,36/027,36/(r7dg-l_org)/5,36/a_60
l_98:		vfd a36/s5  ,36/i_r,36/r_object,36/(l_99-l_org)/5,36/115
		vfd a36/    ,36/i_n,36/0,36/(snp_5-l_org)/5,36/a_20
l_99:		vfd a36/s   ,36/i_r,36/r_sign,36/(l_100-l_org)/5,36/0
l_100:		vfd a36/s   ,36/i_r,36/r_is,36/(l_101-l_org)/5,36/0
l_101:		vfd a36/s   ,36/i_c,36/c_currlit,36/(snp_5-l_org)/5,36/a_64
		vfd a36/    ,36/i_n,36/027,36/(r7dg-l_org)/5,36/a_60
	dec:	vfd a36/s   ,36/i_r,36/r_is,36/(l_102-l_org)/5,36/0
l_102:		vfd a36/s   ,36/i_r,36/r_comma,36/(dec_1-l_org)/5,36/a_16
		vfd a36/    ,36/i_r,36/r_decimal_point,36/(l_103-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/025,36/(r7dg-l_org)/5,36/a_60
l_103:		vfd a36/s5  ,36/i_n,36/138,36/(l_104-l_org)/5,36/25
l_104:	dec_1:	vfd a36/s5  ,36/i_r,36/r_object,36/(l_105-l_org)/5,36/163
		vfd a36/    ,36/i_n,36/0,36/(snp_5-l_org)/5,36/0
l_105:		vfd a36/s   ,36/i_r,36/r_is,36/(l_106-l_org)/5,36/0
l_106:		vfd a36/s   ,36/i_r,36/r_comma,36/(snp_5-l_org)/5,36/a_17
		vfd a36/s   ,36/i_r,36/r_decimal_point,36/(snp_5-l_org)/5,36/a_52
		vfd a36/    ,36/i_n,36/025,36/(r7dg-l_org)/5,36/a_60
	alf:	vfd a36/s   ,36/i_c,36/c_leftname,36/(l_107-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/034,36/(r7dg-l_org)/5,36/0
l_107:		vfd a36/s   ,36/i_r,36/r_is,36/(l_108-l_org)/5,36/0
l_108:		vfd a36/    ,36/i_c,36/c_alphanmlit,36/(l_109-l_org)/5,36/a_21
		vfd a36/    ,36/i_c,36/c_integr,36/(l_109-l_org)/5,36/a_21
		vfd a36/    ,36/i_c,36/c_figcon,36/(l_109-l_org)/5,36/a_21
		vfd a36/s   ,36/i_c,36/c_rightname,36/(snp_6-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/085,36/(r7dg-l_org)/5,36/a_60
l_109:	alf_1:	vfd a36/s   ,36/i_c,36/c_alphanmlit,36/(l_110-l_org)/5,36/a_44
		vfd a36/s   ,36/i_c,36/c_integr,36/(l_110-l_org)/5,36/a_44
		vfd a36/s   ,36/i_c,36/c_figcon,36/(l_110-l_org)/5,36/a_44
		vfd a36/    ,36/i_n,36/028,36/(r7dg-l_org)/5,36/a_60
l_110:	alf_2:	vfd a36/s   ,36/i_r,36/r_thru,36/(l_111-l_org)/5,36/a_67
		vfd a36/s   ,36/i_r,36/r_also,36/(alf_3-l_org)/5,36/a_67
		vfd a36/    ,36/i_n,36/0,36/(alf_4-l_org)/5,36/a_72
l_111:		vfd a36/s   ,36/i_c,36/c_alphanmlit,36/(l_112-l_org)/5,36/a_68
		vfd a36/s   ,36/i_c,36/c_integr,36/(l_112-l_org)/5,36/a_68
		vfd a36/s   ,36/i_c,36/c_figcon,36/(l_112-l_org)/5,36/a_68
		vfd a36/    ,36/i_n,36/028,36/(r7dg-l_org)/5,36/a_60
l_112:		vfd a36/    ,36/i_n,36/0,36/(alf_4-l_org)/5,36/a_70
	alf_3:	vfd a36/s   ,36/i_c,36/c_alphanmlit,36/(l_113-l_org)/5,36/a_68
		vfd a36/s   ,36/i_c,36/c_integr,36/(l_113-l_org)/5,36/a_68
		vfd a36/s   ,36/i_c,36/c_figcon,36/(l_113-l_org)/5,36/a_68
		vfd a36/    ,36/i_n,36/028,36/(r7dg-l_org)/5,36/a_60
l_113:		vfd a36/s   ,36/i_r,36/r_also,36/(alf_3-l_org)/5,36/a_69
		vfd a36/    ,36/i_n,36/0,36/(alf_4-l_org)/5,36/a_70
	alf_4:	vfd a36/s   ,36/i_c,36/c_alphanmlit,36/(alf_2-l_org)/5,36/a_44
		vfd a36/s   ,36/i_c,36/c_integr,36/(alf_2-l_org)/5,36/a_44
		vfd a36/s   ,36/i_c,36/c_figcon,36/(alf_2-l_org)/5,36/a_44
		vfd a36/s   ,36/i_r,36/r_character,36/(l_114-l_org)/5,36/a_53
		vfd a36/    ,36/i_n,36/0,36/(snp_5-l_org)/5,36/a_53
l_114:		vfd a36/s   ,36/i_r,36/r_size,36/(l_115-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/029,36/(l_115-l_org)/5,36/0
l_115:		vfd a36/    ,36/i_r,36/r_is,36/(l_116-l_org)/5,36/0
l_116:		vfd a36/s   ,36/i_c,36/c_integr,36/(l_117-l_org)/5,36/a_62
		vfd a36/    ,36/i_n,36/023,36/(r7dg-l_org)/5,36/a_60
l_117:		vfd a36/s   ,36/i_r,36/r_bits,36/(snp_5-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/092,36/(snp_5-l_org)/5,36/0
	ios:	vfd a36/s   ,36/i_c,36/c_areaa,36/(l_118-l_org)/5,36/0
		vfd a36/s   ,36/i_n,36/001,36/(l_118-l_org)/5,36/0
l_118:		vfd a36/s   ,36/i_r,36/r_section,36/(l_119-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/012,36/(l_119-l_org)/5,36/0
l_119:		vfd a36/s   ,36/i_r,36/r_per,36/(l_120-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/003,36/(l_120-l_org)/5,36/a_173
l_120:		vfd a36/    ,36/i_r,36/r_file_control,36/(l_121-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/039,36/(r8dg-l_org)/5,36/a_60
l_121:	fil_cl:	vfd a36/s   ,36/i_c,36/c_areaa,36/(l_122-l_org)/5,36/0
		vfd a36/s   ,36/i_n,36/001,36/(l_122-l_org)/5,36/0
l_122:		vfd a36/s   ,36/i_r,36/r_per,36/(sel-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/003,36/(sel-l_org)/5,36/a_173
	sel2:	vfd a36/s5  ,36/i_n,36/94,36/(fn-l_org)/5,36/25
	sel:	vfd a36/s   ,36/i_r,36/r_select,36/(l_123-l_org)/5,36/a_42
		vfd a36/    ,36/i_n,36/0,36/(io_0-l_org)/5,36/0
l_123:	sel1:	vfd a36/s   ,36/i_r,36/r_optional,36/(l_124-l_org)/5,36/a_31
		vfd a36/    ,36/i_r,36/r_external,36/(sel2-l_org)/5,36/a_31
l_124:		vfd a36/    ,36/i_r,36/r_external,36/(sel2-l_org)/5,36/a_31
	fn:	vfd a36/    ,36/i_c,36/c_usrwd,36/(l_125-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/040,36/(r9dg-l_org)/5,36/a_60
l_125:		vfd a36/    ,36/i_c,36/c_sortfile,36/(l_126-l_org)/5,36/a_78
l_126:		vfd a36/s   ,36/i_c,36/c_cknew,36/(l_127-l_org)/5,36/a_24
		vfd a36/s   ,36/i_n,36/041,36/(l_127-l_org)/5,36/0
l_127:	fcl:	vfd a36/s   ,36/i_r,36/r_assign,36/(asign_1-l_org)/5,36/a_98
		vfd a36/s   ,36/i_r,36/r_reserve,36/(res_1-l_org)/5,36/a_98
		vfd a36/s   ,36/i_r,36/r_organization,36/(org_1-l_org)/5,36/a_98
		vfd a36/s   ,36/i_r,36/r_access,36/(acs_1-l_org)/5,36/a_98
		vfd a36/s   ,36/i_r,36/r_file,36/(fcl_3-l_org)/5,36/a_98
		vfd a36/s   ,36/i_r,36/r_status,36/(stat_1-l_org)/5,36/a_98
		vfd a36/    ,36/i_r,36/r_catalog_name,36/(cat_1-l_org)/5,36/a_98
		vfd a36/s   ,36/i_r,36/r_relative,36/(rel_1-l_org)/5,36/a_98
		vfd a36/s   ,36/i_r,36/r_record,36/(rec_1-l_org)/5,36/a_98
		vfd a36/s   ,36/i_r,36/r_alternate,36/(alt_1-l_org)/5,36/a_98
		vfd a36/s   ,36/i_r,36/r_with,36/(fcl_2-l_org)/5,36/0
		vfd a36/    ,36/i_r,36/r_flr,36/(fcl13-l_org)/5,36/a_98
		vfd a36/    ,36/i_r,36/r_vlr,36/(fcl13-l_org)/5,36/a_98
		vfd a36/    ,36/i_r,36/r_spanned,36/(fcl13-l_org)/5,36/a_98
		vfd a36/    ,36/i_r,36/r_ssf,36/(fcl14-l_org)/5,36/a_98
		vfd a36/    ,36/i_r,36/r_bsn,36/(fcl12-l_org)/5,36/a_98
		vfd a36/s   ,36/i_r,36/r_per,36/(l_128-l_org)/5,36/0
l_128:		vfd a36/    ,36/i_c,36/c_asgn,36/(l_129-l_org)/5,36/a_133
		vfd a36/    ,36/i_n,36/42,36/(fcl_9-l_org)/5,36/0
l_129:		vfd a36/    ,36/i_c,36/c_keyreqd,36/(l_130-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/43,36/(l_130-l_org)/5,36/0
l_130:	fcl_10:	vfd a36/    ,36/i_n,36/0,36/(l_131-l_org)/5,36/a_96
		vfd a36/    ,36/i_n,36/044,36/(r9dg-l_org)/5,36/a_60
l_131:		vfd a36/s   ,36/i_r,36/r_select,36/(sel1-l_org)/5,36/a_42
		vfd a36/    ,36/i_r,36/r_data,36/(div-l_org)/5,36/0
	io_0:	vfd a36/    ,36/i_r,36/r_i_o_control,36/(io_1-l_org)/5,36/0
		vfd a36/    ,36/i_r,36/r_data,36/(div-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/044,36/(r9dg-l_org)/5,36/a_60
	fcl_9:	vfd a36/    ,36/i_c,36/c_keyreqd,36/(fcl_10-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/43,36/(fcl_10-l_org)/5,36/0
	fcl_2:	vfd a36/    ,36/i_r,36/r_flr,36/(fcl13-l_org)/5,36/a_98
		vfd a36/    ,36/i_r,36/r_vlr,36/(fcl13-l_org)/5,36/a_98
		vfd a36/    ,36/i_r,36/r_spanned,36/(fcl13-l_org)/5,36/a_98
		vfd a36/    ,36/i_r,36/r_ssf,36/(fcl14-l_org)/5,36/a_98
		vfd a36/    ,36/i_r,36/r_bsn,36/(fcl12-l_org)/5,36/a_98
		vfd a36/    ,36/i_n,36/037,36/(r9dg-l_org)/5,36/a_60
	fcl_3:	vfd a36/s   ,36/i_r,36/r_status,36/(stat_1-l_org)/5,36/0
		vfd a36/s   ,36/i_n,36/036,36/(stat_1-l_org)/5,36/0
	fcl_4:	vfd a36/    ,36/i_r,36/r_flr,36/(fcl13-l_org)/5,36/a_34
		vfd a36/    ,36/i_r,36/r_vlr,36/(fcl13-l_org)/5,36/a_34
		vfd a36/    ,36/i_r,36/r_spanned,36/(fcl13-l_org)/5,36/a_34
		vfd a36/    ,36/i_r,36/r_bsn,36/(fcl12-l_org)/5,36/a_34
		vfd a36/    ,36/i_n,36/0,36/(fcl_6-l_org)/5,36/0
	fcl_5:	vfd a36/    ,36/i_r,36/r_bsn,36/(fcl12-l_org)/5,36/a_34
		vfd a36/    ,36/i_n,36/0,36/(fcl_6-l_org)/5,36/a_34
	fcl_6:	vfd a36/    ,36/i_c,36/c_dupdef,36/(fcl-l_org)/5,36/a_25
		vfd a36/    ,36/i_n,36/080,36/(fcl-l_org)/5,36/0
	fcl_7:	vfd a36/s   ,36/i_c,36/c_dupdef,36/(fcl-l_org)/5,36/a_25
		vfd a36/    ,36/i_n,36/080,36/(fcl-l_org)/5,36/0
	fcl12:	vfd a36/s5  ,36/i_n,36/108,36/(fcl_6-l_org)/5,36/25
	fcl13:	vfd a36/s5  ,36/i_n,36/109,36/(fcl_5-l_org)/5,36/25
	fcl14:	vfd a36/s5  ,36/i_n,36/110,36/(fcl_4-l_org)/5,36/25
	asign_1:	vfd a36/s   ,36/i_r,36/r_to,36/(l_132-l_org)/5,36/0
l_132:		vfd a36/    ,36/i_c,36/c_implnm,36/(l_133-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/045,36/(r9dg-l_org)/5,36/a_60
l_133:		vfd a36/    ,36/i_c,36/c_ckintnm,36/(fcl_7-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/178,36/(fcl_7-l_org)/5,36/0
	res_1:	vfd a36/s   ,36/i_c,36/c_integr,36/(l_134-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/023,36/(r9dg-l_org)/5,36/a_60
l_134:		vfd a36/s   ,36/i_r,36/r_area,36/(fcl_6-l_org)/5,36/0
		vfd a36/s   ,36/i_r,36/r_areas,36/(fcl_6-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/0,36/(fcl_6-l_org)/5,36/0
	org_1:	vfd a36/s   ,36/i_r,36/r_is,36/(l_135-l_org)/5,36/0
l_135:		vfd a36/s   ,36/i_c,36/c_fileorg,36/(fcl_6-l_org)/5,36/0
		vfd a36/    ,36/i_c,36/c_filequal,36/(org_2-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/046,36/(r9dg-l_org)/5,36/a_60
	org_2:	vfd a36/s5  ,36/i_n,36/130,36/(l_136-l_org)/5,36/25
l_136:		vfd a36/s   ,36/i_c,36/c_fileorg,36/(fcl_6-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/046,36/(r9dg-l_org)/5,36/a_60
	acs_1:	vfd a36/s   ,36/i_r,36/r_mode,36/(l_137-l_org)/5,36/0
l_137:		vfd a36/s   ,36/i_r,36/r_is,36/(l_138-l_org)/5,36/0
l_138:		vfd a36/s   ,36/i_r,36/r_sequential,36/(l_139-l_org)/5,36/a_29
		vfd a36/s   ,36/i_r,36/r_random,36/(l_139-l_org)/5,36/a_29
		vfd a36/s   ,36/i_r,36/r_dynamic,36/(l_139-l_org)/5,36/a_29
		vfd a36/    ,36/i_n,36/049,36/(r9dg-l_org)/5,36/a_60
l_139:		vfd a36/s   ,36/i_r,36/r_relative,36/(rel_1-l_org)/5,36/a_30
		vfd a36/s   ,36/i_r,36/r_record,36/(rec_1-l_org)/5,36/a_30
		vfd a36/    ,36/i_n,36/0,36/(fcl_6-l_org)/5,36/0
	rel_1:	vfd a36/s   ,36/i_r,36/r_key,36/(l_140-l_org)/5,36/0
l_140:		vfd a36/s   ,36/i_r,36/r_is,36/(l_141-l_org)/5,36/0
l_141:		vfd a36/    ,36/i_c,36/c_dupdef,36/(l_142-l_org)/5,36/a_175
		vfd a36/    ,36/i_n,36/0,36/(rel_3-l_org)/5,36/a_175
l_142:		vfd a36/s   ,36/i_c,36/c_usrwd,36/(l_143-l_org)/5,36/a_35
		vfd a36/    ,36/i_n,36/048,36/(r9dg-l_org)/5,36/a_60
l_143:	rel_2:	vfd a36/s   ,36/i_r,36/r_of,36/(l_144-l_org)/5,36/a_176
		vfd a36/s   ,36/i_r,36/r_in,36/(l_144-l_org)/5,36/a_176
		vfd a36/    ,36/i_n,36/0,36/(fcl_6-l_org)/5,36/a_177
l_144:		vfd a36/s   ,36/i_c,36/c_usrwd,36/(rel_2-l_org)/5,36/a_95
		vfd a36/    ,36/i_n,36/048,36/(r9dg-l_org)/5,36/a_60
	rel_3:	vfd a36/s   ,36/i_c,36/c_usrwd,36/(l_145-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/048,36/(r9dg-l_org)/5,36/a_60
l_145:	rel_4:	vfd a36/s   ,36/i_r,36/r_of,36/(l_146-l_org)/5,36/a_176
		vfd a36/s   ,36/i_r,36/r_in,36/(l_146-l_org)/5,36/a_176
		vfd a36/    ,36/i_n,36/0,36/(fcl_6-l_org)/5,36/a_177
l_146:		vfd a36/s   ,36/i_c,36/c_usrwd,36/(rel_4-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/048,36/(r9dg-l_org)/5,36/a_60
	rec_1:	vfd a36/s   ,36/i_r,36/r_key,36/(l_147-l_org)/5,36/0
l_147:		vfd a36/s   ,36/i_r,36/r_is,36/(l_148-l_org)/5,36/0
l_148:		vfd a36/    ,36/i_c,36/c_dupdef,36/(l_149-l_org)/5,36/a_175
		vfd a36/    ,36/i_n,36/0,36/(rel_3-l_org)/5,36/a_175
l_149:		vfd a36/s   ,36/i_c,36/c_usrwd,36/(l_150-l_org)/5,36/a_79
		vfd a36/    ,36/i_n,36/048,36/(r9dg-l_org)/5,36/a_60
l_150:	rec_2:	vfd a36/s   ,36/i_r,36/r_of,36/(l_151-l_org)/5,36/a_176
		vfd a36/s   ,36/i_r,36/r_in,36/(l_151-l_org)/5,36/a_176
		vfd a36/    ,36/i_n,36/0,36/(fcl_6-l_org)/5,36/a_177
l_151:		vfd a36/s   ,36/i_c,36/c_usrwd,36/(rec_2-l_org)/5,36/a_95
		vfd a36/    ,36/i_n,36/048,36/(r9dg-l_org)/5,36/a_60
	stat_1:	vfd a36/s   ,36/i_r,36/r_is,36/(l_152-l_org)/5,36/0
l_152:		vfd a36/    ,36/i_c,36/c_dupdef,36/(l_153-l_org)/5,36/a_175
		vfd a36/    ,36/i_n,36/0,36/(stat_3-l_org)/5,36/a_175
l_153:		vfd a36/s   ,36/i_c,36/c_usrwd,36/(l_154-l_org)/5,36/a_80
		vfd a36/    ,36/i_n,36/048,36/(r9dg-l_org)/5,36/a_60
l_154:	stat_2:	vfd a36/s   ,36/i_r,36/r_of,36/(l_155-l_org)/5,36/a_176
		vfd a36/s   ,36/i_r,36/r_in,36/(l_155-l_org)/5,36/a_176
		vfd a36/    ,36/i_n,36/0,36/(stat_5-l_org)/5,36/a_177
l_155:		vfd a36/s   ,36/i_c,36/c_usrwd,36/(stat_2-l_org)/5,36/a_95
		vfd a36/    ,36/i_n,36/048,36/(r9dg-l_org)/5,36/a_60
	stat_3:	vfd a36/s   ,36/i_c,36/c_usrwd,36/(l_156-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/048,36/(r9dg-l_org)/5,36/a_60
l_156:	stat_4:	vfd a36/s   ,36/i_r,36/r_of,36/(l_157-l_org)/5,36/a_176
		vfd a36/s   ,36/i_r,36/r_in,36/(l_157-l_org)/5,36/a_176
		vfd a36/    ,36/i_n,36/0,36/(stat_5-l_org)/5,36/a_177
l_157:		vfd a36/s   ,36/i_c,36/c_usrwd,36/(stat_4-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/048,36/(r9dg-l_org)/5,36/a_60
	stat_5:	vfd a36/    ,36/i_c,36/c_usrwd,36/(l_158-l_org)/5,36/a_125
		vfd a36/    ,36/i_n,36/0,36/(fcl_6-l_org)/5,36/0
l_158:		vfd a36/s5  ,36/i_n,36/96,36/(l_159-l_org)/5,36/25
l_159:	stat_6:	vfd a36/s   ,36/i_r,36/r_of,36/(l_160-l_org)/5,36/0
		vfd a36/s   ,36/i_r,36/r_in,36/(l_160-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/0,36/(fcl_6-l_org)/5,36/0
l_160:		vfd a36/s   ,36/i_c,36/c_usrwd,36/(stat_6-l_org)/5,36/a_95
		vfd a36/    ,36/i_n,36/048,36/(r9dg-l_org)/5,36/a_60
	cat_1:	vfd a36/s5  ,36/i_n,36/158,36/(l_161-l_org)/5,36/25
l_161:		vfd a36/s   ,36/i_r,36/r_is,36/(l_162-l_org)/5,36/0
l_162:		vfd a36/s   ,36/i_c,36/c_catusrwd,36/(cat_2-l_org)/5,36/a_71
		vfd a36/s   ,36/i_c,36/c_catalphalit,36/(cat_3-l_org)/5,36/a_71
		vfd a36/    ,36/i_n,36/050,36/(r9dg-l_org)/5,36/a_60
	cat_2:	vfd a36/s   ,36/i_r,36/r_of,36/(l_163-l_org)/5,36/0
		vfd a36/s   ,36/i_r,36/r_in,36/(l_163-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/0,36/(cat_3-l_org)/5,36/0
l_163:		vfd a36/s   ,36/i_c,36/c_catusrwd,36/(cat_2-l_org)/5,36/a_95
		vfd a36/    ,36/i_n,36/048,36/(r9dg-l_org)/5,36/a_60
	cat_3:	vfd a36/    ,36/i_n,36/0,36/(fcl_6-l_org)/5,36/0
	alt_1:	vfd a36/    ,36/i_c,36/c_dupdef,36/(l_164-l_org)/5,36/0
l_164:	alt_2:	vfd a36/s   ,36/i_r,36/r_record,36/(l_165-l_org)/5,36/a_175
		vfd a36/    ,36/i_n,36/067,36/(l_165-l_org)/5,36/0
l_165:		vfd a36/s   ,36/i_r,36/r_key,36/(l_166-l_org)/5,36/0
l_166:		vfd a36/s   ,36/i_r,36/r_is,36/(l_167-l_org)/5,36/0
l_167:		vfd a36/s   ,36/i_c,36/c_usrwd,36/(l_168-l_org)/5,36/a_32
		vfd a36/    ,36/i_n,36/048,36/(r9dg-l_org)/5,36/a_60
l_168:	alt_3:	vfd a36/s   ,36/i_r,36/r_of,36/(l_169-l_org)/5,36/a_176
		vfd a36/s   ,36/i_r,36/r_in,36/(l_169-l_org)/5,36/a_176
		vfd a36/    ,36/i_n,36/0,36/(alt_4-l_org)/5,36/a_177
l_169:		vfd a36/s   ,36/i_c,36/c_usrwd,36/(alt_3-l_org)/5,36/a_95
		vfd a36/    ,36/i_n,36/048,36/(r9dg-l_org)/5,36/a_60
	alt_4:	vfd a36/s   ,36/i_r,36/r_with,36/(l_170-l_org)/5,36/0
l_170:		vfd a36/s   ,36/i_r,36/r_duplicates,36/(l_171-l_org)/5,36/a_75
l_171:		vfd a36/s   ,36/i_r,36/r_alternate,36/(alt_2-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/0,36/(fcl_6-l_org)/5,36/0
	io_1:	vfd a36/s   ,36/i_c,36/c_areaa,36/(l_172-l_org)/5,36/a_27
		vfd a36/s   ,36/i_n,36/001,36/(l_172-l_org)/5,36/a_27
l_172:		vfd a36/s   ,36/i_r,36/r_per,36/(l_173-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/003,36/(l_173-l_org)/5,36/a_173
l_173:		vfd a36/s   ,36/i_r,36/r_per,36/(l_174-l_org)/5,36/0
l_174:		vfd a36/    ,36/i_r,36/r_apply,36/(app_1-l_org)/5,36/a_28
		vfd a36/s   ,36/i_r,36/r_rerun,36/(run_1-l_org)/5,36/a_28
		vfd a36/s   ,36/i_r,36/r_same,36/(sam_1-l_org)/5,36/a_28
		vfd a36/    ,36/i_r,36/r_multiple,36/(mul_1-l_org)/5,36/a_28
		vfd a36/    ,36/i_r,36/r_data,36/(div-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/061,36/(r10dg-l_org)/5,36/a_60
	io_2:	vfd a36/    ,36/i_r,36/r_apply,36/(app_1-l_org)/5,36/a_28
		vfd a36/s   ,36/i_r,36/r_rerun,36/(run_1-l_org)/5,36/a_28
		vfd a36/s   ,36/i_r,36/r_same,36/(sam_1-l_org)/5,36/a_28
		vfd a36/    ,36/i_r,36/r_multiple,36/(mul_1-l_org)/5,36/a_28
		vfd a36/s   ,36/i_r,36/r_per,36/(io_4-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/003,36/(l_175-l_org)/5,36/a_173
l_175:		vfd a36/    ,36/i_c,36/c_clorder,36/(l_176-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/096,36/(l_176-l_org)/5,36/0
l_176:		vfd a36/    ,36/i_r,36/r_data,36/(div-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/051,36/(r10dg-l_org)/5,36/a_60
	io_3:	vfd a36/    ,36/i_n,36/0,36/(io_2-l_org)/5,36/a_50
	io_4:	vfd a36/    ,36/i_r,36/r_apply,36/(io_5-l_org)/5,36/0
		vfd a36/    ,36/i_r,36/r_rerun,36/(io_5-l_org)/5,36/0
		vfd a36/    ,36/i_r,36/r_same,36/(io_5-l_org)/5,36/0
		vfd a36/    ,36/i_r,36/r_multiple,36/(io_5-l_org)/5,36/0
		vfd a36/    ,36/i_r,36/r_data,36/(div-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/061,36/(r10dg-l_org)/5,36/a_60
	io_5:	vfd a36/    ,36/i_n,36/093,36/(io_2-l_org)/5,36/0
	app_1:	vfd a36/s5  ,36/i_n,36/123,36/(l_177-l_org)/5,36/25
l_177:		vfd a36/s   ,36/i_r,36/r_file,36/(l_178-l_org)/5,36/0
		vfd a36/s   ,36/i_r,36/r_is,36/(app_2-l_org)/5,36/0
		vfd a36/    ,36/i_r,36/r_temporary,36/(app_8-l_org)/5,36/0
		vfd a36/    ,36/i_r,36/r_permanent,36/(app_8-l_org)/5,36/0
		vfd a36/s   ,36/i_r,36/r_no,36/(app_9-l_org)/5,36/a_39
		vfd a36/    ,36/i_r,36/r_detach,36/(app_10-l_org)/5,36/0
		vfd a36/s   ,36/i_r,36/r_attach_options,36/(app_6-l_org)/5,36/0
		vfd a36/s   ,36/i_r,36/r_tape_options,36/(tap_11-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/052,36/(r10dg-l_org)/5,36/a_60
l_178:		vfd a36/s   ,36/i_r,36/r_is,36/(l_179-l_org)/5,36/0
l_179:	app_2:	vfd a36/    ,36/i_r,36/r_temporary,36/(app_8-l_org)/5,36/0
		vfd a36/    ,36/i_r,36/r_permanent,36/(app_8-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/068,36/(r10dg-l_org)/5,36/a_60
	app_8:	vfd a36/s   ,36/i_n,36/0,36/(l_180-l_org)/5,36/a_38
l_180:	app_3:	vfd a36/s   ,36/i_r,36/r_on,36/(l_181-l_org)/5,36/0
l_181:		vfd a36/    ,36/i_c,36/c_chckft,36/(l_182-l_org)/5,36/a_43
		vfd a36/    ,36/i_n,36/053,36/(r10dg-l_org)/5,36/a_60
l_182:		vfd a36/    ,36/i_n,36/0,36/(l_183-l_org)/5,36/a_73
		vfd a36/    ,36/i_n,36/111,36/(r10dg-l_org)/5,36/0
l_183:		vfd a36/s   ,36/i_n,36/0,36/(l_184-l_org)/5,36/a_174
		vfd a36/s2  ,36/i_n,36/214,36/(l_184-l_org)/5,36/17
		vfd a36/s4  ,36/i_n,36/214,36/(l_184-l_org)/5,36/19
		vfd a36/    ,36/i_n,36/111,36/(r10dg-l_org)/5,36/0
		vfd a36/s5  ,36/i_n,36/214,36/(l_184-l_org)/5,36/25
l_184:	app_4:	vfd a36/    ,36/i_c,36/c_chckft,36/(l_185-l_org)/5,36/a_43
		vfd a36/    ,36/i_n,36/0,36/(io_3-l_org)/5,36/0
l_185:		vfd a36/    ,36/i_n,36/0,36/(l_186-l_org)/5,36/a_73
		vfd a36/    ,36/i_n,36/111,36/(r10dg-l_org)/5,36/0
l_186:		vfd a36/s   ,36/i_n,36/0,36/(app_4-l_org)/5,36/a_174
		vfd a36/s2  ,36/i_n,36/214,36/(app_4-l_org)/5,36/17
		vfd a36/s4  ,36/i_n,36/214,36/(app_4-l_org)/5,36/19
		vfd a36/    ,36/i_n,36/111,36/(r10dg-l_org)/5,36/0
		vfd a36/s5  ,36/i_n,36/214,36/(app_4-l_org)/5,36/25
	app_10:	vfd a36/s   ,36/i_n,36/0,36/(app_5-l_org)/5,36/a_39
	app_9:	vfd a36/s   ,36/i_r,36/r_detach,36/(l_187-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/095,36/(l_187-l_org)/5,36/0
l_187:	app_5:	vfd a36/s   ,36/i_r,36/r_at,36/(l_188-l_org)/5,36/0
l_188:		vfd a36/s   ,36/i_r,36/r_close,36/(app_3-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/0,36/(app_3-l_org)/5,36/0
	app_6:	vfd a36/s   ,36/i_r,36/r_are,36/(l_189-l_org)/5,36/0
l_189:		vfd a36/s   ,36/i_c,36/c_usrwd,36/(app_7-l_org)/5,36/a_36
		vfd a36/s   ,36/i_c,36/c_charst1,36/(app_3-l_org)/5,36/a_36
		vfd a36/    ,36/i_n,36/054,36/(r10dg-l_org)/5,36/a_60
	app_7:	vfd a36/s   ,36/i_r,36/r_of,36/(l_190-l_org)/5,36/0
		vfd a36/s   ,36/i_r,36/r_in,36/(l_190-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/0,36/(app_3-l_org)/5,36/0
l_190:		vfd a36/s   ,36/i_c,36/c_usrwd,36/(app_7-l_org)/5,36/a_95
		vfd a36/    ,36/i_n,36/048,36/(r10dg-l_org)/5,36/a_60
	tap_11:	vfd a36/    ,36/i_n,36/0,36/(l_191-l_org)/5,36/a_41
l_191:		vfd a36/s   ,36/i_r,36/r_are,36/(l_192-l_org)/5,36/0
l_192:		vfd a36/    ,36/i_r,36/r_output_mode,36/(tap_12-l_org)/5,36/0
		vfd a36/    ,36/i_r,36/r_device,36/(tap_4-l_org)/5,36/0
		vfd a36/    ,36/i_r,36/r_density,36/(tap_5-l_org)/5,36/0
		vfd a36/    ,36/i_r,36/r_retain,36/(tap_13-l_org)/5,36/0
		vfd a36/    ,36/i_r,36/r_force,36/(tap_13-l_org)/5,36/0
		vfd a36/    ,36/i_r,36/r_protect,36/(tap_13-l_org)/5,36/0
		vfd a36/    ,36/i_r,36/r_additional,36/(tap_6-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/098,36/(r10dg-l_org)/5,36/a_60
	tap_2:	vfd a36/    ,36/i_r,36/r_output_mode,36/(l_193-l_org)/5,36/0
		vfd a36/    ,36/i_r,36/r_device,36/(tap_4-l_org)/5,36/0
		vfd a36/    ,36/i_r,36/r_density,36/(tap_5-l_org)/5,36/0
		vfd a36/    ,36/i_r,36/r_retain,36/(tap_13-l_org)/5,36/0
		vfd a36/    ,36/i_r,36/r_force,36/(tap_13-l_org)/5,36/0
		vfd a36/    ,36/i_r,36/r_protect,36/(tap_13-l_org)/5,36/0
		vfd a36/    ,36/i_r,36/r_additional,36/(tap_6-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/0,36/(app_3-l_org)/5,36/0
l_193:	tap_12:	vfd a36/s   ,36/i_n,36/0,36/(l_194-l_org)/5,36/a_37
l_194:		vfd a36/s   ,36/i_r,36/r_is,36/(l_195-l_org)/5,36/0
l_195:		vfd a36/    ,36/i_r,36/r_generation,36/(tap_14-l_org)/5,36/0
		vfd a36/    ,36/i_r,36/r_modification,36/(tap_14-l_org)/5,36/0
		vfd a36/    ,36/i_r,36/r_replacement,36/(l_196-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/055,36/(r10dg-l_org)/5,36/a_60
l_196:		vfd a36/s   ,36/i_n,36/0,36/(l_197-l_org)/5,36/a_46
l_197:		vfd a36/s   ,36/i_c,36/c_usrwd,36/(tap_3-l_org)/5,36/a_47
		vfd a36/s   ,36/i_c,36/c_alphanmlit,36/(tap_9-l_org)/5,36/a_47
		vfd a36/    ,36/i_n,36/056,36/(r10dg-l_org)/5,36/a_60
	tap_3:	vfd a36/s   ,36/i_r,36/r_of,36/(l_198-l_org)/5,36/0
		vfd a36/s   ,36/i_r,36/r_in,36/(l_198-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/0,36/(tap_9-l_org)/5,36/0
l_198:		vfd a36/s   ,36/i_c,36/c_usrwd,36/(tap_3-l_org)/5,36/a_95
		vfd a36/    ,36/i_n,36/048,36/(r10dg-l_org)/5,36/a_60
	tap_4:	vfd a36/s   ,36/i_n,36/0,36/(l_199-l_org)/5,36/a_37
l_199:		vfd a36/s   ,36/i_r,36/r_is,36/(l_200-l_org)/5,36/0
l_200:		vfd a36/s   ,36/i_c,36/c_integr,36/(tap_9-l_org)/5,36/a_45
		vfd a36/s   ,36/i_c,36/c_usrwd,36/(tap_10-l_org)/5,36/a_45
		vfd a36/    ,36/i_n,36/057,36/(r10dg-l_org)/5,36/a_60
	tap_10:	vfd a36/s   ,36/i_r,36/r_of,36/(l_201-l_org)/5,36/0
		vfd a36/s   ,36/i_r,36/r_in,36/(l_201-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/0,36/(tap_9-l_org)/5,36/0
l_201:		vfd a36/s   ,36/i_c,36/c_usrwd,36/(tap_10-l_org)/5,36/a_95
		vfd a36/    ,36/i_n,36/048,36/(r10dg-l_org)/5,36/a_60
	tap_5:	vfd a36/s   ,36/i_n,36/0,36/(l_202-l_org)/5,36/a_37
l_202:		vfd a36/s   ,36/i_r,36/r_is,36/(l_203-l_org)/5,36/0
l_203:		vfd a36/s   ,36/i_c,36/c_denint,36/(tap_9-l_org)/5,36/a_48
		vfd a36/    ,36/i_n,36/023,36/(r10dg-l_org)/5,36/a_60
	tap_6:	vfd a36/s   ,36/i_n,36/0,36/(l_204-l_org)/5,36/a_37
l_204:		vfd a36/s   ,36/i_r,36/r_catalog_name,36/(l_205-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/058,36/(l_205-l_org)/5,36/0
l_205:		vfd a36/s   ,36/i_r,36/r_is,36/(l_206-l_org)/5,36/0
l_206:		vfd a36/s   ,36/i_c,36/c_alphanmlit,36/(tap_8-l_org)/5,36/a_49
		vfd a36/s   ,36/i_c,36/c_usrwd,36/(l_207-l_org)/5,36/a_49
		vfd a36/    ,36/i_n,36/056,36/(r10dg-l_org)/5,36/a_60
l_207:	tap_7:	vfd a36/s   ,36/i_r,36/r_of,36/(l_208-l_org)/5,36/0
		vfd a36/s   ,36/i_r,36/r_in,36/(l_208-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/0,36/(tap_8-l_org)/5,36/0
l_208:		vfd a36/s   ,36/i_c,36/c_usrwd,36/(tap_7-l_org)/5,36/a_95
		vfd a36/    ,36/i_n,36/048,36/(r10dg-l_org)/5,36/a_60
	tap_8:	vfd a36/s   ,36/i_c,36/c_alphanmlit,36/(tap_7-l_org)/5,36/a_49
		vfd a36/s   ,36/i_c,36/c_usrwd,36/(tap_7-l_org)/5,36/a_49
		vfd a36/    ,36/i_n,36/0,36/(tap_9-l_org)/5,36/0
	tap_14:	vfd a36/s   ,36/i_n,36/0,36/(tap_9-l_org)/5,36/a_46
	tap_13:	vfd a36/s   ,36/i_n,36/0,36/(l_209-l_org)/5,36/a_37
l_209:	tap_9:	vfd a36/    ,36/i_c,36/c_dupopt,36/(tap_2-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/080,36/(tap_2-l_org)/5,36/0
	run_1:	vfd a36/s   ,36/i_r,36/r_on,36/(run_5-l_org)/5,36/0
	run_6:	vfd a36/s   ,36/i_r,36/r_every,36/(l_210-l_org)/5,36/0
l_210:		vfd a36/s   ,36/i_c,36/c_usrwd,36/(io_3-l_org)/5,36/0
		vfd a36/s   ,36/i_c,36/c_integr,36/(run_3-l_org)/5,36/0
		vfd a36/s   ,36/i_r,36/r_end,36/(l_211-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/090,36/(r10dg-l_org)/5,36/a_60
l_211:		vfd a36/s   ,36/i_r,36/r_of,36/(l_212-l_org)/5,36/0
l_212:		vfd a36/s   ,36/i_r,36/r_reel,36/(l_213-l_org)/5,36/0
		vfd a36/s   ,36/i_r,36/r_unit,36/(l_213-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/059,36/(r10dg-l_org)/5,36/a_60
l_213:	run_4:	vfd a36/s   ,36/i_r,36/r_of,36/(l_214-l_org)/5,36/0
l_214:		vfd a36/    ,36/i_c,36/c_chckft,36/(l_215-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/061,36/(r10dg-l_org)/5,36/a_60
l_215:		vfd a36/    ,36/i_n,36/0,36/(l_216-l_org)/5,36/a_73
		vfd a36/    ,36/i_n,36/111,36/(r10dg-l_org)/5,36/0
l_216:		vfd a36/s   ,36/i_n,36/0,36/(io_3-l_org)/5,36/a_174
		vfd a36/s2  ,36/i_n,36/213,36/(io_3-l_org)/5,36/17
		vfd a36/s4  ,36/i_n,36/213,36/(io_3-l_org)/5,36/19
		vfd a36/    ,36/i_n,36/111,36/(r10dg-l_org)/5,36/0
		vfd a36/s5  ,36/i_n,36/213,36/(io_3-l_org)/5,36/25
	run_3:	vfd a36/s   ,36/i_r,36/r_clock_units,36/(io_3-l_org)/5,36/0
		vfd a36/s   ,36/i_r,36/r_records,36/(run_4-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/060,36/(r10dg-l_org)/5,36/a_60
	run_5:	vfd a36/s   ,36/i_c,36/c_implnm1,36/(run_6-l_org)/5,36/0
		vfd a36/    ,36/i_c,36/c_chckft,36/(l_217-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/062,36/(r10dg-l_org)/5,36/a_60
l_217:		vfd a36/    ,36/i_n,36/0,36/(l_218-l_org)/5,36/a_73
		vfd a36/    ,36/i_n,36/111,36/(r10dg-l_org)/5,36/0
l_218:		vfd a36/s   ,36/i_n,36/0,36/(run_6-l_org)/5,36/a_174
		vfd a36/s2  ,36/i_n,36/213,36/(run_6-l_org)/5,36/17
		vfd a36/s4  ,36/i_n,36/213,36/(run_6-l_org)/5,36/19
		vfd a36/    ,36/i_n,36/111,36/(r10dg-l_org)/5,36/0
		vfd a36/s5  ,36/i_n,36/213,36/(run_6-l_org)/5,36/25
	sam_1:	vfd a36/s   ,36/i_r,36/r_record,36/(l_219-l_org)/5,36/a_92
		vfd a36/    ,36/i_r,36/r_sort,36/(sam_ck2-l_org)/5,36/a_92
		vfd a36/    ,36/i_r,36/r_sort_merge,36/(sam_ck3-l_org)/5,36/a_92
		vfd a36/    ,36/i_n,36/0,36/(l_219-l_org)/5,36/a_92
l_219:	sam_3:	vfd a36/s   ,36/i_r,36/r_area,36/(l_220-l_org)/5,36/0
l_220:		vfd a36/s   ,36/i_r,36/r_for,36/(l_221-l_org)/5,36/0
l_221:	sam_2:	vfd a36/    ,36/i_c,36/c_chckft,36/(l_222-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/061,36/(r10dg-l_org)/5,36/a_60
l_222:		vfd a36/    ,36/i_n,36/0,36/(l_223-l_org)/5,36/a_76
		vfd a36/    ,36/i_n,36/111,36/(r10dg-l_org)/5,36/0
l_223:		vfd a36/    ,36/i_n,36/0,36/(sam_ck1-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/0,36/(sam_ck4-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/0,36/(sam_ck4-l_org)/5,36/0
l_224:		vfd a36/    ,36/i_n,36/0,36/(l_225-l_org)/5,36/a_73
		vfd a36/    ,36/i_n,36/111,36/(r10dg-l_org)/5,36/0
l_225:		vfd a36/    ,36/i_n,36/0,36/(sam_ck4-l_org)/5,36/a_178
		vfd a36/    ,36/i_n,36/0,36/(sam_ck4-l_org)/5,36/a_178
		vfd a36/    ,36/i_n,36/0,36/(sam_ck4-l_org)/5,36/a_178
		vfd a36/    ,36/i_n,36/111,36/(r10dg-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/0,36/(sam_ck4-l_org)/5,36/a_178
	sam_ck1:	vfd a36/    ,36/i_c,36/c_sortfile,36/(sam_ck4-l_org)/5,36/a_77
		vfd a36/    ,36/i_n,36/0,36/(l_226-l_org)/5,36/a_73
		vfd a36/    ,36/i_n,36/111,36/(r10dg-l_org)/5,36/0
l_226:		vfd a36/    ,36/i_n,36/0,36/(sam_ck4-l_org)/5,36/a_179
		vfd a36/    ,36/i_n,36/0,36/(sam_ck4-l_org)/5,36/a_179
		vfd a36/    ,36/i_n,36/0,36/(sam_ck4-l_org)/5,36/a_179
		vfd a36/    ,36/i_n,36/111,36/(r10dg-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/0,36/(sam_ck4-l_org)/5,36/a_179
	sam_ck2:	vfd a36/s4  ,36/i_n,36/135,36/(sam_3-l_org)/5,36/6
	sam_ck3:	vfd a36/s4  ,36/i_n,36/167,36/(sam_3-l_org)/5,36/6
	sam_ck4:	vfd a36/s   ,36/i_c,36/c_samefree,36/(l_227-l_org)/5,36/a_51
		vfd a36/    ,36/i_n,36/063,36/(r10dg-l_org)/5,36/a_60
l_227:		vfd a36/    ,36/i_c,36/c_usrwd,36/(sam_2-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/0,36/(io_3-l_org)/5,36/0
	mul_1:	vfd a36/s3  ,36/i_n,36/159,36/(l_228-l_org)/5,36/16
l_228:		vfd a36/s   ,36/i_r,36/r_file,36/(l_229-l_org)/5,36/0
l_229:		vfd a36/s   ,36/i_r,36/r_tape,36/(l_230-l_org)/5,36/0
l_230:		vfd a36/s   ,36/i_r,36/r_contains,36/(l_231-l_org)/5,36/0
l_231:		vfd a36/    ,36/i_c,36/c_chckft,36/(l_232-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/061,36/(r10dg-l_org)/5,36/a_60
l_232:	mul_2:	vfd a36/s   ,36/i_c,36/c_multok,36/(l_233-l_org)/5,36/0
		vfd a36/s   ,36/i_n,36/101,36/(l_233-l_org)/5,36/0
l_233:		vfd a36/s   ,36/i_r,36/r_position,36/(l_234-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/0,36/(mul_3-l_org)/5,36/a_58
l_234:		vfd a36/s   ,36/i_r,36/r_is,36/(l_235-l_org)/5,36/0
l_235:		vfd a36/s   ,36/i_c,36/c_integr,36/(l_236-l_org)/5,36/a_56
		vfd a36/    ,36/i_n,36/023,36/(r10dg-l_org)/5,36/a_60
l_236:	mul_3:	vfd a36/    ,36/i_c,36/c_chckft,36/(mul_2-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/0,36/(io_3-l_org)/5,36/0
	r1:	vfd a36/    ,36/i_c,36/c_areaa,36/(l_237-l_org)/5,36/0
		vfd a36/s   ,36/i_n,36/0,36/(r1-l_org)/5,36/0
l_237:		vfd a36/    ,36/i_r,36/r_program_id,36/(r1a-l_org)/5,36/0
		vfd a36/    ,36/i_r,36/r_environment,36/(r1b2-l_org)/5,36/0
		vfd a36/    ,36/i_r,36/089,36/(id_2-l_org)/5,36/0
		vfd a36/s   ,36/i_n,36/0,36/(r1-l_org)/5,36/0
	r1a:	vfd a36/s   ,36/i_c,36/c_ckpnm,36/(r1-l_org)/5,36/0
		vfd a36/    ,36/i_n,36/058,36/(id_1-l_org)/5,36/0
	r2:	vfd a36/    ,36/i_r,36/r_configuration,36/(r2a-l_org)/5,36/0
	r3:	vfd a36/    ,36/i_r,36/r_source_computer,36/(r3a-l_org)/5,36/0
	r4:	vfd a36/    ,36/i_r,36/r_debugging,36/(r4a-l_org)/5,36/0
	r5:	vfd a36/    ,36/i_r,36/r_object_computer,36/(r5a-l_org)/5,36/0
	r77:	vfd a36/    ,36/i_r,36/r_special_names,36/(r6g-l_org)/5,36/0
	r7:	vfd a36/    ,36/i_c,36/c_switchnm,36/(r7a-l_org)/5,36/0
		vfd a36/    ,36/i_c,36/c_specnam,36/(r7b-l_org)/5,36/0
		vfd a36/    ,36/i_r,36/r_currency,36/(r7c-l_org)/5,36/0
		vfd a36/    ,36/i_r,36/r_decimal_point,36/(r7d-l_org)/5,36/0
		vfd a36/    ,36/i_r,36/r_input_output,36/(r7e-l_org)/5,36/0
	r8:	vfd a36/    ,36/i_r,36/r_file_control,36/(r8a-l_org)/5,36/0
	r9:	vfd a36/    ,36/i_r,36/r_select,36/(r9a-l_org)/5,36/0
		vfd a36/    ,36/i_r,36/r_i_o_control,36/(r9b-l_org)/5,36/0
	r10:	vfd a36/    ,36/i_r,36/r_apply,36/(r10a-l_org)/5,36/0
		vfd a36/    ,36/i_r,36/r_rerun,36/(r10b-l_org)/5,36/0
		vfd a36/    ,36/i_r,36/r_same,36/(r10c-l_org)/5,36/0
		vfd a36/    ,36/i_r,36/r_multiple,36/(r10d-l_org)/5,36/0
		vfd a36/    ,36/i_r,36/r_data,36/(r10e-l_org)/5,36/0
		vfd a36/s   ,36/i_n,36/0,36/(r11-l_org)/5,36/0
	r11:	vfd a36/    ,36/i_c,36/c_recovword,36/(r11-l_org)/5,36/a_59
		vfd a36/s   ,36/i_n,36/0,36/(r11-l_org)/5,36/0
	r1b2:	vfd a36/    ,36/i_n,36/089,36/(ed_4-l_org)/5,36/a_26
	r2a:	vfd a36/    ,36/i_n,36/089,36/(ed_2-l_org)/5,36/0
	r3a:	vfd a36/    ,36/i_n,36/089,36/(ed_3-l_org)/5,36/0
	r4a:	vfd a36/    ,36/i_n,36/089,36/(sc_2-l_org)/5,36/a_12
	r5a:	vfd a36/    ,36/i_n,36/089,36/(obj_1-l_org)/5,36/0
	r6g:	vfd a36/    ,36/i_n,36/089,36/(snp-l_org)/5,36/0
	r7a:	vfd a36/    ,36/i_n,36/089,36/(snp_3-l_org)/5,36/0
	r7b:	vfd a36/    ,36/i_n,36/089,36/(snp_3-l_org)/5,36/0
	r7c:	vfd a36/    ,36/i_n,36/089,36/(snp_3-l_org)/5,36/0
	r7d:	vfd a36/    ,36/i_n,36/089,36/(snp_3-l_org)/5,36/0
	r7e:	vfd a36/    ,36/i_n,36/089,36/(ios-l_org)/5,36/0
	r8a:	vfd a36/    ,36/i_n,36/089,36/(fil_cl-l_org)/5,36/0
	r9a:	vfd a36/    ,36/i_n,36/089,36/(sel-l_org)/5,36/0
	r9b:	vfd a36/    ,36/i_n,36/089,36/(io_1-l_org)/5,36/0
	r10a:	vfd a36/    ,36/i_n,36/089,36/(io_2-l_org)/5,36/0
	r10b:	vfd a36/    ,36/i_n,36/089,36/(io_2-l_org)/5,36/0
	r10c:	vfd a36/    ,36/i_n,36/089,36/(io_2-l_org)/5,36/0
	r10d:	vfd a36/    ,36/i_n,36/089,36/(io_2-l_org)/5,36/0
	r10e:	vfd a36/    ,36/i_n,36/089,36/(div-l_org)/5,36/0
	r1dg:	vfd a36/    ,36/i_n,36/104,36/(r1-l_org)/5,36/0
	r2dg:	vfd a36/    ,36/i_n,36/104,36/(r2-l_org)/5,36/0
	r3dg:	vfd a36/    ,36/i_n,36/104,36/(r3-l_org)/5,36/0
	r4dg:	vfd a36/    ,36/i_n,36/104,36/(r4-l_org)/5,36/0
	r5dg:	vfd a36/    ,36/i_n,36/104,36/(r5-l_org)/5,36/0
	r6dg:	vfd a36/    ,36/i_n,36/104,36/(r77-l_org)/5,36/0
	r7dg:	vfd a36/    ,36/i_n,36/104,36/(r7-l_org)/5,36/0
	r77dg:	vfd a36/    ,36/i_n,36/104,36/(r77-l_org)/5,36/0
	r8dg:	vfd a36/    ,36/i_n,36/104,36/(r8-l_org)/5,36/0
	r9dg:	vfd a36/    ,36/i_n,36/104,36/(r9-l_org)/5,36/0
	r10dg:	vfd a36/    ,36/i_n,36/104,36/(r10-l_org)/5,36/0
l_238:		vfd a36/    ,36/i_r,36/r_author,36/(l_238-l_org)/5,36/0
l_239:		vfd a36/    ,36/i_r,36/r_blank,36/(l_239-l_org)/5,36/0
l_240:		vfd a36/    ,36/i_r,36/r_attach,36/(l_240-l_org)/5,36/0
l_241:		vfd a36/    ,36/i_r,36/r_block,36/(l_241-l_org)/5,36/0
l_242:		vfd a36/    ,36/i_r,36/r_copy,36/(l_242-l_org)/5,36/0
l_243:		vfd a36/    ,36/i_r,36/r_replacing,36/(l_243-l_org)/5,36/0
l_244:		vfd a36/    ,36/i_r,36/r_date_compiled,36/(l_244-l_org)/5,36/0
l_245:		vfd a36/    ,36/i_r,36/r_date_written,36/(l_245-l_org)/5,36/0
l_246:		vfd a36/    ,36/i_r,36/r_indexed,36/(l_246-l_org)/5,36/0
l_247:		vfd a36/    ,36/i_r,36/r_installation,36/(l_247-l_org)/5,36/0
l_248:		vfd a36/    ,36/i_r,36/r_security,36/(l_248-l_org)/5,36/0
l_249:		vfd a36/    ,36/i_r,36/r_native,36/(l_249-l_org)/5,36/0
l_250:		vfd a36/    ,36/i_r,36/r_procedure,36/(l_250-l_org)/5,36/0
l_251:		vfd a36/    ,36/i_r,36/r_limits,36/(l_251-l_org)/5,36/0
l_252:		vfd a36/    ,36/i_r,36/r_by,36/(l_252-l_org)/5,36/0
l_253:		vfd a36/    ,36/i_r,36/r_catalog_names,36/(l_253-l_org)/5,36/0
l_254:		vfd a36/    ,36/i_r,36/r_catalogue_name,36/(l_254-l_org)/5,36/0
l_255:		vfd a36/    ,36/i_r,36/r_catalogue_names,36/(l_255-l_org)/5,36/0
l_256:		vfd a36/    ,36/i_r,36/r_comp_1,36/(l_256-l_org)/5,36/0
l_257:		vfd a36/    ,36/i_r,36/r_comp_2,36/(l_257-l_org)/5,36/0
l_258:		vfd a36/    ,36/i_r,36/r_comp_3,36/(l_258-l_org)/5,36/0
l_259:		vfd a36/    ,36/i_r,36/r_comp_4,36/(l_259-l_org)/5,36/0
l_260:		vfd a36/    ,36/i_r,36/r_comp_5,36/(l_260-l_org)/5,36/0
l_261:		vfd a36/    ,36/i_r,36/r_comp_6,36/(l_261-l_org)/5,36/0
l_262:		vfd a36/    ,36/i_r,36/r_comp_7,36/(l_262-l_org)/5,36/0
l_263:		vfd a36/    ,36/i_r,36/r_comp_8,36/(l_263-l_org)/5,36/0
l_264:		vfd a36/    ,36/i_r,36/r_computational,36/(l_264-l_org)/5,36/0
l_265:		vfd a36/    ,36/i_r,36/r_computational_1,36/(l_265-l_org)/5,36/0
l_266:		vfd a36/    ,36/i_r,36/r_computational_2,36/(l_266-l_org)/5,36/0
l_267:		vfd a36/    ,36/i_r,36/r_computational_3,36/(l_267-l_org)/5,36/0
l_268:		vfd a36/    ,36/i_r,36/r_computational_4,36/(l_268-l_org)/5,36/0
l_269:		vfd a36/    ,36/i_r,36/r_computational_5,36/(l_269-l_org)/5,36/0
l_270:		vfd a36/    ,36/i_r,36/r_computational_6,36/(l_270-l_org)/5,36/0
l_271:		vfd a36/    ,36/i_r,36/r_computational_7,36/(l_271-l_org)/5,36/0
l_272:		vfd a36/    ,36/i_r,36/r_computational_8,36/(l_272-l_org)/5,36/0
l_273:		vfd a36/    ,36/i_r,36/r_stream,36/(l_273-l_org)/5,36/0
l_274:		vfd a36/    ,36/i_r,36/r_replace,36/(l_274-l_org)/5,36/0
l_275:		vfd a36/    ,36/i_r,36/r_through,36/(l_275-l_org)/5,36/0
l_276:		vfd a36/    ,36/i_r,36/r_controls,36/(l_276-l_org)/5,36/0
l_277:		vfd a36/    ,36/i_r,36/r_standard,36/(l_277-l_org)/5,36/0
l_278:		vfd a36/    ,36/i_r,36/r_segment,36/(l_278-l_org)/5,36/0
l_279:		vfd a36/    ,36/i_r,36/r_segment_limit,36/(l_279-l_org)/5,36/0
l_280:		vfd a36/    ,36/i_r,36/r_standard_1,36/(l_280-l_org)/5,36/0
l_281:		vfd a36/    ,36/i_r,36/r_standard_2,36/(l_281-l_org)/5,36/0
l_282:		vfd a36/    ,36/i_r,36/r_all,36/(l_282-l_org)/5,36/0
l_283:		vfd a36/    ,36/i_r,36/r_high_value,36/(l_283-l_org)/5,36/0
l_284:		vfd a36/    ,36/i_r,36/r_high_values,36/(l_284-l_org)/5,36/0
l_285:		vfd a36/    ,36/i_r,36/r_low_value,36/(l_285-l_org)/5,36/0
l_286:		vfd a36/    ,36/i_r,36/r_low_values,36/(l_286-l_org)/5,36/0
l_287:		vfd a36/    ,36/i_r,36/r_quote,36/(l_287-l_org)/5,36/0
l_288:		vfd a36/    ,36/i_r,36/r_quotes,36/(l_288-l_org)/5,36/0
l_289:		vfd a36/    ,36/i_r,36/r_space,36/(l_289-l_org)/5,36/0
l_290:		vfd a36/    ,36/i_r,36/r_spaces,36/(l_290-l_org)/5,36/0
l_291:		vfd a36/    ,36/i_r,36/r_zero,36/(l_291-l_org)/5,36/0
l_292:		vfd a36/    ,36/i_r,36/r_zeroes,36/(l_292-l_org)/5,36/0
l_293:		vfd a36/    ,36/i_r,36/r_zeros,36/(l_293-l_org)/5,36/0
l_294:		vfd a36/    ,36/i_r,36/r_pls,36/(l_294-l_org)/5,36/0
l_295:		vfd a36/    ,36/i_r,36/r_sub,36/(l_295-l_org)/5,36/0
l_296:		vfd a36/    ,36/i_r,36/r_tim,36/(l_296-l_org)/5,36/0
l_297:		vfd a36/    ,36/i_r,36/r_div,36/(l_297-l_org)/5,36/0
l_298:		vfd a36/    ,36/i_r,36/r_exp,36/(l_298-l_org)/5,36/0
l_299:		vfd a36/    ,36/i_r,36/r_ls,36/(l_299-l_org)/5,36/0
l_300:		vfd a36/    ,36/i_r,36/r_gt,36/(l_300-l_org)/5,36/0
l_301:		vfd a36/    ,36/i_r,36/r_eq,36/(l_301-l_org)/5,36/0
l_302:		vfd a36/    ,36/i_r,36/r_lt,36/(l_302-l_org)/5,36/0
l_303:		vfd a36/    ,36/i_r,36/r_rt,36/(l_303-l_org)/5,36/0
	equ c_0,0
	equ c_alfnam,1
	equ c_alphanmlit,51
	equ c_areaa,3
	equ c_asgn,4
	equ c_catalphalit,56
	equ c_catusrwd,54
	equ c_charst1,55
	equ c_chckft,6
	equ c_ckintnm,59
	equ c_cknew,12
	equ c_ckpnm,17
	equ c_cktemp1,20
	equ c_clorder,2
	equ c_comp_test,7
	equ c_comptype,5
	equ c_currlit,23
	equ c_decptok,24
	equ c_denint,58
	equ c_dupdef,57
	equ c_dupdev,8
	equ c_dupopt,21
	equ c_dupsw,9
	equ c_figcon,37
	equ c_fileorg,10
	equ c_filequal,11
	equ c_idparnm,14
	equ c_implnm,29
	equ c_implnm1,30
	equ c_in_dev,15
	equ c_integr,31
	equ c_iocl,28
	equ c_is_alf,19
	equ c_is_dev,18
	equ c_is_sw,22
	equ c_keyok,33
	equ c_keyreqd,34
	equ c_leftname,25
	equ c_multok,35
	equ c_oc_name,26
	equ c_orgopt,38
	equ c_orgqualok,53
	equ c_out_dev,16
	equ c_recovword,52
	equ c_rempar,27
	equ c_rightname,32
	equ c_samefree,43
	equ c_sc_name,46
	equ c_smal50,42
	equ c_sncl,36
	equ c_sortfile,28
	equ c_specnam,45
	equ c_switch,49
	equ c_switch_1,50
	equ c_switch_2,13
	equ c_switchnm,40
	equ c_temp1eq1,47
	equ c_tempint,41
	equ c_usrwd,48
	equ a_1,1
	equ a_10,10
	equ a_100,100
	equ a_1000,1000
	equ a_1001,1001
	equ a_1002,1002
	equ a_1003,1003
	equ a_1004,1004
	equ a_1005,1005
	equ a_1006,1006
	equ a_1007,1007
	equ a_1008,1008
	equ a_1009,1009
	equ a_101,101
	equ a_1010,1010
	equ a_102,102
	equ a_103,103
	equ a_104,104
	equ a_105,105
	equ a_106,106
	equ a_107,107
	equ a_108,108
	equ a_109,109
	equ a_11,11
	equ a_110,110
	equ a_111,111
	equ a_112,112
	equ a_113,113
	equ a_114,114
	equ a_115,115
	equ a_116,116
	equ a_117,117
	equ a_118,118
	equ a_119,119
	equ a_12,12
	equ a_120,120
	equ a_121,121
	equ a_122,122
	equ a_123,123
	equ a_124,124
	equ a_125,125
	equ a_126,126
	equ a_127,127
	equ a_128,128
	equ a_129,129
	equ a_13,13
	equ a_130,130
	equ a_131,131
	equ a_132,132
	equ a_133,133
	equ a_134,134
	equ a_135,135
	equ a_136,136
	equ a_137,137
	equ a_138,138
	equ a_139,139
	equ a_14,14
	equ a_140,140
	equ a_141,141
	equ a_142,142
	equ a_143,143
	equ a_144,144
	equ a_145,145
	equ a_146,146
	equ a_147,147
	equ a_148,148
	equ a_149,149
	equ a_15,15
	equ a_150,150
	equ a_151,151
	equ a_152,152
	equ a_153,153
	equ a_154,154
	equ a_155,155
	equ a_156,156
	equ a_157,157
	equ a_158,158
	equ a_159,159
	equ a_16,16
	equ a_160,160
	equ a_161,161
	equ a_162,162
	equ a_163,163
	equ a_164,164
	equ a_165,165
	equ a_166,166
	equ a_167,167
	equ a_168,168
	equ a_169,169
	equ a_17,17
	equ a_170,170
	equ a_171,171
	equ a_172,172
	equ a_173,173
	equ a_174,174
	equ a_175,175
	equ a_176,176
	equ a_177,177
	equ a_178,178
	equ a_179,179
	equ a_18,18
	equ a_19,19
	equ a_2,2
	equ a_20,20
	equ a_200,200
	equ a_201,201
	equ a_202,202
	equ a_203,203
	equ a_204,204
	equ a_205,205
	equ a_206,206
	equ a_207,207
	equ a_208,208
	equ a_209,209
	equ a_21,21
	equ a_210,210
	equ a_211,211
	equ a_212,212
	equ a_213,213
	equ a_214,214
	equ a_215,215
	equ a_216,216
	equ a_217,217
	equ a_218,218
	equ a_219,219
	equ a_22,22
	equ a_220,220
	equ a_221,221
	equ a_222,222
	equ a_223,223
	equ a_224,224
	equ a_225,225
	equ a_226,226
	equ a_227,227
	equ a_228,228
	equ a_229,229
	equ a_23,23
	equ a_24,24
	equ a_25,25
	equ a_26,26
	equ a_27,27
	equ a_28,28
	equ a_29,29
	equ a_3,3
	equ a_30,30
	equ a_31,31
	equ a_32,32
	equ a_33,33
	equ a_34,34
	equ a_35,35
	equ a_36,36
	equ a_37,37
	equ a_38,38
	equ a_39,39
	equ a_4,4
	equ a_40,40
	equ a_41,41
	equ a_42,42
	equ a_43,43
	equ a_44,44
	equ a_45,45
	equ a_46,46
	equ a_47,47
	equ a_48,48
	equ a_49,49
	equ a_5,5
	equ a_50,50
	equ a_51,51
	equ a_52,52
	equ a_53,53
	equ a_54,54
	equ a_55,55
	equ a_56,56
	equ a_57,57
	equ a_58,58
	equ a_59,59
	equ a_6,6
	equ a_60,60
	equ a_61,61
	equ a_62,62
	equ a_63,63
	equ a_64,64
	equ a_65,65
	equ a_66,66
	equ a_67,67
	equ a_68,68
	equ a_69,69
	equ a_7,7
	equ a_70,70
	equ a_71,71
	equ a_72,72
	equ a_73,73
	equ a_74,74
	equ a_75,75
	equ a_76,76
	equ a_77,77
	equ a_78,78
	equ a_79,79
	equ a_8,8
	equ a_80,80
	equ a_81,81
	equ a_82,82
	equ a_83,83
	equ a_84,84
	equ a_85,85
	equ a_86,86
	equ a_87,87
	equ a_88,88
	equ a_89,89
	equ a_9,9
	equ a_90,90
	equ a_91,91
	equ a_92,92
	equ a_93,93
	equ a_94,94
	equ a_95,95
	equ a_96,96
	equ a_97,97
	equ a_98,98
	equ a_99,99
	equ r_eq,102
	equ r_lt,187
	equ r_rt,188
	equ r_tim,184
	equ r_exp,186
	equ r_pls,182
	equ r_sub,183
	equ r_per,189
	equ r_div,185
	equ r_ls,123
	equ r_gt,113
	equ r_accept,1
	equ r_access,501
	equ r_additional,419
	equ r_aggregate,104
	equ r_all,73
	equ r_alphabet,504
	equ r_also,96
	equ r_alternate,507
	equ r_apply,508
	equ r_are,118
	equ r_area,202
	equ r_areas,202
	equ r_assign,509
	equ r_at,79
	equ r_attach,403
	equ r_attach_options,412
	equ r_author,510
	equ r_bits,194
	equ r_blank,204
	equ r_block,205
	equ r_bsn,413
	equ r_by,82
	equ r_catalog_name,331
	equ r_catalog_names,331
	equ r_catalogue_name,331
	equ r_catalogue_names,331
	equ r_character,83
	equ r_characters,83
	equ r_clock_units,513
	equ r_close,8
	equ r_collating,515
	equ r_comma,517
	equ r_comp,106
	equ r_comp_1,212
	equ r_comp_2,213
	equ r_comp_3,211
	equ r_comp_4,209
	equ r_comp_5,210
	equ r_comp_6,292
	equ r_comp_7,290
	equ r_comp_8,610
	equ r_computational,106
	equ r_computational_1,212
	equ r_computational_2,213
	equ r_computational_3,211
	equ r_computational_4,209
	equ r_computational_5,210
	equ r_computational_6,292
	equ r_computational_7,290
	equ r_computational_8,610
	equ r_configuration,518
	equ r_contains,215
	equ r_control,520
	equ r_controls,521
	equ r_copy,522
	equ r_currency,525
	equ r_data,196
	equ r_date_compiled,527
	equ r_date_written,528
	equ r_debugging,88
	equ r_decimal_point,538
	equ r_default,295
	equ r_density,414
	equ r_descriptors,197
	equ r_detach,405
	equ r_device,406
	equ r_display,42
	equ r_division,94
	equ r_duplicates,227
	equ r_dynamic,169
	equ r_end,98
	equ r_environment,540
	equ r_every,542
	equ r_external,307
	equ r_file,108
	equ r_file_control,543
	equ r_flr,272
	equ r_for,110
	equ r_force,417
	equ r_generate,45
	equ r_generation,420
	equ r_high_value,221
	equ r_high_values,221
	equ r_i_o_control,551
	equ r_identification,552
	equ r_in,101
	equ r_indexed,223
	equ r_input_output,119
	equ r_installation,554
	equ r_is,118
	equ r_key,120
	equ r_leading,122
	equ r_limit,561
	equ r_limits,562
	equ r_low_value,229
	equ r_low_values,229
	equ r_memory,568
	equ r_message,126
	equ r_mode,230
	equ r_modification,421
	equ r_modules,569
	equ r_multiple,570
	equ r_native,288
	equ r_no,129
	equ r_numeric,131
	equ r_object,291
	equ r_object_computer,572
	equ r_of,133
	equ r_off,574
	equ r_omitted,203
	equ r_on,134
	equ r_optional,576
	equ r_organization,181
	equ r_output_mode,408
	equ r_permanent,410
	equ r_position,582
	equ r_procedure,142
	equ r_program,146
	equ r_program_id,583
	equ r_protect,418
	equ r_queue,234
	equ r_quote,235
	equ r_quotes,235
	equ r_random,147
	equ r_record,148
	equ r_records,195
	equ r_reel,149
	equ r_relative,167
	equ r_replace,425
	equ r_replacement,432
	equ r_replacing,152
	equ r_rerun,588
	equ r_reserve,589
	equ r_retain,415
	equ r_same,593
	equ r_scalar,136
	equ r_section,158
	equ r_security,594
	equ r_segment,159
	equ r_segment_limit,595
	equ r_select,596
	equ r_separate,244
	equ r_sequence,587
	equ r_sequential,597
	equ r_sign,245
	equ r_size,161
	equ r_sort,49
	equ r_sort_merge,598
	equ r_source_computer,599
	equ r_space,192
	equ r_spaces,192
	equ r_spanned,601
	equ r_special_names,600
	equ r_ssf,85
	equ r_standard,162
	equ r_standard_1,505
	equ r_standard_2,208
	equ r_status,247
	equ r_stream,407
	equ r_substitution,435
	equ r_symbolic,251
	equ r_tape,606
	equ r_tape_options,411
	equ r_temporary,409
	equ r_through,166
	equ r_thru,166
	equ r_to,170
	equ r_trailing,255
	equ r_unit,172
	equ r_vlr,201
	equ r_with,179
	equ r_words,609
	equ r_zero,180
	equ r_zeroes,180
	equ r_zeros,180
	end
~~~




		    cobol_idedsyn.pl1               05/24/89  1045.1rew 05/24/89  0835.2      919638



/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_idedsyn.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 09/08/81 by FCH, [5.0-1], fix flagging for Validation-81, BUG501(SQ431,SG441) */
/* Modified on 07/16/81 by FCH, [4.4-3], DEFAULT FOR COMP IS DISPLAY does not work, phx10066(BUG494) */
/* Modified on 04/09/81 by FCH, [4.4-2], fix bugs in leveling for validation-81, BUG477 */
/* Modified on 10/22/80 by FCH, COBOL_SYNTAX_TRACE_ changed to cobol_syntax_trace_ */
/* Modified on 09/30/80 by FCH, [4.4-1], density is 6250 is supported, BUG447(TR7681) */
/* Modified on 07/17/80 by FCH, [4.3-1], ignore APPLY TEMP for external files */
/* Modified on 04/17/80 by FCH, [4.2-2], L-216 added (DYNAMIC phrase), level-6 consistancy */
/* Modified on 12/12/79 by MHD, [4.2-1], added action(78) and check(28) - leveling for SORT files */
/* Modified on 10/11/79 by MHD, [4.1-1], RERUN clause */
/* Modified on 09/10/79 by FCH, [4.0-9], set attach_options_info */
/* Modified on 08/28/79 by FCH, [4.0-8], fix lev diags for same area */
/* Modified on 08/24/79 by FCH, [4.0-7], fix ALSO HIGH-VALUE NC219 */
/* Modified on 06/18/79 by MHD, [4.0-6], appended to debug statement */
/* Modified on 05/17/79 by FCH, [4.0-6], debug statement */
/* Modified on 03/23/79 by FCH, [4.0-5], fix select statement flagging */
/* Modified on 03/21/79 by FCH, [4.0-4], fix file_table.detach setting */
/* Modified on 03/21/79 by FCH, [4.0-3], preattached implies no detach on close */
/* Modified on 03/13/79 by FCH, [4.0-2], set debug bit */
/* Modified on 03/13/79 by FCH, [4.0-1], preattached implies external and non-optional */
/* Modified on 01/09/79 by FCH, [3.0-7] , alt key chain */
/* Modified on 12/11/78 by RAL [3.0-6]. made seq default organization */
/* Modified on 12/05/78 by RAL, [3.0-5], added dupl_alt to indicate that file has duplicate keys */
/* Modified on 11/13/78 by RAL, [3.0-4],  added counting of alternate_keys in file_table */
/* Modified on 06/07/78 by RAL, [3.0-3], action(173) leveling diag 169 */
/* Modified on 03/30/78 by FCH, [3.0-2], set file_key.next_alt + other additions for alt record MR7.0 */
/* Mofified on 03/30/78 by FCH, [3.0-1], new action(75), duplicates clause, alt rec key */
/* Modified since Version 3.0 */








/* format: style3 */
cobol_idedsyn:
     proc;



	call cobol_ided (p1, n_reducs);

	fixed_common.cpl_files = "0"b;
	diag_num = 0;
	current_line = 3;				/* 2*5+5 */

	coll_seq = collate ();

/* initialize automatic data */

	zero = "000000000000000000";

	call alloc;

	error = " ";
	fixed_common.seg_limit = 1;
	kill_diag = 0;
	mod_num = 0;				/*[5.0-1]*/
	seg_limit = 0;
	nat_alf_size = 127;
	addr (indicators) -> bit36 = "0"b;
	samect = 0;
	samerecct = 0;
	mult_fil_no = 0;
	rerunclock = "0"b;
	remarksbit = "0"b;
	debugbit = "0"b;
	optional_file = "0"b;
	external_file = "0"b;
	previous_valid_fkeys = "0"b;
	implnm_bit = "0"b;
	ed_found = "0"b;
	console_name = "0"b;
	dec_is_com = fixed_common.dec_comma;
	fixed_common.dec_comma = "0"b;
	fixed_common.comp_defaults.comp_5 = "1"b;
	dpass_sw = "0"b;
	qual_sw = "0"b;				/* init value */
						/* initialize contradiction matrix for select clause */
	array (1) = "00011011111010110010"b;
	array (2) = "00011011111001010010"b;
	array (3) = "00000100000000001101"b;
	array (4) = "00000011110111110101"b;
	array (5) = "00000011110111111001"b;
	array (6) = "00000000000000000000"b;
	array (7) = "00000000000001010000"b;
	array (8) = "00000000000010100000"b;
	array (9) = "00000000000111110000"b;
	array (10) = "00000000000111100000"b;
	array (11) = "00000000000001100000"b;
	array (12) = "00000000000000000000"b;
	array (13) = "00000000000001100000"b;
	array (14) = "00000000000000110000"b;
	array (15) = "00000000000000010000"b;
	array (16) = "00000000000000000000"b;
	array (17) = "00000000000000000000"b;
	array (18) = "00000000000000000000"b;
	array (19) = "00010011110111111100"b;
	array (20) = "00000000000000000000"b;
	array (21) = "001111111111111111110"b;

/* initialize word_array table */

	word_array.word_size (1) = 6;
	word_array.word (1) = "assign";
	word_array.word_size (2) = 6;
	word_array.word (2) = "assign";
	word_array.word_size (3) = 12;
	word_array.word (3) = "organization";
	word_array.word_size (4) = 12;
	word_array.word (4) = "organization";
	word_array.word_size (5) = 12;
	word_array.word (5) = "organization";
	word_array.word_size (6) = 6;
	word_array.word (6) = "access";
	word_array.word_size (7) = 6;
	word_array.word (7) = "device";
	word_array.word_size (8) = 6;
	word_array.word (8) = "device";
	word_array.word_size (9) = 6;
	word_array.word (9) = "device";
	word_array.word_size (10) = 6;
	word_array.word (10) = "device";
	word_array.word_size (11) = 6;
	word_array.word (11) = "prefix";
	word_array.word_size (12) = 6;
	word_array.word (12) = "prefix";
	word_array.word_size (13) = 6;
	word_array.word (13) = "prefix";
	word_array.word_size (14) = 5;
	word_array.word (14) = "sysin";
	word_array.word_size (15) = 6;
	word_array.word (15) = "sysout";
	word_array.word_size (16) = 8;
	word_array.word (16) = "optional";
	word_array.word_size (17) = 12;
	word_array.word (17) = "relative key";
	word_array.word_size (18) = 10;
	word_array.word (18) = "record key";
	word_array.word_size (19) = 12;
	word_array.word (19) = "organization";
	word_array.word_size (20) = 9;
	word_array.word (20) = "keyed key";
	word_array.word_size (21) = 6;
	word_array.word (21) = "assign";

/*[4.0-6]*/
	if fixed_common.debug			/*[4.0-6]*/
	then do;
		right.line = 0;			/* sets up entry in table for mnemonic name "SWITCH-8" */
						/*[4.0-6]*/
		right.column = 15;			/*[4.0-6]*/
		right.name = "switch-8";		/*[4.0-6]*/
		addr (mnemonic_name.class) -> bit8 = "0"b;
						/*[4.0-6]*/
		mnemonic_name.class.switch_name = "1"b; /*[4.0-6]*/
		left.number = 8;			/*[4.0-6]*/
		call nm (addr (right), left.number);	/* switch8 to name table */

/* sets up entry in table for condition name "DEBUG-ON" */

/*[4.0-6]*/
		substr (switch_bits, left.num, 1) = "1"b;
						/*[4.0-6]*/
		addr (mnemonic_name.class) -> bit8 = "0"b;
						/*[4.0-6]*/
		mnemonic_name.class.switch_condition = "1"b;
						/*[4.0-6]*/
		mnemonic_name.on_status = "1"b;	/*[4.0-6]*/
		mnemonic_name.column = 30;		/* means nothing */
						/*[4.0-6]*/
		mnemonic_name.def_line = 0;		/* line is not actually in program */
						/*[4.0-6]*/
		mnemonic_name.name = "debug-on";	/*[4.0-6]*/
		mnemonic_name.name_size = length (mnemonic_name.name);
		mnemonic_name.size = mnemonic_name.name_size + type17_size;
						/*[4.0-6]*/
		mnemonic_name.iw_key = left.number;	/* see cobol_imp_word */
						/*[4.0-6]*/
		call buildnm;			/* puts the name in the table */
						/*[4.0-6]*/
	     end;

/* initialize diag_item structure */

	diag1_ptr = addr (diag_item);
	diag_item.type = 5;
	diag_item.run = 2;
	diag_item.replace = "0"b;
	diag_item.filler = "000000"b;

	diag2_ptr = addr (lev_diag_item);
	lev_diag_item.type = 5;
	lev_diag_item.size = 28;
	lev_diag_item.run = 9;

	defaults = "0"b;
	clause_num = 0;
	last_clause = 0;
	pcs.type = 0;
	char1_ptr = addr (char1);
	trace_ptr = addr (interp);
	tbit = fixed_common.syntax_trace;
	if tbit
	then call cobol_syntax_trace_$initialize_phase (trace_ptr, 1);
	call scan;				/* read first minpral item */

	go to loop;

alloc:
     proc;

	ft_ptr = addr (ft_build_area (1));
	file_table_size = size (file_table) * 4;

	name_ptr = addr (ft_build_area (1));
	mnemonic_name.name_size = 0;
	type17_size = size (mnemonic_name) * 4;

	fkey_ptr = addr (ft_build_area (1));
	file_key.name_size = 0;
	file_key_size = size (file_key) * 4;

	qual_ptr = addr (ft_build_area (1));
	qual_rec.size = 0;
	key_qual_size = size (qual_rec) * 4;

	alpha_ptr = addr (ft_build_area (1));
	alphabet_name.name_size = 0;
	alphabet_name_size = size (alphabet_name) * 4;

     end;




/*					*/
/*	syntax interpreter			*/
/*					*/

fail:
	if tbit
	then call cobol_syntax_trace_$trace (trace_ptr, tm2);
	current_line = current_line + 1;

loop:
	syntax_line_ptr = addr (syntax_table (current_line));
	go to test (syntax_line.t_type);

test (0):
	if reserved_word.type ^= 1
	then go to fail;
	if reserved_word.key ^= syntax_line.t_field
	then go to fail;

success:
	if tbit
	then call cobol_syntax_trace_$trace (trace_ptr, tm1);

ucon:
	if syntax_line.o_bit ^= " "
	then do;
		if syntax_line.o_bit > fixed_common.comp_level
		then call lev_diag (syntax_line.a_num, record.header.line, record.header.column);
		go to ret;
	     end;

	go to action (syntax_line.a_num);

test (1):
	go to check (syntax_line.t_field);		/* check routine test */

test (2):
	diag_num = syntax_line.t_field;		/* unconditional branch */
	act_num = syntax_line.a_num;

	if syntax_line.o_bit ^= " "
	then do;
		if syntax_line.o_bit > fixed_common.comp_level
		then do;
			mod_num = syntax_line.a_num;
			call lev_diag (diag_num, record.header.line, record.header.column);
		     end;

		diag_num = 0;
		act_num = 0;
	     end;

	if tbit
	then call cobol_syntax_trace_$trace (trace_ptr, tm1);

	go to action (act_num);

check (0):
	wnum = cobol_imp_word$imp_word (p2);

	if wnum = 0 | wnum ^= syntax_line.a_num
	then go to fail;

	if tbit
	then call cobol_syntax_trace_$trace (trace_ptr, tm1);

	go to ret;

ret:
action (0):
	if kill_diag ^= 0
	then kill_diag, diag_num = 0;
	else if diag_num ^= 0
	then call diag;

	if syntax_line.s_bit = "s"
	then call scan;

	current_line = syntax_line.s_exit;

	go to loop;

declare	tm1		fixed bin init (1),
	tm2		fixed bin init (2),
	tm3		fixed bin init (3),
	tm4		fixed bin init (4),
	tm5		fixed bin init (5);

declare	cobol_syntax_trace_$trace
			entry (ptr, fixed bin);
declare	cobol_syntax_trace_$initialize_phase
			entry (ptr, fixed bin);

declare	(syntax_line_ptr, trace_ptr)
			ptr;

declare	tbit		bit (1);
declare	(diag_num, kill_diag)
			fixed bin;

declare	1 interp,
	  2 current_line	fixed bin,
	  2 phase		fixed bin,
	  2 p2		ptr,
	  2 p1		ptr,
	  2 directory_ptr	ptr,
	  2 source_ptr	ptr;

declare	1 syntax_table	(0:10000) based (p1),
	  2 b1		fixed bin,
	  2 b2		fixed bin,
	  2 b3		fixed bin,
	  2 b4		fixed bin,
	  2 b5		fixed bin;


declare	1 syntax_line	based (syntax_line_ptr),
	  2 s_bit		char (1),
	  2 o_bit		char (1),
	  2 t_type	fixed bin,
	  2 t_field	fixed bin,
	  2 s_exit	fixed bin,
	  2 a_num		fixed bin;

diag:
     proc;

	if remarksbit = "1"b
	then return;

	diag_item.line = record.header.line;
	diag_item.column = record.header.column;
	diag_item.size = 25;
	diag_item.number = diag_num;
	diag_item.param_at_end = "0"b;

	call cobol_c_list (diag1_ptr);		/* issue diagnostic */

	diag_num = 0;
     end;

lev_diag:
     proc (diag_num, lin, col);

/*[4.4-2]*/
declare	(diag_num, lin, col)
			fixed bin;

/*[4.4-2]*/
	lev_diag_item.line = lin;			/*[4.4-2]*/
	lev_diag_item.column = col;
	lev_diag_item.number = diag_num;
	lev_diag_item.module = mod_num;

	call cobol_c_list (diag2_ptr);

	mod_num = 0;

     end;

scan:
     proc;

	do while ("1"b);

	     call cobol_swf_get (cobol_min1_fileno, min1_status, p2, mrcsz);

	     rw_ptr = p2;				/* set reserved word token structure. */
	     nlit_ptr = p2;				/* set numeric literal token structure. */
	     alit_ptr = p2;				/* set alphanumeric literal token structure */

	     if substr (min1_status, 17, 16) ^= "0000000000000000"b
	     then go to action (61);

	     if record.header.type ^= 6
	     then do;
		     if record.header.type ^= 5
		     then do;
			     dpass_sw = "0"b;
			     return;
			end;

		     if dpass_sw = "1"b
		     then dpass_sw = "0"b;
		     else do;
			     if remarksbit = "0"b
			     then call cobol_c_list (p2);

			     if message.body.info.replaces_token ^= "0"b
			     then do;
				     if ed_found = "0"b
				     then current_line = 1;
						/* 0*1+1 */
				     else current_line = 2;
						/* 1*5+5 */

				     go to loop;
				end;
			end;
		end;

	end;

     end;



/* CHECK ROUTINES */

alfnam:
check (1):					/* name of program collating sequence alphabet */
	call system_name (addr (left));

	if left.type = 0
	then go to fail;

	go to success;


system_name:
     proc (p);

declare	p		ptr,
	key		fixed bin;

declare	1 sys_name	based (p),
	  2 type		fixed bin,		/* 0 undefined */
						/* 1 user name */
						/* 2 switch name */
						/* 3 device name */
						/* 4 impl alpha name */
						/* 5 standard alpha name */
						/* 6 printer ctl word */
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 number	fixed bin,
	  2 num		fixed bin,
	  2 name		char (32) varying;

	sys_name.type = 0;
	sys_name.number = 0;
	sys_name.name = "";

	if reserved_word.type = 1
	then do;
		key = reserved_word.key;

		if key = 288
		then num = 1;			/* is_word("native") */
		else if key = 505
		then num = 2;			/* is_word("standard-1") */
		else if key = 208
		then num = 3;			/* is_word("standard-2") */
		else return;

		sys_name.type = 5;
		sys_name.number = num;
		sys_name.line = reserved_word.line;
		sys_name.column = reserved_word.column;
		return;
	     end;

	else if user_word.type ^= 8
	then return;
	sys_name.number = cobol_imp_word$imp_word (p2);
	sys_name.num = cobol_imp_word$switch_name (p2);

	if sys_name.num ^= 0
	then sys_name.type = 2;
	else do;
		sys_name.num = cobol_imp_word$device_name (p2);

		if sys_name.num ^= 0
		then sys_name.type = 3;
		else do;
			sys_name.num = cobol_imp_word$alphabet_name (p2);

			if sys_name.num ^= 0
			then sys_name.type = 4;
			else do;
				sys_name.num = cobol_imp_word$printer_control (p2);

				if sys_name.num ^= 0
				then sys_name.type = 6;
				else sys_name.type = 1;
			     end;

		     end;

	     end;


	sys_name.name = user_word.word;
	sys_name.line = user_word.line;
	sys_name.column = user_word.column;

     end;


clorder:
check (2):					/* check for improper clause ordering */
	if clause_order = 0
	then go to success;

	go to fail;



check (3):
	;
areaa:
	if record.column < 12
	then go to success;

	if fixed_common.comp_level < "3"
	then call lev_diag (133, record.header.line, record.header.column);

	go to fail;



check (4):
	;
asgn:						/* assumes ft_ptr set to correct file */
	if file_table.ifn ^= " "
	then go to success;

	go to fail;

check (5):
comptype:
	comp_type = cobol_imp_word$comp_type (p2);

	if comp_type ^= 0
	then go to success;

	comp_type = cobol_imp_word$disp_type (p2);

	if comp_type = 0
	then go to fail;

	comp_type = comp_type + 10;

	go to success;

/* is the current word the name of a file selected in the file-control paragraph? */

check (6):
	;
chckft:
	call check_ft;

	if res = 0
	then go to success;

	go to fail;

check_ft:
     proc;

/*[4.1-1]*/
/*  Changed to return res = 1 if an error  occurs.  IO_ERROR used to be  seperated */
/* from this procedure and set  error to "E" but error was never referenced.  Also  */
/* reorganized it a little to help readability */


	res = 0;

	if record.header.type = 8
	then if fixed_common.file_count ^= 0		/* fail then if no files selected */
	     then do;

		     com_io_key = filedescr_offsets (1);/*	get 1st file_table */

		     do while ("1"b);

			call cobol_vdwf_dget (cobol_com_fileno, com_status, file_ptr, common_recsize, com_io_key);

			if substr (com_status, 17, 16) ^= "0000000000000000"b
			then go to io_error;

			if user_word.word
			     = substr (file_ptr -> file_table.name, 1, file_ptr -> file_table.name_size)
			then return;

			if file_ptr -> file_table.next = "00000"
			then goto io_error;

			com_io_key = file_ptr -> file_table.next;

		     end;				/* do while */

		end;				/* then */

io_error:
	file_ptr = null ();
	res = 1;
	return;

     end check_ft;




comp_test:
check (7):					/* determine if computer not multics */
	if comp_num = 1 | comp_num = 7
	then go to success;

	go to fail;



dupdev:
check (8):					/* test for duplicate device name */
	if right.type = 3 & substr (dev_bits, right.num, 1)
	then go to fail;

	substr (dev_bits, right.num, 1) = "1"b;

	go to success;


dupsw:
check (9):					/* test for duplicate switch name */
	if substr (switch_bits, left.num, 1)
	then go to fail;

	substr (switch_bits, left.num, 1) = "1"b;

	go to success;

fileorg:
check (10):					/* check for legal file organization */
	file_org = 1;

	if reserved_word.type ^= 1
	then go to fail;

	key = reserved_word.key;

	if key = 597
	then file_org = 1;				/* is_word("sequential") */
	else if key = 223
	then file_org = 2;				/* is_word("indexed") */
	else if key = 167
	then file_org = 3;				/* is_word("relative") */
	else if key = 407
	then file_org = 4;				/* is_word("stream") */
	else if key = 423
	then file_org = 5;				/* is_word("ids-ii") */
	else if key = 416
	then file_org = 6;				/* is_word("keyed") */
	else go to fail;

	if file_org > 3 & fixed_common.comp_level ^= "5"
	then call lev_diag (157, record.header.line, record.header.column);

	go to success;



filequal:
check (11):					/* test for legal file qualifier before file organization */
	file_qual = cobol_imp_word$computer_name (p2);

	if file_qual ^= 0
	then go to success;

	fq = cobol_imp_word$file_org (p2);

	if fq <= 3
	then go to fail;

	file_qual = fq + 6;

	go to success;

/* is the current word different from previously selected file names? */

check (12):
	;
cknew:
	if fixed_common.file_count = 0
	then go to success;
	com_io_key = filedescr_offsets (1);		/* get 1st file_table */
	call cobol_vdwf_dget (cobol_com_fileno, com_status, file_ptr, common_recsize, com_io_key);

check12a:
	if user_word.word = substr (file_ptr -> file_table.name, 1, file_ptr -> file_table.name_size)
	then go to fail;

	if file_ptr -> file_table.next = "00000"
	then go to success;

	com_io_key = file_ptr -> file_table.next;	/* get next file_ptr -> file_table */
	call cobol_vdwf_dget (cobol_com_fileno, com_status, file_ptr, common_recsize, com_io_key);

	go to check12a;

switch_2:
check (13):
	call set_sw;



	go to success;




idparnm:
check (14):					/* determine id paragraph number */
	if reserved_word.type = 1
	then do;
		key = reserved_word.key;

		if key = 510
		then clause_num = 2;		/* is_word("author") */
		else if key = 554
		then clause_num = 3;		/* is_word("installation") */
		else if key = 528
		then clause_num = 4;		/* is_word("date-written") */
		else if key = 527			/* is_word("date-compiled") */
		then do;
			clause_num = 5;
			if fixed_common.comp_level < "3"
			then call lev_diag (3, record.header.line, record.header.column);
		     end;
		else if key = 594
		then clause_num = 6;		/* is_word("security") */
		else if key = 586			/* is_word("remarks") */
		then do;
			clause_num = 7;
			if fixed_common.comp_level < "5"
			then call lev_diag (152, record.header.line, record.header.column);
		     end;
		else go to fail;

		go to success;

	     end;

	go to fail;



in_dev:
check (15):					/* test for input device */
	key = cobol_imp_word$device_name (p2);

	if key = 1 | key = 3
	then go to success;

	go to fail;



out_dev:
check (16):					/* test for output device name */
	key = cobol_imp_word$device_name (p2);

	if key = 2 | key = 3
	then go to success;

	go to fail;


/* has the program name been stored in common? */

check (17):
	;
ckpnm:
	if fixed_common.prog_name ^= " "
	then go to success;

	go to fail;

is_dev:
check (18):
	if clause_num = 2
	then go to success;

	go to fail;

is_alf:
check (19):
	if clause_num = 3
	then go to success;

	go to fail;


/* is temp1 greater than zero, meaning current clause is not simple SAME AREA? */

check (20):
	;
cktemp1:
	if temp1 > 0
	then go to success;

	go to fail;

dupopt:
check (21):
	if sk_ind
	then go to fail;
	else go to success;

is_sw:
check (22):
	if clause_num = 1
	then go to success;

	go to fail;

/* is the currency sign literal valid? */

check (23):
	;
currlit:
	if record.type ^= 3 | alphanum_lit.lit_size ^= 1
	then go to fail;

	tempn1 =
	     index ("0123456789abcdefghijklmnopqrstuvwxyzABCDLPRSVXZ *+-,.;()""/=", substr (alphanum_lit.string, 1, 1));

	if tempn1 ^= 0
	then go to fail;

	go to success;

/* a) if lexical scan recognized a decimal-point clause, was the clause found in special-names?
   b) if lexical scan found no decimal-point clause, was the clause not found in special-names? */

check (24):
	;
decptok:
	if dec_is_com = "1"b & fixed_common.dec_comma = "0"b
	then go to fail;
	else go to success;
leftname:
check (25):					/* left hand name in special-names paragraph clause */
	call system_name (addr (left));

	if left.type = 0 | left.type = 5
	then go to fail;

	go to success;


/* is the current numeric literal greater than 1? */

oc_name:
check (26):					/* determine number of object computer */
	call computer_name;

	if comp_num = 0
	then go to fail;
	else obj_comp_num = comp_num;

	go to success;

rempar:
check (27):					/* determine if remarks paragraph used */
	if clause_num = 7
	then go to success;

	go to fail;

/*[4.2-1]*/
sortfile:
check (28):					/* check if file_name represents a sort file */
	if cobol_res_words$check_sort_list (alphanum_lit.string)
	then go to success;

	go to fail;

/* is the current item a valid implementor-name for use in an ASSIGN clause? */

check (29):
	;
implnm:
	dpass_sw = "1"b;

	if record.header.type ^= 8
	then go to fail;

	n = index (user_word.word, "-");

	if n = 0
	then do;
		file_table.device = 6;

		if user_word.length > 16
		then do;
			diag_num = 106;
			call diag;

			user_word.length = 16;
		     end;

		go to success;

	     end;

	if n = 1
	then go to fail;

	device_name_size = user_word.length - n;

	if n > 17
	then do;
		diag_num = 106;
		call diag;

		user_word.length = 16;
	     end;

	else user_word.length = n - 1;

	device_name = substr (user_word.word, n + 1, device_name_size);

	if device_name = "printer" | device_name = "PRINTER"
	then do;
		property (7) = "1"b;
		file_table.device = 1;
	     end;

	else if device_name = "card-reader" | device_name = "CARD-READER"
	then do;
		property (8) = "1"b;
		file_table.device = 2;
	     end;

	else if device_name = "card-punch" | device_name = "CARD-PUNCH"
	then do;
		property (9) = "1"b;
		file_table.device = 3;
	     end;

	else if device_name = "msd" | device_name = "MSD"
	then file_table.device = 4;

	else if device_name = "tape" | device_name = "TAPE"
	then do;
		property (10) = "1"b;
		file_table.device = 5;
	     end;

	else if device_name = "virtual" | device_name = "VIRTUAL"
	then file_table.device = 6;

	else if device_name = "preattached" | device_name = "PREATTACHED"
	then file_table.device = 7;

	else do;
		diag_num = 107;
		call diag;

		file_table.device = 6;
	     end;

	go to success;


/* is the current item a valid implementor-name for use to indicate the place where RERUN 
				information is to be stored? */

check (30):
	;
implnm1:						/*[4.1-1]*/
	if cobol_imp_word$imp_word (p2) = 1009		/* is it "checkpoint-file" */
						/*[4.1-1]*/
	then goto success;

	go to fail;

/* is current word an integer? */

check (31):
	;
integr:
	call integer;				/*[5.0-1]*/
	seg_limit = num_binary;
	if num_binary = 0
	then go to fail;
	else go to success;

integer:
     proc;

	num_binary = 0;


	if record.header.type ^= 2
	then return;
	if numeric_lit.integral = "0"b
	then return;
	if numeric_lit.sign ^= " "
	then return;
	if numeric_lit.literal = substr (zero, 1, numeric_lit.places)
	then return;

	call dtb;					/* converte current decimal string to binary value */

/* binary value is stored in num_binary fixed bin(24) field */

     end;

rightname:
check (32):					/* right hand name in special-names paragraph clause */
	call system_name (addr (right));

	if right.type = 0
	then go to fail;

	go to success;


/* if a key has been specified for the current file, is the type of key consistent with
the file's organization? */

check (33):
	;
keyok:						/* assumes ft_ptr set to correct file */
	if file_table.relative_key = "1"b
	then go to check33a;

	if file_table.organization = 3
	then go to success;

	go to fail;

check33a:
	if file_table.organization = 2
	then go to success;

	go to fail;

/* if the organization of the current file requires a key, has the key been specified? */

check (34):
	;
keyreqd:						/* assumes ft_ptr set to correct file */
	if file_table.organization = 2
	then go to check34a;
	if file_table.organization = 3
	then go to check34b;

	go to success;

check34a:
	if file_table.access <= 1
	then go to success;				/* key not required for sequential access */
	if file_table.relative_key = "1"b
	then go to success;

	go to fail;

check34b:
	if file_table.record_key
	then go to success;

	go to fail;				/* has the current file been named in a previous multiple file clause? */

check (35):
	;
multok:						/* assumes ft_ptr set to correct file */
	if file_ptr = null ()
	then do;
		diag_num = 101;
		call diag;
	     end;
	else if file_ptr -> file_table.mult_position_no ^= 0
	then do;
		file_ptr = null ();

		go to fail;
	     end;
	else temp1 = temp1 + 1;

	go to success;

sncl:
check (36):
	go to LT (left.type);

LT (0):						/* illegal */
	clause_num = 0;

	go to success;

LT (1):						/* user name */
	if right.type = 4 | right.type = 5
	then clause_num = 3;
	else clause_num = 0;

	go to success;

LT (2):						/* switch name */
	if right.type = 5
	then clause_num = 3;
	else clause_num = 1;

	go to success;

LT (3):						/* device name */
	if right.type = 5
	then clause_num = 3;
	else clause_num = 2;

	go to success;

LT (4):						/* implementor alphabet name */
	if right.type = 4 | right.type = 5
	then clause_num = 3;
	else clause_num = 0;

	go to success;

LT (5):						/* standard alphabet name */
	clause_num = 0;

	go to success;

LT (6):						/* printer control name */
	if right.type = 5
	then clause_num = 3;
	else clause_num = 2;

	go to success;

check (37):
figcon:
	if reserved_word.type = 1 & reserved_word.figcon
	then go to success;

	go to fail;

check (39):
	go to success;


check (40):
	;
switchnm:						/* is the current item a switch-name? */
	wnum = cobol_imp_word$switch_name (p2);

	if wnum = 0
	then go to fail;

	go to success;

tempint:
check (41):					/* check for legal integer in temp clause */
	if numeric_lit.type ^= 2 | ^numeric_lit.integral
	then go to fail;

	int_res = fixed (numeric_lit.literal);

	if int_res < 18 | int_res > 61
	then go to fail;

	go to success;


/* is the current numeric literal 1 through 49? */

check (42):
	;
smal50:
	if num_binary > 0 & num_binary < 50
	then go to success;

	go to fail;

/* has the current file been named previously in a SAME AREA clause? */

check (43):
	;
samefree:						/* legality test, same clause */
	if file_ptr = null ()
	then do;
		diag_num = 101;
		call diag;

		go to success;
	     end;
	else if same_type ^= 0
	then go to SM (same_type);

	go to fail;

SM (1):						/* same record area clause */
	if file_ptr -> file_table.same_rec_clause = 0
	then go to success;

	go to fail;

SM (2):						/* same sort area clause */
	if file_ptr -> file_table.same_sort_clause = 0
	then go to success;

	go to fail;

SM (3):						/* same sort-merge area clause */
	if file_ptr -> file_table.same_sort_clause = 0
	then go to success;
	go to fail;

SM (4):						/* same area clause */
	if file_ptr -> file_table.same_area_clause = 0
	then go to success;

	go to fail;

/* is the current item a special-name other than a switch? */

check (45):
	;
specnam:
	if record.header.type ^= 1
	then go to fail;
	if reserved_word.key = 197
	then go to success;				/* CONSOLE */
	if reserved_word.key = 281
	then go to success;				/* SYSIN */
	if reserved_word.key = 294
	then go to success;				/* SYSOUT */

	go to fail;

sc_name:
check (46):					/* determine number of source computer */
	call computer_name;

	if comp_num = 0
	then go to fail;
	else source_comp_num = comp_num;

	go to success;

computer_name:
     proc;

	comp_num = cobol_imp_word$computer_name (p2);

	if comp_num ^= 0
	then return;

	comp_num = cobol_imp_word$file_org (p2);

	if comp_num = 4
	then comp_num = 9;
	else comp_num = 0;

     end;

/* is temp1 equal to 1, meaning the current clause is a SaME RECORD AREA clause? */

check (47):
	;
temp1eq1:
	if temp1 = 1
	then go to success;

	go to fail;

/* is the current item a user word? */

check (48):
	;
usrwd:
	if record.type = 8
	then go to success;

	go to fail;

switch:
check (49):					/* test for unique switch name before on-off */
	if left.type ^= 2
	then go to fail;

	if substr (switch_bits, left.num, 1)
	then go to fail;

	substr (switch_bits, left.num, 1) = "1"b;
	call set_sw;

	go to success;

set_sw:
     proc;

	addr (mnemonic_name.class) -> bit8 = "0"b;

	mnemonic_name.class.switch_condition = "1"b;
	mnemonic_name.iw_key = left.number;

	if reserved_word.key = 134
	then mnemonic_name.on_status = "1"b;		/* is_word("ON") */
	else mnemonic_name.off_status = "1"b;		/* is_word("OFF") */

     end;

switch_1:
check (50):					/* test for unique switch name before mnemonic name */
	if left.type ^= 2 | right.type = 5
	then go to fail;

	if substr (switch_bits, left.num, 1)
	then go to fail;

	substr (switch_bits, left.num, 1) = "1"b;

	call set_sw;

	go to success;

/* is the current word an alphanumeric literal? */

check (51):
	;
alphanmlit:
	if record.type = 3
	then go to success;

	go to fail;


/* can recovery be made on the current word? */

check (52):
	;
recovword:
	if record.header.type ^= 1
	then go to fail;
	if reserved_word.ided_recovery = "1"b
	then go to success;

	go to fail;

check (53):
	;
orgqualok:					/* success if organization and organization qualifier are compatible */
	if file_table.organization = 2 & property (19) = "1"b
	then if file_table.org_qual = 6
	     then go to success;
	     else go to fail;
	if file_table.organization = 2 & property (19) = "0"b & file_table.org_qual = 6
	then go to fail;
	if file_table.organization = 3 & file_table.org_qual = 7
	then go to fail;
	if file_table.organization = 1 & file_table.org_qual = 5
	then go to fail;
	if file_table.org_qual < 100
	then go to success;
	if file_table.organization < 2
	then go to success;

	go to fail;

check (54):
	;
catusrwd:						/* Scan to bypass illegal character err diag */
	dpass_sw = "1"b;
	if record.header.type ^= 8
	then go to fail;
	if user_word.length > 200
	then go to fail;				/* catalogue name too large */

	go to success;

check (55):
	;
charst1:						/* set character string for ATTACH-OPTIONS */
	dpass_sw = "1"b;
	if record.header.type ^= 3
	then go to fail;
	if alphanum_lit.lit_size > 128
	then go to fail;

	go to success;

check (56):
	;
catalphalit:
	dpass_sw = "1"b;
	if alphanum_lit.type ^= 3
	then go to fail;
	if alphanum_lit.lit_size > 200
	then go to fail;
	file_table.cat_nm = alphanum_lit.string;

	go to success;

dupdef:
check (57):					/* check for duplicate clause */
	if ^substr (clause_bits, clause_num, 1)
	then go to success;

	go to fail;

denint:
check (58):
	call integer;

/*[4.4-1]*/
	if num_binary = 800 | num_binary = 1600 | num_binary = 6250
	then go to success;

	go to fail;

check (59):
ckintnm:
	if fixed_common.file_count = 0
	then go to success;

	com_io_key = filedescr_offsets (1);

	call cobol_vdwf_dget (cobol_com_fileno, com_status, file_ptr, common_recsize, com_io_key);

	do while ("1"b);

	     if user_word.word = substr (file_table.ifn, 1, file_table.ifn_size)
	     then go to fail;

	     if file_ptr -> file_table.next = "00000"
	     then go to success;

	     call cobol_vdwf_dget (cobol_com_fileno, com_status, file_ptr, common_recsize, com_io_key);
	     com_io_key = file_ptr -> file_table.next;
	end;



/* ACTION ROUTINES */
/* perform necessary initialization functions */

action (1):
	;
begrun:
	fixed_common.phase_name = "IDED20";
	fixed_common.dd_seg_size = 1048576;
	fixed_common.pd_seg_size = 1048576;
	fixed_common.object_sign = fixed_common.currency;
	name_ptr = addr (ft_build_area (1));		/* initialize mnemonic-name pointer */

	last_clause = 0;
	clause_order = 0;
	clause_bits = "0"b;

	go to ret;

action (2):					/* initialize for source computer paragraph */
	clause_bits = "0"b;
	last_clause = 0;
	clause_order = 0;

	go to ret;


action (3):					/* determine number of source computer clause */
	key = reserved_word.key;

	if key = 568
	then clause_num = 1;			/* is_word("memory") */
	else if key = 88
	then clause_num = 2;			/* is_word("debugging") */
	else if key = 604
	then clause_num = 3;			/* is_word("supervisor") */
	else clause_num = 0;

	go to ret;

action (4):					/* source computer clauses */
	if clause_num ^= 0
	then go to SC (clause_num);
	else go to ret;

SC (1):						/* memory size clause */
	go to dup_order;

SC (2):						/* debugging mode clause */
						/*[4.0-2]*/
	fixed_common.debug = "1"b;
	go to dup_order;

SC (3):						/* supervisor clause */
	go to dup_order;

action (5):					/* initialize for object computer paragraph */
	clause_bits = "0"b;
	last_clause = 0;
	clause_order = 0;

	obj_comp_name = 1;
	seg_lim = 0;
	alf_type = 0;




	go to ret;

action (6):					/* determine number of object computer clause */
	key = reserved_word.key;

	if key = 604
	then clause_num = 1;			/* is_word("SUPERVISOR") */
	else if key = 568
	then clause_num = 2;			/* is_word("MEMORY") */
	else if key = 587				/* is_word("SEQUENCE") */
	then do;
		clause_num = 3;
		call set_pcs_loc;
	     end;
	else if key = 595
	then clause_num = 4;			/* is_word("SEGMENT-LIMIT") */
	else if key = 509
	then clause_num = 5;			/* is_word("ASSIGN") */
	else if key = 196
	then clause_num = 6;			/* is_word("DATA") */
	else if key = 142
	then clause_num = 7;			/* is_word("PROCEDURE") */
	else clause_num = 0;

	go to ret;

set_pcs_loc:
     proc;

	pcs.line = reserved_word.line;
	pcs.column = reserved_word.column;

     end;

action (7):					/* execute object computer clause */
	if clause_num ^= 0
	then go to OC (clause_num);
	else go to ret;

OC (1):						/* supervisor_clause */
	fixed_common.supervisor = "1"b;

	go to dup_order;

OC (2):						/* memory clause */
	go to dup_order;

OC (3):						/* program collating sequence clause */
	pcs.type = alf_type;
	pcs.name = alf_name;
	pcs.num = alf_num;

	go to dup_order;

OC (4):						/* segment-limit clause */
	fixed_common.seg_limit = num_binary;

	go to dup_order;

OC (5):						/* assign clause */
	go to dup_order;

OC (6):						/* maximum data clause */
	fixed_common.dd_seg_size = num_binary;

	go to dup_order;

OC (7):						/* maximum procedure clause */
	fixed_common.pd_seg_size = num_binary;

	go to dup_order;

action (8):					/* program collating sequence clause found */
	clause_num = 3;

	go to ret;

/* store the name from PROGRAM-ID in common */

action (9):
	;

	if record.type = 2
	then fixed_common.prog_name = numeric_lit.literal;
	else fixed_common.prog_name = user_word.word;

	go to ret;				/* set on remarks bit to suppress any diags issued by lexical scan on comment-entries in ID */

action (10):
	;

	remarksbit = "1"b;

	go to ret;				/* set off the remarks bit */

action (11):
	;

	remarksbit = "0"b;

	go to ret;				/* set on DEBUGGING MODE indicators */

action (12):
	;

	temp1 = 4;
	debugbit = "1"b;
	fixed_common.debug = "1"b;

	go to ret;				/* store the segment limit integer in common */

action (13):					/* initialize for special names paragraph */
	clause_bits = "0"b;
	last_clause = 0;
	clause_order = 0;

	currsign = " ";
	objsign = " ";

	switch_bits = "0"b;
	dev_bits = "0"b;
	alph_bits = "0"b;

	go to ret;

action (14):					/* determine clause number for special-names paragraph */
	key = reserved_word.key;

	if key = 504
	then clause_num = 3;			/* is_word("ALPHABET") */
	else if key = 525
	then clause_num = 4;			/* is_word("CURRENCY") */
	else if key = 538				/* is_word("DECIMAL-POINT") */
	then do;
		clause_num = 5;
		dec_com = "0"b;
		obj_com = "0"b;
	     end;
	else clause_num = 0;

	go to ret;

action (15):
	clause_num = 0;
	last_clause = 0;
	clause_order = 0;

	go to ret;

action (16):
	dec_com = "1"b;
	obj_com = "1"b;

	go to ret;

action (17):
	obj_com = "1"b;

	go to ret;

action (18):
	;

	fixed_common.seg_limit = num_binary;

	go to ret;

action (19):
	currsign = alphanum_lit.string;

	go to ret;

action (20):
	objsign = currsign;

	go to ret;

action (21):					/* alphabet_name is alpha_def: initialization */
	call reset_alpha;
	clause_num = 3;
	call char_spec (addr (left_char_spec));
	if left_char_spec.type = 1
	then alphabet_name.loval_char = addr (left_char_spec.value) -> ch.ch4;
	else alphabet_name.loval_char = left_char_spec.char;

	if fixed_common.comp_level < "3"
	then call lev_diag (6, record.header.line, record.header.column);
	go to ret;

reset_alpha:
     proc;

declare	i		fixed bin;

	do i = 1 by 1 to 500;
	     ft_build_area (i) = 0;
	end;

	alphabet_name.def_line = user_word.line;
	alphabet_name.type = 40;

	do i = 0 by 1 to 511;
	     tran_tab (i) = 0;
	end;

	addr (nat_bits) -> bit512 = "0"b;
	ord_num = 0;
	call alf_ent;
	dup_alpha_value = "1"b;
	one_one_bit = "0"b;
	alf_range = 1;
	dup_alf_value = "0"b;
	high_value_value = 0;

     end;

alf_ent:
     proc;

	ord_num = 0;
	curr_ord_num = 0;
	ord_max = 0;

     end;

action (22):					/* type 17 name table entry: switch name */
	addr (mnemonic_name.class) -> bit8 = "0"b;
	mnemonic_name.class.switch_name = "1"b;

	call nm (addr (right), left.number);

	go to ret;

nm:
     proc (p, num);

declare	(L, num)		fixed bin,
	p		ptr;

declare	1 N		based (p),
	  2 type		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 number	fixed bin,
	  2 num		fixed bin,
	  2 name		char (32) varying;

	L = length (N.name);

	mnemonic_name.iw_key = num;
	mnemonic_name.size = L + type17_size;
	mnemonic_name.def_line = N.line;
	mnemonic_name.column = N.column;
	mnemonic_name.name_size = L;
	mnemonic_name.name = substr (N.name, 1, L);

	call buildnm;

     end;

action (23):					/* type 17 name table entry, switch condition name */
	mnemonic_name.size = user_word.length + type17_size;
	mnemonic_name.column = user_word.column;
	mnemonic_name.def_line = user_word.line;
	mnemonic_name.name_size = user_word.length;
	mnemonic_name.name = substr (user_word.word, 1, mnemonic_name.name_size);
	mnemonic_name.iw_key = left.number;

	call buildnm;

	go to ret;

buildnm:
     proc;

	mnemonic_name.type = 17;
	mnemonic_name.line = 0;
	mnemonic_name.string_ptr = null ();
	mnemonic_name.prev_rec = null ();
	mnemonic_name.alphabet_offset = 0;

	call cobol_vdwf_sput (cobol_name_fileno, name_status, name_ptr, mnemonic_name.size, name_key);

     end;


action (24):
	;
buildft:
	do i = 1 by 1 to 500;
	     ft_build_area (i) = 0;
	end;

	ft_ptr = addr (ft_build_area (1));
	temp4 = user_word.length + file_table_size;

	file_table.name_size = user_word.length;
	file_table.name = user_word.word;
	file_table.next = "00000";
	file_table.tape_device_key = "00000";
	file_table.add_cat_key = "00000";
	file_table.ifn = " ";
	file_table.file_id_info = "00000";
	file_table.retention_info = "00000";
	file_table.padding_char = " ";
	file_table.banner_char = "!";			/* ! = octal 41 */
	file_table.file_status_info = "00000";
	file_table.extra_status_info = "00000";
	file_table.cat_id_info = "00000";
	file_table.r_key_info = "00000";
	file_table.alt_key_info = "00000";
	file_table.rec_do_info = "00000";
	file_table.label_info = "00000";
	file_table.data_info = "00000";
	file_table.attach_options_info = "00000";
	file_table.replacement_info = "00000";
	file_table.report_info = "00000";
	file_table.linage_info = "00000";
	file_table.optional = optional_file;
	file_table.external = external_file;
	file_table.record_format = 0;
	file_table.label_format = 0;
	file_table.cat_nm = " ";

	file_table.ao_string = "00000";
	file_table.file_desc_1_offset = 0;		/* [3.0-2] */
	file_table.alternate_keys = 0;		/* [3.0-4] */
	file_table.dupl_alt = "0"b;			/* [3.0-5] */
	file_table.organization = 1;			/* seq default */
						/* [3.0-6] */
	file_table.om_string = " ";

	file_table.file_no = fixed_common.file_count + 1;
	file_table.code_set = 1;			/* set to default code set of EBCDIC */
	ft_size = temp4;				/* save file table size for replace_io */

	ignore_file = "0"b;

	go to ret;

emit_ft:
     proc;

/*[4.0-5]*/
dcl	(i, num)		fixed bin;

	fixed_common.file_count = fixed_common.file_count + 1;

	call cobol_vdwf_sput (cobol_com_fileno, com_status, ft_ptr, ft_size, common_key);

/* put default file table */

	if fixed_common.file_count < 21
	then fixed_common.filedescr_offsets (fixed_common.file_count) = common_key;

/* save file table address */

	if fixed_common.file_count > 1
	then do;

/*establish link from last file table to this file */

		call cobol_vdwf_dget (cobol_com_fileno, com_status, last_ft_ptr, common_recsize, last_prev_file_key);

		last_ft_ptr -> file_table.next = common_key;
						/* now linked */

		call cobol_vdwf_dput (cobol_com_fileno, com_status, last_ft_ptr, common_recsize, last_prev_file_key);

	     end;

	last_prev_file_key = common_key;		/* save current file table address for linking */

/*[4.0-5]*/
	do i = 1 by 1 to 10;

/*[4.0-5]*/
	     if source_pos.line (i) ^= 0
	     then do;

/*[4.0-5]*/
		     lev_diag_item.line = source_pos.line (i);
						/*[4.0-5]*/
		     lev_diag_item.column = source_pos.column (i);
						/*[4.0-5]*/
		     org = file_table.organization;

/*[4.2-1]*/
		     if sort_name = "1"b
		     then org = 6;

/*[4.0-5]*/
		     go to FT (i);

FT (1):
		     num = 113;
		     call LEV1;
		     go to FT1;			/* organization clause */
FT (2):
		     num = 117;
		     mod_num = 16;
		     LEV = "3";
		     go to FT1;			/* optional phrase */
FT (3):
		     num = 118;
		     call LEV2;
		     go to FT1;			/* reserve clause */
FT (4):
		     num = 188;
		     call LEV1;
		     go to FT1;			/* record key clause */
FT (5):
		     num = 126;
		     call LEV2;
		     go to FT1;			/* alt rec key clause */
FT (6):
		     num = 183;
		     call LEV1;
		     go to FT1;			/* select clause */
FT (7):
		     num = 184;
		     call LEV1;
		     go to FT1;			/* assign clause */
FT (8):
		     num = 185;

/*[4.2-2]*/
		     call LEV1;

/*[4.2-2]*/
		     if dynamic_acc
		     then do;
			     LEV_NUM = lev2_org (org);/* access clause */
						/*[4.2-2]*/
			     MOD_NUM = lev2_mod (org);/*[4.2-2]*/
			end;

/*[4.0-5]*/
		     go to FT1;

FT (9):
		     num = 186;
		     call LEV1;
		     go to FT1;			/* file status clause */
FT (10):
		     num = 187;
		     call LEV1;
		     go to FT1;			/* relative key clause */

FT1:						/*[4.0-5]*/
		     if LEV > fixed_common.comp_level
		     then do;

			     lev_diag_item.module = mod_num;
			     lev_diag_item.number = num;

			     call cobol_c_list (diag2_ptr);

/*[4.0-5]*/
			end;

		     mod_num = 0;			/*[4.0-5]*/
		end;

/*[4.0-5]*/
	end;

/*[4.2-2]*/
	if dynamic_acc				/*[4.2-2]*/
	then if LEV_NUM > fixed_common.comp_level	/*[4.2-2]*/
	     then do;
		     lev_diag_item.module = MOD_NUM;	/*[4.2-2]*/
		     lev_diag_item.number = 216;	/*[4.2-2]*/
		     lev_diag_item.line = dyn.line;	/*[4.2-2]*/
		     lev_diag_item.column = dyn.column;

/*[4.2-2]*/
		     call cobol_c_list (diag2_ptr);

/*[4.2-2]*/
		end;

     end;

LEV1:
     proc;

/*[4.0-5]*/
	mod_num = lev1_mod (org);
	LEV = lev1_org (org);

     end;						/*[4.0-5]*/
						/*[4.0-5]*/
LEV2:
     proc;

/*[4.0-5]*/
	mod_num = lev2_mod (org);
	LEV = lev2_org (org);

     end;						/*[4.0-5]*/
						/*[4.0-5]*/

action (25):					/* file_contol paragraph: execute clause */
	if clause_num ^= 0
	then go to FCC (clause_num);

	go to ret;

FCC (1):						/* assign clause */
	file_table.ifn_size = user_word.length;
	file_table.ifn = substr (user_word.word, 1, file_table.ifn_size);

	go to ret;

FCC (2):						/* organization clause */
	if file_org = 0
	then go to ret;

	file_table.org_qual = 4;			/* set default to multics */
	file_table.code_set = 1;

	go to FO (file_org);

FO (1):						/* sequential */
	property (3) = "1"b;
	file_table.organization = 1;

	if file_qual = 12				/* ibm-dos */
	then do;
		file_table.org_qual = 5;
		file_table.code_set = 4;
	     end;
	else if file_qual = 10			/* h-2000 */
	then do;
		file_table.org_qual = 6;
		file_table.code_set = 2;
	     end;
	else if file_qual = 13			/* ibm-os */
	then do;
		file_table.org_qual = 7;
	     end;

	go to FO1;

FO (2):						/* indexed */
	property (5) = "1"b;
	file_table.organization = 3;

	if file_qual = 8				/* level-64 */
	then do;
		file_table.org_qual = 3;
		file_table.code_set = 1;
	     end;
	else if file_qual = 12			/* ibm-dos */
	then do;
		file_table.org_qual = 5;
		file_table.code_set = 1;
	     end;

	go to FO1;

FO (3):						/* relative */
	property (4) = "1"b;
	file_table.organization = 2;

	if org_qual = 10				/* h-2000 */
	then do;
		file_table.org_qual = 6;
		file_table.code_set = 2;
	     end;
	else if org_qual = 12
	then do;
		file_table.org_qual = 5;
		file_table.code_set = 1;
	     end;

	go to FO1;

FO (4):						/* stream */
	file_table.organization = 5;

	go to FO1;

FO (5):						/* ids-ii */
	file_table.organization = 5;

	go to FO1;

FO (6):						/* keyed */
	property (19) = "1"b;
	file_table.organization = 2;

	go to FO1;

FO1:
	if file_qual = 15
	then do;
		file_table.org_qual = 1;
		file_table.code_set = 1;
	     end;

	go to ret;

FCC (3):						/* reserve clause */
	file_table.buffers = num_binary;

	go to ret;

FCC (4):						/* access clause */
	if file_acc ^= 0
	then go to FA (file_acc);

	go to ret;

FA (1):						/* sequential */
	file_table.access = 1;

	go to ret;

FA (2):						/* random */
	property (6) = "1"b;
	file_table.access = 2;

	go to ret;

FA (3):						/* dynamic */
	property (6) = "1"b;
	file_table.access = 3;

	go to ret;

FCC (5):						/* record key clause */
	rec_key = "1"b;

	go to ret;

FCC (6):						/* file status clause */
	go to ret;

FCC (7):						/* alternate key clause */
	go to ret;

FCC (8):						/* catalog name clause */
	go to ret;

FCC (9):						/* ssf, flr, vlr, bsn */
	if ssf_ind
	then do;
		property (12) = "1"b;
		file_table.record_prefix = 2;

	     end;

	if flr_ind
	then file_table.fixed_recs = "1"b;
	else if vlr_ind
	then file_table.variable_recs = "1"b;
	else if span_ind
	then file_table.spanned_recs = "1"b;

	if bsn_ind
	then file_table.bsn = "1"b;

	go to ret;

FCC (10):						/* process area */
	file_table.process_area = "1"b;

	go to ret;

FCC (11):						/* interchange */
	file_table.interchange = "1"b;

	go to ret;

FCC (12):						/* relative key clause */
	rel_key = "1"b;

	go to ret;

FCC (13):						/* no process area */
	file_table.process_area = "0"b;

	go to ret;

action (26):
	;

	ed_found = "1"b;

	go to ret;


action (27):					/* i-o-control: initialize */
	mult_fil_no = 0;
	clause_bits = "0"b;
	last_clause = 0;
	clause_order = 0;

	go to ret;

action (28):					/* i-o-control: set clause number */
	key = reserved_word.key;

	if key = 508
	then clause_num = 1;			/* is_word("apply") */
	else if key = 588
	then clause_num = 2;			/* is_word("rerun") */
	else if key = 593				/* id_word("same") */
						/*[5.0-1]*/
	then do;
		clause_num = 3;			/*[5.0-1]*/
		same_loc.line = record.header.line;	/*[5.0-1]*/
		same_loc.column = record.header.column; /*[5.0-1]*/
	     end;
	else if key = 570
	then clause_num = 4;			/* is_word("multiple") */
	else clause_num = 0;

	temp1 = 0;

	go to ret;

action (29):					/* file_control_control: access clause */
	rel_key = "0"b;
	rec_key = "0"b;

	key = reserved_word.key;

	if key = 597
	then file_acc = 1;				/* is_word("sequential") */
	else if key = 147
	then file_acc = 2;				/* is_word("random") */
	else if key = 169				/* is_word("dynamic") */
						/*[4.2-2]*/
	then do;
		file_acc = 3;			/*[4.2-2]*/
		dynamic_acc = "1"b;			/*[4.2-2]*/
		dyn.line = reserved_word.line;	/*[4.2-2]*/
		dyn.column = reserved_word.column;	/*[4.2-2]*/
	     end;

	else file_acc = 0;

	go to ret;

action (30):					/*[4.0-5]*/
	key = reserved_word.key;

/*[4.0-5]*/
	if key = 167				/*relative*/
						/*[4.0-5]*/
	then do;
		rel_key = "1"b;			/*[4.0-5]*/
		source_pos.line (10) = record.header.line;
						/*[4.0-5]*/
		source_pos.column (10) = record.header.column;
						/*[4.0-5]*/
	     end;					/*[4.0-5]*/
	else /*[4.0-5]*/
	     if key = 148				/*record*/
						/*[4.0-5]*/
	then do;
		rec_key = "1"b;			/*[4.0-5]*/
		source_pos.line (4) = record.header.line;
						/*[4.0-5]*/
		source_pos.column (4) = record.header.column;
						/*[4.0-5]*/
	     end;

	go to ret;

action (31):					/* file control paragraph: select clause */
	key = reserved_word.key;

	if key = 307
	then external_file = "1"b;			/* is_word("external") */
	else do;					/* is_word("optional") */
		optional_file = "1"b;
		source_pos.line (2) = record.header.line;
		source_pos.column (2) = record.header.column;
	     end;

	go to ret;

action (32):					/* indicate alternate record key */
	call enter_key (5);

	go to ret;

action (33):					/* file organization is indexed */
	file_org = 2;

	go to ret;

action (34):					/* vlr, flr, bsn, spanned */
	key = reserved_word.key;

	if key = 85
	then ssf_ind = "1"b;			/* is_word("ssf") */
	else if key = 272
	then flr_ind = "1"b;			/* is_word("flr") */
	else if key = 201
	then vlr_ind = "1"b;			/* is_word("vlr") */
	else if key = 413
	then bsn_ind = "1"b;			/* is_word("bsn") */
	else if key = 601
	then span_ind = "1"b;			/* is_word("spanned") */

	go to ret;

/* construct an entry in common for the current relative key name */

action (35):
	;

	property (17) = "1"b;			/* indicate relative key */
	file_table.relative_key = "1"b;
	file_table.address_format = 3;

	call enter_key (1);

	go to ret;

enter_key:
     proc (temp6);

declare	(temp6, temp4)	fixed bin;

	temp4 = user_word.length + file_key_size;
	fkey_ptr = addr (file_key_area);
	file_key.next = "00000";

/*[3.0-7]*/
	if temp6 = 5				/*[3.0-7]*/
	then file_key.next_alt = file_table.alt_key_info; /*[3.0-7]*/
	else file_key.next_alt = "00000";

	file_key.qual = "00000";			/*[3.0-7]*/
	addr (file_key.info) -> bit8 = "00000000"b;
	file_key.file_no = file_table.file_no;
	file_key.key_type = temp6;
	file_key.line = user_word.line;
	file_key.column = user_word.column;
	file_key.temp_seg = 0;
	file_key.temp_offset = 0;
	file_key.desc = " ";

	if user_word.type = 8
	then do;
		file_key.name_size = user_word.length;
		file_key.name = user_word.word;
	     end;
	else do;
		file_key.name_size = alphanum_lit.lit_size;
		file_key.name = alphanum_lit.string;
	     end;
	file_key_type = file_key.key_type;		/*for	check */
	common_recsize = temp4;			/* temp4 contains size of	file_key. */

	call cobol_vdwf_sput (cobol_com_fileno, com_status, fkey_ptr, common_recsize, common_key);

	if fixed_common.file_keys = "00000"
	then fixed_common.file_keys = common_key;
	else do;

		call cobol_vdwf_dget (cobol_com_fileno, com_status, work_ptr, common_recsize,
		     fixed_common.last_file_key);	/*link key rec */

		work_ptr -> file_key.next = common_key; /* now linked */

		call cobol_vdwf_dput (cobol_com_fileno, com_status, work_ptr, common_recsize,
		     fixed_common.last_file_key);

	     end;

	fixed_common.last_file_key = common_key;	/* save current file key address */

	if temp6 > 100
	then temp6 = temp6 - 100;

	if temp6 < 14
	then do;
		go to T (temp6);

T (1):
		file_table.r_key_info = common_key;
		go to T1;
T (2):
		file_table.r_key_info = common_key;
		go to T1;
T (3):
		file_table.file_status_info = common_key;
		go to T1;
T (4):
		file_table.extra_status_info = common_key;
		go to T1;
T (5):
		file_table.alternate_keys = file_table.alternate_keys + 1;
						/* [3.0-4] */
						/*[3.0-7]*/
		file_table.alt_key_info = common_key;
		go to T1;				/* [3.0-2] */

T (6):
		go to T1;
T (7):
		file_table.cat_id_info = common_key;
		go to T1;
T (8):
		file_table.attach_options_info = common_key;
		go to T1;
T (9):
		file_table.replacement_info = common_key;
		go to T1;
T (10):
		go to T1;
T (11):
		go to T1;
T (12):
		file_table.add_cat_key = common_key;
		go to T1;
T (13):
		file_table.file_id_info = common_key;
		go to T1;
T (14):
		file_table.retention_info = common_key;
		go to T1;

T1:
	     end;

	qual_sw = "0"b;				/* this item is a subject of file key */

     end;








action (36):					/* apply attach options */
	if alphanum_lit.type = 3			/* alphanumeric literal */
	then do;
		apply_num = 5;

		file_table.ao_len = alphanum_lit.lit_size;
		file_table.ao_string = alphanum_lit.string;

		call enter_key (108);
	     end;
	else if user_word.type = 8			/* data-name */
	then do;
		apply_num = 6;
		call enter_key (8);
	     end;
	else apply_num = 0;

	go to ret;

action (37):					/* apply tape-option: execute clause */
	key = cobol_imp_word$io_technique (p2);

	if key = 0
	then go to ret;

	if substr (options_bits, key, 1)
	then sk_ind = "1"b;
	else do;
		sk_ind = "0"b;
		substr (options_bits, key, 1) = "1"b;
	     end;

	go to ATO (key);

ATO (1):						/* additional */
	go to ret;

ATO (5):						/* density */
	go to ret;

ATO (7):						/* device */
	go to ret;

ATO (8):						/* force */
	file_table.force = "1"b;

	go to ret;

ATO (10):						/* output-mode */
	go to ret;

ATO (12):						/* protect */
	file_table.protect = "1"b;

	go to ret;

ATO (13):						/* retain */
	file_table.retain = "1"b;

	go to ret;

action (38):					/* apply file is */
	key = cobol_imp_word$io_technique (p2);

	if key = 15
	then apply_num = 1;				/* is_word("temporary") */
	else if key = 11
	then apply_num = 2;				/* is_word("permanent") */
	else apply_num = 0;

	go to ret;

action (39):					/* apply [no] detach */
	key = reserved_word.key;

	if key = 129
	then apply_num = 3;				/* is_word("no") */
	else if key = 405
	then apply_num = 4;				/* is_word("detach") */
	else apply_num = 0;

	go to ret;

action (40):					/* program collating sequence: save line and col */
	call set_pcs_loc;

	go to ret;


action (41):					/* apply tape-options: initialization */
	options_bits = "0"b;
	apply_num = 7;

	addr (file_table.tape) -> bit18 = "0"b;

	file_table.ao_len = 0;
	file_table.ao_string = "00000";

	file_table.output_mode = 0;
	file_table.tape_device = 0;

	file_table.add_cat_key = "00000";

	go to ret;

action (42):					/* select clause: initialization */
						/*[4.2-1]*/
	sort_name = "0"b;

	vector = "0"b;
	clause_bits = "0"b;
	external_file = "0"b;
	optional_file = "0"b;
	ignore_file = "1"b;
	cat_type = 0;


	do i = 1 by 1 to 10;

	     source_pos.line (i) = 0;

	end;

/*[4.0-5]*/
	source_pos.line (6) = record.header.line;	/*[4.0-5]*/
	source_pos.column (6) = record.header.column;	/*[4.0-5]*/
	dynamic_acc = "0"b;

	go to ret;

action (43):					/* apply: execute clause */
	if file_ptr = null ()
	then do;
		diag_num = 101;
		call diag;
	     end;
	else if apply_num ^= 0
	then go to AP (apply_num);

	go to ret;

AP (1):						/* apply file is temporary */
	if ^(file_ptr -> file_table.temp) & ^(file_ptr -> file_table.perm)
						/*[4.3-1]*/
	then if file_ptr -> file_table.external		/*[4.3-1]*/
	     then do;
		     diag_num = 181;		/*[4.3-1]*/
		     call diag;			/*[4.3-1]*/
		end;				/*[4.3-1]*/
	     else file_ptr -> file_table.temp = "1"b;

	go to ret;

AP (2):						/* apply file is permanent */
	if ^(file_ptr -> file_table.temp) & ^(file_ptr -> file_table.perm)
	then file_ptr -> file_table.perm = "1"b;


	go to ret;

AP (3):						/* apply no detach */
	if ^(file_ptr -> file_table.attach) & ^(file_ptr -> file_table.detach)
	then file_ptr -> file_table.detach = "1"b;	/*[4.0-3]*/

	go to ret;

AP (4):						/* apply detach */
	if ^(file_ptr -> file_table.attach) & ^(file_ptr -> file_table.detach)
	then file_ptr -> file_table.detach = "0"b;	/*[4.0-3]*/

	go to ret;

AP (5):						/* attach options literal */
	if file_ptr -> file_table.ao_len = 0 & file_ptr -> file_table.ao_string = "00000"
	then do;
		file_ptr -> file_table.ao_len = file_table.ao_len;
		file_ptr -> file_table.ao_string = substr (file_table.ao_string, 1, file_table.ao_len);
	     end;

	go to ret;

AP (6):						/* attach-options data-name */
						/*[4.0-9]*/
	if file_ptr -> file_table.attach_options_info = "00000"
						/*[4.0-9]*/
	then do;
		file_ptr -> file_table.attach_options_info =
		     /*[4.0-9]*/ substr (file_table.attach_options_info, 1, 5);
	     end;

	go to ret;

AP (7):						/* tape-options: enter file table */
	if ^(file_ptr -> file_table.temp)
	then file_ptr -> file_table.temp = file_table.temp;
	if ^(file_ptr -> file_table.perm)
	then file_ptr -> file_table.perm = file_table.perm;
	if ^(file_ptr -> file_table.attach)
	then file_ptr -> file_table.attach = file_table.attach;
	if ^(file_ptr -> file_table.detach)
	then file_ptr -> file_table.detach = file_table.detach;
	if ^(file_ptr -> file_table.density)
	then file_ptr -> file_table.density = file_table.density;
	if ^(file_ptr -> file_table.retain)
	then file_ptr -> file_table.retain = file_table.retain;
	if ^(file_ptr -> file_table.force)
	then file_ptr -> file_table.force = file_table.force;
	if ^(file_ptr -> file_table.protect)
	then file_ptr -> file_table.protect = file_table.protect;
						/*[4.4-1]*/
	if ^(file_ptr -> file_table.den_6250)		/*[4.4-1]*/
	then file_ptr -> file_table.den_6250 = file_table.den_6250;

	if file_ptr -> file_table.output_mode = 0 & file_table.output_mode ^= 0
	then do;
		file_ptr -> file_table.output_mode = file_table.output_mode;
		file_ptr -> file_table.om_len = file_table.om_len;
		file_ptr -> file_table.om_string = file_table.om_string;
	     end;

	if file_ptr -> file_table.tape_device = 0 & file_table.tape_device ^= 0
	then do;
		file_ptr -> file_table.tape_device = file_table.tape_device;
		file_ptr -> file_table.tape_device_num = file_table.tape_device_num;
		file_ptr -> file_table.tape_device_key = file_table.tape_device_key;
	     end;

	if file_ptr -> file_table.add_cat_key = "00000" & file_table.add_cat_key ^= "00000"
	then file_ptr -> file_table.add_cat_key = file_table.add_cat_key;

	go to ret;

action (44):					/* alphabet definition: left operand */
	call char_spec (addr (left_char_spec));
	curr_ord_num = ord_num;
	ord_max = 0;
	right_char_spec.type = left_char_spec.type;
	right_char_spec.value = left_char_spec.value;
	if left_char_spec.type = 2
	then right_char_spec.char = left_char_spec.char;

	go to ret;

action (45):					/* apply tape-option: device */
	if sk_ind
	then go to ret;

	if numeric_lit.type = 2			/* literal */
	then do;
		file_table.tape_device = 1;
		file_table.tape_device_num = num_binary;
	     end;

	else if user_word.type = 8			/* data-name */
	then do;
		file_table.tape_device = 2;
		call enter_key (10);
		file_table.tape_device_key = common_key;
	     end;

	else file_table.tape_device = 0;

	go to ret;

action (46):					/* apply tape-option; output-mode */
	if sk_ind
	then go to ret;

	key = cobol_imp_word$io_technique (p2);

	if key = 16
	then file_table.output_mode = 1;		/* is_word("generation") */
	else if key = 9
	then file_table.output_mode = 2;		/* is_word("modification") */
	else if key = 17
	then file_table.output_mode = 3;		/* is_wod("replacement") */
	else file_table.output_mode = 0;

	go to ret;

action (47):					/* apply tape-option: output-mode */
	if sk_ind
	then go to ret;

	if user_word.type = 8			/* data-name */
	then do;
		file_table.output_mode = 4;
		call enter_key (9);
	     end;

	else if alphanum_lit.type = 3			/* alphanumeric literal */
	then do;
		file_table.output_mode = 3;
		call enter_key (109);
	     end;

	else file_table.output_mode = 0;

	go to ret;

action (48):					/* apply tape-options: density */
	if sk_ind
	then go to ret;

/*[4.4-1]*/
	file_table.tape.density, file_table.tape.den_6250 = "0"b;

/*[4.4-1]*/
	if num_binary = 1600			/*[4.4-1]*/
	then file_table.tape.density = "1"b;		/*[4.4-1]*/
	else if num_binary = 6250			/*[4.4-1]*/
	then file_table.tape.den_6250 = "1"b;

	go to ret;

action (49):					/* apply tape-options; catalogue-name */
	if sk_ind
	then go to ret;

	if alphanum_lit.type = 3			/* alphanumeric liteal */
	then call enter_key (112);
	else if user_word.type = 8			/* data-name */
	then do;
		call enter_key (12);
	     end;

	go to ret;

action (50):
	if clause_num < last_clause
	then clause_order = 1;

	last_clause = clause_num;

	go to ret;

action (51):					/* same clause */
	if same_type = 0
	then go to ret;
	else go to SMN (same_type);

SMN (1):						/* same record area clause */
	file_ptr -> file_table.same_rec_clause = samerecct;

	go to SMN1;

SMN (2):						/* same sort area clause */
	file_ptr -> file_table.same_sort_clause = samesct;

	go to SMN1;

SMN (3):						/* same sort-merge area clause */
	go to SMN1;

SMN (4):						/* same area clause */
	file_ptr -> file_table.same_area_clause = samect;

	go to SMN1;

SMN1:
	file_ptr -> file_table.same_file = "1"b;

	call cobol_vdwf_dget (cobol_com_fileno, com_status, file_ptr, common_recsize, com_io_key);

	go to ret;

action (52):					/* object is decimal-point */
	obj_com = "0"b;

	go to ret;

action (53):					/* move table to alphabet entry */
	call init_alpha;

	alphabet_name.one_one = one_one_bit;
	alf_size = ord_num;

	if one_one_bit | dup_alpha_value
	then alphabet_name.onto = "1"b;

	alphabet_name.hi_value = addr (ord_num) -> ch.ch4;
	alphabet_name.hival_char = addr (high_value_value) -> ch.ch4;

	orig_alf_size = alf_size;

	do i = 0 by 1 to nat_alf_size;

	     if nat_bits (i) = "0"b
	     then do;
		     tran_tab (i) = alf_size;
		     alf_size = alf_size + 1;
		end;

	end;

	if alf_size ^= orig_alf_size
	then alphabet_name.hi_value = addr (alf_size) -> ch.ch4;

	if nat_alf_size < 511
	then do i = nat_alf_size + 1 by 1 to 511;

		if nat_bits (i) = "0"b
		then do;
			tran_tab (i) = alf_size;
			alf_size = alf_size + 1;
		     end;

	     end;

	call set_table;

	go to ret;

set_table:
     proc;					/* define table in alphabet def */

declare	(table_ptr, tran_ptr)
			ptr;
declare	table		(0:511) char (1) based (table_ptr);
declare	1 tran		(0:511) based (tran_ptr),
	  2 ch1		char (1),
	  2 ch2		char (1),
	  2 ch3		char (1),
	  2 ch4		char (1);

declare	i		fixed bin;

	table_ptr = addr (alphabet_name.table);
	tran_ptr = addr (tran_tab (0));

	do i = 0 by 1 to 511;

	     table (i) = tran.ch4 (i);

	end;

     end;

action (54):
	fixed_common.descriptor = "01"b;

	go to ret;

action (55):
	fixed_common.descriptor = "10"b;

	go to ret;

action (56):
	;
intpos:						/* assumes ft_ptr set to correct file */
	if file_ptr ^= null ()
	then do;
		file_ptr -> file_table.mult_position_no = num_binary;

		call cobol_vdwf_dput (cobol_com_fileno, com_status, file_ptr, common_recsize, com_io_key);

	     end;

	go to ret;

/* store the implicit position number of the current file on multiple file tape */

action (57):
	;					/* assumes ft_ptr set to correct file */

	file_table.mult_position_no = temp1;

	call cobol_vdwf_dput (cobol_com_fileno, com_status, ft_ptr, common_recsize, com_io_key);

	go to ret;				/* increment the MULTIPLE FILE position number in temp1 by 1 */

action (58):
	;

	if file_ptr ^= null ()
	then file_ptr -> file_table.mult_position_no = temp1;

	go to ret;

/* load the success exit of the current syntax line in the line storage area with the relative 
address of the first syntax line of the recovery routine currently being executed */

action (59):
	;

	current_line = recovaddress;
	kill_diag = 1;				/* suppress diag */

	go to loop;

/* store the relative address of the first syntax line of the recovery routine which is being entered */

action (60):
	;

	recovaddress = current_line;

	go to ret;				/* perform necessary termination functions */

action (61):
	;

	if fixed_common.file_count > 0
	then cobol_$misc_end_ptr = addrel (cobol_$misc_end_ptr, file_table_size);

	if pcs.type = 1 | pcs.type = 2 | pcs.type = 3
	then do;
		diag_item.number = 99;
		diag_item.size = 25;
		diag_item.param_at_end = "0"b;
		diag_item.line = pcs.line;
		diag_item.column = pcs.column;

		call cobol_c_list (diag1_ptr);

		pcs.type = 0;
	     end;
	else if pcs.type = 4
	then do;
		call set_iw_key (pcs.type, pcs.num);

		call set_offset (pcs.num - 9);

		call cobol_vdwf_sput (cobol_name_fileno, name_status, alpha_ptr, alphabet_name.size, name_key);

		diag_num = 103;
		call diag;

		if alphabet_name.iw_key ^= 11
		then fixed_common.prog_coll_seq = addr (name_key) -> fb;
	     end;

	return;

action (62):					/* character size is ... */
	alphabet_name.char_size = num_binary;

	go to ret;

action (63):					/* program collating sequence clause: save alphabet name */
	alf_type = left.type;
	alf_name = left.name;
	alf_num = left.number;
	go to ret;

/* store the procedure segment size in common */
action (64):
	objsign = alphanum_lit.string;

	go to ret;

action (65):					/** special-names paragraph, execute clause */
	if clause_num ^= 0
	then go to SNP (clause_num);

	go to ret;

SNP (1):						/* switch clause */
	go to dup_order;

SNP (2):						/* device clause */
	go to dup_order;

SNP (3):						/* alphabet clause */
	addr (alphabet_name.prev_rec) -> fb = fixed_common.alphabet_offset;

	call cobol_vdwf_sput (cobol_name_fileno, name_status, alpha_ptr, alphabet_name.size, name_key);

	fixed_common.alphabet_offset = addr (name_key) -> fb;
	if dup_alf_value
	then do;
		diag_num = 157;
		call diag;
	     end;
	if pcs.type ^= 0
	then do;
		if alphabet_name.name = pcs.name
		then do;
			pcs.type = 10;
			if alphabet_name.iw_key ^= 11
			then fixed_common.prog_coll_seq = addr (name_key) -> fb;

		     end;
	     end;

	go to dup_order;

SNP (4):						/*currency sign clause */
	if currsign ^= " "
	then fixed_common.currency = currsign;
	if objsign ^= " "
	then fixed_common.object_sign = objsign;

	go to dup_order;

SNP (5):						/* decimal-point clause */
	fixed_common.dec_comma = dec_com;
	fixed_common.obj_dec_comma = obj_com;

	go to dup_order;

init_alpha:
     proc;

	i = length (left.name);

	alphabet_name.size = i + alphabet_name_size;
	alphabet_name.line = left.line;
	alphabet_name.column = left.column;
	alphabet_name.string_ptr = null ();
	alphabet_name.prev_rec = null ();
	alphabet_name.name_size = i;
	alphabet_name.name = left.name;

     end;

action (66):					/* alphabet_name is name */
	clause_num = 3;

	call set_iw_key (right.type, right.number);

	call set_offset (alphabet_name.iw_key);

	go to ret;

set_iw_key:
     proc (type, number);

declare	(type, number)	fixed bin;

	call reset_alpha;

	call init_alpha;

	if type = 4
	then do;
		alphabet_name.iw_key = number - 9;	/* implementor name */
	     end;
	else do;
		alphabet_name.iw_key = number;	/* standard name */
	     end;


	if alphabet_name.iw_key > 0 & alphabet_name.iw_key < 10
	then go to STD (alphabet_name.iw_key);
	else go to STD0;

STD (1):						/* NATIVE */
	alphabet_name.iw_key = 11;

	go to STD0;

STD (2):						/* STANDARD-1 */
	alphabet_name.iw_key = 11;

	go to STD0;

STD (3):						/* STANDARD-2 */
	alphabet_name.iw_key = 11;

	go to STD0;

STD0:
     end;

set_offset:
     proc (key);

declare	key		fixed bin;

	if key > 11
	then go to IMP (key - 11);
	else return;
IMP (1):						/*ebcdic */
	call cobol_set_type40_$ebcdic (alpha_ptr);

	go to IMP0;

IMP (2):						/* gbcd */
	go to IMP0;

IMP (3):						/* hbcd */
	go to IMP0;

IMP (4):						/* ibcd */
	go to IMP0;

IMP (5):						/* jis */
	go to IMP0;

IMP0:
     end;

action (67):					/* left operand, alphabet clause */
	if reserved_word.type = 1
	then do;
		key = reserved_word.key;

		if key = 166
		then alf_range = 1;			/* is_word("thru") */
		else if key = 96
		then alf_range = 2;			/* is_word("also") */
		else alf_range = 0;

	     end;

	else alf_range = 0;

	go to ret;

char_spec:
     proc (p);

declare	p		ptr;

declare	1 char_spec	based (p),
	  2 type		fixed bin,
	  2 value		fixed bin,
	  2 char		char (256) varying;

	if numeric_lit.type = 2
	then do;
		char_spec.type = 1;
		char_spec.value = fixed (numeric_lit.literal) - 1;

		if char_spec.value < 0 | char_spec.value > nat_alf_size
		then do;
			diag_num = 102;
			call diag;
		     end;

	     end;

	else if alphanum_lit.type = 3
	then do;
		char_spec.type = 2;
		char_spec.char = alphanum_lit.string;

		if fixed_common.comp_level < "5" & alphanum_lit.lit_size > 1
		then call lev_diag (124, record.header.line, record.header.column);

	     end;

	else if reserved_word.type = 1
	then do;
		key = reserved_word.key;

		if key = 180
		then char_spec.type = 3;		/* is_word("zero") */
		else if key = 192
		then char_spec.type = 4;		/* is_word("space") */
		else if key = 235
		then char_spec.type = 5;		/* is_word("quote") */
		else if key = 221
		then char_spec.type = 6;		/* is_word ("high-value") */
		else if key = 229
		then char_spec.type = 7;		/* is_word("low-value") */

		else char_spec.type = 0;

	     end;

	else char_spec.type = 0;


     end;

action (68):					/* right operand, alphabet clause */
	call char_spec (addr (right_char_spec));

	go to ret;

action (69):					/** unary ALSO */
	call range_spec;
	alf_range = 3;

	go to ret;

action (70):					/* range specification, alphabet clause */
	call range_spec;				/*[4.0-7]*/
	alf_range = 1;
	go to ret;

range_spec:
     proc;

/* range specification */

	go to AR (alf_range);

AR (0):						/* illegal */
	go to AR1;

AR (1):						/* left THRU right */
	call range;

	go to AR1;

AR (2):						/* left ALSO right */
	call also (addr (left_char_spec));
	call also (addr (right_char_spec));

	go to AR1;

AR (3):						/* ALSO right */
	call also (addr (right_char_spec));

AR1:
     end;

also:
     proc (p);

declare	p		ptr;
declare	(loc, L, i)	fixed bin;

declare	1 char_spec	based (p),
	  2 type		fixed bin,
	  2 value		fixed bin,
	  2 char		char (256) varying;

	go to AL (char_spec.type);

AL (0):						/* illegal */
	return;

AL (1):						/* numeric literal */
	go to AL1;

AL (2):						/* alphanumeric literal */
	L = length (char_spec.char);
	call setup;

	do i = 1 by 1 to L;

	     char1 = substr (char_spec.char, i, 1);
	     call set_also_char (fixed (char1_ptr -> bit9));

	end;

	return;

AL (3):						/* is_word("zero") */
	char_spec.value = index (coll_seq, "0");

	go to AL1;

AL (4):						/* is_word("space") */
	char_spec.value = index (coll_seq, " ");

	go to AL1;

AL (5):						/* is_word("quote") */
	char_spec.value = index (coll_seq, """");

	go to AL1;

AL (6):						/* is_word("high-value") */
	char_spec.value = 128;

	go to AL1;

AL (7):						/* is_word("low-value") */
	char_spec.value = 1;

	go to AL1;

AL1:
	call setup;
	call set_also_char (char_spec.value);

     end;

setup:
     proc;

	one_one_bit = "1"b;

	ord_num = curr_ord_num;

     end;

set_also_char:
     proc (loc);

declare	loc		fixed bin;

/*[4.0-7]*/
	if loc < 0 | loc > nat_alf_size + 1
	then return;

	if nat_bits (loc)
	then dup_alf_value = "1"b;

	else do;
		nat_bits (loc) = "1"b;
		tran_tab (loc) = ord_num;

		if ord_num >= ord_max
		then do;
			high_value_value = loc;
			ord_max = ord_num;
		     end;

		ord_num = ord_num + 1;
	     end;

     end;

set_char:
     proc (loc);

declare	loc		fixed bin;

	if nat_bits (loc)
	then dup_alf_value = "1"b;
	else do;
		nat_bits (loc) = "1"b;
		tran_tab (loc) = ord_num;
		ord_num = ord_num + 1;

		high_value_value = loc;
	     end;

     end;

range:
     proc;

declare	(L, i, loc)	fixed bin;

	ord_num = curr_ord_num + ord_max;

	go to TL (left_char_spec.type);

TL (0):						/* illegal */
	return;

TL (1):						/* left side is numeric literal*/
	left_number = left_char_spec.value;

	go to T1;

TL (2):						/* left side is alphanumeric literal */
	L = length (left_char_spec.char);
	char1 = substr (left_char_spec.char, L, 1);
	left_number = fixed (char1_ptr -> bit9);

	if L > 1
	then do i = 1 by 1 to L - 1;

		char1 = substr (left_char_spec.char, i, 1);
		loc = fixed (char1_ptr -> bit9);
		call set_char (loc);

	     end;

	go to T1;

TL (3):						/* left side is zero */
	left_number = index (coll_seq, "0");

	go to T1;

TL (4):						/* left side is space */
	left_number = index (coll_seq, " ");

	go to T1;

TL (5):						/* left side is quote */
	left_number = index (coll_seq, """");

	go to T1;

TL (6):						/* left side is high-value */
	left_number = 128;

	go to T1;

TL (7):						/* left-side is low-value */
	left_number = 1;

	go to T1;

T1:
	go to TR (right_char_spec.type);

TR (0):
	right_number = left_number;

	call emit_range;

	go to T2;

TR (1):						/* right side is numeric literal */
	right_number = right_char_spec.value;
	call emit_range;

	go to T2;

TR (2):						/* right side is alphanumeric literal */
	L = length (right_char_spec.char);
	char1 = substr (right_char_spec.char, 1, 1);
	right_number = fixed (char1_ptr -> bit9);
	call emit_range;

	if L > 1
	then do i = 2 by 1 to L;

		char1 = substr (right_char_spec.char, i, 1);
		loc = fixed (char1_ptr -> bit9);
		call set_char (loc);

	     end;

	go to T2;

TR (3):						/* right side is zero */
	right_number = index (coll_seq, "0");
	call emit_range;

	go to T2;


TR (4):						/* right side is space */
	right_number = index (coll_seq, " ");
	call emit_range;

	go to T2;

TR (5):						/* right side is quote */
	right_number = index (coll_seq, """");
	call emit_range;

	go to T2;

TR (6):						/* right side is high-value */
	right_number = 128;
	call emit_range;

	go to T2;

TR (7):						/* right side is low-value */
	right_number = 1;
	call emit_range;

	go to T2;


T2:
	curr_ord_num = ord_num;
	ord_max = 0;

     end;


emit_range:
     proc;

	if left_number < 0 | left_number > nat_alf_size | right_number < 0 | right_number > nat_alf_size
	then return;

	if left_number <= right_number
	then do i = left_number by 1 to right_number;

		call set_char (i);

	     end;

	else do i = left_number by -1 to right_number;

		call set_char (i);

	     end;

     end;


action (71):
	if user_word.type = 8
	then do;
		file_table.catalogued = 3;
		call enter_key (7);
	     end;
	else if alphanum_lit.type = 3
	then file_table.catalogued = 2;

	go to ret;

action (72):
	right_char_spec.type = 0;

	call range_spec;

	go to ret;

action (73):
	org = file_ptr -> file_table.organization;

	mod_num = lev1_mod (org);

	current_line = current_line + org + 1;

	go to loop;

action (74):
	org = file_table.organization;

	mod_num = lev2_mod (org);

	current_line = current_line + org + 1;

	go to loop;

action (75):
	call cobol_vdwf_dget (cobol_com_fileno,		/* [3.0-1] */
	     com_status,				/* [3.0-1] */
	     work_ptr,				/* [3.0-1] */
	     common_recsize,			/* [3.0-1] */
	     fixed_common.last_file_key /* [3.0-1] */);	/* [3.0-1] */

	work_ptr -> file_key.duplicates = "1"b;		/* [3.0-1] */

	call cobol_vdwf_dput (cobol_com_fileno,		/* [3.0-1] */
	     com_status,				/* [3.0-1] */
	     work_ptr,				/* [3.0-1] */
	     common_recsize,			/* [3.0-1] */
	     fixed_common.last_file_key /* [3.0-1] */);	/* [3.0-1] */
	file_table.dupl_alt = "1"b;			/* [3.0-5] */

	go to ret;				/* [3.0-1] */

action (76):					/*[4.0-8]*/
	current_line = current_line + same_type + 1;

	go to loop;

action (77):					/* issue diagnostic m = 2srt(131) with mod_num =  6 */
	if "4" > fixed_common.comp_level
	then do;
		mod_num = 6;			/* 2srt */
		call lev_diag (131, rec_loc.line, rec_loc.column);
						/* SAME RECORD AREA */
	     end;

	go to ret;

action (78):					/* set sort_name to show that file name is a sort file */
						/*[4.2-1]*/
	sort_name = "1"b;

	go to ret;

action (79):
	property (18) = "1"b;			/* indicate record key */
	file_table.record_key = "1"b;
	call enter_key (2);

	go to ret;

/* catalogue name clause */

/* construct an entry in common for the current file status item name */

action (80):					/* assumes ft_ptr set to correct file */
						/* indicate file status item name */
	file_table.file_status = "1"b;
	call enter_key (3);

	go to ret;
action (84):
	go to dup_order;

action (85):					/* begin the mnemonic-name record for this item */
	mnemonic_name.class = class24;
	mnemonic_name.on_status = "0"b;
	mnemonic_name.off_status = "0"b;

	go to ret;

action (92):					/* same clause */
						/*[5.0-1]*/
	string (org_vector) = "0"b;

/*[5.0-1]*/
	if reserved_word.type ^= 1			/*[5.0-1]*/
	then do;
		same_type = 4;			/*[5.0-1]*/
		samect = samect + 1;		/*[5.0-1]*/
		go to ret;			/*[5.0-1]*/
	     end;

	key = reserved_word.key;

	if key = 148				/* is_word("record") */
	then do;
		same_type = 1;
		samerecct = samerecct + 1;
		fixed_common.sra_clauses = samerecct;

/*[5.0-1]*/
		rec_loc.line = record.header.line;	/*[5.0-1]*/
		rec_loc.column = record.header.column;
	     end;
	else if key = 49				/* is_word("sort) */
	then do;
		same_type = 2;
		samesct = samesct + 1;
	     end;
	else if key = 598				/* is_word("sort-merge") */
	then do;
		same_type = 3;
		samesmct = samesmct + 1;
	     end;
	else do;
		same_type = 4;
		samect = samect + 1;
	     end;

	go to ret;

/* increment the sequential number of the current SAME AREA clause by 1, and set temp1, temp2, and 
				temp3 to zero */

action (93):
	samect = samect + 1;
	temp1 = 0;
	temp2 = 0;
	temp3 = 0;

	go to ret;

/* build qualifier record in common for file key or file status name being processed */

action (95):
	;					/* assumes fkey_ptr set to correct key or file status name */

	temp4 = user_word.length + key_qual_size;
	qual_ptr = addr (file_key_area);
	qual_rec.next = "00000";
	qual_rec.size = user_word.length;
	qual_rec.name = user_word.word;
	common_recsize = temp4;			/* temp4 contains size of	qual_rec. */

	call cobol_vdwf_sput (cobol_com_fileno, com_status, qual_ptr, common_recsize, common_key);

	if qual_sw = "0"b
	then do;					/* is this 1st	qual?*/

		call cobol_vdwf_dget (cobol_com_fileno, com_status, work_ptr, common_recsize,
		     fixed_common.last_file_key);	/* get subject */

		work_ptr -> file_key.qual = common_key; /* link to current qual*/

		call cobol_vdwf_dput (cobol_com_fileno, com_status, work_ptr, common_recsize,
		     fixed_common.last_file_key);

	     end;

	else do;					/* two or more qual. */

		call cobol_vdwf_dget (cobol_com_fileno, com_status, work_ptr, common_recsize, prev_qual_key);
						/* get qual.	*/

		work_ptr -> qual_rec.next = common_key; /* now link to current qual. */

		call cobol_vdwf_dput (cobol_com_fileno, com_status, work_ptr, common_recsize, prev_qual_key);

	     end;

	prev_qual_key = common_key;			/* save current qual. rec. */
	qual_sw = "1"b;

	go to ret;

action (96):					/* file table to variable common */
	if file_table.organization = 2 & file_table.access = 0
	then file_table.access = 1;
	if ^ignore_file
	then call emit_ft;

	go to ret;

action (97):					/* type 17 name table entry, device number */
	addr (mnemonic_name.class) -> bit8 = "0"b;

	if left.number >= 210
	then mnemonic_name.class.printer_control = "1"b;
	else do;

		if left.number ^= 0
		then left.number = left.number - 8;

		go to RN (left.number);

RN (0):						/* illegal */
		go to RN1;

RN (1):						/* SYSIN */
		mnemonic_name.class.accept_device = "1"b;

		go to RN1;

RN (2):						/* SYSOUT */
		mnemonic_name.class.display_device = "1"b;

		go to RN1;

RN (3):						/* CONSOLE */
		mnemonic_name.class.accept_device = "1"b;
		mnemonic_name.class.display_device = "1"b;

		go to RN1;

RN1:
	     end;
	call nm (addr (right), left.number);

	go to ret;

action (98):					/* file control paragraph: determine clause number */
	file_qual = 0;
	key = reserved_word.key;

	if key = 509
	then clause_num = 1;			/* is_word("assign") */
	else if key = 181
	then clause_num = 2;			/* is_word("organization") */

	else if key = 589				/* is_word("reserve") */
	then clause_num = 3;

	else if key = 501
	then clause_num = 4;			/* is_word("access") */
	else if key = 108
	then clause_num = 6;			/* is_word("file") */
	else if key = 247
	then clause_num = 6;			/* is_word("status") */
	else if key = 331
	then clause_num = 8;			/* is_word("catalog-name") */

	else if key = 85
	then /* is_word("ssf") */
	     do;
		clause_num = 9;
		ssf_ind = "1"b;
	     end;

	else if key = 272
	then /* is_word("flr") */
	     do;
		clause_num = 9;
		flr_ind = "1"b;
	     end;

	else if key = 201
	then /* is_word("vlr") */
	     do;
		clause_num = 9;
		vlr_ind = "1"b;
	     end;

	else if key = 413
	then /* is_word("bsn") */
	     do;
		clause_num = 9;
		bsn_ind = "1"b;
	     end;

	else if key = 601
	then /* is_word("spanned") */
	     do;
		clause_num = 9;
		span_ind = "1"b;
	     end;

	else if key = 329
	then clause_num = 10;			/* is_word("process-area") */
	else if key = 327
	then clause_num = 11;			/* is_word("interchange") */
	else if key = 167
	then clause_num = 12;			/* is_word("relative") */

	else if key = 507				/* is_word("alternate") */
	then clause_num = 7;

	else if key = 148
	then clause_num = 5;			/* is_word("record") */
	else if key = 129
	then clause_num = 13;			/* is_word("no") */
	else clause_num = 0;

/*[4.0-5]*/
	if clause_num ^= 0
	then go to SL (clause_num);			/*[4.0-5]*/
SL (1):
	val = 7;
	go to SLL;
SL (2):
	val = 1;
	go to SLL;
SL (3):
	val = 3;
	go to SLL;
SL (4):
	val = 8;
	go to SLL;
SL (5):
	val = 4;
	rec_key = "1"b;
	go to SLL;
SL (6):
	val = 9;
	go to SLL;
SL (7):
	val = 5;
	go to SLL;
SL (8):
	go to ret;
SL (9):
	go to ret;
SL (10):
	go to ret;
SL (11):
	go to ret;
SL (12):
	val = 10;
	rel_key = "1"b;
	go to SLL;
SL (13):
	go to ret;

/*[4.0-5]*/
/*[4.0-5]*/
SLL:						/*[4.0-5]*/
						/*[4.0-5]*/
	source_pos.line (val) = record.header.line;	/*[4.0-5]*/
	source_pos.column (val) = record.header.column;
	go to ret;				/*[4.0-5]*/


action (125):					/* construct a file key record for the status key 3 item */
	temp6 = 4;				/* indicate status key 3 name in file status clause */
	file_table.extra_status = "1"b;
	call enter_key (4);

	go to ret;

action (133):					/* diagnose any contradictions in previous select clause */
	if file_table.organization = 0
	then file_table.organization = 1;
	if file_table.buffers = 0
	then file_table.buffers = 1;

/*[4.0-1]*/
	if file_table.device = 7			/* preattached */
						/*[4.0-1]*/
	then do;
		file_table.optional = "0"b;		/*[4.0-1]*/
		file_table.external = "1"b;		/*[4.0-3]*/
		file_table.detach = "1"b;		/*[4.0-1]*/
	     end;


	if file_table.optional
	then if file_table.organization ^= 1
	     then do;
		     diag_num = 110;
		     call diag;

		     if fixed_common.comp_level < "5"
		     then call lev_diag (9, record.header.line, record.header.column);

		end;

	if file_table.access > 1
	then if file_table.organization ^= 2 & file_table.organization ^= 3
	     then do;
		     diag_num = 109;
		     call diag;

		     file_table.access = 1;
		end;

	if (file_table.device ^= 1)
	then if file_table.record_prefix = 0
	     then file_table.record_prefix = 2;

	do i = 1 to 21;

	     if property (i) ^= "0"b
	     then do;

		     vector_temp = vector & array (i);

		     if vector_temp ^= "0"b
		     then do;

			     diag_item.line = record.header.line;
			     diag_item.column = record.header.column;
			     diag_item.number = 9;
			     diag_item.param_at_end = "1"b;
			     diag_item.image_size = word_array.word_size (i) + 5;
			     diag_item.image = word_array.word (i);

			     substr (diag_item.image, word_array.word_size (i) + 1, 5) = " and ";

			     do j = 1 to 21;

				if temp_bit (j) ^= "0"b
				then do;

					substr (diag_item.image, word_array.word_size (i) + 6,
					     word_array.word_size (j)) = word_array.word (j);

					diag_item.image_size =
					     word_array.word_size (i) + 5 + word_array.word_size (j);

					diag_item.size = 32 + diag_item.image_size;

					call cobol_c_list (diag1_ptr);

				     end;

			     end;

			end;

		end;
	end;

	go to ret;

action (162):					/* determine number of default section clause */
	call def_clause_num;

	go to ret;

def_clause_num:
     proc;

	if reserved_word.type = 1
	then do;
		key = reserved_word.key;

		if key = 122
		then clause_num = 2;		/* is_word("leading") */
		else if key = 255
		then clause_num = 2;		/* is_word("trailing") */
		else if key = 106
		then clause_num = 3;		/* is_word("comp") */
		else if key = 1
		then clause_num = 5;		/* is_word("accept") */
		else if key = 42
		then clause_num = 6;		/* is_word("display") */
		else if key = 251
		then clause_num = 1;		/* is_word("symbolic") */
		else if key = 131
		then clause_num = 4;		/* is_word("numeric") */
		else clause_num = 0;

	     end;

	else if user_word.type = 8
	then do;
		key = cobol_imp_word$imp_word (p2);

		if key = 11
		then clause_num = 6;		/* IS_WORD("console") */
		else if key = 10
		then clause_num = 6;		/* IS_WORD("sysout") */
		else if key = 1000
		then clause_num = 4;		/* is_word("temp") */
		else clause_num = 0;

	     end;

	else clause_num = 0;

     end;

action (163):					/* initialize for default section */
	lead_trail = 0;				/* sign is trailing */
	sep_sign = 0;				/* sign is non-separate */
	acc_dev_num = 0;				/* accept device is sysin */
	disp_dev_num = 0;				/* display device is sysout */
	int_res = 30;				/* intermediate results to 30 digits */
	queue_name = 0;				/* symbolic queue is omitted */
	comp_type = 0;				/* default comp is display */

	clause_bits = "0"b;
	last_clause = 0;
	clause_order = 0;

	go to ret;

action (164):					/* determine accept device number */
	key = cobol_imp_word$device_name (p2);

	if key = 1
	then acc_dev_num = 0;			/* IS_WORD("sysin") */
	else if key = 3
	then acc_dev_num = 1;			/* IS_WORD("console") */
	else acc_dev_num = 0;

	go to ret;

action (165):					/* determine display device number */
	key = cobol_imp_word$device_name (p2);

	if key = 2
	then disp_dev_num = 0;			/* IS_WORD("sysout") */
	else if key = 3
	then disp_dev_num = 1;			/* IS_WORD("console") */
	else disp_dev_num = 0;

	call def_clause_num;

	go to ret;

action (166):
	go to ret;

action (167):					/* determine message queue number */
	key = reserved_word.key;

	if key = 203
	then queue_name = 0;			/* is_word("omitted") */
	else if key = 126
	then queue_name = 1;			/* is_word("message") */
	else queue_name = 0;

	go to ret;

action (168):					/* initialize for id paragraphs */
	clause_bits = "0"b;
	last_clause = 0;
	clause_order = 0;


	go to ret;

action (169):					/* default section clause */
	if clause_num ^= 0
	then go to D (clause_num);
	else go to ret;

D (1):						/* symbolic queue clause */
	go to dup_order;

D (2):						/* display sign clause */
	if lead_trail ^= 0
	then substr (dst, 2, 1) = "1"b;
	else substr (dst, 3, 1) = "1"b;

	if sep_sign ^= 0
	then if substr (dst, 2, 2) = "10"b
	     then substr (dst, 1, 3) = "100"b;
	     else substr (dst, 1, 3) = "011"b;

	if dst ^= "0"b
	then fixed_common.default_sign_type = dst;

	go to dup_order;

D (3):						/* default_comp_clause */
	if comp_type ^= 0
	then do;
		if comp_type < 10
		then do;
			def_ptr = addr (fixed_common.comp_defaults);
			def_ptr -> bit9 = "0"b;
			addr (fixed_common.disp_defaults) -> bit8 = "0"b;
						/*[4.4-3]*/
			substr (def_ptr -> bit9, comp_type, 1) = "1"b;
		     end;
		else do;
			def_ptr = addr (fixed_common.disp_defaults);
			def_ptr -> bit8 = "0"b;
			addr (fixed_common.comp_defaults) -> bit9 = "0"b;
						/*[4.4-3]*/
			substr (def_ptr -> bit8, comp_type - 10, 1) = "1"b;
		     end;
	     end;

	go to dup_order;

D (4):						/* temp_clause */
	fixed_common.default_temp = int_res;

	go to ret;

D (5):						/* accept_device clause */
	fixed_common.accept_device = acc_dev_num;

	go to dup_order;

D (6):						/* display device clause */
	fixed_common.display_device = disp_dev_num;

	go to dup_order;

dup_order:
	if clause_num < last_clause
	then clause_order = 1;

	last_clause = clause_num;

	go to ret;

action (170):					/* default sign is leading */
	call def_clause_num;
	lead_trail = 1;

	go to ret;

action (171):					/* default_sign is trailing */
	call def_clause_num;
	lead_trail = 0;

	go to ret;

action (172):					/* sign is separate */
	sep_sign = 1;

	go to ret;

action (173):					/* [3.0-3] issue lev diag for 169-missing period after division */
	if fixed_common.comp_level < "5"
	then call lev_diag (169, record.header.line, record.header.column);

	go to ret;

action (174):					/*[4.4-2]*/
	mod_num = 0;
	go to ret;

action (175):					/*[4.4-2]*/
	call sav_lin_col;
	go to ret;

action (176):					/*[4.4-2]*/
	qualif = "1"b;
	go to ret;

action (177):					/*[4.4-2]*/
	if fixed_common.comp_level < "3"		/*[4.4-2]*/
	then if qualif				/*[4.4-2]*/
	     then call lev_diag (5, save.line, save.column);
	go to ret;

/*[5.0-1]*/

action (178):					/* SAME AREA clause */
	go to SA (org);

SA (1):						/* seq file */
	mod_num = 0;
	go to SA0;

SA (2):						/* rel file */
	call sa_mess (2, 17);
	go to SA0;

SA (3):						/* inx file */
	call sa_mess (3, 19);
	go to SA0;

SA (4):						/* illegal */
	go to SA0;

SA (5):						/* str file */
	call sa_mess (5, 25);
	go to SA0;
SA0:
	go to ret;

declare	org_vector	(5) bit (1);

declare	1 same_loc,
	  2 line		fixed bin,
	  2 column	fixed bin;
dcl	level_num		(26) char (1)
			init ("1", "3", "1", "3", "3", "4", "2", "4", "2", "4", "2", "3", "2", "3", "1", "3", "2",
			"3", "4", "4", "4", "4", "3", "3", "5", "5");

sa_mess:
     proc (org_num, md_num);

declare	(org_num, md_num)	fixed bin;

	if org_vector (org_num)
	then return;

	org_vector (org_num) = "1"b;
	mod_num = md_num;

	if level_num (md_num) > fixed_common.comp_level
	then call lev_diag (211, same_loc.line, same_loc.column);

     end;

action (179):					/* SAME RECORD AREA clause */
	go to SRA (org);

SRA (1):						/* seq file */
	if org_vector (org)
	then go to ret;

	org_vector (org) = "1"b;
	mod_num = 16;
	if "3" > fixed_common.comp_level
	then call lev_diag (131, rec_loc.line, rec_loc.column);
	go to SRA0;

SRA (2):						/* rel file */
	call sra_mess (2, 17);
	go to SRA0;

SRA (3):						/* inx file */
	call sra_mess (3, 19);
	go to SRA0;

SRA (4):						/* illegal */
	go to SRA0;

SRA (5):						/* str file */
	call sra_mess (5, 25);
	go to SRA0;

SRA0:
	go to ret;

declare	1 rec_loc,
	  2 line		fixed bin,
	  2 column	fixed bin;

sra_mess:
     proc (org_num, md_num);

declare	(org_num, md_num)	fixed bin;

	if org_vector (org_num)
	then return;

	org_vector (org_num) = "1"b;
	mod_num = md_num;

	if level_num (md_num) > fixed_common.comp_level
	then call lev_diag (211, same_loc.line, same_loc.column);

	md_num = md_num + 1;
	mod_num = md_num;

	if level_num (md_num) > fixed_common.comp_level
	then call lev_diag (131, rec_loc.line, rec_loc.column);

     end;

sav_lin_col:
     proc;

/*[4.4-2]*/
	save.line = record.header.line;
	save.column = record.header.column;		/*[4.4-2]*/
	qualif = "0"b;
     end;

dtb:
     proc;
	num_binary = fixed (numeric_lit.literal);
     end;

/*[5.0-1]*/
declare	seg_limit		fixed bin static internal;

get_seg_limit:
     entry returns (fixed bin);

/*[5.0-1]*/
	return (seg_limit);


/*[4.2-1]*/
dcl	sort_name		bit (1),
	cobol_res_words$check_sort_list
			entry (char (*)) returns (bit (1));
declare	LEV		char (1);

declare	lev1_org		(6) char (1) init ("0", "2", "4", "0", "0", "3");
declare	lev2_org		(6) char (1) init ("3", "3", "4", "0", "5", "4");

/*[4.0-5]*/
dcl	dynamic_acc	bit (1),
	val		fixed bin;
declare	1 source_pos	(10),
	  2 line		fixed bin,
	  2 column	fixed bin;

declare	lev1_mod		(6) fixed bin init (15, 17, 19, 0, 25, 5);
declare	lev2_mod		(6) fixed bin init (16, 18, 20, 0, 26, 6);

declare	(mod_num, act_num, org)
			fixed bin;

/*[4.2-2]*/
declare	1 dyn,					/*[4.2-2]*/
	  2 line		fixed bin,		/*[4.2-2]*/
	  2 column	fixed bin;

/*[4.2-2]*/
declare	LEV_NUM		char (1),
	MOD_NUM		fixed bin;

declare	(addr, addrel, index, null, rel, substr, unspec, fixed, char, length, size, string)
			builtin;
declare	(collate)		builtin;


dcl	1 qual_rec	based (qual_ptr),
	  2 next		char (5),
/******** new i_o key ******/
	  2 size		fixed bin,
	  2 name		char (0 refer (qual_rec.size));

/* general form of internal record */
/* current minpral item buffer */
dcl	1 record		based (p2),
	  2 header,
	    3 size	fixed bin,
	    3 line	fixed bin,
	    3 column	fixed bin,
	    3 type	fixed bin,
	  2 body		char (record.header.size - 16);

/* description of diagnostic item in input minpral */
dcl	1 message		based (p2),
	  2 header,
	    3 size	fixed bin,
	    3 line	fixed bin,
	    3 column	fixed bin,
	    3 type	fixed bin,		/* = 5 */
	  2 body,
	    3 run		fixed bin,
	    3 number	fixed bin,
	    3 info,
	      4 param_at_end
			bit (1),
	      4 replaces_token
			bit (1),
	      4 filler	bit (6),
	    3 length	fixed bin,
	    3 image	char (message.length);

/* type 5 structure used to construct diagnostics issued by idedsyn */
dcl	1 diag_item,				/* header */
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin,		/* body */
	  2 run		fixed bin,
	  2 number	fixed bin,
	  2 param_at_end	bit (1),
	  2 replace	bit (1),
	  2 filler	bit (6),
	  2 image_size	fixed bin,
	  2 image		char (29);

/*[4.4-2]*/
declare	qualif		bit (1);

/*[4.4-2]*/
declare	1 save,					/*[4.4-2]*/
	  2 line		fixed bin,		/*[4.4-2]*/
	  2 column	fixed bin;

declare	1 lev_diag_item,
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin,
	  2 run		fixed bin,
	  2 number	fixed bin,
	  2 module	fixed bin;

/* external entry declarations */
dcl	cobol_swf_get	entry (ptr, bit (32), ptr, fixed bin) ext;
dcl	cobol_vdwf_dput	entry (ptr, bit (32), ptr, fixed bin, char (5)) ext;
dcl	cobol_vdwf_dget	entry (ptr, bit (32), ptr, fixed bin, char (5)) ext;
dcl	cobol_vdwf_sput	entry (ptr, bit (32), ptr, fixed bin, char (5)) ext;
dcl	cobol_c_list	entry (ptr) ext;		/* called to print source images and diagnostics */
dcl	cobol_ided	entry (ptr, fixed bin) ext;	/* called to get syntax table 1st line */
dcl	n_reducs		fixed bin;

/*work area for io */
dcl	min1_status	bit (32);			/*minpral	file return code */
dcl	com_status	bit (32);			/*common file return code */
dcl	name_status	bit (32);			/*name_tbl file return code */
dcl	ft_size		fixed bin;		/*file table item size */
dcl	prev_qual_key	char (5);			/* previous qual_key record address */
dcl	last_prev_file_key	char (5);			/* last previous file_table address */
dcl	same_ptr_key	char (5);			/* same area previous file table address */
dcl	last_fkey_ptr	char (5);			/*address of last file_key record */
dcl	last_ft_ptr	ptr;			/* previous file table pointer */
dcl	file_key_type	fixed bin;		/* file key type saving area */
dcl	qual_sw		bit (1);			/* indicator	if qualifier exist */
dcl	com_io_key	char (5);			/*common_file io key */

/* work areas */
dcl	file_key_area	char (256);		/* work area for file key record */
declare	x		bit (8) based;
declare	class24		bit (24) based (addr (reserved_word.verb));

declare	ft_build_area	(500) fixed bin;		/* file table entry */

dcl	zero		char (18);		/* constant zero */
dcl	banchar		char (1);			/* banner character from apply clause saved here */
dcl	padchar		char (1);			/* padding character from apply clause saved here */
dcl	error		char (1);			/* set to "E" if run interrupted by io error */
declare	device_name_size	fixed bin;
declare	device_name	char (32) varying;
dcl	current_file_no	fixed bin;		/* same area file no */
						/* pointers */
dcl	name_ptr		ptr;			/* pointer to mnemonic-name record in common */
dcl	ft_ptr		ptr;			/* pointer to current file table record in common */
dcl	(work_ptr, save_ptr)
			ptr;
dcl	fkey_ptr		ptr;			/* pointer to current file key or file status record in common */
dcl	qual_ptr		ptr;			/* pointer to qualifier record in common */
dcl	same_ptr		ptr;			/* pointer to file table for previous file in current SAME [RECORD] AREA clause */
dcl	(diag1_ptr, diag2_ptr)
			ptr;			/* pointer to diag_item, passed to print routine */

/*work area for output item size */
dcl	file_table_size	fixed bin;		/*file table base */
dcl	type17_size	fixed bin;		/*mnemonic name item size*/
dcl	file_key_size	fixed bin;		/*key name itemsize:*/
dcl	key_qual_size	fixed bin;		/* qualifier itemsize:*/
						/* fixed binary work fields */
dcl	i		fixed bin;		/* counter for contradiction matrix action routine */
dcl	j		fixed bin;		/* counter for contradiction matrix action routine */
dcl	n		fixed bin;		/*pointer to the specified device type in device_name */
dcl	n1		fixed bin;		/* temp length of userword.body.word8 */
dcl	tempn1		fixed bin;		/* temp	field , used immed... thereby avail most anytime */
dcl	temp1		fixed bin;
dcl	temp2		fixed bin;
dcl	temp3		fixed bin;
dcl	temp4		fixed bin;		/* work area */
dcl	temp5		fixed bin;
dcl	temp6		fixed bin;		/* work area */
dcl	num_binary	fixed bin;		/* numeric literal binary value */
dcl	mrcsz		fixed bin;		/* minpral file record size */

declare	(samect, samerecct, samesct, samesmct, same_type)
			fixed bin init (0);
declare	(nat_alf_size, orig_alf_size)
			fixed bin;

dcl	mult_fil_no	fixed bin;
dcl	recovaddress	fixed bin;
dcl	addrform		fixed bin;		/* number identifying address format from apply clause saved here */
dcl	common_recsize	fixed bin;		/* size of record just read from common file */
dcl	(common_key, save_common_key)
			char (5);			/* record number of common record just read or to be read */
dcl	name_key		char (5);			/* bit strings */
dcl	rerunclock	bit (1);			/* set on if RERUN ... CLOCK-UNITS specified in program */
dcl	remarksbit	bit (1);
dcl	debugbit		bit (1);
dcl	optional_file	bit (1);			/* set on if OPTIONAL found in SELECT clause for a file */
dcl	external_file	bit (1);			/* set on if EXTERNAL found in SELECT clause for a file */
dcl	previous_valid_fkeys
			bit (1);
dcl	implnm_bit	bit (1);
dcl	ed_found		bit (1);			/* set on when ENVIRONMENT DIVISION header found */
dcl	console_name	bit (1);			/* set on when a mnemonic name for CONSOLE is found */
dcl	dec_is_com	bit (1);			/* set on when decimal-point is comma is found (NOT set when */
						/* decimal-point is decimal-point) */
dcl	dpass_sw		bit (1);			/* Set on when a special character (such as _ ) is detected */


/* structures associated with contradiction checking of select statement clauses */
/* the positional significance of the bits in the 18-bit string is:
		(1)	assign...H_RD
		(2)	assign...H_PR
		(3)	sequential organization
		(4)	relative organization
		(5)	indexed organization
		(6)	non-sequential access (either random or dynamic)
		(7)	device is printer
		(8)	device is card-reader
		(9)	device is card-punch
		(10)	device is tape
		(11)	standard record prefix
		(12)	ssf record prefix
		(13)	dof record prefix
		(14)	sysin
		(15)	sysout
		(16)	optional
		(17)	relative key
		(18)	record key					 
		(19) keyed organization
		(20) keyed key		
		(21) assign...H_SORT	*/
dcl	array		(21) bit (21);
dcl	property		(21) bit (1);
dcl	vector		bit (21) based (addr (property));
dcl	vector_temp	bit (21);
dcl	temp_bit		(21) bit (1) based (addr (vector_temp));
dcl	1 word_array	(21),
	  2 word_size	fixed bin,
	  2 word		char (12);


declare	fbarray		(100000) fixed bin based;
declare	bit8		bit (8) based;
declare	bit9		bit (9) based;
declare	bit512		bit (512) based;
declare	bit18		bit (18) based;
declare	bit36		bit (36) based;
declare	fb		fixed bin based;

declare	1 ch		based,
	  2 ch1		char (1),
	  2 ch2		char (1),
	  2 ch3		char (1),
	  2 ch4		char (1);

declare	options_bits	bit (18);

declare	(lead_trail, file_org, file_qual, opt_num, fq, ord_num, alf_range, ord_max, curr_ord_num, sep_sign, key,
	apply_num, max, left_number, right_number, wnum, comp_num, obj_comp_num, source_comp_num, alf_type, alf_size,
	alf_num, high_value_value, alphabet_name_size, cat_type, file_acc, last_clause, clause_order, clause_num,
	seg_lim, int_res, comp_name, source_comp_name, obj_comp_name, acc_dev_num, disp_dev_num, queue_name, comp_type)
			fixed bin;

declare	tran_tab		(0:511) fixed bin;
declare	nat_bits		(0:511) bit (1);

declare	coll_seq		char (128);

declare	1 indicators,
	  2 dec_com	bit (1),
	  2 dup_alf_value	bit (1),
	  2 ignore_file	bit (1),
	  2 rel_key	bit (1),
	  2 rec_key	bit (1),
	  2 one_one_bit	bit (1),
	  2 dup_alpha_value bit (1),
	  2 ssf_ind	bit (1),
	  2 flr_ind	bit (1),
	  2 vlr_ind	bit (1),
	  2 bsn_ind	bit (1),
	  2 sk_ind	bit (1),
	  2 span_ind	bit (1),
	  2 obj_com	bit (1);

declare	(file_ptr, alpha_ptr, def_ptr, char1_ptr)
			ptr;

declare	(clause_bits, switch_bits, defaults, dev_bits, alph_bits)
			bit (36);

declare	1 left,
	  2 type		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 number	fixed bin,
	  2 num		fixed bin,
	  2 name		char (32) varying;

declare	1 right,
	  2 type		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 number	fixed bin,
	  2 num		fixed bin,
	  2 name		char (32) varying;

declare	1 left_char_spec,
	  2 type		fixed bin,
	  2 value		fixed bin,
	  2 char		char (256) varying;

declare	1 right_char_spec,
	  2 type		fixed bin,
	  2 value		fixed bin,
	  2 char		char (256) varying;

declare	res		fixed bin;
declare	dst		bit (3) init ("0"b);
declare	currsign		char (1);
declare	objsign		char (1);
declare	char1		char (1);
declare	alf_name		char (32) varying;

declare	1 pcs,					/* program collating sequence */
	  2 type		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 num		fixed bin,
	  2 name		char (32) varying;

declare	cobol_set_type40_$ebcdic
			entry (ptr);
declare	cobol_imp_word$device_name
			entry (ptr) returns (fixed bin);
declare	cobol_imp_word$printer_control
			entry (ptr) returns (fixed bin);
declare	cobol_imp_word$computer_name
			entry (ptr) returns (fixed bin);
declare	cobol_imp_word$imp_word
			entry (ptr) returns (fixed bin);
declare	cobol_imp_word$file_org
			entry (ptr) returns (fixed bin);
declare	cobol_imp_word$disp_type
			entry (ptr) returns (fixed bin);
declare	cobol_imp_word$comp_type
			entry (ptr) returns (fixed bin);
declare	cobol_imp_word$alphabet_name
			entry (ptr) returns (fixed bin);
declare	cobol_imp_word$switch_name
			entry (ptr) returns (fixed bin);
declare	cobol_imp_word$io_technique
			entry (ptr) returns (fixed bin);

%include cobol_;
%include cobol_ext_;
%include cobol_fixed_common;
%include cobol_file_table;
%include cobol_file_key;
%include cobol_type1;
%include cobol_type2;
%include cobol_type3;
declare	1 user_word	based (p2),
%include cobol_TYPE8;
declare	1 alphabet_name	based (alpha_ptr),
%include cobol_TYPE40;
%include cobol_type17;

     end;
  



		    cobol_imp_word.pl1              05/24/89  1045.1rew 05/24/89  0835.1      126603



/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_imp_word.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 07/17/80 by FCH, TEMPORARY was not recognized, [4.3-1], phx06605d(BUG439) */
/* Modified on 10/11/79 by MHD, [4.1-1], added CHECKPOINT-FILE for RERUN */
/* Modified on 06/14/79 by FCH, [4.0-1], run time debug switch */
/* Modified since Version 4.0 */

/* format: style3 */
cobol_imp_word:
     proc (word_ptr) returns (fixed bin);

/*
	switch_name	1(308)	switch-1
			2(309)	switch-2
			3(310)	switch-3
			4(311)	switch-4
			5(312)	switch-5
			6(313)	switch-6
			7(314)	switch-7
			8(315)	switch-8
			9	switch-9	used for run-time switch by DEBUGGING

	device_name	9(281)	sysin
			10(294)	sysout
			11(197)	console

	alphabet_name	20(505)	ascii
			21(273)	ebcdic
			22(418)	gbcd
			23(274)	hbcd
			24(275)	ibcd
			25(276)	jis

	device_appendage	30(199)	card-punch
			31(217)	msd
			32(261)	preattached
			33(198)	printer
			34(283)	virtual
			35(200)	card-reader

	computer_name	40(303)	multics
			41(299)	gcos
			42(103)	level-61-ascii
			43(436)	level-66-ascii
			44(289)	level-62
			45(429)	level-66
			46(303)	level-68
			47(300)	level-64
			48(297)	his-series-60
			49	level-6

	label_name	60(296)	file-id
			61(430)	retention
			62(331)	catalog-name
			62(331)	catalogue-name

	comp_type		80(106)	comp	computational
			81(212)	comp-1	computational-1
			82(213)	comp-2	computational-2
			83(211)	comp-3	computational-3
			84(209)	comp-4	computational-4
			85(210)	comp-5	computational-5
			86(292)	comp-6	computational-6
			87(290)	comp-7	computational-7
			88(610)	comp-8	computational-8

	disp_type		130(42)	disp	display
			131(317)	disp-1	display-1
			132(318)	disp-2	display-2
			133(319)	disp-3	display-3
			134(320)	disp-4	display-4

	io_technique	90	additional
			91	address-format
			92(412)	attach-options
			93(282)	banner
			94	density
			95(405)	detach
			96	device
			97	force
			98	modification
			99	output-mode
			100(410)	permanent
			101	protect
			102	retain
			103	tape-options
			104(409)	temporary
			105	generation
			106	replacement

	file_org		110(422)	complementary
			111(439)	ext
			112(431)	secondary
			113(285)	h-2000
			114(337)	his
			115(298)	ibm-dos
			116(330)	ibm_os
			117(419)	gfrc
			118	uff
			119(136)	ansi

	forign_label_name	140	id

	language_name	200(191)	cobol
			201	pl/i
			202	alm
			203	fortran
			204	apl
			205	basic
	printer_control	210	hof
			211	channel-1
			...	...
			226	channel-16

	misc		1000	temp
			1001	maximum
			1002	supervisor
			1003	descriptors
			1004	aggregate
			1005	scalar
			1006	substitution
			1007	bits
			1008	multiply
[4.1-1]			1009	checkpoint-file

*/


declare	word_ptr		ptr,
	word_size		fixed bin;
declare	(addr, substr, index)
			builtin;

declare	(Wptr, Kptr)	ptr,
	loc		fixed bin;
declare	key		fixed bin;

declare	wd		char (32) varying;

declare	word		char (32) based (word_ptr);
declare	chars		char (1000) based (Wptr);
declare	K		(1000) fixed bin based (Kptr);

declare	W2		(1) char (2) static internal init ("id");

declare	K2		(1) fixed bin static internal,
	init		(140);

declare	W3		(8) char (3) static internal init ("jis", "uff", "his", "hof", "msd", "alm", "apl", "ext");

declare	K3		(8) fixed bin static internal init (25, 118, 114, 210, 31, 202, 204, 111);

declare	W4		(11) char (4) static internal
			init ("gcos", "gbcd", "hbcd", "ibcd", "ansi", "temp", "comp", "disp", "pl/i", "bits",
			"gfrc");

declare	K4		(11) fixed bin static internal init (41, 22, 23, 24, 119, 1000, 80, 130, 201, 1007, 117);

declare	W5		(5) char (5) static internal init ("sysin", "ascii", "cobol", "basic", "force");

declare	K5		(5) fixed bin static internal init (9, 20, 200, 205, 97);

declare	W6		(21) char (6) static internal
			init ("sysout", "comp-1", "comp-2", "comp-3", "comp-4", "comp-5", "comp-6", "comp-7",
			"comp-8", "disp-1", "disp-2", "disp-3", "disp-4", "ebcdic", "ibm-os", "h-2000", "detach",
			"device", "banner", "scalar", "retain");

declare	K6		(21) fixed bin static internal
			init (10, 81, 82, 83, 84, 85, 86, 87, 88, 131, 132, 133, 134, 21, 116, 113, 95, 96, 93,
			1005, 102);

declare	W7		(11) char (7) static internal
			init ("console", "multics", "ibm-dos", "density", "file-id", "printer", "virtual",
			"maximum", "fortran", "level-6", "protect");

declare	K7		(11) fixed bin static internal init (11, 40, 115, 94, 60, 33, 34, 1001, 203, 49, 101);

declare	W8		(14) char (8) static internal /* [4.0-1] */
			init ("switch-1", "switch-2", "switch-3", "switch-4", "switch-5", "switch-6", "switch-7",
			"switch-8", "switch-9",	/* [4.0-1] */
			"multiply", "level-62", "level-66", "level-68", "level-64");

declare	K8		(14) fixed bin static internal /* [4.0-1] */ init (1, 2, 3, 4, 5, 6, 7, 8, 9,
						/* [4.0-1] */
			1008, 44, 45, 46, 47);

declare	W9		(14) char (9) static internal
			init ("secondary", "temporary", "permanent", "channel-1", "channel-2", "channel-3",
			"channel-4", "channel-5", "channel-6", "channel-7", "channel-8", "channel-9", "aggregate",
			"retention");

declare	K9		(14) fixed bin static internal
			init (112, 104, 100, 211, 212, 213, 214, 215, 216, 217, 218, 219, 1004, 61);

declare	W10		(11) char (10) static internal
			init ("additional", "generation", "supervisor", "channel-10", "channel-11", "channel-12",
			"channel-13", "channel-14", "channel-15", "channel-16", "card-punch");

declare	K10		(11) fixed bin static internal init (90, 105, 1002, 220, 221, 222, 223, 224, 225, 226, 30);

declare	W11		(5) char (11) static internal
			init ("output-mode", "card-reader", "replacement", "descriptors", "preattached");

declare	K11		(5) fixed bin static internal init (99, 35, 106, 1003, 32);

declare	W12		(4) char (12) static internal
			init ("tape-options", "catalog-name", "substitution", "modification");

declare	K12		(4) fixed bin static internal init (103, 62, 1006, 98);

declare	W13		(2) char (13) static internal init ("complementary", "his-series-60");

declare	K13		(2) fixed bin static internal init (110, 48);

declare	W14		(5) char (14) static internal
			init ("level-61-ascii", "level-66-ascii", "address-format", "catalogue-name",
			"attach-options");

declare	K14		(5) fixed bin static internal init (42, 43, 91, 62, 92);

declare	W15		(8) char (15) static internal
			init ("computational-1", "computational-2", "computational-3", "computational-4",
			"computational-5", "computational-6", "computational-7",
						/*[4.1-1]*/
			"checkpoint-file");

declare	K15		(8) fixed bin static internal init (81, 82, 83, 84, 85, 86, 87,
						/*[4.1-1]*/
			1009);



find_word:
     proc;

	if user_word.type ^= 8 | user_word.length > 15
	then go to ret_0;
	wd = substr (user_word.word, 1, user_word.length);
	word_size = user_word.length;

	go to S (word_size);

S (0):
	loc = 0;
	return;

S (1):
	Wptr = addr (W2 (1));
	Kptr = addr (K2 (1));
	go to SS;

S (2):
	Wptr = addr (W2 (1));
	Kptr = addr (K2 (1));
	go to SS;

S (3):
	Wptr = addr (W3 (1));
	Kptr = addr (K3 (1));
	go to SS;

S (4):
	Wptr = addr (W4 (1));
	Kptr = addr (K4 (1));
	go to SS;

S (5):
	Wptr = addr (W5 (1));
	Kptr = addr (K5 (1));
	go to SS;

S (6):
	Wptr = addr (W6 (1));
	Kptr = addr (K6 (1));
	go to SS;

S (7):
	Wptr = addr (W7 (1));
	Kptr = addr (K7 (1));
	go to SS;

S (8):
	Wptr = addr (W8 (1));
	Kptr = addr (K8 (1));
	go to SS;

S (9):
	Wptr = addr (W9 (1));
	Kptr = addr (K9 (1));
	go to SS;

S (10):
	Wptr = addr (W10 (1));
	Kptr = addr (K10 (1));
	go to SS;

S (11):
	Wptr = addr (W11 (1));
	Kptr = addr (K11 (1));
	go to SS;

S (12):
	Wptr = addr (W12 (1));
	Kptr = addr (K12 (1));
	go to SS;

S (13):
	Wptr = addr (W13 (1));
	Kptr = addr (K13 (1));
	go to SS;

S (14):
	Wptr = addr (W14 (1));
	Kptr = addr (K14 (1));
	go to SS;

S (15):
	Wptr = addr (W15 (1));
	Kptr = addr (K15 (1));
	go to SS;

SS:
	if Wptr = null () | Kptr = null ()
	then do;
		loc = 0;
		return;
	     end;

	loc = index (chars, wd);

	if loc = 0
	then return;

	loc = K ((loc - 1) / word_size + 1);

     end;

ret_0:
	return (0);

imp_word:
     entry (word_ptr) returns (fixed bin);

	call find_word;

	return (loc);

lang_name:
     entry (word_ptr) returns (fixed bin);

	if reserved_word.type = 1
	then do;
		if reserved_word.key = 191
		then return (1);
		else return (0);
	     end;

	call find_word;

	if loc >= 200 & loc <= 205
	then return (loc - 199);
	else return (0);

switch_name:
     entry (word_ptr) returns (fixed bin);

	if reserved_word.type = 1
	then do;
		key = reserved_word.key;

		if key >= 308 & key <= 315
		then return (key - 307);
		else return (0);
	     end;

	call find_word;

	if loc >= 1 & loc < 8
	then return (loc);
	else return (0);

printer_control:
     entry (word_ptr) returns (fixed bin);

	if loc >= 210 & loc < 230
	then return (loc - 209);
	else return (0);

device_name:
     entry (word_ptr) returns (fixed bin);

	if reserved_word.key = 1
	then do;
		key = reserved_word.key;

		if key = 281
		then return (1);
		else if key = 294
		then return (2);
		else if key = 197
		then return (3);
		else return (0);
	     end;

	call find_word;

	if loc >= 9 & loc < 20
	then return (loc - 8);
	else return (0);

alphabet_name:
     entry (word_ptr) returns (fixed bin);

	if reserved_word.type = 1
	then do;
		key = reserved_word.key;
		if key = 505
		then return (1);
		else if key = 273
		then return (2);
		else if key = 418
		then return (3);
		else if key = 274
		then return (4);
		else if key = 275
		then return (5);
		else if key = 276
		then return (6);
		else return (0);
	     end;

	call find_word;

	if loc >= 20 & loc < 30
	then return (loc - 19);
	else return (0);

device_appendage:
     entry (word_ptr) returns (fixed bin);

	if reserved_word.type = 1
	then do;
		key = reserved_word.key;

		if key = 199
		then return (1);
		else if key = 217
		then return (2);
		else if key = 198
		then return (4);
		else if key = 283
		then return (5);
		else if key = 200
		then return (6);
		else return (0);
	     end;

	call find_word;

	if loc >= 30 & loc < 40
	then return (loc - 29);
	else return (0);

computer_name:
     entry (word_ptr) returns (fixed bin);

	if reserved_word.type = 1
	then do;
		key = reserved_word.key;

		if key = 303
		then return (1);
		else if key = 299
		then return (2);
		else if key = 103
		then return (3);
		else if key = 436
		then return (4);
		else if key = 289
		then return (5);
		else if key = 429
		then return (6);
		else if key = 303
		then return (7);
		else if key = 300
		then return (8);
		else if key = 297
		then return (9);
		else return (0);
	     end;

	call find_word;

	if loc >= 40 & loc < 60
	then return (loc - 39);
	else return (0);

label_name:
     entry (word_ptr) returns (fixed bin);

	if reserved_word.type = 1
	then do;
		key = reserved_word.key;

		if key = 331
		then return (3);
		else return (0);
	     end;

	call find_word;

	if loc >= 60 & loc < 80
	then return (loc - 59);
	else return (0);

forign_label_name:
     entry (word_ptr) returns (fixed bin);

	call find_word;

	if loc = 140
	then return (loc - 139);
	else return (0);

comp_type:
     entry (word_ptr) returns (fixed bin);

	if reserved_word.type = 1
	then do;
		key = reserved_word.key;

		if key = 106
		then return (1);
		else if key = 212
		then return (2);
		else if key = 213
		then return (3);
		else if key = 211
		then return (4);
		else if key = 209
		then return (5);
		else if key = 210
		then return (6);
		else if key = 292
		then return (7);
		else if key = 290
		then return (8);
		else if key = 610
		then return (9);
		else return (0);
	     end;

	call find_word;

	if loc >= 80 & loc < 90
	then return (loc - 79);
	else return (0);

disp_type:
     entry (word_ptr) returns (fixed bin);

	if reserved_word.type = 1
	then do;
		key = reserved_word.key;

		if key = 42
		then return (1);
		else if key = 317
		then return (2);
		else if key = 318
		then return (3);
		else if key = 319
		then return (4);
		else if key = 320
		then return (5);
		else return (0);

	     end;

	call find_word;

	if loc >= 130 & loc < 140
	then return (loc - 129);
	else return (0);

io_technique:
     entry (word_ptr) returns (fixed bin);

	if reserved_word.type = 1
	then do;
		key = reserved_word.key;

		if key = 412
		then return (3);
		else if key = 282
		then return (4);
		else if key = 95
		then return (6);
		else if key = 410
		then return (11);			/*[4.3-1]*/
		else if key = 409
		then return (15);
		else return (0);
	     end;

	call find_word;

	if loc >= 90 & loc < 110
	then return (loc - 89);
	else return (0);

file_org:
     entry (word_ptr) returns (fixed bin);

	if reserved_word.type = 1
	then do;
		key = reserved_word.key;

		if key = 422
		then return (1);
		else if key = 439
		then return (2);
		else if key = 431
		then return (3);
		else if key = 285
		then return (4);
		else if key = 337
		then return (5);
		else if key = 298
		then return (6);
		else if key = 330
		then return (7);
		else if key = 419
		then return (8);
		else if key = 136
		then return (9);
		else return (0);
	     end;
	call find_word;

	if loc >= 110 & loc < 120
	then return (loc - 109);
	else return (0);

declare	1 reserved_word	based (word_ptr),
%include cobol_TYPE1;

declare	1 user_word	based (word_ptr),
%include cobol_TYPE8;

     end;
 



		    cobol_initstatic.pl1            05/24/89  1045.1rew 05/24/89  0835.1       59373



/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_initstatic.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 08/17/81 by FCH, [5.0-1], dds_internal changed to based from static, phx07089(BUG475) */
/*  1/4/77, FCH, fixed bin decls standardized */
/* Modified since Version 2.0 */

/* format: style3 */
cobol_initstatic:
     proc;

declare	csv		(m) fixed bin (24) based (cobol_sv_ptr);
declare	cptrs		(21) ptr based (cobol_sv_ptr);
declare	keys_ptr		ptr,
	m		fixed bin;
declare	ckeys		(355) char (1) based (keys_ptr);

/*[5.0-1]*/
dcl	cobol$alloc	entry (fixed bin) returns (ptr);

declare	(addr, fixed, substr, unspec, size, collate, length)
			builtin;

/*[5.0-1]*/
	cobol_sv_ptr = cobol$alloc (size (dds));

	m = size (dds);
	csv = 0;
	keys_ptr = addr (cm_key);

	ckeys = "0";
	fixed_common.init_cd = "0"b;			/* not needed when lex fix made */
	cptrs = null_func;

	coll_ptr = addr (coll_seq);
	coll_seq = collate ();

	call char (50);

	do i = 1 by 1 to 256;

	     dds.transltble (i) = ch;

	end;

	call ord_num ("(");
	dds.transltble (on) = "(";

	call ord_num (")");
	dds.transltble (on) = ")";

	ch_str = "12345678";
	call char (127);

	do i = 1 by 1 to length (ch_str);

	     call ord_num (substr (ch_str, i, 1));
	     dds.transltble (on) = ch;

	end;

	ch_str = "BV,.CDEZ9*9P9l0+999-999" || fixed_common.currency || "999SXA9";

	do i = 1 by 1 to length (ch_str);

	     call ord_num (substr (ch_str, i, 1));
	     call char (i);
	     dds.transltble (on) = ch;

	end;

	ch_str = ":\|[]{}_^~`<>?%&'EFGHIJKMNOQTUWTh";

	on = index (ch_str, fixed_common.currency);

	if on = 1
	then substr (ch_str, 1, 1) = substr (ch_str, 2, 1);
	else if on ^= 0
	then substr (ch_str, on, 1) = substr (ch_str, 1, 1);

	call char (1);

	call ord_num ("/");
	dds.transltble (on) = ch;

	do i = 1 by 1 to length (ch_str);

	     call ord_num (substr (ch_str, i, 1));
	     dds.transltble (on) = ch;

	end;

	call char (32);
	stopper = ch;

	dds.ptr5 = addr (dds.vector_part);
	fd_clauses_ptr = addr (fd_clauses);

	dds.mask1x = "00000000000000000000000000001110"b;
	dds.mask2x = "00000000000000000000000000000010"b;
	dds.mask3x = "00000000000000000000000000000100"b;

	dds.prectble (1) = "00001110000101001000100010010001"b;
	dds.prectble (2) = "01011110101010001010101010101101"b;
	dds.prectble (3) = "00001110000101001000100010011101"b;
	dds.prectble (4) = "01011110101111001010101010111101"b;
	dds.prectble (5) = "00001110000001011111111010011101"b;
	dds.prectble (6) = "00001110000001011111111010011101"b;
	dds.prectble (7) = "10101111111111001110111111111101"b;
	dds.prectble (8) = "01011110111111001110111011111111"b;
	dds.prectble (9) = "00001110011101001110111011111111"b;
	dds.prectble (10) = "01011111101111001110111011111111"b;
	dds.prectble (11) = "00001111100101001110111011111111"b;
	dds.prectble (12) = "01011110101010001010101010101101"b;
	dds.prectble (13) = "10111111111100101110111011101111"b;
	dds.prectble (14) = "11111111111111111111111111111111"b;
	dds.prectble (15) = "00001110000101001000100010010001"b;
	dds.prectble (16) = "11111111111111111111111111111111"b;
	dds.prectble (17) = "00001100000001011111111010011101"b;
	dds.prectble (18) = "01011111111111011011111011111111"b;
	dds.prectble (19) = "00001111111101011001111011111111"b;
	dds.prectble (20) = "11111111111111111111111111111111"b;
	dds.prectble (21) = "00001100000001011111111010011101"b;
	dds.prectble (22) = "01011111111111011111101011111111"b;
	dds.prectble (23) = "00001111111101011111100011111111"b;
	dds.prectble (24) = "11111111111111101110111111111111"b;
	dds.prectble (25) = "11111111111111111111111111111111"b;
	dds.prectble (26) = "01011111111111001110111110111111"b;
	dds.prectble (27) = "00001111111101001110111110011111"b;
	dds.prectble (28) = "11111111111110111111111111111111"b;
	dds.prectble (29) = "01111111111110011111111111110001"b;
	dds.prectble (30) = "01111111111110011111111111110001"b;
	dds.prectble (31) = "00001100000100001010101010100001"b;
	dds.prectble (32) = "00000000000000000000000010000001"b;
	dds.inftble (1) = "10011000"b;
	dds.inftble (2) = "00010000"b;
	dds.inftble (3) = "10011000"b;
	dds.inftble (4) = "00011000"b;
	dds.inftble (5) = "00001000"b;
	dds.inftble (6) = "00001000"b;
	dds.inftble (7) = "00001000"b;

	do fixbin7 = 8 to 11;
	     dds.inftble (fixbin7) = "11001100"b;
	end;

	dds.inftble (12) = "11000000"b;
	dds.inftble (13) = "11000000"b;
	dds.inftble (14) = "00000000"b;
	dds.inftble (15) = "10011000"b;
	dds.inftble (16) = "11101000"b;
	dds.inftble (17) = "11101000"b;
	dds.inftble (18) = "11101100"b;
	dds.inftble (19) = "11101100"b;
	dds.inftble (20) = "11101000"b;
	dds.inftble (21) = "11101000"b;
	dds.inftble (22) = "11101100"b;
	dds.inftble (23) = "11101100"b;
	dds.inftble (24) = "11101000"b;
	dds.inftble (25) = "11101000"b;
	dds.inftble (26) = "11101100"b;
	dds.inftble (27) = "11101100"b;
	dds.inftble (28) = "00000000"b;

	do fixbin7 = 29 to 31;
	     dds.inftble (fixbin7) = "10001100"b;
	end;

	dds.inftble (32) = "00000000"b;

	return;

ord_num:
     proc (ch);

declare	ch		char (1);

	on = index (coll_seq, ch) - 1;

     end;

char:
     proc (val);

declare	val		fixed bin;

	ch = coll_array (val + 1);

     end;

declare	(i, on)		fixed bin;
declare	ch		char (1),
	coll_seq		char (128);
declare	coll_ptr		ptr;

declare	coll_array	(128) char (1) based (coll_ptr);

%include cobol_ext_;
/* %include cobol_segdata_ddsyn;  */
%include cobol_fixed_common;

declare	x		char (1);
declare	y		char (1);
declare	char1		char (1);

declare	fixbin7		fixed bin;
declare	null_func		ptr internal static init (null ());
declare	one_word_in_bits	bit (36);

declare	1 dds		based (cobol_sv_ptr),
%include cobol_shared_var;
%include cobol_ext_ddsyn;
     end cobol_initstatic;
   



		    cobol_insert_token.pl1          05/24/89  1045.1rew 05/24/89  0835.1       36171



/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_insert_token.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 12/09/80 by FCH, [4.4-1], size of token in token stack increased */
/* Modified since Version 4.0 */

/* format: style3 */
cobol_insert_token:
     proc (token_type, tv_len);

dcl	cobol_allo_tm	entry (ptr, fixed bin) ext;
dcl	cobol_output_tokens entry ext;

/*   general overlay for any token    */

dcl	1 token		based (cobol_current),
	  2 fwd_link	pointer,
	  2 back_link	pointer,
	  2 rep_link	pointer,
	  2 l_info	bit (8),
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin,
	  2 body		char (1);

dcl	zerosb		(100) bit (9) static init ((100) (1)"000000000"b);
dcl	zeros		char (100) based (addr (zerosb));
dcl	zmvr		char (tb_len) based (addr (token.body));

/* 
   This routine makes all entries in the token stack.  A new blank token will be inserted immediately
   after the token pointed to by "current".
    */



dcl	p		pointer;
dcl	(token_type, tb_len, tv_len)
			fixed bin;

/* Type 8 token must be at least as big as type 1 token */

dcl	token_base_len	(24) fixed bin static init (12, 20, 8, 4, 16, 8, 36, 8, (15) 0, 5);

dcl	addr		builtin;
dcl	null		builtin;


	tb_len = token_base_len (token_type);

	if cobol_stack_sw = "1"b
	then do;
		cobol_init_ta_sw = "1"b;
		if cobol_output_sw = "1"b
		then do;
			call cobol_output_tokens;

			cobol_output_sw = "0"b;
		     end;

		if cobol_frst = null ()
		then do;				/* the stack is empty */
			call al_token;

			cobol_frst = cobol_current;	/* set limit pointers */
			cobol_top = cobol_current;
			token.back_link = null ();	/* set links */
			token.fwd_link = null ();
		     end;
		else if token.fwd_link = null ()
		then do;				/* current is last token in the stack */
			p = cobol_current;

			call al_token;

			cobol_top = cobol_current;	/* set limit pointer */
			p -> token.fwd_link = cobol_current;
						/* link new token in */
			token.back_link = p;
			token.fwd_link = null ();
		     end;
		else do;
			p = cobol_current;

			call al_token;

			token.back_link = p;	/* link new token in */
			token.fwd_link = p -> token.fwd_link;
			token.fwd_link -> token.back_link = cobol_current;
			p -> token.fwd_link = cobol_current;
		     end;
	     end;

	else do;

		call cobol_output_tokens;

		if cobol_init_ta_sw = "1"b
		then do;
			cobol_init_ta_sw = "0"b;

			cobol_current = cobol_ta_ptr;
			cobol_frst = cobol_ta_ptr;
			cobol_top = cobol_ta_ptr;

			call al_tokenf;

			token.fwd_link = null ();
			token.back_link = null ();
		     end;
		else call al_tokenf;

	     end;
	return;


al_token:
     proc;					/*[4.4-1]*/
	call cobol_allo_tm (cobol_current, 76 + tb_len + tv_len);
	call al_tokenf;
     end;

al_tokenf:
     proc;

	token.rep_link = null ();			/* initialize replacement string pointer */
	token.l_info = "0"b;			/* initialize lex info bits */
	token.size = tb_len + tv_len + 16;		/* set the size field */
	token.type = token_type;			/* set the type field */
	zmvr = zeros;				/* initialize other fixed fields */
	return;
     end;

%include cobol_ext_lex;

     end cobol_insert_token;
 



		    cobol_io_.pl1                   05/24/89  1045.1rew 05/24/89  0835.0      151623



/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_io_.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 10/27/81 by FCH, [5.1-1], issue diag if long line found, phx11819(BUG517) */
/* Modified on 10/21/80 by FCH, [4.4-1], entry cobol_msf_start added for report writer */
/* Modified on 10/16/79 by MHD, [4.1-1], changed expand_path_ to expand_pathname_, change 01011 to 01010 in make_seg calls */
/* Modified on 05/01/79 by FCH, [4.0-1], tab scanning added, debug statement */
/* Modified since Version 4.0 */






/* format: style3 */
cobol_io_:
     proc;

/*************************************/

initialize:
     entry;

/*[4.0-1]*/
	LINE72.nl = "
";

/*[4.0-1]*/
	TAB = "	";				/*[4.0-1]*/
	STATE, REC_NUM = 0;				/*[4.0-1]*/
	return;

set_state:
     entry (st_num);

/*[4.0-1]*/
	STATE = st_num;				/*[4.0-1]*/
	REC_NUM = 0;				/*[4.0-1]*/
	return;

cobol_cselfle:
cselfle:
     entry (cist, cifp, cifn, cilt, cisr, cioc, cifm);

dcl	cist		bit (32);
dcl	cifp		ptr;
dcl	cifn		char (*);
dcl	cilt		fixed bin;
dcl	cisr		fixed bin;
dcl	cioc		char (1) aligned;
dcl	cifm		bit (8);

start_cselfle:
	if cioc = "k" | cioc = "K"
	then do;

		if cisr = 1
		then do;				/* set bit count */

			bc = 9 * (fixed (substr (bptr, 37, 18), 18)) * 4 + fixed (substr (bptr, 55, 9), 9);

			call hcs_$set_bc_seg (cifp, bc, mcode);

			if mcode ^= 0
			then go to ci_error;

		     end;
		else if cisr = -1
		then do;

			call hcs_$truncate_seg (cifp, 0, mcode);

			if mcode ^= 0
			then go to ci_error;

		     end;

		call hcs_$terminate_noname (cifp, mcode);

		if mcode ^= 0
		then go to ci_error;

		cifp = null ();

	     end;
	else do;

/*[4.1-1]*/
		call expand_pathname_ (cifn, dname, ename, mcode);

		if mcode ^= 0
		then go to ci_error;

		if cioc ^= "h"
		then do;

			call hcs_$initiate (dname, ename, "", 0b, 00b, cifp, mcode);

			if cifp = null ()
			then go to ci_error;

			temp = index (cistr, nl);

			if temp = 0
			then do;

				mcode = error_table_$improper_data_format;

				go to ci_error;

			     end;
		     end;
		else do;

/*[4.1-1]*/
			call hcs_$make_seg (dname, ename, "", 01010b, cifp, mcode);

			if cifp = null ()
			then go to ci_error;

			call hcs_$truncate_seg (cifp, 0, mcode);

			if mcode ^= 0
			then go to ci_error;

		     end;
	     end;

	cist = ""b;

	return;

cobol_get_rec:
get_rec:
     entry (cst, cfp, csr, crp, crl);

dcl	cst		bit (32);
dcl	cfp		ptr;
dcl	csr		fixed bin;
dcl	crp		ptr;
dcl	crl		fixed bin;

start_get_rec:					/*[5.1-1]*/
	go to GRS (STATE);

GRS (0):						/*[5.1-1]*/
	if csr = 0
	then do;
		cst = eof;
		return;
	     end;

	crl = index (cstr, nl);

	if crl = 0
	then cst = eof;
	else do;

/*[4.0-1]*/
		if substr (fixed_common.compile_mode, 3, 1)
						/*[4.0-1]*/
		then call expand_line;		/*[4.0-1]*/
		else crp = cfp;

		cfp = addr (substr (cstr, crl + 1, 1));
		cst = ""b;

/*[5.1-1]*/
		csr = csr - crl;

	     end;

	return;

/* called by cobol_res_words, after WORKING STORAGE */
/*[4.0-1]*/

GRS (1):						/*[4.0-1]*/
	REC_NUM = REC_NUM + 1;			/*[4.0-1]*/
	call cobol_db_phase$get_rec (crp, REC_NUM);

GR1:						/*[4.0-1]*/
	if REC_NUM = 0				/*[4.0-1]*/
	then do;
		STATE = 0;			/*[5.1-1]*/
		go to GRS (0);			/*[4.0-1]*/
	     end;

/*[4.0-1]*/
	cst = ""b;				/*[4.0-1]*/
	crl = 73;

/*[4.0-1]*/
	return;

/* called by cobol_res_words, after PROCEDURE DIVISION */
GRS (2):						/*[4.0-1]*/
	REC_NUM = REC_NUM + 1;

/*[4.0-1]*/
	call cobol_db_phase$get_tok (crp, REC_NUM);

/*[4.0-1]*/
	go to GR1;				/* called by cobol_res_words, after end declaratives */
GRS (3):						/*[4.0-1]*/
	REC_NUM = REC_NUM + 1;

/*[4.0-1]*/
	call cobol_db_phase$get_perf (crp, REC_NUM);

/*[4.0-1]*/
	go to GR1;

cobol_put_rec:
put_rec:
     entry (cst, cfp, csr, crp, crl);

start_put_rec:
	if substr (incstr, crl, 1) ^= nl
	then do;					/* add new-line if necessary */

		substr (cstr, 1, crl + 1) = incstr || nl;

		cfp = addr (substr (cstr, crl + 2, 1));

	     end;
	else do;

		substr (cstr, 1, crl) = incstr;
		cfp = addr (substr (cstr, crl + 1, 1));

	     end;

	cst = ""b;

	return;


/*[4.0-1]*/

expand_line:
     proc;

/*[4.0-1]*/
dcl	(i, j, tab_loc)	fixed bin;		/*[4.0-1]*/
dcl	ch		char (1);

/*[4.0-1]*/
	tab_loc = index (substr (cstr, 1, 72), TAB);

/*[4.0-1]*/
	if tab_loc <= 0				/*[4.0-1]*/
	then do;
		LINE72.body = substr (cstr, 1, 72);	/*[4.0-1]*/
		crl = 73;				/*[4.0-1]*/
		crp = addr (LINE72);		/*[4.0-1]*/
		return;				/*[4.0-1]*/
	     end;

/*[4.0-1]*/
	i, j = 1;
	tab_loc = 11;
	LINE72.body = " ";

/*[4.0-1]*/
	do while ("1"b);

/*[4.0-1]*/
	     ch = substr (cstr, i, 1);

/*[4.0-1]*/
	     if ch ^= TAB				/*[4.0-1]*/
	     then do;
		     substr (LINE72.body, j, 1) = ch;	/*[4.0-1]*/
		     i = i + 1;			/*[4.0-1]*/
		     j = j + 1;			/*[4.0-1]*/
		     if j = 73
		     then go to END;		/*[4.0-1]*/
		end;				/*[4.0-1]*/
	     else do;
		     i = i + 1;

/*[4.0-1]*/
		     if i = crl
		     then go to END;

/*[4.0-1]*/
		     do while (tab_loc < j);		/*[4.0-1]*/
			tab_loc = tab_loc + 11;	/*[4.0-1]*/
		     end;

/*[4.0-1]*/
		     if tab_loc > 72
		     then go to END;

/*[4.0-1]*/
		     j = tab_loc;			/*[4.0-1]*/
		end;
	end;

END:						/*[4.0-1]*/
	crl = 73;					/*[4.0-1]*/
	crp = addr (LINE72);

     end;

/*************************************/
cobol_swf:
cobol_vdwf:
swf:
vdwf:
     entry (fp, fn);

dcl	fp		ptr;
dcl	fn		char (*);
dcl	temp_ptr		ptr;			/* temporary ptr */
dcl	st		bit (32);
dcl	rp		ptr;
dcl	rl		fixed bin;
dcl	pm		char (2) aligned;
dcl	rk		char (5) unaligned;

start_init:					/*[4.1-1]*/
	call expand_pathname_ (fn, dname, ename, mcode);

	if mcode ^= 0
	then go to init_error;

/*[4.1-1]*/
	call hcs_$make_seg (dname, ename, "", 01010b, fp, mcode);

	if fp = null ()
	then go to init_error;

	call hcs_$truncate_seg (fp, 0, mcode);

	if mcode ^= 0
	then go to init_error;

	return;

cobol_swf_open:
swf_open:
     entry (fp, st, rp, rl, pm);

start_swf_open:
	if pm = "in"
	then do;

		if shdr.code ^= 10
		then go to soi_error;		/* bad format */

		temp_ptr = shdr.prev_file;

		do while (temp_ptr ^= null ());

		     fp = temp_ptr;
		     temp_ptr = fp -> shdr.prev_file;

		end;
	     end;
	else do;					/* output */

		call hcs_$truncate_seg (fp, 0, mcode);

		if mcode ^= 0
		then go to soo_error;

		shdr.code = 10;
		shdr.prev_file = null ();
		shdr.next_file = null ();

		call hcs_$fs_get_path_name (fp, dname, len, ename, mcode);

		if mcode ^= 0
		then call com_err_ (mcode, "cobol_io", "fail to get path name");

		if ename = "cobol_pdout_"
		then fc = "pout";
		else if ename = "cobol_minpral-1_"
		then fc = "min1";
		else if ename = "cobol_minpral-2_"
		then fc = "min2";
		else if ename = "cobol_rmin2_"
		then fc = "rmin";

	     end;

	shdr.next = 15;
	st = ""b;

	return;

cobol_swf_get:
swf_get:
     entry (fp, st, rp, rl);

start_swf_get:
	vp = pointer (fp, shdr.next);
	rl = length (vstr);

	if rl = 0
	then call cobol_ms_handler$get (fp, vp, st, rp, rl);

	else do;

		rp = addrel (vp, 1);
		shdr.next = shdr.next + divide (rl + 7, 4, 17, 0);
		st = ""b;

	     end;

	return;

cobol_msf_start:
     entry (fp, rp);

/*[4.4-1]*/
	rseg = binary (baseno (rp));			/*[4.4-1]*/
	fseg = binary (baseno (fp));

/*[4.4-1]*/
	do while (rseg ^= fseg);

/*[4.4-1]*/
	     fp = shdr.next_file;
	     fseg = binary (baseno (fp));

/*[4.4-1]*/
	end;

/*[4.4-1]*/
	shdr.next = binary (rel (rp));

/*[4.4-1]*/
	return;

cobol_save_pos:
     entry (fp, rp);

/*[4.4-1]*/
	rp = addrel (fp, shdr.next);

/*[4.4-1]*/
	return;


cobol_db_put:
     entry (fp, st, rp, rl, rloc);

/*[4.0-1]*/
	if shdr.next > 260000
	then call cobol_ms_handler$put (fp, vp, st);

/*[4.0-1]*/
	vp, rloc = pointer (fp, shdr.next);

/*[4.0-1]*/
	go to csput;

cobol_swf_put:
swf_put:
     entry (fp, st, rp, rl);

start_swf_put:
	if shdr.next > 260000
	then call cobol_ms_handler$put (fp, vp, st);

	vp = pointer (fp, shdr.next);

csput:
	vstr = instr;
	shdr.next = shdr.next + divide (rl + 7, 4, 17, 0);
	st = ""b;

	return;

cobol_swf_close:
swf_close:
     entry (fp, st, rp, rl);

start_close:
	if file_no = 0
	then shdr.prev_file = null ();

	temp_ptr = shdr.prev_file;

	if rl = 1
	then do;					/* close and delete */

		call hcs_$truncate_seg (fp, 0, mcode);

		if mcode ^= 0
		then go to close_error;

		call hcs_$terminate_seg (fp, 0b, mcode);

		if mcode ^= 0
		then go to close_error;

	     end;
	else do;

		bc = 36 * shdr.next;

		call hcs_$set_bc_seg (fp, bc, mcode);

		if mcode ^= 0
		then go to close_error;

	     end;

	st = ""b;

	if temp_ptr ^= null ()
	then do;

		fp = temp_ptr;
		go to start_close;

	     end;

	return;

cobol_vdwf_close:
     entry (fp, st, rp, rl);

	if rl = 1
	then do;

		call hcs_$truncate_seg (fp, 0, mcode);

		if mcode ^= 0
		then go to close_error;

		call hcs_$terminate_seg (fp, 0b, mcode);

		if mcode ^= 0
		then go to close_error;

	     end;
	else do;

		bc = 36 * vhdr.next_put;

		call hcs_$set_bc_seg (fp, bc, mcode);

		if mcode ^= 0
		then go to close_error;

	     end;

	st = ""b;

	return;


cobol_vdwf_open:
vdwf_open:
     entry (fp, st);

start_vdwf_open:
	if vhdr.code ^= 2
	then do;

		vhdr.next_put = 8;
		vhdr.code = 2;



	     end;

	vhdr.next_get = 8;
	st = ""b;

	return;

cobol_vdwf_sget:
vdwf_sget:
     entry (fp, st, rp, rl, rk);

start_vdwf_sget:
	vp = pointer (fp, vhdr.next_get);
	rl = length (vstr);

	if rl <= 0
	then st = eof;

	else do;

		if fp = cobol_ext_$cobol_ntfp
		then rp = vp;
		else rp = addrel (vp, 1);

		rkb = vhdr.next_get;
		rk = rkt;

		if fp = cobol_ext_$cobol_ntfp
		then vhdr.next_get = vhdr.next_get + divide (rl + 11, 8, 17, 0) * 2;
		else vhdr.next_get = vhdr.next_get + divide (rl + 11, 4, 17, 0);

		st = ""b;

	     end;

	return;







cobol_vdwf_sput:
vdwf_sput:
     entry (fp, st, rp, rl, rk);

start_vdwf_sput:
	vp = pointer (fp, vhdr.next_put);

	if fp = cobol_ext_$cobol_ntfp
	then nt_vstr = instr;
	else vstr = instr;

	rkb = vhdr.next_put;
	rk = rkt;

	if fp = cobol_ext_$cobol_ntfp
	then vhdr.next_put = vhdr.next_put + divide (rl + 11, 8, 17, 0) * 2;
	else vhdr.next_put = vhdr.next_put + divide (rl + 11, 4, 17, 0);

	st = ""b;

	return;

cobol_vdwf_dget:
vdwf_dget:
     entry (fp, st, rp, rl, rk);

start_vdwf_dget:
	rkt = rk;
	vp = pointer (fp, rkb);

	if fp = cobol_ext_$cobol_ntfp
	then rp = vp;
	else rp = addrel (vp, 1);

	rl = length (vstr);

	if fp = cobol_ext_$cobol_ntfp
	then vhdr.next_get = rkb + divide (rl + 11, 8, 17, 0) * 2;
	else vhdr.next_get = rkb + divide (rl + 11, 4, 17, 0);

	st = ""b;

	return;

cobol_vdwf_dput:
vdwf_dput:
     entry (fp, st, rp, rl, rk);

start_vdwf_dput:
	rkt = rk;
	vp = pointer (fp, rkb);

	if fp = cobol_ext_$cobol_ntfp
	then do;

		if fbb < rl
		then go to vdp_error;

		nt_vstr = instr;

	     end;

	else do;

		if length (vstr) < rl
		then go to vdp_error;

		vstr = instr;

	     end;

	st = ""b;

	return;

/*************************************/

cobol_swf_:
cobol_vdwf_:
swf_:
vdwf_:
     entry (fp, fn);

start_save_init:					/*[4.1-1]*/
	call expand_pathname_ (fn, dname, ename, mcode);

	if mcode ^= 0
	then go to save_error;

	call hcs_$initiate (dname, ename, "", 0b, 00b, fp, mcode);

	if fp = null ()
	then go to save_error;

	return;


/*************************************/
/* ERROR PROCESSING */

dcl	1 ioerror,
	  2 name		char (32),
	  2 code		fixed bin (35),
	  2 action	fixed bin,
	  2 iocb_ptr	ptr,
	  2 file_type	fixed bin,
	  2 key		char (5);

dcl	1 iocb,
	  2 version	fixed bin,
	  2 name		char (32),
	  2 actual_ptr	ptr,
	  2 attach_descrip_ptr
			ptr;

dcl	attach_descrip	char (200) varying;
dcl	signal_		entry (char (*), ptr, ptr);
dcl	error_table_$bad_file
			fixed bin (35) ext;
dcl	error_table_$no_operation
			fixed bin (35) ext;

ci_error:
	if substr (cifm, 1, 1)
	then do;

		cist = "00000000000000001111111111111111"b;

		return;

	     end;

	attach_descrip = "cfile_ " || cifn;

	if cioc = "s" | cioc = "S"
	then ioerror.file_type = 1;
	else if cioc = "c" | cioc = "C"
	then ioerror.file_type = 2;
	else ioerror.file_type = 3;

	go to i_error;

init_error:
	attach_descrip = "cfile_ " || fn;
	ioerror.file_type = 6;

i_error:
	ioerror.code = mcode;
	ioerror.action = 1;
	ioerror.iocb_ptr = addr (iocb);
	iocb.attach_descrip_ptr = addr (attach_descrip);

	go to error;

vdp_error:
	ioerror.key = rk;
	ioerror.code = error_table_$no_operation;
	ioerror.action = 4;
	ioerror.file_type = 5;

	go to wf_error;

close_error:
	ioerror.code = mcode;
	ioerror.action = 7;
	ioerror.file_type = 0;

	go to wf_error;

soi_error:
	ioerror.code = error_table_$bad_file;

	go to so_error;

soo_error:
	ioerror.code = mcode;

so_error:
	ioerror.action = 2;
	ioerror.file_type = 4;

wf_error:
	ioerror.iocb_ptr = fp;

error:
	ioerror.name = "cobol_io_";

	call signal_ ("command_abort_", null (), addr (ioerror));

	return;

save_error:
	call com_err_ (mcode, "mcobol_io", fn);
	call signal_ ("command_abort_", null (), null ());

dcl	1 shdr		based (fp) aligned,		/* header of working file */
	  2 x1		char (12),
	  2 next		fixed bin,		/* offset of next token */
	  2 code		fixed bin,		/* 10 for sequential file */
	  2 x3		char (4),			/* unused */
	  2 next_file	ptr,			/* points to next working file */
	  2 prev_file	ptr,			/* points to previous file */
	  2 fc		char (4),			/* file code for each different kind of file */
	  2 file_no	fixed bin,		/* file count for each working file */
	  2 x2		char (12),		/* unused */
	  2 first		fixed bin;		/* first token */

dcl	1 vhdr		based (fp) aligned,
	  2 x1		char (8),
	  2 next_get	fixed bin,
	  2 next_put	fixed bin,
	  2 code		fixed bin,
	  2 x2		char (8),
	  2 first		fixed bin;

dcl	error_table_$noentry
			fixed bin (35) ext;
dcl	fcb_ptr		ptr;
dcl	(vp, rloc)	ptr;

dcl	(null, addr, substr, index, pointer, rel, baseno, binary)
			builtin;

/*[4.0-1]*/
declare	1 LINE72		static int,		/*[4.0-1]*/
	  2 body		char (72),
	  2 nl		char (1);

/*[4.0-1]*/
declare	TAB		char (1) static int;	/*[4.0-1]*/
declare	(REC_NUM, STATE)	fixed bin static int;

/*[4.4-1]*/
declare	(fseg, rseg)	fixed bin;

dcl	rkb		fixed bin (35) based (addr (rkt));
dcl	rkt		char (5) aligned;
dcl	bc		fixed bin (24);
dcl	mcode		fixed bin (35);
dcl	(temp, st_num)	fixed bin;
dcl	len		fixed bin;
dcl	ename		char (32);
dcl	dname		char (168);

dcl	cistr		char (256) based (cifp);
dcl	cstr		char (256) based (cfp);
dcl	incstr		char (crl) based (crp);
dcl	instr		char (rl) based (rp);
dcl	str		char (rl) varying based (fp);
dcl	vstr		char (rl) varying based (vp);
dcl	fbb		fixed bin based (vp);
dcl	nt_vstr		char (rl) based (vp);

dcl	nl		char (1) static init ("
");

dcl	eof		bit (32) static init ("00000000000000000000000000100111"b);
dcl	bptr		bit (72) aligned based (addr (cifp));

dcl	cobol_db_phase$get_rec
			entry (ptr, fixed bin);
dcl	cobol_db_phase$get_tok
			entry (ptr, fixed bin);
dcl	cobol_db_phase$get_perf
			entry (ptr, fixed bin);
dcl	cobol_ms_handler$get
			entry (ptr, ptr, bit (32), ptr, fixed bin) ext;
dcl	cobol_ms_handler$put
			entry (ptr, ptr, bit (32)) ext;
dcl	msf_manager_$open	entry (char (*), char (*), fixed bin (35));
dcl	msf_manager_$adjust entry (ptr, fixed bin, fixed bin (24), bit (3), fixed bin (35));
dcl	msf_manager_$get_ptr
			entry (ptr, fixed bin, bit (1), ptr, fixed bin (24), fixed bin (35));
dcl	hcs_$make_seg	entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl	hcs_$initiate	entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl	hcs_$truncate_seg	entry (ptr, fixed bin, fixed bin (35));
dcl	hcs_$terminate_seg	entry (ptr, fixed bin (1), fixed bin (35));
dcl	hcs_$terminate_noname
			entry (ptr, fixed bin (35));
dcl	hcs_$set_bc_seg	entry (ptr, fixed bin (24), fixed bin (35));
dcl	expand_pathname_	entry (char (*), char (*), char (*), fixed bin (35));
dcl	com_err_		entry options (variable);
dcl	error_table_$improper_data_format
			fixed bin (35) ext;

dcl	hcs_$fs_get_path_name
			entry options (variable) ext;
dcl	ioa_		entry options (variable);
dcl	db		entry;


%include cobol_ext_;
%include cobol_fixed_common;
     end cobol_io_;
 



		    cobol_lex.pl1                   05/24/89  1045.1rew 05/24/89  0834.8       67590



/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_lex.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 10/27/82 by FCH,  [5.2-1] ,save last line num, BUG543(phx13643) */
/* Modified on 12/21/81 by FCH, [5.1-1], issue diag if long line found, phx11819(BUG517) */
/* Modified on 10/15/80 by PRP, [4.4-1], report writer */
/* Modified on 05/02/79 by FCH, [4.0-2], debug statement */
/* Modified on 03/29/79 by FCH, [4.0-1], detect dupl data names */
/* Modified since Version 4.0 */


/* format: style3 */
cobol_lex:
     proc;

/* This run initializes all global data and contains the main loop of lex. */

/*   reserved_word    */

dcl	1 reserved_word	based (cobol_current),
	  2 fwd_link	pointer,
	  2 back_link	pointer,
	  2 rep_link	pointer,
	  2 l_info	bit (8),
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin,		/* = 1 */
	  2 key		fixed bin,
	  2 class		bit (26),
	  2 jump_index	fixed bin;


/* global pointers for the token table */

dcl	phoney		fixed bin;		/* phoney end of list */
dcl	cobol_merge	entry external;
dcl	cobol_report_writer entry external;
dcl	cobol_gns		entry external;
dcl	cobol_res_words	entry external;		/* dcl cobol_check_rep	entry external;  */
dcl	cobol_output_tokens entry external;
dcl	cobol_swf_put	entry (ptr, bit (32), ptr, fixed bin) ext;
dcl	st		bit (32);
dcl	elt_buf		char (440);
declare	(addr, null, substr, unspec)
			builtin;

/* [4.0-1] */
dcl	cobol_gns$init_tok_string
			entry;			/*[4.0-2]*/
dcl	cobol_io_$initialize
			entry;			/*[4.0-2]*/
dcl	cobol_output_tokens$initialize
			entry;			/*[4.0-2]*/
dcl	cobol_res_words$initialize
			entry;			/*[4.0-2]*/
dcl	cobol_gns$initialize
			entry;			/*[4.0-2]*/
dcl	cobol_merge$initialize
			entry;			/*[4.4-1]*/
declare	cobol_db_phase$initialize
			entry;
dcl	rw		entry (ptr, ptr);








	cobol_$date_compiled_sw = 0;
	cobol_mfp = cobol_m1fp;
	cobol_prime_sw = "1"b;
	cobol_stack_sw = "0"b;
	cobol_continuation = "1"b;
	cobol_copy_found = "0"b;
	cobol_copy_active = "0"b;
	cobol_debug_mode = "0"b;
	cobol_rwt_init_sw = "1"b;
	cobol_elnp_sw = "1"b;
	cobol_lu_sw = "1"b;
	cobol_scanoff_sw = "0"b;
	cobol_output_sw = "0"b;
	cobol_rep_sw = "0"b;

	cobol_init_ta_sw = "1"b;
	cobol_lex_exit = l_e1;
	cobol_pic_switch = "0"b;
	cobol_allo_init_sw = "1"b;
	cobol_endprog_sw = "0"b;
	cobol_progid_sw = "0"b;
	cobol_elt_idx = 1;
	cobol_elt_buf_ptr = addr (elt_buf);
	cobol_c_l_n = 0;
	cobol_dp_sw = "0"b;				/* indicates no decimal-point clause yet */
	cobol_decimal_point_character = ".";
	cobol_comma_character = ",";
	cobol_si_key = "00000";
	cobol_so_key = "00000";
	cobol_name_number = 1;
	cobol_section_number = 1;
	unspec (cobol_new_line_character) = "000001010"b;

	do phoney = 1 to 5;
	     cobol_head_words (phoney) = "0"b;
	end;

	do phoney = 1 to 2;
	     cobol_rec1_sw (phoney) = "0"b;
	     cobol_ln_sw (phoney) = "0"b;
	end;

/* [4.0-1] */
	call cobol_gns$init_tok_string;		/*[4.0-2]*/
	call cobol_io_$initialize;			/*[4.0-2]*/
	call cobol_output_tokens$initialize;		/*[4.0-2]*/
	call cobol_gns$initialize;			/*[4.0-2]*/
	call cobol_merge$initialize;			/*[4.4-1]*/
	call cobol_db_phase$initialize;

/*[4.0-2]*/
	call cobol_res_words$initialize;

	cobol_ta_ptr = addr (cobol_tarea);
	cobol_current = cobol_ta_ptr;
	reserved_word.fwd_link = null ();
	reserved_word.back_link = null ();
	reserved_word.rep_link = null ();
	reserved_word.l_info = "00100000"b;		/* suppress output first time into cobol_output_tokens */
	cobol_frst = cobol_ta_ptr;			/* causes main stack to be started  */
	cobol_top = cobol_ta_ptr;
	cobol_endprog_sw = "0"b;
	real_end_report = "0"b;
	processing_report = "0"b;

	call cobol_merge;

	do while (^cobol_endprog_sw);

	     call cobol_gns;

	     if substr (reserved_word.l_info, 1, 1) = "0"b
	     then /* 	if cobol_rep_sw = "1"b then call cobol_check_rep;   */
		if reserved_word.type = 8
		then call cobol_res_words;

	end;

l_e1:
	call cobol_output_tokens;

	cobol_m2fp = cobol_mfp;			/*[4.4-1]*/

	if fixed_common.fatal_no ^= 0
	then return;

/* The following code calls cobol_report_writer and processes the new source */

	if report_exists
	then do;

		processing_report = "1"b;
		cobol_output_sw = "0"b;
		cobol_head_words (5) = "0"b;

		call cobol_report_writer;

/*[5.1-1]*/
		call get_size (cobol_rwdd);

		ph_num = 2;
		cobol_mfp = cobol_m1fp;
		cobol_lex_exit = l_e2;

		call cobol_merge;

		do while (^cobol_endprog_sw);

		     call cobol_gns;

		     if substr (reserved_word.l_info, 1, 1) = "0"b
		     then if reserved_word.type = 8
			then call cobol_res_words;

		end;

l_e2:
		call cobol_output_tokens;

		cobol_head_words (5) = "1"b;

/*[5.1-1]*/
		call get_size (cobol_rwpd);

		ph_num = 3;
		cobol_output_sw = "0"b;
		cobol_mfp = cobol_m2fp;
		cobol_lex_exit = l_e3;
		real_end_report = "1"b;

		call cobol_merge;

		do while (^cobol_endprog_sw);

		     call cobol_gns;
		     if substr (reserved_word.l_info, 1, 1) = "0"b
		     then if reserved_word.type = 8
			then call cobol_res_words;

		end;

l_e3:
		call cobol_output_tokens;

	     end;

/*[5.1-2]*/
	fixed_common.cobol_cln = cobol_c_l_n;		/* save last line num */

	return;

get_size:
     proc (p);

/*[5.1-1]*/
dcl	p		ptr;			/*[5.1-1]*/
dcl	hcs_$fs_get_path_name
			entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
						/*[5.1-1]*/
dcl	hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35));
						/*[5.1-1]*/
dcl	cobol_merge$source_file_size
			entry (fixed bin (24));	/*[5.1-1]*/
						/*[5.1-1]*/
dcl	dn_1		char (168),
	en_1		char (32);		/*[5.1-1]*/
dcl	code		fixed bin (35),
	ldn		fixed bin;		/*[5.1-1]*/
dcl	s_ptr		ptr;			/*[5.1-1]*/
dcl	bc		fixed bin (24);


/*[5.1-1]*/
	cobol_current = cobol_ta_ptr;			/*[5.1-1]*/
	reserved_word.fwd_link = null ();		/*[5.1-1]*/
	reserved_word.back_link = null ();		/*[5.1-1]*/
	reserved_word.rep_link = null ();		/*[5.1-1]*/
	reserved_word.l_info = "00100000"b;		/*[5.1-1]*/
	cobol_frst = cobol_ta_ptr;			/*[5.1-1]*/
	cobol_top = cobol_ta_ptr;			/*[5.1-1]*/
	cobol_sfp = p;				/*[5.1-1]*/
	cobol_endprog_sw = "0"b;			/*[5.1-1]*/
						/*[5.1-1]*/
	call hcs_$fs_get_path_name (p, dn_1, ldn, en_1, code);
						/*[5.1-1]*/
						/*[5.1-1]*/
	if code ^= 0
	then go to err;				/*[5.1-1]*/
						/*[5.1-1]*/
	call hcs_$initiate_count (dn_1, en_1, "", bc, 1, s_ptr, code);
						/*[5.1-1]*/
						/*[5.1-1]*/
	if s_ptr = null ()
	then go to err;				/*[5.1-1]*/
						/*[5.1-1]*/
	call cobol_merge$source_file_size (bc);

     end;

err:						/*[5.1-1]*/
	return;

%include cobol_ext_;
%include cobol_ext_lex;
%include cobol_;
%include cobol_fixed_common;

     end cobol_lex;
  



		    cobol_lexerr.pl1                05/24/89  1045.1rew 05/24/89  0834.6       33273



/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_lexerr.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* 5/27/77, FCH, fixed bin decls standardized */
/* Last modified on 09/08/76 by ORN to add lexerr4 entry for caller specified column */
/* Modified on 1/21/76 by John O'Neil to use c_l_n rather than c_l_n + 1 for tln  in lexerr2 entry.
	Merge (the only caller) has already updated the c_l_n.  */

/* format: style3 */
cobol_lexerr:
     proc (nr, opt, len, d_b_m);

/* ========================================================================== */
/* This procedure issues diagnostics for lex.  It has three input parameters, as follows: */
/* 	1.  A 2-bit director.  If bit 1 is on a scan is made to the next space or new-line in the source input.   */
/* 	    If bit 2 is on a diagnostic parameter is specified in parameter 3.  */
/* 	2.  The diagnostic number.  If it is zero a complete diagnostic is specified in parameter 3.  */
/* 	3.  This parameter can be omitted if the diagnostic number is not zero and director bit 2 is zero.  */
/* ========================================================================== */


/*   message    */

dcl	1 message		based (cobol_current),
	  2 fwd_link	pointer,
	  2 back_link	pointer,
	  2 rep_link	pointer,
	  2 l_info	bit (8),
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin,		/* = 5 */
	  2 run		fixed bin,
	  2 number	fixed bin,
	  2 info		bit (8),
	  2 length	fixed bin,
	  2 image		char (200);

dcl	cobol_insert_token	entry (fixed bin, fixed bin) external;
dcl	substr		builtin;

dcl	(nr, len, tcol, tln)
			fixed bin,		/* error number from input */
	(opt, topt)	bit (1),
	d_b_m		char (200),
	q		pointer static;

declare	incol		fixed bin;

	topt = opt;
	tln = message.line;
	tcol = message.column;
	goto start;

lexerr2:
     entry (nr, opt, len, d_b_m);

	tln = cobol_c_l_n;
	tcol = 0;
	topt = opt;
	goto start;

lexerr3:
     entry (nr, opt, len, d_b_m);

	tln = cobol_save_cln;
	tcol = cobol_save_col;
	go to start3;

lexerr4:
     entry (nr, opt, len, d_b_m, incol);

	tln = cobol_c_l_n;
	tcol = incol;
	topt = opt;
	go to start;

lexerr1:
     entry (nr, opt, len, d_b_m);

	topt = "0"b;
	tln = cobol_save_cln;
	tcol = cobol_save_col;

start:
	substr (message.l_info, 3, 1) = topt;

start3:
	call cobol_insert_token (5, len);		/* allocate the 5, len token */

	message.line = tln;
	message.column = tcol;
	message.info = "0"b;
	substr (message.info, 2, 1) = opt;
	message.run = 1;
	message.number = nr;

	if len ^= 0
	then /* if complete diag or parameter is given here... */
	     do;
		if nr ^= 0
		then substr (message.info, 1, 1) = "1"b;/* indicate parameter */

		message.length = len;
		substr (message.image, 1, message.length) = substr (d_b_m, 1, len);
	     end;


%include cobol_ext_lex;

     end cobol_lexerr;
   



		    cobol_merge.pl1                 05/24/89  1045.1rew 05/24/89  0834.5      164340



/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_merge.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 11/19/81 by FCH, [5.1-2], count lines issued by copy files, phx11818(BUG519) */
/* Modified on 10/27/81 by FCH, [5.1-1], issue diag if long line found, phx11819(BUG517) */
/* Modified on 04/09/81, BUG477 by FCH, [4.4-2], fix bugs in leveling for validation-81, BUG477 */
/* Modified on 10/15/80 by PRP [4.4-1], report writer changes*/
/* Modified on 10/20/79 by PRP [4.1-1], mask debug lines from statement_info */
/* Modified on 04/24/79 by FCH, [4.0-2], debug statement */
/* Modified on 04/24/79 by FCH, [4.0-1], prevent loop if end cobol generated */
/* Modified on 07/34/78 by RAL, [3.0-2], fixed bug with blank card after copy statement */
/* Modified on 06/23/78 by FCH, [3.0-1], ref to cobol_put_eln.incl.pl1 replaced by code */
/* Modified since Version 3.0 */

/* format: style3 */
cobol_merge:
     proc;

/* ========================================================================== */
/*                                                                            */
/* this is a procedure to obtain the next source cards.name from the input   */
/* file , sequence check this cards and make it available for processing.     */
/* other functions performed by this procedure are the following ::           */
/*       process comment cards.                                               */
/*       obtain the next cards for continuation processor(look ahead).        */
/*       handle the end of data problems.                                     */
/*                                                                            */
/* ========================================================================== */



start:						/* FIRST CHECK IF END OF PROGRAM */
	if cobol_endprog_sw
	then go to cobol_lex_exit;

	if cobol_prime_sw
	then do;					/* if first time in...  */
		d_on_last_line = "0"b;
		cobol_prime_sw = "0"b;
		source_sr = cobol_sr;		/* save so copy can use sr too */
		dup_sw = "0"b;
		ln_err_sw = "0"b;
		n_c_eof (1) = "0"b;
		n_c_eof (2) = "1"b;
		statement_start = 0;
		line_n_c (1) = 0;
		line_n_c (2) = 10000000;

		goto begin_proc;
	     end;

	if cobol_copy_found				/* if COPY clause processed and COPY file initiated... */
	then do;					/* START SAVE AND INITIALATION */

		cobol_copy_found = "0"b;

/* save current source file cards  and asociated information to be restored after the copy */

		call cobol_allo_tm (save_cards, 272);
		cs1.c = cobol_cards.column;
		cs1.tb = cobol_cards.tblanks;

		if cobol_cards.nr_char = cobol_cards.column
		then do;

			if ^n_c_eof (1)
			then do;			/* Supress the source following COPY. */
				tptr = cobol_current -> source.back_link;

				do while (tptr -> source.type ^= 6);
				     tptr = tptr -> source.back_link;
				end;

				substr (tptr -> source.l_info, 3, 1) = "1"b;
			     end;

			cs1.nr = 8;

		     end;

		else cs1.nr = cobol_cards.nr_char + 1;	/* bypass the n_l set by proc_copy */

		cs1.n = cobol_cards.name;
		cs1.sc = cobol_continuation;
		save_statement_start = statement_start;
		statement_start = 0;
		cs1.sx = cobol_xlast8;
		cobol_xlast8 = "0"b;
		cobol_copy_active = "1"b;		/* ready to process copied text */
		ln_err_sw = "0"b;
		cobol_continuation = "0"b;
		line_n_c (2) = 0;			/* reset the sequence counter */
		n_c_eof (2) = "0"b;			/* reset the eof flag */

		if cobol_rep_sw = "1"b
		then cobol_stack_sw = "1"b;

/* Decrement c_l_n and decrement statement_start for this SOURCE statement (save_statement_start).
	   They will be incremented again when we restore this card. */

		cobol_c_l_n = cobol_c_l_n - 1;
		save_statement_start = save_statement_start - (cobol_cards.column + cobol_cards.tblanks);
						/*[3.0-2]*/

	     end;

begin_proc:					/* main loop control label */
						/* set global eof indicator if necessary */
	if (n_c_eof (1) & n_c_eof (2))
	then do;

/* provide generated cards trailer image */

/*[4.4-1]*/

		if report_exists
		then do;
			if real_end_report
			then ;
			else do;
				n_c_eof (1) = "0"b;
				cobol_endprog_sw = "1"b;
				return;
			     end;
		     end;
		else ;

/*[4.4-1]*/

/*[4.0-1]*/
		if end_card_emit			/*[4.0-1]*/
		then do;
			cobol_endprog_sw = "1"b;	/*[4.0-1]*/
			call cobol_lexerr$lexerr3 (38, "0"b, 0, " ");
						/*[4.0-1]*/
		     end;

		cobol_cards.nr_char = 8;
		cobol_cards.column = 18;		/* show this as generated */
						/*[4.0-1]*/
		substr (cobol_cards.name, 1, 18) = "~~~~~~ end cobol." || cobol_new_line_character;
		cobol_continuation = "0"b;

/* Update cln, but don't call update_line_info to do it! Since no source token was
		   generated for "end cobol", update_line_info would change the line & column fields
		   in whatever token cobol_current happens to be pointing  to. */

		cobol_c_l_n = cobol_c_l_n + 1;	/*[4.0-1]*/
		end_card_emit = "1"b;

		return;

	     end;

/* read new source if necessary */

next_source:
	if cobol_copy_active = "0"b
	then do;					/* source */
		i = 1;

/*[5.1-1]*/
		call cobol_get_rec (st, cobol_sfp, source_size, rptr, ptemp);

		if substr (st, 17, 16) = "0000000000100111"b
		then do;

/*[5.1-1]*/
			if source_size > 0
			then call cobol_lexerr$lexerr4 (40, "0"b, 0, " ", 7);

			line_n_c (1) = 1000000;
			n_c_eof (1) = "1"b;
			goto begin_proc;		/* file is now empty */
		     end;
	     end;
	else do;					/* GET LINE FROM COPY FILE */

		i = 2;

/*[5.1-1]*/
		call cobol_get_rec (st, cobol_cfp, copy_size, rptr, ptemp);

/*[5.1-2]*/
		if copy_size > 0
		then copy_lines = copy_lines + 1;

		if substr (st, 17, 16) = "0000000000100111"b
		then do;

/*[5.1-1]*/
			if copy_size > 0
			then call cobol_lexerr$lexerr4 (40, "0"b, 0, " ", 7);


			n_c_eof (2) = "1"b;
			cobol_rec1_sw (2) = "1"b;
			cobol_copy_active = "0"b;
			line_n_c (2) = 1000000;
			cobol_copy_active = "0"b;
			cobol_copy_found = "0"b;
			cobol_rep_sw = "0"b;
			cobol_stack_sw = "0"b;
			cobol_cards.column = cs1.c;
			cobol_cards.tblanks = cs1.tb;
			cobol_cards.nr_char = cs1.nr;
			cobol_cards.name = cs1.n;
			cobol_xlast8 = cs1.sx;
			cobol_continuation = cs1.sc;
			statement_start = save_statement_start;
			cobol_sr = source_sr;

/* * * free allocated token * * */

dcl	at_st		char (1) based (save_cards);

			save_cards = addrel (save_cards, -1);
			at_st = "2";


















			if n_c_eof (1)
			then return;

/* End of source, COPY was last statement...nothing to restore. */

			do while (substr (cobol_cards.name, cobol_cards.nr_char, 1) = " ");
			     cobol_cards.nr_char = cobol_cards.nr_char + 1;
			end;

			if substr (cobol_cards.name, cobol_cards.nr_char, 1) ^= cobol_new_line_character
			then do;

				call cobol_insert_token (6, cobol_ext_lex$cobol_cards.column);

				source.len = cobol_cards.column;
				substr (source.image, 1, source.len) = substr (cobol_cards.name, 1, source.len);
				substr (source.image, 1, cobol_cards.nr_char - 1) = " ";

				call update_line_info;

				return;
			     end;

			call update_line_info;	/* [3.0-2] */

			goto begin_proc;

		     end;
	     end;

	p = rptr;
	cobol_cards.column = ptemp;			/* -8 for ssf, +1 for n_l */
	substr (cobol_cards.name, 1, cobol_cards.column) = p -> n_c;

/* initialize a new token element */

	call cobol_insert_token (6, cobol_ext_lex$cobol_cards.column);

	source.sm = ssf_header.macro_expansion;
	source.copy = cobol_copy_active;
	source.sln = ssf_header.line_number;
	source.len = cobol_cards.column;

	if cobol_$date_compiled_sw > 0
	then if substr (cobol_cards.name, 7, 1) ^= "*" & substr (cobol_cards.name, 7, 1) ^= "/"
	     then if substr (cobol_cards.name, 8, 4) = "    "
		then source.len = 1;		/* make an empty line */

	substr (source.image, 1, source.len) = substr (cobol_cards.name, 1, source.len);
	substr (source.image, source.len, 1) = cobol_new_line_character;

	if cobol_rep_sw = "1"b
	then cobol_output_sw = "1"b;

	if cobol_xlast8 = "1"b & cobol_cards.column = 81
	then cobol_cards.column = 73;

	cobol_cards.tblanks = 0;

	do cobol_cards.column = cobol_cards.column - 1 to 9 by -1;

	     if substr (cobol_cards.name, cobol_cards.column, 1) = " "
	     then cobol_cards.tblanks = cobol_cards.tblanks + 1;
	     else goto eskb;

	end;

eskb:
	cobol_cards.column = cobol_cards.column + 1;
	substr (cobol_cards.name, cobol_cards.column, 1) = cobol_new_line_character;

	call update_line_info;

ck_seq_err:					/* extract first column for test */
	cobol_continuation = "0"b;

	if cobol_cards.column < 8
	then goto begin_proc;

	else do;
		c1 = substr (cobol_cards.name, 7, 1);	/* one character */

		if (c1 = "*") | (c1 = "/")
		then goto begin_proc;		/* comment */

/*[4.0-2]*/
		if c1 = "d" | c1 = "D"		/*[4.0-2]*/
		then do;
			if fixed_common.comp_level < "2"
			then call lev_diag (207);

/*[4.0-2]*/
			if cobol_debug_mode = "0"b
			then go to begin_proc;	/*[4.0-2]*/
		     end;

		cobol_cards.nr_char = 8;

		if c1 = "-"
		then do;				/* continue mode */

			if cobol_rwt_init_sw	/* if first text card in program... */
			then do;
				call cobol_lexerr$lexerr4 (9, "0"b, 0, " ", 7);
				goto begin_proc;
			     end;

			if d_on_last_line
			then call cobol_lexerr$lexerr4 (29, "0"b, 0, " ", 7);

			do while (substr (cobol_cards.name, cobol_cards.nr_char, 1) = " ");
			     cobol_cards.nr_char = cobol_cards.nr_char + 1;
			end;

			if cobol_cards.nr_char < 12
			then do;			/* Illegal continuation card */

				call cobol_lexerr$lexerr4 (8, "0"b, 0, " ", 7);
				cobol_cards.nr_char = 12;

			     end;

			cobol_continuation = "1"b;	/* show the proper mode */

/*[4.4-2]*/
			if fixed_common.comp_level < "3"
						/*[4.4-2]*/
			then if ^cobol_gns$alpha_lit ()
						/*[4.4-2]*/
			     then call lev_diag (1);

		     end;				/* last of continue */

		else if (c1 ^= " ") & (c1 ^= "d" & c1 ^= "D")
		then call cobol_lexerr$lexerr4 (18, "0"b, 0, " ", 7);

		d_on_last_line = ((c1 = "d" | c1 = "D") & cobol_debug_mode) | (d_on_last_line & cobol_continuation);

	     end;					/* case of short line */
exit:
	return;

copy_file_size:
     entry (BC);

/*[5.1-1]*/
	copy_size = BC / 9;				/*[5.1-1]*/
	return;

source_file_size:
     entry (BC);

/*[5.1-1]*/
	source_size = BC / 9;			/*[5.1-1]*/
	return;

/*[5.1-1]*/
declare	BC		fixed bin (24);		/*[5.1-1]*/
declare	(source_size, copy_size)
			fixed bin static internal;

copy_line_count:
     entry returns (fixed bin);

/*[5.1-2]*/
	return (copy_lines);

/*[5.1-2]*/
dcl	copy_lines	fixed bin static int;

incr_line_count:
     entry;

/*[5.1-1]*/
	copy_lines = copy_lines + 1;

/*[5.1-1]*/
	return;

initialize:
     entry;

/*[4.0-1]*/
	end_card_emit = "0"b;			/*[5.1-2]*/
	copy_lines = 0;

/*[4.0-1]*/
	return;

update_line_info:
     proc;

/* general overlay for any token */

dcl	1 token		based (cobol_current),
	  2 fwd_link	ptr,
	  2 back_link	ptr,
	  2 rep_link	ptr,
	  2 l_info	bit (8),
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin;

start_update_line_info:				/*[4.4-1*/
						/* Mask debug and report writer from statement info */
						/*[4.0-2]*/
	if substr (source.image, 1, 6) ^= "~~~~~~"	/* & ^processing_report*/
	then cobol_c_l_n = cobol_c_l_n + 1;

/* [3.0-1] */

dcl	(code, last_line, c_x_l, copy_fileno, cur_fileno, save_c_x_l)
			fixed bin (17) static;
dcl	1 source1		based (cobol_current),
	  2 fwd_link	ptr,
	  2 back_link	ptr,
	  2 rep_link	ptr,
	  2 l_info	bit (8),
	  2 size		fixed bin (17),
	  2 fill1		fixed bin (17),
	  2 fill		char (1),
	  2 sm		bit (1),
	  2 copy		bit (1),
	  2 sln		bit (22),
	  2 type		fixed bin (17);


	if cobol_elnp_sw = "1"b
	then do;

		cobol_elnp_sw = "0"b;
		last_line = 0;
		copy_fileno = 0;
		save_c_x_l = 0;
		c_x_l = 0;

	     end;

	if source1.copy = "1"b
	then do;

		if last_line = 1
		then do;

			last_line = 0;
			save_c_x_l = c_x_l - 1;
			c_x_l = 0;
			copy_fileno = copy_fileno + 1;
			cur_fileno = copy_fileno;

		     end;

		if substr (source1.l_info, 1, 1) = "1"b
		then c_x_l = c_x_l - 1;

	     end;

	else do;

		if last_line = 0
		then do;

			last_line = 1;
			cur_fileno = 0;
			c_x_l = save_c_x_l;

		     end;

	     end;

/*[4.4-1]*/
/*Mask debug and report writer lines from statement_info */

	if substr (source.image, 1, 6) ^= "~~~~~~"	/* & ^processing_report*/
						/*[4.1-1]*/
	then do;

		c_x_l = c_x_l + 1;

		eln_tab.fno (cobol_c_l_n) = cur_fileno;
		eln_tab.lno (cobol_c_l_n) = c_x_l;

		statement_info.start (cobol_c_l_n) = statement_start;
		statement_info.length (cobol_c_l_n) = cobol_cards.column - 1;
						/* Do not include new_line_char. */
		statement_start = statement_start + cobol_cards.column + cobol_cards.tblanks;

	     end;					/*[4.1-1]*/

/* [3.0-1] */
	token.line = cobol_c_l_n;
	token.column = 0;

exit_update_line_info:
	return;

     end update_line_info;

delete_group:
     proc (rep_point);


/* ========================================================================== */
/*                                                                            */
/* This routine is intended to perform the physical space release for the     */
/* replacement directory elements.  It is called       */
/* with a pointer to a line within the directory to be released.              */
/*                                                                            */
/* ========================================================================== */



/*   general overlay for any replacement token    */

dcl	1 rtoken		based (rep_point),
	  2 chain		pointer,
	  2 back_link	pointer,
	  2 lev_link	pointer,
	  2 l_info	bit (8),
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin (7),
	  2 type		fixed bin (7);

dcl	(rep_point, rchain) pointer;

start_delete_group:
ck_lev:
	if rtoken.lev_link ^= null ()
	then call delete_group (rtoken.lev_link);
	rchain = rtoken.chain;

/* * * free allocated token * * */

dcl	at_st2		char (1) based (rep_point);

	rep_point = addrel (rep_point, -1);
	at_st2 = "2";

	rep_point = rchain;

	if rep_point ^= null ()
	then goto ck_lev;

exit_delete_group:
	return;

     end delete_group;

lev_diag:
     proc (num);

/*[4.0-2]*/
declare	num		fixed bin;

/*[4.0-2]*/
	lev_message.line = cobol_c_l_n;		/*[4.0-2]*/
	lev_message.column = 7;			/*[4.0-2]*/
	lev_message.number = num;

/*[4.0-2]*/
	call cobol_c_list (addr (lev_message));

     end;

/*[4.0-2]*/
declare	cobol_c_list	entry (ptr);

/*[4.0-2]*/
declare	1 lev_message	static int,		/*[4.0-2]*/
	  2 size		fixed bin init (28),	/*[4.0-2]*/
	  2 line		fixed bin init (0),		/*[4.0-2]*/
	  2 column	fixed bin init (0),		/*[4.0-2]*/
	  2 type		fixed bin init (5),		/*[4.0-2]*/
	  2 run		fixed bin init (9),		/*[4.0-2]*/
	  2 number	fixed bin init (0),		/*[4.0-2]*/
	  2 info		bit (32) init ("0"b);



/*[4.0-1]*/
dcl	(d_on_last_line, end_card_emit)
			bit (1) static;

/*   source    */
dcl	1 source		based (cobol_current),
	  2 fwd_link	pointer,
	  2 back_link	pointer,
	  2 rep_link	pointer,
	  2 l_info	bit (8),
	  2 size		fixed bin,
	  2 fill1		fixed bin,
	  2 fill		char (1),
	  2 sm		bit (1),
	  2 copy		bit (1),
	  2 sln		bit (22),
	  2 type		fixed bin,		/* = 6 */
	  2 info		bit (8),
	  2 len		fixed bin,
	  2 image		char (200);

/* save area for library file <-> source file transfer */

dcl	save_cards	pointer static;

dcl	1 cs1		based (save_cards),
	  2 (c, tb, nr)	fixed bin,
	  2 n		char (256),
	  2 sx		bit (1),
	  2 sc		bit (1);



dcl	n_c		char (256) based;		/*  source card images */

dcl	cobol_allo_tm	entry (ptr, fixed bin) ext;

dcl	cobol_lexerr$lexerr2
			entry (fixed bin, bit (1), fixed bin, char (50)) external;
dcl	cobol_lexerr$lexerr3
			entry (fixed bin, bit (1), fixed bin, char (50));
dcl	cobol_lexerr$lexerr4
			entry (fixed bin, bit (1), fixed bin, char (50), fixed bin) external;

/*[4.4-2]*/
dcl	cobol_gns$alpha_lit entry returns (bit (1));

dcl	cobol_insert_token	entry (fixed bin, fixed bin) external;

dcl	ioop		char (10);

declare	bc		fixed bin (24);

dcl	p		pointer static,
	c1		char (1) static,
	(
	ln_err_sw,
	n_c_eof		(2),
	dup_sw
	)		bit (1) static,
	line_n_c		(2) fixed bin (31) static,
	(i, j, ptemp, source_sr)
			fixed bin static;
dcl	statement_start	fixed bin (24) static;
dcl	save_statement_start
			fixed bin (24) static;

/* NPL IO DECLARATIONS */

dcl	st		bit (32);
dcl	(rptr, tptr)	ptr;
dcl	cobol_cselfle	entry (bit (32), ptr, char (*), char (3), fixed bin, char (1), bit (8)) ext;
dcl	cobol_get_rec	entry (bit (32), ptr, fixed bin, ptr, fixed bin) ext;

dcl	1 crec		based (rptr),
	  2 rpt_code	bit (5),
	  2 item_code	bit (3),
	  2 hdr_byte2	char (1),
	  2 crt		bit (8),
	  2 rfu		char (3),
	  2 fmt		char (2),
	  2 text,
	    3 lev		char (3),
	    3 cr_dt	char (5),
	    3 upd		char (5),
	    3 mod		char (2),
	    3 bcnt	char (10),
	    3 lncnt	char (7),
	    3 lang	char (3),
	    3 name	char (32);

dcl	1 source_record	based (rptr),
	  2 ssf_header,
	    3 report_code	bit (5),
	    3 item_code	bit (3),
	    3 record_type	bit (1),
	    3 must_be_zero	bit (1),
	    3 reserved_for_future_use
			bit (1),
	    3 text_code	bit (5),
	    3 trailing_blanks
			bit (8),
	    3 macro_expansion
			bit (1),
	    3 include	bit (1),
	    3 line_number	bit (22),
	    3 form_control	char (2),
	  2 text		char (256);

dcl	addr		builtin;
dcl	null		builtin;
dcl	bit		builtin;
dcl	bin		builtin;
dcl	fixed		builtin;
dcl	addrel		builtin;
dcl	substr		builtin;



%include cobol_ext_;
%include cobol_;
%include cobol_eln_table;
%include cobol_ext_lex;
%include cobol_fixed_common;

     end cobol_merge;




		    cobol_ms_handler.pl1            05/24/89  1045.1rew 05/24/89  0834.5       45036



/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_ms_handler.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 08/02/77 by Bob Chang to fix the bug for declaration of digit identifier. */
/* Modified on 11/15/76 by Bob Chang to make the declaration for entry explicitly. */
/* Modified since Version 2.0	*/

/*{*/

/* Write on 1-29-76 by Bob Chang	*/

/* format: style3 */
cobol_ms_handler:
     proc (fp, vp, st, rp, rl);

/* This procedure is to handle multi_segment working file.	*/

dcl	code		fixed bin (35),
	fp		ptr,
	rp		ptr,			/* points to the current token */
	rl		fixed bin,		/* length of the current token */
	vstr		char (rl) var based (vp),
	st		bit (32),			/* status code for io */
	vp		ptr;

/*
	code	for return status code.
	fp	points to the current working file. (input and output)
	vp	points to the current token. (input and output)
	*/

dcl	new_ptr		ptr,			/* temporary pointer */
	temp_ptr		ptr,			/* temporary pointer */
	temp_fc		char (4),			/* temporary file_code */
	temp_no		fixed bin,		/* temporary file number. */
	(length, pointer, index, divide, substr, addrel)
			builtin;
dcl	hcs_$fs_get_path_name
			entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
dcl	hcs_$truncate_seg	entry (ptr, fixed bin (18), fixed bin (35));
dcl	hcs_$delentry_file	entry (char (*), char (*), fixed bin (35));
dcl	hcs_$make_seg	entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl	com_err_		entry options (variable) ext;

dcl	digit		(6) char (1) static init ("1", "2", "3", "4", "5", "6");
						/* array for conversion*/
dcl	dir_name		char (168),		/* directory _name of the file */
	len		fixed bin,		/* length of the directory name */
	len1		fixed bin,		/* length of the entry_name */
	entry_name	char (32);		/* entry name of the file */

dcl	1 shdr		based (fp) aligned,		/* header of working file */
	  2 x1		char (12),
	  2 next		fixed bin,		/* offset of next token */
	  2 code		fixed bin,		/* 10 for sequential file */
	  2 x3		char (4),			/* unused */
	  2 next_file	ptr,			/* points to next working file */
	  2 prev_file	ptr,			/* points to previous file */
	  2 fc		char (4),			/* file code for each different kind of file */
	  2 file_no	fixed bin,		/* file count for each working file */
	  2 x2		char (12),		/* unused */
	  2 first		fixed bin;		/* first token */

/*}*/


/**************************************************/
/*	START OF EXECUTION			*/
/*	ENTRY POINT:  get			*/
/**************************************************/


get:
     entry (fp, vp, st, rp, rl);

	if next_file ^= null ()
	then do;
		fp = next_file;
		shdr.next = 15;
		vp = pointer (fp, shdr.next);
		rp = addrel (vp, 1);
		rl = first;
		shdr.next = shdr.next + divide (rl + 7, 4, 17, 0);
		st = ""b;
	     end;
	else do;
		st = "00000000000000000000000000100111"b;
						/* end of file */
	     end;
	return;



/**************************************************/
/*	START OF EXECUTION			*/
/*	ENTRY POINT:  put			*/
/**************************************************/


put:
     entry (fp, vp, st);

	vp = pointer (fp, shdr.next);
	vstr = "";
	call hcs_$fs_get_path_name (fp, dir_name, len, entry_name, code);
	if code ^= 0
	then call com_err_ (code, "cobol_ms_handler", "fail to get path name");
	if file_no > 5
	then call com_err_ (0, "cobol_ms_handler", "too many work files for ^a", entry_name);
	len1 = index (entry_name, " ") - 1;
	if file_no > 0
	then len1 = len1 - 1;
	temp_no = file_no + 1;
	entry_name = substr (entry_name, 1, len1) || digit (temp_no);
	call hcs_$delentry_file (dir_name, entry_name, code);
	call hcs_$make_seg (dir_name, entry_name, "", 01011b, new_ptr, code);
	if code ^= 0 | new_ptr = null ()
	then call com_err_ (0, "cobol_ms_handler", "fail to create new working file for ^a", entry_name);
	call hcs_$truncate_seg (new_ptr, 0, code);
	if code ^= 0
	then call com_err_ (code, "cobol_ms_handler", "fail to truncate ^a", entry_name);
	next_file = new_ptr;
	temp_ptr = fp;
	temp_fc = fc;
	fp = new_ptr;
	prev_file = temp_ptr;
	next_file = null ();
	shdr.code = 10;
	shdr.next = 15;
	fc = temp_fc;
	file_no = temp_no;
	return;

     end cobol_ms_handler;




		    cobol_ntio.pl1                  05/24/89  1045.1rew 05/24/89  0834.5       24741



/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_ntio.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Created on 02/09/77 by ORN */

/* format: style3 */
cobol_ntio:
     proc;

dcl	rp		ptr parameter;
dcl	rk		char (5) aligned parameter;
dcl	eof		fixed bin parameter;
dcl	eof1		fixed bin parameter;

dcl	rkb		fixed bin based (addr (rk));
dcl	rl		based (rp);
dcl	str		char (rl) based;

dcl	1 vhdr		based (cobol_ext_$cobol_ntfp) aligned,
	  2 fill		char (8),
	  2 next_get	fixed bin,
	  2 next_put	fixed bin,
	  2 code		fixed bin;


/*************************************/
dget:
     entry (rp, rk);
	rp = pointer (cobol_ext_$cobol_ntfp, rkb);
	vhdr.next_get = rkb + divide (rl + 11, 8, 35, 0) * 2;
	return;

/**************************************/
sget:
     entry (rp, eof);
	rp = pointer (cobol_ext_$cobol_ntfp, vhdr.next_get);
	if rl <= 0
	then eof = 1;
	else vhdr.next_get = vhdr.next_get + divide (rl + 11, 8, 35, 0) * 2;
	return;

/**************************************/
sget_key:
     entry (rp, rk, eof1);
	rp = pointer (cobol_ext_$cobol_ntfp, vhdr.next_get);
	if rl <= 0
	then eof = 1;
	else do;
		rk = "     ";
		rkb = vhdr.next_get;
		vhdr.next_get = vhdr.next_get + divide (rl + 11, 8, 35, 0) * 2;
	     end;
	return;

/**************************************/
dput:
     entry (rp, rk);
	pointer (cobol_ext_$cobol_ntfp, rkb) -> str = rp -> str;
	return;

/**************************************/
sput:
     entry (rp);
	pointer (cobol_ext_$cobol_ntfp, vhdr.next_put) -> str = rp -> str;
	vhdr.next_put = vhdr.next_put + divide (rl + 11, 8, 35, 0) * 2;
	return;

/**************************************/
sput_key:
     entry (rp, rk);
	pointer (cobol_ext_$cobol_ntfp, vhdr.next_put) -> str = rp -> str;
	rk = "     ";
	rkb = vhdr.next_put;
	vhdr.next_put = vhdr.next_put + divide (rl + 11, 8, 35, 0) * 2;
	return;

%include cobol_ext_;

     end cobol_ntio;
   



		    cobol_opch_is.pl1               05/24/89  1045.1rew 05/24/89  0834.3       43335



/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_opch_is.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* format: style3 */
cobol_opch_is:
     proc (source_ptr, target_ptr);

/*
This procuedre sets up an argument list and calls an alm procedure
which in turn calls the cobol overpunch operator to move an
initial value into an overpunch sign data item in the constant section.
*/

/*  DECLARATION OF THE PARAMETERS  */

dcl	source_ptr	ptr;
dcl	target_ptr	ptr;

/*  DESCRIPTION OF THE PARAMETERS  */

/*
PARAMETER	DESCRIPTION

source_ptr	Pointer to the data name (type 9) token in the constant
		section to be initialized.(input)
target_ptr	Pointer to the space in the constant segment to be
		initialized. (input)
*/

/*  DECLARATIONS OF EXTERNAL ENTRIES  */

dcl	cobol_opch_init	ext entry (ptr, ptr, bit (36), bit (36), fixed bin (35), fixed bin (35));

/*  DECLARATIONS OF BUILTIN FUNCTIONS  */

dcl	addrel		builtin;
dcl	addr		builtin;
dcl	bin		builtin;
dcl	bit		builtin;
dcl	fixed		builtin;
dcl	substr		builtin;


/*  DECLARATIONS OF INTERNAL VARIABLES  */

dcl	work_ptr		ptr;
dcl	work_space	char (40);

dcl	1 s_scale		aligned,
	  2 scale		fixed bin (17) unaligned,
	  2 precision	fixed bin (17) unaligned;

dcl	1 t_scale		aligned,
	  2 scale		fixed bin (17) unaligned,
	  2 precision	fixed bin (17) unaligned;

dcl	temp_precision	fixed bin (17);
dcl	s_code		fixed bin (35);
dcl	t_code		fixed bin (35);

dcl	source_scale	bit (36) based (s_scale_ptr);
dcl	target_scale	bit (36) based (t_scale_ptr);

dcl	s_scale_ptr	ptr;
dcl	t_scale_ptr	ptr;

dcl	dn_ptr		ptr;



/**************************************************/
/*	START OF EXECUTION		*/
/**************************************************/


	s_scale_ptr = addr (s_scale);
	t_scale_ptr = addr (t_scale);			/*  Establish addressability to the initial value extension.  */
	num_init_ptr = addrel (source_ptr, divide (source_ptr -> data_name.initial_ptr, 4, 17));

	work_ptr = addr (work_space);

/*  Check to see whether the constant or zero should be moved to the constant section.  */
	if (num_init.places_right + source_ptr -> data_name.places_left) <= 0
	     | (num_init.places_left + source_ptr -> data_name.places_right) <= 0 | (num_init.fig_con = "1"b)
	then do;					/*  Move zero to the constant segment, because no part of the source field (the literal)
	can be contained in the target.  */

		substr (work_space, 1, 1) = "0";	/*  Insert trailing sign  */
		if num_init.sign = " "
		then substr (work_space, 2, 1) = "+";	/*  default plus  */
		else substr (work_space, 2, 1) = num_init.sign;

/*  Calculate the precision of the new source. (places right)  */
		temp_precision = 1 - source_ptr -> data_name.places_left;

		s_scale.scale = temp_precision;
		s_scale.precision = 2;

	     end;					/*  Move zero to the constant segment, because no part of the source field (the literal)
		can be contained in the target variable.  */


	else do;					/*  Construct a trailing sign decimal constant to be the source.  */

		substr (work_space, 1, num_init.places) = substr (num_init.literal, 1, num_init.places);

		if num_init.sign = " "
		then substr (work_space, num_init.places + 1, 1) = "+";
		else substr (work_space, num_init.places + 1, 1) = num_init.sign;

		s_scale.scale = num_init.places_right;
		s_scale.precision = num_init.places + 1;

	     end;					/*  Construct a trailing sign decimal constant to be the source.  */

	s_code = 3;				/*  Unpacked decimal, trailing sign source.  */

	if source_ptr -> data_name.sign_type = "010"b	/*  leading overpunch  */
	then t_code = 1;
	else t_code = 2;				/*  trailing overpunch  */

	t_scale.scale = source_ptr -> data_name.places_right;
	t_scale.precision = source_ptr -> data_name.item_length;

	call cobol_opch_init (work_ptr, target_ptr, source_scale, target_scale, s_code, t_code);


/*  INCLUDE FILES USED BY THIS PROCEDURE  */

%include cobol_type9;


%include cobol_init_val_ext;


     end cobol_opch_is;
 



		    cobol_output_tokens.pl1         05/24/89  1045.1rew 05/24/89  0834.3      156204



/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
     MCR8060 cobol_output_tokens.pl1 Reformatted code to new Cobol standard.
                                                   END HISTORY COMMENTS */


/* Modified on 07/14/83 by FCH, [5.2-2], SUPPRESS verb does not work, BUG533(phx15481) */
/* Modified on 10/21/82 by FCH, [5.2-1], illeg clause DATA REPORT IS blows COBOL, phx13529 */
/* Modified on 02/11/82 by FCH, [5.1-1], ignore "report" before DD, phx12454(BUG526) */
/* Modified on 06/16/80 by FCH, [4.4-1], program table added for REPORT WRITER facility */
/* Modified on 05/01/79 by FCH,[4.0-1], qualif name if debug option */
/* Modified since Version 4.0 */










/* format: style3 */
cobol_output_tokens:
     proc;

/* This routine writes the finished tokens on the minpral file and the name file */


/*   general overlay for any token    */

dcl	1 token		based (cobol_current),
	  2 fwd_link	pointer,
	  2 back_link	pointer,
	  2 rep_link	pointer,
	  2 l_info	bit (8),
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin,		/*[3.0-1]*/
	  2 info		fixed bin,		/*[3.0-1]*/
	  2 line_size	fixed bin,		/*[4.0-1]*/
	  2 name		char (0 refer (token.line_size));

declare	1 reserved_word	based (cobol_current),
	  2 fwd_link	ptr,
	  2 back_link	ptr,
	  2 rep_link	ptr,
	  2 l_info	bit (8),
	  2 size		fixed bin,
	  2 line		fixed bin,
	  2 column	fixed bin,
	  2 type		fixed bin,
	  2 key		fixed bin;

/*[4.4-1]*/
declare	1 filler		based (class_tab_ptr),	/*[4.4-1]*/
	  2 filler	char (20),		/*[4.4-1]*/
	  2 ct		(1024) fixed bin (18) unal unsigned;
declare	CT		(0:8191) fixed bin based (class_tab_ptr);
declare	cd		(256) fixed bin (9) unal unsigned based;


/*[4.4-1]*/
declare	1 static_int	static int,		/*[4.4-1]*/
	  2 TOKEN		char (256) varying,		/*[4.4-1]*/
	  2 (tok_ptr, proc_def_ptr, p, q, t_cur, class_tab_ptr, program_ptr)
			ptr,			/*[4.4-1]*/
	  2 (state, prev_wd_num, n_t_key, program_size)
			fixed bin,		/*[4.4-1]*/
	  2 (data_object_size, fd_object_size, use_reporting_object_size)
			fixed bin,		/*[4.4-1]*/
	  2 prog_id	(36) bit (1);

/*[4.0-1]*/
declare	ch32		char (32) based;

declare	cobol_class_table_	entry (ptr);
dcl	cobol_swf_put	entry (ptr, bit (32), ptr, fixed bin) ext;
						/*[4.0-1]*/
dcl	cobol_db_put	entry (ptr, bit (32), ptr, fixed bin, ptr);
dcl	cobol_lexerr	entry (fixed bin, bit (1), fixed bin, char (30)) external;
dcl	cobol_delete_tokens$del_force
			entry (ptr, ptr) external;
dcl	cobol$alloc	entry (fixed bin) returns (ptr);

dcl	ioop		char (10);
dcl	st		bit (32),
	sz		fixed bin,
	tok1_ptr		ptr;
dcl	rec_ad		char (5),
	ch2		char (2);
dcl	wd_num		fixed bin;

/*[4.4-1]*/
declare	1 alloc_area	static int,		/*[4.4-1]*/
	  2 loc		ptr,			/*[4.4-1]*/
	  2 size		fixed bin,		/*[4.4-1]*/
	  2 cap		fixed bin,		/*[4.4-1]*/
	  2 area_size	fixed bin,		/*[4.4-1]*/
	  2 area_loc	ptr;

/*[4.0-1]*/
declare	(addr, null, substr, mod, size, addrel)
			builtin;

/*[4.0-1]*/
declare	1 TOK		based (tok_ptr),		/*[4.0-1]*/
	  2 rec_size	fixed bin,		/*[4.0-1]*/
	  2 size		fixed bin,		/*[4.0-1]*/
	  2 line		fixed bin,		/*[4.0-1]*/
	  2 column	fixed bin,		/*[4.0-1]*/
	  2 type		fixed bin,		/*[4.0-1]*/
	  2 info		fixed bin,		/*[4.0-1]*/
	  2 line_size	fixed bin,		/*[4.0-1]*/
	  2 name		char (0 refer (TOK.line_size));


/*[4.0-1]*/
declare	1 TOK1		based (tok1_ptr),		/*[4.0-1]*/
	  2 size		fixed bin,		/*[4.0-1]*/
	  2 line		fixed bin,		/*[4.0-1]*/
	  2 column	fixed bin,		/*[4.0-1]*/
	  2 type		fixed bin,		/*[4.0-1]*/
	  2 info		fixed bin,		/*[4.0-1]*/
	  2 line_size	fixed bin,		/*[4.0-1]*/
	  2 name		char (32);

/*[4.4-1]*/
declare	program		(36) ptr based (program_ptr);

/*[4.4-1]*/
declare	1 data_object	based (alloc_area.area_loc),	/*[4.4-1]*/
	  2 next		ptr,			/* next object */
						/*[4.4-1]*/
	  2 loc		ptr;			/* token */

/*[4.4-1]*/
declare	1 fd_object	based (alloc_area.area_loc),	/*[4.4-1]*/
	  2 next		ptr,			/* next object */
						/*[4.4-1]*/
	  2 loc		ptr,			/* token */
						/*[4.4-1]*/
	  2 rep_loc	ptr;			/* reports clause */

/*[4.4-1]*/
declare	1 use_reporting_object
			based (alloc_area.area_loc),	/*[4.4-1]*/
	  2 next		ptr,			/* next object */
						/*[4.4-1]*/
	  2 loc		ptr,			/* token */
						/*[4.4-1]*/
	  2 proc_loc	ptr,			/* section name */
						/*[4.4-1]*/
	  2 suppress	bit (1);			/* suppress printing */

/*[4.4-1]*/
declare	AA		(64) fixed bin based (alloc_area.loc);
						/*[4.4-1]*/
declare	bit36		bit (36) based;


	p = cobol_frst;
	cobol_current = cobol_frst;

	do while ("1"b);

	     if substr (token.l_info, 3, 1) ^= "1"b
	     then do;

/* if this token should not be put out... */

		     if (token.type > 0) & (token.type < 9)
						/* if token is valid... */
		     then if token.type = 6		/*[3.0-1]*/
			then /*[4.4-1]*/ /*	if processing_report*/ /*[4.4-1]*/ /*then;*/ /*[4.4-1]*/ /*else	*/
			     do;			/*[3.0-1]*/
				token.size = token.size - 1;
						/*[3.0-1]*/
				token.line_size = token.line_size - 1;
						/*[3.0-1]*/
				call cobol_swf_put (cobol_pfp, st, addr (token.size), token.size);
						/*[3.0-1]*/
			     end;

/*[4.4-1]*/
			else /*[4.0-1]*/
			     if fixed_common.debug	/*[4.0-1]*/
			then call PUT;		/* with debugging specified */

			else call word;

		     else call cobol_lexerr (0, "0"b, 29, "Illegal token type - ignored.");

		end;

	     q = token.fwd_link;			/* get next token in string */

	     if q = null ()				/* if last token has been put out... */
	     then do;				/* delete the string and return */

		     cobol_output_sw = "0"b;

		     if (cobol_frst = cobol_ta_ptr) & (cobol_current = cobol_ta_ptr)
		     then return;

		     q = cobol_current;

		     call cobol_delete_tokens$del_force (p, q);

		     return;
		end;

	     cobol_current = q;

	end;

PUT:
     proc;

/* if with debugging specified then construct	*/
/*  the qualified names and store in the first	*/
/* of the qualified name			*/
/*[4.0-1]*/
	go to ST (state);

ST (1):						/* initial state */
						/*[4.0-1]*/
	if token.type ^= 8				/*[4.4-1]*/
	then do;
		call word;			/*[4.0-1]*/
		return;				/*[4.0-1]*/
	     end;

/*[4.0-1]*/
	TOKEN = token.name;				/*[4.0-1]*/
	sz = token.line_size;

/*[4.0-1]*/
	token.line_size = 32;			/*[4.0-1]*/
	tok1_ptr = addr (token.size);			/*[4.0-1]*/
	token.size = size (TOK1) * 4;

/*[4.0-1]*/
	token.line_size = sz;

/*[4.0-1]*/
	state = 2;

/*[4.0-1]*/
	call cobol_db_put (cobol_mfp, st, addr (token.size), token.size, tok_ptr);

/*[4.0-1]*/
	if sz < 32
	then substr (addr (tok_ptr -> TOK.name) -> ch32, sz + 1, 32 - sz) = " ";

/*[4.0-1]*/
	return;

ST (2):						/* type-8 */
						/*[4.0-1]*/
	if token.type ^= 1				/*[4.0-1]*/
	then do;
		call init_TOK;			/*[4.0-1]*/
		go to ST (1);			/*[4.0-1]*/
	     end;

/*[4.0-1]*/
	if token.info = 101				/*[4.0-1]*/
	then TOKEN = TOKEN || " IN";			/*[4.0-1]*/
	else if token.info = 133			/*[4.0-1]*/
	then TOKEN = TOKEN || " OF";			/*[4.0-1]*/
	else do;
		call init_TOK;			/*[4.0-1]*/
		go to ST (1);			/*[4.0-1]*/
	     end;

/*[4.0-1]*/
	call PUTREC (3);				/*[4.0-1]*/
	return;

ST (3):						/* type-8 of */
						/*[4.0-1]*/
	if token.type ^= 8				/*[4.0-1]*/
	then do;
		call init_TOK;			/*[4.0-1]*/
		go to ST (1);			/*[4.0-1]*/
	     end;

/*[4.0-1]*/
	TOKEN = TOKEN || " " || token.name;

/*[4.0-1]*/
	call PUTREC (4);				/*[4.0-1]*/
	return;

ST (4):						/* type-8 of type-8 */
						/*[4.0-1]*/
	if token.type ^= 1				/*[4.0-1]*/
	then do;
		substr (addr (TOK.name) -> ch32, 1, 32) = TOKEN;
						/*[4.0-1]*/
		call init_TOK;			/*[4.0-1]*/
		go to ST (1);			/*[4.0-1]*/
	     end;

/*[4.0-1]*/
	if token.info = 101				/*[4.0-1]*/
	then TOKEN = TOKEN || " IN";			/*[4.0-1]*/
	else if token.info = 133			/*[4.0-1]*/
	then TOKEN = TOKEN || " OF";			/*[4.0-1]*/
	else do;
		substr (addr (TOK.name) -> ch32, 1, 32) = TOKEN;
						/*[4.0-1]*/
		call init_TOK;			/*[4.0-1]*/
		go to ST (1);			/*[4.0-1]*/
	     end;

/*[4.0-1]*/
	call PUTREC (3);

     end;

PUTREC:
     proc (st_num);

declare	st_num		fixed bin;

/*[4.0-1]*/
	state = st_num;				/*[4.0-1]*/
	call cobol_swf_put (cobol_mfp, st, addr (token.size), token.size);

     end;

init_TOK:
     proc;

/*[4.0-1]*/
	TOKEN = "";				/*[4.0-1]*/
	state = 1;				/*[4.0-1]*/
	cobol_current = cobol_frst;

     end;

directory_loc:
     entry returns (ptr);				/* return loc of directory */

/*[4.4-1]*/
	return (program_ptr);

initialize:
     entry;					/* called by cobol_lex */
						/*[4.0-1]*/
	call init_TOK;				/*[4.0-1]*/
	tok_ptr = null ();				/*[4.4-1]*/
	proc_def_ptr = null ();

/*[4.4-1]*/
	call cobol_class_table_ (class_tab_ptr);

/*[4.4-1]*/
	program_size = size (program);		/*[4.4-1]*/
	data_object_size = size (data_object);		/*[4.4-1]*/
	fd_object_size = size (fd_object);		/*[4.4-1]*/
	use_reporting_object_size = size (use_reporting_object);

/*[4.4-1]*/
	alloc_area.loc = cobol$alloc (256);		/*[4.4-1]*/
	alloc_area.size = 1;			/*[4.4-1]*/
	alloc_area.cap = 256;

/*[4.4-1]*/
	alloc_area.area_size = program_size;		/*[4.4-1]*/
	call get_space;				/*[4.4-1]*/
	program_ptr = alloc_area.area_loc;

/*[4.4-1]*/
	report_exists = "0"b;			/*[4.4-1]*/
	report_first_token = null ();			/*[4.4-1]*/
	addr (prog_id) -> bit36 = "0"b;		/*[4.4-1]*/
	program (24), program (25), program (16) = null ();
						/* fd,reporting,report */
						/*[4.4-1]*/
	prev_wd_num = 0;

/*[4.0-1]*/
	return;

proc_def_ptr:
     entry (PDF);

/* return a pointer to the last type	*/
/* 7 token on the minpral file	*/


/*[4.0-1]*/
declare	PDF		ptr;

/*[4.0-1]*/
	PDF = proc_def_ptr;

/*[4.0-1]*/
	return;

word:
     proc;					/* write and process the token */

/*[4.4-1]*/
	if token.type = 1 & substr (reserved_word.l_info, 8, 1)
						/*[4.4-1]*/
	then do;					/* major reserved word */

/*[4.4-1]*/
		call cobol_db_put (cobol_mfp, st, addr (token.size), token.size, tok_ptr);

/*[4.4-1]*/
		wd_num = addr (CT (ct (reserved_word.key))) -> cd (6);

/* entry number in class(6) */

/*[4.4-1]*/
		go to RW (wd_num);

RW (1):						/* identification */
						/*[4.4-1]*/
		call set_program_table;
		go to RW0;

RW (2):						/* environment */
						/*[4.4-1]*/
		call set_program_table;
		go to RW0;

RW (3):						/* configuration */
						/*[4.4-1]*/
		call set_program_table;
		go to RW0;

RW (4):						/* source-computer */
						/*[4.4-1]*/
		call set_program_table;
		go to RW0;

RW (5):						/* object-computer */
						/*[4.4-1]*/
		call set_program_table;
		go to RW0;

RW (6):						/* special-names */
						/*[4.4-1]*/
		call set_program_table;
		go to RW0;

RW (7):						/* input-output */
						/*[4.4-1]*/
		call set_program_table;
		go to RW0;

RW (8):						/* file-control */
						/*[4.4-1]*/
		if ^prog_id (8)			/*[4.4-1]*/
		then do;
			prog_id (8) = "1"b;		/*[4.4-1]*/
			program (8) = tok_ptr;	/*[4.4-1]*/
			program (21) = null ();	/* select */
						/*[4.4-1]*/
		     end;
		go to RW0;

RW (9):						/* i-o-control */
						/*[4.4-1]*/
		call set_program_table;
		go to RW0;

RW (10):						/* data */
						/*[4.4-1]*/
		call set_program_table;
		go to RW0;

RW (11):						/* sub-schema */
						/*[4.4-1]*/
		if ^prog_id (11)			/*[4.4-1]*/
		then do;
			prog_id (11) = "1"b;	/*[4.4-1]*/
			program (11) = tok_ptr;	/*[4.4-1]*/
			program (20) = null ();	/* db */
						/*[4.4-1]*/
		     end;
		go to RW0;

RW (12):						/* file */
						/*[4.4-1]*/
		if ^prog_id (12)			/*[4.4-1]*/
		then do;
			prog_id (12) = "1"b;	/*[4.4-1]*/
			program (12) = tok_ptr;	/*[4.4-1]*/
			program (23), program (24) = null ();
						/* sd, fd */
						/*[4.4-1]*/
		     end;
		go to RW0;

RW (13):						/* working-storage */
		call set_program_table;
		go to RW0;

RW (14):						/* linkage */
		call set_program_table;
		go to RW0;

RW (15):						/* communications */
						/*[4.4-1]*/
		if ^prog_id (15)			/*[4.4-1]*/
		then do;
			prog_id (15) = "1"b;	/*[4.4-1]*/
			program (15) = tok_ptr;	/*[4.4-1]*/
			program (19) = null ();	/*cd */
						/*[4.4-1]*/
		     end;
		go to RW0;

RW (16):						/* report */
						/*[5.1-1]*/
		if prev_wd_num = 24 & reserved_word.column > 11
						/* fd */
						/*[4.4-1]*/
		then program (24) -> fd_object.rep_loc = tok_ptr;
						/*[5.2-1]*/
		else if ^prog_id (16) & prog_id (10) & reserved_word.column < 12
						/* report section */
						/*[4.4-1]*/
		then do;
			program (16) = tok_ptr;	/*[4.4-1]*/
			report_first_token = tok_ptr; /*[4.4-1]*/
			prog_id (16) = "1"b;	/*[4.4-1]*/
			program (22) = null ();	/* rd */
						/*[4.4-1]*/
		     end;				/* reports are clause */





		go to RW0;

RW (17):						/* procedure */
						/*[4.4-1]*/
		if ^prog_id (17)			/*[4.4-1]*/
		then do;
			program (17) = tok_ptr;	/*[4.4-1]*/
			report_last_token = tok_ptr;	/*[4.4-1]*/
			prog_id (17) = "1"b;	/*[4.4-1]*/
			program (25) = null ();	/* reporting */
						/*[4.4-1]*/
		     end;
		go to RW0;

RW (18):						/* declaratives */
						/*[4.4-1]*/
		call set_program_table;
		go to RW0;

RW (19):						/* cd */
						/*[4.4-1]*/
		if prog_id (19)
		then call form_data_object;
		go to RW0;

RW (20):						/* db */
						/*[4.4-1]*/
		if prog_id (11)
		then call form_data_object;		/* sub-schema */
		go to RW0;

RW (21):						/* select */
						/*[4.4-1]*/
		if prog_id (8)
		then call form_data_object;		/* file-control */
		go to RW0;

RW (22):						/* rd */
						/*[4.4-1]*/
		if prog_id (16)
		then call form_data_object;		/* report */
		go to RW0;

RW (23):						/* sd */
						/*[4.4-1]*/
		if prog_id (12)
		then call form_data_object;		/* file */
		go to RW0;

RW (24):						/* fd */
						/*[4.4-1]*/
		if prog_id (12)			/* file */
						/*[4.4-1]*/
		then do;				/*[4.4-1]*/
			alloc_area.area_size = fd_object_size;

/*[4.4-1]*/
			call get_space;

/*[4.4-1]*/
			alloc_area.area_loc -> fd_object.loc = tok_ptr;
						/*[4.4-1]*/
			alloc_area.area_loc -> fd_object.rep_loc = null ();

/*[4.4-1]*/
			if program (24) = null ()	/*[4.4-1]*/
			then fd_object.next = null ();/*[4.4-1]*/
			else fd_object.next = program (24);

/*[4.4-1]*/
			program (24) = alloc_area.area_loc;

/*[4.4-1]*/
		     end;

		go to RW0;

RW (25):						/* reporting */
						/*[4.4-1]*/
		if prog_id (18)			/* declaratives */
						/*[4.4-1]*/
		then do;

/*[4.4-1]*/
			alloc_area.area_size = use_reporting_object_size;

/*[4.4-1]*/
			call get_space;

/*[4.4-1]*/
			use_reporting_object.loc = tok_ptr;
						/*[4.4-1]*/
			use_reporting_object.proc_loc = addrel (proc_def_ptr, 1);
						/*[4.4-1]*/
			use_reporting_object.suppress = "0"b;

/*[4.4-1]*/
			if program (25) = null ()	/*[4.4-1]*/
			then use_reporting_object.next = null ();
						/*[4.4-1]*/
			else use_reporting_object.next = program (25);

/*[4.4-1]*/
			program (25) = alloc_area.area_loc;

/*[4.4-1]*/
		     end;

		go to RW0;

/* program-id */
RW (26):						/*[4.4-1]*/
		call set_program_table;

		go to RW0;

RW (27):						/* suppress */
						/*[4.4-1]*/
		if program (25) ^= null ()
		then program (25) -> use_reporting_object.suppress = "1"b;
		go to RW0;

RW0:						/*[4.4-1]*/
		prev_wd_num = wd_num;		/*[4.4-1]*/
	     end;

	else if token.type = 7			/*[4.4-1]*/
	then call cobol_db_put (cobol_mfp, st, addr (token.size), token.size, proc_def_ptr);
						/* proc def */
						/*[5.2-2]*/
	else do;

/*[5.2-2]*/
		if token.type = 8			/*[5.2-2]*/
		then if substr (token.name, 1, 2) = "SS"/*[5.2-2]*/
		     then if program (25) ^= null ()	/*[5.2.2]*/
			then program (25) -> use_reporting_object.suppress = "1"b;

/*5.2-2]*/
		call cobol_swf_put (cobol_mfp, st, addr (token.size), token.size);

/*[5.2-2]*/
	     end;					/* not proc def */

     end;

get_space:
     proc;

/*[4.4-1]*/
	alloc_area.area_size = alloc_area.area_size + mod (-alloc_area.area_size, 2);
						/*[4.4-1]*/
	alloc_area.area_loc = addr (AA (alloc_area.size));/*[4.4-1]*/
	alloc_area.size = alloc_area.size + alloc_area.area_size;

/*[4.4-1]*/
	if alloc_area.size <= alloc_area.cap
	then return;

/*[4.4-1]*/
	alloc_area.loc, alloc_area.area_loc = cobol$alloc (256);

/*[4.4-1]*/
	alloc_area.size = alloc_area.area_size + 1;

     end;

form_data_object:
     proc;					/* form data object chain */

/*[4.4-1]*/
	alloc_area.area_size = data_object_size;

/*[4.4-1]*/
	call get_space;

/*[4.4-1]*/
	alloc_area.area_loc -> data_object.loc = tok_ptr;

/*[4.4-1]*/
	if program (wd_num) = null ()			/*[4.4-1]*/
	then data_object.next = null ();		/*[4.4-1]*/
	else data_object.next = program (wd_num);

/*[4.4-1]*/
	program (wd_num) = alloc_area.area_loc;

     end;

set_program_table:
     proc;

	if ^prog_id (wd_num)
	then do;
		program (wd_num) = tok_ptr;
		prog_id (wd_num) = "1"b;
	     end;
     end;

%include cobol_ext_;
%include cobol_ext_lex;
%include cobol_fixed_common;

     end cobol_output_tokens;




		    cobol_ext_.alm                  05/22/89  1249.8rew 05/22/89  1249.6       24885



" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

"	cobol_ext_
"	External data for cobol compiler
"	bindable as static internal

	name	cobol_ext_
	use	textc
	use	linkc
	join	/link/linkc
	join	/text/textc
	use	linkc
	even
"	DECLARATIONS...
	segdef	cobol_afp
	bss	cobol_afp,2
	segdef	cobol_analin_fileno
	bss	cobol_analin_fileno,2
          segdef    report_first_token
          bss       report_first_token,2
          segdef    report_last_token
          bss       report_last_token,2
	segdef	cobol_eltp
	bss	cobol_eltp,2
	segdef	cobol_cmfp
	bss	cobol_cmfp,2
	segdef	cobol_com_fileno
	bss	cobol_com_fileno,2
	segdef	cobol_com_ptr
	bss	cobol_com_ptr,2
	segdef	cobol_dfp
	bss	cobol_dfp,2
	segdef	cobol_hfp
	bss	cobol_hfp,2
	segdef	cobol_m1fp
	bss	cobol_m1fp,2
	segdef	cobol_m2fp
	bss	cobol_m2fp,2
	segdef	cobol_min1_fileno
	bss	cobol_min1_fileno,2
	segdef	cobol_min2_fileno_ptr
	bss	cobol_min2_fileno_ptr,2
	segdef	cobol_name_fileno
	bss	cobol_name_fileno,2
	segdef	cobol_name_fileno_ptr
	bss	cobol_name_fileno_ptr,2
	segdef	cobol_ntfp
	bss	cobol_ntfp,2
	segdef	cobol_pdofp
	bss	cobol_pdofp,2
	segdef	cobol_pfp
	bss	cobol_pfp,2
	segdef	cobol_rm2fp
	bss	cobol_rm2fp,2
	segdef	cobol_rmin2fp
	bss	cobol_rmin2fp,2
	segdef	cobol_curr_in
	bss	cobol_curr_in,2
	segdef	cobol_curr_out
	bss	cobol_curr_out,2
	segdef	cobol_sfp
	bss	cobol_sfp,2
	segdef	cobol_w1p
	bss	cobol_w1p,2
	segdef	cobol_w2p
	bss	cobol_w2p,2
	segdef	cobol_w3p
	bss	cobol_w3p,2
	segdef	cobol_w5p
	bss	cobol_w5p,2
	segdef	cobol_w6p
	bss	cobol_w6p,2
	segdef	cobol_w7p
	bss	cobol_w7p,2
	segdef	cobol_x3fp
	bss	cobol_x3fp,2
	segdef	cobol_rwdd
	bss	cobol_rwdd,2
	segdef	cobol_rwpd
	bss	cobol_rwpd,2
	segdef	cobol_fileno1
	bss	cobol_fileno1,1
	segdef	cobol_options_len
	bss	cobol_options_len,1
	segdef	cobol_pdout_fileno
	bss	cobol_pdout_fileno,1
	segdef	cobol_print_fileno
	bss	cobol_print_fileno,1
	segdef	cobol_rmin2_fileno
	bss	cobol_rmin2_fileno,1
	segdef	cobol_x1_fileno
	bss	cobol_x1_fileno,1
	segdef	cobol_x2_fileno
	bss	cobol_x2_fileno,1
	segdef	cobol_x3_fileno
	bss	cobol_x3_fileno,1
	segdef	cobol_lpr
	bss	cobol_lpr,2
	segdef	cobol_options
	bss	cobol_options,30
	segdef	cobol_xlast8
	bss	cobol_xlast8,1
          segdef    report_exists
          bss       report_exists,1
	segdef	marg_a_word
	bss	marg_a_word,1
	segdef	rs_exists
	bss	rs_exists,1

	end
   



		    cobol_ext_lex.alm               05/22/89  1251.3rew 05/22/89  1251.1       28467



" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

"	cobol_ext_lex
"	External data for cobol compiler
"	bindable as static internal

	name	cobol_ext_lex
	use	textc
	use	linkc
	join	/link/linkc
	join	/text/textc
	use	linkc
	even
"	DECLARATIONS...
	segdef	cobol_current
	bss	cobol_current,2
	segdef	cobol_top
	bss	cobol_top,2
	segdef	cobol_frst
	bss	cobol_frst,2
	segdef	cobol_mfp
	bss	cobol_mfp,2
	segdef	cobol_rt_ptr
	bss	cobol_rt_ptr,2
	segdef	cobol_cfp
	bss	cobol_cfp,2
	segdef	cobol_ta_ptr
	bss	cobol_ta_ptr,2
	segdef	cobol_elt_buf_ptr
	bss	cobol_elt_buf_ptr,2
	segdef	cobol_LOC_ptr
	bss	cobol_LOC_ptr,2
	segdef	cobol_lex_exit
	bss	cobol_lex_exit,6
	segdef	cobol_tarea
	bss	cobol_tarea,75
	segdef	cobol_comma_character
	bss	cobol_comma_character,1
	segdef	cobol_decimal_point_character
	bss	cobol_decimal_point_character,1
	segdef	cobol_new_line_character
	bss	cobol_new_line_character,1
	segdef	cobol_si_key
	bss	cobol_si_key,2
	segdef	cobol_so_key
	bss	cobol_so_key,2
          segdef    ph_num
          bss       ph_num,1
	segdef	cobol_c_l_n
	bss	cobol_c_l_n,1
	segdef	cobol_save_cln
	bss	cobol_save_cln,1
	segdef	cobol_save_col
	bss	cobol_save_col,1
	segdef	cobol_name_number
	bss	cobol_name_number,1
	segdef	cobol_section_number
	bss	cobol_section_number,1
	segdef	cobol_sr
	bss	cobol_sr,1
	segdef	cobol_elt_idx
	bss	cobol_elt_idx,1
	segdef	cobol_LOC
	bss	cobol_LOC,1
	segdef	cobol_cards_column
	bss	cobol_cards_column,1
	segdef	cobol_cards_nr_char
	bss	cobol_cards_nr_char,1
	segdef	cobol_cards_tblanks
	bss	cobol_cards_tblanks,1
	segdef	cobol_cards
	bss	cobol_cards,64
          segdef    processing_report
          bss       processing_report,1
          segdef    real_end_report
          bss       real_end_report,1
	segdef	cobol_continuation
	bss	cobol_continuation,1
	segdef	cobol_pic_switch
	bss	cobol_pic_switch,1
	segdef	cobol_allo_init_sw
	bss	cobol_allo_init_sw,1
	segdef	cobol_lu_sw
	bss	cobol_lu_sw,1
	segdef	cobol_scanoff_sw
	bss	cobol_scanoff_sw,1
	segdef	cobol_output_sw
	bss	cobol_output_sw,1
	segdef	cobol_stack_sw
	bss	cobol_stack_sw,1
	segdef	cobol_copy_found
	bss	cobol_copy_found,1
	segdef	cobol_head_words
	bss	cobol_head_words,1
	segdef	cobol_elnp_sw
	bss	cobol_elnp_sw,1
	segdef	cobol_dp_sw
	bss	cobol_dp_sw,1
	segdef	cobol_endprog_sw
	bss	cobol_endprog_sw,1
	segdef	cobol_debug_mode
	bss	cobol_debug_mode,1
	segdef	cobol_rwt_init_sw
	bss	cobol_rwt_init_sw,1
	segdef	cobol_init_ta_sw
	bss	cobol_init_ta_sw,1
	segdef	cobol_rep_sw
	bss	cobol_rep_sw,1
	segdef	cobol_copy_active
	bss	cobol_copy_active,1
	segdef	cobol_ln_sw
	bss	cobol_ln_sw,1
	segdef	cobol_prime_sw
	bss	cobol_prime_sw,1
	segdef	cobol_rec1_sw
	bss	cobol_rec1_sw,1
	segdef	cobol_progid_sw
	bss	cobol_progid_sw,1

	end
 



		    cobol_ext_ddsyn.alm             05/22/89  1253.0rew 05/22/89  1252.2        7956



" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

"	cobol_ext_ddsyn
"	External data for cobol compiler
"	bindable as static internal

	name	cobol_ext_ddsyn
	use	textc
	use	linkc
	join	/link/linkc
	join	/text/textc
	use	linkc
	even
"	DECLARATIONS...
	segdef	cobol_sv_ptr
	bss	cobol_sv_ptr,2
	segdef	cobol_wkbuf1_tbl
	bss	cobol_wkbuf1_tbl,250
	segdef	cobol_wkbuf2_tbl
	bss	cobol_wkbuf2_tbl,125
	segdef	cobol_htbl
	bss	cobol_htbl,343

	end




		    cobol_opch_init.alm             05/22/89  1254.6rew 05/22/89  1254.3       21249



" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

"	Modified on 8/24/76 by Bob Chang to fix the bug for damaged pr7 after call. */
" This alm procedure is an interface between a PL1 procedure
" and the cobol overpunch operator cobol_opch_operator_.  This alm
" procedure is declared in any calling procedure by a declaration
" of the form:
" 
" dcl cobol_opch_init ext entry (ptr,ptr,bit(36),bit(36),
" fixed bin(35),fixed bin(35));
" 
" The parameters are, respectively
"  1. pointer to the source of conversion.
"  2. pointer to the target of conversion
"  3. scale and precision of the source.
"  4. scale and precision of the target.
"  5. type code of the source.
"  6. type code of the target.
" 
" This alm procedure unloads the argument list passed by the calling
" procedure, and loads the arguments into the registers in which
" they are required by cobol_opch_operator_.  For a description of
" the input requirements of cobol_opch_operator_, see the documentation
" in the listing for that alm procedure.

	segref	cobol_opch_operator_,cobol_opch_operator_

	equ	arg_pr,0
	equ	work_pr,5
	equ	source_pr,2
	equ	target_pr,1
	equ	return_pr,3

	tempd	work_space(40)  	some work space aligned on an even word
	temp	temp_space(2)
"				boundary

	entry	cobol_opch_init

cobol_opch_init:

	push

	epp	source_pr,arg_pr|2,*
	spri7	temp_space
	epp	source_pr,source_pr|0,*     load pointer to source into pr2
	epp	target_pr,arg_pr|4,*
	epp	target_pr,target_pr|0,*     load pointer to target into 1
	ldq	arg_pr|6,*     load source scale into Q reg
	lda	arg_pr|8,*     load target scale into A reg
	lxl7	arg_pr|10,*     load type code of source
	lxl6	arg_pr|12,*     load type code of target

	epp	work_pr,work_space     load a pointer to some work space in
"					  this procedure's stack

	tsp	return_pr,cobol_opch_operator_     call cobol_opch_operator_

	epp7	temp_space,*
	return	return to calling procedure

	end




*/
                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
and Bull HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for 
managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by Bull HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved

*/
