/* BEGIN INCLUDE FILE syserr_constants.incl.pl1 ... 11/11/80 W. Olin Sibert */
/* 85-02-12, EJ Sharpe - Added sorting class constants, removed AIM_MESSAGE, added new action code names. */
/* 85-04-24, G. Palter - Renamed SYSERR_UNUSED_10 to SYSERR_RING1_ERROR to reflect its actual use. */

/* This include file has an ALM version.  Keep 'em in sync! */

dcl (

/* The following constants define the message action codes.  This indicates
how a message is to be handled.  */

     SYSERR_CRASH_SYSTEM	init (1),			
     CRASH		init (1), 		/* Crash the system, and bleat plaintively. */

     SYSERR_TERMINATE_PROCESS	init (2),
     TERMINATE_PROCESS	init (2), 		/* Terminate the process, print the message, and beep. */

     SYSERR_PRINT_WITH_ALARM	init (3),
     BEEP 		init (3), 		/* Beep and print the message on the console. */

     SYSERR_PRINT_ON_CONSOLE	init (0),
     ANNOUNCE		init (0), 		/* Just print the message on the console. */

     SYSERR_LOG_OR_PRINT	init (4),
     LOG			init (4), 		/* Log the message, or print it if it can't be logged */

     SYSERR_LOG_OR_DISCARD	init (5),
     JUST_LOG		init (5), 		/* Just try to log the message, and discard it if it can't be */


/* The following constants are added to the normal severities to indicate
different sorting classes of messages.  */

     SYSERR_SYSTEM_ERROR	init (00),		/* indicates a standard level system error */
     SYSERR_RING1_ERROR	init (10),		/* indicates an error detected in ring 1 (mseg_, RCP) */
     SYSERR_COVERT_CHANNEL	init (20),		/* indicates covert channel audit trail message */
     SYSERR_UNSUCCESSFUL_ACCESS init (30),		/* indicates access denial audit trail message */
     SYSERR_SUCCESSFUL_ACCESS	init (40)			/* indicates access grant audit trail message */
	) fixed bin internal static options (constant);

/* END INCLUDE FILE syserr_constants.incl.pl1 */


*/
                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
and Bull HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for 
managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by Bull HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved

*/
