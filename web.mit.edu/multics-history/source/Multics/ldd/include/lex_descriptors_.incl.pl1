	/*  START OF:	lex_descriptors_.incl.pl1	  *  *  *  *  *  *  */
	
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
	/*							*/
	/* Name:  lex_descriptors_.incl.pl1				*/
	/*							*/
	/*      This include segment defines the structure of the token	*/
	/* descriptor, statement descriptor, and comment descriptor created	*/
	/* by the lex_string_ program.				*/
	/*							*/
	/* Status:						*/
	/*							*/
	/* 0) Created:  Dec, 1973 by G. C. Dixon			*/
	/*							*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
	
	
	
	
     dcl	
	1 comment			aligned based (Pcomment),
						/* descriptor for a comment.			*/
	  2 group1		unaligned,
	    3 version		fixed bin(17),	/* comment descriptor version.		*/
	    3 size		fixed bin(17),	/* comment descriptor size (in words).		*/
	  2 Pnext			ptr unal,		/* ptr to next comment descriptor.		*/
	  2 Plast			ptr unal,		/* ptr to last comment descriptor.		*/
	  2 Pvalue		ptr unal,		/* ptr to comment.				*/
	  2 Lvalue		fixed bin(18),	/* length of comment.			*/
	  2 group2		unaligned,
	    3 line_no		fixed bin(17),	/* line no of line containing comment.		*/
	    3 S,					/* switches:				*/
	      4 before_stmt		bit(1),		/* comment is before 1st token of stmt.		*/
	      4 contiguous		bit(1),		/* no tokens between this and last comment.	*/
	      4 pad		bit(16),
	comment_value		char(comment.Lvalue) based (comment.Pvalue),
						/* body of comment.				*/
	Pcomment			ptr;		/* ptr to comment descriptor.			*/
	
     dcl	
	1 stmt			aligned based (Pstmt),
						/* descriptor for a statement.		*/
	  2 group1		unaligned,
	    3 version		fixed bin(17),	/* statement descriptor version.		*/
	    3 size		fixed bin(17),	/* statement descriptor size (in words).	*/
	  2 Pnext			ptr unal,		/* ptr to next statement descriptor.		*/
	  2 Plast			ptr unal,		/* ptr to last statement descriptor.		*/
	  2 Pvalue		ptr unal,		/* ptr to statement.			*/
	  2 Lvalue		fixed bin(18),	/* length of statement.			*/
	  2 Pfirst_token		ptr unal,		/* ptr to 1st token of statement.		*/
	  2 Plast_token		ptr unal,		/* ptr to last token of statement.		*/
	  2 Pcomments		ptr unal,		/* ptr to comments in statement.		*/
	  2 Puser			ptr unal,		/* user-defined ptr.			*/
	  2 group2		unaligned,
	    3 Ntokens		fixed bin(17),	/* number of tokens in statement.		*/
	    3 line_no		fixed bin(17),	/* line no of line on which statement begins.	*/
	    3 Istmt_in_line		fixed bin(17),	/* number of stmts in line containing this stmt.	*/
						/* (the number includes this stmt.)		*/
	    3 semant_type		fixed bin(17),	/* semantic type of the statement.		*/
	    3 S,					/* switches:				*/
	      4 error_in_stmt	bit(1),		/* stmt contains a syntactic error.		*/
	      4 output_in_err_msg	bit(1),		/* stmt has been output in previous error message.*/
	      4 pad		bit(34),
	stmt_value		char(stmt.Lvalue) based (stmt.Pvalue),
						/* text of the statement.			*/
	Pstmt			ptr;		/* ptr to a stmt descriptor. 			*/
	
     dcl	
	1 token			aligned based (Ptoken),
						/* descriptor for a token.			*/
	  2 group1		unaligned,
	    3 version		fixed bin(17),	/* token descriptor version.			*/
	    3 size		fixed bin(17),	/* token descriptor size (in words).		*/
	  2 Pnext			ptr unal,		/* ptr to next token descriptor.		*/
	  2 Plast			ptr unal,		/* ptr to last token descriptor.		*/
	  2 Pvalue		ptr unal,		/* ptr to token.				*/
	  2 Lvalue		fixed bin(18),	/* length of token.				*/
	  2 Pstmt			ptr unal,		/* ptr to descriptor of stmt containing token.	*/
	  2 Psemant		ptr unal,		/* ptr to descriptor(s) of token's semantic value.*/
	  2 group2		unaligned,
	    3 Itoken_in_stmt	fixed bin(17),	/* position of token within its statement.	*/
	    3 line_no		fixed bin(17),	/* line number of the line containing the token.	*/
	    3 Nvalue		fixed bin(35),	/* numeric value of decimal-integer tokens.	*/
	    3 S,					/* switches:				*/
	      4 end_of_stmt		bit(1),		/* token is an end-of-stmt token.		*/
	      4 quoted_string	bit(1),		/* token is a quoted string.			*/
	      4 quotes_in_string	bit(1),		/* on if quote-close delimiters appear in quoted	*/
						/* string (as doubled quotes on input.)		*/
	      4 quotes_doubled	bit(1),		/* on if quotes in the string are doubled after	*/
						/* string has been lexed into a token.		*/
	      4 pad2		bit(32),
	token_value		char(token.Lvalue) based (token.Pvalue),
						/* value of the token.			*/
	Ptoken			ptr;		/* ptr to a token descriptor.			*/

	/*  END OF:	lex_descriptors_.incl.pl1	  *  *  *  *  *  *  */


*/
                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
and Bull HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for 
managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by Bull HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved

*/
