/* BEGIN INCLUDE FILE - dm_cm_collection_header.incl.pl1 */

/* DESCRIPTION:
       Associated with each collection is the following collection_header
   structure stored as an element in the Header Collection of the file.
   The identifier of this element is also the idenfifier of the collection.
   Even the Header Collection has a collection_header stored in the Header
   Collection itself in the element identified by the constant
   HEADER_COLLECTION_HEADER_ELEMENT_ID declared in dm_cm_hdr_col_ids.incl.pl1.
   The information in collection_header is expected to be stable information.
   The structure elements are described as follows:
   
   version is a character string version equal to COLLECTION_HEADER_VERSION_2.
   
   flags.fixed_size_elements indicates, if on that all elements in the
   collection are of a fixed length.
   
   flags.thread_elements indicates that elements in a collection are to be
   threaded in a linked list.  This is currrently unupported.
   
   flags.thread_control_intervals indicates, if on, that control intervals in
   a collection are to be threaded in a linked list.  This is only useful if
   the control interval storage method is blocked.
   
   flags.must_be_zero1 is reserved for future use and must be "0"b.
   
   control_interval_storage_method is the method of storage management of
   control intervals for this collection, either
   BLOCKED_CONTROL_INTERVAL_STORAGE_METHOD (not yet supported) or
   UNBLOCKED_CONTROL_INTERVAL_STORAGE_METHOD, declared in
   dm_cism_info.incl.pl1.
   
   element_storage_method is the method of storage management of elements in
   this collection, either BASIC_ELEMENT_STORAGE_METHOD or
   ORDERED_ELEMENT_STORAGE_METHOD, declared in dm_esm_info.incl.pl1.
   
   maximum_element_size is the maximum size of an element in bits in this
   collection.
   
   header_record_element_id is the identifier of an element containing a
   caller-defined header for this collection.  If equal to "0"b, no
   caller-defined header yet exists.  The put_header collection_manager_
   operation stores such a header.
   
   storage_record_element_id is the identifier of the element containing the
   storage_record for this collection.  The storage_record contains
   information expected to be dynamic, such as the identifier of the last
   control interval of the collection.  Its format is also dependent upon the
   storage methods in effect for this collection.  storage_record structures
   are declared in dm_cm_storage_record.incl.pl1.

*/

/* HISTORY:
Written by Matthew Pierret, 04/01/82.
Modified:
07/01/82 by Matthew Pierret: Changed to version A, added storage_record_area.
10/29/82 by Matthew Pierret: Changed to version 2 ("col_hdr2"), separated
            storage_record_area out, leaving storage_record_element_id behind.
09/18/84 by Matthew Pierret: Added DESCRIPTION section.
*/

/* format: style2,ind3,ll79 */

     dcl	   1 collection_header    aligned based (collection_header_ptr),
	     2 version	      char (8),
	     2 flags	      unaligned,
	       3 fixed_size_elements
			      bit (1),
	       3 thread_elements  bit (1),
	       3 thread_control_intervals
			      bit (1),
	       3 must_be_zero1    bit (15),
	     2 control_interval_storage_method
			      fixed bin (17) unal,
	     2 element_storage_method
			      fixed bin (17),
	     2 maximum_element_size
			      fixed bin (35),
	     2 header_record_element_id
			      bit (36) aligned,
	     2 storage_record_element_id
			      bit (36) aligned;

     dcl	   collection_header_ptr  ptr;
     dcl	   COLLECTION_HEADER_VERSION_2
			      init ("col_hdr2") char (8) aligned
			      int static options (constant);

/* END INCLUDE FILE - dm_cm_collection_header.incl.pl1 */


*/
                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
and Bull HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for 
managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by Bull HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved

*/
