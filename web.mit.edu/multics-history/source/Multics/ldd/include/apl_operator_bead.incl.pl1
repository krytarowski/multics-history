/* ====== BEGIN INCLUDE SEGMENT	apl_operator_bead.incl.pl1 ================================ */

declare
	1 operator_bead		aligned based,

	  2 type			unaligned like general_bead.type,

	  2 bits_for_lex		unaligned,
	    3 allow_brackets	bit(1),		/* operator may have dimension info in brackets */
	    3 allow_product		bit(1),		/* operator may be used in inner and outer product */
	    3 allow_reduction	bit(1),		/* operator may be used in reduction and scan */
	    3 special_assignment	bit(1),		/* doesn't use standard assignment operator */
	    3 ignores_assignment	bit(1),		/* assignment has no effect */
	    3 allow_subscripted_assignment
				bit(1),		/* system variable that can be subscripted assigned */
	    3 pad			bit(12),

	  2 bits_for_parse		unaligned,
	    3 stop_trace_control	bit(1),		/* next lexeme is function being stopped/traced
						   (op1 tells which) */
	    3 quad		bit(1),		/* this is a quad type */
	    3 system_variable	bit(1),		/* this is a system variable, not an op */
	    3 dyadic		bit(1),		/* operator may be dyadic */
	    3 monadic		bit(1),		/* operator may be monadic */
	    3 function		bit(1),		/* operator is a user defined function */
	    3 semantics_valid	bit(1),		/* if semantics has been set */
	    3 has_list		bit(1),		/* semantics is a list */
	    3 inner_product		bit(1),		/* op2 is valid */
	    3 semantics_on_stack	bit(1),		/* semantics points to value stack */
	    3 is_external_function	bit(1),		/* semantics points to function bead for ext function */
	    3 pad			bit(7),
	    3 op2			fixed bin(8) unaligned,	/* secondary operator code */
	    3 op1			fixed bin(8) unaligned,	/* primary operator code */
	  2 type_code		fixed bin;	/* for parse */

/* ------ END INCLUDE SEGMENT		apl_operator_bead.incl.pl1 -------------------------------- */


*/
                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
and Bull HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for 
managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by Bull HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved

*/
