/* BEGIN INCLUDE FILE ... mseg_wakeup_state.incl.pl1 */
/* Created:  April 1985 by G. Palter */

/* format: style3,linecom */

/* Description of the wakeup state of a message segment --

   The wakeup state defines which process, if any, is willing to receive normal or urgent IPC wakeups when a message which
   requests such a wakeup is added to a message segment.  The process is allowed to separately accept or defer normal and
   urgent wakeups.  Note that deferring a wakeup is not the same as not accepting wakeups.  A process is not allowed to
   stop accepting wakeups once it has accepted them as to do so would introduce a relatively high badnwidth covert
   channel.  (In the present implementation, urgent wakeups are really no different from normal wakeups.  Eventually,
   urgent wakeups should be implemented using an IPS signal along with the IPC wakeup).

   mseg_$get_wakeup_state_seg requires that the caller supply the proper value for mseg_wakeup_state.version in the
   mseg_operation.  If there is no wakeup state recorded in the message segment, mseg_$get_wakeup_state_seg will return
   the status code error_table_$messages_off.

   mseg_$set_wakeup_state_seg ignores the values of the access_class, process_id, and lock_id elements supplied by the
   caller in the mseg_operation.  mseg_$set_wakeup_state_seg will, instead, furnish the values of the process making the
   call for these elements and will return these values to its caller.  In other words, mseg_$set_wakeup_state_seg can not
   be used by one process to accept/defer wakeups on behalf of another process. */

declare	1 mseg_wakeup_state aligned based (mseg_wakeup_state_ptr),
	  2 version	character (8) unaligned,
	  2 flags		aligned,
	    3 accepting_normal_wakeups		/* ON => process has accepted normal wakeups */
			bit (1) unaligned,		/* OFF => process has deferred normal wakeups */
	    3 accepting_urgent_wakeups		/* ON => process has accepted urgent wakeups */
			bit (1) unaligned,		/* OFF => process has deferred urgent wakeups */
	    3 pad		bit (34) unaligned,
	  2 pad		bit (36) aligned,
	  2 event_channel	fixed binary (71),		/* IPC event channel on which to send normal/urgent wakeups */
	  2 access_class	bit (72) aligned,		/* AIM access class of the process accepting wakeups */
	  2 process_id	bit (36) aligned,		/* ID of the process accepting wakeups */
	  2 lock_id	bit (36) aligned;		/* lock ID used to test if said process is still alive */

declare	mseg_wakeup_state_ptr
			pointer;

declare	MSEG_WAKEUP_STATE_VERSION_1
			character (8) static options (constant) initial ("msegwkp1");

/* END INCLUDE FILE ... mseg_wakeup_state.incl.pl1 */


*/
                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
and Bull HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for 
managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by Bull HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved

*/
