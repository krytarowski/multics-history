/* BEGIN mrds_predicate_tree.incl.pl1 -- jaw, 2/14/79 */

/* HISTORY:

   81-06-01 Jim Gray : removed assn type and len, now that
   mu_convert is being used.


*/


dcl 1 pred_node based (pn_ptr),			/*  structure of predicate tree node */
    2 type fixed bin,				/*  indicates if node or leaf */
    2 id unal,					/* id for node */
      3 lleaf_id like pred_leaf.id,			/* id for left leaf */
      3 op_code bit (6) unal,				/* operator code for this node */
      3 rleaf_id like pred_leaf.id,			/* id for right leaf */
    2 term_type fixed bin (5) unal,			/* if term, indicates type of term */
    2 root bit (1) unal,				/* on if root node */
    2 term bit (1) unal,				/* on if node is term */
    2 determined bit (1) unal,			/* on if term is "determined" independent of other terms */
    2 reserved bit (21) unal,				/* reserved for future use */
    2 parent ptr,					/* pointer to parent node */
    2 lbr ptr,					/* pointer to left branch */
    2 rbr ptr;					/* pointer to right branch */

dcl  pn_ptr ptr;

dcl 1 pred_array based (pred_ptr),			/* list representation of pred. */
    2 type fixed bin,				/*  indicates array, rather than node or leaf */
    2 num_ands fixed bin,				/* is the number of and groups */
    2 and_ptr (num_ands_init refer (pred_array.num_ands)) ptr; /* pointers to the and groups */

dcl  pred_ptr ptr;

dcl 1 and_group based (ag_ptr),			/* list of pointers to all terms in and group */
    2 num_terms fixed bin,				/* number of terms in list */
    2 term_ptr (num_terms_init refer (and_group.num_terms)) ptr; /* point to terms in this and group */

dcl  ag_ptr ptr;
dcl (num_ands_init,
     num_terms_init) fixed bin;

dcl ((CURRENT_OP init ("000001"b)),			/* pred_node op_codes */
    (AND_OP init ("000010"b)),
    (OR_OP init ("000011"b)),
    (NOT_OP init ("000100"b)),
    (EQ_OP init ("000101"b)),
    (NE_OP init ("000110"b)),
    (LT_OP init ("000111"b)),
    (GT_OP init ("001000"b)),
    (LE_OP init ("001001"b)),
    (GE_OP init ("001010"b)),
    (ALL_OP init ("001011"b))) bit (6) int static options (constant);

dcl ((CONST init (1)),				/* pred leaf data types */
    (ATTR init (2)),
    (EXPRES init (3))) fixed bin int static options (constant);

dcl ((NODE init (0)),				/* type indicators */
    (LEAF init (1)),
    (ARRAY init (2))) fixed bin int static options (constant);

dcl ((V_C init (1)),				/* pred_node term_types */
    (V_V init (2))) fixed bin (5) int static options (constant);

dcl 1 pred_leaf based (pl_ptr),			/* structure for a predicate tree leaf */
    2 type fixed bin,				/* indicates if node or leaf */
    2 id,						/* leaf id */
      3 var_id bit (18) unal,				/* index of tuple var. */
      3 attr_id bit (18) unal,			/* defn order of attr. */
    2 dummy bit (1) unal,				/* on if dummy leaf for ALL_OP */
    2 reserved bit (35) unal,				/* reserved for future use */
    2 data_type fixed bin,				/* whether const, attr, or expr */
    2 lit_offset fixed bin (35),			/* bit offset of literal or expr. result */
    2 lit_length fixed bin (35),			/* bit length of literal or expr. result */
    2 rslt_desc bit (36),				/* descriptor of expr. result */
    2 lit_ptr ptr,					/* ptr to literal or expr. result value */
    2 lit_desc_ptr ptr,				/* ptr to literal or expr. result desc. */
    2 ai_ptr ptr,					/* to rm_attr_info for attribute */
    2 expr_ptr ptr,					/* pointer to expr. structure if expr. leaf */
    2 parent ptr;					/* pointer to parent node */

dcl  pl_ptr ptr;

/* END mrds_predicate_tree.incl.pl1 */



*/
                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
and Bull HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for 
managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by Bull HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved

*/
