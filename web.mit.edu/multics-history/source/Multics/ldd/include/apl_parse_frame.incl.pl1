/* ====== BEGIN INCLUDE SEGMENT	apl_parse_frame.incl.pl1 ================================== */

declare	1 parse_frame		aligned based (parse_frame_ptr),
	  2 last_parse_frame_ptr	ptr unaligned,	/* pointer to last parse frame, or null */
	  2 parse_frame_type	fixed bin,	/* suspended, function, eval input, etc. */
	  2 function_bead_ptr	ptr unaligned,	/* ptr to function bead */
	  2 lexed_function_bead_ptr	ptr unaligned,	/* ptr to lexed function bead */
	  2 reduction_stack_ptr	ptr unaligned,	/* ptr to reduction stack for this frame */
	  2 current_parseme		fixed bin,	/* element of reduction stack that is top of stack */
	  2 current_lexeme		fixed bin,	/* element number of current lexeme */
	  2 current_line_number	fixed bin,	/* line number being executed */
	  2 return_point		fixed bin,	/* where to join the reductions on return */
	  2 put_result		fixed bin,	/* where to put the value when returning to this frame */
	  2 print_final_value	bit(1) aligned,	/* if true, print final value on line */
	  2 initial_value_stack_ptr	ptr unaligned,	/* for cleaning up the value stack */
	  2 number_of_ptrs		fixed bin,	/* number of old meaning ptrs */
	  2 old_meaning_ptrs	dim (number_of_ptrs refer (parse_frame.number_of_ptrs)) ptr unaligned;
						/* old meanings for local variables. */

declare	number_of_ptrs fixed bin;

declare	(suspended_frame_type init (1),		/* for comparison with parse frame type */
	function_frame_type init (2),
	evaluated_frame_type init (3),
	execute_frame_type init (4),
	save_frame_type init (5)
	) fixed bin internal static options (constant);

declare	reductions_pointer pointer;

declare
	1 reduction_stack		aligned dim (1000) based (reductions_pointer),
	  2 type			fixed bin,	/* type of parseme */
	  2 bits			unaligned like operator_bead.bits_for_parse,
	  2 semantics		ptr unaligned,
	  2 lexeme		fixed bin,

	1 reduction_stack_for_op	aligned dim (1000) based (reductions_pointer),
	  2 type			fixed bin,
	  2 bits			unaligned like operator_bead.bits_for_parse,
	  2 semantics		fixed bin,
	  2 lexeme		fixed bin,

	(eol_type init(0),					/* parseme types - end of line */
	bol_type init(1),					/* begining of line */
	val_type init(2),					/* value */
	op_type init(3),					/* op */
	open_paren_type init(4),
	close_paren_type init(5),
	open_bracket_type init(6),
	close_subscript_type init(7),
	close_rank_type init(8),
	semi_colon_type init(9),
	diamond_type init (10),
	subscript_type init (11)) fixed bin internal static options (constant);

/* ------ END INCLUDE SEGMENT		apl_parse_frame.incl.pl1 ---------------------------------- */


*/
                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
and Bull HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for 
managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by Bull HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved

*/
