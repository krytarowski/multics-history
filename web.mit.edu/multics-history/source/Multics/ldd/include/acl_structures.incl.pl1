/* Begin include file -- acl_structures.incl.pl1 BIM 3/82 */
/* format: style3,indcomtxt,idind30 */

declare   acl_ptr                       pointer;
declare   acl_count                     fixed bin;

declare 1 general_acl                   aligned based (acl_ptr), /* for fs_util_ */
          2 version                     char (8) aligned,
          2 count                       fixed bin,
          2 entries                     (acl_count refer (general_acl.count)) aligned like general_acl_entry;

declare 1 general_acl_entry             based,
          2 access_name                 character (32) unaligned,
          2 mode                        bit (36) aligned,
          2 status_code                 fixed bin (35);


declare 1 general_extended_acl          aligned based (acl_ptr), /* for fs_util_ */
          2 version                     char (8) aligned,
          2 count                       fixed bin,
          2 entries                     (acl_count refer (general_extended_acl.count)) aligned like general_extended_acl_entry;

declare 1 general_extended_acl_entry    aligned based,
          2 access_name                 character (32) unaligned,
          2 mode                        bit (36) aligned,
          2 extended_mode               bit (36) aligned,
          2 status_code                 fixed bin (35);


declare 1 general_delete_acl            aligned based (acl_ptr), /* for file_system_ */
          2 version                     char (8) aligned,
          2 count                       fixed bin,
          2 entries                     (acl_count refer (general_delete_acl.count)) aligned like delete_acl_entry;

declare 1 general_delete_acl_entry      aligned based,
          2 access_name                 character (32) unaligned,
          2 status_code                 fixed bin (35);


declare 1 segment_acl                   aligned based (acl_ptr),
          2 version                     fixed bin,
          2 count                       fixed bin,
          2 entries                     (acl_count refer (segment_acl.count)) aligned like segment_acl_entry;

declare 1 segment_acl_entry             like general_extended_acl_entry aligned based;
declare 1 segment_acl_array             (acl_count) aligned like segment_acl_entry based (acl_ptr);


declare 1 directory_acl                 aligned based (acl_ptr),
          2 version                     fixed bin,
          2 count                       fixed bin,
          2 entries                     (acl_count refer (directory_acl.count)) aligned like directory_acl_entry;

declare 1 directory_acl_entry           like general_acl_entry aligned based;
declare 1 directory_acl_array           (acl_count) aligned like directory_acl_entry based (acl_ptr);


declare 1 delete_acl                    based (acl_ptr) aligned,
          2 version                     fixed bin,
          2 count                       fixed bin,
          2 entries                     (acl_count refer (delete_acl.count)) aligned like delete_acl_entry;

declare 1 delete_acl_entry              like general_delete_acl_entry aligned based;
declare 1 delete_acl_array              (acl_count) aligned like delete_acl_entry based (acl_ptr);


declare  (SEG_ACL_VERSION_1             init ("sga1"),
          DIR_ACL_VERSION_1             init ("dra1"),
          DELETE_ACL_VERSION_1          init ("dla1"))
                                        char (4) int static options (constant);

declare  (GENERAL_ACL_VERSION_1         init ("gacl001"),
          GENERAL_EXTENDED_ACL_VERSION_1 init ("gxacl001"),
          GENERAL_DELETE_ACL_VERSION_1  init ("gdacl001"))
                                        char (8) internal static options (constant);

declare   ACL_VERSION_1                 fixed bin init (1) int static options (constant);

/* End include file acl_structures.incl.pl1 */


*/
                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
and Bull HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for 
managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by Bull HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved

*/
