
/* STATIC DATA */
dcl max_noshift_chars(0:2) static options(constant) init(	40 /*(4)*/,	24 /*(3)*/,	36 /*(4)*/);
dcl max_shift_chars(0:2) static options(constant) init(	16 /*(2)*/,	 8 /*(1)*/,	12 /*(2)*/);
/* 0 -> both operands are even word aligned (sal+tal=0)
   1 -> operands are aligned on conflicting double word boundaries (sal+tal=1)
   2 -> both operands are odd word aligned (sal+tal=2)   */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

dcl bypass_readkey_instr(4) bit(36) static init(
	"001000000000000010010011101001000000"b,	/* lda	pr1|2	(fsb.open_mode) */
	"000000000000110000011111101000000111"b,	/* ana	60,dl		*/
	"000000000000100000001001101000000111"b,	/* cmpa	40,dl	(i-o mode) */
	"000000000000000000110000001000000100"b);	/* tnz	[tra_tag],ic	*/
dcl bypass_seqerror_instr(2) bit(36) static init(
	"001000000000000110010011100001000000"b,	/* szn	pr1|6	(fsb.keylen_sw) */
	"000000000000000000110000001000000100"b);	/* tnz	[tra_tag],ic	*/
dcl bypass_mode_error_instr(4) bit(36) static init(
	"001000000000000010010011101001000000"b,	/* lda	pr1|2	(fsb.open_mode) */
	"000000000000110000011111101000000111"b,	/* ana	60,dl	*/
	"000000000000110000001001101000000111"b,	/* cmpa	60,dl	(output) */
	"000000000000000000110000001000000100"b);	/* tnz	[tra_tag],ic	*/

/* [3.0-1]  */	dcl epp7_ic_du bit(18) static init("011111011100000100"b);
/* [3.0-1] */	dcl lda_dl bit(18) static init("010011101000000111"b);

dcl tra bit(36) static init(		"000000000000000000111001000000000100"b);
dcl ad2d_ic_to_reg bit(36) static init(	"000000000001000000010000010100000100"b);
dcl mlr_ic_to_reg bit(36) static init(	"000100000001000000001000000100000100"b);
dcl mlr_reg_to_reg bit(36) static init(	"000100000001000000001000000101000000"b);
dcl btd_instr bit(36) static init(	"000000000001000000011000001101000000"b);
dcl dtb_instr bit(36) static init(	"000000000001000000011000101101000000"b);
dcl cmpc_instr bit(36) static init(	"000100000001100000001000110101100000"b);
dcl tze_tnz (0:1) bit(36) static init(	"000000000000000000110000000000000100"b,
				"000000000000000000110000001000000100"b);
dcl cmpa_ bit(12) static init(	"001001101001"b);
dcl asa_ bit(12) static init(		"000101101001"b);
dcl ssa_ bit(12) static init(		"001101101001"b);
dcl staq_ bit(12) static init(	"111101111001"b);
dcl sta_ bit(12) static init(		"111101101001"b);
dcl stq_ bit(12) static init(		"111101110001"b);
dcl stba_ bit(12) static init(	"101101001001"b);
dcl stbq_ bit(12) static init(	"101101010001"b);
dcl stz_ bit(12) static init(		"100101000001"b);
dcl szn_ bit(12) static init(		"010011100001"b);
dcl lda bit(12) static init(		"010011101000"b);
dcl lda_ bit(12) static init(		"010011101001"b);
dcl lda_icmod bit(18) static init(	"010011101000000100"b);
dcl ldq_ bit(12) static init(		"010011110001"b);
dcl ldq_icmod bit(18) static init(	"010011110000000100"b);
dcl ldaq_ bit(12) static init(	"010011111001"b);
dcl ldaq_icmod bit(18) static init(	"010011111000000100"b);
dcl sba_dlmod bit(18) static init(	"001111101000000111"b);
dcl ld_ (0:1) bit(12) static init(	"010011101001"b,
				"010011111001"b);
dcl ld_icmod (0:1) bit(18) static init(	"010011101000000100"b,
				"010011111000000100"b);
dcl rs (0:1) bit(9) static init(	"111011001"b,
				"111011011"b);
dcl ls (0:1) bit(9) static init(	"111011101"b,
				"111011111"b);

dcl dmod (0:1) bit(6) static init	("000011"b,
				"000111"b);
dcl tagarray (0:3,7) bit(6) static init("100000"b,"110000"b,"111000"b,""b,""b,""b,""b,
				"010000"b,"011000"b,"011100"b,"011100"b,"011100"b,"011100"b,"011100"b,
				"001000"b,"001100"b,"001100"b,"001100"b,"001100"b,"001100"b,""b,
				"000100"b,"000100"b,"000100"b,"000100"b,"000100"b,""b,""b);

/* EXTERNAL ENTRY NAMES */

dcl cobol_move_gen entry(ptr);
dcl cobol_make_type9$long_bin entry(ptr,fixed bin,fixed bin);
dcl cobol_define_tag entry(fixed bin);
dcl cobol_make_tagref entry(fixed bin,fixed bin,ptr);
dcl cobol_addr entry(ptr,ptr,ptr);
dcl cobol_pool entry(char(*),fixed bin,fixed bin);
dcl cobol_pool$search_op entry(char(*),fixed bin,fixed bin,fixed bin);
dcl cobol_pool$search_op_byte entry(char(*),fixed bin,fixed bin,fixed bin,fixed bin);
dcl cobol_reloc$cobol_emit entry(ptr,ptr,fixed bin);


/* BUILTIN FUNCTIONS */

	/*****	Declaration for builtin function	*****/

dcl	(substr,mod,binary,fixed,addr,addrel,rel,length,
	string,unspec,null,index,max,min)		builtin;


%include cobol_;


*/
                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
and Bull HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for 
managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by Bull HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved

*/
