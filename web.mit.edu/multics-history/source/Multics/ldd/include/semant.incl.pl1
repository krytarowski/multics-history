/* BEGIN INCLUDE FILE ... semant.incl.pl1 */

/* Modified: 30 Aug 1979 by PCK to fix 1804 and 1823 */
/* Modified: 26 Aug 1979 by PCK to implement by name assignment */


declare	alloc_semantics	entry(pointer,pointer,pointer);
			/* parameter 1:	(input)	block node pointer		*/
			/* parameter 2:	(input)	statement node pointer	*/
			/* parameter 3:	(in/out)	tree pointer		*/

declare	alloc_semantics$init_only entry(pointer,pointer,pointer);
			/* parameter 1:	(input)	qualifier pointer		*/
			/* parameter 2:	(input)	statement node pointer	*/
			/* parameter 3:	(input)	symbol node pointer		*/

declare	builtin		entry(pointer,pointer,pointer,pointer,pointer,bit(36) aligned)
			returns(pointer);
			/* parameter 1:	(input)	block node pointer		*/
			/* parameter 2:	(input)	statement node pointer	*/
			/* parameter 3:	(input)	tree pointer		*/
			/* parameter 4:	(input)	subscript pointer		*/
			/* parameter 5:	(input)	builtin symbol node pointer	*/
			/* parameter 6:	(in/out)	context			*/
			/* return:	(output)	tree pointer		*/

declare	check_star_extents	entry(pointer,pointer);
			/* parameter 1:	(input) symbol node of procedure	*/
			/* parameter 2:	(input) argument list pointer		*/

declare	compare_declaration	entry(pointer,pointer,bit(1) aligned) reducible
			returns(bit(1) aligned);
			/* parameter 1:	(input)	reference or symbol node ptr	*/
			/* parameter 2:	(input)	symbol node ptr	*/
			/* parameter 3:	(input)	"1"b if aligned attribute ignored for string	*/
			/* return:	(output)	compare bit		*/

declare	context_processor	entry(pointer,label);
			/* parameter 1:	(input)	root block node pointer	*/

declare	declare		entry(pointer);
			/* parameter 1:	(input)	symbol node pointer		*/

declare	declare_structure	entry(pointer);
			/* parameter 1:	(input)	symbol node pointer		*/

declare	defined_reference	entry(pointer,pointer,pointer,pointer,pointer,bit(36) aligned)
			returns(pointer);
			/* parameter 1:	(input)	block node pointer		*/
			/* parameter 2:	(input)	statement node pointer	*/
			/* parameter 3:	(input)	tree pointer		*/
			/* parameter 4:	(input)	subscript list pointer or null*/
			/* parameter 5:	(input)	symbol node pointer		*/
			/* parameter 6:	(in/out)	context			*/
			/* return:	(output)	tree pointer		*/

declare	do_semantics	entry(pointer,pointer,pointer);
			/* parameter 1:	(input)	block node pointer		*/
			/* parameter 2:	(input)	statement node pointer	*/
			/* parameter 3:	(input)	tree pointer		*/

declare	expand_assign	entry(pointer,pointer,pointer,bit(36) aligned,pointer)
			returns(pointer);
			/* parameter 1:	(input)	block node pointer		*/
			/* parameter 2:	(input)	statement node pointer	*/
			/* parameter 3:	(input)	tree pointer		*/
			/* parameter 4:	(in/out)	context			*/
			/* parameter 5:	(input)	aggregate reference node ptr	*/
			/* return:	(output)	tree pointer		*/

declare	expand_by_name	entry(pointer,pointer,pointer);
			/* parameter 1:	(input)	block node pointer		*/
			/* parameter 2:	(input)	statement node pointer	*/
			/* parameter 3:	(input/output)	tree pointer		*/

declare	expand_infix	entry(pointer,pointer,pointer,bit(36) aligned)
			returns(pointer);
			/* parameter 1:	(input)	block node pointer		*/
			/* parameter 2:	(input)	statement node pointer	*/
			/* parameter 3:	(input)	tree pointer		*/
			/* parameter 4:	(in/out)	context			*/
			/* return:	(output)	tree pointer		*/

declare	expand_initial	entry(pointer,pointer,pointer);
			/* parameter 1:	(input)	symbol node pointer		*/
			/* parameter 2:	(input)	statement node pointer	*/
			/* parameter 3:	(input)	locator			*/

declare	expand_prefix	entry(pointer,pointer,pointer,bit(36) aligned)
			returns(pointer);
			/* parameter 1:	(input)	block node pointer		*/
			/* parameter 2:	(input)	statement node pointer	*/
			/* parameter 3:	(input)	tree pointer		*/
			/* parameter 4:	(in/out)	context			*/
			/* return:	(output)	tree pointer		*/

declare	expand_primitive	entry(pointer,pointer,pointer,bit(36) aligned)
			returns(pointer);
			/* parameter 1:	(input)	block node pointer		*/
			/* parameter 2:	(input)	statement node pointer	*/
			/* parameter 3:	(input)	tree pointer		*/
			/* parameter 4:	(input)	context			*/
			/* return:	(output)	tree pointer		*/

declare	expression_semantics entry(pointer,pointer,pointer,bit(36) aligned)
			returns(pointer);
			/* parameter 1:	(input)	block node pointer		*/
			/* parameter 2:	(input)	statement node pointer	*/
			/* parameter 3:	(input)	tree pointer		*/
			/* parameter 4:	(in/out)	context			*/
			/* return:	(output)	tree pointer		*/

declare	fill_refer	entry(pointer,pointer,bit(1) aligned)
			returns(pointer);
			/* parameter 1:	(input)	null,ref node,op node ptr */
			/* parameter 2:	(input)	null,ref node,op node ptr */
			/* parameter 3:	(input)	copy switch for param 2 */
			/* return:	(output)	ptr to processed tree */

declare	io_data_list_semantics$format_list_semantics entry(pointer,pointer,pointer);
			/* parameter 1:	(input)	block node pointer		*/
			/* parameter 2:	(input)	statement node pointer	*/
			/* parameter 3:	(in/out)	tree pointer		*/

declare	function		entry(pointer,pointer,pointer,pointer,bit(36) aligned)
			returns(pointer);
			/* parameter 1:	(input)	block node pointer		*/
			/* parameter 2:	(input)	statement node pointer	*/
			/* parameter 3:	(input)	tree pointer		*/
			/* parameter 4:	(input)	symbol node pointer		*/
			/* parameter 5:	(in/out)	context			*/
			/* return:	(output)	tree pointer		*/

declare	generic_selector	entry(pointer,pointer,pointer,pointer,bit(36) aligned)
			returns(pointer);
			/* parameter 1:	(input)	block node pointer	*/
			/* parameter 2:	(input)	statement node pointer	*/
			/* parameter 3:	(input)	tree pointer	*/
			/* parameter 4:	(input)	pointer to argument list	*/
			/* parameter 5:	(in/out)	context		*/
			/* return:	(output)	tree pointer	*/

declare	io_data_list_semantics entry(pointer,pointer,pointer);
			/* parameter 1:	(input)	block node pointer		*/
			/* parameter 2:	(input)	statement node pointer	*/
			/* parameter 3:	(input)	operator node pointer	*/

declare	io_semantics	entry(pointer,pointer,pointer);
			/* parameter 1:	(input)	block node pointer		*/
			/* parameter 2:	(input)	statement node pointer	*/
			/* parameter 3:	(input)	tree pointer		*/

declare	lookup		entry(pointer,pointer,pointer,pointer,bit(36) aligned)
			returns(bit(1) aligned);
			/* parameter 1:	(input)	block node pointer		*/
			/* parameter 2:	(input)	stmnt|symbol node pointer	*/
			/* parameter 3:	(input)	token or reference node ptr	*/
			/* parameter 4:	(output)	symbol node pointer		*/
			/* parameter 5:	(in/out)	context			*/
			/* return:	(output)	symbol found bit		*/

declare	make_non_quick	entry(pointer, bit (36) aligned);
			/* parameter 1:	(input)	tree pointer	*/
			/* parameter 2:	(input)	reason why being made nonquick */

declare	match_arguments	entry(pointer,pointer) reducible
			returns(bit(1) aligned);
			/* parameter 1:	(input)	reference or symbol node ptr	*/
			/* parameter 2:	(input)	reference or symbol node ptr	*/
			/* return:	(output)	compare bit		*/

declare	offset_adder	entry(pointer,fixed binary(31),fixed binary(3),bit(1) aligned,
			      pointer,fixed binary(31),fixed binary(3),bit(1) aligned,bit(1));
			/* parameter 1:	(in/out)	tree pointer		*/
			/* parameter 2:	(in/out)	constant size		*/
			/* parameter 3:	(in/out)	units			*/
			/* parameter 4:	(in/out) 	ON if units ^= word_, but tree in words	*/
			/* parameter 5:	(input)	tree pointer		*/
			/* parameter 6:	(input)	constant size		*/
			/* parameter 7:	(input)	units			*/
			/* parameter 8:	(input)	ON if units ^= word_, but tree in words	*/
			/* parameter 9:	(input)	ON if should not improve units	*/

declare	operator_semantics	entry(pointer,pointer,pointer,bit(36) aligned)
			returns(pointer);
			/* parameter 1:	(input)	block node pointer		*/
			/* parameter 2:	(input)	statement node pointer	*/
			/* parameter 3:	(input)	tree pointer		*/
			/* parameter 4:	(in/out)	context			*/
			/* return:	(output)	tree pointer		*/

declare	propagate_bit	entry(pointer,fixed binary(15));
			/* parameter 1:	(input)	symbol node pointer		*/
			/* parameter 2:	(input)	attribute number		*/

declare	semantic_translator$call_es entry(pointer,pointer,pointer,label,bit(1) aligned)
			returns(pointer);
			/* parameter 1:	(input)	block ptr	*/
			/* parameter 2:	(input)	statement ptr	*/
			/* parameter 3:	(input)	tree ptr	*/
			/* parameter 4:	(input)	failure label	*/
			/* parameter 5:	(input)	"1"b -- convert to integer	*/
			/* return:	(output)	tree ptr		*/

declare	simplify_expression	entry(pointer,fixed bin,bit(1)aligned);
			/* parameter 1:	(in/out)	tree pointer		*/
			/* parameter 2:	(output)	value of constant, if the entire tree
						is simplified		*/
			/* parameter 3:	(output)	bit indicating if the tree has
						been simplified		*/

declare	simplify_offset	entry(pointer,bit(36) aligned);
			/* parameter 1:	(input)	reference node pointer	*/
			/* parameter 2:	(input)	context			*/

declare	subscripter	entry(pointer,pointer,pointer,pointer,pointer)
			returns(pointer);
			/* parameter 1:	(input)	block node pointer		*/
			/* parameter 2:	(input)	statement node pointer	*/
			/* parameter 3:	(input)	tree pointer		*/
			/* parameter 4:	(in/out)	subscript list pointer	*/
			/* parameter 5:	(input)	symbol node pointer		*/
			/* return:	(output)	reference node pointer	*/

declare	validate		entry(pointer);
			/* parameter 1:	(input)	symbol node pointer		*/

%include language_utility;
/* END INCLUDE FILE ... semant.incl.pl1 */


*/
                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
and Bull HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for 
managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by Bull HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved

*/
