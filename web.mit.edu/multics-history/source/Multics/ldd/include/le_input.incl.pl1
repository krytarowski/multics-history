/****  START OF:	le_input.incl.pl1			 *  *  *  *  *  */

  /****^  HISTORY COMMENTS:
  1) change(86-08-12,Elhard), approve(86-08-12,MCR7505),
     audit(86-12-10,DGHowe), install(86-12-10,MR12.0-1241):
     Orignally written to define the le_ input structures.
                                                   END HISTORY COMMENTS */

  /*** ****************************************************************/
  /***							*/
  /***	Name:	le_input					*/
  /***	Function:	This include file declares the input structure to	*/
  /***		to the le_ subroutine.  The structure consists of	*/
  /***		a set of standard data, and a variable length	*/
  /***		array of options.  The options have a type field	*/
  /***		which specified what the option means.  The	*/
  /***		options can have the following types:		*/
  /***							*/
  /***		PATH	  - specified a single input component	*/
  /***			    to be bound in with the object	*/
  /***		 name	  - is the name of the component	*/
  /***		 path_or_ep - is the pathname to the component	*/
  /***			    this may be an archive component	*/
  /***			    pathname.			*/
  /***		 flags      - link is used by the le command to	*/
  /***			    keep track of the pathnames that	*/
  /***			    were found via links for chase	*/
  /***			    processing.			*/
  /***		 bc	  - is the bit count of the component	*/
  /***		 optp	  - is a pointer to the component	*/
  /***							*/
  /***		LIBRARY	  - specifies a single library	*/
  /***			    component.  Library components are	*/
  /***			    only included if they are referred	*/
  /***			    to by a PATH component or a library	*/
  /***			    component that is referenced and	*/
  /***			    therefor included.		*/
  /***		 name	  - same as for PATH.		*/
  /***		 path_or_ep - same as for PATH.		*/
  /***		 flags	  - same as for PATH.		*/
  /***		 bc	  - same as for PATH.		*/
  /***		 optp	  - same as for PATH.		*/
  /***							*/
  /***		ADDNAME	  - specifies a name to be added to the	*/
  /***			    bound object.			*/
  /***		 name	  - is the name to be added to the	*/
  /***			    bound unit			*/
  /***							*/
  /***		SYNONYM	  - specifies a synonym to be added to	*/
  /***			    a particular component.  This is	*/
  /***			    reflected as a segname definition	*/
  /***			    added to the block for that	*/
  /***			    component.			*/
  /***		 name	  - specifies the name of the component	*/
  /***			    to which you are adding a name.	*/
  /***		 path_or_ep - is the name being added		*/
  /***							*/
  /***		RETAIN	  - gives a starname to be used when	*/
  /***			    determining if a definition should	*/
  /***			    be retained.  If the definition	*/
  /***			    matches the starname and no more	*/
  /***			    specific info is given, the name is	*/
  /***			    retained.			*/
  /***		 flags      - the "inhibit_error" flag indicates	*/
  /***			    that it is not an error if this	*/
  /***			    option is unused.		*/
  /***		 path_or_ep - is the starname to match		*/
  /***							*/
  /***		DELETE	  - gives a starname to be used when	*/
  /***			    determining if a definition should	*/
  /***			    be retained.  If the definition	*/
  /***			    matches the starname and no more	*/
  /***			    specific info is given, the name is	*/
  /***			    deleted.			*/
  /***		 flags      - the "inhibit_error" flag indicates	*/
  /***			    that it is not an error if this	*/
  /***			    option is unused.		*/
  /***		 path_or_ep - is the starname to match.		*/
  /***							*/
  /***		NO_LINK	  - gives a starname to be used when	*/
  /***			    determining if a definition should	*/
  /***			    be retained.  If the definition	*/
  /***			    matches the starname and no more	*/
  /***			    specific info is given, the name is	*/
  /***			    retained and references to the	*/
  /***			    definition within the bound uni	*/
  /***			    are not resolved but are generated	*/
  /***			    as external links.		*/
  /***		 flags      - the "inhibit_error" flag indicates	*/
  /***			    that it is not an error if this	*/
  /***			    option is unused.		*/
  /***		 path_or_ep - is the starname to match		*/
  /***							*/
  /***		TABLE	  - specifies that the table for a	*/
  /***			    particular component is to be	*/
  /***			    retained.			*/
  /***		 name	  - is the name of the component to	*/
  /***			    which the option applies.  If name	*/
  /***			    is "", this is a global option and	*/
  /***			    applies to all component for which	*/
  /***			    a specific option does not exist.	*/
  /***							*/
  /***		NO_TABLE	  - specifies that the table for a	*/
  /***			    particular component is to be	*/
  /***			    deleted.			*/
  /***		 name	  - is the name of the component to	*/
  /***			    which the option applies.  If name	*/
  /***			    is "", this is a global option and	*/
  /***			    applies to all component for which	*/
  /***			    a specific option does not exist.	*/
  /***							*/
  /*** ****************************************************************/
  
  dcl 01 le_input		aligned based,
       02 header		aligned,
        03 version		char (8),
        03 name		char (32),
        03 flags		aligned,
         04 perprocess_static	bit (1) unaligned,
         04 force		bit (1) unaligned,
         04 debug		bit (1) unaligned,
         04 list		bit (1) unaligned,
         04 map		bit (1) unaligned,
         04 auto_segnames	bit (1) unaligned,
         04 mbz		bit (30) unaligned,
        03 output_file	unaligned,
         04 dir		char (168),
         04 entry		char (32),
        03 component_size	fixed bin,
        03 display_severity	fixed bin,
        03 abort_severity	fixed bin,
        03 bindfile		aligned,
         04 name		char (32),
         04 dt_updated	fixed bin (71),
         04 dt_modified	fixed bin (71),
        03 pad		bit (36),
        03 n_opts		fixed bin,
       02 opt		dim (0 refer (le_input.n_opts)) like le_option;
  
  dcl 01 le_option		aligned based,
       02 name		char (32) unaligned,
       02 path_or_ep	char (194) unaligned,
       02 flags		unaligned,
        03 link		bit (1),
        03 ignore		bit (1),
        03 used		bit (1),
        03 inhibit_error	bit (1),
        03 mbz		bit (5),
       02 type		fixed bin (8) unaligned,
       02 bc		fixed bin (24),
       02 optp		ptr;
  
  dcl le_input_version_1	char (8) static options (constant)
			init ("le_ 1.0 ");
  
  /* constants for the defined option types */
  
  dcl PATH		fixed bin static options (constant) init (1);
  dcl LIBRARY		fixed bin static options (constant) init (2);
  dcl ADDNAME		fixed bin static options (constant) init (3);
  dcl SYNONYM		fixed bin static options (constant) init (4);
  dcl RETAIN		fixed bin static options (constant) init (5);
  dcl DELETE		fixed bin static options (constant) init (6);
  dcl NO_LINK		fixed bin static options (constant) init (7);
  dcl TABLE		fixed bin static options (constant) init (8);
  dcl NO_TABLE		fixed bin static options (constant) init (9);
  
/****  END OF:	le_input.incl.pl1			 *  *  *  *  *  */


*/
                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
and Bull HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for 
managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by Bull HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved

*/
