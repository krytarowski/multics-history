/*  START OF:	azm_va_args.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/* This is a structure for argument processing of virtual addresses (VAs) and its related arguments. 
   These related arguments can be a an offset modifier EXP which can be a positive or negative
   octal number and a RANGE can be specified. Both EXP and RANGE are optional arguments. The VA
   must always be specified. These three args are non-positional on the request line but there
   is an implicit order among the three. The first non-control argument on the request line must be 
   a VA. The second non-control argument on the request line can be a EXP or a RANGE. If it is a 
   RANGE then an EXP cannot be specified. In other words, a EXP must follow a VA.
*/

/* Created: 22 MAY 84 by BLB */

dcl 1 va_args			aligned,
					/* fully resolved segment number of the virtual address  */
      2 segno			fixed bin (18) aligned, 
					/* fully resolved offset of the virtual address  */
      2 offset			fixed bin(18) unaligned,
					/* offset modifier (+N, -N) of the virtual address  */
      2 offset_modifier		fixed bin(18),
					/* The range of the addr area specified  */
      2 range			fixed bin(18) unaligned,
      2 va_switches			unaligned,
        3 valid_va			bit (1) unaligned,	/* on if valid virtual address		*/
        3 valid_modifier		bit (1) unaligned,  /* on if valid offset modifier		*/
        3 valid_range		bit (1) unaligned,	/* on if valid range			*/
        3 modifier_before_indirect      bit(1) unaligned,  /* on if the offset modifier is specified */ 
						/* before indirection eg. A|B+10,*		*/
        3 va_pad			bit (32) unaligned, /* must be zero 				*/
      2 va_position			aligned,            /* index into the argument list for: 		*/
        3 va_idx			fixed bin,          /* virtual address				*/
        3 mod_idx			fixed bin,	/* the offset modifier index			*/
        3 range_idx			fixed bin,	/* the range argument index			*/
      2 resolved_va			ptr,		/* The resolved virtual address		*/
      2 ecode			fixed bin(35),	/* error code				*/
      2 error_msg			char(80) var,	/* error message				*/
      2 va_string			char(256) var;	/* The complete virtual address after parsing thru the args. */

dcl 1 va				based (va_args_ptr) like va_args;
dcl va_args_ptr			ptr;

/*  END OF:	azm_va_args.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


*/
                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
and Bull HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for 
managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by Bull HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved

*/
