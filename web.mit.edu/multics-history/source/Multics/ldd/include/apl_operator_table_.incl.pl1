/* ====== BEGIN INCLUDE SEGMENT	apl_operator_table_.incl.pl1 ============================== */

/* this is the structure of the data base apl_operator_table_, as seen by the apl_lex_ module  */
/* 6/18/73, DAM */

dcl 1 apl_operator_table_$apl_operator_table_ external static aligned,
    2 op_index (0 : (511)  /* or so */  ) fixed bin;	/* indexed by char code or pseudo char code */


dcl 1 apl_operator_table_$operator_bead_table external static aligned,	/* table of beads, indexed by op_index */
    2 operator_bead_table(0 : 1000 /* or so */ ) like operator_bead;


dcl   apl_operator_table_$inner_product_table external static aligned,	/* hundreds of beads for all possible
								   inner products */
    1 the_inner_product_table aligned based(addr(apl_operator_table_$inner_product_table)),
    2 inner_product_max_code fixed bin,			/* max index allowed in this table (both dimensions, its square ) */
    2 inner_product_table (0 : the_inner_product_table.inner_product_max_code,
		       0 : the_inner_product_table.inner_product_max_code) like operator_bead;


/*** here are some dummy declarations which are just used to avoid using addrel.
     they are the declarations showing how several related operator beads are grouped together
     in operator_bead_table ***/

/* scalar operator allowing reduction and inner and outer product */

dcl 1 scalar_op based aligned,
     2 first_operator_bead like operator_bead,		/* operator by itself */
     2 slash_operator_bead like operator_bead,		/* simple reduction */
     2 slash_hyphen_operator_bead like operator_bead,		/* reduction on first dimension */
     2 backslash_operator_bead like operator_bead,		/* scan */
     2 backslash_hyphen_operator_bead like operator_bead,	/* scan on first dimension */
     2 outer_product_operator_bead like operator_bead;		/* degree.OP */
	/* inner product stuff is elsewhere, in inner_product_table */


/* mixed operator that allows brackets */

dcl 1 mixed_op based aligned,
     2 first_operator_bead like operator_bead,		/* with no brackets */
     2 brackets_operator_bead like operator_bead;		/* OP[dim] form. */


/* system variable that may be meaningfully assigned into */
/* this includes Quad and QuadQuote as well as QuadIO, SDelta, TDelta, etc. */

dcl 1 system_var_op based aligned,
     2 reference_to like operator_bead,		/* op bead for referring to it */
     2 assignment_to like operator_bead,		/* op bead for assigning into it */
     2 subscripted_assignment_to like operator_bead;	/* op bead for QuadLX[n] -<- m, and things like that */
						/* only present if allow_subscripted_assignment bit is on */

/* ------ END INCLUDE SEGMENT		apl_operator_table_.incl.pl1 ------------------------------ */


*/
                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
and Bull HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for 
managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by Bull HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved

*/
