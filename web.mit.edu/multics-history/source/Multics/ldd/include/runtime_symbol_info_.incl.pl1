/*  BEGIN INCLUDE FILE runtime_symbol_info_.incl.pl1 */


/****^  HISTORY COMMENTS:
  1) change(86-09-05,JMAthane), approve(86-09-05,MCR7525),
     audit(86-09-11,Martinson), install(86-11-12,MR12.0-1208):
     Added runtime_symbol_info_$subrange entry which was missing.  Added
     has_dimensions and has subrange_limits fields in type_info record.
     Structure version numbers have not been changed since this change does not
     affect existing programs.
                                                   END HISTORY COMMENTS */

/* Declarations for using the various entry points in runtime_symbol_info_ */
/* NOTE: These entries do not support PL/1 version 1. */

/* Made structures aligned, removed variable extent from runtime_array_info.bounds 08/25/83 S. Herbst */
/* Added version strings to structures 10/05/83 S. Herbst */
/* Added has_dimensions and has_subrange_limits bits in type_info
Added subrange entry. JMAthane 08/31/84 */


     dcl	   runtime_symbol_info_$type entry (ptr, ptr, fixed bin (35));

     dcl	   1 runtime_type_info    aligned based,
	     2 version	      char (8),		/* = "RUNTYP_1" */
	     2 flags,
	       3 aligned	      bit (1) unal,
	       3 packed	      bit (1) unal,
	       3 size_is_encoded  bit (1) unal,
	       3 has_dimensions   bit (1) unal,
	       3 has_subrange_limits bit (1) unal,
	       3 pad	      bit (23) unal,
	     2 scale	      fixed bin (7) unal,
	     2 (type, base_type)  fixed bin (18) unsigned unal,
	     2 (type_addr, base_type_addr) ptr,
	     2 size	      fixed bin (35);

     dcl	   runtime_symbol_info_$father entry (ptr) returns (ptr);

     dcl	   runtime_symbol_info_$brother entry (ptr) returns (ptr);

     dcl	   runtime_symbol_info_$father_type entry (ptr) returns (ptr);

     dcl	   runtime_symbol_info_$son entry (ptr) returns (ptr);

     dcl	   runtime_symbol_info_$successor entry (ptr) returns (ptr);

     dcl	   runtime_symbol_info_$name entry (ptr) returns (ptr);

     dcl	   runtime_symbol_info_$level entry (ptr) returns (fixed bin);

     dcl	   runtime_symbol_info_$next entry (ptr) returns (ptr);

     dcl	   runtime_symbol_info_$address entry (ptr, ptr, fixed bin (35));

     dcl	   1 runtime_address_info aligned based,
	     2 version	      char (8),		/* = "RUNADR_1" */
	     2 location	      fixed bin (18) unsigned unal,
	     2 class	      fixed bin (6) unsigned unal,
	     2 use_digit	      fixed bin (1) unsigned unal,
	     2 units	      fixed bin (2) unsigned unal,
	     2 offset_is_encoded  bit (1) unal,
	     2 pad	      bit (8) unal,
	     2 offset	      fixed bin (35);

     dcl	   runtime_symbol_info_$array_dims entry (ptr) returns (fixed bin);

     dcl	   runtime_symbol_info_$array entry (ptr, ptr, fixed bin (35));

     dcl	   1 runtime_array_info   aligned based,
	     2 version	      char (8),		/* = "RUNARY_1" */
	     2 access_info	      aligned,
	       3 ndims	      fixed bin (6) unsigned unaligned, /* number of dimensions */
	       3 use_digit	      fixed bin (1) unsigned unaligned, /* if "1"b and units are half words,
						      units are really digits */
	       3 array_units      fixed bin (2) unsigned unaligned,
	       3 virtual_origin_is_encoded
			      bit (1) unaligned,
	       3 pad	      bit (26) unaligned,
	     2 virtual_origin     fixed bin (35),
	     2 bounds	      (16)
			      aligned,
	       3 flags	      aligned,
	         4 lower_is_encoded
			      bit (1) unaligned,
	         4 upper_is_encoded
			      bit (1) unaligned,
	         4 multiplier_is_encoded
			      bit (1) unaligned,
	         4 pad	      bit (33) unaligned,
	       3 lower	      fixed bin (35),
	       3 upper	      fixed bin (35),
	       3 multiplier	      fixed bin (35),
	       3 subscript_type   fixed bin (35),
	       3 subscript_type_addr ptr;

     dcl	   n_dims		      fixed bin;

     dcl	   runtime_symbol_info_$n_variants entry (ptr) returns (fixed bin (35));

     dcl	   runtime_symbol_info_$variant entry (ptr, ptr, fixed bin (35));

     dcl	   1 runtime_variant_info aligned based,
	     2 version	      char (8),		/* = "RUNVAR_1" */
	     2 number_of_variants fixed bin,
	     2 first_value_in_set fixed bin (35),	/* value corresponding to the first bit in set stings  */
	     2 case	      (n_variants),
	       3 set_addr	      ptr,		/* bit string specifies cases;
						       set's base type is this node's type */
	       3 brother_addr     ptr;		/* ptr to brother for this variant */

     dcl	   n_variants	      fixed bin (35);

     dcl	   runtime_symbol_info_$subrange entry (ptr, ptr, fixed bin (35));

     dcl	   1 runtime_subrange_info based,
	     2 version	      char (8),		/* = "RUNSUB_1" */
	     2 flags	      aligned,
	       3 has_subrange_limits bit (1) unal,
	       3 lower_bound_is_encoded bit (1) unal,
	       3 upper_bound_is_encoded bit (1) unal,
	       3 pad	      bit (33) unal,
	     2 subrange_lower_bound fixed bin (35),
	     2 subrange_upper_bound fixed bin (35);


     dcl	   RUNTIME_TYPE_INFO_VERSION_1 char (8) int static options (constant) init ("RUNTYP_1");
     dcl	   RUNTIME_ADDRESS_INFO_VERSION_1 char (8) int static options (constant) init ("RUNADR_1");
     dcl	   RUNTIME_ARRAY_INFO_VERSION_1 char (8) int static options (constant) init ("RUNARY_1");
     dcl	   RUNTIME_VARIANT_INFO_VERSION_1 char (8) int static options (constant) init ("RUNVAR_1");
     dcl	   RUNTIME_SUBRANGE_INFO_VERSION_1 char (8) int static options (constant) init ("RUNSUB_1");


/* END INCLUDE FILE runtime_symbol_info_.incl.pl1 */


*/
                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
and Bull HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for 
managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by Bull HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved

*/
