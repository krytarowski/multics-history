/*  BEGIN:   as_audit_structures.incl.pl1		  *  *  *  *  *  */

/****^  HISTORY COMMENTS:
  1) change(84-01-17,Swenson), approve(), audit(), install():
     Initial coding.
  2) change(87-06-08,GDixon), approve(87-07-13,MCR7741),
     audit(87-07-31,Brunelle), install(87-08-04,MR12.1-1056):
      A) Add AS_AUDIT_CHANNEL_ACTIONS, AS_AUDIT_CHANNEL_DIRECTION, and
         AS_AUDIT_CHANNEL_SERVICE_INFO arrays.
      B) Add channel audit actions for dialin, dialout and dial system.
      C) Correct declaration of as_channel_audit_record_.pad2.
      D) Revise channel_audit_info.
  3) change(87-07-15,GDixon), approve(87-07-15,MCR7741),
     audit(87-07-31,Brunelle), install(87-08-04,MR12.1-1056):
      A) Add AS_AUDIT_PROCESS_TERMINATE action code.
                                                   END HISTORY COMMENTS */

/* format: style2 */

/* This include file describes the binary data associated with
   Answering Service audit records.  */

/**** This first structure defines the Identification and Authentication
      (I&A) audit records associated with login attempts for interactive
      and daemon logins */

     dcl	   1 as_ia_audit_record_int_dmn
			      structure aligned based,
	     2 header	      like audit_record_header aligned,
	     2 record	      like as_ia_audit_record_;

/**** This one is for absentee logins which are not proxy absentees */

     dcl	   1 as_ia_audit_record_abs
			      structure aligned based,
	     2 header	      like audit_record_header aligned,
	     2 record	      like as_ia_audit_record_,
	     2 absentee_input_path
			      char (168);

     dcl	   1 as_ia_audit_record_abs_proxy
			      structure aligned based,
	     2 header	      like audit_record_header aligned,
	     2 record	      like as_ia_audit_record_,
	     2 absentee_input_path
			      char (168),
	     2 proxy_user	      char (32);

/**** The following structure is common to all the I&A records.  It
      contains the relevant information about the I&A process. */

     dcl	   1 as_ia_audit_record_  structure aligned based,
	     2 type	      fixed bin (9) unsigned unaligned,
	     2 version	      fixed bin (9) unsigned unaligned,
	     2 process_type	      fixed bin (3) unsigned unaligned,
	     2 min_ring	      fixed bin (3) unsigned unaligned,
	     2 max_ring	      fixed bin (3) unsigned unaligned,
	     2 pad1	      bit (9) unaligned,
	     2 attributes	      like user_attributes,
	     2 audit_flags	      bit (36) aligned,
	     2 channel	      char (32) aligned,
	     2 terminal_type      char (32) aligned,
	     2 answerback	      char (4) aligned;

/**** The following structure represents the binary information 
      associated with a communications channel access audit message. */

     dcl	   1 as_channel_audit_record
			      structure aligned based,
	     2 header	      like audit_record_header aligned,
	     2 record	      like as_channel_audit_record_;


     dcl	   1 as_channel_audit_record_
			      structure aligned based,
	     2 type	      fixed bin (9) unsigned unaligned,
	     2 version	      fixed bin (9) unsigned unaligned,
	     2 flags	      unaligned,
	       3 channel_info_valid
			      bit (1) unaligned,
	       3 current_access_class_valid
			      bit (1) unaligned,
	       3 pad1	      bit (16) unaligned,
	     2 channel_name	      char (32),
	     2 current_access_class
			      (2) bit (72) aligned,
	     2 access_class_range (2) bit (72) aligned,
	     2 current_service_type
			      fixed bin (17) unaligned,
	     2 service_type	      fixed bin (17) unaligned,
	     2 terminal_type      char (32),
	     2 authenticated_user aligned,
	       3 personid	      char (22) unaligned,
	       3 projectid	      char (9) unaligned,
	       3 pad2	      bit (9) unaligned;

/**** The following structure represents the binary information 
      associated with a dial service audit record */

     dcl	   1 as_dial_service_audit_record
			      structure aligned based,
	     2 header	      like audit_record_header aligned,
	     2 record	      like as_dial_service_audit_record_;

     dcl	   1 as_dial_service_audit_record_
			      structure aligned based,
	     2 type	      fixed bin (9) unsigned unaligned,
	     2 version	      fixed bin (9) unsigned unaligned,
	     2 dial_server_ring   fixed bin (3) unsigned unaligned,
	     2 flags	      unaligned,
	       3 registered_server
			      bit (1) unaligned,
	       3 privileged_server
			      bit (1) unaligned,
	       3 pad1	      bit (13) unaligned,
	     2 dial_qualifier     char (32);

/**** The following structure is used by dial_ctl_ to pass the required
      information to as_access_audit_.  This structure is necessary since
      the data is not available in the user_table_entry or cdte. */

     dcl	   dial_server_info_ptr   ptr;		/* pointer to following structure */

     dcl	   1 dial_server_info     structure aligned based (dial_server_info_ptr),
	     2 server_ring	      fixed bin (3) unaligned,
	     2 flags	      unaligned,
	       3 registered	      bit (1) unaligned,
	       3 privileged	      bit (1) unaligned,
	       3 pad1	      bit (31) unaligned,
	     2 dial_qualifier     char (32);

/**** The following structure is used by dial_ctl_ to pass relevant information
      to as_access_audit_.  The channel name is passed here when we do not
      have a cdtep, for instance. */

     dcl	   channel_audit_info_ptr ptr;

     dcl	   1 channel_audit_info   aligned based (channel_audit_info_ptr),
	     2 channel_name	      char (32),
	     2 valid,
	      (3 service_info,
	       3 access_class,
	       3 access_class_range,
	       3 user_validation_level)
			      bit(1) unal,
	       3 mbz	      bit(32) unal,
	     2 service_info	      char (32),
	     2 access_class	      bit(72) aligned,
	     2 access_class_range (2) bit(72) aligned,
	     2 user_validation_level
			      fixed bin (3);

     dcl	   AS_AUDIT_RECORD_IA_VERSION_1
			      fixed bin (9) initial (1) internal static options (constant);

     dcl	   AS_AUDIT_RECORD_CHN_VERSION_1
			      fixed bin (9) initial (1) internal static options (constant);

     dcl	   AS_AUDIT_RECORD_DIALID_VERSION_1
			      fixed bin (9) initial (1) internal static options (constant);

     dcl	   (
	   AS_AUDIT_PROCESS_CREATE
			      initial (1),
	   AS_AUDIT_PROCESS_DESTROY
			      initial (2),
	   AS_AUDIT_PROCESS_CONNECT
			      initial (3),
	   AS_AUDIT_PROCESS_DISCONNECT
			      initial (4),
	   AS_AUDIT_PROCESS_TERMINATE
			      initial (5)
	   )		      fixed bin (17) internal static options (constant);

     dcl	   (
	   AS_AUDIT_CHANNEL_ATTACH
			      initial (1),
	   AS_AUDIT_CHANNEL_DETACH
			      initial (2),
	   AS_AUDIT_CHANNEL_DIALIN
			      initial (3),
	   AS_AUDIT_CHANNEL_DIALOUT
			      initial (4),
	   AS_AUDIT_CHANNEL_DIAL_SYSTEM
			      initial (5)
	   )		      fixed bin (17) internal static options (constant);

     dcl	   (
	   AS_AUDIT_DIALID_START  initial (1),
	   AS_AUDIT_DIALID_STOP   initial (2)
	   )		      fixed bin (17) internal static options (constant);

     dcl	   AS_AUDIT_CHANNEL_ACTIONS	
			      (5) char (12) internal static options (constant)
			      initial ("ATTACH", "DETACH", "DIALIN", "DIALOUT", "DIAL SYSTEM");
     dcl     AS_AUDIT_CHANNEL_DIRECTION
			      (5) char (4) internal static options (constant)
			      initial ("to", "from", "to", "from", "to");
     dcl     AS_AUDIT_CHANNEL_SERVICE_INFO
			      (5) char (12) internal static options (constant)
			      initial ("Service", "Service", "Dial ID", "Destination", "VChannel");
     dcl	   AS_AUDIT_PROCESS_ACTIONS
			      (5) char (10) internal static options (constant)
			      initial ("CREATE", "DESTROY", "CONNECT", "DISCONNECT", "TERMINATE");

/*  END OF:  as_audit_structures.incl.pl1		  *  *  *  *  *  */


*/
                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
and Bull HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for 
managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by Bull HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved

*/
