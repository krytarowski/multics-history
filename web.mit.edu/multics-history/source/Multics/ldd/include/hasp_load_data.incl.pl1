/* BEGIN INCLUDE FILE ... hasp_load_data.incl.pl1 */
/* Created:  October 1979 by G. Palter */
/* Modified: 16 April 1981 by G. Palter to add rts_mode */

/* Data structure for "load_mpx" highly-privileged control order */

dcl 1 hasp_load_data aligned based (hld_ptr),
    2 event_channel fixed binary (71),			/* event channel to signal loading, crashes, etc. */
    2 configuration_data like hasp_configuration_data,	/* data which controls multiplexer (see below) */
    2 n_subchannels fixed binary,			/* # of configured sub-channels */
    2 subchannels (hasp_load_data_n_subchannels refer (hasp_load_data.n_subchannels)),
      3 devx fixed binary,				/* device index of sub-channel for validating the load */
      3 device_type fixed binary,			/* type of device -- console/printer/reader/punch */
      3 device_number fixed binary;			/* if not console, the device's number (EG: printer 3) */

dcl  hasp_load_data_n_subchannels fixed binary;
dcl  hld_ptr pointer;


/* Event messages for a HASP multiplexer bootload channel */

dcl (HASP_MPX_UP	initial (1),			/* multiplexer has come up */
     HASP_MPX_DOWN	initial (2),			/* multiplexer has gone down */
     HASP_MPX_MASKED initial (3))			/* multiplexer channel was masked */
	fixed binary (71) static options (constant);


/* Multiplexer configuration data */

dcl 1 hasp_configuration_data aligned based,
    2 type fixed binary,				/* type of multiplexer -- workstation/host */
    2 max_block_size fixed binary,			/* maximum block size for transmission over the line */
    2 max_device_input_records fixed binary,		/* maximum # of input records to be held for a device */
    2 max_device_output_records fixed binary,		/* maximum # of output records to be held */
    2 ic_timeout fixed binary,			/* # of seconds to wait for initial connection */
    2 receive_timeout fixed binary,			/* # of seconds to wait before sending a NAK */
    2 transmit_timeout fixed binary,			/* # of seconds to wait before sending ACK0 (workstation) */
    2 max_naks fixed binary,				/* # of NAKs received/transmitted before line considered down */
    2 flags,
      3 suspend_all_mode bit (1) unaligned,		/* ON => multiplexer should disallow all input whenever a
						         single input device goes not ready */
      3 signon_mode bit (1) unaligned,			/* ON => multiplexer must send/receive a SIGNON record before
						         allowing data transfer on other devices */
      3 multileave_mode bit (1) unaligned,		/* ON => multiplexer may include records for several devices
						         in a single block */
      3 trace_mode bit (1) unaligned,			/* ON => multiplexer should record input and output blocks via
						         MCS tracing mechansim */
      3 rts_mode bit (1) unaligned,			/* ON => multiplexer must request permission from remote
						         host/workstation before transmitting new files */
      3 pad bit (31) unaligned;

dcl (HASP_WORKSTATION	initial (0),		/* multiplexer is a workstation */
     HASP_HOST		initial (1))		/* multiplexer is a host */
	fixed binary static options (constant);

%include hasp_device_data;

dcl (HASP_MIN_MAX_BLOCK_SIZE	initial (400),		/* minimum block size allowed as maximum block size */
     HASP_MAX_MAX_BLOCK_SIZE	initial (1017))
	fixed binary static options (constant);


/* Default values for HASP configuration */

dcl 1 DEFAULT_HASP_CONFIGURATION_DATA aligned static options (constant),
    2 type fixed binary initial (1),			/* host */
    2 max_block_size fixed binary initial (400),
    2 max_device_input_records fixed binary initial (6),
    2 max_device_output_records fixed binary initial (6),
    2 ic_timeout fixed binary initial (30),
    2 receive_timeout fixed binary initial (3),
    2 transmit_timeout fixed binary initial (2),
    2 max_naks fixed binary initial (10),
    2 flags,
      3 suspend_all_mode bit (1) unaligned initial ("0"b),
      3 signon_mode bit (1) unaligned initial ("0"b),
      3 multileave_mode bit (1) unaligned initial ("1"b),
      3 trace_mode bit (1) unaligned initial ("0"b),
      3 rts_mode bit (1) unaligned initial ("0"b),
      3 pad bit (31) unaligned initial (""b);

/* END INCLUDE FILE ... hasp_load_data.incl.pl1 */


*/
                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
and Bull HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for 
managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by Bull HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved

*/
