/* BEGIN INCLUDE FILE ... sdm_invocation.incl.pl1 */
/* Created:  August 1983 by G. Palter from portions of emf_info.incl.pl1 */

/* Definition of a single invocation of send_mail */

dcl  1 sdm_invocation aligned based (sdm_invocation_ptr),
       2 type character (8),				/* defines this structure as a send_mail invocation */
       2 sci_ptr pointer,				/* -> subsystem utilities invocation data */
       2 area_ptr pointer,				/* -> area to be used by the subsystem */

       2 message_info,				/* information about the message being constructed */
         3 message_ptr pointer,			/* ... -> the actual message */
         3 message_state fixed binary,			/* ... unprocessed/modified/processed: controls quit query */
         3 date_time_body_modified fixed binary (71),	/* ... last date/time the message body was changed: used to
						   display Date/Message-ID fields before transmission */

       2 fill_width fixed binary,			/* default line length for message filling */
       2 flags,
         3 brief bit (1) unaligned,			/* ON => suppress "Mail delivered..." messages */
         3 acknowledge bit (1) unaligned,		/* ON => user wants acknowledgement from recipients */
         3 notify bit (1) unaligned,			/* ON => send each recipient a notification of delivery */
         3 fill bit (1) unaligned,			/* ON => fill message body whenever modified */
         3 debug_mode bit (1) unaligned,		/* ON => debugging features enabled */
         3 auto_write bit (1) unaligned,
         3 pad bit (30) unaligned,			/* ON => qedx request automatically rewrites on quit (sigh) */

       2 rdm_invocation_ptr pointer,			/* -> description of read_mail invocation whose reply request
						   created this send_mail invocation */

       2 original_messages_ptr pointer,			/* -> current list of original messages from which the
						   In-Reply-To field is to be regenerated after use of
						   qedx/apply -header  */

       2 abort_code fixed binary (35);			/* indicates whether send_mail exited with unsent message */

dcl  SDM_INVOCATION character (8) static options (constant) initial ("sdm_0008");

dcl  sdm_invocation_ptr pointer;

dcl  sdm_area area based (sdm_invocation.area_ptr);


/* Possible message states: indicate whether the message has been modified in some way since it was last successfully
   transmitted, logged, saved, or writen.  This state is used by the quit request to control whether it should query the
   user for permission to exit send_mail */

dcl (UNPROCESSED_MESSAGE	initial (-1),		/* message has never been transmitted/logged/saved/written */

     MODIFIED_MESSAGE	initial (1),		/* message was transmitted/logged/saved/written but has been
						   modified since the last such operation */

     PROCESSED_MESSAGE	initial (0))		/* message was transmitted/logged/saved/written and hasn't
						   been modified since that operation: OK to quit without
						   having to ask for the user's permission */
	fixed binary static options (constant);

/* END INCLUDE FILE ... sdm_invocation.incl.pl1 */


*/
                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
and Bull HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for 
managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by Bull HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved

*/
