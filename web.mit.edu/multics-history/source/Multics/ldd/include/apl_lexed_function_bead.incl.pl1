/* ====== BEGIN INCLUDE SEGMENT	apl_lexed_function_bead.incl.pl1 ========================== */

/* this is the format of a user-defined function after it has been run
   through apl_lex_, the first (left to right) parsing phase. */

dcl 1 lexed_function_bead based aligned,
    2 header like general_bead,			/* type bits, etc. */

    2 name pointer unaligned,				/* -> symbol bead which names the function */
    2 bits_for_parse unaligned like operator_bead.bits_for_parse,	/* so can treat like system function */
    2 number_of_statements fixed bin,
    2 number_of_localized_symbols fixed bin,		/* including labels and parameter variables, return var */
						/* even if they aren't there, thus >_ 3 */
    2 number_of_labels fixed bin,
    2 label_values_ptr pointer unaligned,			/* -> label_values below */
    2 statement_map_ptr pointer unaligned,			/* -> statement_map below */
    2 lexeme_array_ptr pointer unaligned,			/* -> lexeme_array below */

	/* the first 3 localized symbols are always reserved for ReturnSymbol, LeftArgSymbol, RighArgSymbol respectively.
	   If some of these symbols are not present (e.g. monadic or value-less function), null pointers are used.
	   So beware!, there can be null ptrs in the localized_symbols array. */

    2 localized_symbols(  (0) refer (lexed_function_bead.number_of_localized_symbols)) pointer unaligned,
						/* first localized vars from header line, then labels */
    2 label_values ( (0) refer (lexed_function_bead.number_of_labels)) pointer unaligned,
						/* ptrs to label-value beads for labels */
    2 statement_map ( (0) refer (lexed_function_bead.number_of_statements)) fixed bin(18),
						/* index in lexeme_array of rightmost lexeme of each stmt */
    2 lexeme_array ( (0) refer (lexed_function_bead.number_of_labels)	/* not really, but fake out compiler */ ) pointer unaligned;
			/* the actual lexemes.  Length of array is
							statement_map(number_of_statements)   */


/* manifest constants for first 3 localized symbols */

dcl (ReturnSymbol	init(1),
     LeftArgSymbol	init(2),
     RightArgSymbol	init(3)
    ) fixed binary static;


	/* the last three parts of this bead are referenced separately, though ptrs earlier in the bead.
	   Here are declarations for them as level-1 structures */

dcl 1 lexed_function_label_values_structure based aligned,
     2 lexed_function_label_values ( 500 /* or so */ ) pointer unaligned,

    statement_count fixed bin,
    lexed_function_statement_map (statement_count) fixed bin(18) aligned based,

    1 lexed_function_lexemes_structure based aligned,
     2 lexed_function_lexeme_array ( 500 /* or so */ ) pointer unaligned;

/* ------ END INCLUDE SEGMENT		apl_lexed_function_bead.incl.pl1 -------------------------- */


*/
                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
and Bull HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for 
managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by Bull HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved

*/
