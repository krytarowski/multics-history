/* BEGIN INCLUDE FILE ... rdm_invocation.incl.pl1 */
/* Created:  September 1983 by G. Palter from portions of emf_info.incl.pl1 */

/* Definition of a single invocation of read_mail */

dcl  1 rdm_invocation aligned based (rdm_invocation_ptr),
       2 type character (8),				/* defines this structure as a read_mail invocation */
       2 sci_ptr pointer,				/* -> subsystem utilities invocation data */
       2 area_ptr pointer,				/* -> area to be used by the subsystem */

       2 mailbox_info,
         3 mailbox_ptr pointer,			/* -> mailbox structure being examined by this invocation */
         3 message_list_ptr pointer,			/* -> list of read_mail specific information retained for each
						   message (eg: the "processed" flag) */
         3 message_chains,				/*the various message chains ... */
	 4 all pointer,				/* ... all unexpunged messages */
	 4 undeleted pointer,			/* ... all undeleted messages */
	 4 deleted pointer,				/* ... all deleted messages */
	 4 marked pointer,				/* ... messages to be processed by the current request */
	 4 marked_as_original pointer,		/* ... messages being processed by a reply/forward request */
         3 mailbox_name character (168) varying,		/* name of the mailbox (your mailbox/logbox/pathname) */

       2 current_message fixed binary,			/* index of the current message; 0 => no current message */

       2 last_search_buffer,				/* describes the buffer where read_mail constructs the ... */
         3 buffer_ptr pointer,			/* ... the printed representation of messages in order ... */
         3 buffer_used fixed binary (21),		/* ... to speed up regular expression searching */

       2 global_options,				/* command line options affecting all of read_mail ... */
         3 flags,
	 4 acknowledge bit (1) unaligned,		/* ... ON => acknowledge messages after printing */
	 4 brief bit (1) unaligned,			/* ... ON => shorten some messages and omit others */
	 4 debug_mode bit (1) unaligned,		/* ... ON => enable debugging features */
	 4 pad bit (33) unaligned,

       2 print_options,				/* command line options affecting the print request ... */
         3 formatting_mode fixed binary,		/* ... output mode for the message header, etc. */

       2 reply_options,				/* command line options affecting the reply request ... */
         3 line_length fixed binary,			/* ... line length to be used by send_mail for filling */
         3 indentation fixed binary,			/* ... amount to indent original text when included */
         3 flags,
	 4 include_original bit (1) unaligned,		/* ... ON => include original message text in the reply */
	 4 include_authors bit (1) unaligned,		/* ... ON => include original authors as recipients */
	 4 include_recipients bit (1) unaligned,	/* ... ON => include original recipients as recipients */
	 4 include_self bit (2) unaligned,		/* ... ON => include this user as a recipient of the reply if
						   selected by include_authors/include_recipients */
	 4 fill_control bit (2) unaligned,		/* ... controls message filling by send_mail */
	 4 pad bit (29) unaligned;

dcl  RDM_INVOCATION character (8) static options (constant) initial ("rdm_0009");

dcl  rdm_invocation_ptr pointer;

dcl  rdm_area area based (rdm_invocation.area_ptr);


/* Defined settings for reply_options.include_self */

dcl (DEFAULT_INCLUDE_SELF	initial ("00"b),		/* neither -include_self nor -no_include_self given */
     NO_INCLUDE_SELF	initial ("01"b),		/* -no_include_self explicitly given */
     INCLUDE_SELF		initial ("10"b))		/* -include_self explicitly given */
	bit (2) aligned static options (constant);

/* END INCLUDE FILE ... rdm_invocation.incl.pl1 */


*/
                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
and Bull HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for 
managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by Bull HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved

*/
