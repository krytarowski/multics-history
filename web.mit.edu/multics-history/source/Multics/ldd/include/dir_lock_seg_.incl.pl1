/* Begin include file dir_lock_seg_.incl.pl1 BIM 830312 */
/* From dirlockt.incl.pl1 */

/* format: style3,idind25,indcomtxt */

/**** Several arrays in this program are zero based. The zero-th
      entries are NEVER USED. referencers should start at 1, not lbound.
      The zero entries are there to improve the compiler's subscript
      calculations. The compiler can fetch dir_lock_all_dir_locks (foo).uid
      with an lda pr6|FOO,*ql */

dcl	dir_lock_seg$	     external static;	/* name of the segment containing the directory locks */

dcl	dir_lock_segp	     pointer;		/* pointer to the dirlock table */

dcl	1 dir_lock_seg	     based (dir_lock_segp) aligned,
	  2 header	     aligned like dir_lock_seg_header,
	  2 dir_locks	     (0:dir_lock_seg.header.n_dir_locks) aligned like dir_lock,
	  2 readers	     (0:dir_lock_seg.header.n_dir_locks, dir_lock_seg.header.max_readers) bit (36) aligned;

declare	(dir_lock_all_locksp, dir_lock_all_readersp)
			     pointer;

declare	1 dir_lock_all_dir_locks (0:dir_lock_seg.header.n_dir_locks) aligned like dir_lock based (dir_lock_all_locksp);
declare	dir_lock_all_readers     (0:dir_lock_seg.header.n_dir_locks, dir_lock_seg.header.max_readers) bit (36)
			     aligned based (dir_lock_all_readersp);

declare	DIR_LOCK_SEG_EVENT	     char (4) aligned init ("drls") int static options (constant);

declare	1 dir_lock_seg_header    aligned based,
	  2 seg_lock	     aligned like lock,
	  2 n_dir_locks	     fixed bin,		/* max number */
	  2 highest_in_use	     fixed bin,
	  2 max_readers	     fixed bin,
	  2 pad_even	     bit (36) aligned,
	  2 readers_ptr	     pointer,
	  2 locks_ptr	     pointer,
	  2 meters	     aligned,
	    3 find_calls	     fixed bin (35),
	    3 find_failures	     fixed bin (35),
	    3 max_in_use	     fixed bin (35),
	    3 pad_meters	     fixed bin (35),
	  2 pad		     (16) bit (36) aligned;	/* to 32 */

declare	dir_lockp		     pointer;
declare	1 dir_lock	     aligned based (dir_lockp),
	  2 uid		     bit (36) aligned,
	  2 flags		     aligned,
	    3 notify_sw	     bit (1) unaligned,
	    3 salvage_sw	     bit (1) unaligned,	/* ON if dir was locked for salvage */
	    3 pad		     bit (34) unaligned,
	  2 lock_count	     fixed bin (17),	/* POSITIVE --> write_lock */
						/* NEGATIVE --> -number of lockers */
						/* ZERO --> not locked */
	  2 write_locker	     bit (36) aligned;	/* in case of read, see next declaration, and expect this 0 */

declare	dir_read_lockers_ptr     pointer;
declare	dir_read_lockers	     (dir_lock_seg.header.max_readers) bit (36) aligned based (dir_read_lockers_ptr);

/* End include file dir_lock_seg_.incl.pl1 */


*/
                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
and Bull HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for 
managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by Bull HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved

*/
