/* BEGIN INCLUDE FILE ... log_read_data.incl.pl1 ... 84-05-03 ... W. Olin Sibert */

/* Added reader_procedure, area_ptr, reader_data_ptr, and entry variables 11/28/84 Steve Herbst */
/* Added (latest earlier)_message_ptr, (first last)_held_message and get_log_uid 11/30/84 Steve Herbst */
/* Put everything before the segments array into header 12/04/84 Steve Herbst */
/* Added entry variables free_message, register & deregister 12/06/84 Steve Herbst */


declare   log_read_data_ptr             pointer;
declare   log_read_data_n_segments      fixed bin;

declare 1 log_read_data                 aligned based (log_read_data_ptr),
          2 header                      aligned,
	  3 sentinel		char (8) aligned,
            3 n_segments                fixed bin,
            3 history_complete          bit (1) aligned,
	  3 call_procedures		bit (1) aligned,
	  3 allocate_copies		bit (1) aligned,
            3 current_ptr               pointer,            /* Trivial optimization for positioning */
            3 current_idx               fixed bin,
	  3 reader_data_ptr		pointer,		/* log_read_data_ptr returned by reader_proc$open */
	  3 user_area_ptr		pointer,            /* Used in the inner ring to allocate outer ring copies. */
	  3 latest_message		aligned like saved_message,	/* The last message returned */
	  3 earlier_message		aligned like saved_message,	/* The one returned before latest */
	  3 n_held_messages           fixed bin,
	  3 first_held_message_ptr	pointer,		/* Used by $hold_message */
	  3 last_held_message_ptr	pointer,		/* ditto */
	  3 ev,					/* Entry variable for each operation */
	    4 open variable entry (char (*), char (*), pointer, pointer, fixed bin (35)),
	    4 close variable entry (pointer, fixed bin (35)),
	    4 next_message variable entry (pointer, pointer, fixed bin (35)),
	    4 prev_message variable entry (pointer, pointer, fixed bin (35)),
	    4 position_sequence variable entry (pointer, fixed bin (35), bit (1) aligned, pointer, fixed bin (35)),
	    4 position_time variable entry (pointer, fixed bin (71), bit (1) aligned, pointer, fixed bin (35)),
	    4 update variable entry (fixed bin (35), pointer, pointer, fixed bin (35)),
	    4 hold_message variable entry (pointer, pointer),
	    4 free_message variable entry (pointer, pointer),
	    4 get_log_uid variable entry (pointer, bit (36) aligned, fixed bin (35)),
	    4 register variable entry (pointer, bit (36) aligned, fixed bin (71), fixed bin (35)),
	    4 deregister variable entry (pointer, bit (36) aligned, fixed bin (71), fixed bin (35)),
	  3 limits                      aligned,            /* Absolute limits of family contents */
	    4 very_first_time           fixed bin (71),     /* Set up during initialization */
	    4 very_last_time            fixed bin (71),
	    4 very_first_sequence       fixed bin (35),
	    4 very_last_sequence        fixed bin (35),
	    4 very_first_log_idx        fixed bin,
	    4 very_last_log_idx         fixed bin,

          2 segments (log_read_data_n_segments refer (log_read_data.n_segments)),
            3 dname                     char (168) unaligned,
            3 ename                     char (32) unaligned,
            3 ptr                       pointer,
            3 suffix_time               fixed bin (71),     /* Time from suffix-- all messages in log are earlier */
            3 dir_uid                   bit (36) aligned,   /* UID of parent dir */
            3 prev_missing              bit (1) aligned,
            3 damaged                   bit (1) aligned,

          2 pad                         fixed bin;

declare 1 saved_message		aligned based,
	2 actual_ptr		pointer,		/* Points to message in log. */
	2 copy_ptr		pointer;		/* Points to user-ring allocated copy. */

dcl  1 log_held_message_node aligned based,
       2 message aligned like saved_message,
       2 reference_count fixed bin,
       2 next_ptr ptr;

declare LOG_READ_DATA_VERSION_SENTINEL char (8) int static options (constant)
        init ("logr0001") options (constant);

/* END INCLUDE FILE ... log_read_data.incl.pl1 */


*/
                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
and Bull HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for 
managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by Bull HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved

*/
