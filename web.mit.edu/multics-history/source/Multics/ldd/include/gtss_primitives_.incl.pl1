/* BEGIN INCLUDE FILE gtss_primitives_.incl.pl1 */
/*
  Created:  Kepner  04/12/78
 Modified:  Ron Barstad  82-08-11  to change size of primitives array for 4js3
 Modified:  Ron Barstad  83-05-19  change size of primitives for update 7
*/

/* This array contains the command language lists and
   primitive sequences. */

dcl  gtss_prgdes_ext_$primitives (0:1070) bit (36) aligned ext;

/* This variable stores the current primitive */

dcl  primitive bit (36);

/* This overlay structure is used for the interpretation of most primitives.

   prim_address is the offset in gtss_prgdes_ext_$primitives of a
   primitive that may possibly be transferred to.
*/
dcl 1 primitive_overlay aligned based (addr (primitive)),
    2 prim_address fixed bin (17) unal,
    2 switchword_bit fixed bin (11) unal,
    2 prim_op fixed bin (5) unal;


/* This overlay structure is used for the interpretation of
   the CALLP primitive.

   callp_desc is the index in gtss_prgdes_ext_$prgdes of the program
   descriptor being called.
*/
dcl 1 callp_overlay aligned based (addr (primitive)),
    2 callp_desc fixed bin (17) unal,
    2 fill bit (5) unal,
    2 switchword_flag bit (1) unal,
    2 switch_ov_bit bit (6) unal,
    2 prim_ov_op fixed bin (5) unal;


/*
   " The    following     two     structures,     command_list     and
   " cmd_primitive_list,  are used in scanning for command language of
   " the current subsystem.  command_list gives  the command name  and
   " number of valid characters (up to 4) in the command name for each
   " command.   Once  a  particular command name has been matched, the
   " corresponding entry in cmd_primitive_list  gives  the  offset  in
   " gtss_prgdes_ext_$primitives  of  the  start  of  the  primitive  list to
   " interpret this command.  The  last  entry  in  cmd_primitive_list
   " gives   the   offset  in  gtss_prgdes_ext_$primitives  of  the  start-up
   " primitive sequence for the current subsystem.  In  order  to  use
   " these structures for the subsystem represented by the Ith program
   " descriptor the following calculations are needed:
   "
   "           cmd_list_len = gtss_prgdes_ext_$prgdes(I).cmd_lang_len;
   "           cmd_list_ptr = addr(gtss_prgdes_ext_$primitives
   "                (gtss_prgdes_ext_$prgdes(I).cmd_lang_offset));
   "           cmd_prim_list_ptr = addrel(cmd_list_ptr,2*cmd_list_len);
   "
   " Subsystems  which   have the common command list or BASIC command
   " list bit set in their program descriptor make  use  of  a  common
   " command  list  near  the  beginning  of  gtss_prgdes_ext_$primitives  in
   " addition to their private command lists  (if  any).   The  common
   " command  list  starts  in the third word of gtss_prgdes_ext_$primitives.
   " The   number   of   commands   in   the   list   is   given    by
   " gtss_prgdes_ext_$common_cmd_num.    Subsystems   which  have  the  BASIC
   " command list bit set use only the  first  gtss_prgdes_ext_$basic_cmd_num
   " commands of the common command list.
*/
dcl 1 command_list (cmd_list_len) aligned based (cmd_list_ptr),
    2 cmd_word char (4),
    2 cmd_len fixed bin (17);

dcl 1 cmd_primitive_list (cmd_list_len+1) aligned based (cmd_prim_list_ptr),
    2 primitive_ptr fixed bin (17) unal,
    2 filler fixed bin (17) unal;

dcl  cmd_list_ptr ptr init(null());
dcl  cmd_prim_list_ptr ptr init(null());
dcl  cmd_list_len fixed bin (17);

/* Number of commands of the common command list used for
   BASIC and various other subsystems which specify the BASIC
   parameter bit in their program descriptor.
*/
dcl  gtss_prgdes_ext_$basic_cmd_num fixed bin (17, 0) ext;

/* Number of commands in the common command list.
*/
dcl  gtss_prgdes_ext_$common_cmd_num fixed bin (17, 0) ext;

/*   END INCLUDE FILE gtss_primitives_.incl.pl1 */


*/
                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
and Bull HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for 
managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by Bull HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved

*/
