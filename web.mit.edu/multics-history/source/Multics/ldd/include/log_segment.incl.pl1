/* BEGIN INCLUDE FILE ... log_segment.incl.pl1 ... 84-05-03 ... W. Olin Sibert */

declare   log_segment_ptr               pointer;
declare   log_segment_max_size          fixed bin (18);
declare   LOG_SEGMENT_VERSION_1         char (8) internal static options (constant) init ("SysLog01");


declare 1 log_segment                   aligned based (log_segment_ptr),
          2 header                      aligned like log_segment_header,
          2 data                        dim (log_segment_max_size refer (log_segment.max_size)) bit (36) aligned;


declare 1 log_segment_header            aligned based,
          2 version                     char (8) unaligned, /* LOG_SEGMENT_VERSION_1 */
          2 time_created                fixed bin (71),     /* When the segment header was initialized */
          2 previous_log_dir            char (168) unaligned, /* Directory containing previous log segment */

          2 limits,
            3 first_sequence            fixed bin (35),     /* First and last sequence numbers / time stamps */
            3 last_sequence             fixed bin (35),     /* of messages in the log. These may be slightly */
            3 first_time                fixed bin (71),     /* incorrect due to lockless updating strategy */
            3 last_time                 fixed bin (71),

          2 alloc_info,                                     /* Complex STACQ hack for allocating and assigning */
            3 word_1                    fixed bin (18),     /* sequence numbers locklessly. See log_segment_ */
            3 word_2                    bit (36) aligned,   /* for details of strategy */
          2 max_size                    fixed bin (18),     /* Total words in data area */

          2 listeners_registered        bit (1) aligned,    /* Set if ANY processes were ever registered-- it's only */
          2 listener_bootload_time      fixed bin (71),     /* kept here for efficiency. The bootload time is used to */
                                                            /* detect all the dead listeners after a reboot */
          2 listener (25),                                  /* Processes waiting for messages in the log */
            3 process_id                bit (36) aligned,
            3 event_channel             fixed bin (71) unaligned, /* Saves space-- allows 3-word entries */

          2 last_wakeup_time            fixed bin (71),     /* When last wakeup was sent */
          2 wakeup_delta                fixed bin (71),     /* Wakeups sent no more than once per this interval */

          2 pad (6)                     fixed bin (71);     /* Pad header to 150 words */


declare   LOG_SEGMENT_NEW_MESSAGE           init ("777111555333"b3) bit (36) aligned internal static options (constant);
declare   LOG_SEGMENT_COMPLETE_MESSAGE      init ("666000444222"b3) bit (36) aligned internal static options (constant);

/* END INCLUDE FILE ... log_segment.incl.pl1 */


*/
                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
and Bull HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for 
managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by Bull HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved

*/
