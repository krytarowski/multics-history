/*
The function of cobol_gen_driver_ is to direct the generation of the
object code necessary to implement the source code comprising a
given COBOL program.  The primary input to cobol_gen_driver_ is the
file Minpral5.  This file comprises a sequence of tokens which
are, in effect, a coded version of the source program.  These
tokens are grouped, by PD Syntax, into logical sets for process-
ing by the insertion of type-19 End of "Statement" (EOS) tokens.
cobol_gen_driver_ creates a structure (in_token) consisting primarily
of pointers to each token comprising a "statement", as delimited
by EOS tokens, and passes a pointer to this structure to the
appropriate generator.  In addition, cobol_gen_driver_ performs a
number of auxiliary functions, such as;

  1.  Initialization of a number of variables to pre-code-gener-
      ation values.

  2.  Initialization of the definition and linkage sections.

  3.  Deallocation of the stack and determination of maximum re-
      quired stack size.

  4.  Deallocation of the area (temp_token_area) in which tokens
      to temporaries are built.

  5.  Tabulation of data for the construction of the procedure
      division map.

  6.  Resolution of internal tag definition and tag equivalence
      tokens not bracketed within EOS tokens.


U__s_a_g_e:_

     declare cobol_gen_driver_ entry;

     call cobol_gen_driver_;


D__a_t_a:_

      include cobol_;

	Items in cobol_ include file used (u) and/or set (s) by
	cobol_gen_driver_:

	     cobol_ptr (u)
	     com_ptr (u)
	     alter_flag (s)
	     alter_index (s)
	     alter_list_ptr (s)
	     init_stack_off (s)
	     map_data_ptr (u)
	     map_data_max (u)
	     max_stack_off (s)
	     minpral5_ptr (u)
	     misc_end_ptr (u)
	     misc_max (u)
	     para_eop_flag (s)
	     perform_list_ptr (u/s)
	     perform_para_index (s)
	     perform_sect_index (s)
	     priority_no (s)
	     sect_eop_flag (s)
	     seg_init_list_ptr (s)
	     stack_off (u/s)
	     temp_token_area_ptr (s)
	     temp_token_ptr (s)
	     temp_token_max (s)
	     token_block1_ptr (u)
	     token_block2_ptr (u)
	     text_wd_off (u)

      include fixed_common;

	Items in fixed_common include file used (u) and/or set (s) by
	cobol_gen_driver_:

	     perf_alter_info (u)
	     size_perform_info (u)

Conditional Statements:

(1) STATEMENT OPTION

	(a) cobol_pdout_

		STATEMENT
		type19(vt = CODE, b = 1, f = 00)
		OPTION
		type19(vt = 3, b = 0)

	(b) generated code

			STATEMENT -> (L1)
			OPTION
		L1:

(2) STATEMENT OPTION NOT OPTION

	(a) cobol_pdout_

		STATEMENT
		type19(vt = CODE, b = 1, f = 00)
		OPTION
		type19(vt  = 3, b = 1, f = 01)
		NOT OPTION
		type19(vt = 3, b = 0)

	(b) generated code

			STATEMENT -> (L1)
			OPTION
			TRA L3
		L1:
			NOT OPTION
		L2:

(3) STATEMENT NOT OPTION OPTION

	(a) cobol_pdout_

		STATEMENT
		type19(vt = CODE, b = 1, f = 01)
		NOT OPTION
		type19(vt = 3, b = 1, f = 00)
		OPTION
		type19(vt = 3, b = 0)

	(b) generated code

			STATEMENT -> (L1)
			NOT OPTION
			TRA L2
		L1:
			OPTION
		L2:

(4) STATEMENT NOT OPTION

	(a) cobol_pdout_

		STATEMENT
		type19(vt = CODE, b = 1, f = 01)
		NOT OPTION
		type19(vt = 3, b = 0)

	(b) generated code

			STATEMENT -> (L1)
			NOT-OPTION
		L1:
						  */


*/
                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
and Bull HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for 
managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by Bull HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved

*/
