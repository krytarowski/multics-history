/* BEGIN INCLUDE FILE tc_input_buffer_.incl.pl1 BIM May 1981 */


/****^  HISTORY COMMENTS:
  1) change(88-09-28,LJAdams), approve(88-09-28,MCR8001),
     audit(88-10-06,Farley), install(88-10-07,MR12.2-1148):
     Added structures needed to reallocate additional storage for the data and
     control buffers.
                                                   END HISTORY COMMENTS */


/* format: style2,linecom,^indnoniterdo,indcomtxt,^inditerdo,dclind5,idind25 */
/* INTERNAL INTERFACE */

/* The input buffer is maintained as two parallel sliding windows.
   One contains actual data characters, and the other control bits
   associated with each character. A "data character" may be a
   serial mark, if the MARK_CONTROL bit is set.

   When the input buffer gets too full, the data is copied back
   wards over dead data to make new space. Routines that remember
   positions in the buffer must remember them as relative offsets
   rather than pointers, so that the buffer can be compacted.

   This is possible because no data can be "killed" that has an
   outstanding mark after it. thus nothing between the beginning
   of the valid window and the first mark can be Killed
   while that mark is not killed, so that the position of the first
   valid character cannot move forward while any async
   operation is in progress.
*/

     declare 1 control_entry	        based unaligned,
	     2 mark	        bit (1) unaligned,
	     2 echoed	        bit (1) unaligned,
	     2 end_of_info	        bit (1) unaligned,
	     2 deleted	        bit (1) unaligned,	/* already used */
	     2 pad	        bit (5) unaligned;	/* reserved */

/* Use these on string (control_entry) */

     declare (
	   NORMAL_CONTROL	        initial ("000000000"b),
	   MARK_CONTROL	        initial ("100000000"b),
	   ECHOED_CONTROL	        initial ("010000000"b),
	   END_OF_INFO_CONTROL      initial ("001000000"b),
	   DELETED_CONTROL	        initial ("000100000"b)
	   )		        bit (9) unaligned internal static options (constant);


     declare 1 data_bits	        based unaligned,
	     2 pad_1	        bit (1) unaligned,
	     2 pad_2	        bit (1) unaligned,
	     2 character	        bit (7) unaligned;	/* we might represent special chars */

     declare 1 data_char	        based unaligned,
	     2 character	        character (1) unaligned;

     declare 1 data_mark	        based unaligned,
	     2 mark_number	        fixed bin (9) unsigned unaligned;


     declare input_buffer_ptr	        pointer;

     declare 1 input_buffer	        aligned based (input_buffer_ptr),
	     2 buffer_length        fixed bin (21),
	     2 control_ptr	        pointer,		/* start of ctl buffer */
	     2 data_ptr	        pointer,		/* start of data buffer */
	     2 n_valid	        fixed bin (21),	/* this is index (byte (bin (END_OF_INFO_CONTROL)) - 1 in the buffer */
	     2 n_chars_valid        fixed bin (21),	/* n nondeleted normal chars */
						/* The next two pointer must be maintained in sync !!! */
	     2 n_shifts	        fixed bin;		/* meter compactions */

     declare 1 control_buffer	        unaligned based (input_buffer.control_ptr)
			        dimension (input_buffer.buffer_length) like control_entry;

     declare control_buffer_as_chars  unaligned based (input_buffer.control_ptr) character (input_buffer.buffer_length);
     ;

     declare 1 data_buffer	        unaligned based (input_buffer.data_ptr) dimension (input_buffer.buffer_length)
			        like data_char;

     declare data_buffer_as_chars     unaligned based (input_buffer.data_ptr) character (input_buffer.buffer_length);


     declare new_buf_size              fixed bin (21);

     declare new_data_buf_ptr	         pointer;

     declare 1 new_data_buf            unaligned based (new_data_buf_ptr)
                                       dimension (new_buf_size) like data_char;

     declare new_control_buf_ptr       pointer;

     declare 1 new_control_buf         unaligned based (new_control_buf_ptr)
                                       dimension (new_buf_size) like control_entry;

     declare temp_data                 char(new_buf_size) based; 
/* END INCLUDE FILE tc_input_buffer_ */


*/
                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
and Bull HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for 
managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by Bull HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved

*/
