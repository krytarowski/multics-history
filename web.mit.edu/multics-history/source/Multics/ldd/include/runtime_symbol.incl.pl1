/*	BEGIN INCLUDE FILE ... runtime_symbol.incl.pl1 ... Modified 07/79 */

dcl	1 runtime_symbol	aligned based,
	2 flag		unal bit(1),	/* always "1"b for Version II */
	2 use_digit	unal bit(1),	/* if "1"b and units are half words units are really digits */
	2 array_units	unal bit(2),
	2 units		unal bit(2),	/* addressing units */
	2 type		unal bit(6),	/* data type */
	2 level		unal bit(6),	/* structure level */
	2 ndims		unal bit(6),	/* number of dimensions */
	2 bits		unal,
	  3 aligned	bit(1),
	  3 packed	bit(1),
	  3 simple	bit(1),
	2 skip		unal bit(1),
	2 scale		unal bit(8),	/* arithmetic scale factor */
	2 name		unal bit(18),	/* rel ptr to acc name */
	2 brother		unal bit(18),	/* rel ptr to brother entry */
	2 father		unal bit(18),	/* rel ptr to father entry */
	2 son		unal bit(18),	/* rel ptr to son entry */
	2 address		unal,
	  3 location	bit(18),		/* location in storage class */
	  3 class		bit(4),		/* storage class */
	  3 next		bit(14),		/* rel ptr to next of same class */
	2 size		fixed bin(35),	/* encoded string|arith size */
	2 offset		fixed bin(35),	/* encoded offset from address */
	2 virtual_org	fixed bin(35),
	2 bounds(1),
	  3 lower		fixed bin(35),	/* encoded lower bound */
	  3 upper		fixed bin(35),	/* encoded upper bound */
	  3 multiplier	fixed bin(35);	/* encoded multiplier */

dcl	1 runtime_bound	based,
	2 lower		fixed bin(35),
	2 upper		fixed bin(35),
	2 multiplier	fixed bin(35);

dcl	1 runtime_block	aligned based,
	2 flag		unal bit(1),	/* always "1"b for Version II */
	2 quick		unal bit(1),	/* "1"b if quick block */
	2 fortran		unal bit(1),	/* "1"b if fortran program */
	2 standard	unal bit(1),	/* "1"b if program has std obj segment */
	2 owner_flag	unal bit(1),	/* "1"b if block has valid owner field */
	2 skip		unal bit(1),
	2 type		unal bit(6),	/* = 0 for a block node */
	2 number		unal bit(6),	/* begin block number */
	2 start		unal bit(18),	/* rel ptr to start of symbols */
	2 name		unal bit(18),	/* rel ptr to name of proc */
	2 brother		unal bit(18),	/* rel ptr to brother block */
	2 father		unal bit(18),	/* rel ptr to father block */
	2 son		unal bit(18),	/* rel ptr to son block */
	2 map		unal,
	  3 first		bit(18),		/* rel ptr to first word of map */
	  3 last		bit(18),		/* rel ptr to last word of map */
	2 entry_info	unal bit(18),	/* info about entry of quick block */
	2 header		unal bit(18),	/* rel ptr to symbol header */
	2 chain(4)	unal bit(18),	/* chain(i) is rel ptr to first symbol
					   on start list with length >= 2**i */
	2 token(0:5)	unal bit(18),	/* token(i) is rel ptr to first token
					   on list with length >= 2 ** i */
	2 owner		unal bit(18);	/* rel ptr to owner block */

dcl	1 runtime_token	aligned based,
	2 next		unal bit(18),	/* rel ptr to next token */
	2 dcl		unal bit(18),	/* rel ptr to first dcl of this token */
	2 name,				/* ACC */
	  3 size		unal unsigned fixed bin (9), /* number of chars in token */
	  3 string	unal char(n refer(runtime_token.size));

dcl	1 encoded_value	aligned based,
	2 flag		bit (2) unal,
	2 code		bit (4) unal,
	2 n1		bit (6) unal,
	2 n2		bit (6) unal,
	2 n3		bit (18) unal;

/*	END INCLUDE FILE ... runtime_symbol.incl.pl1 */


*/
                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
and Bull HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for 
managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by Bull HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved

*/
