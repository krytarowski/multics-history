/* BEGIN INCLUDE FILE ... hasp_srcb_scb_bytes.incl.pl1 */
/* Created:  October 1979 by G. Palter */

/* HASP End-Of-File record */

dcl 1 TEMPLATE_HASP_EOF_RECORD_BITS aligned static options (constant),
    2 srcb bit (9) unaligned initial ("200"b3),		/* SRCB -- 200-bit is always ON */
    2 eor_scb bit (9) unaligned initial ("000"b3);	/* SCB -- end of record */

dcl TEMPLATE_HASP_EOF_RECORD character (2) aligned based (addr (TEMPLATE_HASP_EOF_RECORD_BITS));


/* HASP Sub-Record Control Byte (SRCB) -- operator's console */

dcl  HASP_CONSOLE_SRCB_BITS bit (9) aligned static options (constant) initial ("200"b3);
dcl  HASP_CONSOLE_SRCB character (1) aligned based (addr (HASP_CONSOLE_SRCB_BITS));


/* HASP Sub-Record Control Byte (SRCB) -- reader/punch */

dcl 1 hasp_card_srcb_byte unaligned based (hasp_card_srcb_byte_ptr),
    2 pad1 bit (1) unaligned,				/* supplied by MCS */
    2 mbo1 bit (1) unaligned,				/* always ON */
    2 count_units fixed binary (2) unaligned unsigned,	/* SCB count units: 0 => 1; 1 => 2; 2 => 4 */
    2 binary bit (1) unaligned,			/* ON => binary data record */
    2 mbz1 bit (4) unaligned;				/* always OFF */

dcl  hasp_card_srcb_byte_ptr pointer;

dcl 1 TEMPLATE_HASP_CARD_SRCB_BITS aligned static options (constant),
    2 pad1 bit (1) unaligned initial ("0"b),
    2 mbo1 bit (1) unaligned initial ("1"b),
    2 count_units fixed binary (2) unaligned unsigned initial (0),	/* SCB counts single characters */
    2 binary bit (1) unaligned initial ("0"b),		/* not binary card */
    2 mbz1 bit (4) unaligned initial ("0000"b);

dcl  TEMPLATE_HASP_CARD_SRCB character (1) aligned based (addr (TEMPLATE_HASP_CARD_SRCB_BITS));


/* HASP Sub-Record Control Byte (SRCB) -- printer */

dcl 1 hasp_printer_srcb_byte unaligned based (hasp_printer_srcb_byte_ptr),
    2 pad1 bit (1) unaligned,				/* supplied by MCS */
    2 mbo1 bit (1) unaligned,				/* always ON */
    2 mbz1 bit (1) unaligned,				/* always OFF */
    2 prespace bit (1) unaligned,			/* ON => pre-spacing; OFF => post-spacing */
    2 skip_to_channel bit (1) unaligned,		/* ON => skip to given channel; OFF => skip # lines */
    2 number fixed binary (4) unaligned unsigned;		/* channel # or # or lines to skip */

dcl  hasp_printer_srcb_byte_ptr pointer;

dcl 1 TEMPLATE_HASP_PRINTER_SRCB_BITS aligned static options (constant),
    2 pad1 bit (1) unaligned initial ("0"b),
    2 mbo1 bit (1) unaligned initial ("1"b),
    2 mbz1 bit (1) unaligned initial ("0"b),
    2 prespace bit (1) unaligned initial ("0"b),		/* post-spacing */
    2 skip_to_channel bit (1) unaligned initial ("0"b),	/* # of lines */
    2 number fixed binary (4) unaligned unsigned initial (1);

dcl  TEMPLATE_HASP_PRINTER_SRCB character (1) aligned based (addr (TEMPLATE_HASP_PRINTER_SRCB_BITS));

dcl  HASP_MAX_SLEW_COUNT fixed binary static options (constant) initial (3);
						/* max slew of 3 insures proper operation with 370's */

dcl 1 HASP_FORMS_CHANGE_SRCB_BITS aligned static options (constant),
    2 pad1 bit (1) unaligned initial ("0"b),
    2 mbo1 bit (1) unaligned initial ("1"b),
    2 mbz1 bit (1) unaligned initial ("0"b),
    2 change bit (6) unaligned initial ("16"b3);		/* change forms record */

dcl  HASP_FORMS_CHANGE_SRCB character (1) aligned based (addr (HASP_FORMS_CHANGE_SRCB_BITS));


/* HASP String Control Byte (SCB) */

dcl 1 hasp_scb_byte unaligned based (hasp_scb_byte_ptr),
    2 pad1 bit (1) unaligned,				/* supplied by MCS */
    2 not_eor bit (1) unaligned,			/* ON => not an end of record indicator */
    2 not_compressed bit (1) unaligned,			/* ON => this SCB refers to a non-compressed string */
    2 variant bit (6) unaligned;			/* dependent on setting of hasp_scb_byte.not_compressed */

dcl 1 hasp_not_compressed_scb_byte unaligned based (hasp_scb_byte_ptr),
    2 pad1 bit (1) unaligned,
    2 not_eor bit (1) unaligned,
    2 not_compressed bit (1) unaligned,			/* ON */
    2 count fixed binary (6) unaligned unsigned;		/* # of characters in string following the SCB */

dcl 1 hasp_compressed_scb_byte unaligned based (hasp_scb_byte_ptr),
    2 pad1 bit (1) unaligned,
    2 not_eor bit (1) unaligned,
    2 not_compressed bit (1) unaligned,			/* OFF */
    2 not_blank bit (1) unaligned,			/* ON => repeated character isn't a blank and follows SCB */
    2 count fixed binary (5) unaligned unsigned;		/* # of occurrences of the character */

dcl  hasp_scb_byte_ptr pointer;

dcl  HASP_EOR_SCB_BITS bit (9) aligned static options (constant) initial ("000"b3);
dcl  HASP_EOR_SCB character (1) aligned based (addr (HASP_EOR_SCB_BITS));

dcl (HASP_MAX_NOT_COMPRESSED_TEXT_LTH	initial (62),	/* # of characters representable by a single SCB */
     HASP_MAX_COMPRESSED_TEXT_LTH	initial (31))	/* # of occurences of a character representable by
						     a single SCB */
	fixed binary static options (constant);

/* END INCLUDE FILE ... hasp_srcb_scb_bytes.incl.pl1 */


*/
                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
and Bull HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for 
managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by Bull HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved

*/
