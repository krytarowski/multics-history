/* BEGIN INCLUDE FILE ... as_requests.incl.pl1 */
/* DESCRIPTION:
   This include file is the repository of as_request_ structures which are
   not so complicated or arcane as to require their own include file.
   It requires as_request_header.incl.pl1
*/

/* HISTORY:
   Written by someone, at sometime.
   Modified:
   09/10/84 by R. Michael Tague:  Add the structure asr_bump_user_info
   and asr_reply_bump_user.
   01/23/85 by E. Swenson:  Add the asr_note_pnt_change_info structure.
*/

/* format: style4 */

     /*** return status from an as_request_ call. ***/

dcl  asr_replyp ptr;
dcl  1 asr_reply aligned based (asr_replyp),		/* IPC status return for a.s. request */
       2 code fixed bin (35),				/* standard error code */
       2 data bit (36);				/* other data */

     /*** request to monitor process destructions, and the destruction notification ***/

dcl  asr_buzzard_info_version_1 char (8) init ("buzzard1") int static options (constant);
dcl  asr_buzzard_infop ptr;
dcl  1 asr_buzzard_info aligned based (asr_buzzard_infop),	/* for watching dying processes */
       2 header aligned like as_request_header,
       2 version char (8),
       2 info_channel fixed bin (71),			/* IPC channel to send processid wakeup messges */
       2 my_reference_id bit (36);			/* becomes top 36 bits of death notice */

dcl  1 asr_buzzard_notification aligned based (asr_replyp), /* message on process destruction */
       2 your_reference_id bit (36),			/* from asr_buzzard_info.my_reference_id */
       2 process_id bit (36);				/* process id of dead process */

/* ***********************************************************************
   * asr_bump_user_info  -  Message segment info structure for the       *
   *                        ASR_BUMP_USER requests.                      *
   *      process-id  -  process_id of process to be bumped.             *
   *      message     -  message to be splat across user terminal when   *
   *                     the bump is begun, i.e., the grace time starts. *
   *		     No message is sent if message = "".             *
   *      grace_time_in_seconds				   *
   *                  -  Amount of time given to the user before the     *
   *                     user's process is actually terminated.          *
   *      reply_reference_id					   *
   *	            -  Reference id that will be returned in the       *
   *                     as_reply_bump_user structure.  A reply channel  *
   *                     must be specified in reply_channel in the       *
   *		     header of this structure.  The reply message    *
   *		     will have the sturcture of asr_reply_bump_user. *
   *********************************************************************** */

dcl  asr_bump_user_info_version_1 char (8) init ("asrbump1") int static options (constant);

dcl  asr_bump_user_info_ptr ptr;
dcl  1 asr_bump_user_info aligned based (asr_bump_user_info_ptr),
       2 header aligned like as_request_header,
       2 version char (8),
       2 process_id bit (36),
       2 message char (100) unaligned,
       2 grace_time_in_seconds fixed bin,
       2 reply_reference_id bit (36);

/* ***********************************************************************
   * asr_reply_bump_user  -  Structure sent with the IPC reply upon      *
   *                         initiating the bump.  Note:  the actual     *
   *		         bump does not take place until after the    *
   *                         given of default grace time.                *
   *      code    -  Standard system status code.                        *
   *      reference_id					   *
   *              -  Reference id supplied in asr_bump_user_info when    *
   *                 bump user request was made.                         *
   *********************************************************************** */

dcl  1 asr_reply_bump_user aligned based (asr_replyp),
       2 code fixed bin (35),
       2 reference_id bit (36);


dcl  asr_admin_command_info_ptr pointer;
dcl  1 asr_admin_command_info aligned based (asr_admin_command_info_ptr),
       2 header aligned like as_request_header,
       2 version char (8),
       2 flags aligned,
         3 send_start_wakeup bit (1) unaligned,		/* over reply channel */
         3 send_completion_wakeup bit (1) unaligned,	/* over reply channel */
         3 send_completion_message bit (1) unaligned,
         3 send_completion_mail bit (1) unaligned,
         3 dialog bit (1) unaligned,			/* NOT YET IMPLEMENTED */
         3 pad bit (31) unaligned,
       2 dialog_info aligned,				/* NOT YET IMPLEMENTED */
         3 event_channel fixed bin (71),		/* NOTIFY ME ON READ/RIGHT */
         3 output_message_segment_pathname char (200) unaligned, /* Writes go here */
         3 input_message_segment_pathname char (200) unaligned, /* Reads come here */
       2 mail_destination char (200) unaligned,
       2 command_length fixed bin (21),
       2 command char (asr_ac_length refer (asr_admin_command_info.command_length)) unaligned;

/* See admin_dialog_info.incl.pl1 for related structures */

dcl  asr_ac_length fixed bin (21);
dcl  ASR_AC_VERSION_1 char (8) init ("asrac001") int static options (constant);

dcl  1 asr_reply_admin_command aligned based (asr_replyp),
       2 code fixed bin (35),
       2 flags aligned,
         3 command_refused bit (1) unaligned,
         3 command_started bit (1) unaligned,
         3 command_completed bit (1) unaligned,		/* with or without errors */
         3 command_aborted bit (1) unaligned,
         3 command_had_errors bit (1) unaligned,		/* at least one error */
         3 pad bit (31) unaligned;

/**** The following structure is used by the Ring-1 PNT software to
      notify the answering service of a PNT change which might affect
      logged in processes. */

dcl  asr_note_pnt_change_info_ptr ptr;

dcl  1 asr_note_pnt_change_info structure aligned based (asr_note_pnt_change_info_ptr),
       2 header aligned like as_request_header,
       2 version char (8),
       2 person_id char (32);

dcl  ASR_NPC_INFO_VERSION_1 char (8) initial ("asrnpc01") internal static options (constant);

/* END INCLUDE FILE ... as_requests.incl.pl1 */


*/
                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
and Bull HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for 
managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by Bull HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved

*/
