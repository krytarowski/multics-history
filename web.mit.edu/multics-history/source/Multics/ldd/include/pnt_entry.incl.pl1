/* BEGIN INCLUDE FILE ... pnt_entry.incl.pl1 */

/* Modified 790702 by C. Hornig for MSF PNT */
/* Modified 84-07-18 BIM for V2, aim ranges, long passwords. */
/* Modified 84-09-25 for operator attribute... -E. A. Ranzenbach */
/* Modified 85-03-05 E. Swenson for user_validated_time */

/**** The ms_table_mgr_ has fixed sized entries, for now.
      The presence of a version field and some pad allow
      us to have incrementally-upgraded PNTE's in a future change.
*/

/**** The conversion to V2 copies the existing encrypted passwords.
      Since the 32 character scrambling algorithm will not give the
      same results, the short_XX flags indicate that the old scrambler
      should be used. The short flags are automatically turned off
      by calls to update the password with the long-scrambled form. */

/* format: style4,insnl,delnl */

declare  pntep pointer automatic;
declare  1 pnt_entry based (pntep) aligned,		/* declaration of a single PNT entry */
	 2 version fixed bin,
	 2 private aligned,
	   3 pw_flags aligned,
	     4 short_pw bit (1) unal,			/* ON password is eight-character form */
	     4 short_network_pw bit (1) unal,		/* ON card password is eight character form. */
	   3 password character (32),			/* person's password */
	   3 network_password character (32),
	 2 public,
	   3 user_id character (32),			/* user ID (for alias entries */
	   3 alias character (8),
	   3 default_project character (16),		/* user's default project */
	   3 flags,				/* one-bit flags */
	     4 has_password bit (1) unaligned,
	     4 has_network_password bit (1) unaligned,
	     4 trap bit (1) unal,			/* If this password is used, holler */
	     4 lock bit (1) unal,			/* prevent login if on. */
	     4 nochange bit (1) unal,			/* user cannot change password */
	     4 must_change bit unal,			/* user must change password at next login */
	     4 pw_time_lock bit (1) unal,		/* if password has a time lock */
	     4 generate_pw bit (1) unal,		/* ON if we give new pw, OFF lets user select new pw */
	     4 last_bad_pw_reported bit (1) unal,	/* ON if user has NOT been told about last bad password  */
	     4 operator bit (1) unal,			/* ON if user can login as an operator... */
	     4 pads bit (26) unal,
	   3 n_good_pw fixed bin,			/* Number of good passwords */
	   3 n_bad_pw fixed bin,			/* Number of wrong passwords */
	   3 n_bad_pw_since_good fixed bin,		/* Number of wrong passwords since good */
	   3 time_pw_changed fixed bin (71),		/* When password was modified by user */

	   3 time_last_good_pw fixed bin (71),
	   3 time_last_bad_pw fixed bin (71),		/* When pw was last given wrong */
	   3 bad_pw_term_id character (4),		/* where bad password from */
	   3 bad_pw_line_type fixed bin (17),		/* ... */
	   3 bad_pw_term_type character (32),
	   3 password_timelock fixed bin (71),		/* Password is locked up until here */
	   3 person_authorization (2) bit (72),		/* authorization of this person */
	   3 default_person_authorization bit (72),	/* default authorization of this person */
	   3 audit bit (36),			/* audit flags for person */
	   3 pad1 bit (36),				/* pad to even word boundary */
	   3 user_validated_time fixed bin (71),		/* time this PNT entry was last validated by an administrator */
	 2 pad (80 - 64) bit (36) aligned;

declare  PNT_ENTRY_VERSION_2 fixed bin init (2) int static options (constant);

/* END INCLUDE FILE ... pnte.incl.pl1 */


*/
                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
and Bull HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for 
managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by Bull HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved

*/
