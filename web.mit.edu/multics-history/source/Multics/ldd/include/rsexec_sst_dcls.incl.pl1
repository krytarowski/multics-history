	declare
		1 server_socket_table(0:255) static aligned,		/* SST */
		  2 gender			fixed binary(8),
		  2 socket_usage			fixed binary(8),
		  2 byte_size			fixed binary(8),
		  2 unused_brother			fixed binary(8),
		  2 event_channel			fixed binary(71),
		  2 connection_channel		fixed binary(71),
		  2 listener_id_no			fixed binary(35),
		  2 link_segment_ptr		pointer,
		  2 link_subscript_or_mode		fixed binary(17),
		  2 type_for_transfer		fixed binary(8),
		  2 ncp_index			bit(36) unaligned,
		  2 foreign_socket_id		bit(41) unaligned;


/*
	The SST contains information about all of the auxiliary sockets used by RSEXEC requests.
	The local pin number is passed to foreign users as the HANDLE; this is used to index the
	SST array on subsequent references. Some less than obvious SST fields are :

		socket_usage	: state or usage of this socket, from above list

		unused_brother	: since Multics always views sockets as pairs, the
				  use of net_pin_manager_ results in the allocation
				  of two pins. However, RSEXEC requests only ask for
				  sockets one at a time. Thus, one of each pair allocated
				  by Multics is ignored; unused_brother is its pin number.

		listener_id_no	: each RSEXEC conversation is assigned a unique integer
				  identifier so that sockets belonging to that conver-
				  sation can be found.

		link_segment_ptr	: if this socket is in use for a link, this field
				  points to the <user>.ARPAnet_msgs segment involved in
				  this link.

		link_subscript_or_mode :
				  if socket is used for a link, this is the index of this
				  link in the ULT.link array. If used for file transfer,
				  this field is the mode specification.

		type_for_transfer	: if socket is used for file transfer, this is the type
				  specification.

*/


*/
                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
and Bull HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for 
managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by Bull HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved

*/
