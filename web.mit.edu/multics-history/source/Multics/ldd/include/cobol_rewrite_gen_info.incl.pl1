
/*

	The procedure cobol_rewrite_gen.pl1 generates the code which realizes the
COBOL rewrite statement.

	REWRITE rn [id] eos

		eos	a=0	no INVALID
			  1	INVALID

			c=0	no FROM
			  1	FROM

			f=00	no NOT
			  01	NOT

		verb=27

	mp.n		3-4
	mp.ptr(1)		type-1("REWRITE")
	mp.ptr(2)		type-9(record-name)
	mp.ptr(3)		type-9(FROM id)
	mp.ptr(n)		eos

Flow Chart

TAG(ioerror.retry_tag):

	alt_sw =	file_table.organization = 3	ind
		&
		file_table.alternate_keys ^= 0

	if file_table.access < 2	seq
	then	do;	INCR_NTAG

			OP54(delete_error,ntag);GEN_IOERROR

TAG(ntag):

			if file_table.organization = 3	ind
			then	do;	INCR_NTAG

					OP54(delete_error,ntag);GEN_IOERROR

NTAG(ntag):

				end;

			call REW_REC;

		end;
	else	do;	if	file_table.organization = 2	rel
			then;
			else	do;	if	file_table.access = 3	dyn
						&
						(	file_table.external
							|
							file_table.open_out
						)
					then	do;	INCR_NTAG
							OP54(delete_error,ntag);GEN_IOERROR
TAG(ntag):
						end;
				end;

			if	^alt_sw
				&
				file_table.access = 3	dyn
				&
				file_table.read_next

			then	do;	INCR_NTAG
					OP55(read_key,ntag);GEN_IOERROR
TAG(ntag):
					INCR_NTAG
					OP58(special_rewrite,ntag);GEN_IOERROR
TAG(ntag):
				end;
			else	do;	INCR_NTAG
					if alt_sw then IO_UTIL$FILE_DESC;OP85(alt_special_delete,0);GEN_IOERROR;SET_FSBPTR
					OP41(seek_key,ntag);GEN_IOERROR
TAG(ntag):

					call REW_REC
				end;
		end;
	return;

REW_REC:	proc;

	if alt_sw then	do;	INCR_NTAG
				OP87(alt_rewrite_delete,ntag);GEN_IOERROR
TAG(ntag):
				SET_FSBPTR
			end;
	INCR_NTAG
	OP59(rewrite,ntag);GEN_IOERROR
TAG(ntag):

	if alt_sw then	do;	INCR_NTAG
				OP88(alt_rewrite_add,ntag);GEN_IOERROR
TAG(ntag):
			end;

end;

*/

%include cobol_opr_rewrite;



*/
                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
and Bull HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for 
managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by Bull HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved

*/
