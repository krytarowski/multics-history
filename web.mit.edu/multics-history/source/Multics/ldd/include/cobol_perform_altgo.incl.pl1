
/*  BEGIN INCLUDE FILE ... cobol_perform_altgo.incl.pl1		 */
/*  Last modified September 3, 1974 by AEG		   */

/*  Input structure for   cobol_addr			   */

declare 1 input_struc_basic aligned static,
	2 type fixed bin aligned init(1),
	2 operand_no fixed bin aligned init(0),
	2 lock fixed bin aligned init(0),
	2 segno fixed bin aligned,
	2 char_offset fixed bin(24) aligned,
	2 send_receive fixed bin aligned init(0);

/*
type	   indicates type of addressing requested.  Type 1
	   indicates basic; i.e., data to be addressed is
	   specified by segno and char_offset.

operand_no   not applicable to type 1.

lock	   indicates lock requirements for registers used in
	   addressing; 0 - do not lock registers used.

segno	   is the compiler designation of the segment in which
	   the data to be addressed is located.

char_offset  is the character offset within segno of the data to
	   be addressed.

send_receive indicates whether the data being addressed is a
	   sending or receiving field for the instruction whose
	   address field is being set; 0 indicates sending.
						   */

/*  Input structure for mc_register$load		   */

declare 1 register_request aligned static,
	2 requested_reg fixed bin aligned init(1),
	2 assigned_reg bit(4) aligned,
	2 lock fixed bin aligned init(0),
	2 reg_set_now fixed bin aligned,
	2 use_code fixed bin aligned init(0),
	2 adjust_ptr_addr fixed bin aligned init(0),
	2 content_ptr ptr aligned init(null),
	2 literal_content bit(36) aligned init((36)"0"b);

/*
requested_reg   is a code designating the register requested;
	      1 designates the a register.

assigned_reg    is a code designating the register assigned.  It
	      has no significance if a specific register is
	      requested.

lock	      indicates locking requirements; 1 requests that
	      the register be locked.

reg_set_now     not applicable for use_code = 0.

use_code 	      specifies how the register is to be used by the
	      requester; 0 signifies that such information is
	      not meaningful for register optimization.

adjust_ptr_addr inserted to make evident that since all pointers
	      must be allocated on even word boundaries, the
	      pl1 compiler will allocate structures containing
	      pointers and all pointers therein on even word  
	      boundaries leaving "gaps" where necessary.

content_ptr     not applicable for use_code = 0.

literal_content not applicable for use_code = 0.
						   */

/*  End-of-perform range alterable go instruction pair	   */

declare prfrm_altgo_inst_pr(4) bit(18) unaligned static init
	("000000000000000000"b, "010011101001000110"b,
	 "000000000000000000"b, "111001000000000101"b);

/*
The instructions are:

     lda  0
     tra  0,al

						   */

/*  END INCLUDE FILE ... cobol_perform_altgo.incl.pl1		 */



*/
                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
and Bull HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for 
managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by Bull HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved

*/
