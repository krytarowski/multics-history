/* Begin include file ... syserr_log.incl.pl1 */

/* Created by Bill Silver on 08/11/73 */

/* Modified 11/12/74 by Lee Scheffler to add log copying information. */
/* Modified November 1975 by Larry Johnson for new message format */


dcl  slog_ptr ptr,					/* Pointer to base of syserr_log segment.  */
     smess_ptr ptr;					/* Pointer to a message entry. */

dcl 1 slog based (slog_ptr) aligned,			/* PAGED SYSERR LOG SEGMENT */
    2 head like slog_header,				/* Header */
    2 buffer char (0 refer (slog.head.len)),		/* Paged syserr log buffer. */
    2 end_point char (1);				/* Dummy for referencing end of log */

dcl 1 slog_header based aligned,			/* LOG HEADER */
    2 len fixed bin (35),				/* Length of the BUFFER in CHARACTERS. */
    2 lock bit (36),				/* Locks the whole syserr log segment. */
    2 init_word char (4),				/* "INIT" => log already initialized. */
    2 first bit (18),				/* Relative offset of the first message entry. */
    2 last bit (18),				/* Relative offset of the last  message entry. */
    2 last_copied bit (18),				/* Relative offset of last message entry
						   copied into hierarchy */
						/* If 0, entire log is uncopied */
    2 copy_threshold fixed bin (18),			/* Initializer is woken up when the number of
						   as-yet-uncopied characters in the log
						   exceeds this number */
    2 copy_pending bit (1),				/* ON if wakeup for log copying has been sent,
						   but log not yet copied */
    2 copy_channel fixed bin (71),			/* Channel over which Initializer is awakened */
    2 copy_process_id bit (36),			/* Process id of process to which log copying
						   wakeup will go */
    2 version fixed bin,				/* Version number of log and message format */
    2 event_id fixed bin (35),			/* Event id for locking log */
    2 wrap_count fixed bin,				/* Count if times log has wrapped */
    2 error_offset bit (18),				/* Set by syserr_log_check to location of error */
    2 reserved (17) bit (36);				/* Reserved for future use. */


/* This is an overlay of a message entry that goes into the paged syserr log.
   Each message entry corresponds to one syserr message. */

dcl 1 smess based (smess_ptr) aligned,			/* MESSAGE ENTRY */
    2 next bit (18) unal,				/* Relative offset of next message entry. */
    2 prev bit (18) unal,				/* Relative offset of previous message entry. */
    2 seq_num fixed bin (35),				/* Sequence number of this message. */
    2 time fixed bin (71) unal,			/* Time message logged at */
    2 code fixed bin (11) unal,			/* Syserr code associated with this message. */
    2 text_len fixed bin (11) unal,			/* Length of message text in ASCII characters. */
    2 data_size fixed bin (11) unal,			/* Size of binary data */
    2 data_code fixed bin (11) unal,			/* Data code */
    2 pad bit (60) unal,
    2 text char (0 refer (smess.text_len)),		/* Text of expanded message */
    2 data (0 refer (smess.data_size)) bit (36),		/* Binary portion of message */
    2 next_smess char (1);				/* Dummy used to calculate next message addrss */

/*	End of include file ... syserr_log.incl.pl1	*/


*/
                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
and Bull HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for 
managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by Bull HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved

*/
