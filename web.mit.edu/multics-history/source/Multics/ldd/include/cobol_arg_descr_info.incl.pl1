
/*
cobol_arg_descriptor: proc(in_word, out_word,out_conoff);

create an argument descriptor for a non array element.
See subsystem writers guide (volume V of the MPM)  for a
definition of the argument descriptor and a definition of the
parameters described below. The argument descriptor will
be pooled on a word boundry in the constant portion of the
text segment.

dcl	in_word bit (36);
dcl	out_word bit (36);
dcl	out_conoff	fixed bin;

 in_word	will contain the input information it the
	following bit positions. (input)
	0	always 1
	1-6	data type
	7	has a value of 1 if the data item
		is packed
	8-11	unused
	12-35	size of the data item
 out_word	will contain the word offset (from the
	logical instruction counter) of the argument
	descriptor in bits 0-17. This is a form suitable
	to be used in a machine instruction with
	IC modification. (output)
*/


/*
type9:	entry (token_ptr, out_word,out_conoff);

create an argument descriptor from a type 9 token.
See subsystem writers guide (volume V of the MPM)
for a definition of the argument descriptor. The argument
descriptor will be pooled on a word boundry in the constant
portion of the text segment.

 token_ptr is a pointer to the type 9 token (input)
 out_word	will contain the word offset (from the logical
	instruction counter) of the argument descriptor
	in bits 0-17. This is a form suitable to be used in
	a machine instruction with IC modification. (output)
*/



*/
                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
and Bull HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for 
managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by Bull HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved

*/
