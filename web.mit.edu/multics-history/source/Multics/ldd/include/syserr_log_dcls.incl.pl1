/* BEGIN INCLUDE FILE ... syserr_log_dcls.incl.pl1 ... 84-08-17 ... W. Olin Sibert */
/* Modified 1984-12-10, BIM: changed to a fast lock, added error count. */

/* The syserr_log_data segment, made reverse-deciduous in >sl1, overlays the
   first page of the LOG partition, and contains control information about
   the other syserr_log segments. */

declare   syserr_log_data$    fixed bin external static;
declare   syserr_log_data_ptr pointer;

declare 1 syserr_log_data     aligned based (syserr_log_data_ptr),
          2 version           char (8) unaligned,           /* SYSERR_LOG_DATA_V1 */
          2 old_init_word     char (4) unaligned,           /* Overlays slog.head.init_word ("INIT") */
	2 pad003    	bit (1) aligned,

          2 live_log          fixed bin,                    /* Identifier of live log (#1 or #2) */
	2 pad001		bit (1) aligned,
          2 error_count       fixed bin (35),               /* errors copying the log */
          2 swap_time         fixed bin (71),               /* Time of last log swap; zero if other_log_empty */

          2 messages_copied   fixed bin (35),               /* A meter */
          2 messages_lost     fixed bin (35),               /* Messages not copied because logs full */

          2 log_start (2)     fixed bin,                    /* Offset of each log segment in the partition */
          2 log_size (2)      fixed bin,                    /* Number of pages in each log segment */

          2 per_bootload,                                   /* Ramaining structure is reinitialized at each boot */
            3 log_ptr (2) pointer,                          /* Pointer to the three segments in the partition */

            3 log_name (2) char (32) unaligned,             /* Current names of log segments (by syserr_seg_manager) */
            3 log_dir char (168) unaligned,                 /* Parent directory */

            3 lock		aligned,
	    4 pid		bit (36) aligned,             /* Standard format wait lock, used when updating log */
              4 event_id      fixed bin (35),
              4 notify_requested 
	                    bit (1) unaligned,
	    4 pad           bit (35) unaligned,
            3 take_a_fault    bit (1) aligned,              /* Forces a fault if on, for testing fault recovery */
            3 test_mode       bit (1) aligned,              /* Running in outer-ring test mode */

            3 copy_disabled   bit (1) aligned,              /* No more messages being copied into live log */
            3 drop_severity_5 bit (1) aligned,              /* No more severity 5 messages (log is 3/4 full) */
	  3 wakeup_on_printable bit (1) aligned,	/* Console recovery: send wakeup for printable message */

            3 copy_threshold  fixed bin (18),               /* How often to copy to outer ring log segments */
            3 copy_channel    fixed bin (71),
            3 copy_process_id bit (36) aligned,

          2 pad fixed bin (71);                             /* Anything goes, as long as it's under a page */

declare   SYSERR_LOG_DATA_V1 char (8) internal static options (constant) init ("syserr01");

/* END INCLUDE FILE ... syserr_log_dcls.incl.p1l */


*/
                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
and Bull HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for 
managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by Bull HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved

*/
