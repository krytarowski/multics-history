/* MACLISP symbol section for compiled SUBR */

dcl 1 symbol_root based aligned,		/* starts off the LISP symbol section */

      2 version fixed bin,			/* 2 for this dcl (new-arrays version) */
      2 number_objects fixed bin,		/* number of objects which are to be made at fasload time */
      2 objects unal,
        3 fixnum_blockp bit(18) unal,		/* pointers to blocks describing variaous type classes of objects */
        3 flonum_blockp bit(18) unal,
        3 string_blockp bit(18) unal,
        3 bignum_blockp bit(18) unal,
        3 atsym_blockp bit(18) unal,
        3 cons_blockp bit(18) unal,
      2 subr_block_size fixed bin(18),		/* number of double word items to be put in subr block */
      2 subr_block_items unal,		/* pointers to blocks indicating which objects to place in subr block */
        3 entry_blockp bit(18) unal,
        3 const_blockp bit(18) unal,
        3 links_blockp bit(18) unal,
      2 action_blockp bit(18) unal,		/* points to array of operations to be done at fasload time, in order */
      2 array_links_blockp bit(18) unal;	/* points at block of array links */


dcl 1  fixnum_block based aligned,
      2 count fixed bin(18),
      2 fixnums(0 refer(fixnum_block.count)) fixed bin(35);

dcl 1 flonum_block based aligned,
      2 count fixed bin(18),
      2 flonums(0 refer(flonum_block.count)) float bin(27);

dcl 1 string_block based aligned,
      2 count fixed bin(18),
      2 string_offset(0 refer(string_block.count)) bit(18) unal;	/* pointers to string representation */


dcl 1 atsym_block based aligned,
      2 count fixed bin(18),
      2 atsym_offset(0 refer(atsym_block.count)) bit(18) unal;	/* pointers to atom names */

dcl 1 bignum_block based aligned,
      2 count fixed bin(18),
      2 bignum_offsets(0 refer(bignum_block.count)) bit(18) unal;

dcl 1 cons_block based aligned,
      2 count fixed bin(18),
      2 conses(0 refer(cons_block.count)) unal,
        3 car bin(17),
        3 cdr bin(17);

dcl 1 string_chars based aligned,
      2 flags unal,
        3 uninterned_atom bit(1),
        3 padding bit(10),
      2 length fixed bin(24)unal,
      2 chars char(0 refer (string_chars.length)) unaligned;

dcl 1 entry_block based aligned,
      2 count fixed bin(18),
      2 entry_info(0 refer(entry_block.count)) unal,
        3 nargs bit(18),
        3 entrypoint bit(18);

dcl 1 const_block based aligned,
      2 count fixed bin(18),
      2 constants (0 refer(const_block.count)) fixed bin(17) unal;

dcl 1 links_block based aligned,
      2 count fixed bin(18),
      2 link_info(0 refer(links_block.count)) bit(27);

dcl 1 array_links_block based aligned,
      2 count fixed bin(18),
      2 array_link(0 refer(array_links_block.count)),
        3 control_word bit(36);		/* rest is filled in at load time.
					   this word has type, ndims, symbol offset. */

dcl 1 action_block based aligned,
      2 count fixed bin(18),
      2 actions(0 refer(action_block.count)) unal,	/* each action described as one of these objects */
        3 action_code fixed bin(17) unal,
        3 operand fixed bin(17) unal;			/* offset of constant which is used in operation */

/* End of description of MACLISP Compiled symbol tree */


*/
                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
and Bull HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for 
managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by Bull HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved

*/
