/* BEGIN INCLUDE FILE ... create_token.incl.pl1 */

create_token:
	procedure (bv_token_string, bv_token_type) returns (ptr);

/*	Modified on:	April 1977 by RHS for new allocation methods */
/* Modified 770509 by PG to put hash_table in tree and make it bigger */

/* parameters */

declare (	bv_token_string char (*),
	bv_token_type bit (9) aligned,
	bv_protected bit (18) aligned
	) parameter;

/* automatic */

declare	(hash_index, i, n, n_chars, n_words) fixed bin,
	mod_2_sum bit (36) aligned,
	four_chars char (4) aligned,
	protected bit (18) aligned,
	(old_q, q, p, token_string_ptr) ptr;

/* based */

declare	token_array_overlay (64) char (4) based (token_string_ptr),
	token_overlay char (n) based (token_string_ptr);

/* builtins */

declare	(addr, binary, bool, dim, divide, length, mod, null, substr, unspec) builtin;

/* external static */

declare	pl1_stat_$node_uses (18) external fixed bin;

/* include files */

%include pl1_token_hash_table;
%include pl1_tree_areas;
%include nodes;
%include token;

/* program */

	protected = ""b;

join:
	token_string_ptr = addr (bv_token_string);

	n = length (bv_token_string);
	n_words = divide (n, 4, 21, 0);
	n_chars = n - n_words * 4;
	mod_2_sum = ""b;

	do i = 1 to n_words;
	     four_chars = token_array_overlay (i);
	     mod_2_sum = bool (mod_2_sum, unspec (four_chars), "0110"b);
	end;

	if n_chars ^= 0
	then do;
		four_chars = substr (token_array_overlay (i), 1, n_chars);
		mod_2_sum = bool (mod_2_sum, unspec (four_chars), "0110"b);
	     end;

	hash_index = mod (binary (mod_2_sum, 35), dim (hash_table, 1));
	old_q = null;

	do q = hash_table (hash_index) repeat (q -> token.next) while (q ^= null);
	     if n < q -> token.size
	     then go to insert_token;

	     if n = q -> token.size
	     then if bv_token_type = q -> token.type
		then if token_overlay = q -> token.string
		     then if protected = q -> token.loc
			then return (q);

	     old_q = q;
	end;

insert_token:
	pl1_stat_$node_uses (5) = pl1_stat_$node_uses (5) + 1;

	allocate token in (tree_area) set (p);
	p -> token.node_type = token_node;
	p -> token.type = bv_token_type;
	p -> token.declaration = null;
	p -> token.loc = protected;
	p -> token.string = token_overlay;
	p -> token.next = q;

	if old_q = null
	then hash_table (hash_index) = p;
	else old_q -> token.next = p;
	return (p);

create_token$protected:
	entry (bv_token_string, bv_token_type, bv_protected) returns (ptr);

	protected = bv_protected;
	go to join;

/* END INCLUDE FILE ... create_token.incl.pl1 */


*/
                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
and Bull HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for 
managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by Bull HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved

*/
