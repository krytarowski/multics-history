/* -table ted_gv_t_.incl.pl1
-tl
-sem ted_gv_.incl.pl1
-parse */
sem: proc(rulen,altn);

dcl rulen		fixed bin,
    altn		fixed bin;

      goto rule(rulen);

define: proc(where,which);

dcl where		fixed bin,	/* where thread begins */
    which		fixed bin;	/* defined value */
dcl i		fixed bin;
dcl j		fixed bin;

      i = where;
      do while(i ^= 0);
         j = gvx.word (i);
         if db_gv then call ioa_$nnl ("^/^-define(^2i)=^i", i, which);
         gvx.word (i) = which;
         i = j;
      end;

   end define;%skip(3);
thread: proc(where,which);
dcl (where,which) fixed bin;

      do i = where
         repeat(gvx.word (i))
         while(gvx.word (i)^=0);
      end;
      if db_gv then call ioa_ ("^-thread(^2i)=^i", i, which);
      gvx.word (i) = which;
   end thread;%skip(3);
/* <lex_order>	::= g* v* ( ^ '| & ) '040 X ! */

/* <gv>	::= <rest> ! */

/* <rest>	::= g* <srch> '040 ! */
rule(0003):			/* inclusive search		       */
/****		 bring the TRUE thread to here		       */
      if db_gv then call show_stk (2);
/****      call define(ls.true(ls_top-1), gvx.tot_len+4);		       */
      call define(ls.true(ls_top-1), ls.loc (ls_top));
/****		 Make False thread fail			       */
      call define(ls.false(ls_top-1),0);

/* <rest>	::= g* '040 ! */
rule(0004):			/* no search needed		       */
      goto done_parse;

/* <rest>	::= v* <srch> '040 ! */
rule(0005):			/* exclusive search wanted	       */
      if db_gv then call show_stk(2);
/****		 Make TRUE thread fail			       */
      call define(ls.true(ls_top-1),0);
/****		 bring FALSE thread to here			       */
/****      call define(ls.false(ls_top-1),gvx.tot_len+5);		       */
      call define(ls.false(ls_top-1),ls.loc(ls_top));
      goto done_parse;

show_stk: proc (N);
dcl N		fixed bin;
dcl db_I		fixed bin;
	do db_I = ls_top-N to ls_top;
	   call ioa_$nnl ("^/^2i loc=^i^-true=^i^-false=^i", db_I, ls.loc (db_I),
	      ls.true (db_I), ls.false (db_I));
	end;
       end show_stk;

/* <srch>	::= <srch> '| <y> ! */
rule(0006):
/**** 		bring <srch> false thread to <y>		       */
      if db_gv then call show_stk (2);
      call define(ls.false(ls_top-2),ls.loc(ls_top));
/**** 		thread <srch> true onto <y> true list		       */
      call thread(ls.true(ls_top), ls.true(ls_top-2));
      ls.true(ls_top-2) = ls.true(ls_top);
      ls.false(ls_top-2) = ls.false(ls_top);
      return;

/* <srch>	::= <y> ! */
/* <y>	::= <y> & <z> ! */
rule(0008):
      if db_gv then call show_stk (2);
/****		 bring <y> true thread to <z>			       */
	call define(ls.true(ls_top-2),ls.loc(ls_top));
/****		 thread <y> false onto <z> false list		       */
	call thread(ls.false(ls_top), ls.false(ls_top-2));
	ls.true(ls_top-2) = ls.true(ls_top);
	ls.false(ls_top-2) = ls.false(ls_top);
	return;

/* <y>	::= <z> ! */
/* <z>	::= ^ <w> ! */
rule(0010):
/****		just reverse the threads on the entry		       */
	ls(ls_top-1) = ls(ls_top);
	ls.true(ls_top-1) = ls.false(ls_top);
	ls.false(ls_top-1) = ls.true(ls_top);
	return;

/* <z>	::= <w> ! */
/* <w>	::= X ! */

/* <w>	::= ( <srch> ) ! */
rule(0013):
/****		pull the entry out from the parens		       */
	ls(ls_top-2) = ls(ls_top-1);
	return;

end;


*/
                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
and Bull HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for 
managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by Bull HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved

*/
