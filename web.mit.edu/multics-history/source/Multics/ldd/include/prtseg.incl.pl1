/* BEGIN INCLUDE ......... prtseg ........... */

/* For IOM printer DCM */

dcl  PRT_EVENT fixed bin int static init (60);

dcl  interrupt_interval fixed bin (71) static init (30000000); /* Expect an interrupt within 30 seconds */

dcl  CHN_INACT fixed bin int static init (0);
dcl  CHN_BUSY fixed bin int static init (1);
dcl  CHN_ERR fixed bin int static init (2);
dcl  CHN_WAIT fixed bin int static init (3);

dcl  max_no_printers int static init (11);		/* set up max number of printers */

dcl (p, wp) ptr;

dcl 1 ps based (p) aligned,				/* Per-printer history */
    2 devx fixed bin (12),				/* device index from iom_manager */
    2 base fixed bin (24),				/* abs. adr. of data area */
    2 dp ptr,					/* ptr to data area */
    2 free fixed bin,				/* first free word in data area */
    2 max_size fixed bin,				/* max_size of free area */
    2 cur_index fixed bin (12),			/* current DCW index */
    2 level fixed bin,				/* for code conversion overprinting */
    2 wflag fixed bin,				/* ON for user ring waiting */
    2 active fixed bin,				/* 0 if DCW list is not active,
						   1 if DCW list is active,
						   2 if DCW list is not active
						   3 if waiting for special interrupt */
    2 status aligned,
      3 major bit (4) unaligned,			/* major device status */
      3 minor bit (6) unaligned,			/* minor device status */
      3 channel_stat bit (3) unaligned,			/* iom channel status */
      3 central_stat bit (3) unaligned,			/* iom central status */
      3 controller_fault bit (4) unaligned,		/* fault from controller */
      3 io_fault bit (6) unaligned,			/* I/O fault code */
      3 power bit (1) unaligned,			/* power status bit */
    2 connect_count fixed bin,			/* # of times connected before interrupt came */
    2 interrupt_time fixed bin (71),			/* time by which interrupt should have happened */
    2 ev_chan fixed bin (71),				/* event channel from user ring */
    2 status_cell fixed bin (71),			/* Saved status from get_status call */
    2 type fixed bin,				/* printer type 300 or 202 */
    2 control_bits aligned,				/* some spare bits */
      3 wait_notify bit (1) unal,			/* if on we are using wait notify in detach */
      3 ovfl_off bit (1) unal,			/* TRUE if no page-overflow checking. */
      3 single bit (1) unal,				/* TRUE if forcing single space. */
      3 spare_bits bit (33) unal,			/* spare parts */
    2 cur_line fixed bin,				/* Line which will be printed next. (norm. 1-60) */
    2 max_line fixed bin,				/* Maximum line on page. */
    2 indent fixed bin,				/* Left margin. */
    2 line_lth fixed bin,				/* Paper width in chars. */
    2 line_count fixed bin,				/* Number of lines printed this file. */
    2 page_count fixed bin,				/* Number of pages printed this file. */
    2 temp_indent fixed bin,				/* If previous line did not end in NL, where it did end. */
    2 pcw fixed bin (35),				/* Prototype PCW for this device.. reset status */
    2 write_dcw fixed bin (35),			/* Prototype write IDCW */
    2 stop_idcw fixed bin (35),			/* Prototype stopper IDCW */
    2 data fixed bin;				/* Start of per-printer DCW and data area. must be even loc */

dcl 1 wps based (wp) aligned,				/* prthdr$ */
    2 num_printers fixed bin,				/* number of printers available. set at init time */
    2 data_size fixed bin,				/* data area to be allocated per printer */
    2 astep ptr,					/* ast entry pointer for pc_abs */
    2 hold_lock bit (36),				/* each bit says that its corr page is wired now */
    2 prtlock (11) bit (36);				/* array of locks for per printer structures */

/* END INCLUDE .......... prtseg ............. */


*/
                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
and Bull HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for 
managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by Bull HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved

*/
