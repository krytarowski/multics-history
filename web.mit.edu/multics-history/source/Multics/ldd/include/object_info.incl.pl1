/* BEGIN INCLUDE FILE ... object_info.incl.pl1
coded February 8, 1972 by Michael J. Spier	*/
/* modified May 26, 1972 by M. Weaver */
/* modified 15 April, 1975 by M. Weaver */

declare	1 object_info aligned based,		/* structure containing object info based, returned by object_info_ */
	2 version_number fixed bin,		/* version number of current structure format (=2) */
	2 textp pointer,			/* pointer to beginning of text section */
	2 defp pointer,			/* pointer to beginning of definition section */
	2 linkp pointer,			/* pointer to beginning of linkage section */
	2 statp pointer,			/* pointer to beginning of static section */
	2 symbp pointer,			/* pointer to beginning of symbol section */
	2 bmapp pointer,			/* pointer to beginning of break map (may be null) */
	2 tlng fixed bin,			/* length in words of text section */
	2 dlng fixed bin,			/* length in words of definition section */
	2 llng fixed bin,			/* length in words of linkage section */
	2 ilng fixed bin,			/* length in words of static section */
	2 slng fixed bin,			/* length in words of symbol section */
	2 blng fixed bin,			/* length in words of break map */
	2 format,				/* word containing bit flags about object type */
	  3 old_format bit(1) unaligned,	/* on if segment isn't in new format, i.e. has old style object map */
	  3 bound bit(1) unaligned,		/* on if segment is bound */
	  3 relocatable bit(1) unaligned,	/* on if seg has relocation info in its first symbol block */
	  3 procedure bit(1) unaligned,	/* on if segment is an executable object program */
	  3 standard bit(1) unaligned,	/* on if seg is in standard format (more than just standard map) */
	  3 gate bit(1) unaligned,		/* on if segment is a gate */
	  3 separate_static bit(1) unaligned,	/* on if static not in linkage */
	  3 links_in_text bit(1) unaligned,	/* on if there are threaded links in text */
	  3 perprocess_static bit (1) unaligned, /* on if static is not to be per run unit */
	  3 pad bit(27) unaligned,
	2 entry_bound fixed bin,		/* entry bound if segment is a gate */
	2 textlinkp pointer,		/* ptr to first link in text */

	/* LIMIT OF BRIEF STRUCTURE */

	2 compiler char(8) aligned,		/* name of processor which generated segment */
	2 compile_time fixed bin(71),		/* clock reading of date/time object was generated */
	2 userid char(32) aligned,		/* standard Multics id of creator of object segment */
	2 cvers aligned,			/* generator version name in printable char string form */
	  3 offset bit(18) unaligned,		/* offset of name in words relative to base of symbol section */
	  3 length bit(18) unaligned,		/* length of name in characters */
	2 comment aligned,			/* printable comment concerning generator or generation of segment */
	  3 offset bit(18) unaligned,		/* offset of comment in words relative to base of symbol section */
	  3 length bit(18) unaligned,		/* length of comment in characters */
	2 source_map fixed bin,		/* offset, relative to base of symbol section, of source map structure */

	/* LIMIT OF DISPLAY STRUCTURE */

	2 rel_text pointer,			/* pointer to text section relocation info */
	2 rel_def pointer,			/* pointer to definition section relocation info */
	2 rel_link pointer,			/* pointer to linkage section relocation info */
	2 rel_static pointer,		/* pointer to static section relocation info */
	2 rel_symbol pointer,		/* pointer to symbol section relocation info */
	2 text_boundary fixed bin,		/* specifies mod  of text section base boundary */
	2 static_boundary fixed bin,		/* specifies mod of internal static base boundary */
					/* currently not used by system */
	2 default_truncate fixed bin,		/* offset rel to symbp for binder to automatically trunc. symb sect. */
	2 optional_truncate fixed bin;	/* offset rel to symbp for binder to optionally trunc. symb sect. */

declare	object_info_version_2 fixed bin int static init(2);

/* END INCLUDE FILE ... object_info.incl.pl1 */


*/
                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
and Bull HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for 
managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by Bull HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved

*/
