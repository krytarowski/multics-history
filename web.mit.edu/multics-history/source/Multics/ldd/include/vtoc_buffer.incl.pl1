/*  START OF:	vtoc_buffer.incl.pl1   November 1982      *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

     

/****^  HISTORY COMMENTS:
  1) change(86-04-21,Fawcett), approve(86-04-21,MCR7383),
     audit(86-05-27,GDixon), install(86-07-18,MR12.0-1098):
     Add the software read-alter-rewrite when needed for devices that do only
     512 word IO.
                                                   END HISTORY COMMENTS */


dcl	   vtoc_buffer_seg$	      ext;

     dcl	   vtoc_buffer_segp	      ptr;
     dcl	   vtoc_buf_descp	      ptr;
     dcl	   vtoc_bufp	      ptr;
     dcl	   vtoc_buf_desc_arrayp   ptr;
     dcl	   vtoc_buf_arrayp	      ptr;

     dcl	   vtoc_buf_n_buffers     fixed bin;
     dcl	   vtoc_buf_n_buckets     fixed bin;


     dcl	   1 vtoc_buffer	      aligned based (vtoc_buffer_segp),

	     2 lock,				/* Global lock for VTOC buffers */
	       3 processid	      bit (36) aligned,	/* Owner */
	       3 wait_event	      bit (36) aligned,	/* For lock */
	       3 notify_sw	      bit (1) aligned,	/* ON => notify on unlock */

	     2 n_bufs	      fixed bin,		/* Number of full VTOCE buffers */
	     2 n_hash_buckets     fixed bin,		/* Number of hash table buckets */
	     2 hash_mask	      bit (36) aligned,	/* Mask for hash algorithm */
	     2 abs_addr	      fixed bin (24),	/* Absolute address of vtoc_buffer_seg */
	     2 wait_event_constant fixed bin (36) uns unal,    /* Constant to add to part index to form wait event */
	     2 buf_desc_offset    bit (18),		/* Offset of buf_desc */
	     2 buf_offset	      bit (18),		/* Offset of buf */
	     2 hash_table_offset  bit (18),		/* Offset of hash_table */
	     2 search_index	      fixed bin,		/* Roving pointer for buffer selection */
	     2 unsafe_pvtx	      fixed bin,		/* PVTE index with update in progress */
	     2 scavenger_free_p_clock
                                    fixed bin (35),	/* Pseudo-Clock for scavenger-free-other-allocate race */
	     2 meters,
	       3 call_get	      fixed bin (35),	/* Calls to get_vtoce */
	       3 call_put	      fixed bin (35),	/* Calls to put_vtoce */
	       3 call_alloc	      fixed bin (35),	/* Calls to alloc_and_put_vtoce */
	       3 call_free	      fixed bin (35),	/* Calls to free_vtoce */
	       3 call_await	      fixed bin (35),	/* Calls to await_vtoce */
	       3 steps	      fixed bin (35),	/* Steps through buffer allocation */
	       3 skip_os	      fixed bin (35),	/* Skipped because out-of-service */
	       3 skip_hot	      fixed bin (35),	/* Skipped because buffer hot */
	       3 skip_wait	      fixed bin (35),	/* Skipped because notify_sw set */
	       3 disk_reads	      fixed bin (35),	/* Number of same */
	       3 disk_writes      fixed bin (35),	/* Number of same */
	       3 get_buffer_calls fixed bin (35),	/* Number of calls to GET_BUFFER */
	       3 get_buffer_hits  fixed bin (35),	/* Number times VTOCE in buffer */
	       3 wait_calls	      fixed bin (35),	/* Number of calls to WAIT */
	       3 wait_os	      fixed bin (35),	/* Number of times had to wait */
	       3 scavenger_free_checks
                                    fixed bin (35),	/* Number of times had to check pseudo-clock */
	       3 scavenger_free_losses
                                    fixed bin (35),	/* Number of times race lost between scavenger freeing and other allocate */
	       3 soft_rar	      fixed bin (35),         /* Nunber of times a software read_alter_rewrite performed */

	       3 pad (14)	      fixed bin (35),

	     2 hash_table	      (vtoc_buf_n_buckets refer (vtoc_buffer.n_hash_buckets)) bit (18) aligned,


	     2 buf_desc	      (vtoc_buf_n_buffers refer (vtoc_buffer.n_bufs)) aligned like vtoc_buf_desc,

	     2 buffer	      (vtoc_buf_n_buffers refer (vtoc_buffer.n_bufs)) aligned like vtoce_buffer;



     dcl	   1 vtoc_buf_desc_array  (vtoc_buffer.n_bufs) aligned based (vtoc_buf_desc_arrayp) like vtoc_buf_desc;


     dcl	   1 vtoc_buf_desc	      aligned based (vtoc_buf_descp),
	     2 pvtx	      fixed bin (17) unal,	/* PVTE index */
	     2 vtocx	      fixed bin (17) unal,	/* VTOCE Index */
	     2 parts_used	      bit (3) unal,		/* Mask of parts used or os */
	     2 err	      bit (1) unal,		/* ON => I/O error on buffer */
	     2 notify_sw	      bit (1) unal,		/* ON => notify requied on I/O completion */
	     2 write_sw	      bit (1) unal,		/* ON => write I/O */
	     2 os		      bit (1) unal,		/* ON => I/O in progress */
	     2 ioq	      bit (1) unal,		/* ON => I/O has been requested */
	     2 used	      bit (1) unal,		/* ON => this descriptor is in use */
	     2 pad	      bit (9) unal,
	     2 wait_index	      fixed bin (17) unal,	/* Buffer index for forming wait event */
	     2 ht_thread	      bit (18) unal,	/* Offset of next entry in hash table */
	     2 buf_rel	      bit (18) unal;	/* Offset of buffer in segment */

     dcl	   1 vtoce_buffer_array   (vtoc_buffer.n_bufs) aligned based (vtoc_buf_arrayp) like vtoce_buffer;

     dcl	   1 vtoce_buffer	      aligned based (vtoc_bufp),
	     2 parts	      (3) aligned,
	       3 words	      (64) bit (36) aligned;


     dcl	   N_PARTS_PER_VTOCE      fixed bin int static options (constant) init (3);
     dcl	   VTOCE_PART_SIZE	      fixed bin int static options (constant) init (64);
     dcl	   VTOCE_BUFFER_SIZE      fixed bin int static options (constant) init (3 * 64);
     dcl	   N_VTOCE_PER_RECORD     fixed bin int static options (constant) init (5);
     dcl	   N_SECTOR_PER_VTOCE     fixed bin int static options (constant) init (3);


/*  END OF:	vtoc_buffer.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


*/
                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
and Bull HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for 
managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by Bull HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved

*/
