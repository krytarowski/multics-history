/* Begin include file ... system_link_init_info.incl.pl1 ... 5/6/80 MRJ */



/****^  HISTORY COMMENTS:
  1) change(86-05-02,Elhard), approve(86-05-02,MCR7391),
     audit(86-07-18,DGHowe), install(86-11-20,MR12.0-1222):
     Modified to declare DEFERRED_INIT type constant.
  2) change(86-06-24,DGHowe), approve(86-06-24,MCR7420), audit(86-11-12,Zwick),
     install(86-11-20,MR12.0-1222):
     added the external pointer initialization structure and the constants
     required to use them.
                                                   END HISTORY COMMENTS */


/* Modified: 82-11-17 by T. Oke to add list_init_info and LIST_TEMPLATE_INIT. */

/* format: style3,idind25 */

/* NOTE --------------------------------------------------
   the following structures defining initialization information can also
   be found in fortran_storage.incl.pl1  definition_dcls.incl.pl1
   and should be kept equivalent
   -------------------------------------------------------
*/

dcl	init_info_ptr	     ptr;			/* ptr to structure below */
dcl	init_size		     fixed bin (35);	/* size (in words) of initialization template */

dcl	1 init_info	     aligned based (init_info_ptr),
	  2 size		     fixed bin (35),	/* size (in words) of data */
	  2 type		     fixed bin,		/* type of initialization: see below */
	  2 init_template	     (init_size refer (init_info.size)) fixed bin (35);

dcl	1 init_info_single_word  aligned based (init_info_ptr),
						/* for convenience of people like ssi */
	  2 size		     fixed bin (19),	/* = 1 */
	  2 type		     fixed bin,		/* = TEMPLATE_INIT */
	  2 init_template	     (1) fixed bin (35);	/* = value */

dcl	1 list_init_info	     aligned based,
	  2 size		     fixed bin (35),	/* length of variable */
	  2 type		     fixed bin,		/* LIST_TEMPLATE_INIT */
	  2 pad		     bit (18) unaligned,
	  2 list_size	     fixed bin (18) unsigned unaligned,
						/* size in words of template */
	  2 template	     (0 refer (list_init_info.list_size)) bit (36);
						/* first create_entry position */

/* A list template consists of a series of entries with the following
   description, concatenated together.  n_bits and datum are bit items,
   to permit a wide range of inputs.

   1.  A 'repeat' of '0' signifies skipping of 'n_bits' bits.
   2.  A 'n_bits' of '0' signifies the last item of the list.

   COMMON, VLA's, and LA's are presumed to start at the base pointer
   of their particular storage section. */

dcl	1 list_template_entry    aligned based,
	  2 n_bits	     fixed bin (35) aligned,	/* size of datum */
	  2 mbz		     bit (3) unaligned,	/* future expansion */
	  2 init_type	     fixed bin (3) unsigned unaligned, /* 0 normal init, 1 ptr init, 2 packed ptr init */
	  2 repeat	     fixed bin (30) unsigned unaligned,
						/* number of times to repeat datum */
	  2 datum		     bit (init_n_bits_in_datum refer (list_template_entry.n_bits));

/* list_template_entry_ptr is defined such that it can be used as an
   automatic definition overlay with a fixed size datum. it has a declared 
   size of 72 to allow for the its pointer sixe of 72 bits.
*/

dcl	1 list_template_entry_ptr	aligned based,
	  2 n_bits	     fixed bin (35) aligned,
	  2 mbz		     bit(3) unaligned,
	  2 init_type	     fixed bin (3) unsigned unaligned,
	  2 repeat	     fixed bin (30) unsigned unaligned,
	  2 datum		     bit(72);

/* the pointer_init_template represents the initialization information
   for ITS and packed pointers.  Both pointer types require the entire
   72 bit structure.
*/

dcl       1 pointer_init_template  based,
	  2 ptr_type	     fixed bin (18) unsigned unaligned,  /* 0 text section, 1 linkage section, 2 static section */
	  2 section_offset	     fixed bin (18) unsigned unaligned,  /* offset to item in specified section */
	  2 word_offset	     fixed bin (18) unsigned unaligned,  /* word offset from section item to target */
	  2 mbz		     bit (12) unaligned,
	  2 bit_offset	     fixed bin (6) unsigned unaligned;   /* bit offset from section item|word offset to target */


dcl	init_n_bits_in_datum     fixed bin (35);

dcl	NO_INIT		     fixed bin static options (constant) init (0);
dcl	TEMPLATE_INIT	     fixed bin static options (constant) init (3);
dcl	EMPTY_AREA_INIT	     fixed bin static options (constant) init (4);
dcl	LIST_TEMPLATE_INIT	     fixed bin static options (constant) init (5);
dcl	INIT_DEFERRED	     fixed bin static options (constant) init (6);
dcl	ITS_PTR_INIT	     fixed bin (3) unsigned static options (constant) init(1);
dcl	PACKED_PTR_INIT	     fixed bin (3) unsigned static options (constant) init(2);
dcl	PTR_INIT_TEXT	     fixed bin (17) static options (constant) init(0);
dcl	PTR_INIT_LOT	     fixed bin (17) static options (constant) init(1);
dcl	PTR_INIT_ISOT	     fixed bin (17) static options (constant) init(2);
	

/* End include file ... system_link_init_info.incl.pl1 */


*/
                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
and Bull HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for 
managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by Bull HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved

*/
