/* BEGIN fortran_io_consts.incl.pl1 - various constants for fortran I/O */

/* Modified:
	24 Oct 81, MEP  added inquire_opr, deleted unused_9 (op_9)
	1 Oct 1981 - MEP internal file
	17 June 1981 - MEP for ansi77 i/o enhancements
*/
declare
	(list_directed	initial("00"b),
	 unformatted	initial("01"b),
	 formatted	initial("10"b),
	 namelist		initial("11"b),

	 sequential_access	initial("00"b),
	 direct_access	initial("01"b),
	 string_io	initial("10"b),
	 internal_file	initial("11"b) )bit(2) aligned internal static options(constant);

dcl	(write_opr	initial(1),
	 old_endfile_opr	initial(2),
	 read_opr		initial(3),
	 rewind_opr	initial(4),
	 op_5		initial(5),
	 closefile_opr	initial(6),
	 close_opr	initial(7),
	 backspace_opr	initial(8),
	 inquire_opr	initial(9),
	 openfile_opr	initial(10),
	 open_opr		initial(11),
	 margin_opr	initial(12),
	 op_13		initial(13),
	 endfile_opr	initial(14)) fixed bin(4) int static options(constant);

dcl	(stream_file	init("001"b),
	 record_file	init("010"b),
	 blocked_file	init("011"b),
	 binary_file	init("100"b) ) bit(3) aligned int static options(constant);

dcl	(undefined	init(-1),
	 nonexistent	init(0),
	 unstructured	init(1),
	 sequential	init(2),
	 blocked		init(3),
	 indexed		init(4),
	 binary_stream	init(5) ) fixed bin int static options(constant);

/* This is the list of fields of the fields_specified word.  It is used to check for duplication in the parse, and
   is positionally importan for the code generator, fortran_io, and pl1_operators. */

dcl	(status_field	init(1),
	 io_switch_field	init(2),
	 attach_desc_field	init(3),
	 filename_field	init(4),
	 mode_field	init(5),
	 access_field	init(6),
	 form_field	init(7),
	 recl_field	init (8),
	 binarystream_field init (9),
	 prompt_field	init (10),
	 carriage_field	init (11),
	 defer_field	init (12),
	 blank_field	init (13),
	 units_field	init (14),
	 fmt_field	init (15),
	 rec_field	init (16),
	 exist_field	init (17),
	 opened_field	init (18),
	 number_field	init (19),
	 named_field	init (20),
	 name_field	init (21),
	 sequential_field	init (22),
	 formatted_field	init (23),
	 unformatted_field	init (24),
	 nextrec_field	init (25),
	 direct_field	init (26) ) fixed bin int static options(constant);

/* The following masks indicate the valid keywords and fields known to the i/o routines:
	read: unit, fmt, iostat, err, end, rec.
	write: unit, fmt, iostat, err, end.
	open: unit, iostat, err, file, status, access, form, recl, blank, status, ioswitch, 
	      attach, mode, binarystream, prompt, carriage, defer.
	close: unit, iostat, err, status.
	inquire: unit _x_o_r file, iostat, err, exist, opened, number, named, name, access, sequential, direct,
	         form, formatted, unformatted, recl, nextrec, blank.
 */
declare   (open_keyword_mask 	  init ("111111111111100000000000000000000000"b),
	 valid_open_keyword	  init ("111111111111110000000000000000000000"b),
	 valid_read_keyword	  init ("000000000000011100000000000000000000"b),
	 valid_write_keyword  init ("000000000000011000000000000000000000"b),
	 valid_close_keyword  init ("100000000000010000000000000000000000"b),
	 valid_inquire_keyword init("000100000000010011111111110000000000"b))
		bit (36) aligned internal static options (constant);
/* END   fortran_io_consts.incl.pl1 */


*/
                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
and Bull HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for 
managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by Bull HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved

*/
