" 
" Begin include file ...... readc.incl.alm
" Modified 3/19/76 by N. I. Morris

" To read a card into line ...
"	tsx2	readcd
"	tra	eof
"	...		"normal return
"

readcd:	stx2	rdrtn		save return

	lda	com|rdrchanno	set card reader channel number
	stca	readno,70		..

rcb:	tsx2	xio_wait		perform the I/O
	vfd	18/cdbuff,12/24	into our own buffer
	zero	readno,1		read card in binary mode
	tra	rdcerr		..

rdccnv:	lda	cdbuff		look at first word of card
	cmpa	=o002400,du	is it EOF card (5-7 punch)?
	tze	rdceof		if so, take EOF return

	stz	rdcfirst		reset first call switch
	mlr	(),(),fill(20)	blank out the end of line
	desc6a	*,0
	desc6a	line+12,12

	eax6	0		initialize index for storing characters
	eax5	0		initialize index for picking up columns

rdccol:	mrl	(x5),(),fill(0)	grab one column
	desc6a	cdbuff,2
	desc6a	rdcval,6		pad with zeroes
	lda	rdcval		column bits in A
	stz	rdcval		clear the result

	eax7	9		process 9 numeric bits
rdcnum:	cana	1,dl		test bit
	tze	*+2		if on,
	asx7	rdcval		add in its value
	arl	1		shift in the next bit
	eax7	-1,7		step index
	tnz	rdcnum		and continue processing numeric bits

	szn	rdcval		were there any numeric bits?
	tze	rdczonly		if not, special-case the zone bits

	eax7	48		process the 3 zone bits
rdczone:	cana	1,dl		test bit
	tze	*+2		if on,
	asx7	rdcval		add in value of zone bit
	arl	1		shift in the next bit
	eax7	-16,7		step index
	tnz	rdczone		continue processing zone bits
	tra	rdcend		go to store completed character

rdczonly:	lda	rdczonetab,al	get correct character value
	sta	rdcval		..

rdcend:	mlr	(),(x6)		insert completed character in line
	desc6a	rdcval(2),1
	desc6a	line,1

	eax5	2,5		step to next column
	eax6	1,6		step to next output character
	cmpx6	72,du		are we finished?
	tmi	rdccol		if not, process next column

rdrtn:	eax2	*		restore X2
	tra	1,2		take normal return

rdcerr:	sta	rdcstat		save the status bits
	cana	=o200000,du	power off?
	tnz	rdcchk		if so, ignore if first time
	lrl	30		major status in AL
	cmpa	=o42,dl		device attention?
	tnz	rdcstop		if not, wait for special
	lls	30		get substatus back again
	cana	=o2,du		is initiate bit on?
	tze	rdccnv		if not, card was read successfully

rdcchk:	szn	rdcfirst		is the first time?
	tnz	rdceof		if so, take EOF return

rdcstop:	tsx2	erpt		print error message
	acc	"card reader status = ^w."
	arg	rdcstat

rdcwait:	tsx2	check_special_status  wait for special interrupt
	arg	readno
	tra	*+2
	tra	rcb		try reading again

	tsx2	check_status	check for special on console
	arg	=0
	tra	rdcwait
	tra	rdcwait

rdceof:	stc2	rdcfirst		set first time flag again
	ldx2	rdrtn		restore X2
	tra	0,2		take EOF return


" 

readno:	vfd	18/,6/1		reader channel number
rdcval:	bss	,1		character value
cdbuff:	bss	,24		card image buffer
rdcfirst:	zero	*		first call switch
rdcstat:	bss	,1		reader status

rdczonetab:
	vfd	o18/20		blank	blank
	vfd	o18/00		0	(0)
	vfd	o18/52		-	(11)
	vfd	o18/40		|	(11-0)
	vfd	o18/32		&	(12)
	vfd	o18/60		+	(12-0)
	vfd	o18/77		illegal	(12-11)
	vfd	o18/77		illegal	(12-11-0)


" End of include file ...... readc.incl.alm

"
"
"                                          -----------------------------------------------------------
"
"
"
" Historical Background
"
" This edition of the Multics software materials and documentation is provided and donated
" to Massachusetts Institute of Technology by Group Bull including Bull HN Information Systems Inc. 
" as a contribution to computer science knowledge.  
" This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
" Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell Bull Inc., Groupe Bull
" and Bull HN Information Systems Inc. to the development of this operating system. 
" Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
" renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
" of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture for
" managing computer hardware properly and for executing programs. Many subsequent operating systems
" incorporated Multics principles.
" Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
" as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .
"
"                                          -----------------------------------------------------------
"
" Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
" fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
" and that both the copyright notice and historical background and this permission notice appear in supporting
" documentation, and that the names of MIT, HIS, Bull or Bull HN not be used in advertising or publicity pertaining
" to distribution of the programs without specific prior written permission.
"    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
"    Copyright 2006 by Bull HN Information Systems Inc.
"    Copyright 2006 by Bull SAS
"    All Rights Reserved
"
"