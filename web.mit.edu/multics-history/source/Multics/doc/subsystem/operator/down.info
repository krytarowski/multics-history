08/22/86  down

Syntax as a command:  down {time} {back} {reason}


Function: schedules an automatic shutdown for a specified time and an
automatic bump of users for N minutes before the time of the shutdown.
At the time of the bump, all interactive users are warned that they
will be logged out in N minutes.  You can use it only in ring 4.


Arguments:
time
   is the time to schedule an automatic shutdown.  It is a clock
   reading acceptable to convert_date_to_binary_.  Enclose in quotes if
   it contains spaces.  If you omit it, the command displays the
   current down settings.
back
   is the time announced to users when the system will come back up.
   Give it in the same form as the time argument.
reason
   is a message that tells users the reason for the shutdown.


Notes: N is figured using the value of warning_time, a parameter in
the installation_parms segment.  The warning_time parameter in the
installation_parms segment is the number of real-time seconds between
warning of an automatic logout and the actual logout.  N equals
warning_time divided by 60, rounded up to the next whole minute; for
example, if the installation_parms segment shows a warning_time value
of 6000 seconds, then N will be 100 minutes.

When the system is started up, a check is made to see if a down command
has been issued that has not yet taken effect.  If one is found and
more than 30 minutes remain before it takes effect, the down command is
reissued automatically.


If absentee is up when you issue this command, an automatic absentee
stop is set up for 20 minutes before shutdown.  If absentee is not up
when you issue this command, but it is brought up later, the automatic
absentee stop is still set up for 20 minutes before shutdown.  If
absentee is already being shut down when you issue this command, the
shutdown of absentee continues.


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
