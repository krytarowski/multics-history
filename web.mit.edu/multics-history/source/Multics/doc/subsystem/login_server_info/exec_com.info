07/06/87  exec_com, ec

Syntax:  ec ec_path {ec_args}


Syntax as an active request:  [ec ec_path {ec_args}]


Function:  executes a program written in the exec_com language which is
used to pass request lines to the subsystem and to pass input lines to
requests which read input.  As an active request, the exec_com program
specifies a return value of the exec_com request by use of the &return
statement.


Arguments:
ec_path
   is the pathname of an exec_com program.  The lsec suffix is assumed
   if not specified.  If only an entryname is given, ssu_ looks for the
   exec_com in the directories given in the exec_com search list.
ec_args
   are optional arguments to the exec_com program and are substituted
   for parameter references in the program such as &1.


Notes:
Subsystems may define a search list to be used to find the exec_com
program.  If this is the case, the search list is used if ec_path does
not contain a "<" or ">" character; if the ec_path does contain either
a "<" or ">", it is assumed to be a relative pathname.


When evaluating a subsystem exec_com program, subsystem active
requests are used rather than Multics active functions when evaluating
the &[...] construct and the active string in an &if statement.  The
subsystem's execute active request may be used to evaluate Multics
active strings within the exec_com.


Limitation;
In the present implementation, any errors detected during execution of
an exec_com within a subsystem will abort the request line in which the
exec_com request was invoked.


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
