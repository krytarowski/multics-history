82-12-18 cv_odsf

Syntax: cv_odsf path {-control_arg}


Function: Converts an Operator Display Site File into an Operator
Display Site Table for installation in >sc1.  See "List of allowable
statements" below for details about allowable statements and their
syntax.


Arguments:
path
  is the path of the file to be converted.  The "odsf" suffix is
  assumed if not supplied.  The compiled segment is placed in the
  working directory with the "odst" suffix replacing the "odsf"
  suffix.


Control arguments:
-long, -lg
  prints long forms of all error messages produced by the conversion.
-brief, -bf
  prints short forms of all error messages.


Notes: If cv_odsf is invoked with no control arguments, the first
instance of an error message is printed in the long form, and
subsequent instances of that error message are printed in the short
form.

The "display_odst" command may be used to display the contents of an
"odst" in readable format.

The "operator_display" subsystem looks for the segment ">sc1>odst",
therefore a compiled "odsf" must be copied to that location. The
entry "operator_display$test" may be used to specify some other "odst"
segment to be used by a process.


List of allowable statements: A site file contains information which is
needed for the standard display of the "operator_display" subsystem and
for the "scan_queues" request of the subsystem.  The file consists of a
series of statements that begin with a keyword and end with a
semi-colon.  Comments may appear enclosed by /* and */.  The last
statement must be the "end;" statement.

Each request type to be monitored by the display must have a
"display_rqt" statement followed by optional sub-statements.  Each
request type to be displayed by the "scan_queues" requests is given in
a single "scan_rqts" statement.


The "site_id" statement:

An "odsf" must begin with a "site_id" statement. Its syntax is:

site_id: <SITE_ID>;
  The site_id statement is required and must be the first statement of
  the file. If SITE_ID contains spaces it must be enclosed in quotes.
  The SITE_ID is limited to 27 characters in length. This restriction
  explains why "system_info_$installation_id" could not be used.


A "display_rqt" entry:

A description of each statement found in a "display_rqt" entry is
given below.

display_rqt: <RQT_SPEC>;
  The display_rqt statement is required.  It specifies a request type
  to be monitored by the subsystem.  RQT_SPEC is either a request
  type name (ie.  printer6) or an absolute path (ie.
  >ddd>vr>volume_retriever), in which case the entryname portion is
  the actual request type name.  Request type names may be no longer
  than 27 characters.

display_name: <NAME>;
  The display_name statement is optional.  It specifies the name which
  is to appear in the display itself.  The statement is provided because
  the display can only handle names of up to 12 characters.  If this
  statement is not provided, then the name supplied in the "display_rqt"
  statement is used (or the first 12 chars.  of this name).


entry: <ENTRYPOINT>;
  The entry statement is optional. It specifies an entry which is to be
  called to get the queue counts for this request type. It is provided
  to allow for the inclusion of special queues in the display. The calling
  sequence for this entry is given below:


The calling sequence for the ENTRYPOINT given in the "entry" statement is

  dcl entry (char (*), char (*), (4) fixed bin)
  call entry (rqt_dir, rqt_name, q_counts (*))

  where:
    rqt_dir    (INPUT)
               - is the directory portion of the RQT_SPEC given in the
                 display_rqt statement, or "" if RQT_SPEC was not an
                 absolute pathname.
    rqt_name   (INPUT)
               - is the name of the request type (ie. "printer6"). This
                 will be the entryname portion of an RQT_SPEC
                 supplied as an absolute pathname.
    q_counts   (OUTPUT)  
               - is the counts for each of the request type's queues.
                 A value of zero should be returned for non-existent queues.


The "scan_rqts" statement:

The requests types scanned by the "scan_queues" request of the subsystem
are given by a single "scan_rqts" statement. Its syntax is:

scan_rqts: {RQT_SPEC1, ... RQT_SPECn};
  The scan_rqts statement is optional. RQT_SPEC is the same as that for
  the display_rqt statement. The request types specified in this statement
  must be standard message segments, although there need not be the
  normal 4 queues.


Example of a site file:

/* "odsf" segment for U. of C. */
site_id:        "University of Calgary";
display_rqt:    printer8;
display_rqt:    printer6;
display_rqt:    blank8;
display_rqt:    blank6;
display_rqt:    >ddd>Volume_Retriever>volume_retriever;  /* 3 queues. */
  display_name:   Vretrieve;
display_rqt:    >ddd>Plot_dir>calcomp_request_queue;
  display_name:   Plotter;
  entry:          operator_display_site_$plot_queue;

scan_queues:    printer8,printer6,blank8,blank6,
                >ddd>vr>volume_retriever;

end;


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
