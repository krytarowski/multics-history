12/12/82 Virtual Address Constructs

Accessing data requires some pointer value to define an address space.
The generation of the pointer value is performed by resolving a virtual
address (VIRTUAL-ADDR).  A VIRTUAL-ADDR consist of two parts, a segment
number and a word offset.

Analyze_multics (azm) will resolve VIRTUAL-ADDR'S from the following
types of information:


Symbols:    
   is a symbolic name for a segment number and an offset (i.e., sst$ptl
   can be resolved to the correct segment number and offset of the page
   table lock).


Segment name: 
   a segment name can be resolved in many ways, but it can only provide
   one part of the virtual address; azm uses 0 as the default offset
   for this pointer value (i.e., tc_data is resolved to SEGNO|0).


Segment number:
   a segment number needs no resolution, but a default action needs to
   be taken for the offset (the default is 0, i.e., SEGNO|0).


Segment name/number and offset:
   The VIRTUAL-ADDR in this case can be a segment name or segment
   number and an octal offset (i.e., the construct of pds|20 is
   translated to SEGNO|20 or dseg|5 is 0|5).  The notation "|" and "$"
   must be used without spaces (e.g., 244|0 or sst$cmp).


Temporary pointers:
   azm keeps a set of 11 temporary pointers per translation.  A
   translation is one complete entity such as an "FDUMP".  These
   pointers can be set with the set request (e.g., set sp 230|100).
   They can be referenced by other requests as another type of "symbol"
   in a VIRTUAL-ADDR expression, after they have been set.  If not set,
   these pointers are null.


Offset Operators:
   The operators "+N" and "-N" immediately preceding an octal number,
   or VIRTUAL-ADDR construct can be used to alter the offset of a
   virtual address.  N is a number interpreted in octal.  No spaces are
   allowed between the operator and the N.  For example, sst$ptl +30
   are resolved to be the SEGNO for sst_seg with the offset of ptl plus
   30 octal locations; sst$ptl+30 is also valid.


Indirection:
   A VIRTUAL-ADDR can imply indirection.  The indirect word can be used
   as an ITS pair if it is a valid ITS word pair; if not, the upper
   half of the word is used.  The following VIRTUAL-ADDR construct is
   used to specify indirection (sst$cmp,*).  The format of an indirect
   pointer value is:
   
       segno|offset,*       segname|offset,*       symbol,*
       temp_ptr,*	        temp_ptr|offset,*


Examples of indirection:
       17|230,*             sst|230,*              sst$cmp,*+2
       sp,*	        sp|230,*

    



                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
