09/22/87  answer_linked_trs, altr

Syntax:  altr {tr_numbers_and/or_tr_paths} {-control_args}


Function: enters answers for an existing set of trouble reports which
are linked together (ie, which refer to the same problem).  If you wish
to answer a new report and add it to an existing set of linked TRs,
then you should not use this command.  Instead use:

   atr new_report_number -linked_trs numbers_for_existing_linked_TRs


Note that only the developer associated with the original report may
answer that report.  Other users interested in a report should use
add_to_trouble_report (attr) to add information to an existing report
without answering it.  Use enter_problem_report (epr) to originate a
problem report, enter_suggestion (es) to enter suggestions, and
enter_question (eq) to enter questions about Multics.  This command
accepts the same control arguments and requests that epr accepts, and
it operates in much the same way.  It accepts two additional control
arguments not appropriate for epr (-state and -error_list_info) which
are described below.


Arguments:
tr_numbers_and/or_tr_paths
   are numbers of the TRs which are being answered, or pathnames of
   segments containing the TRs to be answered.  When a pathname is
   given, altr looks for the Subject line at the beginning of the
   segment, and extracts the TR number from this line.  This can be
   used with the new apply request of EXL read_mail.  For example, when
   in read_mail:
     apply 4 altr
   invokes altr to answer the TR which is the 4th message of the mailbox.


Control arguments:
-type type_name, -tp type_name
   defines the new type of this TR.  For example, the developer can change the
   type from a problem to a suggestion or question.  This allows altr to valid
   the state_name according to the new type.  The type_name can be: problem,
   prob, prb, pb, p; suggestion, sugg, sg, s; or question, ques, qs, q.
-priority priority_name, -prty priority_name
   defines the new priority for problem TRs.  The priority_name can be:
     critical, c, high, h, normal, n
-state state_name, -st state_name
   defines the new state of this TR.  For info, type: help tr_states.
-error_list_info error_list_name error_list_number,
-eli error_list_name error_list_number
   defines the error list name and number of the entry in an error list
   which is associated with the trouble report.


-linked_trs {tr_number_and/or_tr_paths},
-ltr {tr_number_and/or_tr_paths}
   gives numbers of reports which are associated with the report being
   answered.  All operands following -ltr until the next control
   argument are treated as associated report numbers.  If no numbers
   are given, this control argument is ignored.


-brief, -bf
   suppresses printing of some explanatory messages, briefly prompts for
   information.
-long, -lg
   prints full explanatory messages and information prompts. (Default)
-verbose, -vb
   describes each question in detail as it is asked.  The information
   describes how to end the question, lists possible answers, etc.
-tr_log, -trl
   adds a summary of the report to the user's TR log ([hd]>Person_id.tr_log).
   The log helps track TR activity.  It can be edited when a new Multics
   release is installed to remove log entries for fixed TRs. (Default)
-no_tr_log, -ntrl
   suppresses logging.


-terminal_input, -ti
   prompts for information needed to submit a report.  After user answers
   questions, requests can be issued to print or edit information and to submit
   completed report. (Default)
-input_file path, -if path
   parses segment named by path for information needed to submit a report.  The
   segment contains the same information fields which would be prompted for in
   -terminal_input.  After parsing, altr prompts for any required information
   not in the segment, then enters the request loop.
-request_loop, -rql
   enters the request loop immediately.  Editing requests are used to supply
   information for the report.


-request request_line, -rq request_line
   specifies a request line to be executed before entering the request loop.
-quit
   stops execution after processing the requests given with the
   -request control argument.


-update, -ud
   prints user's TR registration information and allows editing of the
   information. (Default - user asked to verify registration every 90 days)
-no_update, -nud
   suppresses automatic verification of TR registration which normally occurs
   every 90 days.
-editor editor_name
   uses named editor during this invocation of altr.  Allowed editors are: edm,
   qedx (qx), ted, emacs, teco and tr_edit.  tr_edit is invoked by the command
   line:
	tr_edit path_to_be_edited
   You can define an abbrev called tr_edit which invokes a private editor.
   (Default - use editor given in user's TR registration)


-abbrev, -ab
   enables abbreviation expansion and editing of request lines.
-no_abbrev, -nab
   disabled abbreviation expansion and editing of request lines.  
-profile PATH, -pf PATH
   specifies the pathname of the profile to use for abbreviation
   expansion.  The suffix "profile" is added if necessary.  This
   control argument implies -abbrev.


-prompt STR
   changes the prompt for altr request lines to STR.  If STR is
   "", the user is not prompted.  -prompt accepts "STR^[(^d)^]:  "
   which takes the form STR(N):, where N is the recursion level if
   greater than one.  The default prompt is "altr(N):  ", where N is
   the recursion level if greater than one. 
-no_prompt
   stops prompting for altr requests.  Equivalent to -prompt "".


Notes:  more than one TR number or TR pathname must be given to
indicate which linked TRs are being answered.  Use of the -linked_tr
control argument is optional.  The argument is provided for
capatability purposes with the answer_trouble_report command.


Answer delimiters: The questions altr asks can be answered with 1-line
answers or multi-line answers, depending upon the type of question.
altr prompts for 1-line answers by typing a field name and colon (:),
leaving the terminal positioned after the colon.  altr prompts for
multi-line answers by typing a field name and colon, leaving the
terminal positioned on the line following the field name.  The answer
ends with a line containing just a period (<NL>.<NL>).


List of field specs:
   Many altr requests accept a field specification which identifies information
   fields to be processed by the request.  Field specs can be:
field_name
   one of the field names allowed in the report.  Use the list_fields request
   to print a list of acceptable field names.
-required, -rqd
   all of the fields required to submit a report.  More information fields are
   required for Site SAs and developers than for other users.  Use list_fields
   request to determine which fields are required in your reports.
-all, -a
   all fields even allowed in a report.  This includes non-required fields, and
   even fields which developers and other users are not prompted for.


List of requests:
print {field_specs}, pr {field_specs}
   prints the specified fields. (Default- prints all answered fields)
edit {field_specs}, ed {field_specs}
   edits the specified fields.  (Default- edits all fields user would be
   prompted for in -terminal_input mode)


add {field_specs}
   prompts for specified fields if they have not been answered.  (Default-
   prompts for unanswered fields user would be prompted for in  -terminal_input
   mode.)
delete fields_specs, dl field_specs
   deletes the specified fields.
replace field_specs, rp field_specs
   prompts for the specified fields, whether or not they have been previously
   answered.
write {path}, w {path}
   saves fields entered so far in segment identified by pathname.  If no
   pathname is given, report saved in segment given in previous write request.


send {-ctl_args}, s {-ctl_args},
enter {-ctl_args}, en {-ctl_args}
   checks for validity and completeness of the report, then submits it to the
   TR Administrator.  If ctl_args are given, the send_mail command is invoked
   after the TR is submitted to send the completed report to a savebox, to
   some other person, or to write the report in a segment.  Most send_mail
   control arguments are allowed, plus -write, -append and -preface for
   putting the report in a segment.  Use the "help send" request to get a
   complete list of control arguments.  Note that "send -ack" does not give
   you an acknowledgment when the TR administrator reads the report.  It
   invokes send_mail to send the report to another user (with acknowledgment),
   and then send_mail reports an error when it finds no user addresses have
   been specified.  Upon completion, this request exits from altr.


list_fields, lfl
   lists fields which are allowed in a report.  Required fields are marked by
   (rqd).
set_editor {editor_name}, sed {editor_name}
   sets the named editor for use during this invocation of altr. (Default- use
   editor given in user's TR registration)
?
   prints a list of requests.
list_help, lh
   lists help topics available from help request.
help {topic}
   prints information about specified topic.  (Default- prints general
   information about use of altr)
quit {-force}, q {-force}
   exits from altr request loop without submitting the report.  Unless -force
   or -fc is given, user is queried before exiting.


execute Multics_command, e Multics_command
   escapes to Multics command level to execute the given command.  The command
   ends with the first semicolon (;), so that Multics commands and altr
   requests can be interspersed in the same request line.
.. Multics_command_line
   executes the entire request line as a Multics command line.  The .. must 
   appear at the beginning of the request line.
.
   prints name of this command.


List of active requests:
   The following requests can be used in an active string in request lines.
[execute Multics_active_function],
[e Multics_active_function]
   returns the result of evaluating a Multics active function into the request
   line.


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
