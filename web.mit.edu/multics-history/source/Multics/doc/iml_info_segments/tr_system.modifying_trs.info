02/22/88  Modifying Large Numbers of TRs

Function: Often, developers need to modify large numbers of TRs as part
of reorganizing an error list, rerouting TRs when assignments change,
etc.  The ptr modify request provides a method for doing such
moby-modify operations.


Overview of Moby Modifications:
The developer specifies the changes to be made to TRs in a special
listin file.  An empty template listin file is available in
>am>tr.modify.listin.  Then the developer mails the listin pathname to
the TR administrator, who does the actual modifications.


List of modify listin fields:
   The modify listin contains one or more lister records, each of which
   has some or all of the following fields.
tr
   gives the numbers of TRs all of which are to be modified in the same
   way.  The numbers are separated by spaces.  The phx TR number prefix
   is optional (eg, 19567 is the same as phx19567).
route_from
   personids (to whom the TR is currently routed) to be removed from
   the TR To field.  Up to 5 personids are allowed, separated by spaces.
   By default, no one is removed from the To field.
route_to
   personids to whom the tr is to be routed.  Up to 5 personids are
   allowed, separated by spaces.  By default, no one is added to the To
   field.


add_to_fyi
   personids to be added to the TR distribution (or FYI) list.  Up to 5
   personids are allowed, separated by spaces.  By default, no one is
   added to the distribution list, other than IDs added via the
   route_to field above. 
to_be_mailed
   specifies whether to mail the TR to its distribution list after the
   changes are made.  A value of false or no prevents mailing.  By
   default, TR is mailed after being changed. 


new_type
   changes the type of the TR.  Only valid TR types are accepted.  See
   tr.states.info for a list of types.  By default, the type is not
   changed.
new_priority
   changes the priority of a problem TR.  Only valid TR priorities are
   accepted.  See tr.priorities.info for a list of priorities.  By
   default, the priority is not changes.
new_state
   changes the state of the TR.  Only valid TR states may be used, and
   state/type compatibility is checked.  See tr.states.info for a list
   of types.  The TR process stage is changed based upon the new_state
   value.  By default, the state is not changed.


old_eli
   removes error list entries from the TR.  Multiple entries can be
   given as follows:
      as 398 399, hardcore 412
   where several entry numbers can be given after the error list name,
   and comma separates a new error list name from preceding
   names/numbers.  By default, no error list entries are removed from
   the TR.
new_eli
   adds error list entries to a TR.  Multiple entries can be given in
   the same format accepted by old_eli.  By default, no error list
   entries are added to the TR.  When new entries are added, they
   inherit a completion code associated with the new_state given above,
   or with the current state of the TR if new_state is not given.


new_area
   changes the area field of the TR.  Up to 80 characters may be given.
   By default, the area field is not changed.
new_summary
   changes the summary field of the tr.  Up to 1000 characters may be
   given.  By default, the summary field is not changed.
added_info
   addeds to the text of the new transaction.  Some new_state values
   required added_info explaining why the new state was given.
   Examples are deferred for normal problems, and rejected for
   suggestions.  This field can be up to 1000 characters long.


How to create a modify listin:
There is a template of a listin file with all the fields defined
located at >am>tr.modify.listin.  This may be edited using any editor,
though using emacs and lister-mode will be the simplest method.  See
>udd>Multics>GDixon>emd>lister-mode.info for instructions.  Note, it is
not necessary to give values for all fields in each record.  Specify
only the tr field plus those fields that needed to make the desired
changes to the TR.


How to have your listin file processed:
First, to insure that the listin is in the correct format, use the
create_list {listin_name} on your file.  Then, send mail with the
pathname of the listin to the TR Administrator (Perez.TR) for
processing.


Examples of a modify listin:
The following listin file contains two records, each one affecting two
trouble reports.

  Record_delimiter: @;
  Field_delimiter: #;
  Field_names: tr, route_from, route_to, add_to_fyi, to_be_mailed,
  old_eli, new_eli, new_area, new_summary, new_type, new_priority, 
  new_state;

  Records:
  @
   #tr 11223 11224 
   #route_from PersonA PersonB
   #route_to PersonC PersonD
   #add_to_fyi PersonE
   #to_be_mailed false
   #old_eli ListA 123 456, ListB 198
   #new_eli ListC 19
   #new_type problem
   #new_priority normal
   #new_state error
   #new_area Special_area
   #new_summary
   This is where the new summary is to be. It can be up to 1000 characters
   long and may contain carriage returns.  The text will be reformatted by
   the trouble reporting system.
  @
   #tr 12345 12349
   #new_area AreaXX
   #to_be_mailed false


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
