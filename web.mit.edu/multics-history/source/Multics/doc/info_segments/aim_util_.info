02/18/85  aim_util_


The aim_util_ subroutine contains entrypoints that manipulate AIM
access classes and authorizations.


Entry points in aim_util_:
   (List is generated by the help command)


:Entry:  get_access_class:  02/18/85 aim_util_$get_access_class


Function:
This entry point extracts the access class from an authorization.


Syntax:
declare aim_util_$get_access_class entry (bit(72) aligned) returns
     (bit(72) aligned);
access_class = aim_util_$get_access_class (authorization);


Arguments:
authorization
   is a standard AIM authorization marking.  (Input)
access_class
   is a standard AIM access class marking.  (Output)


:Entry:  get_privileges:  02/18/85 aim_util_$get_privileges


Function:
This entry point extracts the privileges from a standard AIM
authorization.


Syntax:
declare aim_util_$get_privileges entry (bit(72) aligned) returns
     (bit(36) aligned);
privileges = aim_util_$get_privileges (authorization);


Arguments:
authorization
   is a standard AIM authorization marking.  (Input)
privileges
   is a standard AIM privilege string.  (Output) See the include file
   aim_privileges.incl.pl1 for the interpretation of this string.


:Entry:  get_level:  02/18/85 aim_util_$get_level


Function:
This entry point extracts the sensitivity level from an access class or
authorization.


Syntax:
declare aim_util_$get_level entry (bit(72) aligned) returns (fixed
     bin);
level = aim_util_$get_level (access_class);


Arguments:
access_class
   is a standard AIM access class or authorization marking.  (Input)
level
   is a sensitivity level number.  (Output) Levels range from 0 to 7.
   Level names are available via system_info_$level_names.


:Entry:  get_categories:  02/18/85 aim_util_$get_categories


Function:
This entry point extracts the categories from a standard AIM access
class or authorization.


Syntax:
declare aim_util_$get_categories entry (bit(72) aligned) returns
     (bit(36) aligned);
categories = aim_util_$get_categories (access_class);


Arguments:
access_class
   is a standard AIM access class or authorization marking.  (Input)
categories
   is a bit string representing the category information contained in
   the access class.  (Output) If the i'th bit of the bit string is a
   1, then the i'th category is included in the access class marking.
   Category names are available from system_info_$category_names.


:Entry:  make_access_class:  02/18/85 aim_util_$make_access_class


Function:
This entry point constructs an access class marking from a
level and a set of categories.


Syntax:
declare aim_util_$make_access_class (fixed bin, bit(36) aligned,
     bit(72) aligned);
call aim_util_$make_access_class (level, categories, access_class);


Arguments:
level
   is a sensitivity level number, from 0 to 7.  (Input)
categories
   is a category bit string.  (Input) See aim_util_$get_categories for
   the construction of this string.
access_class
   is a standard AIM access class marking.  (Output)


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
