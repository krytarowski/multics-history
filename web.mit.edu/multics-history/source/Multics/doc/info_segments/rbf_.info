01/24/83  rbf_

The rbf_ I/O module performs record oriented I/O to a remote I/O
terminal that has the characteristics of the Honeywell Level 6M
Satellite remote batch facility operating over an X.25 connection.  The
hardware options currently supported are defined by the control
arguments described below.

Entry points in this module are not called directly by users; rather,
the module is accessed through the I/O system.


Syntax for Attach Description:
     rbf_ -control_args


Control arguments:
   are optional with the exception of -device, -comm, and -tty.  All
   others are passed through as part of the attach description
   for the communications I/O module specified via -comm.
-ascii
   uses the ASCII character set.  This is the default.  This argument
   is accepted for compatibility with other terminal I/O modules.
-comm STR
   uses the communications I/O module specified by STR where STR must
   be "tty_".
-device STR
   attaches the subdevice specified by STR.  STR can be printer, punch,
   reader or teleprinter.


-physical_line_length N, -pll N
   specifies the physical line length, N, of the output device.  This
   argument is accepted for compatibility with other terminal I/O
   modules.
-terminal_type STR, -ttp STR
   specifies the terminal type whose translation tables defined in the
   user or system terminal type table (TTT) are used to translate input
   and output to and from the device.  If not specified, no translation
   is performed.  Input and output translation tables can be up to 256
   characters in length.
-tty STR
   connects the remote I/O terminal to the logical communications
   channel named STR.


Open Operation:
The rbf_ I/O module supports the sequential_input, sequential_output,
and sequential_input_output opening modes.


Write Record Operation:
The write_record entry performs the appropriate translation on the data
record, converts the supplied slew control into the proper carriage
control sequences for line printer attachments and performs data
compression.  The records are then transmitted to the specified
communications channel.

The format of the record supplied to this I/O module is the
terminal_io_record structure.  This structure and the referenced
constants are contained in terminal_io_record.incl.pl1.


Read Record Operation:
The read_record entry reads characters from the communications channel
and returns a single record from the device, basically performing the
inverse of the functions described for the write_record operation.

The format of the record this I/O module returns in the supplied
buffer is the terminal_io_record structure.  This structure and the
referenced constants are contained in terminal_io_record.incl.pl1.


Control Operation:
This I/O module supports all the control operations supported by the
tty_ I/O module.  In addition, it supports the following:
runout
   transmits any data stored in the output buffer.  There is no input
   structure.
end_write_mode
   prevents rbf_ from returning until all outstanding output has been
   written to the attached channel.  There is no input structure.


Modes Operation:
This I/O module supports the rawi, rawo, and 8bit modes.


Notes: The select_device, reset, and binary_punch control orders are
ignored, but are accepted for compatibility with other I/O modules.


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
