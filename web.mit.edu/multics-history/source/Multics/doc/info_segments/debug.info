02/02/79  debug, db

Syntax:  db


Function: Interactive debugging aid. Type "help probe" for another.


Data requests:   three fields with the following format--
     <generalized address> <operator> <operands>

Generalized address--
     [/segment name/] [offset] [segment ID] [relative offset]

Operators--
,   print               >   alter program control
=   assign              :=  call a procedure
<   set a break


Segment IDs--
  &a   argument list    &i   internal static section
  &l   linkage section  &p   parameters
  &t   text section     &s   stack frame


Operands:
, operand operand   first operand is output mode;
second operand is how much to print.  (See Output modes)
(See Output modes)

= operand    new value to use; can be octal number,
decimal number, character string, register value, instruction
format input, floating point number, pointer, bit string, or
variable.

:= operand   procedure_name (argument list).


Registers:
   $a            $exp
   $q            $tr
   $aq           $ralr
   $eaq          $ppr
   $x0           $tpr
    .            $even
    .            $odd
    .            $ind
   $x7           $prs
   $pr0          $regs
    .            $scu
    .            $all
    .
   $pr7


Output modes:
o  octal                    e  floating point with exponent
h  half-carriage octal      f  floating point
d  decimal                  b  bit string
a  ASCII                    g  graphic
i  instruction              comp-5  COBOL
p  pointer                  comp-6  COBOL
s  source statement         comp-7  COBOL
l  code for line number     comp-8  COBOL
n  no output


Control requests:
.ti,j   trace stack from frame i for j frames
.+i or .-i  pop or push stack by i frames
.i   set stack to i'th frame
..   Multics command
.d or .D  print default values
.c,i    continue after break fault (ignore next i break fault)
.ct,i   continue, in temporary break mode
.cr,i   continue, in normal mode
.q   return from debug to caller
.bri  reset break i


.br  reset the breaks of the default object segment
.bgr  reset all breaks
.bli  list break i
.bl  list the breaks of the default object segment
.bgl  list all breaks
.bei <line>  execution line for break i
.be <line>   execution line for all breaks of the default
 object segment
.bge <line>  execution line for all breaks
.boi  disable break i
.bo  disable the break of the default object segment
.bgo  disable all breaks
.bni  enable break i


.bn   enable the breaks of the default object segment
.bgn  enable all breaks
.bgt <line>  establish a temporary global command
.bci a1 -rel- a2  make conditional break i
.bc  a1 -rel- a2  make conditional all breaks of default object
segment
.bsi n  set skips of break i to n
.bd name/no. set (or print) default object segment
.bp   print names of all segments with breaks
.ai,m  print argument i in modes m (modes--o, p, d, a, b, l, e, f, ?)
.f  use registers from last fault
.C  use crawlout registers
.mb  change to brief output mode
.ml  change to long output mode
.si  identifies switch_name used for input
.so  identifies switch_name used for output


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
