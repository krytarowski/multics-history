03/17/86  heap_manager_


To obtain information on a particular entry point use the "ep" request


Entry points in heap_manager_:
   (List is generated by the help command)


:Entry:  push_heap_level: 03/17/86  heap_manager_$push_heap_level


Function: This entry point creates a new heap level, allocates
the heap header and chains the previous heap to the current
heap. If the stack_header_ptr is null an error of
error_table_$null_info_ptr is returned.


Syntax:
declare heap_manager_$push_heap_level entry (pointer, fixed
  bin(17), fixed bin(35));
call heap_manager_$push_heap_level (stack_header_ptr, exe_level,
  code);


Arguments:
stack_header_ptr
   is a pointer to the stack header.  This can be obtained via
   the PL/1 builtin stackbaseptr().  (Input)
exe_level
   is the new execution level after the new heap is created.
   (Output)
code
   is a standard status code.  (Output)


:Entry:  pop_heap_level: 03/17/86  heap_manager_$pop_heap_level


Function: This entry point resets the heap to the previous level
freeing the old heap and any variables allocated therein.


Syntax:
declare heap_manager_$pop_heap_level entry (pointer, fixed
  bin(35));
call heap_manager_$pop_heap_level (stack_header_ptr, code);


Arguments:
stack_header_ptr
   is a pointer to the stack header.  This can be obtained via
   the PL/1 builtin stackbaseptr().  (Input)
code
   is a standard status code.  (Output)


:Entry:  get_heap_header: 03/17/86  heap_manager_$get_heap_header


Function: This entry point returns a pointer to the heap header
for the specified execution level.  If the execution level does
not exist an error of error_table_$no_heap_defined is returned.


Syntax:
declare heap_manager_$get_heap_header entry (pointer, fixed
  bin(17), pointer, fixed bin(35));
call heap_manager_$get_heap_header (stack_header_ptr, exe_level,
  heap_header_ptr, code);


Arguments:
exe_level
   is the execution level of the heap required. If a -1 is passed
   then the current execution level is used.  (Input)
stack_header_ptr
   is a pointer to the stack header.  This can be obtained via
   the PL/1 builtin stackbaseptr().  (Input)
heap_header_ptr
   is a pointer to the heap header for the passed execution
   level. (Output).
code
   is a standard status code.  (Output)


:Entry:  get_heap_level: 03/17/86  heap_manager_$get_heap_level


Function: This entry point returns the current execution level
from the current heap header.  If the heap does not exist an execution
level of -1 is returned.


Syntax:
declare heap_manager_$get_heap_level entry (pointer)
  returns (fixed bin(17));
exe_level =  heap_manager_$get_heap_level (stack_header_ptr);


Arguments:
stack_header_ptr
   is a pointer to the stack header.  This can be obtained via
   the PL/1 builtin stackbaseptr().  (Input)


:Entry:  get_heap_area: 03/17/86  heap_manager_$get_heap_area


Function: This entry point returns a pointer to the heap area
for the specified level.  The area is max_segsize - 50 words.
If the heap level specified does not exist an error of
error_table_$no_heap_defined is returned.


Syntax:
declare heap_manager_$get_heap_area entry (pointer, fixed
  bin(17), pointer, fixed bin(35));
call heap_manager_$get_heap_area (stack_header_ptr, exe_level,
  heap_area_ptr, code);


Arguments:
exe_level
   is the execution level of the heap area required. If a -1 is
   passed then the current execution level is used.  (Input)
stack_header_ptr
   is a pointer to the stack header.  This can be obtained via
   the PL/1 builtin stackbaseptr().  (Input)
heap_area_ptr
   is pointer to the heap area for the passed level. (Output)
code
   is a standard status code.  (Output)



                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
