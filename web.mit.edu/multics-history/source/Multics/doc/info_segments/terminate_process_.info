03/31/83  terminate_process_


Entry points in terminate_process_:
   (List is generated by the help command)


:Entry: terminate_process_: 02/15/83  terminate_process_


Function: This procedure causes the process in which it is called to
be terminated.  The arguments determine the exact nature of the
termination.


Syntax:
declare terminate_process_ entry (char(*), ptr);
call terminate_process_ (action, info_ptr);


Arguments:
action
   specifies one of four general actions to be taken upon process
   termination.  (Input) The permissible values are logout, new_proc,
   fatal_error, or init_error (see "Notes").
info_ptr
   points to more specific information about the action to be taken at
   termination.  (Input) The structure pointed to by info_ptr depends
   upon action (see "Notes").


Notes:
If action is logout then the user's process is logged out.  The
info_ptr points to:
   dcl 1 logout_info    aligned,
         2 version      fixed bin,
         2 hold         bit(1) unaligned,
         2 brief        bit(1) unaligned,
         2 pad          bit(34) unaligned,


   Structure elements:
   version
      must be 0.
   hold
      must be "1"b if the terminal associated with this process is not
      to be hung up, so that another user may log in.
   brief
      must be "1"b if the logout message is to be suppressed.
   pad
      must be "0"b.


If action is new_proc, then the user's current process is logged out
and a new process is created.  The info_ptr points to:
   dcl 1 new_proc_info              aligned,
         2 version                  fixed bin,
         2 authorization_option     bit(1) unaligned,
         2 pad                      bit(35) unaligned,
         2 new_authorization        bit(72) aligned;


   Structure elements:
   version
      must be 1.
   authorization_option
      must be 1 if new_authorization is to be used.
   pad
      must be 0.
   new_authorization
      is the authorization of the new process.


If action is fatal_error, then the user's current process is terminated
due to an unrecoverable error.  A fatal error message is printed on the
terminal and a new process is created.  The info_ptr points to:
   dcl 1 fatal_error_info     aligned,
         2 version            fixed bin,
         2 status_code        fixed bin(35);


   Structure elements:
   version
      must be 0.
   status_code
      is a standard system status code (in error_table_) indicating the
      nature of the fatal error, the corresponding error message will
      be printed on the user's console.

If action is init_error, then the user's process is logged out and a
message indicating that his process could not be initialized is
printed.  The info_ptr points to:

   dcl 1 init_error_info     aligned,
         2 version           fixed bin,
         2 status_code       fixed bin(35);


   Structure elements:
   version
      must be 0.
   status_code
      is a standard Multics code indicating the nature of the error.


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
