03/05/85  decode_descriptor_


The decode_descriptor_ subroutine extracts information from argument
descriptors.  It should be called by any procedure wishing to handle
variable length or variable type argument lists.  It processes the
descriptor format used by PL/I, BASIC, COBOL, FORTRAN, and Pascal.


Entry points in decode_descriptor_:
   (List is generated by the help command)


:Entry:  decode_descriptor_:  03/05/85  decode_descriptor_


Function:
extracts information from argument descriptors.


Syntax:
declare decode_descriptor_ entry (ptr, fixed bin, fixed bin,
     bit(1) aligned, fixed bin, fixed bin(24), fixed bin);
call decode_descriptor_ (ptr, n, type, packed, ndims, size, scale);


Arguments:
ptr
   points either directly at the descriptor to be decoded or at the
   argument list in which the descriptor appears.  (Input)
n
   controls which descriptor is decoded.  If n is 0, ptr points at the
   descriptor to be decoded; otherwise, ptr points at the argument list
   header and the nth descriptor is decoded.  (Input)
type
   is the data type specified by the descriptor.  (Output)
   -1 is returned if descriptors are not present in the argument list,
      if the nth descriptor does not exist, or if the descriptor is in
      an old format


packed
   describes how the data is stored.  (Output)
   "1"b   data is packed
   "0"b   data is not packed
ndims
   indicates the number of dimensions of an array.  (Output)

   N   descriptor is an array of N dimensions
   0   descriptor is a scalar
size
   is the arithmetic precision, string size, or number of structure
   elements.  (Output)
scale
   is the scale of an arithmetic value.  (Output)


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
