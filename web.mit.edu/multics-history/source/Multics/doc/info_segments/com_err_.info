02/13/84  com_err_

The com_err_ subroutine is the principal subroutine used by commands
for printing error messages.  It is usually called with a nonzero
status code to report an unusual status condition.  It can also be
called with a code of 0 to report an error which does not have a status
code associated with it.  Status codes are described in the
Programmer's Reference Manual.

See also the active_fnc_err_ subroutine which should be used by active
functions for printing error messages.


Entry points in com_err_:
   (List is generated by the help command)


:Entry: com_err_: 02/13/84  com_err_


Function: formats an error message and then signals the command_error
condition.  The default handler for this condition simply returns
control to the com_err_ subroutine, which then writes the error
message on the error_output I/O switch.


Syntax:
declare com_err_ entry options (variable);
call com_err_ (code, caller, control_string, arg1, ..., argN);


Arguments:
code
   is a standard status code, which normally is fixed binary (35), but
   can be any computational data type.  (Input) If it is not already
   fixed binary (35), it will be converted to fixed binary (35).
caller
   is the name (char(*)) of the procedure calling the com_err_
   subroutine.  (Input) It can be either varying or nonvarying.


control_string
   is an ioa_ subroutine control string (char(*)).  (Input) This
   argument is optional (see "Notes" below).
argI
   are ioa_ subroutine arguments to be substituted into the
   control_string argument.  (Input) These arguments are optional.
   They can only be used, however, if the control_string argument is
   given first (see "Notes" below).


Notes:  The error message prepared by the com_err_ subroutine has the
following format:

        caller:  system_message user_message

caller
   is the name of the program detecting the error.
system_message
   is a standard message from the error table corresponding to the
   value of code.  If code is equal to 0, no system_message is printed.
user_message
   is constructed by the ioa_ subroutine from the control_string and
   argI arguments.  If the control_string and argI arguments are
   omitted, no user_message is printed.


If code is error_table_$active_function, com_err_ will print a slightly
different message and signal the active_function_error condition to
prevent the command from being restarted.  The message printed will be:

   caller:  This command cannot be invoked as an active function.
            user_message
   error:   Attempt to invoke command caller as an active function.


If the com_err_ subroutine is passed a nonzero code that does not
correspond to a standard format error table entry, the system_message
is of the form:

        Code ddd

where ddd is the decimal representation of code.  The argument caller
must not be null or blank; if it is, the handlers for command_error
cannot identify the signalling procedure.


:Entry:  suppress_name:  02/13/84 com_err_$suppress_name


Function:  This entry point should be used when the caller name and
colon are not wanted.  The caller name is still passed to the
command_error condition handler.  Otherwise, this entry point is the
same as the com_err_ entry point.


Syntax:
declare com_err_$suppress_name entry options (variable);
call com_err_$suppress_name (code, caller, control_string,
     arg1, ..., argN);


Arguments:
code
   is a standard status code, which normally is fixed binary (35), but
   can be any computational data type.  (Input) If it is not already
   fixed binary (35), it will be converted to fixed binary (35).
caller
   is the name (char(*)) of the procedure calling the com_err_
   subroutine.  (Input) It can be either varying or nonvarying.


control_string
   is an ioa_ subroutine control string (char(*)).  (Input) This
   argument is optional.
argI
   are ioa_ subroutine arguments to be substituted into the
   control_string argument.  (Input) These arguments are optional.
   They can only be used, however, if the control_string argument is
   given first.


Notes:  See "Notes" under the com_err_ entry point.


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
