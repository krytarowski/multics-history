07/25/86  term_

The term_ subroutine performs the same operation as certain hcs_ entry
points; however, the term_ entry points also unsnap links and deal with
object MSFs correctly.  The term_ entry points and corresponding hcs_
entry points are:

    term_                  hcs_$terminate_file
    term_$seg_ptr          hcs_$terminate_seg
    term_$single_refname   hcs_$terminate_name

Use of the term_ subroutine is preferred to the corresponding hcs_
entry points since term_ unsnaps links in addition to terminating the
segment.  The term_ subroutine also deals with terminating portions
of object MSFs by terminating all of the components to prevent them
from becoming inconsistent.


Entry points in term_:
   (List is generated by the help command)


:Entry: term_: 07/25/86  term_


Function: terminates the reference names of a segment or MSF and
removes the file from the caller's address space and the appropriate
combined linkage segment.  It also unsnaps any links in the combined
linkage segments that contain references to the file.


Syntax:
declare term_ entry (char(*), char(*), fixed bin(35));
call term_ (dir_path, entryname, code);


Arguments:
dir_path
   is the pathname of the containing directory.  (Input)
entryname
   is the entryname of the segment or MSF.  (Input)
code
   is a standard status code.  (Output)


:Entry:  refname:  07/25/86 term_$refname


Function:  This entry point performs the same function as the term_
entry point given a reference name rather than a pathname.


Syntax:
declare term_$refname entry (char(*), fixed bin(35));
call term_$refname (ref_name, code);


Arguments:
ref_name
   is the reference name of the segment or MSF.  (Input)
code
   is a standard status code.  (Output)


:Entry:  seg_ptr:  07/25/86 term_$seg_ptr


Function:  This entry point performs the same function as the term_
entry point given a pointer to the segment.  If the segment pointed
to is a component of an object MSF, all of the components are
terminated.


Syntax:
declare term_$seg_ptr entry (ptr, fixed bin(35));
call term_$seg_ptr (seg_ptr, code);


Arguments:
seg_ptr
   is a pointer to the segment.  (Input)
code
   is a standard status code.  (Output)


:Entry:  single_refname:  07/25/86 term_$single_refname


Function:  This entry point allows termination of a single reference
name.  The segment or MSF is not made unknown unless the specified
reference name was the only reference name initiated for the file.


Syntax:
declare term_$single_refname entry (char(*), fixed bin(35));
call term_$single_refname (ref_name, code);


Arguments:
ref_name
   is a reference name of the file.  (Input)
code
   is a standard status code.  (Output)


:Entry:  unsnap:  07/25/86 term_$unsnap


Function:  This entry point unsnaps links to the segment or MSF but
does not terminate any reference names or make the file unknown.


Syntax:
declare term_$unsnap entry (ptr, fixed bin(35));
call term_$unsnap (seg_ptr, code);


Arguments:
seg_ptr
   is a pointer to the file.  (Input)
code
   is a standard status code.  (Output)


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
