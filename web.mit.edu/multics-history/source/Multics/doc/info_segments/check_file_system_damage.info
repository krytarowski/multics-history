09/18/85  check_file_system_damage, cfsd

Syntax as a command:  cfsd {path} {-control_args}


Function: finds damaged segments and connection failures.


Arguments:
path
   is a pathname specifying what is to be checked.  It can be a star
   name, an absolute or relative pathname, or -working_dir (-wd).  If
   you provide -subtree, path cannot be a star name (i.e., it must be a
   directory). If this argument is not given, then the -pathname
   control argument must be specified.


Control arguments:
-brief, -bf
   suppresses error messages about incorrect access to directories and
   no star name matches.  (Default: to print these messages)
-call STR
   executes "STR path damaged" for each damaged segment and "STR path
   connection_failure" for each connection failure.  STR is a command
   to be executed for each damaged segment.  The default when you don't
   give -call is to print an error message for each damaged segment and
   each connection failure.
-depth N, -dh N
   looks only N directories down; if you supply it, -subtree is
   implied.  (Default: to search downwards in all directories that are
   eligible for searching)


-no_multisegment_file, -no_msf
   does not check components of MSFs.
-multisegment_file, -msf
   checks components of MSFs.  (Default)
-pathname path, -pn path
   specifies that the next argument is to be used as a pathname, rather
   than as a control argument.
-subtree, -subt
   checks all segments in, and all directories below, the specified
   directory.


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
