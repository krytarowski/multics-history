03/05/85  create_data_segment_


The create_data_segment_ subroutine is used in conjunction with the
create_data_segment command to create a standard object segment from
PL/I data structures passed to it as parameters.  The
create_data_segment_ subroutine is called from a PL/I program that has
defined in it either one or two specific PL/I structures, whose
contents are to be placed in the text and/or static sections of the
object segment to be created.  The level-2 structure component names
become entry point names for the object segment, i.e., names that can
be found by links so that other programs may reference the data by
name.


Entry points in create_data_segment_:
   (List is generated by the help command)


:Entry:  create_data_segment_:  03/05/85  create_data_segment_


Function:
is used in conjunction with the create_data_segment command to create
a standard object segment from PL/I data structures passed to it as
parameters.


Syntax:
declare create_data_segment_ entry (ptr, fixed bin(35));
call create_data_segment_ (cds_arg_ptr, code);


Arguments:
cds_arg_ptr
   is a pointer to a structure (see "Structure" below) containing
   information to be passed to the create_data_segment_ subroutine,
   specifying the structures to be used to create the object segment.
   (Input)
code
   is a standard status code.  (Output) It can be
   error_table_$translation_failed if no object segment is created.


Notes:  The brief translator name placed in object segments produced by
the create_data_segment_ subroutine is cds.

If the defs_in_link switch is supplied as on ("1"b), then a
nonrelocatable, nonstandard object segment is produced.

All text and static-resident information created is supplied with
absolute relocation.  Hence, one must be wary of threads and pointers
in one's structures, as they are not relocated if the object segment is
bound.

The program that calls the create_data_segment_ subroutine must be in
the PL/I language.  It must be compiled with the -table control
argument.  The create_data_segment command provides for this.


It is essential that structures specified by cds_args.sections be at
least referenced in the calling program, or they are not described in
the runtime symbol table.

The create_data_segment_ program, in its capacity as a translator,
issues diagnostic messages on the terminal, as opposed to returning
detailed status codes.

All regions of the text and/or static sections not explicitly set by
the calling program, whether via "init" attributes or explicit code,
may not be assumed to contain zero or any other quantity.


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
