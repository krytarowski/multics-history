05/16/86  find_bit_

This subroutine uses the EIS test character and translate (TCT)
instruction to efficiently perform common bit string search operations.
Entrypoints are provided to return the bit index of the first or last
occurrence of an on bit ("1"b) or off bit ("0"b) in a bit string.


This subroutine operates by dividing the bit string into three search
regions:  a group of 9-bit bytes aligned on a byte boundary; bits
preceding these bytes; and bits following the bytes.  Bits preceding or
following the bytes are examined bit-by-bit, using a separate compare
bit (CMPB) instruction for each bit.  The bytes are examined as a
single character string, using one TCT instruction to test all bytes
until a byte containing an on or off bit is found.  For bit strings
longer than 36 bits, this subroutine is significantly faster than the
code generated by the PL/I index builtin function, which test all bits
on a bit-by-bit basis.


Entry points in find_bit_:
   (List is generated by the help command)


:Entry:  first_on:  05/16/86 find_bit_$first_on


Function:  This entrypoint returns the index (bit position) of the
first (leftmost) bit which is on ("1"b) in a bit string.


Syntax:
declare find_bit_$first_on entry (bit(*)) returns (fixed bin(24))
     reducible;

index = find_bit_$first_on (bit_string);


Arguments:
bit_string
   is the bit string to be examined.  (In)
index
   is the index of the first "1"b bit within the bit string.  If no
   "1"b bits are found, then 0 is returned.  (Out)


:Entry:  first_off:  05/16/86 find_bit_$first_off


Function:  This entrypoint returns the index (bit position) of the
first (leftmost) bit which is off ("0"b) in a bit string.


Syntax:
declare find_bit_$first_off entry (bit(*)) returns (fixed bin(24))
     reducible;

index = find_bit_$first_off (bit_string);


Arguments:
bit_string
   is the bit string to be examined.  (In)
index
   is the index of the first "0"b bit within the bit string.  If no
   "0"b bits are found, then 0 is returned.  (Out)


:Entry:  last_on:  05/16/86 find_bit_$last_on


Function:  This entrypoint returns the index (bit position) of the last
(rightmost) bit which is on ("1"b) in a bit string.


Syntax:
declare find_bit_$last_on entry (bit(*)) returns (fixed bin(24))
     reducible;

index = find_bit_$last_on (bit_string);


Arguments:
bit_string
   is the bit string to be examined.  (In)
index
   is the index of the last "1"b bit within the bit string.  If no "1"b
   bits are found, then 0 is returned.  (Out)


:Entry:  last_off:  05/16/86 find_bit_$last_off


Function:  This entrypoint returns the index (bit position) of the last
(rightmost) bit which is off ("0"b) in a bit string.


Syntax:
declare find_bit_$last_off entry (bit(*)) returns (fixed bin(24))
     reducible;

index = find_bit_$last_off (bit_string);


Arguments:
bit_string
   is the bit string to be examined.  (In)
index
   is the index of the last "0"b bit within the bit string.  If no "0"b
   bits are found, then 0 is returned.  (Out)


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
