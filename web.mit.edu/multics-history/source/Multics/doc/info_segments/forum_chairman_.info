02/22/84  forum_chairman_

The forum_chairman_ subroutine provides entries to perform chairman
duties on Forum meetings.


Entry points in forum_chairman_:
   (List is generated by the help command)


:Entry:  change_chairman:  02/22/84 forum_chairman_$change_chairman


Function:  This entry is used to change the chairman of a Forum
meeting.


Syntax:
declare forum_chairman_$change_chairman entry (char(*), char(*),
     char(*), fixed bin(35));
call forum_chairman_$change_chairman (dirname, entryname, chairman,
     status);


Arguments:
dirname
   is the pathname of the directory containing the meeting.  (Input)
entryname
   is the name of the meeting.  The ".control" suffix is required.
   (Input)
chairman
   is the name of the new chairman of the meeting, in the form
   Person.Project.  The new chairman must already be a participant.
   (Input)


status
   is a standard status code.  (Output) It can be:
   forum_error_table_$chairman_only
      The caller is not the current chairman.
   forum_error_table_$no_such_user
      The supplied new chairman is not a participant.


:Entry:  change_chairman_idx:
02/22/84 forum_chairman_$change_chairman_idx


Function:  This entry changes the chairman of a Forum meeting.  It is
the same as the change_chairman entry point except that a forum_idx is
used to identify the meeting instead of a pathname.


Syntax:
declare forum_chairman_$change_chairman_idx entry (fixed bin, char(*),
     fixed bin(35));
call forum_chairman_$change_chairman_idx (forum_idx, chairman, status);


Arguments:
forum_idx
   identifies a meeting opened by forum_$open_forum.  (Input)
chairman
   is the name of the new chairman of the meeting, in the form
   Person.Project.  The new chairman must already be a participant.
   (Input)
status
   is a standard status code.  (Output) It can be:
   forum_error_table_$chairman_only
      The caller is not the current chairman.
   forum_error_table_$no_such_user
      The supplied new chairman is not a participant.


:Entry:  chname_forum:  02/22/84 forum_chairman_$chname_forum


Function:  This entry is used to change the names of Forum meetings.


Syntax:
declare forum_chairman_$chname_forum entry (char(*), char(*), char(*),
     char(*), fixed bin(35));
call forum_chairman_$chname_forum (dirname, entryname, old_name,
     new_name, status);


Arguments:
dirname
   is the pathname of the directory containing the meeting.  (Input)
entryname
   is the name of the meeting.  The ".control" suffix is required.
   (Input)
old_name
   is a name to be removed from the meeting, or blank if no name is to
   be removed.  If non-blank, the ".control" suffix is required.
   (Input)
new_name
   is a name to be added to the meeting, or blank if no name is to be
   added.  If non-blank, the ".control" suffix is required.  (Input)
status
   is a standard status code.  (Output)


:Entry:  chname_forum_idx:  02/22/84 forum_chairman_$chname_forum_idx


Function:  This entry is used to change the names of Forum meetings.
It is the same as the chname_forum entry point except that a forum_idx
is used to identify the meeting instead of a pathname.


Syntax:
declare forum_chairman_$chname_forum_idx entry (fixed bin, char(*),
     char(*), fixed bin(35));
call forum_chairman_$chname_forum_idx (forum_idx, old_name, new_name,
     status);


Arguments:
forum_idx
   identifies a meeting opened by forum_$open_forum.  (Input)
old_name
   is a name to be removed from the meeting, or blank if no name is to
   be removed.  If non-blank, the ".control" suffix is required.
   (Input)
new_name
   is a name to be added to the meeting, or blank if no name is to be
   added.  If non-blank, the ".control" suffix is required.  (Input)
status
   is a standard status code.  (Output)


:Entry:  create_forum:  02/22/84 forum_chairman_$create_forum


Function:  Creates a Forum meeting with the user as chairman.


Syntax:
declare forum_chairman_$create_forum entry (char(*), char(*),
     fixed bin(35));
call forum_chairman_$create_forum (dirname, entryname, status);


Arguments:
dirname
   is the pathname of the directory containing the meeting.  (Input)
entryname
   is the name of the meeting.  The ".control" suffix is required.
   (Input)
status
   is a standard status code.


Access required:
The caller must have modify permission on the containing directory.


:Entry:  expunge:  02/22/84 forum_chairman_$expunge


Function:  This entry is used to physically remove deleted participant
records and deleted transactions from a Forum meeting.  This results in
reclaimed storage space.


Syntax:
declare forum_chairman_$expunge entry (fixed bin, bit (36) aligned,
     fixed bin, fixed bin, fixed bin, fixed bin, fixed bin(35));
call forum_chairman_$expunge (forum_idx, switches, users_deleted,
     trans_deleted, users_damaged, trans_damaged, status);


Arguments:
forum_idx
   identifies a meeting opened by forum_$open_forum.  (Input)
switches
   is a word of switches as follows:  (Input)
   transactions
      if set, deleted transactions should be expunged.
   users
      if set, deleted participant records should be expunged.
users_deleted
   is the number of participant records which were expunged.  (Output)
trans_deleted
   is the number of transactions which were expunged.  (Output)


users_damaged
   is the number of participant records which were expunged because
   they were inconsistent.  (Output)
trans_damaged
   is the number of transactions which were expunged because they were
   inconsistent.  (Output)
status
   is a standard status code.  (Output)


:Entry:  set_forum_acl:  02/22/84 forum_chairman_$set_forum_acl


Function:  This entry is used to add or change an ACL term on a Forum
meeting.  ACL terms can only be specified for Person_id.* or
*.Project_id, terms of the form Person_id.Project_id are not allowed.


Syntax:
declare forum_chairman_$set_forum_acl entry (fixed bin, char(*),
     bit(1) aligned, bit(1) aligned, bit(1) aligned, fixed bin(35));
call forum_chairman_$set_forum_acl (forum_idx, access_name, user_sw,
     set_sw, write_sw, status);


Arguments:
forum_idx
   identifies a meeting opened by forum_$open_forum.  (Input)
access_name
   The Person_id or Project_id whose ACL is to be added or deleted.
   Access_name can not contain a ".".  (Input)
user_sw
   This switch should be on if access_name is a Person_id, and off if
   it is a Project_id.  (Input)
set_sw
   This switch should on if access is to be added, and off if it is to
   be deleted.  (Input)


write_sw
   This switch should on if write access is to be added, and off if
   only read access is to be added.  This switch is ignored if set_sw
   is off.  (Input)
status
   is a standard status code.  (Output)


Access required:
The caller must have modify permission on the containing directory.


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
