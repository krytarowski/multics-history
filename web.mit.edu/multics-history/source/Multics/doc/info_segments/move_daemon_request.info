02/15/85  move_daemon_request, mdr

Syntax as a command:  mdr request_identifiers {-control_args}


Function: moves a request from one I/O daemon queue to another.  The
move can be within the same request type or from one request type to
another.  The request is always placed at the end of the target queue.


Arguments:
request_identifiers
   Can be specified in one of the following forms:
   path
      identifies a request to be moved by the full or relative pathname
      of the input data segment.  The star convention is allowed.
   -entry STR, -et STR
      identifies a request to be moved by STR, the entryname portion of
      the input data segment pathname.  The star convention is allowed.
   -id ID
      identifies one or more requests to be moved by request
      identifier.  This identifier may be used to further define any
      path or -entry identifier (see "Notes").


Control arguments:
-all, -a
   searches all queues for the requests to be moved.  The target queue
   is not searched by -all if the source and target request types are
   identical.  This control argument is incompatible with -queue.
-brief, -bf
   suppresses messages telling the user that a particular request
   identifier was not found or that requests were moved when using star
   names or the -all control argument.
-queue N, -q N
   specifies that queue N for the given request type contains the
   request to be moved, where N is an integer specifying the number for
   the queue.  If you omit -queue, all the queues are searched.


-request_type STR, -rqt STR
   specifies that the request moved is found in the queue(s) for the
   request type identified by STR.  If this control argument is not
   specified, the default request type is "printer".  Request types can
   be listed by the print_request_types command.
-to_queue N, -tq N
   specifies which queue to move the request to.  If not given, the
   default queue of the target request type is used.
-to_request_type STR, -to_rqt STR
   specifies that the request should be moved to request type STR.  If
   this control argument is not specified, the original request type is
   used.  The target request types must be of the same generic type as
   the original request type.


-user User_id
   specifies the name of the submitter of the requests to be moved.
   The default is to move only requests entered by the user executing
   the command.  The User_id can be Person_id.Project_id, Person_id, or
   .Project_id.  This control argument is primarily for the operator
   and administrators.  Both r and d extended access to the queue are
   required.  This control argument causes the command to use
   privileged message segment primitives that preserve the original
   identity of the submitter.  If the process has access isolation
   mechanism (AIM) ring one privilege, the AIM attributes of the
   original submitter are preserved.  Otherwise, the AIM attributes of
   the current process are used.


Access required: The user must have o extended access to the queue
from which the request is being taken, and a access to the queue to
which the request is being moved.  The user must have r and d extended
access to move a request owned by another user (see the description of
the -user control argument above).


Notes: If any path or -entry STR request identifiers are given, only
one -id ID request identifier will be accepted and it must match any
requests selected by path or entryname.

Multiple -id ID identifiers can be specified in a single command
invocation only if no path or entry request identifiers are given.

When star names are not used and a single request identifier matches
more than one request in the queue(s) searched, none of the requests
are moved.  However, a message is printed telling how many matching
requests are found.

If the request is already running, it is not moved and a message is
printed to the user.


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
