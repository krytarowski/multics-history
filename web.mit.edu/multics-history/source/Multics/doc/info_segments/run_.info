02/08/84  run_

The run_ subroutine manages the environment for a run unit and invokes
the main program of a run unit.  See the run command for an
explanation of run units.


Entry points in run_:
   (List is generated by the help command)


:Entry: run_: 02/08/84  run_

Function: This entry sets up the run unit environment, invokes the
main program, and restores the environment when the run ends.


Syntax:
declare run_ entry (entry, ptr, ptr, fixed bin(35));
call run_ (main_entry, arglist_ptr, run_cs_ptr, code);


Arguments:
main_entry
   is the entry point to be called as the main program of the run unit.
   (Input)
arglist_ptr
   is a pointer to the argument list for the main program.  (Input)
run_cs_ptr
   is a pointer to the structure which is declared in
   run_control_structure.incl.pl1.  (Input)
code
   is a standard status code.  (Output)


:Entry:  environment_info:  02/08/84 run_$environment_info


Function:  This entry enables the symbolic debugging tools to obtain
the saved stack header information used by a given stack frame.


Syntax:
declare run_$environment_info entry (ptr, ptr, fixed bin(35));
call run_$environment_info (stack_frame_ptr, info_ptr, code);


Arguments:
stack_frame_ptr
   is a pointer to an active stack frame on the current stack.  (Input)
info_ptr
   is a pointer to the env_ptrs structure declared in
   env_ptrs.incl.pl1.  (Input)
code
   is a standard system status code.  (Output)


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
