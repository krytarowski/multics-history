03/19/85  ft_window_


This is the basic video interface subroutine to be used by FORTRAN to
create/destroy/change windows.  (This subroutine should not be called
if usage_mode = 0 (see ft_menu_$init2)).  Its facilities are available
through the following entry points.


Entry points in ft_window_:
   (List is generated by the help command)


:Entry:  change:  03/19/85 ft_window_$change


Function:  This entry point is used to change the size of an existing
window.  The size of a window can always be "shrunk", however it can be
increased only it does not overlap with another defined window.  (This
entry point should not be called if usage_mode = 0 (see
ft_menu_$init2).)


Syntax:
   declarations:
     integer  window_id
     integer  first_line
     integer  height
     integer  code
   call ft_window_$change (window_id, first_line, heigth, code)



Arguments:
window_id
   window identifier returned by ft_window_$create (or by ft_menu_$init
   in the case of the user i/o window).  (Input)
first_line
   new first line number for the window being changed.  (Input)
   Positive integer.
height
   new height for the window being changed.  (Input) Positive integer.
code
   return code.  (Output)


:Entry:  clear_window:  03/19/85 ft_window_$clear_window


Function:  Used to clear a specified window.


Syntax:
   declarations:
     integer       window_id
     integer       code
   call ft_window_$clear_window (window_id, code)



Arguments:
window_id
   The window identifier (returned by ft_window_$create) of the window
   to be cleared.  (Input)
code
   return code.  (Output)


:Entry:  create:  03/19/85 ft_window_$create


Function:  Used to create a new window on the terminal screen.  (This
entry point should not be called if usage_mode = 0.)  (see
ft_menu_$init2)


Syntax:
   declarations:
     character*32  switch_name
     integer       window_id
     integer       first_line
     integer       height
     integer       code
   call ft_window_$create (first_line, height, switch_name,
          window_id, code)


Arguments:
first_line
   is the line number where the window is to start.  (Input)
height
   the number of lines used by the window, i.e., its height.  (Input)
switch_name
   the  name  that  the caller  wishes  to associate  with  the switch.
   (Input)  (The caller  may use the  switch name, for  example, in the
   FORTRAN "open" statement.)
window_id
   the returned id of the window just created.  (Output) It must not be
   altered in any way by the application program.
code
   return code.  (Output)


:Entry:  destroy:  03/19/85 ft_window_$destroy


Function:  Used  to destroy a  previously created window.   (This entry
point should not be called if usage_mode = 0 (see ft_menu_$init2).)


Syntax:
   declarations:
     integer  window_id
     integer  code
   call ft_window_$destroy (window_id, code)



Arguments:
window_id
   window    identifier    (returned    by    the   ft_window_$create).
   (Input/Output) It is reset to an illegal value by this call.
code
   return code.  (Output)


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
