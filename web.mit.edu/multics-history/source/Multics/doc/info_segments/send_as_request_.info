03/21/85  send_as_request_


The send_as_request_ subroutine contains entry points that send
messages to the system Answer Service Request server.


Entry points in send_as_request_:
   (List is generated by the help command)


:Entry:  block:  03/21/85 send_as_request_$block


Function:  sends an as_request, and blocks to await the system's reply.


Syntax:
declare send_as_request_$block entry (ptr, bit(72) aligned, fixed
     bin(35));
call send_as_request_$block (as_request_ptr, as_request_reply, code);


Arguments:
as_request_ptr
   is a pointer to standard as_request structure.  (Input)
   as_request_structures begin with a header declared in
   as_request_header.incl.pl1.  Declarations for most as request info
   structures are found in as_requests.incl.pl1.  It is not recommended
   that any application code send as_requests.  Subroutine interfaces
   are available for all the supported as_request facilities.
as_request_reply
   is the event message returned by the system in reply to the request.
   (Output)
code
   is a standard system status code.  (Output)


:Entry:  no_block:  03/21/85 send_as_request_$no_block


Function:  This entry point sends an as request message to the system
as request server, and does not block to await a reply.


Syntax:
declare send_as_request_$no_block entry (ptr, fixed bin (35));
call send_as_request_$no_block (as_request_ptr, code);


Arguments:
as_request_ptr
   is a pointer to standard as_request structure.  (Input)
   as_request_structures begin with a header declared in
   as_request_header.incl.pl1.  Declarations for most as request info
   structures are found in as_requests.incl.pl1.  It is not recommended
   that any application code send as_requests.  Subroutine interfaces
   are available for all the supported as_request facilities.
code
   is a standard system status code.  (Output)


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
