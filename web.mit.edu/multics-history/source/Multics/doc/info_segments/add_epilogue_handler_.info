02/13/84  add_epilogue_handler_


Entry points in add_epilogue_handler_:
   (List is generated by the help command)


:Entry: add_epilogue_handler_: 02/13/84  add_epilogue_handler_

Function: adds an entry to the list of those handlers called when a
process or run unit is terminated.  A program established as an
epilogue handler during a run unit is called when the run unit is
terminated.  If the process continues after the run unit is
terminated, the handler is discarded from the list of those called
when the process is terminated.  Hence, epilogue handlers established
during a run unit are not retained beyond the life of the run unit.


Syntax:
declare add_epilogue_handler_ entry (entry, fixed bin (35));
call add_epilogue_handler_ (ev, code);


Arguments:
ev
   is an entry value to be placed on the list of such values to be
   called when the run unit or process is cleaned up.  (Input)
code
   is a standard status code.  (Output)


Notes: This subroutine effectively manages two lists of epilogue
handlers: those for the run unit, if a run unit is active, and those
for the process.  While a run unit is active, it is not possible to
add entries to the list for the process.  There is no way to establish
a process epilogue handler while a run unit is active.  The caller of
execute_epilogue_ (logout, new_proc, etc.) must indicate whether all
or just the run unit handlers are to be invoked.


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
