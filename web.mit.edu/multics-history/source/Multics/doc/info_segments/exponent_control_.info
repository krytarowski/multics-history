
02/28/80	exponent_control_

Function: Controls the system's action in the event of computational
overflows and underflows.


Notes for exponent_control_: By default the system signals a fault
condition on computational overflows and underflows.  If this routine
is used to to restart overflows, the default is to supply a result of
the largest possible positive number for positive overflows and its
negative for negative overflows.


Entry points in exponent_control_:


:Entry:restart_overflow:  02/28/80  exponent_control_$restart_overflow

Syntax:
call exponent_control_$restart_overflow (code);
dcl exponent_control_$restart_overflow entry (fixed bin (35));


Notes: This entrypoint instructs the system to restart overflowing
computations.  The value returned by the overflowing computations
will be the largest representable number for positive overflows, and
the negative of that number for negative overflows.


:Entry:restart_underflow:  02/28/80  exponent_control_$restart_underflow

Syntax:
call exponent_control_$restart_underflow (code);
dcl exponent_control_$restart_underflow entry (fixed bin (35));


Notes: This entrypoint instructs the system to restart underflowing
computations.  Zero is returned for the result.


:Entry:restart_overflow_value:  02/28/80  exponent_control_$restart_overflow_value

Syntax:
call exponent_control_$restart_overflow_value (amax_value, code);
dcl exponent_control_$restart_overflow_value entry (float bin (63),
    fixed bin (35));


Notes: This entrypoint is identical to restart_overflow except that
overflowing computations are restarted with the specified values.
The negative of the value is is used for overflows in a negative
direction.


:Entry:fault_underflow:  02/28/80  exponent_control_$fault_underflow

Syntax:
call exponent_control_$fault_underflow (code);
dcl exponent_control_$fault_underflow entry (fixed bin (35));


Notes:  This entrypoint instructs the system to signal fault conditions for
computational underflows.


:Entry:fault_overflow:  02/28/80  exponent_control_$fault_overflow

Syntax:
call exponent_control_$fault_overflow (code);
dcl exponent_control_$fault_overflow entry (fixed bin (35));


Notes: This entrypoint instructs the system to signal fault
conditions for computational overflows.





                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
