02/06/84  component_info_

This subroutine returns information about a component of a bound
segment similar to that returned by object_info_.  The component may be
specified either by name or by offset.


Entry points in component_info_:
   (List is generated by the help command)


:Entry:  name:  02/06/84 component_info_$name


Function:  This entry point specifies the component by name.


Syntax:
declare component_info_$name entry (ptr, char(32) aligned, ptr,
     fixed bin(35));
call component_info_$name (seg_ptr, comp_name, arg_ptr, code);


Arguments:
seg_ptr
   is a pointer to the bound segment.
comp_name
   is the name of the component.
arg_ptr
   is a pointer to a structure to be filled in (a declaration of which
   is found in component_info.incl.pl1).  (Input)
code
   is a standard status code.  (Output)


:Entry:  offset:  02/06/84 component_info_$offset


Function:  This entry point specifies the component by its offset.


Syntax:
declare component_info_$offset entry (ptr, fixed bin(18), ptr,
     fixed bin(35));
call component_info_$offset (seg_ptr, offset, arg_ptr, code);


Arguments:
seg_ptr
   is a pointer to the bound segment.  (Input)
offset
   is an offset into the bound segment corresponding to the text,
   internal static or symbol section of some component.  (Input)
arg_ptr
   is a pointer to a structure to be filled in (a declaration of which
   is found in component_info.incl.pl1).  (Input)
code
   is a standard status code.  (Output)


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
