02/19/85  check_gate_access_


This subroutine will allow a caller to determine whether a user has
access to a gate before trying to call it.  It will differentiate
between not finding the gate and not having access.


Entry points in check_gate_access_:
   (List is generated by the help command)


:Entry:  check_gate_access_:  02/19/85 check_gate_access_


Function:
allows a caller to determine whether a user has access to a gate
before trying to call it.


Syntax:
dcl check_gate_access_ entry (char(*), ptr, fixed bin (35));
call check_gate_access_ (gate_name, ref_ptr, code);


Arguments:
gate_name
   is the name of the gate.  (e.g., "phcs_")
ref_ptr
   is a pointer used to determine the desired referencing directory.
   (Input) It can be null (), in which case the referencing_dir search
   rule is not used, or can be a pointer to a procedure, usually the
   caller of check_gate_access_, whose containing directory will be
   used as the referencing directory.
code
   is a standard system status code.  (Output) It's value will be zero
   if the gate is located using the search rules of the current ring
   and if the access to the gate includes execute access.  If the gate
   cannot be located, the error code returned is error_table_$noentry.
   If the gate is located, but execute access is lacking, then
   error_table_$moderr is returned.


Notes:  Programs which can take alternate paths based on the access of
lack of access to a gate should use this subroutine rather than trying
to reference the gate explicitly and generating an access violation
audit message in the process.


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
