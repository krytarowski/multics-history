09/30/85  process_list, pls

Syntax as a command:  pls list_path {form_path} {-control_args}


Function: produces a document from all or selected records in a lister
file.  The format of the document is defined in a listform file (see
listform_segment.gi).  You can print the document on your terminal or
save it in a segment.


Arguments:
list_path
   is the pathname of the lister file to be processed.  The suffix
   lister must be the last component of the lister file name; if you
   don't give it, it is assumed.
form_path
   is the pathname of the listform file that defines the format of the
   document.  If it does not have the suffix listform, one is assumed.
   If you don't give it, the listform file in your working directory
   that has the same entryname as list_path is used, with the suffix
   lister changed to listform.  You can use the archive component
   convention.


Control arguments:
-arguments STR, -ag STR
   indicates that the listform segment requires arguments.  If present,
   follow it by at least one argument.  All arguments following it on
   the command line are taken as arguments to the listform segment;
   thus, make it the last control argument on the command line.
-brief_errors, -bfe
   suppresses warnings about missing or extra arguments for -arguments
   or when you select no records.
-extend, -ex
   specifies that the document produced by pls be appended to the
   segment indicated by path (also give -of).  (Default: to replace
   path completely)


-output_file {path}, -of {path}
   specifies that the document produced by pls be saved in the segment
   given by path.  If you don't supply path, the output segment is
   placed in your working directory with the same entryname as
   form_path and the suffix listform changed to list.
-select STR, -sel STR
   specifies the records selected for processing.  If you don't provide
   it, all records in the list are processed (see "Notes on selection
   expressions" below).


-sort "STR", -st "STR"
   sorts the records processed according to STR (in quotes).  Sorting
   is in effect only for the duration of the command.  The lister file
   is not modified.  If you don't use -sort, records are processed in
   the current order in the lister file (see sort_list.info).
-totals, -tt
   displays the number of records processed.


Notes on selection expressions: The selection feature enables any of
the list processing commands copy_list, describe_list, display_list,
modify_list, process_list, and trim_list to select from a lister file
only the records it will act on.  The command, using -select,
specifies requirements for desired fields.  If a record meets the
requirements, it is processed; otherwise it is skipped.

The -select control argument always takes a character string (STR)
argument.  Surround STR with quotation marks.  Each record in the
specified lister file is tested to determine whether or not it
fulfills the selection criteria.  Those that do are processed.


This control argument consists of one or more field comparisons.  A
field comparison involves comparing a test string with the value of
the specified field in the current record.  The field comparison
statement always consists of three parts:
   "field_name comparison_operator test_string"
where
field_name
   is the name of a field contained in the lister file.  You can use
   the reserved field names ":any" to specify any field in the record
   and ":uid" to specify the unique identifier of a record.  (See
   below.)
comparison_operator
   specifies what comparison is performed.  The opposite comparison is
   performed if you precede the comparison operator by "not."  The list
   processing comparison operators are:


   begin(s)
      field value begins with the test string.  The comparison is made
      regardless of case.
   contain(s)
      test string is contained in the field value.  The comparison is
      made regardless of case.
   end(s)
      field value ends with the test string.  The comparison is made
      regardless of case.
   equal(s)
      test string is equal to the field value.  Uppercase and lowercase
      letters are distinct with this operator.
   greater
      field value is alphabetically greater than the test string (e.g.,
      0123456789Aa...Zz).


   less
      field value is alphabetically less than the test string.
   nequal(s)
      field value string is numerically equal to the numeric value of
      test string.
   ngreater
      field value string is numerically greater than the test string.
   nless
      field value string is numerically less than the test string.


test_string
   is the string that is compared to the field value string.  The
   special test string ":null" is used to verify whether or not the
   field is null (i.e., missing from the current record) and the
   special test string ":numeric" to test whether or not the field
   value string is numeric (i.e., can be converted to a number).  You
   can only use them with the equal or nequal comparison operators.
   Null fields are always nonnumeric.  (See below.)

You can specify several field comparisons with -select.  Field
comparisons are combined by the logical operators "and," "or," or
"not."  With no parentheses the prefix "not" operator is evaluated
first, then the infix "and" operator, then the infix "or" operator.
You can use parentheses to specify the exact order of evaluation.
These rules are similar to the PL/I ones for Boolean expressions.


The comparison operators (not) begin, (not) contain, (not) end, (not)
greater, (not) less, (not) ngreater, and (not) nless ignore records
that have null fields.  Unless you use ":null", (not) equal and (not)
nequal also ignore records with null fields.

For lists of field names and test strings, see listin_segment.gi and
listform_segment.gi; for examples of the use of -select, see the
Multics WORDPRO Reference Manual (AZ98).


Notes on severity: pls sets the "lister" severity indicator.  Severity
2 is set when the document is not produced due to some failure other
than no match on the selection expression or if the pls invocation
terminates abnormally.  Severity 1 is set when the document is not
produced due to no match on the selection expression.  Severity 0 is
set when the program terminates normally and the document is produced.


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
