03/15/85  cv_ptr_


Entry points in cv_ptr_:
   (List is generated by the help command)


:Entry:  cv_ptr_:  03/15/85  cv_ptr_


Function:
The cv_ptr_ function converts a virtual pointer to a pointer value.  A
virtual pointer is a character-string representation of a pointer
value.


Syntax:
declare cv_ptr_ entry (char(*), fixed bin(35)) returns (ptr);
ptr_value = cv_ptr_ (vptr, code);


Arguments:
vptr
   is the virtual pointer to be converted.  (Input)
code
   is a standard status code.  (Output)
ptr_value
   is the pointer that results from the conversion.  (Output)


:Entry:  terminate:  03/15/85 cv_ptr_$terminate


Function:  This entry point is called to terminate the segment that has
been initiated by a previous call to cv_ptr_.


Syntax:
declare cv_ptr_$terminate (ptr);
call cv_ptr_$terminate (ptr_value);


Arguments:
ptr_value
   is the pointer returned by the previous call to cv_ptr_.  (Input)


Notes:  Pointers returned by the cv_ptr_ function cannot be used as
entry pointers.  The cv_ptr_ function constructs the returned pointer
to a segment in a way that avoids copying of the segment's linkage and
internal static data into the combined linkage area.  The cv_entry_
function is used to convert virtual entries to an entry value.

The segment pointed to by the returned ptr_value is initiated with a
null reference name.  The cv_ptr_$terminate entry point should be
called to terminate this null reference name.


Virtual pointers:
The cv_ptr_ function converts virtual pointers that contain one or two
components -- a segment identifier and an optional offset into the
segment.  Altogether, seventeen forms are accepted.  A description of
virtual pointers can be found in "virtual_pointers.gi.info".


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
