02/06/84  cross_ring_


Syntax for attach description:
     cross_ring_ switch_name N


Function: The cross_ring_ I/O module allows an outer ring to attach a
switch to a preexisting switch in an inner ring, and to perform I/O
operations by forwarding I/O from the attachment in the outer ring
through a gate to an inner ring.  The cross_ring_ I/O module is not
called directly by users; rather the module is accessed through the
I/O system.


Arguments:
switch_name
   is a previously registered switch name in ring N.
N
   is a ring number from 0 to 7.


Opening operation:
The inner ring switch may be open or not.  If not open, it will be
opened on an open call.  All modes are supported.


Close operation:
The inner switch is closed only if it was opened by cross_ring_.


Other operations:
All operations are passed on to the inner ring I/O switch.


Notes:  This I/O module allows a program in an outer ring, if permitted
by the inner ring, to use I/O services that are available only from an
inner ring via cross_ring_io_$allow_cross.  By the use of the
cross_ring_io_$allow_cross subroutine a subsystem writer is able to
introduce into an outer ring environment many features from an inner
ring, thereby tailoring it to fit the user's specific needs.

The switch in the inner ring must be attached by the inner ring before
cross_ring_ can be attached in the outer ring.


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
