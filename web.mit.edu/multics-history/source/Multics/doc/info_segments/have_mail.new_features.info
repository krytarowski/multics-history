10/05/82  Enhancements to have_mail in MR10.1

Several enhancements have been made to the have_mail command/active
function in MR10.1.  These enhancements are:
   (1) an improved mailbox selection capability,
   (2) new message selection control arguments, and
   (3) the have_messages command/active function.


Enhanced mailbox selection:
The have_mail command/active function now uses the same interpretation
of non-control arguments that is used by print_mail and read_mail to
select a mailbox.  In addition, have_mail now supports the same
mailbox specification control arguments as print_mail and read_mail.

This change, while slightly incompatible with prior releases, insures
that have_mail will not check a different mailbox than would be read by
print_mail or read_mail if they were given the same arguments.


For example, in prior releases, if the statement

      &if [have_mail Palter.Multics] &then read_mail Palter.Multics

were placed into an exec_com, have_mail would check the contents of the
mailbox Palter.Multics.mbx in the working directory while read_mail
would attempt to read the default mailbox for the user Palter.Multics.


List of mailbox specifiers:
-mailbox path, -mbx path
   specifies the pathname of a mailbox.  The suffix "mbx" is added if
   necessary.
-user Person_id.Project_id
   specifies the given user's default mailbox.  This control argument
   is equivalent to:
         -mailbox >udd>Project_id>Person_id>Person_id.mbx
-save path, -sv path
   specifies the pathname of a savebox.  The suffix "sv.mbx" is added
   if necessary.
-log
   specifies the user's logbox and is equivalent to:
         -mailbox >udd>Project_id>Person_id>Person_id.sv.mbx


STR
   is any non-control argument and is first interpreted as: 
         -mailbox STR
   if no mailbox is found, this specification is then interpreted as:
         -save STR
   if no savebox is found, this specification is then interpreted as:
         -user STR


Message selection control arguments:
Several new control arguments have been added to have_mail.  These
control arguments dictate whether or not ordinary mail or interactive
messages should be ignored when deciding if a mailbox is empty.

By default, have_mail checks for both ordinary mail and interactive
messages.  This default insures that have_mail and print_mail will
always agree on whether or not a mailbox is empty.


However, if the new -no_interactive_messages (-nim) control argument is
used, have_mail will only check for ordinary mail within a mailbox.
Use of this control arguments causes have_mail to agree with read_mail
rather than print_mail on whether or not a mailbox is empty.

For example, the statement

      &if [have_mail -nim]

may be placed in your start_up.ec to invoke read_mail only if there is
mail in your mailbox.


List of message selection control arguments:
-interactive_messages, -im
   return "true" if there are any interactive messages in the mailbox.
   (Default)
-no_interactive_messages, -nim
   return "true" only if there is mail in the mailbox, ignoring whether
   there are any interactive messages present.
-mail, -ml
    return "true" if there is any mail in the mailbox.  (Default)
-no_mail, -nml
   return "true" only if there are interactive messages in the mailbox,
   ignoring whether there is any mail in the mailbox.


have_messages command/active function:
A new command, have_messages, has been added.  This command is
identical to have_mail except that, by default, it only checks the
mailbox for interactive messages.


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
