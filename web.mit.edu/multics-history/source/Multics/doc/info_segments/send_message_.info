02/06/84  send_message_


Entry points in send_message_:
   (List is generated by the help command)


:Entry: send_message_: 02/06/84  send_message_

Function: sends an interactive message to be received by the message
facility.  If the recipient is not currently accepting messages, the
message is added to that user's mailbox.


Syntax:
declare send_message_ entry (char(*), char(*), char(*), fixed bin(35));
call send_message_ (person, project, message, code);


Arguments:
person
   is the registered Person_id of the recipient.  (Input)
project
   is a Project_id on which the recipient is registered.  (Input)
message
   is the text of the message to be sent.  (Input)


code
   is a standard status code.  (Output) It can be one of the following:
   error_table_$messages_deferred
      recipient is deferring messages.  The message is added to his
      mailbox, but the recipient will not receive it immediately.
   error_table_$messages_off
      recipient is not logged in or not accepting messages.  The
      message is added to his mailbox, but the recipient will not
      receive it immediately.
   error_table_$noentry
      no mailbox for the specified recipient.


   error_table_$no_append
      insufficient access to add a message to the recipient's mailbox.
   error_table_$wakeup_denied
      insufficient access to send the message interactively; the
      message is added to the recipient's mailbox.
   error_table_$no_info
      access class restrictions prevent the sender from finding out
      whether the message was sent.


Notes:  The pathname of the mailbox sent to is
>udd>Project_id>Person_id>Person_id.mbx.



:Entry:  acknowledge:  02/06/84 send_message_$acknowledge


Function:  This entry point sends a message to be acknowledged when
read by the recipient.


Syntax:
declare send_message_$acknowledge entry (char(*), char(*), char(*),
     fixed bin(35));
call send_message_$acknowledge (person, project, message, code);


Arguments:
person
   is the registered Person_id of the recipient.  (Input)
project
   is a Project_id on which the recipient is registered.  (Input)
message
   is the text of the message to be sent.  (Input)
code
   is a standard status code.  (Output)


Notes: The acknowledgement is an interactive message of the form
"Acknowledged" if the message is printed immediately by the recipient,
or "Acknowledge message of <time>" if printed later.


:Entry:  express:  02/06/84 send_message_$express


Function: sends a message only if the recipient is logged in and
accepting interactive messages by means of the accept_messages
command.  If the message cannot be sent interactively, it is not added
to the recipient's mailbox.


Syntax:
declare send_message_$express entry (char(*), char(*), char(*),
     fixed bin(35));
call send_message_$express (person, project, message, code);


Arguments:
person
   is the registered Person_id of the recipient.  (Input)
project
   is a Project_id on which the recipient is registered.  (Input)
message
   is the text of the message to be sent.  (Input)
code
   is a standard status code.  (Output)


:Entry:  notify_mail:  02/06/84 send_message_$notify_mail


Function: sends a mail notification if the recipient is currently
accepting interactive messages.  The mail notification needs to be
decoded by the message facility (accept_messages), which prints either
"You have mail from Person_id.Project_id" or, for a mailbox other than
the default one, "You have mail from Person_id.Project_id in <path>".


Syntax:
declare send_message_$notify_mail entry (char(*), char(*),
     fixed bin(35));
call send_message_$notify_mail (person, project, code);


Arguments:
person
   is the registered Person_id of the recipient.  (Input)
project
   is a Project_id on which the recipient is registered.  (Input)
code
   is a standard status code.  (Output)


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
