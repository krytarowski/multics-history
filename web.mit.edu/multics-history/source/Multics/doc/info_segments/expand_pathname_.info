02/13/84  expand_pathname_


Entry points in expand_pathname_:
   (List is generated by the help command)


:Entry: expand_pathname_: 02/13/84  expand_pathname_

Function: converts a relative or absolute pathname into a
directory name and entryname.


Syntax:
declare expand_pathname_ entry (char(*), char(*), char(*),
     fixed bin (35));
call expand_pathname_ (pathname, dirname, entryname, code);


Arguments:
pathname
   is the relative or absolute pathname to be expanded.  (Input)
dirname
   is the directory portion of the expanded pathname.  (Output)
entryname
   is the entryname portion of the expanded pathname.  (Output)
code
   is a standard system error code.  (Output) It can have one of the
   following values:
   error_table_$lesserr
      too many less-than characters ("<") in pathname.
   error_table_$badpath
      invalid syntax in pathname.


   error_table_$pathlong
      the expanded pathname is longer than 168 characters.
   error_table_$entlong
      the entryname of the expanded pathname is longer than 32
      characters.
   error_table_$no_wdir
      a relative pathname is specified, but no working directory is in
      force for the process.
   error_table_$archive_pathname
      the input pathname specified an archive component.


Notes:  This entry does not accept the syntax for specifying archive
component pathnames; if one is supplied, an error code is returned.
See the information on Constructing and interpreting names in the
Programmer's Reference Manual for details.

For compatability with older programs, if pathname is given as a null
string, the working directory is used.


:Entry:  add_suffix:  02/13/84 expand_pathname_$add_suffix


Function:  This entrypoint expands a relative or absolute pathname into
a directory name and entryname portion, adding a suffix to the
entryname if that suffix is not already present.


Syntax:
declare expand_pathname_$add_suffix entry (char(*), char(*), char(*),
     char(*), fixed bin (35));
call expand_pathname_$add_suffix (pathname, suffix, dirname, entryname,
     code);


Arguments:
pathname
   is the relative or absolute pathname to be expanded.  (Input)
suffix
   is the suffix to be added to the entryname.  (Input) The period
   separating the entryname and the suffix should not be included.  If
   a null string is supplied, no suffix is added.
dirname
   is the directory portion of the expanded pathname.  (Output)
entryname
   is the entryname portion of the expanded pathname.  (Output)
code
   is a standard system error code.  (Output) It can have the same
   values described for expand_pathname_.


:Entry:  component:  02/13/84 expand_pathname_$component


Function:  This entrypoint expands a relative or absolute pathname into
a directory name, an archive name, and an archive component portion, or
into a directory name and entryname portion if no component name is
present.


Syntax:
declare expand_pathname_$component entry (char(*), char(*), char(*),
     char(*), fixed bin (35));
call expand_pathname_$component (pathname, dirname, entryname,
     componentname, code);


Arguments:
pathname
   is the relative or absolute pathname to be expanded.  (Input)
dirname
   is the directory name portion of the expanded pathname.  (Output)
entryname
   if the input pathname specifies an archive component, this is the
   entryname of the archive (with the archive suffix added).  (Output)
   Otherwise, this is the entryname portion of the input pathname.


componentname
   if the input pathname specifies an archive component, this is the
   component name.  (Output) Otherwise, this is the null string.
code
   is a standard system error code.  (Output) It can have the same
   values as described for expand_pathname_ except for
   error_table_$archive_pathname.


:Entry:  component_add_suffix:
02/13/84 expand_pathname_$component_add_suffix


Function:  This entrypoint expands a relative or absolute pathname into
a directory name, an entryname, and an archive component name.  The
specified suffix is added either to the entryname or component name, as
appropriate, if it is not already present.


Syntax:
declare expand_pathname_$component_add_suffix entry (char(*), char(*),
     char(*), char(*), char(*), fixed bin(35));
call expand_pathname_$component_add_suffix (pathname, suffix, dirname,
     entryname, componentname, code);


Arguments:
pathname
   is the relative or absolute pathname to be expanded.  (Input)
suffix
   is the suffix to be added to the component name or entryname.
   (Input) The period separating the entryname and the suffix should
   not be included.  If a null string is supplied, no suffix is added.
dirname
   is the directory name portion of the expanded pathname.  (Output)
entryname
   if the input pathname specifies an archive component, this is the
   entryname of the archive (with the archive suffix added).  (Output)
   Otherwise, this is the entryname portion of the input pathname, with
   the specified suffix added if it is not already present.


componentname
   if the input pathname specifies an archive component, this is the
   component name, with the specified suffix added if it is not already
   present.  (Output) Otherwise, this is the null string.
code
   is a standard system error code.  (Output) It can have the same
   values as for the expand_pathname_$component entry.


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
