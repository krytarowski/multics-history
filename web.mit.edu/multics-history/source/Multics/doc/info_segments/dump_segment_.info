03/04/85  dump_segment_


This subroutine prints the dump of a segment formatted in the same way
as the dump_segment command would print it.  The output format is
controlled by a bit string that allows most of the formatting control
arguments available to dump_segment.


Entry points in dump_segment_:
   (List is generated by the help command)


:Entry:  dump_segment_:  03/04/85  dump_segment_


Function:
prints the dump of a segment formatted in the same way as the
dump_segment command would print it.



Syntax:
declare dump_segment_ entry (ptr, ptr, fixed bin, fixed bin(18),
     fixed bin(18), bit(*));
call dump_segment_ (iocb_ptr, first, block_size, offset, count,
     format);


Arguments:
iocb_ptr
   is a pointer to the I/O control block that specifies where the dump
   is to be written.  (Input)
first
   is a pointer to the first word of the data to be dumped.  (Input)
block_size
   is the number of words in the block if blocked output is desired.
   If unblocked output is desired, this is zero.  (Input)
offset
   is an arbitrary offset to be printed in addition to the address of
   the first word of data to be dumped if the offset option in the
   format string is specified.  (It is reset to this initial value at
   the start of each block.)  (Input)


count
   is the number of words to dump, starting with the word pointed to by
   first.  (Input)
format
   is a format control bit string with the following definition:  (See
   the dump_segment command in the Multics Commands and Active
   Functions Manual, for a full discussion of these arguments.) (Input)


:Entry:  string:  03/04/85 dump_segment_$string


Function:  This entry point returns the formatted dump of a segment.
The ouput format is controlled by a bit string that allows most of the
formatting control arguments available to the dump_segment command.


Syntax:
dcl dump_segment_$string entry (ptr, fixed bin (21), ptr, fixed bin,
     fixed bin (18), fixed bin (18), bit (*));
call dump_segment_$string (string_ptr, string_length, first,
     block_size, offset, count, format)


Arguments:
string_ptr
   is the pointer to the varying character string to place the output
   in.  (Input)
string_length
   is the maximum length of the varying character string.  (Input)
first
   is the pointer to the first word of data to be dump.  (Input)
block_size
   is the output dump in blocks of this number of words.  (Input)
offset
   is an arbitrary offset to be printed in addition to the address of
   the first word of data to be dumped if the offset option in the
   format string is specified.  (It is reset to this initial value at
   the start of each block.)  (Input)


count
   is the number of words to be dump.  (Input)
format
   is the bit string controlling the output modes.  (Input) Described
   in dump_segment_format.incl.pl1.


Notes:  The dump_segment_format_structure is structure is declared in
dump_segment_format.incl.pl1.


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
