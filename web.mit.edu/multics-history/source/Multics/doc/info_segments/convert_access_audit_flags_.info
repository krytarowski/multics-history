03/04/85  convert_access_audit_flags_


This subroutine is provided to convert a security audit flag back and
forth between its character string representation and the internal
binary representation.


Entry points in convert_access_audit_flags_:
   (List is generated by the help command)


:Entry:  from_string:  03/04/85 convert_access_audit_flags_$from_string


Function:  This entry point converts the textual representation to
internal representation.


Syntax:
dcl convert_access_audit_flags_$from_string entry (char (*), bit (36)
     aligned, fixed bin (35));
call convert_access_audit_flags_$from_string (flags_str, audit_flags,
     code);


Arguments:
flags_str
   is the textual representation of the security audit flags.  (Input)
audit_flags
   is the bit string internal representation of the flags.  (Output)
code
   is a standard system status code.  (Output)


:Entry:  to_string:  03/04/85 convert_access_audit_flags_$to_string


Function:  This entry point converts from internal representation to
textual representation.


Syntax:
dcl convert_access_audit_flags_$to_string (entry (char (*), bit (36),
     aligned, fixed bin (35));
call convert_access_audit_flags_$to_string (flags_str, audit_flags,
     code);


Arguments:
   flags_str is the textual representation of the security audit flags.
   (Output)
audit_flags
   is the bit string internal representation of the flags.  (Output)
code
   is a standard system status code.  (Output) It can have one of the
   following values:
   error_table_$badarg
      audit_flags is illegally constructed
   error_table_$smallarg
      flags_str is too small for result


Notes:  The format of the flags string is shown in the Subroutines
Manual.


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
