05/10/84  hunt

Syntax as a command:  hunt name {path} {-control_args}


Syntax as an active function:  [hunt name {path} {-control_args}]


Function:  searches a specified subtree of the hierarchy for all
occurrences of a named segment that is either freestanding or included
in an archive file.


Arguments:
name
   is the name of a segment for which hunt is to search.  The star
   convention is allowed.
path
   is the pathname of a directory to be interpreted as the root of the
   subtree in which to search for the specified segment(s).  If you
   don't supply path, the subtree rooted at the current working
   directory is searched.


Control arguments:
-all, -a
   reports on finding links, directories, and segments.
-archive, -ac
   looks inside archives for components whose names match the name
   argument.  (Default)
-first
   stops searching as soon as the first occurrence of the selected
   segment is found.  The default is to return all occurrences.
-no_archive, -nac
   does not look inside archives and is therefore faster.


Notes:  This command displays the type of entry found (segment,
directory, or link), followed by the entry itself, and a total of the
number of occurrences found.

If archive components are being examined, the matching components are
reported before added names on the archive segment.


Notes on active function:  As an active function, hunt returns a string
of pathnames separated by spaces.  Archive components are returned as
archive_path::component_name.


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
