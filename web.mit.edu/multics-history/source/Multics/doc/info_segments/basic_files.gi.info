02/25/74  Files in BASIC

This segment explains the file naming conventions used by the new
Multics basic.

     A  BASIC  random access file is a single-segment file in the
Multics storage system.  A basic terminal format file  is  always
read or written using an I/O switch.  The switch can be connected
to  a device, segment or multi-segment file.  The file name given
in the BASIC file-statement specifies the file or I/O switch name
to be used for the file;  the type of the file,  terminal  format
or  random  access, is determined by inspecting the first word of
the file or, if the file does  not  exist,  by  the  first  BASIC
statement that accesses the file.


     If the file name does not begin with a ":", the file name is
a  Multics pathname, either relative or absolute.  If the file is
a random access file,  the  BASIC  runtime  system  initiates  or
creates  the specified segment.  If the file is a terminal format
file, the BASIC runtime system  attaches  to  the  file  via  the
vfile_  I/O  module  using  a  unique  switch  name  of  the form
"basic.000001".  Examples of this type of file name are
          alpha
          >udd>Project>User>data


     If the file name begins with a ":", the file name  can  have
one  of  two  formats: ":name" or ":name attach-description".  In
the first form, "name" is the name of an  I/O  switch  that  must
already  be  properly  attached.   In the second case, the string
"attach-description", which can contain blanks, specifies the way
the switch name should be attached if not already attached.   The
BASIC  runtime system opens the specified I/O switch if it is not
already open;  if the  switch  is  open,  it  is  assumed  to  be
properly positioned and is not closed at termination of the BASIC
program.   A  file  name  beginning  with  ":" cannot be used for
random access files.  Examples of this type of file name are
          :user_output
          :xxx vfile_ xxx_file
          :out syn_ user_i/o


This section  lists  the  I/O  switch  attachments  that  can  be
specified in a BASIC file name.

Files in the storage system: (vfile_)
attach-description must be of the form

          vfile_ f

where  f  is  an  absolute or relative pathname that identifies a
file.

Files on tape: (ntape_)
attach-description must be of the form

          ntape_ r -raw [-write]

where r is a string identifying the reel to be read  or  written.
The string r should end with the sequence ",7track" or ",9track",
indicating the type of tape to be read or written.  If neither of
these endings are present, "9track" is assumed.

The   -write  option  causes  the  reel  to  be  mounted  with  a
write-permit ring.   This  option  is  required  if  the  program
contains  print-statements  or scratch-statements that access the
file.

The -raw option is required;  it means that each line in the file
corresponds to a single physical tape record.


Terminal input/output:
attach-description must be of the form

          tty_ d

where d is the string,  obtainable  from  the  print_attach_table
(pat)  command,  that  identifies the terminal device assigned to
the I/O switch name user_i/o in the user's process.

Synonym attachments:
attach-description must be of the form

          syn_ n

where n is the name of an I/O switch through which all operations
on this switch are to be directed.  Such a switch must  exist  at
the  time  the  switch is opened, although it need not exist when
the switch is attached.  The I/O  switch  whose  name  is  n  can
itself  be attached as a synonym for another I/O switch.  The I/O
switch that is the final destination of  the  synonym  attachment
must  be  attached  to  a  file or device and must specify an I/O
module.


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
