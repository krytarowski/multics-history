02/22/85  set_resource, setr

Syntax as a command:  setr type STR1...STRN {-control_args}


Function: modifies parameters of a resource.


Arguments:
type
   is a resource type defined in the Resource Type Description Table
   (RTDT).
STRi
   is the unique identifying name of the particular resource being
   modified.  If STR looks like a control argument (with a preceding
   hyphen), then use -name (-nm) before it.


Control arguments:
-access_class accr, -acc accr
   sets the initial AIM access class parameters, where accr is the
   access class range; you must supply -priv with it.  If your
   authorization is within the access class range inclusive, you are
   allowed to read and write to the resource (provided you also meet
   other access requirements).
-acs_path path
   specifies the pathname of the access control segment (ACS) for this
   resource.  The ACS and the desired access control list set are not
   created by set_resource but by the accounting owner.  If you give no
   -acs_path, the accounting owner of the resource is given rew access
   by default.


-alloc STR
   sets the allocation state of the resource to free or allocated,
   where STR must be either "on" or "off"--on sets the allocation state
   to allocated, off to free.  If you don't supply -alloc, the
   allocation state is free.  (The allocation state flag is a
   convenience to you and is largely ignored by resource management.)
-attributes STR, -attr STR
   specifies the desired values for the attributes of this resource.
-charge_type name, -crgtp name
   specifies the name of the billing algorithm used to account for the
   use of this resource.
-comment STR, -com STR
   specifies the desired value of the comment string for this resource.


-location STR, -loc STR
   specifies a descriptive location for the resource, to aid the
   operator in locating the resource when it is stored in a special
   place (e.g., a vault, a different room, etc.); you must supply -priv
   with -location.
-lock STR
   locks or unlocks the resource, where STR must be either "on" or
   "off"--on prevents any use of the resource, off allows its use.  If
   you don't give -lock, the lock is off.  You must supply -priv with
   -lock.


-priv
   makes a privileged call to obtain the status of this resource (see
   "Access required" below).  If you are a privileged user (RCP
   Administrator), it allows you to set and change certain fields
   (including the acs_pathname) for this resource in the registry, thus
   effectively allowing yourself enough access to mount a tape for a
   write.
-release_lock STR, -rll STR
   specifies whether the resource can be released by the owner or only
   by a privileged process (see "Access required" below)--on resources
   can only be released by a privileged process, off resources by the
   owner.  If you don't supply -release_lock, the resource can be
   released by the owner.  You must give -priv with -release_lock.


Access required: You need write effective access to the resource named
to modify its status; execute effective access to the resource named to
modify protected attributes (only the accounting owner can modify the
ACS path); and execute access to the rcp_admin_ gate to use
-access_class, -lock, -location, -priv, and -release_lock.


Notes: If you specify multiple resources and an error occurs in the
modification of one of them, none are modified.



                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
