03/31/83  remote_input_


Function: The remote_input_ I/O module performs record input from a
terminal I/O module, which is assumed to be connected to a remote I/O
device, such as a Honeywell Level 6 remote batch facility (G115 type),
an IBM 2780, or an IBM 3780.  Except for hardware restrictions, this
module performs some code conversion and control in such a way that
remote and local card reading are the same.

Entry points in this module are not called directly by users; rather,
the module is accessed through the I/O system.

This module in turn constructs an attach description for the module
specified in the -terminal control argument, passing the other attach
information specified by the caller.


Syntax and Attach Description:
     remote_input_ -control_args


Control arguments:
-device STR
   STR defines the device type that this I/O module is attempting to
   simulate.  The acceptable values for STR are reader, printer_in, and
   punch_in.  This control argument is optional.  If not supplied, a
   device type of reader is assumed.
-physical_line_length N, -pll N
   This control argument is accepted and ignored for compatibility with
   other device-level I/O modules.  It is not passed on to the terminal
   I/O module.
-record_len N
   defines the maximum record length (buffer size) for data from the
   terminal I/O module in characters.  The accepted ranges are 80 to
   160 for the device type of reader, and 10 to 1024 otherwise.  If
   this control argument is not given, the maximum for the device type
   is assumed.


-runout_spacing N, -runsp N
   This control argument is accepted and ignored for compatibility with
   other device-level I/O modules.  It is not passed on to the terminal
   I/O module.
-terminal STR
   STR specifies the terminal I/O module to be attached by this device
   I/O module.  (Required)

All other attach control arguments are assumed to belong to the
terminal I/O module.  These are passed on as part of its attach
description.  The -device option passed on to the terminal I/O module
specifies one of the following devices:  reader, printer, or punch.
See the description of the terminal I/O module for a full definition of
required and optional control arguments.


Open Operation:
The remote input I/O module supports the stream_input opening mode.
The terminal I/O module switch is in turn opened with the
sequential_input or stream_input modes.


Get Chars Operation:
The get_chars entry reads one record from the terminal I/O module and
returns up to the number of specified characters.  If the number of
characters in the record is greater than the requested number,
error_table_$data_loss is returned along with the data.


Control Operation:
   The remote_input_ device I/O module supports the following control
   operations:
get_count
   returns the current record count.  This is the count of records read
   from the terminal I/O module since the last reset control operation.
   This operation is not passed on to the terminal I/O module.


   The info_pointer must point to the following structure.  (This
   structure is taken from the counts structure in
   prt_order_info.incl.pl1 for compatibility with procedures that use
   several device I/O modules.)
      dcl 1 counts aligned based,
            2 prt_data_pad (4) fixed bin,
            2 record_count fixed bin (35),
            2 prt_pad fixed bin;
   The variable record_count will contain the returned value.  This
   corresponds with the variable line_count from the other structure.
reset
   sets the current record count to 0 and passes the control operation
   on to the terminal I/O module.

All other control operations are passed on to the terminal I/O module.


Modes Operation:
This I/O module supports the modes defined by the terminal I/O module
specified in the attach description.


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
