06/25/90  cancel_daemon_request, cdr

Syntax as a command:  cdr request_identifiers {-control_args}


Function: deletes an I/O daemon request that is no longer needed.


Arguments:
   request_identifiers can be chosen from the following:
path
   identifies a request to be canceled by the full or relative pathname
   of the input data segment.  The star convention is allowed.
-entry STR, -et STR
   identifies a request to be canceled by STR, the entryname portion of
   the input data segment pathname.  The star convention is allowed.
-id ID
   identifies one or more requests to be canceled by request
   identifier.  You can use this identifier to further define any path
   or -entry identifier (see "Notes").


Control arguments:
-all, -a
   searches all priority queues for the specified request type starting
   with the highest priority queue and ending with the lowest.  It is
   incompatible with -queue.
-brief, -bf
   suppresses messages telling that a particular request identifier was
   not found or that requests were canceled when using star names or
   -all.
-queue N, -q N
   specifies that queue N of the request type contains the requests to
   be canceled, where N is a decimal integer specifying the number of
   the queue.  If you omit it, all the queues are searched.


-request_type STR, -rqt STR
   indicates that the request to be canceled is to be found in the
   queue for the request type identified by STR.  If you don't supply
   -request_type, the default is "printer."  The print_request_types
   command lists the request types.
-user User_id
   specifies the name of the submitter of the request to be canceled if
   it is not the same as the group identifier of the process.  The
   User_id can be equal to Person_id.Project_id, Person_id, or
   .Project_id.  Both r and d extended access to the queue are
   required.  This control argument is primarily for operators and
   administrators.


Access required: You need o extended access to the queue to cancel
your own request and r and d extended access to cancel somebody else's
request.


Notes: If you supply -id, only one path or -entry is allowed.  If you
give -id in addition to a path or -entry, they must match the same
request.  If you provide any path or -entry STR request identifiers,
only one -id ID request identifier is accepted and it must match any
requests selected by path or entryname.

You can specify multiple -id ID identifiers in a single command
invocation only if you give no path or -entry request identifiers.

When you don't use star names and a single request identifier matches
more than one request in the queue(s) searched, none of the requests
are canceled; however a message is printed telling how many matching
requests there are.


Normally, deletion can be made only by the user who originated the
request.

If the request is already running, the running request will not be
stopped and the request's entry will not be removed from the queue.
A warning message will be displayed to warn the user of this action.

See the dprint, dpunch, and enter_output_request commands.


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
