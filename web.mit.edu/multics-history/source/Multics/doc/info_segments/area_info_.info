06/27/86  area_info_


Entry points in area_info_:
   (List is generated by the help command)


:Entry: area_info_: 02/13/84  area_info_

Function: returns information about an area.


Syntax:
declare area_info_ entry (ptr, fixed bin (35));
call area_info_ (info_ptr, code);


Arguments:
info_ptr
   points to the area_info structure defined by the system include
   file, area_info.incl.pl1.  (Input)
code
   is a system status code.  (Output)


:Entry: get_block_data_info: 06/27/86  get_block_data_info

Function: returns a pointer and length for the first block or next
block in an area, and whether or not it is free.  This allows a program
to step through an area looking at each block in turn.  Extensible
areas are handled correctly.

Syntax:
declare area_info_$get_block_data_info entry (ptr, bit (1), ptr, ptr,
	ptr, fixed bin (18), bit (1), fixed bin (35));
call area_info_$get_block_data_info (area_ptr, next_ptr_flag,
	block_data_ptr, output_area_ptr, next_data_ptr, data_size,
	block_allocated_flag, code);


Arguments:
area_ptr
   is a pointer to the area in which the data block will be found.
   (Input)
next_ptr_flag
   if "1"b, then return information about the block after the one
   pointed to by block_data_ptr.  If "0"b, then return information
   about the block pointed to by block_data_ptr.  (Input)
block_data_ptr
   pointer to a data block in the area.  If it is null then it will be
   internnaly initialized to the first block in the area.  (Input)


output_area_ptr
   is a pointer to the area which actually contains the block about
   which information is returned.  It will be equal to area_ptr unless
   the area is extensible and the returned block information required
   going to the next segment in the area.  When stepping through the
   blocks in an area, this pointer should be used as input (i.e.
   area_ptr) for the next call.  (Output)
next_data_ptr
   is a pointer to the block about which nformation is returned.  It
   will be equal to block_data_ptr unless next_ptr_flag was set, in
   which case it will point to the block after the one pointed to by
   block_data_ptr.  (Output)


data_size
   is the size, in words, of the returned data block.  (Output)
block_allocated_flag
   If "1"b, then the block is allocated.  If "0"b, then the block is
   free.  (Output)
code
   is a standard system status code.  It is returned as
   error_table_$end_of_info if the block about which information is
   requested is in virgin storage in the area (i.e. the end of the area
   has been reached).  (Output)


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
