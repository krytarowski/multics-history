03/19/85  cb_window_


This is the basic video interface subroutine to be used by COBOL to
create/destroy/change windows.  (If usage-mode = 0 (see cb_menu_$init2)
this subroutine should not be called.)


Entry points in cb_window_:
   (List is generated by the help command)


:Entry:  change:  03/19/85 cb_window_$change


Function:  This entry points provides a facility for changing the size
of an existing window.  The size of a window can always be "shrunk",
however it can be increased only it does not overlap with another
defined window.  (If usage-mode = 0 (see cb_menu_$init2) this entry
point should not be called.)


Syntax:
   declarations:
     77  window-id   USAGE IS COMP-6.
     77  first-line  USAGE IS COMP-6.
     77  height      USAGE IS COMP-6.
     77  ret-code    USAGE IS COMP-6.
     call "cb_window_$change" USING window-id, first-line, height,
          ret-code.


Arguments:
window-id
   window identifier returned by cb_window_$create.  (Input)
first-line
   new first line number for the window being changed.  (Input) A
   positive value.
height
   new height for the window being changed.  (Input) A positive value.
ret-code
   return code.  (Output)


:Entry:  clear_window:  03/19/85 cb_window_$clear_window


Function:  Used to clear a specified window.


Syntax:
   declarations:
     77  window-id      USAGE IS COMP-6.
     77  ret-code       USAGE IS COMP-6.
     call "cb_window_$clear_window" USING  window-id, ret-code.


Arguments:
window-id
   the window identifier (returned by cb_window_$create) of the window
   to be cleared.  (Input)
ret-code
   return code.  (Output)


:Entry:  create:  03/19/85 cb_window_$create


Function:  This entry is used to create a new window on the terminal
screen.  (If usage-mode = 0 (see cb_menu_$init2) this entry point
should not be called.)


Syntax:
   declarations:
     77  switch-name    PIC X(32).
     77  first-line     USAGE IS COMP-6.
     77  height         USAGE IS COMP-6.
     77  window-id      USAGE IS COMP-6.
     77  ret-code       USAGE IS COMP-6.
     call "cb_window_$create" USING first-line, height, switch-name,
          window-id, ret-code.


Arguments:
first-line
   is the line number where the window is to start.  (Input)
height
   the number of lines used by the window, i.e., its height.  (Input)
switch-name
   the  name  that  the caller  wishes  to associate  with  the switch.
   (Input)
window-id
   the returned id of the window just created.  (Output) It must not be
   altered in any way by the application program.
ret-code
   return code.  (Output)


:Entry:  destroy:  03/19/85 cb_window_$destroy


Function:  Used to destroy a previously created window.  (If usage-mode
= 0 (see cb_menu_$init2) this entry point should not be called.)


Syntax
   declarations:
     77  window-id   USAGE IS COMP-6.
     77  ret-code    USAGE IS COMP-6.
     call "cb_window_$destroy"  USING  window-id, ret-code.


Arguments:
window-id
   window    identifier    (returned    by    the   cb_window_$create).
   (Input/Output) It is reset to an illegal value by this call.
ret-code
   return code.  (Output)


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
