02/21/85  display_entry_point_dcl, depd

Syntax as a command:  depd virtual_entry


Syntax as an active function:  [depd virtual_entry]


Function: prints a PL/I declare statement describing a procedure entry
point or other, system-wide, external data constant.  The command
obtains the entry point declaration: from data files which contain the
declarations of all unusual procedure entry points (ALM segments,
procedures written as subroutines but called as functions, etc.)  and
system-wide external data values (e.g., sys_info$max_seg_size,
iox_$user_output, etc.), or from argument descriptors for the entry
point parameters which are included with the procedure entry point
itself.

When invoked as an active function, the declaration printed by a
command invocation is returned as the active function value.


Arguments:
virtual_entry
   a character string representation of the procedure entry point or
   external data value whose declaration is to be printed (see
   virtual_entries.gi).


Notes: Most command and active function entry points do not declare
arguments in their procedure statements since they accept a variable
number of arguments.  They also do not use the options(variable)
attribute in their procedure statements.  Therefore, when the depd
command encounters a procedure entry point with no declared arguments
and without options(variable), it assumes the options(variable)
attribute required for commands and active functions and prints a
declare statement of the form:
   dcl help entry options(variable);
depd distinguishes between such assumed options(variable) entries and
those which explicitly use the options(variable) attribute in their
procedure statement by printing "entry" for the assumed case and
"entry()" for the explicit case.  Thus, it prints a declaration for
depd, which explicitly uses options(variable), as:
   dcl depd entry() options(variable);


For procedures which use structures as arguments, certain structure
declarations are inexactly returned as parameter declarations because
the mechanism for encoding argument descriptors does not provide an
adequate description of the alignment of a structure.  The descriptor
only determines whether the overall structure is packed or not, and
does not specify whether or not it was originally declared with the
aligned attribute.

The following structures generate the same argument descriptors, even
though PL/I treats the level 1 structures as having different
attributes:
   dcl 1 s2 structure aligned,
         2 el1 fixed bin aligned,
         2 el2 fixed bin aligned;


   dcl 1 s2 structure,
         2 el1 fixed bin aligned,
         2 el2 fixed bin aligned;
depd reproduces the declaration for s2 when either s1 or s2 are used as
parameters for an entry point.  In order to bypass this problem,
declare the subroutine properly in your personal .dcl segment (see
"Notes on user-provided data files" below), and place this segment in
your "declare" search paths.


Notes on search list: The depd command uses the "declare" search list,
which has the synonym "dcl", to find data files describing unusual
procedure entry points.  The default search list identifies the data
file:
   >sss>pl1.dcl

For more information about search lists, see the descriptions of the
search facility commands and, in particular, the add_search_paths
command.


Notes on user-provided data files: Users may provide data files which
redeclare standard system entry points (e.g., redeclaring a subroutine
as a function) or which declare their own entry points or external
data items.  Data items have the general form of
   virtual_entry declaration

For example,
   ioa_ entry options(variable)

Note that the word "dcl" is not included in the data item, nor does the
declaration end with a semicolon (;).  External data values are
declared in a similar fashion.  For example,
   iox_$user_output ptr external static


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
