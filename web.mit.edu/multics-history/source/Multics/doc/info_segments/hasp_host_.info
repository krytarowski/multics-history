02/37/84  hasp_host_

Syntax for attach description:  hasp_host_ -control_args


Function: The hasp_host_ I/O module simulates record-oriented I/O to a
single device of a workstation while communicating with a host system
using the HASP communications protocol.  See "Notes" below.

Entry points in this module are not called directly by users; rather,
the module is accessed through the I/O system.

This I/O module must be attached to a subchannel of a communications
channel configured to use the HASP ring-0 multiplexer.  See the
description of the HASP multiplexer in MAM Communications.

This I/O module is designed primarily for use by the Multics I/O
daemon.


Control arguments:
   The following control arguments are optional, with the exception of
   -comm, -device, and -tty:
-comm hasp
   is required for compatibility with other I/O modules used by the I/O
   daemon.
-ebcdic
   is accepted for compatibility with other I/O modules used by the I/O
   daemon, but is ignored by this I/O module.
-device STR
   specifies the type of device for this attachment.  STR must be one
   of teleprinter, reader, printer, or punch.  The type specified by
   this control argument must match the type of device attached to the
   channel name defined below.


-physical_line_length N, -pll N
   is accepted for compatibility with other I/O modules used by the I/O
   daemon, but is ignored by this I/O module.
-terminal_type STR, -ttp STR
   is optional and is used to define the character set used by the
   remote system.  STR must be the name of a terminal type defined in
   the site's terminal type table (TTT).  See "Character set
   specification" below.
-tty channel_name
   specifies the communications channel to be attached.  The channel
   must be a subchannel of a HASP multiplexed channel
   (e.g., a.h014.prt3).


Open operation:
The hasp_host_ I/O module supports the sequential_input,
sequential_output, and sequential_input_output opening modes.


Write record operation:
The write_record entry converts the supplied data record from ASCII to
the remote system's character set, performs data compression, and
transmits the record to the HASP multiplexer.

The structure and the referenced constants supplied to this I/O module
are contained in the terminal_io_record.incl.pl1 include file.


Read record operation:
The read_record entry returns a single record from the device,
basically performing the inverse of the functions described for the
write_record operation.  Additionally, for line printer attachments,
the carriage control information in the record is converted into the
appropriate slew information in the terminal_io_record.

The structure and the referenced constants that this I/O module
returns in the supplied buffer are contained in the terminal_io_record
include file.


Modes operation:
This module accepts the non_edited and default modes for compatibility
with other I/O modules used by the I/O daemon, but ignores them.


List of control operations:
   This I/O module supports the following control operations:
end_write_mode
   ensures that all previously written data has been transmitted to the
   HASP multiplexer and then writes an end-of-file record for the
   device.
hangup_proc
   is used to specify a procedure to be invoked when this attachment's
   channel is hung up.


read_status
   determines whether or not there are any records waiting for a
   process to read.
resetread
   discards any pending input.
resetwrite
   discards any as-yet unprocessed output.
runout
   ensures that all data has been transmitted to the HASP multiplexer
   from where it is guaranteed to be transmitted to the terminal.
select_device and reset
   are ignored rather than rejected for compatibility with other I/O
   modules used by the I/O daemon.


signon_record
   supplies a SIGNON record for transmission to the remote system.
   The info_ptr must locate the signon_record_info structure, which
   is declared in the include file hasp_signon_record_info.incl.pl1.
   See "Notes on SIGNON processing" below.
no_signon_record
   validates that the multiplexer is not configured to send a SIGNON
   record to the remote system.  See "Notes on SIGNON processing"
   below.


Notes on SIGNON processing:
Before communicating with certain remote systems, Multics must send the
SIGNON record.  This specially formatted record identifies Multics to
the remote system.

For these systems, the Multics multiplexer must be configured to use
signon_mode (see MAM Communications).  Before data transmission is
permitted, the signon_record control order must be issued on an I/O
switch attached to the operator's console subchannel of the
multiplexer.

If the remote system does not expect a SIGNON record, the
no_signon_record control order can be used to validate that the
multiplexer channel is properly configured.


Character set specification:
This I/O module allows the specification of the character set used by
the remote system through the -terminal_type attach option.

If -terminal_type is given, the referenced terminal type must be
defined in the site's TTT with an input and an output translation
table.  This module uses these translation tables to convert data from
the remote system's character set to ASCII and vice versa.

If -terminal_type is not given, the remote system is assumed to use
EBCDIC.  In this case, the subroutine ascii_to_ebcdic_ is used to
convert data sent to the system; the subroutine ebcdic_to_ascii_ is
used to convert data received from the remote system.


Notes:
As stated above, this I/O module is used to simulate the operation of a
single device of a HASP workstation.

If the simulated device is a card reader, the caller supplies records
to this module that are then formatted and transmitted to the remote
host; in other words, a card reader attachment through this switch is
an output-only attachment.

Similarly, this I/O module receives records from the remote host when
the simulated device is either a line printer or a card punch.  Thus,
line printers and card punches attached through this I/O module are
input-only devices.


Special I/O daemon software is provided to allow Multics to simulate
the operations of a workstation in order to submit jobs to remote
systems and receive those jobs' output print and punch files.  This
workstation simulator uses this I/O module for communications with the
remote host.


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
