02/12/85  emacs

Syntax as a command:  emacs {-control_args} {paths}


Function: enters the Emacs text editor, which has a large repertoire
of requests for editing and formatting text and programs.


Arguments:
paths
   are pathnames of segments to be read in.  Each is put into its own
   appropriately named buffer.  Star and archive component pathnames
   are accepted.


Control arguments:
-apply function_name arg1 arg2...argi,
-ap function_name arg1 arg2...argi
   evaluates (function_name 'arg1 'arg2...'argi), where the args are
   arguments to the named Lisp function (e.g., an Emacs request).  This
   is valuable for constructing abbreviations.  This control argument
   must be the last argument.
-line_length N, -ll N
   sets the line length to be different from the terminal's default
   line length.
-force, -fc
   permits the use of terminal type control arguments (-ttp, -query,
   -reset) when in the video system.


-line_length N, -ll N
   sets the line length to be different from the terminal's default
   line length.
-line_speed N, -ls N
   indicates line speed to obtain proper padding (for ARPANet users),
   where N is the output line baud rate in bits/second.  It is ignored
   in the video system.
-macros path, -macro path, -mc path
   loads the segment, specified by path, as Lisp, so that features
   therein are available.
-no_force, -nfc
    prevents the use of terminal type control arguments when in the
   video system.  (Default)
-no_start_up, -no_startup, -ns
   prevents use of your startup (start_up.emacs).


-page_length N, -pl N
   sets the page length to be different from the terminal's default
   page length.
-query
   queries you for a terminal type without checking the Multics
   terminal type first.  The query response can be any recognized
   editor terminal type.  (See "Notes.")


-reset
   specifies that Emacs disregard the terminal type set by
   -terminal_type and set it in accord with the Multics terminal type
   instead (see "Notes").
-terminal_type STR, -ttp STR
   specifies your terminal type to Emacs, where STR is any recognized
   editor terminal type or the pathname of a control segment to be
   loaded.  If STR is not a recognized type, Emacs queries you after
   entry, providing a list of recognized types.  (See "Notes.")


Notes: None of the terminal type control arguments (-ttp, -reset,
-query, -line_speed) are generally necessary; they are only used for
solving various communications problems.

The control arguments -query, -reset, and -terminal_type are
incompatible.  You can't use them in the video system unless you
provide -force.

Emacs is a display-oriented editor designed for use on CRT terminals.
Several modes of operation for special applications (e.g., RMAIL, PL/I,
FORTRAN) are provided; the default mode entered is Fundamental major
mode.


For a basic introduction to the Emacs Text Editor and descriptions of
the most generally used editing requests of emacs fundamental mode, see
the Introduction to Emacs Text Editor (CP31).  You can find a tutorial
introduction to the Emacs Text Editor, fully describing the editing
requests available and containing instructions for using special
features of emacs, in the Emacs Text Editor User's Guide (CH27).  A
guide for programmers writing extensions and terminal control modules
(CTLs) in Lisp is provided in the Emacs Extension Writer's Guide
(CJ52).

You can get a complete list of available requests in emacs via the
make-wall-chart request while in emacs.  Type the following:
   emacs
   ESC-X make-wall-chart


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
