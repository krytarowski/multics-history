06/30/86  print_data_


Entry points in print_data_:
   (List is generated by the help command)


:Entry: print_data_: 06/30/86  print_data_

Function: formats and prints the output of a PL/I put data statement.
The output switch for printing may be specified, as well as various
formatting options.

Syntax:
declare print_data_ entry (char (*) varying, ptr, fixed bin (35));
call print_data_ (put_data_string, print_data_info_ptr, code);


Arguments:
put_data_string
   is the output of a PL/I put data statement.  Usually obtained as
   follows:  put data (xxx) string (put_data_string), where xxx is a
   structure whose values are to be formatted and printed.  (Input)
print_data_info_ptr
   is a pointer to a structure which describes the formatting options
   to be used for printing the input.  See Notes below.  (Input)
code
   is a system status code.  (Output)


:Entry: rs: 06/30/86  rs

Function: formats the output of a PL/I put data statement.  The result
is returned in a string.  Various formatting options may be specified.

Syntax:
declare print_data_$rs entry (char (*) varying, ptr, char (*) varying,
			fixed bin (35));
call print_data_$rs (put_data_string, print_data_info_ptr,
			return_string, code);


Arguments:
put_data_string
   is the output of a PL/I put data statement.  Usually obtained as
   follows:  put data (xxx) string (put_data_string), where xxx is a
   structure whose values are to be formatted and printed.  (Input)
print_data_info_ptr
   is a pointer to a structure which describes the formatting options
   to be used for printing the input.  See Notes below.  (Input)
return_string
   is a string in which the output is returned.  (Input/Output)
code
   is a system status code.  (Output)


Notes: The include file pointed to by print_data_info_ptr is declared
in print_data_info.incl.pl1 as follows:

dcl print_data_info_version_1 fixed bin options (constant) init (1)
				internal static;

dcl	print_data_info_ptr		ptr;
dcl	1 print_data_info		based (print_data_info_ptr),
	  2 version		fixed bin,
	  2 indentation		fixed bin,
	  2 value_column		fixed bin,
	  2 output_switch		ptr,
	  2 flags,
	    3 octal		bit (1) unal,
	    3 hex			bit (1) unal,
	    3 pad			bit (34) unaligned,
	  2 intervals		char (256) varying;


where:

version
   is the version of this structure.  It should be set to
   print_data_info_version_1.
indentation
   is the number of spaces by which structure level names are indented.
value_column
   is the column in which the printing of values begins.  The structure
   names are indented, but the values all begin in the same column, so
   this value should allow a reasonable amount of space for structure
   names so they don't overlap the values column.
output_switch
   is the output switch to use.  This is ignored for the rs entry.  If
   it is null then user_output is used.


octal
   specifies that bit string values should be converted to octal.  This
   is incompatible with the hex flag.  The bit string value must be an
   integral multiple of 3 bits long in order to be converted, otherwise
   it is not converted.
hex
   specifies that bit string values should be converted to hexadecimal.
   This is incompatible with the octal flag.  The bit string value must
   be an integral multiple of 4 bits long in order to be converted,
   otherwise it is not converted.
intervals
   is not currently supported and must be set to the null string ("").


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
