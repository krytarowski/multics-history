12/01/86	msmi_

This subroutine provides a means of obtaining information about a
MRDS submodel.


Entry points in msmi_:
       (List is generated by the help command)


:Entry: close_submodel: 12/01/86  msmi_$close_submodel

Function:  This entry disassociates an opening name and a submodel
to prevent further access to that submodel through that opening_name.


Syntax:
declare msmi_$close_submodel entry (char(*), fixed bin(35));
call msmi_$close_submodel (opening_name, code);


Notes:  The opening_name is the one given in the call to
msmi_$open_submodel for the submodel that is to be closed.


:Entry: get_attribute_data: 12/01/86  msmi_$get_attribute_data

Function:  This entry returns the attribute information for the
given relation.


Syntax:
declare msmi_$get_attribute_data entry (char(*), char(*), ptr, fixed bin, ptr,
   fixed bin(35));
call msmi_$get_attribute_data (opening_name, rel_name, area_ptr,
   structure_version, attribute_data_ptr, code);


Notes:  The data about the attributes for a given relation in the
submodel is returned in the following structure for version 1:
 dcl 1 mrds_dsm_attribute_data based
       (mrds_dsm_attribute_data_ptr) aligned,
     2 version fixed bin,
     2 number_of_attributes fixed bin,
     2 attributes (mrds_dsm_attribute_data_num_atts refer
       (mrds_dsm_attribute_data.number_of_attributes)),
       3 submodel_attribute_name char(64),
       3 model_attribute_name char(32),
       3 read_access bit(1) unal,
       3 modify_access bit(1) unal,
       3 null_access bit(1) unal,
       3 mbz1 bit(33) unal;


:Entry: get_relation_data: 12/01/86  msmi_$get_relation_data

Function:  This entry returns information about each relation in
a submodel.


Syntax:
declare msmi_$get_relation_data entry (char(*), ptr, fixed bin, ptr,
   fixed bin(35));
call msmi_$get_relation_data (opening_name, area_ptr,
   structure_version, relation_data_ptr, code);


Notes:  The information about each relation in the submodel is returned
in the following structure for version 1:
 dcl 1 mrds_dsm_relation_data based
       (mrds_dsm_relation_data_ptr) aligned,
     2 version fixed bin,
     2 number_of_relations fixed bin,
     2 relations (mrds_dsm_relation_data_num_rels refer
       (mrds_dsm_relation_data.number_of_relations)),
       3 submodel_relation_name char(64),
       3 model_relation_name char(32),
       3 append_access bit(1) unal,
       3 delete_access bit(1) unal,
       3 null_access bit(1) unal,
       3 mbz1 bit(36) unal;


:Entry: get_submodel_info: 12/01/86  msmi_$get_submodel_info

Function:  This entry returns general information about the submodel.


Syntax:
declare msmi_$get_submodel_info entry (char(*), ptr, fixed bin, ptr,
   fixed bin(35));
call msmi_$get_submodel_info (opening_name, area_ptr,
   structure_version, submodel_info_ptr, code);


Notes:  The general submodel information is returned in the following
structure for version 1:
 dcl 1 mrds_dsm_submodel_info based
    (mrds_dsm_submodel_info_ptr) aligned,
     2 version fixed bin,
     2 submodel_version fixed bin,
     2 database_path char(168),
     2 submodel_path char(168),
     2 date_time_created fixed bin(71),
     2 creator_id char(32);


:Entry: open_submodel: 12/01/86  msmi_$open_submodel

Function:  This entry associates a submodel with an opening_name so
that it can be used by other msmi_ entries.  The same submodel
may be associated with multiple opening names.


Syntax:
declare msmi_$open_submodel entry (char(*), char(*), fixed bin(35));
call msmi_$open_submodel (opening_name, path, code);


Notes:  The opening name supplied by the user identifies this opening
of the submodel given by path.









                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
