03/05/85  arithmetic_to_ascii_


The arithmetic_to_ascii_ subroutine formats any arithmetic value into a
compact ascii form.  An integer, fractional, or exponential format can
be used, depending on the number to be converted.  Fixed-point numbers
are truncated during the formatting process; floating-point numbers are
rounded.


Entry points in arithmetic_to_ascii_:
   (List is generated by the help command)


:Entry: arithmetic_to_ascii_: 03/05/85  arithmetic_to_ascii_


Function:
This entry point formats any arithmetic value into a compact ascii 
form.


Syntax:
declare arithmetic_to_ascii_ entry (ptr, fixed bin, bit(1) aligned,
     fixed bin, fixed bin, char(132) varying);
call arithmetic_to_ascii_ (v_ptr, type, packed, precision, scale,
     result);


Arguments:
v_ptr
   is a pointer to the value to be converted.  (Input) It can be any
   arithmetic data type (real or complex, fixed or float, binary or
   decimal, single or double precision).
type
   is a standard Multics descriptor type.  (Input) See the Programmer's
   Reference Manual for a list of standard Multics data types.
packed
   indicates whether the value is packed or unpacked.  (Input)
   "0"b   value is unpacked.
   "1"b   value is packed.
precision
   is the precision of the value to be converted.  (Input)
scale
   is the scale factor of the value to be converted.  (Input)
result
   is the character-string representation of the value to be converted;
   it contains no blanks.  (Output)


Notes:  If the value is complex, the real and imaginary parts are
formatted by correcting them to float decimal(59) and converting each
part separately.  The result returned by the arithmetic_to_ascii_
subroutine is the concatenation of the real and imaginary converted
parts, with a leading sign and trailing "i" supplied for the imaginary
part.


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
