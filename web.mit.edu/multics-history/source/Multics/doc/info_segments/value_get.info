05/16/88  value_get, vg

Syntax as a command:  vg name {-control_args}


Syntax as an active function:  [vg name {-control_args}]


Function: returns the character string value of a name, as set by
value_set.  If the name has no value and you choose -default, an error
occurs.  Values, except for per-process values, are stored in a value
segment with suffix "value" (see "Notes on value segment").


Arguments:
name
   is a character string.  It can be -name STR to specify a name
   beginning with a minus sign, to distinguish it from a control
   argument.


Control arguments:
-call STR
   if no value is found for name, the active function [STR] is expanded
   to produce a value, which is both set for name and returned.
   Enclose STR in quotes and omit the brackets if it contains special
   characters such as spaces.  This control argument is incompatible
   with -default.
-data
   specifies that the value of the name is actually an uninterpreted
   data region, normally accessable by using the value_$set_data and
   value_$get_data subroutine interface.  The contents of the region
   will be returned in an uninterpreted form.  See "Notes on data-type
   values".


-default STR, -df STR
   specifies a default value to be returned if none is set.  Enclose
   STR in quotes if it contains special characters.  A null string is
   returned if STR is "".  If you don't give -default and no value
   exists, an error occurs.
-pathname path, -pn path
   specifies a value segment other than the current default one,
   without changing the default (see "Notes on value segment").  It is
   incompatible with -perprocess.


-permanent, -perm
   does not look for a per-process value.  The default is to return the
   per-process value if one exists, otherwise to return the value
   stored in the value segment; if none exists, an error occurs.
-perprocess, -pp
   looks only for a per-process value, not for one stored in any value
   segment.  If a per-process value is not found, an error occurs.
-pop
   deletes the current value that it prints or returns.  If a previous
   value was saved by value_set -push, that value is reinstated.


Access required: You require read access on the value segment, except
for per-process values.


Notes: Per-process values are stored in a temporary value segment in
the process directory and disappear when the process terminates.

By default, both "vg name" and "vg name -pn path" return the
per-process value of name if there is one; otherwise, they return the
value stored in the appropriate value segment.  By contrast, "vg -pp"
returns only the per-process value, and "vg -perm" returns only the one
in the value segment.

See value_defined, value_delete, value_list, value_path, value_set, and
value_set_path.


Notes on data-type values:  The contents of data-type values are
normally used to hold data structure information, which contain
non-ascii (binary) information.  If the -data argument is used,
the value of the named data-type element will be returned with no
conversion performed.  It is suggested that the output be routed
into a temporary segment by using the file_output command or
the I/O redirection facility of the command processor (;|).

The -data control argument is incompatible with the -call, -default,
pop or -perprocess control arguments.


Notes on value segment: The value segment searched is either the one
specified by -pathname or the current default value segment.  The
default segment is initially
   [home_dir]>[user name].value
but you can change it by value_set_path.  Use of -pathname does not
change the default segment.


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
