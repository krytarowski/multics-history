02/08/84  assign_


Entry points in assign_:
   (List is generated by the help command)


:Entry: assign_: 02/08/84  assign_

Function: assigns a specified source value to a specified target.
This subroutine handles the following data types: 1-12, 19-22, 33, 34,
41-46.  Any other type will produce an error.  It uses rounding in the
conversion when the target is floating point or when the source is
floating and the target is character, and uses truncation in all other
cases.


Syntax:
declare assign_ entry (ptr, fixed bin, fixed bin(35), ptr, fixed bin,
     fixed bin(35));
call assign_ (target_ptr, target_type, target_length, source_ptr,
     source_type, source_length);


Arguments:
target_ptr
   points to the target of the assignment; it can contain a bit offset.
   (Input)
target_type
   specifies the type of the target; its value is 2*M+P where M is the
   Multics standard data type code (see the Programmer's Reference
   Manual) and P is 0 if the target is unpacked and 1 if the target is
   packed.  (Input)


target_length
   is the string length or arithmetic scale and precision of the
   target.  If the target is arithmetic, the target_length word
   consists of two adjacent unaligned halfwords.  The left halfword is
   a fixed bin(17) representing the signed scale and the right halfword
   is a fixed bin(18) unsigned integer representing the precision.
   (Input) The include file encoded_precision.incl.pl1 declares this
   as:
      dcl 1 encoded_precision  based aligned,
            2 scale            fixed bin(17) unaligned,
            2 prec             fixed bin(18) unsigned unaligned;


source_ptr
   points at the source of the assignment; it can contain a bit offset.
   (Input)
source_type
   specifies the source type using the same format as target_type.
   (Input)
source_length
   is the string length or arithmetic scale and precision of the source
   using the same format as target_length.  (Input)


:Entry:  computational_:  02/08/84 assign_$computational_


Function: assigns a specified source value to a specified target.  It
can handle any computational Multics data type including all PL/I
computational data and all COBOL and FORTRAN data types.  This entry
uses the same rules for rounding and truncation as assign_.


Syntax:
declare assign_$computational_ entry (ptr, ptr, fixed bin(35));
call assign_$computational_ (tar_str_ptr, src_str_ptr, code);


Arguments:
tar_str_ptr
   is a pointer to a structure which defines the address and attributes
   of the target.  The format of this structure is defined in
   computational_data.incl.pl1.  (Input)
src_str_ptr
   is a pointer to a structure giving the attributes of the source.
   This structure has the same format as the one used for the target.
   (Input)
code
   is a standard system code.  It will be zero if the conversion was
   sucessful, or error_table_$bad_conversion if either data type was
   not computational.  It is also possible that the conversion
   condition will be signalled, if the source data can not be converted
   to the requested target type.  (Output)


:Entry:  assign_round_:  02/08/84 assign_$assign_round_


Function: assigns a source value to a target value, but always rounds.
Otherwise it is identical to assign_.


Syntax:
declare assign_$assign_round_ entry (ptr, fixed bin, fixed bin(35),
     ptr, fixed bin, fixed bin(35));
call assign_$assign_round_ (target_ptr, target_type, target_length,
     source_ptr, source_type, source_length);


Arguments:
target_ptr
   points to the target of the assignment; it can contain a bit offset.
   (Input)
target_type
   specifies the type of the target.  (Input)
target_length
   is the string length or arithmetic scale and precision of the
   target.  (Input)


source_ptr
   points at the source of the assignment; it can contain a bit offset.
   (Input)
source_type
   specifies the source type using the same format as target_type.
   (Input)
source_length
   is the string length or arithmetic scale and precision of the source
   using the same format as target_length.  (Input)


:Entry:  assign_truncate_:  02/08/84 assign_$assign_truncate_


Function: assigns a source value to a target value, but always
truncates.  Otherwise it is identical to assign_.


Syntax:
declare assign_$assign_truncate_ entry (ptr, fixed bin, fixed bin(35),
     ptr, fixed bin, fixed bin(35));
call assign_$assign_truncate_ (target_ptr, target_type, target_length,
     source_ptr, source_type, source_length);


Arguments:
target_ptr
   points to the target of the assignment; it can contain a bit offset.
   (Input)
target_type
   specifies the type of the target.  (Input)
target_length
   is the string length or arithmetic scale and precision of the
   target.  (Input)


source_ptr
   points at the source of the assignment; it can contain a bit offset.
   (Input)
source_type
   specifies the source type using the same format as target_type.
   (Input)
source_length
   is the string length or arithmetic scale and precision of the source
   using the same format as target_length.  (Input)


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
