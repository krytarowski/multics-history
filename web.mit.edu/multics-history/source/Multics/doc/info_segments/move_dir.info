12/08/88	move_dir, mvd

Syntax: mvd source_dir {target_dir} {entry_type_keys} {-control_args}


Function:	 moves a directory and its subtree, including all of the
associated attributes, to another point in the hierarchy.


Arguments:
source_dir
   is the pathname of the directory to be moved.	The star convention
   is allowed to match directory names.	 Matching names associated with
   other storage types are ignored.  The source_dir cannot be contained
   in target_dir.
target_dir
   is the new pathname for source_dir.	If the entryname is different
   from one already on source_dir, it is added to the existing names.
   If target_dir is not specified, source_dir is moved to the working
   directory and given the same entryname.  The equal convention is
   allowed.


Control arguments:
-brief, -bf
   suppresses the printing of warning messages.
-force
   continues execution when target_dir already exists, without asking
   the user.  If the -force control argument is not specified, the user
   is queried.
-replace, -rp
   deletes the contents of target_dir existing before the copying
   begins.  If target_dir is non-existent or empty, this control
   argument has no effect.  The default is to append the contents of
   the source directory to the target directory if it already exists.


List of entry_type_keys:  These keys control what type of storage
   system entry is moved.  The default is to move all entries.  The
   keys are--
-branch, -br
-directory, -dr
-file, -f
-link, -lk
-multisegment_file, -msf
-non_null_link, -nnlk
-segment, -sm
   If one or more entry_type_keys are specified, but not the -directory
   key, the subtree of source_dir will not be followed.


Access required:  Status and modify permission are required for
source_dir and all of the directories in its tree, and its containing
directory.  If target_dir does not exist, append permission is required
for its containing directory.	 If it does exist, modify and append
permission for target_dir are required.	 This command does not force
access.

The access control list associated with source_dir is moved to
target_dir.


Notes:  If target_dir is contained in source_dir, an appropriate error
message is printed and control is returned to command level.

If name duplication occurs while appending the source_dir to the
target_dir and the name duplication occurs between directories, the
user is queried whether processing should continue.  If the user
answers yes, the contents of the directory are moved (appended) to
target_dir, but none of the attributes of that directory are moved.  If
the answer is no, the directory and its subtree is skipped.	 If name
duplication should occur between segments, the user is asked whether to
delete the existing one in target_dir.	(See the move command.)


Links are translated; that is, if there are references to a source
directory in a link pathname, the link pathname is changed to refer to
the target directory.

If part of the tree is not moved, problems with link translation may
occur.  If the target of the link in the source_dir tree was in the
part of the tree not moved, there may be no corresponding entry in the
target_dir tree.  Hence, translation of the link (presumably originally
non-null) will cause the link to become null.


If moving a non-empty mailbox requires that the max_length
characteristic of the source be applied to the target, then the target
max_length value will take on the default value that was given it when
created.

See also the copy, move, and copy_dir commands.


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
