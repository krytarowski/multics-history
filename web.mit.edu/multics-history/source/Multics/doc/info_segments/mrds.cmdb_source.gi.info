05/15/85  mrds.cmdb_source.gi.info

Syntax:  The basic syntax of the source text is as follows.

              domain: domain_name1 declaration1 {options1} {,
              ...,
              domain_nameN declarationN {optionsN} } ;

  {attribute: attr_name1 domain_name1 {,
              ...,
              attr_nameN domain_nameN} ; }

    relation: relation_name1 (attr_name1* attr_name2*...attr_nameN) {,
              ...,
              relation_nameN (attr_name1* attr_name2*...attr_nameN) } ;

      {index: relation_name1 (attr_name1 attr_name2...attr_nameN) {,
              ...,
              relation_nameN (attr_name1 attr_name2...attr_nameN) } ; }


Function:  This file describes the format of the data model definition
source text that is input to the create_mrds_db command for creating an
unpopulated mrds data base.  The source segment must have cmdb as a
suffix.

Semantics:  The relation statement defines that relationI is to be made
up of the attributes whose names are given, and that those attribute
names followed by an asterisk, are to be part of the key field for
searching that relation.


The domain statement specifies the data type that a domain, and by
default an identically named attribute, will assume.

The attribute statement defines additional attributes to have the data
type of the corresponding domain whose name is given.

The index statement specifies which attributes for relationI are to be
secondary indexed, to provide for faster searching.


In the domain statement, declarationI is a PL/I data type declaration
for any signed binary or decimal numeric data type, or bit or character
string type.

All names for domains or attributes can be up to 32 characters long.
Relation names can be 30 characters long, starting with a letter, and
composed of letters, digits, underscores, and hyphens.


Domain options:  The options on the domain statement may be chosen from
the following.

-check_procedure path
   specifies the data verification procedure used for the domain.  The
   procedure accepts the data value of the domain data type, and
   returns 1 for OK, 0 for not, in a fixed bin(35) indicator.

-decode_procedure path
   specifies the procedure used to convert data bases into users data
   type when retrieving.  The parameters are (db_value, user_value,
   code), code = fixed bin(35) status code, db_value is input,
   user_value is output, both of domain data type.


-encode_procedure path
   specifies the procedure used to convert users to data base data type
   when storing.  The parameters are (user_value, db_value, code), code
   = fixed bin(35) status code, user_value is input, db_value is
   output, both of domains data type.

-decode_declaration declaration
   specifies the declaration of the data type for user_value if it is
   to be different than the domain data type for encoding/decoding.


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
