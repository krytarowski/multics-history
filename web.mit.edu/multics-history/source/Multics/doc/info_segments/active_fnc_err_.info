01/12/82	active_fnc_err_


Entry points in active_fnc_err_:
   (List is generated by the help command)


:Entry: active_fnc_err_: 01/12/82 active_fnc_err_


Function: is called by active functions when they detect unusual
status conditions.  It formats an error message and then signals
the condition active_function_error.  The default handler for this
condition prints the error message and then returns the user to
command level.  (See "List of System Conditions and Default Handlers"
in Section 6 of the MPM Reference Guide for further information.)

Since this subroutine can be called with a varying number of arguments,
it is not permissible to include a parameter attribute list in its
declaration.


Syntax:
declare active_fnc_err_ entry options (variable);
call active_fnc_err_ (code, caller, control_string, arg1, ..., argN);


Arguments:
code
   is a standard status code (fixed bin(35)).  (Input)
caller
   is the name (char(*)) of the calling procedure.  (Input) It can be
   either varying or nonvarying.
control_string
   is an ioa_ subroutine control string (char(*)).  (Input) (The ioa_
   subroutine is described in the MPM Subroutines.)  This argument is
   optional.  See "Notes" below.
argI
   are ioa_ subroutine arguments to be substituted into control_string.
   (Input) These arguments are optional.  (However, they can only be
   used if the control_string argument is given first.)  See "Notes"
   below.


Notes:  The error message prepared by the active_fnc_err_ subroutine
has the format:
   caller:  system_message user_message
where:
   caller
      is the caller argument described above and should be the name 
      of the procedure detecting the error.
   system_message
      is a standard message from a standard status table corresponding
      to the value of code.  If code is equal to 0, no system_message 
      is returned.
   user_message
      is constructed by the ioa_ subroutine from the control_string 
      and argI arguments described above.  If the control_string and 
      argI arguments are not given, user_message is omitted.


:Entry: suppress_name:  01/12/82  active_fnc_err_$suppress_name


Function:	 This entrypoint is functionally the same as active_fnc_err_,
but it suppresses the caller name and the colon at the beginning of the
error message.  The caller name is nevertheless passed to the
active_function error handler.


Syntax:
declare active_fnc_err_$suppress_name entry options (variable);
call active_fnc_err_$suppress_name (code, caller, control string,
     arg1,...argN);


Arguments:
code
   is a standard status code (fixed bin(35)).  (Input)
caller
   is the name (char(*)) of the calling procedure.  (Input) It can be
   either varying or nonvarying.
control_string
   is an ioa_ subroutine control string (char(*)).  (Input)  This
   argument is optional.
argI
   are ioa_ subroutine arguments to be substituted into control_string.
   (Input) These arguments are optional.  (However, they can only be
   used if the control_string argument is given first.)  


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
