04/05/84  cumulative_page_trace, cpt

Syntax:  cpt command_line {-control_args}


Function:  accumulates page trace data so that the total set of pages
used during the invocation of a command or subsystem can be determined.
The command accumulates data from one invocation of itself to the next.
The output is in tabular format showing all pages that have been
referenced by your process.  You can obtain the same trace as that
produced by page_trace.


Arguments:
command_line
   is a character string to be interpreted by the command processor as
   a command line.  If this character string contains blanks, enclose
   it in quotes.  All procedures invoked as a result of processing this
   command line are metered by cumulative_page_trace.


Control arguments:
-count, -ct
   prints the accumulated results, giving the number of each page and
   the number of faults for each page.  Do not use -count with -print
   or -total (see "Notes" below).
-flush
   clears primary memory before each invocation of the command line and
   after each interrupt.  This helps you determine the number of page
   faults but increases the cost.
-interrupt N, -int N
   interrupts execution every N virtual CPU milliseconds for page fault
   sampling.  The default is 500 CPU milliseconds.
-long, -lg
   produces output in long format, giving full pathnames.


-loop N
   calls the command to be metered N times.
-print, -pr
   prints the accumulated results, giving the number of each page
   referenced.  Do not use -print with -count or -total (see "Notes.")
-print_linkage_faults
   prints all accumulated linkage faults and calls the hcs_$make_ptr
   entry point.
-reset, -rs
   resets the table of accumulated data.  If the table is not reset,
   data from the current use of cumulative_page_trace is added to that
   obtained earlier in the process.
-short, -sh
   formats output for a line length of 80.


-sleep N
   waits for N seconds after each call to the command being metered.
-temp_dir path, -td path
   creates temporary segments, used for flushing main memory, in the
   directory identified by path.  The default is to create them in the
   process directory.  Use -temp_dir with -flush.
-timers
   includes all faults between signal and restart.


-total, -tt
   prints the total number of page and segment faults and the number of
   pages referenced for each segment.  Do not use -total with -count or
   -print (see "Notes.")
-trace_linkage_faults
   accumulates linkage, page, and segment fault information.
-trace path
   writes the trace on the segment "path" using an I/O switch named
   "cpt.out"; cumulative_page_trace attaches and detaches this switch.


Notes:  This command operates by sampling and reading the system trace
array after invocation of a command and at repeated intervals.

At least one of three generic operations must be requested.  They may
all be combined and, if so, are performed in the following order:
resetting the table of accumulated data, calling the command to be
metered, applying the specified control arguments, and printing the
results in the specified format.

If 500 milliseconds is too long, messages indicate that some page
faults may have been missed; choose then a smaller value, but the cost
of a smaller value is high and may cause additional side effects.  If
the command or subsystem to be metered includes the taking of CPUT
interrupts, then supply -timers.  This control argument includes some
of the page faults of the metering mechanism as well.


Only one of -count, -print, or -total can be given.  Each of these
control arguments produces printed output in a different format.  If
more than one format is desired, the command must be invoked once for
each format.

For -flush to operate correctly, the directory used for temporary
segments must have sufficient quota for as many pages as there are in
main memory.


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
