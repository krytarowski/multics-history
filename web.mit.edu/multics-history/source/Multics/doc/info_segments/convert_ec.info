02/29/84	convert_ec, cvec

Syntax:  cvec path {-control_args}


Function:	 converts an exec_com from one version to another.  By
default, it converts a Version 1 (old version) exec_com to Version 2,
inserting the line "&version 2" at the beginning.


Arguments:
path
   is the pathname of an exec_com or absin segment.  The ec suffix is
   added if neither suffix is present.  The star convention is allowed.


Control arguments:
-chase
   finds and chases links matching path if path is a starname.  The
   default is -chase if path is not a starname, -no_chase if path is a
   starname.
-check, -ck
   prints warning and error messages but does not change the segment or
   produce an output file.
-force, -fc
   in the absence of -output_file and -check, forces the original
   segment to be overwritten even if errors occur.  The default is to
   create a copy in the process directory if errors occur.
-no_chase
   does not operate on links.	 The default is -chase if path is not a
   starname, -no_chase if path is a starname.


-no_check, -nck
   converts the segment in addition to printing warning and error
   messages.  (Default)
-no_force, -nfc
   does not replace the original segment or create an output file with
   -output_file if errors (as opposed to warnings) occur.  (Default)
-output_file path, -of path
   places the converted segment in path instead of the original segment
   specified by path.  The equal convention is allowed in path.  If the
   output segment already exists, it is overwritten.  If errors occur,
   the converted segment is placed instead in the process directory.


-severity N, -sv N
   suppresses warnings/errors with severities lower than N, where N is
   a number from 0 to 3.  The default is 2.  Severities are as follows:
      0   warnings requiring no conversion.
      1	warnings (nonstandard but valid syntax), such as
	unrecognized &strings converted to &&string.
      2	errors that can be converted, such as unrecognized &string
	at the beginning of a line converted to a comment.
      3	errors that cannot be converted.


Access required: Read access on path1, write access on the output file
or append on the parent of the output file if the output file does not
exist.


Notes:  Use of -output_file is recommended rather than overwriting the
original segment, so that original and converted copies can be
compared.	 The simple conversion rules can, in complicated cases,
change the intent of expressions; therefore, a copy of the original
should be kept until the converted exec_com has been shown to operate
correctly.


List of conversions (v1 -> v2):
leading and trailing white space -> literals such as &SP
   this conversion is performed because Version 2 strips leading and
   trailing white space from lines.
&<whitespace> -> &-
   new comment sequence.
&...& -> &&...&&
   strings of two or more ampersands are doubled.
&(...) -> &&(...)
   unrecognized by Version 1, this construct is used in Version 1 ec's
   to pass &(...) parameters to other programs.
&NN -> &(NN)
   Version 2 requires parameters with two or more digits to have the
   digits enclosed in parentheses.


&0, &q0 -> &ec_path
&r0 -> "&ec_path"
   new construct to get the expanded, suffixed pathname of the ec.
&if [...] -> &if &[...]
   the &[...] construct is uniformly required to expand active
   functions in control lines.
&command_line ... -> &trace &command ...
&comment_line ... -> &trace &comment ...
&control_line ... -> &trace &control ...
&input_line ... -> &trace &input ...
   new tracing statement &trace.


&unrecognized (beginning of line) -> &-&unrecognized
   comment entire line if it begins with unrecognized keyword.
&unrecognized -> &&unrecognized
   all other unrecognized Version 1 &keywords are converted to
   literals.



                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
