05/14/84  bootload_fs

Syntax:  bootload_fs operation {args}


Function:  allows the user to operate on a copy of the bootload Multics
(bce) file system, including the ability to extract the real bce file
system and to replace it with this operating copy.


Arguments:
operation
     is an operation listed below under "List of Operations".
args
     are arguments required by the designated operation.


List of Operations:

     The operations  are grouped into two  categories.  The first
group determines the location of the  user's copy of the bce file
system; operations  in this group  can also extract  the real bce
file  system and  overwrite the bce  file system  with the user's
copy.  The second group operates on objects in the user's working
copy of the bce file system.


Operation:  read_partition, rpart

     The read_partition operation reads the bce file system from a
specified  disk partition  into the  user's working  copy thereof
overwriting the previous contents of the user's copy.


Syntax:  bootload_fs read_partition pv_name part_name


Arguments:
pv_name
     is the name of a mounted physical volume.
part_name
     is  the name  of a partition  on the specified  volume to be
     read.


Notes:
     Acess to hphcs_ is required.


Operation:  write_partition, wpart

     The  write_partition  operation replaces  the bce  file system
found in the specified disk partition with the user's local copy.


Syntax:  bootload_fs write_partition pv_name part_name


Arguments:
pv_name
     is the name of a mounted physical volume.
part_name
     is  the name  of a partition  on the specified  volume to be
     read.


Notes:
     Specifying "-force"  will suppress  the query  as to
overwriting the old partition.

     Access to hphcs_ is required.


Operation:  use_partition, upart

     The  use_partition operation  copies the contents  of a user
specified segment  to become the  user's working copy  of the bce
file system.


Usage:  bootload_fs use_partition path


Arguments:
path
     is  the  pathname  of  a segment  which  will  overwrite the
     current  contents  of  the  user's local  copy  of  the file
     system.


Operation:  save_partition, svpart, spart

     The save_partition  operation saves the  current contents of
the user's local copy of the bce file system into a segment.


Usage:  bootload_fs save_partition path


Arguments:
path
     is the pathname of a  segment which will be overwritten with
     the user's working copy of the file system.


Operation:  discard_partition, dpart

     The discard  operation discards the contents  of the working
copy of the bce file system.   This operation must be followed by
another read_partition, use_partition of init_partition operation.


Usage:  bootload_fs discard_partition {-force}


Operation:  init_partition, ipart

      The init_partition operation clears out the contents of the
working  copy   of  the  bce   file  system.   It   differs  from
discard_partition in that the result  is a file system containing
no files;  the result of  discard_partition is no  file system at
all.


Syntax:  bootload_fs init_partition {-force}


Operation:  read_file, read, r

     The read_file operation extracts a file from the working copy
of  the  bce file  system and  places it  into a  Multics storage
system file.


Syntax:  bootload_fs read_file file_name path


Arguments:
file_name
     is the  name of a  file within the  working copy of  the bce
     file system.
path
     is the pathname of the Multics  file into which the bce file
     is to be copied.


Operation:  write_file, write, w

     The write_file operation places a copy of a  Multics storage
system file in the working copy of the bce file system.


Usage:  bootload_fs write_file path file_name


Arguments:
path
     is the name of a file  in the Multics hierarchy to be copied
     into the bce file system.
file_name
     is the name the copy is to have within the bce file system.


Operation:  list_files, list, ls

     The  list_files operation  lists the  names and  lengths (in
characters)  of the  files in  the working  copy of  the bce file
system.


Usage:  bootload_fs list_files


Operation:  delete_file, delete, dl

      The  delete_file operation  deletes files  from the working
copy of the bce file system.


Usage:  bootload_fs delete_file file_name


Arguments:
file_name
     is the  name of a  file that is  to be deleted  from the bce
     file system.


Operation:  rename_file, rename, rn

     The rename_file operation renames  a file within the working
copy of the bce file system.


Usage:  bootload_fs rename_file old_file_name new_file_name


Arguments:
old_file_name
     is the name of an existing file in the bce file system.
new_file_name
     is the new name to be given to the old file.


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
