02/25/85 meter_signal

Syntax as a command:  meter_signal {-control_args}


Function:  measures the performance of the Multics signalling
mechanism.  It sets up an environment of condition handlers and stack
frames, and then causes a specified number of zerodivide faults to
occur.  The calendar clock is read before each fault and again as the
first operation in the zerodivide condition handler.  The difference
between these values is recorded and printed on the terminal.  The mean
and minimum values for all zerodivide faults caused in an invocation
are computed.


Control arguments:
Each control argument must include a decimal value (N) and can be
specified in any order.
-nfaults N
   specifies how many zerodivide faults to cause.  One zerodivide fault
   is the default.
-nframes N
   specifies the number of stack frames to be established between the
   frame containing the zerodivide handler and the frame that causes
   the fault.  The fault occurs in the same frame that established the
   handler if the value is one; this is the default.


-nhandlers N
   specifies the number of handlers for dummy conditions to be
   established in each stack frame.  Handlers are established for the
   conditions meter_signal1 through meter_signalN where N is the value
   specified.  The default is that no dummy interrupt handler is
   established.
-unclaimed N
   specifies that an unclaimed_signal handler should be established
   instead of the zerodivide handler.  The unclaimed_signal handler is
   established in the Nth frame where N is the value specified.  Stack
   frames are numbered from 1 to p, where p is the number in the
   -nframe control argument.  The default is that no unclaimed_signal
   handler is established.


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
