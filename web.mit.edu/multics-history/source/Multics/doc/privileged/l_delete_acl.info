03/31/83  l_delete_acl, lda

Syntax:  lda {path} {User_ids} {-control_args}


Function:  removes entries from the access control lists (ACLs) of ring
1 segments and multisegment files.  For a description of ACLs, see the
Programmer's Reference Manual (AG91).


Arguments:
path
   is the pathname of a segment, multisegment file, or directory.  If
   it is -working_directory (-wd), or omitted, the working directory is
   assumed.  If path is omitted, no User_id can be specified.  The star
   convention can be used.
User_ids
   are access control names that must be of the form
   Person_id.Project_id.tag.  All ACL entries with matching names are
   deleted.  (For a description of the matching strategy, refer to the
   set_acl command.)  If no User_id is given, the user's Person_id and
   current Project_id are assumed.


Control arguments:
-all, -a
   deletes the entire ACL with the exception of an entry for
   *.SysDaemon.*.
-directory, -dr
   deletes ACLs for only directories.  The default is segments,
   multisegment files, and directories.
-segment, -sm
   deletes ACLs for only segments and multisegment files.
-brief, -bf
   suppresses the message "User name not on ACL."


Notes:  Execute access to the installation_tools_ gate is required.

If the l_delete_acl command is invoked with no arguments, it deletes
the entry for the user's Person_id and current Project_id on the ACL of
the working directory.

An ACL entry for *.SysDaemon.* can be deleted only by specifying all
three components.  The user should be aware that in deleting access to
the SysDaemon project he prevents Backup.SysDaemon.* from saving the
segment or directory (including the hierarchy inferior to the
directory) on tape, Dumper.SysDaemon.* from reloading it, and
Retriever.SysDaemon.* from retrieving it.

The user needs modify permission on the containing directory.


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
