02/28/85  traffic_control_queue, tcq

Syntax as a command:  tcq {-control_arg}


Function:  prints out the state of the traffic control queue at the
time of the call.


Control arguments:
 -all
   print information about all processes.  The default is to print
   information only for processes in ready queues.


Access required:  This command requires access to phcs_ or
metering_gate_.


Notes:  The following items are printed out by the
traffic_control_queue command.
avq
   is the average number of processes in the eligible and priority
   queues.  This is the average number of ready, waiting, or running
   processes.
elapsed time
   is the time since traffic_control_queue was last called.  This
   equals 0 if it is the first time the program was called for the
   given process.
active last 15 sec.
   is the number of processes that changed state during the last 15
   seconds.


   The following items are printed out for each user presently in the
   ready queue.
flags
   are one-bit indicators in the active process table (APT) entry for
   the user.

The following flags are printed.
      E  process is eligible
      W  Interprocess Communication (IPC) wakeup pending
      S  stop pending
      P  process being preempted
      L  process is loaded
      D  process has descriptor base register loaded
      H  process is a hardcore process
      I  process is an idle process


The flags are preceded by a letter indicating the state of the process.
The allowed states are.

      e  empty or unused
      x  running
      r  ready
      w  waiting
      b  blocked
      s  stopped
      p  waiting for page table lock


If the flag is followed by a parenthesized letter, the letter is the
CPU tag of the processor on which that process must be run.
dtu
   is the incremental CPU time (in seconds) the process has used since
   the tcq command was last called.
dpf
   is the incremental number of page faults the process has taken since
   the tcq command was last called.
temax
   is the value (in milliseconds) of temax of the process.  Temax is
   the maximum amount of CPU time the process may use in the current
   eligibility quantum.


te
   is the value (in milliseconds) of te of the process.  Te is the
   amount of CPU time used in the current eligibility quantum.
ts
   is the value (in milliseconds) of ts of the process.  Ts is the
   amount of CPU time used since scheduling priority changed.
ti
   is the value (in milliseconds) of ti of the process.  Ti is the
   amount of CPU time used since the process interacted, or the tuning
   parameter timax, whichever is less.
tssc
   is the real time (in seconds) since the state change of the process.
event
   is the event for which the process is waiting.  If this value is 0,
   the process is not waiting.


d
   is the device identifier of the device containing the page, if the
   process is waiting for a page.  This is not currently used.
ws
   is the modified value of the working set estimate being used for the
   process.
wc
   is the number of the work class to which the process belongs.
process
   is the name of the user who owns the process.
workclass credits
   is the value (in milliseconds) of CPU time used by the workclass.


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
