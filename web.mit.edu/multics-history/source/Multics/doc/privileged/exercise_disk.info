03/26/85 exercise_disk

Syntax as a command:  exercise_disk disk_type volume_id {-control_args}


Function:  exercises a disk drive.  Maximal arm motion occurs all over
the disk, and data is written and read back later for checking at each
point.  This activity can be used to make unstable drives fail
repeatedly.


Arguments:
disk_type
   a valid Multics disk device type (e.g., d451, d500, and d501).
volume_id
   the label of the disk pack on which the test is to be run.


Control arguments:
-alternate_track, -altrk
   removes the alternate track area of the disk from the test
   parameters.  The default is to use the entire pack.
-device STR, -dv STR
   specifies the device on which you want to run the test, where STR
   can be dska_02, dskb_13, etc.).  Either this control argument or the
   assign_resource (ar) command must be used to attach an I/O disk.
-from M, -fm M
   sets the lower limit of the range of addresses to be tested to M,
   where M is a decimal integer specifying a valid cylinder number for
   the device to be tested.


-no_data_compare, -ndc
   makes no data compare on the read pass; only errors detected by the
   hardware are reported.  This enables testing of a disk pack without
   knowing what data is recorded on it.  The default is to compare the
   data with a known pattern.
-random
   the test performs random rather than sequential seeks; the test
   takes several hours.  This is the default.
-read, -r
   reads back the information on the disk pack, for checking purposes.
   The default is -write_read.
-sequential, -sq
   the test runs sequentially, writing and reading from sector 0.


-to N
   sets the high limit of the range of addresses to be tested to N,
   where N is a decimal integer specifying a valid cylinder number for
   the device to be tested.
-write, -w
   writes a known pattern over the entire disk pack.  The default is
   -write_read.
-write_read, -wr
   writes a known pattern over the entire disk pack, and then reads
   this information back for checking purposes.  This is the default.


Notes:  The exercise_disk command requests the mounting of a scratch
pack.

The assign_resource command must be used in conjunction with this
command to exercise a given drive.  Such drives must be configured as
user I/O drives (nonstorage system) via the udsk config card (described
in the Multics System Maintenance Procedures manual, Order No.  AM81)
or by the use of the set_drive_usage (sdu) initializer command.


When the -from or -to control arguments are used, testing is confined
to the range of addresses specified.  The seek pattern used in this
mode is from inner cylinder to outer cylinder, with M incrementing to N
or the maximum address of the device, and N decrementing to M or
cylinder zero.  When M reaches its inner limit, the pattern is
repeated.  Testing continues until you stop it, by hitting the break
key and then typing the release (rl) command.


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
