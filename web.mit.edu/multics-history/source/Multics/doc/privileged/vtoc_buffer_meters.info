02/28/85 vtoc_buffer_meters

Syntax as a command:  vtoc_buffer_meters {-control_arg}


Function:  provides information about the utilization of volume table
of contents (VTOC) buffers.


Control arguments:
-report_reset, -rr
   generates a full report and then performs the reset operation.
-reset, -rs
   resets the metering interval for the invoking process so that the
   interval begins at the last call with -reset specified.  If -reset
   has never been given in a process, it is equivalent to having been
   specified at system initialization time.


Access required:  This command requires access to phcs_ or
metering_gate_.


Notes:  If the vtoc_buffer_meters command is given with no control
argument, it prints a full report.

The following are brief descriptions of the metering variables printed
out by the vtoc_buffer_meters command.

The first section of the output (labeled "Routine") displays the number
of calls to VTOC buffer management routines.  In each of these, the
data is presented as number of calls and as average time between calls
(ATB).  The routines included are the following:
get_vtoce
   called to read a VTOC entry, waiting for the I/O if the desired
   VTOCE entry is not already in a VTOC buffer.


put_vtoce
   called to write a VTOC entry without waiting for the I/O to
   complete.
alloc_and_put_vtoce
   called to obtain a free VTOC entry, read the VTOC entry, and write
   it back to disk.
free_vtoce
   called to return a VTOC entry to the free pool after nulling it and
   writing the nulled entry to disk.
await_vtoce
   called to await the completion of a VTOC write I/O generated by a
   previous call (e.g., to put_vtoce).


GET_BUFFERS
   an internal routine to obtain a VTOC buffer for a specified VTOC
   entry.  It first checks whether a buffer is already assigned to the
   VTOC entry (if so, this is considered a "Hit").  If a buffer is not
   assigned, the routine selects one for the VTOC entry.
WAIT
   an internal procedure to wait for completion of all I/Os for a given
   VTOC buffer.  "TC Waits" are the number of times it was necessary to
   relinquish the CPU to wait for I/O completion.


The next section of the output (labeled "Buffer Allocation") displays
data on the performance of the buffer selection algorithm (the routine
GET_BUFFERS).
Steps
   is the number of times a buffer was examined by the selection
   algorithm.
Skips
   is the number of times a buffer was skipped by the selection
   algorithm.  This is refined by the reason for the skip, as follows:

   os - an I/O was in progress for the buffer.


   hot - the buffer contained a VTOC entry that could not be written to
   disk because of irrecoverable write errors.

   wait - some process was waiting for completion of I/O activity to
   this buffer.

The last section of the output (labelled "Disk I/Os") lists the number
of disk reads and writes to the VTOC.


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
