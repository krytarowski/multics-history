	COMPILATION LISTING OF SEGMENT xmail_error_
	Compiled by: Multics PL/I Compiler, Release 31a, of October 12, 1988
	Compiled at: Honeywell Bull, Phoenix AZ, SysM
	Compiled on: 10/24/88  1525.1 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 /*
       12*			xmail_error_
       13*
       14*	The entries to this procedure all cause an error message to be
       15*	displayed and/or logged.  They are similar in intent to com_err_
       16*	or sub_err_, but are specialized for the xmail environment.
       17*
       18*	All entries have the same calling sequence.  It must be declared
       19*	options (variable), but has the following understood structure:
       20*
       21*	entry (status, caller, disposition, ctl_string, args, ...)
       22*
       23*	where STATUS is fixed bin (35) or some other computational type,
       24*	CALLER is a fixed or varying character string,
       25*	DISPOSITION is char (1),
       26*	CTL_STRING is a fixed or varying character string,
       27*	and ARGS are arguments referenced by the CTL_STRING.
       28*
       29*	These are all analogous to com_err_ arguments except for disposition.
       30*	It defines what action is taken after printing the error message,
       31*	and may have the following values:
       32*
       33*	"c" (continue) - return to caller.
       34*          "i" (interupt) - signal quit.
       35*	"l" (log)	     - log the error.  Then return to caller.
       36*	"q" (quit)     - log the error.  Then signal quit.
       37*	"s" (stop)     - log the error.  Then stop xmail totally.
       38*
       39*	There are several entrypoints to this program.  They specify
       40*	different ways of formatting the error message.  They are:
       41*
       42*	code_last  - print the ctl_string message first, followed by the
       43*		   error code in parentheses.
       44*
       45*	code_first - print the error code first, followed by the ctl_string
       46*		   message.
       47*
       48*	no_code	 - print the ctl_string message, but not the error code.
       49*
       50*	no_print	 - print nothing, but take other actions specified by the
       51*		   disposition.
       52*
       53*	When logging takes place, all relevant information is retained,
       54*	whether it is printed or not.  In particular, the caller name is
       55*	logged even though it is never printed, so it is important that
       56*	it be passed correctly.
       57*
       58*			xmail_error_modes
       59*
       60*	This is a command entry.  It is provided for debugging purposes
       61*	to control the operation of the subroutine entries.  It is
       62*	described below.
       63**/
       64 
       65 /* Written 6/16/81 by Paul Kyzivat	
       66*
       67*   81-06-19  Paul Kyzivat: Modified to add xmail_error_modes entry 
       68*
       69*   83-07-05  DJ Schimke: Removed unreferenced dcl of sys_info$max_seg_size
       70*   and declared builtins addr, bin, and length.
       71*
       72*   83-09-14 DJ Schimke: Modified the name of the error log segment from 
       73*   Person_id.error to xmail.error since with this version (2.0) xmail shares 
       74*   the mlsys directory (Person_id.mlsys). Renamed ERROR_LOG_SUFFIX to 
       75*   ERROR_LOG_SEGMENT and changed the text of the printed message.
       76*
       77*   84-06-21 JAFalksen: Utilize date_time_$format("date_time"
       78**/
       79 
       80 /* format: style1 */
       81 xmail_error_: proc options (variable);
       82 
       83 	dcl     DEBUG		 bit (1) aligned static init ("0"b);
       84 	dcl     ERROR_LOG_SEGMENT	 char (11) init ("xmail.error") int static options (constant);
       85 
       86 code_last: entry options (variable);
       87 
       88 	call XMAIL_ERROR ("^[^s^[^a (^s^a)^;^2s^a^]^/^;^s^[^a^/^;^s^]^2s^]");
       89 	return;
       90 
       91 code_first: entry options (variable);
       92 
       93 	call XMAIL_ERROR ("^[^a ^]^[^a^2s^/^;^s^[^/^]^s^]");
       94 	return;
       95 
       96 no_code: entry options (variable);
       97 
       98 	call XMAIL_ERROR ("^2s^[^a^/^;^s^]^2s");
       99 	return;
      100 
      101 no_print: entry options (variable);
      102 
      103 	call XMAIL_ERROR ("^6s");
      104 	return;
      105 
      106 XMAIL_ERROR:
      107 	/*** must be quick ***/
      108      proc (format);
      109 
      110 	dcl     format		 char (*);
      111 
      112 	dcl     arg_list		 ptr,
      113 	        status		 fixed bin (35),
      114 	        status_text		 char (100) aligned,
      115 	        disposition		 char (1) aligned;
      116 
      117 	dcl     caller_p		 ptr,
      118 	        caller_l		 fixed bin (21),
      119 	        caller		 char (caller_l) based (caller_p);
      120 
      121 	dcl     disposition_arg_p	 ptr,
      122 	        disposition_arg_l	 fixed bin (21),
      123 	        disposition_arg	 char (disposition_arg_l) based (disposition_arg_p);
      124 
      125 	dcl     caller_msg_p	 ptr,
      126 	        caller_msg_l	 fixed bin (21),
      127 	        caller_msg		 char (caller_msg_l) based (caller_msg_p);
      128 
      129 	dcl     program_interrupt	 condition;
      130 
      131 	dcl     timer_manager_$sleep	 entry (fixed bin (71), bit (2));
      132 	dcl     cu_$arg_list_ptr	 entry (ptr),
      133 	        ioa_		 entry () options (variable),
      134 	        ioa_$nnl		 entry () options (variable);
      135 
      136 	dcl     char		 builtin;
      137 
      138 	call cu_$arg_list_ptr (arg_list);
      139 	call GET_STATUS (arg_list, 1, status, status_text);
      140 	call GET_STRING_ARG (arg_list, 2, caller_p, caller_l);
      141 	call GET_STRING_ARG (arg_list, 3, disposition_arg_p, disposition_arg_l);
      142 	call GET_CALLER_MSG (arg_list, 4, caller_msg_p, caller_msg_l);
      143 
      144 	disposition = char (disposition_arg, 1);
      145 
      146 	if DEBUG
      147 	then call ioa_ ("^a: ^a ^a", caller, status_text, caller_msg);
      148 	else call ioa_$nnl (format,
      149 		status ^= 0, status_text,
      150 		caller_msg ^= "", caller_msg,
      151 		status ^= 0, status_text);
      152 
      153 	if disposition = "c" then return;
      154 	if disposition = "i" then signal condition (program_interrupt);
      155 	else call MAKE_LOG_ENTRY (disposition, status, status_text, caller, caller_msg);
      156 
      157 	if disposition = "l" then return;
      158 	else if disposition = "s" then do;
      159 		call ioa_ ("Exiting executive mail due to internal error. Please try again.^/If error persists please seek expert advice. ^/This error logged in ""^a"" in your xmail directory.^/ (^a)", ERROR_LOG_SEGMENT, xmail_data.mail_dir);
      160 		call timer_manager_$sleep (20, "11"b);
      161 		go to xmail_data.quit_label;
      162 	     end;
      163 	else /* disposition="q" or illegal value */
      164 	     signal condition (program_interrupt);
      165 
      166      end XMAIL_ERROR;
      167 
      168 GET_STATUS: proc (arg_list, argno, code, msg);
      169 
      170 	dcl     arg_list		 ptr,
      171 	        argno		 fixed bin,
      172 	        code		 fixed bin (35),
      173 	        msg		 char (100) aligned;
      174 
      175 	dcl     type		 fixed bin,
      176 	        ndims		 fixed bin,
      177 	        prec		 fixed bin,
      178 	        scale		 fixed bin,
      179 	        packed		 bit (1) aligned;
      180 
      181 	dcl     (addr, bin)		 builtin;
      182 
      183 	dcl     arg_p		 ptr,
      184 	        arg		 fixed bin (35) based (arg_p);
      185 
      186 	dcl     cu_$arg_ptr_rel	 entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr),
      187 	        decode_descriptor_	 entry (ptr, fixed bin, fixed bin, bit (1) aligned, fixed bin, fixed bin, fixed bin),
      188 	        convert_status_code_	 entry (fixed bin (35), char (8) aligned, char (100) aligned);
      189 
      190 	call cu_$arg_ptr_rel (argno, arg_p, (0), code, arg_list);
      191 	if code = 0 then do;
      192 		call decode_descriptor_ (arg_list, argno, type, packed, ndims, prec, scale);
      193 		if (type = real_fix_bin_1_dtype) & (packed = "0"b)
      194 		then code = arg;
      195 		else do;
      196 			intype = 2 * type + bin (packed, 1);
      197 
      198 			if (type >= bit_dtype) & (type <= varying_char_dtype)
      199 			then inclength = prec;
      200 			else do;
      201 				info.inscale = scale;
      202 				info.inprec = prec;
      203 			     end;
      204 			outtype = 2 * real_fix_bin_1_dtype;
      205 			outfo.outscale = 0;
      206 			outfo.outprec = 35;
      207 			call assign_ (addr (code), outtype, outscale_prec, arg_p, intype, inscale_prec);
      208 		     end;
      209 	     end;
      210 
      211 	if code = 0 then msg = "";
      212 	else call convert_status_code_ (code, (""), msg);
      213 	return;
      214 
  1     1 /* BEGIN INCLUDE FILE ... desc_dcls.incl.pl1 */
  1     2 
  1     3 /* This include segment contains declarations for use with assign_ */
  1     4 
  1     5 dcl	intype		fixed bin (17),
  1     6 	outtype		fixed bin (17);
  1     7 
  1     8 dcl	inscale_prec	fixed bin (35),
  1     9 	outscale_prec	fixed bin (35);
  1    10 
  1    11 dcl	1 info		based (addr (inscale_prec)) aligned,
  1    12 	2 inscale		fixed bin (17) unal,
  1    13 	2 inprec		fixed bin (17) unal;
  1    14 
  1    15 dcl	1 outfo		based (addr (outscale_prec)) aligned,
  1    16 	2 outscale	fixed bin (17) unal,
  1    17 	2 outprec		fixed bin (17) unal;
  1    18 
  1    19 dcl	inclength fixed bin(31) aligned based(addr(inscale_prec));
  1    20 dcl	outclength fixed bin(31) aligned based(addr(outscale_prec));
  1    21 
  1    22 dcl	char_to_numeric_	entry (ptr, fixed bin (17), fixed bin (35), ptr, fixed bin (17)), 
  1    23 	assign_		entry (ptr, fixed bin (17), fixed bin (35), ptr, fixed bin (17), fixed bin (35)), 
  1    24 	assign_round_	entry (ptr, fixed bin (17), fixed bin (35), ptr, fixed bin (17), fixed bin (35)), 
  1    25 	assign_truncate_	entry (ptr, fixed bin (17), fixed bin (35), ptr, fixed bin (17), fixed bin (35));
  1    26 
  1    27 /* END INCLUDE FILE ... desc_dcls.incl.pl1 */
      215 
      216 
  2     1 /* BEGIN INCLUDE FILE ... std_descriptor_types.incl.pl1 */
  2     2 
  2     3 
  2     4 /****^  HISTORY COMMENTS:
  2     5*  1) change(86-09-05,JMAthane), approve(86-09-05,MCR7525),
  2     6*     audit(86-09-11,Martinson), install(86-11-12,MR12.0-1208):
  2     7*     Added pascal_string_type_dtype descriptor type.  Its number is 87.
  2     8*     Objects of this type are PASCAL string types.
  2     9*  2) change(88-09-20,WAAnderson), approve(88-09-20,MCR7952),
  2    10*     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
  2    11*     Added the new C types.
  2    12*                                                   END HISTORY COMMENTS */
  2    13 
  2    14 /* This include file defines mnemonic names for the Multics
  2    15*   standard descriptor types, using both pl1 and cobol terminology.
  2    16*   PG 780613
  2    17*   JRD 790530
  2    18*   JRD 791016
  2    19*   MBW 810731
  2    20*   TGO 830614 Add hex types.
  2    21*   Modified June 83 JMAthane to add PASCAL data types
  2    22*   TGO 840120 Add float dec extended and generic, float binary generic
  2    23**/
  2    24 
  2    25      dcl	   (real_fix_bin_1_dtype  init (1),
  2    26 	   real_fix_bin_2_dtype   init (2),
  2    27 	   real_flt_bin_1_dtype   init (3),
  2    28 	   real_flt_bin_2_dtype   init (4),
  2    29 	   cplx_fix_bin_1_dtype   init (5),
  2    30 	   cplx_fix_bin_2_dtype   init (6),
  2    31 	   cplx_flt_bin_1_dtype   init (7),
  2    32 	   cplx_flt_bin_2_dtype   init (8),
  2    33 	   real_fix_dec_9bit_ls_dtype init (9),
  2    34 	   real_flt_dec_9bit_dtype init (10),
  2    35 	   cplx_fix_dec_9bit_ls_dtype init (11),
  2    36 	   cplx_flt_dec_9bit_dtype init (12),
  2    37 	   pointer_dtype	      init (13),
  2    38 	   offset_dtype	      init (14),
  2    39 	   label_dtype	      init (15),
  2    40 	   entry_dtype	      init (16),
  2    41 	   structure_dtype	      init (17),
  2    42 	   area_dtype	      init (18),
  2    43 	   bit_dtype	      init (19),
  2    44 	   varying_bit_dtype      init (20),
  2    45 	   char_dtype	      init (21),
  2    46 	   varying_char_dtype     init (22),
  2    47 	   file_dtype	      init (23),
  2    48 	   real_fix_dec_9bit_ls_overp_dtype init (29),
  2    49 	   real_fix_dec_9bit_ts_overp_dtype init (30),
  2    50 	   real_fix_bin_1_uns_dtype init (33),
  2    51 	   real_fix_bin_2_uns_dtype init (34),
  2    52 	   real_fix_dec_9bit_uns_dtype init (35),
  2    53 	   real_fix_dec_9bit_ts_dtype init (36),
  2    54 	   real_fix_dec_4bit_uns_dtype init (38),	/* digit-aligned */
  2    55 	   real_fix_dec_4bit_ts_dtype init (39),	/* byte-aligned */
  2    56 	   real_fix_dec_4bit_bytealigned_uns_dtype init (40), /* COBOL */
  2    57 	   real_fix_dec_4bit_ls_dtype init (41),	/* digit-aligned */
  2    58 	   real_flt_dec_4bit_dtype init (42),		/* digit-aligned */
  2    59 	   real_fix_dec_4bit_bytealigned_ls_dtype init (43),
  2    60 	   real_flt_dec_4bit_bytealigned_dtype init (44),
  2    61 	   cplx_fix_dec_4bit_bytealigned_ls_dtype init (45),
  2    62 	   cplx_flt_dec_4bit_bytealigned_dtype init (46),
  2    63 	   real_flt_hex_1_dtype   init (47),
  2    64 	   real_flt_hex_2_dtype   init (48),
  2    65 	   cplx_flt_hex_1_dtype   init (49),
  2    66 	   cplx_flt_hex_2_dtype   init (50),
  2    67 	   c_typeref_dtype        init (54),
  2    68 	   c_enum_dtype           init (55),
  2    69              c_enum_const_dtype     init (56),
  2    70 	   c_union_dtype          init (57),
  2    71 	   algol68_straight_dtype init (59),
  2    72 	   algol68_format_dtype   init (60),
  2    73 	   algol68_array_descriptor_dtype init (61),
  2    74 	   algol68_union_dtype    init (62),
  2    75 
  2    76 	   cobol_comp_6_dtype     init (1),
  2    77 	   cobol_comp_7_dtype     init (1),
  2    78 	   cobol_display_ls_dtype init (9),
  2    79 	   cobol_structure_dtype  init (17),
  2    80 	   cobol_char_string_dtype init (21),
  2    81 	   cobol_display_ls_overp_dtype init (29),
  2    82 	   cobol_display_ts_overp_dtype init (30),
  2    83 	   cobol_display_uns_dtype init (35),
  2    84 	   cobol_display_ts_dtype init (36),
  2    85 	   cobol_comp_8_uns_dtype init (38),		/* digit aligned */
  2    86 	   cobol_comp_5_ts_dtype  init (39),		/* byte aligned */
  2    87 	   cobol_comp_5_uns_dtype init (40),
  2    88 	   cobol_comp_8_ls_dtype  init (41),		/* digit aligned */
  2    89 	   real_flt_dec_extended_dtype init (81),	/* 9-bit exponent */
  2    90 	   cplx_flt_dec_extended_dtype init (82),	/* 9-bit exponent */
  2    91 	   real_flt_dec_generic_dtype init (83),	/* generic float decimal */
  2    92 	   cplx_flt_dec_generic_dtype init (84),
  2    93 	   real_flt_bin_generic_dtype init (85),	/* generic float binary */
  2    94 	   cplx_flt_bin_generic_dtype init (86)) fixed bin internal static options (constant);
  2    95 
  2    96      dcl	   (ft_integer_dtype      init (1),
  2    97 	   ft_real_dtype	      init (3),
  2    98 	   ft_double_dtype	      init (4),
  2    99 	   ft_complex_dtype	      init (7),
  2   100 	   ft_complex_double_dtype init (8),
  2   101 	   ft_external_dtype      init (16),
  2   102 	   ft_logical_dtype	      init (19),
  2   103 	   ft_char_dtype	      init (21),
  2   104 	   ft_hex_real_dtype      init (47),
  2   105 	   ft_hex_double_dtype    init (48),
  2   106 	   ft_hex_complex_dtype   init (49),
  2   107 	   ft_hex_complex_double_dtype init (50)
  2   108 	   )		      fixed bin internal static options (constant);
  2   109 
  2   110      dcl	   (algol68_short_int_dtype init (1),
  2   111 	   algol68_int_dtype      init (1),
  2   112 	   algol68_long_int_dtype init (2),
  2   113 	   algol68_real_dtype     init (3),
  2   114 	   algol68_long_real_dtype init (4),
  2   115 	   algol68_compl_dtype    init (7),
  2   116 	   algol68_long_compl_dtype init (8),
  2   117 	   algol68_bits_dtype     init (19),
  2   118 	   algol68_bool_dtype     init (19),
  2   119 	   algol68_char_dtype     init (21),
  2   120 	   algol68_byte_dtype     init (21),
  2   121 	   algol68_struct_struct_char_dtype init (22),
  2   122 	   algol68_struct_struct_bool_dtype init (20)
  2   123 	   )		      fixed bin internal static options (constant);
  2   124 
  2   125      dcl	   (label_constant_runtime_dtype init (24),
  2   126 	   int_entry_runtime_dtype init (25),
  2   127 	   ext_entry_runtime_dtype init (26),
  2   128 	   ext_procedure_runtime_dtype init (27),
  2   129 	   picture_runtime_dtype  init (63)
  2   130 	   )		      fixed bin internal static options (constant);
  2   131 
  2   132      dcl	   (pascal_integer_dtype  init (1),
  2   133 	   pascal_real_dtype      init (4),
  2   134 	   pascal_label_dtype     init (24),
  2   135 	   pascal_internal_procedure_dtype init (25),
  2   136 	   pascal_exportable_procedure_dtype init (26),
  2   137 	   pascal_imported_procedure_dtype init (27),
  2   138 	   pascal_typed_pointer_type_dtype init (64),
  2   139 	   pascal_char_dtype      init (65),
  2   140 	   pascal_boolean_dtype   init (66),
  2   141 	   pascal_record_file_type_dtype init (67),
  2   142 	   pascal_record_type_dtype init (68),
  2   143 	   pascal_set_dtype	      init (69),
  2   144 	   pascal_enumerated_type_dtype init (70),
  2   145 	   pascal_enumerated_type_element_dtype init (71),
  2   146 	   pascal_enumerated_type_instance_dtype init (72),
  2   147 	   pascal_user_defined_type_dtype init (73),
  2   148 	   pascal_user_defined_type_instance_dtype init (74),
  2   149 	   pascal_text_file_dtype init (75),
  2   150 	   pascal_procedure_type_dtype init (76),
  2   151 	   pascal_variable_formal_parameter_dtype init (77),
  2   152 	   pascal_value_formal_parameter_dtype init (78),
  2   153 	   pascal_entry_formal_parameter_dtype init (79),
  2   154 	   pascal_parameter_procedure_dtype init (80),
  2   155 	   pascal_string_type_dtype init (87)) fixed bin int static options (constant);
  2   156 
  2   157 
  2   158 /* END INCLUDE FILE ... std_descriptor_types.incl.pl1 */
      217 
      218 
      219      end GET_STATUS;
      220 
      221 GET_STRING_ARG: proc (arg_list, argno, string_p, string_l);
      222 
      223 	dcl     arg_list		 ptr,
      224 	        argno		 fixed bin,
      225 	        string_p		 ptr,
      226 	        string_l		 fixed bin (21);
      227 
      228 	dcl     type		 fixed bin,
      229 	        code		 fixed bin (35),
      230 	        varying_string_length	 fixed bin (35) based;
      231 
      232 	dcl     cu_$arg_ptr_rel	 entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr),
      233 	        decode_descriptor_	 entry (ptr, fixed bin, fixed bin, bit (1) aligned, fixed bin, fixed bin, fixed bin);
      234 
      235 	dcl     (addr, addrel)	 builtin;
      236 
      237 	call cu_$arg_ptr_rel (argno, string_p, string_l, code, arg_list);
      238 	if code ^= 0 then do;
      239 		string_p = addr (string_p);
      240 		string_l = 0;
      241 	     end;
      242 	else do;
      243 		call decode_descriptor_ (arg_list, argno, type, (""b), (0), (0), (0));
      244 		if type = varying_char_dtype
      245 		then string_l = addrel (string_p, -1) -> varying_string_length;
      246 	     end;
      247 	return;
      248 
  3     1 /* BEGIN INCLUDE FILE ... std_descriptor_types.incl.pl1 */
  3     2 
  3     3 
  3     4 /****^  HISTORY COMMENTS:
  3     5*  1) change(86-09-05,JMAthane), approve(86-09-05,MCR7525),
  3     6*     audit(86-09-11,Martinson), install(86-11-12,MR12.0-1208):
  3     7*     Added pascal_string_type_dtype descriptor type.  Its number is 87.
  3     8*     Objects of this type are PASCAL string types.
  3     9*  2) change(88-09-20,WAAnderson), approve(88-09-20,MCR7952),
  3    10*     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
  3    11*     Added the new C types.
  3    12*                                                   END HISTORY COMMENTS */
  3    13 
  3    14 /* This include file defines mnemonic names for the Multics
  3    15*   standard descriptor types, using both pl1 and cobol terminology.
  3    16*   PG 780613
  3    17*   JRD 790530
  3    18*   JRD 791016
  3    19*   MBW 810731
  3    20*   TGO 830614 Add hex types.
  3    21*   Modified June 83 JMAthane to add PASCAL data types
  3    22*   TGO 840120 Add float dec extended and generic, float binary generic
  3    23**/
  3    24 
  3    25      dcl	   (real_fix_bin_1_dtype  init (1),
  3    26 	   real_fix_bin_2_dtype   init (2),
  3    27 	   real_flt_bin_1_dtype   init (3),
  3    28 	   real_flt_bin_2_dtype   init (4),
  3    29 	   cplx_fix_bin_1_dtype   init (5),
  3    30 	   cplx_fix_bin_2_dtype   init (6),
  3    31 	   cplx_flt_bin_1_dtype   init (7),
  3    32 	   cplx_flt_bin_2_dtype   init (8),
  3    33 	   real_fix_dec_9bit_ls_dtype init (9),
  3    34 	   real_flt_dec_9bit_dtype init (10),
  3    35 	   cplx_fix_dec_9bit_ls_dtype init (11),
  3    36 	   cplx_flt_dec_9bit_dtype init (12),
  3    37 	   pointer_dtype	      init (13),
  3    38 	   offset_dtype	      init (14),
  3    39 	   label_dtype	      init (15),
  3    40 	   entry_dtype	      init (16),
  3    41 	   structure_dtype	      init (17),
  3    42 	   area_dtype	      init (18),
  3    43 	   bit_dtype	      init (19),
  3    44 	   varying_bit_dtype      init (20),
  3    45 	   char_dtype	      init (21),
  3    46 	   varying_char_dtype     init (22),
  3    47 	   file_dtype	      init (23),
  3    48 	   real_fix_dec_9bit_ls_overp_dtype init (29),
  3    49 	   real_fix_dec_9bit_ts_overp_dtype init (30),
  3    50 	   real_fix_bin_1_uns_dtype init (33),
  3    51 	   real_fix_bin_2_uns_dtype init (34),
  3    52 	   real_fix_dec_9bit_uns_dtype init (35),
  3    53 	   real_fix_dec_9bit_ts_dtype init (36),
  3    54 	   real_fix_dec_4bit_uns_dtype init (38),	/* digit-aligned */
  3    55 	   real_fix_dec_4bit_ts_dtype init (39),	/* byte-aligned */
  3    56 	   real_fix_dec_4bit_bytealigned_uns_dtype init (40), /* COBOL */
  3    57 	   real_fix_dec_4bit_ls_dtype init (41),	/* digit-aligned */
  3    58 	   real_flt_dec_4bit_dtype init (42),		/* digit-aligned */
  3    59 	   real_fix_dec_4bit_bytealigned_ls_dtype init (43),
  3    60 	   real_flt_dec_4bit_bytealigned_dtype init (44),
  3    61 	   cplx_fix_dec_4bit_bytealigned_ls_dtype init (45),
  3    62 	   cplx_flt_dec_4bit_bytealigned_dtype init (46),
  3    63 	   real_flt_hex_1_dtype   init (47),
  3    64 	   real_flt_hex_2_dtype   init (48),
  3    65 	   cplx_flt_hex_1_dtype   init (49),
  3    66 	   cplx_flt_hex_2_dtype   init (50),
  3    67 	   c_typeref_dtype        init (54),
  3    68 	   c_enum_dtype           init (55),
  3    69              c_enum_const_dtype     init (56),
  3    70 	   c_union_dtype          init (57),
  3    71 	   algol68_straight_dtype init (59),
  3    72 	   algol68_format_dtype   init (60),
  3    73 	   algol68_array_descriptor_dtype init (61),
  3    74 	   algol68_union_dtype    init (62),
  3    75 
  3    76 	   cobol_comp_6_dtype     init (1),
  3    77 	   cobol_comp_7_dtype     init (1),
  3    78 	   cobol_display_ls_dtype init (9),
  3    79 	   cobol_structure_dtype  init (17),
  3    80 	   cobol_char_string_dtype init (21),
  3    81 	   cobol_display_ls_overp_dtype init (29),
  3    82 	   cobol_display_ts_overp_dtype init (30),
  3    83 	   cobol_display_uns_dtype init (35),
  3    84 	   cobol_display_ts_dtype init (36),
  3    85 	   cobol_comp_8_uns_dtype init (38),		/* digit aligned */
  3    86 	   cobol_comp_5_ts_dtype  init (39),		/* byte aligned */
  3    87 	   cobol_comp_5_uns_dtype init (40),
  3    88 	   cobol_comp_8_ls_dtype  init (41),		/* digit aligned */
  3    89 	   real_flt_dec_extended_dtype init (81),	/* 9-bit exponent */
  3    90 	   cplx_flt_dec_extended_dtype init (82),	/* 9-bit exponent */
  3    91 	   real_flt_dec_generic_dtype init (83),	/* generic float decimal */
  3    92 	   cplx_flt_dec_generic_dtype init (84),
  3    93 	   real_flt_bin_generic_dtype init (85),	/* generic float binary */
  3    94 	   cplx_flt_bin_generic_dtype init (86)) fixed bin internal static options (constant);
  3    95 
  3    96      dcl	   (ft_integer_dtype      init (1),
  3    97 	   ft_real_dtype	      init (3),
  3    98 	   ft_double_dtype	      init (4),
  3    99 	   ft_complex_dtype	      init (7),
  3   100 	   ft_complex_double_dtype init (8),
  3   101 	   ft_external_dtype      init (16),
  3   102 	   ft_logical_dtype	      init (19),
  3   103 	   ft_char_dtype	      init (21),
  3   104 	   ft_hex_real_dtype      init (47),
  3   105 	   ft_hex_double_dtype    init (48),
  3   106 	   ft_hex_complex_dtype   init (49),
  3   107 	   ft_hex_complex_double_dtype init (50)
  3   108 	   )		      fixed bin internal static options (constant);
  3   109 
  3   110      dcl	   (algol68_short_int_dtype init (1),
  3   111 	   algol68_int_dtype      init (1),
  3   112 	   algol68_long_int_dtype init (2),
  3   113 	   algol68_real_dtype     init (3),
  3   114 	   algol68_long_real_dtype init (4),
  3   115 	   algol68_compl_dtype    init (7),
  3   116 	   algol68_long_compl_dtype init (8),
  3   117 	   algol68_bits_dtype     init (19),
  3   118 	   algol68_bool_dtype     init (19),
  3   119 	   algol68_char_dtype     init (21),
  3   120 	   algol68_byte_dtype     init (21),
  3   121 	   algol68_struct_struct_char_dtype init (22),
  3   122 	   algol68_struct_struct_bool_dtype init (20)
  3   123 	   )		      fixed bin internal static options (constant);
  3   124 
  3   125      dcl	   (label_constant_runtime_dtype init (24),
  3   126 	   int_entry_runtime_dtype init (25),
  3   127 	   ext_entry_runtime_dtype init (26),
  3   128 	   ext_procedure_runtime_dtype init (27),
  3   129 	   picture_runtime_dtype  init (63)
  3   130 	   )		      fixed bin internal static options (constant);
  3   131 
  3   132      dcl	   (pascal_integer_dtype  init (1),
  3   133 	   pascal_real_dtype      init (4),
  3   134 	   pascal_label_dtype     init (24),
  3   135 	   pascal_internal_procedure_dtype init (25),
  3   136 	   pascal_exportable_procedure_dtype init (26),
  3   137 	   pascal_imported_procedure_dtype init (27),
  3   138 	   pascal_typed_pointer_type_dtype init (64),
  3   139 	   pascal_char_dtype      init (65),
  3   140 	   pascal_boolean_dtype   init (66),
  3   141 	   pascal_record_file_type_dtype init (67),
  3   142 	   pascal_record_type_dtype init (68),
  3   143 	   pascal_set_dtype	      init (69),
  3   144 	   pascal_enumerated_type_dtype init (70),
  3   145 	   pascal_enumerated_type_element_dtype init (71),
  3   146 	   pascal_enumerated_type_instance_dtype init (72),
  3   147 	   pascal_user_defined_type_dtype init (73),
  3   148 	   pascal_user_defined_type_instance_dtype init (74),
  3   149 	   pascal_text_file_dtype init (75),
  3   150 	   pascal_procedure_type_dtype init (76),
  3   151 	   pascal_variable_formal_parameter_dtype init (77),
  3   152 	   pascal_value_formal_parameter_dtype init (78),
  3   153 	   pascal_entry_formal_parameter_dtype init (79),
  3   154 	   pascal_parameter_procedure_dtype init (80),
  3   155 	   pascal_string_type_dtype init (87)) fixed bin int static options (constant);
  3   156 
  3   157 
  3   158 /* END INCLUDE FILE ... std_descriptor_types.incl.pl1 */
      249 
      250 
      251      end GET_STRING_ARG;
      252 
      253 GET_CALLER_MSG:
      254 	/*** must be quick ***/
      255      proc (arg_list, argno, msg_p, msg_l);
      256 
      257 	dcl     arg_list		 ptr,
      258 	        argno		 fixed bin,
      259 	        msg_p		 ptr,
      260 	        msg_l		 fixed bin (21);
      261 
      262 	dcl     msg_text		 char (256),
      263 	        result_length	 fixed bin,
      264 	        ctl_p		 ptr,
      265 	        ctl_l		 fixed bin (21);
      266 
      267 	dcl     ioa_$general_rs	 entry (ptr, fixed bin, fixed bin, char (*), fixed bin, bit (1) aligned, bit (1) aligned);
      268 
      269 	dcl     (addr, length, rtrim, substr) builtin;
      270 
      271 	call GET_STRING_ARG (arg_list, argno, ctl_p, ctl_l);
      272 	if ctl_l = 0 then do;
      273 		msg_p = addr (msg_p);
      274 		msg_l = 0;
      275 	     end;
      276 	else do;
      277 		msg_p = addr (msg_text);
      278 		call ioa_$general_rs (arg_list, argno, argno + 1, msg_text, result_length, "0"b, "0"b);
      279 		msg_l = length (rtrim (substr (msg_text, 1, result_length)));
      280 	     end;
      281 
      282      end GET_CALLER_MSG;
      283 
      284 MAKE_LOG_ENTRY: proc (action, code, code_msg, caller, caller_msg);
      285 
      286 	dcl     action		 char (1) aligned,
      287 	        code		 fixed bin (35),
      288 	        code_msg		 char (100) aligned,
      289 	        caller		 char (*),
      290 	        caller_msg		 char (*);
      291 
      292 	dcl     (TAB		 init ("	"),
      293 	        NL		 init ("
      294 ")	        )			 char (1) int static options (constant);
      295 	dcl     adjust_bit_count_	 entry (char (168) aligned, char (32) aligned, bit (1) aligned, fixed bin (35), fixed bin (35));
      296 	dcl     date_time_$format	 entry (char (*), fixed bin (71), char (*), char (*)) returns (char (250) var);
      297 	dcl     hcs_$initiate_count	 entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35));
      298 	dcl     hcs_$make_seg	 entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
      299 
      300 	dcl     bit_count		 fixed bin (24);
      301 	dcl     status		 fixed bin (35);
      302 	dcl     date_time_str	 char (64) var;
      303 	dcl     error_log_len	 fixed bin;
      304 	dcl     error_log_ptr	 ptr init (null);
      305 	dcl     error_log		 char (error_log_len) based (error_log_ptr);
      306 	dcl     (clock, divide, null, rtrim) builtin;
      307 	dcl     error_table_$noentry	 fixed bin (35) ext static;
      308 
      309 	call hcs_$initiate_count ((xmail_data.mail_dir), ERROR_LOG_SEGMENT, "", bit_count, 1, error_log_ptr, status);
      310 	if status = error_table_$noentry
      311 	then do;
      312 		call hcs_$make_seg ((xmail_data.mail_dir), ERROR_LOG_SEGMENT, "", RW_ACCESS_BIN, error_log_ptr, status);
      313 		if status ^= 0 then return;
      314 		error_log_len = 0;
      315 	     end;
      316 	else if error_log_ptr = null
      317 	then return;
      318 	else error_log_len = divide (bit_count + 8, 9, 24, 0);
      319 
      320 	date_time_str = date_time_$format ("date_time", clock (), "", "");
      321 
      322 	call add_to_error_log (rtrim (date_time_str) || NL ||
      323 	     TAB || "Error detected by = """ || rtrim (caller) || """" || NL ||
      324 	     TAB || "Status code message = """ || rtrim (code_msg) || """" || NL ||
      325 	     TAB || "Caller message = """ || rtrim (caller_msg) || """" || NL ||
      326 	     TAB || "Action to be taken = """ || rtrim (action) || """" ||
      327 	     NL || NL, status);
      328 	if status ^= 0 then return;
      329 
      330 	call adjust_bit_count_ ((xmail_data.mail_dir), (ERROR_LOG_SEGMENT), "1"b, (0), status);
      331 
      332 add_to_error_log: proc (P_str, P_code);
      333 
      334 	dcl     P_str		 char (*);
      335 	dcl     P_code		 fixed bin (35);
      336 	dcl     (length, substr)	 builtin;
      337 	dcl     starting_col	 fixed bin init (error_log_len + 1);
      338 
      339 	P_code = 0;
      340 
      341 	error_log_len = error_log_len + length (P_str);
      342 	substr (error_log, starting_col) = P_str;
      343 
      344      end add_to_error_log;
      345 
  4     1 /* BEGIN INCLUDE FILE ... access_mode_values.incl.pl1
  4     2*
  4     3*   Values for the "access mode" argument so often used in hardcore
  4     4*   James R. Davis 26 Jan 81  MCR 4844
  4     5*   Added constants for SM access 4/28/82 Jay Pattin
  4     6*   Added text strings 03/19/85 Chris Jones
  4     7**/
  4     8 
  4     9 
  4    10 /* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
  4    11 dcl	(
  4    12 	N_ACCESS		   init ("000"b),
  4    13 	R_ACCESS		   init ("100"b),
  4    14 	E_ACCESS		   init ("010"b),
  4    15 	W_ACCESS		   init ("001"b),
  4    16 	RE_ACCESS		   init ("110"b),
  4    17 	REW_ACCESS	   init ("111"b),
  4    18 	RW_ACCESS		   init ("101"b),
  4    19 	S_ACCESS		   init ("100"b),
  4    20 	M_ACCESS		   init ("010"b),
  4    21 	A_ACCESS		   init ("001"b),
  4    22 	SA_ACCESS		   init ("101"b),
  4    23 	SM_ACCESS		   init ("110"b),
  4    24 	SMA_ACCESS	   init ("111"b)
  4    25 	)		   bit (3) internal static options (constant);
  4    26 
  4    27 /* The following arrays are meant to be accessed by doing either 1) bin (bit_value) or
  4    28*   2) divide (bin_value, 2) to come up with an index into the array. */
  4    29 
  4    30 dcl	SEG_ACCESS_MODE_NAMES  (0:7) init ("null", "W", "E", "EW", "R", "RW", "RE", "REW") char (4) internal
  4    31 			   static options (constant);
  4    32 
  4    33 dcl	DIR_ACCESS_MODE_NAMES  (0:7) init ("null", "A", "M", "MA", "S", "SA", "SM", "SMA") char (4) internal
  4    34 			   static options (constant);
  4    35 
  4    36 dcl	(
  4    37 	N_ACCESS_BIN	   init (00000b),
  4    38 	R_ACCESS_BIN	   init (01000b),
  4    39 	E_ACCESS_BIN	   init (00100b),
  4    40 	W_ACCESS_BIN	   init (00010b),
  4    41 	RW_ACCESS_BIN	   init (01010b),
  4    42 	RE_ACCESS_BIN	   init (01100b),
  4    43 	REW_ACCESS_BIN	   init (01110b),
  4    44 	S_ACCESS_BIN	   init (01000b),
  4    45 	M_ACCESS_BIN	   init (00010b),
  4    46 	A_ACCESS_BIN	   init (00001b),
  4    47 	SA_ACCESS_BIN	   init (01001b),
  4    48 	SM_ACCESS_BIN	   init (01010b),
  4    49 	SMA_ACCESS_BIN	   init (01011b)
  4    50 	)		   fixed bin (5) internal static options (constant);
  4    51 
  4    52 /* END INCLUDE FILE ... access_mode_values.incl.pl1 */
      346 
      347 
      348      end MAKE_LOG_ENTRY;
      349 
      350 /*
      351*			xmail_error_modes
      352*
      353*This command sets/prints modes which control the operation of the various
      354*xmail_error_ entries.
      355*
      356*Usage:
      357*	xmail_error_modes {mode_string}
      358*
      359*Description:
      360*	If mode_string is present it is processed and the corresponding
      361*modes set.  If not present, the current mode settings are printed.
      362*
      363*Currently, the only defined mode is debug/^debug.  When set, it causes
      364*error messages to be printed always in com_err_ format.
      365**/
      366 
      367 xmail_error_modes: entry options (variable);
      368 
      369 MODES:	begin /* options (quick) */;
      370 
      371 	     dcl	   NAME		      init ("xmail_error_modes") char (17) static options (constant);
      372 
      373 	     dcl	   nargs		      fixed bin,
      374 		   code		      fixed bin (35),
      375 
      376 		   arg_p		      ptr,
      377 		   arg_l		      fixed bin (21),
      378 		   arg		      char (arg_l) based (arg_p);
      379 
      380 	     dcl	   error_table_$too_many_args fixed bin (35) ext static,
      381 		   error_table_$bad_mode  fixed bin (35) ext static;
      382 
      383 	     dcl	   cu_$arg_count	      entry (fixed bin, fixed bin (35)),
      384 		   cu_$arg_ptr	      entry (fixed bin, ptr, fixed bin (21), fixed bin (35)),
      385 		   com_err_	      entry () options (variable),
      386 		   ioa_		      entry () options (variable);
      387 
      388 	     call cu_$arg_count (nargs, code);
      389 	     if code = 0 & nargs > 1 then code = error_table_$too_many_args;
      390 	     if code = 0 & nargs = 1 then call cu_$arg_ptr (1, arg_p, arg_l, code);
      391 	     if code ^= 0 then do;
      392 		     call com_err_ (code, NAME);
      393 		     return;
      394 		end;
      395 
      396 	     if nargs = 0
      397 	     then call ioa_ ("^[^;^^^]debug", DEBUG);
      398 	     else do;
      399 		     if arg = "debug" then DEBUG = "1"b;
      400 		     else if arg = "^debug" then DEBUG = "0"b;
      401 		     else call com_err_ (error_table_$bad_mode, NAME, "^a", arg);
      402 		end;
      403 	end MODES;
      404 
      405 
  5     1 /* BEGIN INCLUDE FILE: xmail_data.incl.pl1 */
  5     2 
  5     3 
  5     4 /****^  HISTORY COMMENTS:
  5     5*  1) change(85-12-20,Blair), approve(86-03-06,MCR7358),
  5     6*     audit(86-04-21,RBarstad), install(86-05-28,MR12.0-1062):
  5     7*     Modified 03/15/85 by Joanne Backs adding confirm_print flag.
  5     8*  2) change(85-12-20,LJAdams), approve(86-03-06,MCR7358),
  5     9*     audit(86-04-21,RBarstad), install(86-05-28,MR12.0-1062):
  5    10*     Adding switch to indicate request for menu display came from general help.
  5    11*     This is so general help menu will be displayed in top screen.
  5    12*  3) change(86-01-10,Blair), approve(86-03-06,MCR7358),
  5    13*     audit(86-04-21,RBarstad), install(86-05-28,MR12.0-1062):
  5    14*     Add switch to indicate whether or not it is permissible to process mail
  5    15*     in other users' mailboxes (foreign_mailbox).
  5    16*  4) change(86-01-13,Blair), approve(86-03-06,MCR7358),
  5    17*     audit(86-04-21,RBarstad), install(86-05-28,MR12.0-1062):
  5    18*     Add bit to indicate whether or not this is a true cleanup condition.
  5    19*  5) change(86-02-06,Blair), approve(86-03-06,MCR7358),
  5    20*     audit(86-04-21,RBarstad), install(86-05-28,MR12.0-1062):
  5    21*     Rearrange to group all the bit flags together in one word with a pad.
  5    22*  6) change(86-03-05,Blair), approve(86-03-05,MCR7358),
  5    23*     audit(86-04-21,RBarstad), install(86-05-28,MR12.0-1062):
  5    24*     Change value_seg ptr to value_seg_pathname to avoid the situation where
  5    25*     you keep around a pointer to a structure which no longer exists.
  5    26*  7) change(87-01-16,Blair), approve(87-02-05,MCR7618),
  5    27*     audit(87-04-15,RBarstad), install(87-04-26,MR12.1-1025):
  5    28*     Add a field to indicate whether or not we should process interactive msgs.
  5    29*     Increment version to 4.1 so default value will get set.
  5    30*  8) change(87-02-13,Blair), approve(87-02-13,MCR7618),
  5    31*     audit(87-04-15,RBarstad), install(87-04-26,MR12.1-1025):
  5    32*     Add a field to indicate whether or not we're processing a reply so that we
  5    33*     will be able to rebuild the screens properly after a disconnect occurs.
  5    34*     Error_list #114.
  5    35*  9) change(88-07-26,Blair), approve(88-07-26,MCR7959),
  5    36*     audit(88-08-25,RBarstad), install(88-09-02,MR12.2-1098):
  5    37*     Add a bit to indicate whether or not the error segment had to be created
  5    38*     in the pdir (because we didn't have sma access to the mlsys_dir).
  5    39*                                                   END HISTORY COMMENTS */
  5    40 
  5    41 
  5    42 /* Written 5/13/81 by Paul H. Kyzivat */
  5    43 /* Modified 12/16/81 by S. Krupp to delete unused parts of structure
  5    44*   and to add n_fkeys_used */
  5    45 /* Modified 12/14/82 by Dave Schimke to make the xmail version a 10 character
  5    46*   varying string.  */
  5    47 /* Modified 09/12/83 by Dave Schimke adding interactive_msgs flag */
  5    48 /* Modified 09/14/83 by Dave Schimke adding moved_user_io */
  5    49 /* Modified 09/06/84 by Joanne Backs adding lists_as_menus flag */
  5    50 /* Modified 09/21/84 by Joanne Backs adding remove_menus flag */
  5    51 
  5    52      dcl xmail_data_ptr external static ptr init (null);
  5    53 
  5    54      dcl 1 xmail_data aligned based (xmail_data_ptr),
  5    55            2 mail_dir char (168) varying,
  5    56 	 2 first_label label,
  5    57 	 2 quit_label label,
  5    58 	 2 value_seg_pathname char (168) varying,
  5    59            2 moved_user_io ptr,
  5    60 	 2 normal_usage char (80) unal,
  5    61 	 2 function_key_info,
  5    62 	   3 function_key_data_ptr ptr,
  5    63 	   3 n_fkeys_used fixed bin,
  5    64            2 actee,
  5    65 	   3 person char(32) varying,
  5    66 	   3 project char(32) varying,
  5    67 	 2 flags aligned,
  5    68 	     3 mail_in_incoming   bit (1) unal,
  5    69                3 lists_as_menus     bit (1) unal, /* personalization */
  5    70 	     3 remove_menus       bit (1) unal, /* personalization */
  5    71 	     3 confirm_print      bit (1) unal, /* personalization */
  5    72 	     3 multics_mode bit (1) unal, /* personalization */
  5    73 	     3 interactive_msgs bit (1) unal, /* personalization */
  5    74 	     3 foreign_mailbox    bit (1) unal, /* read others' mailboxes */
  5    75                3 general_help       bit (1) unal, /* indicated requesting gen help*/
  5    76 	     3 cleanup_signalled  bit (1) unal,  /* on when true cleanup condition */
  5    77                3 msgs_as_mail       bit (1)  unal, /* on for include_msgs */
  5    78                3 reply_request      bit (1)  unal, /* on if we're doing a reply */
  5    79                3 error_seg_in_pdir  bit (1)  unal, /* on if the error_seg is in the pdir */
  5    80                3 pad                bit (24) unal;
  5    81 	
  5    82 	 
  5    83 
  5    84 dcl xmail_version char(10) var static options(constant) init("4.1");
  5    85 
  5    86 /* END INCLUDE FILE: xmail_data.incl.pl1 */
      406 
      407 
      408      end xmail_error_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    10/24/88  1359.6  xmail_error_.pl1                  >special_ldd>install>MR12.2-1184>xmail_error_.pl1
215          1    11/30/78  1227.5  desc_dcls.incl.pl1                >ldd>include>desc_dcls.incl.pl1
217          2    10/24/88  1336.9  std_descriptor_types.incl.pl1     >special_ldd>install>MR12.2-1184>std_descriptor_types.incl.pl1
249          3    10/24/88  1336.9  std_descriptor_types.incl.pl1     >special_ldd>install>MR12.2-1184>std_descriptor_types.incl.pl1
346          4    04/11/85  1452.6  access_mode_values.incl.pl1       >ldd>include>access_mode_values.incl.pl1
406          5    09/08/88  2010.9  xmail_data.incl.pl1               >ldd>include>xmail_data.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
DEBUG                           000010 internal static bit(1)                   initial dcl 83 set ref 146 396* 399* 400*
ERROR_LOG_SEGMENT               000006 constant        char(11)                 initial packed unaligned dcl 84 set ref 159* 309*
                                                                                  312* 330
NAME                            000000 constant        char(17)                 initial packed unaligned dcl 371 set ref 392* 401*
NL                              002504 constant        char(1)                  initial packed unaligned dcl 292 ref 322 322 322 322
                                                                                  322 322
P_code                                 parameter       fixed bin(35,0)          dcl 335 set ref 332 339*
P_str                                  parameter       char                     packed unaligned dcl 334 ref 332 341 342
RW_ACCESS_BIN                   000005 constant        fixed bin(5,0)           initial dcl 4-36 set ref 312*
TAB                             002505 constant        char(1)                  initial packed unaligned dcl 292 ref 322 322 322 322
action                                 parameter       char(1)                  dcl 286 ref 284 322
addr                                                   builtin function         dcl 181 in procedure "GET_STATUS" ref 198 201 202
                                                                                  205 206 207 207
addr                                                   builtin function         dcl 235 in procedure "GET_STRING_ARG" ref 239
addr                                                   builtin function         dcl 269 in procedure "GET_CALLER_MSG" ref 273 277
addrel                                                 builtin function         dcl 235 ref 244
adjust_bit_count_               000042 constant        entry                    external dcl 295 ref 330
arg                                    based           fixed bin(35,0)          dcl 183 in procedure "GET_STATUS" ref 193
arg                                    based           char                     packed unaligned dcl 373 in begin block on line 369
                                                                                  set ref 399 400 401*
arg_l                           000374 automatic       fixed bin(21,0)          dcl 373 set ref 390* 399 400 401 401
arg_list                               parameter       pointer                  dcl 223 in procedure "GET_STRING_ARG" set ref 221
                                                                                  237* 243*
arg_list                               parameter       pointer                  dcl 257 in procedure "GET_CALLER_MSG" set ref 253
                                                                                  271* 278*
arg_list                        000106 automatic       pointer                  dcl 112 in procedure "XMAIL_ERROR" set ref 138* 139*
                                                                                  140* 141* 142*
arg_list                               parameter       pointer                  dcl 170 in procedure "GET_STATUS" set ref 168 190*
                                                                                  192*
arg_p                           000202 automatic       pointer                  dcl 183 in procedure "GET_STATUS" set ref 190* 193
                                                                                  207*
arg_p                           000372 automatic       pointer                  dcl 373 in begin block on line 369 set ref 390* 399
                                                                                  400 401
argno                                  parameter       fixed bin(17,0)          dcl 257 in procedure "GET_CALLER_MSG" set ref 253
                                                                                  271* 278* 278
argno                                  parameter       fixed bin(17,0)          dcl 223 in procedure "GET_STRING_ARG" set ref 221
                                                                                  237* 243*
argno                                  parameter       fixed bin(17,0)          dcl 170 in procedure "GET_STATUS" set ref 168 190*
                                                                                  192*
assign_                         000032 constant        entry                    external dcl 1-22 ref 207
bin                                                    builtin function         dcl 181 ref 196
bit_count                       000342 automatic       fixed bin(24,0)          dcl 300 set ref 309* 318
bit_dtype                              constant        fixed bin(17,0)          initial dcl 2-25 ref 198
caller                                 based           char                     packed unaligned dcl 117 in procedure "XMAIL_ERROR"
                                                                                  set ref 146* 155*
caller                                 parameter       char                     packed unaligned dcl 286 in procedure
                                                                                  "MAKE_LOG_ENTRY" ref 284 322
caller_l                        000146 automatic       fixed bin(21,0)          dcl 117 set ref 140* 146 146 155 155
caller_msg                             parameter       char                     packed unaligned dcl 286 in procedure
                                                                                  "MAKE_LOG_ENTRY" ref 284 322
caller_msg                             based           char                     packed unaligned dcl 125 in procedure "XMAIL_ERROR"
                                                                                  set ref 146* 148 148* 155*
caller_msg_l                    000156 automatic       fixed bin(21,0)          dcl 125 set ref 142* 146 146 148 148 148 155 155
caller_msg_p                    000154 automatic       pointer                  dcl 125 set ref 142* 146 148 148 155
caller_p                        000144 automatic       pointer                  dcl 117 set ref 140* 146 155
char                                                   builtin function         dcl 136 ref 144
clock                                                  builtin function         dcl 306 ref 320 320
code                            000217 automatic       fixed bin(35,0)          dcl 228 in procedure "GET_STRING_ARG" set ref 237*
                                                                                  238
code                                   parameter       fixed bin(35,0)          dcl 170 in procedure "GET_STATUS" set ref 168 190*
                                                                                  191 193* 207 207 211 212*
code                            000371 automatic       fixed bin(35,0)          dcl 373 in begin block on line 369 set ref 388* 389
                                                                                  389* 390 390* 391 392*
code                                   parameter       fixed bin(35,0)          dcl 286 in procedure "MAKE_LOG_ENTRY" ref 284
code_msg                               parameter       char(100)                dcl 286 ref 284 322
com_err_                        000064 constant        entry                    external dcl 383 ref 392 401
convert_status_code_            000030 constant        entry                    external dcl 186 ref 212
ctl_l                           000332 automatic       fixed bin(21,0)          dcl 262 set ref 271* 272
ctl_p                           000330 automatic       pointer                  dcl 262 set ref 271*
cu_$arg_count                   000060 constant        entry                    external dcl 383 ref 388
cu_$arg_list_ptr                000016 constant        entry                    external dcl 132 ref 138
cu_$arg_ptr                     000062 constant        entry                    external dcl 383 ref 390
cu_$arg_ptr_rel                 000024 constant        entry                    external dcl 186 in procedure "GET_STATUS" ref 190
cu_$arg_ptr_rel                 000034 constant        entry                    external dcl 232 in procedure "GET_STRING_ARG" ref
                                                                                  237
date_time_$format               000044 constant        entry                    external dcl 296 ref 320
date_time_str                   000344 automatic       varying char(64)         dcl 302 set ref 320* 322
decode_descriptor_              000036 constant        entry                    external dcl 232 in procedure "GET_STRING_ARG" ref
                                                                                  243
decode_descriptor_              000026 constant        entry                    external dcl 186 in procedure "GET_STATUS" ref 192
disposition                     000142 automatic       char(1)                  dcl 112 set ref 144* 153 154 155* 157 158
disposition_arg                        based           char                     packed unaligned dcl 121 ref 144
disposition_arg_l               000152 automatic       fixed bin(21,0)          dcl 121 set ref 141* 144
disposition_arg_p               000150 automatic       pointer                  dcl 121 set ref 141* 144
divide                                                 builtin function         dcl 306 ref 318
error_log                              based           char                     packed unaligned dcl 305 set ref 342*
error_log_len                   000365 automatic       fixed bin(17,0)          dcl 303 set ref 314* 318* 337 341* 341 342
error_log_ptr                   000366 automatic       pointer                  initial dcl 304 set ref 304* 309* 312* 316 342
error_table_$bad_mode           000056 external static fixed bin(35,0)          dcl 380 set ref 401*
error_table_$noentry            000052 external static fixed bin(35,0)          dcl 307 ref 310
error_table_$too_many_args      000054 external static fixed bin(35,0)          dcl 380 ref 389
format                                 parameter       char                     packed unaligned dcl 110 set ref 106 148*
hcs_$initiate_count             000046 constant        entry                    external dcl 297 ref 309
hcs_$make_seg                   000050 constant        entry                    external dcl 298 ref 312
inclength                              based           fixed bin(31,0)          dcl 1-19 set ref 198*
info                                   based           structure                level 1 dcl 1-11
inprec                    0(18)        based           fixed bin(17,0)          level 2 packed packed unaligned dcl 1-11 set ref
                                                                                  202*
inscale                                based           fixed bin(17,0)          level 2 packed packed unaligned dcl 1-11 set ref
                                                                                  201*
inscale_prec                    000206 automatic       fixed bin(35,0)          dcl 1-8 set ref 198 201 202 207*
intype                          000204 automatic       fixed bin(17,0)          dcl 1-5 set ref 196* 207*
ioa_                            000020 constant        entry                    external dcl 132 in procedure "XMAIL_ERROR" ref 146
                                                                                  159
ioa_                            000066 constant        entry                    external dcl 383 in begin block on line 369 ref 396
ioa_$general_rs                 000040 constant        entry                    external dcl 267 ref 278
ioa_$nnl                        000022 constant        entry                    external dcl 132 ref 148
length                                                 builtin function         dcl 269 in procedure "GET_CALLER_MSG" ref 279
length                                                 builtin function         dcl 336 in procedure "add_to_error_log" ref 341
mail_dir                               based           varying char(168)        level 2 dcl 5-54 set ref 159* 309 312 330
msg                                    parameter       char(100)                dcl 170 set ref 168 211* 212*
msg_l                                  parameter       fixed bin(21,0)          dcl 257 set ref 253 274* 279*
msg_p                                  parameter       pointer                  dcl 257 set ref 253 273* 273 277*
msg_text                        000226 automatic       char(256)                packed unaligned dcl 262 set ref 277 278* 279
nargs                           000370 automatic       fixed bin(17,0)          dcl 373 set ref 388* 389 390 396
ndims                           000175 automatic       fixed bin(17,0)          dcl 175 set ref 192*
null                                                   builtin function         dcl 306 ref 304 316
outfo                                  based           structure                level 1 dcl 1-15
outprec                   0(18)        based           fixed bin(17,0)          level 2 packed packed unaligned dcl 1-15 set ref
                                                                                  206*
outscale                               based           fixed bin(17,0)          level 2 packed packed unaligned dcl 1-15 set ref
                                                                                  205*
outscale_prec                   000207 automatic       fixed bin(35,0)          dcl 1-8 set ref 205 206 207*
outtype                         000205 automatic       fixed bin(17,0)          dcl 1-5 set ref 204* 207*
packed                          000200 automatic       bit(1)                   dcl 175 set ref 192* 193 196
prec                            000176 automatic       fixed bin(17,0)          dcl 175 set ref 192* 198 202
program_interrupt               000160 stack reference condition                dcl 129 ref 154 163
quit_label               60            based           label variable           level 2 dcl 5-54 ref 161
real_fix_bin_1_dtype                   constant        fixed bin(17,0)          initial dcl 2-25 ref 193 204
result_length                   000326 automatic       fixed bin(17,0)          dcl 262 set ref 278* 279
rtrim                                                  builtin function         dcl 306 in procedure "MAKE_LOG_ENTRY" ref 322 322
                                                                                  322 322 322
rtrim                                                  builtin function         dcl 269 in procedure "GET_CALLER_MSG" ref 279
scale                           000177 automatic       fixed bin(17,0)          dcl 175 set ref 192* 201
starting_col                    000100 automatic       fixed bin(17,0)          initial dcl 337 set ref 337* 342
status                          000110 automatic       fixed bin(35,0)          dcl 112 in procedure "XMAIL_ERROR" set ref 139* 148
                                                                                  148 155*
status                          000343 automatic       fixed bin(35,0)          dcl 301 in procedure "MAKE_LOG_ENTRY" set ref 309*
                                                                                  310 312* 313 322* 328 330*
status_text                     000111 automatic       char(100)                dcl 112 set ref 139* 146* 148* 148* 155*
string_l                               parameter       fixed bin(21,0)          dcl 223 set ref 221 237* 240* 244*
string_p                               parameter       pointer                  dcl 223 set ref 221 237* 239* 239 244
substr                                                 builtin function         dcl 336 in procedure "add_to_error_log" set ref 342*
substr                                                 builtin function         dcl 269 in procedure "GET_CALLER_MSG" ref 279
timer_manager_$sleep            000014 constant        entry                    external dcl 131 ref 160
type                            000216 automatic       fixed bin(17,0)          dcl 228 in procedure "GET_STRING_ARG" set ref 243*
                                                                                  244
type                            000174 automatic       fixed bin(17,0)          dcl 175 in procedure "GET_STATUS" set ref 192* 193
                                                                                  196 198 198
varying_char_dtype                     constant        fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS" ref 198
varying_char_dtype                     constant        fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG" ref
                                                                                  244
varying_string_length                  based           fixed bin(35,0)          dcl 228 ref 244
xmail_data                             based           structure                level 1 dcl 5-54
xmail_data_ptr                  000012 external static pointer                  initial dcl 5-52 ref 159 161 309 312 330

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
A_ACCESS                               internal static bit(3)                   initial packed unaligned dcl 4-11
A_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 4-36
DIR_ACCESS_MODE_NAMES                  internal static char(4)                  initial array packed unaligned dcl 4-33
E_ACCESS                               internal static bit(3)                   initial packed unaligned dcl 4-11
E_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 4-36
M_ACCESS                               internal static bit(3)                   initial packed unaligned dcl 4-11
M_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 4-36
N_ACCESS                               internal static bit(3)                   initial packed unaligned dcl 4-11
N_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 4-36
REW_ACCESS                             internal static bit(3)                   initial packed unaligned dcl 4-11
REW_ACCESS_BIN                         internal static fixed bin(5,0)           initial dcl 4-36
RE_ACCESS                              internal static bit(3)                   initial packed unaligned dcl 4-11
RE_ACCESS_BIN                          internal static fixed bin(5,0)           initial dcl 4-36
RW_ACCESS                              internal static bit(3)                   initial packed unaligned dcl 4-11
R_ACCESS                               internal static bit(3)                   initial packed unaligned dcl 4-11
R_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 4-36
SA_ACCESS                              internal static bit(3)                   initial packed unaligned dcl 4-11
SA_ACCESS_BIN                          internal static fixed bin(5,0)           initial dcl 4-36
SEG_ACCESS_MODE_NAMES                  internal static char(4)                  initial array packed unaligned dcl 4-30
SMA_ACCESS                             internal static bit(3)                   initial packed unaligned dcl 4-11
SMA_ACCESS_BIN                         internal static fixed bin(5,0)           initial dcl 4-36
SM_ACCESS                              internal static bit(3)                   initial packed unaligned dcl 4-11
SM_ACCESS_BIN                          internal static fixed bin(5,0)           initial dcl 4-36
S_ACCESS                               internal static bit(3)                   initial packed unaligned dcl 4-11
S_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 4-36
W_ACCESS                               internal static bit(3)                   initial packed unaligned dcl 4-11
W_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 4-36
algol68_array_descriptor_dtype         internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
algol68_array_descriptor_dtype         internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
algol68_bits_dtype                     internal static fixed bin(17,0)          initial dcl 2-110 in procedure "GET_STATUS"
algol68_bits_dtype                     internal static fixed bin(17,0)          initial dcl 3-110 in procedure "GET_STRING_ARG"
algol68_bool_dtype                     internal static fixed bin(17,0)          initial dcl 3-110 in procedure "GET_STRING_ARG"
algol68_bool_dtype                     internal static fixed bin(17,0)          initial dcl 2-110 in procedure "GET_STATUS"
algol68_byte_dtype                     internal static fixed bin(17,0)          initial dcl 3-110 in procedure "GET_STRING_ARG"
algol68_byte_dtype                     internal static fixed bin(17,0)          initial dcl 2-110 in procedure "GET_STATUS"
algol68_char_dtype                     internal static fixed bin(17,0)          initial dcl 2-110 in procedure "GET_STATUS"
algol68_char_dtype                     internal static fixed bin(17,0)          initial dcl 3-110 in procedure "GET_STRING_ARG"
algol68_compl_dtype                    internal static fixed bin(17,0)          initial dcl 2-110 in procedure "GET_STATUS"
algol68_compl_dtype                    internal static fixed bin(17,0)          initial dcl 3-110 in procedure "GET_STRING_ARG"
algol68_format_dtype                   internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
algol68_format_dtype                   internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
algol68_int_dtype                      internal static fixed bin(17,0)          initial dcl 3-110 in procedure "GET_STRING_ARG"
algol68_int_dtype                      internal static fixed bin(17,0)          initial dcl 2-110 in procedure "GET_STATUS"
algol68_long_compl_dtype               internal static fixed bin(17,0)          initial dcl 3-110 in procedure "GET_STRING_ARG"
algol68_long_compl_dtype               internal static fixed bin(17,0)          initial dcl 2-110 in procedure "GET_STATUS"
algol68_long_int_dtype                 internal static fixed bin(17,0)          initial dcl 3-110 in procedure "GET_STRING_ARG"
algol68_long_int_dtype                 internal static fixed bin(17,0)          initial dcl 2-110 in procedure "GET_STATUS"
algol68_long_real_dtype                internal static fixed bin(17,0)          initial dcl 3-110 in procedure "GET_STRING_ARG"
algol68_long_real_dtype                internal static fixed bin(17,0)          initial dcl 2-110 in procedure "GET_STATUS"
algol68_real_dtype                     internal static fixed bin(17,0)          initial dcl 2-110 in procedure "GET_STATUS"
algol68_real_dtype                     internal static fixed bin(17,0)          initial dcl 3-110 in procedure "GET_STRING_ARG"
algol68_short_int_dtype                internal static fixed bin(17,0)          initial dcl 2-110 in procedure "GET_STATUS"
algol68_short_int_dtype                internal static fixed bin(17,0)          initial dcl 3-110 in procedure "GET_STRING_ARG"
algol68_straight_dtype                 internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
algol68_straight_dtype                 internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
algol68_struct_struct_bool_dtype       internal static fixed bin(17,0)          initial dcl 3-110 in procedure "GET_STRING_ARG"
algol68_struct_struct_bool_dtype       internal static fixed bin(17,0)          initial dcl 2-110 in procedure "GET_STATUS"
algol68_struct_struct_char_dtype       internal static fixed bin(17,0)          initial dcl 3-110 in procedure "GET_STRING_ARG"
algol68_struct_struct_char_dtype       internal static fixed bin(17,0)          initial dcl 2-110 in procedure "GET_STATUS"
algol68_union_dtype                    internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
algol68_union_dtype                    internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
area_dtype                             internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
area_dtype                             internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
assign_round_                   000000 constant        entry                    external dcl 1-22
assign_truncate_                000000 constant        entry                    external dcl 1-22
bit_dtype                              internal static fixed bin(17,0)          initial dcl 3-25
c_enum_const_dtype                     internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
c_enum_const_dtype                     internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
c_enum_dtype                           internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
c_enum_dtype                           internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
c_typeref_dtype                        internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
c_typeref_dtype                        internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
c_union_dtype                          internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
c_union_dtype                          internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
char_dtype                             internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
char_dtype                             internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
char_to_numeric_                000000 constant        entry                    external dcl 1-22
cobol_char_string_dtype                internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
cobol_char_string_dtype                internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
cobol_comp_5_ts_dtype                  internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
cobol_comp_5_ts_dtype                  internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
cobol_comp_5_uns_dtype                 internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
cobol_comp_5_uns_dtype                 internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
cobol_comp_6_dtype                     internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
cobol_comp_6_dtype                     internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
cobol_comp_7_dtype                     internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
cobol_comp_7_dtype                     internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
cobol_comp_8_ls_dtype                  internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
cobol_comp_8_ls_dtype                  internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
cobol_comp_8_uns_dtype                 internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
cobol_comp_8_uns_dtype                 internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
cobol_display_ls_dtype                 internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
cobol_display_ls_dtype                 internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
cobol_display_ls_overp_dtype           internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
cobol_display_ls_overp_dtype           internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
cobol_display_ts_dtype                 internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
cobol_display_ts_dtype                 internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
cobol_display_ts_overp_dtype           internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
cobol_display_ts_overp_dtype           internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
cobol_display_uns_dtype                internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
cobol_display_uns_dtype                internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
cobol_structure_dtype                  internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
cobol_structure_dtype                  internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
cplx_fix_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
cplx_fix_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
cplx_fix_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
cplx_fix_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
cplx_fix_dec_4bit_bytealigned_ls_dtype internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
cplx_fix_dec_4bit_bytealigned_ls_dtype internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
cplx_fix_dec_9bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
cplx_fix_dec_9bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
cplx_flt_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
cplx_flt_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
cplx_flt_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
cplx_flt_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
cplx_flt_bin_generic_dtype             internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
cplx_flt_bin_generic_dtype             internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
cplx_flt_dec_4bit_bytealigned_dtype    internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
cplx_flt_dec_4bit_bytealigned_dtype    internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
cplx_flt_dec_9bit_dtype                internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
cplx_flt_dec_9bit_dtype                internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
cplx_flt_dec_extended_dtype            internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
cplx_flt_dec_extended_dtype            internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
cplx_flt_dec_generic_dtype             internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
cplx_flt_dec_generic_dtype             internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
cplx_flt_hex_1_dtype                   internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
cplx_flt_hex_1_dtype                   internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
cplx_flt_hex_2_dtype                   internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
cplx_flt_hex_2_dtype                   internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
entry_dtype                            internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
entry_dtype                            internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
ext_entry_runtime_dtype                internal static fixed bin(17,0)          initial dcl 3-125 in procedure "GET_STRING_ARG"
ext_entry_runtime_dtype                internal static fixed bin(17,0)          initial dcl 2-125 in procedure "GET_STATUS"
ext_procedure_runtime_dtype            internal static fixed bin(17,0)          initial dcl 2-125 in procedure "GET_STATUS"
ext_procedure_runtime_dtype            internal static fixed bin(17,0)          initial dcl 3-125 in procedure "GET_STRING_ARG"
file_dtype                             internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
file_dtype                             internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
ft_char_dtype                          internal static fixed bin(17,0)          initial dcl 3-96 in procedure "GET_STRING_ARG"
ft_char_dtype                          internal static fixed bin(17,0)          initial dcl 2-96 in procedure "GET_STATUS"
ft_complex_double_dtype                internal static fixed bin(17,0)          initial dcl 3-96 in procedure "GET_STRING_ARG"
ft_complex_double_dtype                internal static fixed bin(17,0)          initial dcl 2-96 in procedure "GET_STATUS"
ft_complex_dtype                       internal static fixed bin(17,0)          initial dcl 3-96 in procedure "GET_STRING_ARG"
ft_complex_dtype                       internal static fixed bin(17,0)          initial dcl 2-96 in procedure "GET_STATUS"
ft_double_dtype                        internal static fixed bin(17,0)          initial dcl 2-96 in procedure "GET_STATUS"
ft_double_dtype                        internal static fixed bin(17,0)          initial dcl 3-96 in procedure "GET_STRING_ARG"
ft_external_dtype                      internal static fixed bin(17,0)          initial dcl 3-96 in procedure "GET_STRING_ARG"
ft_external_dtype                      internal static fixed bin(17,0)          initial dcl 2-96 in procedure "GET_STATUS"
ft_hex_complex_double_dtype            internal static fixed bin(17,0)          initial dcl 3-96 in procedure "GET_STRING_ARG"
ft_hex_complex_double_dtype            internal static fixed bin(17,0)          initial dcl 2-96 in procedure "GET_STATUS"
ft_hex_complex_dtype                   internal static fixed bin(17,0)          initial dcl 2-96 in procedure "GET_STATUS"
ft_hex_complex_dtype                   internal static fixed bin(17,0)          initial dcl 3-96 in procedure "GET_STRING_ARG"
ft_hex_double_dtype                    internal static fixed bin(17,0)          initial dcl 2-96 in procedure "GET_STATUS"
ft_hex_double_dtype                    internal static fixed bin(17,0)          initial dcl 3-96 in procedure "GET_STRING_ARG"
ft_hex_real_dtype                      internal static fixed bin(17,0)          initial dcl 2-96 in procedure "GET_STATUS"
ft_hex_real_dtype                      internal static fixed bin(17,0)          initial dcl 3-96 in procedure "GET_STRING_ARG"
ft_integer_dtype                       internal static fixed bin(17,0)          initial dcl 3-96 in procedure "GET_STRING_ARG"
ft_integer_dtype                       internal static fixed bin(17,0)          initial dcl 2-96 in procedure "GET_STATUS"
ft_logical_dtype                       internal static fixed bin(17,0)          initial dcl 2-96 in procedure "GET_STATUS"
ft_logical_dtype                       internal static fixed bin(17,0)          initial dcl 3-96 in procedure "GET_STRING_ARG"
ft_real_dtype                          internal static fixed bin(17,0)          initial dcl 2-96 in procedure "GET_STATUS"
ft_real_dtype                          internal static fixed bin(17,0)          initial dcl 3-96 in procedure "GET_STRING_ARG"
int_entry_runtime_dtype                internal static fixed bin(17,0)          initial dcl 3-125 in procedure "GET_STRING_ARG"
int_entry_runtime_dtype                internal static fixed bin(17,0)          initial dcl 2-125 in procedure "GET_STATUS"
label_constant_runtime_dtype           internal static fixed bin(17,0)          initial dcl 2-125 in procedure "GET_STATUS"
label_constant_runtime_dtype           internal static fixed bin(17,0)          initial dcl 3-125 in procedure "GET_STRING_ARG"
label_dtype                            internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
label_dtype                            internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
offset_dtype                           internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
offset_dtype                           internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
outclength                             based           fixed bin(31,0)          dcl 1-20
pascal_boolean_dtype                   internal static fixed bin(17,0)          initial dcl 2-132 in procedure "GET_STATUS"
pascal_boolean_dtype                   internal static fixed bin(17,0)          initial dcl 3-132 in procedure "GET_STRING_ARG"
pascal_char_dtype                      internal static fixed bin(17,0)          initial dcl 2-132 in procedure "GET_STATUS"
pascal_char_dtype                      internal static fixed bin(17,0)          initial dcl 3-132 in procedure "GET_STRING_ARG"
pascal_entry_formal_parameter_dtype    internal static fixed bin(17,0)          initial dcl 3-132 in procedure "GET_STRING_ARG"
pascal_entry_formal_parameter_dtype    internal static fixed bin(17,0)          initial dcl 2-132 in procedure "GET_STATUS"
pascal_enumerated_type_dtype           internal static fixed bin(17,0)          initial dcl 3-132 in procedure "GET_STRING_ARG"
pascal_enumerated_type_dtype           internal static fixed bin(17,0)          initial dcl 2-132 in procedure "GET_STATUS"
pascal_enumerated_type_element_dtype   internal static fixed bin(17,0)          initial dcl 3-132 in procedure "GET_STRING_ARG"
pascal_enumerated_type_element_dtype   internal static fixed bin(17,0)          initial dcl 2-132 in procedure "GET_STATUS"
pascal_enumerated_type_instance_dtype  internal static fixed bin(17,0)          initial dcl 3-132 in procedure "GET_STRING_ARG"
pascal_enumerated_type_instance_dtype  internal static fixed bin(17,0)          initial dcl 2-132 in procedure "GET_STATUS"
pascal_exportable_procedure_dtype      internal static fixed bin(17,0)          initial dcl 2-132 in procedure "GET_STATUS"
pascal_exportable_procedure_dtype      internal static fixed bin(17,0)          initial dcl 3-132 in procedure "GET_STRING_ARG"
pascal_imported_procedure_dtype        internal static fixed bin(17,0)          initial dcl 3-132 in procedure "GET_STRING_ARG"
pascal_imported_procedure_dtype        internal static fixed bin(17,0)          initial dcl 2-132 in procedure "GET_STATUS"
pascal_integer_dtype                   internal static fixed bin(17,0)          initial dcl 2-132 in procedure "GET_STATUS"
pascal_integer_dtype                   internal static fixed bin(17,0)          initial dcl 3-132 in procedure "GET_STRING_ARG"
pascal_internal_procedure_dtype        internal static fixed bin(17,0)          initial dcl 3-132 in procedure "GET_STRING_ARG"
pascal_internal_procedure_dtype        internal static fixed bin(17,0)          initial dcl 2-132 in procedure "GET_STATUS"
pascal_label_dtype                     internal static fixed bin(17,0)          initial dcl 2-132 in procedure "GET_STATUS"
pascal_label_dtype                     internal static fixed bin(17,0)          initial dcl 3-132 in procedure "GET_STRING_ARG"
pascal_parameter_procedure_dtype       internal static fixed bin(17,0)          initial dcl 2-132 in procedure "GET_STATUS"
pascal_parameter_procedure_dtype       internal static fixed bin(17,0)          initial dcl 3-132 in procedure "GET_STRING_ARG"
pascal_procedure_type_dtype            internal static fixed bin(17,0)          initial dcl 3-132 in procedure "GET_STRING_ARG"
pascal_procedure_type_dtype            internal static fixed bin(17,0)          initial dcl 2-132 in procedure "GET_STATUS"
pascal_real_dtype                      internal static fixed bin(17,0)          initial dcl 2-132 in procedure "GET_STATUS"
pascal_real_dtype                      internal static fixed bin(17,0)          initial dcl 3-132 in procedure "GET_STRING_ARG"
pascal_record_file_type_dtype          internal static fixed bin(17,0)          initial dcl 3-132 in procedure "GET_STRING_ARG"
pascal_record_file_type_dtype          internal static fixed bin(17,0)          initial dcl 2-132 in procedure "GET_STATUS"
pascal_record_type_dtype               internal static fixed bin(17,0)          initial dcl 3-132 in procedure "GET_STRING_ARG"
pascal_record_type_dtype               internal static fixed bin(17,0)          initial dcl 2-132 in procedure "GET_STATUS"
pascal_set_dtype                       internal static fixed bin(17,0)          initial dcl 3-132 in procedure "GET_STRING_ARG"
pascal_set_dtype                       internal static fixed bin(17,0)          initial dcl 2-132 in procedure "GET_STATUS"
pascal_string_type_dtype               internal static fixed bin(17,0)          initial dcl 3-132 in procedure "GET_STRING_ARG"
pascal_string_type_dtype               internal static fixed bin(17,0)          initial dcl 2-132 in procedure "GET_STATUS"
pascal_text_file_dtype                 internal static fixed bin(17,0)          initial dcl 3-132 in procedure "GET_STRING_ARG"
pascal_text_file_dtype                 internal static fixed bin(17,0)          initial dcl 2-132 in procedure "GET_STATUS"
pascal_typed_pointer_type_dtype        internal static fixed bin(17,0)          initial dcl 2-132 in procedure "GET_STATUS"
pascal_typed_pointer_type_dtype        internal static fixed bin(17,0)          initial dcl 3-132 in procedure "GET_STRING_ARG"
pascal_user_defined_type_dtype         internal static fixed bin(17,0)          initial dcl 3-132 in procedure "GET_STRING_ARG"
pascal_user_defined_type_dtype         internal static fixed bin(17,0)          initial dcl 2-132 in procedure "GET_STATUS"
pascal_user_defined_type_instance_dtype
                                       internal static fixed bin(17,0)          initial dcl 3-132 in procedure "GET_STRING_ARG"
pascal_user_defined_type_instance_dtype
                                       internal static fixed bin(17,0)          initial dcl 2-132 in procedure "GET_STATUS"
pascal_value_formal_parameter_dtype    internal static fixed bin(17,0)          initial dcl 2-132 in procedure "GET_STATUS"
pascal_value_formal_parameter_dtype    internal static fixed bin(17,0)          initial dcl 3-132 in procedure "GET_STRING_ARG"
pascal_variable_formal_parameter_dtype internal static fixed bin(17,0)          initial dcl 2-132 in procedure "GET_STATUS"
pascal_variable_formal_parameter_dtype internal static fixed bin(17,0)          initial dcl 3-132 in procedure "GET_STRING_ARG"
picture_runtime_dtype                  internal static fixed bin(17,0)          initial dcl 3-125 in procedure "GET_STRING_ARG"
picture_runtime_dtype                  internal static fixed bin(17,0)          initial dcl 2-125 in procedure "GET_STATUS"
pointer_dtype                          internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
pointer_dtype                          internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
real_fix_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 3-25
real_fix_bin_1_uns_dtype               internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
real_fix_bin_1_uns_dtype               internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
real_fix_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
real_fix_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
real_fix_bin_2_uns_dtype               internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
real_fix_bin_2_uns_dtype               internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
real_fix_dec_4bit_bytealigned_ls_dtype internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
real_fix_dec_4bit_bytealigned_ls_dtype internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
real_fix_dec_4bit_bytealigned_uns_dtype
                                       internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
real_fix_dec_4bit_bytealigned_uns_dtype
                                       internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
real_fix_dec_4bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
real_fix_dec_4bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
real_fix_dec_4bit_ts_dtype             internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
real_fix_dec_4bit_ts_dtype             internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
real_fix_dec_4bit_uns_dtype            internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
real_fix_dec_4bit_uns_dtype            internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
real_fix_dec_9bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
real_fix_dec_9bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
real_fix_dec_9bit_ls_overp_dtype       internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
real_fix_dec_9bit_ls_overp_dtype       internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
real_fix_dec_9bit_ts_dtype             internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
real_fix_dec_9bit_ts_dtype             internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
real_fix_dec_9bit_ts_overp_dtype       internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
real_fix_dec_9bit_ts_overp_dtype       internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
real_fix_dec_9bit_uns_dtype            internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
real_fix_dec_9bit_uns_dtype            internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
real_flt_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
real_flt_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
real_flt_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
real_flt_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
real_flt_bin_generic_dtype             internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
real_flt_bin_generic_dtype             internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
real_flt_dec_4bit_bytealigned_dtype    internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
real_flt_dec_4bit_bytealigned_dtype    internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
real_flt_dec_4bit_dtype                internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
real_flt_dec_4bit_dtype                internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
real_flt_dec_9bit_dtype                internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
real_flt_dec_9bit_dtype                internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
real_flt_dec_extended_dtype            internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
real_flt_dec_extended_dtype            internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
real_flt_dec_generic_dtype             internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
real_flt_dec_generic_dtype             internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
real_flt_hex_1_dtype                   internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
real_flt_hex_1_dtype                   internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
real_flt_hex_2_dtype                   internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
real_flt_hex_2_dtype                   internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
structure_dtype                        internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
structure_dtype                        internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
varying_bit_dtype                      internal static fixed bin(17,0)          initial dcl 2-25 in procedure "GET_STATUS"
varying_bit_dtype                      internal static fixed bin(17,0)          initial dcl 3-25 in procedure "GET_STRING_ARG"
xmail_version                          internal static varying char(10)         initial dcl 5-84

NAMES DECLARED BY EXPLICIT CONTEXT.
GET_CALLER_MSG                  001333 constant        entry                    internal dcl 253 ref 142
GET_STATUS                      001050 constant        entry                    internal dcl 168 ref 139
GET_STRING_ARG                  001237 constant        entry                    internal dcl 221 ref 140 141 271
MAKE_LOG_ENTRY                  001445 constant        entry                    internal dcl 284 ref 155
MODES                           000335 constant        label                    dcl 369
XMAIL_ERROR                     000523 constant        entry                    internal dcl 106 ref 88 93 98 103
add_to_error_log                002343 constant        entry                    internal dcl 332 ref 322
code_first                      000257 constant        entry                    external dcl 91
code_last                       000242 constant        entry                    external dcl 86
no_code                         000274 constant        entry                    external dcl 96
no_print                        000314 constant        entry                    external dcl 101
xmail_error_                    000233 constant        entry                    external dcl 81
xmail_error_modes               000330 constant        entry                    external dcl 367

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      3034        3124    2510        3044
Length      3472    2510        70         331     323           2

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
xmail_error_                        664 external procedure  is an external procedure.  
XMAIL_ERROR                             internal procedure  shares stack frame of external procedure xmail_error_.  
GET_STATUS                              internal procedure  shares stack frame of external procedure xmail_error_.  
GET_STRING_ARG                          internal procedure  shares stack frame of external procedure xmail_error_.  
GET_CALLER_MSG                          internal procedure  shares stack frame of external procedure xmail_error_.  
MAKE_LOG_ENTRY                          internal procedure  shares stack frame of external procedure xmail_error_.  
add_to_error_log                     67 internal procedure  is called during a stack extension.  
begin block on line 369                 begin block         shares stack frame of external procedure xmail_error_.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 DEBUG                       xmail_error_

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
add_to_error_log         000100 starting_col                add_to_error_log
xmail_error_             000106 arg_list                    XMAIL_ERROR
                         000110 status                      XMAIL_ERROR
                         000111 status_text                 XMAIL_ERROR
                         000142 disposition                 XMAIL_ERROR
                         000144 caller_p                    XMAIL_ERROR
                         000146 caller_l                    XMAIL_ERROR
                         000150 disposition_arg_p           XMAIL_ERROR
                         000152 disposition_arg_l           XMAIL_ERROR
                         000154 caller_msg_p                XMAIL_ERROR
                         000156 caller_msg_l                XMAIL_ERROR
                         000174 type                        GET_STATUS
                         000175 ndims                       GET_STATUS
                         000176 prec                        GET_STATUS
                         000177 scale                       GET_STATUS
                         000200 packed                      GET_STATUS
                         000202 arg_p                       GET_STATUS
                         000204 intype                      GET_STATUS
                         000205 outtype                     GET_STATUS
                         000206 inscale_prec                GET_STATUS
                         000207 outscale_prec               GET_STATUS
                         000216 type                        GET_STRING_ARG
                         000217 code                        GET_STRING_ARG
                         000226 msg_text                    GET_CALLER_MSG
                         000326 result_length               GET_CALLER_MSG
                         000330 ctl_p                       GET_CALLER_MSG
                         000332 ctl_l                       GET_CALLER_MSG
                         000342 bit_count                   MAKE_LOG_ENTRY
                         000343 status                      MAKE_LOG_ENTRY
                         000344 date_time_str               MAKE_LOG_ENTRY
                         000365 error_log_len               MAKE_LOG_ENTRY
                         000366 error_log_ptr               MAKE_LOG_ENTRY
                         000370 nargs                       begin block on line 369
                         000371 code                        begin block on line 369
                         000372 arg_p                       begin block on line 369
                         000374 arg_l                       begin block on line 369

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_ne_as             alloc_char_temp     cat_realloc_chars   call_ext_out_desc   call_ext_out        call_int_this_desc
begin_return_mac    return_mac          tra_ext_2           signal_op           shorten_stack       ext_entry
int_entry_desc      clock_mac

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
adjust_bit_count_             assign_                       com_err_                      convert_status_code_
cu_$arg_count                 cu_$arg_list_ptr              cu_$arg_ptr                   cu_$arg_ptr_rel
cu_$arg_ptr_rel               date_time_$format             decode_descriptor_            decode_descriptor_
hcs_$initiate_count           hcs_$make_seg                 ioa_                          ioa_
ioa_$general_rs               ioa_$nnl                      timer_manager_$sleep

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$bad_mode         error_table_$noentry          error_table_$too_many_args    xmail_data_ptr




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     81 000232        86 000240        88 000247        89 000255        91 000256        93 000264        94 000272
     96 000273        98 000301        99 000312       101 000313       103 000321       104 000326       367 000327
    388 000335       389 000346       390 000356       391 000402       392 000404       393 000421       396 000423
    399 000447       400 000461       401 000470       408 000522       106 000523       138 000534       139 000543
    140 000547       141 000553       142 000557       144 000563       146 000571       148 000635       153 000714
    154 000721       155 000727       157 000765       158 000772       159 000774       160 001022       161 001037
    163 001044       166 001047       168 001050       190 001052       191 001073       192 001076       193 001121
    196 001133       198 001142       201 001152       202 001155       204 001157       205 001161       206 001163
    207 001165       211 001211       212 001221       213 001236       221 001237       237 001241       238 001261
    239 001263       240 001266       241 001267       243 001270       244 001321       247 001332       253 001333
    271 001335       272 001352       273 001354       274 001357       275 001360       277 001361       278 001364
    279 001430       282 001444       284 001445       304 001463       309 001465       310 001542       312 001547
    313 001615       314 001621       315 001622       316 001623       318 001630       320 001634       322 001702
    328 002302       330 002306       348 002341       332 002342       337 002356       339 002362       341 002364
    342 002366       344 002402


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
