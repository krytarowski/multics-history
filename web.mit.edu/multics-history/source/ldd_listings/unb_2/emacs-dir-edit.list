LISTING FOR  >spec>install>1136>emacs-dir-edit
COMPILED BY Multics LISP Compiler, Version 2.13c, July 11, 1983
ON 08/20/86  2255.0 mst Wed
IN BEHALF OF Martinson.SysMaint.a



;;; ***********************************************************
;;; *                                                         *
;;; * Copyright, (C) Honeywell Information Systems Inc., 1982 *
;;; *                                                         *
;;; * Copyright (c) 1978 by Massachusetts Institute of        *
;;; * Technology and Honeywell Information Systems, Inc.      *
;;; *                                                         *
;;; ***********************************************************
;;;
;;;
;;;	Directory editor
;;;	Archy, '78, extracted from e_macops_ 8/16/79 by BSG
;;;	Modified: 12/8/83 - B. Margolin - don't	allow d/u when on
;;;		blank line at the end.  Also modernized some code
;;;		(defun->defcom, lambda->let, comout-get-output).
;;;

(%include e-macros)
(declare (special dired-segs-to-delete dired-buffer-to-go-back-to dired-dir)
         (*expr absolute_pathname_ convert_status_code_ error_table_
	      expand_pathname_ go-to-hpos minibuffer-remark))

(declare (defpl1 cu_$level_get "" (return fixed bin)))
(defprop trim e_lap_$trim expr)
(declare (defpl1 hcs_$get_user_effmode
	         "" (char (*))(char (*))(char (*))(fixed bin)(return fixed bin)(return fixed bin (35.))))

(defcom edit-dir
        &numeric-argument (&pass)
        &arguments ((dir &default &eval (if numarg (minibuf-response "Directory: " NL)
			        else "")))
        (setq dir (absolute_pathname_ dir))
        (if (not (zerop (cadr dir)))
	  (display-com-error (cadr dir) "")
	  else
	  (setq dir (trim (car dir))))
        (let ((access-ok (dired-access-check dir)))
	   (if (not access-ok)
	       (display-error-noabort "Warning: Modify access on " dir " lacking.")))
        (go-to-or-create-buffer 'Dir/ Edit)
        (setq buffer-modified-flag t)
        (comout-get-output "list -pn" dir
		       "-mode -name -primary -length -no_header")
        (setq fpathname dir)			;for user
        (do-forever (go-to-beginning-of-line)
		(insert-string TAB)
		(if (lastlinep)(stop-doing))
		(next-line))
        (go-to-beginning-of-buffer)
        (dired-mode)
        (setq dired-segs-to-delete nil)
        (setq dired-buffer-to-go-back-to previous-buffer)
        (setq dired-dir dir)
        (setq read-only-flag t buffer-modified-flag nil)
        (select-buffer-find-window current-buffer 'cursize))

(defun dired-mode ()
       (setq current-buffer-mode 'DIRED)
       (register-local-var 'dired-segs-to-delete)
       (register-local-var 'dired-buffer-to-go-back-to)
       (register-local-var 'dired-dir)
       (set-key 'D 'dired-mark-for-deletion)
       (set-key 'd 'dired-mark-for-deletion)
       (set-key 'n 'next-line-command)
       (set-key 'p 'prev-line-command)
       (set-key 'N 'next-line-command)
       (set-key 'P 'prev-line-command)
       (set-key 'R 'dired-rename)
       (set-key 'r 'dired-rename)
       (set-key 'U 'dired-unmark-for-deletion)
       (set-key 'u 'dired-unmark-for-deletion)
       (set-key 'E 'dired-examine-file)
       (set-key 'e 'dired-examine-file)
       (set-key 'Q 'dired-quit)
       (set-key 'q 'dired-quit)
       (set-key '^X^Q 'dired-quit)
       (set-key '^XB 'dired-quit-and-go-buffer))

(defcom dired-mark-for-deletion
        (if (lastlinep) (command-quit))		;Last line is empty
        (go-to-beginning-of-line)
        (if-at "D"
	     else (without-modifying (insert-string "D"))
		(setq dired-segs-to-delete (cons (dired-get-filename)
					   dired-segs-to-delete)))
        (next-line))

(defcom dired-unmark-for-deletion
        (if (lastlinep) (command-quit))		;Last line is empty
        (go-to-beginning-of-line)
        (if-at "D" (without-modifying (delete-char))
	         (setq dired-segs-to-delete (delete
				        (dired-get-filename)
				        dired-segs-to-delete)))
        (next-line))
			    
(defcom dired-examine-file
        (let ((dname dired-dir)
	    (ename (dired-get-filename)))
	   (find-buffer-in-window '|Dired Examine|)
	   (set-key '^X^Q 'dired-exit-examine-buffer)
	   (read-in-file (catenate dname ">" ename))
	   (minibuffer-remark "Use ^X^Q to return to DIRED")))

(defcom dired-exit-examine-buffer
        (set-buffer-self-destruct current-buffer)
        (find-buffer-in-window '|Dir Edit|))

(defcom dired-quit
        (cond ((null dired-segs-to-delete)
	     (set-buffer-self-destruct current-buffer)
	     (select-buffer-window dired-buffer-to-go-back-to nil)
	     (setq previous-buffer current-buffer))
	    (t (dired-m-access-check)		;aborts if access lacking
	       (init-local-displays)
	       (local-display-generator-nnl "Files to delete:")
	       (local-display-generator-nnl "")
	       (mapc 'local-display-generator-nnl dired-segs-to-delete)
	       (local-display-generator "---------------")
	       (if (yesp "Deleting the above listed files, OK? ")
		 (dired-delete-files dired-segs-to-delete)
		 (set-buffer-self-destruct current-buffer)
		 (select-buffer-window dired-buffer-to-go-back-to nil)
		 (setq previous-buffer current-buffer)
		 else (go-to-beginning-of-buffer)))))

(defcom dired-quit-and-go-buffer
        &arguments ((buffer &symbol &prompt "Select Buffer: "
		        &default  &eval dired-buffer-to-go-back-to))
        (set-buffer-self-destruct current-buffer)
        (let ((prevbuf dired-buffer-to-go-back-to))
	   (select-buffer-window buffer nil)
	   (setq previous-buffer prevbuf)))

(defun dired-get-filename ()
        (go-to-end-of-line)
        (skip-back-whitespace)
        (with-mark m (go-to-beginning-of-line)
	           (go-to-hpos 20.)
		 (prog1 (point-mark-to-string m)
		        (go-to-beginning-of-line))))

(declare (defpl1 delete_$path "" (char (*))(char (*))(bit (6))(char (*))
	       (return fixed bin (35.))))


(defun dired-delete-files (seg-list)		;bsg 5/3/79 for delete_
       (let  ((err-list nil)
	    (code))
	   (mapc '(lambda (file)
		        (setq code (delete_$path dired-dir file
					   (lsh 44 30.) "emacs"))
		        (or (= 0 code)(setq err-list
				        (cons (cons file code)
					    err-list))))
	         seg-list)
	   (if (not (null err-list))
	       (init-local-displays)
	       (mapc 'local-display-generator-nnl
		   '("Errors encountered during deletions:"
		      "These files not deleted:"
		      ""))
	       (mapc '(lambda (x)(local-display-generator-nnl
			       (catenate
			         (e_lap_$trim
				 (cadr (convert_status_code_ (cdr x))))
			         " "
			         (car x))))
		   err-list)
	       (end-local-displays))))

(defun dired-access-check (dir)
       (let ((epr (expand_pathname_ dir)))
	  (let ((hcssr (hcs_$get_user_effmode (car epr)(cadr epr) ""
				        (cu_$level_get))))
	       (if (not (zerop (cadr hcssr)))
		 (if (= (cadr hcssr)(error_table_ 'incorrect_access))
		     (rplaca hcssr 77)
		     (display-error-noabort "Warning: cannot check access on " dir ".")
		     else
		     (display-com-error (cadr hcssr) dir)))
	       (let ((mode (car hcssr)))
		  (if (zerop (boole 1 mode 10))
		      (display-error "dired: Status permission on " dir " lacking."))
		  (not (zerop (boole 1 2 mode)))))))

;; 11/24/79 BSG

(declare (defpl1 hcs_$chname_file "" (char (*))(char (*))(char (*))(char (*))(return fixed bin (35.))))

(defcom dired-rename
        &prologue dired-m-access-check
        &arguments ((new &string &prompt
		     &eval (catenate "New name for " (dired-get-filename) ": ")))
        (let ((old (dired-get-filename)))
	   (let ((code (hcs_$chname_file dired-dir old old new)))
	        (or (zerop code)
		  (display-com-error code new))
	        (go-to-hpos 20.)
	        (without-modifying (without-saving (kill-to-end-of-line))
			       (insert-string new)
			       (go-to-beginning-of-line)))))

(defun dired-m-access-check ()
       (if (not (dired-access-check dired-dir))
	 (display-error "Modify access lacking on " dired-dir)))

INCLUDE FILE >spec>install>1136>executable>e-macros.incl.lisp

;;; BEGIN INCLUDE FILE e-macros.incl.lisp

;;; Declares for use by Emacs programs and extenstions.  Also loads
;;; in e_macros_, which contains macro definitions.

;;; HISTORY COMMENTS:
;;;  1) change(85-01-01,Margolin), approve(86-02-24,MCR7186),
;;;     audit(86-08-12,Harvey), install(86-08-20,MR12.0-1136):
;;;     Written: New Year's Day 1985, by excerpting the old e-macros.incl.lisp
;;;     and leaving out all the definitions and qwerty junk (don't ask).
;;;  2) change(86-02-24,Margolin), approve(86-02-24,MCR7325),
;;;     audit(86-08-12,Harvey), install(86-08-20,MR12.0-1136):
;;;     Alphabetized declarations, and added more declarations for documented
;;;     functions, and also for some undocumented functions.
;;;                                                      END HISTORY COMMENTS

(%include backquote)

(declare					;basic editor stuff
  (*expr apply-catenate
         assert-minor-mode backward-char backward-n-chars charlisten
         charset-member command-abort command-quit
         copy-region cur-hpos curline-as-string curbuf-as-string curchar
         curline-as-string delete-char delete-word destroy-buffer-contents
         dont-notice-modified-buffer e_cline_ e_lap_$reverse-search-string
         e_lap_$trim empty-buffer-p error_table_ establish-local-var
         exchange-point-and-mark firstlinep forward-char forward-n-chars
         forward-regexp-search-in-line forward-search forward-search-in-line
         get-char get-search-string go-to-beginning-of-buffer
         go-to-beginning-of-line go-to-buffer go-to-end-of-buffer
         go-to-end-of-line go-to-hpos go-to-mark go-to-or-create-buffer
         insert-char insert-string kill-backwards-to-mark kill-forward-to-mark
         kill-pop kill-to-end-of-line killsave-string lastlinep loadfile
         looking-at lowercase map-over-emacs-commands mark-on-current-line-p
         mark-reached merge-kills-forward merge-kills-reverse move-mark
         minibuf-response minibuffer-clear
         negate-minor-mode new-line next-line nullstringp pathname_
         pathname_$component point-mark-to-string
         point>markp prev-line printable process-char produce-named-mark-list
         read-in-file release-mark reverse-search
         register-local-var reverse-search-in-line
         search-back-first-charset-line
         search-back-first-not-charset-line search-failure-annunciator
         search-for-first-charset-line search-for-first-not-charset-line
         set-emacs-epilogue-handler set-buffer-self-destruct set-key
         set-mark-here set-mark set-perm-key set-the-mark set-the-mark-here
         skip-to-whitespace skip-to-whitespace-in-line
         wipe-point-mark wipe-region write-out-file
         trim-minibuf-response yesp yank)
  (*fexpr define-autoload-lib))

(declare					;redisplay stuff
  (*expr end-local-displays init-local-displays ring-tty-bell
         local-display-generator local-display-generator-nnl
         next-screen prev-screen local-display-current-line
         find-buffer-in-window select-buffer-window window-info
         select-buffer-find-window select-other-window select-window
         buffer-on-display-in-window redisplay full-redisplay))

(declare					;extended stuff
  (*expr forward-word backward-word skip-over-whitespace skip-back-whitespace
         skip-over-whitespace-in-line skip-back-whitespace-in-line
         skip-back-to-whitespace skip-to-whitespace rubout-char date
         display-buffer-as-printout delete-white-sides lefthand-char
         format-to-col whitespace-to-hpos line-is-blank decimal-rep
         register-option minibuffer-clear))

(declare (*lexpr display-error display-com-error display-error-noabort
	       display-error-remark comout-get-output
	       display-com-error-noabort minibuffer-print
	       minibuffer-response trim-minibuffer-response
	       intern-minibuffer-response minibuffer-remark
	       minibuffer-print-noclear report-error report-error-noabort))

(declare (special TAB NL SPACE ESC curpointpos current-buffer dont-stash
	        numarg der-wahrer-mark fpathname fill-column completion-list
	        curlinel BACKSPACE read-only-flag buffer-modified-flag
	        previous-buffer current-buffer-mode env-dir process-dir
	        minibuffer-end-string NLCHARSTRING undo null-pointer))

;;; Load in macro packages
(eval-when (eval compile)
  (or (status feature e-defcom)
      (progn (load (catenate (car (namelist (truename infile))) ">e_define_command_"))
	   (sstatus feature e-defcom)))
  (or (status feature e-macros)
      (load (catenate (car (namelist (truename infile))) ">e_macros_"))))

;;; END INCLUDE FILE e-macros.incl.lisp

INCLUDE FILE >ldd>include>backquote.incl.lisp

;;;
;;; backquote.incl.lisp - BSG 10/9/79
;;; Loads lisp_backquote_ into either the compiler or interpreter
;;; environment.
;;;
;;; Modified 10/30/82 by Richard Lamson to use eval-when and
;;;				   (status feature backquote)
;;;
(eval-when (eval compile)
  (or (status feature backquote)
      (load (catenate (car (namelist (truename infile))) ">lisp_backquote_"))))

			Functions Defined

Name			Offset		Offset		Name


cu_$level_get                    0		   0		cu_$level_get
delete_$path                     774		   24		hcs_$get_user_effmode
dired-access-check               1202		   116		edit-dir
dired-delete-files               1050		   254		edit-dir-$-1-$-&default
dired-examine-file               527		   270		dired-mode
dired-exit-examine-buffer        567		   447		dired-mark-for-deletion
dired-get-filename               731		   477		dired-unmark-for-deletion
dired-m-access-check             1472		   527		dired-examine-file
dired-mark-for-deletion          447		   567		dired-exit-examine-buffer
dired-mode                       270		   600		dired-quit
dired-quit                       600		   706		dired-quit-and-go-buffer
dired-quit-and-go-buffer         706		   727		dired-quit-and-go-buffer-$-1-$-&default
dired-quit-and-go-buffer-$-1-$-&default    727		   731		dired-get-filename
dired-rename                     1376		   774		delete_$path
dired-rename-$-1-$-&prompt       1460		   1050		dired-delete-files
dired-unmark-for-deletion        477		   1202		dired-access-check
edit-dir                         116		   1322		hcs_$chname_file
edit-dir-$-1-$-&default          254		   1376		dired-rename
hcs_$chname_file                 1322		   1460		dired-rename-$-1-$-&prompt
hcs_$get_user_effmode            24		   1472		dired-m-access-check





			Functions Referenced

absolute_pathname_                      display-error-noabort                   local-display-generator
catenate                                e_lap_$trim                             local-display-generator-nnl
command-quit                            end-local-displays                      minibuf-response
comout-get-output                       error_table_                            minibuffer-remark
convert_status_code_                    expand_pathname_                        next-line
cu_$level_get                           find-buffer-in-window                   point-mark-to-string
curchar                                 go-to-beginning-of-buffer               read-in-file
delete                                  go-to-beginning-of-line                 register-local-var
delete-char                             go-to-end-of-line                       release-mark
delete_$path                            go-to-hpos                              select-buffer-find-window
dired-access-check                      go-to-or-create-buffer                  select-buffer-window
dired-delete-files                      hcs_$chname_file                        set-buffer-self-destruct
dired-get-filename                      hcs_$get_user_effmode                   set-key
dired-m-access-check                    init-local-displays                     set-mark
dired-mode                              insert-string                           skip-back-whitespace
display-com-error                       kill-to-end-of-line                     trim
display-error                           lastlinep                               yesp
display-error                                                                   


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
