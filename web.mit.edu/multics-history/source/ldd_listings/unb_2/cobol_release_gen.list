	COMPILATION LISTING OF SEGMENT cobol_release_gen
	Compiled by: Multics PL/I Compiler, Release 31b, of April 24, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 05/24/89  0957.2 mst Wed
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        6*        *                                                         *
        7*        * Copyright (c) 1972 by Massachusetts Institute of        *
        8*        * Technology and Honeywell Information Systems, Inc.      *
        9*        *                                                         *
       10*        *********************************************************** */
       11 
       12 
       13 
       14 
       15 /****^  HISTORY COMMENTS:
       16*  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
       17*     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
       18*     MCR8060 cobol_release_gen.pl1 Added Trace statements.
       19*  2) change(89-04-23,Zimmerman), approve(89-04-23,MCR8072),
       20*     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
       21*     MCR8072 cobol_release_gen.pl1 Correct inverted sorts for some binary data
       22*     types.
       23*                                                   END HISTORY COMMENTS */
       24 
       25 
       26 /* Modified on 10/23/84 by FCH, [5.3-2], BUG564(phx17268), SORT statement produces ipc fault at run time */
       27 /* Modified on 10/19/84 by FCH, [5.3-1], BUG563(phx18381), new cobol_addr_tokens.inal.pl1 */
       28 /* Modified on 5/16/76  by Bob Chang to implement the retry after error.	*/
       29 /* Modified on 05/05/76 by Bob Chang to use call_op. */
       30 /* Modified on 05/03/76 by Bob Chang to interface with cobol_rts_. */
       31 /* Modified on 04/07/76 by Bob Chang to interface with multics sort package.	*/
       32 /* Modified on 3/19/76 by Bob Chang to interface with the cobol_operators_. */
       33 /* format: style3 */
       34 cobol_release_gen:
       35      proc (in_token_ptr);
       36 
       37 /*
       38*The procedure cobol_release_gen generates the code necessary to
       39*implement the COBOL RELEASE statement. The format of the RELEASE
       40*statement is as follows:
       41*
       42*R_E_L_E_A_S_E_ record-name  [F_R_O_M_  identifier ]
       43*
       44*The execution of a RELEASE statement causes the record named by
       45*record-name to be released to the initial phase of a sort operation.
       46*If the FROM phrase is used, the contents of the identifier data
       47*area are moved to the record-name, then the contents of record-name
       48*aare released to the sort file. Moving takes place according to the
       49*rules specified for the MOVE statement without the CORRESPONDING phrase.
       50*The information in the record area is no longer available, but the
       51*information in the data area associated with identifier is available.
       52*
       53*After the execution of the RELEASE statement, the logical record is no
       54*longer available in the record area unless the associated sort file
       55*is named in a SAME RECORD AREA clause. The logical record is also
       56*available to the program as a record of other files referenced in
       57*the same SAME RECORD AREA clause as the associated sort file,
       58*as well as to the file associated with record-name.
       59**/
       60 
       61 /*  Code and relocation sequences.		*/
       62 
       63 dcl	1 mpout		static,
       64 	  2 n		fixed bin init (4),
       65 	  2 pt1		ptr,
       66 	  2 pt2		ptr,
       67 	  2 pt3		ptr,
       68 	  2 pt4		ptr;
       69 dcl	1 alpha_type9	static,
       70 	  2 header	(4) fixed bin init (112, 0, 0, 9),
       71 	  2 repl_ptr	(2) ptr init ((2) null ()),
       72 	  2 fill1		bit (108) init (""b),
       73 	  2 file_key_info,
       74 	    3 fb1		(3) fixed bin init (0, 0, 0),
       75 	    3 size	fixed bin init (0),
       76 	    3 fb2		(2) fixed bin init (0, 0),
       77 	    3 flags1	bit (36) init ("000000100100000000010000000100000000"b),
       78 	    3 flags2	bit (36) init (""b),
       79 	    3 seg		fixed bin init (0),
       80 	    3 off		fixed bin,
       81 	  2 fill2		(7) fixed bin init (0, 0, 0, 0, 0, 0, 0);
       82 dcl	1 num_type9	static,
       83 	  2 header	(4) fixed bin init (112, 0, 0, 9),
       84 	  2 repl_ptr	(2) ptr init ((2) null ()),
       85 	  2 fill1		bit (108) init (""b),
       86 	  2 file_key_info,
       87 	    3 fb1		(3) fixed bin init (0, 0, 0),
       88 	    3 size	fixed bin init (0),
       89 	    3 fb2		(2) fixed bin init (0, 0),
       90 	    3 flags1	bit (36) init ("000000100100000001000000000100000000"b),
       91 	    3 flags2	bit (36) init (""b),
       92 	    3 seg		fixed bin init (0),
       93 	    3 off		fixed bin,
       94 	  2 fill2		(7) fixed bin init (0, 0, 0, 0, 0, 0, 0);
       95 dcl	1 mlr_struct	static,
       96 	  2 type		fixed bin init (4),
       97 	  2 operand_no	fixed bin init (2),
       98 	  2 lock		fixed bin init (0),
       99 	  2 operand1,
      100 	    3 token_ptr	ptr init (null ()),
      101 	    3 sr		fixed bin init (0),
      102 	    3 icmod	fixed bin init (0),
      103 	    3 size_sw	fixed bin init (0),
      104 	  2 operand2,
      105 	    3 token_ptr	ptr,
      106 	    3 sr		fixed bin init (1),
      107 	    3 icmod	fixed bin,
      108 	    3 size_sw	fixed bin init (0);
      109 
      110 dcl	mlr_reg_to_reg	bit (36) init ("000100000001000000001000000101000000"b);
      111 dcl	instr		(3) bit (36) unaligned static
      112 			init ("000000000000000000000000000000000000"b, "000000000000000000000000000000000000"b,
      113 			"000000000000000000000000000000000000"b);
      114 dcl	rel_instr		(6) bit (5) aligned static
      115 			init ("00000"b, "00000"b, "00000"b, "00000"b, "00000"b, "00000"b);
      116 
      117 dcl	inst_seq		(4) bit (18) unaligned static init ("000000000000000000"b, "011101011100010000"b,
      118 						/* epp3 data_name	*/
      119 			"000000000000000000"b, "010011110000000111"b);
      120 						/* ldq length,dl	*/
      121 						/*
      122*Automatic data		*/
      123 
      124 dcl	retry_tag		fixed bin,
      125 	dn_ptr		ptr;			/* pointer to type 9 token		*/
      126 dcl	buff1		(10) ptr,
      127 	buff2		(10) ptr,
      128 	buff3		(10) ptr;
      129 
      130 /*
      131*Procedures Called		*/
      132 
      133 dcl	cobol_call_op	entry (fixed bin, fixed bin),
      134 	cobol_define_tag	entry (fixed bin),
      135 	cobol_reg_manager$after_op
      136 			entry (fixed bin),
      137 	cobol_addr	entry (ptr, ptr, ptr),
      138 	cobol_emit	entry (ptr, ptr, fixed bin);
      139 
      140 start:						/* reserve space for input structure. */
      141 	input_ptr = addr (buff1);
      142 	inst_ptr = addr (buff2);
      143 	reloc_ptr = addr (buff3);
      144 
      145 	retry_tag = cobol_$next_tag;
      146 	call cobol_define_tag (retry_tag);
      147 	cobol_$next_tag = cobol_$next_tag + 1;
      148 
      149 	if in_token_ptr ^= null ()
      150 	then do;					/* Extract the data_name item from second token. */
      151 
      152 		if in_token.n = 4
      153 		then do;
      154 			mlr_struct.operand1.token_ptr = in_token.token_ptr (3);
      155 			mlr_struct.operand2.token_ptr = in_token.token_ptr (2);
      156 
      157 			instr (1) = mlr_reg_to_reg;
      158 			instr (2) = "0"b;
      159 			instr (3) = "0"b;
      160 
      161 /*[5.3-2]*/
      162 			dn_ptr = in_token.token_ptr (2);
      163 						/*[5.3-2]*/
      164 			call elem_to_non_elem;	/*[5.3-2]*/
      165 			dn_ptr = in_token.token_ptr (3);
      166 						/*[5.3-2]*/
      167 			call elem_to_non_elem;
      168 
      169 			call cobol_addr (addr (mlr_struct), addr (instr (1)), null ());
      170 			substr (instr (1), 1, 9) = "000100000"b;
      171 			call cobol_emit (addr (instr (1)), null (), 3);
      172 		     end;
      173 	     end;
      174 
      175 
      176 	if in_token_ptr = null ()
      177 	then do;
      178 		call cobol_call_op (22, retry_tag);
      179 		call cobol_reg_manager$after_op (22);
      180 	     end;
      181 
      182 
      183 	else do;					/* Set up link_off and rel_stack_off for inseq to call sort_$release.	     */
      184 		substr (inst_seq (3), 4, 15) =
      185 		     substr (unspec (in_token.token_ptr (2) -> data_name.item_length), 22, 15);
      186 		input_struc.operand_no = 1;
      187 		input_struc.type = 2;
      188 		input_struc.token_ptr (1) = in_token.token_ptr (2);
      189 		input_struc.lock = 0;
      190 		call cobol_addr (input_ptr, addr (inst_seq (1)), reloc_ptr);
      191 		call cobol_emit (addr (inst_seq), null (), 2);
      192 		call cobol_call_op (11, retry_tag);
      193 		call cobol_reg_manager$after_op (11);
      194 	     end;
      195 
      196 /* Reset the registers.	*/
      197 	return;
      198 
      199 elem_to_non_elem:
      200      proc;					/* elem token to non-elem token */
      201 
      202 /*[5.3-2]*/
      203 	if data_name.non_elementary
      204 	then return;				/* non-elementary token */
      205 						/*[5.3-2]*/
      206 						/*[5.3-2]*/
      207 	data_name.non_elementary = "1"b;		/*[5.3-2]*/
      208 	data_name.elementary = "0"b;			/*[5.3-2]*/
      209 						/*[5.3-2]*/
      210 	if data_name.display
      211 	then return;				/* display data */
      212 						/*[5.3-2]*/
      213 						/*[5.3-2]*/
      214 	data_name.display = "1"b;			/*[5.3-2]*/
      215 	data_name.comp = "0"b;			/*[5.3-2]*/
      216 	data_name.places_right = 0;			/*[5.3-2]*/
      217 						/*[5.3-2]*/
      218 	if data_name.ascii_packed_dec_h | data_name.ascii_packed_dec
      219 						/*[5.3-2]*/
      220 	then do;
      221 		data_name.ascii_packed_dec_h = "0"b;	/* comp or comp-8 */
      222 						/*[5.3-2]*/
      223 		data_name.ascii_packed_dec = "0"b;	/*[5.3-2]*/
      224 	     end;					/*[5.3-2]*/
      225 	else /*[5.3-2]*/
      226 	     if data_name.bin_18			/* half word binary */
      227 						/*[5.3-2]*/
      228 	then do;
      229 		data_name.bin_18 = "0"b;		/*[5.3-2]*/
      230 						/*[5.3-2]*/
      231 		if data_name.sync			/* sychronized */
      232 						/*[5.3-2]*/
      233 		then data_name.item_length = 4;	/*[5.3-2]*/
      234 		else data_name.item_length = 2;	/*[5.3-2]*/
      235 						/*[5.3-2]*/
      236 		data_name.sync = "0"b;		/*[5.3-2]*/
      237 	     end;					/*[5.3-2]*/
      238 	else /*[5.3-2]*/
      239 	     if data_name.bin_36			/* full word binary */
      240 						/*[5.3-2]*/
      241 	then do;
      242 		data_name.item_length = 4;		/*[5.3-2]*/
      243 		data_name.bin_36 = "0"b;		/*[5.3-2]*/
      244 	     end;					/*[5.3-2]*/
      245 	else /*[5.3-2]*/
      246 	     if data_name.usage_index			/* indexed data item */
      247 						/*[5.3-2]*/
      248 	then do;
      249 		data_name.item_length = 6;		/*[5.3-2]*/
      250 		data_name.usage_index = "0"b;		/*[5.3-2]*/
      251 	     end;					/*[5.3-2]*/
      252 						/*[5.3-2]*/
      253 	data_name.places_left = data_name.item_length;
      254 
      255      end;
      256 /*****	Declaration for builtin function	*****/
      257 
      258 dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
      259 			builtin;
      260 
      261 /*****	End of declaration for builtin function	*****/
      262 
  1     1 
  1     2 /*  BEGIN INCLUDE FILE ...   cobol_in_token.incl.pl1		  */
  1     3 
  1     4 /*  Last modified August 22, 1974 by AEG		  */
  1     5 
  1     6 
  1     7 declare in_token_ptr ptr;
  1     8 
  1     9 declare 1 in_token aligned based(in_token_ptr),
  1    10 	2 n fixed bin aligned,
  1    11 	2 code fixed bin aligned,
  1    12 	2 token_ptr(0 refer(in_token.n)) ptr aligned;
  1    13 
  1    14 
  1    15 /*  END INCLUDE FILE ...   cobol_in_token.incl.pl1		  */
  1    16 
      263 
  2     1 
  2     2 /* BEGIN INCLUDE FILE ...   cobol_addr_tokens.incl.pl1 */
  2     3 
  2     4 
  2     5 /****^  HISTORY COMMENTS:
  2     6*  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8058),
  2     7*     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
  2     8*     MCR8058 cobol_addr_tokens.incl.pl1 Change array extents to refer to
  2     9*     constants rather than variables.
  2    10*                                                   END HISTORY COMMENTS */
  2    11 
  2    12 
  2    13 /* Last modified on 10/1/74 by tg */
  2    14 
  2    15 
  2    16 /* parameter list */
  2    17 
  2    18      dcl	   (input_ptr, inst_ptr, reloc_ptr) ptr;
  2    19 
  2    20 
  2    21 /* input_struc_basic is used for type 1 addressing */
  2    22 
  2    23      dcl	   1 input_struc_basic    based (input_ptr),
  2    24 	     2 type	      fixed bin,
  2    25 	     2 operand_no	      fixed bin,
  2    26 	     2 lock	      fixed bin,
  2    27 	     2 segno	      fixed bin,
  2    28 	     2 char_offset	      fixed bin (24),
  2    29 	     2 send_receive	      fixed bin;
  2    30 
  2    31 
  2    32      dcl	   1 input_struc	      based (input_ptr),
  2    33 	     2 type	      fixed bin,
  2    34 	     2 operand_no	      fixed bin,
  2    35 	     2 lock	      fixed bin,
  2    36 	     2 operand	      (0 refer (input_struc.operand_no)),
  2    37 	       3 token_ptr	      ptr,
  2    38 	       3 send_receive     fixed bin,
  2    39 	       3 ic_mod	      fixed bin,
  2    40 	       3 size_sw	      fixed bin;
  2    41 
  2    42 /* reloc_struc is used for all types of addressing * all types */
  2    43 
  2    44      dcl	   1 reloc_struc	      (input_struc.operand_no + 1) based (reloc_ptr),
  2    45 	     2 left_wd	      bit (5) aligned,
  2    46 	     2 right_wd	      bit (5) aligned;
  2    47 
  2    48 /* Instruction format for 1 word instruction */
  2    49 
  2    50 
  2    51      dcl	   1 inst_struc_basic     based (inst_ptr) aligned,
  2    52 	     2 y		      unaligned,
  2    53 	       3 pr	      bit (3) unaligned,
  2    54 	       3 wd_offset	      bit (15) unaligned,
  2    55 	     2 fill1_op	      bit (10) unaligned,
  2    56 	     2 zero1	      bit (1) unaligned,
  2    57 	     2 pr_spec	      bit (1) unaligned,
  2    58 	     2 tm		      bit (2) unaligned,
  2    59 	     2 td		      bit (4) unaligned;
  2    60 
  2    61 
  2    62 /* The detailed definitions of the fields in this structure
  2    63*   can be found in the GMAP manual section 8 */
  2    64 /* EIS instruction format for 2_4 word instructions */
  2    65 
  2    66      dcl	   1 inst_struc	      based (inst_ptr) aligned,
  2    67 	     2 inst	      unaligned,
  2    68 	       3 zero1	      bit (2) unaligned,
  2    69 	       3 mf3	      unaligned,
  2    70 	         4 pr_spec	      bit (1) unaligned,
  2    71 	         4 reg_or_length  bit (1) unaligned,
  2    72 	         4 zero2	      bit (1) unaligned,
  2    73 	         4 reg_mod	      bit (4) unaligned,
  2    74 	       3 zero3	      bit (2) unaligned,
  2    75 	       3 mf2	      unaligned,
  2    76 	         4 pr_spec	      bit (1) unaligned,
  2    77 	         4 reg_or_length  bit (1) unaligned,
  2    78 	         4 zero4	      bit (1) unaligned,
  2    79 	         4 reg_mod	      bit (4) unaligned,
  2    80 	       3 fill1_op	      bit (10) unaligned,
  2    81 	       3 zero5	      bit (1) unaligned,
  2    82 	       3 mf1	      unaligned,
  2    83 	         4 pr_spec	      bit (1) unaligned,
  2    84 	         4 reg_or_length  bit (1) unaligned,
  2    85 	         4 zero6	      bit (1) unaligned,
  2    86 	         4 reg_mod	      bit (4) unaligned,
  2    87 	     2 desc_ext	      unaligned,
  2    88 	       3 desc	      (512) unaligned,
  2    89 	         4 desc_od	      bit (36) unaligned;
  2    90 
  2    91 /* The detailed definitions of the fields in this structure
  2    92*   can be found in the GMAP manual section 8.
  2    93*   The desc_ext is the descriptor extension of this eis
  2    94*   instruction. The number of descriptors associated with
  2    95*   this instruction is equavalent to the operand number.
  2    96*   Depending on operand data type, the descriptor
  2    97*   can be alphanumeric or numeric.  The structures of the
  2    98*   alphanumeric and the numeric descriptors are defined
  2    99*   below. */
  2   100 
  2   101 /* alphanumeric descriptor format */
  2   102 
  2   103      dcl	   1 desc_an	      based (desc_an_ptr) unaligned,
  2   104 	     2 desc_f	      (512) unaligned,
  2   105 	       3 y	      unaligned,
  2   106 	         4 pr	      bit (3) unaligned,
  2   107 	         4 wd_offset      bit (15) unaligned,
  2   108 	       3 char_n	      bit (3) unaligned,
  2   109 	       3 zero1	      bit (1) unaligned,
  2   110 	       3 ta	      bit (2),
  2   111 	       3 n	      bit (12) unaligned;
  2   112 
  2   113 
  2   114 /* The detailed definitions of the fields in this structure can
  2   115*   be found in the GMAP manual section 8. */
  2   116 /* numeric descriptor format */
  2   117 
  2   118      dcl	   desc_nn_ptr	      ptr;
  2   119      dcl	   desc_an_ptr	      ptr;
  2   120 
  2   121 
  2   122      dcl	   1 desc_nn	      based (desc_nn_ptr) unaligned,
  2   123 	     2 desc_f	      (512) unaligned,
  2   124 	       3 y	      unaligned,
  2   125 	         4 pr	      bit (3) unaligned,
  2   126 	         4 wd_offset      bit (15) unaligned,
  2   127 	       3 digit_n	      bit (3) unaligned,
  2   128 	       3 tn	      bit (1) unaligned,
  2   129 	       3 sign_type	      bit (2) unaligned,
  2   130 	       3 scal	      bit (6) unaligned,
  2   131 	       3 n	      bit (6) unaligned;
  2   132 
  2   133 
  2   134 /* The detailed definitions of fields in this structure can
  2   135*   be found in the GMAP manual section 8. */
  2   136 /* END INCLUDE FILE ...   cobol_addr_tokens.incl.pl1 */
  2   137 
      264 
  3     1 
  3     2 /* BEGIN INCLUDE FILE ... cobol_.incl.pl1 */
  3     3 /* last modified Feb 4, 1977 by ORN  */
  3     4 
  3     5 /* This file defines all external data used in the generator phase of Multics Cobol */
  3     6 
  3     7 /* POINTERS */
  3     8 dcl cobol_$text_base_ptr ptr  ext;
  3     9 dcl text_base_ptr ptr  defined (cobol_$text_base_ptr);
  3    10 dcl cobol_$con_end_ptr ptr  ext;
  3    11 dcl con_end_ptr ptr  defined (cobol_$con_end_ptr);
  3    12 dcl cobol_$def_base_ptr ptr  ext;
  3    13 dcl def_base_ptr ptr  defined (cobol_$def_base_ptr);
  3    14 dcl cobol_$link_base_ptr ptr  ext;
  3    15 dcl link_base_ptr ptr  defined (cobol_$link_base_ptr);
  3    16 dcl cobol_$sym_base_ptr ptr  ext;
  3    17 dcl sym_base_ptr ptr  defined (cobol_$sym_base_ptr);
  3    18 dcl cobol_$reloc_text_base_ptr ptr  ext;
  3    19 dcl reloc_text_base_ptr ptr  defined (cobol_$reloc_text_base_ptr);
  3    20 dcl cobol_$reloc_def_base_ptr ptr  ext;
  3    21 dcl reloc_def_base_ptr ptr  defined (cobol_$reloc_def_base_ptr);
  3    22 dcl cobol_$reloc_link_base_ptr ptr  ext;
  3    23 dcl reloc_link_base_ptr ptr  defined (cobol_$reloc_link_base_ptr);
  3    24 dcl cobol_$reloc_sym_base_ptr ptr  ext;
  3    25 dcl reloc_sym_base_ptr ptr  defined (cobol_$reloc_sym_base_ptr);
  3    26 dcl cobol_$reloc_work_base_ptr ptr  ext;
  3    27 dcl reloc_work_base_ptr ptr  defined (cobol_$reloc_work_base_ptr);
  3    28 dcl cobol_$pd_map_ptr ptr  ext;
  3    29 dcl pd_map_ptr ptr  defined (cobol_$pd_map_ptr);
  3    30 dcl cobol_$fixup_ptr ptr  ext;
  3    31 dcl fixup_ptr ptr  defined (cobol_$fixup_ptr);
  3    32 dcl cobol_$initval_base_ptr ptr  ext;
  3    33 dcl initval_base_ptr ptr  defined (cobol_$initval_base_ptr);
  3    34 dcl cobol_$initval_file_ptr ptr  ext;
  3    35 dcl initval_file_ptr ptr  defined (cobol_$initval_file_ptr);
  3    36 dcl cobol_$perform_list_ptr ptr  ext;
  3    37 dcl perform_list_ptr ptr  defined (cobol_$perform_list_ptr);
  3    38 dcl cobol_$alter_list_ptr ptr  ext;
  3    39 dcl alter_list_ptr ptr  defined (cobol_$alter_list_ptr);
  3    40 dcl cobol_$seg_init_list_ptr ptr  ext;
  3    41 dcl seg_init_list_ptr ptr  defined (cobol_$seg_init_list_ptr);
  3    42 dcl cobol_$temp_token_area_ptr ptr  ext;
  3    43 dcl temp_token_area_ptr ptr  defined (cobol_$temp_token_area_ptr);
  3    44 dcl cobol_$temp_token_ptr ptr  ext;
  3    45 dcl temp_token_ptr ptr  defined (cobol_$temp_token_ptr);
  3    46 dcl cobol_$token_block1_ptr ptr  ext;
  3    47 dcl token_block1_ptr ptr  defined (cobol_$token_block1_ptr);
  3    48 dcl cobol_$token_block2_ptr ptr  ext;
  3    49 dcl token_block2_ptr ptr  defined (cobol_$token_block2_ptr);
  3    50 dcl cobol_$minpral5_ptr ptr  ext;
  3    51 dcl minpral5_ptr ptr  defined (cobol_$minpral5_ptr);
  3    52 dcl cobol_$tag_table_ptr ptr  ext;
  3    53 dcl tag_table_ptr ptr  defined (cobol_$tag_table_ptr);
  3    54 dcl cobol_$map_data_ptr ptr  ext;
  3    55 dcl map_data_ptr ptr  defined (cobol_$map_data_ptr);
  3    56 dcl cobol_$ptr_status_ptr ptr  ext;
  3    57 dcl ptr_status_ptr ptr  defined (cobol_$ptr_status_ptr);
  3    58 dcl cobol_$reg_status_ptr ptr  ext;
  3    59 dcl reg_status_ptr ptr  defined (cobol_$reg_status_ptr);
  3    60 dcl cobol_$misc_base_ptr ptr ext;
  3    61 dcl misc_base_ptr ptr defined (cobol_$misc_base_ptr);
  3    62 dcl cobol_$misc_end_ptr ptr ext;
  3    63 dcl misc_end_ptr ptr defined (cobol_$misc_end_ptr);
  3    64 dcl cobol_$list_ptr ptr ext;
  3    65 dcl list_ptr ptr defined (cobol_$list_ptr);
  3    66 dcl cobol_$allo1_ptr ptr ext;
  3    67 dcl allo1_ptr ptr defined (cobol_$allo1_ptr);
  3    68 dcl cobol_$eln_ptr ptr ext;
  3    69 dcl eln_ptr ptr defined (cobol_$eln_ptr);
  3    70 dcl cobol_$diag_ptr ptr ext;
  3    71 dcl diag_ptr ptr defined (cobol_$diag_ptr);
  3    72 dcl cobol_$xref_token_ptr ptr ext;
  3    73 dcl xref_token_ptr ptr defined (cobol_$xref_token_ptr);
  3    74 dcl cobol_$xref_chain_ptr ptr ext;
  3    75 dcl xref_chain_ptr ptr defined (cobol_$xref_chain_ptr);
  3    76 dcl cobol_$statement_info_ptr ptr ext;
  3    77 dcl statement_info_ptr ptr defined (cobol_$statement_info_ptr);
  3    78 dcl cobol_$reswd_ptr ptr ext;
  3    79 dcl reswd_ptr ptr defined (cobol_$reswd_ptr);
  3    80 dcl cobol_$op_con_ptr ptr ext;
  3    81 dcl op_con_ptr ptr defined (cobol_$op_con_ptr);
  3    82 dcl cobol_$ntbuf_ptr ptr ext;
  3    83 dcl ntbuf_ptr ptr defined (cobol_$ntbuf_ptr);
  3    84 dcl cobol_$main_pcs_ptr ptr ext;
  3    85 dcl main_pcs_ptr ptr defined (cobol_$main_pcs_ptr);
  3    86 dcl cobol_$include_info_ptr ptr ext;
  3    87 dcl include_info_ptr ptr defined (cobol_$include_info_ptr);
  3    88 
  3    89 /* FIXED BIN */
  3    90 dcl cobol_$text_wd_off fixed bin  ext;
  3    91 dcl text_wd_off fixed bin  defined (cobol_$text_wd_off);
  3    92 dcl cobol_$con_wd_off fixed bin  ext;
  3    93 dcl con_wd_off fixed bin  defined (cobol_$con_wd_off);
  3    94 dcl cobol_$def_wd_off fixed bin  ext;
  3    95 dcl def_wd_off fixed bin  defined (cobol_$def_wd_off);
  3    96 dcl cobol_$def_max fixed bin  ext;
  3    97 dcl def_max fixed bin  defined (cobol_$def_max);
  3    98 dcl cobol_$link_wd_off fixed bin  ext;
  3    99 dcl link_wd_off fixed bin  defined (cobol_$link_wd_off);
  3   100 dcl cobol_$link_max fixed bin  ext;
  3   101 dcl link_max fixed bin  defined (cobol_$link_max);
  3   102 dcl cobol_$sym_wd_off fixed bin  ext;
  3   103 dcl sym_wd_off fixed bin  defined (cobol_$sym_wd_off);
  3   104 dcl cobol_$sym_max fixed bin  ext;
  3   105 dcl sym_max fixed bin  defined (cobol_$sym_max);
  3   106 dcl cobol_$reloc_text_max fixed bin(24)  ext;
  3   107 dcl reloc_text_max fixed bin(24)  defined (cobol_$reloc_text_max);
  3   108 dcl cobol_$reloc_def_max fixed bin(24)  ext;
  3   109 dcl reloc_def_max fixed bin(24)  defined (cobol_$reloc_def_max);
  3   110 dcl cobol_$reloc_link_max fixed bin(24)  ext;
  3   111 dcl reloc_link_max fixed bin(24)  defined (cobol_$reloc_link_max);
  3   112 dcl cobol_$reloc_sym_max fixed bin(24)  ext;
  3   113 dcl reloc_sym_max fixed bin(24)  defined (cobol_$reloc_sym_max);
  3   114 dcl cobol_$reloc_work_max fixed bin(24)  ext;
  3   115 dcl reloc_work_max fixed bin(24)  defined (cobol_$reloc_work_max);
  3   116 dcl cobol_$pd_map_index fixed bin  ext;
  3   117 dcl pd_map_index fixed bin  defined (cobol_$pd_map_index);
  3   118 dcl cobol_$cobol_data_wd_off fixed bin  ext;
  3   119 dcl cobol_data_wd_off fixed bin  defined (cobol_$cobol_data_wd_off);
  3   120 dcl cobol_$stack_off fixed bin  ext;
  3   121 dcl stack_off fixed bin  defined (cobol_$stack_off);
  3   122 dcl cobol_$max_stack_off fixed bin  ext;
  3   123 dcl max_stack_off fixed bin  defined (cobol_$max_stack_off);
  3   124 dcl cobol_$init_stack_off fixed bin  ext;
  3   125 dcl init_stack_off fixed bin  defined (cobol_$init_stack_off);
  3   126 dcl cobol_$pd_map_sw fixed bin  ext;
  3   127 dcl pd_map_sw fixed bin  defined (cobol_$pd_map_sw);
  3   128 dcl cobol_$next_tag fixed bin  ext;
  3   129 dcl next_tag fixed bin  defined (cobol_$next_tag);
  3   130 dcl cobol_$data_init_flag fixed bin  ext;
  3   131 dcl data_init_flag fixed bin  defined (cobol_$data_init_flag);
  3   132 dcl cobol_$seg_init_flag fixed bin  ext;
  3   133 dcl seg_init_flag fixed bin  defined (cobol_$seg_init_flag);
  3   134 dcl cobol_$alter_flag fixed bin  ext;
  3   135 dcl alter_flag fixed bin  defined (cobol_$alter_flag);
  3   136 dcl cobol_$sect_eop_flag fixed bin  ext;
  3   137 dcl sect_eop_flag fixed bin  defined (cobol_$sect_eop_flag);
  3   138 dcl cobol_$para_eop_flag fixed bin  ext;
  3   139 dcl para_eop_flag fixed bin  defined (cobol_$para_eop_flag);
  3   140 dcl cobol_$priority_no fixed bin  ext;
  3   141 dcl priority_no fixed bin  defined (cobol_$priority_no);
  3   142 dcl cobol_$compile_count fixed bin ext;
  3   143 dcl compile_count fixed bin defined (cobol_$compile_count);
  3   144 dcl cobol_$ptr_assumption_ind fixed bin ext;
  3   145 dcl ptr_assumption_ind fixed bin defined (cobol_$ptr_assumption_ind);
  3   146 dcl cobol_$reg_assumption_ind fixed bin ext;
  3   147 dcl reg_assumption_ind fixed bin defined (cobol_$reg_assumption_ind);
  3   148 dcl cobol_$perform_para_index fixed bin ext;
  3   149 dcl perform_para_index fixed bin defined (cobol_$perform_para_index);
  3   150 dcl cobol_$perform_sect_index fixed bin ext;
  3   151 dcl perform_sect_index fixed bin defined (cobol_$perform_sect_index);
  3   152 dcl cobol_$alter_index fixed bin ext;
  3   153 dcl alter_index fixed bin defined (cobol_$alter_index);
  3   154 dcl cobol_$list_off fixed bin ext;
  3   155 dcl list_off fixed bin defined (cobol_$list_off);
  3   156 dcl cobol_$constant_offset fixed bin ext;
  3   157 dcl constant_offset fixed bin defined (cobol_$constant_offset);
  3   158 dcl cobol_$misc_max fixed bin ext;
  3   159 dcl misc_max fixed bin defined (cobol_$misc_max);
  3   160 dcl cobol_$pd_map_max fixed bin ext;
  3   161 dcl pd_map_max fixed bin defined (cobol_$pd_map_max);
  3   162 dcl cobol_$map_data_max fixed bin ext;
  3   163 dcl map_data_max fixed bin defined (cobol_$map_data_max);
  3   164 dcl cobol_$fixup_max fixed bin ext;
  3   165 dcl fixup_max fixed bin defined (cobol_$fixup_max);
  3   166 dcl cobol_$tag_table_max fixed bin ext;
  3   167 dcl tag_table_max fixed bin defined (cobol_$tag_table_max);
  3   168 dcl cobol_$temp_token_max fixed bin ext;
  3   169 dcl temp_token_max fixed bin defined (cobol_$temp_token_max);
  3   170 dcl cobol_$allo1_max fixed bin ext;
  3   171 dcl allo1_max fixed bin defined (cobol_$allo1_max);
  3   172 dcl cobol_$eln_max fixed bin ext;
  3   173 dcl eln_max fixed bin defined (cobol_$eln_max);
  3   174 dcl cobol_$debug_enable fixed bin ext;
  3   175 dcl debug_enable fixed bin defined (cobol_$debug_enable);
  3   176 dcl cobol_$non_source_offset fixed bin ext;
  3   177 dcl non_source_offset fixed bin defined (cobol_$non_source_offset);
  3   178 dcl cobol_$initval_flag fixed bin ext;
  3   179 dcl initval_flag fixed bin defined (cobol_$initval_flag);
  3   180 dcl cobol_$date_compiled_sw fixed bin ext;
  3   181 dcl date_compiled_sw fixed bin defined (cobol_$date_compiled_sw);
  3   182 dcl cobol_$include_cnt fixed bin ext;
  3   183 dcl include_cnt fixed bin defined (cobol_$include_cnt);
  3   184 dcl cobol_$fs_charcnt fixed bin ext;
  3   185 dcl fs_charcnt fixed bin defined (cobol_$fs_charcnt);
  3   186 dcl cobol_$ws_charcnt fixed bin ext;
  3   187 dcl ws_charcnt fixed bin defined (cobol_$ws_charcnt);
  3   188 dcl cobol_$coms_charcnt fixed bin ext;
  3   189 dcl coms_charcnt fixed bin defined (cobol_$coms_charcnt);
  3   190 dcl cobol_$ls_charcnt fixed bin ext;
  3   191 dcl ls_charcnt fixed bin defined (cobol_$ls_charcnt);
  3   192 dcl cobol_$cons_charcnt fixed bin ext;
  3   193 dcl cons_charcnt fixed bin defined (cobol_$cons_charcnt);
  3   194 dcl cobol_$value_cnt fixed bin ext;
  3   195 dcl value_cnt fixed bin defined (cobol_$value_cnt);
  3   196 dcl cobol_$cd_cnt fixed bin ext;
  3   197 dcl cd_cnt fixed bin defined (cobol_$cd_cnt);
  3   198 dcl cobol_$fs_wdoff fixed bin ext;
  3   199 dcl fs_wdoff fixed bin defined (cobol_$fs_wdoff);
  3   200 dcl cobol_$ws_wdoff fixed bin ext;
  3   201 dcl ws_wdoff fixed bin defined (cobol_$ws_wdoff);
  3   202 dcl cobol_$coms_wdoff fixed bin ext;
  3   203 dcl coms_wdoff fixed bin defined (cobol_$coms_wdoff);
  3   204 
  3   205 /* CHARACTER */
  3   206 dcl cobol_$scratch_dir char (168)   aligned ext;
  3   207 dcl scratch_dir char (168)   aligned defined (cobol_$scratch_dir);			/* -42- */
  3   208 dcl cobol_$obj_seg_name char (32)   aligned ext;
  3   209 dcl obj_seg_name char (32)   aligned defined (cobol_$obj_seg_name);		/* -8- */
  3   210 
  3   211 /* BIT */
  3   212 dcl cobol_$xref_bypass bit(1) aligned ext;
  3   213 dcl xref_bypass bit(1) aligned defined (cobol_$xref_bypass);			/* -1- */
  3   214 dcl cobol_$same_sort_merge_proc bit(1) aligned ext;
  3   215 dcl same_sort_merge_proc bit(1) aligned defined (cobol_$same_sort_merge_proc);		/* -1- */
  3   216 
  3   217 
  3   218 /* END INCLUDE FILE ... cobol_incl.pl1*/
  3   219 
  3   220 
      265 
  4     1 
  4     2 /* BEGIN INCLUDE FILE ... cobol_type1.incl.pl1 */
  4     3 /* Last modified on 11/19/76 by ORN */
  4     4 
  4     5 /*
  4     6*A reserved word token is created in the minpral files for each occurrence
  4     7*of a reserved word in the source program.  The value of the key field
  4     8*indicates the specific reserved word which a type 1 token represents.
  4     9**/
  4    10 
  4    11 dcl rw_ptr ptr;
  4    12 
  4    13 /* BEGIN DECLARATION OF TYPE1 (RESERVED WORD) TOKEN */
  4    14 dcl	1 reserved_word based (rw_ptr),
  5     1 
  5     2 /* begin include file ... cobol_TYPE1.incl.pl1 */
  5     3 /* Last modified on 11/17/76 by ORN */
  5     4 /* Last modified on 12/28/76 by FCH */
  5     5 /* Last modified on 12/16/80 by FCH */
  5     6 
  5     7 		/* header */
  5     8 		2 size fixed bin,
  5     9 		2 line fixed bin,
  5    10 		2 column fixed bin,
  5    11 		2 type fixed bin,
  5    12 		/* body */
  5    13 		2 key fixed bin,
  5    14 		/* procedure division class bits */
  5    15 		2 verb bit (1),
  5    16 		2 arith_op bit (1),
  5    17 		2 figcon bit (1),
  5    18 		2 terminator bit (1),
  5    19 		2 end_dec bit (1),
  5    20 		2 rel_op bit (1),
  5    21 		2 imper_verb bit (1),
  5    22 		2 end_cobol bit (1),
  5    23 		/* data division class bits */
  5    24 		2 section_header bit (1),
  5    25 		2 fs_ind bit (1),
  5    26 		2 fd_clause bit (1),
  5    27 		2 dd_clause bit (1),
  5    28 		2 cd_input bit (1),
  5    29 		2 cd_output bit (1),
  5    30 		2 cset_name bit (1),
  5    31 		2 ss_division bit (1),
  5    32 		2 repl_jump_ind bit (4),
  5    33 		2 ided_recovery bit (1),
  5    34 		2 report_writer bit (5),
  5    35 		2 ss_desc_entry bit (1),
  5    36 		2 jump_index fixed bin,
  5    37 		2 length fixed bin,
  5    38 		2 name char(0 refer(reserved_word.length));
  5    39 
  5    40 
  5    41 
  5    42 /* end include file ... cobol_TYPE1.incl.pl1 */
  5    43 
  4    15 
  4    16 /* END DECLARATION OF TYPE1 (RESERVED WORD) TOKEN */
  4    17 
  4    18 /* END INCLUDE FILE ... cobol_type1.incl.pl1 */
  4    19 
      266 
  6     1 
  6     2 /* BEGIN INCLUDE FILE ... cobol_type9.incl.pl1 */
  6     3 /* Last modified on 11/19/76 by ORN */
  6     4 
  6     5 /*
  6     6*A type 9 data name token is entered into the name table by the data
  6     7*division syntax phase for each data name described in the data division.
  6     8*The replacement phase subsequently replaces type 8 user word references
  6     9*to data names in the procedure division minpral file with the corresponding
  6    10*type 9 tokens from the name table.
  6    11**/
  6    12 
  6    13 /* dcl dn_ptr ptr; */
  6    14 
  6    15 /* BEGIN DECLARATION OF TYPE9 (DATA NAME) TOKEN */
  6    16 dcl 1 data_name based (dn_ptr),
  7     1 
  7     2 /* begin include file ... cobol_TYPE9.incl.pl1 */
  7     3 /* Last modified on 06/19/77 by ORN */
  7     4 /* Last modified on 12/28/76 by FCH */
  7     5 
  7     6 		/* header */
  7     7 		2 size fixed bin,
  7     8 		2 line fixed bin,
  7     9 		2 column fixed bin,
  7    10 		2 type fixed bin,
  7    11 		/* body */
  7    12 		2 string_ptr ptr,
  7    13 		2 prev_rec ptr,
  7    14 		2 searched bit (1),
  7    15 		2 duplicate bit (1),
  7    16 		2 saved bit (1),
  7    17 		2 debug_ind bit (1),
  7    18 		2 filler2 bit (3),
  7    19 		2 used_as_sub bit (1),
  7    20 		2 def_line fixed bin,
  7    21 		2 level fixed bin,
  7    22 		2 linkage fixed bin,
  7    23 		2 file_num fixed bin,
  7    24 		2 size_rtn fixed bin,
  7    25 		2 item_length fixed bin(24),
  7    26 		2 places_left fixed bin,
  7    27 		2 places_right fixed bin,
  7    28 		/* description */
  7    29 		2 file_section bit (1),
  7    30 		2 working_storage bit (1),
  7    31 		2 constant_section bit (1),
  7    32 		2 linkage_section bit (1),
  7    33 		2 communication_section bit (1),
  7    34 		2 report_section bit (1),
  7    35 		2 level_77 bit (1),
  7    36 		2 level_01 bit (1),
  7    37 		2 non_elementary bit (1),
  7    38 		2 elementary bit (1),
  7    39 		2 filler_item bit (1),
  7    40 		2 s_of_rdf bit (1),
  7    41 		2 o_of_rdf bit (1),
  7    42 		2 bin_18 bit (1),
  7    43 		2 bin_36 bit (1),
  7    44 		2 pic_has_l bit (1),
  7    45 		2 pic_is_do bit (1),
  7    46 		2 numeric bit (1),
  7    47 		2 numeric_edited bit (1),
  7    48 		2 alphanum bit (1),
  7    49 		2 alphanum_edited bit (1),
  7    50 		2 alphabetic bit (1),
  7    51 		2 alphabetic_edited bit (1),
  7    52 		2 pic_has_p bit (1),
  7    53 		2 pic_has_ast bit (1),
  7    54 		2 item_signed bit(1),
  7    55 		2 sign_separate bit (1),
  7    56 		2 display bit (1),
  7    57 		2 comp bit (1),
  7    58 		2 ascii_packed_dec_h bit (1),	/* as of 8/16/76  this field used for comp8. */
  7    59 		2 ascii_packed_dec bit (1),
  7    60 		2 ebcdic_packed_dec bit (1),
  7    61 		2 bin_16 bit (1),
  7    62 		2 bin_32 bit (1),
  7    63 		2 usage_index bit (1),
  7    64 		2 just_right bit (1),
  7    65 		2 compare_argument bit (1),
  7    66 		2 sync bit (1),
  7    67 		2 temporary bit (1),
  7    68 		2 bwz bit (1),
  7    69 		2 variable_length bit (1),
  7    70 		2 subscripted bit (1),
  7    71 		2 occurs_do bit (1),
  7    72 		2 key_a bit (1),
  7    73 		2 key_d bit (1),
  7    74 		2 indexed_by bit (1),
  7    75 		2 value_numeric bit (1),
  7    76 		2 value_non_numeric bit (1),
  7    77 		2 value_signed bit (1),
  7    78 		2 sign_type bit (3),
  7    79 		2 pic_integer bit (1),
  7    80 		2 ast_when_zero bit (1),
  7    81 		2 label_record bit (1),
  7    82 		2 sign_clause_occurred bit (1),
  7    83 		2 okey_dn bit (1),
  7    84 		2 subject_of_keyis bit (1),
  7    85 		2 exp_redefining bit (1),
  7    86 		2 sync_in_rec bit (1),
  7    87 		2 rounded bit (1),
  7    88 		2 ad_bit bit (1),
  7    89 		2 debug_all bit (1),
  7    90 		2 overlap bit (1),
  7    91 		2 sum_counter bit (1),
  7    92 		2 exp_occurs bit (1),
  7    93 		2 linage_counter bit (1),
  7    94 		2 rnm_01 bit (1),
  7    95 		2 aligned bit (1),
  7    96 		2 not_user_writable bit (1),
  7    97 		2 database_key bit (1),
  7    98 		2 database_data_item bit (1),
  7    99 		2 seg_num fixed bin,
  7   100 		2 offset fixed bin(24),
  7   101 		2 initial_ptr fixed bin,
  7   102 		2 edit_ptr fixed bin,
  7   103 		2 occurs_ptr fixed bin,
  7   104 		2 do_rec char(5),
  7   105 		2 bitt bit (1),
  7   106 		2 byte bit (1),
  7   107 		2 half_word bit (1),
  7   108 		2 word bit (1),
  7   109 		2 double_word bit (1),
  7   110 		2 half_byte bit (1),
  7   111 		2 filler5 bit (1),
  7   112 		2 bit_offset bit (4),
  7   113 		2 son_cnt bit (16),
  7   114 		2 max_red_size fixed bin(24),
  7   115 		2 name_size fixed bin,
  7   116 		2 name char(0 refer(data_name.name_size));	
  7   117 
  7   118 
  7   119 
  7   120 /* end include file ... cobol_TYPE9.incl.pl1 */
  7   121 
  6    17 
  6    18 /* END DECLARATION OF TYPE9 (DATA NAME) TOKEN */
  6    19 
  6    20 /* END INCLUDE FILE ... cobol_type9.incl.pl1 */
  6    21 
      267 
  8     1 
  8     2 /* BEGIN INCLUDE FILE ... cobol_type19.incl.pl1 */
  8     3 /* last modified on 11/19/76 by ORN */
  8     4 
  8     5 /*
  8     6*A type 19 end of statement token is created in the procedure division
  8     7*minpral file at the end of each minpral statement generated by the
  8     8*procedure division syntax phase.  A minpral statement may be a complete or
  8     9*partial source language statement.  A type 19 token contains information
  8    10*describing the statement which it delimits.
  8    11**/
  8    12 
  8    13 dcl eos_ptr ptr;
  8    14 
  8    15 /* BEGIN DECLARATION OF TYPE19 (END STATEMENT) TOKEN */
  8    16 dcl	1 end_stmt based (eos_ptr),
  9     1 
  9     2 /* begin include file ... cobol_TYPE19.incl.pl1 */
  9     3 /* Last modified on 11/17/76 by ORN */
  9     4 
  9     5 		/* header */
  9     6 		2 size fixed bin,
  9     7 		2 line fixed bin,
  9     8 		2 column fixed bin,
  9     9 		2 type fixed bin,
  9    10 		/* body */
  9    11 		2 verb fixed bin,
  9    12 		2 e fixed bin,
  9    13 		2 h fixed bin,
  9    14 		2 i fixed bin,
  9    15 		2 j fixed bin,
  9    16 		2 a bit (3),
  9    17 		2 b bit (1),
  9    18 		2 c bit (1),
  9    19 		2 d bit (2),
  9    20 		2 f bit (2),
  9    21 		2 g bit (2),
  9    22 		2 k bit (5),
  9    23 		2 always_an bit (1);
  9    24 
  9    25 /* end include file ... cobol_TYPE19.incl.pl1 */
  9    26 
  8    17 
  8    18 /* END DECLARATION OF TYPE19 (END STATEMENT) TOKEN */
  8    19 
  8    20 /*
  8    21*FIELD		CONTENTS
  8    22*
  8    23*size		The total size in bytes of this end of statement token.
  8    24*line		0
  8    25*column		0
  8    26*type		19
  8    27*verb		A value indicating the verb in this statement
  8    28*		 1 = accept
  8    29*		 2 = add
  8    30*		 3 = on size error
  8    31*		 4 = alter
  8    32*		 5 = call
  8    33*		 7 = cancel
  8    34*		 8 = close
  8    35*		 9 = divide
  8    36*		10 = multiply
  8    37*		11 = subtract
  8    38*		12 = exit
  8    39*		14 = go
  8    40*		15 = merge
  8    41*		16 = initiate
  8    42*		17 = inspect
  8    43*		18 = move
  8    44*		19 = open
  8    45*		20 = perform
  8    46*		21 = read
  8    47*		23 = receive
  8    48*		24 = release
  8    49*		25 = return
  8    50*		26 = search
  8    51*		27 = rewrite
  8    52*		29 = seek
  8    53*		30 = send
  8    54*		31 = set
  8    55*		33 = stop
  8    56*		34 = string
  8    57*		35 = suspend
  8    58*		36 = terminate
  8    59*		37 = unstring
  8    60*		38 = write
  8    61*		39 = use
  8    62*		40 = compute
  8    63*		41 = disable
  8    64*		42 = display
  8    65*		43 = enable
  8    66*		45 = generate
  8    67*		46 = hold
  8    68*		48 = process
  8    69*		49 = sort
  8    70*		52 = procedure
  8    71*		53 = declaratives
  8    72*		54 = section name
  8    73*		55 = paragraph name
  8    74*		98 = end
  8    75*e,h,i,j		The significance of these fields differs with each
  8    76*		statement.  These fields are normally used as counters.
  8    77*a,b,c,d,f,g,k	The significance of these fields differs with each
  8    78*		statement.  These fields are normally used as indicators.
  8    79**/
  8    80 
  8    81 /* END INCLUDE FILE ... cobol_type19.incl.pl1 */
  8    82 
      268 
      269      end cobol_release_gen;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    05/24/89  0832.7  cobol_release_gen.pl1             >spec>install>MR12.3-1048>cobol_release_gen.pl1
263          1    11/11/82  1712.7  cobol_in_token.incl.pl1           >ldd>include>cobol_in_token.incl.pl1
264          2    05/24/89  0811.7  cobol_addr_tokens.incl.pl1        >spec>install>MR12.3-1048>cobol_addr_tokens.incl.pl1
265          3    11/11/82  1712.7  cobol_.incl.pl1                   >ldd>include>cobol_.incl.pl1
266          4    03/27/82  0439.8  cobol_type1.incl.pl1              >ldd>include>cobol_type1.incl.pl1
4-15         5    11/11/82  1712.8  cobol_TYPE1.incl.pl1              >ldd>include>cobol_TYPE1.incl.pl1
267          6    03/27/82  0439.9  cobol_type9.incl.pl1              >ldd>include>cobol_type9.incl.pl1
6-17         7    11/11/82  1712.7  cobol_TYPE9.incl.pl1              >ldd>include>cobol_TYPE9.incl.pl1
268          8    03/27/82  0439.8  cobol_type19.incl.pl1             >ldd>include>cobol_type19.incl.pl1
8-17         9    03/27/82  0439.6  cobol_TYPE19.incl.pl1             >ldd>include>cobol_TYPE19.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
addr                                                   builtin function         dcl 258 ref 140 142 143 169 169 169 169 171 171 190
                                                                                  190 191 191
ascii_packed_dec         21(30)        based           bit(1)                   level 2 packed packed unaligned dcl 6-16 set ref 218
                                                                                  223*
ascii_packed_dec_h       21(29)        based           bit(1)                   level 2 packed packed unaligned dcl 6-16 set ref 218
                                                                                  221*
bin_18                   21(13)        based           bit(1)                   level 2 packed packed unaligned dcl 6-16 set ref 225
                                                                                  229*
bin_36                   21(14)        based           bit(1)                   level 2 packed packed unaligned dcl 6-16 set ref 238
                                                                                  243*
buff1                           000104 automatic       pointer                  array dcl 126 set ref 140
buff2                           000130 automatic       pointer                  array dcl 126 set ref 142
buff3                           000154 automatic       pointer                  array dcl 126 set ref 143
cobol_$next_tag                 000046 external static fixed bin(17,0)          dcl 3-128 set ref 145 147* 147
cobol_addr                      000042 constant        entry                    external dcl 133 ref 169 190
cobol_call_op                   000034 constant        entry                    external dcl 133 ref 178 192
cobol_define_tag                000036 constant        entry                    external dcl 133 ref 146
cobol_emit                      000044 constant        entry                    external dcl 133 ref 171 191
cobol_reg_manager$after_op      000040 constant        entry                    external dcl 133 ref 179 193
comp                     21(28)        based           bit(1)                   level 2 packed packed unaligned dcl 6-16 set ref
                                                                                  215*
data_name                              based           structure                level 1 unaligned dcl 6-16
display                  21(27)        based           bit(1)                   level 2 packed packed unaligned dcl 6-16 set ref 210
                                                                                  214*
dn_ptr                          000102 automatic       pointer                  dcl 124 set ref 162* 165* 203 207 208 210 214 215
                                                                                  216 218 218 221 223 225 229 231 231 234 236 238
                                                                                  242 243 245 249 250 253 253
elementary               21(09)        based           bit(1)                   level 2 packed packed unaligned dcl 6-16 set ref
                                                                                  208*
in_token                               based           structure                level 1 dcl 1-9
in_token_ptr                           parameter       pointer                  dcl 1-7 ref 34 149 152 154 155 162 165 176 184 188
input_ptr                       000200 automatic       pointer                  dcl 2-18 set ref 140* 186 187 188 189 190*
input_struc                            based           structure                level 1 unaligned dcl 2-32
inst_ptr                        000202 automatic       pointer                  dcl 2-18 set ref 142*
inst_seq                        000032 internal static bit(18)                  initial array packed unaligned dcl 117 set ref 184*
                                                                                  190 190 191 191
instr                           000027 internal static bit(36)                  initial array packed unaligned dcl 111 set ref 157*
                                                                                  158* 159* 169 169 170* 171 171
item_length              16            based           fixed bin(24,0)          level 2 dcl 6-16 set ref 184 231* 234* 242* 249* 253
lock                      2            based           fixed bin(17,0)          level 2 dcl 2-32 set ref 189*
mlr_reg_to_reg                  000100 automatic       bit(36)                  initial packed unaligned dcl 110 set ref 110* 157
mlr_struct                      000010 internal static structure                level 1 unaligned dcl 95 set ref 169 169
n                                      based           fixed bin(17,0)          level 2 dcl 1-9 ref 152
non_elementary           21(08)        based           bit(1)                   level 2 packed packed unaligned dcl 6-16 set ref 203
                                                                                  207*
null                                                   builtin function         dcl 258 ref 149 169 169 171 171 176 191 191
operand                   4            based           structure                array level 2 unaligned dcl 2-32
operand1                  4     000010 internal static structure                level 2 unaligned dcl 95
operand2                 12     000010 internal static structure                level 2 unaligned dcl 95
operand_no                1            based           fixed bin(17,0)          level 2 dcl 2-32 set ref 186*
places_left              17            based           fixed bin(17,0)          level 2 dcl 6-16 set ref 253*
places_right             20            based           fixed bin(17,0)          level 2 dcl 6-16 set ref 216*
reloc_ptr                       000204 automatic       pointer                  dcl 2-18 set ref 143* 190*
retry_tag                       000101 automatic       fixed bin(17,0)          dcl 124 set ref 145* 146* 178* 192*
substr                                                 builtin function         dcl 258 set ref 170* 184* 184
sync                     22(01)        based           bit(1)                   level 2 packed packed unaligned dcl 6-16 set ref 231
                                                                                  236*
token_ptr                12     000010 internal static pointer                  level 3 in structure "mlr_struct" dcl 95
                                                                                  in procedure "cobol_release_gen" set ref 155*
token_ptr                 2            based           pointer                  array level 2 in structure "in_token" dcl 1-9
                                                                                  in procedure "cobol_release_gen" ref 154 155 162
                                                                                  165 184 188
token_ptr                 4     000010 internal static pointer                  initial level 3 in structure "mlr_struct" dcl 95
                                                                                  in procedure "cobol_release_gen" set ref 154*
token_ptr                 4            based           pointer                  array level 3 in structure "input_struc" dcl 2-32
                                                                                  in procedure "cobol_release_gen" set ref 188*
type                                   based           fixed bin(17,0)          level 2 dcl 2-32 set ref 187*
unspec                                                 builtin function         dcl 258 ref 184
usage_index              21(34)        based           bit(1)                   level 2 packed packed unaligned dcl 6-16 set ref 245
                                                                                  250*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
addrel                                                 builtin function         dcl 258
allo1_max                              defined         fixed bin(17,0)          dcl 3-171
allo1_ptr                              defined         pointer                  dcl 3-67
alpha_type9                            internal static structure                level 1 unaligned dcl 69
alter_flag                             defined         fixed bin(17,0)          dcl 3-135
alter_index                            defined         fixed bin(17,0)          dcl 3-153
alter_list_ptr                         defined         pointer                  dcl 3-39
binary                                                 builtin function         dcl 258
cd_cnt                                 defined         fixed bin(17,0)          dcl 3-197
cobol_$allo1_max                       external static fixed bin(17,0)          dcl 3-170
cobol_$allo1_ptr                       external static pointer                  dcl 3-66
cobol_$alter_flag                      external static fixed bin(17,0)          dcl 3-134
cobol_$alter_index                     external static fixed bin(17,0)          dcl 3-152
cobol_$alter_list_ptr                  external static pointer                  dcl 3-38
cobol_$cd_cnt                          external static fixed bin(17,0)          dcl 3-196
cobol_$cobol_data_wd_off               external static fixed bin(17,0)          dcl 3-118
cobol_$compile_count                   external static fixed bin(17,0)          dcl 3-142
cobol_$coms_charcnt                    external static fixed bin(17,0)          dcl 3-188
cobol_$coms_wdoff                      external static fixed bin(17,0)          dcl 3-202
cobol_$con_end_ptr                     external static pointer                  dcl 3-10
cobol_$con_wd_off                      external static fixed bin(17,0)          dcl 3-92
cobol_$cons_charcnt                    external static fixed bin(17,0)          dcl 3-192
cobol_$constant_offset                 external static fixed bin(17,0)          dcl 3-156
cobol_$data_init_flag                  external static fixed bin(17,0)          dcl 3-130
cobol_$date_compiled_sw                external static fixed bin(17,0)          dcl 3-180
cobol_$debug_enable                    external static fixed bin(17,0)          dcl 3-174
cobol_$def_base_ptr                    external static pointer                  dcl 3-12
cobol_$def_max                         external static fixed bin(17,0)          dcl 3-96
cobol_$def_wd_off                      external static fixed bin(17,0)          dcl 3-94
cobol_$diag_ptr                        external static pointer                  dcl 3-70
cobol_$eln_max                         external static fixed bin(17,0)          dcl 3-172
cobol_$eln_ptr                         external static pointer                  dcl 3-68
cobol_$fixup_max                       external static fixed bin(17,0)          dcl 3-164
cobol_$fixup_ptr                       external static pointer                  dcl 3-30
cobol_$fs_charcnt                      external static fixed bin(17,0)          dcl 3-184
cobol_$fs_wdoff                        external static fixed bin(17,0)          dcl 3-198
cobol_$include_cnt                     external static fixed bin(17,0)          dcl 3-182
cobol_$include_info_ptr                external static pointer                  dcl 3-86
cobol_$init_stack_off                  external static fixed bin(17,0)          dcl 3-124
cobol_$initval_base_ptr                external static pointer                  dcl 3-32
cobol_$initval_file_ptr                external static pointer                  dcl 3-34
cobol_$initval_flag                    external static fixed bin(17,0)          dcl 3-178
cobol_$link_base_ptr                   external static pointer                  dcl 3-14
cobol_$link_max                        external static fixed bin(17,0)          dcl 3-100
cobol_$link_wd_off                     external static fixed bin(17,0)          dcl 3-98
cobol_$list_off                        external static fixed bin(17,0)          dcl 3-154
cobol_$list_ptr                        external static pointer                  dcl 3-64
cobol_$ls_charcnt                      external static fixed bin(17,0)          dcl 3-190
cobol_$main_pcs_ptr                    external static pointer                  dcl 3-84
cobol_$map_data_max                    external static fixed bin(17,0)          dcl 3-162
cobol_$map_data_ptr                    external static pointer                  dcl 3-54
cobol_$max_stack_off                   external static fixed bin(17,0)          dcl 3-122
cobol_$minpral5_ptr                    external static pointer                  dcl 3-50
cobol_$misc_base_ptr                   external static pointer                  dcl 3-60
cobol_$misc_end_ptr                    external static pointer                  dcl 3-62
cobol_$misc_max                        external static fixed bin(17,0)          dcl 3-158
cobol_$non_source_offset               external static fixed bin(17,0)          dcl 3-176
cobol_$ntbuf_ptr                       external static pointer                  dcl 3-82
cobol_$obj_seg_name                    external static char(32)                 dcl 3-208
cobol_$op_con_ptr                      external static pointer                  dcl 3-80
cobol_$para_eop_flag                   external static fixed bin(17,0)          dcl 3-138
cobol_$pd_map_index                    external static fixed bin(17,0)          dcl 3-116
cobol_$pd_map_max                      external static fixed bin(17,0)          dcl 3-160
cobol_$pd_map_ptr                      external static pointer                  dcl 3-28
cobol_$pd_map_sw                       external static fixed bin(17,0)          dcl 3-126
cobol_$perform_list_ptr                external static pointer                  dcl 3-36
cobol_$perform_para_index              external static fixed bin(17,0)          dcl 3-148
cobol_$perform_sect_index              external static fixed bin(17,0)          dcl 3-150
cobol_$priority_no                     external static fixed bin(17,0)          dcl 3-140
cobol_$ptr_assumption_ind              external static fixed bin(17,0)          dcl 3-144
cobol_$ptr_status_ptr                  external static pointer                  dcl 3-56
cobol_$reg_assumption_ind              external static fixed bin(17,0)          dcl 3-146
cobol_$reg_status_ptr                  external static pointer                  dcl 3-58
cobol_$reloc_def_base_ptr              external static pointer                  dcl 3-20
cobol_$reloc_def_max                   external static fixed bin(24,0)          dcl 3-108
cobol_$reloc_link_base_ptr             external static pointer                  dcl 3-22
cobol_$reloc_link_max                  external static fixed bin(24,0)          dcl 3-110
cobol_$reloc_sym_base_ptr              external static pointer                  dcl 3-24
cobol_$reloc_sym_max                   external static fixed bin(24,0)          dcl 3-112
cobol_$reloc_text_base_ptr             external static pointer                  dcl 3-18
cobol_$reloc_text_max                  external static fixed bin(24,0)          dcl 3-106
cobol_$reloc_work_base_ptr             external static pointer                  dcl 3-26
cobol_$reloc_work_max                  external static fixed bin(24,0)          dcl 3-114
cobol_$reswd_ptr                       external static pointer                  dcl 3-78
cobol_$same_sort_merge_proc            external static bit(1)                   dcl 3-214
cobol_$scratch_dir                     external static char(168)                dcl 3-206
cobol_$sect_eop_flag                   external static fixed bin(17,0)          dcl 3-136
cobol_$seg_init_flag                   external static fixed bin(17,0)          dcl 3-132
cobol_$seg_init_list_ptr               external static pointer                  dcl 3-40
cobol_$stack_off                       external static fixed bin(17,0)          dcl 3-120
cobol_$statement_info_ptr              external static pointer                  dcl 3-76
cobol_$sym_base_ptr                    external static pointer                  dcl 3-16
cobol_$sym_max                         external static fixed bin(17,0)          dcl 3-104
cobol_$sym_wd_off                      external static fixed bin(17,0)          dcl 3-102
cobol_$tag_table_max                   external static fixed bin(17,0)          dcl 3-166
cobol_$tag_table_ptr                   external static pointer                  dcl 3-52
cobol_$temp_token_area_ptr             external static pointer                  dcl 3-42
cobol_$temp_token_max                  external static fixed bin(17,0)          dcl 3-168
cobol_$temp_token_ptr                  external static pointer                  dcl 3-44
cobol_$text_base_ptr                   external static pointer                  dcl 3-8
cobol_$text_wd_off                     external static fixed bin(17,0)          dcl 3-90
cobol_$token_block1_ptr                external static pointer                  dcl 3-46
cobol_$token_block2_ptr                external static pointer                  dcl 3-48
cobol_$value_cnt                       external static fixed bin(17,0)          dcl 3-194
cobol_$ws_charcnt                      external static fixed bin(17,0)          dcl 3-186
cobol_$ws_wdoff                        external static fixed bin(17,0)          dcl 3-200
cobol_$xref_bypass                     external static bit(1)                   dcl 3-212
cobol_$xref_chain_ptr                  external static pointer                  dcl 3-74
cobol_$xref_token_ptr                  external static pointer                  dcl 3-72
cobol_data_wd_off                      defined         fixed bin(17,0)          dcl 3-119
compile_count                          defined         fixed bin(17,0)          dcl 3-143
coms_charcnt                           defined         fixed bin(17,0)          dcl 3-189
coms_wdoff                             defined         fixed bin(17,0)          dcl 3-203
con_end_ptr                            defined         pointer                  dcl 3-11
con_wd_off                             defined         fixed bin(17,0)          dcl 3-93
cons_charcnt                           defined         fixed bin(17,0)          dcl 3-193
constant_offset                        defined         fixed bin(17,0)          dcl 3-157
data_init_flag                         defined         fixed bin(17,0)          dcl 3-131
date_compiled_sw                       defined         fixed bin(17,0)          dcl 3-181
debug_enable                           defined         fixed bin(17,0)          dcl 3-175
def_base_ptr                           defined         pointer                  dcl 3-13
def_max                                defined         fixed bin(17,0)          dcl 3-97
def_wd_off                             defined         fixed bin(17,0)          dcl 3-95
desc_an                                based           structure                level 1 packed packed unaligned dcl 2-103
desc_an_ptr                            automatic       pointer                  dcl 2-119
desc_nn                                based           structure                level 1 packed packed unaligned dcl 2-122
desc_nn_ptr                            automatic       pointer                  dcl 2-118
diag_ptr                               defined         pointer                  dcl 3-71
eln_max                                defined         fixed bin(17,0)          dcl 3-173
eln_ptr                                defined         pointer                  dcl 3-69
end_stmt                               based           structure                level 1 unaligned dcl 8-16
eos_ptr                                automatic       pointer                  dcl 8-13
fixed                                                  builtin function         dcl 258
fixup_max                              defined         fixed bin(17,0)          dcl 3-165
fixup_ptr                              defined         pointer                  dcl 3-31
fs_charcnt                             defined         fixed bin(17,0)          dcl 3-185
fs_wdoff                               defined         fixed bin(17,0)          dcl 3-199
include_cnt                            defined         fixed bin(17,0)          dcl 3-183
include_info_ptr                       defined         pointer                  dcl 3-87
index                                                  builtin function         dcl 258
init_stack_off                         defined         fixed bin(17,0)          dcl 3-125
initval_base_ptr                       defined         pointer                  dcl 3-33
initval_file_ptr                       defined         pointer                  dcl 3-35
initval_flag                           defined         fixed bin(17,0)          dcl 3-179
input_struc_basic                      based           structure                level 1 unaligned dcl 2-23
inst_struc                             based           structure                level 1 dcl 2-66
inst_struc_basic                       based           structure                level 1 dcl 2-51
length                                                 builtin function         dcl 258
link_base_ptr                          defined         pointer                  dcl 3-15
link_max                               defined         fixed bin(17,0)          dcl 3-101
link_wd_off                            defined         fixed bin(17,0)          dcl 3-99
list_off                               defined         fixed bin(17,0)          dcl 3-155
list_ptr                               defined         pointer                  dcl 3-65
ls_charcnt                             defined         fixed bin(17,0)          dcl 3-191
main_pcs_ptr                           defined         pointer                  dcl 3-85
map_data_max                           defined         fixed bin(17,0)          dcl 3-163
map_data_ptr                           defined         pointer                  dcl 3-55
max_stack_off                          defined         fixed bin(17,0)          dcl 3-123
minpral5_ptr                           defined         pointer                  dcl 3-51
misc_base_ptr                          defined         pointer                  dcl 3-61
misc_end_ptr                           defined         pointer                  dcl 3-63
misc_max                               defined         fixed bin(17,0)          dcl 3-159
mod                                                    builtin function         dcl 258
mpout                                  internal static structure                level 1 unaligned dcl 63
next_tag                               defined         fixed bin(17,0)          dcl 3-129
non_source_offset                      defined         fixed bin(17,0)          dcl 3-177
ntbuf_ptr                              defined         pointer                  dcl 3-83
num_type9                              internal static structure                level 1 unaligned dcl 82
obj_seg_name                           defined         char(32)                 dcl 3-209
op_con_ptr                             defined         pointer                  dcl 3-81
para_eop_flag                          defined         fixed bin(17,0)          dcl 3-139
pd_map_index                           defined         fixed bin(17,0)          dcl 3-117
pd_map_max                             defined         fixed bin(17,0)          dcl 3-161
pd_map_ptr                             defined         pointer                  dcl 3-29
pd_map_sw                              defined         fixed bin(17,0)          dcl 3-127
perform_list_ptr                       defined         pointer                  dcl 3-37
perform_para_index                     defined         fixed bin(17,0)          dcl 3-149
perform_sect_index                     defined         fixed bin(17,0)          dcl 3-151
priority_no                            defined         fixed bin(17,0)          dcl 3-141
ptr_assumption_ind                     defined         fixed bin(17,0)          dcl 3-145
ptr_status_ptr                         defined         pointer                  dcl 3-57
reg_assumption_ind                     defined         fixed bin(17,0)          dcl 3-147
reg_status_ptr                         defined         pointer                  dcl 3-59
rel                                                    builtin function         dcl 258
rel_instr                              internal static bit(5)                   initial array dcl 114
reloc_def_base_ptr                     defined         pointer                  dcl 3-21
reloc_def_max                          defined         fixed bin(24,0)          dcl 3-109
reloc_link_base_ptr                    defined         pointer                  dcl 3-23
reloc_link_max                         defined         fixed bin(24,0)          dcl 3-111
reloc_struc                            based           structure                array level 1 unaligned dcl 2-44
reloc_sym_base_ptr                     defined         pointer                  dcl 3-25
reloc_sym_max                          defined         fixed bin(24,0)          dcl 3-113
reloc_text_base_ptr                    defined         pointer                  dcl 3-19
reloc_text_max                         defined         fixed bin(24,0)          dcl 3-107
reloc_work_base_ptr                    defined         pointer                  dcl 3-27
reloc_work_max                         defined         fixed bin(24,0)          dcl 3-115
reserved_word                          based           structure                level 1 unaligned dcl 4-14
reswd_ptr                              defined         pointer                  dcl 3-79
rw_ptr                                 automatic       pointer                  dcl 4-11
same_sort_merge_proc                   defined         bit(1)                   dcl 3-215
scratch_dir                            defined         char(168)                dcl 3-207
sect_eop_flag                          defined         fixed bin(17,0)          dcl 3-137
seg_init_flag                          defined         fixed bin(17,0)          dcl 3-133
seg_init_list_ptr                      defined         pointer                  dcl 3-41
stack_off                              defined         fixed bin(17,0)          dcl 3-121
statement_info_ptr                     defined         pointer                  dcl 3-77
string                                                 builtin function         dcl 258
sym_base_ptr                           defined         pointer                  dcl 3-17
sym_max                                defined         fixed bin(17,0)          dcl 3-105
sym_wd_off                             defined         fixed bin(17,0)          dcl 3-103
tag_table_max                          defined         fixed bin(17,0)          dcl 3-167
tag_table_ptr                          defined         pointer                  dcl 3-53
temp_token_area_ptr                    defined         pointer                  dcl 3-43
temp_token_max                         defined         fixed bin(17,0)          dcl 3-169
temp_token_ptr                         defined         pointer                  dcl 3-45
text_base_ptr                          defined         pointer                  dcl 3-9
text_wd_off                            defined         fixed bin(17,0)          dcl 3-91
token_block1_ptr                       defined         pointer                  dcl 3-47
token_block2_ptr                       defined         pointer                  dcl 3-49
value_cnt                              defined         fixed bin(17,0)          dcl 3-195
ws_charcnt                             defined         fixed bin(17,0)          dcl 3-187
ws_wdoff                               defined         fixed bin(17,0)          dcl 3-201
xref_bypass                            defined         bit(1)                   dcl 3-213
xref_chain_ptr                         defined         pointer                  dcl 3-75
xref_token_ptr                         defined         pointer                  dcl 3-73

NAMES DECLARED BY EXPLICIT CONTEXT.
cobol_release_gen               000007 constant        entry                    external dcl 34
elem_to_non_elem                000275 constant        entry                    internal dcl 199 ref 164 167
start                           000016 constant        label                    dcl 140

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       506         556     402         516
Length      1132     402        50         340     104          24

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
cobol_release_gen                   159 external procedure  is an external procedure.  
elem_to_non_elem                        internal procedure  shares stack frame of external procedure cobol_release_gen.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 mlr_struct                  cobol_release_gen
000027 instr                       cobol_release_gen
000032 inst_seq                    cobol_release_gen

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
cobol_release_gen        000100 mlr_reg_to_reg              cobol_release_gen
                         000101 retry_tag                   cobol_release_gen
                         000102 dn_ptr                      cobol_release_gen
                         000104 buff1                       cobol_release_gen
                         000130 buff2                       cobol_release_gen
                         000154 buff3                       cobol_release_gen
                         000200 input_ptr                   cobol_release_gen
                         000202 inst_ptr                    cobol_release_gen
                         000204 reloc_ptr                   cobol_release_gen

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
cobol_addr                    cobol_call_op                 cobol_define_tag              cobol_emit
cobol_reg_manager$after_op

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
cobol_$next_tag




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     34 000004       110 000014       140 000016       142 000020       143 000022       145 000024       146 000026
    147 000034       149 000036       152 000043       154 000047       155 000052       157 000056       158 000060
    159 000061       162 000062       164 000066       165 000067       167 000074       169 000075       170 000116
    171 000121       176 000141       178 000146       179 000161       180 000172       184 000173       186 000204
    187 000207       188 000211       189 000212       190 000213       191 000227       192 000250       193 000263
    197 000274       199 000275       203 000276       207 000303       208 000305       210 000307       214 000313
    215 000315       216 000317       218 000320       221 000323       223 000325       224 000327       225 000330
    229 000333       231 000335       234 000343       236 000345       237 000347       238 000350       242 000353
    243 000355       244 000357       245 000360       249 000363       250 000365       253 000367       255 000371


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
