	COMPILATION LISTING OF SEGMENT cobol_replb
	Compiled by: Multics PL/I Compiler, Release 31b, of April 24, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 05/24/89  1014.7 mst Wed
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        6*        *                                                         *
        7*        * Copyright (c) 1972 by Massachusetts Institute of        *
        8*        * Technology and Honeywell Information Systems, Inc.      *
        9*        *                                                         *
       10*        *********************************************************** */
       11 
       12 
       13 
       14 
       15 /****^  HISTORY COMMENTS:
       16*  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
       17*     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
       18*     MCR8060 cobol_replb.pl1 Reformatted code to new Cobol standard.
       19*                                                   END HISTORY COMMENTS */
       20 
       21 
       22 /* Modified on 07/11/81 by FCH, [4.4-3], work files incorrectly written, phx10380(BUG492) */
       23 /* Modified on 04/09/81 by FCH, [4.4-2], fix bugs in leveling for validation-81, BUG477 */
       24 /* Modified on 12/10/80 by FCH, [4.4-1], report writer added */
       25 /* Modified on 03/24/80 by FCH, [4.2-7], Emit correct line number with L-14 */
       26 /* Modified on 03/24/80 by FCH, [4.2-6], flag "(" as generated by cond-name ref */
       27 /* Modified on 07/11/79 by FCH, [4.0-5], debug statement */
       28 /* Modified on 06/26/79 by MD, [4.0-4], in-line perform */
       29 /* Modified on 06/02/78 by RAL, [3.0-3], check lnk for redefines in linkage section */
       30 /* Modified on 01/03/78 by FCH, [3.0-2], leveling diag 14 issued */
       31 /* Modified on 12/28/77 by FCH, [3.0-1], numeric procedure names handled correctly */
       32 /* Modified since Version 3.0 */
       33 
       34 
       35 
       36 
       37 
       38 
       39 /* format: style3 */
       40 cobol_replb:
       41      proc (ntendptr, string_ptr);
       42 
       43 /*  DECLARATION OF THE PARAMETERS  */
       44 
       45 dcl	ntendptr		ptr;			/*  points to the byte following the last entry in the name table buffer (input)  */
       46 dcl	string_ptr	ptr;			/*  points to the string base table (input)  */
       47 
       48 
       49 /*  INTERNAL VARIABLES  */
       50 
       51 dcl	eof		bit (1) int static init ("0"b);
       52 dcl	ntptr		ptr;
       53 dcl	s		fixed bin (15);		/*[4.0-5]*/
       54 declare	sz		fixed bin;		/*[4.0-5]*/
       55 declare	ch32		char (32) based;
       56 
       57 declare	(P1, P2)		ptr;			/*[3.0-2]*/
       58 
       59 /*  the name stack pointer table  */
       60 
       61 dcl	ptrtable		(50) ptr;
       62 
       63 
       64 /*  INTERNAL STATIC  */
       65 
       66 dcl	false		bit (1) int static init ("0"b);
       67 dcl	true		bit (1) int static init ("1"b);
       68 
       69 
       70 
       71 
       72 
       73 /*  DECLARATION OF EXTERNAL ENTRIES  */
       74 
       75 
       76 dcl	cobol_usrwd	ext
       77 			entry (ptr, fixed bin (15), ptr, fixed bin (15), ptr, bit (1), bit (1), bit (1),
       78 			fixed bin (15), ptr);
       79 
       80 dcl	cobol_repl3_expand	ext entry (ptr, ptr, ptr, fixed bin (15), fixed bin (7));
       81 
       82 
       83 dcl	cobol_find_secdef	ext entry (ptr, fixed bin (15), ptr, ptr);
       84 
       85 dcl	dn_ptr		ptr;
       86 dcl	temp_ptr		ptr;
       87 dcl	1 shdr		based (cobol_curr_out),
       88 	  2 filler	char (12),
       89 	  2 next		fixed bin (24);
       90 dcl	1 picture		based (ptr2),
       91 	  2 size		fixed bin (15),
       92 	  2 line		fixed bin (15),
       93 	  2 column	fixed bin (7),
       94 	  2 type		fixed bin (7),
       95 	  2 length	fixed bin (7),
       96 	  2 string	char (120),
       97 	1 message		based (ptr2),
       98 	  2 size		fixed bin (15),
       99 	  2 line		fixed bin (15),
      100 	  2 column	fixed bin (7),
      101 	  2 type		fixed bin (7),
      102 	  2 number	fixed bin (15),
      103 	  2 info		fixed bin (15),
      104 	1 source		based (ptr2),
      105 	  2 size		fixed bin (15),
      106 	  2 line		fixed bin (15),
      107 	  2 column	fixed bin (7),
      108 	  2 type		fixed bin (7),
      109 	  2 info		fixed bin (7),
      110 	  2 length	fixed bin (7),
      111 	  2 image		char (200),
      112 	1 user_word	based (ptr2),
      113 	  2 size		fixed bin (15),
      114 	  2 line		fixed bin (15),
      115 	  2 column	fixed bin (7),
      116 	  2 type		fixed bin (7),
      117 	  2 info1		bit (1),
      118 	  2 info2		bit (1),
      119 	  2 info3		bit (6),			/*  2 multics char(3),  */
      120 	  2 length	fixed bin (7),
      121 	  2 word		char (30);
      122 
      123 
      124 dcl	1 db_token	based (ptr2),
      125 	  2 size		fixed bin (15),
      126 	  2 line		fixed bin (15),
      127 	  2 column	fixed bin (7),
      128 	  2 type		fixed bin (7),
      129 	  2 db_index	fixed bin (15),
      130 	  2 db_switch	bit (8);
      131 
      132 
      133 
      134 dcl	minpr_record	char (recsize2) based (ptr2),
      135 	stackrecord	char (recsize2) based (stackptr),
      136 	template		char (500) based (ntptr),
      137 	(stackptr, stackbegptr, ptr2, ptr2_1, save_ptr2)
      138 			pointer,
      139 	(counter, topstack) fixed bin (15),
      140 	(ntptr1, ntptr2)	pointer,
      141 	(i, j)		fixed bin,
      142 	was_found		bit (1),
      143 	not_found		bit (1);			/*[4.4-2]*/
      144 declare	qualif		bit (1),
      145 	sav_ptr		ptr;
      146 
      147 dcl	stack		char (1000);
      148 dcl	temp_stack	(1000) char (1) based (addr (stack));
      149 dcl	template1		(500) char (1) based (addr (template));
      150 
      151 dcl	1 auser_word	based (stackptr),
      152 	  2 size		fixed bin (15),
      153 	  2 line		fixed bin (15),
      154 	  2 column	fixed bin (7),
      155 	  2 type		fixed bin (7),
      156 	  2 info1		bit (1),
      157 	  2 info2		bit (1),
      158 	  2 info3		bit (6),			/*  2 multics char(3),  */
      159 	  2 length	fixed bin (7),
      160 	  2 word		char (30);
      161 
      162 dcl	1 res_word_of	auto,
      163 	  2 size		fixed bin (15) init (28),
      164 	  2 line		fixed bin (15) init (0),
      165 	  2 column	fixed bin (7) init (0),
      166 	  2 type		fixed bin (7) init (1),
      167 	  2 key		fixed bin (15) init (133),
      168 	  2 class1	bit (16) init ("000000001"b), /*[4.2-6]*/
      169 	  2 class2	bit (4) init ("0001"b),
      170 	  2 class3	bit (1) init ("1"b),
      171 	  2 class4	bit (3) init ("0"b),	/*  2 multics char(1) init(" "),  */
      172 	  2 jump_index	fixed bin (7) init (0);
      173 
      174 dcl	1 adiag		auto,
      175 	  2 size		fixed bin init (28),
      176 	  2 line		fixed bin,
      177 	  2 column	fixed bin,
      178 	  2 type		fixed bin init (5),
      179 	  2 run_number	fixed bin init (6),
      180 	  2 number	fixed bin,
      181 	  2 info		bit (8) initial ("01000000"b),
      182 	  2 image_size	fixed bin init (0),
      183 	  2 image		char (8);
      184 
      185 dcl	sectno		fixed bin (15),
      186 	rw_switch		bit (1),
      187 	ptr3		pointer,
      188 	levstack		(50) fixed bin (15);
      189 
      190 
      191 dcl	1 data_based	based,
      192 	  02 filler	char (24),
      193 	  02 offset	fixed bin;
      194 
      195 dcl	startlevel	fixed bin (31);
      196 dcl	tlevel		fixed bin (31);
      197 dcl	continue		bit (1);
      198 dcl	diag_no		fixed bin (15);
      199 dcl	save_line		fixed bin (15);
      200 dcl	save_column	fixed bin (7);
      201 dcl	save_length	fixed bin (31);
      202 dcl	first_time	bit (1);
      203 dcl	first_workfile_ref	bit (1) int static init ("1"b);
      204 
      205 
      206 
      207 dcl	t26_ptr		ptr;
      208 dcl	t26_size		fixed bin (15) int static init (16);
      209 
      210 dcl	1 t26_token	int static,
      211 	  2 size		fixed bin (15) init (16),
      212 	  2 line		fixed bin (15),
      213 	  2 column	fixed bin (7),
      214 	  2 type		fixed bin (7) init (26);	/*  =26  */
      215 
      216 
      217 
      218 
      219 dcl	1 t88_token	int static,
      220 	  2 size		fixed bin (15) init (16),
      221 	  2 line		fixed bin (15),
      222 	  2 column	fixed bin (7),
      223 	  2 type		fixed bin (7) init (88);
      224 
      225 dcl	t88_ptr		ptr;
      226 
      227 
      228 dcl	rw_corresponding	bit (1);
      229 dcl	rw_initialize	bit (1);
      230 dcl	expand_condition_names
      231 			bit (1);
      232 dcl	rw_sort_etc	bit (1);			/* 2/26/74 */
      233 						/*[4.4-1]*/
      234 dcl	(rw_debugging, rw_initterm, rw_generate)
      235 			bit (1);
      236 dcl	rw_perform	bit (1);
      237 dcl	rw_search		bit (1);
      238 dcl	rw_exception	bit (1);
      239 dcl	already_replaced	bit (1);
      240 dcl	processing_subscript
      241 			bit (1);
      242 dcl	lev_from_srchloop	bit (1);
      243 dcl	too_many_qualifiers bit (1);
      244 dcl	name_stack_overflow bit (1);
      245 dcl	subscript_stack_overflow
      246 			bit (1);
      247 dcl	recovered_to_thru	bit (1);
      248 dcl	ss_recovered	bit (1);
      249 dcl	num_literal	bit (1);
      250 
      251 dcl	ft_ptr		ptr;
      252 
      253 /*  VARIABLES REQUIRED FOR PROCESSING CONDITION NAMES  */
      254 
      255 dcl	cname_ptr		ptr;
      256 dcl	cvar_ptr		ptr;
      257 dcl	temp_cname_ptr	ptr;
      258 dcl	temp_cvar_ptr	ptr;
      259 dcl	cname_size	fixed bin (15);
      260 dcl	cvar_size		fixed bin (15);
      261 dcl	ss_stack_ptr	ptr;
      262 dcl	ssname_ptr	ptr;
      263 
      264 dcl	cobol_cvar_record	char (500);
      265 dcl	cobol_cname_record	char (500);
      266 dcl	cobol_ss_name	char (500);
      267 
      268 dcl	1 cobol_ss_stack,
      269 	  2 no_entries	fixed bin (15),
      270 	  2 dummy_ptr	ptr,
      271 	  2 stack		char (1000);
      272 
      273 
      274 
      275 
      276 
      277 
      278 
      279 
      280 
      281 
      282 
      283 
      284 dcl	ss_template	(1000) char (1) based (addr (cobol_ss_stack.stack));
      285 
      286 dcl	ss_recsize	fixed bin (15);
      287 dcl	cobol_ss_stackrecord
      288 			char (ss_recsize) based (ss_stack_ptr);
      289 dcl	ss_ptrtable	(1:50) ptr;
      290 dcl	ss_topstack	fixed bin (15);
      291 
      292 dcl	next_state	fixed bin (15);
      293 dcl	rwkey		fixed bin (15);
      294 
      295 dcl	name_stack_size	fixed bin (15) int static init (1000);
      296 dcl	subscript_stack_size
      297 			fixed bin (15) int static init (1000);
      298 
      299 
      300 
      301 
      302 
      303 /*  DECLARATIONS REQUIRED FOR PROCESSINNG DEBUGGING STATEMENTS  */
      304 
      305 dcl	call_scan		bit (1);
      306 dcl	recover_code	fixed bin (15);
      307 dcl	stmt_term		fixed bin (15) int static init (1),
      308 	a_dataname	fixed bin (15) int static init (2),
      309 	resword_all	fixed bin (15) int static init (3),
      310 	eof_found		fixed bin (15) int static init (4);
      311 
      312 
      313 dcl	1 debug_alit	based (ss_stack_ptr),
      314 	  2 size		fixed bin (15),
      315 	  2 line		fixed bin (15),
      316 	  2 column	fixed bin (15),
      317 	  2 type		fixed bin (15),
      318 	  2 info		bit (8),
      319 	  2 multics	char (3),
      320 	  2 length	fixed bin (15),
      321 	  2 string	char (31);
      322 
      323 dcl	lit_of		char (4) int static init (" of ");
      324 dcl	inext		fixed bin (15);
      325 dcl	ilength		fixed bin (15);
      326 dcl	all_flag		bit (1);
      327 
      328 
      329 /*  DECLARAATIONS REQUIRED FOR PROCESSING "PROCEDURE DIVISION USING"  */
      330 
      331 dcl	rw_using		bit (1);
      332 dcl	using_count	fixed bin (15);
      333 
      334 
      335 
      336 
      337 /*  VARIABLES REQUIRED FOR PROCESSING TYPE 1 RECORDS WITH REPLACEMENT JUMP INDEX=7  */
      338 
      339 
      340 dcl	1 special_usrwd	int static,
      341 	  2 size		fixed bin (15),		/*  MUST CHANGE INIT VALUE FOR NPL VERSION  */
      342 	  2 line		fixed bin (15),
      343 	  2 column	fixed bin (7),
      344 	  2 type		fixed bin (7) init (8),
      345 	  2 info		bit (8) init ("0"b),
      346 	  2 multics	char (3),
      347 	  2 length	fixed bin (7),
      348 	  2 name		char (30);		/*  large enough to hold maximum size name  */
      349 
      350 
      351 dcl	clinage_counter	char (14) int static init ("LINAGE-COUNTER"),
      352 	cline_counter	char (12) int static init ("LINE-COUNTER"),
      353 	cpage_counter	char (12) int static init ("PAGE-COUNTER"),
      354 	csystem_status	char (13) int static init ("SYSTEM-STATUS"),
      355 	ctally		char (5) int static init ("TALLY");
      356 
      357 
      358 /*  VARIABLES REQUIRED FOR PROCESSING "SEARCH {ALL}"  */
      359 
      360 dcl	error_cond	bit (1);
      361 dcl	search_all	bit (1);
      362 dcl	save_ntptr	ptr;
      363 dcl	save_type10_ptr	ptr;
      364 
      365 
      366 
      367 
      368 
      369 /*  DEFINE MNEMONIC RETURN CODES FOR THE INTERNAL SCAN PROCEDURE  */
      370 
      371 
      372 dcl	rcode_NO_INTEREST	fixed bin static options (constant) init (1);
      373 dcl	rcode_RESWORD_REC	fixed bin static options (constant) init (2);
      374 dcl	rcode_DNAME_REC	fixed bin static options (constant) init (3);
      375 dcl	rcode_ERROR_DETECTED
      376 			fixed bin static options (constant) init (4);
      377 dcl	rcode_SCAN_CURRENT	fixed bin static options (constant) init (5);
      378 dcl	rcode_SCAN_NEXT	fixed bin static options (constant) init (6);
      379 
      380 
      381 dcl	type25_flag	bit (1);
      382 
      383 
      384 
      385 
      386 
      387 
      388 dcl	saved_storage_type	bit (1);
      389 dcl	searching_for_another
      390 			bit (1);
      391 dcl	return_code	fixed bin (15);
      392 dcl	string		builtin;
      393 dcl	addr		builtin;
      394 dcl	addrel		builtin;
      395 dcl	divide		builtin;
      396 dcl	fixed		builtin;
      397 dcl	mod		builtin;
      398 dcl	null		builtin;
      399 dcl	(substr, size)	builtin;
      400 
      401 dcl	1 linage_counter_type9
      402 			static,
      403 	  2 size		fixed bin init (112),
      404 	  2 line		fixed bin,
      405 	  2 column	fixed bin,
      406 	  2 type		fixed bin init (9),
      407 	  2 repl_ptr	(2) ptr init ((2) null ()),
      408 	  2 fill1		bit (108) init (""b),
      409 	  2 file_key_info,
      410 	    3 fb1		(3) fixed bin init (0, 0, 0),
      411 	    3 size	fixed bin init (6),
      412 	    3 places_left	fixed bin init (6),
      413 	    3 places_right	fixed bin init (0),
      414 	    3 flags1	bit (36) init ("001000100100000001000000000100000000"b),
      415 						/* constant lev77 elem numeric display */
      416 	    3 flags2	bit (36) init (""b),
      417 	    3 seg		fixed bin,
      418 	    3 off		fixed bin init (352),
      419 	  2 fill2		(7) fixed bin init (0, 0, 0, 0, 0, 0, 0);
      420 dcl	1 type17		static,
      421 	  2 size		fixed bin,
      422 	  2 line		fixed bin,
      423 	  2 column	fixed bin,
      424 	  2 type		fixed bin init (17),
      425 	  2 string_ptr	ptr init (null ()),
      426 	  2 prev_rec	ptr init (null ()),
      427 	  2 info		bit (8) init (""b),
      428 	  2 class,
      429 	    3 switch_condition
      430 			bit (1),
      431 	    3 switch_name	bit (1),
      432 	    3 accept_device bit (1),
      433 	    3 display_device
      434 			bit (1),
      435 	    3 printer_control
      436 			bit (1),
      437 	    3 alphabet_name bit (1),
      438 	  2 on_status	bit (1) init (""b),
      439 	  2 off_status	bit (1) init (""b),
      440 	  2 def_line	fixed bin init (0),
      441 	  2 iw_key	fixed bin,
      442 	  2 reserved	bit (36) init (""b),
      443 	  2 alphabet_offset fixed bin init (0),
      444 	  2 name_size	fixed bin,
      445 	  2 name		char (8);
      446 dcl	1 type40		auto,			/* due to size */
      447 	  2 size		fixed bin,
      448 	  2 line		fixed bin,
      449 	  2 column	fixed bin,
      450 	  2 type		fixed bin,
      451 	  2 string_ptr	ptr,
      452 	  2 prev_rec	ptr,
      453 	  2 info		bit (10),
      454 	  2 hival_char	char (1),
      455 	  2 loval_char	char (1),
      456 	  2 iw_key	fixed bin,
      457 	  2 def_line	fixed bin,
      458 	  2 char_size	fixed bin,
      459 	  2 he_value	char (1),
      460 	  2 segno		fixed bin,
      461 	  2 offset	fixed bin,
      462 	  2 dn_offset	fixed bin,
      463 	  2 table		char (512),
      464 	  2 name_size	fixed bin,
      465 	  2 name		char (8);
      466 
      467 dcl	temp_char		char (1);
      468 dcl	rw_key		fixed bin;
      469 dcl	replb_compile_count fixed bin static init (0);
      470 dcl	cobol_read_ft_	entry (fixed bin, ptr);
      471 dcl	cobol_c_list	entry (ptr);
      472 dcl	cobol_set_type40_$ebcdic
      473 			entry (ptr);
      474 
      475 
      476 /*************************************/
      477 start:
      478 	mcobol = fixed_common.compiler_id = 3;
      479 	rw_sort_etc = "0"b;
      480 	rw_corresponding = "0"b;
      481 	rw_initialize = "0"b;
      482 	rw_search = "0"b;
      483 	expand_condition_names = "0"b;		/*[4.0-5]*/
      484 	rw_debugging = "0"b;
      485 	rw_perform = "0"b;
      486 	rw_using = "0"b;
      487 	rw_exception = "0"b;
      488 	already_replaced = "0"b;
      489 	processing_subscript = "0"b;
      490 	lev_from_srchloop = "0"b;
      491 	subscript_stack_overflow = "0"b;
      492 	name_stack_overflow, too_many_qualifiers = "0"b;	/*[3.0-1]*/
      493 	ss_stack_ptr = addr (cobol_ss_stack.stack);
      494 	cobol_ss_stack.no_entries = 0;
      495 	st_ptr = addr (status);
      496 	sectno = 1;
      497 	using_count = 0;
      498 	search_all = "0"b;
      499 	type25_flag = "0"b;
      500 	t26_ptr = addr (t26_token);
      501 	t88_ptr = addr (t88_token);
      502 	ssname_ptr = addr (cobol_ss_name);
      503 	stackbegptr = addr (stack);
      504 	rw_switch = false;
      505 
      506 	call swfget;				/* Read the first record from the input file. */
      507 	do while (user_word.type = 5);		/* Scan over diagnostic records writing them to output file. */
      508 	     call swfput;
      509 	     call swfget;
      510 	end;
      511 
      512 	next_state = 1;
      513 	go to using_scan;
      514 
      515 using_read:
      516 	call swfget;
      517 using_scan:
      518 	call repl3_scan (status, return_code);
      519 	if status_right ^= "0"b
      520 	then go to rend;
      521 using_switch:
      522 	go to using_state (next_state);
      523 
      524 using_state (1):
      525 	if return_code = rcode_RESWORD_REC & ptr2 -> reserved_word.key = 142
      526 						/* PROCEDURE */
      527 	then do;
      528 		next_state = 2;
      529 		call swfput;			/* Write the reserved word to the output file. */
      530 		go to using_read;
      531 	     end;
      532 	else go to using_exit;
      533 using_state (2):
      534 	if return_code = rcode_RESWORD_REC & ptr2 -> reserved_word.key = 94
      535 						/* DIVISION */
      536 	then do;
      537 		next_state = 3;
      538 		call swfput;			/* Write the reserved word to the output file. */
      539 		go to using_read;
      540 	     end;
      541 	else go to using_exit;
      542 using_state (3):
      543 	if return_code = rcode_RESWORD_REC & ptr2 -> reserved_word.key = 176
      544 						/* USING */
      545 	then do;
      546 		next_state = 4;
      547 		rw_using = "1"b;
      548 		call swfput;			/* Write the reserved word to the output file. */
      549 		go to using_read;
      550 	     end;
      551 	else go to using_exit;
      552 using_state (4):
      553 	if return_code = rcode_ERROR_DETECTED | return_code = rcode_SCAN_CURRENT
      554 	then go to using_scan;			/* The current record in the read buffer is to be scanned next. */
      555 	if return_code = rcode_NO_INTEREST & user_word.type = 5
      556 	then do;					/* diagnostic record */
      557 		call swfput;
      558 		go to using_read;
      559 	     end;
      560 	if return_code = rcode_DNAME_REC
      561 	then do;					/* The record scanned is an identifier following "USING". */
      562 		using_count = using_count + 1;
      563 		if ^ntptr -> data_name.saved & ntptr -> data_name.linkage ^= 0
      564 		then do;				/* This name has not been in the name table buffer on a
      565*					   previous load, but the linkage entry has already been set.
      566*					   Therefore, this name must have appeared already in the
      567*					   using clause and this occurrence is illegal. */
      568 
      569 			adiag.number = 14;		/* Identifier must not appear in "using" more than once. */
      570 			adiag.line = stackbegptr -> auser_word.line;
      571 			adiag.column = stackbegptr -> auser_word.column;
      572 			call issue_diag;
      573 			go to using_scan;
      574 		     end;				/*		call unload;		/* Unload the user words from the name stack. */
      575 		if ntptr -> data_name.linkage_section
      576 		then ntptr -> data_name.linkage = using_count;
      577 		save_line = ntptr -> data_name.line;
      578 		save_column = ntptr -> data_name.column;
      579 		ntptr -> data_name.line = stackbegptr -> auser_word.line;
      580 		ntptr -> data_name.column = stackbegptr -> auser_word.column;
      581 						/*[4.0-5]*/
      582 		call swfput2 (ntptr);		/* Write out the name table buffer entry. */
      583 		ntptr -> data_name.line = save_line;	/* Restore correct line and column numbers */
      584 		ntptr -> data_name.column = save_column;/* to name table buffer entry. */
      585 
      586 		if (ntptr -> data_name.level = 1 | ntptr -> data_name.level = 77) & ntptr -> data_name.linkage_section
      587 		then do;				/* Level 1 entry in the linkage section. Step linearly thru the name table buffer
      588*			   marking all subordinate type 9 entries with the relative position of this
      589*			   identifier in the using clause. */
      590 
      591 /* If redefine, back up the name table buffer          [3.0-3]
      592*                                          until level 1 of an object of redefine is found. */
      593 
      594 /*[]*/
      595 			if ntptr -> data_name.s_of_rdf = "1"b
      596 						/*[]*/
      597 			then do;			/*[]*/
      598 				ntptr = ntptr -> data_name.prev_rec;
      599 						/*[]*/
      600 				continue = "1"b;	/*[]*/
      601 				do while (continue);/*[]*/
      602 				     if ntptr -> data_name.level = 1 | ntptr -> data_name.level = 77
      603 						/*[]*/
      604 				     then if ntptr -> data_name.o_of_rdf = "1"b
      605 						/*[]*/
      606 					then continue = "0"b;
      607 						/*[]*/
      608 					else ntptr = ntptr -> data_name.prev_rec;
      609 						/*[]*/
      610 				     else ntptr = ntptr -> data_name.prev_rec;
      611 						/*[]*/
      612 				end;		/*[]*/
      613 				ntptr -> data_name.linkage = using_count;
      614 			     end;			/*[3.0-3]*/
      615 
      616 
      617 			continue = "1"b;
      618 			do while (continue);
      619 			     ntptr = addrel (ntptr, divide (ntptr -> data_name.size + 11, 8, 17, 0) * 2);
      620 			     if ntptr = ntendptr
      621 			     then continue = "0"b;	/* end of name table buffer */
      622 			     else if ntptr -> data_name.level < 2 | ntptr -> data_name.level = 77
      623 			     then continue = "0"b;
      624 			     else if ntptr -> data_name.type = 9
      625 			     then ntptr -> data_name.linkage = using_count;
      626 			end;
      627 
      628 /* Step thru name table buffer to handle all subject          [3.0-3]
      629*                                of redefines and their subordinates. */
      630 
      631 
      632 /*[]*/
      633 			do while ((ntptr -> data_name.level = 1 | ntptr -> data_name.level = 77)
      634 			     & ntptr -> data_name.s_of_rdf = "1"b);
      635 						/*[]*/
      636 			     ntptr -> data_name.linkage = using_count;
      637 						/*[]*/
      638 			     continue = "1"b;	/*[]*/
      639 			     do while (continue);	/*[]*/
      640 				ntptr = addrel (ntptr, divide (ntptr -> data_name.size + 11, 8, 17, 0) * 2);
      641 						/*[]*/
      642 				if ntptr = ntendptr /*[]*/
      643 				then continue = "0"b;
      644 						/* end of name table buffer */
      645 						/*[]*/
      646 				else if ntptr -> data_name.level < 2 /*[]*/ | ntptr -> data_name.level = 77
      647 						/*[]*/
      648 				then continue = "0"b;
      649 						/*[]*/
      650 				else if ntptr -> data_name.type = 9
      651 						/*[]*/
      652 				then ntptr -> data_name.linkage = using_count;
      653 						/*[]*/
      654 			     end;			/*[]*/
      655 			end;			/*[3.0-3]*/
      656 
      657 
      658 		     end;
      659 		if user_word.type > 8
      660 		then go to using_read;		/* This user word has been replaced before. The read
      661*					   buffer contains type 9 (or greater) record that
      662*					   replaced it during a previous load of the name table buffer. */
      663 		else go to using_scan;
      664 	     end;
      665 	else rw_using = "0"b;			/* Record just scanned is a reserved word or some rcode_NO_INTEREST
      666*					   type other than a diagnistic record. */
      667 using_exit:
      668 	call swfput;				/* Write out the current record in the read buffer. */
      669 rloop:
      670 	call swfget;
      671 rloop1:
      672 	call repl3_scan (status, return_code);
      673 rloop2:
      674 	if status_right ^= "0"b
      675 	then go to rend;
      676 	if return_code = rcode_NO_INTEREST
      677 	     | (return_code = rcode_RESWORD_REC & ^rw_perform & ^rw_search & ^rw_exception)
      678 	then do;					/* Simply write out this record. */
      679 		call swfput;
      680 		go to rloop;
      681 	     end;
      682 	if return_code = rcode_ERROR_DETECTED | return_code = rcode_SCAN_CURRENT
      683 	then go to rloop1;				/* Record in read buffer is the one to be processed next. */
      684 	if return_code = rcode_SCAN_NEXT
      685 	then go to rloop;
      686 
      687 	if rw_search
      688 	then do;					/* Process "SEARCH". */
      689 		call swfput;			/* Write out reserved word for "SEARCH". */
      690 		call swfget;			/* Read next record and check for "ALL". */
      691 		if ptr2 -> reserved_word.type = 1 & ptr2 -> reserved_word.key = 73
      692 						/* "ALL" */
      693 		then do;				/* "all" follows "SEARCH" */
      694 			search_all = "1"b;
      695 			call swfput;		/* Write out reserved word record "ALL". */
      696 			call swfget;		/* Read next record. */
      697 		     end;
      698 		call repl3_scan (status, return_code);
      699 		if status_right ^= "0"b
      700 		then go to rend;
      701 		if return_code = rcode_DNAME_REC
      702 		then do;				/* data name follows "SEARCH {ALL}" */
      703 			error_cond = "0"b;
      704 			if ^ntptr -> data_name.subscripted
      705 			then do;			/* Identifier following "SEARCH {ALL}" must have an
      706*					   OCCURS clause in its description. */
      707 
      708 				adiag.number = 15;
      709 				error_cond = "1"b;
      710 			     end;
      711 			else if ^ntptr -> data_name.indexed_by
      712 			then do;			/* Identifier following "SEARCH {ALL}" must have an
      713*					   INDEXED BY clause in its description. */
      714 
      715 				adiag.number = 16;
      716 				error_cond = "1"b;
      717 			     end;
      718 			else if search_all
      719 			then do;			/* "ALL" present, check that "KEY IS" is also present. */
      720 				if ^ntptr -> data_name.subject_of_keyis
      721 				then do;
      722 					adiag.number = 17;
      723 					error_cond = "1"b;
      724 				     end;
      725 				search_all = "0"b;
      726 			     end;
      727 			if ^error_cond
      728 			then do;			/* Check if identifier has an index associated with it. */
      729 				save_ntptr = ntptr; /* save ptr to identifier following "SEARCH ALL". */
      730 				ntptr = ntptr -> data_name.prev_rec;
      731 				if ntptr -> data_name.type = 10
      732 				then do;		/* The identifier has an INDEXED BY clause. */
      733 					do while (ntptr -> data_name.type = 10);
      734 						/* Find 1st index name. */
      735 					     save_type10_ptr = ntptr;
      736 					     ntptr = ntptr -> data_name.prev_rec;
      737 					end;
      738 					ntptr = save_ntptr;
      739 						/* Point at the identifier. */
      740 					save_line = ntptr -> data_name.line;
      741 					save_column = ntptr -> data_name.column;
      742 					ntptr -> data_name.line = stackbegptr -> auser_word.line;
      743 					ntptr -> data_name.column = stackbegptr -> auser_word.column;
      744 						/*[4.0-5]*/
      745 					call swfput2 (ntptr);
      746 						/* Write out data name record. */
      747 					ntptr -> data_name.line = save_line;
      748 						/* Restore line and column */
      749 					ntptr -> data_name.column = save_column;
      750 					ntptr = save_type10_ptr;
      751 						/* Point to 1st index name. */
      752 					save_line = ntptr -> data_name.line;
      753 					save_column = ntptr -> data_name.column;
      754 					ntptr -> data_name.line = stackbegptr -> auser_word.line;
      755 					ntptr -> data_name.column = stackbegptr -> auser_word.column;
      756 						/*[4.0-5]*/
      757 					call swfput2 (ntptr);
      758 						/* Write index name record. */
      759 					ntptr -> data_name.line = save_line;
      760 						/* Restore line and column. */
      761 					ntptr -> data_name.column = save_column;
      762 				     end;
      763 				else do;		/* INDEXED BY clause is missing. */
      764 					adiag.number = 16;
      765 					error_cond = "1"b;
      766 				     end;
      767 			     end;
      768 			if error_cond
      769 			then call issue_diag;
      770 			rw_search = "0"b;		/* Turn off "SEARCH" flag. */
      771 			go to rloop1;		/* Read buffer contains next record. */
      772 		     end;
      773 		else do;				/* Some other type record follows "SEARCH {ALL}". */
      774 			rw_search = "0"b;		/* Turn off "SEARCH" flag. */
      775 			if return_code = rcode_NO_INTEREST & ptr2 -> reserved_word.type = 5
      776 						/* diagnostic */
      777 			then call swfput;		/* Write out the diagnostic record. */
      778 			else if return_code = rcode_RESWORD_REC | return_code = rcode_NO_INTEREST
      779 			then do;			/* Must issue diagnostic. */
      780 				adiag.number = 18;	/* Identifier expected here */
      781 				adiag.line = user_word.line;
      782 				adiag.column = user_word.column;
      783 				ptr3 = addr (adiag);
      784 				call swfput1 (ptr3);
      785 			     end;
      786 			if return_code = rcode_NO_INTEREST | return_code = rcode_RESWORD_REC
      787 			then go to rloop;		/* Read next record and continue. */
      788 			else go to rloop1;		/* Process current record in read buffer. */
      789 		     end;
      790 	     end;					/* Process "SEARCH". */
      791 
      792 	if rw_exception
      793 	then do;
      794 
      795 		rw_exception = "0"b;
      796 		call swfput;			/* Write out the reserved word. */
      797 		call swfget;			/* Get the next token. */
      798 		call repl3_scan (status, return_code);
      799 		if status_right ^= "0"b
      800 		then go to rend;
      801 		if return_code = rcode_RESWORD_REC & ptr2 -> reserved_word.key = 142
      802 						/* "PROCEDURE" */
      803 		then do;
      804 			call swfput;
      805 			rw_switch = "0"b;		/* Next token should be either a file name or a
      806*						   reserved word, but never a section or paragraph name.
      807*						   See the writeup on the "USE" verb. */
      808 			go to rloop;
      809 		     end;
      810 		else go to rloop1;			/* Rescan the current token. */
      811 
      812 	     end;
      813 
      814 	if rw_perform
      815 	then do;					/* Process "PERFORM". */
      816 		next_state = 1;
      817 perform_write:
      818 		call swfput;
      819 perform_read:
      820 		call swfget;
      821 perform_scan:
      822 		call repl3_scan (status, return_code);
      823 		if status_right ^= "0"b
      824 		then go to rend;
      825 perform_switch:
      826 		go to perform_state (next_state);
      827 
      828 perform_state (1):
      829 		if return_code = rcode_DNAME_REC
      830 		then do;				/* a data name */
      831 						/*[4.4-1]*/
      832 			if ^rw_initterm & ^rw_generate
      833 			then next_state = 2;
      834 			rw_switch = "0"b;		/* Turn off the switch so that if a numeric literal is the next
      835*					   record, it is treated like a numeric literal, and not like
      836*					   a numeric paragraph name. */
      837 perform_write_dname:
      838 			save_line = ntptr -> data_name.line;
      839 			save_column = ntptr -> data_name.column;
      840 			ntptr -> data_name.line = stackbegptr -> auser_word.line;
      841 			ntptr -> data_name.column = stackbegptr -> auser_word.column;
      842 						/*[4.0-5]*/
      843 			call swfput2 (ntptr);
      844 			ntptr -> data_name.line = save_line;
      845 			ntptr -> data_name.column = save_column;
      846 						/*[4.4-1]*/
      847 			if rw_initterm | rw_generate
      848 			then do;
      849 				rw_switch = "1"b;
      850 				go to perform_scan;
      851 			     end;
      852 			go to perform_scan;
      853 		     end;
      854 		else if return_code = rcode_ERROR_DETECTED
      855 		then do;				/* Error detected by repl3_scan. */
      856 			next_state = 2;
      857 			go to perform_scan;
      858 		     end;
      859 		else do;				/* any other return code */
      860 			call perform_recover (status, recovered_to_thru);
      861 			if status_right ^= "0"b
      862 			then go to rend;
      863 			if recovered_to_thru
      864 			then do;			/* Recovered to "THRU". */
      865 				next_state = 3;
      866 				go to perform_write;
      867 			     end;
      868 			else go to perform_exit;
      869 		     end;
      870 perform_state (2):
      871 		if return_code = rcode_RESWORD_REC & ptr2 -> reserved_word.key = 166
      872 						/* "THRU" */
      873 		then do;
      874 			next_state = 3;
      875 			rw_switch = "1"b;		/* Turn on this switch so that if a numeric literal is the
      876*					   next record, the numeric literal will be treated as a
      877*					   numeric paragraph name. */
      878 			go to perform_write;
      879 		     end;
      880 		else if return_code = rcode_ERROR_DETECTED
      881 		then do;				/* Error detected by repl3_scan. */
      882 			next_state = 4;
      883 			go to perform_scan;
      884 		     end;
      885 		else go to perform_exit;		/* any other type record */
      886 perform_state (3):
      887 		if return_code = rcode_DNAME_REC
      888 		then do;				/* a data name */
      889 			next_state = 4;
      890 			rw_switch = "0"b;		/* Turn off the switch that tells repl3_scan to process
      891*					   numeric literals as numeric paragraph names. */
      892 			go to perform_write_dname;
      893 		     end;
      894 		else if return_code = rcode_ERROR_DETECTED
      895 		then do;				/* Error detected by repl3_scan. */
      896 			next_state = 4;
      897 			rw_switch = "0"b;
      898 			go to perform_scan;
      899 		     end;
      900 		else go to perform_exit;		/* any other type record */
      901 perform_state (4):
      902 		;				/*  EMPTY STATEMENT  */
      903 
      904 perform_exit:
      905 		rw_perform = "0"b;
      906 		rw_switch = "0"b;
      907 		if return_code = rcode_DNAME_REC
      908 		then do;
      909 			next_state = 4;
      910 			go to perform_write_dname;
      911 		     end;
      912 		else go to rloop1;			/* Rescan the current token. */
      913 	     end;					/* Processing "PERFORM". */
      914 
      915 /* At this point, a data name has been successfully processed and the following conditions are true:
      916*		1. ntptr points to the name table entry of the data name.
      917*		2. The data name stack has already been unloaded.
      918*		3. The record currently in the read buffer is the record following the data name. */
      919 
      920 	if ntptr -> data_name.type = 11 & expand_condition_names
      921 	then do;					/* process condition-name */
      922 		cname_size = ntptr -> data_name.size;
      923 		cname_ptr = ntptr;			/* save ptr to the condition name */
      924 cvar_loop:					/* find the condition variable */
      925 		ntptr = ntptr -> data_name.prev_rec;
      926 		if ntptr -> data_name.type = 11
      927 		then go to cvar_loop;
      928 		else cvar_ptr = ntptr;		/* save ptr to the condition variable */
      929 		cvar_size = ntptr -> data_name.size;	/* save size of the condition variable */
      930 						/* We drop thru to here on the final iteration when the condition-name must be expanded
      931*		   into a CONDITION which references the CONDITIONAL VARIABLE. */
      932 
      933 		cobol_ss_stack.no_entries = 0;	/* MUST set to zero. Repl3_expand interprets
      934*						   non-zero value to mean there is a subscript. */
      935 		if user_word.type = 1
      936 		then if ptr2 -> reserved_word.key = reschar_LPARENS
      937 		     then do;			/* process SUBSCRIPT */
      938 			     call process_subscript ("1"b);
      939 			     if subscript_stack_overflow | ss_recovered
      940 			     then go to rloop1;
      941 			end;
      942 
      943 /* Expand the CONDITION NAME to the CONDITIONAL RELATION. */
      944 		ss_stack_ptr = addr (cobol_ss_stack);
      945 		cobol_ss_stack.dummy_ptr = addr (ss_ptrtable);
      946 
      947 /* Insert "(" & ")" for PDSYN. */
      948 		res_word_of.key = reschar_LPARENS;
      949 		call swfput1 (addr (res_word_of));
      950 		call cobol_repl3_expand (cname_ptr, cvar_ptr, ss_stack_ptr, stackbegptr -> auser_word.line,
      951 		     stackbegptr -> auser_word.column + stackbegptr -> auser_word.length);
      952 		res_word_of.key = reschar_RPARENS;
      953 		call swfput1 (addr (res_word_of));
      954 		res_word_of.key = reswd_OF;		/* restore key value of OF */
      955 
      956 		if fixed_common.comp_level < "3"	/*[3.0-2]*/
      957 		then do;
      958 			P1 = ptr2;		/*[3.0-2]*/
      959 			ptr2 = P2;		/*[3.0-2]*/
      960 						/*[4.4-2]*/
      961 			call lev_diag (14, ptr2);	/*[3.0-2]*/
      962 			ptr2 = P1;		/*[3.0-2]*/
      963 		     end;				/*[3.0-2]*/
      964 
      965 		go to rloop1;
      966 	     end;					/* process condition-name */
      967 
      968 	if ntptr -> data_name.type = 17 & expand_condition_names
      969 	then /*-07/01/76-*/
      970 	     if ntptr -> mnemonic_name.class.switch_condition
      971 	     then do;				/* process conditional mnemonic-name */
      972 		     res_word_of.key = reschar_LPARENS;
      973 		     call swfput1 (addr (res_word_of));
      974 		     call cobol_repl3_expand (ntptr, null (), null (), stackbegptr -> auser_word.line,
      975 			stackbegptr -> auser_word.column + stackbegptr -> auser_word.length);
      976 		     res_word_of.key = reschar_RPARENS;
      977 		     call swfput1 (addr (res_word_of));
      978 		     res_word_of.key = reswd_OF;	/* restore to original value */
      979 		     go to rloop1;
      980 		end;
      981 
      982 /* Write the name table entry to the output file. */
      983 
      984 	save_line = ntptr -> data_name.line;
      985 	save_column = ntptr -> data_name.column;
      986 	ntptr -> data_name.line = stackbegptr -> auser_word.line;
      987 	ntptr -> data_name.column = stackbegptr -> auser_word.column;
      988 						/*[4.0-5]*/
      989 	call swfput2 (ntptr);
      990 	ntptr -> data_name.line = save_line;		/* Restore correct line and column to name table buffer entry. */
      991 	ntptr -> data_name.column = save_column;
      992 
      993 	if rw_sort_etc & (ntptr -> data_name.type = 12 | ntptr -> data_name.type = 16)
      994 	then do;					/* We have just written the record for a FILE or SORT FILE, follow this
      995*			   with the token for the 1st file record immediately following it in the
      996*			   name table, but change the file record length to reflect the largest
      997*			   record size (variable length records). */
      998 
      999 		ntptr = addrel (ntptr, divide (ntptr -> data_name.size + 11, 8, 17, 0) * 2);
     1000 		save_line = ntptr -> data_name.line;
     1001 		ntptr -> data_name.line = stackbegptr -> auser_word.line;
     1002 		save_length = ntptr -> data_name.item_length;
     1003 		call cobol_vdwf_dget (cobol_cmfp, status, ft_ptr, recsize2,
     1004 		     filedescr_offsets (ntptr -> data_name.file_num));
     1005 		ntptr -> data_name.item_length = file_table.max_cra_size;
     1006 						/*[4.0-5]*/
     1007 		call swfput2 (ntptr);
     1008 		ntptr -> data_name.line = save_line;
     1009 		ntptr -> data_name.item_length = save_length;
     1010 	     end;
     1011 
     1012 	if rw_corresponding | rw_initialize
     1013 	then do;					/* Output subordinate entries for CORRESPONDING or INITIALIZE. */
     1014 
     1015 		if ntptr -> data_name.saved
     1016 		then do;				/* This name table entry has been in memory before. */
     1017 			startlevel = ntptr -> data_name.level;
     1018 read_more:
     1019 			call swfget;		/* Read next record from input file. */
     1020 			if user_word.type ^= 26
     1021 			then do;			/* Write the record to the output file. */
     1022 				startlevel = ptr2 -> data_name.level;
     1023 				call swfput;
     1024 				go to read_more;
     1025 			     end;
     1026 
     1027 /* The last record read was a type 26 record. All of the data-name records placed
     1028*			   onto the input file by previous iterations of replacement have been written
     1029*			   onto the output file. Now process the record following the type 26 record. */
     1030 
     1031 			call swfget;
     1032 			if startlevel ^= ntptr -> data_name.level
     1033 			then do;			/* Search linearly thru the name table for the 1st entry that
     1034*					   has the same level number as the last entry read. */
     1035 
     1036 srchloop:
     1037 				ntptr = addrel (ntptr, divide (ntptr -> data_name.size + 11, 8, 17, 0) * 2);
     1038 				if startlevel ^= ntptr -> data_name.level
     1039 				then go to srchloop;
     1040 			     end;
     1041 			if ntptr -> data_name.level ^= 1
     1042 			then startlevel = ntptr -> data_name.level - 1;
     1043 			else startlevel = 1;
     1044 			lev_from_srchloop = "1"b;
     1045 		     end;
     1046 
     1047 /* Ntptr points to the name table entry just written onto the output file. 
     1048*		   We now write all of that entry's subordinate items. */
     1049 
     1050 		if ntptr -> data_name.level <= 49
     1051 		then do;				/* Current qualified name not a condition-name. */
     1052 			if lev_from_srchloop
     1053 			then lev_from_srchloop = "0"b;/* Already have startlevel. */
     1054 			else startlevel = ntptr -> data_name.level;
     1055 						/* Get startlevel from current entry. */
     1056 			continue = "1"b;
     1057 			do while (continue);
     1058 			     ntptr = addrel (ntptr, divide (ntptr -> data_name.size + 11, 8, 17, 0) * 2);
     1059 			     if ntptr = ntendptr
     1060 			     then continue = "0"b;	/* end of name table */
     1061 			     else if ntptr -> data_name.type ^= 9 & ntptr -> data_name.type ^= 10
     1062 				& ntptr -> data_name.type ^= 11
     1063 						/* condition name */
     1064 			     then continue = "0"b;
     1065 			     else do;
     1066 				     tlevel = ntptr -> data_name.level;
     1067 				     if tlevel > startlevel & tlevel ^= 77
     1068 				     then do;	/* Write entry out if not a level 88. */
     1069 					     if tlevel ^> 50 & ^ntptr -> data_name.filler_item
     1070 					     then do;
     1071 						     ntptr -> data_name.line = stackbegptr -> auser_word.line;
     1072 						     ntptr -> data_name.column =
     1073 							stackbegptr -> auser_word.column;
     1074 						/*[4.0-5]*/
     1075 						     call swfput2 (ntptr);
     1076 						end;
     1077 					end;
     1078 				     else continue = "0"b;
     1079 				end;
     1080 			end;
     1081 			if user_word.type = 1	/* reserved word */
     1082 			then if ptr2 -> reserved_word.key = 187
     1083 						/* "(" */
     1084 			     then call process_subscript ("0"b);
     1085 		     end;
     1086 
     1087 /* All subordinate entries have been written. Now write the type 26 token. */
     1088 
     1089 		t26_token.line = stackbegptr -> auser_word.line;
     1090 		t26_token.column = stackbegptr -> auser_word.column;
     1091 		call swfput1 (t26_ptr);
     1092 	     end;					/* Output subordinate entries for CORRESPONDING or INITIALIZE. */
     1093 
     1094 	go to rloop1;
     1095 
     1096 repl3_scan:
     1097      proc (status, return_code);
     1098 
     1099 dcl	status		bit (32);
     1100 dcl	return_code	fixed bin (15);
     1101 dcl	1 status_word	based (st_ptr),
     1102 	  2 status_left	bit (16),
     1103 	  2 status_right	bit (16);
     1104 dcl	st_ptr		ptr;
     1105 
     1106 	st_ptr = addr (status);			/*[4.0-4]*/
     1107 	num_literal = "0"b;
     1108 	if user_word.type > 8
     1109 	then do;					/* Check for type 24 token. */
     1110 		if user_word.type = 25
     1111 		then type25_flag = "1"b;		/* Set indicator for DDALLOC Append Item. */
     1112 		go to put;
     1113 	     end;
     1114 	go to replab (user_word.type);
     1115 
     1116 
     1117 /*************************************/
     1118 replab (1):					/* RESERVED WORD */
     1119 	if ptr2 -> reserved_word.key = 49 /* sort */ | ptr2 -> reserved_word.key = 112 /* giving */
     1120 	     | ptr2 -> reserved_word.key = 176		/* using */
     1121 	then rw_sort_etc = "1"b;
     1122 	else rw_sort_etc = "0"b;
     1123 
     1124 	if rw_corresponding
     1125 	then do;
     1126 		s = ptr2 -> reserved_word.key;
     1127 		if s ^= 182 /* "+" */ & s ^= 183 /* "-" */ & s ^= 187 /* "(" */ & s ^= 188 /* ")" */
     1128 		     & s ^= 170 /* "TO" */ & s ^= 111	/* "FROM" */
     1129 		then rw_corresponding = "0"b;
     1130 
     1131 	     end;
     1132 	if rw_initialize
     1133 	then do;
     1134 		s = ptr2 -> reserved_word.key;
     1135 		if s ^= 182 /* "+" */ & s ^= 183 /* "-" */ & s ^= 187 /* "(" */ & s ^= 188
     1136 						/* ")" */
     1137 		then do;
     1138 			rw_initialize = "0"b;
     1139 			call swfput1 (t26_ptr);	/* Write type 26 token to terminate INITIALIZE string. */
     1140 		     end;
     1141 	     end;
     1142 	if ptr2 -> reserved_word.key = 47 /* "IF" */ | ptr2 -> reserved_word.key = 173 /* "UNTIL" */
     1143 	     | ptr2 -> reserved_word.key = 77 /* "AND" */ | ptr2 -> reserved_word.key = 178
     1144 						/* "WHEN" */
     1145 	then expand_condition_names = "1"b;
     1146 	else if ptr2 -> reserved_word.terminator
     1147 	then expand_condition_names = "0"b;		/* statement terminator (other than "IF") */
     1148 	if ptr2 -> reserved_word.key ^= 170		/* "TO" - go to numeric paragraph needs switch on */
     1149 	then if ptr2 -> reserved_word.key ^= 144	/* "PROCEED" */
     1150 	     then if ptr2 -> reserved_word.key ^= 118	/* "IS" , "ARE" */
     1151 		then if ptr2 -> reserved_word.key ^= 166/* THRU */
     1152 		     then rw_switch = false;		/* rw_switch="1"b means the next token is expected to be
     1153*						   a parname - interpret type 2 tokens as such */
     1154 	if ptr2 -> reserved_word.key = 107 /* "EXCEPTION" */ | ptr2 -> reserved_word.key = 3
     1155 						/* "ERROR" */
     1156 	then rw_exception = "1"b;
     1157 
     1158 	go to rw (fixed (ptr2 -> reserved_word.repl_jump_ind, 15));
     1159 
     1160 rw (0):						/* Nothing required of REPLACEMENT. */
     1161 						/*[4.0-5]*/
     1162 	if ptr2 -> reserved_word.key = 189
     1163 	then rw_debugging = "0"b;			/* . */
     1164 	go to put1;
     1165 rw (1):						/* Nothing required of REPLACEMENT. */
     1166 	go to put1;
     1167 rw (2):						/* Reserved word which numeric paragraph name may follow. */
     1168 	rw_switch = true;
     1169 	go to put1;
     1170 
     1171 rw (3):						/* Reserved word which only non-numeric data names may follow. */
     1172 	rw_switch = false;
     1173 	go to put1;
     1174 
     1175 rw (4):						/* Reserved word "INITIALIZE" */
     1176 	rw_initialize = "1"b;
     1177 	go to put1;
     1178 rw (5):						/* Reserved word "CORRESPONDING" */
     1179 	rw_corresponding = "1"b;
     1180 	go to put1;
     1181 rw (6):						/* Reserved word "DEBUGGING" */
     1182 						/*[4.0-5]*/
     1183 	rw_debugging = "1"b;
     1184 	go to put1;
     1185 
     1186 rw (7):						/* One of the following reserved words:
     1187*				   DEBUG-CONTENTS, DEBUG-ITEM, DEBUG-LINE, DEBUG-NAME,
     1188*				   DEBUG-SUB-1, DEBUG-SUB-2, DEBUG-SUB-3,
     1189*				   LINAGE-COUNTER, LINE-COUNTER, PAGE-COUNTER, TALLY. */
     1190 	special_usrwd.line = ptr2 -> reserved_word.line;
     1191 	special_usrwd.column = ptr2 -> reserved_word.column;
     1192 	s = ptr2 -> reserved_word.key;
     1193 
     1194 /*[4.4-2]*/
     1195 	if fixed_common.comp_level < "3"
     1196 	then call lev_diag (42, ptr2);
     1197 
     1198 	adiag.number = 0;				/* none yet */
     1199 	linage_counter_type9.line = ptr2 -> reserved_word.line;
     1200 	linage_counter_type9.column = ptr2 -> reserved_word.column;
     1201 	linage_counter_type9.seg = 0;
     1202 	adiag.line = user_word.line;
     1203 	adiag.column = user_word.column;
     1204 	call swfget;
     1205 	if user_word.type = 1 & (ptr2 -> reserved_word.key = reswd_IN | ptr2 -> reserved_word.key = reswd_OF)
     1206 	then do;
     1207 		return_code = rcode_SCAN_NEXT;
     1208 		call swfget;
     1209 		if user_word.type ^= 8
     1210 		then adiag.number = fatal_INVALID_QUALIFIER;
     1211 		else do;
     1212 			adiag.line = user_word.line;
     1213 			adiag.column = user_word.column;
     1214 			counter = 1;
     1215 			ptrtable (1) = ptr2;
     1216 			call cobol_usrwd (addr (ptrtable (1)), counter, string_ptr, 0, ntendptr, "0"b, was_found,
     1217 			     not_found, diag_no, ntptr2);
     1218 			if not_found
     1219 			then adiag.number = fatal_FILE_NAME_EXPECTED;
     1220 			else if ^was_found
     1221 			then adiag.number = diag_no;
     1222 			else do;
     1223 				if ntptr2 -> fd_token.type = 12
     1224 				then do;
     1225 					call cobol_read_ft_ (ntptr2 -> fd_token.file_no, ft_ptr);
     1226 					if file_table.linage
     1227 					then linage_counter_type9.seg = file_table.fsb.seg;
     1228 					else adiag.number = fatal_NO_LINAGE_FOR_THIS_FILE;
     1229 				     end;
     1230 				else adiag.number = fatal_FILE_NAME_EXPECTED;
     1231 			     end;
     1232 		     end;
     1233 	     end;					/* qualifier specified */
     1234 	else do;					/* there must be only one file with linage then */
     1235 		return_code = rcode_SCAN_CURRENT;
     1236 		do i = 1 to fixed_common.file_count;
     1237 		     call cobol_read_ft_ (i, ft_ptr);
     1238 		     if file_table.linage
     1239 		     then do;
     1240 			     if linage_counter_type9.seg ^= 0
     1241 			     then do;
     1242 				     adiag.number = fatal_AMBIGUOUS_LINAGE_REF;
     1243 				     i = fixed_common.file_count;
     1244 				end;
     1245 			     else linage_counter_type9.seg = file_table.fsb.seg;
     1246 			end;
     1247 		end;
     1248 		if linage_counter_type9.seg = 0
     1249 		then adiag.number = fatal_NO_LINAGE_FOR_ANY_FILE;
     1250 	     end;					/* no qualifier specified */
     1251 	call swfput1 (addr (linage_counter_type9));
     1252 	if adiag.number ^= 0
     1253 	then call swfput1 (addr (adiag));
     1254 	return;					/*		     end;
     1255*/*	else	if s = 565
     1256*/*		then do;		/* LINE-COUNTER */
     1257 						/*			special_usrwd.length = 12;
     1258*/*			special_usrwd.name = cline_counter;
     1259*/*		    end;
     1260*/*	else	if s = 578
     1261*/*		then do;		/* PAGE-COUNTER */
     1262 						/*			special_usrwd.length = 12;
     1263*/*			special_usrwd.name = cpage_counter;
     1264*/*		    end;
     1265*/*	else	if s = 440
     1266*/*		then do;		/* SYSTEM-STATUS */
     1267 						/*			special_usrwd.length = 13;
     1268*/*			special_usrwd.name = csystem_status;
     1269*/*		    end;
     1270*/*	else do;			/* Assume TALLY. */
     1271 						/*		special_usrwd.length = 5;
     1272*/*		special_usrwd.name = ctally;
     1273*/*	    end;
     1274*/*	special_usrwd.size = size_TOKEN(8) + special_usrwd.length;
     1275*/*	recsize2 = special_usrwd.size;
     1276*/*	ptr2 = addr(special_usrwd);
     1277*/*	go to replab(8);		/* Process as a user word. */
     1278 						/* RFI */
     1279 
     1280 rw (9):						/* Reserved word "SEARCH" */
     1281 	rw_search = "1"b;
     1282 	go to put1;
     1283 
     1284 rw (8):
     1285 	rw_initterm, rw_generate = "0"b;		/* Reserved words PERFORM, INITIATE, TERMINATE, GENERATE */
     1286 	rw_switch = "1"b;
     1287 	rw_perform = "1"b;				/*[4.4-1]*/
     1288 	if ptr2 -> reserved_word.key = reswd_INITIATE | ptr2 -> reserved_word.key = reswd_TERMINATE
     1289 						/*[4.4-1]*/
     1290 	then rw_initterm = "1"b;
     1291 	else if ptr2 -> reserved_word.key = reswd_GENERATE
     1292 	then rw_generate = "1"b;
     1293 	go to put1;
     1294 rw (10):						/* Reserved words SEQUENCE, UPON, FROM, SET */
     1295 	rw_key = ptr2 -> reserved_word.key;
     1296 	call swfput;
     1297 	call swfget;
     1298 	return_code = rcode_SCAN_CURRENT;
     1299 	if rw_key = reswd_UPON
     1300 	then do;					/* DISPLAY UPON {SYSOUT | CONSOLE} */
     1301 		if user_word.type = 8
     1302 		then if substr (user_word.word, 1, user_word.length) = "console"
     1303 			| substr (user_word.word, 1, user_word.length) = "sysout"
     1304 		     then do;
     1305 			     counter = 1;
     1306 			     ptrtable (1) = ptr2;
     1307 			     call cobol_usrwd (addr (ptrtable (1)), counter, string_ptr, 0, ntendptr, "0"b,
     1308 				was_found, not_found, diag_no, ntptr2);
     1309 			     if not_found
     1310 			     then do;
     1311 				     call issue_obsolete_warning;
     1312 				     string (type17.class) = "000100"b;
     1313 						/* display device */
     1314 				     if user_word.length = 6
     1315 				     then type17.iw_key = 10;
     1316 						/* SYSOUT */
     1317 				     else type17.iw_key = 11;
     1318 						/* CONSOLE */
     1319 				     call put_type17;
     1320 				end;
     1321 			end;
     1322 	     end;
     1323 
     1324 	else if rw_key = reswd_FROM
     1325 	then do;					/* ACCEPT FROM {SYSIN | CONSOLE} */
     1326 		rw_switch = "0"b;			/* as with rw(3) */
     1327 		if user_word.type = 8
     1328 		then if substr (user_word.word, 1, user_word.length) = "console"
     1329 			| substr (user_word.word, 1, user_word.length) = "sysin"
     1330 		     then do;
     1331 			     counter = 1;
     1332 			     ptrtable (1) = ptr2;
     1333 			     call cobol_usrwd (addr (ptrtable (1)), counter, string_ptr, 0, ntendptr, "0"b,
     1334 				was_found, not_found, diag_no, ntptr2);
     1335 			     if not_found
     1336 			     then do;
     1337 				     call issue_obsolete_warning;
     1338 				     string (type17.class) = "001000"b;
     1339 						/* accept device */
     1340 				     if user_word.length = 5
     1341 				     then type17.iw_key = 9;
     1342 						/* SYSIN */
     1343 				     else type17.iw_key = 11;
     1344 						/* CONSOLE */
     1345 				     call put_type17;
     1346 				end;
     1347 			end;
     1348 	     end;
     1349 
     1350 	else if rw_key = reswd_SET
     1351 	then do;					/* SET SWITCH-n */
     1352 		rw_switch = "0"b;			/* as with rw(3) */
     1353 		if user_word.type = 8
     1354 		then if user_word.length = 8 & substr (user_word.word, 1, 7) = "switch-"
     1355 		     then do;
     1356 			     temp_char = substr (user_word.word, 8, 1);
     1357 			     if temp_char >= "1" & temp_char <= "8"
     1358 			     then do;
     1359 				     counter = 1;
     1360 				     ptrtable (1) = ptr2;
     1361 				     call cobol_usrwd (addr (ptrtable (1)), counter, string_ptr, 0, ntendptr,
     1362 					"0"b, was_found, not_found, diag_no, ntptr2);
     1363 				     if not_found
     1364 				     then do;
     1365 					     call issue_obsolete_warning;
     1366 					     string (type17.class) = "010000"b;
     1367 						/* switch_name */
     1368 					     type17.iw_key = fixed (temp_char);
     1369 					     call put_type17;
     1370 					end;
     1371 				end;
     1372 			end;
     1373 	     end;
     1374 
     1375 	else if rw_key = reswd_SEQUENCE
     1376 	then do;					/* {SORT | MERGE} ... SEQUENCE {IS} {ASCII | EBCDIC} */
     1377 		if user_word.type = 1
     1378 		then if ptr2 -> reserved_word.key = reswd_IS
     1379 		     then do;
     1380 			     call swfput;
     1381 			     call swfget;
     1382 			end;
     1383 		if user_word.type = 8
     1384 		then if substr (user_word.word, 1, user_word.length) = "ascii"
     1385 			| substr (user_word.word, 1, user_word.length) = "ebcdic"
     1386 		     then do;
     1387 			     counter = 1;
     1388 			     ptrtable (1) = ptr2;
     1389 			     call cobol_usrwd (addr (ptrtable (1)), counter, string_ptr, 0, ntendptr, "0"b,
     1390 				was_found, not_found, diag_no, ntptr2);
     1391 			     if not_found
     1392 			     then do;
     1393 				     call issue_obsolete_warning;
     1394 				     type40.line, type40.def_line = adiag.line;
     1395 				     type40.column = adiag.column;
     1396 				     type40.type = 40;
     1397 				     type40.name_size = user_word.length;
     1398 				     type40.name = substr (user_word.word, 1, user_word.length);
     1399 				     type40.size = size_TOKEN (40) + type40.name_size;
     1400 				     if user_word.length = 5
     1401 				     then type40.iw_key = 11;
     1402 						/* ASCII */
     1403 				     else call cobol_set_type40_$ebcdic (addr (type40));
     1404 						/* EBCDIC */
     1405 						/*-07/26/76-*/
     1406 				     call swfput1 (addr (type40));
     1407 				     return_code = rcode_SCAN_NEXT;
     1408 				end;
     1409 			end;
     1410 	     end;
     1411 
     1412 	return;
     1413 
     1414 
     1415 put_type17:
     1416      proc;
     1417 	type17.line, type17.def_line = user_word.line;
     1418 	type17.column = user_word.column;
     1419 	type17.name_size = user_word.length;
     1420 	type17.name = substr (user_word.word, 1, user_word.length);
     1421 	type17.size = size_TOKEN (17) + type17.name_size;
     1422 	call swfput1 (addr (type17));
     1423 	return_code = rcode_SCAN_NEXT;
     1424 	return;
     1425      end put_type17;
     1426 
     1427 issue_obsolete_warning:
     1428      proc;
     1429 	adiag.line = user_word.line;
     1430 	adiag.column = user_word.column;
     1431 	adiag.number = warn_OBSOLETE_MNEMONIC_NAME;
     1432 	call cobol_c_list (addr (adiag));
     1433 	if cobol_$compile_count ^= replb_compile_count
     1434 	then do;					/* once per compilation */
     1435 		adiag.number = obs_SPECIAL_NAMES_NOTE;
     1436 		call cobol_c_list (addr (adiag));
     1437 
     1438 /*[4.4-2]*/
     1439 		if fixed_common.comp_level < "5"
     1440 		then call lev_diag (125, ptr2);
     1441 
     1442 		replb_compile_count = cobol_$compile_count;
     1443 	     end;
     1444 	adiag.number = warn_SPECIAL_NAMES_RECOVERY;
     1445 	adiag.size = 40;
     1446 	substr (adiag.info, 1, 1) = "1"b;
     1447 	adiag.image_size = user_word.length;
     1448 	adiag.image = substr (user_word.word, 1, user_word.length);
     1449 	call cobol_c_list (addr (adiag));
     1450 	adiag.size = 28;
     1451 	substr (adiag.info, 1, 1) = "0"b;
     1452 	adiag.image_size = 0;
     1453 	return;
     1454      end issue_obsolete_warning;			/*-07/07/76-*/
     1455 
     1456 
     1457 /*************************************/
     1458 replab (2):					/* numeric literal */
     1459 	if rw_switch
     1460 	then if ptr2 -> numeric_lit.sign = " " & ptr2 -> numeric_lit.exp_sign = " " & ptr2 -> numeric_lit.integral
     1461 	     then do;				/* unsigned integer with no exponent */
     1462 		     ptr2_1 = ptr2;
     1463 		     num_literal = "1"b;
     1464 		     counter = 0;
     1465 		     topstack = 1;
     1466 		     call push1;
     1467 		     go to usw1;
     1468 		end;
     1469 	go to put;
     1470 replab (3):
     1471 	;
     1472 replab (4):
     1473 	;
     1474 replab (5):
     1475 	;
     1476 replab (6):					/* alphanumeric literal, picture string, message, source card */
     1477 	go to put;
     1478 replab (7):					/* section or paragraph name definition */
     1479 	if type25_flag
     1480 	then go to put;				/* Simply write out DDALLOC appended type 7 */
     1481 	if ^ptr2 -> proc_def.searched
     1482 	then do;					/* This section or paragraph name not replaced yet. */
     1483 		special_usrwd.column = ptr2 -> proc_def.proc_num;
     1484 		special_usrwd.length = ptr2 -> proc_def.name_size;
     1485 		substr (special_usrwd.name, 1, special_usrwd.length) =
     1486 		     substr (ptr2 -> proc_def.name, 1, ptr2 -> proc_def.name_size);
     1487 		save_ptr2 = ptr2;
     1488 		ptr2 = addr (special_usrwd);
     1489 
     1490 /* Try to find this section or paragraph name in the name table buffer. */
     1491 
     1492 		call cobol_find_secdef (ptr2, sectno, string_ptr, ntptr);
     1493 		if ntptr ^= null ()
     1494 		then do;				/* found the name table buffer entry */
     1495 						/*			ntptr->proc_def.searched = "1"b;  /* Mark as "already replaced". */
     1496 						/*-11/11/76-*/
     1497 			ntptr -> proc_def.type = 7;
     1498 			call swfput1 (ntptr);	/* Write out entry from name table buffer. */
     1499 			ntptr -> proc_def.type = 18;	/* Restore type in name table buffer to 18. */
     1500 			call swfget;		/* Read next record from input file. */
     1501 			return_code = rcode_SCAN_CURRENT;
     1502 						/* Scan current record next. */
     1503 			return;
     1504 		     end;
     1505 		else ptr2 = save_ptr2;		/* Section or paragraph name not found - Restore ptr2. */
     1506 	     end;
     1507 	go to put;
     1508 replab (8):
     1509 	counter = 0;
     1510 	topstack = 1;
     1511 	stackbegptr = addr (stack);
     1512 	name_stack_overflow = "0"b;
     1513 	too_many_qualifiers = "0"b;			/*[4.2-7]*/
     1514 	P2 = ptr2;				/* save loc of user word token */
     1515 uswo:
     1516 	call push;
     1517 usw1:
     1518 	sav_ptr = ptr2;
     1519 	call swfget;
     1520 	qualif = "0"b;				/*[4.4-2]*/
     1521 usw2:
     1522 	if ptr2 -> reserved_word.type = 1 /*[4.4-2]*/
     1523 	     & (ptr2 -> reserved_word.key = 133 | ptr2 -> reserved_word.key = 101)
     1524 						/* "OF" or "IN" */
     1525 	then do;					/*[4.0-4]*/
     1526 		num_literal = "0"b;
     1527 again:
     1528 		call swfget;
     1529 		if user_word.type = 8
     1530 		then do;				/* Qualification test for leveling*/
     1531 			if fixed_common.comp_level < "3"
     1532 			then qualif = "1"b;		/*[4.4-1]*/
     1533 			call push;
     1534 			call swfget;
     1535 			go to usw2;
     1536 		     end;
     1537 		if user_word.type = 2 & rw_switch
     1538 		then do;
     1539 			if ptr2 -> numeric_lit.sign = " " & ptr2 -> numeric_lit.exp_sign = " "
     1540 			     & ptr2 -> numeric_lit.integral
     1541 			then do;			/* unsigned integer with no exponent */
     1542 						/*[4.4-2]*/
     1543 				call push1;
     1544 				call swfget;	/*[4.4-2]*/
     1545 				go to usw2;
     1546 			     end;
     1547 		     end;
     1548 		if ptr2 -> reserved_word.type = 1 & ptr2 -> reserved_word.key = 531
     1549 						/* DEBUG-ITEM */
     1550 		then go to rw (7);			/* special processing for reserved word "DEBUG-ITEM" */
     1551 
     1552 /* The current record follows "OF" or "IN", but is not a type 8 token. */
     1553 
     1554 diag1:
     1555 		adiag.number = 10;
     1556 		adiag.line = user_word.line;
     1557 		adiag.column = user_word.column;
     1558 		ptr3 = addr (adiag);
     1559 		call swfput1 (ptr3);		/* Write out the diagnostic record. */
     1560 		return_code = rcode_ERROR_DETECTED;
     1561 		return;
     1562 	     end;
     1563 
     1564 	if name_stack_overflow | too_many_qualifiers
     1565 	then do;
     1566 		return_code = rcode_ERROR_DETECTED;
     1567 		return;
     1568 	     end;
     1569 
     1570 /*[4.0-4]*/
     1571 	if ptr2 -> reserved_word.type = 1 & ptr2 -> reserved_word.key = 168
     1572 						/* times */
     1573 						/*[4.0-4]*/
     1574 	then do;					/*[4.0-4]*/
     1575 		rw_switch = "0"b;			/*[4.0-4]*/
     1576 		if num_literal			/*[4.0-4]*/
     1577 		then do;				/*[4.0-4]*/
     1578 			num_literal = "0"b;		/*[4.0-4]*/
     1579 			ntptr = ptr2_1;		/*[4.0-4]*/
     1580 			go to found1;		/*[4.0-4]*/
     1581 		     end;				/*[4.0-4]*/
     1582 	     end;
     1583 
     1584 	call cobol_usrwd (addr (ptrtable (1)), counter, string_ptr, sectno, ntendptr, rw_switch, was_found, not_found,
     1585 	     diag_no, ntptr2);
     1586 
     1587 	if was_found
     1588 	then go to found;
     1589 	if not_found				/*[4.0-5]*/
     1590 	then if rw_debugging			/*[4.0-5]*/
     1591 	     then do;
     1592 		     call cobol_usrwd (addr (ptrtable (1)), counter, string_ptr, sectno,
     1593 						/*[4.0-5]*/
     1594 			ntendptr, ^rw_switch,	/*[4.0-5]*/
     1595 			was_found, not_found, diag_no, ntptr2);
     1596 
     1597 /*[4.0-5]*/
     1598 		     if was_found
     1599 		     then go to found;		/*[4.0-5]*/
     1600 		     if not_found
     1601 		     then go to notfound;		/*[4.0-5]*/
     1602 		end;
     1603 
     1604 /*[4.0-5]*/
     1605 	     else go to notfound;
     1606 
     1607 	adiag.number = diag_no;
     1608 	call issue_diag;
     1609 	return_code = rcode_ERROR_DETECTED;
     1610 	return;
     1611 
     1612 notfound:
     1613 	if ^rw_switch
     1614 	then adiag.number = fatal_DATANAME_NOT_DECLARED;
     1615 	else adiag.number = fatal_PROCNAME_NOT_DECLARED;
     1616 	call issue_diag;
     1617 	return_code = rcode_ERROR_DETECTED;
     1618 	return;
     1619 
     1620 put:
     1621 	return_code = rcode_NO_INTEREST;
     1622 	return;
     1623 put1:
     1624 	return_code = rcode_RESWORD_REC;
     1625 	return;
     1626 found:						/*[4.4-2]*/
     1627 	if qualif
     1628 	then call lev_diag (5, sav_ptr);		/*[4.4-2]*/
     1629 	call l66_test;
     1630 
     1631 	ntptr = ntptr2;
     1632 found1:
     1633 	if fixed_common.options.xrn
     1634 	then if auser_word.line > 0
     1635 	     then do;
     1636 		     chain_count = chain_count + 1;
     1637 		     chain_area.ref_line (chain_count) = auser_word.line;
     1638 		     chain_area.next (chain_count) = 0;
     1639 		     xref_ptr = addrel (ntptr, divide (ntptr -> data_name.size + 3, 4, 17, 0));
     1640 		     if xref_chain.last = 0
     1641 		     then xref_chain.first = chain_count;
     1642 		     else chain_area.next (xref_chain.last) = chain_count;
     1643 		     xref_chain.last = chain_count;
     1644 		end;				/**/
     1645 						/*	if ^rw_using
     1646*/*	then call unload;
     1647*/**/
     1648 	return_code = rcode_DNAME_REC;
     1649 	return;
     1650      end repl3_scan;
     1651 
     1652 rend:
     1653 	return;					/* Have just read an End Of File - Exit from REPLB. */
     1654 
     1655 push:
     1656      proc;
     1657 
     1658 	if name_stack_overflow | too_many_qualifiers
     1659 	then return;
     1660 
     1661 	if counter = 50
     1662 	then do;					/* too many qualifiers in this reference */
     1663 		adiag.number = 11;
     1664 		call issue_diag;
     1665 		too_many_qualifiers = "1"b;
     1666 		return;
     1667 	     end;
     1668 	stackptr = addr (temp_stack (topstack));
     1669 	topstack = topstack + recsize2 + 4 - mod (recsize2, 4);
     1670 
     1671 	if topstack > name_stack_size
     1672 	then do;					/* NAME STACK OVERFLOW */
     1673 		adiag.number = 12;
     1674 		call issue_diag;
     1675 		name_stack_overflow = "1"b;
     1676 		return;
     1677 	     end;
     1678 	stackrecord = minpr_record;
     1679 	counter = counter + 1;
     1680 	ptrtable (counter) = stackptr;
     1681 
     1682      end push;
     1683 
     1684 /**/
     1685 /*unload:	proc;
     1686*/*
     1687*/*	if final_iter
     1688*/*	then return;
     1689*/*
     1690*/*	do j = 1 to counter;
     1691*/*		ptr3 = ptrtable(j);
     1692*/*		stackptr = ptrtable(j);
     1693*/*		call swfput1(ptr3);
     1694*/*		if j ^= counter
     1695*/*		then call swfput1(addr(res_word_of));
     1696*/*	end;
     1697*/*	return;
     1698*/*
     1699*/*end unload;
     1700*/**/
     1701 
     1702 swfget:
     1703      proc;
     1704 
     1705 	call cobol_swf_get (cobol_curr_in, status, ptr2, recsize2);
     1706 	if status_right ^= "0"b
     1707 	then go to rend;
     1708 	return;
     1709 
     1710      end swfget;
     1711 
     1712 swfput:
     1713      proc;
     1714 
     1715 	temp_ptr = addrel (cobol_curr_out, shdr.next + 1);
     1716 	call cobol_swf_put (cobol_curr_out, status, ptr2, ptr2 -> data_name.size);
     1717 	if temp_ptr -> data_name.type = 9
     1718 	then temp_ptr -> data_based.offset = binary (rel (ptr2));
     1719 	return;
     1720 
     1721      end swfput;
     1722 
     1723 swfput1:
     1724      proc (out_ptr);
     1725 
     1726 dcl	out_ptr		ptr;
     1727 
     1728 	temp_ptr = addrel (cobol_curr_out, shdr.next + 1);
     1729 	call cobol_swf_put (cobol_curr_out, status, out_ptr, out_ptr -> data_name.size);
     1730 	if temp_ptr -> data_name.type = 9
     1731 	then temp_ptr -> data_based.offset = binary (rel (out_ptr));
     1732 	return;
     1733 
     1734      end swfput1;
     1735 
     1736 swfput2:
     1737      proc (out_ptr);
     1738 
     1739 /*[4.0-5]*/
     1740 /* obtain name as qualified in the	*/
     1741 /*[4.0-5]*/
     1742 /* source program when debugging mode	*/
     1743 /*[4.0-5]*/
     1744 /* used				*/
     1745 
     1746 /*[4.0-5]*/
     1747 declare	out_ptr		ptr;			/*[4.0-5]*/
     1748 declare	sz		fixed bin,
     1749 	p		ptr;
     1750 
     1751 /*[4.0-5]*/
     1752 declare	nt_entry		char (2048);		/*[4.0-5]*/
     1753 declare	nam_tab		char (2048) based;
     1754 
     1755 /*[4.4-3]*/
     1756 	if ^fixed_common.debug | (fixed_common.debug & counter = 1)
     1757 						/*[4.0-5]*/
     1758 	then do;
     1759 		call swfput1 (out_ptr);		/* debugging not used */
     1760 						/*[4.0-5]*/
     1761 		return;				/*[4.0-5]*/
     1762 	     end;
     1763 
     1764 /*[4.0-5]*/
     1765 	p = addr (nt_entry);
     1766 
     1767 /*[4.4-3]*/
     1768 	sz = out_ptr -> data_name.size;		/*[4.4-3]*/
     1769 	substr (nt_entry, 1, sz) = substr (out_ptr -> nam_tab, 1, sz);
     1770 
     1771 /* qualify the data name */
     1772 
     1773 /*[4.4-3]*/
     1774 	substr (addr (p -> data_name.name) -> ch32, 1, 32) =
     1775 	     /*[4.4-3]*/ substr (addr (ptrtable (1) -> user_word.word) -> ch32, 1, 32);
     1776 						/*[4.4-3]*/
     1777 	p -> data_name.name_size = 32;
     1778 
     1779 /*[4.0-5]*/
     1780 	call swfput1 (p);
     1781 
     1782      end;
     1783 
     1784 issue_diag:
     1785      proc;
     1786 
     1787 	adiag.line = stackbegptr -> auser_word.line;
     1788 	adiag.column = stackbegptr -> auser_word.column;
     1789 	ptr3 = addr (adiag);
     1790 	call swfput1 (ptr3);
     1791      end issue_diag;
     1792 
     1793 push1:
     1794      proc;
     1795 
     1796 	if name_stack_overflow | too_many_qualifiers
     1797 	then return;
     1798 
     1799 	if counter = 50
     1800 	then do;					/* too many qualifiers in this reference */
     1801 		adiag.number = 11;
     1802 		call issue_diag;
     1803 		too_many_qualifiers = "1"b;
     1804 		return;
     1805 	     end;
     1806 	stackptr = addr (temp_stack (topstack));
     1807 	if topstack > name_stack_size
     1808 	then do;					/* NAME STACK OVERFLOW */
     1809 		adiag.number = 12;
     1810 		call issue_diag;
     1811 		name_stack_overflow = "1"b;
     1812 		return;
     1813 	     end;
     1814 	auser_word.line = ptr2 -> numeric_lit.line;
     1815 	auser_word.column = ptr2 -> numeric_lit.column;
     1816 	auser_word.type = 8;
     1817 	auser_word.info1 = false;
     1818 	auser_word.info2 = false;
     1819 	auser_word.length = ptr2 -> numeric_lit.places;
     1820 	auser_word.word = ptr2 -> numeric_lit.literal;
     1821 	auser_word.size = 24 + ptr2 -> numeric_lit.places;
     1822 
     1823 	counter = counter + 1;
     1824 	topstack = topstack + auser_word.size + mod (-auser_word.size, 4);
     1825 						/*[3.0-1]*/
     1826 	ptrtable (counter) = stackptr;
     1827 
     1828      end push1;
     1829 
     1830 process_subscript:
     1831      proc (stack);
     1832 
     1833 /* Processes subscripts in cases where speciaal processing is required.
     1834*		   (i.e.:
     1835*			1) expand_condition_names - the subscript tokens are stacked for special
     1836*			   processing by repl3_expand.
     1837*			2) INITIALIZE - the subscript tokens should be written out with no
     1838*			   intervening type 26 tokens.) */
     1839 
     1840 dcl	stack		bit (1);			/* if "1"b, stack tokens in ss_stack, else write to output file. */
     1841 
     1842 	processing_subscript = "1"b;
     1843 	ss_recovered = "0"b;
     1844 	next_state = 1;
     1845 	if stack
     1846 	then do;					/* Initialize ss_stack variables and stack "(" token. */
     1847 		cobol_ss_stack.no_entries = 0;
     1848 		subscript_stack_overflow = "0"b;
     1849 		ss_topstack = 1;
     1850 		call push_special;
     1851 	     end;
     1852 	else call swfput;				/* Write "(" token. */
     1853 ss_read:
     1854 	call swfget;
     1855 ss_scan:
     1856 	call repl3_scan (status, return_code);
     1857 	if return_code = rcode_NO_INTEREST & user_word.type > 4
     1858 	then do;
     1859 		call swfput;			/* Write out current record in read buffer. */
     1860 		if user_word.type = 5
     1861 		then do;				/* diagnostic record */
     1862 			call swfget;
     1863 			go to ss_recover;
     1864 		     end;
     1865 		else go to ss_read;
     1866 	     end;
     1867 	go to ss_state (next_state);
     1868 ss_state (1):
     1869 	if return_code = rcode_NO_INTEREST & user_word.type = 2
     1870 						/* numeric literal */
     1871 	then do;
     1872 		next_state = 1;
     1873 		if stack
     1874 		then call push_special;
     1875 		else call swfput;
     1876 		go to ss_read;
     1877 	     end;
     1878 	else if return_code = rcode_RESWORD_REC
     1879 	then do;					/* a reserved word */
     1880 		if ptr2 -> reserved_word.key = 188	/* ")" */
     1881 		then do;
     1882 			if stack
     1883 			then call push_special;
     1884 			else call swfput;
     1885 			call swfget;
     1886 			go to ss_finish;
     1887 		     end;
     1888 		else if ptr2 -> reserved_word.key = 182 /* "+" */
     1889 		then do;
     1890 			next_state = 4;
     1891 			if stack
     1892 			then call push_special;
     1893 			else call swfput;
     1894 			go to ss_read;
     1895 		     end;
     1896 		else do;				/* Bad component in subscript */
     1897 			adiag.number = 7;
     1898 			go to ss_error;
     1899 		     end;
     1900 	     end;
     1901 	else if return_code = rcode_DNAME_REC
     1902 	then do;					/* a user name */
     1903 		next_state = 2;
     1904 		if stack
     1905 		then call push_name;
     1906 		else do;
     1907 			save_line = ntptr -> data_name.line;
     1908 			save_column = ntptr -> data_name.column;
     1909 			ntptr -> data_name.line = stackbegptr -> auser_word.line;
     1910 			ntptr -> data_name.column = stackbegptr -> auser_word.column;
     1911 						/*[4.0-5]*/
     1912 			call swfput2 (ntptr);
     1913 			ntptr -> data_name.line = save_line;
     1914 			ntptr -> data_name.column = save_column;
     1915 		     end;
     1916 		go to ss_scan;
     1917 	     end;
     1918 	else do;					/* Bad component in subscript */
     1919 		adiag.number = 7;
     1920 		go to ss_error;
     1921 	     end;
     1922 ss_state (2):
     1923 	if return_code = rcode_RESWORD_REC & ptr2 -> reserved_word.key = 183
     1924 						/* "-" */
     1925 	then do;
     1926 		next_state = 3;
     1927 		if stack
     1928 		then call push_special;
     1929 		else call swfput;
     1930 		go to ss_read;
     1931 	     end;
     1932 	else do;
     1933 		next_state = 1;
     1934 		if return_code = rcode_DNAME_REC
     1935 		then if stack
     1936 		     then call push_name;
     1937 		     else do;
     1938 			     save_line = ntptr -> data_name.line;
     1939 			     save_column = ntptr -> data_name.column;
     1940 			     ntptr -> data_name.line = stackbegptr -> auser_word.line;
     1941 			     ntptr -> data_name.column = stackbegptr -> auser_word.column;
     1942 						/*[4.0-5]*/
     1943 			     call swfput2 (ntptr);
     1944 			     ntptr -> data_name.line = save_line;
     1945 			     ntptr -> data_name.column = save_column;
     1946 			end;
     1947 		go to ss_scan;
     1948 	     end;
     1949 ss_state (3):
     1950 	if return_code = rcode_NO_INTEREST & user_word.type = 2
     1951 						/* numeric literal */
     1952 	then do;
     1953 		next_state = 1;
     1954 		if stack
     1955 		then call push_special;
     1956 		else call swfput;
     1957 		go to ss_read;
     1958 	     end;
     1959 	else do;
     1960 		adiag.number = 9;			/* numeric literal expected here */
     1961 		go to ss_error;
     1962 	     end;
     1963 ss_state (4):
     1964 	if return_code = rcode_NO_INTEREST & user_word.type = 2
     1965 						/* numeric literal */
     1966 	then do;
     1967 		next_state = 1;
     1968 		if stack
     1969 		then call push_special;
     1970 		else call swfput;
     1971 		go to ss_read;
     1972 	     end;
     1973 	else if return_code = rcode_DNAME_REC
     1974 	then do;					/* a data name */
     1975 		next_state = 1;
     1976 		if stack
     1977 		then call push_name;
     1978 		else do;
     1979 			save_line = ntptr -> data_name.line;
     1980 			save_column = ntptr -> data_name.column;
     1981 			ntptr -> data_name.line = stackbegptr -> auser_word.line;
     1982 			ntptr -> data_name.column = stackbegptr -> auser_word.column;
     1983 						/*[4.0-5]*/
     1984 			call swfput2 (ntptr);
     1985 			ntptr -> data_name.line = save_line;
     1986 			ntptr -> data_name.column = save_column;
     1987 		     end;
     1988 		go to ss_scan;
     1989 	     end;
     1990 	else do;					/* numeric literal, data-name, or index-name expected here */
     1991 		adiag.number = 8;
     1992 		go to ss_error;
     1993 	     end;
     1994 ss_error:
     1995 	if return_code = rcode_ERROR_DETECTED
     1996 	then go to ss_recover;			/* An error message has already been issued. */
     1997 	if return_code = rcode_DNAME_REC
     1998 	then do;
     1999 		adiag.line = stackbegptr -> auser_word.line;
     2000 		adiag.column = stackbegptr -> auser_word.column;
     2001 	     end;
     2002 	else do;
     2003 		adiag.line = user_word.line;
     2004 		adiag.column = user_word.column;
     2005 	     end;
     2006 	ptr3 = addr (adiag);
     2007 	call swfput1 (ptr3);			/* Write out the diagnostic. */
     2008 ss_recover:					/* Attempt to recover to the 1st statement terminator,
     2009*				   or to a suitable key reserved word. */
     2010 	do while (^ss_recovered);
     2011 	     call repl3_scan (status, return_code);
     2012 	     if return_code = rcode_RESWORD_REC
     2013 	     then do;
     2014 		     if ptr2 -> reserved_word.terminator
     2015 		     then ss_recovered = "1"b;
     2016 		     else do;
     2017 			     rwkey = ptr2 -> reserved_word.key;
     2018 			     if expand_condition_names
     2019 			     then do;
     2020 				     if rwkey = 77 /* "AND" */ | rwkey = 135
     2021 						/* "OR" */
     2022 				     then ss_recovered = "1"b;
     2023 				end;
     2024 			     else if rw_corresponding
     2025 			     then do;
     2026 				     if rwkey = 170 /* "TO" */ | rwkey = 111
     2027 						/* "FROM" */
     2028 				     then ss_recovered = "1"b;
     2029 				end;
     2030 			end;
     2031 		end;
     2032 	     else if return_code = rcode_NO_INTEREST
     2033 	     then if user_word.type = 5
     2034 		then call swfput;			/* Write out diagnostic */
     2035 	     if ^ss_recovered
     2036 	     then call swfget;
     2037 	end;
     2038 ss_finish:
     2039 	processing_subscript = "0"b;
     2040 
     2041      end process_subscript;
     2042 
     2043 push_special:
     2044      proc;
     2045 
     2046 	if subscript_stack_overflow
     2047 	then return;
     2048 
     2049 	ss_stack_ptr = addr (ss_template (ss_topstack));
     2050 	ss_recsize = recsize2;
     2051 	ss_topstack = ss_topstack + ss_recsize + 4 - mod (ss_recsize, 4);
     2052 
     2053 	if ss_topstack > subscript_stack_size
     2054 	then do;					/* SUBSCRIPT STACK OVERFLOW */
     2055 		stackbegptr = ptr2;
     2056 		adiag.number = 13;
     2057 		call issue_diag;
     2058 		subscript_stack_overflow = "1"b;
     2059 		return;
     2060 	     end;
     2061 	cobol_ss_stackrecord = minpr_record;
     2062 	cobol_ss_stack.no_entries = cobol_ss_stack.no_entries + 1;
     2063 	ss_ptrtable (cobol_ss_stack.no_entries) = ss_stack_ptr;
     2064 						/**/
     2065 						/*	if ^final_iter
     2066*/*	then call swfput;
     2067*/**/
     2068      end push_special;
     2069 
     2070 push_name:
     2071      proc;
     2072 
     2073 dcl	ntrecord		char (ss_recsize) based (ntptr);
     2074 
     2075 	if subscript_stack_overflow
     2076 	then return;
     2077 
     2078 	save_line = ntptr -> data_name.line;
     2079 	save_column = ntptr -> data_name.column;
     2080 	ntptr -> data_name.line = stackbegptr -> auser_word.line;
     2081 	ntptr -> data_name.column = stackbegptr -> auser_word.column;
     2082 	ss_recsize = ntptr -> data_name.size;
     2083 	ss_stack_ptr = addr (ss_template (ss_topstack));
     2084 	ss_topstack = ss_topstack + ss_recsize + 4 - mod (ss_recsize, 4);
     2085 
     2086 	if ss_topstack > subscript_stack_size
     2087 	then do;					/* SUBSCRIPT STACK OVERFLOW */
     2088 		stackbegptr = ptr2;
     2089 		adiag.number = 13;
     2090 		call issue_diag;
     2091 		subscript_stack_overflow = "1"b;
     2092 		return;
     2093 	     end;
     2094 	cobol_ss_stackrecord = ntrecord;
     2095 	cobol_ss_stack.no_entries = cobol_ss_stack.no_entries + 1;
     2096 	ss_ptrtable (cobol_ss_stack.no_entries) = ss_stack_ptr;
     2097 	ntptr -> data_name.line = save_line;		/* Restore correct line & column to name table entry. */
     2098 	ntptr -> data_name.column = save_column;
     2099 
     2100      end push_name;
     2101 
     2102 /* RFI */
     2103 
     2104 perform_recover:
     2105      proc (status, recovered_to_thru);
     2106 
     2107 dcl	status		bit (32);
     2108 dcl	recovered_to_thru	bit (1);			/* Set to "1"b by this procedure if a "THRU" is found before
     2109*					   any occurrence of:
     2110*						TIMES, UNTIL, VARYING, or a statement terminator. */
     2111 dcl	1 status_word	based (st_ptr),
     2112 	  2 status_left	bit (16),
     2113 	  2 status_right	bit (16);
     2114 dcl	st_ptr		ptr;
     2115 
     2116 	st_ptr = addr (status);
     2117 	status = "0"b;
     2118 	recovered_to_thru = "0"b;
     2119 recover_analysis:
     2120 	if return_code = rcode_RESWORD_REC
     2121 	then do;					/* a reserved word */
     2122 		if ptr2 -> reserved_word.key = 166	/* "THRU" */
     2123 		then do;
     2124 			recovered_to_thru = "1"b;
     2125 			return;
     2126 		     end;
     2127 		else if ptr2 -> reserved_word.key = 168 /* "TIMES" */
     2128 		     | ptr2 -> reserved_word.key = 173 /* "UNTIL" */
     2129 		     | ptr2 -> reserved_word.key = 177 /* "VARYING" */ | ptr2 -> reserved_word.terminator
     2130 		then return;
     2131 		else go to recover_write;
     2132 	     end;
     2133 	if return_code = rcode_ERROR_DETECTED
     2134 	then go to recover_scan;
     2135 	if return_code = rcode_DNAME_REC
     2136 	then do;					/* Write out the name table entry. */
     2137 		save_line = ntptr -> data_name.line;
     2138 		save_column = ntptr -> data_name.column;
     2139 		ntptr -> data_name.line = stackbegptr -> auser_word.line;
     2140 		ntptr -> data_name.column = stackbegptr -> auser_word.column;
     2141 						/*[4.0-5]*/
     2142 		call swfput2 (ntptr);
     2143 		ntptr -> data_name.line = save_line;	/* Restore correct line and column to name table entry. */
     2144 		ntptr -> data_name.column = save_column;
     2145 		go to recover_scan;
     2146 	     end;
     2147 
     2148 /* The current record is a no interest record and is simply written out. */
     2149 
     2150 recover_write:
     2151 	call swfput;
     2152 recover_read:
     2153 	call swfget;
     2154 	if status_right ^= "0"b
     2155 	then go to rend;
     2156 recover_scan:
     2157 	call repl3_scan (status, return_code);
     2158 	if status_right ^= "0"b
     2159 	then go to rend;
     2160 	else go to recover_analysis;
     2161 
     2162      end perform_recover;
     2163 
     2164 /*======================================*/
     2165 
     2166 lev_diag:
     2167      proc (diag_num, p);				/*[4.4-2]*/
     2168 declare	p		ptr;
     2169 dcl	diag_num		fixed bin;
     2170 dcl	lev_diag_ptr	ptr;
     2171 dcl	1 lev_diag_item,
     2172 	  2 size		fixed bin,
     2173 	  2 line		fixed bin,
     2174 	  2 column	fixed bin,
     2175 	  2 type		fixed bin,
     2176 	  2 run		fixed bin,
     2177 	  2 number	fixed bin,
     2178 	  2 info		bit (32);
     2179 
     2180 	lev_diag_item.size = 28;
     2181 	lev_diag_item.type = 5;
     2182 	lev_diag_item.run = 9;
     2183 	lev_diag_item.info = "0"b;			/*[4.4-2]*/
     2184 	lev_diag_item.line = p -> user_word.line;	/*[4.4-2]*/
     2185 	lev_diag_item.column = p -> user_word.column;
     2186 	lev_diag_item.number = diag_num;
     2187 
     2188 	lev_diag_ptr = addr (lev_diag_item);
     2189 	call cobol_c_list (lev_diag_ptr);
     2190 
     2191      end lev_diag;
     2192 
     2193 /*[4.4-2]*/
     2194 l66_test:
     2195      proc;					/* emit lev diag 220 if ref to level 66 item found */
     2196 						/*[4.4-2]*/
     2197 	if fixed_common.comp_level < "3"		/*[4.4-2]*/
     2198 	then if ntptr2 -> data_name.type = 9 & ntptr2 -> data_name.level = 66
     2199 						/*[4.4-2]*/
     2200 	     then call lev_diag (220, sav_ptr);
     2201 
     2202      end;						/*[4.4-2]*/
     2203 
     2204 
     2205 
     2206 
     2207 
     2208 /*************************************/
     2209 /* INCLUDE FILES */
     2210 
  1     1 
  1     2 /* BEGIN INCLUDE FILE ... cobol_ext_.incl.pl1 */
  1     3 /* Last modified on 06/17/76 by ORN */
  1     4 /* Last modified on 12/28/76 by FCH */
  1     5 /* Last modified on 12/01/80 by FCH */
  1     6 
  1     7 /*    <<<   SHARED EXTERNALS INCLUDE FILE   >>>    */
  1     8 
  1     9 
  1    10 dcl     cobol_ext_$cobol_afp ptr ext;
  1    11 dcl     cobol_afp ptr defined (  cobol_ext_$cobol_afp);
  1    12 dcl     cobol_ext_$cobol_analin_fileno ptr ext;
  1    13 dcl     cobol_analin_fileno ptr defined (  cobol_ext_$cobol_analin_fileno);
  1    14 dcl     cobol_ext_$report_first_token ptr ext;
  1    15 dcl     report_first_token ptr defined( cobol_ext_$report_first_token);
  1    16 dcl     cobol_ext_$report_last_token ptr ext;
  1    17 dcl     report_last_token ptr defined ( cobol_ext_$report_last_token);
  1    18 dcl     cobol_ext_$cobol_eltp ptr ext;
  1    19 dcl     cobol_eltp ptr defined (  cobol_ext_$cobol_eltp);
  1    20 dcl     cobol_ext_$cobol_cmfp ptr ext;
  1    21 dcl     cobol_cmfp ptr defined (  cobol_ext_$cobol_cmfp);
  1    22 dcl     cobol_ext_$cobol_com_fileno ptr ext;
  1    23 dcl     cobol_com_fileno ptr defined (  cobol_ext_$cobol_com_fileno);
  1    24 dcl     cobol_ext_$cobol_com_ptr ptr ext;
  1    25 dcl     cobol_com_ptr ptr defined (  cobol_ext_$cobol_com_ptr);
  1    26 dcl     cobol_ext_$cobol_dfp ptr ext;
  1    27 dcl     cobol_dfp ptr defined (  cobol_ext_$cobol_dfp);
  1    28 dcl     cobol_ext_$cobol_hfp ptr ext;
  1    29 dcl     cobol_hfp ptr defined (  cobol_ext_$cobol_hfp);
  1    30 dcl     cobol_ext_$cobol_m1fp ptr ext;
  1    31 dcl     cobol_m1fp ptr defined (  cobol_ext_$cobol_m1fp);
  1    32 dcl     cobol_ext_$cobol_m2fp ptr ext;
  1    33 dcl     cobol_m2fp ptr defined (  cobol_ext_$cobol_m2fp);
  1    34 dcl     cobol_ext_$cobol_min1_fileno ptr ext;
  1    35 dcl     cobol_min1_fileno ptr defined (  cobol_ext_$cobol_min1_fileno);
  1    36 dcl     cobol_ext_$cobol_min2_fileno_ptr ptr ext;
  1    37 dcl     cobol_min2_fileno_ptr ptr defined (  cobol_ext_$cobol_min2_fileno_ptr);
  1    38 dcl     cobol_ext_$cobol_name_fileno ptr ext;
  1    39 dcl     cobol_name_fileno ptr defined (  cobol_ext_$cobol_name_fileno);
  1    40 dcl     cobol_ext_$cobol_name_fileno_ptr ptr ext;
  1    41 dcl     cobol_name_fileno_ptr ptr defined (  cobol_ext_$cobol_name_fileno_ptr);
  1    42 dcl     cobol_ext_$cobol_ntfp ptr ext;
  1    43 dcl     cobol_ntfp ptr defined (  cobol_ext_$cobol_ntfp);
  1    44 dcl     cobol_ext_$cobol_pdofp ptr ext;
  1    45 dcl     cobol_pdofp ptr defined (  cobol_ext_$cobol_pdofp);
  1    46 dcl     cobol_ext_$cobol_pfp ptr ext;
  1    47 dcl     cobol_pfp ptr defined (  cobol_ext_$cobol_pfp);
  1    48 dcl     cobol_ext_$cobol_rm2fp ptr ext;
  1    49 dcl     cobol_rm2fp ptr defined (  cobol_ext_$cobol_rm2fp);
  1    50 dcl     cobol_ext_$cobol_rmin2fp ptr ext;
  1    51 dcl     cobol_rmin2fp ptr defined (  cobol_ext_$cobol_rmin2fp);
  1    52 dcl     cobol_ext_$cobol_curr_in ptr ext;
  1    53 dcl     cobol_curr_in ptr defined (  cobol_ext_$cobol_curr_in);
  1    54 dcl     cobol_ext_$cobol_curr_out ptr ext;
  1    55 dcl     cobol_curr_out ptr defined (  cobol_ext_$cobol_curr_out);
  1    56 dcl     cobol_ext_$cobol_sfp ptr ext;
  1    57 dcl     cobol_sfp ptr defined (  cobol_ext_$cobol_sfp);
  1    58 dcl     cobol_ext_$cobol_w1p ptr ext;
  1    59 dcl     cobol_w1p ptr defined (  cobol_ext_$cobol_w1p);
  1    60 dcl     cobol_ext_$cobol_w2p ptr ext;
  1    61 dcl     cobol_w2p ptr defined (  cobol_ext_$cobol_w2p);
  1    62 dcl     cobol_ext_$cobol_w3p ptr ext;
  1    63 dcl     cobol_w3p ptr defined (  cobol_ext_$cobol_w3p);
  1    64 dcl     cobol_ext_$cobol_w5p ptr ext;
  1    65 dcl     cobol_w5p ptr defined (  cobol_ext_$cobol_w5p);
  1    66 dcl     cobol_ext_$cobol_w6p ptr ext;
  1    67 dcl     cobol_w6p ptr defined (  cobol_ext_$cobol_w6p);
  1    68 dcl     cobol_ext_$cobol_w7p ptr ext;
  1    69 dcl     cobol_w7p ptr defined (  cobol_ext_$cobol_w7p);
  1    70 dcl     cobol_ext_$cobol_x3fp ptr ext;
  1    71 dcl     cobol_x3fp ptr defined (  cobol_ext_$cobol_x3fp);
  1    72 dcl	cobol_ext_$cobol_rwdd ptr ext;
  1    73 dcl	cobol_rwdd ptr defined(cobol_ext_$cobol_rwdd);
  1    74 dcl	cobol_ext_$cobol_rwpd ptr ext;
  1    75 dcl	cobol_rwpd ptr defined(cobol_ext_$cobol_rwpd);
  1    76 
  1    77 
  1    78 dcl     cobol_ext_$cobol_fileno1 fixed bin(24)ext;
  1    79 dcl     cobol_fileno1 fixed bin(24)defined (  cobol_ext_$cobol_fileno1);				
  1    80 dcl     cobol_ext_$cobol_options_len fixed bin(24)ext;
  1    81 dcl     cobol_options_len fixed bin(24)defined (  cobol_ext_$cobol_options_len);
  1    82 dcl     cobol_ext_$cobol_pdout_fileno fixed bin(24)ext;
  1    83 dcl     cobol_pdout_fileno fixed bin(24)defined (  cobol_ext_$cobol_pdout_fileno);			
  1    84 dcl     cobol_ext_$cobol_print_fileno fixed bin(24)ext;
  1    85 dcl     cobol_print_fileno fixed bin(24)defined (  cobol_ext_$cobol_print_fileno);			
  1    86 dcl     cobol_ext_$cobol_rmin2_fileno fixed bin(24)ext;
  1    87 dcl     cobol_rmin2_fileno fixed bin(24)defined (  cobol_ext_$cobol_rmin2_fileno);
  1    88 dcl     cobol_ext_$cobol_x1_fileno fixed bin(24)ext;
  1    89 dcl     cobol_x1_fileno fixed bin(24)defined (  cobol_ext_$cobol_x1_fileno);				
  1    90 dcl     cobol_ext_$cobol_x2_fileno fixed bin(24)ext;
  1    91 dcl     cobol_x2_fileno fixed bin(24)defined (  cobol_ext_$cobol_x2_fileno);
  1    92 dcl     cobol_ext_$cobol_x3_fileno fixed bin(24)ext;
  1    93 dcl     cobol_x3_fileno fixed bin(24)defined (  cobol_ext_$cobol_x3_fileno);
  1    94 
  1    95 dcl     cobol_ext_$cobol_lpr char (5) ext;
  1    96 dcl     cobol_lpr char (5) defined (  cobol_ext_$cobol_lpr);				/* -2- */
  1    97 dcl     cobol_ext_$cobol_options char (120) ext;
  1    98 dcl     cobol_options char (120) defined (  cobol_ext_$cobol_options);          			/* -30- */
  1    99 
  1   100 dcl     cobol_ext_$cobol_xlast8 bit (1) ext;
  1   101 dcl     cobol_xlast8 bit (1) defined (  cobol_ext_$cobol_xlast8);				/* -1- */
  1   102 dcl     cobol_ext_$report_exists bit (1) ext;
  1   103 dcl     report_exists bit (1) defined (  cobol_ext_$report_exists);
  1   104 
  1   105 
  1   106 /*    <<<   END OF SHARED EXTERNALS INCLUDE FILE   >>>    */
  1   107 /* END INCLUDE FILE ... cobol_ext_.incl.pl1 */
  1   108 
     2211 
  2     1 
  2     2 /* BEGIN INCLUDE FILE ...   cobol_io_info.incl.pl1 */
  2     3 
  2     4 /*  EXTERNAL COBOL I/O ENTRIES  */
  2     5 
  2     6 dcl   cobol_vdwf_open ext entry (ptr, bit(32));
  2     7 dcl   cobol_swf_open ext entry (ptr,bit(32),ptr,fixed bin,char(2));
  2     8 
  2     9 dcl   cobol_swf_get ext entry(ptr,bit(32),ptr,fixed bin);
  2    10 
  2    11 dcl   cobol_swf_put ext entry(ptr,bit(32),ptr,fixed bin);
  2    12 
  2    13 dcl   cobol_swf_close ext entry(ptr,bit(32),ptr,fixed bin);
  2    14 
  2    15 dcl   cobol_vdwf_sget ext entry(ptr,bit(32),ptr,fixed bin,char(5));
  2    16 
  2    17 dcl   cobol_vdwf_sput ext entry (ptr,bit(32),ptr,fixed bin,char(5));
  2    18 
  2    19 dcl   cobol_vdwf_dget ext entry(ptr,bit(32),ptr,fixed bin,char(5));
  2    20 
  2    21 dcl   cobol_vdwf_dput ext entry(ptr,bit(32),ptr,fixed bin,char(5));
  2    22 
  2    23 dcl   cobol_vdwf_close ext entry(ptr,bit(32),ptr,fixed bin);
  2    24 
  2    25 
  2    26 /*  DECLARATION OF SOME VARIABLES USED IN COMPILER I/O CALLS  */
  2    27 
  2    28 dcl keyno char(5);
  2    29 dcl key1 char(5);
  2    30 dcl curr_input ptr;
  2    31 dcl curr_output ptr;
  2    32 dcl recsize fixed bin;
  2    33 dcl recsize2 fixed bin;
  2    34 dcl status bit(32);
  2    35 
  2    36 
  2    37 
  2    38 dcl	1 status_word based(st_ptr),
  2    39 		2 status_left bit(16),
  2    40 		2 status_right bit(16);
  2    41 
  2    42 dcl st_ptr ptr;
  2    43 
  2    44 
  2    45 /* END INCLUDE FILE ...   cobol_io_info.incl.pl1 */
  2    46 
     2212 
  3     1 
  3     2 /* BEGIN INCLUDE FILE ...   cobol_fixed_common.incl.pl1 */
  3     3 /* Modified on 10/27/82 by FCH, [5.1-1], cobol_cln added to save last line num, BUG543(phx13643) */
  3     4 /* Modified on 07/31/80 by FCH, [4.3-1], use_reporting field added for Report Writer */
  3     5 /* Modified on 03/30/79 by FCH, [4.1-1], -card option added */
  3     6 /* Modified on 03/30/79 by FCH, [4.0-2], -svNM option added */
  3     7 /* Modified on 03/02/79 by FCH, [4.0-1], -levNM option added */
  3     8 /* Modified by RAL on 10/13/78, [4.0-0], Added option exp from fil2. */
  3     9 /* Modified by BC on 06/20/77, descriptor added.	*/
  3    10 /* Modified by BC on 06/02/77, init_cd_seg, init_cd_offset added.	*/
  3    11 /* Modified by BC  on 1/21/77, options.profile added.	*/
  3    12 /* Modified by FCH on 7/6/76, sysin_fno & sysout_fno deleted, accept_device & display_device added */
  3    13 /* Modified by FCH on 5/20/77, comp_level added */
  3    14 
  3    15 
  3    16 /*     THE SIZE OF THIS STRUCTURE IN BYTES, (EXCLUDING VARIABLE
  3    17*   LENGTH ENTITIES), FOR EACH HARDWARE IMPLEMENTATION IS:
  3    18*
  3    19*   HARDWARE	|	SIZE (BYTES)
  3    20*   ---------------------------------
  3    21*   645/6180	|	464
  3    22*   P7		|	396
  3    23*   ---------------------------------
  3    24*   */
  3    25 
  3    26 dcl 	1 fixed_common based (  cobol_com_ptr),
  3    27     		2 prog_name char (30),
  3    28    		2 compiler_rev_no char (25),
  3    29     		2 phase_name char (6),
  3    30     		2 currency char (1),
  3    31     		2 fatal_no fixed bin,
  3    32     		2 warn_no fixed bin,
  3    33     		2 proc_counter fixed bin,
  3    34     		2 spec_tag_counter fixed bin,
  3    35     		2 file_count fixed bin,
  3    36     		2 filedescr_offsets (20) char (5),
  3    37     		2 perf_alter_info char (5),
  3    38     		2 another_perform_info char (5),
  3    39     		2 sort_in_info char (5),
  3    40     		2 odo_info char (5),
  3    41     		2 size_seg fixed bin,
  3    42     		2 size_offset fixed bin(24),
  3    43     		2 size_perform_info char (5),
  3    44     		2 rename_info char (5),
  3    45     		2 report_names char (5),
  3    46     		2 rw_buf_seg fixed bin,
  3    47     		2 rw_buf_offset fixed bin(24),
  3    48     		2 rw_buf_length fixed bin(24),
  3    49     		2 file_keys char (5),
  3    50     		2 search_keys char (5),
  3    51     		2 dd_seg_size fixed bin(24),
  3    52     		2 pd_seg_size fixed bin(24),
  3    53     		2 seg_limit fixed bin ,
  3    54     		2 number_of_dd_segs fixed bin,
  3    55     		2 seg_info char (5),
  3    56     		2 number_of_ls_pointers fixed bin,
  3    57     		2 link_sec_seg fixed bin,
  3    58     		2 link_sec_offset fixed bin(24),
  3    59     		2 sra_clauses fixed bin,
  3    60     		2 fix_up_info char (5),
  3    61     		2 linage_info char (5),
  3    62     		2 first_dd_item char (5),
  3    63     		2 sort_out_info char (5),
  3    64     		2 db_info char (5),
  3    65     		2 realm_info char (5),
  3    66     		2 rc_realm_info char (5),
  3    67     		2 last_file_key char (5),
  3    68     		2 prog_coll_seq fixed bin,
  3    69 		2 init_cd_seg fixed bin,
  3    70 		2 init_cd_offset fixed bin(24),
  3    71     		2 input_error_exit fixed bin,
  3    72    		2 output_error_exit fixed bin,
  3    73     		2 i_o_error_exit fixed bin,
  3    74     		2 extend_error_exit fixed bin,
  3    75     		2 dummy15 fixed bin,
  3    76     		2 options,
  3    77       			3 cu bit (1),
  3    78       			3 st bit (1),
  3    79       			3 wn bit (1),
  3    80       			3 obs bit (1),
  3    81       			3 dm bit (1),
  3    82       			3 xrl bit (1),
  3    83       			3 xrn bit (1),
  3    84       			3 src bit (1),
  3    85       			3 obj bit (1),
  3    86       			3 exs bit (1),
  3    87       			3 sck bit (1),
  3    88       			3 rno bit (1),
  3    89 			3 u_l bit (1),
  3    90 			3 cnv bit (1),
  3    91 			3 cos bit (1),
  3    92 			3 fmt bit (1),
  3    93 			3 profile bit(1),
  3    94 			3 nw bit (1),
  3    95 			3 exp bit (1),		/* [4.0-0] */
  3    96 			3 card bit (1),  /*[4.1-1]*/
  3    97 			3 fil2 bit (5),
  3    98 			3 m_map bit (1),
  3    99 			3 m_bf bit (1),
  3   100 			3 m_fat bit (1),
  3   101 			3 m_wn bit (1),
  3   102 			3 m_obs bit(1),
  3   103 			3 pd bit(1),
  3   104       			3 oc bit(1),
  3   105     		2 supervisor bit (1),
  3   106     		2 dec_comma bit (1),
  3   107     		2 init_cd bit (1),
  3   108     		2 corr bit (1),
  3   109     		2 initl bit (1),
  3   110     		2 debug bit (1),
  3   111     		2 report bit (1),
  3   112     		2 sync_in_prog bit (1),
  3   113     		2 pd_section bit (1),
  3   114     		2 list_switch bit (1),
  3   115     		2 alpha_cond bit (1),
  3   116     		2 num_cond bit (1),
  3   117     		2 spec_sysin bit (1),
  3   118     		2 spec_sysout bit (1),
  3   119     		2 cpl_files bit (1),
  3   120     		2 obj_dec_comma bit (1),
  3   121 		2 default_sign_type bit (3),
  3   122 		2 use_debug bit(1),
  3   123 		2 syntax_trace bit(1),
  3   124 		2 comp_defaults,
  3   125 			3 comp	bit(1),
  3   126 			3 comp_1	bit(1),
  3   127 			3 comp_2	bit(1),
  3   128 			3 comp_3	bit(1),
  3   129 			3 comp_4	bit(1),
  3   130 			3 comp_5	bit(1),
  3   131 			3 comp_6	bit(1),
  3   132 			3 comp_7	bit(1),
  3   133 			3 comp_8 bit(1),
  3   134 		2 disp_defaults,
  3   135 			3 disp	bit(1),
  3   136 			3 disp_1	bit(1),
  3   137 			3 disp_2	bit(1),
  3   138 			3 disp_3	bit(1),
  3   139 			3 disp_4	bit(1),
  3   140 			3 disp_5  bit(1),
  3   141 			3 disp_6  bit(1),
  3   142 			3 disp_7  bit(1),
  3   143 		2 descriptor bit(2),
  3   144 		2 levsv  bit(3),		/*[4.0-1]*/
  3   145 		2 use_reporting bit(1),	/*[4.3-1]*/
  3   146 		2 cd bit(1),		/*[4.4-1]*/
  3   147 		2 dummy17 bit(3),
  3   148    		2 lvl_rstr bit(32),
  3   149    		2 inst_rstr bit(32),
  3   150 		2 comp_level char(1),
  3   151 		2 dummy18 char(30),
  3   152 		2 object_sign char (1),
  3   153     		2 last_print_rec char (5),
  3   154     		2 coll_seq_info char (5),
  3   155     		2 sys_status_seg fixed bin,
  3   156    		2 sys_status_offset fixed bin(24),
  3   157    		2 compiler_id fixed bin,
  3   158    		2 date_comp_ln fixed bin,
  3   159    		2 compile_mode bit(36),
  3   160    		2 default_temp fixed bin,
  3   161    		2 accept_device fixed bin,
  3   162    		2 display_device fixed bin,
  3   163    		2 cobol_cln fixed bin,	/*[5.1-1]*/
  3   164 		2 alphabet_offset fixed bin;
  3   165 
  3   166 
  3   167 
  3   168 /* END INCLUDE FILE ...   cobol_fixed_common.incl.pl1 */
  3   169 
     2213 
  4     1 
  4     2 /* BEGIN INCLUDE FILE ...   cobol_file_table.incl.pl1 */
  4     3 /*     <<<   INCLUDE FILE FOR FILE TABLE IN COMMON   >>>     */
  4     4 
  4     5 /* Modified on 09/30/80 by FCH, [4.4-1], density is 6250 is supported */
  4     6 /* Modified on 12/05/78 by RAL, [3.0-3], added dupl_alt from dummy102 */
  4     7 /* Modified on 11/21/78 by RAL, [3.0-2], added space for abs_record_offset from filler */
  4     8 /* Modified on 10/26/78 by RAL, [3.0-1], added space for file_desc_1 table offset from filler */
  4     9 /*     <<<   LAST MODIFIED ON 06-02-77 by GM         >>>	*/
  4    10 /*     <<<   LAST MODIFIED ON 05-31-77 by GM         >>>	*/
  4    11 /*     <<<   LAST MODIFIED  ON 06-30-76 by GM        >>>	*/
  4    12 /*     <<<   LAST MODIFIED ON 06-07-76 by GM    >>>     */
  4    13 /*     <<<   LAST MODIFIED ON 11-29-74 by orn   >>>     */
  4    14 
  4    15 /*
  4    16*A file table is created in variable common for each file selected in the
  4    17*environment division.  The fields of a given file table provide information
  4    18*about the specific file for which the file table is generated.  The
  4    19*addresses which may be contained in the various "info" fields of the file
  4    20*table are addresses in variable common.
  4    21**/
  4    22 
  4    23 /*   THE FILE TABLE STRUCTURE   */
  4    24 
  4    25 dcl	1 file_table based (ft_ptr),
  4    26 		2 next char (5),
  4    27 		2 ifn char (16),
  4    28 		2 attach_options_info char(5),	/*06/02/77*/
  4    29 		2 replacement_info char(5),		/*06/02/77*/
  4    30 		2 file_id_info char(5),		/*05/31/77*/
  4    31 		2 retention_info char(5),		/*05/31/77*/
  4    32 		2 filler0 char (3) ,			/* [3.0-1] */
  4    33 		2 file_desc_1_offset fixed bin (24),		/* [3.0-1] */
  4    34 		2 abs_record_offset fixed bin (24),		/* [3.-02] */
  4    35 		2 filler char(5),		/* this area is available.*/
  4    36 		2 padding_char char (1),
  4    37 		2 banner_char char (1),
  4    38 		2 file_status_info char (5),
  4    39 		2 extra_status_info char (5),
  4    40 		2 cat_id_info char (5),
  4    41 		2 r_key_info char (5),
  4    42 		2 alt_key_info char (5),
  4    43 		2 rec_do_info char (5),
  4    44 		2 label_info char (5),
  4    45 		2 data_info char (5),
  4    46 		2 report_info char (5),
  4    47 		2 linage_info char (5),
  4    48 		2 optional bit (1),						/*06/07/76*/
  4    49 		2 external bit (1),
  4    50 		2 file_status bit (1),
  4    51 		2 extra_status bit (1),
  4    52 		2 sysin bit (1),
  4    53 		2 sysout bit (1),
  4    54 		2 move_mode bit (1),
  4    55 		2 locate_mode bit (1),
  4    56 		2 fixed_recs bit (1),
  4    57 		2 variable_recs bit (1),
  4    58 		2 spanned_recs bit (1),				/*06/07/76*/
  4    59 		2 interchange bit (1),				/*06/07/76*/
  4    60 		2 relative_key bit (1),
  4    61 		2 record_key bit (1),
  4    62 		2 even_parity bit (1),
  4    63 		2 odd_parity bit (1),
  4    64 		2 padding bit (1),
  4    65 		2 banner bit (1),
  4    66 		2 random bit (1),
  4    67 		2 no_file_lockout bit (1),
  4    68 		2 no_write_check bit (1),
  4    69 		2 no_resident_index bit (1),
  4    70 		2 same_file bit (1),
  4    71 		2 sort_file bit (1),
  4    72 		2 rec_do bit (1),
  4    73 		2 linage bit (1),
  4    74 		2 code_set_clause bit (1),
  4    75 		/* history */
  4    76 		2 close bit (1),
  4    77 		2 delete bit (1),
  4    78 		2 open_in bit (1),
  4    79 		2 open_out bit (1),
  4    80 		2 open_io bit (1),
  4    81 		2 open_ext bit (1),
  4    82 		2 read bit (1),
  4    83 		2 release bit (1),
  4    84 		2 return_bit bit (1),
  4    85 		2 rewrite bit (1),
  4    86 		2 sort bit (1),
  4    87 		2 start bit (1),
  4    88 		2 use_error bit (1),
  4    89 		2 write bit (1),
  4    90 		2 read_next bit (1),
  4    91 		2 read_key bit (1),
  4    92 		2 accept bit (1),
  4    93 		2 display bit (1),
  4    94 		2 unequal_recs bit (1),
  4    95 		2 dummy_sysin bit (1),
  4    96 		2 dummy_sysout bit (1),
  4    97 		2 file_no fixed bin,
  4    98 		2 uca_offset fixed bin(24),
  4    99 		2 cra_seg fixed bin,
  4   100 		2 cra_offset fixed bin(24),
  4   101 		2 max_cra_size fixed bin(24),
  4   102 		2 catalogued fixed bin,
  4   103 		2 organization fixed bin,
  4   104 		2 org_qual fixed bin,
  4   105 		2 access fixed bin,
  4   106 		2 buffers fixed bin,
  4   107 		2 device fixed bin,
  4   108 		2 record_prefix fixed bin,				/*06/07/76*/
  4   109 		2 alternate_keys fixed bin,
  4   110 		2 record_format fixed bin,
  4   111 		2 label_format fixed bin,
  4   112 		2 key_location fixed bin,
  4   113 		2 key_size fixed bin,
  4   114 		2 temporary fixed bin,
  4   115 		2 address_format fixed bin,
  4   116 		2 same_area_clause fixed bin,
  4   117 		2 same_rec_clause fixed bin,
  4   118 		2 same_sort_clause fixed bin,
  4   119 		2 mult_clause_no fixed bin,
  4   120 		2 mult_position_no fixed bin,
  4   121 		2 block_desc fixed bin,
  4   122 		2 block_min fixed bin(24),
  4   123 		2 block_max fixed bin(24),
  4   124 		2 rec_min fixed bin(24),
  4   125 		2 rec_max fixed bin(24),
  4   126 		2 label_count fixed bin,
  4   127 		2 ifn_size fixed bin,
  4   128 		2 data_count fixed bin,
  4   129 		2 report_count fixed bin,
  4   130 		2 code_set fixed bin,
  4   131 		2 error_exit fixed bin,
  4   132 		2 prefix_size fixed bin,
  4   133 		2 blocked bit (1),
  4   134 		2 variable bit (1),
  4   135 		2 unbannered bit (1),
  4   136 		2 prefix_clause bit (1),
  4   137 		2 symbolic bit (1),
  4   138 		2 address_format_bit bit (1),
  4   139 		2 bsn bit(1),						/*06/07/76*/
  4   140 		2 process_area bit(1),					/*06/07/76*/
  4   141 		2 dupl_alt bit (1),			/* [3.0-3] */
  4   142 		2 dummy102 bit (23),
  4   143 		2 name_size fixed bin,
  4   144 		2 name char(32),
  4   145 		2 id char(32),
  4   146 		2 temp bit(1) ,
  4   147 		2 perm bit(1) ,
  4   148 		2 attach bit(1) ,
  4   149 		2 detach bit(1) ,
  4   150 		2 fsb ,		/* file state block */
  4   151 		     3 seg fixed bin(24), /* internal addr */
  4   152 		     3 off fixed bin(24),
  4   153 		2 tape,
  4   154 		     3 density bit(1) ,	/* 0-hi 1-lo */
  4   155 		     3 retain bit(1),	/* 0 not retained across attachment, 1 retained */
  4   156 		     3 force bit(1),	/* 0 check retention date, 1 no check */
  4   157 		     3 protect bit(1) ,	/* 0-no 1-yes */
  4   158 		     3 den_6250 bit(1),	/* 0-no 1-yes */		/*[4.4-1]*/
  4   159 		2 cat_nm char(200),
  4   160 		2 ao_len fixed bin(24),		/* attach options */
  4   161 		2 ao_string char(256),
  4   162 		2 output_mode fixed bin,	/*	0 not specified
  4   163*						1 generation
  4   164*						2 modification
  4   165*						3 replacement literal
  4   166*						4 replacement dataname	*/
  4   167 		2 om_len	fixed bin,		/* length of output mode */
  4   168 		2 om_string char(17),
  4   169 		2 tape_device fixed bin,	/*	0 not specified
  4   170*						1 integer
  4   171*						2 dataname	*/
  4   172 		2 tape_device_num fixed bin,
  4   173 		2 tape_device_key char(5),
  4   174 		2 add_cat_key char(5);
  4   175 
  4   176 
  4   177 /* END INCLUDE FILE ...   cobol_file_table.incl.pl1 */
  4   178 
     2214 
  5     1 
  5     2 /* BEGIN INCLUDE FILE ... cobol_type17.incl.pl1 */
  5     3 /* Last modified on 11/19/76 by ORN */
  5     4 
  5     5 /*
  5     6*A mnemonic name token is created for each user-defined mnemonic name
  5     7*specified in the special-names paragraph.
  5     8**/
  5     9 
  5    10 /* dcl name_ptr ptr;  */
  5    11 
  5    12 /* BEGIN DECLARATION OF TYPE17 (MNEMONIC NAME) TOKEN */
  5    13 dcl	1 mnemonic_name based (name_ptr),
  6     1 
  6     2 /* begin include file ... cobol_TYPE17.incl.pl1 */
  6     3 /* Last modified on 11/17/76 by ORN */
  6     4 
  6     5 		/* header */
  6     6 		2 size fixed bin,
  6     7 		2 line fixed bin,
  6     8 		2 column fixed bin,
  6     9 		2 type fixed bin,
  6    10 		/* body */
  6    11 		2 string_ptr ptr,
  6    12 		2 prev_rec ptr,
  6    13 		2 info bit(8),
  6    14 		2 class,
  6    15 		     3 switch_condition bit(1),
  6    16 		     3 switch_name bit(1),
  6    17 		     3 accept_device bit(1),
  6    18 		     3 display_device bit(1),
  6    19 		     3 printer_control bit(1),
  6    20 		     3 alphabet_name bit(1),
  6    21 		2 on_status bit(1),
  6    22 		2 off_status bit(1),
  6    23 		2 def_line fixed bin,
  6    24 		2 iw_key fixed bin,
  6    25 		2 reserved bit(36),
  6    26 		2 alphabet_offset fixed bin,
  6    27 		2 name_size fixed bin,
  6    28 		2 name char(0 refer (mnemonic_name.name_size));
  6    29 
  6    30 
  6    31 /* end include file ... cobol_TYPE17.incl.pl1 */
  6    32 
  5    14 
  5    15 /* END DECLARATION OF TYPE17 (MNEMONIC NAME) TOKEN */
  5    16 
  5    17 /* END INCLUDE FILE ... cobol_type17.incl.pl1 */
  5    18 
     2215 
  7     1 
  7     2 /* BEGIN INCLUDE FILE ... cobol_type1.incl.pl1 */
  7     3 /* Last modified on 11/19/76 by ORN */
  7     4 
  7     5 /*
  7     6*A reserved word token is created in the minpral files for each occurrence
  7     7*of a reserved word in the source program.  The value of the key field
  7     8*indicates the specific reserved word which a type 1 token represents.
  7     9**/
  7    10 
  7    11 dcl rw_ptr ptr;
  7    12 
  7    13 /* BEGIN DECLARATION OF TYPE1 (RESERVED WORD) TOKEN */
  7    14 dcl	1 reserved_word based (rw_ptr),
  8     1 
  8     2 /* begin include file ... cobol_TYPE1.incl.pl1 */
  8     3 /* Last modified on 11/17/76 by ORN */
  8     4 /* Last modified on 12/28/76 by FCH */
  8     5 /* Last modified on 12/16/80 by FCH */
  8     6 
  8     7 		/* header */
  8     8 		2 size fixed bin,
  8     9 		2 line fixed bin,
  8    10 		2 column fixed bin,
  8    11 		2 type fixed bin,
  8    12 		/* body */
  8    13 		2 key fixed bin,
  8    14 		/* procedure division class bits */
  8    15 		2 verb bit (1),
  8    16 		2 arith_op bit (1),
  8    17 		2 figcon bit (1),
  8    18 		2 terminator bit (1),
  8    19 		2 end_dec bit (1),
  8    20 		2 rel_op bit (1),
  8    21 		2 imper_verb bit (1),
  8    22 		2 end_cobol bit (1),
  8    23 		/* data division class bits */
  8    24 		2 section_header bit (1),
  8    25 		2 fs_ind bit (1),
  8    26 		2 fd_clause bit (1),
  8    27 		2 dd_clause bit (1),
  8    28 		2 cd_input bit (1),
  8    29 		2 cd_output bit (1),
  8    30 		2 cset_name bit (1),
  8    31 		2 ss_division bit (1),
  8    32 		2 repl_jump_ind bit (4),
  8    33 		2 ided_recovery bit (1),
  8    34 		2 report_writer bit (5),
  8    35 		2 ss_desc_entry bit (1),
  8    36 		2 jump_index fixed bin,
  8    37 		2 length fixed bin,
  8    38 		2 name char(0 refer(reserved_word.length));
  8    39 
  8    40 
  8    41 
  8    42 /* end include file ... cobol_TYPE1.incl.pl1 */
  8    43 
  7    15 
  7    16 /* END DECLARATION OF TYPE1 (RESERVED WORD) TOKEN */
  7    17 
  7    18 /* END INCLUDE FILE ... cobol_type1.incl.pl1 */
  7    19 
     2216 
  9     1 
  9     2 /* BEGIN INCLUDE FILE ... cobol_type2.incl.pl1 */
  9     3 /* Last modified on 11/19/76 by ORN */
  9     4 
  9     5 /*
  9     6*A type 2 numeric literal token is entered into the minpral file by the
  9     7*lexical analysis phase for each numeric literal encountered in the source
  9     8*program.
  9     9**/
  9    10 
  9    11 dcl nlit_ptr ptr;
  9    12 
  9    13 /* BEGIN DECLARATION OF TYPE2 (NUMERIC LITERAL) TOKEN */
  9    14 dcl 1 numeric_lit based (nlit_ptr),
 10     1 
 10     2 /* begin include file ... cobol_TYPE2.incl.pl1 */
 10     3 /* Last modified on 12/28/76 by FCH */
 10     4 
 10     5 		/* header */
 10     6 		2 size fixed bin,
 10     7 		2 line fixed bin,
 10     8 		2 column fixed bin,
 10     9 		2 type fixed bin,
 10    10 		/* body */
 10    11 		2 integral bit(1),
 10    12 		2 floating bit(1),
 10    13 		2 seg_range bit(1),
 10    14 		2 filler1 bit(4),
 10    15 		2 subscript bit(1),
 10    16 		2 sign char(1),
 10    17 		2 exp_sign char(1),
 10    18 		2 exp_places fixed bin,
 10    19 		2 places_left fixed bin,
 10    20 		2 places_right fixed bin,
 10    21 		2 places fixed bin,
 10    22 		2 literal char(0 refer(numeric_lit.places));	
 10    23 
 10    24 
 10    25 
 10    26 /* end include file ... cobol_TYPE2.incl.pl1 */
 10    27 
  9    15 
  9    16 /* END DECLARATION OF TYPE2 (NUMERIC LITERAL) TOKEN */
  9    17 
  9    18 /* END INCLUDE FILE ... cobol_type2.incl.pl1 */
  9    19 
     2217 
 11     1 
 11     2 /* BEGIN INCLUDE FILE ... cobol_type7.incl.pl1 */
 11     3 /* Last modified on 11/19/76 by ORN */
 11     4 
 11     5 /*
 11     6*A type 7 procedure definition token is entered into the name table and into
 11     7*the procedure division minpral file by the lexical analysis phase for each
 11     8*procedure definition found in the source program.
 11     9**/
 11    10 
 11    11 dcl proc_def_ptr ptr;
 11    12 
 11    13 /* BEGIN DECLARATION OF TYPE7 (PROCEDURE DEFINITION) TOKEN */
 11    14 dcl  1 proc_def based (proc_def_ptr),
 12     1 
 12     2 /* begin include file ... cobol_TYPE7.incl.pl1 */
 12     3 /* Last modified on 11/17/76 by ORN */
 12     4 /* Last modified on 12/28/76 by FCH */
 12     5 
 12     6 		/* header */
 12     7 		2 size fixed bin,
 12     8 		2 line fixed bin,
 12     9 		2 column fixed bin,
 12    10 		2 type fixed bin,
 12    11 		/* body */
 12    12 		2 string_ptr ptr,
 12    13 		2 prev_rec ptr,
 12    14 		2 searched bit (1),
 12    15 		2 duplicate bit (1),
 12    16 		2 filler1 bit (1),
 12    17 		2 debug_ind bit (1),
 12    18 		2 section_name bit (1),
 12    19 		2 declarative_proc bit (1),
 12    20 		2 filler2 bit (1),
 12    21 		2 alterable bit (1),
 12    22 		2 priority char (2),
 12    23 		2 sort_range bit (1),
 12    24 		2 input_range bit (1),
 12    25 		2 output_range bit (1),
 12    26 		2 merge_range bit(1),
 12    27 		2 filler3 bit (5),
 12    28 		2 section_num fixed bin,
 12    29 		2 proc_num fixed bin,
 12    30 		2 def_line fixed bin,
 12    31 		2 name_size fixed bin,
 12    32 		2 name char(0 refer(proc_def.name_size));	
 12    33 
 12    34 
 12    35 
 12    36 /* end include file ... cobol_TYPE7.incl.pl1 */
 12    37 
 11    15 
 11    16 /* END DECLARATION OF TYPE7 (PROCEDURE DEFINITION) TOKEN */
 11    17 
 11    18 /* END INCLUDE FILE ... cobol_type7.incl.pl1 */
 11    19 
     2218 
 13     1 
 13     2 /* BEGIN INCLUDE FILE ... cobol_type9.incl.pl1 */
 13     3 /* Last modified on 11/19/76 by ORN */
 13     4 
 13     5 /*
 13     6*A type 9 data name token is entered into the name table by the data
 13     7*division syntax phase for each data name described in the data division.
 13     8*The replacement phase subsequently replaces type 8 user word references
 13     9*to data names in the procedure division minpral file with the corresponding
 13    10*type 9 tokens from the name table.
 13    11**/
 13    12 
 13    13 /* dcl dn_ptr ptr; */
 13    14 
 13    15 /* BEGIN DECLARATION OF TYPE9 (DATA NAME) TOKEN */
 13    16 dcl 1 data_name based (dn_ptr),
 14     1 
 14     2 /* begin include file ... cobol_TYPE9.incl.pl1 */
 14     3 /* Last modified on 06/19/77 by ORN */
 14     4 /* Last modified on 12/28/76 by FCH */
 14     5 
 14     6 		/* header */
 14     7 		2 size fixed bin,
 14     8 		2 line fixed bin,
 14     9 		2 column fixed bin,
 14    10 		2 type fixed bin,
 14    11 		/* body */
 14    12 		2 string_ptr ptr,
 14    13 		2 prev_rec ptr,
 14    14 		2 searched bit (1),
 14    15 		2 duplicate bit (1),
 14    16 		2 saved bit (1),
 14    17 		2 debug_ind bit (1),
 14    18 		2 filler2 bit (3),
 14    19 		2 used_as_sub bit (1),
 14    20 		2 def_line fixed bin,
 14    21 		2 level fixed bin,
 14    22 		2 linkage fixed bin,
 14    23 		2 file_num fixed bin,
 14    24 		2 size_rtn fixed bin,
 14    25 		2 item_length fixed bin(24),
 14    26 		2 places_left fixed bin,
 14    27 		2 places_right fixed bin,
 14    28 		/* description */
 14    29 		2 file_section bit (1),
 14    30 		2 working_storage bit (1),
 14    31 		2 constant_section bit (1),
 14    32 		2 linkage_section bit (1),
 14    33 		2 communication_section bit (1),
 14    34 		2 report_section bit (1),
 14    35 		2 level_77 bit (1),
 14    36 		2 level_01 bit (1),
 14    37 		2 non_elementary bit (1),
 14    38 		2 elementary bit (1),
 14    39 		2 filler_item bit (1),
 14    40 		2 s_of_rdf bit (1),
 14    41 		2 o_of_rdf bit (1),
 14    42 		2 bin_18 bit (1),
 14    43 		2 bin_36 bit (1),
 14    44 		2 pic_has_l bit (1),
 14    45 		2 pic_is_do bit (1),
 14    46 		2 numeric bit (1),
 14    47 		2 numeric_edited bit (1),
 14    48 		2 alphanum bit (1),
 14    49 		2 alphanum_edited bit (1),
 14    50 		2 alphabetic bit (1),
 14    51 		2 alphabetic_edited bit (1),
 14    52 		2 pic_has_p bit (1),
 14    53 		2 pic_has_ast bit (1),
 14    54 		2 item_signed bit(1),
 14    55 		2 sign_separate bit (1),
 14    56 		2 display bit (1),
 14    57 		2 comp bit (1),
 14    58 		2 ascii_packed_dec_h bit (1),	/* as of 8/16/76  this field used for comp8. */
 14    59 		2 ascii_packed_dec bit (1),
 14    60 		2 ebcdic_packed_dec bit (1),
 14    61 		2 bin_16 bit (1),
 14    62 		2 bin_32 bit (1),
 14    63 		2 usage_index bit (1),
 14    64 		2 just_right bit (1),
 14    65 		2 compare_argument bit (1),
 14    66 		2 sync bit (1),
 14    67 		2 temporary bit (1),
 14    68 		2 bwz bit (1),
 14    69 		2 variable_length bit (1),
 14    70 		2 subscripted bit (1),
 14    71 		2 occurs_do bit (1),
 14    72 		2 key_a bit (1),
 14    73 		2 key_d bit (1),
 14    74 		2 indexed_by bit (1),
 14    75 		2 value_numeric bit (1),
 14    76 		2 value_non_numeric bit (1),
 14    77 		2 value_signed bit (1),
 14    78 		2 sign_type bit (3),
 14    79 		2 pic_integer bit (1),
 14    80 		2 ast_when_zero bit (1),
 14    81 		2 label_record bit (1),
 14    82 		2 sign_clause_occurred bit (1),
 14    83 		2 okey_dn bit (1),
 14    84 		2 subject_of_keyis bit (1),
 14    85 		2 exp_redefining bit (1),
 14    86 		2 sync_in_rec bit (1),
 14    87 		2 rounded bit (1),
 14    88 		2 ad_bit bit (1),
 14    89 		2 debug_all bit (1),
 14    90 		2 overlap bit (1),
 14    91 		2 sum_counter bit (1),
 14    92 		2 exp_occurs bit (1),
 14    93 		2 linage_counter bit (1),
 14    94 		2 rnm_01 bit (1),
 14    95 		2 aligned bit (1),
 14    96 		2 not_user_writable bit (1),
 14    97 		2 database_key bit (1),
 14    98 		2 database_data_item bit (1),
 14    99 		2 seg_num fixed bin,
 14   100 		2 offset fixed bin(24),
 14   101 		2 initial_ptr fixed bin,
 14   102 		2 edit_ptr fixed bin,
 14   103 		2 occurs_ptr fixed bin,
 14   104 		2 do_rec char(5),
 14   105 		2 bitt bit (1),
 14   106 		2 byte bit (1),
 14   107 		2 half_word bit (1),
 14   108 		2 word bit (1),
 14   109 		2 double_word bit (1),
 14   110 		2 half_byte bit (1),
 14   111 		2 filler5 bit (1),
 14   112 		2 bit_offset bit (4),
 14   113 		2 son_cnt bit (16),
 14   114 		2 max_red_size fixed bin(24),
 14   115 		2 name_size fixed bin,
 14   116 		2 name char(0 refer(data_name.name_size));	
 14   117 
 14   118 
 14   119 
 14   120 /* end include file ... cobol_TYPE9.incl.pl1 */
 14   121 
 13    17 
 13    18 /* END DECLARATION OF TYPE9 (DATA NAME) TOKEN */
 13    19 
 13    20 /* END INCLUDE FILE ... cobol_type9.incl.pl1 */
 13    21 
     2219 
 15     1 
 15     2 /* BEGIN INCLUDE FILE ... cobol_type12.incl.pl1 */
 15     3 /* Last modified on 11/19/76 by ORN */
 15     4 
 15     5 /*
 15     6*A type 12 file name token is entered into the name table by the data
 15     7*division syntax phase for each file name appearing in the data division.
 15     8*When the replacement phase processes the procedure division minpral file,
 15     9*each reference to a file name is replaced with the type 12 token created
 15    10*for that file name.
 15    11**/
 15    12 
 15    13 /* dcl name_ptr ptr; */
 15    14 
 15    15 /* BEGIN DECLARATION OF TYPE12 (FILE NAME) TOKEN */
 15    16 dcl 	1 fd_token based (name_ptr),
 16     1 
 16     2 /* begin include file ... cobol_TYPE12.incl.pl1 */
 16     3 /* Last modified on 11/17/76 by ORN */
 16     4 
 16     5 		/* header */
 16     6 		2 size fixed bin,
 16     7 		2 line fixed bin,
 16     8 		2 column fixed bin,
 16     9 		2 type fixed bin,
 16    10 		/* body */
 16    11 		2 string_ptr ptr,
 16    12 		2 prev_rec ptr,
 16    13 		2 info bit (8),
 16    14 		2 def_line fixed bin,
 16    15 		2 file_no fixed bin,
 16    16 		2 name_size fixed bin,
 16    17 		2 name char(0 refer(fd_token.name_size));	
 16    18 
 16    19 /* end include file ... cobol_TYPE12.incl.pl1 */
 16    20 
 15    17 
 15    18 /* END DECLARATION OF TYPE12 (FILE NAME) TOKEN */
 15    19 
 15    20 
 15    21 /* END INCLUDE FILE ... cobol_type12.incl.pl1 */
 15    22 
     2220 
 17     1 
 17     2 /* BEGIN INCLUDE FILE ...   cobol_xref.incl.pl1 */
 17     3 
 17     4 dcl	mcobol		bit(1);
 17     5 dcl	mcobol_xref	bit(1);
 17     6 
 17     7 dcl	1 token_area	based(  cobol_$xref_token_ptr),
 17     8 	 2 token_count	fixed bin(35),
 17     9 	 2 element(10000),
 17    10 	  3 token_ptr	ptr,
 17    11 	  3 name_ptr	ptr;
 17    12 
 17    13 dcl	1 chain_area	based(  cobol_$xref_chain_ptr),
 17    14 	 2 chain_count	fixed bin(35),
 17    15 	 2 element(80000),
 17    16 	  3 ref_line	fixed bin(17) unaligned,
 17    17 	  3 next		fixed bin(17) unaligned;
 17    18 
 17    19 dcl	xref_ptr		ptr;
 17    20 
 17    21 dcl	1 xref_chain	based(xref_ptr),
 17    22 	 2 first		fixed bin(17) unaligned,
 17    23 	 2 last		fixed bin(17) unaligned;
 17    24 
 17    25 /* END INCLUDE FILE ...   cobol_xref.incl.pl1 */
 17    26 
     2221 
 18     1 
 18     2 /* BEGIN INCLUDE FILE ... cobol_.incl.pl1 */
 18     3 /* last modified Feb 4, 1977 by ORN  */
 18     4 
 18     5 /* This file defines all external data used in the generator phase of Multics Cobol */
 18     6 
 18     7 /* POINTERS */
 18     8 dcl cobol_$text_base_ptr ptr  ext;
 18     9 dcl text_base_ptr ptr  defined (cobol_$text_base_ptr);
 18    10 dcl cobol_$con_end_ptr ptr  ext;
 18    11 dcl con_end_ptr ptr  defined (cobol_$con_end_ptr);
 18    12 dcl cobol_$def_base_ptr ptr  ext;
 18    13 dcl def_base_ptr ptr  defined (cobol_$def_base_ptr);
 18    14 dcl cobol_$link_base_ptr ptr  ext;
 18    15 dcl link_base_ptr ptr  defined (cobol_$link_base_ptr);
 18    16 dcl cobol_$sym_base_ptr ptr  ext;
 18    17 dcl sym_base_ptr ptr  defined (cobol_$sym_base_ptr);
 18    18 dcl cobol_$reloc_text_base_ptr ptr  ext;
 18    19 dcl reloc_text_base_ptr ptr  defined (cobol_$reloc_text_base_ptr);
 18    20 dcl cobol_$reloc_def_base_ptr ptr  ext;
 18    21 dcl reloc_def_base_ptr ptr  defined (cobol_$reloc_def_base_ptr);
 18    22 dcl cobol_$reloc_link_base_ptr ptr  ext;
 18    23 dcl reloc_link_base_ptr ptr  defined (cobol_$reloc_link_base_ptr);
 18    24 dcl cobol_$reloc_sym_base_ptr ptr  ext;
 18    25 dcl reloc_sym_base_ptr ptr  defined (cobol_$reloc_sym_base_ptr);
 18    26 dcl cobol_$reloc_work_base_ptr ptr  ext;
 18    27 dcl reloc_work_base_ptr ptr  defined (cobol_$reloc_work_base_ptr);
 18    28 dcl cobol_$pd_map_ptr ptr  ext;
 18    29 dcl pd_map_ptr ptr  defined (cobol_$pd_map_ptr);
 18    30 dcl cobol_$fixup_ptr ptr  ext;
 18    31 dcl fixup_ptr ptr  defined (cobol_$fixup_ptr);
 18    32 dcl cobol_$initval_base_ptr ptr  ext;
 18    33 dcl initval_base_ptr ptr  defined (cobol_$initval_base_ptr);
 18    34 dcl cobol_$initval_file_ptr ptr  ext;
 18    35 dcl initval_file_ptr ptr  defined (cobol_$initval_file_ptr);
 18    36 dcl cobol_$perform_list_ptr ptr  ext;
 18    37 dcl perform_list_ptr ptr  defined (cobol_$perform_list_ptr);
 18    38 dcl cobol_$alter_list_ptr ptr  ext;
 18    39 dcl alter_list_ptr ptr  defined (cobol_$alter_list_ptr);
 18    40 dcl cobol_$seg_init_list_ptr ptr  ext;
 18    41 dcl seg_init_list_ptr ptr  defined (cobol_$seg_init_list_ptr);
 18    42 dcl cobol_$temp_token_area_ptr ptr  ext;
 18    43 dcl temp_token_area_ptr ptr  defined (cobol_$temp_token_area_ptr);
 18    44 dcl cobol_$temp_token_ptr ptr  ext;
 18    45 dcl temp_token_ptr ptr  defined (cobol_$temp_token_ptr);
 18    46 dcl cobol_$token_block1_ptr ptr  ext;
 18    47 dcl token_block1_ptr ptr  defined (cobol_$token_block1_ptr);
 18    48 dcl cobol_$token_block2_ptr ptr  ext;
 18    49 dcl token_block2_ptr ptr  defined (cobol_$token_block2_ptr);
 18    50 dcl cobol_$minpral5_ptr ptr  ext;
 18    51 dcl minpral5_ptr ptr  defined (cobol_$minpral5_ptr);
 18    52 dcl cobol_$tag_table_ptr ptr  ext;
 18    53 dcl tag_table_ptr ptr  defined (cobol_$tag_table_ptr);
 18    54 dcl cobol_$map_data_ptr ptr  ext;
 18    55 dcl map_data_ptr ptr  defined (cobol_$map_data_ptr);
 18    56 dcl cobol_$ptr_status_ptr ptr  ext;
 18    57 dcl ptr_status_ptr ptr  defined (cobol_$ptr_status_ptr);
 18    58 dcl cobol_$reg_status_ptr ptr  ext;
 18    59 dcl reg_status_ptr ptr  defined (cobol_$reg_status_ptr);
 18    60 dcl cobol_$misc_base_ptr ptr ext;
 18    61 dcl misc_base_ptr ptr defined (cobol_$misc_base_ptr);
 18    62 dcl cobol_$misc_end_ptr ptr ext;
 18    63 dcl misc_end_ptr ptr defined (cobol_$misc_end_ptr);
 18    64 dcl cobol_$list_ptr ptr ext;
 18    65 dcl list_ptr ptr defined (cobol_$list_ptr);
 18    66 dcl cobol_$allo1_ptr ptr ext;
 18    67 dcl allo1_ptr ptr defined (cobol_$allo1_ptr);
 18    68 dcl cobol_$eln_ptr ptr ext;
 18    69 dcl eln_ptr ptr defined (cobol_$eln_ptr);
 18    70 dcl cobol_$diag_ptr ptr ext;
 18    71 dcl diag_ptr ptr defined (cobol_$diag_ptr);
 18    72 dcl cobol_$xref_token_ptr ptr ext;
 18    73 dcl xref_token_ptr ptr defined (cobol_$xref_token_ptr);
 18    74 dcl cobol_$xref_chain_ptr ptr ext;
 18    75 dcl xref_chain_ptr ptr defined (cobol_$xref_chain_ptr);
 18    76 dcl cobol_$statement_info_ptr ptr ext;
 18    77 dcl statement_info_ptr ptr defined (cobol_$statement_info_ptr);
 18    78 dcl cobol_$reswd_ptr ptr ext;
 18    79 dcl reswd_ptr ptr defined (cobol_$reswd_ptr);
 18    80 dcl cobol_$op_con_ptr ptr ext;
 18    81 dcl op_con_ptr ptr defined (cobol_$op_con_ptr);
 18    82 dcl cobol_$ntbuf_ptr ptr ext;
 18    83 dcl ntbuf_ptr ptr defined (cobol_$ntbuf_ptr);
 18    84 dcl cobol_$main_pcs_ptr ptr ext;
 18    85 dcl main_pcs_ptr ptr defined (cobol_$main_pcs_ptr);
 18    86 dcl cobol_$include_info_ptr ptr ext;
 18    87 dcl include_info_ptr ptr defined (cobol_$include_info_ptr);
 18    88 
 18    89 /* FIXED BIN */
 18    90 dcl cobol_$text_wd_off fixed bin  ext;
 18    91 dcl text_wd_off fixed bin  defined (cobol_$text_wd_off);
 18    92 dcl cobol_$con_wd_off fixed bin  ext;
 18    93 dcl con_wd_off fixed bin  defined (cobol_$con_wd_off);
 18    94 dcl cobol_$def_wd_off fixed bin  ext;
 18    95 dcl def_wd_off fixed bin  defined (cobol_$def_wd_off);
 18    96 dcl cobol_$def_max fixed bin  ext;
 18    97 dcl def_max fixed bin  defined (cobol_$def_max);
 18    98 dcl cobol_$link_wd_off fixed bin  ext;
 18    99 dcl link_wd_off fixed bin  defined (cobol_$link_wd_off);
 18   100 dcl cobol_$link_max fixed bin  ext;
 18   101 dcl link_max fixed bin  defined (cobol_$link_max);
 18   102 dcl cobol_$sym_wd_off fixed bin  ext;
 18   103 dcl sym_wd_off fixed bin  defined (cobol_$sym_wd_off);
 18   104 dcl cobol_$sym_max fixed bin  ext;
 18   105 dcl sym_max fixed bin  defined (cobol_$sym_max);
 18   106 dcl cobol_$reloc_text_max fixed bin(24)  ext;
 18   107 dcl reloc_text_max fixed bin(24)  defined (cobol_$reloc_text_max);
 18   108 dcl cobol_$reloc_def_max fixed bin(24)  ext;
 18   109 dcl reloc_def_max fixed bin(24)  defined (cobol_$reloc_def_max);
 18   110 dcl cobol_$reloc_link_max fixed bin(24)  ext;
 18   111 dcl reloc_link_max fixed bin(24)  defined (cobol_$reloc_link_max);
 18   112 dcl cobol_$reloc_sym_max fixed bin(24)  ext;
 18   113 dcl reloc_sym_max fixed bin(24)  defined (cobol_$reloc_sym_max);
 18   114 dcl cobol_$reloc_work_max fixed bin(24)  ext;
 18   115 dcl reloc_work_max fixed bin(24)  defined (cobol_$reloc_work_max);
 18   116 dcl cobol_$pd_map_index fixed bin  ext;
 18   117 dcl pd_map_index fixed bin  defined (cobol_$pd_map_index);
 18   118 dcl cobol_$cobol_data_wd_off fixed bin  ext;
 18   119 dcl cobol_data_wd_off fixed bin  defined (cobol_$cobol_data_wd_off);
 18   120 dcl cobol_$stack_off fixed bin  ext;
 18   121 dcl stack_off fixed bin  defined (cobol_$stack_off);
 18   122 dcl cobol_$max_stack_off fixed bin  ext;
 18   123 dcl max_stack_off fixed bin  defined (cobol_$max_stack_off);
 18   124 dcl cobol_$init_stack_off fixed bin  ext;
 18   125 dcl init_stack_off fixed bin  defined (cobol_$init_stack_off);
 18   126 dcl cobol_$pd_map_sw fixed bin  ext;
 18   127 dcl pd_map_sw fixed bin  defined (cobol_$pd_map_sw);
 18   128 dcl cobol_$next_tag fixed bin  ext;
 18   129 dcl next_tag fixed bin  defined (cobol_$next_tag);
 18   130 dcl cobol_$data_init_flag fixed bin  ext;
 18   131 dcl data_init_flag fixed bin  defined (cobol_$data_init_flag);
 18   132 dcl cobol_$seg_init_flag fixed bin  ext;
 18   133 dcl seg_init_flag fixed bin  defined (cobol_$seg_init_flag);
 18   134 dcl cobol_$alter_flag fixed bin  ext;
 18   135 dcl alter_flag fixed bin  defined (cobol_$alter_flag);
 18   136 dcl cobol_$sect_eop_flag fixed bin  ext;
 18   137 dcl sect_eop_flag fixed bin  defined (cobol_$sect_eop_flag);
 18   138 dcl cobol_$para_eop_flag fixed bin  ext;
 18   139 dcl para_eop_flag fixed bin  defined (cobol_$para_eop_flag);
 18   140 dcl cobol_$priority_no fixed bin  ext;
 18   141 dcl priority_no fixed bin  defined (cobol_$priority_no);
 18   142 dcl cobol_$compile_count fixed bin ext;
 18   143 dcl compile_count fixed bin defined (cobol_$compile_count);
 18   144 dcl cobol_$ptr_assumption_ind fixed bin ext;
 18   145 dcl ptr_assumption_ind fixed bin defined (cobol_$ptr_assumption_ind);
 18   146 dcl cobol_$reg_assumption_ind fixed bin ext;
 18   147 dcl reg_assumption_ind fixed bin defined (cobol_$reg_assumption_ind);
 18   148 dcl cobol_$perform_para_index fixed bin ext;
 18   149 dcl perform_para_index fixed bin defined (cobol_$perform_para_index);
 18   150 dcl cobol_$perform_sect_index fixed bin ext;
 18   151 dcl perform_sect_index fixed bin defined (cobol_$perform_sect_index);
 18   152 dcl cobol_$alter_index fixed bin ext;
 18   153 dcl alter_index fixed bin defined (cobol_$alter_index);
 18   154 dcl cobol_$list_off fixed bin ext;
 18   155 dcl list_off fixed bin defined (cobol_$list_off);
 18   156 dcl cobol_$constant_offset fixed bin ext;
 18   157 dcl constant_offset fixed bin defined (cobol_$constant_offset);
 18   158 dcl cobol_$misc_max fixed bin ext;
 18   159 dcl misc_max fixed bin defined (cobol_$misc_max);
 18   160 dcl cobol_$pd_map_max fixed bin ext;
 18   161 dcl pd_map_max fixed bin defined (cobol_$pd_map_max);
 18   162 dcl cobol_$map_data_max fixed bin ext;
 18   163 dcl map_data_max fixed bin defined (cobol_$map_data_max);
 18   164 dcl cobol_$fixup_max fixed bin ext;
 18   165 dcl fixup_max fixed bin defined (cobol_$fixup_max);
 18   166 dcl cobol_$tag_table_max fixed bin ext;
 18   167 dcl tag_table_max fixed bin defined (cobol_$tag_table_max);
 18   168 dcl cobol_$temp_token_max fixed bin ext;
 18   169 dcl temp_token_max fixed bin defined (cobol_$temp_token_max);
 18   170 dcl cobol_$allo1_max fixed bin ext;
 18   171 dcl allo1_max fixed bin defined (cobol_$allo1_max);
 18   172 dcl cobol_$eln_max fixed bin ext;
 18   173 dcl eln_max fixed bin defined (cobol_$eln_max);
 18   174 dcl cobol_$debug_enable fixed bin ext;
 18   175 dcl debug_enable fixed bin defined (cobol_$debug_enable);
 18   176 dcl cobol_$non_source_offset fixed bin ext;
 18   177 dcl non_source_offset fixed bin defined (cobol_$non_source_offset);
 18   178 dcl cobol_$initval_flag fixed bin ext;
 18   179 dcl initval_flag fixed bin defined (cobol_$initval_flag);
 18   180 dcl cobol_$date_compiled_sw fixed bin ext;
 18   181 dcl date_compiled_sw fixed bin defined (cobol_$date_compiled_sw);
 18   182 dcl cobol_$include_cnt fixed bin ext;
 18   183 dcl include_cnt fixed bin defined (cobol_$include_cnt);
 18   184 dcl cobol_$fs_charcnt fixed bin ext;
 18   185 dcl fs_charcnt fixed bin defined (cobol_$fs_charcnt);
 18   186 dcl cobol_$ws_charcnt fixed bin ext;
 18   187 dcl ws_charcnt fixed bin defined (cobol_$ws_charcnt);
 18   188 dcl cobol_$coms_charcnt fixed bin ext;
 18   189 dcl coms_charcnt fixed bin defined (cobol_$coms_charcnt);
 18   190 dcl cobol_$ls_charcnt fixed bin ext;
 18   191 dcl ls_charcnt fixed bin defined (cobol_$ls_charcnt);
 18   192 dcl cobol_$cons_charcnt fixed bin ext;
 18   193 dcl cons_charcnt fixed bin defined (cobol_$cons_charcnt);
 18   194 dcl cobol_$value_cnt fixed bin ext;
 18   195 dcl value_cnt fixed bin defined (cobol_$value_cnt);
 18   196 dcl cobol_$cd_cnt fixed bin ext;
 18   197 dcl cd_cnt fixed bin defined (cobol_$cd_cnt);
 18   198 dcl cobol_$fs_wdoff fixed bin ext;
 18   199 dcl fs_wdoff fixed bin defined (cobol_$fs_wdoff);
 18   200 dcl cobol_$ws_wdoff fixed bin ext;
 18   201 dcl ws_wdoff fixed bin defined (cobol_$ws_wdoff);
 18   202 dcl cobol_$coms_wdoff fixed bin ext;
 18   203 dcl coms_wdoff fixed bin defined (cobol_$coms_wdoff);
 18   204 
 18   205 /* CHARACTER */
 18   206 dcl cobol_$scratch_dir char (168)   aligned ext;
 18   207 dcl scratch_dir char (168)   aligned defined (cobol_$scratch_dir);			/* -42- */
 18   208 dcl cobol_$obj_seg_name char (32)   aligned ext;
 18   209 dcl obj_seg_name char (32)   aligned defined (cobol_$obj_seg_name);		/* -8- */
 18   210 
 18   211 /* BIT */
 18   212 dcl cobol_$xref_bypass bit(1) aligned ext;
 18   213 dcl xref_bypass bit(1) aligned defined (cobol_$xref_bypass);			/* -1- */
 18   214 dcl cobol_$same_sort_merge_proc bit(1) aligned ext;
 18   215 dcl same_sort_merge_proc bit(1) aligned defined (cobol_$same_sort_merge_proc);		/* -1- */
 18   216 
 18   217 
 18   218 /* END INCLUDE FILE ... cobol_incl.pl1*/
 18   219 
 18   220 
     2222 
     2223 
 19     1 
 19     2 /* BEGIN INCLUDE FILE ... cobol_repl_diag_values.incl.pl1 */
 19     3 /* Modified on 11/02/78/ by RAL, [3.0-1], Implement alternate record keys for MR7.0 */
 19     4 /* Last modified on 11/19/76 by ORN */
 19     5 
 19     6 dcl fatal_AMBIGUOUS_UNQUAL_REF	fixed bin static options(constant) init(1);
 19     7 dcl fatal_DATANAME_NOT_DECLARED	fixed bin static options(constant) init(2);
 19     8 dcl fatal_AMBIGUOUS_QUAL_REF		fixed bin static options(constant) init(3);
 19     9 dcl fatal_PROCNAME_NOT_DECLARED	fixed bin static options(constant) init(4);
 19    10 dcl fatal_PROCNAME_MULTIPLY_DECLARED	fixed bin static options(constant) init(5);
 19    11 dcl fatal_DATANAME_MULTIPLY_DECLARED	fixed bin static options(constant) init(6);
 19    12 
 19    13 dcl obs_KEY_IN_RECORD		fixed bin static options(constant) init(21);
 19    14 dcl obs_KEY_NOT_IN_RECORD		fixed bin static options(constant) init(23);
 19    15 dcl warn_BAD_STATUS_KEY		fixed bin static options(constant) init(24);
 19    16 dcl warn_DATANAME_NOT_ALPHANUM	fixed bin static options(constant) init(25);
 19    17 
 19    18 dcl fatal_MNEMONIC_NAME_QUALIFIER	fixed bin static options(constant) init(32);
 19    19 dcl fatal_INDEX_NAME_QUALIFIER	fixed bin static options(constant) init(33);
 19    20 dcl fatal_ALPHABET_NAME_QUALIFIER	fixed bin static options(constant) init(34);
 19    21 dcl fatal_INVALID_QUALIFIER		fixed bin static options(constant) init(35);
 19    22 dcl fatal_MNEMONIC_NAME_EXPECTED	fixed bin static options(constant) init(36);
 19    23 dcl warn_OBSOLETE_MNEMONIC_NAME	fixed bin static options(constant) init(37);
 19    24 dcl obs_SPECIAL_NAMES_NOTE		fixed bin static options(constant) init(38);
 19    25 dcl warn_SPECIAL_NAMES_RECOVERY	fixed bin static options(constant) init(39);
 19    26 dcl fatal_FILENAME_MULTIPLY_DECLARED	fixed bin static options(constant) init(40);
 19    27 dcl fatal_NO_LINAGE_FOR_THIS_FILE	fixed bin static options(constant) init(41);
 19    28 dcl fatal_NO_LINAGE_FOR_ANY_FILE	fixed bin static options(constant) init(42);
 19    29 dcl fatal_AMBIGUOUS_LINAGE_REF	fixed bin static options(constant) init(43);
 19    30 dcl fatal_AMBIGUOUS_PROCNAME_REF	fixed bin static options(constant) init(44);
 19    31 dcl fatal_FILE_NAME_EXPECTED		fixed bin static options(constant) init(45);
 19    32 dcl fatal_DATANAME_EXPECTED		fixed bin static options(constant) init(46);
 19    33 dcl fatal_DATANAME_NOT_NUMERIC	fixed bin static options(constant) init(47);
 19    34 dcl warn_DATANAME_NOT_INTEGER		fixed bin static options(constant) init(48);
 19    35 dcl warn_ODO_RANGE			fixed bin static options(constant) init(49);
 19    36 dcl warn_CONSTANT_ILLOGICAL		fixed bin static options(constant) init(50);
 19    37 dcl fatal_DATANAME_SUBSCRIPTED	fixed bin static options(constant) init(51);
 19    38 dcl warn_DATANAME_VARLEN		fixed bin static options(constant) init(52);
 19    39 dcl warn_ITEM_IN_FILE_SECTION		fixed bin static options(constant) init(53);
 19    40 dcl fatal_ITEM_IN_COM_SECTION		fixed bin static options(constant) init(54);
 19    41 dcl fatal_ITEM_IN_REPORT_SECTION	fixed bin static options(constant) init(55);
 19    42 dcl fatal_ITEM_IN_CONSTANT_SECTION	fixed bin static options(constant) init(56);
 19    43 dcl warn_BAD_CATALOG_NAME		fixed bin static options(constant) init(57);
 19    44 dcl warn_BAD_TAPE_CATALOG_NAME	fixed bin static options(constant) init(58);
 19    45 dcl warn_BAD_ATTACH_OPTIONS		fixed bin static options(constant) init(59);
 19    46 dcl warn_BAD_VALUE_OF_ID		fixed bin static options(constant) init(60);
 19    47 dcl warn_BAD_VALUE_OF_RETENTION	fixed bin static options(constant) init(61);
 19    48 dcl fatal_CDNAME_MULTIPLY_DECLARED	fixed bin static options(constant) init(62);
 19    49 dcl fatal_KEY_NOT_IN_RECORD		fixed bin static options(constant) init(63);	/* [3.0-1] */
 19    50 dcl fatal_SAME_RECORD_OFFSET		fixed bin static options(constant) init(64);	/* [3.0-1] */
 19    51 
 19    52 /* END INCLUDE FILE ... cobol_repl_diag_values.incl.pl1 */
 19    53 
     2224 
 20     1 
 20     2 /* BEGIN INCLUDE FILE ... cobol_size_values.incl.pl1 */
 20     3 /* Last modified on 11/18/76 by ORN */
 20     4 
 20     5 /* This include file contains constant values associated with
 20     6*the fixed sizes of Multics COBOL tokens and other data */
 20     7 
 20     8 dcl size_COMHDR fixed bin		static options(constant) init(56);
 20     9 dcl size_NAMESIZE fixed bin		static options(constant) init(4);
 20    10 
 20    11 dcl size_TOKEN (40) fixed bin		static options(constant) init(
 20    12 /* TOKEN NUMBER	NAME			STRUCTURE		PTR	SIZE (fixed portion in bytes) */
 20    13 /*	1	reserved word		reserved_word	rw_ptr	*/	28,
 20    14 /*	2	numeric literal		numeric_lit	nlit_ptr	*/	36,
 20    15 /*	3	alphanumeric literal	alphanum_lit	alit_ptr	*/	24,
 20    16 /*	4							*/	0,
 20    17 /*	5	diagnostic message		message		message_ptr */	32,
 20    18 /*	6							*/	0,
 20    19 /*	7	procedure definition	proc_def		proc_def_ptr */	52,
 20    20 /*	8	user word			user_word			*/	24,
 20    21 /*	9	data name			data_name		dn_ptr	*/	112,
 20    22 /*	10	index name		index_name	ind_ptr	*/	80,
 20    23 /*	11							*/	52,
 20    24 /*	12	file name			fd_token		name_ptr	*/	48,
 20    25 /*	13	communication name		cdtoken		cdtoken_ptr */	64,
 20    26 /*	14							*/	100,
 20    27 /*	15							*/	68,
 20    28 /*	16	sort file name		(use type 12 structure)	*/		48,
 20    29 /*	17	mnemonic name		mnemonic_name	name_ptr	*/	56,
 20    30 /*	18	procedure reference		proc_ref		proc_ref_ptr */	52,
 20    31 /*	19	end statement		end_stmt		eos_ptr	*/	38,
 20    32 /*	20							*/	120,
 20    33 /*	21							*/	84,
 20    34 /*	22							*/	56,
 20    35 /*	23							*/	0,
 20    36 /*	24							*/	0,
 20    37 /*	25							*/	0,
 20    38 /*	26							*/	0,
 20    39 /*	27							*/	0,
 20    40 /*	28							*/	0,
 20    41 /*	29							*/	0,
 20    42 /*	30	internal tag		int_tag		tag_ptr	*/	49,
 20    43 /*	31	equate tag		equate_tags	equate_ptr */	37,
 20    44 /*	32							*/	0,
 20    45 /*	33							*/	0,
 20    46 /*	34							*/	0,
 20    47 /*	35							*/	0,
 20    48 /*	36							*/	0,
 20    49 /*	37							*/	0,
 20    50 /*	38							*/	0,
 20    51 /*	39							*/	0,
 20    52 /*	40	alphabet name		alphabet_name	alpha_name_ptr */	580);
 20    53 /*	100	internal register		cobol_type100	cobol_type100_ptr	17 */
 20    54 /*	102	immediate constant		immed_const	immed_const_ptr	20 */
 20    55 
 20    56 /* END INCLUDE FILE ... cobol_size_values.incl.pl1 */
 20    57 
     2225 
 21     1 
 21     2 /* BEGIN INCLUDE FILE ... cobol_reswd_values.incl.pl1 */
 21     3 /* CREATED ON 06/15/76 BY ORN */
 21     4 
 21     5 /* This include file contains the value associated with each reserved word
 21     6*   used by the Multics COBOL compiler.  These are declared as constants
 21     7*   and are not allocated unless referenced.  Eash name is in the form:
 21     8*
 21     9*	reswd_<reserved word name>
 21    10*     or
 21    11*	reschar_<special character name>
 21    12*
 21    13*   where <reserved word name> is the upper case transliteration of the
 21    14*   reserved word with any hyphens replaced by underscores and
 21    15*   <special character name> is the upper case name of the one
 21    16*   character reserved words (e.g. EQ, GT, MINUS, LPARENS, etc.)  */
 21    17 
 21    18 
 21    19 dcl reswd_ACCEPT		fixed bin static options(constant) init(001);
 21    20 dcl reswd_ADD		fixed bin static options(constant) init(002);
 21    21 dcl reswd_ERROR		fixed bin static options(constant) init(003);
 21    22 dcl reswd_ALTER		fixed bin static options(constant) init(004);
 21    23 dcl reswd_CALL		fixed bin static options(constant) init(005);
 21    24 dcl reswd_OVERFLOW		fixed bin static options(constant) init(006);
 21    25 dcl reswd_CANCEL		fixed bin static options(constant) init(007);
 21    26 dcl reswd_CLOSE		fixed bin static options(constant) init(008);
 21    27 dcl reswd_DIVIDE		fixed bin static options(constant) init(009);
 21    28 dcl reswd_MULTIPLY		fixed bin static options(constant) init(010);
 21    29 dcl reswd_SUBTRACT		fixed bin static options(constant) init(011);
 21    30 dcl reswd_EXIT		fixed bin static options(constant) init(012);
 21    31 dcl reswd_INITIALIZE	fixed bin static options(constant) init(013);
 21    32 dcl reswd_GO		fixed bin static options(constant) init(014);
 21    33 dcl reswd_MERGE		fixed bin static options(constant) init(015);
 21    34 dcl reswd_INITIATE		fixed bin static options(constant) init(016);
 21    35 dcl reswd_INSPECT		fixed bin static options(constant) init(017);
 21    36 dcl reswd_MOVE		fixed bin static options(constant) init(018);
 21    37 dcl reswd_OPEN		fixed bin static options(constant) init(019);
 21    38 dcl reswd_PERFORM		fixed bin static options(constant) init(020);
 21    39 dcl reswd_READ		fixed bin static options(constant) init(021);
 21    40 dcl reswd_DELETE		fixed bin static options(constant) init(022);
 21    41 dcl reswd_RECEIVE		fixed bin static options(constant) init(023);
 21    42 dcl reswd_RELEASE		fixed bin static options(constant) init(024);
 21    43 dcl reswd_RETURN		fixed bin static options(constant) init(025);
 21    44 dcl reswd_SEARCH		fixed bin static options(constant) init(026);
 21    45 dcl reswd_REWRITE		fixed bin static options(constant) init(027);
 21    46 /* 028 029 */
 21    47 dcl reswd_SEND		fixed bin static options(constant) init(030);
 21    48 dcl reswd_SET		fixed bin static options(constant) init(031);
 21    49 /* 032 */
 21    50 dcl reswd_STOP		fixed bin static options(constant) init(033);
 21    51 dcl reswd_STRING		fixed bin static options(constant) init(034);
 21    52 dcl reswd_SUSPEND		fixed bin static options(constant) init(035);
 21    53 dcl reswd_TERMINATE		fixed bin static options(constant) init(036);
 21    54 dcl reswd_UNSTRING		fixed bin static options(constant) init(037);
 21    55 dcl reswd_WRITE		fixed bin static options(constant) init(038);
 21    56 dcl reswd_USE		fixed bin static options(constant) init(039);
 21    57 dcl reswd_COMPUTE		fixed bin static options(constant) init(040);
 21    58 dcl reswd_DISABLE		fixed bin static options(constant) init(041);
 21    59 dcl reswd_DISPLAY		fixed bin static options(constant) init(042);
 21    60 dcl reswd_ENABLE		fixed bin static options(constant) init(043);
 21    61 dcl reswd_ENTER		fixed bin static options(constant) init(044);
 21    62 dcl reswd_GENERATE		fixed bin static options(constant) init(045);
 21    63 dcl reswd_HOLD		fixed bin static options(constant) init(046);
 21    64 dcl reswd_IF		fixed bin static options(constant) init(047);
 21    65 dcl reswd_PROCESS		fixed bin static options(constant) init(048);
 21    66 dcl reswd_SORT		fixed bin static options(constant) init(049);
 21    67 dcl reswd_EXAMINE		fixed bin static options(constant) init(050);
 21    68 dcl reswd_TRANSFORM		fixed bin static options(constant) init(051);
 21    69 /* 052 053 054 055 */
 21    70 dcl reswd_START		fixed bin static options(constant) init(056);
 21    71 dcl reswd_SUPPRESS		fixed bin static options(constant) init(057);
 21    72 dcl reswd_PURGE		fixed bin static options(constant) init(058);
 21    73 /* 059 060 061 062 063 064 065 066 067 068 069 070 */
 21    74 dcl reswd_ADVANCING		fixed bin static options(constant) init(071);
 21    75 dcl reswd_AFTER		fixed bin static options(constant) init(072);
 21    76 dcl reswd_ALL		fixed bin static options(constant) init(073);
 21    77 dcl reswd_ALPHABETIC	fixed bin static options(constant) init(074);
 21    78 dcl reswd_ALPHANUMERIC	fixed bin static options(constant) init(075);
 21    79 dcl reswd_ALPHANUMERIC_EDITED	fixed bin static options(constant) init(076);
 21    80 dcl reswd_AND		fixed bin static options(constant) init(077);
 21    81 dcl reswd_ASCENDING		fixed bin static options(constant) init(078);
 21    82 dcl reswd_AT		fixed bin static options(constant) init(079);
 21    83 dcl reswd_BEFORE		fixed bin static options(constant) init(080);
 21    84 dcl reswd_BEGINNING		fixed bin static options(constant) init(081);
 21    85 dcl reswd_BY		fixed bin static options(constant) init(082);
 21    86 dcl (reswd_CHARACTER,
 21    87      reswd_CHARACTERS)	fixed bin static options(constant) init(083);
 21    88 dcl reswd_COUNT		fixed bin static options(constant) init(084);
 21    89 dcl reswd_SSF		fixed bin static options(constant) init(085);
 21    90 dcl reswd_DATE		fixed bin static options(constant) init(086);
 21    91 dcl reswd_DAY		fixed bin static options(constant) init(087);
 21    92 dcl reswd_DEBUGGING		fixed bin static options(constant) init(088);
 21    93 dcl reswd_DECLARATIVES	fixed bin static options(constant) init(089);
 21    94 dcl reswd_DELIMITED		fixed bin static options(constant) init(090);
 21    95 dcl reswd_DELIMITER		fixed bin static options(constant) init(091);
 21    96 dcl reswd_DEPENDING		fixed bin static options(constant) init(092);
 21    97 dcl reswd_DESCENDING	fixed bin static options(constant) init(093);
 21    98 dcl reswd_DIVISION		fixed bin static options(constant) init(094);
 21    99 dcl reswd_DOWN		fixed bin static options(constant) init(095);
 21   100 dcl (reswd_ALSO,
 21   101      reswd_ELSE)		fixed bin static options(constant) init(096);
 21   102 dcl reswd_EMI		fixed bin static options(constant) init(097);
 21   103 dcl reswd_END		fixed bin static options(constant) init(098);
 21   104 dcl reswd_ENDING		fixed bin static options(constant) init(099);
 21   105 dcl (reswd_END_OF_PAGE,
 21   106      reswd_EOP)		fixed bin static options(constant) init(100);
 21   107 dcl reswd_IN		fixed bin static options(constant) init(101);
 21   108 dcl (reschar_EQ,
 21   109      reswd_EQUAL,
 21   110      reswd_EQUALS)		fixed bin static options(constant) init(102);
 21   111 /* 103 104 */
 21   112 dcl reswd_ESI		fixed bin static options(constant) init(105);
 21   113 dcl (reswd_COMP,
 21   114      reswd_COMPUTATIONAL)	fixed bin static options(constant) init(106);
 21   115 dcl reswd_EXCEPTION		fixed bin static options(constant) init(107);
 21   116 dcl reswd_FILE		fixed bin static options(constant) init(108);
 21   117 dcl reswd_FIRST		fixed bin static options(constant) init(109);
 21   118 dcl reswd_FOR		fixed bin static options(constant) init(110);
 21   119 dcl reswd_FROM		fixed bin static options(constant) init(111);
 21   120 dcl reswd_GIVING		fixed bin static options(constant) init(112);
 21   121 dcl (reschar_GT,
 21   122      reswd_EXCEEDS,
 21   123      reswd_GREATER)		fixed bin static options(constant) init(113);
 21   124 dcl reswd_INITIAL		fixed bin static options(constant) init(114);
 21   125 dcl reswd_INPUT		fixed bin static options(constant) init(115);
 21   126 dcl reswd_INTO		fixed bin static options(constant) init(116);
 21   127 dcl reswd_INVALID		fixed bin static options(constant) init(117);
 21   128 dcl (reswd_ARE,
 21   129      reswd_IS)		fixed bin static options(constant) init(118);
 21   130 dcl (reswd_I_O,
 21   131      reswd_INPUT_OUTPUT)	fixed bin static options(constant) init(119);
 21   132 dcl reswd_KEY		fixed bin static options(constant) init(120);
 21   133 dcl reswd_LABEL		fixed bin static options(constant) init(121);
 21   134 dcl reswd_LEADING		fixed bin static options(constant) init(122);
 21   135 dcl (reschar_LT,
 21   136      reswd_LESS)		fixed bin static options(constant) init(123);
 21   137 dcl (reswd_LINE,
 21   138      reswd_LINES)		fixed bin static options(constant) init(124);
 21   139 dcl reswd_LOCK		fixed bin static options(constant) init(125);
 21   140 dcl reswd_MESSAGE		fixed bin static options(constant) init(126);
 21   141 dcl reswd_NEGATIVE		fixed bin static options(constant) init(127);
 21   142 dcl reswd_NEXT		fixed bin static options(constant) init(128);
 21   143 dcl reswd_NO		fixed bin static options(constant) init(129);
 21   144 dcl reswd_NOT		fixed bin static options(constant) init(130);
 21   145 dcl reswd_NUMERIC		fixed bin static options(constant) init(131);
 21   146 dcl reswd_NUMERIC_EDITED	fixed bin static options(constant) init(132);
 21   147 dcl reswd_OF		fixed bin static options(constant) init(133);
 21   148 dcl reswd_ON		fixed bin static options(constant) init(134);
 21   149 dcl reswd_OR		fixed bin static options(constant) init(135);
 21   150 /* 136 */
 21   151 dcl reswd_OUTPUT		fixed bin static options(constant) init(137);
 21   152 dcl reswd_BOOLEAN		fixed bin static options(constant) init(138);
 21   153 dcl reswd_PAGE		fixed bin static options(constant) init(139);
 21   154 dcl reswd_POINTER		fixed bin static options(constant) init(140);
 21   155 dcl reswd_POSITIVE		fixed bin static options(constant) init(141);
 21   156 dcl reswd_PROCEDURE		fixed bin static options(constant) init(142);
 21   157 dcl reswd_PROCEDURES	fixed bin static options(constant) init(143);
 21   158 dcl reswd_PROCEED		fixed bin static options(constant) init(144);
 21   159 dcl reswd_PROCESSING	fixed bin static options(constant) init(145);
 21   160 dcl reswd_PROGRAM		fixed bin static options(constant) init(146);
 21   161 dcl reswd_RANDOM		fixed bin static options(constant) init(147);
 21   162 dcl reswd_RECORD		fixed bin static options(constant) init(148);
 21   163 dcl reswd_REEL		fixed bin static options(constant) init(149);
 21   164 dcl reswd_REFERENCES	fixed bin static options(constant) init(150);
 21   165 dcl reswd_REMAINDER		fixed bin static options(constant) init(151);
 21   166 dcl reswd_REPLACING		fixed bin static options(constant) init(152);
 21   167 dcl reswd_REPORTING		fixed bin static options(constant) init(153);
 21   168 dcl reswd_REVERSED		fixed bin static options(constant) init(154);
 21   169 dcl reswd_REWIND		fixed bin static options(constant) init(155);
 21   170 dcl reswd_ROUNDED		fixed bin static options(constant) init(156);
 21   171 dcl reswd_RUN		fixed bin static options(constant) init(157);
 21   172 dcl reswd_SECTION		fixed bin static options(constant) init(158);
 21   173 dcl reswd_SEGMENT		fixed bin static options(constant) init(159);
 21   174 dcl reswd_SENTENCE		fixed bin static options(constant) init(160);
 21   175 dcl reswd_SIZE		fixed bin static options(constant) init(161);
 21   176 dcl reswd_STANDARD		fixed bin static options(constant) init(162);
 21   177 dcl reswd_TALLYING		fixed bin static options(constant) init(163);
 21   178 dcl reswd_TERMINAL		fixed bin static options(constant) init(164);
 21   179 dcl reswd_THAN		fixed bin static options(constant) init(165);
 21   180 dcl (reswd_THROUGH,
 21   181      reswd_THRU)		fixed bin static options(constant) init(166);
 21   182 dcl reswd_RELATIVE		fixed bin static options(constant) init(167);
 21   183 dcl (reswd_TIME,
 21   184      reswd_TIMES)		fixed bin static options(constant) init(168);
 21   185 dcl reswd_DYNAMIC		fixed bin static options(constant) init(169);
 21   186 dcl reswd_TO		fixed bin static options(constant) init(170);
 21   187 dcl reswd_UNEQUAL		fixed bin static options(constant) init(171);
 21   188 dcl reswd_UNIT		fixed bin static options(constant) init(172);
 21   189 dcl reswd_UNTIL		fixed bin static options(constant) init(173);
 21   190 dcl reswd_UP		fixed bin static options(constant) init(174);
 21   191 dcl reswd_UPON		fixed bin static options(constant) init(175);
 21   192 dcl reswd_USING		fixed bin static options(constant) init(176);
 21   193 dcl reswd_VARYING		fixed bin static options(constant) init(177);
 21   194 dcl reswd_WHEN		fixed bin static options(constant) init(178);
 21   195 dcl reswd_WITH		fixed bin static options(constant) init(179);
 21   196 dcl (reswd_ZERO,
 21   197      reswd_ZEROES,
 21   198      reswd_ZEROS)		fixed bin static options(constant) init(180);
 21   199 dcl reswd_ORGANIZATION	fixed bin static options(constant) init(181);
 21   200 dcl reschar_PLUS		fixed bin static options(constant) init(182);
 21   201 dcl reschar_MINUS		fixed bin static options(constant) init(183);
 21   202 dcl reschar_STAR		fixed bin static options(constant) init(184);
 21   203 dcl reschar_SLASH		fixed bin static options(constant) init(185);
 21   204 dcl reschar_2STARs		fixed bin static options(constant) init(186);
 21   205 dcl reschar_LPARENS		fixed bin static options(constant) init(187);
 21   206 dcl reschar_RPARENS		fixed bin static options(constant) init(188);
 21   207 dcl reschar_PERIOD		fixed bin static options(constant) init(189);
 21   208 dcl reswd_TOP		fixed bin static options(constant) init(190);
 21   209 dcl reswd_COBOL		fixed bin static options(constant) init(191);
 21   210 dcl (reswd_SPACE,
 21   211      reswd_SPACES)		fixed bin static options(constant) init(192);
 21   212 dcl reswd_TALLY		fixed bin static options(constant) init(193);
 21   213 dcl (reswd_BIT,
 21   214      reswd_BITS)		fixed bin static options(constant) init(194);
 21   215 dcl reswd_RECORDS		fixed bin static options(constant) init(195);
 21   216 dcl reswd_DATA		fixed bin static options(constant) init(196);
 21   217 /* 197 198 199 */
 21   218 dcl reswd_VLR		fixed bin static options(constant) init(201);
 21   219 dcl (reswd_AREA,
 21   220      reswd_AREAS)		fixed bin static options(constant) init(202);
 21   221 dcl reswd_OMITTED		fixed bin static options(constant) init(203);
 21   222 dcl reswd_BLANK		fixed bin static options(constant) init(204);
 21   223 dcl reswd_BLOCK		fixed bin static options(constant) init(205);
 21   224 dcl reswd_CD		fixed bin static options(constant) init(206);
 21   225 dcl reswd_COMMUNICATION	fixed bin static options(constant) init(207);
 21   226 dcl reswd_STANDARD_2	fixed bin static options(constant) init(208);
 21   227 dcl (reswd_COMP_4,
 21   228      reswd_COMPUTATIONAL_4)	fixed bin static options(constant) init(209);
 21   229 dcl (reswd_COMP_5,
 21   230      reswd_COMPUTATIONAL_5)	fixed bin static options(constant) init(210);
 21   231 dcl (reswd_COMP_3,
 21   232      reswd_COMPUTATIONAL_3)	fixed bin static options(constant) init(211);
 21   233 dcl (reswd_COMP_1,
 21   234      reswd_COMPUTATIONAL_1)	fixed bin static options(constant) init(212);
 21   235 dcl (reswd_COMP_2,
 21   236      reswd_COMPUTATIONAL_2)	fixed bin static options(constant) init(213);
 21   237 dcl reswd_CONSTANT		fixed bin static options(constant) init(214);
 21   238 dcl reswd_CONTAINS		fixed bin static options(constant) init(215);
 21   239 dcl reswd_EXTEND		fixed bin static options(constant) init(216);
 21   240 /* 217 */
 21   241 dcl reswd_DESTINATION	fixed bin static options(constant) init(218);
 21   242 dcl reswd_FD		fixed bin static options(constant) init(219);
 21   243 dcl reswd_FILLER		fixed bin static options(constant) init(220);
 21   244 dcl (reswd_HIGH_VALUE,
 21   245      reswd_HIGH_VALUES)	fixed bin static options(constant) init(221);
 21   246 dcl reswd_INDEX		fixed bin static options(constant) init(222);
 21   247 dcl reswd_INDEXED		fixed bin static options(constant) init(223);
 21   248 dcl (reswd_JUST,
 21   249      reswd_JUSTIFIED)	fixed bin static options(constant) init(224);
 21   250 dcl reswd_LEFT		fixed bin static options(constant) init(225);
 21   251 dcl reswd_LENGTH		fixed bin static options(constant) init(226);
 21   252 dcl reswd_DUPLICATES	fixed bin static options(constant) init(227);
 21   253 dcl reswd_LINKAGE		fixed bin static options(constant) init(228);
 21   254 dcl (reswd_LOW_VALUE,
 21   255      reswd_LOW_VALUES)	fixed bin static options(constant) init(229);
 21   256 dcl reswd_MODE		fixed bin static options(constant) init(230);
 21   257 dcl reswd_OCCURS		fixed bin static options(constant) init(231);
 21   258 dcl (reswd_PIC,
 21   259      reswd_PICTURE)		fixed bin static options(constant) init(232);
 21   260 dcl reswd_EGI		fixed bin static options(constant) init(233);
 21   261 dcl reswd_QUEUE		fixed bin static options(constant) init(234);
 21   262 dcl (reswd_QUOTE,
 21   263      reswd_QUOTES)		fixed bin static options(constant) init(235);
 21   264 dcl reswd_BOTTOM		fixed bin static options(constant) init(236);
 21   265 dcl reswd_RECORDING		fixed bin static options(constant) init(237);
 21   266 dcl reswd_REDEFINES		fixed bin static options(constant) init(238);
 21   267 dcl reswd_RENAMES		fixed bin static options(constant) init(239);
 21   268 dcl (reswd_REPORT,
 21   269      reswd_REPORTS)		fixed bin static options(constant) init(240);
 21   270 dcl reswd_RIGHT		fixed bin static options(constant) init(241);
 21   271 dcl reswd_SA		fixed bin static options(constant) init(242);
 21   272 dcl reswd_SD		fixed bin static options(constant) init(243);
 21   273 dcl reswd_SEPARATE		fixed bin static options(constant) init(244);
 21   274 dcl reswd_SIGN		fixed bin static options(constant) init(245);
 21   275 dcl reswd_SOURCE		fixed bin static options(constant) init(246);
 21   276 dcl reswd_STATUS		fixed bin static options(constant) init(247);
 21   277 dcl reswd_SUB_QUEUE_1	fixed bin static options(constant) init(248);
 21   278 dcl reswd_SUB_QUEUE_2	fixed bin static options(constant) init(249);
 21   279 dcl reswd_SUB_QUEUE_3	fixed bin static options(constant) init(250);
 21   280 dcl reswd_SYMBOLIC		fixed bin static options(constant) init(251);
 21   281 dcl (reswd_SYNC,
 21   282      reswd_SYNCHRONIZED)	fixed bin static options(constant) init(252);
 21   283 dcl reswd_TABLE		fixed bin static options(constant) init(253);
 21   284 /* 254 */
 21   285 dcl reswd_TRAILING		fixed bin static options(constant) init(255);
 21   286 dcl reschar_2EQs		fixed bin static options(constant) init(256);
 21   287 dcl reswd_USAGE		fixed bin static options(constant) init(257);
 21   288 dcl (reswd_VALUE,
 21   289      reswd_VALUES)		fixed bin static options(constant) init(258);
 21   290 dcl reswd_WORKING_STORAGE	fixed bin static options(constant) init(259);
 21   291 dcl reswd_REMOVAL		fixed bin static options(constant) init(260);
 21   292 /* 261 */
 21   293 /* (262 263 264 265) */
 21   294 /* 266 */
 21   295 /* (267 268 269 270 271) */
 21   296 dcl reswd_FLR		fixed bin static options(constant) init(272);
 21   297 /* 273 274 275 276 277 */
 21   298 /* (278) */
 21   299 dcl reswd_FILES		fixed bin static options(constant) init(279);
 21   300 /* 280 281 282 283 284 285 */
 21   301 /* (286) */
 21   302 /* 287 */
 21   303 dcl reswd_NATIVE		fixed bin static options(constant) init(288);
 21   304 /* 289 */
 21   305 dcl (reswd_COMP_7,
 21   306      reswd_COMPUTATIONAL_7)	fixed bin static options(constant) init(290);
 21   307 dcl reswd_OBJECT		fixed bin static options(constant) init(291);
 21   308 dcl (reswd_COMP_6,
 21   309      reswd_COMPUTATIONAL_6)	fixed bin static options(constant) init(292);
 21   310 /* (293) */
 21   311 /* 294 */
 21   312 dcl reswd_DEFAULT		fixed bin static options(constant) init(295);
 21   313 /* 296 207 298 299 300 301 302 303 304 305 */
 21   314 dcl reswd_CODE_SET		fixed bin static options(constant) init(306);
 21   315 dcl reswd_EXTERNAL		fixed bin static options(constant) init(307);
 21   316 /* 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 */
 21   317 dcl reswd_DAY_OF_WEEK	fixed bin static options(constant) init(326);
 21   318 dcl reswd_INTERCHANGE	fixed bin static options(constant) init(327);
 21   319 /* 328 */
 21   320 dcl reswd_PROCESS_AREA	fixed bin static options(constant) init(329);
 21   321 /* 330 */
 21   322 dcl (reswd_CATALOG_NAME,
 21   323      reswd_CATALOGUE_NAME)	fixed bin static options(constant) init(331);
 21   324 /* 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 */
 21   325 /* 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 */
 21   326 /* 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 */
 21   327 /* 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 */
 21   328 dcl reswd_STREAM		fixed bin static options(constant) init(407);
 21   329 /* 408 409 410 411 412 413 */
 21   330 dcl reswd_BSN		fixed bin static options(constant) init(413);
 21   331 /* 414 415 */
 21   332 dcl reswd_KEYED		fixed bin static options(constant) init(416);
 21   333 /* 417 418 419 420 421 422 */
 21   334 dcl reswd_IDS_II		fixed bin static options(constant) init(423);
 21   335 /* 424 */
 21   336 dcl reswd_REPLACE		fixed bin static options(constant) init(425);
 21   337 /* 426 427 428 429 430 431 432 433 434 */
 21   338 dcl reswd_SUBSTITUTION	fixed bin static options(constant) init(435);
 21   339 /* 436 437 438 439 440 441 442 443 444 445 446 447 448 449 */
 21   340 /* 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 */
 21   341 /* 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 */
 21   342 /* 490 491 492 493 494 495 496 497 498 499 500 */
 21   343 dcl reswd_ACCESS		fixed bin static options(constant) init(501);
 21   344 /* 502 */
 21   345 dcl reswd_ADDRESS		fixed bin static options(constant) init(503);
 21   346 dcl reswd_ALPHABET		fixed bin static options(constant) init(504);
 21   347 dcl reswd_STANDARD_1	fixed bin static options(constant) init(505);
 21   348 /* 506 */
 21   349 dcl reswd_ALTERNATE		fixed bin static options(constant) init(507);
 21   350 dcl reswd_APPLY		fixed bin static options(constant) init(508);
 21   351 dcl reswd_ASSIGN		fixed bin static options(constant) init(509);
 21   352 dcl reswd_AUTHOR		fixed bin static options(constant) init(510);
 21   353 dcl reswd_CF		fixed bin static options(constant) init(511);
 21   354 dcl reswd_CH		fixed bin static options(constant) init(512);
 21   355 dcl reswd_CLOCK_UNITS	fixed bin static options(constant) init(513);
 21   356 dcl reswd_CODE		fixed bin static options(constant) init(514);
 21   357 dcl reswd_COLLATING		fixed bin static options(constant) init(515);
 21   358 dcl reswd_COLUMN		fixed bin static options(constant) init(516);
 21   359 dcl reswd_COMMA		fixed bin static options(constant) init(517);
 21   360 dcl reswd_CONFIGURATION	fixed bin static options(constant) init(518);
 21   361 dcl reswd_CONVERSION	fixed bin static options(constant) init(519);
 21   362 dcl reswd_CONTROL		fixed bin static options(constant) init(520);
 21   363 dcl reswd_CONTROLS		fixed bin static options(constant) init(521);
 21   364 dcl reswd_COPY		fixed bin static options(constant) init(522);
 21   365 dcl (reswd_CORR,
 21   366      reswd_CORRESPONDING)	fixed bin static options(constant) init(524);
 21   367 dcl reswd_CURRENCY		fixed bin static options(constant) init(525);
 21   368 /* 526 */
 21   369 dcl reswd_DATE_COMPILED	fixed bin static options(constant) init(527);
 21   370 dcl reswd_DATE_WRITTEN	fixed bin static options(constant) init(528);
 21   371 dcl reswd_DE		fixed bin static options(constant) init(529);
 21   372 dcl reswd_DEBUG_CONTENTS	fixed bin static options(constant) init(530);
 21   373 dcl reswd_DEBUG_ITEM	fixed bin static options(constant) init(531);
 21   374 dcl reswd_DEBUG_LINE	fixed bin static options(constant) init(532);
 21   375 dcl reswd_DEBUG_SUB_1	fixed bin static options(constant) init(533);
 21   376 dcl reswd_DEBUG_SUB_2	fixed bin static options(constant) init(534);
 21   377 dcl reswd_DEBUG_SUB_3	fixed bin static options(constant) init(535);
 21   378 /* 536 */
 21   379 dcl reswd_DEBUG_NAME	fixed bin static options(constant) init(537);
 21   380 dcl reswd_DECIMAL_POINT	fixed bin static options(constant) init(538);
 21   381 dcl reswd_DETAIL		fixed bin static options(constant) init(539);
 21   382 dcl reswd_ENVIRONMENT	fixed bin static options(constant) init(540);
 21   383 /* 541 */
 21   384 dcl reswd_EVERY		fixed bin static options(constant) init(542);
 21   385 dcl reswd_FILE_CONTROL	fixed bin static options(constant) init(543);
 21   386 /* 544 545 */
 21   387 dcl reswd_FINAL		fixed bin static options(constant) init(546);
 21   388 dcl reswd_FOOTING		fixed bin static options(constant) init(547);
 21   389 dcl reswd_HEADING		fixed bin static options(constant) init(548);
 21   390 dcl reswd_GROUP		fixed bin static options(constant) init(549);
 21   391 /* 550 */
 21   392 dcl reswd_I_O_CONTROL	fixed bin static options(constant) init(551);
 21   393 dcl reswd_IDENTIFICATION	fixed bin static options(constant) init(552);
 21   394 dcl reswd_INDICATE		fixed bin static options(constant) init(553);
 21   395 dcl reswd_INSTALLATION	fixed bin static options(constant) init(554);
 21   396 /* 555 */
 21   397 dcl reswd_LAST		fixed bin static options(constant) init(556);
 21   398 /* 557 558 */
 21   399 dcl reswd_PRINTING		fixed bin static options(constant) init(559);
 21   400 /* 560 */
 21   401 dcl reswd_LIMIT		fixed bin static options(constant) init(561);
 21   402 dcl reswd_LIMITS		fixed bin static options(constant) init(562);
 21   403 dcl reswd_LINAGE		fixed bin static options(constant) init(563);
 21   404 dcl reswd_LINAGE_COUNTER	fixed bin static options(constant) init(564);
 21   405 dcl reswd_LINE_COUNTER	fixed bin static options(constant) init(565);
 21   406 /* 566 567 */
 21   407 dcl reswd_MEMORY		fixed bin static options(constant) init(568);
 21   408 dcl reswd_MODULES		fixed bin static options(constant) init(569);
 21   409 dcl reswd_MULTIPLE		fixed bin static options(constant) init(570);
 21   410 dcl reswd_NUMBER		fixed bin static options(constant) init(571);
 21   411 dcl reswd_OBJECT_COMPUTER	fixed bin static options(constant) init(572);
 21   412 /* 573 */
 21   413 dcl reswd_OFF		fixed bin static options(constant) init(574);
 21   414 /* 575 */
 21   415 dcl reswd_OPTIONAL		fixed bin static options(constant) init(576);
 21   416 /* 577 */
 21   417 dcl reswd_PAGE_COUNTER	fixed bin static options(constant) init(578);
 21   418 dcl reswd_PF		fixed bin static options(constant) init(579);
 21   419 dcl reswd_PH		fixed bin static options(constant) init(580);
 21   420 dcl reswd_PLUS		fixed bin static options(constant) init(581);
 21   421 dcl reswd_POSITION		fixed bin static options(constant) init(582);
 21   422 dcl reswd_PROGRAM_ID	fixed bin static options(constant) init(583);
 21   423 dcl reswd_RD		fixed bin static options(constant) init(584);
 21   424 /* 585 586 */
 21   425 dcl reswd_SEQUENCE		fixed bin static options(constant) init(587);
 21   426 dcl reswd_RERUN		fixed bin static options(constant) init(588);
 21   427 dcl reswd_RESERVE		fixed bin static options(constant) init(589);
 21   428 dcl reswd_RESET		fixed bin static options(constant) init(590);
 21   429 dcl reswd_RF		fixed bin static options(constant) init(591);
 21   430 dcl reswd_RH		fixed bin static options(constant) init(592);
 21   431 dcl reswd_SAME		fixed bin static options(constant) init(593);
 21   432 dcl reswd_SECURITY		fixed bin static options(constant) init(594);
 21   433 dcl reswd_SEGMENT_LIMIT	fixed bin static options(constant) init(595);
 21   434 dcl reswd_SELECT		fixed bin static options(constant) init(596);
 21   435 dcl reswd_SEQUENTIAL	fixed bin static options(constant) init(597);
 21   436 dcl reswd_SORT_MERGE	fixed bin static options(constant) init(598);
 21   437 dcl reswd_SOURCE_COMPUTER	fixed bin static options(constant) init(599);
 21   438 dcl reswd_SPECIAL_NAMES	fixed bin static options(constant) init(600);
 21   439 dcl reswd_SPANNED		fixed bin static options(constant) init(601);
 21   440 /* (602) */
 21   441 dcl reswd_SUM		fixed bin static options(constant) init(603);
 21   442 dcl reswd_EXOR		fixed bin static options(constant) init(604);
 21   443 /* 605 */
 21   444 dcl reswd_TAPE		fixed bin static options(constant) init(606);
 21   445 dcl reswd_TEXT		fixed bin static options(constant) init(607);
 21   446 dcl reswd_TYPE		fixed bin static options(constant) init(608);
 21   447 dcl reswd_WORDS		fixed bin static options(constant) init(609);
 21   448 dcl (reswd_COMP_8,
 21   449      reswd_COMPUTATIONAL_8)	fixed bin static options(constant) init(610);
 21   450 /* DATABASE WORDS
 21   451*dcl reswd_ALIAS		fixed bin static options(constant) init(263);
 21   452*dcl reswd_ALIGN		fixed bin static options(constant) init(278);
 21   453*dcl reswd_ALTERING		fixed bin static options(constant) init(268);
 21   454*dcl reswd_BECOMES		fixed bin static options(constant) init(267);
 21   455*dcl reswd_CHECK		fixed bin static options(constant) init(264);
 21   456*dcl reswd_INVOKING		fixed bin static options(constant) init(269);
 21   457*dcl reswd_KEY_LOCATION	fixed bin static options(constant) init(286);
 21   458*dcl reswd_LOCKS		fixed bin static options(constant) init(125);
 21   459*dcl reswd_PREFIX		fixed bin static options(constant) init(293);
 21   460*dcl reswd_REALM		fixed bin static options(constant) init(265);
 21   461*dcl reswd_REALM_ID		fixed bin static options(constant) init(270);
 21   462*dcl reswd_SELECTION		fixed bin static options(constant) init(271);
 21   463*dcl reswd_SYMBOLS		fixed bin static options(constant) init(602);
 21   464*dcl reswd_VIA		fixed bin static options(constant) init(262);
 21   465*END DATABASE WORDS */
 21   466 
 21   467 
 21   468 /* END INCLUDE FILE ... cobol_reswd_values.incl.pl1 */
 21   469 
     2226 
     2227      end cobol_replb;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    05/24/89  0835.4  cobol_replb.pl1                   >spec>install>MR12.3-1048>cobol_replb.pl1
2211         1    03/27/82  0431.3  cobol_ext_.incl.pl1               >ldd>include>cobol_ext_.incl.pl1
2212         2    03/27/82  0439.7  cobol_io_info.incl.pl1            >ldd>include>cobol_io_info.incl.pl1
2213         3    11/11/82  1712.8  cobol_fixed_common.incl.pl1       >ldd>include>cobol_fixed_common.incl.pl1
2214         4    11/11/82  1712.7  cobol_file_table.incl.pl1         >ldd>include>cobol_file_table.incl.pl1
2215         5    03/27/82  0439.8  cobol_type17.incl.pl1             >ldd>include>cobol_type17.incl.pl1
5-14         6    11/11/82  1712.8  cobol_TYPE17.incl.pl1             >ldd>include>cobol_TYPE17.incl.pl1
2216         7    03/27/82  0439.8  cobol_type1.incl.pl1              >ldd>include>cobol_type1.incl.pl1
7-15         8    11/11/82  1712.8  cobol_TYPE1.incl.pl1              >ldd>include>cobol_TYPE1.incl.pl1
2217         9    03/27/82  0439.8  cobol_type2.incl.pl1              >ldd>include>cobol_type2.incl.pl1
9-15        10    11/11/82  1712.8  cobol_TYPE2.incl.pl1              >ldd>include>cobol_TYPE2.incl.pl1
2218        11    03/27/82  0439.9  cobol_type7.incl.pl1              >ldd>include>cobol_type7.incl.pl1
11-15       12    11/11/82  1712.7  cobol_TYPE7.incl.pl1              >ldd>include>cobol_TYPE7.incl.pl1
2219        13    03/27/82  0439.9  cobol_type9.incl.pl1              >ldd>include>cobol_type9.incl.pl1
13-17       14    11/11/82  1712.7  cobol_TYPE9.incl.pl1              >ldd>include>cobol_TYPE9.incl.pl1
2220        15    11/11/82  1712.8  cobol_type12.incl.pl1             >ldd>include>cobol_type12.incl.pl1
15-17       16    03/27/82  0439.6  cobol_TYPE12.incl.pl1             >ldd>include>cobol_TYPE12.incl.pl1
2221        17    03/27/82  0439.9  cobol_xref.incl.pl1               >ldd>include>cobol_xref.incl.pl1
2222        18    11/11/82  1712.7  cobol_.incl.pl1                   >ldd>include>cobol_.incl.pl1
2224        19    03/27/82  0439.4  cobol_repl_diag_values.incl.pl1   >ldd>include>cobol_repl_diag_values.incl.pl1
2225        20    03/27/82  0439.8  cobol_size_values.incl.pl1        >ldd>include>cobol_size_values.incl.pl1
2226        21    03/27/82  0439.8  cobol_reswd_values.incl.pl1       >ldd>include>cobol_reswd_values.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
P1                              000104 automatic       pointer                  dcl 57 set ref 958* 962
P2                              000106 automatic       pointer                  dcl 57 set ref 959 1514*
addr                                                   builtin function         dcl 393 ref 493 495 500 501 502 503 783 944 945 949
                                                                                  949 953 953 973 973 977 977 1106 1216 1216 1251
                                                                                  1251 1252 1252 1307 1307 1333 1333 1361 1361 1389
                                                                                  1389 1403 1403 1406 1406 1422 1422 1432 1432 1436
                                                                                  1436 1449 1449 1488 1511 1558 1584 1584 1592 1592
                                                                                  1668 1668 1765 1774 1774 1789 1806 1806 2006 2049
                                                                                  2049 2083 2083 2116 2188
addrel                                                 builtin function         dcl 394 ref 619 640 999 1036 1058 1639 1715 1728
adiag                           000703 automatic       structure                level 1 unaligned dcl 174 set ref 783 1252 1252 1432
                                                                                  1432 1436 1436 1449 1449 1558 1789 2006
already_replaced                000750 automatic       bit(1)                   packed unaligned dcl 239 set ref 488*
auser_word                             based           structure                level 1 unaligned dcl 151
ch32                                   based           char(32)                 packed unaligned dcl 55 set ref 1774* 1774
chain_area                             based           structure                level 1 unaligned dcl 17-13
chain_count                            based           fixed bin(35,0)          level 2 dcl 17-13 set ref 1636* 1636 1637 1638 1640
                                                                                  1642 1643
class                    10(08)        based           structure                level 2 in structure "mnemonic_name" packed packed
                                                                                  unaligned dcl 5-13 in procedure "cobol_replb"
class                    10(08) 000072 internal static structure                level 2 in structure "type17" packed packed
                                                                                  unaligned dcl 420 in procedure "cobol_replb" set
                                                                                  ref 1312* 1338* 1366*
class1                    5     000674 automatic       bit(16)                  initial level 2 packed packed unaligned dcl 162 set
                                                                                  ref 162*
class2                    5(16) 000674 automatic       bit(4)                   initial level 2 packed packed unaligned dcl 162 set
                                                                                  ref 162*
class3                    5(20) 000674 automatic       bit(1)                   initial level 2 packed packed unaligned dcl 162 set
                                                                                  ref 162*
class4                    5(21) 000674 automatic       bit(3)                   initial level 2 packed packed unaligned dcl 162 set
                                                                                  ref 162*
cname_ptr                       000764 automatic       pointer                  dcl 255 set ref 923* 950*
cname_size                      000770 automatic       fixed bin(15,0)          dcl 259 set ref 922*
cobol_$compile_count            000150 external static fixed bin(17,0)          dcl 18-142 ref 1433 1442
cobol_$xref_chain_ptr           000146 external static pointer                  dcl 18-74 ref 1636 1636 1637 1637 1638 1638 1640
                                                                                  1642 1642 1643
cobol_c_list                    000124 constant        entry                    external dcl 471 ref 1432 1436 1449 2189
cobol_cmfp                             defined         pointer                  dcl 1-21 set ref 1003*
cobol_com_ptr                          defined         pointer                  dcl 1-25 ref 477 956 1003 1195 1236 1243 1439 1531
                                                                                  1632 1756 1756 2197
cobol_curr_in                          defined         pointer                  dcl 1-53 set ref 1705*
cobol_curr_out                         defined         pointer                  dcl 1-55 set ref 1715 1715 1716* 1728 1728 1729*
cobol_ext_$cobol_cmfp           000130 external static pointer                  dcl 1-20 ref 1003 1003
cobol_ext_$cobol_com_ptr        000132 external static pointer                  dcl 1-24 ref 477 477 956 956 1003 1003 1195 1195
                                                                                  1236 1236 1243 1243 1439 1439 1531 1531 1632 1632
                                                                                  1756 1756 1756 1756 2197 2197
cobol_ext_$cobol_curr_in        000134 external static pointer                  dcl 1-52 ref 1705 1705
cobol_ext_$cobol_curr_out       000136 external static pointer                  dcl 1-54 ref 1715 1715 1715 1715 1716 1716 1728 1728
                                                                                  1728 1728 1729 1729
cobol_find_secdef               000120 constant        entry                    external dcl 83 ref 1492
cobol_read_ft_                  000122 constant        entry                    external dcl 470 ref 1225 1237
cobol_repl3_expand              000116 constant        entry                    external dcl 80 ref 950 974
cobol_set_type40_$ebcdic        000126 constant        entry                    external dcl 472 ref 1403
cobol_ss_name                   000776 automatic       char(500)                packed unaligned dcl 266 set ref 502
cobol_ss_stack                  001174 automatic       structure                level 1 unaligned dcl 268 set ref 944
cobol_ss_stackrecord                   based           char                     packed unaligned dcl 287 set ref 2061* 2094*
cobol_swf_get                   000140 constant        entry                    external dcl 2-9 ref 1705
cobol_swf_put                   000142 constant        entry                    external dcl 2-11 ref 1716 1729
cobol_usrwd                     000114 constant        entry                    external dcl 76 ref 1216 1307 1333 1361 1389 1584
                                                                                  1592
cobol_vdwf_dget                 000144 constant        entry                    external dcl 2-19 ref 1003
column                    2     000703 automatic       fixed bin(17,0)          level 2 in structure "adiag" dcl 174 in procedure
                                                                                  "cobol_replb" set ref 571* 782* 1203* 1213* 1395
                                                                                  1430* 1557* 1788* 2000* 2004*
column                    2            based           fixed bin(17,0)          level 2 in structure "reserved_word" dcl 7-14
                                                                                  in procedure "cobol_replb" ref 1191 1200
column                    2     003362 automatic       fixed bin(17,0)          level 2 in structure "lev_diag_item" dcl 2171
                                                                                  in procedure "lev_diag" set ref 2185*
column                    2     000674 automatic       fixed bin(7,0)           initial level 2 in structure "res_word_of" dcl 162
                                                                                  in procedure "cobol_replb" set ref 162*
column                    2     000010 internal static fixed bin(7,0)           level 2 in structure "t26_token" dcl 210
                                                                                  in procedure "cobol_replb" set ref 1090*
column                    2     000072 internal static fixed bin(17,0)          level 2 in structure "type17" dcl 420 in procedure
                                                                                  "cobol_replb" set ref 1418*
column                    2     001756 automatic       fixed bin(17,0)          level 2 in structure "type40" dcl 446 in procedure
                                                                                  "cobol_replb" set ref 1395*
column                    2            based           fixed bin(17,0)          level 2 in structure "numeric_lit" dcl 9-14
                                                                                  in procedure "cobol_replb" ref 1815
column                    2            based           fixed bin(17,0)          level 2 in structure "data_name" dcl 13-16
                                                                                  in procedure "cobol_replb" set ref 578 580* 584*
                                                                                  741 743* 749* 753 755* 761* 839 841* 845* 985 987*
                                                                                  991* 1072* 1908 1910* 1914* 1939 1941* 1945* 1980
                                                                                  1982* 1986* 2079 2081* 2098* 2138 2140* 2144*
column                    2            based           fixed bin(7,0)           level 2 in structure "user_word" dcl 90 in procedure
                                                                                  "cobol_replb" ref 782 1203 1213 1418 1430 1557
                                                                                  2004 2185
column                    2     000020 internal static fixed bin(7,0)           level 2 in structure "special_usrwd" dcl 340
                                                                                  in procedure "cobol_replb" set ref 1191* 1483*
column                    2     000036 internal static fixed bin(17,0)          level 2 in structure "linage_counter_type9" dcl 401
                                                                                  in procedure "cobol_replb" set ref 1200*
column                    2            based           fixed bin(7,0)           level 2 in structure "auser_word" dcl 151
                                                                                  in procedure "cobol_replb" set ref 571 580 743 755
                                                                                  841 950 974 987 1072 1090 1788 1815* 1910 1941
                                                                                  1982 2000 2081 2140
comp_level              137            based           char(1)                  level 2 packed packed unaligned dcl 3-26 ref 956
                                                                                  1195 1439 1531 2197
compiler_id             154            based           fixed bin(17,0)          level 2 dcl 3-26 ref 477
continue                        000724 automatic       bit(1)                   packed unaligned dcl 197 set ref 600* 601 602* 617*
                                                                                  618 620* 622* 638* 639 642* 646* 1056* 1057 1059*
                                                                                  1061* 1078*
counter                         000270 automatic       fixed bin(15,0)          dcl 134 set ref 1214* 1216* 1305* 1307* 1331* 1333*
                                                                                  1359* 1361* 1387* 1389* 1464* 1508* 1584* 1592*
                                                                                  1661 1679* 1679 1680 1756 1799 1823* 1823 1826
cvar_ptr                        000766 automatic       pointer                  dcl 256 set ref 928* 950*
cvar_size                       000771 automatic       fixed bin(15,0)          dcl 260 set ref 929*
data_based                             based           structure                level 1 unaligned dcl 191
data_name                              based           structure                level 1 unaligned dcl 13-16
debug                   134(01)        based           bit(1)                   level 2 packed packed unaligned dcl 3-26 ref 1756
                                                                                  1756
def_line                 12     001756 automatic       fixed bin(17,0)          level 2 in structure "type40" dcl 446 in procedure
                                                                                  "cobol_replb" set ref 1394*
def_line                 11     000072 internal static fixed bin(17,0)          initial level 2 in structure "type17" dcl 420
                                                                                  in procedure "cobol_replb" set ref 1417*
diag_no                         000725 automatic       fixed bin(15,0)          dcl 198 set ref 1216* 1220 1307* 1333* 1361* 1389*
                                                                                  1584* 1592* 1607
diag_num                               parameter       fixed bin(17,0)          dcl 2169 ref 2166 2186
divide                                                 builtin function         dcl 395 ref 619 640 999 1036 1058 1639
dummy_ptr                 2     001174 automatic       pointer                  level 2 dcl 268 set ref 945*
element                   1            based           structure                array level 2 packed packed unaligned dcl 17-13
error_cond                      001745 automatic       bit(1)                   packed unaligned dcl 360 set ref 703* 709* 716* 723*
                                                                                  727 765* 768
exp_sign                  4(18)        based           char(1)                  level 2 packed packed unaligned dcl 9-14 ref 1458
                                                                                  1539
expand_condition_names          000740 automatic       bit(1)                   packed unaligned dcl 230 set ref 483* 920 968 1142*
                                                                                  1146* 2018
false                                  constant        bit(1)                   initial packed unaligned dcl 66 ref 504 1148 1171
                                                                                  1817 1818
fatal_AMBIGUOUS_LINAGE_REF             constant        fixed bin(17,0)          initial dcl 19-29 ref 1242
fatal_DATANAME_NOT_DECLARED            constant        fixed bin(17,0)          initial dcl 19-7 ref 1612
fatal_FILE_NAME_EXPECTED               constant        fixed bin(17,0)          initial dcl 19-31 ref 1218 1230
fatal_INVALID_QUALIFIER                constant        fixed bin(17,0)          initial dcl 19-21 ref 1209
fatal_NO_LINAGE_FOR_ANY_FILE           constant        fixed bin(17,0)          initial dcl 19-28 ref 1248
fatal_NO_LINAGE_FOR_THIS_FILE          constant        fixed bin(17,0)          initial dcl 19-27 ref 1228
fatal_PROCNAME_NOT_DECLARED            constant        fixed bin(17,0)          initial dcl 19-9 ref 1615
fd_token                               based           structure                level 1 unaligned dcl 15-16
file_count               24            based           fixed bin(17,0)          level 2 dcl 3-26 ref 1236 1243
file_key_info            13     000036 internal static structure                level 2 unaligned dcl 401
file_no                  12            based           fixed bin(17,0)          level 2 dcl 15-16 set ref 1225*
file_num                 14            based           fixed bin(17,0)          level 2 dcl 13-16 ref 1003
file_table                             based           structure                level 1 unaligned dcl 4-25
filedescr_offsets        25            based           char(5)                  array level 2 packed packed unaligned dcl 3-26 set
                                                                                  ref 1003*
filler_item              21(10)        based           bit(1)                   level 2 packed packed unaligned dcl 13-16 ref 1069
first                                  based           fixed bin(17,0)          level 2 packed packed unaligned dcl 17-21 set ref
                                                                                  1640*
fixed                                                  builtin function         dcl 396 ref 1158 1368
fixed_common                           based           structure                level 1 unaligned dcl 3-26
fsb                     124            based           structure                level 2 unaligned dcl 4-25
ft_ptr                          000762 automatic       pointer                  dcl 251 set ref 1003* 1005 1225* 1226 1226 1237*
                                                                                  1238 1245
i                               000274 automatic       fixed bin(17,0)          dcl 134 set ref 1236* 1237* 1243*
image                    10     000703 automatic       char(8)                  level 2 packed packed unaligned dcl 174 set ref
                                                                                  1448*
image_size                7     000703 automatic       fixed bin(17,0)          initial level 2 dcl 174 set ref 174* 1447* 1452*
indexed_by               22(09)        based           bit(1)                   level 2 packed packed unaligned dcl 13-16 ref 711
info                      6     003362 automatic       bit(32)                  level 2 in structure "lev_diag_item" packed packed
                                                                                  unaligned dcl 2171 in procedure "lev_diag" set ref
                                                                                  2183*
info                      6     000703 automatic       bit(8)                   initial level 2 in structure "adiag" packed packed
                                                                                  unaligned dcl 174 in procedure "cobol_replb" set
                                                                                  ref 174* 1446* 1451*
info1                     4            based           bit(1)                   level 2 packed packed unaligned dcl 151 set ref
                                                                                  1817*
info2                     4(01)        based           bit(1)                   level 2 packed packed unaligned dcl 151 set ref
                                                                                  1818*
integral                  4            based           bit(1)                   level 2 packed packed unaligned dcl 9-14 ref 1458
                                                                                  1539
item_length              16            based           fixed bin(24,0)          level 2 dcl 13-16 set ref 1002 1005* 1009*
iw_key                   12     000072 internal static fixed bin(17,0)          level 2 in structure "type17" dcl 420 in procedure
                                                                                  "cobol_replb" set ref 1314* 1317* 1340* 1343*
                                                                                  1368*
iw_key                   11     001756 automatic       fixed bin(17,0)          level 2 in structure "type40" dcl 446 in procedure
                                                                                  "cobol_replb" set ref 1400*
jump_index                6     000674 automatic       fixed bin(7,0)           initial level 2 dcl 162 set ref 162*
key                       4     000674 automatic       fixed bin(15,0)          initial level 2 in structure "res_word_of" dcl 162
                                                                                  in procedure "cobol_replb" set ref 162* 948* 952*
                                                                                  954* 972* 976* 978*
key                       4            based           fixed bin(17,0)          level 2 in structure "reserved_word" dcl 7-14
                                                                                  in procedure "cobol_replb" ref 524 533 542 691 801
                                                                                  870 935 1081 1118 1118 1118 1126 1134 1142 1142
                                                                                  1142 1142 1148 1148 1148 1148 1154 1154 1160 1192
                                                                                  1205 1205 1288 1288 1291 1294 1377 1521 1521 1548
                                                                                  1571 1880 1888 1922 2017 2122 2127 2127 2127
last                      0(18)        based           fixed bin(17,0)          level 2 packed packed unaligned dcl 17-21 set ref
                                                                                  1640 1642 1643*
length                    5            based           fixed bin(7,0)           level 2 in structure "auser_word" dcl 151
                                                                                  in procedure "cobol_replb" set ref 950 974 1819*
length                    5     000020 internal static fixed bin(7,0)           level 2 in structure "special_usrwd" dcl 340
                                                                                  in procedure "cobol_replb" set ref 1484* 1485
length                    5            based           fixed bin(7,0)           level 2 in structure "user_word" dcl 90 in procedure
                                                                                  "cobol_replb" ref 1301 1301 1314 1327 1327 1340
                                                                                  1353 1383 1383 1397 1398 1400 1419 1420 1447 1448
lev_diag_item                   003362 automatic       structure                level 1 unaligned dcl 2171 set ref 2188
lev_diag_ptr                    003360 automatic       pointer                  dcl 2170 set ref 2188* 2189*
lev_from_srchloop               000752 automatic       bit(1)                   packed unaligned dcl 242 set ref 490* 1044* 1052
                                                                                  1052*
level                    12            based           fixed bin(17,0)          level 2 dcl 13-16 ref 586 586 602 602 622 622 633
                                                                                  633 646 646 1017 1022 1032 1038 1041 1041 1050
                                                                                  1054 1066 2197
linage                   33(34)        based           bit(1)                   level 2 packed packed unaligned dcl 4-25 ref 1226
                                                                                  1238
linage_counter_type9            000036 internal static structure                level 1 unaligned dcl 401 set ref 1251 1251
line                      1            based           fixed bin(15,0)          level 2 in structure "user_word" dcl 90 in procedure
                                                                                  "cobol_replb" ref 781 1202 1212 1417 1429 1556
                                                                                  2003 2184
line                      1            based           fixed bin(15,0)          level 2 in structure "auser_word" dcl 151
                                                                                  in procedure "cobol_replb" set ref 570 579 742 754
                                                                                  840 950* 974* 986 1001 1071 1089 1632 1637 1787
                                                                                  1814* 1909 1940 1981 1999 2080 2139
line                      1     003362 automatic       fixed bin(17,0)          level 2 in structure "lev_diag_item" dcl 2171
                                                                                  in procedure "lev_diag" set ref 2184*
line                      1     000674 automatic       fixed bin(15,0)          initial level 2 in structure "res_word_of" dcl 162
                                                                                  in procedure "cobol_replb" set ref 162*
line                      1     000020 internal static fixed bin(15,0)          level 2 in structure "special_usrwd" dcl 340
                                                                                  in procedure "cobol_replb" set ref 1186*
line                      1     001756 automatic       fixed bin(17,0)          level 2 in structure "type40" dcl 446 in procedure
                                                                                  "cobol_replb" set ref 1394*
line                      1            based           fixed bin(17,0)          level 2 in structure "data_name" dcl 13-16
                                                                                  in procedure "cobol_replb" set ref 577 579* 583*
                                                                                  740 742* 747* 752 754* 759* 837 840* 844* 984 986*
                                                                                  990* 1000 1001* 1008* 1071* 1907 1909* 1913* 1938
                                                                                  1940* 1944* 1979 1981* 1985* 2078 2080* 2097* 2137
                                                                                  2139* 2143*
line                      1     000703 automatic       fixed bin(17,0)          level 2 in structure "adiag" dcl 174 in procedure
                                                                                  "cobol_replb" set ref 570* 781* 1202* 1212* 1394
                                                                                  1429* 1556* 1787* 1999* 2003*
line                      1     000036 internal static fixed bin(17,0)          level 2 in structure "linage_counter_type9" dcl 401
                                                                                  in procedure "cobol_replb" set ref 1199*
line                      1     000010 internal static fixed bin(15,0)          level 2 in structure "t26_token" dcl 210
                                                                                  in procedure "cobol_replb" set ref 1089*
line                      1     000072 internal static fixed bin(17,0)          level 2 in structure "type17" dcl 420 in procedure
                                                                                  "cobol_replb" set ref 1417*
line                      1            based           fixed bin(17,0)          level 2 in structure "reserved_word" dcl 7-14
                                                                                  in procedure "cobol_replb" ref 1186 1199
line                      1            based           fixed bin(17,0)          level 2 in structure "numeric_lit" dcl 9-14
                                                                                  in procedure "cobol_replb" ref 1814
linkage                  13            based           fixed bin(17,0)          level 2 dcl 13-16 set ref 563 575* 613* 624* 636*
                                                                                  650*
linkage_section          21(03)        based           bit(1)                   level 2 packed packed unaligned dcl 13-16 ref 575
                                                                                  586
literal                  11            based           char                     level 2 packed packed unaligned dcl 9-14 ref 1820
max_cra_size             41            based           fixed bin(24,0)          level 2 dcl 4-25 ref 1005
mcobol                          002210 automatic       bit(1)                   packed unaligned dcl 17-4 set ref 477*
minpr_record                           based           char                     packed unaligned dcl 134 ref 1678 2061
mnemonic_name                          based           structure                level 1 unaligned dcl 5-13
mod                                                    builtin function         dcl 397 ref 1669 1824 2051 2084
nam_tab                                based           char(2048)               packed unaligned dcl 1753 ref 1769
name                     34            based           char                     level 2 in structure "data_name" packed packed
                                                                                  unaligned dcl 13-16 in procedure "cobol_replb" set
                                                                                  ref 1774
name                      6     000020 internal static char(30)                 level 2 in structure "special_usrwd" packed packed
                                                                                  unaligned dcl 340 in procedure "cobol_replb" set
                                                                                  ref 1485*
name                    221     001756 automatic       char(8)                  level 2 in structure "type40" packed packed
                                                                                  unaligned dcl 446 in procedure "cobol_replb" set
                                                                                  ref 1398*
name                     15            based           char                     level 2 in structure "proc_def" packed packed
                                                                                  unaligned dcl 11-14 in procedure "cobol_replb" ref
                                                                                  1485
name                     16     000072 internal static char(8)                  level 2 in structure "type17" packed packed
                                                                                  unaligned dcl 420 in procedure "cobol_replb" set
                                                                                  ref 1420*
name_size               220     001756 automatic       fixed bin(17,0)          level 2 in structure "type40" dcl 446 in procedure
                                                                                  "cobol_replb" set ref 1397* 1399
name_size                14            based           fixed bin(17,0)          level 2 in structure "proc_def" dcl 11-14
                                                                                  in procedure "cobol_replb" ref 1484 1485 1485
name_size                15     000072 internal static fixed bin(17,0)          level 2 in structure "type17" dcl 420 in procedure
                                                                                  "cobol_replb" set ref 1419* 1421
name_size                33            based           fixed bin(17,0)          level 2 in structure "data_name" dcl 13-16
                                                                                  in procedure "cobol_replb" set ref 1774 1777*
name_stack_overflow             000754 automatic       bit(1)                   packed unaligned dcl 244 set ref 492* 1512* 1564
                                                                                  1658 1675* 1796 1811*
name_stack_size                        constant        fixed bin(15,0)          initial dcl 295 ref 1671 1807
next                      1(18)        based           fixed bin(17,0)          array level 3 in structure "chain_area" packed
                                                                                  packed unaligned dcl 17-13 in procedure
                                                                                  "cobol_replb" set ref 1638* 1642*
next                      3            based           fixed bin(24,0)          level 2 in structure "shdr" dcl 87 in procedure
                                                                                  "cobol_replb" ref 1715 1728
next_state                      001741 automatic       fixed bin(15,0)          dcl 292 set ref 512* 521 528* 537* 546* 816* 825
                                                                                  832* 856* 865* 874* 882* 889* 896* 909* 1844* 1867
                                                                                  1872* 1890* 1903* 1926* 1933* 1953* 1967* 1975*
no_entries                      001174 automatic       fixed bin(15,0)          level 2 dcl 268 set ref 494* 933* 1847* 2062* 2062
                                                                                  2063 2095* 2095 2096
not_found                       000276 automatic       bit(1)                   packed unaligned dcl 134 set ref 1216* 1218 1307*
                                                                                  1309 1333* 1335 1361* 1363 1389* 1391 1584* 1589
                                                                                  1592* 1600
nt_entry                        002304 automatic       char(2048)               packed unaligned dcl 1752 set ref 1765 1769*
ntendptr                               parameter       pointer                  dcl 45 set ref 40 620 642 1059 1216* 1307* 1333*
                                                                                  1361* 1389* 1584* 1592*
ntptr                           000100 automatic       pointer                  dcl 52 set ref 563 563 575 575 577 578 579 580 582*
                                                                                  583 584 586 586 586 595 598* 598 602 602 602 608*
                                                                                  608 610* 610 613 619* 619 619 620 622 622 624 624
                                                                                  633 633 633 636 640* 640 640 642 646 646 650 650
                                                                                  704 711 720 729 730* 730 731 733 735 736* 736 738*
                                                                                  740 741 742 743 745* 747 749 750* 752 753 754 755
                                                                                  757* 759 761 837 839 840 841 843* 844 845 920 922
                                                                                  923 924* 924 926 928 929 968 968 974* 984 985 986
                                                                                  987 989* 990 991 993 993 999* 999 999 1000 1001
                                                                                  1002 1003 1005 1007* 1008 1009 1015 1017 1032
                                                                                  1036* 1036 1036 1038 1041 1041 1050 1054 1058*
                                                                                  1058 1058 1059 1061 1061 1061 1066 1069 1071 1072
                                                                                  1075* 1492* 1493 1497 1498* 1499 1579* 1631* 1639
                                                                                  1639 1907 1908 1909 1910 1912* 1913 1914 1938 1939
                                                                                  1940 1941 1943* 1944 1945 1979 1980 1981 1982
                                                                                  1984* 1985 1986 2078 2079 2080 2081 2082 2094 2097
                                                                                  2098 2137 2138 2139 2140 2142* 2143 2144
ntptr2                          000272 automatic       pointer                  dcl 134 set ref 1216* 1223 1225 1307* 1333* 1361*
                                                                                  1389* 1584* 1592* 1631 2197 2197
ntrecord                               based           char                     packed unaligned dcl 2073 ref 2094
null                                                   builtin function         dcl 398 ref 974 974 974 974 1493
num_literal                     000760 automatic       bit(1)                   packed unaligned dcl 249 set ref 1107* 1463* 1526*
                                                                                  1576 1578*
number                    5     000703 automatic       fixed bin(17,0)          level 2 in structure "adiag" dcl 174 in procedure
                                                                                  "cobol_replb" set ref 569* 708* 715* 722* 764*
                                                                                  780* 1198* 1209* 1218* 1220* 1228* 1230* 1242*
                                                                                  1248* 1252 1431* 1435* 1444* 1554* 1607* 1612*
                                                                                  1615* 1663* 1673* 1801* 1809* 1897* 1919* 1960*
                                                                                  1991* 2056* 2089*
number                    5     003362 automatic       fixed bin(17,0)          level 2 in structure "lev_diag_item" dcl 2171
                                                                                  in procedure "lev_diag" set ref 2186*
numeric_lit                            based           structure                level 1 unaligned dcl 9-14
o_of_rdf                 21(12)        based           bit(1)                   level 2 packed packed unaligned dcl 13-16 ref 602
obs_SPECIAL_NAMES_NOTE                 constant        fixed bin(17,0)          initial dcl 19-24 ref 1435
offset                    6            based           fixed bin(17,0)          level 2 dcl 191 set ref 1717* 1730*
options                 133            based           structure                level 2 packed packed unaligned dcl 3-26
out_ptr                                parameter       pointer                  dcl 1747 in procedure "swfput2" set ref 1736 1759*
                                                                                  1768 1769
out_ptr                                parameter       pointer                  dcl 1726 in procedure "swfput1" set ref 1723 1729*
                                                                                  1729 1730
p                                      parameter       pointer                  dcl 2168 in procedure "lev_diag" ref 2166 2184 2185
p                               002302 automatic       pointer                  dcl 1748 in procedure "swfput2" set ref 1765* 1774
                                                                                  1777 1780*
places                   10            based           fixed bin(17,0)          level 2 dcl 9-14 ref 1819 1820 1821
prev_rec                  6            based           pointer                  level 2 dcl 13-16 ref 598 608 610 730 736 924
proc_def                               based           structure                level 1 unaligned dcl 11-14
proc_num                 12            based           fixed bin(17,0)          level 2 dcl 11-14 ref 1483
processing_subscript            000751 automatic       bit(1)                   packed unaligned dcl 240 set ref 489* 1842* 2038*
ptr2                            000262 automatic       pointer                  dcl 134 set ref 507 524 533 542 555 659 691 691 775
                                                                                  781 782 801 870 935 935 958 959* 961* 962* 1020
                                                                                  1022 1081 1081 1108 1110 1114 1118 1118 1118 1126
                                                                                  1134 1142 1142 1142 1142 1146 1148 1148 1148 1148
                                                                                  1154 1154 1158 1160 1186 1191 1192 1195* 1199 1200
                                                                                  1202 1203 1205 1205 1205 1209 1212 1213 1215 1288
                                                                                  1288 1291 1294 1301 1301 1301 1301 1301 1306 1314
                                                                                  1327 1327 1327 1327 1327 1332 1340 1353 1353 1353
                                                                                  1356 1360 1377 1377 1383 1383 1383 1383 1383 1388
                                                                                  1397 1398 1398 1400 1417 1418 1419 1420 1420 1429
                                                                                  1430 1439* 1447 1448 1448 1458 1458 1458 1462 1481
                                                                                  1483 1484 1485 1485 1487 1488* 1492* 1505* 1514
                                                                                  1517 1521 1521 1521 1529 1537 1539 1539 1539 1548
                                                                                  1548 1556 1557 1571 1571 1678 1705* 1716* 1716
                                                                                  1717 1814 1815 1819 1820 1821 1857 1860 1868 1880
                                                                                  1888 1922 1949 1963 2003 2004 2014 2017 2032 2055
                                                                                  2061 2088 2122 2127 2127 2127 2127
ptr2_1                          000264 automatic       pointer                  dcl 134 set ref 1462* 1579
ptr3                            000720 automatic       pointer                  dcl 185 set ref 783* 784* 1558* 1559* 1789* 1790*
                                                                                  2006* 2007*
ptrtable                        000110 automatic       pointer                  array dcl 61 set ref 1215* 1216 1216 1306* 1307 1307
                                                                                  1332* 1333 1333 1360* 1361 1361 1388* 1389 1389
                                                                                  1584 1584 1592 1592 1680* 1774 1826*
qualif                          000277 automatic       bit(1)                   packed unaligned dcl 144 set ref 1520* 1531* 1626
rcode_DNAME_REC                        constant        fixed bin(17,0)          initial dcl 374 ref 560 701 828 886 907 1648 1901
                                                                                  1934 1973 1997 2135
rcode_ERROR_DETECTED                   constant        fixed bin(17,0)          initial dcl 375 ref 552 682 854 880 894 1560 1566
                                                                                  1609 1617 1994 2133
rcode_NO_INTEREST                      constant        fixed bin(17,0)          initial dcl 372 ref 555 676 775 778 786 1620 1857
                                                                                  1868 1949 1963 2032
rcode_RESWORD_REC                      constant        fixed bin(17,0)          initial dcl 373 ref 524 533 542 676 778 786 801 870
                                                                                  1623 1878 1922 2012 2119
rcode_SCAN_CURRENT                     constant        fixed bin(17,0)          initial dcl 377 ref 552 682 1235 1298 1501
rcode_SCAN_NEXT                        constant        fixed bin(17,0)          initial dcl 378 ref 684 1207 1407 1423
recovered_to_thru                      parameter       bit(1)                   packed unaligned dcl 2108 in procedure
                                                                                  "perform_recover" set ref 2104 2118* 2124*
recovered_to_thru               000756 automatic       bit(1)                   packed unaligned dcl 247 in procedure "cobol_replb"
                                                                                  set ref 860* 863
recsize2                        002203 automatic       fixed bin(17,0)          dcl 2-33 set ref 1003* 1669 1669 1678 1678 1705*
                                                                                  2050 2061
ref_line                  1            based           fixed bin(17,0)          array level 3 packed packed unaligned dcl 17-13 set
                                                                                  ref 1637*
repl_jump_ind             5(16)        based           bit(4)                   level 2 packed packed unaligned dcl 7-14 ref 1158
replb_compile_count             000112 internal static fixed bin(17,0)          initial dcl 469 set ref 1433 1442*
res_word_of                     000674 automatic       structure                level 1 unaligned dcl 162 set ref 949 949 953 953
                                                                                  973 973 977 977
reschar_LPARENS                        constant        fixed bin(17,0)          initial dcl 21-205 ref 935 948 972
reschar_RPARENS                        constant        fixed bin(17,0)          initial dcl 21-206 ref 952 976
reserved_word                          based           structure                level 1 unaligned dcl 7-14
reswd_FROM                             constant        fixed bin(17,0)          initial dcl 21-119 ref 1324
reswd_GENERATE                         constant        fixed bin(17,0)          initial dcl 21-62 ref 1291
reswd_IN                               constant        fixed bin(17,0)          initial dcl 21-107 ref 1205
reswd_INITIATE                         constant        fixed bin(17,0)          initial dcl 21-34 ref 1288
reswd_IS                               constant        fixed bin(17,0)          initial dcl 21-128 ref 1377
reswd_OF                               constant        fixed bin(17,0)          initial dcl 21-147 ref 954 978 1205
reswd_SEQUENCE                         constant        fixed bin(17,0)          initial dcl 21-425 ref 1375
reswd_SET                              constant        fixed bin(17,0)          initial dcl 21-48 ref 1350
reswd_TERMINATE                        constant        fixed bin(17,0)          initial dcl 21-53 ref 1288
reswd_UPON                             constant        fixed bin(17,0)          initial dcl 21-191 ref 1299
return_code                     001755 automatic       fixed bin(15,0)          dcl 391 in procedure "cobol_replb" set ref 517* 524
                                                                                  533 542 552 552 555 560 671* 676 676 682 682 684
                                                                                  698* 701 775 778 778 786 786 798* 801 821* 828 854
                                                                                  870 880 886 894 907 1855* 1857 1868 1878 1901 1922
                                                                                  1934 1949 1963 1973 1994 1997 2011* 2012 2032 2119
                                                                                  2133 2135 2156*
return_code                            parameter       fixed bin(15,0)          dcl 1100 in procedure "repl3_scan" set ref 1096
                                                                                  1207* 1235* 1298* 1407* 1423* 1501* 1560* 1566*
                                                                                  1609* 1617* 1620* 1623* 1648*
run                       4     003362 automatic       fixed bin(17,0)          level 2 dcl 2171 set ref 2182*
run_number                4     000703 automatic       fixed bin(17,0)          initial level 2 dcl 174 set ref 174*
rw_corresponding                000736 automatic       bit(1)                   packed unaligned dcl 228 set ref 480* 1012 1124
                                                                                  1127* 1178* 2024
rw_debugging                    000742 automatic       bit(1)                   packed unaligned dcl 234 set ref 484* 1160* 1181*
                                                                                  1589
rw_exception                    000747 automatic       bit(1)                   packed unaligned dcl 238 set ref 487* 676 792 795*
                                                                                  1154*
rw_generate                     000744 automatic       bit(1)                   packed unaligned dcl 234 set ref 832 847 1284* 1291*
rw_initialize                   000737 automatic       bit(1)                   packed unaligned dcl 229 set ref 481* 1012 1132
                                                                                  1138* 1175*
rw_initterm                     000743 automatic       bit(1)                   packed unaligned dcl 234 set ref 832 847 1284* 1288*
rw_key                          002202 automatic       fixed bin(17,0)          dcl 468 set ref 1294* 1299 1324 1350 1375
rw_perform                      000745 automatic       bit(1)                   packed unaligned dcl 236 set ref 485* 676 814 904*
                                                                                  1287*
rw_search                       000746 automatic       bit(1)                   packed unaligned dcl 237 set ref 482* 676 687 770*
                                                                                  774* 1280*
rw_sort_etc                     000741 automatic       bit(1)                   packed unaligned dcl 232 set ref 479* 993 1118*
                                                                                  1122*
rw_switch                       000716 automatic       bit(1)                   packed unaligned dcl 185 set ref 504* 805* 834* 849*
                                                                                  875* 890* 897* 906* 1148* 1167* 1171* 1286* 1326*
                                                                                  1352* 1458 1537 1575* 1584* 1592 1612
rw_using                        001743 automatic       bit(1)                   packed unaligned dcl 331 set ref 486* 547* 665*
rwkey                           001742 automatic       fixed bin(15,0)          dcl 293 set ref 2017* 2020 2020 2026 2026
s                               000102 automatic       fixed bin(15,0)          dcl 53 set ref 1126* 1127 1127 1127 1127 1127 1127
                                                                                  1134* 1135 1135 1135 1135 1192*
s_of_rdf                 21(11)        based           bit(1)                   level 2 packed packed unaligned dcl 13-16 ref 595
                                                                                  633
sav_ptr                         000300 automatic       pointer                  dcl 144 set ref 1517* 1626* 2197*
save_column                     000727 automatic       fixed bin(7,0)           dcl 200 set ref 578* 584 741* 749 753* 761 839* 845
                                                                                  985* 991 1908* 1914 1939* 1945 1980* 1986 2079*
                                                                                  2098 2138* 2144
save_length                     000730 automatic       fixed bin(31,0)          dcl 201 set ref 1002* 1009
save_line                       000726 automatic       fixed bin(15,0)          dcl 199 set ref 577* 583 740* 747 752* 759 837* 844
                                                                                  984* 990 1000* 1008 1907* 1913 1938* 1944 1979*
                                                                                  1985 2078* 2097 2137* 2143
save_ntptr                      001750 automatic       pointer                  dcl 362 set ref 729* 738
save_ptr2                       000266 automatic       pointer                  dcl 134 set ref 1487* 1505
save_type10_ptr                 001752 automatic       pointer                  dcl 363 set ref 735* 750
saved                    10(02)        based           bit(1)                   level 2 packed packed unaligned dcl 13-16 ref 563
                                                                                  1015
search_all                      001746 automatic       bit(1)                   packed unaligned dcl 361 set ref 498* 694* 718 725*
searched                 10            based           bit(1)                   level 2 packed packed unaligned dcl 11-14 ref 1481
sectno                          000715 automatic       fixed bin(15,0)          dcl 185 set ref 496* 1492* 1584* 1592*
seg                     124            based           fixed bin(24,0)          level 3 in structure "file_table" dcl 4-25
                                                                                  in procedure "cobol_replb" ref 1226 1245
seg                      23     000036 internal static fixed bin(17,0)          level 3 in structure "linage_counter_type9" dcl 401
                                                                                  in procedure "cobol_replb" set ref 1201* 1226*
                                                                                  1240 1245* 1248
shdr                                   based           structure                level 1 unaligned dcl 87
sign                      4(09)        based           char(1)                  level 2 packed packed unaligned dcl 9-14 ref 1458
                                                                                  1539
size                                   based           fixed bin(17,0)          level 2 in structure "data_name" dcl 13-16
                                                                                  in procedure "cobol_replb" set ref 619 640 922 929
                                                                                  999 1036 1058 1639 1716* 1729* 1768 2082
size                                   based           fixed bin(15,0)          level 2 in structure "auser_word" dcl 151
                                                                                  in procedure "cobol_replb" set ref 1821* 1824 1824
size                            003362 automatic       fixed bin(17,0)          level 2 in structure "lev_diag_item" dcl 2171
                                                                                  in procedure "lev_diag" set ref 2180*
size                            001756 automatic       fixed bin(17,0)          level 2 in structure "type40" dcl 446 in procedure
                                                                                  "cobol_replb" set ref 1399*
size                            000072 internal static fixed bin(17,0)          level 2 in structure "type17" dcl 420 in procedure
                                                                                  "cobol_replb" set ref 1421*
size                            000674 automatic       fixed bin(15,0)          initial level 2 in structure "res_word_of" dcl 162
                                                                                  in procedure "cobol_replb" set ref 162*
size                            000703 automatic       fixed bin(17,0)          initial level 2 in structure "adiag" dcl 174
                                                                                  in procedure "cobol_replb" set ref 174* 1445*
                                                                                  1450*
size_TOKEN                      000037 constant        fixed bin(17,0)          initial array dcl 20-11 ref 1399 1421
special_usrwd                   000020 internal static structure                level 1 unaligned dcl 340 set ref 1488
ss_ptrtable                     001574 automatic       pointer                  array dcl 289 set ref 945 2063* 2096*
ss_recovered                    000757 automatic       bit(1)                   packed unaligned dcl 248 set ref 939 1843* 2008
                                                                                  2014* 2020* 2026* 2035
ss_recsize                      001572 automatic       fixed bin(15,0)          dcl 286 set ref 2050* 2051 2051 2061 2082* 2084 2084
                                                                                  2094 2094
ss_stack_ptr                    000772 automatic       pointer                  dcl 261 set ref 493* 944* 950* 2049* 2061 2063 2083*
                                                                                  2094 2096
ss_template                            based           char(1)                  array packed unaligned dcl 284 set ref 2049 2083
ss_topstack                     001740 automatic       fixed bin(15,0)          dcl 290 set ref 1849* 2049 2051* 2051 2053 2083
                                                                                  2084* 2084 2086
ssname_ptr                      000774 automatic       pointer                  dcl 262 set ref 502*
st_ptr                          003350 automatic       pointer                  dcl 2114 in procedure "perform_recover" set ref
                                                                                  2116* 2154 2158
st_ptr                          002206 automatic       pointer                  dcl 2-42 in procedure "cobol_replb" set ref 495* 519
                                                                                  673 699 799 823 861 1706
st_ptr                          002222 automatic       pointer                  dcl 1104 in procedure "repl3_scan" set ref 1106*
stack                           000302 automatic       char(1000)               packed unaligned dcl 147 in procedure "cobol_replb"
                                                                                  set ref 503 1511 1668 1806
stack                                  parameter       bit(1)                   packed unaligned dcl 1840 in procedure
                                                                                  "process_subscript" ref 1830 1845 1873 1882 1891
                                                                                  1904 1927 1934 1954 1968 1976
stack                     4     001174 automatic       char(1000)               level 2 in structure "cobol_ss_stack" packed packed
                                                                                  unaligned dcl 268 in procedure "cobol_replb" set
                                                                                  ref 493 2049 2083
stackbegptr                     000260 automatic       pointer                  dcl 134 set ref 503* 570 571 579 580 742 743 754 755
                                                                                  840 841 950 950 950 974 974 974 986 987 1001 1071
                                                                                  1072 1089 1090 1511* 1787 1788 1909 1910 1940 1941
                                                                                  1981 1982 1999 2000 2055* 2080 2081 2088* 2139
                                                                                  2140
stackptr                        000256 automatic       pointer                  dcl 134 set ref 1632 1637 1668* 1678 1680 1806* 1814
                                                                                  1815 1816 1817 1818 1819 1820 1821 1824 1824 1826
stackrecord                            based           char                     packed unaligned dcl 134 set ref 1678*
startlevel                      000722 automatic       fixed bin(31,0)          dcl 195 set ref 1017* 1022* 1032 1038 1041* 1043*
                                                                                  1054* 1067
status                                 parameter       bit(32)                  packed unaligned dcl 2107 in procedure
                                                                                  "perform_recover" set ref 2104 2116 2117* 2156*
status                                 parameter       bit(32)                  packed unaligned dcl 1099 in procedure "repl3_scan"
                                                                                  set ref 1096 1106
status                          002204 automatic       bit(32)                  packed unaligned dcl 2-34 in procedure "cobol_replb"
                                                                                  set ref 495 517* 671* 698* 798* 821* 860* 1003*
                                                                                  1705* 1716* 1729* 1855* 2011*
status_right              0(16)        based           bit(16)                  level 2 in structure "status_word" packed packed
                                                                                  unaligned dcl 2-38 in procedure "cobol_replb" ref
                                                                                  519 673 699 799 823 861 1706
status_right              0(16)        based           bit(16)                  level 2 in structure "status_word" packed packed
                                                                                  unaligned dcl 2111 in procedure "perform_recover"
                                                                                  ref 2154 2158
status_word                            based           structure                level 1 packed packed unaligned dcl 2-38
                                                                                  in procedure "cobol_replb"
status_word                            based           structure                level 1 packed packed unaligned dcl 2111
                                                                                  in procedure "perform_recover"
string                                                 builtin function         dcl 392 set ref 1312* 1338* 1366*
string_ptr                             parameter       pointer                  dcl 46 set ref 40 1216* 1307* 1333* 1361* 1389*
                                                                                  1492* 1584* 1592*
subject_of_keyis         22(21)        based           bit(1)                   level 2 packed packed unaligned dcl 13-16 ref 720
subscript_stack_overflow        000755 automatic       bit(1)                   packed unaligned dcl 245 set ref 491* 939 1848* 2046
                                                                                  2058* 2075 2091*
subscript_stack_size                   constant        fixed bin(15,0)          initial dcl 296 ref 2053 2086
subscripted              22(05)        based           bit(1)                   level 2 packed packed unaligned dcl 13-16 ref 704
substr                                                 builtin function         dcl 399 set ref 1301 1301 1327 1327 1353 1356 1383
                                                                                  1383 1398 1420 1446* 1448 1451* 1485* 1485 1769*
                                                                                  1769 1774* 1774
switch_condition         10(08)        based           bit(1)                   level 3 packed packed unaligned dcl 5-13 ref 968
sz                              002300 automatic       fixed bin(17,0)          dcl 1748 set ref 1768* 1769 1769
t26_ptr                         000732 automatic       pointer                  dcl 207 set ref 500* 1091* 1139*
t26_token                       000010 internal static structure                level 1 unaligned dcl 210 set ref 500
t88_ptr                         000734 automatic       pointer                  dcl 225 set ref 501*
t88_token                       000014 internal static structure                level 1 unaligned dcl 219 set ref 501
temp_char                       002201 automatic       char(1)                  packed unaligned dcl 467 set ref 1356* 1357 1357
                                                                                  1368
temp_ptr                        000254 automatic       pointer                  dcl 86 set ref 1715* 1717 1717 1728* 1730 1730
temp_stack                             based           char(1)                  array packed unaligned dcl 148 set ref 1668 1806
terminator                5(03)        based           bit(1)                   level 2 packed packed unaligned dcl 7-14 ref 1146
                                                                                  2014 2127
tlevel                          000723 automatic       fixed bin(31,0)          dcl 196 set ref 1066* 1067 1067 1069
too_many_qualifiers             000753 automatic       bit(1)                   packed unaligned dcl 243 set ref 492* 1513* 1564
                                                                                  1658 1665* 1796 1803*
topstack                        000271 automatic       fixed bin(15,0)          dcl 134 set ref 1465* 1510* 1668 1669* 1669 1671
                                                                                  1806 1807 1824* 1824
true                                   constant        bit(1)                   initial packed unaligned dcl 67 ref 1167
type                      3            based           fixed bin(17,0)          level 2 in structure "reserved_word" dcl 7-14
                                                                                  in procedure "cobol_replb" ref 691 775 1521 1548
                                                                                  1571
type                      3            based           fixed bin(7,0)           level 2 in structure "user_word" dcl 90 in procedure
                                                                                  "cobol_replb" ref 507 555 659 935 1020 1081 1108
                                                                                  1110 1114 1205 1209 1301 1327 1353 1377 1383 1529
                                                                                  1537 1857 1860 1868 1949 1963 2032
type                      3     003362 automatic       fixed bin(17,0)          level 2 in structure "lev_diag_item" dcl 2171
                                                                                  in procedure "lev_diag" set ref 2181*
type                      3            based           fixed bin(7,0)           level 2 in structure "auser_word" dcl 151
                                                                                  in procedure "cobol_replb" set ref 1816*
type                      3     000703 automatic       fixed bin(17,0)          initial level 2 in structure "adiag" dcl 174
                                                                                  in procedure "cobol_replb" set ref 174*
type                      3     001756 automatic       fixed bin(17,0)          level 2 in structure "type40" dcl 446 in procedure
                                                                                  "cobol_replb" set ref 1396*
type                      3            based           fixed bin(17,0)          level 2 in structure "proc_def" dcl 11-14
                                                                                  in procedure "cobol_replb" set ref 1497* 1499*
type                      3            based           fixed bin(17,0)          level 2 in structure "data_name" dcl 13-16
                                                                                  in procedure "cobol_replb" ref 624 650 731 733 920
                                                                                  926 968 993 993 1061 1061 1061 1717 1730 2197
type                      3     000674 automatic       fixed bin(7,0)           initial level 2 in structure "res_word_of" dcl 162
                                                                                  in procedure "cobol_replb" set ref 162*
type                      3            based           fixed bin(17,0)          level 2 in structure "fd_token" dcl 15-16
                                                                                  in procedure "cobol_replb" ref 1223
type17                          000072 internal static structure                level 1 unaligned dcl 420 set ref 1422 1422
type25_flag                     001754 automatic       bit(1)                   packed unaligned dcl 381 set ref 499* 1110* 1478
type40                          001756 automatic       structure                level 1 unaligned dcl 446 set ref 1403 1403 1406
                                                                                  1406
user_word                              based           structure                level 1 unaligned dcl 90
using_count                     001744 automatic       fixed bin(15,0)          dcl 332 set ref 497* 562* 562 575 613 624 636 650
warn_OBSOLETE_MNEMONIC_NAME            constant        fixed bin(17,0)          initial dcl 19-23 ref 1431
warn_SPECIAL_NAMES_RECOVERY            constant        fixed bin(17,0)          initial dcl 19-25 ref 1444
was_found                       000275 automatic       bit(1)                   packed unaligned dcl 134 set ref 1216* 1220 1307*
                                                                                  1333* 1361* 1389* 1584* 1587 1592* 1598
word                      6            based           char(30)                 level 2 in structure "user_word" packed packed
                                                                                  unaligned dcl 90 in procedure "cobol_replb" set
                                                                                  ref 1301 1301 1327 1327 1353 1356 1383 1383 1398
                                                                                  1420 1448 1774
word                      6            based           char(30)                 level 2 in structure "auser_word" packed packed
                                                                                  unaligned dcl 151 in procedure "cobol_replb" set
                                                                                  ref 1820*
xref_chain                             based           structure                level 1 packed packed unaligned dcl 17-21
xref_ptr                        002212 automatic       pointer                  dcl 17-19 set ref 1639* 1640 1640 1642 1643
xrn                     133(06)        based           bit(1)                   level 3 packed packed unaligned dcl 3-26 ref 1632

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
a_dataname                             internal static fixed bin(15,0)          initial dcl 307
all_flag                               automatic       bit(1)                   packed unaligned dcl 326
allo1_max                              defined         fixed bin(17,0)          dcl 18-171
allo1_ptr                              defined         pointer                  dcl 18-67
alter_flag                             defined         fixed bin(17,0)          dcl 18-135
alter_index                            defined         fixed bin(17,0)          dcl 18-153
alter_list_ptr                         defined         pointer                  dcl 18-39
call_scan                              automatic       bit(1)                   packed unaligned dcl 305
cd_cnt                                 defined         fixed bin(17,0)          dcl 18-197
clinage_counter                        internal static char(14)                 initial packed unaligned dcl 351
cline_counter                          internal static char(12)                 initial packed unaligned dcl 351
cobol_$allo1_max                       external static fixed bin(17,0)          dcl 18-170
cobol_$allo1_ptr                       external static pointer                  dcl 18-66
cobol_$alter_flag                      external static fixed bin(17,0)          dcl 18-134
cobol_$alter_index                     external static fixed bin(17,0)          dcl 18-152
cobol_$alter_list_ptr                  external static pointer                  dcl 18-38
cobol_$cd_cnt                          external static fixed bin(17,0)          dcl 18-196
cobol_$cobol_data_wd_off               external static fixed bin(17,0)          dcl 18-118
cobol_$coms_charcnt                    external static fixed bin(17,0)          dcl 18-188
cobol_$coms_wdoff                      external static fixed bin(17,0)          dcl 18-202
cobol_$con_end_ptr                     external static pointer                  dcl 18-10
cobol_$con_wd_off                      external static fixed bin(17,0)          dcl 18-92
cobol_$cons_charcnt                    external static fixed bin(17,0)          dcl 18-192
cobol_$constant_offset                 external static fixed bin(17,0)          dcl 18-156
cobol_$data_init_flag                  external static fixed bin(17,0)          dcl 18-130
cobol_$date_compiled_sw                external static fixed bin(17,0)          dcl 18-180
cobol_$debug_enable                    external static fixed bin(17,0)          dcl 18-174
cobol_$def_base_ptr                    external static pointer                  dcl 18-12
cobol_$def_max                         external static fixed bin(17,0)          dcl 18-96
cobol_$def_wd_off                      external static fixed bin(17,0)          dcl 18-94
cobol_$diag_ptr                        external static pointer                  dcl 18-70
cobol_$eln_max                         external static fixed bin(17,0)          dcl 18-172
cobol_$eln_ptr                         external static pointer                  dcl 18-68
cobol_$fixup_max                       external static fixed bin(17,0)          dcl 18-164
cobol_$fixup_ptr                       external static pointer                  dcl 18-30
cobol_$fs_charcnt                      external static fixed bin(17,0)          dcl 18-184
cobol_$fs_wdoff                        external static fixed bin(17,0)          dcl 18-198
cobol_$include_cnt                     external static fixed bin(17,0)          dcl 18-182
cobol_$include_info_ptr                external static pointer                  dcl 18-86
cobol_$init_stack_off                  external static fixed bin(17,0)          dcl 18-124
cobol_$initval_base_ptr                external static pointer                  dcl 18-32
cobol_$initval_file_ptr                external static pointer                  dcl 18-34
cobol_$initval_flag                    external static fixed bin(17,0)          dcl 18-178
cobol_$link_base_ptr                   external static pointer                  dcl 18-14
cobol_$link_max                        external static fixed bin(17,0)          dcl 18-100
cobol_$link_wd_off                     external static fixed bin(17,0)          dcl 18-98
cobol_$list_off                        external static fixed bin(17,0)          dcl 18-154
cobol_$list_ptr                        external static pointer                  dcl 18-64
cobol_$ls_charcnt                      external static fixed bin(17,0)          dcl 18-190
cobol_$main_pcs_ptr                    external static pointer                  dcl 18-84
cobol_$map_data_max                    external static fixed bin(17,0)          dcl 18-162
cobol_$map_data_ptr                    external static pointer                  dcl 18-54
cobol_$max_stack_off                   external static fixed bin(17,0)          dcl 18-122
cobol_$minpral5_ptr                    external static pointer                  dcl 18-50
cobol_$misc_base_ptr                   external static pointer                  dcl 18-60
cobol_$misc_end_ptr                    external static pointer                  dcl 18-62
cobol_$misc_max                        external static fixed bin(17,0)          dcl 18-158
cobol_$next_tag                        external static fixed bin(17,0)          dcl 18-128
cobol_$non_source_offset               external static fixed bin(17,0)          dcl 18-176
cobol_$ntbuf_ptr                       external static pointer                  dcl 18-82
cobol_$obj_seg_name                    external static char(32)                 dcl 18-208
cobol_$op_con_ptr                      external static pointer                  dcl 18-80
cobol_$para_eop_flag                   external static fixed bin(17,0)          dcl 18-138
cobol_$pd_map_index                    external static fixed bin(17,0)          dcl 18-116
cobol_$pd_map_max                      external static fixed bin(17,0)          dcl 18-160
cobol_$pd_map_ptr                      external static pointer                  dcl 18-28
cobol_$pd_map_sw                       external static fixed bin(17,0)          dcl 18-126
cobol_$perform_list_ptr                external static pointer                  dcl 18-36
cobol_$perform_para_index              external static fixed bin(17,0)          dcl 18-148
cobol_$perform_sect_index              external static fixed bin(17,0)          dcl 18-150
cobol_$priority_no                     external static fixed bin(17,0)          dcl 18-140
cobol_$ptr_assumption_ind              external static fixed bin(17,0)          dcl 18-144
cobol_$ptr_status_ptr                  external static pointer                  dcl 18-56
cobol_$reg_assumption_ind              external static fixed bin(17,0)          dcl 18-146
cobol_$reg_status_ptr                  external static pointer                  dcl 18-58
cobol_$reloc_def_base_ptr              external static pointer                  dcl 18-20
cobol_$reloc_def_max                   external static fixed bin(24,0)          dcl 18-108
cobol_$reloc_link_base_ptr             external static pointer                  dcl 18-22
cobol_$reloc_link_max                  external static fixed bin(24,0)          dcl 18-110
cobol_$reloc_sym_base_ptr              external static pointer                  dcl 18-24
cobol_$reloc_sym_max                   external static fixed bin(24,0)          dcl 18-112
cobol_$reloc_text_base_ptr             external static pointer                  dcl 18-18
cobol_$reloc_text_max                  external static fixed bin(24,0)          dcl 18-106
cobol_$reloc_work_base_ptr             external static pointer                  dcl 18-26
cobol_$reloc_work_max                  external static fixed bin(24,0)          dcl 18-114
cobol_$reswd_ptr                       external static pointer                  dcl 18-78
cobol_$same_sort_merge_proc            external static bit(1)                   dcl 18-214
cobol_$scratch_dir                     external static char(168)                dcl 18-206
cobol_$sect_eop_flag                   external static fixed bin(17,0)          dcl 18-136
cobol_$seg_init_flag                   external static fixed bin(17,0)          dcl 18-132
cobol_$seg_init_list_ptr               external static pointer                  dcl 18-40
cobol_$stack_off                       external static fixed bin(17,0)          dcl 18-120
cobol_$statement_info_ptr              external static pointer                  dcl 18-76
cobol_$sym_base_ptr                    external static pointer                  dcl 18-16
cobol_$sym_max                         external static fixed bin(17,0)          dcl 18-104
cobol_$sym_wd_off                      external static fixed bin(17,0)          dcl 18-102
cobol_$tag_table_max                   external static fixed bin(17,0)          dcl 18-166
cobol_$tag_table_ptr                   external static pointer                  dcl 18-52
cobol_$temp_token_area_ptr             external static pointer                  dcl 18-42
cobol_$temp_token_max                  external static fixed bin(17,0)          dcl 18-168
cobol_$temp_token_ptr                  external static pointer                  dcl 18-44
cobol_$text_base_ptr                   external static pointer                  dcl 18-8
cobol_$text_wd_off                     external static fixed bin(17,0)          dcl 18-90
cobol_$token_block1_ptr                external static pointer                  dcl 18-46
cobol_$token_block2_ptr                external static pointer                  dcl 18-48
cobol_$value_cnt                       external static fixed bin(17,0)          dcl 18-194
cobol_$ws_charcnt                      external static fixed bin(17,0)          dcl 18-186
cobol_$ws_wdoff                        external static fixed bin(17,0)          dcl 18-200
cobol_$xref_bypass                     external static bit(1)                   dcl 18-212
cobol_$xref_token_ptr                  external static pointer                  dcl 18-72
cobol_afp                              defined         pointer                  dcl 1-11
cobol_analin_fileno                    defined         pointer                  dcl 1-13
cobol_cname_record                     automatic       char(500)                packed unaligned dcl 265
cobol_com_fileno                       defined         pointer                  dcl 1-23
cobol_cvar_record                      automatic       char(500)                packed unaligned dcl 264
cobol_data_wd_off                      defined         fixed bin(17,0)          dcl 18-119
cobol_dfp                              defined         pointer                  dcl 1-27
cobol_eltp                             defined         pointer                  dcl 1-19
cobol_ext_$cobol_afp                   external static pointer                  dcl 1-10
cobol_ext_$cobol_analin_fileno         external static pointer                  dcl 1-12
cobol_ext_$cobol_com_fileno            external static pointer                  dcl 1-22
cobol_ext_$cobol_dfp                   external static pointer                  dcl 1-26
cobol_ext_$cobol_eltp                  external static pointer                  dcl 1-18
cobol_ext_$cobol_fileno1               external static fixed bin(24,0)          dcl 1-78
cobol_ext_$cobol_hfp                   external static pointer                  dcl 1-28
cobol_ext_$cobol_lpr                   external static char(5)                  packed unaligned dcl 1-95
cobol_ext_$cobol_m1fp                  external static pointer                  dcl 1-30
cobol_ext_$cobol_m2fp                  external static pointer                  dcl 1-32
cobol_ext_$cobol_min1_fileno           external static pointer                  dcl 1-34
cobol_ext_$cobol_min2_fileno_ptr       external static pointer                  dcl 1-36
cobol_ext_$cobol_name_fileno           external static pointer                  dcl 1-38
cobol_ext_$cobol_name_fileno_ptr       external static pointer                  dcl 1-40
cobol_ext_$cobol_ntfp                  external static pointer                  dcl 1-42
cobol_ext_$cobol_options               external static char(120)                packed unaligned dcl 1-97
cobol_ext_$cobol_options_len           external static fixed bin(24,0)          dcl 1-80
cobol_ext_$cobol_pdofp                 external static pointer                  dcl 1-44
cobol_ext_$cobol_pdout_fileno          external static fixed bin(24,0)          dcl 1-82
cobol_ext_$cobol_pfp                   external static pointer                  dcl 1-46
cobol_ext_$cobol_print_fileno          external static fixed bin(24,0)          dcl 1-84
cobol_ext_$cobol_rm2fp                 external static pointer                  dcl 1-48
cobol_ext_$cobol_rmin2_fileno          external static fixed bin(24,0)          dcl 1-86
cobol_ext_$cobol_rmin2fp               external static pointer                  dcl 1-50
cobol_ext_$cobol_rwdd                  external static pointer                  dcl 1-72
cobol_ext_$cobol_rwpd                  external static pointer                  dcl 1-74
cobol_ext_$cobol_sfp                   external static pointer                  dcl 1-56
cobol_ext_$cobol_w1p                   external static pointer                  dcl 1-58
cobol_ext_$cobol_w2p                   external static pointer                  dcl 1-60
cobol_ext_$cobol_w3p                   external static pointer                  dcl 1-62
cobol_ext_$cobol_w5p                   external static pointer                  dcl 1-64
cobol_ext_$cobol_w6p                   external static pointer                  dcl 1-66
cobol_ext_$cobol_w7p                   external static pointer                  dcl 1-68
cobol_ext_$cobol_x1_fileno             external static fixed bin(24,0)          dcl 1-88
cobol_ext_$cobol_x2_fileno             external static fixed bin(24,0)          dcl 1-90
cobol_ext_$cobol_x3_fileno             external static fixed bin(24,0)          dcl 1-92
cobol_ext_$cobol_x3fp                  external static pointer                  dcl 1-70
cobol_ext_$cobol_xlast8                external static bit(1)                   packed unaligned dcl 1-100
cobol_ext_$report_exists               external static bit(1)                   packed unaligned dcl 1-102
cobol_ext_$report_first_token          external static pointer                  dcl 1-14
cobol_ext_$report_last_token           external static pointer                  dcl 1-16
cobol_fileno1                          defined         fixed bin(24,0)          dcl 1-79
cobol_hfp                              defined         pointer                  dcl 1-29
cobol_lpr                              defined         char(5)                  packed unaligned dcl 1-96
cobol_m1fp                             defined         pointer                  dcl 1-31
cobol_m2fp                             defined         pointer                  dcl 1-33
cobol_min1_fileno                      defined         pointer                  dcl 1-35
cobol_min2_fileno_ptr                  defined         pointer                  dcl 1-37
cobol_name_fileno                      defined         pointer                  dcl 1-39
cobol_name_fileno_ptr                  defined         pointer                  dcl 1-41
cobol_ntfp                             defined         pointer                  dcl 1-43
cobol_options                          defined         char(120)                packed unaligned dcl 1-98
cobol_options_len                      defined         fixed bin(24,0)          dcl 1-81
cobol_pdofp                            defined         pointer                  dcl 1-45
cobol_pdout_fileno                     defined         fixed bin(24,0)          dcl 1-83
cobol_pfp                              defined         pointer                  dcl 1-47
cobol_print_fileno                     defined         fixed bin(24,0)          dcl 1-85
cobol_rm2fp                            defined         pointer                  dcl 1-49
cobol_rmin2_fileno                     defined         fixed bin(24,0)          dcl 1-87
cobol_rmin2fp                          defined         pointer                  dcl 1-51
cobol_rwdd                             defined         pointer                  dcl 1-73
cobol_rwpd                             defined         pointer                  dcl 1-75
cobol_sfp                              defined         pointer                  dcl 1-57
cobol_swf_close                 000000 constant        entry                    external dcl 2-13
cobol_swf_open                  000000 constant        entry                    external dcl 2-7
cobol_vdwf_close                000000 constant        entry                    external dcl 2-23
cobol_vdwf_dput                 000000 constant        entry                    external dcl 2-21
cobol_vdwf_open                 000000 constant        entry                    external dcl 2-6
cobol_vdwf_sget                 000000 constant        entry                    external dcl 2-15
cobol_vdwf_sput                 000000 constant        entry                    external dcl 2-17
cobol_w1p                              defined         pointer                  dcl 1-59
cobol_w2p                              defined         pointer                  dcl 1-61
cobol_w3p                              defined         pointer                  dcl 1-63
cobol_w5p                              defined         pointer                  dcl 1-65
cobol_w6p                              defined         pointer                  dcl 1-67
cobol_w7p                              defined         pointer                  dcl 1-69
cobol_x1_fileno                        defined         fixed bin(24,0)          dcl 1-89
cobol_x2_fileno                        defined         fixed bin(24,0)          dcl 1-91
cobol_x3_fileno                        defined         fixed bin(24,0)          dcl 1-93
cobol_x3fp                             defined         pointer                  dcl 1-71
cobol_xlast8                           defined         bit(1)                   packed unaligned dcl 1-101
compile_count                          defined         fixed bin(17,0)          dcl 18-143
coms_charcnt                           defined         fixed bin(17,0)          dcl 18-189
coms_wdoff                             defined         fixed bin(17,0)          dcl 18-203
con_end_ptr                            defined         pointer                  dcl 18-11
con_wd_off                             defined         fixed bin(17,0)          dcl 18-93
cons_charcnt                           defined         fixed bin(17,0)          dcl 18-193
constant_offset                        defined         fixed bin(17,0)          dcl 18-157
cpage_counter                          internal static char(12)                 initial packed unaligned dcl 351
csystem_status                         internal static char(13)                 initial packed unaligned dcl 351
ctally                                 internal static char(5)                  initial packed unaligned dcl 351
curr_input                             automatic       pointer                  dcl 2-30
curr_output                            automatic       pointer                  dcl 2-31
data_init_flag                         defined         fixed bin(17,0)          dcl 18-131
date_compiled_sw                       defined         fixed bin(17,0)          dcl 18-181
db_token                               based           structure                level 1 unaligned dcl 124
debug_alit                             based           structure                level 1 unaligned dcl 313
debug_enable                           defined         fixed bin(17,0)          dcl 18-175
def_base_ptr                           defined         pointer                  dcl 18-13
def_max                                defined         fixed bin(17,0)          dcl 18-97
def_wd_off                             defined         fixed bin(17,0)          dcl 18-95
diag_ptr                               defined         pointer                  dcl 18-71
dn_ptr                                 automatic       pointer                  dcl 85
eln_max                                defined         fixed bin(17,0)          dcl 18-173
eln_ptr                                defined         pointer                  dcl 18-69
eof                                    internal static bit(1)                   initial packed unaligned dcl 51
eof_found                              internal static fixed bin(15,0)          initial dcl 307
fatal_ALPHABET_NAME_QUALIFIER          internal static fixed bin(17,0)          initial dcl 19-20
fatal_AMBIGUOUS_PROCNAME_REF           internal static fixed bin(17,0)          initial dcl 19-30
fatal_AMBIGUOUS_QUAL_REF               internal static fixed bin(17,0)          initial dcl 19-8
fatal_AMBIGUOUS_UNQUAL_REF             internal static fixed bin(17,0)          initial dcl 19-6
fatal_CDNAME_MULTIPLY_DECLARED         internal static fixed bin(17,0)          initial dcl 19-48
fatal_DATANAME_EXPECTED                internal static fixed bin(17,0)          initial dcl 19-32
fatal_DATANAME_MULTIPLY_DECLARED       internal static fixed bin(17,0)          initial dcl 19-11
fatal_DATANAME_NOT_NUMERIC             internal static fixed bin(17,0)          initial dcl 19-33
fatal_DATANAME_SUBSCRIPTED             internal static fixed bin(17,0)          initial dcl 19-37
fatal_FILENAME_MULTIPLY_DECLARED       internal static fixed bin(17,0)          initial dcl 19-26
fatal_INDEX_NAME_QUALIFIER             internal static fixed bin(17,0)          initial dcl 19-19
fatal_ITEM_IN_COM_SECTION              internal static fixed bin(17,0)          initial dcl 19-40
fatal_ITEM_IN_CONSTANT_SECTION         internal static fixed bin(17,0)          initial dcl 19-42
fatal_ITEM_IN_REPORT_SECTION           internal static fixed bin(17,0)          initial dcl 19-41
fatal_KEY_NOT_IN_RECORD                internal static fixed bin(17,0)          initial dcl 19-49
fatal_MNEMONIC_NAME_EXPECTED           internal static fixed bin(17,0)          initial dcl 19-22
fatal_MNEMONIC_NAME_QUALIFIER          internal static fixed bin(17,0)          initial dcl 19-18
fatal_PROCNAME_MULTIPLY_DECLARED       internal static fixed bin(17,0)          initial dcl 19-10
fatal_SAME_RECORD_OFFSET               internal static fixed bin(17,0)          initial dcl 19-50
first_time                             automatic       bit(1)                   packed unaligned dcl 202
first_workfile_ref                     internal static bit(1)                   initial packed unaligned dcl 203
fixup_max                              defined         fixed bin(17,0)          dcl 18-165
fixup_ptr                              defined         pointer                  dcl 18-31
fs_charcnt                             defined         fixed bin(17,0)          dcl 18-185
fs_wdoff                               defined         fixed bin(17,0)          dcl 18-199
ilength                                automatic       fixed bin(15,0)          dcl 325
include_cnt                            defined         fixed bin(17,0)          dcl 18-183
include_info_ptr                       defined         pointer                  dcl 18-87
inext                                  automatic       fixed bin(15,0)          dcl 324
init_stack_off                         defined         fixed bin(17,0)          dcl 18-125
initval_base_ptr                       defined         pointer                  dcl 18-33
initval_file_ptr                       defined         pointer                  dcl 18-35
initval_flag                           defined         fixed bin(17,0)          dcl 18-179
j                                      automatic       fixed bin(17,0)          dcl 134
key1                                   automatic       char(5)                  packed unaligned dcl 2-29
keyno                                  automatic       char(5)                  packed unaligned dcl 2-28
levstack                               automatic       fixed bin(15,0)          array dcl 185
link_base_ptr                          defined         pointer                  dcl 18-15
link_max                               defined         fixed bin(17,0)          dcl 18-101
link_wd_off                            defined         fixed bin(17,0)          dcl 18-99
list_off                               defined         fixed bin(17,0)          dcl 18-155
list_ptr                               defined         pointer                  dcl 18-65
lit_of                                 internal static char(4)                  initial packed unaligned dcl 323
ls_charcnt                             defined         fixed bin(17,0)          dcl 18-191
main_pcs_ptr                           defined         pointer                  dcl 18-85
map_data_max                           defined         fixed bin(17,0)          dcl 18-163
map_data_ptr                           defined         pointer                  dcl 18-55
max_stack_off                          defined         fixed bin(17,0)          dcl 18-123
mcobol_xref                            automatic       bit(1)                   packed unaligned dcl 17-5
message                                based           structure                level 1 unaligned dcl 90
minpral5_ptr                           defined         pointer                  dcl 18-51
misc_base_ptr                          defined         pointer                  dcl 18-61
misc_end_ptr                           defined         pointer                  dcl 18-63
misc_max                               defined         fixed bin(17,0)          dcl 18-159
next_tag                               defined         fixed bin(17,0)          dcl 18-129
nlit_ptr                               automatic       pointer                  dcl 9-11
non_source_offset                      defined         fixed bin(17,0)          dcl 18-177
ntbuf_ptr                              defined         pointer                  dcl 18-83
ntptr1                                 automatic       pointer                  dcl 134
obj_seg_name                           defined         char(32)                 dcl 18-209
obs_KEY_IN_RECORD                      internal static fixed bin(17,0)          initial dcl 19-13
obs_KEY_NOT_IN_RECORD                  internal static fixed bin(17,0)          initial dcl 19-14
op_con_ptr                             defined         pointer                  dcl 18-81
para_eop_flag                          defined         fixed bin(17,0)          dcl 18-139
pd_map_index                           defined         fixed bin(17,0)          dcl 18-117
pd_map_max                             defined         fixed bin(17,0)          dcl 18-161
pd_map_ptr                             defined         pointer                  dcl 18-29
pd_map_sw                              defined         fixed bin(17,0)          dcl 18-127
perform_list_ptr                       defined         pointer                  dcl 18-37
perform_para_index                     defined         fixed bin(17,0)          dcl 18-149
perform_sect_index                     defined         fixed bin(17,0)          dcl 18-151
picture                                based           structure                level 1 unaligned dcl 90
priority_no                            defined         fixed bin(17,0)          dcl 18-141
proc_def_ptr                           automatic       pointer                  dcl 11-11
ptr_assumption_ind                     defined         fixed bin(17,0)          dcl 18-145
ptr_status_ptr                         defined         pointer                  dcl 18-57
recover_code                           automatic       fixed bin(15,0)          dcl 306
recsize                                automatic       fixed bin(17,0)          dcl 2-32
reg_assumption_ind                     defined         fixed bin(17,0)          dcl 18-147
reg_status_ptr                         defined         pointer                  dcl 18-59
reloc_def_base_ptr                     defined         pointer                  dcl 18-21
reloc_def_max                          defined         fixed bin(24,0)          dcl 18-109
reloc_link_base_ptr                    defined         pointer                  dcl 18-23
reloc_link_max                         defined         fixed bin(24,0)          dcl 18-111
reloc_sym_base_ptr                     defined         pointer                  dcl 18-25
reloc_sym_max                          defined         fixed bin(24,0)          dcl 18-113
reloc_text_base_ptr                    defined         pointer                  dcl 18-19
reloc_text_max                         defined         fixed bin(24,0)          dcl 18-107
reloc_work_base_ptr                    defined         pointer                  dcl 18-27
reloc_work_max                         defined         fixed bin(24,0)          dcl 18-115
report_exists                          defined         bit(1)                   packed unaligned dcl 1-103
report_first_token                     defined         pointer                  dcl 1-15
report_last_token                      defined         pointer                  dcl 1-17
reschar_2EQs                           internal static fixed bin(17,0)          initial dcl 21-286
reschar_2STARs                         internal static fixed bin(17,0)          initial dcl 21-204
reschar_EQ                             internal static fixed bin(17,0)          initial dcl 21-108
reschar_GT                             internal static fixed bin(17,0)          initial dcl 21-121
reschar_LT                             internal static fixed bin(17,0)          initial dcl 21-135
reschar_MINUS                          internal static fixed bin(17,0)          initial dcl 21-201
reschar_PERIOD                         internal static fixed bin(17,0)          initial dcl 21-207
reschar_PLUS                           internal static fixed bin(17,0)          initial dcl 21-200
reschar_SLASH                          internal static fixed bin(17,0)          initial dcl 21-203
reschar_STAR                           internal static fixed bin(17,0)          initial dcl 21-202
reswd_ACCEPT                           internal static fixed bin(17,0)          initial dcl 21-19
reswd_ACCESS                           internal static fixed bin(17,0)          initial dcl 21-343
reswd_ADD                              internal static fixed bin(17,0)          initial dcl 21-20
reswd_ADDRESS                          internal static fixed bin(17,0)          initial dcl 21-345
reswd_ADVANCING                        internal static fixed bin(17,0)          initial dcl 21-74
reswd_AFTER                            internal static fixed bin(17,0)          initial dcl 21-75
reswd_ALL                              internal static fixed bin(17,0)          initial dcl 21-76
reswd_ALPHABET                         internal static fixed bin(17,0)          initial dcl 21-346
reswd_ALPHABETIC                       internal static fixed bin(17,0)          initial dcl 21-77
reswd_ALPHANUMERIC                     internal static fixed bin(17,0)          initial dcl 21-78
reswd_ALPHANUMERIC_EDITED              internal static fixed bin(17,0)          initial dcl 21-79
reswd_ALSO                             internal static fixed bin(17,0)          initial dcl 21-100
reswd_ALTER                            internal static fixed bin(17,0)          initial dcl 21-22
reswd_ALTERNATE                        internal static fixed bin(17,0)          initial dcl 21-349
reswd_AND                              internal static fixed bin(17,0)          initial dcl 21-80
reswd_APPLY                            internal static fixed bin(17,0)          initial dcl 21-350
reswd_ARE                              internal static fixed bin(17,0)          initial dcl 21-128
reswd_AREA                             internal static fixed bin(17,0)          initial dcl 21-219
reswd_AREAS                            internal static fixed bin(17,0)          initial dcl 21-219
reswd_ASCENDING                        internal static fixed bin(17,0)          initial dcl 21-81
reswd_ASSIGN                           internal static fixed bin(17,0)          initial dcl 21-351
reswd_AT                               internal static fixed bin(17,0)          initial dcl 21-82
reswd_AUTHOR                           internal static fixed bin(17,0)          initial dcl 21-352
reswd_BEFORE                           internal static fixed bin(17,0)          initial dcl 21-83
reswd_BEGINNING                        internal static fixed bin(17,0)          initial dcl 21-84
reswd_BIT                              internal static fixed bin(17,0)          initial dcl 21-213
reswd_BITS                             internal static fixed bin(17,0)          initial dcl 21-213
reswd_BLANK                            internal static fixed bin(17,0)          initial dcl 21-222
reswd_BLOCK                            internal static fixed bin(17,0)          initial dcl 21-223
reswd_BOOLEAN                          internal static fixed bin(17,0)          initial dcl 21-152
reswd_BOTTOM                           internal static fixed bin(17,0)          initial dcl 21-264
reswd_BSN                              internal static fixed bin(17,0)          initial dcl 21-330
reswd_BY                               internal static fixed bin(17,0)          initial dcl 21-85
reswd_CALL                             internal static fixed bin(17,0)          initial dcl 21-23
reswd_CANCEL                           internal static fixed bin(17,0)          initial dcl 21-25
reswd_CATALOGUE_NAME                   internal static fixed bin(17,0)          initial dcl 21-322
reswd_CATALOG_NAME                     internal static fixed bin(17,0)          initial dcl 21-322
reswd_CD                               internal static fixed bin(17,0)          initial dcl 21-224
reswd_CF                               internal static fixed bin(17,0)          initial dcl 21-353
reswd_CH                               internal static fixed bin(17,0)          initial dcl 21-354
reswd_CHARACTER                        internal static fixed bin(17,0)          initial dcl 21-86
reswd_CHARACTERS                       internal static fixed bin(17,0)          initial dcl 21-86
reswd_CLOCK_UNITS                      internal static fixed bin(17,0)          initial dcl 21-355
reswd_CLOSE                            internal static fixed bin(17,0)          initial dcl 21-26
reswd_COBOL                            internal static fixed bin(17,0)          initial dcl 21-209
reswd_CODE                             internal static fixed bin(17,0)          initial dcl 21-356
reswd_CODE_SET                         internal static fixed bin(17,0)          initial dcl 21-314
reswd_COLLATING                        internal static fixed bin(17,0)          initial dcl 21-357
reswd_COLUMN                           internal static fixed bin(17,0)          initial dcl 21-358
reswd_COMMA                            internal static fixed bin(17,0)          initial dcl 21-359
reswd_COMMUNICATION                    internal static fixed bin(17,0)          initial dcl 21-225
reswd_COMP                             internal static fixed bin(17,0)          initial dcl 21-113
reswd_COMPUTATIONAL                    internal static fixed bin(17,0)          initial dcl 21-113
reswd_COMPUTATIONAL_1                  internal static fixed bin(17,0)          initial dcl 21-233
reswd_COMPUTATIONAL_2                  internal static fixed bin(17,0)          initial dcl 21-235
reswd_COMPUTATIONAL_3                  internal static fixed bin(17,0)          initial dcl 21-231
reswd_COMPUTATIONAL_4                  internal static fixed bin(17,0)          initial dcl 21-227
reswd_COMPUTATIONAL_5                  internal static fixed bin(17,0)          initial dcl 21-229
reswd_COMPUTATIONAL_6                  internal static fixed bin(17,0)          initial dcl 21-308
reswd_COMPUTATIONAL_7                  internal static fixed bin(17,0)          initial dcl 21-305
reswd_COMPUTATIONAL_8                  internal static fixed bin(17,0)          initial dcl 21-448
reswd_COMPUTE                          internal static fixed bin(17,0)          initial dcl 21-57
reswd_COMP_1                           internal static fixed bin(17,0)          initial dcl 21-233
reswd_COMP_2                           internal static fixed bin(17,0)          initial dcl 21-235
reswd_COMP_3                           internal static fixed bin(17,0)          initial dcl 21-231
reswd_COMP_4                           internal static fixed bin(17,0)          initial dcl 21-227
reswd_COMP_5                           internal static fixed bin(17,0)          initial dcl 21-229
reswd_COMP_6                           internal static fixed bin(17,0)          initial dcl 21-308
reswd_COMP_7                           internal static fixed bin(17,0)          initial dcl 21-305
reswd_COMP_8                           internal static fixed bin(17,0)          initial dcl 21-448
reswd_CONFIGURATION                    internal static fixed bin(17,0)          initial dcl 21-360
reswd_CONSTANT                         internal static fixed bin(17,0)          initial dcl 21-237
reswd_CONTAINS                         internal static fixed bin(17,0)          initial dcl 21-238
reswd_CONTROL                          internal static fixed bin(17,0)          initial dcl 21-362
reswd_CONTROLS                         internal static fixed bin(17,0)          initial dcl 21-363
reswd_CONVERSION                       internal static fixed bin(17,0)          initial dcl 21-361
reswd_COPY                             internal static fixed bin(17,0)          initial dcl 21-364
reswd_CORR                             internal static fixed bin(17,0)          initial dcl 21-365
reswd_CORRESPONDING                    internal static fixed bin(17,0)          initial dcl 21-365
reswd_COUNT                            internal static fixed bin(17,0)          initial dcl 21-88
reswd_CURRENCY                         internal static fixed bin(17,0)          initial dcl 21-367
reswd_DATA                             internal static fixed bin(17,0)          initial dcl 21-216
reswd_DATE                             internal static fixed bin(17,0)          initial dcl 21-90
reswd_DATE_COMPILED                    internal static fixed bin(17,0)          initial dcl 21-369
reswd_DATE_WRITTEN                     internal static fixed bin(17,0)          initial dcl 21-370
reswd_DAY                              internal static fixed bin(17,0)          initial dcl 21-91
reswd_DAY_OF_WEEK                      internal static fixed bin(17,0)          initial dcl 21-317
reswd_DE                               internal static fixed bin(17,0)          initial dcl 21-371
reswd_DEBUGGING                        internal static fixed bin(17,0)          initial dcl 21-92
reswd_DEBUG_CONTENTS                   internal static fixed bin(17,0)          initial dcl 21-372
reswd_DEBUG_ITEM                       internal static fixed bin(17,0)          initial dcl 21-373
reswd_DEBUG_LINE                       internal static fixed bin(17,0)          initial dcl 21-374
reswd_DEBUG_NAME                       internal static fixed bin(17,0)          initial dcl 21-379
reswd_DEBUG_SUB_1                      internal static fixed bin(17,0)          initial dcl 21-375
reswd_DEBUG_SUB_2                      internal static fixed bin(17,0)          initial dcl 21-376
reswd_DEBUG_SUB_3                      internal static fixed bin(17,0)          initial dcl 21-377
reswd_DECIMAL_POINT                    internal static fixed bin(17,0)          initial dcl 21-380
reswd_DECLARATIVES                     internal static fixed bin(17,0)          initial dcl 21-93
reswd_DEFAULT                          internal static fixed bin(17,0)          initial dcl 21-312
reswd_DELETE                           internal static fixed bin(17,0)          initial dcl 21-40
reswd_DELIMITED                        internal static fixed bin(17,0)          initial dcl 21-94
reswd_DELIMITER                        internal static fixed bin(17,0)          initial dcl 21-95
reswd_DEPENDING                        internal static fixed bin(17,0)          initial dcl 21-96
reswd_DESCENDING                       internal static fixed bin(17,0)          initial dcl 21-97
reswd_DESTINATION                      internal static fixed bin(17,0)          initial dcl 21-241
reswd_DETAIL                           internal static fixed bin(17,0)          initial dcl 21-381
reswd_DISABLE                          internal static fixed bin(17,0)          initial dcl 21-58
reswd_DISPLAY                          internal static fixed bin(17,0)          initial dcl 21-59
reswd_DIVIDE                           internal static fixed bin(17,0)          initial dcl 21-27
reswd_DIVISION                         internal static fixed bin(17,0)          initial dcl 21-98
reswd_DOWN                             internal static fixed bin(17,0)          initial dcl 21-99
reswd_DUPLICATES                       internal static fixed bin(17,0)          initial dcl 21-252
reswd_DYNAMIC                          internal static fixed bin(17,0)          initial dcl 21-185
reswd_EGI                              internal static fixed bin(17,0)          initial dcl 21-260
reswd_ELSE                             internal static fixed bin(17,0)          initial dcl 21-100
reswd_EMI                              internal static fixed bin(17,0)          initial dcl 21-102
reswd_ENABLE                           internal static fixed bin(17,0)          initial dcl 21-60
reswd_END                              internal static fixed bin(17,0)          initial dcl 21-103
reswd_ENDING                           internal static fixed bin(17,0)          initial dcl 21-104
reswd_END_OF_PAGE                      internal static fixed bin(17,0)          initial dcl 21-105
reswd_ENTER                            internal static fixed bin(17,0)          initial dcl 21-61
reswd_ENVIRONMENT                      internal static fixed bin(17,0)          initial dcl 21-382
reswd_EOP                              internal static fixed bin(17,0)          initial dcl 21-105
reswd_EQUAL                            internal static fixed bin(17,0)          initial dcl 21-108
reswd_EQUALS                           internal static fixed bin(17,0)          initial dcl 21-108
reswd_ERROR                            internal static fixed bin(17,0)          initial dcl 21-21
reswd_ESI                              internal static fixed bin(17,0)          initial dcl 21-112
reswd_EVERY                            internal static fixed bin(17,0)          initial dcl 21-384
reswd_EXAMINE                          internal static fixed bin(17,0)          initial dcl 21-67
reswd_EXCEEDS                          internal static fixed bin(17,0)          initial dcl 21-121
reswd_EXCEPTION                        internal static fixed bin(17,0)          initial dcl 21-115
reswd_EXIT                             internal static fixed bin(17,0)          initial dcl 21-30
reswd_EXOR                             internal static fixed bin(17,0)          initial dcl 21-442
reswd_EXTEND                           internal static fixed bin(17,0)          initial dcl 21-239
reswd_EXTERNAL                         internal static fixed bin(17,0)          initial dcl 21-315
reswd_FD                               internal static fixed bin(17,0)          initial dcl 21-242
reswd_FILE                             internal static fixed bin(17,0)          initial dcl 21-116
reswd_FILES                            internal static fixed bin(17,0)          initial dcl 21-299
reswd_FILE_CONTROL                     internal static fixed bin(17,0)          initial dcl 21-385
reswd_FILLER                           internal static fixed bin(17,0)          initial dcl 21-243
reswd_FINAL                            internal static fixed bin(17,0)          initial dcl 21-387
reswd_FIRST                            internal static fixed bin(17,0)          initial dcl 21-117
reswd_FLR                              internal static fixed bin(17,0)          initial dcl 21-296
reswd_FOOTING                          internal static fixed bin(17,0)          initial dcl 21-388
reswd_FOR                              internal static fixed bin(17,0)          initial dcl 21-118
reswd_GIVING                           internal static fixed bin(17,0)          initial dcl 21-120
reswd_GO                               internal static fixed bin(17,0)          initial dcl 21-32
reswd_GREATER                          internal static fixed bin(17,0)          initial dcl 21-121
reswd_GROUP                            internal static fixed bin(17,0)          initial dcl 21-390
reswd_HEADING                          internal static fixed bin(17,0)          initial dcl 21-389
reswd_HIGH_VALUE                       internal static fixed bin(17,0)          initial dcl 21-244
reswd_HIGH_VALUES                      internal static fixed bin(17,0)          initial dcl 21-244
reswd_HOLD                             internal static fixed bin(17,0)          initial dcl 21-63
reswd_IDENTIFICATION                   internal static fixed bin(17,0)          initial dcl 21-393
reswd_IDS_II                           internal static fixed bin(17,0)          initial dcl 21-334
reswd_IF                               internal static fixed bin(17,0)          initial dcl 21-64
reswd_INDEX                            internal static fixed bin(17,0)          initial dcl 21-246
reswd_INDEXED                          internal static fixed bin(17,0)          initial dcl 21-247
reswd_INDICATE                         internal static fixed bin(17,0)          initial dcl 21-394
reswd_INITIAL                          internal static fixed bin(17,0)          initial dcl 21-124
reswd_INITIALIZE                       internal static fixed bin(17,0)          initial dcl 21-31
reswd_INPUT                            internal static fixed bin(17,0)          initial dcl 21-125
reswd_INPUT_OUTPUT                     internal static fixed bin(17,0)          initial dcl 21-130
reswd_INSPECT                          internal static fixed bin(17,0)          initial dcl 21-35
reswd_INSTALLATION                     internal static fixed bin(17,0)          initial dcl 21-395
reswd_INTERCHANGE                      internal static fixed bin(17,0)          initial dcl 21-318
reswd_INTO                             internal static fixed bin(17,0)          initial dcl 21-126
reswd_INVALID                          internal static fixed bin(17,0)          initial dcl 21-127
reswd_I_O                              internal static fixed bin(17,0)          initial dcl 21-130
reswd_I_O_CONTROL                      internal static fixed bin(17,0)          initial dcl 21-392
reswd_JUST                             internal static fixed bin(17,0)          initial dcl 21-248
reswd_JUSTIFIED                        internal static fixed bin(17,0)          initial dcl 21-248
reswd_KEY                              internal static fixed bin(17,0)          initial dcl 21-132
reswd_KEYED                            internal static fixed bin(17,0)          initial dcl 21-332
reswd_LABEL                            internal static fixed bin(17,0)          initial dcl 21-133
reswd_LAST                             internal static fixed bin(17,0)          initial dcl 21-397
reswd_LEADING                          internal static fixed bin(17,0)          initial dcl 21-134
reswd_LEFT                             internal static fixed bin(17,0)          initial dcl 21-250
reswd_LENGTH                           internal static fixed bin(17,0)          initial dcl 21-251
reswd_LESS                             internal static fixed bin(17,0)          initial dcl 21-135
reswd_LIMIT                            internal static fixed bin(17,0)          initial dcl 21-401
reswd_LIMITS                           internal static fixed bin(17,0)          initial dcl 21-402
reswd_LINAGE                           internal static fixed bin(17,0)          initial dcl 21-403
reswd_LINAGE_COUNTER                   internal static fixed bin(17,0)          initial dcl 21-404
reswd_LINE                             internal static fixed bin(17,0)          initial dcl 21-137
reswd_LINES                            internal static fixed bin(17,0)          initial dcl 21-137
reswd_LINE_COUNTER                     internal static fixed bin(17,0)          initial dcl 21-405
reswd_LINKAGE                          internal static fixed bin(17,0)          initial dcl 21-253
reswd_LOCK                             internal static fixed bin(17,0)          initial dcl 21-139
reswd_LOW_VALUE                        internal static fixed bin(17,0)          initial dcl 21-254
reswd_LOW_VALUES                       internal static fixed bin(17,0)          initial dcl 21-254
reswd_MEMORY                           internal static fixed bin(17,0)          initial dcl 21-407
reswd_MERGE                            internal static fixed bin(17,0)          initial dcl 21-33
reswd_MESSAGE                          internal static fixed bin(17,0)          initial dcl 21-140
reswd_MODE                             internal static fixed bin(17,0)          initial dcl 21-256
reswd_MODULES                          internal static fixed bin(17,0)          initial dcl 21-408
reswd_MOVE                             internal static fixed bin(17,0)          initial dcl 21-36
reswd_MULTIPLE                         internal static fixed bin(17,0)          initial dcl 21-409
reswd_MULTIPLY                         internal static fixed bin(17,0)          initial dcl 21-28
reswd_NATIVE                           internal static fixed bin(17,0)          initial dcl 21-303
reswd_NEGATIVE                         internal static fixed bin(17,0)          initial dcl 21-141
reswd_NEXT                             internal static fixed bin(17,0)          initial dcl 21-142
reswd_NO                               internal static fixed bin(17,0)          initial dcl 21-143
reswd_NOT                              internal static fixed bin(17,0)          initial dcl 21-144
reswd_NUMBER                           internal static fixed bin(17,0)          initial dcl 21-410
reswd_NUMERIC                          internal static fixed bin(17,0)          initial dcl 21-145
reswd_NUMERIC_EDITED                   internal static fixed bin(17,0)          initial dcl 21-146
reswd_OBJECT                           internal static fixed bin(17,0)          initial dcl 21-307
reswd_OBJECT_COMPUTER                  internal static fixed bin(17,0)          initial dcl 21-411
reswd_OCCURS                           internal static fixed bin(17,0)          initial dcl 21-257
reswd_OFF                              internal static fixed bin(17,0)          initial dcl 21-413
reswd_OMITTED                          internal static fixed bin(17,0)          initial dcl 21-221
reswd_ON                               internal static fixed bin(17,0)          initial dcl 21-148
reswd_OPEN                             internal static fixed bin(17,0)          initial dcl 21-37
reswd_OPTIONAL                         internal static fixed bin(17,0)          initial dcl 21-415
reswd_OR                               internal static fixed bin(17,0)          initial dcl 21-149
reswd_ORGANIZATION                     internal static fixed bin(17,0)          initial dcl 21-199
reswd_OUTPUT                           internal static fixed bin(17,0)          initial dcl 21-151
reswd_OVERFLOW                         internal static fixed bin(17,0)          initial dcl 21-24
reswd_PAGE                             internal static fixed bin(17,0)          initial dcl 21-153
reswd_PAGE_COUNTER                     internal static fixed bin(17,0)          initial dcl 21-417
reswd_PERFORM                          internal static fixed bin(17,0)          initial dcl 21-38
reswd_PF                               internal static fixed bin(17,0)          initial dcl 21-418
reswd_PH                               internal static fixed bin(17,0)          initial dcl 21-419
reswd_PIC                              internal static fixed bin(17,0)          initial dcl 21-258
reswd_PICTURE                          internal static fixed bin(17,0)          initial dcl 21-258
reswd_PLUS                             internal static fixed bin(17,0)          initial dcl 21-420
reswd_POINTER                          internal static fixed bin(17,0)          initial dcl 21-154
reswd_POSITION                         internal static fixed bin(17,0)          initial dcl 21-421
reswd_POSITIVE                         internal static fixed bin(17,0)          initial dcl 21-155
reswd_PRINTING                         internal static fixed bin(17,0)          initial dcl 21-399
reswd_PROCEDURE                        internal static fixed bin(17,0)          initial dcl 21-156
reswd_PROCEDURES                       internal static fixed bin(17,0)          initial dcl 21-157
reswd_PROCEED                          internal static fixed bin(17,0)          initial dcl 21-158
reswd_PROCESS                          internal static fixed bin(17,0)          initial dcl 21-65
reswd_PROCESSING                       internal static fixed bin(17,0)          initial dcl 21-159
reswd_PROCESS_AREA                     internal static fixed bin(17,0)          initial dcl 21-320
reswd_PROGRAM                          internal static fixed bin(17,0)          initial dcl 21-160
reswd_PROGRAM_ID                       internal static fixed bin(17,0)          initial dcl 21-422
reswd_PURGE                            internal static fixed bin(17,0)          initial dcl 21-72
reswd_QUEUE                            internal static fixed bin(17,0)          initial dcl 21-261
reswd_QUOTE                            internal static fixed bin(17,0)          initial dcl 21-262
reswd_QUOTES                           internal static fixed bin(17,0)          initial dcl 21-262
reswd_RANDOM                           internal static fixed bin(17,0)          initial dcl 21-161
reswd_RD                               internal static fixed bin(17,0)          initial dcl 21-423
reswd_READ                             internal static fixed bin(17,0)          initial dcl 21-39
reswd_RECEIVE                          internal static fixed bin(17,0)          initial dcl 21-41
reswd_RECORD                           internal static fixed bin(17,0)          initial dcl 21-162
reswd_RECORDING                        internal static fixed bin(17,0)          initial dcl 21-265
reswd_RECORDS                          internal static fixed bin(17,0)          initial dcl 21-215
reswd_REDEFINES                        internal static fixed bin(17,0)          initial dcl 21-266
reswd_REEL                             internal static fixed bin(17,0)          initial dcl 21-163
reswd_REFERENCES                       internal static fixed bin(17,0)          initial dcl 21-164
reswd_RELATIVE                         internal static fixed bin(17,0)          initial dcl 21-182
reswd_RELEASE                          internal static fixed bin(17,0)          initial dcl 21-42
reswd_REMAINDER                        internal static fixed bin(17,0)          initial dcl 21-165
reswd_REMOVAL                          internal static fixed bin(17,0)          initial dcl 21-291
reswd_RENAMES                          internal static fixed bin(17,0)          initial dcl 21-267
reswd_REPLACE                          internal static fixed bin(17,0)          initial dcl 21-336
reswd_REPLACING                        internal static fixed bin(17,0)          initial dcl 21-166
reswd_REPORT                           internal static fixed bin(17,0)          initial dcl 21-268
reswd_REPORTING                        internal static fixed bin(17,0)          initial dcl 21-167
reswd_REPORTS                          internal static fixed bin(17,0)          initial dcl 21-268
reswd_RERUN                            internal static fixed bin(17,0)          initial dcl 21-426
reswd_RESERVE                          internal static fixed bin(17,0)          initial dcl 21-427
reswd_RESET                            internal static fixed bin(17,0)          initial dcl 21-428
reswd_RETURN                           internal static fixed bin(17,0)          initial dcl 21-43
reswd_REVERSED                         internal static fixed bin(17,0)          initial dcl 21-168
reswd_REWIND                           internal static fixed bin(17,0)          initial dcl 21-169
reswd_REWRITE                          internal static fixed bin(17,0)          initial dcl 21-45
reswd_RF                               internal static fixed bin(17,0)          initial dcl 21-429
reswd_RH                               internal static fixed bin(17,0)          initial dcl 21-430
reswd_RIGHT                            internal static fixed bin(17,0)          initial dcl 21-270
reswd_ROUNDED                          internal static fixed bin(17,0)          initial dcl 21-170
reswd_RUN                              internal static fixed bin(17,0)          initial dcl 21-171
reswd_SA                               internal static fixed bin(17,0)          initial dcl 21-271
reswd_SAME                             internal static fixed bin(17,0)          initial dcl 21-431
reswd_SD                               internal static fixed bin(17,0)          initial dcl 21-272
reswd_SEARCH                           internal static fixed bin(17,0)          initial dcl 21-44
reswd_SECTION                          internal static fixed bin(17,0)          initial dcl 21-172
reswd_SECURITY                         internal static fixed bin(17,0)          initial dcl 21-432
reswd_SEGMENT                          internal static fixed bin(17,0)          initial dcl 21-173
reswd_SEGMENT_LIMIT                    internal static fixed bin(17,0)          initial dcl 21-433
reswd_SELECT                           internal static fixed bin(17,0)          initial dcl 21-434
reswd_SEND                             internal static fixed bin(17,0)          initial dcl 21-47
reswd_SENTENCE                         internal static fixed bin(17,0)          initial dcl 21-174
reswd_SEPARATE                         internal static fixed bin(17,0)          initial dcl 21-273
reswd_SEQUENTIAL                       internal static fixed bin(17,0)          initial dcl 21-435
reswd_SIGN                             internal static fixed bin(17,0)          initial dcl 21-274
reswd_SIZE                             internal static fixed bin(17,0)          initial dcl 21-175
reswd_SORT                             internal static fixed bin(17,0)          initial dcl 21-66
reswd_SORT_MERGE                       internal static fixed bin(17,0)          initial dcl 21-436
reswd_SOURCE                           internal static fixed bin(17,0)          initial dcl 21-275
reswd_SOURCE_COMPUTER                  internal static fixed bin(17,0)          initial dcl 21-437
reswd_SPACE                            internal static fixed bin(17,0)          initial dcl 21-210
reswd_SPACES                           internal static fixed bin(17,0)          initial dcl 21-210
reswd_SPANNED                          internal static fixed bin(17,0)          initial dcl 21-439
reswd_SPECIAL_NAMES                    internal static fixed bin(17,0)          initial dcl 21-438
reswd_SSF                              internal static fixed bin(17,0)          initial dcl 21-89
reswd_STANDARD                         internal static fixed bin(17,0)          initial dcl 21-176
reswd_STANDARD_1                       internal static fixed bin(17,0)          initial dcl 21-347
reswd_STANDARD_2                       internal static fixed bin(17,0)          initial dcl 21-226
reswd_START                            internal static fixed bin(17,0)          initial dcl 21-70
reswd_STATUS                           internal static fixed bin(17,0)          initial dcl 21-276
reswd_STOP                             internal static fixed bin(17,0)          initial dcl 21-50
reswd_STREAM                           internal static fixed bin(17,0)          initial dcl 21-328
reswd_STRING                           internal static fixed bin(17,0)          initial dcl 21-51
reswd_SUBSTITUTION                     internal static fixed bin(17,0)          initial dcl 21-338
reswd_SUBTRACT                         internal static fixed bin(17,0)          initial dcl 21-29
reswd_SUB_QUEUE_1                      internal static fixed bin(17,0)          initial dcl 21-277
reswd_SUB_QUEUE_2                      internal static fixed bin(17,0)          initial dcl 21-278
reswd_SUB_QUEUE_3                      internal static fixed bin(17,0)          initial dcl 21-279
reswd_SUM                              internal static fixed bin(17,0)          initial dcl 21-441
reswd_SUPPRESS                         internal static fixed bin(17,0)          initial dcl 21-71
reswd_SUSPEND                          internal static fixed bin(17,0)          initial dcl 21-52
reswd_SYMBOLIC                         internal static fixed bin(17,0)          initial dcl 21-280
reswd_SYNC                             internal static fixed bin(17,0)          initial dcl 21-281
reswd_SYNCHRONIZED                     internal static fixed bin(17,0)          initial dcl 21-281
reswd_TABLE                            internal static fixed bin(17,0)          initial dcl 21-283
reswd_TALLY                            internal static fixed bin(17,0)          initial dcl 21-212
reswd_TALLYING                         internal static fixed bin(17,0)          initial dcl 21-177
reswd_TAPE                             internal static fixed bin(17,0)          initial dcl 21-444
reswd_TERMINAL                         internal static fixed bin(17,0)          initial dcl 21-178
reswd_TEXT                             internal static fixed bin(17,0)          initial dcl 21-445
reswd_THAN                             internal static fixed bin(17,0)          initial dcl 21-179
reswd_THROUGH                          internal static fixed bin(17,0)          initial dcl 21-180
reswd_THRU                             internal static fixed bin(17,0)          initial dcl 21-180
reswd_TIME                             internal static fixed bin(17,0)          initial dcl 21-183
reswd_TIMES                            internal static fixed bin(17,0)          initial dcl 21-183
reswd_TO                               internal static fixed bin(17,0)          initial dcl 21-186
reswd_TOP                              internal static fixed bin(17,0)          initial dcl 21-208
reswd_TRAILING                         internal static fixed bin(17,0)          initial dcl 21-285
reswd_TRANSFORM                        internal static fixed bin(17,0)          initial dcl 21-68
reswd_TYPE                             internal static fixed bin(17,0)          initial dcl 21-446
reswd_UNEQUAL                          internal static fixed bin(17,0)          initial dcl 21-187
reswd_UNIT                             internal static fixed bin(17,0)          initial dcl 21-188
reswd_UNSTRING                         internal static fixed bin(17,0)          initial dcl 21-54
reswd_UNTIL                            internal static fixed bin(17,0)          initial dcl 21-189
reswd_UP                               internal static fixed bin(17,0)          initial dcl 21-190
reswd_USAGE                            internal static fixed bin(17,0)          initial dcl 21-287
reswd_USE                              internal static fixed bin(17,0)          initial dcl 21-56
reswd_USING                            internal static fixed bin(17,0)          initial dcl 21-192
reswd_VALUE                            internal static fixed bin(17,0)          initial dcl 21-288
reswd_VALUES                           internal static fixed bin(17,0)          initial dcl 21-288
reswd_VARYING                          internal static fixed bin(17,0)          initial dcl 21-193
reswd_VLR                              internal static fixed bin(17,0)          initial dcl 21-218
reswd_WHEN                             internal static fixed bin(17,0)          initial dcl 21-194
reswd_WITH                             internal static fixed bin(17,0)          initial dcl 21-195
reswd_WORDS                            internal static fixed bin(17,0)          initial dcl 21-447
reswd_WORKING_STORAGE                  internal static fixed bin(17,0)          initial dcl 21-290
reswd_WRITE                            internal static fixed bin(17,0)          initial dcl 21-55
reswd_ZERO                             internal static fixed bin(17,0)          initial dcl 21-196
reswd_ZEROES                           internal static fixed bin(17,0)          initial dcl 21-196
reswd_ZEROS                            internal static fixed bin(17,0)          initial dcl 21-196
reswd_ptr                              defined         pointer                  dcl 18-79
resword_all                            internal static fixed bin(15,0)          initial dcl 307
rw_ptr                                 automatic       pointer                  dcl 7-11
same_sort_merge_proc                   defined         bit(1)                   dcl 18-215
saved_storage_type                     automatic       bit(1)                   packed unaligned dcl 388
scratch_dir                            defined         char(168)                dcl 18-207
searching_for_another                  automatic       bit(1)                   packed unaligned dcl 389
sect_eop_flag                          defined         fixed bin(17,0)          dcl 18-137
seg_init_flag                          defined         fixed bin(17,0)          dcl 18-133
seg_init_list_ptr                      defined         pointer                  dcl 18-41
size                                                   builtin function         dcl 399
size_COMHDR                            internal static fixed bin(17,0)          initial dcl 20-8
size_NAMESIZE                          internal static fixed bin(17,0)          initial dcl 20-9
source                                 based           structure                level 1 unaligned dcl 90
stack_off                              defined         fixed bin(17,0)          dcl 18-121
statement_info_ptr                     defined         pointer                  dcl 18-77
status_word                            based           structure                level 1 packed packed unaligned dcl 1101
stmt_term                              internal static fixed bin(15,0)          initial dcl 307
sym_base_ptr                           defined         pointer                  dcl 18-17
sym_max                                defined         fixed bin(17,0)          dcl 18-105
sym_wd_off                             defined         fixed bin(17,0)          dcl 18-103
sz                                     automatic       fixed bin(17,0)          dcl 54
t26_size                               internal static fixed bin(15,0)          initial dcl 208
tag_table_max                          defined         fixed bin(17,0)          dcl 18-167
tag_table_ptr                          defined         pointer                  dcl 18-53
temp_cname_ptr                         automatic       pointer                  dcl 257
temp_cvar_ptr                          automatic       pointer                  dcl 258
temp_token_area_ptr                    defined         pointer                  dcl 18-43
temp_token_max                         defined         fixed bin(17,0)          dcl 18-169
temp_token_ptr                         defined         pointer                  dcl 18-45
template                               based           char(500)                packed unaligned dcl 134
template1                              based           char(1)                  array packed unaligned dcl 149
text_base_ptr                          defined         pointer                  dcl 18-9
text_wd_off                            defined         fixed bin(17,0)          dcl 18-91
token_area                             based           structure                level 1 unaligned dcl 17-7
token_block1_ptr                       defined         pointer                  dcl 18-47
token_block2_ptr                       defined         pointer                  dcl 18-49
value_cnt                              defined         fixed bin(17,0)          dcl 18-195
warn_BAD_ATTACH_OPTIONS                internal static fixed bin(17,0)          initial dcl 19-45
warn_BAD_CATALOG_NAME                  internal static fixed bin(17,0)          initial dcl 19-43
warn_BAD_STATUS_KEY                    internal static fixed bin(17,0)          initial dcl 19-15
warn_BAD_TAPE_CATALOG_NAME             internal static fixed bin(17,0)          initial dcl 19-44
warn_BAD_VALUE_OF_ID                   internal static fixed bin(17,0)          initial dcl 19-46
warn_BAD_VALUE_OF_RETENTION            internal static fixed bin(17,0)          initial dcl 19-47
warn_CONSTANT_ILLOGICAL                internal static fixed bin(17,0)          initial dcl 19-36
warn_DATANAME_NOT_ALPHANUM             internal static fixed bin(17,0)          initial dcl 19-16
warn_DATANAME_NOT_INTEGER              internal static fixed bin(17,0)          initial dcl 19-34
warn_DATANAME_VARLEN                   internal static fixed bin(17,0)          initial dcl 19-38
warn_ITEM_IN_FILE_SECTION              internal static fixed bin(17,0)          initial dcl 19-39
warn_ODO_RANGE                         internal static fixed bin(17,0)          initial dcl 19-35
ws_charcnt                             defined         fixed bin(17,0)          dcl 18-187
ws_wdoff                               defined         fixed bin(17,0)          dcl 18-201
xref_bypass                            defined         bit(1)                   dcl 18-213
xref_chain_ptr                         defined         pointer                  dcl 18-75
xref_token_ptr                         defined         pointer                  dcl 18-73

NAMES DECLARED BY EXPLICIT CONTEXT.
again                           003401 constant        label                    dcl 1527
cobol_replb                     000136 constant        entry                    external dcl 40
cvar_loop                       001327 constant        label                    dcl 924 ref 926
diag1                           003455 constant        label                    dcl 1554
found                           003666 constant        label                    dcl 1626 ref 1587 1598
found1                          003677 constant        label                    dcl 1632 ref 1580
issue_diag                      004376 constant        entry                    internal dcl 1784 ref 572 768 1608 1616 1664 1674
                                                                                  1802 1810 2057 2090
issue_obsolete_warning          004016 constant        entry                    internal dcl 1427 ref 1311 1337 1365 1393
l66_test                        005514 constant        entry                    internal dcl 2194 ref 1629
lev_diag                        005461 constant        entry                    internal dcl 2166 ref 961 1195 1439 1626 2197
notfound                        003641 constant        label                    dcl 1612 ref 1589 1600
perform_exit                    001305 constant        label                    dcl 904 ref 863 880 894
perform_read                    001143 constant        label                    dcl 819
perform_recover                 005341 constant        entry                    internal dcl 2104 ref 860
perform_scan                    001144 constant        label                    dcl 821 ref 850 852 857 883 898
perform_state                   000004 constant        label                    array(4) dcl 828 ref 825
perform_switch                  001153 constant        label                    dcl 825
perform_write                   001142 constant        label                    dcl 817 ref 866 878
perform_write_dname             001170 constant        label                    dcl 837 ref 892 910
process_subscript               004506 constant        entry                    internal dcl 1830 ref 938 1081
push                            004125 constant        entry                    internal dcl 1655 ref 1515 1533
push1                           004411 constant        entry                    internal dcl 1793 ref 1466 1543
push_name                       005252 constant        entry                    internal dcl 2070 ref 1904 1934 1976
push_special                    005201 constant        entry                    internal dcl 2043 ref 1850 1873 1882 1891 1927 1954
                                                                                  1968
put                             003656 constant        label                    dcl 1620 ref 1112 1469 1476 1478 1507
put1                            003662 constant        label                    dcl 1623 ref 1164 1165 1169 1173 1177 1180 1184 1282
                                                                                  1293
put_type17                      003767 constant        entry                    internal dcl 1415 ref 1319 1345 1369
read_more                       001640 constant        label                    dcl 1018 ref 1024
recover_analysis                005356 constant        label                    dcl 2119 ref 2160
recover_read                    005434 constant        label                    dcl 2152
recover_scan                    005442 constant        label                    dcl 2156 ref 2133 2145
recover_write                   005433 constant        label                    dcl 2150 ref 2127
rend                            002020 constant        label                    dcl 1652 ref 519 673 699 799 823 861 1706 2154 2158
repl3_scan                      002021 constant        entry                    internal dcl 1096 ref 517 671 698 798 821 1855 2011
                                                                                  2156
replab                          000010 constant        label                    array(8) dcl 1118 ref 1114
rloop                           000625 constant        label                    dcl 669 ref 680 684 786 808
rloop1                          000626 constant        label                    dcl 671 ref 682 771 788 801 907 939 965 979 1094
rloop2                          000630 constant        label                    dcl 673
rw                              000020 constant        label                    array(0:10) dcl 1160 ref 1158 1548
srchloop                        001656 constant        label                    dcl 1036 ref 1038
ss_error                        005076 constant        label                    dcl 1994 ref 1898 1920 1961 1992
ss_finish                       005177 constant        label                    dcl 2038 ref 1886
ss_read                         004530 constant        label                    dcl 1853 ref 1860 1876 1894 1930 1957 1971
ss_recover                      005122 constant        label                    dcl 2008 ref 1863 1994
ss_scan                         004531 constant        label                    dcl 1855 ref 1916 1947 1988
ss_state                        000033 constant        label                    array(4) dcl 1868 ref 1867
start                           000201 constant        label                    dcl 477
swfget                          004205 constant        entry                    internal dcl 1702 ref 506 509 515 669 690 696 797
                                                                                  819 1018 1031 1204 1208 1297 1381 1500 1519 1527
                                                                                  1534 1544 1853 1862 1885 2035 2152
swfput                          004231 constant        entry                    internal dcl 1712 ref 508 529 538 548 557 667 679
                                                                                  689 695 775 796 804 817 1023 1296 1380 1852 1859
                                                                                  1875 1884 1893 1929 1956 1970 2032 2150
swfput1                         004265 constant        entry                    internal dcl 1723 ref 784 949 953 973 977 1091 1139
                                                                                  1251 1252 1406 1422 1498 1559 1759 1780 1790 2007
swfput2                         004327 constant        entry                    internal dcl 1736 ref 582 745 757 843 989 1007 1075
                                                                                  1912 1943 1984 2142
using_exit                      000624 constant        label                    dcl 667 ref 524 533 542
using_read                      000264 constant        label                    dcl 515 ref 530 539 549 558 659
using_scan                      000265 constant        label                    dcl 517 ref 513 552 573 663
using_state                     000000 constant        label                    array(4) dcl 524 ref 521
using_switch                    000274 constant        label                    dcl 521
usw1                            003361 constant        label                    dcl 1517 ref 1467
usw2                            003365 constant        label                    dcl 1521 ref 1535 1545
uswo                            003360 constant        label                    dcl 1515

NAMES DECLARED BY CONTEXT OR IMPLICATION.
binary                                                 builtin function         ref 1717 1730
rel                                                    builtin function         ref 1717 1730

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      6076        6250    5671        6106
Length      7122    5671       152         636     205         104

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
cobol_replb                        2061 external procedure  is an external procedure.  
repl3_scan                              internal procedure  shares stack frame of external procedure cobol_replb.  
put_type17                              internal procedure  shares stack frame of external procedure cobol_replb.  
issue_obsolete_warning                  internal procedure  shares stack frame of external procedure cobol_replb.  
push                                    internal procedure  shares stack frame of external procedure cobol_replb.  
swfget                                  internal procedure  shares stack frame of external procedure cobol_replb.  
swfput                                  internal procedure  shares stack frame of external procedure cobol_replb.  
swfput1                                 internal procedure  shares stack frame of external procedure cobol_replb.  
swfput2                                 internal procedure  shares stack frame of external procedure cobol_replb.  
issue_diag                              internal procedure  shares stack frame of external procedure cobol_replb.  
push1                                   internal procedure  shares stack frame of external procedure cobol_replb.  
process_subscript                       internal procedure  shares stack frame of external procedure cobol_replb.  
push_special                            internal procedure  shares stack frame of external procedure cobol_replb.  
push_name                               internal procedure  shares stack frame of external procedure cobol_replb.  
perform_recover                         internal procedure  shares stack frame of external procedure cobol_replb.  
lev_diag                                internal procedure  shares stack frame of external procedure cobol_replb.  
l66_test                                internal procedure  shares stack frame of external procedure cobol_replb.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 t26_token                   cobol_replb
000014 t88_token                   cobol_replb
000020 special_usrwd               cobol_replb
000036 linage_counter_type9        cobol_replb
000072 type17                      cobol_replb
000112 replb_compile_count         cobol_replb

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
cobol_replb              000100 ntptr                       cobol_replb
                         000102 s                           cobol_replb
                         000104 P1                          cobol_replb
                         000106 P2                          cobol_replb
                         000110 ptrtable                    cobol_replb
                         000254 temp_ptr                    cobol_replb
                         000256 stackptr                    cobol_replb
                         000260 stackbegptr                 cobol_replb
                         000262 ptr2                        cobol_replb
                         000264 ptr2_1                      cobol_replb
                         000266 save_ptr2                   cobol_replb
                         000270 counter                     cobol_replb
                         000271 topstack                    cobol_replb
                         000272 ntptr2                      cobol_replb
                         000274 i                           cobol_replb
                         000275 was_found                   cobol_replb
                         000276 not_found                   cobol_replb
                         000277 qualif                      cobol_replb
                         000300 sav_ptr                     cobol_replb
                         000302 stack                       cobol_replb
                         000674 res_word_of                 cobol_replb
                         000703 adiag                       cobol_replb
                         000715 sectno                      cobol_replb
                         000716 rw_switch                   cobol_replb
                         000720 ptr3                        cobol_replb
                         000722 startlevel                  cobol_replb
                         000723 tlevel                      cobol_replb
                         000724 continue                    cobol_replb
                         000725 diag_no                     cobol_replb
                         000726 save_line                   cobol_replb
                         000727 save_column                 cobol_replb
                         000730 save_length                 cobol_replb
                         000732 t26_ptr                     cobol_replb
                         000734 t88_ptr                     cobol_replb
                         000736 rw_corresponding            cobol_replb
                         000737 rw_initialize               cobol_replb
                         000740 expand_condition_names      cobol_replb
                         000741 rw_sort_etc                 cobol_replb
                         000742 rw_debugging                cobol_replb
                         000743 rw_initterm                 cobol_replb
                         000744 rw_generate                 cobol_replb
                         000745 rw_perform                  cobol_replb
                         000746 rw_search                   cobol_replb
                         000747 rw_exception                cobol_replb
                         000750 already_replaced            cobol_replb
                         000751 processing_subscript        cobol_replb
                         000752 lev_from_srchloop           cobol_replb
                         000753 too_many_qualifiers         cobol_replb
                         000754 name_stack_overflow         cobol_replb
                         000755 subscript_stack_overflow    cobol_replb
                         000756 recovered_to_thru           cobol_replb
                         000757 ss_recovered                cobol_replb
                         000760 num_literal                 cobol_replb
                         000762 ft_ptr                      cobol_replb
                         000764 cname_ptr                   cobol_replb
                         000766 cvar_ptr                    cobol_replb
                         000770 cname_size                  cobol_replb
                         000771 cvar_size                   cobol_replb
                         000772 ss_stack_ptr                cobol_replb
                         000774 ssname_ptr                  cobol_replb
                         000776 cobol_ss_name               cobol_replb
                         001174 cobol_ss_stack              cobol_replb
                         001572 ss_recsize                  cobol_replb
                         001574 ss_ptrtable                 cobol_replb
                         001740 ss_topstack                 cobol_replb
                         001741 next_state                  cobol_replb
                         001742 rwkey                       cobol_replb
                         001743 rw_using                    cobol_replb
                         001744 using_count                 cobol_replb
                         001745 error_cond                  cobol_replb
                         001746 search_all                  cobol_replb
                         001750 save_ntptr                  cobol_replb
                         001752 save_type10_ptr             cobol_replb
                         001754 type25_flag                 cobol_replb
                         001755 return_code                 cobol_replb
                         001756 type40                      cobol_replb
                         002201 temp_char                   cobol_replb
                         002202 rw_key                      cobol_replb
                         002203 recsize2                    cobol_replb
                         002204 status                      cobol_replb
                         002206 st_ptr                      cobol_replb
                         002210 mcobol                      cobol_replb
                         002212 xref_ptr                    cobol_replb
                         002222 st_ptr                      repl3_scan
                         002300 sz                          swfput2
                         002302 p                           swfput2
                         002304 nt_entry                    swfput2
                         003350 st_ptr                      perform_recover
                         003360 lev_diag_ptr                lev_diag
                         003362 lev_diag_item               lev_diag

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_e_as              call_ext_out        return_mac          mdfx1               ext_entry           any_to_any_truncate_

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
cobol_c_list                  cobol_find_secdef             cobol_read_ft_                cobol_repl3_expand
cobol_set_type40_$ebcdic      cobol_swf_get                 cobol_swf_put                 cobol_usrwd
cobol_vdwf_dget

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
cobol_$compile_count          cobol_$xref_chain_ptr         cobol_ext_$cobol_cmfp         cobol_ext_$cobol_com_ptr
cobol_ext_$cobol_curr_in      cobol_ext_$cobol_curr_out




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     40 000132       162 000143       174 000170       477 000201       479 000207       480 000210       481 000211
    482 000212       483 000213       484 000214       485 000215       486 000216       487 000217       488 000220
    489 000221       490 000222       491 000223       492 000224       493 000226       494 000230       495 000231
    496 000233       497 000235       498 000236       499 000237       500 000240       501 000242       502 000244
    503 000246       504 000250       506 000251       507 000252       508 000256       509 000257       510 000260
    512 000261       513 000263       515 000264       517 000265       519 000267       521 000274       524 000276
    528 000305       529 000307       530 000310       533 000311       537 000320       538 000322       539 000323
    542 000324       546 000333       547 000335       548 000337       549 000340       552 000341       555 000346
    557 000354       558 000355       560 000356       562 000361       563 000362       569 000370       570 000372
    571 000375       572 000377       573 000400       575 000401       577 000406       578 000410       579 000412
    580 000415       582 000417       583 000421       584 000424       586 000426       595 000436       598 000443
    600 000445       601 000447       602 000452       608 000467       610 000472       612 000474       613 000475
    617 000500       618 000502       619 000504       620 000513       622 000522       624 000531       626 000536
    633 000537       636 000553       638 000555       639 000557       640 000562       642 000571       646 000600
    650 000607       654 000614       655 000615       659 000616       663 000622       665 000623       667 000624
    669 000625       671 000626       673 000630       676 000635       679 000650       680 000651       682 000652
    684 000656       687 000660       689 000662       690 000663       691 000664       694 000673       695 000675
    696 000676       698 000677       699 000701       701 000706       703 000711       704 000712       708 000716
    709 000720       710 000722       711 000723       715 000726       716 000730       717 000732       718 000733
    720 000735       722 000740       723 000742       725 000744       727 000745       729 000747       730 000750
    731 000752       733 000755       735 000762       736 000763       737 000765       738 000766       740 000770
    741 000773       742 000775       743 001000       745 001002       747 001004       749 001007       750 001011
    752 001013       753 001016       754 001020       755 001023       757 001025       759 001027       761 001032
    762 001034       764 001035       765 001037       768 001041       770 001044       771 001045       774 001046
    775 001047       778 001061       780 001066       781 001070       782 001073       783 001075       784 001077
    786 001101       788 001106       792 001107       795 001111       796 001112       797 001113       798 001114
    799 001116       801 001123       804 001132       805 001133       808 001135       814 001136       816 001140
    817 001142       819 001143       821 001144       823 001146       825 001153       828 001155       832 001160
    834 001166       837 001170       839 001173       840 001175       841 001200       843 001202       844 001204
    845 001207       847 001211       849 001215       850 001217       852 001220       854 001221       856 001223
    857 001225       860 001226       861 001230       863 001235       865 001240       866 001242       870 001243
    874 001252       875 001254       878 001256       880 001257       882 001262       883 001264       886 001265
    889 001270       890 001272       892 001274       894 001275       896 001277       897 001301       898 001303
    901 001304       904 001305       906 001306       907 001310       909 001313       910 001315       920 001316
    922 001324       923 001326       924 001327       926 001332       928 001335       929 001336       933 001340
    935 001341       938 001350       939 001354       944 001360       945 001362       948 001364       949 001366
    950 001372       952 001415       953 001417       954 001423       956 001425       958 001434       959 001436
    961 001440       962 001444       965 001446       968 001447       972 001456       973 001460       974 001464
    976 001512       977 001514       978 001520       979 001522       984 001523       985 001525       986 001527
    987 001532       989 001534       990 001536       991 001541       993 001543       999 001552      1000 001560
   1001 001562      1002 001565      1003 001567      1005 001614      1007 001620      1008 001622      1009 001625
   1012 001627      1015 001633      1017 001636      1018 001640      1020 001641      1022 001645      1023 001647
   1024 001650      1031 001651      1032 001652      1036 001656      1038 001665      1041 001670      1043 001677
   1044 001701      1050 001703      1052 001706      1054 001712      1056 001713      1057 001715      1058 001720
   1059 001727      1061 001736      1066 001747      1067 001751      1069 001755      1071 001762      1072 001765
   1075 001767      1077 001771      1078 001772      1080 001773      1081 001774      1089 002007      1090 002013
   1091 002015      1094 002017      1652 002020      1096 002021      1106 002023      1107 002025      1108 002026
   1110 002032      1112 002036      1114 002037      1118 002040      1122 002052      1124 002053      1126 002055
   1127 002056      1132 002073      1134 002075      1135 002076      1138 002106      1139 002107      1142 002111
   1146 002126      1148 002132      1154 002144      1158 002152      1160 002156      1164 002162      1165 002163
   1167 002164      1169 002166      1171 002167      1173 002171      1175 002172      1177 002174      1178 002175
   1180 002177      1181 002200      1184 002202      1186 002203      1191 002207      1192 002211      1195 002213
   1198 002225      1199 002226      1200 002232      1201 002234      1202 002235      1203 002237      1204 002241
   1205 002242      1207 002253      1208 002256      1209 002257      1212 002266      1213 002270      1214 002272
   1215 002274      1216 002275      1218 002334      1220 002342      1223 002350      1225 002354      1226 002365
   1228 002375      1229 002377      1230 002400      1233 002402      1235 002403      1236 002406      1237 002421
   1238 002432      1240 002436      1242 002441      1243 002443      1244 002447      1245 002450      1247 002452
   1248 002454      1251 002461      1252 002466      1254 002474      1280 002475      1282 002477      1284 002500
   1286 002502      1287 002504      1288 002506      1291 002515      1293 002520      1294 002521      1296 002523
   1297 002524      1298 002525      1299 002530      1301 002533      1305 002550      1306 002552      1307 002553
   1309 002612      1311 002615      1312 002616      1314 002623      1317 002632      1319 002634      1322 002635
   1324 002636      1326 002640      1327 002642      1331 002657      1332 002661      1333 002662      1335 002721
   1337 002724      1338 002725      1340 002732      1343 002741      1345 002743      1348 002744      1350 002745
   1352 002747      1353 002751      1356 002765      1357 002770      1359 002775      1360 002777      1361 003000
   1363 003037      1365 003042      1366 003043      1368 003050      1369 003064      1373 003065      1375 003066
   1377 003070      1380 003077      1381 003100      1383 003101      1387 003116      1388 003120      1389 003121
   1391 003160      1393 003163      1394 003164      1395 003167      1396 003171      1397 003173      1398 003176
   1399 003201      1400 003203      1403 003211      1406 003222      1407 003226      1412 003231      1458 003232
   1462 003252      1463 003253      1464 003255      1465 003256      1466 003260      1467 003261      1469 003262
   1470 003263      1472 003264      1474 003265      1476 003266      1478 003267      1481 003271      1483 003274
   1484 003277      1485 003301      1487 003304      1488 003305      1492 003307      1493 003324      1497 003330
   1498 003333      1499 003335      1500 003340      1501 003341      1503 003344      1505 003345      1507 003347
   1508 003350      1510 003351      1511 003353      1512 003355      1513 003356      1514 003357      1515 003360
   1517 003361      1519 003363      1520 003364      1521 003365      1526 003400      1527 003401      1529 003402
   1531 003406      1533 003417      1534 003420      1535 003421      1537 003422      1539 003427      1543 003444
   1544 003445      1545 003446      1548 003447      1554 003455      1556 003457      1557 003461      1558 003463
   1559 003465      1560 003467      1561 003472      1564 003473      1566 003477      1567 003502      1571 003503
   1575 003510      1576 003512      1578 003514      1579 003515      1580 003517      1584 003520      1587 003554
   1589 003557      1592 003564      1598 003624      1600 003627      1607 003632      1608 003634      1609 003635
   1610 003640      1612 003641      1615 003647      1616 003651      1617 003652      1618 003655      1620 003656
   1622 003661      1623 003662      1625 003665      1626 003666      1629 003674      1631 003675      1632 003677
   1636 003710      1637 003715      1638 003722      1639 003725      1640 003733      1642 003751      1643 003755
   1648 003763      1649 003766      1415 003767      1417 003770      1418 003775      1419 003777      1420 004001
   1421 004004      1422 004006      1423 004012      1424 004015      1427 004016      1429 004017      1430 004022
   1431 004024      1432 004026      1433 004037      1435 004043      1436 004045      1439 004055      1442 004070
   1444 004073      1445 004075      1446 004077      1447 004101      1448 004104      1449 004107      1450 004117
   1451 004121      1452 004123      1453 004124      1655 004125      1658 004126      1661 004133      1663 004136
   1664 004140      1665 004141      1666 004143      1668 004144      1669 004151      1671 004162      1673 004164
   1674 004166      1675 004167      1676 004171      1678 004172      1679 004200      1680 004201      1682 004204
   1702 004205      1705 004206      1706 004223      1708 004230      1712 004231      1715 004232      1716 004241
   1717 004255      1719 004264      1723 004265      1728 004267      1729 004276      1730 004314      1732 004326
   1736 004327      1756 004331      1759 004345      1761 004353      1765 004354      1768 004356      1769 004361
   1774 004365      1777 004371      1780 004373      1782 004375      1784 004376      1787 004377      1788 004402
   1789 004404      1790 004406      1791 004410      1793 004411      1796 004412      1799 004417      1801 004422
   1802 004424      1803 004425      1804 004427      1806 004430      1807 004435      1809 004440      1810 004442
   1811 004443      1812 004445      1814 004446      1815 004451      1816 004453      1817 004455      1818 004457
   1819 004461      1820 004463      1821 004466      1823 004470      1824 004471      1826 004501      1828 004505
   1830 004506      1842 004510      1843 004512      1844 004513      1845 004515      1847 004522      1848 004523
   1849 004524      1850 004525      1851 004526      1852 004527      1853 004530      1855 004531      1857 004533
   1859 004544      1860 004545      1862 004551      1863 004552      1867 004553      1868 004555      1872 004563
   1873 004565      1875 004575      1876 004576      1878 004577      1880 004602      1882 004606      1884 004616
   1885 004617      1886 004620      1888 004621      1890 004623      1891 004625      1893 004635      1894 004636
   1897 004637      1898 004641      1901 004642      1903 004644      1904 004646      1907 004656      1908 004661
   1909 004663      1910 004666      1912 004670      1913 004672      1914 004675      1916 004677      1919 004700
   1920 004702      1922 004703      1926 004712      1927 004714      1929 004724      1930 004725      1933 004726
   1934 004730      1938 004743      1939 004746      1940 004750      1941 004753      1943 004755      1944 004757
   1945 004762      1947 004764      1949 004765      1953 004773      1954 004775      1956 005005      1957 005006
   1960 005007      1961 005011      1963 005012      1967 005020      1968 005022      1970 005032      1971 005033
   1973 005034      1975 005037      1976 005041      1979 005051      1980 005054      1981 005056      1982 005061
   1984 005063      1985 005065      1986 005070      1988 005072      1991 005073      1992 005075      1994 005076
   1997 005101      1999 005103      2000 005106      2001 005110      2003 005111      2004 005114      2006 005116
   2007 005120      2008 005122      2011 005124      2012 005126      2014 005131      2017 005140      2018 005142
   2020 005144      2023 005152      2024 005153      2026 005155      2031 005163      2032 005164      2035 005173
   2037 005176      2038 005177      2041 005200      2043 005201      2046 005202      2049 005205      2050 005212
   2051 005214      2053 005224      2055 005226      2056 005230      2057 005232      2058 005233      2059 005235
   2061 005236      2062 005245      2063 005246      2068 005251      2070 005252      2075 005253      2078 005256
   2079 005261      2080 005263      2081 005266      2082 005270      2083 005272      2084 005277      2086 005307
   2088 005311      2089 005313      2090 005315      2091 005316      2092 005320      2094 005321      2095 005327
   2096 005330      2097 005333      2098 005336      2100 005340      2104 005341      2116 005343      2117 005345
   2118 005352      2119 005356      2122 005361      2124 005365      2125 005372      2127 005373      2133 005405
   2135 005407      2137 005411      2138 005414      2139 005416      2140 005421      2142 005423      2143 005425
   2144 005430      2145 005432      2150 005433      2152 005434      2154 005435      2156 005442      2158 005453
   2160 005460      2166 005461      2180 005463      2181 005465      2182 005467      2183 005471      2184 005472
   2185 005476      2186 005500      2188 005502      2189 005504      2191 005513      2194 005514      2197 005515
   2202 005537


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
