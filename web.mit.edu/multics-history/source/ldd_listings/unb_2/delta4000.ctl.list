LISTING FOR  >spec>on>11/30/82>delta4000.ctl
COMPILED BY Multics LISP Compiler, Version hc9.2, June 5, 1981
ON 11/30/82  1528.9 mst Tue
IN BEHALF OF Holmstedt.SysMaint.a



;;; ***********************************************************
;;; *                                                         *
;;; * Copyright, (C) Honeywell Information Systems Inc., 1982 *
;;; *                                                         *
;;; * Copyright (c) 1978 by Massachusetts Institute of        *
;;; * Technology and Honeywell Information Systems, Inc.      *
;;; *                                                         *
;;; ***********************************************************
;;;
;;; -*-LISP-*-

;;;
;;;       Delta Data 4000 control package
;;;       BSG 3/78
;;;       Modified by EAK 3/18/78
;;;	Consing removed in recognition of output buffering, BSG 8/31/78

(declare (special xconses yconses DCTLV-escf X Y screenheight ospeed screenlinelen tty-eolch-lossp))
(declare (special idel-lines-availablep idel-chars-availablep tty-type))

;;;
;;;	Whoever invented the **** eol frobs that caused me to have to
;;;	propagate tty-eolch-lossp throughout n levels of hair,
;;;	him, his fingers should be cut off.

; Initialize terminal and terminal control package.
(defun DCTL-init ()
;      (setq idel-lines-availablep (= ospeed 1200.))
;      (setq idel-chars-availablep (< ospeed 1200.))
       (setq idel-lines-availablep t idel-chars-availablep nil)
			; This seems to be the most popular menu of poisons.
       (setq tty-eolch-lossp idel-lines-availablep)
       (setq DCTLV-escf (catenate (ascii 33) 'F))
       (setq screenheight 25. screenlinelen 79.)
       (setq tty-type 'dd4000)
       (Rtyo 33) (Rprinc "E")
       (setq X 0 Y 0))


; Move terminal's cursor to desired position.
(defun DCTL-position-cursor (x y)
       (cond ((and (= x X)(= y Y))
              nil)
             ((and (= x 0)(= y 0))
              (Rtyo 33)(Rprinc "H")
              (setq X 0 Y 0))
             ((and (< (+ (abs (- X x))(abs (- Y y))) 4))
              (cond ((< X x)
                     (do ex X (1+ ex)(= ex x)(Rtyo 33)(Rprinc "C")(DCTL-pad 2500.)))
                    ((< x X)
                     (do ex x (1+ ex)(= ex X)(Rtyo 33)(Rprinc "D")(DCTL-pad 2500.))))
              (cond ((< Y y)
                     (do wy Y (1+ wy)(= wy y)(Rtyo 33)(Rprinc "B")(DCTL-pad 2500.)))
                    ((< y Y)
                     (do wy y (1+ wy)(= wy Y)(Rtyo 33)(Rprinc "A")(DCTL-pad 2500.))))
              (setq X x Y y))
;; Direct Cursor Addressing is best.
             (t (setq X x Y y)
	      (DCTL-pad 3000.)
	      (Rprinc DCTLV-escf)
                (Rtyo (+ 60 (// x 100.)))(setq x (\ x 100.))
                (Rtyo (+ 60 (// x 10.)))(setq x (\ x 10.))
                (Rtyo (+ 60 x))

                (Rtyo (+ 60 (// y 100.)))(setq y (\ y 100.))
                (Rtyo (+ 60 (// y 10.)))(setq y (\ y 10.))
                (Rtyo (+ 60 y))

	      (DCTL-pad 5000.)
                    )))


; Output string.
(defun DCTL-display-char-string (string)
       (setq X (+ X (stringlength string)))
       (Rprinc string))


; Clear to end of screen.
(defun DCTL-clear-rest-of-screen ()
       (DCTL-pad 9000.)
       (Rtyo 33)(Rprinc "J")(DCTL-pad 15000.))


; Clear to end of line.
(defun DCTL-kill-line ()
       (DCTL-pad 10000.)
       (Rtyo 33)(Rprinc "K")
       (DCTL-pad 7500.))


; Insert character string in line at current position.
(defun DCTL-insert-char-string (str)
       (Rtyo 33)(Rprinc "Q")
       (Rprinc str)
       (Rtyo 33)(Rprinc "R")
       (setq X (+ X (stringlength str))))


; Delete characters from current position in line.
(defun DCTL-delete-chars (n)
       (do i 1 (1+ i)(> i n)
           (Rtyo 33)(Rprinc "P")(DCTL-pad 2500.)))


; Insert n blank lines at current position.
(defun DCTL-insert-lines (n)
       (do i 1 (1+ i)(> i n)
           (Rtyo 33)(Rprinc "L")(DCTL-pad 2500.)))


; Delete n lines at current position.
(defun DCTL-delete-lines (n)
       (do i 1 (1+ i)(> i n)
           (Rtyo 33)(Rprinc "M")(DCTL-pad 100000.)))


; Send pad characters to wait specified no. of microseconds.
(defun DCTL-pad (n)
       (do i (// (* n ospeed) 1000000.) (1- i) (= i 0)
           (Rtyo 0)))

; Random underscore to turn off losing DD features at high speeds.

(defun idel-off ()
       (setq idel-lines-availablep nil idel-chars-availablep nil))

			Functions Defined

Name			Offset		Offset		Name


DCTL-clear-rest-of-screen        422		   0		DCTL-init
DCTL-delete-chars                542		   44		DCTL-position-cursor
DCTL-delete-lines                636		   406		DCTL-display-char-string
DCTL-display-char-string         406		   422		DCTL-clear-rest-of-screen
DCTL-init                        0		   452		DCTL-kill-line
DCTL-insert-char-string          502		   502		DCTL-insert-char-string
DCTL-insert-lines                600		   542		DCTL-delete-chars
DCTL-kill-line                   452		   600		DCTL-insert-lines
DCTL-pad                         674		   636		DCTL-delete-lines
DCTL-position-cursor             44		   674		DCTL-pad
idel-off                         724		   724		idel-off





			Functions Referenced

DCTL-pad                                Rtyo                                    stringlength
Rprinc                                                                          


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
