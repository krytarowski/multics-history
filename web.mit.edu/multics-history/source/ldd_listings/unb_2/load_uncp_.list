	COMPILATION LISTING OF SEGMENT load_uncp_
	Compiled by: Multics PL/I Compiler, Release 30, of February 16, 1988
	Compiled at: Honeywell Bull, Phoenix AZ, SysM
	Compiled on: 07/20/88  1033.7 mst Wed
	    Options: optimize map

        1 /****^  ******************************************************
        2*        *                                                    *
        3*        * Copyright, (C) Honeywell Bull Inc., 1988           *
        4*        *                                                    *
        5*        * Copyright (c) 1972 by Massachusetts Institute of   *
        6*        * Technology and Honeywell Information Systems, Inc. *
        7*        *                                                    *
        8*        ****************************************************** */
        9 
       10 
       11 /****^  HISTORY COMMENTS:
       12*  1) change(88-07-13,Berno), approve(88-07-13,MCR7928),
       13*     audit(88-07-13,Parisek), install(88-07-19,MR12.2-1061):
       14*     Removed reference to wtcb.prompt_len and "enter_receive" order call as
       15*     part of the UNCP multiplexer (DSA gateway) implementation.
       16*                                                   END HISTORY COMMENTS */
       17 
       18 /* format: style4,delnl,insnl,^ifthendo */
       19 load_uncp_:
       20      proc (afnpno, acdtp, a_chan_listp, acksw, code);
       21 
       22 /* load_uncp_ is the subroutine which prepares the FNP core image for
       23*   bootload into the FNP. It was written using parts of LD355,
       24*   the BOS 355 loader, as a model.
       25*
       26*   Coded June 1, 1976 by Mike Grady.
       27*   Modifed October 28, 1976 by Robert Coren to pass core image name to ring zero .
       28*   Modified August 1978 by Larry Johnson to take array of channels to boot from caller instead of scanning cdt.
       29*   Modified 1979 May 9 by Art Beattie to pass FNP memory size to ring zero.
       30*   Modified May 1981 by Robert Coren to handle COLTS pseudo-channel.
       31* 
       32*
       33*   THE FOLLOWING HISTORY COMMENTS REFER TO THE uncp MULTIPLEXER IMPLEMENTATION
       34*   FOR THE DSA GATEWAY.  THIS CODE WAS ORIGINALLY EXTRACTED FROM load_fnp_.pl1
       35*
       36*   Modified in May 1982 for loading the DN7100.fd
       37*   Installed at level MR10.1 in June 1983.
       38*   Modifications for MR10.1.
       39*   Installed at level MR11 in September 1985.
       40*   Modified for MR12.0 (dsa-Compact) January 1987.
       41*
       42*   Date of the last modification 22/06/87
       43*
       44*
       45**/
       46 
       47 /* Parameters */
       48 
       49 dcl  afnpno fixed bin,
       50      acdtp ptr,
       51      a_chan_listp ptr,				/* pointer to array of cdte entries for channels to boot */
       52      acksw bit (1),
       53      code fixed bin (35);
       54 
       55 /* External Variables */
       56 
       57 
       58 
       59 dcl  error_table_$dev_nt_assnd fixed bin (35) ext;
       60 
       61 /* External procedures */
       62 
       63 dcl  hphcs_$tty_control entry (char (*), char (*), ptr, fixed bin (35));
       64 
       65 /* Constants */
       66 
       67 dcl  speed_bit (11) internal static options (constant) fixed bin init (1, 2, 3, 4, 8, 6, 7, 8, 8, 8, 8);
       68 
       69 dcl  min_modules fixed bin int static options (constant) init (7);
       70 
       71 /* Automatic Storage */
       72 
       73 dcl  fnpno fixed bin,
       74      i fixed bin;
       75 dcl  chan_listp ptr;
       76 dcl  baud_info_size fixed bin;
       77 dcl  tandd_configured bit (1);
       78 
       79 /* tables to hold config info for LSLAs and HSLAs */
       80 
       81 dcl 1 lsla_array (0:5, 0:51) aligned,
       82     2 line_type fixed bin (17) unal,
       83     2 baud_rate fixed bin (17) unal;
       84 
       85 dcl 1 hsla_array (0:2, 0:31) aligned,
       86     2 line_type fixed bin (17) unal,
       87     2 baud_rate fixed bin (17) unal,
       88     2 modem_type fixed bin (17) unal,
       89     2 flags unal,
       90       3 pl bit (1) unal,
       91       3 bsc_ebcdic bit (1) unal,
       92       3 bsc_transparent bit (1) unal,
       93       3 vip_pollselect bit (1) unal,
       94       3 autobaud bit (1) unal,
       95       3 pad bit (13) unal;
       96 
       97 dcl  lsla_ch (0:5) fixed bin;
       98 dcl  hsla_ch (0:2) fixed bin;
       99 
      100 /* Based storage */
      101 
      102 dcl 1 chan_list aligned based (chan_listp),		/* list of channels to boot */
      103     2 count fixed bin,
      104     2 cdte_ptr (0 refer (chan_list.count)) ptr unal;
      105 
      106 /* Builtins */
      107 
      108 dcl (addr, null, max, substr, unspec) builtin;
      109 
      110 	cdtp = acdtp;
      111 	fnpno = afnpno;
      112 	fnpep = addr (cdt.fnp_entry (fnpno));		/* get ptr to this fnp entry */
      113 	chan_listp = a_chan_listp;
      114 
      115 	lsla_array.line_type (*, *) = -1;
      116 	hsla_array.line_type (*, *) = -1;
      117 	lsla_ch (*) = -1;
      118 	hsla_ch (*) = -1;
      119 	tandd_configured = "0"b;
      120 
      121 	if fnpe.state = FNP_FREE
      122 	then do;					/* but FNP is not configured */
      123 	     code = error_table_$dev_nt_assnd;
      124 	     return;
      125 	end;
      126 
      127 
      128 	baud_info_size = max (1, chan_list.count);
      129 	begin;
      130 
      131 dcl 1 load_info aligned,
      132     2 dns_boot_ev_chan fixed bin (71),
      133     2 count fixed bin,
      134     2 entry (baud_info_size),
      135       3 devx fixed bin,
      136       3 baud fixed bin,
      137       3 line_type fixed bin,
      138     2 version char (4),				/* version number */
      139     2 pointeur_image_dns ptr,				/* pointer to the DN7100 image */
      140     2 image fixed bin (24),				/* image */
      141     2 etape fixed bin;				/* Etape to load the Datanet */
      142 
      143 	     unspec (load_info) = ""b;
      144 	     load_info.dns_boot_ev_chan = fnpe.boot_ev_chan;
      145 	     load_info.version = "B2";
      146 	     load_info.etape = fnpe.pad3 (1);
      147 	     load_info.count = chan_list.count;
      148 	     do i = 1 to chan_list.count;
      149 		cdtep = chan_list.cdte_ptr (i);
      150 		load_info.devx (i) = cdte.twx;
      151 		load_info.baud (i) = cdte.baud_rate;
      152 		load_info.line_type (i) = cdte.line_type;
      153 	     end;
      154 
      155 	     call hphcs_$tty_control (substr ("abcdefgh", fnpno, 1), "load", addr (load_info), code);
      156 
      157 	end;
      158 
      159 	if code ^= 0
      160 	then do;
      161 	     call hphcs_$tty_control (substr ("abcdefgh", fnpno, 1), "abort", null (), code);
      162 	     fnpe.state = FNP_UNKNOWN;
      163 	end;
      164 
      165 
      166 	return;
      167 
      168 
  1     1 /* BEGIN INCLUDE FILE ... mcs_memory_map.incl.pl1 */
  1     2 
  1     3 /* This include file descibes MCS memory layout.
  1     4*
  1     5*   Created 6/2/76 by Mike Grady
  1     6*   Modified 1979 June 1 by Art Beattie to add new cells in comm_reg.
  1     7*   Modified June 1982 by Robert Coren to add some more new cells in comm_reg and
  1     8*    change some of them to fixed bin (18) unsigned.
  1     9**/
  1    10 
  1    11 dcl 1 mem_array aligned based (memp),			/* as an array of 18 bit words */
  1    12     2 mem (0:65535) bit (18) unaligned;
  1    13 
  1    14 
  1    15 dcl 1 low_mem aligned based (memp),			/* detail of low memory */
  1    16     2 interrupt_vectors (0:255) bit (18) unal,		/* loc 0-377 octal */
  1    17     2 interrupt_cells (16) bit (18) unal,		/* loc 400-417 octal */
  1    18     2 iom_fault_status (16) bit (18) unal,		/* loc 420-437 octal */
  1    19     2 processor_fault_vectors (8) bit (18) unal,		/* loc 440-447 octal */
  1    20     2 chan_mailbox (24) bit (18) unal,			/* loc 450-477 octal */
  1    21     2 lsla_mailbox (0:5) like hwcm,			/* LSLA hardware comm regions, loc 500-637 octal */
  1    22     2 comm_reg unal,				/* software communications region for MCS system */
  1    23       3 crldt fixed bin (71) aligned,			/* date and time binder produced this image */
  1    24       3 crbdt fixed bin (71) aligned,			/* date and time image was booted into FNP */
  1    25       3 crbuf fixed bin (17) unal,			/* base of free buffer pool */
  1    26       3 crmem fixed bin (18) unsigned unal,		/* last loc of mem configured */
  1    27       3 crnbf fixed bin (17) unal,			/* free buffers in pool now */
  1    28       3 criom fixed bin (17) unal,			/* pointer to iom table */
  1    29       3 crnhs fixed bin (17) unal,			/* number of HSLAs */
  1    30       3 crnls fixed bin (17) unal,			/* number of LSLAs */
  1    31       3 crcon bit (18) unal,				/* console enable switch */
  1    32       3 crmod fixed bin (17) unal,			/* base of module chain */
  1    33       3 crnxa fixed bin (17) unal,			/* pointer to head of free space chain */
  1    34       3 crtra bit (18) unal,				/* trace entry enable mask */
  1    35       3 crtrb fixed bin (18) unsigned unal,		/* base of trace table */
  1    36       3 crtrc fixed bin (18) unsigned unal,		/* next trace table entry pointer */
  1    37       3 crreg fixed bin (17) unal,			/* pointer to fault reg storage area */
  1    38       3 crttb fixed bin (17) unal,			/* pointer to tib table base */
  1    39       3 crtte fixed bin (17) unal,			/* last addr in tib table */
  1    40       3 crdly fixed bin (17) unal,			/* pointer to delay table chain */
  1    41       3 crver char (4) unal,				/* mcs version number */
  1    42       3 crbrk fixed bin (17) unal,			/* pointer to breakpoint control table */
  1    43       3 crtsw bit (18) unal,				/* trace switch (zero=trace on) */
  1    44       3 crnxs fixed bin (17) unal,			/* pointer to next free small block */
  1    45       3 crnbs fixed bin (17) unal,			/* number of buffers devoted to small space */
  1    46       3 crcct fixed bin (17) unal,			/* pointer to first cct descriptor */
  1    47       3 crskd fixed bin (17) unal,			/* pointer to scheduler data block */
  1    48       3 cretb fixed bin (17) unal,			/* pointer to list of echo-negotiation bit tables */
  1    49       3 crcpt fixed bin (17) unal,			/* pointer to cpu page table */
  1    50       3 crpte fixed bin (17) unal,			/* pointer to variable cpu page table entry */
  1    51       3 crtsz fixed bin (17) unal,			/* size of trace data buffer */
  1    52       3 crmet bit (18) unal,				/* metering enabled */
  1    53       3 crtdt bit (18) unal,				/* 0 if no COLTS channel; set to TIB address if it exists */
  1    54       3 crbtm bit (18) unal,				/* address of time meters for buffer allocation/freeing */
  1    55       3 crnxe fixed bin (18) unsigned unal,		/* next available space in extended memory */
  1    56       3 crbpe fixed bin (17) unal,			/* buffer paging window table entry */
  1    57       3 pad (39) bit (18) unal,
  1    58       3 crcpr char (28) unal,				/* image copyright notice */
  1    59       3 crash_location bit (18) unal,			/* offset used for unresolved REF's */
  1    60       3 crash_opcode bit (18) unal,			/* crash instruction */
  1    61     2 hsla_mailbox (0:2),				/* loc 1000-3777 octal */
  1    62       3 subchannel (0:31) like hwcm;			/* HSLA hardware comm regions */
  1    63 
  1    64 dcl 1 icw aligned based,				/* Standard FNP Indirect Control Word */
  1    65     2 xfer_mode bit (3) unal,				/* transfer mode, bit-36 for dia */
  1    66     2 fnp_addr bit (15) unal,				/* address in fnp */
  1    67     2 pad bit (6) unal,				/* padding, exhaust bit */
  1    68     2 tally bit (12) unal;
  1    69 
  1    70 dcl 1 hwcm aligned based (hwcmp),			/* Standard hardware comm region */
  1    71     2 ricw0 like icw,				/* primary receive icw */
  1    72     2 ricw1 like icw,				/* secondary receive icw */
  1    73     2 sicw0 like icw,				/* primary send icw */
  1    74     2 sicw1 like icw,				/* secondary send icw */
  1    75     2 baw bit (18) unal,				/* base address word */
  1    76     2 sfcmp bit (18) unal,				/* pointer to sfcm for this channel */
  1    77     2 mask_reg bit (36) unal,				/* maskregister, subch 0 only */
  1    78     2 stat_icw like icw,				/* status icw */
  1    79     2 config_pcw bit (36) unal;			/* subchannel configuration */
  1    80 
  1    81 /* Tables used to describe the configuration of the FNP */
  1    82 
  1    83 dcl 1 iom_table (0: 15) unaligned based (itblp),		/* FNP IOM table */
  1    84     2 flags,
  1    85       3 mpx_chan bit (1) unal,			/* multiplexed channel */
  1    86       3 pad bit (6) unal,
  1    87       3 char_len bit (2) unal,
  1    88       3 dev_type bit (5) unal,			/* device type on this channel */
  1    89       3 dev_speed bit (4) unal,			/* for those devices with speed (LSLA) */
  1    90     2 table bit (18) unal;				/* pointer to secondary table for mpx_chan */
  1    91 
  1    92 dcl 1 lsla_table (0:52) based (tblp) unal,		/* LSLA table, entry one per slot */
  1    93     2 flags,
  1    94       3 pad1 bit (11) unal,
  1    95       3 ibm_code bit (1) unal,			/* if 6-bit odd parity */
  1    96       3 pad2 bit (3) unal,
  1    97       3 slot_id bit (3) unal,				/* slot type this slot */
  1    98     2 tib_addr fixed bin (17) unal;			/* pointer to tib */
  1    99 
  1   100 dcl 1 hsla_table (0:31) based (tblp) unal,		/* HSLA table, entry one per subchannel */
  1   101     2 flags,
  1   102       3 conc_chan bit (1) unal,			/* concentrator attached to this channnel */
  1   103       3 private_line bit (1) unal,			/* indicates direct connect or pl modem for sync chan */
  1   104       3 async bit (1) unal,				/* on if async channel */
  1   105       3 option1 bit (1) unal,				/* three option specification bits */
  1   106       3 option2 bit (1) unal,
  1   107       3 modem_type bit (4) unal,			/* indicator of type of modem on this channel */
  1   108       3 line_type bit (5) unal,			/* line type of this channel */
  1   109       3 dev_speed bit (4) unal,			/* speed of this subchannel */
  1   110     2 tib_addr fixed bin (17) unal;			/* addr of tib for this subchannel */
  1   111 
  1   112 dcl (memp, itblp, tblp, hwcmp) ptr;
  1   113 
  1   114 dcl (DIA init ("00010"b),				/* dev_type definitions */
  1   115      HSLA init ("00011"b),
  1   116      LSLA init ("00100"b),
  1   117      CONSOLE init ("00101"b),
  1   118      PRINTER init ("00110"b)) bit (5) int static options (constant);
  1   119 
  1   120 /* END INCLUDE FILE mcs_memory_map.incl.pl1 */
      169 
  2     1 /* BEGIN INCLUDE FILE ... baud_rates.incl.pl1 */
  2     2 
  2     3 /* Defines valid baud rate values for communications channels */
  2     4 
  2     5 /* Created by somebody a long time ago */
  2     6 /* Modified April 1982 by Robert Coren to add speeds above 9600 (up to 72000) */
  2     7 
  2     8 dcl  baud_table (15) fixed bin int static options (constant) init
  2     9      (110, 133, 150, 300, 600, 1200, 1800, 2400, 4800, 7200,
  2    10       9600, 19200, 40800, 50000, 72000);
  2    11 
  2    12 /* END INCLUDE FILE ... baud_rates.incl.pl1 */
      170 
  3     1 /* BEGIN INCLUDE FILE ... cdt.incl.pl1 */
  3     2 
  3     3 /* format: style3,idind25,indcomtxt */
  3     4 
  3     5 /* Channel Definition Table.
  3     6*   This table lists all of the hardware channels (ports) connected
  3     7*   to the system, and maintains the attributes of each one.
  3     8*
  3     9*   PG 741230
  3    10*   Modified by Mike Grady 5/6/76 to add FNP info.
  3    11*   Modified by Tom Casey 7/29/76 to add more FNP info and a few other things.
  3    12*   Modified by Robert Coren 6/13/77 to make terminal types be character strings.
  3    13*   Modified July 1979 by T. Casey to add several variables for MR8.0 process preservation facility.
  3    14*   Modified December 1980 by E. N. Kittlitz to eliminate cdte.phone_no.
  3    15*   Modified March 1981 by Robert Coren to add "listening" flag for multiplexers and to add TANDD_SERVICE service_type.
  3    16*   Modified April 1981 by E. N. Kittlitz to add cdte.dial_ev_chn, cdte.recent_wakeup_time, cdte.recent_wakeup_count.
  3    17*   Modified July 1981 by T. Casey for MR9.0 to add dialup_flags.detach_after_hangup
  3    18*   Modified December 1981 by E. N. Kittlitz for cdte.leave_edited, cdte.hold_arg,
  3    19*   Modified September 1981 by Benson I. Margulies for cdt_mgr_'s tree of multiplexer's.
  3    20*   Modified August 1982 by E. N. Kittlitz for check_acs.
  3    21*   Modified January 1983 by Keith Loepere for generic_destination.
  3    22*   Modified August 1983 by Robert Coren to add mpxe.check and mpxe.retry_load.
  3    23*   Modified 831216 by E. N. Kittlitz for required_access_class.
  3    24*   Modified 84-04-01 by BIM to finish communications AIM:
  3    25*   access class ranges,
  3    26*   access_control flags.
  3    27**/
  3    28 
  3    29 
  3    30 /****^  HISTORY COMMENTS:
  3    31*  1) change(87-03-17,Beattie), approve(87-04-06,MCR7656),
  3    32*     audit(87-07-13,Parisek), install(87-08-04,MR12.1-1056):
  3    33*     Add support for answering service to use IOCBs when tty_ cannot be
  3    34*     used to service login channels.
  3    35*                                                   END HISTORY COMMENTS */
  3    36 
  3    37 
  3    38 dcl	CDT_version_5	     fixed bin internal static initial (5) options (constant);
  3    39 dcl	CDT_version	     fixed bin internal static initial (6) options (constant);
  3    40 
  3    41 dcl	(cdtp, cdtep, fnpep, mpxep)
  3    42 			     ptr;
  3    43 
  3    44 dcl	1 cdt		     based (cdtp) aligned,	/* all of the system channels */
  3    45 	  2 author	     like author_dcl.author,	/* standard header */
  3    46 	  2 max_size	     fixed bin,		/* maximum number of cdte's in 255K */
  3    47 	  2 current_size	     fixed bin,		/* number of last cdte. */
  3    48 	  2 version	     fixed bin,
  3    49 	  2 freep		     fixed bin,		/* chain of free cdte's */
  3    50 	  2 n_cdtes	     fixed bin,		/* number of used cdte's */
  3    51 	  2 meters_last_reset    fixed bin (71),	/* clock time dialup meters were reset */
  3    52 	  2 realtime_in_dialup   fixed bin (71),	/* Dialup meter */
  3    53 	  2 cpu_in_dialup	     fixed bin (71),	/* .. */
  3    54 	  2 pf_in_dialup	     fixed bin,		/* .. */
  3    55 	  2 pp_in_dialup	     fixed bin,		/* .. */
  3    56 	  2 entries_to_dialup    fixed bin,		/* .. */
  3    57 	  2 flags,
  3    58 	    3 go		     bit (1) unal,		/* ans. serv. said "go ahead and answer the phones" */
  3    59 	    3 cdt_is_live	     bit (1) unal,		/* cdt is active */
  3    60 	    3 mux_mgr_system_init
  3    61 			     bit (1) unal,		/* mux mgr has loaded top-levels */
  3    62 	    3 pad1	     bit (33) unal,
  3    63 	  2 acceptable_fnp_tbf   fixed bin,		/* acceptable minutes between FNP crashes */
  3    64 	  2 spare_channel_count  fixed bin,		/* number of extra channels to leave room for in ring0 */
  3    65 	  2 threads	     aligned like channel_threads,
  3    66 						/* root of non-fnp-top-level-multiplexers */
  3    67 	  2 pad2		     (31) bit (36) aligned,	/* pad header to 80 words */
  3    68 	  2 fnp_entry	     dim (8) like fnpe,	/* max of 8 FNPs for now */
  3    69 	  2 cdt_entry	     dim (2500) like cdte;	/* # of cdte's in 255K */
  3    70 
  3    71 
  3    72 dcl	1 cdte		     based (cdtep) aligned,	/* a channel */
  3    73 	  2 in_use	     fixed bin,		/* see dialup_values. 0=NOW_FREE */
  3    74 /**** * These variables are filled in when the CDTE is created by cv_cmf. They are not dynamic. */
  3    75 	  2 pad1		     bit (36) aligned,
  3    76 	  2 name		     char (32),		/* ASCII name of channel */
  3    77 	  2 access_class	     (2) bit (72) aligned,	/* access class range */
  3    78 	  2 comment	     char (48),		/* printable message about channel */
  3    79 	  2 charge_type	     fixed bin (17) unal,	/* billing group */
  3    80 	  2 service_type	     fixed bin (17) unal,	/* service group (AS, ftp, mc) */
  3    81 	  2 line_type	     fixed bin (17) unal,	/* tty line type (protocol) */
  3    82 	  2 baud_rate	     fixed bin (17) unal,	/* 110, 133, 150, etc. */
  3    83 	  2 modem_type	     fixed bin (17) unal,	/* type of modem on this channel */
  3    84 	  2 pad2		     bit (18) unaligned,
  3    85 	  2 answerback	     char (8),		/* answerback string expected */
  3    86 	  2 initial_terminal_type
  3    87 			     char (32) unal,	/* as specified in the CMF */
  3    88 	  2 mpx_data	     unal,		/* data used only for multiplexed channels */
  3    89 	    3 mpx_type	     fixed bin (17),	/* type of multiplexing used */
  3    90 	    3 mpx_service	     fixed bin (17),	/* service type, active or inactive */
  3    91 	  2 flags,
  3    92 	  ( 3 attributes,
  3    93 	      4 ck_answerback    bit (1),		/* ON means that ansbk must equal our records */
  3    94 	      4 audit_access_error
  3    95 			     bit (1),		/* ON means ck that person auth is inside access class range  */
  3    96 						/*    this implies that the access_class describes a range of
  3    97*						   legitimate user auths. */
  3    98 	      4 hardwired	     bit (1),		/* ON means it is */
  3    99 	      4 set_modes	     bit (1),		/* ON means to set initial modes at dialup */
  3   100 	      4 dont_read_answerback
  3   101 			     bit (1),		/* ON means don't try to read answerback */
  3   102 	      4 pada	     bit (4),
  3   103 	    3 access_control     unaligned,		/* As below */
  3   104 	      4 dial_out	     bit (1),		/* dialing user must be on ACS */
  3   105 	      4 priv_attach	     bit (1),		/* PA_ user must be on ACS */
  3   106 	      4 dial_server	     bit (1),		/* accept_dials process must be on acs */
  3   107 	      4 login	     bit (1),		/* logging in user must be on acs */
  3   108 	      4 slave_dial	     bit (1),		/* dialing user must give -user and be on acs */
  3   109 	      4 pado	     bit (3),
  3   110 	    3 options,
  3   111 	      4 execute_initial_command
  3   112 			     bit (1),		/* ON means to do it */
  3   113 	      4 attached_by_operator
  3   114 			     bit (1),		/* ON means temporary attachment. */
  3   115 	      4 private_line     bit (1),		/* ON means private_line sync modem in use */
  3   116 	      4 bsc_ebcdic	     bit (1),		/* ON means bsc would like to use ebcdic code set */
  3   117 	      4 bsc_transparent  bit (1),		/* ON means bsc is in transparent mode */
  3   118 	      4 vip_pollselect   bit (1),		/* ON means VIP line is multidrop */
  3   119 	      4 autobaud	     bit (1),		/* ON means auto baud detection this channel */
  3   120 	      4 generic_destination_present
  3   121 			     bit (1),		/* ON means that the initial_command field contains
  3   122*						   a generic destination to match on dial_out or priv attach */
  3   123 	      4 use_iocb	     bit (1),		/* ON means to use IOCB operations to support channel */
  3   124 	      4 pado	     bit (9)
  3   125 	      )		     unaligned,
  3   126 	  2 initial_command	     char (64),		/* pseudo first input line */
  3   127 /**** The following variables represent dynamic control info, and
  3   128*      are used mostly by dialup_ and asu_ */
  3   129 	  2 event		     fixed bin (71),	/* event call channel for channel events */
  3   130 	  2 current_service_type fixed bin (17) unal,	/* Current usage of line. */
  3   131 	  2 tra_vec	     fixed bin (17) unal,	/* which section of dialup_ to do next */
  3   132 	  2 count		     fixed bin (17) unal,	/* How many login tries he's had. */
  3   133 	  2 dialup_flags	     unal,		/* flag bits for dialup to maintain */
  3   134 	    3 ppm		     bit (1) unal,		/* print preaccess message for IBM terminals */
  3   135 	    3 cpo		     bit (1) unal,		/* conditional printer-off (depends on answerback */
  3   136 	    3 wakeup_handler     bit (1) unal,		/* says who is wakeup handler for this channel */
  3   137 						/* 0 = dialup_, 1 = mc_tty_ */
  3   138 	    3 save_arg	     bit (1) unal,		/* -save login arg given */
  3   139 	    3 nosave_arg	     bit (1) unal,		/* -nosave login arg given */
  3   140 	    3 detach_after_hangup
  3   141 			     bit (1) unal,		/* remember WAIT_DETACH when setting WAIT_BEFORE_HANGUP */
  3   142 	    3 leave_edited	     bit (1) unal,		/* user control of edited mode */
  3   143 	    3 hold_arg	     bit (1) unal,		/* -hold arg given */
  3   144 	    3 no_hold_arg	     bit (1) unal,		/* -no_hold arg given */
  3   145 	    3 immediate_arg	     bit (1) unal,		/* -immediate arg given */
  3   146 	    3 current_access_class_valid
  3   147 			     bit (1) unal,		/* dialup_ or lg_ctl_ has determined the current_access_class */
  3   148 	    3 pad		     bit (7) unal,
  3   149 	  2 twx		     fixed bin,		/* channel device index */
  3   150 	  2 state		     fixed bin,		/* channel state */
  3   151 	  2 tty_id_code	     char (4),		/* channel id (answerback) */
  3   152 	  2 current_terminal_type
  3   153 			     char (32) unal,	/* most recently-set terminal type */
  3   154 	  2 process	     ptr unal,		/* ptr to ATE owning this channel */
  3   155 	  2 dialed_to_procid     bit (36),		/* Dialed channels remember owner's proc id */
  3   156 	  2 next_channel	     fixed bin (17) unal,	/* cdte index of next channel for this process */
  3   157 	  2 cur_line_type	     fixed bin (17) unal,	/* line type of currently dialed terminal */
  3   158 	  2 current_access_class (2) bit (72) aligned,	/* This is a range, but at this time it must be a null range.
  3   159*						   We do not yet define multi-class connections, but we will someday. */
  3   160 	  2 disconnected_ate_index
  3   161 			     fixed bin (17) unal,	/* index of ate of disconnected process */
  3   162 	  2 dial_ctl_ring	     fixed bin (3) unsigned unaligned,
  3   163 						/* used by dial_ctl_ to record ring of priv_attach or dial_out attachments */
  3   164 	  2 dial_rq_privileged   bit (1) unaligned,	/* used by dial ctl to record comm priv from priv_attach or dial_out request */
  3   165 	  2 pad3		     bit (14) unaligned,
  3   166 /**** The following variables are kept for metering purposes. */
  3   167 	  2 n_dialups	     fixed bin,		/* number of times channel has been dialed up */
  3   168 	  2 n_logins	     fixed bin,		/* number of login sessions on this channel */
  3   169 	  2 dialed_up_time	     fixed bin (35),	/* total time channel was dialed up (seconds) */
  3   170 	  2 dialup_time	     fixed bin (71),	/* time of present dialup */
  3   171 	  2 disconnected_proc_command
  3   172 			     fixed bin (12) unsigned unal,
  3   173 						/* 1 to 5 for -list,-create,-connect,-new_proc,-destroy */
  3   174 	  2 disconnected_proc_number
  3   175 			     fixed bin (12) unsigned unal,
  3   176 						/* {N} in -connect {N}, -new_proc {N}, -destroy {N} */
  3   177 	  2 n_disconnected_procs fixed bin (12) unsigned unal,
  3   178 						/* number of disconnected processes that user has */
  3   179 	  2 recent_wakeup_count  fixed bin,		/* counter to detect channel wakeup loop */
  3   180 	  2 recent_wakeup_time   fixed bin (71),	/* time of first wakeup in suspected channel wakeup loop */
  3   181 	  2 dial_ev_chn	     fixed bin (71),	/* Dialed channels remember master's IPC channel */
  3   182 /**** cdt_mgr_ uses these to maintain the tree of channels. They ****/
  3   183 /**** really belong in the mpxe, but it is full up, and the cdte ****/
  3   184 /**** had the space. */
  3   185 	  2 threads	     aligned like channel_threads,
  3   186 /**** The use name is that of the user who gave the dial or slave ****/
  3   187 /**** preaccess request. ****/
  3   188 	  2 user_name	     unaligned,
  3   189 	    3 person	     char (20) unaligned,
  3   190 	    3 project	     char (9) unaligned,
  3   191 	    3 pad		     char (3) unaligned,	/* no tag */
  3   192 	  2 iocbp		     ptr unaligned;		/* 104 words */
  3   193 
  3   194 
  3   195 dcl	generic_destination	     based char (32);	/* used to match destinations on dial_out and priv_attach,
  3   196*						   overlays initial_command field for slave and autocall lines */
  3   197 
  3   198 
  3   199 
  3   200 dcl	1 fnpe		     based (fnpep) aligned,	/* an FNP */
  3   201 						/* These variables are filled in from the CMF */
  3   202 	  2 type		     fixed bin,		/* type of this FNP, DN355, DN6670, etc. */
  3   203 	  2 memory	     fixed bin,		/* amount of memory on this FNP */
  3   204 	  2 nlslas	     fixed bin,		/* number of lslas on this FNP */
  3   205 	  2 nhslas	     fixed bin,		/* number of hslas on this FNP */
  3   206 	  2 service_type	     fixed bin,		/* service type */
  3   207 	  2 mpx_type	     fixed bin,		/* type of multiplexer on this fnp */
  3   208 	  2 coreimage	     char (168),		/* pathname of image, maybe in >sl1 */
  3   209 /**** The following are used during system operation to remember the state of the FNP */
  3   210 	  2 boot_segp	     ptr,			/* ptr to seg used for bootload */
  3   211 	  2 boot_ev_chan	     fixed bin (71),	/* for ring0 to report crashes and bootload complete */
  3   212 	  2 mpxe		     like mpxe,		/* standard multiplexer data */
  3   213 	  2 threads	     aligned like channel_threads,
  3   214 						/* same mpx threads as channel */
  3   215 	  2 pad3		     (25) fixed bin;	/* pad to 96 words per entry */
  3   216 
  3   217 /* This structure describes the data necessary to control a multiplexer.
  3   218*   For FNP's., a copy appears in the fnpe. For communications lines, it
  3   219*   overlays the initial_command field in the cdte. */
  3   220 
  3   221 dcl	1 mpxe		     based (mpxep) aligned,
  3   222 	  2 state		     fixed bin,		/* current state, up, down, loading */
  3   223 	  2 current_service_type fixed bin,		/* usually = service type, unless cdt installation changes it */
  3   224 	  2 current_mpx_type     fixed bin,		/* type of multiplexer currently running */
  3   225 	  2 n_bootloads	     fixed bin,		/* count of load attempts */
  3   226 	  2 time_initial_load    fixed bin (71),	/* time this MPX first completed a load */
  3   227 	  2 time_last_load	     fixed bin (71),	/* time MPX last completed a bootload */
  3   228 	  2 time_last_crash	     fixed bin (71),	/* time MPX last crashed */
  3   229 	  2 time_load_start	     fixed bin (71),	/* time current load started */
  3   230 	  2 last_tbf	     fixed bin,		/* number of minutes this MPX was up last bootload */
  3   231 	  2 flags		     unal,
  3   232 	    3 go		     bit (1),		/* start MPX after it loads */
  3   233 	    3 listening	     bit (1),		/* listen has been done on subchannels */
  3   234 	    3 check	     bit (1),		/* loaded with check option */
  3   235 	    3 retry_load	     bit (1),		/* reload if load fails */
  3   236 	    3 pad1	     bit (32),
  3   237 	  2 pad2		     (2) fixed bin;		/* pad to 16 words */
  3   238 
  3   239 /* These threads define the tree of multiplexers in the cdt. */
  3   240 /* next_sister and prev_sister link nodes at the same level, ordered */
  3   241 /* by alpha sort order of the channel name. Daughter points to the */
  3   242 /* first child of this node, if any. Daughter count is the number */
  3   243 /* of children, as a consistency check. Mother is a back pointer to */
  3   244 /* the parent, present in all the children, not just the first. */
  3   245 /* threads are cdt indexes. If positive, they index the cdt_entry array */
  3   246 /* in cdt, if negative, they are the negative of an index into the fnp_entry */
  3   247 /* array. If zero, they refer to the top of the non-fnp mpx tree. */
  3   248 
  3   249 dcl	1 channel_threads	     aligned based,
  3   250 	  2 next_sister	     fixed bin unaligned,
  3   251 	  2 prev_sister	     fixed bin unaligned,
  3   252 	  2 daughter	     fixed bin unaligned,
  3   253 	  2 mother	     fixed bin unaligned,	/* negative is a fnpx, positive a cdtx */
  3   254 	  2 pad		     bit (18) unaligned,
  3   255 	  2 daughter_count	     fixed bin unaligned;
  3   256 
  3   257 /* Values for cdte.service_type field */
  3   258 
  3   259 dcl	(
  3   260 	ANS_SERVICE	     init (1),		/* login or dial */
  3   261 	FTP_SERVICE	     init (2),		/* file transfer service */
  3   262 	MC_SERVICE	     init (3),		/* message coordinator */
  3   263 	SLAVE_SERVICE	     init (4),		/* special channel */
  3   264 	DIAL_SERVICE	     init (5),		/* transient state */
  3   265 	DIAL_OUT_SERVICE	     init (6),		/* auto call line */
  3   266 	MPX_SERVICE	     init (8),		/* ring0 demultiplexed line */
  3   267 	TANDD_SERVICE	     init (9)		/* transient state, attached for T & D */
  3   268 	)		     fixed bin internal static options (constant);
  3   269 
  3   270 /* Values for service type in both cdte and fnpe */
  3   271 
  3   272 dcl	(
  3   273 	INACTIVE		     init (7),		/* not to be used, even though configured */
  3   274 	ACTIVE		     init (1)
  3   275 	) /* for FNP only, configured and to be used */
  3   276 			     fixed bin internal static options (constant);
  3   277 
  3   278 /* Value for both cdte.in_use and fnpe.state */
  3   279 
  3   280 dcl	NOT_CONFIGURED	     fixed bin int static init (-1) options (constant);
  3   281 						/* was not configured at Multics bootload time */
  3   282 
  3   283 /* NOTE: an INACTIVE channel can be made active by operator command or CDT installation,
  3   284*   but a NOT_CONFIGURED channel can not be used until its multiplexer is reloaded */
  3   285 
  3   286 /* Value for cdte.in_use */
  3   287 
  3   288 dcl	CHANNEL_DELETED	     fixed bin int static init (-2);
  3   289 						/* channel deleted by CDT installation */
  3   290 
  3   291 /* NOTE: a configured channel being deleted by a CDT installation is set to CHANNEL_DELETED.
  3   292*   multiplexer_mgr_ sets cdte.in_use to NOW_FREE at the next reload of its multiplexer.
  3   293*   A NOT_CONFIGURED channel is set to NOW_FREE immediately when deleted by a CDT installation. */
  3   294 
  3   295 
  3   296 /* Values for mpxe.state field */
  3   297 
  3   298 dcl	(
  3   299 	FNP_FREE		     init (0),		/* this fnpe is not used */
  3   300 	FNP_UNKNOWN	     init (1),		/* FNP is in some unknown state */
  3   301 	FNP_DOWN		     init (2),		/* FNP crashed, not yet reloaded */
  3   302 	FNP_BOOT		     init (3),		/* FNP has been booted, but no response yet */
  3   303 	FNP_UP		     init (4)		/* FNP is up and running fine */
  3   304 	)		     fixed bin internal static options (constant);
  3   305 
  3   306 dcl	(
  3   307 	MPX_FREE		     init (0),		/* this mpxe is not used */
  3   308 	MPX_UNKNOWN	     init (1),		/* MPX is in some unknown state */
  3   309 	MPX_DOWN		     init (2),		/* MPX crashed, not yet reloaded */
  3   310 	MPX_BOOT		     init (3),		/* MPX has been booted, but no response yet */
  3   311 	MPX_UP		     init (4)		/* MPX is up and running fine */
  3   312 	)		     fixed bin internal static options (constant);
  3   313 
  4     1 /* BEGIN INCLUDE FILE ... fnp_types.incl.pl1 */
  4     2 
  4     3 
  4     4 
  4     5 /****^  HISTORY COMMENTS:
  4     6*  1) change(88-06-15,Berno), approve(88-07-13,MCR7928),
  4     7*     audit(88-06-15,Parisek), install(88-07-19,MR12.2-1061):
  4     8*     Add data needed for the uncp multiplexer (DSA gateway) interface
  4     9*     implementation.
  4    10*                                                   END HISTORY COMMENTS */
  4    11 
  4    12 
  4    13 /* Values for fnpe.type field */
  4    14 /*
  4    15*   Created 79 May 14 by Art Beattie by splitting information out from cdt.incl.pl1
  4    16*   Added in March 1982 - DN7100.fd.
  4    17**/
  4    18 
  4    19 dcl (DN355 init (1),				/* a DataNet 355 FNP */
  4    20      DN6600 init (2),				/* a DataNet 6600 FNP */
  4    21      DN6670 init (3),				/* a Honeywell Bull Network Processor (18x) */
  4    22      DN7100 init (4)				/* The DSA Datanet architecture (DN7) */
  4    23      ) fixed bin internal static options (constant);
  4    24 
  4    25 dcl  fnp_types (4) char (8) int static options (constant)
  4    26      init ("DN355", "DN6600", "DN6670", "DN7100");
  4    27 
  4    28 dcl  fnp_models (4) fixed bin (17) int static options (constant)
  4    29      init (355, 6600, 6670, 7100);
  4    30 	
  4    31 dcl  supported_fnp (4) bit (1) int static options (constant)
  4    32      init ("0"b, "0"b, "1"b, "1"b);
  4    33 
  4    34 
  4    35 /* END INCLUDE FILE ... fnp_types.incl.pl1 */
  3   314 
  3   315 
  3   316 /* END INCLUDE FILE ... cdt.incl.pl1 */
      171 
  5     1 /* BEGIN INCLUDE FILE ... author_dcl.incl.pl1 */
  5     2 
  5     3 /* This include file declares the "author" substructure
  5     4*   in a form suitable for using the PL/I "like" attribute.
  5     5*
  5     6*   Written 750304 by PG
  5     7**/
  5     8 
  5     9 dcl 1 author_dcl aligned based,
  6     1 /* BEGIN INCLUDE FILE author.incl.pl1 */
  6     2 
  6     3 /* the "author" items must always be the first ones in the table. The
  6     4*   module which moves the converted table to the System Control process
  6     5*   fills in these data items and assumes them to be at the head of the segment
  6     6*   regardless of the specific table's actual declaration. The variables
  6     7*   "lock" and "last_install_time" used to be "process_id" and "ev_channel"
  6     8*    respectively. For tables installed in multiple processes, these
  6     9*    are to be used to lock out multiple installations. */
  6    10 
  6    11 /*  Lock should be used as a modification lock. Since, in general,
  6    12*    entries may not be moved in system tables, even by installations,
  6    13*    it is sufficient for only installers and programs that change threads
  6    14*    to set or respect the lock. Simply updating data in an entry
  6    15*    requires no such protection.
  6    16*
  6    17*    Last_install_time is used by readers of system tables to detect
  6    18*    installations or other serious modifications. By checking it before
  6    19*    and after copying a block of data, they can be protected against
  6    20*    modifications.
  6    21*
  6    22*    Modules that set the lock should save proc_group_id, and then
  6    23*    put their group id there for the time they hold the lock.
  6    24*    if they do not actually install the, they should restore the group id.
  6    25**/
  6    26 
  6    27     2 author aligned,				/* validation data about table's author */
  6    28       3 proc_group_id char (32),			/* process-group-id  (personid.projectid.tag) */
  6    29       3 lock bit (36),				/* installation lock */
  6    30       3 update_attributes bit (1) unal,			/* update/add/delete attributes */
  6    31       3 update_authorization bit (1) unal,		/* update only authorizations */
  6    32       3 deferral_notified bit (1) unal,			/* installer notified of deferral of installation */
  6    33       3 pad bit (33) unaligned,
  6    34       3 last_install_time fixed bin (71),
  6    35       3 table char (4),				/* name of table, e.g., SAT MGT TTT RTDT PDT etc. */
  6    36       3 w_dir char (64),				/* author's working directory */
  6    37 
  6    38 /* END INCLUDE FILE author.incl.pl1 */
  5    10 
  5    11     2 pad;
  5    12 
  5    13 /* END INCLUDE FILE ... author_dcl.incl.pl1 */
      172 
  7     1 /* BEGIN INCLUDE FILE ... line_types.incl.pl1  */
  7     2 
  7     3 /* Written  November 10 1975 by Paul Green */
  7     4 /* Modified October 1978 by Larry Johnson to include line_type_names */
  7     5 /* Modified 12/19/78 by J. Stern to add POLLED_VIP line type */
  7     6 /* Modified 9/27/79 by J. Stern to add X25LAP line type */
  7     7 /* Modified Spring 1981 by Charles Hornig to add HDLC line type */
  7     8 /* Modified May 1981 by Robert Coren to add COLTS line type */
  7     9 /* Modified September 1984 by Robert Coren to correctly count VIP as a synchronous line type */
  7    10 
  7    11 
  7    12 /****^  HISTORY COMMENTS:
  7    13*  1) change(86-02-25,Negaret), approve(87-07-13,MCR7679),
  7    14*     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1056):
  7    15*     Add a DSA line type.
  7    16*  2) change(87-03-17,Beattie), approve(87-07-13,MCR7656),
  7    17*     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1056):
  7    18*     Add HASP_OPR to identify HASP workstation consoles with login service.
  7    19*                                                   END HISTORY COMMENTS */
  7    20 
  7    21 
  7    22 declare   (LINE_MC            initial (-2),
  7    23        	 LINE_TELNET	initial (-1),
  7    24            LINE_UNKNOWN       initial (0),
  7    25 	 LINE_ASCII	initial (1),
  7    26 	 LINE_1050	initial (2),
  7    27 	 LINE_2741	initial (3),
  7    28 	 LINE_ARDS	initial (4),
  7    29 	 LINE_SYNCH	initial (5),
  7    30 	 LINE_G115	initial (6),
  7    31 	 LINE_BSC		initial (7),
  7    32 	 LINE_ETX		initial (8),
  7    33 	 LINE_VIP		initial (9),
  7    34 	 LINE_ASYNC1	initial (10),
  7    35 	 LINE_ASYNC2	initial (11),
  7    36 	 LINE_ASYNC3	initial (12),
  7    37 	 LINE_SYNC1	initial (13),
  7    38 	 LINE_SYNC2	initial (14),
  7    39 	 LINE_SYNC3	initial (15),
  7    40 	 LINE_POLLED_VIP	initial (16),
  7    41 	 LINE_X25LAP	initial (17),
  7    42 	 LINE_HDLC	initial (18),
  7    43 	 LINE_COLTS	initial (19),
  7    44 	 LINE_DSA           initial (20),
  7    45 	 LINE_HASP_OPR	initial (21)
  7    46 	) fixed bin internal static options (constant);
  7    47 
  7    48 dcl  max_line_type fixed bin int static options (constant) init (21);
  7    49 
  7    50 declare  n_sync_line_types fixed bin int static options (constant) init (10);
  7    51 
  7    52 declare  sync_line_type (10) fixed bin int static options (constant) init (5, 6, 7, 9, 13, 14, 15, 16, 17, 18);
  7    53 
  7    54 dcl  line_types (-2:21) char (16) int static options (constant) init (
  7    55      "MC",                                                  /* -2 */
  7    56      "TELNET",					/* -1 */
  7    57      "none",					/* 0 */
  7    58      "ASCII",					/* 1 */
  7    59      "1050",					/* 2 */
  7    60      "2741",					/* 3 */
  7    61      "ARDS",					/* 4 */
  7    62      "Sync",					/* 5 */
  7    63      "G115",					/* 6 */
  7    64      "BSC",					/* 7 */
  7    65      "202ETX",					/* 8 */
  7    66      "VIP",					/* 9 */
  7    67      "ASYNC1",					/* 10 */
  7    68      "ASYNC2",					/* 11 */
  7    69      "ASYNC3",					/* 12 */
  7    70      "SYNC1",					/* 13 */
  7    71      "SYNC2",					/* 14 */
  7    72      "SYNC3",					/* 15 */
  7    73      "POLLED_VIP",					/* 16 */
  7    74      "X25LAP",					/* 17 */
  7    75      "HDLC",					/* 18 */
  7    76      "COLTS",					/* 19 */
  7    77      "DSA",					/* 20 */
  7    78      "HASP_OPR");					/* 21 */
  7    79 
  7    80 /* END INCLUDE FILE ... line_types.incl.pl1  */
      173 
      174 
      175      end load_uncp_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    07/19/88  1525.5  load_uncp_.pl1                    >special_ldd>install>MR12.2-1061>load_uncp_.pl1
169          1    09/03/82  1045.1  mcs_memory_map.incl.pl1           >ldd>include>mcs_memory_map.incl.pl1
170          2    05/28/82  1334.9  baud_rates.incl.pl1               >ldd>include>baud_rates.incl.pl1
171          3    08/06/87  0913.0  cdt.incl.pl1                      >ldd>include>cdt.incl.pl1
3-314        4    07/19/88  1524.1  fnp_types.incl.pl1                >special_ldd>install>MR12.2-1061>fnp_types.incl.pl1
172          5    09/09/75  2007.3  author_dcl.incl.pl1               >ldd>include>author_dcl.incl.pl1
5-10         6    04/21/82  1211.8  author.incl.pl1                   >ldd>include>author.incl.pl1
173          7    08/06/87  0913.4  line_types.incl.pl1               >ldd>include>line_types.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
FNP_FREE                               constant        fixed bin(17,0)          initial dcl 3-298 ref 121
FNP_UNKNOWN                            constant        fixed bin(17,0)          initial dcl 3-298 ref 162
a_chan_listp                           parameter       pointer                  dcl 49 ref 19 113
acdtp                                  parameter       pointer                  dcl 49 ref 19 110
acksw                                  parameter       bit(1)                   packed unaligned dcl 49 ref 19
addr                                                   builtin function         dcl 108 ref 112 155 155
afnpno                                 parameter       fixed bin(17,0)          dcl 49 ref 19 111
author                                 based           structure                level 2 dcl 5-9
author_dcl                             based           structure                level 1 dcl 5-9
baud                      4     000100 automatic       fixed bin(17,0)          array level 3 dcl 131 set ref 151*
baud_info_size                  000104 automatic       fixed bin(17,0)          dcl 76 set ref 128* 131
baud_rate                33(18)        based           fixed bin(17,0)          level 2 packed packed unaligned dcl 3-72 ref 151
boot_ev_chan             62            based           fixed bin(71,0)          level 2 dcl 3-200 ref 144
cdt                                    based           structure                level 1 dcl 3-44
cdte                                   based           structure                level 1 dcl 3-72
cdte_ptr                  1            based           pointer                  array level 2 packed packed unaligned dcl 102 ref
                                                                                  149
cdtep                           001112 automatic       pointer                  dcl 3-41 set ref 149* 150 151 152
cdtp                            001110 automatic       pointer                  dcl 3-41 set ref 110* 112
chan_list                              based           structure                level 1 dcl 102
chan_listp                      000102 automatic       pointer                  dcl 75 set ref 113* 128 147 148 149
channel_threads                        based           structure                level 1 dcl 3-249
code                                   parameter       fixed bin(35,0)          dcl 49 set ref 19 123* 155* 159 161*
count                     2     000100 automatic       fixed bin(17,0)          level 2 in structure "load_info" dcl 131
                                                                                  in begin block on line 129 set ref 147*
count                                  based           fixed bin(17,0)          level 2 in structure "chan_list" dcl 102
                                                                                  in procedure "load_uncp_" ref 128 147 148
devx                      3     000100 automatic       fixed bin(17,0)          array level 3 dcl 131 set ref 150*
dns_boot_ev_chan                000100 automatic       fixed bin(71,0)          level 2 dcl 131 set ref 144*
entry                     3     000100 automatic       structure                array level 2 dcl 131
error_table_$dev_nt_assnd       000010 external static fixed bin(35,0)          dcl 59 ref 123
etape                           000100 automatic       fixed bin(17,0)          level 2 dcl 131 set ref 146*
fnp_entry               120            based           structure                array level 2 dcl 3-44 set ref 112
fnpe                                   based           structure                level 1 dcl 3-200
fnpep                           001114 automatic       pointer                  dcl 3-41 set ref 112* 121 144 146 162
fnpno                           000100 automatic       fixed bin(17,0)          dcl 73 set ref 111* 112 155 155 161 161
hphcs_$tty_control              000012 constant        entry                    external dcl 63 ref 155 161
hsla_array                      000576 automatic       structure                array level 1 dcl 85
hsla_ch                         001104 automatic       fixed bin(17,0)          array dcl 98 set ref 118*
hwcm                                   based           structure                level 1 dcl 1-70
i                               000101 automatic       fixed bin(17,0)          dcl 73 set ref 148* 149 150 151 152*
icw                                    based           structure                level 1 dcl 1-64
line_type                33            based           fixed bin(17,0)          level 2 in structure "cdte" packed packed unaligned
                                                                                  dcl 3-72 in procedure "load_uncp_" ref 152
line_type                 5     000100 automatic       fixed bin(17,0)          array level 3 in structure "load_info" dcl 131
                                                                                  in begin block on line 129 set ref 152*
line_type                       000106 automatic       fixed bin(17,0)          array level 2 in structure "lsla_array" packed
                                                                                  packed unaligned dcl 81 in procedure "load_uncp_"
                                                                                  set ref 115*
line_type                       000576 automatic       fixed bin(17,0)          array level 2 in structure "hsla_array" packed
                                                                                  packed unaligned dcl 85 in procedure "load_uncp_"
                                                                                  set ref 116*
load_info                       000100 automatic       structure                level 1 dcl 131 set ref 143* 155 155
lsla_array                      000106 automatic       structure                array level 1 dcl 81
lsla_ch                         001076 automatic       fixed bin(17,0)          array dcl 97 set ref 117*
max                                                    builtin function         dcl 108 ref 128
mpxe                     64            based           structure                level 2 in structure "fnpe" dcl 3-200 in procedure
                                                                                  "load_uncp_"
mpxe                                   based           structure                level 1 dcl 3-221 in procedure "load_uncp_"
null                                                   builtin function         dcl 108 ref 161 161
pad3                    107            based           fixed bin(17,0)          array level 2 dcl 3-200 ref 146
state                    64            based           fixed bin(17,0)          level 3 dcl 3-200 set ref 121 162*
substr                                                 builtin function         dcl 108 ref 155 155 161 161
tandd_configured                000105 automatic       bit(1)                   packed unaligned dcl 77 set ref 119*
twx                      76            based           fixed bin(17,0)          level 2 dcl 3-72 ref 150
unspec                                                 builtin function         dcl 108 set ref 143*
version                         000100 automatic       char(4)                  level 2 dcl 131 set ref 145*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
ACTIVE                                 internal static fixed bin(17,0)          initial dcl 3-272
ANS_SERVICE                            internal static fixed bin(17,0)          initial dcl 3-259
CDT_version                            internal static fixed bin(17,0)          initial dcl 3-39
CDT_version_5                          internal static fixed bin(17,0)          initial dcl 3-38
CHANNEL_DELETED                        internal static fixed bin(17,0)          initial dcl 3-288
CONSOLE                                internal static bit(5)                   initial packed unaligned dcl 1-114
DIA                                    internal static bit(5)                   initial packed unaligned dcl 1-114
DIAL_OUT_SERVICE                       internal static fixed bin(17,0)          initial dcl 3-259
DIAL_SERVICE                           internal static fixed bin(17,0)          initial dcl 3-259
DN355                                  internal static fixed bin(17,0)          initial dcl 4-19
DN6600                                 internal static fixed bin(17,0)          initial dcl 4-19
DN6670                                 internal static fixed bin(17,0)          initial dcl 4-19
DN7100                                 internal static fixed bin(17,0)          initial dcl 4-19
FNP_BOOT                               internal static fixed bin(17,0)          initial dcl 3-298
FNP_DOWN                               internal static fixed bin(17,0)          initial dcl 3-298
FNP_UP                                 internal static fixed bin(17,0)          initial dcl 3-298
FTP_SERVICE                            internal static fixed bin(17,0)          initial dcl 3-259
HSLA                                   internal static bit(5)                   initial packed unaligned dcl 1-114
INACTIVE                               internal static fixed bin(17,0)          initial dcl 3-272
LINE_1050                              internal static fixed bin(17,0)          initial dcl 7-22
LINE_2741                              internal static fixed bin(17,0)          initial dcl 7-22
LINE_ARDS                              internal static fixed bin(17,0)          initial dcl 7-22
LINE_ASCII                             internal static fixed bin(17,0)          initial dcl 7-22
LINE_ASYNC1                            internal static fixed bin(17,0)          initial dcl 7-22
LINE_ASYNC2                            internal static fixed bin(17,0)          initial dcl 7-22
LINE_ASYNC3                            internal static fixed bin(17,0)          initial dcl 7-22
LINE_BSC                               internal static fixed bin(17,0)          initial dcl 7-22
LINE_COLTS                             internal static fixed bin(17,0)          initial dcl 7-22
LINE_DSA                               internal static fixed bin(17,0)          initial dcl 7-22
LINE_ETX                               internal static fixed bin(17,0)          initial dcl 7-22
LINE_G115                              internal static fixed bin(17,0)          initial dcl 7-22
LINE_HASP_OPR                          internal static fixed bin(17,0)          initial dcl 7-22
LINE_HDLC                              internal static fixed bin(17,0)          initial dcl 7-22
LINE_MC                                internal static fixed bin(17,0)          initial dcl 7-22
LINE_POLLED_VIP                        internal static fixed bin(17,0)          initial dcl 7-22
LINE_SYNC1                             internal static fixed bin(17,0)          initial dcl 7-22
LINE_SYNC2                             internal static fixed bin(17,0)          initial dcl 7-22
LINE_SYNC3                             internal static fixed bin(17,0)          initial dcl 7-22
LINE_SYNCH                             internal static fixed bin(17,0)          initial dcl 7-22
LINE_TELNET                            internal static fixed bin(17,0)          initial dcl 7-22
LINE_UNKNOWN                           internal static fixed bin(17,0)          initial dcl 7-22
LINE_VIP                               internal static fixed bin(17,0)          initial dcl 7-22
LINE_X25LAP                            internal static fixed bin(17,0)          initial dcl 7-22
LSLA                                   internal static bit(5)                   initial packed unaligned dcl 1-114
MC_SERVICE                             internal static fixed bin(17,0)          initial dcl 3-259
MPX_BOOT                               internal static fixed bin(17,0)          initial dcl 3-306
MPX_DOWN                               internal static fixed bin(17,0)          initial dcl 3-306
MPX_FREE                               internal static fixed bin(17,0)          initial dcl 3-306
MPX_SERVICE                            internal static fixed bin(17,0)          initial dcl 3-259
MPX_UNKNOWN                            internal static fixed bin(17,0)          initial dcl 3-306
MPX_UP                                 internal static fixed bin(17,0)          initial dcl 3-306
NOT_CONFIGURED                         internal static fixed bin(17,0)          initial dcl 3-280
PRINTER                                internal static bit(5)                   initial packed unaligned dcl 1-114
SLAVE_SERVICE                          internal static fixed bin(17,0)          initial dcl 3-259
TANDD_SERVICE                          internal static fixed bin(17,0)          initial dcl 3-259
baud_table                             internal static fixed bin(17,0)          initial array dcl 2-8
fnp_models                             internal static fixed bin(17,0)          initial array dcl 4-28
fnp_types                              internal static char(8)                  initial array packed unaligned dcl 4-25
generic_destination                    based           char(32)                 packed unaligned dcl 3-195
hsla_table                             based           structure                array level 1 packed packed unaligned dcl 1-100
hwcmp                                  automatic       pointer                  dcl 1-112
iom_table                              based           structure                array level 1 packed packed unaligned dcl 1-83
itblp                                  automatic       pointer                  dcl 1-112
line_types                             internal static char(16)                 initial array packed unaligned dcl 7-54
low_mem                                based           structure                level 1 dcl 1-15
lsla_table                             based           structure                array level 1 packed packed unaligned dcl 1-92
max_line_type                          internal static fixed bin(17,0)          initial dcl 7-48
mem_array                              based           structure                level 1 dcl 1-11
memp                                   automatic       pointer                  dcl 1-112
min_modules                            internal static fixed bin(17,0)          initial dcl 69
mpxep                                  automatic       pointer                  dcl 3-41
n_sync_line_types                      internal static fixed bin(17,0)          initial dcl 7-50
speed_bit                              internal static fixed bin(17,0)          initial array dcl 67
supported_fnp                          internal static bit(1)                   initial array packed unaligned dcl 4-31
sync_line_type                         internal static fixed bin(17,0)          initial array dcl 7-52
tblp                                   automatic       pointer                  dcl 1-112

NAME DECLARED BY EXPLICIT CONTEXT.
load_uncp_                      000025 constant        entry                    external dcl 19

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       432         446     363         442
Length       746     363        14         264      47           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
load_uncp_                          616 external procedure  is an external procedure.  
begin block on line 129              90 begin block         uses auto adjustable storage.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
begin block on line 129  000100 load_info                   begin block on line 129
load_uncp_               000100 fnpno                       load_uncp_
                         000101 i                           load_uncp_
                         000102 chan_listp                  load_uncp_
                         000104 baud_info_size              load_uncp_
                         000105 tandd_configured            load_uncp_
                         000106 lsla_array                  load_uncp_
                         000576 hsla_array                  load_uncp_
                         001076 lsla_ch                     load_uncp_
                         001104 hsla_ch                     load_uncp_
                         001110 cdtp                        load_uncp_
                         001112 cdtep                       load_uncp_
                         001114 fnpep                       load_uncp_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
enter_begin_block   leave_begin_block   call_ext_out_desc   return_mac          alloc_auto_adj      ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
hphcs_$tty_control

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$dev_nt_assnd




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     19 000020       110 000032       111 000036       112 000040       113 000043       115 000046       116 000074
    117 000123       118 000135       119 000147       121 000150       123 000153       124 000157       128 000160
    129 000165       131 000170       143 000204       144 000213       145 000216       146 000222       147 000224
    148 000226       149 000236       150 000240       151 000244       152 000251       153 000254       155 000256
    157 000315       159 000316       161 000321       162 000357       166 000362


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
