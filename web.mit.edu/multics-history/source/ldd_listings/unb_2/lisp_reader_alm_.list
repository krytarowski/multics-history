ASSEMBLY LISTING OF SEGMENT >special_ldd>install>MR12.0-1206>lisp_reader_alm_.alm            
ASSEMBLED ON:	11/05/86  1102.4 mst Wed
OPTIONS USED:	list 
ASSEMBLED BY:	ALM Version  6.7  October 1986  
ASSEMBLER CREATED:	10/08/86  1557.5 mst Wed

                                     1  " **************************************************************
                                     2  " *                                                            *
                                     3  " * Copyright, (C) Massachusetts Institute of Technology, 1973 *
                                     4  " *                                                            *
                                     5  " **************************************************************
                                     6  " alm garbage for reader
                                     7  
                                     8  " 29 Nov 1972, D. A. Moon
                                     9  " Modified 28 Mar 73 for new I/O kludge
                                    10  " Modified 4 August 1973 for fast chrct, linel
                                    11  "	**** this modification makes this routine incompatible with the 645 processor
                                    12  " modified 19 October 1973 by DAM for new syntax bits, new iochan format
                                    13   " modified 74.09.21 by DAM to accept t for tty as well as nil
                                    14  
                        000766      15  	segdef	powers_of_ten
                                    16  
                        000135      17  	entry	left_shift,tyi,tyipeek,readch,ascii_alm,tyo_alm
                                    18  
                                    19  	tempd	argl(4)
                                    20  	temp	temp
                        000032      21  	equ	save_bp,26		the arg-ptr save loc (kludge)
                                    22  
                        000012      23  	bool	NL,12			newline
                                    24  
    000000                          25  	segref	lisp_static_vars_,obarray,ctrlW,tty_output_chan,read_print_nl_sync,rdr_state,ctrlQ,tty_input_chan
    000000                          26  	segref	lisp_static_vars_,ctrlR,infile,outfiles,readtable
                        000450      27  	equ	status_terpri,296		offset of status_terpri in read_table
                                    28  
                                    29  " use of registers
                                    30  
                                    31  " x0	calls by tsx0
                                    32  " x1	-> eppbp ext_entry instruction for call_out
                                    33  " x2 	temp
                                    34  " x3	temp
                                    35  " x4	-> failure exit, which switches to pl1 version of same routine when hard case
                                    36  " x5	-2*nargs for lsubrs
                                    37  " x6	temp
                                    38  " x7	unmkd pdl ptr
                                    39  
                                    40  " bp	-> iochan block.  Also ptr temp
                                    41  " ap	mkd pdl ptr
                                    42  " lp	-> our linkage section
                                    43  " lb	temporary
                                    44  
                                    45  " q	character (right adjusted)
                                    46  " aq	lisp object
                                    47  
                                    48  
                                    49  
                                    50  
                                    51  	include	lisp_iochan
                                   1-1  
                                   1-2  """ BEGIN INCLUDE FILE lisp_iochan.incl.alm
                                   1-3  
                                   1-4  """ This is the format of the iochan block, which is used to control i/o operations
                                   1-5  """ There is one iochan block for each logical channel.
                                   1-6  """ A logical channel converses with a sequence of blocks,
                                   1-7  """ which are buffers for a stream or segments for a(multi-seg)file.
                                   1-8  
                        000000     1-9  	equ	iochan.ioindex,0		current character position in buffer or segment
                        000001    1-10  	equ	iochan.iolength,1		number of characters in buffer or segment
                        000002    1-11  	equ	iochan.ioptr,2		-> buffer or base of segment
                        000004    1-12  	equ	iochan.thread,4		threaded list of all open iochans
                        000006    1-13  	equ	iochan.fcbp,6		for tssi_
                        000010    1-14  	equ	iochan.aclinfop,8		..
                        000012    1-15  	equ	iochan.component,10	0 for stream, comp no for msf
                        000013    1-16  	equ	iochan.charpos,11
                        000014    1-17  	equ	iochan.linel,12
                        000015    1-18  	equ	iochan.flags,13
                        400000    1-19  	bool	iochan.seg,400000		1 => msf, 0 => stream
                        200000    1-20  	bool	iochan.read,200000		0 => openi, 1 => not
                        100000    1-21  	bool	iochan.write,100000		0 => openo, 1 => not
                        040000    1-22  	bool	iochan.gc_mark,40000	for the garbage collector
                        020000    1-23  	bool	iochan.interactive,20000	1 => input => this is the tty
                                  1-24  "					     output => flush buff after each operation
                        010000    1-25  	bool	iochan.must_reopen,10000	1 => saved iochan, must re-open before use
                        004000    1-26  	bool	iochan.nlsync,4000		1 => there is a NL in the buffer.
                        002000    1-27  	bool	iochan.charmode,2000	enables "instant" ios_$write
                        001000    1-28  	bool	iochan.extra_nl_done,1000	last char output was extra NL for chrct
                        000400    1-29  	bool	iochan.fixnum_mode,400	for use with in and out functions
                        000200    1-30  	bool	iochan.image_mode,200	just suppress auto-nl
                        210400    1-31  	bool	not_ok_to_read,210400	mask for checking input chan
                        110400    1-32  	bool	not_ok_to_write,110400	mask for checking output chan
                                  1-33  
                        000016    1-34  	equ	iochan.function,14		** gc-able **  eoffn (input) or endpagefn (output)
                        000020    1-35  	equ	iochan.namelist,16		** gc-able **  list of names, car is directory pathname
                        000022    1-36  	equ	iochan.name,18		stream name or entry name
                        000032    1-37  	equ	iochan.pagel,26
                        000033    1-38  	equ	iochan.linenum,27
                        000034    1-39  	equ	iochan.pagenum,28
                        000035    1-40  	equ	iochan.End,29		size of this structure.
                                  1-41  
                        736777    1-42  	bool	flag_reset_mask,736777	anded into flags after each char
                                  1-43  
                                  1-44  """ END INCLUDE FILE lisp_iochan.incl.alm
                                    52  	include	lisp_array_fmt
                                   2-1  """ BEGIN INCLUDE FILE lisp_array_fmt.incl.alm
                                   2-2  
                                   2-3  " This include file describes the format of the "new" LISP arrays.
                                   2-4  " Written 74.05.13 by DAM
                                   2-5  
                        000000     2-6  	equ	array_info.ndims,0		left half
                        000000     2-7  	equ	array_info.gc_mark,0	right half
                        000001     2-8  	equ	call_array_operator,1	tspbp ab|array_opr,*
                        000002     2-9  	equ	array_data_ptr,2		-> dope vector||data in Lists space
                        000004    2-10  	equ	array_load_sequence,4	lda, ldq, tra bp|0
                        000007    2-11  	equ	array_info.type,7		left half - codes dcl below
                        000007    2-12  	equ	array_info.2ndims,7		right half - minus 2 times ndims
                                  2-13  
                        000000    2-14  	equ	S_expr_array,0		values for array_info.type
                        000001    2-15  	equ	Un_gc_array,1
                        000002    2-16  	equ	Fixnum_array,2
                        000003    2-17  	equ	Flonum_array,3
                        000004    2-18  	equ	Readtable_array,4
                        000005    2-19  	equ	Obarray_array,5
                        000006    2-20  	equ	Dead_array,6
                                  2-21  
                                  2-22  """ END INCLUDE FILE lisp_array_fmt.incl.alm
                                    53  	include	lisp_stack_seg
                                   3-1  " BEGIN INCLUDE FILE lisp_stack_seg.incl.alm
                                   3-2  
                                   3-3  "	lisp stack segment header format
                                   3-4  "	Last modified by Reed 6/21/72
                                   3-5  "
                        000000     3-6  	equ	marked_stack_bottom,0	offset of ptr to bottom of marked stack
                        000002     3-7  	equ	unmkd_stack_bottom,2	offset of ptr to bottom of unmkd_stack
                        000004     3-8  	equ	stack_ptr_ptr,4		offset of ptr to lisp_static_vars_$stack_ptr
                        000006     3-9  	equ	unmkd_ptr_ptr,6		offset of ptr to lisp_static_vars_$unmkd_ptr's offset word
                        000010    3-10  	equ	array_pointer,8		points at cell of array most recently referenced
                        000012    3-11  	equ	nil,10			offset of cell containing pointer to nil...
                        000014    3-12  	equ	true,12			offset of cell containing pointer to t...
                        000016    3-13  	equ	in_pl1_code,14		offset of flag saying whether stack_ptr
                                  3-14  "					& unmkd_ptr or ap and ab|.,x7 are valid...if zero, ap,ab arevalid.
                                  3-15  " table of pointers to operators
                                  3-16  
                        000020    3-17  	equ	bind_op,16
                        000022    3-18  	equ	unbind_op,18
                        000024    3-19  	equ	errset1_op,20
                        000026    3-20  	equ	errset2_op,22
                        000030    3-21  	equ	unerrset_op,24
                        000032    3-22  	equ	call_op,26
                        000034    3-23  	equ	catch1_op,28
                        000036    3-24  	equ	catch2_op,30
                        000040    3-25  	equ	uncatch_op,32
                        000042    3-26  	equ	gensym_data,34	" data for gensym function
                                  3-27  
                        000044    3-28  	equ	system_lp,36		pointer to common linkage section for bound segment.
                        000046    3-29  	equ	iogbind_op,38		operator to help out with compiled iog.
                        000050    3-30  	equ	unseen_go_tag_op,40
                        000052    3-31  	equ	throw1_op,42
                        000054    3-32  	equ	throw2_op,44
                        000056    3-33  	equ	signp_op,46
                        000060    3-34  	equ	type_fields,48
                        000062    3-35  	equ	return_op,50
                        000064    3-36  	equ	err_op,52
                        000066    3-37  	equ	pl1_interface,54
                        000070    3-38  	equ	pl1_lsubr_interface,56
                        000072    3-39  	equ	cons_op,58		operator for compiled cons
                        000074    3-40  	equ	ncons_op,60		opeator for compiled cons with nil
                        000076    3-41  	equ	xcons_op,62		operator for compiled xcons
                        000100    3-42  	equ	begin_list_op,64		operator to begin compiled list code
                        000102    3-43  	equ	append_list_op,66		operator to get new list cell and hook on end
                        000104    3-44  	equ	terminate_list_op,68	operator to finish off list.
                        000106    3-45  	equ	compare_op,70
                        000110    3-46  	equ	link_opr,72
                        000112    3-47  	equ	array_operator,74
                        000114    3-48  	equ	dead_array_operator,76
                        000116    3-49  	equ	store_operator,78
                        000120    3-50  	equ	floating_store_operator,80
                        000122    3-51  	equ	array_info_for_store,82
                        000124    3-52  	equ	array_offset_for_store,84
                        000126    3-53  	equ	array_link_snap_opr,86
                        000130    3-54  	equ	create_string_desc_op,88	string desc for PL/I call
                        000132    3-55  	equ	create_array_desc_op,90	array desc for PL/I call
                        000134    3-56  	equ	pl1_call_op,92		PL/I call operator
                        000136    3-57  	equ	cons_string_op,94		operator to cons up a string
                        000140    3-58  	equ	create_varying_string_op,96
                        000142    3-59  	equ	unwp1_op,98		unwind-protect start
                        000144    3-60  	equ	unwp2_op,100		ditto, for compat.
                        000146    3-61  	equ	ununwp_op,102		End unwind-protect.
                        000150    3-62  	equ	irest_return_op,104 	Interrupt restore return
                        000152    3-63  	equ	pl1_call_nopop_op,106	PL1 call, dont pop PL1 frame
                        000154    3-64  	equ	rcv_char_star_op,108	Receive char * result, pop pl1frame
                                  3-65  	" spare 110
                        000174    3-66  	equ	begin_unmkd_stack,124	beginning of unmkd_stack
                                  3-67  
                                  3-68  " END INCLUDE FILE lisp_stack_seg.incl.alm
                                  3-69  
                                    54  	include	stack_header
                                   4-1  "	BEGIN INCLUDE FILE ... stack_header.incl.alm  3/72  Bill Silver
                                   4-2  "
                                   4-3  "	modified 7/76 by M. Weaver for *system links and more system use of areas
                                   4-4  "	modified 3/77 by M. Weaver  to add rnt_ptr
                                   4-5  "	modified 7/77 by S. Webber to add run_unit_depth and assign_linkage_ptr
                                   4-6  "	modified 6/83 by J. Ives to add trace_frames and in_trace.
                                   4-7  
                                   4-8  " HISTORY COMMENTS:
                                   4-9  "  1) change(86-06-24,DGHowe), approve(86-06-24,MCR7396),
                                  4-10  "     audit(86-08-05,Schroth), install(86-11-03,MR12.0-1206):
                                  4-11  "     added the heap_header_ptr definition
                                  4-12  "  2) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
                                  4-13  "     audit(86-10-10,Fawcett), install(86-11-03,MR12.0-1206):
                                  4-14  "     Modified to support control point management.  These changes were
                                  4-15  "     actually made in February 1985 by G. Palter.
                                  4-16  "  3) change(86-10-22,Fawcett), approve(86-10-22,MCR7473),
                                  4-17  "     audit(86-10-22,Farley), install(86-11-03,MR12.0-1206):
                                  4-18  "     Remove the old_lot pointer and replace it with cpm_data_ptr. Use the 18
                                  4-19  "     bit pad after cur_lot_size for the cpm_enabled. This was done to save
                                  4-20  "     some space int the stack header and change the cpd_ptr unal to
                                  4-21  "     cpm_data_ptr (ITS pair).
                                  4-22  "                                                      END HISTORY COMMENTS
                                  4-23  
                        000004    4-24  	equ	stack_header.cpm_data_ptr,4		ptr to control point for this stack
                        000006    4-25  	equ	stack_header.combined_stat_ptr,6	ptr to separate static area
                                  4-26  
                        000010    4-27  	equ	stack_header.clr_ptr,8		ptr to area containing linkage sections
                        000012    4-28  	equ	stack_header.max_lot_size,10		number of words allowed in lot (DU)
                        000012    4-29  	equ	stack_header.main_proc_invoked,10	nonzero if main proc was invoked in run unit (DL)
                        000012    4-30  	equ	stack_header.run_unit_depth,10	number of active run units stacked (DL)
                        000013    4-31  	equ	stack_header.cur_lot_size,11		DU number of words (entries) in lot
                        000013    4-32            equ	stack_header.cpm_enabled,11		DL  non-zero if control point management is enabled
                        000014    4-33  	equ	stack_header.system_free_ptr,12	ptr to system storage area
                        000016    4-34  	equ	stack_header.user_free_ptr,14		ptr to user storage area
                                  4-35  
                        000020    4-36  	equ	stack_header.parent_ptr,16		ptr to parent stack or null
                        000022    4-37  	equ	stack_header.stack_begin_ptr,18	ptr to first stack frame
                        000024    4-38  	equ	stack_header.stack_end_ptr,20		ptr to next useable stack frame
                        000026    4-39  	equ	stack_header.lot_ptr,22		ptr to the lot for the current ring
                                  4-40  
                        000030    4-41  	equ	stack_header.signal_ptr,24		ptr to signal proc for current ring
                        000032    4-42  	equ	stack_header.bar_mode_sp,26		value of sp before entering bar mode
                        000034    4-43  	equ	stack_header.pl1_operators_ptr,28	ptr: pl1_operators_$operator_table
                        000036    4-44  	equ	stack_header.call_op_ptr,30		ptr to standard call operator
                                  4-45  
                        000040    4-46  	equ	stack_header.push_op_ptr,32		ptr to standard push operator
                        000042    4-47  	equ	stack_header.return_op_ptr,34		ptr to standard return operator
                        000044    4-48  	equ	stack_header.ret_no_pop_op_ptr,36	ptr: stand. return/ no pop operator
                        000046    4-49  	equ	stack_header.entry_op_ptr,38		ptr to standard entry operator
                                  4-50  
                        000050    4-51  	equ	stack_header.trans_op_tv_ptr,40	ptr to table of translator operator ptrs
                        000052    4-52  	equ	stack_header.isot_ptr,42		pointer to ISOT
                        000054    4-53  	equ	stack_header.sct_ptr,44		pointer to System Condition Table
                        000056    4-54  	equ	stack_header.unwinder_ptr,46		pointer to unwinder for current ring
                                  4-55  
                        000060    4-56  	equ	stack_header.sys_link_info_ptr,48	ptr to *system link name table
                        000062    4-57  	equ	stack_header.rnt_ptr,50		ptr to reference name table
                        000064    4-58  	equ	stack_header.ect_ptr,52		ptr to event channel table
                        000066    4-59  	equ	stack_header.assign_linkage_ptr,54	ptr to area for hcs_$assign_linkage calls
                        000070    4-60  	equ	stack_header.heap_header_ptr,56	ptr to heap header.
                        000072    4-61  	equ	stack_header.trace_frames,58		stack of trace_catch_ frames
                        000073    4-62  	equ	stach_header.trace_top_ptr,59		trace pointer
                        000074    4-63  	equ	stack_header.in_trace,60		trace antirecurse bit
                        000100    4-64  	equ	stack_header_end,64			length of stack header
                                  4-65  
                                  4-66  
                                  4-67  
                                  4-68  
                        000000    4-69  	equ	trace_frames.count,0		number of trace frames on stack
                        000001    4-70  	equ	trace_frames.top_ptr,1		packed pointer to top one
                                  4-71  
                                  4-72  "	The  following constant is an offset within the  pl1  operators table.
                                  4-73  "	It  references a  transfer vector table.
                                  4-74  
                        000551    4-75  	bool	tv_offset,551
                                  4-76  
                                  4-77  
                                  4-78  "	The  following constants are offsets within this transfer vector table.
                                  4-79  
                        001170    4-80  	equ	call_offset,tv_offset+271
                        001171    4-81  	equ	push_offset,tv_offset+272
                        001172    4-82  	equ	return_offset,tv_offset+273
                        001173    4-83  	equ	return_no_pop_offset,tv_offset+274
                        001174    4-84  	equ	entry_offset,tv_offset+275
                                  4-85  
                                  4-86  
                                  4-87  " 	END INCLUDE FILE stack_header.incl.alm
                                    55  	include	lisp_object_types
                                   5-1  
                                   5-2  " BEGIN INCLUDE FILE lisp_object_types.incl.alm
                                   5-3  "
                                   5-4  " D.A.Moon 14 July 72
                                   5-5  
                                   5-6  "These are bit masks used to check or set the type bits in lisp pointers
                                   5-7  "they should be used with cana instructions in the dl mode.
                                   5-8  "
                                   5-9  " Modified 1 Oct 1972 by Dan Bricklin to add bignum types.
                                  5-10  
                                  5-11  
                                  5-12  
                        077700    5-13  	bool	lisp_ptr.type,077700	"the whole type field
                                  5-14  
                        040000    5-15  	bool	Fixed,040000		"fixed number, stored in second word of ptr
                        020000    5-16  	bool	Float,020000		"floating number, stored in second word of ptr
                        061400    5-17  	bool	Numeric,061400		"fixed or float, big or little
                        010000    5-18  	bool	Atsym,010000		"Atomic symbol pointed at by ptr
                        077700    5-19  	bool	Atomic,077700		"any of these bits indicates an atom (non-list)
                        001000    5-20  	bool	Bignum,001000		"points to a bignum - fixed
                        060000    5-21  	bool	Uncollectable,060000	"not a pointer, also both bits on = "pdl_ptr"
                        004000    5-22  	bool	String,004000		"points at a lisp character string
                        002000    5-23  	bool	Subr,002000		"points at subr link
                        000400    5-24  	bool	System_Subr,000400		"marks a subr as being in the text of lisp bound seg.
                        000200    5-25  	bool	Array,000200		"points at an array,
                                  5-26  					" which is a special kind of subr
                        067500    5-27  	bool	Unevalable,067500		"any of these bits means
                                  5-28  					" does not have car and cdr
                        001000    5-29  	bool	Big_fixed,001000		"points to fixed bignum
                        000100    5-30  	bool	File,000100		"points to a file object (i.e. an iochan)
                                  5-31  
                                  5-32  "fields for making numbers, a fault tag is included in case someone takes the car or cdr of it
                                  5-33  
                        040047    5-34  	bool	fixnum_type,040047
                        020047    5-35  	bool	flonum_type,020047
                                  5-36  
                                  5-37  " END INCLUDE FILE: lisp_object_types.incl.alm
                                    56  	include	lisp_error_codes
                                   6-1  
                                   6-2  " BEGIN INCLUDE FILE lisp_error_codes.incl.alm
                                   6-3  
                                   6-4  "This contains codes to be stored on the unmkd pdl before calling
                                   6-5  "lisp_error_.  These codes, at ab|-2,x7, are used by lisp_error_
                                   6-6  "as an index into lisp_error_table_.
                                   6-7  
                        000144     6-8  	equ	undefined_atom,100			- correctable
                        000145     6-9  	equ	undefined_function,101		- correctable
                        000146    6-10  	equ	too_many_args,102			uncorrectable 
                        000147    6-11  	equ	too_few_args,103			..
                        000150    6-12  	equ	file_system_error,104		(obsolete)
                        000151    6-13  	equ	bad_argument,105			uncorrectable arg reject
                        000152    6-14  	equ	undefined_subr,106
                        000153    6-15  	equ	bad_function,107			"bad functional form"
                        000154    6-16  	equ	bad_bv,108			attempt to bind non-variable
                        000155    6-17  	equ	unseen_go_tag,109			correctable -> unevaled new tag
                        000156    6-18  	equ	throw_to_no_catch,110		..
                        000157    6-19  	equ	nonfixedarg,111			correctable
                        000160    6-20  	equ	parenmissing,112			uncorr reader error
                        000161    6-21  	equ	doterror,113			..
                        000162    6-22  	equ	illobj,114			..
                        000163    6-23  	equ	badmacro,115			..
                        000164    6-24  	equ	shortreadlist,116			..
                        000165    6-25  	equ	badreadlist,117			..
                        000166    6-26  	equ	array_bound_error,118		corr -> (array sub1 sub2...)
                        000167    6-27  	equ	car_cdr_error,119			uncorr - car or cdr of number
                        000170    6-28  	equ	bad_arg_correctable,120		correctable arg reject
                        000171    6-29  	equ	bad_prog_op,121			uncorr fail-act: go or return
                        000172    6-30  	equ	no_lexpr,122			uncorr fail-act: args or setarg
                        000173    6-31  	equ	wrong_no_args,123			correctable wna -> new expr value
                        000174    6-32  	equ	bad_ibase,124			corr
                        000175    6-33  	equ	bad_base,125			corr
                        000176    6-34  	equ	bad_input_source,126		corr - retry i/o
                        000177    6-35  	equ	bad_output_dest,127			..
                        000200    6-36  	equ	nihil_ex_nihile,128			uncorr - attempt to setq nil
                        000203    6-37  	equ	not_pdl_ptr,131			corr arg reject - for pdl ptr args
                        000206    6-38  	equ	bad_f_fcn,134			compiled call to fsubr with evaled args
                        000207    6-39  	equ	overflow_err,135			arithmetic overflow.
                        000210    6-40  	equ	mismatch_super_parens,136		uncorr reader error
                        000211    6-41  	equ	no_left_super_paren,137		..
                        000212    6-42  	equ	flonum_too_big,138			..
                        000213    6-43  	equ	quoterror,139			..
                        000214    6-44  	equ	badreadtable,140			..
                        000215    6-45  	equ	badobarray,141			..
                        000216    6-46  	equ	atan_0_0_err,142			(atan 0 0) doesn't work
                        000217    6-47  	equ	unable_to_float,143			corr arg reject - (float x)
                        000220    6-48  	equ	division_by_zero,144		uncorr (should really be corr)
                        000221    6-49  	equ	eof_in_object,145			corr fail-act -> keep reading anyway
                        000222    6-50  	equ	cant_filepos,146			corr fail-act -> new expr value
                        000223    6-51  	equ	filepos_oob,147			..
                        000224    6-52  	equ	file_sys_fun_err,148		corr f.s. err -> new expr value
                        000225    6-53  	equ	stars_left_in_name,149		..
                        000226    6-54  	equ	io_wrong_direction,150		..
                        000227    6-55  	equ	file_is_closed,151			..
                        000230    6-56  	equ	reopen_inconsistent,152		..
                        000231    6-57  	equ	bad_entry_name,153			..
                        000232    6-58  	equ	bad_do_format,154			bad do format in interp.
                        000233    6-59  	equ	not_an_array,155			bad array-type arg
                        000234    6-60  	equ	not_alpha_array,156			bad all-alphabetic array
                        000235    6-61  	equ	include_file_error,157		%include barfed
                        000236    6-62  	equ	stack_loss_error,158		stack overflew
                        000237    6-63  	equ	underflow_fault,159
                        000240    6-64  	equ	zerodivide_fault,160
                        000241    6-65  	equ	bad_array_subscript,161
                        000242    6-66  	equ	store_not_allowed,162
                        000243    6-67  	equ	dead_array_reference,163
                        000244    6-68  	equ	cant_subscript_readtable,164
                        000245    6-69  	equ	not_same_type,165
                        000246    6-70  	equ	special_array_type,166
                        000247    6-71  	equ	array_too_big,167
                        000250    6-72  	equ	argument_must_be_array,168
                        000251    6-73  	equ	store_function_misused,169
                                  6-74  
                                  6-75  " END INCLUDE FILE lisp_error_codes.incl.alm
                                    57  
                        000000      58  	segdef	listen		" random subr for compatibility
    000000  4a  4 00012 3521 20     59  listen:	eppbp	tty_input_chan,*	" get number of chars in input buffer
    000001  aa  2 00001 2361 00     60  	ldq	bp|iochan.iolength
    000002  aa  2 00000 1761 00     61  	sbq	bp|iochan.ioindex
    000003  aa   000002 6050 04     62  	tpl	2,ic		" make sure positive (?)
    000004  aa   000000 2360 07     63  	ldq	0,dl
    000005  aa   040047 2350 07     64  	lda	fixnum_type,dl
    000006  aa  1 00062 7101 20     65  	tra	ab|return_op,*
                                    66  
                                    67  " fast versions of tyi, tyipeek, readch.  If trouble is encountered, the slow versions
                                    68  " in lisp_reader_ are called.  These are type 1 subrs.
                                    69  
    000007  0a   000025 6240 00     70  tyi:	eax4	real_tyi			establish failure exit
    000010  0a   000657 7000 00     71  	tsx0	set_inp
    000011  0a   000715 7000 00     72  	tsx0	rdinch
    000012  aa  2 00000 0541 00     73  	aos	bp|iochan.ioindex
    000013  aa   040047 2350 07     74  	lda	fixnum_type,dl
                                    75  " 					the character is in the q reg
    000014  aa  0 00000 3501 15     76  	eppap	ap|0,x5
    000015  aa  1 00062 7101 20     77  	tra	ab|return_op,*
                                    78  
                                    79  
    000016  0a   000027 6240 00     80  tyipeek:	eax4	real_tyipeek		establish failure exit
    000017  aa   000000 1050 03     81  	cmpx5	0,du			any args?
    000020  aa   000000 6010 14     82  	tnz	0,x4			yes, too hard to do this version of tyipeek here.
                                    83  					"no one ever uses it anyway so no loss in efficiency.
    000021  0a   000657 7000 00     84  	tsx0	set_inp
    000022  0a   000715 7000 00     85  	tsx0	rdinch
    000023  aa   040047 2350 07     86  	lda	fixnum_type,dl
    000024  aa  1 00062 7101 20     87  	tra	ab|return_op,*
                                    88  
                                    89  
                                    90  " come here if need to use pl1 version of function
                                    91  
    000025  0a   000037 7010 00     92  real_tyi:	tsx1 	copout
    000026  4a  4 00014 3521 20     93  	eppbp	<lisp_reader_>|[real_tyi]
                                    94  
    000027                          95  real_tyipeek:
    000027  0a   000037 7010 00     96  	tsx1	copout
    000030  4a  4 00016 3521 20     97  	eppbp	<lisp_reader_>|[real_tyipeek]
                                    98  
    000031                          99  real_readch:
    000031  0a   000037 7010 00    100  	tsx1	copout
    000032  4a  4 00020 3521 20    101  	eppbp	<lisp_reader_>|[real_readch]
    000033                         102  real_ascii:
    000033  0a   000044 7010 00    103  	tsx1	call_out0
    000034  4a  4 00022 3521 20    104  	eppbp	<lisp_reader_>|[ascii]
                                   105  
    000035  0a   000037 7010 00    106  real_tyo:	tsx1	copout
    000036  4a  4 00024 3521 20    107  	eppbp	<lisp_print_>|[tyo]
                                   108  
                                   109  
    000037  aa   000000 6360 15    110  copout:	eaq	0,x5			put -2*nargs as lisp number
    000040  aa   000022 7320 00    111  	qrs	18
    000041  aa   040047 2350 07    112  	lda	fixnum_type,dl
    000042  aa  0 00002 3501 00    113  	eppap	ap|2
    000043  aa  0 77776 7571 00    114  	staq	ap|-2
                                   115  " routine to call out to pl1 program.
                                   116  
                                   117  
                                   118  " called with x1 -> eppbp instrruction for entry to be called
                                   119  " returns by ab|return_op
                                   120  
    000044                         121  call_out0:
    000044  0a   000046 7000 00    122  	tsx0	call_out
    000045  aa  1 00062 7101 20    123  	tra	ab|return_op,*
                                   124  
                                   125  " this one returns to x0
                                   126  
                                   127  
    000046  4a  4 00026 2501 20    128  call_out:	spriap	<lisp_static_vars_>|[stack_ptr]
    000047  4a  4 00030 7471 20    129  	stx7	<lisp_static_vars_>|[unmkd_ptr]+1
    000050  aa  1 00016 5541 00    130  	stc1	ab|in_pl1_code
    000051  aa   000100 6270 00    131  	push				" this macro better not change x0, x1 !!
    000052  aa  7 00040 2721 20
    000053  aa   000000 7160 11    132  	xec	0,x1			load bp with addr of ext entry
    000054  aa  6 00000 2541 00    133  	call	bp|0			must make null arg list, save index regs
    000055  0a   001652 3500 00
    000056  aa  2 00000 3521 00
    000057  aa  6 00040 7531 00
    000060  aa  7 00036 6701 20
    000061  aa  6 00000 1731 00
    000062  aa  6 00040 0731 00
                                   134  
    000063  4a  4 00032 3511 20    135  	epbpab	<lisp_static_vars_>|[unmkd_ptr],*
    000064  aa  6 00020 6351 20    136  	eaa	sp|16,*
    000065  aa  7 00024 6521 00    137  	sprisp	sb|stack_header.stack_end_ptr
    000066  aa  7 00000 3721 01    138  	eppsp	sb|0,au
    000067  4a  4 00030 2271 20    139  	ldx7	<lisp_static_vars_>|[unmkd_ptr]+1
    000070  4a  4 00034 3501 20    140  	eppap	<lisp_static_vars_>|[stack_ptr],*
    000071  aa  1 00016 4501 00    141  	stz	ab|in_pl1_code
    000072  aa  0 77776 2371 00    142  	ldaq	ap|-2
    000073  aa  0 77776 3501 00    143  	eppap	ap|-2
    000074  aa   000000 7100 10    144  	tra	0,x0
                                   145  
                                   146  
                                   147  
                                   148  
                                   149  " ascii function
                                   150  
    000075                         151  ascii_alm:
    000075  0a   000033 6240 00    152  	eax4	real_ascii			establish failure exit
    000076  aa  0 77776 2371 00    153  	ldaq	ap|-2
    000077  aa   040047 1150 07    154  	cmpa	fixnum_type,dl			check for valid arg
    000100  aa   000000 6010 14    155  	tnz	0,x4
    000101  aa   000200 1160 07    156  	cmpq	128,dl
    000102  aa   000000 6030 14    157  	trc	0,x4
    000103  0a   000116 7000 00    158  	tsx0	get_sing_char
    000104  aa  0 77776 3501 00    159  	eppap	ap|-2
    000105  aa  1 00062 7101 20    160  	tra	ab|return_op,*
                                   161  
                                   162  
    000106  0a   000031 6240 00    163  readch:	eax4	real_readch			establish failure exit
    000107  0a   000657 7000 00    164  	tsx0	set_inp
    000110  0a   000715 7000 00    165  	tsx0	rdinch
    000111  aa  2 00000 3715 00    166  	epplb	bp|0				save ptr to iochan through get_sing_char
                                   167  
    000112  0a   000116 7000 00    168  	tsx0	get_sing_char
    000113  aa  0 00000 3501 15    169  	eppap	ap|0,x5				now return the character atom from the obarray
    000114  aa  5 00000 0541 00    170  	aos	lb|iochan.ioindex				bumping iochan.ioindex
    000115  aa  1 00062 7101 20    171  	tra	ab|return_op,*
                                   172  
                                   173  " routine to get character atom from obarray, character in q
                                   174  " uses bp,aq,x6
                                   175  
    000116                         176  get_sing_char:
    000116  aa   000001 7360 00    177  	qls	1
    000117  aa   000000 6230 06    178  	eax3	0,ql				for later use in indexing the obarray
    000120  4a  4 00036 2371 20    179  	ldaq	obarray,*				is obarray really an array?
    000121  aa   000200 3150 07    180  	cana	Array,dl
    000122  aa   000000 6000 14    181  	tze	0,x4				no, fail
    000123  4a  4 00036 3521 20    182  	eppbp	obarray,*				-> atom
    000124  aa  2 00000 3521 20    183  	eppbp	bp|0,*				-> array_info
    000125  aa  2 00007 2261 00    184  	ldx6	bp|array_info.type
    000126  aa   000005 1060 03    185  	cmpx6	Obarray_array,du
    000127  aa   000000 6010 14    186  	tnz	0,x4				no, fail
                                   187  
    000130  aa  2 00002 3521 20    188  	eppbp	bp|array_data_ptr,*
    000131  aa  2 01776 2371 13    189  	ldaq	bp|511*2,x3			valid obarray, examine char obj cell
    000132  aa  1 00012 1171 00    190  	cmpaq	ab|nil				has char obj been interned yet?
    000133  aa   000000 6000 14    191  	tze	0,x4				no, fail
    000134  aa   000000 7100 10    192  	tra	0,x0				yes, succeed
                                   193  
                                   194  
                                   195  
                                   196  " tyo function
                                   197  "   this is a simplified version of the character output code in lisp_print_
                                   198  
    000135  0a   000035 6240 00    199  tyo_alm:	eax4	real_tyo				establish failure exit
    000136  aa  0 00000 2371 15    200  	ldaq	ap|0,x5				make sure argument is OK
    000137  aa   040047 1150 07    201  	cmpa	fixnum_type,dl			has to be a number,
    000140  aa   000000 6010 14    202  	tnz	0,x4
    000141  aa   000200 1160 07    203  	cmpq	128,dl				between 0 and 128.
    000142  aa   000000 6030 14    204  	trc	0,x4				(tricky)
                                   205  
                                   206  " now find out what destinations we're going to send the output to
                                   207  
    000143  aa   777777 6220 00    208  	eax2	-1				clear sent-to-tty flag
    000144  aa  0 00006 3501 15    209  	eppap	ap|6,x5				leave three cells for munging around in
                                   210  
                                   211  " the character to be output is in ap|-5
                                   212  
                                   213  " this is dump_character from lisp_print_.pl1
                                   214  " but it has get_dest in it too, done in line instead of by setting flags
                                   215  
    000145                         216  output_char:
    000145  aa   777776 1050 03    217  	cmpx5	-2,du				should maybe go to tty?
    000146  0a   000160 6010 00    218  	tnz	tyo.3
    000147  4a  4 00040 2371 20    219  	ldaq	ctrlW,*				yes, if ^w allows it
    000150  aa  1 00012 1171 00    220  	cmpaq	ab|nil
    000151  aa   000002 6010 04    221  	tnz	2,ic
    000152  0a   000223 7030 00    222  	tsx3	to_tty				yes.
                                   223  
                                   224  " now send output to dest spec by ^r, outfiles
                                   225  
    000153  4a  4 00042 2371 20    226  	ldaq	ctrlR,*
    000154  aa  1 00012 1171 00    227  	cmpaq	ab|nil
    000155  0a   000174 6000 00    228  	tze	tyo.5				no.
    000156  4a  4 00044 2371 20    229  	ldaq	outfiles,*
    000157  0a   000171 7100 00    230  	tra	to_list_join
                                   231  
                                   232  "this is code to put to special channel (tyo with 2 args)
                                   233  
    000160                         234  tyo.3:
    000160  aa  0 77774 2371 00    235  	ldaq	ap|-4				special channel, look at it
    000161  aa   077700 3150 07    236  	cana	lisp_ptr.type,dl			list?
    000162  0a   000165 6000 00    237  	tze	to_list				yes, go do a do loop
    000163                         238  to_one:						"no, just output to one
    000163  0a   000177 7030 00    239  	tsx3	to_file
    000164  0a   000174 7100 00    240  	tra	tyo.5
                                   241  
                                   242  "this is do loop to output to a list of files in ap|-4
                                   243  
    000165                         244  to_list:
    000165  aa  0 77774 2371 20    245  	ldaq	ap|-4,*
    000166  0a   000177 7030 00    246  	tsx3	to_file
    000167  aa  0 77774 3521 20    247  	eppbp	ap|-4,*
    000170  aa  2 00002 2371 00    248  	ldaq	bp|2
    000171                         249  to_list_join:
    000171  aa  0 77774 7571 00    250  	staq	ap|-4
    000172  aa   077700 3150 07    251  	cana	lisp_ptr.type,dl				more to list?
    000173  0a   000165 6000 00    252  	tze	to_list
                                   253  
    000174                         254  tyo.5:						"all done, return t.
    000174  aa  1 00014 2371 00    255  	ldaq	ab|true
    000175  aa  0 77772 3501 00    256  	eppap	ap|-6
    000176  aa  1 00062 7101 20    257  	tra	ab|return_op,*
                                   258  
                                   259  
    000177                         260  to_file:
    000177  aa  1 00012 1171 00    261  	cmpaq	ab|nil
    000200  0a   000223 6000 00    262  	tze	to_tty
    000201  aa  1 00014 1171 00    263  	cmpaq	ab|true
    000202  0a   000223 6000 00    264  	tze	to_tty
    000203  aa   000100 3150 07    265  	cana	File,dl
    000204  0a   000216 6010 00    266  	tnz	to_file_ok
    000205  aa  0 77776 7571 00    267  	staq	ap|-2
    000206  aa   000002 6270 17    268  	eax7	2,x7
    000207  aa   000177 2350 07    269  	lda	bad_output_dest,dl
    000210  aa  1 77776 7551 17    270  	sta	ab|-2,x7
    000211  0a   000215 6210 00    271  	eax1	lisp_error_
    000212  0a   000046 7000 00    272  	tsx0	call_out
    000213  aa  0 77776 2371 00    273  	ldaq	ap|-2
    000214  0a   000177 7100 00    274  	tra	to_file
    000215                         275  lisp_error_:
    000215  4a  4 00046 3521 20    276  	eppbp	<lisp_error_>|[lisp_error_]
                                   277  
    000216                         278  to_file_ok:
    000216  aa   000000 3130 01    279  	easpbp	0,au
    000217  aa   000000 3120 02    280  	eawpbp	0,qu
    000220  aa  0 77773 2361 00    281  	ldq	ap|-5
    000221  0a   000367 7060 00    282  	tsx6	to_anyplace
    000222  0a   000235 7100 00    283  	tra	tyo_nl_maybe
                                   284  
                                   285  
    000223                         286  to_tty:
    000223  aa   000001 6220 12    287  	eax2	1,x2				check to-tty-flag
    000224  aa   000000 6010 13    288  	tnz	0,x3				only send to tty once
    000225  aa  0 77773 2361 00    289  	ldq	ap|-5
    000226  4a  4 00010 3521 20    290  	eppbp	tty_output_chan,*
    000227  4a  4 00050 2341 20    291  	szn	read_print_nl_sync
    000230  aa   000003 6000 04    292  	tze	3,ic
    000231  aa   000012 1160 07    293  	cmpq	NL,dl
    000232  aa   000002 6000 04    294  	tze	2,ic
    000233  0a   000367 7060 00    295  	tsx6	to_anyplace
                                   296  
    000234  4a  4 00050 4501 20    297  	stz	read_print_nl_sync
    000235                         298  tyo_nl_maybe:
    000235  4a  4 00052 3715 20    299  	epplb	readtable,*		-> value cell of atom readtable
    000236  aa  5 00000 3715 20    300  	epplb	lb|0,*			-> readtable array
    000237  aa  5 00450 2341 00    301  	szn	lb|status_terpri		put status_terpri in indicators
    000240  0a   000254 6040 00    302  	tmi	flush2			(status terpri) /= nil, no extra NL.
    000241  aa  2 00015 2351 00    303  	lda	bp|iochan.flags
    000242  aa   000200 3150 03    304  	cana	iochan.image_mode,du
    000243  0a   000254 6010 00    305  	tnz	flush2
    000244  aa  2 00014 2351 00    306  	lda	bp|iochan.linel
    000245  0a   000254 6000 00    307  	tze	flush2
    000246  aa  2 00013 1151 00    308  	cmpa	bp|iochan.charpos
    000247  0a   000254 6054 00    309  	tpnz	flush2			linel > charpos, don't need an extra NL
    000250  aa   000012 2360 07    310  	ldq	NL,dl			type extra NL.
    000251  0a   000367 7060 00    311  	tsx6	to_anyplace
    000252  aa   001000 2350 03    312  	lda	iochan.extra_nl_done,du
    000253  aa  2 00015 2551 00    313  	orsa	bp|iochan.flags
                                   314  
    000254                         315  flush2:
    000254  aa  2 00015 2351 00    316  	lda	bp|iochan.flags
    000255  aa   400000 3150 03    317  	cana	iochan.seg,du
    000256  aa   000000 6010 13    318  	tnz	0,x3
    000257  aa   002000 3150 03    319  	cana	iochan.charmode,du
    000260  aa   000005 6010 04    320  	tnz	5,ic
    000261  aa   020000 3150 03    321  	cana	iochan.interactive,du
    000262  aa   000000 6000 13    322  	tze	0,x3
    000263  aa   004000 3150 03    323  	cana	iochan.nlsync,du
    000264  aa   000000 6000 13    324  	tze	0,x3
                                   325  
    000265  aa   100000 3150 03    326  	cana	iochan.write,du
    000266  aa   000000 6010 13    327  	tnz	0,x3
    000267  aa  2 00000 2341 00    328  	szn	bp|iochan.ioindex
    000270  aa   000000 6044 13    329  	tmoz	0,x3
                                   330  
    000271  aa   000000 6200 13    331  	eax0	0,x3
                                   332  
                                   333  " empty a buffer, pointed at by bp.  return to x0
                                   334  
    000272                         335  empty_buff:
    000272  aa   000000 6240 06    336  	eax4	0,ql				save the character in the q reg
    000273  0a   000332 7010 00    337  	tsx1	ipush
    000274  aa  6 00032 3521 20    338  	eppbp	sp|save_bp,*
    000275  aa  6 00032 3501 00    339  	eppap	sp|save_bp
    000276  aa  6 00052 2501 00    340  	spriap	argl+2
    000277  0a   000327 3500 00    341  	eppap	q1qb
    000300  aa  6 00054 2501 00    342  	spriap	argl+4
    000301  aa  6 00060 3501 00    343  	eppap	temp
    000302  aa  6 00056 2501 00    344  	spriap	argl+6
    000303  aa  2 00015 2351 00    345  	lda	bp|iochan.flags
    000304  aa   110400 3150 03    346  	cana	not_ok_to_write,du
    000305  0a   000312 6000 00    347  	tze	flush3
    000306  4a  4 00054 3521 20    348  	eppbp	<lisp_io_control_>|[fix_not_ok_iochan]
    000307  0a   000352 7010 00    349  	tsx1	icall
    000310  aa  6 00060 2341 00    350  	szn	temp
    000311  0a   000322 6010 00    351  	tnz	popret
    000312                         352  flush3:
    000312  4a  4 00034 3501 20    353  	eppap	<lisp_static_vars_>|[stack_ptr],*
    000313  aa  0 00000 3511 00    354  	epbpab	ap|0
    000314  aa  1 00012 2371 00    355  	ldaq	ab|nil
    000315  aa  0 77776 7571 00    356  	staq	ap|-2
    000316  aa  0 77776 3501 00    357  	eppap	ap|-2
    000317  aa  6 00054 2501 00    358  	spriap	argl+4
    000320  4a  4 00056 3521 20    359  	eppbp	<lisp_io_control_>|[end_of_block]
    000321  0a   000352 7010 00    360  	tsx1	icall
    000322  aa   000000 6360 14    361  popret:	eaq	0,x4				reload the char into q from x4
    000323  aa   000022 7720 00    362  	qrl	18
    000324  aa  6 00060 7241 00    363  	lxl4	temp
    000325  0a   000341 7010 00    364  	tsx1	ipop
    000326  aa   000000 7100 10    365  	tra	0,x0
                                   366  
    000327  aa   400000 000000     367  q1qb:	oct	400000000000				"1"b
                                   368  	even
    000330                         369  three_args:
    000330  aa   000006 000004     370  	zero	6,4
    000331  aa   000000 000000     371  	zero	0,0
    000332  4a  4 00026 2501 20    372  ipush:	spriap	<lisp_static_vars_>|[stack_ptr]
    000333  4a  4 00030 7471 20    373  	stx7	<lisp_static_vars_>|[unmkd_ptr]+1
    000334  aa  1 00016 5541 00    374  	stc1	ab|in_pl1_code
    000335  aa  2 00000 3501 00    375  	eppap	bp|0				make bp get saved in sp|26 (= sp|save_bp)
    000336  aa   000100 6270 00    376  	push
    000337  aa  7 00040 2721 20
    000340  aa   000000 7100 11    377  	tra	0,x1
                                   378  
    000341  aa  6 00032 3521 20    379  ipop:	eppbp	sp|save_bp,*			restore bp
    000342  4a  4 00032 3511 20    380  	epbpab	<lisp_static_vars_>|[unmkd_ptr],*
    000343  aa  6 00020 6351 20    381  	eaa	sp|16,*
    000344  aa  7 00024 6521 00    382  	sprisp	sb|stack_header.stack_end_ptr
    000345  aa  7 00000 3721 01    383  	eppsp	sb|0,au
    000346  4a  4 00030 2271 20    384  	ldx7	<lisp_static_vars_>|[unmkd_ptr]+1
    000347  4a  4 00034 3501 20    385  	eppap	<lisp_static_vars_>|[stack_ptr],*
    000350  aa  1 00016 4501 00    386  	stz	ab|in_pl1_code
    000351  aa   000000 7100 11    387  	tra	0,x1
                                   388  
    000352  0a   000330 2370 00    389  icall:	ldaq	three_args
    000353  aa  6 00050 7571 00    390  	staq	argl
    000354  aa  6 00000 2541 00    391  	call	bp|0(argl)
    000355  aa  6 00050 3501 00
    000356  aa  2 00000 3521 00
    000357  aa  6 00040 7531 00
    000360  aa  7 00036 6701 20
    000361  aa  6 00000 1731 00
    000362  aa  6 00040 0731 00
    000363  aa   000000 7100 11    392  	tra	0,x1
                                   393  
                                   394  
                                   395  
    000364                         396  to_any_ch_code:
    000364  aa   000000 1040 03    397  	cmpx4	0,du
    000365  aa   000000 6010 16    398  	tnz	0,x6
    000366  0a   000401 7100 00    399  	tra	to_anyplace_aa
                                   400  
    000367                         401  to_anyplace:
    000367  aa  2 00015 2351 00    402  	lda	bp|iochan.flags
    000370  aa   110400 3150 03    403  	cana	not_ok_to_write,du
    000371  aa   000003 6000 04    404  	tze	3,ic
    000372  0a   000272 7000 00    405  	 tsx0	 empty_buff
    000373  0a   000364 7100 00    406  	 tra	 to_any_ch_code
    000374  aa  2 00000 2351 00    407  	lda	bp|iochan.ioindex
    000375  aa  2 00001 1151 00    408  	cmpa	bp|iochan.iolength
    000376  aa   777774 6000 04    409  	tze	-4,ic
    000377  aa   736777 2350 03    410  	lda	flag_reset_mask,du
    000400  aa  2 00015 3551 00    411  	ansa	bp|iochan.flags
                                   412  
    000401                         413  to_anyplace_aa:
    000401  aa  2 00000 2351 00    414  	lda	bp|iochan.ioindex
    000402  aa   000000 6240 05    415  	eax4	0,al
    000403  aa   000003 3640 03    416  	anx4	3,du
    000404  aa   000002 7310 00    417  	ars	2
    000405  aa  2 00002 3715 65    418  	epplb	bp|iochan.ioptr,*al
    000406  aa   000000 6350 06    419  	eaa	0,ql				save char for compares
    000407  0a   000540 7160 14    420  	xec	qls,x4				align char in q
    000410  0a   000544 7160 14    421  	xec	stbq,x4
    000411  aa  2 00000 0541 00    422  	aos	bp|iochan.ioindex
                                   423  " check for control character, if so do specially good things.
                                   424  
    000412  aa   000040 1150 03    425  	cmpa	=o40,du
    000413  0a   000420 6040 21    426  	tmi	tyo_control_table,au*	control character, do specially good things.
    000414  aa   000177 1150 03    427  	cmpa	=o177,du
    000415  aa   000000 6050 16    428  	tpl	0,x6			rubout - don't advance charpos
    000416  aa  2 00013 0541 00    429  	aos	bp|iochan.charpos		normal character, advance charpos (caller checks for endofline)
    000417  aa   000000 7100 16    430  	tra	0,x6
                                   431  
                                   432  
    000420                         433  tyo_control_table:
    000420  aa   000000 0000 16    434  	arg	0,x6			null - do nothing
    000421  aa   000000 0000 16    435  	arg	0,x6			^A - do nothing
    000422  aa   000000 0000 16    436  	arg	0,x6			^B - do nothing
    000423  aa   000000 0000 16    437  	arg	0,x6			^C - do nothing
    000424  aa   000000 0000 16    438  	arg	0,x6			^D - do nothing
    000425  aa   000000 0000 16    439  	arg	0,x6			^E - do nothing
    000426  aa   000000 0000 16    440  	arg	0,x6			^F - do nothing
    000427  aa   000000 0000 16    441  	arg	0,x6			^G - do nothing
    000430  0a   000523 0000 00    442  	arg	tyo_backspace		BS - subtract one from charpos
    000431  0a   000530 0000 00    443  	arg	tyo_tab			HT - adjust charpos to next tabstop
    000432  0a   000460 0000 00    444  	arg	tyo_newline		NL - adjust charpos, linenum
    000433  aa   000000 0000 16    445  	arg	0,x6			^K - do nothing
    000434  0a   000470 0000 00    446  	arg	tyo_newpage		NP - adjust charpos, linenum, pagenum
    000435  0a   000536 0000 00    447  	arg	tyo_car_ret		CR - adjust charpos
    000436  aa   000000 0000 16    448  	arg	0,x6			^N - do nothing
    000437  aa   000000 0000 16    449  	arg	0,x6			^O - do nothing
    000440  aa   000000 0000 16    450  	arg	0,x6			^P - do nothing
    000441  aa   000000 0000 16    451  	arg	0,x6			^Q - do nothing
    000442  aa   000000 0000 16    452  	arg	0,x6			^R - do nothing
    000443  aa   000000 0000 16    453  	arg	0,x6			^S - do nothing
    000444  aa   000000 0000 16    454  	arg	0,x6			^T - do nothing
    000445  aa   000000 0000 16    455  	arg	0,x6			^U - do nothing
    000446  aa   000000 0000 16    456  	arg	0,x6			^V - do nothing
    000447  aa   000000 0000 16    457  	arg	0,x6			^W - do nothing
    000450  aa   000000 0000 16    458  	arg	0,x6			^X - do nothing
    000451  aa   000000 0000 16    459  	arg	0,x6			^Y - do nothing
    000452  aa   000000 0000 16    460  	arg	0,x6			^Z - do nothing
    000453  aa   000000 0000 16    461  	arg	0,x6			$O  - do nothing
    000454  aa   000000 0000 16    462  	arg 	0,x6			\034 - do nothing
    000455  aa   000000 0000 16    463  	arg	0,x6			\035 - do nothing
    000456  aa   000000 0000 16    464  	arg	0,x6			\036 - do nothing
    000457  aa   000000 0000 16    465  	arg	0,x6			\037 - do nothing
                                   466  
                                   467  
    000460                         468  tyo_newline:
    000460  aa  2 00013 4501 00    469  	stz	bp|iochan.charpos
    000461  aa   004000 2350 03    470  	lda	iochan.nlsync,du
    000462  aa  2 00015 2551 00    471  	orsa	bp|iochan.flags
    000463  aa  2 00033 0541 00    472  	aos	bp|iochan.linenum
    000464  aa  2 00032 2351 00    473  	lda	bp|iochan.pagel
    000465  aa   000000 6000 16    474  	tze	0,x6			0 pagel = infinite
    000466  aa  2 00033 1151 00    475  	cmpa	bp|iochan.linenum		page exceeded?
    000467  aa   000000 6054 16    476  	tpnz	0,x6			no, return
    000470                         477  tyo_newpage:
    000470  aa  2 00013 4501 00    478  	stz	bp|iochan.charpos			NP causes return to left margin
    000471  aa  2 00033 4501 00    479  	stz	bp|iochan.linenum
    000472  aa  2 00034 0541 00    480  	aos	bp|iochan.pagenum		advance to next page
                                   481  
                                   482  " page overflow - invoke endpagefn
                                   483  
    000473  aa  2 00015 2351 00    484  	lda	bp|iochan.flags
    000474  aa   020000 3150 03    485  	cana	iochan.interactive,du		if this is the tty, can't endpage
    000475  aa   000000 6010 16    486  	tnz	0,x6
    000476  aa  2 00016 2371 00    487  	ldaq	bp|iochan.function
    000477  aa  1 00012 1171 00    488  	cmpaq	ab|nil
    000500  aa   000000 6000 16    489  	tze	0,x6			no endpagefn - leave
    000501  aa   777774 6250 00    490  	eax5	-4
    000502  aa  0 00004 3501 00    491  	eppap	ap|4
    000503  aa  0 77774 7571 00    492  	staq	ap|-4			function to apply
    000504  aa   000006 6270 17    493  	eax7	6,x7			prepare type-1 call
    000505  aa  1 77776 2521 17    494  	spribp	ab|-2,x7			put type bits in bp
    000506  aa  1 77776 2371 17    495  	ldaq	ab|-2,x7
    000507  aa   000100 2750 07    496  	ora	File,dl
    000510  aa  0 77776 7571 00    497  	staq	ap|-2			argument to endpagefn is the file object
                                   498  "					assume can't happen to tty
    000511  aa  1 77774 6501 17    499  	sprilp	ab|-4,x7
    000512  aa  1 77772 7461 17    500  	stx6	ab|-6,x7			save registers 3 and 6
    000513  aa  1 77773 7431 17    501  	stx3	ab|-5,x7
    000514  aa  1 00044 3701 20    502  	epplp	ab|system_lp,*
    000515  aa  1 77776 3571 17    503  	stcd	ab|-2,x7
    000516  4a  4 00060 7101 20    504  	tra	<lisp_>|[funcall]
                                   505  
    000517  aa  1 77776 2261 17    506  	ldx6	ab|-2,x7			restore registers 3 and 6
    000520  aa  1 77777 2231 17    507  	ldx3	ab|-1,x7
    000521  aa   777776 6270 17    508  	eax7	-2,x7			pop extraneous cruft off unmarked stack
    000522  aa   000000 7100 16    509  	tra	0,x6
                                   510  
                                   511  
    000523                         512  tyo_backspace:
    000523  aa   000001 3350 07    513  	lca	1,dl
    000524  aa  2 00013 2341 00    514  	szn	bp|iochan.charpos
    000525  aa   000002 6000 04    515  	tze	2,ic
    000526  aa  2 00013 0551 00    516  	 asa	 bp|iochan.charpos
    000527  aa   000000 7100 16    517  	tra	0,x6
                                   518  
    000530                         519  tyo_tab:
    000530  aa  2 00013 2361 00    520  	ldq	bp|iochan.charpos
    000531  aa   000012 0760 07    521  	adq	10,dl
    000532  aa   000012 5060 07    522  	div	10,dl
    000533  aa   000012 4020 07    523  	mpy	10,dl
    000534  aa  2 00013 7561 00    524  	stq	bp|iochan.charpos
    000535  aa   000000 7100 16    525  	tra	0,x6
                                   526  
    000536                         527  tyo_car_ret:
    000536  aa  2 00013 4501 00    528  	stz	bp|iochan.charpos
    000537  aa   000000 7100 16    529  	tra	0,x6
                                   530  
                                   531  
                                   532  " xec vectors for storing char from q into word pointed at by sn,wo=lb, co=x4
                                   533  
    000540  aa   000033 7360 00    534  qls:	qls	27
    000541  aa   000022 7360 00    535  	qls	18
    000542  aa   000011 7360 00    536  	qls	9
    000543  aa   000000 0110 03    537  	nop	0,du
                                   538  
    000544  aa  5 00000 5521 40    539  stbq:	stbq	lb|0,40
    000545  aa  5 00000 5521 20    540  	stbq	lb|0,20
    000546  aa  5 00000 5521 10    541  	stbq	lb|0,10
    000547  aa  5 00000 5521 04    542  	stbq	lb|0,04
                                   543  
                                   544  "fast type-0 lsubrs to examine and modify certain file-object attributes.
                                   545  
                        000602     546  	segdef	chrct,linel,charpos,pagel,linenum,pagenum
                                   547  
    000550  0a   000606 7010 00    548  chrct:	tsx1	process_file_arg		call common routine
    000551  4a  4 00062 3521 20    549  	eppbp	<lisp_io_fns_>|[chrct]	instruction to get to pl1 code if can't do it here
    000552  0a   000554 7170 00    550  	xed	pick_up_chrct		instruction to load the value into q, lb -> iochan
    000553  0a   000556 7170 00    551  	xed	put_down_chrct		instruction to store q into the value, lb -> iochan
                                   552  
                                   553  	even
    000554                         554  pick_up_chrct:
    000554  aa  5 00014 2361 00    555  	ldq	lb|iochan.linel		convert charpos to chrct
    000555  aa  5 00013 1761 00    556  	sbq	lb|iochan.charpos
                                   557  
    000556                         558  put_down_chrct:
    000556  aa  5 00014 2361 00    559  	ldq	lb|iochan.linel		convert chrct to charpos
    000557  0a   000560 7170 00    560  	xed	*+1
    000560  aa  0 77777 1761 00    561  	sbq	ap|-1			(chrct is known to be here as well as in q)
    000561  aa  5 00013 7561 00    562  	stq	lb|iochan.charpos
                                   563  
    000562  0a   000606 7010 00    564  linel:	tsx1	process_file_arg
    000563  4a  4 00064 3521 20    565  	eppbp	<lisp_io_fns_>|[linel]
    000564  aa  5 00014 2361 00    566  	ldq	lb|iochan.linel
    000565  aa  5 00014 7561 00    567  	stq	lb|iochan.linel
                                   568  
    000566  0a   000606 7010 00    569  charpos:	tsx1	process_file_arg
    000567  4a  4 00066 3521 20    570  	eppbp	<lisp_io_fns_>|[charpos]
    000570  aa  5 00013 2361 00    571  	ldq	lb|iochan.charpos
    000571  aa  5 00013 7561 00    572  	stq	lb|iochan.charpos
                                   573  
    000572  0a   000606 7010 00    574  pagel:	tsx1	process_file_arg
    000573  4a  4 00070 3521 20    575  	eppbp	<lisp_io_fns_>|[pagel]
    000574  aa  5 00032 2361 00    576  	ldq	lb|iochan.pagel
    000575  aa  5 00032 7561 00    577  	stq	lb|iochan.pagel
                                   578  
    000576  0a   000606 7010 00    579  linenum:	tsx1	process_file_arg
    000577  4a  4 00072 3521 20    580  	eppbp	<lisp_io_fns_>|[linenum]
    000600  aa  5 00033 2361 00    581  	ldq	lb|iochan.linenum
    000601  aa  5 00033 7561 00    582  	stq	lb|iochan.linenum
                                   583  
    000602  0a   000606 7010 00    584  pagenum:	tsx1	process_file_arg
    000603  4a  4 00074 3521 20    585  	eppbp	<lisp_io_fns_>|[pagenum]
    000604  aa  5 00034 2361 00    586  	ldq	lb|iochan.pagenum
    000605  aa  5 00034 7561 00    587  	stq	lb|iochan.pagenum
                                   588  
                                   589  
    000606                         590  process_file_arg:
    000606  aa   777776 1050 03    591  	cmpx5	-2,du		get entry?
    000607  0a   000636 6010 00    592  	tnz	process_file_arg_2	no.
    000610  aa  0 77776 2371 00    593  	ldaq	ap|-2		yes, get file object
    000611  aa  1 00012 1171 00    594  	cmpaq	ab|nil		tty?
    000612  0a   000624 6000 00    595  	tze	process_file_arg_nil
    000613  aa  1 00014 1171 00    596  	cmpaq	ab|true
    000614  0a   000624 6000 00    597  	tze	process_file_arg_nil
    000615  aa   000100 3150 07    598  	cana	File,dl
    000616  0a   000631 6000 00    599  	tze	process_file_arg_err
    000617  aa  0 77776 3715 20    600  	epplb	ap|-2,*		no, pick up ptr to file object
    000620                         601  process_file_arg_nil_a:
    000620  aa   000001 7160 11    602  	xec	1,x1		pick up value to be gotten
    000621  aa   040047 2350 07    603  	lda	fixnum_type,dl
                                   604  "	tra	popaj		and return
    000622  aa  0 00000 3501 15    605  popaj:	eppap	ap|0,x5		pop off arguments.
    000623  aa  2 00000 7101 00    606  	tra	bp|0		and return to caller
                                   607  
    000624                         608  process_file_arg_nil:
    000624  0a   000626 7020 00    609  	tsx2	get_file_object_of_nil
    000625  0a   000620 7100 00    610  	tra	process_file_arg_nil_a
                                   611  
    000626                         612  get_file_object_of_nil:
                        000010     613  	link	tty_output_chan_l,<lisp_static_vars_>|[tty_output_chan],*
    000626  aa  1 00044 3715 20    614  	epplb	ab|system_lp,*
    000627  4a  5 00010 3715 20    615  	epplb	lb|tty_output_chan_l,*	lb := lisp_static_vars_$tty_output_chan
    000630  aa   000000 7100 12    616  	tra	0,x2
                                   617  
    000631                         618  process_file_arg_err:
                                   619  "
                                   620  " can't do it here, escape out to the pl1 code
                                   621  " first must pretend we were a type-1 subr
                                   622  
    000631  aa   000004 6270 17    623  	eax7	4,x7
    000632  aa  1 77776 2521 17    624  	spribp	ab|-2,x7
    000633  aa  1 77774 6501 17    625  	sprilp	ab|-4,x7
                                   626  
                                   627  " now go away to pl1
                                   628  
    000634  aa  1 00044 3701 20    629  	epplp	ab|system_lp,*
    000635  0a   000037 7100 00    630  	tra	copout		0,x1 is eppbp instruction to pl1 version
                                   631  
                                   632  
    000636                         633  process_file_arg_2:
    000636  aa   777774 1050 03    634  	cmpx5	-4,du			called with 2 args
    000637  0a   000631 6010 00    635  	tnz	process_file_arg_err
                                   636  
    000640  aa  0 77774 2371 00    637  	ldaq	ap|-4			file-object argument
    000641  aa  1 00012 1171 00    638  	cmpaq	ab|nil
    000642  0a   000655 6000 00    639  	tze	process_file_arg_2_nil
    000643  aa  1 00014 1171 00    640  	cmpaq	ab|true
    000644  0a   000655 6000 00    641  	tze	process_file_arg_2_nil
    000645  aa   000100 3150 07    642  	cana	File,dl
    000646  0a   000631 6000 00    643  	tze	process_file_arg_err
    000647  aa  0 77774 3715 20    644  	epplb	ap|-4,*
    000650                         645  process_file_arg_3:
    000650  aa  0 77776 2371 00    646  	ldaq	ap|-2			pick up number to be stored
    000651  aa   040047 1150 07    647  	cmpa	fixnum_type,dl
    000652  0a   000631 6010 00    648  	tnz	process_file_arg_err
    000653  aa   000002 7160 11    649  	xec	2,x1			do the store
    000654  0a   000622 7100 00    650  	tra	popaj			and return (result = 2nd arg is in aq)
                                   651  
    000655                         652  process_file_arg_2_nil:
    000655  0a   000626 7020 00    653  	tsx2	get_file_object_of_nil
    000656  0a   000650 7100 00    654  	tra	process_file_arg_3
                                   655  
                                   656  " routines copied from lisp_reader_
                                   657  
                                   658  " set_inp sets bp to the appropriate iochan.  If input is from a read list
                                   659  "  or if end of file or end of buffer has been reached, returns to 0,x4
                                   660  "  If successful, returns to 0,x0.
                                   661  
    000657  4a  4 00076 2361 20    662  set_inp:	ldq	rdr_state			check for macro char in readlist causing special case
    000660  aa   000002 1160 07    663  	cmpq	2,dl
    000661  aa   000000 6000 14    664  	tze	0,x4			yes, can't handle it here - go to lisp_reader_
                                   665  " look for special channel specified by an argument
    000662  aa   000000 6230 15    666  	eax3	0,x5			set up to scan arg list
    000663  0a   000675 6000 00    667  	tze	cke
    000664  aa  0 00000 2371 13    668  cka:	ldaq	ap|0,x3
    000665  aa   000100 3150 07    669  	cana	File,dl
    000666  0a   000705 6010 00    670  	tnz	spchan
    000667  aa  1 00012 1171 00    671  	cmpaq	ab|nil
    000670  0a   000700 6000 00    672  	tze	set_inp_tty
    000671  aa  1 00014 1171 00    673  	cmpaq	ab|true
    000672  0a   000700 6000 00    674  	tze	set_inp_tty
    000673  aa   000002 6230 13    675  	eax3	2,x3
    000674  0a   000664 6010 00    676  	tnz	cka
    000675  4a  4 00100 2371 20    677  cke:	ldaq	ctrlQ,*
    000676  aa  1 00012 1171 00    678  	cmpaq	ab|nil
    000677  0a   000707 6010 00    679  	tnz	uread
    000700                         680  set_inp_tty:
    000700  4a  4 00012 3521 20    681  	eppbp	tty_input_chan,*
    000701                         682  set_inp_aa:
    000701  aa  2 00000 2361 00    683  	ldq	bp|iochan.ioindex
    000702  aa  2 00001 1161 00    684  	cmpq	bp|iochan.iolength
    000703  aa   000000 6050 14    685  	tpl	0,x4			EOF - can't handle it here
                                   686  
    000704  aa   000000 7100 10    687  	tra	0,x0			WIN.
                                   688  
    000705  aa  0 00000 3521 33    689  spchan:	eppbp	ap|0,x3*
    000706  0a   000701 7100 00    690  	tra	set_inp_aa
                                   691  
    000707  4a  4 00102 2371 20    692  uread:	ldaq	<lisp_static_vars_>|[infile],*
    000710  aa   000100 3150 07    693  	cana	File,dl
    000711  0a   000700 6000 00    694  	tze	set_inp_tty
    000712  aa   000000 3130 01    695  	easpbp	0,au
    000713  aa   000000 3120 02    696  	eawpbp	0,qu
    000714  0a   000701 7100 00    697  	tra	set_inp_aa
                                   698  
                                   699  
                                   700  " rdinch reads in one character, returns it right justified in the q
                                   701  "  bp must point at the iochan block.
                                   702  
                                   703  
                                   704  
    000715  aa  2 00000 2351 00    705  rdinch:	lda	bp|iochan.ioindex
    000716  aa   000000 2360 03    706  	ldq	0,du
    000717  aa   000002 7330 00    707  	lrs	2			divide by 4
    000720  aa   000042 7720 00    708  	qrl	36-2			right justify the remainder
    000721  aa  2 00002 2351 65    709  	lda	bp|iochan.ioptr,*al		get word containing character
    000722  0a   000754 7730 26    710  	lrl	shifts,ql*		right justify the character
    000723  aa   000177 3760 07    711  	anq	=o177,dl			mask off to (7 bit) character 
    000724  aa   000036 1160 07    712  	cmpq	=o036,dl			bsg ctrl prefix?
    000725  aa   000000 6000 14    713  	tze	0,x4			yes, only PL/I reader handles this.
    000726  0a   000027 1040 03    714  	cmpx4	real_tyipeek,du		don't do vertical motion cruft if
    000727  aa   000000 6000 10    715  	tze	0,x0			this is tyipeek.
                                   716  
                                   717  " at this point character is in q, bp -> iochan.  we handle vertical motion here.
                                   718  
    000730  0a   001220 2350 06    719  	lda	initial_readtable,ql	this is kludgy way to test for NL and NP
    000731  aa   003720 3150 03    720  	cana	2000,du			vertical_motion right-shifted 18.
    000732  aa   000000 6000 10    721  	tze	0,x0			ordinary character, return.
                                   722  
    000733  aa   000012 1160 07    723  	cmpq	NL,dl
    000734  0a   000746 6010 00    724  	tnz	vm01
                                   725  
                                   726  " newline, bump linenum
                                   727  
    000735  aa  2 00013 4501 00    728  	stz	bp|iochan.charpos
    000736  aa  2 00033 0541 00    729  	aos	bp|iochan.linenum
    000737  aa  2 00032 2351 00    730  	lda	bp|iochan.pagel
    000740  aa   000000 6000 10    731  	tze	0,x0			pagel of 0 = infinite
    000741  aa  2 00033 1151 00    732  	cmpa	bp|iochan.linenum		end of page?
    000742  aa   000000 6054 10    733  	tpnz	0,x0			no, return
    000743  aa  2 00033 4501 00    734  	stz	bp|iochan.linenum		page exceeded, bump pagenum
    000744  aa  2 00034 0541 00    735  	aos	bp|iochan.pagenum
    000745  aa   000000 7100 10    736  	tra	0,x0			NOTE - it is not necessary to call endpagefn for input files.
                                   737  
    000746  aa   000014 1160 07    738  vm01:	cmpq	12,dl			NP - this check is unnecc but do it anyway
    000747  aa   000000 6010 10    739  	tnz	0,x0
    000750  aa  2 00013 4501 00    740  	stz	bp|iochan.charpos		adnace to new page
    000751  aa  2 00033 4501 00    741  	stz	bp|iochan.linenum
    000752  aa  2 00034 0541 00    742  	aos	bp|iochan.pagenum
    000753  aa   000000 7100 10    743  	tra	0,x0
                                   744  
    000754  aa   000077 0000 00    745  shifts:	arg	27+36
    000755  aa   000066 0000 00    746  	arg	18+36
    000756  aa   000055 0000 00    747  	arg	9+36
    000757  aa   000044 0000 00    748  	arg	0+36
                                   749  
                                   750  
    000760                         751  left_shift:
    000760  aa  0 00004 2351 20    752  	lda	ap|4,*			get shift count
                                   753  					" - should check for bounds here.
    000761  aa  0 00002 2361 20    754  	ldq	ap|2,*			get number to be shifted
    000762  aa   000000 7360 05    755  	qls	0,al			shift it the right amount
    000763  aa  0 00002 7561 20    756  	stq	ap|2,*			put it back
    000764  aa  7 00044 7101 20    757  	short_return			and exit
                                   758  
                                   759  
                                   760  " table of double floating powers of ten, from 10**-38 up to 10**+38
                                   761  
    000765  aa   000000 0110 03    762  	even
    000766                         763  powers_of_ten:
    000766  aa   404663 437347     764  	oct	404663437347,325170710457
    000767  aa   325170 710457 
    000770  aa   414420 163520     765  	oct	414420163520,505213435275
    000771  aa   505213 435275 
    000772  aa   422524 220444     766  	oct	422524220444,626456344554
    000773  aa   626456 344554 
    000774  aa   430651 264555     767  	oct	430651264555,774172035707
    000775  aa   774172 035707 
    000776  aa   440411 660744     768  	oct	440411660744,575514222534
    000777  aa   575514 222534 
    001000  aa   446514 235135     769  	oct	446514235135,735037267263
    001001  aa   735037 267263 
    001002  aa   454637 304365     770  	oct	454637304365,324247145140
    001003  aa   324247 145140 
    001004  aa   464403 472631     771  	oct	464403472631,304550377174
    001005  aa   304550 377174 
    001006  aa   472504 411377     772  	oct	472504411377,565702477033
    001007  aa   565702 477033 
    001010  aa   500625 513677     773  	oct	500625513677,523263216642
    001011  aa   523263 216642 
    001012  aa   506773 036657     774  	oct	506773036657,450140062412
    001013  aa   450140 062412 
    001014  aa   516474 723215     775  	oct	516474723215,571074037446
    001015  aa   571074 037446 
    001016  aa   524614 110061     776  	oct	524614110061,127313047357
    001017  aa   127313 047357 
    001020  aa   532757 132075     777  	oct	532757132075,355175661253
    001021  aa   355175 661253 
    001022  aa   542465 370246     778  	oct	542465370246,324216516653
    001023  aa   324216 516653 
    001024  aa   550602 666320     779  	oct	550602666320,011262242426
    001025  aa   011262 242426 
    001026  aa   556743 444004     780  	oct	556743444004,013536713133
    001027  aa   013536 713133 
    001030  aa   566456 166402     781  	oct	566456166402,407233236771
    001031  aa   407233 236771 
    001032  aa   574571 624103     782  	oct	574571624103,111102106567
    001033  aa   111102 106567 
    001034  aa   602730 171123     783  	oct	602730171123,733322530325
    001035  aa   733322 530325 
    001036  aa   612447 113564     784  	oct	612447113564,351103527205
    001037  aa   351103 527205 
    001040  aa   620560 736521     785  	oct	620560736521,443324455046
    001041  aa   443324 455046 
    001042  aa   626715 126245     786  	oct	626715126245,754211570257
    001043  aa   754211 570257 
    001044  aa   636440 165747     787  	oct	636440165747,563526053155
    001045  aa   563526 053155 
    001046  aa   644550 223341     788  	oct	644550223341,520453466010
    001047  aa   520453 466010 
    001050  aa   652702 270232     789  	oct	652702270232,044566403412
    001051  aa   044566 403412 
    001052  aa   662431 363140     790  	oct	662431363140,226752042146
    001053  aa   226752 042146 
    001054  aa   670537 657770     791  	oct	670537657770,274544452600
    001055  aa   274544 452600 
    001056  aa   676667 633766     792  	oct	676667633766,353675565340
    001057  aa   353675 565340 
    001060  aa   706422 701372     793  	oct	706422701372,023326451314
    001061  aa   023326 451314 
    001062  aa   714527 461670     794  	oct	714527461670,430214163577
    001063  aa   430214 163577 
    001064  aa   722655 376246     795  	oct	722655376246,536257220537
    001065  aa   536257 220537 
    001066  aa   732414 336750     796  	oct	732414336750,132755432333
    001067  aa   132755 432333 
    001070  aa   740517 426542     797  	oct	740517426542,161550741022
    001071  aa   161550 741022 
    001072  aa   746643 334272     798  	oct	746643334272,616103131227
    001073  aa   616103 131227 
    001074  aa   756406 111564     799  	oct	756406111564,570651767636
    001075  aa   570651 767636 
    001076  aa   764507 534121     800  	oct	764507534121,727024365606
    001077  aa   727024 365606 
    001100  aa   772631 463146     801  	oct	772631463146,314631463147
    001101  aa   314631 463147 
    001102  aa   002400 000000     802  	oct	002400000000,000000000000
    001103  aa   000000 000000 
    001104  aa   010500 000000     803  	oct	010500000000,000000000000
    001105  aa   000000 000000 
    001106  aa   016620 000000     804  	oct	016620000000,000000000000
    001107  aa   000000 000000 
    001110  aa   024764 000000     805  	oct	024764000000,000000000000
    001111  aa   000000 000000 
    001112  aa   034470 400000     806  	oct	034470400000,000000000000
    001113  aa   000000 000000 
    001114  aa   042606 500000     807  	oct	042606500000,000000000000
    001115  aa   000000 000000 
    001116  aa   050750 220000     808  	oct	050750220000,000000000000
    001117  aa   000000 000000 
    001120  aa   060461 132000     809  	oct	060461132000,000000000000
    001121  aa   000000 000000 
    001122  aa   066575 360400     810  	oct	066575360400,000000000000
    001123  aa   000000 000000 
    001124  aa   074734 654500     811  	oct	074734654500,000000000000
    001125  aa   000000 000000 
    001126  aa   104452 013710     812  	oct	104452013710,000000000000
    001127  aa   000000 000000 
    001130  aa   112564 416672     813  	oct	112564416672,000000000000
    001131  aa   000000 000000 
    001132  aa   120721 522450     814  	oct	120721522450,400000000000
    001133  aa   400000 000000 
    001134  aa   130443 023471     815  	oct	130443023471,240000000000
    001135  aa   240000 000000 
    001136  aa   136553 630407     816  	oct	136553630407,510000000000
    001137  aa   510000 000000 
    001140  aa   144706 576511     817  	oct	144706576511,432000000000
    001141  aa   432000 000000 
    001142  aa   154434 157115     818  	oct	154434157115,760200000000
    001143  aa   760200 000000 
    001144  aa   162543 212741     819  	oct	162543212741,354240000000
    001145  aa   354240 000000 
    001146  aa   170674 055531     820  	oct	170674055531,647310000000
    001147  aa   647310 000000 
    001150  aa   200425 434430     821  	oct	200425434430,110475000000
    001151  aa   110475 000000 
    001152  aa   206532 743536     822  	oct	206532743536,132614200000
    001153  aa   132614 200000 
    001154  aa   214661 534465     823  	oct	214661534465,561357240000
    001155  aa   561357 240000 
    001156  aa   224417 031701     824  	oct	224417031701,446725444000
    001157  aa   446725 444000 
    001160  aa   232522 640261     825  	oct	232522640261,760512755000
    001161  aa   760512 755000 
    001162  aa   240647 410336     826  	oct	240647410336,354635550200
    001163  aa   354635 550200 
    001164  aa   250410 545213     827  	oct	250410545213,024002441120
    001165  aa   024002 441120 
    001166  aa   256512 676455     828  	oct	256512676455,631003151344
    001167  aa   631003 151344 
    001170  aa   264635 456171     829  	oct	264635456171,177204003635
    001171  aa   177204 003635 
    001172  aa   274402 374713     830  	oct	274402374713,617422402302
    001173  aa   617422 402302 
    001174  aa   302503 074076     831  	oct	302503074076,563327102762
    001175  aa   563327 102762 
    001176  aa   310623 713116     832  	oct	310623713116,320214723556
    001177  aa   320214 723556 
    001200  aa   316770 675742     833  	oct	316770675742,004260110511
    001201  aa   004260 110511 
    001202  aa   326473 426555     834  	oct	326473426555,202556055315
    001203  aa   202556 055315 
    001204  aa   334612 334310     835  	oct	334612334310,443311470600
    001205  aa   443311 470600 
    001206  aa   342755 023372     836  	oct	342755023372,554174006740
    001207  aa   554174 006740 
    001210  aa   352464 114134     837  	oct	352464114134,543515404254
    001211  aa   543515 404254 
    001212  aa   360601 137163     838  	oct	360601137163,674440705327
    001213  aa   674440 705327 
    001214  aa   366741 367020     839  	oct	366741367020,653551066614
    001215  aa   653551 066614 
    001216  aa   376454 732312     840  	oct	376454732312,413241542167
    001217  aa   413241 542167 
                                   841  
                                   842  """ here is the initial readtable, extracted from lisp_reader_init_.pl1
                                   843  
                        001220     844  	segdef	initial_readtable
                                   845  
                                   846  " NB: the macro_table portion is omitted, and must
                                   847  " be supplied by anyone who copies this table into a LISP array.
                                   848  
                                   849  " define syntax bits
                                   850  
                 004000 000000     851  	bool	forcefeed,4000000000	(ITS)
                 002000 000000     852  	bool	vertical_motion,2000000000	NL, NP
                 001000 000000     853  	bool	string_quote_exp,1000000000	", E
                 000400 000000     854  	bool	special,400000000		
                 000200 000000     855  	bool	single_char_object,200000000	standalone pname
                 000100 000000     856  	bool	blank,100000000			space, tab, comma, etc.
                 000040 000000     857  	bool	lparn,40000000			(, super-(
                 000020 000000     858  	bool	dotted_pair_dot,20000000		. for cons
                 000010 000000     859  	bool	rparn,10000000			), super-)
                 000004 000000     860  	bool	macro,4000000			character macro
                 000002 000000     861  	bool	slashifier,2000000		escape char 
                 000001 000000     862  	bool	rubout,1000000			(ITS)
                        400000     863  	bool	slash_if_first,400000	print control
                        200000     864  	bool	decimal_point,200000	. for numbers
                        100000     865  	bool	slash_if_not_first,100000	print control
                        500000     866  	bool	slash_output,500000		..	
                        040000     867  	bool	bit12,40000		changes meaning of other bits
                        040000     868  	bool	splice,40000
                        020000     869  	bool	shift_scale,20000		^ or _	
                        010000     870  	bool	plus_minus,10000		+ or -	
                        004000     871  	bool	digit,4000		0,...,9	
                        002000     872  	bool	extd_alpha,2000		random chars as alpha 
                        001000     873  	bool	alpha,1000		alphabetic
                                   874  
                                   875  
                                   876  
                                   877  """ Here are the 132 syntax table entries
    001220                         878  initial_readtable:
                                   879  
    001220  aa   000400 500000     880  	vfd	36/special+slash_output		\000
    001221  aa   000400 500000     881  	vfd	36/special+slash_output		^A
    001222  aa   000400 500000     882  	vfd	36/special+slash_output		^B	- these random ctrl chars are ignored
    001223  aa   000400 500000     883  	vfd	36/special+slash_output		^C
    001224  aa   000400 500000     884  	vfd	36/special+slash_output		^D
    001225  aa   000400 500000     885  	vfd	36/special+slash_output		^E
    001226  aa   000400 500000     886  	vfd	36/special+slash_output		^F
    001227  aa   000400 500000     887  	vfd	36/special+slash_output		^G
    001230  aa   000000 002000     888  	vfd	36/extd_alpha			BS - allow underlined pnames
    001231  aa   000500 500000     889  	vfd	36/special+blank+slash_output		HT
    001232  aa   002500 500000     890  	vfd	36/special+blank+vertical_motion+slash_output	NL
    001233  aa   000500 500000     891  	vfd	36/special+blank+slash_output		VT
    001234  aa   002500 500000     892  	vfd	36/special+blank+vertical_motion+slash_output	NP
    001235  aa   000500 500000     893  	vfd	36/special+blank+slash_output		CR
    001236  aa   000400 500000     894  	vfd	36/special+slash_output		^N	- more worthless control chars
    001237  aa   000400 500000     895  	vfd	36/special+slash_output		^O
    001240  aa   000400 500000     896  	vfd	36/special+slash_output		^P
    001241  aa   000400 500000     897  	vfd	36/special+slash_output		^Q
    001242  aa   000400 500000     898  	vfd	36/special+slash_output		^R
    001243  aa   000400 500000     899  	vfd	36/special+slash_output		^S
    001244  aa   000400 500000     900  	vfd	36/special+slash_output		^T
    001245  aa   000400 500000     901  	vfd	36/special+slash_output		^U
    001246  aa   000400 500000     902  	vfd	36/special+slash_output		^V
    001247  aa   000400 500000     903  	vfd	36/special+slash_output		^W
    001250  aa   000400 500000     904  	vfd	36/special+slash_output		^X
    001251  aa   000400 500000     905  	vfd	36/special+slash_output		^Y
    001252  aa   000400 500000     906  	vfd	36/special+slash_output		^Z
    001253  aa   000000 002000     907  	vfd	36/extd_alpha			altmode
    001254  aa   000400 500000     908  	vfd	36/special+slash_output		\034
    001255  aa   000400 500000     909  	vfd	36/special+slash_output		\035
    001256  aa   000400 500000     910  	vfd	36/special+slash_output		\036
    001257  aa   000400 500000     911  	vfd	36/special+slash_output		\037
    001260  aa   000500 500000     912  	vfd	36/special+blank+slash_output		SP
    001261  aa   000000 002000     913  	vfd	36/extd_alpha			!
    001262  aa   001400 540000     914  	vfd	36/special+string_quote_exp+bit12+slash_output	"
    001263  aa   000000 002000     915  	vfd	36/extd_alpha			#
    001264  aa   000000 002000     916  	vfd	36/extd_alpha			$
    001265  aa   000000 002000     917  	vfd	36/extd_alpha			%
    001266  aa   000000 002000     918  	vfd	36/extd_alpha			&
    001267  aa   000404 500000     919  	vfd	36/special+macro+slash_output		'
    001270  aa   000440 500000     920  	vfd	36/special+lparn+slash_output		(
    001271  aa   000410 500000     921  	vfd	36/special+rparn+slash_output		)
    001272  aa   000000 002000     922  	vfd	36/extd_alpha			*
    001273  aa   000000 410000     923  	vfd	36/slash_if_first+plus_minus		+
    001274  aa   000500 500000     924  	vfd	36/special+blank+slash_output		,
    001275  aa   000000 450000     925  	vfd	36/slash_if_first+plus_minus+bit12	-
    001276  aa   000420 700000     926  	vfd	36/special+dotted_pair_dot+slash_output+decimal_point	.
    001277  aa   000402 500000     927  	vfd	36/special+slashifier+slash_output	/
    001300  aa   000000 404000     928  	vfd	36/slash_if_first+digit		0
    001301  aa   000000 404000     929  	vfd	36/slash_if_first+digit		1
    001302  aa   000000 404000     930  	vfd	36/slash_if_first+digit		2
    001303  aa   000000 404000     931  	vfd	36/slash_if_first+digit		3
    001304  aa   000000 404000     932  	vfd	36/slash_if_first+digit		4
    001305  aa   000000 404000     933  	vfd	36/slash_if_first+digit		5
    001306  aa   000000 404000     934  	vfd	36/slash_if_first+digit		6
    001307  aa   000000 404000     935  	vfd	36/slash_if_first+digit		7
    001310  aa   000000 404000     936  	vfd	36/slash_if_first+digit		8
    001311  aa   000000 404000     937  	vfd	36/slash_if_first+digit		9
    001312  aa   000000 002000     938  	vfd	36/extd_alpha			:
    001313  aa   000404 540000     939  	vfd	36/special+macro+slash_output+splice	semicolon
    001314  aa   000000 002000     940  	vfd	36/extd_alpha			<
    001315  aa   000000 002000     941  	vfd	36/extd_alpha			=
    001316  aa   000000 002000     942  	vfd	36/extd_alpha			>
    001317  aa   000000 002000     943  	vfd	36/extd_alpha			?
    001320  aa   000000 002000     944  	vfd	36/extd_alpha			@
    001321  aa   000000 001000     945  	vfd	36/alpha				A
    001322  aa   000000 001000     946  	vfd	36/alpha				B
    001323  aa   000000 001000     947  	vfd	36/alpha				C
    001324  aa   000000 001000     948  	vfd	36/alpha				D
    001325  aa   001000 001000     949  	vfd	36/string_quote_exp+alpha		E
    001326  aa   000000 001000     950  	vfd	36/alpha				F
    001327  aa   000000 001000     951  	vfd	36/alpha				G
    001330  aa   000000 001000     952  	vfd	36/alpha				H
    001331  aa   000000 001000     953  	vfd	36/alpha				I
    001332  aa   000000 001000     954  	vfd	36/alpha				J
    001333  aa   000000 001000     955  	vfd	36/alpha				K
    001334  aa   000000 001000     956  	vfd	36/alpha				L
    001335  aa   000000 001000     957  	vfd	36/alpha				M
    001336  aa   000000 001000     958  	vfd	36/alpha				N
    001337  aa   000000 001000     959  	vfd	36/alpha				O
    001340  aa   000000 001000     960  	vfd	36/alpha				P
    001341  aa   000000 001000     961  	vfd	36/alpha				Q
    001342  aa   000000 001000     962  	vfd	36/alpha				R
    001343  aa   000000 001000     963  	vfd	36/alpha				S
    001344  aa   000000 001000     964  	vfd	36/alpha				T
    001345  aa   000000 001000     965  	vfd	36/alpha				U
    001346  aa   000000 001000     966  	vfd	36/alpha				V
    001347  aa   000000 001000     967  	vfd	36/alpha				W
    001350  aa   000000 001000     968  	vfd	36/alpha				X
    001351  aa   000000 001000     969  	vfd	36/alpha				Y
    001352  aa   000000 001000     970  	vfd	36/alpha				Z
    001353  aa   000000 002000     971  	vfd	36/extd_alpha			[
    001354  aa   000000 002000     972  	vfd	36/extd_alpha			\
    001355  aa   000000 002000     973  	vfd	36/extd_alpha			]
    001356  aa   000000 022000     974  	vfd	36/extd_alpha+shift_scale		^
    001357  aa   000000 062000     975  	vfd	36/extd_alpha+shift_scale+bit12	_
    001360  aa   000000 002000     976  	vfd	36/extd_alpha			`
    001361  aa   000000 001000     977  	vfd	36/alpha				a
    001362  aa   000000 001000     978  	vfd	36/alpha				b
    001363  aa   000000 001000     979  	vfd	36/alpha				c
    001364  aa   000000 001000     980  	vfd	36/alpha				d
    001365  aa   001000 001000     981  	vfd	36/string_quote_exp+alpha		e
    001366  aa   000000 001000     982  	vfd	36/alpha				f
    001367  aa   000000 001000     983  	vfd	36/alpha				g
    001370  aa   000000 001000     984  	vfd	36/alpha				h
    001371  aa   000000 001000     985  	vfd	36/alpha				i
    001372  aa   000000 001000     986  	vfd	36/alpha				j
    001373  aa   000000 001000     987  	vfd	36/alpha				k
    001374  aa   000000 001000     988  	vfd	36/alpha				l
    001375  aa   000000 001000     989  	vfd	36/alpha				m
    001376  aa   000000 001000     990  	vfd	36/alpha				n
    001377  aa   000000 001000     991  	vfd	36/alpha				o
    001400  aa   000000 001000     992  	vfd	36/alpha				p
    001401  aa   000000 001000     993  	vfd	36/alpha				q
    001402  aa   000000 001000     994  	vfd	36/alpha				r
    001403  aa   000000 001000     995  	vfd	36/alpha				s
    001404  aa   000000 001000     996  	vfd	36/alpha				t
    001405  aa   000000 001000     997  	vfd	36/alpha				u
    001406  aa   000000 001000     998  	vfd	36/alpha				v
    001407  aa   000000 001000     999  	vfd	36/alpha				w
    001410  aa   000000 001000    1000  	vfd	36/alpha				x
    001411  aa   000000 001000    1001  	vfd	36/alpha				y
    001412  aa   000000 001000    1002  	vfd	36/alpha				z
    001413  aa   000000 002000    1003  	vfd	36/extd_alpha			{
    001414  aa   000404 500000    1004  	vfd	36/special+macro+slash_output			|
    001415  aa   000000 002000    1005  	vfd	36/extd_alpha			}
    001416  aa   000000 002000    1006  	vfd	36/extd_alpha			~
    001417  aa   000400 500000    1007  	vfd	36/special+slash_output		rubout
    001420  aa   000402 500000    1008  	vfd	36/special+slashifier+slash_output	"pseudo slash"
    001421  aa   000440 500000    1009  	vfd	36/special+lparn+slash_output		"pseudo left parenthesis"
    001422  aa   000410 500000    1010  	vfd	36/special+rparn+slash_output		"pseudo right parenthesis"
    001423  aa   500000 000000    1011  	zero	special+blank+slash_output		"pseudo space"
                                  1012  
                                  1013  
                                  1014  """ Here is the translation table
                                  1015  
    001424  aa   000000 000000    1016  	dec	0
    001425  aa   000000 000001    1017  	dec	1
    001426  aa   000000 000002    1018  	dec	2
    001427  aa   000000 000003    1019  	dec	3
    001430  aa   000000 000004    1020  	dec	4
    001431  aa   000000 000005    1021  	dec	5
    001432  aa   000000 000006    1022  	dec	6
    001433  aa   000000 000007    1023  	dec	7
    001434  aa   000000 000010    1024  	dec	8
    001435  aa   000000 000011    1025  	dec	9
    001436  aa   000000 000012    1026  	dec	10
    001437  aa   000000 000013    1027  	dec	11
    001440  aa   000000 000014    1028  	dec	12
    001441  aa   000000 000015    1029  	dec	13
    001442  aa   000000 000016    1030  	dec	14
    001443  aa   000000 000017    1031  	dec	15
    001444  aa   000000 000020    1032  	dec	16
    001445  aa   000000 000021    1033  	dec	17
    001446  aa   000000 000022    1034  	dec	18
    001447  aa   000000 000023    1035  	dec	19
    001450  aa   000000 000024    1036  	dec	20
    001451  aa   000000 000025    1037  	dec	21
    001452  aa   000000 000026    1038  	dec	22
    001453  aa   000000 000027    1039  	dec	23
    001454  aa   000000 000030    1040  	dec	24
    001455  aa   000000 000031    1041  	dec	25
    001456  aa   000000 000032    1042  	dec	26
    001457  aa   000000 000044    1043  	dec	36			translate altmode to dollar sign
    001460  aa   000000 000034    1044  	dec	28
    001461  aa   000000 000035    1045  	dec	29
    001462  aa   000000 000036    1046  	dec	30
    001463  aa   000000 000037    1047  	dec	31
    001464  aa   000000 000040    1048  	dec	32
    001465  aa   000000 000041    1049  	dec	33
    001466  aa   000000 000042    1050  	dec	34
    001467  aa   000000 000043    1051  	dec	35
    001470  aa   000000 000044    1052  	dec	36
    001471  aa   000000 000045    1053  	dec	37
    001472  aa   000000 000046    1054  	dec	38
    001473  aa   000000 000001    1055  	dec	1			standard quote macro
    001474  aa   000000 000050    1056  	dec	40
    001475  aa   000000 000051    1057  	dec	41
    001476  aa   000000 000052    1058  	dec	42
    001477  aa   000000 000053    1059  	dec	43
    001500  aa   000000 000054    1060  	dec	44
    001501  aa   000000 000055    1061  	dec	45
    001502  aa   000000 000056    1062  	dec	46
    001503  aa   000000 000057    1063  	dec	47
    001504  aa   000000 000060    1064  	dec	48
    001505  aa   000000 000061    1065  	dec	49
    001506  aa   000000 000062    1066  	dec	50
    001507  aa   000000 000063    1067  	dec	51
    001510  aa   000000 000064    1068  	dec	52
    001511  aa   000000 000065    1069  	dec	53
    001512  aa   000000 000066    1070  	dec	54
    001513  aa   000000 000067    1071  	dec	55
    001514  aa   000000 000070    1072  	dec	56
    001515  aa   000000 000071    1073  	dec	57
    001516  aa   000000 000072    1074  	dec	58
    001517  aa   000000 000002    1075  	dec	2			standard semicolon macro
    001520  aa   000000 000074    1076  	dec	60
    001521  aa   000000 000075    1077  	dec	61
    001522  aa   000000 000076    1078  	dec	62
    001523  aa   000000 000077    1079  	dec	63
    001524  aa   000000 000100    1080  	dec	64
    001525  aa   000000 000101    1081  	dec	65
    001526  aa   000000 000102    1082  	dec	66
    001527  aa   000000 000103    1083  	dec	67
    001530  aa   000000 000104    1084  	dec	68
    001531  aa   000000 000105    1085  	dec	69
    001532  aa   000000 000106    1086  	dec	70
    001533  aa   000000 000107    1087  	dec	71
    001534  aa   000000 000110    1088  	dec	72
    001535  aa   000000 000111    1089  	dec	73
    001536  aa   000000 000112    1090  	dec	74
    001537  aa   000000 000113    1091  	dec	75
    001540  aa   000000 000114    1092  	dec	76
    001541  aa   000000 000115    1093  	dec	77
    001542  aa   000000 000116    1094  	dec	78
    001543  aa   000000 000117    1095  	dec	79
    001544  aa   000000 000120    1096  	dec	80
    001545  aa   000000 000121    1097  	dec	81
    001546  aa   000000 000122    1098  	dec	82
    001547  aa   000000 000123    1099  	dec	83
    001550  aa   000000 000124    1100  	dec	84
    001551  aa   000000 000125    1101  	dec	85
    001552  aa   000000 000126    1102  	dec	86
    001553  aa   000000 000127    1103  	dec	87
    001554  aa   000000 000130    1104  	dec	88
    001555  aa   000000 000131    1105  	dec	89
    001556  aa   000000 000132    1106  	dec	90
    001557  aa   000000 000133    1107  	dec	91
    001560  aa   000000 000134    1108  	dec	92
    001561  aa   000000 000135    1109  	dec	93
    001562  aa   000000 000136    1110  	dec	94
    001563  aa   000000 000137    1111  	dec	95
    001564  aa   000000 000140    1112  	dec	96
    001565  aa   000000 000141    1113  	dec	97
    001566  aa   000000 000142    1114  	dec	98
    001567  aa   000000 000143    1115  	dec	99
    001570  aa   000000 000144    1116  	dec	100
    001571  aa   000000 000145    1117  	dec	101
    001572  aa   000000 000146    1118  	dec	102
    001573  aa   000000 000147    1119  	dec	103
    001574  aa   000000 000150    1120  	dec	104
    001575  aa   000000 000151    1121  	dec	105
    001576  aa   000000 000152    1122  	dec	106
    001577  aa   000000 000153    1123  	dec	107
    001600  aa   000000 000154    1124  	dec	108
    001601  aa   000000 000155    1125  	dec	109
    001602  aa   000000 000156    1126  	dec	110
    001603  aa   000000 000157    1127  	dec	111
    001604  aa   000000 000160    1128  	dec	112
    001605  aa   000000 000161    1129  	dec	113
    001606  aa   000000 000162    1130  	dec	114
    001607  aa   000000 000163    1131  	dec	115
    001610  aa   000000 000164    1132  	dec	116
    001611  aa   000000 000165    1133  	dec	117
    001612  aa   000000 000166    1134  	dec	118
    001613  aa   000000 000167    1135  	dec	119
    001614  aa   000000 000170    1136  	dec	120
    001615  aa   000000 000171    1137  	dec	121
    001616  aa   000000 000172    1138  	dec	122
    001617  aa   000000 000173    1139  	dec	123
    001620  aa   000000 000003    1140  	dec	3	standard vertical bar macro
    001621  aa   000000 000175    1141  	dec	125
    001622  aa   000000 000176    1142  	dec	126
    001623  aa   000000 000177    1143  	dec	127
    001624  aa   000000 000057    1144  	dec	47			pseudo slash
    001625  aa   000000 000050    1145  	dec	40			pseudo (
    001626  aa   000000 000051    1146  	dec	41			pseudo )
    001627  aa   000000 000040    1147  	dec	32			pesudo space
                                  1148  
                                  1149  
                                  1150  	end
ENTRY SEQUENCES
     
    001630  5a   000117 0000 00
    001631  aa  7 00046 2721 20
    001632  0a   000760 7100 00
    001633  5a   000113 0000 00
    001634  aa  7 00046 2721 20
    001635  0a   000007 7100 00
    001636  5a   000106 0000 00
    001637  aa  7 00046 2721 20
    001640  0a   000016 7100 00
    001641  5a   000101 0000 00
    001642  aa  7 00046 2721 20
    001643  0a   000106 7100 00
    001644  5a   000073 0000 00
    001645  aa  7 00046 2721 20
    001646  0a   000075 7100 00
    001647  5a   000066 0000 00
    001650  aa  7 00046 2721 20
    001651  0a   000135 7100 00
LITERALS
     
    001652  aa   000000 000000 
    001653  aa   000000 000000 
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    001654  5a   000003 000000 
    001655  5a   000143 600000 
    001656  aa   000000 000000 
    001657  55   000013 000002 
    001660  5a   000002 400003 
    001661  55   000006 000013 
    001662  aa  020 154 151 163
    001663  aa  160 137 162 145
    001664  aa  141 144 145 162
    001665  aa  137 141 154 155
    001666  aa  137 000 000 000
    001667  55   000023 000003 
    001670  0a   001220 400000 
    001671  55   000016 000003 
    001672  aa  021 151 156 151         initial_readtable
    001673  aa  164 151 141 154
    001674  aa  137 162 145 141
    001675  aa  144 164 141 142
    001676  aa  154 145 000 000
    001677  55   000030 000013 
    001700  0a   000602 400000 
    001701  55   000026 000003 
    001702  aa  007 160 141 147         pagenum
    001703  aa  145 156 165 155
    001704  55   000035 000023 
    001705  0a   000576 400000 
    001706  55   000033 000003 
    001707  aa  007 154 151 156         linenum
    001710  aa  145 156 165 155
    001711  55   000042 000030 
    001712  0a   000572 400000 
    001713  55   000040 000003 
    001714  aa  005 160 141 147         pagel
    001715  aa  145 154 000 000
    001716  55   000047 000035 
    001717  0a   000566 400000 
    001720  55   000045 000003 
    001721  aa  007 143 150 141         charpos
    001722  aa  162 160 157 163
    001723  55   000054 000042 
    001724  0a   000562 400000 
    001725  55   000052 000003 
    001726  aa  005 154 151 156         linel
    001727  aa  145 154 000 000
    001730  55   000061 000047 
    001731  0a   000550 400000 
    001732  55   000057 000003 
    001733  aa  005 143 150 162         chrct
    001734  aa  143 164 000 000
    001735  55   000066 000054 
    001736  0a   000000 400000 
    001737  55   000064 000003 
    001740  aa  006 154 151 163         listen
    001741  aa  164 145 156 000
    001742  55   000073 000061 
    001743  0a   001650 500000 
    001744  55   000071 000003 
    001745  aa  007 164 171 157         tyo_alm
    001746  aa  137 141 154 155
    001747  55   000101 000066 
    001750  0a   001645 500000 
    001751  55   000076 000003 
    001752  aa  011 141 163 143         ascii_alm
    001753  aa  151 151 137 141
    001754  aa  154 155 000 000
    001755  55   000106 000073 
    001756  0a   001642 500000 
    001757  55   000104 000003 
    001760  aa  006 162 145 141         readch
    001761  aa  144 143 150 000
    001762  55   000113 000101 
    001763  0a   001637 500000 
    001764  55   000111 000003 
    001765  aa  007 164 171 151         tyipeek
    001766  aa  160 145 145 153
    001767  55   000117 000106 
    001770  0a   001634 500000 
    001771  55   000116 000003 
    001772  aa  003 164 171 151         tyi
    001773  55   000125 000113 
    001774  0a   001631 500000 
    001775  55   000122 000003 
    001776  aa  012 154 145 146         left_shift
    001777  aa  164 137 163 150
    002000  aa  151 146 164 000
    002001  55   000134 000117 
    002002  0a   000766 400000 
    002003  55   000130 000003 
    002004  aa  015 160 157 167         powers_of_ten
    002005  aa  145 162 163 137
    002006  aa  157 146 137 164
    002007  aa  145 156 000 000
    002010  55   000002 000125 
    002011  6a   000000 400002 
    002012  55   000137 000003 
    002013  aa  014 163 171 155         symbol_table
    002014  aa  142 157 154 137
    002015  aa  164 141 142 154
    002016  aa  145 000 000 000

DEFINITIONS HASH TABLE

    002017  aa   000000 000033 
    002020  5a   000047 000000 
    002021  aa   000000 000000 
    002022  5a   000013 000000 
    002023  5a   000023 000000 
    002024  5a   000042 000000 
    002025  5a   000035 000000 
    002026  5a   000061 000000 
    002027  aa   000000 000000 
    002030  aa   000000 000000 
    002031  aa   000000 000000 
    002032  5a   000134 000000 
    002033  aa   000000 000000 
    002034  5a   000106 000000 
    002035  aa   000000 000000 
    002036  aa   000000 000000 
    002037  aa   000000 000000 
    002040  5a   000113 000000 
    002041  aa   000000 000000 
    002042  5a   000066 000000 
    002043  5a   000073 000000 
    002044  5a   000117 000000 
    002045  aa   000000 000000 
    002046  aa   000000 000000 
    002047  5a   000054 000000 
    002050  5a   000101 000000 
    002051  5a   000030 000000 
    002052  5a   000125 000000 

EXTERNAL NAMES

    002053  aa  014 154 151 163         lisp_io_fns_
    002054  aa  160 137 151 157
    002055  aa  137 146 156 163
    002056  aa  137 000 000 000
    002057  aa  007 146 165 156         funcall
    002060  aa  143 141 154 154
    002061  aa  005 154 151 163         lisp_
    002062  aa  160 137 000 000
    002063  aa  014 145 156 144         end_of_block
    002064  aa  137 157 146 137
    002065  aa  142 154 157 143
    002066  aa  153 000 000 000
    002067  aa  021 146 151 170         fix_not_ok_iochan
    002070  aa  137 156 157 164
    002071  aa  137 157 153 137
    002072  aa  151 157 143 150
    002073  aa  141 156 000 000
    002074  aa  020 154 151 163         lisp_io_control_
    002075  aa  160 137 151 157
    002076  aa  137 143 157 156
    002077  aa  164 162 157 154
    002100  aa  137 000 000 000
    002101  aa  013 154 151 163         lisp_error_
    002102  aa  160 137 145 162
    002103  aa  162 157 162 137
    002104  aa  011 165 156 155         unmkd_ptr
    002105  aa  153 144 137 160
    002106  aa  164 162 000 000
    002107  aa  011 163 164 141         stack_ptr
    002110  aa  143 153 137 160
    002111  aa  164 162 000 000
    002112  aa  003 164 171 157         tyo
    002113  aa  013 154 151 163         lisp_print_
    002114  aa  160 137 160 162
    002115  aa  151 156 164 137
    002116  aa  005 141 163 143         ascii
    002117  aa  151 151 000 000
    002120  aa  013 162 145 141         real_readch
    002121  aa  154 137 162 145
    002122  aa  141 144 143 150
    002123  aa  014 162 145 141         real_tyipeek
    002124  aa  154 137 164 171
    002125  aa  151 160 145 145
    002126  aa  153 000 000 000
    002127  aa  010 162 145 141         real_tyi
    002130  aa  154 137 164 171
    002131  aa  151 000 000 000
    002132  aa  014 154 151 163         lisp_reader_
    002133  aa  160 137 162 145
    002134  aa  141 144 145 162
    002135  aa  137 000 000 000
    002136  aa  011 162 145 141         readtable
    002137  aa  144 164 141 142
    002140  aa  154 145 000 000
    002141  aa  010 157 165 164         outfiles
    002142  aa  146 151 154 145
    002143  aa  163 000 000 000
    002144  aa  006 151 156 146         infile
    002145  aa  151 154 145 000
    002146  aa  005 143 164 162         ctrlR
    002147  aa  154 122 000 000
    002150  aa  016 164 164 171         tty_input_chan
    002151  aa  137 151 156 160
    002152  aa  165 164 137 143
    002153  aa  150 141 156 000
    002154  aa  005 143 164 162         ctrlQ
    002155  aa  154 121 000 000
    002156  aa  011 162 144 162         rdr_state
    002157  aa  137 163 164 141
    002160  aa  164 145 000 000
    002161  aa  022 162 145 141         read_print_nl_sync
    002162  aa  144 137 160 162
    002163  aa  151 156 164 137
    002164  aa  156 154 137 163
    002165  aa  171 156 143 000
    002166  aa  017 164 164 171         tty_output_chan
    002167  aa  137 157 165 164
    002170  aa  160 165 164 137
    002171  aa  143 150 141 156
    002172  aa  005 143 164 162         ctrlW
    002173  aa  154 127 000 000
    002174  aa  007 157 142 141         obarray
    002175  aa  162 162 141 171
    002176  aa  021 154 151 163         lisp_static_vars_
    002177  aa  160 137 163 164
    002200  aa  141 164 151 143
    002201  aa  137 166 141 162
    002202  aa  163 137 000 000

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    002203  aa   000004 000000 
    002204  55   000177 000026 
    002205  aa   000004 000000 
    002206  55   000177 000033 
    002207  aa   000004 000000 
    002210  55   000177 000040 
    002211  aa   000004 000000 
    002212  55   000177 000045 
    002213  aa   000004 000000 
    002214  55   000177 000052 
    002215  aa   000004 000000 
    002216  55   000177 000057 
    002217  aa   000004 000000 
    002220  55   000205 000203 
    002221  aa   000004 000000 
    002222  55   000220 000207 
    002223  aa   000004 000000 
    002224  55   000220 000213 
    002225  aa   000004 000000 
    002226  55   000225 000225 
    002227  aa   000004 000000 
    002230  55   000322 000230 
    002231  aa   000004 000000 
    002232  55   000322 000233 
    002233  aa   000004 000000 
    002234  55   000237 000236 
    002235  aa   000004 000000 
    002236  55   000256 000242 
    002237  aa   000004 000000 
    002240  55   000256 000244 
    002241  aa   000004 000000 
    002242  55   000256 000247 
    002243  aa   000004 000000 
    002244  55   000256 000253 
    002245  aa   000004 000000 
    002246  55   000322 000262 
    002247  aa   000004 000000 
    002250  55   000322 000265 
    002251  aa   000004 000000 
    002252  55   000322 000270 
    002253  aa   000004 000000 
    002254  55   000322 000272 
    002255  aa   000004 000000 
    002256  55   000322 000274 
    002257  aa   000004 000000 
    002260  55   000322 000300 
    002261  aa   000004 000000 
    002262  55   000322 000302 
    002263  aa   000004 000000 
    002264  55   000322 000305 
    002265  aa   000004 000000 
    002266  55   000322 000312 
    002267  aa   000004 000000 
    002270  55   000322 000316 
    002271  aa   000004 000000 
    002272  55   000322 000320 
    002273  aa   000001 000000 
    002274  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    002275  5a   000375 000000 
    002276  5a   000403 000000 
    002277  5a   000405 000000 
    002300  5a   000327 000000 
    002301  5a   000331 000000 
    002302  5a   000333 000000 
    002303  5a   000335 000000 
    002304  5a   000337 000000 
    002305  5a   000341 000000 
    002306  5a   000343 000000 
    002307  5a   000345 000000 
    002310  5a   000347 000000 
    002311  5a   000371 000000 
    002312  5a   000407 000000 
    002313  5a   000351 000000 
    002314  5a   000373 000000 
    002315  5a   000377 000000 
    002316  5a   000413 000000 
    002317  5a   000415 000000 
    002320  5a   000353 000000 
    002321  5a   000353 000001 
    002322  5a   000355 000000 
    002323  5a   000357 000000 
    002324  5a   000361 000000 
    002325  5a   000363 000000 
    002326  5a   000365 000000 
    002327  5a   000367 000000 
    002330  5a   000401 000000 
    002331  5a   000411 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   001654 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000104 
    000007  a2   000000 000000 
    000010  9a   777770 0000 46         lisp_static_vars_|tty_output_chan
    000011  5a   000455 0000 20
    000012  9a   777766 0000 46         lisp_static_vars_|tty_input_chan
    000013  5a   000454 0000 20
    000014  9a   777764 0000 46         lisp_reader_|real_tyi
    000015  5a   000453 0000 00
    000016  9a   777762 0000 46         lisp_reader_|real_tyipeek
    000017  5a   000452 0000 00
    000020  9a   777760 0000 46         lisp_reader_|real_readch
    000021  5a   000451 0000 00
    000022  9a   777756 0000 46         lisp_reader_|ascii
    000023  5a   000450 0000 00
    000024  9a   777754 0000 46         lisp_print_|tyo
    000025  5a   000447 0000 00
    000026  9a   777752 0000 46         lisp_static_vars_|stack_ptr
    000027  5a   000446 0000 00
    000030  9a   777750 0000 46         lisp_static_vars_|unmkd_ptr
    000031  5a   000445 0000 00
    000032  9a   777746 0000 46         lisp_static_vars_|unmkd_ptr
    000033  5a   000444 0000 20
    000034  9a   777744 0000 46         lisp_static_vars_|stack_ptr
    000035  5a   000446 0000 20
    000036  9a   777742 0000 46         lisp_static_vars_|obarray
    000037  5a   000443 0000 20
    000040  9a   777740 0000 46         lisp_static_vars_|ctrlW
    000041  5a   000442 0000 20
    000042  9a   777736 0000 46         lisp_static_vars_|ctrlR
    000043  5a   000441 0000 20
    000044  9a   777734 0000 46         lisp_static_vars_|outfiles
    000045  5a   000440 0000 20
    000046  9a   777732 0000 46         lisp_error_|lisp_error_
    000047  5a   000437 0000 00
    000050  9a   777730 0000 46         lisp_static_vars_|read_print_nl_sync
    000051  5a   000436 0000 00
    000052  9a   777726 0000 46         lisp_static_vars_|readtable
    000053  5a   000435 0000 20
    000054  9a   777724 0000 46         lisp_io_control_|fix_not_ok_iochan
    000055  5a   000434 0000 00
    000056  9a   777722 0000 46         lisp_io_control_|end_of_block
    000057  5a   000433 0000 00
    000060  9a   777720 0000 46         lisp_|funcall
    000061  5a   000432 0000 00
    000062  9a   777716 0000 46         lisp_io_fns_|chrct
    000063  5a   000431 0000 00
    000064  9a   777714 0000 46         lisp_io_fns_|linel
    000065  5a   000430 0000 00
    000066  9a   777712 0000 46         lisp_io_fns_|charpos
    000067  5a   000427 0000 00
    000070  9a   777710 0000 46         lisp_io_fns_|pagel
    000071  5a   000426 0000 00
    000072  9a   777706 0000 46         lisp_io_fns_|linenum
    000073  5a   000425 0000 00
    000074  9a   777704 0000 46         lisp_io_fns_|pagenum
    000075  5a   000424 0000 00
    000076  9a   777702 0000 46         lisp_static_vars_|rdr_state
    000077  5a   000423 0000 00
    000100  9a   777700 0000 46         lisp_static_vars_|ctrlQ
    000101  5a   000422 0000 20
    000102  9a   777676 0000 46         lisp_static_vars_|infile
    000103  5a   000421 0000 20
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000004 
    000004  aa   000000 114732 
    000005  aa   732732 062314 
    000006  aa   000000 114775 
    000007  aa   677352 613656 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000375 
    000020  aa   000000 000235 
    000021  aa   000000 000345 
    000022  aa   000362 000235 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   040066 056067 
    000030  aa   040040 117143 
    000031  aa   164157 142145 
    000032  aa   162040 061071 
    000033  aa   070066 040040 
    000034  aa   107112 157150 
    000035  aa   156163 157156 
    000036  aa   056123 171163 
    000037  aa   115141 151156 
    000040  aa   164056 141040 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   154151 163164 
    000045  aa   040040 040040 
    000046  aa   040040 040040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040040 040040 
    000057  aa   040040 040040 
    000060  aa   040040 040040 
    000061  aa   040040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000007 
    000066  aa   000122 000065 
    000067  aa   147740 446352 
    000070  aa   000000 114774 
    000071  aa   461264 200000 
    000072  aa   000140 000041 
    000073  aa   106701 741740 
    000074  aa   000000 110670 
    000075  aa   211446 200000 
    000076  aa   000151 000044 
    000077  aa   106701 741760 
    000100  aa   000000 110670 
    000101  aa   211451 600000 
    000102  aa   000162 000044 
    000103  aa   120017 346605 
    000104  aa   000000 112002 
    000105  aa   404115 200000 
    000106  aa   000173 000066 
    000107  aa   147714 750316 
    000110  aa   000000 114774 
    000111  aa   453561 000000 
    000112  aa   000211 000047 
    000113  aa   106701 741731 
    000114  aa   000000 110670 
    000115  aa   211444 000000 
    000116  aa   000223 000046 
    000117  aa   106701 741746 
    000120  aa   000000 110670 
    000121  aa   211450 600000 
    000122  aa   076163 160145          >special_ldd>install>MR12.0-1206>lisp_reader_alm_.alm
    000123  aa   143151 141154 
    000124  aa   137154 144144 
    000125  aa   076151 156163 
    000126  aa   164141 154154 
    000127  aa   076115 122061 
    000130  aa   062056 060055 
    000131  aa   061062 060066 
    000132  aa   076154 151163 
    000133  aa   160137 162145 
    000134  aa   141144 145162 
    000135  aa   137141 154155 
    000136  aa   137056 141154 
    000137  aa   155040 040040 
    000140  aa   076154 144144          >ldd>include>lisp_iochan.incl.alm
    000141  aa   076151 156143 
    000142  aa   154165 144145 
    000143  aa   076154 151163 
    000144  aa   160137 151157 
    000145  aa   143150 141156 
    000146  aa   056151 156143 
    000147  aa   154056 141154 
    000150  aa   155040 040040 
    000151  aa   076154 144144          >ldd>include>lisp_array_fmt.incl.alm
    000152  aa   076151 156143 
    000153  aa   154165 144145 
    000154  aa   076154 151163 
    000155  aa   160137 141162 
    000156  aa   162141 171137 
    000157  aa   146155 164056 
    000160  aa   151156 143154 
    000161  aa   056141 154155 
    000162  aa   076154 144144          >ldd>include>lisp_stack_seg.incl.alm
    000163  aa   076151 156143 
    000164  aa   154165 144145 
    000165  aa   076154 151163 
    000166  aa   160137 163164 
    000167  aa   141143 153137 
    000170  aa   163145 147056 
    000171  aa   151156 143154 
    000172  aa   056141 154155 
    000173  aa   076163 160145          >special_ldd>install>MR12.0-1206>stack_header.incl.alm
    000174  aa   143151 141154 
    000175  aa   137154 144144 
    000176  aa   076151 156163 
    000177  aa   164141 154154 
    000200  aa   076115 122061 
    000201  aa   062056 060055 
    000202  aa   061062 060066 
    000203  aa   076163 164141 
    000204  aa   143153 137150 
    000205  aa   145141 144145 
    000206  aa   162056 151156 
    000207  aa   143154 056141 
    000210  aa   154155 040040 
    000211  aa   076154 144144          >ldd>include>lisp_object_types.incl.alm
    000212  aa   076151 156143 
    000213  aa   154165 144145 
    000214  aa   076154 151163 
    000215  aa   160137 157142 
    000216  aa   152145 143164 
    000217  aa   137164 171160 
    000220  aa   145163 056151 
    000221  aa   156143 154056 
    000222  aa   141154 155040 
    000223  aa   076154 144144          >ldd>include>lisp_error_codes.incl.alm
    000224  aa   076151 156143 
    000225  aa   154165 144145 
    000226  aa   076154 151163 
    000227  aa   160137 145162 
    000230  aa   162157 162137 
    000231  aa   143157 144145 
    000232  aa   163056 151156 
    000233  aa   143154 056141 
    000234  aa   154155 040040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

        1000    alpha                    lisp_reader_alm_:   873,  945,  946,  947,  948,  949,  950,  951,  952,  953,  954,
                                                             955,  956,  957,  958,  959,  960,  961,  962,  963,  964,  965,
                                                             966,  967,  968,  969,  970,  977,  978,  979,  980,  981,  982,
                                                             983,  984,  985,  986,  987,  988,  989,  990,  991,  992,  993,
                                                             994,  995,  996,  997,  998,  999, 1000, 1001, 1002.
         102    append_list_op           lisp_stack_seg:      43.
          50    argl                     lisp_reader_alm_:    19,  340,  342,  344,  358,  390,  391.
         250    argument_must_be_array   lisp_error_codes:    72.
         200    Array                    lisp_reader_alm_:   180,
                                         lisp_object_types:   25.
         166    array_bound_error        lisp_error_codes:    26.
           2    array_data_ptr           lisp_reader_alm_:   188,
                                         lisp_array_fmt:       9.
           7    array_info.2ndims        lisp_array_fmt:      12.
           0    array_info.gc_mark       lisp_array_fmt:       7.
           0    array_info.ndims         lisp_array_fmt:       6.
           7    array_info.type          lisp_reader_alm_:   184,
                                         lisp_array_fmt:      11.
         122    array_info_for_store     lisp_stack_seg:      51.
         126    array_link_snap_opr      lisp_stack_seg:      53.
           4    array_load_sequence      lisp_array_fmt:      10.
         124    array_offset_for_store   lisp_stack_seg:      52.
         112    array_operator           lisp_stack_seg:      47.
          10    array_pointer            lisp_stack_seg:      10.
         247    array_too_big            lisp_error_codes:    71.
                ascii                    lisp_reader_alm_:   104.
          75    ascii_alm                lisp_reader_alm_:    17,  151.
         216    atan_0_0_err             lisp_error_codes:    46.
       77700    Atomic                   lisp_object_types:   19.
       10000    Atsym                    lisp_object_types:   18.
         163    badmacro                 lisp_error_codes:    23.
         215    badobarray               lisp_error_codes:    45.
         165    badreadlist              lisp_error_codes:    25.
         214    badreadtable             lisp_error_codes:    44.
         151    bad_argument             lisp_error_codes:    13.
         170    bad_arg_correctable      lisp_error_codes:    28.
         241    bad_array_subscript      lisp_error_codes:    65.
         175    bad_base                 lisp_error_codes:    33.
         154    bad_bv                   lisp_error_codes:    16.
         232    bad_do_format            lisp_error_codes:    58.
         231    bad_entry_name           lisp_error_codes:    57.
         153    bad_function             lisp_error_codes:    15.
         206    bad_f_fcn                lisp_error_codes:    38.
         174    bad_ibase                lisp_error_codes:    32.
         176    bad_input_source         lisp_error_codes:    34.
         177    bad_output_dest          lisp_reader_alm_:   269,
                                         lisp_error_codes:    35.
         171    bad_prog_op              lisp_error_codes:    29.
         100    begin_list_op            lisp_stack_seg:      42.
         174    begin_unmkd_stack        lisp_stack_seg:      66.
        1000    Bignum                   lisp_object_types:   20.
        1000    Big_fixed                lisp_object_types:   29.
          20    bind_op                  lisp_stack_seg:      17.
       40000    bit12                    lisp_reader_alm_:   867,  914,  925,  975.
           0    blank                    lisp_reader_alm_:   856,  889,  890,  891,  892,  893,  912,  924, 1011.
           1    call_array_operator      lisp_array_fmt:       8.
        1170    call_offset              stack_header:        80.
          32    call_op                  lisp_stack_seg:      22.
          46    call_out                 lisp_reader_alm_:   122,  128,  272.
          44    call_out0                lisp_reader_alm_:   103,  121.
         222    cant_filepos             lisp_error_codes:    50.
         244    cant_subscript_readtable       lisp_error_codes:    68.
         167    car_cdr_error            lisp_error_codes:    27.
          34    catch1_op                lisp_stack_seg:      23.
          36    catch2_op                lisp_stack_seg:      24.
         566    charpos                  lisp_reader_alm_:   546,  569,  570.
         550    chrct                    lisp_reader_alm_:   546,  548,  549.
         664    cka                      lisp_reader_alm_:   668,  676.
         675    cke                      lisp_reader_alm_:   667,  677.
         106    compare_op               lisp_stack_seg:      45.
          72    cons_op                  lisp_stack_seg:      39.
         136    cons_string_op           lisp_stack_seg:      57.
          37    copout                   lisp_reader_alm_:    92,   96,  100,  106,  110,  630.
         132    create_array_desc_op     lisp_stack_seg:      55.
         130    create_string_desc_op    lisp_stack_seg:      54.
         140    create_varying_string_op       lisp_stack_seg:      58.
                ctrlQ                    lisp_reader_alm_:    25,  677.
                ctrlR                    lisp_reader_alm_:    26,  226.
                ctrlW                    lisp_reader_alm_:    25,  219.
           6    Dead_array               lisp_array_fmt:      20.
         114    dead_array_operator      lisp_stack_seg:      48.
         243    dead_array_reference     lisp_error_codes:    67.
      200000    decimal_point            lisp_reader_alm_:   864,  926.
        4000    digit                    lisp_reader_alm_:   871,  928,  929,  930,  931,  932,  933,  934,  935,  936,  937.
         220    division_by_zero         lisp_error_codes:    48.
         161    doterror                 lisp_error_codes:    21.
           0    dotted_pair_dot          lisp_reader_alm_:   858,  926.
         272    empty_buff               lisp_reader_alm_:   335,  405.
                end_of_block             lisp_reader_alm_:   359.
        1174    entry_offset             stack_header:        84.
         221    eof_in_object            lisp_error_codes:    49.
          24    errset1_op               lisp_stack_seg:      19.
          26    errset2_op               lisp_stack_seg:      20.
          64    err_op                   lisp_stack_seg:      36.
        2000    extd_alpha               lisp_reader_alm_:   872,  888,  907,  913,  915,  916,  917,  918,  922,  938,  940,
                                                             941,  942,  943,  944,  971,  972,  973,  974,  975,  976, 1003,
                                                            1005, 1006.
         100    File                     lisp_reader_alm_:   265,  496,  598,  642,  669,  693,
                                         lisp_object_types:   30.
         223    filepos_oob              lisp_error_codes:    51.
         227    file_is_closed           lisp_error_codes:    55.
         150    file_system_error        lisp_error_codes:    12.
         224    file_sys_fun_err         lisp_error_codes:    52.
       40000    Fixed                    lisp_object_types:   15.
           2    Fixnum_array             lisp_array_fmt:      16.
       40047    fixnum_type              lisp_reader_alm_:    64,   74,   86,  112,  154,  201,  603,  647,
                                         lisp_object_types:   34.
                fix_not_ok_iochan        lisp_reader_alm_:   348.
      736777    flag_reset_mask          lisp_reader_alm_:   410,
                                         lisp_iochan:   42.
       20000    Float                    lisp_object_types:   16.
         120    floating_store_operator  lisp_stack_seg:      50.
           3    Flonum_array             lisp_array_fmt:      17.
         212    flonum_too_big           lisp_error_codes:    42.
       20047    flonum_type              lisp_object_types:   35.
         254    flush2                   lisp_reader_alm_:   302,  305,  307,  309,  315.
         312    flush3                   lisp_reader_alm_:   347,  352.
           0    forcefeed                lisp_reader_alm_:   851.
                funcall                  lisp_reader_alm_:   504.
          42    gensym_data              lisp_stack_seg:      26.
         626    get_file_object_of_nil   lisp_reader_alm_:   609,  612,  653.
         116    get_sing_char            lisp_reader_alm_:   158,  168,  176.
         352    icall                    lisp_reader_alm_:   349,  360,  389.
         162    illobj                   lisp_error_codes:    22.
         235    include_file_error       lisp_error_codes:    61.
                infile                   lisp_reader_alm_:    26,  692.
        1220    initial_readtable        lisp_reader_alm_:   719,  844,  878.
          16    in_pl1_code              lisp_reader_alm_:   130,  141,  374,  386,
                                         lisp_stack_seg:      13.
          10    iochan.aclinfop          lisp_iochan:   14.
        2000    iochan.charmode          lisp_reader_alm_:   319,
                                         lisp_iochan:   27.
          13    iochan.charpos           lisp_reader_alm_:   308,  429,  469,  478,  514,  516,  520,  524,  528,  556,  562,
                                                             571,  572,  728,  740,
                                         lisp_iochan:   16.
          12    iochan.component         lisp_iochan:   15.
          35    iochan.End               lisp_iochan:   40.
        1000    iochan.extra_nl_done     lisp_reader_alm_:   312,
                                         lisp_iochan:   28.
           6    iochan.fcbp              lisp_iochan:   13.
         400    iochan.fixnum_mode       lisp_iochan:   29.
          15    iochan.flags             lisp_reader_alm_:   303,  313,  316,  345,  402,  411,  471,  484,
                                         lisp_iochan:   18.
          16    iochan.function          lisp_reader_alm_:   487,
                                         lisp_iochan:   34.
       40000    iochan.gc_mark           lisp_iochan:   22.
         200    iochan.image_mode        lisp_reader_alm_:   304,
                                         lisp_iochan:   30.
       20000    iochan.interactive       lisp_reader_alm_:   321,  485,
                                         lisp_iochan:   23.
           0    iochan.ioindex           lisp_reader_alm_:    61,   73,  170,  328,  407,  414,  422,  683,  705,
                                         lisp_iochan:    9.
           1    iochan.iolength          lisp_reader_alm_:    60,  408,  684,
                                         lisp_iochan:   10.
           2    iochan.ioptr             lisp_reader_alm_:   418,  709,
                                         lisp_iochan:   11.
          14    iochan.linel             lisp_reader_alm_:   306,  555,  559,  566,  567,
                                         lisp_iochan:   17.
          33    iochan.linenum           lisp_reader_alm_:   472,  475,  479,  581,  582,  729,  732,  734,  741,
                                         lisp_iochan:   38.
       10000    iochan.must_reopen       lisp_iochan:   25.
          22    iochan.name              lisp_iochan:   36.
          20    iochan.namelist          lisp_iochan:   35.
        4000    iochan.nlsync            lisp_reader_alm_:   323,  470,
                                         lisp_iochan:   26.
          32    iochan.pagel             lisp_reader_alm_:   473,  576,  577,  730,
                                         lisp_iochan:   37.
          34    iochan.pagenum           lisp_reader_alm_:   480,  586,  587,  735,  742,
                                         lisp_iochan:   39.
      200000    iochan.read              lisp_iochan:   20.
      400000    iochan.seg               lisp_reader_alm_:   317,
                                         lisp_iochan:   19.
           4    iochan.thread            lisp_iochan:   12.
      100000    iochan.write             lisp_reader_alm_:   326,
                                         lisp_iochan:   21.
          46    iogbind_op               lisp_stack_seg:      29.
         226    io_wrong_direction       lisp_error_codes:    54.
         341    ipop                     lisp_reader_alm_:   364,  379.
         332    ipush                    lisp_reader_alm_:   337,  372.
         150    irest_return_op          lisp_stack_seg:      62.
         760    left_shift               lisp_reader_alm_:    17,  751.
         562    linel                    lisp_reader_alm_:   546,  564,  565.
         576    linenum                  lisp_reader_alm_:   546,  579,  580.
         110    link_opr                 lisp_stack_seg:      46.
                lisp_                    lisp_reader_alm_:   504.
         215    lisp_error_              lisp_reader_alm_:   271,  275,  276.
                lisp_io_control_         lisp_reader_alm_:   348,  359.
                lisp_io_fns_             lisp_reader_alm_:   549,  565,  570,  575,  580,  585.
                lisp_print_              lisp_reader_alm_:   107.
       77700    lisp_ptr.type            lisp_reader_alm_:   236,  251,
                                         lisp_object_types:   13.
                lisp_reader_             lisp_reader_alm_:    93,   97,  101,  104.
                lisp_static_vars_        lisp_reader_alm_:    25,   26,  128,  129,  135,  139,  140,  353,  372,  373,  380,
                                                             384,  385,  613,  692.
           0    listen                   lisp_reader_alm_:    58,   59.
           0    lparn                    lisp_reader_alm_:   857,  920, 1009.
           0    macro                    lisp_reader_alm_:   860,  919,  939, 1004.
           0    marked_stack_bottom      lisp_stack_seg:       6.
         210    mismatch_super_parens    lisp_error_codes:    40.
          74    ncons_op                 lisp_stack_seg:      40.
         200    nihil_ex_nihile          lisp_error_codes:    36.
          12    nil                      lisp_reader_alm_:   190,  220,  227,  261,  355,  488,  594,  638,  671,  678,
                                         lisp_stack_seg:      11.
          12    NL                       lisp_reader_alm_:    23,  293,  310,  723.
         157    nonfixedarg              lisp_error_codes:    19.
         234    not_alpha_array          lisp_error_codes:    60.
         233    not_an_array             lisp_error_codes:    59.
      210400    not_ok_to_read           lisp_iochan:   31.
      110400    not_ok_to_write          lisp_reader_alm_:   346,  403,
                                         lisp_iochan:   32.
         203    not_pdl_ptr              lisp_error_codes:    37.
         245    not_same_type            lisp_error_codes:    69.
         211    no_left_super_paren      lisp_error_codes:    41.
         172    no_lexpr                 lisp_error_codes:    30.
       61400    Numeric                  lisp_object_types:   17.
           5    Obarray_array            lisp_reader_alm_:   185,
                                         lisp_array_fmt:      19.
                obarray                  lisp_reader_alm_:    25,  179,  182.
                outfiles                 lisp_reader_alm_:    26,  229.
         145    output_char              lisp_reader_alm_:   216.
         207    overflow_err             lisp_error_codes:    39.
         572    pagel                    lisp_reader_alm_:   546,  574,  575.
         602    pagenum                  lisp_reader_alm_:   546,  584,  585.
         160    parenmissing             lisp_error_codes:    20.
         554    pick_up_chrct            lisp_reader_alm_:   550,  554.
         152    pl1_call_nopop_op        lisp_stack_seg:      63.
         134    pl1_call_op              lisp_stack_seg:      56.
          66    pl1_interface            lisp_stack_seg:      37.
          70    pl1_lsubr_interface      lisp_stack_seg:      38.
       10000    plus_minus               lisp_reader_alm_:   870,  923,  925.
         622    popaj                    lisp_reader_alm_:   605,  650.
         322    popret                   lisp_reader_alm_:   351,  361.
         766    powers_of_ten            lisp_reader_alm_:    15,  763.
         606    process_file_arg         lisp_reader_alm_:   548,  564,  569,  574,  579,  584,  590.
         636    process_file_arg_2       lisp_reader_alm_:   592,  633.
         655    process_file_arg_2_nil   lisp_reader_alm_:   639,  641,  652.
         650    process_file_arg_3       lisp_reader_alm_:   645,  654.
         631    process_file_arg_err     lisp_reader_alm_:   599,  618,  635,  643,  648.
         624    process_file_arg_nil     lisp_reader_alm_:   595,  597,  608.
         620    process_file_arg_nil_a   lisp_reader_alm_:   601,  610.
        1171    push_offset              stack_header:        81.
         556    put_down_chrct           lisp_reader_alm_:   551,  558.
         327    q1qb                     lisp_reader_alm_:   341,  367.
         540    qls                      lisp_reader_alm_:   420,  534.
         213    quoterror                lisp_error_codes:    43.
         154    rcv_char_star_op         lisp_stack_seg:      64.
         715    rdinch                   lisp_reader_alm_:    72,   85,  165,  705.
                rdr_state                lisp_reader_alm_:    25,  662.
         106    readch                   lisp_reader_alm_:    17,  163.
                readtable                lisp_reader_alm_:    26,  299.
           4    Readtable_array          lisp_array_fmt:      18.
                read_print_nl_sync       lisp_reader_alm_:    25,  291,  297.
          33    real_ascii               lisp_reader_alm_:   102,  152.
          31    real_readch              lisp_reader_alm_:    99,  101,  163.
          25    real_tyi                 lisp_reader_alm_:    70,   92,   93.
          27    real_tyipeek             lisp_reader_alm_:    80,   95,   97,  714.
          35    real_tyo                 lisp_reader_alm_:   106,  199.
         230    reopen_inconsistent      lisp_error_codes:    56.
        1173    return_no_pop_offset     stack_header:        83.
        1172    return_offset            stack_header:        82.
          62    return_op                lisp_reader_alm_:    65,   77,   87,  123,  160,  171,  257,
                                         lisp_stack_seg:      35.
           0    rparn                    lisp_reader_alm_:   859,  921, 1010.
           0    rubout                   lisp_reader_alm_:   862.
          32    save_bp                  lisp_reader_alm_:    21,  338,  339,  379.
         657    set_inp                  lisp_reader_alm_:    71,   84,  164,  662.
         701    set_inp_aa               lisp_reader_alm_:   682,  690,  697.
         700    set_inp_tty              lisp_reader_alm_:   672,  674,  680,  694.
         754    shifts                   lisp_reader_alm_:   710,  745.
       20000    shift_scale              lisp_reader_alm_:   869,  974,  975.
         164    shortreadlist            lisp_error_codes:    24.
          56    signp_op                 lisp_stack_seg:      33.
           0    single_char_object       lisp_reader_alm_:   855.
           0    slashifier               lisp_reader_alm_:   861,  927, 1008.
      400000    slash_if_first           lisp_reader_alm_:   863,  923,  925,  928,  929,  930,  931,  932,  933,  934,  935,
                                                             936,  937.
      100000    slash_if_not_first       lisp_reader_alm_:   865.
      500000    slash_output             lisp_reader_alm_:   866,  880,  881,  882,  883,  884,  885,  886,  887,  889,  890,
                                                             891,  892,  893,  894,  895,  896,  897,  898,  899,  900,  901,
                                                             902,  903,  904,  905,  906,  908,  909,  910,  911,  912,  914,
                                                             919,  920,  921,  924,  926,  927,  939, 1004, 1007, 1008, 1009,
                                                            1010, 1011.
         705    spchan                   lisp_reader_alm_:   670,  689.
           0    special                  lisp_reader_alm_:   854,  880,  881,  882,  883,  884,  885,  886,  887,  889,  890,
                                                             891,  892,  893,  894,  895,  896,  897,  898,  899,  900,  901,
                                                             902,  903,  904,  905,  906,  908,  909,  910,  911,  912,  914,
                                                             919,  920,  921,  924,  926,  927,  939, 1004, 1007, 1008, 1009,
                                                            1010, 1011.
         246    special_array_type       lisp_error_codes:    70.
       40000    splice                   lisp_reader_alm_:   868,  939.
          73    stach_header.trace_top_ptr     stack_header:        62.
          66    stack_header.assign_linkage_ptr      stack_header:        59.
          32    stack_header.bar_mode_sp       stack_header:        42.
          36    stack_header.call_op_ptr       stack_header:        44.
          10    stack_header.clr_ptr     stack_header:        27.
           6    stack_header.combined_stat_ptr       stack_header:        25.
           4    stack_header.cpm_data_ptr      stack_header:        24.
          13    stack_header.cpm_enabled       stack_header:        32.
          13    stack_header.cur_lot_size      stack_header:        31.
          64    stack_header.ect_ptr     stack_header:        58.
          46    stack_header.entry_op_ptr      stack_header:        49.
          70    stack_header.heap_header_ptr   stack_header:        60.
          74    stack_header.in_trace    stack_header:        63.
          52    stack_header.isot_ptr    stack_header:        52.
          26    stack_header.lot_ptr     stack_header:        39.
          12    stack_header.main_proc_invoked       stack_header:        29.
          12    stack_header.max_lot_size      stack_header:        28.
          20    stack_header.parent_ptr  stack_header:        36.
          34    stack_header.pl1_operators_ptr       stack_header:        43.
          40    stack_header.push_op_ptr       stack_header:        46.
          42    stack_header.return_op_ptr     stack_header:        47.
          44    stack_header.ret_no_pop_op_ptr       stack_header:        48.
          62    stack_header.rnt_ptr     stack_header:        57.
          12    stack_header.run_unit_depth    stack_header:        30.
          54    stack_header.sct_ptr     stack_header:        53.
          30    stack_header.signal_ptr  stack_header:        41.
          22    stack_header.stack_begin_ptr   stack_header:        37.
          24    stack_header.stack_end_ptr     lisp_reader_alm_:   137,  382,
                                               stack_header:        38.
          14    stack_header.system_free_ptr   stack_header:        33.
          60    stack_header.sys_link_info_ptr       stack_header:        56.
          72    stack_header.trace_frames      stack_header:        61.
          50    stack_header.trans_op_tv_ptr   stack_header:        51.
          56    stack_header.unwinder_ptr      stack_header:        54.
          16    stack_header.user_free_ptr     stack_header:        34.
         100    stack_header_end         stack_header:        64.
         236    stack_loss_error         lisp_error_codes:    62.
                stack_ptr                lisp_reader_alm_:   128,  140,  353,  372,  385.
           4    stack_ptr_ptr            lisp_stack_seg:       8.
         225    stars_left_in_name       lisp_error_codes:    53.
         450    status_terpri            lisp_reader_alm_:    27,  301.
         544    stbq                     lisp_reader_alm_:   421,  539.
         251    store_function_misused   lisp_error_codes:    73.
         242    store_not_allowed        lisp_error_codes:    66.
         116    store_operator           lisp_stack_seg:      49.
        4000    String                   lisp_object_types:   22.
           0    string_quote_exp         lisp_reader_alm_:   853,  914,  949,  981.
        2000    Subr                     lisp_object_types:   23.
          44    system_lp                lisp_reader_alm_:   502,  614,  629,
                                         lisp_stack_seg:      28.
         400    System_Subr              lisp_object_types:   24.
           0    S_expr_array             lisp_array_fmt:      14.
          60    temp                     lisp_reader_alm_:    20,  343,  350,  363.
         104    terminate_list_op        lisp_stack_seg:      44.
         330    three_args               lisp_reader_alm_:   369,  389.
          52    throw1_op                lisp_stack_seg:      31.
          54    throw2_op                lisp_stack_seg:      32.
         156    throw_to_no_catch        lisp_error_codes:    18.
         147    too_few_args             lisp_error_codes:    11.
         146    too_many_args            lisp_error_codes:    10.
         367    to_anyplace              lisp_reader_alm_:   282,  295,  311,  401.
         401    to_anyplace_aa           lisp_reader_alm_:   399,  413.
         364    to_any_ch_code           lisp_reader_alm_:   396,  406.
         177    to_file                  lisp_reader_alm_:   239,  246,  260,  274.
         216    to_file_ok               lisp_reader_alm_:   266,  278.
         165    to_list                  lisp_reader_alm_:   237,  244,  252.
         171    to_list_join             lisp_reader_alm_:   230,  249.
         163    to_one                   lisp_reader_alm_:   238.
         223    to_tty                   lisp_reader_alm_:   222,  262,  264,  286.
           0    trace_frames.count       stack_header:        69.
           1    trace_frames.top_ptr     stack_header:        70.
          14    true                     lisp_reader_alm_:   255,  263,  596,  640,  673,
                                         lisp_stack_seg:      12.
                tty_input_chan           lisp_reader_alm_:    25,   59,  681.
                tty_output_chan          lisp_reader_alm_:    25,  290,  613.
          10    tty_output_chan_l        lisp_reader_alm_:   613,  615.
         551    tv_offset                stack_header:        75,   80,   81,   82,   83,   84.
           7    tyi                      lisp_reader_alm_:    17,   70.
          16    tyipeek                  lisp_reader_alm_:    17,   80.
                tyo                      lisp_reader_alm_:   107.
         160    tyo.3                    lisp_reader_alm_:   218,  234.
         174    tyo.5                    lisp_reader_alm_:   228,  240,  254.
         135    tyo_alm                  lisp_reader_alm_:    17,  199.
         523    tyo_backspace            lisp_reader_alm_:   442,  512.
         536    tyo_car_ret              lisp_reader_alm_:   447,  527.
         420    tyo_control_table        lisp_reader_alm_:   426,  433.
         460    tyo_newline              lisp_reader_alm_:   444,  468.
         470    tyo_newpage              lisp_reader_alm_:   446,  477.
         235    tyo_nl_maybe             lisp_reader_alm_:   283,  298.
         530    tyo_tab                  lisp_reader_alm_:   443,  519.
          60    type_fields              lisp_stack_seg:      34.
         217    unable_to_float          lisp_error_codes:    47.
          22    unbind_op                lisp_stack_seg:      18.
          40    uncatch_op               lisp_stack_seg:      25.
       60000    Uncollectable            lisp_object_types:   21.
         144    undefined_atom           lisp_error_codes:     8.
         145    undefined_function       lisp_error_codes:     9.
         152    undefined_subr           lisp_error_codes:    14.
         237    underflow_fault          lisp_error_codes:    63.
          30    unerrset_op              lisp_stack_seg:      21.
       67500    Unevalable               lisp_object_types:   27.
                unmkd_ptr                lisp_reader_alm_:   129,  135,  139,  373,  380,  384.
           6    unmkd_ptr_ptr            lisp_stack_seg:       9.
           2    unmkd_stack_bottom       lisp_stack_seg:       7.
         155    unseen_go_tag            lisp_error_codes:    17.
          50    unseen_go_tag_op         lisp_stack_seg:      30.
         146    ununwp_op                lisp_stack_seg:      61.
         142    unwp1_op                 lisp_stack_seg:      59.
         144    unwp2_op                 lisp_stack_seg:      60.
           1    Un_gc_array              lisp_array_fmt:      15.
         707    uread                    lisp_reader_alm_:   679,  692.
           0    vertical_motion          lisp_reader_alm_:   852,  890,  892.
         746    vm01                     lisp_reader_alm_:   724,  738.
         173    wrong_no_args            lisp_error_codes:    31.
          76    xcons_op                 lisp_stack_seg:      41.
         240    zerodivide_fault         lisp_error_codes:    64.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
