	COMPILATION LISTING OF SEGMENT apl_pendant_function_check_
	Compiled by: Multics PL/I Compiler, Release 28d, of October 4, 1983
	Compiled at: Honeywell LCPD Phoenix, System M
	Compiled on: 11/29/83  1613.4 mst Tue
	    Options: optimize map

        1 /* ******************************************************
        2*   *                                                    *
        3*   *                                                    *
        4*   * Copyright (c) 1972 by Massachusetts Institute of   *
        5*   * Technology and Honeywell Information Systems, Inc. *
        6*   *                                                    *
        7*   *                                                    *
        8*   ****************************************************** */
        9 
       10 /* Program to see if a specified function is pendent on the parse stack.
       11*   Written 731006 by DAM
       12*   Modified 740910 by PG for installation
       13**/
       14 
       15 apl_pendant_function_check_:
       16 	procedure (fbp) returns (bit (1) aligned);
       17 
       18 /* parameters */
       19 
       20 dcl 1 fbp aligned structure parameter,		/* mismatch for aligned packed pointer */
       21     2 function_bead_to_check unaligned pointer;
       22 
       23 /* automatic */
       24 
       25 dcl parse_frame_ptr unaligned pointer;
       26 
       27 /* builtin */
       28 
       29 dcl null builtin;
       30 
       31 /* program */
       32 
       33 /* this procedure returns "1"b if the specified function is pendant */
       34 
       35 	do parse_frame_ptr = current_parse_frame_ptr repeat parse_frame.last_parse_frame_ptr
       36 	     while (parse_frame_ptr ^= null);
       37 
       38 	     if parse_frame_type = function_frame_type
       39 	     then if parse_frame.function_bead_ptr = function_bead_to_check
       40 		then return("1"b);		/* pendant (or suspended), this routine wants to treat them identically
       41*					   since only smart routines like the editor can handle suspended
       42*					   functions and SI damage. */
       43 	end;
       44 
       45 	return("0"b);				/* not found in stack so is not pendant */
       46 
       47 /* include files */
       48 
  1     1 /* ====== BEGIN INCLUDE SEGMENT	apl_parse_frame.incl.pl1 ================================== */
  1     2 
  1     3 declare	1 parse_frame		aligned based (parse_frame_ptr),
  1     4 	  2 last_parse_frame_ptr	ptr unaligned,	/* pointer to last parse frame, or null */
  1     5 	  2 parse_frame_type	fixed bin,	/* suspended, function, eval input, etc. */
  1     6 	  2 function_bead_ptr	ptr unaligned,	/* ptr to function bead */
  1     7 	  2 lexed_function_bead_ptr	ptr unaligned,	/* ptr to lexed function bead */
  1     8 	  2 reduction_stack_ptr	ptr unaligned,	/* ptr to reduction stack for this frame */
  1     9 	  2 current_parseme		fixed bin,	/* element of reduction stack that is top of stack */
  1    10 	  2 current_lexeme		fixed bin,	/* element number of current lexeme */
  1    11 	  2 current_line_number	fixed bin,	/* line number being executed */
  1    12 	  2 return_point		fixed bin,	/* where to join the reductions on return */
  1    13 	  2 put_result		fixed bin,	/* where to put the value when returning to this frame */
  1    14 	  2 print_final_value	bit(1) aligned,	/* if true, print final value on line */
  1    15 	  2 initial_value_stack_ptr	ptr unaligned,	/* for cleaning up the value stack */
  1    16 	  2 number_of_ptrs		fixed bin,	/* number of old meaning ptrs */
  1    17 	  2 old_meaning_ptrs	dim (number_of_ptrs refer (parse_frame.number_of_ptrs)) ptr unaligned;
  1    18 						/* old meanings for local variables. */
  1    19 
  1    20 declare	number_of_ptrs fixed bin;
  1    21 
  1    22 declare	(suspended_frame_type init (1),		/* for comparison with parse frame type */
  1    23 	function_frame_type init (2),
  1    24 	evaluated_frame_type init (3),
  1    25 	execute_frame_type init (4),
  1    26 	save_frame_type init (5)
  1    27 	) fixed bin internal static options (constant);
  1    28 
  1    29 declare	reductions_pointer pointer;
  1    30 
  1    31 declare
  1    32 	1 reduction_stack		aligned dim (1000) based (reductions_pointer),
  1    33 	  2 type			fixed bin,	/* type of parseme */
  1    34 	  2 bits			unaligned like operator_bead.bits_for_parse,
  1    35 	  2 semantics		ptr unaligned,
  1    36 	  2 lexeme		fixed bin,
  1    37 
  1    38 	1 reduction_stack_for_op	aligned dim (1000) based (reductions_pointer),
  1    39 	  2 type			fixed bin,
  1    40 	  2 bits			unaligned like operator_bead.bits_for_parse,
  1    41 	  2 semantics		fixed bin,
  1    42 	  2 lexeme		fixed bin,
  1    43 
  1    44 	(eol_type init(0),					/* parseme types - end of line */
  1    45 	bol_type init(1),					/* begining of line */
  1    46 	val_type init(2),					/* value */
  1    47 	op_type init(3),					/* op */
  1    48 	open_paren_type init(4),
  1    49 	close_paren_type init(5),
  1    50 	open_bracket_type init(6),
  1    51 	close_subscript_type init(7),
  1    52 	close_rank_type init(8),
  1    53 	semi_colon_type init(9),
  1    54 	diamond_type init (10),
  1    55 	subscript_type init (11)) fixed bin internal static options (constant);
  1    56 
  1    57 /* ------ END INCLUDE SEGMENT		apl_parse_frame.incl.pl1 ---------------------------------- */
       49 
  2     1 /* ====== BEGIN INCLUDE SEGMENT	apl_ws_info.incl.pl1 ====================================== */
  2     2 
  2     3 /* This structure contains all of the global data (or pointers to it) for the APL subsystem */
  2     4 
  2     5 /* automatic */
  2     6 
  2     7 declare	ws_info_ptr ptr initial (apl_static_$ws_info_ptr.static_ws_info_ptr);
  2     8 
  2     9 /* external static */
  2    10 
  2    11 declare	1 apl_static_$ws_info_ptr	external static aligned structure,
  2    12 	  2 static_ws_info_ptr	unaligned pointer;
  2    13 
  2    14 /* based */
  2    15 
  2    16 declare	1 ws_info			aligned based (ws_info_ptr),
  2    17 	  2 version_number		fixed bin,	/* version of this structure (3) */
  2    18 	  2 switches		unaligned,	/* mainly ws parameters */
  2    19 	    3 long_error_mode	bit,		/* if 1, long Multics format, else APL/360 format */
  2    20 	    3 debug_mode		bit,		/* if 1, system error causes escape to command level */
  2    21 	    3 canonicalize_mode	bit,		/* if 1, the editor canonicalizes user input */
  2    22 	    3 restrict_exec_command	bit,		/* if 1, the )EXEC command may not be used */
  2    23 	    3 restrict_debug_command	bit,		/* if 1, the )DEBUG command may not be used */
  2    24 	    3 restrict_external_functions
  2    25 				bit,		/* if 1, the )ZFN, )MFN, and )DFN commands may not be used */
  2    26 	    3 restrict_load		bit,		/* if 1, the )LOAD and )COPY commands may not be used */
  2    27 	    3 restrict_load_directory	bit,		/* if 1, no directory allowed in )LOAD or )COPY pathnames */
  2    28 	    3 restrict_save		bit,		/* if 1, the )SAVE command may not be used */
  2    29 	    3 restrict_save_directory	bit,		/* if 1, no directory allowed in )SAVE pathnames */
  2    30 	    3 off_hold		bit,		/* if 1, )OFF HOLD was typed, else just )OFF */
  2    31 	    3 transparent_to_signals	bit,		/* if 1, any conditions slip right past APL */
  2    32 	    3 meter_mode		bit,		/* if 1, metering may be done, else speed is all-important */
  2    33 	    3 restrict_msg_command	bit,		/* if 1, the )MSG command may not be used. */
  2    34 	    3 compatibility_check_mode
  2    35 				bit,		/* if 1, check for incompatible operators */
  2    36 	    3 no_quit_handler	bit,		/* if 1, do not trap QUITs. */
  2    37 						/* remaining 20 bits not presently used */
  2    38 
  2    39 	  2 values,				/* attributes of the workspace */
  2    40 	    3 digits		fixed bin,	/* number of digits of precision printed on output */
  2    41 	    3 width		fixed bin,	/* line length for formatted output */
  2    42 	    3 index_origin		fixed bin,	/* the index origin (0 or 1) */
  2    43 	    3 random_link		fixed bin(35),	/* seed for random number generator */
  2    44 	    3 fuzz		float,		/* comparison tolerance (relative fuzz) */
  2    45 	    3 float_index_origin	float,		/* the index origin	in floating point */
  2    46 	    3 number_of_symbols	fixed bin,	/* the number of symbol_beads currently in existence */
  2    47 	    3 maximum_value_stack_size
  2    48 				fixed bin (18),	/* maximum number of words in one segment of value stack */
  2    49 
  2    50 	  2 pointers,				/* pointers to various internal tables */
  2    51 	    3 symbol_table_ptr	unaligned pointer,	/* -> symbol_table (apl_symbol_table.incl.pl1) */
  2    52 	    3 current_parse_frame_ptr	unaligned pointer,	/* -> topmost parse frame */
  2    53 	    3 value_stack_ptr	unaligned pointer,	/* -> next free location on value stack */
  2    54 	    3 alloc_free_info_ptr	unaligned pointer,	/* -> apl_storage_mngr_ data (apl_storage_system_data.incl.pl1) */
  2    55 
  2    56 	  2 time_invoked		fixed bin(71),	/* clock time that APL was entered */
  2    57 	  2 integer_fuzz		float,		/* the absolute fuzz used in checking for integers */
  2    58 	  2 user_number		fixed bin(35),	/* number under which the user is signed on */
  2    59 	  2 latent_expression	unaligned pointer,	/* -> value_bead for QuadLX */
  2    60 	  2 lock			char(32),		/* the lock currently set on this workspace (password) */
  2    61 	  2 wsid			char(100),	/* the workspace identification: name, number name, or clear ws */
  2    62 	  2 last_error_code		fixed bin(35),	/* last code passed to apl_error_ */
  2    63 	  2 signoff_lock		character (32),
  2    64 
  2    65 	  2 interrupt_info		aligned,		/* bits used by apl_interpreter_ to tell when to abort */
  2    66 	    3 dont_interrupt_parse	bit,		/* if 1, don't do a dirty stop because the parser is running */
  2    67 	    3 dont_interrupt_operator	bit,		/* if 1, don't do a dirty stop because an operator is running */
  2    68 	    3 dont_interrupt_storage_manager		/* if 1, don't stop because apl_storage_mngr_ is */
  2    69 				bit,		/*       munging his tables */
  2    70 	    3 unused_interrupt_bit	bit,		/* not presently used */
  2    71 	    3 dont_interrupt_command	bit,
  2    72 	    3 can_be_interrupted	bit,		/* if 1, OK to do a clean stop (we are between lines, reading) */
  2    73 	    3 clean_interrupt_pending	bit,		/* interrupt occured, break cleanly (between lines) */
  2    74 	    3 dirty_interrupt_pending	bit,		/* interrupt occured, break as soon as not inhibited */
  2    75 
  2    76 	  2 user_name		char (32),	/* process group id of user */
  2    77 	  2 immediate_input_prompt	char (32) varying,	/* normal input */
  2    78 	  2 evaluated_input_prompt	char (32) varying,	/* quad input */
  2    79 	  2 character_input_prompt	char (32) varying,	/* quad-quote input */
  2    80 	  2 vcpu_time		aligned,
  2    81 	    3 total		fixed bin (71),
  2    82 	    3 setup		fixed bin (71),
  2    83 	    3 parse		fixed bin (71),
  2    84 	    3 lex			fixed bin (71),
  2    85 	    3 operator		fixed bin (71),
  2    86 	    3 storage_manager	fixed bin (71),
  2    87 	  2 output_info		aligned,		/* data pertaining to output buffer */
  2    88 	    3 output_buffer_ptr	unal ptr,		/* ptr to output buffer */
  2    89 	    3 output_buffer_len	fixed bin (21),	/* length (bytes) of output buffer */
  2    90 	    3 output_buffer_pos	fixed bin (21),	/* index of next byte to write in */
  2    91 	    3 output_buffer_ll	fixed bin (21),	/* print positions used up so far */
  2    92 	  2 tab_width		fixed bin (21);	/* number of columns a tabs moves cursor */
  2    93 
  2    94 declare	output_buffer char (ws_info.output_buffer_len) based (ws_info.output_buffer_ptr);
  2    95 
  2    96 /* internal static */
  2    97 
  2    98 declare	max_parse_stack_depth fixed bin int static init(64536);
  2    99 
  2   100 /* ------ END INCLUDE SEGMENT		apl_ws_info.incl.pl1 -------------------------------------- */
       50 
  3     1 /* ====== BEGIN INCLUDE SEGMENT	apl_number_data.incl.pl1 ================================== */
  3     2 
  3     3 /*
  3     4*   This include file contains information about the machine representation of numbers.
  3     5*   In all programs numbers should simply be declared 'float'.
  3     6*   All default statements should be in this include file.
  3     7*
  3     8*   This is the binary version.  The manifest constant Binary should be used by programs
  3     9*   that need to know whether we are using binary or decimal.
  3    10* */
  3    11 
  3    12 /* format: style3,initlm0,idind30 */
  3    13 
  3    14 default (float & ^decimal & ^binary & ^precision & ^constant) float binary (63);
  3    15 
  3    16 declare	(
  3    17 	TheBiggestNumberWeveGot	float initial (0.1701411834604692317e+39),
  3    18 	TheSmallestNumberWeveGot	float initial (.1469367938527859385e-38),
  3    19 	Binary			bit (1) aligned initial ("1"b)
  3    20 	)			internal static options (constant);
  3    21 
  3    22 /* Number of characters in a number datum entry; used for copying float number arrays as strings.
  3    23*   (Obsolete! use array copies!) */
  3    24 
  3    25 declare	NumberSize		fixed binary precision (4) internal static initial (8);
  3    26 
  3    27 /* ------ END INCLUDE SEGMENT		apl_number_data.incl.pl1 ---------------------------------- */
       51 
  4     1 /* ====== BEGIN INCLUDE SEGMENT	apl_bead_format.incl.pl1 ================================== */
  4     2 
  4     3 declare 1 general_bead  		aligned based,	/* The Venerable Bead		*/
  4     4 	2 type 			unaligned,
  4     5 	  3 bead_type		unaligned,
  4     6 	    4 operator		bit (1),		/* ON if operator bead		*/
  4     7 	    4 symbol		bit (1),		/* ON if symbol bead		*/
  4     8 	    4 value		bit (1),		/* ON if value bead			*/
  4     9 	    4 function		bit (1),		/* ON if function bead		*/
  4    10 	    4 group		bit (1),		/* ON if group bead			*/
  4    11 	    4 label		bit (1),		/* ON if label bead			*/
  4    12 	    4 shared_variable	bit (1),		/* ON if shared variable bead 	*/
  4    13 	    4 lexed_function	bit (1),		/* ON if lexed function bead  	*/
  4    14 	  3 data_type		unaligned,
  4    15 	    4 list_value		bit (1),		/* ON if a list value bead		*/
  4    16 	    4 character_value	bit (1),		/* ON if a character value bead	*/
  4    17 	    4 numeric_value		bit (1),		/* ON if a numeric value bead		*/
  4    18 	    4 integral_value	bit (1),		/* ON if an integral value bead	*/
  4    19 	    4 zero_or_one_value	bit (1),		/* ON if a boolean value bead		*/
  4    20 	    4 complex_value		bit (1),		/* ON if a complex, numeric value bead   */
  4    21 	  3 unused_bits		bit (4) unaligned,	/* pad to 18 bits (for future use)	*/
  4    22 	2 size			bit (18) unaligned,	/* Number of words this bead occupies
  4    23*						   (used by bead storage manager)	*/
  4    24 	2 reference_count 		fixed binary (29);	/* Number of pointers which point
  4    25*						   to this bead (used by bead manager)	*/
  4    26 
  4    27 
  4    28 /* constant strings for initing type field in various beads */
  4    29 
  4    30 declare (
  4    31 	operator_type		init("100000000000000000"b),
  4    32 	symbol_type		init("010000000000000000"b),
  4    33     	value_type		init("001000000000000000"b),
  4    34 	function_type		init("000100000000000000"b),
  4    35 	group_type		init("000010000000000000"b),
  4    36 	label_type		init("001001000011000000"b),
  4    37 	shared_variable_type	init("001000100000000000"b),
  4    38 	lexed_function_type		init("000000010000000000"b),
  4    39 
  4    40 	list_value_type		init("000000001000000000"b),
  4    41 	character_value_type 	init("001000000100000000"b),
  4    42 	numeric_value_type		init("001000000010000000"b),
  4    43 	integral_value_type		init("001000000011000000"b),
  4    44 	zero_or_one_value_type	init("001000000011100000"b),
  4    45 	complex_value_type		init("001000000000010000"b),
  4    46 
  4    47 	not_integer_mask		init("111111111110011111"b),		/* to clear integral, zero_or_one bits */
  4    48 	not_zero_or_one_mask	init("111111111111011111"b)		/* to clear zero_or_one bit */
  4    49         ) bit(18) internal static;
  4    50 
  4    51 /* ------ END INCLUDE SEGMENT		apl_bead_format.incl.pl1 ---------------------------------- */
       52 
  5     1 /* ====== BEGIN INCLUDE SEGMENT	apl_operator_bead.incl.pl1 ================================ */
  5     2 
  5     3 declare
  5     4 	1 operator_bead		aligned based,
  5     5 
  5     6 	  2 type			unaligned like general_bead.type,
  5     7 
  5     8 	  2 bits_for_lex		unaligned,
  5     9 	    3 allow_brackets	bit(1),		/* operator may have dimension info in brackets */
  5    10 	    3 allow_product		bit(1),		/* operator may be used in inner and outer product */
  5    11 	    3 allow_reduction	bit(1),		/* operator may be used in reduction and scan */
  5    12 	    3 special_assignment	bit(1),		/* doesn't use standard assignment operator */
  5    13 	    3 ignores_assignment	bit(1),		/* assignment has no effect */
  5    14 	    3 allow_subscripted_assignment
  5    15 				bit(1),		/* system variable that can be subscripted assigned */
  5    16 	    3 pad			bit(12),
  5    17 
  5    18 	  2 bits_for_parse		unaligned,
  5    19 	    3 stop_trace_control	bit(1),		/* next lexeme is function being stopped/traced
  5    20*						   (op1 tells which) */
  5    21 	    3 quad		bit(1),		/* this is a quad type */
  5    22 	    3 system_variable	bit(1),		/* this is a system variable, not an op */
  5    23 	    3 dyadic		bit(1),		/* operator may be dyadic */
  5    24 	    3 monadic		bit(1),		/* operator may be monadic */
  5    25 	    3 function		bit(1),		/* operator is a user defined function */
  5    26 	    3 semantics_valid	bit(1),		/* if semantics has been set */
  5    27 	    3 has_list		bit(1),		/* semantics is a list */
  5    28 	    3 inner_product		bit(1),		/* op2 is valid */
  5    29 	    3 semantics_on_stack	bit(1),		/* semantics points to value stack */
  5    30 	    3 is_external_function	bit(1),		/* semantics points to function bead for ext function */
  5    31 	    3 pad			bit(7),
  5    32 	    3 op2			fixed bin(8) unaligned,	/* secondary operator code */
  5    33 	    3 op1			fixed bin(8) unaligned,	/* primary operator code */
  5    34 	  2 type_code		fixed bin;	/* for parse */
  5    35 
  5    36 /* ------ END INCLUDE SEGMENT		apl_operator_bead.incl.pl1 -------------------------------- */
       53 
       54 end;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/29/83  1346.9  apl_pendant_function_check_.pl1   >special_ldd>on>apl.1129>apl_pendant_function_check_.pl1
49           1    03/27/82  0439.0  apl_parse_frame.incl.pl1          >ldd>include>apl_parse_frame.incl.pl1
50           2    03/27/82  0439.2  apl_ws_info.incl.pl1              >ldd>include>apl_ws_info.incl.pl1
51           3    03/27/82  0429.8  apl_number_data.incl.pl1          >ldd>include>apl_number_data.incl.pl1
52           4    03/27/82  0438.5  apl_bead_format.incl.pl1          >ldd>include>apl_bead_format.incl.pl1
53           5    03/27/82  0439.0  apl_operator_bead.incl.pl1        >ldd>include>apl_operator_bead.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
apl_static_$ws_info_ptr         000010 external static structure                level 1 dcl 2-11
bits_for_parse            1            based           structure                level 2 packed unaligned dcl 5-3
current_parse_frame_ptr
                         15            based           pointer                  level 3 packed unaligned dcl 2-16 ref 35
fbp                                    parameter       structure                level 1 dcl 20 ref 15
function_bead_ptr         2            based           pointer                  level 2 packed unaligned dcl 1-3 ref 38
function_bead_to_check                 parameter       pointer                  level 2 packed unaligned dcl 20 ref 38
function_frame_type                    constant        fixed bin(17,0)          initial dcl 1-22 ref 38
general_bead                           based           structure                level 1 dcl 4-3
last_parse_frame_ptr                   based           pointer                  level 2 packed unaligned dcl 1-3 ref 43
null                                                   builtin function         dcl 29 ref 35
operator_bead                          based           structure                level 1 dcl 5-3
parse_frame                            based           structure                level 1 dcl 1-3
parse_frame_ptr                 000100 automatic       pointer                  unaligned dcl 25 set ref 35* 35* 38 38* 43
parse_frame_type          1            based           fixed bin(17,0)          level 2 dcl 1-3 ref 38
pointers                 14            based           structure                level 2 dcl 2-16
static_ws_info_ptr              000010 external static pointer                  level 2 packed unaligned dcl 2-11 ref 2-7
type                                   based           structure                level 2 packed unaligned dcl 4-3
ws_info                                based           structure                level 1 dcl 2-16
ws_info_ptr                     000102 automatic       pointer                  initial dcl 2-7 set ref 35 2-7*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
Binary                                 internal static bit(1)                   initial dcl 3-16
NumberSize                             internal static fixed bin(4,0)           initial dcl 3-25
TheBiggestNumberWeveGot                internal static float bin(63)            initial dcl 3-16
TheSmallestNumberWeveGot               internal static float bin(63)            initial dcl 3-16
bol_type                               internal static fixed bin(17,0)          initial dcl 1-31
character_value_type                   internal static bit(18)                  initial unaligned dcl 4-30
close_paren_type                       internal static fixed bin(17,0)          initial dcl 1-31
close_rank_type                        internal static fixed bin(17,0)          initial dcl 1-31
close_subscript_type                   internal static fixed bin(17,0)          initial dcl 1-31
complex_value_type                     internal static bit(18)                  initial unaligned dcl 4-30
diamond_type                           internal static fixed bin(17,0)          initial dcl 1-31
eol_type                               internal static fixed bin(17,0)          initial dcl 1-31
evaluated_frame_type                   internal static fixed bin(17,0)          initial dcl 1-22
execute_frame_type                     internal static fixed bin(17,0)          initial dcl 1-22
function_type                          internal static bit(18)                  initial unaligned dcl 4-30
group_type                             internal static bit(18)                  initial unaligned dcl 4-30
integral_value_type                    internal static bit(18)                  initial unaligned dcl 4-30
label_type                             internal static bit(18)                  initial unaligned dcl 4-30
lexed_function_type                    internal static bit(18)                  initial unaligned dcl 4-30
list_value_type                        internal static bit(18)                  initial unaligned dcl 4-30
max_parse_stack_depth                  internal static fixed bin(17,0)          initial dcl 2-98
not_integer_mask                       internal static bit(18)                  initial unaligned dcl 4-30
not_zero_or_one_mask                   internal static bit(18)                  initial unaligned dcl 4-30
number_of_ptrs                         automatic       fixed bin(17,0)          dcl 1-20
numeric_value_type                     internal static bit(18)                  initial unaligned dcl 4-30
op_type                                internal static fixed bin(17,0)          initial dcl 1-31
open_bracket_type                      internal static fixed bin(17,0)          initial dcl 1-31
open_paren_type                        internal static fixed bin(17,0)          initial dcl 1-31
operator_type                          internal static bit(18)                  initial unaligned dcl 4-30
output_buffer                          based           char                     unaligned dcl 2-94
reduction_stack                        based           structure                array level 1 dcl 1-31
reduction_stack_for_op                 based           structure                array level 1 dcl 1-31
reductions_pointer                     automatic       pointer                  dcl 1-29
save_frame_type                        internal static fixed bin(17,0)          initial dcl 1-22
semi_colon_type                        internal static fixed bin(17,0)          initial dcl 1-31
shared_variable_type                   internal static bit(18)                  initial unaligned dcl 4-30
subscript_type                         internal static fixed bin(17,0)          initial dcl 1-31
suspended_frame_type                   internal static fixed bin(17,0)          initial dcl 1-22
symbol_type                            internal static bit(18)                  initial unaligned dcl 4-30
val_type                               internal static fixed bin(17,0)          initial dcl 1-31
value_type                             internal static bit(18)                  initial unaligned dcl 4-30
zero_or_one_value_type                 internal static bit(18)                  initial unaligned dcl 4-30

NAME DECLARED BY EXPLICIT CONTEXT.
apl_pendant_function_check_     000012 constant        entry                    external dcl 15

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       114         126      52         124
Length       404      52        12         242      41           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
apl_pendant_function_check_          70 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
apl_pendant_function_check_
                         000100 parse_frame_ptr             apl_pendant_function_check_
                         000102 ws_info_ptr                 apl_pendant_function_check_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
return              ext_entry

NO EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
apl_static_$ws_info_ptr




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     15 000006    2    7 000017        35 000021        38 000027        43 000043        45 000046


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
