LISTING FOR  >spec>install>1136>concept100.ctl
COMPILED BY Multics LISP Compiler, Version 2.13c, July 11, 1983
ON 08/20/86  2256.5 mst Wed
IN BEHALF OF Martinson.SysMaint.a



;;; ***********************************************************
;;; *                                                         *
;;; * Copyright, (C) Honeywell Information Systems Inc., 1982 *
;;; *                                                         *
;;; * Copyright (c) 1978 by Massachusetts Institute of        *
;;; * Technology and Honeywell Information Systems, Inc.      *
;;; *                                                         *
;;; ***********************************************************

;;;
;;; -*-LISP-*-

;;;
;;;        Concept 100 control package
;;;        DLW 3/12/79


;;; HISTORY COMMENTS:
;;;  1) change(86-04-23,Margolin), approve(86-04-23,MCR7325),
;;;     audit(86-08-12,Harvey), install(86-08-20,MR12.0-1136):
;;;     Added *expr declarations so that it would compile without warnings.
;;;                                                      END HISTORY COMMENTS

;;;


(%include e-macros)

(eval-when (compile) (setq ibase (+ 8 2)))

(declare (special
	X Y screenheight screenlinelen ospeed tty-type
	idel-lines-availablep
	idel-chars-availablep
	overstrike-availablep
	region-scroll-availablep
	c100-magic-constant		; Fudge factor for Concept 100 padding
	vmax
	))

(declare (*expr Rprinc Rtyo))

;;; Initialize terminal and terminal control package.
(defun DCTL-init ()
       (setq screenheight 24 screenlinelen 79)
       (setq idel-lines-availablep t idel-chars-availablep nil)
       (setq region-scroll-availablep t)
       (setq tty-type 'c100)
       (setq overstrike-availablep t)		; Underscore!
       (setq c100-magic-constant
	   (//$ 1.0 
	        (-$ 1.0 
		  (+$ .45 (*$ .3 (//$ (float ospeed) 960.0))))
	        1000.0))

       (Rtyo 27) (Rprinc "U")			; Set programmer mode.
       (Rtyo 27) (Rprinc "f")			; Set text mode.
       (Rtyo 27) (Rprinc "7")			; Set character mode.
       (Rtyo 27) (Rprinc "5")			; Set upper/lower case mode.
       (Rtyo 27) (Rprinc "8")			; Set full duplex.
       (Rtyo 27) (Rprinc "l")			; Reset auto-linefeed.
       (Rtyo 27) (Rprinc "N")			; Send set attribute word command.
       (Rtyo 72)				; Word is all 0 except protect = 1
					;     (no protection)
       (Rtyo 27) (Rprinc "o")			; Change EOM to null.
       (Rtyo 38) (Rtyo 0)			; ...
;      (Rtyo 27) (Rprinc "$")			; Reset all function keys.
       ;; Here program the function keys, if we ever want to use them.

       (DCTL-define-full-width-window 0 23)
       (DCTL-clear-screen)			; Clear and home.
       ;; Here we could set the tab stops but there is probably no reason.
       )

;;; Move terminal's cursor to desired position.
;;; This first implementation is really cheapo and only uses
;;;   absolute cursor positioning.
(defun DCTL-position-cursor (x y)
       (cond ((and (= x X) (= y Y))
	    nil)
	   ((and (= x 0) (= y 0))
	    ;; Home up.
	    (Rtyo 27) (Rprinc "?"))
	   ((= (+ (abs (- x X))
		(abs (- y Y)))
	       1)
	    ;; We are only one away, use relative positioning.
	    (cond ((= x X)
		 (cond ((< y Y)  (Rtyo 27) (Rprinc ";"))
		       (t        (Rtyo 27) (Rprinc "<"))))
		(t
		 (cond ((< x X)  (Rtyo 27) (Rprinc ">"))
		       (t        (Rtyo 27) (Rprinc "="))))))
	   (t
	    ;; Use absolute positioning.
	    (Rtyo 27) (Rprinc "a")
	    (Rtyo (+ 32 y)) (Rtyo (+ 32 x))))
       (setq X x Y y)
       nil)

;;; Output a string.
(defun DCTL-display-char-string (string)
       (setq X (+ X (stringlength string)))
       (Rprinc string))

;;; Home up and clear screen.
(defun DCTL-clear-screen ()
       (Rtyo 12)
       (DCTL-c100-pad 12.0)
       (setq Y 0 X 0))

;;; Clear to end of screen.
(defun DCTL-clear-rest-of-screen ()
       (if (and (= Y 0) (= X 0))
	 (DCTL-clear-screen)
        else
           (Rtyo 27) (Rtyo 5)
	 (DCTL-c100-pad (*$ 4.0 (float (- 24 Y))))))

;;; Clear to end of line.
(defun DCTL-kill-line ()
       (Rtyo 27) (Rtyo 21)
       (DCTL-c100-pad 4.0))

;;; Insert lines.
(defun DCTL-insert-lines (n)
       (do-times n
         (Rtyo 27) (Rtyo 18)
         (DCTL-c100-pad (*$ .75 (float (- vmax X))))))

;;; Delete lines.
(defun DCTL-delete-lines (n)
       (do-times n
         (Rtyo 27) (Rtyo 2)
         (DCTL-c100-pad (*$ .75 (float (- vmax X))))))

(defun DCTL-define-full-width-window (top bottom)
       (Rtyo 27)
       (Rprinc "v")
       (Rtyo (+ top 32))
       (Rtyo 32)
       (Rtyo (+ (- bottom top) 32 1))
       (Rtyo (+ 80 32))
       (setq Y top
	   X 0
	   vmax bottom))

;;; Move text in scroll region up n lines (inserts whitespace at bottom)
(defun DCTL-scroll-up-region (nlines bottom)
       (DCTL-define-full-width-window Y bottom)
       (DCTL-delete-lines nlines)
       (DCTL-define-full-width-window 0 23))

;;; Move text in scroll region down n lines (inserts whitespace at top)
(defun DCTL-scroll-down-region (nlines bottom)
       (DCTL-define-full-width-window Y bottom)
       (DCTL-insert-lines nlines)
       (DCTL-define-full-width-window 0 23))

;;; This takes a number of milliseconds, adjusts it by the
;;; magic constant, and sends the right number of pad characters.
(defun DCTL-c100-pad (a)
       (do-times (fix (*$ a c100-magic-constant (float ospeed)))
         (Rtyo 127)))

INCLUDE FILE >spec>install>1136>executable>e-macros.incl.lisp

;;; BEGIN INCLUDE FILE e-macros.incl.lisp

;;; Declares for use by Emacs programs and extenstions.  Also loads
;;; in e_macros_, which contains macro definitions.

;;; HISTORY COMMENTS:
;;;  1) change(85-01-01,Margolin), approve(86-02-24,MCR7186),
;;;     audit(86-08-12,Harvey), install(86-08-20,MR12.0-1136):
;;;     Written: New Year's Day 1985, by excerpting the old e-macros.incl.lisp
;;;     and leaving out all the definitions and qwerty junk (don't ask).
;;;  2) change(86-02-24,Margolin), approve(86-02-24,MCR7325),
;;;     audit(86-08-12,Harvey), install(86-08-20,MR12.0-1136):
;;;     Alphabetized declarations, and added more declarations for documented
;;;     functions, and also for some undocumented functions.
;;;                                                      END HISTORY COMMENTS

(%include backquote)

(declare					;basic editor stuff
  (*expr apply-catenate
         assert-minor-mode backward-char backward-n-chars charlisten
         charset-member command-abort command-quit
         copy-region cur-hpos curline-as-string curbuf-as-string curchar
         curline-as-string delete-char delete-word destroy-buffer-contents
         dont-notice-modified-buffer e_cline_ e_lap_$reverse-search-string
         e_lap_$trim empty-buffer-p error_table_ establish-local-var
         exchange-point-and-mark firstlinep forward-char forward-n-chars
         forward-regexp-search-in-line forward-search forward-search-in-line
         get-char get-search-string go-to-beginning-of-buffer
         go-to-beginning-of-line go-to-buffer go-to-end-of-buffer
         go-to-end-of-line go-to-hpos go-to-mark go-to-or-create-buffer
         insert-char insert-string kill-backwards-to-mark kill-forward-to-mark
         kill-pop kill-to-end-of-line killsave-string lastlinep loadfile
         looking-at lowercase map-over-emacs-commands mark-on-current-line-p
         mark-reached merge-kills-forward merge-kills-reverse move-mark
         minibuf-response minibuffer-clear
         negate-minor-mode new-line next-line nullstringp pathname_
         pathname_$component point-mark-to-string
         point>markp prev-line printable process-char produce-named-mark-list
         read-in-file release-mark reverse-search
         register-local-var reverse-search-in-line
         search-back-first-charset-line
         search-back-first-not-charset-line search-failure-annunciator
         search-for-first-charset-line search-for-first-not-charset-line
         set-emacs-epilogue-handler set-buffer-self-destruct set-key
         set-mark-here set-mark set-perm-key set-the-mark set-the-mark-here
         skip-to-whitespace skip-to-whitespace-in-line
         wipe-point-mark wipe-region write-out-file
         trim-minibuf-response yesp yank)
  (*fexpr define-autoload-lib))

(declare					;redisplay stuff
  (*expr end-local-displays init-local-displays ring-tty-bell
         local-display-generator local-display-generator-nnl
         next-screen prev-screen local-display-current-line
         find-buffer-in-window select-buffer-window window-info
         select-buffer-find-window select-other-window select-window
         buffer-on-display-in-window redisplay full-redisplay))

(declare					;extended stuff
  (*expr forward-word backward-word skip-over-whitespace skip-back-whitespace
         skip-over-whitespace-in-line skip-back-whitespace-in-line
         skip-back-to-whitespace skip-to-whitespace rubout-char date
         display-buffer-as-printout delete-white-sides lefthand-char
         format-to-col whitespace-to-hpos line-is-blank decimal-rep
         register-option minibuffer-clear))

(declare (*lexpr display-error display-com-error display-error-noabort
	       display-error-remark comout-get-output
	       display-com-error-noabort minibuffer-print
	       minibuffer-response trim-minibuffer-response
	       intern-minibuffer-response minibuffer-remark
	       minibuffer-print-noclear report-error report-error-noabort))

(declare (special TAB NL SPACE ESC curpointpos current-buffer dont-stash
	        numarg der-wahrer-mark fpathname fill-column completion-list
	        curlinel BACKSPACE read-only-flag buffer-modified-flag
	        previous-buffer current-buffer-mode env-dir process-dir
	        minibuffer-end-string NLCHARSTRING undo null-pointer))

;;; Load in macro packages
(eval-when (eval compile)
  (or (status feature e-defcom)
      (progn (load (catenate (car (namelist (truename infile))) ">e_define_command_"))
	   (sstatus feature e-defcom)))
  (or (status feature e-macros)
      (load (catenate (car (namelist (truename infile))) ">e_macros_"))))

;;; END INCLUDE FILE e-macros.incl.lisp

INCLUDE FILE >ldd>include>backquote.incl.lisp

;;;
;;; backquote.incl.lisp - BSG 10/9/79
;;; Loads lisp_backquote_ into either the compiler or interpreter
;;; environment.
;;;
;;; Modified 10/30/82 by Richard Lamson to use eval-when and
;;;				   (status feature backquote)
;;;
(eval-when (eval compile)
  (or (status feature backquote)
      (load (catenate (car (namelist (truename infile))) ">lisp_backquote_"))))

			Functions Defined

Name			Offset		Offset		Name


DCTL-c100-pad                    1002		   0		DCTL-init
DCTL-clear-rest-of-screen        440		   212		DCTL-position-cursor
DCTL-clear-screen                414		   400		DCTL-display-char-string
DCTL-define-full-width-window    654		   414		DCTL-clear-screen
DCTL-delete-lines                604		   440		DCTL-clear-rest-of-screen
DCTL-display-char-string         400		   510		DCTL-kill-line
DCTL-init                        0		   534		DCTL-insert-lines
DCTL-insert-lines                534		   604		DCTL-delete-lines
DCTL-kill-line                   510		   654		DCTL-define-full-width-window
DCTL-position-cursor             212		   732		DCTL-scroll-up-region
DCTL-scroll-down-region          756		   756		DCTL-scroll-down-region
DCTL-scroll-up-region            732		   1002		DCTL-c100-pad





			Functions Referenced

DCTL-c100-pad                           DCTL-insert-lines                       fix
DCTL-clear-screen                       Rprinc                                  float
DCTL-define-full-width-window           Rtyo                                    stringlength
DCTL-delete-lines                                                               


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
