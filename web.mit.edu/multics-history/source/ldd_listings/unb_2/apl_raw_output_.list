	COMPILATION LISTING OF SEGMENT apl_raw_output_
	Compiled by: Multics PL/I Compiler, Release 28d, of October 4, 1983
	Compiled at: Honeywell LCPD Phoenix, System M
	Compiled on: 11/29/83  1621.1 mst Tue
	    Options: optimize map

        1 /* ******************************************************
        2*   *                                                    *
        3*   *                                                    *
        4*   * Copyright (c) 1972 by Massachusetts Institute of   *
        5*   * Technology and Honeywell Information Systems, Inc. *
        6*   *                                                    *
        7*   *                                                    *
        8*   ****************************************************** */
        9 
       10 /* APL External Function to write characters to a terminal (or absout) without having them
       11*   translated by the APL DIM.
       12*
       13*   Written 800227 by PG
       14**/
       15 
       16 /* format: style3 */
       17 apl_raw_output_:
       18      procedure (operators_argument);
       19 
       20 /* automatic */
       21 
       22 declare	code		fixed bin (35),		/* Multics status code */
       23 	right		ptr,			/* pointer to right data array */
       24 	right_vb		ptr;			/* pointer to right value bead */
       25 
       26 /* based */
       27 
       28 declare	right_arg_string	char (data_elements) based (right);
       29 
       30 /* builtins */
       31 
       32 declare	null		builtin;
       33 
       34 /* entries */
       35 
       36 declare	iox_$put_chars	entry (ptr, ptr, fixed bin (21), fixed bin (35));
       37 
       38 /* external static */
       39 
       40 declare	apl_static_$user_tty
       41 			ptr external static;
       42 
       43 /* include files */
       44 
  1     1 /* ====== BEGIN INCLUDE SEGMENT	apl_external_function.incl.pl1 ============================ */
  1     2 
  1     3 /* This include segment contains all of the Version 2 apl declarations necessary for an external apl
  1     4*   function to interface to apl. */
  1     5 
  1     6 /* automatic */
  1     7 
  1     8 declare	data_elements fixed binary (21);	/* number of elements for arrays */
  1     9 
  1    10 /* entries */
  1    11 
  1    12 declare	apl_allocate_words_ entry (fixed binary (19), unaligned pointer);
  1    13 		/* param 1	(input)	number of words to allocate */
  1    14 		/* param 2	(output)	word-aligned packed pointer to allocated bead,
  1    15*					with general_bead.size and general_bead.reference_count set. */
  1    16 
  1    17 declare	apl_free_words_ entry (fixed binary (19), unaligned pointer);
  1    18 		/* param 1	(input)	number of words to free */
  1    19 		/* param 2	(input)	word-aligned packed pointer to bead to be freed. */
  1    20 
  1    21 declare	apl_free_bead_ entry (unaligned pointer);
  1    22 		/* param 1	(input)	word-aligned packed pointer to bead to be freed. */
  1    23 		/*			if reference count is non-zero, a system error will result. */
  1    24 
  1    25 declare	apl_get_value_stack_ entry (fixed binary (19));
  1    26 		/* param 1	(input)	number of words needed in a value stack. */
  1    27 		/* (implicit)	(output)	sets ws_info.value_stack_ptr to point to new value stack. */
  1    28 
  1    29 declare	apl_subsystem_ entry (fixed bin (35), bit (*) aligned, char (*), char (*), char (*), char (*),
  1    30 		fixed bin (35));
  1    31 		/* param 1	(input)	user number */
  1    32 		/* param 2	(input)	control switches (1 like ws_info.switches) */
  1    33 		/* param 3	(input)	initial ws pathname */
  1    34 		/* param 4	(input)	terminal conversion table to use */
  1    35 		/* param 5	(output)	user-specified signoff lock ("*" = no lock) */
  1    36 		/* param 6	(output)	0 = normal termination,
  1    37*					apl_error_table_$off_hold = )OFF HOLD,
  1    38*					apl_error_table_$cant_load_ws = could not load initial ws */
  1    39 
  1    40 declare	apl_system_error_ entry (fixed bin (35));
  1    41 		/* param 1	(input)	status code of error to be printed. */
  1    42 		/*			system errors will not return to caller. */
  1    43 
  1    44 /* external static */
  1    45 
  1    46 declare	(apl_error_table_$cant_load_ws,	/* status code returned by apl_subsystem_ if ws not found */
  1    47 	apl_error_table_$domain,		/* status code for DOMAIN ERROR */
  1    48 	apl_error_table_$function,		/* status code for FUNCTION ERROR - IN EXTERNAL FUNCTION */
  1    49 	apl_error_table_$index,		/* status code for INDEX ERROR */
  1    50 	apl_error_table_$length,		/* status code for LENGTH ERROR */
  1    51 	apl_error_table_$no_type_bits,	/* status code for SYSTEM ERROR - VALUE HAS NO TYPE BITS */
  1    52 	apl_error_table_$rank,		/* status code for RANK ERROR */
  1    53 	apl_error_table_$result_size,		/* status code for RESULT SIZE ERROR - OBJECT WOULD BE LARGER THAN A SEGMENT */
  1    54 	apl_error_table_$system_error,	/* status code for SYSTEM ERROR */
  1    55 	apl_error_table_$off_hold)		/* status code returned by apl_subsystem_ after )OFF HOLD */
  1    56 	fixed binary (35) external static;
  1    57 
  1    58 /* include files */
  1    59 
  2     1 /* ====== BEGIN INCLUDE SEGMENT	apl_number_data.incl.pl1 ================================== */
  2     2 
  2     3 /*
  2     4*   This include file contains information about the machine representation of numbers.
  2     5*   In all programs numbers should simply be declared 'float'.
  2     6*   All default statements should be in this include file.
  2     7*
  2     8*   This is the binary version.  The manifest constant Binary should be used by programs
  2     9*   that need to know whether we are using binary or decimal.
  2    10* */
  2    11 
  2    12 /* format: style3,initlm0,idind30 */
  2    13 
  2    14 default (float & ^decimal & ^binary & ^precision & ^constant) float binary (63);
  2    15 
  2    16 declare	(
  2    17 	TheBiggestNumberWeveGot	float initial (0.1701411834604692317e+39),
  2    18 	TheSmallestNumberWeveGot	float initial (.1469367938527859385e-38),
  2    19 	Binary			bit (1) aligned initial ("1"b)
  2    20 	)			internal static options (constant);
  2    21 
  2    22 /* Number of characters in a number datum entry; used for copying float number arrays as strings.
  2    23*   (Obsolete! use array copies!) */
  2    24 
  2    25 declare	NumberSize		fixed binary precision (4) internal static initial (8);
  2    26 
  2    27 /* ------ END INCLUDE SEGMENT		apl_number_data.incl.pl1 ---------------------------------- */
  1    60 
  3     1 /* ====== BEGIN INCLUDE SEGMENT	apl_ws_info.incl.pl1 ====================================== */
  3     2 
  3     3 /* This structure contains all of the global data (or pointers to it) for the APL subsystem */
  3     4 
  3     5 /* automatic */
  3     6 
  3     7 declare	ws_info_ptr ptr initial (apl_static_$ws_info_ptr.static_ws_info_ptr);
  3     8 
  3     9 /* external static */
  3    10 
  3    11 declare	1 apl_static_$ws_info_ptr	external static aligned structure,
  3    12 	  2 static_ws_info_ptr	unaligned pointer;
  3    13 
  3    14 /* based */
  3    15 
  3    16 declare	1 ws_info			aligned based (ws_info_ptr),
  3    17 	  2 version_number		fixed bin,	/* version of this structure (3) */
  3    18 	  2 switches		unaligned,	/* mainly ws parameters */
  3    19 	    3 long_error_mode	bit,		/* if 1, long Multics format, else APL/360 format */
  3    20 	    3 debug_mode		bit,		/* if 1, system error causes escape to command level */
  3    21 	    3 canonicalize_mode	bit,		/* if 1, the editor canonicalizes user input */
  3    22 	    3 restrict_exec_command	bit,		/* if 1, the )EXEC command may not be used */
  3    23 	    3 restrict_debug_command	bit,		/* if 1, the )DEBUG command may not be used */
  3    24 	    3 restrict_external_functions
  3    25 				bit,		/* if 1, the )ZFN, )MFN, and )DFN commands may not be used */
  3    26 	    3 restrict_load		bit,		/* if 1, the )LOAD and )COPY commands may not be used */
  3    27 	    3 restrict_load_directory	bit,		/* if 1, no directory allowed in )LOAD or )COPY pathnames */
  3    28 	    3 restrict_save		bit,		/* if 1, the )SAVE command may not be used */
  3    29 	    3 restrict_save_directory	bit,		/* if 1, no directory allowed in )SAVE pathnames */
  3    30 	    3 off_hold		bit,		/* if 1, )OFF HOLD was typed, else just )OFF */
  3    31 	    3 transparent_to_signals	bit,		/* if 1, any conditions slip right past APL */
  3    32 	    3 meter_mode		bit,		/* if 1, metering may be done, else speed is all-important */
  3    33 	    3 restrict_msg_command	bit,		/* if 1, the )MSG command may not be used. */
  3    34 	    3 compatibility_check_mode
  3    35 				bit,		/* if 1, check for incompatible operators */
  3    36 	    3 no_quit_handler	bit,		/* if 1, do not trap QUITs. */
  3    37 						/* remaining 20 bits not presently used */
  3    38 
  3    39 	  2 values,				/* attributes of the workspace */
  3    40 	    3 digits		fixed bin,	/* number of digits of precision printed on output */
  3    41 	    3 width		fixed bin,	/* line length for formatted output */
  3    42 	    3 index_origin		fixed bin,	/* the index origin (0 or 1) */
  3    43 	    3 random_link		fixed bin(35),	/* seed for random number generator */
  3    44 	    3 fuzz		float,		/* comparison tolerance (relative fuzz) */
  3    45 	    3 float_index_origin	float,		/* the index origin	in floating point */
  3    46 	    3 number_of_symbols	fixed bin,	/* the number of symbol_beads currently in existence */
  3    47 	    3 maximum_value_stack_size
  3    48 				fixed bin (18),	/* maximum number of words in one segment of value stack */
  3    49 
  3    50 	  2 pointers,				/* pointers to various internal tables */
  3    51 	    3 symbol_table_ptr	unaligned pointer,	/* -> symbol_table (apl_symbol_table.incl.pl1) */
  3    52 	    3 current_parse_frame_ptr	unaligned pointer,	/* -> topmost parse frame */
  3    53 	    3 value_stack_ptr	unaligned pointer,	/* -> next free location on value stack */
  3    54 	    3 alloc_free_info_ptr	unaligned pointer,	/* -> apl_storage_mngr_ data (apl_storage_system_data.incl.pl1) */
  3    55 
  3    56 	  2 time_invoked		fixed bin(71),	/* clock time that APL was entered */
  3    57 	  2 integer_fuzz		float,		/* the absolute fuzz used in checking for integers */
  3    58 	  2 user_number		fixed bin(35),	/* number under which the user is signed on */
  3    59 	  2 latent_expression	unaligned pointer,	/* -> value_bead for QuadLX */
  3    60 	  2 lock			char(32),		/* the lock currently set on this workspace (password) */
  3    61 	  2 wsid			char(100),	/* the workspace identification: name, number name, or clear ws */
  3    62 	  2 last_error_code		fixed bin(35),	/* last code passed to apl_error_ */
  3    63 	  2 signoff_lock		character (32),
  3    64 
  3    65 	  2 interrupt_info		aligned,		/* bits used by apl_interpreter_ to tell when to abort */
  3    66 	    3 dont_interrupt_parse	bit,		/* if 1, don't do a dirty stop because the parser is running */
  3    67 	    3 dont_interrupt_operator	bit,		/* if 1, don't do a dirty stop because an operator is running */
  3    68 	    3 dont_interrupt_storage_manager		/* if 1, don't stop because apl_storage_mngr_ is */
  3    69 				bit,		/*       munging his tables */
  3    70 	    3 unused_interrupt_bit	bit,		/* not presently used */
  3    71 	    3 dont_interrupt_command	bit,
  3    72 	    3 can_be_interrupted	bit,		/* if 1, OK to do a clean stop (we are between lines, reading) */
  3    73 	    3 clean_interrupt_pending	bit,		/* interrupt occured, break cleanly (between lines) */
  3    74 	    3 dirty_interrupt_pending	bit,		/* interrupt occured, break as soon as not inhibited */
  3    75 
  3    76 	  2 user_name		char (32),	/* process group id of user */
  3    77 	  2 immediate_input_prompt	char (32) varying,	/* normal input */
  3    78 	  2 evaluated_input_prompt	char (32) varying,	/* quad input */
  3    79 	  2 character_input_prompt	char (32) varying,	/* quad-quote input */
  3    80 	  2 vcpu_time		aligned,
  3    81 	    3 total		fixed bin (71),
  3    82 	    3 setup		fixed bin (71),
  3    83 	    3 parse		fixed bin (71),
  3    84 	    3 lex			fixed bin (71),
  3    85 	    3 operator		fixed bin (71),
  3    86 	    3 storage_manager	fixed bin (71),
  3    87 	  2 output_info		aligned,		/* data pertaining to output buffer */
  3    88 	    3 output_buffer_ptr	unal ptr,		/* ptr to output buffer */
  3    89 	    3 output_buffer_len	fixed bin (21),	/* length (bytes) of output buffer */
  3    90 	    3 output_buffer_pos	fixed bin (21),	/* index of next byte to write in */
  3    91 	    3 output_buffer_ll	fixed bin (21),	/* print positions used up so far */
  3    92 	  2 tab_width		fixed bin (21);	/* number of columns a tabs moves cursor */
  3    93 
  3    94 declare	output_buffer char (ws_info.output_buffer_len) based (ws_info.output_buffer_ptr);
  3    95 
  3    96 /* internal static */
  3    97 
  3    98 declare	max_parse_stack_depth fixed bin int static init(64536);
  3    99 
  3   100 /* ------ END INCLUDE SEGMENT		apl_ws_info.incl.pl1 -------------------------------------- */
  1    61 
  4     1 /* ====== BEGIN INCLUDE SEGMENT	apl_bead_format.incl.pl1 ================================== */
  4     2 
  4     3 declare 1 general_bead  		aligned based,	/* The Venerable Bead		*/
  4     4 	2 type 			unaligned,
  4     5 	  3 bead_type		unaligned,
  4     6 	    4 operator		bit (1),		/* ON if operator bead		*/
  4     7 	    4 symbol		bit (1),		/* ON if symbol bead		*/
  4     8 	    4 value		bit (1),		/* ON if value bead			*/
  4     9 	    4 function		bit (1),		/* ON if function bead		*/
  4    10 	    4 group		bit (1),		/* ON if group bead			*/
  4    11 	    4 label		bit (1),		/* ON if label bead			*/
  4    12 	    4 shared_variable	bit (1),		/* ON if shared variable bead 	*/
  4    13 	    4 lexed_function	bit (1),		/* ON if lexed function bead  	*/
  4    14 	  3 data_type		unaligned,
  4    15 	    4 list_value		bit (1),		/* ON if a list value bead		*/
  4    16 	    4 character_value	bit (1),		/* ON if a character value bead	*/
  4    17 	    4 numeric_value		bit (1),		/* ON if a numeric value bead		*/
  4    18 	    4 integral_value	bit (1),		/* ON if an integral value bead	*/
  4    19 	    4 zero_or_one_value	bit (1),		/* ON if a boolean value bead		*/
  4    20 	    4 complex_value		bit (1),		/* ON if a complex, numeric value bead   */
  4    21 	  3 unused_bits		bit (4) unaligned,	/* pad to 18 bits (for future use)	*/
  4    22 	2 size			bit (18) unaligned,	/* Number of words this bead occupies
  4    23*						   (used by bead storage manager)	*/
  4    24 	2 reference_count 		fixed binary (29);	/* Number of pointers which point
  4    25*						   to this bead (used by bead manager)	*/
  4    26 
  4    27 
  4    28 /* constant strings for initing type field in various beads */
  4    29 
  4    30 declare (
  4    31 	operator_type		init("100000000000000000"b),
  4    32 	symbol_type		init("010000000000000000"b),
  4    33     	value_type		init("001000000000000000"b),
  4    34 	function_type		init("000100000000000000"b),
  4    35 	group_type		init("000010000000000000"b),
  4    36 	label_type		init("001001000011000000"b),
  4    37 	shared_variable_type	init("001000100000000000"b),
  4    38 	lexed_function_type		init("000000010000000000"b),
  4    39 
  4    40 	list_value_type		init("000000001000000000"b),
  4    41 	character_value_type 	init("001000000100000000"b),
  4    42 	numeric_value_type		init("001000000010000000"b),
  4    43 	integral_value_type		init("001000000011000000"b),
  4    44 	zero_or_one_value_type	init("001000000011100000"b),
  4    45 	complex_value_type		init("001000000000010000"b),
  4    46 
  4    47 	not_integer_mask		init("111111111110011111"b),		/* to clear integral, zero_or_one bits */
  4    48 	not_zero_or_one_mask	init("111111111111011111"b)		/* to clear zero_or_one bit */
  4    49         ) bit(18) internal static;
  4    50 
  4    51 /* ------ END INCLUDE SEGMENT		apl_bead_format.incl.pl1 ---------------------------------- */
  1    62 
  5     1 /* ====== BEGIN INCLUDE SEGMENT	apl_value_bead.incl.pl1 =================================== */
  5     2 
  5     3 declare
  5     4 	number_of_dimensions fixed bin,
  5     5 
  5     6 	1 value_bead		aligned based,
  5     7 	2 header			aligned like general_bead,
  5     8 	2 total_data_elements	fixed binary (21),	/* length of ,[value] in APL		*/
  5     9 	2 rhorho			fixed binary,	/* number of dimensions of value	*/
  5    10 	2 data_pointer		pointer unaligned,	/* packed pointer to the data in value	*/
  5    11 	2 rho			fixed binary (21) dimension (number_of_dimensions refer (value_bead.rhorho));
  5    12 						/* dimensions of value (zero-origin)	*/
  5    13 
  5    14 
  5    15 declare 1 character_data_structure	aligned based,	/* alignment trick for PL/I compiler	*/
  5    16 	2 character_datum		character (1) unaligned dimension (0:data_elements - 1);
  5    17 						/* actual elements of character array	*/
  5    18 
  5    19 declare   character_string_overlay	character (data_elements) aligned based;
  5    20 						/* to overlay on above structure	 */
  5    21 
  5    22 
  5    23 declare   numeric_datum		float aligned dimension (0:data_elements - 1) based;
  5    24 						/* actual elements of numeric array	*/
  5    25 
  5    26 declare	complex_datum		complex float aligned dimension (0:data_elements -1) based;
  5    27 
  5    28 declare	MAX_VALUE_BEAD_SIZE		fixed bin (19) init (261120) int static options (constant);
  5    29 
  5    30 /* ------ END INCLUDE SEGMENT		apl_value_bead.incl.pl1 ----------------------------------- */
  1    63 
  6     1 /* ====== BEGIN INCLUDE SEGEMENT	apl_operators_argument.incl.pl1 =========================== */
  6     2 
  6     3 declare	1 operators_argument	aligned,
  6     4 	  2 operands (2)		aligned,		/* these are the operands to the operator to be executed.
  6     5*						   if operand (1).value is null, operator is monadic */
  6     6 	    3 value		pointer unaligned,	/* a pointer to the value bead for this operand */
  6     7 	    3 on_stack		bit (1) aligned,	/* ON if this value resides on the value stack */
  6     8 	  2 operator		aligned,		/* information about the operator to be executed */
  6     9 	    3 dimension		fixed bin,	/* (optional) dimension along which to operate */
  6    10 	    3 padding		bit (18) unaligned,	/* unused part of operator bead */
  6    11 	    3 op2			fixed bin (8) unal,	/* a modifier for op1, or a 2nd operator if inner product */
  6    12 	    3 op1			fixed bin (8) unal,	/* code for the actual operator to be executed */
  6    13 	  2 result		pointer unal,	/* (output) set by operator to point to result bead in stack */
  6    14 	  2 error_code		fixed bin (35),	/* (output) set before signaling apl_operator_error_ */
  6    15 	  2 where_error		fixed bin;	/* parseme index of where error was - parse sets to operator */
  6    16 
  6    17 /* ------ END INCLUDE SEGMENT		apl_operators_argument.incl.pl1 --------------------------- */
  1    64 
  1    65 
  1    66 /* ------ END INCLUDE SEGMENT		apl_external_function.incl.pl1 ---------------------------- */
       45 
       46 
       47 /* program */
       48 
       49 /* Usage in APL:
       50*		)MFN RAW_OUTPUT APL_RAW_OUTPUT_
       51*		RAW_OUTPUT 'ANYTHING'		*/
       52 
       53 	right_vb = operators_argument.operands (2).value; /* Get ptr to right argument */
       54 	if ^right_vb -> value_bead.value		/* Make sure argument is a value bead */
       55 	then go to domain_error_right;
       56 
       57 	if ^right_vb -> value_bead.character_value	/* Make sure argument is character */
       58 	then go to domain_error_right;
       59 
       60 	right = right_vb -> value_bead.data_pointer;	/* Point to data array */
       61 	data_elements = right_vb -> value_bead.total_data_elements;
       62 
       63 /* Pop right arg off value stack, if necessary. */
       64 
       65 	if operators_argument.operands (2).on_stack
       66 	then ws_info.value_stack_ptr = right_vb;
       67 
       68 	call iox_$put_chars (apl_static_$user_tty, right, data_elements, code);
       69 	operators_argument.result = null;
       70 	return;
       71 
       72 domain_error_right:
       73 	operators_argument.where_error = operators_argument.where_error - 1;
       74 	operators_argument.error_code = apl_error_table_$domain;
       75 	return;
       76 
       77      end apl_raw_output_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/29/83  1549.5  apl_raw_output_.pl1               >special_ldd>on>apl.1129>apl_raw_output_.pl1
45           1    03/27/82  0438.7  apl_external_function.incl.pl1    >ldd>include>apl_external_function.incl.pl1
1-60         2    03/27/82  0429.8  apl_number_data.incl.pl1          >ldd>include>apl_number_data.incl.pl1
1-61         3    03/27/82  0439.2  apl_ws_info.incl.pl1              >ldd>include>apl_ws_info.incl.pl1
1-62         4    03/27/82  0438.5  apl_bead_format.incl.pl1          >ldd>include>apl_bead_format.incl.pl1
1-63         5    03/27/82  0439.2  apl_value_bead.incl.pl1           >ldd>include>apl_value_bead.incl.pl1
1-64         6    03/27/82  0439.0  apl_operators_argument.incl.pl1   >ldd>include>apl_operators_argument.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
apl_error_table_$domain         000014 external static fixed bin(35,0)          dcl 1-46 ref 74
apl_static_$user_tty            000012 external static pointer                  dcl 40 set ref 68*
apl_static_$ws_info_ptr         000016 external static structure                level 1 dcl 3-11
bead_type                              based           structure                level 4 packed unaligned dcl 5-3
character_value           0(09)        based           bit(1)                   level 5 packed unaligned dcl 5-3 ref 57
code                            000100 automatic       fixed bin(35,0)          dcl 22 set ref 68*
data_elements                   000106 automatic       fixed bin(21,0)          dcl 1-8 set ref 61* 68*
data_pointer              4            based           pointer                  level 2 packed unaligned dcl 5-3 ref 60
data_type                 0(08)        based           structure                level 4 packed unaligned dcl 5-3
error_code                7            parameter       fixed bin(35,0)          level 2 dcl 6-3 set ref 74*
general_bead                           based           structure                level 1 dcl 4-3
header                                 based           structure                level 2 dcl 5-3
iox_$put_chars                  000010 constant        entry                    external dcl 36 ref 68
null                                                   builtin function         dcl 32 ref 69
on_stack                  1            parameter       bit(1)                   array level 3 dcl 6-3 ref 65
operands                               parameter       structure                array level 2 dcl 6-3
operators_argument                     parameter       structure                level 1 dcl 6-3 set ref 17
pointers                 14            based           structure                level 2 dcl 3-16
result                    6            parameter       pointer                  level 2 packed unaligned dcl 6-3 set ref 69*
right                           000102 automatic       pointer                  dcl 22 set ref 60* 68*
right_vb                        000104 automatic       pointer                  dcl 22 set ref 53* 54 57 60 61 65
static_ws_info_ptr              000016 external static pointer                  level 2 packed unaligned dcl 3-11 ref 3-7
total_data_elements       2            based           fixed bin(21,0)          level 2 dcl 5-3 ref 61
type                                   based           structure                level 3 packed unaligned dcl 5-3
value                     0(02)        based           bit(1)                   level 5 in structure "value_bead" packed unaligned
                                                                                  dcl 5-3 in procedure "apl_raw_output_" ref 54
value                                  parameter       pointer                  array level 3 in structure "operators_argument"
                                                                                  packed unaligned dcl 6-3 in procedure
                                                                                  "apl_raw_output_" ref 53
value_bead                             based           structure                level 1 dcl 5-3
value_stack_ptr          16            based           pointer                  level 3 packed unaligned dcl 3-16 set ref 65*
where_error              10            parameter       fixed bin(17,0)          level 2 dcl 6-3 set ref 72* 72
ws_info                                based           structure                level 1 dcl 3-16
ws_info_ptr                     000110 automatic       pointer                  initial dcl 3-7 set ref 65 3-7*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
Binary                                 internal static bit(1)                   initial dcl 2-16
MAX_VALUE_BEAD_SIZE                    internal static fixed bin(19,0)          initial dcl 5-28
NumberSize                             internal static fixed bin(4,0)           initial dcl 2-25
TheBiggestNumberWeveGot                internal static float bin(63)            initial dcl 2-16
TheSmallestNumberWeveGot               internal static float bin(63)            initial dcl 2-16
apl_allocate_words_             000000 constant        entry                    external dcl 1-12
apl_error_table_$cant_load_ws          external static fixed bin(35,0)          dcl 1-46
apl_error_table_$function              external static fixed bin(35,0)          dcl 1-46
apl_error_table_$index                 external static fixed bin(35,0)          dcl 1-46
apl_error_table_$length                external static fixed bin(35,0)          dcl 1-46
apl_error_table_$no_type_bits          external static fixed bin(35,0)          dcl 1-46
apl_error_table_$off_hold              external static fixed bin(35,0)          dcl 1-46
apl_error_table_$rank                  external static fixed bin(35,0)          dcl 1-46
apl_error_table_$result_size           external static fixed bin(35,0)          dcl 1-46
apl_error_table_$system_error          external static fixed bin(35,0)          dcl 1-46
apl_free_bead_                  000000 constant        entry                    external dcl 1-21
apl_free_words_                 000000 constant        entry                    external dcl 1-17
apl_get_value_stack_            000000 constant        entry                    external dcl 1-25
apl_subsystem_                  000000 constant        entry                    external dcl 1-29
apl_system_error_               000000 constant        entry                    external dcl 1-40
character_data_structure               based           structure                level 1 dcl 5-15
character_string_overlay               based           char                     dcl 5-19
character_value_type                   internal static bit(18)                  initial unaligned dcl 4-30
complex_datum                          based           complex float bin(63)    array dcl 5-26
complex_value_type                     internal static bit(18)                  initial unaligned dcl 4-30
function_type                          internal static bit(18)                  initial unaligned dcl 4-30
group_type                             internal static bit(18)                  initial unaligned dcl 4-30
integral_value_type                    internal static bit(18)                  initial unaligned dcl 4-30
label_type                             internal static bit(18)                  initial unaligned dcl 4-30
lexed_function_type                    internal static bit(18)                  initial unaligned dcl 4-30
list_value_type                        internal static bit(18)                  initial unaligned dcl 4-30
max_parse_stack_depth                  internal static fixed bin(17,0)          initial dcl 3-98
not_integer_mask                       internal static bit(18)                  initial unaligned dcl 4-30
not_zero_or_one_mask                   internal static bit(18)                  initial unaligned dcl 4-30
number_of_dimensions                   automatic       fixed bin(17,0)          dcl 5-3
numeric_datum                          based           float bin(63)            array dcl 5-23
numeric_value_type                     internal static bit(18)                  initial unaligned dcl 4-30
operator_type                          internal static bit(18)                  initial unaligned dcl 4-30
output_buffer                          based           char                     unaligned dcl 3-94
right_arg_string                       based           char                     unaligned dcl 28
shared_variable_type                   internal static bit(18)                  initial unaligned dcl 4-30
symbol_type                            internal static bit(18)                  initial unaligned dcl 4-30
value_type                             internal static bit(18)                  initial unaligned dcl 4-30
zero_or_one_value_type                 internal static bit(18)                  initial unaligned dcl 4-30

NAMES DECLARED BY EXPLICIT CONTEXT.
apl_raw_output_                 000032 constant        entry                    external dcl 17
domain_error_right              000105 constant        label                    dcl 72 ref 54 57

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       202         222     113         212
Length       520     113        20         261      66           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
apl_raw_output_                      84 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
apl_raw_output_          000100 code                        apl_raw_output_
                         000102 right                       apl_raw_output_
                         000104 right_vb                    apl_raw_output_
                         000106 data_elements               apl_raw_output_
                         000110 ws_info_ptr                 apl_raw_output_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        return              ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
iox_$put_chars

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
apl_error_table_$domain       apl_static_$user_tty          apl_static_$ws_info_ptr




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     17 000027    3    7 000037        53 000041        54 000045        57 000050        60 000053        61 000055
     65 000057        68 000064        69 000100        70 000104        72 000105        74 000107        75 000111


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
