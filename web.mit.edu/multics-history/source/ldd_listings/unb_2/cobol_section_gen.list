	COMPILATION LISTING OF SEGMENT cobol_section_gen
	Compiled by: Multics PL/I Compiler, Release 31b, of April 24, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 05/24/89  0955.8 mst Wed
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        6*        *                                                         *
        7*        * Copyright (c) 1972 by Massachusetts Institute of        *
        8*        * Technology and Honeywell Information Systems, Inc.      *
        9*        *                                                         *
       10*        *********************************************************** */
       11 
       12 
       13 
       14 
       15 /****^  HISTORY COMMENTS:
       16*  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
       17*     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
       18*     MCR8060 cobol_section_gen.pl1 Reformatted code to new Cobol standard.
       19*                                                   END HISTORY COMMENTS */
       20 
       21 
       22 /*{*/
       23 /* format: style3 */
       24 cobol_section_gen:
       25      proc (in_token_ptr);
       26 
       27 /*
       28*The procedure cobol_section_gen performs the following functions:
       29*
       30*  1.  Generates an end-of-perform range alterable GO and incre-
       31*      ments perform_para_index by 1 if the paragraph being ter-
       32*      minated is at the end of a perform range as determined by
       33*      examining para_eop_flag ((1, it is; 0, it is not).
       34*
       35*  2.  Generates the number of end-of-perform range alterable GO's
       36*      dictated by the value of sect_eop_flag; 0, 1, or 2.
       37*
       38*  3.  Determines if the section being entered is at the end of a
       39*      PERFORM statement and/or SORT statement perform range by
       40*      examining perform_list.perf.proc_num(perform_para_index).
       41*      If it is not, sect_eop_flag is set to 0.  If it is, sect_
       42*      eop_flag is set to 1, perform_sect_index is set equal to
       43*      perform_para_index, and perform_para_index is incremented
       44*      by 1.  Then, perform_list.perf.proc_num(perform_para_index)
       45*      is examined, using the new value of perform_para_index, to
       46*      determine if the section has been referenced in both a 
       47*      PERFORM and a SORT statement (in this case there are two
       48*      entries for the procedure in perform_list  -  the first for
       49*      PERFORM statements and the second for SORT statements).  If
       50*      there is no second entry in perform_list for the section,
       51*      then no further action is taken.  If there is, then sect_
       52*      eop_flag and perform_para_index are both incremented by 1.
       53*
       54*  4.  Determines if the section being entered must be initialized
       55*      prior to its execution as a result of an implicit transfer
       56*      of control from the preceding section.  (Initialization is
       57*      required if the section being entered has a COBOL segment
       58*      number different from that of its predessor and if the seg-
       59*      ment of which the section is a member is independent and
       60*      contains alterable GO's.)  If initialization is required,
       61*      code is generated to cause execution of an initialization
       62*      sequence for the segment prior to execution of code gener-
       63*      ated to implement the statements that comprise the section.
       64*
       65*  5.  Associates the section's procedure number with the text 
       66*      location into which the first instruction emitted by the 
       67*      next generator called will be placed (this is the first
       68*      free text location following the code, if any, generated
       69*      by cobol_section_gen).
       70*
       71*U__s_a_g_e:_
       72*
       73*     declare cobol_section_gen entry (ptr);
       74*
       75*     call cobol_section_gen (in_token_ptr);
       76*
       77*						   */
       78 
  1     1 
  1     2 /*  BEGIN INCLUDE FILE ...   cobol_in_token.incl.pl1		  */
  1     3 
  1     4 /*  Last modified August 22, 1974 by AEG		  */
  1     5 
  1     6 
  1     7 declare in_token_ptr ptr;
  1     8 
  1     9 declare 1 in_token aligned based(in_token_ptr),
  1    10 	2 n fixed bin aligned,
  1    11 	2 code fixed bin aligned,
  1    12 	2 token_ptr(0 refer(in_token.n)) ptr aligned;
  1    13 
  1    14 
  1    15 /*  END INCLUDE FILE ...   cobol_in_token.incl.pl1		  */
  1    16 
       79 
       80 
       81 /*
       82*G__e_n_e_r_a_t_e_d_C__o_d_e:_
       83*
       84*Two sequences of code may be generated by cobol_section_gen.  They
       85*are as follows;
       86*
       87*  Sequence 1:  Implements end-of-perform range alterable GO's.
       88*
       89*  Sequence 2:  Implements the transfer of control to and estab-
       90*	     lishes return from the appropriate segment initi-
       91*	     alization code sequence.
       92*
       93*Sequence 1 -
       94*
       95*     lda  target_An
       96*     tra  0,al
       97*
       98*where:
       99*target_An is a 36-bit variable allocated in the program's COBOL
      100*	data segment.  Each target_An, for n = 1, 2, 3, ...,
      101*	is uniquely associated with the procedure at whose end
      102*	these instructions are generated.
      103*
      104*Sequence 2 -
      105*
      106*     eaa  2,ic
      107*     tra  s_init_relp,ic
      108*
      109*where:
      110*s_init_relp is the offset, relative to the instruction in which
      111*	  it appears, of the first instruction of the initial-
      112*	  ization code sequence provided for the COBOL segment
      113*	  of which the section being entered is a part.
      114*
      115*Note that following the execution of the eaa instruction bits 0 -
      116*17 inc. of the a-register (au) will contain the address of the
      117*instruction following the tra instruction i.e. the address of the
      118*first instruction generated to implement the statements contained
      119*in the section being entered.  Since the terminal instruction of
      120*the initialization sequences for independent segments (which do
      121*not otherwise employ the a-register) is tra 0,au, control will
      122*be transferred to this instruction.
      123*						   */
      124 
      125 /*
      126*D__a_t_a:_
      127*
      128*     % include cobol_;
      129*
      130*	Items in cobol_$incl.pl1 used (u) and/or set (s) by
      131*	cobol_section_gen;
      132*	     cobol_ptr (u)
      133*	     para_eop_flag (u/s)
      134*	     perform_list_ptr (u)
      135*	     perform_para_index (u/s)
      136*	     perform_sect_index (u/s)
      137*	     priority_no (u/s)
      138*	     sect_eop_flag (u/s)
      139*	     seg_init_list_ptr (u)
      140*	     text_wd_off (u)
      141*
      142*						   */
      143 
  2     1 
  2     2 /*  BEGIN INCLUDE FILE ... cobol_perform_altgo.incl.pl1		 */
  2     3 /*  Last modified September 3, 1974 by AEG		   */
  2     4 
  2     5 /*  Input structure for   cobol_addr			   */
  2     6 
  2     7 declare 1 input_struc_basic aligned static,
  2     8 	2 type fixed bin aligned init(1),
  2     9 	2 operand_no fixed bin aligned init(0),
  2    10 	2 lock fixed bin aligned init(0),
  2    11 	2 segno fixed bin aligned,
  2    12 	2 char_offset fixed bin(24) aligned,
  2    13 	2 send_receive fixed bin aligned init(0);
  2    14 
  2    15 /*
  2    16*type	   indicates type of addressing requested.  Type 1
  2    17*	   indicates basic; i.e., data to be addressed is
  2    18*	   specified by segno and char_offset.
  2    19*
  2    20*operand_no   not applicable to type 1.
  2    21*
  2    22*lock	   indicates lock requirements for registers used in
  2    23*	   addressing; 0 - do not lock registers used.
  2    24*
  2    25*segno	   is the compiler designation of the segment in which
  2    26*	   the data to be addressed is located.
  2    27*
  2    28*char_offset  is the character offset within segno of the data to
  2    29*	   be addressed.
  2    30*
  2    31*send_receive indicates whether the data being addressed is a
  2    32*	   sending or receiving field for the instruction whose
  2    33*	   address field is being set; 0 indicates sending.
  2    34*						   */
  2    35 
  2    36 /*  Input structure for mc_register$load		   */
  2    37 
  2    38 declare 1 register_request aligned static,
  2    39 	2 requested_reg fixed bin aligned init(1),
  2    40 	2 assigned_reg bit(4) aligned,
  2    41 	2 lock fixed bin aligned init(0),
  2    42 	2 reg_set_now fixed bin aligned,
  2    43 	2 use_code fixed bin aligned init(0),
  2    44 	2 adjust_ptr_addr fixed bin aligned init(0),
  2    45 	2 content_ptr ptr aligned init(null),
  2    46 	2 literal_content bit(36) aligned init((36)"0"b);
  2    47 
  2    48 /*
  2    49*requested_reg   is a code designating the register requested;
  2    50*	      1 designates the a register.
  2    51*
  2    52*assigned_reg    is a code designating the register assigned.  It
  2    53*	      has no significance if a specific register is
  2    54*	      requested.
  2    55*
  2    56*lock	      indicates locking requirements; 1 requests that
  2    57*	      the register be locked.
  2    58*
  2    59*reg_set_now     not applicable for use_code = 0.
  2    60*
  2    61*use_code 	      specifies how the register is to be used by the
  2    62*	      requester; 0 signifies that such information is
  2    63*	      not meaningful for register optimization.
  2    64*
  2    65*adjust_ptr_addr inserted to make evident that since all pointers
  2    66*	      must be allocated on even word boundaries, the
  2    67*	      pl1 compiler will allocate structures containing
  2    68*	      pointers and all pointers therein on even word  
  2    69*	      boundaries leaving "gaps" where necessary.
  2    70*
  2    71*content_ptr     not applicable for use_code = 0.
  2    72*
  2    73*literal_content not applicable for use_code = 0.
  2    74*						   */
  2    75 
  2    76 /*  End-of-perform range alterable go instruction pair	   */
  2    77 
  2    78 declare prfrm_altgo_inst_pr(4) bit(18) unaligned static init
  2    79 	("000000000000000000"b, "010011101001000110"b,
  2    80 	 "000000000000000000"b, "111001000000000101"b);
  2    81 
  2    82 /*
  2    83*The instructions are:
  2    84*
  2    85*     lda  0
  2    86*     tra  0,al
  2    87*
  2    88*						   */
  2    89 
  2    90 /*  END INCLUDE FILE ... cobol_perform_altgo.incl.pl1		 */
  2    91 
      144 
  3     1 
  3     2 /*  BEGIN INCLUDE FILE ... cobol_perform_list.incl.pl1		 */
  3     3 /*  Last modified July 17, 1974 by AEG			   */
  3     4 
  3     5 
  3     6 declare 1 perform_list aligned based(  cobol_$perform_list_ptr),
  3     7 	2 n fixed bin aligned,
  3     8 	2 perf (0 refer(perform_list.n)) aligned,
  3     9 	  3 proc_num fixed bin aligned,
  3    10 	  3 priority fixed bin aligned,
  3    11 	  3 target_a_segno fixed bin aligned,
  3    12 	  3 target_a_offset fixed bin(24) aligned,
  3    13 	  3 int_tag_no fixed bin aligned;
  3    14 
  3    15 
  3    16 /*
  3    17*perform_list_ptr is a pointer upon which the structure
  3    18*	       perform_list is based.  It is declared in
  3    19*	         cobol_.incl.pl1.
  3    20*
  3    21*n	       is the number of COBOL procedures which
  3    22*	       terminate perform ranges.
  3    23*
  3    24*perf	       is an array of perform_list.n structures which
  3    25*	       contain information about end of perform range
  3    26*	       procedures.
  3    27*
  3    28*proc_num	       is a tag number by which the end of perform
  3    29*	       range procedure is identified.
  3    30*
  3    31*priority	       is the COBOL segment number of the section con-
  3    32*	       taining COBOL procedure proc_num.
  3    33*
  3    34*target_a_segno and target_a_offset are the artificial MCOBOL seg-
  3    35*	       ment number and character offset, respectively,
  3    36*	       of a 36-bit variable, allocated in the COBOL 
  3    37*	       data segment on a word boundary, which contains 
  3    38*	       transfer address information for the alterable  
  3    39*	       GO contained in COBOL procedure proc_num.
  3    40*
  3    41*int_tag_no       is an internal tag number assigned to the in-
  3    42*	       struction to which control is transferred by the
  3    43*	       end of perform range alterable GO when the pro-
  3    44*	       cedure which it terminates is not being performed.
  3    45*
  3    46*
  3    47*						   */
  3    48 /*  END INCLUDE FILE ... cobol_perform_list.incl.pl1		 */
  3    49 
      145 
  4     1 
  4     2 /*  BEGIN INCLUDE FILE ...   cobol_seg_init_list.incl.pl1		   */
  4     3 
  4     4 /*  Last modified July 17, 1974 by AEG			   */
  4     5 
  4     6 
  4     7 declare 1 seg_init_list aligned based(  cobol_$seg_init_list_ptr),
  4     8 	2 n fixed bin aligned,
  4     9 	2 extra fixed bin aligned,
  4    10 	2 seg (0 refer(seg_init_list.n)) aligned,
  4    11 	  3 priority fixed bin aligned,
  4    12 	  3 int_tag_no fixed bin aligned,
  4    13 	  3 no_gos fixed bin aligned,
  4    14 	  3 next_init_no fixed bin aligned,
  4    15 	  3 init_ptr ptr aligned;
  4    16 
  4    17 
  4    18 /*
  4    19*seg_init_list_ptr is a pointer upon which the structure
  4    20*	        seg_init_list is based.  It is declared in
  4    21*	          cobol_.incl.pl1
  4    22*
  4    23*n	        is the number of COBOL segments containing
  4    24*	        alterable GO's.  All fixed segments are counted
  4    25*	        as one segment and assigned segment number 0.
  4    26*
  4    27*extra	        available for future use.
  4    28*
  4    29*seg	        is an array of seg_init_list.n structures which
  4    30*	        contain information about the segments contain-
  4    31*	        ing alterable GO's.  seg(1) always conatins
  4    32*	        information about fixed segments if there are
  4    33*	        any in the procedure.
  4    34*
  4    35*priority	        is the COBOL segment number associated with
  4    36*	        the "alterable" segment.
  4    37*
  4    38*int_tag_no        is an internal tag number associated with the
  4    39*	        first instruction of the code sequence generat-
  4    40*	        ed to initialize the alterable GO's in the seg-
  4    41*	        ment whose segment number is priority.  For
  4    42*	        priority = 0, int_tag_no = 0 since initializa-
  4    43*	        tion of alterable GO's in fixed segments is
  4    44*	        accomplished by   cobol_prologue_gen.
  4    45*
  4    46*no_gos	        is the number of alterable GO's in the segment
  4    47*	        whose segment number is priority.
  4    48*
  4    49*next_init_no      is the number of the next alterable GO in the
  4    50*	        segment whose segment number is priority for
  4    51*	        which initialization data entries are to be
  4    52*	        made in an area reserved for that purpose.  The
  4    53*	        base of this area is located by init_ptr.
  4    54*	        1<_next_init_no<_no_gos.
  4    55*
  4    56*init_ptr	        is a pointer to a block of 3 times no_gos words
  4    57*	        reserved for the storage of initialization data
  4    58*	        for the alterable GO's in the segment whose
  4    59*	        segment number is priority.
  4    60*
  4    61*
  4    62*						   */
  4    63 /*  END INCLUDE FILE ...   cobol_seg_init_list.incl.pl1		   */
  4    64 
      146 
  5     1 
  5     2 /* BEGIN INCLUDE FILE ... cobol_type7.incl.pl1 */
  5     3 /* Last modified on 11/19/76 by ORN */
  5     4 
  5     5 /*
  5     6*A type 7 procedure definition token is entered into the name table and into
  5     7*the procedure division minpral file by the lexical analysis phase for each
  5     8*procedure definition found in the source program.
  5     9**/
  5    10 
  5    11 dcl proc_def_ptr ptr;
  5    12 
  5    13 /* BEGIN DECLARATION OF TYPE7 (PROCEDURE DEFINITION) TOKEN */
  5    14 dcl  1 proc_def based (proc_def_ptr),
  6     1 
  6     2 /* begin include file ... cobol_TYPE7.incl.pl1 */
  6     3 /* Last modified on 11/17/76 by ORN */
  6     4 /* Last modified on 12/28/76 by FCH */
  6     5 
  6     6 		/* header */
  6     7 		2 size fixed bin,
  6     8 		2 line fixed bin,
  6     9 		2 column fixed bin,
  6    10 		2 type fixed bin,
  6    11 		/* body */
  6    12 		2 string_ptr ptr,
  6    13 		2 prev_rec ptr,
  6    14 		2 searched bit (1),
  6    15 		2 duplicate bit (1),
  6    16 		2 filler1 bit (1),
  6    17 		2 debug_ind bit (1),
  6    18 		2 section_name bit (1),
  6    19 		2 declarative_proc bit (1),
  6    20 		2 filler2 bit (1),
  6    21 		2 alterable bit (1),
  6    22 		2 priority char (2),
  6    23 		2 sort_range bit (1),
  6    24 		2 input_range bit (1),
  6    25 		2 output_range bit (1),
  6    26 		2 merge_range bit(1),
  6    27 		2 filler3 bit (5),
  6    28 		2 section_num fixed bin,
  6    29 		2 proc_num fixed bin,
  6    30 		2 def_line fixed bin,
  6    31 		2 name_size fixed bin,
  6    32 		2 name char(0 refer(proc_def.name_size));	
  6    33 
  6    34 
  6    35 
  6    36 /* end include file ... cobol_TYPE7.incl.pl1 */
  6    37 
  5    15 
  5    16 /* END DECLARATION OF TYPE7 (PROCEDURE DEFINITION) TOKEN */
  5    17 
  5    18 /* END INCLUDE FILE ... cobol_type7.incl.pl1 */
  5    19 
      147 
      148 
      149 
      150 dcl	proc_no		fixed bin,		/* Tag number of the section being
      151*			   entered.		   */
      152 	index		fixed bin;		/* Do loop index.		   */
      153 
      154 /* Instruction pair to transfer control to and establish return
      155*   from independent segment initialization code sequence.	   */
      156 
      157 dcl	seg_init_tra_inst_pr
      158 			(4) bit (18) unaligned static
      159 			init ("000000000000000010"b, "110011101000000100"b, "000000000000000000"b,
      160 			"111001000000000100"b);	/*
      161*The instructions produced are:
      162*     eaa  2,ic,
      163*     tra  0,1c
      164*						   */
      165 
      166 /*
      167*P__r_o_c_e_d_u_r_e_s_C__a_l_l_e_d:_
      168*						   */
      169 
      170 dcl	cobol_addr	entry (ptr, ptr, ptr),
      171 	cobol_define_tag	entry (fixed bin),
      172 	cobol_emit	entry (ptr, ptr, fixed bin),
      173 	cobol_make_tagref	entry (fixed bin, fixed bin, ptr),
      174 	cobol_register$load entry (ptr);
      175 
      176 /*
      177*B__u_i_l_t-__i_n_F__u_n_c_t_i_o_n_s_U__s_e_d:_
      178*						   */
      179 
      180 dcl	addr		builtin,
      181 	null		builtin,
      182 	substr		builtin,
      183 	unspec		builtin;
      184 
      185 /*}*/
      186 
  7     1 
  7     2 /* BEGIN INCLUDE FILE ... cobol_.incl.pl1 */
  7     3 /* last modified Feb 4, 1977 by ORN  */
  7     4 
  7     5 /* This file defines all external data used in the generator phase of Multics Cobol */
  7     6 
  7     7 /* POINTERS */
  7     8 dcl cobol_$text_base_ptr ptr  ext;
  7     9 dcl text_base_ptr ptr  defined (cobol_$text_base_ptr);
  7    10 dcl cobol_$con_end_ptr ptr  ext;
  7    11 dcl con_end_ptr ptr  defined (cobol_$con_end_ptr);
  7    12 dcl cobol_$def_base_ptr ptr  ext;
  7    13 dcl def_base_ptr ptr  defined (cobol_$def_base_ptr);
  7    14 dcl cobol_$link_base_ptr ptr  ext;
  7    15 dcl link_base_ptr ptr  defined (cobol_$link_base_ptr);
  7    16 dcl cobol_$sym_base_ptr ptr  ext;
  7    17 dcl sym_base_ptr ptr  defined (cobol_$sym_base_ptr);
  7    18 dcl cobol_$reloc_text_base_ptr ptr  ext;
  7    19 dcl reloc_text_base_ptr ptr  defined (cobol_$reloc_text_base_ptr);
  7    20 dcl cobol_$reloc_def_base_ptr ptr  ext;
  7    21 dcl reloc_def_base_ptr ptr  defined (cobol_$reloc_def_base_ptr);
  7    22 dcl cobol_$reloc_link_base_ptr ptr  ext;
  7    23 dcl reloc_link_base_ptr ptr  defined (cobol_$reloc_link_base_ptr);
  7    24 dcl cobol_$reloc_sym_base_ptr ptr  ext;
  7    25 dcl reloc_sym_base_ptr ptr  defined (cobol_$reloc_sym_base_ptr);
  7    26 dcl cobol_$reloc_work_base_ptr ptr  ext;
  7    27 dcl reloc_work_base_ptr ptr  defined (cobol_$reloc_work_base_ptr);
  7    28 dcl cobol_$pd_map_ptr ptr  ext;
  7    29 dcl pd_map_ptr ptr  defined (cobol_$pd_map_ptr);
  7    30 dcl cobol_$fixup_ptr ptr  ext;
  7    31 dcl fixup_ptr ptr  defined (cobol_$fixup_ptr);
  7    32 dcl cobol_$initval_base_ptr ptr  ext;
  7    33 dcl initval_base_ptr ptr  defined (cobol_$initval_base_ptr);
  7    34 dcl cobol_$initval_file_ptr ptr  ext;
  7    35 dcl initval_file_ptr ptr  defined (cobol_$initval_file_ptr);
  7    36 dcl cobol_$perform_list_ptr ptr  ext;
  7    37 dcl perform_list_ptr ptr  defined (cobol_$perform_list_ptr);
  7    38 dcl cobol_$alter_list_ptr ptr  ext;
  7    39 dcl alter_list_ptr ptr  defined (cobol_$alter_list_ptr);
  7    40 dcl cobol_$seg_init_list_ptr ptr  ext;
  7    41 dcl seg_init_list_ptr ptr  defined (cobol_$seg_init_list_ptr);
  7    42 dcl cobol_$temp_token_area_ptr ptr  ext;
  7    43 dcl temp_token_area_ptr ptr  defined (cobol_$temp_token_area_ptr);
  7    44 dcl cobol_$temp_token_ptr ptr  ext;
  7    45 dcl temp_token_ptr ptr  defined (cobol_$temp_token_ptr);
  7    46 dcl cobol_$token_block1_ptr ptr  ext;
  7    47 dcl token_block1_ptr ptr  defined (cobol_$token_block1_ptr);
  7    48 dcl cobol_$token_block2_ptr ptr  ext;
  7    49 dcl token_block2_ptr ptr  defined (cobol_$token_block2_ptr);
  7    50 dcl cobol_$minpral5_ptr ptr  ext;
  7    51 dcl minpral5_ptr ptr  defined (cobol_$minpral5_ptr);
  7    52 dcl cobol_$tag_table_ptr ptr  ext;
  7    53 dcl tag_table_ptr ptr  defined (cobol_$tag_table_ptr);
  7    54 dcl cobol_$map_data_ptr ptr  ext;
  7    55 dcl map_data_ptr ptr  defined (cobol_$map_data_ptr);
  7    56 dcl cobol_$ptr_status_ptr ptr  ext;
  7    57 dcl ptr_status_ptr ptr  defined (cobol_$ptr_status_ptr);
  7    58 dcl cobol_$reg_status_ptr ptr  ext;
  7    59 dcl reg_status_ptr ptr  defined (cobol_$reg_status_ptr);
  7    60 dcl cobol_$misc_base_ptr ptr ext;
  7    61 dcl misc_base_ptr ptr defined (cobol_$misc_base_ptr);
  7    62 dcl cobol_$misc_end_ptr ptr ext;
  7    63 dcl misc_end_ptr ptr defined (cobol_$misc_end_ptr);
  7    64 dcl cobol_$list_ptr ptr ext;
  7    65 dcl list_ptr ptr defined (cobol_$list_ptr);
  7    66 dcl cobol_$allo1_ptr ptr ext;
  7    67 dcl allo1_ptr ptr defined (cobol_$allo1_ptr);
  7    68 dcl cobol_$eln_ptr ptr ext;
  7    69 dcl eln_ptr ptr defined (cobol_$eln_ptr);
  7    70 dcl cobol_$diag_ptr ptr ext;
  7    71 dcl diag_ptr ptr defined (cobol_$diag_ptr);
  7    72 dcl cobol_$xref_token_ptr ptr ext;
  7    73 dcl xref_token_ptr ptr defined (cobol_$xref_token_ptr);
  7    74 dcl cobol_$xref_chain_ptr ptr ext;
  7    75 dcl xref_chain_ptr ptr defined (cobol_$xref_chain_ptr);
  7    76 dcl cobol_$statement_info_ptr ptr ext;
  7    77 dcl statement_info_ptr ptr defined (cobol_$statement_info_ptr);
  7    78 dcl cobol_$reswd_ptr ptr ext;
  7    79 dcl reswd_ptr ptr defined (cobol_$reswd_ptr);
  7    80 dcl cobol_$op_con_ptr ptr ext;
  7    81 dcl op_con_ptr ptr defined (cobol_$op_con_ptr);
  7    82 dcl cobol_$ntbuf_ptr ptr ext;
  7    83 dcl ntbuf_ptr ptr defined (cobol_$ntbuf_ptr);
  7    84 dcl cobol_$main_pcs_ptr ptr ext;
  7    85 dcl main_pcs_ptr ptr defined (cobol_$main_pcs_ptr);
  7    86 dcl cobol_$include_info_ptr ptr ext;
  7    87 dcl include_info_ptr ptr defined (cobol_$include_info_ptr);
  7    88 
  7    89 /* FIXED BIN */
  7    90 dcl cobol_$text_wd_off fixed bin  ext;
  7    91 dcl text_wd_off fixed bin  defined (cobol_$text_wd_off);
  7    92 dcl cobol_$con_wd_off fixed bin  ext;
  7    93 dcl con_wd_off fixed bin  defined (cobol_$con_wd_off);
  7    94 dcl cobol_$def_wd_off fixed bin  ext;
  7    95 dcl def_wd_off fixed bin  defined (cobol_$def_wd_off);
  7    96 dcl cobol_$def_max fixed bin  ext;
  7    97 dcl def_max fixed bin  defined (cobol_$def_max);
  7    98 dcl cobol_$link_wd_off fixed bin  ext;
  7    99 dcl link_wd_off fixed bin  defined (cobol_$link_wd_off);
  7   100 dcl cobol_$link_max fixed bin  ext;
  7   101 dcl link_max fixed bin  defined (cobol_$link_max);
  7   102 dcl cobol_$sym_wd_off fixed bin  ext;
  7   103 dcl sym_wd_off fixed bin  defined (cobol_$sym_wd_off);
  7   104 dcl cobol_$sym_max fixed bin  ext;
  7   105 dcl sym_max fixed bin  defined (cobol_$sym_max);
  7   106 dcl cobol_$reloc_text_max fixed bin(24)  ext;
  7   107 dcl reloc_text_max fixed bin(24)  defined (cobol_$reloc_text_max);
  7   108 dcl cobol_$reloc_def_max fixed bin(24)  ext;
  7   109 dcl reloc_def_max fixed bin(24)  defined (cobol_$reloc_def_max);
  7   110 dcl cobol_$reloc_link_max fixed bin(24)  ext;
  7   111 dcl reloc_link_max fixed bin(24)  defined (cobol_$reloc_link_max);
  7   112 dcl cobol_$reloc_sym_max fixed bin(24)  ext;
  7   113 dcl reloc_sym_max fixed bin(24)  defined (cobol_$reloc_sym_max);
  7   114 dcl cobol_$reloc_work_max fixed bin(24)  ext;
  7   115 dcl reloc_work_max fixed bin(24)  defined (cobol_$reloc_work_max);
  7   116 dcl cobol_$pd_map_index fixed bin  ext;
  7   117 dcl pd_map_index fixed bin  defined (cobol_$pd_map_index);
  7   118 dcl cobol_$cobol_data_wd_off fixed bin  ext;
  7   119 dcl cobol_data_wd_off fixed bin  defined (cobol_$cobol_data_wd_off);
  7   120 dcl cobol_$stack_off fixed bin  ext;
  7   121 dcl stack_off fixed bin  defined (cobol_$stack_off);
  7   122 dcl cobol_$max_stack_off fixed bin  ext;
  7   123 dcl max_stack_off fixed bin  defined (cobol_$max_stack_off);
  7   124 dcl cobol_$init_stack_off fixed bin  ext;
  7   125 dcl init_stack_off fixed bin  defined (cobol_$init_stack_off);
  7   126 dcl cobol_$pd_map_sw fixed bin  ext;
  7   127 dcl pd_map_sw fixed bin  defined (cobol_$pd_map_sw);
  7   128 dcl cobol_$next_tag fixed bin  ext;
  7   129 dcl next_tag fixed bin  defined (cobol_$next_tag);
  7   130 dcl cobol_$data_init_flag fixed bin  ext;
  7   131 dcl data_init_flag fixed bin  defined (cobol_$data_init_flag);
  7   132 dcl cobol_$seg_init_flag fixed bin  ext;
  7   133 dcl seg_init_flag fixed bin  defined (cobol_$seg_init_flag);
  7   134 dcl cobol_$alter_flag fixed bin  ext;
  7   135 dcl alter_flag fixed bin  defined (cobol_$alter_flag);
  7   136 dcl cobol_$sect_eop_flag fixed bin  ext;
  7   137 dcl sect_eop_flag fixed bin  defined (cobol_$sect_eop_flag);
  7   138 dcl cobol_$para_eop_flag fixed bin  ext;
  7   139 dcl para_eop_flag fixed bin  defined (cobol_$para_eop_flag);
  7   140 dcl cobol_$priority_no fixed bin  ext;
  7   141 dcl priority_no fixed bin  defined (cobol_$priority_no);
  7   142 dcl cobol_$compile_count fixed bin ext;
  7   143 dcl compile_count fixed bin defined (cobol_$compile_count);
  7   144 dcl cobol_$ptr_assumption_ind fixed bin ext;
  7   145 dcl ptr_assumption_ind fixed bin defined (cobol_$ptr_assumption_ind);
  7   146 dcl cobol_$reg_assumption_ind fixed bin ext;
  7   147 dcl reg_assumption_ind fixed bin defined (cobol_$reg_assumption_ind);
  7   148 dcl cobol_$perform_para_index fixed bin ext;
  7   149 dcl perform_para_index fixed bin defined (cobol_$perform_para_index);
  7   150 dcl cobol_$perform_sect_index fixed bin ext;
  7   151 dcl perform_sect_index fixed bin defined (cobol_$perform_sect_index);
  7   152 dcl cobol_$alter_index fixed bin ext;
  7   153 dcl alter_index fixed bin defined (cobol_$alter_index);
  7   154 dcl cobol_$list_off fixed bin ext;
  7   155 dcl list_off fixed bin defined (cobol_$list_off);
  7   156 dcl cobol_$constant_offset fixed bin ext;
  7   157 dcl constant_offset fixed bin defined (cobol_$constant_offset);
  7   158 dcl cobol_$misc_max fixed bin ext;
  7   159 dcl misc_max fixed bin defined (cobol_$misc_max);
  7   160 dcl cobol_$pd_map_max fixed bin ext;
  7   161 dcl pd_map_max fixed bin defined (cobol_$pd_map_max);
  7   162 dcl cobol_$map_data_max fixed bin ext;
  7   163 dcl map_data_max fixed bin defined (cobol_$map_data_max);
  7   164 dcl cobol_$fixup_max fixed bin ext;
  7   165 dcl fixup_max fixed bin defined (cobol_$fixup_max);
  7   166 dcl cobol_$tag_table_max fixed bin ext;
  7   167 dcl tag_table_max fixed bin defined (cobol_$tag_table_max);
  7   168 dcl cobol_$temp_token_max fixed bin ext;
  7   169 dcl temp_token_max fixed bin defined (cobol_$temp_token_max);
  7   170 dcl cobol_$allo1_max fixed bin ext;
  7   171 dcl allo1_max fixed bin defined (cobol_$allo1_max);
  7   172 dcl cobol_$eln_max fixed bin ext;
  7   173 dcl eln_max fixed bin defined (cobol_$eln_max);
  7   174 dcl cobol_$debug_enable fixed bin ext;
  7   175 dcl debug_enable fixed bin defined (cobol_$debug_enable);
  7   176 dcl cobol_$non_source_offset fixed bin ext;
  7   177 dcl non_source_offset fixed bin defined (cobol_$non_source_offset);
  7   178 dcl cobol_$initval_flag fixed bin ext;
  7   179 dcl initval_flag fixed bin defined (cobol_$initval_flag);
  7   180 dcl cobol_$date_compiled_sw fixed bin ext;
  7   181 dcl date_compiled_sw fixed bin defined (cobol_$date_compiled_sw);
  7   182 dcl cobol_$include_cnt fixed bin ext;
  7   183 dcl include_cnt fixed bin defined (cobol_$include_cnt);
  7   184 dcl cobol_$fs_charcnt fixed bin ext;
  7   185 dcl fs_charcnt fixed bin defined (cobol_$fs_charcnt);
  7   186 dcl cobol_$ws_charcnt fixed bin ext;
  7   187 dcl ws_charcnt fixed bin defined (cobol_$ws_charcnt);
  7   188 dcl cobol_$coms_charcnt fixed bin ext;
  7   189 dcl coms_charcnt fixed bin defined (cobol_$coms_charcnt);
  7   190 dcl cobol_$ls_charcnt fixed bin ext;
  7   191 dcl ls_charcnt fixed bin defined (cobol_$ls_charcnt);
  7   192 dcl cobol_$cons_charcnt fixed bin ext;
  7   193 dcl cons_charcnt fixed bin defined (cobol_$cons_charcnt);
  7   194 dcl cobol_$value_cnt fixed bin ext;
  7   195 dcl value_cnt fixed bin defined (cobol_$value_cnt);
  7   196 dcl cobol_$cd_cnt fixed bin ext;
  7   197 dcl cd_cnt fixed bin defined (cobol_$cd_cnt);
  7   198 dcl cobol_$fs_wdoff fixed bin ext;
  7   199 dcl fs_wdoff fixed bin defined (cobol_$fs_wdoff);
  7   200 dcl cobol_$ws_wdoff fixed bin ext;
  7   201 dcl ws_wdoff fixed bin defined (cobol_$ws_wdoff);
  7   202 dcl cobol_$coms_wdoff fixed bin ext;
  7   203 dcl coms_wdoff fixed bin defined (cobol_$coms_wdoff);
  7   204 
  7   205 /* CHARACTER */
  7   206 dcl cobol_$scratch_dir char (168)   aligned ext;
  7   207 dcl scratch_dir char (168)   aligned defined (cobol_$scratch_dir);			/* -42- */
  7   208 dcl cobol_$obj_seg_name char (32)   aligned ext;
  7   209 dcl obj_seg_name char (32)   aligned defined (cobol_$obj_seg_name);		/* -8- */
  7   210 
  7   211 /* BIT */
  7   212 dcl cobol_$xref_bypass bit(1) aligned ext;
  7   213 dcl xref_bypass bit(1) aligned defined (cobol_$xref_bypass);			/* -1- */
  7   214 dcl cobol_$same_sort_merge_proc bit(1) aligned ext;
  7   215 dcl same_sort_merge_proc bit(1) aligned defined (cobol_$same_sort_merge_proc);		/* -1- */
  7   216 
  7   217 
  7   218 /* END INCLUDE FILE ... cobol_incl.pl1*/
  7   219 
  7   220 
      187 
      188 
      189 start:						/*  Get procedure (tag) number of section being entered.	   */
      190 	proc_no = in_token.token_ptr (1) -> proc_def.proc_num;
      191 
      192 /*		  "PERFORM" Functions		   */
      193 
      194 	if cobol_$perform_list_ptr ^= null
      195 	then do;
      196 
      197 /* Paragraph terminated at end-of-perform range? */
      198 
      199 		if cobol_$para_eop_flag ^= 0
      200 		then /* Insert alterable GO */
      201 		     do;
      202 			call cobol_register$load (addr (register_request));
      203 			input_struc_basic.segno = perform_list.perf.target_a_segno (cobol_$perform_para_index);
      204 			input_struc_basic.char_offset =
      205 			     perform_list.perf.target_a_offset (cobol_$perform_para_index);
      206 			call cobol_addr (addr (input_struc_basic), addr (prfrm_altgo_inst_pr), null);
      207 			call cobol_emit (addr (prfrm_altgo_inst_pr), null, 2);
      208 			call cobol_define_tag (perform_list.perf.int_tag_no (cobol_$perform_para_index));
      209 			cobol_$para_eop_flag = 0;
      210 			cobol_$perform_para_index = cobol_$perform_para_index + 1;
      211 		     end;
      212 
      213 /* Section terminated at end-of-perform range? */
      214 
      215 		do index = 1 to cobol_$sect_eop_flag;
      216 		     call cobol_register$load (addr (register_request));
      217 		     input_struc_basic.segno = perform_list.perf.target_a_segno (cobol_$perform_sect_index);
      218 		     input_struc_basic.char_offset = perform_list.perf.target_a_offset (cobol_$perform_sect_index);
      219 		     call cobol_addr (addr (input_struc_basic), addr (prfrm_altgo_inst_pr), null);
      220 		     call cobol_emit (addr (prfrm_altgo_inst_pr), null, 2);
      221 		     if in_token.token_ptr (1) -> proc_def.declarative_proc = "0"b
      222 		     then call cobol_define_tag (perform_list.perf.int_tag_no (cobol_$perform_sect_index));
      223 
      224 		     else perform_list.perf.int_tag_no (cobol_$perform_sect_index) =
      225 			     -perform_list.perf.int_tag_no (cobol_$perform_sect_index);
      226 
      227 		     cobol_$perform_sect_index = cobol_$perform_sect_index + 1;
      228 		end;
      229 
      230 /* Section entered at end-of-perform range? */
      231 
      232 		cobol_$sect_eop_flag = 0;
      233 		cobol_$perform_sect_index = cobol_$perform_para_index;
      234 		if cobol_$perform_para_index <= perform_list.n
      235 		then do while (proc_no = perform_list.perf.proc_num (cobol_$perform_para_index));
      236 			cobol_$sect_eop_flag = cobol_$sect_eop_flag + 1;
      237 			cobol_$perform_para_index = cobol_$perform_para_index + 1;
      238 		     end;
      239 
      240 	     end;
      241 
      242 /*      Initialize segment containing section entered.	   */
      243 
      244 	if cobol_$seg_init_list_ptr ^= null
      245 	then do;
      246 		if unspec (in_token.token_ptr (1) -> proc_def.priority)
      247 		     ^= substr (unspec (cobol_$priority_no), 19, 18)
      248 		then do;
      249 			substr (unspec (cobol_$priority_no), 19, 18) =
      250 			     unspec (in_token.token_ptr (1) -> proc_def.priority);
      251 			if cobol_$priority_no > 49
      252 			then do index = 1 to seg_init_list.n;
      253 				if seg_init_list.seg.priority (index) = cobol_$priority_no
      254 				then do;
      255 					call cobol_emit (addr (seg_init_tra_inst_pr), null, 2);
      256 					call cobol_make_tagref (seg_init_list.seg.int_tag_no (index),
      257 					     cobol_$text_wd_off - 1, null);
      258 					goto end_do_loop;
      259 				     end;
      260 
      261 			     end;
      262 end_do_loop:
      263 		     end;
      264 
      265 	     end;
      266 
      267 /*  Associate procedure number with next location in text.   */
      268 
      269 	call cobol_define_tag (proc_no);
      270 
      271 	return;
      272 
      273      end cobol_section_gen;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    05/24/89  0832.6  cobol_section_gen.pl1             >spec>install>MR12.3-1048>cobol_section_gen.pl1
79           1    11/11/82  1712.7  cobol_in_token.incl.pl1           >ldd>include>cobol_in_token.incl.pl1
144          2    03/27/82  0439.7  cobol_perform_altgo.incl.pl1      >ldd>include>cobol_perform_altgo.incl.pl1
145          3    03/27/82  0439.8  cobol_perform_list.incl.pl1       >ldd>include>cobol_perform_list.incl.pl1
146          4    03/27/82  0439.8  cobol_seg_init_list.incl.pl1      >ldd>include>cobol_seg_init_list.incl.pl1
147          5    03/27/82  0439.9  cobol_type7.incl.pl1              >ldd>include>cobol_type7.incl.pl1
5-15         6    11/11/82  1712.7  cobol_TYPE7.incl.pl1              >ldd>include>cobol_TYPE7.incl.pl1
187          7    11/11/82  1712.7  cobol_.incl.pl1                   >ldd>include>cobol_.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
addr                                                   builtin function         dcl 180 ref 202 202 206 206 206 206 207 207 216 216
                                                                                  219 219 219 219 220 220 255 255
char_offset               4     000010 internal static fixed bin(24,0)          level 2 dcl 2-7 set ref 204* 218*
cobol_$para_eop_flag            000056 external static fixed bin(17,0)          dcl 7-138 set ref 199 209*
cobol_$perform_list_ptr         000046 external static pointer                  dcl 7-36 ref 194 203 204 208 217 218 221 224 224 234
                                                                                  234
cobol_$perform_para_index       000062 external static fixed bin(17,0)          dcl 7-148 set ref 203 204 208 210* 210 233 234 234
                                                                                  237* 237
cobol_$perform_sect_index       000064 external static fixed bin(17,0)          dcl 7-150 set ref 217 218 221 224 224 227* 227 233*
cobol_$priority_no              000060 external static fixed bin(17,0)          dcl 7-140 ref 246 249 251 253
cobol_$sect_eop_flag            000054 external static fixed bin(17,0)          dcl 7-136 set ref 215 232* 236* 236
cobol_$seg_init_list_ptr        000050 external static pointer                  dcl 7-40 ref 244 251 253 256
cobol_$text_wd_off              000052 external static fixed bin(17,0)          dcl 7-90 ref 256
cobol_addr                      000034 constant        entry                    external dcl 170 ref 206 219
cobol_define_tag                000036 constant        entry                    external dcl 170 ref 208 221 269
cobol_emit                      000040 constant        entry                    external dcl 170 ref 207 220 255
cobol_make_tagref               000042 constant        entry                    external dcl 170 ref 256
cobol_register$load             000044 constant        entry                    external dcl 170 ref 202 216
declarative_proc         10(05)        based           bit(1)                   level 2 packed packed unaligned dcl 5-14 ref 221
in_token                               based           structure                level 1 dcl 1-9
in_token_ptr                           parameter       pointer                  dcl 1-7 ref 24 189 221 246 249
index                           000101 automatic       fixed bin(17,0)          dcl 150 set ref 215* 251* 253 256*
input_struc_basic               000010 internal static structure                level 1 dcl 2-7 set ref 206 206 219 219
int_tag_no                5            based           fixed bin(17,0)          array level 3 in structure "perform_list" dcl 3-6
                                                                                  in procedure "cobol_section_gen" set ref 208* 221*
                                                                                  224* 224
int_tag_no                3            based           fixed bin(17,0)          array level 3 in structure "seg_init_list" dcl 4-7
                                                                                  in procedure "cobol_section_gen" set ref 256*
n                                      based           fixed bin(17,0)          level 2 in structure "perform_list" dcl 3-6
                                                                                  in procedure "cobol_section_gen" ref 234
n                                      based           fixed bin(17,0)          level 2 in structure "seg_init_list" dcl 4-7
                                                                                  in procedure "cobol_section_gen" ref 251
null                                                   builtin function         dcl 180 ref 194 206 206 207 207 219 219 220 220 244
                                                                                  255 255 256 256
perf                      1            based           structure                array level 2 dcl 3-6
perform_list                           based           structure                level 1 dcl 3-6
prfrm_altgo_inst_pr             000030 internal static bit(18)                  initial array packed unaligned dcl 2-78 set ref 206
                                                                                  206 207 207 219 219 220 220
priority                 10(09)        based           char(2)                  level 2 in structure "proc_def" packed packed
                                                                                  unaligned dcl 5-14 in procedure
                                                                                  "cobol_section_gen" ref 246 249
priority                  2            based           fixed bin(17,0)          array level 3 in structure "seg_init_list" dcl 4-7
                                                                                  in procedure "cobol_section_gen" ref 253
proc_def                               based           structure                level 1 unaligned dcl 5-14
proc_no                         000100 automatic       fixed bin(17,0)          dcl 150 set ref 189* 234 269*
proc_num                 12            based           fixed bin(17,0)          level 2 in structure "proc_def" dcl 5-14
                                                                                  in procedure "cobol_section_gen" ref 189
proc_num                  1            based           fixed bin(17,0)          array level 3 in structure "perform_list" dcl 3-6
                                                                                  in procedure "cobol_section_gen" ref 234
register_request                000016 internal static structure                level 1 dcl 2-38 set ref 202 202 216 216
seg                       2            based           structure                array level 2 dcl 4-7
seg_init_list                          based           structure                level 1 dcl 4-7
seg_init_tra_inst_pr            000032 internal static bit(18)                  initial array packed unaligned dcl 157 set ref 255
                                                                                  255
segno                     3     000010 internal static fixed bin(17,0)          level 2 dcl 2-7 set ref 203* 217*
substr                                                 builtin function         dcl 180 set ref 246 249*
target_a_offset           4            based           fixed bin(24,0)          array level 3 dcl 3-6 ref 204 218
target_a_segno            3            based           fixed bin(17,0)          array level 3 dcl 3-6 ref 203 217
token_ptr                 2            based           pointer                  array level 2 dcl 1-9 ref 189 221 246 249
unspec                                                 builtin function         dcl 180 ref 246 246 249 249

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
allo1_max                              defined         fixed bin(17,0)          dcl 7-171
allo1_ptr                              defined         pointer                  dcl 7-67
alter_flag                             defined         fixed bin(17,0)          dcl 7-135
alter_index                            defined         fixed bin(17,0)          dcl 7-153
alter_list_ptr                         defined         pointer                  dcl 7-39
cd_cnt                                 defined         fixed bin(17,0)          dcl 7-197
cobol_$allo1_max                       external static fixed bin(17,0)          dcl 7-170
cobol_$allo1_ptr                       external static pointer                  dcl 7-66
cobol_$alter_flag                      external static fixed bin(17,0)          dcl 7-134
cobol_$alter_index                     external static fixed bin(17,0)          dcl 7-152
cobol_$alter_list_ptr                  external static pointer                  dcl 7-38
cobol_$cd_cnt                          external static fixed bin(17,0)          dcl 7-196
cobol_$cobol_data_wd_off               external static fixed bin(17,0)          dcl 7-118
cobol_$compile_count                   external static fixed bin(17,0)          dcl 7-142
cobol_$coms_charcnt                    external static fixed bin(17,0)          dcl 7-188
cobol_$coms_wdoff                      external static fixed bin(17,0)          dcl 7-202
cobol_$con_end_ptr                     external static pointer                  dcl 7-10
cobol_$con_wd_off                      external static fixed bin(17,0)          dcl 7-92
cobol_$cons_charcnt                    external static fixed bin(17,0)          dcl 7-192
cobol_$constant_offset                 external static fixed bin(17,0)          dcl 7-156
cobol_$data_init_flag                  external static fixed bin(17,0)          dcl 7-130
cobol_$date_compiled_sw                external static fixed bin(17,0)          dcl 7-180
cobol_$debug_enable                    external static fixed bin(17,0)          dcl 7-174
cobol_$def_base_ptr                    external static pointer                  dcl 7-12
cobol_$def_max                         external static fixed bin(17,0)          dcl 7-96
cobol_$def_wd_off                      external static fixed bin(17,0)          dcl 7-94
cobol_$diag_ptr                        external static pointer                  dcl 7-70
cobol_$eln_max                         external static fixed bin(17,0)          dcl 7-172
cobol_$eln_ptr                         external static pointer                  dcl 7-68
cobol_$fixup_max                       external static fixed bin(17,0)          dcl 7-164
cobol_$fixup_ptr                       external static pointer                  dcl 7-30
cobol_$fs_charcnt                      external static fixed bin(17,0)          dcl 7-184
cobol_$fs_wdoff                        external static fixed bin(17,0)          dcl 7-198
cobol_$include_cnt                     external static fixed bin(17,0)          dcl 7-182
cobol_$include_info_ptr                external static pointer                  dcl 7-86
cobol_$init_stack_off                  external static fixed bin(17,0)          dcl 7-124
cobol_$initval_base_ptr                external static pointer                  dcl 7-32
cobol_$initval_file_ptr                external static pointer                  dcl 7-34
cobol_$initval_flag                    external static fixed bin(17,0)          dcl 7-178
cobol_$link_base_ptr                   external static pointer                  dcl 7-14
cobol_$link_max                        external static fixed bin(17,0)          dcl 7-100
cobol_$link_wd_off                     external static fixed bin(17,0)          dcl 7-98
cobol_$list_off                        external static fixed bin(17,0)          dcl 7-154
cobol_$list_ptr                        external static pointer                  dcl 7-64
cobol_$ls_charcnt                      external static fixed bin(17,0)          dcl 7-190
cobol_$main_pcs_ptr                    external static pointer                  dcl 7-84
cobol_$map_data_max                    external static fixed bin(17,0)          dcl 7-162
cobol_$map_data_ptr                    external static pointer                  dcl 7-54
cobol_$max_stack_off                   external static fixed bin(17,0)          dcl 7-122
cobol_$minpral5_ptr                    external static pointer                  dcl 7-50
cobol_$misc_base_ptr                   external static pointer                  dcl 7-60
cobol_$misc_end_ptr                    external static pointer                  dcl 7-62
cobol_$misc_max                        external static fixed bin(17,0)          dcl 7-158
cobol_$next_tag                        external static fixed bin(17,0)          dcl 7-128
cobol_$non_source_offset               external static fixed bin(17,0)          dcl 7-176
cobol_$ntbuf_ptr                       external static pointer                  dcl 7-82
cobol_$obj_seg_name                    external static char(32)                 dcl 7-208
cobol_$op_con_ptr                      external static pointer                  dcl 7-80
cobol_$pd_map_index                    external static fixed bin(17,0)          dcl 7-116
cobol_$pd_map_max                      external static fixed bin(17,0)          dcl 7-160
cobol_$pd_map_ptr                      external static pointer                  dcl 7-28
cobol_$pd_map_sw                       external static fixed bin(17,0)          dcl 7-126
cobol_$ptr_assumption_ind              external static fixed bin(17,0)          dcl 7-144
cobol_$ptr_status_ptr                  external static pointer                  dcl 7-56
cobol_$reg_assumption_ind              external static fixed bin(17,0)          dcl 7-146
cobol_$reg_status_ptr                  external static pointer                  dcl 7-58
cobol_$reloc_def_base_ptr              external static pointer                  dcl 7-20
cobol_$reloc_def_max                   external static fixed bin(24,0)          dcl 7-108
cobol_$reloc_link_base_ptr             external static pointer                  dcl 7-22
cobol_$reloc_link_max                  external static fixed bin(24,0)          dcl 7-110
cobol_$reloc_sym_base_ptr              external static pointer                  dcl 7-24
cobol_$reloc_sym_max                   external static fixed bin(24,0)          dcl 7-112
cobol_$reloc_text_base_ptr             external static pointer                  dcl 7-18
cobol_$reloc_text_max                  external static fixed bin(24,0)          dcl 7-106
cobol_$reloc_work_base_ptr             external static pointer                  dcl 7-26
cobol_$reloc_work_max                  external static fixed bin(24,0)          dcl 7-114
cobol_$reswd_ptr                       external static pointer                  dcl 7-78
cobol_$same_sort_merge_proc            external static bit(1)                   dcl 7-214
cobol_$scratch_dir                     external static char(168)                dcl 7-206
cobol_$seg_init_flag                   external static fixed bin(17,0)          dcl 7-132
cobol_$stack_off                       external static fixed bin(17,0)          dcl 7-120
cobol_$statement_info_ptr              external static pointer                  dcl 7-76
cobol_$sym_base_ptr                    external static pointer                  dcl 7-16
cobol_$sym_max                         external static fixed bin(17,0)          dcl 7-104
cobol_$sym_wd_off                      external static fixed bin(17,0)          dcl 7-102
cobol_$tag_table_max                   external static fixed bin(17,0)          dcl 7-166
cobol_$tag_table_ptr                   external static pointer                  dcl 7-52
cobol_$temp_token_area_ptr             external static pointer                  dcl 7-42
cobol_$temp_token_max                  external static fixed bin(17,0)          dcl 7-168
cobol_$temp_token_ptr                  external static pointer                  dcl 7-44
cobol_$text_base_ptr                   external static pointer                  dcl 7-8
cobol_$token_block1_ptr                external static pointer                  dcl 7-46
cobol_$token_block2_ptr                external static pointer                  dcl 7-48
cobol_$value_cnt                       external static fixed bin(17,0)          dcl 7-194
cobol_$ws_charcnt                      external static fixed bin(17,0)          dcl 7-186
cobol_$ws_wdoff                        external static fixed bin(17,0)          dcl 7-200
cobol_$xref_bypass                     external static bit(1)                   dcl 7-212
cobol_$xref_chain_ptr                  external static pointer                  dcl 7-74
cobol_$xref_token_ptr                  external static pointer                  dcl 7-72
cobol_data_wd_off                      defined         fixed bin(17,0)          dcl 7-119
compile_count                          defined         fixed bin(17,0)          dcl 7-143
coms_charcnt                           defined         fixed bin(17,0)          dcl 7-189
coms_wdoff                             defined         fixed bin(17,0)          dcl 7-203
con_end_ptr                            defined         pointer                  dcl 7-11
con_wd_off                             defined         fixed bin(17,0)          dcl 7-93
cons_charcnt                           defined         fixed bin(17,0)          dcl 7-193
constant_offset                        defined         fixed bin(17,0)          dcl 7-157
data_init_flag                         defined         fixed bin(17,0)          dcl 7-131
date_compiled_sw                       defined         fixed bin(17,0)          dcl 7-181
debug_enable                           defined         fixed bin(17,0)          dcl 7-175
def_base_ptr                           defined         pointer                  dcl 7-13
def_max                                defined         fixed bin(17,0)          dcl 7-97
def_wd_off                             defined         fixed bin(17,0)          dcl 7-95
diag_ptr                               defined         pointer                  dcl 7-71
eln_max                                defined         fixed bin(17,0)          dcl 7-173
eln_ptr                                defined         pointer                  dcl 7-69
fixup_max                              defined         fixed bin(17,0)          dcl 7-165
fixup_ptr                              defined         pointer                  dcl 7-31
fs_charcnt                             defined         fixed bin(17,0)          dcl 7-185
fs_wdoff                               defined         fixed bin(17,0)          dcl 7-199
include_cnt                            defined         fixed bin(17,0)          dcl 7-183
include_info_ptr                       defined         pointer                  dcl 7-87
init_stack_off                         defined         fixed bin(17,0)          dcl 7-125
initval_base_ptr                       defined         pointer                  dcl 7-33
initval_file_ptr                       defined         pointer                  dcl 7-35
initval_flag                           defined         fixed bin(17,0)          dcl 7-179
link_base_ptr                          defined         pointer                  dcl 7-15
link_max                               defined         fixed bin(17,0)          dcl 7-101
link_wd_off                            defined         fixed bin(17,0)          dcl 7-99
list_off                               defined         fixed bin(17,0)          dcl 7-155
list_ptr                               defined         pointer                  dcl 7-65
ls_charcnt                             defined         fixed bin(17,0)          dcl 7-191
main_pcs_ptr                           defined         pointer                  dcl 7-85
map_data_max                           defined         fixed bin(17,0)          dcl 7-163
map_data_ptr                           defined         pointer                  dcl 7-55
max_stack_off                          defined         fixed bin(17,0)          dcl 7-123
minpral5_ptr                           defined         pointer                  dcl 7-51
misc_base_ptr                          defined         pointer                  dcl 7-61
misc_end_ptr                           defined         pointer                  dcl 7-63
misc_max                               defined         fixed bin(17,0)          dcl 7-159
next_tag                               defined         fixed bin(17,0)          dcl 7-129
non_source_offset                      defined         fixed bin(17,0)          dcl 7-177
ntbuf_ptr                              defined         pointer                  dcl 7-83
obj_seg_name                           defined         char(32)                 dcl 7-209
op_con_ptr                             defined         pointer                  dcl 7-81
para_eop_flag                          defined         fixed bin(17,0)          dcl 7-139
pd_map_index                           defined         fixed bin(17,0)          dcl 7-117
pd_map_max                             defined         fixed bin(17,0)          dcl 7-161
pd_map_ptr                             defined         pointer                  dcl 7-29
pd_map_sw                              defined         fixed bin(17,0)          dcl 7-127
perform_list_ptr                       defined         pointer                  dcl 7-37
perform_para_index                     defined         fixed bin(17,0)          dcl 7-149
perform_sect_index                     defined         fixed bin(17,0)          dcl 7-151
priority_no                            defined         fixed bin(17,0)          dcl 7-141
proc_def_ptr                           automatic       pointer                  dcl 5-11
ptr_assumption_ind                     defined         fixed bin(17,0)          dcl 7-145
ptr_status_ptr                         defined         pointer                  dcl 7-57
reg_assumption_ind                     defined         fixed bin(17,0)          dcl 7-147
reg_status_ptr                         defined         pointer                  dcl 7-59
reloc_def_base_ptr                     defined         pointer                  dcl 7-21
reloc_def_max                          defined         fixed bin(24,0)          dcl 7-109
reloc_link_base_ptr                    defined         pointer                  dcl 7-23
reloc_link_max                         defined         fixed bin(24,0)          dcl 7-111
reloc_sym_base_ptr                     defined         pointer                  dcl 7-25
reloc_sym_max                          defined         fixed bin(24,0)          dcl 7-113
reloc_text_base_ptr                    defined         pointer                  dcl 7-19
reloc_text_max                         defined         fixed bin(24,0)          dcl 7-107
reloc_work_base_ptr                    defined         pointer                  dcl 7-27
reloc_work_max                         defined         fixed bin(24,0)          dcl 7-115
reswd_ptr                              defined         pointer                  dcl 7-79
same_sort_merge_proc                   defined         bit(1)                   dcl 7-215
scratch_dir                            defined         char(168)                dcl 7-207
sect_eop_flag                          defined         fixed bin(17,0)          dcl 7-137
seg_init_flag                          defined         fixed bin(17,0)          dcl 7-133
seg_init_list_ptr                      defined         pointer                  dcl 7-41
stack_off                              defined         fixed bin(17,0)          dcl 7-121
statement_info_ptr                     defined         pointer                  dcl 7-77
sym_base_ptr                           defined         pointer                  dcl 7-17
sym_max                                defined         fixed bin(17,0)          dcl 7-105
sym_wd_off                             defined         fixed bin(17,0)          dcl 7-103
tag_table_max                          defined         fixed bin(17,0)          dcl 7-167
tag_table_ptr                          defined         pointer                  dcl 7-53
temp_token_area_ptr                    defined         pointer                  dcl 7-43
temp_token_max                         defined         fixed bin(17,0)          dcl 7-169
temp_token_ptr                         defined         pointer                  dcl 7-45
text_base_ptr                          defined         pointer                  dcl 7-9
text_wd_off                            defined         fixed bin(17,0)          dcl 7-91
token_block1_ptr                       defined         pointer                  dcl 7-47
token_block2_ptr                       defined         pointer                  dcl 7-49
value_cnt                              defined         fixed bin(17,0)          dcl 7-195
ws_charcnt                             defined         fixed bin(17,0)          dcl 7-187
ws_wdoff                               defined         fixed bin(17,0)          dcl 7-201
xref_bypass                            defined         bit(1)                   dcl 7-213
xref_chain_ptr                         defined         pointer                  dcl 7-75
xref_token_ptr                         defined         pointer                  dcl 7-73

NAMES DECLARED BY EXPLICIT CONTEXT.
cobol_section_gen               000007 constant        entry                    external dcl 24
end_do_loop                     000425 constant        label                    dcl 262 ref 258
start                           000014 constant        label                    dcl 189

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       624         712     435         634
Length      1256     435        66         327     167          24

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
cobol_section_gen                    88 external procedure  is an external procedure.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 input_struc_basic           cobol_section_gen
000016 register_request            cobol_section_gen
000030 prfrm_altgo_inst_pr         cobol_section_gen
000032 seg_init_tra_inst_pr        cobol_section_gen

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
cobol_section_gen        000100 proc_no                     cobol_section_gen
                         000101 index                       cobol_section_gen

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
cobol_addr                    cobol_define_tag              cobol_emit                    cobol_make_tagref
cobol_register$load

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
cobol_$para_eop_flag          cobol_$perform_list_ptr       cobol_$perform_para_index     cobol_$perform_sect_index
cobol_$priority_no            cobol_$sect_eop_flag          cobol_$seg_init_list_ptr      cobol_$text_wd_off




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     24 000004       189 000014       194 000022       199 000026       202 000030       203 000040       204 000047
    206 000053       207 000073       208 000114       209 000126       210 000130       215 000131       216 000141
    217 000152       218 000161       219 000165       220 000205       221 000226       224 000250       227 000257
    228 000261       232 000263       233 000265       234 000267       236 000305       237 000306       238 000307
    244 000310       246 000314       249 000330       251 000333       253 000347       255 000357       256 000377
    258 000422       261 000423       269 000425       271 000434


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
