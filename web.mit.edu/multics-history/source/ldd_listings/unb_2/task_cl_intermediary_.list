	COMPILATION LISTING OF SEGMENT task_cl_intermediary_
	Compiled by: Multics PL/I Compiler, Release 33e, of October 6, 1992
	Compiled at: CGI                             
	Compiled on: 2000-04-18_1127.59_Tue_mdt
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 task_cl_intermediary_:
       12      procedure;
       13 
       14 declare  iox_$error_output pointer external;
       15 
       16 dcl  ioa_$ioa_switch entry options (variable),
       17      task_ctl_$current_task entry returns (fixed bin (35)),
       18      task_ctl_$schedule entry returns (bit aligned),
       19      task_ctl_$stop entry (fixed bin (35), fixed bin (35)),
       20      task_ctl_$die entry,
       21      ipc_$run entry;
       22 
       23 declare  code fixed bin (35);
       24 declare  task fixed bin (35);
       25 
       26 declare  (addr, null) builtin;
       27 
       28 declare  any_other condition;
       29 
       30 /* * * * * * * * * * * * * * * * * * * */
       31 
       32 	on any_other call task_ctl_$die;
       33 
       34 	task = task_ctl_$current_task ();
       35 	call ioa_$ioa_switch (iox_$error_output, "task_cl_intermediary_: task ^w suspended.", task);
       36 	call task_ctl_$stop (task, (0));
       37 	if ^task_ctl_$schedule () then call ipc_$run;
       38 	return;
       39 
       40      end task_cl_intermediary_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    04/18/00  1127.5  task_cl_intermediary_.pl1         >udd>sm>ds>w>ml>task_cl_intermediary_.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
any_other                       000102 stack reference condition                dcl 28 ref 32
ioa_$ioa_switch                 000012 constant        entry                    external dcl 16 ref 35
iox_$error_output               000010 external static pointer                  dcl 14 set ref 35*
ipc_$run                        000024 constant        entry                    external dcl 16 ref 37
task                            000100 automatic       fixed bin(35,0)          dcl 24 set ref 34* 35* 36*
task_ctl_$current_task          000014 constant        entry                    external dcl 16 ref 34
task_ctl_$die                   000022 constant        entry                    external dcl 16 ref 32
task_ctl_$schedule              000016 constant        entry                    external dcl 16 ref 37
task_ctl_$stop                  000020 constant        entry                    external dcl 16 ref 36

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
addr                                                   builtin function         dcl 26
code                                   automatic       fixed bin(35,0)          dcl 23
null                                                   builtin function         dcl 26

NAME DECLARED BY EXPLICIT CONTEXT.
task_cl_intermediary_           000023 constant        entry                    external dcl 11

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       254         302     136         264
Length       462     136        26         143     115           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
task_cl_intermediary_               102 external procedure  is an external procedure.  
on unit on line 32                   64 on unit               

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
task_cl_intermediary_    000100 task                        task_cl_intermediary_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return_mac          enable_op           ext_entry           int_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
ioa_$ioa_switch               ipc_$run                      task_ctl_$current_task        task_ctl_$die
task_ctl_$schedule            task_ctl_$stop

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
iox_$error_output




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000022        32 000030        34 000051        35 000060        36 000104        37 000116        38 000135


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
