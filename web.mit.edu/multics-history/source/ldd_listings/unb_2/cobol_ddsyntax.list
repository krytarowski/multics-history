	COMPILATION LISTING OF SEGMENT cobol_ddsyntax
	Compiled by: Multics PL/I Compiler, Release 31b, of April 24, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 05/24/89  1000.8 mst Wed
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        6*        *                                                         *
        7*        * Copyright (c) 1972 by Massachusetts Institute of        *
        8*        * Technology and Honeywell Information Systems, Inc.      *
        9*        *                                                         *
       10*        *********************************************************** */
       11 
       12 
       13 
       14 
       15 /****^  HISTORY COMMENTS:
       16*  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
       17*     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
       18*     MCR8060 cobol_ddsyntax.pl1 Reformatted code to new Cobol standard.
       19*                                                   END HISTORY COMMENTS */
       20 
       21 
       22 /* Modified on 10/17/83 by FCH, [5.2-2], check for type 10 token, phx16140(BUG562) */
       23 /* Modified on 07/07/83 by FCH, [5.2-1], lev 88 item causes abort if RW used, BUG552(phx15491) */
       24 /* Modified on 10/29/82 by FCH, [5.1-3], diag 3-35 put on prev token, BUG542(phx13372) */
       25 /* Modified on 10/29/82 by FCH, [5.1-2], places_left set for group items, BUG531(phx12991) */
       26 /* Modified on 11/24/81 by FCH, [5.1-1], RECORD CONTAINS clause may not contain ZERO, BUG5.1(phx11821) */
       27 /* Modified on 09/10/81 by FCH, [5.0-1], occ dep item followed by lev 66 item blows compiler, BUG502(phx11383) */
       28 /* Modified on 07/10/81 by FCH, [4.4-3], debug cards not processed unless use for debugging used (phx10378, BUG493) */
       29 /* Modified on 04/13/81 by FCH, [4.4-2], fix bugs in leveling for validation-81, BUG477 */
       30 /* Modified on 12/03/80 by FCH, [4.4-1], report writer added */
       31 /* Modified on 09/03/80 by FCH, [4.3-2], single digit level numbers detected */
       32 /* Modified on 04/15/80 by FCH, [4.2-5], emit diag cursor on proper line */
       33 /* Modified on 03/05/80 by FCH, [4.2-4], Fix BUG426 (TR3226) pic bbx(nn) failed when nn >= 31 */
       34 /* Modified on 01/03/80 by MHD, [4.2-3], issue leveling diag when filler defines condition name */
       35 /* Modified on 12/28/79 by MHD, [4.2-2], don't diag debug tokens (column=9999) when checking margin A */
       36 /* Modified on 11/20/79 by MHD, [4.2-1], check(74): also check for end of file for minpral */
       37 /* Modified on 10/08/79 by MHD, [4.0-5], check(74): check for COLUMN = 9999 (eat all DEBUG inserted statements) */
       38 /* Modified on 08/28/79 by FCH, [4.0-4], LEV_DIAG defined */
       39 /* Modified on 08/11/79 by FCH, [4.0-3], debug statement added */
       40 /* Modified on 03/27/79 by FCH, [4.0-2], leveling diags on fd clause */
       41 /* Modified on 03/22/79 by FCH, [4.0-1], check for duplicate data names */
       42 /* Modified since version 4.0 */
       43 
       44 
       45 
       46 
       47 
       48 
       49 /* format: style3 */
       50 cobol_ddsyntax:
       51      proc;
       52 
       53 	call cobol_initstatic;			/*sets sv_ptr*/
       54 	sv_ptr_auto = cobol_sv_ptr;			/*optimization of hpl code*/
       55 	stack_index = 0;
       56 
       57 	file_ptr = addr (file_key_area (1));
       58 
       59 /*[4.4-1]*/
       60 	first_rec = "1"b;				/*[4.4-1]*/
       61 	first_key, like_key = "00000";
       62 
       63 
       64 	qual_ptr = file_ptr;
       65 	qual_rec.size = 0;
       66 	key_qual_size = size (qual_rec) * 4;
       67 
       68 	fkey_ptr = file_ptr;
       69 	file_key.name_size = 0;
       70 	file_key_size = size (file_key) * 4;
       71 
       72 
       73 	prev_qual_key = "00000";
       74 
       75 /*[4.0-3]*/
       76 	FILE_REC_TAB.file_ind = "1"b;
       77 	FILE_REC_TAB.file_count = 0;
       78 
       79 /*[4.0-2]*/
       80 	lev_message_ptr = addr (lev_message);
       81 
       82 /*[4.0-2]*/
       83 	lev_message.size = 28;			/*[4.0-2]*/
       84 	lev_message.type = 5;			/*[4.0-2]*/
       85 	lev_message.run = 9;
       86 
       87 	mod_num = 0;
       88 
       89 	tf = 0;
       90 	all_ind = 0;
       91 
       92 	se = 0;
       93 	cslno = 0;
       94 	pre_end_sw = "0"b;
       95 	comp_end_sw = "0"b;
       96 
       97 	alf_key_ptr = addr (alf_key);
       98 
       99 	filstring_init = "ffffffffffffffffffffffffffffff";
      100 
      101 	character_tbl (1) = "0";
      102 	character_tbl (2) = " ";
      103 	unspec (character_tbl (3)) = "000000000"b;
      104 	unspec (character_tbl (4)) = "111111111"b;
      105 	unspec (character_tbl (5)) = "000000000"b;
      106 	unspec (character_tbl (6)) = "111111111"b;
      107 	character_tbl (7) = """";
      108 
      109 	ptr_to_char_tbl = addr (character_tbl);
      110 	call cobol_ddst (syntab_ptr);			/*don't care about second argument to cobol_ddst*/
      111 prelude:
      112 	dn_ptr = addr (cobol_wkbuf1_tbl.wkbuf1);
      113 	w2_ptr = addr (cobol_wkbuf2_tbl.wkbuf2);
      114 	cdtoken_ptr = w2_ptr;
      115 
      116 	begin;
      117 dcl	(comma, period, dollar, store)
      118 			char (1);			/* picproc insert */
      119 	     if fixed_common.dec_comma
      120 	     then do;
      121 		     comma = ",";
      122 		     period = ".";
      123 		     bit9 = unspec (comma);
      124 		     i = fixed (bit9, 35);
      125 		     bit9 = unspec (period);
      126 		     j = fixed (bit9, 35);
      127 		     store = transltble (i);
      128 		     transltble (i) = transltble (j);
      129 		     transltble (j) = store;
      130 		end;
      131 	end;
      132 
      133 	fixed_common.phase_name = "ddsynt";
      134 
      135 start:
      136 	current_line = 1;
      137 	trace_ptr = addr (interp);
      138 
      139 	tbit = fixed_common.syntax_trace;
      140 
      141 	if tbit
      142 	then call cobol_syntax_trace_$initialize_phase (trace_ptr, 2);
      143 
      144 
      145 
      146 	call scan;
      147 
      148 	go to loop;
      149 
      150 fail:
      151 	if tbit
      152 	then do;
      153 		interp.rec_ptr = min_ptr;
      154 		call cobol_syntax_trace_$trace (trace_ptr, tm2);
      155 	     end;
      156 
      157 	current_line = current_line + 1;
      158 
      159 loop:
      160 	interp.rec_ptr = min_ptr;
      161 new_inst:
      162 	syntax_line_ptr = addr (syntax_table (current_line));
      163 	TF = 0;
      164 
      165 	go to test (syntax_line.t_type);
      166 
      167 test (0):
      168 	if record.type ^= 1
      169 	then go to fail;
      170 	if rw.key ^= syntax_line.t_field
      171 	then go to fail;
      172 
      173 success:
      174 	if tbit
      175 	then call cobol_syntax_trace_$trace (trace_ptr, tm1);
      176 
      177 ucon:
      178 	if syntax_line.o_bit ^= " "
      179 	then do;
      180 		if syntax_line.o_bit > fixed_common.comp_level
      181 		then call lev_diag (syntax_line.a_num);
      182 		go to actretrn;
      183 	     end;
      184 
      185 	act_num = syntax_line.a_num;
      186 
      187 success_1:
      188 	if act_num < 50
      189 	then go to actlbl (act_num);
      190 
      191 	if act_num < 150
      192 	then call cobol_ddact1 (act_num);
      193 	else call cobol_ddact2 (act_num);
      194 
      195 actretrn:
      196 actlbl (0):
      197 actlbl (1):
      198 	current_line = syntax_line.s_exit;
      199 
      200 action_0:						/* action(0): */
      201 						/*[4.2-5]*/
      202 	if TF ^= 0
      203 	then call diag (TF, record.line, record.column);
      204 	if pre_end_sw
      205 	then go to pre_end;
      206 
      207 	if comp_end_sw
      208 	then go to comp_end;
      209 
      210 	if syntax_line.s_bit = "s"
      211 	then call scan;
      212 
      213 	go to loop;
      214 
      215 test (1):
      216 	go to check (syntax_line.t_field);
      217 
      218 test (2):						/* unconditional branch */
      219 	TF = syntax_line.t_field;
      220 	act_num = syntax_line.a_num;
      221 
      222 	if syntax_line.o_bit ^= " "
      223 	then do;
      224 		if syntax_line.o_bit > fixed_common.comp_level
      225 		then do;
      226 			mod_num = syntax_line.a_num;
      227 			call lev_diag (TF);
      228 		     end;
      229 
      230 		TF = 0;
      231 		act_num = 0;
      232 	     end;
      233 
      234 	if tbit
      235 	then call cobol_syntax_trace_$trace (trace_ptr, tm1);
      236 
      237 	go to success_1;
      238 
      239 test (3):						/* syntax routine test */
      240 	stack_index = stack_index + 1;
      241 
      242 	if stack_index > 30
      243 	then go to comp_end;
      244 
      245 	if tbit
      246 	then do;
      247 		interp.rec_ptr = min_ptr;
      248 		call cobol_syntax_trace_$trace (trace_ptr, tm3);
      249 	     end;
      250 
      251 	stack (stack_index) = current_line;
      252 	current_line = syntax_line.t_field;
      253 
      254 	go to loop;
      255 
      256 actlbl (2):					/* exit true */
      257 						/* action(1): */
      258 	current_line = stack (stack_index);
      259 
      260 	if tbit
      261 	then do;
      262 		interp.rec_ptr = min_ptr;
      263 		call cobol_syntax_trace_$trace (trace_ptr, tm4);
      264 	     end;
      265 
      266 	if syntax_line.s_bit = "s"
      267 	then call scan;
      268 
      269 	syntax_line_ptr = addr (syntax_table (current_line));
      270 	stack_index = stack_index - 1;
      271 
      272 	go to ucon;
      273 
      274 actlbl (3):					/* exit false */
      275 						/* action(2); */
      276 	current_line = stack (stack_index);
      277 
      278 	if tbit
      279 	then do;
      280 		interp.rec_ptr = min_ptr;
      281 		call cobol_syntax_trace_$trace (trace_ptr, tm5);
      282 	     end;
      283 
      284 	stack_index = stack_index - 1;
      285 	go to fail;
      286 
      287 actlbl (4):					/* jump index */
      288 						/* action(4): */
      289 	if min_eof
      290 	then go to pre_end;
      291 
      292 	current_line = rw.jump_index + syntax_line.s_exit;
      293 
      294 	go to action_0;
      295 
      296 
      297 declare	cobol_syntax_trace_$trace
      298 			entry (ptr, fixed bin);
      299 declare	cobol_syntax_trace_$initialize_phase
      300 			entry (ptr, fixed bin);
      301 
      302 declare	(syntax_line_ptr, trace_ptr)
      303 			ptr;
      304 declare	tbit		bit (1);
      305 declare	act		fixed bin;
      306 
      307 declare	tm1		fixed bin init (1),
      308 	tm2		fixed bin init (2),
      309 	tm3		fixed bin init (3),
      310 	tm4		fixed bin init (4),
      311 	tm5		fixed bin init (5);
      312 
      313 declare	1 interp,
      314 	  2 current_line	fixed bin,
      315 	  2 phase		fixed bin,
      316 	  2 rec_ptr	ptr,
      317 	  2 syntab_ptr	ptr,
      318 	  2 directory_ptr	ptr,
      319 	  2 source_ptr	ptr;
      320 
      321 declare	1 syntax_line	based (syntax_line_ptr),
      322 	  2 s_bit		char (1),
      323 	  2 o_bit		char (1),
      324 	  2 t_type	fixed bin,
      325 	  2 t_field	fixed bin,
      326 	  2 s_exit	fixed bin,
      327 	  2 a_num		fixed bin;
      328 
      329 declare	1 syntax_table	(0:10000) based (syntab_ptr),
      330 	  2 b1		fixed bin,
      331 	  2 b2		fixed bin,
      332 	  2 b3		fixed bin,
      333 	  2 b4		fixed bin,
      334 	  2 b5		fixed bin;
      335 
      336 
      337 actlbl (5):					/*action(77)*/
      338 						/* first entry in ref table */
      339 						/*[4.4-1]*/
      340 	ref_table_size = 1;
      341 
      342 /*[4.4-1]*/
      343 	ref.length (1) = user_word.word_size;		/*[4.4-1]*/
      344 	ref.name (1) = substr (user_word.word, 1, user_word.word_size);
      345 						/*[4.4-1]*/
      346 	ref.size (1) = user_word.word_size;
      347 
      348 	go to actretrn;
      349 
      350 /*level number*/
      351 actlbl (6):					/*action(8):*/
      352 						/*[5.1-1]*/
      353 	if record.type = 2
      354 	then save_level = fixed (numeric_lit.literal);
      355 	else save_level = 1;
      356 	substr (vector_part, 7) = "0"b;
      357 
      358 	goto actretrn;
      359 
      360 /* store_data_name */
      361 actlbl (7):					/*action(12):*/
      362 	dnl = ul;
      363 	save_dname = "                              ";
      364 	substr (save_dname, 1, dnl) = substr (user_word.word, 1, dnl);
      365 lbl12:
      366 	save_line = record.line;
      367 	save_column = record.column;
      368 	goto actretrn;
      369 
      370 /*filler*/
      371 actlbl (8):					/*action(14):*/
      372 						/*[4.2-3]*/
      373 	saved_line = record.line;			/*[4.2-3]*/
      374 	saved_column = record.column;			/*[4.2-3]*/
      375 	filler_flag = "1"b;
      376 
      377 	dnl = 6;
      378 	save_dname = "FILLER                        ";
      379 	vector_map.filler_item = "1"b;
      380 	goto lbl12;
      381 
      382 
      383 /* semantic_consistency_analysis */
      384 
      385 actlbl (9):					/*action(17):*/
      386 	if vector_map.elementary
      387 	then do;
      388 		if (substr (vector_part, 9, 32) & non_display_bits_mask) = "0"b
      389 		then vector_map.display = "1"b;
      390 		else if (substr (vector_part, 9, 32) & numeric_usage_bits_mask) ^= "0"b
      391 		then vector_map.numeric = "1"b;
      392 	     end;
      393 
      394 /*test for unsigned packed decimal on Level 64*/
      395 
      396 	if vector_map.bwz = "1"b & vector_map.numeric = "1"b
      397 	then do;
      398 
      399 		vector_map.numeric_edited = "1"b;
      400 		vector_map.numeric = "0"b;
      401 
      402 	     end;
      403 
      404 	if vector_map.pic_has_s & vector_map.numeric & vector_map.display & vector_map.sign_type = "000"b
      405 	then do;
      406 		vector_map.sign_type = fixed_common.default_sign_type;
      407 
      408 		if vector_map.sign_type = "100"b | vector_map.sign_type = "011"b
      409 		then vector_map.sign_separate = "1"b;
      410 	     end;
      411 
      412 	if vector_map.fig_zero = "1"b
      413 	then if vector_map.numeric = "1"b
      414 	     then vector_map.value_numeric = "1"b;
      415 	     else vector_map.value_non_numeric = "1"b;
      416 
      417 	if vector_map.code_set
      418 	then do;
      419 
      420 		if ^vector_map.display & vector_map.elementary
      421 		then do;
      422 			if vector_map.code_set_class1
      423 			then tf = 199;		/*fatal*/
      424 			else tf = 200;		/*nonfatal*/
      425 
      426 			call diag (tf, record.line, record.column);
      427 			goto l17;
      428 		     end;
      429 
      430 		if vector_map.numeric
      431 		then do;
      432 
      433 			if vector_map.pic_has_s & ^vector_map.sign_separate
      434 						/* implies not display */
      435 			then do;
      436 				if vector_map.code_set_class1
      437 				then tf = 188;	/*fatal*/
      438 				else tf = 198;	/*nonfatal*/
      439 						/*[4.2-5]*/
      440 				call diag (tf, record.line, record.column);
      441 			     end;
      442 		     end;
      443 
      444 	     end;
      445 l17:
      446 	if vector_map.inherit_value | vector_map.non_elementary
      447 	then vector_map.elem_no_value = "0"b;
      448 	else vector_map.elem_no_value = "1"b;
      449 
      450 /* Move Vector_map bits into data_name.description bits. */
      451 
      452 	addr (data_name.file_section) -> bit72 = vectord.descr;
      453 
      454 	if data_name.non_elementary
      455 	then do;
      456 		cobol_htbl.minivector (h) = vectord.minivector;
      457 	     end;
      458 
      459 	do i = 1 to 83;
      460 
      461 	     if vectora (i)
      462 	     then do;
      463 
      464 		     vectemp = vector_part & (m1 (i) || m2 (i));
      465 
      466 		     if vectemp
      467 		     then do;
      468 
      469 /* store diag info for cobol_c_list */
      470 
      471 			     message_ptr = addr (message_area);
      472 			     message.length = 16;
      473 			     message.size = msg_constant + 16;
      474 
      475 			     message.line = s_lin;
      476 			     message.column = s_col;
      477 
      478 			     message.type = 5;
      479 			     message.run3 = 3;
      480 			     message.info.para = "1"b;
      481 			     message.info.rep = "0"b;
      482 			     message.info.fillerx = "000000"b;
      483 			     message.number = 9;
      484 			     ptr4 = addr (message.image);
      485 
      486 			     mi_overlay_bit9 = substr (unspec (i), 28, 9);
      487 
      488 			     mi_overlay_part = vectemp;
      489 
      490 			     call cobol_c_list (message_ptr);
      491 
      492 			end;
      493 		end;
      494 	end;
      495 
      496 /* This bit may not be set until after the contradiction analysis has been completed, to avoid spurious diags: */
      497 
      498 	if data_name.non_elementary
      499 	then data_name.alphanum = "1"b;
      500 
      501 	if vector_map.elementary
      502 	then if data_name.initial_ptr ^= 0
      503 	     then do;
      504 		     ptr1 = addr (dn_ptr -> any_item (data_name.initial_ptr));
      505 		     tf = cobol_pic_val_comp (dn_ptr, ptr1);
      506 
      507 /*[4.2-5]*/
      508 		     if tf > 0
      509 		     then call diag (tf, dn_ptr -> record.line, dn_ptr -> record.column);
      510 
      511 		     tf = 0;			/**in case set to -1 by cobol_pic_val_comp*/
      512 
      513 		end;
      514 
      515 	if save_switch_88
      516 	then do;
      517 
      518 		save_switch_88 = "0"b;
      519 
      520 		if no_of_88s = 0
      521 		then goto l17aaa;
      522 
      523 /* If data_name is non-elementary we still want to update description bits in
      524*		   the type 9 token. Consistency checking of condition-name values will be
      525*		   performed in action(21), hierarchy analysis, after this non-elementary
      526*		   item has been completed. */
      527 
      528 		if data_name.non_elementary
      529 		then go to l17aaa;
      530 
      531 		rnt_key = save_wkey;		/* set in action 70 */
      532 
      533 		if save_wkey = null_key
      534 		then go to l17aaa;
      535 
      536 		call cobol_vdwf_dget (cobol_ntfp, fstatus, rnt_ptr, rnt_size, rnt_key);
      537 l17a:
      538 		if no_of_88s = 0
      539 		then goto l17aaa;
      540 
      541 		no_of_88s = no_of_88s - 1;
      542 
      543 		call cobol_vdwf_sget (cobol_ntfp, fstatus, rnt_ptr, rnt_size, rnt_key);
      544 
      545 		if substr (fstatus, 17, 16) ^= "0000000000000000"b
      546 		then go to l17aaa;
      547 
      548 		temp_bin1 = cn_constant + rnt_ptr -> conditioname.name_size;
      549 
      550 		temp_bin1 = temp_bin1 + mod (-temp_bin1, 4);
      551 
      552 		temp_bin2 = rnt_ptr -> conditioname.numlits;
      553 
      554 		if temp_bin2 < 1
      555 		then goto l17a;
      556 
      557 /*will be 0 if value was not syntactically valid*/
      558 l17aa:
      559 		ptr1 = addr (rnt_ptr -> any_item (temp_bin1 + 1));
      560 		tf = cobol_pic_val_comp (dn_ptr, ptr1);
      561 
      562 /*[4.2-5]*/
      563 		if tf > 0
      564 		then call diag (tf, dn_ptr -> record.line, dn_ptr -> record.column);
      565 
      566 		if tf < 0
      567 		then do;
      568 			call cobol_vdwf_dput (cobol_ntfp, fstatus, rnt_ptr, rnt_size, rnt_key);
      569 			tf = 0;
      570 		     end;
      571 
      572 		if ptr1 -> numinit.initype.numeric
      573 		then temp_bin1 = temp_bin1 + niv_constant + ptr1 -> numinit.length;
      574 
      575 		else do;
      576 			if ptr1 -> alphainit.initype.fig_con
      577 			then do;
      578 				if ptr1 -> alphainit.info.fig_con_index = "0000001"b
      579 				then temp_bin1 = temp_bin1 + niv_constant + 1;
      580 				else temp_bin1 = temp_bin1 + aiv_constant;
      581 			     end;
      582 			else temp_bin1 = temp_bin1 + aiv_constant + ptr1 -> alphainit.length;
      583 		     end;
      584 
      585 		temp_bin1 = temp_bin1 + mod (-temp_bin1, 4);
      586 
      587 		if temp_bin2 = 1
      588 		then goto l17a;
      589 
      590 		temp_bin2 = temp_bin2 - 1;
      591 		goto l17aa;
      592 
      593 l17aaa:
      594 		call cobol_vdwf_dput (cobol_ntfp, fstatus, dn_ptr, data_name.size, save_wkey);
      595 
      596 /*update description bits in type9 token*/
      597 		no_of_88s = 0;
      598 		save_wkey = null_key;
      599 
      600 	     end;
      601 
      602 /*[4.4-1]*/
      603 	s_lin = record.line;
      604 	s_col = record.column;
      605 	goto actretrn;
      606 
      607 
      608 /*write item not followed by subject of redefines*/
      609 actlbl (10):					/*action(18):*/
      610 						/*write completed(previous)dataname token*/
      611 	if bnw ^= 0
      612 	then do;
      613 		rnt_ptr = dn_ptr;
      614 		nt_size = data_name.size;
      615 
      616 		call cobol_vdwf_sput (cobol_ntfp, fstatus, rnt_ptr, nt_size, w_key);
      617 
      618 /*[4.0-3]*/
      619 		if FILE_REC_TAB.file_ind		/*[4.0-3]*/
      620 		then do;
      621 			FILE_REC_TAB.file_key (FILE_REC_TAB.file_count) = w_key;
      622 						/*[4.0-3]*/
      623 			FILE_REC_TAB.file_ind = "0"b; /*[4.0-3]*/
      624 		     end;
      625 
      626 		if data_name.level = 1
      627 		then do;
      628 
      629 
      630 			if data_name.exp_redefining
      631 			then rdf_01_sav = w_key;
      632 
      633 			else do;
      634 				save_01 = w_key;
      635 				rdf_01_sav = null_key;
      636 			     end;
      637 
      638 		     end;
      639 
      640 		if data_name.non_elementary
      641 		then cobol_htbl.nt_rec (h) = w_key;
      642 
      643 /*[4.4-1]*/
      644 		if first_rec			/*[4.4-1]*/
      645 		then do;
      646 			first_rec = "0"b;		/*[4.4-1]*/
      647 			first_key = w_key;		/*[4.4-1]*/
      648 		     end;
      649 
      650 	     end;
      651 
      652 	ptr4 = addr (cobol_wkbuf1_tbl);
      653 
      654 	ptr4 -> cntbuf = 0;
      655 
      656 
      657 	data_name.type = 9;
      658 	data_name.line = save_line;
      659 	data_name.def_line = save_line;
      660 	data_name.column = save_column;
      661 	data_name.level = save_level;
      662 	data_name.do_rec = null_key;
      663 
      664 	if file_number ^= 0
      665 	then data_name.file_num = file_number;
      666 	else data_name.file_num = cdno;
      667 
      668 	data_name.name_size = dnl;
      669 	substr (data_name.name, 1, dnl) = substr (save_dname, 1, dnl);
      670 	data_name.size = dn_constant + dnl;
      671 
      672 
      673 
      674 /*[4.0-3]*/
      675 	if fixed_common.debug			/*[4.0-3]*/
      676 	then data_name.size = data_name.size + 32 - data_name.name_size;
      677 
      678 	data_name.size = data_name.size + mod (-data_name.size, 4);
      679 
      680 	ptr1 = addr (dn_ptr -> any_item (data_name.size + 1));
      681 
      682 	if data_name.level = 1
      683 	then do;
      684 
      685 		ptr4 = addr (cobol_htbl);
      686 
      687 		ptr4 -> chtbl = 0;
      688 
      689 	     end;
      690 
      691 
      692 
      693 	bnw = 1;					/*buf needs write*/
      694 
      695 	goto actretrn;
      696 
      697 
      698 /*level 01*/
      699 actlbl (11):					/*action(20):*/
      700 	vector_map.level_01 = "1"b;
      701 
      702 /*[4.4-1]*/
      703 	like_clause = "0"b;
      704 
      705 	ixix = 0;
      706 	ll01 = "1"b;
      707 
      708 	if vector_map.file_section
      709 	then if file_number ^= 0
      710 	     then do;
      711 		     cm_key = fixed_common.filedescr_offsets (file_number);
      712 
      713 		     call cobol_vdwf_dget (cobol_cmfp, fstatus, cm_ptr, cm_size, cm_key);
      714 
      715 		     ft_ptr = cm_ptr;
      716 		     vector_map.code_set = file_table.code_set_clause;
      717 
      718 		     if file_table.code_set = 3	/*jis*/
      719 		     then vector_map.code_set_class1 = "1"b;
      720 		end;
      721 
      722 	offset_ct = 0;
      723 	h = 0;
      724 	odim = 0;
      725 	save_line_for66 = 0;
      726 
      727 	goto actretrn;
      728 
      729 
      730 /* hierarchy analysis */
      731 actlbl (12):					/*action(21):*/
      732 	data_name.offset = offset_ct;
      733 
      734 	if ^vector_map.exp_redefining
      735 	then save_offsets (data_name.level) = offset_ct;
      736 
      737 	if data_name.occurs_ptr ^= 0
      738 	then if ^data_name.key_a & ^data_name.key_d
      739 	     then occurs.keyed = 0;
      740 
      741 	if data_name.level < next_level
      742 	then goto groupa21;
      743 
      744 /*current item elementary,some undetermined number of group items may be finished*/
      745 
      746 	vector_map.elementary = "1"b;
      747 
      748 	if vector_map.occurs_do & next_level ^= 1
      749 	then call DIAG (31);
      750 
      751 	if h ^= 0 & ^vector_map.assoc_with_signed_num_display
      752 	then do;
      753 		vector_map.sign_type = "0"b;
      754 		vector_map.sign_separate = "0"b;
      755 	     end;
      756 
      757 	if ^vector_map.picture_clause & (substr (vector_part, 9, 32) & pic_suff_bits_mask) = "0"b
      758 	then vector_map.no_picture = "1"b;
      759 
      760 	call data_length;
      761 
      762 	if ^vector_map.occurs_clause
      763 	then temp_bin1 = data_name.item_length;
      764 	else temp_bin1 = data_name.item_length * save_occno;
      765 
      766 	offset_ct = offset_ct + temp_bin1;		/*add current item length to ancestors in cobol_htbl*/
      767 
      768 	if vector_map.exp_redefining | h = 0
      769 	then goto no_add;
      770 
      771 	fh = h;
      772 elem1:
      773 	cobol_htbl.item_length (fh) = cobol_htbl.item_length (fh) + temp_bin1;
      774 
      775 	if cobol_htbl.occurs_clause (fh)
      776 	then temp_bin1 = temp_bin1 * cobol_htbl.occno (fh);
      777 
      778 	if cobol_htbl.exp_redefining (fh) | fh = 1
      779 	then goto no_add;
      780 
      781 	fh = fh - 1;
      782 	goto elem1;
      783 
      784 no_add:
      785 	if data_name.occurs_ptr ^= 0 & vector_map.occurs_clause
      786 	then do;
      787 
      788 		ptr1 = addr (dn_ptr -> any_item (data_name.occurs_ptr));
      789 		odim = occurs.dimensions;
      790 		occurs.level.struclength (odim) = data_name.item_length;
      791 
      792 		if ^vector_map.key_a & ^vector_map.key_d
      793 		then occurs.keyed = 0;
      794 
      795 		if vector_map.indexed_by
      796 		then do;
      797 
      798 			if ixix ^= 0
      799 			then do;
      800 
      801 				j = occurs.level.indexedno (odim);
      802 				k = data_name.offset;
      803 
      804 				if ix_ino (ixix) = j
      805 				then do;
      806 elema21ix2:
      807 					rnt_key = ix_key (ixix);
      808 					save_w2 = w2_ptr;
      809 
      810 					call cobol_vdwf_dget (cobol_ntfp, fstatus, rnt_ptr, rnt_size, rnt_key);
      811 
      812 					w2_ptr = rnt_ptr;
      813 					indexname.struc_length = data_name.item_length;
      814 					indexname.offset = data_name.offset;
      815 
      816 					call cobol_vdwf_dput (cobol_ntfp, fstatus, rnt_ptr, rnt_size, rnt_key);
      817 
      818 					w2_ptr = save_w2;
      819 					ixix = ixix - 1;
      820 
      821 					if ixix = 0
      822 					then goto elema21end;
      823 
      824 					if ix_ino (ixix) = j
      825 					then goto elema21ix2;
      826 					else go to elema21end;
      827 
      828 				     end;
      829 			     end;
      830 
      831 		     end;
      832 
      833 
      834 	     end;
      835 
      836 elema21end:
      837 	if data_name.level = next_level
      838 	then goto actretrn;
      839 
      840 lbl21a:
      841 	if cobol_htbl.level (h) < next_level
      842 	then goto actretrn;
      843 
      844 	save_ptr = dn_ptr;
      845 	rnt_key = cobol_htbl.nt_rec (h);
      846 
      847 	call cobol_vdwf_dget (cobol_ntfp, fstatus, rnt_ptr, rnt_size, rnt_key);
      848 
      849 	dn_ptr = rnt_ptr;				/*[5.1-2]*/
      850 	data_name.item_length, data_name.places_left = cobol_htbl.item_length (h);
      851 
      852 	if cobol_htbl.do_rec_valid (h) & ^data_name.occurs_do
      853 	then do;
      854 
      855 		data_name.variable_length = "1"b;
      856 		data_name.do_rec = cobol_htbl.do_rec (h);
      857 
      858 	     end;
      859 
      860 	if data_name.occurs_do
      861 	then if next_level ^= 1
      862 	     then call DIAG (31);
      863 
      864 	if data_name.initial_ptr ^= 0
      865 	then do;
      866 
      867 		ptr1 = addr (dn_ptr -> any_item (data_name.initial_ptr));
      868 		tf = cobol_pic_val_comp (dn_ptr, ptr1);
      869 
      870 /*[4.2-5]*/
      871 		if tf > 0
      872 		then call diag (tf, dn_ptr -> record.line, dn_ptr -> record.column);
      873 
      874 		tf = 0;				/*in case set to -1*/
      875 
      876 	     end;
      877 
      878 	if data_name.sign_clause_occurred & ^substr (cobol_htbl.minivector (h), 12, 1)
      879 	then call DIAG (190);
      880 
      881 	if ^data_name.exp_occurs | data_name.occurs_ptr = 0
      882 	then do;
      883 		call cobol_vdwf_dput (cobol_ntfp, fstatus, rnt_ptr, rnt_size, rnt_key);
      884 		goto end21;
      885 
      886 	     end;
      887 
      888 	ptr1 = addr (dn_ptr -> any_item (data_name.occurs_ptr));
      889 	odim = occurs.dimensions;
      890 	occurs.level.struclength (odim) = cobol_htbl.item_length (h);
      891 	offset_ct = save_offsets (data_name.level) + data_name.item_length * cobol_htbl.occno (h);
      892 
      893 	if ^data_name.key_a & ^data_name.key_d
      894 	then occurs.keyed = 0;
      895 
      896 	call cobol_vdwf_dput (cobol_ntfp, fstatus, rnt_ptr, rnt_size, rnt_key);
      897 
      898 	if ^data_name.indexed_by | ixix = 0
      899 	then go to end21;
      900 
      901 /*pop indexname stack*/
      902 
      903 	j = occurs.level.indexedno (odim);
      904 	k = data_name.offset;			/*will otherwise be lost when io operation done*/
      905 
      906 	if ix_ino (ixix) = j
      907 	then do;
      908 ix2:
      909 		rnt_key = ix_key (ixix);
      910 		save_w2 = w2_ptr;
      911 
      912 		call cobol_vdwf_dget (cobol_ntfp, fstatus, rnt_ptr, rnt_size, rnt_key);
      913 
      914 		w2_ptr = rnt_ptr;
      915 		indexname.struc_length = cobol_htbl.item_length (h);
      916 		indexname.offset = k;
      917 
      918 		call cobol_vdwf_dput (cobol_ntfp, fstatus, rnt_ptr, rnt_size, rnt_key);
      919 
      920 		w2_ptr = save_w2;
      921 		ixix = ixix - 1;
      922 
      923 		if ixix = 0
      924 		then goto end21;
      925 
      926 		if ix_ino (ixix) = j
      927 		then goto ix2;
      928 		else go to end21;
      929 	     end;
      930 
      931 end21:
      932 	if cobol_htbl.switch_88 (h)
      933 	then do;
      934 
      935 		rnt_key = cobol_htbl.nt_rec (h);
      936 
      937 		if rnt_key = null_key
      938 		then goto l21aaa;
      939 
      940 		call cobol_vdwf_dget (cobol_ntfp, fstatus, rnt_ptr, rnt_size, rnt_key);
      941 l21a:
      942 		call cobol_vdwf_sget (cobol_ntfp, fstatus, rnt_ptr, rnt_size, rnt_key);
      943 
      944 		if substr (fstatus, 17, 16) ^= "0"b | rnt_ptr -> record.type ^= 11
      945 		then go to l21aaa;
      946 
      947 		temp_bin1 = cn_constant + rnt_ptr -> conditioname.name_size;
      948 
      949 		temp_bin1 = temp_bin1 + mod (-temp_bin1, 4);
      950 
      951 		temp_bin2 = rnt_ptr -> conditioname.numlits;
      952 
      953 		if temp_bin2 < 1
      954 		then goto l21a;
      955 l21aa:
      956 		ptr1 = addr (rnt_ptr -> any_item (temp_bin1 + 1));
      957 		tf = cobol_pic_val_comp (dn_ptr, ptr1);
      958 
      959 /*[4.2-5]*/
      960 		if tf > 0
      961 		then call diag (tf, dn_ptr -> record.line, dn_ptr -> record.column);
      962 
      963 		if tf < 0
      964 		then do;
      965 			tf = 0;
      966 			call cobol_vdwf_dput (cobol_ntfp, fstatus, rnt_ptr, rnt_size, rnt_key);
      967 		     end;
      968 
      969 		if ptr1 -> numinit.initype.numeric
      970 		then temp_bin1 = temp_bin1 + niv_constant + ptr1 -> numinit.length;
      971 
      972 		else do;
      973 			if ptr1 -> alphainit.initype.fig_con
      974 			then do;
      975 				if ptr1 -> alphainit.info.fig_con_index = "0000001"b
      976 				then temp_bin1 = temp_bin1 + niv_constant + 1;
      977 				else temp_bin1 = temp_bin1 + aiv_constant;
      978 			     end;
      979 			else temp_bin1 = temp_bin1 + aiv_constant + ptr1 -> alphainit.length;
      980 		     end;
      981 
      982 		temp_bin1 = temp_bin1 + mod (-temp_bin1, 4);
      983 
      984 		if temp_bin2 = 1
      985 		then goto l21a;
      986 
      987 		temp_bin2 = temp_bin2 - 1;
      988 		goto l21aa;
      989 
      990 	     end;
      991 
      992 l21aaa:
      993 	dn_ptr = save_ptr;				/*pop hierarchy stack*/
      994 	h = h - 1;
      995 
      996 	if h = 0
      997 	then goto actretrn;
      998 
      999 	goto lbl21a;
     1000 
     1001 groupa21:						/*level number of finished item less than new level number*/
     1002 	vector_map.non_elementary = "1"b;
     1003 
     1004 /*push hierarchy stack*/
     1005 	h = h + 1;
     1006 	ptr4 = addr (cobol_htbl (h));
     1007 
     1008 	ptr4 -> chtbl_item = 0;
     1009 
     1010 	cobol_htbl.level (h) = data_name.level;		/*	cobol_htbl.offset(h)=data_name.offset;*/
     1011 	cobol_htbl.occno (h) = save_occno;
     1012 	cobol_htbl.do_rec (h) = data_name.do_rec;
     1013 
     1014 	if bnw ^= 0
     1015 	then cobol_htbl.nt_rec (h) = null_key;
     1016 	else cobol_htbl.nt_rec (h) = save_wkey;
     1017 
     1018 	cobol_htbl.occurs_clause (h) = vector_map.occurs_clause;
     1019 	cobol_htbl.odo_switch (h) = vector_map.occurs_do;
     1020 
     1021 	if data_name.occurs_ptr ^= 0
     1022 	then cobol_htbl.occurs_ext (h) = "1"b;
     1023 
     1024 	cobol_htbl.switch_88 (h) = save_switch_88;	/* save_switch_88 will be reset in action 17 */
     1025 	cobol_htbl.exp_redefining (h) = vector_map.exp_redefining;
     1026 	cobol_htbl.minivector (h) = vectord.minivector;
     1027 	goto actretrn;
     1028 
     1029 
     1030 
     1031 data_length:
     1032      proc;
     1033 
     1034 	bit32_1 = substr (vector_part, 9, 32) & non_display_bits_mask;
     1035 
     1036 	if vector_map.item_signed & vector_map.numeric
     1037 	then do;
     1038 
     1039 		if vector_map.sign_separate
     1040 		     | ((vector_map.ascii_packed_dec_b | vector_map.ascii_packed_dec_h) & vector_map.pic_has_s)
     1041 		then goto incr_lnth;
     1042 		else if bit32_1 = "0"b		/* display data */
     1043 		then if vector_map.sign_type = "000"b
     1044 		     then if fixed_common.default_sign_type = "011"b | fixed_common.default_sign_type = "100"b
     1045 			then go to incr_lnth;
     1046 
     1047 		goto no_incr;
     1048 
     1049 incr_lnth:
     1050 		data_name.item_length = data_name.item_length + 1;
     1051 
     1052 	     end;
     1053 no_incr:
     1054 	if bit32_1 = thirty_two_zeros
     1055 	then return;				/* display data */
     1056 
     1057 	if vector_map.bin_16
     1058 	then do;
     1059 		data_name.item_length = 2;
     1060 		data_name.places_right = 0;
     1061 		data_name.places_left = 5;
     1062 		goto dl_end;
     1063 	     end;
     1064 
     1065 	if vector_map.bin_18
     1066 	then do;
     1067 		data_name.item_length = 2;
     1068 		data_name.places_right = 0;
     1069 		data_name.places_left = 6;
     1070 		go to dl_end;
     1071 	     end;
     1072 
     1073 	if vector_map.bin_32
     1074 	then do;
     1075 		data_name.item_length = 4;
     1076 		data_name.places_right = 0;
     1077 		data_name.places_left = 10;
     1078 		go to dl_end;
     1079 	     end;
     1080 
     1081 	if vector_map.bin_36
     1082 	then do;
     1083 		data_name.item_length = 4;
     1084 		data_name.places_right = 0;
     1085 		data_name.places_left = 11;
     1086 		go to dl_end;
     1087 	     end;
     1088 
     1089 /*test packed decimal*/
     1090 
     1091 	if vector_map.ebcdic_packed_dec | vector_map.ascii_packed_dec_h | vector_map.ascii_packed_dec_b
     1092 	then do;
     1093 		data_name.item_length = divide (data_name.item_length + 1, 2, 15, 0);
     1094 		goto dl_end;
     1095 	     end;
     1096 
     1097 	if vector_map.usage_index = "1"b
     1098 	then data_name.item_length = 6;
     1099 dl_end:
     1100 	vector_map.pic_integer = "1"b;
     1101 
     1102      end;
     1103 
     1104 
     1105 
     1106 actlbl (13):					/*action(22):*/
     1107 	vector_map.picture_clause = "1"b;
     1108 	goto actretrn;
     1109 
     1110 
     1111 /* picture_analysis */
     1112 
     1113 actlbl (14):					/*action(23):*/
     1114 						/* The following variables may be as well declared within the host procedure */
     1115 dcl	pic_image		char (128),		/*translated picture string*/
     1116 	spec_char		char (1),
     1117 	t		fixed bin,		/*indexes current PICTURE character in image string*/
     1118 						/* i indexes last character picked up in image,
     1119*					may be PICTURE character or right parenthesis
     1120*					of repetition factor*/
     1121 	p		fixed bin,		/*work*/
     1122 	r		fixed bin,
     1123 	n		fixed bin,		/*work*/
     1124 	m		fixed bin,		/*work*/
     1125 	arrpntr		fixed bin,		/*binary value from character position in image--
     1126*				used as index into tables and label array piclabel*/
     1127 	piccounter1	fixed bin,		/*number of consecutive identical characters, including those
     1128*				indicated by a parenthesized integer*/
     1129 	piccounter2	fixed bin,		/*number of consecutive receiving characters between two fixed insertions*/
     1130 	inscnter		fixed bin,		/*number of fixed inserts in entire picture string*/
     1131 	fltswitch1	bit (1),			/*set when pic contains floating insert(s)*/
     1132 	fltswitch2	bit (1),			/*set when t indexes to the left of the right boundary of the
     1133*				string to be suppressed for floating insertion and for
     1134*				zero suppression*/
     1135 	fltswitch3	bit (1),
     1136 	auxvector1	bit (32),			/*work*/
     1137 	auxvector2	bit (32),			/*constant zeroes*/
     1138 	propvector	bit (32),			/*properties of current item according to picture string*/
     1139 	fltchar		char (1),			/*current floating insertion character*/
     1140 	editlim		fixed bin,		/*maximum edit string size*/
     1141 	auxbit		bit (1),
     1142 	mask4x		bit (32),
     1143 	picptr		pointer,			/*addresses edit extension*/
     1144 	filstring		char (30);		/*contains receiving characters for moving into edit string*/
     1145 
     1146 declare	pic_ch		char (1),
     1147 	nsi		bit (1);
     1148 declare	ch		char (1),
     1149 	pic_string_ptr	ptr;
     1150 
     1151 declare	pic_array		(128) char (1) based (pic_string_ptr);
     1152 
     1153 /* inftble is property matrix */
     1154 /* prectble is precedence array */
     1155 
     1156 	filstring = filstring_init;
     1157 	editlim = 256;
     1158 	propvector = thirty_two_zeros;
     1159 	auxvector2 = thirty_two_zeros;
     1160 	piccounter2 = 0;
     1161 	inscnter = 0;
     1162 	fltswitch1 = "0"b;
     1163 	fltswitch2 = "0"b;
     1164 	fltswitch3 = "0"b;
     1165 	pic_string_ptr = addr (picture.string);
     1166 	picptr = ptr1;
     1167 	j = 1;
     1168 
     1169 	if picture.length > 30
     1170 	then go to aerr;
     1171 
     1172 	pic_image = picture.string;
     1173 
     1174 /* after the length was checked the picture string is translated below */
     1175 
     1176 	i = 0;
     1177 	nsi = "0"b;
     1178 
     1179 
     1180 	do while (i < picture.length);
     1181 
     1182 	     i = i + 1;
     1183 	     pic_ch = substr (pic_image, i, 1);
     1184 
     1185 	     if pic_ch ^= fixed_common.currency & index (ch_str, pic_ch) ^= 0
     1186 	     then nsi = "1"b;
     1187 
     1188 	     bit9 = unspec (substr (pic_image, i, 1));
     1189 	     m = fixed (bit9, 35);
     1190 	     substr (pic_image, i, 1) = transltble (m);
     1191 
     1192 	end;
     1193 
     1194 	if nsi
     1195 	then do;
     1196 		call DIAG (215);
     1197 
     1198 /*[4.0-4]*/
     1199 		if fixed_common.comp_level < "5"
     1200 		then call LEV_DIAG (28);
     1201 
     1202 	     end;
     1203 
     1204 	substr (pic_image, i + 1, 1) = stopper;
     1205 
     1206 	i = 0;
     1207 
     1208 mainloop:
     1209 	i = i + 1;
     1210 
     1211 	bit9 = unspec (substr (pic_image, i, 1));
     1212 	arrpntr = fixed (bit9, 15);
     1213 
     1214 	if arrpntr > 32
     1215 	then go to err2;
     1216 
     1217 	piccounter1 = 1;
     1218 	t = i;
     1219 
     1220 /*check property matrix for repeatable character*/
     1221 	if substr (inftble (arrpntr), 1, 1) ^= "1"b
     1222 	then go to pic4;
     1223 pic1:
     1224 	i = i + 1;
     1225 
     1226 	if substr (pic_image, i, 1) = "("
     1227 	then go to anext;
     1228 
     1229 	if i <= picture.length
     1230 	then do;
     1231 		if substr (picture.string, i, 1) = substr (picture.string, i - 1, 1)
     1232 		then do;
     1233 			piccounter1 = piccounter1 + 1;
     1234 			go to pic1;
     1235 		     end;
     1236 	     end;
     1237 
     1238 	i = i - 1;
     1239 	go to pic3;
     1240 
     1241 anext:						/*pick up repetition factor*/
     1242 	i = i + 1;
     1243 
     1244 	if substr (unspec (substr (pic_image, i, 1)), 6, 4) ^= "1111"b
     1245 	then go to err3;
     1246 
     1247 	k = i;
     1248 next1:
     1249 	i = i + 1;
     1250 
     1251 	if substr (unspec (substr (pic_image, i, 1)), 6, 4) = "1111"b
     1252 	then go to next1;
     1253 
     1254 	if substr (pic_image, i, 1) ^= ")"
     1255 	then go to err3;
     1256 
     1257 	piccounter1 = piccounter1 - 1 + fixed (substr (picture.string, k, i - k));
     1258 
     1259 pic3:						/*set for +,-,$,*.P,Z */
     1260 	if substr (inftble (arrpntr), 2, 1) ^= "1"b
     1261 	then go to pic4;
     1262 
     1263 /*analysis for legal insertion and to determine whether fixed or floating*/
     1264 
     1265 	if substr (inftble (arrpntr), 3, 1) = "1"b
     1266 	then go to pic3a;
     1267 
     1268 	if arrpntr ^= 12
     1269 	then do;
     1270 		if fltswitch3 = "0"b
     1271 		then do;
     1272 			fltswitch3 = "1"b;
     1273 			fltswitch2 = "1"b;
     1274 			editor.start_supress = data_name.item_length + 1;
     1275 		     end;
     1276 		go to pic6;
     1277 	     end;
     1278 
     1279 	vector_map.pic_has_p = "1"b;
     1280 
     1281 	if data_name.item_length ^= inscnter
     1282 	then do;
     1283 		data_name.places_left = data_name.places_left + piccounter1;
     1284 		data_name.places_right = data_name.places_right - piccounter1;
     1285 		go to pic4;
     1286 	     end;
     1287 
     1288 	data_name.places_right = data_name.places_right + piccounter1;
     1289 	data_name.places_left = data_name.places_left - piccounter1;
     1290 	substr (propvector, 2, 1) = "1"b;
     1291 pic5:
     1292 	arrpntr = arrpntr + 1;
     1293 	go to pic4;
     1294 
     1295 pic3a:
     1296 	if fltswitch1
     1297 	then if substr (picture.string, t, 1) = fltchar
     1298 	     then go to pic8;
     1299 	     else go to pic5;
     1300 
     1301 	if piccounter1 > 1
     1302 	then go to pic7;
     1303 
     1304 	if data_name.item_length ^= inscnter
     1305 	then go to pic5;
     1306 
     1307 	k = i;
     1308 pic3b:
     1309 	k = k + 1;
     1310 
     1311 	if k > picture.length
     1312 	then go to pic6;
     1313 
     1314 	bit9 = unspec (substr (pic_image, k, 1));
     1315 	n = fixed (bit9, 15);
     1316 
     1317 	if arrpntr = n
     1318 	then go to pic7;
     1319 
     1320 	if n > 31
     1321 	then do;
     1322 pic3b1:
     1323 		k = k + 1;
     1324 		if k > picture.length
     1325 		then go to pic6;
     1326 		if substr (picture.string, k, 1) = ")"
     1327 		then go to pic3b;
     1328 		else go to pic3b1;
     1329 	     end;
     1330 
     1331 	if substr (inftble (n), 4, 1)
     1332 	then go to pic3b;
     1333 pic6:
     1334 	if substr (propvector, 4, 1) | substr (propvector, 2, 1)
     1335 	then go to pic5;
     1336 	go to pic4;
     1337 
     1338 pic7:
     1339 	fltswitch1 = "1"b;
     1340 	fltswitch2 = "1"b;
     1341 	fltchar = substr (picture.string, t, 1);
     1342 	editor.start_supress = data_name.item_length + 1;
     1343 pic8:
     1344 	arrpntr = arrpntr + 2;
     1345 	go to pic6;
     1346 
     1347 pic4:						/* test precedence */
     1348 	auxvector1 = propvector & prectble (arrpntr);
     1349 
     1350 /* if auxvector is zeroes, string is valid so far */
     1351 	if auxvector1 ^= auxvector2
     1352 	then go to err1;
     1353 
     1354 /* set property vector bit for current PICTURE character */
     1355 	substr (propvector, arrpntr, 1) = "1"b;
     1356 
     1357 /* test for PICTURE character contributing to total length of data item */
     1358 	if substr (inftble (arrpntr), 5, 1) = "0"b
     1359 	then go to pic9;
     1360 
     1361 	data_name.item_length = data_name.item_length + piccounter1;
     1362 
     1363 /* test for PICTURE character contributing to receiving field size in item */
     1364 	if substr (inftble (arrpntr), 6, 1) = "0"b
     1365 	then go to pic4a;
     1366 
     1367 /* increment consecutive receiving characters field size counter */
     1368 
     1369 	piccounter2 = piccounter2 + piccounter1;
     1370 
     1371 /* test for V or . has already occurred in string */
     1372 
     1373 	if substr (propvector, 4, 1) | substr (propvector, 2, 1)
     1374 	then do;
     1375 		data_name.places_right = data_name.places_right + piccounter1;
     1376 		go to pic9;
     1377 	     end;
     1378 
     1379 	data_name.places_left = data_name.places_left + piccounter1;
     1380 	go to pic9;
     1381 
     1382 pic4a:						/* characters not contributing to receiving field size but contributing to total item length */
     1383 	inscnter = inscnter + piccounter1;
     1384 
     1385 	if data_name.item_length > editlim
     1386 	then go to err4;
     1387 
     1388 /* test the number of receiving characters accumulated since last insertion and plop into ecm */
     1389 
     1390 	if piccounter2 = 0
     1391 	then go to pic4b;
     1392 
     1393 /*[4.2-4]*/
     1394 	call fill_edit;
     1395 
     1396 	j = j + piccounter2;
     1397 	piccounter2 = 0;
     1398 
     1399 pic4b:						/* 1 or more consecutive insertion characters get put into ecm */
     1400 	do p = 1 to piccounter1;
     1401 
     1402 	     if arrpntr = 4				/*period(functionally)*/
     1403 	     then do;
     1404 		     if fixed_common.obj_dec_comma
     1405 		     then substr (editor.ecm, j + p - 1, 1) = ",";
     1406 		     else substr (editor.ecm, j + p - 1, 1) = ".";
     1407 		end;
     1408 
     1409 	     else if arrpntr = 3			/*comma (functionally)*/
     1410 	     then do;
     1411 		     if fixed_common.obj_dec_comma
     1412 		     then substr (editor.ecm, j + p - 1, 1) = ".";
     1413 		     else substr (editor.ecm, j + p - 1, 1) = ",";
     1414 		end;
     1415 
     1416 	     else do;
     1417 		     ch = pic_array (t);
     1418 
     1419 		     if ch = "B"
     1420 		     then ch = " ";
     1421 		     else if ch = "h"
     1422 		     then ch = "-";
     1423 
     1424 		     substr (editor.ecm, j + p - 1, 1) = ch;
     1425 
     1426 		end;
     1427 	end;
     1428 
     1429 	j = j + piccounter1;
     1430 pic9:
     1431 	go to piclabel (arrpntr);
     1432 
     1433 piclabel (1):					/* B */
     1434 piclabel (3):					/* , */
     1435 piclabel (15):					/* 0 */
     1436 	if fltswitch2
     1437 	then editor.max_supress = editor.max_supress + piccounter1;
     1438 	go to mainloop;
     1439 
     1440 piclabel (2):					/* V */
     1441 piclabel (4):					/* . */
     1442 piclabel (31):					/* 9 */
     1443 	fltswitch2 = "0"b;
     1444 	go to mainloop;
     1445 
     1446 piclabel (5):					/* C */
     1447 	if substr (picture.string, i + 1, 1) = "R"
     1448 	then do;
     1449 		i = i + 1;
     1450 		data_name.item_length = data_name.item_length + 1;
     1451 		substr (editor.ecm, j, 1) = "R";
     1452 		inscnter = inscnter + 1;
     1453 		editor.fixed_insert = 5;		/* blank when >=0 */
     1454 		vector_map.item_signed = "1"b;
     1455 		go to mainloop;
     1456 	     end;
     1457 
     1458 	go to err3;
     1459 
     1460 piclabel (6):					/* D */
     1461 	if substr (picture.string, i + 1, 1) = "B"
     1462 	then do;
     1463 		i = i + 1;
     1464 		data_name.item_length = data_name.item_length + 1;
     1465 		substr (editor.ecm, j, 1) = "B";
     1466 		inscnter = inscnter + 1;
     1467 		editor.fixed_insert = 5;		/* blank when >=0 */
     1468 		vector_map.item_signed = "1"b;
     1469 		go to mainloop;
     1470 	     end;
     1471 
     1472 	go to err3;
     1473 
     1474 piclabel (7):					/* E */
     1475 						/*		call ioa_("E not implemented yet");*/
     1476 	go to mainloop;
     1477 
     1478 piclabel (8):					/* Z to left of decimal point */
     1479 	editor.max_supress = editor.max_supress + piccounter1;
     1480 	go to mainloop;
     1481 
     1482 piclabel (10):					/*asterisk to left of decimal point */
     1483 	editor.max_supress = editor.max_supress + piccounter1;
     1484 	vector_map.pic_has_ast = "1"b;
     1485 	go to mainloop;
     1486 
     1487 piclabel (18):					/* floating left + */
     1488 	editor.max_supress = editor.max_supress + piccounter1;
     1489 	editor.float_insert = 2;
     1490 	vector_map.item_signed = "1"b;
     1491 	go to mainloop;
     1492 
     1493 piclabel (22):					/* floating left - */
     1494 	editor.max_supress = editor.max_supress + piccounter1;
     1495 	editor.float_insert = 3;
     1496 	vector_map.item_signed = "1"b;
     1497 	go to mainloop;
     1498 
     1499 piclabel (26):					/* floating left $ */
     1500 	editor.max_supress = editor.max_supress + piccounter1;
     1501 	editor.float_insert = 1;
     1502 	go to mainloop;
     1503 
     1504 piclabel (9):					/* Z to right of decimal point */
     1505 	vector_map.pic_has_ast = "0"b;
     1506 	vector_map.bwz = "1"b;
     1507 	goto extra_label;
     1508 
     1509 piclabel (27):					/* floating right $ */
     1510 	vector_map.pic_has_ast = "0"b;
     1511 	vector_map.bwz = "1"b;
     1512 	go to mainloop;
     1513 
     1514 piclabel (19):					/* floating right + */
     1515 piclabel (23):					/* floating right - */
     1516 	vector_map.pic_has_ast = "0"b;
     1517 	vector_map.bwz = "1"b;
     1518 	vector_map.item_signed = "1"b;
     1519 	go to mainloop;
     1520 
     1521 piclabel (11):					/* asterisk to right of decimal point */
     1522 	vector_map.ast_when_zero = "1"b;
     1523 
     1524 extra_label:
     1525 	if substr (propvector, 13, 1)
     1526 	then editor.start_supress = 0;
     1527 	go to mainloop;
     1528 
     1529 piclabel (14):					/* L */
     1530 	vector_map.pic_has_l = "1"b;
     1531 	vector_map.variable_length = "1"b;
     1532 	go to mainloop;
     1533 
     1534 piclabel (16):					/* fixed left + */
     1535 	substr (editor.ecm, j - 1, 1) = "-";
     1536 	editor.fixed_insert = 4;
     1537 	vector_map.item_signed = "1"b;
     1538 	go to mainloop;
     1539 
     1540 piclabel (17):					/* fixed right + */
     1541 	substr (editor.ecm, j - 1, 1) = "-";
     1542 	editor.fixed_insert = 2;
     1543 	vector_map.item_signed = "1"b;
     1544 	go to mainloop;
     1545 
     1546 piclabel (20):					/* fixed left - */
     1547 	editor.fixed_insert = 3;
     1548 	vector_map.item_signed = "1"b;
     1549 	go to mainloop;
     1550 
     1551 piclabel (21):					/* fixed right - */
     1552 	editor.fixed_insert = 1;
     1553 	vector_map.item_signed = "1"b;
     1554 	go to mainloop;
     1555 
     1556 piclabel (28):					/* S */
     1557 	vector_map.pic_has_s = "1"b;
     1558 	vector_map.item_signed = "1"b;
     1559 	go to mainloop;
     1560 
     1561 piclabel (24):					/* fixed left $ */
     1562 	substr (editor.ecm, j - 1, 1) = fixed_common.object_sign;
     1563 	goto mainloop;
     1564 
     1565 piclabel (12):					/* P to left of decimal point */
     1566 piclabel (13):					/* P to right of decimal point */
     1567 piclabel (25):					/* fixed right $ */
     1568 piclabel (29):					/* X */
     1569 piclabel (30):					/* A */
     1570 	go to mainloop;
     1571 
     1572 piclabel (32):					/* stopper character generated at end of PICTURE string by cobol_ddsyntax */
     1573 	if inscnter = 0
     1574 	then do;
     1575 		auxbit = fltswitch1 | fltswitch3;
     1576 
     1577 		if ^auxbit
     1578 		then do;
     1579 			mask4x = propvector & mask1x;
     1580 
     1581 			if mask4x = mask2x
     1582 			then do;
     1583 
     1584 				if substr (propvector, 2, 1) = "0"b
     1585 				then vector_map.pic_integer = "1"b;
     1586 
     1587 				vector_map.numeric = "1"b;
     1588 
     1589 				if ^vector_map.item_signed
     1590 				then vector_map.pic_unsigned = "1"b;
     1591 				go to speclabel;
     1592 			     end;
     1593 
     1594 			if mask4x = mask3x
     1595 			then vector_map.alphabetic = "1"b;
     1596 			else vector_map.alphanum = "1"b;
     1597 
     1598 			go to speclabel;
     1599 
     1600 		     end;
     1601 	     end;
     1602 
     1603 	if piccounter2 = 0
     1604 	then go to int1;
     1605 
     1606 /*[4.2-4]*/
     1607 	call fill_edit;
     1608 
     1609 int1:
     1610 	editor.length = data_name.item_length;
     1611 	data_name.edit_ptr = data_name.size + 1;
     1612 	data_name.size = data_name.size + data_name.item_length + ed_constant;
     1613 
     1614 	data_name.size = data_name.size + mod (-data_name.size, 4);
     1615 
     1616 	r = data_name.size + 1;
     1617 	picptr = addr (dn_ptr -> any_item (r));
     1618 
     1619 	if data_name.item_length = inscnter
     1620 	then go to err5;
     1621 
     1622 	if substr (propvector, 29, 2) = "00"b
     1623 	then do;
     1624 		vector_map.numeric_edited = "1"b;
     1625 
     1626 		if fltswitch1
     1627 		then do;
     1628 			if ^substr (propvector, 13, 1)
     1629 			then do;
     1630 				data_name.places_left = data_name.places_left - 1;
     1631 				substr (editor.ecm, editor.start_supress, 1) = fltchar;
     1632 			     end;
     1633 
     1634 			n = editor.max_supress + editor.start_supress;
     1635 
     1636 			if n - 1 = data_name.item_length
     1637 			then vector_map.bwz = "1"b;
     1638 
     1639 			if substr (propvector, 13, 1)
     1640 			then do;
     1641 
     1642 				data_name.places_right = data_name.places_right - 1;
     1643 
     1644 				if fltchar = "+"
     1645 				then do;
     1646 					fltchar = "-";
     1647 					editor.fixed_insert = 2;
     1648 				     end;
     1649 
     1650 				else if fltchar = "-"
     1651 				then editor.fixed_insert = 3;
     1652 				else fltchar = fixed_common.object_sign;
     1653 
     1654 				substr (editor.ecm, editor.start_supress, 1) = fltchar;
     1655 				editor.start_supress = 0;
     1656 				editor.max_supress = 0;
     1657 
     1658 			     end;
     1659 
     1660 			if n = data_name.item_length
     1661 			then if substr (propvector, 4, 1)
     1662 			     then vector_map.bwz = "1"b;
     1663 						/*[3.0-1]*/
     1664 		     end;
     1665 
     1666 		go to speclabel;
     1667 
     1668 	     end;
     1669 
     1670 	auxbit = substr (propvector, 30, 1) & substr (propvector, 15, 1);
     1671 
     1672 	if substr (propvector, 29, 1) | auxbit
     1673 	then vector_map.alphanum_edited = "1"b;
     1674 	else vector_map.alphabetic_edited = "1"b;
     1675 
     1676 speclabel:
     1677 	ptr1 = picptr;
     1678 
     1679 	goto actretrn;
     1680 
     1681 aerr:
     1682 	tf = 130;
     1683 
     1684 err:						/*[4.2-5]*/
     1685 	call diag (tf, record.line, record.column);
     1686 
     1687 	goto actretrn;
     1688 
     1689 err2:
     1690 	if (arrpntr = 127 | arrpntr = 40 | arrpntr = 41)
     1691 	then go to err1;
     1692 
     1693 	tf = 132;
     1694 	go to err;
     1695 
     1696 err1:
     1697 	tf = 134;
     1698 	go to err;
     1699 
     1700 err3:
     1701 	if arrpntr < 32
     1702 	then go to err1;
     1703 	go to err2;
     1704 
     1705 err4:
     1706 	tf = 136;
     1707 	go to err;
     1708 
     1709 err5:
     1710 	tf = 137;
     1711 	go to err;
     1712 
     1713 /*[4.2-4]*/
     1714 fill_edit:
     1715      proc;					/**/
     1716 	save_j = j;				/**/
     1717 	if piccounter2 <= 30			/**/
     1718 	then substr (editor.ecm, j, piccounter2) = substr (filstring, 1, piccounter2);
     1719 						/**/
     1720 						/**/
     1721 	else do;					/**/
     1722 		fixbin15 = 30;			/**/
     1723 		temp_bin1 = piccounter2;		/**/
     1724 						/**/
     1725 		do while ("1"b);			/**/
     1726 						/**/
     1727 		     substr (editor.ecm, j, fixbin15) = substr (filstring, 1, fixbin15);
     1728 						/**/
     1729 		     temp_bin1 = temp_bin1 - fixbin15;	/**/
     1730 		     j = j + fixbin15;		/**/
     1731 						/**/
     1732 		     if temp_bin1 = 0
     1733 		     then do;
     1734 			     j = save_j;
     1735 			     return;
     1736 			end;			/**/
     1737 						/**/
     1738 		     if temp_bin1 < 30
     1739 		     then fixbin15 = temp_bin1;
     1740 		     else fixbin15 = 30;		/**/
     1741 		end;
     1742 	     end;
     1743      end;						/*[4.2-4]*/
     1744 
     1745 
     1746 actlbl (15):					/*action(136):*/
     1747 						/* inherit parent properties */
     1748 	if vector_map.value_clause = "0"b
     1749 	then vector_map.elem_no_value = "1"b;
     1750 
     1751 	odim = 0;
     1752 
     1753 	if h = 0
     1754 	then goto actretrn;
     1755 
     1756 	fh = h;
     1757 	temp_bin1 = data_name.size + 1;
     1758 
     1759 	if cobol_htbl.occurs_ext (fh) & ^vector_map.occurs_clause
     1760 	then do;
     1761 
     1762 /*inherit parent's occurs extension ... if vector_map.occurs_clause was set,then
     1763*	item inherited parent's extension at time that its own occurs clause was
     1764*	parsed ... if parent had one*/
     1765 
     1766 		rnt_key = cobol_htbl.nt_rec (fh);
     1767 
     1768 		call cobol_vdwf_dget (cobol_ntfp, fstatus, rnt_ptr, rnt_size, rnt_key);
     1769 
     1770 		if rnt_ptr -> data_name.occurs_ptr = 0
     1771 		then go to postveca136;
     1772 
     1773 		save_ptr = dn_ptr;
     1774 		dn_ptr = rnt_ptr;
     1775 		pdn_occ_ptr = addr (dn_ptr -> any_item (data_name.occurs_ptr));
     1776 		odim = pdn_occ_ptr -> occurs.dimensions;
     1777 		ptr1 = addr (save_ptr -> any_item (temp_bin1));
     1778 		fixbin7_1 = occ_constant + occ_dim_constant * odim;
     1779 		substr (ptr1 -> anystring, 1, fixbin7_1) = substr (pdn_occ_ptr -> anystring, 1, fixbin7_1);
     1780 		ptr1 -> occurs.keyed = 0;
     1781 lbl136:
     1782 		dn_ptr = save_ptr;
     1783 	     end;
     1784 
     1785 	if odim ^= 0
     1786 	then do;
     1787 
     1788 		data_name.occurs_ptr = data_name.size + 1;
     1789 		data_name.size = data_name.size + fixbin7_1;
     1790 		data_name.size = data_name.size + mod (-data_name.size, 4);
     1791 
     1792 	     end;
     1793 
     1794 	rnt_key = cobol_htbl.nt_rec (fh);
     1795 
     1796 	call cobol_vdwf_dget (cobol_ntfp, fstatus, rnt_ptr, rnt_size, rnt_key);
     1797 
     1798 postveca136:
     1799 	vector_map.assoc_with_signed_num_display =
     1800 	     (substr (vector_part, 9, 32) & non_display_bits_mask) = "0"b & vector_map.numeric & vector_map.pic_has_s;
     1801 
     1802 	ptr6 = addr (vectemp);
     1803 
     1804 	vectempd.descr = addr (rnt_ptr -> data_name.file_section) -> bit72 & mask_descr;
     1805 	vectempd.minivector = cobol_htbl.minivector (fh) & mask_minivector;
     1806 	vectempd.filler = "0"b;
     1807 
     1808 	vector_part = vectemp | vector_part;
     1809 
     1810 	cobol_htbl.minivector (fh) = cobol_htbl.minivector (fh) | (vectord.minivector & mask_minivector_reverse);
     1811 
     1812 	do fh = fh - 1 to 1 by -1;
     1813 	     cobol_htbl.minivector (fh) =
     1814 		(cobol_htbl.minivector (fh + 1) & mask_minivector_reverse) | cobol_htbl.minivector (fh);
     1815 	end;
     1816 
     1817 	goto actretrn;
     1818 
     1819 actlbl (16):					/* action(82) */
     1820 	current_line = current_line + org + 1;
     1821 
     1822 	go to new_inst;
     1823 
     1824 actlbl (17):					/* action(83) */
     1825 	if int_val = 0
     1826 	then if fixed_common.comp_level < "5"		/*[4.0-4]*/
     1827 	     then call LEV_DIAG (129);
     1828 
     1829 	go to actretrn;
     1830 
     1831 actlbl (18):					/*action(168)*/
     1832 						/*[3.0-2]*/
     1833 						/*[4.0-4]*/
     1834 	if fixed_common.comp_level < "5"
     1835 	then call LEV_DIAG (169);
     1836 
     1837 	go to actretrn;
     1838 
     1839 actlbl (19):					/*action(169)*/
     1840 						/* add entry in ref table */
     1841 						/*[4.4-1]*/
     1842 	ref_table_size = ref_table_size + 1;
     1843 
     1844 /*[4.4-1]*/
     1845 	ref.length (ref_table_size) = user_word.word_size;/*[4.4-1]*/
     1846 	ref.name (ref_table_size) = substr (user_word.word, 1, user_word.word_size);
     1847 						/*[4.4-1]*/
     1848 	ref.size (ref_table_size) = 24 + user_word.word_size;
     1849 
     1850 	go to actretrn;
     1851 
     1852 actlbl (20):					/*action(170)*/
     1853 						/* process like attribute */
     1854 						/*[4.4-1]*/
     1855 	if like_key = null_key			/*[4.4-1]*/
     1856 	then do;
     1857 		hash_table_ptr = addr (hash_table (1)); /* first use, initialize */
     1858 						/*[4.4-1]*/
     1859 		ref_table_ptr = addr (ref_table (1));	/*[4.4-1]*/
     1860 		diag_ptr = addr (diag_token);
     1861 
     1862 /*[4.4-1]*/
     1863 		diag_token.size = 28;		/*[4.4-1]*/
     1864 		diag_token.run = 6;
     1865 
     1866 /*[4.4-1]*/
     1867 		do i = 1 by 1 to 512;
     1868 
     1869 /*[4.4-1]*/
     1870 		     hash_table (i) = null ();
     1871 
     1872 /*[4.4-1]*/
     1873 		end;
     1874 
     1875 /*[4.4-1]*/
     1876 		do i = 1 by 1 to 50;
     1877 
     1878 /*[4.4-1]*/
     1879 		     ref_table (i) = addr (ref (i));
     1880 
     1881 /*[4.4-1]*/
     1882 		end;
     1883 
     1884 /*[4.4-1]*/
     1885 		prev_rec_ptr = null ();		/*[4.4-1]*/
     1886 		rec_key = first_key;		/* get first record in name table */
     1887 						/*[4.4-1]*/
     1888 		call cobol_vdwf_dget (cobol_ext_$cobol_name_fileno_ptr,
     1889 						/*[4.4-1]*/
     1890 		     status,			/*[4.4-1]*/
     1891 		     rec_ptr,			/*[4.4-1]*/
     1892 		     rec_size,			/*[4.4-1]*/
     1893 		     first_key /*[4.4-1]*/);
     1894 
     1895 /*[4.4-1]*/
     1896 		call form_chains;
     1897 
     1898 /*[4.4-1]*/
     1899 	     end;
     1900 
     1901 /*[4.4-1]*/
     1902 	else do;
     1903 		call cobol_vdwf_dget (cobol_ext_$cobol_name_fileno_ptr,
     1904 						/*[4.4-1]*/
     1905 		     status,			/*[4.4-1]*/
     1906 		     rec_ptr,			/*[4.4-1]*/
     1907 		     rec_size,			/*[4.4-1]*/
     1908 		     like_key /*[4.4-1]*/);
     1909 
     1910 /*[4.4-1]*/
     1911 		prev_rec_ptr = rec_ptr;
     1912 
     1913 /*[4.4-1]*/
     1914 	     end;
     1915 
     1916 /* process entries added since	*/
     1917 /* the last like attribute		*/
     1918 
     1919 /*[4.4-1]*/
     1920 	status = "0"b;
     1921 
     1922 /*[4.4-1]*/
     1923 	do while (status = "0"b);
     1924 
     1925 /*[4.4-1]*/
     1926 	     call cobol_vdwf_sget (cobol_ext_$cobol_name_fileno_ptr,
     1927 						/*[4.4-1]*/
     1928 		status,				/*[4.4-1]*/
     1929 		rec_ptr,				/*[4.4-1]*/
     1930 		rec_size,				/*[4.4-1]*/
     1931 		rec_key /*[4.4-1]*/);
     1932 
     1933 /*[5.2-1]*/
     1934 	     if status = "0"b			/*[4.4-1]*/
     1935 	     then do;
     1936 		     call form_chains;
     1937 
     1938 /*[4.4-1]*/
     1939 		     prev_rec_ptr = rec_ptr;
     1940 
     1941 /*[4.4-1]*/
     1942 		end;
     1943 
     1944 /*[4.4-1]*/
     1945 	     else last_rec_ptr = addrel (rec_ptr, divide (rec_size + 11, 8, 17, 0) * 2);
     1946 
     1947 /*[4.4-1]*/
     1948 	end;
     1949 
     1950 /*[4.4-1]*/
     1951 	like_key = rec_key;
     1952 
     1953 /*[4.4-1]*/
     1954 	diag_no = 0;
     1955 
     1956 
     1957 /*[4.4-1]*/
     1958 	call cobol_usrwd (ref_table_ptr,		/*[4.4-1]*/
     1959 	     ref_table_size,			/*[4.4-1]*/
     1960 	     hash_table_ptr,			/*[4.4-1]*/
     1961 	     0,					/*[4.4-1]*/
     1962 	     last_rec_ptr,				/*[4.4-1]*/
     1963 	     "0"b,				/*[4.4-1]*/
     1964 	     was_found,				/*[4.4-1]*/
     1965 	     not_found,				/*[4.4-1]*/
     1966 	     diag_no,				/*[4.4-1]*/
     1967 	     rename_object_ptr);
     1968 
     1969 
     1970 /*[4.4-1]*/
     1971 	if was_found
     1972 	then do;
     1973 		call get_rename_desc;
     1974 		go to actretrn;
     1975 	     end;
     1976 
     1977 
     1978 /*[4.4-1]*/
     1979 	if not_found				/*[4.4-1]*/
     1980 	then do;
     1981 		if diag_no = 0
     1982 		then diag_token.num = 2;
     1983 		else diag_token.num = diag_no;
     1984 
     1985 /*[4.4-1]*/
     1986 		call cobol_c_list (diag_ptr);
     1987 
     1988 
     1989 /*[4.4-1]*/
     1990 	     end;
     1991 
     1992 
     1993 	go to actretrn;
     1994 
     1995 
     1996 get_rename_desc:
     1997      proc;
     1998 
     1999 /*[4.4-1]*/
     2000 	data_name.item_length = rename_object_ptr -> data_name.item_length;
     2001 						/*[4.4-1]*/
     2002 	data_name.places_left = rename_object_ptr -> data_name.places_left;
     2003 						/*[4.4-1]*/
     2004 	data_name.places_right = rename_object_ptr -> data_name.places_right;
     2005 
     2006 /*[4.4-1]*/
     2007 	vector_map.elementary, vector_map.picture_clause, vector_map.alphanum = "1"b;
     2008 
     2009      end;
     2010 
     2011 form_chains:
     2012      proc;
     2013 
     2014 /*[4.4-1]*/
     2015 declare	(string_size, hashno)
     2016 			fixed bin;		/*[4.4-1]*/
     2017 declare	string_ptr	ptr;
     2018 
     2019 /*[4.4-1]*/
     2020 declare	string		char (30) based (string_ptr);
     2021 
     2022 /*[5.2-1]*/
     2023 	if rec_ptr -> data_name.type = 9		/*[5.2-1]*/
     2024 	then do;
     2025 		string_size = rec_ptr -> data_name.name_size;
     2026 						/*[5.2-1]*/
     2027 		string_ptr = addr (rec_ptr -> data_name.name);
     2028 						/*[5.2-1]*/
     2029 	     end;					/*[5.2-1]*/
     2030 	else if rec_ptr -> procname.type = 7		/*[5.2-1]*/
     2031 	then do;
     2032 		string_size = rec_ptr -> procname.length;
     2033 						/*[5.2-1]*/
     2034 		string_ptr = addr (rec_ptr -> procname.name);
     2035 						/*[5.2-1]*/
     2036 	     end;					/*[5.2-1]*/
     2037 	else if rec_ptr -> conditioname.type = 11	/*[5.2-1]*/
     2038 	then do;
     2039 		string_size = rec_ptr -> conditioname.name_size;
     2040 						/*[5.2-1]*/
     2041 		string_ptr = addr (rec_ptr -> conditioname.name);
     2042 						/*[5.2-1]*/
     2043 	     end;					/*[5.2-1]*/
     2044 	else if rec_ptr -> fd.type = 12 | rec_ptr -> fd.type = 16
     2045 						/*[5.2-1]*/
     2046 	then do;
     2047 		string_size = rec_ptr -> fd.name_size;	/*[5.2-1]*/
     2048 		string_ptr = addr (rec_ptr -> fd.name); /*[5.2-1]*/
     2049 	     end;					/*[5.2-2]*/
     2050 	else if rec_ptr -> indexname.type = 10		/*[5.2-2]*/
     2051 	then do;
     2052 		string_size = rec_ptr -> indexname.name_size;
     2053 						/*[5.2-2]*/
     2054 		string_ptr = addr (rec_ptr -> indexname.name);
     2055 						/*[5.2-2]*/
     2056 	     end;					/*[5.2-2]*/
     2057 	else return;
     2058 
     2059 /*[4.4-1]*/
     2060 	hashno = 0;
     2061 
     2062 /*[4.4-1]*/
     2063 	do i = 1 by 1 to string_size;
     2064 
     2065 /*[4.4-1]*/
     2066 	     hashno = hashno + fixed (unspec (substr (string, i, 1)));
     2067 
     2068 /*[4.4-1]*/
     2069 	end;
     2070 
     2071 /*[4.4-1]*/
     2072 	hashno = mod (hashno, 512) + 1;
     2073 
     2074 /*[4.4-1]*/
     2075 	procname.string_ptr = hash_table (hashno);	/*[4.4-1]*/
     2076 	hash_table (hashno) = rec_ptr;
     2077 
     2078 /*[4.4-1]*/
     2079 	procname.string_ptr = prev_rec_ptr;		/*[4.4-1]*/
     2080 	prev_rec_ptr = rec_ptr;
     2081 
     2082      end;
     2083 
     2084 actlbl (21):					/* action(84) */
     2085 						/* issue diag attached to prev token */
     2086 						/*[5.1-3]*/
     2087 	call diag (TF, save_last_line, save_last_column); /*[5.1-3]*/
     2088 	TF = 0;
     2089 
     2090 	go to actretrn;
     2091 
     2092 
     2093 /***** check routines *****/
     2094 
     2095 /* section_header */
     2096 
     2097 check (1):
     2098 	if min_eof
     2099 	then do;
     2100 		next_level = 1;
     2101 		go to success;
     2102 	     end;
     2103 
     2104 	else if (record.type = 1 & rw.class.section_header = "1"b)
     2105 	then do;
     2106 		call a_test;
     2107 		next_level = 1;
     2108 		go to success;
     2109 	     end;
     2110 
     2111 	go to fail;
     2112 
     2113 /* fs_precedence */
     2114 
     2115 check (2):
     2116 	if substr (section_ind, 2, 7) = "0"b
     2117 	then goto success;
     2118 	go to fail;
     2119 
     2120 /* wss_indicator */
     2121 
     2122 check (3):
     2123 	if substr (section_ind, 2, 1) = "0"b
     2124 	then goto success;
     2125 	go to fail;
     2126 
     2127 /* cns_precedence */
     2128 
     2129 check (4):
     2130 	if substr (section_ind, 4, 5) = "0"b
     2131 	then goto success;
     2132 	go to fail;
     2133 
     2134 /* cns_indicator */
     2135 
     2136 check (5):
     2137 	if substr (section_ind, 3, 1) = "0"b
     2138 	then goto success;
     2139 	else goto fail;
     2140 
     2141 /* lks_precedence */
     2142 
     2143 check (6):
     2144 	if substr (section_ind, 5, 4) = "0"b
     2145 	then goto success;
     2146 	go to fail;
     2147 
     2148 /* lks_indicator */
     2149 
     2150 check (7):
     2151 	if substr (section_ind, 4, 1) = "0"b
     2152 	then goto success;
     2153 	go to fail;
     2154 
     2155 /* integer */
     2156 
     2157 int:
     2158 check (8):					/*[5.1-1]*/
     2159 	if record.type = 1				/*[5.1-1]*/
     2160 	then if rw.key = 180			/*[5.1-1]*/
     2161 	     then do;
     2162 		     int_val, temp_bin1 = 0;		/*[5.1-1]*/
     2163 		     go to success;			/*[5.1-1]*/
     2164 		end;				/*[5.1-1]*/
     2165 	     else go to fail;			/*[5.1-1]*/
     2166 	else if record.type ^= 2 | numeric_lit.rtdp ^= 0
     2167 	then go to fail;
     2168 
     2169 	if numeric_lit.length > 18
     2170 	then call DIAG (218);
     2171 
     2172 	int_val, temp_bin1 = fixed (numeric_lit.literal);
     2173 
     2174 	go to success;
     2175 
     2176 /* integer_77 */
     2177 
     2178 lev77:
     2179 check (9):
     2180 	call level_number (77);
     2181 
     2182 	next_level = 1;
     2183 
     2184 	goto success;
     2185 
     2186 /* integer_01 */
     2187 
     2188 lev01:
     2189 check (10):
     2190 	call level_number (1);
     2191 
     2192 /*[4.3-2]*/
     2193 	if numeric_lit.length = 1
     2194 	then if fixed_common.comp_level < "3"
     2195 	     then call LEV_DIAG (218);
     2196 
     2197 	s_lin = record.line;
     2198 	s_col = record.column;
     2199 
     2200 	next_level = 1;
     2201 
     2202 	goto success;
     2203 
     2204 /* user_word */
     2205 
     2206 type8:
     2207 check (11):
     2208 	if record.type = 8
     2209 	then do;					/* if fixed_common.comp_level < "5"
     2210*			then	if record.column < 12
     2211*				then	call LEV_DIAG(142);	*/
     2212 						/*[4.4-2]*/
     2213 
     2214 /*[4.2-3]*/
     2215 		filler_flag = "0"b;
     2216 
     2217 		go to success;
     2218 	     end;
     2219 	go to fail;
     2220 
     2221 /* dd_clause_header */
     2222 
     2223 check (12):
     2224 	if record.type ^= 1
     2225 	then go to fail;
     2226 
     2227 	if rw.class.dd_clause = "1"b
     2228 	then goto success;
     2229 	go to fail;
     2230 
     2231 
     2232 /* code set clause */
     2233 
     2234 check (13):
     2235 codeset:
     2236 	if user_word.type ^= 8
     2237 	then go to fail;
     2238 
     2239 	if fixed_common.alphabet_offset ^= 0
     2240 	then do;
     2241 		alf_offset = fixed_common.alphabet_offset;
     2242 
     2243 		do while (alf_offset ^= 0);
     2244 
     2245 		     call cobol_vdwf_dget (cobol_ntfp, alf_status, alf_ptr, alf_size, alf_key);
     2246 
     2247 		     if user_word.word = alf_ptr -> alphabet_name.name
     2248 		     then do;
     2249 			     file_table.code_set_clause = "1"b;
     2250 			     file_table.code_set = alf_ptr -> alphabet_name.iw_key;
     2251 
     2252 			     go to success;
     2253 
     2254 			end;
     2255 
     2256 		     alf_offset = addr (alf_ptr -> alphabet_name.prev_rec) -> fb;
     2257 
     2258 		end;
     2259 
     2260 	     end;
     2261 
     2262 	alf_offset = cobol_imp_word$alphabet_name (min_ptr);
     2263 
     2264 	if alf_offset = 0
     2265 	then go to fail;
     2266 
     2267 	call DIAG (204);
     2268 
     2269 	file_table.code_set_clause = "1"b;
     2270 	file_table.code_set = alf_offset + 10;
     2271 
     2272 	go to success;
     2273 
     2274 
     2275 /* integer_88 */
     2276 
     2277 lev88:
     2278 check (14):
     2279 	call level_number (88);
     2280 
     2281 	go to success;
     2282 
     2283 /* integer_66 */
     2284 
     2285 lev66:
     2286 check (15):
     2287 	call level_number (66);
     2288 
     2289 	next_level = 1;
     2290 
     2291 	goto success;
     2292 
     2293 /* linage footing body integer */
     2294 
     2295 check (16):
     2296 	if linage_rec.footing = 5 & linage_rec.body = 5 & linage_rec.footing_int > linage_rec.body_int
     2297 	then go to fail;
     2298 
     2299 	go to success;
     2300 
     2301 
     2302 /* integer_02_49 */
     2303 
     2304 lev0249:
     2305 check (17):
     2306 	call level_number (0);
     2307 
     2308 	if int_val >= 2 & int_val <= 49
     2309 	then do;
     2310 		if res
     2311 		then call DIAG (216);
     2312 		next_level = temp_bin1;
     2313 
     2314 		if fixed_common.comp_level < "3" & int_val > 10
     2315 						/*[4.0-4]*/
     2316 		then call LEV_DIAG (141);
     2317 
     2318 /*[4.3-2]*/
     2319 		if numeric_lit.length = 1
     2320 		then if fixed_common.comp_level < "3"
     2321 		     then call LEV_DIAG (218);
     2322 
     2323 		go to success;
     2324 	     end;
     2325 
     2326 	go to fail;
     2327 
     2328 level_number:
     2329      proc (level);
     2330 
     2331 declare	level		fixed bin;
     2332 
     2333 	if record.type ^= 2
     2334 	then go to fail;
     2335 
     2336 /*[5.1-1]*/
     2337 	if record.type = 2
     2338 	then int_val, temp_bin1 = fixed (numeric_lit.literal);
     2339 	else int_val, temp_bin1 = 0;
     2340 
     2341 	if numeric_lit.sign ^= " " | numeric_lit.rtdp ^= 0 | numeric_lit.ltdp + numeric_lit.rtdp > 2
     2342 	then res = "1"b;
     2343 	else res = "0"b;
     2344 
     2345 	if level = 0 | level = 66 | level = 88
     2346 	then return;
     2347 
     2348 	if int_val ^= level
     2349 	then go to fail;
     2350 
     2351 /*[4.2-2]*/
     2352 	if record.column = 9999
     2353 	then return;
     2354 
     2355 	if res
     2356 	then call DIAG (216);
     2357 
     2358 	call a_test;
     2359 
     2360      end;
     2361 
     2362 a_test:
     2363      proc;
     2364 
     2365 	if record.column < 8 | record.column > 11
     2366 	then do;
     2367 		call DIAG (219);
     2368 
     2369 /*[4.2-2]*/
     2370 		if fixed_common.comp_level < "5"
     2371 		then call lev_diag (133);
     2372 
     2373 	     end;
     2374 
     2375      end;
     2376 
     2377 /* picture_clause */
     2378 
     2379 check (18):
     2380 	if vector_map.picture_clause = "0"b
     2381 	then goto success;
     2382 	go to fail;
     2383 
     2384 /* picture_char_string */
     2385 
     2386 check (19):
     2387 	if record.type = 4
     2388 	then goto success;
     2389 	go to fail;
     2390 
     2391 /* usage_clause */
     2392 
     2393 check (20):
     2394 	if vector_map.usage_clause = "0"b
     2395 	then goto success;
     2396 	go to fail;
     2397 
     2398 /* father_son usage */
     2399 
     2400 check (21):
     2401 	if h = 0
     2402 	then goto success;
     2403 
     2404 	rnt_key = cobol_htbl.nt_rec (h);
     2405 
     2406 	call cobol_vdwf_dget (cobol_ntfp, fstatus, rnt_ptr, rnt_size, rnt_key);
     2407 
     2408 
     2409 
     2410 /*mask out all bits but USAGE ones*/
     2411 
     2412 	bit32_1 = substr (addr (rnt_ptr -> data_name.file_section) -> bit72, 9, 32) & usage_bits_mask;
     2413 
     2414 	if bit32_1 = "0"b
     2415 	then goto success;
     2416 
     2417 	bit32_2 = substr (vector_part, 9, 32) & usage_bits_mask;
     2418 
     2419 	if bit32_2 = bit32_1
     2420 	then goto success;
     2421 
     2422 	goto fail;
     2423 
     2424 /* value_indicator */
     2425 
     2426 check (22):
     2427 	if vector_map.value_clause = "0"b
     2428 	then goto success;
     2429 	go to fail;
     2430 
     2431 /*numeric_literal */
     2432 
     2433 check (23):
     2434 	if record.type = 2
     2435 	then goto success;
     2436 	go to fail;
     2437 
     2438 /* alphanumeric_literal */
     2439 
     2440 check (24):
     2441 	if record.type = 3
     2442 	then goto success;
     2443 	go to fail;
     2444 
     2445 /* rw_figurative_constant */
     2446 
     2447 figcon:
     2448 check (25):
     2449 	if fixed_common.comp_level < "3"
     2450 	then do;
     2451 		if record.type = 1 & rw.class.fig_con
     2452 		then do;
     2453 			if rw.class.end_dec		/*[4.0-4]*/
     2454 			then call LEV_DIAG (154);
     2455 			go to success;
     2456 		     end;
     2457 	     end;
     2458 	else do;
     2459 		if record.type = 1 & rw.class.fig_con
     2460 		then go to success;
     2461 	     end;
     2462 	go to fail;
     2463 
     2464 /* father_no_value */
     2465 
     2466 check (26):
     2467 	if h = 0
     2468 	then goto success;
     2469 
     2470 	rnt_key = cobol_htbl.nt_rec (h);
     2471 
     2472 	call cobol_vdwf_dget (cobol_ntfp, fstatus, rnt_ptr, rnt_size, rnt_key);
     2473 
     2474 	if substr (addr (rnt_ptr -> data_name.file_section) -> bit72, 47, 2) = "0"b
     2475 	then go to success;
     2476 
     2477 	goto fail;
     2478 
     2479 /* sign_clause */
     2480 
     2481 check (27):
     2482 	if sign_clause = "0"b
     2483 	then goto success;
     2484 	go to fail;
     2485 
     2486 /* father_sign_clause */
     2487 
     2488 check (28):
     2489 	if h = 0
     2490 	then goto success;
     2491 
     2492 	rnt_key = cobol_htbl.nt_rec (h);
     2493 
     2494 	call cobol_vdwf_dget (cobol_ntfp, fstatus, rnt_ptr, rnt_size, rnt_key);
     2495 
     2496 	if rnt_ptr -> data_name.sign_type
     2497 	then go to fail;
     2498 	go to success;
     2499 
     2500 /* father_son_sign_type */
     2501 
     2502 
     2503 check (29):
     2504 	if h = 0
     2505 	then goto success;
     2506 
     2507 	sign_type_temp = data_name.sign_type;
     2508 	rnt_key = cobol_htbl.nt_rec (h);
     2509 
     2510 	call cobol_vdwf_dget (cobol_ntfp, fstatus, rnt_ptr, rnt_size, rnt_key);
     2511 
     2512 	if rnt_ptr -> data_name.sign_type
     2513 	then go to fail;
     2514 	else if rnt_ptr -> data_name.sign_type = sign_type_temp
     2515 	then go to success;
     2516 	goto fail;
     2517 
     2518 /*sync*/
     2519 
     2520 check (30):
     2521 	if vector_map.sync_right = "0"b
     2522 	then goto success;
     2523 	go to fail;
     2524 
     2525 /* father_88 */
     2526 
     2527 check (31):
     2528 	if h = 0
     2529 	then goto success;
     2530 
     2531 	do fh = h to 1 by -1;
     2532 	     if cobol_htbl.switch_88 (fh)
     2533 	     then goto fail;
     2534 	end;
     2535 	goto success;
     2536 
     2537 /* just_indicator */
     2538 
     2539 
     2540 check (32):
     2541 	if vector_map.just_right = "0"b & vector_map.just_left = "0"b
     2542 	then goto success;
     2543 	go to fail;
     2544 
     2545 /* bwz_clause */
     2546 
     2547 check (33):
     2548 	if vector_map.bwz = "0"b
     2549 	then goto success;
     2550 	go to fail;
     2551 
     2552 /* occurs_clause */
     2553 
     2554 check (34):
     2555 	if h = 0 | vector_map.occurs_clause
     2556 	then go to fail;
     2557 	goto success;
     2558 
     2559 /* occurs_dimension */
     2560 
     2561 check (35):
     2562 	if occurs.dimensions < 3
     2563 	then goto success;
     2564 	go to fail;
     2565 
     2566 check (36):
     2567 labnam:						/* value of clause */
     2568 	label_field_num = cobol_imp_word$label_name (min_ptr);
     2569 
     2570 	if label_field_num ^= 0
     2571 	then go to success;
     2572 
     2573 	go to fail;
     2574 
     2575 /* occurence_number */
     2576 
     2577 check (37):
     2578 	if occurs.level.max (odim) ^= 0
     2579 	then goto success;
     2580 	go to fail;
     2581 
     2582 /* occurs_minimax */
     2583 
     2584 check (38):
     2585 	if occurs.level.max (odim) > occurs.level.min (odim)
     2586 	then goto success;
     2587 	go to fail;
     2588 
     2589 /* father_subscripted */
     2590 
     2591 check (39):
     2592 	if h = 0
     2593 	then goto success;
     2594 
     2595 	rnt_key = cobol_htbl.nt_rec (h);
     2596 
     2597 	call cobol_vdwf_dget (cobol_ntfp, fstatus, rnt_ptr, rnt_size, rnt_key);
     2598 
     2599 	if ^rnt_ptr -> data_name.subscripted
     2600 	then goto success;
     2601 
     2602 	goto fail;
     2603 
     2604 /* linage footing redundancy */
     2605 
     2606 check (40):
     2607 	if fd_ind.linage_type.footing = "1"b
     2608 	then goto fail;
     2609 	go to success;
     2610 
     2611 /* linage bottom redundancy */
     2612 
     2613 check (41):
     2614 	if fd_ind.linage_type.bottom = "0"b
     2615 	then goto success;
     2616 	go to fail;
     2617 
     2618 /* indexed_by */
     2619 
     2620 check (42):
     2621 	if vector_map.indexed_by = "0"b
     2622 	then goto success;
     2623 	go to fail;
     2624 
     2625 /* father_indexed_by */
     2626 
     2627 check (43):
     2628 	if h = 0
     2629 	then goto success;
     2630 
     2631 	rnt_key = cobol_htbl.nt_rec (h);
     2632 
     2633 	call cobol_vdwf_dget (cobol_ntfp, fstatus, rnt_ptr, rnt_size, rnt_key);
     2634 
     2635 	if ^rnt_ptr -> data_name.subscripted | rnt_ptr -> data_name.indexed_by
     2636 	then goto success;
     2637 
     2638 	goto fail;
     2639 
     2640 /*test for Level 64 COBOL running*/
     2641 
     2642 check (44):
     2643 	goto success;
     2644 
     2645 /* thru_value */
     2646 
     2647 check (45):
     2648 	goto success;
     2649 
     2650 /* father_usage_index */
     2651 
     2652 check (46):
     2653 	if h = 0
     2654 	then goto success;
     2655 
     2656 	rnt_key = cobol_htbl.nt_rec (h);
     2657 
     2658 	call cobol_vdwf_dget (cobol_ntfp, fstatus, rnt_ptr, rnt_size, rnt_key);
     2659 
     2660 	if ^rnt_ptr -> data_name.usage_index
     2661 	then goto success;
     2662 
     2663 	goto fail;
     2664 
     2665 /* fs_cms_rdf_01 */
     2666 
     2667 check (47):
     2668 	if data_name.level ^= 1
     2669 	then go to success;
     2670 	if vector_map.file_section = "1"b | vector_map.communication_section = "1"b
     2671 	then goto fail;
     2672 	goto success;
     2673 
     2674 
     2675 
     2676 check (48):
     2677 labval:						/* examine label field literal */
     2678 	if label_field_num ^= 0
     2679 	then go to LV (label_field_num);
     2680 
     2681 	if numeric_lit.type = 2 | alphanum_lit.type = 3 | (rw.type = 1 & rw.class.fig_con)
     2682 	then go to success;
     2683 
     2684 	go to fail;
     2685 
     2686 LV (1):						/* file-id */
     2687 	if numeric_lit.type = 2			/* numeric lit */
     2688 	then go to fail;
     2689 
     2690 	else if alphanum_lit.type = 3			/* alphanumeric lit */
     2691 	then do;
     2692 		if alphanum_lit.length > 17
     2693 		then tf = 194;
     2694 		go to success;
     2695 	     end;
     2696 
     2697 	else if rw.type = 1 & rw.class.fig_con		/* figurative const */
     2698 	then go to success;
     2699 
     2700 	go to fail;
     2701 
     2702 LV (2):						/* retention */
     2703 	if numeric_lit.type = 2			/* numeric lit */
     2704 	then do;
     2705 		if ^(numeric_lit.integer & numeric_lit.sign = " " & numeric_lit.length <= 3)
     2706 		then tf = 212;
     2707 
     2708 		go to success;
     2709 
     2710 	     end;
     2711 
     2712 	else if alphanum_lit.type = 3			/* alphanumeric literal */
     2713 	then go to fail;
     2714 
     2715 	else if rw.type = 1 & rw.class.fig_con		/* figurative const */
     2716 	then do;
     2717 		if ^(rw.key = 180)			/* is_word("ZERO") */
     2718 		then tf = 213;
     2719 		go to success;
     2720 
     2721 	     end;
     2722 
     2723 	go to fail;
     2724 
     2725 LV (3):						/* catalogue-name */
     2726 	if alphanum_lit.type = 3
     2727 	then do;
     2728 		if alphanum_lit.length > 168
     2729 		then do;
     2730 			tf = 222;
     2731 			alphanum_lit.length = 168;
     2732 		     end;
     2733 
     2734 		go to success;
     2735 
     2736 	     end;
     2737 
     2738 	go to fail;
     2739 
     2740 /* linage top redundancy */
     2741 
     2742 check (49):
     2743 	if fd_ind.linage_type.top = "0"b
     2744 	then goto success;
     2745 	go to fail;
     2746 
     2747 check (50):
     2748 all:						/* test for all fig const */
     2749 	if rw.type = 1 & rw.key = 73			/* is_word("ALL") */
     2750 	then do;
     2751 		all_ind = 1;
     2752 
     2753 /*[4.0-4]*/
     2754 		if fixed_common.comp_level < "3"
     2755 		then call LEV_DIAG (144);
     2756 
     2757 		go to success;
     2758 	     end;
     2759 
     2760 	all_ind = 0;
     2761 
     2762 	go to fail;
     2763 
     2764 /* level = 01 or 77, but dont push level stack */
     2765 
     2766 check (51):
     2767 lev0177:
     2768 	if record.type ^= 2
     2769 	then go to fail;
     2770 
     2771 /*[5.1-1]*/
     2772 	if record.type = 2
     2773 	then int_val, temp_bin1 = fixed (numeric_lit.literal);
     2774 	else int_val, temp_bin1 = 0;
     2775 
     2776 	if int_val = 1 | int_val = 77
     2777 	then do;
     2778 		next_level = 1;
     2779 		go to success;
     2780 	     end;
     2781 
     2782 	go to fail;
     2783 
     2784 lrc:
     2785 check (52):
     2786 	if FD_indic = "0"b
     2787 	then go to success;
     2788 	else if file_table.label_format ^= 0
     2789 	then go to success;
     2790 
     2791 	go to fail;
     2792 
     2793 /*[4.0-1]*/
     2794 dup_type8:
     2795 check (53):					/*[4.0-1]*/
     2796 	if record.type = 8				/*[4.0-1]*/
     2797 	then do;
     2798 		if fixed_common.comp_level < "3"	/*[4.0-1]*/
     2799 		then if index (tok_string, "~" || user_word.word || "~") > 0
     2800 						/*[4.0-4]*/
     2801 		     then call LEV_DIAG (182);
     2802 
     2803 /*[4.0-1]*/
     2804 		go to success;			/*[4.0-1]*/
     2805 	     end;
     2806 
     2807 /*[4.0-1]*/
     2808 	go to fail;
     2809 
     2810 /* fs_indicator */
     2811 
     2812 check (54):
     2813 	if substr (section_ind, 1, 1) = "0"b
     2814 	then goto success;
     2815 	go to fail;
     2816 
     2817 /* fs_level_indicator */
     2818 
     2819 check (55):
     2820 fsind:
     2821 	if record.type = 1 & rw.class.fs_ind = "1"b
     2822 	then do;
     2823 		call a_test;
     2824 		next_level = 1;
     2825 
     2826 		if rw.key = 219			/* fd */
     2827 		then FD_indic = "1"b;
     2828 		else FD_indic = "0"b;
     2829 		go to success;
     2830 	     end;
     2831 
     2832 	go to fail;
     2833 
     2834 /* file_name_match */
     2835 
     2836 check (56):
     2837 	i = 0;
     2838 
     2839 next_file:
     2840 	i = i + 1;
     2841 
     2842 	if i > fixed_common.file_count
     2843 	then goto fundefined;
     2844 
     2845 /* get file record number in common file */
     2846 
     2847 	cm_key = fixed_common.filedescr_offsets (i);
     2848 
     2849 	call cobol_vdwf_dget (cobol_cmfp, fstatus, cm_ptr, cm_size, cm_key);
     2850 
     2851 	ft_ptr = cm_ptr;
     2852 
     2853 	if file_table.name_size = fd_token.name_size
     2854 	then if substr (file_table.name, 1, file_table.name_size) = substr (fd_token.name, 1, fd_token.name_size)
     2855 	     then do;
     2856 		     org = file_table.organization;
     2857 
     2858 /*[4.0-2]*/
     2859 		     call init_src;
     2860 
     2861 		     go to success;
     2862 		end;
     2863 
     2864 	if i = 20
     2865 	then goto next_file_chain;
     2866 
     2867 	goto next_file;
     2868 
     2869 next_file_chain:
     2870 	if file_table.next = null_key
     2871 	then goto fundefined;
     2872 
     2873 	cm_key = file_table.next;
     2874 
     2875 	call cobol_vdwf_dget (cobol_cmfp, fstatus, cm_ptr, cm_size, cm_key);
     2876 
     2877 	ft_ptr = cm_ptr;
     2878 
     2879 	if file_table.name_size = fd_token.name_size
     2880 	then if substr (file_table.name, 1, file_table.name_size) = substr (fd_token.name, 1, fd_token.name_size)
     2881 	     then do;
     2882 		     org = file_table.organization;
     2883 
     2884 /*[4.0-2]*/
     2885 		     call init_src;
     2886 
     2887 		     go to success;
     2888 		end;
     2889 
     2890 	goto next_file_chain;
     2891 
     2892 fundefined:
     2893 	fd_token.file_no = 0;
     2894 	org = 0;
     2895 	goto fail;
     2896 
     2897 check (57):
     2898 	if record.type = 1 & rw.class.fs_ind
     2899 	then do;
     2900 		next_level = 1;
     2901 		go to success;
     2902 	     end;
     2903 
     2904 	go to fail;
     2905 
     2906 /* file_01 */
     2907 
     2908 check (58):
     2909 	if ll01 = "1"b | fd_ind.report_is = "1"b
     2910 	then goto success;
     2911 	go to fail;
     2912 
     2913 /* fd_record_contain */
     2914 
     2915 check (59):
     2916 	if fd_ind.record_contain = "0"b
     2917 	then goto success;
     2918 	go to fail;
     2919 
     2920 /* fd_data_record */
     2921 
     2922 check (60):
     2923 	if fd_ind.data_record = "0"b
     2924 	then goto success;
     2925 	go to fail;
     2926 
     2927 /* fd_clause_header */
     2928 
     2929 check (61):					/*[4.0-2]*/
     2930 	if record.type ^= 1
     2931 	then go to fail;				/*[4.0-2]*/
     2932 	if ^rw.class.fd_clause
     2933 	then go to fail;
     2934 
     2935 /*[4.0-2]*/
     2936 	if rw.key = 219
     2937 	then ii = 1;				/* fd */
     2938 						/*[4.0-2]*/
     2939 	else if rw.key = 237
     2940 	then ii = 2;				/* recording */
     2941 						/*[4.0-2]*/
     2942 	else if rw.key = 205
     2943 	then ii = 3;				/* block */
     2944 						/*[4.0-2]*/
     2945 	else if rw.key = 148
     2946 	then ii = 4;				/* record */
     2947 						/*[4.0-2]*/
     2948 	else if rw.key = 121
     2949 	then ii = 5;				/* label */
     2950 						/*[4.0-2]*/
     2951 	else if rw.key = 258
     2952 	then ii = 6;				/* value */
     2953 						/*[4.0-2]*/
     2954 	else if rw.key = 196
     2955 	then ii = 7;				/*data */
     2956 						/*[4.0-2]*/
     2957 	else if rw.key = 240
     2958 	then ii = 8;				/* reports */
     2959 						/*[4.0-2]*/
     2960 	else if rw.key = 563
     2961 	then ii = 9;				/* linage */
     2962 						/*[4.0-2]*/
     2963 	else if rw.key = 306
     2964 	then ii = 10;				/* code-set */
     2965 						/*[4.0-2]*/
     2966 	else go to fail;
     2967 
     2968 /*[4.0-2]*/
     2969 	source_pos.line (ii) = rw.line;		/*[4.0-2]*/
     2970 	source_pos.column (ii) = rw.column;
     2971 
     2972 	go to success;
     2973 
     2974 /*[4.0-2]*/
     2975 init_src:
     2976      proc;
     2977 
     2978 /*[4.0-2]*/
     2979 	do ii = 1 by 1 to 10;
     2980 
     2981 /*[4.0-2]*/
     2982 	     source_pos.line (ii) = 0;
     2983 
     2984 /*[4.0-2]*/
     2985 	end;
     2986 
     2987 /*[4.0-2]*/
     2988 	source_pos.line (1) = rw.line;		/*[4.0-2]*/
     2989 	source_pos.column (1) = rw.column;
     2990 
     2991      end;
     2992 
     2993 check (62):
     2994 sechdr:
     2995 	if min_eof | (record.type = 1 & rw.class.section_header = "1"b)
     2996 	then do;
     2997 		next_level = 1;
     2998 		go to success;
     2999 	     end;
     3000 
     3001 	go to fail;
     3002 
     3003 check (63):
     3004 lev66s:						/*[5.0-1]*/
     3005 	call test_level_number (66);
     3006 	next_level = 1;
     3007 	go to success;
     3008 
     3009 check (64):
     3010 lev88s:
     3011 	call test_level_number (88);
     3012 
     3013 /*[4.2-3]*/
     3014 	if filler_flag = "1"b
     3015 	then if fixed_common.comp_level < "3"
     3016 	     then call LEV_DIAG_SAVED (176);
     3017 	go to success;
     3018 
     3019 test_level_number:
     3020      proc (num);
     3021 
     3022 declare	num		fixed bin;
     3023 
     3024 	call level_number (num);
     3025 
     3026 	if int_val ^= num
     3027 	then go to fail;
     3028 
     3029      end;
     3030 
     3031 /* fd_recording_mode */
     3032 
     3033 check (65):
     3034 	if fd_ind.recording_mode = "0"b
     3035 	then goto success;
     3036 	go to fail;
     3037 
     3038 /* fd_block_contain */
     3039 
     3040 check (66):
     3041 	if fd_ind.block_contain = "0"b & fd_token.type = 12
     3042 	then goto success;
     3043 	go to fail;
     3044 
     3045 /* fd_record_contain */
     3046 
     3047 check (67):
     3048 	if fd_ind.record_contain = "0"b
     3049 	then goto success;
     3050 	go to fail;
     3051 
     3052 /* fd_label_record */
     3053 
     3054 
     3055 check (68):
     3056 	if fd_ind.label_record = "0"b & fd_token.type = 12
     3057 	then goto success;
     3058 	go to fail;
     3059 
     3060 /* fd_value_of */
     3061 
     3062 check (69):
     3063 	if fd_ind.value_of = "0"b & fd_token.type = 12
     3064 	then goto success;
     3065 	go to fail;
     3066 
     3067 /* fd_data_record */
     3068 
     3069 check (70):
     3070 	if fd_ind.data_record = "0"b
     3071 	then goto success;
     3072 	go to fail;
     3073 
     3074 /* fd_report_is */
     3075 
     3076 check (71):
     3077 	if fd_ind.report_is = "0"b & fd_token.type = 12	/*[4.4-1]*/
     3078 	then do;
     3079 		file_table.organization, file_table.device = 1;
     3080 		go to success;
     3081 	     end;
     3082 	go to fail;				/* fd_linage_is */
     3083 
     3084 check (72):
     3085 	if fd_ind.linage_is = "0"b & fd_token.type = 12
     3086 	then goto success;
     3087 	go to fail;
     3088 
     3089 /*[4.0-2]*/
     3090 per_ck:
     3091 check (73):					/*[4.0-2]*/
     3092 	if rw.type ^= 1
     3093 	then go to fail;				/*[4.0-2]*/
     3094 	if rw.key ^= 189
     3095 	then go to fail;				/* "." */
     3096 
     3097 /*[4.0-2]*/
     3098 	do ii = 1 by 1 to 10;
     3099 
     3100 /*[4.0-2]*/
     3101 	     if source_pos.line (ii) ^= 0		/*[4.0-2]*/
     3102 	     then do;
     3103 		     lev_message.line = source_pos.line (ii);
     3104 						/*[4.0-2]*/
     3105 		     lev_message.column = source_pos.column (ii);
     3106 
     3107 /*[4.0-2]*/
     3108 		     go to FT (ii);
     3109 
     3110 FT (1):
     3111 		     num = 36;
     3112 		     call LEV1;
     3113 		     go to FT1;			/* fd */
     3114 FT (2):
     3115 		     num = 192;
     3116 		     mod_num = 25;
     3117 		     LEV = "5";
     3118 		     go to FT1;			/* recording mode */
     3119 FT (3):
     3120 		     num = 37;
     3121 		     call LEV1;
     3122 		     go to FT1;			/* block contains */
     3123 FT (4):
     3124 		     num = 193;
     3125 		     call LEV1;
     3126 		     go to FT1;			/* record contains */
     3127 FT (5):
     3128 		     num = 38;
     3129 		     call LEV1;
     3130 		     go to FT1;			/* label records */
     3131 FT (6):
     3132 		     num = 189;
     3133 		     call LEV1;
     3134 		     go to FT1;			/* value of */
     3135 FT (7):
     3136 		     num = 190;
     3137 		     call LEV1;
     3138 		     go to FT1;			/* data records */
     3139 FT (8):
     3140 		     num = 122;
     3141 		     mod_num = 25;
     3142 		     LEV = "5";
     3143 		     go to FT1;			/* reports are */
     3144 FT (9):
     3145 		     num = 191;
     3146 		     call LEV2;
     3147 		     go to FT1;			/* linage */
     3148 FT (10):
     3149 		     num = 168;
     3150 		     go to FT1;			/* code-set */
     3151 
     3152 /*[4.0-2]*/
     3153 FT1:						/*[4.0-2]*/
     3154 		     if LEV > fixed_common.comp_level	/*[4.0-2]*/
     3155 		     then do;
     3156 			     lev_message.module = mod_num;
     3157 						/*[4.0-2]*/
     3158 			     lev_message.number = num;
     3159 
     3160 /*[4.0-2]*/
     3161 			     call cobol_c_list (lev_message_ptr);
     3162 
     3163 /*[4.0-2]*/
     3164 			     mod_num = 0;		/*[4.0-2]*/
     3165 			end;
     3166 
     3167 /*[4.0-2]*/
     3168 		end;
     3169 
     3170 /*[4.0-2]*/
     3171 	end;
     3172 
     3173 	go to success;
     3174 
     3175 LEV1:
     3176      proc;
     3177 
     3178 /*[4.0-2]*/
     3179 	mod_num = lev1_mod (org);			/*[4.0-2]*/
     3180 	LEV = lev1_org (org);
     3181 
     3182      end;
     3183 
     3184 LEV2:
     3185      proc;
     3186 
     3187 /*[4.0-2]*/
     3188 	mod_num = lev2_mod (org);			/*[4.0-2]*/
     3189 	LEV = lev2_org (org);
     3190 
     3191      end;
     3192 
     3193 check (74):					/* skip debug item decls if not needed */
     3194 						/*[4.4-3]*/
     3195 	if fixed_common.use_debug | fixed_common.debug
     3196 	then go to success;
     3197 
     3198 
     3199 
     3200 /*[4.2-1]*/
     3201 /*[4.0-5] */
     3202 	do while (record.column = 9999 & ^min_eof);
     3203 
     3204 /*[4.0-3]*/
     3205 	     call scan;				/*[4.0-3]*/
     3206 	end;
     3207 
     3208 /*[4.0-3]*/
     3209 	go to success;
     3210 
     3211 
     3212 
     3213 /* father_son_value_usage */
     3214 
     3215 check (75):
     3216 	if h = 0
     3217 	then goto success;
     3218 
     3219 	rnt_key = cobol_htbl.nt_rec (h);
     3220 
     3221 	call cobol_vdwf_dget (cobol_ntfp, fstatus, rnt_ptr, rnt_size, rnt_key);
     3222 
     3223 	if substr (addr (rnt_ptr -> data_name.file_section) -> bit72, 47, 2) = "0"b
     3224 	then go to success;
     3225 
     3226 	if vector_map.display
     3227 	then goto success;
     3228 
     3229 	goto fail;
     3230 
     3231 /* usage_display */
     3232 
     3233 check (76):
     3234 	if vector_map.display = "1"b
     3235 	then goto success;
     3236 	go to fail;
     3237 
     3238 check (77):					/* skip terminator for debug item decl */
     3239 						/*[4.0-3]*/
     3240 	if record.type = 3 /*[4.0-3]*/ & /*[4.0-3]*/ alphanum_lit.length = 6 /*[4.0-3]*/
     3241 	     & /*[4.0-3]*/ substr (alphanum_lit.string, 1, alphanum_lit.length) = "~~~~~~"
     3242 						/*[4.0-3]*/
     3243 	then go to success;				/*[4.0-3]*/
     3244 	else go to fail;
     3245 
     3246 check (78):
     3247 renames:
     3248 	go to fail;
     3249 
     3250 
     3251 
     3252 
     3253 
     3254 
     3255 
     3256 
     3257 
     3258 
     3259 
     3260 
     3261 
     3262 
     3263 
     3264 
     3265 check (79):
     3266 test_like:
     3267 	if like_clause
     3268 	then go to fail;
     3269 	else go to success;
     3270 
     3271 /****** communication section check routines *****/
     3272 
     3273 check (80):
     3274 	if substr (section_ind, 6, 3) = "000"b
     3275 	then goto success;
     3276 	go to fail;
     3277 
     3278 /* uniqueness of cms */
     3279 
     3280 check (81):
     3281 	if substr (section_ind, 5, 1) = "1"b
     3282 	then goto fail;
     3283 	go to success;
     3284 
     3285 /* uniqueness of INTIAL for cd */
     3286 
     3287 check (82):
     3288 	if cd_initial = "0"b
     3289 	then goto success;
     3290 	go to fail;
     3291 
     3292 /* cd input clause header */
     3293 
     3294 check (83):
     3295 	if rw.type = 1 & rw.class.cd_input = "1"b
     3296 	then goto success;
     3297 	go to fail;
     3298 
     3299 /* cd input record length=87 output record length=23 */
     3300 
     3301 check (84):
     3302 	if save_cdo = 0
     3303 	then cd_out_size = 23;
     3304 	else cd_out_size = 10 + 13 * save_cdo;
     3305 
     3306 	if data_name.level ^= 1 & data_name.level ^= 77
     3307 	then if (substr (cd_clauses, 12, 1) & cobol_htbl.item_length (1) <= 87)
     3308 		| (^substr (cd_clauses, 12, 1) & cobol_htbl.item_length (1) <= cd_out_size)
     3309 	     then goto success;
     3310 	     else go to fail;
     3311 
     3312 	else if (substr (cd_clauses, 12, 1) & data_name.item_length <= 87)
     3313 	     | (^substr (cd_clauses, 12, 1) & data_name.item_length <= cd_out_size)
     3314 	then goto success;
     3315 	else go to fail;
     3316 
     3317 /* uniqueness of symbolic que clause */
     3318 
     3319 check (85):
     3320 	if substr (cd_clauses, 1, 1) = "0"b
     3321 	then goto success;
     3322 	go to fail;
     3323 
     3324 /* uniqueness of message count */
     3325 
     3326 check (86):
     3327 	if substr (cd_clauses, 11, 1) = "0"b
     3328 	then goto success;
     3329 	go to fail;
     3330 
     3331 /* uniqueness of sub-queue-1 */
     3332 
     3333 check (87):
     3334 	if substr (cd_clauses, 2, 1) = "0"b
     3335 	then goto success;
     3336 	go to fail;
     3337 
     3338 /* uniqueness of sub-queue-2 */
     3339 
     3340 check (88):
     3341 	if substr (cd_clauses, 3, 1) = "0"b
     3342 	then goto success;
     3343 	go to fail;
     3344 
     3345 /* uniqueness of sub-queue-3 */
     3346 check (89):
     3347 	if substr (cd_clauses, 4, 1) = "0"b
     3348 	then goto success;
     3349 	go to fail;
     3350 
     3351 /* uniqueness of symbolic source clause */
     3352 
     3353 check (90):
     3354 	if substr (cd_clauses, 7, 1) = "0"b
     3355 	then goto success;
     3356 	go to fail;
     3357 
     3358 /* uniqueness of message date or symbolic destination clause */
     3359 
     3360 check (91):
     3361 	if substr (cd_clauses, 5, 1) = "0"b
     3362 	then goto success;
     3363 	go to fail;
     3364 
     3365 /* uniqueness of message times */
     3366 
     3367 check (92):
     3368 	if substr (cd_clauses, 6, 1) = "0"b
     3369 	then goto success;
     3370 	go to fail;
     3371 
     3372 /* uniqueness of text length */
     3373 
     3374 check (93):
     3375 	if substr (cd_clauses, 8, 1) = "0"b
     3376 	then goto success;
     3377 	go to fail;
     3378 
     3379 /* uniqueness of end key clause */
     3380 
     3381 check (94):
     3382 	if substr (cd_clauses, 9, 1) = "0"b
     3383 	then goto success;
     3384 	go to fail;
     3385 
     3386 /* uniqueness of status key clause */
     3387 
     3388 check (95):
     3389 	if substr (cd_clauses, 10, 1) = "0"b
     3390 	then goto success;
     3391 	go to fail;
     3392 
     3393 /* cd output clause header */
     3394 
     3395 check (96):
     3396 	if rw.type = 1 & rw.class.cd_output = "1"b
     3397 	then goto success;
     3398 	go to fail;
     3399 
     3400 check (97):
     3401 	;
     3402 check (98):
     3403 	;
     3404 check (99):
     3405 	;
     3406 
     3407 check (100):					/*       call ioa_("compiler error run3: routine ^d is unused ",tf);*/
     3408 	goto fail;
     3409 
     3410 
     3411 /*[5.1-3]*/
     3412 dcl	(RL, RC)		fixed bin;
     3413 scan:
     3414      proc;
     3415 
     3416 scan_next:					/*[5.1-3]*/
     3417 	save_last_line = RL;			/*[5.1-3]*/
     3418 	save_last_column = RC;
     3419 
     3420 	call cobol_swf_get (cobol_m1fp, fstatus, min_ptr, min_size_r);
     3421 
     3422 	if substr (fstatus, 17, 16) ^= "0"b
     3423 	then do;
     3424 
     3425 		if substr (fstatus, 17, 16) = "0000000000100111"b
     3426 		then do;
     3427 			min_eof = "1"b;
     3428 			goto outscan;
     3429 		     end;
     3430 
     3431 		pre_end_sw = "1"b;
     3432 
     3433 		goto outscan;
     3434 
     3435 	     end;
     3436 
     3437 /*[5.1-3]*/
     3438 	RL = record.line;				/*[5.1-3]*/
     3439 	RC = record.column;
     3440 
     3441 	if record.type = 5
     3442 	then call cobol_c_list (min_ptr);
     3443 
     3444 	if record.type = 7 | record.type = 24 | (record.type = 5 & record.info.rep = "0"b)
     3445 	then goto scan_next;
     3446 
     3447 	if record.type = 2
     3448 	then nl = numeric_lit.length;
     3449 	if record.type = 3
     3450 	then al = alphanum_lit.length;
     3451 	if record.type = 8
     3452 	then ul = user_word.word_size;
     3453 
     3454 	if min_ptr = null ()
     3455 	then do;
     3456 
     3457 outscan:
     3458 		min_ptr = addr (name_string);		/*for fake token*/
     3459 
     3460 /*[5.1-3]*/
     3461 		rw.line = RL;			/*[5.1-3]*/
     3462 		rw.column = RC;
     3463 		rw.type = 1;
     3464 		rw.key = 142;			/*PROCEDURE*/
     3465 		rw.class.filler4 = "00"b;
     3466 		rw.class.fig_con = "0"b;
     3467 		rw.class.filler5 = "0"b;
     3468 		rw.class.section_header = "1"b;
     3469 		rw.class.fs_ind = "0"b;
     3470 		rw.class.fd_clause = "0"b;
     3471 		rw.class.dd_clause = "0"b;
     3472 		rw.class.cd_input = "0"b;
     3473 		rw.class.cd_output = "0"b;
     3474 		rw.class.cset_name = "0"b;
     3475 		rw.class.filler6 = "00000000000"b;
     3476 		rw.jump_index = 30;			/* 5*6 */
     3477 
     3478 	     end;
     3479 
     3480      end scan;
     3481 
     3482 
     3483 DIAG:
     3484      proc (num);
     3485 
     3486 declare	(num, tf_save)	fixed bin;
     3487 
     3488 	tf_save = tf;
     3489 	tf = num;
     3490 
     3491 /*[4.2-5]*/
     3492 	call diag (tf, record.line, record.column);
     3493 
     3494 	tf = tf_save;
     3495 
     3496      end;
     3497 
     3498 diag:
     3499      proc (diag_num, line, column);
     3500 
     3501 /*[4.2-5]*/
     3502 declare	(diag_num, line, column)
     3503 			fixed bin;
     3504 
     3505 	message_ptr = addr (message_area);
     3506 
     3507 	ptr4 = addr (message_area);
     3508 	ptr4 -> cma = 0;
     3509 
     3510 	message.size = msg_constant;			/*[4.2-5]*/
     3511 	message.line = line;			/*[4.2-5]*/
     3512 	message.column = column;
     3513 	message.type = 5;
     3514 	message.run3 = 3;
     3515 	message.info.para = "0"b;
     3516 	message.info.rep = "0"b;
     3517 	message.info.fillerx = "000000"b;
     3518 	message.length = 0;
     3519 	message.number = diag_num;
     3520 
     3521 	call cobol_c_list (message_ptr);
     3522 
     3523 	diag_num = 0;
     3524      end diag;
     3525 
     3526 lev_diag:
     3527      proc (diag_num);
     3528 
     3529 declare	diag_num		fixed bin;
     3530 
     3531 	lev_message.line = record.line;
     3532 	lev_message.column = record.column;
     3533 	lev_message.number = diag_num;
     3534 	lev_message.module = mod_num;
     3535 
     3536 /*[4.0-2]*/
     3537 	call cobol_c_list (lev_message_ptr);
     3538 
     3539 	mod_num = 0;
     3540 
     3541      end;
     3542 
     3543 LEV_DIAG:
     3544      proc (diag_num);
     3545 
     3546 /*[4.0-4]*/
     3547 declare	diag_num		fixed bin;
     3548 
     3549 /*[4.0-4]*/
     3550 	mod_num = 0;
     3551 
     3552 /*[4.0-4]*/
     3553 	call lev_diag (diag_num);
     3554 
     3555      end;
     3556 
     3557 /*[4.2-3]*/
     3558 LEV_DIAG_SAVED:
     3559      proc (diag_num);
     3560 
     3561 /* Prints diagnostic at the line and column saved in saved_line
     3562*   ans saved_column					*/
     3563 
     3564 dcl	diag_num		fixed bin;
     3565 
     3566 	lev_message.line = saved_line;
     3567 	lev_message.column = saved_column;
     3568 	lev_message.number = diag_num;
     3569 	lev_message.module = 0;
     3570 
     3571 	call cobol_c_list (lev_message_ptr);
     3572 
     3573      end LEV_DIAG_SAVED;
     3574 
     3575 pre_end:
     3576 comp_end:
     3577 	call cobol_ddact1 (98);			/*action(62)*/
     3578 	return;
     3579 
     3580 /*[4.0-1]*/
     3581 init_tok_string:
     3582      entry;
     3583 
     3584 /*[4.0-1]*/
     3585 	tok_string = "~";				/*[4.0-1]*/
     3586 	return;
     3587 
     3588 /*[4.0-1]*/
     3589 enter_tok_string:
     3590      entry (ch36);
     3591 
     3592 /*[4.0-1]*/
     3593 	if index (tok_string, "~" || ch36) <= 0		/*[4.0-1]*/
     3594 	then tok_string = tok_string || ch36;
     3595 
     3596 /*[4.0-1]*/
     3597 	return;
     3598 
     3599 /*[4.0-1]*/
     3600 dcl	ch36		char (36) varying;		/*[4.0-1]*/
     3601 dcl	tok_string	char (1024) varying static internal;
     3602 
     3603 /*[4.0-2]*/
     3604 dcl	1 lev_message	static internal,		/*[4.0-2]*/
     3605 	  2 size		fixed bin,		/*[4.0-2]*/
     3606 	  2 line		fixed bin,		/*[4.0-2]*/
     3607 	  2 column	fixed bin,		/*[4.0-2]*/
     3608 	  2 type		fixed bin,		/*[4.0-2]*/
     3609 	  2 run		fixed bin,		/*[4.0-2]*/
     3610 	  2 number	fixed bin,		/*[4.0-2]*/
     3611 	  2 module	fixed bin;
     3612 
     3613 /*[4.0-2]*/
     3614 dcl	lev_message_ptr	ptr static internal;
     3615 
     3616 /*[4.0-2]*/
     3617 dcl	1 source_pos	(10),			/*[4.0-2]*/
     3618 	  2 line		fixed bin,		/*[4.0-2]*/
     3619 	  2 column	fixed bin;
     3620 
     3621 /*[4.0-2]*/
     3622 dcl	(ii, num)		fixed bin,
     3623 	LEV		char (1);
     3624 
     3625 /*[4.0-2]*/
     3626 dcl	lev1_org		(5) char (1) init ("0", "2", "4", "0", "0");
     3627 						/*[4.0-2]*/
     3628 dcl	lev2_org		(5) char (1) init ("3", "3", "4", "0", "5");
     3629 
     3630 /*[4.0-2]*/
     3631 dcl	lev1_mod		(5) fixed bin init (15, 17, 19, 0, 25);
     3632 						/*[4.0-2]*/
     3633 dcl	lev2_mod		(5) fixed bin init (16, 18, 20, 0, 26);
     3634 
     3635 get_file_key:
     3636      entry (fnumber) returns (char (5));
     3637 
     3638 /*[4.0-3]*/
     3639 declare	fnumber		fixed bin;
     3640 
     3641 /*[4.0-3]*/
     3642 	return (FILE_REC_TAB.file_key (fnumber));
     3643 
     3644 init_file_tab:
     3645      entry;
     3646 
     3647 /*[4.0-3]*/
     3648 	FILE_REC_TAB.file_ind = "1"b;			/*[4.0-3]*/
     3649 	FILE_REC_TAB.file_count = FILE_REC_TAB.file_count + 1;
     3650 						/*[4.0-3]*/
     3651 	FILE_REC_TAB.file_key (FILE_REC_TAB.file_count) = "";
     3652 
     3653 /*[4.0-3]*/
     3654 	return;
     3655 
     3656 /*[4.0-3]*/
     3657 declare	1 FILE_REC_TAB	static int,		/*[4.0-3]*/
     3658 	  2 file_count	fixed bin,		/*[4.0-3]*/
     3659 	  2 file_ind	bit (1),			/*[4,0-3]*/
     3660 	  2 file_key	(128) char (5);
     3661 
     3662 /*[4.2-3]*/
     3663 declare	saved_line	fixed bin,
     3664 	saved_column	fixed bin,
     3665 	filler_flag	bit (1);
     3666 
     3667 declare	cobol_imp_word$alphabet_name
     3668 			entry (ptr) returns (fixed bin);
     3669 declare	cobol_imp_word$label_name
     3670 			entry (ptr) returns (fixed bin);
     3671 declare	alf_ptr		ptr;
     3672 declare	key		fixed bin,
     3673 	int_val		fixed bin (71);
     3674 declare	(mod_num, act_num, org, TF, save_j)
     3675 			fixed bin;
     3676 
     3677 declare	1 alf,
     3678 	  2 alf_size	fixed bin,
     3679 	  2 alf_key	char (5),
     3680 	  2 alf_key_ptr	ptr,
     3681 	  2 alf_status	bit (32);
     3682 
     3683 declare	alf_offset	fixed bin based (alf_key_ptr);
     3684 declare	fb		fixed bin based;
     3685 
     3686 declare	test_v		fixed bin;		/*store test field*/
     3687 declare	se		fixed bin;
     3688 declare	cslno		fixed bin;
     3689 declare	stack		(30) fixed bin;
     3690 declare	stack_index	fixed bin;
     3691 declare	slptr		ptr;
     3692 declare	fstatus		bit (32);			/*io return code*/
     3693 declare	bit9		bit (9);
     3694 declare	syntab_ptr	ptr;
     3695 declare	cd_out_size	fixed bin;
     3696 
     3697 declare	1 indicators,
     3698 	  2 FD_indic	bit (1),
     3699 	  2 res		bit (1);
     3700 
     3701 declare	1 dd_static	static internal,
     3702 	  2 save_last_line	fixed bin,
     3703 	  2 save_last_column
     3704 			fixed bin,
     3705 	  2 s_lin		fixed bin,
     3706 	  2 s_col		fixed bin;
     3707 
     3708 
     3709 
     3710 declare	null_key		char (5) internal static init ("00000");
     3711 declare	thirty_two_zeros	bit (32) internal static init ("00000000000000000000000000000000"b);
     3712 declare	filstring_init	char (30) internal static;
     3713 declare	cobol_initstatic	entry ext;		/*initialize variables*/
     3714 declare	cobol_ddst	entry (ptr) ext;		/*initialize syntax table*/
     3715 declare	cobol_ddact1	entry (fixed bin);
     3716 declare	cobol_ddact2	entry (fixed bin);
     3717 
     3718 declare	1 qual_rec	based (qual_ptr),
     3719 	  2 next		char (5),
     3720 	  2 size		fixed bin,
     3721 	  2 name		char (0 refer (qual_rec.size));
     3722 
  1     1 
  1     2 /* BEGIN INCLUDE FILE ... cobol_file_key.incl.pl1 */
  1     3 /* Last modified on 03/30/78 by FCH */
  1     4 
  1     5 /*
  1     6*A file key record is created in variable common for any one of several
  1     7*data items which may be associated with a file name.  The key_type field in
  1     8*the file key record identifies the type of item for which the record is
  1     9*created.  The name in a file key record is resolved by the replacement
  1    10*phase, and a section of the type 9 entry in the name table for the
  1    11*specified data item is stored in the file key record.  The stored
  1    12*description is subsequently used by the generator phase.
  1    13**/
  1    14 
  1    15 /*   THE FILE KEY RECORD STRUCTURE   */
  1    16 
  1    17 dcl 	1 file_key based (fkey_ptr),
  1    18 		2 next char(5),
  1    19 		2 next_alt char(5),
  1    20 		2 qual char(5),
  1    21 		2 info,
  1    22 		3 duplicates bit(1),
  1    23 		3 filler bit(7),
  1    24 		2 file_no fixed bin,
  1    25 		2 key_type fixed bin,
  1    26 		2 line fixed bin,
  1    27 		2 column fixed bin,
  1    28 		2 temp_seg fixed bin,
  1    29 		2 temp_offset fixed bin(24),
  1    30 		2 desc char(40),
  1    31 		2 name_size fixed bin,
  1    32 		2 name char(0 refer(file_key.name_size));
  1    33 
  1    34 /* END INCLUDE FILE ... cobol_file_key.incl.pl1 */
  1    35 
     3723 
     3724 declare	1 alphabet_name	based (min_ptr),
  2     1 
  2     2 /* begin include file ... cobol_TYPE40.incl.pl1 */
  2     3 /* Last modified on 11/17/76 by ORN */
  2     4 
  2     5 		/* header */
  2     6 		2 size fixed bin,
  2     7 		2 line fixed bin,
  2     8 		2 column fixed bin,
  2     9 		2 type fixed bin,
  2    10 		/* body */
  2    11 		2 string_ptr ptr,
  2    12 		2 prev_rec ptr,
  2    13 		2 info,
  2    14 			3 repl bit(8),
  2    15 			3 one_one bit(1),
  2    16 			3 onto bit(1),
  2    17 		2 hival_char char(1),
  2    18 		2 loval_char char(1),
  2    19 		2 iw_key fixed bin,
  2    20 		2 def_line fixed bin,
  2    21 		2 char_size fixed bin,
  2    22 		2 hi_value char(1),
  2    23 		2 segno fixed bin,
  2    24 		2 offset fixed bin,
  2    25 		2 dn_offset fixed bin,
  2    26 		2 table char(512),
  2    27 		2 name_size fixed bin,
  2    28 		2 name char(0 refer(alphabet_name.name_size));
  2    29 
  2    30 /* end include file ... cobol_TYPE40.incl.pl1 */
  2    31 
     3725 
  3     1 
  3     2 /* BEGIN INCLUDE FILE ... cobol_ext_.incl.pl1 */
  3     3 /* Last modified on 06/17/76 by ORN */
  3     4 /* Last modified on 12/28/76 by FCH */
  3     5 /* Last modified on 12/01/80 by FCH */
  3     6 
  3     7 /*    <<<   SHARED EXTERNALS INCLUDE FILE   >>>    */
  3     8 
  3     9 
  3    10 dcl     cobol_ext_$cobol_afp ptr ext;
  3    11 dcl     cobol_afp ptr defined (  cobol_ext_$cobol_afp);
  3    12 dcl     cobol_ext_$cobol_analin_fileno ptr ext;
  3    13 dcl     cobol_analin_fileno ptr defined (  cobol_ext_$cobol_analin_fileno);
  3    14 dcl     cobol_ext_$report_first_token ptr ext;
  3    15 dcl     report_first_token ptr defined( cobol_ext_$report_first_token);
  3    16 dcl     cobol_ext_$report_last_token ptr ext;
  3    17 dcl     report_last_token ptr defined ( cobol_ext_$report_last_token);
  3    18 dcl     cobol_ext_$cobol_eltp ptr ext;
  3    19 dcl     cobol_eltp ptr defined (  cobol_ext_$cobol_eltp);
  3    20 dcl     cobol_ext_$cobol_cmfp ptr ext;
  3    21 dcl     cobol_cmfp ptr defined (  cobol_ext_$cobol_cmfp);
  3    22 dcl     cobol_ext_$cobol_com_fileno ptr ext;
  3    23 dcl     cobol_com_fileno ptr defined (  cobol_ext_$cobol_com_fileno);
  3    24 dcl     cobol_ext_$cobol_com_ptr ptr ext;
  3    25 dcl     cobol_com_ptr ptr defined (  cobol_ext_$cobol_com_ptr);
  3    26 dcl     cobol_ext_$cobol_dfp ptr ext;
  3    27 dcl     cobol_dfp ptr defined (  cobol_ext_$cobol_dfp);
  3    28 dcl     cobol_ext_$cobol_hfp ptr ext;
  3    29 dcl     cobol_hfp ptr defined (  cobol_ext_$cobol_hfp);
  3    30 dcl     cobol_ext_$cobol_m1fp ptr ext;
  3    31 dcl     cobol_m1fp ptr defined (  cobol_ext_$cobol_m1fp);
  3    32 dcl     cobol_ext_$cobol_m2fp ptr ext;
  3    33 dcl     cobol_m2fp ptr defined (  cobol_ext_$cobol_m2fp);
  3    34 dcl     cobol_ext_$cobol_min1_fileno ptr ext;
  3    35 dcl     cobol_min1_fileno ptr defined (  cobol_ext_$cobol_min1_fileno);
  3    36 dcl     cobol_ext_$cobol_min2_fileno_ptr ptr ext;
  3    37 dcl     cobol_min2_fileno_ptr ptr defined (  cobol_ext_$cobol_min2_fileno_ptr);
  3    38 dcl     cobol_ext_$cobol_name_fileno ptr ext;
  3    39 dcl     cobol_name_fileno ptr defined (  cobol_ext_$cobol_name_fileno);
  3    40 dcl     cobol_ext_$cobol_name_fileno_ptr ptr ext;
  3    41 dcl     cobol_name_fileno_ptr ptr defined (  cobol_ext_$cobol_name_fileno_ptr);
  3    42 dcl     cobol_ext_$cobol_ntfp ptr ext;
  3    43 dcl     cobol_ntfp ptr defined (  cobol_ext_$cobol_ntfp);
  3    44 dcl     cobol_ext_$cobol_pdofp ptr ext;
  3    45 dcl     cobol_pdofp ptr defined (  cobol_ext_$cobol_pdofp);
  3    46 dcl     cobol_ext_$cobol_pfp ptr ext;
  3    47 dcl     cobol_pfp ptr defined (  cobol_ext_$cobol_pfp);
  3    48 dcl     cobol_ext_$cobol_rm2fp ptr ext;
  3    49 dcl     cobol_rm2fp ptr defined (  cobol_ext_$cobol_rm2fp);
  3    50 dcl     cobol_ext_$cobol_rmin2fp ptr ext;
  3    51 dcl     cobol_rmin2fp ptr defined (  cobol_ext_$cobol_rmin2fp);
  3    52 dcl     cobol_ext_$cobol_curr_in ptr ext;
  3    53 dcl     cobol_curr_in ptr defined (  cobol_ext_$cobol_curr_in);
  3    54 dcl     cobol_ext_$cobol_curr_out ptr ext;
  3    55 dcl     cobol_curr_out ptr defined (  cobol_ext_$cobol_curr_out);
  3    56 dcl     cobol_ext_$cobol_sfp ptr ext;
  3    57 dcl     cobol_sfp ptr defined (  cobol_ext_$cobol_sfp);
  3    58 dcl     cobol_ext_$cobol_w1p ptr ext;
  3    59 dcl     cobol_w1p ptr defined (  cobol_ext_$cobol_w1p);
  3    60 dcl     cobol_ext_$cobol_w2p ptr ext;
  3    61 dcl     cobol_w2p ptr defined (  cobol_ext_$cobol_w2p);
  3    62 dcl     cobol_ext_$cobol_w3p ptr ext;
  3    63 dcl     cobol_w3p ptr defined (  cobol_ext_$cobol_w3p);
  3    64 dcl     cobol_ext_$cobol_w5p ptr ext;
  3    65 dcl     cobol_w5p ptr defined (  cobol_ext_$cobol_w5p);
  3    66 dcl     cobol_ext_$cobol_w6p ptr ext;
  3    67 dcl     cobol_w6p ptr defined (  cobol_ext_$cobol_w6p);
  3    68 dcl     cobol_ext_$cobol_w7p ptr ext;
  3    69 dcl     cobol_w7p ptr defined (  cobol_ext_$cobol_w7p);
  3    70 dcl     cobol_ext_$cobol_x3fp ptr ext;
  3    71 dcl     cobol_x3fp ptr defined (  cobol_ext_$cobol_x3fp);
  3    72 dcl	cobol_ext_$cobol_rwdd ptr ext;
  3    73 dcl	cobol_rwdd ptr defined(cobol_ext_$cobol_rwdd);
  3    74 dcl	cobol_ext_$cobol_rwpd ptr ext;
  3    75 dcl	cobol_rwpd ptr defined(cobol_ext_$cobol_rwpd);
  3    76 
  3    77 
  3    78 dcl     cobol_ext_$cobol_fileno1 fixed bin(24)ext;
  3    79 dcl     cobol_fileno1 fixed bin(24)defined (  cobol_ext_$cobol_fileno1);				
  3    80 dcl     cobol_ext_$cobol_options_len fixed bin(24)ext;
  3    81 dcl     cobol_options_len fixed bin(24)defined (  cobol_ext_$cobol_options_len);
  3    82 dcl     cobol_ext_$cobol_pdout_fileno fixed bin(24)ext;
  3    83 dcl     cobol_pdout_fileno fixed bin(24)defined (  cobol_ext_$cobol_pdout_fileno);			
  3    84 dcl     cobol_ext_$cobol_print_fileno fixed bin(24)ext;
  3    85 dcl     cobol_print_fileno fixed bin(24)defined (  cobol_ext_$cobol_print_fileno);			
  3    86 dcl     cobol_ext_$cobol_rmin2_fileno fixed bin(24)ext;
  3    87 dcl     cobol_rmin2_fileno fixed bin(24)defined (  cobol_ext_$cobol_rmin2_fileno);
  3    88 dcl     cobol_ext_$cobol_x1_fileno fixed bin(24)ext;
  3    89 dcl     cobol_x1_fileno fixed bin(24)defined (  cobol_ext_$cobol_x1_fileno);				
  3    90 dcl     cobol_ext_$cobol_x2_fileno fixed bin(24)ext;
  3    91 dcl     cobol_x2_fileno fixed bin(24)defined (  cobol_ext_$cobol_x2_fileno);
  3    92 dcl     cobol_ext_$cobol_x3_fileno fixed bin(24)ext;
  3    93 dcl     cobol_x3_fileno fixed bin(24)defined (  cobol_ext_$cobol_x3_fileno);
  3    94 
  3    95 dcl     cobol_ext_$cobol_lpr char (5) ext;
  3    96 dcl     cobol_lpr char (5) defined (  cobol_ext_$cobol_lpr);				/* -2- */
  3    97 dcl     cobol_ext_$cobol_options char (120) ext;
  3    98 dcl     cobol_options char (120) defined (  cobol_ext_$cobol_options);          			/* -30- */
  3    99 
  3   100 dcl     cobol_ext_$cobol_xlast8 bit (1) ext;
  3   101 dcl     cobol_xlast8 bit (1) defined (  cobol_ext_$cobol_xlast8);				/* -1- */
  3   102 dcl     cobol_ext_$report_exists bit (1) ext;
  3   103 dcl     report_exists bit (1) defined (  cobol_ext_$report_exists);
  3   104 
  3   105 
  3   106 /*    <<<   END OF SHARED EXTERNALS INCLUDE FILE   >>>    */
  3   107 /* END INCLUDE FILE ... cobol_ext_.incl.pl1 */
  3   108 
     3726 
     3727 
  4     1 
  4     2 /* BEGIN INCLUDE FILE ... cobol_ext_ddsyn.incl.pl1 */
  4     3 /* Last modified on 06/18/76 by ORN */
  4     4 
  4     5 /**********>UDD>L2COBOL>INCLUDE>A_COBOL_EXT_DDSYN INCLUDE FILE**********/
  4     6 dcl     cobol_ext_ddsyn$cobol_sv_ptr ptr ext;
  4     7 dcl     cobol_sv_ptr ptr defined (  cobol_ext_ddsyn$cobol_sv_ptr);	/*to shared_variables*/
  4     8 dcl 1     cobol_ext_ddsyn$cobol_wkbuf1_tbl ext like   cobol_wkbuf1_tbl;
  4     9 dcl 1     cobol_wkbuf1_tbl defined (  cobol_ext_ddsyn$cobol_wkbuf1_tbl),	/* -250- */
  4    10 	2 wkbuf1 char(1000);
  4    11 dcl 1     cobol_ext_ddsyn$cobol_wkbuf2_tbl ext like   cobol_wkbuf2_tbl;
  4    12 dcl 1     cobol_wkbuf2_tbl defined (  cobol_ext_ddsyn$cobol_wkbuf2_tbl),	/* -125- */
  4    13 	2 wkbuf2 char(500);
  4    14 dcl 1     cobol_ext_ddsyn$cobol_htbl (49) ext like   cobol_htbl;
  4    15 dcl 1     cobol_htbl (49) defined (  cobol_ext_ddsyn$cobol_htbl),	/* -343- */	/*hierarchy table*/
  4    16 	2 level fixed bin,	/*level*/
  4    17 	2 item_length fixed bin,	/*byte length*/
  4    18 	2 occno fixed bin,	/*number of occurrences per OCCURS clause*/
  4    19 	2 nt_rec char(5),	/*write ads in NT*/
  4    20 	2 do_rec char(5),	/*write ads in COM for object of length or occurs DEPENDING*/
  4    21 	2 minivector bit(18),	/*store vector bits not in type9token for inheritance*/
  4    22 	2 nt_rec_valid bit(1),	/*set if nt_rec has been set*/
  4    23 	2 do_rec_valid bit(1),	/*set if do_rec has been set*/
  4    24 	2 occurs_clause bit(1),	/*set for item has OCCURS*/
  4    25 	2 odo_switch bit(1),	/*set for item has occurs depending clause*/
  4    26 	2 occurs_ext bit(1),	/*set for item has occurs extension*/
  4    27 	2 switch_88 bit(1),	/*set for item has associated level 88 items*/
  4    28 	2 exp_redefining bit(1);	/*set for subject of REDEFINES*/
  4    29 /*
  4    30*		3 of_no_interest1 bit(4),
  4    31*		3 value_clause bit(1),
  4    32*		3 of_no_interest2 bit(4),
  4    33*		3 inherit_value bit(1),
  4    34*		3 code_set bit(1),
  4    35*		3 assoc_with_pic_s bit(1),
  4    36*		3 unused  bit(6);
  4    37**/
  4    38 /* END INCLUDE FILE ... cobol_ext_ddsyn.incl.pl1 */
  4    39 
     3728 
  5     1 
  5     2 /* BEGIN INCLUDE FILE ...   cobol_special_dcls.incl.pl1 */
  5     3 /*	last modified on 11/20/74			*/
  5     4 dcl bits_per_char fixed bin static internal init  (9);
  5     5 dcl bits_per_word fixed bin static internal init  (36);  
  5     6 dcl one_word_in_bits bit  (36) static internal;
  5     7 dcl chtbl (343) fixed bin(24) based(ptr4);
  5     8 dcl cma (14) fixed bin(24) based(ptr4);
  5     9 dcl cntbuf (250) fixed bin(24) based(ptr4);
  5    10 dcl cntbuf2 (125) fixed bin(24) based(ptr4);
  5    11 dcl chtbl_item (7) fixed bin(24) based; 
  5    12 /* END INCLUDE FILE ...   cobol_special_dcls.incl.pl1 */
  5    13 
     3729 
  6     1 
  6     2 /* BEGIN INCLUDE FILE ...   cobol_spec_constants.incl.pl1 */
  6     3 /*	last modified on 11/20/74			*/
  6     4 dcl msg_constant fixed bin static internal init  (32);
  6     5 dcl pd_db_constant fixed bin static internal init  (8);
  6     6 dcl dn_constant fixed bin static internal init  (112);
  6     7 dcl niv_constant fixed bin static internal init  (20);
  6     8 dcl aiv_constant fixed bin static internal init  (8);
  6     9 dcl ed_constant fixed bin static internal init  (20);
  6    10 dcl occ_constant fixed bin static internal init  (12);
  6    11 dcl occ_dim_constant fixed bin static internal init  (24);
  6    12 dcl in_constant fixed bin static internal init  (80);
  6    13 dcl cn_constant fixed bin static internal init  (52);
  6    14 dcl fd_constant fixed bin static internal init  (48);
  6    15 dcl cd_constant fixed bin static internal init  (64);
  6    16 dcl linage_rec_constant fixed bin static internal init  (64);
  6    17 dcl linage_name_rec_constant fixed bin static internal init  (32);
  6    18 dcl qual_rec_constant fixed bin static internal init  (20);
  6    19 dcl occ_key_constant fixed bin static internal init  (36);
  6    20 dcl report_rec_constant fixed bin static internal  init  (28);
  6    21 dcl obj_rec_constant fixed bin static internal init  (24);
  6    22 dcl rename_rec_constant fixed bin static internal init  (48);
  6    23 dcl odo_rec_constant fixed bin static internal init  (32);
  6    24 dcl skey_rec_constant fixed bin static internal init  (44);
  6    25 dcl fkey_constant fixed bin static internal init  (84);
  6    26 /* END INCLUDE FILE ...   cobol_spec_constants.incl.pl! */
  6    27 
     3730 
     3731 dcl	sv_ptr_auto	ptr;
     3732 dcl	1 shared_var	based (sv_ptr_auto),
  7     1 
  7     2 /* BEGIN INCLUDE FILE ...   cobol_shared_var.incl.pl1 */
  7     3 	2 min_ptr ptr,
  7     4 	2 ft_ptr ptr,
  7     5 	2 skey_ptr ptr,
  7     6 	2 linage_ptr ptr,
  7     7 	2 fkey_ptr ptr,
  7     8 	2 rnt_ptr ptr,
  7     9 	2 modnt_ptr ptr,
  7    10 	2 ptr1 ptr,
  7    11 	2 save_ptr ptr,
  7    12 	2 save_ptr1 ptr,	/*used only for cond value thru clause*/
  7    13 	2 ptr3 ptr,
  7    14 	2 ptr2 ptr,
  7    15 	2 dn_ptr ptr,	/*to type9 token, usually in wkbuf1*/
  7    16 	2 w2_ptr ptr,	/*to various tokens and records in wkbuf2*/
  7    17 	2 cdtoken_ptr ptr,	/* ptr to cd token */
  7    18 	2 save_w2 ptr,
  7    19 	2 com2_ptr ptr,
  7    20 	2 cm_ptr  ptr,
  7    21 	2 ptr5 ptr,
  7    22 	2 ptr4 ptr,
  7    23 	2 ptr_to_char_tbl ptr,
  7    24 	2 fd_clauses_ptr ptr,
  7    25 	2 nt_fno fixed bin(24),
  7    26 	2 temp_bin1 fixed bin(24),
  7    27 	2 temp_bin2 fixed bin(24),
  7    28 	2 offset_ct fixed bin(24),
  7    29 	2 save_offsets(49) fixed bin(24),
  7    30 	2 bnw fixed bin,	/*indicates wkbuf1 contains unwritten type9*/
  7    31 	2 nl fixed bin,
  7    32 	2 al fixed bin,
  7    33 	2 nsa_index fixed bin,
  7    34 	2 nsa_index_last_fd fixed bin,
  7    35 	2 nsa_work_index fixed bin,
  7    36 	2 name_string_index fixed bin,
  7    37 	2 ul fixed bin,
  7    38 	2 rnt_size fixed bin,
  7    39 	2 min_size_r fixed bin,
  7    40 	2 niv fixed bin,
  7    41 	2 aiv fixed bin,
  7    42 	2 odim fixed bin,
  7    43 	2 index_ct fixed bin,
  7    44 	2 sn fixed bin,
  7    45 	2 h fixed bin,
  7    46 	2 fh fixed bin,
  7    47 	2 hh fixed bin,
  7    48 	2 keycount fixed bin,
  7    49 	2 save_h fixed bin,
  7    50 	2 save_block_desc fixed bin,
  7    51 	2 save_block_min fixed bin,
  7    52 	2 save_block_max fixed bin,
  7    53 	2 save_record_min fixed bin,
  7    54 	2 save_record_max fixed bin,
  7    55 	2 save_line fixed bin,
  7    56 	2 save_line_for66 fixed bin,
  7    57 	2 save_occno fixed bin,
  7    58 	2 dnl fixed bin ,
  7    59 	2 nt_size fixed bin,
  7    60 	2 cm_size fixed bin,
  7    61 	2 rdf_size  fixed bin ,
  7    62 	2 counter1 fixed bin ,
  7    63 	2 counter2 fixed bin ,
  7    64 	2 file_number fixed bin ,
  7    65 	2 cd_index fixed bin,
  7    66 	2 cdno fixed bin,
  7    67 	2 save_cdo fixed bin,
  7    68 	2 rnm_obj12 fixed bin,
  7    69 	2 ixix fixed bin,
  7    70 	2 no_of_88s fixed bin,	/*consecutive type11 tokens beginning at save_wkey*/
  7    71 	2 ix_ino (50) fixed bin,
  7    72 	2 asc_des fixed bin,
  7    73 	2 next_level fixed bin,
  7    74 	2 save_level fixed bin,
  7    75 	2 rdf_level fixed bin,
  7    76 	2 save_column fixed bin,
  7    77 	2 cd_size(12) fixed bin,
  7    78 	2 nsa_name_index (256) fixed bin,
  7    79 	2 nsa_name_length (256) fixed bin,
  7    80 	2 name_string char(300),
  7    81 	2  transltble(256) char(1),
  7    82 	2 one_char_of_zero_bits char(1),
  7    83 	2 cd_name(12) char(32),
  7    84 	2 save_dname char(30),
  7    85 
  7    86 	2 ch_str char(128) varying,
  7    87 	2 rdf_tbl (49) char(30) varying,
  7    88 	2 stopper char(1),
  7    89 	2 cm_key char(5),
  7    90 	2 rnt_key char(5),
  7    91 	2 mod_key char(5),
  7    92 	2 w_key char(5),
  7    93 	2 rcm_key char(5),
  7    94 	2 save_fd char(5),
  7    95 	2 save_wkey char(5),
  7    96 	2 save_77 char(5),
  7    97 	2 save_01 char(5),
  7    98 	2 save_11 char(5),
  7    99 	2 rdf_01_sav char(5) ,
  7   100 	2 save_01_for66 char(5),
  7   101 	2 prior_odo_rec char(5),
  7   102 	2 prior_obj_rec char(5),
  7   103 	2 prior_report_rec char(5),
  7   104 	2 prior_qual_rec char(5),
  7   105 	2 prior_occ_key char(5),
  7   106 	2 prior_linage_name_rec char(5),
  7   107 	2 prior_skey_rec char(5),
  7   108 	2 prior_rename_rec char(5),
  7   109 	2 prior_fkey_rec char(5),
  7   110 	2 ix_key (50) char(5),
  7   111 	2 fd_clauses bit(36),	/*must be byte aligned*/
  7   112 	2 cd_clauses bit(12),
  7   113 	2 mask1x bit(32),	/*ba*/
  7   114 	2 mask2x bit(32),	/*ba*/
  7   115 	2 mask3x bit(32),	/*ba*/
  7   116 	2 inftble (32) bit(8),	/*ba*/
  7   117 	2 prectble  (32) bit(32),	/*ba*/
  7   118 	2 E_tbl bit(64),	/*ba*/
  7   119 	2 vector_part bit(128),	/*ba*/
  7   120 	2 nsa_lbl_rec (256) bit(1),	/*ba*/
  7   121 	2 nsa_cancelled (256) bit(1),
  7   122 	2 ll01 bit(1),
  7   123 	2 ll77 bit(1),
  7   124 	2 cd_initial bit(1),
  7   125 	2 min_eof bit(1),
  7   126 	2 csline bit(40),	/*ba*/
  7   127 	2 section_ind bit(8),	/*ba*/
  7   128 	2 sync_rdf bit(1),
  7   129 	2 sign_type_temp bit(3),
  7   130 	2 save_switch_88 bit(1),
  7   131 	2 pre_end_sw bit(1),
  7   132 	2 comp_end_sw bit(1),
  7   133 	2 qual_sw bit(1),
  7   134 	2 file_key_area(128) fixed bin(35),
  7   135 	2 prev_qual_key char(5),
  7   136 	2 common_key char(5),
  7   137 	2 com_status bit(32),
  7   138 	2 file_key_size fixed bin,
  7   139 	2 key_qual_size fixed bin,
  7   140 	2 label_field_num fixed bin,
  7   141 	2 tf fixed bin,
  7   142 	2 all_ind fixed bin,
  7   143 	2 file_ptr ptr,
  7   144 	2 work_ptr ptr,
  7   145 	2 qual_ptr ptr,
  7   146 	2 save_lev_line fixed bin,
  7   147  	2 save_lev_col fixed bin;
  7   148 /* END INCLUDE FILE ...   cobol_shared_var.incl.pl1 */
  7   149 
     3733 
     3734 
     3735 /*[4.4-1]*/
     3736 declare	data_name_bits	bit (5000) based;
     3737 
     3738 /*[4.4-1]*/
     3739 declare	hash_table	(512) ptr;
     3740 
     3741 /*[4.4-1]*/
     3742 declare	ref_table		(50) ptr;
     3743 
     3744 /*[4.4-1]*/
     3745 declare	1 ref		(50),			/*[4.4-1]*/
     3746 	  2 size		fixed bin,		/*[4.4-1]*/
     3747 	  2 line		fixed bin,		/*[4.4-1]*/
     3748 	  2 column	fixed bin,		/*[4.4-1]*/
     3749 	  2 type		fixed bin,		/*[4.4-1]*/
     3750 	  2 info_bit	bit (8),			/*[4.4-1]*/
     3751 	  2 length	fixed bin,		/*[4.4-1]*/
     3752 	  2 name		char (30);
     3753 
     3754 /*[4.4-1]*/
     3755 declare	1 diag_token,				/*[4.4-1]*/
     3756 	  2 size		fixed bin,		/*[4.4-1]*/
     3757 	  2 line		fixed bin,		/*[4.4-1]*/
     3758 	  2 column	fixed bin,		/*[4.4-1]*/
     3759 	  2 type		fixed bin,		/*[4.4-1]*/
     3760 	  2 run		fixed bin,		/*[4.4-1]*/
     3761 	  2 num		fixed bin,		/*[4.4-1]*/
     3762 	  2 info		bit (36);
     3763 
     3764 /*[4.4-1]*/
     3765 declare	(hash_table_ptr, ref_table_ptr, diag_ptr)
     3766 			ptr;			/*[4.4-1]*/
     3767 declare	(like_key, rec_key, first_key)
     3768 			char (5);
     3769 
     3770 /*[4.4-1]*/
     3771 declare	(prev_rec_ptr, rec_ptr, last_rec_ptr)
     3772 			ptr;			/*[4.4-1]*/
     3773 declare	rec_size		fixed bin;		/*[4.4-1]*/
     3774 declare	(was_found, not_found, like_clause, first_rec)
     3775 			bit (1);			/*[4.4-1]*/
     3776 declare	rename_object_ptr	ptr;			/*[4.4-1]*/
     3777 declare	rename_object_size	fixed bin;		/*[4.4-1]*/
     3778 declare	(diag_no, ref_table_size)
     3779 			fixed bin (15);
     3780 
     3781 /*[4.4-1]*/
     3782 declare	cobol_usrwd	entry (ptr, fixed bin (15), ptr, fixed bin (15), ptr, bit (1), bit (1), bit (1),
     3783 			fixed bin (15), ptr);
     3784 
     3785 /*[4.4-1]*/
     3786 declare	status		bit (32);
     3787 
     3788 dcl	bit32_1		bit (32);			/*work field for USAGE analysis*/
     3789 dcl	bit32_2		bit (32);			/*ditto*/
     3790 dcl	usage_bits_mask	bit (32) init ("00000110000000000001111111100000"b) internal static;
     3791 						/*masks out non-USAGE bits from a P7-byte-aligned substring of description bits vector*/
     3792 dcl	non_display_bits_mask
     3793 			bit (32) init ("00000110000000000000111111100000"b) internal static;
     3794 						/*usage anything but display*/
     3795 dcl	pic_suff_bits_mask	bit (32) init ("00000110000000000000000011100000"b) internal static;
     3796 						/*masks out all but picture-sufficient usage bits*/
     3797 dcl	numeric_usage_bits_mask
     3798 			bit (32) internal static init ("00000110000000000000011111000000"b);
     3799 						/*masks out all but numeric usage bits*/
     3800 dcl	based_char_string	char (11) based;		/*overlays vectemp bit structure*/
     3801 dcl	alph		char (1);			/*work field for consistency analysis*/
     3802 dcl	log_mask		(8) bit (8) internal static
     3803 			init ("10000000"b, "01000000"b, "00100000"b, "00010000"b, "00001000"b, "00000100"b,
     3804 			"00000010"b, "00000001"b);
     3805 dcl	1 matrix1		internal static,
     3806 	  2 m1		(88) bit (64)
     3807 			init ("0111111000000000000000000000000000000000000000000000000000000000"b,
     3808 			"0011110000000000000000000000000000000000000000000000000000000000"b,
     3809 			"0001110000010000000000000000000000100000000000000000000000000000"b,
     3810 			"0000110000000000000000000000000000000000000000000000000000000000"b,
     3811 			"0000010000000000000000000000000000000000000000000000000000000000"b,
     3812 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3813 			"0000000110100000000000000000000000000000000000000000000000000000"b,
     3814 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3815 			"0000000001000000000000000000000000011111000000100000000000000000"b,
     3816 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3817 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3818 			"0000000000000000000000000000000000000000100000000000000000000000"b,
     3819 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3820 			"0000000000000010000000000011111111111001000000010000000000000000"b,
     3821 			"0000000000000000000000000011111111111001000000010000000000000000"b,
     3822 			"0000000000000000001010101000011011111001000000000000000000000000"b,
     3823 			"0000000000000000001010101000011011111001000000000000000000000000"b,
     3824 			"0000000000000000001111100000000000000000000000010000000000000000"b,
     3825 			"0000000000000000000111100000111111000000000000100000000000000000"b,
     3826 			"0000000000000000000011111000111111000001000000100000000000000000"b,
     3827 			"0000000000000000000001100000111111000001000000100000000000000000"b,
     3828 			"0000000000000000000000111000111111000001000000100000000000000000"b,
     3829 			"0000000000000000000000011000111111011001000000100000000000000000"b,
     3830 			"0000000000000000000000000000000000011000000000000000000000000000"b,
     3831 			"0000000000000000000000000000000000011001000000100000000000000000"b,
     3832 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3833 			"0000000000000000000000000000000011000000000000000000000000000000"b,
     3834 			"0000000000000000000000000000111111100000000000000000000000000000"b,
     3835 			"0000000000000000000000000000011111100000000000000000000000000000"b,
     3836 			"0000000000000000000000000000001111111001000000010000000000000000"b,
     3837 			"0000000000000000000000000000000111111001000000010000000000000000"b,
     3838 			"0000000000000000000000000000000011111001000000010000000000000000"b,
     3839 			"0000000000000000000000000000000001111001000000010000000000000000"b,
     3840 			"0000000000000000000000000000000000111001000000010000000000000000"b,
     3841 			"0000000000000000000000000000000000011111000000000000000000000000"b,
     3842 			"0000000000000000000000000000000000001001000000100000000000000000"b,
     3843 			"0000000000000000000000000000000000000001100000100000000000000000"b,
     3844 			"0000000000000000000000000000000000000010000000000000000000000000"b,
     3845 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3846 			"0000000000000000000000000000000000000000100000100000000000000000"b,
     3847 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3848 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3849 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3850 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3851 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3852 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3853 			"0000000000000000000000000000000000000000000000010000000000000000"b,
     3854 			"0000000000000000000000000000000000000000000000001000000000000000"b,
     3855 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3856 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3857 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3858 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3859 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3860 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3861 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3862 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3863 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3864 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3865 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3866 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3867 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3868 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3869 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3870 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3871 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3872 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3873 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3874 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3875 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3876 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3877 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3878 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3879 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3880 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3881 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3882 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3883 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3884 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3885 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3886 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3887 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3888 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3889 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3890 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3891 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3892 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3893 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3894 			"0000000000000000000000000000000000000000000000000000000000000000"b);
     3895 dcl	1 matrix2		internal static,
     3896 	  2 m2		(88) bit (64)
     3897 			init ("0000000000001000000000000000000000000000000000000000000000000000"b,
     3898 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3899 			"0000000000000001000000000000000000000000000000000000000000000000"b,
     3900 			"0000000000001000000000000000000000000000000000000000000000000000"b,
     3901 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3902 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3903 			"0100000000000010000000000000000000000000000000000000000000000000"b,
     3904 			"0100000000000000000000000000000000000000000000000000000000000000"b,
     3905 			"0000000001000000000000000000000000000000000000000000000000000000"b,
     3906 			"0000000000000010000000000000000000000000000000000000000000000000"b,
     3907 			"0000000000000010000000000000000000000000000000000000000000000000"b,
     3908 			"0000000000001000000000000000000000000000000000000000000000000000"b,
     3909 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3910 			"0000000001000000000000000000000000000000000000000000000000000000"b,
     3911 			"0000000001000000000000000000000000000000000000000000000000000000"b,
     3912 			"0000000000001000000000000000000000000000000000000000000000000000"b,
     3913 			"0000000000001000000000000000000000000000000000000000000000000000"b,
     3914 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3915 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3916 			"0000000000100000000000000000000000000000000000000000000000000000"b,
     3917 			"0000000000100000000000000000000000000000000000000000000000000000"b,
     3918 			"0000000000100000000000000000000000000000000000000000000000000000"b,
     3919 			"0000000000100000000000000000000000000000000000000000000000000000"b,
     3920 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3921 			"0000000000100000000000000000000000000000000000000000000000000000"b,
     3922 			"0000000010000000000000000000000000000000000000000000000000000000"b,
     3923 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3924 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3925 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3926 			"0000000000000010000000000000000000000000000000000000000000000000"b,
     3927 			"0000000000000010000000000000000000000000000000000000000000000000"b,
     3928 			"0000000000000010000000000000000000000000000000000000000000000000"b,
     3929 			"0000000001000000000000000000000000000000000000000000000000000000"b,
     3930 			"0000000001000000000000000000000000000000000000000000000000000000"b,
     3931 			"0000000001101000000000000000000000000000000000000000000000000000"b,
     3932 			"0000000000100000000000000000000000000000000000000000000000000000"b,
     3933 			"0000000000100000000000000000000000000000000000000000000000000000"b,
     3934 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3935 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3936 			"0000000000100000000000000000000000000000000000000000000000000000"b,
     3937 			"0100000000001000000000000000000000000000000000000000000000000000"b,
     3938 			"0000000000001000000000000000000000000000000000000000000000000000"b,
     3939 			"0000000000001000000000000000000000000000000000000000000000000000"b,
     3940 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3941 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3942 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3943 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3944 			"0000000000100000000000000000000000000000000000000000000000000000"b,
     3945 			"0000000010000000000000000000000000000000000000000000000000000000"b,
     3946 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3947 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3948 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3949 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3950 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3951 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3952 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3953 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3954 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3955 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3956 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3957 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3958 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3959 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3960 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3961 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3962 			"0000000000001000000000000000000000000000000000000000000000000000"b,
     3963 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3964 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3965 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3966 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3967 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3968 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3969 			"0000000000100000000000000000000000000000000000000000000000000000"b,
     3970 			"0000000000000010000000000000000000000000000000000000000000000000"b,
     3971 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3972 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3973 			"0000000000000001000000000000000000000000000000000000000000000000"b,
     3974 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3975 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3976 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3977 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3978 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3979 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3980 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3981 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3982 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3983 			"0000000000000000000000000000000000000000000000000000000000000000"b,
     3984 			"0000000000000000000000000000000000000000000000000000000000000000"b);
     3985 dcl	1 mi_overlay	based (ptr4),
     3986 	  2 mi_overlay_bit9 bit (9),
     3987 	  2 mi_overlay_part bit (128);
     3988 
     3989 declare	(addr, divide, fixed, mod, null, substr, unspec, size)
     3990 			builtin;
     3991 
  8     1 
  8     2 /* BEGIN INCLUDE FILE ...   cobol_non_static.incl.pl1 */
  8     3 
  8     4 dcl i fixed bin;
  8     5 dcl j fixed bin;
  8     6 dcl k fixed bin;
  8     7 dcl l fixed bin;
  8     8 dcl message_area char(56);	/*for building type5 tokens as diagnostics*/
  8     9 dcl message_ptr ptr;
  8    10 dcl 1 record based (min_ptr),
  8    11     /*header*/
  8    12     2 size fixed bin,
  8    13     2 line fixed bin,
  8    14     2 column fixed,
  8    15     2 type fixed,
  8    16     2 filler1 fixed,
  8    17     2 filler2 fixed bin,
  8    18     2 info,
  8    19      3 para bit(1),
  8    20      3 rep bit(1),
  8    21      3 filler3 bit(6),
  8    22    2 body char(0 refer(record.size));
  8    23 dcl 1 rw based (min_ptr),
  8    24     /* header */
  8    25     2 size fixed bin,
  8    26     2 line fixed bin,
  8    27     2 column fixed bin,
  8    28     2 type fixed,   /* =1 */
  8    29     /* body */
  8    30     2 key fixed bin,
  8    31     2 class,
  8    32       3 filler4 bit(2),
  8    33       3 fig_con bit(1),
  8    34       3 terminator bit(1),
  8    35       3 end_dec bit(1),
  8    36       3 filler5 bit(3),
  8    37       3 section_header bit(1),
  8    38       3 fs_ind bit(1),
  8    39       3 fd_clause bit(1),
  8    40       3 dd_clause bit(1),
  8    41       3 cd_input bit(1),
  8    42       3 cd_output bit(1),
  8    43       3 cset_name bit(1),
  8    44       3 filler6 bit(11),
  8    45     2 jump_index fixed;
  8    46 dcl 1 numeric_lit based(min_ptr),
  8    47    /* header */
  8    48     2 size fixed bin,
  8    49     2 line fixed bin,
  8    50     2 column fixed bin,
  8    51     2 type fixed,    /* =2 */
  8    52   /* body */
  8    53     2 info,
  8    54       3 integer bit(1),
  8    55       3 floating bit(1),
  8    56       3 filler bit(6),
  8    57     2 sign char(1),
  8    58     2 exp_sign char(1),
  8    59     2 exp_places fixed,
  8    60     2 ltdp fixed,
  8    61     2 rtdp fixed,
  8    62     2 length fixed bin,
  8    63     2 literal char(nl);
  8    64 dcl 1 alphanum_lit based(min_ptr),
  8    65    /* header */
  8    66     2 size fixed bin,
  8    67     2 line fixed bin,
  8    68     2 column fixed,
  8    69     2 type fixed,    /* =3 */
  8    70    /*body */
  8    71     2 info,
  8    72       3 bit_string bit(1),
  8    73      3 filler8 bit(7),
  8    74     2 length fixed bin,
  8    75     2 string char(al);
  8    76 dcl 1 picture based(min_ptr),
  8    77     /* header */
  8    78     2 size fixed bin,
  8    79     2 line fixed bin,
  8    80     2 column fixed,
  8    81     2 type fixed,    /* =4 */
  8    82     /* body */
  8    83     2 length fixed,
  8    84     2 string char(0 refer(picture.length));
  8    85 dcl 1 message based(message_ptr),
  8    86    /* header */
  8    87     2 size fixed bin,
  8    88     2 line fixed bin,
  8    89     2 column fixed,
  8    90     2 type fixed,    /* =5 */
  8    91     /* body */
  8    92      2 run3 fixed,
  8    93     2 number fixed bin,
  8    94      2 info,
  8    95        3 para bit(1),
  8    96      3 rep bit(1),
  8    97        3 fillerx bit(34),
  8    98      2 length fixed bin,
  8    99      2 image char(0 refer(message.length));
  8   100 
  8   101 dcl 1 user_word based (min_ptr),
  8   102     /* header */
  8   103     2 size fixed bin,
  8   104     2 line fixed bin,
  8   105     2 column fixed bin,
  8   106     2 type fixed,    /* =8 */
  8   107     /* body */
  8   108     2 info bit(8),
  8   109    2 word_size fixed bin,
  8   110 	2 word char(0 refer(user_word.word_size));
  8   111 dcl fdn char(1000) based(dn_ptr);
  8   112 dcl pdn_occ_ptr ptr;
  8   113 dcl 1 numinit based (ptr1),
  8   114     2 initype,
  8   115       3 numeric bit(1),
  8   116       3 non_numeric bit(1),
  8   117       3 fig_con bit(1),
  8   118       3 all_lit bit(1),
  8   119       3 single bit(1),
  8   120       3 thru1 bit(1),
  8   121       3 thru2 bit(1),
  8   122       3 filler12 bit(1),
  8   123     2 info,
  8   124       3 integer bit(1),
  8   125       3 floating bit(1),
  8   126       3 filler bit(6),
  8   127     2 sign char(1),
  8   128     2 expsign char(1),
  8   129     2 explaces fixed,
  8   130     2 ltdp fixed,
  8   131     2 rtdp fixed,
  8   132     2 length fixed,
  8   133     2 literal char(0 refer(numinit.length));
  8   134 dcl 1 alphainit based(ptr1),
  8   135     2 initype,
  8   136       3 numeric bit(1),
  8   137       3 non_numeric bit(1),
  8   138       3 fig_con bit(1),
  8   139       3 all_lit bit(1),
  8   140       3 single bit(1),
  8   141       3 thru1 bit(1),
  8   142       3 thru2 bit(1),
  8   143       3 filler14 bit(1),
  8   144     2 info,
  8   145       3 bit_string bit(1),
  8   146       3 fig_con_index bit(7),
  8   147     2 length fixed bin,
  8   148     2 string char(0 refer(alphainit.length));
  8   149 dcl 1 editor based (ptr1),
  8   150     2 fixed_insert fixed,
  8   151     2 float_insert fixed,
  8   152     2 start_supress fixed,
  8   153     2 max_supress fixed,
  8   154     2 length fixed bin,
  8   155     2 ecm char(0 refer(editor.length));
  8   156 dcl 1 debug based (ptr1),
  8   157     2 info bit(8),
  8   158     2 prioity char (2),
  8   159     2 proc_num fixed bin;
  8   160 dcl 1 indexname based (w2_ptr),
  8   161     2 size fixed bin,
  8   162     2 line fixed bin,
  8   163     2 column fixed bin,
  8   164     2 type fixed,      /* type = 10 */
  8   165     2 string_ptr ptr,
  8   166     2 prev_rec ptr,
  8   167     2 info bit(8),
  8   168       2 def_line fixed bin,
  8   169     2 level fixed bin,
  8   170     2 seg_num fixed bin,
  8   171     2 offset fixed bin(24),
  8   172     2 index_no fixed bin,
  8   173     2 min fixed bin,
  8   174     2 max fixed bin,
  8   175     2 struc_length fixed bin,
  8   176    2 csdwx fixed bin,
  8   177     2 cswd fixed bin(24),
  8   178     2 name_size fixed,
  8   179     2 name char(31);
  8   180 dcl 1 conditioname based(w2_ptr),
  8   181     2 size fixed bin,
  8   182     2 line fixed bin,
  8   183     2 column fixed bin,
  8   184     2 type fixed,      /* type = 11 */
  8   185     2 string_ptr ptr,
  8   186     2 prev_rec ptr,
  8   187     2 info bit(8),
  8   188     2 def_line fixed bin,
  8   189     2 level fixed bin,
  8   190     2 numlits fixed bin,
  8   191     2 name_size fixed bin,
  8   192     2 name char(31);
  8   193 dcl 1 source based(min_ptr),
  8   194     2 size fixed bin,
  8   195     2 line fixed bin,
  8   196     2 column fixed,
  8   197     2 type fixed,   /* =6 */
  8   198    /* body */
  8   199     2 info fixed,
  8   200     2 length fixed,
  8   201     2 image char(sn);
  8   202 /* fs_ind bit (1,1)     */
  8   203 /* wss_ind bit (2,1)    */
  8   204 /* cns_ind bit(3,1)     */
  8   205 /* ls_ind bit(4,1)     */
  8   206 /* cms_ind bit(5,1)    */
  8   207 /* rws_ind bit (6,1)    */
  8   208 /* pd_ind bit (7,1)    */
  8   209 /* end_ind bit (8,1)    */
  8   210 dcl ffh fixed bin;
  8   211 /* file section data */
  8   212 dcl 1 fd_ind based(fd_clauses_ptr),
  8   213       2 recording_mode bit(1),
  8   214       2 block_contain bit(1),
  8   215       2 record_contain bit(1),
  8   216       2 label_record bit(1),
  8   217       2 data_record bit(1),
  8   218       2 report_is bit(1),
  8   219       2 linage_is bit(1),
  8   220       2 value_of bit(1),
  8   221      2 linage_type,
  8   222        3 body bit(1),
  8   223        3 footing bit(1),
  8   224        3 top bit(1),
  8   225        3 bottom bit(1),
  8   226       2 label_type,
  8   227         3 omitted bit(1),
  8   228         3 standard bit(1),
  8   229         3 user_spec bit(1) ;
  8   230 /* communication section data */
  8   231 dcl fixbin7_1 fixed;
  8   232 dcl fixbin15 fixed bin;
  8   233 dcl fixbin31 fixed bin(24);
  8   234 dcl bit3 bit(3);
  8   235 dcl bit8 bit(8);
  8   236 dcl bit12 bit(12);
  8   237 dcl char1 char(1);
  8   238 dcl char4 char(4);
  8   239 dcl char12 char(12);
  8   240 dcl vectora(128) bit(1) based(ptr5);
  8   241 dcl 1 vectord based(ptr5),
  8   242 	2 descr bit(72),
  8   243 	2 minivector bit(18),
  8   244 	2 filler bit(38);
  8   245 dcl 1 vector_map based(ptr5),
  8   246 	2 file_section bit(1),    	   /*1*/
  8   247 	2 working_storage bit(1),	   /*2*/
  8   248 	2 constant_section bit(1),	   /*3*/
  8   249 	2 linkage_section bit(1),	   /*4*/
  8   250 	2 communication_section bit(1),  /*5*/
  8   251 	2 report_section bit(1),	   /*6*/
  8   252 	2 level_77 bit(1),		   /*7*/
  8   253 	2 level_01 bit(1),		   /*8*/
  8   254 	2 non_elementary bit(1),	   /*9*/
  8   255 	2 elementary bit(1),	   /*10*/
  8   256 	2 filler_item bit(1),	   /*11*/
  8   257 	2 s_of_rdf bit(1),		   /*12*/
  8   258 	2 o_of_rdf bit(1),		   /*13*/
  8   259 	2 bin_18 bit(1),		   /*14*/
  8   260 	2 bin_36 bit(1),		   /*15*/
  8   261 	2 pic_has_l bit(1),		   /*16*/
  8   262 	2 pic_is_do bit(1),		   /*17*/
  8   263 	2 numeric bit(1),		   /*18*/
  8   264 	2 numeric_edited bit(1),	   /*19*/
  8   265 	2 alphanum bit(1),		   /*20*/
  8   266 	2 alphanum_edited bit(1),	   /*21*/
  8   267 	2 alphabetic bit(1),	   /*22*/
  8   268 	2 alphabetic_edited bit(1),	   /*23*/
  8   269 	2 pic_has_p bit(1),		   /*24*/
  8   270 	2 pic_has_ast bit(1),	   /*25*/
  8   271 	2 item_signed bit(1),	   /*26*/
  8   272 	2 sign_separate bit(1),	   /*27*/
  8   273 	2 display bit(1),		   /*28*/
  8   274 	2 comp bit(1),		   /*29*/
  8   275 	2 ascii_packed_dec_h bit(1),	   /*30*/
  8   276 	2 ascii_packed_dec_b bit(1),	   /*31*/
  8   277 	2 ebcdic_packed_dec bit(1),	   /*32*/
  8   278 	2 bin_16 bit(1),		   /*33*/
  8   279 	2 bin_32 bit(1),		   /*34*/
  8   280 	2 usage_index bit(1),	   /*35*/
  8   281 	2 just_right bit(1),	   /*36*/
  8   282 	2 just_left bit(1),		   /*37*/
  8   283 	2 sync_right bit(1),	   /*38*/
  8   284 	2 temporary bit(1),		   /*39*/
  8   285 	2 bwz bit(1),		   /*40*/
  8   286 	2 variable_length bit(1),	   /*41*/
  8   287 	2 subscripted bit(1),	   /*42*/
  8   288 	2 occurs_do bit(1),		   /*43*/
  8   289 	2 key_a bit(1),		   /*44*/
  8   290 	2 key_d bit(1),		   /*45*/
  8   291 	2 indexed_by bit(1),	   /*46*/
  8   292 	2 value_numeric bit(1),	   /*47*/
  8   293 	2 value_non_numeric bit(1),	   /*48*/
  8   294 	2 value_signed bit(1),	   /*49*/
  8   295 	2 sign_type bit(3),		   /*50*/
  8   296 	2 pic_integer bit(1),	   /*53*/
  8   297 	2 ast_when_zero bit(1),	   /*54*/
  8   298 	2 label_record bit(1),	   /*55*/
  8   299 	2 label bit(1),		   /*56*/
  8   300 	2 sign_clause_occurred bit(1),		   /*57*/
  8   301 	2 subject_of_keyis bit(1),	   /*58*/
  8   302 	2 exp_redefining bit(1),	   /*59*/
  8   303 	2 sync_in_rec bit(1),	   /*60*/
  8   304 	2 filler61 bit(4),		   /*61*/
  8   305 	2 sum_counter bit(1),	   /*65*/
  8   306 	2 occurs_clause bit(1),	   /*66*/
  8   307 	2 linage_counter bit(1),	   /*67*/
  8   308 	2 rnm_01 bit(1),		   /*68*/
  8   309 	2 aligned bit(1),		   /*69*/
  8   310 	2 not_user_writable bit(1),	   /*70*/
  8   311 	2 reserved bit(2),		   /*71*/
  8   312 	2 pic_unsigned bit(1),	   /*73*/
  8   313 	2 picture_clause bit(1),	   /*74*/
  8   314 	2 sign_clause bit(1),	   /*75*/
  8   315 	2 code_set_class1 bit(1),	   /*76*/
  8   316 	2 value_clause bit(1),	   /*77*/
  8   317 	2 usage_clause bit(1),	   /*78*/
  8   318 	2 no_picture bit(1),	   /*79*/
  8   319 	2 elem_no_value bit(1),	   /*80*/
  8   320 	2 fig_zero bit(1),	   /*81*/
  8   321 	2 inherit_value bit(1),	   /*82*/
  8   322 	2 code_set bit(1),	   /*83*/
  8   323 	2 assoc_with_signed_num_display bit(1),		/*84*/
  8   324 	2 pic_has_s bit(1),	/*85*/
  8   325 	2 filler5 bit(5);	   /*86*/
  8   326 /*inheritable properties masks for description bits*/
  8   327 dcl mask_descr bit(72) internal static init(
  8   328 "111111000001011000000000001111111110000001000100011100000000000000000100"b);
  8   329 /*inheritable properties mask for vector description bits 73-90(stored in htab entry)*/
  8   330 dcl mask_minivector bit(18) internal static init("100100000110000000"b);
  8   331 /*upward inheritable properties mask for vector description bits 73-90*/
  8   332 dcl mask_minivector_reverse bit(18) internal static init("000000000001000000"b);
  8   333 dcl any_item(1000) char(1) based;
  8   334 dcl anystring char(1000) based;
  8   335 dcl vectemp bit(128);
  8   336 dcl ptr6 ptr;
  8   337 dcl 1 vectempd based(ptr6),
  8   338 	2 descr bit(72),
  8   339 	2 minivector bit(18),
  8   340 	2 filler bit(38);
  8   341 /* file section data */
  8   342 /*****  picture processing data *****/
  8   343 dcl   cobol_c_list entry(ptr) ext;
  8   344 dcl   cobol_ctbin entry(ptr,ptr,ptr,fixed bin) ext;
  8   345 dcl bit8_1 bit(8);
  8   346 dcl   cobol_pic_val_comp entry(ptr,ptr) ext returns(fixed bin);
  8   347 dcl   cobol_compare_values entry(ptr,ptr,fixed bin(24),ptr) ext returns(fixed bin);
  8   348 dcl character_tbl(7) char(1) internal static;
  8   349 dcl ptr7 ptr;
  8   350 dcl ptr8 ptr;
  8   351 dcl ptr9 ptr;
  8   352 dcl bit72 bit(72) based;
  8   353 dcl ptr10 ptr;
  8   354 dcl   cobol_swf_get entry(ptr,bit(32),ptr,fixed bin) ext;
  8   355 dcl   cobol_vdwf_dget entry(ptr,bit(32),ptr,fixed bin,char(5)) ext;
  8   356 dcl   cobol_vdwf_dput entry(ptr,bit(32),ptr,fixed bin,char(5)) ext;
  8   357 dcl   cobol_vdwf_sput entry(ptr,bit(32),ptr,fixed bin,char(5)) ext;
  8   358 dcl   cobol_vdwf_sget entry(ptr,bit(32),ptr,fixed bin,char(5)) ext;
  8   359 dcl htbl_minivector_bs bit(18) based(ptr7);
  8   360 
  8   361 /* END INCLUDE FILE ...   cobol_non_static.incl.pl1 */
  8   362 
     3992 
  9     1 
  9     2 /* BEGIN INCLUDE FILE ... cobol_type9.incl.pl1 */
  9     3 /* Last modified on 11/19/76 by ORN */
  9     4 
  9     5 /*
  9     6*A type 9 data name token is entered into the name table by the data
  9     7*division syntax phase for each data name described in the data division.
  9     8*The replacement phase subsequently replaces type 8 user word references
  9     9*to data names in the procedure division minpral file with the corresponding
  9    10*type 9 tokens from the name table.
  9    11**/
  9    12 
  9    13 /* dcl dn_ptr ptr; */
  9    14 
  9    15 /* BEGIN DECLARATION OF TYPE9 (DATA NAME) TOKEN */
  9    16 dcl 1 data_name based (dn_ptr),
 10     1 
 10     2 /* begin include file ... cobol_TYPE9.incl.pl1 */
 10     3 /* Last modified on 06/19/77 by ORN */
 10     4 /* Last modified on 12/28/76 by FCH */
 10     5 
 10     6 		/* header */
 10     7 		2 size fixed bin,
 10     8 		2 line fixed bin,
 10     9 		2 column fixed bin,
 10    10 		2 type fixed bin,
 10    11 		/* body */
 10    12 		2 string_ptr ptr,
 10    13 		2 prev_rec ptr,
 10    14 		2 searched bit (1),
 10    15 		2 duplicate bit (1),
 10    16 		2 saved bit (1),
 10    17 		2 debug_ind bit (1),
 10    18 		2 filler2 bit (3),
 10    19 		2 used_as_sub bit (1),
 10    20 		2 def_line fixed bin,
 10    21 		2 level fixed bin,
 10    22 		2 linkage fixed bin,
 10    23 		2 file_num fixed bin,
 10    24 		2 size_rtn fixed bin,
 10    25 		2 item_length fixed bin(24),
 10    26 		2 places_left fixed bin,
 10    27 		2 places_right fixed bin,
 10    28 		/* description */
 10    29 		2 file_section bit (1),
 10    30 		2 working_storage bit (1),
 10    31 		2 constant_section bit (1),
 10    32 		2 linkage_section bit (1),
 10    33 		2 communication_section bit (1),
 10    34 		2 report_section bit (1),
 10    35 		2 level_77 bit (1),
 10    36 		2 level_01 bit (1),
 10    37 		2 non_elementary bit (1),
 10    38 		2 elementary bit (1),
 10    39 		2 filler_item bit (1),
 10    40 		2 s_of_rdf bit (1),
 10    41 		2 o_of_rdf bit (1),
 10    42 		2 bin_18 bit (1),
 10    43 		2 bin_36 bit (1),
 10    44 		2 pic_has_l bit (1),
 10    45 		2 pic_is_do bit (1),
 10    46 		2 numeric bit (1),
 10    47 		2 numeric_edited bit (1),
 10    48 		2 alphanum bit (1),
 10    49 		2 alphanum_edited bit (1),
 10    50 		2 alphabetic bit (1),
 10    51 		2 alphabetic_edited bit (1),
 10    52 		2 pic_has_p bit (1),
 10    53 		2 pic_has_ast bit (1),
 10    54 		2 item_signed bit(1),
 10    55 		2 sign_separate bit (1),
 10    56 		2 display bit (1),
 10    57 		2 comp bit (1),
 10    58 		2 ascii_packed_dec_h bit (1),	/* as of 8/16/76  this field used for comp8. */
 10    59 		2 ascii_packed_dec bit (1),
 10    60 		2 ebcdic_packed_dec bit (1),
 10    61 		2 bin_16 bit (1),
 10    62 		2 bin_32 bit (1),
 10    63 		2 usage_index bit (1),
 10    64 		2 just_right bit (1),
 10    65 		2 compare_argument bit (1),
 10    66 		2 sync bit (1),
 10    67 		2 temporary bit (1),
 10    68 		2 bwz bit (1),
 10    69 		2 variable_length bit (1),
 10    70 		2 subscripted bit (1),
 10    71 		2 occurs_do bit (1),
 10    72 		2 key_a bit (1),
 10    73 		2 key_d bit (1),
 10    74 		2 indexed_by bit (1),
 10    75 		2 value_numeric bit (1),
 10    76 		2 value_non_numeric bit (1),
 10    77 		2 value_signed bit (1),
 10    78 		2 sign_type bit (3),
 10    79 		2 pic_integer bit (1),
 10    80 		2 ast_when_zero bit (1),
 10    81 		2 label_record bit (1),
 10    82 		2 sign_clause_occurred bit (1),
 10    83 		2 okey_dn bit (1),
 10    84 		2 subject_of_keyis bit (1),
 10    85 		2 exp_redefining bit (1),
 10    86 		2 sync_in_rec bit (1),
 10    87 		2 rounded bit (1),
 10    88 		2 ad_bit bit (1),
 10    89 		2 debug_all bit (1),
 10    90 		2 overlap bit (1),
 10    91 		2 sum_counter bit (1),
 10    92 		2 exp_occurs bit (1),
 10    93 		2 linage_counter bit (1),
 10    94 		2 rnm_01 bit (1),
 10    95 		2 aligned bit (1),
 10    96 		2 not_user_writable bit (1),
 10    97 		2 database_key bit (1),
 10    98 		2 database_data_item bit (1),
 10    99 		2 seg_num fixed bin,
 10   100 		2 offset fixed bin(24),
 10   101 		2 initial_ptr fixed bin,
 10   102 		2 edit_ptr fixed bin,
 10   103 		2 occurs_ptr fixed bin,
 10   104 		2 do_rec char(5),
 10   105 		2 bitt bit (1),
 10   106 		2 byte bit (1),
 10   107 		2 half_word bit (1),
 10   108 		2 word bit (1),
 10   109 		2 double_word bit (1),
 10   110 		2 half_byte bit (1),
 10   111 		2 filler5 bit (1),
 10   112 		2 bit_offset bit (4),
 10   113 		2 son_cnt bit (16),
 10   114 		2 max_red_size fixed bin(24),
 10   115 		2 name_size fixed bin,
 10   116 		2 name char(0 refer(data_name.name_size));	
 10   117 
 10   118 
 10   119 
 10   120 /* end include file ... cobol_TYPE9.incl.pl1 */
 10   121 
  9    17 
  9    18 /* END DECLARATION OF TYPE9 (DATA NAME) TOKEN */
  9    19 
  9    20 /* END INCLUDE FILE ... cobol_type9.incl.pl1 */
  9    21 
     3993 
 11     1 
 11     2 /* BEGIN INCLUDE FILE ... cobol_occurs.incl.pl1 */
 11     3 /* Last Modified on 01/19/77 by ORN */
 11     4 
 11     5 dcl 1 occurs based (ptr1),
 12     1 
 12     2 /* begin include file ... cobol_OCCURS.incl.pl1 */
 12     3 /* Last modified on 12/28/76 by FCH */
 12     4 
 12     5     2 keyed fixed bin,
 12     6     2 key_number fixed bin,
 12     7     2 dimensions fixed bin,
 12     8     2 level (3),
 12     9     3 indexedno fixed bin,
 12    10     3 min fixed bin,
 12    11     3 max fixed bin,
 12    12     3 struclength fixed bin,
 12    13    3 cswdx fixed bin,
 12    14     3 cswd fixed bin(24);
 12    15 
 12    16 /* end include file ... cobol_OCCURS.incl.pl1 */
 12    17 
 11     6 
 11     7 
 11     8 /* END INCLUDE FILE ... cobol_occurs.incl.pl1 */
 11     9 
     3994 
 13     1 
 13     2 /* BEGIN INCLUDE FILE ...   cobol_fd_token.incl.pl1 */
 13     3 /*	last modified on 2/21/74			*/
 13     4 dcl 1 fd_token based(w2_ptr),
 14     1 
 14     2 /* BEGIN INCLUDE FILE ...   cobol_FD_TOKEN.incl.pl1 */
 14     3 
 14     4      2 size fixed bin,
 14     5      2 line fixed bin,
 14     6      2 column fixed bin,
 14     7      2 type fixed bin,      /* FD =12  SD =16  */
 14     8      2 string_ptr ptr,
 14     9      2 prev_rec ptr,
 14    10      2 info bit(8),
 14    11      2 def_line fixed bin,
 14    12      2 file_no fixed bin,
 14    13      2 name_size fixed bin,
 14    14      2 name char(31);
 14    15 
 14    16 /* END INCLUDE FILE ...   cobol_FD_TOKEN.incl.pl1 */
 14    17 
 13     5 
 13     6 /* END INCLUDE FILE ...   cobol_fd_token.incl.pl1 */
 13     7 
     3995 
     3996 declare	1 cdtoken		based (cdtoken_ptr),
 15     1 
 15     2 /* begin include file ... cobol_TYPE13.incl.pl1
 15     3*/* Last modified on 11/18/76 by ORN */
 15     4 
 15     5 		/* header */
 15     6      2 size fixed bin,
 15     7      2 line fixed bin,
 15     8      2 column fixed bin,
 15     9      2 type fixed bin,     /* cd = 13 */
 15    10 		/* body */
 15    11      2 string_ptr ptr,
 15    12      2 prev_rec ptr,
 15    13      2 info,
 15    14 	3 searched bit(1),
 15    15 	3 duplicate bit(1),
 15    16 	3 filler1 bit(6),
 15    17      2 options,
 15    18 	3 input bit(1),
 15    19 	3 output bit(1),
 15    20 	3 initial bit(1),
 15    21      2 def_line fixed bin,
 15    22      2 cd_num fixed bin,
 15    23      2 cd_seg fixed bin,
 15    24      2 cd_off fixed bin(24),
 15    25      2 max_redef fixed bin,
 15    26      2 mdest fixed bin,
 15    27      2 name_size fixed bin,
 15    28      2 name char(0 refer(cdtoken.name_size));
 15    29 
 15    30 /* end include file ... cobol_TYPE13.incl.pl1 */
 15    31 
     3997 
     3998 declare	1 fd		based,
 16     1 
 16     2 /* begin include file ... cobol_TYPE12.incl.pl1 */
 16     3 /* Last modified on 11/17/76 by ORN */
 16     4 
 16     5 		/* header */
 16     6 		2 size fixed bin,
 16     7 		2 line fixed bin,
 16     8 		2 column fixed bin,
 16     9 		2 type fixed bin,
 16    10 		/* body */
 16    11 		2 string_ptr ptr,
 16    12 		2 prev_rec ptr,
 16    13 		2 info bit (8),
 16    14 		2 def_line fixed bin,
 16    15 		2 file_no fixed bin,
 16    16 		2 name_size fixed bin,
 16    17 		2 name char(0 refer(fd_token.name_size));	
 16    18 
 16    19 /* end include file ... cobol_TYPE12.incl.pl1 */
 16    20 
     3999 
 17     1 
 17     2 /* BEGIN INCLUDE FILE ...   cobol_linage_rec.incl.pl1 */
 17     3 /*     <<< LAST MODIFIED ON 7-29-74 by FCH   >>>     */
 17     4 
 17     5 /*	***STRUCTURE SIZE INFORMATION***        */
 17     6 /*     THE SIZE OF THIS STRUCTURE IN BYTES, (EXCLUDING VARIABLE
 17     7*       LENGTH ENTITIES), FOR EACH HARDWARE IMPLEMENTATION IS:
 17     8*
 17     9*	HARDWARE	|	SIZE (BYTES)
 17    10*	---------------------------------
 17    11*	645/6180	|	64
 17    12*	---------------------------------
 17    13**/
 17    14 
 17    15 /*
 17    16*A linage record is entered into variable common for each linage clause
 17    17*specified in the data division.
 17    18**/
 17    19 
 17    20 /*   THE LINAGE RECORD STRUCTURE   */
 17    21 
 17    22 dcl	1 linage_rec based (linage_ptr),
 17    23 		2 body fixed bin (15),
 17    24 		2 footing fixed bin (15),
 17    25 		2 top fixed bin (15),
 17    26 		2 bottom fixed bin (15),
 17    27 		2 body_int fixed bin (31),
 17    28 		2 footing_int fixed bin (31),
 17    29 		2 top_int fixed bin (31),
 17    30 		2 bottom_int fixed bin (31),
 17    31 		2 body_name char (5),
 17    32 		2 footing_name char (5),
 17    33 		2 top_name char (5),
 17    34 		2 bottom_name char (5),
 17    35 		2 name_count fixed bin (15),
 17    36 		2 gen_seg fixed bin (15),
 17    37 		2 gen_offset fixed bin (31),
 17    38 		2 name_desc(0 refer(linage_rec.name_count)) char(40);
 17    39 
 17    40 
 17    41 
 17    42 /* END INCLUDE FILE ...   cobol_linage_rec.incl.pl1 */
 17    43 
     4000 
 18     1 
 18     2 /* BEGIN INCLUDE FILE ...   cobol_skey_rec.incl.pl1 */
 18     3 dcl 1 skey_rec based(skey_ptr),
 18     4      2 next char(5),
 18     5      2 qual char(5),
 18     6      2 keyno fixed bin,
 18     7      2 asc_des fixed bin,
 18     8      2 ref_line fixed bin,
 18     9      2 ref_column fixed bin,
 18    10      2 info bit(8),
 18    11      2 size fixed bin,
 18    12      2 name char(31);
 18    13 /* END INCLUDE FILE ...  cobol_skey_rec.incl.pl1 */
 18    14 
     4001 
 19     1 
 19     2 /* BEGIN INCLUDE FILE ...   cobol_fixed_common.incl.pl1 */
 19     3 /* Modified on 10/27/82 by FCH, [5.1-1], cobol_cln added to save last line num, BUG543(phx13643) */
 19     4 /* Modified on 07/31/80 by FCH, [4.3-1], use_reporting field added for Report Writer */
 19     5 /* Modified on 03/30/79 by FCH, [4.1-1], -card option added */
 19     6 /* Modified on 03/30/79 by FCH, [4.0-2], -svNM option added */
 19     7 /* Modified on 03/02/79 by FCH, [4.0-1], -levNM option added */
 19     8 /* Modified by RAL on 10/13/78, [4.0-0], Added option exp from fil2. */
 19     9 /* Modified by BC on 06/20/77, descriptor added.	*/
 19    10 /* Modified by BC on 06/02/77, init_cd_seg, init_cd_offset added.	*/
 19    11 /* Modified by BC  on 1/21/77, options.profile added.	*/
 19    12 /* Modified by FCH on 7/6/76, sysin_fno & sysout_fno deleted, accept_device & display_device added */
 19    13 /* Modified by FCH on 5/20/77, comp_level added */
 19    14 
 19    15 
 19    16 /*     THE SIZE OF THIS STRUCTURE IN BYTES, (EXCLUDING VARIABLE
 19    17*   LENGTH ENTITIES), FOR EACH HARDWARE IMPLEMENTATION IS:
 19    18*
 19    19*   HARDWARE	|	SIZE (BYTES)
 19    20*   ---------------------------------
 19    21*   645/6180	|	464
 19    22*   P7		|	396
 19    23*   ---------------------------------
 19    24*   */
 19    25 
 19    26 dcl 	1 fixed_common based (  cobol_com_ptr),
 19    27     		2 prog_name char (30),
 19    28    		2 compiler_rev_no char (25),
 19    29     		2 phase_name char (6),
 19    30     		2 currency char (1),
 19    31     		2 fatal_no fixed bin,
 19    32     		2 warn_no fixed bin,
 19    33     		2 proc_counter fixed bin,
 19    34     		2 spec_tag_counter fixed bin,
 19    35     		2 file_count fixed bin,
 19    36     		2 filedescr_offsets (20) char (5),
 19    37     		2 perf_alter_info char (5),
 19    38     		2 another_perform_info char (5),
 19    39     		2 sort_in_info char (5),
 19    40     		2 odo_info char (5),
 19    41     		2 size_seg fixed bin,
 19    42     		2 size_offset fixed bin(24),
 19    43     		2 size_perform_info char (5),
 19    44     		2 rename_info char (5),
 19    45     		2 report_names char (5),
 19    46     		2 rw_buf_seg fixed bin,
 19    47     		2 rw_buf_offset fixed bin(24),
 19    48     		2 rw_buf_length fixed bin(24),
 19    49     		2 file_keys char (5),
 19    50     		2 search_keys char (5),
 19    51     		2 dd_seg_size fixed bin(24),
 19    52     		2 pd_seg_size fixed bin(24),
 19    53     		2 seg_limit fixed bin ,
 19    54     		2 number_of_dd_segs fixed bin,
 19    55     		2 seg_info char (5),
 19    56     		2 number_of_ls_pointers fixed bin,
 19    57     		2 link_sec_seg fixed bin,
 19    58     		2 link_sec_offset fixed bin(24),
 19    59     		2 sra_clauses fixed bin,
 19    60     		2 fix_up_info char (5),
 19    61     		2 linage_info char (5),
 19    62     		2 first_dd_item char (5),
 19    63     		2 sort_out_info char (5),
 19    64     		2 db_info char (5),
 19    65     		2 realm_info char (5),
 19    66     		2 rc_realm_info char (5),
 19    67     		2 last_file_key char (5),
 19    68     		2 prog_coll_seq fixed bin,
 19    69 		2 init_cd_seg fixed bin,
 19    70 		2 init_cd_offset fixed bin(24),
 19    71     		2 input_error_exit fixed bin,
 19    72    		2 output_error_exit fixed bin,
 19    73     		2 i_o_error_exit fixed bin,
 19    74     		2 extend_error_exit fixed bin,
 19    75     		2 dummy15 fixed bin,
 19    76     		2 options,
 19    77       			3 cu bit (1),
 19    78       			3 st bit (1),
 19    79       			3 wn bit (1),
 19    80       			3 obs bit (1),
 19    81       			3 dm bit (1),
 19    82       			3 xrl bit (1),
 19    83       			3 xrn bit (1),
 19    84       			3 src bit (1),
 19    85       			3 obj bit (1),
 19    86       			3 exs bit (1),
 19    87       			3 sck bit (1),
 19    88       			3 rno bit (1),
 19    89 			3 u_l bit (1),
 19    90 			3 cnv bit (1),
 19    91 			3 cos bit (1),
 19    92 			3 fmt bit (1),
 19    93 			3 profile bit(1),
 19    94 			3 nw bit (1),
 19    95 			3 exp bit (1),		/* [4.0-0] */
 19    96 			3 card bit (1),  /*[4.1-1]*/
 19    97 			3 fil2 bit (5),
 19    98 			3 m_map bit (1),
 19    99 			3 m_bf bit (1),
 19   100 			3 m_fat bit (1),
 19   101 			3 m_wn bit (1),
 19   102 			3 m_obs bit(1),
 19   103 			3 pd bit(1),
 19   104       			3 oc bit(1),
 19   105     		2 supervisor bit (1),
 19   106     		2 dec_comma bit (1),
 19   107     		2 init_cd bit (1),
 19   108     		2 corr bit (1),
 19   109     		2 initl bit (1),
 19   110     		2 debug bit (1),
 19   111     		2 report bit (1),
 19   112     		2 sync_in_prog bit (1),
 19   113     		2 pd_section bit (1),
 19   114     		2 list_switch bit (1),
 19   115     		2 alpha_cond bit (1),
 19   116     		2 num_cond bit (1),
 19   117     		2 spec_sysin bit (1),
 19   118     		2 spec_sysout bit (1),
 19   119     		2 cpl_files bit (1),
 19   120     		2 obj_dec_comma bit (1),
 19   121 		2 default_sign_type bit (3),
 19   122 		2 use_debug bit(1),
 19   123 		2 syntax_trace bit(1),
 19   124 		2 comp_defaults,
 19   125 			3 comp	bit(1),
 19   126 			3 comp_1	bit(1),
 19   127 			3 comp_2	bit(1),
 19   128 			3 comp_3	bit(1),
 19   129 			3 comp_4	bit(1),
 19   130 			3 comp_5	bit(1),
 19   131 			3 comp_6	bit(1),
 19   132 			3 comp_7	bit(1),
 19   133 			3 comp_8 bit(1),
 19   134 		2 disp_defaults,
 19   135 			3 disp	bit(1),
 19   136 			3 disp_1	bit(1),
 19   137 			3 disp_2	bit(1),
 19   138 			3 disp_3	bit(1),
 19   139 			3 disp_4	bit(1),
 19   140 			3 disp_5  bit(1),
 19   141 			3 disp_6  bit(1),
 19   142 			3 disp_7  bit(1),
 19   143 		2 descriptor bit(2),
 19   144 		2 levsv  bit(3),		/*[4.0-1]*/
 19   145 		2 use_reporting bit(1),	/*[4.3-1]*/
 19   146 		2 cd bit(1),		/*[4.4-1]*/
 19   147 		2 dummy17 bit(3),
 19   148    		2 lvl_rstr bit(32),
 19   149    		2 inst_rstr bit(32),
 19   150 		2 comp_level char(1),
 19   151 		2 dummy18 char(30),
 19   152 		2 object_sign char (1),
 19   153     		2 last_print_rec char (5),
 19   154     		2 coll_seq_info char (5),
 19   155     		2 sys_status_seg fixed bin,
 19   156    		2 sys_status_offset fixed bin(24),
 19   157    		2 compiler_id fixed bin,
 19   158    		2 date_comp_ln fixed bin,
 19   159    		2 compile_mode bit(36),
 19   160    		2 default_temp fixed bin,
 19   161    		2 accept_device fixed bin,
 19   162    		2 display_device fixed bin,
 19   163    		2 cobol_cln fixed bin,	/*[5.1-1]*/
 19   164 		2 alphabet_offset fixed bin;
 19   165 
 19   166 
 19   167 
 19   168 /* END INCLUDE FILE ...   cobol_fixed_common.incl.pl1 */
 19   169 
     4002 
 20     1 
 20     2 /* BEGIN INCLUDE FILE ...   cobol_file_table.incl.pl1 */
 20     3 /*     <<<   INCLUDE FILE FOR FILE TABLE IN COMMON   >>>     */
 20     4 
 20     5 /* Modified on 09/30/80 by FCH, [4.4-1], density is 6250 is supported */
 20     6 /* Modified on 12/05/78 by RAL, [3.0-3], added dupl_alt from dummy102 */
 20     7 /* Modified on 11/21/78 by RAL, [3.0-2], added space for abs_record_offset from filler */
 20     8 /* Modified on 10/26/78 by RAL, [3.0-1], added space for file_desc_1 table offset from filler */
 20     9 /*     <<<   LAST MODIFIED ON 06-02-77 by GM         >>>	*/
 20    10 /*     <<<   LAST MODIFIED ON 05-31-77 by GM         >>>	*/
 20    11 /*     <<<   LAST MODIFIED  ON 06-30-76 by GM        >>>	*/
 20    12 /*     <<<   LAST MODIFIED ON 06-07-76 by GM    >>>     */
 20    13 /*     <<<   LAST MODIFIED ON 11-29-74 by orn   >>>     */
 20    14 
 20    15 /*
 20    16*A file table is created in variable common for each file selected in the
 20    17*environment division.  The fields of a given file table provide information
 20    18*about the specific file for which the file table is generated.  The
 20    19*addresses which may be contained in the various "info" fields of the file
 20    20*table are addresses in variable common.
 20    21**/
 20    22 
 20    23 /*   THE FILE TABLE STRUCTURE   */
 20    24 
 20    25 dcl	1 file_table based (ft_ptr),
 20    26 		2 next char (5),
 20    27 		2 ifn char (16),
 20    28 		2 attach_options_info char(5),	/*06/02/77*/
 20    29 		2 replacement_info char(5),		/*06/02/77*/
 20    30 		2 file_id_info char(5),		/*05/31/77*/
 20    31 		2 retention_info char(5),		/*05/31/77*/
 20    32 		2 filler0 char (3) ,			/* [3.0-1] */
 20    33 		2 file_desc_1_offset fixed bin (24),		/* [3.0-1] */
 20    34 		2 abs_record_offset fixed bin (24),		/* [3.-02] */
 20    35 		2 filler char(5),		/* this area is available.*/
 20    36 		2 padding_char char (1),
 20    37 		2 banner_char char (1),
 20    38 		2 file_status_info char (5),
 20    39 		2 extra_status_info char (5),
 20    40 		2 cat_id_info char (5),
 20    41 		2 r_key_info char (5),
 20    42 		2 alt_key_info char (5),
 20    43 		2 rec_do_info char (5),
 20    44 		2 label_info char (5),
 20    45 		2 data_info char (5),
 20    46 		2 report_info char (5),
 20    47 		2 linage_info char (5),
 20    48 		2 optional bit (1),						/*06/07/76*/
 20    49 		2 external bit (1),
 20    50 		2 file_status bit (1),
 20    51 		2 extra_status bit (1),
 20    52 		2 sysin bit (1),
 20    53 		2 sysout bit (1),
 20    54 		2 move_mode bit (1),
 20    55 		2 locate_mode bit (1),
 20    56 		2 fixed_recs bit (1),
 20    57 		2 variable_recs bit (1),
 20    58 		2 spanned_recs bit (1),				/*06/07/76*/
 20    59 		2 interchange bit (1),				/*06/07/76*/
 20    60 		2 relative_key bit (1),
 20    61 		2 record_key bit (1),
 20    62 		2 even_parity bit (1),
 20    63 		2 odd_parity bit (1),
 20    64 		2 padding bit (1),
 20    65 		2 banner bit (1),
 20    66 		2 random bit (1),
 20    67 		2 no_file_lockout bit (1),
 20    68 		2 no_write_check bit (1),
 20    69 		2 no_resident_index bit (1),
 20    70 		2 same_file bit (1),
 20    71 		2 sort_file bit (1),
 20    72 		2 rec_do bit (1),
 20    73 		2 linage bit (1),
 20    74 		2 code_set_clause bit (1),
 20    75 		/* history */
 20    76 		2 close bit (1),
 20    77 		2 delete bit (1),
 20    78 		2 open_in bit (1),
 20    79 		2 open_out bit (1),
 20    80 		2 open_io bit (1),
 20    81 		2 open_ext bit (1),
 20    82 		2 read bit (1),
 20    83 		2 release bit (1),
 20    84 		2 return_bit bit (1),
 20    85 		2 rewrite bit (1),
 20    86 		2 sort bit (1),
 20    87 		2 start bit (1),
 20    88 		2 use_error bit (1),
 20    89 		2 write bit (1),
 20    90 		2 read_next bit (1),
 20    91 		2 read_key bit (1),
 20    92 		2 accept bit (1),
 20    93 		2 display bit (1),
 20    94 		2 unequal_recs bit (1),
 20    95 		2 dummy_sysin bit (1),
 20    96 		2 dummy_sysout bit (1),
 20    97 		2 file_no fixed bin,
 20    98 		2 uca_offset fixed bin(24),
 20    99 		2 cra_seg fixed bin,
 20   100 		2 cra_offset fixed bin(24),
 20   101 		2 max_cra_size fixed bin(24),
 20   102 		2 catalogued fixed bin,
 20   103 		2 organization fixed bin,
 20   104 		2 org_qual fixed bin,
 20   105 		2 access fixed bin,
 20   106 		2 buffers fixed bin,
 20   107 		2 device fixed bin,
 20   108 		2 record_prefix fixed bin,				/*06/07/76*/
 20   109 		2 alternate_keys fixed bin,
 20   110 		2 record_format fixed bin,
 20   111 		2 label_format fixed bin,
 20   112 		2 key_location fixed bin,
 20   113 		2 key_size fixed bin,
 20   114 		2 temporary fixed bin,
 20   115 		2 address_format fixed bin,
 20   116 		2 same_area_clause fixed bin,
 20   117 		2 same_rec_clause fixed bin,
 20   118 		2 same_sort_clause fixed bin,
 20   119 		2 mult_clause_no fixed bin,
 20   120 		2 mult_position_no fixed bin,
 20   121 		2 block_desc fixed bin,
 20   122 		2 block_min fixed bin(24),
 20   123 		2 block_max fixed bin(24),
 20   124 		2 rec_min fixed bin(24),
 20   125 		2 rec_max fixed bin(24),
 20   126 		2 label_count fixed bin,
 20   127 		2 ifn_size fixed bin,
 20   128 		2 data_count fixed bin,
 20   129 		2 report_count fixed bin,
 20   130 		2 code_set fixed bin,
 20   131 		2 error_exit fixed bin,
 20   132 		2 prefix_size fixed bin,
 20   133 		2 blocked bit (1),
 20   134 		2 variable bit (1),
 20   135 		2 unbannered bit (1),
 20   136 		2 prefix_clause bit (1),
 20   137 		2 symbolic bit (1),
 20   138 		2 address_format_bit bit (1),
 20   139 		2 bsn bit(1),						/*06/07/76*/
 20   140 		2 process_area bit(1),					/*06/07/76*/
 20   141 		2 dupl_alt bit (1),			/* [3.0-3] */
 20   142 		2 dummy102 bit (23),
 20   143 		2 name_size fixed bin,
 20   144 		2 name char(32),
 20   145 		2 id char(32),
 20   146 		2 temp bit(1) ,
 20   147 		2 perm bit(1) ,
 20   148 		2 attach bit(1) ,
 20   149 		2 detach bit(1) ,
 20   150 		2 fsb ,		/* file state block */
 20   151 		     3 seg fixed bin(24), /* internal addr */
 20   152 		     3 off fixed bin(24),
 20   153 		2 tape,
 20   154 		     3 density bit(1) ,	/* 0-hi 1-lo */
 20   155 		     3 retain bit(1),	/* 0 not retained across attachment, 1 retained */
 20   156 		     3 force bit(1),	/* 0 check retention date, 1 no check */
 20   157 		     3 protect bit(1) ,	/* 0-no 1-yes */
 20   158 		     3 den_6250 bit(1),	/* 0-no 1-yes */		/*[4.4-1]*/
 20   159 		2 cat_nm char(200),
 20   160 		2 ao_len fixed bin(24),		/* attach options */
 20   161 		2 ao_string char(256),
 20   162 		2 output_mode fixed bin,	/*	0 not specified
 20   163*						1 generation
 20   164*						2 modification
 20   165*						3 replacement literal
 20   166*						4 replacement dataname	*/
 20   167 		2 om_len	fixed bin,		/* length of output mode */
 20   168 		2 om_string char(17),
 20   169 		2 tape_device fixed bin,	/*	0 not specified
 20   170*						1 integer
 20   171*						2 dataname	*/
 20   172 		2 tape_device_num fixed bin,
 20   173 		2 tape_device_key char(5),
 20   174 		2 add_cat_key char(5);
 20   175 
 20   176 
 20   177 /* END INCLUDE FILE ...   cobol_file_table.incl.pl1 */
 20   178 
     4003 
     4004 declare	1 procname	based (rec_ptr),
     4005 	  2 size		fixed bin,
     4006 	  2 line		fixed bin,
     4007 	  2 column	fixed bin,
     4008 	  2 type		fixed bin,
     4009 	  2 string_ptr	ptr,
     4010 	  2 prev_rec	ptr,
     4011 	  2 info		bit (8),
     4012 	  2 priority	char (2),
     4013 	  2 repl_bits	bit (8),
     4014 	  2 section_num	fixed bin,
     4015 	  2 proc_num	fixed bin,
     4016 	  2 def_line	fixed bin,
     4017 	  2 length	fixed bin,
     4018 	  2 name		char (30);
     4019      end cobol_ddsyntax;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    05/24/89  0832.7  cobol_ddsyntax.pl1                >spec>install>MR12.3-1048>cobol_ddsyntax.pl1
3723         1    11/11/82  1712.8  cobol_file_key.incl.pl1           >ldd>include>cobol_file_key.incl.pl1
3725         2    11/11/82  1712.8  cobol_TYPE40.incl.pl1             >ldd>include>cobol_TYPE40.incl.pl1
3726         3    03/27/82  0431.3  cobol_ext_.incl.pl1               >ldd>include>cobol_ext_.incl.pl1
3728         4    03/27/82  0439.7  cobol_ext_ddsyn.incl.pl1          >ldd>include>cobol_ext_ddsyn.incl.pl1
3729         5    03/27/82  0439.8  cobol_special_dcls.incl.pl1       >ldd>include>cobol_special_dcls.incl.pl1
3730         6    03/27/82  0439.4  cobol_spec_constants.incl.pl1     >ldd>include>cobol_spec_constants.incl.pl1
3733         7    03/27/82  0439.8  cobol_shared_var.incl.pl1         >ldd>include>cobol_shared_var.incl.pl1
3992         8    03/27/82  0439.3  cobol_non_static.incl.pl1         >ldd>include>cobol_non_static.incl.pl1
3993         9    03/27/82  0439.9  cobol_type9.incl.pl1              >ldd>include>cobol_type9.incl.pl1
9-17        10    11/11/82  1712.7  cobol_TYPE9.incl.pl1              >ldd>include>cobol_TYPE9.incl.pl1
3994        11    03/27/82  0439.7  cobol_occurs.incl.pl1             >ldd>include>cobol_occurs.incl.pl1
11-6        12    03/27/82  0439.6  cobol_OCCURS.incl.pl1             >ldd>include>cobol_OCCURS.incl.pl1
3995        13    03/27/82  0439.7  cobol_fd_token.incl.pl1           >ldd>include>cobol_fd_token.incl.pl1
13-5        14    03/27/82  0439.6  cobol_FD_TOKEN.incl.pl1           >ldd>include>cobol_FD_TOKEN.incl.pl1
3997        15    03/27/82  0439.6  cobol_TYPE13.incl.pl1             >ldd>include>cobol_TYPE13.incl.pl1
3999        16    03/27/82  0439.6  cobol_TYPE12.incl.pl1             >ldd>include>cobol_TYPE12.incl.pl1
4000        17    11/11/82  1712.8  cobol_linage_rec.incl.pl1         >ldd>include>cobol_linage_rec.incl.pl1
4001        18    03/27/82  0439.8  cobol_skey_rec.incl.pl1           >ldd>include>cobol_skey_rec.incl.pl1
4002        19    11/11/82  1712.8  cobol_fixed_common.incl.pl1       >ldd>include>cobol_fixed_common.incl.pl1
4003        20    11/11/82  1712.7  cobol_file_table.incl.pl1         >ldd>include>cobol_file_table.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
FD_indic                        000373 automatic       bit(1)                   level 2 packed packed unaligned dcl 3697 set ref
                                                                                  2784 2826* 2828*
FILE_REC_TAB                    000422 internal static structure                level 1 unaligned dcl 3657
LEV                             000260 automatic       char(1)                  packed unaligned dcl 3622 set ref 3117* 3142* 3153
                                                                                  3180* 3189*
RC                              000231 automatic       fixed bin(17,0)          dcl 3412 set ref 3418 3439* 3462
RL                              000230 automatic       fixed bin(17,0)          dcl 3412 set ref 3416 3438* 3461
TF                              000313 automatic       fixed bin(17,0)          dcl 3674 set ref 163* 200 200* 218* 227* 230* 2084*
                                                                                  2088*
a_num                     4            based           fixed bin(17,0)          level 2 dcl 321 set ref 180* 185 220 226
act_num                         000311 automatic       fixed bin(17,0)          dcl 3674 set ref 185* 187 187 191 191* 193* 220*
                                                                                  231*
addr                                                   builtin function         dcl 3989 ref 57 80 97 109 111 113 137 161 269 452
                                                                                  471 484 504 558 652 680 685 788 867 888 955 1006
                                                                                  1165 1617 1775 1777 1802 1804 1857 1859 1860 1879
                                                                                  2027 2034 2041 2048 2054 2256 2412 2474 3223 3457
                                                                                  3505 3507
aiv_constant                           constant        fixed bin(17,0)          initial dcl 6-8 ref 580 582 977 979
al                      143            based           fixed bin(17,0)          level 2 dcl 3732 set ref 3238 3449*
alf                             000316 automatic       structure                level 1 unaligned dcl 3677
alf_key                   1     000316 automatic       char(5)                  level 2 packed packed unaligned dcl 3677 set ref 97
                                                                                  2245*
alf_key_ptr               4     000316 automatic       pointer                  level 2 dcl 3677 set ref 97* 2241 2243 2256 2262
                                                                                  2264 2270
alf_offset                             based           fixed bin(17,0)          dcl 3683 set ref 2241* 2243 2256* 2262* 2264 2270
alf_ptr                         000304 automatic       pointer                  dcl 3671 set ref 2245* 2247 2250 2256
alf_size                        000316 automatic       fixed bin(17,0)          level 2 dcl 3677 set ref 2245*
alf_status                6     000316 automatic       bit(32)                  level 2 packed packed unaligned dcl 3677 set ref
                                                                                  2245*
all_ind                3270            based           fixed bin(17,0)          level 2 dcl 3732 set ref 90* 2751* 2760*
alphabet_name                          based           structure                level 1 unaligned dcl 3724
alphabet_offset         163            based           fixed bin(17,0)          level 2 dcl 19-26 ref 2239 2241
alphabetic                0(21)        based           bit(1)                   level 2 packed packed unaligned dcl 8-245 set ref
                                                                                  1594*
alphabetic_edited         0(22)        based           bit(1)                   level 2 packed packed unaligned dcl 8-245 set ref
                                                                                  1674*
alphainit                              based           structure                level 1 unaligned dcl 8-134
alphanum                 21(19)        based           bit(1)                   level 2 in structure "data_name" packed packed
                                                                                  unaligned dcl 9-16 in procedure "cobol_ddsyntax"
                                                                                  set ref 498*
alphanum                  0(19)        based           bit(1)                   level 2 in structure "vector_map" packed packed
                                                                                  unaligned dcl 8-245 in procedure "cobol_ddsyntax"
                                                                                  set ref 1596* 2007*
alphanum_edited           0(20)        based           bit(1)                   level 2 packed packed unaligned dcl 8-245 set ref
                                                                                  1672*
alphanum_lit                           based           structure                level 1 unaligned dcl 8-64
any_item                               based           char(1)                  array packed unaligned dcl 8-333 set ref 504 558 680
                                                                                  788 867 888 955 1617 1775 1777
anystring                              based           char(1000)               packed unaligned dcl 8-334 set ref 1779* 1779
arrpntr                         000171 automatic       fixed bin(17,0)          dcl 1113 set ref 1212* 1214 1221 1259 1265 1268
                                                                                  1291* 1291 1317 1343* 1343 1347 1355 1358 1364
                                                                                  1402 1409 1430 1689 1689 1689 1700
ascii_packed_dec_b        0(30)        based           bit(1)                   level 2 packed packed unaligned dcl 8-245 ref 1039
                                                                                  1091
ascii_packed_dec_h        0(29)        based           bit(1)                   level 2 packed packed unaligned dcl 8-245 ref 1039
                                                                                  1091
assoc_with_signed_num_display
                          2(11)        based           bit(1)                   level 2 packed packed unaligned dcl 8-245 set ref
                                                                                  751 1798*
ast_when_zero             1(17)        based           bit(1)                   level 2 packed packed unaligned dcl 8-245 set ref
                                                                                  1521*
auxbit                          000205 automatic       bit(1)                   packed unaligned dcl 1113 set ref 1575* 1577 1670*
                                                                                  1672
auxvector1                      000200 automatic       bit(32)                  packed unaligned dcl 1113 set ref 1347* 1351
auxvector2                      000201 automatic       bit(32)                  packed unaligned dcl 1113 set ref 1159* 1351
bin_16                    0(32)        based           bit(1)                   level 2 packed packed unaligned dcl 8-245 ref 1057
bin_18                    0(13)        based           bit(1)                   level 2 packed packed unaligned dcl 8-245 ref 1065
bin_32                    0(33)        based           bit(1)                   level 2 packed packed unaligned dcl 8-245 ref 1073
bin_36                    0(14)        based           bit(1)                   level 2 packed packed unaligned dcl 8-245 ref 1081
bit32_1                         004103 automatic       bit(32)                  packed unaligned dcl 3788 set ref 1034* 1042 1053
                                                                                  2412* 2414 2419
bit32_2                         004104 automatic       bit(32)                  packed unaligned dcl 3789 set ref 2417* 2419
bit72                                  based           bit(72)                  packed unaligned dcl 8-352 set ref 452* 1804 2412
                                                                                  2474 3223
bit9                            000367 automatic       bit(9)                   packed unaligned dcl 3693 set ref 123* 124 125* 126
                                                                                  1188* 1189 1211* 1212 1314* 1315
block_contain             0(01)        based           bit(1)                   level 2 packed packed unaligned dcl 8-212 ref 3040
bnw                     141            based           fixed bin(17,0)          level 2 dcl 3732 set ref 609 693* 1014
body                                   based           fixed bin(15,0)          level 2 dcl 17-22 ref 2295
body_int                  4            based           fixed bin(31,0)          level 2 dcl 17-22 ref 2295
bottom                    0(11)        based           bit(1)                   level 3 packed packed unaligned dcl 8-212 ref 2613
bwz                       1(03)        based           bit(1)                   level 2 packed packed unaligned dcl 8-245 set ref
                                                                                  396 1506* 1511* 1517* 1636* 1660* 2547
cd_clauses             2764            based           bit(12)                  level 2 packed packed unaligned dcl 3732 ref 3306
                                                                                  3306 3312 3312 3319 3326 3333 3340 3346 3353 3360
                                                                                  3367 3374 3381 3388
cd_initial             3056(06)        based           bit(1)                   level 2 packed packed unaligned dcl 3732 ref 3287
cd_input                  5(12)        based           bit(1)                   level 3 packed packed unaligned dcl 8-23 set ref
                                                                                  3294 3472*
cd_out_size                     000372 automatic       fixed bin(17,0)          dcl 3695 set ref 3301* 3304* 3306 3312
cd_output                 5(13)        based           bit(1)                   level 3 packed packed unaligned dcl 8-23 set ref
                                                                                  3395 3473*
cdno                    205            based           fixed bin(17,0)          level 2 dcl 3732 ref 666
cdtoken_ptr              34            based           pointer                  level 2 dcl 3732 set ref 114*
ch                              000224 automatic       char(1)                  packed unaligned dcl 1148 set ref 1417* 1419 1419*
                                                                                  1421 1421* 1424
ch36                                   parameter       varying char(36)         dcl 3600 ref 3589 3593 3593
ch_str                 1700            based           varying char(128)        level 2 dcl 3732 ref 1185
character_tbl                   000700 internal static char(1)                  array packed unaligned dcl 8-348 set ref 101* 102*
                                                                                  103* 104* 105* 106* 107* 109
chtbl                                  based           fixed bin(24,0)          array dcl 5-7 set ref 687*
chtbl_item                             based           fixed bin(24,0)          array dcl 5-11 set ref 1008*
class                     5            based           structure                level 2 packed packed unaligned dcl 8-23
cm_key                 2632(09)        based           char(5)                  level 2 packed packed unaligned dcl 3732 set ref
                                                                                  711* 713* 2847* 2849* 2873* 2875*
cm_ptr                   42            based           pointer                  level 2 dcl 3732 set ref 713* 715 2849* 2851 2875*
                                                                                  2877
cm_size                 177            based           fixed bin(17,0)          level 2 dcl 3732 set ref 713* 2849* 2875*
cma                                    based           fixed bin(24,0)          array dcl 5-8 set ref 3508*
cn_constant                            constant        fixed bin(17,0)          initial dcl 6-13 ref 548 947
cntbuf                                 based           fixed bin(24,0)          array dcl 5-9 set ref 654*
cobol_c_list                    000746 constant        entry                    external dcl 8-343 ref 490 1986 3161 3441 3521 3537
                                                                                  3571
cobol_cmfp                             defined         pointer                  dcl 3-21 set ref 713* 2849* 2875*
cobol_com_ptr                          defined         pointer                  dcl 3-25 ref 119 133 139 180 224 406 675 711 1042
                                                                                  1042 1185 1199 1404 1411 1561 1652 1824 1831 2193
                                                                                  2239 2241 2314 2319 2370 2447 2754 2798 2842 2847
                                                                                  3014 3153 3193 3193
cobol_ddact1                    000716 constant        entry                    external dcl 3715 ref 191 3575
cobol_ddact2                    000720 constant        entry                    external dcl 3716 ref 193
cobol_ddst                      000714 constant        entry                    external dcl 3714 ref 110
cobol_ext_$cobol_cmfp           000722 external static pointer                  dcl 3-20 ref 713 713 2849 2849 2875 2875
cobol_ext_$cobol_com_ptr        000724 external static pointer                  dcl 3-24 ref 119 119 133 133 139 139 180 180 224 224
                                                                                  406 406 675 675 711 711 1042 1042 1042 1042 1185
                                                                                  1185 1199 1199 1404 1404 1411 1411 1561 1561 1652
                                                                                  1652 1824 1824 1831 1831 2193 2193 2239 2239 2241
                                                                                  2241 2314 2314 2319 2319 2370 2370 2447 2447 2754
                                                                                  2754 2798 2798 2842 2842 2847 2847 3014 3014 3153
                                                                                  3153 3193 3193 3193 3193
cobol_ext_$cobol_m1fp           000726 external static pointer                  dcl 3-30 ref 3420 3420
cobol_ext_$cobol_name_fileno_ptr
                                000730 external static pointer                  dcl 3-40 set ref 1888* 1903* 1926*
cobol_ext_$cobol_ntfp           000732 external static pointer                  dcl 3-42 ref 536 536 543 543 568 568 593 593 616 616
                                                                                  810 810 816 816 847 847 883 883 896 896 912 912
                                                                                  918 918 940 940 941 941 966 966 1768 1768 1796
                                                                                  1796 2245 2245 2406 2406 2472 2472 2494 2494 2510
                                                                                  2510 2597 2597 2633 2633 2658 2658 3221 3221
cobol_ext_ddsyn$cobol_htbl      000742 external static structure                array level 1 unaligned dcl 4-14 set ref 456* 456
                                                                                  640* 640 685 685 772* 772 772 772 775 775 775 775
                                                                                  778 778 840 840 845 845 850 850 852 852 856 856
                                                                                  878 878 890 890 891 891 915 915 931 931 935 935
                                                                                  1006 1006 1006 1006 1010* 1010 1011* 1011 1012*
                                                                                  1012 1014* 1014 1016* 1016 1018* 1018 1019* 1019
                                                                                  1021* 1021 1024* 1024 1025* 1025 1026* 1026 1759
                                                                                  1759 1766 1766 1794 1794 1805 1805 1810* 1810 1810
                                                                                  1810 1813* 1813 1813 1813 1813 1813 2404 2404 2470
                                                                                  2470 2492 2492 2508 2508 2532 2532 2595 2595 2631
                                                                                  2631 2656 2656 3219 3219 3306 3306 3306 3306
cobol_ext_ddsyn$cobol_sv_ptr    000734 external static pointer                  dcl 4-6 ref 54 54
cobol_ext_ddsyn$cobol_wkbuf1_tbl
                                000736 external static structure                level 1 packed packed unaligned dcl 4-8 ref 111 111
                                                                                  652 652
cobol_ext_ddsyn$cobol_wkbuf2_tbl
                                000740 external static structure                level 1 packed packed unaligned dcl 4-11 ref 113 113
cobol_htbl                             defined         structure                array level 1 unaligned dcl 4-15 set ref 685 1006
cobol_imp_word$alphabet_name    000706 constant        entry                    external dcl 3667 ref 2262
cobol_imp_word$label_name       000710 constant        entry                    external dcl 3669 ref 2566
cobol_initstatic                000712 constant        entry                    external dcl 3713 ref 53
cobol_m1fp                             defined         pointer                  dcl 3-31 set ref 3420*
cobol_ntfp                             defined         pointer                  dcl 3-43 set ref 536* 543* 568* 593* 616* 810* 816*
                                                                                  847* 883* 896* 912* 918* 940* 941* 966* 1768*
                                                                                  1796* 2245* 2406* 2472* 2494* 2510* 2597* 2633*
                                                                                  2658* 3221*
cobol_pic_val_comp              000750 constant        entry                    external dcl 8-346 ref 505 560 868 957
cobol_sv_ptr                           defined         pointer                  dcl 4-7 ref 54
cobol_swf_get                   000752 constant        entry                    external dcl 8-354 ref 3420
cobol_syntax_trace_$initialize_phase
                                000704 constant        entry                    external dcl 299 ref 141
cobol_syntax_trace_$trace       000702 constant        entry                    external dcl 297 ref 154 173 234 248 263 281
cobol_usrwd                     000744 constant        entry                    external dcl 3782 ref 1958
cobol_vdwf_dget                 000754 constant        entry                    external dcl 8-355 ref 536 713 810 847 912 940 1768
                                                                                  1796 1888 1903 2245 2406 2472 2494 2510 2597 2633
                                                                                  2658 2849 2875 3221
cobol_vdwf_dput                 000756 constant        entry                    external dcl 8-356 ref 568 593 816 883 896 918 966
cobol_vdwf_sget                 000762 constant        entry                    external dcl 8-358 ref 543 941 1926
cobol_vdwf_sput                 000760 constant        entry                    external dcl 8-357 ref 616
cobol_wkbuf1_tbl                       defined         structure                level 1 packed packed unaligned dcl 4-9 set ref 652
cobol_wkbuf2_tbl                       defined         structure                level 1 packed packed unaligned dcl 4-12
code_set                 76            based           fixed bin(17,0)          level 2 in structure "file_table" dcl 20-25
                                                                                  in procedure "cobol_ddsyntax" set ref 718 2250*
                                                                                  2270*
code_set                  2(10)        based           bit(1)                   level 2 in structure "vector_map" packed packed
                                                                                  unaligned dcl 8-245 in procedure "cobol_ddsyntax"
                                                                                  set ref 417 716*
code_set_class1           2(03)        based           bit(1)                   level 2 packed packed unaligned dcl 8-245 set ref
                                                                                  422 436 718*
code_set_clause          33(35)        based           bit(1)                   level 2 packed packed unaligned dcl 20-25 set ref
                                                                                  716 2249* 2269*
column                    2            based           fixed bin(17,0)          level 2 in structure "record" dcl 8-10 in procedure
                                                                                  "cobol_ddsyntax" set ref 200* 367 374 426* 440*
                                                                                  508* 563* 604 871* 960* 1684* 2198 2352 2365 2365
                                                                                  3202 3439 3492* 3532
column                                 parameter       fixed bin(17,0)          dcl 3502 in procedure "diag" ref 3498 3512
column                    2            based           fixed bin(17,0)          level 2 in structure "message" dcl 8-85 in procedure
                                                                                  "cobol_ddsyntax" set ref 476* 3512*
column                    2     000411 internal static fixed bin(17,0)          level 2 in structure "lev_message" dcl 3604
                                                                                  in procedure "cobol_ddsyntax" set ref 3105* 3532*
                                                                                  3567*
column                    2            based           fixed bin(17,0)          level 2 in structure "rw" dcl 8-23 in procedure
                                                                                  "cobol_ddsyntax" set ref 2970 2989 3462*
column                    2            based           fixed bin(17,0)          level 2 in structure "data_name" dcl 9-16
                                                                                  in procedure "cobol_ddsyntax" set ref 660*
column                    1     000232 automatic       fixed bin(17,0)          array level 2 in structure "source_pos" dcl 3617
                                                                                  in procedure "cobol_ddsyntax" set ref 2970* 2989*
                                                                                  3105
comma                           004156 automatic       char(1)                  packed unaligned dcl 117 set ref 121* 123
communication_section
                          0(04)        based           bit(1)                   level 2 packed packed unaligned dcl 8-245 ref 2670
comp_end_sw            3057(26)        based           bit(1)                   level 2 packed packed unaligned dcl 3732 set ref 95*
                                                                                  207
comp_level              137            based           char(1)                  level 2 packed packed unaligned dcl 19-26 ref 180
                                                                                  224 1199 1824 1831 2193 2314 2319 2370 2447 2754
                                                                                  2798 3014 3153
conditioname                           based           structure                level 1 unaligned dcl 8-180
cset_name                 5(14)        based           bit(1)                   level 3 packed packed unaligned dcl 8-23 set ref
                                                                                  3474*
cslno                           000326 automatic       fixed bin(17,0)          dcl 3688 set ref 93*
currency                 17(09)        based           char(1)                  level 2 packed packed unaligned dcl 19-26 ref 1185
current_line                    000112 automatic       fixed bin(17,0)          level 2 dcl 313 set ref 135* 157* 157 161 195* 251
                                                                                  252* 256* 269 274* 292* 1819* 1819
data_name                              based           structure                level 1 unaligned dcl 9-16
data_record               0(04)        based           bit(1)                   level 2 packed packed unaligned dcl 8-212 ref 2922
                                                                                  3069
dd_clause                 5(11)        based           bit(1)                   level 3 packed packed unaligned dcl 8-23 set ref
                                                                                  2227 3471*
dd_static                       000664 internal static structure                level 1 unaligned dcl 3701
debug                   134(01)        based           bit(1)                   level 2 packed packed unaligned dcl 19-26 ref 675
                                                                                  3193
dec_comma               133(33)        based           bit(1)                   level 2 packed packed unaligned dcl 19-26 ref 119
def_line                 11            based           fixed bin(17,0)          level 2 dcl 9-16 set ref 659*
default_sign_type       134(12)        based           bit(3)                   level 2 packed packed unaligned dcl 19-26 ref 406
                                                                                  1042 1042
descr                                  based           bit(72)                  level 2 in structure "vectempd" packed packed
                                                                                  unaligned dcl 8-337 in procedure "cobol_ddsyntax"
                                                                                  set ref 1804*
descr                                  based           bit(72)                  level 2 in structure "vectord" packed packed
                                                                                  unaligned dcl 8-241 in procedure "cobol_ddsyntax"
                                                                                  ref 452
device                   47            based           fixed bin(17,0)          level 2 dcl 20-25 set ref 3079*
diag_no                         004100 automatic       fixed bin(15,0)          dcl 3778 set ref 1954* 1958* 1981 1983
diag_num                               parameter       fixed bin(17,0)          dcl 3502 in procedure "diag" set ref 3498 3519 3523*
diag_num                               parameter       fixed bin(17,0)          dcl 3547 in procedure "LEV_DIAG" set ref 3543 3553*
diag_num                               parameter       fixed bin(17,0)          dcl 3529 in procedure "lev_diag" ref 3526 3533
diag_num                               parameter       fixed bin(17,0)          dcl 3564 in procedure "LEV_DIAG_SAVED" ref 3558 3568
diag_ptr                        004052 automatic       pointer                  dcl 3765 set ref 1860* 1986*
diag_token                      004036 automatic       structure                level 1 unaligned dcl 3755 set ref 1860
dimensions                2            based           fixed bin(17,0)          level 2 dcl 11-5 ref 789 889 1776 2561
display                   0(27)        based           bit(1)                   level 2 packed packed unaligned dcl 8-245 set ref
                                                                                  388* 404 420 3226 3233
divide                                                 builtin function         dcl 3989 ref 1093 1945
dn_constant                            constant        fixed bin(17,0)          initial dcl 6-6 ref 670
dn_ptr                   30            based           pointer                  level 2 dcl 3732 set ref 111* 452 454 498 498 501
                                                                                  504 504 505* 508 508 528 560* 563 563 593* 593 613
                                                                                  614 626 630 640 657 658 659 660 661 662 664 666
                                                                                  668 669 670 675 675 675 678 678 678 680 680 682
                                                                                  731 734 737 737 737 741 762 764 784 788 788 790
                                                                                  802 813 814 836 844 849* 850 850 852 855 856 860
                                                                                  864 867 867 868* 871 871 878 881 881 888 888 891
                                                                                  891 893 893 898 904 957* 960 960 992* 1010 1012
                                                                                  1021 1049 1049 1059 1060 1061 1067 1068 1069 1075
                                                                                  1076 1077 1083 1084 1085 1093 1093 1097 1274 1281
                                                                                  1283 1283 1284 1284 1288 1288 1289 1289 1304 1342
                                                                                  1361 1361 1375 1375 1379 1379 1385 1450 1450 1464
                                                                                  1464 1609 1611 1611 1612 1612 1612 1614 1614 1614
                                                                                  1616 1617 1619 1630 1630 1636 1642 1642 1660 1757
                                                                                  1773 1774* 1775 1775 1781* 1788 1788 1789 1789
                                                                                  1790 1790 1790 2000 2002 2004 2507 2667 3306 3306
                                                                                  3312 3312
dnl                     175            based           fixed bin(17,0)          level 2 dcl 3732 set ref 361* 364 364 377* 668 669
                                                                                  669 670
do_rec                   30            based           char(5)                  level 2 in structure "data_name" packed packed
                                                                                  unaligned dcl 9-16 in procedure "cobol_ddsyntax"
                                                                                  set ref 662* 856* 1012
do_rec                    4(09)        defined         char(5)                  array level 2 in structure "cobol_htbl" packed
                                                                                  packed unaligned dcl 4-15 in procedure
                                                                                  "cobol_ddsyntax" set ref 856 1012*
do_rec_valid              6(01)        defined         bit(1)                   array level 2 packed packed unaligned dcl 4-15 set
                                                                                  ref 852
ebcdic_packed_dec         0(31)        based           bit(1)                   level 2 packed packed unaligned dcl 8-245 ref 1091
ecm                       5            based           char                     level 2 packed packed unaligned dcl 8-149 set ref
                                                                                  1404* 1406* 1411* 1413* 1424* 1451* 1465* 1534*
                                                                                  1540* 1561* 1631* 1654* 1717* 1727*
ed_constant                            constant        fixed bin(17,0)          initial dcl 6-9 ref 1612
edit_ptr                 26            based           fixed bin(17,0)          level 2 dcl 9-16 set ref 1611*
editlim                         000204 automatic       fixed bin(17,0)          dcl 1113 set ref 1157* 1385
editor                                 based           structure                level 1 unaligned dcl 8-149
elem_no_value             2(07)        based           bit(1)                   level 2 packed packed unaligned dcl 8-245 set ref
                                                                                  445* 448* 1746*
elementary                0(09)        based           bit(1)                   level 2 packed packed unaligned dcl 8-245 set ref
                                                                                  385 420 501 746* 2007*
end_dec                   5(04)        based           bit(1)                   level 3 packed packed unaligned dcl 8-23 ref 2453
exp_occurs               22(29)        based           bit(1)                   level 2 packed packed unaligned dcl 9-16 ref 881
exp_redefining           22(22)        based           bit(1)                   level 2 in structure "data_name" packed packed
                                                                                  unaligned dcl 9-16 in procedure "cobol_ddsyntax"
                                                                                  ref 630
exp_redefining            6(06)        defined         bit(1)                   array level 2 in structure "cobol_htbl" packed
                                                                                  packed unaligned dcl 4-15 in procedure
                                                                                  "cobol_ddsyntax" set ref 778 1025*
exp_redefining            1(22)        based           bit(1)                   level 2 in structure "vector_map" packed packed
                                                                                  unaligned dcl 8-245 in procedure "cobol_ddsyntax"
                                                                                  ref 734 768 1025
fb                                     based           fixed bin(17,0)          dcl 3684 ref 2256
fd                                     based           structure                level 1 unaligned dcl 3998
fd_clause                 5(10)        based           bit(1)                   level 3 packed packed unaligned dcl 8-23 set ref
                                                                                  2932 3470*
fd_clauses_ptr           52            based           pointer                  level 2 dcl 3732 ref 2606 2613 2742 2908 2915 2922
                                                                                  3033 3040 3047 3055 3062 3069 3076 3084
fd_ind                                 based           structure                level 1 packed packed unaligned dcl 8-212
fd_token                               based           structure                level 1 unaligned dcl 13-4
fh                      161            based           fixed bin(17,0)          level 2 dcl 3732 set ref 771* 772 772 775 775 778
                                                                                  778 781* 781 1756* 1759 1766 1794 1805 1810 1810
                                                                                  1812* 1812* 1813 1813 1813* 2531* 2532*
fig_con                   5(02)        based           bit(1)                   level 3 in structure "rw" packed packed unaligned
                                                                                  dcl 8-23 in procedure "cobol_ddsyntax" set ref
                                                                                  2451 2459 2681 2697 2715 3466*
fig_con                   0(02)        based           bit(1)                   level 3 in structure "alphainit" packed packed
                                                                                  unaligned dcl 8-134 in procedure "cobol_ddsyntax"
                                                                                  ref 576 973
fig_con_index             0(09)        based           bit(7)                   level 3 packed packed unaligned dcl 8-134 ref 578
                                                                                  975
fig_zero                  2(08)        based           bit(1)                   level 2 packed packed unaligned dcl 8-245 ref 412
file_count                      000422 internal static fixed bin(17,0)          level 2 in structure "FILE_REC_TAB" dcl 3657
                                                                                  in procedure "cobol_ddsyntax" set ref 77* 621
                                                                                  3649* 3649 3651
file_count               24            based           fixed bin(17,0)          level 2 in structure "fixed_common" dcl 19-26
                                                                                  in procedure "cobol_ddsyntax" ref 2842
file_ind                  1     000422 internal static bit(1)                   level 2 packed packed unaligned dcl 3657 set ref 76*
                                                                                  619 623* 3648*
file_key                  1(09) 000422 internal static char(5)                  array level 2 in structure "FILE_REC_TAB" packed
                                                                                  packed unaligned dcl 3657 in procedure
                                                                                  "cobol_ddsyntax" set ref 621* 3642 3651*
file_key                               based           structure                level 1 unaligned dcl 1-17 in procedure
                                                                                  "cobol_ddsyntax" set ref 70
file_key_area          3060            based           fixed bin(35,0)          array level 2 dcl 3732 set ref 57
file_key_size          3264            based           fixed bin(17,0)          level 2 dcl 3732 set ref 70*
file_no                  12            based           fixed bin(17,0)          level 2 dcl 13-4 set ref 2892*
file_num                 14            based           fixed bin(17,0)          level 2 dcl 9-16 set ref 664* 666*
file_number             203            based           fixed bin(17,0)          level 2 dcl 3732 ref 664 664 708 711
file_ptr               3272            based           pointer                  level 2 dcl 3732 set ref 57* 64 68
file_section             21            based           bit(1)                   level 2 in structure "data_name" packed packed
                                                                                  unaligned dcl 9-16 in procedure "cobol_ddsyntax"
                                                                                  set ref 452 1804 2412 2474 3223
file_section                           based           bit(1)                   level 2 in structure "vector_map" packed packed
                                                                                  unaligned dcl 8-245 in procedure "cobol_ddsyntax"
                                                                                  ref 708 2670
file_table                             based           structure                level 1 unaligned dcl 20-25
filedescr_offsets        25            based           char(5)                  array level 2 packed packed unaligned dcl 19-26 ref
                                                                                  711 2847
filler                    2(18)        based           bit(38)                  level 2 packed packed unaligned dcl 8-337 set ref
                                                                                  1806*
filler4                   5            based           bit(2)                   level 3 packed packed unaligned dcl 8-23 set ref
                                                                                  3465*
filler5                   5(05)        based           bit(3)                   level 3 packed packed unaligned dcl 8-23 set ref
                                                                                  3467*
filler6                   5(15)        based           bit(11)                  level 3 packed packed unaligned dcl 8-23 set ref
                                                                                  3475*
filler_flag                     000302 automatic       bit(1)                   packed unaligned dcl 3663 set ref 375* 2215* 3014
filler_item               0(10)        based           bit(1)                   level 2 packed packed unaligned dcl 8-245 set ref
                                                                                  379*
fillerx                   6(02)        based           bit(34)                  level 3 packed packed unaligned dcl 8-85 set ref
                                                                                  482* 3517*
filstring                       000212 automatic       char(30)                 packed unaligned dcl 1113 set ref 1156* 1717 1727
filstring_init                  000670 internal static char(30)                 packed unaligned dcl 3712 set ref 99* 1156
first_key                       004060 automatic       char(5)                  packed unaligned dcl 3767 set ref 61* 647* 1886
                                                                                  1888*
first_rec                       004074 automatic       bit(1)                   packed unaligned dcl 3774 set ref 60* 644 646*
fixbin15                        004133 automatic       fixed bin(17,0)          dcl 8-232 set ref 1722* 1727 1727 1729 1730 1738*
                                                                                  1740*
fixbin7_1                       004132 automatic       fixed bin(17,0)          dcl 8-231 set ref 1778* 1779 1779 1789
fixed                                                  builtin function         dcl 3989 ref 124 126 351 1189 1212 1257 1315 2066
                                                                                  2172 2337 2772
fixed_common                           based           structure                level 1 unaligned dcl 19-26
fixed_insert                           based           fixed bin(17,0)          level 2 dcl 8-149 set ref 1453* 1467* 1536* 1542*
                                                                                  1546* 1551* 1647* 1650*
fkey_ptr                 10            based           pointer                  level 2 dcl 3732 set ref 68* 69 70
float_insert              1            based           fixed bin(17,0)          level 2 dcl 8-149 set ref 1489* 1495* 1501*
fltchar                         000203 automatic       char(1)                  packed unaligned dcl 1113 set ref 1295 1341* 1631
                                                                                  1644 1646* 1650 1652* 1654
fltswitch1                      000175 automatic       bit(1)                   packed unaligned dcl 1113 set ref 1162* 1295 1338*
                                                                                  1575 1626
fltswitch2                      000176 automatic       bit(1)                   packed unaligned dcl 1113 set ref 1163* 1273* 1340*
                                                                                  1433 1440*
fltswitch3                      000177 automatic       bit(1)                   packed unaligned dcl 1113 set ref 1164* 1270 1272*
                                                                                  1575
fnumber                                parameter       fixed bin(17,0)          dcl 3639 ref 3635 3642
footing                   1            based           fixed bin(15,0)          level 2 in structure "linage_rec" dcl 17-22
                                                                                  in procedure "cobol_ddsyntax" ref 2295
footing                   0(09)        based           bit(1)                   level 3 in structure "fd_ind" packed packed
                                                                                  unaligned dcl 8-212 in procedure "cobol_ddsyntax"
                                                                                  ref 2606
footing_int               5            based           fixed bin(31,0)          level 2 dcl 17-22 ref 2295
fs_ind                    5(09)        based           bit(1)                   level 3 packed packed unaligned dcl 8-23 set ref
                                                                                  2819 2897 3469*
fstatus                         000366 automatic       bit(32)                  packed unaligned dcl 3692 set ref 536* 543* 545 568*
                                                                                  593* 616* 713* 810* 816* 847* 883* 896* 912* 918*
                                                                                  940* 941* 944 966* 1768* 1796* 2406* 2472* 2494*
                                                                                  2510* 2597* 2633* 2658* 2849* 2875* 3221* 3420*
                                                                                  3422 3425
ft_ptr                    2            based           pointer                  level 2 dcl 3732 set ref 715* 716 718 2249 2250 2269
                                                                                  2270 2788 2851* 2853 2853 2853 2856 2869 2873
                                                                                  2877* 2879 2879 2879 2882 3079 3079
h                       160            based           fixed bin(17,0)          level 2 dcl 3732 set ref 456 640 723* 751 768 771
                                                                                  840 845 850 852 856 878 890 891 915 931 935 994*
                                                                                  994 996 1005* 1005 1006 1010 1011 1012 1014 1016
                                                                                  1018 1019 1021 1024 1025 1026 1753 1756 2400 2404
                                                                                  2466 2470 2488 2492 2503 2508 2527 2531 2554 2591
                                                                                  2595 2627 2631 2652 2656 3215 3219
hash_table                      000376 automatic       pointer                  array dcl 3739 set ref 1857 1870* 2075 2076*
hash_table_ptr                  004046 automatic       pointer                  dcl 3765 set ref 1857* 1958*
hashno                          004213 automatic       fixed bin(17,0)          dcl 2015 set ref 2060* 2066* 2066 2072* 2072 2075
                                                                                  2076
i                               004105 automatic       fixed bin(17,0)          dcl 8-4 set ref 124* 127 128 459* 461 464 464 486*
                                                                                  1176* 1180 1182* 1182 1183 1188 1190 1204 1206*
                                                                                  1208* 1208 1211 1218 1223* 1223 1226 1229 1231
                                                                                  1231 1238* 1238 1241* 1241 1244 1247 1248* 1248
                                                                                  1251 1254 1257 1307 1446 1449* 1449 1460 1463*
                                                                                  1463 1867* 1870* 1876* 1879 1879* 2063* 2066*
                                                                                  2836* 2839* 2839 2842 2847 2864
ii                              000256 automatic       fixed bin(17,0)          dcl 3622 set ref 2936* 2939* 2942* 2945* 2948* 2951*
                                                                                  2954* 2957* 2960* 2963* 2969 2970 2979* 2982*
                                                                                  3098* 3101 3103 3105 3108*
image                    10            based           char                     level 2 packed packed unaligned dcl 8-85 set ref 484
indexed_by               22(09)        based           bit(1)                   level 2 in structure "data_name" packed packed
                                                                                  unaligned dcl 9-16 in procedure "cobol_ddsyntax"
                                                                                  ref 898 2635
indexed_by                1(09)        based           bit(1)                   level 2 in structure "vector_map" packed packed
                                                                                  unaligned dcl 8-245 in procedure "cobol_ddsyntax"
                                                                                  ref 795 2620
indexedno                 3            based           fixed bin(17,0)          array level 3 dcl 11-5 ref 801 903
indexname                              based           structure                level 1 unaligned dcl 8-160
indicators                      000373 automatic       structure                level 1 packed packed unaligned dcl 3697
info                      6            based           structure                level 2 in structure "message" packed packed
                                                                                  unaligned dcl 8-85 in procedure "cobol_ddsyntax"
info                      4            based           structure                level 2 in structure "numeric_lit" packed packed
                                                                                  unaligned dcl 8-46 in procedure "cobol_ddsyntax"
info                      0(08)        based           structure                level 2 in structure "alphainit" packed packed
                                                                                  unaligned dcl 8-134 in procedure "cobol_ddsyntax"
info                      6            based           structure                level 2 in structure "record" packed packed
                                                                                  unaligned dcl 8-10 in procedure "cobol_ddsyntax"
inftble                2767            based           bit(8)                   array level 2 packed packed unaligned dcl 3732 ref
                                                                                  1221 1259 1265 1331 1358 1364
inherit_value             2(09)        based           bit(1)                   level 2 packed packed unaligned dcl 8-245 ref 445
initial_ptr              25            based           fixed bin(17,0)          level 2 dcl 9-16 ref 501 504 864 867
initype                                based           structure                level 2 in structure "alphainit" packed packed
                                                                                  unaligned dcl 8-134 in procedure "cobol_ddsyntax"
initype                                based           structure                level 2 in structure "numinit" packed packed
                                                                                  unaligned dcl 8-113 in procedure "cobol_ddsyntax"
inscnter                        000174 automatic       fixed bin(17,0)          dcl 1113 set ref 1161* 1281 1304 1382* 1382 1452*
                                                                                  1452 1466* 1466 1572 1619
int_val                         000306 automatic       fixed bin(71,0)          dcl 3672 set ref 1824 2162* 2172* 2308 2308 2314
                                                                                  2337* 2339* 2348 2772* 2774* 2776 2776 3026
integer                   4            based           bit(1)                   level 3 packed packed unaligned dcl 8-46 ref 2705
interp                          000112 automatic       structure                level 1 unaligned dcl 313 set ref 137
item_length              16            based           fixed bin(24,0)          level 2 in structure "data_name" dcl 9-16
                                                                                  in procedure "cobol_ddsyntax" set ref 762 764 790
                                                                                  813 850* 891 1049* 1049 1059* 1067* 1075* 1083*
                                                                                  1093* 1093 1097* 1274 1281 1304 1342 1361* 1361
                                                                                  1385 1450* 1450 1464* 1464 1609 1612 1619 1636
                                                                                  1660 2000* 2000 3312 3312
item_length               1            defined         fixed bin(17,0)          array level 2 in structure "cobol_htbl" dcl 4-15
                                                                                  in procedure "cobol_ddsyntax" set ref 772* 772 850
                                                                                  890 915 3306 3306
item_signed               0(25)        based           bit(1)                   level 2 packed packed unaligned dcl 8-245 set ref
                                                                                  1036 1454* 1468* 1490* 1496* 1518* 1537* 1543*
                                                                                  1548* 1553* 1558* 1589
iw_key                   11            based           fixed bin(17,0)          level 2 dcl 3724 ref 2250
ix_ino                  212            based           fixed bin(17,0)          array level 2 dcl 3732 ref 804 824 906 926
ix_key                 2664(18)        based           char(5)                  array level 2 packed packed unaligned dcl 3732 ref
                                                                                  806 908
ixix                    210            based           fixed bin(17,0)          level 2 dcl 3732 set ref 705* 798 804 806 819* 819
                                                                                  821 824 898 906 908 921* 921 923 926
j                               004106 automatic       fixed bin(17,0)          dcl 8-5 set ref 126* 128 129 801* 804 824 903* 906
                                                                                  926 1167* 1396* 1396 1404 1406 1411 1413 1424
                                                                                  1429* 1429 1451 1465 1534 1540 1561 1716 1717 1727
                                                                                  1730* 1730 1734*
jump_index                6            based           fixed bin(17,0)          level 2 dcl 8-23 set ref 292 3476*
just_left                 1            based           bit(1)                   level 2 packed packed unaligned dcl 8-245 ref 2540
just_right                0(35)        based           bit(1)                   level 2 packed packed unaligned dcl 8-245 ref 2540
k                               004107 automatic       fixed bin(17,0)          dcl 8-6 set ref 802* 904* 916 1247* 1257 1257 1307*
                                                                                  1308* 1308 1311 1314 1322* 1322 1324 1326
key                       4            based           fixed bin(17,0)          level 2 dcl 8-23 set ref 170 2157 2717 2747 2826
                                                                                  2936 2939 2942 2945 2948 2951 2954 2957 2960 2963
                                                                                  3094 3464*
key_a                     1(07)        based           bit(1)                   level 2 in structure "vector_map" packed packed
                                                                                  unaligned dcl 8-245 in procedure "cobol_ddsyntax"
                                                                                  ref 792
key_a                    22(07)        based           bit(1)                   level 2 in structure "data_name" packed packed
                                                                                  unaligned dcl 9-16 in procedure "cobol_ddsyntax"
                                                                                  ref 737 893
key_d                    22(08)        based           bit(1)                   level 2 in structure "data_name" packed packed
                                                                                  unaligned dcl 9-16 in procedure "cobol_ddsyntax"
                                                                                  ref 737 893
key_d                     1(08)        based           bit(1)                   level 2 in structure "vector_map" packed packed
                                                                                  unaligned dcl 8-245 in procedure "cobol_ddsyntax"
                                                                                  ref 792
key_qual_size          3265            based           fixed bin(17,0)          level 2 dcl 3732 set ref 66*
keyed                                  based           fixed bin(17,0)          level 2 dcl 11-5 set ref 737* 792* 893* 1780*
label_field_num        3266            based           fixed bin(17,0)          level 2 dcl 3732 set ref 2566* 2570 2676 2676
label_format             53            based           fixed bin(17,0)          level 2 dcl 20-25 ref 2788
label_record              0(03)        based           bit(1)                   level 2 packed packed unaligned dcl 8-212 ref 3055
last_rec_ptr                    004066 automatic       pointer                  dcl 3771 set ref 1945* 1958*
length                    4            based           fixed bin(17,0)          level 2 in structure "editor" dcl 8-149 in procedure
                                                                                  "cobol_ddsyntax" set ref 1404 1406 1411 1413 1424
                                                                                  1451 1465 1534 1540 1561 1609* 1631 1654 1717 1727
length                    1            based           fixed bin(17,0)          level 2 in structure "alphainit" dcl 8-134
                                                                                  in procedure "cobol_ddsyntax" ref 582 979
length                    4            based           fixed bin(17,0)          level 2 in structure "picture" dcl 8-76 in procedure
                                                                                  "cobol_ddsyntax" ref 1165 1169 1172 1180 1229 1231
                                                                                  1231 1257 1295 1311 1324 1326 1341 1446 1460
length                    4            based           fixed bin(17,0)          level 2 in structure "numinit" dcl 8-113
                                                                                  in procedure "cobol_ddsyntax" ref 572 969
length                    7            based           fixed bin(17,0)          level 2 in structure "message" dcl 8-85 in procedure
                                                                                  "cobol_ddsyntax" set ref 472* 484 3518*
length                    5     002542 automatic       fixed bin(17,0)          array level 2 in structure "ref" dcl 3745
                                                                                  in procedure "cobol_ddsyntax" set ref 343* 1845*
length                   14            based           fixed bin(17,0)          level 2 in structure "procname" dcl 4004
                                                                                  in procedure "cobol_ddsyntax" ref 2032
length                   10            based           fixed bin(17,0)          level 2 in structure "numeric_lit" dcl 8-46
                                                                                  in procedure "cobol_ddsyntax" ref 2169 2193 2319
                                                                                  2705 3447
length                    5            based           fixed bin(17,0)          level 2 in structure "alphanum_lit" dcl 8-64
                                                                                  in procedure "cobol_ddsyntax" set ref 2692 2728
                                                                                  2731* 3238 3238 3449
lev1_mod                        000266 automatic       fixed bin(17,0)          initial array dcl 3631 set ref 3179 3631* 3631*
                                                                                  3631* 3631* 3631*
lev1_org                        000262 automatic       char(1)                  initial array packed unaligned dcl 3626 set ref 3180
                                                                                  3626* 3626* 3626* 3626* 3626*
lev2_mod                        000273 automatic       fixed bin(17,0)          initial array dcl 3633 set ref 3188 3633* 3633*
                                                                                  3633* 3633* 3633*
lev2_org                        000264 automatic       char(1)                  initial array packed unaligned dcl 3628 set ref 3189
                                                                                  3628* 3628* 3628* 3628* 3628*
lev_message                     000411 internal static structure                level 1 unaligned dcl 3604 set ref 80
lev_message_ptr                 000420 internal static pointer                  dcl 3614 set ref 80* 3161* 3537* 3571*
level                     3            based           structure                array level 2 in structure "occurs" unaligned
                                                                                  dcl 11-5 in procedure "cobol_ddsyntax"
level                    12            based           fixed bin(17,0)          level 2 in structure "data_name" dcl 9-16
                                                                                  in procedure "cobol_ddsyntax" set ref 626 661* 682
                                                                                  734 741 836 891 1010 2667 3306 3306
level                                  parameter       fixed bin(17,0)          dcl 2331 in procedure "level_number" ref 2328 2345
                                                                                  2345 2345 2348
level                                  defined         fixed bin(17,0)          array level 2 in structure "cobol_htbl" dcl 4-15
                                                                                  in procedure "cobol_ddsyntax" set ref 840 1010*
level_01                  0(07)        based           bit(1)                   level 2 packed packed unaligned dcl 8-245 set ref
                                                                                  699*
like_clause                     004073 automatic       bit(1)                   packed unaligned dcl 3774 set ref 703* 3265
like_key                        004054 automatic       char(5)                  packed unaligned dcl 3767 set ref 61* 1852 1903*
                                                                                  1951*
linage_is                 0(06)        based           bit(1)                   level 2 packed packed unaligned dcl 8-212 ref 3084
linage_ptr                6            based           pointer                  level 2 dcl 3732 ref 2295 2295 2295 2295
linage_rec                             based           structure                level 1 unaligned dcl 17-22
linage_type               0(08)        based           structure                level 2 packed packed unaligned dcl 8-212
line                      1     000411 internal static fixed bin(17,0)          level 2 in structure "lev_message" dcl 3604
                                                                                  in procedure "cobol_ddsyntax" set ref 3103* 3531*
                                                                                  3566*
line                            000232 automatic       fixed bin(17,0)          array level 2 in structure "source_pos" dcl 3617
                                                                                  in procedure "cobol_ddsyntax" set ref 2969* 2982*
                                                                                  2988* 3101 3103
line                      1            based           fixed bin(17,0)          level 2 in structure "data_name" dcl 9-16
                                                                                  in procedure "cobol_ddsyntax" set ref 658*
line                                   parameter       fixed bin(17,0)          dcl 3502 in procedure "diag" ref 3498 3511
line                      1            based           fixed bin(17,0)          level 2 in structure "rw" dcl 8-23 in procedure
                                                                                  "cobol_ddsyntax" set ref 2969 2988 3461*
line                      1            based           fixed bin(17,0)          level 2 in structure "message" dcl 8-85 in procedure
                                                                                  "cobol_ddsyntax" set ref 475* 3511*
line                      1            based           fixed bin(17,0)          level 2 in structure "record" dcl 8-10 in procedure
                                                                                  "cobol_ddsyntax" set ref 200* 365 371 426* 440*
                                                                                  508* 563* 603 871* 960* 1684* 2197 3438 3492* 3531
literal                  11            based           char                     level 2 packed packed unaligned dcl 8-46 ref 351
                                                                                  2172 2337 2772
ll01                   3056(04)        based           bit(1)                   level 2 packed packed unaligned dcl 3732 set ref
                                                                                  706* 2908
ltdp                      6            based           fixed bin(17,0)          level 2 dcl 8-46 ref 2341
m                               000170 automatic       fixed bin(17,0)          dcl 1113 set ref 1189* 1190
m1                              000253 constant        bit(64)                  initial array level 2 packed packed unaligned
                                                                                  dcl 3805 ref 464
m2                              000510 constant        bit(64)                  initial array level 2 packed packed unaligned
                                                                                  dcl 3895 ref 464
mask1x                 2764(12)        based           bit(32)                  level 2 packed packed unaligned dcl 3732 ref 1579
mask2x                 2765(08)        based           bit(32)                  level 2 packed packed unaligned dcl 3732 ref 1581
mask3x                 2766(04)        based           bit(32)                  level 2 packed packed unaligned dcl 3732 ref 1594
mask4x                          000206 automatic       bit(32)                  packed unaligned dcl 1113 set ref 1579* 1581 1594
mask_descr                      000746 constant        bit(72)                  initial packed unaligned dcl 8-327 ref 1804
mask_minivector                        constant        bit(18)                  initial packed unaligned dcl 8-330 ref 1805
mask_minivector_reverse                constant        bit(18)                  initial packed unaligned dcl 8-332 ref 1810 1813
matrix1                         000253 constant        structure                level 1 packed packed unaligned dcl 3805
matrix2                         000510 constant        structure                level 1 packed packed unaligned dcl 3895
max                       5            based           fixed bin(17,0)          array level 3 dcl 11-5 ref 2577 2584
max_supress               3            based           fixed bin(17,0)          level 2 dcl 8-149 set ref 1433* 1433 1478* 1478
                                                                                  1482* 1482 1487* 1487 1493* 1493 1499* 1499 1634
                                                                                  1656*
message                                based           structure                level 1 unaligned dcl 8-85
message_area                    004110 automatic       char(56)                 packed unaligned dcl 8-8 set ref 471 3505 3507
message_ptr                     004126 automatic       pointer                  dcl 8-9 set ref 471* 472 473 475 476 478 479 480 481
                                                                                  482 483 484 490* 3505* 3510 3511 3512 3513 3514
                                                                                  3515 3516 3517 3518 3519 3521*
mi_overlay                             based           structure                level 1 packed packed unaligned dcl 3985
mi_overlay_bit9                        based           bit(9)                   level 2 packed packed unaligned dcl 3985 set ref
                                                                                  486*
mi_overlay_part           0(09)        based           bit(128)                 level 2 packed packed unaligned dcl 3985 set ref
                                                                                  488*
min                       4            based           fixed bin(17,0)          array level 3 dcl 11-5 ref 2584
min_eof                3056(07)        based           bit(1)                   level 2 packed packed unaligned dcl 3732 set ref 287
                                                                                  2097 2993 3202 3427*
min_ptr                                based           pointer                  level 2 dcl 3732 set ref 153 159 167 170 200 200 247
                                                                                  262 280 292 343 344 344 346 351 351 364 365 367
                                                                                  371 374 426 426 440 440 603 604 1165 1169 1172
                                                                                  1180 1229 1231 1231 1257 1295 1311 1324 1326 1341
                                                                                  1446 1460 1684 1684 1845 1846 1846 1848 2104 2104
                                                                                  2157 2157 2166 2166 2169 2172 2193 2197 2198 2206
                                                                                  2223 2227 2234 2247 2262* 2319 2333 2337 2337 2341
                                                                                  2341 2341 2341 2352 2365 2365 2386 2433 2440 2451
                                                                                  2451 2453 2459 2459 2566* 2681 2681 2681 2681 2686
                                                                                  2690 2692 2697 2697 2702 2705 2705 2705 2712 2715
                                                                                  2715 2717 2725 2728 2731 2747 2747 2766 2772 2772
                                                                                  2794 2798 2819 2819 2826 2897 2897 2929 2932 2936
                                                                                  2939 2942 2945 2948 2951 2954 2957 2960 2963 2969
                                                                                  2970 2988 2989 2993 2993 3090 3094 3202 3238 3238
                                                                                  3238 3238 3294 3294 3395 3395 3420* 3438 3439 3441
                                                                                  3441* 3444 3444 3444 3444 3447 3447 3449 3449 3451
                                                                                  3451 3454 3457* 3461 3462 3463 3464 3465 3466 3467
                                                                                  3468 3469 3470 3471 3472 3473 3474 3475 3476 3492
                                                                                  3492 3531 3532
min_size_r              152            based           fixed bin(17,0)          level 2 dcl 3732 set ref 3420*
minivector                2            based           bit(18)                  level 2 in structure "vectord" packed packed
                                                                                  unaligned dcl 8-241 in procedure "cobol_ddsyntax"
                                                                                  ref 456 1026 1810
minivector                5(18)        defined         bit(18)                  array level 2 in structure "cobol_htbl" packed
                                                                                  packed unaligned dcl 4-15 in procedure
                                                                                  "cobol_ddsyntax" set ref 456* 878 1026* 1805 1810*
                                                                                  1810 1813* 1813 1813
minivector                2            based           bit(18)                  level 2 in structure "vectempd" packed packed
                                                                                  unaligned dcl 8-337 in procedure "cobol_ddsyntax"
                                                                                  set ref 1805*
mod                                                    builtin function         dcl 3989 ref 550 585 678 949 982 1614 1790 2072
mod_num                         000310 automatic       fixed bin(17,0)          dcl 3674 set ref 87* 226* 3116* 3141* 3156 3164*
                                                                                  3179* 3188* 3534 3539* 3550*
module                    6     000411 internal static fixed bin(17,0)          level 2 dcl 3604 set ref 3156* 3534* 3569*
msg_constant                           constant        fixed bin(17,0)          initial dcl 6-4 ref 473 3510
n                               000167 automatic       fixed bin(17,0)          dcl 1113 set ref 1315* 1317 1320 1331 1634* 1636
                                                                                  1660
name                    221            based           char                     level 2 in structure "alphabet_name" packed packed
                                                                                  unaligned dcl 3724 in procedure "cobol_ddsyntax"
                                                                                  ref 2247
name                     15            based           char(30)                 level 2 in structure "procname" packed packed
                                                                                  unaligned dcl 4004 in procedure "cobol_ddsyntax"
                                                                                  set ref 2034
name                     15            based           char(31)                 level 2 in structure "conditioname" packed packed
                                                                                  unaligned dcl 8-180 in procedure "cobol_ddsyntax"
                                                                                  set ref 2041
name                     34            based           char                     level 2 in structure "data_name" packed packed
                                                                                  unaligned dcl 9-16 in procedure "cobol_ddsyntax"
                                                                                  set ref 669* 2027
name                    103            based           char(32)                 level 2 in structure "file_table" packed packed
                                                                                  unaligned dcl 20-25 in procedure "cobol_ddsyntax"
                                                                                  ref 2853 2879
name                     14            based           char                     level 2 in structure "fd" packed packed unaligned
                                                                                  dcl 3998 in procedure "cobol_ddsyntax" set ref
                                                                                  2048
name                     14            based           char(31)                 level 2 in structure "fd_token" packed packed
                                                                                  unaligned dcl 13-4 in procedure "cobol_ddsyntax"
                                                                                  ref 2853 2879
name                     24            based           char(31)                 level 2 in structure "indexname" packed packed
                                                                                  unaligned dcl 8-160 in procedure "cobol_ddsyntax"
                                                                                  set ref 2054
name                      6     002542 automatic       char(30)                 array level 2 in structure "ref" packed packed
                                                                                  unaligned dcl 3745 in procedure "cobol_ddsyntax"
                                                                                  set ref 344* 1846*
name_size                33            based           fixed bin(17,0)          level 2 in structure "data_name" dcl 9-16
                                                                                  in procedure "cobol_ddsyntax" set ref 668* 669 675
                                                                                  2025 2027
name_size                14            based           fixed bin(17,0)          level 2 in structure "conditioname" dcl 8-180
                                                                                  in procedure "cobol_ddsyntax" ref 548 947 2039
name_size                13            based           fixed bin(17,0)          level 2 in structure "fd_token" dcl 13-4
                                                                                  in procedure "cobol_ddsyntax" ref 2048 2853 2853
                                                                                  2879 2879
name_size               220            based           fixed bin(17,0)          level 2 in structure "alphabet_name" dcl 3724
                                                                                  in procedure "cobol_ddsyntax" ref 2247
name_size                23            based           fixed bin(17,0)          level 2 in structure "indexname" dcl 8-160
                                                                                  in procedure "cobol_ddsyntax" ref 2052
name_size                24            based           fixed bin(17,0)          level 2 in structure "file_key" dcl 1-17
                                                                                  in procedure "cobol_ddsyntax" set ref 69*
name_size               102            based           fixed bin(17,0)          level 2 in structure "file_table" dcl 20-25
                                                                                  in procedure "cobol_ddsyntax" ref 2853 2853 2879
                                                                                  2879
name_size                13            based           fixed bin(17,0)          level 2 in structure "fd" dcl 3998 in procedure
                                                                                  "cobol_ddsyntax" ref 2047
name_string            1315            based           char(300)                level 2 packed packed unaligned dcl 3732 set ref
                                                                                  3457
next                                   based           char(5)                  level 2 packed packed unaligned dcl 20-25 ref 2869
                                                                                  2873
next_level              275            based           fixed bin(17,0)          level 2 dcl 3732 set ref 741 748 836 840 860 2100*
                                                                                  2107* 2182* 2200* 2289* 2312* 2778* 2824* 2900*
                                                                                  2997* 3006*
niv_constant                           constant        fixed bin(17,0)          initial dcl 6-7 ref 572 578 969 975
nl                      142            based           fixed bin(17,0)          level 2 dcl 3732 set ref 351 2172 2337 2772 3447*
no_of_88s               211            based           fixed bin(17,0)          level 2 dcl 3732 set ref 520 537 541* 541 597*
no_picture                2(06)        based           bit(1)                   level 2 packed packed unaligned dcl 8-245 set ref
                                                                                  757*
non_display_bits_mask           000752 constant        bit(32)                  initial packed unaligned dcl 3792 ref 388 1034 1798
non_elementary            0(08)        based           bit(1)                   level 2 in structure "vector_map" packed packed
                                                                                  unaligned dcl 8-245 in procedure "cobol_ddsyntax"
                                                                                  set ref 445 1001*
non_elementary           21(08)        based           bit(1)                   level 2 in structure "data_name" packed packed
                                                                                  unaligned dcl 9-16 in procedure "cobol_ddsyntax"
                                                                                  ref 454 498 528 640
not_found                       004072 automatic       bit(1)                   packed unaligned dcl 3774 set ref 1958* 1979
nsi                             000223 automatic       bit(1)                   packed unaligned dcl 1146 set ref 1177* 1185* 1194
nt_rec                    3            defined         char(5)                  array level 2 packed packed unaligned dcl 4-15 set
                                                                                  ref 640* 845 935 1014* 1016* 1766 1794 2404 2470
                                                                                  2492 2508 2595 2631 2656 3219
nt_size                 176            based           fixed bin(17,0)          level 2 dcl 3732 set ref 614* 616*
null                                                   builtin function         dcl 3989 ref 1870 1885 3454
null_key                        000754 constant        char(5)                  initial packed unaligned dcl 3710 ref 533 598 635
                                                                                  662 937 1014 1852 2869
num                                    parameter       fixed bin(17,0)          dcl 3022 in procedure "test_level_number" set ref
                                                                                  3019 3024* 3026
num                                    parameter       fixed bin(17,0)          dcl 3486 in procedure "DIAG" ref 3483 3489
num                       5     004036 automatic       fixed bin(17,0)          level 2 in structure "diag_token" dcl 3755
                                                                                  in procedure "cobol_ddsyntax" set ref 1981* 1983*
num                             000257 automatic       fixed bin(17,0)          dcl 3622 in procedure "cobol_ddsyntax" set ref 3110*
                                                                                  3114* 3119* 3123* 3127* 3131* 3135* 3139* 3144*
                                                                                  3148* 3158
number                    5            based           fixed bin(17,0)          level 2 in structure "message" dcl 8-85 in procedure
                                                                                  "cobol_ddsyntax" set ref 483* 3519*
number                    5     000411 internal static fixed bin(17,0)          level 2 in structure "lev_message" dcl 3604
                                                                                  in procedure "cobol_ddsyntax" set ref 3158* 3533*
                                                                                  3568*
numeric                                based           bit(1)                   level 3 in structure "numinit" packed packed
                                                                                  unaligned dcl 8-113 in procedure "cobol_ddsyntax"
                                                                                  ref 572 969
numeric                   0(17)        based           bit(1)                   level 2 in structure "vector_map" packed packed
                                                                                  unaligned dcl 8-245 in procedure "cobol_ddsyntax"
                                                                                  set ref 390* 396 400* 404 412 430 1036 1587* 1798
numeric_edited            0(18)        based           bit(1)                   level 2 packed packed unaligned dcl 8-245 set ref
                                                                                  399* 1624*
numeric_lit                            based           structure                level 1 unaligned dcl 8-46
numeric_usage_bits_mask         000750 constant        bit(32)                  initial packed unaligned dcl 3797 ref 390
numinit                                based           structure                level 1 unaligned dcl 8-113
numlits                  13            based           fixed bin(17,0)          level 2 dcl 8-180 ref 552 951
o_bit                     0(09)        based           char(1)                  level 2 packed packed unaligned dcl 321 ref 177 180
                                                                                  222 224
obj_dec_comma           134(11)        based           bit(1)                   level 2 packed packed unaligned dcl 19-26 ref 1404
                                                                                  1411
object_sign             146(27)        based           char(1)                  level 2 packed packed unaligned dcl 19-26 ref 1561
                                                                                  1652
occ_constant                           constant        fixed bin(17,0)          initial dcl 6-10 ref 1778
occ_dim_constant                       constant        fixed bin(17,0)          initial dcl 6-11 ref 1778
occno                     2            defined         fixed bin(17,0)          array level 2 dcl 4-15 set ref 775 891 1011*
occurs                                 based           structure                level 1 unaligned dcl 11-5
occurs_clause             1(29)        based           bit(1)                   level 2 in structure "vector_map" packed packed
                                                                                  unaligned dcl 8-245 in procedure "cobol_ddsyntax"
                                                                                  ref 762 784 1018 1759 2554
occurs_clause             6(02)        defined         bit(1)                   array level 2 in structure "cobol_htbl" packed
                                                                                  packed unaligned dcl 4-15 in procedure
                                                                                  "cobol_ddsyntax" set ref 775 1018*
occurs_do                22(06)        based           bit(1)                   level 2 in structure "data_name" packed packed
                                                                                  unaligned dcl 9-16 in procedure "cobol_ddsyntax"
                                                                                  ref 852 860
occurs_do                 1(06)        based           bit(1)                   level 2 in structure "vector_map" packed packed
                                                                                  unaligned dcl 8-245 in procedure "cobol_ddsyntax"
                                                                                  ref 748 1019
occurs_ext                6(04)        defined         bit(1)                   array level 2 packed packed unaligned dcl 4-15 set
                                                                                  ref 1021* 1759
occurs_ptr               27            based           fixed bin(17,0)          level 2 dcl 9-16 set ref 737 784 788 881 888 1021
                                                                                  1770 1775 1788*
odim                    155            based           fixed bin(17,0)          level 2 dcl 3732 set ref 724* 789* 790 801 889* 890
                                                                                  903 1751* 1776* 1778 1785 2577 2584 2584
odo_switch                6(03)        defined         bit(1)                   array level 2 packed packed unaligned dcl 4-15 set
                                                                                  ref 1019*
offset                   24            based           fixed bin(24,0)          level 2 in structure "data_name" dcl 9-16
                                                                                  in procedure "cobol_ddsyntax" set ref 731* 802 814
                                                                                  904
offset                   14            based           fixed bin(24,0)          level 2 in structure "indexname" dcl 8-160
                                                                                  in procedure "cobol_ddsyntax" set ref 814* 916*
offset_ct                57            based           fixed bin(24,0)          level 2 dcl 3732 set ref 722* 731 734 766* 766 891*
org                             000312 automatic       fixed bin(17,0)          dcl 3674 set ref 1819 2856* 2882* 2894* 3179 3180
                                                                                  3188 3189
organization             43            based           fixed bin(17,0)          level 2 dcl 20-25 set ref 2856 2882 3079*
p                               000165 automatic       fixed bin(17,0)          dcl 1113 set ref 1399* 1404 1406 1411 1413 1424*
para                      6            based           bit(1)                   level 3 packed packed unaligned dcl 8-85 set ref
                                                                                  480* 3515*
pdn_occ_ptr                     004130 automatic       pointer                  dcl 8-112 set ref 1775* 1776 1779
period                          004157 automatic       char(1)                  packed unaligned dcl 117 set ref 122* 125
phase_name               15(27)        based           char(6)                  level 2 packed packed unaligned dcl 19-26 set ref
                                                                                  133*
pic_array                              based           char(1)                  array packed unaligned dcl 1151 ref 1417
pic_ch                          000222 automatic       char(1)                  packed unaligned dcl 1146 set ref 1183* 1185 1185
pic_has_ast               0(24)        based           bit(1)                   level 2 packed packed unaligned dcl 8-245 set ref
                                                                                  1484* 1504* 1509* 1514*
pic_has_l                 0(15)        based           bit(1)                   level 2 packed packed unaligned dcl 8-245 set ref
                                                                                  1529*
pic_has_p                 0(23)        based           bit(1)                   level 2 packed packed unaligned dcl 8-245 set ref
                                                                                  1279*
pic_has_s                 2(12)        based           bit(1)                   level 2 packed packed unaligned dcl 8-245 set ref
                                                                                  404 433 1039 1556* 1798
pic_image                       000124 automatic       char(128)                packed unaligned dcl 1113 set ref 1172* 1183 1188
                                                                                  1190* 1204* 1211 1226 1244 1251 1254 1314
pic_integer               1(16)        based           bit(1)                   level 2 packed packed unaligned dcl 8-245 set ref
                                                                                  1099* 1584*
pic_string_ptr                  000226 automatic       pointer                  dcl 1148 set ref 1165* 1417
pic_suff_bits_mask              000751 constant        bit(32)                  initial packed unaligned dcl 3795 ref 757
pic_unsigned              2            based           bit(1)                   level 2 packed packed unaligned dcl 8-245 set ref
                                                                                  1589*
piccounter1                     000172 automatic       fixed bin(17,0)          dcl 1113 set ref 1217* 1233* 1233 1257* 1257 1283
                                                                                  1284 1288 1289 1301 1361 1369 1375 1379 1382 1399
                                                                                  1429 1433 1478 1482 1487 1493 1499
piccounter2                     000173 automatic       fixed bin(17,0)          dcl 1113 set ref 1160* 1369* 1369 1390 1396 1397*
                                                                                  1603 1717 1717 1717 1723
picptr                          000210 automatic       pointer                  dcl 1113 set ref 1166* 1617* 1676
picture                                based           structure                level 1 unaligned dcl 8-76
picture_clause            2(01)        based           bit(1)                   level 2 packed packed unaligned dcl 8-245 set ref
                                                                                  757 1106* 2007* 2379
places_left              17            based           fixed bin(17,0)          level 2 dcl 9-16 set ref 850* 1061* 1069* 1077*
                                                                                  1085* 1283* 1283 1289* 1289 1379* 1379 1630* 1630
                                                                                  2002* 2002
places_right             20            based           fixed bin(17,0)          level 2 dcl 9-16 set ref 1060* 1068* 1076* 1084*
                                                                                  1284* 1284 1288* 1288 1375* 1375 1642* 1642 2004*
                                                                                  2004
pre_end_sw             3057(25)        based           bit(1)                   level 2 packed packed unaligned dcl 3732 set ref 94*
                                                                                  204 3431*
prectble               2776(04)        based           bit(32)                  array level 2 packed packed unaligned dcl 3732 ref
                                                                                  1347
prev_qual_key          3260            based           char(5)                  level 2 packed packed unaligned dcl 3732 set ref 73*
prev_rec                  6            based           pointer                  level 2 dcl 3724 set ref 2256
prev_rec_ptr                    004062 automatic       pointer                  dcl 3771 set ref 1885* 1911* 1939* 2079 2080*
procname                               based           structure                level 1 unaligned dcl 4004
propvector                      000202 automatic       bit(32)                  packed unaligned dcl 1113 set ref 1158* 1290* 1333
                                                                                  1333 1347 1355* 1373 1373 1524 1579 1584 1622 1628
                                                                                  1639 1660 1670 1670 1672
ptr1                     16            based           pointer                  level 2 dcl 3732 set ref 504* 505* 558* 560* 572 572
                                                                                  576 578 582 680* 737 788* 789 790 792 801 867*
                                                                                  868* 888* 889 890 893 903 955* 957* 969 969 973
                                                                                  975 979 1166 1274 1342 1404 1406 1411 1413 1424
                                                                                  1433 1433 1451 1453 1465 1467 1478 1478 1482 1482
                                                                                  1487 1487 1489 1493 1493 1495 1499 1499 1501 1524
                                                                                  1534 1536 1540 1542 1546 1551 1561 1609 1631 1631
                                                                                  1634 1634 1647 1650 1654 1654 1655 1656 1676* 1717
                                                                                  1727 1777* 1779 1780 2561 2577 2584 2584
ptr4                     46            based           pointer                  level 2 dcl 3732 set ref 484* 486 488 652* 654 685*
                                                                                  687 1006* 1008 3507* 3508
ptr5                     44            based           pointer                  level 2 dcl 3732 ref 379 385 388 390 396 396 399 400
                                                                                  404 404 404 404 406 408 408 408 412 412 412 415
                                                                                  417 420 420 422 430 433 433 436 445 445 445 448
                                                                                  452 456 461 501 699 708 716 718 734 746 748 751
                                                                                  753 754 757 757 762 768 784 792 792 795 1001 1018
                                                                                  1019 1025 1026 1036 1036 1039 1039 1039 1039 1042
                                                                                  1057 1065 1073 1081 1091 1091 1091 1097 1099 1106
                                                                                  1279 1454 1468 1484 1490 1496 1504 1506 1509 1511
                                                                                  1514 1517 1518 1521 1529 1531 1537 1543 1548 1553
                                                                                  1556 1558 1584 1587 1589 1589 1594 1596 1624 1636
                                                                                  1660 1672 1674 1746 1746 1759 1798 1798 1798 1810
                                                                                  2007 2007 2007 2379 2393 2426 2481 2520 2540 2540
                                                                                  2547 2554 2620 2670 2670 3226 3233
ptr6                            004140 automatic       pointer                  dcl 8-336 set ref 1802* 1804 1805 1806
ptr_to_char_tbl          50            based           pointer                  level 2 dcl 3732 set ref 109*
qual_ptr               3276            based           pointer                  level 2 dcl 3732 set ref 64* 65 66
qual_rec                               based           structure                level 1 unaligned dcl 3718 set ref 66
r                               000166 automatic       fixed bin(17,0)          dcl 1113 set ref 1616* 1617
rdf_01_sav             2646(27)        based           char(5)                  level 2 packed packed unaligned dcl 3732 set ref
                                                                                  630* 635*
rec_key                         004056 automatic       char(5)                  packed unaligned dcl 3767 set ref 1886* 1926* 1951
rec_ptr                         004064 automatic       pointer                  dcl 3771 in procedure "cobol_ddsyntax" set ref 1888*
                                                                                  1903* 1911 1926* 1939 1945 2023 2025 2027 2030
                                                                                  2032 2034 2037 2039 2041 2044 2044 2047 2048 2050
                                                                                  2052 2054 2075 2076 2079 2080
rec_ptr                   2     000112 automatic       pointer                  level 2 in structure "interp" dcl 313 in procedure
                                                                                  "cobol_ddsyntax" set ref 153* 159* 247* 262* 280*
rec_size                        004070 automatic       fixed bin(17,0)          dcl 3773 set ref 1888* 1903* 1926* 1945
record                                 based           structure                level 1 unaligned dcl 8-10
record_contain            0(02)        based           bit(1)                   level 2 packed packed unaligned dcl 8-212 ref 2915
                                                                                  3047
recording_mode                         based           bit(1)                   level 2 packed packed unaligned dcl 8-212 ref 3033
ref                             002542 automatic       structure                array level 1 unaligned dcl 3745 set ref 1879
ref_table                       002376 automatic       pointer                  array dcl 3742 set ref 1859 1879*
ref_table_ptr                   004050 automatic       pointer                  dcl 3765 set ref 1859* 1958*
ref_table_size                  004101 automatic       fixed bin(15,0)          dcl 3778 set ref 337* 1839* 1839 1845 1846 1848
                                                                                  1958*
rename_object_ptr               004076 automatic       pointer                  dcl 3776 set ref 1958* 2000 2002 2004
rep                       6(01)        based           bit(1)                   level 3 in structure "record" packed packed
                                                                                  unaligned dcl 8-10 in procedure "cobol_ddsyntax"
                                                                                  ref 3444
rep                       6(01)        based           bit(1)                   level 3 in structure "message" packed packed
                                                                                  unaligned dcl 8-85 in procedure "cobol_ddsyntax"
                                                                                  set ref 481* 3516*
report_is                 0(05)        based           bit(1)                   level 2 packed packed unaligned dcl 8-212 ref 2908
                                                                                  3076
res                       0(01) 000373 automatic       bit(1)                   level 2 packed packed unaligned dcl 3697 set ref
                                                                                  2310 2341* 2343* 2355
rnt_key                2633(18)        based           char(5)                  level 2 packed packed unaligned dcl 3732 set ref
                                                                                  531* 536* 543* 568* 806* 810* 816* 845* 847* 883*
                                                                                  896* 908* 912* 918* 935* 937 940* 941* 966* 1766*
                                                                                  1768* 1794* 1796* 2404* 2406* 2470* 2472* 2492*
                                                                                  2494* 2508* 2510* 2595* 2597* 2631* 2633* 2656*
                                                                                  2658* 3219* 3221*
rnt_ptr                  12            based           pointer                  level 2 dcl 3732 set ref 536* 543* 548 552 558 568*
                                                                                  613* 616* 810* 812 816* 847* 849 883* 896* 912*
                                                                                  914 918* 940* 941* 944 947 951 955 966* 1768* 1770
                                                                                  1774 1796* 1804 2406* 2412 2472* 2474 2494* 2496
                                                                                  2510* 2512 2514 2597* 2599 2633* 2635 2635 2658*
                                                                                  2660 3221* 3223
rnt_size                151            based           fixed bin(17,0)          level 2 dcl 3732 set ref 536* 543* 568* 810* 816*
                                                                                  847* 883* 896* 912* 918* 940* 941* 966* 1768*
                                                                                  1796* 2406* 2472* 2494* 2510* 2597* 2633* 2658*
                                                                                  3221*
rtdp                      7            based           fixed bin(17,0)          level 2 dcl 8-46 ref 2166 2341 2341
run                       4     000411 internal static fixed bin(17,0)          level 2 in structure "lev_message" dcl 3604
                                                                                  in procedure "cobol_ddsyntax" set ref 85*
run                       4     004036 automatic       fixed bin(17,0)          level 2 in structure "diag_token" dcl 3755
                                                                                  in procedure "cobol_ddsyntax" set ref 1864*
run3                      4            based           fixed bin(17,0)          level 2 dcl 8-85 set ref 479* 3514*
rw                                     based           structure                level 1 unaligned dcl 8-23
s_bit                                  based           char(1)                  level 2 packed packed unaligned dcl 321 ref 210 266
s_col                     3     000664 internal static fixed bin(17,0)          level 2 dcl 3701 set ref 476 604* 2198*
s_exit                    3            based           fixed bin(17,0)          level 2 dcl 321 ref 195 292
s_lin                     2     000664 internal static fixed bin(17,0)          level 2 dcl 3701 set ref 475 603* 2197*
save_01                2644(09)        based           char(5)                  level 2 packed packed unaligned dcl 3732 set ref
                                                                                  634*
save_cdo                206            based           fixed bin(17,0)          level 2 dcl 3732 ref 3301 3304
save_column             300            based           fixed bin(17,0)          level 2 dcl 3732 set ref 367* 660
save_dname             1670(09)        based           char(30)                 level 2 packed packed unaligned dcl 3732 set ref
                                                                                  363* 364* 378* 669
save_j                          000314 automatic       fixed bin(17,0)          dcl 3674 set ref 1716* 1734
save_last_column          1     000664 internal static fixed bin(17,0)          level 2 dcl 3701 set ref 2084* 3418*
save_last_line                  000664 internal static fixed bin(17,0)          level 2 dcl 3701 set ref 2084* 3416*
save_level              276            based           fixed bin(17,0)          level 2 dcl 3732 set ref 351* 355* 661
save_line               172            based           fixed bin(17,0)          level 2 dcl 3732 set ref 365* 658 659
save_line_for66         173            based           fixed bin(17,0)          level 2 dcl 3732 set ref 725*
save_occno              174            based           fixed bin(17,0)          level 2 dcl 3732 ref 764 1011
save_offsets             60            based           fixed bin(24,0)          array level 2 dcl 3732 set ref 734* 891
save_ptr                 20            based           pointer                  level 2 dcl 3732 set ref 844* 992 1773* 1777 1781
save_switch_88         3057(24)        based           bit(1)                   level 2 packed packed unaligned dcl 3732 set ref 515
                                                                                  518* 1024
save_w2                  36            based           pointer                  level 2 dcl 3732 set ref 808* 818 910* 920
save_wkey              2641(27)        based           char(5)                  level 2 packed packed unaligned dcl 3732 set ref 531
                                                                                  533 593* 598* 1016
saved_column                    000301 automatic       fixed bin(17,0)          dcl 3663 set ref 374* 3567
saved_line                      000300 automatic       fixed bin(17,0)          dcl 3663 set ref 371* 3566
se                              000325 automatic       fixed bin(17,0)          dcl 3687 set ref 92*
section_header            5(08)        based           bit(1)                   level 3 packed packed unaligned dcl 8-23 set ref
                                                                                  2104 2993 3468*
section_ind            3057(12)        based           bit(8)                   level 2 packed packed unaligned dcl 3732 ref 2115
                                                                                  2122 2129 2136 2143 2150 2812 3273 3280
shared_var                             based           structure                level 1 unaligned dcl 3732
sign                      4(09)        based           char(1)                  level 2 packed packed unaligned dcl 8-46 ref 2341
                                                                                  2705
sign_clause               2(02)        based           bit(1)                   level 2 packed packed unaligned dcl 8-245 ref 2481
sign_clause_occurred     22(19)        based           bit(1)                   level 2 packed packed unaligned dcl 9-16 ref 878
sign_separate             0(26)        based           bit(1)                   level 2 packed packed unaligned dcl 8-245 set ref
                                                                                  408* 433 754* 1039
sign_type                22(13)        based           bit(3)                   level 2 in structure "data_name" packed packed
                                                                                  unaligned dcl 9-16 in procedure "cobol_ddsyntax"
                                                                                  ref 2496 2507 2512 2514
sign_type                 1(13)        based           bit(3)                   level 2 in structure "vector_map" packed packed
                                                                                  unaligned dcl 8-245 in procedure "cobol_ddsyntax"
                                                                                  set ref 404 406* 408 408 753* 1042
sign_type_temp         3057(21)        based           bit(3)                   level 2 packed packed unaligned dcl 3732 set ref
                                                                                  2507* 2514
size                            000411 internal static fixed bin(17,0)          level 2 in structure "lev_message" dcl 3604
                                                                                  in procedure "cobol_ddsyntax" set ref 83*
size                                                   builtin function         dcl 3989 in procedure "cobol_ddsyntax" ref 66 70
size                                   based           fixed bin(17,0)          level 2 in structure "message" dcl 8-85 in procedure
                                                                                  "cobol_ddsyntax" set ref 473* 3510*
size                            002542 automatic       fixed bin(17,0)          array level 2 in structure "ref" dcl 3745
                                                                                  in procedure "cobol_ddsyntax" set ref 346* 1848*
size                            004036 automatic       fixed bin(17,0)          level 2 in structure "diag_token" dcl 3755
                                                                                  in procedure "cobol_ddsyntax" set ref 1863*
size                      2            based           fixed bin(17,0)          level 2 in structure "qual_rec" dcl 3718
                                                                                  in procedure "cobol_ddsyntax" set ref 65*
size                                   based           fixed bin(17,0)          level 2 in structure "data_name" dcl 9-16
                                                                                  in procedure "cobol_ddsyntax" set ref 593* 614
                                                                                  670* 675* 675 678* 678 678 680 1611 1612* 1612
                                                                                  1614* 1614 1614 1616 1757 1788 1789* 1789 1790*
                                                                                  1790 1790
source_pos                      000232 automatic       structure                array level 1 unaligned dcl 3617
stack                           000327 automatic       fixed bin(17,0)          array dcl 3689 set ref 251* 256 274
stack_index                     000365 automatic       fixed bin(17,0)          dcl 3690 set ref 55* 239* 239 242 251 256 270* 270
                                                                                  274 284* 284
start_supress             2            based           fixed bin(17,0)          level 2 dcl 8-149 set ref 1274* 1342* 1524* 1631
                                                                                  1634 1654 1655*
status                          004102 automatic       bit(32)                  packed unaligned dcl 3786 set ref 1888* 1903* 1920*
                                                                                  1923 1926* 1934
stopper                2632            based           char(1)                  level 2 packed packed unaligned dcl 3732 ref 1204
store                           004160 automatic       char(1)                  packed unaligned dcl 117 set ref 127* 129
string                    6            based           char                     level 2 in structure "alphanum_lit" packed packed
                                                                                  unaligned dcl 8-64 in procedure "cobol_ddsyntax"
                                                                                  ref 3238
string                                 based           char(30)                 packed unaligned dcl 2020 in procedure "form_chains"
                                                                                  ref 2066
string                    5            based           char                     level 2 in structure "picture" packed packed
                                                                                  unaligned dcl 8-76 in procedure "cobol_ddsyntax"
                                                                                  set ref 1165 1172 1231 1231 1257 1295 1326 1341
                                                                                  1446 1460
string_ptr                4            based           pointer                  level 2 in structure "procname" dcl 4004
                                                                                  in procedure "cobol_ddsyntax" set ref 2075* 2079*
string_ptr                      004214 automatic       pointer                  dcl 2017 in procedure "form_chains" set ref 2027*
                                                                                  2034* 2041* 2048* 2054* 2066
string_size                     004212 automatic       fixed bin(17,0)          dcl 2015 set ref 2025* 2032* 2039* 2047* 2052* 2063
struc_length             20            based           fixed bin(17,0)          level 2 dcl 8-160 set ref 813* 915*
struclength               6            based           fixed bin(17,0)          array level 3 dcl 11-5 set ref 790* 890*
subscripted              22(05)        based           bit(1)                   level 2 packed packed unaligned dcl 9-16 ref 2599
                                                                                  2635
substr                                                 builtin function         dcl 3989 set ref 344 356* 364* 364 388 390 486 545
                                                                                  669* 669 757 878 944 1034 1183 1188 1190* 1204*
                                                                                  1211 1221 1226 1231 1231 1244 1244 1251 1251 1254
                                                                                  1257 1259 1265 1290* 1295 1314 1326 1331 1333 1333
                                                                                  1341 1355* 1358 1364 1373 1373 1404* 1406* 1411*
                                                                                  1413* 1424* 1446 1451* 1460 1465* 1524 1534* 1540*
                                                                                  1561* 1584 1622 1628 1631* 1639 1654* 1660 1670
                                                                                  1670 1672 1717* 1717 1727* 1727 1779* 1779 1798
                                                                                  1846 2066 2115 2122 2129 2136 2143 2150 2412 2417
                                                                                  2474 2812 2853 2853 2879 2879 3223 3238 3273 3280
                                                                                  3306 3306 3312 3312 3319 3326 3333 3340 3346 3353
                                                                                  3360 3367 3374 3381 3388 3422 3425
sv_ptr_auto                     000374 automatic       pointer                  dcl 3731 set ref (more) 127 128 128 129 554 558 558
                                                                                  558 560 560 560 563 563 563 563 566 568 568 568
                                                                                  569 572 572 572 572 576 578 578 578 580 580 582
                                                                                  582 582 585 585 585 587 590 590 593 593 593 597
                                                                                  598 603 604 609 613 613 614 614 616 616 616 621
                                                                                  626 630 630 630 634 634 635 640 640 640 647 652
                                                                                  654 657 658 658 659 659 660 660 661 661 662 664
                                                                                  664 664 666 666 668 668 669 669 669 669 670 670
                                                                                  675 675 675 678 678 678 680 680 680 682 685 687
                                                                                  693 699 705 706 708 708 711 711 713 713 713 715
                                                                                  715 716 716 718 718 722 723 724 725 731 731 734
                                                                                  734 734 734 737 737 737 737 741 741 746 748 748
                                                                                  751 751 753 754 757 757 757 762 762 762 764 764
                                                                                  764 766 766 766 768 768 771 771 772 772 772 775
                                                                                  775 775 775 778 778 781 781 784 784 788 788 788
                                                                                  789 789 790 790 790 792 792 792 795 798 801 801
                                                                                  802 804 804 806 806 806 808 808 810 810 810 812
                                                                                  812 813 813 814 814 816 816 816 818 818 819 819
                                                                                  821 824 824 836 836 840 840 844 844 845 845 847
                                                                                  847 847 849 849 850 850 850 852 852 855 856 856
                                                                                  860 860 864 867 867 867 868 868 868 871 871 871
                                                                                  871 874 878 878 881 881 883 883 883 888 888 888
                                                                                  889 889 890 890 890 891 891 891 891 891 893 893
                                                                                  893 896 896 896 898 898 903 903 904 906 906 908
                                                                                  908 908 910 910 912 912 912 914 914 915 915 916
                                                                                  918 918 918 920 920 921 921 923 926 926 931 935
                                                                                  935 937 940 940 940 941 941 941 944 947 947 949
                                                                                  949 949 951 951 953 955 955 955 957 957 957 960
                                                                                  960 960 960 963 965 966 966 966 969 969 969 969
                                                                                  973 975 975 975 977 977 979 979 979 982 982 982
                                                                                  984 987 987 992 992 994 994 996 1001 1005 1005
                                                                                  1006 1006 1008 1010 1010 1011 1011 1012 1012 1014
                                                                                  1014 1016 1016 1018 1018 1019 1019 1021 1021 1024
                                                                                  1024 1025 1025 1026 1026 1034 1036 1036 1039 1039
                                                                                  1039 1039 1042 1049 1049 1057 1059 1060 1061 1065
                                                                                  1067 1068 1069 1073 1075 1076 1077 1081 1083 1084
                                                                                  1085 1091 1091 1091 1093 1093 1097 1097 1099 1106
                                                                                  1165 1166 1169 1172 1180 1185 1190 1204 1221 1229
                                                                                  1231 1231 1257 1259 1265 1274 1274 1279 1281 1283
                                                                                  1283 1284 1284 1288 1288 1289 1289 1295 1304 1311
                                                                                  1324 1326 1331 1341 1342 1342 1347 1358 1361 1361
                                                                                  1364 1375 1375 1379 1379 1385 1404 1406 1411 1413
                                                                                  1424 1433 1433 1446 1450 1450 1451 1453 1454 1460
                                                                                  1464 1464 1465 1467 1468 1478 1478 1482 1482 1484
                                                                                  1487 1487 1489 1490 1493 1493 1495 1496 1499 1499
                                                                                  1501 1504 1506 1509 1511 1514 1517 1518 1521 1524
                                                                                  1529 1531 1534 1536 1537 1540 1542 1543 1546 1548
                                                                                  1551 1553 1556 1558 1561 1579 1581 1584 1587 1589
                                                                                  1589 1594 1594 1596 1609 1609 1611 1611 1612 1612
                                                                                  1612 1614 1614 1614 1616 1617 1619 1624 1630 1630
                                                                                  1631 1631 1634 1634 1636 1636 1642 1642 1647 1650
                                                                                  1654 1654 1655 1656 1660 1660 1672 1674 1676 1681
                                                                                  1684 1684 1684 1693 1696 1705 1709 1717 1723 1727
                                                                                  1729 1729 1732 1738 1738 1746 1746 1751 1753 1756
                                                                                  1756 1757 1757 1759 1759 1766 1766 1768 1768 1768
                                                                                  1770 1773 1773 1774 1774 1775 1775 1776 1777 1777
                                                                                  1777 1778 1779 1780 1781 1781 1785 1788 1788 1789
                                                                                  1789 1790 1790 1790 1794 1794 1796 1796 1796 1798
                                                                                  1798 1798 1798 1804 1805 1808 1808 1810 1810 1810
                                                                                  1812 1812 1813 1813 1813 1845 1846 1846 1848 2000
                                                                                  2002 2004 2007 2007 2007 2097 2100 2104 2104 2107
                                                                                  2115 2122 2129 2136 2143 2150 2157 2157 2162 2166
                                                                                  2166 2169 2172 2172 2172 2182 2193 2197 2198 2200
                                                                                  2206 2223 2227 2234 2247 2249 2250 2262 2269 2270
                                                                                  2289 2295 2295 2295 2295 2312 2312 2319 2333 2337
                                                                                  2337 2337 2337 2339 2341 2341 2341 2341 2352 2365
                                                                                  2365 2379 2386 2393 2400 2404 2404 2406 2406 2406
                                                                                  2412 2417 2426 2433 2440 2451 2451 2453 2459 2459
                                                                                  2466 2470 2470 2472 2472 2472 2474 2481 2488 2492
                                                                                  2492 2494 2494 2494 2496 2503 2507 2507 2508 2508
                                                                                  2510 2510 2510 2512 2514 2514 2520 2527 2531 2531
                                                                                  2532 2540 2540 2547 2554 2554 2561 2566 2566 2570
                                                                                  2577 2577 2584 2584 2584 2584 2591 2595 2595 2597
                                                                                  2597 2597 2599 2606 2613 2620 2627 2631 2631 2633
                                                                                  2633 2633 2635 2635 2652 2656 2656 2658 2658 2658
                                                                                  2660 2667 2670 2670 2676 2676 2681 2681 2681 2681
                                                                                  2686 2690 2692 2692 2697 2697 2702 2705 2705 2705
                                                                                  2705 2712 2715 2715 2717 2717 2725 2728 2730 2731
                                                                                  2742 2747 2747 2751 2760 2766 2772 2772 2772 2772
                                                                                  2774 2778 2788 2794 2798 2812 2819 2819 2824 2826
                                                                                  2847 2849 2849 2849 2851 2851 2853 2853 2853 2853
                                                                                  2853 2853 2856 2869 2873 2873 2875 2875 2875 2877
                                                                                  2877 2879 2879 2879 2879 2879 2879 2882 2892 2897
                                                                                  2897 2900 2908 2908 2915 2922 2929 2932 2936 2939
                                                                                  2942 2945 2948 2951 2954 2957 2960 2963 2969 2970
                                                                                  2988 2989 2993 2993 2993 2997 3006 3033 3040 3040
                                                                                  3047 3055 3055 3062 3062 3069 3076 3076 3079 3079
                                                                                  3084 3084 3090 3094 3202 3202 3215 3219 3219 3221
                                                                                  3221 3221 3223 3226 3233 3238 3238 3238 3238 3238
                                                                                  3273 3280 3287 3294 3294 3301 3304 3306 3306 3306
                                                                                  3306 3312 3312 3312 3312 3319 3326 3333 3340 3346
                                                                                  3353 3360 3367 3374 3381 3388 3395 3395 3420 3420
                                                                                  3427 3431 3438 3439 3441 3441 3444 3444 3444 3444
                                                                                  3447 3447 3447 3449 3449 3449 3451 3451 3451 3454
                                                                                  3457 3457 3461 3462 3463 3464 3465 3466 3467 3468
                                                                                  3469 3470 3471 3472 3473 3474 3475 3476 3488 3489
                                                                                  3492 3492 3492 3494 3507 3508 3531 3532
switch_88                 6(05)        defined         bit(1)                   array level 2 packed packed unaligned dcl 4-15 set
                                                                                  ref 931 1024* 2532
sync_right                1(01)        based           bit(1)                   level 2 packed packed unaligned dcl 8-245 ref 2520
syntab_ptr                      000370 automatic       pointer                  dcl 3694 set ref 110* 161 269
syntax_line                            based           structure                level 1 unaligned dcl 321
syntax_line_ptr                 000100 automatic       pointer                  dcl 302 set ref 161* 165 170 177 180 180 185 195 210
                                                                                  215 218 220 222 224 226 252 266 269* 292
syntax_table                           based           structure                array level 1 unaligned dcl 329 set ref 161 269
syntax_trace            134(16)        based           bit(1)                   level 2 packed packed unaligned dcl 19-26 ref 139
t                               000164 automatic       fixed bin(17,0)          dcl 1113 set ref 1218* 1295 1341 1417
t_field                   2            based           fixed bin(17,0)          level 2 dcl 321 ref 170 215 218 252
t_type                    1            based           fixed bin(17,0)          level 2 dcl 321 ref 165
tbit                            000104 automatic       bit(1)                   packed unaligned dcl 304 set ref 139* 141 150 173
                                                                                  234 245 260 278
temp_bin1                55            based           fixed bin(24,0)          level 2 dcl 3732 set ref 548* 550* 550 550 558 572*
                                                                                  572 578* 578 580* 580 582* 582 585* 585 585 762*
                                                                                  764* 766 772 775* 775 947* 949* 949 949 955 969*
                                                                                  969 975* 975 977* 977 979* 979 982* 982 982 1723*
                                                                                  1729* 1729 1732 1738 1738 1757* 1777 2162* 2172*
                                                                                  2312 2337* 2339* 2772* 2774*
temp_bin2                56            based           fixed bin(24,0)          level 2 dcl 3732 set ref 552* 554 587 590* 590 951*
                                                                                  953 984 987* 987
tf                     3267            based           fixed bin(17,0)          level 2 dcl 3732 set ref 89* 422* 424* 426* 436*
                                                                                  438* 440* 505* 508 508* 511* 560* 563 563* 566
                                                                                  569* 868* 871 871* 874* 957* 960 960* 963 965*
                                                                                  1681* 1684* 1693* 1696* 1705* 1709* 2692* 2705*
                                                                                  2717* 2730* 3488 3489* 3492* 3494*
tf_save                         004300 automatic       fixed bin(17,0)          dcl 3486 set ref 3488* 3494
thirty_two_zeros                       constant        bit(32)                  initial packed unaligned dcl 3711 ref 1053 1158 1159
tm1                             000105 automatic       fixed bin(17,0)          initial dcl 307 set ref 173* 234* 307*
tm2                             000106 automatic       fixed bin(17,0)          initial dcl 307 set ref 154* 307*
tm3                             000107 automatic       fixed bin(17,0)          initial dcl 307 set ref 248* 307*
tm4                             000110 automatic       fixed bin(17,0)          initial dcl 307 set ref 263* 307*
tm5                             000111 automatic       fixed bin(17,0)          initial dcl 307 set ref 281* 307*
tok_string                      000010 internal static varying char(1024)       dcl 3601 set ref 2798 3585* 3593 3593* 3593
top                       0(10)        based           bit(1)                   level 3 packed packed unaligned dcl 8-212 ref 2742
trace_ptr                       000102 automatic       pointer                  dcl 302 set ref 137* 141* 154* 173* 234* 248* 263*
                                                                                  281*
transltble             1430            based           char(1)                  array level 2 packed packed unaligned dcl 3732 set
                                                                                  ref 127 128* 128 129* 1190
type                      3            based           fixed bin(17,0)          level 2 in structure "procname" dcl 4004
                                                                                  in procedure "cobol_ddsyntax" ref 2030
type                      3            based           fixed bin(17,0)          level 2 in structure "conditioname" dcl 8-180
                                                                                  in procedure "cobol_ddsyntax" ref 2037
type                      3     000411 internal static fixed bin(17,0)          level 2 in structure "lev_message" dcl 3604
                                                                                  in procedure "cobol_ddsyntax" set ref 84*
type                      3            based           fixed bin(17,0)          level 2 in structure "rw" dcl 8-23 in procedure
                                                                                  "cobol_ddsyntax" set ref 2681 2697 2715 2747 3090
                                                                                  3294 3395 3463*
type                      3            based           fixed bin(17,0)          level 2 in structure "data_name" dcl 9-16
                                                                                  in procedure "cobol_ddsyntax" set ref 657* 2023
type                      3            based           fixed bin(17,0)          level 2 in structure "record" dcl 8-10 in procedure
                                                                                  "cobol_ddsyntax" ref 167 351 944 2104 2157 2166
                                                                                  2206 2223 2333 2337 2386 2433 2440 2451 2459 2766
                                                                                  2772 2794 2819 2897 2929 2993 3238 3441 3444 3444
                                                                                  3444 3447 3449 3451
type                      3            based           fixed bin(17,0)          level 2 in structure "user_word" dcl 8-101
                                                                                  in procedure "cobol_ddsyntax" ref 2234
type                      3            based           fixed bin(17,0)          level 2 in structure "fd_token" dcl 13-4
                                                                                  in procedure "cobol_ddsyntax" ref 3040 3055 3062
                                                                                  3076 3084
type                      3            based           fixed bin(17,0)          level 2 in structure "alphanum_lit" dcl 8-64
                                                                                  in procedure "cobol_ddsyntax" ref 2681 2690 2712
                                                                                  2725
type                      3            based           fixed bin(17,0)          level 2 in structure "fd" dcl 3998 in procedure
                                                                                  "cobol_ddsyntax" ref 2044 2044
type                      3            based           fixed bin(17,0)          level 2 in structure "message" dcl 8-85 in procedure
                                                                                  "cobol_ddsyntax" set ref 478* 3513*
type                      3            based           fixed bin(17,0)          level 2 in structure "indexname" dcl 8-160
                                                                                  in procedure "cobol_ddsyntax" ref 2050
type                      3            based           fixed bin(17,0)          level 2 in structure "numeric_lit" dcl 8-46
                                                                                  in procedure "cobol_ddsyntax" ref 2681 2686 2702
ul                      150            based           fixed bin(17,0)          level 2 dcl 3732 set ref 361 3451*
unspec                                                 builtin function         dcl 3989 set ref 103* 104* 105* 106* 123 125 486
                                                                                  1188 1211 1244 1251 1314 2066
usage_bits_mask                 000753 constant        bit(32)                  initial packed unaligned dcl 3790 ref 2412 2417
usage_clause              2(05)        based           bit(1)                   level 2 packed packed unaligned dcl 8-245 ref 2393
usage_index              21(34)        based           bit(1)                   level 2 in structure "data_name" packed packed
                                                                                  unaligned dcl 9-16 in procedure "cobol_ddsyntax"
                                                                                  ref 2660
usage_index               0(34)        based           bit(1)                   level 2 in structure "vector_map" packed packed
                                                                                  unaligned dcl 8-245 in procedure "cobol_ddsyntax"
                                                                                  ref 1097
use_debug               134(15)        based           bit(1)                   level 2 packed packed unaligned dcl 19-26 ref 3193
user_word                              based           structure                level 1 unaligned dcl 8-101
value_clause              2(04)        based           bit(1)                   level 2 packed packed unaligned dcl 8-245 ref 1746
                                                                                  2426
value_non_numeric         1(11)        based           bit(1)                   level 2 packed packed unaligned dcl 8-245 set ref
                                                                                  415*
value_numeric             1(10)        based           bit(1)                   level 2 packed packed unaligned dcl 8-245 set ref
                                                                                  412*
value_of                  0(07)        based           bit(1)                   level 2 packed packed unaligned dcl 8-212 ref 3062
variable_length           1(04)        based           bit(1)                   level 2 in structure "vector_map" packed packed
                                                                                  unaligned dcl 8-245 in procedure "cobol_ddsyntax"
                                                                                  set ref 1531*
variable_length          22(04)        based           bit(1)                   level 2 in structure "data_name" packed packed
                                                                                  unaligned dcl 9-16 in procedure "cobol_ddsyntax"
                                                                                  set ref 855*
vectemp                         004134 automatic       bit(128)                 packed unaligned dcl 8-335 set ref 464* 466 488 1802
                                                                                  1808
vectempd                               based           structure                level 1 packed packed unaligned dcl 8-337
vector_map                             based           structure                level 1 packed packed unaligned dcl 8-245
vector_part            3034(12)        based           bit(128)                 level 2 packed packed unaligned dcl 3732 set ref
                                                                                  356* 388 390 464 757 1034 1798 1808* 1808 2417
vectora                                based           bit(1)                   array packed unaligned dcl 8-240 ref 461
vectord                                based           structure                level 1 packed packed unaligned dcl 8-241
w2_ptr                   32            based           pointer                  level 2 dcl 3732 set ref 113* 114 808 812* 813 814
                                                                                  818* 910 914* 915 916 920* 2853 2853 2853 2879
                                                                                  2879 2879 2892 3040 3055 3062 3076 3084
w_key                  2636            based           char(5)                  level 2 packed packed unaligned dcl 3732 set ref
                                                                                  616* 621 630 634 640 647
was_found                       004071 automatic       bit(1)                   packed unaligned dcl 3774 set ref 1958* 1971
wkbuf1                                 defined         char(1000)               level 2 packed packed unaligned dcl 4-9 set ref 111
wkbuf2                                 defined         char(500)                level 2 packed packed unaligned dcl 4-12 set ref 113
word                      6            based           char                     level 2 packed packed unaligned dcl 8-101 ref 344
                                                                                  364 1846 2247 2798
word_size                 5            based           fixed bin(17,0)          level 2 dcl 8-101 ref 343 344 344 346 364 1845 1846
                                                                                  1846 1848 2247 2798 3451

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
act                                    automatic       fixed bin(17,0)          dcl 305
alph                                   automatic       char(1)                  packed unaligned dcl 3801
based_char_string                      based           char(11)                 packed unaligned dcl 3800
bit12                                  automatic       bit(12)                  packed unaligned dcl 8-236
bit3                                   automatic       bit(3)                   packed unaligned dcl 8-234
bit8                                   automatic       bit(8)                   packed unaligned dcl 8-235
bit8_1                                 automatic       bit(8)                   packed unaligned dcl 8-345
bits_per_char                          internal static fixed bin(17,0)          initial dcl 5-4
bits_per_word                          internal static fixed bin(17,0)          initial dcl 5-5
cd_constant                            internal static fixed bin(17,0)          initial dcl 6-15
cdtoken                                based           structure                level 1 unaligned dcl 3996
char1                                  automatic       char(1)                  packed unaligned dcl 8-237
char12                                 automatic       char(12)                 packed unaligned dcl 8-239
char4                                  automatic       char(4)                  packed unaligned dcl 8-238
cntbuf2                                based           fixed bin(24,0)          array dcl 5-10
cobol_afp                              defined         pointer                  dcl 3-11
cobol_analin_fileno                    defined         pointer                  dcl 3-13
cobol_com_fileno                       defined         pointer                  dcl 3-23
cobol_compare_values            000000 constant        entry                    external dcl 8-347
cobol_ctbin                     000000 constant        entry                    external dcl 8-344
cobol_curr_in                          defined         pointer                  dcl 3-53
cobol_curr_out                         defined         pointer                  dcl 3-55
cobol_dfp                              defined         pointer                  dcl 3-27
cobol_eltp                             defined         pointer                  dcl 3-19
cobol_ext_$cobol_afp                   external static pointer                  dcl 3-10
cobol_ext_$cobol_analin_fileno         external static pointer                  dcl 3-12
cobol_ext_$cobol_com_fileno            external static pointer                  dcl 3-22
cobol_ext_$cobol_curr_in               external static pointer                  dcl 3-52
cobol_ext_$cobol_curr_out              external static pointer                  dcl 3-54
cobol_ext_$cobol_dfp                   external static pointer                  dcl 3-26
cobol_ext_$cobol_eltp                  external static pointer                  dcl 3-18
cobol_ext_$cobol_fileno1               external static fixed bin(24,0)          dcl 3-78
cobol_ext_$cobol_hfp                   external static pointer                  dcl 3-28
cobol_ext_$cobol_lpr                   external static char(5)                  packed unaligned dcl 3-95
cobol_ext_$cobol_m2fp                  external static pointer                  dcl 3-32
cobol_ext_$cobol_min1_fileno           external static pointer                  dcl 3-34
cobol_ext_$cobol_min2_fileno_ptr       external static pointer                  dcl 3-36
cobol_ext_$cobol_name_fileno           external static pointer                  dcl 3-38
cobol_ext_$cobol_options               external static char(120)                packed unaligned dcl 3-97
cobol_ext_$cobol_options_len           external static fixed bin(24,0)          dcl 3-80
cobol_ext_$cobol_pdofp                 external static pointer                  dcl 3-44
cobol_ext_$cobol_pdout_fileno          external static fixed bin(24,0)          dcl 3-82
cobol_ext_$cobol_pfp                   external static pointer                  dcl 3-46
cobol_ext_$cobol_print_fileno          external static fixed bin(24,0)          dcl 3-84
cobol_ext_$cobol_rm2fp                 external static pointer                  dcl 3-48
cobol_ext_$cobol_rmin2_fileno          external static fixed bin(24,0)          dcl 3-86
cobol_ext_$cobol_rmin2fp               external static pointer                  dcl 3-50
cobol_ext_$cobol_rwdd                  external static pointer                  dcl 3-72
cobol_ext_$cobol_rwpd                  external static pointer                  dcl 3-74
cobol_ext_$cobol_sfp                   external static pointer                  dcl 3-56
cobol_ext_$cobol_w1p                   external static pointer                  dcl 3-58
cobol_ext_$cobol_w2p                   external static pointer                  dcl 3-60
cobol_ext_$cobol_w3p                   external static pointer                  dcl 3-62
cobol_ext_$cobol_w5p                   external static pointer                  dcl 3-64
cobol_ext_$cobol_w6p                   external static pointer                  dcl 3-66
cobol_ext_$cobol_w7p                   external static pointer                  dcl 3-68
cobol_ext_$cobol_x1_fileno             external static fixed bin(24,0)          dcl 3-88
cobol_ext_$cobol_x2_fileno             external static fixed bin(24,0)          dcl 3-90
cobol_ext_$cobol_x3_fileno             external static fixed bin(24,0)          dcl 3-92
cobol_ext_$cobol_x3fp                  external static pointer                  dcl 3-70
cobol_ext_$cobol_xlast8                external static bit(1)                   packed unaligned dcl 3-100
cobol_ext_$report_exists               external static bit(1)                   packed unaligned dcl 3-102
cobol_ext_$report_first_token          external static pointer                  dcl 3-14
cobol_ext_$report_last_token           external static pointer                  dcl 3-16
cobol_fileno1                          defined         fixed bin(24,0)          dcl 3-79
cobol_hfp                              defined         pointer                  dcl 3-29
cobol_lpr                              defined         char(5)                  packed unaligned dcl 3-96
cobol_m2fp                             defined         pointer                  dcl 3-33
cobol_min1_fileno                      defined         pointer                  dcl 3-35
cobol_min2_fileno_ptr                  defined         pointer                  dcl 3-37
cobol_name_fileno                      defined         pointer                  dcl 3-39
cobol_name_fileno_ptr                  defined         pointer                  dcl 3-41
cobol_options                          defined         char(120)                packed unaligned dcl 3-98
cobol_options_len                      defined         fixed bin(24,0)          dcl 3-81
cobol_pdofp                            defined         pointer                  dcl 3-45
cobol_pdout_fileno                     defined         fixed bin(24,0)          dcl 3-83
cobol_pfp                              defined         pointer                  dcl 3-47
cobol_print_fileno                     defined         fixed bin(24,0)          dcl 3-85
cobol_rm2fp                            defined         pointer                  dcl 3-49
cobol_rmin2_fileno                     defined         fixed bin(24,0)          dcl 3-87
cobol_rmin2fp                          defined         pointer                  dcl 3-51
cobol_rwdd                             defined         pointer                  dcl 3-73
cobol_rwpd                             defined         pointer                  dcl 3-75
cobol_sfp                              defined         pointer                  dcl 3-57
cobol_w1p                              defined         pointer                  dcl 3-59
cobol_w2p                              defined         pointer                  dcl 3-61
cobol_w3p                              defined         pointer                  dcl 3-63
cobol_w5p                              defined         pointer                  dcl 3-65
cobol_w6p                              defined         pointer                  dcl 3-67
cobol_w7p                              defined         pointer                  dcl 3-69
cobol_x1_fileno                        defined         fixed bin(24,0)          dcl 3-89
cobol_x2_fileno                        defined         fixed bin(24,0)          dcl 3-91
cobol_x3_fileno                        defined         fixed bin(24,0)          dcl 3-93
cobol_x3fp                             defined         pointer                  dcl 3-71
cobol_xlast8                           defined         bit(1)                   packed unaligned dcl 3-101
data_name_bits                         based           bit(5000)                packed unaligned dcl 3736
debug                                  based           structure                level 1 unaligned dcl 8-156
dollar                                 automatic       char(1)                  packed unaligned dcl 117
fd_constant                            internal static fixed bin(17,0)          initial dcl 6-14
fdn                                    based           char(1000)               packed unaligned dcl 8-111
ffh                                    automatic       fixed bin(17,0)          dcl 8-210
fixbin31                               automatic       fixed bin(24,0)          dcl 8-233
fkey_constant                          internal static fixed bin(17,0)          initial dcl 6-25
htbl_minivector_bs                     based           bit(18)                  packed unaligned dcl 8-359
in_constant                            internal static fixed bin(17,0)          initial dcl 6-12
key                                    automatic       fixed bin(17,0)          dcl 3672
l                                      automatic       fixed bin(17,0)          dcl 8-7
linage_name_rec_constant               internal static fixed bin(17,0)          initial dcl 6-17
linage_rec_constant                    internal static fixed bin(17,0)          initial dcl 6-16
log_mask                               internal static bit(8)                   initial array packed unaligned dcl 3802
obj_rec_constant                       internal static fixed bin(17,0)          initial dcl 6-21
occ_key_constant                       internal static fixed bin(17,0)          initial dcl 6-19
odo_rec_constant                       internal static fixed bin(17,0)          initial dcl 6-23
one_word_in_bits                       internal static bit(36)                  packed unaligned dcl 5-6
pd_db_constant                         internal static fixed bin(17,0)          initial dcl 6-5
ptr10                                  automatic       pointer                  dcl 8-353
ptr7                                   automatic       pointer                  dcl 8-349
ptr8                                   automatic       pointer                  dcl 8-350
ptr9                                   automatic       pointer                  dcl 8-351
qual_rec_constant                      internal static fixed bin(17,0)          initial dcl 6-18
rename_object_size                     automatic       fixed bin(17,0)          dcl 3777
rename_rec_constant                    internal static fixed bin(17,0)          initial dcl 6-22
report_exists                          defined         bit(1)                   packed unaligned dcl 3-103
report_first_token                     defined         pointer                  dcl 3-15
report_last_token                      defined         pointer                  dcl 3-17
report_rec_constant                    internal static fixed bin(17,0)          initial dcl 6-20
skey_rec                               based           structure                level 1 unaligned dcl 18-3
skey_rec_constant                      internal static fixed bin(17,0)          initial dcl 6-24
slptr                                  automatic       pointer                  dcl 3691
source                                 based           structure                level 1 unaligned dcl 8-193
spec_char                              automatic       char(1)                  packed unaligned dcl 1113
test_v                                 automatic       fixed bin(17,0)          dcl 3686

NAMES DECLARED BY EXPLICIT CONTEXT.
DIAG                            014141 constant        entry                    internal dcl 3483 ref 748 860 878 1196 2169 2267
                                                                                  2310 2355 2367
FT                              000241 constant        label                    array(10) dcl 3110 ref 3108
FT1                             012307 constant        label                    dcl 3153 ref 3113 3118 3122 3126 3130 3134 3138 3143
                                                                                  3147 3150
LEV1                            013730 constant        entry                    internal dcl 3175 ref 3112 3121 3125 3129 3133 3137
LEV2                            013741 constant        entry                    internal dcl 3184 ref 3146
LEV_DIAG                        014274 constant        entry                    internal dcl 3543 ref 1199 1824 1831 2193 2314 2319
                                                                                  2453 2754 2798
LEV_DIAG_SAVED                  014306 constant        entry                    internal dcl 3558 ref 3014
LV                              000236 constant        label                    array(3) dcl 2686 ref 2676
a_test                          013640 constant        entry                    internal dcl 2362 ref 2106 2358 2823
action_0                        001555 constant        label                    dcl 200 ref 294
actlbl                          000004 constant        label                    array(0:21) dcl 195 ref 187
actretrn                        001552 constant        label                    dcl 195 ref 182 348 358 368 605 695 727 836 840 996
                                                                                  1027 1108 1679 1687 1753 1817 1829 1837 1850 1974
                                                                                  1993 2090
aerr                            006526 constant        label                    dcl 1681 ref 1169
all                             011243 constant        label                    dcl 2747
anext                           005242 constant        label                    dcl 1241 set ref 1226
check                           000072 constant        label                    array(100) dcl 2097 ref 215
cobol_ddsyntax                  001166 constant        entry                    external dcl 50
codeset                         007735 constant        label                    dcl 2234
comp_end                        012675 constant        label                    dcl 3575 set ref 207 242
data_length                     013112 constant        entry                    internal dcl 1031 ref 760
diag                            014167 constant        entry                    internal dcl 3498 ref 200 426 440 508 563 871 960
                                                                                  1684 2084 3492
dl_end                          013306 constant        label                    dcl 1099 set ref 1062 1070 1078 1086 1094
dup_type8                       011355 constant        label                    dcl 2794
elem1                           003552 constant        label                    dcl 772 ref 782
elema21end                      003762 constant        label                    dcl 836 ref 821 826
elema21ix2                      003663 constant        label                    dcl 806 ref 824
end21                           004405 constant        label                    dcl 931 ref 884 898 923 928
enter_tok_string                012745 constant        entry                    external dcl 3589
err                             006531 constant        label                    dcl 1684 ref 1694 1698 1707 1711
err1                            006561 constant        label                    dcl 1696 ref 1351 1689 1700
err2                            006546 constant        label                    dcl 1689 ref 1214 1703
err3                            006565 constant        label                    dcl 1700 ref 1244 1254 1458 1472
err4                            006571 constant        label                    dcl 1705 ref 1385
err5                            006574 constant        label                    dcl 1709 ref 1619
extra_label                     006127 constant        label                    dcl 1524 ref 1507
fail                            001421 constant        label                    dcl 150 ref 167 170 285 2111 2118 2125 2132 2139
                                                                                  2146 2153 2157 2166 2219 2223 2229 2234 2264 2295
                                                                                  2326 2333 2348 2382 2389 2396 2422 2429 2436 2443
                                                                                  2462 2477 2484 2496 2512 2516 2523 2532 2543 2550
                                                                                  2554 2564 2573 2580 2587 2602 2606 2616 2623 2638
                                                                                  2663 2670 2684 2686 2700 2712 2723 2738 2745 2762
                                                                                  2766 2782 2791 2808 2815 2832 2895 2904 2911 2918
                                                                                  2925 2929 2932 2963 3001 3026 3036 3043 3050 3058
                                                                                  3065 3072 3082 3087 3090 3094 3229 3236 3244 3246
                                                                                  3265 3276 3280 3290 3297 3310 3315 3322 3329 3336
                                                                                  3343 3349 3356 3363 3370 3377 3384 3391 3398 3407
figcon                          010306 constant        label                    dcl 2447
fill_edit                       013312 constant        entry                    internal dcl 1714 ref 1394 1607
form_chains                     013411 constant        entry                    internal dcl 2011 ref 1896 1936
fsind                           011437 constant        label                    dcl 2819
fundefined                      011627 constant        label                    dcl 2892 ref 2842 2869
get_file_key                    013031 constant        entry                    external dcl 3635
get_rename_desc                 013364 constant        entry                    internal dcl 1996 ref 1973
groupa21                        004660 constant        label                    dcl 1001 ref 741
incr_lnth                       013174 constant        label                    dcl 1049 ref 1039 1042
init_file_tab                   013062 constant        entry                    external dcl 3644
init_src                        013670 constant        entry                    internal dcl 2975 ref 2859 2885
init_tok_string                 012716 constant        entry                    external dcl 3581
int                             007566 constant        label                    dcl 2157
int1                            006336 constant        label                    dcl 1609 ref 1603
ix2                             004304 constant        label                    dcl 908 ref 926
l17                             002343 constant        label                    dcl 445 ref 427
l17a                            002640 constant        label                    dcl 537 ref 554 587
l17aa                           002706 constant        label                    dcl 558 ref 591
l17aaa                          003041 constant        label                    dcl 593 ref 520 528 533 537 545
l21a                            004447 constant        label                    dcl 941 ref 953 984
l21aa                           004514 constant        label                    dcl 955 ref 988
l21aaa                          004647 constant        label                    dcl 992 ref 937 944
labnam                          010635 constant        label                    dcl 2566
labval                          011107 constant        label                    dcl 2676
lbl12                           002063 constant        label                    dcl 365 ref 380
lbl136                          006716 constant        label                    dcl 1781
lbl21a                          003767 constant        label                    dcl 840 ref 999
lev01                           007653 constant        label                    dcl 2188
lev0177                         011275 constant        label                    dcl 2766
lev0249                         010074 constant        label                    dcl 2304
lev66                           010050 constant        label                    dcl 2285
lev66s                          012025 constant        label                    dcl 3003
lev77                           007643 constant        label                    dcl 2178
lev88                           010043 constant        label                    dcl 2277
lev88s                          012035 constant        label                    dcl 3009
lev_diag                        014247 constant        entry                    internal dcl 3526 ref 180 227 2370 3553
level_number                    013531 constant        entry                    internal dcl 2328 ref 2178 2188 2277 2285 2304 3024
loop                            001440 constant        label                    dcl 159 ref 148 213 254
lrc                             011345 constant        label                    dcl 2784
mainloop                        005167 constant        label                    dcl 1208 ref 1438 1444 1455 1469 1474 1480 1485 1491
                                                                                  1497 1502 1512 1519 1527 1532 1538 1544 1549 1554
                                                                                  1559 1563 1565
new_inst                        001443 constant        label                    dcl 161 set ref 1822
next1                           005253 constant        label                    dcl 1248 ref 1251
next_file                       011471 constant        label                    dcl 2839 ref 2867
next_file_chain                 011552 constant        label                    dcl 2869 ref 2864 2890
no_add                          003606 constant        label                    dcl 784 ref 768 778
no_incr                         013176 constant        label                    dcl 1053 ref 1047
outscan                         014075 constant        label                    dcl 3457 set ref 3428 3433
per_ck                          012201 constant        label                    dcl 3090
pic1                            005216 constant        label                    dcl 1223 set ref 1234
pic3                            005316 constant        label                    dcl 1259 ref 1239
pic3a                           005374 constant        label                    dcl 1295 ref 1265
pic3b                           005416 constant        label                    dcl 1308 ref 1326 1331
pic3b1                          005440 constant        label                    dcl 1322 ref 1328
pic4                            005510 constant        label                    dcl 1347 ref 1221 1259 1285 1293 1336
pic4a                           005556 constant        label                    dcl 1382 ref 1364
pic4b                           005570 constant        label                    dcl 1399 ref 1390
pic5                            005372 constant        label                    dcl 1291 ref 1299 1304 1333
pic6                            005461 constant        label                    dcl 1333 ref 1276 1311 1324 1345
pic7                            005465 constant        label                    dcl 1338 ref 1301 1317
pic8                            005505 constant        label                    dcl 1343 ref 1295
pic9                            005713 constant        label                    dcl 1430 ref 1358 1376 1380
piclabel                        000032 constant        label                    array(32) dcl 1433 ref 1430
postveca136                     006765 constant        label                    dcl 1798 ref 1770
pre_end                         012675 constant        label                    dcl 3575 ref 204 287
prelude                         001320 constant        label                    dcl 111
renames                         012450 constant        label                    dcl 3246
scan                            013752 constant        entry                    internal dcl 3413 ref 146 210 266 3205
scan_next                       013753 constant        label                    dcl 3416 ref 3444
sechdr                          012004 constant        label                    dcl 2993
speclabel                       006522 constant        label                    dcl 1676 ref 1591 1598 1666
start                           001374 constant        label                    dcl 135
success                         001462 constant        label                    dcl 173 ref 2101 2108 2115 2122 2129 2136 2143 2150
                                                                                  2163 2174 2184 2202 2217 2227 2252 2272 2281 2291
                                                                                  2299 2323 2379 2386 2393 2400 2414 2419 2426 2433
                                                                                  2440 2455 2459 2466 2474 2481 2488 2498 2503 2514
                                                                                  2520 2527 2535 2540 2547 2557 2561 2570 2577 2584
                                                                                  2591 2599 2609 2613 2620 2627 2635 2642 2647 2652
                                                                                  2660 2667 2672 2681 2694 2697 2708 2719 2734 2742
                                                                                  2757 2779 2784 2788 2804 2812 2829 2861 2887 2901
                                                                                  2908 2915 2922 2972 2998 3007 3017 3033 3040 3047
                                                                                  3055 3062 3069 3080 3084 3173 3193 3209 3215 3223
                                                                                  3226 3233 3238 3269 3273 3283 3287 3294 3306 3312
                                                                                  3319 3326 3333 3340 3346 3353 3360 3367 3374 3381
                                                                                  3388 3395
success_1                       001525 constant        label                    dcl 187 ref 237
test                            000000 constant        label                    array(0:3) dcl 167 ref 165
test_level_number               013712 constant        entry                    internal dcl 3019 ref 3003 3009
test_like                       012451 constant        label                    dcl 3265
type8                           007712 constant        label                    dcl 2206
ucon                            001475 constant        label                    dcl 177 ref 272

NAMES DECLARED BY CONTEXT OR IMPLICATION.
addrel                                                 builtin function         ref 1945
index                                                  builtin function         ref 1185 2798 3593

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0     15002       15766   14423       15012
Length     16760   14423       764         755     357         672

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
cobol_ddsyntax                     2694 external procedure  is an external procedure.  
begin block on line 116                 begin block         shares stack frame of external procedure cobol_ddsyntax.  
data_length                             internal procedure  shares stack frame of external procedure cobol_ddsyntax.  
fill_edit                               internal procedure  shares stack frame of external procedure cobol_ddsyntax.  
get_rename_desc                         internal procedure  shares stack frame of external procedure cobol_ddsyntax.  
form_chains                             internal procedure  shares stack frame of external procedure cobol_ddsyntax.  
level_number                            internal procedure  shares stack frame of external procedure cobol_ddsyntax.  
a_test                                  internal procedure  shares stack frame of external procedure cobol_ddsyntax.  
init_src                                internal procedure  shares stack frame of external procedure cobol_ddsyntax.  
test_level_number                       internal procedure  shares stack frame of external procedure cobol_ddsyntax.  
LEV1                                    internal procedure  shares stack frame of external procedure cobol_ddsyntax.  
LEV2                                    internal procedure  shares stack frame of external procedure cobol_ddsyntax.  
scan                                    internal procedure  shares stack frame of external procedure cobol_ddsyntax.  
DIAG                                    internal procedure  shares stack frame of external procedure cobol_ddsyntax.  
diag                                    internal procedure  shares stack frame of external procedure cobol_ddsyntax.  
lev_diag                                internal procedure  shares stack frame of external procedure cobol_ddsyntax.  
LEV_DIAG                                internal procedure  shares stack frame of external procedure cobol_ddsyntax.  
LEV_DIAG_SAVED                          internal procedure  shares stack frame of external procedure cobol_ddsyntax.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 tok_string                  cobol_ddsyntax
000411 lev_message                 cobol_ddsyntax
000420 lev_message_ptr             cobol_ddsyntax
000422 FILE_REC_TAB                cobol_ddsyntax
000664 dd_static                   cobol_ddsyntax
000670 filstring_init              cobol_ddsyntax
000700 character_tbl               cobol_ddsyntax

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
cobol_ddsyntax           000100 syntax_line_ptr             cobol_ddsyntax
                         000102 trace_ptr                   cobol_ddsyntax
                         000104 tbit                        cobol_ddsyntax
                         000105 tm1                         cobol_ddsyntax
                         000106 tm2                         cobol_ddsyntax
                         000107 tm3                         cobol_ddsyntax
                         000110 tm4                         cobol_ddsyntax
                         000111 tm5                         cobol_ddsyntax
                         000112 interp                      cobol_ddsyntax
                         000124 pic_image                   cobol_ddsyntax
                         000164 t                           cobol_ddsyntax
                         000165 p                           cobol_ddsyntax
                         000166 r                           cobol_ddsyntax
                         000167 n                           cobol_ddsyntax
                         000170 m                           cobol_ddsyntax
                         000171 arrpntr                     cobol_ddsyntax
                         000172 piccounter1                 cobol_ddsyntax
                         000173 piccounter2                 cobol_ddsyntax
                         000174 inscnter                    cobol_ddsyntax
                         000175 fltswitch1                  cobol_ddsyntax
                         000176 fltswitch2                  cobol_ddsyntax
                         000177 fltswitch3                  cobol_ddsyntax
                         000200 auxvector1                  cobol_ddsyntax
                         000201 auxvector2                  cobol_ddsyntax
                         000202 propvector                  cobol_ddsyntax
                         000203 fltchar                     cobol_ddsyntax
                         000204 editlim                     cobol_ddsyntax
                         000205 auxbit                      cobol_ddsyntax
                         000206 mask4x                      cobol_ddsyntax
                         000210 picptr                      cobol_ddsyntax
                         000212 filstring                   cobol_ddsyntax
                         000222 pic_ch                      cobol_ddsyntax
                         000223 nsi                         cobol_ddsyntax
                         000224 ch                          cobol_ddsyntax
                         000226 pic_string_ptr              cobol_ddsyntax
                         000230 RL                          cobol_ddsyntax
                         000231 RC                          cobol_ddsyntax
                         000232 source_pos                  cobol_ddsyntax
                         000256 ii                          cobol_ddsyntax
                         000257 num                         cobol_ddsyntax
                         000260 LEV                         cobol_ddsyntax
                         000262 lev1_org                    cobol_ddsyntax
                         000264 lev2_org                    cobol_ddsyntax
                         000266 lev1_mod                    cobol_ddsyntax
                         000273 lev2_mod                    cobol_ddsyntax
                         000300 saved_line                  cobol_ddsyntax
                         000301 saved_column                cobol_ddsyntax
                         000302 filler_flag                 cobol_ddsyntax
                         000304 alf_ptr                     cobol_ddsyntax
                         000306 int_val                     cobol_ddsyntax
                         000310 mod_num                     cobol_ddsyntax
                         000311 act_num                     cobol_ddsyntax
                         000312 org                         cobol_ddsyntax
                         000313 TF                          cobol_ddsyntax
                         000314 save_j                      cobol_ddsyntax
                         000316 alf                         cobol_ddsyntax
                         000325 se                          cobol_ddsyntax
                         000326 cslno                       cobol_ddsyntax
                         000327 stack                       cobol_ddsyntax
                         000365 stack_index                 cobol_ddsyntax
                         000366 fstatus                     cobol_ddsyntax
                         000367 bit9                        cobol_ddsyntax
                         000370 syntab_ptr                  cobol_ddsyntax
                         000372 cd_out_size                 cobol_ddsyntax
                         000373 indicators                  cobol_ddsyntax
                         000374 sv_ptr_auto                 cobol_ddsyntax
                         000376 hash_table                  cobol_ddsyntax
                         002376 ref_table                   cobol_ddsyntax
                         002542 ref                         cobol_ddsyntax
                         004036 diag_token                  cobol_ddsyntax
                         004046 hash_table_ptr              cobol_ddsyntax
                         004050 ref_table_ptr               cobol_ddsyntax
                         004052 diag_ptr                    cobol_ddsyntax
                         004054 like_key                    cobol_ddsyntax
                         004056 rec_key                     cobol_ddsyntax
                         004060 first_key                   cobol_ddsyntax
                         004062 prev_rec_ptr                cobol_ddsyntax
                         004064 rec_ptr                     cobol_ddsyntax
                         004066 last_rec_ptr                cobol_ddsyntax
                         004070 rec_size                    cobol_ddsyntax
                         004071 was_found                   cobol_ddsyntax
                         004072 not_found                   cobol_ddsyntax
                         004073 like_clause                 cobol_ddsyntax
                         004074 first_rec                   cobol_ddsyntax
                         004076 rename_object_ptr           cobol_ddsyntax
                         004100 diag_no                     cobol_ddsyntax
                         004101 ref_table_size              cobol_ddsyntax
                         004102 status                      cobol_ddsyntax
                         004103 bit32_1                     cobol_ddsyntax
                         004104 bit32_2                     cobol_ddsyntax
                         004105 i                           cobol_ddsyntax
                         004106 j                           cobol_ddsyntax
                         004107 k                           cobol_ddsyntax
                         004110 message_area                cobol_ddsyntax
                         004126 message_ptr                 cobol_ddsyntax
                         004130 pdn_occ_ptr                 cobol_ddsyntax
                         004132 fixbin7_1                   cobol_ddsyntax
                         004133 fixbin15                    cobol_ddsyntax
                         004134 vectemp                     cobol_ddsyntax
                         004140 ptr6                        cobol_ddsyntax
                         004156 comma                       begin block on line 116
                         004157 period                      begin block on line 116
                         004160 store                       begin block on line 116
                         004212 string_size                 form_chains
                         004213 hashno                      form_chains
                         004214 string_ptr                  form_chains
                         004300 tf_save                     DIAG

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_e_as              alloc_char_temp     alloc_bit_temp      cat_realloc_chars   call_ext_out        return_mac
mdfx1               signal_op           shorten_stack       ext_entry           set_chars_eis       index_chars_eis
any_to_any_truncate_

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
cobol_c_list                  cobol_ddact1                  cobol_ddact2                  cobol_ddst
cobol_imp_word$alphabet_name  cobol_imp_word$label_name     cobol_initstatic              cobol_pic_val_comp
cobol_swf_get                 cobol_syntax_trace_$initialize_phase                        cobol_syntax_trace_$trace
cobol_usrwd                   cobol_vdwf_dget               cobol_vdwf_dput               cobol_vdwf_sget
cobol_vdwf_sput

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
cobol_ext_$cobol_cmfp         cobol_ext_$cobol_com_ptr      cobol_ext_$cobol_m1fp
cobol_ext_$cobol_name_fileno_ptr                            cobol_ext_$cobol_ntfp         cobol_ext_ddsyn$cobol_htbl
cobol_ext_ddsyn$cobol_sv_ptr  cobol_ext_ddsyn$cobol_wkbuf1_tbl
cobol_ext_ddsyn$cobol_wkbuf2_tbl




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
    307 001015      3626 001027      3628 001061      3631 001113      3633 001137        50 001165        53 001176
     54 001203        55 001207        57 001210        60 001212        61 001214        64 001217        65 001220
     66 001221        68 001226        69 001230        70 001231        73 001236        76 001241        77 001243
     80 001244        83 001246        84 001250        85 001252        87 001254        89 001255        90 001256
     92 001257        93 001260        94 001261        95 001263        97 001265        99 001267       101 001272
    102 001274       103 001276       104 001300       105 001302       106 001304       107 001306       109 001310
    110 001312       111 001320       113 001324       114 001326       119 001327       121 001335       122 001337
    123 001341       124 001344       125 001346       126 001351       127 001353       128 001361       129 001364
    133 001367       135 001374       137 001376       139 001400       141 001404       146 001417       148 001420
    150 001421       153 001423       154 001426       157 001437       159 001440       161 001443       163 001447
    165 001450       167 001452       170 001457       173 001462       177 001475       180 001503       182 001521
    185 001522       187 001525       191 001531       193 001543       195 001552       200 001555       204 001573
    207 001577       210 001602       213 001607       215 001610       218 001612       220 001614       222 001616
    224 001623       226 001633       227 001635       230 001637       231 001640       234 001641       237 001654
    239 001655       242 001656       245 001661       247 001663       248 001666       251 001677       252 001702
    254 001705       256 001706       260 001711       262 001713       263 001716       266 001727       269 001734
    270 001740       272 001742       274 001743       278 001746       280 001750       281 001753       284 001764
    285 001766       287 001767       292 001773       294 002000       337 002001       343 002003       344 002007
    346 002013       348 002015       351 002016       355 002041       356 002044       358 002050       361 002051
    363 002054       364 002057       365 002063       367 002070       368 002072       371 002073       374 002077
    375 002101       377 002103       378 002106       379 002111       380 002115       385 002116       388 002124
    390 002137       396 002144       399 002154       400 002157       404 002162       406 002202       408 002210
    412 002223       415 002237       417 002242       420 002246       422 002256       424 002265       426 002267
    427 002302       430 002303       433 002307       436 002317       438 002326       440 002330       445 002343
    448 002361       452 002364       454 002370       456 002373       459 002405       461 002413       464 002421
    466 002441       471 002446       472 002450       473 002452       475 002454       476 002457       478 002461
    479 002463       480 002465       481 002467       482 002471       483 002473       484 002475       486 002477
    488 002502       490 002505       494 002513       498 002515       501 002524       504 002533       505 002537
    508 002552       511 002570       515 002572       518 002575       520 002577       528 002601       531 002605
    533 002612       536 002617       537 002640       541 002643       543 002645       545 002666       548 002671
    550 002676       552 002702       554 002704       558 002706       560 002713       563 002726       566 002744
    568 002747       569 002770       572 002772       576 003003       578 003006       580 003017       581 003021
    582 003022       585 003027       587 003033       590 003036       591 003040       593 003041       597 003063
    598 003065       603 003070       604 003074       605 003076       609 003077       613 003102       614 003104
    616 003106       619 003125       621 003131       623 003137       626 003141       630 003146       634 003157
    635 003164       640 003167       644 003203       646 003205       647 003206       652 003212       654 003215
    657 003230       658 003233       659 003235       660 003237       661 003241       662 003243       664 003246
    666 003252       668 003254       669 003256       670 003262       675 003265       678 003276       680 003302
    682 003306       685 003312       687 003314       693 003326       695 003330       699 003331       703 003336
    705 003337       706 003340       708 003342       711 003350       713 003357       715 003377       716 003403
    718 003407       722 003415       723 003417       724 003420       725 003421       727 003422       731 003423
    734 003427       737 003437       741 003445       746 003450       748 003453       751 003466       753 003476
    754 003501       757 003504       760 003522       762 003523       764 003535       766 003541       768 003543
    771 003551       772 003552       775 003562       778 003574       781 003603       782 003605       784 003606
    788 003616       789 003622       790 003624       792 003631       795 003643       798 003647       801 003651
    802 003655       804 003657       806 003663       808 003671       810 003673       812 003714       813 003720
    814 003723       816 003725       818 003746       819 003752       821 003754       824 003756       826 003761
    836 003762       840 003767       844 004000       845 004002       847 004007       849 004027       850 004033
    852 004042       855 004053       856 004055       860 004062       864 004074       867 004100       868 004104
    871 004117       874 004135       878 004137       881 004156       883 004165       884 004206       888 004207
    889 004213       890 004215       891 004225       893 004236       896 004242       898 004262       903 004271
    904 004276       906 004300       908 004304       910 004312       912 004314       914 004335       915 004341
    916 004347       918 004351       920 004371       921 004375       923 004377       926 004401       928 004404
    931 004405       935 004416       937 004423       940 004427       941 004447       944 004471       947 004501
    949 004504       951 004510       953 004512       955 004514       957 004521       960 004534       963 004552
    965 004555       966 004556       969 004577       973 004611       975 004614       977 004625       978 004627
    979 004630       982 004635       984 004641       987 004644       988 004646       992 004647       994 004653
    996 004655       999 004657      1001 004660      1005 004663      1006 004664      1008 004672      1010 004706
   1011 004714      1012 004721      1014 004732      1016 004742      1018 004750      1019 004757      1021 004766
   1024 004773      1025 005001      1026 005007      1027 005015      1106 005016      1108 005023      1156 005024
   1157 005030      1158 005032      1159 005033      1160 005034      1161 005035      1162 005036      1163 005037
   1164 005040      1165 005041      1166 005045      1167 005050      1169 005052      1172 005055      1176 005060
   1177 005061      1180 005062      1182 005067      1183 005070      1185 005075      1188 005122      1189 005130
   1190 005133      1192 005137      1194 005140      1196 005142      1199 005146      1204 005161      1206 005166
   1208 005167      1211 005170      1212 005176      1214 005201      1217 005203      1218 005205      1221 005207
   1223 005216      1226 005217      1229 005224      1231 005231      1233 005235      1234 005236      1238 005237
   1239 005241      1241 005242      1244 005243      1247 005251      1248 005253      1251 005254      1254 005262
   1257 005267      1259 005316      1265 005325      1268 005331      1270 005334      1272 005336      1273 005340
   1274 005341      1276 005346      1279 005347      1281 005353      1283 005357      1284 005361      1285 005363
   1288 005364      1289 005366      1290 005370      1291 005372      1293 005373      1295 005374      1299 005404
   1301 005405      1304 005410      1307 005414      1308 005416      1311 005417      1314 005424      1315 005431
   1317 005434      1320 005436      1322 005440      1324 005441      1326 005446      1328 005452      1331 005453
   1333 005461      1336 005464      1338 005465      1340 005467      1341 005470      1342 005477      1343 005505
   1345 005507      1347 005510      1351 005522      1355 005524      1358 005530      1361 005536      1364 005542
   1369 005546      1373 005547      1375 005552      1376 005553      1379 005554      1380 005555      1382 005556
   1385 005557      1390 005562      1394 005564      1396 005565      1397 005567      1399 005570      1402 005577
   1404 005602      1406 005620      1407 005627      1409 005630      1411 005632      1413 005650      1414 005657
   1417 005660      1419 005666      1421 005674      1424 005700      1427 005707      1429 005711      1430 005713
   1433 005715      1438 005723      1440 005724      1444 005725      1446 005726      1449 005735      1450 005736
   1451 005741      1452 005746      1453 005747      1454 005751      1455 005755      1458 005756      1460 005757
   1463 005766      1464 005767      1465 005772      1466 005777      1467 006000      1468 006002      1469 006006
   1472 006007      1474 006010      1478 006011      1480 006015      1482 006016      1484 006022      1485 006026
   1487 006027      1489 006033      1490 006035      1491 006041      1493 006042      1495 006046      1496 006050
   1497 006054      1499 006055      1501 006061      1502 006063      1504 006064      1506 006071      1507 006074
   1509 006075      1511 006102      1512 006105      1514 006106      1517 006113      1518 006116      1519 006121
   1521 006122      1524 006127      1527 006134      1529 006135      1531 006142      1532 006145      1534 006146
   1536 006154      1537 006156      1538 006162      1540 006163      1542 006171      1543 006173      1544 006177
   1546 006200      1548 006203      1549 006207      1551 006210      1553 006213      1554 006217      1556 006220
   1558 006225      1559 006230      1561 006231      1563 006242      1565 006243      1572 006244      1575 006246
   1577 006251      1579 006252      1581 006264      1584 006272      1587 006301      1589 006305      1591 006314
   1594 006315      1596 006326      1598 006332      1603 006333      1607 006335      1609 006336      1611 006343
   1612 006346      1614 006352      1616 006356      1617 006361      1619 006365      1622 006370      1624 006373
   1626 006377      1628 006401      1630 006406      1631 006410      1634 006414      1636 006417      1639 006425
   1642 006427      1644 006431      1646 006434      1647 006436      1648 006440      1650 006441      1652 006446
   1654 006454      1655 006460      1656 006461      1660 006462      1666 006473      1670 006474      1672 006505
   1674 006516      1676 006522      1679 006525      1681 006526      1684 006531      1687 006545      1689 006546
   1693 006555      1694 006560      1696 006561      1698 006564      1700 006565      1703 006570      1705 006571
   1707 006573      1709 006574      1711 006576      1746 006577      1751 006610      1753 006611      1756 006613
   1757 006614      1759 006617      1766 006632      1768 006637      1770 006657      1773 006663      1774 006665
   1775 006667      1776 006674      1777 006676      1778 006704      1779 006711      1780 006715      1781 006716
   1785 006720      1788 006722      1789 006726      1790 006730      1794 006734      1796 006745      1798 006765
   1802 007011      1804 007013      1805 007023      1806 007037      1808 007042      1810 007056      1812 007074
   1813 007106      1815 007131      1817 007134      1819 007135      1822 007141      1824 007142      1829 007157
   1831 007160      1837 007173      1839 007174      1845 007175      1846 007204      1848 007211      1850 007214
   1852 007215      1857 007221      1859 007223      1860 007225      1863 007227      1864 007231      1867 007233
   1870 007241      1873 007245      1876 007247      1879 007255      1882 007263      1885 007265      1886 007267
   1888 007272      1896 007311      1899 007312      1903 007313      1911 007332      1920 007334      1923 007336
   1926 007341      1934 007360      1936 007363      1939 007364      1942 007366      1945 007367      1948 007376
   1951 007377      1954 007402      1958 007403      1971 007437      1973 007442      1974 007443      1979 007444
   1981 007447      1983 007454      1986 007455      1993 007464      2084 007465      2088 007500      2090 007501
   2097 007502      2100 007506      2101 007510      2104 007511      2106 007522      2107 007523      2108 007526
   2111 007527      2115 007530      2118 007534      2122 007535      2125 007541      2129 007542      2132 007546
   2136 007547      2139 007553      2143 007554      2146 007560      2150 007561      2153 007565      2157 007566
   2162 007576      2163 007602      2166 007603      2169 007607      2172 007620      2174 007642      2178 007643
   2182 007647      2184 007652      2188 007653      2193 007657      2197 007677      2198 007704      2200 007706
   2202 007711      2206 007712      2215 007717      2217 007720      2219 007721      2223 007722      2227 007727
   2229 007734      2234 007735      2239 007742      2241 007747      2243 007750      2245 007752      2247 007771
   2249 010002      2250 010006      2252 010010      2256 010011      2258 010013      2262 010014      2264 010025
   2267 010027      2269 010033      2270 010037      2272 010042      2277 010043      2281 010047      2285 010050
   2289 010054      2291 010057      2295 010060      2299 010073      2304 010074      2308 010077      2310 010107
   2312 010116      2314 010121      2319 010140      2323 010160      2326 010161      2379 010162      2382 010170
   2386 010171      2389 010176      2393 010177      2396 010205      2400 010206      2404 010211      2406 010221
   2412 010241      2414 010251      2417 010252      2419 010260      2422 010262      2426 010263      2429 010271
   2433 010272      2436 010277      2440 010300      2443 010305      2447 010306      2451 010315      2453 010325
   2455 010334      2457 010335      2459 010336      2462 010346      2466 010347      2470 010352      2472 010362
   2474 010402      2477 010407      2481 010410      2484 010416      2488 010417      2492 010422      2494 010432
   2496 010452      2498 010457      2503 010460      2507 010463      2508 010471      2510 010501      2512 010521
   2514 010527      2516 010535      2520 010536      2523 010544      2527 010545      2531 010550      2532 010560
   2534 010570      2535 010573      2540 010574      2543 010606      2547 010607      2550 010615      2554 010616
   2557 010626      2561 010627      2564 010634      2566 010635      2570 010647      2573 010652      2577 010653
   2580 010661      2584 010662      2587 010672      2591 010673      2595 010676      2597 010706      2599 010726
   2602 010733      2606 010734      2609 010742      2613 010743      2616 010751      2620 010752      2623 010760
   2627 010761      2631 010764      2633 010774      2635 011014      2638 011024      2642 011025      2647 011026
   2652 011027      2656 011032      2658 011042      2660 011062      2663 011067      2667 011070      2670 011075
   2672 011106      2676 011107      2681 011113      2684 011130      2686 011131      2690 011135      2692 011140
   2694 011145      2697 011146      2700 011154      2702 011155      2705 011161      2708 011176      2712 011177
   2715 011202      2717 011210      2719 011215      2723 011216      2725 011217      2728 011223      2730 011226
   2731 011230      2734 011232      2738 011233      2742 011234      2745 011242      2747 011243      2751 011253
   2754 011256      2757 011271      2760 011272      2762 011274      2766 011275      2772 011302      2774 011324
   2776 011330      2778 011340      2779 011343      2782 011344      2784 011345      2788 011350      2791 011354
   2794 011355      2798 011362      2804 011427      2808 011431      2812 011432      2815 011436      2819 011437
   2823 011451      2824 011452      2826 011455      2828 011464      2829 011466      2832 011467      2836 011470
   2839 011471      2842 011472      2847 011500      2849 011505      2851 011525      2853 011531      2856 011542
   2859 011544      2861 011545      2864 011546      2867 011551      2869 011552      2873 011561      2875 011564
   2877 011605      2879 011611      2882 011622      2885 011624      2887 011625      2890 011626      2892 011627
   2894 011632      2895 011633      2897 011634      2900 011644      2901 011647      2904 011650      2908 011651
   2911 011664      2915 011665      2918 011673      2922 011674      2925 011702      2929 011703      2932 011710
   2936 011713      2939 011721      2942 011726      2945 011733      2948 011740      2951 011745      2954 011752
   2957 011757      2960 011764      2963 011771      2969 011775      2970 012001      2972 012003      2993 012004
   2997 012021      2998 012023      3001 012024      3003 012025      3006 012031      3007 012034      3009 012035
   3014 012041      3017 012057      3033 012060      3036 012066      3040 012067      3043 012101      3047 012102
   3050 012110      3055 012111      3058 012123      3062 012124      3065 012136      3069 012137      3072 012145
   3076 012146      3079 012160      3080 012164      3082 012165      3084 012166      3087 012200      3090 012201
   3094 012206      3098 012211      3101 012217      3103 012223      3105 012225      3108 012230      3110 012232
   3112 012234      3113 012235      3114 012236      3116 012240      3117 012242      3118 012244      3119 012245
   3121 012247      3122 012250      3123 012251      3125 012253      3126 012254      3127 012255      3129 012257
   3130 012260      3131 012261      3133 012263      3134 012264      3135 012265      3137 012267      3138 012270
   3139 012271      3141 012273      3142 012275      3143 012277      3144 012300      3146 012302      3147 012303
   3148 012304      3150 012306      3153 012307      3156 012316      3158 012320      3161 012322      3164 012330
   3171 012331      3173 012333      3193 012334      3202 012342      3205 012353      3206 012354      3209 012355
   3215 012356      3219 012361      3221 012371      3223 012411      3226 012416      3229 012423      3233 012424
   3236 012432      3238 012433      3244 012447      3246 012450      3265 012451      3269 012453      3273 012454
   3276 012460      3280 012461      3283 012467      3287 012470      3290 012474      3294 012475      3297 012507
   3301 012510      3304 012516      3306 012521      3310 012550      3312 012551      3315 012566      3319 012567
   3322 012573      3326 012574      3329 012600      3333 012601      3336 012605      3340 012606      3343 012612
   3346 012613      3349 012617      3353 012620      3356 012624      3360 012625      3363 012631      3367 012632
   3370 012636      3374 012637      3377 012643      3381 012644      3384 012650      3388 012651      3391 012655
   3395 012656      3398 012670      3400 012671      3402 012672      3404 012673      3407 012674      3575 012675
   3578 012706      3581 012715      3585 012726      3586 012733      3589 012742      3593 012755      3597 013015
   3635 013025      3642 013040      3644 013061      3648 013072      3649 013075      3651 013076      3654 013103
   1031 013112      1034 013113      1036 013122      1039 013133      1042 013153      1047 013173      1049 013174
   1053 013176      1057 013201      1059 013205      1060 013210      1061 013211      1062 013213      1065 013214
   1067 013220      1068 013223      1069 013224      1070 013226      1073 013227      1075 013233      1076 013236
   1077 013237      1078 013241      1081 013242      1083 013246      1084 013251      1085 013252      1086 013254
   1091 013255      1093 013271      1094 013276      1097 013277      1099 013306      1102 013311      1714 013312
   1716 013313      1717 013315      1722 013327      1723 013331      1727 013334      1729 013343      1730 013345
   1732 013347      1734 013351      1735 013353      1738 013354      1740 013360      1741 013362      1743 013363
   1996 013364      2000 013365      2002 013372      2004 013374      2007 013376      2009 013410      2011 013411
   2023 013412      2025 013416      2027 013420      2029 013422      2030 013423      2032 013426      2034 013430
   2036 013432      2037 013433      2039 013436      2041 013440      2043 013442      2044 013443      2047 013450
   2048 013452      2049 013454      2050 013455      2052 013460      2054 013462      2056 013464      2057 013465
   2060 013466      2063 013467      2066 013475      2069 013506      2072 013510      2075 013515      2076 013521
   2079 013523      2080 013526      2082 013530      2328 013531      2333 013533      2337 013540      2339 013562
   2341 013566      2343 013605      2345 013607      2348 013617      2352 013623      2355 013627      2358 013636
   2360 013637      2362 013640      2365 013641      2367 013650      2370 013654      2375 013667      2975 013670
   2979 013671      2982 013677      2985 013701      2988 013703      2989 013707      2991 013711      3019 013712
   3024 013714      3026 013722      3029 013727      3175 013730      3179 013731      3180 013734      3182 013740
   3184 013741      3188 013742      3189 013745      3191 013751      3413 013752      3416 013753      3418 013756
   3420 013760      3422 013775      3425 014002      3427 014004      3428 014007      3431 014010      3433 014013
   3438 014014      3439 014020      3441 014022      3444 014034      3447 014050      3449 014055      3451 014063
   3454 014071      3457 014075      3461 014100      3462 014102      3463 014104      3464 014106      3465 014110
   3466 014112      3467 014114      3468 014116      3469 014120      3470 014122      3471 014124      3472 014126
   3473 014130      3474 014132      3475 014134      3476 014136      3480 014140      3483 014141      3488 014143
   3489 014146      3492 014150      3494 014163      3496 014166      3498 014167      3505 014171      3507 014173
   3508 014176      3510 014210      3511 014212      3512 014216      3513 014220      3514 014222      3515 014224
   3516 014226      3517 014230      3518 014232      3519 014233      3521 014235      3523 014244      3524 014246
   3526 014247      3531 014251      3532 014256      3533 014260      3534 014262      3537 014264      3539 014272
   3541 014273      3543 014274      3550 014276      3553 014277      3555 014305      3558 014306      3566 014310
   3567 014313      3568 014315      3569 014317      3571 014320      3573 014326


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
