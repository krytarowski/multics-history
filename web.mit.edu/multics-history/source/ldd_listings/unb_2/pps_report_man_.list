	COMPILATION LISTING OF SEGMENT pps_report_man_
	Compiled by: Multics PL/I Compiler, Release 29, of July 28, 1986
	Compiled at: Honeywell Bull, Phoenix AZ, SysM
	Compiled on: 02/02/88  1648.1 mst Tue
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 pps_report_man_: proc (); return;
       12 
       13 
       14 
       15 /*		PARAMETERS		*/
       16 
       17 
       18 dcl  code fixed bin (35);
       19 
       20 
       21 /*		ENTRY CONSTANTS		*/
       22 
       23 
       24 dcl  ioa_ entry options (variable);
       25 dcl  ioa_$rsnnl entry options (variable);
       26 dcl  iox_$attach_ioname entry (char (*), ptr, char (*), fixed bin (35));
       27 dcl  iox_$close entry (ptr, fixed bin (35));
       28 dcl  iox_$detach_iocb entry (ptr, fixed bin (35));
       29 dcl  iox_$open entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
       30 dcl  iox_$write_record entry (ptr, ptr, fixed bin (21), fixed bin (35));
       31 dcl  pps_print$init entry ();
       32 dcl  pps_print$flush entry (ptr, fixed bin (35));
       33 dcl  pps_put_chars entry (ptr, ptr, fixed bin (21), fixed bin (35));
       34 dcl  pps_util_$make_ppscb_record entry (ptr, ptr, fixed bin, fixed bin (35));
       35 
       36 
       37 /*		EXTERNAL DATA		*/
       38 
       39 
       40 
       41 
       42 /*		BUILTIN FUNCTIONS		*/
       43 
       44 
       45 dcl  addr builtin;
       46 dcl  divide builtin;
       47 dcl  length builtin;
       48 dcl  null builtin;
       49 dcl  substr builtin;
       50 dcl  unspec builtin;
       51 
       52 
       53 /*		AUTOMATIC STORAGE		*/
       54 
       55 
       56 dcl  i fixed bin;
       57 dcl  iocb_ptr ptr;
       58 dcl  my_ppscb_rec_len fixed bin;
       59 dcl  string char (256);
       60 dcl  string_len fixed bin;
       61 
       62 
       63 dcl 1 my_ppscb_rec aligned,
       64     2 line (100) char (133);
       65 
       66 
       67 /*		CONSTANTS			*/
       68 
       69 
       70 dcl  FF char (1) static internal options (constant) init ("");
       71 dcl  SEQ_OUT fixed bin static internal options (constant) init (5);
       72 
       73 
       74 /*		INTERNAL STATIC		*/
       75 
       76 
       77 
       78 
       79 /*		BASED VARIABLES		*/
       80 
       81 /*
       82*
       83*   This entry provides the attachment of the target I/O switch.
       84*
       85**/
       86 
       87 
       88 attach: entry (iocb_ptr, code);
       89 
       90 
       91 	code = 0;
       92 	ppsab_ptr = iocb.attach_data_ptr;
       93 	ppscb_ptr = ppsab.ppscb_ptr;
       94 
       95 
       96 /*
       97*
       98*   Create the attach description for the target I/O switch.
       99*
      100**/
      101 
      102 
      103 	call ioa_$rsnnl (ppsab.target_attach_descrip, string, string_len, ppsab.volids, ppsab.file_number,
      104 	     ppsab.file_number, ppsab.tape_density, ppsab.retain_option);
      105 
      106 
      107 /*
      108*
      109*   Attach the target I/O switch.
      110*
      111**/
      112 
      113 
      114 	if ppsab.modes.debug then call ioa_ ("Attaching target iocb as ""^a"".", substr (string, 1, string_len));
      115 	else call iox_$attach_ioname (ppsab.target_name, ppsab.target_iocb_ptr, substr (string, 1, string_len), code);
      116 	if code ^= 0 then return;
      117 
      118 
      119 /*
      120*
      121*   Open the target I/O switch.
      122*
      123**/
      124 
      125 
      126 	if ppsab.modes.debug then call ioa_ ("Opening target iocb.");
      127 	else call iox_$open (ppsab.target_iocb_ptr, SEQ_OUT, "0"b, code);
      128 	if code ^= 0 then return;			/* may need to detach */
      129 
      130 
      131 /*
      132*
      133*   Now, if we have a control block, convert it to a ppscb record and write it to tape.
      134*
      135**/
      136 
      137 
      138 	if ppscb_ptr = null () then ppscb_ptr = addr (DEFAULT_PPS_CONTROL_BLOCK);
      139 	unspec (my_ppscb_rec) = "0"b;
      140 	call pps_util_$make_ppscb_record (ppscb_ptr, addr (my_ppscb_rec), my_ppscb_rec_len, code);
      141 	if code ^= 0 then return;
      142 
      143 
      144 	do i = 1 to divide ((my_ppscb_rec_len+3), 4, 17, 0);
      145 	     call iox_$write_record (ppsab.target_iocb_ptr, addr (my_ppscb_rec.line (i)), length (my_ppscb_rec.line (i)), code);
      146 	     if code ^= 0 then return;
      147 	end;
      148 
      149 	return;
      150 
      151 /*
      152*
      153*   This entry is called to initialize certain values in the attach data after
      154*   the target I/O switch has been attached.
      155*
      156**/
      157 
      158 
      159 init: entry (iocb_ptr,code);
      160 
      161 
      162 	code = 0;
      163 	ppsab_ptr = iocb.attach_data_ptr;
      164 
      165 	ppsab.pps_pci.level = 0;
      166 	ppsab.pps_pci.pos = 0;
      167 	ppsab.pps_pci.line = ppsab.pps_pci.phys_page_length*ppsab.pps_pci.sheets_per_page
      168 	     -divide (ppsab.pps_pci.lpi, 2, 17, 0)+1;
      169 	ppsab.pps_pci.slew_residue = 0;
      170 	ppsab.pps_pci.label_wksp = null ();
      171 	ppsab.pps_pci.label_nelem = 0;
      172 	ppsab.pps_pci.sav_pos = 0;
      173 	ppsab.pps_pci.temp = (36)"0"b;
      174 
      175 	return;
      176 
      177 /*
      178*
      179*   This entry is called to start a new report.  It must be called after the two
      180*   preceeding entries.
      181*
      182**/
      183 
      184 
      185 start: entry (iocb_ptr,code);
      186 
      187 
      188 	code = 0;
      189 
      190 
      191 /*
      192*
      193*   Initialize the kludge module which will handle the overprinting.
      194*
      195**/
      196 
      197 
      198 	call pps_print$init ();
      199 
      200 
      201 /*
      202*
      203*   Now we must initialize the output procedure, prt_conv_, to get him to the top of his output page.
      204*
      205**/
      206 
      207 
      208 	call pps_put_chars (iocb_ptr, addr (FF), length (FF), code);
      209 
      210 
      211 	return;
      212 
      213 stop: entry (iocb_ptr, code);
      214 
      215 
      216       code = 0;
      217       ppsab_ptr = iocb.attach_data_ptr;
      218 
      219 
      220 /*
      221*
      222*   Flush any buffered output.
      223*
      224**/
      225 
      226 
      227 	call pps_print$flush (ppsab.target_iocb_ptr, code);
      228 
      229 
      230 /*
      231*
      232*   Now close and detach the target I/O switch.
      233*
      234**/
      235 
      236 
      237 	if ppsab.modes.debug then call ioa_ ("Closing and detaching target.");
      238 	else do;
      239 	     call iox_$close (ppsab.target_iocb_ptr, code);
      240 	     call iox_$detach_iocb (ppsab.target_iocb_ptr, code);
      241 	end;
      242 
      243 
      244 	return;
      245 
      246 
  1     1 
  1     2      dcl	   1 iocb		      aligned based (iocb_ptr),
  1     3 						/* I/O control block. */
  1     4 	     2 iocb_version	      fixed init (1),	/* Version number of structure. */
  1     5 	     2 name	      char (32),		/* I/O name of this block. */
  1     6 	     2 actual_iocb_ptr    ptr,		/* IOCB ultimately SYNed to. */
  1     7 	     2 attach_descrip_ptr ptr,		/* Ptr to printable attach description. */
  1     8 	     2 attach_data_ptr    ptr,		/* Ptr to attach data structure. */
  1     9 	     2 open_descrip_ptr   ptr,		/* Ptr to printable open description. */
  1    10 	     2 open_data_ptr      ptr,		/* Ptr to open data structure (old SDB). */
  1    11 	     2 reserved	      bit (72),		/* Reserved for future use. */
  1    12 	     2 detach_iocb	      entry (ptr, fixed (35)),/* detach_iocb(p,s) */
  1    13 	     2 open	      entry (ptr, fixed, bit (1) aligned, fixed (35)),
  1    14 						/* open(p,mode,not_used,s) */
  1    15 	     2 close	      entry (ptr, fixed (35)),/* close(p,s) */
  1    16 	     2 get_line	      entry (ptr, ptr, fixed (21), fixed (21), fixed (35)),
  1    17 						/* get_line(p,bufptr,buflen,actlen,s) */
  1    18 	     2 get_chars	      entry (ptr, ptr, fixed (21), fixed (21), fixed (35)),
  1    19 						/* get_chars(p,bufptr,buflen,actlen,s) */
  1    20 	     2 put_chars	      entry (ptr, ptr, fixed (21), fixed (35)),
  1    21 						/* put_chars(p,bufptr,buflen,s) */
  1    22 	     2 modes	      entry (ptr, char (*), char (*), fixed (35)),
  1    23 						/* modes(p,newmode,oldmode,s) */
  1    24 	     2 position	      entry (ptr, fixed, fixed (21), fixed (35)),
  1    25 						/* position(p,u1,u2,s) */
  1    26 	     2 control	      entry (ptr, char (*), ptr, fixed (35)),
  1    27 						/* control(p,order,infptr,s) */
  1    28 	     2 read_record	      entry (ptr, ptr, fixed (21), fixed (21), fixed (35)),
  1    29 						/* read_record(p,bufptr,buflen,actlen,s) */
  1    30 	     2 write_record	      entry (ptr, ptr, fixed (21), fixed (35)),
  1    31 						/* write_record(p,bufptr,buflen,s) */
  1    32 	     2 rewrite_record     entry (ptr, ptr, fixed (21), fixed (35)),
  1    33 						/* rewrite_record(p,bufptr,buflen,s) */
  1    34 	     2 delete_record      entry (ptr, fixed (35)),/* delete_record(p,s) */
  1    35 	     2 seek_key	      entry (ptr, char (256) varying, fixed (21), fixed (35)),
  1    36 						/* seek_key(p,key,len,s) */
  1    37 	     2 read_key	      entry (ptr, char (256) varying, fixed (21), fixed (35)),
  1    38 						/* read_key(p,key,len,s) */
  1    39 	     2 read_length	      entry (ptr, fixed (21), fixed (35));
  1    40 						/* read_length(p,len,s) */
  1    41 
      247 
      248 
  2     1 /*  Begin include file  ...  pps_attach_block.incl.pl1  */
  2     2 
  2     3 
  2     4 dcl  pps_attach_block_version_1 fixed bin static internal options (constant) init (1);
  2     5 dcl  ppsab_ptr ptr;
  2     6 
  2     7 dcl 1 ppsab based (ppsab_ptr) aligned,
  2     8     2 version fixed bin,
  2     9     2 attach_descrip char (256) varying,
  2    10     2 target_name char (32) unal,
  2    11     2 target_attach_descrip char (256) unal,
  2    12     2 detach_time_attach_descrip char (256) unal,
  2    13     2 target_iocb_ptr ptr,
  2    14     2 modes,
  2    15       3 debug bit (1) unal,
  2    16       3 no_print bit (1) unal,
  2    17       3 single_page bit (1) unal,
  2    18     2 ppscb_dir char (168) unal,
  2    19     2 ppscb_entry char (32) unal,
  2    20     2 ppscb_name char (32) unal,
  2    21     2 ppscb_ptr ptr,
  2    22     2 tape_density fixed bin,
  2    23     2 file_number fixed bin,
  2    24     2 file_name char (17),
  2    25     2 retain_option char (4) varying,
  2    26     2 volids char (256) varying,
  2    27     2 open_descrip char (256) varying,
  2    28     2 table_ptr ptr,
  2    29     2 mvt_entry entry,
  2    30     2 stop_every fixed bin (71),
  2    31     2 stop_count fixed bin (71),
  2    32     2 chars_printed fixed bin (35),
  2    33     2 paper_info,
  2    34       3 cpii fixed bin,
  2    35       3 lpii fixed bin,
  2    36       3 swi fixed bin,
  2    37       3 sli fixed bin,
  2    38     2 pps_pci like pci;
  2    39 
  3     1 
  3     2 /* BEGIN INCLUDE FILE ... prt_conv_info.incl.pl1 */
  3     3 /* Modified: 12 September 1980 by G. Palter */
  3     4 
  3     5 
  3     6 /****^  HISTORY COMMENTS:
  3     7*  1) change(87-05-10,Gilcrease), approve(87-07-31,MCR7686),
  3     8*     audit(88-02-01,Farley), install(88-02-02,MR12.2-1019):
  3     9*     Add modes.line_nbrs, flags.(eol eof)  bits for eor -nb.
  3    10*                                                   END HISTORY COMMENTS */
  3    11 
  3    12 
  3    13 dcl  pcip ptr;					/* pointer to conversion info structure */
  3    14 
  3    15 dcl 1 pci based (pcip) aligned,			/* printer conversion info structure */
  3    16     2 cv_proc ptr,					/* pointer to character conversion procedure */
  3    17     2 lmarg fixed bin,				/* left margin indentation */
  3    18     2 rmarg fixed bin,				/* right margin limit */
  3    19     2 page_length fixed bin,				/* number of lines on page */
  3    20     2 phys_line_length fixed bin,			/* physical width of paper */
  3    21     2 phys_page_length fixed bin,			/* physical length of paper */
  3    22     2 lpi fixed bin,				/* lines per inch */
  3    23     2 sheets_per_page fixed bin,			/* sheets of paper per logical page */
  3    24     2 line_count fixed bin,				/* count of converted lines */
  3    25     2 page_count fixed bin,				/* count of converted pages */
  3    26     2 func fixed bin,				/* special conversion function */
  3    27 						/* 0 => normal conversion */
  3    28 						/* 1 => change NL to FF */
  3    29 						/* 2 => change NL to top inside page */
  3    30 						/* 3 => change NL to end of page */
  3    31                                                             /* 4 => change NL to top of outside page */
  3    32     (2 modes,					/* conversion modes */
  3    33      3 overflow_off bit (1),				/* "1"b to suppress end of page overflow */
  3    34       3 single_space bit (1),				/* "1"b to change all forms advance chars to NL */
  3    35       3 non_edited bit (1),				/* "1"b to print ASCII control chars */
  3    36       3 truncate bit (1),				/* "1"b to truncate lines that are too long */
  3    37       3 esc bit (1),				/* "1"b to process ESC character */
  3    38       3 ctl_char bit (1),				/* "1"b to output control characters */
  3    39       3 line_nbrs bit (1),				/* "1"b to output line numbers */
  3    40       3 pci_pad bit (5),
  3    41     2 flags,					/* flags internal to prt_conv_ */
  3    42       3 ignore_next_ff bit (1),			/* ON => prt_conv_ just output a FF; ignore next character if
  3    43*						   it's a FF */
  3    44       3 eol bit (1),				/* "1"b = end-of-line encountered */
  3    45       3 eof bit (1),				/* "1"b = end-of-segment encountered */
  3    46       3 flags_pad bit (3),
  3    47     2 coroutine_modes,
  3    48       3 upper_case bit(1),				/* "1"b to convert to upper case */
  3    49       3 ht bit(1),					/* "1"b to skip tab conversion */
  3    50       3 coroutine_pad bit(13),
  3    51       3 slew_table_idx bit(3) ) unal,			/* slew table index */
  3    52     2 top_label_line char (136),			/* contains an optional top of page label */
  3    53     2 bot_label_line char (136),			/* contains an optional bottom of page label */
  3    54     2 top_label_length fixed bin,			/* length of top label line */
  3    55     2 bot_label_length fixed bin,			/* length of bottom label line */
  3    56     2 form_stops (256) unal,				/* logical form stops */
  3    57       3 lbits bit (9),				/* leftmost bits */
  3    58       3 rbits bit (9),				/* rightmost bits */
  3    59 
  3    60 /* The following items are for internal use by the print conversion procedure.
  3    61*   They should be zeroed once and then never referenced again.		*/
  3    62 
  3    63     2 level fixed bin,				/* overstrike level */
  3    64     2 pos fixed bin,				/* print position at end of incomplete line */
  3    65     2 line fixed bin,				/* current line number */
  3    66     2 slew_residue fixed bin,				/* number of lines remaining to be slewed */
  3    67     2 label_nelem fixed bin,				/* characters remaining in label */
  3    68     2 label_wksp ptr,				/* pointer to label being processed */
  3    69     2 sav_pos fixed bin,				/* position saved during label processing */
  3    70     2 esc_state fixed bin,				/* state of ESC processing */
  3    71     2 esc_num fixed bin,				/* number following ESC sequence */
  3    72     2 temp bit (36);				/* conversion proc temporary */
  3    73 
  3    74 /* End of include file ...... prt_conv_info.incl.pl1 */
  3    75 
  2    40 
  2    41 
  2    42 
  2    43 /*  End include file  ...  pps_attach_block.incl.pl1  */
      249 
      250 
  4     1 /*  Begin include file  ...  pps_control_block.incl.pl1  */
  4     2 
  4     3 
  4     4 dcl  ppscb_ptr ptr;
  4     5 
  4     6 dcl 1 ppscb aligned based (ppscb_ptr),
  4     7     2 version fixed bin,				/* should be 1 */
  4     8     2 name char (32),
  4     9     2 cv_ppscb_version fixed bin,
  4    10     2 job_name char (17),
  4    11     2 pause bit (1),
  4    12     2 pps_only bit (1),
  4    13     2 vfu_tape_code char (1),
  4    14     2 job_description char (40),
  4    15     2 stacker_algorithm fixed bin,
  4    16     2 primary_character_generator fixed bin,
  4    17     2 fixed_print_algorithm_code fixed bin,
  4    18     2 paper_width fixed dec (4, 1),
  4    19     2 sheet_length fixed dec (4, 1),
  4    20     2 lines_per_inch fixed bin,
  4    21     2 num_copies fixed bin,
  4    22     2 num_copies_before_blanking fixed bin,
  4    23     2 character_size fixed bin,
  4    24     2 code_conversion fixed bin,
  4    25     2 preprinted_form_number fixed bin,
  4    26     2 toner_configuration fixed bin,
  4    27     2 routing_placement_control fixed bin,
  4    28     2 punch_code fixed bin,
  4    29     2 forms_control (93) fixed bin (8) unal,
  4    30     2 page_format (210) aligned,
  4    31       3 operation fixed bin (3) unal,
  4    32       3 line_num fixed bin (8) unal,
  4    33       3 char_num fixed bin (8) unal,
  4    34     2 routing_count (29) fixed bin,
  4    35     2 routing_data char (1024);
  4    36 
  4    37 
  4    38 dcl 1 DEFAULT_PPS_CONTROL_BLOCK aligned static internal options (constant),
  4    39     2 version fixed bin init (1),			/* should be 1 */
  4    40     2 name char (32) init (""),
  4    41     2 cv_ppscb_version fixed bin init (1),
  4    42     2 job_name char (17) init (""),
  4    43     2 pause bit (1) init ("0"b),
  4    44     2 pps_only bit (1) init ("0"b),
  4    45     2 vfu_tape_code char (1) init ("a"),
  4    46     2 job_description char (40) init (""),
  4    47     2 stacker_algorithm fixed bin init (0),
  4    48     2 primary_character_generator fixed bin init (0),
  4    49     2 fixed_print_algorithm_code fixed bin init (0),
  4    50     2 paper_width fixed dec (4, 1) init (11.0),
  4    51     2 sheet_length fixed dec (4, 1) init (8.5),
  4    52     2 lines_per_inch fixed bin init (8),
  4    53     2 num_copies fixed bin init (1),
  4    54     2 num_copies_before_blanking fixed bin init (0),
  4    55     2 character_size fixed bin init (0),
  4    56     2 code_conversion fixed bin init (3),
  4    57     2 preprinted_form_number fixed bin init (0),
  4    58     2 toner_configuration fixed bin init (0),
  4    59     2 routing_placement_control fixed bin init (2),
  4    60     2 punch_code fixed bin init (0),
  4    61     2 forms_control (93) fixed bin (8) unal init ((2)0, 1, (90)0),
  4    62     2 page_format (210) aligned,
  4    63       3 operation fixed bin (3) unal init ((210)0),
  4    64       3 line_num fixed bin (8) unal init ((210)0),
  4    65       3 char_num fixed bin (8) unal init ((210)0),
  4    66     2 routing_count (29) fixed bin init ((29)0),
  4    67     2 routing_data char (1024);
  4    68 
  4    69 
  4    70 /*  End include file  ...  pps_control_block.incl.pl1  */
      251 
      252 
      253 
      254      end pps_report_man_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    02/02/88  1540.0  pps_report_man_.pl1               >special_ldd>install>MR12.2-1019>pps_report_man_.pl1
247          1    07/02/81  1905.0  iocbv.incl.pl1                    >ldd>include>iocbv.incl.pl1
249          2    03/27/82  0438.0  pps_attach_block.incl.pl1         >ldd>include>pps_attach_block.incl.pl1
2-40         3    02/02/88  1529.2  prt_conv_info.incl.pl1            >special_ldd>install>MR12.2-1019>prt_conv_info.incl.pl1
251          4    03/27/82  0438.0  pps_control_block.incl.pl1        >ldd>include>pps_control_block.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
DEFAULT_PPS_CONTROL_BLOCK       000000 constant        structure                level 1 dcl 4-38 set ref 138
FF                              001064 constant        char(1)                  initial unaligned dcl 70 set ref 208 208 208 208
SEQ_OUT                         001063 constant        fixed bin(17,0)          initial dcl 71 set ref 127*
addr                                                   builtin function         dcl 45 ref 138 140 140 145 145 208 208
attach_data_ptr          16            based           pointer                  level 2 dcl 1-2 ref 92 163 217
code                                   parameter       fixed bin(35,0)          dcl 18 set ref 88 91* 115* 116 127* 128 140* 141
                                                                                  145* 146 159 162* 185 188* 208* 213 216* 227* 239*
                                                                                  240*
debug                   314            based           bit(1)                   level 3 packed unaligned dcl 2-7 ref 114 126 237
divide                                                 builtin function         dcl 46 ref 144 167
file_number             413            based           fixed bin(17,0)          level 2 dcl 2-7 set ref 103* 103*
i                               000100 automatic       fixed bin(17,0)          dcl 56 set ref 144* 145 145 145 145*
ioa_                            000010 constant        entry                    external dcl 24 ref 114 126 237
ioa_$rsnnl                      000012 constant        entry                    external dcl 25 ref 103
iocb                                   based           structure                level 1 dcl 1-2
iocb_ptr                               parameter       pointer                  dcl 57 set ref 88 92 159 163 185 208* 213 217
iox_$attach_ioname              000014 constant        entry                    external dcl 26 ref 115
iox_$close                      000016 constant        entry                    external dcl 27 ref 239
iox_$detach_iocb                000020 constant        entry                    external dcl 28 ref 240
iox_$open                       000022 constant        entry                    external dcl 29 ref 127
iox_$write_record               000024 constant        entry                    external dcl 30 ref 145
label_nelem            1175            based           fixed bin(17,0)          level 3 dcl 2-7 set ref 171*
label_wksp             1176            based           pointer                  level 3 dcl 2-7 set ref 170*
length                                                 builtin function         dcl 47 ref 145 145 208 208
level                  1171            based           fixed bin(17,0)          level 3 dcl 2-7 set ref 165*
line                   1173            based           fixed bin(17,0)          level 3 in structure "ppsab" dcl 2-7 in procedure
                                                                                  "pps_report_man_" set ref 167*
line                            000203 automatic       char(133)                array level 2 in structure "my_ppscb_rec" dcl 63
                                                                                  in procedure "pps_report_man_" set ref 145 145 145
                                                                                  145
lpi                     655            based           fixed bin(17,0)          level 3 dcl 2-7 ref 167
modes                   314            based           structure                level 2 dcl 2-7
my_ppscb_rec                    000203 automatic       structure                level 1 dcl 63 set ref 139* 140 140
my_ppscb_rec_len                000101 automatic       fixed bin(17,0)          dcl 58 set ref 140* 144
null                                                   builtin function         dcl 48 ref 138 170
pci                                    based           structure                level 1 dcl 3-15
phys_page_length        654            based           fixed bin(17,0)          level 3 dcl 2-7 ref 167
pos                    1172            based           fixed bin(17,0)          level 3 dcl 2-7 set ref 166*
pps_pci                 646            based           structure                level 2 dcl 2-7
pps_print$flush                 000030 constant        entry                    external dcl 32 ref 227
pps_print$init                  000026 constant        entry                    external dcl 31 ref 198
pps_put_chars                   000032 constant        entry                    external dcl 33 ref 208
pps_util_$make_ppscb_record     000034 constant        entry                    external dcl 34 ref 140
ppsab                                  based           structure                level 1 dcl 2-7
ppsab_ptr                       006714 automatic       pointer                  dcl 2-5 set ref 92* 93 103 103 103 103 103 103 114
                                                                                  115 115 126 127 145 163* 165 166 167 167 167 167
                                                                                  169 170 171 172 173 217* 227 237 239 240
ppscb_ptr               410            based           pointer                  level 2 in structure "ppsab" dcl 2-7 in procedure
                                                                                  "pps_report_man_" ref 93
ppscb_ptr                       006716 automatic       pointer                  dcl 4-4 in procedure "pps_report_man_" set ref 93*
                                                                                  138 138* 140*
retain_option           421            based           varying char(4)          level 2 dcl 2-7 set ref 103*
sav_pos                1200            based           fixed bin(17,0)          level 3 dcl 2-7 set ref 172*
sheets_per_page         656            based           fixed bin(17,0)          level 3 dcl 2-7 ref 167
slew_residue           1174            based           fixed bin(17,0)          level 3 dcl 2-7 set ref 169*
string                          000102 automatic       char(256)                unaligned dcl 59 set ref 103* 114 114 115 115
string_len                      000202 automatic       fixed bin(17,0)          dcl 60 set ref 103* 114 114 115 115
substr                                                 builtin function         dcl 49 ref 114 114 115 115
tape_density            412            based           fixed bin(17,0)          level 2 dcl 2-7 set ref 103*
target_attach_descrip
                        112            based           char(256)                level 2 packed unaligned dcl 2-7 set ref 103*
target_iocb_ptr         312            based           pointer                  level 2 dcl 2-7 set ref 115* 127* 145* 227* 239*
                                                                                  240*
target_name             102            based           char(32)                 level 2 packed unaligned dcl 2-7 set ref 115*
temp                   1203            based           bit(36)                  level 3 dcl 2-7 set ref 173*
unspec                                                 builtin function         dcl 50 set ref 139*
volids                  423            based           varying char(256)        level 2 dcl 2-7 set ref 103*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
pcip                                   automatic       pointer                  dcl 3-13
pps_attach_block_version_1             internal static fixed bin(17,0)          initial dcl 2-4
ppscb                                  based           structure                level 1 dcl 4-6

NAMES DECLARED BY EXPLICIT CONTEXT.
attach                          001142 constant        entry                    external dcl 88
init                            001465 constant        entry                    external dcl 159
pps_report_man_                 001130 constant        entry                    external dcl 11
start                           001530 constant        entry                    external dcl 185
stop                            001571 constant        entry                    external dcl 213

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      2044        2102    1664        2054
Length      2370    1664        36         252     160           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
pps_report_man_                    3584 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
pps_report_man_          000100 i                           pps_report_man_
                         000101 my_ppscb_rec_len            pps_report_man_
                         000102 string                      pps_report_man_
                         000202 string_len                  pps_report_man_
                         000203 my_ppscb_rec                pps_report_man_
                         006714 ppsab_ptr                   pps_report_man_
                         006716 ppscb_ptr                   pps_report_man_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
alloc_char_temp     call_ext_out_desc   call_ext_out        return_mac          shorten_stack       ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
ioa_                          ioa_$rsnnl                    iox_$attach_ioname            iox_$close
iox_$detach_iocb              iox_$open                     iox_$write_record             pps_print$flush
pps_print$init                pps_put_chars                 pps_util_$make_ppscb_record

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 001127        11 001135        88 001136        91 001147        92 001151        93 001155       103 001157
    114 001220       115 001254       116 001312       126 001316       127 001342       128 001361       138 001364
    139 001372       140 001376       141 001415       144 001420       145 001431       146 001455       147 001460
    149 001462       159 001463       162 001472       163 001474       165 001500       166 001501       167 001502
    169 001517       170 001520       171 001522       172 001523       173 001524       175 001525       185 001526
    188 001535       198 001537       208 001544       211 001566       213 001567       216 001576       217 001600
    227 001604       237 001615       239 001636       240 001650       244 001663


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
