	COMPILATION LISTING OF SEGMENT ted_comment_
	Compiled by: Multics PL/I Compiler, Release 27d, of October 11, 1982
	Compiled at: Honeywell LISD Phoenix, System M
	Compiled on: 11/23/82  1458.3 mst Tue
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 /**** format: ind3,ll80,initcol6,indattr,^inddcls,dclind4,idind16	       */
        7 /**** format: struclvlind2,^ifthenstmt,^ifthendo,^ifthen,^indnoniterdo       */
        8 /**** format: ^inditerdo,^indnoniterend,^indthenelse,case,^indproc,^indend   */
        9 /**** format: ^delnl,^insnl,comcol41,^indcom,^indblkcom,linecom,^indcomtxt   */
       10 
       11 ted_comment_:			/* add comments to a file	       */
       12        proc (ted_support_p, msg, code);
       13 
       14 dcl msg		char (168) var,
       15     code		fixed bin (35);
       16 
       17       if (ted_support_version_2 ^= ted_support.version)
       18       then do;
       19          code = error_table_$unimplemented_version;
       20          return;
       21       end;
       22 loop:
       23       ii = inp.se - inp.sb + 1;	/* how much range left	       */
       24       if (ii <= 0)
       25       then goto EOB;		/* WE'RE done!		       */
       26       i = index (substr (istr, inp.sb, ii), NL);
       27       if (i = 0)			/* calc line length		       */
       28       then i = ii;
       29       else i = i - 1;		/* must be >0 because if you type an */
       30       if (i > 0)			/* ..empty line with no NL, the user */
       31       then do;			/* ..doesn't get much indication     */
       32 				/* type what is already on line      */
       33          call iox_$put_chars (iox_$user_output, addr (ichr (inp.sb)), i, code);
       34 reask:				/* ask him what he wants to add      */
       35          call iox_$get_line (iox_$user_input, addr (buffer), length (buffer),
       36 	  il, code);
       37          if (il > 2)		/* if answer was big enough, see     */
       38          then do;			/* ..if it ends with a control       */
       39 	  ch2 = substr (buffer, il - 2, 2);
       40 	  if (ch2 = "\d")		/* he wants that line deleted	       */
       41 	  then do;
       42 	     inp.sb = inp.sb + i + 1; /* so do it already		       */
       43 	     goto loop;
       44 	  end;
       45 
       46 	  if (ch2 = "\f") | (ch2 = "\F")
       47 	  then goto finish;		/* he wants to bail out early	       */
       48 
       49 	  if (ch2 = "\i")
       50 	  then do;		/* he wants to insert some data      */
       51 	     if (i = 0)
       52 	        | (il ^= 3)		/* but he didn't say it nice	       */
       53 	     then do;
       54 	        call iox_$put_chars (iox_$user_output, addr (msg_bad),
       55 		 length (msg_bad), code);
       56 	        goto loop;
       57 	     end;
       58 	     i = 0;		/* go get the data for insertion     */
       59 	     goto reask;
       60 	  end;
       61 	  if (ch2 = "\a")		/* he wants data appended	       */
       62 	  then do;
       63 	     if (i > 0)
       64 	     then do;
       65 	        substr (ostr, out.de + 1, i)
       66 		 = substr (istr, inp.sb, i); /* copy the input line      */
       67 	        out.de = out.de + i;
       68 	        inp.sb = inp.sb + i + 1;
       69 	     end;
       70 add1:
       71 	     i = 0;
       72 	     il = il - 3;		/* knock off the control chars       */
       73 	     substr (ostr, out.de + 1, il)
       74 	        = substr (buffer, 1, il);   /* copy the new data	       */
       75 	     out.de = out.de + il + 1;
       76 	     substr (ostr, out.de, 1) = NL;
       77 	     call checkpoint (inp.sb - 1, out.de);
       78 	     goto reask;
       79 	  end;
       80          end;
       81          if (i > 0)
       82          then do;			/* just ordinary added data	       */
       83 	  substr (ostr, out.de + 1, i) = substr (istr, inp.sb, i);
       84 	  out.de = out.de + i;
       85 	  inp.sb = inp.sb + i + 1;
       86          end;
       87          substr (ostr, out.de + 1, il) = substr (buffer, 1, il);
       88          out.de = out.de + il;
       89       end;
       90       else do;
       91          substr (ostr, out.de + 1, 1) = NL;
       92          out.de = out.de + 1;
       93          inp.sb = inp.sb + 1;
       94       end;
       95       call checkpoint (inp.sb - 1, out.de);
       96       goto loop;
       97 
       98 EOB:
       99       if (inp.se = inp.de)
      100       then call iox_$put_chars (iox_$user_output, addr (msg_EOB),
      101          length (msg_EOB), code);
      102       else call iox_$put_chars (iox_$user_output, addr (NL), 1, code);
      103 
      104 finish:
      105       current = out.de;		/* tell ted where "." now is	       */
      106       i = inp.de - inp.sb + 1;
      107       substr (ostr, out.de + 1, i) = substr (istr, inp.sb, i);
      108       out.de = out.de + i;
      109       req.nc = req.cc;		/* let 'em use the rest of line      */
      110       inp.se = inp.de + 1;
      111       code = tederror_table_$Copy_Set;
      112       return;
  1     1 /* BEGIN INCLUDE FILE ..... ted_support.incl.pl1 ..... 03/16/81	       */
  1     2 
  1     3 /* more information may be found in ted_support.gi.info		       */
  1     4 
  1     5 dcl  ted_support_p ptr;
  1     6 dcl ted_support_version_2 fixed bin int static init(2);
  1     7 dcl 1 ted_support based(ted_support_p),
  1     8     2 version fixed bin,	/* 1				       */
  1     9     2 addr_ct fixed bin,	/* number of addresses given: 0,1,2 	  (IN) */
  1    10     2 checkpoint entry (	/* routine to update "safe" status        (IN) */
  1    11 	fixed bin(21),	/* amount of input used up		       */
  1    12 	fixed bin(21)),	/* amount of output used up		       */
  1    13 
  1    14     2 inp,		/***** input string parameters	       */
  1    15 			/* The input data may NOT be modified.	       */
  1    16       3 pt ptr,		/* pointer to base of data string         (IN) */
  1    17       3 sb fixed bin(21),	/* index of addressed string begin        (IN) */
  1    18       3 lno fixed bin(21),	/* linenumber in data string of sb        (IN) */
  1    19       3 se fixed bin(21),	/* index of addressed string end      (IN/OUT) */
  1    20       3 de fixed bin(21),	/* index of data end		  (IN) */
  1    21 
  1    22     2 out,		/***** output string parameters	       */
  1    23       3 pt ptr,		/* pointer to base of output string       (IN) */
  1    24       3 de fixed bin(21),	/* index of data end (already copied) (IN/OUT) */
  1    25       3 ml fixed bin(21),	/* max length of output string	  (IN) */
  1    26 
  1    27     2 req,		/***** request string parameters	       */
  1    28       3 pt ptr,		/* pointer to base of request string	  (IN) */
  1    29       3 cc fixed bin(21),	/* index of current character		  (IN) */
  1    30       3 nc fixed bin(21),	/* index of next character	        (IN/OUT) */
  1    31       3 de fixed bin(21),	/* index of data end	        (IN/OUT) */
  1    32       3 ml fixed bin(21),	/* max length of requsest buffer 	  (IN) */
  1    33 
  1    34 /* req.nc is initialized to req.de, i.e.  request line used-up.  A routine   */
  1    35 /* can set req.nc to 1, put some data into req and set req.de	       */
  1    36 /* appropriately.  The data will be the next ted requests executed after     */
  1    37 /* the routine returns.					       */
  1    38 			
  1    39 /* Or if req.nc is set equal to req.cc then the rest of the request line     */
  1    40 /* will be executed after return.				       */
  1    41 
  1    42     2 string_mode bit(1),	/* 0- line mode, 1- string mode 	  (IN) */
  1    43     2 current fixed bin(21),	/* current location		        (IN/OUT) */
  1    44 			/* current is initialized to "undefined"       */
  1    45     2 get_req entry (),	/* fill the request string with the next line  */
  1    46 			/*  from ted's input stream. req.de will be    */
  1    47 			/*  updated to reflect the new length.	       */
  1    48 			/* req.cc and req.nc are not changed.	       */
  1    49     2 proc_expr entry	/* process the expression for global execution */
  1    50 	(ptr,		/* -> ted_support structure		  [IN] */
  1    51 	char (168) var,	/* message text			 [OUT] */
  1    52 	fixed bin (35)),	/* completion code			 [OUT] */
  1    53     2 do_global entry	/* globally execute some action	       */
  1    54 	(entry (),	/* worker procedure			  [IN] */
  1    55 	char (1),		/* which action, "g" or "v"		  [IN] */
  1    56 	ptr,		/* -> ted_support structure		  [IN] */
  1    57 	char (168) var,	/* message text			 [OUT] */
  1    58 	fixed bin (35)),	/* completion code			 [OUT] */
  1    59     2 reg_exp_p ptr,	/* -> the remembered regular expression area   */
  1    60     2 bcb_p ptr;		/* -> buffer control block		       */
  1    61 /* _________________________________________________________________________ */
  1    62 /*			 ENTRY CONDITIONS			       */
  1    63 /* _________________________________________________________________________ */
  1    64 /* Upon entering, three substructures describe the environment in which the  */
  1    65 /* request is to operate. (Refer to the INPUT diagram) Note that the	       */
  1    66 /* "normal" operational steps are:				       */
  1    67 /* 1) ted copies the string from 1:inp.sb-1 to the output string	       */
  1    68 /* 2) ted_xyz_ takes care of the data from inp.sb:inp.se		       */
  1    69 /* 3) ted copies the string from inp.se+1:inp.de to the output string	       */
  1    70 /* The following 3 diagrams represent conditions upon entering ted_xyz_:     */
  1    71 /* _________________________________________________________________________ */
  1    72 /*	       inp.pt		(\ represents NL)		       */
  1    73 /*		|					       */
  1    74 /* [INPUT]	now is\the time\for all\good men\to come.\.....	       */
  1    75 /*		       |               |                 |	       */
  1    76 /*		    inp.sb          inp.se            inp.de	       */
  1    77 /* _________________________________________________________________________ */
  1    78 /*	       out.pt		(\ represents NL)		       */
  1    79 /*    		|					       */
  1    80 /* [OUTPUT]  ?	now is\........................................	       */
  1    81 /*	   |	      |                                       |	       */
  1    82 /*	current	   out.de				   out.ml	       */
  1    83 /* _________________________________________________________________________ */
  1    84 /*	       req.pt		(\ represents NL)		       */
  1    85 /*    		|					       */
  1    86 /* [REQUEST]	x 2,3|req /farfle/ 1,$P\.......................	       */
  1    87 /*		          |            |                      |	       */
  1    88 /*		       req.cc       req.de		   req.ml	       */
  1    89 /*				req.nc			       */
  1    90 
  1    91 /* _________________________________________________________________________ */
  1    92 /*			 EXIT CONDITIONS			       */
  1    93 /* _________________________________________________________________________ */
  1    94 /* Assume a request replaces the addressed lines with the string following   */
  1    95 /* it, (in this case "farfle") and leaves "." at the beginning of the range. */
  1    96 /*	       out.pt		(\ represents NL)		       */
  1    97 /*    		|					       */
  1    98 /* [OUTPUT]	now is\farfle\farfle\..........................	       */
  1    99 /*		       |            |                         |	       */
  1   100 /*		   current       out.de		   out.ml	       */
  1   101 /* _________________________________________________________________________ */
  1   102 /* 1) If the data after the string are to be treated as more ted requests,   */
  1   103 /*  the request data would be left like this.			       */
  1   104 /*	       req.pt		(\ represents NL)		       */
  1   105 /*    		|					       */
  1   106 /* [REQUEST]	x 2,3|req /farfle/ 1,$P\.......................	       */
  1   107 /*		                   |   |                      |	       */
  1   108 /*			    req.nc   req.de		   req.ml	       */
  1   109 /* _________________________________________________________________________ */
  1   110 /* 2) If the request is going to return a string to be executed, the request */
  1   111 /*  data (and buffer) would be left like this:			       */
  1   112 /*	       req.pt		(\ represents NL)		       */
  1   113 /*    		|        					       */
  1   114 /* [REQUEST]	-1,.1p w\ /farfle/ 1,$P\.......................	       */
  1   115 /*		|       |                                     |	       */
  1   116 /*	       req.nc  req.de			   req.ml	       */
  1   117 
  1   118 /* These return codes are expected				       */
  1   119 dcl (tederror_table_$Copy_Set,/* copy rest of input to output,	       */
  1   120 			/*   and set "." from current		       */
  1   121 			/* "rest of input" is the string which begins  */
  1   122 			/*  at char inp.se+1 and extends to inp.de.    */
  1   123 			/*  If the input has all been processed, then  */
  1   124 			/*  inp.se should be set to inp.de+1.	       */
  1   125      tederror_table_$NoChange,/* dont copy, dont set current	       */
  1   126      tederror_table_$Set,	/* dont copy, just set current	       */
  1   127 			/*   (in input buffer)		       */
  1   128      tederror_table_$Error_Msg,/* msg is being returned.		       */
  1   129 			/*  no copy or set is done		       */
  1   130      tederror_table_$No_Delim1,/* missing 1st delimiter		       */
  1   131      tederror_table_$No_Delim2,/* missing 2nd delimiter		       */
  1   132      tederror_table_$No_Delim3)/* missing 3nd delimiter		       */
  1   133 		fixed bin(35)ext static;
  1   134 dcl  error_table_$unimplemented_version fixed bin(35) ext static;
  1   135 
  1   136 dcl  istr char(inp.de) based(inp.pt);	/* the input string		       */
  1   137 dcl  ichr(inp.de) char(1) based(inp.pt);
  1   138 dcl  ostr char(out.ml) based(out.pt);	/* the output string	       */
  1   139 dcl  ochr(out.ml) char(1) based(out.pt);
  1   140 dcl  rstr char(req.ml) based(req.pt);	/* the request string	       */
  1   141 dcl  rchr(req.ml) char(1) based(req.pt);
  1   142 
  1   143 /* These declarations are used if the expression search is needed by the     */
  1   144 /* request. There are 2 parts to getting an expression search done:	       */
  1   145 /* 	1) compiling	2) searching			       */
  1   146 /* If a function uses the remembered expression, it does this:	       */
  1   147 /*	call tedsrch_$search (ted_support.reg_exp_p,		       */
  1   148 /*	  ted_support.bcbp, string_begin, string_end, match_begin,	       */
  1   149 /*	  match_end, search_end, msg, code);			       */
  1   150 
  1   151 /* If a function utilizes an expression the user supplies, it must first be  */
  1   152 /* compiled:
  1   153*/*	if (expression_length > 0)				       */
  1   154 /*	then call tedsrch_$compile (addr (ichr (expression_begin)),	       */
  1   155 /*	  expression_length, ted_support.reg_exp_p,		       */
  1   156 /*	  ted_support.string_mode, ""b, msg, code);		       */
  1   157 /* This results in the remembered expression being changed to the one just   */
  1   158 /* compiled.						       */
  1   159 
  1   160 /* If a function wishes to utilize a function without it being remembered    */
  1   161 /* by ted, it may declare an area of its own and compile into it. It first   */
  1   162 /* must be initialized:					       */
  1   163 /*	dcl expr_area (200) bit (36);				       */
  1   164 /*	call tedsrch_$init_exp (addr (expr_area), size (expr_area));       */
  2     1 /* BEGIN INCLUDE FILE ..... tedsrch_.incl.pl1 ..... 10/21/82 J Falksen */
  2     2 
  2     3 dcl tedsrch_$init_exp entry (		/* initialize an expression area     */
  2     4 		ptr,		/* -> compiled expression area  [IN] */
  2     5 		fixed bin (21));	/*   length of area in words	       */
  2     6 
  2     7 dcl tedsrch_$compile entry (		/* compile a regular expression      */
  2     8 		ptr,		/* -> regular expression to search   */
  2     9 		fixed bin (21),	/*   length thereof 	       */
  2    10 		ptr,		/* -> compiled expression area  [IN] */
  2    11 		bit (1)aligned,	/* 0- line mode	1- string mode   */
  2    12 		bit (1)aligned,	/* 0- reg expr	1- literal expr  */
  2    13 		char (168) var,	/* error message		 [OUT] */
  2    14 		fixed bin (35)	/* error status code	 [OUT] */
  2    15 		);
  2    16 
  2    17 dcl tedsrch_$search entry (		/* search for expression	       */
  2    18 		ptr,		/* -> compiled expression	       */
  2    19 		ptr,		/* -> buffer ctl block for file      */
  2    20 		fixed bin (21),	/* beginning of string to search     */
  2    21 		fixed bin (21),	/* end of string to search	       */
  2    22 		fixed bin (21),	/* beginning of match	       */
  2    23 		fixed bin (21),	/* end of match		       */
  2    24 		fixed bin (21),	/* end of string used for match      */
  2    25 		char (168)var,	/* error message return	 [OUT] */
  2    26 		fixed bin (35)	/* error status code	 [OUT] */
  2    27 		);
  2    28 
  2    29 
  2    30 /* END INCLUDE FILE ..... tedsrch_.incl.pl1 ..... */
  1   165 
  1   166 
  1   167 /* END INCLUDE FILE ..... ted_support.incl.pl1 .....		       */
      113 
      114 
      115 dcl ch2		char (2);
      116 dcl iox_$user_input ptr ext static;
      117 dcl iox_$user_output ptr ext static;
      118 dcl iox_$put_chars	entry (ptr, ptr, fixed bin (24), fixed bin (35));
      119 dcl iox_$get_line	entry (ptr, ptr, fixed bin (24), fixed bin (24),
      120 		fixed bin (35));
      121 dcl i		fixed bin (24);
      122 dcl ii		fixed bin (24);
      123 dcl il		fixed bin (24);
      124 dcl buffer	char (600);
      125 dcl msg_EOB	char (7) int static options (constant) init ("
      126 	EOB
      127 
      128 ");
      129 dcl msg_bad	char (19) int static options (constant) init ("Improper use of \i
      130 ");
      131 dcl NL		char (1) int static init ("
      132 ");
      133 
      134 dcl (pointer, substr) builtin;
      135 
      136    end ted_comment_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/23/82  1458.3  ted_comment_.pl1                  >spec>on>ted_fix>ted_comment_.pl1
113          1    11/23/82  1324.6  ted_support.incl.pl1              >ldd>include>ted_support.incl.pl1
1-165        2    11/23/82  1324.7  tedsrch_.incl.pl1                 >ldd>include>tedsrch_.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
NL                              000010 internal static char(1)                  initial unaligned dcl 131 set ref 26 76 91 102 102
buffer                          000104 automatic       char(600)                unaligned dcl 124 set ref 34 34 34 34 39 73 87
cc                       22            based           fixed bin(21,0)          level 3 dcl 1-7 ref 109
ch2                             000100 automatic       char(2)                  unaligned dcl 115 set ref 39* 40 46 46 49 61
checkpoint                2            based           entry variable           level 2 dcl 1-7 ref 77 95
code                                   parameter       fixed bin(35,0)          dcl 14 set ref 11 19* 33* 34* 54* 98* 102* 111*
current                  27            based           fixed bin(21,0)          level 2 dcl 1-7 set ref 104*
de                       16            based           fixed bin(21,0)          level 3 in structure "ted_support" dcl 1-7
                                                                                  in procedure "ted_comment_" set ref 65 67* 67 73
                                                                                  75* 75 76 77* 83 84* 84 87 88* 88 91 92* 92 95*
                                                                                  104 107 108* 108
de                       13            based           fixed bin(21,0)          level 3 in structure "ted_support" dcl 1-7
                                                                                  in procedure "ted_comment_" ref 26 65 83 98 106
                                                                                  107 110
error_table_$unimplemented_version
                                000014 external static fixed bin(35,0)          dcl 1-134 ref 19
i                               000101 automatic       fixed bin(24,0)          dcl 121 set ref 26* 27 27* 29* 29 30 33* 42 51 58*
                                                                                  63 65 65 67 68 70* 81 83 83 84 85 106* 107 107 108
ichr                                   based           char(1)                  array unaligned dcl 1-137 set ref 33 33
ii                              000102 automatic       fixed bin(24,0)          dcl 122 set ref 22* 24 26 27
il                              000103 automatic       fixed bin(24,0)          dcl 123 set ref 34* 37 39 51 72* 72 73 73 75 87 87
                                                                                  88
inp                       6            based           structure                level 2 unaligned dcl 1-7
iox_$get_line                   000024 constant        entry                    external dcl 119 ref 34
iox_$put_chars                  000022 constant        entry                    external dcl 118 ref 33 54 98 102
iox_$user_input                 000016 external static pointer                  dcl 116 set ref 34*
iox_$user_output                000020 external static pointer                  dcl 117 set ref 33* 54* 98* 102*
istr                                   based           char                     unaligned dcl 1-136 ref 26 65 83 107
ml                       17            based           fixed bin(21,0)          level 3 dcl 1-7 ref 65 73 76 83 87 91 107
msg                                    parameter       varying char(168)        dcl 14 ref 11
msg_EOB                         000006 constant        char(7)                  initial unaligned dcl 125 set ref 98 98 98 98
msg_bad                         000000 constant        char(19)                 initial unaligned dcl 129 set ref 54 54 54 54
nc                       23            based           fixed bin(21,0)          level 3 dcl 1-7 set ref 109*
ostr                                   based           char                     unaligned dcl 1-138 set ref 65* 73* 76* 83* 87* 91*
                                                                                  107*
out                      14            based           structure                level 2 unaligned dcl 1-7
pt                       14            based           pointer                  level 3 in structure "ted_support" dcl 1-7
                                                                                  in procedure "ted_comment_" ref 65 73 76 83 87 91
                                                                                  107
pt                        6            based           pointer                  level 3 in structure "ted_support" dcl 1-7
                                                                                  in procedure "ted_comment_" ref 26 33 33 65 83 107
req                      20            based           structure                level 2 unaligned dcl 1-7
sb                       10            based           fixed bin(21,0)          level 3 dcl 1-7 set ref 22 26 33 33 42* 42 65 68* 68
                                                                                  77 83 85* 85 93* 93 95 106 107
se                       12            based           fixed bin(21,0)          level 3 dcl 1-7 set ref 22 98 110*
substr                                                 builtin function         dcl 134 set ref 26 39 65* 65 73* 73 76* 83* 83 87*
                                                                                  87 91* 107* 107
ted_support                            based           structure                level 1 unaligned dcl 1-7
ted_support_p                          parameter       pointer                  dcl 1-5 ref 11 17 22 22 26 26 26 33 33 33 33 42 42
                                                                                  65 65 65 65 65 65 67 67 68 68 73 73 73 75 75 76 76
                                                                                  76 77 77 77 83 83 83 83 83 83 84 84 85 85 87 87 87
                                                                                  88 88 91 91 91 92 92 93 93 95 95 95 98 98 104 104
                                                                                  106 106 107 107 107 107 107 107 108 108 109 109
                                                                                  110 110
ted_support_version_2                  constant        fixed bin(17,0)          initial dcl 1-6 ref 17
tederror_table_$Copy_Set        000012 external static fixed bin(35,0)          dcl 1-119 ref 111
version                                based           fixed bin(17,0)          level 2 dcl 1-7 ref 17

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
ochr                                   based           char(1)                  array unaligned dcl 1-139
pointer                                                builtin function         dcl 134
rchr                                   based           char(1)                  array unaligned dcl 1-141
rstr                                   based           char                     unaligned dcl 1-140
tederror_table_$Error_Msg              external static fixed bin(35,0)          dcl 1-119
tederror_table_$NoChange               external static fixed bin(35,0)          dcl 1-119
tederror_table_$No_Delim1              external static fixed bin(35,0)          dcl 1-119
tederror_table_$No_Delim2              external static fixed bin(35,0)          dcl 1-119
tederror_table_$No_Delim3              external static fixed bin(35,0)          dcl 1-119
tederror_table_$Set                    external static fixed bin(35,0)          dcl 1-119
tedsrch_$compile                000000 constant        entry                    external dcl 2-7
tedsrch_$init_exp               000000 constant        entry                    external dcl 2-3
tedsrch_$search                 000000 constant        entry                    external dcl 2-17

NAMES DECLARED BY EXPLICIT CONTEXT.
EOB                             000367 constant        label                    dcl 98 ref 24
add1                            000244 constant        label                    dcl 70
finish                          000435 constant        label                    dcl 104 ref 46
loop                            000034 constant        label                    dcl 22 ref 43 56 96
reask                           000110 constant        label                    dcl 34 ref 59 78
ted_comment_                    000017 constant        entry                    external dcl 11

NAMES DECLARED BY CONTEXT OR IMPLICATION.
addr                                                   builtin function         ref 33 33 34 34 54 54 98 98 102 102
index                                                  builtin function         ref 26
length                                                 builtin function         ref 34 34 54 54 98 98

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       602         630     474         612
Length      1040     474        26         173     106           2

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
ted_comment_                        244 external procedure  is an external procedure.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 NL                          ted_comment_

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
ted_comment_             000100 ch2                         ted_comment_
                         000101 i                           ted_comment_
                         000102 ii                          ted_comment_
                         000103 il                          ted_comment_
                         000104 buffer                      ted_comment_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_var            call_ext_out        return              ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
iox_$get_line                 iox_$put_chars

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$unimplemented_version                          iox_$user_input               iox_$user_output
tederror_table_$Copy_Set




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000013        17 000024        19 000031        20 000033        22 000034        24 000043        26 000044
     27 000060        29 000064        30 000066        33 000070        34 000110        37 000134        39 000137
     40 000143        42 000146        43 000155        46 000156        49 000162        51 000164        54 000171
     56 000213        58 000214        59 000215        61 000216        63 000220        65 000222        67 000237
     68 000241        70 000244        72 000245        73 000247        75 000260        76 000263        77 000267
     78 000302        81 000303        83 000305        84 000322        85 000324        87 000327        88 000340
     89 000341        91 000342        92 000347        93 000350        95 000351        96 000366        98 000367
    102 000414       104 000435       106 000442       107 000446       108 000460       109 000462       110 000464
    111 000467       112 000473


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
