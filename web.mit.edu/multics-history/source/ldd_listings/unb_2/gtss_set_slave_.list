ASSEMBLY LISTING OF SEGMENT >special_ldd>install>MR12.0-1206>gtss_set_slave_.alm             
ASSEMBLED ON:	11/05/86  1059.0 mst Wed
OPTIONS USED:	list 
ASSEMBLED BY:	ALM Version  6.7  October 1986  
ASSEMBLER CREATED:	10/08/86  1557.5 mst Wed

                                     1  "  ***********************************************************
                                     2  "  *                                                         *
                                     3  "  *                                                         *
                                     4  "  * Copyright, (C) Honeywell Information Systems Inc., 1981 *
                                     5  "  *                                                         *
                                     6  "  *                                                         *
                                     7  "  ***********************************************************
                                     8  
    000000                           9  	name	gtss_set_slave_
                        000000      10  	entry	gtss_set_slave_
                        000023      11  	entry	load_bar
                                    12  "
                                    13  "	gtss routine to provide for setting  the BAR
                                    14  "	and transferring to GCOS code in a simulated
                                    15  "	memory segment.
                                    16  "
                                    17  "	dcl gtss_set_slave_ entry(fixed bin aligned,ptr,bit(1)aligned);
                                    18  "	Arg 1	base address register value.
                                    19  "	Arg 2	pointer to code to transfer to.
                                    20  "
                                    21  "	The base address register is loaded with the value passed in arg 1
                                    22  "	and a TSS instruction is executed to cause control to go to the
                                    23  "	tss slave program in BAR mode.
                                    24  "
                                    25  "	There is an additional entry to this program called load_bar. This
                                    26  "	entry is called to load the bar and then return.
                                    27  "
                                    28  "
                                    29  "	(gcos_set_slave contributors:)
                                    30  "	WRITTEN BY DICK SNYDER, JANUARY 31, 1973 for the 6180
                                    31  "	MODIFIED BY T. CASEY, MAY 1974  TO ADD no_bar ENTRY
                                    32  "	MODIFIED BY D. KAYDEN DECEMBER 1974, JUNE 1975
                                    33  "	Modified by M. R. Jordan, August 1977
                                    34  "
                                    35  "	(gtss contributors:)
                                    36  "	Modified by D. B. Wardd, June 23, 1978
                                    37  "	Modified by A. Kepner, August 29, 1978
                                    38  "
                                    39  	temp	temp
                                    40  "
                                    41  	include	stack_header
                                   1-1  "	BEGIN INCLUDE FILE ... stack_header.incl.alm  3/72  Bill Silver
                                   1-2  "
                                   1-3  "	modified 7/76 by M. Weaver for *system links and more system use of areas
                                   1-4  "	modified 3/77 by M. Weaver  to add rnt_ptr
                                   1-5  "	modified 7/77 by S. Webber to add run_unit_depth and assign_linkage_ptr
                                   1-6  "	modified 6/83 by J. Ives to add trace_frames and in_trace.
                                   1-7  
                                   1-8  " HISTORY COMMENTS:
                                   1-9  "  1) change(86-06-24,DGHowe), approve(86-06-24,MCR7396),
                                  1-10  "     audit(86-08-05,Schroth), install(86-11-03,MR12.0-1206):
                                  1-11  "     added the heap_header_ptr definition
                                  1-12  "  2) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
                                  1-13  "     audit(86-10-10,Fawcett), install(86-11-03,MR12.0-1206):
                                  1-14  "     Modified to support control point management.  These changes were
                                  1-15  "     actually made in February 1985 by G. Palter.
                                  1-16  "  3) change(86-10-22,Fawcett), approve(86-10-22,MCR7473),
                                  1-17  "     audit(86-10-22,Farley), install(86-11-03,MR12.0-1206):
                                  1-18  "     Remove the old_lot pointer and replace it with cpm_data_ptr. Use the 18
                                  1-19  "     bit pad after cur_lot_size for the cpm_enabled. This was done to save
                                  1-20  "     some space int the stack header and change the cpd_ptr unal to
                                  1-21  "     cpm_data_ptr (ITS pair).
                                  1-22  "                                                      END HISTORY COMMENTS
                                  1-23  
                        000004    1-24  	equ	stack_header.cpm_data_ptr,4		ptr to control point for this stack
                        000006    1-25  	equ	stack_header.combined_stat_ptr,6	ptr to separate static area
                                  1-26  
                        000010    1-27  	equ	stack_header.clr_ptr,8		ptr to area containing linkage sections
                        000012    1-28  	equ	stack_header.max_lot_size,10		number of words allowed in lot (DU)
                        000012    1-29  	equ	stack_header.main_proc_invoked,10	nonzero if main proc was invoked in run unit (DL)
                        000012    1-30  	equ	stack_header.run_unit_depth,10	number of active run units stacked (DL)
                        000013    1-31  	equ	stack_header.cur_lot_size,11		DU number of words (entries) in lot
                        000013    1-32            equ	stack_header.cpm_enabled,11		DL  non-zero if control point management is enabled
                        000014    1-33  	equ	stack_header.system_free_ptr,12	ptr to system storage area
                        000016    1-34  	equ	stack_header.user_free_ptr,14		ptr to user storage area
                                  1-35  
                        000020    1-36  	equ	stack_header.parent_ptr,16		ptr to parent stack or null
                        000022    1-37  	equ	stack_header.stack_begin_ptr,18	ptr to first stack frame
                        000024    1-38  	equ	stack_header.stack_end_ptr,20		ptr to next useable stack frame
                        000026    1-39  	equ	stack_header.lot_ptr,22		ptr to the lot for the current ring
                                  1-40  
                        000030    1-41  	equ	stack_header.signal_ptr,24		ptr to signal proc for current ring
                        000032    1-42  	equ	stack_header.bar_mode_sp,26		value of sp before entering bar mode
                        000034    1-43  	equ	stack_header.pl1_operators_ptr,28	ptr: pl1_operators_$operator_table
                        000036    1-44  	equ	stack_header.call_op_ptr,30		ptr to standard call operator
                                  1-45  
                        000040    1-46  	equ	stack_header.push_op_ptr,32		ptr to standard push operator
                        000042    1-47  	equ	stack_header.return_op_ptr,34		ptr to standard return operator
                        000044    1-48  	equ	stack_header.ret_no_pop_op_ptr,36	ptr: stand. return/ no pop operator
                        000046    1-49  	equ	stack_header.entry_op_ptr,38		ptr to standard entry operator
                                  1-50  
                        000050    1-51  	equ	stack_header.trans_op_tv_ptr,40	ptr to table of translator operator ptrs
                        000052    1-52  	equ	stack_header.isot_ptr,42		pointer to ISOT
                        000054    1-53  	equ	stack_header.sct_ptr,44		pointer to System Condition Table
                        000056    1-54  	equ	stack_header.unwinder_ptr,46		pointer to unwinder for current ring
                                  1-55  
                        000060    1-56  	equ	stack_header.sys_link_info_ptr,48	ptr to *system link name table
                        000062    1-57  	equ	stack_header.rnt_ptr,50		ptr to reference name table
                        000064    1-58  	equ	stack_header.ect_ptr,52		ptr to event channel table
                        000066    1-59  	equ	stack_header.assign_linkage_ptr,54	ptr to area for hcs_$assign_linkage calls
                        000070    1-60  	equ	stack_header.heap_header_ptr,56	ptr to heap header.
                        000072    1-61  	equ	stack_header.trace_frames,58		stack of trace_catch_ frames
                        000073    1-62  	equ	stach_header.trace_top_ptr,59		trace pointer
                        000074    1-63  	equ	stack_header.in_trace,60		trace antirecurse bit
                        000100    1-64  	equ	stack_header_end,64			length of stack header
                                  1-65  
                                  1-66  
                                  1-67  
                                  1-68  
                        000000    1-69  	equ	trace_frames.count,0		number of trace frames on stack
                        000001    1-70  	equ	trace_frames.top_ptr,1		packed pointer to top one
                                  1-71  
                                  1-72  "	The  following constant is an offset within the  pl1  operators table.
                                  1-73  "	It  references a  transfer vector table.
                                  1-74  
                        000551    1-75  	bool	tv_offset,551
                                  1-76  
                                  1-77  
                                  1-78  "	The  following constants are offsets within this transfer vector table.
                                  1-79  
                        001170    1-80  	equ	call_offset,tv_offset+271
                        001171    1-81  	equ	push_offset,tv_offset+272
                        001172    1-82  	equ	return_offset,tv_offset+273
                        001173    1-83  	equ	return_no_pop_offset,tv_offset+274
                        001174    1-84  	equ	entry_offset,tv_offset+275
                                  1-85  
                                  1-86  
                                  1-87  " 	END INCLUDE FILE stack_header.incl.alm
                                    42  "
                                    43  	include	stack_frame
                                   2-1  "
                                   2-2  "	BEGIN INCLUDE FILE ... stack_frame.incl.alm   6/72 RBS
                                   2-3  "
                                   2-4  " Modified: 16 Dec 1977, D. Levin - to add fio_ps_ptr
                                   2-5  " Modified:  3 Feb 1978, P. Krupp - to add run_unit_manager_bit & main_proc_bit
                                   2-6  " Modified: 21 March 1978, D. Levin - change fio_ps_ptr to support_ptr
                                   2-7  "
                        000020     2-8  	equ	stack_frame.prev_sp,16
                        000020     2-9  	equ	stack_frame.condition_word,16
                        000022    2-10  	equ	stack_frame.next_sp,18
                        000022    2-11  	equ	stack_frame.signaller_word,18
                        000024    2-12  	equ	stack_frame.return_ptr,20
                        000026    2-13  	equ	stack_frame.entry_ptr,22
                        000030    2-14  	equ	stack_frame.operator_ptr,24
                        000030    2-15  	equ	stack_frame.lp_ptr,24
                        000032    2-16  	equ	stack_frame.arg_ptr,26
                        000034    2-17  	equ	stack_frame.static_ptr,28
                        000035    2-18  	equ	stack_frame.support_ptr,29	" only used by fortran I/O
                        000036    2-19  	equ	stack_frame.on_unit_rel_ptrs,30
                        000037    2-20  	equ	stack_frame.operator_ret_ptr,31
                        000037    2-21  	equ	stack_frame.translator_id,31
                        000040    2-22  	equ	stack_frame.regs,32
                        000060    2-23  	equ	stack_frame.min_length,48
                        000020    2-24  	equ	stack_frame.flag_word,16
                        020000    2-25  	bool	stack_frame.main_proc_bit,020000	(DL)
                        010000    2-26  	bool	stack_frame.run_unit_manager,010000	(DL)
                        004000    2-27  	bool	stack_frame.signal_bit,004000		(DL)
                        002000    2-28  	bool	stack_frame.crawl_out_bit,002000	(DL)
                        001000    2-29  	bool	stack_frame.signaller_bit,001000	(DL)
                        000400    2-30  	bool	stack_frame.link_trap_bit,000400	(DL)
                        000200    2-31  	bool	stack_frame.support_bit,000200	(DL)
                        000100    2-32  	bool	stack_frame.condition_bit,000100	(DL)
                                  2-33  
                                  2-34  "
                                  2-35  "	END INCLUDE FILE  ... stack_frame.incl.alm
                                  2-36  "
                                    44  "
    000000                          45  gtss_set_slave_:
    000000  aa   000060 6270 00     46  	push
    000001  aa  7 00040 2721 20
    000002  aa  7 00032 6521 00     47  	sprisp	sb|stack_header.bar_mode_sp save sp so signaller can reset
                                    48  "				 it in case tss uses adr6
    000003  aa  0 00002 2351 20     49  	lda	ap|2,*		get the BAR setting
    000004  aa   000022 7350 00     50  	als	18		position it
    000005  aa  6 00050 7551 00     51  	sta	temp
    000006  aa  6 00050 2301 00     52  	lbar	temp		set the BAR
    000007  aa  0 00004 3521 20     53  	eppbp	ap|4,*		get the ptr
    000010  aa  2 00000 3521 20     54  	eppbp	bp|0,*		..
                                    55  
    000011  aa  6 00026 4501 00     56  	stz	sp|stack_frame.entry_ptr  make stack traces look nice
    000012  aa  6 00027 4501 00     57  	stz	sp|stack_frame.entry_ptr+1
                                    58  "	In order to cause machine registers
                                    59  "	to be loaded from the safe-store
                                    60  "	region in the user's slave prefix
                                    61  "	the following code wequence will
                                    62  "	be set up and executed starting
                                    63  "	at location 26 (decimal) in the
                                    64  "	user's slave prefix.
                                    65  "26	lreg	32	load index regs, a, q, etc.
                                    66  "27	lareg	40	load addres registers
                                    67  "28	tra	(to first executable instruction)
    000013  aa  2 00000 3531 00     68  	epbpbb	bp|0	bb points to beginning of slave prefix
    000014  0a   000040 2370 00     69  	ldaq	lreg	move lreg and lareg inst. to slave prefix
    000015  aa  3 00032 7571 00     70  	staq	bb|26
    000016  aa  2 00000 2131 00     71  	epaq	bp|0	isolate transfer address in q upper
    000017  aa   777777 3760 03     72  	anq	-1,du
    000020  0a   000042 2760 00     73  	orq	tra	build transfer instruction
    000021  aa  3 00034 7561 00     74  	stq	bb|28	and move to prefix
    000022  aa  3 00032 7151 00     75  	tss	bb|26	set BAR mode and start slave execution with
                                    76  "			the 3 instructions provided.
                                    77  
                                    78  
    000023                          79  load_bar:
    000023  aa   000060 6270 00     80  	push
    000024  aa  7 00040 2721 20
    000025  aa  0 00002 2351 20     81  	lda	ap|2,*		get the BAR setting
    000026  aa   000022 7350 00     82  	als	18		position it
    000027  aa  6 00050 7551 00     83  	sta	temp
    000030  aa  6 00050 2301 00     84  	lbar	temp		set the BAR
    000031  aa  7 00042 7101 20     85  	return		that's it
                                    86  
    000032  aa   000000 0110 03     87  	eight
    000033  aa   000000 0110 03
    000034  aa   000000 0110 03
    000035  aa   000000 0110 03
    000036  aa   000000 0110 03
    000037  aa   000000 0110 03
    000040  aa   000040 0730 00     88  lreg:	lreg	32
    000041  aa   000050 4634 00     89  	lareg	40
    000042  aa   000000 7100 00     90  tra:	tra	0
                                    91  	end
ENTRY SEQUENCES
     
    000043  5a   000020 0000 00
    000044  aa  7 00046 2721 20
    000045  0a   000000 7100 00
    000046  5a   000012 0000 00
    000047  aa  7 00046 2721 20
    000050  0a   000023 7100 00

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000052  5a   000003 000000 
    000053  5a   000036 600000 
    000054  aa   000000 000000 
    000055  55   000012 000002 
    000056  5a   000002 400003 
    000057  55   000006 000012 
    000060  aa  017 147 164 163
    000061  aa  163 137 163 145
    000062  aa  164 137 163 154
    000063  aa  141 166 145 137
    000064  55   000020 000003 
    000065  0a   000047 500000 
    000066  55   000015 000003 
    000067  aa  010 154 157 141         load_bar
    000070  aa  144 137 142 141
    000071  aa  162 000 000 000
    000072  55   000027 000012 
    000073  0a   000044 500000 
    000074  55   000023 000003 
    000075  aa  017 147 164 163         gtss_set_slave_
    000076  aa  163 137 163 145
    000077  aa  164 137 163 154
    000100  aa  141 166 145 137
    000101  55   000002 000020 
    000102  6a   000000 400002 
    000103  55   000032 000003 
    000104  aa  014 163 171 155         symbol_table
    000105  aa  142 157 154 137
    000106  aa  164 141 142 154
    000107  aa  145 000 000 000

DEFINITIONS HASH TABLE

    000110  aa   000000 000015 
    000111  aa   000000 000000 
    000112  aa   000000 000000 
    000113  aa   000000 000000 
    000114  aa   000000 000000 
    000115  aa   000000 000000 
    000116  aa   000000 000000 
    000117  5a   000027 000000 
    000120  aa   000000 000000 
    000121  aa   000000 000000 
    000122  aa   000000 000000 
    000123  5a   000012 000000 
    000124  5a   000020 000000 
    000125  aa   000000 000000 

NO EXTERNAL NAMES

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    000126  aa   000001 000000 
    000127  aa   000000 000000 

INTERNAL EXPRESSION WORDS

LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000052 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000010 
    000007  a2   000000 000000 
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000004 
    000004  aa   000000 114732 
    000005  aa   732732 062314 
    000006  aa   000000 114775 
    000007  aa   675741 226247 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000010 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000166 
    000020  aa   000000 000146 
    000021  aa   000000 000153 
    000022  aa   000156 000146 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   040066 056067 
    000030  aa   040040 117143 
    000031  aa   164157 142145 
    000032  aa   162040 061071 
    000033  aa   070066 040040 
    000034  aa   107112 157150 
    000035  aa   156163 157156 
    000036  aa   056123 171163 
    000037  aa   115141 151156 
    000040  aa   164056 141040 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   154151 163164 
    000045  aa   040040 040040 
    000046  aa   040040 040040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040040 040040 
    000057  aa   040040 040040 
    000060  aa   040040 040040 
    000061  aa   040040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000003 
    000066  aa   000102 000064 
    000067  aa   147740 446327 
    000070  aa   000000 114774 
    000071  aa   461146 200000 
    000072  aa   000117 000066 
    000073  aa   147714 750316 
    000074  aa   000000 114774 
    000075  aa   453561 000000 
    000076  aa   000135 000041 
    000077  aa   052721 247134 
    000100  aa   000000 105272 
    000101  aa   317215 400000 
    000102  aa   076163 160145          >special_ldd>install>MR12.0-1206>gtss_set_slave_.alm
    000103  aa   143151 141154 
    000104  aa   137154 144144 
    000105  aa   076151 156163 
    000106  aa   164141 154154 
    000107  aa   076115 122061 
    000110  aa   062056 060055 
    000111  aa   061062 060066 
    000112  aa   076147 164163 
    000113  aa   163137 163145 
    000114  aa   164137 163154 
    000115  aa   141166 145137 
    000116  aa   056141 154155 
    000117  aa   076163 160145          >special_ldd>install>MR12.0-1206>stack_header.incl.alm
    000120  aa   143151 141154 
    000121  aa   137154 144144 
    000122  aa   076151 156163 
    000123  aa   164141 154154 
    000124  aa   076115 122061 
    000125  aa   062056 060055 
    000126  aa   061062 060066 
    000127  aa   076163 164141 
    000130  aa   143153 137150 
    000131  aa   145141 144145 
    000132  aa   162056 151156 
    000133  aa   143154 056141 
    000134  aa   154155 040040 
    000135  aa   076154 144144          >ldd>include>stack_frame.incl.alm
    000136  aa   076151 156143 
    000137  aa   154165 144145 
    000140  aa   076163 164141 
    000141  aa   143153 137146 
    000142  aa   162141 155145 
    000143  aa   056151 156143 
    000144  aa   154056 141154 
    000145  aa   155040 040040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

        1170    call_offset              stack_header:        80.
        1174    entry_offset             stack_header:        84.
           0    gtss_set_slave_          gtss_set_slave_:     10,   45.
          23    load_bar                 gtss_set_slave_:     11,   79.
          40    lreg                     gtss_set_slave_:     69,   88.
        1171    push_offset              stack_header:        81.
        1173    return_no_pop_offset     stack_header:        83.
        1172    return_offset            stack_header:        82.
          73    stach_header.trace_top_ptr     stack_header:        62.
          32    stack_frame.arg_ptr      stack_frame:   16.
         100    stack_frame.condition_bit      stack_frame:   32.
          20    stack_frame.condition_word     stack_frame:    9.
        2000    stack_frame.crawl_out_bit      stack_frame:   28.
          26    stack_frame.entry_ptr    gtss_set_slave_:     56,   57,
                                         stack_frame:   13.
          20    stack_frame.flag_word    stack_frame:   24.
         400    stack_frame.link_trap_bit      stack_frame:   30.
          30    stack_frame.lp_ptr       stack_frame:   15.
       20000    stack_frame.main_proc_bit      stack_frame:   25.
          60    stack_frame.min_length   stack_frame:   23.
          22    stack_frame.next_sp      stack_frame:   10.
          36    stack_frame.on_unit_rel_ptrs   stack_frame:   19.
          30    stack_frame.operator_ptr       stack_frame:   14.
          37    stack_frame.operator_ret_ptr   stack_frame:   20.
          20    stack_frame.prev_sp      stack_frame:    8.
          40    stack_frame.regs         stack_frame:   22.
          24    stack_frame.return_ptr   stack_frame:   12.
       10000    stack_frame.run_unit_manager   stack_frame:   26.
        1000    stack_frame.signaller_bit      stack_frame:   29.
          22    stack_frame.signaller_word     stack_frame:   11.
        4000    stack_frame.signal_bit   stack_frame:   27.
          34    stack_frame.static_ptr   stack_frame:   17.
         200    stack_frame.support_bit  stack_frame:   31.
          35    stack_frame.support_ptr  stack_frame:   18.
          37    stack_frame.translator_id      stack_frame:   21.
          66    stack_header.assign_linkage_ptr      stack_header:        59.
          32    stack_header.bar_mode_sp       gtss_set_slave_:     47,
                                               stack_header:        42.
          36    stack_header.call_op_ptr       stack_header:        44.
          10    stack_header.clr_ptr     stack_header:        27.
           6    stack_header.combined_stat_ptr       stack_header:        25.
           4    stack_header.cpm_data_ptr      stack_header:        24.
          13    stack_header.cpm_enabled       stack_header:        32.
          13    stack_header.cur_lot_size      stack_header:        31.
          64    stack_header.ect_ptr     stack_header:        58.
          46    stack_header.entry_op_ptr      stack_header:        49.
          70    stack_header.heap_header_ptr   stack_header:        60.
          74    stack_header.in_trace    stack_header:        63.
          52    stack_header.isot_ptr    stack_header:        52.
          26    stack_header.lot_ptr     stack_header:        39.
          12    stack_header.main_proc_invoked       stack_header:        29.
          12    stack_header.max_lot_size      stack_header:        28.
          20    stack_header.parent_ptr  stack_header:        36.
          34    stack_header.pl1_operators_ptr       stack_header:        43.
          40    stack_header.push_op_ptr       stack_header:        46.
          42    stack_header.return_op_ptr     stack_header:        47.
          44    stack_header.ret_no_pop_op_ptr       stack_header:        48.
          62    stack_header.rnt_ptr     stack_header:        57.
          12    stack_header.run_unit_depth    stack_header:        30.
          54    stack_header.sct_ptr     stack_header:        53.
          30    stack_header.signal_ptr  stack_header:        41.
          22    stack_header.stack_begin_ptr   stack_header:        37.
          24    stack_header.stack_end_ptr     stack_header:        38.
          14    stack_header.system_free_ptr   stack_header:        33.
          60    stack_header.sys_link_info_ptr       stack_header:        56.
          72    stack_header.trace_frames      stack_header:        61.
          50    stack_header.trans_op_tv_ptr   stack_header:        51.
          56    stack_header.unwinder_ptr      stack_header:        54.
          16    stack_header.user_free_ptr     stack_header:        34.
         100    stack_header_end         stack_header:        64.
          50    temp                     gtss_set_slave_:     39,   51,   52,   83,   84.
          42    tra                      gtss_set_slave_:     73,   90.
           0    trace_frames.count       stack_header:        69.
           1    trace_frames.top_ptr     stack_header:        70.
         551    tv_offset                stack_header:        75,   80,   81,   82,   83,   84.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
