	COMPILATION LISTING OF SEGMENT xforum_format_
	Compiled by: Multics PL/I Compiler, Release 28e, of February 14, 1985
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 04/24/86  1529.4 mst Thu
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        4*        *                                                         *
        5*        *********************************************************** */
        6 
        7 
        8 
        9 /****^  HISTORY COMMENTS:
       10*  1) change(85-01-21,Davids), approve(86-02-04,MCR7350),
       11*     audit(86-04-24,Gilcrease), install(86-04-24,MR12.0-1048):
       12*     Modified so that if the write_sw is true (write entry called) The
       13*     subject is separated from the comment by the character <ESC>.
       14*     This gives the emacs extension something to search for instead of
       15*     assuming that there are no <NL>s embedded in the subject.  An
       16*     assumption that does not have to be true.  <NL> characters
       17*     embedded in the subject are translated into spaces when the
       18*     comments are listed.
       19*     
       20*     85-03-04 Davids: Added the parameter P_for_emacs_sw to the append
       21*     entry.  This will indicate that the output of this append is to be
       22*     for emacs so special handling of the subject will be done.  Change
       23*     the write entry to alwasy set the for_emacs_sw variable to ON.
       24*     Modified the ioa control string for display so that if the clear
       25*     switch is off a line feed will preceed the comment.  Modified the
       26*     control string for write and append so that if the comment is not
       27*     the first comment, i.e bit_count ^= 0 then either a form feed will
       28*     preceed the comment (for the non emacs case) or a line feed will
       29*     (for the emacs case.)
       30*     
       31*     85-04-10 Davids: Modified so that the output of a comment produced
       32*     via the write_sw, append_sw, or display_sw uses the date_time
       33*     string produced by the new date_time_$format routine which takes
       34*     into account the user's default date_time format and language.
       35*  2) change(85-04-11,Davids), approve(86-02-04,MCR7350),
       36*     audit(86-04-24,Gilcrease), install(86-04-24,MR12.0-1048):
       37*     Added the parameters P_line_item and P_subject_max_len to the
       38*     parameter list for the list entry.  Also changed the list entry to
       39*     use the P_item_line as the ioa control string for outputing the
       40*     list and to use the string "..." as an indication that the subject
       41*     has been truncated.  The P_subject_max_len is used as the maximum
       42*     length that the subject can be.  Finally the subject is now
       43*     truncated at a new line character instead of translating the
       44*     character to a space.  This what all the other subject display
       45*     routines do, i.e.  subject on status line and subjects in the
       46*     subject menu.
       47*     
       48*     85-06-21 Davids: Extensive internal reorganization.  Gave each
       49*     entry its own set of parameters.  Replaced the COMMON block of
       50*     code with internal procedures.  Added variable declaration
       51*     comments and updated header comments.
       52*                                                   END HISTORY COMMENTS */
       53 
       54 
       55 xforum_format_: proc ();
       56 
       57 /*
       58*   BEGIN DESCRIPTION
       59*
       60*   function:
       61*      This procedure is used to display transaction. Transactions may be
       62*      displayed on the terminal as either the complete transaction or just a
       63*      one line "list" entry. Transactions may also be written to a segment.
       64*      Only 1 transaction can be displayed during the call. A pointer to the
       65*      transaction structure is input.
       66*
       67*      Note that once the transaction is displayed the storage associated with
       68*      it is freed.
       69*
       70*   description of entry points:
       71*      xforum_format_:
       72*         input:
       73*         output:
       74*         It is an error to call the main entry point. The xforum_fatal_error
       75*         condition will be signaled with an "internal programming error" error
       76*         message.
       77*
       78*      display:
       79*         input:   ptr                 pointer to forum_user_trans structure for
       80*                                      transaction to be displayed
       81*                  bit (1) aligned     if "1"b the user_io window will be
       82*                                      cleared prior to the display
       83*         output:  fixed bin (35))     standard error code
       84*         This entry displays a transaction on the terminal. By not clearing the
       85*         user_io window before the display you can display multiple
       86*         transactions on the screen. The transaction header includes the
       87*         date-time that the transaction was entered in the user's default
       88*         date-time format. The forum_user_trans structure is freed after the
       89*         display is completed.
       90*
       91*      list: 
       92*         input:   ptr                 pointer to forum_user_trans structure for
       93*                                      transaction to be listed
       94*                  char (*)            ioa_ control string to be used to output
       95*                                      line of listing
       96*                  fixed bin           max number of chars from subject to
       97*                                      include in listing
       98*         output:  fixed bin (35)      standard error code
       99*         This entry is used to output a 1 line listing of a transaction. The
      100*         listing includes the forum transaction number, the number of lines in
      101*         the transaction, the date and time that it was entered, the person and
      102*         project ids of the person who entered it and as much of the subject as
      103*         is possible. The format for all this output is controled by the input
      104*         ioa_ control string. This entry does not print out any header lines,
      105*         it is assumed that the caller has done so. It also therefore never
      106*         clears the user_io window. If the transaction subject is longer than
      107*         the input max length the subject is truncated to max_len - 3 and ...
      108*         appended to it. If the subject contains a new line character it is
      109*         truncated at that point and ... appended to it. The date and time
      110*         are output in tghe user's default date and time formats. NOTE that
      111*         these can be different from the user's default date_time format.
      112*         The forum_user_trans structure is freed after the listing line is
      113*         output.
      114*
      115*      write:
      116*         input:   ptr                 pointer to forum_user_trans structure for
      117*                                      transaction to be written
      118*                  ptr                 pointer to segment that transaction is to
      119*                                      be written to
      120*         output:  fixed bin (35)      standard error code
      121*         This entry writes the transaction to a segment. The transaction will
      122*         begin at the beginning of the segment. The bit count of the segment
      123*         will be set and the segment truncated to the transaction length.
      124*         It will also be specially formated so that the emacs extension can
      125*         use it. See the description of the internal proc write_to_seg for a
      126*         description of the special emacs formating. The transaction will be
      127*         written using the user's default date-time format and the
      128*         forum_user_trans structure will be freed after it is written. The
      129*         user_io is not touched by this entry.
      130* 
      131*      append:
      132*         input:   ptr                 pointer to forum_user_trans structure for
      133*                                      transaction to be appended
      134*                  ptr                 pointer to segment that transaction is to
      135*                                      be appended to
      136*                  bit (1) aligned     "1"b indicates that segment will be
      137*                                      handed to emacs for display
      138*         input/output:
      139*                  fixed bin (24)      original and updated bit count of segment
      140*         output:  fixed bin (35)      standard error code
      141*         This entry appends a transaction to the end of a segment.
      142*         The bit count of the segment will be updated to reflect the new data.
      143*         If the input for_emacs_sw is set to true the transaction will be
      144*         specially formated so that the emacs extension can use it. See the
      145*         description of the internal proc write_to_seg for a description of the
      146*         special emacs formating. The transaction will be written using the
      147*         user's default date-time format and the forum_user_trans structure
      148*         will be freed after it is written. The user_io is not touched by
      149*         this entry.
      150*
      151*
      152*
      153*   description of internal procedures:
      154*      write_to_seg: This procedure is called by both the write entry and the
      155*      append entry. It writes the transaction to the segment positioning it
      156*      to start after anything already in the segment (the write entry calls it
      157*      with a starting bit count of 0). After its written the new bit count is
      158*      calculated and set. The header line of the transaction includes the
      159*      date-time that the transaction was entered. This date-time is written in
      160*      the user's default date-time format. There are two formats that are used
      161*      to output the transaction. The "normal" format will preceed each
      162*      transaction with a form feed, unless the segment's starting bit count is
      163*      0. In the "emacs" format the transactions are preceeded by a blank line,
      164*      unless the segment's starting bit count is 0. In addition an ESCAPE
      165*      character will be appended onto the subject of the transaction written
      166*      when the segments starting bit count is 0. The ESCAPE is used to
      167*      terminate the subject so that the emacs editor extension can identify
      168*      the end og multi-line subjects. After the segment's bit count has been
      169*      updated the forum_user_trans structure is freed.
      170*
      171*      make_end_line: This internal procedure creates the last line displayed
      172*      when the transaction is displayed or written to a segment. It determines 
      173*      if the transaction being displayed or written is part of a comment chain.
      174*      The end line string indicates that the end of the transaction has been
      175*      reached and if there is a previous or next comment in the same comment
      176*      chain. The end line string is returned to the main procedure and used as
      177*      an argument in the calls to ioa_.
      178*
      179*      count_lines: This internal proc counts the number of lines that make up
      180*      the comment. It does this by searching the comment counting new line
      181*      characters.
      182*
      183*      error: Similar to all other error procedures. It records in an internal
      184*      static structure the details of an error and then signals the
      185*      xforum_fatal_error condition.
      186*
      187*   known bugs:
      188*
      189*   notes:
      190*
      191*   history
      192*      84-06-14 Davids: Modified so that fnumber (the transaction number) is
      193*      declared fixed bin instead of pc "9999". This was needed because
      194*      there are meetings with more than 9999 transactions. Fixed bin was used
      195*      so that leading 0's are not output. Changed call ioa_ statements to refer
      196*      to fnumber as ^i instead of ^a.
      197*
      198*      84-08-08 Davids: Modified so that the loop that counts the number of
      199*      lines (at the beginning of COMMON) can handle the case where the last
      200*      line does not end in a NL character. This was causing an infinite loop.
      201*      Also added the make_end_line routine to change the termination string
      202*      to that defined in the MTB.
      203*
      204*      84-09-26 Davids: Modified so that right before it returns it frees the
      205*      structure associated with the transaction. This was put here instead of
      206*      requiring that the all the callers did it. Also changed from using
      207*      hcs_$set_bc to using terminate_file_.
      208*
      209*      84-09-27 Davids: Added the append entry point and code in COMMON to
      210*      implement it.
      211*
      212*      84-10-24 Davids: Modified the make_end_line internal proc so that
      213*      the forum_user_trans structures that are allocated in the calls
      214*      to xforum_trans$next_ref and previous_ref are freed. they were not being
      215*      freed and large numbers of selections were causing RQOs in the pdir -
      216*      which results in a fatal process error.
      217*
      218*      84-10-29 Davids: Added the approx_trans_length variable and made the
      219*      lengths of seg and append_seg that long instead of the constant 1000000
      220*      characters. This was needed because ioa_$rs was creating a segment of
      221*      1000000 characters of 245 pages. If the user does not have the quota 
      222*      it dies with a record quota overflow. The 500 character constant is used
      223*      to take care of the header and trailer lines.
      224*
      225*      84-11-14 Davids: Auditing changes: 1) Under the COMMON label, combined
      226*      the the write and append code by extending the ioa_ string to include the
      227*      form feed if the bit count is not zero. 2) Also combined the code for
      228*      producing a listing so that only 1 call to ioa_ is made. a local copy
      229*      of the subject is made which is either the entire subject or the first
      230*      18 characters of the subject and the string <MORE>. 3) In make_end_line
      231*      combined three separate calls to ioa_ which depended on the flags into 1
      232*      call with a more complex ioa_ string and the flags input to ioa_.
      233*      3) cleaned up the declarations.
      234*   END DESCRIPTION
      235**/
      236 
      237 /* PARAMETERS */
      238 
      239 /* EXTERNAL STATIC */
      240 
      241 /* ENTRIES */
      242 
      243 	dcl     date_time_$format	 entry (char (*), fixed bin (71), char (*), char (*)) returns (char (250) var);
      244 	dcl     ioa_		 entry () options (variable);
      245 	dcl     ioa_$rs		 entry () options (variable);
      246 	dcl     ioa_$rsnnl		 entry () options (variable);
      247 	dcl     iox_$user_io	 ptr ext static;
      248 	dcl     signal_		 entry () options (variable);
      249 	dcl     terminate_file_	 entry (ptr, fixed bin (24), bit (*), fixed bin (35));
      250 	dcl     window_$clear_window	 entry (ptr, fixed bin (35));
      251 	dcl     xforum_trans_$next_ref entry (fixed bin, ptr, fixed bin (35));
      252 	dcl     xforum_trans_$prev_ref entry (fixed bin, ptr, fixed bin (35));
      253 
      254 /* CONDITIONS */
      255 
      256 /* INTERNAL AUTOMATIC */
      257 
      258 	dcl     xf_end_line		 char (100) varying;/* contains the last line of the display */
      259 						/* indicates the comment number and if its part of a subject chain */
      260 
      261 /* INTERNAL STATIC */
      262 
      263 	dcl     01 xf_xforum_error_info like xforum_error_info internal static;
      264 						/* used to record error infor to be outpuyt to the user */
      265 
      266 /* CONSTANTS */
      267 
      268 	dcl     xf_NL		 char (1) init ("
      269 ") internal static options (constant);
      270 						/* new line character */
      271 
      272 /* BUILTINS */
      273 
      274 	dcl     (
      275 	        addbitno,
      276 	        addr,
      277 	        index,
      278 	        length,
      279 	        null,
      280 	        rtrim,
      281 	        substr
      282 	        )			 builtin;
      283 
      284 /* BASED */
      285 
      286 /* INCLUDE FILES */
      287 
  1     1 /* BEGIN INCLUDE FILE     xforum_error_info      84-06-19 Davids */
  1     2 
  1     3 dcl 01 xforum_error_info based,
  1     4      02 name char (32),
  1     5      02 entry char (32),
  1     6      02 doing char (100),
  1     7      02 code fixed bin (35),
  1     8      02 reason char (512);
  1     9 
  1    10 /* END INCLUDE FILE     xforum_error_info */
      288 
      289 
  2     1 /*  START OF:	xforum_ptr_struct_.incl.pl1		  *  *  *  *  * */
  2     2 
  2     3 declare 1 xforum_ptr_struct_            external static,
  2     4 	2 xforum_meeting_list_ptr	ptr,
  2     5 	2 xforum_meeting_info_ptr	ptr,
  2     6 	2 xforum_trans_array_ptr	ptr,
  2     7 	2 xforum_system_area_ptr	ptr;
  2     8 
  2     9 /*  END OF:	xforum_ptr_struct_.incl.pl1		  *  *  *  *  * */
      290 
      291 
  3     1 /*  START OF:	xforum_meeting_info.incl.pl1		  *  *  *  *  * */
  3     2 
  3     3 
  3     4 
  3     5 /****^  HISTORY COMMENTS:
  3     6*  1) change(84-05-03,Davids), approve(84-05-03,MCR7350),
  3     7*     audit(86-04-24,Gilcrease), install(86-04-24,MR12.0-1048):
  3     8*     Changed the length of name from 20 characters to 32 characters.
  3     9*     Version 2 forum names can be 26 characters long (forum suffix) -
  3    10*     and a little extra incase version 3 uses a shorter suffix yet.
  3    11*     
  3    12*     84-10-03 Davids: added the unread_count, next_unread, and
  3    13*     seen_map_ptr elements.  Also the declaration for the
  3    14*     seen_map_string and seen_map.
  3    15*     
  3    16*     85-01-24 Davids: added the set_array_ptr to the
  3    17*     xforum_meeting_info structure and the set_array structure and
  3    18*     SET_ARRAY_SPEC_LEN variable.
  3    19*  2) change(86-02-17,LJAdams), approve(86-02-17,MCR7350),
  3    20*     audit(86-04-24,Gilcrease), install(86-04-24,MR12.0-1048):
  3    21*     Added restref flag.
  3    22*                                                   END HISTORY COMMENTS */
  3    23 
  3    24 declare 1 xforum_meeting_info                based (xforum_meeting_info_ptr),
  3    25 	2 name			     char (32),
  3    26 	2 lidx			     fixed bin,
  3    27 	2 idx			     fixed bin,
  3    28 	2 current			     fixed bin,
  3    29 	2 last_seen		     fixed bin,
  3    30 	2 first_trans		     fixed bin,
  3    31 	2 last_trans		     fixed bin,
  3    32 	2 new_trans		     fixed bin,
  3    33 	2 flags unal,
  3    34 	  3 all                            bit (1),
  3    35 	  3 allref		     bit (1),
  3    36             3 restref                        bit (1),
  3    37 	  3 new			     bit (1),
  3    38 	  3 range			     bit (1),
  3    39             3 set                            bit (1),
  3    40 	2 current_ref		     fixed bin,
  3    41 	2 low			     fixed bin,
  3    42 	2 high			     fixed bin,
  3    43 	2 trans_struct_ptr		     ptr,
  3    44           2 next_unread                      fixed bin,
  3    45           2 unread_count                     fixed bin,
  3    46           2 seen_map_ptr                     ptr,
  3    47           2 set_array_ptr                    ptr;
  3    48 
  3    49 dcl seen_map_string bit (1000000) based;
  3    50 dcl seen_map (1000000) bit (1) unaligned based;
  3    51 
  3    52 dcl 01 set_array based (xforum_meeting_info.set_array_ptr),
  3    53      02 number fixed bin,
  3    54      02 spec char (80) varying,
  3    55      02 index (100000);
  3    56 
  3    57 dcl SET_ARRAY_SPEC_LEN fixed bin init (80) internal static options (constant);
  3    58 
  3    59 /*  END OF:	xforum_meeting_info.incl.pl1		  *  *  *  *  * */
      292 
      293 
  4     1 /*  BEGIN INCLUDE FILE:  forum_user_trans.incl.pl1  */
  4     2 
  4     3 dcl alloc_text_length fixed bin (21);			/* length of text area to allocate */
  4     4 dcl alloc_subject_length fixed bin (21);			/* length of subject area to allocate */
  4     5 dcl forum_user_trans_ptr ptr;				/* pointer to below structure */
  4     6 
  4     7 dcl 1 forum_user_trans based (forum_user_trans_ptr) aligned,
  4     8     2 type fixed bin,				/* type of transaction */
  4     9     2 person_id char (22),				/* person_id of author of this transaction */
  4    10     2 project_id char (9),				/* project_id of author of this transaction */
  4    11     2 time fixed bin (71),				/* time transaction was entered */
  4    12     2 trans_no fixed bin,				/* number of this transaction */
  4    13     2 next_trans_ptr ptr,				/* pointer (in user ring) of next transaction */
  4    14     2 prev_trans_ptr ptr,				/* pointer (in user ring) of previous transaction */
  4    15     2 subject_length fixed bin (21),			/* length of subject field of transaction */
  4    16     2 text_length fixed bin (21),				/* length of text field of transaction */
  4    17     2 unfilled bit (1) aligned,			/* set if transaction is NOT stored filled */
  4    18     2 subject char (alloc_subject_length refer (forum_user_trans.subject_length)) unaligned,     /* subject of transaction */
  4    19     2 text char (alloc_text_length refer (forum_user_trans.text_length)) unaligned;    /* text of transaction */
  4    20 
  4    21 declare user_trans_type fixed bin static options (constant) initial (1);
  4    22 declare message_type fixed bin static options (constant) initial (2);
  4    23 
  4    24 declare	(ONLY_UNDELETED		init (0),
  4    25 	INCLUDE_DELETED		init (1),
  4    26 	ONLY_DELETED		init (2))
  4    27 				fixed bin static options (constant);
  4    28 
  4    29 /* END INCLUDE FILE:  forum_user_trans.incl.pl1 */
      294 
      295 
  5     1 /* BEGIN INCLUDE FILE ... terminate_file.incl.pl1 */
  5     2 /* format: style2,^inddcls,idind32 */
  5     3 
  5     4 declare 1 terminate_file_switches	based,
  5     5 	2 truncate		bit (1) unaligned,
  5     6 	2 set_bc			bit (1) unaligned,
  5     7 	2 terminate		bit (1) unaligned,
  5     8 	2 force_write		bit (1) unaligned,
  5     9 	2 delete			bit (1) unaligned;
  5    10 
  5    11 declare TERM_FILE_TRUNC		bit (1) internal static options (constant) initial ("1"b);
  5    12 declare TERM_FILE_BC		bit (2) internal static options (constant) initial ("01"b);
  5    13 declare TERM_FILE_TRUNC_BC		bit (2) internal static options (constant) initial ("11"b);
  5    14 declare TERM_FILE_TERM		bit (3) internal static options (constant) initial ("001"b);
  5    15 declare TERM_FILE_TRUNC_BC_TERM	bit (3) internal static options (constant) initial ("111"b);
  5    16 declare TERM_FILE_FORCE_WRITE		bit (4) internal static options (constant) initial ("0001"b);
  5    17 declare TERM_FILE_DELETE		bit (5) internal static options (constant) initial ("00001"b);
  5    18 
  5    19 /* END INCLUDE FILE ... terminate_file.incl.pl1 */
      296 
      297 
      298 	call error (0, "Internal programming error - xforum_format_$xforum_format called.");
      299 
      300 display: entry (d_forum_user_trans_ptr, d_clear_sw, d_code);
      301 
      302 /* PARAMETERS */
      303 
      304 	dcl     d_forum_user_trans_ptr ptr;		/* (input) pointer to forum_user_trans */
      305 						/*         structure for transaction to be displayed */
      306 	dcl     d_clear_sw		 bit (1) aligned;	/* (input) if "1"b the user_io window */
      307 						/*         will be cleared prior to the display */
      308 	dcl     d_code		 fixed bin (35);	/* (output) standard error code */
      309 
      310 /* INTERNAL AUTOMATIC */
      311 
      312 	dcl     d_date_time		 char (256);	/* date and time comment was entered */
      313 						/* formated according to the users date_time format */
      314 	dcl     d_lines		 fixed bin;	/* number of lines in the comment */
      315 	dcl     d_number		 fixed bin;	/* forum comment number */
      316 
      317 
      318 
      319 
      320 
      321 	d_code = 0;
      322 
      323 	if d_clear_sw
      324 	then call window_$clear_window (iox_$user_io, (0));
      325 
      326 	forum_user_trans_ptr = d_forum_user_trans_ptr;
      327 	d_number = forum_user_trans.trans_no;
      328 	d_lines = count_lines ();
      329 	call make_end_line (d_number);
      330 
      331 	d_date_time = date_time_$format ("^<date_time>", forum_user_trans.time, "", "");
      332 	call ioa_ (
      333 	     "^[^/^][^i] (^d line^[s^]) ^a.^a ^a ^a^/Subject: ^a^/^a--------------^/^a",
      334 	     ^d_clear_sw, d_number, d_lines, (d_lines ^= 1),
      335 	     forum_user_trans.person_id, forum_user_trans.project_id,
      336 	     d_date_time, xforum_meeting_info.name,
      337 	     forum_user_trans.subject, forum_user_trans.text,
      338 	     xf_end_line);
      339 
      340 	free forum_user_trans;
      341 
      342 	return;
      343 
      344 list: entry (l_forum_user_trans_ptr, l_item_line, l_subject_max_len, l_code);
      345 
      346 /* PARAMETERS */
      347 
      348 	dcl     l_forum_user_trans_ptr ptr;		/* (input) pointer to forum_user_trans */
      349 						/*         structure for transaction to be listed */
      350 	dcl     l_item_line		 char (*);	/* (input) ioa_ control string to */
      351 						/*         be used to output line of listing */
      352 	dcl     l_subject_max_len	 fixed bin;	/* (input) max number of chars from */
      353 						/*         subject to include in listing */
      354 	dcl     l_code		 fixed bin (35);	/* (output) standard error code */
      355 
      356 /* INTERNAL AUTOMATIC */
      357 
      358 	dcl     l_date_string	 char (100);	/* date comment was entered */
      359 						/* formated according to the users date format */
      360 	dcl     l_lines		 fixed bin;	/* number of lines in the comment */
      361 	dcl     l_local_subject	 char (25);	/* that part of the subject string that will be listed */
      362 	dcl     l_nl_index		 fixed bin;	/* index in local_subject string of */
      363 						/* the first new line char, if any */
      364 	dcl     l_number		 fixed bin;	/* forum comment number */
      365 	dcl     l_time_string	 char (100);	/* time comment was entered */
      366 						/* formated according to the users time format */
      367 
      368 
      369 
      370 
      371 
      372 	l_code = 0;
      373 
      374 	forum_user_trans_ptr = l_forum_user_trans_ptr;
      375 	l_number = forum_user_trans.trans_no;
      376 	l_lines = count_lines ();
      377 
      378 	l_date_string = date_time_$format ("^<date>", forum_user_trans.time, "", "");
      379 	l_time_string = date_time_$format ("^<time>", forum_user_trans.time, "", "");
      380 
      381 	if length (rtrim (forum_user_trans.subject)) <= l_subject_max_len
      382 	then l_local_subject = forum_user_trans.subject;
      383 	else l_local_subject = substr (forum_user_trans.subject, 1, l_subject_max_len - 3) || "...";
      384 
      385 	l_nl_index = index (l_local_subject, xf_NL);
      386 	if l_nl_index > 0
      387 	then do;
      388 	     if l_nl_index <= l_subject_max_len - 3
      389 	     then l_local_subject = substr (forum_user_trans.subject, 1, l_nl_index - 1) || "...";
      390 	     else l_local_subject = substr (forum_user_trans.subject, 1, l_subject_max_len - 3) || "...";
      391 	end;
      392 
      393 	call ioa_ (l_item_line, l_number, (l_number = xforum_meeting_info.current), l_lines,
      394 	     l_date_string, l_time_string, forum_user_trans.person_id, forum_user_trans.project_id, l_local_subject);
      395 
      396 	free forum_user_trans;
      397 
      398 	return;
      399 
      400 write: entry (w_forum_user_trans_ptr, w_seg_ptr, w_code);
      401 
      402 /* PARAMETERS */
      403 
      404 	dcl     w_forum_user_trans_ptr ptr;		/* (input) pointer to forum_user_trans */
      405 						/*         structure for transaction to be written */
      406 	dcl     w_seg_ptr		 ptr;		/* (input) pointer to segment that */
      407 						/*         transaction is to be written to */
      408 	dcl     w_code		 fixed bin (35);	/* (output) standard error code */
      409 
      410 /* INTERNAL AUTOMATIC */
      411 
      412 	dcl     w_for_emacs_sw	 bit (1) aligned;	/* indicates special handling because output */
      413 						/* will be read by the emacs extension */
      414 	dcl     w_starting_bc	 fixed bin (24);	/* bit count of segment before the comment has been written out */
      415 	dcl     w_unused_fb24	 fixed bin (24) aligned; /* unused output parameter */
      416 
      417 
      418 
      419 
      420 
      421 	w_code = 0;
      422 	w_starting_bc = 0;
      423 	w_for_emacs_sw = "1"b;
      424 
      425 	call write_to_seg (w_forum_user_trans_ptr, w_seg_ptr, w_starting_bc, w_for_emacs_sw, w_unused_fb24, w_code);
      426 
      427 	return;
      428 
      429 append: entry (a_forum_user_trans_ptr, a_seg_ptr, a_for_emacs_sw, a_bc, a_code);
      430 
      431 /* PARAMETERS */
      432 
      433 	dcl     a_forum_user_trans_ptr ptr;		/* (input) pointer to forum_user_trans */
      434 						/*         structure for transaction to be appended */
      435 	dcl     a_seg_ptr		 ptr;		/* (input) pointer to segment that */
      436 						/*         transaction is to be appended to */
      437 	dcl     a_for_emacs_sw	 bit (1) aligned;	/* (input) "1"b indicates that segment will */
      438 						/*         be handed to emacs for display */
      439 	dcl     a_bc		 fixed bin (24);	/* (input/output) original and updated bit count of segment */
      440 	dcl     a_code		 fixed bin (35);	/* (output) standard error code */
      441 
      442 /* INTERNAL AUTOMATIC */
      443 
      444 	dcl     a_final_bc		 fixed bin (24) aligned; /* bit count of segment after */
      445 						/* the comment has been written out */
      446 
      447 
      448 
      449 
      450 
      451 	a_code = 0;
      452 
      453 	call write_to_seg (a_forum_user_trans_ptr, a_seg_ptr, a_bc, a_for_emacs_sw, a_final_bc, a_code);
      454 
      455 	a_bc = a_final_bc;
      456 
      457 	return;
      458 
      459 write_to_seg: proc (wts_forum_user_trans_ptr, wts_seg_ptr, wts_starting_bc, wts_for_emacs_sw, wts_final_bc, wts_code);
      460 
      461 /* PARAMETERS */
      462 
      463 	dcl     wts_forum_user_trans_ptr ptr;		/* (input) pointer to the forum_user_trans */
      464 						/*         structure for transaction to be written out */
      465 	dcl     wts_seg_ptr		 ptr;		/* (input) pointer to segment where */
      466 						/*         transaction is to be written */
      467 	dcl     wts_starting_bc	 fixed bin (24);	/* (input) bit count of segment before write */
      468 	dcl     wts_for_emacs_sw	 bit (1) aligned;	/* (input) "1"b indicates that segment will */
      469 						/*         be handed to emacs for display */
      470 	dcl     wts_final_bc	 fixed bin (24);	/* (output) bit count of segment after write */
      471 	dcl     wts_code		 fixed bin (35);	/* (output) standard error code */
      472 
      473 /* INTERNAL AUTOMATIC */
      474 
      475 	dcl     wts_approx_trans_length fixed bin;	/* estimation of comment length for */
      476 						/* basing the wts_seg based string */
      477 	dcl     wts_date_time	 char (200);	/* date and time comment was entered */
      478 						/* formatted according to the users date_time format */
      479 	dcl     wts_first_char_ptr	 ptr;		/* pointer to where first character is to be written in wts_seg */
      480 	dcl     wts_lines		 fixed bin;	/* number of lines in the comment */
      481 	dcl     wts_no_chars	 fixed bin;	/* number of characters actually written to wts_seg */
      482 	dcl     wts_number		 fixed bin;	/* forum comment number */
      483 
      484 /* BASED */
      485 
      486 	dcl     wts_seg		 char (wts_approx_trans_length) based (wts_first_char_ptr);
      487 
      488 
      489 
      490 
      491 
      492 	wts_code = 0;
      493 
      494 	forum_user_trans_ptr = wts_forum_user_trans_ptr;
      495 	wts_number = forum_user_trans.trans_no;
      496 	wts_lines = count_lines ();
      497 	call make_end_line (wts_number);
      498 
      499 	wts_date_time = date_time_$format ("^<date_time>", forum_user_trans.time, "", "");
      500 
      501 	if wts_starting_bc ^= 0
      502 	then wts_first_char_ptr = addbitno (wts_seg_ptr, wts_starting_bc + 1);
      503 	else wts_first_char_ptr = wts_seg_ptr;
      504 
      505 	wts_approx_trans_length = forum_user_trans.subject_length + forum_user_trans.text_length + 500;
      506 	call ioa_$rs (
      507 	     "^[^s^;^[^/^;^|^]^][^i] (^d line^[s^]) ^a.^a ^a ^a^/Subject: ^a^[^]^/^a--------------^/^a",
      508 	     wts_seg, wts_no_chars, (wts_starting_bc = 0), wts_for_emacs_sw,
      509 	     wts_number, wts_lines, (wts_lines ^= 1), forum_user_trans.person_id,
      510 	     forum_user_trans.project_id, wts_date_time, xforum_meeting_info.name,
      511 	     forum_user_trans.subject, ((wts_starting_bc = 0) & wts_for_emacs_sw),
      512 	     forum_user_trans.text, xf_end_line);
      513 
      514 	wts_final_bc = (wts_no_chars * 9) + wts_starting_bc;
      515 	call terminate_file_ (wts_seg_ptr, wts_final_bc, TERM_FILE_TRUNC_BC, wts_code);
      516 
      517 	free forum_user_trans;
      518 
      519 	return;
      520 
      521      end write_to_seg;
      522 
      523 make_end_line: proc (mel_number);
      524 
      525 /*
      526*   Note that the next_trans_ptr and prev_trans_ptr pointers in the
      527*   forum_user_trans structure are not usable, they are set to null regardless
      528*   of the next/prev status of the current transaction.
      529**/
      530 
      531 /* PARAMETERS */
      532 
      533 	dcl     mel_number		 fixed bin;	/* (input) number of current transaction */
      534 
      535 /* AUTOMATIC */
      536 
      537 	dcl     mel_code		 fixed bin (35);	/* standard error code */
      538 	dcl     mel_forum_user_trans_ptr ptr;		/* pointer to next and previous transaction */
      539 	dcl     mel_next_trans	 bit (1);		/* true if current transaction has a next reference */
      540 	dcl     mel_prev_trans	 bit (1);		/* true if current transaction has a previous reference */
      541 	dcl     mel_unused_fb21	 fixed bin (21);	/* unused output from ioa_ */
      542 
      543 
      544 
      545 
      546 
      547 	mel_next_trans = "1"b;
      548 	mel_prev_trans = "1"b;
      549 
      550 	call xforum_trans_$next_ref (mel_number, mel_forum_user_trans_ptr, mel_code);
      551 	if mel_code ^= 0
      552 	then mel_next_trans = "0"b;
      553 	else free mel_forum_user_trans_ptr -> forum_user_trans;
      554 
      555 	call xforum_trans_$prev_ref (mel_number, mel_forum_user_trans_ptr, mel_code);
      556 	if mel_code ^= 0
      557 	then mel_prev_trans = "0"b;
      558 	else free mel_forum_user_trans_ptr -> forum_user_trans;
      559 
      560 	call ioa_$rsnnl ("End of comment number ^i^[.^;, (^[next^]^[ and ^]^[previous^] comment on subject available).^]",
      561 	     xf_end_line, mel_unused_fb21, mel_number,
      562 	     ^mel_next_trans & ^mel_prev_trans, mel_next_trans,
      563 	     mel_next_trans & mel_prev_trans, mel_prev_trans);
      564 
      565 	return;
      566 
      567      end make_end_line;
      568 
      569 count_lines: proc () returns (fixed bin);
      570 
      571 /* INTERNAL AUTOMATIC */
      572 
      573 	dcl     cl_i		 fixed bin;	/* index of "last" new line character found */
      574 	dcl     cl_j		 fixed bin;	/* index of "next" new line character found */
      575 	dcl     cl_lines		 fixed bin;	/* could of new line characters found */
      576 
      577 
      578 
      579 
      580 
      581 	cl_lines = 1;
      582 	cl_i = index (forum_user_trans.text, xf_NL);
      583 	do while (cl_i < forum_user_trans.text_length);
      584 	     cl_lines = cl_lines + 1;
      585 	     cl_j = index (substr (forum_user_trans.text, cl_i + 1), xf_NL);
      586 	     if cl_j ^= 0
      587 	     then cl_i = cl_i + cl_j;
      588 	     else cl_i = forum_user_trans.text_length;
      589 	end;
      590 
      591 	return (cl_lines);
      592 
      593      end count_lines;
      594 
      595 error: proc (e_code, e_message);
      596 
      597 /* PARAMETERS */
      598 
      599 	dcl     e_code		 fixed bin (35);	/* (input) error code associated with the error */
      600 	dcl     e_message		 char (*);	/* (input) message to be output to user */
      601 
      602 
      603 
      604 
      605 
      606 	xf_xforum_error_info.name = "xforum_format_";
      607 	xf_xforum_error_info.entry = "";
      608 	xf_xforum_error_info.doing = "";
      609 	xf_xforum_error_info.code = e_code;
      610 	xf_xforum_error_info.reason = e_message;
      611 
      612 	call signal_ ("xforum_fatal_error", null (), addr (xf_xforum_error_info), null ());
      613 
      614      end error;
      615 
      616      end xforum_format_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    04/24/86  1513.4  xforum_format_.pl1                >special_ldd>install>MR12.0-1048>xforum_format_.pl1
288          1    12/03/84  1241.6  xforum_error_info.incl.pl1        >ldd>include>xforum_error_info.incl.pl1
290          2    12/03/84  1241.6  xforum_ptr_struct_.incl.pl1       >ldd>include>xforum_ptr_struct_.incl.pl1
292          3    04/24/86  1505.6  xforum_meeting_info.incl.pl1      >special_ldd>install>MR12.0-1048>xforum_meeting_info.incl.pl1
294          4    10/31/84  1115.4  forum_user_trans.incl.pl1         >ldd>include>forum_user_trans.incl.pl1
296          5    04/06/83  1239.4  terminate_file.incl.pl1           >ldd>include>terminate_file.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
TERM_FILE_TRUNC_BC              000000 constant        bit(2)                   initial unaligned dcl 5-13 set ref 515*
a_bc                                   parameter       fixed bin(24,0)          dcl 439 set ref 429 453* 455*
a_code                                 parameter       fixed bin(35,0)          dcl 440 set ref 429 451* 453*
a_final_bc                      000335 automatic       fixed bin(24,0)          dcl 444 set ref 453* 455
a_for_emacs_sw                         parameter       bit(1)                   dcl 437 set ref 429 453*
a_forum_user_trans_ptr                 parameter       pointer                  dcl 433 set ref 429 453*
a_seg_ptr                              parameter       pointer                  dcl 435 set ref 429 453*
addbitno                                               builtin function         dcl 274 ref 501
addr                                                   builtin function         dcl 274 ref 612 612
cl_i                            000462 automatic       fixed bin(17,0)          dcl 573 set ref 582* 583 585 586* 586 588*
cl_j                            000463 automatic       fixed bin(17,0)          dcl 574 set ref 585* 586 586
cl_lines                        000464 automatic       fixed bin(17,0)          dcl 575 set ref 581* 584* 584 591
code                     51     000010 internal static fixed bin(35,0)          level 2 dcl 263 set ref 609*
current                  12            based           fixed bin(17,0)          level 2 dcl 3-24 ref 393
d_clear_sw                             parameter       bit(1)                   dcl 306 ref 300 323 332
d_code                                 parameter       fixed bin(35,0)          dcl 308 set ref 300 321*
d_date_time                     000134 automatic       char(256)                unaligned dcl 312 set ref 331* 332*
d_forum_user_trans_ptr                 parameter       pointer                  dcl 304 ref 300 326
d_lines                         000234 automatic       fixed bin(17,0)          dcl 314 set ref 328* 332* 332
d_number                        000235 automatic       fixed bin(17,0)          dcl 315 set ref 327* 329* 332*
date_time_$format               000262 constant        entry                    external dcl 243 ref 331 378 379 499
doing                    20     000010 internal static char(100)                level 2 packed unaligned dcl 263 set ref 608*
e_code                                 parameter       fixed bin(35,0)          dcl 599 ref 595 609
e_message                              parameter       char                     unaligned dcl 600 ref 595 610
entry                    10     000010 internal static char(32)                 level 2 packed unaligned dcl 263 set ref 607*
forum_user_trans                       based           structure                level 1 dcl 4-7 set ref 340 396 517 553 558
forum_user_trans_ptr            000132 automatic       pointer                  dcl 4-5 set ref 326* 327 331 332 332 332 332 340
                                                                                  374* 375 378 379 381 381 383 388 390 393 393 396
                                                                                  494* 495 499 505 505 506 506 506 506 517 582 583
                                                                                  585 588
index                                                  builtin function         dcl 274 ref 385 582 585
ioa_                            000264 constant        entry                    external dcl 244 ref 332 393
ioa_$rs                         000266 constant        entry                    external dcl 245 ref 506
ioa_$rsnnl                      000270 constant        entry                    external dcl 246 ref 560
iox_$user_io                    000272 external static pointer                  dcl 247 set ref 323*
l_code                                 parameter       fixed bin(35,0)          dcl 354 set ref 344 372*
l_date_string                   000236 automatic       char(100)                unaligned dcl 358 set ref 378* 393*
l_forum_user_trans_ptr                 parameter       pointer                  dcl 348 ref 344 374
l_item_line                            parameter       char                     unaligned dcl 350 set ref 344 393*
l_lines                         000267 automatic       fixed bin(17,0)          dcl 360 set ref 376* 393*
l_local_subject                 000270 automatic       char(25)                 unaligned dcl 361 set ref 381* 383* 385 388* 390*
                                                                                  393*
l_nl_index                      000277 automatic       fixed bin(17,0)          dcl 362 set ref 385* 386 388 388
l_number                        000300 automatic       fixed bin(17,0)          dcl 364 set ref 375* 393* 393
l_subject_max_len                      parameter       fixed bin(17,0)          dcl 352 ref 344 381 383 388 390
l_time_string                   000301 automatic       char(100)                unaligned dcl 365 set ref 379* 393*
length                                                 builtin function         dcl 274 ref 381
mel_code                        000444 automatic       fixed bin(35,0)          dcl 537 set ref 550* 551 555* 556
mel_forum_user_trans_ptr        000446 automatic       pointer                  dcl 538 set ref 550* 553 555* 558
mel_next_trans                  000450 automatic       bit(1)                   unaligned dcl 539 set ref 547* 551* 560 560* 560
mel_number                             parameter       fixed bin(17,0)          dcl 533 set ref 523 550* 555* 560*
mel_prev_trans                  000451 automatic       bit(1)                   unaligned dcl 540 set ref 548* 556* 560 560 560*
mel_unused_fb21                 000452 automatic       fixed bin(21,0)          dcl 541 set ref 560*
name                            000010 internal static char(32)                 level 2 in structure "xf_xforum_error_info" packed
                                                                                  unaligned dcl 263 in procedure "xforum_format_"
                                                                                  set ref 606*
name                                   based           char(32)                 level 2 in structure "xforum_meeting_info" packed
                                                                                  unaligned dcl 3-24 in procedure "xforum_format_"
                                                                                  set ref 332* 506*
null                                                   builtin function         dcl 274 ref 612 612 612 612
person_id                 1            based           char(22)                 level 2 dcl 4-7 set ref 332* 393* 506*
project_id                7            based           char(9)                  level 2 dcl 4-7 set ref 332* 393* 506*
reason                   52     000010 internal static char(512)                level 2 packed unaligned dcl 263 set ref 610*
rtrim                                                  builtin function         dcl 274 ref 381
signal_                         000274 constant        entry                    external dcl 248 ref 612
subject                  25            based           char                     level 2 packed unaligned dcl 4-7 set ref 332* 381
                                                                                  381 383 388 390 506*
subject_length           22            based           fixed bin(21,0)          level 2 dcl 4-7 ref 332 332 332 340 381 381 383 388
                                                                                  390 396 505 506 506 506 517 553 558 582 585
substr                                                 builtin function         dcl 274 ref 383 388 390 585
terminate_file_                 000276 constant        entry                    external dcl 249 ref 515
text                                   based           char                     level 2 packed unaligned dcl 4-7 set ref 332* 506*
                                                                                  582 585
text_length              23            based           fixed bin(21,0)          level 2 dcl 4-7 ref 332 332 340 396 505 506 506 517
                                                                                  553 558 582 583 585 588
time                     12            based           fixed bin(71,0)          level 2 dcl 4-7 set ref 331* 378* 379* 499*
trans_no                 14            based           fixed bin(17,0)          level 2 dcl 4-7 ref 327 375 495
w_code                                 parameter       fixed bin(35,0)          dcl 408 set ref 400 421* 425*
w_for_emacs_sw                  000332 automatic       bit(1)                   dcl 412 set ref 423* 425*
w_forum_user_trans_ptr                 parameter       pointer                  dcl 404 set ref 400 425*
w_seg_ptr                              parameter       pointer                  dcl 406 set ref 400 425*
w_starting_bc                   000333 automatic       fixed bin(24,0)          dcl 414 set ref 422* 425*
w_unused_fb24                   000334 automatic       fixed bin(24,0)          dcl 415 set ref 425*
window_$clear_window            000300 constant        entry                    external dcl 250 ref 323
wts_approx_trans_length         000344 automatic       fixed bin(17,0)          dcl 475 set ref 505* 506 506
wts_code                               parameter       fixed bin(35,0)          dcl 471 set ref 459 492* 515*
wts_date_time                   000345 automatic       char(200)                unaligned dcl 477 set ref 499* 506*
wts_final_bc                           parameter       fixed bin(24,0)          dcl 470 set ref 459 514* 515*
wts_first_char_ptr              000430 automatic       pointer                  dcl 479 set ref 501* 503* 506
wts_for_emacs_sw                       parameter       bit(1)                   dcl 468 set ref 459 506* 506
wts_forum_user_trans_ptr               parameter       pointer                  dcl 463 ref 459 494
wts_lines                       000432 automatic       fixed bin(17,0)          dcl 480 set ref 496* 506* 506
wts_no_chars                    000433 automatic       fixed bin(17,0)          dcl 481 set ref 506* 514
wts_number                      000434 automatic       fixed bin(17,0)          dcl 482 set ref 495* 497* 506*
wts_seg                                based           char                     unaligned dcl 486 set ref 506*
wts_seg_ptr                            parameter       pointer                  dcl 465 set ref 459 501 503 515*
wts_starting_bc                        parameter       fixed bin(24,0)          dcl 467 ref 459 501 501 506 506 514
xf_NL                                  constant        char(1)                  initial unaligned dcl 268 ref 385 582 585
xf_end_line                     000100 automatic       varying char(100)        dcl 258 set ref 332* 506* 560*
xf_xforum_error_info            000010 internal static structure                level 1 unaligned dcl 263 set ref 612 612
xforum_error_info                      based           structure                level 1 unaligned dcl 1-3
xforum_meeting_info                    based           structure                level 1 unaligned dcl 3-24
xforum_meeting_info_ptr
                          2     000306 external static pointer                  level 2 dcl 2-3 ref 332 393 506
xforum_ptr_struct_              000306 external static structure                level 1 unaligned dcl 2-3
xforum_trans_$next_ref          000302 constant        entry                    external dcl 251 ref 550
xforum_trans_$prev_ref          000304 constant        entry                    external dcl 252 ref 555

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
INCLUDE_DELETED                        internal static fixed bin(17,0)          initial dcl 4-24
ONLY_DELETED                           internal static fixed bin(17,0)          initial dcl 4-24
ONLY_UNDELETED                         internal static fixed bin(17,0)          initial dcl 4-24
SET_ARRAY_SPEC_LEN                     internal static fixed bin(17,0)          initial dcl 3-57
TERM_FILE_BC                           internal static bit(2)                   initial unaligned dcl 5-12
TERM_FILE_DELETE                       internal static bit(5)                   initial unaligned dcl 5-17
TERM_FILE_FORCE_WRITE                  internal static bit(4)                   initial unaligned dcl 5-16
TERM_FILE_TERM                         internal static bit(3)                   initial unaligned dcl 5-14
TERM_FILE_TRUNC                        internal static bit(1)                   initial unaligned dcl 5-11
TERM_FILE_TRUNC_BC_TERM                internal static bit(3)                   initial unaligned dcl 5-15
alloc_subject_length                   automatic       fixed bin(21,0)          dcl 4-4
alloc_text_length                      automatic       fixed bin(21,0)          dcl 4-3
message_type                           internal static fixed bin(17,0)          initial dcl 4-22
seen_map                               based           bit(1)                   array unaligned dcl 3-50
seen_map_string                        based           bit(1000000)             unaligned dcl 3-49
set_array                              based           structure                level 1 unaligned dcl 3-52
terminate_file_switches                based           structure                level 1 packed unaligned dcl 5-4
user_trans_type                        internal static fixed bin(17,0)          initial dcl 4-21

NAMES DECLARED BY EXPLICIT CONTEXT.
append                          001046 constant        entry                    external dcl 429
count_lines                     001554 constant        entry                    internal dcl 569 ref 328 376 496
display                         000224 constant        entry                    external dcl 300
error                           001632 constant        entry                    internal dcl 595 ref 298
list                            000452 constant        entry                    external dcl 344
make_end_line                   001376 constant        entry                    internal dcl 523 ref 329 497
write                           001006 constant        entry                    external dcl 400
write_to_seg                    001101 constant        entry                    internal dcl 459 ref 425 453
xforum_format_                  000203 constant        entry                    external dcl 55

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      2146        2456    1760        2156
Length      2776    1760       310         303     166         252

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
xforum_format_                      688 external procedure  is an external procedure.  
write_to_seg                            internal procedure  shares stack frame of external procedure xforum_format_.  
make_end_line                           internal procedure  shares stack frame of external procedure xforum_format_.  
count_lines                             internal procedure  shares stack frame of external procedure xforum_format_.  
error                                   internal procedure  shares stack frame of external procedure xforum_format_.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 xf_xforum_error_info        xforum_format_

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
xforum_format_           000100 xf_end_line                 xforum_format_
                         000132 forum_user_trans_ptr        xforum_format_
                         000134 d_date_time                 xforum_format_
                         000234 d_lines                     xforum_format_
                         000235 d_number                    xforum_format_
                         000236 l_date_string               xforum_format_
                         000267 l_lines                     xforum_format_
                         000270 l_local_subject             xforum_format_
                         000277 l_nl_index                  xforum_format_
                         000300 l_number                    xforum_format_
                         000301 l_time_string               xforum_format_
                         000332 w_for_emacs_sw              xforum_format_
                         000333 w_starting_bc               xforum_format_
                         000334 w_unused_fb24               xforum_format_
                         000335 a_final_bc                  xforum_format_
                         000344 wts_approx_trans_length     write_to_seg
                         000345 wts_date_time               write_to_seg
                         000430 wts_first_char_ptr          write_to_seg
                         000432 wts_lines                   write_to_seg
                         000433 wts_no_chars                write_to_seg
                         000434 wts_number                  write_to_seg
                         000444 mel_code                    make_end_line
                         000446 mel_forum_user_trans_ptr    make_end_line
                         000450 mel_next_trans              make_end_line
                         000451 mel_prev_trans              make_end_line
                         000452 mel_unused_fb21             make_end_line
                         000462 cl_i                        count_lines
                         000463 cl_j                        count_lines
                         000464 cl_lines                    count_lines

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_e_as              r_ne_as             alloc_cs            call_ext_out_desc   call_ext_out        return
shorten_stack       ext_entry           ext_entry_desc      free_based

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
date_time_$format             ioa_                          ioa_$rs                       ioa_$rsnnl
signal_                       terminate_file_               window_$clear_window          xforum_trans_$next_ref
xforum_trans_$prev_ref

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
iox_$user_io                  xforum_ptr_struct_




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     55 000202       298 000210       300 000217       321 000231       323 000233       326 000250       327 000254
    328 000256       329 000260       331 000262       332 000323       340 000434       342 000444       344 000445
    372 000465       374 000467       375 000472       376 000474       378 000476       379 000535       381 000574
    383 000616       385 000635       386 000647       388 000650       390 000675       391 000712       393 000713
    396 000771       398 001001       400 001002       421 001013       422 001015       423 001016       425 001020
    427 001040       429 001041       451 001053       453 001055       455 001075       457 001100       459 001101
    492 001103       494 001104       495 001107       496 001111       497 001113       499 001115       501 001156
    503 001167       505 001172       506 001177       514 001333       515 001340       517 001365       519 001375
    523 001376       547 001400       548 001402       550 001403       551 001416       553 001423       555 001433
    556 001447       558 001454       560 001464       565 001553       569 001554       581 001556       582 001560
    583 001574       584 001600       585 001601       586 001620       588 001623       589 001625       591 001626
    595 001632       606 001643       607 001647       608 001652       609 001655       610 001660       612 001665
    614 001717


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
