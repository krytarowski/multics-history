	COMPILATION LISTING OF SEGMENT cobol_insert_token
	Compiled by: Multics PL/I Compiler, Release 31b, of April 24, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 05/24/89  1009.3 mst Wed
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        6*        *                                                         *
        7*        * Copyright (c) 1972 by Massachusetts Institute of        *
        8*        * Technology and Honeywell Information Systems, Inc.      *
        9*        *                                                         *
       10*        *********************************************************** */
       11 
       12 
       13 
       14 
       15 /****^  HISTORY COMMENTS:
       16*  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
       17*     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
       18*     MCR8060 cobol_insert_token.pl1 Reformatted code to new Cobol standard.
       19*                                                   END HISTORY COMMENTS */
       20 
       21 
       22 /* Modified on 12/09/80 by FCH, [4.4-1], size of token in token stack increased */
       23 /* Modified since Version 4.0 */
       24 
       25 /* format: style3 */
       26 cobol_insert_token:
       27      proc (token_type, tv_len);
       28 
       29 dcl	cobol_allo_tm	entry (ptr, fixed bin) ext;
       30 dcl	cobol_output_tokens entry ext;
       31 
       32 /*   general overlay for any token    */
       33 
       34 dcl	1 token		based (cobol_current),
       35 	  2 fwd_link	pointer,
       36 	  2 back_link	pointer,
       37 	  2 rep_link	pointer,
       38 	  2 l_info	bit (8),
       39 	  2 size		fixed bin,
       40 	  2 line		fixed bin,
       41 	  2 column	fixed bin,
       42 	  2 type		fixed bin,
       43 	  2 body		char (1);
       44 
       45 dcl	zerosb		(100) bit (9) static init ((100) (1)"000000000"b);
       46 dcl	zeros		char (100) based (addr (zerosb));
       47 dcl	zmvr		char (tb_len) based (addr (token.body));
       48 
       49 /* 
       50*   This routine makes all entries in the token stack.  A new blank token will be inserted immediately
       51*   after the token pointed to by "current".
       52*    */
       53 
       54 
       55 
       56 dcl	p		pointer;
       57 dcl	(token_type, tb_len, tv_len)
       58 			fixed bin;
       59 
       60 /* Type 8 token must be at least as big as type 1 token */
       61 
       62 dcl	token_base_len	(24) fixed bin static init (12, 20, 8, 4, 16, 8, 36, 8, (15) 0, 5);
       63 
       64 dcl	addr		builtin;
       65 dcl	null		builtin;
       66 
       67 
       68 	tb_len = token_base_len (token_type);
       69 
       70 	if cobol_stack_sw = "1"b
       71 	then do;
       72 		cobol_init_ta_sw = "1"b;
       73 		if cobol_output_sw = "1"b
       74 		then do;
       75 			call cobol_output_tokens;
       76 
       77 			cobol_output_sw = "0"b;
       78 		     end;
       79 
       80 		if cobol_frst = null ()
       81 		then do;				/* the stack is empty */
       82 			call al_token;
       83 
       84 			cobol_frst = cobol_current;	/* set limit pointers */
       85 			cobol_top = cobol_current;
       86 			token.back_link = null ();	/* set links */
       87 			token.fwd_link = null ();
       88 		     end;
       89 		else if token.fwd_link = null ()
       90 		then do;				/* current is last token in the stack */
       91 			p = cobol_current;
       92 
       93 			call al_token;
       94 
       95 			cobol_top = cobol_current;	/* set limit pointer */
       96 			p -> token.fwd_link = cobol_current;
       97 						/* link new token in */
       98 			token.back_link = p;
       99 			token.fwd_link = null ();
      100 		     end;
      101 		else do;
      102 			p = cobol_current;
      103 
      104 			call al_token;
      105 
      106 			token.back_link = p;	/* link new token in */
      107 			token.fwd_link = p -> token.fwd_link;
      108 			token.fwd_link -> token.back_link = cobol_current;
      109 			p -> token.fwd_link = cobol_current;
      110 		     end;
      111 	     end;
      112 
      113 	else do;
      114 
      115 		call cobol_output_tokens;
      116 
      117 		if cobol_init_ta_sw = "1"b
      118 		then do;
      119 			cobol_init_ta_sw = "0"b;
      120 
      121 			cobol_current = cobol_ta_ptr;
      122 			cobol_frst = cobol_ta_ptr;
      123 			cobol_top = cobol_ta_ptr;
      124 
      125 			call al_tokenf;
      126 
      127 			token.fwd_link = null ();
      128 			token.back_link = null ();
      129 		     end;
      130 		else call al_tokenf;
      131 
      132 	     end;
      133 	return;
      134 
      135 
      136 al_token:
      137      proc;					/*[4.4-1]*/
      138 	call cobol_allo_tm (cobol_current, 76 + tb_len + tv_len);
      139 	call al_tokenf;
      140      end;
      141 
      142 al_tokenf:
      143      proc;
      144 
      145 	token.rep_link = null ();			/* initialize replacement string pointer */
      146 	token.l_info = "0"b;			/* initialize lex info bits */
      147 	token.size = tb_len + tv_len + 16;		/* set the size field */
      148 	token.type = token_type;			/* set the type field */
      149 	zmvr = zeros;				/* initialize other fixed fields */
      150 	return;
      151      end;
      152 
  1     1 
  1     2 /* BEGIN INCLUDE FILE ... cobol_ext_lex.incl.pl1 */
  1     3 /* Last modified on 06/18/76 by ORN */
  1     4 
  1     5 /*   * * *   LEX EXTERNAL DATA   * * *   */
  1     6 
  1     7 /* Pointers */
  1     8 
  1     9 dcl     cobol_ext_lex$cobol_current ptr ext;
  1    10 dcl     cobol_current ptr defined (  cobol_ext_lex$cobol_current);
  1    11 dcl     cobol_ext_lex$cobol_top ptr ext;
  1    12 dcl     cobol_top ptr defined (  cobol_ext_lex$cobol_top);
  1    13 dcl     cobol_ext_lex$cobol_frst ptr ext;
  1    14 dcl     cobol_frst ptr defined (  cobol_ext_lex$cobol_frst);
  1    15 dcl     cobol_ext_lex$cobol_mfp ptr ext;
  1    16 dcl     cobol_mfp ptr defined (  cobol_ext_lex$cobol_mfp);
  1    17 dcl     cobol_ext_lex$cobol_rt_ptr ptr ext;
  1    18 dcl     cobol_rt_ptr ptr defined (  cobol_ext_lex$cobol_rt_ptr);
  1    19 dcl     cobol_ext_lex$cobol_cfp ptr ext;
  1    20 dcl     cobol_cfp ptr defined (  cobol_ext_lex$cobol_cfp);
  1    21 dcl     cobol_ext_lex$cobol_ta_ptr ptr ext;
  1    22 dcl     cobol_ta_ptr ptr defined (  cobol_ext_lex$cobol_ta_ptr);
  1    23 dcl     cobol_ext_lex$cobol_elt_buf_ptr ptr ext;
  1    24 dcl     cobol_elt_buf_ptr ptr defined (  cobol_ext_lex$cobol_elt_buf_ptr);
  1    25 dcl     cobol_ext_lex$cobol_lex_exit /*[*/ label /*]*/ /*[[[ entry static ]]]*/ ext;
  1    26 dcl     cobol_lex_exit /*[*/ label /*]*/ /*[[[ entry static ]]]*/ defined(  cobol_ext_lex$cobol_lex_exit); /* -6- */
  1    27 
  1    28 /* Character */
  1    29 
  1    30 dcl     cobol_ext_lex$cobol_tarea char (300) ext;
  1    31 dcl     cobol_tarea char (300) defined (  cobol_ext_lex$cobol_tarea);    /* -75- */
  1    32 dcl     cobol_ext_lex$cobol_comma_character char (1) ext;
  1    33 dcl     cobol_comma_character char (1) defined (  cobol_ext_lex$cobol_comma_character);
  1    34 dcl     cobol_ext_lex$cobol_decimal_point_character char (1) ext;
  1    35 dcl     cobol_decimal_point_character char (1) defined (  cobol_ext_lex$cobol_decimal_point_character);
  1    36 dcl     cobol_ext_lex$cobol_new_line_character char (1) ext;
  1    37 dcl     cobol_new_line_character char (1) defined (  cobol_ext_lex$cobol_new_line_character);
  1    38 dcl     cobol_ext_lex$cobol_si_key char (5) ext;
  1    39 dcl     cobol_si_key char (5) defined (  cobol_ext_lex$cobol_si_key);     /* -2- */
  1    40 dcl     cobol_ext_lex$cobol_so_key char (5) ext;
  1    41 dcl     cobol_so_key char (5) defined (  cobol_ext_lex$cobol_so_key);     /* -2- */
  1    42 
  1    43 /* Fixed bin */
  1    44 
  1    45 dcl    cobol_ext_lex$ph_num fixed bin ext;
  1    46 dcl     ph_num fixed bin defined(cobol_ext_lex$ph_num );
  1    47 dcl     cobol_ext_lex$cobol_c_l_n fixed bin ext;
  1    48 dcl     cobol_c_l_n fixed bin defined (  cobol_ext_lex$cobol_c_l_n);
  1    49 dcl     cobol_ext_lex$cobol_save_cln fixed bin ext;
  1    50 dcl     cobol_save_cln fixed bin defined (  cobol_ext_lex$cobol_save_cln);
  1    51 dcl     cobol_ext_lex$cobol_save_col fixed bin ext;
  1    52 dcl     cobol_save_col fixed bin defined (  cobol_ext_lex$cobol_save_col);
  1    53 dcl     cobol_ext_lex$cobol_name_number fixed bin ext;
  1    54 dcl     cobol_name_number fixed bin defined (  cobol_ext_lex$cobol_name_number);
  1    55 dcl     cobol_ext_lex$cobol_section_number fixed bin ext;
  1    56 dcl     cobol_section_number fixed bin defined (  cobol_ext_lex$cobol_section_number);
  1    57 dcl     cobol_ext_lex$cobol_sr fixed bin ext;
  1    58 dcl     cobol_sr fixed bin defined (  cobol_ext_lex$cobol_sr);
  1    59 dcl     cobol_ext_lex$cobol_elt_idx fixed bin ext;
  1    60 dcl     cobol_elt_idx fixed bin defined (  cobol_ext_lex$cobol_elt_idx);
  1    61 
  1    62 /* Structures */
  1    63 
  1    64 dcl 1     cobol_ext_lex$cobol_cards ext like   cobol_cards;
  1    65 dcl 1     cobol_cards defined (  cobol_ext_lex$cobol_cards),     /* -67- */
  1    66     2 column fixed bin,
  1    67     2 tblanks fixed bin,
  1    68     2 nr_char fixed bin,
  1    69     2 name char (256);
  1    70 
  1    71 /* Bits */
  1    72 
  1    73 dcl cobol_ext_lex$processing_report bit(1) ext;
  1    74 dcl processing_report bit (1) defined (cobol_ext_lex$processing_report);
  1    75 dcl cobol_ext_lex$real_end_report bit (1) ext;
  1    76 dcl real_end_report bit (1) defined (cobol_ext_lex$real_end_report);
  1    77 dcl     cobol_ext_lex$cobol_continuation bit (1) ext;
  1    78 dcl     cobol_continuation bit (1) defined (  cobol_ext_lex$cobol_continuation);
  1    79 dcl     cobol_ext_lex$cobol_pic_switch bit (1) ext;
  1    80 dcl     cobol_pic_switch bit (1) defined (  cobol_ext_lex$cobol_pic_switch);
  1    81 dcl     cobol_ext_lex$cobol_allo_init_sw bit (1) ext;
  1    82 dcl     cobol_allo_init_sw bit (1) defined (  cobol_ext_lex$cobol_allo_init_sw);
  1    83 dcl     cobol_ext_lex$cobol_lu_sw bit (1) ext;
  1    84 dcl     cobol_lu_sw bit (1) defined (  cobol_ext_lex$cobol_lu_sw);
  1    85 dcl     cobol_ext_lex$cobol_scanoff_sw bit (1) ext;
  1    86 dcl     cobol_scanoff_sw bit (1) defined (  cobol_ext_lex$cobol_scanoff_sw);
  1    87 dcl     cobol_ext_lex$cobol_output_sw bit (1) ext;
  1    88 dcl     cobol_output_sw bit (1) defined (  cobol_ext_lex$cobol_output_sw);
  1    89 dcl     cobol_ext_lex$cobol_stack_sw bit (1) ext;
  1    90 dcl     cobol_stack_sw bit (1) defined (  cobol_ext_lex$cobol_stack_sw);
  1    91 dcl     cobol_ext_lex$cobol_copy_found bit (1) ext;
  1    92 dcl     cobol_copy_found bit (1) defined (  cobol_ext_lex$cobol_copy_found);
  1    93 dcl     cobol_ext_lex$cobol_head_words (5) bit (1) ext;
  1    94 dcl     cobol_head_words (5) bit (1) defined (  cobol_ext_lex$cobol_head_words);
  1    95 dcl     cobol_ext_lex$cobol_elnp_sw bit (1) ext;
  1    96 dcl     cobol_elnp_sw bit (1) defined (  cobol_ext_lex$cobol_elnp_sw);
  1    97 dcl     cobol_ext_lex$cobol_dp_sw bit (1) ext;
  1    98 dcl     cobol_dp_sw bit (1) defined (  cobol_ext_lex$cobol_dp_sw);
  1    99 dcl     cobol_ext_lex$cobol_endprog_sw bit (1) ext;
  1   100 dcl     cobol_endprog_sw bit (1) defined (  cobol_ext_lex$cobol_endprog_sw);
  1   101 dcl     cobol_ext_lex$cobol_debug_mode bit (1) ext;
  1   102 dcl     cobol_debug_mode bit (1) defined (  cobol_ext_lex$cobol_debug_mode);
  1   103 dcl     cobol_ext_lex$cobol_rwt_init_sw bit (1) ext;
  1   104 dcl     cobol_rwt_init_sw bit (1) defined (  cobol_ext_lex$cobol_rwt_init_sw);
  1   105 dcl     cobol_ext_lex$cobol_init_ta_sw bit (1) ext;
  1   106 dcl     cobol_init_ta_sw bit (1) defined (  cobol_ext_lex$cobol_init_ta_sw);
  1   107 dcl     cobol_ext_lex$cobol_rep_sw bit (1) ext;
  1   108 dcl     cobol_rep_sw bit (1) defined (  cobol_ext_lex$cobol_rep_sw);
  1   109 dcl     cobol_ext_lex$cobol_copy_active bit (1) ext;
  1   110 dcl     cobol_copy_active bit (1) defined (  cobol_ext_lex$cobol_copy_active);
  1   111 dcl     cobol_ext_lex$cobol_ln_sw (2) bit (1) ext;
  1   112 dcl     cobol_ln_sw (2) bit (1) defined (  cobol_ext_lex$cobol_ln_sw);
  1   113 dcl     cobol_ext_lex$cobol_prime_sw bit (1) ext;
  1   114 dcl     cobol_prime_sw bit (1) defined (  cobol_ext_lex$cobol_prime_sw);
  1   115 dcl     cobol_ext_lex$cobol_rec1_sw (2) bit (1) ext;
  1   116 dcl     cobol_rec1_sw (2) bit (1) defined (  cobol_ext_lex$cobol_rec1_sw);
  1   117 dcl     cobol_ext_lex$cobol_progid_sw bit(1) ext;
  1   118 dcl     cobol_progid_sw bit(1) defined (  cobol_ext_lex$cobol_progid_sw);
  1   119 
  1   120 
  1   121 /*   * * *   END LEX EXTERNAL DATA   * * *   */
  1   122 /* END INCLUDE FILE ... cobol_ext_lex.incl.pl1 */
  1   123 
      153 
      154 
      155      end cobol_insert_token;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    05/24/89  0835.1  cobol_insert_token.pl1            >spec>install>MR12.3-1048>cobol_insert_token.pl1
153          1    03/27/82  0431.6  cobol_ext_lex.incl.pl1            >ldd>include>cobol_ext_lex.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
addr                                                   builtin function         dcl 64 ref 149 149
back_link                 2            based           pointer                  level 2 dcl 34 set ref 86* 98* 106* 108* 128*
body                     13            based           char(1)                  level 2 packed packed unaligned dcl 34 set ref 149
cobol_allo_tm                   000042 constant        entry                    external dcl 29 ref 138
cobol_cards                            defined         structure                level 1 unaligned dcl 1-65
cobol_current                          defined         pointer                  dcl 1-10 set ref 84 85 86 87 89 91 95 96 98 99 102
                                                                                  106 107 108 108 109 121* 127 128 138* 145 146 147
                                                                                  148 149
cobol_ext_lex$cobol_current     000046 external static pointer                  dcl 1-9 set ref 84 84 85 85 86 86 87 87 89 89 91 91
                                                                                  95 95 96 96 98 98 99 99 102 102 106 106 107 107
                                                                                  108 108 108 108 109 109 121* 121 127 127 128 128
                                                                                  138 138 145 145 146 146 147 147 148 148 149 149
cobol_ext_lex$cobol_frst        000052 external static pointer                  dcl 1-13 set ref 80 80 84* 84 122* 122
cobol_ext_lex$cobol_init_ta_sw  000062 external static bit(1)                   packed unaligned dcl 1-105 set ref 72* 72 117 117
                                                                                  119* 119
cobol_ext_lex$cobol_output_sw   000056 external static bit(1)                   packed unaligned dcl 1-87 set ref 73 73 77* 77
cobol_ext_lex$cobol_stack_sw    000060 external static bit(1)                   packed unaligned dcl 1-89 ref 70 70
cobol_ext_lex$cobol_ta_ptr      000054 external static pointer                  dcl 1-21 ref 121 121 122 122 123 123
cobol_ext_lex$cobol_top         000050 external static pointer                  dcl 1-11 set ref 85* 85 95* 95 123* 123
cobol_frst                             defined         pointer                  dcl 1-14 set ref 80 84* 122*
cobol_init_ta_sw                       defined         bit(1)                   packed unaligned dcl 1-106 set ref 72* 117 119*
cobol_output_sw                        defined         bit(1)                   packed unaligned dcl 1-88 set ref 73 77*
cobol_output_tokens             000044 constant        entry                    external dcl 30 ref 75 115
cobol_stack_sw                         defined         bit(1)                   packed unaligned dcl 1-90 ref 70
cobol_ta_ptr                           defined         pointer                  dcl 1-22 ref 121 122 123
cobol_top                              defined         pointer                  dcl 1-12 set ref 85* 95* 123*
fwd_link                               based           pointer                  level 2 dcl 34 set ref 87* 89 96* 99* 107* 107 108
                                                                                  109* 127*
l_info                    6            based           bit(8)                   level 2 packed packed unaligned dcl 34 set ref 146*
null                                                   builtin function         dcl 65 ref 80 86 87 89 99 127 128 145
p                               000100 automatic       pointer                  dcl 56 set ref 91* 96 98 102* 106 107 109
rep_link                  4            based           pointer                  level 2 dcl 34 set ref 145*
size                      7            based           fixed bin(17,0)          level 2 dcl 34 set ref 147*
tb_len                          000102 automatic       fixed bin(17,0)          dcl 57 set ref 68* 138 147 149
token                                  based           structure                level 1 unaligned dcl 34
token_base_len                  000000 constant        fixed bin(17,0)          initial array dcl 62 ref 68
token_type                             parameter       fixed bin(17,0)          dcl 57 ref 26 68 148
tv_len                                 parameter       fixed bin(17,0)          dcl 57 ref 26 138 147
type                     12            based           fixed bin(17,0)          level 2 dcl 34 set ref 148*
zeros                                  based           char(100)                packed unaligned dcl 46 ref 149
zerosb                          000010 internal static bit(9)                   initial array packed unaligned dcl 45 set ref 149
zmvr                                   based           char                     packed unaligned dcl 47 set ref 149*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
cobol_allo_init_sw                     defined         bit(1)                   packed unaligned dcl 1-82
cobol_c_l_n                            defined         fixed bin(17,0)          dcl 1-48
cobol_cfp                              defined         pointer                  dcl 1-20
cobol_comma_character                  defined         char(1)                  packed unaligned dcl 1-33
cobol_continuation                     defined         bit(1)                   packed unaligned dcl 1-78
cobol_copy_active                      defined         bit(1)                   packed unaligned dcl 1-110
cobol_copy_found                       defined         bit(1)                   packed unaligned dcl 1-92
cobol_debug_mode                       defined         bit(1)                   packed unaligned dcl 1-102
cobol_decimal_point_character          defined         char(1)                  packed unaligned dcl 1-35
cobol_dp_sw                            defined         bit(1)                   packed unaligned dcl 1-98
cobol_elnp_sw                          defined         bit(1)                   packed unaligned dcl 1-96
cobol_elt_buf_ptr                      defined         pointer                  dcl 1-24
cobol_elt_idx                          defined         fixed bin(17,0)          dcl 1-60
cobol_endprog_sw                       defined         bit(1)                   packed unaligned dcl 1-100
cobol_ext_lex$cobol_allo_init_sw       external static bit(1)                   packed unaligned dcl 1-81
cobol_ext_lex$cobol_c_l_n              external static fixed bin(17,0)          dcl 1-47
cobol_ext_lex$cobol_cards              external static structure                level 1 unaligned dcl 1-64
cobol_ext_lex$cobol_cfp                external static pointer                  dcl 1-19
cobol_ext_lex$cobol_comma_character    external static char(1)                  packed unaligned dcl 1-32
cobol_ext_lex$cobol_continuation       external static bit(1)                   packed unaligned dcl 1-77
cobol_ext_lex$cobol_copy_active        external static bit(1)                   packed unaligned dcl 1-109
cobol_ext_lex$cobol_copy_found         external static bit(1)                   packed unaligned dcl 1-91
cobol_ext_lex$cobol_debug_mode         external static bit(1)                   packed unaligned dcl 1-101
cobol_ext_lex$cobol_decimal_point_character
                                       external static char(1)                  packed unaligned dcl 1-34
cobol_ext_lex$cobol_dp_sw              external static bit(1)                   packed unaligned dcl 1-97
cobol_ext_lex$cobol_elnp_sw            external static bit(1)                   packed unaligned dcl 1-95
cobol_ext_lex$cobol_elt_buf_ptr        external static pointer                  dcl 1-23
cobol_ext_lex$cobol_elt_idx            external static fixed bin(17,0)          dcl 1-59
cobol_ext_lex$cobol_endprog_sw         external static bit(1)                   packed unaligned dcl 1-99
cobol_ext_lex$cobol_head_words         external static bit(1)                   array packed unaligned dcl 1-93
cobol_ext_lex$cobol_lex_exit           external static label variable           dcl 1-25
cobol_ext_lex$cobol_ln_sw              external static bit(1)                   array packed unaligned dcl 1-111
cobol_ext_lex$cobol_lu_sw              external static bit(1)                   packed unaligned dcl 1-83
cobol_ext_lex$cobol_mfp                external static pointer                  dcl 1-15
cobol_ext_lex$cobol_name_number        external static fixed bin(17,0)          dcl 1-53
cobol_ext_lex$cobol_new_line_character external static char(1)                  packed unaligned dcl 1-36
cobol_ext_lex$cobol_pic_switch         external static bit(1)                   packed unaligned dcl 1-79
cobol_ext_lex$cobol_prime_sw           external static bit(1)                   packed unaligned dcl 1-113
cobol_ext_lex$cobol_progid_sw          external static bit(1)                   packed unaligned dcl 1-117
cobol_ext_lex$cobol_rec1_sw            external static bit(1)                   array packed unaligned dcl 1-115
cobol_ext_lex$cobol_rep_sw             external static bit(1)                   packed unaligned dcl 1-107
cobol_ext_lex$cobol_rt_ptr             external static pointer                  dcl 1-17
cobol_ext_lex$cobol_rwt_init_sw        external static bit(1)                   packed unaligned dcl 1-103
cobol_ext_lex$cobol_save_cln           external static fixed bin(17,0)          dcl 1-49
cobol_ext_lex$cobol_save_col           external static fixed bin(17,0)          dcl 1-51
cobol_ext_lex$cobol_scanoff_sw         external static bit(1)                   packed unaligned dcl 1-85
cobol_ext_lex$cobol_section_number     external static fixed bin(17,0)          dcl 1-55
cobol_ext_lex$cobol_si_key             external static char(5)                  packed unaligned dcl 1-38
cobol_ext_lex$cobol_so_key             external static char(5)                  packed unaligned dcl 1-40
cobol_ext_lex$cobol_sr                 external static fixed bin(17,0)          dcl 1-57
cobol_ext_lex$cobol_tarea              external static char(300)                packed unaligned dcl 1-30
cobol_ext_lex$ph_num                   external static fixed bin(17,0)          dcl 1-45
cobol_ext_lex$processing_report        external static bit(1)                   packed unaligned dcl 1-73
cobol_ext_lex$real_end_report          external static bit(1)                   packed unaligned dcl 1-75
cobol_head_words                       defined         bit(1)                   array packed unaligned dcl 1-94
cobol_lex_exit                         defined         label variable           dcl 1-26
cobol_ln_sw                            defined         bit(1)                   array packed unaligned dcl 1-112
cobol_lu_sw                            defined         bit(1)                   packed unaligned dcl 1-84
cobol_mfp                              defined         pointer                  dcl 1-16
cobol_name_number                      defined         fixed bin(17,0)          dcl 1-54
cobol_new_line_character               defined         char(1)                  packed unaligned dcl 1-37
cobol_pic_switch                       defined         bit(1)                   packed unaligned dcl 1-80
cobol_prime_sw                         defined         bit(1)                   packed unaligned dcl 1-114
cobol_progid_sw                        defined         bit(1)                   packed unaligned dcl 1-118
cobol_rec1_sw                          defined         bit(1)                   array packed unaligned dcl 1-116
cobol_rep_sw                           defined         bit(1)                   packed unaligned dcl 1-108
cobol_rt_ptr                           defined         pointer                  dcl 1-18
cobol_rwt_init_sw                      defined         bit(1)                   packed unaligned dcl 1-104
cobol_save_cln                         defined         fixed bin(17,0)          dcl 1-50
cobol_save_col                         defined         fixed bin(17,0)          dcl 1-52
cobol_scanoff_sw                       defined         bit(1)                   packed unaligned dcl 1-86
cobol_section_number                   defined         fixed bin(17,0)          dcl 1-56
cobol_si_key                           defined         char(5)                  packed unaligned dcl 1-39
cobol_so_key                           defined         char(5)                  packed unaligned dcl 1-41
cobol_sr                               defined         fixed bin(17,0)          dcl 1-58
cobol_tarea                            defined         char(300)                packed unaligned dcl 1-31
ph_num                                 defined         fixed bin(17,0)          dcl 1-46
processing_report                      defined         bit(1)                   packed unaligned dcl 1-74
real_end_report                        defined         bit(1)                   packed unaligned dcl 1-76

NAMES DECLARED BY EXPLICIT CONTEXT.
al_token                        000226 constant        entry                    internal dcl 136 ref 82 93 104
al_tokenf                       000247 constant        entry                    internal dcl 142 ref 125 130 139
cobol_insert_token              000040 constant        entry                    external dcl 26

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       426         512     275         436
Length       722     275        64         173     131          32

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
cobol_insert_token                   88 external procedure  is an external procedure.  
al_token                                internal procedure  shares stack frame of external procedure cobol_insert_token.  
al_tokenf                               internal procedure  shares stack frame of external procedure cobol_insert_token.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 zerosb                      cobol_insert_token

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
cobol_insert_token       000100 p                           cobol_insert_token
                         000102 tb_len                      cobol_insert_token

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
cobol_allo_tm                 cobol_output_tokens

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
cobol_ext_lex$cobol_current   cobol_ext_lex$cobol_frst      cobol_ext_lex$cobol_init_ta_sw
cobol_ext_lex$cobol_output_sw cobol_ext_lex$cobol_stack_sw  cobol_ext_lex$cobol_ta_ptr    cobol_ext_lex$cobol_top




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     26 000034        68 000045        70 000051        72 000055        73 000057        75 000063        77 000067
     80 000072        82 000076        84 000077        85 000103        86 000106        87 000112        88 000114
     89 000115        91 000122        93 000124        95 000125        96 000131        98 000134        99 000140
    100 000143       102 000144       104 000146       106 000147       107 000154       108 000157       109 000163
    111 000166       115 000167       117 000173       119 000200       121 000202       122 000205       123 000210
    125 000213       127 000214       128 000220       129 000223       130 000224       133 000225       136 000226
    138 000227       139 000245       140 000246       142 000247       145 000250       146 000255       147 000260
    148 000265       149 000267       150 000273


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
