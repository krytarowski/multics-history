	COMPILATION LISTING OF SEGMENT cobol_multiply_bin_gen
	Compiled by: Multics PL/I Compiler, Release 31b, of April 24, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 05/24/89  1030.1 mst Wed
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        6*        *                                                         *
        7*        * Copyright (c) 1972 by Massachusetts Institute of        *
        8*        * Technology and Honeywell Information Systems, Inc.      *
        9*        *                                                         *
       10*        *********************************************************** */
       11 
       12 
       13 
       14 
       15 /****^  HISTORY COMMENTS:
       16*  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
       17*     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
       18*     MCR8060 cobol_multiply_bin_gen.pl1 Added Trace statements.
       19*                                                   END HISTORY COMMENTS */
       20 
       21 
       22 /* Modified on 11/22/84 by FCH, [5.3...], trace added */
       23 /* Modified on 10/19/84 by FCH, [4.3-1],  BUG563(phx18381), new cobol_addr_tokens.incl.pl1 */
       24 /* Modified on 06/29/79 by FCH, [4.0-1], not option added for debug */
       25 /* Modified since Version 4.0 */
       26 
       27 /*{*/
       28 /* format: style3 */
       29 cobol_multiply_bin_gen:
       30      proc (in_token_ptr, next_stmt_tag);
       31 
       32 /*
       33*This procedure generates code for the multiply statement
       34*which uses the hardware registers ( A and Q ) instead
       35*of using EIS instructions.  */
       36 
       37 /*  DECLARATION OF THE PARAMETERS  */
       38 
       39 /* dcl in_token_ptr ptr;  */
       40 /*  Declared below in an include file.  */
       41 dcl	next_stmt_tag	fixed bin;
       42 
       43 /*  DESCRIPTION OF THE PARAMETERS  */
       44 
       45 /*
       46*PARAMETER		DESCRIPTION
       47*
       48*in_token_ptr	Pointer to a structurre that contains data
       49*		and pointers that describes the multiply
       50*		statement for which code is to be
       51*		implemented.  (input)  See description
       52*		below for more details.
       53*next_stmt_tag	A tag that is to be defined at the next
       54*		cobol statement by cobol_gen_driver_.
       55*		(output)  See below for details.
       56**/
       57 
       58 
       59 /*  DECLARATION OF EXTERNAL ENTRIES  */
       60 
       61 dcl	cobol_short_to_longbin$temp
       62 			ext entry (ptr, ptr);
       63 dcl	cobol_alloc$stack	ext entry (fixed bin, fixed bin, fixed bin (24));
       64 dcl	cobol_make_type9$long_bin
       65 			ext entry (ptr, fixed bin, fixed bin (24));
       66 dcl	cobol_store_binary	ext entry (ptr, ptr, bit (1));
       67 dcl	cobol_register$release
       68 			ext entry (ptr);
       69 dcl	cobol_addr	ext entry (ptr, ptr, ptr);
       70 dcl	cobol_emit	ext entry (ptr, ptr, fixed bin);
       71 dcl	cobol_fofl_mask$on	ext entry;
       72 dcl	cobol_fofl_mask$off ext entry;
       73 dcl	cobol_multiply2_binary
       74 			ext entry (ptr, ptr, ptr, fixed bin);
       75 dcl	cobol_make_tagref	ext entry (fixed bin, fixed bin, ptr);
       76 dcl	cobol_define_tag	ext entry (fixed bin);
       77 dcl	cobol_register$load ext entry (ptr);
       78 
       79 /*  DECLARATION OF INTERNAL STATIC DATA  */
       80 
       81 dcl	STZ		bit (10) int static init ("1001010000"b);
       82 						/*  450(0)  */
       83 dcl	AOS		bit (10) int static init ("0001011000"b);
       84 						/*  054(0)  */
       85 dcl	LDA		bit (10) int static init ("0100111010"b);
       86 						/*  235(0)  */
       87 dcl	LDQ		bit (10) int static init ("0100111100"b);
       88 						/*  236	(0)  */
       89 
       90 dcl	tov_inst		bit (36) int static init ("000000000000000000110001111000000000"b);
       91 	;					/*  tov 0  */
       92 
       93 dcl	tra_inst		bit (36) int static init ("000000000000000000111001000000000000"b);
       94 						/*  tra 0  */
       95 
       96 dcl	tnz_inst		bit (36) int static init ("000000000000000000110000001000000000"b);
       97 						/*  tnz 0  */
       98 
       99 
      100 dcl	1 dec_zero_token	int static,
      101 	  2 size		fixed bin (15),
      102 	  2 line		fixed bin (15),
      103 	  2 column	fixed bin (15),
      104 	  2 type		fixed bin (15) init (2),
      105 	  2 integral	bit (1) init ("1"b),
      106 	  2 floating	bit (1) bit (1) init ("0"b),
      107 	  2 filler1	bit (5),
      108 	  2 subscript	bit (1) init ("0"b),
      109 	  2 sign		char (1) init (" "),
      110 	  2 exp_sign	char (1) init (" "),
      111 	  2 exp_places	fixed bin (15),
      112 	  2 places_left	fixed bin (15) init (1),
      113 	  2 places_right	fixed bin (15) init (0),
      114 	  2 places	fixed bin (15) init (1),
      115 	  2 literal	char (1) init ("0");
      116 
      117 /*  DECLARATION OF INTERNAL VARIABLES  */
      118 
      119 dcl	1 input_buff,
      120 	  2 buff		(1:10) fixed bin;
      121 
      122 dcl	1 reloc_buff,
      123 	  2 buff		(1:10) bit (5) aligned;
      124 
      125 
      126 
      127 dcl	1 register_struc,
      128 	  2 what_reg	fixed bin,
      129 	  2 reg_no	bit (4),
      130 	  2 lock		fixed bin,
      131 	  2 already_there	fixed bin,
      132 	  2 contains	fixed bin,
      133 	  2 tok_ptr	ptr,
      134 	  2 literal	bit (36);
      135 dcl	result_token_ptr	ptr;
      136 dcl	work_token_ptr	ptr;
      137 dcl	addend_token_ptr	ptr;
      138 dcl	receive_count	fixed bin;
      139 dcl	ret_offset	fixed bin (24);
      140 dcl	ovflo_flag_inst	bit (36);
      141 dcl	ovflo_tag		fixed bin;
      142 dcl	no_ovflo_tag	fixed bin;
      143 dcl	imperative_stmt_tag fixed bin;
      144 dcl	ix		fixed bin;
      145 dcl	temp_target_code	fixed bin;
      146 dcl	multiplier_token_ptr
      147 			ptr;
      148 dcl	multiplicand_token_ptr
      149 			ptr;
      150 dcl	remainder_token_ptr ptr;
      151 dcl	ose_flag		bit (1);
      152 dcl	tlength		fixed bin;
      153 dcl	temp_ptr		ptr;
      154 dcl	skipped_some	bit (1);
      155 dcl	temp_lop_token_ptr	ptr;
      156 dcl	temp_rop_token_ptr	ptr;
      157 
      158 
      159 dcl	call_again	bit (1);
      160 
      161 
      162 dcl	dn_ptr		ptr;
      163 
      164 
      165 /*************************************/
      166 start:	/***.....	if Trace_Bit then call cobol_gen_driver_$Tr_Beg(cmbg);/**/
      167 						/*  Extract useful information from the EOS token.  */
      168 	eos_ptr = in_token.token_ptr (in_token.n);
      169 	ose_flag = end_stmt.b;
      170 
      171 	if ose_flag
      172 	then do;					/*  Reserve two tags for on size error processing.  */
      173 		imperative_stmt_tag = cobol_$next_tag;
      174 		next_stmt_tag = imperative_stmt_tag + 1;
      175 		cobol_$next_tag = cobol_$next_tag + 2;
      176 	     end;					/*  Reserve two tags for on size error processing.  */
      177 	result_token_ptr = null ();
      178 
      179 	if end_stmt.a = "000"b
      180 	then call format1_multiply;
      181 	else call format2_multiply;
      182 
      183 	/***.....	if Trace_Bit then call cobol_gen_driver_$Tr_End(cmbg);/**/
      184 
      185 	return;
      186 
      187 
      188 /*************************************/
      189 format1_multiply:
      190      proc;
      191 
      192 	/***.....	if Trace_Bit then call ioa_("^a^a",substr(Trace_Line,Trace_Lev+1,1),"FORMAT1_MULTIPLY");/**/
      193 
      194 /*
      195*This internal procedure generates code using the hardware
      196*registers ( A and Q ) for format 1 multiply statements.  */
      197 
      198 	receive_count = end_stmt.e;
      199 	multiplier_token_ptr = in_token.token_ptr (2);
      200 
      201 
      202 	if (multiplier_token_ptr -> data_name.type = rtc_dataname & receive_count > 1)
      203 	then do;					/*  Divisor is long binary, and more than one multiplynd/receiving field.  */
      204 						/*  Generate code to store the multiplier into a temp, because if one of
      205*		the multiplynds is the multiplier (i.e. MULTIPLY A BY A B C) then the original
      206*		multiplier value will be destroyed.  */
      207 
      208 /*  Allocate space for the temporary in the stack.  */
      209 		call cobol_alloc$stack (4, 0, ret_offset);
      210 		temp_ptr = null ();			/*  Make a data name token for the temp.  */
      211 		call cobol_make_type9$long_bin (temp_ptr, 1000, ret_offset);
      212 						/*  Store the multiplier into the temporary.  */
      213 		call cobol_store_binary (multiplier_token_ptr, temp_ptr, call_again);
      214 						/*  Release the register that was used in storing the multiplier.  */
      215 		register_struc.reg_no = multiplier_token_ptr -> cobol_type100.register;
      216 		call cobol_register$release (addr (register_struc));
      217 		multiplier_token_ptr = temp_ptr;
      218 	     end;					/*  Divisor is long binary, and move than one multiplynd/receiving field.  */
      219 
      220 	if ose_flag
      221 	then do;					/*  On size error clause was present.  */
      222 		if receive_count > 1
      223 		then do;				/*  Multiple multiplynd/receiving fields.  */
      224 						/*  Allocate space on the stack for an overflow flag,
      225*			and emit code to initialize it to zero.  */
      226 			call cobol_alloc$stack (4, 0, ret_offset);
      227 
      228 			input_ptr = addr (input_buff);
      229 			reloc_ptr = addr (reloc_buff);
      230 			inst_ptr = addr (ovflo_flag_inst);
      231 
      232 			input_struc_basic.type = 1;
      233 			input_struc_basic.operand_no = 0;
      234 			input_struc_basic.lock = 0;
      235 			input_struc_basic.segno = 1000;
      236 						/*  stack  */
      237 			input_struc_basic.char_offset = ret_offset;
      238 
      239 			call cobol_addr (input_ptr, inst_ptr, reloc_ptr);
      240 			inst_struc_basic.fill1_op = STZ;
      241 			call cobol_emit (inst_ptr, reloc_ptr, 1);
      242 
      243 /*  Define some tags to be used in the overflow testing  */
      244 			ovflo_tag = cobol_$next_tag;
      245 			no_ovflo_tag = ovflo_tag + 1;
      246 			cobol_$next_tag = cobol_$next_tag + 2;
      247 
      248 		     end;				/*  Multiple multiplynd/receiving fields.  */
      249 
      250 		else ovflo_tag = imperative_stmt_tag;
      251 
      252 
      253 /*  Generate code to turn on the fixed overflow mask in the indicator register.  */
      254 		call cobol_fofl_mask$on;
      255 	     end;					/*  On size error clause was present.  */
      256 
      257 
      258 /*  Generate code to multiply the multiplier into each multiplynd/receiving field.  */
      259 	do ix = 3 to in_token.n - 1;			/*  Do all the multiplys.  */
      260 
      261 	     call cobol_multiply2_binary (in_token.token_ptr (ix), multiplier_token_ptr, result_token_ptr, 1);
      262 
      263 
      264 	     call cobol_store_binary (result_token_ptr, in_token.token_ptr (ix), call_again);
      265 	     if call_again
      266 	     then do;				/*  Must call the store procedure again to get the results stored.  */
      267 		     if ose_flag
      268 		     then do;			/*  Must test for overflow again.  */
      269 			     call cobol_emit (addr (tov_inst), null (), 1);
      270 			     call cobol_make_tagref (ovflo_tag, cobol_$text_wd_off - 1, null ());
      271 			end;			/*  Must test for overflow again.  */
      272 
      273 
      274 		     call cobol_store_binary (result_token_ptr, in_token.token_ptr (ix), call_again);
      275 		end;				/*  Must call the store procedure again to get the results stored.  */
      276 	     if result_token_ptr -> data_name.type = rtc_register
      277 	     then do;				/*  Release the register containing the result just stored.  */
      278 		     register_struc.reg_no = result_token_ptr -> cobol_type100.register;
      279 		     call cobol_register$release (addr (register_struc));
      280 		end;				/*  Release the register containing the result just stored.  */
      281 
      282 	     if ose_flag & receive_count ^= 1
      283 	     then do;				/*  On size error and multiple multiplynds.  */
      284 						/*  Emit code to transfer to the next multiply sequence.  */
      285 		     call cobol_emit (addr (tra_inst), null (), 1);
      286 		     call cobol_make_tagref (no_ovflo_tag, cobol_$text_wd_off - 1, null ());
      287 
      288 /*  Define the ovflo_tag at the next instructiin location.  */
      289 		     call cobol_define_tag (ovflo_tag); /*  Emit code to increment the overflow flag.  */
      290 		     inst_struc_basic.fill1_op = AOS;
      291 		     call cobol_emit (inst_ptr, reloc_ptr, 1);
      292 
      293 /*  Define the no_ovflo_tag at the next instruction location.  */
      294 		     call cobol_define_tag (no_ovflo_tag);
      295 
      296 
      297 		     if ix ^= in_token.n - 1
      298 		     then do;			/*  Not the last multiply, define new ovflo and no_ovflo tags.  */
      299 			     ovflo_tag = cobol_$next_tag;
      300 			     no_ovflo_tag = ovflo_tag + 1;
      301 			     cobol_$next_tag = cobol_$next_tag + 2;
      302 			end;			/*  Not the last multiply, define new ovflo, no_ovflo tags  */
      303 
      304 		end;				/*  On size error and multiple multiplynds.  */
      305 
      306 	end;					/*  Do all the multiplys.  */
      307 
      308 	if ose_flag
      309 	then do;					/*  On size error clause was present.  */
      310 
      311 /*  Generate code to turn off the fixed overflow mask in the indicator registers.  */
      312 		call cobol_fofl_mask$off;
      313 		if receive_count > 1
      314 		then do;				/*  More that one multiplynd/receiving field.  */
      315 						/*  Generate code to load the overflow flag, and test it for zero.  */
      316 			register_struc.what_reg = 4;	/*  A or Q  */
      317 			register_struc.lock = 0;
      318 			register_struc.contains = 0;
      319 			call cobol_register$load (addr (register_struc));
      320 
      321 			if register_struc.reg_no = "0001"b
      322 			then inst_struc_basic.fill1_op = LDA;
      323 			else inst_struc_basic.fill1_op = LDQ;
      324 			call cobol_emit (inst_ptr, reloc_ptr, 1);
      325 
      326 /*  Generate code to test for non-zero, and transfer to the imperative statement tag
      327*				if not zero.  */
      328 			call cobol_emit (addr (tnz_inst), null (), 1);
      329 			call cobol_make_tagref (imperative_stmt_tag, cobol_$text_wd_off - 1, null ());
      330 
      331 		     end;				/*  More than one multiplynd/receiving field.  */
      332 
      333 /*[4.0-1*/
      334 		if end_stmt.f = "01"b		/*[4.0-1*/
      335 		then next_stmt_tag = imperative_stmt_tag;
      336 						/*[4.0-1*/
      337 		else do;
      338 
      339 /*  Generate code to transfer to the next cobol statement ( the one
      340*			following the imperative statement. )  */
      341 			call cobol_emit (addr (tra_inst), null (), 1);
      342 			call cobol_make_tagref (next_stmt_tag, cobol_$text_wd_off - 1, null ());
      343 
      344 /*  Define the imperative statement tag at the next instruction location.  */
      345 			call cobol_define_tag (imperative_stmt_tag);
      346 
      347 /*[4.0-1*/
      348 		     end;
      349 
      350 	     end;					/*  On size error clause was present.  */
      351 
      352      end format1_multiply;
      353 
      354 
      355 /*************************************/
      356 format2_multiply:
      357      proc;
      358 
      359 	/***.....	if Trace_Bit then call ioa_("^a^a",substr(Trace_Line,Trace_Lev+1,1),"FORMAT2_MULTIPLY");/**/
      360 
      361 /*
      362*This internal procedure generates code using the hardware
      363*registers (A and Q) for format 2,3,4, and 5 multiply statements.  */
      364 	multiplicand_token_ptr = in_token.token_ptr (2);
      365 	multiplier_token_ptr = in_token.token_ptr (3);
      366 
      367 
      368 /*  Generate code to do the division.  */
      369 	call cobol_multiply2_binary (multiplicand_token_ptr, multiplier_token_ptr, result_token_ptr, 1 /*multiply */);
      370 
      371 
      372 /*  Generate code to store the product into all long binary receiving fields.  */
      373 /*  Note that there is no possibliity of overflow, since result is long binary, and so are targets.  */
      374 	skipped_some = "0"b;
      375 	if ose_flag
      376 	then call cobol_fofl_mask$on;			/*  Generate code to turn on the fixed overflow
      377*		mask bit in the indicator register.  */
      378 
      379 	do ix = 4 to in_token.n - 1;			/*  Store product into all long binary targets.  */
      380 
      381 	     if in_token.token_ptr (ix) -> data_name.bin_18
      382 	     then skipped_some = "1"b;
      383 	     else do;				/*  Long binary target.  */
      384 		     call cobol_store_binary (result_token_ptr, in_token.token_ptr (ix), call_again);
      385 		     if call_again
      386 		     then do;			/*  REsult has been moved to a temp in an attempt to force
      387*			overflow.  */
      388 
      389 			     if ose_flag
      390 			     then do;		/*  On size error clause present.  */
      391 						/*  Must test for overflow.  */
      392 				     call cobol_emit (addr (tov_inst), null (), 1);
      393 				     call cobol_make_tagref (imperative_stmt_tag, cobol_$text_wd_off - 1, null ())
      394 					;
      395 				end;		/*  On size error clause present.  */
      396 
      397 /*  Generate code to store the temp into the target.  */
      398 			     call cobol_store_binary (result_token_ptr, in_token.token_ptr (ix), call_again);
      399 			end;			/*  Result has been moved to a temp in an attempt to force
      400*				overflow.  */
      401 		end;				/*  Long binary target.  */
      402 	end;					/*  Store product into all long binary targets.  */
      403 
      404 
      405 
      406 	if skipped_some
      407 	then do;					/*  Store the product into all short binary receiving fields.  */
      408 
      409 		do ix = 4 to in_token.n - 1;		/*  Scan the targets.  */
      410 
      411 		     if in_token.token_ptr (ix) -> data_name.bin_18
      412 		     then do;			/*  Short binary target.  */
      413 			     call cobol_store_binary (result_token_ptr, in_token.token_ptr (ix), call_again);
      414 			     if call_again
      415 			     then do;		/*  REsult has been moved to a temp in an attempt to force
      416*				overflow.  */
      417 
      418 				     if ose_flag
      419 				     then do;	/*  On size error clause present.  */
      420 						/*  Must test for overflow.  */
      421 					     call cobol_emit (addr (tov_inst), null (), 1);
      422 					     call cobol_make_tagref (imperative_stmt_tag,
      423 						cobol_$text_wd_off - 1, null ());
      424 					end;	/*  On size error clause present.  */
      425 
      426 /*  Generate code to store the temp into the target.  */
      427 				     call cobol_store_binary (result_token_ptr, in_token.token_ptr (ix),
      428 					call_again);
      429 				end;		/*  Result has been moved to a temp in an attempt to force
      430*					overflow.  */
      431 
      432 			end;			/*  Short binary target.  */
      433 		end;				/*  Scan the targets.  */
      434 
      435 	     end;					/*  Store the product into all short binary receiving fields.  */
      436 
      437 
      438 	if ose_flag
      439 	then do;					/*  On size error clause was present.  */
      440 						/*  Generate code to turn off the fixed overflow mask bit.  */
      441 		call cobol_fofl_mask$off;
      442 
      443 /*[4.0-1*/
      444 		if end_stmt.f = "01"b		/*[4.0-1*/
      445 		then next_stmt_tag = imperative_stmt_tag;
      446 						/*[4.0-1*/
      447 		else do;
      448 
      449 /*  Emit code to transfer to the next cobol statement.  (The statement
      450*		following the imperative statement.)  */
      451 			call cobol_emit (addr (tra_inst), null (), 1);
      452 			call cobol_make_tagref (next_stmt_tag, cobol_$text_wd_off - 1, null ());
      453 						/*  Define the imperative statement tag at the next instruction location.  */
      454 			call cobol_define_tag (imperative_stmt_tag);
      455 
      456 /*[4.0-1*/
      457 		     end;
      458 
      459 /*  Generate code to turn off the fixed overflow mask bit  */
      460 		call cobol_fofl_mask$off;
      461 	     end;					/*  On size error clause was present.  */
      462 
      463 	if result_token_ptr -> data_name.type = rtc_register
      464 	then do;					/*  Result token describes a register.  */
      465 						/*  Release the register, since the value there has been stored into all receiving fields. */
      466 		register_struc.reg_no = result_token_ptr -> cobol_type100.register;
      467 		call cobol_register$release (addr (register_struc));
      468 	     end;					/*  Result token describes a register.  */
      469 
      470      end format2_multiply;
      471 
      472 	/***.....	dcl cmbg char(22) init("COBOL_MULTIPLY_BIN_GEN");/**/
      473 
      474 	/***.....	dcl cobol_gen_driver_$Tr_Beg entry(char(*));/**/
      475 	/***.....	dcl cobol_gen_driver_$Tr_End entry(char(*));/**/
      476 
      477 	/***.....	dcl Trace_Bit bit(1) static external;/**/
      478 	/***.....	dcl Trace_Lev fixed bin static external;/**/
      479 	/***.....	dcl Trace_Line char(36) static external;/**/
      480 	/***.....	dcl ioa_ entry options(variable); /**/
      481 
      482 
      483 /*  INCLUDE FILES USED IN THIS PROCEDURE  */
      484 
      485 
      486 /*****	Declaration for builtin function	*****/
      487 
      488 dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
      489 			builtin;
      490 
      491 /*****	End of declaration for builtin function	*****/
      492 
  1     1 
  1     2 /* BEGIN INCLUDE FILE ... cobol_type9.incl.pl1 */
  1     3 /* Last modified on 11/19/76 by ORN */
  1     4 
  1     5 /*
  1     6*A type 9 data name token is entered into the name table by the data
  1     7*division syntax phase for each data name described in the data division.
  1     8*The replacement phase subsequently replaces type 8 user word references
  1     9*to data names in the procedure division minpral file with the corresponding
  1    10*type 9 tokens from the name table.
  1    11**/
  1    12 
  1    13 /* dcl dn_ptr ptr; */
  1    14 
  1    15 /* BEGIN DECLARATION OF TYPE9 (DATA NAME) TOKEN */
  1    16 dcl 1 data_name based (dn_ptr),
  2     1 
  2     2 /* begin include file ... cobol_TYPE9.incl.pl1 */
  2     3 /* Last modified on 06/19/77 by ORN */
  2     4 /* Last modified on 12/28/76 by FCH */
  2     5 
  2     6 		/* header */
  2     7 		2 size fixed bin,
  2     8 		2 line fixed bin,
  2     9 		2 column fixed bin,
  2    10 		2 type fixed bin,
  2    11 		/* body */
  2    12 		2 string_ptr ptr,
  2    13 		2 prev_rec ptr,
  2    14 		2 searched bit (1),
  2    15 		2 duplicate bit (1),
  2    16 		2 saved bit (1),
  2    17 		2 debug_ind bit (1),
  2    18 		2 filler2 bit (3),
  2    19 		2 used_as_sub bit (1),
  2    20 		2 def_line fixed bin,
  2    21 		2 level fixed bin,
  2    22 		2 linkage fixed bin,
  2    23 		2 file_num fixed bin,
  2    24 		2 size_rtn fixed bin,
  2    25 		2 item_length fixed bin(24),
  2    26 		2 places_left fixed bin,
  2    27 		2 places_right fixed bin,
  2    28 		/* description */
  2    29 		2 file_section bit (1),
  2    30 		2 working_storage bit (1),
  2    31 		2 constant_section bit (1),
  2    32 		2 linkage_section bit (1),
  2    33 		2 communication_section bit (1),
  2    34 		2 report_section bit (1),
  2    35 		2 level_77 bit (1),
  2    36 		2 level_01 bit (1),
  2    37 		2 non_elementary bit (1),
  2    38 		2 elementary bit (1),
  2    39 		2 filler_item bit (1),
  2    40 		2 s_of_rdf bit (1),
  2    41 		2 o_of_rdf bit (1),
  2    42 		2 bin_18 bit (1),
  2    43 		2 bin_36 bit (1),
  2    44 		2 pic_has_l bit (1),
  2    45 		2 pic_is_do bit (1),
  2    46 		2 numeric bit (1),
  2    47 		2 numeric_edited bit (1),
  2    48 		2 alphanum bit (1),
  2    49 		2 alphanum_edited bit (1),
  2    50 		2 alphabetic bit (1),
  2    51 		2 alphabetic_edited bit (1),
  2    52 		2 pic_has_p bit (1),
  2    53 		2 pic_has_ast bit (1),
  2    54 		2 item_signed bit(1),
  2    55 		2 sign_separate bit (1),
  2    56 		2 display bit (1),
  2    57 		2 comp bit (1),
  2    58 		2 ascii_packed_dec_h bit (1),	/* as of 8/16/76  this field used for comp8. */
  2    59 		2 ascii_packed_dec bit (1),
  2    60 		2 ebcdic_packed_dec bit (1),
  2    61 		2 bin_16 bit (1),
  2    62 		2 bin_32 bit (1),
  2    63 		2 usage_index bit (1),
  2    64 		2 just_right bit (1),
  2    65 		2 compare_argument bit (1),
  2    66 		2 sync bit (1),
  2    67 		2 temporary bit (1),
  2    68 		2 bwz bit (1),
  2    69 		2 variable_length bit (1),
  2    70 		2 subscripted bit (1),
  2    71 		2 occurs_do bit (1),
  2    72 		2 key_a bit (1),
  2    73 		2 key_d bit (1),
  2    74 		2 indexed_by bit (1),
  2    75 		2 value_numeric bit (1),
  2    76 		2 value_non_numeric bit (1),
  2    77 		2 value_signed bit (1),
  2    78 		2 sign_type bit (3),
  2    79 		2 pic_integer bit (1),
  2    80 		2 ast_when_zero bit (1),
  2    81 		2 label_record bit (1),
  2    82 		2 sign_clause_occurred bit (1),
  2    83 		2 okey_dn bit (1),
  2    84 		2 subject_of_keyis bit (1),
  2    85 		2 exp_redefining bit (1),
  2    86 		2 sync_in_rec bit (1),
  2    87 		2 rounded bit (1),
  2    88 		2 ad_bit bit (1),
  2    89 		2 debug_all bit (1),
  2    90 		2 overlap bit (1),
  2    91 		2 sum_counter bit (1),
  2    92 		2 exp_occurs bit (1),
  2    93 		2 linage_counter bit (1),
  2    94 		2 rnm_01 bit (1),
  2    95 		2 aligned bit (1),
  2    96 		2 not_user_writable bit (1),
  2    97 		2 database_key bit (1),
  2    98 		2 database_data_item bit (1),
  2    99 		2 seg_num fixed bin,
  2   100 		2 offset fixed bin(24),
  2   101 		2 initial_ptr fixed bin,
  2   102 		2 edit_ptr fixed bin,
  2   103 		2 occurs_ptr fixed bin,
  2   104 		2 do_rec char(5),
  2   105 		2 bitt bit (1),
  2   106 		2 byte bit (1),
  2   107 		2 half_word bit (1),
  2   108 		2 word bit (1),
  2   109 		2 double_word bit (1),
  2   110 		2 half_byte bit (1),
  2   111 		2 filler5 bit (1),
  2   112 		2 bit_offset bit (4),
  2   113 		2 son_cnt bit (16),
  2   114 		2 max_red_size fixed bin(24),
  2   115 		2 name_size fixed bin,
  2   116 		2 name char(0 refer(data_name.name_size));	
  2   117 
  2   118 
  2   119 
  2   120 /* end include file ... cobol_TYPE9.incl.pl1 */
  2   121 
  1    17 
  1    18 /* END DECLARATION OF TYPE9 (DATA NAME) TOKEN */
  1    19 
  1    20 /* END INCLUDE FILE ... cobol_type9.incl.pl1 */
  1    21 
      493 
  3     1 
  3     2 /* BEGIN INCLUDE FILE ...   cobol_addr_tokens.incl.pl1 */
  3     3 
  3     4 
  3     5 /****^  HISTORY COMMENTS:
  3     6*  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8058),
  3     7*     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
  3     8*     MCR8058 cobol_addr_tokens.incl.pl1 Change array extents to refer to
  3     9*     constants rather than variables.
  3    10*                                                   END HISTORY COMMENTS */
  3    11 
  3    12 
  3    13 /* Last modified on 10/1/74 by tg */
  3    14 
  3    15 
  3    16 /* parameter list */
  3    17 
  3    18      dcl	   (input_ptr, inst_ptr, reloc_ptr) ptr;
  3    19 
  3    20 
  3    21 /* input_struc_basic is used for type 1 addressing */
  3    22 
  3    23      dcl	   1 input_struc_basic    based (input_ptr),
  3    24 	     2 type	      fixed bin,
  3    25 	     2 operand_no	      fixed bin,
  3    26 	     2 lock	      fixed bin,
  3    27 	     2 segno	      fixed bin,
  3    28 	     2 char_offset	      fixed bin (24),
  3    29 	     2 send_receive	      fixed bin;
  3    30 
  3    31 
  3    32      dcl	   1 input_struc	      based (input_ptr),
  3    33 	     2 type	      fixed bin,
  3    34 	     2 operand_no	      fixed bin,
  3    35 	     2 lock	      fixed bin,
  3    36 	     2 operand	      (0 refer (input_struc.operand_no)),
  3    37 	       3 token_ptr	      ptr,
  3    38 	       3 send_receive     fixed bin,
  3    39 	       3 ic_mod	      fixed bin,
  3    40 	       3 size_sw	      fixed bin;
  3    41 
  3    42 /* reloc_struc is used for all types of addressing * all types */
  3    43 
  3    44      dcl	   1 reloc_struc	      (input_struc.operand_no + 1) based (reloc_ptr),
  3    45 	     2 left_wd	      bit (5) aligned,
  3    46 	     2 right_wd	      bit (5) aligned;
  3    47 
  3    48 /* Instruction format for 1 word instruction */
  3    49 
  3    50 
  3    51      dcl	   1 inst_struc_basic     based (inst_ptr) aligned,
  3    52 	     2 y		      unaligned,
  3    53 	       3 pr	      bit (3) unaligned,
  3    54 	       3 wd_offset	      bit (15) unaligned,
  3    55 	     2 fill1_op	      bit (10) unaligned,
  3    56 	     2 zero1	      bit (1) unaligned,
  3    57 	     2 pr_spec	      bit (1) unaligned,
  3    58 	     2 tm		      bit (2) unaligned,
  3    59 	     2 td		      bit (4) unaligned;
  3    60 
  3    61 
  3    62 /* The detailed definitions of the fields in this structure
  3    63*   can be found in the GMAP manual section 8 */
  3    64 /* EIS instruction format for 2_4 word instructions */
  3    65 
  3    66      dcl	   1 inst_struc	      based (inst_ptr) aligned,
  3    67 	     2 inst	      unaligned,
  3    68 	       3 zero1	      bit (2) unaligned,
  3    69 	       3 mf3	      unaligned,
  3    70 	         4 pr_spec	      bit (1) unaligned,
  3    71 	         4 reg_or_length  bit (1) unaligned,
  3    72 	         4 zero2	      bit (1) unaligned,
  3    73 	         4 reg_mod	      bit (4) unaligned,
  3    74 	       3 zero3	      bit (2) unaligned,
  3    75 	       3 mf2	      unaligned,
  3    76 	         4 pr_spec	      bit (1) unaligned,
  3    77 	         4 reg_or_length  bit (1) unaligned,
  3    78 	         4 zero4	      bit (1) unaligned,
  3    79 	         4 reg_mod	      bit (4) unaligned,
  3    80 	       3 fill1_op	      bit (10) unaligned,
  3    81 	       3 zero5	      bit (1) unaligned,
  3    82 	       3 mf1	      unaligned,
  3    83 	         4 pr_spec	      bit (1) unaligned,
  3    84 	         4 reg_or_length  bit (1) unaligned,
  3    85 	         4 zero6	      bit (1) unaligned,
  3    86 	         4 reg_mod	      bit (4) unaligned,
  3    87 	     2 desc_ext	      unaligned,
  3    88 	       3 desc	      (512) unaligned,
  3    89 	         4 desc_od	      bit (36) unaligned;
  3    90 
  3    91 /* The detailed definitions of the fields in this structure
  3    92*   can be found in the GMAP manual section 8.
  3    93*   The desc_ext is the descriptor extension of this eis
  3    94*   instruction. The number of descriptors associated with
  3    95*   this instruction is equavalent to the operand number.
  3    96*   Depending on operand data type, the descriptor
  3    97*   can be alphanumeric or numeric.  The structures of the
  3    98*   alphanumeric and the numeric descriptors are defined
  3    99*   below. */
  3   100 
  3   101 /* alphanumeric descriptor format */
  3   102 
  3   103      dcl	   1 desc_an	      based (desc_an_ptr) unaligned,
  3   104 	     2 desc_f	      (512) unaligned,
  3   105 	       3 y	      unaligned,
  3   106 	         4 pr	      bit (3) unaligned,
  3   107 	         4 wd_offset      bit (15) unaligned,
  3   108 	       3 char_n	      bit (3) unaligned,
  3   109 	       3 zero1	      bit (1) unaligned,
  3   110 	       3 ta	      bit (2),
  3   111 	       3 n	      bit (12) unaligned;
  3   112 
  3   113 
  3   114 /* The detailed definitions of the fields in this structure can
  3   115*   be found in the GMAP manual section 8. */
  3   116 /* numeric descriptor format */
  3   117 
  3   118      dcl	   desc_nn_ptr	      ptr;
  3   119      dcl	   desc_an_ptr	      ptr;
  3   120 
  3   121 
  3   122      dcl	   1 desc_nn	      based (desc_nn_ptr) unaligned,
  3   123 	     2 desc_f	      (512) unaligned,
  3   124 	       3 y	      unaligned,
  3   125 	         4 pr	      bit (3) unaligned,
  3   126 	         4 wd_offset      bit (15) unaligned,
  3   127 	       3 digit_n	      bit (3) unaligned,
  3   128 	       3 tn	      bit (1) unaligned,
  3   129 	       3 sign_type	      bit (2) unaligned,
  3   130 	       3 scal	      bit (6) unaligned,
  3   131 	       3 n	      bit (6) unaligned;
  3   132 
  3   133 
  3   134 /* The detailed definitions of fields in this structure can
  3   135*   be found in the GMAP manual section 8. */
  3   136 /* END INCLUDE FILE ...   cobol_addr_tokens.incl.pl1 */
  3   137 
      494 
  4     1 
  4     2 /* BEGIN INCLUDE FILE ... cobol_.incl.pl1 */
  4     3 /* last modified Feb 4, 1977 by ORN  */
  4     4 
  4     5 /* This file defines all external data used in the generator phase of Multics Cobol */
  4     6 
  4     7 /* POINTERS */
  4     8 dcl cobol_$text_base_ptr ptr  ext;
  4     9 dcl text_base_ptr ptr  defined (cobol_$text_base_ptr);
  4    10 dcl cobol_$con_end_ptr ptr  ext;
  4    11 dcl con_end_ptr ptr  defined (cobol_$con_end_ptr);
  4    12 dcl cobol_$def_base_ptr ptr  ext;
  4    13 dcl def_base_ptr ptr  defined (cobol_$def_base_ptr);
  4    14 dcl cobol_$link_base_ptr ptr  ext;
  4    15 dcl link_base_ptr ptr  defined (cobol_$link_base_ptr);
  4    16 dcl cobol_$sym_base_ptr ptr  ext;
  4    17 dcl sym_base_ptr ptr  defined (cobol_$sym_base_ptr);
  4    18 dcl cobol_$reloc_text_base_ptr ptr  ext;
  4    19 dcl reloc_text_base_ptr ptr  defined (cobol_$reloc_text_base_ptr);
  4    20 dcl cobol_$reloc_def_base_ptr ptr  ext;
  4    21 dcl reloc_def_base_ptr ptr  defined (cobol_$reloc_def_base_ptr);
  4    22 dcl cobol_$reloc_link_base_ptr ptr  ext;
  4    23 dcl reloc_link_base_ptr ptr  defined (cobol_$reloc_link_base_ptr);
  4    24 dcl cobol_$reloc_sym_base_ptr ptr  ext;
  4    25 dcl reloc_sym_base_ptr ptr  defined (cobol_$reloc_sym_base_ptr);
  4    26 dcl cobol_$reloc_work_base_ptr ptr  ext;
  4    27 dcl reloc_work_base_ptr ptr  defined (cobol_$reloc_work_base_ptr);
  4    28 dcl cobol_$pd_map_ptr ptr  ext;
  4    29 dcl pd_map_ptr ptr  defined (cobol_$pd_map_ptr);
  4    30 dcl cobol_$fixup_ptr ptr  ext;
  4    31 dcl fixup_ptr ptr  defined (cobol_$fixup_ptr);
  4    32 dcl cobol_$initval_base_ptr ptr  ext;
  4    33 dcl initval_base_ptr ptr  defined (cobol_$initval_base_ptr);
  4    34 dcl cobol_$initval_file_ptr ptr  ext;
  4    35 dcl initval_file_ptr ptr  defined (cobol_$initval_file_ptr);
  4    36 dcl cobol_$perform_list_ptr ptr  ext;
  4    37 dcl perform_list_ptr ptr  defined (cobol_$perform_list_ptr);
  4    38 dcl cobol_$alter_list_ptr ptr  ext;
  4    39 dcl alter_list_ptr ptr  defined (cobol_$alter_list_ptr);
  4    40 dcl cobol_$seg_init_list_ptr ptr  ext;
  4    41 dcl seg_init_list_ptr ptr  defined (cobol_$seg_init_list_ptr);
  4    42 dcl cobol_$temp_token_area_ptr ptr  ext;
  4    43 dcl temp_token_area_ptr ptr  defined (cobol_$temp_token_area_ptr);
  4    44 dcl cobol_$temp_token_ptr ptr  ext;
  4    45 dcl temp_token_ptr ptr  defined (cobol_$temp_token_ptr);
  4    46 dcl cobol_$token_block1_ptr ptr  ext;
  4    47 dcl token_block1_ptr ptr  defined (cobol_$token_block1_ptr);
  4    48 dcl cobol_$token_block2_ptr ptr  ext;
  4    49 dcl token_block2_ptr ptr  defined (cobol_$token_block2_ptr);
  4    50 dcl cobol_$minpral5_ptr ptr  ext;
  4    51 dcl minpral5_ptr ptr  defined (cobol_$minpral5_ptr);
  4    52 dcl cobol_$tag_table_ptr ptr  ext;
  4    53 dcl tag_table_ptr ptr  defined (cobol_$tag_table_ptr);
  4    54 dcl cobol_$map_data_ptr ptr  ext;
  4    55 dcl map_data_ptr ptr  defined (cobol_$map_data_ptr);
  4    56 dcl cobol_$ptr_status_ptr ptr  ext;
  4    57 dcl ptr_status_ptr ptr  defined (cobol_$ptr_status_ptr);
  4    58 dcl cobol_$reg_status_ptr ptr  ext;
  4    59 dcl reg_status_ptr ptr  defined (cobol_$reg_status_ptr);
  4    60 dcl cobol_$misc_base_ptr ptr ext;
  4    61 dcl misc_base_ptr ptr defined (cobol_$misc_base_ptr);
  4    62 dcl cobol_$misc_end_ptr ptr ext;
  4    63 dcl misc_end_ptr ptr defined (cobol_$misc_end_ptr);
  4    64 dcl cobol_$list_ptr ptr ext;
  4    65 dcl list_ptr ptr defined (cobol_$list_ptr);
  4    66 dcl cobol_$allo1_ptr ptr ext;
  4    67 dcl allo1_ptr ptr defined (cobol_$allo1_ptr);
  4    68 dcl cobol_$eln_ptr ptr ext;
  4    69 dcl eln_ptr ptr defined (cobol_$eln_ptr);
  4    70 dcl cobol_$diag_ptr ptr ext;
  4    71 dcl diag_ptr ptr defined (cobol_$diag_ptr);
  4    72 dcl cobol_$xref_token_ptr ptr ext;
  4    73 dcl xref_token_ptr ptr defined (cobol_$xref_token_ptr);
  4    74 dcl cobol_$xref_chain_ptr ptr ext;
  4    75 dcl xref_chain_ptr ptr defined (cobol_$xref_chain_ptr);
  4    76 dcl cobol_$statement_info_ptr ptr ext;
  4    77 dcl statement_info_ptr ptr defined (cobol_$statement_info_ptr);
  4    78 dcl cobol_$reswd_ptr ptr ext;
  4    79 dcl reswd_ptr ptr defined (cobol_$reswd_ptr);
  4    80 dcl cobol_$op_con_ptr ptr ext;
  4    81 dcl op_con_ptr ptr defined (cobol_$op_con_ptr);
  4    82 dcl cobol_$ntbuf_ptr ptr ext;
  4    83 dcl ntbuf_ptr ptr defined (cobol_$ntbuf_ptr);
  4    84 dcl cobol_$main_pcs_ptr ptr ext;
  4    85 dcl main_pcs_ptr ptr defined (cobol_$main_pcs_ptr);
  4    86 dcl cobol_$include_info_ptr ptr ext;
  4    87 dcl include_info_ptr ptr defined (cobol_$include_info_ptr);
  4    88 
  4    89 /* FIXED BIN */
  4    90 dcl cobol_$text_wd_off fixed bin  ext;
  4    91 dcl text_wd_off fixed bin  defined (cobol_$text_wd_off);
  4    92 dcl cobol_$con_wd_off fixed bin  ext;
  4    93 dcl con_wd_off fixed bin  defined (cobol_$con_wd_off);
  4    94 dcl cobol_$def_wd_off fixed bin  ext;
  4    95 dcl def_wd_off fixed bin  defined (cobol_$def_wd_off);
  4    96 dcl cobol_$def_max fixed bin  ext;
  4    97 dcl def_max fixed bin  defined (cobol_$def_max);
  4    98 dcl cobol_$link_wd_off fixed bin  ext;
  4    99 dcl link_wd_off fixed bin  defined (cobol_$link_wd_off);
  4   100 dcl cobol_$link_max fixed bin  ext;
  4   101 dcl link_max fixed bin  defined (cobol_$link_max);
  4   102 dcl cobol_$sym_wd_off fixed bin  ext;
  4   103 dcl sym_wd_off fixed bin  defined (cobol_$sym_wd_off);
  4   104 dcl cobol_$sym_max fixed bin  ext;
  4   105 dcl sym_max fixed bin  defined (cobol_$sym_max);
  4   106 dcl cobol_$reloc_text_max fixed bin(24)  ext;
  4   107 dcl reloc_text_max fixed bin(24)  defined (cobol_$reloc_text_max);
  4   108 dcl cobol_$reloc_def_max fixed bin(24)  ext;
  4   109 dcl reloc_def_max fixed bin(24)  defined (cobol_$reloc_def_max);
  4   110 dcl cobol_$reloc_link_max fixed bin(24)  ext;
  4   111 dcl reloc_link_max fixed bin(24)  defined (cobol_$reloc_link_max);
  4   112 dcl cobol_$reloc_sym_max fixed bin(24)  ext;
  4   113 dcl reloc_sym_max fixed bin(24)  defined (cobol_$reloc_sym_max);
  4   114 dcl cobol_$reloc_work_max fixed bin(24)  ext;
  4   115 dcl reloc_work_max fixed bin(24)  defined (cobol_$reloc_work_max);
  4   116 dcl cobol_$pd_map_index fixed bin  ext;
  4   117 dcl pd_map_index fixed bin  defined (cobol_$pd_map_index);
  4   118 dcl cobol_$cobol_data_wd_off fixed bin  ext;
  4   119 dcl cobol_data_wd_off fixed bin  defined (cobol_$cobol_data_wd_off);
  4   120 dcl cobol_$stack_off fixed bin  ext;
  4   121 dcl stack_off fixed bin  defined (cobol_$stack_off);
  4   122 dcl cobol_$max_stack_off fixed bin  ext;
  4   123 dcl max_stack_off fixed bin  defined (cobol_$max_stack_off);
  4   124 dcl cobol_$init_stack_off fixed bin  ext;
  4   125 dcl init_stack_off fixed bin  defined (cobol_$init_stack_off);
  4   126 dcl cobol_$pd_map_sw fixed bin  ext;
  4   127 dcl pd_map_sw fixed bin  defined (cobol_$pd_map_sw);
  4   128 dcl cobol_$next_tag fixed bin  ext;
  4   129 dcl next_tag fixed bin  defined (cobol_$next_tag);
  4   130 dcl cobol_$data_init_flag fixed bin  ext;
  4   131 dcl data_init_flag fixed bin  defined (cobol_$data_init_flag);
  4   132 dcl cobol_$seg_init_flag fixed bin  ext;
  4   133 dcl seg_init_flag fixed bin  defined (cobol_$seg_init_flag);
  4   134 dcl cobol_$alter_flag fixed bin  ext;
  4   135 dcl alter_flag fixed bin  defined (cobol_$alter_flag);
  4   136 dcl cobol_$sect_eop_flag fixed bin  ext;
  4   137 dcl sect_eop_flag fixed bin  defined (cobol_$sect_eop_flag);
  4   138 dcl cobol_$para_eop_flag fixed bin  ext;
  4   139 dcl para_eop_flag fixed bin  defined (cobol_$para_eop_flag);
  4   140 dcl cobol_$priority_no fixed bin  ext;
  4   141 dcl priority_no fixed bin  defined (cobol_$priority_no);
  4   142 dcl cobol_$compile_count fixed bin ext;
  4   143 dcl compile_count fixed bin defined (cobol_$compile_count);
  4   144 dcl cobol_$ptr_assumption_ind fixed bin ext;
  4   145 dcl ptr_assumption_ind fixed bin defined (cobol_$ptr_assumption_ind);
  4   146 dcl cobol_$reg_assumption_ind fixed bin ext;
  4   147 dcl reg_assumption_ind fixed bin defined (cobol_$reg_assumption_ind);
  4   148 dcl cobol_$perform_para_index fixed bin ext;
  4   149 dcl perform_para_index fixed bin defined (cobol_$perform_para_index);
  4   150 dcl cobol_$perform_sect_index fixed bin ext;
  4   151 dcl perform_sect_index fixed bin defined (cobol_$perform_sect_index);
  4   152 dcl cobol_$alter_index fixed bin ext;
  4   153 dcl alter_index fixed bin defined (cobol_$alter_index);
  4   154 dcl cobol_$list_off fixed bin ext;
  4   155 dcl list_off fixed bin defined (cobol_$list_off);
  4   156 dcl cobol_$constant_offset fixed bin ext;
  4   157 dcl constant_offset fixed bin defined (cobol_$constant_offset);
  4   158 dcl cobol_$misc_max fixed bin ext;
  4   159 dcl misc_max fixed bin defined (cobol_$misc_max);
  4   160 dcl cobol_$pd_map_max fixed bin ext;
  4   161 dcl pd_map_max fixed bin defined (cobol_$pd_map_max);
  4   162 dcl cobol_$map_data_max fixed bin ext;
  4   163 dcl map_data_max fixed bin defined (cobol_$map_data_max);
  4   164 dcl cobol_$fixup_max fixed bin ext;
  4   165 dcl fixup_max fixed bin defined (cobol_$fixup_max);
  4   166 dcl cobol_$tag_table_max fixed bin ext;
  4   167 dcl tag_table_max fixed bin defined (cobol_$tag_table_max);
  4   168 dcl cobol_$temp_token_max fixed bin ext;
  4   169 dcl temp_token_max fixed bin defined (cobol_$temp_token_max);
  4   170 dcl cobol_$allo1_max fixed bin ext;
  4   171 dcl allo1_max fixed bin defined (cobol_$allo1_max);
  4   172 dcl cobol_$eln_max fixed bin ext;
  4   173 dcl eln_max fixed bin defined (cobol_$eln_max);
  4   174 dcl cobol_$debug_enable fixed bin ext;
  4   175 dcl debug_enable fixed bin defined (cobol_$debug_enable);
  4   176 dcl cobol_$non_source_offset fixed bin ext;
  4   177 dcl non_source_offset fixed bin defined (cobol_$non_source_offset);
  4   178 dcl cobol_$initval_flag fixed bin ext;
  4   179 dcl initval_flag fixed bin defined (cobol_$initval_flag);
  4   180 dcl cobol_$date_compiled_sw fixed bin ext;
  4   181 dcl date_compiled_sw fixed bin defined (cobol_$date_compiled_sw);
  4   182 dcl cobol_$include_cnt fixed bin ext;
  4   183 dcl include_cnt fixed bin defined (cobol_$include_cnt);
  4   184 dcl cobol_$fs_charcnt fixed bin ext;
  4   185 dcl fs_charcnt fixed bin defined (cobol_$fs_charcnt);
  4   186 dcl cobol_$ws_charcnt fixed bin ext;
  4   187 dcl ws_charcnt fixed bin defined (cobol_$ws_charcnt);
  4   188 dcl cobol_$coms_charcnt fixed bin ext;
  4   189 dcl coms_charcnt fixed bin defined (cobol_$coms_charcnt);
  4   190 dcl cobol_$ls_charcnt fixed bin ext;
  4   191 dcl ls_charcnt fixed bin defined (cobol_$ls_charcnt);
  4   192 dcl cobol_$cons_charcnt fixed bin ext;
  4   193 dcl cons_charcnt fixed bin defined (cobol_$cons_charcnt);
  4   194 dcl cobol_$value_cnt fixed bin ext;
  4   195 dcl value_cnt fixed bin defined (cobol_$value_cnt);
  4   196 dcl cobol_$cd_cnt fixed bin ext;
  4   197 dcl cd_cnt fixed bin defined (cobol_$cd_cnt);
  4   198 dcl cobol_$fs_wdoff fixed bin ext;
  4   199 dcl fs_wdoff fixed bin defined (cobol_$fs_wdoff);
  4   200 dcl cobol_$ws_wdoff fixed bin ext;
  4   201 dcl ws_wdoff fixed bin defined (cobol_$ws_wdoff);
  4   202 dcl cobol_$coms_wdoff fixed bin ext;
  4   203 dcl coms_wdoff fixed bin defined (cobol_$coms_wdoff);
  4   204 
  4   205 /* CHARACTER */
  4   206 dcl cobol_$scratch_dir char (168)   aligned ext;
  4   207 dcl scratch_dir char (168)   aligned defined (cobol_$scratch_dir);			/* -42- */
  4   208 dcl cobol_$obj_seg_name char (32)   aligned ext;
  4   209 dcl obj_seg_name char (32)   aligned defined (cobol_$obj_seg_name);		/* -8- */
  4   210 
  4   211 /* BIT */
  4   212 dcl cobol_$xref_bypass bit(1) aligned ext;
  4   213 dcl xref_bypass bit(1) aligned defined (cobol_$xref_bypass);			/* -1- */
  4   214 dcl cobol_$same_sort_merge_proc bit(1) aligned ext;
  4   215 dcl same_sort_merge_proc bit(1) aligned defined (cobol_$same_sort_merge_proc);		/* -1- */
  4   216 
  4   217 
  4   218 /* END INCLUDE FILE ... cobol_incl.pl1*/
  4   219 
  4   220 
      495 
  5     1 
  5     2 /*  BEGIN INCLUDE FILE ...   cobol_in_token.incl.pl1		  */
  5     3 
  5     4 /*  Last modified August 22, 1974 by AEG		  */
  5     5 
  5     6 
  5     7 declare in_token_ptr ptr;
  5     8 
  5     9 declare 1 in_token aligned based(in_token_ptr),
  5    10 	2 n fixed bin aligned,
  5    11 	2 code fixed bin aligned,
  5    12 	2 token_ptr(0 refer(in_token.n)) ptr aligned;
  5    13 
  5    14 
  5    15 /*  END INCLUDE FILE ...   cobol_in_token.incl.pl1		  */
  5    16 
      496 
  6     1 
  6     2 /* BEGIN INCLUDE FILE ...   cobol_record_types.incl.pl1 */
  6     3 /*   <<<   LAST MODIFIED ON 09-09-75 by tlf   >>>   */
  6     4 
  6     5 dcl rtc_resword fixed bin (15) int static		init(1);
  6     6 dcl rtc_numlit fixed bin (15) int static		init(2);
  6     7 dcl rtc_alphalit fixed bin (15) int static		init(3);
  6     8 dcl rtc_picstring fixed bin (15) int static		init(4);
  6     9 dcl rtc_diag fixed bin (15) int static			init(5);
  6    10 dcl rtc_source fixed bin (15) int static		init(6);
  6    11 dcl rtc_procdef fixed bin (15) int static		init(7);
  6    12 dcl rtc_userwd fixed bin (15) int static		init(8);
  6    13 dcl rtc_dataname fixed bin (15) int static		init(9);
  6    14 dcl rtc_indexname fixed bin (15) int static		init(10);
  6    15 dcl rtc_condname fixed bin (15) int static 		init(11);
  6    16 dcl rtc_filedef fixed bin (15) int static 		init(12);
  6    17 dcl rtc_commdesc fixed bin (15) int static		init(13);
  6    18 dcl rtc_debugitems fixed bin (15) int static		init(14);
  6    19 dcl rtc_savedarea fixed bin (15) int static		init(15);
  6    20 dcl rtc_sortmerge fixed bin (15) int static		init(16);
  6    21 dcl rtc_mnemonic fixed bin (15) int static		init(17);
  6    22 dcl rtc_pararef fixed bin (15) int static		init(18);
  6    23 dcl rtc_eos fixed bin (15) int static 			init(19);
  6    24 dcl rtc_reportname fixed bin (15) int static		init(20);
  6    25 dcl rtc_groupname fixed bin (15) int static		init(21);
  6    26 dcl rtc_reportentry fixed bin (15) int static		init(22);
  6    27 dcl rtc_unknown1 fixed bin (15) int static		init(23);
  6    28 dcl rtc_debugenable fixed bin (15) int static		init(24);
  6    29 dcl rtc_unknown2 fixed bin (15) int static		init(25);
  6    30 dcl rtc_unknown3 fixed bin (15) int static		init(26);
  6    31 dcl rtc_unknown4 fixed bin (15) int static		init(27);
  6    32 dcl rtc_unknown5 fixed bin (15) int static		init(28);
  6    33 dcl rtc_unknown6 fixed bin (15) int static		init(29);
  6    34 dcl rtc_internal_tag fixed bin (15) int static		init(30);
  6    35 dcl rtc_equate_tag fixed bin (15) int static		init(31);
  6    36 dcl rtc_register fixed bin (15) int static		init(100);
  6    37 dcl rtc_fdec_temp fixed bin (15) int static		init(101);
  6    38 dcl rtc_immed_const fixed bin (15) int static		init(102);
  6    39 
  6    40 /* END INCLUDE FILE ...   cobol_record_types.incl.pl1 */
  6    41 
      497 
  7     1 
  7     2 /* BEGIN INCLUDE FILE ... cobol_type100.incl.pl1 */
  7     3 /* Last modified on 11/19/76 by ORN */
  7     4 
  7     5 /*
  7     6*The internal register token is used only during the code generation phase.
  7     7**/
  7     8 
  7     9 dcl cobol_type100_ptr ptr;
  7    10 
  7    11 /* BEGIN DECLARATION OF TYPE100 (INTERNAL REGISTER) TOKEN */
  7    12 dcl 1 cobol_type100 based (cobol_type100_ptr) aligned,
  7    13 	/* header */
  7    14 	 2 size fixed bin (15),
  7    15 	 2 line fixed bin (15),
  7    16 	 2 column fixed bin (7),
  7    17 	 2 type fixed bin (7),
  7    18 	/* body */
  7    19 	 2 register bit (4) unaligned;
  7    20 /* END DECLARATION OF TYPE100 (INTERNAL REGISTER) TOKEN */
  7    21 
  7    22  /*
  7    23*FIELD		CONTENTS
  7    24*
  7    25*size		The total size in bytes of this token.
  7    26*line		Generated sequence number of source line.
  7    27*		Always 0.
  7    28*column		The column number on the source image.
  7    29*		Always 0.
  7    30*type		100
  7    31*register		The register number in the following form.
  7    32*			"0001"b - A register.
  7    33*			"0010"b - Q register.
  7    34*			"0011"b - A and Q registers.
  7    35*			"1nnn"b - index register nnn.
  7    36**/
  7    37 
  7    38 /* END INCLUDE FILE ... cobol_type100.incl.pl1 */
  7    39 
      498 
  8     1 
  8     2 /* BEGIN INCLUDE FILE ... cobol_type19.incl.pl1 */
  8     3 /* last modified on 11/19/76 by ORN */
  8     4 
  8     5 /*
  8     6*A type 19 end of statement token is created in the procedure division
  8     7*minpral file at the end of each minpral statement generated by the
  8     8*procedure division syntax phase.  A minpral statement may be a complete or
  8     9*partial source language statement.  A type 19 token contains information
  8    10*describing the statement which it delimits.
  8    11**/
  8    12 
  8    13 dcl eos_ptr ptr;
  8    14 
  8    15 /* BEGIN DECLARATION OF TYPE19 (END STATEMENT) TOKEN */
  8    16 dcl	1 end_stmt based (eos_ptr),
  9     1 
  9     2 /* begin include file ... cobol_TYPE19.incl.pl1 */
  9     3 /* Last modified on 11/17/76 by ORN */
  9     4 
  9     5 		/* header */
  9     6 		2 size fixed bin,
  9     7 		2 line fixed bin,
  9     8 		2 column fixed bin,
  9     9 		2 type fixed bin,
  9    10 		/* body */
  9    11 		2 verb fixed bin,
  9    12 		2 e fixed bin,
  9    13 		2 h fixed bin,
  9    14 		2 i fixed bin,
  9    15 		2 j fixed bin,
  9    16 		2 a bit (3),
  9    17 		2 b bit (1),
  9    18 		2 c bit (1),
  9    19 		2 d bit (2),
  9    20 		2 f bit (2),
  9    21 		2 g bit (2),
  9    22 		2 k bit (5),
  9    23 		2 always_an bit (1);
  9    24 
  9    25 /* end include file ... cobol_TYPE19.incl.pl1 */
  9    26 
  8    17 
  8    18 /* END DECLARATION OF TYPE19 (END STATEMENT) TOKEN */
  8    19 
  8    20 /*
  8    21*FIELD		CONTENTS
  8    22*
  8    23*size		The total size in bytes of this end of statement token.
  8    24*line		0
  8    25*column		0
  8    26*type		19
  8    27*verb		A value indicating the verb in this statement
  8    28*		 1 = accept
  8    29*		 2 = add
  8    30*		 3 = on size error
  8    31*		 4 = alter
  8    32*		 5 = call
  8    33*		 7 = cancel
  8    34*		 8 = close
  8    35*		 9 = divide
  8    36*		10 = multiply
  8    37*		11 = subtract
  8    38*		12 = exit
  8    39*		14 = go
  8    40*		15 = merge
  8    41*		16 = initiate
  8    42*		17 = inspect
  8    43*		18 = move
  8    44*		19 = open
  8    45*		20 = perform
  8    46*		21 = read
  8    47*		23 = receive
  8    48*		24 = release
  8    49*		25 = return
  8    50*		26 = search
  8    51*		27 = rewrite
  8    52*		29 = seek
  8    53*		30 = send
  8    54*		31 = set
  8    55*		33 = stop
  8    56*		34 = string
  8    57*		35 = suspend
  8    58*		36 = terminate
  8    59*		37 = unstring
  8    60*		38 = write
  8    61*		39 = use
  8    62*		40 = compute
  8    63*		41 = disable
  8    64*		42 = display
  8    65*		43 = enable
  8    66*		45 = generate
  8    67*		46 = hold
  8    68*		48 = process
  8    69*		49 = sort
  8    70*		52 = procedure
  8    71*		53 = declaratives
  8    72*		54 = section name
  8    73*		55 = paragraph name
  8    74*		98 = end
  8    75*e,h,i,j		The significance of these fields differs with each
  8    76*		statement.  These fields are normally used as counters.
  8    77*a,b,c,d,f,g,k	The significance of these fields differs with each
  8    78*		statement.  These fields are normally used as indicators.
  8    79**/
  8    80 
  8    81 /* END INCLUDE FILE ... cobol_type19.incl.pl1 */
  8    82 
      499 
      500 
      501      end cobol_multiply_bin_gen;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    05/24/89  0834.8  cobol_multiply_bin_gen.pl1        >spec>install>MR12.3-1048>cobol_multiply_bin_gen.pl1
493          1    03/27/82  0439.9  cobol_type9.incl.pl1              >ldd>include>cobol_type9.incl.pl1
1-17         2    11/11/82  1712.7  cobol_TYPE9.incl.pl1              >ldd>include>cobol_TYPE9.incl.pl1
494          3    05/24/89  0811.7  cobol_addr_tokens.incl.pl1        >spec>install>MR12.3-1048>cobol_addr_tokens.incl.pl1
495          4    11/11/82  1712.7  cobol_.incl.pl1                   >ldd>include>cobol_.incl.pl1
496          5    11/11/82  1712.7  cobol_in_token.incl.pl1           >ldd>include>cobol_in_token.incl.pl1
497          6    03/27/82  0439.8  cobol_record_types.incl.pl1       >ldd>include>cobol_record_types.incl.pl1
498          7    03/27/82  0439.8  cobol_type100.incl.pl1            >ldd>include>cobol_type100.incl.pl1
499          8    03/27/82  0439.8  cobol_type19.incl.pl1             >ldd>include>cobol_type19.incl.pl1
8-17         9    03/27/82  0439.6  cobol_TYPE19.incl.pl1             >ldd>include>cobol_TYPE19.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
AOS                                    constant        bit(10)                  initial packed unaligned dcl 83 ref 290
LDA                                    constant        bit(10)                  initial packed unaligned dcl 85 ref 321
LDQ                                    constant        bit(10)                  initial packed unaligned dcl 87 ref 323
STZ                                    constant        bit(10)                  initial packed unaligned dcl 81 ref 240
a                        11            based           bit(3)                   level 2 packed packed unaligned dcl 8-16 ref 179
addr                                                   builtin function         dcl 488 ref 216 216 228 229 230 269 269 279 279 285
                                                                                  285 319 319 328 328 341 341 392 392 421 421 451
                                                                                  451 467 467
b                        11(03)        based           bit(1)                   level 2 packed packed unaligned dcl 8-16 ref 169
bin_18                   21(13)        based           bit(1)                   level 2 packed packed unaligned dcl 1-16 ref 381 411
call_again                      000161 automatic       bit(1)                   packed unaligned dcl 159 set ref 213* 264* 265 274*
                                                                                  384* 385 398* 413* 414 427*
char_offset               4            based           fixed bin(24,0)          level 2 dcl 3-23 set ref 237*
cobol_$next_tag                 000046 external static fixed bin(17,0)          dcl 4-128 set ref 173 175* 175 244 246* 246 299 301*
                                                                                  301
cobol_$text_wd_off              000044 external static fixed bin(17,0)          dcl 4-90 ref 270 286 329 342 393 422 452
cobol_addr                      000024 constant        entry                    external dcl 69 ref 239
cobol_alloc$stack               000014 constant        entry                    external dcl 63 ref 209 226
cobol_define_tag                000040 constant        entry                    external dcl 76 ref 289 294 345 454
cobol_emit                      000026 constant        entry                    external dcl 70 ref 241 269 285 291 324 328 341 392
                                                                                  421 451
cobol_fofl_mask$off             000032 constant        entry                    external dcl 72 ref 312 441 460
cobol_fofl_mask$on              000030 constant        entry                    external dcl 71 ref 254 375
cobol_make_tagref               000036 constant        entry                    external dcl 75 ref 270 286 329 342 393 422 452
cobol_make_type9$long_bin       000016 constant        entry                    external dcl 64 ref 211
cobol_multiply2_binary          000034 constant        entry                    external dcl 73 ref 261 369
cobol_register$load             000042 constant        entry                    external dcl 77 ref 319
cobol_register$release          000022 constant        entry                    external dcl 67 ref 216 279 467
cobol_store_binary              000020 constant        entry                    external dcl 66 ref 213 264 274 384 398 413 427
cobol_type100                          based           structure                level 1 dcl 7-12
contains                  4     000124 automatic       fixed bin(17,0)          level 2 dcl 127 set ref 318*
data_name                              based           structure                level 1 unaligned dcl 1-16
e                         5            based           fixed bin(17,0)          level 2 dcl 8-16 ref 198
end_stmt                               based           structure                level 1 unaligned dcl 8-16
eos_ptr                         000170 automatic       pointer                  dcl 8-13 set ref 166* 169 179 198 334 444
f                        11(07)        based           bit(2)                   level 2 packed packed unaligned dcl 8-16 ref 334 444
fill1_op                  0(18)        based           bit(10)                  level 2 packed packed unaligned dcl 3-51 set ref
                                                                                  240* 290* 321* 323*
imperative_stmt_tag             000145 automatic       fixed bin(17,0)          dcl 143 set ref 173* 174 250 329* 334 345* 393* 422*
                                                                                  444 454*
in_token                               based           structure                level 1 dcl 5-9
in_token_ptr                           parameter       pointer                  dcl 5-7 ref 29 166 166 199 259 261 264 274 297 364
                                                                                  365 379 381 384 398 409 411 413 427
input_buff                      000100 automatic       structure                level 1 unaligned dcl 119 set ref 228
input_ptr                       000162 automatic       pointer                  dcl 3-18 set ref 228* 232 233 234 235 237 239*
input_struc_basic                      based           structure                level 1 unaligned dcl 3-23
inst_ptr                        000164 automatic       pointer                  dcl 3-18 set ref 230* 239* 240 241* 290 291* 321 323
                                                                                  324*
inst_struc_basic                       based           structure                level 1 dcl 3-51
ix                              000146 automatic       fixed bin(17,0)          dcl 144 set ref 259* 261 264 274 297* 379* 381 384
                                                                                  398* 409* 411 413 427*
lock                      2     000124 automatic       fixed bin(17,0)          level 2 in structure "register_struc" dcl 127
                                                                                  in procedure "cobol_multiply_bin_gen" set ref 317*
lock                      2            based           fixed bin(17,0)          level 2 in structure "input_struc_basic" dcl 3-23
                                                                                  in procedure "cobol_multiply_bin_gen" set ref 234*
multiplicand_token_ptr          000152 automatic       pointer                  dcl 148 set ref 364* 369*
multiplier_token_ptr            000150 automatic       pointer                  dcl 146 set ref 199* 202 213* 215 217* 261* 365*
                                                                                  369*
n                                      based           fixed bin(17,0)          level 2 dcl 5-9 ref 166 259 297 379 409
next_stmt_tag                          parameter       fixed bin(17,0)          dcl 41 set ref 29 174* 334* 342* 444* 452*
no_ovflo_tag                    000144 automatic       fixed bin(17,0)          dcl 142 set ref 245* 286* 294* 300*
null                                                   builtin function         dcl 488 ref 177 210 269 269 270 270 285 285 286 286
                                                                                  328 328 329 329 341 341 342 342 392 392 393 393
                                                                                  421 421 422 422 451 451 452 452
operand_no                1            based           fixed bin(17,0)          level 2 dcl 3-23 set ref 233*
ose_flag                        000154 automatic       bit(1)                   packed unaligned dcl 151 set ref 169* 171 220 267
                                                                                  282 308 375 389 418 438
ovflo_flag_inst                 000142 automatic       bit(36)                  packed unaligned dcl 140 set ref 230
ovflo_tag                       000143 automatic       fixed bin(17,0)          dcl 141 set ref 244* 245 250* 270* 289* 299* 300
receive_count                   000140 automatic       fixed bin(17,0)          dcl 138 set ref 198* 202 222 282 313
reg_no                    1     000124 automatic       bit(4)                   level 2 packed packed unaligned dcl 127 set ref 215*
                                                                                  278* 321 466*
register                  4            based           bit(4)                   level 2 packed packed unaligned dcl 7-12 ref 215 278
                                                                                  466
register_struc                  000124 automatic       structure                level 1 unaligned dcl 127 set ref 216 216 279 279
                                                                                  319 319 467 467
reloc_buff                      000112 automatic       structure                level 1 unaligned dcl 122 set ref 229
reloc_ptr                       000166 automatic       pointer                  dcl 3-18 set ref 229* 239* 241* 291* 324*
result_token_ptr                000136 automatic       pointer                  dcl 135 set ref 177* 261* 264* 274* 276 278 369*
                                                                                  384* 398* 413* 427* 463 466
ret_offset                      000141 automatic       fixed bin(24,0)          dcl 139 set ref 209* 211* 226* 237
rtc_dataname                           constant        fixed bin(15,0)          initial dcl 6-13 ref 202
rtc_register                           constant        fixed bin(15,0)          initial dcl 6-36 ref 276 463
segno                     3            based           fixed bin(17,0)          level 2 dcl 3-23 set ref 235*
skipped_some                    000160 automatic       bit(1)                   packed unaligned dcl 154 set ref 374* 381* 406
temp_ptr                        000156 automatic       pointer                  dcl 153 set ref 210* 211* 213* 217
tnz_inst                        000012 internal static bit(36)                  initial packed unaligned dcl 96 set ref 328 328
token_ptr                 2            based           pointer                  array level 2 dcl 5-9 set ref 166 199 261* 264* 274*
                                                                                  364 365 381 384* 398* 411 413* 427*
tov_inst                        000010 internal static bit(36)                  initial packed unaligned dcl 90 set ref 269 269 392
                                                                                  392 421 421
tra_inst                        000011 internal static bit(36)                  initial packed unaligned dcl 93 set ref 285 285 341
                                                                                  341 451 451
type                      3            based           fixed bin(17,0)          level 2 in structure "data_name" dcl 1-16
                                                                                  in procedure "cobol_multiply_bin_gen" ref 202 276
                                                                                  463
type                                   based           fixed bin(17,0)          level 2 in structure "input_struc_basic" dcl 3-23
                                                                                  in procedure "cobol_multiply_bin_gen" set ref 232*
what_reg                        000124 automatic       fixed bin(17,0)          level 2 dcl 127 set ref 316*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
addend_token_ptr                       automatic       pointer                  dcl 137
addrel                                                 builtin function         dcl 488
allo1_max                              defined         fixed bin(17,0)          dcl 4-171
allo1_ptr                              defined         pointer                  dcl 4-67
alter_flag                             defined         fixed bin(17,0)          dcl 4-135
alter_index                            defined         fixed bin(17,0)          dcl 4-153
alter_list_ptr                         defined         pointer                  dcl 4-39
binary                                                 builtin function         dcl 488
cd_cnt                                 defined         fixed bin(17,0)          dcl 4-197
cobol_$allo1_max                       external static fixed bin(17,0)          dcl 4-170
cobol_$allo1_ptr                       external static pointer                  dcl 4-66
cobol_$alter_flag                      external static fixed bin(17,0)          dcl 4-134
cobol_$alter_index                     external static fixed bin(17,0)          dcl 4-152
cobol_$alter_list_ptr                  external static pointer                  dcl 4-38
cobol_$cd_cnt                          external static fixed bin(17,0)          dcl 4-196
cobol_$cobol_data_wd_off               external static fixed bin(17,0)          dcl 4-118
cobol_$compile_count                   external static fixed bin(17,0)          dcl 4-142
cobol_$coms_charcnt                    external static fixed bin(17,0)          dcl 4-188
cobol_$coms_wdoff                      external static fixed bin(17,0)          dcl 4-202
cobol_$con_end_ptr                     external static pointer                  dcl 4-10
cobol_$con_wd_off                      external static fixed bin(17,0)          dcl 4-92
cobol_$cons_charcnt                    external static fixed bin(17,0)          dcl 4-192
cobol_$constant_offset                 external static fixed bin(17,0)          dcl 4-156
cobol_$data_init_flag                  external static fixed bin(17,0)          dcl 4-130
cobol_$date_compiled_sw                external static fixed bin(17,0)          dcl 4-180
cobol_$debug_enable                    external static fixed bin(17,0)          dcl 4-174
cobol_$def_base_ptr                    external static pointer                  dcl 4-12
cobol_$def_max                         external static fixed bin(17,0)          dcl 4-96
cobol_$def_wd_off                      external static fixed bin(17,0)          dcl 4-94
cobol_$diag_ptr                        external static pointer                  dcl 4-70
cobol_$eln_max                         external static fixed bin(17,0)          dcl 4-172
cobol_$eln_ptr                         external static pointer                  dcl 4-68
cobol_$fixup_max                       external static fixed bin(17,0)          dcl 4-164
cobol_$fixup_ptr                       external static pointer                  dcl 4-30
cobol_$fs_charcnt                      external static fixed bin(17,0)          dcl 4-184
cobol_$fs_wdoff                        external static fixed bin(17,0)          dcl 4-198
cobol_$include_cnt                     external static fixed bin(17,0)          dcl 4-182
cobol_$include_info_ptr                external static pointer                  dcl 4-86
cobol_$init_stack_off                  external static fixed bin(17,0)          dcl 4-124
cobol_$initval_base_ptr                external static pointer                  dcl 4-32
cobol_$initval_file_ptr                external static pointer                  dcl 4-34
cobol_$initval_flag                    external static fixed bin(17,0)          dcl 4-178
cobol_$link_base_ptr                   external static pointer                  dcl 4-14
cobol_$link_max                        external static fixed bin(17,0)          dcl 4-100
cobol_$link_wd_off                     external static fixed bin(17,0)          dcl 4-98
cobol_$list_off                        external static fixed bin(17,0)          dcl 4-154
cobol_$list_ptr                        external static pointer                  dcl 4-64
cobol_$ls_charcnt                      external static fixed bin(17,0)          dcl 4-190
cobol_$main_pcs_ptr                    external static pointer                  dcl 4-84
cobol_$map_data_max                    external static fixed bin(17,0)          dcl 4-162
cobol_$map_data_ptr                    external static pointer                  dcl 4-54
cobol_$max_stack_off                   external static fixed bin(17,0)          dcl 4-122
cobol_$minpral5_ptr                    external static pointer                  dcl 4-50
cobol_$misc_base_ptr                   external static pointer                  dcl 4-60
cobol_$misc_end_ptr                    external static pointer                  dcl 4-62
cobol_$misc_max                        external static fixed bin(17,0)          dcl 4-158
cobol_$non_source_offset               external static fixed bin(17,0)          dcl 4-176
cobol_$ntbuf_ptr                       external static pointer                  dcl 4-82
cobol_$obj_seg_name                    external static char(32)                 dcl 4-208
cobol_$op_con_ptr                      external static pointer                  dcl 4-80
cobol_$para_eop_flag                   external static fixed bin(17,0)          dcl 4-138
cobol_$pd_map_index                    external static fixed bin(17,0)          dcl 4-116
cobol_$pd_map_max                      external static fixed bin(17,0)          dcl 4-160
cobol_$pd_map_ptr                      external static pointer                  dcl 4-28
cobol_$pd_map_sw                       external static fixed bin(17,0)          dcl 4-126
cobol_$perform_list_ptr                external static pointer                  dcl 4-36
cobol_$perform_para_index              external static fixed bin(17,0)          dcl 4-148
cobol_$perform_sect_index              external static fixed bin(17,0)          dcl 4-150
cobol_$priority_no                     external static fixed bin(17,0)          dcl 4-140
cobol_$ptr_assumption_ind              external static fixed bin(17,0)          dcl 4-144
cobol_$ptr_status_ptr                  external static pointer                  dcl 4-56
cobol_$reg_assumption_ind              external static fixed bin(17,0)          dcl 4-146
cobol_$reg_status_ptr                  external static pointer                  dcl 4-58
cobol_$reloc_def_base_ptr              external static pointer                  dcl 4-20
cobol_$reloc_def_max                   external static fixed bin(24,0)          dcl 4-108
cobol_$reloc_link_base_ptr             external static pointer                  dcl 4-22
cobol_$reloc_link_max                  external static fixed bin(24,0)          dcl 4-110
cobol_$reloc_sym_base_ptr              external static pointer                  dcl 4-24
cobol_$reloc_sym_max                   external static fixed bin(24,0)          dcl 4-112
cobol_$reloc_text_base_ptr             external static pointer                  dcl 4-18
cobol_$reloc_text_max                  external static fixed bin(24,0)          dcl 4-106
cobol_$reloc_work_base_ptr             external static pointer                  dcl 4-26
cobol_$reloc_work_max                  external static fixed bin(24,0)          dcl 4-114
cobol_$reswd_ptr                       external static pointer                  dcl 4-78
cobol_$same_sort_merge_proc            external static bit(1)                   dcl 4-214
cobol_$scratch_dir                     external static char(168)                dcl 4-206
cobol_$sect_eop_flag                   external static fixed bin(17,0)          dcl 4-136
cobol_$seg_init_flag                   external static fixed bin(17,0)          dcl 4-132
cobol_$seg_init_list_ptr               external static pointer                  dcl 4-40
cobol_$stack_off                       external static fixed bin(17,0)          dcl 4-120
cobol_$statement_info_ptr              external static pointer                  dcl 4-76
cobol_$sym_base_ptr                    external static pointer                  dcl 4-16
cobol_$sym_max                         external static fixed bin(17,0)          dcl 4-104
cobol_$sym_wd_off                      external static fixed bin(17,0)          dcl 4-102
cobol_$tag_table_max                   external static fixed bin(17,0)          dcl 4-166
cobol_$tag_table_ptr                   external static pointer                  dcl 4-52
cobol_$temp_token_area_ptr             external static pointer                  dcl 4-42
cobol_$temp_token_max                  external static fixed bin(17,0)          dcl 4-168
cobol_$temp_token_ptr                  external static pointer                  dcl 4-44
cobol_$text_base_ptr                   external static pointer                  dcl 4-8
cobol_$token_block1_ptr                external static pointer                  dcl 4-46
cobol_$token_block2_ptr                external static pointer                  dcl 4-48
cobol_$value_cnt                       external static fixed bin(17,0)          dcl 4-194
cobol_$ws_charcnt                      external static fixed bin(17,0)          dcl 4-186
cobol_$ws_wdoff                        external static fixed bin(17,0)          dcl 4-200
cobol_$xref_bypass                     external static bit(1)                   dcl 4-212
cobol_$xref_chain_ptr                  external static pointer                  dcl 4-74
cobol_$xref_token_ptr                  external static pointer                  dcl 4-72
cobol_data_wd_off                      defined         fixed bin(17,0)          dcl 4-119
cobol_short_to_longbin$temp     000000 constant        entry                    external dcl 61
cobol_type100_ptr                      automatic       pointer                  dcl 7-9
compile_count                          defined         fixed bin(17,0)          dcl 4-143
coms_charcnt                           defined         fixed bin(17,0)          dcl 4-189
coms_wdoff                             defined         fixed bin(17,0)          dcl 4-203
con_end_ptr                            defined         pointer                  dcl 4-11
con_wd_off                             defined         fixed bin(17,0)          dcl 4-93
cons_charcnt                           defined         fixed bin(17,0)          dcl 4-193
constant_offset                        defined         fixed bin(17,0)          dcl 4-157
data_init_flag                         defined         fixed bin(17,0)          dcl 4-131
date_compiled_sw                       defined         fixed bin(17,0)          dcl 4-181
debug_enable                           defined         fixed bin(17,0)          dcl 4-175
dec_zero_token                         internal static structure                level 1 unaligned dcl 100
def_base_ptr                           defined         pointer                  dcl 4-13
def_max                                defined         fixed bin(17,0)          dcl 4-97
def_wd_off                             defined         fixed bin(17,0)          dcl 4-95
desc_an                                based           structure                level 1 packed packed unaligned dcl 3-103
desc_an_ptr                            automatic       pointer                  dcl 3-119
desc_nn                                based           structure                level 1 packed packed unaligned dcl 3-122
desc_nn_ptr                            automatic       pointer                  dcl 3-118
diag_ptr                               defined         pointer                  dcl 4-71
dn_ptr                                 automatic       pointer                  dcl 162
eln_max                                defined         fixed bin(17,0)          dcl 4-173
eln_ptr                                defined         pointer                  dcl 4-69
fixed                                                  builtin function         dcl 488
fixup_max                              defined         fixed bin(17,0)          dcl 4-165
fixup_ptr                              defined         pointer                  dcl 4-31
fs_charcnt                             defined         fixed bin(17,0)          dcl 4-185
fs_wdoff                               defined         fixed bin(17,0)          dcl 4-199
include_cnt                            defined         fixed bin(17,0)          dcl 4-183
include_info_ptr                       defined         pointer                  dcl 4-87
index                                                  builtin function         dcl 488
init_stack_off                         defined         fixed bin(17,0)          dcl 4-125
initval_base_ptr                       defined         pointer                  dcl 4-33
initval_file_ptr                       defined         pointer                  dcl 4-35
initval_flag                           defined         fixed bin(17,0)          dcl 4-179
input_struc                            based           structure                level 1 unaligned dcl 3-32
inst_struc                             based           structure                level 1 dcl 3-66
length                                                 builtin function         dcl 488
link_base_ptr                          defined         pointer                  dcl 4-15
link_max                               defined         fixed bin(17,0)          dcl 4-101
link_wd_off                            defined         fixed bin(17,0)          dcl 4-99
list_off                               defined         fixed bin(17,0)          dcl 4-155
list_ptr                               defined         pointer                  dcl 4-65
ls_charcnt                             defined         fixed bin(17,0)          dcl 4-191
main_pcs_ptr                           defined         pointer                  dcl 4-85
map_data_max                           defined         fixed bin(17,0)          dcl 4-163
map_data_ptr                           defined         pointer                  dcl 4-55
max_stack_off                          defined         fixed bin(17,0)          dcl 4-123
minpral5_ptr                           defined         pointer                  dcl 4-51
misc_base_ptr                          defined         pointer                  dcl 4-61
misc_end_ptr                           defined         pointer                  dcl 4-63
misc_max                               defined         fixed bin(17,0)          dcl 4-159
mod                                                    builtin function         dcl 488
next_tag                               defined         fixed bin(17,0)          dcl 4-129
non_source_offset                      defined         fixed bin(17,0)          dcl 4-177
ntbuf_ptr                              defined         pointer                  dcl 4-83
obj_seg_name                           defined         char(32)                 dcl 4-209
op_con_ptr                             defined         pointer                  dcl 4-81
para_eop_flag                          defined         fixed bin(17,0)          dcl 4-139
pd_map_index                           defined         fixed bin(17,0)          dcl 4-117
pd_map_max                             defined         fixed bin(17,0)          dcl 4-161
pd_map_ptr                             defined         pointer                  dcl 4-29
pd_map_sw                              defined         fixed bin(17,0)          dcl 4-127
perform_list_ptr                       defined         pointer                  dcl 4-37
perform_para_index                     defined         fixed bin(17,0)          dcl 4-149
perform_sect_index                     defined         fixed bin(17,0)          dcl 4-151
priority_no                            defined         fixed bin(17,0)          dcl 4-141
ptr_assumption_ind                     defined         fixed bin(17,0)          dcl 4-145
ptr_status_ptr                         defined         pointer                  dcl 4-57
reg_assumption_ind                     defined         fixed bin(17,0)          dcl 4-147
reg_status_ptr                         defined         pointer                  dcl 4-59
rel                                                    builtin function         dcl 488
reloc_def_base_ptr                     defined         pointer                  dcl 4-21
reloc_def_max                          defined         fixed bin(24,0)          dcl 4-109
reloc_link_base_ptr                    defined         pointer                  dcl 4-23
reloc_link_max                         defined         fixed bin(24,0)          dcl 4-111
reloc_struc                            based           structure                array level 1 unaligned dcl 3-44
reloc_sym_base_ptr                     defined         pointer                  dcl 4-25
reloc_sym_max                          defined         fixed bin(24,0)          dcl 4-113
reloc_text_base_ptr                    defined         pointer                  dcl 4-19
reloc_text_max                         defined         fixed bin(24,0)          dcl 4-107
reloc_work_base_ptr                    defined         pointer                  dcl 4-27
reloc_work_max                         defined         fixed bin(24,0)          dcl 4-115
remainder_token_ptr                    automatic       pointer                  dcl 150
reswd_ptr                              defined         pointer                  dcl 4-79
rtc_alphalit                           internal static fixed bin(15,0)          initial dcl 6-7
rtc_commdesc                           internal static fixed bin(15,0)          initial dcl 6-17
rtc_condname                           internal static fixed bin(15,0)          initial dcl 6-15
rtc_debugenable                        internal static fixed bin(15,0)          initial dcl 6-28
rtc_debugitems                         internal static fixed bin(15,0)          initial dcl 6-18
rtc_diag                               internal static fixed bin(15,0)          initial dcl 6-9
rtc_eos                                internal static fixed bin(15,0)          initial dcl 6-23
rtc_equate_tag                         internal static fixed bin(15,0)          initial dcl 6-35
rtc_fdec_temp                          internal static fixed bin(15,0)          initial dcl 6-37
rtc_filedef                            internal static fixed bin(15,0)          initial dcl 6-16
rtc_groupname                          internal static fixed bin(15,0)          initial dcl 6-25
rtc_immed_const                        internal static fixed bin(15,0)          initial dcl 6-38
rtc_indexname                          internal static fixed bin(15,0)          initial dcl 6-14
rtc_internal_tag                       internal static fixed bin(15,0)          initial dcl 6-34
rtc_mnemonic                           internal static fixed bin(15,0)          initial dcl 6-21
rtc_numlit                             internal static fixed bin(15,0)          initial dcl 6-6
rtc_pararef                            internal static fixed bin(15,0)          initial dcl 6-22
rtc_picstring                          internal static fixed bin(15,0)          initial dcl 6-8
rtc_procdef                            internal static fixed bin(15,0)          initial dcl 6-11
rtc_reportentry                        internal static fixed bin(15,0)          initial dcl 6-26
rtc_reportname                         internal static fixed bin(15,0)          initial dcl 6-24
rtc_resword                            internal static fixed bin(15,0)          initial dcl 6-5
rtc_savedarea                          internal static fixed bin(15,0)          initial dcl 6-19
rtc_sortmerge                          internal static fixed bin(15,0)          initial dcl 6-20
rtc_source                             internal static fixed bin(15,0)          initial dcl 6-10
rtc_unknown1                           internal static fixed bin(15,0)          initial dcl 6-27
rtc_unknown2                           internal static fixed bin(15,0)          initial dcl 6-29
rtc_unknown3                           internal static fixed bin(15,0)          initial dcl 6-30
rtc_unknown4                           internal static fixed bin(15,0)          initial dcl 6-31
rtc_unknown5                           internal static fixed bin(15,0)          initial dcl 6-32
rtc_unknown6                           internal static fixed bin(15,0)          initial dcl 6-33
rtc_userwd                             internal static fixed bin(15,0)          initial dcl 6-12
same_sort_merge_proc                   defined         bit(1)                   dcl 4-215
scratch_dir                            defined         char(168)                dcl 4-207
sect_eop_flag                          defined         fixed bin(17,0)          dcl 4-137
seg_init_flag                          defined         fixed bin(17,0)          dcl 4-133
seg_init_list_ptr                      defined         pointer                  dcl 4-41
stack_off                              defined         fixed bin(17,0)          dcl 4-121
statement_info_ptr                     defined         pointer                  dcl 4-77
string                                                 builtin function         dcl 488
substr                                                 builtin function         dcl 488
sym_base_ptr                           defined         pointer                  dcl 4-17
sym_max                                defined         fixed bin(17,0)          dcl 4-105
sym_wd_off                             defined         fixed bin(17,0)          dcl 4-103
tag_table_max                          defined         fixed bin(17,0)          dcl 4-167
tag_table_ptr                          defined         pointer                  dcl 4-53
temp_lop_token_ptr                     automatic       pointer                  dcl 155
temp_rop_token_ptr                     automatic       pointer                  dcl 156
temp_target_code                       automatic       fixed bin(17,0)          dcl 145
temp_token_area_ptr                    defined         pointer                  dcl 4-43
temp_token_max                         defined         fixed bin(17,0)          dcl 4-169
temp_token_ptr                         defined         pointer                  dcl 4-45
text_base_ptr                          defined         pointer                  dcl 4-9
text_wd_off                            defined         fixed bin(17,0)          dcl 4-91
tlength                                automatic       fixed bin(17,0)          dcl 152
token_block1_ptr                       defined         pointer                  dcl 4-47
token_block2_ptr                       defined         pointer                  dcl 4-49
unspec                                                 builtin function         dcl 488
value_cnt                              defined         fixed bin(17,0)          dcl 4-195
work_token_ptr                         automatic       pointer                  dcl 136
ws_charcnt                             defined         fixed bin(17,0)          dcl 4-187
ws_wdoff                               defined         fixed bin(17,0)          dcl 4-201
xref_bypass                            defined         bit(1)                   dcl 4-213
xref_chain_ptr                         defined         pointer                  dcl 4-75
xref_token_ptr                         defined         pointer                  dcl 4-73

NAMES DECLARED BY EXPLICIT CONTEXT.
cobol_multiply_bin_gen          000010 constant        entry                    external dcl 29
format1_multiply                000050 constant        entry                    internal dcl 189 ref 179
format2_multiply                001004 constant        entry                    internal dcl 356 ref 181
start                           000015 constant        label                    dcl 166

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1642        1712    1443        1652
Length      2330    1443        50         401     177           4

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
cobol_multiply_bin_gen              178 external procedure  is an external procedure.  
format1_multiply                        internal procedure  shares stack frame of external procedure cobol_multiply_bin_gen.  
format2_multiply                        internal procedure  shares stack frame of external procedure cobol_multiply_bin_gen.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 tov_inst                    cobol_multiply_bin_gen
000011 tra_inst                    cobol_multiply_bin_gen
000012 tnz_inst                    cobol_multiply_bin_gen

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
cobol_multiply_bin_gen   000100 input_buff                  cobol_multiply_bin_gen
                         000112 reloc_buff                  cobol_multiply_bin_gen
                         000124 register_struc              cobol_multiply_bin_gen
                         000136 result_token_ptr            cobol_multiply_bin_gen
                         000140 receive_count               cobol_multiply_bin_gen
                         000141 ret_offset                  cobol_multiply_bin_gen
                         000142 ovflo_flag_inst             cobol_multiply_bin_gen
                         000143 ovflo_tag                   cobol_multiply_bin_gen
                         000144 no_ovflo_tag                cobol_multiply_bin_gen
                         000145 imperative_stmt_tag         cobol_multiply_bin_gen
                         000146 ix                          cobol_multiply_bin_gen
                         000150 multiplier_token_ptr        cobol_multiply_bin_gen
                         000152 multiplicand_token_ptr      cobol_multiply_bin_gen
                         000154 ose_flag                    cobol_multiply_bin_gen
                         000156 temp_ptr                    cobol_multiply_bin_gen
                         000160 skipped_some                cobol_multiply_bin_gen
                         000161 call_again                  cobol_multiply_bin_gen
                         000162 input_ptr                   cobol_multiply_bin_gen
                         000164 inst_ptr                    cobol_multiply_bin_gen
                         000166 reloc_ptr                   cobol_multiply_bin_gen
                         000170 eos_ptr                     cobol_multiply_bin_gen

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
cobol_addr                    cobol_alloc$stack             cobol_define_tag              cobol_emit
cobol_fofl_mask$off           cobol_fofl_mask$on            cobol_make_tagref             cobol_make_type9$long_bin
cobol_multiply2_binary        cobol_register$load           cobol_register$release        cobol_store_binary

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
cobol_$next_tag               cobol_$text_wd_off




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     29 000004       166 000015       169 000024       171 000030       173 000031       174 000033       175 000035
    177 000037       179 000041       181 000046       185 000047       189 000050       198 000051       199 000054
    202 000061       209 000067       210 000105       211 000107       213 000124       215 000137       216 000143
    217 000154       220 000156       222 000160       226 000163       228 000201       229 000203       230 000205
    232 000207       233 000211       234 000213       235 000214       237 000216       239 000220       240 000233
    241 000237       244 000254       245 000257       246 000261       248 000263       250 000264       254 000266
    259 000273       261 000305       264 000331       265 000347       267 000352       269 000354       270 000375
    274 000415       276 000433       278 000437       279 000442       282 000453       285 000460       286 000501
    289 000521       290 000530       291 000534       294 000551       297 000560       299 000566       300 000571
    301 000573       306 000575       308 000577       312 000601       313 000606       316 000611       317 000613
    318 000614       319 000615       321 000626       323 000636       324 000642       328 000657       329 000700
    334 000720       341 000732       342 000753       345 000774       352 001003       356 001004       364 001005
    365 001012       369 001016       374 001035       375 001036       379 001045       381 001057       384 001073
    385 001106       389 001111       392 001113       393 001134       398 001154       402 001172       406 001174
    409 001176       411 001211       413 001222       414 001235       418 001240       421 001242       422 001263
    427 001303       433 001321       438 001323       441 001325       444 001332       451 001344       452 001365
    454 001406       460 001415       463 001422       466 001426       467 001431       470 001442


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
