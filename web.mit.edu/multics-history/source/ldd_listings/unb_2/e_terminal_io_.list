	COMPILATION LISTING OF SEGMENT e_terminal_io_
	Compiled by: Multics PL/I Compiler, Release 27d, of October 11, 1982
	Compiled at: Honeywell LISD Phoenix, System M
	Compiled on: 11/30/82  1412.6 mst Tue
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1981 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   * Copyright (c) 1972 by Massachusetts Institute of        *
        9*   * Technology and Honeywell Information Systems, Inc.      *
       10*   *                                                         *
       11*   *********************************************************** */
       12   
       13 
       14 e_terminal_io_: procedure ();
       15 	return;
       16 
       17 /* Procedure to (eventually) contain all of the Emacs terminal IO control
       18*   PL/I logic.
       19*
       20*   23 November 1981, Richard Mark Soley
       21**/
       22 
       23 /* Parameters */
       24 dcl  P_terminal_type character (*) parameter;
       25 
       26 /* System Entries */
       27 dcl  mode_string_$get_mode entry (char(*), char(*), ptr, fixed bin(35));
       28 dcl  ttt_info_$modes entry (char(*), char(*), fixed bin(35));
       29 
       30 /* Builtin */
       31 dcl (addr, translate) builtin;
       32 
       33 /* Automatic */
       34 dcl  code fixed bin (35);
       35 dcl  modes character (512);
       36 dcl  1 MV like mode_value aligned automatic;
       37 
       38 /* Include Files */
  1     1 /*  BEGIN INCLUDE FILE   mode_string_info.incl.pl1							*/
  1     2 
  1     3 /* Structure for parse_mode_string_ JRDavis 20 October 1980
  1     4*   Last modified 12 January 1981 by J. Spencer Love for version 2, make char_value varying string */
  1     5 
  1     6 declare	mode_value_ptr		ptr,
  1     7 	number_of_modes		fixed bin;
  1     8 
  1     9 declare	1 mode_string_info		aligned based (mode_string_info_ptr),
  1    10 	  2 version		fixed bin,
  1    11 	  2 number		fixed bin,
  1    12 	  2 modes			(number_of_modes refer (mode_string_info.number)) like mode_value;
  1    13 
  1    14 declare	mode_string_info_ptr	ptr;
  1    15 
  1    16 declare	1 mode_value		aligned based (mode_value_ptr),
  1    17 	  2 version		fixed bin,
  1    18 	  2 mode_name		char (32) unaligned,
  1    19 	  2 flags,
  1    20 	    3 boolean_valuep	bit (1) unaligned,
  1    21 	    3 numeric_valuep	bit (1) unaligned,
  1    22 	    3 char_valuep		bit (1) unaligned,
  1    23 	    3 boolean_value		bit (1) unaligned,
  1    24 	    3 pad1		bit (32) unaligned,
  1    25 	  2 numeric_value		fixed bin (35),
  1    26 	  2 char_value		char (32) varying,
  1    27 	  2 code			fixed bin (35),
  1    28 	  2 pad2			bit (36);
  1    29 
  1    30 declare	mode_string_info_version_2	fixed bin static options (constant) initial (2),
  1    31 	mode_value_version_3	fixed bin static options (constant) initial (3);
  1    32 
  1    33 /* END INCLUDE FILE   mode_string_info.incl.pl1								*/
       39 
       40 
       41 /* Entry to check TTF and find out if the given terminal type is
       42*   a printing terminal, so don't have to ask user.
       43*   Returns 1 if DEFINITELY a printing terminal; 0 if DEFINITELY non-printing
       44*   OR not certain. */
       45 
       46 check_printing: entry (P_terminal_type) returns (fixed bin);
       47 
       48 	MV.version = mode_value_version_3;
       49 
       50 	call ttt_info_$modes (translate (P_terminal_type,
       51 	     "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "abcdefghijklmnopqrstuvwxyz"),
       52 	     modes, code);
       53 	if code ^= 0 then return (0);
       54 
       55 	call mode_string_$get_mode (modes, "pl", addr (MV), code);
       56 	if code ^= 0 then return (0);
       57 
       58 	if MV.flags.boolean_valuep then do;
       59 	     if MV.flags.boolean_value then return (0);
       60 	     else return (1);
       61 	end;
       62 
       63 	if MV.flags.numeric_valuep & (MV.numeric_value = 0) then return (1);
       64 
       65 	return (0); /* END for check_printing */
       66 
       67 end e_terminal_io_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/30/82  1333.1  e_terminal_io_.pl1                >spec>on>11/30/82>e_terminal_io_.pl1
39           1    03/19/81  1206.8  mode_string_info.incl.pl1         >ldd>include>mode_string_info.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
MV                              000301 automatic       structure                level 1 dcl 36 set ref 55 55
P_terminal_type                        parameter       char                     unaligned dcl 24 ref 46 50 50
addr                                                   builtin function         dcl 31 ref 55 55
boolean_value            11(03) 000301 automatic       bit(1)                   level 3 packed unaligned dcl 36 set ref 59
boolean_valuep           11     000301 automatic       bit(1)                   level 3 packed unaligned dcl 36 set ref 58
code                            000100 automatic       fixed bin(35,0)          dcl 34 set ref 50* 53 55* 56
flags                    11     000301 automatic       structure                level 2 dcl 36
mode_string_$get_mode           000010 constant        entry                    external dcl 27 ref 55
mode_value                             based           structure                level 1 dcl 1-16
mode_value_version_3                   constant        fixed bin(17,0)          initial dcl 1-30 ref 48
modes                           000101 automatic       char(512)                unaligned dcl 35 set ref 50* 55*
numeric_value            12     000301 automatic       fixed bin(35,0)          level 2 dcl 36 set ref 63
numeric_valuep           11(01) 000301 automatic       bit(1)                   level 3 packed unaligned dcl 36 set ref 63
translate                                              builtin function         dcl 31 ref 50 50
ttt_info_$modes                 000012 constant        entry                    external dcl 28 ref 50
version                         000301 automatic       fixed bin(17,0)          level 2 dcl 36 set ref 48*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
mode_string_info                       based           structure                level 1 dcl 1-9
mode_string_info_ptr                   automatic       pointer                  dcl 1-14
mode_string_info_version_2             internal static fixed bin(17,0)          initial dcl 1-30
mode_value_ptr                         automatic       pointer                  dcl 1-6
number_of_modes                        automatic       fixed bin(17,0)          dcl 1-6

NAMES DECLARED BY EXPLICIT CONTEXT.
check_printing                  000055 constant        entry                    external dcl 46
e_terminal_io_                  000034 constant        entry                    external dcl 14

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       546         562     467         556
Length       746     467        14         150      56           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
e_terminal_io_                      252 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
e_terminal_io_           000100 code                        e_terminal_io_
                         000101 modes                       e_terminal_io_
                         000301 MV                          e_terminal_io_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
alloc_cs            call_ext_out_desc   return              signal              shorten_stack       ext_entry
ext_entry_desc

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
mode_string_$get_mode         ttt_info_$modes

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     14 000033        15 000043        46 000051        48 000071        50 000073        53 000126        55 000142
     56 000173        58 000206        59 000211        60 000225        63 000237        65 000256


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
