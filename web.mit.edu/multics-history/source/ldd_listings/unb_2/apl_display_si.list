	COMPILATION LISTING OF SEGMENT apl_display_si
	Compiled by: Multics PL/I Compiler, Release 33e, of October 6, 1992
	Compiled at: CGI                             
	Compiled on: 2000-04-18_1131.70_Tue_mdt
	    Options: optimize map

        1 /* ******************************************************
        2*   *                                                    *
        3*   *                                                    *
        4*   * Copyright (c) 1972 by Massachusetts Institute of   *
        5*   * Technology and Honeywell Information Systems, Inc. *
        6*   *                                                    *
        7*   *                                                    *
        8*   ****************************************************** */
        9 
       10 apl_display_si:
       11 adsi:
       12      procedure;
       13 
       14 /* builtins */
       15 
       16 dcl	(fixed, hbound, lbound, null)
       17 			builtin;
       18 
       19 /* entries */
       20 
       21 dcl	ioa_		entry options (variable);
       22 
       23 /* automatic */
       24 
       25 declare	(p, parse_frame_ptr, rsp)
       26 			ptr;
       27 declare	local		fixed bin;
       28 declare	(i, symbol_number)	fixed bin;
       29 declare	n		fixed bin (21);
       30 declare	rs_type		fixed bin;
       31 
       32 /* named constants (internal static initial) */
       33 
       34 declare	(
       35 	frame_names	dimension (5) char (12) varying
       36 			initial ("suspended", "function", "evaluated", "execute", "save"),
       37 	rs_type_name	dimension (0:11) char (4)
       38 			initial ("eol", "bol", "val", "op", "(", ")", "[", "]sb", "]rk", "", "sub", "bad")
       39 	)		internal static options (constant);
       40 
       41 /* based */
       42 
       43 declare	varying_string	char (n) varying based;
       44 
       45 /* program */
       46 
       47 	do parse_frame_ptr = ws_info.current_parse_frame_ptr repeat parse_frame.last_parse_frame_ptr
       48 	     while (parse_frame_ptr ^= null);
       49 
       50 	     call ioa_ ("^a frame at ^p", frame_names (parse_frame.parse_frame_type), parse_frame_ptr);
       51 
       52 	     go to frame_type (parse_frame.parse_frame_type);
       53 
       54 frame_type (1):					/* suspended */
       55 frame_type (2):					/* function */
       56 frame_type (3):					/* evaluated */
       57 frame_type (4):					/* execute */
       58 	     call ioa_ ("fbp = ^p", parse_frame.function_bead_ptr);
       59 
       60 	     if parse_frame.lexed_function_bead_ptr ^= null
       61 	     then call ioa_ ("lfbp = ^p", parse_frame.lexed_function_bead_ptr);
       62 
       63 	     rsp = parse_frame.reduction_stack_ptr;
       64 
       65 	     call ioa_ ("rsp = ^p", rsp);
       66 
       67 	     if parse_frame.current_parseme ^= 0
       68 	     then do;
       69 		     do i = 1 to parse_frame.current_parseme;
       70 			if rsp -> reduction_stack (i).type < lbound (rs_type_name (*), 1)
       71 			     | rsp -> reduction_stack (i).type > hbound (rs_type_name (*), 1)
       72 			then rs_type = hbound (rs_type_name (*), 1);
       73 			else rs_type = rsp -> reduction_stack (i).type;
       74 
       75 			call ioa_ ("rs(^d) = ^d ^4a ^w ^w ^w", i, rsp -> reduction_stack (i).type,
       76 			     rs_type_name (rs_type), rsp -> reduction_stack (i).bits,
       77 			     rsp -> reduction_stack (i).semantics, rsp -> reduction_stack (i).lexeme);
       78 		     end;
       79 		end;
       80 
       81 	     if parse_frame.current_lexeme ^= 0
       82 	     then call ioa_ ("current lexeme = ^d", parse_frame.current_lexeme);
       83 
       84 	     if parse_frame.current_line_number ^= 0
       85 	     then call ioa_ ("current line = ^d", parse_frame.current_line_number);
       86 
       87 	     call ioa_ ("return point = ^d", parse_frame.return_point);
       88 
       89 	     if parse_frame.put_result ^= 0
       90 	     then call ioa_ ("put result = ^d", parse_frame.put_result);
       91 
       92 	     if parse_frame.print_final_value
       93 	     then call ioa_ ("print final value");
       94 
       95 	     call ioa_ ("ivsp = ^p", parse_frame.initial_value_stack_ptr);
       96 
       97 	     go to sub_type (parse_frame.parse_frame_type);
       98 
       99 sub_type (1):					/* suspended */
      100 sub_type (3):					/* evaluated */
      101 	     p = addr (parse_frame.old_meaning_ptrs (1));
      102 	     n = length (p -> varying_string);
      103 	     call ioa_ ("source = ^a", p -> varying_string);
      104 	     go to end_loop;
      105 
      106 sub_type (2):					/* function */
      107 	     do local = 1 to parse_frame.number_of_ptrs;
      108 		call ioa_ ("old(^d) = ^p", local, parse_frame.old_meaning_ptrs (local));
      109 	     end;
      110 	     go to end_loop;
      111 
      112 sub_type (4):					/* execute */
      113 	     go to end_loop;
      114 
      115 frame_type (5):					/* save frame */
      116 	     save_frame_pointer = parse_frame_ptr;
      117 
      118 	     call ioa_ ("symbol count = ^d", save_frame.saved_symbol_count);
      119 
      120 	     do symbol_number = lbound (save_frame.symbol_list (*), 1) to hbound (save_frame.symbol_list (*), 1);
      121 		call ioa_ ("symbol(^d):", symbol_number);
      122 		call ioa_ ("sp = ^p", save_frame.symbol_list (symbol_number).symbol_pointer);
      123 		call ioa_ ("mp = ^p", save_frame.symbol_list (symbol_number).saved_meaning_pointer);
      124 		call ioa_ ("gmpp = ^p", save_frame.symbol_list (symbol_number).global_meaning_pointer_pointer);
      125 	     end;
      126 
      127 end_loop:
      128 	     call ioa_ ("");
      129 	end;
      130 
      131 /* include files */
      132 
  1     1 /* ====== BEGIN INCLUDE SEGMENT	apl_number_data.incl.pl1 ================================== */
  1     2 
  1     3 /*
  1     4*   This include file contains information about the machine representation of numbers.
  1     5*   In all programs numbers should simply be declared 'float'.
  1     6*   All default statements should be in this include file.
  1     7*
  1     8*   This is the binary version.  The manifest constant Binary should be used by programs
  1     9*   that need to know whether we are using binary or decimal.
  1    10* */
  1    11 
  1    12 /* format: style3,initlm0,idind30 */
  1    13 
  1    14 default (float & ^decimal & ^binary & ^precision & ^constant) float binary (63);
  1    15 
  1    16 declare	(
  1    17 	TheBiggestNumberWeveGot	float initial (0.1701411834604692317e+39),
  1    18 	TheSmallestNumberWeveGot	float initial (.1469367938527859385e-38),
  1    19 	Binary			bit (1) aligned initial ("1"b)
  1    20 	)			internal static options (constant);
  1    21 
  1    22 /* Number of characters in a number datum entry; used for copying float number arrays as strings.
  1    23*   (Obsolete! use array copies!) */
  1    24 
  1    25 declare	NumberSize		fixed binary precision (4) internal static initial (8);
  1    26 
  1    27 /* ------ END INCLUDE SEGMENT		apl_number_data.incl.pl1 ---------------------------------- */
      133 
  2     1 /* ====== BEGIN INCLUDE SEGMENT	apl_bead_format.incl.pl1 ================================== */
  2     2 
  2     3 declare 1 general_bead  		aligned based,	/* The Venerable Bead		*/
  2     4 	2 type 			unaligned,
  2     5 	  3 bead_type		unaligned,
  2     6 	    4 operator		bit (1),		/* ON if operator bead		*/
  2     7 	    4 symbol		bit (1),		/* ON if symbol bead		*/
  2     8 	    4 value		bit (1),		/* ON if value bead			*/
  2     9 	    4 function		bit (1),		/* ON if function bead		*/
  2    10 	    4 group		bit (1),		/* ON if group bead			*/
  2    11 	    4 label		bit (1),		/* ON if label bead			*/
  2    12 	    4 shared_variable	bit (1),		/* ON if shared variable bead 	*/
  2    13 	    4 lexed_function	bit (1),		/* ON if lexed function bead  	*/
  2    14 	  3 data_type		unaligned,
  2    15 	    4 list_value		bit (1),		/* ON if a list value bead		*/
  2    16 	    4 character_value	bit (1),		/* ON if a character value bead	*/
  2    17 	    4 numeric_value		bit (1),		/* ON if a numeric value bead		*/
  2    18 	    4 integral_value	bit (1),		/* ON if an integral value bead	*/
  2    19 	    4 zero_or_one_value	bit (1),		/* ON if a boolean value bead		*/
  2    20 	    4 complex_value		bit (1),		/* ON if a complex, numeric value bead   */
  2    21 	  3 unused_bits		bit (4) unaligned,	/* pad to 18 bits (for future use)	*/
  2    22 	2 size			bit (18) unaligned,	/* Number of words this bead occupies
  2    23*						   (used by bead storage manager)	*/
  2    24 	2 reference_count 		fixed binary (29);	/* Number of pointers which point
  2    25*						   to this bead (used by bead manager)	*/
  2    26 
  2    27 
  2    28 /* constant strings for initing type field in various beads */
  2    29 
  2    30 declare (
  2    31 	operator_type		init("100000000000000000"b),
  2    32 	symbol_type		init("010000000000000000"b),
  2    33     	value_type		init("001000000000000000"b),
  2    34 	function_type		init("000100000000000000"b),
  2    35 	group_type		init("000010000000000000"b),
  2    36 	label_type		init("001001000011000000"b),
  2    37 	shared_variable_type	init("001000100000000000"b),
  2    38 	lexed_function_type		init("000000010000000000"b),
  2    39 
  2    40 	list_value_type		init("000000001000000000"b),
  2    41 	character_value_type 	init("001000000100000000"b),
  2    42 	numeric_value_type		init("001000000010000000"b),
  2    43 	integral_value_type		init("001000000011000000"b),
  2    44 	zero_or_one_value_type	init("001000000011100000"b),
  2    45 	complex_value_type		init("001000000000010000"b),
  2    46 
  2    47 	not_integer_mask		init("111111111110011111"b),		/* to clear integral, zero_or_one bits */
  2    48 	not_zero_or_one_mask	init("111111111111011111"b)		/* to clear zero_or_one bit */
  2    49         ) bit(18) internal static;
  2    50 
  2    51 /* ------ END INCLUDE SEGMENT		apl_bead_format.incl.pl1 ---------------------------------- */
      134 
  3     1 /* ====== BEGIN INCLUDE SEGMENT	apl_function_bead.incl.pl1 ================================ */
  3     2 
  3     3 /* This bead is used by apl to store the source code for user-defined functions */
  3     4 
  3     5 declare	1 function_bead		aligned based,
  3     6 
  3     7 	  2 header		aligned like general_bead,
  3     8 
  3     9 	  2 lexed_function_bead_pointer unaligned pointer, /* null if unlexed or has errors, else -> lexed code */
  3    10 	  2 class			fixed bin,	/* 0=normal, 1=locked, 2=external zfn, 3=mfn, 4=dfn */
  3    11 	  2 stop_control_pointer	unaligned ptr,	/* points to stop value bead, or null (no stop control) */
  3    12 	  2 trace_control_pointer	unaligned ptr,	/* points to trace value bead, or null (no trace control) */
  3    13 	  2 text_length		fixed bin(21),	/* length of function text */
  3    14 	  2 text			aligned char(data_elements refer (function_bead.text_length));
  3    15 						/* the user's code exactly as typed in */
  3    16 
  3    17 /* ------ END INCLUDE SEGMENT		apl_function_bead.incl.pl1 -------------------------------- */
      135 
  4     1 /* ====== BEGIN INCLUDE SEGMENT	apl_list_bead.incl.pl1 ==================================== */
  4     2 
  4     3 declare	n_members fixed bin,
  4     4 
  4     5 	1 list_bead		aligned based,
  4     6 	  2 header		aligned like general_bead,
  4     7 	  2 number_of_members	fixed bin,
  4     8 	  2 members		dimension (n_members refer (list_bead.number_of_members)) aligned,
  4     9 	    3 member_ptr		unaligned pointer,
  4    10 	    3 bits		unaligned like operator_bead.bits_for_parse;
  4    11 
  4    12 /* ------ END INCLUDE SEGMENT		apl_list_bead.incl.pl1 ------------------------------------ */
      136 
  5     1 /* ====== BEGIN INCLUDE SEGMENT	apl_operator_bead.incl.pl1 ================================ */
  5     2 
  5     3 declare
  5     4 	1 operator_bead		aligned based,
  5     5 
  5     6 	  2 type			unaligned like general_bead.type,
  5     7 
  5     8 	  2 bits_for_lex		unaligned,
  5     9 	    3 allow_brackets	bit(1),		/* operator may have dimension info in brackets */
  5    10 	    3 allow_product		bit(1),		/* operator may be used in inner and outer product */
  5    11 	    3 allow_reduction	bit(1),		/* operator may be used in reduction and scan */
  5    12 	    3 special_assignment	bit(1),		/* doesn't use standard assignment operator */
  5    13 	    3 ignores_assignment	bit(1),		/* assignment has no effect */
  5    14 	    3 allow_subscripted_assignment
  5    15 				bit(1),		/* system variable that can be subscripted assigned */
  5    16 	    3 pad			bit(12),
  5    17 
  5    18 	  2 bits_for_parse		unaligned,
  5    19 	    3 stop_trace_control	bit(1),		/* next lexeme is function being stopped/traced
  5    20*						   (op1 tells which) */
  5    21 	    3 quad		bit(1),		/* this is a quad type */
  5    22 	    3 system_variable	bit(1),		/* this is a system variable, not an op */
  5    23 	    3 dyadic		bit(1),		/* operator may be dyadic */
  5    24 	    3 monadic		bit(1),		/* operator may be monadic */
  5    25 	    3 function		bit(1),		/* operator is a user defined function */
  5    26 	    3 semantics_valid	bit(1),		/* if semantics has been set */
  5    27 	    3 has_list		bit(1),		/* semantics is a list */
  5    28 	    3 inner_product		bit(1),		/* op2 is valid */
  5    29 	    3 semantics_on_stack	bit(1),		/* semantics points to value stack */
  5    30 	    3 is_external_function	bit(1),		/* semantics points to function bead for ext function */
  5    31 	    3 pad			bit(7),
  5    32 	    3 op2			fixed bin(8) unaligned,	/* secondary operator code */
  5    33 	    3 op1			fixed bin(8) unaligned,	/* primary operator code */
  5    34 	  2 type_code		fixed bin;	/* for parse */
  5    35 
  5    36 /* ------ END INCLUDE SEGMENT		apl_operator_bead.incl.pl1 -------------------------------- */
      137 
  6     1 /* ====== BEGIN INCLUDE SEGEMENT	apl_operators_argument.incl.pl1 =========================== */
  6     2 
  6     3 declare	1 operators_argument	aligned,
  6     4 	  2 operands (2)		aligned,		/* these are the operands to the operator to be executed.
  6     5*						   if operand (1).value is null, operator is monadic */
  6     6 	    3 value		pointer unaligned,	/* a pointer to the value bead for this operand */
  6     7 	    3 on_stack		bit (1) aligned,	/* ON if this value resides on the value stack */
  6     8 	  2 operator		aligned,		/* information about the operator to be executed */
  6     9 	    3 dimension		fixed bin,	/* (optional) dimension along which to operate */
  6    10 	    3 padding		bit (18) unaligned,	/* unused part of operator bead */
  6    11 	    3 op2			fixed bin (8) unal,	/* a modifier for op1, or a 2nd operator if inner product */
  6    12 	    3 op1			fixed bin (8) unal,	/* code for the actual operator to be executed */
  6    13 	  2 result		pointer unal,	/* (output) set by operator to point to result bead in stack */
  6    14 	  2 error_code		fixed bin (35),	/* (output) set before signaling apl_operator_error_ */
  6    15 	  2 where_error		fixed bin;	/* parseme index of where error was - parse sets to operator */
  6    16 
  6    17 /* ------ END INCLUDE SEGMENT		apl_operators_argument.incl.pl1 --------------------------- */
      138 
  7     1 /* ====== BEGIN INCLUDE SEGMENT	apl_parse_frame.incl.pl1 ================================== */
  7     2 
  7     3 declare	1 parse_frame		aligned based (parse_frame_ptr),
  7     4 	  2 last_parse_frame_ptr	ptr unaligned,	/* pointer to last parse frame, or null */
  7     5 	  2 parse_frame_type	fixed bin,	/* suspended, function, eval input, etc. */
  7     6 	  2 function_bead_ptr	ptr unaligned,	/* ptr to function bead */
  7     7 	  2 lexed_function_bead_ptr	ptr unaligned,	/* ptr to lexed function bead */
  7     8 	  2 reduction_stack_ptr	ptr unaligned,	/* ptr to reduction stack for this frame */
  7     9 	  2 current_parseme		fixed bin,	/* element of reduction stack that is top of stack */
  7    10 	  2 current_lexeme		fixed bin,	/* element number of current lexeme */
  7    11 	  2 current_line_number	fixed bin,	/* line number being executed */
  7    12 	  2 return_point		fixed bin,	/* where to join the reductions on return */
  7    13 	  2 put_result		fixed bin,	/* where to put the value when returning to this frame */
  7    14 	  2 print_final_value	bit(1) aligned,	/* if true, print final value on line */
  7    15 	  2 initial_value_stack_ptr	ptr unaligned,	/* for cleaning up the value stack */
  7    16 	  2 number_of_ptrs		fixed bin,	/* number of old meaning ptrs */
  7    17 	  2 old_meaning_ptrs	dim (number_of_ptrs refer (parse_frame.number_of_ptrs)) ptr unaligned;
  7    18 						/* old meanings for local variables. */
  7    19 
  7    20 declare	number_of_ptrs fixed bin;
  7    21 
  7    22 declare	(suspended_frame_type init (1),		/* for comparison with parse frame type */
  7    23 	function_frame_type init (2),
  7    24 	evaluated_frame_type init (3),
  7    25 	execute_frame_type init (4),
  7    26 	save_frame_type init (5)
  7    27 	) fixed bin internal static options (constant);
  7    28 
  7    29 declare	reductions_pointer pointer;
  7    30 
  7    31 declare
  7    32 	1 reduction_stack		aligned dim (1000) based (reductions_pointer),
  7    33 	  2 type			fixed bin,	/* type of parseme */
  7    34 	  2 bits			unaligned like operator_bead.bits_for_parse,
  7    35 	  2 semantics		ptr unaligned,
  7    36 	  2 lexeme		fixed bin,
  7    37 
  7    38 	1 reduction_stack_for_op	aligned dim (1000) based (reductions_pointer),
  7    39 	  2 type			fixed bin,
  7    40 	  2 bits			unaligned like operator_bead.bits_for_parse,
  7    41 	  2 semantics		fixed bin,
  7    42 	  2 lexeme		fixed bin,
  7    43 
  7    44 	(eol_type init(0),					/* parseme types - end of line */
  7    45 	bol_type init(1),					/* begining of line */
  7    46 	val_type init(2),					/* value */
  7    47 	op_type init(3),					/* op */
  7    48 	open_paren_type init(4),
  7    49 	close_paren_type init(5),
  7    50 	open_bracket_type init(6),
  7    51 	close_subscript_type init(7),
  7    52 	close_rank_type init(8),
  7    53 	semi_colon_type init(9),
  7    54 	diamond_type init (10),
  7    55 	subscript_type init (11)) fixed bin internal static options (constant);
  7    56 
  7    57 /* ------ END INCLUDE SEGMENT		apl_parse_frame.incl.pl1 ---------------------------------- */
      139 
  8     1 /* ====== BEGIN INCLUDE FILE		apl_save_frame.incl.pl1 =================================== */
  8     2 
  8     3 declare	save_frame_pointer pointer unaligned;
  8     4 
  8     5 declare 1 save_frame 		aligned based (save_frame_pointer),
  8     6 	2 last_frame_pointer 	ptr unal,		/* pointer to last parse frame		*/
  8     7 	2 frame_type 		fixed bin,	/* = save_frame_type			*/
  8     8 	2 saved_symbol_count	fixed bin (29),	/* number of symbols in saved frame		*/
  8     9 	2 symbol_list		aligned dimension (total_symbols refer (save_frame.saved_symbol_count)),
  8    10 	  3 symbol_pointer		ptr unal,		/* pointer to each symbol bead (never null)	*/
  8    11 	  3 saved_meaning_pointer	ptr unal,		/* ptr to local meaning at time save_frame is created */
  8    12 						/* (if null, local meaning is null)		*/
  8    13 	  3 global_meaning_pointer_pointer		/* pointer to the meaning pointer which 	*/
  8    14 				ptr unal;		/* represents the global meaning of this symbol	*/
  8    15 						/* (if null, either symbol was never localized,	*/
  8    16 						/* or save_frame was created by apl_load_command_,*/
  8    17 						/* and saved_meaning_ptr determines whether it    */
  8    18 						/* was localized)				*/
  8    19 
  8    20 /* ------ END INCLUDE FILE		apl_save_frame.incl.pl1 ----------------------------------- */
      140 
  9     1 /* ====== BEGIN INCLUDE SEGMENT	apl_symbol_bead.incl.pl1 ================================== */
  9     2 
  9     3 /* Explanation of fields:
  9     4*   symbol_bead.hash_link_pointer	points to next symbol in same hash bucket in the symbol table.
  9     5*   symbol_bead.meaning_pointer	points to current "value" of this name:
  9     6*				   =  null	  => unused (e.g. undefined variable)
  9     7*				   -> group bead      => group name
  9     8*				   -> value bead      => variable with a value
  9     9*				   -> function bead   => function name
  9    10*				   -> label bead      => localized label value
  9    11*				   -> shared var bead => shared variable	*/
  9    12 
  9    13 declare 1 symbol_bead 		aligned based,
  9    14 	2 header	 		aligned like general_bead,
  9    15 	2 hash_link_pointer		pointer unaligned,
  9    16 	2 meaning_pointer		pointer unaligned,
  9    17 	2 name_length 		fixed binary,
  9    18 	2 name			character (0 refer (symbol_bead.name_length)) unaligned;
  9    19 
  9    20 /* ------ END INCLUDE SEGMENT		apl_symbol_bead.incl.pl1 ---------------------------------- */
      141 
 10     1 /* ====== BEGIN INCLUDE SEGMENT	apl_value_bead.incl.pl1 =================================== */
 10     2 
 10     3 declare
 10     4 	number_of_dimensions fixed bin,
 10     5 
 10     6 	1 value_bead		aligned based,
 10     7 	2 header			aligned like general_bead,
 10     8 	2 total_data_elements	fixed binary (21),	/* length of ,[value] in APL		*/
 10     9 	2 rhorho			fixed binary,	/* number of dimensions of value	*/
 10    10 	2 data_pointer		pointer unaligned,	/* packed pointer to the data in value	*/
 10    11 	2 rho			fixed binary (21) dimension (number_of_dimensions refer (value_bead.rhorho));
 10    12 						/* dimensions of value (zero-origin)	*/
 10    13 
 10    14 
 10    15 declare 1 character_data_structure	aligned based,	/* alignment trick for PL/I compiler	*/
 10    16 	2 character_datum		character (1) unaligned dimension (0:data_elements - 1);
 10    17 						/* actual elements of character array	*/
 10    18 
 10    19 declare   character_string_overlay	character (data_elements) aligned based;
 10    20 						/* to overlay on above structure	 */
 10    21 
 10    22 
 10    23 declare   numeric_datum		float aligned dimension (0:data_elements - 1) based;
 10    24 						/* actual elements of numeric array	*/
 10    25 
 10    26 declare	complex_datum		complex float aligned dimension (0:data_elements -1) based;
 10    27 
 10    28 declare	MAX_VALUE_BEAD_SIZE		fixed bin (19) init (261120) int static options (constant);
 10    29 
 10    30 /* ------ END INCLUDE SEGMENT		apl_value_bead.incl.pl1 ----------------------------------- */
      142 
 11     1 /* ====== BEGIN INCLUDE SEGMENT	apl_ws_info.incl.pl1 ====================================== */
 11     2 
 11     3 /* This structure contains all of the global data (or pointers to it) for the APL subsystem */
 11     4 
 11     5 /* automatic */
 11     6 
 11     7 declare	ws_info_ptr ptr initial (apl_static_$ws_info_ptr.static_ws_info_ptr);
 11     8 
 11     9 /* external static */
 11    10 
 11    11 declare	1 apl_static_$ws_info_ptr	external static aligned structure,
 11    12 	  2 static_ws_info_ptr	unaligned pointer;
 11    13 
 11    14 /* based */
 11    15 
 11    16 declare	1 ws_info			aligned based (ws_info_ptr),
 11    17 	  2 version_number		fixed bin,	/* version of this structure (3) */
 11    18 	  2 switches		unaligned,	/* mainly ws parameters */
 11    19 	    3 long_error_mode	bit,		/* if 1, long Multics format, else APL/360 format */
 11    20 	    3 debug_mode		bit,		/* if 1, system error causes escape to command level */
 11    21 	    3 canonicalize_mode	bit,		/* if 1, the editor canonicalizes user input */
 11    22 	    3 restrict_exec_command	bit,		/* if 1, the )EXEC command may not be used */
 11    23 	    3 restrict_debug_command	bit,		/* if 1, the )DEBUG command may not be used */
 11    24 	    3 restrict_external_functions
 11    25 				bit,		/* if 1, the )ZFN, )MFN, and )DFN commands may not be used */
 11    26 	    3 restrict_load		bit,		/* if 1, the )LOAD and )COPY commands may not be used */
 11    27 	    3 restrict_load_directory	bit,		/* if 1, no directory allowed in )LOAD or )COPY pathnames */
 11    28 	    3 restrict_save		bit,		/* if 1, the )SAVE command may not be used */
 11    29 	    3 restrict_save_directory	bit,		/* if 1, no directory allowed in )SAVE pathnames */
 11    30 	    3 off_hold		bit,		/* if 1, )OFF HOLD was typed, else just )OFF */
 11    31 	    3 transparent_to_signals	bit,		/* if 1, any conditions slip right past APL */
 11    32 	    3 meter_mode		bit,		/* if 1, metering may be done, else speed is all-important */
 11    33 	    3 restrict_msg_command	bit,		/* if 1, the )MSG command may not be used. */
 11    34 	    3 compatibility_check_mode
 11    35 				bit,		/* if 1, check for incompatible operators */
 11    36 	    3 no_quit_handler	bit,		/* if 1, do not trap QUITs. */
 11    37 						/* remaining 20 bits not presently used */
 11    38 
 11    39 	  2 values,				/* attributes of the workspace */
 11    40 	    3 digits		fixed bin,	/* number of digits of precision printed on output */
 11    41 	    3 width		fixed bin,	/* line length for formatted output */
 11    42 	    3 index_origin		fixed bin,	/* the index origin (0 or 1) */
 11    43 	    3 random_link		fixed bin(35),	/* seed for random number generator */
 11    44 	    3 fuzz		float,		/* comparison tolerance (relative fuzz) */
 11    45 	    3 float_index_origin	float,		/* the index origin	in floating point */
 11    46 	    3 number_of_symbols	fixed bin,	/* the number of symbol_beads currently in existence */
 11    47 	    3 maximum_value_stack_size
 11    48 				fixed bin (18),	/* maximum number of words in one segment of value stack */
 11    49 
 11    50 	  2 pointers,				/* pointers to various internal tables */
 11    51 	    3 symbol_table_ptr	unaligned pointer,	/* -> symbol_table (apl_symbol_table.incl.pl1) */
 11    52 	    3 current_parse_frame_ptr	unaligned pointer,	/* -> topmost parse frame */
 11    53 	    3 value_stack_ptr	unaligned pointer,	/* -> next free location on value stack */
 11    54 	    3 alloc_free_info_ptr	unaligned pointer,	/* -> apl_storage_mngr_ data (apl_storage_system_data.incl.pl1) */
 11    55 
 11    56 	  2 time_invoked		fixed bin(71),	/* clock time that APL was entered */
 11    57 	  2 integer_fuzz		float,		/* the absolute fuzz used in checking for integers */
 11    58 	  2 user_number		fixed bin(35),	/* number under which the user is signed on */
 11    59 	  2 latent_expression	unaligned pointer,	/* -> value_bead for QuadLX */
 11    60 	  2 lock			char(32),		/* the lock currently set on this workspace (password) */
 11    61 	  2 wsid			char(100),	/* the workspace identification: name, number name, or clear ws */
 11    62 	  2 last_error_code		fixed bin(35),	/* last code passed to apl_error_ */
 11    63 	  2 signoff_lock		character (32),
 11    64 
 11    65 	  2 interrupt_info		aligned,		/* bits used by apl_interpreter_ to tell when to abort */
 11    66 	    3 dont_interrupt_parse	bit,		/* if 1, don't do a dirty stop because the parser is running */
 11    67 	    3 dont_interrupt_operator	bit,		/* if 1, don't do a dirty stop because an operator is running */
 11    68 	    3 dont_interrupt_storage_manager		/* if 1, don't stop because apl_storage_mngr_ is */
 11    69 				bit,		/*       munging his tables */
 11    70 	    3 unused_interrupt_bit	bit,		/* not presently used */
 11    71 	    3 dont_interrupt_command	bit,
 11    72 	    3 can_be_interrupted	bit,		/* if 1, OK to do a clean stop (we are between lines, reading) */
 11    73 	    3 clean_interrupt_pending	bit,		/* interrupt occured, break cleanly (between lines) */
 11    74 	    3 dirty_interrupt_pending	bit,		/* interrupt occured, break as soon as not inhibited */
 11    75 
 11    76 	  2 user_name		char (32),	/* process group id of user */
 11    77 	  2 immediate_input_prompt	char (32) varying,	/* normal input */
 11    78 	  2 evaluated_input_prompt	char (32) varying,	/* quad input */
 11    79 	  2 character_input_prompt	char (32) varying,	/* quad-quote input */
 11    80 	  2 vcpu_time		aligned,
 11    81 	    3 total		fixed bin (71),
 11    82 	    3 setup		fixed bin (71),
 11    83 	    3 parse		fixed bin (71),
 11    84 	    3 lex			fixed bin (71),
 11    85 	    3 operator		fixed bin (71),
 11    86 	    3 storage_manager	fixed bin (71),
 11    87 	  2 output_info		aligned,		/* data pertaining to output buffer */
 11    88 	    3 output_buffer_ptr	unal ptr,		/* ptr to output buffer */
 11    89 	    3 output_buffer_len	fixed bin (21),	/* length (bytes) of output buffer */
 11    90 	    3 output_buffer_pos	fixed bin (21),	/* index of next byte to write in */
 11    91 	    3 output_buffer_ll	fixed bin (21),	/* print positions used up so far */
 11    92 	  2 tab_width		fixed bin (21);	/* number of columns a tabs moves cursor */
 11    93 
 11    94 declare	output_buffer char (ws_info.output_buffer_len) based (ws_info.output_buffer_ptr);
 11    95 
 11    96 /* internal static */
 11    97 
 11    98 declare	max_parse_stack_depth fixed bin int static init(64536);
 11    99 
 11   100 /* ------ END INCLUDE SEGMENT		apl_ws_info.incl.pl1 -------------------------------------- */
      143 
      144      end /* apl_display_si */;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    04/18/00  1131.7  apl_display_si.pl1                >udd>sm>ds>w>ml>apl_display_si.pl1
133          1    03/27/82  0529.8  apl_number_data.incl.pl1          >ldd>incl>apl_number_data.incl.pl1
134          2    03/27/82  0538.5  apl_bead_format.incl.pl1          >ldd>incl>apl_bead_format.incl.pl1
135          3    03/27/82  0538.7  apl_function_bead.incl.pl1        >ldd>incl>apl_function_bead.incl.pl1
136          4    03/27/82  0538.7  apl_list_bead.incl.pl1            >ldd>incl>apl_list_bead.incl.pl1
137          5    03/27/82  0539.0  apl_operator_bead.incl.pl1        >ldd>incl>apl_operator_bead.incl.pl1
138          6    03/27/82  0539.0  apl_operators_argument.incl.pl1   >ldd>incl>apl_operators_argument.incl.pl1
139          7    03/27/82  0539.0  apl_parse_frame.incl.pl1          >ldd>incl>apl_parse_frame.incl.pl1
140          8    03/27/82  0539.1  apl_save_frame.incl.pl1           >ldd>incl>apl_save_frame.incl.pl1
141          9    03/27/82  0539.2  apl_symbol_bead.incl.pl1          >ldd>incl>apl_symbol_bead.incl.pl1
142         10    03/27/82  0539.2  apl_value_bead.incl.pl1           >ldd>incl>apl_value_bead.incl.pl1
143         11    03/27/82  0539.2  apl_ws_info.incl.pl1              >ldd>incl>apl_ws_info.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
apl_static_$ws_info_ptr         000012 external static structure                level 1 dcl 11-11
bits                      1            based           structure                array level 2 packed packed unaligned dcl 7-31 set
                                                                                  ref 75*
bits_for_parse            1            based           structure                level 2 packed packed unaligned dcl 5-3
current_lexeme            6            based           fixed bin(17,0)          level 2 dcl 7-3 set ref 81 81*
current_line_number       7            based           fixed bin(17,0)          level 2 dcl 7-3 set ref 84 84*
current_parse_frame_ptr
                         15            based           pointer                  level 3 packed packed unaligned dcl 11-16 ref 47
current_parseme           5            based           fixed bin(17,0)          level 2 dcl 7-3 ref 67 69
frame_names                     000025 constant        varying char(12)         initial array dcl 34 set ref 50*
function_bead_ptr         2            based           pointer                  level 2 packed packed unaligned dcl 7-3 set ref 54*
general_bead                           based           structure                level 1 dcl 2-3
global_meaning_pointer_pointer
                          5            based           pointer                  array level 3 packed packed unaligned dcl 8-5 set
                                                                                  ref 124*
hbound                                                 builtin function         dcl 16 ref 70 70 120
i                               000107 automatic       fixed bin(17,0)          dcl 28 set ref 69* 70 70 73 75* 75 75 75 75*
initial_value_stack_ptr
                         13            based           pointer                  level 2 packed packed unaligned dcl 7-3 set ref 95*
ioa_                            000010 constant        entry                    external dcl 21 ref 50 54 60 65 75 81 84 87 89 92 95
                                                                                  103 108 118 121 122 123 124 127
last_parse_frame_ptr                   based           pointer                  level 2 packed packed unaligned dcl 7-3 ref 129
lbound                                                 builtin function         dcl 16 ref 70 120
lexed_function_bead_ptr
                          3            based           pointer                  level 2 packed packed unaligned dcl 7-3 set ref 60
                                                                                  60*
lexeme                    3            based           fixed bin(17,0)          array level 2 dcl 7-31 set ref 75*
local                           000106 automatic       fixed bin(17,0)          dcl 27 set ref 106* 108* 108*
n                               000111 automatic       fixed bin(21,0)          dcl 29 set ref 102* 103
null                                                   builtin function         dcl 16 ref 47 60
number_of_ptrs           14            based           fixed bin(17,0)          level 2 dcl 7-3 ref 106
old_meaning_ptrs         15            based           pointer                  array level 2 packed packed unaligned dcl 7-3 set
                                                                                  ref 99 108*
operator_bead                          based           structure                level 1 dcl 5-3
p                               000100 automatic       pointer                  dcl 25 set ref 99* 102 103
parse_frame                            based           structure                level 1 dcl 7-3
parse_frame_ptr                 000102 automatic       pointer                  dcl 25 set ref 47* 47* 50 50* 52 54 60 60 63 67 69
                                                                                  81 81 84 84 87 89 89 92 95 97 99 106 108 115* 129
parse_frame_type          1            based           fixed bin(17,0)          level 2 dcl 7-3 ref 50 52 97
pointers                 14            based           structure                level 2 dcl 11-16
print_final_value        12            based           bit(1)                   level 2 dcl 7-3 ref 92
put_result               11            based           fixed bin(17,0)          level 2 dcl 7-3 set ref 89 89*
reduction_stack                        based           structure                array level 1 dcl 7-31
reduction_stack_ptr       4            based           pointer                  level 2 packed packed unaligned dcl 7-3 ref 63
return_point             10            based           fixed bin(17,0)          level 2 dcl 7-3 set ref 87*
rs_type                         000112 automatic       fixed bin(17,0)          dcl 30 set ref 70* 73* 75
rs_type_name                    000011 constant        char(4)                  initial array packed unaligned dcl 34 set ref 70 70
                                                                                  70 75*
rsp                             000104 automatic       pointer                  dcl 25 set ref 63* 65* 70 70 73 75 75 75 75
save_frame                             based           structure                level 1 dcl 8-5
save_frame_pointer              000113 automatic       pointer                  packed unaligned dcl 8-3 set ref 115* 118 120 120
                                                                                  122 123 124
saved_meaning_pointer
                          4            based           pointer                  array level 3 packed packed unaligned dcl 8-5 set
                                                                                  ref 123*
saved_symbol_count        2            based           fixed bin(29,0)          level 2 dcl 8-5 set ref 118* 120
semantics                 2            based           pointer                  array level 2 packed packed unaligned dcl 7-31 set
                                                                                  ref 75*
static_ws_info_ptr              000012 external static pointer                  level 2 packed packed unaligned dcl 11-11 ref 11-7
symbol_list               3            based           structure                array level 2 dcl 8-5 set ref 120 120
symbol_number                   000110 automatic       fixed bin(17,0)          dcl 28 set ref 120* 121* 122 123 124*
symbol_pointer            3            based           pointer                  array level 3 packed packed unaligned dcl 8-5 set
                                                                                  ref 122*
type                                   based           structure                level 3 in structure "value_bead" packed packed
                                                                                  unaligned dcl 10-3 in procedure "adsi"
type                                   based           fixed bin(17,0)          array level 2 in structure "reduction_stack"
                                                                                  dcl 7-31 in procedure "adsi" set ref 70 70 73 75*
type                                   based           structure                level 3 in structure "symbol_bead" packed packed
                                                                                  unaligned dcl 9-13 in procedure "adsi"
type                                   based           structure                level 3 in structure "function_bead" packed packed
                                                                                  unaligned dcl 3-5 in procedure "adsi"
type                                   based           structure                level 3 in structure "list_bead" packed packed
                                                                                  unaligned dcl 4-3 in procedure "adsi"
type                                   based           structure                level 2 in structure "general_bead" packed packed
                                                                                  unaligned dcl 2-3 in procedure "adsi"
varying_string                         based           varying char             dcl 43 set ref 102 103*
ws_info                                based           structure                level 1 dcl 11-16
ws_info_ptr                     000114 automatic       pointer                  initial dcl 11-7 set ref 47 11-7*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
Binary                                 internal static bit(1)                   initial dcl 1-16
MAX_VALUE_BEAD_SIZE                    internal static fixed bin(19,0)          initial dcl 10-28
NumberSize                             internal static fixed bin(4,0)           initial dcl 1-25
TheBiggestNumberWeveGot                internal static float bin(63)            initial dcl 1-16
TheSmallestNumberWeveGot               internal static float bin(63)            initial dcl 1-16
bol_type                               internal static fixed bin(17,0)          initial dcl 7-31
character_data_structure               based           structure                level 1 dcl 10-15
character_string_overlay               based           char                     dcl 10-19
character_value_type                   internal static bit(18)                  initial packed unaligned dcl 2-30
close_paren_type                       internal static fixed bin(17,0)          initial dcl 7-31
close_rank_type                        internal static fixed bin(17,0)          initial dcl 7-31
close_subscript_type                   internal static fixed bin(17,0)          initial dcl 7-31
complex_datum                          based           complex float bin(63)    array dcl 10-26
complex_value_type                     internal static bit(18)                  initial packed unaligned dcl 2-30
diamond_type                           internal static fixed bin(17,0)          initial dcl 7-31
eol_type                               internal static fixed bin(17,0)          initial dcl 7-31
evaluated_frame_type                   internal static fixed bin(17,0)          initial dcl 7-22
execute_frame_type                     internal static fixed bin(17,0)          initial dcl 7-22
fixed                                                  builtin function         dcl 16
function_bead                          based           structure                level 1 dcl 3-5
function_frame_type                    internal static fixed bin(17,0)          initial dcl 7-22
function_type                          internal static bit(18)                  initial packed unaligned dcl 2-30
group_type                             internal static bit(18)                  initial packed unaligned dcl 2-30
integral_value_type                    internal static bit(18)                  initial packed unaligned dcl 2-30
label_type                             internal static bit(18)                  initial packed unaligned dcl 2-30
lexed_function_type                    internal static bit(18)                  initial packed unaligned dcl 2-30
list_bead                              based           structure                level 1 dcl 4-3
list_value_type                        internal static bit(18)                  initial packed unaligned dcl 2-30
max_parse_stack_depth                  internal static fixed bin(17,0)          initial dcl 11-98
n_members                              automatic       fixed bin(17,0)          dcl 4-3
not_integer_mask                       internal static bit(18)                  initial packed unaligned dcl 2-30
not_zero_or_one_mask                   internal static bit(18)                  initial packed unaligned dcl 2-30
number_of_dimensions                   automatic       fixed bin(17,0)          dcl 10-3
number_of_ptrs                         automatic       fixed bin(17,0)          dcl 7-20
numeric_datum                          based           float bin(63)            array dcl 10-23
numeric_value_type                     internal static bit(18)                  initial packed unaligned dcl 2-30
op_type                                internal static fixed bin(17,0)          initial dcl 7-31
open_bracket_type                      internal static fixed bin(17,0)          initial dcl 7-31
open_paren_type                        internal static fixed bin(17,0)          initial dcl 7-31
operator_type                          internal static bit(18)                  initial packed unaligned dcl 2-30
operators_argument                     automatic       structure                level 1 dcl 6-3
output_buffer                          based           char                     packed unaligned dcl 11-94
reduction_stack_for_op                 based           structure                array level 1 dcl 7-31
reductions_pointer                     automatic       pointer                  dcl 7-29
save_frame_type                        internal static fixed bin(17,0)          initial dcl 7-22
semi_colon_type                        internal static fixed bin(17,0)          initial dcl 7-31
shared_variable_type                   internal static bit(18)                  initial packed unaligned dcl 2-30
subscript_type                         internal static fixed bin(17,0)          initial dcl 7-31
suspended_frame_type                   internal static fixed bin(17,0)          initial dcl 7-22
symbol_bead                            based           structure                level 1 dcl 9-13
symbol_type                            internal static bit(18)                  initial packed unaligned dcl 2-30
val_type                               internal static fixed bin(17,0)          initial dcl 7-31
value_bead                             based           structure                level 1 dcl 10-3
value_type                             internal static bit(18)                  initial packed unaligned dcl 2-30
zero_or_one_value_type                 internal static bit(18)                  initial packed unaligned dcl 2-30

NAMES DECLARED BY EXPLICIT CONTEXT.
adsi                            000225 constant        entry                    external dcl 10
apl_display_si                  000235 constant        entry                    external dcl 10
end_loop                        001131 constant        label                    dcl 127 ref 104 110 112
frame_type                      000000 constant        label                    array(5) dcl 54 ref 52
sub_type                        000005 constant        label                    array(4) dcl 99 ref 97

NAMES DECLARED BY CONTEXT OR IMPLICATION.
addr                                                   builtin function         ref 99
length                                                 builtin function         ref 102

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1220        1234    1147        1230
Length      1634    1147        14         364      50           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
adsi                                136 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
adsi                     000100 p                           adsi
                         000102 parse_frame_ptr             adsi
                         000104 rsp                         adsi
                         000106 local                       adsi
                         000107 i                           adsi
                         000110 symbol_number               adsi
                         000111 n                           adsi
                         000112 rs_type                     adsi
                         000113 save_frame_pointer          adsi
                         000114 ws_info_ptr                 adsi

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
ioa_

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
apl_static_$ws_info_ptr




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
11    7 000217        10 000224        47 000243        50 000252        52 000302        54 000305        60 000324
     63 000352        65 000355        67 000374        69 000377        70 000405        73 000417        75 000420
     78 000464        81 000466        84 000514        87 000537        89 000563        92 000607        95 000626
     97 000650        99 000653       102 000655       103 000657       104 000703       106 000704       108 000713
    109 000744       110 000746       112 000747       115 000750       118 000751       120 000776       121 001007
    122 001031       123 001057       124 001102       125 001127       127 001131       129 001142       144 001145


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
