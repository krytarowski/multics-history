	COMPILATION LISTING OF SEGMENT gtss_filact_funct19_
	Compiled by: Multics PL/I Compiler, Release 28d, of October 4, 1983
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 12/10/84  1326.7 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   *                                                         *
        4*   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        5*   *                                                         *
        6*   *                                                         *
        7*   *********************************************************** */
        8 
        9 /* *************************************************************
       10*   *						   *
       11*   * Copyright (c) 1979 by Honeywell Information Systems, Inc. *
       12*   *						   *
       13*   ************************************************************* */
       14 
       15 gtss_filact_funct19_: proc (mcp_val, high_val, gseg_val, arg_ptr_val, buffer_ptr_val, code);
       16 
       17 /**	Derail FILACT function 19 (ZZZZZ).
       18*
       19*	All parameters are input parameters except code.
       20*
       21*	code retuurned 0 => Successful.
       22*	code returned 4 => GCOS err4 (see gtss_pnterr structure).
       23*	code returned other => multics error code.
       24*
       25*   Authors: Robert J. Grimes	Created
       26*   -	  Albert N. Kepner	  1978
       27*   -	  Robert M. May
       28*   -	  David B. Ward
       29*   Change:  Dave Ward	02/24/79 $db debug switch.
       30*   Change:  Ron Barstad       06/11/82  Fixed stringsize condition in assignment of entry_name to aft_name
       31***/
       32 dcl  mcp_val                  ptr parm;
       33 dcl  high_val                 bit(18)parm;
       34 dcl  gseg_val                 ptr parm;
       35 dcl  arg_ptr_val              ptr parm;
       36 dcl  buffer_ptr_val           ptr parm;
       37 dcl  code                     fixed bin(35)parm;
       38 	mcp = mcp_val;
       39 	high_b = high_val;
       40 	high_i = fixed (high_b, 18);
       41 	gseg = gseg_val;
       42 	arg_ptr = arg_ptr_val;
       43 	buffer_ptr = buffer_ptr_val;
       44 
       45 /** Following 2 statements provided to
       46*    assure no compilation errors. Code involved
       47*    is being replaced. **/
       48 	altname_ptr = null ();
       49 	cat_filedescr_name_offset = "0"b;
       50 
       51 	code = 0;					/* Successful. */
       52 
       53 
       54 /**	Obtain the argument list. **/
       55 	if					/* (filact_args.arglist_address < low_b) | */
       56 	(fixed (filact_args.arglist_address, 18)+2 > high_i) then do;
       57 return_err4:   ;
       58 	     code = 4;
       59 	     return;
       60 	end;
       61 	arglist_ptr = addrel (gseg, filact_args.arglist_address);
       62 
       63 	call validate_status (arglist.status_address, status_ptr); /* and also for status word */
       64 
       65 	call build_cat_file_descriptors ();		/* build_ the pathnames from the cat file descriptors */
       66 
       67 	arglist.record_address = "0"b;		/* set to eof for now */
       68 	status_word.status = "400000"b3;
       69 
       70 ret:	;
       71 	return;
       72 
       73 
       74 
       75 /*		System Master Catalog Query		*/
       76 
       77 
  1     1 /* BEGIN INCLUDE FILE gtss_filact_intp3.incl.pl1 */
  1     2 /*
  1     3*  Created: (Wardd Multics)  10/05/78 1601.4 mst Thu 
  1     4**/
  1     5 get_faulty_cat_file_entry: proc returns (bit (18));
  1     6 
  1     7 /**	Locate offset to catalog file description entry
  1     8*	that caused search failure locating Multics entry.
  1     9***/
  1    10 	     return (cat_filedescr_name_offset);
  1    11 	end					/* get_faulty_cat_file_entry */;
  1    12 /*   END INCLUDE FILE gtss_filact_intp3.incl.pl1 */
       78 
       79 
  2     1 /* BEGIN INCLUDE FILE gtss_filact_intp1.incl.pl1 */
  2     2 /*
  2     3*  Created: (Wardd Multics)  10/05/78 1600.9 mst Thu 
  2     4**/
  2     5 validate_status: proc (status_address, sp);
  2     6 
  2     7 dcl  status_address           bit (18)parm;
  2     8 dcl  sp                       ptr parm;
  2     9 dcl  status_pointer           ptr init(null());
  2    10 
  2    11 
  2    12 /**	Assure 2 word status not above memory.	**/
  2    13 	     if (status_address >= high_b) then goto return_err4;
  2    14 
  2    15 /**	Assure status words and arglist do not overlap.	**/
  2    16 	     if (fixed(status_address,18)+1) >= fixed(filact_args.L_arglist,18) &
  2    17 	     fixed (status_address, 18) <= (fixed (filact_args.L_arglist, 18)+ 1) then goto return_err4;
  2    18 
  2    19 /**	Obtain pointer to status words.	**/
  2    20 	     sp, status_pointer = addrel (gseg, status_address);
  2    21 	     unspec (status_pointer -> status_word) = "0"b;
  2    22 	     return;
  2    23 
  2    24 dcl 1 filact_args		aligned based(arg_ptr), /* 1st word only. */
  2    25     2 zero		bit(18)unal,
  2    26     2 L_arglist		bit(18)unal;
  2    27 	end					/* validate_status */;
  2    28 /*   END INCLUDE FILE gtss_filact_intp1.incl.pl1 */
       80 
       81 
       82 build_cat_file_descriptors: proc ();
       83 
       84 /**	Obtain descriptor.		**/
       85 	     if (arglist.descriptor_address > high_b) |
       86 	     ((fixed (arglist.descriptor_address, 18) +4) > high_i) then goto return_err4;
       87 	     descriptor_ptr = addrel (gseg, arglist.descriptor_address);
       88 
       89 /* set up pointer to cat file descriptor */
       90 /* look for the minus_one for the userid */
       91 	     if substr (descriptor (0).name, 1, 36) = minus_one then do;
       92 
       93 /* set the userid to that of the default logon */
       94 		descriptor (0).name = gtss_ust.lid;
       95 		descriptor (0).password = (12)"20"b3;
       96 	     end;
       97 
       98 	     ascii_cat_file.nn = 1;
       99 	     call gtss_bcd_ascii_$lc (
      100 		addr (descriptor (0).name)
      101 		, 12
      102 		, addr (ascii_cat_file.name (1))
      103 		);
      104 
      105 	     call gtss_expand_pathname_ (
      106 		addr (ascii_cat_file)
      107 		, dir_name
      108 		, entry_name			/* (not used) */
      109 		, code
      110 		);
      111 	     if code ^= 0 then do;
      112 fail_build:	;
      113 /**MORE**/
      114 		status_word.status = "400100"b3;
      115 		goto ret;
      116 	     end;
      117 
      118 /**	Obtain deblanked path_name.	**/
      119 	     k = search (dir_name, " ")-1;
      120 	     if k<0 then k = length (dir_name);
      121 	     path_name = substr (dir_name, 1, k);
      122 
      123 
      124 /* look for the minus_one for end of cat file descriptors and check address */
      125 /* check for nothing given */
      126 	     if substr (descriptor (1).name, 1, 36) = minus_one then do; /* look for minus_one then (-1) */
      127 		status_word.pd = get_faulty_cat_file_entry ();
      128 		status_word.status = "400500"b3;
      129 		return;
      130 	     end;
      131 
      132 	     do i = 1 to hbound (descriptor, 1);
      133 		if substr (descriptor (i+1).name, 1, 36) = minus_one /* look for minus_one (-1) */ then goto fence_found_1;
      134 		call gtss_bcd_ascii_$lc (addr (descriptor (i).name), 12, addr (entry_name)); /* convert the path
      135*						   element to ascii */
      136 		k = search (entry_name, " ") -1;	/* look for end of name */
      137 		if k < 0 then k = length (entry_name);	/* if no blanks found, then set to max size */
      138 		path_name = path_name || ">" || substr (entry_name, 1, k); /* start concatination */
      139 		if (fixed (arglist.descriptor_address, 18) + (i+1)*4) > high_i then goto return_err4;
      140 	     end;
      141 
      142 /* Too many levels given - give him an error */
      143 	     status_word.pd = get_faulty_cat_file_entry ();
      144 	     status_word.status = "400500"b3;
      145 	     return;
      146 
      147 fence_found_1: ;
      148 	     FMS_data_block.restore_switch = "0"b;	/* indicate the file name is in bcd */
      149 	     descriptor_address = rel (addr (descriptor (i).name)); /* find a address of the
      150*						   last entry on the descriptor stack */
      151 	     if substr (filact_args.altname_address, 1, 1) = "1"b then
      152 		call gtss_bcd_ascii_$lc (addr (descriptor (i).name), 12, addr (entry_name)); /* convert the path
      153*						   element to ascii */
      154 	     else
      155 	     if filact_args.altname_address = "0"b then do;
      156 		if function_no = 3 | function_no = 4 then do; /* keeping up with the inconsistencies of tss */
      157 		     addr (entry_name) -> two_words = addr (descriptor (i).name) -> two_words; /* get the name
      158*						   in ascii directly */
      159 		     entry_name = translate (entry_name
      160 			, "abcdefghijklmnopqrstuvwxyz"
      161 			, "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      162 			);			/* put name to lower case only */
      163 		     FMS_data_block.restore_switch = "1"b; /* indicate the file name is in ascii */
      164 		end;
      165 		else
      166 		call gtss_bcd_ascii_$lc (addr (descriptor (i).name), 12, addr (entry_name)); /* convert the path
      167*						   element to ascii */
      168 	     end;
      169 	     else
      170 	     if substr (filact_args.altname_address, 1, 1) = "0"b then do;
      171 		if function_no = 4 then		/* for altname processing */
      172 		     if substr (altname, 1, 4) ^= four_NULS then do; /* look also for empty altname given */
      173 			call gtss_bcd_ascii_$lc (addr (descriptor (i).name), 12, addr (entry_name));
      174 						/* convert the path element to ascii */
      175 
      176 			aft_name = translate (altname
      177 			     , "abcdefghijklmnopqrstuvwxyz"
      178 			     , "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      179 			     );
      180 						/* put name to lower case only */
      181 
      182 		     end;
      183 		     else do;
      184 			addr (entry_name) -> two_words = addr (descriptor (i).name) -> two_words; /* get the name in ascii directly */
      185 			entry_name = translate (entry_name
      186 			     , "abcdefghijklmnopqrstuvwxyz"
      187 			     , "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      188 			     );
      189 			FMS_data_block.restore_switch = "1"b; /* indicate the file name is in ascii */
      190 			aft_name = substr(entry_name,1,8);	/* save for access function 4 */
      191 		     end;
      192 	     end;
      193 	     else do;
      194 		addr (entry_name) -> two_words = addr (descriptor (i).name) -> two_words; /* get the name in ascii directly */
      195 		entry_name = translate (entry_name
      196 		     , "abcdefghijklmnopqrstuvwxyz"
      197 		     , "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      198 		     );
      199 						/* Translate entry name to lower case. */
      200 	     end;
      201 	     k = search (entry_name, " ") -1;		/* look for end of name */
      202 	     if k < 0 then k = length (entry_name);	/* if no blanks found, then set to max size */
      203 	     dir_name = path_name;			/* save path_name up to this point for append_branchx */
      204 	     path_name = path_name || ">" || substr (entry_name, 1, k); /* start concatination */
      205 	     /* arglist.record_address = rel (addr (FMS_data_block.record_type)); */ /* indicate the info
      206*						   is placed at the beginning of the buffer */
      207 	     FMS_data_block.file_id = substr (entry_name, 1, 8); /* put in the ascii name of the file or catalog */
      208 	     return;
      209 	end					/* build_cat_file_description */;
      210 
      211 /** Declarations for gtss_drl_filact_:
      212*     IDENTIFIER		ATTRIBUTES	**/
      213 dcl  file_name_in_ascii       bit(1);
      214 dcl  bit72                    bit(72)aligned based;
      215 dcl  nic                      fixed bin(24);
      216 dcl  p                        ptr init(null());
      217 dcl  access_mode              bit (6);
      218 dcl  addr                     builtin;
      219 dcl  addrel                   builtin;
      220 dcl  aft_code                 fixed bin (35);
      221 dcl  aft_name                 char (8);
      222 dcl  altname                  char (8) aligned based (altname_ptr);
      223 dcl  altname_ptr              ptr init(null());
      224 dcl  append_mode              bit (36) static int options(constant)init ("100000000000"b3);
      225 dcl  arglist_ptr              ptr init(null());
      226 dcl  arg_ptr                  ptr init(null());
      227 dcl  attribute_segment_ptr    ptr init(null());
      228 dcl  bit                      builtin;
      229 dcl  bit_count                fixed bin (24);
      230 dcl  cat_filedescr_name_offset bit(18);
      231 dcl  cdate                    fixed bin (71);
      232 dcl  clim                     float bin;
      233 dcl  crf                      fixed bin(24);
      234 dcl  csp                      float bin;
      235 dcl  delete_$path             entry (char (*), char (*), bit (6), char (*), fixed bin (35));
      236 dcl  descriptor_address       bit (18);
      237 dcl  descriptor_ptr           ptr init(null());
      238 dcl  dir_name                 char (168);
      239 dcl  divide                   builtin;
      240 dcl  entry_name               char (12) init (" ");
      241 dcl  error_table_$incorrect_access fixed bin (35) ext;
      242 dcl  error_table_$moderr      fixed bin (35) ext;
      243 dcl  error_table_$namedup     fixed bin (35) ext;
      244 dcl  error_table_$noentry     fixed bin (35) ext;
      245 dcl  error_table_$no_dir      fixed bin (35) ext;
      246 dcl  error_table_$not_seg_type fixed bin(35)ext;
      247 dcl  error_table_$segknown    fixed bin (35) ext;
      248 dcl  error_table_$seg_not_found fixed bin (35) ext;
      249 dcl  error_table_$nomatch     fixed bin (35) ext;
      250 dcl  execute_mode             bit (36) static int options(constant)init ("200000000000"b3);
      251 dcl  file_no                  fixed bin (24);
      252 dcl  fixed                    builtin;
      253 dcl  FMS_block_ptr            ptr init(null());
      254 dcl  four_NULS                char (4)static int options (constant)init ((4)" ") /* 4 octal 000's */;
      255 dcl  gseg                     ptr init(null());
      256 dcl  gtss_fail                condition;
      257 dcl  have_file                bit(1);
      258 dcl  hbound                   builtin;
      259 dcl  hcs_$add_acl_entries     entry (char (*), char (*), ptr, fixed bin(24), fixed bin (35));
      260 dcl  hcs_$add_dir_acl_entries entry (char (*), char (*), ptr, fixed bin, fixed bin (35));
      261 dcl  hcs_$add_inacl_entries   entry (char (*), char (*), ptr, fixed bin, fixed bin (3), fixed bin (35));
      262 dcl  hcs_$append_branchx      entry (char (*), char (*), fixed bin (5), (3) fixed bin (3), char (*), fixed bin (1), fixed bin (1), fixed bin (24), fixed bin (35));
      263 dcl  hcs_$delentry_file       entry(char(*),char(*),fixed bin(35));
      264 dcl  hcs_$initiate            entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
      265 dcl  hcs_$make_seg            entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
      266 dcl  hcs_$quota_read          entry (char (*), fixed bin (18), fixed bin (71), bit (36) aligned, bit (36), fixed bin (1), fixed bin (18), fixed bin (35));
      267 dcl  hcs_$status_long         entry (char (*), char (*), fixed bin (1), ptr,ptr, fixed bin (35));
      268 dcl  high_b                   bit(18);
      269 dcl  high_i                   fixed bin(18)aligned;
      270 dcl  i                        fixed bin(24);
      271 dcl  increment                fixed bin(24);
      272 dcl  ioa_                     entry options (variable);
      273 dcl  k                        fixed bin(24);
      274 dcl  l                        fixed bin(24);
      275 dcl  lbound                   builtin;
      276 dcl  low_b                    bit(18)aligned static int options(constant)init("000147"b3) /* 103 dec. */;
      277 dcl  low_i                    fixed bin(18)aligned static int options(constant)init(103);
      278 dcl  max_options              fixed bin static int options(constant)init (100);
      279 dcl  max_resources            fixed bin static int options(constant)init (99999);
      280 dcl  minus_one                bit (36) static int options(constant)init ((36)"1"b);
      281 dcl  mlim                     float bin;
      282 dcl  mod                      builtin;
      283 dcl  modify_mode              bit (36) static int options(constant)init ("200000000000"b3);
      284 dcl  msp                      float bin;
      285 dcl  multics_access_mode      fixed bin(5);
      286 dcl  path_name                char (168) varying;
      287 dcl  person_id                char (22);
      288 dcl  quota                    fixed bin (18);
      289 dcl  read_mode                bit (36) static int options(constant)init ("400000000000"b3);
      290 dcl  rel                      builtin;
      291 dcl  rings                    (3) fixed bin (3) static int options(constant)init (4, 4, 4);
      292 dcl  seg_acl_count            fixed bin;
      293 dcl  shlim                    (0:7) float bin;
      294 dcl  shsp                     (0:7) float bin;
      295 dcl  size                     builtin;
      296 dcl  smc_entry_ptr            ptr init(null());
      297 dcl  sons_lvid                bit (36);
      298 dcl  status                   fixed bin (24);
      299 dcl  status_mode              bit (36) static int options(constant)init ("400000000000"b3);
      300 dcl  status_ptr               ptr init(null());
      301 dcl  substr                   builtin;
      302 dcl  switches                 bit (6) static int options(constant)init ("37"b3);
      303 dcl  tacc_sw                  fixed bin (1);
      304 dcl  trp                      fixed bin (71);
      305 dcl  tup                      bit (36) aligned;
      306 dcl  two_words                bit (72) based;
      307 dcl  type                     fixed bin (2);
      308 dcl  used                     fixed bin (18);
      309 dcl  user_attribute_word      bit (35);
      310 dcl  user_info_$limits        entry (float bin, float bin, fixed bin (71), fixed bin(24), (0:7) float bin, float bin, float bin, (0:7) float bin);
      311 dcl  words380                 bit(13680)aligned based;
      312 dcl  write_mode               bit (36) static int options(constant)init ("100000000000"b3);
      313 
      314 dcl 1 status2		aligned based(status_ptr)
      315 ,     3 word1
      316 ,       4 status_code	bit(12)unal
      317 ,       4 zero1		bit(06)unal
      318 ,       4 zero2		bit(18)unal
      319 ,     3 word2
      320 ,       4 L_bcd_message	bit(18)unal
      321 ,       4 message_words	fixed bin(17)unal
      322 ;
      323 
      324 dcl 1 bcdname aligned based(p),
      325     2 first8 bit(48)unal,
      326     2 last4  bit(24)unal;
      327 
      328 /** Structures:	**/
      329 dcl 1 filact_args aligned based (arg_ptr),
      330     2 altname_address bit (18) unaligned,
      331     2 arglist_address bit (18) unaligned,
      332     2 function_no fixed bin (17) unaligned,
      333     2 buffer_address bit (18) unaligned;
      334 
      335 
      336 dcl 1 arglist aligned based (arglist_ptr),
      337     2 status_address bit (18) unaligned,
      338     2 record_address bit (18) unaligned,
      339     2 descriptor_address bit (18) unaligned,
      340     2 permissions_address bit (18) unaligned,
      341     2 options_address bit (18) unaligned,
      342     2 fill1 bit (18) unaligned;
      343 
      344 
      345 dcl 1 lib_arglist aligned based (arglist_ptr),
      346     2 status_address bit (18) unaligned,
      347     2 fill bit (17) unaligned,
      348     2 mode bit (1) unaligned,
      349     2 fill1 bit (24) unaligned,
      350     2 file_code bit (12) unaligned;
      351 
      352 
      353 
      354 dcl 1 status_word aligned based (status_ptr),
      355     2 status bit (18) unaligned,
      356     2 pd bit (18) unaligned,
      357     2 null_bit bit (1) unaligned,
      358     2 user_attributes bit (35) unaligned;
      359 
      360 
      361 
      362 dcl 1 descriptor (0:8) aligned based (descriptor_ptr),
      363     2 name bit (72) aligned,
      364     2 password bit (72) aligned;
      365 
      366 dcl 1 FMS_block aligned based (FMS_block_ptr),
      367     2 address bit (18) unaligned;
      368 
      369 
      370 dcl 1 FMS_data_block aligned based (buffer_ptr),
      371     2 restore_switch bit (36) aligned,
      372     2 file_id char (8) aligned,
      373     2 fill (3:24) bit (36) aligned,
      374     2 record_type fixed bin (5) unaligned,
      375     2 fill2 bit (30) unaligned;
      376 
      377 dcl 1 permissions aligned based (permissions_ptr),
      378     2 read bit (1) unaligned,
      379     2 write bit (1) unaligned,
      380     2 append bit (1) unaligned,
      381     2 execute bit (1) unaligned,
      382     2 purge bit (1) unaligned,
      383     2 modify bit (1) unaligned,
      384     2 lock bit (1) unaligned,
      385     2 fill bit (1) unaligned,
      386     2 create bit (1) unaligned,
      387     2 recovery bit (1) unaligned,
      388     2 fill1 bit (8) unaligned,
      389     2 test bit (1) unaligned,
      390     2 query bit (1) unaligned,
      391     2 fill2 bit (16) unaligned;
      392 
      393 
      394 
      395 dcl 1 options aligned based (options_ptr),
      396     2 contigous bit (1) unaligned,
      397     2 random bit (1) unaligned,
      398     2 TSS_create bit (1) unaligned,
      399     2 I_D_S bit (1) unaligned,
      400     2 llink_allocated bit (1) unaligned,
      401     2 nostructured_device bit (1) unaligned,
      402     2 fill1 bit (1) unaligned,
      403     2 attribute_present bit (1) unaligned,
      404     2 user_attribute bit (1) unaligned,
      405     2 fill2 bit (4) unaligned,
      406     2 FMS_protection bit (1) unaligned,
      407     2 fill3 bit (4) unaligned,
      408     2 device_name bit (18) unaligned,
      409     2 initial_size bit (18) unaligned,
      410     2 max_size bit (18) unaligned,
      411     2 specific_permissions (0:max_options) aligned,
      412       3 userid bit (72) aligned,
      413       3 read bit (1) unaligned,
      414       3 write bit (1) unaligned,
      415       3 append bit (1) unaligned,
      416       3 execute bit (1) unaligned,
      417       3 purge bit (1) unaligned,
      418       3 modify bit (1) unaligned,
      419       3 lock bit (1) unaligned,
      420       3 fill bit (1) unaligned,
      421       3 create bit (1) unaligned,
      422       3 recovery bit (1) unaligned;
      423 
      424 
      425 dcl 1 smc_arglist aligned based (arglist_ptr),
      426     2 status_address bit (18) unaligned,
      427     2 entry_address bit (18) unaligned;
      428 
      429 
      430 
      431 
      432 dcl 1 smc_entry aligned based (smc_entry_ptr),
      433     2 userid bit (72) unaligned,
      434     2 fill1 bit (36) aligned,
      435     2 fill2 bit (36) aligned,
      436     2 space_time fixed bin (35) aligned,
      437     2 llinks_used fixed bin (17) unaligned,
      438     2 llinks_allowed fixed bin (17) unaligned,
      439     2 fill3 bit (36) aligned,
      440     2 resources fixed bin (17) unaligned,
      441     2 lodx bit (1) unaligned,
      442     2 cardin bit (1) unaligned,
      443     2 talk bit (1) unaligned,
      444     2 lods bit (1) unaligned,
      445     2 fill4 bit (2) unaligned,
      446     2 urgency bit (12) unaligned,
      447     2 password bit (72) unaligned,
      448     2 reserved bit (36) aligned,
      449     2 fill5 bit (10) unaligned,
      450     2 resources_used fixed bin (25) unaligned;
      451 
  3     1 /* BEGIN INCLUDE FILE gtss_ust_ext_.incl.pl1 */
  3     2 /* UST: User Status Table 
  3     3*   definitions based on 
  3     4*   System Tables, Order number DD14-01E, January 1981
  3     5*   Section 15, Time Sharing System
  3     6*
  3     7*   Authors: Robert J. Grimes	Created
  3     8*   -	  Albert N. Kepner	  1978
  3     9*   -	  Robert M. May
  3    10*   -	  David B. Ward
  3    11*   Change:  Dave Ward	02/23/79 Level 4 numbering.
  3    12*   Change:  Ron Barstad  83-07-12 Repaired damaged formating and word offset comments
  3    13*                                  Brought up to 4JS3 functionality
  3    14**/
  3    15 /* octal word offsets of entries */
  3    16 dcl 1 gtss_ust_ext_$ust aligned ext,
  3    17       3 gtss_ust,
  3    18 /* 0-1  */	4 lid		bit (72),
  3    19 /* 2    */	4 lstp		bit (36),
  3    20 /* 3    */	4 ltin		bit (36),
  3    21 /* 4    */	4 lstio,
  3    22 			5 no_of_chars_by_8  fixed bin (18) uns unal,
  3    23 			5 no_of_disk_io     fixed bin (18) uns unal,
  3    24 /* 5    */	4 lsnub		bit (36),
  3    25 /* 6-7  */	4 lchg		bit (72),
  3    26 /* 10   */	4 lbuf,
  3    27 			5 address		bit (18)unaligned,
  3    28 			5 tally		bit (1)unaligned,
  3    29 			5 terminal_type	bit (5)unaligned,
  3    30 			5 station_id	bit (12)unaligned,
  3    31 /* 11-12 */	4 liost (0:1)	bit (36),
  3    32 /* 13   */	4 lcc		bit (36),
  3    33 /* 14   */	4 lback,
  3    34 			5 fill1		bit (18) unaligned,
  3    35 			5 gwake		fixed bin (17) unaligned,
  3    36 /* 15   */	4 lflag,
  3    37 			5 mp_list		bit (18) unaligned,
  3    38 			5 flags unaligned,
  3    39 				6 b18		bit (1) unaligned,
  3    40 				6 b19		bit (1) unaligned,
  3    41 				6 b20		bit (1) unaligned,
  3    42 				6 b21		bit (1) unaligned,
  3    43 				6 b22		bit (1) unaligned,
  3    44 				6 b23		bit (1) unaligned,
  3    45 				6 b24		bit (1) unaligned,
  3    46 				6 b25		bit (1) unaligned,
  3    47 				6 b26		bit (1) unaligned,
  3    48 				6 b27		bit (1) unaligned,
  3    49 				6 b28		bit (1) unaligned,
  3    50 				6 b29		bit (1) unaligned,
  3    51 				6 b30		bit (1) unaligned,
  3    52 				6 b31		bit (1) unaligned,
  3    53 				6 b32		bit (1) unaligned,
  3    54 				6 b33		bit (1) unaligned,
  3    55 				6 b34		bit (1) unaligned,
  3    56 				6 b35		bit (1) unaligned,
  3    57 /* 16   */	4 lkdss		bit (36),
  3    58 /* 17   */	4 lfile,
  3    59 			5 program_stack	fixed bin (17) unal,
  3    60 			5 file_list_ptr	bit (18) unal,
  3    61 /* 20   */	4 lttys		bit (36),
  3    62 /* 21   */	4 lswth,
  3    63 			5 b0		bit (1) unaligned,
  3    64 			5 b1		bit (1) unaligned,
  3    65 			5 b2		bit (1) unaligned,
  3    66 			5 b3		bit (1) unaligned,
  3    67 			5 b4		bit (1) unaligned,
  3    68 			5 b5		bit (1) unaligned,
  3    69 			5 b6		bit (1) unaligned,
  3    70 			5 b7		bit (1) unaligned,
  3    71 			5 b8		bit (1) unaligned,
  3    72 			5 b9		bit (1) unaligned,
  3    73 			5 b10		bit (1) unaligned,
  3    74 			5 b11		bit (1) unaligned,
  3    75 			5 b12		bit (1) unaligned,
  3    76 			5 b13		bit (1) unaligned,
  3    77 			5 b14		bit (1) unaligned,
  3    78 			5 b15		bit (1) unaligned,
  3    79 			5 b16		bit (1) unaligned,
  3    80 			5 b17		bit (1) unaligned,
  3    81 			5 b18		bit (1) unaligned,
  3    82 			5 b19		bit (1) unaligned,
  3    83 			5 b20		bit (1) unaligned,
  3    84 			5 b21		bit (1) unaligned,
  3    85 			5 b22		bit (1) unaligned,
  3    86 			5 b23		bit (1) unaligned,
  3    87 			5 b24		bit (1) unaligned,
  3    88 			5 b25		bit (1) unaligned,
  3    89 			5 b26		bit (1) unaligned,
  3    90 			5 b27		bit (1) unaligned,
  3    91 			5 b28		bit (1) unaligned,
  3    92 			5 b29		bit (1) unaligned,
  3    93 			5 b30		bit (1) unaligned,
  3    94 			5 b31		bit (1) unaligned,
  3    95 			5 b32		bit (1) unaligned,
  3    96 			5 b33		bit (1) unaligned,
  3    97 			5 b34		bit (1) unaligned,
  3    98 			5 b35		bit (1) unaligned,
  3    99 /* 22   */	4 lsize,
  3   100 			5 bar		fixed bin (17) unaligned,
  3   101 			5 limit		bit (18) unaligned,
  3   102 /* 23... */	4 lswap,
  3   103 			5 fill		bit (18) unal,
  3   104 			5 size		bit (18) unal,
  3   105 /* ...24 */	4 transfer_cell	bit (36) unal,
  3   106 /* 25   */	4 lerrm		bit (36),
  3   107 /* 26-37 */	4 lcfil (0:9)	bit (36),
  3   108 /* 40   */	4 lsybc,
  3   109 			5 b0_17		fixed bin (17) unaligned,
  3   110 			5 b18_35		fixed bin (17) unaligned,
  3   111 /* 41-42 */	4 lstem (0:1)	bit (36),
  3   112 /* 43    */	4 lcals,
  3   113 			5 b0_17		fixed bin (17) unaligned,
  3   114 			5 b18_35		bit (18) unaligned,
  3   115 /* 44-51 */	4 subsystems (3),
  3   116 			5 content_lswap,
  3   117 				6 fill		bit (18) unal,
  3   118 				6 size		bit (18) unal,
  3   119 			5 tally_address	fixed bin (17) unaligned,
  3   120 			5 ss_flags	bit (18) unaligned,
  3   121 /* 52   */	4 ltalc,
  3   122 			5 tod		fixed bin (17) unaligned,
  3   123 			5 startup		fixed bin (17) unaligned,
  3   124 /* 53   */	4 lspts		fixed bin (35),
  3   125 /* 54   */	4 lflg2,
  3   126 			5 b0		bit (1) unaligned,
  3   127 			5 b1		bit (1) unaligned,
  3   128 			5 b2		bit (1) unaligned,
  3   129 			5 b3		bit (1) unaligned,
  3   130 			5 b4		bit (1) unaligned,
  3   131 			5 b5		bit (1) unaligned,
  3   132 			5 b6		bit (1) unaligned,
  3   133 			5 b7		bit (1) unaligned,
  3   134 			5 b8		bit (1) unaligned,
  3   135 			5 b9		bit (1) unaligned,
  3   136 			5 b10		bit (1) unaligned,
  3   137 			5 b11		bit (1) unaligned,
  3   138 			5 b12		bit (1) unaligned,
  3   139 			5 b13		bit (1) unaligned,
  3   140 			5 b14		bit (1) unaligned,
  3   141 			5 b15		bit (1) unaligned,
  3   142 			5 b16		bit (1) unaligned,
  3   143 			5 b17		bit (1) unaligned,
  3   144 			5 b18		bit (1) unaligned,
  3   145 			5 b19		bit (1) unaligned,
  3   146 			5 b20		bit (1) unaligned,
  3   147 			5 b21		bit (1) unaligned,
  3   148 			5 b22		bit (1) unaligned,
  3   149 			5 b23		bit (1) unaligned,
  3   150 			5 b24		bit (1) unaligned,
  3   151 			5 b25		bit (1) unaligned,
  3   152 			5 b26		bit (1) unaligned,
  3   153 			5 b27		bit (1) unaligned,
  3   154 			5 b28		bit (1) unaligned,
  3   155 			5 b29		bit (1) unaligned,
  3   156 			5 b30		bit (1) unaligned,
  3   157 			5 b31		bit (1) unaligned,
  3   158 			5 b32		bit (1) unaligned,
  3   159 			5 b33		bit (1) unaligned,
  3   160 			5 b34		bit (1) unaligned,
  3   161 			5 b35		bit (1) unaligned,
  3   162 /* 55-60 */	4 lsftm (0:3)	bit (36),
  3   163 /* 61    */	4 lsprt		fixed bin (35),
  3   164 /* 62    */	4 ltrm		bit (36),
  3   165 /* 63    */	4 linno		fixed bin (35),
  3   166 /* 64    */	4 lincr		fixed bin (35),
  3   167 /* 65    */	4 ltdes		bit (36),
  3   168 /* 66    */	4 lbptr		bit (36),
  3   169 /* 67    */	4 lpptr,
  3   170 			5 last_file_pat_ptr	bin (18) uns unal,
  3   171 			5 lpptr_reserved	bin (18) uns unal,
  3   172 /* 70    */	4 lsclp		bit (36),
  3   173 /* 71    */	4 limit		fixed bin (35),
  3   174 /* 72    */	4 lacpt,
  3   175 			5 jout_pat_offset	bit (18) unal,
  3   176 			5 permissions unal,
  3   177 				6 lodx		bit (1) unal,
  3   178 				6 cardin		bit (1) unal,
  3   179 				6 talk		bit (1) unal,
  3   180 				6 lods		bit (1) unal,
  3   181 			5 cardin_urgency	bit (14) unal,
  3   182 /* 73    */	4 ldrl,
  3   183 			5 ilc		bit (18) unaligned,
  3   184 			5 code		fixed bin (17) unaligned,
  3   185 /* 74    */	4 ljsnb		bit (36),
  3   186 /* 75    */	4 ltm0		bit (36),
  3   187 /* 76    */	4 ltm1		bit (36),
  3   188 /* 77    */	4 ltm2		bit (36),
  3   189 /* 100   */	4 ltm3		bit (36),
  3   190 /* 101   */	4 ltm4		bit (36),
  3   191 /* 102   */	4 ltm5		bit (36),
  3   192 /* 103   */	4 ltmwt		bit (36),
  3   193 /* 104   */	4 ltmrs		bit (36),
  3   194 /* 105   */	4 ltc0		bit (36),
  3   195 /* 106   */	4 ltc1		bit (36),
  3   196 /* 107   */	4 ltc2		bit (36),
  3   197 /* 110   */	4 lct3		bit (36),
  3   198 /* 111   */	4 ltc4		bit (36),
  3   199 /* 112   */	4 ltc5		bit (36),
  3   200 /* 113   */	4 ltcw		bit (36),
  3   201 /* 114   */	4 lkst		bit (36),
  3   202 /* 115   */	4 lkst2		bit (36),
  3   203 /* 116   */	4 lkcc		bit (36),
  3   204 /* 117   */	4 lkms		bit (36),
  3   205 /* 120-121 */	4 lksdc (0:1)	bit (36),
  3   206 /* 122   */	4 lkntp		bit (36),
  3   207 /* 123   */	4 lkrdc		bit (36),
  3   208 /* 124   */	4 lpqf		bit (36),
  3   209 /* 125   */	4 lpqb		bit (36),
  3   210 /* 126   */	4 lustl		bit (36),
  3   211 /* 127   */	4 ltemp		bit (36),
  3   212 /* 130   */	4 lrtll,
  3   213 			5 word_length	fixed bin unaligned,
  3   214 			5 char_length	fixed bin unaligned,
  3   215 /* 131   */	4 ltim		bit (36),
  3   216 /* 132   */	4 lcfio,
  3   217 			5 sect_out	fixed bin(18)unsigned unal,
  3   218 			5 sect_in		fixed bin(18)unsigned unal,
  3   219 /* 133   */	4 lcfst,
  3   220 			5 initial_sect_out	fixed bin(18)unsigned unal,
  3   221 			5 start_term	fixed bin(18)unsigned unal,
  3   222 /* 134   */	4 lcmpt		bit (36),
  3   223 /* 135   */	4 lcjid		bit (36),
  3   224 /* 136-137 */	4 lrcal (0:1)	bit (36),
  3   225 /* 140   */	4 lrdta		bit (36),
  3   226 /* 141   */	4 lrrsk		bit (36),
  3   227 /* 142   */	4 lrskd		bit (36),
  3   228 /* 143   */	4 lrcc		bit (36),
  3   229 /* 144-145 */	4 lrsts (0:1)	bit (36),
  3   230 /* 146   */	4 lrtm		bit (36),
  3   231 /* 147   */	4 lswt2,
  3   232 			5 b0		bit (1) unaligned,
  3   233 			5 b1		bit (1) unaligned,
  3   234 			5 b2		bit (1) unaligned,
  3   235 			5 b3		bit (1) unaligned,
  3   236 			5 b4		bit (1) unaligned,
  3   237 			5 b5		bit (1) unaligned,
  3   238 			5 b6		bit (1) unaligned,
  3   239 			5 b7		bit (1) unaligned,
  3   240 			5 b8		bit (1) unaligned,
  3   241 			5 b9		bit (1) unaligned,
  3   242 			5 b10		bit (1) unaligned,
  3   243 			5 b11		bit (1) unaligned,
  3   244 			5 b12		bit (1) unaligned,
  3   245 			5 b13		bit (1) unaligned,
  3   246 			5 b14		bit (1) unaligned,
  3   247 			5 b15		bit (1) unaligned,
  3   248 			5 b16		bit (1) unaligned,
  3   249 			5 b17		bit (1) unaligned,
  3   250 			5 b18		bit (1) unaligned,
  3   251 			5 b19		bit (1) unaligned,
  3   252 			5 b20		bit (1) unaligned,
  3   253 			5 b21		bit (1) unaligned,
  3   254 			5 b22		bit (1) unaligned,
  3   255 			5 b23		bit (1) unaligned,
  3   256 			5 b24		bit (1) unaligned,
  3   257 			5 b25		bit (1) unaligned,
  3   258 			5 b26		bit (1) unaligned,
  3   259 			5 b27		bit (1) unaligned,
  3   260 			5 b28		bit (1) unaligned,
  3   261 			5 b29		bit (1) unaligned,
  3   262 			5 b30		bit (1) unaligned,
  3   263 			5 b31		bit (1) unaligned,
  3   264 			5 b32		bit (1) unaligned,
  3   265 			5 b33		bit (1) unaligned,
  3   266 			5 b34		bit (1) unaligned,
  3   267 			5 b35		bit (1) unaligned,
  3   268 /* 150   */	4 llsnb		bit (36),
  3   269 /* 151   */	4 lesq		bit (36),
  3   270 /* 152-153 */	4 lumc (0:1)	bit (36),
  3   271 /* 154-155 */	4 lfnam (0:1)	bit (36),
  3   272 /* 156   */	4 lopts		bit (36),
  3   273 /* 157   */	4 licec,
  3   274 			5 b0_17		bit (18) unaligned,
  3   275 			5 b18_35		fixed bin (17) unaligned,
  3   276 /* 160   */	4 lflg3,
  3   277 			5 b0		bit (1) unaligned,
  3   278 			5 b1		bit (1) unaligned,
  3   279 			5 b2		bit (1) unaligned,
  3   280 			5 b3		bit (1) unaligned,
  3   281 			5 b4		bit (1) unaligned,
  3   282 			5 b5		bit (1) unaligned,
  3   283 			5 b6		bit (1) unaligned,
  3   284 			5 b7		bit (1) unaligned,
  3   285 			5 b8		bit (1) unaligned,
  3   286 			5 b9		bit (1) unaligned,
  3   287 			5 b10		bit (1) unaligned,
  3   288 			5 b11		bit (1) unaligned,
  3   289 			5 b12		bit (1) unaligned,
  3   290 			5 b13		bit (1) unaligned,
  3   291 			5 b14		bit (1) unaligned,
  3   292 			5 b15		bit (1) unaligned,
  3   293 			5 b16		bit (1) unaligned,
  3   294 			5 b17		bit (1) unaligned,
  3   295 			5 b18		bit (1) unaligned,
  3   296 			5 b19		bit (1) unaligned,
  3   297 			5 b20		bit (1) unaligned,
  3   298 			5 b21		bit (1) unaligned,
  3   299 			5 b22		bit (1) unaligned,
  3   300 			5 b23		bit (1) unaligned,
  3   301 			5 b24		bit (1) unaligned,
  3   302 			5 b25		bit (1) unaligned,
  3   303 			5 b26		bit (1) unaligned,
  3   304 			5 b27		bit (1) unaligned,
  3   305 			5 b28		bit (1) unaligned,
  3   306 			5 b29		bit (1) unaligned,
  3   307 			5 b30		bit (1) unaligned,
  3   308 			5 b31		bit (1) unaligned,
  3   309 			5 b32		bit (1) unaligned,
  3   310 			5 b33		bit (1) unaligned,
  3   311 			5 b34		bit (1) unaligned,
  3   312 			5 b35		bit (1) unaligned,
  3   313 /* 161-163 */	4 lpage (0:2)	bit (36),
  3   314 /* 164   */	4 lsit1		bit (36),
  3   315 /* 165   */	4 lsit2		bit (36),
  3   316 /* 166   */	4 lsit3		bit (36),
  3   317 /* 167   */	4 lsit4		bit (36),
  3   318 /* The following entries are maintained by gtss and are not found in TSS UST */
  3   319 /* 170   */	4 lxxx, /* program stack index, offset from gtss_ust */
  3   320 			5 b0_17		fixed bin (17) unaligned,
  3   321 			5 b18_35		bit (18) unaligned, /* not used */
  3   322 /* 171-175 */	4 lprgs (5),
  3   323 			5 b0_17		fixed bin (17) unaligned,
  3   324 			5 b18_35		fixed bin (17) unaligned,
  3   325 /* 176   */	4 fill	bit (36),
  3   326 /* 177   */	4 remote_io_buffer aligned,
  3   327 			5 buffer_control_word,
  3   328 				6 current_line_pointer  bit (18)unal,
  3   329 				6 buffer_threshold_address  bit (18)unal,
  3   330 			5 number_words_transmitted	fixed bin (17)unal,
  3   331 			5 FILL1			fixed bin (17)unal,
  3   332 			5 count_of_characters_transmitted fixed bin (17)unal,
  3   333 			5 FILL2			fixed bin (17)unal,
  3   334 			5 characters_transmitted (244) char (1) unal,
  3   335 /* 277   */	4 word_after_ust		bit (36) aligned;
  3   336 
  3   337 /*   END INCLUDE FILE gtss_ust_ext_.incl.pl1 */
      452 
      453 
  4     1 /* BEGIN INCLUDE FILE gtss_ext_.incl.pl1 */
  4     2 /*
  4     3*  Created: (Wardd Multics)  05/20/78 1307.6 mst Sat 
  4     4*  Modified: Ward            1981     add suspended_process dcl
  4     5*  Modified: Ron Barstad  83-07-21  Fixed level number on mcfc to 3
  4     6*  Modified: Ron Barstad  83-07-25  Fixed derail range in statistics to 4js3 number
  4     7**/
  4     8 dcl  gtss_ext_$aem                   fixed bin static ext	/* >0 Print "additional" error information. */;
  4     9 dcl  gtss_ext_$bad_drl_rtrn          static ext label	/* Default for drl_rtrn. */;
  4    10 dcl  gtss_ext_$db                    (72)bit(1)unal static ext;
  4    11 dcl  gtss_ext_$deferred_catalogs_ptr ptr ext;
  4    12 dcl  gtss_ext_$dispose_of_drl        static ext label	/* quit handlers for some derails use this label to abort */;
  4    13 dcl  gtss_ext_$drl_rtrn              (4)static ext label	/* where to return at subsystem end */;
  4    14 dcl  gtss_ext_$drm_path              char(168)static ext	/* gtss_expand_pathname_stores drm_path */;
  4    15 dcl  gtss_ext_$drun_jid              char (5) static ext	/* valid only for DRUN executing under absentee */;
  4    16 dcl  gtss_ext_$event_channel         fixed bin (71) static ext	/* used for DABT signals */;
  4    17 dcl  gtss_ext_$finished              static ext label	/* Return to gtss for normal conclusion. */;
  4    18 dcl  gtss_ext_$gdb_name              char(8)ext	/* Name H* module to debug. */;
  4    19 dcl  gtss_ext_$get_line              entry(ptr,ptr,fixed bin(21),fixed bin(21),fixed bin(35))variable ext /* Build mode input procedure. */;
  4    20 dcl  gtss_ext_$gtss_slave_area_seg   (4) ext static ptr	/* pointer to gtss slave area segment */;
  4    21 dcl  gtss_ext_$hcs_work_area_ptr     ptr ext static		/* Temp seg for acl lists. */;
  4    22 dcl  gtss_ext_$homedir               char (64) static ext /* user's home dir */;
  4    23 dcl  gtss_ext_$last_k_was_out        bit (1)aligned ext static	/* "1"b => last tty output was output. */;
  4    24 dcl  gtss_ext_$pdir                  char (168) varying ext static	/* pathname of process directory */;
  4    25 dcl  gtss_ext_$popup_from_pi         static ext label	/* transfer to this label after pi simulates popup primitive */;
  4    26 dcl  gtss_ext_$process_type          fixed bin (17) static ext;
  4    27 dcl  gtss_ext_$put_chars             entry(ptr,ptr,fixed bin(24),fixed bin(35)) variable ext	/* Terminal output procedure. */;
  4    28 dcl  gtss_ext_$restart_from_pi       static ext label	/* transfer to this label after pi restores machine conditions */;
  4    29 dcl  gtss_ext_$restart_seg_ptr       ptr static ext	/* points to DRUN restart file when exec under absentee */;
  4    30 dcl  gtss_ext_$sig_ptr               ext static ptr	/* saved ptr to signal_ */;
  4    31 dcl  gtss_ext_$stack_level_          fixed bin ext static;
  4    32 dcl  gtss_ext_$suspended_process     bit(1) ext static;
  4    33 dcl  gtss_ext_$SYstarstar_file_no    fixed bin (24) static ext;
  4    34 dcl  gtss_ext_$user_id               char (26)var ext;
  4    35 dcl  gtss_ext_$work_area_ptr         ptr ext;
  4    36 
  4    37 dcl  1 gtss_ext_$CFP_bits aligned static external
  4    38      , 3 no_input_yet bit (1) unaligned         /* used in gtss_CFP_input_, gtss_read_starCFP_ */
  4    39      , 3 rtn_bits bit (4) unaligned             /* used in gtss_CFP_input_, gtss_CFP_output_ */
  4    40      , 3 cpos_called bit (1) unaligned          /* used in gtss_CFP_input_, gtss_drl_t_cfio_, gtss_abandon_CFP_ */
  4    41      , 3 cout_called bit (1) unaligned          /* used in gtss_read_starCFP_, gtss_abandon_CFP_ */
  4    42      , 3 build_mode bit (1) unaligned	        /* used in gtss_build_, gtss_dsd_process_ */
  4    43      ;
  4    44 
  4    45 dcl 1 gtss_ext_$com_reg aligned static ext,
  4    46        3 tsdmx,
  4    47          4 dst fixed bin (18) unsigned unaligned,
  4    48          4 dit fixed bin (18) unsigned unaligned,
  4    49        3 tsdpt fixed bin (36) unsigned unaligned,
  4    50        3 tsddt fixed bin (36) unsigned unaligned,
  4    51        3 tsdid bit (72) unaligned,
  4    52        3 tsdsd bit (36) unaligned,
  4    53        3 tsdst fixed bin (36) unsigned unaligned,
  4    54        3 tsdjb fixed bin (35) unaligned,
  4    55        3 tsdgt,
  4    56          4 ust_loc fixed bin (18) unsigned unaligned,
  4    57          4 gating_ctl fixed bin (18) unsigned unaligned,
  4    58        3 tcdfr bit (36) unaligned;
  4    59 
  4    60 dcl 1 gtss_ext_$flags aligned static ext
  4    61      , 3 dispose_of_drl_on_pi	bit (01) unal	/* 1 => drl that should be aborted after quit-pi sequence */
  4    62      , 3 drl_in_progress	bit (01) unal	/* 1 => drl handler executing; 0 => gcos code executing */
  4    63      , 3 popup_from_pi	bit (01) unal	/* 1 => derail processor will simulate Gcos break instead of returning */
  4    64      , 3 unfinished_drl	bit (01) unal	/* 1 => subsystem is handling breaks and quit was raised during a drl */
  4    65      , 3 ss_time_limit_set	bit (01) unal	/* 1 => exec time limit set for subsystem */
  4    66      , 3 timer_ranout	bit (01) unal	/* 1 => user is executing timer runout code */
  4    67      , 3 gtss_com_err_sw      bit (01) unal       /* 1 => stop com_err_ string from going to terminal */   
  4    68      , 3 available		bit (65) unal
  4    69      ;
  4    70 
  4    71 
  4    72 dcl 1 gtss_ext_$statistics aligned static ext,		/* Derail usage statistics */
  4    73       3 total_time (-10:71)fixed bin (71),
  4    74       3 count (-10:71)fixed bin (17);
  4    75 
  4    76 /* 	Declaration of Available File Table
  4    77*   */
  4    78 dcl 1 gtss_ext_$aft aligned ext,			/* aft structure */
  4    79 
  4    80       3 start_list (0:102) fixed bin (24),		/* >0 => 1st aft_entry row to start of next entry chain. */
  4    81 
  4    82       3 aft_entry (20),
  4    83         4 altname char (8),				/* altname name for attaching this file */
  4    84         4 next_entry fixed bin (24),			/* Next aft_entry in hash chain. */
  4    85         4 previous_add fixed bin (24),			/* Previously added entry. */
  4    86         4 next_add fixed bin (24),			/* Entry added after this one. */
  4    87         4 used bit (1) unal,				/* "1"b => aft_entry contains AFT value. */
  4    88         4 forced bit(1) unal,				/* "1"b => gtss_verify_access_ forced access on this file. */
  4    89 
  4    90       3 free_space fixed bin (24),			/* Index of start of free space list for aft entries. */
  4    91       3 first_added fixed bin (24),			/* >0  => start of chain in add order. */
  4    92       3 last_added fixed bin (24)			/* >0 => end of chain in added order. */;
  4    93 
  4    94 dcl  gtss_ext_$ppt                   ptr ext /*  switch name for tapein drl */;
  4    95 /**	Data structure to provide access to installed
  4    96*   subsystems fast library load.
  4    97*   **/
  4    98 dcl 1 gtss_ext_$fast_lib aligned ext
  4    99      , 3 fast_lib_fcb ptr				/* Pointer to msf fcb.	*/
  4   100      , 3 fast_lib_ncp fixed bin (24)			/* Number of components. */
  4   101      , 3 comp_ptr (0:9)ptr				/* Pointer to component. */
  4   102      , 3 comp_wds (0:9)fixed bin (24)			/* Component length (words). */
  4   103      ;
  4   104 
  4   105 /* Pointers to segments to regulate multipler
  4   106*   callers to files. Same segments are used to regulate
  4   107*   all simulator callers.
  4   108**/
  4   109 dcl 1 gtss_ext_$mcfc	aligned ext,
  4   110       3 multics_lock_id	bit(36),
  4   111       3 wait_time		fixed bin,
  4   112       3 files_ptr		ptr,
  4   113       3 names_ptr		ptr,
  4   114       3 callers_ptr		(0:3)ptr
  4   115 ;
  4   116 
  4   117 /*   END INCLUDE FILE gtss_ext_.incl.pl1 */
      454 
      455 
  5     1 /* BEGIN INCLUDE FILE gtss_filact_status.incl.pl1 */
  5     2 /*
  5     3*  Created: (Wardd Multics)  10/10/78 0945.5 mst Tue 
  5     4**/
  5     5 
  5     6 /*
  5     7*	 4000   NO ERRORS 
  5     8*	 4001   USER-ID NOT IN MASTER CATALOG 
  5     9*	 4002   I/O ERROR ON DEVICE XXX SA = NNN......NNN 
  5    10*	 4003   PERMISSIONS DENIED 
  5    11*	 4004   FILE BUSY: TRY LATER 
  5    12*	 4005   INCORRECT CAT/FILE DESCRIPTION AT AAA......AAA 
  5    13*	 4006   NO SPACE FOR CATALOG ON DEVICE XXX 
  5    14*	 4007   UNDEFINED DEVICE YYY ZZZZZZ 
  5    15*	 4010   NO SPACE FOR FILE ON DEVICE YYY 
  5    16*	 4011   NON-UNIQUE NAME 
  5    17*	 4012   SIZE REQUEST LS THAN ALLOCATED 
  5    18*	 4013   SPACE REQUEST GR THAN ALLOWED 
  5    19*	 4014   INCORRECT OR MISSING PASSWORD-AT-AAA...AAA 
  5    20*	 4015   FILE IS ABORT LOCK 
  5    21*	 4016   FILE WRITE IN BATCH ONLY 
  5    22*	 4017   SEEK ERROR ON DEVICE XXX SA = NNN......NNN 
  5    23*	 4020   FAILURE IN NAME SCAN (IMP.) 
  5    24*	 4021   DUP CANNOT BE ON RMVBL DEVICE 
  5    25*	 4022   BAD SPACE INVENTORY ON DEVICE 
  5    26*	 4023   INVALID PARAMETER 
  5    27*	 4024   BAD SPACE TABLE FOR DEVICE ON XXX 
  5    28*	 4025   REQUESTED ENTRY NOT ON-LINE 
  5    29*	 4026   NON-STRUCTURED FILE ENTRY 
  5    30*	 4027   FILE IN DEFECTIVE STATUS 
  5    31*	 4030   ILLEGAL PACK TYPE 
  5    32*	 4031   ACCESS GRANTED TO I-D-S FILE 
  5    33*	 4032   COLLECTION FILE ERROR 
  5    34*	 4033   CAT/FILE SECURITY LOCKED 
  5    35*	 4034   ILLEGAL CHARACTER IN CAT/FILE NAME 
  5    36*	 4035   ILLEGAL CAT/FILE LIST REQUEST 
  5    37*	 4036   AFT IS FULL 
  5    38*	 4037   FILE ALREADY IN AFT 
  5    39*	 4040   MAXIMUM PAT SIZE EXCEEDED 
  5    40*	 4041   NO PROTECTION TABLE SPACE AVAILABLE 
  5    41*	 4042   INVALID FILE CODE OR PAT PTR 
  5    42*	 4043   INVALID CATALOG BLOCK ADDRESS 
  5    43*	 4044   ILLEGAL OPTIONS COMBINATION 
  5    44*	 4045   INVALID SPACE IDENTIFIER 
  5    45*	 4046   (NONE, SPECIAL TSS INTERFACE) 
  5    46*	 4047   UNACCOUNTABLE ERROR 
  5    47*	 4050   ***RESERVED for FMS*** 
  5    48*	 4051   CHECKSUM ERROR - DEVICE XXX SA = NNN......NNN 
  5    49*	 4052   DEVICE XXX RELEASED 
  5    50*	 4053   READ ACCESS DENIED - NULL FILE 
  5    51*	 4054   FILE IS WRITE LOCKED 
  5    52*	 4055   ***RESERVED*** 
  5    53*	 4056   SECURITY PARAMETER - REQUIRED 
  5    54*	 4057   SECURITY PARAMETER - INVALID 
  5    55*	 4061   $FSYS HAS BEEN ENABLED 
  5    56*	 4062   ILLEGAL SUBFUNCTION CODE 
  5    57*	 4063   FILE NOT BEING MONITORED 
  5    58*	 4064   DEADLOCK ON PAGE REQUEST 
  5    59*	 4065   PAGE CURRENTLY BUSY 
  5    60*	 4066   FILE NOT DUPLICATED 
  5    61*	 4067   TDS MON ALLOC ERROR 
  5    62*	 4070   ILLEGAL CHECKPOINT REQUEST 
  5    63*	 4071   ILLEGAL DCW SPECIFIED 
  5    64*	 4072   IMPROPER PROTECTION OPTION 
  5    65*	 4073   INVALID ARG LIST PARAMETER NO. 000 
  5    66*	 4074   SYSTEM JOURNAL NOT CONFIGURED 
  5    67*	 4075   FILE RESTORE LOCKED 
  5    68*	 4076   FILE IS TDS LOCKED 
  5    69*	 4077   ERR TDS SUBSET PAGES RELEASED 
  5    70*	 4100   UNACCOUNTABLE ERROR 
  5    71**/
  5    72 
  5    73 /*   END INCLUDE FILE gtss_filact_status.incl.pl1 */
      456 
      457 
  6     1 /* BEGIN INCLUDE FILE gtss_pnterr.incl.pl1 */
  6     2 /*
  6     3*  Created: (Grimes SMP)  04/15/78 0933.2 mst Sat 
  6     4*   Change: Dave Ward	06/08/78 made attributes constant.
  6     5*   Change: Dave Ward	08/17/81 made lengths same as constans.
  6     6*   Change: Ron Barstad  83-03-29  fixed err 53, add missing err 56
  6     7*   Change: Ron Barstad  84-02-27  changed back to all same length because of based array in gtss_abort_subsystem_
  6     8**/
  6     9 dcl 1 gtss_pnterr static int options (constant),
  6    10     2 err1   char(50) init("001-INCORRECT PRIMITIVE"),
  6    11     2 err2   char(50) init("002-(^6o)INVALID FILE I/O COMMAND"),
  6    12     2 err3   char(50) init("003-(^6o)INVALID DCW"),
  6    13     2 err4   char(50) init("004-(^6o)INVALID DRL ARGUMENT"),
  6    14     2 err5   char(50) init("005-(^6o)INVALID DRL CODE"),
  6    15     2 err6   char(50) init("006-LEVEL OF CONTROL TOO DEEP"),
  6    16     2 err7   char(50) init("007-BAP PROG. DESC."),
  6    17     2 err8   char(50) init("008-LOOP IN PRIMITIVES"),
  6    18     2 err9   char(50) init("009-SYSTEM UNKNOWN"),
  6    19     2 err10  char(50) init("010-PROGRAM TOO LARGE TO SWAP"),
  6    20     2 err11  char(50) init("011-(^6o)INCORRECT CORE FILE USAGE"),
  6    21     2 err12  char(50) init("012-(^6o)PRIVILEGED I/O ATTEMPTED"),
  6    22     2 err13  char(50) init("013-(^6o)DRL USERID NOT PERMITTED"),
  6    23     2 err14  char(50) init("(^6o)ILLEGAL DRL RELMEM REQUEST"),
  6    24     2 err15  char(50) init("015-(^6o)CANNOT RESET USER ID"),
  6    25     2 err16  char(50) init("016-(^6o)OVERFLOW FAULT"),
  6    26     2 err17  char(50) init("017-(^6o)ILLEGAL OP CODE"),
  6    27     2 err18  char(50) init("018-(^6o)MEMORY FAULT"),
  6    28     2 err19  char(50) init("019-(^6o)FAULT TAG FAULT"),
  6    29     2 err20  char(50) init("020-(^6o)DIVIDE CHECK FAULT"),
  6    30     2 err21  char(50) init("021-(^6o)BAD STATUS - SWAP OUT"),
  6    31     2 err22  char(50) init("022-(^6o)BAD STATUS - SWAP IN"),
  6    32     2 err23  char(50) init("023-(^6o)BAD STATUS - LOAD"),
  6    33     2 err24  char(50) init("(^6o)TALK PERMISSION NOT GRANTED"),
  6    34     2 err25  char(50) init("(^6o)WRITE ATTEMPTED ON READ-ONLY FILE - ^8a"),
  6    35     2 err26  char(50) init("(^6o)READ ATTEMPTED ON EXECUTE-ONLY FILE - ^8a"),
  6    36     2 err27  char(50) init("024-(^6o)MME FAULT"),
  6    37     2 err28  char(50) init("028-(^6o)REWIND ATTEMPTED FOR RANDOM FILE - ^8a"),
  6    38     2 err29  char(50) init("029-ILLEGAL SYSTEM SELECTION"),
  6    39     2 err30  char(50) init("134-(^6o)INVALID DRL FILACT FUNCTION #^i"),
  6    40     2 err31  char(50) init("135-(^6o)PRIVILEGED DRL FILACT REQUEST"),
  6    41     2 err32  char(50) init("138-(^6o)NO TAP* FILE FOR DRL TAPEIN"),
  6    42     2 err33  char(50) init("139-ERROR IN WRITING TAP* FILE"),
  6    43     2 err34  char(50) init("(^6o)DRL ABORT - CANNOT WRITE ABRT FILE"),
  6    44     2 err35  char(50) init("(^6o)DRL ABORT - ABRT FILE WRITTEN"),
  6    45     2 err36  char(50) init("NOT ENOUGH CORE TO RUN JOB"),
  6    46     2 err37  char(50) init("SORRY-OUT OF SWAP SPACE. TRY AGAIN."),
  6    47     2 err38  char(50) init("(^6o)FILE ADDRESS ERROR"),
  6    48     2 err39  char(50) init("(^6o)DRL ABORT - ABRT FILE I/O ERROR"),
  6    49     2 err40  char(50) init("(^6o)DRL ABORT - ABRT FILE TOO SMALL"),
  6    50     2 err41  char(50) init("(^6o)BAD STATUS FOR DRL SAVE/RESTOR - ^8a"),
  6    51     2 err42  char(50) init("(^6o)H* FILE NOT IN AFT - ^8a"),
  6    52     2 err43  char(50) init("064-EXECUTE TIME LIMIT EXCEEDED"),
  6    53     2 err44  char(50) init("025-(^6o)LOCKUP FAULT"),
  6    54     2 err45  char(50) init("065-OBJECT PROGRAM SIZE LIMIT EXCEEDED"),
  6    55     2 err46  char(50) init("(^6o)INCORRECT ENTRY TO DRL TASK"),
  6    56     2 err47  char(50) init("(^6o)H* PROGRAM NAME UNDEFINED - ^8a"),
  6    57     2 err48  char(50) init("(^6o)H* FILE CATALOG FULL - ^8a"),
  6    58     2 err49  char(50) init("(^6o)TALLY OR CHARACTER COUNT INCORRECT"),
  6    59     2 err50  char(50) init("(^6o)BAD DRL SAVE DATA LOC"),
  6    60     2 err51  char(50) init("(^6o)H* FILE NOT INITITALIZED - ^8a"),
  6    61     2 err52  char(50) init("(^6o)H* FILE MUST BE RANDOM - ^8a"),
  6    62     2 err53  char(50) init("026-(^6o)OP-NOT-COMPLETE FAULT"),
  6    63     2 err54  char(50) init("(^6o)H* FILE PROGRAM NAME REQUIRED - ^8a"),
  6    64     2 err55  char(50) init("027-(^6o)COMMAND FAULT"),
  6    65     2 err56  char(50) init("(^6o)LINKED FILE I/O CANNOT SPAN >63 LLINKS - ^8a"),
  6    66     2 err57  char(50) init("UNASSIGNED"),
  6    67     2 err58  char(50) init("(^6o)INVALID TIME FOR DRL GWAKE"),
  6    68     2 err59  char(50) init("UNASSIGNED"),
  6    69     2 err60  char(50) init("(^6o)INVALID SNUMB FOR DRL JOUT"),
  6    70     2 err61  char(50) init("(^6o)PRIVILEGED DRL"),
  6    71     2 err62  char(50) init("(^6o)INVALID DRL JOUT FUNCTION"),
  6    72     2 err63  char(50) init("MEMORY PARITY ERROR"),
  6    73     2 err64  char(50) init("SY** I/O ERROR"),
  6    74 /* The following error messages are artifacts of gtss and are not found in TSS */
  6    75     2 err100 char(50) init("DRL ADDMEM ERROR at (^6o)"),
  6    76     2 err101 char(50) init("DRL RELMEM ERROR TRUNCATE SEGMENT at (^6o)"),
  6    77     2 err102 char(50) init("DRL RELMEM ERROR SET MAX SEGMENT LENGTH"),
  6    78     2 err103 char(50) init("UNIMPLEMENTED DRL FILACT FUNCTION (^i)"),
  6    79     2 err999 char(50) init("dummy");
  6    80 
  6    81 /*   END INCLUDE FILE gtss_pnterr.incl.pl1 */
      458 
      459 
  7     1 /*  */
  7     2 /* BEGIN INCLUDE FILE  mc.incl.pl1   Created Dec 72 for 6180 - WSS. */
  7     3 /* Modified 06/07/76 by Greenberg for mc.resignal */
  7     4 /* Modified 07/07/76 by Morris for fault register data */
  7     5 /* Modified 08/28/80 by J. A. Bush for the DPS8/70M CVPU */
  7     6 /* Modified '82 to make values constant */
  7     7 
  7     8 /* words 0-15 pointer registers */
  7     9 
  7    10 dcl  mcp ptr;
  7    11 
  7    12 dcl 1 mc based (mcp) aligned,
  7    13     2 prs (0:7) ptr,				/* POINTER  REGISTERS */
  7    14    (2 regs,					/* registers */
  7    15       3 x (0:7) bit (18),				/* index registers */
  7    16       3 a bit (36),					/* accumulator */
  7    17       3 q bit (36),					/* q-register */
  7    18       3 e bit (8),					/* exponent */
  7    19       3 pad1 bit (28),
  7    20       3 t bit (27),					/* timer register */
  7    21       3 pad2 bit (6),
  7    22       3 ralr bit (3),				/* ring alarm register */
  7    23 
  7    24     2 scu (0:7) bit (36),
  7    25 
  7    26     2 mask bit (72),				/* mem controller mask at time of fault */
  7    27     2 ips_temp bit (36),				/* Temporary storage for IPS info */
  7    28     2 errcode fixed bin (35),				/* fault handler's error code */
  7    29     2 fim_temp,
  7    30       3 unique_index bit (18) unal,			/* unique index for restarting faults */
  7    31       3 resignal bit (1) unal,			/* recompute signal name with fcode below */
  7    32       3 fcode bit (17) unal,				/* fault code used as index to FIM table and SCT */
  7    33     2 fault_reg bit (36),				/* fault register */
  7    34     2 pad2 bit (1),
  7    35     2 cpu_type fixed bin (2) unsigned,			/* L68 = 0, DPS8/70M = 1 */
  7    36     2 ext_fault_reg bit (15),				/* extended fault reg for DPS8/70M CPU */
  7    37     2 fault_time bit (54),				/* time of fault */
  7    38 
  7    39     2 eis_info (0:7) bit (36)) unaligned;
  7    40 
  7    41 
  7    42 dcl (apx fixed bin init (0),
  7    43      abx fixed bin init (1),
  7    44      bpx fixed bin init (2),
  7    45      bbx fixed bin init (3),
  7    46      lpx fixed bin init (4),
  7    47      lbx fixed bin init (5),
  7    48      spx fixed bin init (6),
  7    49      sbx fixed bin init (7)) internal static options (constant);
  7    50 
  7    51 
  7    52 
  7    53 
  7    54 dcl  scup ptr;
  7    55 
  7    56 dcl 1 scu based (scup) aligned,			/* SCU DATA */
  7    57 
  7    58 
  7    59 /*	WORD (0)		*/
  7    60 
  7    61    (2 ppr,					/* PROCEDURE POINTER REGISTER */
  7    62       3 prr bit (3),				/* procedure ring register */
  7    63       3 psr bit (15),				/* procedure segment register */
  7    64       3 p bit (1),					/* procedure privileged bit */
  7    65 
  7    66     2 apu,					/* APPENDING UNIT STATUS */
  7    67       3 xsf bit (1),				/* ext seg flag - IT modification */
  7    68       3 sdwm bit (1),				/* match in SDW Ass. Mem. */
  7    69       3 sd_on bit (1),				/* SDW Ass. Mem.  ON */
  7    70       3 ptwm bit (1),				/* match in PTW Ass. Mem. */
  7    71       3 pt_on bit (1),				/* PTW Ass. Mem.  ON */
  7    72       3 pi_ap bit (1),				/* Instr Fetch or Append cycle */
  7    73       3 dsptw bit (1),				/* Fetch of DSPTW */
  7    74       3 sdwnp bit (1),				/* Fetch of SDW non paged */
  7    75       3 sdwp bit (1),				/* Fetch of SDW paged */
  7    76       3 ptw bit (1),				/* Fetch of PTW */
  7    77       3 ptw2 bit (1),				/* Fetch of pre-paged PTW */
  7    78       3 fap bit (1),				/* Fetch of final address paged */
  7    79       3 fanp bit (1),				/* Fetch of final address non-paged */
  7    80       3 fabs bit (1),				/* Fetch of final address absolute */
  7    81 
  7    82     2 fault_cntr bit (3),				/* number of retrys of EIS instructions */
  7    83 
  7    84 
  7    85 /*	WORD (1)		*/
  7    86 
  7    87     2 fd,						/* FAULT  DATA */
  7    88       3 iro bit (1),				/* illegal ring order */
  7    89       3 oeb bit (1),				/* out of execute bracket */
  7    90       3 e_off bit (1),				/* no execute */
  7    91       3 orb bit (1),				/* out of read bracket */
  7    92       3 r_off bit (1),				/* no read */
  7    93       3 owb bit (1),				/* out of write bracket */
  7    94       3 w_off bit (1),				/* no write */
  7    95       3 no_ga bit (1),				/* not a gate */
  7    96       3 ocb bit (1),				/* out of call bracket */
  7    97       3 ocall bit (1),				/* outward call */
  7    98       3 boc bit (1),				/* bad outward call */
  7    99       3 inret bit (1),				/* inward return */
  7   100       3 crt bit (1),				/* cross ring transfer */
  7   101       3 ralr bit (1),				/* ring alarm register */
  7   102       3 am_er bit (1),				/* associative memory fault */
  7   103       3 oosb bit (1),				/* out of segment bounds */
  7   104       3 paru bit (1),				/* processor parity upper */
  7   105       3 parl bit (1),				/* processor parity lower */
  7   106       3 onc_1 bit (1),				/* op not complete type 1 */
  7   107       3 onc_2 bit (1),				/* op not complete type 2 */
  7   108 
  7   109     2 port_stat,					/* PORT  STATUS */
  7   110       3 ial bit (4),				/* illegal action lines */
  7   111       3 iac bit (3),				/* illegal action channel */
  7   112       3 con_chan bit (3),				/* connect channel */
  7   113 
  7   114     2 fi_num bit (5),				/* (fault/interrupt)  number */
  7   115     2 fi_flag bit (1),				/*  1 => fault,  0 => interrupt  */
  7   116 
  7   117 
  7   118 /*	WORD (2)		*/
  7   119 
  7   120     2 tpr,					/* TEMPORARY POINTER REGISTER */
  7   121       3 trr bit (3),				/* temporary ring register */
  7   122       3 tsr bit (15),				/* temporary segment register */
  7   123 
  7   124     2 pad2 bit (9),
  7   125 
  7   126     2 cpu_no bit (3),				/* CPU number */
  7   127 
  7   128     2 delta bit (6),				/* tally modification DELTA */
  7   129 
  7   130 
  7   131 /*	WORD (3)		*/
  7   132 
  7   133     2 word3 bit (18),
  7   134 
  7   135     2 tsr_stat,					/* TSR STATUS for 1,2,&3 word instructions */
  7   136       3 tsna,					/* Word 1 status */
  7   137         4 prn bit (3),				/* Word 1  PR  number */
  7   138         4 prv bit (1),				/* Word 1  PR  valid bit */
  7   139       3 tsnb,					/* Word 2  status */
  7   140         4 prn bit (3),				/* Word 2  PR  number */
  7   141         4 prv bit (1),				/* Word 2  PR  valid bit */
  7   142       3 tsnc,					/* Word 3  status */
  7   143         4 prn bit (3),				/* Word 3  PR  number */
  7   144         4 prv bit (1),				/* Word 3  PR  valid bit */
  7   145 
  7   146     2 tpr_tbr bit (6),				/* TPR.TBR  field */
  7   147 
  7   148 
  7   149 /* 	WORD (4)		*/
  7   150 
  7   151     2 ilc bit (18),					/* INSTRUCTION  COUNTER */
  7   152 
  7   153     2 ir,						/* INDICATOR  REGISTERS */
  7   154       3 zero bit (1),				/* zero indicator */
  7   155       3 neg bit (1),				/* negative indicator */
  7   156       3 carry bit (1),				/* carryry indicator */
  7   157       3 ovfl bit (1),				/* overflow indicator */
  7   158       3 eovf bit (1),				/* eponent overflow */
  7   159       3 eufl bit (1),				/* exponent underflow */
  7   160       3 oflm bit (1),				/* overflow mask */
  7   161       3 tro bit (1),				/* tally runout */
  7   162       3 par bit (1),				/* parity error */
  7   163       3 parm bit (1),				/* parity mask */
  7   164       3 bm bit (1),					/* ^bar mode */
  7   165       3 tru bit (1),				/* truncation mode */
  7   166       3 mif bit (1),				/* multi-word instruction mode */
  7   167       3 abs bit (1),				/* absolute mode */
  7   168       3 hex bit (1),				/* hexadecimal exponent mode */
  7   169       3 pad bit (3),
  7   170 
  7   171 
  7   172 /*	WORD (5)		*/
  7   173 
  7   174     2 ca bit (18),					/* COMPUTED  ADDRESS */
  7   175 
  7   176     2 cu,						/* CONTROL UNIT STATUS */
  7   177       3 rf bit (1),					/* on first cycle of repeat instr */
  7   178       3 rpt bit (1),				/* repeat instruction */
  7   179       3 rd bit (1),					/* repeat double instruction */
  7   180       3 rl bit (1),					/* repeat link instruciton */
  7   181       3 pot bit (1),				/* IT  modification */
  7   182       3 pon bit (1),				/* return type instruction */
  7   183       3 xde bit (1),				/* XDE from Even location */
  7   184       3 xdo bit (1),				/* XDE from Odd  location */
  7   185       3 poa bit (1),				/* operation preparation */
  7   186       3 rfi bit (1),				/* tells CPU to refetch instruction */
  7   187       3 its bit (1),				/* ITS modification */
  7   188       3 if bit (1),					/* fault occured during instruction fetch */
  7   189 
  7   190     2 cpu_tag bit (6)) unaligned,			/* computed tag field */
  7   191 
  7   192 
  7   193 /*	WORDS (6,7)	*/
  7   194 
  7   195     2 even_inst bit (36),				/* even instruction of faulting pair */
  7   196 
  7   197     2 odd_inst bit (36);				/* odd  instruction of faulting pair */
  7   198 
  7   199 
  7   200 
  7   201 
  7   202 
  7   203 
  7   204 /*	ALTERNATE   SCU  DECLARATION		*/
  7   205 
  7   206 
  7   207 dcl 1 scux based (scup) aligned,
  7   208 
  7   209    (2 pad0 bit (36),
  7   210 
  7   211     2 fd,						/* GROUP II  FAULT DATA */
  7   212       3 isn bit (1),				/* illegal segment number */
  7   213       3 ioc bit (1),				/* illegal op  code  */
  7   214       3 ia_am bit (1),				/* illegal address - modifier */
  7   215       3 isp bit (1),				/* illegal slave  procedure */
  7   216       3 ipr bit (1),				/* illegal procedure */
  7   217       3 nea bit (1),				/* non existent address */
  7   218       3 oobb bit (1),				/* out of bounds */
  7   219       3 pad bit (29),
  7   220 
  7   221     2 pad2 bit (36),
  7   222 
  7   223     2 pad3a bit (18),
  7   224 
  7   225     2 tsr_stat (0:2),				/* TSR  STATUS  as an  ARRAY */
  7   226       3 prn bit (3),				/* PR  number */
  7   227       3 prv bit (1),				/* PR  valid bit */
  7   228 
  7   229     2 pad3b bit (6)) unaligned,
  7   230 
  7   231     2 pad45 (0:1) bit (36),
  7   232 
  7   233     2 instr (0:1) bit (36);				/* Instruction ARRAY */
  7   234 
  7   235 
  7   236 
  7   237 /*  END INCLUDE FILE   mc.incl.pl1 */
      460 
      461 
  8     1 /* BEGIN INCLUDE FILE gtss_entry_dcls.incl.pl1 */
  8     2 /*
  8     3*  Created: (Wardd Multics)  06/30/78 1624.8 mst Fri 
  8     4*  Modified: Ron Barstad  84-02-24  Fixed wrong and obsolete entries
  8     5**/
  8     6 
  8     7 /**  gtss external entry variables.		**/
  8     8 dcl  com_err_                                   entry() options(variable);
  8     9 dcl  gtss_CFP_abort_                            entry options(variable);
  8    10 dcl  gtss_CFP_break_                            entry options(variable);
  8    11 dcl  gtss_CFP_input_                            entry (ptr, ptr, fixed bin(21), fixed bin(21), fixed bin(35));
  8    12 dcl  gtss_CFP_output_                           entry (ptr, ptr, fixed bin(21), fixed bin(35));
  8    13 dcl  gtss_abandon_CFP_                          entry options(variable);
  8    14 dcl  gtss_abort_dump_                           entry (fixed bin(18));
  8    15 dcl  gtss_abort_subsystem_                      entry options (variable);
  8    16 dcl  gtss_abort_subsystem_$not_imp              entry (ptr, fixed bin(24));
  8    17 dcl  gtss_abs_login_banner_		        entry() returns(char(*));
  8    18 dcl  gtss_abs_logout_banner_		        entry() returns(char(*));
  8    19 dcl  gtss_abs_$abs_equiv                        entry options(variable);
  8    20 dcl  gtss_abs_$cpu_runout		        entry (ptr, char(4));
  8    21 dcl  gtss_abs_$create_absin                     entry() returns(char(*));
  8    22 dcl  gtss_abs_$dabt_check		        entry (ptr, char(4));
  8    23 dcl  gtss_abs_$get_id                           entry (char(5)) returns(char(19));
  8    24 dcl  gtss_abs_$get_drm                          entry() returns(char(*));
  8    25 dcl  gtss_adjust_size_                          entry (ptr);
  8    26 dcl  gtss_aft_$add                              entry (char(8), fixed bin(24), fixed bin(35));
  8    27 dcl  gtss_aft_$delete                           entry (char(8), fixed bin(24), fixed bin(35));
  8    28 dcl  gtss_aft_$find                             entry (char(8), fixed bin(24), fixed bin(35));
  8    29 dcl  gtss_aft_$initialize                       entry (fixed bin(35));
  8    30 dcl  gtss_ascii_bcd_                            entry (ptr, fixed bin, ptr);
  8    31 dcl  gtss_attributes_mgr_$get                   entry (ptr, fixed bin(35));
  8    32 dcl  gtss_attributes_mgr_$set                   entry (ptr, fixed bin(35));
  8    33 dcl  gtss_bcd_ascii_                            entry (ptr, fixed bin(24), ptr);
  8    34 dcl  gtss_bcd_ascii_$lc                         entry (ptr, fixed bin(24), ptr);
  8    35 dcl  gtss_break_vector_                         entry ();
  8    36 dcl  gtss_break_vector_$drl_in_progress         entry() returns(bit(1));
  8    37 dcl  gtss_break_vector_$status                  entry() returns(bit(1));
  8    38 dcl  gtss_build_                                entry options(variable);
  8    39 dcl  gtss_com_err_                              entry options(variable);
  8    40 dcl  gtss_derail_processor_                     entry (ptr, char(*), ptr, ptr, bit(1) aligned) /* called at fault time instead of signal_ */;
  8    41 dcl  gtss_derail_processor_$set                 entry options(variable);
  8    42 dcl  gtss_dq_$catp                              entry (char (5), ptr, fixed bin (18) unsigned);
  8    43 dcl  gtss_dq_$create                            entry (bit(1));
  8    44 dcl  gtss_dq_$dibp                              entry (char(5), ptr);
  8    45 dcl  gtss_dq_$entries_info		        entry (ptr, fixed bin (18) unsigned, fixed bin (18) unsigned);
  8    46 dcl  gtss_dq_$hdrp                              entry (ptr);
  8    47 dcl  gtss_dq_$mod_js		        entry (char(5), fixed bin (6) unsigned, bit (1));
  8    48 dcl  gtss_dq_$open_exc		        entry (bit(1));
  8    49 dcl  gtss_dq_$open_gen		        entry (bit(1));
  8    50 dcl  gtss_drl_abort_                            entry (ptr, fixed bin);
  8    51 dcl  gtss_drl_addmem_                           entry (ptr, fixed bin);
  8    52 dcl  gtss_drl_callss_                           entry (ptr, fixed bin);
  8    53 dcl  gtss_drl_corfil_                           entry (ptr, fixed bin);
  8    54 dcl  gtss_drl_defil_                            entry (ptr, fixed bin);
  8    55 dcl  gtss_drl_defil_$subr                       entry (ptr, ptr, ptr);
  8    56 dcl  gtss_drl_dio_                              entry (ptr, fixed bin);
  8    57 dcl  gtss_drl_drlimt_                           entry (ptr, fixed bin);
  8    58 dcl  gtss_drl_drlsav_                           entry (ptr, fixed bin);
  8    59 dcl  gtss_drl_filact_                           entry (ptr, fixed bin);
  8    60 dcl  gtss_drl_filsp_                            entry (ptr, fixed bin);
  8    61 dcl  gtss_drl_grow_                             entry (ptr, fixed bin);
  8    62 dcl  gtss_drl_gwake_                            entry (ptr, fixed bin);
  8    63 dcl  gtss_drl_jsts_                             entry (ptr, fixed bin);
  8    64 dcl  gtss_drl_kin_                              entry (ptr, fixed bin);
  8    65 dcl  gtss_drl_kotnow_                           entry (ptr, fixed bin);
  8    66 dcl  gtss_drl_kotnow_$gtss_drl_kout_            entry (ptr, fixed bin);
  8    67 dcl  gtss_drl_koutn_                            entry (ptr, fixed bin);
  8    68 dcl  gtss_drl_morlnk_                           entry (ptr, fixed bin);
  8    69 dcl  gtss_drl_msub_                             entry (ptr, fixed bin);
  8    70 dcl  gtss_drl_objtim_                           entry (ptr, fixed bin);
  8    71 dcl  gtss_drl_part_                             entry (ptr, fixed bin);
  8    72 dcl  gtss_drl_pasaft_                           entry (ptr, fixed bin);
  8    73 dcl  gtss_drl_pasdes_                           entry (ptr, fixed bin);
  8    74 dcl  gtss_drl_pasust_                           entry (ptr, fixed bin);
  8    75 dcl  gtss_drl_pdio_                             entry (ptr, fixed bin);
  8    76 dcl  gtss_drl_prgdes_                           entry (ptr, fixed bin);
  8    77 dcl  gtss_drl_pseudo_                           entry (ptr, fixed bin);
  8    78 dcl  gtss_drl_relmem_                           entry (ptr, fixed bin);
  8    79 dcl  gtss_drl_restor_                           entry (ptr, fixed bin);
  8    80 dcl  gtss_drl_retfil_                           entry (ptr, fixed bin);
  8    81 dcl  gtss_drl_return_                           entry (ptr, fixed bin);
  8    82 dcl  gtss_drl_rew_                              entry (ptr, fixed bin);
  8    83 dcl  gtss_drl_rstswh_                           entry (ptr, fixed bin);
  8    84 dcl  gtss_drl_setlno_                           entry (ptr, fixed bin);
  8    85 dcl  gtss_drl_setswh_                           entry (ptr, fixed bin);
  8    86 dcl  gtss_drl_snumb_                            entry (ptr, fixed bin);
  8    87 dcl  gtss_drl_spawn_                            entry (ptr, fixed bin);
  8    88 dcl  gtss_drl_spawn_$gtss_drl_pasflr_           entry (ptr, fixed bin);
  8    89 dcl  gtss_drl_stoppt_                           entry (ptr, fixed bin);
  8    90 dcl  gtss_drl_switch_                           entry (ptr, fixed bin);
  8    91 dcl  gtss_drl_sysret_                           entry (ptr, fixed bin);
  8    92 dcl  gtss_drl_t_cfio_                           entry (ptr, fixed bin);
  8    93 dcl  gtss_drl_t_cmov_                           entry (ptr, fixed bin);
  8    94 dcl  gtss_drl_t_err_                            entry (ptr, fixed bin);
  8    95 dcl  gtss_drl_t_goto_                           entry (ptr, fixed bin);
  8    96 dcl  gtss_drl_t_linl_                           entry (ptr, fixed bin);
  8    97 dcl  gtss_drl_t_rscc_                           entry (ptr, fixed bin);
  8    98 dcl  gtss_drl_tapein_                           entry (ptr, fixed bin);
  8    99 dcl  gtss_drl_task_                             entry (ptr, fixed bin);
  8   100 dcl  gtss_drl_termtp_                           entry (ptr, fixed bin);
  8   101 dcl  gtss_drl_time_                             entry (ptr, fixed bin);
  8   102 dcl  gtss_drun_                                 entry (bit(1));
  8   103 dcl  gtss_dsd_lookup_                           entry (char(8) var) returns(fixed bin(24));
  8   104 dcl  gtss_dsd_process_                          entry (ptr, ptr, fixed bin(21), fixed bin(21), fixed bin(35));
  8   105 dcl  gtss_edit_dsd_                             entry (ptr, fixed bin(21)) returns(fixed bin(24));
  8   106 dcl  gtss_mcfc_empty                            entry (char(*) var);
  8   107 dcl  gtss_expand_pathname_                      entry (ptr, char(*), char(*), fixed bin(35));
  8   108 dcl  gtss_expand_pathname_$verify_umc           entry (ptr, char(*), char(*), bit(18), fixed bin(35));
  8   109 dcl  gtss_fault_processor_                      entry options(variable);
  8   110 dcl  gtss_find_cond_frame_		        entry (char(32) var) returns(ptr);
  8   111 dcl  gtss_fault_processor_$timer_runout         entry (ptr, char(*));
  8   112 dcl  gtss_filact_error_status_                  entry (fixed bin(35))returns(bit(12));
  8   113 dcl  gtss_filact_funct02_                       entry (ptr, bit(18), ptr, ptr, ptr, fixed bin(35));
  8   114 dcl  gtss_filact_funct03_                       entry (ptr, bit(18), ptr, ptr, ptr, fixed bin(35));
  8   115 dcl  gtss_filact_funct04_                       entry (ptr, bit(18), ptr, ptr, ptr, fixed bin(35));
  8   116 dcl  gtss_filact_funct05_                       entry (ptr, bit(18), ptr, ptr, ptr, fixed bin(35));
  8   117 dcl  gtss_filact_funct08_                       entry (ptr, bit(18), ptr, ptr, ptr, fixed bin(35));
  8   118 dcl  gtss_filact_funct10_                       entry (ptr, bit(18), ptr, ptr, ptr, fixed bin(35));
  8   119 dcl  gtss_filact_funct11_                       entry (ptr, bit(18), ptr, ptr, ptr, fixed bin(35));
  8   120 dcl  gtss_filact_funct14_                       entry (ptr, bit(18), ptr, ptr, ptr, fixed bin(35));
  8   121 dcl  gtss_filact_funct18_                       entry (ptr, bit(18), ptr, ptr, ptr, fixed bin(35));
  8   122 dcl  gtss_filact_funct19_                       entry (ptr, bit(18), ptr, ptr, ptr, fixed bin(35));
  8   123 dcl  gtss_filact_funct21_                       entry (ptr, bit(18), ptr, ptr, ptr, fixed bin(35));
  8   124 dcl  gtss_filact_funct22_                       entry (ptr, bit(18), ptr, ptr, ptr, fixed bin(35));
  8   125 dcl  gtss_mcfc_init_                            entry (char(*) var);
  8   126 dcl  gtss_interp_prim_                          entry options(variable);
  8   127 dcl  gtss_interp_prim_$callss                   entry (char(4), ptr);
  8   128 dcl  gtss_interp_prim_$sysret                   entry options(variable);
  8   129 dcl  gtss_interp_prim_$t_goto                   entry (char(4));
  8   130 dcl  gtss_ios_change_size_                      entry (fixed bin(24), fixed bin(24), bit(1), fixed bin(24), fixed bin(35));
  8   131 dcl  gtss_ios_close_                            entry (fixed bin(24), ptr, fixed bin(35));
  8   132 dcl  gtss_ios_exchange_names_                   entry (fixed bin(24), fixed bin(24), fixed bin(24), fixed bin(35));
  8   133 dcl  gtss_ios_initialize_                       entry options(variable);
  8   134 dcl  gtss_ios_io_                               entry (fixed bin(24), ptr, ptr, fixed bin(24), fixed bin(24), fixed bin(35));
  8   135 dcl  gtss_ios_open_                             entry (fixed bin(24), char(168), char(32), bit(6), bit(1), ptr, ptr, fixed bin(35));
  8   136 dcl  gtss_ios_position_                         entry (fixed bin(24), fixed bin(24), fixed bin(24), bit(6), ptr);
  8   137 dcl  gtss_mcfc_$delete		        entry (fixed bin(24), char(*), char(*), bit(36) aligned, ptr, fixed bin(35));
  8   138 dcl  gtss_mcfc_$open                            entry (char(*), char(*), bit(6), bit(36) aligned, ptr, fixed bin(35));
  8   139 dcl  gtss_mcfc_$close                           entry (char(*), char(*), bit(36) aligned, ptr, fixed bin(35));
  8   140 dcl  gtss_read_starCFP_                         entry (ptr, ptr, fixed bin(21), fixed bin(21), fixed bin(35));
  8   141 dcl  gtss_read_starCFP_$last_os                 entry (ptr, ptr, fixed bin(21), fixed bin(21), fixed bin(35));
  8   142 dcl  gtss_run_subsystem_                        entry (fixed bin(24));
  8   143 dcl  gtss_run_subsystem_$finish                 entry options(variable);
  8   144 dcl  gtss_run_subsystem_$restor                 entry (fixed bin(24), ptr);
  8   145 dcl  gtss_run_subsystem_$restor_perm            entry (fixed bin(24), ptr, fixed bin(18));
  8   146 dcl  gtss_set_slave_                            entry (fixed bin (24), ptr);
  8   147 dcl  gtss_set_slave_$load_bar                   entry (fixed bin (17));
  8   148 dcl  gtss_update_safe_store_                    entry (ptr);
  8   149 dcl  gtss_verify_access_		        entry (char(*), char(*), fixed bin(24), bit(6), bit(12) aligned);
  8   150 dcl  gtss_verify_access_$check_forced_access    entry (char(*), char(*), fixed bin(24));
  8   151 dcl  gtss_write_starCFP_                        entry (ptr, ptr, fixed bin(21), fixed bin(35));
  8   152 /*   END INCLUDE FILE gtss_entry_dcls.incl.pl1 */
      462 
      463 
  9     1 /* BEGIN INCLUDE FILE gtss_ascii_file_names.incl.pl1 */
  9     2 /*
  9     3*  Created:  (Wardd Multics)  09/01/78 1447.3 mst Fri 
  9     4**/
  9     5 
  9     6 /**	First parameter to gtss_expand_pathname_
  9     7* **/
  9     8 dcl 1 ascii_cat_file,
  9     9     2 nn    fixed bin,	/* Number of names. */
  9    10     2 name  (7)char(12);	/* List of cat/filedescr name . */
  9    11 
  9    12 /*   END INCLUDE FILE gtss_ascii_file_names.incl.pl1 */
      464 
      465 
 10     1 /* BEGIN INCLUDE FILE gtss_file_values.incl.pl1 */
 10     2 /*
 10     3*  Created: (Wardd Multics)  09/01/78 1447.1 mst Fri 
 10     4**/
 10     5 
 10     6 /**	The gtss_file_values structure provides parameters to the
 10     7*	gtss_attributes_mgr_ subroutine.
 10     8*
 10     9*	The caller must provide space for this structure, fill in
 10    10*	the version with 1, the dname and ename with the file directory
 10    11*	and entry name, and for calls to gtss_attributes_mgr_$set,
 10    12*	fill in values to be reset and set the corresponding set_switch
 10    13*	to "1"b.
 10    14*
 10    15*	If the (Multics) file located is a directory
 10    16*	a GCOS catalog is implied.
 10    17*
 10    18*	If both ename and new_ename are set but no set_switch
 10    19*	is "1"b (and the set entry is called) this implies
 10    20*	that the existing attribute values are being renamed
 10    21*	to the new entry.
 10    22*
 10    23*	Then: call gtss_attributes_mgr_$set(addr(gtss_file_values),code);
 10    24*
 10    25*	Use of ename/new_ename combinations
 10    26*	for set entry.
 10    27*
 10    28*	-|-----------|-----------|-|-----------------|
 10    29*	|  ename   |new_ename ||    meaning     |
 10    30*	=|===========|===========|=|=================|
 10    31*	|  blanks  |  blanks  ||    illegal     |
 10    32*	-|-----------|-----------|-|-----------------|
 10    33*	|  blanks  |not blanks||    initial     |
 10    34*	|          |          ||    setting     |
 10    35*	-|-----------|-----------|-|-----------------|
 10    36*	|not blanks|  blanks  || check enames's |
 10    37*	|          |          ||attribute values|
 10    38*	|          |          ||   and reset.   |
 10    39*	-|-----------|-----------|-|-----------------|
 10    40*	|not blanks|not blanks|| delete ename's |
 10    41*	|          |          || values and put |
 10    42*	|          |          || on values for  |
 10    43*	|          |          ||  new_ename's   |
 10    44*	-|-----------|-----------|-|-----------------|
 10    45***/
 10    46 dcl  attr_name                (0:7)char(4)static int options(constant)init(
 10    47 			/* 0 */ "mode"
 10    48 ,			/* 1 */ "maxl"
 10    49 ,			/* 2 */ "curl"
 10    50 ,			/* 3 */ "busy"
 10    51 ,			/* 4 */ "attr"
 10    52 ,			/* 5 */ "null"
 10    53 ,			/* 6 */ "noal"
 10    54 ,			/* 7 */ "crdt"
 10    55 			);
 10    56 dcl 1 gtss_file_values	aligned automatic
 10    57 ,     3 version		fixed bin(17)	/* Current version is 1. (OUT) */
 10    58 ,     3 dname		char(168)unal	/* Directory name. (IN) */
 10    59 ,     3 ename		char(032)unal	/* Entry name. (IN) */
 10    60 ,     3 new_ename		char(032)unal	/* New entry name. (IN) */
 10    61 ,     3 change_name		bit(1)		/* "1"b => Change segment name. (IN) */
 10    62 ,     3 catalog		bit(1)		/* "1"b => File is a catalog (Multics directory). (OUT) */
 10    63 ,     3 info_ptr		ptr		/* hcs_$status_long (4. entry_ptr) info structure address. (OUT) */
 10    64 ,     3 set_switch				/* "1"b => Set corresponding value. (IN) */
 10    65 ,       4 mode_random	bit(01)unal	/* 0. Set the random/sequential(linked) field. */
 10    66 ,       4 maxll		bit(01)unal	/* 1. Set max size value. */
 10    67 ,       4 curll		bit(01)unal	/* 2. Set current size value. */
 10    68 ,       4 busy		bit(01)unal	/* 3. Set file as busy. */
 10    69 ,       4 attr		bit(01)unal	/* 4. Set user attributes value. */
 10    70 ,       4 null_file		bit(01)unal	/* 5. Set null file value. */
 10    71 ,       4 number_allocations	bit(01)unal	/* 6. Set or increment number of uses. */
 10    72 ,       4 creation_date	bit(01)unal	/* 7. Set file creation date. */
 10    73 ,       4 not_in_use	bit(28)unal
 10    74 			/* The above set_ variables should be declared in an order
 10    75*			   corresponding to the value in the attr_name array. */
 10    76 ,     3 data_flags				/* (OUT|IN) */
 10    77 ,       4 mode_random	bit(01)unal	/* "1"b => random. */
 10    78 ,       4 busy		bit(01)unal	/* "1"b => file is busy. */
 10    79 ,       4 null_file		bit(01)unal	/* "1"b => file is null. */
 10    80 ,       4 not_in_use2	bit(33)unal
 10    81 ,     3 data_fields				/* (OUT|IN) */
 10    82 ,       4 curll		fixed bin(35)	/* Current length in llinks (>=0). */
 10    83 ,       4 maxll		fixed bin(35)	/* Maximum length in llinks (>=0). */
 10    84 ,       4 number_allocations	fixed bin(35)	/* 0 => set | >0 => increment modulo 262144. */
 10    85 ,     3 attributes				/* (OUT|IN) */
 10    86 ,       4 not_in_use3	bit(01)unal
 10    87 ,       4 attr		bit(35)unal	/* User specified file attribute value. */
 10    88 ,     3 creation_date	char(06)		/* MMDDYY of creation. */
 10    89 ;
 10    90 
 10    91 
 10    92 /*   END INCLUDE FILE gtss_file_values.incl.pl1 */
      466 
      467 
 11     1 /* BEGIN INCLUDE FILE gtss_FMS_catalog.incl.pl1  */
 11     2 /*
 11     3*  Created: (Wardd Multics)  09/14/78 1813.7 mst Thu 
 11     4*  Change:	Paul Benjamin	10/12/79	Further break down FS0_PBK_05 
 11     5**/
 11     6 
 11     7 /**	The structure FMS_catalog1 is from
 11     8*	FMS PROGRAM LOGIC MANUAL
 11     9*	DC26, Rev. 0, January 1974
 11    10*	Page 4-9
 11    11***/
 11    12 dcl  FMS_cat_ptr              ptr init(null());
 11    13 dcl  1 FMS_catalog		aligned based(FMS_cat_ptr)
 11    14 ,     3 FSnTYP_0
 11    15 ,       4 bits00_05		bit(06)unal
 11    16 ,       4 bits06_10		bit(05)unal
 11    17 ,       4 bits11_17		bit(07)unal
 11    18 ,       4 bits18_35		bit(18)unal
 11    19 ,     3 FSnNLL_1
 11    20 ,       4 bits00_17		bit(18)unal
 11    21 ,       4 bits18_35		bit(18)unal
 11    22 ,     3 FSnPLL_2
 11    23 ,       4 bits00_17		bit(18)unal
 11    24 ,       4 bits18_35		bit(18)unal
 11    25 ,     3 FSnPTP_3
 11    26 ,       4 bits00_17		bit(18)unal
 11    27 ,       4 bits18_35		bit(18)unal
 11    28 ,     3 FSnCBK_4
 11    29 ,       4 bits00_17		bit(18)unal
 11    30 ,       4 bits18_35		bit(18)unal
 11    31 ;
 11    32 
 11    33 /**	Page 4-10.	**/
 11    34 dcl  1 Type_0_Catalog	aligned based(FMS_cat_ptr)
 11    35 ,     3 FS0_TYP_00		bit(36)
 11    36 ,     3 FS0_NLL_01
 11    37 ,       4 bits00_17		bit(18)unal
 11    38 ,       4 bits18_35		bit(18)unal
 11    39 ,     3 FS0_PLL_02		bit(36)
 11    40 ,     3 FS0_PTP_03
 11    41 ,       4 bits00_17		fixed bin(17)unal
 11    42 ,       4 bits18_35		bit(18)unal
 11    43 ,     3 FS0_CBK_04
 11    44 ,       4 bits00_17		fixed bin(17)unal
 11    45 ,       4 bits18_35		bit(18)unal
 11    46 ,     3 FS0_PBK_05
 11    47 ,       4 bits00_17		bit(18)unal
 11    48 ,       4 bits18_35		bit(18)unal
 11    49 ,     3 FS0_CNM_06_07	bit(72)
 11    50 ,     3 FS0_ORG_10_11	bit(72)
 11    51 ,     3 FS0_PWD_12_13	bit(72)
 11    52 ,     3 FS0_CDT_14		bit(36)
 11    53 ,     3 FS0_MOD_15		bit(36)
 11    54 ,     3 FS0_IND_16		bit(36)
 11    55 ,     3 FS0_PER_17
 11    56 ,       4 bits00_11		bit(12)unal
 11    57 ,       4 bits12_14		bit(03)unal
 11    58 ,       4 bit15		bit(01)unal
 11    59 ,       4 bit16		bit(01)unal
 11    60 ,       4 bit17		bit(01)unal
 11    61 ,       4 bits18_35		bit(18)unal
 11    62 ,     3 FS0_OP1_20		bit(36)
 11    63 ,     3 FS0_OP2_21		bit(36)
 11    64 ,     3 FS0_VAR_22_76	(15)
 11    65 ,       4 FS0_SNM_00_01	bit(72)
 11    66 ,       4 FS0_SPT_02
 11    67 ,         5 bit00		bit(01)unal
 11    68 ,         5 bit01		bit(01)unal
 11    69 ,         5 bits02_17	bit(16)unal
 11    70 ,         5 bits18_35	bit(18)unal
 11    71 ,     3 checksum_77		bit(36)
 11    72 ;
 11    73 
 11    74 /* Condensed form of type 0 record. */
 11    75 dcl 1 t0c			aligned based(FMS_cat_ptr)
 11    76 ,     2 fill		(0:17)bit(36)
 11    77 ,     2 name		(15)
 11    78 ,       3 bcd		bit(72)
 11    79 ,       3 more		bit(36)
 11    80 ;
 11    81 
 11    82 /**	Page 4-10.	**/
 11    83 dcl  Type_1_ptr               ptr init(null());
 11    84 dcl  1 Type_1_Catalog	aligned based(Type_1_ptr)
 11    85 ,     3 FS1_TYP_00		bit(36)
 11    86 ,     3 FS1_NLL_01
 11    87 ,       4 bits00_17		bit(18)unal
 11    88 ,       4 bits18_35		bit(18)unal
 11    89 ,     3 FS1_PLL_02		bit(36)
 11    90 ,     3 FS1_PTP_03
 11    91 ,       4 bits00_17		fixed bin(17)unal
 11    92 ,       4 bits18_35		bit(18)unal
 11    93 ,     3 FS1_CBK_04
 11    94 ,       4 bits00_17		bit(18)unal
 11    95 ,       4 bits18_35		bit(18)unal
 11    96 ,     3 FS1_OPN_05		bit(36)
 11    97 ,     3 FS1_VAR_06_76	(19)
 11    98 ,       4 FS1_SNM_00_01	bit(72)
 11    99 ,       4 FS1_SPT_02
 11   100 ,         5 bit00		bit(01)unal
 11   101 ,         5 bit01		bit(01)unal
 11   102 ,         5 bits02_17	bit(16)unal
 11   103 ,         5 bits18_35	bit(18)unal
 11   104 ,     3 checksum_77		bit(36)
 11   105 ;
 11   106 
 11   107 /* Condensed form of type 1 record. */
 11   108 dcl 1 t1c			aligned based(FMS_cat_ptr)
 11   109 ,     2 fill		(0:5)bit(36)
 11   110 ,     2 name		(19) like t0c.name
 11   111 ;
 11   112 
 11   113 /**	Page 4-11.	**/
 11   114 dcl  1 Type_2_Catalog	aligned based(FMS_cat_ptr)
 11   115 ,     3 FS2_TYP_00		bit(36)
 11   116 ,     3 FS2_NLL_01		bit(36)
 11   117 ,     3 FS2_PLL_02		bit(36)
 11   118 ,     3 FS2_PTP_03		bit(36)
 11   119 ,     3 FS2_CBK_04		bit(36)
 11   120 ,     3 FS2_PBK_05
 11   121 ,       4 bits00_17		bit(18)unal
 11   122 ,       4 bits18_35		bit(18)unal
 11   123 ,     3 FS2_FNM_06_07	bit(72)
 11   124 ,     3 FS2_ORG_10_11	bit(72)
 11   125 ,     3 FS2_PWD_12_13	bit(72)
 11   126 ,     3 FS2_CDT_14		bit(36)
 11   127 ,     3 FS2_MOD_15		bit(36)
 11   128 ,     3 FS2_IND_16		bit(36)
 11   129 ,     3 FS2_PER_17
 11   130 ,       4 bits00_11		bit(12)unal
 11   131 ,       4 bits12_15		bit(04)unal
 11   132 ,       4 bit16		bit(01)unal
 11   133 ,       4 bit17		bit(01)unal
 11   134 ,       4 bits18_35		bit(18)unal
 11   135 ,     3 FS2_MTR_20_21	bit(72)
 11   136 ,     3 FS2_FU1_22
 11   137 ,       4 bit00		bit(01)unal
 11   138 ,       4 bit01		bit(01)unal
 11   139 ,       4 bit02		bit(01)unal
 11   140 ,       4 bit03		bit(01)unal
 11   141 ,       4 bit04		bit(01)unal
 11   142 ,       4 bit05		bit(01)unal
 11   143 ,       4 bit06		bit(01)unal
 11   144 ,       4 bit07		bit(01)unal
 11   145 ,       4 bit08		bit(01)unal
 11   146 ,       4 bit09		bit(01)unal
 11   147 ,       4 bits10_11		bit(02)unal
 11   148 ,       4 bits12_17		bit(06)unal
 11   149 ,       4 bits18_35		bit(18)unal
 11   150 ,     3 FS2_FUS_23
 11   151 ,       4 bits00_17		bit(18)unal
 11   152 ,       4 bit18		bit(01)unal
 11   153 ,       4 bit19		bit(01)unal
 11   154 ,       4 bit20		bit(01)unal
 11   155 ,       4 bit21		bit(01)unal
 11   156 ,       4 bit22		bit(01)unal
 11   157 ,       4 bit23		bit(01)unal
 11   158 ,       4 bit24		bit(01)unal
 11   159 ,       4 bit25		bit(01)unal
 11   160 ,       4 bit26		bit(01)unal
 11   161 ,       4 bit27		bit(01)unal
 11   162 ,       4 bit28		bit(01)unal
 11   163 ,       4 bit29		bit(01)unal
 11   164 ,       4 bits30_35		bit(06)unal
 11   165 ,     3 FS2_USI_24
 11   166 ,       4 bit00		bit(01)unal
 11   167 ,       4 bits01_35		bit(35)unal
 11   168 ,     3 FS2_FU2_25
 11   169 ,       4 bit00		bit(01)unal
 11   170 ,       4 bit01		bit(01)unal
 11   171 ,       4 bit02		bit(01)unal
 11   172 ,       4 bit03		bit(01)unal
 11   173 ,       4 bit04		bit(01)unal
 11   174 ,       4 bit05		bit(01)unal
 11   175 ,       4 bit06		bit(01)unal
 11   176 ,       4 bit07		bit(01)unal
 11   177 ,       4 bit08		bit(01)unal
 11   178 ,       4 bit09		bit(01)unal
 11   179 ,       4 bit10		bit(01)unal
 11   180 ,       4 bit11		bit(01)unal
 11   181 ,       4 bit12		bit(01)unal
 11   182 ,       4 bit13		bit(01)unal
 11   183 ,       4 bit14		bit(01)unal
 11   184 ,       4 bit15		bit(01)unal
 11   185 ,       4 bit16		bit(01)unal
 11   186 ,       4 bit17		bit(01)unal
 11   187 ,       4 bits18_35		bit(18)unal
 11   188 ,     3 FS2_LCD_26		bit(36)
 11   189 ,     3 FS2_LAD_27		bit(36)
 11   190 ,     3 FS2_LST_30
 11   191 ,       4 bits00_05		bit(06)unal
 11   192 ,       4 bits06_35		bit(30)unal
 11   193 ,     3 FS2_ATB_31		bit(36)
 11   194 ,     3 FS2_PDF_32		bit(36)
 11   195 ,     3 FS2_STC_33		bit(36)
 11   196 ,     3 FS2_BSY_34		bit(36)
 11   197 ,     3 FS2_TBC_35		bit(36)
 11   198 ,     3 FS2_OP2_7_36_43	(2:7)bit(36)
 11   199 ,     3 FS2_VAR_44_75
 11   200 ,       4 Device_descriptor
 11   201 ,         5 bits00_03	bit(04)unal	/* 0101 */
 11   202 ,         5 bits04_05	bit(02)unal
 11   203 ,         5 bits06_35	bit(30)unal
 11   204 ,       4 Space_descriptor
 11   205 ,         5 bit00		bit(01)unal
 11   206 ,         5 bit01		bit(01)unal	/* =0 => space desc. */
 11   207 ,         5 bit02		bit(01)unal
 11   208 ,         5 bits03_17	bit(15)unal
 11   209 ,         5 bits18_35	bit(18)unal
 11   210 ,       4 zero		(24)bit(36)
 11   211 ,     3 zero_76		bit(36)
 11   212 ,     3 checksum_77		bit(36)
 11   213 ;
 11   214 
 11   215 /**	Page 4-13.	**/
 11   216 dcl  Type_4_ptr               ptr init(null());
 11   217 dcl  1 Type_4_Catalog	aligned based(Type_4_ptr)
 11   218 ,     3 FS4_TYP_00		bit(36)
 11   219 ,     3 FS4_NLL_01		bit(36)
 11   220 ,     3 FS4_PLL_02		bit(36)
 11   221 ,     3 FS4_PTP_03		bit(36)
 11   222 ,     3 FS4_CBK_04		bit(36)
 11   223 ,     3 FS4_OP1_2_05_06	bit(72)
 11   224 ,     3 FS4_VAR_07_75	bit(1980)	/* 1980 = 55 * 36bits @ */
 11   225 ,     3 zero		bit(36)
 11   226 ,     3 checksum_77		bit(36)
 11   227 ;
 11   228 
 11   229 /**	Page 2-69		**/
 11   230 dcl  buffer_ptr               ptr init(null());
 11   231 dcl 1 callers_buffer	aligned based(buffer_ptr)
 11   232 ,     3 first25		(25)bit(36)	/* Work area for  ???. */
 11   233 /**	Next 35 words. FMS work area.	**/
 11   234 ,     3 W00_FSCODE		bit(036)
 11   235 ,     3 W01_02_FSCALL	bit(072)
 11   236 ,     3 W03		bit(036)
 11   237 ,     3 W04_06		bit(108)
 11   238 ,     3 W07		bit(036)
 11   239 ,     3 W10		bit(036)
 11   240 ,     3 W11_12		bit(072)
 11   241 ,     3 W13_FSSSLV		bit(036)
 11   242 ,     3 W14_15		bit(072)
 11   243 ,     3 W16_FSFBSY		bit(036)
 11   244 ,     3 W17_FSRETP		bit(036)
 11   245 ,     3 W20
 11   246 ,       4 FSMME		unal
 11   247 ,         5 bits00_17	bit(18)unal
 11   248 ,       4 FSARG		unal
 11   249 ,         5 bits18_35	bit(18)unal
 11   250 ,     3 W21_FSCPOS
 11   251 ,       4 bits00_17		bit(18)unal
 11   252 ,       4 bits18_35		bit(18)unal
 11   253 ,     3 W22_FSCCFP
 11   254 ,       4 bits00_17		bit(18)unal
 11   255 ,       4 bits18_35		bit(18)unal
 11   256 ,     3 W23_FSPCFP
 11   257 ,       4 bits00_17		bit(18)unal
 11   258 ,       4 bits18_35		bit(18)unal
 11   259 ,     3 W24
 11   260 ,       4 FSREGU		unal
 11   261 ,         5 bits00_17	bit(18)unal
 11   262 ,       4 FSREGL		unal
 11   263 ,         5 bits18_35	bit(18)unal
 11   264 ,     3 W25_FSCDEV
 11   265 ,       4 bits00_15		bit(16)unal
 11   266 ,       4 bit16		bit(01)unal
 11   267 ,       4 bit17		bit(01)unal
 11   268 ,       4 bits18_35		bit(18)unal
 11   269 ,     3 W26_FSDDEV
 11   270 ,       4 bits00_15		bit(16)unal
 11   271 ,       4 bit16		bit(01)unal
 11   272 ,       4 bit17		bit(01)unal
 11   273 ,       4 bits18_35		bit(18)unal
 11   274 ,     3 W27_FSENDT		bit(036)
 11   275 ,     3 W30_FSCPAT		bit(036)
 11   276 ,     3 W31_FSPERM		bit(036)
 11   277 ,     3 W32_FSDDCW		bit(036)
 11   278 ,     3 W33_FSDCWP		bit(036)
 11   279 ,     3 W34_FSDUPD		bit(036)
 11   280 ,     3 W35_FSAVBL		bit(036)
 11   281 ,     3 W36_FSTEMP		bit(036)
 11   282 ,     3 W37_FSCKSM		bit(036)
 11   283 ,     3 W40_FSIOS1		bit(036)
 11   284 ,     3 W41_FSSRW1		bit(036)
 11   285 ,     3 W42_FSSRW2		bit(036)
 11   286 ,     3 W43_FSBFER		bit(036)	/* Starting location of buffer for catalog record(s). */
 11   287 ,     3 remainder_of_buffer	(319)bit(36)
 11   288 ;
 11   289 
 11   290 /*   END INCLUDE FILE gtss_FMS_catalog.incl.pl1 */
      468 
      469 
 12     1 
 12     2 declare						/* Information returned by hcs_$status_ and hcs_$status_long */
 12     3 
 12     4 
 12     5          1 branch aligned based (info_ptr),		/* information about this particular branch */
 12     6          2 type bit (2) unal,				/* "00"b = link, "01"b = segment, "10"b = directory */
 12     7          2 nnames bit (16) unal,			/* number of names this entry has */
 12     8          2 names_relp bit (18) unal,			/* pointer, relative to base of segment, to names */
 12     9          2 dtm bit (36) unal,				/* date-time the segment was last modified */
 12    10          2 dtu bit (36) unal,				/* date-time the segment was last used */
 12    11          2 mode bit (5) unal,				/* the user's access modes to the entry */
 12    12          2 padding bit (13) unal,			/* yawn */
 12    13          2 records_used bit (18) unal,			/* number of blocks actually occupied by entry */
 12    14 
 12    15 /* limit of information returned by status_ */
 12    16 
 12    17          2 dtd bit (36) unal,				/* date-time the segment was last dumped */
 12    18          2 dtbm bit (36) unal,			/* date-time the branch for the entry was modified */
 12    19          2 account bit (36) unal,			/* account to which storage is charged */
 12    20          2 current_length bit (12) unal,		/* maximum length in blocks */
 12    21          2 bit_count bit (24) unal,			/* length of entry in bits */
 12    22          2 device_id bit (4) unal,			/* device on which segment currently resides */
 12    23          2 mdid bit (4) unal,				/* device to which it is currently being moved */
 12    24          2 copy_switch bit (1) unal,			/* segment copy switch */
 12    25          2 tpd bit (1) unal,				/* transparent paging device switch */
 12    26          2 more_padding bit (8) unal,			/* yawn, yawn */
 12    27          2 ring_brackets (0:2) bit (6) unal,		/* ring brackets for entry */
 12    28          2 uid bit (36) unal,				/* unique identifier */
 12    29 
 12    30 
 12    31          1 link aligned based (info_ptr),		/* information about link entries */
 12    32          2 type bit (2) unal,				/* as above */
 12    33          2 nnames bit (16) unal,			/* number of names for this link */
 12    34          2 names_relp bit (18) unal,			/* as above */
 12    35          2 dtbm bit (36) unal,			/* date-time, entry for link was last modified */
 12    36          2 dtd bit (36) unal,				/* date-time dumped */
 12    37          2 pathname_length bit (18) unal,		/* length of link pathname */
 12    38          2 pathname_relp bit (18) unal,			/* pointer, relative to based of segment, to name */
 12    39 
 12    40          entry_names (1) character (32) aligned based (pointer (area_pointer, branch.names_relp)),
 12    41 						/* array of names returned */
 12    42          pathname character (fixed (link.pathname_length)) aligned based (pointer (area_pointer, link.pathname_relp)),
 12    43 						/* pathname a link points to */
 12    44 
 12    45          area_pointer pointer,			/* to area in which to allocate names */
 12    46          info_ptr pointer;				/* to structure returned */
 12    47 
 12    48 
      470 
      471 
 13     1 
 13     2      declare	/*  Structures used in acl manipulation.  - J.M. Broughton 07/27/73 */
 13     3 
 13     4 
 13     5 	1 segment_acl (acl_count) based (acl_ptr) aligned,
 13     6 	  2 access_name character (32),			/* process to which this entry applies */
 13     7 	  2 modes bit (36),					/* read, execute, and write */
 13     8 	  2 zero_pad bit (36),				/* for extended acl */
 13     9 	  2 status_code fixed bin(35),			/* standard error code for this entry only */
 13    10 
 13    11 
 13    12 	1 dir_acl (acl_count) based (acl_ptr) aligned,
 13    13 	  2 access_name character (32),			/* process to which entry applys */
 13    14 	  2 dir_modes bit (36),				/* status, modify, and append */
 13    15 	  2 status_code fixed bin(35),			/* as above */
 13    16 
 13    17 
 13    18 	acl_count fixed bin,				/* number of entries in these structures */
 13    19 	acl_ptr pointer;					/* pointer to these structures */
 13    20 
 13    21 
      472 
      473 
 14     1 /* BEGIN INCLUDE FILE gtss_filact_options.incl.pl1 */
 14     2 /*
 14     3*  Created: (Wardd Multics)  09/08/78 1017.4 mst Fri 
 14     4**/
 14     5 dcl  now			fixed bin;
 14     6 dcl  options_ptr		ptr init(null());
 14     7 dcl 1 optionsx		aligned based(options_ptr)
 14     8 ,     3 word1
 14     9 ,       4 option_bit	unal
 14    10 ,         5 j		bit(01)unal	/* Space must be contiguous. */
 14    11 ,         5 b		bit(01)unal	/* Random  (CF only). */
 14    12 ,         5 c		bit(01)unal	/* File TSS created (CF only) */
 14    13 ,         5 d		bit(01)unal	/* I-D-S file. */
 14    14 ,         5 k		bit(01)unal	/* 320-word blocks (CF only). */
 14    15 ,         5 f		bit(01)unal	/* File already on tape or nonstructured disk pack (non-TSS). */
 14    16 ,         5 bit_06		bit(01)unal	/* (not used). */
 14    17 ,         5 h		bit(01)unal	/* Attributes present. */
 14    18 ,         5 i		bit(01)unal	/* User-specified attributes (CF & MF only). */
 14    19 ,         5 bits09_12	bit(04)unal	/* (not used). */
 14    20 ,         5 y		bit(01)unal	/* FMS protection options specified. */
 14    21 ,         5 bits14_17	bit(04)unal	/* (not used). */
 14    22 ,       4 device_name	bit(12)unal
 14    23 ,       4 device_type	bit(06)unal
 14    24 ,     3 word2
 14    25 ,       4 initial_file_size	bit(18)unal	/* (CF only). */
 14    26 ,       4 max_file_size	bit(18)unal	/* 0 => max size unlimited. */
 14    27 ,     3 words3_now		(now)
 14    28 ,       4 optional_specific_permissions
 14    29 ,         5 USERID		bit(72)unal
 14    30 ,         5 permission_bit	like permissionsx
 14    31 ,     3 word_now_plus_1
 14    32 ,       4 end_of_list	fixed bin(35)
 14    33 ,     3 word_now_plus_2
 14    34 ,       4 fill		bit(01)unal
 14    35 ,       4 user_specified_attributes bit(35)unal	/* (CF & MF only). */
 14    36 ;
 14    37 
 15     1 /* BEGIN INCLUDE FILE gtss_filact_permissions.incl.pl1 */
 15     2 /*
 15     3*  Created: (Wardd Multics)  09/08/78 1018.0 mst Fri 
 15     4**/
 15     5 dcl  permissions_ptr	ptr init(null());
 15     6 dcl 1 permissionsx		aligned based(permissions_ptr)
 15     7 ,     3 r			bit(01)unal	/* Read permission. 	*/
 15     8 ,     3 w			bit(01)unal	/* Write permission. 	*/
 15     9 ,     3 a			bit(01)unal	/* Append permission. 	*/
 15    10 ,     3 e			bit(01)unal	/* Execute permission. 	*/
 15    11 ,     3 p			bit(01)unal	/* Purge permission. 	*/
 15    12 ,     3 m			bit(01)unal	/* Modify permission. 	*/
 15    13 ,     3 l			bit(01)unal	/* Lock permission. 	*/
 15    14 ,     3 bit_07		bit(01)unal	/* (not used). */
 15    15 ,     3 c			bit(01)unal	/* Create permission. 	*/
 15    16 ,     3 x			bit(01)unal	/* Recovery permission. 	*/
 15    17 ,     3 bits10_35		bit(26)unal	/* (not used). */
 15    18 ;
 15    19 
 15    20 /*   END INCLUDE FILE gtss_filact_permissions.incl.pl1 */
 14    38 
 14    39 
 14    40 /*   END INCLUDE FILE gtss_filact_options.incl.pl1 */
      474 
      475 
 16     1 /* BEGIN INCLUDE FILE gtss_db_names.incl.pl1 */
 16     2 /*
 16     3*  Created:  (Wardd Multics)  03/29/79 1909.1 mst Thu 
 16     4**/
 16     5 
 16     6 /* To provide a new debugging switch:
 16     7*
 16     8*   1) Locate the comment "Insert next entry above this comment".
 16     9*
 16    10*   2) Place a new declaration for a db_ variable just
 16    11*      above this comment, in the same manner as the
 16    12*      current declaration just above the comment, using
 16    13*      the next integer gtss_ext_$db index.
 16    14*
 16    15*   3) Execute the gtss|db_names ted macro (this updates
 16    16*      the sorted name table).
 16    17*
 16    18*   4) Example use:
 16    19*
 16    20*      if db_drl_grow then do;
 16    21*      .
 16    22*      .
 16    23*      .
 16    24*      debug i/o statements using com_err_ or ioa_
 16    25*      .
 16    26*      .
 16    27*      .
 16    28*      end;
 16    29*
 16    30**/
 16    31 
 16    32 dcl (
 16    33  db_		bit(1) defined(gtss_ext_$db(01))
 16    34 ,db_CFP_input	bit(1) defined(gtss_ext_$db(02))
 16    35 ,db_drl_addmem	bit(1) defined(gtss_ext_$db(03))
 16    36 ,db_drl_defil	bit(1) defined(gtss_ext_$db(04))
 16    37 ,db_drl_filact	bit(1) defined(gtss_ext_$db(05))
 16    38 ,db_drl_filsp	bit(1) defined(gtss_ext_$db(06))
 16    39 ,db_drl_grow	bit(1) defined(gtss_ext_$db(07))
 16    40 ,db_drl_rew	bit(1) defined(gtss_ext_$db(08))
 16    41 ,db_filact_funct02	bit(1) defined(gtss_ext_$db(09))
 16    42 ,db_filact_funct03	bit(1) defined(gtss_ext_$db(10))
 16    43 ,db_filact_funct04	bit(1) defined(gtss_ext_$db(11))
 16    44 ,db_filact_funct05	bit(1) defined(gtss_ext_$db(12))
 16    45 ,db_filact_funct10	bit(1) defined(gtss_ext_$db(13))
 16    46 ,db_filact_funct11	bit(1) defined(gtss_ext_$db(14))
 16    47 ,db_filact_funct14	bit(1) defined(gtss_ext_$db(15))
 16    48 ,db_filact_funct18	bit(1) defined(gtss_ext_$db(16))
 16    49 ,db_filact_funct19	bit(1) defined(gtss_ext_$db(17))
 16    50 ,db_filact_funct21	bit(1) defined(gtss_ext_$db(18))
 16    51 ,db_filact_funct22	bit(1) defined(gtss_ext_$db(19))
 16    52 ,db_interp_prim	bit(1) defined(gtss_ext_$db(20))
 16    53 ,db_ios		bit(1) defined(gtss_ext_$db(21))
 16    54 ,db_run_subsystem	bit(1) defined(gtss_ext_$db(22))
 16    55 ,db_drl_t_cfio	bit(1) defined(gtss_ext_$db(23))
 16    56 ,db_drl_switch	bit(1) defined(gtss_ext_$db(24))
 16    57 ,db_drl_dio	bit(1) defined(gtss_ext_$db(25))
 16    58 ,db_drl_retfil	bit(1) defined(gtss_ext_$db(26))
 16    59 ,db_drl_msub	bit(1) defined(gtss_ext_$db(27))
 16    60 ,db_drl_callss	bit(1) defined(gtss_ext_$db(28))
 16    61 ,db_drl_rstswh	bit(1) defined(gtss_ext_$db(29))
 16    62 ,db_drl_setswh	bit(1) defined(gtss_ext_$db(30))
 16    63 ,db_mcfc		bit(1) defined(gtss_ext_$db(31))
 16    64 ,db_dq		bit(1) defined(gtss_ext_$db(32))
 16    65 ,db_abs		bit(1) defined(gtss_ext_$db(33))
 16    66 ,db_attributes_mgr	bit(1) defined(gtss_ext_$db(34))
 16    67 ,db_expand_pathname bit(1) defined(gtss_ext_$db(35))
 16    68 ,db_drl_part	bit(1) defined(gtss_ext_$db(36))
 16    69 ,db_drl_morlnk	bit(1) defined(gtss_ext_$db(37))
 16    70 ,db_drl_kin	bit(1) defined(gtss_ext_$db(38))
 16    71 /* Insert next entry above this comment. */
 16    72 );
 16    73 
 16    74 /* Table of sorted names. */
 16    75 dcl 1 debug_bit_names (38) static int options(constant)
 16    76 ,     2 name char(18)var init(
 16    77          "" ,"CFP_input" ,"abs" ,"attributes_mgr" ,"dq" ,"drl_addmem"
 16    78          ,"drl_callss" ,"drl_defil" ,"drl_dio" ,"drl_filact" ,"drl_filsp"
 16    79          ,"drl_grow" ,"drl_kin" ,"drl_morlnk" ,"drl_msub" ,"drl_part"
 16    80          ,"drl_retfil" ,"drl_rew" ,"drl_rstswh" ,"drl_setswh" ,"drl_switch"
 16    81          ,"drl_t_cfio" ,"expand_pathname" ,"filact_funct02" ,"filact_funct03"
 16    82          ,"filact_funct04" ,"filact_funct05" ,"filact_funct10" ,"filact_funct11"
 16    83          ,"filact_funct14" ,"filact_funct18" ,"filact_funct19" ,"filact_funct21"
 16    84          ,"filact_funct22" ,"interp_prim" ,"ios" ,"mcfc" ,"run_subsystem"
 16    85 			)
 16    86 ,     2 value fixed bin init(
 16    87          01 ,02 ,33 ,34 ,32 ,03 ,28 ,04 ,25 ,05 ,06 ,07 ,38 ,37 ,27 ,36 ,26 ,08
 16    88          ,29 ,30 ,24 ,23 ,35 ,09 ,10 ,11 ,12 ,13 ,14 ,15 ,16 ,17 ,18 ,19 ,20 ,21
 16    89          ,31 ,22
 16    90 			);
 16    91 /* End of table. */
 16    92 /*   END INCLUDE FILE gtss_db_names.incl.pl1 */
      476 
      477      end						/* gtss_filact_funct19_ */;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    12/10/84  1044.0  gtss_filact_funct19_.pl1          >spec>on>7105>gtss_filact_funct19_.pl1
78           1    09/09/83  1713.9  gtss_filact_intp3.incl.pl1        >ldd>include>gtss_filact_intp3.incl.pl1
80           2    09/09/83  1713.8  gtss_filact_intp1.incl.pl1        >ldd>include>gtss_filact_intp1.incl.pl1
452          3    09/09/83  1714.3  gtss_ust_ext_.incl.pl1            >ldd>include>gtss_ust_ext_.incl.pl1
454          4    09/09/83  1713.8  gtss_ext_.incl.pl1                >ldd>include>gtss_ext_.incl.pl1
456          5    09/09/83  1713.3  gtss_filact_status.incl.pl1       >ldd>include>gtss_filact_status.incl.pl1
458          6    12/10/84  1029.8  gtss_pnterr.incl.pl1              >spec>on>7105>gtss_pnterr.incl.pl1
460          7    12/15/83  1100.4  mc.incl.pl1                       >ldd>include>mc.incl.pl1
462          8    12/10/84  1029.7  gtss_entry_dcls.incl.pl1          >spec>on>7105>gtss_entry_dcls.incl.pl1
464          9    09/09/83  1713.5  gtss_ascii_file_names.incl.pl1    >ldd>include>gtss_ascii_file_names.incl.pl1
466         10    09/09/83  1714.0  gtss_file_values.incl.pl1         >ldd>include>gtss_file_values.incl.pl1
468         11    09/09/83  1713.5  gtss_FMS_catalog.incl.pl1         >ldd>include>gtss_FMS_catalog.incl.pl1
470         12    04/29/76  1139.2  status_info.incl.pl1              >ldd>include>status_info.incl.pl1
472         13    02/13/75  1618.9  acls.incl.pl1                     >ldd>include>acls.incl.pl1
474         14    09/09/83  1713.9  gtss_filact_options.incl.pl1      >ldd>include>gtss_filact_options.incl.pl1
14-38       15    09/09/83  1713.9  gtss_filact_permissions.incl.pl1  >ldd>include>gtss_filact_permissions.incl.pl1
476         16    09/09/83  1713.6  gtss_db_names.incl.pl1            >ldd>include>gtss_db_names.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
FMS_block_ptr                   000176 automatic       pointer                  initial dcl 253 set ref 253*
FMS_cat_ptr                     000316 automatic       pointer                  initial dcl 11-12 set ref 11-12*
FMS_data_block                         based           structure                level 1 dcl 370
L_arglist                 0(18)        based           bit(18)                  level 2 packed unaligned dcl 2-24 ref 2-16 2-16
Type_1_ptr                      000320 automatic       pointer                  initial dcl 11-83 set ref 11-83*
Type_4_ptr                      000322 automatic       pointer                  initial dcl 11-216 set ref 11-216*
addr                                                   builtin function         dcl 218 ref 99 99 99 99 105 105 134 134 134 134 149
                                                                                  151 151 151 151 157 157 165 165 165 165 173 173
                                                                                  173 173 184 184 194 194
addrel                                                 builtin function         dcl 219 ref 61 2-20 87
aft_name                        000102 automatic       char(8)                  unaligned dcl 221 set ref 176* 190*
altname                                based           char(8)                  dcl 222 ref 171 176
altname_address                        based           bit(18)                  level 2 packed unaligned dcl 329 ref 151 154 169
altname_ptr                     000104 automatic       pointer                  initial dcl 223 set ref 48* 171 176 223*
arg_ptr                         000110 automatic       pointer                  initial dcl 226 set ref 42* 55 61 226* 2-16 2-16 151
                                                                                  154 156 156 169 171
arg_ptr_val                            parameter       pointer                  dcl 35 ref 15 42
arglist                                based           structure                level 1 dcl 336
arglist_address           0(18)        based           bit(18)                  level 2 packed unaligned dcl 329 ref 55 61
arglist_ptr                     000106 automatic       pointer                  initial dcl 225 set ref 61* 63 67 85 85 87 139 225*
ascii_cat_file                  000270 automatic       structure                level 1 unaligned dcl 9-8 set ref 105 105
attribute_segment_ptr           000112 automatic       pointer                  initial dcl 227 set ref 227*
buffer_ptr                      000324 automatic       pointer                  initial dcl 11-230 set ref 43* 11-230* 148 163 189
                                                                                  207
buffer_ptr_val                         parameter       pointer                  dcl 36 ref 15 43
cat_filedescr_name_offset       000114 automatic       bit(18)                  unaligned dcl 230 set ref 49* 1-10
code                                   parameter       fixed bin(35,0)          dcl 37 set ref 15 51* 58* 105* 111
descriptor                             based           structure                array level 1 dcl 362 set ref 132
descriptor_address              000115 automatic       bit(18)                  unaligned dcl 236 in procedure
                                                                                  "gtss_filact_funct19_" set ref 149*
descriptor_address        1            based           bit(18)                  level 2 in structure "arglist" packed unaligned
                                                                                  dcl 336 in procedure "gtss_filact_funct19_" ref 85
                                                                                  85 87 139
descriptor_ptr                  000116 automatic       pointer                  initial dcl 237 set ref 87* 91 94 95 99 99 126 132
                                                                                  133 134 134 149 151 151 157 165 165 173 173 184
                                                                                  194 237*
dir_name                        000120 automatic       char(168)                unaligned dcl 238 set ref 105* 119 120 121 203*
entry_name                      000172 automatic       char(12)                 initial unaligned dcl 240 set ref 105* 134 134 136
                                                                                  137 138 151 151 157 159* 159 165 165 173 173 184
                                                                                  185* 185 190 194 195* 195 201 202 204 207 240*
filact_args                            based           structure                level 1 dcl 2-24 in procedure "validate_status"
filact_args                            based           structure                level 1 dcl 329 in procedure "gtss_filact_funct19_"
file_id                   1            based           char(8)                  level 2 dcl 370 set ref 207*
fixed                                                  builtin function         dcl 252 ref 40 55 2-16 2-16 2-16 2-16 85 139
four_NULS                              constant        char(4)                  initial unaligned dcl 254 ref 171
function_no               1            based           fixed bin(17,0)          level 2 packed unaligned dcl 329 ref 156 156 171
gseg                            000200 automatic       pointer                  initial dcl 255 set ref 41* 61 255* 2-20 87
gseg_val                               parameter       pointer                  dcl 34 ref 15 41
gtss_bcd_ascii_$lc              000012 constant        entry                    external dcl 8-34 ref 99 134 151 165 173
gtss_expand_pathname_           000014 constant        entry                    external dcl 8-107 ref 105
gtss_ust                        000010 external static structure                level 2 dcl 3-16
gtss_ust_ext_$ust               000010 external static structure                level 1 dcl 3-16
hbound                                                 builtin function         dcl 258 ref 132
high_b                          000202 automatic       bit(18)                  unaligned dcl 268 set ref 39* 40 2-13 85
high_i                          000203 automatic       fixed bin(18,0)          dcl 269 set ref 40* 55 85 139
high_val                               parameter       bit(18)                  unaligned dcl 33 ref 15 39
i                               000204 automatic       fixed bin(24,0)          dcl 270 set ref 132* 133 134 134 139* 149 151 151
                                                                                  157 165 165 173 173 184 194
k                               000205 automatic       fixed bin(24,0)          dcl 273 set ref 119* 120 120* 121 136* 137 137* 138
                                                                                  201* 202 202* 204
lid                             000010 external static bit(72)                  level 3 dcl 3-16 ref 94
mcp                             000266 automatic       pointer                  dcl 7-10 set ref 38*
mcp_val                                parameter       pointer                  dcl 32 ref 15 38
minus_one                       001456 constant        bit(36)                  initial unaligned dcl 280 ref 91 126 133
name                     22            based           structure                array level 2 in structure "t0c" dcl 11-75
                                                                                  in procedure "gtss_filact_funct19_"
name                                   based           bit(72)                  array level 2 in structure "descriptor" dcl 362
                                                                                  in procedure "gtss_filact_funct19_" set ref 91 94*
                                                                                  99 99 126 133 134 134 149 151 151 157 165 165 173
                                                                                  173 184 194
name                      1     000270 automatic       char(12)                 array level 2 in structure "ascii_cat_file" packed
                                                                                  unaligned dcl 9-8 in procedure
                                                                                  "gtss_filact_funct19_" set ref 99 99
nn                              000270 automatic       fixed bin(17,0)          level 2 dcl 9-8 set ref 98*
options_ptr                     000326 automatic       pointer                  initial dcl 14-6 set ref 14-6*
p                               000100 automatic       pointer                  initial dcl 216 set ref 216*
password                  2            based           bit(72)                  array level 2 dcl 362 set ref 95*
path_name                       000206 automatic       varying char(168)        dcl 286 set ref 121* 138* 138 203 204* 204
pd                        0(18)        based           bit(18)                  level 2 packed unaligned dcl 354 set ref 127* 143*
permissions_ptr                 000330 automatic       pointer                  initial dcl 15-5 set ref 15-5*
permissionsx                           based           structure                level 1 dcl 15-6
record_address            0(18)        based           bit(18)                  level 2 packed unaligned dcl 336 set ref 67*
rel                                                    builtin function         dcl 290 ref 149
restore_switch                         based           bit(36)                  level 2 dcl 370 set ref 148* 163* 189*
smc_entry_ptr                   000262 automatic       pointer                  initial dcl 296 set ref 296*
sp                                     parameter       pointer                  dcl 2-8 set ref 2-5 2-20*
status                                 based           bit(18)                  level 2 packed unaligned dcl 354 set ref 68* 114*
                                                                                  128* 144*
status_address                         based           bit(18)                  level 2 in structure "arglist" packed unaligned
                                                                                  dcl 336 in procedure "gtss_filact_funct19_" set
                                                                                  ref 63*
status_address                         parameter       bit(18)                  unaligned dcl 2-7 in procedure "validate_status" ref
                                                                                  2-5 2-13 2-16 2-16 2-20
status_pointer                  000346 automatic       pointer                  initial dcl 2-9 set ref 2-9* 2-20* 2-21
status_ptr                      000264 automatic       pointer                  initial dcl 300 set ref 63* 68 114 127 128 143 144
                                                                                  300*
status_word                            based           structure                level 1 dcl 354 set ref 2-21*
substr                                                 builtin function         dcl 301 ref 91 121 126 133 138 151 169 171 190 204
                                                                                  207
t0c                                    based           structure                level 1 dcl 11-75
two_words                              based           bit(72)                  unaligned dcl 306 set ref 157* 157 184* 184 194* 194

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
FMS_block                              based           structure                level 1 dcl 366
FMS_catalog                            based           structure                level 1 dcl 11-13
Type_0_Catalog                         based           structure                level 1 dcl 11-34
Type_1_Catalog                         based           structure                level 1 dcl 11-84
Type_2_Catalog                         based           structure                level 1 dcl 11-114
Type_4_Catalog                         based           structure                level 1 dcl 11-217
abx                                    internal static fixed bin(17,0)          initial dcl 7-42
access_mode                            automatic       bit(6)                   unaligned dcl 217
acl_count                              automatic       fixed bin(17,0)          dcl 13-2
acl_ptr                                automatic       pointer                  dcl 13-2
aft_code                               automatic       fixed bin(35,0)          dcl 220
append_mode                            internal static bit(36)                  initial unaligned dcl 224
apx                                    internal static fixed bin(17,0)          initial dcl 7-42
area_pointer                           automatic       pointer                  dcl 12-2
attr_name                              internal static char(4)                  initial array unaligned dcl 10-46
bbx                                    internal static fixed bin(17,0)          initial dcl 7-42
bcdname                                based           structure                level 1 dcl 324
bit                                                    builtin function         dcl 228
bit72                                  based           bit(72)                  dcl 214
bit_count                              automatic       fixed bin(24,0)          dcl 229
bpx                                    internal static fixed bin(17,0)          initial dcl 7-42
branch                                 based           structure                level 1 dcl 12-2
callers_buffer                         based           structure                level 1 dcl 11-231
cdate                                  automatic       fixed bin(71,0)          dcl 231
clim                                   automatic       float bin(27)            dcl 232
com_err_                        000000 constant        entry                    external dcl 8-8
crf                                    automatic       fixed bin(24,0)          dcl 233
csp                                    automatic       float bin(27)            dcl 234
db_                                    defined         bit(1)                   unaligned dcl 16-32
db_CFP_input                           defined         bit(1)                   unaligned dcl 16-32
db_abs                                 defined         bit(1)                   unaligned dcl 16-32
db_attributes_mgr                      defined         bit(1)                   unaligned dcl 16-32
db_dq                                  defined         bit(1)                   unaligned dcl 16-32
db_drl_addmem                          defined         bit(1)                   unaligned dcl 16-32
db_drl_callss                          defined         bit(1)                   unaligned dcl 16-32
db_drl_defil                           defined         bit(1)                   unaligned dcl 16-32
db_drl_dio                             defined         bit(1)                   unaligned dcl 16-32
db_drl_filact                          defined         bit(1)                   unaligned dcl 16-32
db_drl_filsp                           defined         bit(1)                   unaligned dcl 16-32
db_drl_grow                            defined         bit(1)                   unaligned dcl 16-32
db_drl_kin                             defined         bit(1)                   unaligned dcl 16-32
db_drl_morlnk                          defined         bit(1)                   unaligned dcl 16-32
db_drl_msub                            defined         bit(1)                   unaligned dcl 16-32
db_drl_part                            defined         bit(1)                   unaligned dcl 16-32
db_drl_retfil                          defined         bit(1)                   unaligned dcl 16-32
db_drl_rew                             defined         bit(1)                   unaligned dcl 16-32
db_drl_rstswh                          defined         bit(1)                   unaligned dcl 16-32
db_drl_setswh                          defined         bit(1)                   unaligned dcl 16-32
db_drl_switch                          defined         bit(1)                   unaligned dcl 16-32
db_drl_t_cfio                          defined         bit(1)                   unaligned dcl 16-32
db_expand_pathname                     defined         bit(1)                   unaligned dcl 16-32
db_filact_funct02                      defined         bit(1)                   unaligned dcl 16-32
db_filact_funct03                      defined         bit(1)                   unaligned dcl 16-32
db_filact_funct04                      defined         bit(1)                   unaligned dcl 16-32
db_filact_funct05                      defined         bit(1)                   unaligned dcl 16-32
db_filact_funct10                      defined         bit(1)                   unaligned dcl 16-32
db_filact_funct11                      defined         bit(1)                   unaligned dcl 16-32
db_filact_funct14                      defined         bit(1)                   unaligned dcl 16-32
db_filact_funct18                      defined         bit(1)                   unaligned dcl 16-32
db_filact_funct19                      defined         bit(1)                   unaligned dcl 16-32
db_filact_funct21                      defined         bit(1)                   unaligned dcl 16-32
db_filact_funct22                      defined         bit(1)                   unaligned dcl 16-32
db_interp_prim                         defined         bit(1)                   unaligned dcl 16-32
db_ios                                 defined         bit(1)                   unaligned dcl 16-32
db_mcfc                                defined         bit(1)                   unaligned dcl 16-32
db_run_subsystem                       defined         bit(1)                   unaligned dcl 16-32
debug_bit_names                        internal static structure                array level 1 unaligned dcl 16-75
delete_$path                    000000 constant        entry                    external dcl 235
dir_acl                                based           structure                array level 1 dcl 13-2
divide                                                 builtin function         dcl 239
entry_names                            based           char(32)                 array dcl 12-2
error_table_$incorrect_access          external static fixed bin(35,0)          dcl 241
error_table_$moderr                    external static fixed bin(35,0)          dcl 242
error_table_$namedup                   external static fixed bin(35,0)          dcl 243
error_table_$no_dir                    external static fixed bin(35,0)          dcl 245
error_table_$noentry                   external static fixed bin(35,0)          dcl 244
error_table_$nomatch                   external static fixed bin(35,0)          dcl 249
error_table_$not_seg_type              external static fixed bin(35,0)          dcl 246
error_table_$seg_not_found             external static fixed bin(35,0)          dcl 248
error_table_$segknown                  external static fixed bin(35,0)          dcl 247
execute_mode                           internal static bit(36)                  initial unaligned dcl 250
file_name_in_ascii                     automatic       bit(1)                   unaligned dcl 213
file_no                                automatic       fixed bin(24,0)          dcl 251
gtss_CFP_abort_                 000000 constant        entry                    external dcl 8-9
gtss_CFP_break_                 000000 constant        entry                    external dcl 8-10
gtss_CFP_input_                 000000 constant        entry                    external dcl 8-11
gtss_CFP_output_                000000 constant        entry                    external dcl 8-12
gtss_abandon_CFP_               000000 constant        entry                    external dcl 8-13
gtss_abort_dump_                000000 constant        entry                    external dcl 8-14
gtss_abort_subsystem_           000000 constant        entry                    external dcl 8-15
gtss_abort_subsystem_$not_imp   000000 constant        entry                    external dcl 8-16
gtss_abs_$abs_equiv             000000 constant        entry                    external dcl 8-19
gtss_abs_$cpu_runout            000000 constant        entry                    external dcl 8-20
gtss_abs_$create_absin          000000 constant        entry                    external dcl 8-21
gtss_abs_$dabt_check            000000 constant        entry                    external dcl 8-22
gtss_abs_$get_drm               000000 constant        entry                    external dcl 8-24
gtss_abs_$get_id                000000 constant        entry                    external dcl 8-23
gtss_abs_login_banner_          000000 constant        entry                    external dcl 8-17
gtss_abs_logout_banner_         000000 constant        entry                    external dcl 8-18
gtss_adjust_size_               000000 constant        entry                    external dcl 8-25
gtss_aft_$add                   000000 constant        entry                    external dcl 8-26
gtss_aft_$delete                000000 constant        entry                    external dcl 8-27
gtss_aft_$find                  000000 constant        entry                    external dcl 8-28
gtss_aft_$initialize            000000 constant        entry                    external dcl 8-29
gtss_ascii_bcd_                 000000 constant        entry                    external dcl 8-30
gtss_attributes_mgr_$get        000000 constant        entry                    external dcl 8-31
gtss_attributes_mgr_$set        000000 constant        entry                    external dcl 8-32
gtss_bcd_ascii_                 000000 constant        entry                    external dcl 8-33
gtss_break_vector_              000000 constant        entry                    external dcl 8-35
gtss_break_vector_$drl_in_progress
                                000000 constant        entry                    external dcl 8-36
gtss_break_vector_$status       000000 constant        entry                    external dcl 8-37
gtss_build_                     000000 constant        entry                    external dcl 8-38
gtss_com_err_                   000000 constant        entry                    external dcl 8-39
gtss_derail_processor_          000000 constant        entry                    external dcl 8-40
gtss_derail_processor_$set      000000 constant        entry                    external dcl 8-41
gtss_dq_$catp                   000000 constant        entry                    external dcl 8-42
gtss_dq_$create                 000000 constant        entry                    external dcl 8-43
gtss_dq_$dibp                   000000 constant        entry                    external dcl 8-44
gtss_dq_$entries_info           000000 constant        entry                    external dcl 8-45
gtss_dq_$hdrp                   000000 constant        entry                    external dcl 8-46
gtss_dq_$mod_js                 000000 constant        entry                    external dcl 8-47
gtss_dq_$open_exc               000000 constant        entry                    external dcl 8-48
gtss_dq_$open_gen               000000 constant        entry                    external dcl 8-49
gtss_drl_abort_                 000000 constant        entry                    external dcl 8-50
gtss_drl_addmem_                000000 constant        entry                    external dcl 8-51
gtss_drl_callss_                000000 constant        entry                    external dcl 8-52
gtss_drl_corfil_                000000 constant        entry                    external dcl 8-53
gtss_drl_defil_                 000000 constant        entry                    external dcl 8-54
gtss_drl_defil_$subr            000000 constant        entry                    external dcl 8-55
gtss_drl_dio_                   000000 constant        entry                    external dcl 8-56
gtss_drl_drlimt_                000000 constant        entry                    external dcl 8-57
gtss_drl_drlsav_                000000 constant        entry                    external dcl 8-58
gtss_drl_filact_                000000 constant        entry                    external dcl 8-59
gtss_drl_filsp_                 000000 constant        entry                    external dcl 8-60
gtss_drl_grow_                  000000 constant        entry                    external dcl 8-61
gtss_drl_gwake_                 000000 constant        entry                    external dcl 8-62
gtss_drl_jsts_                  000000 constant        entry                    external dcl 8-63
gtss_drl_kin_                   000000 constant        entry                    external dcl 8-64
gtss_drl_kotnow_                000000 constant        entry                    external dcl 8-65
gtss_drl_kotnow_$gtss_drl_kout_ 000000 constant        entry                    external dcl 8-66
gtss_drl_koutn_                 000000 constant        entry                    external dcl 8-67
gtss_drl_morlnk_                000000 constant        entry                    external dcl 8-68
gtss_drl_msub_                  000000 constant        entry                    external dcl 8-69
gtss_drl_objtim_                000000 constant        entry                    external dcl 8-70
gtss_drl_part_                  000000 constant        entry                    external dcl 8-71
gtss_drl_pasaft_                000000 constant        entry                    external dcl 8-72
gtss_drl_pasdes_                000000 constant        entry                    external dcl 8-73
gtss_drl_pasust_                000000 constant        entry                    external dcl 8-74
gtss_drl_pdio_                  000000 constant        entry                    external dcl 8-75
gtss_drl_prgdes_                000000 constant        entry                    external dcl 8-76
gtss_drl_pseudo_                000000 constant        entry                    external dcl 8-77
gtss_drl_relmem_                000000 constant        entry                    external dcl 8-78
gtss_drl_restor_                000000 constant        entry                    external dcl 8-79
gtss_drl_retfil_                000000 constant        entry                    external dcl 8-80
gtss_drl_return_                000000 constant        entry                    external dcl 8-81
gtss_drl_rew_                   000000 constant        entry                    external dcl 8-82
gtss_drl_rstswh_                000000 constant        entry                    external dcl 8-83
gtss_drl_setlno_                000000 constant        entry                    external dcl 8-84
gtss_drl_setswh_                000000 constant        entry                    external dcl 8-85
gtss_drl_snumb_                 000000 constant        entry                    external dcl 8-86
gtss_drl_spawn_                 000000 constant        entry                    external dcl 8-87
gtss_drl_spawn_$gtss_drl_pasflr_
                                000000 constant        entry                    external dcl 8-88
gtss_drl_stoppt_                000000 constant        entry                    external dcl 8-89
gtss_drl_switch_                000000 constant        entry                    external dcl 8-90
gtss_drl_sysret_                000000 constant        entry                    external dcl 8-91
gtss_drl_t_cfio_                000000 constant        entry                    external dcl 8-92
gtss_drl_t_cmov_                000000 constant        entry                    external dcl 8-93
gtss_drl_t_err_                 000000 constant        entry                    external dcl 8-94
gtss_drl_t_goto_                000000 constant        entry                    external dcl 8-95
gtss_drl_t_linl_                000000 constant        entry                    external dcl 8-96
gtss_drl_t_rscc_                000000 constant        entry                    external dcl 8-97
gtss_drl_tapein_                000000 constant        entry                    external dcl 8-98
gtss_drl_task_                  000000 constant        entry                    external dcl 8-99
gtss_drl_termtp_                000000 constant        entry                    external dcl 8-100
gtss_drl_time_                  000000 constant        entry                    external dcl 8-101
gtss_drun_                      000000 constant        entry                    external dcl 8-102
gtss_dsd_lookup_                000000 constant        entry                    external dcl 8-103
gtss_dsd_process_               000000 constant        entry                    external dcl 8-104
gtss_edit_dsd_                  000000 constant        entry                    external dcl 8-105
gtss_expand_pathname_$verify_umc
                                000000 constant        entry                    external dcl 8-108
gtss_ext_$CFP_bits                     external static structure                level 1 dcl 4-37
gtss_ext_$SYstarstar_file_no           external static fixed bin(24,0)          dcl 4-33
gtss_ext_$aem                          external static fixed bin(17,0)          dcl 4-8
gtss_ext_$aft                          external static structure                level 1 dcl 4-78
gtss_ext_$bad_drl_rtrn                 external static label variable           dcl 4-9
gtss_ext_$com_reg                      external static structure                level 1 dcl 4-45
gtss_ext_$db                           external static bit(1)                   array unaligned dcl 4-10
gtss_ext_$deferred_catalogs_ptr        external static pointer                  dcl 4-11
gtss_ext_$dispose_of_drl               external static label variable           dcl 4-12
gtss_ext_$drl_rtrn                     external static label variable           array dcl 4-13
gtss_ext_$drm_path                     external static char(168)                unaligned dcl 4-14
gtss_ext_$drun_jid                     external static char(5)                  unaligned dcl 4-15
gtss_ext_$event_channel                external static fixed bin(71,0)          dcl 4-16
gtss_ext_$fast_lib                     external static structure                level 1 dcl 4-98
gtss_ext_$finished                     external static label variable           dcl 4-17
gtss_ext_$flags                        external static structure                level 1 dcl 4-60
gtss_ext_$gdb_name                     external static char(8)                  unaligned dcl 4-18
gtss_ext_$get_line                     external static entry variable           dcl 4-19
gtss_ext_$gtss_slave_area_seg          external static pointer                  array dcl 4-20
gtss_ext_$hcs_work_area_ptr            external static pointer                  dcl 4-21
gtss_ext_$homedir                      external static char(64)                 unaligned dcl 4-22
gtss_ext_$last_k_was_out               external static bit(1)                   dcl 4-23
gtss_ext_$mcfc                         external static structure                level 1 dcl 4-109
gtss_ext_$pdir                         external static varying char(168)        dcl 4-24
gtss_ext_$popup_from_pi                external static label variable           dcl 4-25
gtss_ext_$ppt                          external static pointer                  dcl 4-94
gtss_ext_$process_type                 external static fixed bin(17,0)          dcl 4-26
gtss_ext_$put_chars                    external static entry variable           dcl 4-27
gtss_ext_$restart_from_pi              external static label variable           dcl 4-28
gtss_ext_$restart_seg_ptr              external static pointer                  dcl 4-29
gtss_ext_$sig_ptr                      external static pointer                  dcl 4-30
gtss_ext_$stack_level_                 external static fixed bin(17,0)          dcl 4-31
gtss_ext_$statistics                   external static structure                level 1 dcl 4-72
gtss_ext_$suspended_process            external static bit(1)                   unaligned dcl 4-32
gtss_ext_$user_id                      external static varying char(26)         dcl 4-34
gtss_ext_$work_area_ptr                external static pointer                  dcl 4-35
gtss_fail                       000000 stack reference condition                dcl 256
gtss_fault_processor_           000000 constant        entry                    external dcl 8-109
gtss_fault_processor_$timer_runout
                                000000 constant        entry                    external dcl 8-111
gtss_filact_error_status_       000000 constant        entry                    external dcl 8-112
gtss_filact_funct02_            000000 constant        entry                    external dcl 8-113
gtss_filact_funct03_            000000 constant        entry                    external dcl 8-114
gtss_filact_funct04_            000000 constant        entry                    external dcl 8-115
gtss_filact_funct05_            000000 constant        entry                    external dcl 8-116
gtss_filact_funct08_            000000 constant        entry                    external dcl 8-117
gtss_filact_funct10_            000000 constant        entry                    external dcl 8-118
gtss_filact_funct11_            000000 constant        entry                    external dcl 8-119
gtss_filact_funct14_            000000 constant        entry                    external dcl 8-120
gtss_filact_funct18_            000000 constant        entry                    external dcl 8-121
gtss_filact_funct19_            000000 constant        entry                    external dcl 8-122
gtss_filact_funct21_            000000 constant        entry                    external dcl 8-123
gtss_filact_funct22_            000000 constant        entry                    external dcl 8-124
gtss_file_values                       automatic       structure                level 1 dcl 10-56
gtss_find_cond_frame_           000000 constant        entry                    external dcl 8-110
gtss_interp_prim_               000000 constant        entry                    external dcl 8-126
gtss_interp_prim_$callss        000000 constant        entry                    external dcl 8-127
gtss_interp_prim_$sysret        000000 constant        entry                    external dcl 8-128
gtss_interp_prim_$t_goto        000000 constant        entry                    external dcl 8-129
gtss_ios_change_size_           000000 constant        entry                    external dcl 8-130
gtss_ios_close_                 000000 constant        entry                    external dcl 8-131
gtss_ios_exchange_names_        000000 constant        entry                    external dcl 8-132
gtss_ios_initialize_            000000 constant        entry                    external dcl 8-133
gtss_ios_io_                    000000 constant        entry                    external dcl 8-134
gtss_ios_open_                  000000 constant        entry                    external dcl 8-135
gtss_ios_position_              000000 constant        entry                    external dcl 8-136
gtss_mcfc_$close                000000 constant        entry                    external dcl 8-139
gtss_mcfc_$delete               000000 constant        entry                    external dcl 8-137
gtss_mcfc_$open                 000000 constant        entry                    external dcl 8-138
gtss_mcfc_empty                 000000 constant        entry                    external dcl 8-106
gtss_mcfc_init_                 000000 constant        entry                    external dcl 8-125
gtss_pnterr                            internal static structure                level 1 packed unaligned dcl 6-9
gtss_read_starCFP_              000000 constant        entry                    external dcl 8-140
gtss_read_starCFP_$last_os      000000 constant        entry                    external dcl 8-141
gtss_run_subsystem_             000000 constant        entry                    external dcl 8-142
gtss_run_subsystem_$finish      000000 constant        entry                    external dcl 8-143
gtss_run_subsystem_$restor      000000 constant        entry                    external dcl 8-144
gtss_run_subsystem_$restor_perm 000000 constant        entry                    external dcl 8-145
gtss_set_slave_                 000000 constant        entry                    external dcl 8-146
gtss_set_slave_$load_bar        000000 constant        entry                    external dcl 8-147
gtss_update_safe_store_         000000 constant        entry                    external dcl 8-148
gtss_verify_access_             000000 constant        entry                    external dcl 8-149
gtss_verify_access_$check_forced_access
                                000000 constant        entry                    external dcl 8-150
gtss_write_starCFP_             000000 constant        entry                    external dcl 8-151
have_file                              automatic       bit(1)                   unaligned dcl 257
hcs_$add_acl_entries            000000 constant        entry                    external dcl 259
hcs_$add_dir_acl_entries        000000 constant        entry                    external dcl 260
hcs_$add_inacl_entries          000000 constant        entry                    external dcl 261
hcs_$append_branchx             000000 constant        entry                    external dcl 262
hcs_$delentry_file              000000 constant        entry                    external dcl 263
hcs_$initiate                   000000 constant        entry                    external dcl 264
hcs_$make_seg                   000000 constant        entry                    external dcl 265
hcs_$quota_read                 000000 constant        entry                    external dcl 266
hcs_$status_long                000000 constant        entry                    external dcl 267
increment                              automatic       fixed bin(24,0)          dcl 271
info_ptr                               automatic       pointer                  dcl 12-2
ioa_                            000000 constant        entry                    external dcl 272
l                                      automatic       fixed bin(24,0)          dcl 274
lbound                                                 builtin function         dcl 275
lbx                                    internal static fixed bin(17,0)          initial dcl 7-42
lib_arglist                            based           structure                level 1 dcl 345
link                                   based           structure                level 1 dcl 12-2
low_b                                  internal static bit(18)                  initial dcl 276
low_i                                  internal static fixed bin(18,0)          initial dcl 277
lpx                                    internal static fixed bin(17,0)          initial dcl 7-42
max_options                            internal static fixed bin(17,0)          initial dcl 278
max_resources                          internal static fixed bin(17,0)          initial dcl 279
mc                                     based           structure                level 1 dcl 7-12
mlim                                   automatic       float bin(27)            dcl 281
mod                                                    builtin function         dcl 282
modify_mode                            internal static bit(36)                  initial unaligned dcl 283
msp                                    automatic       float bin(27)            dcl 284
multics_access_mode                    automatic       fixed bin(5,0)           dcl 285
nic                                    automatic       fixed bin(24,0)          dcl 215
now                                    automatic       fixed bin(17,0)          dcl 14-5
options                                based           structure                level 1 dcl 395
optionsx                               based           structure                level 1 dcl 14-7
pathname                               based           char                     dcl 12-2
permissions                            based           structure                level 1 dcl 377
person_id                              automatic       char(22)                 unaligned dcl 287
quota                                  automatic       fixed bin(18,0)          dcl 288
read_mode                              internal static bit(36)                  initial unaligned dcl 289
rings                                  internal static fixed bin(3,0)           initial array dcl 291
sbx                                    internal static fixed bin(17,0)          initial dcl 7-42
scu                                    based           structure                level 1 dcl 7-56
scup                                   automatic       pointer                  dcl 7-54
scux                                   based           structure                level 1 dcl 7-207
seg_acl_count                          automatic       fixed bin(17,0)          dcl 292
segment_acl                            based           structure                array level 1 dcl 13-2
shlim                                  automatic       float bin(27)            array dcl 293
shsp                                   automatic       float bin(27)            array dcl 294
size                                                   builtin function         dcl 295
smc_arglist                            based           structure                level 1 dcl 425
smc_entry                              based           structure                level 1 dcl 432
sons_lvid                              automatic       bit(36)                  unaligned dcl 297
spx                                    internal static fixed bin(17,0)          initial dcl 7-42
status                                 automatic       fixed bin(24,0)          dcl 298
status2                                based           structure                level 1 dcl 314
status_mode                            internal static bit(36)                  initial unaligned dcl 299
switches                               internal static bit(6)                   initial unaligned dcl 302
t1c                                    based           structure                level 1 dcl 11-108
tacc_sw                                automatic       fixed bin(1,0)           dcl 303
trp                                    automatic       fixed bin(71,0)          dcl 304
tup                                    automatic       bit(36)                  dcl 305
type                                   automatic       fixed bin(2,0)           dcl 307
used                                   automatic       fixed bin(18,0)          dcl 308
user_attribute_word                    automatic       bit(35)                  unaligned dcl 309
user_info_$limits               000000 constant        entry                    external dcl 310
words380                               based           bit(13680)               dcl 311
write_mode                             internal static bit(36)                  initial unaligned dcl 312

NAMES DECLARED BY EXPLICIT CONTEXT.
build_cat_file_descriptors      000240 constant        entry                    internal dcl 82 ref 65
fail_build                      000352 constant        label                    dcl 112
fence_found_1                   000557 constant        label                    dcl 147 ref 133
get_faulty_cat_file_entry       000166 constant        entry                    internal dcl 1-5 ref 127 143
gtss_filact_funct19_            000047 constant        entry                    external dcl 15
ret                             000164 constant        label                    dcl 70 ref 115
return_err4                     000136 constant        label                    dcl 57 ref 2-13 2-16 85 139
validate_status                 000175 constant        entry                    internal dcl 2-5 ref 63

NAMES DECLARED BY CONTEXT OR IMPLICATION.
length                                                 builtin function         ref 120 137 202
null                                                   builtin function         ref 48 216 223 225 226 227 237 253 255 296 300 11-12
                                                                                  11-83 11-216 11-230 14-6 15-5 2-9
search                                                 builtin function         ref 119 136 201
translate                                              builtin function         ref 159 176 185 195
unspec                                                 builtin function         ref 2-21

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1540        1556    1460        1550
Length      2260    1460        16         465      60           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
gtss_filact_funct19_                290 external procedure  is an external procedure.  
get_faulty_cat_file_entry               internal procedure  shares stack frame of external procedure gtss_filact_funct19_.  
validate_status                         internal procedure  shares stack frame of external procedure gtss_filact_funct19_.  
build_cat_file_descriptors              internal procedure  shares stack frame of external procedure gtss_filact_funct19_.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
gtss_filact_funct19_     000100 p                           gtss_filact_funct19_
                         000102 aft_name                    gtss_filact_funct19_
                         000104 altname_ptr                 gtss_filact_funct19_
                         000106 arglist_ptr                 gtss_filact_funct19_
                         000110 arg_ptr                     gtss_filact_funct19_
                         000112 attribute_segment_ptr       gtss_filact_funct19_
                         000114 cat_filedescr_name_offset   gtss_filact_funct19_
                         000115 descriptor_address          gtss_filact_funct19_
                         000116 descriptor_ptr              gtss_filact_funct19_
                         000120 dir_name                    gtss_filact_funct19_
                         000172 entry_name                  gtss_filact_funct19_
                         000176 FMS_block_ptr               gtss_filact_funct19_
                         000200 gseg                        gtss_filact_funct19_
                         000202 high_b                      gtss_filact_funct19_
                         000203 high_i                      gtss_filact_funct19_
                         000204 i                           gtss_filact_funct19_
                         000205 k                           gtss_filact_funct19_
                         000206 path_name                   gtss_filact_funct19_
                         000262 smc_entry_ptr               gtss_filact_funct19_
                         000264 status_ptr                  gtss_filact_funct19_
                         000266 mcp                         gtss_filact_funct19_
                         000270 ascii_cat_file              gtss_filact_funct19_
                         000316 FMS_cat_ptr                 gtss_filact_funct19_
                         000320 Type_1_ptr                  gtss_filact_funct19_
                         000322 Type_4_ptr                  gtss_filact_funct19_
                         000324 buffer_ptr                  gtss_filact_funct19_
                         000326 options_ptr                 gtss_filact_funct19_
                         000330 permissions_ptr             gtss_filact_funct19_
                         000346 status_pointer              validate_status

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
alloc_cs            cat_realloc_cs      call_ext_out_desc   call_ext_out        return              shorten_stack
ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
gtss_bcd_ascii_$lc            gtss_expand_pathname_

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
gtss_ust_ext_$ust




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     15 000041       216 000054       223 000056       225 000057       226 000060       227 000061       237 000062
    240 000063       253 000066       255 000067       296 000070       300 000071   11   12 000072   11   83 000073
11  216 000074   11  230 000075   14    6 000076   15    5 000077        38 000100        39 000104        40 000111
     41 000114        42 000117        43 000122        49 000125        51 000126        55 000127        57 000136
     58 000137        59 000142        61 000143        63 000147        65 000156        67 000157        68 000161
     70 000164        71 000165    1    5 000166    1   10 000170    2    5 000175    2    9 000177    2   13 000201
 2   16 000206    2   20 000226    2   21 000234    2   22 000237        82 000240        85 000241        87 000254
     91 000260        94 000263        95 000271        98 000274        99 000276       105 000317       111 000347
    112 000352       114 000353       115 000356       119 000357       120 000370       121 000373       126 000402
    127 000406       128 000416       129 000421       132 000422       133 000427       134 000435       136 000456
    137 000467       138 000472       139 000526       140 000541       143 000543       144 000553       145 000556
    147 000557       148 000560       149 000561       151 000564       154 000615       156 000620       157 000630
    159 000633       163 000644       164 000647       165 000650       168 000672       169 000673       171 000675
    173 000705       176 000727       182 000734       184 000735       185 000740       189 000751       190 000754
    192 000756       194 000757       195 000762       200 000773       201 000774       202 001005       203 001010
    204 001014       207 001050       208 001055


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
