	COMPILATION LISTING OF SEGMENT cobol_delete_tokens
	Compiled by: Multics PL/I Compiler, Release 31b, of April 24, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 05/24/89  1000.6 mst Wed
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        6*        *                                                         *
        7*        * Copyright (c) 1972 by Massachusetts Institute of        *
        8*        * Technology and Honeywell Information Systems, Inc.      *
        9*        *                                                         *
       10*        *********************************************************** */
       11 
       12 
       13 
       14 
       15 /****^  HISTORY COMMENTS:
       16*  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
       17*     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
       18*     MCR8060 cobol_delete_tokens.pl1 Reformatted code to new Cobol standard.
       19*                                                   END HISTORY COMMENTS */
       20 
       21 
       22 /* 6/11/77, FCH, p7 code deleted, fixed bin decls standardized */
       23 
       24 
       25 
       26 /* format: style3 */
       27 cobol_delete_tokens:
       28      proc (lo, hi);
       29 
       30 
       31 /* ========================================================================== */
       32 /*                                                                            */
       33 /* This routine is intended to delete tokens from the output(input) token     */
       34 /* stack. its action is to delete only scanned elements when more than    */
       35 /* one element is requested to be deleted.  If only one element is requested, */
       36 /* that element will be deleted independent of element type. Its input        */
       37 /* paramaters are ::                                                          */
       38 /*       lo  -  starting token for the delete                            */
       39 /*       hi  -  ending token of the delete                               */
       40 /*                                                                            */
       41 /* ========================================================================== */
       42 
       43 dcl	1 token		based (cobol_current),
       44 	  2 fwd_link	pointer,
       45 	  2 back_link	pointer,
       46 	  2 rep_link	pointer,
       47 	  2 l_info	bit (8),
       48 	  2 size		fixed bin,
       49 	  2 line		fixed bin,
       50 	  2 column	fixed bin,
       51 	  2 type		fixed bin;
       52 
       53 dcl	(lo, hi)		pointer;
       54 dcl	(ct, p)		pointer static;
       55 dcl	(force_sw, rtn_sw, ul_sw)
       56 			bit (1) static;
       57 
       58 dcl	addrel		builtin;
       59 dcl	null		builtin;
       60 
       61 
       62 	force_sw = "0"b;
       63 	ul_sw = "0"b;
       64 	goto start;
       65 
       66 /* This entry unlinks a token from the stack, but does not FREE it. A pointer to it is returned in "lo". */
       67 
       68 unlnk:
       69      entry (lo);
       70 
       71 
       72 	ul_sw = "1"b;
       73 	ct = cobol_current;
       74 	goto del;
       75 
       76 /* This entry point forces all tokens in a range to be deleted */
       77 
       78 
       79 del_force:
       80      entry (lo, hi);
       81 
       82 
       83 	force_sw = "1"b;
       84 	ul_sw = "0"b;
       85 
       86 start:
       87 	ct = lo;
       88 
       89 	if lo = null ()
       90 	then return;				/* no tokens to delete */
       91 
       92 	if (hi = null ()) | (lo = hi)			/* only one token to delete */
       93 	then do;
       94 		rtn_sw = "1"b;
       95 		goto del;
       96 	     end;
       97 	else rtn_sw = "0"b;
       98 
       99 exceptions:
      100 	if force_sw
      101 	then goto del;				/* if all tokens are to be deleted... */
      102 
      103 	if (ct -> token.type = 6) | (ct -> token.type = 5)
      104 	then do;
      105 		if ct = hi
      106 		then return;			/* if end of range - return */
      107 		ct = ct -> token.fwd_link;		/* delete only scanned tokens */
      108 
      109 		if ct = null ()
      110 		then return;			/* if end of stack... */
      111 
      112 		goto exceptions;
      113 	     end;
      114 
      115 del:
      116 	if cobol_current = ct
      117 	then cobol_current = ct -> token.back_link;	/* if current is being deleted, back it up */
      118 
      119 	if ct -> token.back_link = null ()
      120 	then do;					/* first token is being deleted */
      121 		cobol_frst = ct -> token.fwd_link;	/* advance "frst" */
      122 
      123 		if cobol_current = null ()
      124 		then cobol_current = cobol_frst;	/* if backup makes current null, move it forward */
      125 	     end;
      126 
      127 	else ct -> token.back_link -> token.fwd_link = ct -> token.fwd_link;
      128 
      129 /* else fix up previous tokens forward link */
      130 
      131 	if ct -> token.fwd_link = null ()
      132 	then cobol_top = ct -> token.back_link;
      133 
      134 /* if last is deleted, back up "top"... */
      135 
      136 	else ct -> token.fwd_link -> token.back_link = ct -> token.back_link;
      137 
      138 /* else fix up next token's back link */
      139 	p = ct -> token.fwd_link;			/* save pointer to next token */
      140 
      141 	if ul_sw
      142 	then do;
      143 		lo = ct;
      144 		ct -> token.back_link = null ();
      145 		ct -> token.fwd_link = null ();
      146 		return;
      147 	     end;
      148 
      149 	if (ct = hi) | (p = null ())
      150 	then rtn_sw = "1"b;				/* if end of range or stack - set return */
      151 
      152 	if ct ^= cobol_ta_ptr
      153 	then do;
      154 
      155 /* * * free allocated token * * */
      156 
      157 dcl	at_st		char (1) based (ct);
      158 
      159 		ct = addrel (ct, -1);
      160 		at_st = "2";
      161 
      162 	     end;
      163 
      164 	if rtn_sw
      165 	then return;				/* if end of range or stack - return */
      166 
      167 	ct = p;					/* process next token */
      168 
      169 	goto exceptions;
      170 
  1     1 
  1     2 /* BEGIN INCLUDE FILE ... cobol_ext_lex.incl.pl1 */
  1     3 /* Last modified on 06/18/76 by ORN */
  1     4 
  1     5 /*   * * *   LEX EXTERNAL DATA   * * *   */
  1     6 
  1     7 /* Pointers */
  1     8 
  1     9 dcl     cobol_ext_lex$cobol_current ptr ext;
  1    10 dcl     cobol_current ptr defined (  cobol_ext_lex$cobol_current);
  1    11 dcl     cobol_ext_lex$cobol_top ptr ext;
  1    12 dcl     cobol_top ptr defined (  cobol_ext_lex$cobol_top);
  1    13 dcl     cobol_ext_lex$cobol_frst ptr ext;
  1    14 dcl     cobol_frst ptr defined (  cobol_ext_lex$cobol_frst);
  1    15 dcl     cobol_ext_lex$cobol_mfp ptr ext;
  1    16 dcl     cobol_mfp ptr defined (  cobol_ext_lex$cobol_mfp);
  1    17 dcl     cobol_ext_lex$cobol_rt_ptr ptr ext;
  1    18 dcl     cobol_rt_ptr ptr defined (  cobol_ext_lex$cobol_rt_ptr);
  1    19 dcl     cobol_ext_lex$cobol_cfp ptr ext;
  1    20 dcl     cobol_cfp ptr defined (  cobol_ext_lex$cobol_cfp);
  1    21 dcl     cobol_ext_lex$cobol_ta_ptr ptr ext;
  1    22 dcl     cobol_ta_ptr ptr defined (  cobol_ext_lex$cobol_ta_ptr);
  1    23 dcl     cobol_ext_lex$cobol_elt_buf_ptr ptr ext;
  1    24 dcl     cobol_elt_buf_ptr ptr defined (  cobol_ext_lex$cobol_elt_buf_ptr);
  1    25 dcl     cobol_ext_lex$cobol_lex_exit /*[*/ label /*]*/ /*[[[ entry static ]]]*/ ext;
  1    26 dcl     cobol_lex_exit /*[*/ label /*]*/ /*[[[ entry static ]]]*/ defined(  cobol_ext_lex$cobol_lex_exit); /* -6- */
  1    27 
  1    28 /* Character */
  1    29 
  1    30 dcl     cobol_ext_lex$cobol_tarea char (300) ext;
  1    31 dcl     cobol_tarea char (300) defined (  cobol_ext_lex$cobol_tarea);    /* -75- */
  1    32 dcl     cobol_ext_lex$cobol_comma_character char (1) ext;
  1    33 dcl     cobol_comma_character char (1) defined (  cobol_ext_lex$cobol_comma_character);
  1    34 dcl     cobol_ext_lex$cobol_decimal_point_character char (1) ext;
  1    35 dcl     cobol_decimal_point_character char (1) defined (  cobol_ext_lex$cobol_decimal_point_character);
  1    36 dcl     cobol_ext_lex$cobol_new_line_character char (1) ext;
  1    37 dcl     cobol_new_line_character char (1) defined (  cobol_ext_lex$cobol_new_line_character);
  1    38 dcl     cobol_ext_lex$cobol_si_key char (5) ext;
  1    39 dcl     cobol_si_key char (5) defined (  cobol_ext_lex$cobol_si_key);     /* -2- */
  1    40 dcl     cobol_ext_lex$cobol_so_key char (5) ext;
  1    41 dcl     cobol_so_key char (5) defined (  cobol_ext_lex$cobol_so_key);     /* -2- */
  1    42 
  1    43 /* Fixed bin */
  1    44 
  1    45 dcl    cobol_ext_lex$ph_num fixed bin ext;
  1    46 dcl     ph_num fixed bin defined(cobol_ext_lex$ph_num );
  1    47 dcl     cobol_ext_lex$cobol_c_l_n fixed bin ext;
  1    48 dcl     cobol_c_l_n fixed bin defined (  cobol_ext_lex$cobol_c_l_n);
  1    49 dcl     cobol_ext_lex$cobol_save_cln fixed bin ext;
  1    50 dcl     cobol_save_cln fixed bin defined (  cobol_ext_lex$cobol_save_cln);
  1    51 dcl     cobol_ext_lex$cobol_save_col fixed bin ext;
  1    52 dcl     cobol_save_col fixed bin defined (  cobol_ext_lex$cobol_save_col);
  1    53 dcl     cobol_ext_lex$cobol_name_number fixed bin ext;
  1    54 dcl     cobol_name_number fixed bin defined (  cobol_ext_lex$cobol_name_number);
  1    55 dcl     cobol_ext_lex$cobol_section_number fixed bin ext;
  1    56 dcl     cobol_section_number fixed bin defined (  cobol_ext_lex$cobol_section_number);
  1    57 dcl     cobol_ext_lex$cobol_sr fixed bin ext;
  1    58 dcl     cobol_sr fixed bin defined (  cobol_ext_lex$cobol_sr);
  1    59 dcl     cobol_ext_lex$cobol_elt_idx fixed bin ext;
  1    60 dcl     cobol_elt_idx fixed bin defined (  cobol_ext_lex$cobol_elt_idx);
  1    61 
  1    62 /* Structures */
  1    63 
  1    64 dcl 1     cobol_ext_lex$cobol_cards ext like   cobol_cards;
  1    65 dcl 1     cobol_cards defined (  cobol_ext_lex$cobol_cards),     /* -67- */
  1    66     2 column fixed bin,
  1    67     2 tblanks fixed bin,
  1    68     2 nr_char fixed bin,
  1    69     2 name char (256);
  1    70 
  1    71 /* Bits */
  1    72 
  1    73 dcl cobol_ext_lex$processing_report bit(1) ext;
  1    74 dcl processing_report bit (1) defined (cobol_ext_lex$processing_report);
  1    75 dcl cobol_ext_lex$real_end_report bit (1) ext;
  1    76 dcl real_end_report bit (1) defined (cobol_ext_lex$real_end_report);
  1    77 dcl     cobol_ext_lex$cobol_continuation bit (1) ext;
  1    78 dcl     cobol_continuation bit (1) defined (  cobol_ext_lex$cobol_continuation);
  1    79 dcl     cobol_ext_lex$cobol_pic_switch bit (1) ext;
  1    80 dcl     cobol_pic_switch bit (1) defined (  cobol_ext_lex$cobol_pic_switch);
  1    81 dcl     cobol_ext_lex$cobol_allo_init_sw bit (1) ext;
  1    82 dcl     cobol_allo_init_sw bit (1) defined (  cobol_ext_lex$cobol_allo_init_sw);
  1    83 dcl     cobol_ext_lex$cobol_lu_sw bit (1) ext;
  1    84 dcl     cobol_lu_sw bit (1) defined (  cobol_ext_lex$cobol_lu_sw);
  1    85 dcl     cobol_ext_lex$cobol_scanoff_sw bit (1) ext;
  1    86 dcl     cobol_scanoff_sw bit (1) defined (  cobol_ext_lex$cobol_scanoff_sw);
  1    87 dcl     cobol_ext_lex$cobol_output_sw bit (1) ext;
  1    88 dcl     cobol_output_sw bit (1) defined (  cobol_ext_lex$cobol_output_sw);
  1    89 dcl     cobol_ext_lex$cobol_stack_sw bit (1) ext;
  1    90 dcl     cobol_stack_sw bit (1) defined (  cobol_ext_lex$cobol_stack_sw);
  1    91 dcl     cobol_ext_lex$cobol_copy_found bit (1) ext;
  1    92 dcl     cobol_copy_found bit (1) defined (  cobol_ext_lex$cobol_copy_found);
  1    93 dcl     cobol_ext_lex$cobol_head_words (5) bit (1) ext;
  1    94 dcl     cobol_head_words (5) bit (1) defined (  cobol_ext_lex$cobol_head_words);
  1    95 dcl     cobol_ext_lex$cobol_elnp_sw bit (1) ext;
  1    96 dcl     cobol_elnp_sw bit (1) defined (  cobol_ext_lex$cobol_elnp_sw);
  1    97 dcl     cobol_ext_lex$cobol_dp_sw bit (1) ext;
  1    98 dcl     cobol_dp_sw bit (1) defined (  cobol_ext_lex$cobol_dp_sw);
  1    99 dcl     cobol_ext_lex$cobol_endprog_sw bit (1) ext;
  1   100 dcl     cobol_endprog_sw bit (1) defined (  cobol_ext_lex$cobol_endprog_sw);
  1   101 dcl     cobol_ext_lex$cobol_debug_mode bit (1) ext;
  1   102 dcl     cobol_debug_mode bit (1) defined (  cobol_ext_lex$cobol_debug_mode);
  1   103 dcl     cobol_ext_lex$cobol_rwt_init_sw bit (1) ext;
  1   104 dcl     cobol_rwt_init_sw bit (1) defined (  cobol_ext_lex$cobol_rwt_init_sw);
  1   105 dcl     cobol_ext_lex$cobol_init_ta_sw bit (1) ext;
  1   106 dcl     cobol_init_ta_sw bit (1) defined (  cobol_ext_lex$cobol_init_ta_sw);
  1   107 dcl     cobol_ext_lex$cobol_rep_sw bit (1) ext;
  1   108 dcl     cobol_rep_sw bit (1) defined (  cobol_ext_lex$cobol_rep_sw);
  1   109 dcl     cobol_ext_lex$cobol_copy_active bit (1) ext;
  1   110 dcl     cobol_copy_active bit (1) defined (  cobol_ext_lex$cobol_copy_active);
  1   111 dcl     cobol_ext_lex$cobol_ln_sw (2) bit (1) ext;
  1   112 dcl     cobol_ln_sw (2) bit (1) defined (  cobol_ext_lex$cobol_ln_sw);
  1   113 dcl     cobol_ext_lex$cobol_prime_sw bit (1) ext;
  1   114 dcl     cobol_prime_sw bit (1) defined (  cobol_ext_lex$cobol_prime_sw);
  1   115 dcl     cobol_ext_lex$cobol_rec1_sw (2) bit (1) ext;
  1   116 dcl     cobol_rec1_sw (2) bit (1) defined (  cobol_ext_lex$cobol_rec1_sw);
  1   117 dcl     cobol_ext_lex$cobol_progid_sw bit(1) ext;
  1   118 dcl     cobol_progid_sw bit(1) defined (  cobol_ext_lex$cobol_progid_sw);
  1   119 
  1   120 
  1   121 /*   * * *   END LEX EXTERNAL DATA   * * *   */
  1   122 /* END INCLUDE FILE ... cobol_ext_lex.incl.pl1 */
  1   123 
      171 
      172 
      173      end cobol_delete_tokens;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    05/24/89  0832.7  cobol_delete_tokens.pl1           >spec>install>MR12.3-1048>cobol_delete_tokens.pl1
171          1    03/27/82  0431.6  cobol_ext_lex.incl.pl1            >ldd>include>cobol_ext_lex.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
addrel                                                 builtin function         dcl 58 ref 159
at_st                                  based           char(1)                  packed unaligned dcl 157 set ref 160*
back_link                 2            based           pointer                  level 2 dcl 43 set ref 115 119 127 131 136* 136 144*
cobol_cards                            defined         structure                level 1 unaligned dcl 1-65
cobol_current                          defined         pointer                  dcl 1-10 set ref 73 115 115* 123 123*
cobol_ext_lex$cobol_current     000020 external static pointer                  dcl 1-9 set ref 73 73 115 115 115* 115 123 123 123*
                                                                                  123
cobol_ext_lex$cobol_frst        000024 external static pointer                  dcl 1-13 set ref 121* 121 123 123
cobol_ext_lex$cobol_ta_ptr      000026 external static pointer                  dcl 1-21 ref 152 152
cobol_ext_lex$cobol_top         000022 external static pointer                  dcl 1-11 set ref 131* 131
cobol_frst                             defined         pointer                  dcl 1-14 set ref 121* 123
cobol_ta_ptr                           defined         pointer                  dcl 1-22 ref 152
cobol_top                              defined         pointer                  dcl 1-12 set ref 131*
ct                              000010 internal static pointer                  dcl 54 set ref 73* 86* 103 103 105 107* 107 109 115
                                                                                  115 119 121 127 127 131 131 136 136 139 143 144
                                                                                  145 149 152 159* 159 160 167*
force_sw                        000014 internal static bit(1)                   packed unaligned dcl 55 set ref 62* 83* 99
fwd_link                               based           pointer                  level 2 dcl 43 set ref 107 121 127* 127 131 136 139
                                                                                  145*
hi                                     parameter       pointer                  dcl 53 ref 27 79 92 92 105 149
lo                                     parameter       pointer                  dcl 53 set ref 27 68 79 86 89 92 143*
null                                                   builtin function         dcl 59 ref 89 92 109 119 123 131 144 145 149
p                               000012 internal static pointer                  dcl 54 set ref 139* 149 167
rtn_sw                          000015 internal static bit(1)                   packed unaligned dcl 55 set ref 94* 97* 149* 164
token                                  based           structure                level 1 unaligned dcl 43
type                     12            based           fixed bin(17,0)          level 2 dcl 43 ref 103 103
ul_sw                           000016 internal static bit(1)                   packed unaligned dcl 55 set ref 63* 72* 84* 141

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
cobol_allo_init_sw                     defined         bit(1)                   packed unaligned dcl 1-82
cobol_c_l_n                            defined         fixed bin(17,0)          dcl 1-48
cobol_cfp                              defined         pointer                  dcl 1-20
cobol_comma_character                  defined         char(1)                  packed unaligned dcl 1-33
cobol_continuation                     defined         bit(1)                   packed unaligned dcl 1-78
cobol_copy_active                      defined         bit(1)                   packed unaligned dcl 1-110
cobol_copy_found                       defined         bit(1)                   packed unaligned dcl 1-92
cobol_debug_mode                       defined         bit(1)                   packed unaligned dcl 1-102
cobol_decimal_point_character          defined         char(1)                  packed unaligned dcl 1-35
cobol_dp_sw                            defined         bit(1)                   packed unaligned dcl 1-98
cobol_elnp_sw                          defined         bit(1)                   packed unaligned dcl 1-96
cobol_elt_buf_ptr                      defined         pointer                  dcl 1-24
cobol_elt_idx                          defined         fixed bin(17,0)          dcl 1-60
cobol_endprog_sw                       defined         bit(1)                   packed unaligned dcl 1-100
cobol_ext_lex$cobol_allo_init_sw       external static bit(1)                   packed unaligned dcl 1-81
cobol_ext_lex$cobol_c_l_n              external static fixed bin(17,0)          dcl 1-47
cobol_ext_lex$cobol_cards              external static structure                level 1 unaligned dcl 1-64
cobol_ext_lex$cobol_cfp                external static pointer                  dcl 1-19
cobol_ext_lex$cobol_comma_character    external static char(1)                  packed unaligned dcl 1-32
cobol_ext_lex$cobol_continuation       external static bit(1)                   packed unaligned dcl 1-77
cobol_ext_lex$cobol_copy_active        external static bit(1)                   packed unaligned dcl 1-109
cobol_ext_lex$cobol_copy_found         external static bit(1)                   packed unaligned dcl 1-91
cobol_ext_lex$cobol_debug_mode         external static bit(1)                   packed unaligned dcl 1-101
cobol_ext_lex$cobol_decimal_point_character
                                       external static char(1)                  packed unaligned dcl 1-34
cobol_ext_lex$cobol_dp_sw              external static bit(1)                   packed unaligned dcl 1-97
cobol_ext_lex$cobol_elnp_sw            external static bit(1)                   packed unaligned dcl 1-95
cobol_ext_lex$cobol_elt_buf_ptr        external static pointer                  dcl 1-23
cobol_ext_lex$cobol_elt_idx            external static fixed bin(17,0)          dcl 1-59
cobol_ext_lex$cobol_endprog_sw         external static bit(1)                   packed unaligned dcl 1-99
cobol_ext_lex$cobol_head_words         external static bit(1)                   array packed unaligned dcl 1-93
cobol_ext_lex$cobol_init_ta_sw         external static bit(1)                   packed unaligned dcl 1-105
cobol_ext_lex$cobol_lex_exit           external static label variable           dcl 1-25
cobol_ext_lex$cobol_ln_sw              external static bit(1)                   array packed unaligned dcl 1-111
cobol_ext_lex$cobol_lu_sw              external static bit(1)                   packed unaligned dcl 1-83
cobol_ext_lex$cobol_mfp                external static pointer                  dcl 1-15
cobol_ext_lex$cobol_name_number        external static fixed bin(17,0)          dcl 1-53
cobol_ext_lex$cobol_new_line_character external static char(1)                  packed unaligned dcl 1-36
cobol_ext_lex$cobol_output_sw          external static bit(1)                   packed unaligned dcl 1-87
cobol_ext_lex$cobol_pic_switch         external static bit(1)                   packed unaligned dcl 1-79
cobol_ext_lex$cobol_prime_sw           external static bit(1)                   packed unaligned dcl 1-113
cobol_ext_lex$cobol_progid_sw          external static bit(1)                   packed unaligned dcl 1-117
cobol_ext_lex$cobol_rec1_sw            external static bit(1)                   array packed unaligned dcl 1-115
cobol_ext_lex$cobol_rep_sw             external static bit(1)                   packed unaligned dcl 1-107
cobol_ext_lex$cobol_rt_ptr             external static pointer                  dcl 1-17
cobol_ext_lex$cobol_rwt_init_sw        external static bit(1)                   packed unaligned dcl 1-103
cobol_ext_lex$cobol_save_cln           external static fixed bin(17,0)          dcl 1-49
cobol_ext_lex$cobol_save_col           external static fixed bin(17,0)          dcl 1-51
cobol_ext_lex$cobol_scanoff_sw         external static bit(1)                   packed unaligned dcl 1-85
cobol_ext_lex$cobol_section_number     external static fixed bin(17,0)          dcl 1-55
cobol_ext_lex$cobol_si_key             external static char(5)                  packed unaligned dcl 1-38
cobol_ext_lex$cobol_so_key             external static char(5)                  packed unaligned dcl 1-40
cobol_ext_lex$cobol_sr                 external static fixed bin(17,0)          dcl 1-57
cobol_ext_lex$cobol_stack_sw           external static bit(1)                   packed unaligned dcl 1-89
cobol_ext_lex$cobol_tarea              external static char(300)                packed unaligned dcl 1-30
cobol_ext_lex$ph_num                   external static fixed bin(17,0)          dcl 1-45
cobol_ext_lex$processing_report        external static bit(1)                   packed unaligned dcl 1-73
cobol_ext_lex$real_end_report          external static bit(1)                   packed unaligned dcl 1-75
cobol_head_words                       defined         bit(1)                   array packed unaligned dcl 1-94
cobol_init_ta_sw                       defined         bit(1)                   packed unaligned dcl 1-106
cobol_lex_exit                         defined         label variable           dcl 1-26
cobol_ln_sw                            defined         bit(1)                   array packed unaligned dcl 1-112
cobol_lu_sw                            defined         bit(1)                   packed unaligned dcl 1-84
cobol_mfp                              defined         pointer                  dcl 1-16
cobol_name_number                      defined         fixed bin(17,0)          dcl 1-54
cobol_new_line_character               defined         char(1)                  packed unaligned dcl 1-37
cobol_output_sw                        defined         bit(1)                   packed unaligned dcl 1-88
cobol_pic_switch                       defined         bit(1)                   packed unaligned dcl 1-80
cobol_prime_sw                         defined         bit(1)                   packed unaligned dcl 1-114
cobol_progid_sw                        defined         bit(1)                   packed unaligned dcl 1-118
cobol_rec1_sw                          defined         bit(1)                   array packed unaligned dcl 1-116
cobol_rep_sw                           defined         bit(1)                   packed unaligned dcl 1-108
cobol_rt_ptr                           defined         pointer                  dcl 1-18
cobol_rwt_init_sw                      defined         bit(1)                   packed unaligned dcl 1-104
cobol_save_cln                         defined         fixed bin(17,0)          dcl 1-50
cobol_save_col                         defined         fixed bin(17,0)          dcl 1-52
cobol_scanoff_sw                       defined         bit(1)                   packed unaligned dcl 1-86
cobol_section_number                   defined         fixed bin(17,0)          dcl 1-56
cobol_si_key                           defined         char(5)                  packed unaligned dcl 1-39
cobol_so_key                           defined         char(5)                  packed unaligned dcl 1-41
cobol_sr                               defined         fixed bin(17,0)          dcl 1-58
cobol_stack_sw                         defined         bit(1)                   packed unaligned dcl 1-90
cobol_tarea                            defined         char(300)                packed unaligned dcl 1-31
ph_num                                 defined         fixed bin(17,0)          dcl 1-46
processing_report                      defined         bit(1)                   packed unaligned dcl 1-74
real_end_report                        defined         bit(1)                   packed unaligned dcl 1-76

NAMES DECLARED BY EXPLICIT CONTEXT.
cobol_delete_tokens             000010 constant        entry                    external dcl 27
del                             000123 constant        label                    dcl 115 ref 74 95 99
del_force                       000041 constant        entry                    external dcl 79
exceptions                      000076 constant        label                    dcl 99 ref 112 169
start                           000052 constant        label                    dcl 86 set ref 64
unlnk                           000023 constant        entry                    external dcl 68

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       326         356     227         336
Length       562     227        30         167      77          10

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
cobol_delete_tokens                  64 external procedure  is an external procedure.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 ct                          cobol_delete_tokens
000012 p                           cobol_delete_tokens
000014 force_sw                    cobol_delete_tokens
000015 rtn_sw                      cobol_delete_tokens
000016 ul_sw                       cobol_delete_tokens

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
return_mac          ext_entry

NO EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
cobol_ext_lex$cobol_current   cobol_ext_lex$cobol_frst      cobol_ext_lex$cobol_ta_ptr    cobol_ext_lex$cobol_top




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     27 000004        62 000015        63 000016        64 000017        68 000020        72 000030        73 000033
     74 000036        79 000037        83 000046        84 000051        86 000052        89 000056        92 000062
     94 000072        95 000074        97 000075        99 000076       103 000101       105 000107       107 000114
    109 000116       112 000122       115 000123       119 000132       121 000137       123 000141       125 000150
    127 000151       131 000153       136 000162       139 000165       141 000167       143 000171       144 000173
    145 000175       146 000176       149 000177       152 000212       159 000216       160 000220       164 000223
    167 000225       169 000226


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
