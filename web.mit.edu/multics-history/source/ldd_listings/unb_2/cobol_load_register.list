	COMPILATION LISTING OF SEGMENT cobol_load_register
	Compiled by: Multics PL/I Compiler, Release 31b, of April 24, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 05/24/89  0947.1 mst Wed
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        6*        *                                                         *
        7*        * Copyright (c) 1972 by Massachusetts Institute of        *
        8*        * Technology and Honeywell Information Systems, Inc.      *
        9*        *                                                         *
       10*        *********************************************************** */
       11 
       12 
       13 
       14 
       15 /****^  HISTORY COMMENTS:
       16*  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
       17*     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
       18*     MCR8060 cobol_load_register.pl1 Added Trace statements.
       19*                                                   END HISTORY COMMENTS */
       20 
       21 
       22 /* Modified on 10/19/85 by FCH, [5.3-1], BUG563(phx18381), new cobol_addr_tokens.incl.pl1 */
       23 /* Modified on 01/17/77 by ORN to call cobol_make_reg_token instead of cobol_make_register_token */
       24 /* Modified since Version 2.0 */
       25 
       26 /*{*/
       27 /* format: style3 */
       28 cobol_load_register:
       29      proc (operand_token_ptr, register_token_ptr);
       30 
       31 /*
       32*This procedure generates code to load a value into either the A
       33*or Q register.
       34**/
       35 
       36 /*  DECLARATION OF THE PARAMETERS  */
       37 
       38 dcl	operand_token_ptr	ptr;
       39 dcl	register_token_ptr	ptr;
       40 
       41 /*  DESCRIPTION OF THE PARAMETERS  */
       42 
       43 /*
       44*PaRaMETER		DEsCRIPTION
       45*
       46*operand_token_ptr	Pointer to a token that describes the operand
       47*		to be loaded into the register.  This token
       48*		can be on of the following types:
       49*		  1.  data name token (type 9) for a short
       50*		   or long binary data item.
       51*		  2. immediate constant token (type 102)
       52*register_token_ptr	Pointer to a register token (type 100) that
       53*		describes the register into which the operand
       54*		is loaded.  If this pointer is null() on
       55*		entry, then space for the token is provided
       56*		to the user, and the value is
       57*		loaded into either the A or Q register.
       58*		(whichever is available)  If this pointer is not
       59*		null, it must point to a register token
       60*		(type 100) whose entry cobol_type100.register
       61*		specifies the register which is to be loaded.
       62**/
       63 
       64 
       65 
       66 /*}*/
       67 
       68 /*  DECLARATION OF EXTERNAL ENTRIES  */
       69 
       70 dcl	cobol_register$load ext entry (ptr);
       71 dcl	cobol_make_reg_token
       72 			ext entry (ptr, bit (4));
       73 dcl	cobol_short_to_longbin$register
       74 			ext entry (ptr, ptr);
       75 dcl	cobol_addr	ext entry (ptr, ptr, ptr);
       76 dcl	cobol_emit	ext entry (ptr, ptr, fixed bin);
       77 
       78 
       79 
       80 /*  DECLARATION OF INTERNAL STATIC DATA  */
       81 
       82 dcl	LDA		bit (10) int static init ("0100111010"b);
       83 						/*  LDA  */
       84 dcl	LDQ		bit (10) int static init ("0100111100"b);
       85 						/*  LDQ  */
       86 dcl	direct_lower_inst	bit (36) int static init ("000000000000000000000000000000000111"b);
       87 						/*  zero,dl  */
       88 
       89 
       90 /*  DECLARATION OF INTERNAL VARIABLES  */
       91 
       92 dcl	1 input_buff	aligned,
       93 	  2 buff		(1:10) ptr;
       94 
       95 dcl	1 inst_buff	aligned,
       96 	  2 buff		(1:2) fixed bin;
       97 
       98 dcl	1 reloc_buff	aligned,
       99 	  2 buff		(1:10) bit (5) aligned;
      100 
      101 dcl	dn_ptr		ptr;
      102 
      103 
      104 dcl	1 register_struc,
      105 	  2 what_reg	fixed bin,
      106 	  2 reg_no	bit (4),
      107 	  2 lock		fixed bin,
      108 	  2 already_there	fixed bin,
      109 	  2 contains	fixed bin,
      110 	  2 tok_ptr	ptr,
      111 	  2 literal	bit (36);
      112 
      113 
      114 /**************************************************/
      115 start:
      116 	if operand_token_ptr -> data_name.type = rtc_dataname
      117 	then do;					/*  Operand to be loaded is long or short binary cobol data item.  */
      118 		if operand_token_ptr -> data_name.bin_18
      119 		then /*  Operand to be loaded is short binary.  */
      120 		     call cobol_short_to_longbin$register (operand_token_ptr, register_token_ptr);
      121 
      122 		else do;				/*  Operand to be loaded is a long binary data item.  */
      123 						/*  Establish addressability to the operand.  */
      124 			input_ptr = addr (input_buff);
      125 			inst_ptr = addr (inst_buff);
      126 			reloc_ptr = addr (reloc_buff);
      127 			input_struc.type = 2;
      128 			input_struc.operand_no = 1;
      129 			input_struc.lock = 0;
      130 			input_struc.operand.size_sw (1) = 0;
      131 			input_struc.operand.token_ptr (1) = operand_token_ptr;
      132 			call cobol_addr (input_ptr, inst_ptr, reloc_ptr);
      133 
      134 			if register_token_ptr = null ()
      135 			then register_struc.what_reg = 4;
      136 						/*  A or Q  */
      137 			else if register_token_ptr -> cobol_type100.register = "0001"b
      138 			then register_struc.what_reg = 1;
      139 						/*  A  */
      140 			else register_struc.what_reg = 2;
      141 						/*  Q  */
      142 
      143 			register_struc.lock = 1;	/*  lock it  */
      144 			register_struc.contains = 0;
      145 
      146 			call cobol_register$load (addr (register_struc));
      147 
      148 			if register_struc.reg_no = "0001"b
      149 						/*  A  */
      150 			then inst_struc_basic.fill1_op = LDA;
      151 			else inst_struc_basic.fill1_op = LDQ;
      152 			call cobol_emit (inst_ptr, reloc_ptr, 1);
      153 
      154 			if register_token_ptr = null ()
      155 			then call cobol_make_reg_token (register_token_ptr, register_struc.reg_no);
      156 		     end;				/*  Operand to be loaded is a long binary data item.  */
      157 
      158 
      159 	     end;					/*  Operand to be loaded is long or short binary cobol data item.  */
      160 
      161 	else do;					/*  Operand to be loaded is an immediate constant.  */
      162 		if register_token_ptr = null ()
      163 		then register_struc.what_reg = 4;	/*  A or Q  */
      164 		else if register_token_ptr -> cobol_type100.register = "0001"b
      165 		then register_struc.what_reg = 1;	/*  A  */
      166 		else register_struc.what_reg = 2;	/*  Q  */
      167 
      168 		register_struc.lock = 1;
      169 		register_struc.contains = 0;
      170 		call cobol_register$load (addr (register_struc));
      171 
      172 		if register_struc.reg_no = "0001"b	/*  A  */
      173 		then substr (direct_lower_inst, 19, 10) = LDA;
      174 		else substr (direct_lower_inst, 19, 10) = LDQ;
      175 						/*  Insert the immediate value into the instruction  */
      176 		substr (direct_lower_inst, 1, 18) =
      177 		     substr (unspec (operand_token_ptr -> immed_const.const_value), 19, 18);
      178 		call cobol_emit (addr (direct_lower_inst), null (), 1);
      179 
      180 		if register_token_ptr = null ()
      181 		then call cobol_make_reg_token (register_token_ptr, register_struc.reg_no);
      182 
      183 	     end;					/*  Operand to be loaded is an immediate constant.  */
      184 
      185 /*  INCLUDE FILES USED BY THIS PROCEDURE  */
      186 
      187 
      188 /*****	Declaration for builtin function	*****/
      189 
      190 dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
      191 			builtin;
      192 
      193 /*****	End of declaration for builtin function	*****/
      194 
  1     1 
  1     2 /* BEGIN INCLUDE FILE ... cobol_type9.incl.pl1 */
  1     3 /* Last modified on 11/19/76 by ORN */
  1     4 
  1     5 /*
  1     6*A type 9 data name token is entered into the name table by the data
  1     7*division syntax phase for each data name described in the data division.
  1     8*The replacement phase subsequently replaces type 8 user word references
  1     9*to data names in the procedure division minpral file with the corresponding
  1    10*type 9 tokens from the name table.
  1    11**/
  1    12 
  1    13 /* dcl dn_ptr ptr; */
  1    14 
  1    15 /* BEGIN DECLARATION OF TYPE9 (DATA NAME) TOKEN */
  1    16 dcl 1 data_name based (dn_ptr),
  2     1 
  2     2 /* begin include file ... cobol_TYPE9.incl.pl1 */
  2     3 /* Last modified on 06/19/77 by ORN */
  2     4 /* Last modified on 12/28/76 by FCH */
  2     5 
  2     6 		/* header */
  2     7 		2 size fixed bin,
  2     8 		2 line fixed bin,
  2     9 		2 column fixed bin,
  2    10 		2 type fixed bin,
  2    11 		/* body */
  2    12 		2 string_ptr ptr,
  2    13 		2 prev_rec ptr,
  2    14 		2 searched bit (1),
  2    15 		2 duplicate bit (1),
  2    16 		2 saved bit (1),
  2    17 		2 debug_ind bit (1),
  2    18 		2 filler2 bit (3),
  2    19 		2 used_as_sub bit (1),
  2    20 		2 def_line fixed bin,
  2    21 		2 level fixed bin,
  2    22 		2 linkage fixed bin,
  2    23 		2 file_num fixed bin,
  2    24 		2 size_rtn fixed bin,
  2    25 		2 item_length fixed bin(24),
  2    26 		2 places_left fixed bin,
  2    27 		2 places_right fixed bin,
  2    28 		/* description */
  2    29 		2 file_section bit (1),
  2    30 		2 working_storage bit (1),
  2    31 		2 constant_section bit (1),
  2    32 		2 linkage_section bit (1),
  2    33 		2 communication_section bit (1),
  2    34 		2 report_section bit (1),
  2    35 		2 level_77 bit (1),
  2    36 		2 level_01 bit (1),
  2    37 		2 non_elementary bit (1),
  2    38 		2 elementary bit (1),
  2    39 		2 filler_item bit (1),
  2    40 		2 s_of_rdf bit (1),
  2    41 		2 o_of_rdf bit (1),
  2    42 		2 bin_18 bit (1),
  2    43 		2 bin_36 bit (1),
  2    44 		2 pic_has_l bit (1),
  2    45 		2 pic_is_do bit (1),
  2    46 		2 numeric bit (1),
  2    47 		2 numeric_edited bit (1),
  2    48 		2 alphanum bit (1),
  2    49 		2 alphanum_edited bit (1),
  2    50 		2 alphabetic bit (1),
  2    51 		2 alphabetic_edited bit (1),
  2    52 		2 pic_has_p bit (1),
  2    53 		2 pic_has_ast bit (1),
  2    54 		2 item_signed bit(1),
  2    55 		2 sign_separate bit (1),
  2    56 		2 display bit (1),
  2    57 		2 comp bit (1),
  2    58 		2 ascii_packed_dec_h bit (1),	/* as of 8/16/76  this field used for comp8. */
  2    59 		2 ascii_packed_dec bit (1),
  2    60 		2 ebcdic_packed_dec bit (1),
  2    61 		2 bin_16 bit (1),
  2    62 		2 bin_32 bit (1),
  2    63 		2 usage_index bit (1),
  2    64 		2 just_right bit (1),
  2    65 		2 compare_argument bit (1),
  2    66 		2 sync bit (1),
  2    67 		2 temporary bit (1),
  2    68 		2 bwz bit (1),
  2    69 		2 variable_length bit (1),
  2    70 		2 subscripted bit (1),
  2    71 		2 occurs_do bit (1),
  2    72 		2 key_a bit (1),
  2    73 		2 key_d bit (1),
  2    74 		2 indexed_by bit (1),
  2    75 		2 value_numeric bit (1),
  2    76 		2 value_non_numeric bit (1),
  2    77 		2 value_signed bit (1),
  2    78 		2 sign_type bit (3),
  2    79 		2 pic_integer bit (1),
  2    80 		2 ast_when_zero bit (1),
  2    81 		2 label_record bit (1),
  2    82 		2 sign_clause_occurred bit (1),
  2    83 		2 okey_dn bit (1),
  2    84 		2 subject_of_keyis bit (1),
  2    85 		2 exp_redefining bit (1),
  2    86 		2 sync_in_rec bit (1),
  2    87 		2 rounded bit (1),
  2    88 		2 ad_bit bit (1),
  2    89 		2 debug_all bit (1),
  2    90 		2 overlap bit (1),
  2    91 		2 sum_counter bit (1),
  2    92 		2 exp_occurs bit (1),
  2    93 		2 linage_counter bit (1),
  2    94 		2 rnm_01 bit (1),
  2    95 		2 aligned bit (1),
  2    96 		2 not_user_writable bit (1),
  2    97 		2 database_key bit (1),
  2    98 		2 database_data_item bit (1),
  2    99 		2 seg_num fixed bin,
  2   100 		2 offset fixed bin(24),
  2   101 		2 initial_ptr fixed bin,
  2   102 		2 edit_ptr fixed bin,
  2   103 		2 occurs_ptr fixed bin,
  2   104 		2 do_rec char(5),
  2   105 		2 bitt bit (1),
  2   106 		2 byte bit (1),
  2   107 		2 half_word bit (1),
  2   108 		2 word bit (1),
  2   109 		2 double_word bit (1),
  2   110 		2 half_byte bit (1),
  2   111 		2 filler5 bit (1),
  2   112 		2 bit_offset bit (4),
  2   113 		2 son_cnt bit (16),
  2   114 		2 max_red_size fixed bin(24),
  2   115 		2 name_size fixed bin,
  2   116 		2 name char(0 refer(data_name.name_size));	
  2   117 
  2   118 
  2   119 
  2   120 /* end include file ... cobol_TYPE9.incl.pl1 */
  2   121 
  1    17 
  1    18 /* END DECLARATION OF TYPE9 (DATA NAME) TOKEN */
  1    19 
  1    20 /* END INCLUDE FILE ... cobol_type9.incl.pl1 */
  1    21 
      195 
  3     1 
  3     2 /* BEGIN INCLUDE FILE ...   cobol_addr_tokens.incl.pl1 */
  3     3 
  3     4 
  3     5 /****^  HISTORY COMMENTS:
  3     6*  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8058),
  3     7*     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
  3     8*     MCR8058 cobol_addr_tokens.incl.pl1 Change array extents to refer to
  3     9*     constants rather than variables.
  3    10*                                                   END HISTORY COMMENTS */
  3    11 
  3    12 
  3    13 /* Last modified on 10/1/74 by tg */
  3    14 
  3    15 
  3    16 /* parameter list */
  3    17 
  3    18      dcl	   (input_ptr, inst_ptr, reloc_ptr) ptr;
  3    19 
  3    20 
  3    21 /* input_struc_basic is used for type 1 addressing */
  3    22 
  3    23      dcl	   1 input_struc_basic    based (input_ptr),
  3    24 	     2 type	      fixed bin,
  3    25 	     2 operand_no	      fixed bin,
  3    26 	     2 lock	      fixed bin,
  3    27 	     2 segno	      fixed bin,
  3    28 	     2 char_offset	      fixed bin (24),
  3    29 	     2 send_receive	      fixed bin;
  3    30 
  3    31 
  3    32      dcl	   1 input_struc	      based (input_ptr),
  3    33 	     2 type	      fixed bin,
  3    34 	     2 operand_no	      fixed bin,
  3    35 	     2 lock	      fixed bin,
  3    36 	     2 operand	      (0 refer (input_struc.operand_no)),
  3    37 	       3 token_ptr	      ptr,
  3    38 	       3 send_receive     fixed bin,
  3    39 	       3 ic_mod	      fixed bin,
  3    40 	       3 size_sw	      fixed bin;
  3    41 
  3    42 /* reloc_struc is used for all types of addressing * all types */
  3    43 
  3    44      dcl	   1 reloc_struc	      (input_struc.operand_no + 1) based (reloc_ptr),
  3    45 	     2 left_wd	      bit (5) aligned,
  3    46 	     2 right_wd	      bit (5) aligned;
  3    47 
  3    48 /* Instruction format for 1 word instruction */
  3    49 
  3    50 
  3    51      dcl	   1 inst_struc_basic     based (inst_ptr) aligned,
  3    52 	     2 y		      unaligned,
  3    53 	       3 pr	      bit (3) unaligned,
  3    54 	       3 wd_offset	      bit (15) unaligned,
  3    55 	     2 fill1_op	      bit (10) unaligned,
  3    56 	     2 zero1	      bit (1) unaligned,
  3    57 	     2 pr_spec	      bit (1) unaligned,
  3    58 	     2 tm		      bit (2) unaligned,
  3    59 	     2 td		      bit (4) unaligned;
  3    60 
  3    61 
  3    62 /* The detailed definitions of the fields in this structure
  3    63*   can be found in the GMAP manual section 8 */
  3    64 /* EIS instruction format for 2_4 word instructions */
  3    65 
  3    66      dcl	   1 inst_struc	      based (inst_ptr) aligned,
  3    67 	     2 inst	      unaligned,
  3    68 	       3 zero1	      bit (2) unaligned,
  3    69 	       3 mf3	      unaligned,
  3    70 	         4 pr_spec	      bit (1) unaligned,
  3    71 	         4 reg_or_length  bit (1) unaligned,
  3    72 	         4 zero2	      bit (1) unaligned,
  3    73 	         4 reg_mod	      bit (4) unaligned,
  3    74 	       3 zero3	      bit (2) unaligned,
  3    75 	       3 mf2	      unaligned,
  3    76 	         4 pr_spec	      bit (1) unaligned,
  3    77 	         4 reg_or_length  bit (1) unaligned,
  3    78 	         4 zero4	      bit (1) unaligned,
  3    79 	         4 reg_mod	      bit (4) unaligned,
  3    80 	       3 fill1_op	      bit (10) unaligned,
  3    81 	       3 zero5	      bit (1) unaligned,
  3    82 	       3 mf1	      unaligned,
  3    83 	         4 pr_spec	      bit (1) unaligned,
  3    84 	         4 reg_or_length  bit (1) unaligned,
  3    85 	         4 zero6	      bit (1) unaligned,
  3    86 	         4 reg_mod	      bit (4) unaligned,
  3    87 	     2 desc_ext	      unaligned,
  3    88 	       3 desc	      (512) unaligned,
  3    89 	         4 desc_od	      bit (36) unaligned;
  3    90 
  3    91 /* The detailed definitions of the fields in this structure
  3    92*   can be found in the GMAP manual section 8.
  3    93*   The desc_ext is the descriptor extension of this eis
  3    94*   instruction. The number of descriptors associated with
  3    95*   this instruction is equavalent to the operand number.
  3    96*   Depending on operand data type, the descriptor
  3    97*   can be alphanumeric or numeric.  The structures of the
  3    98*   alphanumeric and the numeric descriptors are defined
  3    99*   below. */
  3   100 
  3   101 /* alphanumeric descriptor format */
  3   102 
  3   103      dcl	   1 desc_an	      based (desc_an_ptr) unaligned,
  3   104 	     2 desc_f	      (512) unaligned,
  3   105 	       3 y	      unaligned,
  3   106 	         4 pr	      bit (3) unaligned,
  3   107 	         4 wd_offset      bit (15) unaligned,
  3   108 	       3 char_n	      bit (3) unaligned,
  3   109 	       3 zero1	      bit (1) unaligned,
  3   110 	       3 ta	      bit (2),
  3   111 	       3 n	      bit (12) unaligned;
  3   112 
  3   113 
  3   114 /* The detailed definitions of the fields in this structure can
  3   115*   be found in the GMAP manual section 8. */
  3   116 /* numeric descriptor format */
  3   117 
  3   118      dcl	   desc_nn_ptr	      ptr;
  3   119      dcl	   desc_an_ptr	      ptr;
  3   120 
  3   121 
  3   122      dcl	   1 desc_nn	      based (desc_nn_ptr) unaligned,
  3   123 	     2 desc_f	      (512) unaligned,
  3   124 	       3 y	      unaligned,
  3   125 	         4 pr	      bit (3) unaligned,
  3   126 	         4 wd_offset      bit (15) unaligned,
  3   127 	       3 digit_n	      bit (3) unaligned,
  3   128 	       3 tn	      bit (1) unaligned,
  3   129 	       3 sign_type	      bit (2) unaligned,
  3   130 	       3 scal	      bit (6) unaligned,
  3   131 	       3 n	      bit (6) unaligned;
  3   132 
  3   133 
  3   134 /* The detailed definitions of fields in this structure can
  3   135*   be found in the GMAP manual section 8. */
  3   136 /* END INCLUDE FILE ...   cobol_addr_tokens.incl.pl1 */
  3   137 
      196 
  4     1   
  4     2 /* BEGIN INCLUDE FILE... cobol_type102.incl.pl1 */
  4     3 /* Last modified on 1/19/76 by ORN */
  4     4 
  4     5 /*
  4     6*An immediate constant token is created during the
  4     7*generation of code that performs arithmetic in the hardware
  4     8*registers, for any numeric literal token whose value is within
  4     9*the range:  (-131072,131071).
  4    10**/
  4    11 
  4    12 dcl immed_const_ptr ptr;
  4    13 
  4    14 /* BEGIN DECLARATION OF TYPE102 (IMMEDIATE CONSTANT) TOKEN */
  4    15 dcl 1 immed_const based(immed_const_ptr),
  4    16 	/* header */
  4    17 	2 size fixed bin (15),
  4    18 	2 line fixed bin (15),
  4    19 	2 column fixed bin (15),
  4    20 	2 type fixed bin (15),
  4    21 	/* body */
  4    22 	2 const_value fixed bin (35);
  4    23 /* END DECLARATION OF TYPE102 (IMMEDIATE CONSTANT) TOKEN */
  4    24 
  4    25 /*
  4    26*FIELD		CONTENTS
  4    27*
  4    28*size		The total size in bytes of this immediate
  4    29*		constant token.
  4    30*line		not used
  4    31*column		not used
  4    32*type		102
  4    33*const_value	The fixed binary value of the immediate constant.
  4    34**/
  4    35 
  4    36 /* END INCLUDE FILE... cobol_type102.incl.pl1 */
  4    37 
      197 
  5     1 
  5     2 /* BEGIN INCLUDE FILE ...   cobol_record_types.incl.pl1 */
  5     3 /*   <<<   LAST MODIFIED ON 09-09-75 by tlf   >>>   */
  5     4 
  5     5 dcl rtc_resword fixed bin (15) int static		init(1);
  5     6 dcl rtc_numlit fixed bin (15) int static		init(2);
  5     7 dcl rtc_alphalit fixed bin (15) int static		init(3);
  5     8 dcl rtc_picstring fixed bin (15) int static		init(4);
  5     9 dcl rtc_diag fixed bin (15) int static			init(5);
  5    10 dcl rtc_source fixed bin (15) int static		init(6);
  5    11 dcl rtc_procdef fixed bin (15) int static		init(7);
  5    12 dcl rtc_userwd fixed bin (15) int static		init(8);
  5    13 dcl rtc_dataname fixed bin (15) int static		init(9);
  5    14 dcl rtc_indexname fixed bin (15) int static		init(10);
  5    15 dcl rtc_condname fixed bin (15) int static 		init(11);
  5    16 dcl rtc_filedef fixed bin (15) int static 		init(12);
  5    17 dcl rtc_commdesc fixed bin (15) int static		init(13);
  5    18 dcl rtc_debugitems fixed bin (15) int static		init(14);
  5    19 dcl rtc_savedarea fixed bin (15) int static		init(15);
  5    20 dcl rtc_sortmerge fixed bin (15) int static		init(16);
  5    21 dcl rtc_mnemonic fixed bin (15) int static		init(17);
  5    22 dcl rtc_pararef fixed bin (15) int static		init(18);
  5    23 dcl rtc_eos fixed bin (15) int static 			init(19);
  5    24 dcl rtc_reportname fixed bin (15) int static		init(20);
  5    25 dcl rtc_groupname fixed bin (15) int static		init(21);
  5    26 dcl rtc_reportentry fixed bin (15) int static		init(22);
  5    27 dcl rtc_unknown1 fixed bin (15) int static		init(23);
  5    28 dcl rtc_debugenable fixed bin (15) int static		init(24);
  5    29 dcl rtc_unknown2 fixed bin (15) int static		init(25);
  5    30 dcl rtc_unknown3 fixed bin (15) int static		init(26);
  5    31 dcl rtc_unknown4 fixed bin (15) int static		init(27);
  5    32 dcl rtc_unknown5 fixed bin (15) int static		init(28);
  5    33 dcl rtc_unknown6 fixed bin (15) int static		init(29);
  5    34 dcl rtc_internal_tag fixed bin (15) int static		init(30);
  5    35 dcl rtc_equate_tag fixed bin (15) int static		init(31);
  5    36 dcl rtc_register fixed bin (15) int static		init(100);
  5    37 dcl rtc_fdec_temp fixed bin (15) int static		init(101);
  5    38 dcl rtc_immed_const fixed bin (15) int static		init(102);
  5    39 
  5    40 /* END INCLUDE FILE ...   cobol_record_types.incl.pl1 */
  5    41 
      198 
  6     1 
  6     2 /* BEGIN INCLUDE FILE ... cobol_type100.incl.pl1 */
  6     3 /* Last modified on 11/19/76 by ORN */
  6     4 
  6     5 /*
  6     6*The internal register token is used only during the code generation phase.
  6     7**/
  6     8 
  6     9 dcl cobol_type100_ptr ptr;
  6    10 
  6    11 /* BEGIN DECLARATION OF TYPE100 (INTERNAL REGISTER) TOKEN */
  6    12 dcl 1 cobol_type100 based (cobol_type100_ptr) aligned,
  6    13 	/* header */
  6    14 	 2 size fixed bin (15),
  6    15 	 2 line fixed bin (15),
  6    16 	 2 column fixed bin (7),
  6    17 	 2 type fixed bin (7),
  6    18 	/* body */
  6    19 	 2 register bit (4) unaligned;
  6    20 /* END DECLARATION OF TYPE100 (INTERNAL REGISTER) TOKEN */
  6    21 
  6    22  /*
  6    23*FIELD		CONTENTS
  6    24*
  6    25*size		The total size in bytes of this token.
  6    26*line		Generated sequence number of source line.
  6    27*		Always 0.
  6    28*column		The column number on the source image.
  6    29*		Always 0.
  6    30*type		100
  6    31*register		The register number in the following form.
  6    32*			"0001"b - A register.
  6    33*			"0010"b - Q register.
  6    34*			"0011"b - A and Q registers.
  6    35*			"1nnn"b - index register nnn.
  6    36**/
  6    37 
  6    38 /* END INCLUDE FILE ... cobol_type100.incl.pl1 */
  6    39 
      199 
      200 
      201      end cobol_load_register;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    05/24/89  0830.5  cobol_load_register.pl1           >spec>install>MR12.3-1048>cobol_load_register.pl1
195          1    03/27/82  0439.9  cobol_type9.incl.pl1              >ldd>include>cobol_type9.incl.pl1
1-17         2    11/11/82  1712.7  cobol_TYPE9.incl.pl1              >ldd>include>cobol_TYPE9.incl.pl1
196          3    05/24/89  0811.7  cobol_addr_tokens.incl.pl1        >spec>install>MR12.3-1048>cobol_addr_tokens.incl.pl1
197          4    03/27/82  0439.8  cobol_type102.incl.pl1            >ldd>include>cobol_type102.incl.pl1
198          5    03/27/82  0439.8  cobol_record_types.incl.pl1       >ldd>include>cobol_record_types.incl.pl1
199          6    03/27/82  0439.8  cobol_type100.incl.pl1            >ldd>include>cobol_type100.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
LDA                                    constant        bit(10)                  initial packed unaligned dcl 82 ref 148 172
LDQ                                    constant        bit(10)                  initial packed unaligned dcl 84 ref 151 174
addr                                                   builtin function         dcl 190 ref 124 125 126 146 146 170 170 178 178
bin_18                   21(13)        based           bit(1)                   level 2 packed packed unaligned dcl 1-16 ref 118
cobol_addr                      000020 constant        entry                    external dcl 75 ref 132
cobol_emit                      000022 constant        entry                    external dcl 76 ref 152 178
cobol_make_reg_token            000014 constant        entry                    external dcl 71 ref 154 180
cobol_register$load             000012 constant        entry                    external dcl 70 ref 146 170
cobol_short_to_longbin$register 000016 constant        entry                    external dcl 73 ref 118
cobol_type100                          based           structure                level 1 dcl 6-12
const_value               4            based           fixed bin(35,0)          level 2 dcl 4-15 ref 176
contains                  4     000140 automatic       fixed bin(17,0)          level 2 dcl 104 set ref 144* 169*
data_name                              based           structure                level 1 unaligned dcl 1-16
direct_lower_inst               000010 internal static bit(36)                  initial packed unaligned dcl 86 set ref 172* 174*
                                                                                  176* 178 178
fill1_op                  0(18)        based           bit(10)                  level 2 packed packed unaligned dcl 3-51 set ref
                                                                                  148* 151*
immed_const                            based           structure                level 1 unaligned dcl 4-15
input_buff                      000100 automatic       structure                level 1 dcl 92 set ref 124
input_ptr                       000152 automatic       pointer                  dcl 3-18 set ref 124* 127 128 129 130 131 132*
input_struc                            based           structure                level 1 unaligned dcl 3-32
inst_buff                       000124 automatic       structure                level 1 dcl 95 set ref 125
inst_ptr                        000154 automatic       pointer                  dcl 3-18 set ref 125* 132* 148 151 152*
inst_struc_basic                       based           structure                level 1 dcl 3-51
lock                      2            based           fixed bin(17,0)          level 2 in structure "input_struc" dcl 3-32
                                                                                  in procedure "cobol_load_register" set ref 129*
lock                      2     000140 automatic       fixed bin(17,0)          level 2 in structure "register_struc" dcl 104
                                                                                  in procedure "cobol_load_register" set ref 143*
                                                                                  168*
null                                                   builtin function         dcl 190 ref 134 154 162 178 178 180
operand                   4            based           structure                array level 2 unaligned dcl 3-32
operand_no                1            based           fixed bin(17,0)          level 2 dcl 3-32 set ref 128*
operand_token_ptr                      parameter       pointer                  dcl 38 set ref 28 115 118 118* 131 176
reg_no                    1     000140 automatic       bit(4)                   level 2 packed packed unaligned dcl 104 set ref 148
                                                                                  154* 172 180*
register                  4            based           bit(4)                   level 2 packed packed unaligned dcl 6-12 ref 137 164
register_struc                  000140 automatic       structure                level 1 unaligned dcl 104 set ref 146 146 170 170
register_token_ptr                     parameter       pointer                  dcl 39 set ref 28 118* 134 137 154 154* 162 164 180
                                                                                  180*
reloc_buff                      000126 automatic       structure                level 1 dcl 98 set ref 126
reloc_ptr                       000156 automatic       pointer                  dcl 3-18 set ref 126* 132* 152*
rtc_dataname                           constant        fixed bin(15,0)          initial dcl 5-13 ref 115
size_sw                  10            based           fixed bin(17,0)          array level 3 dcl 3-32 set ref 130*
substr                                                 builtin function         dcl 190 set ref 172* 174* 176* 176
token_ptr                 4            based           pointer                  array level 3 dcl 3-32 set ref 131*
type                      3            based           fixed bin(17,0)          level 2 in structure "data_name" dcl 1-16
                                                                                  in procedure "cobol_load_register" ref 115
type                                   based           fixed bin(17,0)          level 2 in structure "input_struc" dcl 3-32
                                                                                  in procedure "cobol_load_register" set ref 127*
unspec                                                 builtin function         dcl 190 ref 176
what_reg                        000140 automatic       fixed bin(17,0)          level 2 dcl 104 set ref 134* 137* 140* 162* 164*
                                                                                  166*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
addrel                                                 builtin function         dcl 190
binary                                                 builtin function         dcl 190
cobol_type100_ptr                      automatic       pointer                  dcl 6-9
desc_an                                based           structure                level 1 packed packed unaligned dcl 3-103
desc_an_ptr                            automatic       pointer                  dcl 3-119
desc_nn                                based           structure                level 1 packed packed unaligned dcl 3-122
desc_nn_ptr                            automatic       pointer                  dcl 3-118
dn_ptr                                 automatic       pointer                  dcl 101
fixed                                                  builtin function         dcl 190
immed_const_ptr                        automatic       pointer                  dcl 4-12
index                                                  builtin function         dcl 190
input_struc_basic                      based           structure                level 1 unaligned dcl 3-23
inst_struc                             based           structure                level 1 dcl 3-66
length                                                 builtin function         dcl 190
mod                                                    builtin function         dcl 190
rel                                                    builtin function         dcl 190
reloc_struc                            based           structure                array level 1 unaligned dcl 3-44
rtc_alphalit                           internal static fixed bin(15,0)          initial dcl 5-7
rtc_commdesc                           internal static fixed bin(15,0)          initial dcl 5-17
rtc_condname                           internal static fixed bin(15,0)          initial dcl 5-15
rtc_debugenable                        internal static fixed bin(15,0)          initial dcl 5-28
rtc_debugitems                         internal static fixed bin(15,0)          initial dcl 5-18
rtc_diag                               internal static fixed bin(15,0)          initial dcl 5-9
rtc_eos                                internal static fixed bin(15,0)          initial dcl 5-23
rtc_equate_tag                         internal static fixed bin(15,0)          initial dcl 5-35
rtc_fdec_temp                          internal static fixed bin(15,0)          initial dcl 5-37
rtc_filedef                            internal static fixed bin(15,0)          initial dcl 5-16
rtc_groupname                          internal static fixed bin(15,0)          initial dcl 5-25
rtc_immed_const                        internal static fixed bin(15,0)          initial dcl 5-38
rtc_indexname                          internal static fixed bin(15,0)          initial dcl 5-14
rtc_internal_tag                       internal static fixed bin(15,0)          initial dcl 5-34
rtc_mnemonic                           internal static fixed bin(15,0)          initial dcl 5-21
rtc_numlit                             internal static fixed bin(15,0)          initial dcl 5-6
rtc_pararef                            internal static fixed bin(15,0)          initial dcl 5-22
rtc_picstring                          internal static fixed bin(15,0)          initial dcl 5-8
rtc_procdef                            internal static fixed bin(15,0)          initial dcl 5-11
rtc_register                           internal static fixed bin(15,0)          initial dcl 5-36
rtc_reportentry                        internal static fixed bin(15,0)          initial dcl 5-26
rtc_reportname                         internal static fixed bin(15,0)          initial dcl 5-24
rtc_resword                            internal static fixed bin(15,0)          initial dcl 5-5
rtc_savedarea                          internal static fixed bin(15,0)          initial dcl 5-19
rtc_sortmerge                          internal static fixed bin(15,0)          initial dcl 5-20
rtc_source                             internal static fixed bin(15,0)          initial dcl 5-10
rtc_unknown1                           internal static fixed bin(15,0)          initial dcl 5-27
rtc_unknown2                           internal static fixed bin(15,0)          initial dcl 5-29
rtc_unknown3                           internal static fixed bin(15,0)          initial dcl 5-30
rtc_unknown4                           internal static fixed bin(15,0)          initial dcl 5-31
rtc_unknown5                           internal static fixed bin(15,0)          initial dcl 5-32
rtc_unknown6                           internal static fixed bin(15,0)          initial dcl 5-33
rtc_userwd                             internal static fixed bin(15,0)          initial dcl 5-12
string                                                 builtin function         dcl 190

NAMES DECLARED BY EXPLICIT CONTEXT.
cobol_load_register             000010 constant        entry                    external dcl 28
start                           000015 constant        label                    dcl 115

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       420         444     320         430
Length       750     320        24         270     100           2

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
cobol_load_register                 132 external procedure  is an external procedure.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 direct_lower_inst           cobol_load_register

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
cobol_load_register      000100 input_buff                  cobol_load_register
                         000124 inst_buff                   cobol_load_register
                         000126 reloc_buff                  cobol_load_register
                         000140 register_struc              cobol_load_register
                         000152 input_ptr                   cobol_load_register
                         000154 inst_ptr                    cobol_load_register
                         000156 reloc_ptr                   cobol_load_register

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
cobol_addr                    cobol_emit                    cobol_make_reg_token          cobol_register$load
cobol_short_to_longbin$register

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     28 000004       115 000015       118 000023       124 000037       125 000041       126 000043       127 000045
    128 000047       129 000052       130 000053       131 000054       132 000055       134 000067       137 000077
    140 000110       143 000112       144 000114       146 000115       148 000126       151 000137       152 000143
    154 000160       159 000176       162 000177       164 000206       166 000217       168 000221       169 000223
    170 000224       172 000234       174 000246       176 000253       178 000261       180 000301       201 000317


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
