ASSEMBLY LISTING OF SEGMENT >spec>on>06/27/83>lisp_save_alm_.alm              
ASSEMBLED ON:	07/06/83  0928.3 mst Wed
OPTIONS USED:	list 
ASSEMBLED BY:	ALM Version  6.4  April 1981    
ASSEMBLER CREATED:	11/03/82  1423.6 mst Wed

                                     1  " **************************************************************
                                     2  " *                                                            *
                                     3  " * Copyright, (C) Massachusetts Institute of Technology, 1973 *
                                     4  " *                                                            *
                                     5  " **************************************************************
    000000                           6  	name 	lisp_save_alm_
                                     7  
                                     8  " This routine fixes all the its pairs in a segment to have real segment numbers
                                     9  " it is called by the unsaver.
                                    10  " It is written in alm for extra speed.		(10 Nov 1973, DAM)
                                    11  
                                    12  	even
    000000                          13  al_qu_mask:
    000000  aa   000000 777777      14  	zero	0,-1
    000001  aa   777777 000000      15  	zero	-1,0
                                    16  
                        000002      17  	segdef	lisp_save_alm_
    000002                          18  lisp_save_alm_:
                                    19  	" arg 1: ptr of seg to do, chain header
                                    20  	" arg 2: address of pseudo-segment number table, must be unpacked pointers with ring numbers.
                                    21  	" also it relies on the fact that it is bound in with lisp_subr_tv_
                                    22  
    000002  4a  4 00010 3715 20     23  	epplb	<lisp_subr_tv_>|[tv_begin]
                                    24  
    000003  aa  0 00004 3535 20     25  	eppbb	ap|4,*		pick up ptr to segno_table
    000004  aa  3 00000 3535 20     26  	eppbb	bb|0,*
                                    27  
    000005  aa  0 00002 3501 20     28  	eppap	ap|2,*		-> ptr to seg
    000006  aa  0 00000 3525 20     29  	epbpbp	ap|0,*		base of segment to be processed
    000007  aa  0 00000 6201 20     30  	eax0	ap|0,*		chain header
    000010  0a   000027 6000 00     31  	tze	return		if no chain, return to lisp_save_
    000011  aa  0 00000 6515 00     32  	sprilb	ap|0		clobber argument with ptr to sys tv for use later
                                    33  
    000012                          34  loop:
    000012  aa  2 00000 2371 10     35  	ldaq	bp|0,x0		its pair to be fixed up
    000013  aa   000000 6210 01     36  	eax1	0,au		pseudo segment 0?
    000014  0a   000020 6010 00     37  	tnz	g0001		 no
                                    38  
    000015  aa  5 00000 6361 02     39  	eaq	lb|0,qu		yes.  relocate offset into tv + clear chain field
    000016  aa  0 00000 2751 00     40  	ora	ap|0		set system tv segno + ring field + or in its which is ok.
    000017  0a   000023 7100 00     41  	tra	g0002
                                    42  
    000020  aa  2 00000 0611 10     43  g0001:	adx1	bp|0,x0		x1 := 2 x pseudo segno
    000021  0a   000000 3770 00     44  	anaq	al_qu_mask	au := 0, ql := 0
    000022  aa  3 77776 2751 11     45  	ora	bb|-2,x1		set segno + ring + or in its which is OK
    000023                          46  g0002:
    000023  aa  2 00001 7211 10     47  	lxl1	bp|1,x0		pick up next chain
    000024  aa  2 00000 7571 10     48  	staq	bp|0,x0		fix up pointer
    000025  aa   000000 6200 11     49  	eax0	0,x1		move chain to right register + check if 0
    000026  0a   000012 6010 00     50  	tnz	loop
                                    51  
    000027                          52  return:
    000027  aa  7 00044 7101 20     53  	short_return
                                    54  
                                    55  	end

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000030  5a   000003 000000 
    000031  5a   000030 600000 
    000032  aa   000000 000000 
    000033  55   000012 000002 
    000034  5a   000002 400003 
    000035  55   000006 000012 
    000036  aa  016 154 151 163
    000037  aa  160 137 163 141
    000040  aa  166 145 137 141
    000041  aa  154 155 137 000
    000042  55   000021 000003 
    000043  0a   000002 400000 
    000044  55   000015 000003 
    000045  aa  016 154 151 163         lisp_save_alm_
    000046  aa  160 137 163 141
    000047  aa  166 145 137 141
    000050  aa  154 155 137 000
    000051  55   000002 000012 
    000052  6a   000000 400002 
    000053  55   000024 000003 
    000054  aa  014 163 171 155         symbol_table
    000055  aa  142 157 154 137
    000056  aa  164 141 142 154
    000057  aa  145 000 000 000

DEFINITIONS HASH TABLE

    000060  aa   000000 000015 
    000061  aa   000000 000000 
    000062  aa   000000 000000 
    000063  aa   000000 000000 
    000064  aa   000000 000000 
    000065  aa   000000 000000 
    000066  aa   000000 000000 
    000067  5a   000021 000000 
    000070  5a   000012 000000 
    000071  aa   000000 000000 
    000072  aa   000000 000000 
    000073  aa   000000 000000 
    000074  aa   000000 000000 
    000075  aa   000000 000000 

EXTERNAL NAMES

    000076  aa  010 164 166 137         tv_begin
    000077  aa  142 145 147 151
    000100  aa  156 000 000 000
    000101  aa  015 154 151 163         lisp_subr_tv_
    000102  aa  160 137 163 165
    000103  aa  142 162 137 164
    000104  aa  166 137 000 000

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    000105  aa   000004 000000 
    000106  55   000051 000046 
    000107  aa   000001 000000 
    000110  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    000111  5a   000055 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000030 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000012 
    000007  a2   000000 000000 
    000010  9a   777770 0000 46         lisp_subr_tv_|tv_begin
    000011  5a   000061 0000 00
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000004 
    000004  aa   000000 111316 
    000005  aa   510113 575622 
    000006  aa   000000 112002 
    000007  aa   326020 055476 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000121 
    000020  aa   000000 000103 
    000021  aa   000000 000107 
    000022  aa   000113 000103 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   040066 056064 
    000030  aa   040040 101160 
    000031  aa   162151 154040 
    000032  aa   061071 070061 
    000033  aa   040040 040040 
    000034  aa   107112 157150 
    000035  aa   156163 157156 
    000036  aa   056123 171163 
    000037  aa   115141 151156 
    000040  aa   164056 141040 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   154151 163164 
    000045  aa   040040 040040 
    000046  aa   040040 040040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040040 040040 
    000057  aa   040040 040040 
    000060  aa   040040 040040 
    000061  aa   040040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000001 
    000066  aa   000072 000044 
    000067  aa   117710 106016 
    000070  aa   000000 111771 
    000071  aa   743256 400000 
    000072  aa   076163 160145          >spec>on>06/27/83>lisp_save_alm_.alm
    000073  aa   143076 157156 
    000074  aa   076060 066057 
    000075  aa   062067 057070 
    000076  aa   063076 154151 
    000077  aa   163160 137163 
    000100  aa   141166 145137 
    000101  aa   141154 155137 
    000102  aa   056141 154155 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

           0    al_qu_mask               lisp_save_alm_:      13,   44.
          20    g0001                    lisp_save_alm_:      37,   43.
          23    g0002                    lisp_save_alm_:      41,   46.
           2    lisp_save_alm_           lisp_save_alm_:      17,   18.
                lisp_subr_tv_            lisp_save_alm_:      23.
          12    loop                     lisp_save_alm_:      34,   50.
          27    return                   lisp_save_alm_:      31,   52.
                tv_begin                 lisp_save_alm_:      23.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
