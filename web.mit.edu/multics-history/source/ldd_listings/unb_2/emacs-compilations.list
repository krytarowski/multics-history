LISTING FOR  >udd>sm>ds>w>ml>emacs-compilations
COMPILED BY Multics LISP Compiler, Version 2.13c, July 11, 1983
ON 04/18/00  1143.9 mdt Tue
IN BEHALF OF Schroth.SysMaint.m



;;; ***********************************************************
;;; *                                                         *
;;; * Copyright, (C) Honeywell Information Systems Inc., 1982 *
;;; *                                                         *
;;; * Copyright (c) 1978 by Massachusetts Institute of        *
;;; * Technology and Honeywell Information Systems, Inc.      *
;;; *                                                         *
;;; ***********************************************************

;;; HISTORY COMMENTS:
;;;  1) change(86-04-23,Margolin), approve(86-04-23,MCR7325),
;;;     audit(86-08-12,Harvey), install(86-08-20,MR12.0-1136):
;;;     Added *expr declarations so that it would compile without warnings.
;;;  2) change(86-11-24,Margolin), approve(87-01-27,MCR7607),
;;;     audit(87-02-13,RBarstad), install(87-03-25,MR12.1-1014):
;;;     To not use "file_output" buffer, and to add one-error-scan-buffer,
;;;     compile-two-windows, and compile-local-display options.
;;;  3) change(87-01-28,Margolin), approve(87-01-28,MCR7607),
;;;     audit(87-02-13,RBarstad), install(87-03-25,MR12.1-1014):
;;;     Added display-compilation-result.
;;;                                                      END HISTORY COMMENTS


;;;
(%include e-macros)
(%include other_other)


;;; Common part of error list processor.
;;; Paul Schauble, DVCP, Phoenix.

(declare (special error-list-builder e-list error-scan-buffer
	        mode-identification fill-prefix buffer-minor-modes
	        current-buffer buffer-uid compiler fpathname
	        compile-options two-window-mode number-of-lines-in-buffer))
(declare (*expr comout-to-buffer create-new-window-and-stay-here
	      redisplay-current-window-relative save-same-file))

(defvar ((compile-local-display nil)
         (compile-two-windows nil)
         (error-list '())
         error-source-buffer
         nuwindows
         (one-error-scan-buffer t)))

(defun locate-next-error ()
       (if (not (memq 'Error/ scan buffer-minor-modes))
	 (build-new-error-list))
       (if e-list		; Advance to next error
	 (let ((error-entry (car e-list)))
	      (save-excursion-buffer
	        (find-buffer-in-window error-scan-buffer)
	        (without-modifying
		(if-at '/=
		       (delete-char) (delete-char)
		       (insert-string "  "))
		(go-to-mark (car error-entry))
		(delete-char) (delete-char)
		(insert-string "=>"))
	        (go-to-beginning-of-line)
	        (redisplay-current-window-relative 0)
	        (find-buffer-in-window previous-buffer))
	      (let ((z (cdr error-entry)))
		 (if z (go-to-mark z))))
	 (setq e-list (cdr e-list))
	 else
	 (exit-error-scan-mode)
	 (display-error "No more errors.")))
		 
(defun build-new-error-list ()
       (if error-list			;  Wipe old mark list
	 (save-excursion-buffer
	   (go-to-buffer error-scan-buffer)
	   (exit-error-scan-mode)))
       (let ((crufty-error-list-builder error-list-builder)
	   ;; Ack! Not bound correctly in file_output!!!
	   (temp-error-list nil)
	   (other-buffer current-buffer)
	   (buffer-modified-flag t))
	  (save-excursion-buffer
	    (go-to-buffer error-scan-buffer)
	    (unless (eq error-source-buffer other-buffer)
		  (display-error "This buffer was not the last one compiled."))
	    (without-modifying
	      (go-to-end-of-buffer)
	      (setq temp-error-list (funcall crufty-error-list-builder)))
	    (if (not (symbolp temp-error-list))
	        (setq buffer-uid -143
		    read-only-flag t)
	        else
	        (setq buffer-uid 0)))
	  (setq error-list temp-error-list))	;get into this buffer's variable
       (cond
         ((null error-list)
	(display-error "No errors found."))
         ((eq error-list 'not-compile)
	(setq error-list nil)
	(display-error "Last comout was not a compilation."))
					; That error returned so that error-list-builder does
					; not command-quit while in file_output
         ;; The mark list is a list of (<mark in file_output> . <line num>)
         ;; convert the line num to a mark in the source buffer.
         (t
	 (go-to-beginning-of-buffer)
	 (let ((line 1) (target) (move))
	      (dolist (error-entry error-list)
		(setq target (cdr error-entry))
		(if target
		    (setq move (- target line))
		    (cond
		      ((= move 0))		; on that line now
		      ((> move 0)		; must advance
		       (do-times move (next-line)))
		      (t			; else move back
		        (do-times (- move)(prev-line))))
		    (setq line target)
		    (rplacd error-entry (set-mark)))))
					; error-list is now list of (<mark in file_output> . <mark in source>)
	 (setq e-list error-list)
	 (assert-minor-mode 'Error/ scan))))

       
 
(defun exit-error-scan-mode ()
       ; Must be in source buffer when called
       (dolist (error-entry error-list)
	     (and (cdr error-entry)
		(release-mark (cdr error-entry))))
       (save-excursion-buffer
         (go-to-buffer error-scan-buffer)
         (setq read-only-flag nil
	     buffer-uid 0
	     buffer-modified-flag t)
         (if-at '/=
	      (delete-char) (delete-char)
	      (insert-string "  "))
         (dolist (error-entry error-list)
	       (release-mark (car error-entry)))
         (setq buffer-modified-flag nil))
       (negate-minor-mode 'Error/ scan)
       (setq error-list nil
	   e-list nil))

;;;
;;; Conditional new line, does new line and insert special prefix
;;;   if the current line has significant contents, it will be used.
;;;   Note that the new prefix must be an arg, since this needs both 
;;;   the old and new values.

(defun conditional-new-line (pfx)
       (go-to-beginning-of-line)
       (if (or (line-is-blank)
	     (and (looking-at fill-prefix)
		(= curlinel (1+ (stringlength fill-prefix)))))
	 (without-saving (kill-to-end-of-line))
	 else
	 (go-to-end-of-line)
	 (let ((fill-prefix "")) (new-line)))
       (if pfx (insert-string pfx)))


;;;
;;; Fortran compilatons, January 29, 1979, by Paul Schauble
;;;

(defun compile-buffer ()
       (if buffer-modified-flag (save-same-file))
       (mapc 'register-local-var
	   '(error-scan-buffer error-list e-list))
       (if error-list (exit-error-scan-mode))
       (let ((compile-command
	     (catenate compiler " " fpathname " " compile-options))
	   (curbuf current-buffer)
	   (type-buffer-expected mode-identification))
	  (setq error-scan-buffer
	        (cond (one-error-scan-buffer '|Compilation Errors|)
		    (t (make_atom
		         (catenate current-buffer " Errors")))))
	  (minibuffer-print compile-command "<>")
	  (and compile-two-windows
	       (< nuwindows 2)
	       (create-new-window-and-stay-here))
	  (comout-to-buffer error-scan-buffer compile-command)
	  (register-local-var 'error-source-buffer)
	  (setq error-source-buffer curbuf)
	  (setq buffer-uid type-buffer-expected)
	  (cond ((> nuwindows 1))		;display in other window
	        (compile-local-display	;local display the errors
		(display-buffer-as-printout)
		(end-local-displays))
	        (t (display-compilation-result)))    ;local display success/failure
	  (find-buffer-in-window curbuf)))

(defun display-compilation-result ()
       (init-local-displays)
       (local-display-generator
         (cond ((> number-of-lines-in-buffer 2)
	      (catenate (decimal-rep number-of-lines-in-buffer)
		      " lines of compilation errors were generated."))
	     (t "No compilation errors were generated.")))
       (end-local-displays))

(defun set-compiler (comp)
       (setq compiler (catenate comp " ")))

(defun set-compile-options n
       (setq compile-options "")
       (do i 1 (1+ i) (> i n)
	 (setq compile-options (catenate compile-options " " (arg i)))))


INCLUDE FILE >ldd>incl>e-macros.incl.lisp

;;; BEGIN INCLUDE FILE e-macros.incl.lisp

;;; Declares for use by Emacs programs and extenstions.  Also loads
;;; in e_macros_, which contains macro definitions.

;;; HISTORY COMMENTS:
;;;  1) change(85-01-01,Margolin), approve(86-02-24,MCR7186),
;;;     audit(86-08-12,Harvey), install(86-08-20,MR12.0-1136):
;;;     Written: New Year's Day 1985, by excerpting the old e-macros.incl.lisp
;;;     and leaving out all the definitions and qwerty junk (don't ask).
;;;  2) change(86-02-24,Margolin), approve(86-02-24,MCR7325),
;;;     audit(86-08-12,Harvey), install(86-08-20,MR12.0-1136):
;;;     Alphabetized declarations, and added more declarations for documented
;;;     functions, and also for some undocumented functions.
;;;                                                      END HISTORY COMMENTS

(%include backquote)

(declare					;basic editor stuff
  (*expr apply-catenate
         assert-minor-mode backward-char backward-n-chars charlisten
         charset-member command-abort command-quit
         copy-region cur-hpos curline-as-string curbuf-as-string curchar
         curline-as-string delete-char delete-word destroy-buffer-contents
         dont-notice-modified-buffer e_cline_ e_lap_$reverse-search-string
         e_lap_$trim empty-buffer-p error_table_ establish-local-var
         exchange-point-and-mark firstlinep forward-char forward-n-chars
         forward-regexp-search-in-line forward-search forward-search-in-line
         get-char get-search-string go-to-beginning-of-buffer
         go-to-beginning-of-line go-to-buffer go-to-end-of-buffer
         go-to-end-of-line go-to-hpos go-to-mark go-to-or-create-buffer
         insert-char insert-string kill-backwards-to-mark kill-forward-to-mark
         kill-pop kill-to-end-of-line killsave-string lastlinep loadfile
         looking-at lowercase map-over-emacs-commands mark-on-current-line-p
         mark-reached merge-kills-forward merge-kills-reverse move-mark
         minibuf-response minibuffer-clear
         negate-minor-mode new-line next-line nullstringp pathname_
         pathname_$component point-mark-to-string
         point>markp prev-line printable process-char produce-named-mark-list
         read-in-file release-mark reverse-search
         register-local-var reverse-search-in-line
         search-back-first-charset-line
         search-back-first-not-charset-line search-failure-annunciator
         search-for-first-charset-line search-for-first-not-charset-line
         set-emacs-epilogue-handler set-buffer-self-destruct set-key
         set-mark-here set-mark set-perm-key set-the-mark set-the-mark-here
         skip-to-whitespace skip-to-whitespace-in-line
         wipe-point-mark wipe-region write-out-file
         trim-minibuf-response yesp yank)
  (*fexpr define-autoload-lib))

(declare					;redisplay stuff
  (*expr end-local-displays init-local-displays ring-tty-bell
         local-display-generator local-display-generator-nnl
         next-screen prev-screen local-display-current-line
         find-buffer-in-window select-buffer-window window-info
         select-buffer-find-window select-other-window select-window
         buffer-on-display-in-window redisplay full-redisplay))

(declare					;extended stuff
  (*expr forward-word backward-word skip-over-whitespace skip-back-whitespace
         skip-over-whitespace-in-line skip-back-whitespace-in-line
         skip-back-to-whitespace skip-to-whitespace rubout-char date
         display-buffer-as-printout delete-white-sides lefthand-char
         format-to-col whitespace-to-hpos line-is-blank decimal-rep
         register-option minibuffer-clear))

(declare (*lexpr display-error display-com-error display-error-noabort
	       display-error-remark comout-get-output
	       display-com-error-noabort minibuffer-print
	       minibuffer-response trim-minibuffer-response
	       intern-minibuffer-response minibuffer-remark
	       minibuffer-print-noclear report-error report-error-noabort))

(declare (special TAB NL SPACE ESC curpointpos current-buffer dont-stash
	        numarg der-wahrer-mark fpathname fill-column completion-list
	        curlinel BACKSPACE read-only-flag buffer-modified-flag
	        previous-buffer current-buffer-mode env-dir process-dir
	        minibuffer-end-string NLCHARSTRING undo null-pointer))

;;; Load in macro packages
(eval-when (eval compile)
  (or (status feature e-defcom)
      (progn (load (catenate (car (namelist (truename infile))) ">e_define_command_"))
	   (sstatus feature e-defcom)))
  (or (status feature e-macros)
      (load (catenate (car (namelist (truename infile))) ">e_macros_"))))

;;; END INCLUDE FILE e-macros.incl.lisp

INCLUDE FILE >ldd>incl>backquote.incl.lisp

;;;
;;; backquote.incl.lisp - BSG 10/9/79
;;; Loads lisp_backquote_ into either the compiler or interpreter
;;; environment.
;;;
;;; Modified 10/30/82 by Richard Lamson to use eval-when and
;;;				   (status feature backquote)
;;;
(eval-when (eval compile)
  (or (status feature backquote)
      (load (catenate (car (namelist (truename infile))) ">lisp_backquote_"))))

INCLUDE FILE >ldd>incl>other_other.incl.lisp

;; -*- Mode: Lisp; Lowercase: True -*-

;; other_other.incl.lisp - Loads lisp_setf_ and lisp_other_other_ into either
;; the compiler or interpreter environment.
;; Written:  October 1982 by Carl Hoffman

(eval-when (eval compile)
  (or (status feature setf)
      (load (catenate (car (namelist (truename infile))) ">lisp_setf_")))
  (or (status feature other_other)
      (load (catenate (car (namelist (truename infile))) ">lisp_other_other_"))))

			Functions Defined

Name			Offset		Offset		Name


build-new-error-list             140		   0		locate-next-error
compile-buffer                   620		   140		build-new-error-list
conditional-new-line             552		   420		exit-error-scan-mode
display-compilation-result       762		   552		conditional-new-line
exit-error-scan-mode             420		   620		compile-buffer
locate-next-error                0		   762		display-compilation-result
set-compile-options              1017		   1005		set-compiler
set-compiler                     1005		   1017		set-compile-options





			Functions Referenced

arg                                     exit-error-scan-mode                    local-display-generator
assert-minor-mode                       find-buffer-in-window                   looking-at
build-new-error-list                    funcall                                 make_atom
catenate                                go-to-beginning-of-buffer               minibuffer-print
catenate                                go-to-beginning-of-line                 negate-minor-mode
catenate                                go-to-buffer                            new-line
comout-to-buffer                        go-to-end-of-buffer                     next-line
create-new-window-and-stay-here         go-to-end-of-line                       prev-line
curchar                                 go-to-mark                              redisplay-current-window-relative
decimal-rep                             go-to-or-create-buffer                  register-local-var
delete-char                             init-local-displays                     release-mark
display-buffer-as-printout              insert-string                           save-same-file
display-compilation-result              kill-to-end-of-line                     set-mark
display-error                           line-is-blank                           stringlength
end-local-displays                                                              


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
