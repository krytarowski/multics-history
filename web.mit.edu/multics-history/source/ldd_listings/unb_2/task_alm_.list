ASSEMBLY LISTING OF SEGMENT >special_ldd>install>MR12.0-1206>task_alm_.alm                   
ASSEMBLED ON:	11/05/86  1104.2 mst Wed
OPTIONS USED:	list 
ASSEMBLED BY:	ALM Version  6.7  October 1986  
ASSEMBLER CREATED:	10/08/86  1557.5 mst Wed

                                     1  " ***********************************************************
                                     2  " *                                                         *
                                     3  " * Copyright, (C) Honeywell Information Systems Inc., 1982 *
                                     4  " *                                                         *
                                     5  " * Copyright (c) 1972 by Massachusetts Institute of        *
                                     6  " * Technology and Honeywell Information Systems, Inc.      *
                                     7  " *                                                         *
                                     8  " ***********************************************************
                                     9  
    000000                          10  	name	task_alm_
                                    11  "
                                    12  "	That part of the tasking system that cannot be
                                    13  "	written in PL/1.
                                    14  "
                                    15  "	Written by C. Hornig, April 1980
                                    16  "
                        000026      17  	segdef	switch_stacks
                                    18  "
                                    19  	tempd	task_proc(2)
                                    20  "
                                    21  	even
    000000                          22  null_arglist:
    000000  aa   000000 000004      23  	zero	0,4
    000001  aa   000000 000000      24  	zero	0,0
                                    25  "
                                    26  " This macro defines an entrypoint which may be "pseudo-called"
                                    27  " by task_ctl_. It is entered with its stack frame already set up.
                                    28  "
                                    29  	macro	task_tv
                              1     30  	segdef	&1_tv
                              2     31  	entry	&1
                              3     32  &1_tv:
                              4     33  &1:
                              5     34  	getlp
                              6     35  	sprilp	sp|stack_frame.lp_ptr
                              7     36  	eppbp	&1-*,ic
                              8     37  	spribp	sp|stack_frame.entry_ptr
                              9     38  	spbpsb	sp|0
                             10     39  	&end
                                    40  "
                                    41  " " " " " " " " " " " " " " " " " " " " " "
                                    42  "
                                    43  " This routine is entered when a task is first run.
                                    44  " It is responsible for calling the task overseer
                                    45  " on the new stack.
                                    46  "
                                    47  	task_tv	task_overseer
                        000002          	segdef	task_overseer_tv
                        000002          	entry	task_overseer
    000002                              task_overseer_tv:
    000002                              task_overseer:
    000002  aa  7 00046 2721 20         	getlp
    000003  aa  6 00030 6501 00         	sprilp	sp|stack_frame.lp_ptr
    000004  aa   777776 3520 04         	eppbp	task_overseer-*,ic
    000005  aa  6 00026 2521 00         	spribp	sp|stack_frame.entry_ptr
    000006  aa  6 00000 6531 00         	spbpsb	sp|0
    000007  0a   000000 3500 00     48  	eppap	null_arglist	" call task_overseer_ ();
    000010  4a  4 00010 3521 20     49  	short_call task_overseer_$task_overseer_
    000011  aa  7 00036 6701 20
    000012  aa  6 00030 3701 20
    000013  4a  4 00012 7101 20     50  	tra	task_ctl_$death	" call task_ctl_$death ();
                                    51  "
                                    52  " " " " " " " " " " " " " " " " " " " " " "
                                    53  "
                                    54  " This routine calls signal_ in a task.
                                    55  "
                                    56  	task_tv	task_signal_caller
                        000014          	segdef	task_signal_caller_tv
                        000014          	entry	task_signal_caller
    000014                              task_signal_caller_tv:
    000014                              task_signal_caller:
    000014  aa  7 00046 2721 20         	getlp
    000015  aa  6 00030 6501 00         	sprilp	sp|stack_frame.lp_ptr
    000016  aa   777776 3520 04         	eppbp	task_signal_caller-*,ic
    000017  aa  6 00026 2521 00         	spribp	sp|stack_frame.entry_ptr
    000020  aa  6 00000 6531 00         	spbpsb	sp|0
    000021  aa  6 00032 3501 20     57  	eppap	sp|stack_frame.arg_ptr,*
    000022  4a  4 00014 3521 20     58  	short_call task_signaller_$task_signaller_
    000023  aa  7 00036 6701 20
    000024  aa  6 00030 3701 20
    000025  aa  7 00042 7101 20     59  	return
                                    60  "
                                    61  " " " " " " " " " " " " " " " " " " " " "
                                    62  "
                                    63  " This routine switches from one task to another.
                                    64  "
    000026                          65  switch_stacks:
    000026  aa  6 00000 3731 00     66  	epbpsb	sp|0
    000027  aa  7 00032 6521 00     67  	sprisp	sb|stack_header.bar_mode_sp
    000030  aa  0 00002 3535 20     68  	eppbb	ap|2,*
    000031  aa  3 00000 3731 20     69  	epbpsb	bb|0,*
    000032  aa  7 00032 3721 20     70  	eppsp	sb|stack_header.bar_mode_sp,*
    000033  aa  7 00044 7101 20     71  	short_return
                                    72  "
                                    73  	include	stack_header
                                   1-1  "	BEGIN INCLUDE FILE ... stack_header.incl.alm  3/72  Bill Silver
                                   1-2  "
                                   1-3  "	modified 7/76 by M. Weaver for *system links and more system use of areas
                                   1-4  "	modified 3/77 by M. Weaver  to add rnt_ptr
                                   1-5  "	modified 7/77 by S. Webber to add run_unit_depth and assign_linkage_ptr
                                   1-6  "	modified 6/83 by J. Ives to add trace_frames and in_trace.
                                   1-7  
                                   1-8  " HISTORY COMMENTS:
                                   1-9  "  1) change(86-06-24,DGHowe), approve(86-06-24,MCR7396),
                                  1-10  "     audit(86-08-05,Schroth), install(86-11-03,MR12.0-1206):
                                  1-11  "     added the heap_header_ptr definition
                                  1-12  "  2) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
                                  1-13  "     audit(86-10-10,Fawcett), install(86-11-03,MR12.0-1206):
                                  1-14  "     Modified to support control point management.  These changes were
                                  1-15  "     actually made in February 1985 by G. Palter.
                                  1-16  "  3) change(86-10-22,Fawcett), approve(86-10-22,MCR7473),
                                  1-17  "     audit(86-10-22,Farley), install(86-11-03,MR12.0-1206):
                                  1-18  "     Remove the old_lot pointer and replace it with cpm_data_ptr. Use the 18
                                  1-19  "     bit pad after cur_lot_size for the cpm_enabled. This was done to save
                                  1-20  "     some space int the stack header and change the cpd_ptr unal to
                                  1-21  "     cpm_data_ptr (ITS pair).
                                  1-22  "                                                      END HISTORY COMMENTS
                                  1-23  
                        000004    1-24  	equ	stack_header.cpm_data_ptr,4		ptr to control point for this stack
                        000006    1-25  	equ	stack_header.combined_stat_ptr,6	ptr to separate static area
                                  1-26  
                        000010    1-27  	equ	stack_header.clr_ptr,8		ptr to area containing linkage sections
                        000012    1-28  	equ	stack_header.max_lot_size,10		number of words allowed in lot (DU)
                        000012    1-29  	equ	stack_header.main_proc_invoked,10	nonzero if main proc was invoked in run unit (DL)
                        000012    1-30  	equ	stack_header.run_unit_depth,10	number of active run units stacked (DL)
                        000013    1-31  	equ	stack_header.cur_lot_size,11		DU number of words (entries) in lot
                        000013    1-32            equ	stack_header.cpm_enabled,11		DL  non-zero if control point management is enabled
                        000014    1-33  	equ	stack_header.system_free_ptr,12	ptr to system storage area
                        000016    1-34  	equ	stack_header.user_free_ptr,14		ptr to user storage area
                                  1-35  
                        000020    1-36  	equ	stack_header.parent_ptr,16		ptr to parent stack or null
                        000022    1-37  	equ	stack_header.stack_begin_ptr,18	ptr to first stack frame
                        000024    1-38  	equ	stack_header.stack_end_ptr,20		ptr to next useable stack frame
                        000026    1-39  	equ	stack_header.lot_ptr,22		ptr to the lot for the current ring
                                  1-40  
                        000030    1-41  	equ	stack_header.signal_ptr,24		ptr to signal proc for current ring
                        000032    1-42  	equ	stack_header.bar_mode_sp,26		value of sp before entering bar mode
                        000034    1-43  	equ	stack_header.pl1_operators_ptr,28	ptr: pl1_operators_$operator_table
                        000036    1-44  	equ	stack_header.call_op_ptr,30		ptr to standard call operator
                                  1-45  
                        000040    1-46  	equ	stack_header.push_op_ptr,32		ptr to standard push operator
                        000042    1-47  	equ	stack_header.return_op_ptr,34		ptr to standard return operator
                        000044    1-48  	equ	stack_header.ret_no_pop_op_ptr,36	ptr: stand. return/ no pop operator
                        000046    1-49  	equ	stack_header.entry_op_ptr,38		ptr to standard entry operator
                                  1-50  
                        000050    1-51  	equ	stack_header.trans_op_tv_ptr,40	ptr to table of translator operator ptrs
                        000052    1-52  	equ	stack_header.isot_ptr,42		pointer to ISOT
                        000054    1-53  	equ	stack_header.sct_ptr,44		pointer to System Condition Table
                        000056    1-54  	equ	stack_header.unwinder_ptr,46		pointer to unwinder for current ring
                                  1-55  
                        000060    1-56  	equ	stack_header.sys_link_info_ptr,48	ptr to *system link name table
                        000062    1-57  	equ	stack_header.rnt_ptr,50		ptr to reference name table
                        000064    1-58  	equ	stack_header.ect_ptr,52		ptr to event channel table
                        000066    1-59  	equ	stack_header.assign_linkage_ptr,54	ptr to area for hcs_$assign_linkage calls
                        000070    1-60  	equ	stack_header.heap_header_ptr,56	ptr to heap header.
                        000072    1-61  	equ	stack_header.trace_frames,58		stack of trace_catch_ frames
                        000073    1-62  	equ	stach_header.trace_top_ptr,59		trace pointer
                        000074    1-63  	equ	stack_header.in_trace,60		trace antirecurse bit
                        000100    1-64  	equ	stack_header_end,64			length of stack header
                                  1-65  
                                  1-66  
                                  1-67  
                                  1-68  
                        000000    1-69  	equ	trace_frames.count,0		number of trace frames on stack
                        000001    1-70  	equ	trace_frames.top_ptr,1		packed pointer to top one
                                  1-71  
                                  1-72  "	The  following constant is an offset within the  pl1  operators table.
                                  1-73  "	It  references a  transfer vector table.
                                  1-74  
                        000551    1-75  	bool	tv_offset,551
                                  1-76  
                                  1-77  
                                  1-78  "	The  following constants are offsets within this transfer vector table.
                                  1-79  
                        001170    1-80  	equ	call_offset,tv_offset+271
                        001171    1-81  	equ	push_offset,tv_offset+272
                        001172    1-82  	equ	return_offset,tv_offset+273
                        001173    1-83  	equ	return_no_pop_offset,tv_offset+274
                        001174    1-84  	equ	entry_offset,tv_offset+275
                                  1-85  
                                  1-86  
                                  1-87  " 	END INCLUDE FILE stack_header.incl.alm
                                    74  	include	stack_frame
                                   2-1  "
                                   2-2  "	BEGIN INCLUDE FILE ... stack_frame.incl.alm   6/72 RBS
                                   2-3  "
                                   2-4  " Modified: 16 Dec 1977, D. Levin - to add fio_ps_ptr
                                   2-5  " Modified:  3 Feb 1978, P. Krupp - to add run_unit_manager_bit & main_proc_bit
                                   2-6  " Modified: 21 March 1978, D. Levin - change fio_ps_ptr to support_ptr
                                   2-7  "
                        000020     2-8  	equ	stack_frame.prev_sp,16
                        000020     2-9  	equ	stack_frame.condition_word,16
                        000022    2-10  	equ	stack_frame.next_sp,18
                        000022    2-11  	equ	stack_frame.signaller_word,18
                        000024    2-12  	equ	stack_frame.return_ptr,20
                        000026    2-13  	equ	stack_frame.entry_ptr,22
                        000030    2-14  	equ	stack_frame.operator_ptr,24
                        000030    2-15  	equ	stack_frame.lp_ptr,24
                        000032    2-16  	equ	stack_frame.arg_ptr,26
                        000034    2-17  	equ	stack_frame.static_ptr,28
                        000035    2-18  	equ	stack_frame.support_ptr,29	" only used by fortran I/O
                        000036    2-19  	equ	stack_frame.on_unit_rel_ptrs,30
                        000037    2-20  	equ	stack_frame.operator_ret_ptr,31
                        000037    2-21  	equ	stack_frame.translator_id,31
                        000040    2-22  	equ	stack_frame.regs,32
                        000060    2-23  	equ	stack_frame.min_length,48
                        000020    2-24  	equ	stack_frame.flag_word,16
                        020000    2-25  	bool	stack_frame.main_proc_bit,020000	(DL)
                        010000    2-26  	bool	stack_frame.run_unit_manager,010000	(DL)
                        004000    2-27  	bool	stack_frame.signal_bit,004000		(DL)
                        002000    2-28  	bool	stack_frame.crawl_out_bit,002000	(DL)
                        001000    2-29  	bool	stack_frame.signaller_bit,001000	(DL)
                        000400    2-30  	bool	stack_frame.link_trap_bit,000400	(DL)
                        000200    2-31  	bool	stack_frame.support_bit,000200	(DL)
                        000100    2-32  	bool	stack_frame.condition_bit,000100	(DL)
                                  2-33  
                                  2-34  "
                                  2-35  "	END INCLUDE FILE  ... stack_frame.incl.alm
                                  2-36  "
                                    75  "
                                    76  	end
ENTRY SEQUENCES
     
    000034  5a   000032 0000 00
    000035  aa  7 00046 2721 20
    000036  0a   000002 7100 00
    000037  5a   000011 0000 00
    000040  aa  7 00046 2721 20
    000041  0a   000014 7100 00

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000042  5a   000003 000000 
    000043  5a   000067 600000 
    000044  aa   000000 000000 
    000045  55   000011 000002 
    000046  5a   000002 400003 
    000047  55   000006 000011 
    000050  aa  011 164 141 163
    000051  aa  153 137 141 154
    000052  aa  155 137 000 000
    000053  55   000021 000003 
    000054  0a   000040 500000 
    000055  55   000014 000003 
    000056  aa  022 164 141 163         task_signal_caller
    000057  aa  153 137 163 151
    000060  aa  147 156 141 154
    000061  aa  137 143 141 154
    000062  aa  154 145 162 000
    000063  55   000032 000011 
    000064  0a   000014 400000 
    000065  55   000024 000003 
    000066  aa  025 164 141 163         task_signal_caller_tv
    000067  aa  153 137 163 151
    000070  aa  147 156 141 154
    000071  aa  137 143 141 154
    000072  aa  154 145 162 137
    000073  aa  164 166 000 000
    000074  55   000041 000021 
    000075  0a   000035 500000 
    000076  55   000035 000003 
    000077  aa  015 164 141 163         task_overseer
    000100  aa  153 137 157 166
    000101  aa  145 162 163 145
    000102  aa  145 162 000 000
    000103  55   000051 000032 
    000104  0a   000002 400000 
    000105  55   000044 000003 
    000106  aa  020 164 141 163         task_overseer_tv
    000107  aa  153 137 157 166
    000110  aa  145 162 163 145
    000111  aa  145 162 137 164
    000112  aa  166 000 000 000
    000113  55   000060 000041 
    000114  0a   000026 400000 
    000115  55   000054 000003 
    000116  aa  015 163 167 151         switch_stacks
    000117  aa  164 143 150 137
    000120  aa  163 164 141 143
    000121  aa  153 163 000 000
    000122  55   000002 000051 
    000123  6a   000000 400002 
    000124  55   000063 000003 
    000125  aa  014 163 171 155         symbol_table
    000126  aa  142 157 154 137
    000127  aa  164 141 142 154
    000130  aa  145 000 000 000

DEFINITIONS HASH TABLE

    000131  aa   000000 000015 
    000132  5a   000051 000000 
    000133  5a   000041 000000 
    000134  5a   000021 000000 
    000135  5a   000032 000000 
    000136  5a   000011 000000 
    000137  aa   000000 000000 
    000140  5a   000060 000000 
    000141  aa   000000 000000 
    000142  aa   000000 000000 
    000143  aa   000000 000000 
    000144  aa   000000 000000 
    000145  aa   000000 000000 
    000146  aa   000000 000000 

EXTERNAL NAMES

    000147  aa  017 164 141 163         task_signaller_
    000150  aa  153 137 163 151
    000151  aa  147 156 141 154
    000152  aa  154 145 162 137
    000153  aa  005 144 145 141         death
    000154  aa  164 150 000 000
    000155  aa  011 164 141 163         task_ctl_
    000156  aa  153 137 143 164
    000157  aa  154 137 000 000
    000160  aa  016 164 141 163         task_overseer_
    000161  aa  153 137 157 166
    000162  aa  145 162 163 145
    000163  aa  145 162 137 000

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    000164  aa   000004 000000 
    000165  55   000105 000105 
    000166  aa   000004 000000 
    000167  55   000113 000111 
    000170  aa   000004 000000 
    000171  55   000116 000116 
    000172  aa   000001 000000 
    000173  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    000174  5a   000122 000000 
    000175  5a   000124 000000 
    000176  5a   000126 000000 
    000177  aa   000000 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000042 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000016 
    000007  a2   000000 000000 
    000010  9a   777770 0000 46         task_overseer_|task_overseer_
    000011  5a   000134 0000 00
    000012  9a   777766 0000 46         task_ctl_|death
    000013  5a   000133 0000 00
    000014  9a   777764 0000 46         task_signaller_|task_signaller_
    000015  5a   000132 0000 00
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000004 
    000004  aa   000000 114732 
    000005  aa   732732 062314 
    000006  aa   000000 114775 
    000007  aa   700172 400572 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000166 
    000020  aa   000000 000145 
    000021  aa   000000 000152 
    000022  aa   000156 000145 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   040066 056067 
    000030  aa   040040 117143 
    000031  aa   164157 142145 
    000032  aa   162040 061071 
    000033  aa   070066 040040 
    000034  aa   107112 157150 
    000035  aa   156163 157156 
    000036  aa   056123 171163 
    000037  aa   115141 151156 
    000040  aa   164056 141040 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   154151 163164 
    000045  aa   040040 040040 
    000046  aa   040040 040040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040040 040040 
    000057  aa   040040 040040 
    000060  aa   040040 040040 
    000061  aa   040040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000003 
    000066  aa   000102 000056 
    000067  aa   147740 446215 
    000070  aa   000000 114774 
    000071  aa   460777 000000 
    000072  aa   000116 000066 
    000073  aa   147714 750316 
    000074  aa   000000 114774 
    000075  aa   453561 000000 
    000076  aa   000134 000041 
    000077  aa   052721 247134 
    000100  aa   000000 105272 
    000101  aa   317215 400000 
    000102  aa   076163 160145          >special_ldd>install>MR12.0-1206>task_alm_.alm
    000103  aa   143151 141154 
    000104  aa   137154 144144 
    000105  aa   076151 156163 
    000106  aa   164141 154154 
    000107  aa   076115 122061 
    000110  aa   062056 060055 
    000111  aa   061062 060066 
    000112  aa   076164 141163 
    000113  aa   153137 141154 
    000114  aa   155137 056141 
    000115  aa   154155 040040 
    000116  aa   076163 160145          >special_ldd>install>MR12.0-1206>stack_header.incl.alm
    000117  aa   143151 141154 
    000120  aa   137154 144144 
    000121  aa   076151 156163 
    000122  aa   164141 154154 
    000123  aa   076115 122061 
    000124  aa   062056 060055 
    000125  aa   061062 060066 
    000126  aa   076163 164141 
    000127  aa   143153 137150 
    000130  aa   145141 144145 
    000131  aa   162056 151156 
    000132  aa   143154 056141 
    000133  aa   154155 040040 
    000134  aa   076154 144144          >ldd>include>stack_frame.incl.alm
    000135  aa   076151 156143 
    000136  aa   154165 144145 
    000137  aa   076163 164141 
    000140  aa   143153 137146 
    000141  aa   162141 155145 
    000142  aa   056151 156143 
    000143  aa   154056 141154 
    000144  aa   155040 040040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

        1170    call_offset              stack_header:        80.
                death                    task_alm_:     50.
        1174    entry_offset             stack_header:        84.
           0    null_arglist             task_alm_:     22,   48.
        1171    push_offset              stack_header:        81.
        1173    return_no_pop_offset     stack_header:        83.
        1172    return_offset            stack_header:        82.
          73    stach_header.trace_top_ptr     stack_header:        62.
          32    stack_frame.arg_ptr      task_alm_:     57,
                                         stack_frame:   16.
         100    stack_frame.condition_bit      stack_frame:   32.
          20    stack_frame.condition_word     stack_frame:    9.
        2000    stack_frame.crawl_out_bit      stack_frame:   28.
          26    stack_frame.entry_ptr    task_alm_:     47,   56,
                                         stack_frame:   13.
          20    stack_frame.flag_word    stack_frame:   24.
         400    stack_frame.link_trap_bit      stack_frame:   30.
          30    stack_frame.lp_ptr       task_alm_:     47,   56,
                                         stack_frame:   15.
       20000    stack_frame.main_proc_bit      stack_frame:   25.
          60    stack_frame.min_length   stack_frame:   23.
          22    stack_frame.next_sp      stack_frame:   10.
          36    stack_frame.on_unit_rel_ptrs   stack_frame:   19.
          30    stack_frame.operator_ptr       stack_frame:   14.
          37    stack_frame.operator_ret_ptr   stack_frame:   20.
          20    stack_frame.prev_sp      stack_frame:    8.
          40    stack_frame.regs         stack_frame:   22.
          24    stack_frame.return_ptr   stack_frame:   12.
       10000    stack_frame.run_unit_manager   stack_frame:   26.
        1000    stack_frame.signaller_bit      stack_frame:   29.
          22    stack_frame.signaller_word     stack_frame:   11.
        4000    stack_frame.signal_bit   stack_frame:   27.
          34    stack_frame.static_ptr   stack_frame:   17.
         200    stack_frame.support_bit  stack_frame:   31.
          35    stack_frame.support_ptr  stack_frame:   18.
          37    stack_frame.translator_id      stack_frame:   21.
          66    stack_header.assign_linkage_ptr      stack_header:        59.
          32    stack_header.bar_mode_sp       task_alm_:     67,   70,
                                               stack_header:        42.
          36    stack_header.call_op_ptr       stack_header:        44.
          10    stack_header.clr_ptr     stack_header:        27.
           6    stack_header.combined_stat_ptr       stack_header:        25.
           4    stack_header.cpm_data_ptr      stack_header:        24.
          13    stack_header.cpm_enabled       stack_header:        32.
          13    stack_header.cur_lot_size      stack_header:        31.
          64    stack_header.ect_ptr     stack_header:        58.
          46    stack_header.entry_op_ptr      stack_header:        49.
          70    stack_header.heap_header_ptr   stack_header:        60.
          74    stack_header.in_trace    stack_header:        63.
          52    stack_header.isot_ptr    stack_header:        52.
          26    stack_header.lot_ptr     stack_header:        39.
          12    stack_header.main_proc_invoked       stack_header:        29.
          12    stack_header.max_lot_size      stack_header:        28.
          20    stack_header.parent_ptr  stack_header:        36.
          34    stack_header.pl1_operators_ptr       stack_header:        43.
          40    stack_header.push_op_ptr       stack_header:        46.
          42    stack_header.return_op_ptr     stack_header:        47.
          44    stack_header.ret_no_pop_op_ptr       stack_header:        48.
          62    stack_header.rnt_ptr     stack_header:        57.
          12    stack_header.run_unit_depth    stack_header:        30.
          54    stack_header.sct_ptr     stack_header:        53.
          30    stack_header.signal_ptr  stack_header:        41.
          22    stack_header.stack_begin_ptr   stack_header:        37.
          24    stack_header.stack_end_ptr     stack_header:        38.
          14    stack_header.system_free_ptr   stack_header:        33.
          60    stack_header.sys_link_info_ptr       stack_header:        56.
          72    stack_header.trace_frames      stack_header:        61.
          50    stack_header.trans_op_tv_ptr   stack_header:        51.
          56    stack_header.unwinder_ptr      stack_header:        54.
          16    stack_header.user_free_ptr     stack_header:        34.
         100    stack_header_end         stack_header:        64.
          26    switch_stacks            task_alm_:     17,   65.
                task_ctl_                task_alm_:     50.
           2    task_overseer            task_alm_:     47.
                task_overseer_           task_alm_:     49.
           2    task_overseer_tv         task_alm_:     47.
          50    task_proc                task_alm_:     19.
                task_signaller_          task_alm_:     58.
          14    task_signal_caller       task_alm_:     56.
          14    task_signal_caller_tv    task_alm_:     56.
           0    trace_frames.count       stack_header:        69.
           1    trace_frames.top_ptr     stack_header:        70.
         551    tv_offset                stack_header:        75,   80,   81,   82,   83,   84.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
