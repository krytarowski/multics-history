	COMPILATION LISTING OF SEGMENT cobol_output_tokens
	Compiled by: Multics PL/I Compiler, Release 31b, of April 24, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 05/24/89  1007.7 mst Wed
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        6*        *                                                         *
        7*        * Copyright (c) 1972 by Massachusetts Institute of        *
        8*        * Technology and Honeywell Information Systems, Inc.      *
        9*        *                                                         *
       10*        *********************************************************** */
       11 
       12 
       13 
       14 
       15 /****^  HISTORY COMMENTS:
       16*  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
       17*     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
       18*     MCR8060 cobol_output_tokens.pl1 Reformatted code to new Cobol standard.
       19*                                                   END HISTORY COMMENTS */
       20 
       21 
       22 /* Modified on 07/14/83 by FCH, [5.2-2], SUPPRESS verb does not work, BUG533(phx15481) */
       23 /* Modified on 10/21/82 by FCH, [5.2-1], illeg clause DATA REPORT IS blows COBOL, phx13529 */
       24 /* Modified on 02/11/82 by FCH, [5.1-1], ignore "report" before DD, phx12454(BUG526) */
       25 /* Modified on 06/16/80 by FCH, [4.4-1], program table added for REPORT WRITER facility */
       26 /* Modified on 05/01/79 by FCH,[4.0-1], qualif name if debug option */
       27 /* Modified since Version 4.0 */
       28 
       29 
       30 
       31 
       32 
       33 
       34 
       35 
       36 
       37 
       38 /* format: style3 */
       39 cobol_output_tokens:
       40      proc;
       41 
       42 /* This routine writes the finished tokens on the minpral file and the name file */
       43 
       44 
       45 /*   general overlay for any token    */
       46 
       47 dcl	1 token		based (cobol_current),
       48 	  2 fwd_link	pointer,
       49 	  2 back_link	pointer,
       50 	  2 rep_link	pointer,
       51 	  2 l_info	bit (8),
       52 	  2 size		fixed bin,
       53 	  2 line		fixed bin,
       54 	  2 column	fixed bin,
       55 	  2 type		fixed bin,		/*[3.0-1]*/
       56 	  2 info		fixed bin,		/*[3.0-1]*/
       57 	  2 line_size	fixed bin,		/*[4.0-1]*/
       58 	  2 name		char (0 refer (token.line_size));
       59 
       60 declare	1 reserved_word	based (cobol_current),
       61 	  2 fwd_link	ptr,
       62 	  2 back_link	ptr,
       63 	  2 rep_link	ptr,
       64 	  2 l_info	bit (8),
       65 	  2 size		fixed bin,
       66 	  2 line		fixed bin,
       67 	  2 column	fixed bin,
       68 	  2 type		fixed bin,
       69 	  2 key		fixed bin;
       70 
       71 /*[4.4-1]*/
       72 declare	1 filler		based (class_tab_ptr),	/*[4.4-1]*/
       73 	  2 filler	char (20),		/*[4.4-1]*/
       74 	  2 ct		(1024) fixed bin (18) unal unsigned;
       75 declare	CT		(0:8191) fixed bin based (class_tab_ptr);
       76 declare	cd		(256) fixed bin (9) unal unsigned based;
       77 
       78 
       79 /*[4.4-1]*/
       80 declare	1 static_int	static int,		/*[4.4-1]*/
       81 	  2 TOKEN		char (256) varying,		/*[4.4-1]*/
       82 	  2 (tok_ptr, proc_def_ptr, p, q, t_cur, class_tab_ptr, program_ptr)
       83 			ptr,			/*[4.4-1]*/
       84 	  2 (state, prev_wd_num, n_t_key, program_size)
       85 			fixed bin,		/*[4.4-1]*/
       86 	  2 (data_object_size, fd_object_size, use_reporting_object_size)
       87 			fixed bin,		/*[4.4-1]*/
       88 	  2 prog_id	(36) bit (1);
       89 
       90 /*[4.0-1]*/
       91 declare	ch32		char (32) based;
       92 
       93 declare	cobol_class_table_	entry (ptr);
       94 dcl	cobol_swf_put	entry (ptr, bit (32), ptr, fixed bin) ext;
       95 						/*[4.0-1]*/
       96 dcl	cobol_db_put	entry (ptr, bit (32), ptr, fixed bin, ptr);
       97 dcl	cobol_lexerr	entry (fixed bin, bit (1), fixed bin, char (30)) external;
       98 dcl	cobol_delete_tokens$del_force
       99 			entry (ptr, ptr) external;
      100 dcl	cobol$alloc	entry (fixed bin) returns (ptr);
      101 
      102 dcl	ioop		char (10);
      103 dcl	st		bit (32),
      104 	sz		fixed bin,
      105 	tok1_ptr		ptr;
      106 dcl	rec_ad		char (5),
      107 	ch2		char (2);
      108 dcl	wd_num		fixed bin;
      109 
      110 /*[4.4-1]*/
      111 declare	1 alloc_area	static int,		/*[4.4-1]*/
      112 	  2 loc		ptr,			/*[4.4-1]*/
      113 	  2 size		fixed bin,		/*[4.4-1]*/
      114 	  2 cap		fixed bin,		/*[4.4-1]*/
      115 	  2 area_size	fixed bin,		/*[4.4-1]*/
      116 	  2 area_loc	ptr;
      117 
      118 /*[4.0-1]*/
      119 declare	(addr, null, substr, mod, size, addrel)
      120 			builtin;
      121 
      122 /*[4.0-1]*/
      123 declare	1 TOK		based (tok_ptr),		/*[4.0-1]*/
      124 	  2 rec_size	fixed bin,		/*[4.0-1]*/
      125 	  2 size		fixed bin,		/*[4.0-1]*/
      126 	  2 line		fixed bin,		/*[4.0-1]*/
      127 	  2 column	fixed bin,		/*[4.0-1]*/
      128 	  2 type		fixed bin,		/*[4.0-1]*/
      129 	  2 info		fixed bin,		/*[4.0-1]*/
      130 	  2 line_size	fixed bin,		/*[4.0-1]*/
      131 	  2 name		char (0 refer (TOK.line_size));
      132 
      133 
      134 /*[4.0-1]*/
      135 declare	1 TOK1		based (tok1_ptr),		/*[4.0-1]*/
      136 	  2 size		fixed bin,		/*[4.0-1]*/
      137 	  2 line		fixed bin,		/*[4.0-1]*/
      138 	  2 column	fixed bin,		/*[4.0-1]*/
      139 	  2 type		fixed bin,		/*[4.0-1]*/
      140 	  2 info		fixed bin,		/*[4.0-1]*/
      141 	  2 line_size	fixed bin,		/*[4.0-1]*/
      142 	  2 name		char (32);
      143 
      144 /*[4.4-1]*/
      145 declare	program		(36) ptr based (program_ptr);
      146 
      147 /*[4.4-1]*/
      148 declare	1 data_object	based (alloc_area.area_loc),	/*[4.4-1]*/
      149 	  2 next		ptr,			/* next object */
      150 						/*[4.4-1]*/
      151 	  2 loc		ptr;			/* token */
      152 
      153 /*[4.4-1]*/
      154 declare	1 fd_object	based (alloc_area.area_loc),	/*[4.4-1]*/
      155 	  2 next		ptr,			/* next object */
      156 						/*[4.4-1]*/
      157 	  2 loc		ptr,			/* token */
      158 						/*[4.4-1]*/
      159 	  2 rep_loc	ptr;			/* reports clause */
      160 
      161 /*[4.4-1]*/
      162 declare	1 use_reporting_object
      163 			based (alloc_area.area_loc),	/*[4.4-1]*/
      164 	  2 next		ptr,			/* next object */
      165 						/*[4.4-1]*/
      166 	  2 loc		ptr,			/* token */
      167 						/*[4.4-1]*/
      168 	  2 proc_loc	ptr,			/* section name */
      169 						/*[4.4-1]*/
      170 	  2 suppress	bit (1);			/* suppress printing */
      171 
      172 /*[4.4-1]*/
      173 declare	AA		(64) fixed bin based (alloc_area.loc);
      174 						/*[4.4-1]*/
      175 declare	bit36		bit (36) based;
      176 
      177 
      178 	p = cobol_frst;
      179 	cobol_current = cobol_frst;
      180 
      181 	do while ("1"b);
      182 
      183 	     if substr (token.l_info, 3, 1) ^= "1"b
      184 	     then do;
      185 
      186 /* if this token should not be put out... */
      187 
      188 		     if (token.type > 0) & (token.type < 9)
      189 						/* if token is valid... */
      190 		     then if token.type = 6		/*[3.0-1]*/
      191 			then /*[4.4-1]*/ /*	if processing_report*/ /*[4.4-1]*/ /*then;*/ /*[4.4-1]*/ /*else	*/
      192 			     do;			/*[3.0-1]*/
      193 				token.size = token.size - 1;
      194 						/*[3.0-1]*/
      195 				token.line_size = token.line_size - 1;
      196 						/*[3.0-1]*/
      197 				call cobol_swf_put (cobol_pfp, st, addr (token.size), token.size);
      198 						/*[3.0-1]*/
      199 			     end;
      200 
      201 /*[4.4-1]*/
      202 			else /*[4.0-1]*/
      203 			     if fixed_common.debug	/*[4.0-1]*/
      204 			then call PUT;		/* with debugging specified */
      205 
      206 			else call word;
      207 
      208 		     else call cobol_lexerr (0, "0"b, 29, "Illegal token type - ignored.");
      209 
      210 		end;
      211 
      212 	     q = token.fwd_link;			/* get next token in string */
      213 
      214 	     if q = null ()				/* if last token has been put out... */
      215 	     then do;				/* delete the string and return */
      216 
      217 		     cobol_output_sw = "0"b;
      218 
      219 		     if (cobol_frst = cobol_ta_ptr) & (cobol_current = cobol_ta_ptr)
      220 		     then return;
      221 
      222 		     q = cobol_current;
      223 
      224 		     call cobol_delete_tokens$del_force (p, q);
      225 
      226 		     return;
      227 		end;
      228 
      229 	     cobol_current = q;
      230 
      231 	end;
      232 
      233 PUT:
      234      proc;
      235 
      236 /* if with debugging specified then construct	*/
      237 /*  the qualified names and store in the first	*/
      238 /* of the qualified name			*/
      239 /*[4.0-1]*/
      240 	go to ST (state);
      241 
      242 ST (1):						/* initial state */
      243 						/*[4.0-1]*/
      244 	if token.type ^= 8				/*[4.4-1]*/
      245 	then do;
      246 		call word;			/*[4.0-1]*/
      247 		return;				/*[4.0-1]*/
      248 	     end;
      249 
      250 /*[4.0-1]*/
      251 	TOKEN = token.name;				/*[4.0-1]*/
      252 	sz = token.line_size;
      253 
      254 /*[4.0-1]*/
      255 	token.line_size = 32;			/*[4.0-1]*/
      256 	tok1_ptr = addr (token.size);			/*[4.0-1]*/
      257 	token.size = size (TOK1) * 4;
      258 
      259 /*[4.0-1]*/
      260 	token.line_size = sz;
      261 
      262 /*[4.0-1]*/
      263 	state = 2;
      264 
      265 /*[4.0-1]*/
      266 	call cobol_db_put (cobol_mfp, st, addr (token.size), token.size, tok_ptr);
      267 
      268 /*[4.0-1]*/
      269 	if sz < 32
      270 	then substr (addr (tok_ptr -> TOK.name) -> ch32, sz + 1, 32 - sz) = " ";
      271 
      272 /*[4.0-1]*/
      273 	return;
      274 
      275 ST (2):						/* type-8 */
      276 						/*[4.0-1]*/
      277 	if token.type ^= 1				/*[4.0-1]*/
      278 	then do;
      279 		call init_TOK;			/*[4.0-1]*/
      280 		go to ST (1);			/*[4.0-1]*/
      281 	     end;
      282 
      283 /*[4.0-1]*/
      284 	if token.info = 101				/*[4.0-1]*/
      285 	then TOKEN = TOKEN || " IN";			/*[4.0-1]*/
      286 	else if token.info = 133			/*[4.0-1]*/
      287 	then TOKEN = TOKEN || " OF";			/*[4.0-1]*/
      288 	else do;
      289 		call init_TOK;			/*[4.0-1]*/
      290 		go to ST (1);			/*[4.0-1]*/
      291 	     end;
      292 
      293 /*[4.0-1]*/
      294 	call PUTREC (3);				/*[4.0-1]*/
      295 	return;
      296 
      297 ST (3):						/* type-8 of */
      298 						/*[4.0-1]*/
      299 	if token.type ^= 8				/*[4.0-1]*/
      300 	then do;
      301 		call init_TOK;			/*[4.0-1]*/
      302 		go to ST (1);			/*[4.0-1]*/
      303 	     end;
      304 
      305 /*[4.0-1]*/
      306 	TOKEN = TOKEN || " " || token.name;
      307 
      308 /*[4.0-1]*/
      309 	call PUTREC (4);				/*[4.0-1]*/
      310 	return;
      311 
      312 ST (4):						/* type-8 of type-8 */
      313 						/*[4.0-1]*/
      314 	if token.type ^= 1				/*[4.0-1]*/
      315 	then do;
      316 		substr (addr (TOK.name) -> ch32, 1, 32) = TOKEN;
      317 						/*[4.0-1]*/
      318 		call init_TOK;			/*[4.0-1]*/
      319 		go to ST (1);			/*[4.0-1]*/
      320 	     end;
      321 
      322 /*[4.0-1]*/
      323 	if token.info = 101				/*[4.0-1]*/
      324 	then TOKEN = TOKEN || " IN";			/*[4.0-1]*/
      325 	else if token.info = 133			/*[4.0-1]*/
      326 	then TOKEN = TOKEN || " OF";			/*[4.0-1]*/
      327 	else do;
      328 		substr (addr (TOK.name) -> ch32, 1, 32) = TOKEN;
      329 						/*[4.0-1]*/
      330 		call init_TOK;			/*[4.0-1]*/
      331 		go to ST (1);			/*[4.0-1]*/
      332 	     end;
      333 
      334 /*[4.0-1]*/
      335 	call PUTREC (3);
      336 
      337      end;
      338 
      339 PUTREC:
      340      proc (st_num);
      341 
      342 declare	st_num		fixed bin;
      343 
      344 /*[4.0-1]*/
      345 	state = st_num;				/*[4.0-1]*/
      346 	call cobol_swf_put (cobol_mfp, st, addr (token.size), token.size);
      347 
      348      end;
      349 
      350 init_TOK:
      351      proc;
      352 
      353 /*[4.0-1]*/
      354 	TOKEN = "";				/*[4.0-1]*/
      355 	state = 1;				/*[4.0-1]*/
      356 	cobol_current = cobol_frst;
      357 
      358      end;
      359 
      360 directory_loc:
      361      entry returns (ptr);				/* return loc of directory */
      362 
      363 /*[4.4-1]*/
      364 	return (program_ptr);
      365 
      366 initialize:
      367      entry;					/* called by cobol_lex */
      368 						/*[4.0-1]*/
      369 	call init_TOK;				/*[4.0-1]*/
      370 	tok_ptr = null ();				/*[4.4-1]*/
      371 	proc_def_ptr = null ();
      372 
      373 /*[4.4-1]*/
      374 	call cobol_class_table_ (class_tab_ptr);
      375 
      376 /*[4.4-1]*/
      377 	program_size = size (program);		/*[4.4-1]*/
      378 	data_object_size = size (data_object);		/*[4.4-1]*/
      379 	fd_object_size = size (fd_object);		/*[4.4-1]*/
      380 	use_reporting_object_size = size (use_reporting_object);
      381 
      382 /*[4.4-1]*/
      383 	alloc_area.loc = cobol$alloc (256);		/*[4.4-1]*/
      384 	alloc_area.size = 1;			/*[4.4-1]*/
      385 	alloc_area.cap = 256;
      386 
      387 /*[4.4-1]*/
      388 	alloc_area.area_size = program_size;		/*[4.4-1]*/
      389 	call get_space;				/*[4.4-1]*/
      390 	program_ptr = alloc_area.area_loc;
      391 
      392 /*[4.4-1]*/
      393 	report_exists = "0"b;			/*[4.4-1]*/
      394 	report_first_token = null ();			/*[4.4-1]*/
      395 	addr (prog_id) -> bit36 = "0"b;		/*[4.4-1]*/
      396 	program (24), program (25), program (16) = null ();
      397 						/* fd,reporting,report */
      398 						/*[4.4-1]*/
      399 	prev_wd_num = 0;
      400 
      401 /*[4.0-1]*/
      402 	return;
      403 
      404 proc_def_ptr:
      405      entry (PDF);
      406 
      407 /* return a pointer to the last type	*/
      408 /* 7 token on the minpral file	*/
      409 
      410 
      411 /*[4.0-1]*/
      412 declare	PDF		ptr;
      413 
      414 /*[4.0-1]*/
      415 	PDF = proc_def_ptr;
      416 
      417 /*[4.0-1]*/
      418 	return;
      419 
      420 word:
      421      proc;					/* write and process the token */
      422 
      423 /*[4.4-1]*/
      424 	if token.type = 1 & substr (reserved_word.l_info, 8, 1)
      425 						/*[4.4-1]*/
      426 	then do;					/* major reserved word */
      427 
      428 /*[4.4-1]*/
      429 		call cobol_db_put (cobol_mfp, st, addr (token.size), token.size, tok_ptr);
      430 
      431 /*[4.4-1]*/
      432 		wd_num = addr (CT (ct (reserved_word.key))) -> cd (6);
      433 
      434 /* entry number in class(6) */
      435 
      436 /*[4.4-1]*/
      437 		go to RW (wd_num);
      438 
      439 RW (1):						/* identification */
      440 						/*[4.4-1]*/
      441 		call set_program_table;
      442 		go to RW0;
      443 
      444 RW (2):						/* environment */
      445 						/*[4.4-1]*/
      446 		call set_program_table;
      447 		go to RW0;
      448 
      449 RW (3):						/* configuration */
      450 						/*[4.4-1]*/
      451 		call set_program_table;
      452 		go to RW0;
      453 
      454 RW (4):						/* source-computer */
      455 						/*[4.4-1]*/
      456 		call set_program_table;
      457 		go to RW0;
      458 
      459 RW (5):						/* object-computer */
      460 						/*[4.4-1]*/
      461 		call set_program_table;
      462 		go to RW0;
      463 
      464 RW (6):						/* special-names */
      465 						/*[4.4-1]*/
      466 		call set_program_table;
      467 		go to RW0;
      468 
      469 RW (7):						/* input-output */
      470 						/*[4.4-1]*/
      471 		call set_program_table;
      472 		go to RW0;
      473 
      474 RW (8):						/* file-control */
      475 						/*[4.4-1]*/
      476 		if ^prog_id (8)			/*[4.4-1]*/
      477 		then do;
      478 			prog_id (8) = "1"b;		/*[4.4-1]*/
      479 			program (8) = tok_ptr;	/*[4.4-1]*/
      480 			program (21) = null ();	/* select */
      481 						/*[4.4-1]*/
      482 		     end;
      483 		go to RW0;
      484 
      485 RW (9):						/* i-o-control */
      486 						/*[4.4-1]*/
      487 		call set_program_table;
      488 		go to RW0;
      489 
      490 RW (10):						/* data */
      491 						/*[4.4-1]*/
      492 		call set_program_table;
      493 		go to RW0;
      494 
      495 RW (11):						/* sub-schema */
      496 						/*[4.4-1]*/
      497 		if ^prog_id (11)			/*[4.4-1]*/
      498 		then do;
      499 			prog_id (11) = "1"b;	/*[4.4-1]*/
      500 			program (11) = tok_ptr;	/*[4.4-1]*/
      501 			program (20) = null ();	/* db */
      502 						/*[4.4-1]*/
      503 		     end;
      504 		go to RW0;
      505 
      506 RW (12):						/* file */
      507 						/*[4.4-1]*/
      508 		if ^prog_id (12)			/*[4.4-1]*/
      509 		then do;
      510 			prog_id (12) = "1"b;	/*[4.4-1]*/
      511 			program (12) = tok_ptr;	/*[4.4-1]*/
      512 			program (23), program (24) = null ();
      513 						/* sd, fd */
      514 						/*[4.4-1]*/
      515 		     end;
      516 		go to RW0;
      517 
      518 RW (13):						/* working-storage */
      519 		call set_program_table;
      520 		go to RW0;
      521 
      522 RW (14):						/* linkage */
      523 		call set_program_table;
      524 		go to RW0;
      525 
      526 RW (15):						/* communications */
      527 						/*[4.4-1]*/
      528 		if ^prog_id (15)			/*[4.4-1]*/
      529 		then do;
      530 			prog_id (15) = "1"b;	/*[4.4-1]*/
      531 			program (15) = tok_ptr;	/*[4.4-1]*/
      532 			program (19) = null ();	/*cd */
      533 						/*[4.4-1]*/
      534 		     end;
      535 		go to RW0;
      536 
      537 RW (16):						/* report */
      538 						/*[5.1-1]*/
      539 		if prev_wd_num = 24 & reserved_word.column > 11
      540 						/* fd */
      541 						/*[4.4-1]*/
      542 		then program (24) -> fd_object.rep_loc = tok_ptr;
      543 						/*[5.2-1]*/
      544 		else if ^prog_id (16) & prog_id (10) & reserved_word.column < 12
      545 						/* report section */
      546 						/*[4.4-1]*/
      547 		then do;
      548 			program (16) = tok_ptr;	/*[4.4-1]*/
      549 			report_first_token = tok_ptr; /*[4.4-1]*/
      550 			prog_id (16) = "1"b;	/*[4.4-1]*/
      551 			program (22) = null ();	/* rd */
      552 						/*[4.4-1]*/
      553 		     end;				/* reports are clause */
      554 
      555 
      556 
      557 
      558 
      559 		go to RW0;
      560 
      561 RW (17):						/* procedure */
      562 						/*[4.4-1]*/
      563 		if ^prog_id (17)			/*[4.4-1]*/
      564 		then do;
      565 			program (17) = tok_ptr;	/*[4.4-1]*/
      566 			report_last_token = tok_ptr;	/*[4.4-1]*/
      567 			prog_id (17) = "1"b;	/*[4.4-1]*/
      568 			program (25) = null ();	/* reporting */
      569 						/*[4.4-1]*/
      570 		     end;
      571 		go to RW0;
      572 
      573 RW (18):						/* declaratives */
      574 						/*[4.4-1]*/
      575 		call set_program_table;
      576 		go to RW0;
      577 
      578 RW (19):						/* cd */
      579 						/*[4.4-1]*/
      580 		if prog_id (19)
      581 		then call form_data_object;
      582 		go to RW0;
      583 
      584 RW (20):						/* db */
      585 						/*[4.4-1]*/
      586 		if prog_id (11)
      587 		then call form_data_object;		/* sub-schema */
      588 		go to RW0;
      589 
      590 RW (21):						/* select */
      591 						/*[4.4-1]*/
      592 		if prog_id (8)
      593 		then call form_data_object;		/* file-control */
      594 		go to RW0;
      595 
      596 RW (22):						/* rd */
      597 						/*[4.4-1]*/
      598 		if prog_id (16)
      599 		then call form_data_object;		/* report */
      600 		go to RW0;
      601 
      602 RW (23):						/* sd */
      603 						/*[4.4-1]*/
      604 		if prog_id (12)
      605 		then call form_data_object;		/* file */
      606 		go to RW0;
      607 
      608 RW (24):						/* fd */
      609 						/*[4.4-1]*/
      610 		if prog_id (12)			/* file */
      611 						/*[4.4-1]*/
      612 		then do;				/*[4.4-1]*/
      613 			alloc_area.area_size = fd_object_size;
      614 
      615 /*[4.4-1]*/
      616 			call get_space;
      617 
      618 /*[4.4-1]*/
      619 			alloc_area.area_loc -> fd_object.loc = tok_ptr;
      620 						/*[4.4-1]*/
      621 			alloc_area.area_loc -> fd_object.rep_loc = null ();
      622 
      623 /*[4.4-1]*/
      624 			if program (24) = null ()	/*[4.4-1]*/
      625 			then fd_object.next = null ();/*[4.4-1]*/
      626 			else fd_object.next = program (24);
      627 
      628 /*[4.4-1]*/
      629 			program (24) = alloc_area.area_loc;
      630 
      631 /*[4.4-1]*/
      632 		     end;
      633 
      634 		go to RW0;
      635 
      636 RW (25):						/* reporting */
      637 						/*[4.4-1]*/
      638 		if prog_id (18)			/* declaratives */
      639 						/*[4.4-1]*/
      640 		then do;
      641 
      642 /*[4.4-1]*/
      643 			alloc_area.area_size = use_reporting_object_size;
      644 
      645 /*[4.4-1]*/
      646 			call get_space;
      647 
      648 /*[4.4-1]*/
      649 			use_reporting_object.loc = tok_ptr;
      650 						/*[4.4-1]*/
      651 			use_reporting_object.proc_loc = addrel (proc_def_ptr, 1);
      652 						/*[4.4-1]*/
      653 			use_reporting_object.suppress = "0"b;
      654 
      655 /*[4.4-1]*/
      656 			if program (25) = null ()	/*[4.4-1]*/
      657 			then use_reporting_object.next = null ();
      658 						/*[4.4-1]*/
      659 			else use_reporting_object.next = program (25);
      660 
      661 /*[4.4-1]*/
      662 			program (25) = alloc_area.area_loc;
      663 
      664 /*[4.4-1]*/
      665 		     end;
      666 
      667 		go to RW0;
      668 
      669 /* program-id */
      670 RW (26):						/*[4.4-1]*/
      671 		call set_program_table;
      672 
      673 		go to RW0;
      674 
      675 RW (27):						/* suppress */
      676 						/*[4.4-1]*/
      677 		if program (25) ^= null ()
      678 		then program (25) -> use_reporting_object.suppress = "1"b;
      679 		go to RW0;
      680 
      681 RW0:						/*[4.4-1]*/
      682 		prev_wd_num = wd_num;		/*[4.4-1]*/
      683 	     end;
      684 
      685 	else if token.type = 7			/*[4.4-1]*/
      686 	then call cobol_db_put (cobol_mfp, st, addr (token.size), token.size, proc_def_ptr);
      687 						/* proc def */
      688 						/*[5.2-2]*/
      689 	else do;
      690 
      691 /*[5.2-2]*/
      692 		if token.type = 8			/*[5.2-2]*/
      693 		then if substr (token.name, 1, 2) = "SS"/*[5.2-2]*/
      694 		     then if program (25) ^= null ()	/*[5.2.2]*/
      695 			then program (25) -> use_reporting_object.suppress = "1"b;
      696 
      697 /*5.2-2]*/
      698 		call cobol_swf_put (cobol_mfp, st, addr (token.size), token.size);
      699 
      700 /*[5.2-2]*/
      701 	     end;					/* not proc def */
      702 
      703      end;
      704 
      705 get_space:
      706      proc;
      707 
      708 /*[4.4-1]*/
      709 	alloc_area.area_size = alloc_area.area_size + mod (-alloc_area.area_size, 2);
      710 						/*[4.4-1]*/
      711 	alloc_area.area_loc = addr (AA (alloc_area.size));/*[4.4-1]*/
      712 	alloc_area.size = alloc_area.size + alloc_area.area_size;
      713 
      714 /*[4.4-1]*/
      715 	if alloc_area.size <= alloc_area.cap
      716 	then return;
      717 
      718 /*[4.4-1]*/
      719 	alloc_area.loc, alloc_area.area_loc = cobol$alloc (256);
      720 
      721 /*[4.4-1]*/
      722 	alloc_area.size = alloc_area.area_size + 1;
      723 
      724      end;
      725 
      726 form_data_object:
      727      proc;					/* form data object chain */
      728 
      729 /*[4.4-1]*/
      730 	alloc_area.area_size = data_object_size;
      731 
      732 /*[4.4-1]*/
      733 	call get_space;
      734 
      735 /*[4.4-1]*/
      736 	alloc_area.area_loc -> data_object.loc = tok_ptr;
      737 
      738 /*[4.4-1]*/
      739 	if program (wd_num) = null ()			/*[4.4-1]*/
      740 	then data_object.next = null ();		/*[4.4-1]*/
      741 	else data_object.next = program (wd_num);
      742 
      743 /*[4.4-1]*/
      744 	program (wd_num) = alloc_area.area_loc;
      745 
      746      end;
      747 
      748 set_program_table:
      749      proc;
      750 
      751 	if ^prog_id (wd_num)
      752 	then do;
      753 		program (wd_num) = tok_ptr;
      754 		prog_id (wd_num) = "1"b;
      755 	     end;
      756      end;
      757 
  1     1 
  1     2 /* BEGIN INCLUDE FILE ... cobol_ext_.incl.pl1 */
  1     3 /* Last modified on 06/17/76 by ORN */
  1     4 /* Last modified on 12/28/76 by FCH */
  1     5 /* Last modified on 12/01/80 by FCH */
  1     6 
  1     7 /*    <<<   SHARED EXTERNALS INCLUDE FILE   >>>    */
  1     8 
  1     9 
  1    10 dcl     cobol_ext_$cobol_afp ptr ext;
  1    11 dcl     cobol_afp ptr defined (  cobol_ext_$cobol_afp);
  1    12 dcl     cobol_ext_$cobol_analin_fileno ptr ext;
  1    13 dcl     cobol_analin_fileno ptr defined (  cobol_ext_$cobol_analin_fileno);
  1    14 dcl     cobol_ext_$report_first_token ptr ext;
  1    15 dcl     report_first_token ptr defined( cobol_ext_$report_first_token);
  1    16 dcl     cobol_ext_$report_last_token ptr ext;
  1    17 dcl     report_last_token ptr defined ( cobol_ext_$report_last_token);
  1    18 dcl     cobol_ext_$cobol_eltp ptr ext;
  1    19 dcl     cobol_eltp ptr defined (  cobol_ext_$cobol_eltp);
  1    20 dcl     cobol_ext_$cobol_cmfp ptr ext;
  1    21 dcl     cobol_cmfp ptr defined (  cobol_ext_$cobol_cmfp);
  1    22 dcl     cobol_ext_$cobol_com_fileno ptr ext;
  1    23 dcl     cobol_com_fileno ptr defined (  cobol_ext_$cobol_com_fileno);
  1    24 dcl     cobol_ext_$cobol_com_ptr ptr ext;
  1    25 dcl     cobol_com_ptr ptr defined (  cobol_ext_$cobol_com_ptr);
  1    26 dcl     cobol_ext_$cobol_dfp ptr ext;
  1    27 dcl     cobol_dfp ptr defined (  cobol_ext_$cobol_dfp);
  1    28 dcl     cobol_ext_$cobol_hfp ptr ext;
  1    29 dcl     cobol_hfp ptr defined (  cobol_ext_$cobol_hfp);
  1    30 dcl     cobol_ext_$cobol_m1fp ptr ext;
  1    31 dcl     cobol_m1fp ptr defined (  cobol_ext_$cobol_m1fp);
  1    32 dcl     cobol_ext_$cobol_m2fp ptr ext;
  1    33 dcl     cobol_m2fp ptr defined (  cobol_ext_$cobol_m2fp);
  1    34 dcl     cobol_ext_$cobol_min1_fileno ptr ext;
  1    35 dcl     cobol_min1_fileno ptr defined (  cobol_ext_$cobol_min1_fileno);
  1    36 dcl     cobol_ext_$cobol_min2_fileno_ptr ptr ext;
  1    37 dcl     cobol_min2_fileno_ptr ptr defined (  cobol_ext_$cobol_min2_fileno_ptr);
  1    38 dcl     cobol_ext_$cobol_name_fileno ptr ext;
  1    39 dcl     cobol_name_fileno ptr defined (  cobol_ext_$cobol_name_fileno);
  1    40 dcl     cobol_ext_$cobol_name_fileno_ptr ptr ext;
  1    41 dcl     cobol_name_fileno_ptr ptr defined (  cobol_ext_$cobol_name_fileno_ptr);
  1    42 dcl     cobol_ext_$cobol_ntfp ptr ext;
  1    43 dcl     cobol_ntfp ptr defined (  cobol_ext_$cobol_ntfp);
  1    44 dcl     cobol_ext_$cobol_pdofp ptr ext;
  1    45 dcl     cobol_pdofp ptr defined (  cobol_ext_$cobol_pdofp);
  1    46 dcl     cobol_ext_$cobol_pfp ptr ext;
  1    47 dcl     cobol_pfp ptr defined (  cobol_ext_$cobol_pfp);
  1    48 dcl     cobol_ext_$cobol_rm2fp ptr ext;
  1    49 dcl     cobol_rm2fp ptr defined (  cobol_ext_$cobol_rm2fp);
  1    50 dcl     cobol_ext_$cobol_rmin2fp ptr ext;
  1    51 dcl     cobol_rmin2fp ptr defined (  cobol_ext_$cobol_rmin2fp);
  1    52 dcl     cobol_ext_$cobol_curr_in ptr ext;
  1    53 dcl     cobol_curr_in ptr defined (  cobol_ext_$cobol_curr_in);
  1    54 dcl     cobol_ext_$cobol_curr_out ptr ext;
  1    55 dcl     cobol_curr_out ptr defined (  cobol_ext_$cobol_curr_out);
  1    56 dcl     cobol_ext_$cobol_sfp ptr ext;
  1    57 dcl     cobol_sfp ptr defined (  cobol_ext_$cobol_sfp);
  1    58 dcl     cobol_ext_$cobol_w1p ptr ext;
  1    59 dcl     cobol_w1p ptr defined (  cobol_ext_$cobol_w1p);
  1    60 dcl     cobol_ext_$cobol_w2p ptr ext;
  1    61 dcl     cobol_w2p ptr defined (  cobol_ext_$cobol_w2p);
  1    62 dcl     cobol_ext_$cobol_w3p ptr ext;
  1    63 dcl     cobol_w3p ptr defined (  cobol_ext_$cobol_w3p);
  1    64 dcl     cobol_ext_$cobol_w5p ptr ext;
  1    65 dcl     cobol_w5p ptr defined (  cobol_ext_$cobol_w5p);
  1    66 dcl     cobol_ext_$cobol_w6p ptr ext;
  1    67 dcl     cobol_w6p ptr defined (  cobol_ext_$cobol_w6p);
  1    68 dcl     cobol_ext_$cobol_w7p ptr ext;
  1    69 dcl     cobol_w7p ptr defined (  cobol_ext_$cobol_w7p);
  1    70 dcl     cobol_ext_$cobol_x3fp ptr ext;
  1    71 dcl     cobol_x3fp ptr defined (  cobol_ext_$cobol_x3fp);
  1    72 dcl	cobol_ext_$cobol_rwdd ptr ext;
  1    73 dcl	cobol_rwdd ptr defined(cobol_ext_$cobol_rwdd);
  1    74 dcl	cobol_ext_$cobol_rwpd ptr ext;
  1    75 dcl	cobol_rwpd ptr defined(cobol_ext_$cobol_rwpd);
  1    76 
  1    77 
  1    78 dcl     cobol_ext_$cobol_fileno1 fixed bin(24)ext;
  1    79 dcl     cobol_fileno1 fixed bin(24)defined (  cobol_ext_$cobol_fileno1);				
  1    80 dcl     cobol_ext_$cobol_options_len fixed bin(24)ext;
  1    81 dcl     cobol_options_len fixed bin(24)defined (  cobol_ext_$cobol_options_len);
  1    82 dcl     cobol_ext_$cobol_pdout_fileno fixed bin(24)ext;
  1    83 dcl     cobol_pdout_fileno fixed bin(24)defined (  cobol_ext_$cobol_pdout_fileno);			
  1    84 dcl     cobol_ext_$cobol_print_fileno fixed bin(24)ext;
  1    85 dcl     cobol_print_fileno fixed bin(24)defined (  cobol_ext_$cobol_print_fileno);			
  1    86 dcl     cobol_ext_$cobol_rmin2_fileno fixed bin(24)ext;
  1    87 dcl     cobol_rmin2_fileno fixed bin(24)defined (  cobol_ext_$cobol_rmin2_fileno);
  1    88 dcl     cobol_ext_$cobol_x1_fileno fixed bin(24)ext;
  1    89 dcl     cobol_x1_fileno fixed bin(24)defined (  cobol_ext_$cobol_x1_fileno);				
  1    90 dcl     cobol_ext_$cobol_x2_fileno fixed bin(24)ext;
  1    91 dcl     cobol_x2_fileno fixed bin(24)defined (  cobol_ext_$cobol_x2_fileno);
  1    92 dcl     cobol_ext_$cobol_x3_fileno fixed bin(24)ext;
  1    93 dcl     cobol_x3_fileno fixed bin(24)defined (  cobol_ext_$cobol_x3_fileno);
  1    94 
  1    95 dcl     cobol_ext_$cobol_lpr char (5) ext;
  1    96 dcl     cobol_lpr char (5) defined (  cobol_ext_$cobol_lpr);				/* -2- */
  1    97 dcl     cobol_ext_$cobol_options char (120) ext;
  1    98 dcl     cobol_options char (120) defined (  cobol_ext_$cobol_options);          			/* -30- */
  1    99 
  1   100 dcl     cobol_ext_$cobol_xlast8 bit (1) ext;
  1   101 dcl     cobol_xlast8 bit (1) defined (  cobol_ext_$cobol_xlast8);				/* -1- */
  1   102 dcl     cobol_ext_$report_exists bit (1) ext;
  1   103 dcl     report_exists bit (1) defined (  cobol_ext_$report_exists);
  1   104 
  1   105 
  1   106 /*    <<<   END OF SHARED EXTERNALS INCLUDE FILE   >>>    */
  1   107 /* END INCLUDE FILE ... cobol_ext_.incl.pl1 */
  1   108 
      758 
  2     1 
  2     2 /* BEGIN INCLUDE FILE ... cobol_ext_lex.incl.pl1 */
  2     3 /* Last modified on 06/18/76 by ORN */
  2     4 
  2     5 /*   * * *   LEX EXTERNAL DATA   * * *   */
  2     6 
  2     7 /* Pointers */
  2     8 
  2     9 dcl     cobol_ext_lex$cobol_current ptr ext;
  2    10 dcl     cobol_current ptr defined (  cobol_ext_lex$cobol_current);
  2    11 dcl     cobol_ext_lex$cobol_top ptr ext;
  2    12 dcl     cobol_top ptr defined (  cobol_ext_lex$cobol_top);
  2    13 dcl     cobol_ext_lex$cobol_frst ptr ext;
  2    14 dcl     cobol_frst ptr defined (  cobol_ext_lex$cobol_frst);
  2    15 dcl     cobol_ext_lex$cobol_mfp ptr ext;
  2    16 dcl     cobol_mfp ptr defined (  cobol_ext_lex$cobol_mfp);
  2    17 dcl     cobol_ext_lex$cobol_rt_ptr ptr ext;
  2    18 dcl     cobol_rt_ptr ptr defined (  cobol_ext_lex$cobol_rt_ptr);
  2    19 dcl     cobol_ext_lex$cobol_cfp ptr ext;
  2    20 dcl     cobol_cfp ptr defined (  cobol_ext_lex$cobol_cfp);
  2    21 dcl     cobol_ext_lex$cobol_ta_ptr ptr ext;
  2    22 dcl     cobol_ta_ptr ptr defined (  cobol_ext_lex$cobol_ta_ptr);
  2    23 dcl     cobol_ext_lex$cobol_elt_buf_ptr ptr ext;
  2    24 dcl     cobol_elt_buf_ptr ptr defined (  cobol_ext_lex$cobol_elt_buf_ptr);
  2    25 dcl     cobol_ext_lex$cobol_lex_exit /*[*/ label /*]*/ /*[[[ entry static ]]]*/ ext;
  2    26 dcl     cobol_lex_exit /*[*/ label /*]*/ /*[[[ entry static ]]]*/ defined(  cobol_ext_lex$cobol_lex_exit); /* -6- */
  2    27 
  2    28 /* Character */
  2    29 
  2    30 dcl     cobol_ext_lex$cobol_tarea char (300) ext;
  2    31 dcl     cobol_tarea char (300) defined (  cobol_ext_lex$cobol_tarea);    /* -75- */
  2    32 dcl     cobol_ext_lex$cobol_comma_character char (1) ext;
  2    33 dcl     cobol_comma_character char (1) defined (  cobol_ext_lex$cobol_comma_character);
  2    34 dcl     cobol_ext_lex$cobol_decimal_point_character char (1) ext;
  2    35 dcl     cobol_decimal_point_character char (1) defined (  cobol_ext_lex$cobol_decimal_point_character);
  2    36 dcl     cobol_ext_lex$cobol_new_line_character char (1) ext;
  2    37 dcl     cobol_new_line_character char (1) defined (  cobol_ext_lex$cobol_new_line_character);
  2    38 dcl     cobol_ext_lex$cobol_si_key char (5) ext;
  2    39 dcl     cobol_si_key char (5) defined (  cobol_ext_lex$cobol_si_key);     /* -2- */
  2    40 dcl     cobol_ext_lex$cobol_so_key char (5) ext;
  2    41 dcl     cobol_so_key char (5) defined (  cobol_ext_lex$cobol_so_key);     /* -2- */
  2    42 
  2    43 /* Fixed bin */
  2    44 
  2    45 dcl    cobol_ext_lex$ph_num fixed bin ext;
  2    46 dcl     ph_num fixed bin defined(cobol_ext_lex$ph_num );
  2    47 dcl     cobol_ext_lex$cobol_c_l_n fixed bin ext;
  2    48 dcl     cobol_c_l_n fixed bin defined (  cobol_ext_lex$cobol_c_l_n);
  2    49 dcl     cobol_ext_lex$cobol_save_cln fixed bin ext;
  2    50 dcl     cobol_save_cln fixed bin defined (  cobol_ext_lex$cobol_save_cln);
  2    51 dcl     cobol_ext_lex$cobol_save_col fixed bin ext;
  2    52 dcl     cobol_save_col fixed bin defined (  cobol_ext_lex$cobol_save_col);
  2    53 dcl     cobol_ext_lex$cobol_name_number fixed bin ext;
  2    54 dcl     cobol_name_number fixed bin defined (  cobol_ext_lex$cobol_name_number);
  2    55 dcl     cobol_ext_lex$cobol_section_number fixed bin ext;
  2    56 dcl     cobol_section_number fixed bin defined (  cobol_ext_lex$cobol_section_number);
  2    57 dcl     cobol_ext_lex$cobol_sr fixed bin ext;
  2    58 dcl     cobol_sr fixed bin defined (  cobol_ext_lex$cobol_sr);
  2    59 dcl     cobol_ext_lex$cobol_elt_idx fixed bin ext;
  2    60 dcl     cobol_elt_idx fixed bin defined (  cobol_ext_lex$cobol_elt_idx);
  2    61 
  2    62 /* Structures */
  2    63 
  2    64 dcl 1     cobol_ext_lex$cobol_cards ext like   cobol_cards;
  2    65 dcl 1     cobol_cards defined (  cobol_ext_lex$cobol_cards),     /* -67- */
  2    66     2 column fixed bin,
  2    67     2 tblanks fixed bin,
  2    68     2 nr_char fixed bin,
  2    69     2 name char (256);
  2    70 
  2    71 /* Bits */
  2    72 
  2    73 dcl cobol_ext_lex$processing_report bit(1) ext;
  2    74 dcl processing_report bit (1) defined (cobol_ext_lex$processing_report);
  2    75 dcl cobol_ext_lex$real_end_report bit (1) ext;
  2    76 dcl real_end_report bit (1) defined (cobol_ext_lex$real_end_report);
  2    77 dcl     cobol_ext_lex$cobol_continuation bit (1) ext;
  2    78 dcl     cobol_continuation bit (1) defined (  cobol_ext_lex$cobol_continuation);
  2    79 dcl     cobol_ext_lex$cobol_pic_switch bit (1) ext;
  2    80 dcl     cobol_pic_switch bit (1) defined (  cobol_ext_lex$cobol_pic_switch);
  2    81 dcl     cobol_ext_lex$cobol_allo_init_sw bit (1) ext;
  2    82 dcl     cobol_allo_init_sw bit (1) defined (  cobol_ext_lex$cobol_allo_init_sw);
  2    83 dcl     cobol_ext_lex$cobol_lu_sw bit (1) ext;
  2    84 dcl     cobol_lu_sw bit (1) defined (  cobol_ext_lex$cobol_lu_sw);
  2    85 dcl     cobol_ext_lex$cobol_scanoff_sw bit (1) ext;
  2    86 dcl     cobol_scanoff_sw bit (1) defined (  cobol_ext_lex$cobol_scanoff_sw);
  2    87 dcl     cobol_ext_lex$cobol_output_sw bit (1) ext;
  2    88 dcl     cobol_output_sw bit (1) defined (  cobol_ext_lex$cobol_output_sw);
  2    89 dcl     cobol_ext_lex$cobol_stack_sw bit (1) ext;
  2    90 dcl     cobol_stack_sw bit (1) defined (  cobol_ext_lex$cobol_stack_sw);
  2    91 dcl     cobol_ext_lex$cobol_copy_found bit (1) ext;
  2    92 dcl     cobol_copy_found bit (1) defined (  cobol_ext_lex$cobol_copy_found);
  2    93 dcl     cobol_ext_lex$cobol_head_words (5) bit (1) ext;
  2    94 dcl     cobol_head_words (5) bit (1) defined (  cobol_ext_lex$cobol_head_words);
  2    95 dcl     cobol_ext_lex$cobol_elnp_sw bit (1) ext;
  2    96 dcl     cobol_elnp_sw bit (1) defined (  cobol_ext_lex$cobol_elnp_sw);
  2    97 dcl     cobol_ext_lex$cobol_dp_sw bit (1) ext;
  2    98 dcl     cobol_dp_sw bit (1) defined (  cobol_ext_lex$cobol_dp_sw);
  2    99 dcl     cobol_ext_lex$cobol_endprog_sw bit (1) ext;
  2   100 dcl     cobol_endprog_sw bit (1) defined (  cobol_ext_lex$cobol_endprog_sw);
  2   101 dcl     cobol_ext_lex$cobol_debug_mode bit (1) ext;
  2   102 dcl     cobol_debug_mode bit (1) defined (  cobol_ext_lex$cobol_debug_mode);
  2   103 dcl     cobol_ext_lex$cobol_rwt_init_sw bit (1) ext;
  2   104 dcl     cobol_rwt_init_sw bit (1) defined (  cobol_ext_lex$cobol_rwt_init_sw);
  2   105 dcl     cobol_ext_lex$cobol_init_ta_sw bit (1) ext;
  2   106 dcl     cobol_init_ta_sw bit (1) defined (  cobol_ext_lex$cobol_init_ta_sw);
  2   107 dcl     cobol_ext_lex$cobol_rep_sw bit (1) ext;
  2   108 dcl     cobol_rep_sw bit (1) defined (  cobol_ext_lex$cobol_rep_sw);
  2   109 dcl     cobol_ext_lex$cobol_copy_active bit (1) ext;
  2   110 dcl     cobol_copy_active bit (1) defined (  cobol_ext_lex$cobol_copy_active);
  2   111 dcl     cobol_ext_lex$cobol_ln_sw (2) bit (1) ext;
  2   112 dcl     cobol_ln_sw (2) bit (1) defined (  cobol_ext_lex$cobol_ln_sw);
  2   113 dcl     cobol_ext_lex$cobol_prime_sw bit (1) ext;
  2   114 dcl     cobol_prime_sw bit (1) defined (  cobol_ext_lex$cobol_prime_sw);
  2   115 dcl     cobol_ext_lex$cobol_rec1_sw (2) bit (1) ext;
  2   116 dcl     cobol_rec1_sw (2) bit (1) defined (  cobol_ext_lex$cobol_rec1_sw);
  2   117 dcl     cobol_ext_lex$cobol_progid_sw bit(1) ext;
  2   118 dcl     cobol_progid_sw bit(1) defined (  cobol_ext_lex$cobol_progid_sw);
  2   119 
  2   120 
  2   121 /*   * * *   END LEX EXTERNAL DATA   * * *   */
  2   122 /* END INCLUDE FILE ... cobol_ext_lex.incl.pl1 */
  2   123 
      759 
  3     1 
  3     2 /* BEGIN INCLUDE FILE ...   cobol_fixed_common.incl.pl1 */
  3     3 /* Modified on 10/27/82 by FCH, [5.1-1], cobol_cln added to save last line num, BUG543(phx13643) */
  3     4 /* Modified on 07/31/80 by FCH, [4.3-1], use_reporting field added for Report Writer */
  3     5 /* Modified on 03/30/79 by FCH, [4.1-1], -card option added */
  3     6 /* Modified on 03/30/79 by FCH, [4.0-2], -svNM option added */
  3     7 /* Modified on 03/02/79 by FCH, [4.0-1], -levNM option added */
  3     8 /* Modified by RAL on 10/13/78, [4.0-0], Added option exp from fil2. */
  3     9 /* Modified by BC on 06/20/77, descriptor added.	*/
  3    10 /* Modified by BC on 06/02/77, init_cd_seg, init_cd_offset added.	*/
  3    11 /* Modified by BC  on 1/21/77, options.profile added.	*/
  3    12 /* Modified by FCH on 7/6/76, sysin_fno & sysout_fno deleted, accept_device & display_device added */
  3    13 /* Modified by FCH on 5/20/77, comp_level added */
  3    14 
  3    15 
  3    16 /*     THE SIZE OF THIS STRUCTURE IN BYTES, (EXCLUDING VARIABLE
  3    17*   LENGTH ENTITIES), FOR EACH HARDWARE IMPLEMENTATION IS:
  3    18*
  3    19*   HARDWARE	|	SIZE (BYTES)
  3    20*   ---------------------------------
  3    21*   645/6180	|	464
  3    22*   P7		|	396
  3    23*   ---------------------------------
  3    24*   */
  3    25 
  3    26 dcl 	1 fixed_common based (  cobol_com_ptr),
  3    27     		2 prog_name char (30),
  3    28    		2 compiler_rev_no char (25),
  3    29     		2 phase_name char (6),
  3    30     		2 currency char (1),
  3    31     		2 fatal_no fixed bin,
  3    32     		2 warn_no fixed bin,
  3    33     		2 proc_counter fixed bin,
  3    34     		2 spec_tag_counter fixed bin,
  3    35     		2 file_count fixed bin,
  3    36     		2 filedescr_offsets (20) char (5),
  3    37     		2 perf_alter_info char (5),
  3    38     		2 another_perform_info char (5),
  3    39     		2 sort_in_info char (5),
  3    40     		2 odo_info char (5),
  3    41     		2 size_seg fixed bin,
  3    42     		2 size_offset fixed bin(24),
  3    43     		2 size_perform_info char (5),
  3    44     		2 rename_info char (5),
  3    45     		2 report_names char (5),
  3    46     		2 rw_buf_seg fixed bin,
  3    47     		2 rw_buf_offset fixed bin(24),
  3    48     		2 rw_buf_length fixed bin(24),
  3    49     		2 file_keys char (5),
  3    50     		2 search_keys char (5),
  3    51     		2 dd_seg_size fixed bin(24),
  3    52     		2 pd_seg_size fixed bin(24),
  3    53     		2 seg_limit fixed bin ,
  3    54     		2 number_of_dd_segs fixed bin,
  3    55     		2 seg_info char (5),
  3    56     		2 number_of_ls_pointers fixed bin,
  3    57     		2 link_sec_seg fixed bin,
  3    58     		2 link_sec_offset fixed bin(24),
  3    59     		2 sra_clauses fixed bin,
  3    60     		2 fix_up_info char (5),
  3    61     		2 linage_info char (5),
  3    62     		2 first_dd_item char (5),
  3    63     		2 sort_out_info char (5),
  3    64     		2 db_info char (5),
  3    65     		2 realm_info char (5),
  3    66     		2 rc_realm_info char (5),
  3    67     		2 last_file_key char (5),
  3    68     		2 prog_coll_seq fixed bin,
  3    69 		2 init_cd_seg fixed bin,
  3    70 		2 init_cd_offset fixed bin(24),
  3    71     		2 input_error_exit fixed bin,
  3    72    		2 output_error_exit fixed bin,
  3    73     		2 i_o_error_exit fixed bin,
  3    74     		2 extend_error_exit fixed bin,
  3    75     		2 dummy15 fixed bin,
  3    76     		2 options,
  3    77       			3 cu bit (1),
  3    78       			3 st bit (1),
  3    79       			3 wn bit (1),
  3    80       			3 obs bit (1),
  3    81       			3 dm bit (1),
  3    82       			3 xrl bit (1),
  3    83       			3 xrn bit (1),
  3    84       			3 src bit (1),
  3    85       			3 obj bit (1),
  3    86       			3 exs bit (1),
  3    87       			3 sck bit (1),
  3    88       			3 rno bit (1),
  3    89 			3 u_l bit (1),
  3    90 			3 cnv bit (1),
  3    91 			3 cos bit (1),
  3    92 			3 fmt bit (1),
  3    93 			3 profile bit(1),
  3    94 			3 nw bit (1),
  3    95 			3 exp bit (1),		/* [4.0-0] */
  3    96 			3 card bit (1),  /*[4.1-1]*/
  3    97 			3 fil2 bit (5),
  3    98 			3 m_map bit (1),
  3    99 			3 m_bf bit (1),
  3   100 			3 m_fat bit (1),
  3   101 			3 m_wn bit (1),
  3   102 			3 m_obs bit(1),
  3   103 			3 pd bit(1),
  3   104       			3 oc bit(1),
  3   105     		2 supervisor bit (1),
  3   106     		2 dec_comma bit (1),
  3   107     		2 init_cd bit (1),
  3   108     		2 corr bit (1),
  3   109     		2 initl bit (1),
  3   110     		2 debug bit (1),
  3   111     		2 report bit (1),
  3   112     		2 sync_in_prog bit (1),
  3   113     		2 pd_section bit (1),
  3   114     		2 list_switch bit (1),
  3   115     		2 alpha_cond bit (1),
  3   116     		2 num_cond bit (1),
  3   117     		2 spec_sysin bit (1),
  3   118     		2 spec_sysout bit (1),
  3   119     		2 cpl_files bit (1),
  3   120     		2 obj_dec_comma bit (1),
  3   121 		2 default_sign_type bit (3),
  3   122 		2 use_debug bit(1),
  3   123 		2 syntax_trace bit(1),
  3   124 		2 comp_defaults,
  3   125 			3 comp	bit(1),
  3   126 			3 comp_1	bit(1),
  3   127 			3 comp_2	bit(1),
  3   128 			3 comp_3	bit(1),
  3   129 			3 comp_4	bit(1),
  3   130 			3 comp_5	bit(1),
  3   131 			3 comp_6	bit(1),
  3   132 			3 comp_7	bit(1),
  3   133 			3 comp_8 bit(1),
  3   134 		2 disp_defaults,
  3   135 			3 disp	bit(1),
  3   136 			3 disp_1	bit(1),
  3   137 			3 disp_2	bit(1),
  3   138 			3 disp_3	bit(1),
  3   139 			3 disp_4	bit(1),
  3   140 			3 disp_5  bit(1),
  3   141 			3 disp_6  bit(1),
  3   142 			3 disp_7  bit(1),
  3   143 		2 descriptor bit(2),
  3   144 		2 levsv  bit(3),		/*[4.0-1]*/
  3   145 		2 use_reporting bit(1),	/*[4.3-1]*/
  3   146 		2 cd bit(1),		/*[4.4-1]*/
  3   147 		2 dummy17 bit(3),
  3   148    		2 lvl_rstr bit(32),
  3   149    		2 inst_rstr bit(32),
  3   150 		2 comp_level char(1),
  3   151 		2 dummy18 char(30),
  3   152 		2 object_sign char (1),
  3   153     		2 last_print_rec char (5),
  3   154     		2 coll_seq_info char (5),
  3   155     		2 sys_status_seg fixed bin,
  3   156    		2 sys_status_offset fixed bin(24),
  3   157    		2 compiler_id fixed bin,
  3   158    		2 date_comp_ln fixed bin,
  3   159    		2 compile_mode bit(36),
  3   160    		2 default_temp fixed bin,
  3   161    		2 accept_device fixed bin,
  3   162    		2 display_device fixed bin,
  3   163    		2 cobol_cln fixed bin,	/*[5.1-1]*/
  3   164 		2 alphabet_offset fixed bin;
  3   165 
  3   166 
  3   167 
  3   168 /* END INCLUDE FILE ...   cobol_fixed_common.incl.pl1 */
  3   169 
      760 
      761 
      762      end cobol_output_tokens;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    05/24/89  0834.3  cobol_output_tokens.pl1           >spec>install>MR12.3-1048>cobol_output_tokens.pl1
758          1    03/27/82  0431.3  cobol_ext_.incl.pl1               >ldd>include>cobol_ext_.incl.pl1
759          2    03/27/82  0431.6  cobol_ext_lex.incl.pl1            >ldd>include>cobol_ext_lex.incl.pl1
760          3    11/11/82  1712.8  cobol_fixed_common.incl.pl1       >ldd>include>cobol_fixed_common.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
AA                                     based           fixed bin(17,0)          array dcl 173 set ref 711
CT                                     based           fixed bin(17,0)          array dcl 75 set ref 432
PDF                                    parameter       pointer                  dcl 412 set ref 404 415*
TOK                                    based           structure                level 1 unaligned dcl 123
TOK1                                   based           structure                level 1 unaligned dcl 135 ref 257
TOKEN                           000010 internal static varying char(256)        level 2 dcl 80 set ref 251* 284* 284 286* 286 306*
                                                                                  306 316 323* 323 325* 325 328 354*
addr                                                   builtin function         dcl 119 ref 197 197 256 266 266 269 316 328 346 346
                                                                                  395 429 429 432 685 685 698 698 711
addrel                                                 builtin function         dcl 119 ref 651
alloc_area                      000140 internal static structure                level 1 unaligned dcl 111
area_loc                  6     000140 internal static pointer                  level 2 dcl 111 set ref 378 379 380 390 619 621 624
                                                                                  626 629 649 651 653 656 659 662 711* 719* 736 739
                                                                                  741 744
area_size                 4     000140 internal static fixed bin(17,0)          level 2 dcl 111 set ref 388* 613* 643* 709* 709 709
                                                                                  712 722 730*
bit36                                  based           bit(36)                  packed unaligned dcl 175 set ref 395*
cap                       3     000140 internal static fixed bin(17,0)          level 2 dcl 111 set ref 385* 715
cd                                     based           fixed bin(9,0)           array packed unsigned unaligned dcl 76 ref 432
ch32                                   based           char(32)                 packed unaligned dcl 91 set ref 269* 316* 328*
class_tab_ptr           114     000010 internal static pointer                  level 2 dcl 80 set ref 374* 432 432
cobol$alloc                     000162 constant        entry                    external dcl 100 ref 383 719
cobol_cards                            defined         structure                level 1 unaligned dcl 2-65
cobol_class_table_              000150 constant        entry                    external dcl 93 ref 374
cobol_com_ptr                          defined         pointer                  dcl 1-25 ref 202
cobol_current                          defined         pointer                  dcl 2-10 set ref 179* 183 188 188 188 193 193 195
                                                                                  195 197 197 197 212 219 222 229* 242 251 252 255
                                                                                  256 257 260 266 266 266 275 284 286 297 306 312
                                                                                  323 325 346 346 346 356* 424 424 429 429 429 432
                                                                                  537 544 685 685 685 685 692 692 698 698 698
cobol_db_put                    000154 constant        entry                    external dcl 96 ref 266 429 685
cobol_delete_tokens$del_force   000160 constant        entry                    external dcl 98 ref 224
cobol_ext_$cobol_com_ptr        000170 external static pointer                  dcl 1-24 ref 202 202
cobol_ext_$cobol_pfp            000172 external static pointer                  dcl 1-46 ref 197 197
cobol_ext_$report_exists        000174 external static bit(1)                   packed unaligned dcl 1-102 set ref 393* 393
cobol_ext_$report_first_token   000164 external static pointer                  dcl 1-14 set ref 394* 394 549* 549
cobol_ext_$report_last_token    000166 external static pointer                  dcl 1-16 set ref 566* 566
cobol_ext_lex$cobol_current     000176 external static pointer                  dcl 2-9 set ref 179* 179 183 183 188 188 188 188 188
                                                                                  188 193 193 193 193 195 195 195 195 197 197 197
                                                                                  197 197 197 212 212 219 219 222 222 229* 229 242
                                                                                  242 251 251 252 252 255 255 256 256 257 257 260
                                                                                  260 266 266 266 266 266 266 275 275 284 284 286
                                                                                  286 297 297 306 306 312 312 323 323 325 325 346
                                                                                  346 346 346 346 346 356* 356 424 424 424 424 429
                                                                                  429 429 429 429 429 432 432 537 537 544 544 685
                                                                                  685 685 685 685 685 685 685 692 692 692 692 698
                                                                                  698 698 698 698 698
cobol_ext_lex$cobol_frst        000200 external static pointer                  dcl 2-13 ref 178 178 179 179 219 219 356 356
cobol_ext_lex$cobol_mfp         000202 external static pointer                  dcl 2-15 ref 266 266 346 346 429 429 685 685 698 698
cobol_ext_lex$cobol_output_sw   000206 external static bit(1)                   packed unaligned dcl 2-87 set ref 217* 217
cobol_ext_lex$cobol_ta_ptr      000204 external static pointer                  dcl 2-21 ref 219 219 219 219
cobol_frst                             defined         pointer                  dcl 2-14 ref 178 179 219 356
cobol_lexerr                    000156 constant        entry                    external dcl 97 ref 208
cobol_mfp                              defined         pointer                  dcl 2-16 set ref 266* 346* 429* 685* 698*
cobol_output_sw                        defined         bit(1)                   packed unaligned dcl 2-88 set ref 217*
cobol_pfp                              defined         pointer                  dcl 1-47 set ref 197*
cobol_swf_put                   000152 constant        entry                    external dcl 94 ref 197 346 698
cobol_ta_ptr                           defined         pointer                  dcl 2-22 ref 219 219
column                   11            based           fixed bin(17,0)          level 2 dcl 60 ref 537 544
ct                        5            based           fixed bin(18,0)          array level 2 packed packed unsigned unaligned
                                                                                  dcl 72 ref 432
data_object                            based           structure                level 1 unaligned dcl 148 set ref 378
data_object_size        124     000010 internal static fixed bin(17,0)          level 2 dcl 80 set ref 378* 730
debug                   134(01)        based           bit(1)                   level 2 packed packed unaligned dcl 3-26 ref 202
fd_object                              based           structure                level 1 unaligned dcl 154 set ref 379
fd_object_size          125     000010 internal static fixed bin(17,0)          level 2 dcl 80 set ref 379* 613
filler                                 based           structure                level 1 packed packed unaligned dcl 72
fixed_common                           based           structure                level 1 unaligned dcl 3-26
fwd_link                               based           pointer                  level 2 dcl 47 ref 212
info                     13            based           fixed bin(17,0)          level 2 dcl 47 ref 284 286 323 325
key                      13            based           fixed bin(17,0)          level 2 dcl 60 ref 432
l_info                    6            based           bit(8)                   level 2 in structure "token" packed packed unaligned
                                                                                  dcl 47 in procedure "cobol_output_tokens" ref 183
l_info                    6            based           bit(8)                   level 2 in structure "reserved_word" packed packed
                                                                                  unaligned dcl 60 in procedure
                                                                                  "cobol_output_tokens" ref 424
line_size                14            based           fixed bin(17,0)          level 2 in structure "token" dcl 47 in procedure
                                                                                  "cobol_output_tokens" set ref 195* 195 251 252
                                                                                  255* 260* 306 692
line_size                 6            based           fixed bin(17,0)          level 2 in structure "TOK" dcl 123 in procedure
                                                                                  "cobol_output_tokens" ref 269 316 328
loc                       2            based           pointer                  level 2 in structure "data_object" dcl 148
                                                                                  in procedure "cobol_output_tokens" set ref 736*
loc                       2            based           pointer                  level 2 in structure "fd_object" dcl 154
                                                                                  in procedure "cobol_output_tokens" set ref 619*
loc                             000140 internal static pointer                  level 2 in structure "alloc_area" dcl 111
                                                                                  in procedure "cobol_output_tokens" set ref 383*
                                                                                  711 719*
loc                       2            based           pointer                  level 2 in structure "use_reporting_object" dcl 162
                                                                                  in procedure "cobol_output_tokens" set ref 649*
mod                                                    builtin function         dcl 119 ref 709
name                      7            based           char                     level 2 in structure "TOK" packed packed unaligned
                                                                                  dcl 123 in procedure "cobol_output_tokens" set ref
                                                                                  269 316 328
name                     15            based           char                     level 2 in structure "token" packed packed unaligned
                                                                                  dcl 47 in procedure "cobol_output_tokens" ref 251
                                                                                  306 692
next                                   based           pointer                  level 2 in structure "use_reporting_object" dcl 162
                                                                                  in procedure "cobol_output_tokens" set ref 656*
                                                                                  659*
next                                   based           pointer                  level 2 in structure "data_object" dcl 148
                                                                                  in procedure "cobol_output_tokens" set ref 739*
                                                                                  741*
next                                   based           pointer                  level 2 in structure "fd_object" dcl 154
                                                                                  in procedure "cobol_output_tokens" set ref 624*
                                                                                  626*
null                                                   builtin function         dcl 119 ref 214 370 371 394 396 480 501 512 532 551
                                                                                  568 621 624 624 656 656 675 692 739 739
p                       106     000010 internal static pointer                  level 2 dcl 80 set ref 178* 224*
prev_wd_num             121     000010 internal static fixed bin(17,0)          level 2 dcl 80 set ref 399* 537 681*
proc_def_ptr            104     000010 internal static pointer                  level 2 dcl 80 set ref 371* 415 651 685*
proc_loc                  4            based           pointer                  level 2 dcl 162 set ref 651*
prog_id                 127     000010 internal static bit(1)                   array level 2 packed packed unaligned dcl 80 set ref
                                                                                  395 474 478* 495 499* 506 510* 526 530* 544 544
                                                                                  550* 561 567* 578 584 590 596 602 608 636 751 754*
program                                based           pointer                  array dcl 145 set ref 377 396* 396* 396* 479* 480*
                                                                                  500* 501* 511* 512* 512* 531* 532* 537 548* 551*
                                                                                  565* 568* 624 626 629* 656 659 662* 675 675 692
                                                                                  692 739 741 744* 753*
program_ptr             116     000010 internal static pointer                  level 2 dcl 80 set ref 364 377 390* 396 396 396 479
                                                                                  480 500 501 511 512 512 531 532 537 548 551 565
                                                                                  568 624 626 629 656 659 662 675 675 692 692 739
                                                                                  741 744 753
program_size            123     000010 internal static fixed bin(17,0)          level 2 dcl 80 set ref 377* 388
q                       110     000010 internal static pointer                  level 2 dcl 80 set ref 212* 214 222* 224* 229
rep_loc                   4            based           pointer                  level 2 dcl 154 set ref 537* 621*
report_exists                          defined         bit(1)                   packed unaligned dcl 1-103 set ref 393*
report_first_token                     defined         pointer                  dcl 1-15 set ref 394* 549*
report_last_token                      defined         pointer                  dcl 1-17 set ref 566*
reserved_word                          based           structure                level 1 unaligned dcl 60
size                      7            based           fixed bin(17,0)          level 2 in structure "token" dcl 47 in procedure
                                                                                  "cobol_output_tokens" set ref 193* 193 197 197
                                                                                  197* 256 257* 266 266 266* 346 346 346* 429 429
                                                                                  429* 685 685 685* 698 698 698*
size                      2     000140 internal static fixed bin(17,0)          level 2 in structure "alloc_area" dcl 111
                                                                                  in procedure "cobol_output_tokens" set ref 384*
                                                                                  711 712* 712 715 722*
size                                                   builtin function         dcl 119 in procedure "cobol_output_tokens" ref 257
                                                                                  377 378 379 380
st                              000100 automatic       bit(32)                  packed unaligned dcl 103 set ref 197* 266* 346* 429*
                                                                                  685* 698*
st_num                                 parameter       fixed bin(17,0)          dcl 342 ref 339 345
state                   120     000010 internal static fixed bin(17,0)          level 2 dcl 80 set ref 240 263* 345* 355*
static_int                      000010 internal static structure                level 1 unaligned dcl 80
substr                                                 builtin function         dcl 119 set ref 183 269* 316* 328* 424 692
suppress                  6            based           bit(1)                   level 2 packed packed unaligned dcl 162 set ref 653*
                                                                                  675* 692*
sz                              000101 automatic       fixed bin(17,0)          dcl 103 set ref 252* 260 269 269 269
tok1_ptr                        000102 automatic       pointer                  dcl 103 set ref 256* 257
tok_ptr                 102     000010 internal static pointer                  level 2 dcl 80 set ref 266* 269 316 328 370* 429*
                                                                                  479 500 511 531 537 548 549 565 566 619 649 736
                                                                                  753
token                                  based           structure                level 1 unaligned dcl 47
type                     12            based           fixed bin(17,0)          level 2 dcl 47 ref 188 188 188 242 275 297 312 424
                                                                                  685 692
use_reporting_object                   based           structure                level 1 unaligned dcl 162 set ref 380
use_reporting_object_size
                        126     000010 internal static fixed bin(17,0)          level 2 dcl 80 set ref 380* 643
wd_num                          000104 automatic       fixed bin(17,0)          dcl 108 set ref 432* 437 681 739 741 744 751 753 754

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
ch2                                    automatic       char(2)                  packed unaligned dcl 106
cobol_afp                              defined         pointer                  dcl 1-11
cobol_allo_init_sw                     defined         bit(1)                   packed unaligned dcl 2-82
cobol_analin_fileno                    defined         pointer                  dcl 1-13
cobol_c_l_n                            defined         fixed bin(17,0)          dcl 2-48
cobol_cfp                              defined         pointer                  dcl 2-20
cobol_cmfp                             defined         pointer                  dcl 1-21
cobol_com_fileno                       defined         pointer                  dcl 1-23
cobol_comma_character                  defined         char(1)                  packed unaligned dcl 2-33
cobol_continuation                     defined         bit(1)                   packed unaligned dcl 2-78
cobol_copy_active                      defined         bit(1)                   packed unaligned dcl 2-110
cobol_copy_found                       defined         bit(1)                   packed unaligned dcl 2-92
cobol_curr_in                          defined         pointer                  dcl 1-53
cobol_curr_out                         defined         pointer                  dcl 1-55
cobol_debug_mode                       defined         bit(1)                   packed unaligned dcl 2-102
cobol_decimal_point_character          defined         char(1)                  packed unaligned dcl 2-35
cobol_dfp                              defined         pointer                  dcl 1-27
cobol_dp_sw                            defined         bit(1)                   packed unaligned dcl 2-98
cobol_elnp_sw                          defined         bit(1)                   packed unaligned dcl 2-96
cobol_elt_buf_ptr                      defined         pointer                  dcl 2-24
cobol_elt_idx                          defined         fixed bin(17,0)          dcl 2-60
cobol_eltp                             defined         pointer                  dcl 1-19
cobol_endprog_sw                       defined         bit(1)                   packed unaligned dcl 2-100
cobol_ext_$cobol_afp                   external static pointer                  dcl 1-10
cobol_ext_$cobol_analin_fileno         external static pointer                  dcl 1-12
cobol_ext_$cobol_cmfp                  external static pointer                  dcl 1-20
cobol_ext_$cobol_com_fileno            external static pointer                  dcl 1-22
cobol_ext_$cobol_curr_in               external static pointer                  dcl 1-52
cobol_ext_$cobol_curr_out              external static pointer                  dcl 1-54
cobol_ext_$cobol_dfp                   external static pointer                  dcl 1-26
cobol_ext_$cobol_eltp                  external static pointer                  dcl 1-18
cobol_ext_$cobol_fileno1               external static fixed bin(24,0)          dcl 1-78
cobol_ext_$cobol_hfp                   external static pointer                  dcl 1-28
cobol_ext_$cobol_lpr                   external static char(5)                  packed unaligned dcl 1-95
cobol_ext_$cobol_m1fp                  external static pointer                  dcl 1-30
cobol_ext_$cobol_m2fp                  external static pointer                  dcl 1-32
cobol_ext_$cobol_min1_fileno           external static pointer                  dcl 1-34
cobol_ext_$cobol_min2_fileno_ptr       external static pointer                  dcl 1-36
cobol_ext_$cobol_name_fileno           external static pointer                  dcl 1-38
cobol_ext_$cobol_name_fileno_ptr       external static pointer                  dcl 1-40
cobol_ext_$cobol_ntfp                  external static pointer                  dcl 1-42
cobol_ext_$cobol_options               external static char(120)                packed unaligned dcl 1-97
cobol_ext_$cobol_options_len           external static fixed bin(24,0)          dcl 1-80
cobol_ext_$cobol_pdofp                 external static pointer                  dcl 1-44
cobol_ext_$cobol_pdout_fileno          external static fixed bin(24,0)          dcl 1-82
cobol_ext_$cobol_print_fileno          external static fixed bin(24,0)          dcl 1-84
cobol_ext_$cobol_rm2fp                 external static pointer                  dcl 1-48
cobol_ext_$cobol_rmin2_fileno          external static fixed bin(24,0)          dcl 1-86
cobol_ext_$cobol_rmin2fp               external static pointer                  dcl 1-50
cobol_ext_$cobol_rwdd                  external static pointer                  dcl 1-72
cobol_ext_$cobol_rwpd                  external static pointer                  dcl 1-74
cobol_ext_$cobol_sfp                   external static pointer                  dcl 1-56
cobol_ext_$cobol_w1p                   external static pointer                  dcl 1-58
cobol_ext_$cobol_w2p                   external static pointer                  dcl 1-60
cobol_ext_$cobol_w3p                   external static pointer                  dcl 1-62
cobol_ext_$cobol_w5p                   external static pointer                  dcl 1-64
cobol_ext_$cobol_w6p                   external static pointer                  dcl 1-66
cobol_ext_$cobol_w7p                   external static pointer                  dcl 1-68
cobol_ext_$cobol_x1_fileno             external static fixed bin(24,0)          dcl 1-88
cobol_ext_$cobol_x2_fileno             external static fixed bin(24,0)          dcl 1-90
cobol_ext_$cobol_x3_fileno             external static fixed bin(24,0)          dcl 1-92
cobol_ext_$cobol_x3fp                  external static pointer                  dcl 1-70
cobol_ext_$cobol_xlast8                external static bit(1)                   packed unaligned dcl 1-100
cobol_ext_lex$cobol_allo_init_sw       external static bit(1)                   packed unaligned dcl 2-81
cobol_ext_lex$cobol_c_l_n              external static fixed bin(17,0)          dcl 2-47
cobol_ext_lex$cobol_cards              external static structure                level 1 unaligned dcl 2-64
cobol_ext_lex$cobol_cfp                external static pointer                  dcl 2-19
cobol_ext_lex$cobol_comma_character    external static char(1)                  packed unaligned dcl 2-32
cobol_ext_lex$cobol_continuation       external static bit(1)                   packed unaligned dcl 2-77
cobol_ext_lex$cobol_copy_active        external static bit(1)                   packed unaligned dcl 2-109
cobol_ext_lex$cobol_copy_found         external static bit(1)                   packed unaligned dcl 2-91
cobol_ext_lex$cobol_debug_mode         external static bit(1)                   packed unaligned dcl 2-101
cobol_ext_lex$cobol_decimal_point_character
                                       external static char(1)                  packed unaligned dcl 2-34
cobol_ext_lex$cobol_dp_sw              external static bit(1)                   packed unaligned dcl 2-97
cobol_ext_lex$cobol_elnp_sw            external static bit(1)                   packed unaligned dcl 2-95
cobol_ext_lex$cobol_elt_buf_ptr        external static pointer                  dcl 2-23
cobol_ext_lex$cobol_elt_idx            external static fixed bin(17,0)          dcl 2-59
cobol_ext_lex$cobol_endprog_sw         external static bit(1)                   packed unaligned dcl 2-99
cobol_ext_lex$cobol_head_words         external static bit(1)                   array packed unaligned dcl 2-93
cobol_ext_lex$cobol_init_ta_sw         external static bit(1)                   packed unaligned dcl 2-105
cobol_ext_lex$cobol_lex_exit           external static label variable           dcl 2-25
cobol_ext_lex$cobol_ln_sw              external static bit(1)                   array packed unaligned dcl 2-111
cobol_ext_lex$cobol_lu_sw              external static bit(1)                   packed unaligned dcl 2-83
cobol_ext_lex$cobol_name_number        external static fixed bin(17,0)          dcl 2-53
cobol_ext_lex$cobol_new_line_character external static char(1)                  packed unaligned dcl 2-36
cobol_ext_lex$cobol_pic_switch         external static bit(1)                   packed unaligned dcl 2-79
cobol_ext_lex$cobol_prime_sw           external static bit(1)                   packed unaligned dcl 2-113
cobol_ext_lex$cobol_progid_sw          external static bit(1)                   packed unaligned dcl 2-117
cobol_ext_lex$cobol_rec1_sw            external static bit(1)                   array packed unaligned dcl 2-115
cobol_ext_lex$cobol_rep_sw             external static bit(1)                   packed unaligned dcl 2-107
cobol_ext_lex$cobol_rt_ptr             external static pointer                  dcl 2-17
cobol_ext_lex$cobol_rwt_init_sw        external static bit(1)                   packed unaligned dcl 2-103
cobol_ext_lex$cobol_save_cln           external static fixed bin(17,0)          dcl 2-49
cobol_ext_lex$cobol_save_col           external static fixed bin(17,0)          dcl 2-51
cobol_ext_lex$cobol_scanoff_sw         external static bit(1)                   packed unaligned dcl 2-85
cobol_ext_lex$cobol_section_number     external static fixed bin(17,0)          dcl 2-55
cobol_ext_lex$cobol_si_key             external static char(5)                  packed unaligned dcl 2-38
cobol_ext_lex$cobol_so_key             external static char(5)                  packed unaligned dcl 2-40
cobol_ext_lex$cobol_sr                 external static fixed bin(17,0)          dcl 2-57
cobol_ext_lex$cobol_stack_sw           external static bit(1)                   packed unaligned dcl 2-89
cobol_ext_lex$cobol_tarea              external static char(300)                packed unaligned dcl 2-30
cobol_ext_lex$cobol_top                external static pointer                  dcl 2-11
cobol_ext_lex$ph_num                   external static fixed bin(17,0)          dcl 2-45
cobol_ext_lex$processing_report        external static bit(1)                   packed unaligned dcl 2-73
cobol_ext_lex$real_end_report          external static bit(1)                   packed unaligned dcl 2-75
cobol_fileno1                          defined         fixed bin(24,0)          dcl 1-79
cobol_head_words                       defined         bit(1)                   array packed unaligned dcl 2-94
cobol_hfp                              defined         pointer                  dcl 1-29
cobol_init_ta_sw                       defined         bit(1)                   packed unaligned dcl 2-106
cobol_lex_exit                         defined         label variable           dcl 2-26
cobol_ln_sw                            defined         bit(1)                   array packed unaligned dcl 2-112
cobol_lpr                              defined         char(5)                  packed unaligned dcl 1-96
cobol_lu_sw                            defined         bit(1)                   packed unaligned dcl 2-84
cobol_m1fp                             defined         pointer                  dcl 1-31
cobol_m2fp                             defined         pointer                  dcl 1-33
cobol_min1_fileno                      defined         pointer                  dcl 1-35
cobol_min2_fileno_ptr                  defined         pointer                  dcl 1-37
cobol_name_fileno                      defined         pointer                  dcl 1-39
cobol_name_fileno_ptr                  defined         pointer                  dcl 1-41
cobol_name_number                      defined         fixed bin(17,0)          dcl 2-54
cobol_new_line_character               defined         char(1)                  packed unaligned dcl 2-37
cobol_ntfp                             defined         pointer                  dcl 1-43
cobol_options                          defined         char(120)                packed unaligned dcl 1-98
cobol_options_len                      defined         fixed bin(24,0)          dcl 1-81
cobol_pdofp                            defined         pointer                  dcl 1-45
cobol_pdout_fileno                     defined         fixed bin(24,0)          dcl 1-83
cobol_pic_switch                       defined         bit(1)                   packed unaligned dcl 2-80
cobol_prime_sw                         defined         bit(1)                   packed unaligned dcl 2-114
cobol_print_fileno                     defined         fixed bin(24,0)          dcl 1-85
cobol_progid_sw                        defined         bit(1)                   packed unaligned dcl 2-118
cobol_rec1_sw                          defined         bit(1)                   array packed unaligned dcl 2-116
cobol_rep_sw                           defined         bit(1)                   packed unaligned dcl 2-108
cobol_rm2fp                            defined         pointer                  dcl 1-49
cobol_rmin2_fileno                     defined         fixed bin(24,0)          dcl 1-87
cobol_rmin2fp                          defined         pointer                  dcl 1-51
cobol_rt_ptr                           defined         pointer                  dcl 2-18
cobol_rwdd                             defined         pointer                  dcl 1-73
cobol_rwpd                             defined         pointer                  dcl 1-75
cobol_rwt_init_sw                      defined         bit(1)                   packed unaligned dcl 2-104
cobol_save_cln                         defined         fixed bin(17,0)          dcl 2-50
cobol_save_col                         defined         fixed bin(17,0)          dcl 2-52
cobol_scanoff_sw                       defined         bit(1)                   packed unaligned dcl 2-86
cobol_section_number                   defined         fixed bin(17,0)          dcl 2-56
cobol_sfp                              defined         pointer                  dcl 1-57
cobol_si_key                           defined         char(5)                  packed unaligned dcl 2-39
cobol_so_key                           defined         char(5)                  packed unaligned dcl 2-41
cobol_sr                               defined         fixed bin(17,0)          dcl 2-58
cobol_stack_sw                         defined         bit(1)                   packed unaligned dcl 2-90
cobol_tarea                            defined         char(300)                packed unaligned dcl 2-31
cobol_top                              defined         pointer                  dcl 2-12
cobol_w1p                              defined         pointer                  dcl 1-59
cobol_w2p                              defined         pointer                  dcl 1-61
cobol_w3p                              defined         pointer                  dcl 1-63
cobol_w5p                              defined         pointer                  dcl 1-65
cobol_w6p                              defined         pointer                  dcl 1-67
cobol_w7p                              defined         pointer                  dcl 1-69
cobol_x1_fileno                        defined         fixed bin(24,0)          dcl 1-89
cobol_x2_fileno                        defined         fixed bin(24,0)          dcl 1-91
cobol_x3_fileno                        defined         fixed bin(24,0)          dcl 1-93
cobol_x3fp                             defined         pointer                  dcl 1-71
cobol_xlast8                           defined         bit(1)                   packed unaligned dcl 1-101
ioop                                   automatic       char(10)                 packed unaligned dcl 102
ph_num                                 defined         fixed bin(17,0)          dcl 2-46
processing_report                      defined         bit(1)                   packed unaligned dcl 2-74
real_end_report                        defined         bit(1)                   packed unaligned dcl 2-76
rec_ad                                 automatic       char(5)                  packed unaligned dcl 106

NAMES DECLARED BY EXPLICIT CONTEXT.
PUT                             000432 constant        entry                    internal dcl 233 ref 202
PUTREC                          000733 constant        entry                    internal dcl 339 ref 294 309 335
RW                              000004 constant        label                    array(27) dcl 439 set ref 437
RW0                             001354 constant        label                    dcl 681 ref 442 447 452 457 462 467 472 483 488 493
                                                                                  504 516 520 524 535 559 571 576 582 588 594 600
                                                                                  606 634 667 673 679
ST                              000000 constant        label                    array(4) dcl 242 ref 240 280 290 302 319 331
cobol_output_tokens             000065 constant        entry                    external dcl 39
directory_loc                   000262 constant        entry                    external dcl 360
form_data_object                001502 constant        entry                    internal dcl 726 ref 578 584 590 596 602
get_space                       001440 constant        entry                    internal dcl 705 ref 389 616 646 733
init_TOK                        000761 constant        entry                    internal dcl 350 ref 279 289 301 318 330 369
initialize                      000304 constant        entry                    external dcl 366
proc_def_ptr                    000410 constant        entry                    external dcl 404
set_program_table               001534 constant        entry                    internal dcl 748 ref 439 444 449 454 459 464 469 485
                                                                                  490 518 522 573 670
word                            000772 constant        entry                    internal dcl 420 ref 206 246

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      2034        2244    1567        2044
Length      2600    1567       210         317     245         140

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
cobol_output_tokens                 191 external procedure  is an external procedure.  
PUT                                     internal procedure  shares stack frame of external procedure cobol_output_tokens.  
PUTREC                                  internal procedure  shares stack frame of external procedure cobol_output_tokens.  
init_TOK                                internal procedure  shares stack frame of external procedure cobol_output_tokens.  
word                                    internal procedure  shares stack frame of external procedure cobol_output_tokens.  
get_space                               internal procedure  shares stack frame of external procedure cobol_output_tokens.  
form_data_object                        internal procedure  shares stack frame of external procedure cobol_output_tokens.  
set_program_table                       internal procedure  shares stack frame of external procedure cobol_output_tokens.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 static_int                  cobol_output_tokens
000140 alloc_area                  cobol_output_tokens

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
cobol_output_tokens      000100 st                          cobol_output_tokens
                         000101 sz                          cobol_output_tokens
                         000102 tok1_ptr                    cobol_output_tokens
                         000104 wd_num                      cobol_output_tokens

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
alloc_char_temp     cat_realloc_chars   call_ext_out        return_mac          mdfx1               signal_op
shorten_stack       ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
cobol$alloc                   cobol_class_table_            cobol_db_put                  cobol_delete_tokens$del_force
cobol_lexerr                  cobol_swf_put

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
cobol_ext_$cobol_com_ptr      cobol_ext_$cobol_pfp          cobol_ext_$report_exists      cobol_ext_$report_first_token
cobol_ext_$report_last_token  cobol_ext_lex$cobol_current   cobol_ext_lex$cobol_frst      cobol_ext_lex$cobol_mfp
cobol_ext_lex$cobol_output_sw cobol_ext_lex$cobol_ta_ptr




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     39 000064       178 000074       179 000077       183 000102       188 000112       193 000120       195 000122
    197 000124       199 000142       202 000143       206 000152       208 000154       212 000200       214 000205
    217 000211       219 000213       222 000232       224 000235       226 000245       229 000254       231 000255
    360 000256       364 000270       366 000303       369 000313       370 000314       371 000317       374 000320
    377 000326       378 000331       379 000333       380 000335       383 000337       384 000351       385 000354
    388 000356       389 000360       390 000361       393 000364       394 000366       395 000370       396 000371
    399 000376       402 000377       404 000406       415 000417       418 000423       233 000432       240 000433
    242 000436       246 000444       247 000445       251 000446       252 000456       255 000460       256 000462
    257 000464       260 000466       263 000470       266 000472       269 000512       273 000525       275 000526
    279 000533       280 000534       284 000535       286 000553       289 000570       290 000571       294 000572
    295 000576       297 000577       301 000604       302 000605       306 000606       309 000642       310 000647
    312 000650       316 000655       318 000662       319 000663       323 000664       325 000702       328 000717
    330 000724       331 000725       335 000726       337 000732       339 000733       345 000735       346 000740
    348 000760       350 000761       354 000762       355 000764       356 000766       358 000771       420 000772
    424 000773       429 001004       432 001024       437 001045       439 001046       442 001047       444 001050
    447 001051       449 001052       452 001053       454 001054       457 001055       459 001056       462 001057
    464 001060       467 001061       469 001062       472 001063       474 001064       478 001067       479 001071
    480 001074       483 001076       485 001077       488 001100       490 001101       493 001102       495 001103
    499 001106       500 001110       501 001113       504 001115       506 001116       510 001121       511 001123
    512 001126       516 001131       518 001132       520 001133       522 001134       524 001135       526 001136
    530 001141       531 001143       532 001146       535 001150       537 001151       544 001164       548 001175
    549 001200       550 001202       551 001204       559 001206       561 001207       565 001212       566 001215
    567 001217       568 001221       571 001223       573 001224       576 001225       578 001226       582 001232
    584 001233       588 001237       590 001240       594 001244       596 001245       600 001251       602 001252
    606 001256       608 001257       613 001262       616 001264       619 001265       621 001271       624 001273
    626 001302       629 001304       634 001305       636 001306       643 001311       646 001313       649 001314
    651 001320       653 001323       656 001325       659 001335       662 001337       667 001340       670 001341
    673 001342       675 001343       679 001353       681 001354       683 001357       685 001360       692 001403
    698 001421       703 001437       705 001440       709 001441       711 001446       712 001452       715 001454
    719 001460       722 001476       724 001501       726 001502       730 001503       733 001506       736 001507
    739 001513       741 001526       744 001531       746 001533       748 001534       751 001535       753 001543
    754 001550       756 001553


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
