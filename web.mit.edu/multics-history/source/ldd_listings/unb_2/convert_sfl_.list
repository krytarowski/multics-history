	COMPILATION LISTING OF SEGMENT convert_sfl_
	Compiled by: Multics PL/I Compiler, Release 28b, of April 11, 1983
	Compiled at: Honeywell LCPD Phoenix, System M
	Compiled on: 06/30/83  0841.6 mst Thu
	    Options: map single_symbol_list

        1 /* **************************************************************
        2*   *                                                            *
        3*   * Copyright, (C) Massachusetts Institute of Technology, 1973 *
        4*   *                                                            *
        5*   ************************************************************** */
        6 convert_sfl_:
        7 	proc(input_value, precision) returns(char(*));
        8 
        9 
       10 
       11 dcl
       12 	F(-128:127) fixed bin(35) int static init(
       13 /* -128 */	2938735877,
       14 /* -127 */	5877471754,
       15 /* -126 */	11754943508,
       16 /* -125 */	2350988701,
       17 /* -124 */	4701977403,
       18 /* -123 */	9403954806,
       19 /* -122 */	1880790961,
       20 /* -121 */	3761581922,
       21 /* -120 */	7523163845,
       22 /* -119 */	1504632769,
       23 /* -118 */	3009265538,
       24 /* -117 */	6018531076,
       25 /* -116 */	1203706215,
       26 /* -115 */	2407412430,
       27 /* -114 */	4814824860,
       28 /* -113 */	9629649721,
       29 /* -112 */	1925929944,
       30 /* -111 */	3851859888,
       31 /* -110 */	7703719777,
       32 /* -109 */	1540743955,
       33 /* -108 */	3081487911,
       34 /* -107 */	6162975822,
       35 /* -106 */	1232595164,
       36 /* -105 */	2465190328,
       37 /* -104 */	4930380657,
       38 /* -103 */	9860761315,
       39 /* -102 */	1972152263,
       40 /* -101 */	3944304526,
       41 /* -100 */	7888609052,
       42 /* -99 */		1577721810,
       43 /* -98 */		3155443620,
       44 /* -97 */		6310887241,
       45 /* -96 */		1262177448,
       46 /* -95 */		2524354896,
       47 /* -94 */		5048709793,
       48 /* -93 */		10097419586,
       49 /* -92 */		2019483917,
       50 /* -91 */		4038967834,
       51 /* -90 */		8077935669,
       52 /* -89 */		1615587133,
       53 /* -88 */		3231174267,
       54 /* -87 */		6462348535,
       55 /* -86 */		1292469707,
       56 /* -85 */		2584939414,
       57 /* -84 */		5169878828,
       58 /* -83 */		10339757656,
       59 /* -82 */		2067951531,
       60 /* -81 */		4135903062,
       61 /* -80 */		8271806125,
       62 /* -79 */		1654361225,
       63 /* -78 */		3308722450,
       64 /* -77 */		6617444900,
       65 /* -76 */		1323488980,
       66 /* -75 */		2646977960,
       67 /* -74 */		5293955920,
       68 /* -73 */		10587911840,
       69 /* -72 */		2117582368,
       70 /* -71 */		4235164736,
       71 /* -70 */		8470329472,
       72 /* -69 */		1694065894,
       73 /* -68 */		3388131789,
       74 /* -67 */		6776263578,
       75 /* -66 */		1355252715,
       76 /* -65 */		2710505431,
       77 /* -64 */		5421010862,
       78 /* -63 */		10842021724,
       79 /* -62 */		2168404344,
       80 /* -61 */		4336808689,
       81 /* -60 */		8673617379,
       82 /* -59 */		1734723475,
       83 /* -58 */		3469446951,
       84 /* -57 */		6938893903,
       85 /* -56 */		1387778780,
       86 /* -55 */		2775557561,
       87 /* -54 */		5551115123,
       88 /* -53 */		11102230246,
       89 /* -52 */		2220446049,
       90 /* -51 */		4440892098,
       91 /* -50 */		8881784197,
       92 /* -49 */		1776356839,
       93 /* -48 */		3552713678,
       94 /* -47 */		7105427357,
       95 /* -46 */		1421085471,
       96 /* -45 */		2842170943,
       97 /* -44 */		5684341886,
       98 /* -43 */		11368683772,
       99 /* -42 */		2273736754,
      100 /* -41 */		4547473508,
      101 /* -40 */		9094947017,
      102 /* -39 */		1818989403,
      103 /* -38 */		3637978807,
      104 /* -37 */		7275957614,
      105 /* -36 */		1455191522,
      106 /* -35 */		2910383045,
      107 /* -34 */		5820766091,
      108 /* -33 */		11641532182,
      109 /* -32 */		2328306436,
      110 /* -31 */		4656612873,
      111 /* -30 */		9313225746,
      112 /* -29 */		1862645149,
      113 /* -28 */		3725290298,
      114 /* -27 */		7450580596,
      115 /* -26 */		1490116119,
      116 /* -25 */		2980232238,
      117 /* -24 */		5960464477,
      118 /* -23 */		1192092895,
      119 /* -22 */		2384185791,
      120 /* -21 */		4768371582,
      121 /* -20 */		9536743164,
      122 /* -19 */		1907348632,
      123 /* -18 */		3814697265,
      124 /* -17 */		7629394531,
      125 /* -16 */		1525878906,
      126 /* -15 */		3051757812,
      127 /* -14 */		6103515625,
      128 /* -13 */		1220703125,
      129 /* -12 */		2441406250,
      130 /* -11 */		4882812500,
      131 /* -10 */		9765625000,
      132 /* -9 */		1953125000,
      133 /* -8 */		3906250000,
      134 /* -7 */		7812500000,
      135 /* -6 */		1562500000,
      136 /* -5 */		3125000000,
      137 /* -4 */		6250000000,
      138 /* -3 */		1250000000,
      139 /* -2 */		2500000000,
      140 /* -1 */		5000000000,
      141 /* 0 */		10000000000,
      142 /* 1 */		2000000000,
      143 /* 2 */		4000000000,
      144 /* 3 */		8000000000,
      145 /* 4 */		1600000000,
      146 /* 5 */		3200000000,
      147 /* 6 */		6400000000,
      148 /* 7 */		1280000000,
      149 /* 8 */		2560000000,
      150 /* 9 */		5120000000,
      151 /* 10 */		10240000000,
      152 /* 11 */		2048000000,
      153 /* 12 */		4096000000,
      154 /* 13 */		8192000000,
      155 /* 14 */		1638400000,
      156 /* 15 */		3276800000,
      157 /* 16 */		6553600000,
      158 /* 17 */		1310720000,
      159 /* 18 */		2621440000,
      160 /* 19 */		5242880000,
      161 /* 20 */		10485760000,
      162 /* 21 */		2097152000,
      163 /* 22 */		4194304000,
      164 /* 23 */		8388608000,
      165 /* 24 */		1677721600,
      166 /* 25 */		3355443200,
      167 /* 26 */		6710886400,
      168 /* 27 */		1342177280,
      169 /* 28 */		2684354560,
      170 /* 29 */		5368709120,
      171 /* 30 */		10737418240,
      172 /* 31 */		2147483648,
      173 /* 32 */		4294967296,
      174 /* 33 */		8589934592,
      175 /* 34 */		1717986918,
      176 /* 35 */		3435973836,
      177 /* 36 */		6871947673,
      178 /* 37 */		1374389534,
      179 /* 38 */		2748779069,
      180 /* 39 */		5497558138,
      181 /* 40 */		10995116277,
      182 /* 41 */		2199023255,
      183 /* 42 */		4398046511,
      184 /* 43 */		8796093022,
      185 /* 44 */		1759218604,
      186 /* 45 */		3518437208,
      187 /* 46 */		7036874417,
      188 /* 47 */		1407374883,
      189 /* 48 */		2814749767,
      190 /* 49 */		5629499534,
      191 /* 50 */		11258999068,
      192 /* 51 */		2251799813,
      193 /* 52 */		4503599627,
      194 /* 53 */		9007199254,
      195 /* 54 */		1801439850,
      196 /* 55 */		3602879701,
      197 /* 56 */		7205759403,
      198 /* 57 */		1441151880,
      199 /* 58 */		2882303761,
      200 /* 59 */		5764607523,
      201 /* 60 */		11529215046,
      202 /* 61 */		2305843009,
      203 /* 62 */		4611686018,
      204 /* 63 */		9223372036,
      205 /* 64 */		1844674407,
      206 /* 65 */		3689348814,
      207 /* 66 */		7378697629,
      208 /* 67 */		1475739525,
      209 /* 68 */		2951479051,
      210 /* 69 */		5902958103,
      211 /* 70 */		1180591620,
      212 /* 71 */		2361183241,
      213 /* 72 */		4722366482,
      214 /* 73 */		9444732965,
      215 /* 74 */		1888946593,
      216 /* 75 */		3777893186,
      217 /* 76 */		7555786372,
      218 /* 77 */		1511157274,
      219 /* 78 */		3022314549,
      220 /* 79 */		6044629098,
      221 /* 80 */		1208925819,
      222 /* 81 */		2417851639,
      223 /* 82 */		4835703278,
      224 /* 83 */		9671406556,
      225 /* 84 */		1934281311,
      226 /* 85 */		3868562622,
      227 /* 86 */		7737125245,
      228 /* 87 */		1547425049,
      229 /* 88 */		3094850098,
      230 /* 89 */		6189700196,
      231 /* 90 */		1237940039,
      232 /* 91 */		2475880078,
      233 /* 92 */		4951760157,
      234 /* 93 */		9903520314,
      235 /* 94 */		1980704062,
      236 /* 95 */		3961408125,
      237 /* 96 */		7922816251,
      238 /* 97 */		1584563250,
      239 /* 98 */		3169126500,
      240 /* 99 */		6338253001,
      241 /* 100 */		1267650600,
      242 /* 101 */		2535301200,
      243 /* 102 */		5070602400,
      244 /* 103 */		10141204801,
      245 /* 104 */		2028240960,
      246 /* 105 */		4056481920,
      247 /* 106 */		8112963841,
      248 /* 107 */		1622592768,
      249 /* 108 */		3245185536,
      250 /* 109 */		6490371073,
      251 /* 110 */		1298074214,
      252 /* 111 */		2596148429,
      253 /* 112 */		5192296858,
      254 /* 113 */		10384593717,
      255 /* 114 */		2076918743,
      256 /* 115 */		4153837486,
      257 /* 116 */		8307674973,
      258 /* 117 */		1661534994,
      259 /* 118 */		3323069989,
      260 /* 119 */		6646139978,
      261 /* 120 */		1329227995,
      262 /* 121 */		2658455991,
      263 /* 122 */		5316911983,
      264 /* 123 */		10633823966,
      265 /* 124 */		2126764793,
      266 /* 125 */		4253529586,
      267 /* 126 */		8507059173,
      268 /* 127 */		1701411834);
      269 
      270 dcl
      271 	E(-128:127) fixed bin int static init(
      272 /* -128 */		-59,
      273 /* -127 */		-59,
      274 /* -126 */		-59,
      275 /* -125 */		-58,
      276 /* -124 */		-58,
      277 /* -123 */		-58,
      278 /* -122 */		-57,
      279 /* -121 */		-57,
      280 /* -120 */		-57,
      281 /* -119 */		-56,
      282 /* -118 */		-56,
      283 /* -117 */		-56,
      284 /* -116 */		-55,
      285 /* -115 */		-55,
      286 /* -114 */		-55,
      287 /* -113 */		-55,
      288 /* -112 */		-54,
      289 /* -111 */		-54,
      290 /* -110 */		-54,
      291 /* -109 */		-53,
      292 /* -108 */		-53,
      293 /* -107 */		-53,
      294 /* -106 */		-52,
      295 /* -105 */		-52,
      296 /* -104 */		-52,
      297 /* -103 */		-52,
      298 /* -102 */		-51,
      299 /* -101 */		-51,
      300 /* -100 */		-51,
      301 /* -99 */			-50,
      302 /* -98 */			-50,
      303 /* -97 */			-50,
      304 /* -96 */			-49,
      305 /* -95 */			-49,
      306 /* -94 */			-49,
      307 /* -93 */			-49,
      308 /* -92 */			-48,
      309 /* -91 */			-48,
      310 /* -90 */			-48,
      311 /* -89 */			-47,
      312 /* -88 */			-47,
      313 /* -87 */			-47,
      314 /* -86 */			-46,
      315 /* -85 */			-46,
      316 /* -84 */			-46,
      317 /* -83 */			-46,
      318 /* -82 */			-45,
      319 /* -81 */			-45,
      320 /* -80 */			-45,
      321 /* -79 */			-44,
      322 /* -78 */			-44,
      323 /* -77 */			-44,
      324 /* -76 */			-43,
      325 /* -75 */			-43,
      326 /* -74 */			-43,
      327 /* -73 */			-43,
      328 /* -72 */			-42,
      329 /* -71 */			-42,
      330 /* -70 */			-42,
      331 /* -69 */			-41,
      332 /* -68 */			-41,
      333 /* -67 */			-41,
      334 /* -66 */			-40,
      335 /* -65 */			-40,
      336 /* -64 */			-40,
      337 /* -63 */			-40,
      338 /* -62 */			-39,
      339 /* -61 */			-39,
      340 /* -60 */			-39,
      341 /* -59 */			-38,
      342 /* -58 */			-38,
      343 /* -57 */			-38,
      344 /* -56 */			-37,
      345 /* -55 */			-37,
      346 /* -54 */			-37,
      347 /* -53 */			-37,
      348 /* -52 */			-36,
      349 /* -51 */			-36,
      350 /* -50 */			-36,
      351 /* -49 */			-35,
      352 /* -48 */			-35,
      353 /* -47 */			-35,
      354 /* -46 */			-34,
      355 /* -45 */			-34,
      356 /* -44 */			-34,
      357 /* -43 */			-34,
      358 /* -42 */			-33,
      359 /* -41 */			-33,
      360 /* -40 */			-33,
      361 /* -39 */			-32,
      362 /* -38 */			-32,
      363 /* -37 */			-32,
      364 /* -36 */			-31,
      365 /* -35 */			-31,
      366 /* -34 */			-31,
      367 /* -33 */			-31,
      368 /* -32 */			-30,
      369 /* -31 */			-30,
      370 /* -30 */			-30,
      371 /* -29 */			-29,
      372 /* -28 */			-29,
      373 /* -27 */			-29,
      374 /* -26 */			-28,
      375 /* -25 */			-28,
      376 /* -24 */			-28,
      377 /* -23 */			-27,
      378 /* -22 */			-27,
      379 /* -21 */			-27,
      380 /* -20 */			-27,
      381 /* -19 */			-26,
      382 /* -18 */			-26,
      383 /* -17 */			-26,
      384 /* -16 */			-25,
      385 /* -15 */			-25,
      386 /* -14 */			-25,
      387 /* -13 */			-24,
      388 /* -12 */			-24,
      389 /* -11 */			-24,
      390 /* -10 */			-24,
      391 /* -9 */			-23,
      392 /* -8 */			-23,
      393 /* -7 */			-23,
      394 /* -6 */			-22,
      395 /* -5 */			-22,
      396 /* -4 */			-22,
      397 /* -3 */			-21,
      398 /* -2 */			-21,
      399 /* -1 */			-21,
      400 /* 0 */			-21,
      401 /* 1 */			-20,
      402 /* 2 */			-20,
      403 /* 3 */			-20,
      404 /* 4 */			-19,
      405 /* 5 */			-19,
      406 /* 6 */			-19,
      407 /* 7 */			-18,
      408 /* 8 */			-18,
      409 /* 9 */			-18,
      410 /* 10 */			-18,
      411 /* 11 */			-17,
      412 /* 12 */			-17,
      413 /* 13 */			-17,
      414 /* 14 */			-16,
      415 /* 15 */			-16,
      416 /* 16 */			-16,
      417 /* 17 */			-15,
      418 /* 18 */			-15,
      419 /* 19 */			-15,
      420 /* 20 */			-15,
      421 /* 21 */			-14,
      422 /* 22 */			-14,
      423 /* 23 */			-14,
      424 /* 24 */			-13,
      425 /* 25 */			-13,
      426 /* 26 */			-13,
      427 /* 27 */			-12,
      428 /* 28 */			-12,
      429 /* 29 */			-12,
      430 /* 30 */			-12,
      431 /* 31 */			-11,
      432 /* 32 */			-11,
      433 /* 33 */			-11,
      434 /* 34 */			-10,
      435 /* 35 */			-10,
      436 /* 36 */			-10,
      437 /* 37 */			-9,
      438 /* 38 */			-9,
      439 /* 39 */			-9,
      440 /* 40 */			-9,
      441 /* 41 */			-8,
      442 /* 42 */			-8,
      443 /* 43 */			-8,
      444 /* 44 */			-7,
      445 /* 45 */			-7,
      446 /* 46 */			-7,
      447 /* 47 */			-6,
      448 /* 48 */			-6,
      449 /* 49 */			-6,
      450 /* 50 */			-6,
      451 /* 51 */			-5,
      452 /* 52 */			-5,
      453 /* 53 */			-5,
      454 /* 54 */			-4,
      455 /* 55 */			-4,
      456 /* 56 */			-4,
      457 /* 57 */			-3,
      458 /* 58 */			-3,
      459 /* 59 */			-3,
      460 /* 60 */			-3,
      461 /* 61 */			-2,
      462 /* 62 */			-2,
      463 /* 63 */			-2,
      464 /* 64 */			-1,
      465 /* 65 */			-1,
      466 /* 66 */			-1,
      467 /* 67 */			0,
      468 /* 68 */			0,
      469 /* 69 */			0,
      470 /* 70 */			1,
      471 /* 71 */			1,
      472 /* 72 */			1,
      473 /* 73 */			1,
      474 /* 74 */			2,
      475 /* 75 */			2,
      476 /* 76 */			2,
      477 /* 77 */			3,
      478 /* 78 */			3,
      479 /* 79 */			3,
      480 /* 80 */			4,
      481 /* 81 */			4,
      482 /* 82 */			4,
      483 /* 83 */			4,
      484 /* 84 */			5,
      485 /* 85 */			5,
      486 /* 86 */			5,
      487 /* 87 */			6,
      488 /* 88 */			6,
      489 /* 89 */			6,
      490 /* 90 */			7,
      491 /* 91 */			7,
      492 /* 92 */			7,
      493 /* 93 */			7,
      494 /* 94 */			8,
      495 /* 95 */			8,
      496 /* 96 */			8,
      497 /* 97 */			9,
      498 /* 98 */			9,
      499 /* 99 */			9,
      500 /* 100 */			10,
      501 /* 101 */			10,
      502 /* 102 */			10,
      503 /* 103 */			10,
      504 /* 104 */			11,
      505 /* 105 */			11,
      506 /* 106 */			11,
      507 /* 107 */			12,
      508 /* 108 */			12,
      509 /* 109 */			12,
      510 /* 110 */			13,
      511 /* 111 */			13,
      512 /* 112 */			13,
      513 /* 113 */			13,
      514 /* 114 */			14,
      515 /* 115 */			14,
      516 /* 116 */			14,
      517 /* 117 */			15,
      518 /* 118 */			15,
      519 /* 119 */			15,
      520 /* 120 */			16,
      521 /* 121 */			16,
      522 /* 122 */			16,
      523 /* 123 */			16,
      524 /* 124 */			17,
      525 /* 125 */			17,
      526 /* 126 */			17,
      527 /* 127 */			18);
      528 
      529 
      530 dcl
      531 	input_value float bin(27),
      532 	precision fixed bin,
      533 	1 b_value based(addr(input_value)),
      534 	   2 e fixed bin(7) unal,
      535 	   2 bmantissa fixed bin(27) unal,
      536 	mantissa fixed bin(28),
      537 	two27 fixed bin(35) int static init(134217728),
      538 	multiply builtin,
      539 	divide builtin,
      540 	v fixed bin(63),
      541 	v1 fixed bin(63),
      542 	factor fixed bin(63),
      543 	round_factor fixed bin(35),
      544 	two26 fixed bin(35) int static init(67108864),
      545 	trail fixed bin,
      546 	mostsig fixed bin,
      547 	i fixed bin,
      548 	n fixed bin,
      549 	mod builtin,
      550 	digits(0:9) char(1) int static init("0","1","2","3","4","5","6","7","8","9"),
      551 	digit(11) char(1),
      552 	Expt fixed bin,
      553 	point fixed bin,
      554 	min builtin,
      555 	value char(32) var,
      556 	substr builtin;
      557 
      558 
      559 	if bmantissa=0 then return("0.0");
      560 
      561 	if bmantissa<0 then mantissa = - bmantissa;
      562 	else mantissa = bmantissa;
      563 
      564 	v = divide(multiply(mantissa, F(e), 63, 0) + two26, two27, 63, 0);
      565 
      566 	factor = 1;
      567 
      568 	do i = 1 to precision;
      569 	   factor = factor * 10;
      570 	   if factor>v then go to rounded;
      571 	   end;
      572 
      573 	factor = factor * 10;
      574 
      575 	round_factor = 5;
      576 
      577 	do i = 1 to 10 while (factor<=v);
      578 	   factor = factor * 10;
      579 	   round_factor = round_factor * 10;
      580 	   end;
      581 
      582 	v = v + round_factor;
      583 	v = v - mod(v, 2*round_factor);
      584 
      585 rounded:
      586 	trail, mostsig = 0;
      587 
      588 	do i = 1 to 11;
      589 	   n = mod(v, 10);
      590 	   if n=0 then
      591 	      if mostsig=0 then trail = i;
      592 	      else;
      593 	   else mostsig = i;
      594 	   digit(i) = digits(n);
      595 	   v = divide(v, 10, 63, 0);
      596 	   end;
      597 
      598 	Expt = E(e) + 11;
      599 
      600 	point = mostsig + Expt;
      601 
      602 	value = "";
      603 
      604 	if point<=precision & (-Expt-trail)<=precision then do;
      605 
      606 	   do i = max(mostsig, -Expt) to min(trail+1, -Expt) by -1;
      607 	      if i=-Expt then value = value||".";
      608 	      if i<trail+1 | i>mostsig then value = value||"0";
      609 	      else value = value||digit(i);
      610 	      end;
      611 
      612 	   if substr(value,1,1)="." then value = "0"||value;
      613 	   else if i=mostsig-point then value = value||".0";
      614 
      615 	   if bmantissa<0 then value = "-"||value;
      616 
      617 	   return(value);
      618 
      619 	   end;
      620 
      621 
      622 	value = value || digit(mostsig);
      623 
      624 	do i = mostsig-1 to trail+1 by -1;
      625 	   if i=mostsig-1 then value = value || ".";
      626 	   value = value || digit(i);
      627 	   end;
      628 
      629 	value = value || "e";
      630 
      631 	point = point - 1;
      632 
      633 	if point<0 then do;
      634 	   value = value || "-";
      635 	   point = - point;
      636 	   end;
      637 
      638 	if point<10 then value = value || digits(point);
      639 	else value = value || digits(divide(point, 10, 17, 0)) || digits(mod(point, 10));
      640 
      641 	if bmantissa<0 then value = "-" || value;
      642 
      643 	return(value);
      644 
      645 end convert_sfl_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    06/29/83  1541.3  convert_sfl_.pl1                  >special_ldd>on>06/27/83>convert_sfl_.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

E                               000003 constant        fixed bin(17,0)          initial array dcl 270 ref 598
Expt                            000116 automatic       fixed bin(17,0)          dcl 530 set ref 598* 600 604 606 606 607
F                               000403 constant        fixed bin(35,0)          initial array dcl 11 ref 564
addr                                                   builtin function         ref 559 561 561 562 564 598 615 641
b_value                                based           structure                level 1 packed unaligned dcl 530
bmantissa                 0(08)        based           fixed bin(27,0)          level 2 packed unaligned dcl 530 ref 559 561 561 562
                                                                                  615 641
convert_sfl_                    001016 constant        entry                    external dcl 6
digit                           000113 automatic       char(1)                  array unaligned dcl 530 set ref 594* 609 622 626
digits                          000000 constant        char(1)                  initial array unaligned dcl 530 ref 594 638 639 639
divide                                                 builtin function         dcl 530 ref 564 595 639
e                                      based           fixed bin(7,0)           level 2 packed unaligned dcl 530 ref 564 598
factor                          000104 automatic       fixed bin(63,0)          dcl 530 set ref 566* 569* 569 570 573* 573 577 578*
                                                                                  578
i                               000111 automatic       fixed bin(17,0)          dcl 530 set ref 568* 577* 588* 590 593 594* 606* 607
                                                                                  608 608 609* 613 624* 625 626*
input_value                            parameter       float bin(27)            dcl 530 set ref 6 559 561 561 562 564 598 615 641
mantissa                        000100 automatic       fixed bin(28,0)          dcl 530 set ref 561* 562* 564
max                                                    builtin function         ref 606
min                                                    builtin function         dcl 530 ref 606
mod                                                    builtin function         dcl 530 ref 583 589 639
mostsig                         000110 automatic       fixed bin(17,0)          dcl 530 set ref 585* 590 593* 600 606 608 613 622
                                                                                  624 625
multiply                                               builtin function         dcl 530 ref 564
n                               000112 automatic       fixed bin(17,0)          dcl 530 set ref 589* 590 594
point                           000117 automatic       fixed bin(17,0)          dcl 530 set ref 600* 604 613 631* 631 633 635* 635
                                                                                  638 638 639 639
precision                              parameter       fixed bin(17,0)          dcl 530 ref 6 568 604 604
round_factor                    000106 automatic       fixed bin(35,0)          dcl 530 set ref 575* 579* 579 582 583
rounded                         001157 constant        label                    dcl 585 ref 570
substr                                                 builtin function         dcl 530 ref 612
trail                           000107 automatic       fixed bin(17,0)          dcl 530 set ref 585* 590* 604 606 608 624
two26                                  constant        fixed bin(35,0)          initial dcl 530 ref 564
two27                           001644 constant        fixed bin(35,0)          initial dcl 530 ref 564
v                               000102 automatic       fixed bin(63,0)          dcl 530 set ref 564* 570 577 582* 582 583* 583 583
                                                                                  589 595* 595
v1                                     automatic       fixed bin(63,0)          dcl 530
value                           000120 automatic       varying char(32)         dcl 530 set ref 602* 607* 607 608* 608 609* 609 612
                                                                                  612* 612 613* 613 615* 615 617 622* 622 625* 625
                                                                                  626* 626 629* 629 634* 634 638* 638 639* 639 641*
                                                                                  641 643

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1700        1710    1653        1710
Length      2062    1653        10         135      25           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
convert_sfl_                         97 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
convert_sfl_             000100 mantissa                    convert_sfl_
                         000102 v                           convert_sfl_
                         000104 factor                      convert_sfl_
                         000106 round_factor                convert_sfl_
                         000107 trail                       convert_sfl_
                         000110 mostsig                     convert_sfl_
                         000111 i                           convert_sfl_
                         000112 n                           convert_sfl_
                         000113 digit                       convert_sfl_
                         000116 Expt                        convert_sfl_
                         000117 point                       convert_sfl_
                         000120 value                       convert_sfl_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_g_a               r_le_a              alloc_cs            cat_realloc_cs      mpfx2               mod_fx1
mod_fx3             mod_fx4             shorten_stack       ext_entry_desc      return_chars_eis    divide_fx3

NO EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
      6 001012       559 001023       561 001040       562 001053       564 001057       566 001071       568 001073
    569 001103       570 001107       571 001112       573 001114       575 001120       577 001122       578 001132
    579 001136       580 001141       582 001143       583 001146       585 001157       588 001161       589 001167
    590 001173       592 001200       593 001201       594 001203       595 001210       596 001214       598 001216
    600 001224       602 001226       604 001227       606 001241       607 001261       608 001273       609 001315
    610 001325       612 001330       613 001356       615 001375       617 001423       622 001434       624 001444
    625 001455       626 001470       627 001500       629 001503       631 001512       633 001514       634 001516
    635 001525       638 001527       639 001542       641 001604       643 001633


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
