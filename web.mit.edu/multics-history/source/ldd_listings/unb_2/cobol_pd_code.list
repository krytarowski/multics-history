	COMPILATION LISTING OF SEGMENT cobol_pd_code
	Compiled by: Multics PL/I Compiler, Release 31b, of April 24, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 05/24/89  1019.4 mst Wed
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        6*        *                                                         *
        7*        * Copyright (c) 1972 by Massachusetts Institute of        *
        8*        * Technology and Honeywell Information Systems, Inc.      *
        9*        *                                                         *
       10*        *********************************************************** */
       11 
       12 
       13 
       14 
       15 /****^  HISTORY COMMENTS:
       16*  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
       17*     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
       18*     MCR8060 cobol_pd_code.pl1 Reformatted code to new Cobol standard.
       19*                                                   END HISTORY COMMENTS */
       20 
       21 
       22 /* Modified on 01/12/78 by FCH, [3.0-1], sort statement bug */
       23 /* Changes made since version 3.0 */
       24 
       25 /* format: style3 */
       26 cobol_pd_code:
       27      proc (env_ptr);
       28 
       29 initialize:
       30      entry (env_ptr);
       31 
       32 	p = env_ptr;
       33 	q = args.arg_6;
       34 
       35 	data.end_stmt_ptr = arg_1;
       36 	end_stmt_size = size (end_stmt_ptr -> end_stmt);
       37 	end_stmt_ptr -> end_stmt.size = 4 * end_stmt_size;
       38 	end_stmt_ptr -> end_stmt.type = 19;
       39 
       40 	data.eos_ptr = arg_2;
       41 	eos_size = size (eos_ptr -> end_stmt);
       42 	eos_ptr -> end_stmt.size = 4 * eos_size;
       43 	eos_ptr -> end_stmt.type = 19;
       44 
       45 	data.proc_ref_ptr = arg_3;
       46 	proc_ref_size = size (proc_ref_ptr -> proc_ref);
       47 	proc_ref_ptr -> proc_ref.size = 4 * proc_ref_size;
       48 	proc_ref_ptr -> proc_ref.type = 18;
       49 
       50 	data.arg_ptr = arg_4;
       51 	data.DATA_ptr = args.arg_6;
       52 
       53 	data.option_ptr = arg_5;
       54 
       55 	first_use = 0;
       56 
       57 	return;
       58 
       59 code:
       60      entry;
       61 
       62 	p = data.arg_ptr;
       63 	q = data.DATA_ptr;
       64 
       65 	if first_use = 0
       66 	then call code_alloc;
       67 
       68 	go to G (option_ptr -> mode);
       69 
       70 G (1):						/* sort_statement, giving file */
       71 	if ^first_sort
       72 	then call sort_alloc;
       73 
       74 	call sort_merge_giving (49);
       75 	return;
       76 
       77 G (2):						/* sort statement, using file */
       78 	call sort_using;
       79 	return;
       80 
       81 G (3):						/* sort procedure, p1 thru p2 */
       82 	call sort_proc (arg_1, arg_2, 49, 91);
       83 	return;
       84 
       85 G (4):						/* sort procedure, p1 thru p1 */
       86 	call sort_proc (arg_1, arg_1, 49, 91);
       87 	return;
       88 
       89 G (5):						/* alter */
       90 	call alter_proc;
       91 	return;
       92 
       93 G (6):						/* cancel */
       94 	call cancel_proc;
       95 	return;
       96 
       97 G (7):						/* initiate */
       98 	call initiate_proc;
       99 	return;
      100 
      101 G (8):						/* close eos */
      102 	call close_eos_proc;
      103 	return;
      104 
      105 G (9):						/* OPEN EOS */
      106 	call open_eos_proc;
      107 	return;
      108 
      109 G (10):						/* OPEN EOS */
      110 	call open_eos_proc;
      111 
      112 	end_stmt_ptr -> end_stmt.d = "01"b;
      113 
      114 	return;
      115 
      116 G (11):						/* OPEN EOS */
      117 	call open_eos_proc;
      118 
      119 	end_stmt_ptr -> end_stmt.d = "10"b;
      120 
      121 	return;
      122 
      123 G (12):						/* OPEN EXT EOS */
      124 	call open_ext_proc;
      125 
      126 	return;
      127 
      128 G (13):						/* SUSPEND */
      129 	call suspend_proc;
      130 
      131 	return;
      132 
      133 G (14):						/* TERMINATE */
      134 	call terminate_proc;
      135 
      136 	return;
      137 
      138 G (15):						/* THEN */
      139 	call then_proc;
      140 
      141 	return;
      142 
      143 G (16):						/* GO TO */
      144 	call go_proc;
      145 
      146 	return;
      147 
      148 G (17):						/* add */
      149 	end_stmt_ptr -> end_stmt.h = end_stmt_ptr -> end_stmt.h + 1;
      150 
      151 	call emit_code (arg_1);
      152 
      153 	return;
      154 
      155 G (18):						/* SORT EOS */
      156 	call sort_eos_proc;
      157 
      158 	return;
      159 
      160 G (19):						/* SEARCH EOS */
      161 	call search_eos_proc;
      162 
      163 	return;
      164 
      165 G (20):						/* SEARCH EOS4 */
      166 	if ^first_search
      167 	then call search_alloc;
      168 
      169 	end_stmt_ptr -> end_stmt.e = 4;
      170 
      171 	call emit_code (end_stmt_ptr);
      172 	return;
      173 
      174 G (21):						/* SEARCH EOS4 */
      175 	if ^first_search
      176 	then call search_alloc;
      177 
      178 	end_stmt_ptr -> end_stmt.b = "1"b;
      179 	end_stmt_ptr -> end_stmt.e = 4;
      180 
      181 	call emit_code (end_stmt_ptr);
      182 	return;
      183 
      184 G (22):						/* SEARCH EOS2 */
      185 	if ^first_search
      186 	then call search_alloc;
      187 
      188 	end_stmt_ptr -> end_stmt.c = "1"b;
      189 	end_stmt_ptr -> end_stmt.verb = 26;
      190 	end_stmt_ptr -> end_stmt.e = 2;
      191 
      192 	call emit_code (end_stmt_ptr);
      193 	return;
      194 
      195 G (23):						/* SEARCH EOS2 */
      196 	if ^first_search
      197 	then call search_alloc;
      198 
      199 	end_stmt_ptr -> end_stmt.verb = 26;
      200 	end_stmt_ptr -> end_stmt.e = 2;
      201 	end_stmt_ptr -> end_stmt.b = "1"b;
      202 
      203 	call emit_code (end_stmt_ptr);
      204 	return;
      205 
      206 G (24):						/* SEARCH EOS2 */
      207 	if ^first_search
      208 	then call search_alloc;
      209 
      210 	bit3 = end_stmt_ptr -> end_stmt.a;
      211 	call set_end (26);
      212 
      213 	end_stmt_ptr -> end_stmt.a = bit3;
      214 	end_stmt_ptr -> end_stmt.e = 2;
      215 
      216 	call emit_code (end_stmt_ptr);
      217 	return;
      218 
      219 G (25):						/* SEARCH EOS3 */
      220 	if ^first_search
      221 	then call search_alloc;
      222 
      223 	call set_end (26);
      224 
      225 	end_stmt_ptr -> end_stmt.a = "001"b;
      226 	end_stmt_ptr -> end_stmt.e = 3;
      227 
      228 	call emit_code (end_stmt_ptr);
      229 	return;
      230 
      231 G (26):						/* SEARCH EOS3 */
      232 	if ^first_search
      233 	then call search_alloc;
      234 
      235 	call set_end (26);
      236 
      237 	end_stmt_ptr -> end_stmt.b = "1"b;
      238 	end_stmt_ptr -> end_stmt.a = "001"b;
      239 	end_stmt_ptr -> end_stmt.e = 3;
      240 
      241 	call emit_code (end_stmt_ptr);
      242 	return;
      243 
      244 G (27):						/* SEARCH */
      245 	if ^first_search
      246 	then call search_alloc;
      247 
      248 	end_stmt_ptr -> end_stmt.verb = 26;
      249 	end_stmt_ptr -> end_stmt.e = 2;
      250 	end_stmt_ptr -> end_stmt.b = "1"b;
      251 	end_stmt_ptr -> end_stmt.c = "1"b;
      252 
      253 
      254 	call emit_code (end_stmt_ptr);
      255 	return;
      256 
      257 G (28):						/* merge_giving */
      258 	if ^first_merge
      259 	then call merge_alloc;
      260 
      261 	call sort_merge_giving (15);
      262 	return;
      263 
      264 G (29):						/* default device, accept */
      265 	if fixed_common.accept_device = 0
      266 	then end_stmt_ptr -> end_stmt.e = 10;		/* sysin */
      267 	else end_stmt_ptr -> end_stmt.e = 9;		/* console */
      268 
      269 	call emit_code (end_stmt_ptr);
      270 
      271 	return;
      272 
      273 G (30):						/* default device, display */
      274 	if fixed_common.display_device = 0
      275 	then end_stmt_ptr -> end_stmt.a = "001"b;	/* sysout */
      276 	else end_stmt_ptr -> end_stmt.a = "000"b;	/* console */
      277 
      278 	call emit_code (end_stmt_ptr);
      279 
      280 	return;
      281 
      282 G (31):						/* divide */
      283 	call emit_code (arg_1);
      284 
      285 	end_stmt_ptr -> end_stmt.h = end_stmt_ptr -> end_stmt.h + 1;
      286 
      287 	return;
      288 
      289 G (32):						/* compute */
      290 	call emit_code (arg_1);
      291 
      292 	return;
      293 
      294 G (33):
      295 	call emit_code (arg_1);
      296 
      297 	end_stmt_ptr -> end_stmt.e = end_stmt_ptr -> end_stmt.e + 1;
      298 
      299 	return;
      300 
      301 G (34):
      302 	if end_stmt_ptr -> end_stmt.a = "001"b
      303 	then end_stmt_ptr -> end_stmt.a = "011"b;
      304 	else end_stmt_ptr -> end_stmt.a = "100"b;
      305 
      306 	call emit_code (arg_1);
      307 
      308 	return;
      309 
      310 G (35):
      311 	proc_ref_ptr -> proc_ref.type = 18;
      312 
      313 	call emit_code (arg_1);
      314 
      315 	call emit_code (end_stmt_ptr);
      316 
      317 	return;
      318 
      319 G (36):
      320 	end_stmt_ptr -> end_stmt.a = "000"b;
      321 
      322 	call emit_code (arg_1);
      323 
      324 	return;
      325 
      326 G (37):
      327 	call emit_code (arg_1);
      328 
      329 	call emit_code (end_stmt_ptr);
      330 
      331 	return;
      332 
      333 G (38):
      334 	end_stmt_ptr -> end_stmt.b = "1"b;
      335 
      336 	call emit_code (arg_1);
      337 
      338 	call emit_code (end_stmt_ptr);
      339 
      340 	return;
      341 
      342 G (39):
      343 	call sort_proc (arg_1, arg_2, 49, 90);
      344 
      345 	return;
      346 
      347 G (40):
      348 	call sort_proc (arg_1, arg_1, 49, 90);
      349 
      350 	return;
      351 
      352 G (41):
      353 	if ^first_merge
      354 	then call merge_alloc;
      355 
      356 	if end_stmt_ptr -> end_stmt.d = "10"b
      357 	then do;
      358 		call set_end (15);
      359 		end_stmt_ptr -> end_stmt.d = "10"b;
      360 	     end;
      361 	else call set_end (15);
      362 
      363 	end_stmt_ptr -> end_stmt.e = arg_1 -> mode;
      364 	end_stmt_ptr -> end_stmt.i = arg_2 -> mode;
      365 
      366 	call emit_code (end_stmt_ptr);
      367 
      368 	call set_end (15);
      369 
      370 	end_stmt_ptr -> end_stmt.h = 91;
      371 
      372 	call emit_code (end_stmt_ptr);
      373 
      374 	return;
      375 
      376 G (42):
      377 	call emit_code (arg_1);
      378 
      379 	call emit_code (arg_2);
      380 
      381 	call set_end (15);
      382 	end_stmt_ptr -> end_stmt.h = 92;
      383 
      384 	call emit_code (end_stmt_ptr);
      385 
      386 	end_stmt_ptr -> end_stmt.h = 90;
      387 
      388 	call emit_code (end_stmt_ptr);
      389 
      390 	return;
      391 
      392 G (43):
      393 	call sort_proc (arg_1, arg_1, 15, 90);
      394 
      395 	return;
      396 
      397 G (44):
      398 	call sort_proc (arg_1, arg_2, 15, 90);
      399 
      400 	return;
      401 
      402 /* CODE GENERATION PROCEDURES */
      403 
      404 sort_merge_giving:
      405      proc (verb_num);
      406 
      407 declare	verb_num		fixed bin;
      408 
      409 	call emit_code (open_ptr);			/* OPEN */
      410 
      411 	call emit_code (arg_1);			/* FILENAME */
      412 
      413 	call set_end (19);				/* EOS */
      414 
      415 	end_stmt_ptr -> end_stmt.d = "01"b;
      416 
      417 	call emit_code (end_stmt_ptr);
      418 
      419 	proc_ref_ptr -> proc_ref.type = 30;		/* PROCDEF */
      420 	proc_ref_ptr -> proc_ref.proc_num = arg_2 -> spec_tag_counter - 1;
      421 
      422 	call emit_code (proc_ref_ptr);
      423 
      424 	call emit_code (return_ptr);			/* RETURN */
      425 
      426 	call emit_code (arg_3);			/* FILENAME */
      427 
      428 	call emit_code (arg_4);			/* RECORDNAME */
      429 
      430 	end_stmt_ptr -> end_stmt.verb = 25;		/* EOS */
      431 	end_stmt_ptr -> end_stmt.d = "00"b;
      432 	end_stmt_ptr -> end_stmt.b = "1"b;		/*	end_stmt_ptr -> end_stmt.c = "1"b;	*/
      433 						/*[3.0-1]*/
      434 
      435 	call emit_code (end_stmt_ptr);
      436 
      437 	eos_ptr -> end_stmt.verb = 13;		/* GOTOPROC */
      438 	eos_ptr -> end_stmt.e = 63;
      439 	eos_ptr -> end_stmt.h = arg_2 -> spec_tag_counter;
      440 
      441 	call emit_code (eos_ptr);
      442 
      443 	end_stmt_ptr -> end_stmt.verb = 3;		/* EOSATEND */
      444 	end_stmt_ptr -> end_stmt.b = "0"b;
      445 	end_stmt_ptr -> end_stmt.c = "0"b;
      446 
      447 	call emit_code (end_stmt_ptr);
      448 
      449 	call emit_code (write_ptr);			/* WRITE */
      450 
      451 	call emit_code (arg_4);			/* RECORDNAME */
      452 
      453 	end_stmt_ptr -> end_stmt.verb = 38;		/* EOS */
      454 
      455 	call emit_code (end_stmt_ptr);
      456 
      457 	eos_ptr -> end_stmt.h = arg_2 -> spec_tag_counter - 1;
      458 						/* GOTOPROC */
      459 	eos_ptr -> end_stmt.verb = 13;
      460 	eos_ptr -> end_stmt.e = 63;
      461 
      462 	call emit_code (eos_ptr);
      463 
      464 	proc_ref_ptr -> proc_ref.type = 30;		/* PROCDEF */
      465 	proc_ref_ptr -> proc_ref.proc_num = arg_2 -> spec_tag_counter;
      466 
      467 	call emit_code (proc_ref_ptr);
      468 
      469 	call emit_code (close_ptr);			/* CLOSE */
      470 
      471 	call emit_code (arg_1);			/* FILENAME */
      472 
      473 	end_stmt_ptr -> end_stmt.verb = 8;		/* EOS */
      474 
      475 	call emit_code (end_stmt_ptr);
      476 
      477 	end_stmt_ptr -> end_stmt.verb = verb_num;	/* EOS90 */
      478 	end_stmt_ptr -> end_stmt.h = 90;
      479 
      480 	call emit_code (end_stmt_ptr);
      481 
      482      end;
      483 
      484 sort_using:
      485      proc;
      486 
      487 	if ^first_sort
      488 	then call sort_alloc;
      489 
      490 	call emit_code (open_ptr);			/* OPEN */
      491 
      492 	call emit_code (arg_1);			/* FILENAME */
      493 
      494 	call set_end (19);
      495 
      496 	call emit_code (end_stmt_ptr);
      497 
      498 	proc_ref_ptr -> proc_ref.type = 30;		/* PROCDEF */
      499 	proc_ref_ptr -> proc_ref.proc_num = arg_2 -> spec_tag_counter - 1;
      500 
      501 	call emit_code (proc_ref_ptr);
      502 
      503 	call emit_code (read_ptr);			/* READ */
      504 
      505 	call emit_code (arg_1);			/* FILENAME */
      506 
      507 	end_stmt_ptr -> end_stmt.verb = 21;		/* EOS */
      508 	end_stmt_ptr -> end_stmt.a = "001"b;
      509 
      510 	call emit_code (end_stmt_ptr);
      511 
      512 	eos_ptr -> end_stmt.verb = 13;		/* GOTOPROC */
      513 	eos_ptr -> end_stmt.e = 63;
      514 	eos_ptr -> end_stmt.h = arg_2 -> spec_tag_counter;
      515 
      516 	call emit_code (eos_ptr);
      517 
      518 	end_stmt_ptr -> end_stmt.verb = 3;		/* EOSATEND */
      519 	end_stmt_ptr -> end_stmt.a = "000"b;
      520 
      521 	call emit_code (end_stmt_ptr);
      522 
      523 	call emit_code (release_ptr);			/* RELEASE */
      524 
      525 	call emit_code (arg_3);			/* SORTREC */
      526 
      527 	call emit_code (arg_4);			/* FILEREC */
      528 
      529 	end_stmt_ptr -> end_stmt.verb = 24;		/* EOS */
      530 	end_stmt_ptr -> end_stmt.b = "1"b;		/*	end_stmt_ptr -> end_stmt.c = "1"b;	*/
      531 						/*[3.0-1]*/
      532 
      533 	call emit_code (end_stmt_ptr);
      534 
      535 	eos_ptr -> end_stmt.verb = 13;		/* GOTOPROC */
      536 	eos_ptr -> end_stmt.e = 63;
      537 	eos_ptr -> end_stmt.h = arg_2 -> spec_tag_counter - 1;
      538 
      539 	call emit_code (eos_ptr);
      540 
      541 	proc_ref_ptr -> proc_ref.type = 30;		/* PROCDEF */
      542 	proc_ref_ptr -> proc_ref.proc_num = arg_2 -> spec_tag_counter;
      543 
      544 	call emit_code (proc_ref_ptr);
      545 
      546 	call emit_code (close_ptr);			/* CLOSE */
      547 
      548 	call emit_code (arg_1);			/* FILENAME */
      549 
      550 	end_stmt_ptr -> end_stmt.verb = 8;		/* EOS */
      551 	end_stmt_ptr -> end_stmt.b = "0"b;
      552 	end_stmt_ptr -> end_stmt.c = "0"b;
      553 
      554 	call emit_code (end_stmt_ptr);
      555 
      556      end;
      557 
      558 sort_proc:
      559      proc (ptr_1, ptr_2, val1, val2);
      560 
      561 declare	(ptr_1, ptr_2)	ptr;
      562 declare	(val1, val2)	fixed bin;
      563 
      564 	if ^first_sort
      565 	then call sort_alloc;
      566 
      567 	call emit_code (perform_ptr);			/* PERFORM */
      568 
      569 	call emit_code (ptr_1);			/* PROCNAME */
      570 
      571 	call emit_code (ptr_2);			/* PROCNAME */
      572 
      573 	call set_end (20);
      574 
      575 	end_stmt_ptr -> end_stmt.h = 1;
      576 
      577 	call emit_code (end_stmt_ptr);
      578 
      579 	end_stmt_ptr -> end_stmt.verb = val1;		/* EOS)  */
      580 	end_stmt_ptr -> end_stmt.h = val2;
      581 
      582 	call emit_code (end_stmt_ptr);
      583 
      584      end;
      585 
      586 alter_proc:
      587      proc;
      588 
      589 	if ^first_alter
      590 	then call alter_alloc;
      591 
      592 	addr (alter_ptr -> reserved_word.verb) -> bit36 = "1001001000000000001"b;
      593 
      594 	call emit_code (alter_ptr);
      595 
      596      end;
      597 
      598 cancel_proc:
      599      proc;
      600 
      601 	if ^first_cancel
      602 	then call cancel_alloc;
      603 
      604 	call emit_code (cancel_ptr);
      605 
      606      end;
      607 
      608 initiate_proc:
      609      proc;
      610 
      611 	if ^first_initiate
      612 	then call initiate_alloc;
      613 
      614 	call emit_code (initiate_ptr);
      615 
      616      end;
      617 
      618 close_eos_proc:
      619      proc;
      620 
      621 	if ^first_close
      622 	then call close_alloc;
      623 
      624 	end_stmt_ptr -> end_stmt.a = "001"b;		/* EOS */
      625 
      626 	call emit_code (end_stmt_ptr);
      627 
      628 	alter_ptr -> reserved_word.key = 8;
      629 	addr (alter_ptr -> reserved_word.verb) -> bit36 = "10010010000000000011"b;
      630 
      631 	call set_end (0);
      632 
      633 	addr (end_stmt_ptr -> end_stmt.a) -> bit18 = "0"b;
      634 
      635 	end_stmt_ptr -> end_stmt.verb = alter_ptr -> reserved_word.key;
      636 
      637 	call emit_code (alter_ptr);
      638 
      639      end;
      640 
      641 set_end:
      642      proc (num);
      643 
      644 declare	num		fixed bin;
      645 
      646 	end_stmt_ptr -> end_stmt.verb = num;
      647 	end_stmt_ptr -> end_stmt.e = 0;
      648 	end_stmt_ptr -> end_stmt.h = 0;
      649 	end_stmt_ptr -> end_stmt.i = 0;
      650 	end_stmt_ptr -> end_stmt.j = 0;
      651 
      652 	addr (end_stmt_ptr -> end_stmt.a) -> bit18 = "0"b;
      653 
      654      end;
      655 
      656 suspend_proc:
      657      proc;
      658 
      659 	if ^first_suspend
      660 	then call suspend_alloc;
      661 
      662 	call emit_code (eos_ptr);
      663 
      664 	call emit_code (suspend_ptr);
      665 
      666 	call set_end (35);
      667 
      668      end;
      669 
      670 terminate_proc:
      671      proc;
      672 
      673 	if ^first_terminate
      674 	then call terminate_alloc;
      675 
      676 	call emit_code (terminate_ptr);
      677 
      678      end;
      679 
      680 then_proc:
      681      proc;
      682 
      683 	if ^first_then
      684 	then call then_alloc;
      685 
      686 	call emit_code (then_ptr);
      687 
      688      end;
      689 
      690 go_proc:
      691      proc;
      692 
      693 	if ^first_go
      694 	then call go_alloc;
      695 
      696 	call set_end (go_ptr -> reserved_word.key);
      697 
      698 	end_stmt_ptr -> end_stmt.e = 2;
      699 
      700 	call emit_code (go_ptr);
      701 
      702 	call emit_code (arg_1);
      703 
      704 	call emit_code (arg_2);
      705 
      706      end;
      707 
      708 open_eos_proc:
      709      proc;
      710 
      711 	if ^first_open
      712 	then call open_alloc;
      713 
      714 	end_stmt_ptr -> end_stmt.a = "001"b;
      715 
      716 	call emit_code (end_stmt_ptr);
      717 
      718 	call OPEN;
      719 
      720 	call set_end (19);
      721 
      722      end;
      723 
      724 OPEN:
      725      proc;
      726 
      727 	addr (open_ptr -> reserved_word.verb) -> bit36 = "10010010000000000011"b;
      728 
      729 	call emit_code (open_ptr);
      730 
      731      end;
      732 
      733 open_ext_proc:
      734      proc;
      735 
      736 	if ^first_open
      737 	then call open_alloc;
      738 
      739 	end_stmt_ptr -> end_stmt.a = "001"b;
      740 
      741 	call emit_code (end_stmt_ptr);
      742 
      743 	call OPEN;
      744 
      745 	call set_end (19);
      746 
      747 	end_stmt_ptr -> end_stmt.d = "11"b;
      748 
      749      end;
      750 
      751 sort_eos_proc:
      752      proc;
      753 
      754 	if ^first_sort
      755 	then call sort_alloc;
      756 
      757 	call set_end (49);
      758 
      759 	end_stmt_ptr -> end_stmt.h = 91;
      760 
      761 	call emit_code (end_stmt_ptr);
      762 
      763      end;
      764 
      765 search_eos_proc:
      766      proc;
      767 
      768 	if ^first_search
      769 	then call search_alloc;
      770 
      771 	call set_end (26);
      772 
      773 	end_stmt_ptr -> end_stmt.e = 3;
      774 
      775 	call emit_code (end_stmt_ptr);
      776 
      777      end;
      778 
      779 /* EMIT TOKEN */
      780 
      781 emit_code:
      782      proc (code_loc);
      783 
      784 declare	code_loc		ptr;
      785 
      786 declare	st		bit (32);
      787 
      788 declare	1 record		based (code_loc),
      789 	  2 code_size	fixed bin;
      790 
      791 	call cobol_swf_put (cobol_pdofp, st, code_loc, code_size);
      792 
      793      end;
      794 
      795 
      796 /* FORM RESERVED WORD TOKEN */
      797 
      798 
      799 res_word:
      800      proc (key, class);
      801 
      802 declare	key		fixed bin,
      803 	class		bit (36);
      804 
      805 	call alloc (reserved_word_size);
      806 
      807 	area_ptr -> reserved_word.size = reserved_byte_size;
      808 	area_ptr -> reserved_word.type = 1;
      809 	area_ptr -> reserved_word.key = key;
      810 	addr (area_ptr -> reserved_word.verb) -> bit36 = class;
      811 
      812      end;
      813 
      814 /* ALLOCATE SPACE IN CODE AREA */
      815 
      816 
      817 alloc:
      818      proc (size);
      819 
      820 declare	size		fixed bin;
      821 declare	(i, j)		fixed bin;
      822 
      823 	area_ptr = addr (code_area (code_area_loc + 1));
      824 	j = code_area_loc;
      825 
      826 	do i = 1 by 1 to size;
      827 
      828 	     code_area (j + i) = 0;
      829 
      830 	end;
      831 
      832 	code_area_loc = code_area_loc + size;
      833 
      834      end;
      835 
      836 /* INITIALIZATION PROCEDURES */
      837 
      838 
      839 code_alloc:
      840      proc;
      841 
      842 declare	i		fixed bin;
      843 
      844 	first_use = 1;
      845 
      846 	ind_ptr = addr (data.indicators);
      847 	data.indicators = "0"b;
      848 
      849 	code_area_loc = 0;
      850 
      851 	do i = 1 by 1 to 100;
      852 
      853 	     DATA.ptr (i) = null ();
      854 
      855 	end;
      856 
      857 	ptr_area_ptr = addr (DATA.ptr (1));
      858 
      859 	reserved_word_size = size (ptr_area_ptr -> reserved_word);
      860 
      861 	reserved_byte_size = reserved_word_size * 4;
      862 
      863      end;
      864 
      865 alloc_test:
      866      proc (mode);
      867 
      868 declare	mode		fixed bin;
      869 
      870 	go to A (mode);
      871 
      872 A (1):
      873 	return;
      874 
      875 A (2):
      876 	if open_ptr = null ()
      877 	then do;
      878 		call res_word (19, "1"b);
      879 		open_ptr = area_ptr;
      880 	     end;
      881 
      882 	return;
      883 
      884 
      885 A (3):
      886 	if close_ptr = null ()
      887 	then do;
      888 		call res_word (8, "1"b);
      889 		close_ptr = area_ptr;
      890 	     end;
      891 
      892 	return;
      893 
      894 
      895 A (4):
      896 	if return_ptr = null ()
      897 	then do;
      898 		call res_word (25, "1"b);
      899 		return_ptr = area_ptr;
      900 	     end;
      901 
      902 	return;
      903 
      904 
      905 A (5):
      906 	if write_ptr = null ()
      907 	then do;
      908 		call res_word (38, "1"b);
      909 		write_ptr = area_ptr;
      910 	     end;
      911 
      912 	return;
      913 
      914 
      915 A (6):
      916 	if read_ptr = null ()
      917 	then do;
      918 		call res_word (21, "1"b);
      919 		read_ptr = area_ptr;
      920 	     end;
      921 
      922 	return;
      923 
      924 
      925 A (7):
      926 	if release_ptr = null ()
      927 	then do;
      928 		call res_word (24, "1"b);
      929 		release_ptr = area_ptr;
      930 	     end;
      931 
      932 	return;
      933 
      934 A (8):
      935 	return;
      936 
      937 A (9):
      938 	return;
      939 
      940 A (10):
      941 	if perform_ptr = null ()
      942 	then do;
      943 		call res_word (20, "1"b);
      944 		perform_ptr = area_ptr;
      945 	     end;
      946 
      947 A (11):
      948 	if alter_ptr = null ()
      949 	then do;
      950 		call res_word (4, "0"b);
      951 		alter_ptr = area_ptr;
      952 	     end;
      953 
      954 	return;
      955 
      956 A (12):
      957 	if cancel_ptr = null ()
      958 	then do;
      959 		call res_word (7, "10010010000000000011"b);
      960 		cancel_ptr = area_ptr;
      961 	     end;
      962 
      963 	return;
      964 
      965 A (13):
      966 	if initiate_ptr = null ()
      967 	then do;
      968 		call res_word (16, "0"b);
      969 		initiate_ptr = area_ptr;
      970 	     end;
      971 
      972 	return;
      973 
      974 A (14):
      975 	if suspend_ptr = null ()
      976 	then do;
      977 		call res_word (35, "0"b);
      978 		suspend_ptr = area_ptr;
      979 	     end;
      980 
      981 	return;
      982 
      983 A (15):
      984 	if terminate_ptr = null ()
      985 	then do;
      986 		call res_word (36, "0"b);
      987 		terminate_ptr = area_ptr;
      988 	     end;
      989 
      990 	return;
      991 
      992      end;
      993 
      994 A (16):
      995 	if then_ptr = null ()
      996 	then do;
      997 		call res_word (194, "0"b);
      998 		then_ptr = area_ptr;
      999 	     end;
     1000 
     1001 	return;
     1002 
     1003 A (17):
     1004 	if go_ptr = null ()
     1005 	then do;
     1006 		call res_word (14, "01001001000000000001"b);
     1007 		go_ptr = area_ptr;
     1008 	     end;
     1009 
     1010 	return;
     1011 
     1012 sort_alloc:
     1013      proc;
     1014 
     1015 	call sort_merge_alloc;
     1016 
     1017 	first_sort = "1"b;
     1018 
     1019      end;
     1020 
     1021 sort_merge_alloc:
     1022      proc;
     1023 
     1024 
     1025 	call alloc_test (2);
     1026 	call alloc_test (3);
     1027 	call alloc_test (4);
     1028 	call alloc_test (5);
     1029 	call alloc_test (6);
     1030 	call alloc_test (7);
     1031 	call alloc_test (10);
     1032 
     1033 
     1034      end;
     1035 
     1036 merge_alloc:
     1037      proc;
     1038 
     1039 	call sort_merge_alloc;
     1040 
     1041 	first_merge = "1"b;
     1042 
     1043      end;
     1044 
     1045 alter_alloc:
     1046      proc;
     1047 
     1048 	call alloc_test (11);
     1049 	first_alter = "1"b;
     1050 
     1051      end;
     1052 
     1053 cancel_alloc:
     1054      proc;
     1055 
     1056 	call alloc_test (12);
     1057 	first_cancel = "1"b;
     1058 
     1059      end;
     1060 
     1061 initiate_alloc:
     1062      proc;
     1063 
     1064 	call alloc_test (13);
     1065 	first_initiate = "1"b;
     1066 
     1067      end;
     1068 
     1069 close_alloc:
     1070      proc;
     1071 
     1072 	call alloc_test (11);
     1073 	first_close = "1"b;
     1074 
     1075      end;
     1076 
     1077 open_alloc:
     1078      proc;
     1079 
     1080 	call alloc_test (2);
     1081 	first_open = "1"b;
     1082 
     1083      end;
     1084 
     1085 suspend_alloc:
     1086      proc;
     1087 
     1088 	call alloc_test (14);
     1089 	first_suspend = "1"b;
     1090 
     1091      end;
     1092 
     1093 terminate_alloc:
     1094      proc;
     1095 
     1096 	call alloc_test (15);
     1097 	first_terminate = "1"b;
     1098 
     1099      end;
     1100 
     1101 then_alloc:
     1102      proc;
     1103 
     1104 	call alloc_test (16);
     1105 	first_then = "1"b;
     1106 
     1107      end;
     1108 
     1109 go_alloc:
     1110      proc;
     1111 
     1112 	call alloc_test (17);
     1113 	first_go = "1"b;
     1114 
     1115      end;
     1116 
     1117 search_alloc:
     1118      proc;
     1119 
     1120 	first_search = "1"b;
     1121 
     1122      end;
     1123 
     1124 declare	(addr, size, null)	builtin;
     1125 
     1126 declare	(p, q, env_ptr)	ptr;
     1127 
     1128 declare	(proc_ref_size, end_stmt_size, eos_size)
     1129 			fixed bin;
     1130 
     1131 declare	cobol_swf_put	entry (ptr, bit (32), ptr, fixed bin);
     1132 
     1133 
     1134 declare	1 data		static internal,
     1135 	  2 first_use	fixed bin,
     1136 	  2 indicators	bit (72),
     1137 	  2 reserved_word_size
     1138 			fixed bin,
     1139 	  2 reserved_byte_size
     1140 			fixed bin,
     1141 	  2 area_ptr	ptr,
     1142 	  2 ptr_area_ptr	ptr,
     1143 	  2 end_stmt_ptr	ptr,
     1144 	  2 option_ptr	ptr,
     1145 	  2 arg_ptr	ptr,
     1146 	  2 eos_ptr	ptr,
     1147 	  2 proc_ref_ptr	ptr,
     1148 	  2 ind_ptr	ptr,
     1149 	  2 DATA_ptr	ptr,
     1150 	  2 code_area_loc	fixed bin;
     1151 
     1152 declare	bit3		bit (3);
     1153 
     1154 declare	1 args		based (p),
     1155 	  2 arg_1		ptr,
     1156 	  2 arg_2		ptr,
     1157 	  2 arg_3		ptr,
     1158 	  2 arg_4		ptr,
     1159 	  2 arg_5		ptr,
     1160 	  2 arg_6		ptr;
     1161 
     1162 
     1163 declare	1 DATA		based (q),
     1164 	  2 ptr		(100) ptr,
     1165 	  2 code_area	(5000) fixed bin (35);
     1166 
     1167 declare	1 ptr_area	based (ptr_area_ptr),
     1168 	  2 open_ptr	ptr,
     1169 	  2 close_ptr	ptr,
     1170 	  2 return_ptr	ptr,
     1171 	  2 write_ptr	ptr,
     1172 	  2 read_ptr	ptr,
     1173 	  2 release_ptr	ptr,
     1174 	  2 perform_ptr	ptr,
     1175 	  2 alter_ptr	ptr,
     1176 	  2 cancel_ptr	ptr,
     1177 	  2 initiate_ptr	ptr,
     1178 	  2 suspend_ptr	ptr,
     1179 	  2 terminate_ptr	ptr,
     1180 	  2 then_ptr	ptr,
     1181 	  2 go_ptr	ptr;
     1182 
     1183 declare	1 indicators	based (ind_ptr),
     1184 	  2 first_sort	bit (1),
     1185 	  2 first_alter	bit (1),
     1186 	  2 first_close	bit (1),
     1187 	  2 first_open	bit (1),
     1188 	  2 first_suspend	bit (1),
     1189 	  2 first_terminate bit (1),
     1190 	  2 first_then	bit (1),
     1191 	  2 first_go	bit (1),
     1192 	  2 first_search	bit (1),
     1193 	  2 first_initiate	bit (1),
     1194 	  2 first_cancel	bit (1),
     1195 	  2 first_merge	bit (1);
     1196 
     1197 declare	bit18		bit (18) based;
     1198 declare	spec_tag_counter	fixed bin based;
     1199 declare	bit36		bit (36) based;
     1200 declare	mode		fixed bin based;
     1201 
     1202 
     1203 declare	1 reserved_word	based,
  1     1 
  1     2 /* begin include file ... cobol_TYPE1.incl.pl1 */
  1     3 /* Last modified on 11/17/76 by ORN */
  1     4 /* Last modified on 12/28/76 by FCH */
  1     5 /* Last modified on 12/16/80 by FCH */
  1     6 
  1     7 		/* header */
  1     8 		2 size fixed bin,
  1     9 		2 line fixed bin,
  1    10 		2 column fixed bin,
  1    11 		2 type fixed bin,
  1    12 		/* body */
  1    13 		2 key fixed bin,
  1    14 		/* procedure division class bits */
  1    15 		2 verb bit (1),
  1    16 		2 arith_op bit (1),
  1    17 		2 figcon bit (1),
  1    18 		2 terminator bit (1),
  1    19 		2 end_dec bit (1),
  1    20 		2 rel_op bit (1),
  1    21 		2 imper_verb bit (1),
  1    22 		2 end_cobol bit (1),
  1    23 		/* data division class bits */
  1    24 		2 section_header bit (1),
  1    25 		2 fs_ind bit (1),
  1    26 		2 fd_clause bit (1),
  1    27 		2 dd_clause bit (1),
  1    28 		2 cd_input bit (1),
  1    29 		2 cd_output bit (1),
  1    30 		2 cset_name bit (1),
  1    31 		2 ss_division bit (1),
  1    32 		2 repl_jump_ind bit (4),
  1    33 		2 ided_recovery bit (1),
  1    34 		2 report_writer bit (5),
  1    35 		2 ss_desc_entry bit (1),
  1    36 		2 jump_index fixed bin,
  1    37 		2 length fixed bin,
  1    38 		2 name char(0 refer(reserved_word.length));
  1    39 
  1    40 
  1    41 
  1    42 /* end include file ... cobol_TYPE1.incl.pl1 */
  1    43 
     1204 
     1205 
     1206 declare	1 proc_ref	based,
  2     1 
  2     2 /* begin include file ... cobol_TYPE18.incl.pl1 */
  2     3 /* Last modified on 11/7/76 by ORN */
  2     4 
  2     5 		/* header */
  2     6 		2 size fixed bin,
  2     7 		2 line fixed bin,
  2     8 		2 column fixed bin,
  2     9 		2 type fixed bin,
  2    10 		/* body */
  2    11 		2 string_ptr ptr,
  2    12 		2 prev_rec ptr,
  2    13 		2 searched bit (1),
  2    14 		2 duplicate bit (1),
  2    15 		2 filler1 bit (1),
  2    16 		2 debug_ind bit (1),
  2    17 		2 section_name bit (1),
  2    18 		2 declarative_proc bit (1),
  2    19 		2 filler2 bit (1),
  2    20 		2 alterable bit (1),
  2    21 		2 priority char (2),
  2    22 		2 sort_range bit (1),
  2    23 		2 input_range bit (1),
  2    24 		2 output_range bit (1),
  2    25 		2 merge_range bit(1),
  2    26 		2 filler3 bit (5),
  2    27 		2 section_num fixed bin,
  2    28 		2 proc_num fixed bin,
  2    29 		2 def_line fixed bin,
  2    30 		2 name_size fixed bin,
  2    31 		2 name char (30);
  2    32 
  2    33 /* end include file ... cobol_TYPE18.incl.pl1 */
  2    34 
     1207 
     1208 
     1209 declare	1 end_stmt	based,
  3     1 
  3     2 /* begin include file ... cobol_TYPE19.incl.pl1 */
  3     3 /* Last modified on 11/17/76 by ORN */
  3     4 
  3     5 		/* header */
  3     6 		2 size fixed bin,
  3     7 		2 line fixed bin,
  3     8 		2 column fixed bin,
  3     9 		2 type fixed bin,
  3    10 		/* body */
  3    11 		2 verb fixed bin,
  3    12 		2 e fixed bin,
  3    13 		2 h fixed bin,
  3    14 		2 i fixed bin,
  3    15 		2 j fixed bin,
  3    16 		2 a bit (3),
  3    17 		2 b bit (1),
  3    18 		2 c bit (1),
  3    19 		2 d bit (2),
  3    20 		2 f bit (2),
  3    21 		2 g bit (2),
  3    22 		2 k bit (5),
  3    23 		2 always_an bit (1);
  3    24 
  3    25 /* end include file ... cobol_TYPE19.incl.pl1 */
  3    26 
     1210 
     1211 
  4     1 
  4     2 /* BEGIN INCLUDE FILE ... cobol_ext_.incl.pl1 */
  4     3 /* Last modified on 06/17/76 by ORN */
  4     4 /* Last modified on 12/28/76 by FCH */
  4     5 /* Last modified on 12/01/80 by FCH */
  4     6 
  4     7 /*    <<<   SHARED EXTERNALS INCLUDE FILE   >>>    */
  4     8 
  4     9 
  4    10 dcl     cobol_ext_$cobol_afp ptr ext;
  4    11 dcl     cobol_afp ptr defined (  cobol_ext_$cobol_afp);
  4    12 dcl     cobol_ext_$cobol_analin_fileno ptr ext;
  4    13 dcl     cobol_analin_fileno ptr defined (  cobol_ext_$cobol_analin_fileno);
  4    14 dcl     cobol_ext_$report_first_token ptr ext;
  4    15 dcl     report_first_token ptr defined( cobol_ext_$report_first_token);
  4    16 dcl     cobol_ext_$report_last_token ptr ext;
  4    17 dcl     report_last_token ptr defined ( cobol_ext_$report_last_token);
  4    18 dcl     cobol_ext_$cobol_eltp ptr ext;
  4    19 dcl     cobol_eltp ptr defined (  cobol_ext_$cobol_eltp);
  4    20 dcl     cobol_ext_$cobol_cmfp ptr ext;
  4    21 dcl     cobol_cmfp ptr defined (  cobol_ext_$cobol_cmfp);
  4    22 dcl     cobol_ext_$cobol_com_fileno ptr ext;
  4    23 dcl     cobol_com_fileno ptr defined (  cobol_ext_$cobol_com_fileno);
  4    24 dcl     cobol_ext_$cobol_com_ptr ptr ext;
  4    25 dcl     cobol_com_ptr ptr defined (  cobol_ext_$cobol_com_ptr);
  4    26 dcl     cobol_ext_$cobol_dfp ptr ext;
  4    27 dcl     cobol_dfp ptr defined (  cobol_ext_$cobol_dfp);
  4    28 dcl     cobol_ext_$cobol_hfp ptr ext;
  4    29 dcl     cobol_hfp ptr defined (  cobol_ext_$cobol_hfp);
  4    30 dcl     cobol_ext_$cobol_m1fp ptr ext;
  4    31 dcl     cobol_m1fp ptr defined (  cobol_ext_$cobol_m1fp);
  4    32 dcl     cobol_ext_$cobol_m2fp ptr ext;
  4    33 dcl     cobol_m2fp ptr defined (  cobol_ext_$cobol_m2fp);
  4    34 dcl     cobol_ext_$cobol_min1_fileno ptr ext;
  4    35 dcl     cobol_min1_fileno ptr defined (  cobol_ext_$cobol_min1_fileno);
  4    36 dcl     cobol_ext_$cobol_min2_fileno_ptr ptr ext;
  4    37 dcl     cobol_min2_fileno_ptr ptr defined (  cobol_ext_$cobol_min2_fileno_ptr);
  4    38 dcl     cobol_ext_$cobol_name_fileno ptr ext;
  4    39 dcl     cobol_name_fileno ptr defined (  cobol_ext_$cobol_name_fileno);
  4    40 dcl     cobol_ext_$cobol_name_fileno_ptr ptr ext;
  4    41 dcl     cobol_name_fileno_ptr ptr defined (  cobol_ext_$cobol_name_fileno_ptr);
  4    42 dcl     cobol_ext_$cobol_ntfp ptr ext;
  4    43 dcl     cobol_ntfp ptr defined (  cobol_ext_$cobol_ntfp);
  4    44 dcl     cobol_ext_$cobol_pdofp ptr ext;
  4    45 dcl     cobol_pdofp ptr defined (  cobol_ext_$cobol_pdofp);
  4    46 dcl     cobol_ext_$cobol_pfp ptr ext;
  4    47 dcl     cobol_pfp ptr defined (  cobol_ext_$cobol_pfp);
  4    48 dcl     cobol_ext_$cobol_rm2fp ptr ext;
  4    49 dcl     cobol_rm2fp ptr defined (  cobol_ext_$cobol_rm2fp);
  4    50 dcl     cobol_ext_$cobol_rmin2fp ptr ext;
  4    51 dcl     cobol_rmin2fp ptr defined (  cobol_ext_$cobol_rmin2fp);
  4    52 dcl     cobol_ext_$cobol_curr_in ptr ext;
  4    53 dcl     cobol_curr_in ptr defined (  cobol_ext_$cobol_curr_in);
  4    54 dcl     cobol_ext_$cobol_curr_out ptr ext;
  4    55 dcl     cobol_curr_out ptr defined (  cobol_ext_$cobol_curr_out);
  4    56 dcl     cobol_ext_$cobol_sfp ptr ext;
  4    57 dcl     cobol_sfp ptr defined (  cobol_ext_$cobol_sfp);
  4    58 dcl     cobol_ext_$cobol_w1p ptr ext;
  4    59 dcl     cobol_w1p ptr defined (  cobol_ext_$cobol_w1p);
  4    60 dcl     cobol_ext_$cobol_w2p ptr ext;
  4    61 dcl     cobol_w2p ptr defined (  cobol_ext_$cobol_w2p);
  4    62 dcl     cobol_ext_$cobol_w3p ptr ext;
  4    63 dcl     cobol_w3p ptr defined (  cobol_ext_$cobol_w3p);
  4    64 dcl     cobol_ext_$cobol_w5p ptr ext;
  4    65 dcl     cobol_w5p ptr defined (  cobol_ext_$cobol_w5p);
  4    66 dcl     cobol_ext_$cobol_w6p ptr ext;
  4    67 dcl     cobol_w6p ptr defined (  cobol_ext_$cobol_w6p);
  4    68 dcl     cobol_ext_$cobol_w7p ptr ext;
  4    69 dcl     cobol_w7p ptr defined (  cobol_ext_$cobol_w7p);
  4    70 dcl     cobol_ext_$cobol_x3fp ptr ext;
  4    71 dcl     cobol_x3fp ptr defined (  cobol_ext_$cobol_x3fp);
  4    72 dcl	cobol_ext_$cobol_rwdd ptr ext;
  4    73 dcl	cobol_rwdd ptr defined(cobol_ext_$cobol_rwdd);
  4    74 dcl	cobol_ext_$cobol_rwpd ptr ext;
  4    75 dcl	cobol_rwpd ptr defined(cobol_ext_$cobol_rwpd);
  4    76 
  4    77 
  4    78 dcl     cobol_ext_$cobol_fileno1 fixed bin(24)ext;
  4    79 dcl     cobol_fileno1 fixed bin(24)defined (  cobol_ext_$cobol_fileno1);				
  4    80 dcl     cobol_ext_$cobol_options_len fixed bin(24)ext;
  4    81 dcl     cobol_options_len fixed bin(24)defined (  cobol_ext_$cobol_options_len);
  4    82 dcl     cobol_ext_$cobol_pdout_fileno fixed bin(24)ext;
  4    83 dcl     cobol_pdout_fileno fixed bin(24)defined (  cobol_ext_$cobol_pdout_fileno);			
  4    84 dcl     cobol_ext_$cobol_print_fileno fixed bin(24)ext;
  4    85 dcl     cobol_print_fileno fixed bin(24)defined (  cobol_ext_$cobol_print_fileno);			
  4    86 dcl     cobol_ext_$cobol_rmin2_fileno fixed bin(24)ext;
  4    87 dcl     cobol_rmin2_fileno fixed bin(24)defined (  cobol_ext_$cobol_rmin2_fileno);
  4    88 dcl     cobol_ext_$cobol_x1_fileno fixed bin(24)ext;
  4    89 dcl     cobol_x1_fileno fixed bin(24)defined (  cobol_ext_$cobol_x1_fileno);				
  4    90 dcl     cobol_ext_$cobol_x2_fileno fixed bin(24)ext;
  4    91 dcl     cobol_x2_fileno fixed bin(24)defined (  cobol_ext_$cobol_x2_fileno);
  4    92 dcl     cobol_ext_$cobol_x3_fileno fixed bin(24)ext;
  4    93 dcl     cobol_x3_fileno fixed bin(24)defined (  cobol_ext_$cobol_x3_fileno);
  4    94 
  4    95 dcl     cobol_ext_$cobol_lpr char (5) ext;
  4    96 dcl     cobol_lpr char (5) defined (  cobol_ext_$cobol_lpr);				/* -2- */
  4    97 dcl     cobol_ext_$cobol_options char (120) ext;
  4    98 dcl     cobol_options char (120) defined (  cobol_ext_$cobol_options);          			/* -30- */
  4    99 
  4   100 dcl     cobol_ext_$cobol_xlast8 bit (1) ext;
  4   101 dcl     cobol_xlast8 bit (1) defined (  cobol_ext_$cobol_xlast8);				/* -1- */
  4   102 dcl     cobol_ext_$report_exists bit (1) ext;
  4   103 dcl     report_exists bit (1) defined (  cobol_ext_$report_exists);
  4   104 
  4   105 
  4   106 /*    <<<   END OF SHARED EXTERNALS INCLUDE FILE   >>>    */
  4   107 /* END INCLUDE FILE ... cobol_ext_.incl.pl1 */
  4   108 
     1212 
     1213 
  5     1 
  5     2 /* BEGIN INCLUDE FILE ...   cobol_fixed_common.incl.pl1 */
  5     3 /* Modified on 10/27/82 by FCH, [5.1-1], cobol_cln added to save last line num, BUG543(phx13643) */
  5     4 /* Modified on 07/31/80 by FCH, [4.3-1], use_reporting field added for Report Writer */
  5     5 /* Modified on 03/30/79 by FCH, [4.1-1], -card option added */
  5     6 /* Modified on 03/30/79 by FCH, [4.0-2], -svNM option added */
  5     7 /* Modified on 03/02/79 by FCH, [4.0-1], -levNM option added */
  5     8 /* Modified by RAL on 10/13/78, [4.0-0], Added option exp from fil2. */
  5     9 /* Modified by BC on 06/20/77, descriptor added.	*/
  5    10 /* Modified by BC on 06/02/77, init_cd_seg, init_cd_offset added.	*/
  5    11 /* Modified by BC  on 1/21/77, options.profile added.	*/
  5    12 /* Modified by FCH on 7/6/76, sysin_fno & sysout_fno deleted, accept_device & display_device added */
  5    13 /* Modified by FCH on 5/20/77, comp_level added */
  5    14 
  5    15 
  5    16 /*     THE SIZE OF THIS STRUCTURE IN BYTES, (EXCLUDING VARIABLE
  5    17*   LENGTH ENTITIES), FOR EACH HARDWARE IMPLEMENTATION IS:
  5    18*
  5    19*   HARDWARE	|	SIZE (BYTES)
  5    20*   ---------------------------------
  5    21*   645/6180	|	464
  5    22*   P7		|	396
  5    23*   ---------------------------------
  5    24*   */
  5    25 
  5    26 dcl 	1 fixed_common based (  cobol_com_ptr),
  5    27     		2 prog_name char (30),
  5    28    		2 compiler_rev_no char (25),
  5    29     		2 phase_name char (6),
  5    30     		2 currency char (1),
  5    31     		2 fatal_no fixed bin,
  5    32     		2 warn_no fixed bin,
  5    33     		2 proc_counter fixed bin,
  5    34     		2 spec_tag_counter fixed bin,
  5    35     		2 file_count fixed bin,
  5    36     		2 filedescr_offsets (20) char (5),
  5    37     		2 perf_alter_info char (5),
  5    38     		2 another_perform_info char (5),
  5    39     		2 sort_in_info char (5),
  5    40     		2 odo_info char (5),
  5    41     		2 size_seg fixed bin,
  5    42     		2 size_offset fixed bin(24),
  5    43     		2 size_perform_info char (5),
  5    44     		2 rename_info char (5),
  5    45     		2 report_names char (5),
  5    46     		2 rw_buf_seg fixed bin,
  5    47     		2 rw_buf_offset fixed bin(24),
  5    48     		2 rw_buf_length fixed bin(24),
  5    49     		2 file_keys char (5),
  5    50     		2 search_keys char (5),
  5    51     		2 dd_seg_size fixed bin(24),
  5    52     		2 pd_seg_size fixed bin(24),
  5    53     		2 seg_limit fixed bin ,
  5    54     		2 number_of_dd_segs fixed bin,
  5    55     		2 seg_info char (5),
  5    56     		2 number_of_ls_pointers fixed bin,
  5    57     		2 link_sec_seg fixed bin,
  5    58     		2 link_sec_offset fixed bin(24),
  5    59     		2 sra_clauses fixed bin,
  5    60     		2 fix_up_info char (5),
  5    61     		2 linage_info char (5),
  5    62     		2 first_dd_item char (5),
  5    63     		2 sort_out_info char (5),
  5    64     		2 db_info char (5),
  5    65     		2 realm_info char (5),
  5    66     		2 rc_realm_info char (5),
  5    67     		2 last_file_key char (5),
  5    68     		2 prog_coll_seq fixed bin,
  5    69 		2 init_cd_seg fixed bin,
  5    70 		2 init_cd_offset fixed bin(24),
  5    71     		2 input_error_exit fixed bin,
  5    72    		2 output_error_exit fixed bin,
  5    73     		2 i_o_error_exit fixed bin,
  5    74     		2 extend_error_exit fixed bin,
  5    75     		2 dummy15 fixed bin,
  5    76     		2 options,
  5    77       			3 cu bit (1),
  5    78       			3 st bit (1),
  5    79       			3 wn bit (1),
  5    80       			3 obs bit (1),
  5    81       			3 dm bit (1),
  5    82       			3 xrl bit (1),
  5    83       			3 xrn bit (1),
  5    84       			3 src bit (1),
  5    85       			3 obj bit (1),
  5    86       			3 exs bit (1),
  5    87       			3 sck bit (1),
  5    88       			3 rno bit (1),
  5    89 			3 u_l bit (1),
  5    90 			3 cnv bit (1),
  5    91 			3 cos bit (1),
  5    92 			3 fmt bit (1),
  5    93 			3 profile bit(1),
  5    94 			3 nw bit (1),
  5    95 			3 exp bit (1),		/* [4.0-0] */
  5    96 			3 card bit (1),  /*[4.1-1]*/
  5    97 			3 fil2 bit (5),
  5    98 			3 m_map bit (1),
  5    99 			3 m_bf bit (1),
  5   100 			3 m_fat bit (1),
  5   101 			3 m_wn bit (1),
  5   102 			3 m_obs bit(1),
  5   103 			3 pd bit(1),
  5   104       			3 oc bit(1),
  5   105     		2 supervisor bit (1),
  5   106     		2 dec_comma bit (1),
  5   107     		2 init_cd bit (1),
  5   108     		2 corr bit (1),
  5   109     		2 initl bit (1),
  5   110     		2 debug bit (1),
  5   111     		2 report bit (1),
  5   112     		2 sync_in_prog bit (1),
  5   113     		2 pd_section bit (1),
  5   114     		2 list_switch bit (1),
  5   115     		2 alpha_cond bit (1),
  5   116     		2 num_cond bit (1),
  5   117     		2 spec_sysin bit (1),
  5   118     		2 spec_sysout bit (1),
  5   119     		2 cpl_files bit (1),
  5   120     		2 obj_dec_comma bit (1),
  5   121 		2 default_sign_type bit (3),
  5   122 		2 use_debug bit(1),
  5   123 		2 syntax_trace bit(1),
  5   124 		2 comp_defaults,
  5   125 			3 comp	bit(1),
  5   126 			3 comp_1	bit(1),
  5   127 			3 comp_2	bit(1),
  5   128 			3 comp_3	bit(1),
  5   129 			3 comp_4	bit(1),
  5   130 			3 comp_5	bit(1),
  5   131 			3 comp_6	bit(1),
  5   132 			3 comp_7	bit(1),
  5   133 			3 comp_8 bit(1),
  5   134 		2 disp_defaults,
  5   135 			3 disp	bit(1),
  5   136 			3 disp_1	bit(1),
  5   137 			3 disp_2	bit(1),
  5   138 			3 disp_3	bit(1),
  5   139 			3 disp_4	bit(1),
  5   140 			3 disp_5  bit(1),
  5   141 			3 disp_6  bit(1),
  5   142 			3 disp_7  bit(1),
  5   143 		2 descriptor bit(2),
  5   144 		2 levsv  bit(3),		/*[4.0-1]*/
  5   145 		2 use_reporting bit(1),	/*[4.3-1]*/
  5   146 		2 cd bit(1),		/*[4.4-1]*/
  5   147 		2 dummy17 bit(3),
  5   148    		2 lvl_rstr bit(32),
  5   149    		2 inst_rstr bit(32),
  5   150 		2 comp_level char(1),
  5   151 		2 dummy18 char(30),
  5   152 		2 object_sign char (1),
  5   153     		2 last_print_rec char (5),
  5   154     		2 coll_seq_info char (5),
  5   155     		2 sys_status_seg fixed bin,
  5   156    		2 sys_status_offset fixed bin(24),
  5   157    		2 compiler_id fixed bin,
  5   158    		2 date_comp_ln fixed bin,
  5   159    		2 compile_mode bit(36),
  5   160    		2 default_temp fixed bin,
  5   161    		2 accept_device fixed bin,
  5   162    		2 display_device fixed bin,
  5   163    		2 cobol_cln fixed bin,	/*[5.1-1]*/
  5   164 		2 alphabet_offset fixed bin;
  5   165 
  5   166 
  5   167 
  5   168 /* END INCLUDE FILE ...   cobol_fixed_common.incl.pl1 */
  5   169 
     1214 
     1215 
     1216      end;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    05/24/89  0836.2  cobol_pd_code.pl1                 >spec>install>MR12.3-1048>cobol_pd_code.pl1
1204         1    11/11/82  1712.8  cobol_TYPE1.incl.pl1              >ldd>include>cobol_TYPE1.incl.pl1
1207         2    03/27/82  0439.6  cobol_TYPE18.incl.pl1             >ldd>include>cobol_TYPE18.incl.pl1
1210         3    03/27/82  0439.6  cobol_TYPE19.incl.pl1             >ldd>include>cobol_TYPE19.incl.pl1
1212         4    03/27/82  0431.3  cobol_ext_.incl.pl1               >ldd>include>cobol_ext_.incl.pl1
1214         5    11/11/82  1712.8  cobol_fixed_common.incl.pl1       >ldd>include>cobol_fixed_common.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
DATA                                   based           structure                level 1 unaligned dcl 1163
DATA_ptr                 26     000010 internal static pointer                  level 2 dcl 1134 set ref 51* 63
a                        11            based           bit(3)                   level 2 packed packed unaligned dcl 1209 set ref 210
                                                                                  213* 225* 238* 273* 276* 301 301* 304* 319* 508*
                                                                                  519* 624* 633 652 714* 739*
accept_device           160            based           fixed bin(17,0)          level 2 dcl 5-26 ref 264
addr                                                   builtin function         dcl 1124 ref 592 629 633 652 727 810 823 846 857
alter_ptr                16            based           pointer                  level 2 dcl 1167 set ref 592 594* 628 629 635 637*
                                                                                  947 951*
area_ptr                  6     000010 internal static pointer                  level 2 dcl 1134 set ref 807 808 809 810 823* 879
                                                                                  889 899 909 919 929 944 951 960 969 978 987 998
                                                                                  1007
arg_1                                  based           pointer                  level 2 dcl 1154 set ref 35 81* 85* 85* 151* 282*
                                                                                  289* 294* 306* 313* 322* 326* 336* 342* 347* 347*
                                                                                  363 376* 392* 392* 397* 411* 471* 492* 505* 548*
                                                                                  702*
arg_2                     2            based           pointer                  level 2 dcl 1154 set ref 40 81* 342* 364 379* 397*
                                                                                  420 439 457 465 499 514 537 542 704*
arg_3                     4            based           pointer                  level 2 dcl 1154 set ref 45 426* 525*
arg_4                     6            based           pointer                  level 2 dcl 1154 set ref 50 428* 451* 527*
arg_5                    10            based           pointer                  level 2 dcl 1154 ref 53
arg_6                    12            based           pointer                  level 2 dcl 1154 ref 33 51
arg_ptr                  16     000010 internal static pointer                  level 2 dcl 1134 set ref 50* 62
args                                   based           structure                level 1 unaligned dcl 1154
b                        11(03)        based           bit(1)                   level 2 packed packed unaligned dcl 1209 set ref
                                                                                  178* 201* 237* 250* 333* 432* 444* 530* 551*
bit18                                  based           bit(18)                  packed unaligned dcl 1197 set ref 633* 652*
bit3                            000107 automatic       bit(3)                   packed unaligned dcl 1152 set ref 210* 213
bit36                                  based           bit(36)                  packed unaligned dcl 1199 set ref 592* 629* 727*
                                                                                  810*
c                        11(04)        based           bit(1)                   level 2 packed packed unaligned dcl 1209 set ref
                                                                                  188* 251* 445* 552*
cancel_ptr               20            based           pointer                  level 2 dcl 1167 set ref 604* 956 960*
class                                  parameter       bit(36)                  packed unaligned dcl 802 ref 799 810
close_ptr                 2            based           pointer                  level 2 dcl 1167 set ref 469* 546* 885 889*
cobol_com_ptr                          defined         pointer                  dcl 4-25 ref 264 273
cobol_ext_$cobol_com_ptr        000044 external static pointer                  dcl 4-24 ref 264 264 273 273
cobol_ext_$cobol_pdofp          000046 external static pointer                  dcl 4-44 ref 791 791
cobol_pdofp                            defined         pointer                  dcl 4-45 set ref 791*
cobol_swf_put                   000042 constant        entry                    external dcl 1131 ref 791
code_area               310            based           fixed bin(35,0)          array level 2 dcl 1163 set ref 823 828*
code_area_loc            30     000010 internal static fixed bin(17,0)          level 2 dcl 1134 set ref 823 824 832* 832 849*
code_loc                               parameter       pointer                  dcl 784 set ref 781 791* 791
code_size                              based           fixed bin(17,0)          level 2 dcl 788 set ref 791*
d                        11(05)        based           bit(2)                   level 2 packed packed unaligned dcl 1209 set ref
                                                                                  112* 119* 356 359* 415* 431* 747*
data                            000010 internal static structure                level 1 unaligned dcl 1134
display_device          161            based           fixed bin(17,0)          level 2 dcl 5-26 ref 273
e                         5            based           fixed bin(17,0)          level 2 dcl 1209 set ref 169* 179* 190* 200* 214*
                                                                                  226* 239* 249* 264* 267* 297* 297 363* 438* 460*
                                                                                  513* 536* 647* 698* 773*
end_stmt                               based           structure                level 1 unaligned dcl 1209 set ref 36 41
end_stmt_ptr             12     000010 internal static pointer                  level 2 dcl 1134 set ref 35* 36 37 38 112 119 148
                                                                                  148 169 171* 178 179 181* 188 189 190 192* 199 200
                                                                                  201 203* 210 213 214 216* 225 226 228* 237 238 239
                                                                                  241* 248 249 250 251 254* 264 267 269* 273 276
                                                                                  278* 285 285 297 297 301 301 304 315* 319 329* 333
                                                                                  338* 356 359 363 364 366* 370 372* 382 384* 386
                                                                                  388* 415 417* 430 431 432 435* 443 444 445 447*
                                                                                  453 455* 473 475* 477 478 480* 496* 507 508 510*
                                                                                  518 519 521* 529 530 533* 550 551 552 554* 575
                                                                                  577* 579 580 582* 624 626* 633 635 646 647 648 649
                                                                                  650 652 698 714 716* 739 741* 747 759 761* 773
                                                                                  775*
end_stmt_size                   000105 automatic       fixed bin(17,0)          dcl 1128 set ref 36* 37
env_ptr                                parameter       pointer                  dcl 1126 ref 26 29 32
eos_ptr                  20     000010 internal static pointer                  level 2 dcl 1134 set ref 40* 41 42 43 437 438 439
                                                                                  441* 457 459 460 462* 512 513 514 516* 535 536 537
                                                                                  539* 662*
eos_size                        000106 automatic       fixed bin(17,0)          dcl 1128 set ref 41* 42
first_alter               0(01)        based           bit(1)                   level 2 packed packed unaligned dcl 1183 set ref 589
                                                                                  1049*
first_cancel              0(10)        based           bit(1)                   level 2 packed packed unaligned dcl 1183 set ref 601
                                                                                  1057*
first_close               0(02)        based           bit(1)                   level 2 packed packed unaligned dcl 1183 set ref 621
                                                                                  1073*
first_go                  0(07)        based           bit(1)                   level 2 packed packed unaligned dcl 1183 set ref 693
                                                                                  1113*
first_initiate            0(09)        based           bit(1)                   level 2 packed packed unaligned dcl 1183 set ref 611
                                                                                  1065*
first_merge               0(11)        based           bit(1)                   level 2 packed packed unaligned dcl 1183 set ref 257
                                                                                  352 1041*
first_open                0(03)        based           bit(1)                   level 2 packed packed unaligned dcl 1183 set ref 711
                                                                                  736 1081*
first_search              0(08)        based           bit(1)                   level 2 packed packed unaligned dcl 1183 set ref 165
                                                                                  174 184 195 206 219 231 244 768 1120*
first_sort                             based           bit(1)                   level 2 packed packed unaligned dcl 1183 set ref 70
                                                                                  487 564 754 1017*
first_suspend             0(04)        based           bit(1)                   level 2 packed packed unaligned dcl 1183 set ref 659
                                                                                  1089*
first_terminate           0(05)        based           bit(1)                   level 2 packed packed unaligned dcl 1183 set ref 673
                                                                                  1097*
first_then                0(06)        based           bit(1)                   level 2 packed packed unaligned dcl 1183 set ref 683
                                                                                  1105*
first_use                       000010 internal static fixed bin(17,0)          level 2 dcl 1134 set ref 55* 65 844*
fixed_common                           based           structure                level 1 unaligned dcl 5-26
go_ptr                   32            based           pointer                  level 2 dcl 1167 set ref 696 700* 1003 1007*
h                         6            based           fixed bin(17,0)          level 2 dcl 1209 set ref 148* 148 285* 285 370* 382*
                                                                                  386* 439* 457* 478* 514* 537* 575* 580* 648* 759*
i                               000314 automatic       fixed bin(17,0)          dcl 842 in procedure "code_alloc" set ref 851* 853*
i                               000302 automatic       fixed bin(17,0)          dcl 821 in procedure "alloc" set ref 826* 828*
i                         7            based           fixed bin(17,0)          level 2 in structure "end_stmt" dcl 1209
                                                                                  in procedure "cobol_pd_code" set ref 364* 649*
ind_ptr                  24     000010 internal static pointer                  level 2 dcl 1134 set ref 70 165 174 184 195 206 219
                                                                                  231 244 257 352 487 564 589 601 611 621 659 673
                                                                                  683 693 711 736 754 768 846* 1017 1041 1049 1057
                                                                                  1065 1073 1081 1089 1097 1105 1113 1120
indicators                1     000010 internal static bit(72)                  level 2 in structure "data" packed packed unaligned
                                                                                  dcl 1134 in procedure "cobol_pd_code" set ref 846
                                                                                  847*
indicators                             based           structure                level 1 packed packed unaligned dcl 1183
                                                                                  in procedure "cobol_pd_code"
initiate_ptr             22            based           pointer                  level 2 dcl 1167 set ref 614* 965 969*
j                               000303 automatic       fixed bin(17,0)          dcl 821 in procedure "alloc" set ref 824* 828
j                        10            based           fixed bin(17,0)          level 2 in structure "end_stmt" dcl 1209
                                                                                  in procedure "cobol_pd_code" set ref 650*
key                       4            based           fixed bin(17,0)          level 2 in structure "reserved_word" dcl 1203
                                                                                  in procedure "cobol_pd_code" set ref 628* 635 696*
                                                                                  809*
key                                    parameter       fixed bin(17,0)          dcl 802 in procedure "res_word" ref 799 809
mode                                   parameter       fixed bin(17,0)          dcl 868 in procedure "alloc_test" ref 865 870
mode                                   based           fixed bin(17,0)          dcl 1200 in procedure "cobol_pd_code" ref 68 363 364
null                                                   builtin function         dcl 1124 ref 853 875 885 895 905 915 925 940 947 956
                                                                                  965 974 983 994 1003
num                                    parameter       fixed bin(17,0)          dcl 644 ref 641 646
open_ptr                               based           pointer                  level 2 dcl 1167 set ref 409* 490* 727 729* 875 879*
option_ptr               14     000010 internal static pointer                  level 2 dcl 1134 set ref 53* 68
p                               000100 automatic       pointer                  dcl 1126 set ref 32* 33 35 40 45 50 51 53 62* 81 81
                                                                                  85 85 151 282 289 294 306 313 322 326 336 342 342
                                                                                  347 347 363 364 376 379 392 392 397 397 411 420
                                                                                  426 428 439 451 457 465 471 492 499 505 514 525
                                                                                  527 537 542 548 702 704
perform_ptr              14            based           pointer                  level 2 dcl 1167 set ref 567* 940 944*
proc_num                 12            based           fixed bin(17,0)          level 2 dcl 1206 set ref 420* 465* 499* 542*
proc_ref                               based           structure                level 1 unaligned dcl 1206 set ref 46
proc_ref_ptr             22     000010 internal static pointer                  level 2 dcl 1134 set ref 45* 46 47 48 310 419 420
                                                                                  422* 464 465 467* 498 499 501* 541 542 544*
proc_ref_size                   000104 automatic       fixed bin(17,0)          dcl 1128 set ref 46* 47
ptr                                    based           pointer                  array level 2 dcl 1163 set ref 853* 857
ptr_1                                  parameter       pointer                  dcl 561 set ref 558 569*
ptr_2                                  parameter       pointer                  dcl 561 set ref 558 571*
ptr_area                               based           structure                level 1 unaligned dcl 1167
ptr_area_ptr             10     000010 internal static pointer                  level 2 dcl 1134 set ref 409 424 449 469 490 503 523
                                                                                  546 567 592 594 604 614 628 629 635 637 664 676
                                                                                  686 696 700 727 729 857* 859 875 879 885 889 895
                                                                                  899 905 909 915 919 925 929 940 944 947 951 956
                                                                                  960 965 969 974 978 983 987 994 998 1003 1007
q                               000102 automatic       pointer                  dcl 1126 set ref 33* 63* 823 828 853 857
read_ptr                 10            based           pointer                  level 2 dcl 1167 set ref 503* 915 919*
record                                 based           structure                level 1 unaligned dcl 788
release_ptr              12            based           pointer                  level 2 dcl 1167 set ref 523* 925 929*
reserved_byte_size        4     000010 internal static fixed bin(17,0)          level 2 dcl 1134 set ref 807 861*
reserved_word                          based           structure                level 1 unaligned dcl 1203 set ref 859
reserved_word_size        3     000010 internal static fixed bin(17,0)          level 2 dcl 1134 set ref 805* 859* 861
return_ptr                4            based           pointer                  level 2 dcl 1167 set ref 424* 895 899*
size                                   parameter       fixed bin(17,0)          dcl 820 in procedure "alloc" ref 817 826 832
size                                   based           fixed bin(17,0)          level 2 in structure "reserved_word" dcl 1203
                                                                                  in procedure "cobol_pd_code" set ref 807*
size                                                   builtin function         dcl 1124 in procedure "cobol_pd_code" ref 36 41 46
                                                                                  859
size                                   based           fixed bin(17,0)          level 2 in structure "proc_ref" dcl 1206
                                                                                  in procedure "cobol_pd_code" set ref 47*
size                                   based           fixed bin(17,0)          level 2 in structure "end_stmt" dcl 1209
                                                                                  in procedure "cobol_pd_code" set ref 37* 42*
spec_tag_counter                       based           fixed bin(17,0)          dcl 1198 ref 420 439 457 465 499 514 537 542
st                              000264 automatic       bit(32)                  packed unaligned dcl 786 set ref 791*
suspend_ptr              24            based           pointer                  level 2 dcl 1167 set ref 664* 974 978*
terminate_ptr            26            based           pointer                  level 2 dcl 1167 set ref 676* 983 987*
then_ptr                 30            based           pointer                  level 2 dcl 1167 set ref 686* 994 998*
type                      3            based           fixed bin(17,0)          level 2 in structure "end_stmt" dcl 1209
                                                                                  in procedure "cobol_pd_code" set ref 38* 43*
type                      3            based           fixed bin(17,0)          level 2 in structure "reserved_word" dcl 1203
                                                                                  in procedure "cobol_pd_code" set ref 808*
type                      3            based           fixed bin(17,0)          level 2 in structure "proc_ref" dcl 1206
                                                                                  in procedure "cobol_pd_code" set ref 48* 310* 419*
                                                                                  464* 498* 541*
val1                                   parameter       fixed bin(17,0)          dcl 562 ref 558 579
val2                                   parameter       fixed bin(17,0)          dcl 562 ref 558 580
verb                      4            based           fixed bin(17,0)          level 2 in structure "end_stmt" dcl 1209
                                                                                  in procedure "cobol_pd_code" set ref 189* 199*
                                                                                  248* 430* 437* 443* 453* 459* 473* 477* 507* 512*
                                                                                  518* 529* 535* 550* 579* 635* 646*
verb                      5            based           bit(1)                   level 2 in structure "reserved_word" packed packed
                                                                                  unaligned dcl 1203 in procedure "cobol_pd_code"
                                                                                  set ref 592 629 727 810
verb_num                               parameter       fixed bin(17,0)          dcl 407 ref 404 477
write_ptr                 6            based           pointer                  level 2 dcl 1167 set ref 449* 905 909*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
cobol_afp                              defined         pointer                  dcl 4-11
cobol_analin_fileno                    defined         pointer                  dcl 4-13
cobol_cmfp                             defined         pointer                  dcl 4-21
cobol_com_fileno                       defined         pointer                  dcl 4-23
cobol_curr_in                          defined         pointer                  dcl 4-53
cobol_curr_out                         defined         pointer                  dcl 4-55
cobol_dfp                              defined         pointer                  dcl 4-27
cobol_eltp                             defined         pointer                  dcl 4-19
cobol_ext_$cobol_afp                   external static pointer                  dcl 4-10
cobol_ext_$cobol_analin_fileno         external static pointer                  dcl 4-12
cobol_ext_$cobol_cmfp                  external static pointer                  dcl 4-20
cobol_ext_$cobol_com_fileno            external static pointer                  dcl 4-22
cobol_ext_$cobol_curr_in               external static pointer                  dcl 4-52
cobol_ext_$cobol_curr_out              external static pointer                  dcl 4-54
cobol_ext_$cobol_dfp                   external static pointer                  dcl 4-26
cobol_ext_$cobol_eltp                  external static pointer                  dcl 4-18
cobol_ext_$cobol_fileno1               external static fixed bin(24,0)          dcl 4-78
cobol_ext_$cobol_hfp                   external static pointer                  dcl 4-28
cobol_ext_$cobol_lpr                   external static char(5)                  packed unaligned dcl 4-95
cobol_ext_$cobol_m1fp                  external static pointer                  dcl 4-30
cobol_ext_$cobol_m2fp                  external static pointer                  dcl 4-32
cobol_ext_$cobol_min1_fileno           external static pointer                  dcl 4-34
cobol_ext_$cobol_min2_fileno_ptr       external static pointer                  dcl 4-36
cobol_ext_$cobol_name_fileno           external static pointer                  dcl 4-38
cobol_ext_$cobol_name_fileno_ptr       external static pointer                  dcl 4-40
cobol_ext_$cobol_ntfp                  external static pointer                  dcl 4-42
cobol_ext_$cobol_options               external static char(120)                packed unaligned dcl 4-97
cobol_ext_$cobol_options_len           external static fixed bin(24,0)          dcl 4-80
cobol_ext_$cobol_pdout_fileno          external static fixed bin(24,0)          dcl 4-82
cobol_ext_$cobol_pfp                   external static pointer                  dcl 4-46
cobol_ext_$cobol_print_fileno          external static fixed bin(24,0)          dcl 4-84
cobol_ext_$cobol_rm2fp                 external static pointer                  dcl 4-48
cobol_ext_$cobol_rmin2_fileno          external static fixed bin(24,0)          dcl 4-86
cobol_ext_$cobol_rmin2fp               external static pointer                  dcl 4-50
cobol_ext_$cobol_rwdd                  external static pointer                  dcl 4-72
cobol_ext_$cobol_rwpd                  external static pointer                  dcl 4-74
cobol_ext_$cobol_sfp                   external static pointer                  dcl 4-56
cobol_ext_$cobol_w1p                   external static pointer                  dcl 4-58
cobol_ext_$cobol_w2p                   external static pointer                  dcl 4-60
cobol_ext_$cobol_w3p                   external static pointer                  dcl 4-62
cobol_ext_$cobol_w5p                   external static pointer                  dcl 4-64
cobol_ext_$cobol_w6p                   external static pointer                  dcl 4-66
cobol_ext_$cobol_w7p                   external static pointer                  dcl 4-68
cobol_ext_$cobol_x1_fileno             external static fixed bin(24,0)          dcl 4-88
cobol_ext_$cobol_x2_fileno             external static fixed bin(24,0)          dcl 4-90
cobol_ext_$cobol_x3_fileno             external static fixed bin(24,0)          dcl 4-92
cobol_ext_$cobol_x3fp                  external static pointer                  dcl 4-70
cobol_ext_$cobol_xlast8                external static bit(1)                   packed unaligned dcl 4-100
cobol_ext_$report_exists               external static bit(1)                   packed unaligned dcl 4-102
cobol_ext_$report_first_token          external static pointer                  dcl 4-14
cobol_ext_$report_last_token           external static pointer                  dcl 4-16
cobol_fileno1                          defined         fixed bin(24,0)          dcl 4-79
cobol_hfp                              defined         pointer                  dcl 4-29
cobol_lpr                              defined         char(5)                  packed unaligned dcl 4-96
cobol_m1fp                             defined         pointer                  dcl 4-31
cobol_m2fp                             defined         pointer                  dcl 4-33
cobol_min1_fileno                      defined         pointer                  dcl 4-35
cobol_min2_fileno_ptr                  defined         pointer                  dcl 4-37
cobol_name_fileno                      defined         pointer                  dcl 4-39
cobol_name_fileno_ptr                  defined         pointer                  dcl 4-41
cobol_ntfp                             defined         pointer                  dcl 4-43
cobol_options                          defined         char(120)                packed unaligned dcl 4-98
cobol_options_len                      defined         fixed bin(24,0)          dcl 4-81
cobol_pdout_fileno                     defined         fixed bin(24,0)          dcl 4-83
cobol_pfp                              defined         pointer                  dcl 4-47
cobol_print_fileno                     defined         fixed bin(24,0)          dcl 4-85
cobol_rm2fp                            defined         pointer                  dcl 4-49
cobol_rmin2_fileno                     defined         fixed bin(24,0)          dcl 4-87
cobol_rmin2fp                          defined         pointer                  dcl 4-51
cobol_rwdd                             defined         pointer                  dcl 4-73
cobol_rwpd                             defined         pointer                  dcl 4-75
cobol_sfp                              defined         pointer                  dcl 4-57
cobol_w1p                              defined         pointer                  dcl 4-59
cobol_w2p                              defined         pointer                  dcl 4-61
cobol_w3p                              defined         pointer                  dcl 4-63
cobol_w5p                              defined         pointer                  dcl 4-65
cobol_w6p                              defined         pointer                  dcl 4-67
cobol_w7p                              defined         pointer                  dcl 4-69
cobol_x1_fileno                        defined         fixed bin(24,0)          dcl 4-89
cobol_x2_fileno                        defined         fixed bin(24,0)          dcl 4-91
cobol_x3_fileno                        defined         fixed bin(24,0)          dcl 4-93
cobol_x3fp                             defined         pointer                  dcl 4-71
cobol_xlast8                           defined         bit(1)                   packed unaligned dcl 4-101
report_exists                          defined         bit(1)                   packed unaligned dcl 4-103
report_first_token                     defined         pointer                  dcl 4-15
report_last_token                      defined         pointer                  dcl 4-17

NAMES DECLARED BY EXPLICIT CONTEXT.
A                               000056 constant        label                    array(15) dcl 872 ref 870
G                               000000 constant        label                    array(44) dcl 70 ref 68
OPEN                            002701 constant        entry                    internal dcl 724 ref 718 743
alloc                           003103 constant        entry                    internal dcl 817 ref 805
alloc_test                      003176 constant        entry                    internal dcl 865 ref 1025 1026 1027 1028 1029 1030
                                                                                  1031 1048 1056 1064 1072 1080 1088 1096 1104 1112
alter_alloc                     003574 constant        entry                    internal dcl 1045 ref 589
alter_proc                      002317 constant        entry                    internal dcl 586 ref 89
cancel_alloc                    003607 constant        entry                    internal dcl 1053 ref 601
cancel_proc                     002343 constant        entry                    internal dcl 598 ref 93
close_alloc                     003635 constant        entry                    internal dcl 1069 ref 621
close_eos_proc                  002405 constant        entry                    internal dcl 618 ref 101
cobol_pd_code                   000113 constant        entry                    external dcl 26
code                            000177 constant        entry                    external dcl 59
code_alloc                      003135 constant        entry                    internal dcl 839 ref 65
emit_code                       003032 constant        entry                    internal dcl 781 ref 151 171 181 192 203 216 228 241
                                                                                  254 269 278 282 289 294 306 313 315 322 326 329
                                                                                  336 338 366 372 376 379 384 388 409 411 417 422
                                                                                  424 426 428 435 441 447 449 451 455 462 467 469
                                                                                  471 475 480 490 492 496 501 503 505 510 516 521
                                                                                  523 525 527 533 539 544 546 548 554 567 569 571
                                                                                  577 582 594 604 614 626 637 662 664 676 686 700
                                                                                  702 704 716 729 741 761 775
go_alloc                        003724 constant        entry                    internal dcl 1109 ref 693
go_proc                         002575 constant        entry                    internal dcl 690 ref 143
initialize                      000123 constant        entry                    external dcl 29
initiate_alloc                  003622 constant        entry                    internal dcl 1061 ref 611
initiate_proc                   002364 constant        entry                    internal dcl 608 ref 97
merge_alloc                     003564 constant        entry                    internal dcl 1036 ref 257 352
open_alloc                      003650 constant        entry                    internal dcl 1077 ref 711 736
open_eos_proc                   002647 constant        entry                    internal dcl 708 ref 105 109 116
open_ext_proc                   002716 constant        entry                    internal dcl 733 ref 123
res_word                        003054 constant        entry                    internal dcl 799 ref 878 888 898 908 918 928 943 950
                                                                                  959 968 977 986 997 1006
search_alloc                    003737 constant        entry                    internal dcl 1117 ref 165 174 184 195 206 219 231
                                                                                  244 768
search_eos_proc                 003003 constant        entry                    internal dcl 765 ref 160
set_end                         002462 constant        entry                    internal dcl 641 ref 211 223 235 358 361 368 381 413
                                                                                  494 573 631 666 696 720 745 757 771
sort_alloc                      003516 constant        entry                    internal dcl 1012 ref 70 487 564 754
sort_eos_proc                   002754 constant        entry                    internal dcl 751 ref 155
sort_merge_alloc                003526 constant        entry                    internal dcl 1021 ref 1015 1039
sort_merge_giving               001411 constant        entry                    internal dcl 404 ref 74 261
sort_proc                       002224 constant        entry                    internal dcl 558 ref 81 85 342 347 392 397
sort_using                      001723 constant        entry                    internal dcl 484 ref 77
suspend_alloc                   003663 constant        entry                    internal dcl 1085 ref 659
suspend_proc                    002477 constant        entry                    internal dcl 656 ref 128
terminate_alloc                 003676 constant        entry                    internal dcl 1093 ref 673
terminate_proc                  002533 constant        entry                    internal dcl 670 ref 133
then_alloc                      003711 constant        entry                    internal dcl 1101 ref 683
then_proc                       002554 constant        entry                    internal dcl 680 ref 138

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      4214        4264    4124        4224
Length      4704    4124        50         404      67          32

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
cobol_pd_code                       441 external procedure  is an external procedure.  
sort_merge_giving                       internal procedure  shares stack frame of external procedure cobol_pd_code.  
sort_using                              internal procedure  shares stack frame of external procedure cobol_pd_code.  
sort_proc                               internal procedure  shares stack frame of external procedure cobol_pd_code.  
alter_proc                              internal procedure  shares stack frame of external procedure cobol_pd_code.  
cancel_proc                             internal procedure  shares stack frame of external procedure cobol_pd_code.  
initiate_proc                           internal procedure  shares stack frame of external procedure cobol_pd_code.  
close_eos_proc                          internal procedure  shares stack frame of external procedure cobol_pd_code.  
set_end                                 internal procedure  shares stack frame of external procedure cobol_pd_code.  
suspend_proc                            internal procedure  shares stack frame of external procedure cobol_pd_code.  
terminate_proc                          internal procedure  shares stack frame of external procedure cobol_pd_code.  
then_proc                               internal procedure  shares stack frame of external procedure cobol_pd_code.  
go_proc                                 internal procedure  shares stack frame of external procedure cobol_pd_code.  
open_eos_proc                           internal procedure  shares stack frame of external procedure cobol_pd_code.  
OPEN                                    internal procedure  shares stack frame of external procedure cobol_pd_code.  
open_ext_proc                           internal procedure  shares stack frame of external procedure cobol_pd_code.  
sort_eos_proc                           internal procedure  shares stack frame of external procedure cobol_pd_code.  
search_eos_proc                         internal procedure  shares stack frame of external procedure cobol_pd_code.  
emit_code                               internal procedure  shares stack frame of external procedure cobol_pd_code.  
res_word                                internal procedure  shares stack frame of external procedure cobol_pd_code.  
alloc                                   internal procedure  shares stack frame of external procedure cobol_pd_code.  
code_alloc                              internal procedure  shares stack frame of external procedure cobol_pd_code.  
alloc_test                              internal procedure  shares stack frame of external procedure cobol_pd_code.  
sort_alloc                              internal procedure  shares stack frame of external procedure cobol_pd_code.  
sort_merge_alloc                        internal procedure  shares stack frame of external procedure cobol_pd_code.  
merge_alloc                             internal procedure  shares stack frame of external procedure cobol_pd_code.  
alter_alloc                             internal procedure  shares stack frame of external procedure cobol_pd_code.  
cancel_alloc                            internal procedure  shares stack frame of external procedure cobol_pd_code.  
initiate_alloc                          internal procedure  shares stack frame of external procedure cobol_pd_code.  
close_alloc                             internal procedure  shares stack frame of external procedure cobol_pd_code.  
open_alloc                              internal procedure  shares stack frame of external procedure cobol_pd_code.  
suspend_alloc                           internal procedure  shares stack frame of external procedure cobol_pd_code.  
terminate_alloc                         internal procedure  shares stack frame of external procedure cobol_pd_code.  
then_alloc                              internal procedure  shares stack frame of external procedure cobol_pd_code.  
go_alloc                                internal procedure  shares stack frame of external procedure cobol_pd_code.  
search_alloc                            internal procedure  shares stack frame of external procedure cobol_pd_code.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 data                        cobol_pd_code

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
cobol_pd_code            000100 p                           cobol_pd_code
                         000102 q                           cobol_pd_code
                         000104 proc_ref_size               cobol_pd_code
                         000105 end_stmt_size               cobol_pd_code
                         000106 eos_size                    cobol_pd_code
                         000107 bit3                        cobol_pd_code
                         000264 st                          emit_code
                         000302 i                           alloc
                         000303 j                           alloc
                         000314 i                           code_alloc

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
cobol_swf_put

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
cobol_ext_$cobol_com_ptr      cobol_ext_$cobol_pdofp




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     26 000110        29 000120        32 000130        33 000134        35 000136        36 000140        37 000142
     38 000144        40 000146        41 000150        42 000152        43 000154        45 000156        46 000160
     47 000162        48 000164        50 000166        51 000170        53 000172        55 000174        57 000175
     59 000176        62 000204        63 000207        65 000211        68 000214        70 000217        74 000225
     75 000231        77 000232        79 000233        81 000234        83 000255        85 000256        87 000276
     89 000277        91 000300        93 000301        95 000302        97 000303        99 000304       101 000305
    103 000306       105 000307       107 000310       109 000311       112 000312       114 000320       116 000321
    119 000322       121 000330       123 000331       126 000332       128 000333       131 000334       133 000335
    136 000336       138 000337       141 000340       143 000341       146 000342       148 000343       151 000345
    153 000353       155 000354       158 000355       160 000356       163 000357       165 000360       169 000366
    171 000372       172 000400       174 000401       178 000407       179 000413       181 000415       182 000423
    184 000424       188 000432       189 000436       190 000440       192 000442       193 000450       195 000451
    199 000457       200 000463       201 000465       203 000467       204 000475       206 000476       210 000504
    211 000511       213 000515       214 000523       216 000525       217 000533       219 000534       223 000542
    225 000546       226 000554       228 000556       229 000564       231 000565       235 000573       237 000577
    238 000603       239 000607       241 000611       242 000617       244 000620       248 000626       249 000632
    250 000634       251 000636       254 000640       255 000646       257 000647       261 000655       262 000661
    264 000662       267 000672       269 000675       271 000703       273 000704       276 000716       278 000721
    280 000727       282 000730       285 000736       287 000741       289 000742       292 000750       294 000751
    297 000757       299 000762       301 000763       304 000775       306 001001       308 001007       310 001010
    313 001013       315 001021       317 001030       319 001031       322 001034       324 001042       326 001043
    329 001051       331 001060       333 001061       336 001064       338 001072       340 001101       342 001102
    345 001123       347 001124       350 001144       352 001145       356 001153       358 001162       359 001166
    360 001174       361 001175       363 001201       364 001206       366 001211       368 001217       370 001223
    372 001227       374 001235       376 001236       379 001244       381 001253       382 001257       384 001263
    386 001271       388 001275       390 001303       392 001304       395 001324       397 001325       400 001346
    994 001347       997 001355       998 001363      1001 001367      1003 001370      1006 001376      1007 001404
   1010 001410       404 001411       409 001413       411 001422       413 001430       415 001434       417 001442
    419 001450       420 001454       422 001460       424 001466       426 001476       428 001505       430 001514
    431 001520       432 001522       435 001524       437 001532       438 001536       439 001540       441 001543
    443 001551       444 001555       445 001557       447 001561       449 001567       451 001577       453 001606
    455 001612       457 001620       459 001626       460 001630       462 001632       464 001640       465 001644
    467 001647       469 001655       471 001665       473 001673       475 001677       477 001705       478 001712
    480 001714       482 001722       484 001723       487 001724       490 001733       492 001742       494 001750
    496 001754       498 001763       499 001767       501 001773       503 002001       505 002011       507 002017
    508 002023       510 002027       512 002035       513 002041       514 002043       516 002046       518 002054
    519 002060       521 002062       523 002070       525 002100       527 002107       529 002116       530 002122
    533 002124       535 002132       536 002136       537 002140       539 002144       541 002152       542 002156
    544 002161       546 002167       548 002177       550 002205       551 002211       552 002213       554 002215
    556 002223       558 002224       564 002226       567 002235       569 002245       571 002254       573 002263
    575 002267       577 002273       579 002301       580 002306       582 002310       584 002316       586 002317
    589 002320       592 002327       594 002334       596 002342       598 002343       601 002344       604 002353
    606 002363       608 002364       611 002365       614 002374       616 002404       618 002405       621 002406
    624 002415       626 002423       628 002431       629 002436       631 002440       633 002443       635 002447
    637 002453       639 002461       641 002462       646 002464       647 002470       648 002471       649 002472
    650 002473       652 002474       654 002476       656 002477       659 002500       662 002507       664 002516
    666 002526       668 002532       670 002533       673 002534       676 002543       678 002553       680 002554
    683 002555       686 002564       688 002574       690 002575       693 002576       696 002605       698 002616
    700 002622       702 002631       704 002637       706 002646       708 002647       711 002650       714 002657
    716 002665       718 002673       720 002674       722 002700       724 002701       727 002702       729 002707
    731 002715       733 002716       736 002717       739 002726       741 002734       743 002742       745 002743
    747 002747       749 002753       751 002754       754 002755       757 002764       759 002770       761 002774
    763 003002       765 003003       768 003004       771 003013       773 003017       775 003023       777 003031
    781 003032       791 003034       793 003053       799 003054       805 003056       807 003065       808 003070
    809 003073       810 003076       812 003102       817 003103       823 003105       824 003112       826 003114
    828 003123       830 003126       832 003130       834 003134       839 003135       844 003136       846 003141
    847 003143       849 003146       851 003147       853 003155       855 003162       857 003164       859 003167
    861 003173       863 003175       865 003176       870 003200       872 003202       875 003203       878 003210
    879 003216       882 003221       885 003222       888 003230       889 003236       892 003242       895 003243
    898 003251       899 003257       902 003263       905 003264       908 003272       909 003300       912 003304
    915 003305       918 003313       919 003321       922 003325       925 003326       928 003334       929 003342
    932 003346       934 003347       937 003350       940 003351       943 003357       944 003365       947 003371
    950 003377       951 003405       954 003411       956 003412       959 003420       960 003426       963 003432
    965 003433       968 003441       969 003447       972 003453       974 003454       977 003462       978 003470
    981 003474       983 003475       986 003503       987 003511       990 003515      1012 003516      1015 003517
   1017 003520      1019 003525      1021 003526      1025 003527      1026 003533      1027 003537      1028 003543
   1029 003547      1030 003553      1031 003557      1034 003563      1036 003564      1039 003565      1041 003566
   1043 003573      1045 003574      1048 003575      1049 003601      1051 003606      1053 003607      1056 003610
   1057 003614      1059 003621      1061 003622      1064 003623      1065 003627      1067 003634      1069 003635
   1072 003636      1073 003642      1075 003647      1077 003650      1080 003651      1081 003655      1083 003662
   1085 003663      1088 003664      1089 003670      1091 003675      1093 003676      1096 003677      1097 003703
   1099 003710      1101 003711      1104 003712      1105 003716      1107 003723      1109 003724      1112 003725
   1113 003731      1115 003736      1117 003737      1120 003740      1122 003745


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
