	COMPILATION LISTING OF SEGMENT apl_erase_command_
	Compiled by: Multics PL/I Compiler, Release 28d, of October 4, 1983
	Compiled at: Honeywell LCPD Phoenix, System M
	Compiled on: 11/29/83  1604.9 mst Tue
	    Options: optimize map

        1 /* ******************************************************
        2*   *                                                    *
        3*   *                                                    *
        4*   * Copyright (c) 1972 by Massachusetts Institute of   *
        5*   * Technology and Honeywell Information Systems, Inc. *
        6*   *                                                    *
        7*   *                                                    *
        8*   ****************************************************** */
        9 
       10 /* format: style3 */
       11 apl_erase_command_:
       12      proc (nargs, arglist);
       13 
       14 /*
       15* * this routine executes the )ERASE apl command
       16* * written 73.9.06 by DAM
       17* * Modified 740131 by PG to check for SI DAMAGE
       18*   Modified 800116 by PG to stop calling apl_system_error_ for SI DAMAGE report
       19*	because it unwinds & leaves the save frame on the SI, leading to system errors
       20*	later on.
       21* */
       22 
       23 /* parameters */
       24 
       25 dcl	nargs		fixed bin parameter,
       26 	arglist		dim (*) char (*) parameter;
       27 
       28 /* automatic */
       29 
       30 declare	argno		fixed bin,
       31 	code		fixed bin (35),
       32 	not_erased_msg	char (150) varying aligned,
       33 	symb		ptr unaligned;
       34 
       35 /* builtins */
       36 
       37 declare	(addr, addrel, length, maxlength, null, rtrim)
       38 			builtin;
       39 
       40 /* entries */
       41 
       42 dcl	apl_create_save_frame_
       43 			entry,
       44 	apl_destroy_save_frame_update_
       45 			entry,
       46 	apl_get_symbol_	entry (char (*), unaligned pointer, fixed bin),
       47 	apl_free_bead_	entry (unaligned pointer),
       48 	apl_pendant_function_check_
       49 			entry (unaligned pointer) returns (bit (1) aligned),
       50 	iox_$put_chars	entry (ptr, ptr, fixed bin (21), fixed bin (35));
       51 
       52 /* external static */
       53 
       54 declare	apl_static_$apl_output
       55 			ptr external static;
       56 
       57 /* internal static */
       58 
       59 declare	NL		char (1) init ("
       60 ") internal static;
       61 
       62 /* include files */
       63 
  1     1 /* ====== BEGIN INCLUDE SEGMENT	apl_bead_format.incl.pl1 ================================== */
  1     2 
  1     3 declare 1 general_bead  		aligned based,	/* The Venerable Bead		*/
  1     4 	2 type 			unaligned,
  1     5 	  3 bead_type		unaligned,
  1     6 	    4 operator		bit (1),		/* ON if operator bead		*/
  1     7 	    4 symbol		bit (1),		/* ON if symbol bead		*/
  1     8 	    4 value		bit (1),		/* ON if value bead			*/
  1     9 	    4 function		bit (1),		/* ON if function bead		*/
  1    10 	    4 group		bit (1),		/* ON if group bead			*/
  1    11 	    4 label		bit (1),		/* ON if label bead			*/
  1    12 	    4 shared_variable	bit (1),		/* ON if shared variable bead 	*/
  1    13 	    4 lexed_function	bit (1),		/* ON if lexed function bead  	*/
  1    14 	  3 data_type		unaligned,
  1    15 	    4 list_value		bit (1),		/* ON if a list value bead		*/
  1    16 	    4 character_value	bit (1),		/* ON if a character value bead	*/
  1    17 	    4 numeric_value		bit (1),		/* ON if a numeric value bead		*/
  1    18 	    4 integral_value	bit (1),		/* ON if an integral value bead	*/
  1    19 	    4 zero_or_one_value	bit (1),		/* ON if a boolean value bead		*/
  1    20 	    4 complex_value		bit (1),		/* ON if a complex, numeric value bead   */
  1    21 	  3 unused_bits		bit (4) unaligned,	/* pad to 18 bits (for future use)	*/
  1    22 	2 size			bit (18) unaligned,	/* Number of words this bead occupies
  1    23*						   (used by bead storage manager)	*/
  1    24 	2 reference_count 		fixed binary (29);	/* Number of pointers which point
  1    25*						   to this bead (used by bead manager)	*/
  1    26 
  1    27 
  1    28 /* constant strings for initing type field in various beads */
  1    29 
  1    30 declare (
  1    31 	operator_type		init("100000000000000000"b),
  1    32 	symbol_type		init("010000000000000000"b),
  1    33     	value_type		init("001000000000000000"b),
  1    34 	function_type		init("000100000000000000"b),
  1    35 	group_type		init("000010000000000000"b),
  1    36 	label_type		init("001001000011000000"b),
  1    37 	shared_variable_type	init("001000100000000000"b),
  1    38 	lexed_function_type		init("000000010000000000"b),
  1    39 
  1    40 	list_value_type		init("000000001000000000"b),
  1    41 	character_value_type 	init("001000000100000000"b),
  1    42 	numeric_value_type		init("001000000010000000"b),
  1    43 	integral_value_type		init("001000000011000000"b),
  1    44 	zero_or_one_value_type	init("001000000011100000"b),
  1    45 	complex_value_type		init("001000000000010000"b),
  1    46 
  1    47 	not_integer_mask		init("111111111110011111"b),		/* to clear integral, zero_or_one bits */
  1    48 	not_zero_or_one_mask	init("111111111111011111"b)		/* to clear zero_or_one bit */
  1    49         ) bit(18) internal static;
  1    50 
  1    51 /* ------ END INCLUDE SEGMENT		apl_bead_format.incl.pl1 ---------------------------------- */
       64 
  2     1 /*	BEGIN INCLUDE FILE:		apl_group_bead.incl.pl1			*/
  2     2 
  2     3 /* 		Initial Version:	1973.06.18
  2     4*		Typed in by:	Richard S. Lamson					*/
  2     5 
  2     6 
  2     7 declare 1 group_bead		aligned based,	/* Group:  bead_type.group = "1"b	*/
  2     8 
  2     9 	2 header			aligned like general_bead,
  2    10 
  2    11 	2 number_of_members		fixed binary,
  2    12 
  2    13 	2 member			pointer unaligned dimension (0 refer (group_bead.number_of_members));
  2    14 						/* Pointer to the symbol bead for each
  2    15*						    member of the group		*/
  2    16 
  2    17 /*	END INCLUDE FILE		apl_group_bead.incl.pl1				*/
       65 
  3     1 /* ====== BEGIN INCLUDE SEGMENT	apl_symbol_bead.incl.pl1 ================================== */
  3     2 
  3     3 /* Explanation of fields:
  3     4*   symbol_bead.hash_link_pointer	points to next symbol in same hash bucket in the symbol table.
  3     5*   symbol_bead.meaning_pointer	points to current "value" of this name:
  3     6*				   =  null	  => unused (e.g. undefined variable)
  3     7*				   -> group bead      => group name
  3     8*				   -> value bead      => variable with a value
  3     9*				   -> function bead   => function name
  3    10*				   -> label bead      => localized label value
  3    11*				   -> shared var bead => shared variable	*/
  3    12 
  3    13 declare 1 symbol_bead 		aligned based,
  3    14 	2 header	 		aligned like general_bead,
  3    15 	2 hash_link_pointer		pointer unaligned,
  3    16 	2 meaning_pointer		pointer unaligned,
  3    17 	2 name_length 		fixed binary,
  3    18 	2 name			character (0 refer (symbol_bead.name_length)) unaligned;
  3    19 
  3    20 /* ------ END INCLUDE SEGMENT		apl_symbol_bead.incl.pl1 ---------------------------------- */
       66 
  4     1 /* ====== BEGIN INCLUDE SEGMENT	apl_ws_info.incl.pl1 ====================================== */
  4     2 
  4     3 /* This structure contains all of the global data (or pointers to it) for the APL subsystem */
  4     4 
  4     5 /* automatic */
  4     6 
  4     7 declare	ws_info_ptr ptr initial (apl_static_$ws_info_ptr.static_ws_info_ptr);
  4     8 
  4     9 /* external static */
  4    10 
  4    11 declare	1 apl_static_$ws_info_ptr	external static aligned structure,
  4    12 	  2 static_ws_info_ptr	unaligned pointer;
  4    13 
  4    14 /* based */
  4    15 
  4    16 declare	1 ws_info			aligned based (ws_info_ptr),
  4    17 	  2 version_number		fixed bin,	/* version of this structure (3) */
  4    18 	  2 switches		unaligned,	/* mainly ws parameters */
  4    19 	    3 long_error_mode	bit,		/* if 1, long Multics format, else APL/360 format */
  4    20 	    3 debug_mode		bit,		/* if 1, system error causes escape to command level */
  4    21 	    3 canonicalize_mode	bit,		/* if 1, the editor canonicalizes user input */
  4    22 	    3 restrict_exec_command	bit,		/* if 1, the )EXEC command may not be used */
  4    23 	    3 restrict_debug_command	bit,		/* if 1, the )DEBUG command may not be used */
  4    24 	    3 restrict_external_functions
  4    25 				bit,		/* if 1, the )ZFN, )MFN, and )DFN commands may not be used */
  4    26 	    3 restrict_load		bit,		/* if 1, the )LOAD and )COPY commands may not be used */
  4    27 	    3 restrict_load_directory	bit,		/* if 1, no directory allowed in )LOAD or )COPY pathnames */
  4    28 	    3 restrict_save		bit,		/* if 1, the )SAVE command may not be used */
  4    29 	    3 restrict_save_directory	bit,		/* if 1, no directory allowed in )SAVE pathnames */
  4    30 	    3 off_hold		bit,		/* if 1, )OFF HOLD was typed, else just )OFF */
  4    31 	    3 transparent_to_signals	bit,		/* if 1, any conditions slip right past APL */
  4    32 	    3 meter_mode		bit,		/* if 1, metering may be done, else speed is all-important */
  4    33 	    3 restrict_msg_command	bit,		/* if 1, the )MSG command may not be used. */
  4    34 	    3 compatibility_check_mode
  4    35 				bit,		/* if 1, check for incompatible operators */
  4    36 	    3 no_quit_handler	bit,		/* if 1, do not trap QUITs. */
  4    37 						/* remaining 20 bits not presently used */
  4    38 
  4    39 	  2 values,				/* attributes of the workspace */
  4    40 	    3 digits		fixed bin,	/* number of digits of precision printed on output */
  4    41 	    3 width		fixed bin,	/* line length for formatted output */
  4    42 	    3 index_origin		fixed bin,	/* the index origin (0 or 1) */
  4    43 	    3 random_link		fixed bin(35),	/* seed for random number generator */
  4    44 	    3 fuzz		float,		/* comparison tolerance (relative fuzz) */
  4    45 	    3 float_index_origin	float,		/* the index origin	in floating point */
  4    46 	    3 number_of_symbols	fixed bin,	/* the number of symbol_beads currently in existence */
  4    47 	    3 maximum_value_stack_size
  4    48 				fixed bin (18),	/* maximum number of words in one segment of value stack */
  4    49 
  4    50 	  2 pointers,				/* pointers to various internal tables */
  4    51 	    3 symbol_table_ptr	unaligned pointer,	/* -> symbol_table (apl_symbol_table.incl.pl1) */
  4    52 	    3 current_parse_frame_ptr	unaligned pointer,	/* -> topmost parse frame */
  4    53 	    3 value_stack_ptr	unaligned pointer,	/* -> next free location on value stack */
  4    54 	    3 alloc_free_info_ptr	unaligned pointer,	/* -> apl_storage_mngr_ data (apl_storage_system_data.incl.pl1) */
  4    55 
  4    56 	  2 time_invoked		fixed bin(71),	/* clock time that APL was entered */
  4    57 	  2 integer_fuzz		float,		/* the absolute fuzz used in checking for integers */
  4    58 	  2 user_number		fixed bin(35),	/* number under which the user is signed on */
  4    59 	  2 latent_expression	unaligned pointer,	/* -> value_bead for QuadLX */
  4    60 	  2 lock			char(32),		/* the lock currently set on this workspace (password) */
  4    61 	  2 wsid			char(100),	/* the workspace identification: name, number name, or clear ws */
  4    62 	  2 last_error_code		fixed bin(35),	/* last code passed to apl_error_ */
  4    63 	  2 signoff_lock		character (32),
  4    64 
  4    65 	  2 interrupt_info		aligned,		/* bits used by apl_interpreter_ to tell when to abort */
  4    66 	    3 dont_interrupt_parse	bit,		/* if 1, don't do a dirty stop because the parser is running */
  4    67 	    3 dont_interrupt_operator	bit,		/* if 1, don't do a dirty stop because an operator is running */
  4    68 	    3 dont_interrupt_storage_manager		/* if 1, don't stop because apl_storage_mngr_ is */
  4    69 				bit,		/*       munging his tables */
  4    70 	    3 unused_interrupt_bit	bit,		/* not presently used */
  4    71 	    3 dont_interrupt_command	bit,
  4    72 	    3 can_be_interrupted	bit,		/* if 1, OK to do a clean stop (we are between lines, reading) */
  4    73 	    3 clean_interrupt_pending	bit,		/* interrupt occured, break cleanly (between lines) */
  4    74 	    3 dirty_interrupt_pending	bit,		/* interrupt occured, break as soon as not inhibited */
  4    75 
  4    76 	  2 user_name		char (32),	/* process group id of user */
  4    77 	  2 immediate_input_prompt	char (32) varying,	/* normal input */
  4    78 	  2 evaluated_input_prompt	char (32) varying,	/* quad input */
  4    79 	  2 character_input_prompt	char (32) varying,	/* quad-quote input */
  4    80 	  2 vcpu_time		aligned,
  4    81 	    3 total		fixed bin (71),
  4    82 	    3 setup		fixed bin (71),
  4    83 	    3 parse		fixed bin (71),
  4    84 	    3 lex			fixed bin (71),
  4    85 	    3 operator		fixed bin (71),
  4    86 	    3 storage_manager	fixed bin (71),
  4    87 	  2 output_info		aligned,		/* data pertaining to output buffer */
  4    88 	    3 output_buffer_ptr	unal ptr,		/* ptr to output buffer */
  4    89 	    3 output_buffer_len	fixed bin (21),	/* length (bytes) of output buffer */
  4    90 	    3 output_buffer_pos	fixed bin (21),	/* index of next byte to write in */
  4    91 	    3 output_buffer_ll	fixed bin (21),	/* print positions used up so far */
  4    92 	  2 tab_width		fixed bin (21);	/* number of columns a tabs moves cursor */
  4    93 
  4    94 declare	output_buffer char (ws_info.output_buffer_len) based (ws_info.output_buffer_ptr);
  4    95 
  4    96 /* internal static */
  4    97 
  4    98 declare	max_parse_stack_depth fixed bin int static init(64536);
  4    99 
  4   100 /* ------ END INCLUDE SEGMENT		apl_ws_info.incl.pl1 -------------------------------------- */
       67 
       68 
       69 /* program */
       70 
       71 	not_erased_msg = "";
       72 
       73 	call apl_create_save_frame_;			/* operate on global meanings */
       74 	do argno = 1 to nargs;			/* process each argument, left to right */
       75 
       76 	     call apl_get_symbol_ (rtrim (arglist (argno)), symb, (0));
       77 	     call expunge (symb);
       78 	     call wash (symb);
       79 	end;
       80 
       81 	call apl_destroy_save_frame_update_;
       82 
       83 	if length (not_erased_msg) > 0
       84 	then do;
       85 		not_erased_msg = not_erased_msg || NL;
       86 		call iox_$put_chars (apl_static_$apl_output, addrel (addr (not_erased_msg), 1), length (not_erased_msg),
       87 		     code);
       88 	     end;
       89 
       90 	return;
       91 
       92 wash:
       93      proc (abp);
       94 
       95 dcl	abp		unaligned pointer parameter,
       96 	bp		unaligned pointer automatic;
       97 
       98 	bp = abp;
       99 	bp -> general_bead.reference_count = bp -> general_bead.reference_count - 1;
      100 	if bp -> general_bead.reference_count <= 0
      101 	then call apl_free_bead_ (bp);
      102      end;
      103 
      104 expunge:
      105      proc (abp);
      106 
      107 dcl	memx		fixed bin,
      108 	abp		unaligned pointer parameter,
      109 	bp		unaligned pointer automatic;
      110 
      111 	bp = abp;
      112 	if bp -> symbol_bead.meaning_pointer = null
      113 	then do;
      114 		call not_erased (bp -> symbol_bead.name);
      115 		return;
      116 	     end;
      117 
      118 	if bp -> symbol_bead.meaning_pointer -> general_bead.type.group
      119 	then do memx = 1 to bp -> symbol_bead.meaning_pointer -> group_bead.number_of_members;
      120 
      121 /* erase the members of a group */
      122 
      123 		call expunge (bp -> symbol_bead.meaning_pointer -> group_bead.member (memx));
      124 	     end;
      125 
      126 	if bp -> symbol_bead.meaning_pointer -> general_bead.function
      127 	then if apl_pendant_function_check_ (bp -> symbol_bead.meaning_pointer)
      128 	     then do;
      129 		     call not_erased (bp -> symbol_bead.name);
      130 		     return;
      131 		end;
      132 
      133 	call wash (bp -> symbol_bead.meaning_pointer);
      134 	bp -> symbol_bead.meaning_pointer = null;
      135 	return;
      136 
      137 not_erased:
      138      procedure (P_name);
      139 
      140 /* parameters */
      141 
      142 declare	P_name		char (*) parameter;
      143 
      144 /* program */
      145 
      146 	if length (not_erased_msg) = 0
      147 	then not_erased_msg = "not erased: ";
      148 
      149 /* Is there room to fit the text on the current output line, and is there room to fit the text in
      150*   the output buffer? Note that the NL doesn't count in the first test, but does count in the second. */
      151 
      152 	if (length (not_erased_msg) + length (P_name) + 1 > ws_info.width)
      153 	     | (length (not_erased_msg) + length (P_name) + 1 >= maxlength (not_erased_msg))
      154 	then do;
      155 		not_erased_msg = not_erased_msg || NL;
      156 		call iox_$put_chars (apl_static_$apl_output, addrel (addr (not_erased_msg), 1), length (not_erased_msg),
      157 		     code);
      158 		not_erased_msg = "";
      159 	     end;
      160 
      161 	not_erased_msg = not_erased_msg || " ";
      162 	not_erased_msg = not_erased_msg || P_name;
      163 	return;
      164 
      165      end /* not_erased */;
      166 
      167      end /* expunge */;
      168 
      169      end /* apl_erase_command_ */;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/29/83  1346.3  apl_erase_command_.pl1            >special_ldd>on>apl.1129>apl_erase_command_.pl1
64           1    03/27/82  0438.5  apl_bead_format.incl.pl1          >ldd>include>apl_bead_format.incl.pl1
65           2    03/27/82  0438.7  apl_group_bead.incl.pl1           >ldd>include>apl_group_bead.incl.pl1
66           3    03/27/82  0439.2  apl_symbol_bead.incl.pl1          >ldd>include>apl_symbol_bead.incl.pl1
67           4    03/27/82  0439.2  apl_ws_info.incl.pl1              >ldd>include>apl_ws_info.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
NL                              000525 constant        char(1)                  initial unaligned dcl 59 ref 85 155
P_name                                 parameter       char                     unaligned dcl 142 ref 137 152 152 162
abp                                    parameter       pointer                  unaligned dcl 107 in procedure "expunge" ref 104 111
abp                                    parameter       pointer                  unaligned dcl 95 in procedure "wash" ref 92 98
addr                                                   builtin function         dcl 37 ref 86 86 156 156
addrel                                                 builtin function         dcl 37 ref 86 86 156 156
apl_create_save_frame_          000010 constant        entry                    external dcl 42 ref 73
apl_destroy_save_frame_update_  000012 constant        entry                    external dcl 42 ref 81
apl_free_bead_                  000016 constant        entry                    external dcl 42 ref 100
apl_get_symbol_                 000014 constant        entry                    external dcl 42 ref 76
apl_pendant_function_check_     000020 constant        entry                    external dcl 42 ref 126
apl_static_$apl_output          000024 external static pointer                  dcl 54 set ref 86* 156*
apl_static_$ws_info_ptr         000026 external static structure                level 1 dcl 4-11
arglist                                parameter       char                     array unaligned dcl 25 ref 11 76 76
argno                           000100 automatic       fixed bin(17,0)          dcl 30 set ref 74* 76 76*
bead_type                              based           structure                level 3 packed unaligned dcl 1-3
bp                              000101 automatic       pointer                  unaligned dcl 107 in procedure "expunge" set ref
                                                                                  111* 112 114 118 118 123 126 126 129 133 134
bp                              000100 automatic       pointer                  unaligned dcl 95 in procedure "wash" set ref 98* 99
                                                                                  99 100 100*
code                            000101 automatic       fixed bin(35,0)          dcl 30 set ref 86* 156*
function                  0(03)        based           bit(1)                   level 4 packed unaligned dcl 1-3 ref 126
general_bead                           based           structure                level 1 dcl 1-3
group                     0(04)        based           bit(1)                   level 4 packed unaligned dcl 1-3 ref 118
group_bead                             based           structure                level 1 dcl 2-7
iox_$put_chars                  000022 constant        entry                    external dcl 42 ref 86 156
length                                                 builtin function         dcl 37 ref 83 86 86 146 152 152 152 152 156 156
maxlength                                              builtin function         dcl 37 ref 152
meaning_pointer           3            based           pointer                  level 2 packed unaligned dcl 3-13 set ref 112 118
                                                                                  118 123 126 126* 133* 134*
member                    3            based           pointer                  array level 2 packed unaligned dcl 2-7 set ref 123*
memx                            000100 automatic       fixed bin(17,0)          dcl 107 set ref 118* 123*
name                      5            based           char                     level 2 packed unaligned dcl 3-13 set ref 114* 129*
name_length               4            based           fixed bin(17,0)          level 2 dcl 3-13 ref 114 114 129 129
nargs                                  parameter       fixed bin(17,0)          dcl 25 ref 11 74
not_erased_msg                  000102 automatic       varying char(150)        dcl 30 set ref 71* 83 85* 85 86 86 86 86 146 146*
                                                                                  152 152 152 155* 155 156 156 156 156 158* 161* 161
                                                                                  162* 162
null                                                   builtin function         dcl 37 ref 112 134
number_of_members         2            based           fixed bin(17,0)          level 2 dcl 2-7 ref 118
reference_count           1            based           fixed bin(29,0)          level 2 dcl 1-3 set ref 99* 99 100
rtrim                                                  builtin function         dcl 37 ref 76 76
static_ws_info_ptr              000026 external static pointer                  level 2 packed unaligned dcl 4-11 ref 4-7
symb                            000151 automatic       pointer                  unaligned dcl 30 set ref 76* 77* 78*
symbol_bead                            based           structure                level 1 dcl 3-13
type                                   based           structure                level 2 packed unaligned dcl 1-3
values                    2            based           structure                level 2 dcl 4-16
width                     3            based           fixed bin(17,0)          level 3 dcl 4-16 ref 152
ws_info                                based           structure                level 1 dcl 4-16
ws_info_ptr                     000152 automatic       pointer                  initial dcl 4-7 set ref 4-7* 152

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
character_value_type                   internal static bit(18)                  initial unaligned dcl 1-30
complex_value_type                     internal static bit(18)                  initial unaligned dcl 1-30
function_type                          internal static bit(18)                  initial unaligned dcl 1-30
group_type                             internal static bit(18)                  initial unaligned dcl 1-30
integral_value_type                    internal static bit(18)                  initial unaligned dcl 1-30
label_type                             internal static bit(18)                  initial unaligned dcl 1-30
lexed_function_type                    internal static bit(18)                  initial unaligned dcl 1-30
list_value_type                        internal static bit(18)                  initial unaligned dcl 1-30
max_parse_stack_depth                  internal static fixed bin(17,0)          initial dcl 4-98
not_integer_mask                       internal static bit(18)                  initial unaligned dcl 1-30
not_zero_or_one_mask                   internal static bit(18)                  initial unaligned dcl 1-30
numeric_value_type                     internal static bit(18)                  initial unaligned dcl 1-30
operator_type                          internal static bit(18)                  initial unaligned dcl 1-30
output_buffer                          based           char                     unaligned dcl 4-94
shared_variable_type                   internal static bit(18)                  initial unaligned dcl 1-30
symbol_type                            internal static bit(18)                  initial unaligned dcl 1-30
value_type                             internal static bit(18)                  initial unaligned dcl 1-30
zero_or_one_value_type                 internal static bit(18)                  initial unaligned dcl 1-30

NAMES DECLARED BY EXPLICIT CONTEXT.
apl_erase_command_              000023 constant        entry                    external dcl 11
expunge                         000252 constant        entry                    internal dcl 104 ref 77 123
not_erased                      000411 constant        entry                    internal dcl 137 ref 114 129
wash                            000220 constant        entry                    internal dcl 92 ref 78 133

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       672         722     527         702
Length      1176     527        30         237     143           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
apl_erase_command_                  132 external procedure  is an external procedure.  
wash                                 70 internal procedure  is called by several nonquick procedures.  
expunge                             102 internal procedure  calls itself recursively.  
not_erased                              internal procedure  shares stack frame of internal procedure expunge.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
apl_erase_command_       000100 argno                       apl_erase_command_
                         000101 code                        apl_erase_command_
                         000102 not_erased_msg              apl_erase_command_
                         000151 symb                        apl_erase_command_
                         000152 ws_info_ptr                 apl_erase_command_
expunge                  000100 memx                        expunge
                         000101 bp                          expunge
wash                     000100 bp                          wash

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
alloc_cs            call_ext_out_desc   call_ext_out        call_int_this       call_int_other      return
shorten_stack       ext_entry_desc      int_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
apl_create_save_frame_        apl_destroy_save_frame_update_                              apl_free_bead_
apl_get_symbol_               apl_pendant_function_check_   iox_$put_chars

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
apl_static_$apl_output        apl_static_$ws_info_ptr




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000017    4    7 000036        71 000040        73 000041        74 000045        76 000055        77 000135
     78 000144        79 000152        81 000154        83 000161        85 000163        86 000172        90 000216
     92 000217        98 000225        99 000235       100 000240       102 000250       104 000251       111 000257
    112 000267       114 000274       115 000307       118 000310       123 000323       124 000334       126 000336
    129 000360       130 000374       133 000375       134 000405       135 000410       137 000411       146 000422
    152 000432       155 000443       156 000452       158 000476       161 000500       162 000507       163 000523


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
