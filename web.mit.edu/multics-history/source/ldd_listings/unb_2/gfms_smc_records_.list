	COMPILATION LISTING OF SEGMENT gfms_smc_records_
	Compiled by: Multics PL/I Compiler, Release 28d, of October 4, 1983
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 12/10/84  1209.3 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 gfms_smc_records_: proc ();
        7 
        8 /* Display SMC records information.
        9*
       10*   Author: Dave Ward	10/02/80
       11*   Change: Dave Ward	10/20/80 verify EOF record.
       12*   Change: Dave Ward	11/05/80 add type 6 cat info to tree.
       13*   Change: Dave Ward	11/08/80 hash catalog.
       14*   Change: Ron Barstad        11/24/82 fix bug preventing unload of master save
       15*	                             --must ignore type "77"b3  records
       16**/
       17 
       18 	call ioa ("^|SMC RECORDS INFORMATION:");
       19 	tc = 0;					/* Total count of catalog records. */
       20 	do i = 1 by 1 while (get_rec ());
       21 	     call ioa (
       22 		"^6i. (block^6i)  size^6i  record-size^6i"
       23 		, i
       24 		, block_serial_number
       25 		, block_size
       26 		, record_size
       27 		);
       28 
       29 /* Display smc records. */
       30 	     rl = nw-1;				/* Remaining length (words) for catalog records. */
       31 	     if mod (rl, size (gfms_catrec_6)) ^= 0 then do;
       32 		call com_err_ (
       33 		     0
       34 		     , "gfms_smc_records_"
       35 		     , "Not modulo (^i) number of words for catalog records (^i)"
       36 		     , size (gfms_catrec_6)
       37 		     , rl
       38 		     );
       39 fail:		;
       40 		signal cond (gfms_fail);
       41 	     end;
       42 
       43 /* Set pointer to initial catalog record. */
       44 	     cat_ptr = addr (type6_records);
       45 
       46 	     do while (rl>0);
       47 		tc = tc+1;			/* Catalog record count. */
       48 		call ioa ("^8x[^6i] type 6 catalog.", tc);
       49 		if gfms_catrec_6.type = "77"b3 then goto cont;
       50 		if gfms_catrec_6.type ^= "06"b3 then do;
       51 		     call com_err_ (
       52 			0
       53 			, "gfms_smc_records_"
       54 			, "SMC NOT TYPE 6 RECORD"
       55 			);
       56 		     call gfms_dump_rec_ (cat_ptr, 64);
       57 		     goto fail;
       58 		end;
       59 
       60 		do j = 1 to hbound (smc_entry, 1);	/* Process type 6 catalog smc entries. */
       61 		     if (smc_name (j) = "0"b) | (smc_name (j) = (12)"20"b3) then goto cont;
       62 		     call cat_6_entry (
       63 			j
       64 			, gfms_catrec_6.dupl_sector_no
       65 			, addr (gfms_catrec_6.smc_entry (j))
       66 			);
       67 		end;
       68 cont:		;
       69 		if j = 1 then call ioa ("^17xNO ENTRIES.");
       70 
       71 		rl = rl - size (gfms_catrec_6);
       72 		if rl > 0 then
       73 		     cat_ptr = addrel (cat_ptr, size (gfms_catrec_6));
       74 	     end;
       75 	end;
       76 	return;
       77 
       78 cat_6_entry: proc (j, ps, smcep);
       79 
       80 /* Provide tree description information from type 6 catalog
       81*   smc entry. "j" is index to entry. "ps" is parent sector,
       82*   "smcep" locates smc entry.
       83**/
       84 dcl  j                        fixed bin parm;
       85 dcl  ps                       fixed bin(18)unsigned unal parm;
       86 dcl  smcep                    ptr parm;
       87 	     n = rtrim (gfms_ascii_ ((smce.smc_name)));
       88 	     call ioa (
       89 		"^17x^1i. ^12a ^[^^on-device^; on-device^] cat-0-sector ^6i"
       90 		||"^/^20xparent ^6i cat-llinks ^6i allowed ^2.3b llinks-in-use ^6i max-llinks ^[unlimited^s^;^6i^]"
       91 /* line 1 values. */
       92 		, j
       93 		, n
       94 		, smce.umc_on_device
       95 		, smce.umc_llink*5			/* sector of child (type 0 catalog). */
       96 /* line 2 values. */
       97 		, ps				/* sector or parent. */
       98 		, smce.catalog_llinks
       99 		, string (smce.smc_perms)
      100 		, smce.llinks_in_use
      101 		, smce.llinks_allowed = 0
      102 		, smce.llinks_allowed
      103 		);
      104 
      105 	     call gfms_hash_cat_ (
      106 		smce.smc_name			/* (input) name BCD. */
      107 		, n				/* (input) name ASCII. */
      108 		, "1"b				/* (input) entry is catalog. */
      109 		, ps				/* (input) sector of parent. */
      110 		, smce.umc_llink*5			/* (input) sector of child. */
      111 		);
      112 	     return;
      113 
      114 dcl  n                        char(12)var;
      115 dcl 1 smce aligned based(smcep) like gfms_catrec_6.smc_entry;
      116 	end cat_6_entry;
      117 
      118 get_rec:	proc returns (bit (1));
      119 
      120 /* Obtain the next SMC record from tape.
      121*   Return "0"b when record read is the EOF record
      122*   (position past the EOF record).
      123*   Return "1"b when SMC record read.
      124**/
      125 	     call iox_$read_record (
      126 		cbp				/* (input) pointer to control block. */
      127 		, addr (smc_space)			/* (input) record buffer. */
      128 		, size (smc_space)*4		/* (input) buffer length in bytes. */
      129 		, nbr				/* (output) number of bytes read. */
      130 		, code				/* (output) I/O system status. */
      131 		);
      132 	     if code ^= 0 then
      133 		if code = error_table_$end_of_info then
      134 		     if gfms_end_of_input_ (
      135 		     addr (smc_space)		/* (input) pointer to input buffer. */
      136 		     , size (smc_space)*4		/* (input) length of buffer (bytes). */
      137 		     , nbr			/* (input/output) current number bytes in buffer. */
      138 		     ) then do;			/* No more tape input. */
      139 			call com_err_ (
      140 			     0
      141 			     , "gfms_substructure_records_"
      142 			     , "End of tape input reached in SMC records."
      143 			     );
      144 			signal cond (gfms_fail);
      145 		     end;
      146 		     else goto cont;		/* Next reel in process. */
      147 		else
      148 		if code ^= error_table_$long_record then do;
      149 		     call com_err_ (
      150 			code
      151 			, "gfms_smc_records_"
      152 			, "Attempting to read smc record."
      153 			||"^/Tape status ^4.3b"
      154 			||"^/buffer length ^i (bytes)."
      155 			||"^/bytes read ^i."
      156 			||"^/attach description ""^a"""
      157 			, gfms_tape_status_ (cbp)
      158 			, size (smc_space)*4
      159 			, nbr
      160 			, attach_description
      161 			);
      162 fail:		     ;
      163 		     signal cond (gfms_fail);
      164 		end;
      165 
      166 /* Assure length in words is conistent. */
      167 cont:	     ;
      168 	     if mod (nbr, 4) ^= 0 then
      169 		call com_err_ (
      170 		0
      171 		, "gfms_smc_records_"
      172 		, "Bytes read (^i) not word modulo, will truncate to word and continue."
      173 		, nbr
      174 		);
      175 	     nwr = divide (nbr, 4, 17);		/* Number of words read. */
      176 	     nw = nwr-1;				/* upper bound of smc structure. */
      177 	     if nw < 2 then do;
      178 		call com_err_ (
      179 		     0
      180 		     , "gfms_smc_records_"
      181 		     , "Record ^i bytes long (<2 words)"
      182 		     , nbr
      183 		     );
      184 		goto fail;
      185 	     end;
      186 
      187 /* Determine if EOF record reached. */
      188 	     if smc.eof_mark = "170017"b3 then do;
      189 		p = addr (smc_space);
      190 		if p -> k65 ^= 65
      191 		| p -> k64 ^= 64
      192 		| p -> EOF_number ^= 1 then
      193 		     call com_err_ (
      194 		     0
      195 		     , "gfms_smc_records_"
      196 		     , "Faulty EOF record. Continuing."
      197 		     ||"^/1st 4 words:^4( ^12.3b^)"
      198 		     , unspec (p -> EOF_record.word0)
      199 		     , unspec (p -> EOF_record.word1)
      200 		     , unspec (p -> EOF_record.word2)
      201 		     , unspec (p -> EOF_record.word3)
      202 		     );
      203 		call ioa (
      204 		     "^6i. (block^6i) EOF record."
      205 		     , i
      206 		     , p -> EOF_record.bsn
      207 		     );
      208 		return ("0"b);
      209 	     end;
      210 	     return ("1"b);
      211 
      212 dcl  p                        ptr;
  1     1 /* BEGIN INCLUDE FILE gfms_EOF_record.incl.pl1   (Wardd Multics)  10/20/80 1108.9 mst Mon */
  1     2 
  1     3 /* See DD14, Rev 1 (June 1976) SYSTEM TABLES
  1     4*   Pages 16-26 & 27 EOF RECORD (66 words)
  1     5**/
  1     6 dcl 1 EOF_record		aligned based
  1     7 ,     3 word0
  1     8 ,       4 bsn		fixed bin(18)unsigned unal
  1     9 ,       4 k65		fixed bin(18)unsigned unal
  1    10 ,     3 word1
  1    11 ,       4 k64		fixed bin(18)unsigned unal
  1    12 ,       4 k170017		bit(18)unal
  1    13 ,     3 word2
  1    14 ,       4 EOF_number	fixed bin(18)unsigned unal
  1    15 ,       4 zero		fixed bin(18)unsigned unal
  1    16 ,     3 word3		fixed bin(35)
  1    17 ,     3 words4_65		(4:65)bit(36)
  1    18 ;
  1    19 
  1    20 /*   END INCLUDE FILE gfms_EOF_record.incl.pl1 */
      213 
      214 	end get_rec;
      215 
      216 /*  Variables for gfms_smc_records_:			*/
      217 /*   IDENTIFIER		ATTRIBUTES	*/
      218 dcl  addr                     builtin;
      219 dcl  addrel                   builtin;
      220 dcl  cat_ptr                  ptr init(null());
      221 dcl  code                     fixed bin(35);
      222 dcl  com_err_                 entry() options(variable);
      223 dcl  divide                   builtin;
      224 dcl  error_table_$end_of_info fixed bin(35) ext static;
      225 dcl  error_table_$long_record fixed bin(35) ext static;
      226 dcl  gfms_ascii_              entry(bit(*))returns(char(*));
      227 dcl  gfms_dump_rec_           entry (ptr,fixed bin);
      228 dcl  gfms_end_of_input_       entry (ptr, fixed bin(21), fixed bin(21)) returns(bit(1));
      229 dcl  gfms_fail                condition ext;
      230 dcl  gfms_hash_cat_           entry (bit(72) aligned, char(12) var, bit(1), uns fixed bin(18) unal, uns fixed bin(18));
      231 dcl  gfms_tape_status_        entry (ptr) returns(bit(12));
      232 dcl  hbound                   builtin;
      233 dcl  i                        fixed bin;
      234 dcl  iox_$read_record         entry (ptr, ptr, fixed bin(21), fixed bin(21), fixed bin(35));
      235 dcl  j                        fixed bin;
      236 dcl  mod                      builtin;
      237 dcl  nbr                      fixed bin(21);
      238 dcl  null                     builtin;
      239 dcl  nw                       fixed bin;
      240 dcl  nwr                      fixed bin;
      241 dcl  rl                       fixed bin;
      242 dcl  rtrim                    builtin;
      243 dcl  size                     builtin;
      244 dcl  smc_space                (3842)bit(36)aligned;
      245 dcl  string                   builtin;
      246 dcl  tc                       fixed bin;
      247 dcl  unspec                   builtin;
      248 dcl  w                        (0:63)bit(36)aligned based(cat_ptr);
      249 
      250 /* See DD14, Rev 1 (June 1976) SYSTEM TABLES
      251*   Page 16-25 SMC RECORDS (<=3842 words)
      252**/
      253 dcl 1 smc			aligned based(addr(smc_space))
      254 ,     3 word0
      255 ,       4 block_serial_number	fixed bin(18)unsigned unal
      256 ,       4 block_size	fixed bin(18)unsigned unal
      257 ,     3 word1
      258 ,       4 record_size	fixed bin(18)unsigned unal
      259 ,       4 eof_mark		bit(18)unal
      260 ,     3 words2_3841
      261 ,       4 type6_records	(2:nw)bit(36)
      262 ;
      263 
  2     1 /* BEGIN INCLUDE FILE gfms_catrec_6.incl.pl1 (MWilson) 26Aug79 */
  2     2 /* Change: Dave Ward	11/05/80 expanded llink counts. */
  2     3 
  2     4 dcl 1 gfms_catrec_6			aligned based(cat_ptr),
  2     5 
  2     6 /* word 0 */
  2     7     2 type			bit(06) unal,
  2     8     2 smc_section_no		bit(05) unal,
  2     9     2 user_no			bit(07) unal,
  2    10     2 dupl_sector_no		fixed bin(18)unsigned unal,
  2    11 
  2    12 /* word 1 */
  2    13     2 next_sector_org_this_section	fixed bin(18)unsigned unal,
  2    14     2 next_sector_dupl_this_section	fixed bin(18)unsigned unal,
  2    15 
  2    16 
  2    17 /* words 2 - 61 */
  2    18     2 smc_entry		(5),
  2    19 
  2    20       3 smc_name			bit(72),
  2    21 
  2    22       3 umc_on_device		bit(01)unal,
  2    23       3 umc_llink			fixed bin(17)unsigned unal,
  2    24       3 umc_device			bit(18) unal,
  2    25 
  2    26       3 dup_umc_ptr			bit(36),
  2    27 
  2    28       3 space_time_product		fixed bin(35),
  2    29 
  2    30       3 llink_counts,
  2    31         4 llinks_in_use		fixed bin(18)unsigned unal,
  2    32         4 llinks_allowed		fixed bin(18)unsigned unal,
  2    33 
  2    34       3 pad			bit(09) unal,
  2    35       3 catalog_llinks		fixed bin(09)unsigned unal,
  2    36       3 time_last_space_change	bit(18) unal,
  2    37 
  2    38       3 tss_resources		fixed bin(18)unsigned unal,
  2    39       3 smc_perms		unal,
  2    40         4 allow_LODX		bit(01)unal,
  2    41         4 allow_CARDIN		bit(01)unal,
  2    42         4 allow_TALK		bit(01)unal,
  2    43         4 allow_LODS		bit(01)unal,
  2    44         4 SMC_update_not_by_TS		bit(01)unal,
  2    45         4 SMC_update_by_TS	bit(01)unal,
  2    46       3 bcd_urgency			bit(12) unal,
  2    47 
  2    48       3 password			bit(72),
  2    49 
  2    50       3 pad1			bit(36),
  2    51 
  2    52       3 pad2			bit(10) unal,
  2    53       3 tss_resources_used		fixed bin(26)unsigned unal,
  2    54 
  2    55 /* word 62 */
  2    56     2 pad				bit(36),
  2    57 
  2    58 /* word 63 */
  2    59     2 cksm			bit(36);
  2    60 
  2    61 /* END INCLUDE FILE gfms_catrec_6.incl.pl1 */
      264 
      265 
  3     1 /* BEGIN INCLUDE FILE gfms_ext.incl.pl1   (Wardd Multics)  10/07/80 2142.2 mst Tue */
  3     2 /* Modified by:	S. C. Akers	02/08/82	Add gfms_ext$working_dir,
  3     3*						   mapping_rule,
  3     4*						   umc_name 
  3     5*   Modified  Ron Barstad  83-06-03  attach_desc from 40 to 80 char
  3     6**/
  3     7 
  3     8 dcl 1 gfms_ext$print_routines	aligned ext
  3     9 ,     3 ioa		entry variable options(variable)
  3    10 ,     3 ioa_nnl		entry variable options(variable)
  3    11 ;
  3    12 
  3    13 dcl 1 gfms_ext$temp_segs	aligned ext
  3    14 ,     3 dtp		ptr
  3    15 ,     3 nlp		ptr
  3    16 ,     3 inp		ptr
  3    17 ;
  3    18 
  3    19 dcl 1 gfms_ext$tape_file	aligned ext
  3    20 ,     3 cbp		ptr
  3    21 ,     3 attach_description	char(80)unal
  3    22 ,     3 density
  3    23 ,       4 ftd		fixed bin	/* First tape density to attempt. */
  3    24 ,       4 ltd		fixed bin	/* Last tape density to attempt. */
  3    25 ,     3 tape_reel_information
  3    26 ,       4 reel_serial_num	char(6)
  3    27 ,       4 file_serial_num	char(6)
  3    28 ,       4 reel_sequence_num	char(6)
  3    29 ;
  3    30 
  3    31 dcl 1 gfms_ext$options	aligned ext
  3    32 ,     3 close		bit(1)unal	/* perform iox close. */
  3    33 ,     3 detach		bit(1)unal	/* perform iox detach. */
  3    34 ,     3 dump		bit(1)unal	/* dump tape records/information. */
  3    35 ,     3 gf		bit(1)unal	/* provide gtss file attributes. */
  3    36 ,     3 prfn		bit(1)unal	/* print file names. */
  3    37 ,     3 scan_ss		bit(1)unal	/* scan substructure, display, quit. */
  3    38 ,     3 tll		bit(1)unal	/* print totals of llinks. */
  3    39 ,     3 unload		bit(1)unal	/* unload files. */
  3    40 ,     3 NOT_IN_USE		bit(28)unal
  3    41 ;
  3    42 
  3    43 dcl  gfms_ext$working_dir	char (168) var ext static;	/* Where to restore the files.
  3    44*						   It may be the user's working
  3    45*						   directory, or the UMC or SMC directory. */
  3    46 
  3    47 dcl  gfms_ext$mapping_rule	char(3) external static;
  3    48 
  3    49 dcl  gfms_ext$umc_name	char(12) external static;
  3    50 
  3    51 /*   END INCLUDE FILE gfms_ext.incl.pl1 */
      266 
      267      end gfms_smc_records_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    12/10/84  1042.0  gfms_smc_records_.pl1             >spec>on>7105>gfms_smc_records_.pl1
213          1    03/27/82  0424.8  gfms_EOF_record.incl.pl1          >ldd>include>gfms_EOF_record.incl.pl1
264          2    03/27/82  0424.8  gfms_catrec_6.incl.pl1            >ldd>include>gfms_catrec_6.incl.pl1
266          3    10/24/83  1642.4  gfms_ext.incl.pl1                 >ldd>include>gfms_ext.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
EOF_number                2            based           fixed bin(18,0)          level 3 packed unsigned unaligned dcl 1-6 ref 190
EOF_record                             based           structure                level 1 dcl 1-6
addr                                                   builtin function         dcl 218 ref 21 21 21 44 44 62 62 125 125 132 132 188
                                                                                  189
addrel                                                 builtin function         dcl 219 ref 72
attach_description        2     000034 external static char(80)                 level 2 packed unaligned dcl 3-19 set ref 149*
block_serial_number                    based           fixed bin(18,0)          level 3 packed unsigned unaligned dcl 253 set ref
                                                                                  21*
block_size                0(18)        based           fixed bin(18,0)          level 3 packed unsigned unaligned dcl 253 set ref
                                                                                  21*
bsn                                    based           fixed bin(18,0)          level 3 packed unsigned unaligned dcl 1-6 set ref
                                                                                  203*
cat_ptr                         000100 automatic       pointer                  initial dcl 220 set ref 31 32 32 44* 49 50 56* 60 61
                                                                                  61 62 62 62 71 72* 72 72 220*
catalog_llinks            6(09)        based           fixed bin(9,0)           level 2 packed unsigned unaligned dcl 115 set ref
                                                                                  88*
cbp                             000034 external static pointer                  level 2 dcl 3-19 set ref 125* 149* 149*
code                            000102 automatic       fixed bin(35,0)          dcl 221 set ref 125* 132 132 147 149*
com_err_                        000010 constant        entry                    external dcl 222 ref 32 51 139 149 168 178 190
divide                                                 builtin function         dcl 223 ref 175
dupl_sector_no            0(18)        based           fixed bin(18,0)          level 2 packed unsigned unaligned dcl 2-4 set ref
                                                                                  62*
eof_mark                  1(18)        based           bit(18)                  level 3 packed unaligned dcl 253 ref 188
error_table_$end_of_info        000012 external static fixed bin(35,0)          dcl 224 ref 132
error_table_$long_record        000014 external static fixed bin(35,0)          dcl 225 ref 147
gfms_ascii_                     000016 constant        entry                    external dcl 226 ref 87
gfms_catrec_6                          based           structure                level 1 dcl 2-4 set ref 31 32 32 71 72
gfms_dump_rec_                  000020 constant        entry                    external dcl 227 ref 56
gfms_end_of_input_              000022 constant        entry                    external dcl 228 ref 132
gfms_ext$print_routines         000032 external static structure                level 1 dcl 3-8
gfms_ext$tape_file              000034 external static structure                level 1 dcl 3-19
gfms_fail                       000104 stack reference condition                dcl 229 ref 40 144 163
gfms_hash_cat_                  000024 constant        entry                    external dcl 230 ref 105
gfms_tape_status_               000026 constant        entry                    external dcl 231 ref 149 149
hbound                                                 builtin function         dcl 232 ref 60
i                               000112 automatic       fixed bin(17,0)          dcl 233 set ref 20* 21* 203*
ioa                             000032 external static entry variable           level 2 dcl 3-8 ref 18 21 48 69 88 203
iox_$read_record                000030 constant        entry                    external dcl 234 ref 125
j                               000113 automatic       fixed bin(17,0)          dcl 235 in procedure "gfms_smc_records_" set ref 60*
                                                                                  61 61 62* 62 62* 69
j                                      parameter       fixed bin(17,0)          dcl 84 in procedure "cat_6_entry" set ref 78 88*
k64                       1            based           fixed bin(18,0)          level 3 packed unsigned unaligned dcl 1-6 ref 190
k65                       0(18)        based           fixed bin(18,0)          level 3 packed unsigned unaligned dcl 1-6 ref 190
llink_counts              5            based           structure                level 2 dcl 115
llinks_allowed            5(18)        based           fixed bin(18,0)          level 3 packed unsigned unaligned dcl 115 set ref 88
                                                                                  88*
llinks_in_use             5            based           fixed bin(18,0)          level 3 packed unsigned unaligned dcl 115 set ref
                                                                                  88*
mod                                                    builtin function         dcl 236 ref 31 168
n                               007532 automatic       varying char(12)         dcl 114 set ref 87* 88* 105*
nbr                             000114 automatic       fixed bin(21,0)          dcl 237 set ref 125* 132* 149* 168 168* 175 178*
null                                                   builtin function         dcl 238 ref 220
nw                              000115 automatic       fixed bin(17,0)          dcl 239 set ref 30 176* 177
nwr                             000116 automatic       fixed bin(17,0)          dcl 240 set ref 175* 176
p                               007544 automatic       pointer                  dcl 212 set ref 189* 190 190 190 190 190 190 190 190
                                                                                  190 190 190 203
ps                                     parameter       fixed bin(18,0)          unsigned unaligned dcl 85 set ref 78 88* 105*
record_size               1            based           fixed bin(18,0)          level 3 packed unsigned unaligned dcl 253 set ref
                                                                                  21*
rl                              000117 automatic       fixed bin(17,0)          dcl 241 set ref 30* 31 32* 46 71* 71 72
rtrim                                                  builtin function         dcl 242 ref 87
size                                                   builtin function         dcl 243 ref 31 32 32 71 72 125 132 149
smc                                    based           structure                level 1 dcl 253
smc_entry                 2            based           structure                array level 2 dcl 2-4 set ref 60 62 62
smc_name                               based           bit(72)                  level 2 in structure "smce" dcl 115 in procedure
                                                                                  "cat_6_entry" set ref 87 105*
smc_name                  2            based           bit(72)                  array level 3 in structure "gfms_catrec_6" dcl 2-4
                                                                                  in procedure "gfms_smc_records_" set ref 61 61
smc_perms                 7(18)        based           structure                level 2 packed unaligned dcl 115 ref 88 88
smc_space                       000120 automatic       bit(36)                  array dcl 244 set ref 21 21 21 44 125 125 125 132
                                                                                  132 132 149 188 189
smce                                   based           structure                level 1 dcl 115
smcep                                  parameter       pointer                  dcl 86 ref 78 87 88 88 88 88 88 88 88 88 105 105
string                                                 builtin function         dcl 245 ref 88 88
tc                              007522 automatic       fixed bin(17,0)          dcl 246 set ref 19* 47* 47 48*
type                                   based           bit(6)                   level 2 packed unaligned dcl 2-4 ref 49 50
type6_records             2            based           bit(36)                  array level 3 dcl 253 set ref 44
umc_llink                 2(01)        based           fixed bin(17,0)          level 2 packed unsigned unaligned dcl 115 ref 88 105
umc_on_device             2            based           bit(1)                   level 2 packed unaligned dcl 115 set ref 88*
unspec                                                 builtin function         dcl 247 ref 190 190 190 190 190 190 190 190
word0                                  based           structure                level 2 in structure "smc" dcl 253 in procedure
                                                                                  "gfms_smc_records_"
word0                                  based           structure                level 2 in structure "EOF_record" dcl 1-6
                                                                                  in procedure "get_rec" set ref 190 190
word1                     1            based           structure                level 2 in structure "EOF_record" dcl 1-6
                                                                                  in procedure "get_rec" ref 190 190
word1                     1            based           structure                level 2 in structure "smc" dcl 253 in procedure
                                                                                  "gfms_smc_records_"
word2                     2            based           structure                level 2 dcl 1-6 ref 190 190
word3                     3            based           fixed bin(35,0)          level 2 dcl 1-6 ref 190 190
words2_3841               2            based           structure                level 2 dcl 253

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
gfms_ext$mapping_rule                  external static char(3)                  unaligned dcl 3-47
gfms_ext$options                       external static structure                level 1 dcl 3-31
gfms_ext$temp_segs                     external static structure                level 1 dcl 3-13
gfms_ext$umc_name                      external static char(12)                 unaligned dcl 3-49
gfms_ext$working_dir                   external static varying char(168)        dcl 3-43
w                                      based           bit(36)                  array dcl 248

NAMES DECLARED BY EXPLICIT CONTEXT.
cat_6_entry                     000707 constant        entry                    internal dcl 78 ref 62
cont                            000651 constant        label                    dcl 68 in procedure "gfms_smc_records_" ref 49 61
cont                            001324 constant        label                    dcl 167 in procedure "get_rec" set ref 132
fail                            000477 constant        label                    dcl 39 in procedure "gfms_smc_records_" ref 57
fail                            001320 constant        label                    dcl 162 in procedure "get_rec" ref 184
get_rec                         001122 constant        entry                    internal dcl 118 ref 20
gfms_smc_records_               000341 constant        entry                    external dcl 6

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1746        2004    1576        1756
Length      2246    1576        36         225     150           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
gfms_smc_records_                  4234 external procedure  is an external procedure.  
cat_6_entry                             internal procedure  shares stack frame of external procedure gfms_smc_records_.  
get_rec                                 internal procedure  shares stack frame of external procedure gfms_smc_records_.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
gfms_smc_records_        000100 cat_ptr                     gfms_smc_records_
                         000102 code                        gfms_smc_records_
                         000112 i                           gfms_smc_records_
                         000113 j                           gfms_smc_records_
                         000114 nbr                         gfms_smc_records_
                         000115 nw                          gfms_smc_records_
                         000116 nwr                         gfms_smc_records_
                         000117 rl                          gfms_smc_records_
                         000120 smc_space                   gfms_smc_records_
                         007522 tc                          gfms_smc_records_
                         007532 n                           cat_6_entry
                         007544 p                           get_rec

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_e_as              call_var_desc       call_ext_out_desc   call_ext_out        return              mod_fx1
signal              shorten_stack       ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      gfms_ascii_                   gfms_dump_rec_                gfms_end_of_input_
gfms_hash_cat_                gfms_tape_status_             iox_$read_record

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$end_of_info      error_table_$long_record      gfms_ext$print_routines       gfms_ext$tape_file




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
      6 000340       220 000346        18 000350        19 000363        20 000364        21 000373        30 000427
     31 000432        32 000435        39 000477        40 000500        44 000503        46 000505        47 000510
     48 000511        49 000534        50 000540        51 000542        56 000575        57 000610        60 000611
     61 000617        62 000630        67 000647        68 000651        69 000652        71 000674        72 000676
     74 000703        75 000704        76 000706        78 000707        87 000711        88 000761       105 001070
    112 001121       118 001122       125 001124       132 001150       139 001200       144 001230       145 001233
    147 001234       149 001236       162 001320       163 001321       167 001324       168 001325       175 001365
    176 001370       177 001372       178 001374       184 001430       188 001431       189 001435       190 001437
    203 001530       208 001554       210 001562


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
