	COMPILATION LISTING OF SEGMENT cobol_add3
	Compiled by: Multics PL/I Compiler, Release 31b, of April 24, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 05/24/89  0941.5 mst Wed
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        6*        *                                                         *
        7*        *********************************************************** */
        8 
        9 
       10 /****^  HISTORY COMMENTS:
       11*  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8060),
       12*     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
       13*     MCR8060 cobol_add3.pl1 Added Trace statements.
       14*                                                   END HISTORY COMMENTS */
       15 
       16 
       17 /* format: style3 */
       18 
       19 /* ******************************************************
       20*   *                                                    *
       21*   *                                                    *
       22*   * Copyright (c) 1972 by Massachusetts Institute of   *
       23*   * Technology and Honeywell Information Systems, Inc. *
       24*   *                                                    *
       25*   *                                                    *
       26*   ****************************************************** */
       27 
       28 /* Modified on 10/19/84 by FCH, [5.3-1], BUG563, new cobol_addr_tokens.incl.pl1 */
       29 /* Modified on 09/22/83  by FCH, [5.2...], trace added */
       30 
       31 cobol_add3:
       32      proc (operand1_ptr, operand2_ptr, result_ptr, opcode_code);
       33 
       34 	/***..... if Trace_Bit then call cobol_gen_driver_$Tr_Beg(MY_NAME);/**/
       35 
       36 
       37 /*
       38*This procedure generates code for the following types of Cobol constructs:
       39*
       40*	1. ADD A B GIVING C.
       41*	2. SUBTRACT A FROM B GIVING C.
       42*
       43*This procedure makes one important assumption about the 
       44*input operands:  The operands to be added (or subtracted) are
       45*both represented by data name (type 9) tokens.  That is, any
       46*conversion of the operands from numeric literal or figurative
       47*constant has already been done before this procedure is called.
       48*
       49**/
       50 
       51 /* Note that if the "rounded" bit is on in the token pointed at 
       52*by result_ptr, then the code generated will perform
       53*addition/subtraction with rounding.  */
       54 
       55 /*  DECLARATION OF THE PARAMETERS  */
       56 
       57 dcl	operand1_ptr	ptr;
       58 dcl	operand2_ptr	ptr;
       59 dcl	result_ptr	ptr;
       60 dcl	opcode_code	fixed bin (35);
       61 
       62 /*
       63*operand1_ptr	Points to the token for the addend or
       64*		minuend, depending on whether code is to
       65*		be generated for addition or subtraction,
       66*		respectively. (input)
       67*operand2_ptr	Points to the token for the augend or
       68*		subtrahend, depending on whether code is to be
       69*		generated for addition or subtraction,
       70*		respectively.  (input)
       71*result_ptr	Points to the token to receive the sum
       72*		or diffenence, depending on whether code it to
       73*		be generated for addition or subtraction,
       74*		respectively.  (input)
       75*opcode_code	A code that indicates whether code is to be generated
       76*		for an addition or subtraction.  (input)
       77*
       78*			opcode_code	| meaning
       79*			-------------------------------------
       80*				1	| addition
       81*				2	| subtraction
       82*
       83**/
       84 
       85 /*  DECLARATION OF EXTERNAL ENTRIES  */
       86 
       87 dcl	cobol_addr	ext entry (ptr, ptr, ptr);
       88 dcl	cobol_emit	ext entry (ptr, ptr, fixed bin);
       89 
       90 
       91 /*  DECLARATION OF INTERNAL STATIC VARIABLES  */
       92 
       93 /*  Declaration of internal static variables that contain
       94*	AdD3 and SUBTRACT3 opcodes  */
       95 
       96 dcl	add3_op		bit (10) int static init ("0100100101"b /*222(1)*/);
       97 dcl	subtract3_op	bit (10) int static init ("0100100111"b /*233(1)*/);
       98 
       99 
      100 /*  DECLARATION OF INTERNAL AUTOMATIC VARIABLES  */
      101 
      102 /*  Declaration of buffers used by the addressability utility  */
      103 
      104 /*  Relocation info buffer  */
      105 dcl	reloc_buffer	(1:10) fixed bin;
      106 
      107 /*  instruction/descriptor buffer  */
      108 dcl	addr_inst_buffer	(1:10) fixed bin;
      109 
      110 /*  addressability input buffer  */
      111 dcl	addr_input_buffer	(1:30) fixed bin;
      112 dcl	dn_ptr		ptr;
      113 
      114 
      115 /**************************************************/
      116 /*	START OF EXECUTION			*/
      117 /*	cobol_add3				*/
      118 /**************************************************/
      119 
      120 
      121 /*  Point pointers at the buffers used to establish addressability  */
      122 
      123 	reloc_ptr = addr (reloc_buffer (1));
      124 	input_ptr = addr (addr_input_buffer (1));
      125 	inst_ptr = addr (addr_inst_buffer (1));
      126 
      127 /*  Build the input structure to the addressability utility  */
      128 
      129 	input_struc.type = 6;			/*  eis, 3 input operands, instruction word and 3 descriptors returned  */
      130 	input_struc.operand_no = 3;
      131 	input_struc.lock = 0;			/*  no locks  */
      132 
      133 	input_struc.operand.token_ptr (1) = operand1_ptr;
      134 	input_struc.operand.send_receive (1) = 0;	/*  sending  */
      135 	input_struc.operand.size_sw (1) = 0;		/*  utility worries about size  */
      136 
      137 	input_struc.operand.token_ptr (2) = operand2_ptr;
      138 	input_struc.operand.send_receive (2) = 0;	/*  sending  */
      139 	input_struc.operand.size_sw (2) = 0;
      140 
      141 	input_struc.operand.token_ptr (3) = result_ptr;
      142 	input_struc.operand.send_receive (3) = 1;	/*  receiving  */
      143 	input_struc.operand.size_sw (3) = 0;
      144 
      145 /*  Set the proper opcode into the eis instruction  */
      146 	if opcode_code = 1				/*  add  */
      147 	then inst_struc.fill1_op = add3_op;
      148 	else inst_struc.fill1_op = subtract3_op;
      149 
      150 /*  Establish the addresses  */
      151 
      152 	call cobol_addr (input_ptr, inst_ptr, reloc_ptr);
      153 
      154 /*  Set the rounding bit in the eis instruction if necessary  */
      155 	if result_ptr -> data_name.rounded
      156 	then inst_struc.zero3 = "01"b;		/*  TRUNCATION OFF, ROUNDING ON  */
      157 
      158 /*  Emit the eis instruction and 3 descriptors  */
      159 
      160 	call cobol_emit (inst_ptr, reloc_ptr, 4);
      161 
      162 	/***..... if Trace_Bit then call cobol_gen_driver_$Tr_End(MY_NAME);/**/
      163 	return;
      164 
      165 
      166 	/***.....	dcl cobol_gen_driver_$Tr_Beg entry(char(*));/**/
      167 	/***.....	dcl cobol_gen_driver_$Tr_End entry(char(*));/**/
      168 
      169 	/***.....	dcl Trace_Bit bit(1) static external;/**/
      170 	/***.....	dcl Trace_Lev fixed bin static external;/**/
      171 	/***.....	dcl Trace_Line char(36) static external;/**/
      172 	/***.....	dcl ioa_ entry options(variable); /**/
      173 	/***..... dcl MY_NAME char (10) int static init ("COBOL_ADD3");/**/
      174 
      175 
      176 /*  INCLUDE FILES USED BY THIS PROCEDURE  */
      177 
      178 
      179 /*****	Declaration for builtin function	*****/
      180 
      181 dcl	(substr, mod, binary, fixed, addr, addrel, rel, length, string, unspec, null, index)
      182 			builtin;
      183 
      184 /*****	End of declaration for builtin function	*****/
      185 
  1     1 
  1     2 /* BEGIN INCLUDE FILE ... cobol_type9.incl.pl1 */
  1     3 /* Last modified on 11/19/76 by ORN */
  1     4 
  1     5 /*
  1     6*A type 9 data name token is entered into the name table by the data
  1     7*division syntax phase for each data name described in the data division.
  1     8*The replacement phase subsequently replaces type 8 user word references
  1     9*to data names in the procedure division minpral file with the corresponding
  1    10*type 9 tokens from the name table.
  1    11**/
  1    12 
  1    13 /* dcl dn_ptr ptr; */
  1    14 
  1    15 /* BEGIN DECLARATION OF TYPE9 (DATA NAME) TOKEN */
  1    16 dcl 1 data_name based (dn_ptr),
  2     1 
  2     2 /* begin include file ... cobol_TYPE9.incl.pl1 */
  2     3 /* Last modified on 06/19/77 by ORN */
  2     4 /* Last modified on 12/28/76 by FCH */
  2     5 
  2     6 		/* header */
  2     7 		2 size fixed bin,
  2     8 		2 line fixed bin,
  2     9 		2 column fixed bin,
  2    10 		2 type fixed bin,
  2    11 		/* body */
  2    12 		2 string_ptr ptr,
  2    13 		2 prev_rec ptr,
  2    14 		2 searched bit (1),
  2    15 		2 duplicate bit (1),
  2    16 		2 saved bit (1),
  2    17 		2 debug_ind bit (1),
  2    18 		2 filler2 bit (3),
  2    19 		2 used_as_sub bit (1),
  2    20 		2 def_line fixed bin,
  2    21 		2 level fixed bin,
  2    22 		2 linkage fixed bin,
  2    23 		2 file_num fixed bin,
  2    24 		2 size_rtn fixed bin,
  2    25 		2 item_length fixed bin(24),
  2    26 		2 places_left fixed bin,
  2    27 		2 places_right fixed bin,
  2    28 		/* description */
  2    29 		2 file_section bit (1),
  2    30 		2 working_storage bit (1),
  2    31 		2 constant_section bit (1),
  2    32 		2 linkage_section bit (1),
  2    33 		2 communication_section bit (1),
  2    34 		2 report_section bit (1),
  2    35 		2 level_77 bit (1),
  2    36 		2 level_01 bit (1),
  2    37 		2 non_elementary bit (1),
  2    38 		2 elementary bit (1),
  2    39 		2 filler_item bit (1),
  2    40 		2 s_of_rdf bit (1),
  2    41 		2 o_of_rdf bit (1),
  2    42 		2 bin_18 bit (1),
  2    43 		2 bin_36 bit (1),
  2    44 		2 pic_has_l bit (1),
  2    45 		2 pic_is_do bit (1),
  2    46 		2 numeric bit (1),
  2    47 		2 numeric_edited bit (1),
  2    48 		2 alphanum bit (1),
  2    49 		2 alphanum_edited bit (1),
  2    50 		2 alphabetic bit (1),
  2    51 		2 alphabetic_edited bit (1),
  2    52 		2 pic_has_p bit (1),
  2    53 		2 pic_has_ast bit (1),
  2    54 		2 item_signed bit(1),
  2    55 		2 sign_separate bit (1),
  2    56 		2 display bit (1),
  2    57 		2 comp bit (1),
  2    58 		2 ascii_packed_dec_h bit (1),	/* as of 8/16/76  this field used for comp8. */
  2    59 		2 ascii_packed_dec bit (1),
  2    60 		2 ebcdic_packed_dec bit (1),
  2    61 		2 bin_16 bit (1),
  2    62 		2 bin_32 bit (1),
  2    63 		2 usage_index bit (1),
  2    64 		2 just_right bit (1),
  2    65 		2 compare_argument bit (1),
  2    66 		2 sync bit (1),
  2    67 		2 temporary bit (1),
  2    68 		2 bwz bit (1),
  2    69 		2 variable_length bit (1),
  2    70 		2 subscripted bit (1),
  2    71 		2 occurs_do bit (1),
  2    72 		2 key_a bit (1),
  2    73 		2 key_d bit (1),
  2    74 		2 indexed_by bit (1),
  2    75 		2 value_numeric bit (1),
  2    76 		2 value_non_numeric bit (1),
  2    77 		2 value_signed bit (1),
  2    78 		2 sign_type bit (3),
  2    79 		2 pic_integer bit (1),
  2    80 		2 ast_when_zero bit (1),
  2    81 		2 label_record bit (1),
  2    82 		2 sign_clause_occurred bit (1),
  2    83 		2 okey_dn bit (1),
  2    84 		2 subject_of_keyis bit (1),
  2    85 		2 exp_redefining bit (1),
  2    86 		2 sync_in_rec bit (1),
  2    87 		2 rounded bit (1),
  2    88 		2 ad_bit bit (1),
  2    89 		2 debug_all bit (1),
  2    90 		2 overlap bit (1),
  2    91 		2 sum_counter bit (1),
  2    92 		2 exp_occurs bit (1),
  2    93 		2 linage_counter bit (1),
  2    94 		2 rnm_01 bit (1),
  2    95 		2 aligned bit (1),
  2    96 		2 not_user_writable bit (1),
  2    97 		2 database_key bit (1),
  2    98 		2 database_data_item bit (1),
  2    99 		2 seg_num fixed bin,
  2   100 		2 offset fixed bin(24),
  2   101 		2 initial_ptr fixed bin,
  2   102 		2 edit_ptr fixed bin,
  2   103 		2 occurs_ptr fixed bin,
  2   104 		2 do_rec char(5),
  2   105 		2 bitt bit (1),
  2   106 		2 byte bit (1),
  2   107 		2 half_word bit (1),
  2   108 		2 word bit (1),
  2   109 		2 double_word bit (1),
  2   110 		2 half_byte bit (1),
  2   111 		2 filler5 bit (1),
  2   112 		2 bit_offset bit (4),
  2   113 		2 son_cnt bit (16),
  2   114 		2 max_red_size fixed bin(24),
  2   115 		2 name_size fixed bin,
  2   116 		2 name char(0 refer(data_name.name_size));	
  2   117 
  2   118 
  2   119 
  2   120 /* end include file ... cobol_TYPE9.incl.pl1 */
  2   121 
  1    17 
  1    18 /* END DECLARATION OF TYPE9 (DATA NAME) TOKEN */
  1    19 
  1    20 /* END INCLUDE FILE ... cobol_type9.incl.pl1 */
  1    21 
      186 
      187 
      188 
  3     1 
  3     2 /* BEGIN INCLUDE FILE ...   cobol_addr_tokens.incl.pl1 */
  3     3 
  3     4 
  3     5 /****^  HISTORY COMMENTS:
  3     6*  1) change(89-04-23,Zimmerman), approve(89-04-23,MCR8058),
  3     7*     audit(89-05-05,RWaters), install(89-05-24,MR12.3-1048):
  3     8*     MCR8058 cobol_addr_tokens.incl.pl1 Change array extents to refer to
  3     9*     constants rather than variables.
  3    10*                                                   END HISTORY COMMENTS */
  3    11 
  3    12 
  3    13 /* Last modified on 10/1/74 by tg */
  3    14 
  3    15 
  3    16 /* parameter list */
  3    17 
  3    18      dcl	   (input_ptr, inst_ptr, reloc_ptr) ptr;
  3    19 
  3    20 
  3    21 /* input_struc_basic is used for type 1 addressing */
  3    22 
  3    23      dcl	   1 input_struc_basic    based (input_ptr),
  3    24 	     2 type	      fixed bin,
  3    25 	     2 operand_no	      fixed bin,
  3    26 	     2 lock	      fixed bin,
  3    27 	     2 segno	      fixed bin,
  3    28 	     2 char_offset	      fixed bin (24),
  3    29 	     2 send_receive	      fixed bin;
  3    30 
  3    31 
  3    32      dcl	   1 input_struc	      based (input_ptr),
  3    33 	     2 type	      fixed bin,
  3    34 	     2 operand_no	      fixed bin,
  3    35 	     2 lock	      fixed bin,
  3    36 	     2 operand	      (0 refer (input_struc.operand_no)),
  3    37 	       3 token_ptr	      ptr,
  3    38 	       3 send_receive     fixed bin,
  3    39 	       3 ic_mod	      fixed bin,
  3    40 	       3 size_sw	      fixed bin;
  3    41 
  3    42 /* reloc_struc is used for all types of addressing * all types */
  3    43 
  3    44      dcl	   1 reloc_struc	      (input_struc.operand_no + 1) based (reloc_ptr),
  3    45 	     2 left_wd	      bit (5) aligned,
  3    46 	     2 right_wd	      bit (5) aligned;
  3    47 
  3    48 /* Instruction format for 1 word instruction */
  3    49 
  3    50 
  3    51      dcl	   1 inst_struc_basic     based (inst_ptr) aligned,
  3    52 	     2 y		      unaligned,
  3    53 	       3 pr	      bit (3) unaligned,
  3    54 	       3 wd_offset	      bit (15) unaligned,
  3    55 	     2 fill1_op	      bit (10) unaligned,
  3    56 	     2 zero1	      bit (1) unaligned,
  3    57 	     2 pr_spec	      bit (1) unaligned,
  3    58 	     2 tm		      bit (2) unaligned,
  3    59 	     2 td		      bit (4) unaligned;
  3    60 
  3    61 
  3    62 /* The detailed definitions of the fields in this structure
  3    63*   can be found in the GMAP manual section 8 */
  3    64 /* EIS instruction format for 2_4 word instructions */
  3    65 
  3    66      dcl	   1 inst_struc	      based (inst_ptr) aligned,
  3    67 	     2 inst	      unaligned,
  3    68 	       3 zero1	      bit (2) unaligned,
  3    69 	       3 mf3	      unaligned,
  3    70 	         4 pr_spec	      bit (1) unaligned,
  3    71 	         4 reg_or_length  bit (1) unaligned,
  3    72 	         4 zero2	      bit (1) unaligned,
  3    73 	         4 reg_mod	      bit (4) unaligned,
  3    74 	       3 zero3	      bit (2) unaligned,
  3    75 	       3 mf2	      unaligned,
  3    76 	         4 pr_spec	      bit (1) unaligned,
  3    77 	         4 reg_or_length  bit (1) unaligned,
  3    78 	         4 zero4	      bit (1) unaligned,
  3    79 	         4 reg_mod	      bit (4) unaligned,
  3    80 	       3 fill1_op	      bit (10) unaligned,
  3    81 	       3 zero5	      bit (1) unaligned,
  3    82 	       3 mf1	      unaligned,
  3    83 	         4 pr_spec	      bit (1) unaligned,
  3    84 	         4 reg_or_length  bit (1) unaligned,
  3    85 	         4 zero6	      bit (1) unaligned,
  3    86 	         4 reg_mod	      bit (4) unaligned,
  3    87 	     2 desc_ext	      unaligned,
  3    88 	       3 desc	      (512) unaligned,
  3    89 	         4 desc_od	      bit (36) unaligned;
  3    90 
  3    91 /* The detailed definitions of the fields in this structure
  3    92*   can be found in the GMAP manual section 8.
  3    93*   The desc_ext is the descriptor extension of this eis
  3    94*   instruction. The number of descriptors associated with
  3    95*   this instruction is equavalent to the operand number.
  3    96*   Depending on operand data type, the descriptor
  3    97*   can be alphanumeric or numeric.  The structures of the
  3    98*   alphanumeric and the numeric descriptors are defined
  3    99*   below. */
  3   100 
  3   101 /* alphanumeric descriptor format */
  3   102 
  3   103      dcl	   1 desc_an	      based (desc_an_ptr) unaligned,
  3   104 	     2 desc_f	      (512) unaligned,
  3   105 	       3 y	      unaligned,
  3   106 	         4 pr	      bit (3) unaligned,
  3   107 	         4 wd_offset      bit (15) unaligned,
  3   108 	       3 char_n	      bit (3) unaligned,
  3   109 	       3 zero1	      bit (1) unaligned,
  3   110 	       3 ta	      bit (2),
  3   111 	       3 n	      bit (12) unaligned;
  3   112 
  3   113 
  3   114 /* The detailed definitions of the fields in this structure can
  3   115*   be found in the GMAP manual section 8. */
  3   116 /* numeric descriptor format */
  3   117 
  3   118      dcl	   desc_nn_ptr	      ptr;
  3   119      dcl	   desc_an_ptr	      ptr;
  3   120 
  3   121 
  3   122      dcl	   1 desc_nn	      based (desc_nn_ptr) unaligned,
  3   123 	     2 desc_f	      (512) unaligned,
  3   124 	       3 y	      unaligned,
  3   125 	         4 pr	      bit (3) unaligned,
  3   126 	         4 wd_offset      bit (15) unaligned,
  3   127 	       3 digit_n	      bit (3) unaligned,
  3   128 	       3 tn	      bit (1) unaligned,
  3   129 	       3 sign_type	      bit (2) unaligned,
  3   130 	       3 scal	      bit (6) unaligned,
  3   131 	       3 n	      bit (6) unaligned;
  3   132 
  3   133 
  3   134 /* The detailed definitions of fields in this structure can
  3   135*   be found in the GMAP manual section 8. */
  3   136 /* END INCLUDE FILE ...   cobol_addr_tokens.incl.pl1 */
  3   137 
      189 
      190 
      191 /**************************************************/
      192 /*	 END OF PROCEDDURE			*/
      193 /*	cobol_add3				*/
      194 /*************************************************/
      195 
      196      end cobol_add3;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    05/24/89  0830.4  cobol_add3.pl1                    >spec>install>MR12.3-1048>cobol_add3.pl1
186          1    03/27/82  0439.9  cobol_type9.incl.pl1              >ldd>include>cobol_type9.incl.pl1
1-17         2    11/11/82  1712.7  cobol_TYPE9.incl.pl1              >ldd>include>cobol_TYPE9.incl.pl1
189          3    05/24/89  0811.7  cobol_addr_tokens.incl.pl1        >spec>install>MR12.3-1048>cobol_addr_tokens.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
add3_op                                constant        bit(10)                  initial packed unaligned dcl 96 ref 146
addr                                                   builtin function         dcl 181 ref 123 124 125
addr_input_buffer               000124 automatic       fixed bin(17,0)          array dcl 111 set ref 124
addr_inst_buffer                000112 automatic       fixed bin(17,0)          array dcl 108 set ref 125
cobol_addr                      000010 constant        entry                    external dcl 87 ref 152
cobol_emit                      000012 constant        entry                    external dcl 88 ref 160
data_name                              based           structure                level 1 unaligned dcl 1-16
fill1_op                  0(18)        based           bit(10)                  level 3 packed packed unaligned dcl 3-66 set ref
                                                                                  146* 148*
input_ptr                       000162 automatic       pointer                  dcl 3-18 set ref 124* 129 130 131 133 134 135 137
                                                                                  138 139 141 142 143 152*
input_struc                            based           structure                level 1 unaligned dcl 3-32
inst                                   based           structure                level 2 packed packed unaligned dcl 3-66
inst_ptr                        000164 automatic       pointer                  dcl 3-18 set ref 125* 146 148 152* 155 160*
inst_struc                             based           structure                level 1 dcl 3-66
lock                      2            based           fixed bin(17,0)          level 2 dcl 3-32 set ref 131*
opcode_code                            parameter       fixed bin(35,0)          dcl 60 ref 31 146
operand                   4            based           structure                array level 2 unaligned dcl 3-32
operand1_ptr                           parameter       pointer                  dcl 57 ref 31 133
operand2_ptr                           parameter       pointer                  dcl 58 ref 31 137
operand_no                1            based           fixed bin(17,0)          level 2 dcl 3-32 set ref 130*
reloc_buffer                    000100 automatic       fixed bin(17,0)          array dcl 105 set ref 123
reloc_ptr                       000166 automatic       pointer                  dcl 3-18 set ref 123* 152* 160*
result_ptr                             parameter       pointer                  dcl 59 ref 31 141 155
rounded                  22(24)        based           bit(1)                   level 2 packed packed unaligned dcl 1-16 ref 155
send_receive              6            based           fixed bin(17,0)          array level 3 dcl 3-32 set ref 134* 138* 142*
size_sw                  10            based           fixed bin(17,0)          array level 3 dcl 3-32 set ref 135* 139* 143*
subtract3_op                           constant        bit(10)                  initial packed unaligned dcl 97 ref 148
token_ptr                 4            based           pointer                  array level 3 dcl 3-32 set ref 133* 137* 141*
type                                   based           fixed bin(17,0)          level 2 dcl 3-32 set ref 129*
zero3                     0(09)        based           bit(2)                   level 3 packed packed unaligned dcl 3-66 set ref
                                                                                  155*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
addrel                                                 builtin function         dcl 181
binary                                                 builtin function         dcl 181
desc_an                                based           structure                level 1 packed packed unaligned dcl 3-103
desc_an_ptr                            automatic       pointer                  dcl 3-119
desc_nn                                based           structure                level 1 packed packed unaligned dcl 3-122
desc_nn_ptr                            automatic       pointer                  dcl 3-118
dn_ptr                                 automatic       pointer                  dcl 112
fixed                                                  builtin function         dcl 181
index                                                  builtin function         dcl 181
input_struc_basic                      based           structure                level 1 unaligned dcl 3-23
inst_struc_basic                       based           structure                level 1 dcl 3-51
length                                                 builtin function         dcl 181
mod                                                    builtin function         dcl 181
null                                                   builtin function         dcl 181
rel                                                    builtin function         dcl 181
reloc_struc                            based           structure                array level 1 unaligned dcl 3-44
string                                                 builtin function         dcl 181
substr                                                 builtin function         dcl 181
unspec                                                 builtin function         dcl 181

NAME DECLARED BY EXPLICIT CONTEXT.
cobol_add3                      000007 constant        entry                    external dcl 31

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       166         202     126         176
Length       422     126        14         203      40           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
cobol_add3                          129 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
cobol_add3               000100 reloc_buffer                cobol_add3
                         000112 addr_inst_buffer            cobol_add3
                         000124 addr_input_buffer           cobol_add3
                         000162 input_ptr                   cobol_add3
                         000164 inst_ptr                    cobol_add3
                         000166 reloc_ptr                   cobol_add3

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
cobol_addr                    cobol_emit

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     31 000002       123 000014       124 000016       125 000020       129 000022       130 000024       131 000026
    133 000027       134 000033       135 000034       137 000035       138 000040       139 000041       141 000042
    142 000045       143 000047       146 000050       148 000060       152 000064       155 000076       160 000110
    163 000125


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
