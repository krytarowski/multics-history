	COMPILATION LISTING OF SEGMENT apl_fns_command_
	Compiled by: Multics PL/I Compiler, Release 28d, of October 4, 1983
	Compiled at: Honeywell LCPD Phoenix, System M
	Compiled on: 11/29/83  1606.6 mst Tue
	    Options: optimize map

        1 /* ******************************************************
        2*   *                                                    *
        3*   *                                                    *
        4*   * Copyright (c) 1972 by Massachusetts Institute of   *
        5*   * Technology and Honeywell Information Systems, Inc. *
        6*   *                                                    *
        7*   *                                                    *
        8*   ****************************************************** */
        9 
       10 /* Modification History - 811210.
       11*
       12*   Modified 811210 by TO to add )EFNS command.
       13**/
       14 
       15 apl_fns_command_:
       16 	procedure (a_initial_letter, frame_already_saved);
       17 
       18 	type_string = function_type;
       19 	go to list_command_common;
       20 
       21 apl_efns_command_:
       22 	entry (a_initial_letter, frame_already_saved);
       23 
       24 	type_string = function_type;
       25 	efns_flag = "1"b;
       26 	go to list_command_common;
       27 
       28 apl_vars_command_:
       29 	entry (a_initial_letter, frame_already_saved);
       30 
       31 	type_string = value_type;
       32 	go to list_command_common;
       33 
       34 apl_grps_command_:
       35 	entry (a_initial_letter, frame_already_saved);
       36 
       37 	type_string = group_type;
       38 
       39 list_command_common:
       40 
       41 	initial_letter = a_initial_letter;
       42 
       43 	if ^frame_already_saved
       44 	then do;
       45 		on cleanup call apl_destroy_save_frame_;
       46 		call apl_create_save_frame_;
       47 	end;
       48 
       49 	save_frame_pointer = ws_info.current_parse_frame_ptr;
       50 
       51 
       52 	total_symbols = save_frame_pointer -> save_frame.saved_symbol_count;
       53 	printed_count = 0;
       54 
       55 	do symbol_number = 1 to total_symbols - 1;
       56 
       57 	     if save_frame_pointer -> save_frame.symbol_pointer (symbol_number) -> symbol_bead.meaning_pointer ^= null
       58 	     then do;
       59 
       60 		     do other_symbol_number = symbol_number + 1 to total_symbols;
       61 
       62 			if save_frame_pointer -> save_frame.symbol_pointer (other_symbol_number) ->
       63 					     symbol_bead.meaning_pointer ^= null
       64 			then do;
       65 
       66 				if save_frame_pointer ->
       67 				   save_frame.symbol_pointer (symbol_number) ->
       68 				   symbol_bead.name
       69 						  >
       70 				   save_frame_pointer ->
       71 				   save_frame.symbol_pointer (other_symbol_number) ->
       72 				   symbol_bead.name
       73 
       74 				then do;
       75 
       76 					temporary = save_frame_pointer ->
       77 						  save_frame.symbol_pointer (symbol_number);
       78 
       79 					save_frame_pointer ->
       80 					save_frame.symbol_pointer (symbol_number) =
       81 					save_frame_pointer ->
       82 					save_frame.symbol_pointer (other_symbol_number);
       83 
       84 					save_frame_pointer ->
       85 					save_frame.symbol_pointer (other_symbol_number) =
       86 					temporary;
       87 
       88 					temporary = save_frame_pointer ->
       89 						  save_frame.saved_meaning_pointer (symbol_number);
       90 
       91 					save_frame_pointer ->
       92 					save_frame.saved_meaning_pointer (symbol_number) =
       93 					save_frame_pointer ->
       94 					save_frame.saved_meaning_pointer (other_symbol_number);
       95 
       96 					save_frame_pointer ->
       97 					save_frame.saved_meaning_pointer (other_symbol_number) =
       98 					temporary;
       99 
      100 				     end;
      101 
      102 			     end;
      103 
      104 		     end;
      105 
      106 		end;
      107 
      108 	end;
      109 
      110 
      111 	do symbol_number = 1 to total_symbols;
      112 
      113 	     if save_frame_pointer ->
      114 	        save_frame.symbol_pointer (symbol_number) ->
      115 	        symbol_bead.meaning_pointer
      116 	     ^= null
      117 
      118 	     then if string (save_frame_pointer ->
      119 			 save_frame.symbol_pointer (symbol_number) ->
      120 			 symbol_bead.meaning_pointer ->
      121 			 general_bead.type)
      122 		     & type_string
      123 
      124 		then if substr (save_frame_pointer ->
      125 			      save_frame.symbol_pointer (symbol_number) ->
      126 			      symbol_bead.name,
      127 					     1, 1) >= initial_letter
      128 
      129 		     then if ^efns_flag
      130 		     then do;
      131 			     call apl_print_string_ (save_frame_pointer ->
      132 					         save_frame.symbol_pointer (symbol_number) ->
      133 					         symbol_bead.name);
      134 			     printed_count = printed_count + 1;
      135 			end;
      136 			else do;
      137 			     class = save_frame_pointer ->
      138 				save_frame.symbol_pointer (symbol_number) ->
      139 				symbol_bead.meaning_pointer ->
      140 				function_bead.class;
      141 			     if class = 2 | class = 3 | class = 4 then do;
      142 				call ioa_$ioa_stream (apl_output_stream,
      143 				     ")^[zfn^;mfn^;dfn^]  ^a ^- ^a",
      144 				     class - 1,
      145 				     save_frame_pointer ->
      146 				     save_frame.symbol_pointer (symbol_number) ->
      147 				     symbol_bead.name,
      148 				     save_frame.symbol_pointer (symbol_number) ->
      149 				     symbol_bead.meaning_pointer ->
      150 				     function_bead.text);
      151 				printed_count = printed_count + 1;
      152 			     end;
      153 			end;
      154 
      155 
      156 	end;
      157 
      158 	if ^efns_flag then do;
      159 	     if printed_count > 0
      160 	     then call apl_print_newline_;
      161 	     call apl_flush_buffer_;
      162 	end;
      163 	else if printed_count > 0 then call ioa_$ioa_stream (apl_output_stream, "");
      164 	if ^frame_already_saved
      165 		then call apl_destroy_save_frame_;
      166 
      167 declare	temporary pointer unaligned;
      168 
      169 declare (symbol_number, other_symbol_number, total_symbols, printed_count
      170 	) fixed binary (29);
      171 
      172 declare	cleanup condition;
      173 
      174 declare  apl_print_string_ entry (character (*));
      175 
      176 declare (apl_create_save_frame_, apl_destroy_save_frame_, apl_print_newline_, apl_flush_buffer_
      177 	) entry ();
      178 
      179 declare  ioa_$ioa_stream entry options (variable);
      180 
      181 declare  a_initial_letter character (1);
      182 declare  frame_already_saved bit (1) aligned;
      183 
      184 declare  initial_letter character (1) aligned;
      185 
      186 declare  type_string bit (18) aligned;
      187 
      188 declare  class fixed bin;
      189 declare  efns_flag bit (1) aligned init ("0"b);
      190 declare  apl_output_stream char (11) int static init ("apl_output_");
      191 
      192 declare (null, string, substr
      193 	) builtin;
      194 
  1     1 /* ====== BEGIN INCLUDE SEGMENT	apl_number_data.incl.pl1 ================================== */
  1     2 
  1     3 /*
  1     4*   This include file contains information about the machine representation of numbers.
  1     5*   In all programs numbers should simply be declared 'float'.
  1     6*   All default statements should be in this include file.
  1     7*
  1     8*   This is the binary version.  The manifest constant Binary should be used by programs
  1     9*   that need to know whether we are using binary or decimal.
  1    10* */
  1    11 
  1    12 /* format: style3,initlm0,idind30 */
  1    13 
  1    14 default (float & ^decimal & ^binary & ^precision & ^constant) float binary (63);
  1    15 
  1    16 declare	(
  1    17 	TheBiggestNumberWeveGot	float initial (0.1701411834604692317e+39),
  1    18 	TheSmallestNumberWeveGot	float initial (.1469367938527859385e-38),
  1    19 	Binary			bit (1) aligned initial ("1"b)
  1    20 	)			internal static options (constant);
  1    21 
  1    22 /* Number of characters in a number datum entry; used for copying float number arrays as strings.
  1    23*   (Obsolete! use array copies!) */
  1    24 
  1    25 declare	NumberSize		fixed binary precision (4) internal static initial (8);
  1    26 
  1    27 /* ------ END INCLUDE SEGMENT		apl_number_data.incl.pl1 ---------------------------------- */
      195 
  2     1 /* ====== BEGIN INCLUDE SEGMENT	apl_ws_info.incl.pl1 ====================================== */
  2     2 
  2     3 /* This structure contains all of the global data (or pointers to it) for the APL subsystem */
  2     4 
  2     5 /* automatic */
  2     6 
  2     7 declare	ws_info_ptr ptr initial (apl_static_$ws_info_ptr.static_ws_info_ptr);
  2     8 
  2     9 /* external static */
  2    10 
  2    11 declare	1 apl_static_$ws_info_ptr	external static aligned structure,
  2    12 	  2 static_ws_info_ptr	unaligned pointer;
  2    13 
  2    14 /* based */
  2    15 
  2    16 declare	1 ws_info			aligned based (ws_info_ptr),
  2    17 	  2 version_number		fixed bin,	/* version of this structure (3) */
  2    18 	  2 switches		unaligned,	/* mainly ws parameters */
  2    19 	    3 long_error_mode	bit,		/* if 1, long Multics format, else APL/360 format */
  2    20 	    3 debug_mode		bit,		/* if 1, system error causes escape to command level */
  2    21 	    3 canonicalize_mode	bit,		/* if 1, the editor canonicalizes user input */
  2    22 	    3 restrict_exec_command	bit,		/* if 1, the )EXEC command may not be used */
  2    23 	    3 restrict_debug_command	bit,		/* if 1, the )DEBUG command may not be used */
  2    24 	    3 restrict_external_functions
  2    25 				bit,		/* if 1, the )ZFN, )MFN, and )DFN commands may not be used */
  2    26 	    3 restrict_load		bit,		/* if 1, the )LOAD and )COPY commands may not be used */
  2    27 	    3 restrict_load_directory	bit,		/* if 1, no directory allowed in )LOAD or )COPY pathnames */
  2    28 	    3 restrict_save		bit,		/* if 1, the )SAVE command may not be used */
  2    29 	    3 restrict_save_directory	bit,		/* if 1, no directory allowed in )SAVE pathnames */
  2    30 	    3 off_hold		bit,		/* if 1, )OFF HOLD was typed, else just )OFF */
  2    31 	    3 transparent_to_signals	bit,		/* if 1, any conditions slip right past APL */
  2    32 	    3 meter_mode		bit,		/* if 1, metering may be done, else speed is all-important */
  2    33 	    3 restrict_msg_command	bit,		/* if 1, the )MSG command may not be used. */
  2    34 	    3 compatibility_check_mode
  2    35 				bit,		/* if 1, check for incompatible operators */
  2    36 	    3 no_quit_handler	bit,		/* if 1, do not trap QUITs. */
  2    37 						/* remaining 20 bits not presently used */
  2    38 
  2    39 	  2 values,				/* attributes of the workspace */
  2    40 	    3 digits		fixed bin,	/* number of digits of precision printed on output */
  2    41 	    3 width		fixed bin,	/* line length for formatted output */
  2    42 	    3 index_origin		fixed bin,	/* the index origin (0 or 1) */
  2    43 	    3 random_link		fixed bin(35),	/* seed for random number generator */
  2    44 	    3 fuzz		float,		/* comparison tolerance (relative fuzz) */
  2    45 	    3 float_index_origin	float,		/* the index origin	in floating point */
  2    46 	    3 number_of_symbols	fixed bin,	/* the number of symbol_beads currently in existence */
  2    47 	    3 maximum_value_stack_size
  2    48 				fixed bin (18),	/* maximum number of words in one segment of value stack */
  2    49 
  2    50 	  2 pointers,				/* pointers to various internal tables */
  2    51 	    3 symbol_table_ptr	unaligned pointer,	/* -> symbol_table (apl_symbol_table.incl.pl1) */
  2    52 	    3 current_parse_frame_ptr	unaligned pointer,	/* -> topmost parse frame */
  2    53 	    3 value_stack_ptr	unaligned pointer,	/* -> next free location on value stack */
  2    54 	    3 alloc_free_info_ptr	unaligned pointer,	/* -> apl_storage_mngr_ data (apl_storage_system_data.incl.pl1) */
  2    55 
  2    56 	  2 time_invoked		fixed bin(71),	/* clock time that APL was entered */
  2    57 	  2 integer_fuzz		float,		/* the absolute fuzz used in checking for integers */
  2    58 	  2 user_number		fixed bin(35),	/* number under which the user is signed on */
  2    59 	  2 latent_expression	unaligned pointer,	/* -> value_bead for QuadLX */
  2    60 	  2 lock			char(32),		/* the lock currently set on this workspace (password) */
  2    61 	  2 wsid			char(100),	/* the workspace identification: name, number name, or clear ws */
  2    62 	  2 last_error_code		fixed bin(35),	/* last code passed to apl_error_ */
  2    63 	  2 signoff_lock		character (32),
  2    64 
  2    65 	  2 interrupt_info		aligned,		/* bits used by apl_interpreter_ to tell when to abort */
  2    66 	    3 dont_interrupt_parse	bit,		/* if 1, don't do a dirty stop because the parser is running */
  2    67 	    3 dont_interrupt_operator	bit,		/* if 1, don't do a dirty stop because an operator is running */
  2    68 	    3 dont_interrupt_storage_manager		/* if 1, don't stop because apl_storage_mngr_ is */
  2    69 				bit,		/*       munging his tables */
  2    70 	    3 unused_interrupt_bit	bit,		/* not presently used */
  2    71 	    3 dont_interrupt_command	bit,
  2    72 	    3 can_be_interrupted	bit,		/* if 1, OK to do a clean stop (we are between lines, reading) */
  2    73 	    3 clean_interrupt_pending	bit,		/* interrupt occured, break cleanly (between lines) */
  2    74 	    3 dirty_interrupt_pending	bit,		/* interrupt occured, break as soon as not inhibited */
  2    75 
  2    76 	  2 user_name		char (32),	/* process group id of user */
  2    77 	  2 immediate_input_prompt	char (32) varying,	/* normal input */
  2    78 	  2 evaluated_input_prompt	char (32) varying,	/* quad input */
  2    79 	  2 character_input_prompt	char (32) varying,	/* quad-quote input */
  2    80 	  2 vcpu_time		aligned,
  2    81 	    3 total		fixed bin (71),
  2    82 	    3 setup		fixed bin (71),
  2    83 	    3 parse		fixed bin (71),
  2    84 	    3 lex			fixed bin (71),
  2    85 	    3 operator		fixed bin (71),
  2    86 	    3 storage_manager	fixed bin (71),
  2    87 	  2 output_info		aligned,		/* data pertaining to output buffer */
  2    88 	    3 output_buffer_ptr	unal ptr,		/* ptr to output buffer */
  2    89 	    3 output_buffer_len	fixed bin (21),	/* length (bytes) of output buffer */
  2    90 	    3 output_buffer_pos	fixed bin (21),	/* index of next byte to write in */
  2    91 	    3 output_buffer_ll	fixed bin (21),	/* print positions used up so far */
  2    92 	  2 tab_width		fixed bin (21);	/* number of columns a tabs moves cursor */
  2    93 
  2    94 declare	output_buffer char (ws_info.output_buffer_len) based (ws_info.output_buffer_ptr);
  2    95 
  2    96 /* internal static */
  2    97 
  2    98 declare	max_parse_stack_depth fixed bin int static init(64536);
  2    99 
  2   100 /* ------ END INCLUDE SEGMENT		apl_ws_info.incl.pl1 -------------------------------------- */
      196 
  3     1 /* ====== BEGIN INCLUDE SEGMENT	apl_bead_format.incl.pl1 ================================== */
  3     2 
  3     3 declare 1 general_bead  		aligned based,	/* The Venerable Bead		*/
  3     4 	2 type 			unaligned,
  3     5 	  3 bead_type		unaligned,
  3     6 	    4 operator		bit (1),		/* ON if operator bead		*/
  3     7 	    4 symbol		bit (1),		/* ON if symbol bead		*/
  3     8 	    4 value		bit (1),		/* ON if value bead			*/
  3     9 	    4 function		bit (1),		/* ON if function bead		*/
  3    10 	    4 group		bit (1),		/* ON if group bead			*/
  3    11 	    4 label		bit (1),		/* ON if label bead			*/
  3    12 	    4 shared_variable	bit (1),		/* ON if shared variable bead 	*/
  3    13 	    4 lexed_function	bit (1),		/* ON if lexed function bead  	*/
  3    14 	  3 data_type		unaligned,
  3    15 	    4 list_value		bit (1),		/* ON if a list value bead		*/
  3    16 	    4 character_value	bit (1),		/* ON if a character value bead	*/
  3    17 	    4 numeric_value		bit (1),		/* ON if a numeric value bead		*/
  3    18 	    4 integral_value	bit (1),		/* ON if an integral value bead	*/
  3    19 	    4 zero_or_one_value	bit (1),		/* ON if a boolean value bead		*/
  3    20 	    4 complex_value		bit (1),		/* ON if a complex, numeric value bead   */
  3    21 	  3 unused_bits		bit (4) unaligned,	/* pad to 18 bits (for future use)	*/
  3    22 	2 size			bit (18) unaligned,	/* Number of words this bead occupies
  3    23*						   (used by bead storage manager)	*/
  3    24 	2 reference_count 		fixed binary (29);	/* Number of pointers which point
  3    25*						   to this bead (used by bead manager)	*/
  3    26 
  3    27 
  3    28 /* constant strings for initing type field in various beads */
  3    29 
  3    30 declare (
  3    31 	operator_type		init("100000000000000000"b),
  3    32 	symbol_type		init("010000000000000000"b),
  3    33     	value_type		init("001000000000000000"b),
  3    34 	function_type		init("000100000000000000"b),
  3    35 	group_type		init("000010000000000000"b),
  3    36 	label_type		init("001001000011000000"b),
  3    37 	shared_variable_type	init("001000100000000000"b),
  3    38 	lexed_function_type		init("000000010000000000"b),
  3    39 
  3    40 	list_value_type		init("000000001000000000"b),
  3    41 	character_value_type 	init("001000000100000000"b),
  3    42 	numeric_value_type		init("001000000010000000"b),
  3    43 	integral_value_type		init("001000000011000000"b),
  3    44 	zero_or_one_value_type	init("001000000011100000"b),
  3    45 	complex_value_type		init("001000000000010000"b),
  3    46 
  3    47 	not_integer_mask		init("111111111110011111"b),		/* to clear integral, zero_or_one bits */
  3    48 	not_zero_or_one_mask	init("111111111111011111"b)		/* to clear zero_or_one bit */
  3    49         ) bit(18) internal static;
  3    50 
  3    51 /* ------ END INCLUDE SEGMENT		apl_bead_format.incl.pl1 ---------------------------------- */
      197 
  4     1 /* ====== BEGIN INCLUDE FILE		apl_save_frame.incl.pl1 =================================== */
  4     2 
  4     3 declare	save_frame_pointer pointer unaligned;
  4     4 
  4     5 declare 1 save_frame 		aligned based (save_frame_pointer),
  4     6 	2 last_frame_pointer 	ptr unal,		/* pointer to last parse frame		*/
  4     7 	2 frame_type 		fixed bin,	/* = save_frame_type			*/
  4     8 	2 saved_symbol_count	fixed bin (29),	/* number of symbols in saved frame		*/
  4     9 	2 symbol_list		aligned dimension (total_symbols refer (save_frame.saved_symbol_count)),
  4    10 	  3 symbol_pointer		ptr unal,		/* pointer to each symbol bead (never null)	*/
  4    11 	  3 saved_meaning_pointer	ptr unal,		/* ptr to local meaning at time save_frame is created */
  4    12 						/* (if null, local meaning is null)		*/
  4    13 	  3 global_meaning_pointer_pointer		/* pointer to the meaning pointer which 	*/
  4    14 				ptr unal;		/* represents the global meaning of this symbol	*/
  4    15 						/* (if null, either symbol was never localized,	*/
  4    16 						/* or save_frame was created by apl_load_command_,*/
  4    17 						/* and saved_meaning_ptr determines whether it    */
  4    18 						/* was localized)				*/
  4    19 
  4    20 /* ------ END INCLUDE FILE		apl_save_frame.incl.pl1 ----------------------------------- */
      198 
  5     1 /* ====== BEGIN INCLUDE SEGMENT	apl_symbol_bead.incl.pl1 ================================== */
  5     2 
  5     3 /* Explanation of fields:
  5     4*   symbol_bead.hash_link_pointer	points to next symbol in same hash bucket in the symbol table.
  5     5*   symbol_bead.meaning_pointer	points to current "value" of this name:
  5     6*				   =  null	  => unused (e.g. undefined variable)
  5     7*				   -> group bead      => group name
  5     8*				   -> value bead      => variable with a value
  5     9*				   -> function bead   => function name
  5    10*				   -> label bead      => localized label value
  5    11*				   -> shared var bead => shared variable	*/
  5    12 
  5    13 declare 1 symbol_bead 		aligned based,
  5    14 	2 header	 		aligned like general_bead,
  5    15 	2 hash_link_pointer		pointer unaligned,
  5    16 	2 meaning_pointer		pointer unaligned,
  5    17 	2 name_length 		fixed binary,
  5    18 	2 name			character (0 refer (symbol_bead.name_length)) unaligned;
  5    19 
  5    20 /* ------ END INCLUDE SEGMENT		apl_symbol_bead.incl.pl1 ---------------------------------- */
      199 
  6     1 /* ====== BEGIN INCLUDE SEGMENT	apl_function_bead.incl.pl1 ================================ */
  6     2 
  6     3 /* This bead is used by apl to store the source code for user-defined functions */
  6     4 
  6     5 declare	1 function_bead		aligned based,
  6     6 
  6     7 	  2 header		aligned like general_bead,
  6     8 
  6     9 	  2 lexed_function_bead_pointer unaligned pointer, /* null if unlexed or has errors, else -> lexed code */
  6    10 	  2 class			fixed bin,	/* 0=normal, 1=locked, 2=external zfn, 3=mfn, 4=dfn */
  6    11 	  2 stop_control_pointer	unaligned ptr,	/* points to stop value bead, or null (no stop control) */
  6    12 	  2 trace_control_pointer	unaligned ptr,	/* points to trace value bead, or null (no trace control) */
  6    13 	  2 text_length		fixed bin(21),	/* length of function text */
  6    14 	  2 text			aligned char(data_elements refer (function_bead.text_length));
  6    15 						/* the user's code exactly as typed in */
  6    16 
  6    17 /* ------ END INCLUDE SEGMENT		apl_function_bead.incl.pl1 -------------------------------- */
      200 
      201 
      202 end apl_fns_command_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/29/83  1346.4  apl_fns_command_.pl1              >special_ldd>on>apl.1129>apl_fns_command_.pl1
195          1    03/27/82  0429.8  apl_number_data.incl.pl1          >ldd>include>apl_number_data.incl.pl1
196          2    03/27/82  0439.2  apl_ws_info.incl.pl1              >ldd>include>apl_ws_info.incl.pl1
197          3    03/27/82  0438.5  apl_bead_format.incl.pl1          >ldd>include>apl_bead_format.incl.pl1
198          4    03/27/82  0439.1  apl_save_frame.incl.pl1           >ldd>include>apl_save_frame.incl.pl1
199          5    03/27/82  0439.2  apl_symbol_bead.incl.pl1          >ldd>include>apl_symbol_bead.incl.pl1
200          6    03/27/82  0438.7  apl_function_bead.incl.pl1        >ldd>include>apl_function_bead.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
a_initial_letter                       parameter       char(1)                  unaligned dcl 181 ref 15 21 28 34 39
apl_create_save_frame_          000016 constant        entry                    external dcl 176 ref 46
apl_destroy_save_frame_         000020 constant        entry                    external dcl 176 ref 45 164
apl_flush_buffer_               000024 constant        entry                    external dcl 176 ref 161
apl_output_stream               000010 internal static char(11)                 initial unaligned dcl 190 set ref 142* 163*
apl_print_newline_              000022 constant        entry                    external dcl 176 ref 159
apl_print_string_               000014 constant        entry                    external dcl 174 ref 131
apl_static_$ws_info_ptr         000030 external static structure                level 1 dcl 2-11
class                     3            based           fixed bin(17,0)          level 2 in structure "function_bead" dcl 6-5
                                                                                  in procedure "apl_fns_command_" ref 137
class                           000116 automatic       fixed bin(17,0)          dcl 188 in procedure "apl_fns_command_" set ref 137*
                                                                                  141 141 141 142
cleanup                         000106 stack reference condition                dcl 172 ref 45
current_parse_frame_ptr
                         15            based           pointer                  level 3 packed unaligned dcl 2-16 ref 49
efns_flag                       000117 automatic       bit(1)                   initial dcl 189 set ref 25* 113 158 189*
frame_already_saved                    parameter       bit(1)                   dcl 182 ref 15 21 28 34 43 164
function_bead                          based           structure                level 1 dcl 6-5
function_type                          constant        bit(18)                  initial unaligned dcl 3-30 ref 18 24
general_bead                           based           structure                level 1 dcl 3-3
group_type                             constant        bit(18)                  initial unaligned dcl 3-30 ref 37
initial_letter                  000114 automatic       char(1)                  dcl 184 set ref 39* 113
ioa_$ioa_stream                 000026 constant        entry                    external dcl 179 ref 142 163
meaning_pointer           3            based           pointer                  level 2 packed unaligned dcl 5-13 ref 57 62 113 113
                                                                                  137 142
name                      5            based           char                     level 2 packed unaligned dcl 5-13 set ref 66 66 113
                                                                                  131* 142*
name_length               4            based           fixed bin(17,0)          level 2 dcl 5-13 ref 66 66 113 131 131 142 142
null                                                   builtin function         dcl 192 ref 57 62 113
other_symbol_number             000102 automatic       fixed bin(29,0)          dcl 169 set ref 60* 62 66 79 84 91 96*
pointers                 14            based           structure                level 2 dcl 2-16
printed_count                   000104 automatic       fixed bin(29,0)          dcl 169 set ref 53* 134* 134 151* 151 159 163
save_frame                             based           structure                level 1 dcl 4-5
save_frame_pointer              000122 automatic       pointer                  unaligned dcl 4-3 set ref 49* 52 57 62 66 66 76 79
                                                                                  79 84 88 91 91 96 113 113 113 131 137 142 142
saved_meaning_pointer
                          4            based           pointer                  array level 3 packed unaligned dcl 4-5 set ref 88
                                                                                  91* 91 96*
saved_symbol_count        2            based           fixed bin(29,0)          level 2 dcl 4-5 ref 52
static_ws_info_ptr              000030 external static pointer                  level 2 packed unaligned dcl 2-11 ref 2-7
string                                                 builtin function         dcl 192 ref 113
substr                                                 builtin function         dcl 192 ref 113
symbol_bead                            based           structure                level 1 dcl 5-13
symbol_list               3            based           structure                array level 2 dcl 4-5
symbol_number                   000101 automatic       fixed bin(29,0)          dcl 169 set ref 55* 57 60 66 76 79 88 91* 111* 113
                                                                                  113 113 131 137 142 142*
symbol_pointer            3            based           pointer                  array level 3 packed unaligned dcl 4-5 set ref 57 62
                                                                                  66 66 76 79* 79 84* 113 113 113 131 137 142 142
temporary                       000100 automatic       pointer                  unaligned dcl 167 set ref 76* 84 88* 96
text                      7            based           char                     level 2 dcl 6-5 set ref 142*
text_length               6            based           fixed bin(21,0)          level 2 dcl 6-5 ref 142 142
total_symbols                   000103 automatic       fixed bin(29,0)          dcl 169 set ref 52* 55 60 111
type                                   based           structure                level 2 packed unaligned dcl 3-3 ref 113
type_string                     000115 automatic       bit(18)                  dcl 186 set ref 18* 24* 31* 37* 113
value_type                             constant        bit(18)                  initial unaligned dcl 3-30 ref 31
ws_info                                based           structure                level 1 dcl 2-16
ws_info_ptr                     000120 automatic       pointer                  initial dcl 2-7 set ref 49 2-7*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
Binary                                 internal static bit(1)                   initial dcl 1-16
NumberSize                             internal static fixed bin(4,0)           initial dcl 1-25
TheBiggestNumberWeveGot                internal static float bin(63)            initial dcl 1-16
TheSmallestNumberWeveGot               internal static float bin(63)            initial dcl 1-16
character_value_type                   internal static bit(18)                  initial unaligned dcl 3-30
complex_value_type                     internal static bit(18)                  initial unaligned dcl 3-30
integral_value_type                    internal static bit(18)                  initial unaligned dcl 3-30
label_type                             internal static bit(18)                  initial unaligned dcl 3-30
lexed_function_type                    internal static bit(18)                  initial unaligned dcl 3-30
list_value_type                        internal static bit(18)                  initial unaligned dcl 3-30
max_parse_stack_depth                  internal static fixed bin(17,0)          initial dcl 2-98
not_integer_mask                       internal static bit(18)                  initial unaligned dcl 3-30
not_zero_or_one_mask                   internal static bit(18)                  initial unaligned dcl 3-30
numeric_value_type                     internal static bit(18)                  initial unaligned dcl 3-30
operator_type                          internal static bit(18)                  initial unaligned dcl 3-30
output_buffer                          based           char                     unaligned dcl 2-94
shared_variable_type                   internal static bit(18)                  initial unaligned dcl 3-30
symbol_type                            internal static bit(18)                  initial unaligned dcl 3-30
zero_or_one_value_type                 internal static bit(18)                  initial unaligned dcl 3-30

NAMES DECLARED BY EXPLICIT CONTEXT.
apl_efns_command_               000051 constant        entry                    external dcl 21
apl_fns_command_                000036 constant        entry                    external dcl 15
apl_grps_command_               000101 constant        entry                    external dcl 34
apl_vars_command_               000066 constant        entry                    external dcl 28
list_command_common             000111 constant        label                    dcl 39 ref 19 26 32

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       632         664     453         642
Length      1176     453        32         275     157           4

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
apl_fns_command_                    130 external procedure  is an external procedure.  
on unit on line 45                   64 on unit               

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 apl_output_stream           apl_fns_command_

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
apl_fns_command_         000100 temporary                   apl_fns_command_
                         000101 symbol_number               apl_fns_command_
                         000102 other_symbol_number         apl_fns_command_
                         000103 total_symbols               apl_fns_command_
                         000104 printed_count               apl_fns_command_
                         000114 initial_letter              apl_fns_command_
                         000115 type_string                 apl_fns_command_
                         000116 class                       apl_fns_command_
                         000117 efns_flag                   apl_fns_command_
                         000120 ws_info_ptr                 apl_fns_command_
                         000122 save_frame_pointer          apl_fns_command_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return              enable              ext_entry           int_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
apl_create_save_frame_        apl_destroy_save_frame_       apl_flush_buffer_             apl_print_newline_
apl_print_string_             ioa_$ioa_stream

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
apl_static_$ws_info_ptr




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
    189 000024    2    7 000025        15 000032        18 000044        19 000046        21 000047        24 000057
     25 000061        26 000063        28 000064        31 000074        32 000076        34 000077        37 000107
     39 000111        43 000117        45 000122        46 000143        49 000150        52 000153        53 000156
     55 000157        57 000167        60 000175        62 000205        66 000215        76 000230        79 000232
     84 000236        88 000240        91 000242        96 000244       104 000246       108 000250       111 000252
    113 000261       131 000304       134 000320       135 000321       137 000322       141 000324       142 000332
    151 000377       156 000400       158 000402       159 000404       161 000413       162 000420       163 000421
    164 000440       202 000451


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
