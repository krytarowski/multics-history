	COMPILATION LISTING OF SEGMENT gcos_abort_
	Compiled by: Multics PL/I Compiler, Release 28b, of April 11, 1983
	Compiled at: Honeywell LCPD Phoenix, System M
	Compiled on: 09/09/83  1109.8 mst Fri
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 /* *  THIS PROCEDURE IS CALLED WITH A TWO CHARACTER ABORT CODE (RATHER THAN A
       12*   *  MULTICS ERROR TABLE CODE). IT WILL PRINT THE ABORT CODE AND THE NAME OF
       13*   *  THE CALLING PROCEDURE. IF ANY ADDITIONAL ARGUMENTS ARE PRESENT, IT WILL
       14*   *  REFORMAT THE ARG LIST TO DELETE THE FIRST ARGUMENT, AND THEN CALL ioa_
       15*   *  TO PRINT THE ADDITIONAL ARGUMENTS. THEN IT WILL CALL gcos_error_ WITH
       16*   *  AN ERROR TABLE CODE OF 9999. gcos_error_ WILL ABORT THE JOB.
       17*   *
       18*   *  WRITTEN BY DICK SNYDER IN 1971
       19*   *  MODIFIED BY T. CASEY NOVEMBER 1973
       20*   *
       21*   */
       22 gcos_abort_: proc (code);
       23 dcl  code char (*);
       24 dcl (i, ii) fixed bin(18);
       25 dcl (j, offset) fixed bin(24);
       26 dcl  name char (j) aligned based (z);
       27 dcl 1 frame based (p),
       28     2 ab (4) fixed bin(24),
       29     2 lp pointer,
       30     2 sp pointer,
       31     2 regs (8) fixed bin(24),
       32     2 backp pointer,
       33     2 nxt pointer,
       34     2 ret pointer;
       35 
       36 dcl 1 arg_list aligned based (p),
       37     2 arg_count fixed bin(17) unaligned,
       38     2 display bit (18) unaligned,
       39     2 descriptor_count fixed bin(17) unaligned,
       40     2 fill bit (18) unaligned,
       41     2 arg_pointers (1) fixed bin(71) aligned;						/* if we declare these pointers as pointers,
       42*						   pointer registers will be used to move them,
       43*						   and faults will occur if any are invalid pointers */
       44 
       45 dcl  p pointer;
       46 dcl  cu_$stack_frame_ptr ext entry (pointer);
       47 dcl  cu_$arg_list_ptr entry (pointer);
       48 dcl  cu_$gen_call ext entry (entry, pointer);
       49 dcl  ioa_ ext entry options (variable);
       50 dcl  pl1_frame_$name ext entry (ptr, ptr, fixed bin(24));
       51 dcl  gcos_error_ ext entry (fixed bin(24));
       52 dcl  z pointer;
       53 
       54 dcl (divide, fixed, rel, substr, unspec) builtin;
       55 
       56 
       57 
       58 
       59 	call cu_$stack_frame_ptr (p);
       60 	p = backp;				/* get caller's frame */
       61 	unspec (offset) = (18)"0"b||substr (rel (ret), 1, 18);
       62 	call pl1_frame_$name (p, z, j);		/* get caller name */
       63 out:	call ioa_ ("Abort ^a from ^a at ^o", code, name, offset);
       64 	call cu_$arg_list_ptr (p);			/* get ptr to my arg list */
       65 	ii, i = arg_count;				/* get no of args */
       66 	if i = 2 then go to skip;			/* only one arg */
       67 	ii, i = i-2;				/* decrement arg count */
       68 	arg_count = i;				/* put new count in arg list */
       69 	i = descriptor_count;			/* get no. of descriptors */
       70 	if i ^= 0 then do;				/* adjust descriptors and count if necessary */
       71 	     descriptor_count = i-2;
       72 	     do j = divide (ii+4, 2, 18, 0) to ii;	/* shift descriptors left one to */
       73 						/* wipe out descriptor for arg 1 (abort cause) */
       74 		arg_pointers (j) = arg_pointers (j+1);
       75 	     end;
       76 
       77 	end;
       78 	else ii = divide (ii, 2, 18, 0);		/* no descriptors so adjust move variable */
       79 	do j = 1 to ii;
       80 	     arg_pointers (j) = arg_pointers (j+1);	/* move arg pointers */
       81 	end;
       82 	call cu_$gen_call (ioa_, p);			/* let ioa_ print out any other info */
       83 skip:	call gcos_error_ (9999);
       84 	return;					/* just in case */
       85      end;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    09/09/83  1006.7  gcos_abort_.pl1                   >spec>on>09/07/83-gcos>gcos_abort_.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
arg_count                              based           fixed bin(17,0)          level 2 packed unaligned dcl 36 set ref 65 68*
arg_list                               based           structure                level 1 dcl 36
arg_pointers              2            based           fixed bin(71,0)          array level 2 dcl 36 set ref 74* 74 80* 80
backp                    20            based           pointer                  level 2 dcl 27 ref 60
code                                   parameter       char                     unaligned dcl 23 set ref 22 63*
cu_$arg_list_ptr                000012 constant        entry                    external dcl 47 ref 64
cu_$gen_call                    000014 constant        entry                    external dcl 48 ref 82
cu_$stack_frame_ptr             000010 constant        entry                    external dcl 46 ref 59
descriptor_count          1            based           fixed bin(17,0)          level 2 packed unaligned dcl 36 set ref 69 71*
divide                                                 builtin function         dcl 54 ref 72 78
frame                                  based           structure                level 1 unaligned dcl 27
gcos_error_                     000022 constant        entry                    external dcl 51 ref 83
i                               000100 automatic       fixed bin(18,0)          dcl 24 set ref 65* 66 67 67* 68 69* 70 71
ii                              000101 automatic       fixed bin(18,0)          dcl 24 set ref 65* 67* 72 72 78* 78 79
ioa_                            000016 constant        entry                    external dcl 49 ref 63 82 82
j                               000102 automatic       fixed bin(24,0)          dcl 25 set ref 62* 63 63 72* 74 74* 79* 80 80*
name                                   based           char                     dcl 26 set ref 63*
offset                          000103 automatic       fixed bin(24,0)          dcl 25 set ref 61* 63*
p                               000104 automatic       pointer                  dcl 45 set ref 59* 60* 60 61 62* 64* 65 68 69 71 74
                                                                                  74 80 80 82*
pl1_frame_$name                 000020 constant        entry                    external dcl 50 ref 62
rel                                                    builtin function         dcl 54 ref 61
ret                      24            based           pointer                  level 2 dcl 27 ref 61
substr                                                 builtin function         dcl 54 ref 61
unspec                                                 builtin function         dcl 54 set ref 61*
z                               000106 automatic       pointer                  dcl 52 set ref 62* 63

NAME DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
fixed                                                  builtin function         dcl 54

NAMES DECLARED BY EXPLICIT CONTEXT.
gcos_abort_                     000015 constant        entry                    external dcl 22
out                             000060 constant        label                    dcl 63
skip                            000231 constant        label                    dcl 83 ref 66

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       342         366     246         352
Length       540     246        24         136      74           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
gcos_abort_                         106 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
gcos_abort_              000100 i                           gcos_abort_
                         000101 ii                          gcos_abort_
                         000102 j                           gcos_abort_
                         000103 offset                      gcos_abort_
                         000104 p                           gcos_abort_
                         000106 z                           gcos_abort_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return              ext_entry_desc

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
cu_$arg_list_ptr              cu_$gen_call                  cu_$stack_frame_ptr           gcos_error_
ioa_                          pl1_frame_$name

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     22 000012        59 000030        60 000036        61 000041        62 000045        63 000060        64 000120
     65 000127        66 000133        67 000135        68 000140        69 000143        70 000147        71 000150
     72 000153        74 000163        75 000170        77 000172        78 000173        79 000176        80 000205
     81 000212        82 000214        83 000231        84 000242


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
