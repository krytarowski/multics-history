	COMPILATION LISTING OF SEGMENT ted_dump_
	Compiled by: Multics PL/I Compiler, Release 27d, of October 11, 1982
	Compiled at: Honeywell LISD Phoenix, System M
	Compiled on: 11/23/82  1458.2 mst Tue
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 /**** format: ind3,ll80,initcol6,indattr,^inddcls,dclind4,idind16	       */
        7 /**** format: struclvlind2,^ifthenstmt,^ifthendo,^ifthen,^indnoniterdo       */
        8 /**** format: ^inditerdo,^indnoniterend,^indthenelse,case,^indproc,^indend   */
        9 /**** format: ^delnl,^insnl,comcol41,^indcom,^indblkcom,linecom,^indcomtxt   */
       10 
       11 ted_dump_:			/* output via terminal width	       */
       12           proc (ted_support_p, msg, code);
       13 
       14 dcl  msg char (168)var,
       15      code fixed bin (35);
       16 
       17 	i = get_line_length_ ("user_output");
       18           if (i > 110)
       19 	then goto dumpl;
       20 	if (i > 60)
       21 	then goto dumps;
       22 
       23 ted_dumpvs_:			/* output in 40 cols	       */
       24           entry (ted_support_p, msg, code);
       25 	maxcc = 5;
       26 	maxll = 17;
       27 	goto start;
       28 
       29 ted_dumps_:			/* ouput 60 columns		       */
       30           entry (ted_support_p, msg, code);
       31 dumps:
       32 	maxcc = 10;
       33 	maxll = 34;
       34 	goto start;
       35 
       36 ted_dumpl_:			/* output 110 columns	       */
       37           entry (ted_support_p, msg, code);
       38 dumpl:
       39 	maxcc = 20;
       40 	maxll = 71;
       41 	goto start;
       42 
       43 start:
       44 	if (ted_support_version_2 ^= ted_support.version)
       45 	then do;
       46 	     code = error_table_$unimplemented_version;
       47 	     return;
       48 	end;
       49 	if (inp.de = 0) then do;
       50 Abe:
       51 	     msg = "Abe) Buffer empty.";
       52 	     code = tederror_table_$Error_Msg;
       53 	     return;
       54 	end;
       55 	octal = " ";
       56 	line, lineno = inp.lno;
       57 	if string_mode
       58 	then linebegin = 0;
       59 	else do;
       60 	     i = index (reverse (substr (istr, 1, inp.sb-1)), NL);
       61 	     if (i = 0)
       62 	     then linebegin = 0;
       63 	     else linebegin = inp.sb-i;
       64 	end;
       65 	byte = inp.sb - linebegin;
       66 	alpha = " ";
       67 	j1, j2 = 1;
       68 	do i = inp.sb to inp.se;
       69 	     ch = ichr (i);
       70 	     fromc = ch;
       71 	     toc = "000";
       72 	     to.b1 = from.b1;
       73 	     to.b2 = from.b2;
       74 	     to.b3 = from.b3;
       75 	     substr (octal, j2, 3) = toc;
       76 	     j2 = j2 + 3 + mod (j1+1, 2);
       77 	     if (j1 = 10)
       78 	     then j2 = j2 + 2;
       79 	     if (ch < " ") & (ch ^= NL)
       80 	     | (ch > "~")
       81 	     then substr (alpha, j1, 1) = ".";
       82 	     else substr (alpha, j1, 1) = ch;
       83 	     j1 = j1 + 1;
       84 	     if (j1 > maxcc)
       85 	     | (i = inp.se)
       86 	     | (ch = NL) then do;
       87 		jjj = max (index (reverse (line), " "), 4);
       88 		header = substr (line, 8-jjj);
       89 		jjj = max (index (reverse (byte), " "), 5);
       90 		header = header || substr (byte, 12-jjj);
       91 		call ioa_ ("^a  ^va  ^a", header, maxll, octal, alpha);
       92 		alpha = " ";
       93 		octal = " ";
       94 		if (ch = NL)
       95 		then do;
       96 		     lineno = lineno + 1;
       97 		     line = lineno;
       98 		     if ^string_mode
       99 		     then linebegin = i;
      100 		end;
      101 		else line = 0;
      102 		byte = i-linebegin+1;
      103 		j1, j2 = 1;
      104 	     end;
      105 	end;
      106 	req.nc = req.cc;
      107 	current = inp.se;
      108 	code = tederror_table_$Set;
      109 	return;
  1     1 /* BEGIN INCLUDE FILE ..... ted_support.incl.pl1 ..... 03/16/81	       */
  1     2 
  1     3 /* more information may be found in ted_support.gi.info		       */
  1     4 
  1     5 dcl  ted_support_p ptr;
  1     6 dcl ted_support_version_2 fixed bin int static init(2);
  1     7 dcl 1 ted_support based(ted_support_p),
  1     8     2 version fixed bin,	/* 1				       */
  1     9     2 addr_ct fixed bin,	/* number of addresses given: 0,1,2 	  (IN) */
  1    10     2 checkpoint entry (	/* routine to update "safe" status        (IN) */
  1    11 	fixed bin(21),	/* amount of input used up		       */
  1    12 	fixed bin(21)),	/* amount of output used up		       */
  1    13 
  1    14     2 inp,		/***** input string parameters	       */
  1    15 			/* The input data may NOT be modified.	       */
  1    16       3 pt ptr,		/* pointer to base of data string         (IN) */
  1    17       3 sb fixed bin(21),	/* index of addressed string begin        (IN) */
  1    18       3 lno fixed bin(21),	/* linenumber in data string of sb        (IN) */
  1    19       3 se fixed bin(21),	/* index of addressed string end      (IN/OUT) */
  1    20       3 de fixed bin(21),	/* index of data end		  (IN) */
  1    21 
  1    22     2 out,		/***** output string parameters	       */
  1    23       3 pt ptr,		/* pointer to base of output string       (IN) */
  1    24       3 de fixed bin(21),	/* index of data end (already copied) (IN/OUT) */
  1    25       3 ml fixed bin(21),	/* max length of output string	  (IN) */
  1    26 
  1    27     2 req,		/***** request string parameters	       */
  1    28       3 pt ptr,		/* pointer to base of request string	  (IN) */
  1    29       3 cc fixed bin(21),	/* index of current character		  (IN) */
  1    30       3 nc fixed bin(21),	/* index of next character	        (IN/OUT) */
  1    31       3 de fixed bin(21),	/* index of data end	        (IN/OUT) */
  1    32       3 ml fixed bin(21),	/* max length of requsest buffer 	  (IN) */
  1    33 
  1    34 /* req.nc is initialized to req.de, i.e.  request line used-up.  A routine   */
  1    35 /* can set req.nc to 1, put some data into req and set req.de	       */
  1    36 /* appropriately.  The data will be the next ted requests executed after     */
  1    37 /* the routine returns.					       */
  1    38 			
  1    39 /* Or if req.nc is set equal to req.cc then the rest of the request line     */
  1    40 /* will be executed after return.				       */
  1    41 
  1    42     2 string_mode bit(1),	/* 0- line mode, 1- string mode 	  (IN) */
  1    43     2 current fixed bin(21),	/* current location		        (IN/OUT) */
  1    44 			/* current is initialized to "undefined"       */
  1    45     2 get_req entry (),	/* fill the request string with the next line  */
  1    46 			/*  from ted's input stream. req.de will be    */
  1    47 			/*  updated to reflect the new length.	       */
  1    48 			/* req.cc and req.nc are not changed.	       */
  1    49     2 proc_expr entry	/* process the expression for global execution */
  1    50 	(ptr,		/* -> ted_support structure		  [IN] */
  1    51 	char (168) var,	/* message text			 [OUT] */
  1    52 	fixed bin (35)),	/* completion code			 [OUT] */
  1    53     2 do_global entry	/* globally execute some action	       */
  1    54 	(entry (),	/* worker procedure			  [IN] */
  1    55 	char (1),		/* which action, "g" or "v"		  [IN] */
  1    56 	ptr,		/* -> ted_support structure		  [IN] */
  1    57 	char (168) var,	/* message text			 [OUT] */
  1    58 	fixed bin (35)),	/* completion code			 [OUT] */
  1    59     2 reg_exp_p ptr,	/* -> the remembered regular expression area   */
  1    60     2 bcb_p ptr;		/* -> buffer control block		       */
  1    61 /* _________________________________________________________________________ */
  1    62 /*			 ENTRY CONDITIONS			       */
  1    63 /* _________________________________________________________________________ */
  1    64 /* Upon entering, three substructures describe the environment in which the  */
  1    65 /* request is to operate. (Refer to the INPUT diagram) Note that the	       */
  1    66 /* "normal" operational steps are:				       */
  1    67 /* 1) ted copies the string from 1:inp.sb-1 to the output string	       */
  1    68 /* 2) ted_xyz_ takes care of the data from inp.sb:inp.se		       */
  1    69 /* 3) ted copies the string from inp.se+1:inp.de to the output string	       */
  1    70 /* The following 3 diagrams represent conditions upon entering ted_xyz_:     */
  1    71 /* _________________________________________________________________________ */
  1    72 /*	       inp.pt		(\ represents NL)		       */
  1    73 /*		|					       */
  1    74 /* [INPUT]	now is\the time\for all\good men\to come.\.....	       */
  1    75 /*		       |               |                 |	       */
  1    76 /*		    inp.sb          inp.se            inp.de	       */
  1    77 /* _________________________________________________________________________ */
  1    78 /*	       out.pt		(\ represents NL)		       */
  1    79 /*    		|					       */
  1    80 /* [OUTPUT]  ?	now is\........................................	       */
  1    81 /*	   |	      |                                       |	       */
  1    82 /*	current	   out.de				   out.ml	       */
  1    83 /* _________________________________________________________________________ */
  1    84 /*	       req.pt		(\ represents NL)		       */
  1    85 /*    		|					       */
  1    86 /* [REQUEST]	x 2,3|req /farfle/ 1,$P\.......................	       */
  1    87 /*		          |            |                      |	       */
  1    88 /*		       req.cc       req.de		   req.ml	       */
  1    89 /*				req.nc			       */
  1    90 
  1    91 /* _________________________________________________________________________ */
  1    92 /*			 EXIT CONDITIONS			       */
  1    93 /* _________________________________________________________________________ */
  1    94 /* Assume a request replaces the addressed lines with the string following   */
  1    95 /* it, (in this case "farfle") and leaves "." at the beginning of the range. */
  1    96 /*	       out.pt		(\ represents NL)		       */
  1    97 /*    		|					       */
  1    98 /* [OUTPUT]	now is\farfle\farfle\..........................	       */
  1    99 /*		       |            |                         |	       */
  1   100 /*		   current       out.de		   out.ml	       */
  1   101 /* _________________________________________________________________________ */
  1   102 /* 1) If the data after the string are to be treated as more ted requests,   */
  1   103 /*  the request data would be left like this.			       */
  1   104 /*	       req.pt		(\ represents NL)		       */
  1   105 /*    		|					       */
  1   106 /* [REQUEST]	x 2,3|req /farfle/ 1,$P\.......................	       */
  1   107 /*		                   |   |                      |	       */
  1   108 /*			    req.nc   req.de		   req.ml	       */
  1   109 /* _________________________________________________________________________ */
  1   110 /* 2) If the request is going to return a string to be executed, the request */
  1   111 /*  data (and buffer) would be left like this:			       */
  1   112 /*	       req.pt		(\ represents NL)		       */
  1   113 /*    		|        					       */
  1   114 /* [REQUEST]	-1,.1p w\ /farfle/ 1,$P\.......................	       */
  1   115 /*		|       |                                     |	       */
  1   116 /*	       req.nc  req.de			   req.ml	       */
  1   117 
  1   118 /* These return codes are expected				       */
  1   119 dcl (tederror_table_$Copy_Set,/* copy rest of input to output,	       */
  1   120 			/*   and set "." from current		       */
  1   121 			/* "rest of input" is the string which begins  */
  1   122 			/*  at char inp.se+1 and extends to inp.de.    */
  1   123 			/*  If the input has all been processed, then  */
  1   124 			/*  inp.se should be set to inp.de+1.	       */
  1   125      tederror_table_$NoChange,/* dont copy, dont set current	       */
  1   126      tederror_table_$Set,	/* dont copy, just set current	       */
  1   127 			/*   (in input buffer)		       */
  1   128      tederror_table_$Error_Msg,/* msg is being returned.		       */
  1   129 			/*  no copy or set is done		       */
  1   130      tederror_table_$No_Delim1,/* missing 1st delimiter		       */
  1   131      tederror_table_$No_Delim2,/* missing 2nd delimiter		       */
  1   132      tederror_table_$No_Delim3)/* missing 3nd delimiter		       */
  1   133 		fixed bin(35)ext static;
  1   134 dcl  error_table_$unimplemented_version fixed bin(35) ext static;
  1   135 
  1   136 dcl  istr char(inp.de) based(inp.pt);	/* the input string		       */
  1   137 dcl  ichr(inp.de) char(1) based(inp.pt);
  1   138 dcl  ostr char(out.ml) based(out.pt);	/* the output string	       */
  1   139 dcl  ochr(out.ml) char(1) based(out.pt);
  1   140 dcl  rstr char(req.ml) based(req.pt);	/* the request string	       */
  1   141 dcl  rchr(req.ml) char(1) based(req.pt);
  1   142 
  1   143 /* These declarations are used if the expression search is needed by the     */
  1   144 /* request. There are 2 parts to getting an expression search done:	       */
  1   145 /* 	1) compiling	2) searching			       */
  1   146 /* If a function uses the remembered expression, it does this:	       */
  1   147 /*	call tedsrch_$search (ted_support.reg_exp_p,		       */
  1   148 /*	  ted_support.bcbp, string_begin, string_end, match_begin,	       */
  1   149 /*	  match_end, search_end, msg, code);			       */
  1   150 
  1   151 /* If a function utilizes an expression the user supplies, it must first be  */
  1   152 /* compiled:
  1   153*/*	if (expression_length > 0)				       */
  1   154 /*	then call tedsrch_$compile (addr (ichr (expression_begin)),	       */
  1   155 /*	  expression_length, ted_support.reg_exp_p,		       */
  1   156 /*	  ted_support.string_mode, ""b, msg, code);		       */
  1   157 /* This results in the remembered expression being changed to the one just   */
  1   158 /* compiled.						       */
  1   159 
  1   160 /* If a function wishes to utilize a function without it being remembered    */
  1   161 /* by ted, it may declare an area of its own and compile into it. It first   */
  1   162 /* must be initialized:					       */
  1   163 /*	dcl expr_area (200) bit (36);				       */
  1   164 /*	call tedsrch_$init_exp (addr (expr_area), size (expr_area));       */
  2     1 /* BEGIN INCLUDE FILE ..... tedsrch_.incl.pl1 ..... 10/21/82 J Falksen */
  2     2 
  2     3 dcl tedsrch_$init_exp entry (		/* initialize an expression area     */
  2     4 		ptr,		/* -> compiled expression area  [IN] */
  2     5 		fixed bin (21));	/*   length of area in words	       */
  2     6 
  2     7 dcl tedsrch_$compile entry (		/* compile a regular expression      */
  2     8 		ptr,		/* -> regular expression to search   */
  2     9 		fixed bin (21),	/*   length thereof 	       */
  2    10 		ptr,		/* -> compiled expression area  [IN] */
  2    11 		bit (1)aligned,	/* 0- line mode	1- string mode   */
  2    12 		bit (1)aligned,	/* 0- reg expr	1- literal expr  */
  2    13 		char (168) var,	/* error message		 [OUT] */
  2    14 		fixed bin (35)	/* error status code	 [OUT] */
  2    15 		);
  2    16 
  2    17 dcl tedsrch_$search entry (		/* search for expression	       */
  2    18 		ptr,		/* -> compiled expression	       */
  2    19 		ptr,		/* -> buffer ctl block for file      */
  2    20 		fixed bin (21),	/* beginning of string to search     */
  2    21 		fixed bin (21),	/* end of string to search	       */
  2    22 		fixed bin (21),	/* beginning of match	       */
  2    23 		fixed bin (21),	/* end of match		       */
  2    24 		fixed bin (21),	/* end of string used for match      */
  2    25 		char (168)var,	/* error message return	 [OUT] */
  2    26 		fixed bin (35)	/* error status code	 [OUT] */
  2    27 		);
  2    28 
  2    29 
  2    30 /* END INCLUDE FILE ..... tedsrch_.incl.pl1 ..... */
  1   165 
  1   166 
  1   167 /* END INCLUDE FILE ..... ted_support.incl.pl1 .....		       */
      110 
      111 
      112 dcl (addr, index, mod, substr) builtin;
      113 
      114 dcl  NL char (1)int static init ("
      115 ");
      116 dcl  alpha char (20);
      117 dcl  byte pic "zzzzzzzzzzz";
      118 dcl  ch char (1);
      119 dcl  fromc char (1)based (addr (from));
      120 dcl  get_line_length_ entry (char (*)) returns (fixed bin);
      121 dcl  header char (32)var;
      122 dcl  i fixed bin (24);
      123 dcl  ioa_ entry options (variable);
      124 dcl  j1 fixed bin (24);
      125 dcl  j2 fixed bin (24);
      126 dcl  jjj fixed bin;
      127 dcl  line pic "zzzzzzzz";
      128 dcl  linebegin fixed bin (24);
      129 dcl  lineno fixed bin (24);
      130 dcl  maxcc fixed bin;
      131 dcl  maxll fixed bin;
      132 dcl  octal char (74);
      133 
      134 dcl 1 from,
      135     2 b1 bit (3),
      136     2 b2 bit (3),
      137     2 b3 bit (3);
      138 dcl  toc char (3)based (addr (to));
      139 dcl 1 to,
      140     2 f1 bit (6),
      141     2 b1 bit (3),
      142     2 f2 bit (6),
      143     2 b2 bit (3),
      144     2 f3 bit (6),
      145     2 b3 bit (3);
      146 
      147      end ted_dump_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/23/82  1458.2  ted_dump_.pl1                     >spec>on>ted_fix>ted_dump_.pl1
110          1    11/23/82  1324.6  ted_support.incl.pl1              >ldd>include>ted_support.incl.pl1
1-165        2    11/23/82  1324.7  tedsrch_.incl.pl1                 >ldd>include>tedsrch_.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
NL                                     constant        char(1)                  initial unaligned dcl 114 ref 60 79 84 94
addr                                                   builtin function         dcl 112 ref 70 71 75
alpha                           000100 automatic       char(20)                 unaligned dcl 116 set ref 66* 79* 82* 91* 92*
b1                        0(06) 000160 automatic       bit(3)                   level 2 in structure "to" packed unaligned dcl 139
                                                                                  in procedure "ted_dump_" set ref 72*
b1                              000157 automatic       bit(3)                   level 2 in structure "from" packed unaligned dcl 134
                                                                                  in procedure "ted_dump_" set ref 72
b2                        0(03) 000157 automatic       bit(3)                   level 2 in structure "from" packed unaligned dcl 134
                                                                                  in procedure "ted_dump_" set ref 73
b2                        0(15) 000160 automatic       bit(3)                   level 2 in structure "to" packed unaligned dcl 139
                                                                                  in procedure "ted_dump_" set ref 73*
b3                        0(06) 000157 automatic       bit(3)                   level 2 in structure "from" packed unaligned dcl 134
                                                                                  in procedure "ted_dump_" set ref 74
b3                        0(24) 000160 automatic       bit(3)                   level 2 in structure "to" packed unaligned dcl 139
                                                                                  in procedure "ted_dump_" set ref 74*
byte                            000105 automatic       picture(11)              unaligned dcl 117 set ref 65* 89 90 102*
cc                       22            based           fixed bin(21,0)          level 3 dcl 1-7 ref 106
ch                              000110 automatic       char(1)                  unaligned dcl 118 set ref 69* 70 79 79 79 82 84 94
code                                   parameter       fixed bin(35,0)          dcl 14 set ref 11 23 29 36 46* 52* 108*
current                  27            based           fixed bin(21,0)          level 2 dcl 1-7 set ref 107*
de                       13            based           fixed bin(21,0)          level 3 dcl 1-7 ref 49 60
error_table_$unimplemented_version
                                000014 external static fixed bin(35,0)          dcl 1-134 ref 46
from                            000157 automatic       structure                level 1 packed unaligned dcl 134 set ref 70
fromc                                  based           char(1)                  unaligned dcl 119 set ref 70*
get_line_length_                000016 constant        entry                    external dcl 120 ref 17
header                          000111 automatic       varying char(32)         dcl 121 set ref 88* 90* 90 91*
i                               000122 automatic       fixed bin(24,0)          dcl 122 set ref 17* 18 20 60* 61 63 68* 69 84 98
                                                                                  102*
ichr                                   based           char(1)                  array unaligned dcl 1-137 ref 69
index                                                  builtin function         dcl 112 ref 60 87 89
inp                       6            based           structure                level 2 unaligned dcl 1-7
ioa_                            000020 constant        entry                    external dcl 123 ref 91
istr                                   based           char                     unaligned dcl 1-136 ref 60
j1                              000123 automatic       fixed bin(24,0)          dcl 124 set ref 67* 76 77 79 82 83* 83 84 103*
j2                              000124 automatic       fixed bin(24,0)          dcl 125 set ref 67* 75 76* 76 77* 77 103*
jjj                             000125 automatic       fixed bin(17,0)          dcl 126 set ref 87* 88 89* 90
line                            000126 automatic       picture(8)               unaligned dcl 127 set ref 56* 87 88 97* 101*
linebegin                       000130 automatic       fixed bin(24,0)          dcl 128 set ref 57* 61* 63* 65 98* 102
lineno                          000131 automatic       fixed bin(24,0)          dcl 129 set ref 56* 96* 96 97
lno                      11            based           fixed bin(21,0)          level 3 dcl 1-7 ref 56
maxcc                           000132 automatic       fixed bin(17,0)          dcl 130 set ref 25* 31* 38* 84
maxll                           000133 automatic       fixed bin(17,0)          dcl 131 set ref 26* 33* 40* 91*
mod                                                    builtin function         dcl 112 ref 76
msg                                    parameter       varying char(168)        dcl 14 set ref 11 23 29 36 50*
nc                       23            based           fixed bin(21,0)          level 3 dcl 1-7 set ref 106*
octal                           000134 automatic       char(74)                 unaligned dcl 132 set ref 55* 75* 91* 93*
pt                        6            based           pointer                  level 3 dcl 1-7 ref 60 69
req                      20            based           structure                level 2 unaligned dcl 1-7
sb                       10            based           fixed bin(21,0)          level 3 dcl 1-7 ref 60 63 65 68
se                       12            based           fixed bin(21,0)          level 3 dcl 1-7 ref 68 84 107
string_mode              26            based           bit(1)                   level 2 packed unaligned dcl 1-7 ref 57 98
substr                                                 builtin function         dcl 112 set ref 60 75* 79* 82* 88 90
ted_support                            based           structure                level 1 unaligned dcl 1-7
ted_support_p                          parameter       pointer                  dcl 1-5 ref 11 23 29 36 43 49 56 57 60 60 60 63 65
                                                                                  68 68 69 84 98 106 106 107 107
ted_support_version_2                  constant        fixed bin(17,0)          initial dcl 1-6 ref 43
tederror_table_$Error_Msg       000012 external static fixed bin(35,0)          dcl 1-119 ref 52
tederror_table_$Set             000010 external static fixed bin(35,0)          dcl 1-119 ref 108
to                              000160 automatic       structure                level 1 packed unaligned dcl 139 set ref 71 75
toc                                    based           char(3)                  unaligned dcl 138 set ref 71* 75
version                                based           fixed bin(17,0)          level 2 dcl 1-7 ref 43

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
ochr                                   based           char(1)                  array unaligned dcl 1-139
ostr                                   based           char                     unaligned dcl 1-138
rchr                                   based           char(1)                  array unaligned dcl 1-141
rstr                                   based           char                     unaligned dcl 1-140
tederror_table_$Copy_Set               external static fixed bin(35,0)          dcl 1-119
tederror_table_$NoChange               external static fixed bin(35,0)          dcl 1-119
tederror_table_$No_Delim1              external static fixed bin(35,0)          dcl 1-119
tederror_table_$No_Delim2              external static fixed bin(35,0)          dcl 1-119
tederror_table_$No_Delim3              external static fixed bin(35,0)          dcl 1-119
tedsrch_$compile                000000 constant        entry                    external dcl 2-7
tedsrch_$init_exp               000000 constant        entry                    external dcl 2-3
tedsrch_$search                 000000 constant        entry                    external dcl 2-17

NAMES DECLARED BY EXPLICIT CONTEXT.
Abe                             000150 constant        label                    dcl 50
dumpl                           000127 constant        label                    dcl 38 ref 18
dumps                           000113 constant        label                    dcl 31 ref 20
start                           000134 constant        label                    dcl 43 ref 27 34 41
ted_dump_                       000033 constant        entry                    external dcl 11
ted_dumpl_                      000122 constant        entry                    external dcl 36
ted_dumps_                      000106 constant        entry                    external dcl 29
ted_dumpvs_                     000072 constant        entry                    external dcl 23

NAMES DECLARED BY CONTEXT OR IMPLICATION.
max                                                    builtin function         ref 87 89
reverse                                                builtin function         ref 60 87 89

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       724         746     605         734
Length      1154     605        22         171     116           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
ted_dump_                           152 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
ted_dump_                000100 alpha                       ted_dump_
                         000105 byte                        ted_dump_
                         000110 ch                          ted_dump_
                         000111 header                      ted_dump_
                         000122 i                           ted_dump_
                         000123 j1                          ted_dump_
                         000124 j2                          ted_dump_
                         000125 jjj                         ted_dump_
                         000126 line                        ted_dump_
                         000130 linebegin                   ted_dump_
                         000131 lineno                      ted_dump_
                         000132 maxcc                       ted_dump_
                         000133 maxll                       ted_dump_
                         000134 octal                       ted_dump_
                         000157 from                        ted_dump_
                         000160 to                          ted_dump_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   return              mod_fx1             ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
get_line_length_              ioa_

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$unimplemented_version                          tederror_table_$Error_Msg     tederror_table_$Set




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000027        17 000040        18 000063        20 000065        23 000067        25 000077        26 000101
     27 000103        29 000104        31 000113        33 000115        34 000117        36 000120        38 000127
     40 000131        41 000133        43 000134        46 000141        47 000144        49 000145        50 000150
     52 000156        53 000161        55 000162        56 000165        57 000177        60 000203        61 000220
     63 000223        65 000226        66 000240        67 000243        68 000246        69 000255        70 000265
     71 000267        72 000271        73 000276        74 000303        75 000306        76 000312        77 000323
     79 000330        82 000345        83 000351        84 000352        87 000362        88 000376        89 000415
     90 000431        91 000454        92 000511        93 000514        94 000517        96 000522        97 000523
     98 000532       100 000541       101 000542       102 000546       103 000561       105 000564       106 000566
    107 000573       108 000575       109 000600


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
