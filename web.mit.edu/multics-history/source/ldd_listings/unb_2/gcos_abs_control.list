	COMPILATION LISTING OF SEGMENT gcos_abs_control
	Compiled by: Multics PL/I Compiler of October 21, 1974.
	Compiled on: 02/18/75  1101.4 mst Tue
	    Options: optimize map

        1 /* ******************************************************
        2    *                                                    *
        3    *                                                    *
        4    * Copyright (c) 1972 by Massachusetts Institute of   *
        5    * Technology and Honeywell Information Systems, Inc. *
        6    *                                                    *
        7    *                                                    *
        8    ****************************************************** */
        9 
       10 gcos_abs_control: proc;
       11 
       12 /* This procedure is invoked by a gcos absentee job.  Its stack frame remains below the
       13    stack frame of each gcos absentee command.  It contains the record quota overflow handler
       14    for gcos absentee jobs */
       15 
       16 
       17 /* DECLARATIONS */
       18 /* ------------ */
       19 
       20 
       21 /* fixed bin */
       22 
       23 dcl (
       24      code						/* error code */
       25      ) fixed bin (35) aligned;
       26 
       27 dcl (
       28      gcos_daemon_stat_$overflow_channel ext
       29      ) fixed bin (71) aligned;
       30 
       31 
       32 /* bit strings */
       33 
       34 dcl (
       35      gcos_daemon_stat_$process_id ext			/* process id of gcos_daemon */
       36      ) bit (36) aligned;
       37 
       38 
       39 /* character strings */
       40 
       41 dcl (
       42      gcos_daemon_stat2_$overflow_dir ext
       43      ) char (168) aligned;
       44 
       45 
       46 /* conditions */
       47 
       48 dcl (
       49      cleanup,
       50      record_quota_overflow
       51      ) condition;
       52 
       53 
       54 /* external entries */
       55 
       56 dcl  get_wdir_ ext entry
       57      returns (char (168) aligned);
       58 
       59 dcl  hcs_$wakeup ext entry
       60     (bit (36) aligned, fixed bin (71) aligned, fixed bin (71) aligned, fixed bin (35) aligned);
       61 
       62 dcl  listen_$release_stack ext entry
       63     (bit (1) aligned);
       64 
       65 dcl  logout ext entry;
       66 
       67 /*  */
       68 
       69 	on condition (record_quota_overflow)		/* if an overflow occurrs */
       70 	begin;
       71 
       72 	     gcos_daemon_stat2_$overflow_dir = get_wdir_ (); /* set dir name for printing by daemon */
       73 
       74 	     call hcs_$wakeup (gcos_daemon_stat_$process_id, gcos_daemon_stat_$overflow_channel, 0, code);
       75 						/* print it */
       76 
       77 	     call logout;				/* log absentee process out */
       78 
       79 	end;
       80 
       81 next:	on condition (cleanup) go to next;		/* process next command line */
       82 	call listen_$release_stack ("0"b);
       83 
       84 	return;
       85 
       86      end gcos_abs_control;
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	    OFFSET     LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES

NAMES DECLARED BY DECLARE STATEMENT.
cleanup                         000102 stack reference condition                dcl 48 ref 81
code                            000100 automatic       fixed bin(35,0)          dcl 23 set ref 74
gcos_daemon_stat2_$overflow_dir
                                000016 external static char(168)                dcl 41 set ref 72
gcos_daemon_stat_$overflow_channel
                                000012 external static fixed bin(71,0)          dcl 27 set ref 74
gcos_daemon_stat_$process_id
                                000014 external static bit(36)                  dcl 34 set ref 74
get_wdir_                       000020 constant        entry                    external dcl 56 ref 72
hcs_$wakeup                     000022 constant        entry                    external dcl 59 ref 74
listen_$release_stack
                                000024 constant        entry                    external dcl 62 ref 82
logout                          000026 constant        entry                    external dcl 65 ref 77
record_quota_overflow
                                000110 stack reference condition                dcl 48 ref 69

NAMES DECLARED BY EXPLICIT CONTEXT.
gcos_abs_control                000015 constant        entry                    external dcl 10 ref 10
next                            000073 constant        label                    dcl 81 ref 81 81

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       272         322     124         302
Length       500     124        30         143     145          20

External procedure gcos_abs_control uses 84 words of automatic storage
On unit on line 69 uses 80 words of automatic storage
On unit on line 81 uses 64 words of automatic storage

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        return              tra_ext             enable              ext_entry           int_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
get_wdir_                     hcs_$wakeup                   listen_$release_stack         logout

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
gcos_daemon_stat2_$overflow_dir                             gcos_daemon_stat_$overflow_channel
gcos_daemon_stat_$process_id




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     10 000014        69 000022        72 000036        74 000045        77 000065        79 000072        81 000073
     82 000112        84 000123


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
