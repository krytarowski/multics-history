ASSEMBLY LISTING OF SEGMENT >special_ldd>on>apl.1129>apl_monadic_not_appendage_.alm  
ASSEMBLED ON:	11/29/83  1615.3 mst Tue
OPTIONS USED:	list 
ASSEMBLED BY:	ALM Version  6.6  November 1982 
ASSEMBLER CREATED:	09/21/83  1227.3 mst Wed

                                     1  "  ******************************************************
                                     2  "  *                                                    *
                                     3  "  *                                                    *
                                     4  "  * Copyright (c) 1972 by Massachusetts Institute of   *
                                     5  "  * Technology and Honeywell Information Systems, Inc. *
                                     6  "  *                                                    *
                                     7  "  *                                                    *
                                     8  "  ******************************************************
                                     9  
                                    10  "
                                    11  "	apl_monadic_not_appendage_ uses a fast algorithm to change
                                    12  "	a float bin (63) 0 to a 1 or vice versa
                                    13  "
                                    14  "	Written 800131 by B. Margulies
                                    15  "	Modified 800227 by PG to work
                                    16  "
    000000                          17  	name 	apl_monadic_not_appendage_
                        000000      18  	segdef	apl_monadic_not_appendage_
                        000051      19  	segdef	in_place
                                    20  "	
                                    21  "
                                    22  "	call apl_monadic_not_appendage_ (right_values_ptr, count, result_values_ptr, temp)
                                    23  "	call apl_monadic_not_appendage_$in_place (right_values_ptr, count)
                                    24  "	     
                                    25  " declare right_values_ptr ptr /* pointer to operand array of float bin (63) */;
                                    26  " declare count fixed bin (21) aligned /* number of values to count */;
                                    27  " declare result_values_ptr ptr /* ptr to result array of float bin (63)'s */;
                                    28  " declare temp fixed bin /* word to be used as a temporary */;
                                    29  "
                        000002      30  	equ	right_values_ptr,2		" parameter 1
                        000004      31  	equ	count,4			" parameter 2
                        000006      32  	equ	result_values_ptr,6		" parameter 3
                        000010      33  	equ	temp,8			" parameter 4
                                    34  "
                        001000      35  	bool	A,001000		" rpd A flag
                        000400      36  	bool	B,000400		" rpd B flag
                                    37  "
                                    38  "
                                    39  "	This entrypoint takes an operand that is not on the stack,
                                    40  "	computes the result, and stores it in the result array.
    000000                          41  apl_monadic_not_appendage_:
    000000  aa  0 00004 3701 20     42  	epp4	pr0|count,*	" get pointer to count
    000001  aa  4 00000 2361 00     43  	ldq	pr4|0		" get count
    000002  0a   000110 6000 00     44  	tze	go_home		" zero-length array, nothing to do
    000003  aa  0 00006 3515 20     45  	epp1	pr0|result_values_ptr,*	" get pointer to pointer to result values
    000004  aa  1 00000 3515 20     46  	epp1	pr1|0,*		" get pointer to result values
    000005  aa  0 00002 3535 20     47  	epp3	pr0|right_values_ptr,*	" ..
    000006  aa  3 00000 3535 20     48  	epp3	pr3|0,*		" ..
    000007  aa  0 00010 3715 20     49  	epp5	pr0|temp,*	" get ptr to temp word
    000010  aa   000000 2350 07     50  	lda	0,dl
    000011  aa   000000 6240 00     51  	eax4	0
    000012  aa   000042 7370 00     52  	lls	34		" get count/4 in A
    000013  aa   000025 7350 00     53  	als	3+18		" get 1+offset of last word of last element, in AU
    000014  aa  5 00000 7551 00     54  	sta	pr5|0		" save in temp word
    000015  aa   000042 7720 00     55  	qrl	34		" get remainder of count/4 in Q
    000016  aa   000000 6210 06     56  	eax1	0,ql		" and move it to X1
    000017  aa   000000 1150 07     57  	cmpa	0,dl		" any elements in first group?
    000020  0a   000040 6000 00     58  	tze	copy_last_group	" no, check remainder
                                    59  "
    000021                          60  copy_group_loop:
    000021  aa  3 00000 2371 14     61  	ldaq	pr3|0,x4		" double-word 1
    000022  0a   000112 6770 00     62  	eraq	flip_bits
    000023  aa  1 00000 7571 14     63  	staq	pr1|0,x4
    000024  aa  3 00002 2371 14     64  	ldaq	pr3|2,x4		" double-word 2
    000025  0a   000112 6770 00     65  	eraq	flip_bits
    000026  aa  1 00002 7571 14     66  	staq	pr1|2,x4
    000027  aa  3 00004 2371 14     67  	ldaq	pr3|4,x4		" double-word 3
    000030  0a   000112 6770 00     68  	eraq	flip_bits
    000031  aa  1 00004 7571 14     69  	staq	pr1|4,x4
    000032  aa  3 00006 2371 14     70  	ldaq	pr3|6,x4		" double-word 4
    000033  0a   000112 6770 00     71  	eraq	flip_bits
    000034  aa  1 00006 7571 14     72  	staq	pr1|6,x4
    000035  aa   000010 0240 03     73  	adlx4	8,du		" step over words just processed
    000036  aa  5 00000 1041 00     74  	cmpx4	pr5|0		" done with groups?
    000037  0a   000021 6040 00     75  	tmi	copy_group_loop	" no, do it again
                                    76  "
    000040                          77  copy_last_group:
    000040  aa   000000 1010 03     78  	cmpx1	0,du		" last group empty?
    000041  0a   000110 6000 00     79  	tze	go_home		" yes
                                    80  "
    000042                          81  copy_last_loop:
    000042  aa  3 00000 2371 14     82  	ldaq	pr3|0,x4
    000043  0a   000112 6770 00     83  	eraq	flip_bits
    000044  aa  1 00000 7571 14     84  	staq	pr1|0,x4
    000045  aa   000002 0240 03     85  	adlx4	2,du		" step over words just processed
    000046  aa   000001 1210 03     86  	sblx1	1,du		" count down remainder
    000047  0a   000042 6054 00     87  	tpnz	copy_last_loop
    000050  aa  7 00044 7101 20     88  	short_return
                                    89  " 
                                    90  "
                                    91  "	This entrypoint takes an operand that is on the stack,
                                    92  "	and overwrites it with the result.
                                    93  "
    000051                          94  in_place:
    000051  aa  0 00004 3701 20     95  	epp4	pr0|count,*	" get pointer to count
    000052  aa  4 00000 2361 00     96  	ldq	pr4|0		" get number of elements to process
    000053  0a   000110 6000 00     97  	tze	go_home		" nothing to do?
    000054  aa  0 00002 3535 20     98  	epp3	pr0|right_values_ptr,*	" get pointer to pointer to values
    000055  aa  3 00000 3535 20     99  	epp3	pr3|0,*		" get pointer to values
    000056  aa   000000 2350 07    100  	lda	0,dl		" initialize A
    000057  aa   000001 7320 00    101  	qrs	1		" make count even
    000060  aa   000034 7370 00    102  	lls	28		" make A have number of 512-element groups
                                   103  				" now Q(0:7) has number of pairs in last group
    000061  aa   000000 6220 02    104  	eax2	0,qu		" number of pairs in last group in X2
    000062  aa   000000 6230 00    105  	eax3	0		" initialize
    000063  aa   000002 6240 00    106  	eax4	2		" ..
    000064  aa   402400 2360 03    107  	ldq	=o402400,du	" mask that turns 0 to 1 or back
    000065  aa   000000 1150 07    108  	cmpa	0,dl		" any full groups?
    000066  0a   000076 6000 00    109  	tze	last_group	" no, check last group
    000067                         110  top:
    000067  aa   001400 6200 00    111  	eax0	A+B		" count=256, A=1, B=1
    000070  aa   000000 0110 03    112  	odd			" the rpd arguments must be a Y-pair
    000071  aa   000000 5602 04    113  	rpdx	,4		" delta=4
    000072  aa  3 00000 6561 13    114  	ersq	pr3|0,x3
    000073  aa  3 00000 6561 14    115  	ersq	pr3|0,x4
    000074  aa   000001 1350 07    116  	sbla	1,dl		" onto the next 256-element group
    000075  0a   000067 6054 00    117  	tpnz	top		" if any
    000076                         118  last_group:
    000076  aa   000000 1020 03    119  	cmpx2	0,du		" any pairs in last group?
    000077  0a   000104 6000 00    120  	tze	last_element	" no, see if one element left
    000100  aa   001400 6200 12    121  	eax0	A+B,x2		" count=X2, A=1, B=1
                                   122  	odd
    000101  aa   000000 5602 04    123  	rpdx	,4		" delta=4
    000102  aa  3 00000 6561 13    124  	ersq	pr3|0,x3		" X3 continues from last value
    000103  aa  3 00000 6561 14    125  	ersq	pr3|0,x4		" ..
    000104                         126  last_element:
    000104  aa  4 00000 2351 00    127  	lda	pr4|0		" get back count
    000105  aa   000001 3150 07    128  	cana	=o000001,dl	" odd?
    000106  0a   000110 6000 00    129  	tze	go_home		" it was even all along
    000107  aa  3 00000 6561 13    130  	ersq	pr3|0,x3		" rpd leaves it pointing to next
    000110  aa  7 00044 7101 20    131  go_home:	short_return
                                   132  "
    000111  aa   000000 0110 03    133  	even
    000112                         134  flip_bits:
    000112  aa   402400 000000     135  	oct	402400000000,0
    000113  aa   000000 000000 
                                   136  	end

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000114  5a   000003 000000 
    000115  5a   000044 600000 
    000116  aa   000000 000000 
    000117  55   000015 000002 
    000120  5a   000002 400003 
    000121  55   000006 000015 
    000122  aa  032 141 160 154
    000123  aa  137 155 157 156
    000124  aa  141 144 151 143
    000125  aa  137 156 157 164
    000126  aa  137 141 160 160
    000127  aa  145 156 144 141
    000130  aa  147 145 137 000
    000131  55   000023 000003 
    000132  0a   000051 400000 
    000133  55   000020 000003 
    000134  aa  010 151 156 137         in_place
    000135  aa  160 154 141 143
    000136  aa  145 000 000 000
    000137  55   000035 000015 
    000140  0a   000000 400000 
    000141  55   000026 000003 
    000142  aa  032 141 160 154         apl_monadic_not_appendage_
    000143  aa  137 155 157 156
    000144  aa  141 144 151 143
    000145  aa  137 156 157 164
    000146  aa  137 141 160 160
    000147  aa  145 156 144 141
    000150  aa  147 145 137 000
    000151  55   000002 000023 
    000152  6a   000000 400002 
    000153  55   000040 000003 
    000154  aa  014 163 171 155         symbol_table
    000155  aa  142 157 154 137
    000156  aa  164 141 142 154
    000157  aa  145 000 000 000

DEFINITIONS HASH TABLE

    000160  aa   000000 000015 
    000161  aa   000000 000000 
    000162  aa   000000 000000 
    000163  aa   000000 000000 
    000164  aa   000000 000000 
    000165  aa   000000 000000 
    000166  aa   000000 000000 
    000167  5a   000015 000000 
    000170  5a   000035 000000 
    000171  aa   000000 000000 
    000172  aa   000000 000000 
    000173  aa   000000 000000 
    000174  aa   000000 000000 
    000175  5a   000023 000000 

NO EXTERNAL NAMES

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    000176  aa   000001 000000 
    000177  aa   000000 000000 

INTERNAL EXPRESSION WORDS

LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000114 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000010 
    000007  a2   000000 000000 
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000004 
    000004  aa   000000 112143 
    000005  aa   305203 523135 
    000006  aa   000000 112272 
    000007  aa   254463 330264 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000131 
    000020  aa   000000 000110 
    000021  aa   000000 000120 
    000022  aa   000123 000110 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   040066 056066 
    000030  aa   040040 116157 
    000031  aa   166145 155142 
    000032  aa   145162 040061 
    000033  aa   071070 062040 
    000034  aa   115141 162164 
    000035  aa   151156 163157 
    000036  aa   156056 123171 
    000037  aa   163115 141151 
    000040  aa   156164 056155 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   154151 163164 
    000045  aa   040040 040040 
    000046  aa   040040 040040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040040 040040 
    000057  aa   040040 040040 
    000060  aa   040040 040040 
    000061  aa   040040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000001 
    000066  aa   000072 000067 
    000067  aa   122721 262620 
    000070  aa   000000 112272 
    000071  aa   152165 400000 
    000072  aa   076163 160145          >special_ldd>on>apl.1129>apl_monadic_not_appendage_.alm
    000073  aa   143151 141154 
    000074  aa   137154 144144 
    000075  aa   076157 156076 
    000076  aa   141160 154056 
    000077  aa   061061 062071 
    000100  aa   076141 160154 
    000101  aa   137155 157156 
    000102  aa   141144 151143 
    000103  aa   137156 157164 
    000104  aa   137141 160160 
    000105  aa   145156 144141 
    000106  aa   147145 137056 
    000107  aa   141154 155040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

        1000    A                        apl_monadic_not_appendage_:      35,  111,  121.
           0    apl_monadic_not_appendage_     apl_monadic_not_appendage_:      18,   41.
         400    B                        apl_monadic_not_appendage_:      36,  111,  121.
          21    copy_group_loop          apl_monadic_not_appendage_:      60,   75.
          40    copy_last_group          apl_monadic_not_appendage_:      58,   77.
          42    copy_last_loop           apl_monadic_not_appendage_:      81,   87.
           4    count                    apl_monadic_not_appendage_:      31,   42,   95.
         112    flip_bits                apl_monadic_not_appendage_:      62,   65,   68,   71,   83,  134.
         110    go_home                  apl_monadic_not_appendage_:      44,   79,   97,  129,  131.
          51    in_place                 apl_monadic_not_appendage_:      19,   94.
         104    last_element             apl_monadic_not_appendage_:     120,  126.
          76    last_group               apl_monadic_not_appendage_:     109,  118.
           6    result_values_ptr        apl_monadic_not_appendage_:      32,   45.
           2    right_values_ptr         apl_monadic_not_appendage_:      30,   47,   98.
          10    temp                     apl_monadic_not_appendage_:      33,   49.
          67    top                      apl_monadic_not_appendage_:     110,  117.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
