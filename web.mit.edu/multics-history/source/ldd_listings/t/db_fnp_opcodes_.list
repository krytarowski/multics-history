	COMPILATION LISTING OF SEGMENT !BBBJMWpdhdGqLh
	Compiled by: Multics PL/I Compiler, Release 27d, of October 11, 1982
	Compiled at: Honeywell LISD Phoenix, System M
	Compiled on: 11/15/82  1536.2 mst Mon
	    Options: table map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 /* DB_FNP_OPCODES_ - Procedure that defines a table of FNP opcodes */
       12 
       13 /* Written February 1977 by Larry Johnson */
       14 
       15 db_fnp_opcodes_: proc;
       16 
       17 /* Automatic */
       18 
       19 dcl  code fixed bin (35);
       20 dcl  ptr_array (1) ptr;
       21 dcl 1 cds like cds_args automatic;
       22 
       23 /* Constants */
       24 
       25 dcl  name char (15) int static options (constant) init ("db_fnp_opcodes_");
       26 dcl  exclude_all char (32) int static options (constant) init ("**");
       27 
       28 /* External */
       29 
       30 dcl  get_temp_segments_ entry (char (*), dim (*) ptr, fixed bin (35));
       31 dcl  release_temp_segments_ entry (char (*), dim (*) ptr, fixed bin (35));
       32 dcl  create_data_segment_ entry (ptr, fixed bin (35));
       33 dcl  com_err_ entry options (variable);
       34 dcl  cv_oct_ entry (char (*)) returns (fixed bin (35));
       35 
       36 dcl (addr, null, translate) builtin;
       37 
       38 dcl  cleanup condition;
       39 
       40 
       41 /* Setup temp segment */
       42 
       43 	ptr_array = null;
       44 	on cleanup call clean_up;
       45 	call get_temp_segments_ (name, ptr_array, code);
       46 	if code ^= 0 then do;
       47 	     call com_err_ (code, name, "Unable to get temp segment.");
       48 	     return;
       49 	end;
       50 
       51 /* Fill the opcode table */
       52 
       53 	optablep = ptr_array (1);
       54 	optable.cnt = 0;
       55 	call build_table;
       56 
       57 /* Now create the data segment */
       58 
       59 	cds.p (1) = optablep;
       60 	cds.len (1) = size (optable);
       61 	cds.struct_name (1) = "optable";
       62 	cds.p (2) = null;
       63 	cds.len (2) = 0;
       64 	cds.struct_name (2) = "";
       65 	cds.seg_name = name;
       66 	cds.num_exclude_names = 1;
       67 	cds.exclude_array_ptr = addr (exclude_all);
       68 	string (cds.switches) = "0"b;
       69 	cds.have_text = "1"b;
       70 	call create_data_segment_ (addr (cds), code);
       71 	if code ^= 0 then call com_err_ (name, code);
       72 	call clean_up;
       73 	return;
       74 
       75 
       76 /* Procedure to fill the opcode table */
       77 
       78 build_table: proc;
       79 
       80 	     call store (0, "ada   ", "X06X");
       81 	     call store (0, "adcx1 ", "X42X");
       82 	     call store (0, "adcx2 ", "X02X");
       83 	     call store (0, "adcx3 ", "X40X");
       84 	     call store (0, "adq   ", "X46X");
       85 	     call store (0, "ana   ", "X34X");
       86 	     call store (0, "ansa  ", "X32X");
       87 	     call store (0, "aos   ", "X76X");
       88 	     call store (0, "asa   ", "X16X");
       89 	     call store (0, "cana  ", "X31X");
       90 	     call store (0, "cioc  ", "X60X");
       91 	     call store (0, "cmpa  ", "X27X");
       92 	     call store (0, "cmpq  ", "X67X");
       93 	     call store (0, "cmpx1 ", "X63X");
       94 	     call store (0, "cmpx2 ", "X23X");
       95 	     call store (0, "cmpx3 ", "X61X");
       96 	     call store (0, "dvf   ", "X21X");
       97 	     call store (0, "era   ", "X35X");
       98 	     call store (0, "ersa  ", "X62X");
       99 	     call store (0, "lda   ", "X07X");
      100 	     call store (0, "ldex  ", "X30X");
      101 	     call store (0, "ldi   ", "X44X");
      102 	     call store (0, "ldq   ", "X47X");
      103 	     call store (0, "ldx1  ", "X43X");
      104 	     call store (0, "ldx2  ", "X03X");
      105 	     call store (0, "ldx3  ", "X41X");
      106 	     call store (0, "mpf   ", "X01X");
      107 	     call store (0, "ora   ", "X37X");
      108 	     call store (0, "orsa  ", "X72X");
      109 	     call store (0, "sba   ", "X26X");
      110 	     call store (0, "sbq   ", "X66X");
      111 	     call store (0, "ssa   ", "X36X");
      112 	     call store (0, "sta   ", "X17X");
      113 	     call store (0, "stex  ", "X70X");
      114 	     call store (0, "sti   ", "X54X");
      115 	     call store (0, "stq   ", "X57X");
      116 	     call store (0, "stx1  ", "X53X");
      117 	     call store (0, "stx2  ", "X13X");
      118 	     call store (0, "stx3  ", "X50X");
      119 	     call store (0, "stz   ", "X56X");
      120 	     call store (0, "szn   ", "X20X");
      121 	     call store (0, "tmi   ", "X75X");
      122 	     call store (0, "tnc   ", "X45X");
      123 	     call store (0, "tnz   ", "X64X");
      124 	     call store (0, "tov   ", "X55X");
      125 	     call store (0, "tpl   ", "X65X");
      126 	     call store (0, "tra   ", "X71X");
      127 	     call store (0, "tsy   ", "X10X");
      128 	     call store (0, "tze   ", "X74X");
      129 	     call store (0, "adaq  ", "X15X");
      130 	     call store (0, "ldaq  ", "X04X");
      131 	     call store (0, "sbaq  ", "X24X");
      132 	     call store (0, "staq  ", "X14X");
      133 	     call store (1, "iaa   ", "773X");
      134 	     call store (2, "iacx1 ", "173X");
      135 	     call store (2, "iacx2 ", "273X");
      136 	     call store (2, "iacx3 ", "373X");
      137 	     call store (1, "iana  ", "022X");
      138 	     call store (1, "iaq   ", "573X");
      139 	     call store (1, "icana ", "222X");
      140 	     call store (1, "icmpa ", "422X");
      141 	     call store (1, "iera  ", "322X");
      142 	     call store (1, "ila   ", "673X");
      143 	     call store (1, "ilq   ", "473X");
      144 	     call store (1, "iora  ", "122X");
      145 	     call store (1, "sel   ", "073X");
      146 	     call store (1, "rier  ", "012X");
      147 	     call store (1, "ria   ", "412X");
      148 	     call store (1, "sier  ", "052X");
      149 	     call store (1, "sic   ", "452X");
      150 	     call store (3, "alp   ", "3336");
      151 	     call store (3, "alr   ", "2336");
      152 	     call store (3, "als   ", "0336");
      153 	     call store (3, "arl   ", "2337");
      154 	     call store (3, "ars   ", "0337");
      155 	     call store (3, "llr   ", "2334");
      156 	     call store (3, "lls   ", "0334");
      157 	     call store (3, "lrl   ", "2335");
      158 	     call store (3, "lrs   ", "0335");
      159 	     call store (3, "qlp   ", "7336");
      160 	     call store (3, "qlr   ", "6336");
      161 	     call store (3, "qls   ", "4336");
      162 	     call store (3, "qrl   ", "6337");
      163 	     call store (3, "qrs   ", "4337");
      164 	     call store (4, "caq   ", "6333");
      165 	     call store (4, "cax1  ", "4332");
      166 	     call store (4, "cax2  ", "0332");
      167 	     call store (4, "cax3  ", "4333");
      168 	     call store (4, "cqa   ", "7333");
      169 	     call store (4, "cx1a  ", "2332");
      170 	     call store (4, "cx2a  ", "3332");
      171 	     call store (4, "cx3a  ", "3333");
      172 	     call store (4, "dis   ", "4331");
      173 	     call store (4, "eni   ", "7331");
      174 	     call store (4, "inh   ", "3331");
      175 	     call store (4, "nop   ", "2331");
      176 	     call store (4, "nrm   ", "1336");
      177 	     call store (4, "nrml  ", "1334");
      178 
      179 	     return;
      180 
      181 	end build_table;
      182 
      183 
      184 /* Procedure to put one entry in the table */
      185 
      186 store:	proc (n, name, code);
      187 
      188 dcl  n fixed bin;					/* Opcode type */
      189 dcl  name char (6);					/* Name of opcode */
      190 dcl  code char (4);					/* Opcode - X means dont care */
      191 
      192 dcl  temp char (4);
      193 
      194 	     optable.cnt = optable.cnt + 1;
      195 	     opp = addr (optable.entry (optable.cnt));
      196 
      197 	     op.name = name;
      198 	     op.type = n;
      199 
      200 	     temp = translate (code, "0", "X");		/* Replace xes by zeroes to get opcode */
      201 	     op.code = bit (bin (cv_oct_ (temp), 12), 12);
      202 
      203 	     temp = translate (code, "077777777", "X01234567"); /* Get mask for finding opcode */
      204 	     op.mask = bit (bin (cv_oct_ (temp), 12), 12);
      205 
      206 	     return;
      207 
      208 	end store;
      209 
      210 
      211 clean_up:	proc;
      212 
      213 	     if ptr_array (1) ^= null then call release_temp_segments_ (name, ptr_array, code);
      214 	     return;
      215 
      216 	end clean_up;
      217 
  1     1 /* Begin include file ..... debug_fnp_data.incl.pl1 */
  1     2 
  1     3 /* Describes various structures used by the debug_fnp command */
  1     4 
  1     5 /* Written February 1977 by Larry Johnson */
  1     6 
  1     7 /* Structures describing a symbol table used by the debug_fnp command,
  1     8*   to find values for common FNP symbols. */
  1     9 
  1    10 dcl  db_fnp_symbols_$db_fnp_symbols_ ext;
  1    11 
  1    12 dcl  symbol_tablep ptr;
  1    13 
  1    14 dcl 1 symbol_table aligned based (symbol_tablep),
  1    15     2 cnt fixed bin,				/* Number of entries */
  1    16     2 maxcnt fixed bin,				/* Max count */
  1    17     2 entry (symbol_table.cnt) unal,
  1    18       3 one_symbol like sym unal;
  1    19 
  1    20 dcl  symp ptr;					/* Pointer to one symbol */
  1    21 
  1    22 dcl 1 sym unal based (symp),
  1    23     2 name char (6),
  1    24     2 value fixed bin (17),
  1    25     2 len fixed bin (17),				/* Number of words */
  1    26     2 reloc fixed bin (17),
  1    27     2 type fixed bin (17),
  1    28     2 flag_mem char (6),				/* If non blank, name of word in which this is a flag */
  1    29     2 explain bit (18),				/* Offset to explanation for symbol */
  1    30     2 pad bit (18);
  1    31 
  1    32 dcl  exptextp ptr;
  1    33 
  1    34 dcl 1 exptext aligned based (exptextp),			/* Symbol explanation entry */
  1    35     2 len fixed bin (8) unal,
  1    36     2 data char (exptext.len) unal;
  1    37 
  1    38 /* Values for sym.reloc, which is relocation required to find the symbol */
  1    39 
  1    40 dcl (reloc_abs init (0),				/* Value is absolute */
  1    41      reloc_tib init (1),				/* Value is relative to current tib addr */
  1    42      reloc_hwcm init (2),				/* Value is relative to current hwcm */
  1    43      reloc_sfcm init (3),				/* Value is relative to software comm region */
  1    44      reloc_meters init (4))				/* Value is relative to tib meters */
  1    45      int static options (constant);
  1    46 
  1    47 /* Values for sym.type, which is the mode to be used in displaying symbol */
  1    48 
  1    49 dcl (type_oct init (0),				/* Octal, default for most symbols */
  1    50      type_char init (1),				/* Ascii characters */
  1    51      type_addr init (2),				/* Address to be converted to mod|offset */
  1    52      type_clock init (3),				/* Multics clock value */
  1    53      type_inst init (4),				/* Machine instruction */
  1    54      type_op init (5),				/* Interpreter opblock format */
  1    55      type_dec init (6),				/* Decimal */
  1    56      type_bit init (7),				/* In bits */
  1    57      type_ebcdic init (8))				/* 8-bit ebcdic characters */
  1    58      int static options (constant);
  1    59 
  1    60 dcl  long_type_names (0:8) char (12) int static options (constant) init (
  1    61      "octal", "character", "address", "clock", "instruction", "opblock", "decimal", "bit", "ebcdic");
  1    62 dcl  short_type_names (0:8) char (4) int static options (constant) init (
  1    63      "oct", "ch", "addr", "ck", "inst", "op", "dec", "bit", "ebc");
  1    64 
  1    65 
  1    66 /* Structure of suplmental data used in evaluating expressions */
  1    67 
  1    68 dcl  expr_infop ptr;
  1    69 
  1    70 dcl 1 expr_info aligned based (expr_infop),
  1    71     2 flags,
  1    72       3 star_known bit (1) unal,			/* Value of "*" is known */
  1    73       3 tib_known bit (1) unal,			/* TIB addresses may be used */
  1    74       3 hwcm_known bit (1) unal,			/* HWCM address may be used */
  1    75       3 sfcm_known bit (1) unal,			/* SFCM address may be used */
  1    76       3 pad bit (32) unal,
  1    77     2 star_addr fixed bin,				/* Value of "*" */
  1    78     2 tib_addr fixed bin,				/* Address of TIB */
  1    79     2 hwcm_addr fixed bin,				/* Address of HWCM */
  1    80     2 sfcm_addr fixed bin,				/* Address of SFCM */
  1    81     2 type fixed bin,				/* Expression type (mode for printing) */
  1    82     2 len fixed bin,				/* Implied length of expression */
  1    83     2 user_tablep ptr;				/* Pointer to a user symbol table */
  1    84 
  1    85 
  1    86 /* Structure of opcode table of machine instructions */
  1    87 
  1    88 dcl  db_fnp_opcodes_$ ext;
  1    89 
  1    90 dcl  optablep ptr;
  1    91 
  1    92 dcl 1 optable aligned based (optablep),
  1    93     2 cnt fixed bin,
  1    94     2 entry (optable.cnt) unal,
  1    95       3 one_op like op;
  1    96 
  1    97 dcl  opp ptr;
  1    98 
  1    99 dcl 1 op unal based (opp),
  1   100     2 name char (6),				/* The mneumonic */
  1   101     2 code bit (12),				/* The  opcode */
  1   102     2 mask bit (12),				/* Mask that says where the opcode is */
  1   103     2 type fixed bin (11),				/* Type of display required */
  1   104     2 pad bit (18);
  1   105 
  1   106 /* Values for op.type are:
  1   107*   0 - storage reference
  1   108*   1 - non-storage reference (immediate),
  1   109*   2 - non-storage reference (iacxn only),
  1   110*   3 - non-storage reference (shifts),
  1   111*   4 - non-storage reference (no operands) */
  1   112 
  1   113 
  1   114 /* Stuctures used while parsing commands into operands */
  1   115 
  1   116 dcl  cmd_infop ptr;
  1   117 
  1   118 dcl 1 cmd_info aligned based (cmd_infop),
  1   119     2 inbuf char (256),				/* For reading lines */
  1   120     2 opbuf char (256),				/* Used for operand in undoubling quotes */
  1   121     2 commandp ptr,					/* Address of unparsed part of command */
  1   122     2 commandl fixed bin,				/* Length of unparsed part */
  1   123     2 operandp ptr,					/* Address of current operand */
  1   124     2 operandl fixed bin,				/* And its length */
  1   125     2 error bit (1),				/* Set if error parsing operand */
  1   126     2 endline bit (1),				/* Set if no more operands on line */
  1   127     2 opstring bit (1),				/* Set if operand was unquoted string */
  1   128     2 flush bit (1),				/* If set, rest of input line will be ignored */
  1   129     2 envp ptr;					/* Pointer to the debug_fnp environment structure */
  1   130 
  1   131 dcl  command char (cmd_info.commandl) based (cmd_info.commandp);
  1   132 dcl  operand char (cmd_info.operandl) based (cmd_info.operandp);
  1   133 
  1   134 /* The following structure describes the current debug_fnp environment. */
  1   135 /* It specifies whether we are working on a dump, fnp, core image, etc. */
  1   136 
  1   137 dcl  envp ptr;
  1   138 
  1   139 dcl 1 env aligned based (envp),
  1   140     2 corep ptr,					/* Ptr to current dump or core-image. Null means live FNP */
  1   141     2 fnp fixed bin,				/* Current fnp number */
  1   142     2 dump_dir char (168) unal,			/* Directory where dumps are found */
  1   143     2 dir char (168) unal,				/* Directory for current dump or core image */
  1   144     2 ename char (32) unal,				/* Ename for current dump or core image */
  1   145     2 tty_name char (32),				/* Name of current channel */
  1   146     2 segp ptr,					/* Pointer to base of current segment */
  1   147     2 flags unal,
  1   148       3 fnps_configured bit (8),			/* Says which FNP's appear in config deck */
  1   149       3 fnp_sw bit (1),				/* 1 if currently working on fnp */
  1   150       3 image_sw bit (1),				/* 1 if currently working on a core-image */
  1   151       3 dump_sw bit (1),				/* 1 if current working on a dump */
  1   152       3 fdump_sw bit (1),				/* 1 if current dump is a fdump */
  1   153       3 pad bit (24),
  1   154     2 dump_time fixed bin (71);			/* Clock time dump occured */
  1   155 
  1   156 /* Structure of data defining table of interpreter opblock names */
  1   157 
  1   158 dcl  db_fnp_opblocks_$ ext;
  1   159 
  1   160 dcl  opblock_tablep ptr;
  1   161 
  1   162 dcl 1 opblock_table aligned based (opblock_tablep),
  1   163     2 cnt fixed bin,
  1   164     2 name (0:opblock_table.cnt) char (6) unal;
  1   165 
  1   166 /* End include file ..... debug_fnp_data.incl.pl1 */
      218 
      219 
  2     1 /* BEGIN INCLUDE FILE cds_args.incl.pl1 */
  2     2 
  2     3 dcl 1 cds_args based aligned,
  2     4     2 sections (2),
  2     5       3 p ptr,					/* pointer to data for text/static section */
  2     6       3 len fixed bin (18),				/* size of text/static section */
  2     7       3 struct_name char (32),			/* name of declared structure for this section */
  2     8     2 seg_name char (32),				/* name to create segment by */
  2     9     2 num_exclude_names fixed bin,			/* number of names in exclude array */
  2    10     2 exclude_array_ptr ptr,				/* pointer to array of exclude names */
  2    11     2 switches,					/* control switches */
  2    12       3 defs_in_link bit (1) unal,			/* says put defs in linkage */
  2    13       3 separate_static bit (1) unal,			/* says separate static section is wanted */
  2    14       3 have_text bit (1) unal,			/* ON if text section given */
  2    15       3 have_static bit (1) unal,			/* ON if static section given */
  2    16       3 pad bit (32) unal;
  2    17 
  2    18 dcl  exclude_names (1) char (32) based;			/* pointed to be cds_args.exclude_array_ptr */
  2    19 
  2    20 /* END INCLUDE FILE cds_args.incl.pl1 */
      220 
      221      end db_fnp_opcodes_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/15/82  1535.9  !BBBJMWpdhdGqLh.pl1               >dumps>old>recomp>db_fnp_opcodes_.cds
218          1    06/19/81  2115.0  debug_fnp_data.incl.pl1           >ldd>include>debug_fnp_data.incl.pl1
220          2    04/01/76  2209.5  cds_args.incl.pl1                 >ldd>include>cds_args.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
addr                                                   builtin function         dcl 36 ref 67 70 70 195
cds                             000104 automatic       structure                level 1 unaligned dcl 21 set ref 70 70
cds_args                               based           structure                level 1 dcl 2-3
cleanup                         000152 stack reference condition                dcl 38 ref 44
cnt                                    based           fixed bin(17,0)          level 2 dcl 1-92 set ref 54* 60 194* 194 195 1-92
                                                                                  1-92 1-92 1-92 1-92 1-92 1-92
code                                   parameter       char(4)                  unaligned dcl 190 in procedure "store" ref 186 200
                                                                                  203
code                            000100 automatic       fixed bin(35,0)          dcl 19 in procedure "db_fnp_opcodes_" set ref 45* 46
                                                                                  47* 70* 71 71* 213*
code                      1(18)        based           bit(12)                  level 2 in structure "op" packed unaligned dcl 1-99
                                                                                  in procedure "db_fnp_opcodes_" set ref 201*
com_err_                        000020 constant        entry                    external dcl 33 ref 47 71
create_data_segment_            000016 constant        entry                    external dcl 32 ref 70
cv_oct_                         000022 constant        entry                    external dcl 34 ref 201 204
entry                     1            based           structure                array level 2 packed unaligned dcl 1-92 set ref 195
exclude_all                     000000 constant        char(32)                 initial unaligned dcl 26 set ref 67
exclude_array_ptr        42     000104 automatic       pointer                  level 2 dcl 21 set ref 67*
get_temp_segments_              000012 constant        entry                    external dcl 30 ref 45
have_text                44(02) 000104 automatic       bit(1)                   level 3 packed unaligned dcl 21 set ref 69*
len                       2     000104 automatic       fixed bin(18,0)          array level 3 dcl 21 set ref 60* 63*
mask                      1(30)        based           bit(12)                  level 2 packed unaligned dcl 1-99 set ref 204*
n                                      parameter       fixed bin(17,0)          dcl 188 ref 186 198
name                            000010 constant        char(15)                 initial unaligned dcl 25 in procedure
                                                                                  "db_fnp_opcodes_" set ref 45* 47* 65 71* 213*
name                                   based           char(6)                  level 2 in structure "op" packed unaligned dcl 1-99
                                                                                  in procedure "db_fnp_opcodes_" set ref 197*
name                                   parameter       char(6)                  unaligned dcl 189 in procedure "store" ref 186 197
null                                                   builtin function         dcl 36 ref 43 62 213
num_exclude_names        40     000104 automatic       fixed bin(17,0)          level 2 dcl 21 set ref 66*
op                                     based           structure                level 1 packed unaligned dcl 1-99
opp                             000172 automatic       pointer                  dcl 1-97 set ref 195* 197 198 201 204 1-99 1-99 1-99
                                                                                  1-99 1-99 1-99
optable                                based           structure                level 1 dcl 1-92 set ref 60
optablep                        000170 automatic       pointer                  dcl 1-90 set ref 53* 54 59 60 60 194 194 195 195
                                                                                  1-92 1-92 1-92 1-92 1-92 1-92 1-92 1-92 1-92
p                               000104 automatic       pointer                  array level 3 dcl 21 set ref 59* 62*
ptr_array                       000102 automatic       pointer                  array dcl 20 set ref 43* 45* 53 213 213*
release_temp_segments_          000014 constant        entry                    external dcl 31 ref 213
sections                        000104 automatic       structure                array level 2 unaligned dcl 21
seg_name                 30     000104 automatic       char(32)                 level 2 packed unaligned dcl 21 set ref 65*
struct_name               3     000104 automatic       char(32)                 array level 3 packed unaligned dcl 21 set ref 61*
                                                                                  64*
switches                 44     000104 automatic       structure                level 2 packed unaligned dcl 21 set ref 68*
sym                                    based           structure                level 1 packed unaligned dcl 1-22
symp                            000162 automatic       pointer                  dcl 1-20 ref 1-22 1-22 1-22 1-22 1-22 1-22 1-22 1-22
                                                                                  1-22
temp                            000220 automatic       char(4)                  unaligned dcl 192 set ref 200* 201* 203* 204*
translate                                              builtin function         dcl 36 ref 200 203
type                      2(06)        based           fixed bin(11,0)          level 2 packed unaligned dcl 1-99 set ref 198*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
cmd_info                               based           structure                level 1 dcl 1-118
cmd_infop                       000174 automatic       pointer                  dcl 1-116
command                                based           char                     unaligned dcl 1-131
db_fnp_opblocks_$               000030 external static fixed bin(17,0)          dcl 1-158
db_fnp_opcodes_$                000026 external static fixed bin(17,0)          dcl 1-88
db_fnp_symbols_$db_fnp_symbols_ 000024 external static fixed bin(17,0)          dcl 1-10
env                                    based           structure                level 1 dcl 1-139
envp                            000176 automatic       pointer                  dcl 1-137
exclude_names                          based           char(32)                 array unaligned dcl 2-18
expr_info                              based           structure                level 1 dcl 1-70
expr_infop                      000166 automatic       pointer                  dcl 1-68
exptext                                based           structure                level 1 dcl 1-34
exptextp                        000164 automatic       pointer                  dcl 1-32
long_type_names                        constant        char(12)                 initial array unaligned dcl 1-60
opblock_table                          based           structure                level 1 dcl 1-162
opblock_tablep                  000200 automatic       pointer                  dcl 1-160
operand                                based           char                     unaligned dcl 1-132
reloc_abs                              constant        fixed bin(17,0)          initial dcl 1-40
reloc_hwcm                             constant        fixed bin(17,0)          initial dcl 1-40
reloc_meters                           constant        fixed bin(17,0)          initial dcl 1-40
reloc_sfcm                             constant        fixed bin(17,0)          initial dcl 1-40
reloc_tib                              constant        fixed bin(17,0)          initial dcl 1-40
short_type_names                       constant        char(4)                  initial array unaligned dcl 1-62
symbol_table                           based           structure                level 1 dcl 1-14
symbol_tablep                   000160 automatic       pointer                  dcl 1-12
type_addr                              constant        fixed bin(17,0)          initial dcl 1-49
type_bit                               constant        fixed bin(17,0)          initial dcl 1-49
type_char                              constant        fixed bin(17,0)          initial dcl 1-49
type_clock                             constant        fixed bin(17,0)          initial dcl 1-49
type_dec                               constant        fixed bin(17,0)          initial dcl 1-49
type_ebcdic                            constant        fixed bin(17,0)          initial dcl 1-49
type_inst                              constant        fixed bin(17,0)          initial dcl 1-49
type_oct                               constant        fixed bin(17,0)          initial dcl 1-49
type_op                                constant        fixed bin(17,0)          initial dcl 1-49

NAMES DECLARED BY EXPLICIT CONTEXT.
build_table                     000726 constant        entry                    internal dcl 78 ref 55
clean_up                        002376 constant        entry                    internal dcl 211 ref 44 72
db_fnp_opcodes_                 000520 constant        entry                    external dcl 15
store                           002263 constant        entry                    internal dcl 186 ref 80 81 82 83 84 85 86 87 88 89
                                                                                  90 91 92 93 94 95 96 97 98 99 100 101 102 103 104
                                                                                  105 106 107 108 109 110 111 112 113 114 115 116
                                                                                  117 118 119 120 121 122 123 124 125 126 127 128
                                                                                  129 130 131 132 133 134 135 136 137 138 139 140
                                                                                  141 142 143 144 145 146 147 148 149 150 151 152
                                                                                  153 154 155 156 157 158 159 160 161 162 163 164
                                                                                  165 166 167 168 169 170 171 172 173 174 175 176
                                                                                  177

NAMES DECLARED BY CONTEXT OR IMPLICATION.
bin                                                    builtin function         ref 201 204
bit                                                    builtin function         ref 201 204
size                                                   builtin function         ref 60
string                                                 builtin function         ref 68

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      3212        3244    3052        3222
Length      5360    3052        32        2077     137           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
db_fnp_opcodes_                     192 external procedure  is an external procedure.  
on unit on line 44                   64 on unit               
build_table                             internal procedure  shares stack frame of external procedure db_fnp_opcodes_.  
store                                   internal procedure  shares stack frame of external procedure db_fnp_opcodes_.  
clean_up                             78 internal procedure  is called by several nonquick procedures.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
db_fnp_opcodes_          000100 code                        db_fnp_opcodes_
                         000102 ptr_array                   db_fnp_opcodes_
                         000104 cds                         db_fnp_opcodes_
                         000160 symbol_tablep               db_fnp_opcodes_
                         000162 symp                        db_fnp_opcodes_
                         000164 exptextp                    db_fnp_opcodes_
                         000166 expr_infop                  db_fnp_opcodes_
                         000170 optablep                    db_fnp_opcodes_
                         000172 opp                         db_fnp_opcodes_
                         000174 cmd_infop                   db_fnp_opcodes_
                         000176 envp                        db_fnp_opcodes_
                         000200 opblock_tablep              db_fnp_opcodes_
                         000220 temp                        store

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        call_int_this       call_int_other      return              enable
ext_entry           int_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      create_data_segment_          cv_oct_                       get_temp_segments_
release_temp_segments_

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
db_fnp_opblocks_$             db_fnp_opcodes_$              db_fnp_symbols_$db_fnp_symbols_




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     15 000517        43 000525        44 000540        45 000562        46 000603        47 000605        48 000631
     53 000632        54 000634        55 000635        59 000636        60 000640        61 000644        62 000647
     63 000651        64 000652        65 000655        66 000660        67 000662        68 000664        69 000665
     70 000667        71 000702        72 000721        73 000725        78 000726        80 000727        81 000736
     82 000745        83 000754        84 000763        85 000772        86 001001        87 001010        88 001017
     89 001026        90 001035        91 001044        92 001053        93 001062        94 001071        95 001100
     96 001107        97 001116        98 001125        99 001134       100 001143       101 001152       102 001161
    103 001170       104 001177       105 001206       106 001215       107 001224       108 001233       109 001242
    110 001251       111 001260       112 001267       113 001276       114 001305       115 001314       116 001323
    117 001332       118 001341       119 001350       120 001357       121 001366       122 001375       123 001404
    124 001413       125 001422       126 001431       127 001440       128 001447       129 001456       130 001465
    131 001474       132 001503       133 001512       134 001522       135 001532       136 001542       137 001552
    138 001562       139 001572       140 001602       141 001612       142 001622       143 001632       144 001642
    145 001652       146 001662       147 001672       148 001702       149 001712       150 001722       151 001732
    152 001742       153 001752       154 001762       155 001772       156 002002       157 002012       158 002022
    159 002032       160 002042       161 002052       162 002062       163 002072       164 002102       165 002112
    166 002122       167 002132       168 002142       169 002152       170 002162       171 002172       172 002202
    173 002212       174 002222       175 002232       176 002242       177 002252       179 002262       186 002263
    194 002265       195 002266       197 002273       198 002277       200 002305       201 002312       203 002340
    204 002346       206 002374       211 002375       213 002403       214 002430


Object Segment >dumps>old>recomp>db_fnp_opcodes_
Created on 11/15/82  1536.5 mst Mon
by Holmstedt.SysMaint.m
using create_data_segment_, Version II of Monday, October 11, 1982

        Object    Text    Defs    Link    Symb  Static
Start        0       0     450     472     502     502
Length     701     450      22      10     163       0


2 Definitions:


segname:    db_fnp_opcodes_

symb|0          symbol_table


No Links.





                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
