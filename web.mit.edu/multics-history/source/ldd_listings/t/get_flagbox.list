	COMPILATION LISTING OF SEGMENT get_flagbox
	Compiled by: Multics PL/I Compiler, Release 28d, of October 4, 1983
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 06/01/84  1533.9 mst Fri
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 /* Modified 9/83 by Keith Loepere for bce_command string */
       11 
       12 /* format: style4,indattr,ifthenstmt,ifthen,idind33,^indcomtxt */
       13 
       14 get_flagbox: proc;
       15 
       16 dcl  af_result_len		        fixed bin;
       17 dcl  af_result_ptr		        ptr;
       18 dcl  arg_count		        fixed bin;
       19 dcl  arg_len		        fixed bin;
       20 dcl  arg_ptr		        ptr;
       21 dcl  code			        fixed bin (35);
       22 dcl  bce_command		        char (128);
       23 dcl  flag_num		        fixed bin;
       24 dcl  flags		        bit (36);
       25 dcl  flags_to_reset		        bit (36) init ("0"b);
       26 dcl  flags_to_set		        bit (36) init ("0"b);
       27 dcl  name			        char (12) init ("get_flagbox");
       28 dcl  not_active_fnc		        bit (1) init ("0"b);
       29 dcl  result		        char (256) var;
       30 
       31 dcl  af_result		        char (af_result_len) var based (af_result_ptr);
       32 dcl  arg			        char (arg_len) based (arg_ptr);
       33 
       34 dcl  error_table_$badopt	        fixed bin (35) ext;
       35 dcl  error_table_$not_act_fnc	        fixed bin (35) ext;
       36 
       37 dcl  active_fnc_err_	        entry options (variable);
       38 dcl  active_fnc_err_$suppress_name    entry options (variable);
       39 dcl  com_err_		        entry options (variable);
       40 dcl  com_err_$suppress_name	        entry options (variable);
       41 dcl  cu_$af_arg_ptr		        entry (fixed bin, ptr, fixed bin, fixed bin (35));
       42 dcl  cu_$af_return_arg	        entry (fixed bin, ptr, fixed bin, fixed bin (35));
       43 dcl  cu_$arg_count		        entry (fixed bin, fixed bin (35));
       44 dcl  cu_$arg_ptr		        entry (fixed bin, ptr, fixed bin, fixed bin (35));
       45 dcl  cv_dec_check_		        entry (char (*), fixed bin (35)) returns (fixed bin);
       46 dcl  phcs_$get_bce_command	        entry (char (128));
       47 dcl  phcs_$get_flagbox	        entry (bit (36));
       48 dcl  hphcs_$set_bce_command	        entry (char (128));
       49 dcl  hphcs_$set_flagbox	        entry (bit (36), bit (36));
       50 dcl  ioa_			        entry options (variable);
       51 dcl  requote_string_	        entry (char (*)) returns (char (*));
       52 
       53 dcl  substr		        builtin;
       54 
       55 	call cu_$af_return_arg (arg_count, af_result_ptr, af_result_len, code);
       56 	if code ^= 0 then
       57 	     if code = error_table_$not_act_fnc then do;
       58 		not_active_fnc = "1"b;
       59 		code = 0;
       60 	     end;
       61 	if arg_count ^= 1 | code ^= 0 then do;
       62 	     if not_active_fnc then call com_err_$suppress_name (code, name, "Usage is: ^a <flag_name>.", name);
       63 	     else call active_fnc_err_$suppress_name (code, name, "Usage is: ^a <flag_name>.", name);
       64 	     return;
       65 	end;
       66 
       67 	call cu_$arg_ptr (1, arg_ptr, arg_len, code);
       68 
       69 	if arg = "bce_command" then do;
       70 	     call phcs_$get_bce_command (bce_command);
       71 	     result = requote_string_ (bce_command);
       72 	end;
       73 	else do;
       74 	     flag_num = cv_dec_check_ (arg, code);
       75 	     if code ^= 0 then do;
       76 		do flag_num = 1 to 36 while (arg ^= flagbox_flag_names (flag_num)); end;
       77 		if flag_num > 36 then go to fail;
       78 	     end;
       79 
       80 	     call phcs_$get_flagbox (flags);
       81 	     if substr (flags, flag_num, 1) then result = "true"; else result = "false";
       82 	end;
       83 
       84 	if not_active_fnc then call ioa_ (result);
       85 	else af_result = result;
       86 	return;
       87 
       88 set_flagbox: entry;
       89 
       90 	name = "set_flagbox";
       91 	not_active_fnc = "1"b;
       92 	call cu_$arg_count (arg_count, code);
       93 	if arg_count ^= 2 | code ^= 0 then do;
       94 	     call com_err_$suppress_name (code, name, "Usage is: ^a <flag_name> <value>.", name);
       95 	     return;
       96 	end;
       97 
       98 	call cu_$arg_ptr (1, arg_ptr, arg_len, code);
       99 
      100 	if arg = "bce_command" then do;
      101 	     call cu_$arg_ptr (2, arg_ptr, arg_len, code);
      102 	     bce_command = arg;
      103 	     call hphcs_$set_bce_command (bce_command);
      104 	end;
      105 	else do;
      106 	     flag_num = cv_dec_check_ (arg, code);
      107 	     if code ^= 0 then do;
      108 		do flag_num = 1 to 36 while (arg ^= flagbox_flag_names (flag_num)); end;
      109 		if flag_num > 36 then go to fail;
      110 	     end;
      111 	     call cu_$arg_ptr (2, arg_ptr, arg_len, code);
      112 
      113 	     if arg = "true" then substr (flags_to_set, flag_num, 1) = "1"b;
      114 	     else if arg = "false" then substr (flags_to_reset, flag_num, 1) = "1"b;
      115 	     else go to fail;
      116 
      117 	     call hphcs_$set_flagbox (flags_to_set, flags_to_reset);
      118 	end;
      119 	return;
      120 
      121 /* ------------------------------------------------------- */
      122 
      123 fail:	code = error_table_$badopt;
      124 	if not_active_fnc then call com_err_ (code, name, arg);
      125 	else call active_fnc_err_ (code, name, arg);
      126 	return;
      127 
  1     1 /* BEGIN INCLUDE FILE ... flagbox_flags.incl.pl1 */
  1     2 
  1     3 dcl 1 flagbox_flags based aligned,
  1     4     2 auto_reboot bit (1) unal,			/* 1 */
  1     5     2 booting bit (1) unal,				/* 2 */
  1     6     2 bit3 bit (1) unal,				/* 3 */
  1     7     2 rebooted bit (1) unal,				/* 4 */
  1     8     2 unattended bit (1) unal,			/* 5 */
  1     9     2 bit6 bit (1) unal,				/* 6 */
  1    10     2 bit7 bit (1) unal,				/* 7 */
  1    11     2 bit8 bit (1) unal,				/* 8 */
  1    12     2 bit9 bit (1) unal,				/* 9 */
  1    13     2 bit10 bit (1) unal,				/* 10 */
  1    14     2 bit11 bit (1) unal,				/* 11 */
  1    15     2 bit12 bit (1) unal,				/* 12 */
  1    16     2 bit13 bit (1) unal,				/* 13 */
  1    17     2 bit14 bit (1) unal,				/* 14 */
  1    18     2 bit15 bit (1) unal,				/* 15 */
  1    19     2 bit16 bit (1) unal,				/* 16 */
  1    20     2 bit17 bit (1) unal,				/* 17 */
  1    21     2 bit18 bit (1) unal,				/* 18 */
  1    22     2 bit19 bit (1) unal,				/* 19 */
  1    23     2 bit20 bit (1) unal,				/* 20 */
  1    24     2 bit21 bit (1) unal,				/* 21 */
  1    25     2 bit22 bit (1) unal,				/* 22 */
  1    26     2 bit23 bit (1) unal,				/* 23 */
  1    27     2 bit24 bit (1) unal,				/* 24 */
  1    28     2 bit25 bit (1) unal,				/* 25 */
  1    29     2 bit26 bit (1) unal,				/* 26 */
  1    30     2 bit27 bit (1) unal,				/* 27 */
  1    31     2 bit28 bit (1) unal,				/* 28 */
  1    32     2 bit29 bit (1) unal,				/* 29 */
  1    33     2 bit30 bit (1) unal,				/* 30 */
  1    34     2 bit31 bit (1) unal,				/* 31 */
  1    35     2 bit32 bit (1) unal,				/* 32 */
  1    36     2 bit33 bit (1) unal,				/* 33 */
  1    37     2 bit34 bit (1) unal,				/* 34 */
  1    38     2 bit35 bit (1) unal,				/* 35 */
  1    39     2 bit36 bit (1) unal;				/* 36 */
  1    40 
  1    41 dcl  flagbox_flag_names (36) char (12) static options (constant) init
  1    42     ("auto_reboot",					/* 1 */
  1    43      "booting",					/* 2 */
  1    44      "bit3",					/* 3 */
  1    45      "rebooted",					/* 4 */
  1    46      "unattended",					/* 5 */
  1    47      "bit6",					/* 6 */
  1    48      "bit7",					/* 7 */
  1    49      "bit8",					/* 8 */
  1    50      "bit9",					/* 9 */
  1    51      "bit10",					/* 10 */
  1    52      "bit11",					/* 11 */
  1    53      "bit12",					/* 12 */
  1    54      "bit13",					/* 13 */
  1    55      "bit14",					/* 14 */
  1    56      "bit15",					/* 15 */
  1    57      "bit16",					/* 16 */
  1    58      "bit17",					/* 17 */
  1    59      "bit18",					/* 18 */
  1    60      "bit19",					/* 19 */
  1    61      "bit20",					/* 20 */
  1    62      "bit21",					/* 21 */
  1    63      "bit22",					/* 22 */
  1    64      "bit23",					/* 23 */
  1    65      "bit24",					/* 24 */
  1    66      "bit25",					/* 25 */
  1    67      "bit26",					/* 26 */
  1    68      "bit27",					/* 27 */
  1    69      "bit28",					/* 28 */
  1    70      "bit29",					/* 29 */
  1    71      "bit30",					/* 30 */
  1    72      "bit31",					/* 31 */
  1    73      "bit32",					/* 32 */
  1    74      "bit33",					/* 33 */
  1    75      "bit34",					/* 34 */
  1    76      "bit35",					/* 35 */
  1    77      "bit36");					/* 36 */
  1    78 
  1    79 /* BEGIN INCLUDE FILE ... flagbox_flags.incl.pl1 */
      128 
      129      end get_flagbox;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    06/01/84  1426.2  get_flagbox.pl1                   >special_ldd>temp>bce>06/01/84>get_flagbox.pl1
128          1    01/04/77  1438.9  flagbox_flags.incl.pl1            >ldd>include>flagbox_flags.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
active_fnc_err_                 000014 constant        entry                    external dcl 37 ref 125
active_fnc_err_$suppress_name   000016 constant        entry                    external dcl 38 ref 63
af_result                              based           varying char             dcl 31 set ref 85*
af_result_len                   000100 automatic       fixed bin(17,0)          dcl 16 set ref 55* 85
af_result_ptr                   000102 automatic       pointer                  dcl 17 set ref 55* 85
arg                                    based           char                     unaligned dcl 32 set ref 69 74* 76 100 102 106* 108
                                                                                  113 114 124* 125*
arg_count                       000104 automatic       fixed bin(17,0)          dcl 18 set ref 55* 61 92* 93
arg_len                         000105 automatic       fixed bin(17,0)          dcl 19 set ref 67* 69 74 74 76 98* 100 101* 102 106
                                                                                  106 108 111* 113 114 124 124 125 125
arg_ptr                         000106 automatic       pointer                  dcl 20 set ref 67* 69 74 76 98* 100 101* 102 106 108
                                                                                  111* 113 114 124 125
bce_command                     000111 automatic       char(128)                unaligned dcl 22 set ref 70* 71* 102* 103*
code                            000110 automatic       fixed bin(35,0)          dcl 21 set ref 55* 56 56 59* 61 62* 63* 67* 74* 75
                                                                                  92* 93 94* 98* 101* 106* 107 111* 123* 124* 125*
com_err_                        000020 constant        entry                    external dcl 39 ref 124
com_err_$suppress_name          000022 constant        entry                    external dcl 40 ref 62 94
cu_$af_return_arg               000024 constant        entry                    external dcl 42 ref 55
cu_$arg_count                   000026 constant        entry                    external dcl 43 ref 92
cu_$arg_ptr                     000030 constant        entry                    external dcl 44 ref 67 98 101 111
cv_dec_check_                   000032 constant        entry                    external dcl 45 ref 74 106
error_table_$badopt             000010 external static fixed bin(35,0)          dcl 34 ref 123
error_table_$not_act_fnc        000012 external static fixed bin(35,0)          dcl 35 ref 56
flag_num                        000151 automatic       fixed bin(17,0)          dcl 23 set ref 74* 76* 76* 77 81 106* 108* 108* 109
                                                                                  113 114
flagbox_flag_names              000000 constant        char(12)                 initial array unaligned dcl 1-41 ref 76 108
flags                           000152 automatic       bit(36)                  unaligned dcl 24 set ref 80* 81
flags_to_reset                  000153 automatic       bit(36)                  initial unaligned dcl 25 set ref 25* 114* 117*
flags_to_set                    000154 automatic       bit(36)                  initial unaligned dcl 26 set ref 26* 113* 117*
hphcs_$set_bce_command          000040 constant        entry                    external dcl 48 ref 103
hphcs_$set_flagbox              000042 constant        entry                    external dcl 49 ref 117
ioa_                            000044 constant        entry                    external dcl 50 ref 84
name                            000155 automatic       char(12)                 initial unaligned dcl 27 set ref 27* 62* 62* 63* 63*
                                                                                  90* 94* 94* 124* 125*
not_active_fnc                  000160 automatic       bit(1)                   initial unaligned dcl 28 set ref 28* 58* 62 84 91*
                                                                                  124
phcs_$get_bce_command           000034 constant        entry                    external dcl 46 ref 70
phcs_$get_flagbox               000036 constant        entry                    external dcl 47 ref 80
requote_string_                 000046 constant        entry                    external dcl 51 ref 71
result                          000161 automatic       varying char(256)        dcl 29 set ref 71* 81* 81* 84* 85
substr                                                 builtin function         dcl 53 set ref 81 113* 114*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
cu_$af_arg_ptr                  000000 constant        entry                    external dcl 41
flagbox_flags                          based           structure                level 1 dcl 1-3

NAMES DECLARED BY EXPLICIT CONTEXT.
fail                            001056 constant        label                    dcl 123 ref 77 109 114
get_flagbox                     000233 constant        entry                    external dcl 14
set_flagbox                     000570 constant        entry                    external dcl 88

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1332        1402    1133        1342
Length      1616    1133        50         200     176           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
get_flagbox                         210 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
get_flagbox              000100 af_result_len               get_flagbox
                         000102 af_result_ptr               get_flagbox
                         000104 arg_count                   get_flagbox
                         000105 arg_len                     get_flagbox
                         000106 arg_ptr                     get_flagbox
                         000110 code                        get_flagbox
                         000111 bce_command                 get_flagbox
                         000151 flag_num                    get_flagbox
                         000152 flags                       get_flagbox
                         000153 flags_to_reset              get_flagbox
                         000154 flags_to_set                get_flagbox
                         000155 name                        get_flagbox
                         000160 not_active_fnc              get_flagbox
                         000161 result                      get_flagbox

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return              shorten_stack       ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
active_fnc_err_               active_fnc_err_$suppress_name com_err_                      com_err_$suppress_name
cu_$af_return_arg             cu_$arg_count                 cu_$arg_ptr                   cv_dec_check_
hphcs_$set_bce_command        hphcs_$set_flagbox            ioa_                          phcs_$get_bce_command
phcs_$get_flagbox             requote_string_

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$badopt           error_table_$not_act_fnc




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     25 000222        26 000223        27 000224        28 000227        14 000232        55 000241        56 000256
     58 000263        59 000265        61 000266        62 000273        63 000325        64 000354        67 000355
     69 000374        70 000402        71 000411        72 000442        74 000444        75 000470        76 000472
     76 000507        77 000511        80 000514        81 000523        81 000535        84 000541        85 000555
     86 000566        88 000567        90 000576        91 000601        92 000603        93 000614        94 000621
     95 000650        98 000651       100 000670       101 000676       102 000715       103 000722       104 000731
    106 000732       107 000756       108 000760       108 000775       109 000777       111 001002       113 001021
    114 001034       117 001044       119 001055       123 001056       124 001061       125 001107       126 001132


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
