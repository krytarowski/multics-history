	COMPILATION LISTING OF SEGMENT cv_ttf
	Compiled by: Multics PL/I Compiler, Release 33e, of October 6, 1992
	Compiled at: CGI                             
	Compiled on: 2000-04-17_1923.25_Mon_mdt
	    Options: optimize map

        1 
        2 
        3 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
        4 	/*							*/
        5 	/* COMPILED OUTPUT OF SEGMENT  cv_ttf.rd                       	*/
        6 	/* Compiled by:  reduction_compiler, Version 2.5 of Oct 21, 1985      */
        7 	/* Compiled on:  2000-04-17_1923.22_Mon_mdt                           */
        8 	/*							*/
        9 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
       10 
       11 /* ***********************************************************
       12*   *                                                         *
       13*   * Copyright, (C) Honeywell Bull Inc., 1987                *
       14*   *                                                         *
       15*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
       16*   *                                                         *
       17*   * Copyright (c) 1972 by Massachusetts Institute of        *
       18*   * Technology and Honeywell Information Systems, Inc.      *
       19*   *                                                         *
       20*   *********************************************************** */
       21 
       22 /* cv_ttf converts a terminal-type file (TTF) into a terminal-type table (TTT)
       23*   which can then be installed using the install command.  The cv_ttf command
       24*   is generated by the reduction_compiler.
       25*
       26*   Usage:	cv_ttf TTF_NAME { -brief | -long }                               */
       27 
       28 
       29 /* HISTORY COMMENTS:
       30*  1) change(77-05-20,RCoren), approve(), audit(), install():
       31*      Written
       32*      Modified 04/25/78 by Robert S. Coren to add framing_chars
       33*      Modified 05/03/78 by Robert S. Coren & David R. Vinograd to increase
       34*         conversion/translation tables to 256 characters
       35*      Modified May 1979 by Larry Johnson and Bernie Greenberg for extended
       36*         tty-char support.
       37*      Modified June 1979 by Bernie Greenberg for video features.
       38*      Modified February/March 1980 by Larry Johnson to finish video features.
       39*      Modified 5/29/81 by Suzanne Krupp to add function key information.
       40*      Modified: 9 June 1981 by G. Palter to recognize can_type mode and
       41*         replace X/Y with LINE/COLUMN in video sequences
       42*      Modified January 1982 BIM for author changes.
       43*      Modified April 1982 by Robert Coren for changes to baud_rates.incl.pl1.
       44*      Modified July 1982 by E. N. Kittlitz for [severity], ttf suffix.
       45*      Modified September 1984 by Robert Coren to reject var_tab_delays and
       46*         horz_delays > 1.00.
       47*  2) change(86-09-21,Beattie), approve(86-09-21,MCR7542),
       48*     audit(86-10-31,Brunelle), install(86-11-12,MR12.0-1211):
       49*      Remove references to the 963 and 029 preaccess commands and
       50*      remove support for ARDS, 202_ETX, 2741 and 1050 in system
       51*      interfaces.
       52*  3) change(87-03-06,LJAdams), approve(87-04-03,MCR7646),
       53*     audit(87-05-05,Gilcrease), install(87-05-08,MR12.1-1030):
       54*      Added reduction to check the protocol field in the terminal type
       55*      entry table.
       56*  4) change(87-05-21,LJAdams), approve(87-05-21,MCR7699),
       57*     audit(87-07-31,Gilcrease), install(87-08-04,MR12.1-1055):
       58*      Added support for MOWSE_FANSI protocol.
       59*      Changed name of include file from terminal_type_protocols.incl.pl1
       60*      which was to long to term_type_protocols.incl.pl1
       61*  5) change(87-07-02,LJAdams), approve(87-07-13,MCR7742),
       62*     audit(87-07-31,Gilcrease), install(87-08-04,MR12.1-1055):
       63*      Added support for the reductions required by DSA.
       64*  6) change(88-01-25,Brunelle), approve(88-01-25,MCR7813),
       65*     audit(88-10-13,Blair), install(88-10-17,MR12.2-1171):
       66*      1. Correct for repetition factors > 256 in initial_strings or
       67*      additional_info.
       68*      2. Expand special chars to 15 chars from current limit of 3.
       69*      3. Add additional Global statements (including Input_suspend/resume,
       70*      Output_suspend/resume, Buffer_size, Output_end_of_block,
       71*      Output_acknowledge and Line_delimiter).
       72*      4. Remove Additional_info statement.
       73*      5. Correct problem of LIKE terminal_type loop.
       74*                                                   END HISTORY COMMENTS */
       75 
       76 
       77 /*++
       78*
       79*	\" REDUCTIONS FOR cv_ttf
       80*
       81*BEGIN	/ <no-token>			/ ERROR (1)				/ RETURN \
       82*
       83*\" Scan for main delimiting statements
       84*mainloop	/ terminal_type : <new_type_name>	/ LEX (2) init_type LEX			/ type_entry \
       85*3	/ terminal_type :			/ LEX (2) NEXT_STMT				/ mainloop \
       86*
       87*4	/ conversion_table : <new_table_name> ;	/ LEX (2) define_ct_table (CONV_TYPE) LEX (2)	/ table_entries \
       88*5	/ conversion_table :		/ LEX (2) NEXT_STMT				/ mainloop \
       89*
       90*6	/ translation_table : <new_table_name> ; / LEX (2) define_ct_table (TRANS_TYPE) LEX (2)	/ table_entries \
       91*7	/ translation_table :		/ LEX (2) NEXT_STMT				/ mainloop \
       92*
       93*8	/ special_table : <new_table_name> ;	/ LEX (2) define_special LEX (2)		/ special_entries \
       94*9	/ special_table :			/ LEX (2) NEXT_STMT				/ mainloop \
       95*
       96*10        / function_key_table : <new_table_name> ;
       97*                                                  / LEX (2) define_fkey_table LEX (2)               / fkey_entries \
       98*11        / function_key_table :                  / LEX (2) NEXT_STMT                               / mainloop \
       99*
      100*12	/ default_types :			/ LEX (2) [default_count = 1]			/ default_types \
      101*
      102*13	/ answerback :			/ LEX (2) set_up_answerback			/ answerback \
      103*
      104*14	/ preaccess_command :		/ LEX (2)					/ preaccess \
      105*\" 
      106*
      107*	\" global statements
      108*
      109*15	/ Modes :				/ LEX (2) PUSH (mainloop) PUSH (dft_modes)	/ check_modes \
      110*16	/ Bauds :				/ LEX (2) [baudx = 1]			/ default_bauds \
      111*17	/ Bps :				/ LEX (2) [baudx = 1]			/ default_bauds \
      112*18	/ BPS :				/ LEX (2) [baudx = 1]			/ default_bauds \
      113*19	/ Cps :				/ LEX (2) [baudx = 1]			/ default_cps \
      114*20	/ CPS :				/ LEX (2) [baudx = 1]			/ default_cps \
      115*21	/ Line_types :			/ LEX (2) PUSH (mainloop) PUSH (dft_line_types)	/ line_types \
      116*22	/ Erase : <valid_edit> ;		/ LEX (2) [dft.erase = make_char ()] LEX (2)	/ mainloop \
      117*23	/ Erase : <any-token>		/ LEX (2) ERROR (3) NEXT_STMT			/ mainloop \
      118*24	/ Kill : <valid_edit > ;		/ LEX (2) [dft.kill = make_char ()] LEX (2)	/ mainloop \
      119*25	/ Kill : <any-token>		/ LEX (2) ERROR (3) NEXT_STMT			/ mainloop \
      120*26	/ Framing_chars : <tty_char> <tty_char> ;
      121*					/ LEX (2) [dft.frame_begin = make_char ()]
      122*					  LEX [dft.frame_end = make_char ()]
      123*					  LEX (2)					/ mainloop \
      124*27	/ Framing_chars : <any-token>		/ LEX (2) ERROR (6) NEXT_STMT			/ mainloop \
      125*28	/ Line_delimiter : <tty_char> ;	/ LEX (2) [dft.line_delimiter = make_char ()] LEX (2)
      126*					  					 / mainloop \
      127*29	/ Line_delimiter : <any-token>	/ LEX (2) ERROR (6) NEXT_STMT			/ mainloop \
      128*30	/ Input_suspend : <tty_char> ;	/ LEX (2) [dft.input_suspend = make_char ()] LEX (2)
      129*					  					 / mainloop \
      130*31	/ Input_suspend : <any-token>		/ LEX (2) ERROR (6) NEXT_STMT			/ mainloop \
      131*32	/ Input_resume : <tty_char> ;		/ LEX (2) [dft.input_resume = make_char ()] LEX (2)
      132*					  					 / mainloop \
      133*33	/ Input_resume : <tty_char> , timeout ; / LEX (2) [dft.input_resume = make_char (); dft.input_timeout = "1"b] LEX (4)
      134*					  					/ mainloop \
      135*34	/ Input_resume : <any-token>		/ LEX (2) ERROR (6) NEXT_STMT			/ mainloop \
      136*35	/ Output_suspend : <tty_char> ;	/ LEX (2) [if dft.output_block_acknowledge then call ERROR (42);
      137*						 else do;
      138*					  	   dft.output_suspend_etb = make_char ();
      139*						   dft.output_block_acknowledge = "0"b;
      140*						   out_sus_set = "1"b;
      141*						 end]
      142*					  LEX (2)					/ mainloop \
      143*36	/ Output_suspend : <any-token>		/ LEX (2) ERROR (6) LEX (2)		/ mainloop \
      144*37	/ Output_resume : <tty_char> ;	/ LEX (2) [if dft.output_block_acknowledge then call ERROR (42);
      145*						 else do;
      146*						   dft.output_resume_ack = make_char ();
      147*						   dft.output_block_acknowledge = "0"b;
      148*						   out_sus_set = "1"b;
      149*						 end]
      150*					  LEX (2)					/ mainloop \
      151*38	/ Output_resume : <any-token>		/ LEX (2) ERROR (6) NEXT_STMT			/ mainloop \
      152*39	/ Buffer_size : <decimal-integer> ;	/ LEX (2) [if out_sus_set then call ERROR (42);
      153*						 else do;
      154*					  	   dft.output_buffer_size = token.Nvalue;
      155*						   dft.output_block_acknowledge = "1"b;
      156*						   block_ack_set = "1"b;
      157*						 end]
      158*					  LEX (2)					/ mainloop \
      159*40	/ Buffer_size : <any-token>		/ LEX (2) ERROR (6) NEXT_STMT			/ mainloop \
      160*41	/ Output_end_of_block : <tty_char> ;	/ LEX (2) [if out_sus_set then call ERROR (42);
      161*						 else do;
      162*					  	   dft.output_suspend_etb = make_char ();
      163*						   dft.output_block_acknowledge = "1"b;
      164*						   block_ack_set = "1"b;
      165*						 end]
      166*					  LEX (2)					/ mainloop \
      167*42	/ Output_end_of_block : <any-token>	/ LEX (2) ERROR (6) NEXT_STMT			/ mainloop \
      168*43	/ Output_acknowledge : <tty_char> ;	/ LEX (2) [if out_sus_set then call ERROR (42);
      169*						 else do;
      170*					  	   dft.output_resume_ack = make_char ();
      171*						   dft.output_block_acknowledge = "1"b;
      172*						   block_ack_set = "1"b;
      173*						 end]
      174*					  LEX (2)					/ mainloop \
      175*44	/ Output_acknowledge : <any-token>	/ LEX (2) ERROR (6) NEXT_STMT			/ mainloop \
      176*45	/ Keyboard_addressing :		/ LEX (2) [bitp = addr (dft.keyboard_addressing)] PUSH (mainloop)
      177*					  					/ yes_no \
      178*46	/ Print_preaccess_message :		/ LEX (2) [bitp = addr (dft.print_preaccess_message)] PUSH (mainloop)
      179*					  					/ yes_no \
      180*47	/ Conditional_printer_off :		/ LEX (2) [bitp = addr (dft.conditional_printer_off)] PUSH (mainloop)
      181*					  					/ yes_no \
      182*
      183*48	/ Input_conversion : ;		/ LEX (3) [dft.input_conversion_rp = 0]		/ mainloop \
      184*49	/ Input_conversion : <legal_name> ;	/ LEX (2) set_table (dft.input_conversion_rp, CONV_TYPE) LEX (2)
      185*					  					/ mainloop \
      186*
      187*50	/ Output_conversion : ;		/ LEX (3) [dft.output_conversion_rp = 0]	/ mainloop \
      188*51	/ Output_conversion : <legal_name> ;	/ LEX (2) set_table (dft.output_conversion_rp, CONV_TYPE) LEX (2)
      189*					  					/ mainloop \
      190*
      191*52	/ Input_translation : ;		/ LEX (3) [dft.input_translation_rp = 0]	/ mainloop \
      192*53	/ Input_translation : <legal_name> ;	/ LEX (2) set_table (dft.input_translation_rp, TRANS_TYPE) LEX (2)
      193*					  					/ mainloop \
      194*
      195*54	/ Output_translation : ;		/ LEX (3) [dft.output_translation_rp = 0]	/ mainloop \
      196*55	/ Output_translation : <legal_name> ;	/ LEX (2) set_table (dft.output_translation_rp, TRANS_TYPE) LEX (2)
      197*					  					/ mainloop \
      198*
      199*56	/ Special : ;			/ LEX (3) [dft.special_rp = 0]		/ mainloop \
      200*57	/ Special : <legal_name> ;	 	/ LEX (2) set_table (dft.special_rp, SPEC_TYPE) LEX (2)
      201*					  					/ mainloop \
      202*
      203*58        / Function_keys : ;                     / LEX (3) [tte.fkey_rp = 0]			/ mainloop \
      204*59        / Function_keys : <legal_name> ;        / LEX (2) set_table (tte.fkey_rp, FKEY_TYPE) LEX (2)
      205*					  					/ mainloop \
      206*
      207*60	/ Video_info : ;			/ LEX (3) [dft_extended_tablesp -> extended_tables.tables_rp (VIDEO_RP) = 0]
      208*					  					/ mainloop \
      209*61	/ Video_info :			/ LEX (2) [extended_tablesp = dft_extended_tablesp]
      210*						define_video
      211*					          [dft_extended_tables_defined = "1"b] PUSH (mainloop)
      212*					  					/ video_table \
      213*62        / Dsatm_device : ;                      / LEX (3) [dft_extended_tablesp -> extended_tables.tables_rp (DSATM_DEVICE_RP) = 0]
      214*					  					/ mainloop \
      215*63        / Dsatm_device :                        / LEX (2) [extended_tablesp = dft_extended_tablesp]
      216*                                                            define_dsatm_device
      217*                                                            [dft_extended_tables_defined = "1"b] PUSH (mainloop)
      218*					  		
      219*                       / dsatm_device_table \
      220*64	/ Old_type : <decimal-integer> ;	/ LEX (2) [dft.old_type = token.Nvalue] LEX (2)	/ mainloop \
      221*
      222*65	/ end ;				/ LEX (2)					/ finish \
      223*66	/ <any-token> :			/ ERROR (5) NEXT_STMT			/ mainloop \
      224*67	/ <any-token>			/ ERROR (6) NEXT_STMT			/ mainloop \
      225*68	/ <no-token>			/ ERROR (7)				/ RETURN \
      226*
      227*	\" terminal type entry statements
      228*
      229*type_entry
      230*69	/ ;				/ LEX					/ type_statements \
      231*70	/ like <defined_type> ;		/ LEX copy_type LEX (2)			/ type_statements \
      232*71	/ <any-token>			/ ERROR (6) NEXT_STMT			/ type_statements \
      233*
      234*type_statements
      235*72	/ modes :				/ LEX (2) PUSH (type_statements) PUSH (entry_modes) / check_modes \
      236*73	/ additional_info : 		/ LEX (2) PUSH (type_statements) [p = addr (tte.additional_info)]
      237*										/ char_string \
      238*74	/ initial_string :			/ LEX (2) PUSH (type_statements) [p = addr (tte.initial_string)]
      239*										/ char_string \
      240*75	/ comment :			/ LEX (2) PUSH (type_statements) [p = addr (tte.comment)]
      241*										/ char_string \
      242*76	/ bauds :				/ LEX (2) [baudx = 1]			/ bauds \
      243*77	/ bps :				/ LEX (2) [baudx = 1]			/ bauds \
      244*78	/ cps :				/ LEX (2) [baudx = 1]			/ cps \
      245*
      246*79	/ vert_nl_delays :			/ LEX (2) [delayx = 1]			/ delays \
      247*80	/ horz_nl_delays :			/ LEX (2) [delayx = 2]			/ delays \
      248*81	/ const_tab_delays :		/ LEX (2) [delayx = 3]			/ delays \
      249*82	/ var_tab_delays :			/ LEX (2) [delayx = 4]			/ delays \
      250*83	/ backspace_delays :		/ LEX (2) [delayx = 5]			/ delays \
      251*84	/ vt_ff_delays :			/ LEX (2) [delayx = 6]			/ delays \
      252*
      253*85	/ line_types :			/ LEX (2) PUSH (type_statements) PUSH (entry_line_types)
      254*										/ line_types \
      255*86	/ erase : <valid_edit> ;		/ LEX (2) [tte.erase = make_char ()] LEX (2)	/ type_statements \
      256*87	/ erase: <any-token>		/ LEX (2) ERROR (3) NEXT_STMT			/ type_statements \
      257*88	/ kill : <valid_edit> ;		/ LEX (2) [tte.kill = make_char ()] LEX (2)	/ type_statements \
      258*89	/ kill : <any-token>		/ LEX (2) ERROR (3) NEXT_STMT			/ type_statements \
      259*90	/ framing_chars : <tty_char> <tty_char> ;
      260*					/ LEX (2) [tte.frame_begin = make_char ()]
      261*					  LEX [tte.frame_end = make_char ()] LEX (2)
      262*										/ type_statements \
      263*91	/ framing_chars : <any-token>		/ LEX (2) ERROR (6) NEXT_STMT			/ type_statements \
      264*
      265*92	/ line_delimiter : <tty_char> ;	/ LEX (2) [tte.line_delimiter = make_char ()] LEX (2) / type_statements \
      266*93	/ line_delimiter : <any-token>	/ LEX (2) ERROR (6) NEXT_STMT			/ type_statements \
      267*94	/ input_suspend : <tty_char> ;	/ LEX (2) [tte.input_suspend = make_char ()] LEX (2) / type_statements \
      268*95	/ input_suspend : <any-token>		/ LEX (2) ERROR (6) NEXT_STMT			/ type_statements \
      269*96	/ input_resume : <tty_char> ;		/ LEX (2) [tte.input_resume = make_char ()] LEX (2) / type_statements \
      270*97	/ input_resume : <tty_char> , timeout ; / LEX (2) [tte.input_resume = make_char (); tte.input_timeout = "1"b] LEX (4) / type_statements \
      271*98	/ input_resume : <any-token>		/ LEX (2) ERROR (6) NEXT_STMT			/ type_statements \
      272*99	/ output_suspend : <tty_char> ;	/ LEX (2) [if block_ack_set then call ERROR (42); else do;
      273*					  tte.output_suspend_etb = make_char (); tte.output_block_acknowledge = "0"b; out_sus_set = "1"b; end]
      274*					  LEX (2)					/ type_statements \
      275*100	/ output_suspend : <any-token>		/ LEX (2) ERROR (6) LEX (2)		/ type_statements \
      276*101	/ output_resume : <tty_char> ;	/ LEX (2) [if block_ack_set then call ERROR (42); else do;
      277*					  tte.output_resume_ack = make_char (); tte.output_block_acknowledge = "0"b; out_sus_set = "1"b; end]
      278*					  LEX (2)					/ type_statements \
      279*102	/ output_resume : <any-token>		/ LEX (2) ERROR (6) NEXT_STMT			/ type_statements \
      280*103	/ buffer_size : <decimal-integer> ;	/ LEX (2) [if out_sus_set then call ERROR (42); else do;
      281*					  tte.output_buffer_size = token.Nvalue; tte.output_block_acknowledge = "1"b; block_ack_set = "1"b; end]
      282*					  LEX (2)					/ type_statements \
      283*104	/ buffer_size : <any-token>		/ LEX (2) ERROR (6) NEXT_STMT			/ type_statements \
      284*105	/ output_end_of_block : <tty_char> ;	/ LEX (2) [if out_sus_set then call ERROR (42); else do;
      285*					  tte.output_suspend_etb = make_char (); tte.output_block_acknowledge = "1"b; block_ack_set = "1"b; end]
      286*					  LEX (2)					/ type_statements \
      287*106	/ output_end_of_block : <any-token>	/ LEX (2) ERROR (6) NEXT_STMT			/ type_statements \
      288*107	/ output_acknowledge : <tty_char> ;	/ LEX (2) [if out_sus_set then call ERROR (42); else do;
      289*					  tte.output_resume_ack = make_char (); tte.output_block_acknowledge = "1"b; block_ack_set = "1"b; end]
      290*					  LEX (2)					/ type_statements \
      291*108	/ output_acknowledge : <any-token>	/ LEX (2) ERROR (6) NEXT_STMT			/ type_statements \
      292*109	/ keyboard_addressing :		/ LEX (2) [bitp = addr (tte.keyboard_addressing)] PUSH (type_statements)
      293*										/ yes_no \
      294*110	/ print_preaccess_message :		/ LEX (2) [bitp = addr (tte.print_preaccess_message)] PUSH (type_statements)
      295*										/ yes_no \
      296*111	/ conditional_printer_off :	 	/ LEX (2) [bitp = addr (tte.conditional_printer_off)] PUSH (type_statements)
      297*										/ yes_no \
      298*
      299*112	/ input_conversion : ;		/ LEX (3) [tte.input_conversion_rp = 0]		/ type_statements \
      300*113	/ input_conversion : <legal_name> ;	/ LEX (2) set_table (tte.input_conversion_rp, CONV_TYPE) LEX (2)
      301*										/ type_statements \
      302*
      303*114	/ output_conversion : ;		/ LEX (3) [tte.output_conversion_rp = 0]	/ type_statements \
      304*115	/ output_conversion : <legal_name> ;	/ LEX (2) set_table (tte.output_conversion_rp, CONV_TYPE) LEX (2)
      305*										/ type_statements \
      306*
      307*116	/ input_translation : ;		/ LEX (3) [tte.input_translation_rp = 0]	/ type_statements \
      308*117	/ input_translation : <legal_name> ;	/ LEX (2) set_table (tte.input_translation_rp, TRANS_TYPE) LEX (2)
      309*										/ type_statements \
      310*
      311*118	/ output_translation : ;		/ LEX (3) [tte.output_translation_rp = 0]	/ type_statements \
      312*119	/ output_translation : <legal_name> ;	/ LEX (2) set_table (tte.output_translation_rp, TRANS_TYPE) LEX (2)
      313*										/ type_statements \
      314*
      315*120	/ special : ;			/ LEX (3) [tte.special_rp = 0]		/ type_statements \
      316*121	/ special : <legal_name> ;	 	/ LEX (2) set_table (tte.special_rp, SPEC_TYPE) LEX (2)
      317*										/ type_statements \
      318*
      319*
      320*122       / function_keys : ;                     / LEX (3) [tte.fkey_rp = 0]                       / type_statements \
      321*123       / function_keys : <legal_name> ;        / LEX (2) set_table(tte.fkey_rp, FKEY_TYPE) LEX(2)
      322*                                                                                                    / type_statements \
      323*
      324*124       / protocol : ;                          / LEX (3) [tte.protocol = 0]
      325*                       / type_statements \
      326*125       / protocol :                            / LEX (2) [tte.protocol = get_protocol()] LEX(2)
      327*                       / type_statements \
      328*                     
      329*126	/ video_info : ;			/ LEX (3) set_extended [extended_tables.tables_rp (VIDEO_RP) = 0]
      330*										/ type_statements \
      331*127	/ video_info :			/ LEX (2) set_extended define_video PUSH (type_statements)
      332*										/ video_table \
      333*
      334*
      335*128	/ dsatm_device : ;			/ LEX (3) set_extended [extended_tables.tables_rp (DSATM_DEVICE_RP) = 0]
      336*										/ type_statements \
      337*129	/ dsatm_device :			/ LEX (2) set_extended define_dsatm_device PUSH (type_statements)
      338*										/ dsatm_device_table \
      339*
      340*130	/ old_type : <decimal-integer> ;	/ LEX (2) [tte.old_type = token.Nvalue] LEX (2)
      341*										/ type_statements \
      342*
      343*131	/ <any-token>			/ finish_type				/ mainloop \
      344*132	/ <no-token>			/ ERROR (7)				/ RETURN \
      345*
      346*
      347*	\" yes_no subroutine
      348*
      349*yes_no	/ yes ;		/ [bitp -> based_bit1 = "1"b]  LEX (2)	/ STACK_POP \
      350*134       / YES ;             / [bitp -> based_bit1 = "1"b]  LEX (2)  / STACK_POP \
      351*135	/ no ;		/ [bitp -> based_bit1 = "0"b]  LEX (2)	/ STACK_POP \
      352*136       / NO ;              / [bitp -> based_bit1 = "0"b]  LEX (2)  / STACK_POP \
      353*137	/ <any-token> ;	/ ERROR (4) NEXT_STMT		/ STACK_POP \
      354*138	/ <any-token>	/ ERROR (6) NEXT_STMT		/ STACK_POP \
      355*139	/ <no-token>	/ ERROR (7)			/ RETURN \
      356*
      357*
      358*	\" default_bauds subroutine
      359*
      360*default_bauds
      361*140	/ <valid_baud>	/ [dft_bauds (baudx) = token.Nvalue; baudx = baudx + 1] LEX
      362*							/ default_bauds \
      363*141	/		/ PUSH (default_bauds)		/ general_dft_baud \
      364*
      365*general_dft_baud
      366*142	/ other		/ [dft_bauds (baudx) = 0; baudx = baudx + 1] LEX
      367*							/ STACK_POP \
      368*143	/ ;		/ [n_dft_bauds = baudx - 1] LEX POP	/ mainloop \
      369*
      370*144	/ <any-token>	/ ERROR (8) POP NEXT_STMT		/ mainloop \
      371*145	/ <no-token>	/ ERROR (7)			/ RETURN \
      372*
      373*default_cps
      374*146	/ <valid_cps>	/ [dft_bauds (baudx) = cps_baud_value; baudx = baudx + 1] LEX
      375*							/ default_cps \
      376*147	/		/ PUSH (default_cps)		/ general_dft_baud \
      377*
      378*
      379*	\" bauds subroutine
      380*
      381*bauds	/ <valid_baud>	/ make_delay_entry ((token.Nvalue)) [baudx = baudx + 1] LEX
      382*							/ bauds \
      383*149	/		/ PUSH (bauds)			/ general_baud \
      384*
      385*general_baud
      386*150	/ other		/ make_delay_entry (0) LEX		/ STACK_POP \
      387*151	/ ;		/ LEX  POP			/ type_statements \
      388*152	/ <any-token>	/ ERROR (8) POP  NEXT_STMT		/ type_statements \
      389*153	/ <no-token>	/ ERROR (7)			/ RETURN \
      390*
      391*cps	/ <valid_cps>	/ make_delay_entry (cps_baud_value) [baudx = baudx + 1] LEX
      392*							/ cps \
      393*155	/		/ PUSH (cps)			/ general_baud \
      394*
      395*
      396*	\" subroutine for initial_string, comment or additional_info
      397*
      398*char_string
      399*156	/ ;		/ [p -> based_two_words (*) = 0] LEX			/ STACK_POP \
      400*157	/ <quoted-string> ;	/ copy_string (p) LEX (2)				/ STACK_POP \
      401*158	/		/ [exp_char_index, unexp_char_index = 1; rep_depth, expanded(*), unexpanded(*) = 0; rep_error, rep_used = "0"b;]
      402*								          / string_item \
      403*
      404*string_item
      405*159	/ <rep_err_found>	/ NEXT_STMT					/ STACK_POP \
      406*160	/ <quoted-string>	/ insert_quoted_string LEX				/ string_item \
      407*161	/ <tty_char>	/ [ call insert_single_char ((token.Nvalue)) ] LEX	/ string_item \
      408*
      409*162	/ ( <decimal-integer> ) <_
      410*			/ LEX push_rep LEX (3)				/ string_item \
      411*
      412*163	/ >_		/ pop_rep LEX					/ string_item \
      413*164	/ ;		/ store_string (p) LEX				/ STACK_POP \
      414*165	/ <any-token>	/ ERROR (6) NEXT_STMT				/ STACK_POP \
      415*166	/ <no-token>	/ ERROR (7)					/ RETURN \
      416*
      417*	\" subroutine for delay statements
      418*
      419*delays	/		/ [n_spec = 0; delay_error_printed = "0"b] / delay_token \
      420*
      421*delay_token
      422*168	/ <delay_value>	/ set_delay  LEX			/ delay_token \
      423*169	/ ;		/ LEX				/ type_statements \
      424*170	/ <any-token>	/ ERROR (9) NEXT_STMT		/ type_statements \
      425*171	/ <no-token>	/ ERROR (7)			/ RETURN \
      426*
      427*
      428*	\" line_types subroutine
      429*
      430*line_types
      431*172	/ ;		/ LEX				/ STACK_POP \
      432*173	/		/ [line_type_str = ""b]		/ line_type_values \
      433*
      434*line_type_values
      435*174	/ <valid_line_type>	/ [substr (line_type_str, token.Nvalue, 1) = "1"b] LEX
      436*							/ next_line_type \
      437*175	/ <any-token>	/ ERROR (10) NEXT_STMT		/ STACK_POP \
      438*176	/ <no-token>	/ ERROR (7)			/ RETURN \
      439*
      440*next_line_type
      441*177	/ ,		/ LEX				/ line_type_values \
      442*178	/ ;		/ LEX				/ STACK_POP \
      443*
      444*entry_line_types
      445*179	/		/ [tte.line_types = line_type_str]	/ STACK_POP \
      446*
      447*dft_line_types
      448*180	/		/ [dft.line_types = line_type_str]	/ STACK_POP \
      449*
      450*	\" subroutine to construct conversion/translation tables
      451*
      452*table_entries
      453*181	/ <no_table>	/ NEXT_STMT			/ mainloop \
      454*182	/		/ [entryx = 0]			/ table_entry \
      455*
      456*table_entry
      457*183	/ <tty_char>	/ [if entryx > hbound (tablep -> cv_trans.value, 1) then call semant_error (11, cur_table_name, "");
      458*			  else temp_table (entryx) = token.Nvalue; entryx = entryx + 1]  LEX
      459*							/ table_entry \
      460*
      461*184	/ ;		/ [if entryx < 128 then call semant_error (12, cur_table_name, "")] LEX
      462*							/ mainloop \
      463*
      464*185	/ <any-token>	/ semant_error (13, cur_table_name, token_value) NEXT_STMT / mainloop \
      465*186	/ <no-token>	/ ERROR (7)			/ RETURN \
      466*
      467*	\" subroutine for constructing special_chars table
      468*
      469*special_entries
      470*187	/ new_line :	/ LEX (2) [p = addr (temp_special_table.nl_seq)] PUSH (single_sequence) / sequence \
      471*188	/ carriage_return :	/ LEX (2) [p = addr (temp_special_table.cr_seq)] PUSH (single_sequence) / sequence \
      472*189	/ backspace :	/ LEX (2) [p = addr (temp_special_table.bs_seq)] PUSH (single_sequence) / sequence \
      473*190	/ tab :		/ LEX (2) [p = addr (temp_special_table.tab_seq)] PUSH (single_sequence) / sequence \
      474*191	/ vertical_tab :	/ LEX (2) [p = addr (temp_special_table.vt_seq)] PUSH (single_sequence) / sequence \
      475*192	/ form_feed :	/ LEX (2) [p = addr (temp_special_table.ff_seq)] PUSH (single_sequence) / sequence \
      476*193	/ printer_on :	/ LEX (2) [p = addr (temp_special_table.printer_on)] PUSH (single_sequence) / sequence \
      477*194	/ printer_off :	/ LEX (2) [p = addr (temp_special_table.printer_off)] PUSH (single_sequence) / sequence \
      478*195	/ red_shift :	/ LEX (2) [p = addr (temp_special_table.red_ribbon_shift)] PUSH (single_sequence) / sequence \
      479*196	/ black_shift :	/ LEX (2) [p = addr (temp_special_table.black_ribbon_shift)] PUSH (single_sequence) / sequence \
      480*197	/ end_of_page :	/ LEX (2) [p = addr (temp_special_table.end_of_page)] PUSH (single_sequence) / sequence \
      481*
      482*198	/ output_escapes :	/ LEX (2) [esc_p = addr (not_edited); not_edited (*) = 0]		/ output_escapes \
      483*199	/ edited_output_escapes :
      484*			/ LEX (2) [esc_p = addr (edited); edited (*) = 0]			/ output_escapes \
      485*200	/ input_escapes :	/ LEX (2) [count = 0]					/ input_escapes \
      486*
      487*201	/ <any-token>	/ check_special						/ mainloop \
      488*202	/ <no-token>	/ ERROR (7)						/ RETURN \
      489*
      490*output_escapes
      491*203	/		/ [max_output_escapes = 0]					/  \
      492*output_indicator
      493*204	/ <indicator_value>	/ PUSH (escape_sequences) [p = addr (esc_p -> escapes (token.Nvalue - 16));
      494*			max_output_escapes = max (max_output_escapes, token.Nvalue - 16)] LEX
      495*										/ sequence \
      496*
      497*205	/ <any-token>	/ ERROR (14) NEXT_STMT					/ special_entries \
      498*206	/ <no-token>	/ ERROR (7)						/ RETURN \
      499*
      500*sequence	/ <no_table>	/ NEXT_STMT [STACK_DEPTH = 0]					/ special_entries \
      501*208	/		/ [count = 0]						/ sequence_values \
      502*
      503*sequence_values
      504*209	/ <tty_char>	/ [count = count + 1; if count > hbound (c_chars.chars, 1) then call ERROR (15);
      505*			else addr (p -> c_chars.chars (count)) -> based_fb8 = token.Nvalue] LEX
      506*										/ sequence_values \
      507*210	/ <any-token>	/							/ STACK_POP \
      508*211	/ <no-token>	/ ERROR (7)						/ RETURN \
      509*
      510*escape_sequences
      511*212	/ ,		/ [p -> c_chars.count = count] LEX				/ output_indicator \
      512*single_sequence
      513*213	/ ;		/ [p -> c_chars.count = count] LEX				/ special_entries \
      514*214	/ <any-token>	/ ERROR (16) NEXT_STMT					/ special_entries \
      515*215	/ <no-token>	/ ERROR (7)						/ RETURN \
      516*
      517*input_escapes
      518*216	/ <no_table>	/ NEXT_STMT						/ special_entries \
      519*
      520*217	/ <tty_char>	/ [count = count + 1; addr (input_escapes.str) -> fb8_array (count) = token.Nvalue] LEX
      521*										/ input_result \
      522*
      523*input_esc_error
      524*218	/ <any-token>	/ ERROR (6) NEXT_STMT					/ special_entries \
      525*219	/ <no-token>	/ ERROR (7)						/ RETURN \
      526*
      527*input_result
      528*220	/ <tty_char>	/ [addr (input_results.str) -> fb8_array (count) = token.Nvalue] LEX	/ next_esc \
      529*221	/		/							/ input_esc_error \
      530*
      531*next_esc
      532*222	/ ,		/ LEX							/ input_escapes \
      533*223	/ ;		/ LEX [input_escapes.len = count]				/ special_entries \
      534*224	/		/							/ input_esc_error \
      535*
      536*          \" function_key_data table
      537*
      538*fkey_entries
      539*fkey_loop
      540*          / home :            / LEX (2) start_fkey_seq(addr(function_key_data.home(0)))   / fkey_entry \
      541*226       / left :            / LEX (2) start_fkey_seq(addr(function_key_data.left(0)))   / fkey_entry \
      542*227       / right :           / LEX (2) start_fkey_seq(addr(function_key_data.right(0)))  / fkey_entry \
      543*228       / up :              / LEX (2) start_fkey_seq(addr(function_key_data.up(0)))     / fkey_entry \
      544*229       / down :            / LEX (2) start_fkey_seq(addr(function_key_data.down(0)))   / fkey_entry \
      545*230       / key ( <decimal-integer> ) :
      546*                              / LEX (2) [token.Nvalue = bin(token_value, 35, 0)]
      547*                                init_fkey_area((token.Nvalue))
      548*                                start_fkey_seq(addr(function_key_data.function_keys(token.Nvalue, 0))) LEX (3)
      549*                                                                                          / fkey_entry \
      550*231       / <any-token>       / finish_fkey_table                                         / mainloop \
      551*232       / <no-token>        / ERROR (7)                                                 / RETURN \
      552*
      553*fkey_entry
      554*233       / <fkey_entry_err>  / statement_error(52, cur_table_name, "") NEXT_STMT         / fkey_entries \
      555*
      556*fkey_seq
      557*234       / <quoted-string>   / insert_quoted_string LEX                                  / fkey_seq \
      558*235       / <tty_char>        / insert_single_char((token.Nvalue)) LEX                    / fkey_seq \
      559*236       / ,                 / end_fkey_seq LEX                                          / fkey_entry \
      560*237       / ;                 / end_fkey_seq LEX                                          / fkey_entries \
      561*238       / <any-token>       / ERROR (50) NEXT_STMT                                      / fkey_entries \
      562*239       / <no-token>        / ERROR (7)                                                 / RETURN \
      563*
      564*	\" default_types table
      565*
      566*default_types
      567*240	/ <valid_baud>	/ [temp_dftte (default_count).baud = token.Nvalue] LEX	/ dftt_line_type \
      568*241	/ any		/ [temp_dftte (default_count).baud = 0]  LEX		/ dftt_line_type \
      569*242	/ <any-token>	/ ERROR (8) LEX					/ dftt_line_type \
      570*243	/ <no-token>	/ ERROR (7)					/ RETURN \
      571*
      572*dftt_line_type
      573*244	/ <valid_dft_line_type>
      574*			/ [temp_dftte (default_count).line_type = token.Nvalue] LEX	/ dft_term_type \
      575*245	/ any		/ [temp_dftte (default_count).line_type = 0]  LEX		/ dft_term_type \
      576*246	/ <any-token>	/ ERROR (10) LEX					/ dft_term_type \
      577*247	/ <no-token>	/ ERROR (7)					/ RETURN \
      578*
      579*dft_term_type
      580*248	/ <defined_type>	/ [temp_dftte (default_count).term_type_index = token.Nvalue] LEX
      581*									/ next_default \
      582*249	/ <legal_name>	/ [temp_dftte (default_count).type_name = token_value] LEX	/ next_default \
      583*250	/ <any-token>	/ LEX						/ next_default \
      584*
      585*next_default
      586*251	/ ,		/ [default_count = default_count + 1] LEX		/ default_types \
      587*252	/ ;		/ LEX [temp_dftt.dft_count = default_count] check_for_any	/ mainloop \
      588*253	/ <any-token>	/ ERROR (6) NEXT_STMT				/ mainloop \
      589*254	/ <no-token>	/ ERROR (7)					/ RETURN \
      590*
      591*	\" answerback table
      592*
      593*answerback
      594*255	/ match		/ [answerback_entry.def_string.chars (ansbck_char_index) = "m"] LEX	/ match_string \
      595*256	/ search		/ [answerback_entry.def_string.chars (ansbck_char_index) = "s"] LEX	/ match_string \
      596*257	/ skip <decimal-integer>
      597*			/ LEX [answerback_entry.def_string.chars (ansbck_char_index) = "k";
      598*			addr (answerback_entry.def_string.chars (ansbck_char_index+1)) -> based_fb8 = token.Nvalue;
      599*			ansbck_char_index = ansbck_char_index + 2] LEX			/ next_spec \
      600*
      601*258	/ id <decimal-integer>
      602*			/ LEX [answerback_entry.def_string.chars (ansbck_char_index) = "i";
      603*			addr (answerback_entry.def_string.chars (ansbck_char_index+1)) -> based_fb8 = token.Nvalue;
      604*			ansbck_char_index = ansbck_char_index + 2] LEX			/ next_spec \
      605*
      606*259	/ id rest		/ [answerback_entry.def_string.chars (ansbck_char_index) = "i";
      607*			answerback_entry.def_string.chars (ansbck_char_index+1) = NUL_CHAR;
      608*			ansbck_char_index = ansbck_char_index + 2] LEX (2)		/ next_spec \
      609*
      610*ansbck_error
      611*260	/ <any-token>	/ ERROR (17) NEXT_STMT					/ ans_back_type \
      612*261	/ <no-token>	/ ERROR (7)						/ RETURN \
      613*
      614*match_string
      615*262	/ <quoted-string>	/ [addr (answerback_entry.def_string.chars (ansbck_char_index+1)) -> based_fb8 = token.Lvalue;
      616*			substr (answerback_entry.def_string.chars (1), ansbck_char_index+2, token.Lvalue)
      617*			= token_value; ansbck_char_index = ansbck_char_index + token.Lvalue + 2] LEX
      618*										/ next_spec \
      619*
      620*263	/ digit		/ [addr (answerback_entry.def_string.chars (ansbck_char_index+1)) -> based_fb8 = -2;
      621*			ansbck_char_index = ansbck_char_index + 2] LEX			 / next_spec \
      622*
      623*264	/ letter		/ [addr (answerback_entry.def_string.chars (ansbck_char_index+1)) -> based_fb8 = -1;
      624*				ansbck_char_index = ansbck_char_index + 2] LEX		/ next_spec \
      625*
      626*
      627*265	/ <any-token>	/ ERROR (17) LEX						/ next_spec \
      628*266	/ <no-token>	/ ERROR (7)						/ RETURN \
      629*
      630*next_spec
      631*267	/ ,		/ LEX							/ answerback \
      632*268	/ ;		/ LEX [answerback_entry.def_string.length = ansbck_char_index - 1]	/ ans_back_type \
      633*269	/		/							/ ansbck_error \
      634*
      635*ans_back_type
      636*270	/ type : ;	/ LEX (3)							/ mainloop \
      637*271	/ type : <defined_type> ;
      638*			/ LEX (2) [answerback_entry.term_type_index = token.Nvalue] LEX (2)	/ mainloop \
      639*272	/ type :		/ LEX (2) ERROR (18) NEXT_STMT				/ mainloop \
      640*273	/ <any-token>	/							/ mainloop \
      641*274	/ <no-token>	/ ERROR (7)						/ RETURN \
      642*
      643*	\"Video stuff 6/3/79 - BSG
      644*
      645*video_table
      646*
      647*video_loop
      648*	/ clear_screen :	/ LEX (2) start_vseq (CLEAR_SCREEN)				/ vseq \
      649*276	/ clear_to_eos :	/ LEX (2) start_vseq (CLEAR_TO_EOS)				/ vseq \
      650*277	/ home :		/ LEX (2) start_vseq (HOME)				/ vseq \
      651*278	/ clear_to_eol :	/ LEX (2) start_vseq (CLEAR_TO_EOL)				/ vseq \
      652*279	/ cursor_up :	/ LEX (2) start_vseq (CURSOR_UP)				/ vseq \
      653*280	/ cursor_right :	/ LEX (2) start_vseq (CURSOR_RIGHT)				/ vseq \
      654*281	/ cursor_down :	/ LEX (2) start_vseq (CURSOR_DOWN)				/ vseq \
      655*282	/ cursor_left :	/ LEX (2) start_vseq (CURSOR_LEFT)				/ vseq \
      656*283	/ insert_chars :	/ LEX (2) start_vseq (INSERT_CHARS)				/ vseq \
      657*284	/ end_insert_chars : / LEX (2) start_vseq (END_INSERT_CHARS)			/ vseq \
      658*285	/ delete_chars :	/ LEX (2) start_vseq (DELETE_CHARS)				/ vseq \
      659*286	/ insert_lines :	/ LEX (2) start_vseq (INSERT_LINES)				/ vseq \
      660*287	/ delete_lines :	/ LEX (2) start_vseq (DELETE_LINES)				/ vseq \
      661*288	/ abs_pos :	/ LEX (2) start_vseq (ABS_POS)				/ vseq \
      662*289	/ screen_height : <decimal-integer> ;	/ LEX (2) [tty_video_table.screen_height = token.Nvalue] LEX (2)
      663*										/ video_loop \
      664*290	/ screen_line_length : <decimal-integer> ; / LEX (2) [tty_video_table.screen_line_length = token.Nvalue] LEX (2)
      665*										/ video_loop \
      666*291	/ scroll_count : <decimal-integer> ; / LEX (2) [tty_video_table.scroll_count = token.Nvalue] LEX (2)
      667*										/ video_loop \
      668*292	/ <any-token>		/ finish_video_table				/ STACK_POP \
      669*293	/ <no-token>		/ ERROR (7) 					/ RETURN \
      670*vseq
      671*vseq_loop
      672*	/ <quoted-string>	/ insert_quoted_string LEX					/ vseq_loop \
      673*295	/ ;		/ LEX end_vseq						/ video_loop \
      674*
      675*296	/ (		/ LEX							/ vseq_numeric_expr \
      676*297	/ <tty_char>	/ insert_single_char ((token.Nvalue)) LEX			/ vseq_loop \
      677*298	/ , pad <decimal-integer> ms  / LEX (2) video_encode_pad (1000 * token.Nvalue) LEX (2)	/ vseq_loop \
      678*299	/ , pad <decimal-integer> us  / LEX (2) video_encode_pad ((token.Nvalue)) LEX (2)	/ vseq_loop \
      679*300	/ , pad <decimal-integer>	/ LEX (2) [tty_video_seq.flags.cpad_present, tty_video_seq.flags.cpad_in_chars = "1"b]
      680*				  [tty_video_seq.cpad = token.Nvalue] LEX		/ vseq_loop \
      681*301	/ <any-token>		/ ERROR (48) NEXT_STMT				/ video_loop \
      682*302	/ <no-token>		/ ERROR (7)					/ RETURN \
      683*
      684*
      685*vseq_numeric_expr
      686*303	/		/ [unspec (temp_numeric_encoding) = "0"b]
      687*			  [temp_numeric_encoding.must_be_on = "1"b]			/ \
      688*	\" Open paren pre-parsed out
      689*304	/ binary		/ LEX							/ vseq_numencode_1 \
      690*305	/ decimal <decimal-integer> / [temp_numeric_encoding.flags.express_in_decimal = "1"b]
      691*				LEX [temp_numeric_encoding.num_digits = token.Nvalue] LEX 	/ vseq_numencode_1 \
      692*306	/ decimal			/ LEX [temp_numeric_encoding.num_digits = 0]
      693*				  [temp_numeric_encoding.express_in_decimal = "1"b]	/ vseq_numencode_1 \
      694*307	/ octal  <decimal-integer> / [temp_numeric_encoding.flags.express_in_octal = "1"b]
      695*				LEX [temp_numeric_encoding.num_digits = token.Nvalue] LEX 	/ vseq_numencode_1 \
      696*308	/ octal			/ LEX [temp_numeric_encoding.num_digits = 0]
      697*				  [temp_numeric_encoding.express_in_octal = "1"b]		/ vseq_numencode_1 \
      698*
      699*vseq_numencode_1
      700*309	/ line		/ [temp_numeric_encoding.l_c_or_n = 0] LEX 			/ vseq_numencode_2 \
      701*310	/ LINE		/ [temp_numeric_encoding.l_c_or_n = 0] LEX 			/ vseq_numencode_2 \
      702*311	/ column		/ [temp_numeric_encoding.l_c_or_n = 1] LEX 			/ vseq_numencode_2 \
      703*312	/ COLUMN		/ [temp_numeric_encoding.l_c_or_n = 1] LEX 			/ vseq_numencode_2 \
      704*313	/ n		/ [temp_numeric_encoding.l_c_or_n = 2] LEX 			/ vseq_numencode_2 \
      705*314	/ N		/ [temp_numeric_encoding.l_c_or_n = 2] LEX 			/ vseq_numencode_2 \
      706*315	/ <any-token>	/ ERROR (46) NEXT_STMT POP					/ video_loop \
      707*316	/ <no-token>	/ ERROR (7)						/ RETURN \
      708*vseq_numencode_2
      709*317	/ + <tty_char>	/ LEX [temp_numeric_encoding.offset  = token.Nvalue] LEX		/ vseq_numencode_3 \
      710*318	/ - <tty_char>	/ LEX [temp_numeric_encoding.offset = - token.Nvalue] LEX		/ vseq_numencode_3 \
      711*
      712*vseq_numencode_3
      713*319	/ )		/ LEX [if temp_numeric_encoding.offset = 0 then temp_numeric_encoding.offset_is_0 = "1"b]
      714*										/ \
      715*320	/		/ insert_single_char (bin (substr (unspec (temp_numeric_encoding), 1, 9)))
      716*	  [if ^temp_numeric_encoding.offset_is_0 then call insert_single_char (bin (substr (unspec (temp_numeric_encoding), 10, 9)))]
      717*	  [if temp_numeric_encoding.l_c_or_n = 2 then tty_video_seq.flags.able_to_repeat = "1"b]
      718*			  [tty_video_seq.flags.interpret = "1"b]			/ vseq_loop \
      719*321	/ <any-token>	/ ERROR (46) NEXT_STMT POP					/ video_loop \
      720*322	/ <no-token>	/ ERROR (7)						/ RETURN \
      721*
      722*
      723*	\"DSA TM stuff 12/21/84 Roger Negaret
      724*          \" description of the negotiation information for a logical device
      725*
      726*dsatm_device_table
      727*dsatmdev_loop
      728*
      729*          / data_presentation : ;                 / LEX (3) / dsatmdev_loop \
      730*324       / data_presentation :                   / LEX (2) / dpp \
      731*
      732*325       / sdp_class : ;                         / LEX (3) /dsatmdev_loop \
      733*326       / sdp_class :			/ LEX (2) / sdp_class \
      734*
      735*327       / real_class : ;			/ LEX (3) / dsatmdev_loop \
      736*328       / real_class :			/ LEX (2) / real_class \
      737*
      738*329       / device_id : ;			/ LEX (3) / dsatmdev_loop \
      739*330       / device_id : <decimal-integer> ;       / LEX (2) [dsatm_device.dev_id = token.Nvalue] LEX (2)                                 / dsatmdev_loop \
      740*
      741*331       / device_type : ;			/ LEX (3) / dsatmdev_loop \
      742*332       / device_type : <legal_dev_type> ;	/ LEX (2) [dsatm_device.dev_type = name_idx] LEX (2)                                   / dsatmdev_loop \
      743*
      744*333       / shareability : ;			/ LEX (3) / dsatmdev_loop \
      745*334       / shareability : <legal_shareability> ; / LEX (2) [dsatm_device.shareability = name_idx] LEX (2)                               / dsatmdev_loop \
      746*
      747*335       / allocation_unit : ;	          / LEX (3) / dsatmdev_loop \
      748*336       / allocation_unit : <legal_alloc_unit>  / LEX (2) set_alloc_unit LEX                                                           / alloc_unit \
      749*
      750*337       / line_overflow : ;			/ LEX (3) / dsatmdev_loop \
      751*338       / line_overflow : <legal_line_overflow> ; / LEX (2) [dsatm_device.line_overflow = name_idx] LEX (2)                            / dsatmdev_loop \
      752*
      753*339       / page_overflow : ;			/ LEX (3) / dsatmdev_loop \
      754*340       / page_overflow : <legal_page_overflow> ; / LEX (2) [dsatm_device.page_overflow = name_idx] LEX (2)                            / dsatmdev_loop \
      755*
      756*341       / character_encoding : ;		/ LEX (3) / dsatmdev_loop \
      757*342       / character_encoding :		/ LEX (2) / char_encoding \
      758*
      759*343       / character_set : ;			/ LEX (3) / dsatmdev_loop \
      760*344       / character_set :			/ LEX (2) / char_set \
      761*
      762*345       / character_subset : ;		/ LEX (3) / dsatmdev_loop \
      763*346       / character_subset :		/ LEX (2) / char_subset \
      764*
      765*347       / national_language : ;		/ LEX (3) / dsatmdev_loop \
      766*348       / national_language:		/ LEX (2) / nat_lang \
      767*
      768*349       / compression_algorithm : ;		/ LEX (3) / dsatmdev_loop \
      769*350       / compression_algorithm :		/ LEX (2) / compression \
      770*
      771*351       / character_font : ;		/ LEX (3) / dsatmdev_loop \
      772*352       / character_font :			/ LEX (2) / char_font \
      773*
      774*353       / max_record_size : ;		/ LEX (3) / dsatmdev_loop \
      775*354       / max_record_size : <decimal-integer> ; / LEX (2) [dsatm_device.max_rec_size = token.Nvalue] LEX (2)                           / dsatmdev_loop \
      776*
      777*355       / attd : ;                              / LEX (3) / dsatmdev_loop \
      778*356       / attd : <legal_attd> ;  / LEX (4)                / dsatmdev_loop \
      779*
      780*357       / att1 : ;                         / LEX (3)      / dsatmdev_loop \
      781*358       / att1 : <legal_att1> ;  / LEX (4)                / dsatmdev_loop \
      782*
      783*359       / stc_available :                 / LEX (2) [bitp = addr (dsatm_device.stc_available)] PUSH (dsatmdev_loop)                   / yes_no \
      784*
      785*360       / <any-token>		          / finish_dsatm_device                                                                 / STACK_POP \
      786*
      787*361       / <no-token>		          / ERROR (7) 			                                              / RETURN \
      788*
      789*dpp
      790*
      791*          / ;               			/ [dsatm_device.dpp_nb = dppx] LEX 									       / dsatmdev_loop \
      792*363       / <legal_dpp>                           / set_dpp LEX                  		/ dpp \
      793*364	/ <any-token>			/ ERROR (55) NEXT_STMT			/ dsatmdev_loop \
      794*365       / <no-token>		 	/ ERROR (7) 				/ RETURN \
      795*
      796*sdp_class
      797*
      798*          / ; 				/ [dsatm_device.sc_nb = scx] LEX 									       / dsatmdev_loop \
      799*367       / <legal_sdp_class> 		/ set_sdp_class  LEX			/ sdp_class \
      800*368	/ <any-token>			/ ERROR (55) NEXT_STMT			/ dsatmdev_loop \
      801*369       / <no-token>			/ ERROR (7) 				/ RETURN \
      802*
      803*real_class
      804*
      805*          / ; 				/ [dsatm_device.rc_nb = rcx] LEX 									       / dsatmdev_loop \
      806*371       / <legal_real_class> 		/ set_real_class  LEX			/ real_class \
      807*372	/ <any-token>			/ ERROR (55) NEXT_STMT			/ dsatmdev_loop \
      808*373       / <no-token>			/ ERROR (7) 				/ RETURN \
      809*
      810*alloc_unit
      811*
      812*          / ; 				/  LEX                                            / dsatmdev_loop \
      813*375       / <legal_alloc_unit> 		/ set_alloc_unit  LEX			/ alloc_unit \
      814*376	/ <any-token>			/ ERROR (55) NEXT_STMT			/ dsatmdev_loop \
      815*377       / <no-token>			/ ERROR (7) 				/ RETURN \
      816*
      817*char_encoding
      818*378       
      819*          / ;                                     / [dsatm_device.ce_nb = cex] LEX                  / dsatmdev_loop \
      820*379       / <legal_char_encoding> 		/ set_char_encoding LEX			/ char_encoding \
      821*380	/ <any-token>			/ ERROR (55) NEXT_STMT			/ dsatmdev_loop \
      822*381       / <no-token>			/ ERROR (7) 				/ RETURN \
      823*
      824*char_set
      825*
      826*          / ; 				/ [dsatm_device.cs_nb = csx] LEX 									       / dsatmdev_loop \
      827*383       / <legal_char_set> 			/ set_char_set LEX			/ char_set \
      828*384	/ <any-token>			/ ERROR (55) NEXT_STMT			/ dsatmdev_loop \
      829*385       / <no-token>			/ ERROR (7) 				/ RETURN \
      830*
      831*char_subset
      832*
      833*          / ; 				/ [dsatm_device.css_nb = cssx] LEX 									       / dsatmdev_loop \
      834*387       / <legal_char_subset> 		/ set_char_subset LEX			/ char_subset \
      835*388	/ <any-token>			/ ERROR (55) NEXT_STMT			/ dsatmdev_loop \
      836*389       / <no-token>			/ ERROR (7) 				/ RETURN \
      837*
      838*char_font
      839*
      840*          / ; 				/ [dsatm_device.cf_nb = cfx] LEX 									       / dsatmdev_loop \
      841*391       / <legal_char_font> 		/ set_char_font LEX			/ char_font \
      842*392	/ <any-token>			/ ERROR (55) NEXT_STMT			/ dsatmdev_loop \
      843*393       / <no-token>			/ ERROR (7) 				/ RETURN \
      844*
      845*nat_lang
      846*
      847*          / ; 				/ [dsatm_device.nl_nb = nlx] LEX 									       / dsatmdev_loop \
      848*395       / <legal_nat_lang> 			/ set_nat_lang LEX			/ nat_lang \
      849*396	/ <any-token>			/ ERROR (55) NEXT_STMT			/ dsatmdev_loop \
      850*397       / <no-token>			/ ERROR (7) 				/ RETURN \
      851*
      852*compression
      853*
      854*          / ; 				/ [dsatm_device.ca_nb = cax] LEX 									       / dsatmdev_loop \
      855*399       / <legal_compression> 		/ set_compression LEX			/ compression \
      856*400	/ <any-token>			/ ERROR (55) NEXT_STMT			/ dsatmdev_loop \
      857*401       / <no-token>			/ ERROR (7) 				/ RETURN \
      858*
      859*          \" END of the DSA TM stuff
      860*
      861*	\" preaccess command types
      862*
      863*preaccess
      864*402	/ MAP ;		/ [p = addr (ttt.type_map); pa_type = 1] LEX (2)		/ preaccess_type \
      865*403	/ map ;		/ [p = addr (ttt.type_map); pa_type = 1] LEX (2)		/ preaccess_type \
      866*404	/ <any-token>	/ ERROR (34) NEXT_STMT				/ mainloop \
      867*405	/ <no-token>	/ ERROR (7)					/ RETURN \
      868*
      869*preaccess_type
      870*406	/ type : <defined_type> ;
      871*			/ LEX (2) [p -> based_fb = token.Nvalue] LEX (2)		/ mainloop \
      872*407	/ type :		/ LEX (2) ERROR (18) NEXT_STMT			/ mainloop \
      873*408	/ <any-token>	/ semant_error (35, pa_name (pa_type), "")		/ mainloop \
      874*409	/ <no-token>	/ ERROR (7)					/ RETURN \
      875*
      876*	\" mode checking
      877*
      878*check_modes
      879*410	/		/ [mode_string = ""]			/  \
      880*411	/ ;	 	/ LEX					/ STACK_POP \
      881*
      882*next_mode
      883*412	/ <valid_mode>	/ [mode_string = mode_string || token_value] LEX	/ delim \
      884*413	/ <any-token>	/ ERROR (2) [mode_string = mode_string || token_value] LEX
      885*								/ delim \
      886*mode_err	/ <no-token>	/ ERROR (7)				/ RETURN \
      887*
      888*delim
      889*415	/ ,		/ [mode_string = mode_string || ","] LEX	/ next_mode \
      890*416	/ ;		/ LEX					/ STACK_POP \
      891*417	/ <any-token>	/ ERROR (40) NEXT_STMT POP			/ STACK_POP \
      892*418	/		/					/ mode_err \
      893*
      894*dft_modes
      895*419	/		/ [dft.modes = mode_string]			/ STACK_POP \
      896*
      897*entry_modes
      898*420	/		/ [tte.modes = mode_string]			/ STACK_POP \
      899*
      900*
      901*	\" end statement handler
      902*
      903*finish
      904*421	/ <any-token>	/ ERROR (27)				/ RETURN \
      905*422	/ <no-token>	/					/ RETURN \
      906*
      907*					++*/
      908 
      909 /* format: style4 */
      910 cv_ttf: proc;
      911 
      912 
      913 /* External Entries */
      914 
      915 dcl  com_err_ entry options (variable);
      916 dcl  com_err_$suppress_name entry () options (variable);
      917 dcl  cu_$arg_count entry (fixed bin, fixed bin (35));
      918 dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
      919 dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin);
      920 dcl  cv_oct_check_ entry (char (*), fixed bin (35)) returns (fixed bin);
      921 dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
      922 dcl  expand_pathname_$add_suffix entry (char (*), char (*), char (*), char (*), fixed bin (35));
      923 dcl  get_group_id_ entry returns (char (32));
      924 dcl  get_temp_segments_ entry (char (*), (*) ptr, fixed bin (35));
      925 dcl  get_wdir_ entry returns (char (168));
      926 dcl  hcs_$delentry_seg entry (ptr, fixed bin (35));
      927 dcl  hcs_$make_seg entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
      928 dcl  hcs_$set_bc_seg entry (ptr, fixed bin (24), fixed bin (35));
      929 dcl  hcs_$truncate_seg entry (ptr, fixed bin, fixed bin (35));
      930 dcl  initiate_file_ entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
      931 dcl  ioa_ entry options (variable);
      932 dcl  lex_error_ entry options (variable);
      933 dcl  lex_string_$init_lex_delims entry (char (*), char (*), char (*), char (*), char (*), bit (*), char (*) varying, char (*) varying, char (*) varying, char (*) varying);
      934 dcl  lex_string_$lex entry (ptr, fixed bin (21), fixed bin (21), ptr, bit (*), char (*), char (*), char (*), char (*), char (*), char (*) varying, char (*) varying, char (*) varying, char (*) varying, ptr, ptr, fixed bin (35));
      935 dcl  pathname_ entry (char (*), char (*)) returns (char (168));
      936 dcl  release_temp_segments_ entry (char (*), (*) ptr, fixed bin (35));
      937 dcl  suffixed_name_$new_suffix entry (char (*), char (*), char (*), char (32), fixed bin (35));
      938 dcl  terminate_file_ entry (ptr, fixed bin (24), bit (*), fixed bin (35));
      939 dcl  translator_temp_$get_segment entry (char (*), ptr, fixed bin (35));
      940 dcl  translator_temp_$release_all_segments entry (ptr, fixed bin (35));
      941 
      942 
      943 /* External Static */
      944 
      945 dcl  cv_ttf_severity_ fixed bin (35) ext init (0);
      946 
      947 dcl  dsatm_data_$device_multics_dft ext aligned;
      948 
      949 dcl  (error_table_$badopt,
      950      error_table_$noentry,
      951      error_table_$too_many_args,
      952      error_table_$zero_length_seg,
      953      error_table_$noarg,
      954      error_table_$bad_conversion,
      955      error_table_$translation_failed) fixed bin (35) ext static;
      956 
      957 
      958 /* Internal Static */
      959 
      960 dcl  ALL_CAPS char (26) int static options (constant) init ("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
      961 dcl  ALL_LOWERCASE char (26) int static options (constant) init ("abcdefghijklmnopqrstuvwxyz");
      962 dcl  BS char (1) int static options (constant) init ("");	/* backspace */
      963 dcl  LEGAL_CHARS char (63) int static options (constant) init ("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_");
      964 dcl  NUL_CHAR char (1) int static options (constant) init (" "); /* NUL char (all zero) */
      965 dcl  already_called bit (1) int static init ("0"b);
      966 dcl  breaks char (43) varying int static;
      967 dcl  ctl_chars char (32) varying int static;
      968 dcl  lexctl char (80) varying int static;
      969 dcl  lexdlm char (80) varying int static;
      970 dcl  max_rep_depth fixed bin int static options (constant) init (2);
      971 dcl  prog_name char (6) int static options (constant) init ("cv_ttf");
      972 dcl  translation_failure fixed bin int static options (constant) init (3);
      973 
      974 
      975 /* Automatic */
      976 
      977 dcl  ans_back_table_ptr ptr init (null ());		/* ptr to work area for answerback tables */
      978 dcl  ans_size fixed bin (18);				/* # words in specific answerback table entry */
      979 dcl  ansbck_char_index fixed bin;			/* used in storing parsed answerback entry */
      980 dcl  arg char (argl) based (argp);			/* overlay for input arg */
      981 dcl  argc fixed bin;				/* # input args */
      982 dcl  argl fixed bin;				/* length of specific input arg */
      983 dcl  argp ptr;					/* ptr to specific input arg */
      984 dcl  argx fixed bin;				/* which input arg being processed */
      985 dcl  baud_error_printed bit (1);			/* flag for single output of baud error statement */
      986 dcl  baudx fixed bin;				/* baud table entry index */
      987 dcl  bit_count fixed bin (24);			/* input TTF bit_count */
      988 dcl  bitp ptr init (null ());				/* misc bit string ptr */
      989 dcl  block_ack_set bit (1);				/* flag to denote block ACK used in this type entry */
      990 dcl  cax fixed bin;					/* used in dsatm_device coding (compression index) */
      991 dcl  cex fixed bin;					/* used in dsatm_device coding (character encoding index) */
      992 dcl  cfx fixed bin;					/* used in dsatm_device coding (character font index) */
      993 dcl  check_0nums bit (1);
      994 dcl  code fixed bin (35);				/* general error code */
      995 dcl  count fixed bin;				/* c_chars.count temp counter */
      996 dcl  cps_baud_value fixed bin;			/* equivalent of specified CPS expressed as bps */
      997 dcl  created_table_segment bit (1) aligned;		/* flag to show cv_ttf created output TTT segment */
      998 dcl  cssx fixed bin;				/* used in dsatm_device coding (character subset index) */
      999 dcl  csx fixed bin;					/* used in dsatm_device coding (character set index) */
     1000 dcl  ct_table_offset fixed bin (18);			/* offset to next conversion table entry */
     1001 dcl  cur_delay_value fixed bin;			/* temp value of current delay value being processed */
     1002 dcl  cur_table_name char (32);			/* name of current table being processed */
     1003 dcl  default_count fixed bin;				/* counter for default_types temp entry */
     1004 dcl  defined fixed bin;				/* denotes new table name has entry for it in table_names */
     1005 dcl  delay_error_printed bit (1);			/* flag for single output of delay error statement */
     1006 dcl  delay_stmt bit (1);				/* flag to denote delay statement found */
     1007 dcl  delayx fixed bin;				/* delay table type index */
     1008 dcl  dft_bauds (12) fixed bin;			/* array of baud rates specified in Bauds statement */
     1009 dcl  dft_extended_tables_defined bit (1);		/* denotes have one or more default extended tables defined */
     1010 dcl  dft_extended_tablesp ptr init (null ());		/* ptr to any default extended tables */
     1011 dcl  dirname char (168);				/* directory for input TTF */
     1012 dcl  dppx fixed bin;				/* used in dsatm_device coding */
     1013 dcl  edited (1024) fixed bin;				/* placeholders for output escape sequences */
     1014 dcl  entryx fixed bin;				/* count of entries in conversion/translation table */
     1015 dcl  esc_p ptr init (null ());			/* ptr to special string to store edited/non-edited output escape values in */
     1016 dcl  extended_tables_workp ptr init (null ());		/* ptr to work area for all extended tables */
     1017 dcl  fb35 fixed bin (35);				/* general fixed bin (35) storage value */
     1018 dcl  fkey_table_offset fixed bin (18);			/* offset to start next function key table at */
     1019 dcl  fkey_tables_ptr ptr init (null ());		/* ptr to work area for function key tables */
     1020 dcl  floating_delay_value float bin;			/* general floating value for delay item */
     1021 dcl  got_temps bit (1);				/* flag to show have temp segments */
     1022 dcl  highest fixed bin;
     1023 dcl  i fixed bin;
     1024 dcl  increment fixed bin (18);
     1025 dcl  j fixed bin;
     1026 dcl  length_in_words fixed bin;
     1027 dcl  line_type_str bit (72);
     1028 dcl  max_output_escapes fixed bin;
     1029 dcl  max_values char (2);
     1030 dcl  maxind fixed bin (8);
     1031 dcl  misc_relocs_count fixed bin;
     1032 dcl  misc_relocs_ptr ptr init (null ());		/* ptr to work area for all relocs */
     1033 dcl  misc_tables_ptr ptr init (null ());		/* ptr to work area where will build all misc tables */
     1034 dcl  mode_line_length fixed bin;
     1035 dcl  mode_page_length fixed bin;
     1036 dcl  mode_string char (256) varying;
     1037 dcl  n_answerbacks fixed bin;
     1038 dcl  n_dft_bauds fixed bin;
     1039 dcl  n_fkey_tables fixed bin;
     1040 dcl  n_spec fixed bin;				/* number of delay values specified */
     1041 dcl  n_special_tables fixed bin;
     1042 dcl  n_table_names fixed bin;
     1043 dcl  n_tables fixed bin;
     1044 dcl  name_idx fixed bin;
     1045 dcl  name_to_test_for char (32);			/* translated name to check tables for */
     1046 dcl  new_delay_table_ptr ptr init (null ());
     1047 dcl  next_misc_offset fixed bin (18);
     1048 dcl  next_offset fixed bin (18);
     1049 dcl  nlx fixed bin;
     1050 dcl  not_edited (1024) fixed bin;
     1051 dcl  num_0nums fixed bin;
     1052 dcl  off_sw bit (1);
     1053 dcl  out_sus_set bit (1);
     1054 dcl  p ptr init (null ());
     1055 dcl  pa_type fixed bin;
     1056 dcl  prev_ptr ptr init (null ());
     1057 dcl  rcx fixed bin;
     1058 dcl  real_name char (32);
     1059 dcl  rep_depth fixed bin;
     1060 dcl  rep_error bit (1);
     1061 dcl  rep_factor (2) fixed bin;
     1062 dcl  rep_length fixed bin;
     1063 dcl  rep_start (2) fixed bin;
     1064 dcl  rep_used bit (1);
     1065 dcl  scx fixed bin;
     1066 dcl  seqs_index fixed bin;
     1067 dcl  size_of_ttt fixed bin (18);
     1068 dcl  sourcep ptr init (null ());
     1069 dcl  spec_offset fixed bin (18);
     1070 dcl  special_tables_ptr ptr init (null ());		/* ptr to area where special tables will be built */
     1071 dcl  specialp ptr init (null ());
     1072 dcl  stmtp ptr init (null ());
     1073 dcl  supplied_ename char (32);
     1074 dcl  table_names_ptr ptr init (null ());		/* ptr to work area for names of all tables */
     1075 dcl  table_size fixed bin (18);
     1076 dcl  tables_ptr ptr init (null ());			/* ptr to work area for tables entries */
     1077 dcl  targetp ptr init (null ());
     1078 dcl  temp_dfttp ptr init (null ());			/* ptr to temp copy of dftt with type names */
     1079 dcl  temp_strings_ptr ptr init (null ());		/* ptr to work area for all temp strings */
     1080 dcl  temp_ptr (10) ptr init ((10) null ());
     1081 dcl  temp_ttep ptr init (null ());
     1082 dcl  tempp ptr init (null ());
     1083 dcl  test_value char (8);
     1084 dcl  ttf_ename char (32);
     1085 dcl  ttfp ptr init (null ());
     1086 dcl  ttt_ename char (32);
     1087 dcl  wdir char (168);
     1088 
     1089 dcl  1 dft aligned like tte;				/* for default values */
     1090 
     1091 dcl  1 input_escapes aligned,
     1092        2 len fixed bin (8) unal,
     1093        2 str char (128) unal;
     1094 
     1095 dcl  1 input_results aligned like input_escapes;
     1096 
     1097 
     1098 /* Based */
     1099 
     1100 dcl  based_bit1 bit (1) based;
     1101 dcl  based_fb fixed bin based;
     1102 dcl  based_fb8 fixed bin (8) unal based;
     1103 dcl  based_fb17 fixed bin (17) unal based;
     1104 dcl  based_two_words (2) fixed bin based;
     1105 dcl  exp_string char (2048) based (addr (expanded));
     1106 dcl  fb8_array (count) fixed bin (8) unal based;
     1107 dcl  misc_strings (next_misc_offset) fixed bin based;
     1108 dcl  temp_table (0:255) fixed bin (8) unal based (tablep);
     1109 dcl  unexp_string char (2048) based (addr (unexpanded));
     1110 
     1111 dcl  1 dummy_dftte based aligned like dftt.dftte;		/* for taking "size" of */
     1112 
     1113 dcl  1 escapes (max_output_escapes) aligned based like c_chars;
     1114 
     1115 dcl  1 extended_tables_work aligned based (extended_tables_workp),
     1116        2 seqs char (4096),
     1117        2 table fixed bin (71);			/* put a table here */
     1118 
     1119 dcl  1 table_names (n_table_names) based (table_names_ptr) aligned,
     1120        2 name char (32) unal,
     1121        2 type fixed bin,				/* 1 = conv/trans, 2 = special */
     1122        2 offset fixed bin (18);			/* -1 = undefined */
     1123 
     1124 dcl  misc_relocs (misc_relocs_count) ptr unal based (misc_relocs_ptr);
     1125 
     1126 dcl  1 temp_dftt based (temp_dfttp),			/* temporary copy of dftt, with type names */
     1127        2 dft_count fixed bin,
     1128        2 temp_dftte (0 refer (temp_dftt.dft_count)),
     1129          3 entry like dftt.dftte,
     1130          3 type_name char (32);
     1131 
     1132 dcl  temp_key_index fixed bin;
     1133 dcl  temp_key_infop ptr init (null ());
     1134 
     1135 dcl  1 temp_key_info (0:3) aligned based (temp_key_infop) like key_info;
     1136 
     1137 dcl  1 temp_special_table aligned based (tablep),
     1138        2 nl_seq aligned like c_chars,			/* new-line sequence */
     1139        2 cr_seq aligned like c_chars,			/* carriage-return sequence */
     1140        2 bs_seq aligned like c_chars,			/* backspace sequence */
     1141        2 tab_seq aligned like c_chars,			/* horizontal tab sequence */
     1142        2 vt_seq aligned like c_chars,			/* vertical tab sequence */
     1143        2 ff_seq aligned like c_chars,			/* form-feed sequence */
     1144        2 printer_on aligned like c_chars,		/* printer-on sequence */
     1145        2 printer_off aligned like c_chars,		/* printer_off sequence */
     1146        2 red_ribbon_shift aligned like c_chars,		/* red ribbon shift sequence */
     1147        2 black_ribbon_shift aligned like c_chars,		/* black ribbon shift sequence */
     1148        2 end_of_page aligned like c_chars,		/* end-of-page warning sequence */
     1149 
     1150        2 escape_length fixed bin,			/* number of escape sequences */
     1151        2 not_edited_escapes (sc_escape_len refer (temp_special_table.escape_length)) like c_chars, /* use in ^edited mode */
     1152        2 edited_escapes (sc_escape_len refer (temp_special_table.escape_length)) like c_chars, /* use in edited mode */
     1153 
     1154        2 input_escapes aligned,
     1155          3 len fixed bin (8) unaligned,			/* length of string */
     1156          3 str char (sc_input_escape_len refer (temp_special_table.input_escapes.len)) unaligned, /* escape sequence characters */
     1157        2 input_results aligned,
     1158          3 pad bit (9) unaligned,			/* so that strings will look the same */
     1159          3 str char (sc_input_escape_len refer (temp_special_table.input_escapes.len)) unaligned; /* results of escape sequences */
     1160 
     1161 dcl  1 temp_numeric_encoding unaligned like tty_numeric_encoding automatic;
     1162 
     1163 dcl  1 temp_strings aligned based (temp_strings_ptr),
     1164        2 exp_char_index fixed bin,
     1165        2 unexp_char_index fixed bin,
     1166        2 expanded (2048) fixed bin (8) unal,
     1167        2 unexpanded (2048) fixed bin (8) unal,
     1168        2 rep_item char (2048) varying;
     1169 
     1170 /* Conditions */
     1171 
     1172 dcl  (cleanup, conversion) condition;
     1173 
     1174 
     1175 /* Builtins */
     1176 
     1177 dcl  (addr, addrel, baseno, bin, byte, char, collate, currentsize, dimension, divide, float, hbound, index, lbound,
     1178      length, ltrim, max, mod, null, ptr, rank, rel, rtrim, size, substr, translate, unspec, verify) builtin;
     1179  /* BEGIN INCLUDE FILE ... access_mode_values.incl.pl1
  1     2*
  1     3*   Values for the "access mode" argument so often used in hardcore
  1     4*   James R. Davis 26 Jan 81  MCR 4844
  1     5*   Added constants for SM access 4/28/82 Jay Pattin
  1     6*   Added text strings 03/19/85 Chris Jones
  1     7**/
  1     8 
  1     9 
  1    10 /* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
  1    11 dcl	(
  1    12 	N_ACCESS		   init ("000"b),
  1    13 	R_ACCESS		   init ("100"b),
  1    14 	E_ACCESS		   init ("010"b),
  1    15 	W_ACCESS		   init ("001"b),
  1    16 	RE_ACCESS		   init ("110"b),
  1    17 	REW_ACCESS	   init ("111"b),
  1    18 	RW_ACCESS		   init ("101"b),
  1    19 	S_ACCESS		   init ("100"b),
  1    20 	M_ACCESS		   init ("010"b),
  1    21 	A_ACCESS		   init ("001"b),
  1    22 	SA_ACCESS		   init ("101"b),
  1    23 	SM_ACCESS		   init ("110"b),
  1    24 	SMA_ACCESS	   init ("111"b)
  1    25 	)		   bit (3) internal static options (constant);
  1    26 
  1    27 /* The following arrays are meant to be accessed by doing either 1) bin (bit_value) or
  1    28*   2) divide (bin_value, 2) to come up with an index into the array. */
  1    29 
  1    30 dcl	SEG_ACCESS_MODE_NAMES  (0:7) init ("null", "W", "E", "EW", "R", "RW", "RE", "REW") char (4) internal
  1    31 			   static options (constant);
  1    32 
  1    33 dcl	DIR_ACCESS_MODE_NAMES  (0:7) init ("null", "A", "M", "MA", "S", "SA", "SM", "SMA") char (4) internal
  1    34 			   static options (constant);
  1    35 
  1    36 dcl	(
  1    37 	N_ACCESS_BIN	   init (00000b),
  1    38 	R_ACCESS_BIN	   init (01000b),
  1    39 	E_ACCESS_BIN	   init (00100b),
  1    40 	W_ACCESS_BIN	   init (00010b),
  1    41 	RW_ACCESS_BIN	   init (01010b),
  1    42 	RE_ACCESS_BIN	   init (01100b),
  1    43 	REW_ACCESS_BIN	   init (01110b),
  1    44 	S_ACCESS_BIN	   init (01000b),
  1    45 	M_ACCESS_BIN	   init (00010b),
  1    46 	A_ACCESS_BIN	   init (00001b),
  1    47 	SA_ACCESS_BIN	   init (01001b),
  1    48 	SM_ACCESS_BIN	   init (01010b),
  1    49 	SMA_ACCESS_BIN	   init (01011b)
  1    50 	)		   fixed bin (5) internal static options (constant);
  1    51 
  1    52 /* END INCLUDE FILE ... access_mode_values.incl.pl1 */
     1179 
     1180  /* BEGIN INCLUDE FILE ... author_dcl.incl.pl1 */
  2     2 
  2     3 /* This include file declares the "author" substructure
  2     4*   in a form suitable for using the PL/I "like" attribute.
  2     5*
  2     6*   Written 750304 by PG
  2     7**/
  2     8 
  2     9 dcl 1 author_dcl aligned based,
  3     1 /* BEGIN INCLUDE FILE author.incl.pl1 */
  3     2 
  3     3 /* the "author" items must always be the first ones in the table. The
  3     4*   module which moves the converted table to the System Control process
  3     5*   fills in these data items and assumes them to be at the head of the segment
  3     6*   regardless of the specific table's actual declaration. The variables
  3     7*   "lock" and "last_install_time" used to be "process_id" and "ev_channel"
  3     8*    respectively. For tables installed in multiple processes, these
  3     9*    are to be used to lock out multiple installations. */
  3    10 
  3    11 /*  Lock should be used as a modification lock. Since, in general,
  3    12*    entries may not be moved in system tables, even by installations,
  3    13*    it is sufficient for only installers and programs that change threads
  3    14*    to set or respect the lock. Simply updating data in an entry
  3    15*    requires no such protection.
  3    16*
  3    17*    Last_install_time is used by readers of system tables to detect
  3    18*    installations or other serious modifications. By checking it before
  3    19*    and after copying a block of data, they can be protected against
  3    20*    modifications.
  3    21*
  3    22*    Modules that set the lock should save proc_group_id, and then
  3    23*    put their group id there for the time they hold the lock.
  3    24*    if they do not actually install the, they should restore the group id.
  3    25**/
  3    26 
  3    27     2 author aligned,				/* validation data about table's author */
  3    28       3 proc_group_id char (32),			/* process-group-id  (personid.projectid.tag) */
  3    29       3 lock bit (36),				/* installation lock */
  3    30       3 update_attributes bit (1) unal,			/* update/add/delete attributes */
  3    31       3 update_authorization bit (1) unal,		/* update only authorizations */
  3    32       3 deferral_notified bit (1) unal,			/* installer notified of deferral of installation */
  3    33       3 pad bit (33) unaligned,
  3    34       3 last_install_time fixed bin (71),
  3    35       3 table char (4),				/* name of table, e.g., SAT MGT TTT RTDT PDT etc. */
  3    36       3 w_dir char (64),				/* author's working directory */
  3    37 
  3    38 /* END INCLUDE FILE author.incl.pl1 */
  2    10 
  2    11     2 pad;
  2    12 
  2    13 /* END INCLUDE FILE ... author_dcl.incl.pl1 */
     1180 
     1181  /* BEGIN INCLUDE FILE ... baud_rates.incl.pl1 */
  4     2 
  4     3 /* Defines valid baud rate values for communications channels */
  4     4 
  4     5 /* Created by somebody a long time ago */
  4     6 /* Modified April 1982 by Robert Coren to add speeds above 9600 (up to 72000) */
  4     7 
  4     8 dcl  baud_table (15) fixed bin int static options (constant) init
  4     9      (110, 133, 150, 300, 600, 1200, 1800, 2400, 4800, 7200,
  4    10       9600, 19200, 40800, 50000, 72000);
  4    11 
  4    12 /* END INCLUDE FILE ... baud_rates.incl.pl1 */
     1181 
     1182  /*--------------------BEGIN dsatm_attn_fcn_info.incl.pl1---------------------*/
  5     2 
  5     3 
  5     4 /****^  HISTORY COMMENTS:
  5     5*  1) change(87-07-01,LJAdams), approve(87-07-28,MCR7742),
  5     6*     audit(87-07-23,Gilcrease), install(87-08-04,MR12.1-1056):
  5     7*     Declared ptr orderip within the include file.
  5     8*                                                   END HISTORY COMMENTS */
  5     9 
  5    10 /*****************************************************************************/
  5    11 /*							       */
  5    12 /*   Define the attention functions.				       */
  5    13 /*   There are two types of attention:                                       */
  5    14 /*    	destructive:     the session is recovered.                         */
  5    15 /*	non-destructive: ATTENTION 1 to 9.                                 */
  5    16 /*                                                                           */
  5    17 /*   A new set of attentions replaced the previous one.                      */
  5    18 /*   The attentions can be cancelled as following:                           */
  5    19 /*   - The destructive attention (all the invocations)                       */
  5    20 /*   - The non destructive attentions (all the invocations)                  */
  5    21 /*   - The attention i, and only the invocations specified in the structure. */
  5    22 /*							       */
  5    23 /*   Invocation:                                                             */
  5    24 /*   - An attention may have up to four invocation types.                    */
  5    25 /*   - BREAK KEY : can be mapped on only one attention at the same time.     */
  5    26 /*   - SEC_DIALOG: the attention cannot be invoked directly, but instead via */
  5    27 /*                 the secondary dialogue.                                   */
  5    28 /*                                                                           */
  5    29 /*   Written by Roger Negaret in June 1984.			       */
  5    30 /*****************************************************************************/
  5    31 
  5    32 /* format: style3,dclind5,idind32,insnl,delnl */
  5    33 
  5    34 dcl  orderip                         ptr;
  5    35 
  5    36 dcl  1 attention_fcn_info	       based (orderip) aligned,
  5    37        2 version		       char (8),
  5    38        2 attention_fcn	       like attention_fcn aligned;
  5    39 
  5    40 dcl  attn_fcn_ptr		       ptr;
  5    41 
  5    42 dcl  1 attention_fcn	       based (attn_fcn_ptr) aligned,
  5    43        2 cancelled		       (0:9) bit (1) unal,
  5    44        2 attn		       (0:9),
  5    45          3 invocation,
  5    46 	 4 break		       bit (1) unal,
  5    47 	 4 string		       bit (1) unal,
  5    48 	 4 fcn_key	       bit (1) unal,
  5    49 	 4 sec_dialog	       bit (1) unal,
  5    50          3 string_value	       (4) char (2) unal;	/* up to four invocation strings */
  5    51 
  5    52 /* Attention types */
  5    53 
  5    54 dcl  AT_DESTRUCTIVE		       fixed bin int static options (constant) init (1);
  5    55 dcl  AT_NON_DESTRUCTIVE	       fixed bin int static options (constant) init (2);
  5    56 
  5    57 /* Some attention codes */
  5    58 
  5    59 dcl  AC_ATTD		       fixed bin int static options (constant) init (0);
  5    60 dcl  AC_ATT1		       fixed bin int static options (constant) init (1);
  5    61 dcl  AC_ATT2		       fixed bin int static options (constant) init (2);
  5    62 
  5    63 /* Attention invocations */
  5    64 
  5    65 dcl  AI_STRING		       fixed bin int static options (constant) init (1);
  5    66 dcl  AI_FCN_KEY		       fixed bin int static options (constant) init (2);
  5    67 dcl  AI_BREAK		       fixed bin int static options (constant) init (3);
  5    68 dcl  AI_SEC_DIALOG		       fixed bin int static options (constant) init (4);
  5    69 
  5    70 
  5    71 dcl  ATTENTION_FCN_INFO_V1	       char (8) int static options (constant) init ("ATTFCNV1");
  5    72 
  5    73 /*----------------------END dsatm_attn_fcn_info.incl.pl1---------------------*/
  5    74 
     1182 
     1183  /*  BEGIN:   dsatm_negotiate_info.incl.pl1		  *  *  *  *  *  */
  6     2 
  6     3 /****^  HISTORY COMMENTS:
  6     4*  1) change(84-06-01,Negaret), approve(87-07-23,MCR7742),
  6     5*     audit(87-07-23,GDixon), install(87-08-04,MR12.1-1056):
  6     6*     Created.
  6     7*                                                   END HISTORY COMMENTS */
  6     8 
  6     9 /*^*************************************************************************^*/
  6    10 /*							       */
  6    11 /*   Here are all the information involved in the negotiation phase of a     */
  6    12 /*   connection.   						       */
  6    13 /*   dsatm_neg_info        (Negotiation information) 		       */
  6    14 /*   dsatm_presentation    (Negotiation about the presentation control layer)*/
  6    15 /*   dsatm_station         (Negotiation about the station)                   */
  6    16 /*   dsatm_device          (Negotiation about each device of the station)    */
  6    17 /*   dsatm_network         (Information about the secondary network)         */
  6    18 /*   dsatm_sw_dev_info     (Switch in the device negotiated information)     */
  6    19 /*							       */
  6    20 /*   neg = negotiation, ctl = control, ptcl = protocol		       */
  6    21 /*   dev = device,  rec = record  				       */
  6    22 /*							       */
  6    23 /*   This include uses the following include file:                           */
  6    24 /*                dsatm_attn_fcn_info.incl.pl1                               */
  6    25 /*                                                                           */
  6    26 /*   Written by Roger Negaret in June 1984			       */
  6    27 /*^*************************************************************************^*/
  6    28 
  6    29 /* format: style3,dclind5,idind32,insnl,delnl */
  6    30 
  6    31 /*****************************************************************************/
  6    32 /*							       */
  6    33 /*   describes all the options to be negotiated (input) or already	       */
  6    34 /*   negotiated (output) for a session between the Terminal Manager	       */
  6    35 /*   Correspondent (TMC) and the front-end Terminal Manager (TM).            */
  6    36 /*   Some parameters may be set with several values; the current value       */
  6    37 /*   is the first one in the array of values;  The others can be selected    */
  6    38 /*   during the life of the session by the corresponding switch order;       */
  6    39 /*   (Now, only the switch_logical_device order is implemented).             */
  6    40 /*   The newly selected value becomes current and is put in the first        */
  6    41 /*   position of the array of values, switching its place with the previous  */
  6    42 /*   current value.						       */
  6    43 /*   The default values, for the TM protocol and for Multics are defined in: */
  6    44 /*        o dsatm_data_                                                      */
  6    45 /*        o the TTF for overriding the device negotiation parameters.        */
  6    46 /*****************************************************************************/
  6    47 
  6    48 dcl  dsatm_data_$max_logical_devices fixed bin ext;
  6    49 dcl  dsatm_data_$max_networks	       fixed bin ext;
  6    50 dcl  dsatm_max_logical_devices       fixed bin;
  6    51 dcl  dsatm_max_networks	       fixed bin;
  6    52 
  6    53 /* dsatm_neg_info: all the information for the negotiation of a TM session */
  6    54 
  6    55 dcl  dsatmnip		       ptr;
  6    56 
  6    57 dcl  1 dsatm_neg_info	       based (dsatmnip) aligned,
  6    58        2 version		       char (8),
  6    59        2 tws_session	       bit (1),
  6    60        2 max_letter_size	       fixed bin (16) uns aligned,
  6    61        2 presentation	       like dsatm_presentation aligned,
  6    62        2 station		       like dsatm_station aligned,
  6    63        2 n_networks		       fixed bin,		/* number of networks */
  6    64        2 device		       (dsatm_max_logical_devices refer (dsatm_neg_info.station.n_devices))
  6    65 			       like dsatm_device aligned,
  6    66 						/* the actual number of devices is in */
  6    67 						/* station.n_devices.                 */
  6    68        2 network		       (dsatm_max_networks refer (dsatm_neg_info.n_networks)) like dsatm_network aligned;
  6    69 
  6    70 
  6    71 /* dsatm_presentation: presentation layer information */
  6    72 
  6    73 dcl  dsatmprep		       ptr;
  6    74 
  6    75 dcl  1 dsatm_presentation	       based (dsatmprep) aligned,
  6    76        2 pc_level,					/* presentation_control protocol level */
  6    77          3 ptcl_level	       bit (8) unal,
  6    78          3 pl_rejected	       bit (1) unal,
  6    79        2 dfd,					/* data_format_description */
  6    80          3 char_encoding	       (8) fixed bin,
  6    81          3 char_set		       (14) fixed bin,
  6    82          3 char_subset	       (4) fixed bin,
  6    83          3 nat_lang		       (4) fixed bin,
  6    84          3 compression	       (4) fixed bin,
  6    85          3 max_rec_size	       fixed bin (16) uns,
  6    86          3 repetitive_parm_nb,			/* number of current values      */
  6    87 						/* for each repetitive parameter */
  6    88 	 4 ce_nb		       fixed bin,
  6    89 	 4 cs_nb		       fixed bin,
  6    90 	 4 css_nb		       fixed bin,
  6    91 	 4 nl_nb		       fixed bin,
  6    92 	 4 ca_nb		       fixed bin,
  6    93          3 parm_rejected,
  6    94 	 4 ce_rejected	       bit (1) unal,
  6    95 	 4 cs_rejected	       bit (1) unal,
  6    96 	 4 css_rejected	       bit (1) unal,
  6    97 	 4 nl_rejected	       bit (1) unal,
  6    98 	 4 ca_rejected	       bit (1) unal,
  6    99 	 4 mrs_rejected	       bit (1) unal,
  6   100        2 ptcl_id,					/* protocol_id */
  6   101          3 ptcl_name	       fixed bin,
  6   102          3 ptcl_level	       bit (8) unal,
  6   103          3 tm_version	       fixed bin,
  6   104          3 pid_rejected	       bit (1) unal,
  6   105        2 init_corr,					/* initial correspondent */
  6   106          3 string		       char (32) var;
  6   107 
  6   108 /* dsatm_station: information shared by all the logical devices */
  6   109 /* of the terminal station.                                     */
  6   110 
  6   111 dcl  dsatmstap		       ptr;
  6   112 
  6   113 dcl  1 dsatm_station	       based (dsatmstap) aligned,
  6   114        2 init_accept_confg	       fixed bin,
  6   115        2 ctl_ptcl		       (4) fixed bin,
  6   116        2 options,
  6   117          3 sec_net_reconnection      bit (1) unal,
  6   118          3 remote_form_storage       bit (1) unal,
  6   119          3 badge_reader_option       bit (1) unal,
  6   120          3 renegotiation	       bit (1) unal,
  6   121          3 reserved		       bit (4) unal,
  6   122        2 n_devices		       fixed bin (16) uns,
  6   123        2 dev_id_for_data_att	       fixed bin (16) uns,
  6   124        2 max_sec_net_dis_time	       fixed bin (16) uns,
  6   125        2 repetitive_parm_nb,
  6   126          3 cp_nb		       fixed bin,
  6   127        2 parm_rejected,
  6   128          3 cp_rejected	       bit (1) unal,
  6   129          3 opt_rejected	       bit (1) unal,
  6   130          3 ndev_rejected	       bit (1) unal;
  6   131 
  6   132 /* dsatm_device: information specific to a logical device of the station */
  6   133 
  6   134 dcl  dsatmdevp		       ptr;
  6   135 
  6   136 dcl  1 dsatm_device		       based (dsatmdevp) aligned,
  6   137        2 init_accept_confg	       fixed bin,
  6   138        2 dpp		       (4) fixed bin,
  6   139        2 sdp_dpp,					/* sdp protocol */
  6   140          3 version		       fixed bin,
  6   141          3 sdp_class	       (4) fixed bin,
  6   142        2 real_dpp,					/* real protocol */
  6   143          3 version		       fixed bin,
  6   144          3 real_class	       (16) fixed bin,
  6   145          3 real_model	       char (12) var,
  6   146        2 trans_dpp,					/* transparent protocol */
  6   147          3 version		       fixed bin,
  6   148        2 dev_id		       fixed bin (16) uns,
  6   149        2 dev_type		       fixed bin,
  6   150        2 attribute,
  6   151          3 shareability	       fixed bin,
  6   152          3 alloc_unit	       bit (8),
  6   153        2 line_length	       fixed bin (8) uns,
  6   154        2 page_length	       fixed bin (8) uns,
  6   155        2 line_overflow	       fixed bin,
  6   156        2 page_overflow	       fixed bin,
  6   157        2 char_encoding	       (8) fixed bin,
  6   158        2 char_set		       (14) fixed bin,
  6   159        2 char_subset	       (4) fixed bin,
  6   160        2 nat_lang		       (4) fixed bin,
  6   161        2 compression	       (4) fixed bin,
  6   162        2 char_font		       (6) fixed bin,
  6   163        2 terminal_type	       char (12) var,
  6   164        2 ete_ack_level	       fixed bin,
  6   165        2 max_rec_size	       fixed bin (16) uns,
  6   166        2 attentions		       like attention_fcn aligned,
  6   167        2 stc_available	       bit (1),
  6   168        2 repetitive_parm_nb,
  6   169          3 dpp_nb		       fixed bin,
  6   170          3 sc_nb		       fixed bin,
  6   171          3 rc_nb		       fixed bin,
  6   172          3 ce_nb		       fixed bin,
  6   173          3 cs_nb		       fixed bin,
  6   174          3 css_nb		       fixed bin,
  6   175          3 cf_nb		       fixed bin,
  6   176          3 nl_nb		       fixed bin,
  6   177          3 ca_nb		       fixed bin,
  6   178        2 parm_rejected,
  6   179          3 dpp_rejected	       bit (1) unal,
  6   180          3 attr_rejected	       bit (1) unal,
  6   181          3 ce_rejected	       bit (1) unal,
  6   182          3 cs_rejected	       bit (1) unal,
  6   183          3 css_rejected	       bit (1) unal,
  6   184          3 cf_rejected	       bit (1) unal,
  6   185          3 nl_rejected	       bit (1) unal,
  6   186          3 ca_rejected	       bit (1) unal,
  6   187          3 mrs_rejected	       bit (1) unal;
  6   188 
  6   189 
  6   190 /* dsatm_network: addressing information to establish a session */
  6   191 /* through the secondary network.                               */
  6   192 
  6   193 dcl  dsatmnetp		       ptr;
  6   194 
  6   195 dcl  1 dsatm_network	       based (dsatmnetp) aligned,
  6   196        2 sec_link_ptcl	       fixed bin,
  6   197        2 na_nb		       fixed bin,
  6   198        2 na_rejected	       bit (1) unal,
  6   199        2 net_addr		       (4),		/* in the order of the networks */
  6   200          3 net_type		       fixed bin,
  6   201          3 addr_str		       char (32) var,
  6   202        2 add_info		       char (32) var;	/* additional info network specific */
  6   203 
  6   204 
  6   205 
  6   206 dcl  DSATM_NEG_INFO_V1	       char (8) int static options (constant) init ("TMNI_V1");
  6   207 
  6   208 /* dsatm_sw_dev_info: give the current or new value of the switchable  */
  6   209 /* parameters for a given logical device.                              */
  6   210 
  6   211 dcl  dsatmsdip		       ptr;
  6   212 
  6   213 dcl  1 dsatm_sw_dev_info	       based (dsatmsdip) aligned,
  6   214        2 version		       char (8),
  6   215        2 set,
  6   216          3 dpp		       bit (1) unal,
  6   217          3 ce		       bit (1) unal,
  6   218          3 cs		       bit (1) unal,
  6   219          3 css		       bit (1) unal,
  6   220          3 cf		       bit (1) unal,
  6   221          3 nl		       bit (1) unal,
  6   222          3 ca		       bit (1) unal,
  6   223        2 value,
  6   224          3 dpp		       fixed bin,
  6   225          3 sdp_dpp,
  6   226 	 4 version	       fixed bin,
  6   227 	 4 sdp_class	       fixed bin,
  6   228          3 real_dpp,
  6   229 	 4 version	       fixed bin,
  6   230 	 4 real_class	       fixed bin,
  6   231 	 4 real_model	       char (12) var,
  6   232          3 trans_dpp,
  6   233 	 4 version	       fixed bin,
  6   234          3 dev_id		       fixed bin (16) uns,
  6   235          3 char_encoding	       fixed bin,
  6   236          3 char_set		       fixed bin,
  6   237          3 char_subset	       fixed bin,
  6   238          3 char_font	       fixed bin,
  6   239          3 nat_lang		       fixed bin,
  6   240          3 compression	       fixed bin;
  6   241 
  6   242 
  6   243 dcl  DSATM_SW_DEV_INFO_V1	       char (8) int static init ("TMSDI_V1");
  6   244 
  6   245 
  6   246 /* presentation control level */
  6   247 
  6   248 dcl  PC_LEVEL_DSA300	       bit (8) int static options (constant) init ("00000001"b);
  6   249 
  6   250 /* character encoding: indexes in arrays, names array, values array */
  6   251 
  6   252 dcl  CE_ISO_7BITS		       fixed bin int static options (constant) init (1);
  6   253 dcl  CE_ISO_8BITS		       fixed bin int static options (constant) init (2);
  6   254 dcl  CE_EBCDIC		       fixed bin int static options (constant) init (3);
  6   255 dcl  CE_TELETEX		       fixed bin int static options (constant) init (4);
  6   256 dcl  CE_BINARY_8BITS	       fixed bin int static options (constant) init (5);
  6   257 
  6   258 dcl  CE_NAME		       (0:8) char (12) int static options (constant)
  6   259 			       init ("UNDEFINED", "ISO_7BITS", "ISO_8BITS", "EBCDIC", "TELETEX", "BINARY_8BITS",
  6   260 			       (3) (""));
  6   261 
  6   262 dcl  CE_VALUE		       (0:8) fixed bin (8) uns int static options (constant)
  6   263 			       init (0, 1, 2, 3, 4, 5, (3) (0));
  6   264 
  6   265 /* character set: indexes in arrays, names array, values array */
  6   266 
  6   267 dcl  CS_ISO		       fixed bin int static options (constant) init (1);
  6   268 dcl  CS_ASCII		       fixed bin int static options (constant) init (2);
  6   269 dcl  CS_UK		       fixed bin int static options (constant) init (3);
  6   270 dcl  CS_NORWEGIAN_DANISH	       fixed bin int static options (constant) init (4);
  6   271 dcl  CS_SWEDISH_FINISH	       fixed bin int static options (constant) init (5);
  6   272 dcl  CS_PORTUGUESE		       fixed bin int static options (constant) init (6);
  6   273 dcl  CS_FRENCH		       fixed bin int static options (constant) init (7);
  6   274 dcl  CS_GREEK		       fixed bin int static options (constant) init (8);
  6   275 dcl  CS_SPANISH		       fixed bin int static options (constant) init (9);
  6   276 dcl  CS_GERMAN		       fixed bin int static options (constant) init (10);
  6   277 dcl  CS_PSEUDO_GRAPHIC	       fixed bin int static options (constant) init (11);
  6   278 
  6   279 dcl  CS_NAME		       (0:14) char (16) int static options (constant)
  6   280 			       init ("UNDEFINED", "ISO", "ASCII", "UK", "NORWEGIAN_DANISH", "SWEDISH_FINISH",
  6   281 			       "PORTUGUESE", "FRENCH", "GREEK", "SPANISH", "GERMAN", "PSEUDO_GRAPHIC", (3) (""));
  6   282 
  6   283 dcl  CS_VALUE		       (0:14) bit (8) int static options (constant)
  6   284 			       init ("00000000"b, "01000000"b /* 4/0  */, "01000010"b /* 4/2  */,
  6   285 			       "01000001"b /* 4/1  */, "01000011"b /* 4/3  */, "01001000"b /* 4/8  */,
  6   286 			       "01001100"b /* 4/12 */, "01010010"b /* 5/2  */, "01010101"b /* 5/5  */,
  6   287 			       "01011010"b /* 5/10 */, "01011011"b /* 5/11 */, "00110001"b /* 3/1  */,
  6   288 			       (3) ("00000000"b));
  6   289 
  6   290 /* character subset: indexes in arrays, names array, values array */
  6   291 
  6   292 dcl  CSS_UPPER_CASE		       fixed bin int static options (constant) init (1);
  6   293 dcl  CSS_UPPER_LOWER_CASE	       fixed bin int static options (constant) init (2);
  6   294 
  6   295 dcl  CSS_NAME		       (0:4) char (16) int static options (constant)
  6   296 			       init ("UNDEFINED", "UPPER_CASE", "UPPER_LOWER_CASE", (2) (""));
  6   297 
  6   298 dcl  CSS_VALUE		       (0:4) fixed bin (8) uns int static options (constant) init (0, 1, 2, (2) (0));
  6   299 
  6   300 /* national language: indexes in arrays, names array, values array */
  6   301 /* FFS */
  6   302 
  6   303 dcl  NL_FFS		       fixed bin int static options (constant) init (1);
  6   304 
  6   305 dcl  NL_NAME		       (0:4) char (9) int static options (constant) init ("UNDEFINED", "FFS", (3) (""));
  6   306 
  6   307 dcl  NL_VALUE		       (0:4) fixed bin (8) uns int static options (constant) init (0, 1, (3) (0));
  6   308 
  6   309 /* compression algorithm: indexes in arrays, names array, values array */
  6   310 
  6   311 dcl  CA_NO_COMPRESSION	       fixed bin int static options (constant) init (1);
  6   312 
  6   313 dcl  CA_NAME		       (0:4) char (16) int static options (constant)
  6   314 			       init ("NO_COMPRESSION", "NO_COMPRESSION", (3) (""));
  6   315 
  6   316 dcl  CA_VALUE		       (0:4) fixed bin (8) uns int static options (constant) init (0, 0, (3) (0));
  6   317 
  6   318 /* protocol id */
  6   319 
  6   320 /* protocol name */
  6   321 dcl  PN_TM		       fixed bin int static options (constant) init (1);
  6   322 dcl  PN_NAME		       (0:1) char (9) int static options (constant) init ("UNDEFINED", "TM");
  6   323 dcl  PN_VALUE		       (0:1) fixed bin (8) uns int static options (constant) init (0, 128);
  6   324 
  6   325 /* protocol level */
  6   326 dcl  TM_LEVEL_DSA300	       bit (8) int static options (constant) init ("00000001"b);
  6   327 
  6   328 /* protocol version */
  6   329 dcl  PV_TM_NO_STC		       fixed bin int static options (constant) init (1);
  6   330 dcl  PV_TM_FULL_STC		       fixed bin int static options (constant) init (2);
  6   331 dcl  PV_NAME		       (0:2) char (12) int static options (constant)
  6   332 			       init ("UNDEFINED", "TM_NO_STC", "TM_FULL_STC");
  6   333 dcl  PV_VALUE		       (0:2) fixed bin int static options (constant) init (0, 1, 2);
  6   334 
  6   335 
  6   336 /* initiator/acceptor: indexes in arrays, names array, values array */
  6   337 
  6   338 dcl  IA_INITIATOR		       fixed bin int static options (constant) init (1);
  6   339 dcl  IA_ACCEPTOR		       fixed bin int static options (constant) init (2);
  6   340 
  6   341 dcl  IA_NAME		       (0:2) char (12) int static options (constant)
  6   342 			       init ("UNDEFINED", "INITIATOR", "ACCEPTOR");
  6   343 dcl  IA_VALUE		       (0:2) fixed bin (8) uns int static options (constant) init (0, 1, 2);
  6   344 
  6   345 
  6   346 /* control protocol: indexes in arrays, names array, values array */
  6   347 
  6   348 dcl  CP_STANDARD		       fixed bin int static options (constant) init (1);
  6   349 dcl  CP_NO_CONTROL		       fixed bin int static options (constant) init (2);
  6   350 
  6   351 dcl  CP_NAME		       (0:4) char (12) int static options (constant)
  6   352 			       init ("NO_CONTROL", "STANDARD", "NO_CONTROL", (2) (""));
  6   353 
  6   354 dcl  CP_VALUE		       (0:4) bit (8) int static options (constant)
  6   355 			       init ("00000000"b, "10000000"b, "00000000"b, (2) ("00000000"b));
  6   356 
  6   357 /* data presentation protocol: indexes in arrays, names array, values array */
  6   358 
  6   359 dcl  DPP_SDP		       fixed bin int static options (constant) init (1);
  6   360 dcl  DPP_REAL		       fixed bin int static options (constant) init (2);
  6   361 dcl  DPP_TRANSPARENT	       fixed bin int static options (constant) init (3);
  6   362 
  6   363 dcl  DPP_NAME		       (0:4) char (12) int static options (constant)
  6   364 			       init ("UNDEFINED", "SDP", "REAL", "TRANSPARENT", (""));
  6   365 
  6   366 dcl  DPP_VALUE		       (0:4) fixed bin (8) uns int static options (constant) init (0, 1, 2, 3, 0);
  6   367 
  6   368 /* sdp class: indexes in arrays, names array, values array */
  6   369 
  6   370 dcl  SC_MANDATORY		       fixed bin int static options (constant) init (1);
  6   371 
  6   372 dcl  SC_NAME		       (0:4) char (12) int static options (constant)
  6   373 			       init ("UNDEFINED", "MANDATORY", (3) (""));
  6   374 
  6   375 dcl  SC_VALUE		       (0:4) fixed bin (8) uns int static options (constant) init (0, 128, (3) (0));
  6   376 
  6   377 
  6   378 /* real class: indexes in arrays, names array, values array */
  6   379 
  6   380 dcl  RC_UNDEFINED		       fixed bin int static options (constant) init (0);
  6   381 dcl  RC_VIP77XX		       fixed bin int static options (constant) init (1);
  6   382 dcl  RC_VIP78XX		       fixed bin int static options (constant) init (2);
  6   383 dcl  RC_327X		       fixed bin int static options (constant) init (3);
  6   384 dcl  RC_TTY		       fixed bin int static options (constant) init (4);
  6   385 dcl  RC_BATCH_RCI		       fixed bin int static options (constant) init (5);
  6   386 dcl  RC_TMMVU		       fixed bin int static options (constant) init (6);
  6   387 dcl  RC_2780		       fixed bin int static options (constant) init (7);
  6   388 dcl  RC_UNSPECIFIED		       fixed bin int static options (constant) init (8);
  6   389 dcl  RC_TMMRB		       fixed bin int static options (constant) init (9);
  6   390 dcl  RC_2780_3780_RJE	       fixed bin int static options (constant) init (10);
  6   391 
  6   392 dcl  RC_NAME		       (0:16) char (16) int static options (constant)
  6   393 			       init ("UNDEFINED", "VIP77XX", "VIP78XX", "327X", "TTY", "BATCH_RCI", "TMMVU", "2780",
  6   394 			       "UNSPECIFIED", "TMMRB", "2780_3780_RJE", (6) (""));
  6   395 
  6   396 dcl  RC_VALUE		       (0:16) fixed bin (8) uns int static options (constant)
  6   397 			       init (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, (6) (0));
  6   398 
  6   399 /* device types: indexes in arrays, names array, values array */
  6   400 
  6   401 dcl  DT_UNDEFINED		       fixed bin int static options (constant) init (0);
  6   402 dcl  DT_DISPLAY		       fixed bin int static options (constant) init (1);
  6   403 dcl  DT_KEYBOARD		       fixed bin int static options (constant) init (2);
  6   404 dcl  DT_RO_PRINTER		       fixed bin int static options (constant) init (3);
  6   405 dcl  DT_KEYBOARD_PRINTER	       fixed bin int static options (constant) init (4);
  6   406 dcl  DT_KEYBOARD_DISPLAY	       fixed bin int static options (constant) init (5);
  6   407 dcl  DT_CARD_READER		       fixed bin int static options (constant) init (6);
  6   408 dcl  DT_PAPER_TAPE_READER	       fixed bin int static options (constant) init (7);
  6   409 dcl  DT_BADGE_READER	       fixed bin int static options (constant) init (8);
  6   410 dcl  DT_RFE		       fixed bin int static options (constant) init (9);
  6   411 dcl  DT_CASSETTE		       fixed bin int static options (constant) init (10);
  6   412 dcl  DT_DISKETTE		       fixed bin int static options (constant) init (11);
  6   413 dcl  DT_CARD_PUNCH		       fixed bin int static options (constant) init (12);
  6   414 dcl  DT_PAPER_TAPE_PUNCH	       fixed bin int static options (constant) init (13);
  6   415 
  6   416 
  6   417 dcl  DT_NAME		       (0:16) char (20) int static options (constant)
  6   418 			       init ("UNDEFINED", "DISPLAY", "KEYBOARD", "RO_PRINTER", "KEYBOARD_PRINTER",
  6   419 			       "KEYBOARD_DISPLAY", "CARD_READER", "PAPER_TAPE_READER", "BADGE_READER", "RFE",
  6   420 			       "CASSETTE", "DISKETTE", "CARD_PUNCH", "PAPER_TAPE_PUNCH", (3) (""));
  6   421 
  6   422 dcl  DT_VALUE		       (0:16) fixed bin (8) uns int static options (constant)
  6   423 			       init (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, (3) (0));
  6   424 
  6   425 /* device resource attributes: indexes in arrays, names array, values array */
  6   426 
  6   427 dcl  SH_DEDICATED		       fixed bin int static options (constant) init (1);
  6   428 dcl  SH_DEDICATED_OR_SHAREABLE       fixed bin int static options (constant) init (2);
  6   429 dcl  SH_EXCLUSIVELY_SHAREABLE	       fixed bin int static options (constant) init (3);
  6   430 
  6   431 dcl  SH_NAME		       (0:4) char (24) int static options (constant)
  6   432 			       init ("UNDEFINED", "DEDICATED", "DEDICATED_OR_SHAREABLE", "EXCLUSIVELY_SHAREABLE",
  6   433 			       "");
  6   434 
  6   435 dcl  SH_VALUE		       (0:4) bit (2) int static options (constant) init ("00"b, "01"b, "10"b, "11"b, "00"b);
  6   436 
  6   437 
  6   438 dcl  AU_END_OF_RECORD	       fixed bin int static options (constant) init (1);
  6   439 dcl  AU_END_OF_QUARANTINE_UNIT       fixed bin int static options (constant) init (2);
  6   440 dcl  AU_END_OF_INTERACTION_UNIT      fixed bin int static options (constant) init (3);
  6   441 dcl  AU_END_OF_SESSION	       fixed bin int static options (constant) init (4);
  6   442 dcl  AU_REPORT_UNIT		       fixed bin int static options (constant) init (5);
  6   443 dcl  AU_ACKNOWLEDGMENT_UNIT	       fixed bin int static options (constant) init (6);
  6   444 dcl  AU_USER_DEFINED_UNIT	       fixed bin int static options (constant) init (7);
  6   445 dcl  AU_RFU		       fixed bin int static options (constant) init (8);
  6   446 
  6   447 dcl  AU_NAME		       (0:8) char (16) int static options (constant)
  6   448 			       init ("UNDEFINED", "RECORD", "QUARANTINE_UNIT", "INTERACTION_UNIT", "SESSION",
  6   449 			       "RFU_REPORT_UNIT", "RFU_ACK_UNIT", "RFU_USER", "RFU");
  6   450 
  6   451 dcl  AU_VALUE		       (0:8) bit (8) int static options (constant)
  6   452 			       init ("00000000"b, "10000000"b, "01000000"b, "00100000"b, "00010000"b, "00001000"b,
  6   453 			       "00000100"b, "00000010"b, "00000001"b);
  6   454 
  6   455 /* line overflow condition: indexes in arrays, names array, values array */
  6   456 
  6   457 dcl  LO_TRUNCATION		       fixed bin int static options (constant) init (1);
  6   458 dcl  LO_FOLDING		       fixed bin int static options (constant) init (2);
  6   459 dcl  LO_NO_FOLDING		       fixed bin int static options (constant) init (3);
  6   460 
  6   461 dcl  LO_NAME		       (0:3) char (12) int static options (constant)
  6   462 			       init ("TRUNCATION", "TRUNCATION", "FOLDING", "NO_FOLDING");
  6   463 
  6   464 dcl  LO_VALUE		       (0:3) fixed bin (8) uns int static options (constant) init (0, 0, 1, 2);
  6   465 
  6   466 /* page overflow condition: indexes in arrays, names array, values array */
  6   467 
  6   468 dcl  PO_TRUNCATION		       fixed bin int static options (constant) init (1);
  6   469 dcl  PO_CLEAR		       fixed bin int static options (constant) init (2);
  6   470 dcl  PO_SCROLL		       fixed bin int static options (constant) init (3);
  6   471 dcl  PO_NO_PAGING		       fixed bin int static options (constant) init (4);
  6   472 
  6   473 dcl  PO_NAME		       (0:4) char (12) int static options (constant)
  6   474 			       init ("TRUNCATION", "TRUNCATION", "CLEAR", "SCROLL", "NO_PAGING");
  6   475 
  6   476 dcl  PO_VALUE		       (0:4) fixed bin (8) uns int static options (constant) init (0, 0, 1, 2, 3);
  6   477 
  6   478 /* character font: indexes in arrays, names array, values array */
  6   479 
  6   480 dcl  CF_ANY		       fixed bin int static options (constant) init (1);
  6   481 dcl  CF_ITALICS		       fixed bin int static options (constant) init (2);
  6   482 dcl  CF_ELITE		       fixed bin int static options (constant) init (3);
  6   483 dcl  CF_PICA		       fixed bin int static options (constant) init (4);
  6   484 
  6   485 dcl  CF_NAME		       (0:6) char (9) int static options (constant)
  6   486 			       init ("UNDEFINED", "ANY", "ITALICS", "ELITE", "PICA", (2) (""));
  6   487 
  6   488 dcl  CF_VALUE		       (0:6) fixed bin (8) uns int static options (constant) init (0, 1, 2, 3, 4, (2) (0));
  6   489 
  6   490 /* end_to_end acknowledgment support: indexes in arrays, names array, */
  6   491 /*                                    values array.                   */
  6   492 
  6   493 dcl  EAL_IO_TM		       fixed bin int static options (constant) init (1);
  6   494 dcl  EAL_DATA_ACK		       fixed bin int static options (constant) init (2);
  6   495 dcl  EAL_FCN_COMPLETE	       fixed bin int static options (constant) init (3);
  6   496 dcl  EAL_RFU		       fixed bin int static options (constant) init (4);
  6   497 
  6   498 dcl  EAL_NAME		       (0:4) char (12) int static options (constant)
  6   499 			       init ("IO_TM", "IO_TM", "DATA_ACK", "FCN_COMPLETE", "RFU");
  6   500 
  6   501 dcl  EAL_VALUE		       (0:4) fixed bin (16) uns int static options (constant) init (0, 0, 1, 2, 3);
  6   502 
  6   503 /* Secondary Link Protocol */
  6   504 
  6   505 dcl  SLP_ASYNCHRONOUS	       fixed bin int static options (constant) init (1);
  6   506 dcl  SLP_VIP_MULTIPOINT	       fixed bin int static options (constant) init (2);
  6   507 dcl  SLP_TMMVU_MULTIPOINT	       fixed bin int static options (constant) init (3);
  6   508 dcl  SLP_TMMRB_MULTIPOINT	       fixed bin int static options (constant) init (4);
  6   509 dcl  SLP_BSC_MULTIPOINT	       fixed bin int static options (constant) init (5);
  6   510 dcl  SLP_BSC_POINT_TO_POINT	       fixed bin int static options (constant) init (6);
  6   511 dcl  SLP_RCI_POINT_TO_POINT	       fixed bin int static options (constant) init (7);
  6   512 dcl  SLP_HDLC_MULTIPOINT	       fixed bin int static options (constant) init (8);
  6   513 dcl  SLP_HDLC_POINT_TO_POINT	       fixed bin int static options (constant) init (9);
  6   514 
  6   515 dcl  SLP_NAME		       (0:12) char (20) int static options (constant)
  6   516 			       init ("UNDEFINED", "ASYNCHRONOUS", "VIP_MULTIPOINT", "TMMVU_MULTIPOINT",
  6   517 			       "TMMRB_MULTIPOINT", "BSC_MULTIPOINT", "BSC_POINT_TO_POINT", "RCI_POINT_TO_POINT",
  6   518 			       "HDLC_MULTIPOINT", "HDLC_POINT_TO_POINT", (3) (""));
  6   519 
  6   520 dcl  SLP_VALUE		       (0:12) fixed bin (8) uns int static options (constant)
  6   521 			       init (0, 1, 2, 3, 4, 5, 6, 7, 10, 11, (3) (0));
  6   522 
  6   523 /* Type of Network */
  6   524 
  6   525 dcl  NT_SWITCHED		       fixed bin int static options (constant) init (1);
  6   526 dcl  NT_X21		       fixed bin int static options (constant) init (2);
  6   527 dcl  NT_X25		       fixed bin int static options (constant) init (3);
  6   528 
  6   529 dcl  NT_NAME		       (0:4) char (9) int static options (constant)
  6   530 			       init ("UNDEFINED", "SWITCHED", "X21", "X25", "");
  6   531 
  6   532 dcl  NT_VALUE		       (0:4) fixed bin (8) uns int static options (constant) init (0, 1, 2, 3, 0);
  6   533 
  6   534 /* miscellaneous */
  6   535 
  6   536 dcl  TM_OFFER		       fixed bin int static options (constant) init (1);
  6   537 dcl  TM_ACCEPT		       fixed bin int static options (constant) init (2);
  6   538 dcl  TM_REJECT		       fixed bin int static options (constant) init (3);
  6   539 dcl  TM_SWITCH		       fixed bin int static options (constant) init (4);
  6   540 
  6   541 /*  END OF:  dsatm_negotiate_info.incl.pl1		  *  *  *  *  *  */
     1183 
     1184  /* BEGIN INCLUDE FILE dsatm_tty_modes.incl.pl1                               */
  7     2 
  7     3 /*^*************************************************************************^*/
  7     4 /*							       */
  7     5 /*   Defines all the TTY boolean modes supported on a DSA network.	       */
  7     6 /*   Some of them have more than one name:  the old tty name, and a new      */
  7     7 /*   name more appropriate to the function it is supplying in DSA.           */
  7     8 /*							       */
  7     9 /*   Written by Roger Negaret in December 1984.			       */
  7    10 /*^*************************************************************************^*/
  7    11 
  7    12 /****^  HISTORY COMMENTS:
  7    13*  1) change(87-02-02,Negaret), approve(), audit(), install():
  7    14*     the mode "ln0_on_input" has been renamed "line_count".
  7    15*  2) change(87-07-13,LJAdams), approve(87-07-13,MCR7742),
  7    16*     audit(87-07-23,Gilcrease), install(87-08-04,MR12.1-1056):
  7    17*     Declared pointer infop upon which structure tty_modes_string is based.
  7    18*     Declared DSA_modestr defined TTY_BOOLEAN_MODE_DSA_NAME to use in cv_ttf.
  7    19*  3) change(88-07-05,Parisek), approve(88-07-05,MCR7928),
  7    20*     audit(88-07-08,Beattie), install(88-07-19,MR12.2-1061):
  7    21*     Changed declaration of DSA_modestr to use the "simple defining" technique
  7    22*     thus fixing compilation errors resulting from the use of the "isub"
  7    23*     value within a "isub defining" technique (defining techniques as
  7    24*     described in Multics PL/I Reference Manual - AM83).
  7    25*                                                   END HISTORY COMMENTS */
  7    26 
  7    27 /* format: style3,dclind5,idind32,insnl,ll79,comcol38 */
  7    28 
  7    29 /* format: off */
  7    30 
  7    31 dcl N_TTY_BOOLEAN_MODES fixed bin int static options (constant) init (26);
  7    32 
  7    33 /* Names of the modes:                                           */
  7    34 /* The slots <= 0 correspond to MCS modes without effect in DSA. */
  7    35 
  7    36 dcl TTY_BOOLEAN_MODE_MCS_NAME (-4:26) char (8) int static options (constant) init
  7    37                (/*** MCS modes without effect */
  7    38                "fulldpx",  "replay",   "prefixnl", "wake_tbl", "oddp",
  7    39                /*** Modes supported */
  7    40                "edited",   "tabs",     "can",      "esc",      "erkl",
  7    41                "rawi",     "rawo",     "red",      "vertsp",   "crecho",
  7    42                "lfecho",   "tabecho",  "hndlquit", "echoplex", "capo", 
  7    43                "polite",   "ctl_char", "blk_xfer", "breakall", "scroll",
  7    44 	     "iflow",    "oflow",    "8bit",     "no_outp",  "sdialog",
  7    45 	     "fep_edit");
  7    46 
  7    47 dcl TTY_BOOLEAN_MODE_DSA_NAME (26) char (12) int static options (constant) init (
  7    48 
  7    49                "edited",   "tabs",     "can",      "esc",      "erkl",
  7    50                "rawi",     "rawo",     "red",      "vertsp",   "crecho",
  7    51                "lfecho",   "tabecho",  "hndlquit", "echoplex", "capo", 
  7    52                "polite",   "ctl_char", "blk_xfer", "screen",   "line_count",
  7    53                "iflow",    "oflow",    "i8bit",    "o8bit",    "sdialog",
  7    54 	     "fep_edit");
  7    55 
  7    56 dcl  DSA_modestr (1:26) character (12) unaligned defined (TTY_BOOLEAN_MODE_DSA_NAME);
  7    57 
  7    58 /* if ON this mode needs the STC ability to be implemented */
  7    59 
  7    60 dcl  TTY_BOOLEAN_MODE_NEED_STC (26) bit (1) int static options (constant) init
  7    61                ("0"b,      "0"b,      "1"b,      "1"b,      "1"b,
  7    62                 "1"b,      "1"b,      "0"b,      "0"b,      "1"b,  
  7    63                 "1"b,      "1"b,      "1"b,      "1"b,      "0"b, 
  7    64                 "1"b,      "0"b,      "1"b,      "1"b,      "1"b,
  7    65                 "1"b,      "1"b,      "1"b,      "1"b,      "1"b,
  7    66 	      "1"b);
  7    67 /* format: on */
  7    68 
  7    69 /* list of modes in a structure.     */
  7    70 /* In comment, the index of the mode */
  7    71 
  7    72 dcl  1 tty_boolean_modes	       based aligned,
  7    73        2 edited		       bit (1) unal /*  1 */,
  7    74        2 tabs		       bit (1) unal /*  2 */,
  7    75        2 can		       bit (1) unal /*  3 */,
  7    76        2 esc		       bit (1) unal /*  4 */,
  7    77        2 erkl		       bit (1) unal /*  5 */,
  7    78        2 rawi		       bit (1) unal /*  6 */,
  7    79        2 rawo		       bit (1) unal /*  7 */,
  7    80        2 red		       bit (1) unal /*  8 */,
  7    81        2 vertsp		       bit (1) unal /*  9 */,
  7    82        2 crecho		       bit (1) unal /* 10 */,
  7    83        2 lfecho		       bit (1) unal /* 11 */,
  7    84        2 tabecho		       bit (1) unal /* 12 */,
  7    85        2 hndlquit		       bit (1) unal /* 13 */,
  7    86        2 echoplex		       bit (1) unal /* 14 */,
  7    87        2 capo		       bit (1) unal /* 15 */,
  7    88        2 polite		       bit (1) unal /* 16 */,
  7    89        2 ctl_char		       bit (1) unal /* 17 */,
  7    90        2 blk_xfer		       bit (1) unal /* 18 */,
  7    91        2 screen		       bit (1) unal /* 19 */,
  7    92        2 line_count		       bit (1) unal /* 20 */,
  7    93        2 iflow		       bit (1) unal /* 21 */,
  7    94        2 oflow		       bit (1) unal /* 22 */,
  7    95        2 i8bit		       bit (1) unal /* 23 */,
  7    96        2 o8bit		       bit (1) unal /* 24 */,
  7    97        2 sdialog		       bit (1) unal /* 25 */,
  7    98        2 fep_edit		       bit (1) unal /* 26 */,
  7    99        2 pad2		       bit (10) unal /* 27-36 */;
  7   100 
  7   101 /* User structure to set or get the modes */
  7   102 
  7   103 dcl  infop                           ptr;
  7   104 
  7   105 dcl  1 tty_modes_string	       based (infop),
  7   106        2 len		       fixed bin,
  7   107        2 str		       char (512);
  7   108 
  7   109 /* more modes */
  7   110 
  7   111 dcl  TTY_MORE_MODE		       (2) char (8) aligned int static
  7   112 			       options (constant)
  7   113 			       init ("clear", "scroll");
  7   114 
  7   115 dcl  TMM_CLEAR		       fixed bin int static
  7   116 			       options (constant) init (1);
  7   117 dcl  TMM_SCROLL		       fixed bin int static
  7   118 			       options (constant) init (2);
  7   119 
  7   120 /* Canonicalization types */
  7   121 
  7   122 dcl  TTY_CANON_TYPE		       (2) char (10) aligned int static
  7   123 			       options (constant)
  7   124 			       init ("overstrike", "replace");
  7   125 
  7   126 dcl  TCT_OVERSTRIKE		       fixed bin int static
  7   127 			       options (constant) init (1);
  7   128 dcl  TCT_REPLACE		       fixed bin int static
  7   129 			       options (constant) init (2);
  7   130 
  7   131 
  7   132 /* END INCLUDE FILE dsatm_tty_modes.incl.pl1                                 */
     1184 
     1185  /* BEGIN INCLUDE FILE ... function_key_data.incl.pl1 
  8     2*
  8     3*   This include file defines the structure used for ttt_info_$function_key_data
  8     4*   MCR 4671      James R. Davis Sept 80
  8     5**/
  8     6 
  8     7 dcl 1 function_key_data aligned based (function_key_data_ptr),
  8     8       2 version fixed bin,
  8     9       2 highest fixed bin,				/* highest fkey */
  8    10       2 sequence,					/* string of all seqs. */
  8    11         3 seq_ptr pointer,
  8    12         3 seq_len fixed bin (21),
  8    13       2 cursor_motion_keys,
  8    14         3 home (0:3) like key_info,
  8    15         3 left (0:3) like key_info,
  8    16         3 up (0:3) like key_info,
  8    17         3 right (0:3) like key_info,
  8    18         3 down (0:3) like key_info,
  8    19       2 function_keys (0:function_key_data_highest refer
  8    20 	(function_key_data.highest), 0:3) like key_info;
  8    21 
  8    22 dcl (KEY_PLAIN init (0),
  8    23      KEY_SHIFT init (1),
  8    24      KEY_CTRL init (2),
  8    25      KEY_CTRL_AND_SHIFT init (3)
  8    26      ) fixed bin internal static options (constant);
  8    27 
  8    28 dcl 1 key_info unaligned based (key_info_ptr),
  8    29       2 sequence_index fixed bin (12) unsigned unaligned,
  8    30       2 sequence_length fixed bin (6) unsigned unaligned;	/* 0 -> not exist */
  8    31 
  8    32 dcl function_key_seqs char (function_key_data.sequence.seq_len)
  8    33 	based (function_key_data.sequence.seq_ptr);
  8    34 dcl function_key_data_ptr ptr;
  8    35 dcl function_key_data_highest fixed bin;
  8    36 dcl function_key_data_version_1
  8    37 	fixed bin internal static options (constant) init (1);
  8    38 dcl key_info_ptr ptr;
  8    39 
  8    40 
  8    41 /* END INCLUDE FILE ... function_key_data.incl.pl1 */
     1185 
     1186  /* BEGIN INCLUDE FILE ... line_types.incl.pl1  */
  9     2 
  9     3 /* Written  November 10 1975 by Paul Green */
  9     4 /* Modified October 1978 by Larry Johnson to include line_type_names */
  9     5 /* Modified 12/19/78 by J. Stern to add POLLED_VIP line type */
  9     6 /* Modified 9/27/79 by J. Stern to add X25LAP line type */
  9     7 /* Modified Spring 1981 by Charles Hornig to add HDLC line type */
  9     8 /* Modified May 1981 by Robert Coren to add COLTS line type */
  9     9 /* Modified September 1984 by Robert Coren to correctly count VIP as a synchronous line type */
  9    10 
  9    11 
  9    12 /****^  HISTORY COMMENTS:
  9    13*  1) change(86-02-25,Negaret), approve(87-07-13,MCR7679),
  9    14*     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1056):
  9    15*     Add a DSA line type.
  9    16*  2) change(87-03-17,Beattie), approve(87-07-13,MCR7656),
  9    17*     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1056):
  9    18*     Add HASP_OPR to identify HASP workstation consoles with login service.
  9    19*                                                   END HISTORY COMMENTS */
  9    20 
  9    21 
  9    22 declare   (LINE_MC            initial (-2),
  9    23        	 LINE_TELNET	initial (-1),
  9    24            LINE_UNKNOWN       initial (0),
  9    25 	 LINE_ASCII	initial (1),
  9    26 	 LINE_1050	initial (2),
  9    27 	 LINE_2741	initial (3),
  9    28 	 LINE_ARDS	initial (4),
  9    29 	 LINE_SYNCH	initial (5),
  9    30 	 LINE_G115	initial (6),
  9    31 	 LINE_BSC		initial (7),
  9    32 	 LINE_ETX		initial (8),
  9    33 	 LINE_VIP		initial (9),
  9    34 	 LINE_ASYNC1	initial (10),
  9    35 	 LINE_ASYNC2	initial (11),
  9    36 	 LINE_ASYNC3	initial (12),
  9    37 	 LINE_SYNC1	initial (13),
  9    38 	 LINE_SYNC2	initial (14),
  9    39 	 LINE_SYNC3	initial (15),
  9    40 	 LINE_POLLED_VIP	initial (16),
  9    41 	 LINE_X25LAP	initial (17),
  9    42 	 LINE_HDLC	initial (18),
  9    43 	 LINE_COLTS	initial (19),
  9    44 	 LINE_DSA           initial (20),
  9    45 	 LINE_HASP_OPR	initial (21)
  9    46 	) fixed bin internal static options (constant);
  9    47 
  9    48 dcl  max_line_type fixed bin int static options (constant) init (21);
  9    49 
  9    50 declare  n_sync_line_types fixed bin int static options (constant) init (10);
  9    51 
  9    52 declare  sync_line_type (10) fixed bin int static options (constant) init (5, 6, 7, 9, 13, 14, 15, 16, 17, 18);
  9    53 
  9    54 dcl  line_types (-2:21) char (16) int static options (constant) init (
  9    55      "MC",                                                  /* -2 */
  9    56      "TELNET",					/* -1 */
  9    57      "none",					/* 0 */
  9    58      "ASCII",					/* 1 */
  9    59      "1050",					/* 2 */
  9    60      "2741",					/* 3 */
  9    61      "ARDS",					/* 4 */
  9    62      "Sync",					/* 5 */
  9    63      "G115",					/* 6 */
  9    64      "BSC",					/* 7 */
  9    65      "202ETX",					/* 8 */
  9    66      "VIP",					/* 9 */
  9    67      "ASYNC1",					/* 10 */
  9    68      "ASYNC2",					/* 11 */
  9    69      "ASYNC3",					/* 12 */
  9    70      "SYNC1",					/* 13 */
  9    71      "SYNC2",					/* 14 */
  9    72      "SYNC3",					/* 15 */
  9    73      "POLLED_VIP",					/* 16 */
  9    74      "X25LAP",					/* 17 */
  9    75      "HDLC",					/* 18 */
  9    76      "COLTS",					/* 19 */
  9    77      "DSA",					/* 20 */
  9    78      "HASP_OPR");					/* 21 */
  9    79 
  9    80 /* END INCLUDE FILE ... line_types.incl.pl1  */
     1186 
     1187  /* BEGIN INCLUDE FILE ... term_type_protocols.incl.pl1 */
 10     2 
 10     3 
 10     4 /****^  HISTORY COMMENTS:
 10     5*  1) change(87-03-09,LJAdams), approve(87-04-03,MCR7646),
 10     6*     audit(87-05-05,Gilcrease), install(87-05-14,MR12.1-1029):
 10     7*     Created
 10     8*  2) change(87-05-20,LJAdams), approve(87-05-20,MCR7699),
 10     9*     audit(87-06-30,RBarstad), install(87-08-04,MR12.1-1056):
 10    10*     Added support for MOWSE_FANSI protocol.
 10    11*  3) change(87-06-15,LJAdams), approve(87-06-15,MCR7699),
 10    12*     audit(87-06-30,RBarstad), install(87-08-04,MR12.1-1056):
 10    13*     Changed name to term_type_protocols.incl.pl1 from
 10    14*     terminal_type_protocols.incl.pl1 which was too long.
 10    15*                                                   END HISTORY COMMENTS */
 10    16 
 10    17 dcl  NO_PROTOCOL fixed bin int static options (constant) init (0);
 10    18 dcl  MOWSE_PROTOCOL fixed bin int static options (constant) init (1);
 10    19 dcl  MOWSE_FANSI_PROTOCOL fixed bin int static options (constant) init (2);
 10    20 
 10    21 dcl  protocol_names (0:2) char (32) int static options (constant) init (
 10    22      "",               /* 0 */
 10    23      "MOWSE",          /* 1 */
 10    24      "MOWSE_FANSI");   /* 2 */
 10    25 
 10    26 dcl  protocol_values (0:2) fixed bin int static options (constant) init (
 10    27      0,                /* No Protocol */
 10    28      1,                /* MOWSE       */
 10    29      2);               /* MOWSE_FANSI */
 10    30 
 10    31 /* END INCLUDE FILE ... term_type_protocols.incl.pl1 */
     1187 
     1188  /* BEGIN INCLUDE FILE ... terminate_file.incl.pl1 */
 11     2 /* format: style2,^inddcls,idind32 */
 11     3 
 11     4 declare 1 terminate_file_switches	based,
 11     5 	2 truncate		bit (1) unaligned,
 11     6 	2 set_bc			bit (1) unaligned,
 11     7 	2 terminate		bit (1) unaligned,
 11     8 	2 force_write		bit (1) unaligned,
 11     9 	2 delete			bit (1) unaligned;
 11    10 
 11    11 declare TERM_FILE_TRUNC		bit (1) internal static options (constant) initial ("1"b);
 11    12 declare TERM_FILE_BC		bit (2) internal static options (constant) initial ("01"b);
 11    13 declare TERM_FILE_TRUNC_BC		bit (2) internal static options (constant) initial ("11"b);
 11    14 declare TERM_FILE_TERM		bit (3) internal static options (constant) initial ("001"b);
 11    15 declare TERM_FILE_TRUNC_BC_TERM	bit (3) internal static options (constant) initial ("111"b);
 11    16 declare TERM_FILE_FORCE_WRITE		bit (4) internal static options (constant) initial ("0001"b);
 11    17 declare TERM_FILE_DELETE		bit (5) internal static options (constant) initial ("00001"b);
 11    18 
 11    19 /* END INCLUDE FILE ... terminate_file.incl.pl1 */
     1188 
     1189  /*  BEGIN:   ttt.incl.pl1				  *  *  *  *  *  */
 12     2 
 12     3 /* This include file describes the terminal type table (TTT) and
 12     4*   the various subtables it contains. */
 12     5 
 12     6 
 12     7 /****^  HISTORY COMMENTS:
 12     8*  1) change(77-05-18,RCoren), approve(), audit(), install():
 12     9*     Created
 12    10*     Modified 5/29/81 by Suzanne Krupp to make TTT_version = 2,
 12    11*        to change ttt and tte structures to include function key info
 12    12*  2) change(84-12-17,Negaret), approve(87-07-28,MCR7742),
 12    13*     audit(87-07-23,Gilcrease), install(87-08-04,MR12.1-1056):
 12    14*     Add the dsatm_device table.
 12    15*  3) change(87-03-05,LJAdams), approve(87-03-05,MCR7646),
 12    16*     audit(87-05-05,Gilcrease), install(87-05-08,MR12.1-1029):
 12    17*     Add the protocol field to the terminal type entry table.  Change
 12    18*     TTT_version to TTT_version_3.
 12    19*  4) change(87-06-26,LJAdams), approve(87-07-09,MCR7742),
 12    20*     audit(87-07-23,Gilcrease), install(87-08-04,MR12.1-1056):
 12    21*     Changed constant value for extended_tables_ntables from 2 to 3 in order to
 12    22*     accommodate addition of DSA table.
 12    23*  5) change(88-01-22,Brunelle), approve(88-01-22,MCR7813),
 12    24*     audit(88-10-05,Blair), install(88-10-17,MR12.2-1171):
 12    25*     1. Extend special character definition to 15 chars instead of three.
 12    26*     2. add comment field to tte.
 12    27*                                                   END HISTORY COMMENTS */
 12    28 
 12    29 
 12    30 dcl  TTT_version_4 fixed bin int static options (constant) init (4);
 12    31 
 12    32 dcl  tttp ptr;
 12    33 
 12    34 dcl 1 ttt aligned based (tttp),
 12    35       2 author like author_dcl.author,
 12    36       2 version fixed bin,
 12    37       2 n_tt_entries fixed bin,
 12    38       2 n_tables fixed bin,
 12    39       2 n_special_tables fixed bin,
 12    40       2 n_fkey_tables fixed bin,
 12    41       2 fkey_offset fixed bin(18),
 12    42       2 default_type_offset fixed bin (18),
 12    43       2 answerback_offset fixed bin (18),
 12    44       2 total_ttt_size fixed bin (18),
 12    45       2 type_map fixed bin,			/* index of type implied by MAP command */
 12    46       2 type_963 fixed bin,			/* likewise for 963 command */
 12    47       2 type_029 fixed bin,			/* likewise for 029 command */
 12    48       2 highest_coded_type fixed bin,		/* highest value used so far for coded_type */
 12    49 					/* start entries on 8-word boundary */
 12    50       2 tt_entries (0 refer (ttt.n_tt_entries)) like tte,
 12    51       2 tables (0 refer (ttt.n_tables)) like table_entry, /* conversion and translation tables */
 12    52       2 rest_of_ttt (1) fixed bin;		/* placeholder for special_tables, function_key_tables,
 12    53*					*  delay tables, initial strings,
 12    54*					*  additional_info strings, default_types table,
 12    55*					*  answerback table */
 12    56 
 12    57 dcl  ttep ptr;
 12    58 
 12    59 dcl 1 tte based (ttep) aligned,		/* terminal type entry */
 12    60       2 name char (32) unal,
 12    61       2 modes char (256),
 12    62       2 initial_string,
 12    63         3 offset fixed bin (18),
 12    64         3 length fixed bin,
 12    65       2 additional_info,
 12    66         3 offset fixed bin (18),
 12    67         3 length fixed bin,
 12    68       2 comment,
 12    69         3 offset fixed bin (18),
 12    70         3 length fixed bin,
 12    71       2 tables,
 12    72         3 input_translation_rp fixed bin (18),	/* offset of input translation table */
 12    73         3 output_translation_rp fixed bin (18),	/*   "     " output      "      "    */
 12    74         3 input_conversion_rp fixed bin (18),	/*   "     " input conversion   "    */
 12    75         3 output_conversion_rp fixed bin (18),	/*   "     " output      "      "    */
 12    76         3 special_rp fixed bin (18),		/*   "     " special_chars table */
 12    77         3 fkey_rp fixed bin(18),
 12    78         3 delay_rp fixed bin (18),		/* offset of array of delay tables */
 12    79       2 line_types bit (72),			/* terminal type is possible only if corresponding line_type bit is on */
 12    80       2 editing_chars aligned,
 12    81         3 erase char (1) unal,
 12    82         3 kill char (1) unal,
 12    83         3 framing_chars unal,
 12    84           4 frame_begin char (1) unal,
 12    85           4 frame_end char (1) unal,
 12    86       2 flags aligned,
 12    87         3 keyboard_addressing bit (1) unal,
 12    88         3 print_preaccess_message bit (1) unal,
 12    89         3 conditional_printer_off bit (1) unal,
 12    90         3 input_timeout bit (1) unal,
 12    91         3 output_block_acknowledge bit (1) unal,
 12    92         3 pad bit (31) unal,
 12    93       2 old_type fixed bin,
 12    94       2 like_type fixed bin,			/* index of entry which this one is "like" */
 12    95       2 like_flags unal,			/* only meaningful if like_type is non-0 */
 12    96         3 bauds_overridden bit (1),
 12    97         3 delay_overridden (6) bit (1),		/* one for each kind of delay statement */
 12    98         3 pad bit (11) unal,
 12    99       2 line_delimiter char (1) unal,		/* default line delimiter, untanslated */
 12   100       2 pad1 bit (9) unal,
 12   101       2 coded_type fixed bin,			/* used for storing type values in PDT & PNT */
 12   102       2 flow_control_chars unal,
 12   103         3 input_suspend char (1),
 12   104         3 input_resume char (1),
 12   105         3 output_suspend_etb char (1),
 12   106         3 output_resume_ack char (1),
 12   107       2 output_buffer_size fixed bin,
 12   108       2 extended_tables_rp fixed bin (18),	/* rel pointer to extended_tables */
 12   109       2 protocol fixed bin;                       /* 0=NONE    1=MOWSE */
 12   110                                                   /* 2=MOWSE_FANSI     */
 12   111 
 12   112 dcl  extended_tablesp ptr;
 12   113 
 12   114 dcl 1 extended_tables aligned based (extended_tablesp),
 12   115       2 ntables fixed bin,
 12   116       2 tables_rp (extended_tables_ntables refer (extended_tables.ntables)) fixed bin (18);
 12   117 
 12   118 dcl (VIDEO_RP init (1),			/* indexes in tables_rp */
 12   119      FUNCTION_KEY_RP init (2),
 12   120      DSATM_DEVICE_RP init (3)) fixed bin int static options (constant);
 12   121 
 12   122 dcl  extended_tables_ntables fixed bin int static options (constant) init (3);
 12   123 
 12   124 
 12   125 dcl  dfttp ptr;
 12   126 
 12   127 dcl 1 dftt based (dfttp) aligned,		/* default_types table */
 12   128       2 dft_count fixed bin,
 12   129       2 dftte (0 refer (dftt.dft_count)),
 12   130         3 baud fixed bin,
 12   131         3 line_type fixed bin,
 12   132         3 term_type_index fixed bin;
 12   133 
 12   134 
 12   135 dcl  tablep ptr;
 12   136 
 12   137 dcl 1 table_entry aligned based (tablep),
 12   138       2 name char (32) unal,
 12   139       2 type fixed bin,			/* 1 = conversion, 2 = translation */
 12   140       2 table like cv_trans_struc;
 12   141 
 12   142 
 12   143 dcl 1 special_table aligned based,
 12   144       2 name char (32) unal,
 12   145       2 type fixed bin,
 12   146       2 table,
 12   147         3 version fixed bin,
 12   148         3 default fixed bin,				/* non-zero indicates use default */
 12   149         3 special_chars,				/* same as level-1 above */
 12   150 						/* has to be spelled out instead of using like */
 12   151 						/* because of refer options */
 12   152           4 nl_seq aligned like c_chars,			/* new-line sequence */
 12   153           4 cr_seq aligned like c_chars,			/* carriage-return sequence */
 12   154           4 bs_seq aligned like c_chars,			/* backspace sequence */
 12   155           4 tab_seq aligned like c_chars,			/* horizontal tab sequence */
 12   156           4 vt_seq aligned like c_chars,			/* vertical tab sequence */
 12   157           4 ff_seq aligned like c_chars,			/* form-feed sequence */
 12   158           4 printer_on aligned like c_chars,		/* printer-on sequence */
 12   159           4 printer_off aligned like c_chars,		/* printer_off sequence */
 12   160           4 red_ribbon_shift aligned like c_chars,		/* red ribbon shift sequence */
 12   161           4 black_ribbon_shift aligned like c_chars,		/* black ribbon shift sequence */
 12   162           4 end_of_page aligned like c_chars,		/* end-of-page warning sequence */
 12   163 
 12   164           4 escape_length fixed bin,			/* number of escape sequences */
 12   165           4 not_edited_escapes (sc_escape_len refer (special_table.escape_length)) like c_chars, /* use in ^edited mode */
 12   166           4 edited_escapes (sc_escape_len refer (special_table.escape_length)) like c_chars, /* use in edited mode */
 12   167 
 12   168           4 input_escapes aligned,
 12   169             5 len fixed bin (8) unaligned,			/* length of string */
 12   170             5 str char (sc_input_escape_len refer (special_table.input_escapes.len)) unaligned, /* escape sequence characters */
 12   171           4 input_results aligned,
 12   172             5 pad bit (9) unaligned,			/* so that strings will look the same */
 12   173             5 str char (sc_input_escape_len refer (special_table.input_escapes.len)) unaligned; /* results of escape sequences */
 12   174 
 12   175 dcl fkey_tablep ptr;
 12   176 
 12   177 dcl 1 fkey_table aligned based (fkey_tablep),
 12   178       2 name char(32) unal,
 12   179       2 fkey_data aligned,
 12   180         3 version fixed bin,
 12   181         3 highest fixed bin,
 12   182         3 sequence,					/* string of all seqs*/
 12   183           4 seq_offset fixed bin(18),			/* offset in ttt of sequence */
 12   184 	4 pad bit(36),				/* pad makes overlay of function_key_data struct possible */
 12   185 	4 seq_len fixed bin(21),
 12   186         3 cursor_motion_keys,
 12   187           4 home (0:3) like template,
 12   188 	4 left (0:3) like template,
 12   189 	4 up (0:3) like template,
 12   190 	4 right (0:3) like template,
 12   191 	4 down (0:3) like template,
 12   192         3 function_keys (0:function_key_data_highest refer(fkey_table.highest), 0:3) like template;
 12   193 
 12   194 dcl template_ptr ptr;
 12   195 
 12   196 dcl 1 template unaligned based(template_ptr),
 12   197       2 sequence_index fixed bin(12) unsigned unaligned,
 12   198       2 sequence_length fixed bin(6) unsigned unaligned;
 12   199 
 12   200 dcl  delay_tablep ptr;
 12   201 
 12   202 dcl 1 delay_table based (delay_tablep) aligned,
 12   203       2 n_bauds fixed bin,
 12   204       2 delay_array (0 refer (delay_table.n_bauds)),
 12   205         3 baud_rate fixed bin,
 12   206         3 version fixed bin,
 12   207         3 mbz fixed bin,
 12   208         3 delays (6) fixed bin;
 12   209 
 12   210 
 12   211 dcl  answerback_entry_ptr ptr;
 12   212 dcl  answerback_length fixed bin;		/* automatic copy of length of char string */
 12   213 
 12   214 dcl 1 answerback_entry based (answerback_entry_ptr) aligned,
 12   215       2 next fixed bin (18),			/* offset of next answerback table entry */
 12   216       2 term_type_index fixed bin,
 12   217       2 def_string,
 12   218         3 length fixed bin,
 12   219         3 chars (answerback_length refer (answerback_entry.length)) char (1) unal;
 12   220 
 12   221 dcl  CONV_TYPE fixed bin int static options (constant) init (1);
 12   222 dcl  TRANS_TYPE fixed bin int static options (constant) init (2);
 12   223 dcl  SPEC_TYPE fixed bin int static options (constant) init (3);
 12   224 dcl  FKEY_TYPE fixed bin int static options (constant) init (4);
 12   225 
 12   226 dcl  table_types (4) char (12) int static options (constant) init
 12   227 		("conversion", "translation", "special", "function_key");
 12   228 
 12   229 dcl  pa_name (3) char (3) int static options (constant) init
 12   230 		("MAP", "963", "029");
 12   231 
 13     1 /*	BEGIN INCLUDE FILE ... tty_convert.incl.pl1	*/
 13     2 
 13     3 /* tty_ conversion tables */
 13     4 /* Created 11/3/75 by Robert S. Coren */
 13     5 /* Info structures added 5/19/77 by Robert S. Coren */
 13     6 /* Length of cv_trans changed from 128 to 256 05/03/78 by Robert Coren */
 13     7 /* conversion table mnemonics added JRDavis 21 Aug 80 */
 13     8 /* fix special_chars_struc to have good refers Fri 13 Feb 81 JRDavis */
 13     9 
 13    10 
 13    11 /****^  HISTORY COMMENTS:
 13    12*  1) change(85-12-01,Negaret), approve(87-07-23,MCR7742),
 13    13*     audit(87-07-23,GDixon), install(87-08-04,MR12.1-1056):
 13    14*      Added INPUT_CONVERT_DSA_CR_PROCESSING constant.
 13    15*  2) change(88-01-22,Brunelle), approve(88-01-22,MCR7813),
 13    16*     audit(88-10-05,Blair), install(88-10-17,MR12.2-1171):
 13    17*     Expand c_chars definition from 3 chars to 15.  Change SPECIAL_VERSION
 13    18*     from 1 to 2.  Add version variable to get_special_info_struc and define
 13    19*     SPECIAL_INFO_STRUCT_VERSION_1.
 13    20*                                                   END HISTORY COMMENTS */
 13    21 
 13    22 
 13    23 /* format: style2,linecom,^indnoniterdo,indcomtxt,^inditerdo,dclind5,idind25 */
 13    24 
 13    25 
 13    26      dcl	1 special_chars	     aligned based,		/* table of special character sequences */
 13    27 	  2 nl_seq	     aligned like c_chars,	/* new-line sequence */
 13    28 	  2 cr_seq	     aligned like c_chars,	/* carriage-return sequence */
 13    29 	  2 bs_seq	     aligned like c_chars,	/* backspace sequence */
 13    30 	  2 tab_seq	     aligned like c_chars,	/* horizontal tab sequence */
 13    31 	  2 vt_seq	     aligned like c_chars,	/* vertical tab sequence */
 13    32 	  2 ff_seq	     aligned like c_chars,	/* form-feed sequence */
 13    33 	  2 printer_on	     aligned like c_chars,	/* printer-on sequence */
 13    34 	  2 printer_off	     aligned like c_chars,	/* printer_off sequence */
 13    35 	  2 red_ribbon_shift     aligned like c_chars,	/* red ribbon shift sequence */
 13    36 	  2 black_ribbon_shift   aligned like c_chars,	/* black ribbon shift sequence */
 13    37 	  2 end_of_page	     aligned like c_chars,	/* end-of-page warning sequence */
 13    38 	  2 escape_length	     fixed bin,		/* number of escape sequences */
 13    39 	  2 not_edited_escapes   (sc_escape_len refer (special_chars.escape_length)) like c_chars,
 13    40 						/* use in ^edited mode */
 13    41 	  2 edited_escapes	     (sc_escape_len refer (special_chars.escape_length)) like c_chars,
 13    42 						/* use in edited mode */
 13    43 	  2 input_escapes	     aligned,
 13    44 	    3 len		     fixed bin (8) unaligned, /* length of string */
 13    45 	    3 str		     char (sc_input_escape_len refer (special_chars.input_escapes.len)) unaligned,
 13    46 						/* escape sequence characters */
 13    47 	  2 input_results	     aligned,
 13    48 	    3 pad		     bit (9) unaligned,	/* so that strings will look the same */
 13    49 	    3 str		     char (sc_input_escape_len refer (special_chars.input_escapes.len)) unaligned;
 13    50 						/* results of escape sequences */
 13    51 
 13    52 
 13    53      dcl	c_chars_ptr	     ptr;
 13    54      dcl	1 c_chars		     based (c_chars_ptr) aligned,
 13    55 	  2 count		     fixed bin (8) unaligned,
 13    56 	  2 chars		     (15) char (1) unaligned;
 13    57 
 13    58      dcl	sc_escape_len	     fixed bin;		/* count of output escapes to allocate in special_chars  */
 13    59      dcl	sc_input_escape_len	     fixed bin;		/* count of input escapes to allocate in special_chars  */
 13    60 
 13    61 
 13    62      dcl	1 cv_trans	     based aligned,		/* conversion/translation table format */
 13    63 	  2 value		     (0:255) fixed bin (8) unal;
 13    64 
 13    65 
 13    66      dcl	1 delay		     based aligned,		/* delay counts for output */
 13    67 	  2 vert_nl	     fixed bin,
 13    68 	  2 horz_nl	     float bin,
 13    69 	  2 const_tab	     fixed bin,
 13    70 	  2 var_tab	     float bin,
 13    71 	  2 backspace	     fixed bin,
 13    72 	  2 vt_ff		     fixed bin;
 13    73 
 13    74 /* info structures used with orders */
 13    75 
 13    76      dcl	1 special_chars_struc    aligned based,
 13    77 	  2 version	     fixed bin,
 13    78 	  2 default	     fixed bin,		/* non-zero indicates use default */
 13    79 	  2 special_chars,				/* same as level-1 above */
 13    80 						/* has to be spelled out instead of using like */
 13    81 						/* because of refer options */
 13    82 	    3 nl_seq	     aligned like c_chars,	/* new-line sequence */
 13    83 	    3 cr_seq	     aligned like c_chars,	/* carriage-return sequence */
 13    84 	    3 bs_seq	     aligned like c_chars,	/* backspace sequence */
 13    85 	    3 tab_seq	     aligned like c_chars,	/* horizontal tab sequence */
 13    86 	    3 vt_seq	     aligned like c_chars,	/* vertical tab sequence */
 13    87 	    3 ff_seq	     aligned like c_chars,	/* form-feed sequence */
 13    88 	    3 printer_on	     aligned like c_chars,	/* printer-on sequence */
 13    89 	    3 printer_off	     aligned like c_chars,	/* printer_off sequence */
 13    90 	    3 red_ribbon_shift   aligned like c_chars,	/* red ribbon shift sequence */
 13    91 	    3 black_ribbon_shift aligned like c_chars,	/* black ribbon shift sequence */
 13    92 	    3 end_of_page	     aligned like c_chars,	/* end-of-page warning sequence */
 13    93 	    3 escape_length	     fixed bin,		/* number of escape sequences */
 13    94 	    3 not_edited_escapes (sc_escape_len refer (special_chars_struc.escape_length)) like c_chars,
 13    95 						/* use in ^edited mode */
 13    96 	    3 edited_escapes     (sc_escape_len refer (special_chars_struc.escape_length)) like c_chars,
 13    97 						/* use in edited mode */
 13    98 	    3 input_escapes	     aligned,
 13    99 	      4 len	     fixed bin (8) unaligned, /* length of string */
 13   100 	      4 str	     char (sc_input_escape_len refer (special_chars_struc.input_escapes.len)) unaligned,
 13   101 						/* escape sequence characters */
 13   102 	    3 input_results	     aligned,
 13   103 	      4 pad	     bit (9) unaligned,	/* so that strings will look the same */
 13   104 	      4 str	     char (sc_input_escape_len refer (special_chars_struc.input_escapes.len)) unaligned;
 13   105 						/* results of escape sequences */
 13   106 
 13   107      dcl	1 cv_trans_struc	     aligned based,		/* all conversion/translation tables */
 13   108 	  2 version	     fixed bin,
 13   109 	  2 default	     fixed bin,		/* as above */
 13   110 	  2 cv_trans	     like cv_trans;
 13   111 
 13   112      dcl	1 delay_struc	     aligned based,
 13   113 	  2 version	     fixed bin,
 13   114 	  2 default	     fixed bin,		/* as above */
 13   115 	  2 delay		     like delay;
 13   116 
 13   117      dcl	1 get_special_info_struc based aligned,		/* get_special order */
 13   118 	  2 version	     char (8),
 13   119 	  2 area_ptr	     pointer,
 13   120 	  2 table_ptr	     pointer;
 13   121 
 13   122      dcl	SPECIAL_INFO_STRUCT_VERSION_1
 13   123 			     char (8) int static options (constant) init ("sisv1000");
 13   124      dcl	SPECIAL_VERSION	     fixed bin int static options (constant) init (1);
 13   125      dcl	SPECIAL_VERSION_2	     fixed bin int static options (constant) init (2);
 13   126      dcl	DELAY_VERSION	     fixed bin int static options (constant) init (1);
 13   127      dcl	CV_TRANS_VERSION	     fixed bin int static options (constant) init (2);
 13   128 
 13   129      dcl	CV_TRANS_SIZE	     (2) fixed bin int static options (constant) init (127, 255);
 13   130 						/* indexed by version number */
 13   131 
 13   132 
 13   133 /* values for input and output conversion tables */
 13   134 
 13   135      dcl	(
 13   136 	INPUT_CONVERT_ORDINARY   init (0),
 13   137 	INPUT_CONVERT_BREAK	     init (1),
 13   138 	INPUT_CONVERT_ESCAPE     init (2),
 13   139 	INPUT_CONVERT_DISCARD    init (3),
 13   140 	INPUT_CONVERT_FORMFEED   init (4),
 13   141 	INPUT_CONVERT_PRECEDENCE_DISCARD
 13   142 			     init (5),
 13   143 	INPUT_CONVERT_DSA_CR_PROCESSING
 13   144 			     init (6)
 13   145 	)		     fixed bin (8) unaligned internal static options (constant);
 13   146 
 13   147      dcl	(
 13   148 	OUTPUT_CONVERT_ORDINARY  init (0),
 13   149 	OUTPUT_CONVERT_NEWLINE   init (1),
 13   150 	OUTPUT_CONVERT_CR	     init (2),
 13   151 	OUTPUT_CONVERT_HT	     init (3),
 13   152 	OUTPUT_CONVERT_BS	     init (4),
 13   153 	OUTPUT_CONVERT_VT	     init (5),
 13   154 	OUTPUT_CONVERT_FF	     init (6),
 13   155 	OUTPUT_CONVERT_OCTAL     init (7),
 13   156 	OUTPUT_CONVERT_RRS	     init (8),
 13   157 	OUTPUT_CONVERT_BRS	     init (9),
 13   158 	OUTPUT_CONVERT_NO_MOTION init (10),
 13   159 	OUTPUT_CONVERT_PRECEDENCE_NO_MOTION
 13   160 			     init (11),
 13   161 	OUTPUT_CONVERT_DONT_SEND init (12),
 13   162 	OUTPUT_CONVERT_NOT_USED_13
 13   163 			     init (13),
 13   164 	OUTPUT_CONVERT_NOT_USED_14
 13   165 			     init (14),
 13   166 	OUTPUT_CONVERT_NOT_USED_15
 13   167 			     init (15),
 13   168 	OUTPUT_CONVERT_NOT_USED_16
 13   169 			     init (16),
 13   170 	OUTPUT_CONVERT_FIRST_SPECIAL
 13   171 			     init (17)
 13   172 	)		     fixed bin (8) unaligned internal static options (constant);
 13   173 
 13   174 /*	END INCLUDE FILE ... tty_convert.incl.pl1 */
 12   232 
 12   233 
 12   234 /*  END OF:  ttt.incl.pl1				  *  *  *  *  *  */
     1189 
     1190  /* BEGIN INCLUDE FILE ... tty_can_types.incl.pl1 */
 14     2 /* Created:  10 November 1980 by G. Palter */
 14     3 
 14     4 dcl (CAN_TYPE_OVERSTRIKE	initial (1),
 14     5      CAN_TYPE_REPLACE	initial (2))
 14     6 	fixed binary static options (constant);
 14     7 
 14     8 dcl  CAN_TYPE_NAMES (2) character (32) aligned static options (constant) initial
 14     9          ("can_type=overstrike", "can_type=replace");
 14    10 
 14    11 /* END INCLUDE FILE ... tty_can_types.incl.pl1 */
     1190 
     1191  /* BEGIN INCLUDE FILE ... tty_mode_names.incl.pl1 */
 15     2 
 15     3 /* Defines internal static character strings for all legal tty modes */
 15     4 /* Created 6/17/75 by Robert Coren */
 15     5 /* modified 4/10/79 by J. Stern to add MPX_MODES */
 15     6 /* modified 8/13/79 by Robert Coren to add iflow & oflow */
 15     7 /* modified 1/21/80 by Robert Coren to add no_outp, oddp, & 8bit */
 15     8 /* modified 03/30/82 by Richard Lamson to add "ll", "pl", and "can_type" 
 15     9*   and to reorganize modestr to be defined on MODE_NAME */
 15    10 
 15    11 
 15    12 /****^  HISTORY COMMENTS:
 15    13*  1) change(88-07-05,Parisek), approve(88-07-05,MCR7928),
 15    14*     audit(88-07-08,Beattie), install(88-07-19,MR12.2-1061):
 15    15*     Changed declaration of modestr to use the "simple defining" technique
 15    16*     thus fixing compilation errors resulting from the use of the "isub"
 15    17*     value within a "isub defining" technique (defining techniques as
 15    18*     described in Multics PL/I Reference Manual - AM83).
 15    19*                                                   END HISTORY COMMENTS */
 15    20 
 15    21 
 15    22 dcl  n_modes fixed bin int static init (29);		/* number of valid modes */
 15    23 
 15    24 declare	MODE_NAME (-2:29) character (8) internal static options (constant) initial
 15    25     ("ll", "pl", "can_type",				/* -2 : 0  */
 15    26      "edited", "tabs", "can", "esc",			/*  1 : 4  */
 15    27      "erkl", "rawi", "rawo", "red",			/*  5 : 8  */
 15    28      "vertsp", "crecho", "lfecho", "tabecho",		/*  9 : 12 */
 15    29      "hndlquit", "fulldpx", "echoplex", "capo",		/* 13 : 16 */
 15    30      "replay", "polite", "ctl_char", "blk_xfer",		/* 17 : 20 */
 15    31      "breakall", "scroll", "prefixnl", "wake_tbl",	/* 21 : 24 */
 15    32      "iflow", "oflow", "no_outp", "8bit",		/* 25 : 28 */
 15    33      "oddp");					/* 29 : 29 */
 15    34 
 15    35 
 15    36 declare	modestr (1:29) character (8) unaligned defined (MODE_NAME (1));
 15    37 
 15    38 /* MPX_MODES (i) = "1"b => modestr (i) must be implemented by a multiplexer */
 15    39 
 15    40 dcl  MPX_MODES (29) bit (1) int static options (constant) init
 15    41     ("0"b, "0"b, "0"b, "0"b, "0"b, "0"b, "0"b, "0"b,	/* edited -> red */
 15    42      "0"b, "1"b, "1"b, "1"b, "0"b, "1"b, "1"b, "0"b,	/* vertsp -> capo */
 15    43      "1"b, "1"b, "0"b, "1"b, "1"b, "0"b, "1"b, "0"b,	/* replay -> wake_tbl */
 15    44      "1"b, "1"b, "1"b, "1"b, "1"b);			/* iflow -> oddp */
 15    45 
 15    46 
 15    47 /* END INCLUDE FILE ... tty_mode_names.incl.pl1 */
     1191 
     1192  /* BEGIN INCLUDE FILE...  tty_video_tables.incl.pl1 */
 16     2 /* Created:  3 June 1979 by Bernard S. Greenberg */
 16     3 /* Modified: 9 June 1981 by G. Palter to switch to line/column orientation */
 16     4 
 16     5 /* Definition of the video operations supported by a terminal */
 16     6 
 16     7 dcl  tty_video_tables_version_1 fixed binary static options (constant) initial (1);
 16     8 
 16     9 dcl  ttyvtblp pointer;
 16    10 dcl  tty_video_table_video_chars_len fixed binary (21);
 16    11 
 16    12 dcl 1 tty_video_table aligned based (ttyvtblp),
 16    13       2 version fixed binary initial (tty_video_tables_version_1),
 16    14       2 screen_height fixed binary,			/* # of lines on screen */
 16    15       2 screen_line_length fixed binary,		/* # of characters on a line */
 16    16       2 scroll_count fixed binary,			/* # of lines scrolled by LF at bottom */
 16    17       2 flags,
 16    18         3 overstrike_available bit (1) unaligned,		/* ON => overstrike works */
 16    19         3 automatic_crlf bit (1) unaligned,		/* ON => automatically goes to next line from last column */
 16    20         3 simulate_eol bit (1) unaligned,		/* ON => program must simulate clear-to-end-of-line */
 16    21         3 pad bit (33) unaligned,
 16    22       2 video_chars_len fixed binary (21),		/* combined length of all sequences used */
 16    23       2 pad (2) bit (36),
 16    24       2 nseq fixed binary,				/* # of video sequences defined */
 16    25       2 sequences (N_VIDEO_SEQUENCES refer (tty_video_table.nseq)) like tty_video_seq aligned,
 16    26 						/* the control sequences */
 16    27       2 video_chars character (tty_video_table_video_chars_len refer (tty_video_table.video_chars_len)) unaligned;
 16    28 
 16    29 dcl  video_chars_ptr pointer;				/* -> tty_video_table.video_chars */
 16    30 dcl  video_chars character (tty_video_table.video_chars_len) based (video_chars_ptr);
 16    31 
 16    32 
 16    33 /* A single video sequence: it may contain encoded screen coordinates or a repeat counter */
 16    34 
 16    35 dcl  ttyvseqp pointer;
 16    36 
 16    37 dcl 1 tty_video_seq based (ttyvseqp) aligned,
 16    38       2 flags unaligned,				/* first 2 characters */
 16    39         3 present bit (1) unaligned,			/* ON => this feature is present */
 16    40         3 interpret bit (1) unaligned,			/* ON => sequence contains encoded coordinates/repeat count */
 16    41         3 able_to_repeat bit (1) unaligned,		/* ON => sequence contains a repeat count */
 16    42         3 cpad_present bit (1) unaligned,		/* ON => this operation must be padded */
 16    43         3 cpad_in_chars bit (1) unaligned,		/* ON => pad expressed in characters */
 16    44         3 pad bit (7) unaligned,
 16    45         3 general bit (6) unaligned,			/* reserved for per-operation flags */
 16    46       2 cpad fixed binary (18) unsigned unaligned,	/* padding in characters of .1 millisecond units */
 16    47       2 pad bit (15) unal,
 16    48       2 len fixed binary (9) unsigned unaligned,		/* # of valid characters in sequence */
 16    49       2 seq_index fixed binary (12) unsigned unaligned;	/* start of string in character data */
 16    50 
 16    51 
 16    52 /* Available operations */
 16    53 
 16    54 dcl (ABS_POS	initial (1),	CLEAR_SCREEN	initial (2),
 16    55      CLEAR_TO_EOS	initial (3),	HOME		initial (4),
 16    56      CLEAR_TO_EOL	initial (5),	CURSOR_UP		initial (6),
 16    57      CURSOR_RIGHT	initial (7),	CURSOR_DOWN	initial (8),
 16    58      CURSOR_LEFT	initial (9),	INSERT_CHARS	initial (10),
 16    59      END_INSERT_CHARS   /* if not present, insert-chars opens up N spaces */
 16    60 		initial (11),	DELETE_CHARS	initial (12),
 16    61      INSERT_LINES	initial (13),	DELETE_LINES	initial (14))
 16    62 	fixed binary static options (constant);
 16    63 
 16    64 dcl  N_VIDEO_SEQUENCES fixed binary static options (constant) initial (14);
 16    65 
 16    66 
 16    67 /* Encoding of special values (eg: coordinates or the repeat count) */
 16    68 
 16    69 dcl 1 tty_numeric_encoding based unaligned,
 16    70       2 flags,
 16    71         3 must_be_on bit (1) unaligned,			/* ON => an encoding; not a character */
 16    72         3 express_in_decimal bit (1) unaligned,		/* ON => express it as decimal digits */
 16    73         3 express_in_octal bit (1) unaligned,		/* ON => express it as octal digits; both OFF => in binary */
 16    74 
 16    75         3 offset_is_0 bit (1) unaligned,		/* ON => offset is not stored as it's zero */
 16    76       2 l_c_or_n fixed binary (2) unsigned unaligned,	/* 0 = line, 1= column, 2 = repeat-count */
 16    77       2 num_digits fixed bin (2) unsigned unaligned,	/* # of digits for decimal/octal; 0 => as many as needed */
 16    78       2 pad bit (1) unaligned,
 16    79       2 offset fixed bin (8) unaligned;			/* offset to add to the number */
 16    80 
 16    81 /* END INCLUDE FILE tty_video_tables.incl.pl1 */
     1192 
     1193 
     1194 /* introductory setup */
     1195 
     1196 	ttfp, tttp, tempp, temp_ptr (*) = null;		/* setup for clean_up */
     1197 	dft_extended_tablesp = null;
     1198 	c_chars_ptr = null;				/* make the compiler happy */
     1199 	got_temps = ""b;
     1200 	created_table_segment = ""b;
     1201 	dirname, supplied_ename, ttf_ename, ttt_ename = "";
     1202 	check_0nums = "0"b;
     1203 
     1204 	on cleanup begin;
     1205 	     call clean_up;
     1206 	     cv_ttf_severity_ = 5;
     1207 	end;
     1208 
     1209 	call cu_$arg_count (argc, code);
     1210 	if code ^= 0 then do;
     1211 	     call com_err_ (code, prog_name);
     1212 	     go to severity_5_failure;
     1213 	end;
     1214 	if argc < 1
     1215 	then do;
     1216 give_usage:    call com_err_$suppress_name (0, prog_name,
     1217 		"Usage:  cv_ttf ttf_name [-brief | -long]");
     1218 	     go to severity_5_failure;
     1219 	end;
     1220 
     1221 	do argx = 1 to argc;
     1222 	     call cu_$arg_ptr (argx, argp, argl, code);
     1223 	     if char (arg, 1) ^= "-"
     1224 	     then do;
     1225 		if supplied_ename ^= ""
     1226 		then do;
     1227 		     call com_err_ (error_table_$too_many_args, prog_name, "Only one pathname may be given. ^a was the second.", arg);
     1228 		     go to severity_5_failure;
     1229 		end;
     1230 
     1231 		call expand_pathname_ (arg, dirname, supplied_ename, code);
     1232 		if code ^= 0 then do;
     1233 path_error:
     1234 		     call com_err_ (code, prog_name, "^a", arg);
     1235 		     go to severity_5_failure;
     1236 		end;
     1237 		call expand_pathname_$add_suffix (arg, "ttf", dirname, ttf_ename, code);
     1238 		if code ^= 0 then go to path_error;
     1239 
     1240 		call suffixed_name_$new_suffix (supplied_ename, "ttf", "ttt", ttt_ename, code); /* if we get this far, how can we fail? */
     1241 		if code ^= 0			/* still, let's have a look */
     1242 		then go to path_error;
     1243 
     1244 	     end;					/* Pathname case */
     1245 	     else if arg = "-bf" | arg = "-brief"
     1246 	     then SERROR_CONTROL = "01"b;
     1247 
     1248 	     else if arg = "-lg" | arg = "-long"
     1249 	     then SERROR_CONTROL = "10"b;
     1250 
     1251 	     else if arg = "-ck1dig" then do;
     1252 		check_0nums = "1"b;			/* they made me change the name from ck0num to ck1dig */
     1253 		num_0nums = 0;
     1254 	     end;
     1255 
     1256 	     else if arg = "-severity" | arg = "-sv" then do;
     1257 		if argx >= argc then do;
     1258 		     call com_err_ (error_table_$noarg, prog_name, "After ""^a"".", arg);
     1259 		     go to severity_5_failure;
     1260 		end;
     1261 		argx = argx + 1;
     1262 		call cu_$arg_ptr (argx, argp, argl, code);
     1263 		fb35 = cv_dec_check_ (arg, code);
     1264 		if code ^= 0 | fb35 < 0 | fb35 > 5 then do;
     1265 		     call com_err_ (error_table_$bad_conversion, prog_name,
     1266 			"Severity must be an integer in the range 0 - 5, not ""^a"".", arg);
     1267 		     go to severity_5_failure;
     1268 		end;
     1269 		MIN_PRINT_SEVERITY = fb35;
     1270 	     end;
     1271 
     1272 	     else do;
     1273 		code = error_table_$badopt;
     1274 arg_error:	call com_err_ (code, prog_name, arg);
     1275 		go to severity_5_failure;
     1276 	     end;
     1277 	end;					/* argument processing loop */
     1278 	if supplied_ename = "" then go to give_usage;
     1279 
     1280 /* initialize some variables */
     1281 
     1282 	n_tables, n_answerbacks, n_table_names, n_dft_bauds, ct_table_offset, spec_offset, fkey_table_offset, default_count = 0;
     1283 	dsatmdevp = null;
     1284 
     1285 	next_misc_offset = 1;			/* so that no valid offset will be zero */
     1286 
     1287 	call initiate_file_ (dirname, ttf_ename, R_ACCESS, ttfp, bit_count, code);
     1288 	if code = error_table_$noentry
     1289 	then if ttf_ename ^= supplied_ename
     1290 	     then do;
     1291 		call initiate_file_ (dirname, supplied_ename, R_ACCESS, ttfp, bit_count, code);
     1292 		if code = 0
     1293 		then do;
     1294 		     call com_err_ (0, prog_name, "Warning: converting ^a. The segment should be named ^a.",
     1295 			pathname_ (dirname, supplied_ename), ttf_ename);
     1296 		     ttf_ename = supplied_ename;
     1297 		end;
     1298 	     end;
     1299 	if code ^= 0
     1300 	then do;
     1301 ttf_error:     call com_err_ (code, prog_name, "^a.", pathname_ (dirname, ttf_ename));
     1302 	     go to severity_5_failure;
     1303 	end;
     1304 	if bit_count = 0 then do;
     1305 	     code = error_table_$zero_length_seg;
     1306 	     go to ttf_error;
     1307 	end;
     1308 
     1309 /* now create segment in which to build TTT */
     1310 
     1311 	wdir = get_wdir_ ();
     1312 	call hcs_$make_seg (wdir, ttt_ename, "", 01010b, tttp, code);
     1313 	created_table_segment = (code = 0);
     1314 	if tttp = null
     1315 	then go to ttt_error;
     1316 
     1317 	call hcs_$truncate_seg (tttp, 0, code);		/* start clean */
     1318 	if code ^= 0
     1319 	then do;
     1320 ttt_error:     call com_err_ (code, prog_name, ttt_ename);
     1321 	     go to severity_5_failure;
     1322 	end;
     1323 
     1324 /* get a bunch of temporary segments for pieces of TTT */
     1325 
     1326 	call get_temp_segments_ (prog_name, temp_ptr, code);
     1327 	if code ^= 0
     1328 	then do;
     1329 	     call com_err_ (code, prog_name, "Creating temporary segments");
     1330 	     go to severity_5_failure;
     1331 	end;
     1332 
     1333 	got_temps = "1"b;
     1334 	tables_ptr = temp_ptr (1);
     1335 	special_tables_ptr = temp_ptr (2);
     1336 	misc_tables_ptr = temp_ptr (3);
     1337 	ans_back_table_ptr = temp_ptr (4);
     1338 	table_names_ptr = temp_ptr (5);
     1339 	temp_dfttp = temp_ptr (6);
     1340 	extended_tables_workp = temp_ptr (7);
     1341 	misc_relocs_ptr = temp_ptr (8);
     1342 	fkey_tables_ptr = temp_ptr (9);
     1343 	temp_strings_ptr = temp_ptr (10);
     1344 	misc_relocs_count = 0;
     1345 
     1346 /* Set up TTT header */
     1347 
     1348 	ttt.author.proc_group_id = get_group_id_ ();
     1349 	ttt.last_install_time = 0;
     1350 	ttt.lock = ""b;
     1351 	ttt.author.table = "TTT";
     1352 	ttt.author.w_dir = substr (wdir, 1, length (ttt.author.w_dir));
     1353 	ttt.version = TTT_version_4;
     1354 
     1355 /* initialize default structure */
     1356 
     1357 	ttep = addr (ttt.tt_entries (1));
     1358 	dft = tte;				/* all zero */
     1359 	dft.name = "";
     1360 	dft.modes = "";
     1361 	dft.protocol = 0;
     1362 	dft.line_types = (72)"1"b;			/* all valid initially */
     1363 	dft.erase = "#";
     1364 	dft.kill = "@";
     1365 
     1366 	allocate extended_tables set (dft_extended_tablesp);
     1367 	dft_extended_tablesp -> extended_tables.tables_rp (*) = 0;
     1368 	dft_extended_tables_defined = "0"b;
     1369 
     1370 /* set up for lex_string_ */
     1371 
     1372 	call translator_temp_$get_segment (prog_name, tempp, code);
     1373 	if tempp = null
     1374 	then do;
     1375 	     call com_err_ (code, prog_name, "From translator_temp_$get_segment");
     1376 	     go to severity_5_failure;
     1377 	end;
     1378 
     1379 	if ^already_called
     1380 	then do;
     1381 	     ctl_chars = substr (collate (), 1, 8) || substr (collate (), 10, 24);
     1382 	     breaks = ctl_chars || "()<>*,:;";
     1383 	     call lex_string_$init_lex_delims ("""", """", "/*", "*/", ";", "10"b, breaks, ctl_chars, lexdlm, lexctl);
     1384 	     already_called = "1"b;
     1385 	end;
     1386 
     1387 	call lex_string_$lex (ttfp, divide (bit_count, 9, 21, 0), 0, tempp, "1000"b, """", """", "/*", "*/", ";",
     1388 	     breaks, ctl_chars, lexdlm, lexctl, stmtp, Pthis_token, code);
     1389 
     1390 /* Go to it! */
     1391 
     1392 	call SEMANTIC_ANALYSIS ();
     1393 
     1394 /*  put everything together */
     1395 
     1396 	if MERROR_SEVERITY >= translation_failure
     1397 	then call com_err_ (error_table_$translation_failed, prog_name);
     1398 
     1399 	else do;
     1400 	     do i = 1 to n_table_names;		/* append conv/trans tables to TTT */
     1401 		if table_names (i).offset = -1	/* oops, this one was never defined */
     1402 		then call semant_error (28, table_names (i).name, "");
     1403 
     1404 		else if table_names (i).type ^= SPEC_TYPE & table_names (i).type ^= FKEY_TYPE
     1405 		then do;
     1406 		     n_tables = n_tables + 1;
     1407 		     tablep = addr (ttt.tables (n_tables));
     1408 		     table_entry.name = table_names (i).name;
     1409 		     table_entry.type = table_names (i).type;
     1410 		     sourcep = ptr (tables_ptr, table_names (i).offset);
     1411 		     table_entry.table = sourcep -> cv_trans_struc;
     1412 		     table_names (i).offset = bin (rel (tablep), 18); /* update offset for later use */
     1413 		end;
     1414 	     end;
     1415 
     1416 	     ttt.n_tables = n_tables;
     1417 
     1418 /* now special tables */
     1419 
     1420 	     specialp = addr (ttt.rest_of_ttt);
     1421 	     next_offset = bin (rel (specialp), 18);
     1422 
     1423 	     n_special_tables = 0;
     1424 	     do i = 1 to n_table_names;
     1425 		if table_names (i).type = SPEC_TYPE & table_names (i).offset ^= -1
     1426 		then do;
     1427 		     n_special_tables = n_special_tables + 1;
     1428 		     specialp -> special_table.name = table_names (i).name;
     1429 		     sourcep = ptr (special_tables_ptr, table_names (i).offset);
     1430 		     specialp -> special_table.version = SPECIAL_VERSION_2;
     1431 		     specialp -> special_table.default = 0;
     1432 		     specialp -> special_table.table.special_chars = sourcep -> special_chars;
     1433 
     1434 		     table_names (i).offset = next_offset;
     1435 		     table_size = divide (length (unspec (sourcep -> special_chars)) + 35, 36, 18, 0);
     1436 		     next_offset = next_offset + table_size + 11; /* include name and header */
     1437 		     specialp = ptr (tttp, next_offset);
     1438 		end;
     1439 	     end;
     1440 
     1441 
     1442 	     ttt.n_special_tables = n_special_tables;
     1443 
     1444 /* now function key tables */
     1445 
     1446 	     n_fkey_tables = 0;
     1447 	     ttt.fkey_offset = next_offset;
     1448 
     1449 	     do i = 1 to n_table_names;
     1450 		if table_names (i).type = FKEY_TYPE & table_names (i).offset ^= -1
     1451 		then do;
     1452 		     n_fkey_tables = n_fkey_tables + 1;
     1453 		     fkey_tablep = ptr (tttp, next_offset);
     1454 		     function_key_data_ptr = ptr (fkey_tables_ptr, table_names (i).offset);
     1455 		     fkey_table.name = table_names (i).name;
     1456 		     fkey_table.version = function_key_data.version;
     1457 		     fkey_table.highest = function_key_data.highest;
     1458 		     fkey_table.cursor_motion_keys = function_key_data.cursor_motion_keys;
     1459 		     fkey_table.function_keys = function_key_data.function_keys;
     1460 		     sourcep = function_key_data.seq_ptr; /* move corresponding fkey sequences */
     1461 		     targetp = ptr (tttp, next_offset + currentsize (fkey_table));
     1462 		     targetp -> function_key_seqs = sourcep -> function_key_seqs;
     1463 		     fkey_table.seq_offset = bin (rel (targetp));
     1464 		     fkey_table.seq_len = function_key_data.seq_len;
     1465 		     table_names (i).offset = next_offset;
     1466 		     next_offset = next_offset + currentsize (fkey_table) + currentsize (targetp -> function_key_seqs);
     1467 		end;
     1468 	     end;
     1469 	     ttt.n_fkey_tables = n_fkey_tables;
     1470 
     1471 	     increment = next_offset - 1;		/* to be added to all relative ptrs in tte */
     1472 	     targetp = ptr (tttp, next_offset);		/* pointer to next free spot in TTT */
     1473 	     misc_tables_ptr = addrel (misc_tables_ptr, 1); /* skip over first (unused) word */
     1474 	     next_misc_offset = next_misc_offset - 1;	/* so size of array is right */
     1475 
     1476 	     targetp -> misc_strings = misc_tables_ptr -> misc_strings; /* fill it in */
     1477 	     next_offset = next_offset + next_misc_offset;
     1478 
     1479 	     if default_count = 0
     1480 	     then do;
     1481 		ttt.default_type_offset = 0;
     1482 		call ERROR (32);
     1483 	     end;
     1484 
     1485 	     else do;
     1486 		ttt.default_type_offset = next_offset;
     1487 		dfttp = ptr (tttp, next_offset);	/* this is where we will put default_types table */
     1488 
     1489 		do i = 1 to default_count;
     1490 		     dftte (i) = temp_dftte (i).entry;
     1491 		     if temp_dftte (i).term_type_index = 0 /* default type specified before type defined */
     1492 		     then do;
     1493 			name_to_test_for = translate (temp_dftte (i).type_name, ALL_CAPS, ALL_LOWERCASE);
     1494 			do j = 1 to ttt.n_tt_entries; /* find it now */
     1495 			     ttep = addr (ttt.tt_entries (j));
     1496 			     if tte.name = name_to_test_for
     1497 			     then go to found_match;
     1498 			end;
     1499 
     1500 			if j > ttt.n_tt_entries
     1501 			then call semant_error (29, temp_dftte (i).type_name, "");
     1502 			else
     1503 found_match:		     dftte (i).term_type_index = j;
     1504 
     1505 		     end;
     1506 		end;
     1507 
     1508 		dftt.dft_count = default_count;
     1509 		next_offset = next_offset + default_count * size (dummy_dftte) + 1;
     1510 	     end;
     1511 
     1512 	     if n_answerbacks > 0
     1513 	     then ttt.answerback_offset = next_offset;
     1514 	     else ttt.answerback_offset = 0;
     1515 
     1516 /* now append answerback table */
     1517 
     1518 	     answerback_entry_ptr = ans_back_table_ptr;	/* get pointer to base of temp seg */
     1519 	     do i = 1 to n_answerbacks;
     1520 		targetp = ptr (tttp, next_offset);
     1521 
     1522 		if i > 1				/* not first one */
     1523 		then prev_ptr -> answerback_entry.next = next_offset;
     1524 
     1525 		answerback_length = answerback_entry.length; /* so refer will work when we assign it */
     1526 		targetp -> answerback_entry = answerback_entry;
     1527 
     1528 		ans_size = divide (answerback_length + 3, 4, 18, 0) + 3; /* total number of words in entry */
     1529 		next_offset = next_offset + ans_size;
     1530 		answerback_entry_ptr = addrel (answerback_entry_ptr, ans_size);
     1531 		prev_ptr = targetp;
     1532 	     end;
     1533 
     1534 	     size_of_ttt, ttt.total_ttt_size = next_offset;
     1535 
     1536 /* go through all entries. for each one, update the relative pointers,
     1537*   *  and check for reasonable consistency between output_conversions and
     1538*   *  special tables
     1539**/
     1540 
     1541 	     call perform_misc_relocs;
     1542 
     1543 	     highest = 0;
     1544 
     1545 	     do i = 1 to ttt.n_tt_entries;
     1546 		ttep = addr (ttt.tt_entries (i));
     1547 
     1548 		call set_table_offset (tte.input_translation_rp);
     1549 		call set_table_offset (tte.output_translation_rp);
     1550 		call set_table_offset (tte.input_conversion_rp);
     1551 		call set_table_offset (tte.output_conversion_rp);
     1552 		call set_table_offset (tte.special_rp);
     1553 		call set_table_offset (tte.fkey_rp);
     1554 
     1555 		if tte.special_rp <= 0		/* no special table */
     1556 		then if tte.output_conversion_rp > 0	/* but there is an output_conversion table */
     1557 		     then call semant_error (30, tte.name, "");
     1558 		     else ;			/* it's all right not to have either */
     1559 
     1560 		else if tte.output_conversion_rp > 0	/* if we have both, cross-check */
     1561 		then do;
     1562 		     tablep = ptr (tttp, tte.output_conversion_rp);
     1563 		     specialp = ptr (tttp, tte.special_rp);
     1564 		     specialp = addr (specialp -> special_table.special_chars);
     1565 
     1566 		     maxind = table_entry.cv_trans.value (0);
     1567 
     1568 		     do j = 1 to hbound (tablep -> cv_trans.value, 1); /* make sure all indicators are represented by sequences */
     1569 			if table_entry.cv_trans.value (j) > maxind
     1570 			then maxind = table_entry.cv_trans.value (j);
     1571 		     end;
     1572 
     1573 		     if maxind > 16			/* any escape sequences at all */
     1574 		     then if maxind - 16 > specialp -> special_chars.escape_length
     1575 			then call semant_error (31, tte.name, table_entry.name);
     1576 		end;
     1577 
     1578 /* check for consistent framing characters */
     1579 
     1580 		if tte.frame_begin ^= NUL_CHAR & tte.frame_end = NUL_CHAR
     1581 		then call semant_error (41, tte.name, "");
     1582 
     1583 /* check for consistent flow control specifications */
     1584 
     1585 		if tte.output_block_acknowledge
     1586 		then if tte.output_buffer_size = 0 | tte.output_suspend_etb = NUL_CHAR | tte.output_resume_ack = NUL_CHAR
     1587 		     then call semant_error (43, tte.name, "");
     1588 		     else ;
     1589 
     1590 		else if (tte.output_suspend_etb = NUL_CHAR & tte.output_resume_ack ^= NUL_CHAR) |
     1591 		     (tte.output_suspend_etb ^= NUL_CHAR & tte.output_resume_ack = NUL_CHAR)
     1592 		then call semant_error (43, tte.name, "");
     1593 
     1594 		if (tte.input_suspend = NUL_CHAR & tte.input_resume ^= NUL_CHAR & ^tte.input_timeout) |
     1595 		     (tte.input_suspend ^= NUL_CHAR & tte.input_resume = NUL_CHAR)
     1596 		then call semant_error (44, tte.name, "");
     1597 
     1598 /* make sure coded type is reasonable in case this is site's first TTT */
     1599 
     1600 		highest, tte.coded_type = highest + 1;
     1601 	     end;
     1602 
     1603 	     ttt.highest_coded_type = highest;		/* if install/up_ttt_ is used, this will be overwritten */
     1604 
     1605 	     if ttt.type_map = 0
     1606 	     then call semant_error (35, "MAP", "");	/* warn if preaccess types omitted */
     1607 
     1608 /* essentially all done */
     1609 
     1610 	     if check_0nums
     1611 	     then if num_0nums > 0 then call com_err_ (0, prog_name, "^d incompatible character specification^[s^] found",
     1612 			num_0nums, num_0nums ^= 1);
     1613 		else call ioa_ ("No incompatible character specifications found.");
     1614 
     1615 	     if MERROR_SEVERITY >= translation_failure
     1616 	     then do;
     1617 		call com_err_ (error_table_$translation_failed, prog_name);
     1618 		if created_table_segment then size_of_ttt = -1;
     1619 		else size_of_ttt = 0;
     1620 	     end;
     1621 	     if size_of_ttt >= 0 then do;
     1622 		call terminate_file_ (tttp, 36 * size_of_ttt, TERM_FILE_TRUNC_BC_TERM, code);
     1623 		if code ^= 0
     1624 		then do;
     1625 		     call com_err_ (code, prog_name, "Could not set bit count of TTT");
     1626 		     go to severity_5_failure;
     1627 		end;
     1628 	     end;
     1629 	end;
     1630 
     1631 	call clean_up;				/* final wrapup */
     1632 	cv_ttf_severity_ = MERROR_SEVERITY;
     1633 	return;
     1634 
     1635 severity_5_failure:
     1636 	call clean_up;
     1637 	cv_ttf_severity_ = 5;
     1638 	return;
     1639 
     1640 clean_up: proc;
     1641 
     1642 /* cleanup handler -- makes sure anything we initiated gets terminated, anything we allocated gets freed */
     1643 
     1644 	if ttfp ^= null
     1645 	then call terminate_file_ (ttfp, (0), TERM_FILE_TERM, (0));
     1646 
     1647 	if tttp ^= null
     1648 	then if created_table_segment
     1649 	     then do;
     1650 		call hcs_$delentry_seg (tttp, (0));
     1651 		tttp = null;
     1652 	     end;
     1653 	     else call terminate_file_ (tttp, (0), TERM_FILE_TRUNC_BC_TERM, (0));
     1654 
     1655 	if tempp ^= null
     1656 	then call translator_temp_$release_all_segments (tempp, (0));
     1657 	tempp = null;
     1658 
     1659 	if got_temps
     1660 	then call release_temp_segments_ (prog_name, temp_ptr, code);
     1661 	got_temps = "0"b;
     1662 
     1663 	if dft_extended_tablesp ^= null () then free dft_extended_tablesp -> extended_tables;
     1664 
     1665 	return;
     1666 
     1667      end /* clean_up */;
     1668 
     1669 add_increment: proc (rp);
     1670 
     1671 /* internal procedure to add increment to offsets in misc_tables */
     1672 
     1673 dcl  rp fixed bin (18);				/* input as offset in misc_tables, output as correct offset in TTT */
     1674 
     1675 	if rp <= 0 then return;			/* no target */
     1676 	else rp = rp + increment;
     1677 	return;
     1678 
     1679      end /* add_increment */;
     1680 
     1681 
     1682 
     1683 set_table_offset: proc (rp);
     1684 
     1685 /* internal procedure to set offsets in tte from table_names array */
     1686 
     1687 dcl  rp fixed bin (18);				/* input as index in array, output as correct offset */
     1688 
     1689 	if rp <= 0 then return;			/* no table, leave it alone */
     1690 	else rp = table_names (rp).offset;
     1691 	return;
     1692 
     1693      end /* set_table_offset */;
     1694 
     1695 statement_error: proc (error_num, parm1, parm2);
     1696 
     1697 dcl  error_num fixed bin;
     1698 dcl  parm1 char (*);
     1699 dcl  parm2 char (*);
     1700 dcl  (stmt_ptr, token_ptr) ptr init (null);
     1701 
     1702 	stmt_ptr = token.Pstmt;
     1703 	token_ptr = Pthis_token;
     1704 
     1705 semant_error: entry (error_num, parm1, parm2);
     1706 
     1707 	if error_control_table (error_num).severity >= MIN_PRINT_SEVERITY
     1708 	then call lex_error_ (error_num, SERROR_PRINTED (error_num), (error_control_table.severity (error_num)),
     1709 		MERROR_SEVERITY, stmt_ptr, token_ptr, SERROR_CONTROL,
     1710 		(error_control_table.message (error_num)), (error_control_table.brief_message (error_num)),
     1711 		parm1, parm2);
     1712 	else do;
     1713 	     MERROR_SEVERITY = max (MERROR_SEVERITY, error_control_table (error_num).severity);
     1714 	     SERROR_PRINTED (error_num) = "1"b;
     1715 	end;
     1716 	return;
     1717 
     1718      end /* statement_error */;
     1719 
     1720 /* Syntax Functions */
     1721 
     1722 
     1723 /* returns TRUE if token contains upper/lower case, numeric or underscore */
     1724 
     1725 legal_name: proc returns (bit (1) aligned);
     1726 
     1727 	return (verify (token_value, LEGAL_CHARS) = 0);
     1728      end legal_name;
     1729 
     1730 
     1731 /* returns TRUE if legal name
     1732*   and token_value is either a new table name (defined = 0)
     1733*   or references a table which has not been filled in yet (defined = table index) */
     1734 new_table_name: proc returns (bit (1) aligned);
     1735 
     1736 	if ^legal_name ()
     1737 	then do;
     1738 	     call statement_error (19, token_value, "");
     1739 	     return ("0"b);
     1740 	end;
     1741 
     1742 	if token.Lvalue > 32
     1743 	then do;
     1744 	     call statement_error (39, token_value, "");
     1745 	     return ("0"b);
     1746 	end;
     1747 
     1748 	do i = 1 to n_table_names;
     1749 	     if table_names.name (i) = token_value
     1750 	     then if table_names.offset (i) >= 0
     1751 		then do;
     1752 		     call statement_error (21, token_value, "");
     1753 		     return ("0"b);
     1754 		end;
     1755 
     1756 		else do;
     1757 		     defined = i;			/* to be used by action routine */
     1758 		     return ("1"b);
     1759 		end;
     1760 	end;
     1761 
     1762 	defined = 0;
     1763 	return ("1"b);
     1764      end new_table_name;
     1765 
     1766 
     1767 /* returns TRUE if legal name and not a currently defined terminal type */
     1768 
     1769 new_type_name: proc returns (bit (1) aligned);
     1770 
     1771 	if ^legal_name () then do;
     1772 	     call statement_error (19, token_value, "");
     1773 	     return ("0"b);
     1774 	end;
     1775 
     1776 	if token.Lvalue > 32
     1777 	then do;
     1778 	     call statement_error (39, token_value, "");
     1779 	     return ("0"b);
     1780 	end;
     1781 
     1782 	name_to_test_for = translate (token_value, ALL_CAPS, ALL_LOWERCASE);
     1783 	do i = 1 to ttt.n_tt_entries;
     1784 	     ttep = addr (ttt.tt_entries (i));
     1785 	     if tte.name = name_to_test_for
     1786 	     then do;
     1787 		call statement_error (20, token_value, "");
     1788 		return ("0"b);
     1789 	     end;
     1790 	end;
     1791 
     1792 	return ("1"b);
     1793      end new_type_name;
     1794 
     1795 
     1796 valid_mode:
     1797      procedure () returns (bit (1) aligned);
     1798 
     1799 	if substr (token_value, 1, 1) = "^" then do;
     1800 	     test_value = substr (token_value, 2);
     1801 	     off_sw = "1"b;
     1802 	end;
     1803 	else do;
     1804 	     test_value = token_value;
     1805 	     off_sw = "0"b;
     1806 	end;
     1807 
     1808 	do i = lbound (modestr, 1) to hbound (modestr, 1);/* see if MCS value */
     1809 	     if modestr (i) = test_value then return ("1"b);
     1810 	end;
     1811 
     1812 	do i = lbound (TTY_BOOLEAN_MODE_DSA_NAME, 1) to	/* see if DSA value */
     1813 	     hbound (TTY_BOOLEAN_MODE_DSA_NAME, 1);
     1814 	     if DSA_modestr (i) = test_value then return ("1"b);
     1815 	end;
     1816 
     1817 	do i = lbound (CAN_TYPE_NAMES, 1) to hbound (CAN_TYPE_NAMES, 1);
     1818 	     if token_value = CAN_TYPE_NAMES (i) then return ("1"b);
     1819 	end;
     1820 
     1821 	if (test_value = "force") then		/* either "force" or "^force" */
     1822 	     return ("1"b);
     1823 
     1824 	if (token_value = "default") | (token_value = "init") then
     1825 	     return ("1"b);				/* these modes can't be negated */
     1826 
     1827 	if (substr (test_value, 1, 2) = "ll") then
     1828 	     if (token.Lvalue <= 2) then
     1829 		return ("0"b);
     1830 	     else do;
     1831 		if off_sw then do;
     1832 		     if dsatmdevp = null () then mode_line_length = 0;
     1833 		     else dsatm_device.line_length = 0;
     1834 		     return ("1"b);
     1835 		end;
     1836 		else do;
     1837 		     if substr (test_value, 3, 1) = "=" then
     1838 			i = cv_dec_check_ (substr (test_value, 4, token.Lvalue - 3), code);
     1839 		     else
     1840 			i = cv_dec_check_ (substr (test_value, 3, token.Lvalue - 2), code);
     1841 		     if code ^= 0 then return ("0"b);
     1842 		     else do;
     1843 			if dsatmdevp = null () then mode_line_length = i;
     1844 			else dsatm_device.line_length = i;
     1845 			return ("1"b);
     1846 		     end;
     1847 		end;
     1848 	     end;
     1849 
     1850 	if (substr (test_value, 1, 2) = "pl") then
     1851 	     if (token.Lvalue <= 2) then
     1852 		return ("0"b);
     1853 	     else do;
     1854 		if off_sw then do;
     1855 		     if dsatmdevp = null () then mode_page_length = 0;
     1856 		     else dsatm_device.page_length = 0;
     1857 		     return ("1"b);
     1858 		end;
     1859 		else do;
     1860 		     if substr (test_value, 3, 1) = "=" then
     1861 			i = cv_dec_check_ (substr (test_value, 4, token.Lvalue - 3), code);
     1862 		     else
     1863 			i = cv_dec_check_ (substr (test_value, 3, token.Lvalue - 2), code);
     1864 		     if code ^= 0 then return ("0"b);
     1865 		     else do;
     1866 			if dsatmdevp = null () then mode_page_length = i;
     1867 			else dsatm_device.page_length = i;
     1868 			return ("1"b);
     1869 		     end;
     1870 		end;
     1871 	     end;
     1872 
     1873 	return ("0"b);				/* here iff not recognized */
     1874 
     1875      end valid_mode;
     1876 
     1877 
     1878 valid_edit: proc returns (bit (1) aligned);
     1879 
     1880 	if tty_char () then return (token.Nvalue ^= rank (BS));
     1881 	else return ("0"b);
     1882 
     1883      end /* valid_edit */;
     1884 
     1885 
     1886 valid_baud: proc returns (bit (1) aligned);
     1887 
     1888 	token.Nvalue = cv_dec_check_ (token_value, code);
     1889 	if code ^= 0
     1890 	then return ("0"b);
     1891 
     1892 	do i = 1 to hbound (baud_table, 1);
     1893 	     if token.Nvalue = baud_table (i)
     1894 	     then return ("1"b);
     1895 	end;
     1896 
     1897 	return ("0"b);
     1898      end /* valid_baud */;
     1899 
     1900 
     1901 valid_cps: proc returns (bit (1) aligned);
     1902 
     1903 	token.Nvalue = cv_dec_check_ (token_value, code);
     1904 	if code ^= 0
     1905 	then return ("0"b);
     1906 
     1907 	if token.Nvalue = 10
     1908 	then do;
     1909 	     cps_baud_value = 110;
     1910 	     return ("1"b);
     1911 	end;
     1912 
     1913 	else do;
     1914 	     cps_baud_value = token.Nvalue * 10;
     1915 	     do i = 1 to hbound (baud_table, 1);
     1916 		if cps_baud_value = baud_table (i)
     1917 		then return ("1"b);
     1918 	     end;
     1919 
     1920 	     return ("0"b);
     1921 	end;
     1922 
     1923      end /* valid_cps */;
     1924 
     1925 
     1926 delay_value: proc returns (bit (1) aligned);
     1927 
     1928 /* floating point values 0.0 < X < 1.0 */
     1929 
     1930 	if delayx = 2 | delayx = 4
     1931 	then do;
     1932 	     on conversion go to bad_delay;
     1933 	     floating_delay_value = float (token_value);
     1934 	     revert conversion;
     1935 
     1936 	     if floating_delay_value < 0 | floating_delay_value > 1.0
     1937 	     then
     1938 bad_delay:	return ("0"b);
     1939 	     else return ("1"b);
     1940 	end;
     1941 
     1942 /* fixed point values */
     1943 	else do;
     1944 	     token.Nvalue = cv_dec_check_ (token_value, code);
     1945 	     if code ^= 0
     1946 	     then return ("0"b);
     1947 
     1948 	     if delayx = 1 | delayx = 5 then do;
     1949 		if token.Nvalue < -127 | token.Nvalue > 127 then
     1950 		     return ("0"b);
     1951 	     end;
     1952 	     else if delayx = 3 then do;
     1953 		if token.Nvalue < 0 | token.Nvalue > 127 then
     1954 		     return ("0"b);
     1955 	     end;
     1956 	     else if delayx = 6 then do;
     1957 		if token.Nvalue < 0 | token.Nvalue > 511 then
     1958 		     return ("0"b);
     1959 	     end;
     1960 
     1961 	     return ("1"b);
     1962 	end;
     1963 
     1964      end /* delay_value */;
     1965 
     1966 
     1967 defined_type: proc returns (bit (1) aligned);
     1968 
     1969 	name_to_test_for = translate (token_value, ALL_CAPS, ALL_LOWERCASE);
     1970 	do i = 1 to ttt.n_tt_entries;
     1971 	     temp_ttep = addr (ttt.tt_entries (i));
     1972 	     if temp_ttep -> tte.name = name_to_test_for
     1973 	     then do;
     1974 		token.Nvalue = i;
     1975 		return ("1"b);
     1976 	     end;
     1977 	end;
     1978 
     1979 	return ("0"b);
     1980      end /* defined_type */;
     1981 
     1982 
     1983 valid_line_type: proc returns (bit (1) aligned);
     1984 
     1985 dcl  lowest fixed bin;
     1986 
     1987 	lowest = 1;
     1988 	go to check_line_type;
     1989 
     1990 valid_dft_line_type: entry returns (bit (1) aligned);
     1991 
     1992 	lowest = -2;
     1993 
     1994 check_line_type:
     1995 	do i = lowest to max_line_type;
     1996 	     if token_value = line_types (i)
     1997 	     then do;
     1998 		token.Nvalue = i;
     1999 		return ("1"b);
     2000 	     end;
     2001 	end;
     2002 
     2003 	return ("0"b);
     2004      end /* valid_line_type */;
     2005 
     2006 
     2007 octal_char: proc returns (bit (1) aligned);
     2008 
     2009 	if token.Lvalue > 3
     2010 	then return ("0"b);
     2011 
     2012 	token.Nvalue = cv_oct_check_ (token_value, code);
     2013 	return (code = 0);
     2014      end /* octal_char */;
     2015 
     2016 tty_char: proc returns (bit (1) aligned);
     2017 
     2018 dcl  i fixed bin;
     2019 dcl  asc_mnemonic char (3);
     2020 
     2021 dcl  asc_value (0:32) char (3) static options (constant) init
     2022 	("nul", "soh", "stx", "etx", "eot", "enq", "ack", "bel",
     2023 	"bs ", "tab", "lf ", "vt ", "ff ", "cr ", "so ", "si ",
     2024 	"dle", "dc1", "dc2", "dc3", "dc4", "nak", "syn", "etb",
     2025 	"can", "em ", "sub", "esc", "fs ", "gs ", "rs ", "us ", "sp ");
     2026 
     2027 	if token.quoted_string & token.Lvalue = 1
     2028 	then call return_tty_char (bin (unspec (token_value)));
     2029 
     2030 	if token.Lvalue = 1 then do;
     2031 	     if index ("01234567", token_value) ^= 0 then do;
     2032 		if check_0nums then do;
     2033 		     call ERROR (49);
     2034 		     num_0nums = num_0nums + 1;
     2035 		     if octal_char () then return ("1"b);
     2036 		end;
     2037 	     end;
     2038 	     if index (breaks, token_value) = 0
     2039 	     then call return_tty_char (bin (unspec (token_value)));
     2040 	end;
     2041 	if octal_char () then return ("1"b);
     2042 	if token.Lvalue = 2 & substr (token_value, 1, 1) = "^" then do;
     2043 	     i = index ("@abcdefghijklmnopqrstuvwxyz[\]^_", substr (token_value, 2, 1));
     2044 	     if i = 0 then i = index ("@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_", substr (token_value, 2, 1));
     2045 	     if i = 0 then return ("0"b);
     2046 	     call return_tty_char (i - 1);
     2047 	end;
     2048 	if token.Lvalue <= 3 then do;
     2049 	     asc_mnemonic = translate (token_value, ALL_LOWERCASE, ALL_CAPS);
     2050 	     if asc_mnemonic = "del" then call return_tty_char (127);
     2051 	     if asc_mnemonic = "nl " then call return_tty_char (10);
     2052 	     if asc_mnemonic = "pad" then call return_tty_char (0);
     2053 	     if asc_mnemonic = "ht" then call return_tty_char (9);
     2054 	     do i = lbound (asc_value, 1) to hbound (asc_value, 1);
     2055 		if asc_value (i) = asc_mnemonic then call return_tty_char (i);
     2056 	     end;
     2057 
     2058 	end;
     2059 	return ("0"b);
     2060 
     2061 return_tty_char: proc (a_value);
     2062 
     2063 dcl  a_value fixed bin;
     2064 
     2065 	     token.Nvalue = a_value;
     2066 	     go to nlret;
     2067 	end return_tty_char;
     2068 
     2069 nlret:	return ("1"b);
     2070 
     2071      end tty_char;
     2072 
     2073 indicator_value: proc returns (bit (1) aligned);
     2074 
     2075 	if ^octal_char ()
     2076 	then return ("0"b);
     2077 
     2078 	return (token.Nvalue > 16);
     2079      end /* indicator_value */;
     2080 
     2081 
     2082 no_table: proc returns (bit (1) aligned);
     2083 
     2084 	return (tablep = null);
     2085      end /* no_table */;
     2086 
     2087 
     2088 rep_err_found: proc returns (bit (1) aligned);
     2089 
     2090 	return (rep_error);
     2091      end /* rep_err_found */;
     2092 
     2093 /* Syntax functions for function_key tables */
     2094 
     2095 fkey_entry_err: proc returns (bit (1) aligned);
     2096 
     2097 	if temp_key_index > KEY_CTRL_AND_SHIFT
     2098 	then return ("1"b);
     2099 	else return ("0"b);
     2100 
     2101      end fkey_entry_err;
     2102 
     2103 /* ACTION ROUTINES */
     2104 
     2105 init_type: proc;
     2106 
     2107 /* set up a new terminal type entry */
     2108 
     2109 	mode_line_length, mode_page_length = -1;
     2110 	dsatmdevp = null ();
     2111 
     2112 	ttt.n_tt_entries = ttt.n_tt_entries + 1;
     2113 	ttep = addr (ttt.tt_entries (ttt.n_tt_entries));
     2114 	unspec (tte.tables) = "0"b;
     2115 	tte = dft;
     2116 	tte.name = translate (token_value, ALL_CAPS, ALL_LOWERCASE);
     2117 	baud_error_printed, delay_stmt, block_ack_set, out_sus_set = "0"b;
     2118 	if dft_extended_tables_defined then do;
     2119 	     call set_extended;
     2120 	     extended_tables = dft_extended_tablesp -> extended_tables;
     2121 	end;
     2122 
     2123 	return;
     2124 
     2125      end /* init_type */;
     2126 
     2127 
     2128 finish_type: proc;
     2129 
     2130 	if tte.initial_string.offset ^= 0 then
     2131 	     call register_misc_reloc (tte.initial_string.offset);
     2132 	if tte.additional_info.offset ^= 0 then
     2133 	     call register_misc_reloc (tte.additional_info.offset);
     2134 	if tte.delay_rp ^= 0 then
     2135 	     call register_misc_reloc (tte.delay_rp);
     2136 	if tte.extended_tables_rp ^= 0 then
     2137 	     call register_misc_reloc (tte.extended_tables_rp);
     2138 	return;
     2139 
     2140      end finish_type;
     2141 
     2142 get_protocol: proc returns (fixed bin);
     2143 
     2144 	do i = 1 to hbound (protocol_names, 1);
     2145 	     if rtrim (token_value) = protocol_names (i) then
     2146 		return (protocol_values (i));
     2147 	end;
     2148 
     2149 	call ERROR (54);
     2150 	return (-1);
     2151 
     2152      end get_protocol;
     2153 
     2154 
     2155 define_table: proc (table_type, a_ptr, next_offset);
     2156 
     2157 /* assign an offset to a table */
     2158 
     2159 dcl  table_type fixed bin;
     2160 dcl  a_ptr ptr;
     2161 dcl  next_offset fixed bin (18);
     2162 
     2163 	if defined > 0				/* its name has been used */
     2164 	then if table_names.type (defined) ^= table_type
     2165 	     then do;				/* wrong type */
     2166 		call statement_error (22, token_value, table_types (table_names.type (defined)));
     2167 		tablep = null;
     2168 		return;
     2169 	     end;
     2170 	     else ;
     2171 
     2172 	else do;
     2173 	     defined, n_table_names = n_table_names + 1;
     2174 	     table_names.name (defined) = token_value;
     2175 	     table_names.type (defined) = table_type;
     2176 	end;
     2177 
     2178 	table_names.offset (defined) = next_offset;
     2179 	cur_table_name = token_value;
     2180 	tablep = ptr (a_ptr, next_offset);
     2181 	return;
     2182      end /* define_table */;
     2183 
     2184 
     2185 define_ct_table: proc (table_type);
     2186 
     2187 dcl  table_type fixed bin;
     2188 
     2189 	call define_table (table_type, tables_ptr, ct_table_offset);
     2190 	if tablep = null then return;
     2191 
     2192 	ct_table_offset = ct_table_offset + size (cv_trans) + 2;
     2193 
     2194 	tablep -> cv_trans_struc.version = CV_TRANS_VERSION;
     2195 	tablep -> cv_trans_struc.default = 0;
     2196 	tablep = addrel (tablep, 2);
     2197 	return;
     2198      end /* define_ct_table */;
     2199 
     2200 set_extended: proc;
     2201 
     2202 dcl  i fixed bin;
     2203 
     2204 	if tte.extended_tables_rp = 0 then do;
     2205 	     extended_tablesp = get_misc_space (size (extended_tables));
     2206 	     tte.extended_tables_rp = bin (rel (extended_tablesp));
     2207 	     unspec (extended_tables) = "0"b;
     2208 	     extended_tables.ntables = extended_tables_ntables;
     2209 	     do i = 1 to extended_tables.ntables;
     2210 		call register_misc_reloc (extended_tables.tables_rp (i));
     2211 	     end;
     2212 	end;
     2213 	extended_tablesp = ptr (misc_tables_ptr, tte.extended_tables_rp);
     2214 	return;
     2215 
     2216      end set_extended;
     2217 
     2218 define_video: proc;
     2219 
     2220 	ttyvtblp = addr (extended_tables_work.table);	/* build a table here temporarily */
     2221 	tty_video_table.nseq = N_VIDEO_SEQUENCES;
     2222 	tty_video_table.video_chars_len = 4096;		/* to clear max space */
     2223 	unspec (tty_video_table) = "0"b;
     2224 	tty_video_table.nseq = N_VIDEO_SEQUENCES;
     2225 	tty_video_table.version = tty_video_tables_version_1;
     2226 	extended_tables_work.seqs = "";
     2227 	seqs_index = 0;
     2228 	return;
     2229 
     2230      end define_video;
     2231 
     2232 finish_video_table: proc;
     2233 
     2234 /* Make a lotta checks:
     2235*   abspos, screenlinelne, screenheight must be defined,
     2236*   abspos char syntax, extensions, */
     2237 
     2238 dcl  p ptr;
     2239 
     2240 	tty_video_table.video_chars_len = seqs_index;
     2241 	if seqs_index > 0 then
     2242 	     tty_video_table.video_chars = substr (extended_tables_work.seqs, 1, seqs_index);
     2243 	p = get_misc_space (currentsize (tty_video_table));
     2244 	extended_tables.tables_rp (VIDEO_RP) = bin (rel (p));
     2245 	p -> tty_video_table = tty_video_table;
     2246 	ttyvtblp = p;
     2247 
     2248 	return;
     2249 
     2250      end finish_video_table;
     2251 
     2252 /* start define a new video sequence */
     2253 
     2254 start_vseq: proc (a_seqn);
     2255 
     2256 dcl  a_seqn fixed bin;
     2257 
     2258 	ttyvseqp = addr (tty_video_table.sequences (a_seqn));
     2259 	unspec (tty_video_seq) = "0"b;
     2260 	exp_char_index, unexp_char_index = 1;
     2261 	tty_video_seq.present = "1"b;
     2262 	return;
     2263 
     2264      end start_vseq;
     2265 
     2266 end_vseq: proc;
     2267 
     2268 	if exp_char_index <= 1 then do;		/* not really any sequence */
     2269 	     tty_video_seq.present = "0"b;
     2270 	     return;
     2271 	end;
     2272 	tty_video_seq.len = exp_char_index - 1;
     2273 	tty_video_seq.seq_index = seqs_index + 1;
     2274 	seqs_index = seqs_index + tty_video_seq.len;
     2275 	substr (extended_tables_work.seqs, tty_video_seq.seq_index, tty_video_seq.len) = substr (exp_string, 1, tty_video_seq.len);
     2276 	return;
     2277 
     2278      end end_vseq;
     2279 
     2280 /* DSA stuffs */
     2281 
     2282 define_dsatm_device: proc;
     2283 
     2284 dcl  dftdevp ptr init (null ());
     2285 
     2286 	dsatmdevp = addr (extended_tables_work.table);	/* build a table here temporarily */
     2287 
     2288 	/*** initialization with the structure defined in dsatm_data_ */
     2289 
     2290 	dftdevp = addr (dsatm_data_$device_multics_dft);
     2291 	dsatmdevp -> dsatm_device = dftdevp -> dsatm_device;
     2292 
     2293 	/*** update of the line and page length from the modes statement */
     2294 
     2295 	if mode_line_length ^= -1 then dsatm_device.line_length = mode_line_length;
     2296 	if mode_page_length ^= -1 then dsatm_device.page_length = mode_page_length;
     2297 
     2298 	/*** initialization of the internal variables */
     2299 
     2300 	dppx, scx, rcx, cex, csx, cssx, cfx, nlx, cax = 0;
     2301 
     2302 
     2303 	/*** initialization of dsatm_device structure */
     2304 
     2305 	dsatm_device.init_accept_confg = 0;
     2306 	dsatm_device.dpp (*) = 0;
     2307 	dsatm_device.sdp_dpp.version = 0;
     2308 	dsatm_device.sdp_dpp.sdp_class (*) = 0;
     2309 	dsatm_device.real_dpp.version = 0;
     2310 	dsatm_device.real_dpp.real_class (*) = 0;
     2311 	dsatm_device.real_dpp.real_model = "";
     2312 	dsatm_device.trans_dpp.version = 0;
     2313 	dsatm_device.dev_id = 0;
     2314 	dsatm_device.dev_type = 0;
     2315 	dsatm_device.attribute.shareability = 0;
     2316 	dsatm_device.attribute.alloc_unit = "0"b;
     2317 	dsatm_device.line_length = 0;
     2318 	dsatm_device.page_length = 0;
     2319 	dsatm_device.line_overflow = 0;
     2320 	dsatm_device.page_overflow = 0;
     2321 	dsatm_device.char_encoding (*) = 0;
     2322 	dsatm_device.char_set (*) = 0;
     2323 	dsatm_device.char_subset (*) = 0;
     2324 	dsatm_device.nat_lang (*) = 0;
     2325 	dsatm_device.compression (*) = 0;
     2326 	dsatm_device.char_font (*) = 0;
     2327 	dsatm_device.terminal_type = "";
     2328 	dsatm_device.ete_ack_level = 0;
     2329 	dsatm_device.max_rec_size = 0;
     2330 	unspec (dsatm_device.attentions) = "0"b;
     2331 	dsatm_device.stc_available = "0"b;
     2332 	unspec (dsatm_device.repetitive_parm_nb) = "0"b;
     2333 	unspec (dsatm_device.parm_rejected) = "0"b;
     2334 
     2335 	return;
     2336 
     2337      end define_dsatm_device;
     2338 
     2339 
     2340 legal_dpp: proc returns (bit (1) aligned);
     2341 
     2342 	name_to_test_for = translate (token_value, ALL_CAPS, ALL_LOWERCASE);
     2343 	do name_idx = 1 to hbound (DPP_NAME, 1);
     2344 	     if name_to_test_for = DPP_NAME (name_idx) then return ("1"b);
     2345 	end;
     2346 
     2347 	return ("0"b);
     2348 
     2349      end;
     2350 
     2351 set_dpp: proc;
     2352 
     2353 	dppx = dppx + 1;
     2354 	max_values = ltrim (char (hbound (dsatm_device.dpp, 1)));
     2355 	if dppx > hbound (dsatm_device.dpp, 1) then call statement_error (56, max_values, "");
     2356 
     2357 	dsatm_device.dpp (dppx) = name_idx;
     2358 
     2359      end;
     2360 
     2361 legal_sdp_class: proc returns (bit (1) aligned);
     2362 
     2363 	name_to_test_for = translate (token_value, ALL_CAPS, ALL_LOWERCASE);
     2364 	do name_idx = 1 to hbound (SC_NAME, 1);
     2365 	     if name_to_test_for = SC_NAME (name_idx) then return ("1"b);
     2366 	end;
     2367 
     2368 	return ("0"b);
     2369 
     2370      end;
     2371 
     2372 set_sdp_class: proc;
     2373 
     2374 	scx = scx + 1;
     2375 	max_values = ltrim (char (hbound (dsatm_device.sdp_dpp.sdp_class, 1)));
     2376 	if scx > hbound (dsatm_device.sdp_dpp.sdp_class, 1) then call statement_error (56, max_values, "");
     2377 
     2378 	dsatm_device.sdp_dpp.sdp_class (scx) = name_idx;
     2379 
     2380      end;
     2381 
     2382 legal_real_class: proc returns (bit (1) aligned);
     2383 
     2384 	name_to_test_for = translate (token_value, ALL_CAPS, ALL_LOWERCASE);
     2385 	do name_idx = 1 to hbound (RC_NAME, 1);
     2386 	     if name_to_test_for = RC_NAME (name_idx) then return ("1"b);
     2387 	end;
     2388 
     2389 	return ("0"b);
     2390 
     2391      end;
     2392 
     2393 set_real_class: proc;
     2394 
     2395 	rcx = rcx + 1;
     2396 	max_values = ltrim (char (hbound (dsatm_device.real_dpp.real_class, 1)));
     2397 	if rcx > hbound (dsatm_device.real_dpp.real_class, 1) then call statement_error (56, max_values, "");
     2398 
     2399 	dsatm_device.real_dpp.real_class (rcx) = name_idx;
     2400 
     2401      end;
     2402 
     2403 legal_dev_type: proc returns (bit (1) aligned);
     2404 
     2405 	name_to_test_for = translate (token_value, ALL_CAPS, ALL_LOWERCASE);
     2406 	do name_idx = 0 to hbound (DT_NAME, 1);
     2407 	     if name_to_test_for = DT_NAME (name_idx) then return ("1"b);
     2408 	end;
     2409 
     2410 	return ("0"b);
     2411 
     2412      end;
     2413 
     2414 legal_shareability: proc returns (bit (1) aligned);
     2415 
     2416 	name_to_test_for = translate (token_value, ALL_CAPS, ALL_LOWERCASE);
     2417 	do name_idx = 1 to hbound (SH_NAME, 1);
     2418 	     if name_to_test_for = SH_NAME (name_idx) then return ("1"b);
     2419 	end;
     2420 
     2421 	return ("0"b);
     2422 
     2423      end;
     2424 
     2425 legal_alloc_unit: proc returns (bit (1) aligned);
     2426 
     2427 	name_to_test_for = translate (token_value, ALL_CAPS, ALL_LOWERCASE);
     2428 	do name_idx = 1 to hbound (AU_NAME, 1);
     2429 	     if name_to_test_for = AU_NAME (name_idx) then return ("1"b);
     2430 	end;
     2431 
     2432 	return ("0"b);
     2433 
     2434      end;
     2435 
     2436 set_alloc_unit: proc;
     2437 
     2438 	dsatm_device.alloc_unit = dsatm_device.alloc_unit | AU_VALUE (name_idx);
     2439 
     2440      end;
     2441 
     2442 legal_line_overflow: proc returns (bit (1) aligned);
     2443 
     2444 	name_to_test_for = translate (token_value, ALL_CAPS, ALL_LOWERCASE);
     2445 	do name_idx = 2 to hbound (LO_NAME, 1);
     2446 	     if name_to_test_for = LO_NAME (name_idx) then return ("1"b);
     2447 	end;
     2448 
     2449 	return ("0"b);
     2450 
     2451      end;
     2452 
     2453 legal_page_overflow: proc returns (bit (1) aligned);
     2454 
     2455 	name_to_test_for = translate (token_value, ALL_CAPS, ALL_LOWERCASE);
     2456 	do name_idx = 2 to hbound (PO_NAME, 1) - 1;
     2457 	     if name_to_test_for = PO_NAME (name_idx) then return ("1"b);
     2458 	end;
     2459 
     2460 	return ("0"b);
     2461 
     2462      end;
     2463 
     2464 legal_char_encoding: proc returns (bit (1) aligned);
     2465 
     2466 	name_to_test_for = translate (token_value, ALL_CAPS, ALL_LOWERCASE);
     2467 	do name_idx = 1 to hbound (CE_NAME, 1);
     2468 	     if name_to_test_for = CE_NAME (name_idx) then return ("1"b);
     2469 	end;
     2470 
     2471 	return ("0"b);
     2472 
     2473      end;
     2474 
     2475 set_char_encoding: proc;
     2476 
     2477 	cex = cex + 1;
     2478 	max_values = ltrim (char (hbound (dsatm_device.char_encoding, 1)));
     2479 	if cex > hbound (dsatm_device.char_encoding, 1) then call statement_error (56, max_values, "");
     2480 
     2481 	dsatm_device.char_encoding (cex) = name_idx;
     2482 
     2483      end;
     2484 
     2485 legal_char_set: proc returns (bit (1) aligned);
     2486 
     2487 	name_to_test_for = translate (token_value, ALL_CAPS, ALL_LOWERCASE);
     2488 	do name_idx = 1 to hbound (CS_NAME, 1);
     2489 	     if name_to_test_for = CS_NAME (name_idx) then return ("1"b);
     2490 	end;
     2491 
     2492 	return ("0"b);
     2493 
     2494      end;
     2495 
     2496 set_char_set: proc;
     2497 
     2498 	csx = csx + 1;
     2499 	max_values = ltrim (char (hbound (dsatm_device.char_set, 1)));
     2500 	if csx > hbound (dsatm_device.char_set, 1) then call statement_error (56, max_values, "");
     2501 
     2502 	dsatm_device.char_set (csx) = name_idx;
     2503 
     2504      end;
     2505 
     2506 legal_char_subset: proc returns (bit (1) aligned);
     2507 
     2508 	name_to_test_for = translate (token_value, ALL_CAPS, ALL_LOWERCASE);
     2509 	do name_idx = 1 to hbound (CSS_NAME, 1);
     2510 	     if name_to_test_for = CSS_NAME (name_idx) then return ("1"b);
     2511 	end;
     2512 
     2513 	return ("0"b);
     2514 
     2515      end;
     2516 
     2517 set_char_subset: proc;
     2518 
     2519 	cssx = cssx + 1;
     2520 	max_values = ltrim (char (hbound (dsatm_device.char_subset, 1)));
     2521 	if cssx > hbound (dsatm_device.char_subset, 1) then call statement_error (56, max_values, "");
     2522 
     2523 	dsatm_device.char_subset (cssx) = name_idx;
     2524 
     2525      end;
     2526 
     2527 legal_char_font: proc returns (bit (1) aligned);
     2528 
     2529 	name_to_test_for = translate (token_value, ALL_CAPS, ALL_LOWERCASE);
     2530 	do name_idx = 1 to hbound (CF_NAME, 1);
     2531 	     if name_to_test_for = CF_NAME (name_idx) then return ("1"b);
     2532 	end;
     2533 
     2534 	return ("0"b);
     2535 
     2536      end;
     2537 
     2538 set_char_font: proc;
     2539 
     2540 	cfx = cfx + 1;
     2541 	max_values = ltrim (char (hbound (dsatm_device.char_font, 1)));
     2542 	if cfx > hbound (dsatm_device.char_font, 1) then call statement_error (56, max_values, "");
     2543 
     2544 	dsatm_device.char_font (cfx) = name_idx;
     2545 
     2546      end;
     2547 
     2548 legal_nat_lang: proc returns (bit (1) aligned);
     2549 
     2550 	name_to_test_for = translate (token_value, ALL_CAPS, ALL_LOWERCASE);
     2551 	do name_idx = 1 to hbound (NL_NAME, 1);
     2552 	     if name_to_test_for = NL_NAME (name_idx) then return ("1"b);
     2553 	end;
     2554 
     2555 	return ("0"b);
     2556 
     2557      end;
     2558 
     2559 set_nat_lang: proc;
     2560 
     2561 	nlx = nlx + 1;
     2562 	max_values = ltrim (char (hbound (dsatm_device.nat_lang, 1)));
     2563 	if nlx > hbound (dsatm_device.nat_lang, 1) then call statement_error (56, max_values, "");
     2564 
     2565 	dsatm_device.nat_lang (nlx) = name_idx;
     2566 
     2567      end;
     2568 
     2569 legal_compression: proc returns (bit (1) aligned);
     2570 
     2571 	name_to_test_for = translate (token_value, ALL_CAPS, ALL_LOWERCASE);
     2572 	do name_idx = 1 to hbound (CA_NAME, 1);
     2573 	     if name_to_test_for = CA_NAME (name_idx) then return ("1"b);
     2574 	end;
     2575 
     2576 	return ("0"b);
     2577 
     2578      end;
     2579 
     2580 set_compression: proc;
     2581 
     2582 	cax = cax + 1;
     2583 	max_values = ltrim (char (hbound (dsatm_device.compression, 1)));
     2584 	if cax > hbound (dsatm_device.compression, 1) then call statement_error (56, max_values, "");
     2585 
     2586 	dsatm_device.compression (cax) = name_idx;
     2587 
     2588      end;
     2589 
     2590 legal_attd: proc returns (bit (1) aligned);
     2591 dcl  attx fixed bin;
     2592 
     2593 	attx = 0;
     2594 	go to common;
     2595 
     2596 legal_att1: entry returns (bit (1) aligned);
     2597 
     2598 	attx = 1;
     2599 	go to common;
     2600 
     2601 common:
     2602 
     2603 	if /* case */ token_value = "BREAK" | token_value = "break" then
     2604 	     dsatm_device.attentions.attn (attx).invocation.break = "1"b;
     2605 
     2606 	else if token_value = "SEC_DIALOG" | token_value = "sec_dialog" then
     2607 	     dsatm_device.attentions.attn (attx).invocation.sec_dialog = "1"b;
     2608 
     2609 	else if tty_char () | (token.quoted_string & token.Lvalue = 2) then do;
     2610 	     dsatm_device.attentions.attn (attx).invocation.string = "1"b;
     2611 	     dsatm_device.attentions.attn (attx).string_value (1) = token_value;
     2612 	end;
     2613 
     2614 	else return ("0"b);
     2615 
     2616 	return ("1"b);
     2617 
     2618      end;
     2619 
     2620 finish_dsatm_device: proc;
     2621 
     2622 dcl  p ptr;
     2623 
     2624 	p = get_misc_space (currentsize (dsatm_device));
     2625 	extended_tables.tables_rp (DSATM_DEVICE_RP) = bin (rel (p));
     2626 	p -> dsatm_device = dsatm_device;
     2627 	dsatmdevp = p;
     2628 
     2629 	return;
     2630 
     2631      end /* finish_dsatm_device */;
     2632 
     2633 define_special: proc;
     2634 
     2635 	call define_table (SPEC_TYPE, special_tables_ptr, spec_offset);
     2636 	max_output_escapes,
     2637 	     input_escapes.len = 0;
     2638 	return;
     2639      end /* define_special */;
     2640 
     2641 
     2642 check_special: proc;
     2643 
     2644 	if tablep -> special_chars.nl_seq.count = 0
     2645 	then call semant_error (23, table_names.name (defined), "new_line");
     2646 
     2647 	if tablep -> special_chars.cr_seq.count = 0 &
     2648 	     tablep -> special_chars.bs_seq.count = 0
     2649 	then call semant_error (23, table_names.name (defined), "carriage_return and backspace");
     2650 
     2651 	tablep -> special_chars.escape_length = max_output_escapes;
     2652 	tablep -> special_chars.not_edited_escapes = addr (not_edited) -> escapes;
     2653 	tablep -> special_chars.edited_escapes = addr (edited) -> escapes;
     2654 	tablep -> special_chars.input_escapes.len = input_escapes.len;
     2655 	tablep -> special_chars.input_escapes.str = input_escapes.str;
     2656 	tablep -> special_chars.input_results.str = input_results.str;
     2657 
     2658 	length_in_words = divide (length (unspec (tablep -> special_chars)) + 35, 36, 17);
     2659 	spec_offset = spec_offset + length_in_words;
     2660 
     2661 	return;
     2662      end /* check_special */;
     2663 
     2664 
     2665 copy_string: proc (targetp);
     2666 
     2667 dcl  targetp ptr;
     2668 dcl  1 target aligned based (targetp),
     2669        2 offset fixed bin (18),
     2670        2 len fixed bin;
     2671 
     2672 dcl  stringp ptr;
     2673 dcl  stringl fixed bin;
     2674 dcl  target_string char (stringl) based aligned;
     2675 dcl  target_string_array (stringl) char (1) based;
     2676 
     2677 	stringl = token.Lvalue + 2;
     2678 	stringp = get_misc_char_space (stringl);
     2679 	target.len = token.Lvalue;
     2680 	target.offset = bin (rel (stringp));
     2681 
     2682 	stringp -> target_string = token_value;
     2683 	addr (stringp -> target_string_array (stringl - 1)) -> based_fb17 = 0;
     2684 
     2685 	return;
     2686      end /* copy_string */;
     2687 
     2688 
     2689 push_rep: proc;
     2690 
     2691 /* for starting repetition factors in string specifications */
     2692 
     2693 	if rep_depth >= max_rep_depth
     2694 	then do;
     2695 	     call ERROR (37);
     2696 	     rep_error = "1"b;
     2697 	     return;
     2698 	end;
     2699 
     2700 	if token.Nvalue <= 0
     2701 	then do;
     2702 	     call statement_error (36, token_value, "");
     2703 	     rep_error = "1"b;
     2704 	     return;
     2705 	end;
     2706 
     2707 	rep_depth = rep_depth + 1;
     2708 	rep_factor (rep_depth) = token.Nvalue;
     2709 
     2710 	if token.Nvalue > 1
     2711 	then do;
     2712 	     rep_used = "1"b;
     2713 	     addr (unexpanded (unexp_char_index)) -> based_fb17 = -token.Nvalue;
     2714 	     unexp_char_index = unexp_char_index + 2;
     2715 	     rep_start (rep_depth) = exp_char_index;
     2716 	end;
     2717 
     2718 	return;
     2719      end /* push_rep */;
     2720 
     2721 
     2722 pop_rep: proc;
     2723 
     2724 /* processes ">" at end of repeated spec */
     2725 
     2726 	if rep_depth <= 0
     2727 	then do;
     2728 	     call ERROR (38);
     2729 	     rep_error = "1"b;
     2730 	     return;
     2731 	end;
     2732 
     2733 	if rep_factor (rep_depth) > 1
     2734 	then do;
     2735 	     addr (unexpanded (unexp_char_index)) -> based_fb17 = -1;
     2736 	     unexp_char_index = unexp_char_index + 2;
     2737 
     2738 	     rep_length = exp_char_index - rep_start (rep_depth);
     2739 	     rep_item = substr (exp_string, rep_start (rep_depth), rep_length);
     2740 
     2741 	     do i = 2 to rep_factor (rep_depth);	/* copy the string the requisite number of times */
     2742 		substr (exp_string, exp_char_index, rep_length) = rep_item;
     2743 		exp_char_index = exp_char_index + rep_length;
     2744 	     end;
     2745 	end;
     2746 
     2747 	rep_depth = rep_depth - 1;
     2748 	return;
     2749      end /* pop_rep */;
     2750 
     2751 
     2752 insert_single_char: proc (n);
     2753 
     2754 dcl  n fixed bin (18);
     2755 
     2756 	expanded (exp_char_index) = n;
     2757 	unexpanded (unexp_char_index) = n;
     2758 	exp_char_index = exp_char_index + 1;
     2759 	unexp_char_index = unexp_char_index + 1;
     2760 	return;
     2761 
     2762      end insert_single_char;
     2763 
     2764 insert_quoted_string: proc;
     2765 
     2766 dcl  i fixed bin;
     2767 dcl  c char (1);
     2768 
     2769 	do i = 1 to token.Lvalue;
     2770 	     c = substr (token_value, i, 1);
     2771 	     call insert_single_char (rank (c));
     2772 	end;
     2773 	return;
     2774 
     2775      end insert_quoted_string;
     2776 
     2777 video_encode_pad: proc (time);
     2778 
     2779 dcl  time fixed bin (35);
     2780 
     2781 	tty_video_seq.cpad_present = "1"b;
     2782 	if time < 100 then do;
     2783 	     call ERROR (48);
     2784 	     return;
     2785 	end;
     2786 	tty_video_seq.cpad = divide (time + 99, 100, 18, 0);
     2787 	return;
     2788 
     2789      end video_encode_pad;
     2790 
     2791 store_string: proc (targetp);
     2792 
     2793 /* sets up pointer and length of string specified in octal */
     2794 
     2795 dcl  targetp ptr;
     2796 
     2797 dcl  1 target based (targetp) aligned,
     2798        2 offset fixed bin (18),
     2799        2 len fixed bin;
     2800 
     2801 dcl  target_string char (stringl) based;
     2802 dcl  target_string_array (stringl) char (1) based;
     2803 dcl  stringl fixed bin;
     2804 dcl  stringp ptr;
     2805 
     2806 	if rep_depth ^= 0
     2807 	then do;
     2808 	     call ERROR (38);
     2809 	     return;
     2810 	end;
     2811 
     2812 	exp_char_index = exp_char_index - 1;
     2813 	unexp_char_index = unexp_char_index - 1;
     2814 
     2815 	stringl = exp_char_index + 2;
     2816 	if rep_used then stringl = stringl + unexp_char_index;
     2817 	stringp = get_misc_char_space (stringl);
     2818 
     2819 	target.len = exp_char_index;
     2820 	target.offset = bin (rel (stringp));
     2821 
     2822 	substr (stringp -> target_string, 1, exp_char_index) = substr (exp_string, 1, exp_char_index);
     2823 
     2824 	if ^rep_used				/* in this case, no need to store unexpanded version */
     2825 	then
     2826 	     addr (stringp -> target_string_array (exp_char_index + 1)) -> based_fb17 = -1;
     2827 
     2828 	else do;
     2829 	     addr (stringp -> target_string_array (exp_char_index + 1)) -> based_fb17 = unexp_char_index;
     2830 	     substr (stringp -> target_string, exp_char_index + 3, unexp_char_index) =
     2831 		substr (unexp_string, 1, unexp_char_index);
     2832 	end;
     2833 
     2834 	return;
     2835      end /* store_string */;
     2836 
     2837 
     2838 set_table: proc (target, table_type);
     2839 
     2840 dcl  target fixed bin (18);
     2841 dcl  table_type fixed bin;
     2842 
     2843 	do i = 1 to n_table_names;
     2844 	     if table_names.name (i) = token_value
     2845 	     then if table_names.type (i) ^= table_type
     2846 		then do;
     2847 		     call statement_error (22, token_value, table_types (table_names.type (i)));
     2848 		     target = 0;
     2849 		     return;
     2850 		end;
     2851 
     2852 		else do;
     2853 		     target = i;			/* use index into names table for now */
     2854 		     return;
     2855 		end;
     2856 	end;
     2857 
     2858 /* didn't find it, have to add entry */
     2859 
     2860 	n_table_names = i;				/* i.e., n_tables_names + 1 */
     2861 	table_names.name (n_table_names) = token_value;
     2862 	table_names.type (n_table_names) = table_type;
     2863 	table_names.offset (n_table_names) = -1;
     2864 	target = n_table_names;
     2865 
     2866 	return;
     2867      end /* set_table */;
     2868 
     2869 
     2870 copy_type: proc;
     2871 
     2872 dcl  hold_extended_tables_rp fixed bin (18);
     2873 
     2874 /* for like attribute */
     2875 
     2876 	temp_ttep = addr (ttt.tt_entries (token.Nvalue));
     2877 	real_name = tte.name;			/* hang on to name of new type */
     2878 	hold_extended_tables_rp = tte.extended_tables_rp;
     2879 	tte = temp_ttep -> tte;
     2880 	tte.name = real_name;			/* put correct name back */
     2881 	tte.like_type = token.Nvalue;			/* display_ttt needs this */
     2882 	tte.bauds_overridden, tte.delay_overridden (*) = "0"b;
     2883 	if tte.extended_tables_rp ^= 0 then do;		/* must have one of our own */
     2884 	     tte.extended_tables_rp = hold_extended_tables_rp;
     2885 	     call set_extended;
     2886 	     extended_tables = ptr (misc_tables_ptr, temp_ttep -> tte.extended_tables_rp) -> extended_tables;
     2887 	end;
     2888 	return;
     2889      end /* copy_type */;
     2890 
     2891 
     2892 make_delay_entry: proc (baud_rate);
     2893 
     2894 /* when a new baud rate specified, set up an array of delay values for it */
     2895 
     2896 dcl  baud_rate fixed bin;
     2897 
     2898 	if delay_stmt
     2899 	then do;
     2900 	     if ^baud_error_printed
     2901 	     then do;
     2902 		call statement_error (24, tte.name, "");
     2903 		baud_error_printed = "1"b;
     2904 	     end;
     2905 	     return;
     2906 	end;
     2907 
     2908 	if baudx = 1				/* first one for this terminal type */
     2909 	then do;
     2910 	     tte.delay_rp = next_misc_offset;
     2911 	     delay_tablep = ptr (misc_tables_ptr, next_misc_offset);
     2912 	     next_misc_offset = next_misc_offset + 1;
     2913 	     delay_table.n_bauds = 1;
     2914 	     if tte.like_type ^= 0
     2915 	     then tte.bauds_overridden = "1"b;
     2916 	end;
     2917 
     2918 	else delay_table.n_bauds = delay_table.n_bauds + 1;
     2919 
     2920 	delay_table.baud_rate (delay_table.n_bauds) = baud_rate;
     2921 	delay_table.version (delay_table.n_bauds) = DELAY_VERSION;
     2922 	delay_table.mbz (delay_table.n_bauds) = 0;	/* "default" word */
     2923 
     2924 	next_misc_offset = next_misc_offset + 9;	/* for baud rate, version, default word, 6 delay values */
     2925 	return;
     2926      end /* make_delay_entry */;
     2927 
     2928 
     2929 set_delay: proc;
     2930 
     2931 	if tte.delay_rp = 0
     2932 	then do;
     2933 	     if n_dft_bauds <= 0
     2934 	     then do;
     2935 		if ^delay_error_printed
     2936 		then do;
     2937 		     call statement_error (25, tte.name, "");
     2938 		     delay_error_printed = "1"b;
     2939 		end;
     2940 		return;
     2941 	     end;
     2942 
     2943 	     do baudx = 1 to n_dft_bauds;
     2944 		call make_delay_entry (dft_bauds (baudx));
     2945 	     end;
     2946 	end;
     2947 
     2948 	delay_tablep = ptr (misc_tables_ptr, tte.delay_rp);
     2949 
     2950 	if tte.like_type ^= 0			/* overriding "like" */
     2951 	then if ^tte.bauds_overridden			/* but using same bauds statement */
     2952 	     then do;
     2953 		if ^delay_stmt			/* first one */
     2954 		then do;				/* copy delay table of original type */
     2955 		     new_delay_table_ptr = ptr (misc_tables_ptr, next_misc_offset);
     2956 		     new_delay_table_ptr -> delay_table.n_bauds = delay_table.n_bauds;
     2957 		     do baudx = 1 to delay_table.n_bauds;
     2958 			new_delay_table_ptr -> delay_table.delay_array (baudx) =
     2959 			     delay_table.delay_array (baudx);
     2960 		     end;
     2961 
     2962 		     tte.delay_rp = next_misc_offset;
     2963 		     next_misc_offset = next_misc_offset + 1 + 9 * (baudx - 1);
     2964 		     delay_tablep = new_delay_table_ptr;
     2965 		end;
     2966 
     2967 		tte.delay_overridden (delayx) = "1"b;
     2968 	     end;
     2969 
     2970 	delay_stmt = "1"b;				/* we've got one now */
     2971 	n_spec = n_spec + 1;
     2972 
     2973 	if n_spec > delay_table.n_bauds		/* more values than we have room for */
     2974 	then do;
     2975 	     if ^delay_error_printed
     2976 	     then do;
     2977 		call ERROR (26);
     2978 		delay_error_printed = "1"b;
     2979 	     end;
     2980 	     return;
     2981 	end;
     2982 
     2983 	if delayx = 2 | delayx = 4
     2984 	then cur_delay_value = addr (floating_delay_value) -> based_fb; /* fake the floating ones */
     2985 	else cur_delay_value = token.Nvalue;
     2986 
     2987 	delay_table.delay_array (n_spec).delays (delayx) = cur_delay_value;
     2988 	return;
     2989      end /* set_delay */;
     2990 
     2991 
     2992 set_up_answerback: proc;
     2993 
     2994 	if n_answerbacks = 0
     2995 	then answerback_entry_ptr = ans_back_table_ptr;
     2996 	else answerback_entry_ptr = addrel (answerback_entry_ptr,
     2997 		divide (length (unspec (answerback_entry)) + 35, 36, 17, 0));
     2998 	n_answerbacks = n_answerbacks + 1;
     2999 	answerback_entry.next,
     3000 	     answerback_entry.term_type_index = 0;
     3001 
     3002 	ansbck_char_index = 1;
     3003 	return;
     3004      end /* set_up_answerback */;
     3005 
     3006 
     3007 check_for_any: proc;
     3008 
     3009 	if temp_dftte (default_count).baud ^= 0 |
     3010 	     temp_dftte (default_count).line_type ^= 0
     3011 	then call ERROR (33);
     3012 	return;
     3013      end /* check_for_any */;
     3014 
     3015 /* Get current token numeric value in character form */
     3016 
     3017 make_char: proc returns (char (1));
     3018 
     3019 	return (byte (token.Nvalue));
     3020 
     3021      end make_char;
     3022 
     3023 /* get some space in the misc_tables segment */
     3024 
     3025 get_misc_space: proc (n) returns (ptr);
     3026 
     3027 dcl  n fixed bin;
     3028 dcl  p ptr;
     3029 
     3030 	p = ptr (misc_tables_ptr, next_misc_offset);
     3031 	next_misc_offset = next_misc_offset + n;
     3032 	return (p);
     3033 
     3034      end get_misc_space;
     3035 
     3036 get_misc_char_space: proc (n) returns (ptr);
     3037 
     3038 dcl  n fixed bin;
     3039 
     3040 	return (get_misc_space (divide (n + 3, 4, 17, 0)));
     3041 
     3042      end get_misc_char_space;
     3043 
     3044 /* keep track of relocations of stuff in misc space */
     3045 
     3046 register_misc_reloc: proc (n);
     3047 
     3048 dcl  n fixed bin (18);
     3049 
     3050 	misc_relocs_count = misc_relocs_count + 1;
     3051 	misc_relocs (misc_relocs_count) = addr (n);
     3052 	return;
     3053 
     3054      end register_misc_reloc;
     3055 
     3056 /* preform the relocations */
     3057 
     3058 perform_misc_relocs: proc;
     3059 
     3060 dcl  reloc_abort condition;
     3061 dcl  i fixed bin;
     3062 dcl  p ptr;
     3063 dcl  based_rp fixed bin (18) based (p);
     3064 dcl  temp_rp fixed bin (18);
     3065 
     3066 	do i = 1 to misc_relocs_count;
     3067 	     p = misc_relocs (i);
     3068 	     if baseno (tttp) = baseno (p) then		/* in ttt segment */
     3069 		call add_increment (based_rp);
     3070 	     else if baseno (misc_tables_ptr) = baseno (p) then do;
     3071 		temp_rp = bin (rel (p));
     3072 		call add_increment (temp_rp);
     3073 		p = ptr (tttp, temp_rp);
     3074 		call add_increment (based_rp);
     3075 	     end;
     3076 	     else signal reloc_abort;
     3077 	end;
     3078 	return;
     3079 
     3080      end perform_misc_relocs;
     3081 
     3082 /* Function key table routines */
     3083 
     3084 define_fkey_table: proc;
     3085 
     3086 	call define_table (FKEY_TYPE, fkey_tables_ptr, fkey_table_offset);
     3087 	function_key_data_ptr = addr (extended_tables_work.table);
     3088 
     3089 /* Initialize */
     3090 
     3091 	unspec (function_key_data.sequence) = "0"b;
     3092 	unspec (function_key_data.cursor_motion_keys) = "0"b;
     3093 	function_key_data_highest = -1;
     3094 	function_key_data.version = function_key_data_version_1;
     3095 	seqs_index = 0;
     3096 	extended_tables_work.seqs = "";
     3097 
     3098      end define_fkey_table;
     3099 
     3100 finish_fkey_table: proc;
     3101 
     3102 dcl  table_p ptr;
     3103 dcl  seq_p ptr;
     3104 
     3105 	function_key_data.highest = function_key_data_highest;
     3106 	if function_key_data.highest < 0		/* no function keys defined */
     3107 	then do;
     3108 	     function_key_data.highest = 0;
     3109 	     function_key_data.function_keys (0, *) = 0;
     3110 	end;
     3111 	else do i = 1 to function_key_data.highest;
     3112 	     key_info_ptr = addr (function_key_data.function_keys (i, 0));
     3113 	     if key_info.sequence_length = 0
     3114 	     then call semant_error (51, cur_table_name, ltrim (char (i)));
     3115 	end;
     3116 	table_p = ptr (fkey_tables_ptr, fkey_table_offset);
     3117 	seq_p = ptr (fkey_tables_ptr, fkey_table_offset + currentsize (function_key_data));
     3118 	function_key_data.seq_len = seqs_index;
     3119 	function_key_data.seq_ptr = addr (extended_tables_work.seqs);
     3120 	table_p -> function_key_data = function_key_data;
     3121 	seq_p -> function_key_seqs = function_key_seqs;
     3122 	tablep -> function_key_data.seq_ptr = seq_p;
     3123 	fkey_table_offset = fkey_table_offset + currentsize (function_key_data) + currentsize (function_key_seqs);
     3124 	if mod (fkey_table_offset, 2) > 0
     3125 	then fkey_table_offset = fkey_table_offset + 1;
     3126 
     3127      end finish_fkey_table;
     3128 
     3129 start_fkey_seq: proc (a_ptr);
     3130 
     3131 dcl  a_ptr ptr;
     3132 
     3133 	temp_key_infop = a_ptr;
     3134 	temp_key_index = 0;
     3135 	exp_char_index, unexp_char_index = 1;
     3136 
     3137      end start_fkey_seq;
     3138 
     3139 end_fkey_seq: proc;
     3140 
     3141 	if exp_char_index > 1
     3142 	then do;
     3143 	     if temp_key_index = KEY_PLAIN &
     3144 		temp_key_info (temp_key_index).sequence_length > 0
     3145 	     then call statement_error (53, cur_table_name, "");
     3146 	     temp_key_info (temp_key_index).sequence_length = exp_char_index - 1;
     3147 	     temp_key_info (temp_key_index).sequence_index = seqs_index + 1;
     3148 	     seqs_index = seqs_index + temp_key_info (temp_key_index).sequence_length;
     3149 	     substr (extended_tables_work.seqs,
     3150 		temp_key_info (temp_key_index).sequence_index,
     3151 		temp_key_info (temp_key_index).sequence_length)
     3152 		= substr (exp_string, 1, temp_key_info (temp_key_index).sequence_length);
     3153 	end;
     3154 	temp_key_index = temp_key_index + 1;
     3155 	exp_char_index, unexp_char_index = 1;
     3156 
     3157      end end_fkey_seq;
     3158 
     3159 init_fkey_area: proc (curr_index);
     3160 
     3161 dcl  curr_index fixed bin;
     3162 dcl  j fixed bin;
     3163 
     3164 	if curr_index > function_key_data_highest
     3165 	then do;
     3166 	     do i = function_key_data_highest + 1 to curr_index;
     3167 		do j = lbound (function_key_data.function_keys, 2) to hbound (function_key_data.function_keys, 2);
     3168 		     unspec (function_key_data.function_keys (i, j)) = "0"b;
     3169 		end;
     3170 	     end;
     3171 	     function_key_data_highest = curr_index;
     3172 	end;
     3173 
     3174      end init_fkey_area;
     3175 
     3176 /* ERROR CONTROL TABLE */
     3177 
     3178 dcl  1 error_control_table (56) aligned int static options (constant),
     3179        2 severity fixed bin (17) unal init (
     3180 	  3,					/* 1 */
     3181 	  1,					/* 2 */
     3182 	  (4) 3,					/* 3-6 */
     3183 	  3,					/* 7 */
     3184 	  (4) 3,					/* 8-11 */
     3185 	  1,					/* 12 */
     3186 	  (10) 3,					/* 13-22 */
     3187 	  1,					/* 23 */
     3188 	  (8) 3,					/* 24-31 */
     3189 	  (2) 1,					/* 32-33 */
     3190 	  2,					/* 34 */
     3191 	  1,					/* 35 */
     3192 	  (13) 3,					/* 36-48 */
     3193 	  1,					/* 49 */
     3194 	  3,					/* 50 */
     3195 	  3,					/* 51 */
     3196 	  3,					/* 52 */
     3197 	  1,					/* 53 */
     3198 	  1,					/* 54 */
     3199 	  (2) 3),					/* 55-56 */
     3200 
     3201        2 Soutput_stmt bit (1) unal init (
     3202 
     3203 	  "0"b,					/* 1 */
     3204 	  (5) (1)"1"b,				/* 2-6 */
     3205 	  "0"b,					/* 7 */
     3206 	  (3) (1)"1"b,				/* 8-10 */
     3207 	  (3) (1)"0"b,				/* 11-13 */
     3208 	  (9) (1)"1"b,				/* 14-22 */
     3209 	  "0"b,					/* 23 */
     3210 	  (3) (1)"1"b,				/* 24-26 */
     3211 	  (7) (1)"0"b,				/* 27-33 */
     3212 	  "1"b,					/* 34 */
     3213 	  "0"b,					/* 35 */
     3214 	  (5) (1)"1"b,				/* 36-40 */
     3215 	  "0"b,					/* 41 */
     3216 	  "1"b,					/* 42 */
     3217 	  (2) (1)"0"b,				/* 43-44 */
     3218 	  (2) (1)"1"b,				/* 45-46 */
     3219 	  "0"b,					/* 47 */
     3220 	  (3) (1)"1"b,				/* 48-50 */
     3221 	  "0"b,					/* 51 */
     3222 	  (2) (1)"1"b,				/* 52-53 */
     3223 	  "0"b,					/* 54 */
     3224 	  (2) (1)"1"b),				/* 55-56 */
     3225 
     3226        2 message char (100) varying init (
     3227 
     3228 	  "TTF is empty.",				/* 1 */
     3229 	  "Unrecognized mode ""^a"" specified.",	/* 2 */
     3230 	  "Invalid editing char ""^a"" specified.",	/* 3 */
     3231 	  "Value must be yes or no.",			/* 4 */
     3232 	  "Keyword ""^a"" unrecognized or out of order.", /* 5 */
     3233 	  "Syntax error.",				/* 6 */
     3234 	  "Unexpected end of TTF encountered.",		/* 7 */
     3235 	  "Invalid baud rate ^a specified.",		/* 8 */
     3236 	  "Invalid delay value ^a specified.",		/* 9 */
     3237 	  "Invalid line type ^a specified.",		/* 10 */
     3238 	  "Too many entries in table ""^a"".",		/* 11 */
     3239 	  "Table ""^a"" has fewer than 128 entries. Remainder have been set to 0.", /* 12 */
     3240 	  "Table ""^a"" contains invalid entry ""^a"".",	/* 13 */
     3241 	  """^a"" is not a valid indicator value.",	/* 14 */
     3242 	  "More than 3 items in a sequence.",		/* 15 */
     3243 	  """^a"" is not a valid sequence element.",	/* 16 */
     3244 	  """^a"" is not a valid answerback specification.", /* 17 */
     3245 	  "Type ""^a"" has not been defined.",		/* 18 */
     3246 	  "The name ""^a"" contains an invalid character.", /* 19 */
     3247 	  "Type ""^a"" has already been defined.",	/* 20 */
     3248 	  "Table ""^a"" has already been defined.",	/* 21 */
     3249 	  "Table ""^a"" has already been specified as a ^a table.", /* 22 */
     3250 	  "Table ""^a"" contains a null ^a sequence.",	/* 23 */
     3251 	  "A bauds statement appears after a delay statement for terminal type ""^a"".", /* 24 */
     3252 	  "No baud rates have been specified for terminal type ""^a"".", /* 25 */
     3253 	  "More delay values than baud rates specified.", /* 26 */
     3254 	  "Text follows the end statement.",		/* 27 */
     3255 	  "Table ""^a"" has been referenced but not defined.", /* 28 */
     3256 	  "Type ""^a"" has been referenced in default types table but not defined.", /* 29 */
     3257 	  "Type ""^a"" has an output conversion table but no special table.", /* 30 */
     3258 	  "Type ""^a"" uses conversion table ""^a"", which contains an escape not represented in the special table.", /* 31 */
     3259 	  "No default_types statement specified.",	/* 32 */
     3260 	  "Last entry in default_types statement does not specify ""any any"".", /* 33 */
     3261 	  "Unrecognized preaccess command ^a specified.", /* 34 */
     3262 	  "No type specified for preaccess command ^a.",	/* 35 */
     3263 	  "Invalid repetition factor ^a specified.",	/* 36 */
     3264 	  "Repetition factors nested too deep.",	/* 37 */
     3265 	  "Unbalanced brackets.",			/* 38 */
     3266 	  "Name ""^a"" is too long.",			/* 39 */
     3267 	  "Mode delimiter missing at or before ""^a"".",	/* 40 */
     3268 	  "Entry for type ^a contains one null and one non-null framing character.", /* 41 */
     3269 	  "Attempt to specify incompatible output flow control protocols.", /* 42 */
     3270 	  "Inconsistency in specification of output flow control for type ^a.", /* 43 */
     3271 	  "Inconsistency in specification of input flow control for type ^a.", /* 44 */
     3272 	  "Invalid token ""^a"" in video control sequence.", /* 45 */
     3273 	  "Invalid token ""^a"" in video argument sequence.", /* 46 */
     3274 	  "Video control sequence too long or empty.",	/* 47 */
     3275 	  "Unexpressible padding time: ^a.",		/* 48 */
     3276 	  "This character specification will convert invalidly without -ck1dig. Precede it by a zero. ^a", /* 49 */
     3277 	  "Invalid token ""^a"" in function key control sequence.", /* 50 */
     3278 	  "Table ""^a"", missing function key data for key(^a)", /* 51 */
     3279 	  "Table ""^a"", too many control sequences specified for a function key.", /* 52 */
     3280 	  "Table ""^a"", function key control sequence already defined.", /* 53 */
     3281 	  "Invalid protocol ""^a"" specified.",		/* 54 */
     3282 	  "Option not defined for this keyword: ^a.",	/* 55 */
     3283 	  "Maximum number of allowable options ""^a"" exceeded."), /* 56 */
     3284 
     3285        2 brief_message char (30) varying init (
     3286 
     3287 	  "",					/* 1 */
     3288 	  (2) (1)"^a",				/* 2-3 */
     3289 	  "",					/* 4 */
     3290 	  "^a",					/* 5 */
     3291 	  (2) (1)"",				/* 6-7 */
     3292 	  (5) (1)"^a",				/* 8-12 */
     3293 	  """^a"" contains ""^a""",			/* 13 */
     3294 	  "^a",					/* 14 */
     3295 	  "",					/* 15 */
     3296 	  (6) (1)"^a",				/* 16-21 */
     3297 	  "^a is ^a",				/* 22 */
     3298 	  "^a has null ^a",				/* 23 */
     3299 	  (2) (1)"^a",				/* 24-25 */
     3300 	  (2) (1)"",				/* 26-27 */
     3301 	  (3) (1)"^a",				/* 28-30 */
     3302 	  "^a uses ^a",				/* 31 */
     3303 	  (2) (1)"",				/* 32-33 */
     3304 	  (3) (1)"^a",				/* 34-36 */
     3305 	  (2) (1)"",				/* 37-38 */
     3306 	  (3) (1)"^a",				/* 39-41 */
     3307 	  "",					/* 42 */
     3308 	  (4) (1)"^a",				/* 43-46 */
     3309 	  "",					/* 47 */
     3310 	  (3) (1)"^a",				/* 48-50 */
     3311 	  "Table ""^a"" - key(^a)",			/* 51 */
     3312 	  (2) (1)"Table ""^a""",			/* 52-53 */
     3313 	  "^a",					/* 54 */
     3314 	  "Option not defined: ""^a"".",		/* 55 */
     3315 	  "Max number of options is ^a.");		/* 56 */
     3316 
     3317 
     3318      dcl	TRACING			bit(1) aligned int static init("0"b);
     3319 
     3320 
 17     1 	/* START OF:	rdc_start_.incl.pl1		  *  *  *  *  *  *  */
 17     2 
 17     3 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
 17     4 	/*							*/
 17     5 	/* N__a_m_e:  rdc_start_.incl.pl1					*/
 17     6 	/*							*/
 17     7 	/*      This include segment is used by compilers generated by the	*/
 17     8 	/* reduction_compiler.  Such compilers include a SEMANTIC_ANALYSIS	*/
 17     9 	/* subroutine generated by the reduction_compiler.  This subroutine	*/
 17    10 	/* compares a chain of input tokens with token requirements		*/
 17    11 	/* specified in reductions.  This include segment declares the 	*/
 17    12 	/* structure of the input tokens (which are generated by lex_string_),*/
 17    13 	/* defines the beginning of the SEMANTIC_ANALYSIS procedure, and	*/
 17    14 	/* declares Pthis_token, a global pointer variable which points to	*/
 17    15 	/* the "current" token being referenced by SEMANTIC_ANALYSIS.	*/
 17    16 	/*							*/
 17    17 	/* S__t_a_t_u_s							*/
 17    18 	/*							*/
 17    19 	/* 0) Created:  April, 1974 by G. C. Dixon			*/
 17    20 	/*							*/
 17    21 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
 17    22 
 17    23      dcl	Pthis_token		ptr;		/* ptr to the "current" token being acted upon.	*/
 17    24 
 18     1 	/*  START OF:	lex_descriptors_.incl.pl1	  *  *  *  *  *  *  */
 18     2 	
 18     3 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
 18     4 	/*							*/
 18     5 	/* Name:  lex_descriptors_.incl.pl1				*/
 18     6 	/*							*/
 18     7 	/*      This include segment defines the structure of the token	*/
 18     8 	/* descriptor, statement descriptor, and comment descriptor created	*/
 18     9 	/* by the lex_string_ program.				*/
 18    10 	/*							*/
 18    11 	/* Status:						*/
 18    12 	/*							*/
 18    13 	/* 0) Created:  Dec, 1973 by G. C. Dixon			*/
 18    14 	/*							*/
 18    15 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
 18    16 	
 18    17 	
 18    18 	
 18    19 	
 18    20      dcl	
 18    21 	1 comment			aligned based (Pcomment),
 18    22 						/* descriptor for a comment.			*/
 18    23 	  2 group1		unaligned,
 18    24 	    3 version		fixed bin(17),	/* comment descriptor version.		*/
 18    25 	    3 size		fixed bin(17),	/* comment descriptor size (in words).		*/
 18    26 	  2 Pnext			ptr unal,		/* ptr to next comment descriptor.		*/
 18    27 	  2 Plast			ptr unal,		/* ptr to last comment descriptor.		*/
 18    28 	  2 Pvalue		ptr unal,		/* ptr to comment.				*/
 18    29 	  2 Lvalue		fixed bin(18),	/* length of comment.			*/
 18    30 	  2 group2		unaligned,
 18    31 	    3 line_no		fixed bin(17),	/* line no of line containing comment.		*/
 18    32 	    3 S,					/* switches:				*/
 18    33 	      4 before_stmt		bit(1),		/* comment is before 1st token of stmt.		*/
 18    34 	      4 contiguous		bit(1),		/* no tokens between this and last comment.	*/
 18    35 	      4 pad		bit(16),
 18    36 	comment_value		char(comment.Lvalue) based (comment.Pvalue),
 18    37 						/* body of comment.				*/
 18    38 	Pcomment			ptr;		/* ptr to comment descriptor.			*/
 18    39 	
 18    40      dcl	
 18    41 	1 stmt			aligned based (Pstmt),
 18    42 						/* descriptor for a statement.		*/
 18    43 	  2 group1		unaligned,
 18    44 	    3 version		fixed bin(17),	/* statement descriptor version.		*/
 18    45 	    3 size		fixed bin(17),	/* statement descriptor size (in words).	*/
 18    46 	  2 Pnext			ptr unal,		/* ptr to next statement descriptor.		*/
 18    47 	  2 Plast			ptr unal,		/* ptr to last statement descriptor.		*/
 18    48 	  2 Pvalue		ptr unal,		/* ptr to statement.			*/
 18    49 	  2 Lvalue		fixed bin(18),	/* length of statement.			*/
 18    50 	  2 Pfirst_token		ptr unal,		/* ptr to 1st token of statement.		*/
 18    51 	  2 Plast_token		ptr unal,		/* ptr to last token of statement.		*/
 18    52 	  2 Pcomments		ptr unal,		/* ptr to comments in statement.		*/
 18    53 	  2 Puser			ptr unal,		/* user-defined ptr.			*/
 18    54 	  2 group2		unaligned,
 18    55 	    3 Ntokens		fixed bin(17),	/* number of tokens in statement.		*/
 18    56 	    3 line_no		fixed bin(17),	/* line no of line on which statement begins.	*/
 18    57 	    3 Istmt_in_line		fixed bin(17),	/* number of stmts in line containing this stmt.	*/
 18    58 						/* (the number includes this stmt.)		*/
 18    59 	    3 semant_type		fixed bin(17),	/* semantic type of the statement.		*/
 18    60 	    3 S,					/* switches:				*/
 18    61 	      4 error_in_stmt	bit(1),		/* stmt contains a syntactic error.		*/
 18    62 	      4 output_in_err_msg	bit(1),		/* stmt has been output in previous error message.*/
 18    63 	      4 pad		bit(34),
 18    64 	stmt_value		char(stmt.Lvalue) based (stmt.Pvalue),
 18    65 						/* text of the statement.			*/
 18    66 	Pstmt			ptr;		/* ptr to a stmt descriptor. 			*/
 18    67 	
 18    68      dcl	
 18    69 	1 token			aligned based (Ptoken),
 18    70 						/* descriptor for a token.			*/
 18    71 	  2 group1		unaligned,
 18    72 	    3 version		fixed bin(17),	/* token descriptor version.			*/
 18    73 	    3 size		fixed bin(17),	/* token descriptor size (in words).		*/
 18    74 	  2 Pnext			ptr unal,		/* ptr to next token descriptor.		*/
 18    75 	  2 Plast			ptr unal,		/* ptr to last token descriptor.		*/
 18    76 	  2 Pvalue		ptr unal,		/* ptr to token.				*/
 18    77 	  2 Lvalue		fixed bin(18),	/* length of token.				*/
 18    78 	  2 Pstmt			ptr unal,		/* ptr to descriptor of stmt containing token.	*/
 18    79 	  2 Psemant		ptr unal,		/* ptr to descriptor(s) of token's semantic value.*/
 18    80 	  2 group2		unaligned,
 18    81 	    3 Itoken_in_stmt	fixed bin(17),	/* position of token within its statement.	*/
 18    82 	    3 line_no		fixed bin(17),	/* line number of the line containing the token.	*/
 18    83 	    3 Nvalue		fixed bin(35),	/* numeric value of decimal-integer tokens.	*/
 18    84 	    3 S,					/* switches:				*/
 18    85 	      4 end_of_stmt		bit(1),		/* token is an end-of-stmt token.		*/
 18    86 	      4 quoted_string	bit(1),		/* token is a quoted string.			*/
 18    87 	      4 quotes_in_string	bit(1),		/* on if quote-close delimiters appear in quoted	*/
 18    88 						/* string (as doubled quotes on input.)		*/
 18    89 	      4 quotes_doubled	bit(1),		/* on if quotes in the string are doubled after	*/
 18    90 						/* string has been lexed into a token.		*/
 18    91 	      4 pad2		bit(32),
 18    92 	token_value		char(token.Lvalue) based (token.Pvalue),
 18    93 						/* value of the token.			*/
 18    94 	Ptoken			ptr;		/* ptr to a token descriptor.			*/
 18    95 
 18    96 	/*  END OF:	lex_descriptors_.incl.pl1	  *  *  *  *  *  *  */
 17    25 
 17    26 
 17    27 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
 17    28 
 17    29 
 17    30 SEMANTIC_ANALYSIS:	procedure;			/* procedure which analyzes the syntax and	*/
 17    31 						/* semantics of the tokens in the input list.	*/
 17    32 
 17    33      dcl						/*	automatic variables			*/
 17    34 	LTOKEN_REQD_VALUE		fixed bin(18),	/* length of a token requirement.		*/
 17    35 	NRED			fixed bin,	/* number of the reduction tokens are being	*/
 17    36 						/* compared to.				*/
 17    37 	PRED			ptr,		/* ptr to the reduction tokens are being	*/
 17    38 						/* compared to.				*/
 17    39 	PTOKEN_REQD		ptr,		/* ptr to token requirement descriptor associated	*/
 17    40 						/* with reduction tokens are being compared to.	*/
 17    41 	PTOKEN_REQD_VALUE		ptr,		/* ptr to a token requirement.		*/
 17    42 	STOKEN_FCN		bit(1) aligned,	/* return value from a relative syntax function.	*/
 17    43 	CODE			fixed bin(35),	/* an error code.				*/
 17    44 	I			fixed bin,	/* a do-group index.			*/
 17    45 	NUMBER			fixed bin(35);	/* fixed binary representation of a decimal 	*/
 17    46 						/* number character string.			*/
 17    47 
 17    48      dcl						/*	based variables			*/
 17    49 	1 RED			aligned based (PRED),
 17    50 						/* descriptor for reduction tokens are being 	*/
 17    51 						/* compared to.				*/
 17    52 	  2 TOKEN_REQD		unaligned,
 17    53 	    3 IFIRST		fixed bin(17) unal,	/* index of first token requirement.		*/
 17    54 	    3 ILAST		fixed bin(17) unal,	/* index of last  token requirement associated	*/
 17    55 						/* with this reduction.			*/
 17    56 	1 TOKEN_REQD		aligned based (PTOKEN_REQD),
 17    57 						/* a token requirement descriptor.		*/
 17    58 	  2 FORM			fixed bin(17) unal,	/* form of the token requirement:		*/
 17    59 						/*  -1 = relative token requirement function;	*/
 17    60 						/*       TYPE = index of the particular token	*/
 17    61 						/*	      function in the token_fcn array.	*/
 17    62 						/*   0 = built-in token requirement function;	*/
 17    63 						/*       TYPE = as defined below.		*/
 17    64 						/*  >0 = absolute token requirement:		*/
 17    65 						/*       FORM = index(TOKEN_STRINGS,TOKEN_REQD);	*/
 17    66 						/*       TYPE = length(TOKEN_REQD);		*/
 17    67 	  2 TYPE			fixed bin(17) unal,	/* TYPE of built-in token requirement function:	*/
 17    68 						/*   1 = compile test to see if input token 	*/
 17    69 						/*       chain is exhausted (<no-token>).	*/
 17    70 						/*   2 = compile test for any token value	*/
 17    71 						/*       (<any-token>).			*/
 17    72 						/*   3 = compile test for a PL/I identifier	*/
 17    73 						/*       (<name>) of 32 or fewer characters.	*/
 17    74 						/*   4 = compile test for token which is a	*/
 17    75 						/*       <decimal-integer>.			*/
 17    76 						/*   5 = compile test for token which is a single	*/
 17    77 						/*       backspace character (<BS>).		*/
 17    78 						/*   6 = compile test for a token which is a	*/
 17    79 						/*       <quoted-string>.			*/
 17    80 
 17    81 	1 TOKEN_REQD_STRING		aligned based (PTOKEN_REQD),
 17    82 						/* overlay for an absolute token requirement	*/
 17    83 						/* descriptor.				*/
 17    84 	  2 I			fixed bin(17) unal,	/* index into list of token strings of the	*/
 17    85 						/* absolute token string assoc w/ descriptor.	*/
 17    86 	  2 L			fixed bin(17) unal,	/* length of the absolute token string.		*/
 17    87 	TOKEN_REQD_VALUE		char(LTOKEN_REQD_VALUE) based (PTOKEN_REQD_VALUE);
 17    88 						/* absolute token string which token is reqd	*/
 17    89 						/* to match in order for tokens which are	*/
 17    90 						/* "current" on the list to match the reduction.	*/
 17    91 
 17    92      dcl						/*	builtin functions			*/
 17    93          (addr, max, null, search, substr, verify)
 17    94 				builtin;
 17    95 
 17    96      dcl						/*	entries				*/
 17    97 	cv_dec_check_		entry (char(*), fixed bin(35)) returns (fixed bin(35));
 17    98 
 17    99      dcl						/*	static variables			*/
 17   100 	BACKSPACE			char(1) aligned int static init ("");
 17   101 
 17   102 	/* END OF:	rdc_start_.incl.pl1		  *  *  *  *  *  *  */
     3321 
     3322 
     3323      dcl	DIRECTION			fixed bin init(+1);	/* direction in which tokens compared.		*/
     3324      dcl	STACK (10)   		fixed bin,	/* reduction label stack.			*/
     3325 	STACK_DEPTH		fixed bin init (0);	/* index into STACK.			*/
     3326 
     3327 
     3328      dcl	1 REDUCTION (422)		unaligned based (addr (REDUCTIONS)),
     3329 						/* object reductions.			*/
     3330 	  2 TOKEN_REQD,
     3331 	    3 IFIRST		fixed bin(17),	/* index of first required token.		*/
     3332 	    3 ILAST		fixed bin(17),	/* index of last required token.		*/
     3333 
     3334 	REDUCTIONS  (844)		fixed bin(17) unaligned internal static options(constant) initial (
     3335 	         1,     1,	/*     1/  <no-token>                                                           */
     3336 	         2,     4,	/*     2/  terminal_type : <new_type_name>                                      */
     3337 	         2,     3,	/*     3/  terminal_type :                                                      */
     3338 	         5,     8,	/*     4/  conversion_table : <new_table_name> ;                                */
     3339 	         5,     6,	/*     5/  conversion_table :                                                   */
     3340 	         9,    12,	/*     6/  translation_table : <new_table_name> ;                               */
     3341 	         9,    10,	/*     7/  translation_table :                                                  */
     3342 	        13,    16,	/*     8/  special_table : <new_table_name> ;                                   */
     3343 	        13,    14,	/*     9/  special_table :                                                      */
     3344 	        17,    20,	/*    10/  function_key_table : <new_table_name> ;                              */
     3345 	        17,    18,	/*    11/  function_key_table :                                                 */
     3346 	        21,    22,	/*    12/  default_types :                                                      */
     3347 	        23,    24,	/*    13/  answerback :                                                         */
     3348 	        25,    26,	/*    14/  preaccess_command :                                                  */
     3349 	        27,    28,	/*    15/  Modes :                                                              */
     3350 	        29,    30,	/*    16/  Bauds :                                                              */
     3351 	        31,    32,	/*    17/  Bps :                                                                */
     3352 	        33,    34,	/*    18/  BPS :                                                                */
     3353 	        35,    36,	/*    19/  Cps :                                                                */
     3354 	        37,    38,	/*    20/  CPS :                                                                */
     3355 	        39,    40,	/*    21/  Line_types :                                                         */
     3356 	        41,    44,	/*    22/  Erase : <valid_edit> ;                                               */
     3357 	        45,    47,	/*    23/  Erase : <any-token>                                                  */
     3358 	        48,    51,	/*    24/  Kill : <valid_edit> ;                                                */
     3359 	        52,    54,	/*    25/  Kill : <any-token>                                                   */
     3360 	        55,    59,	/*    26/  Framing_chars : <tty_char> <tty_char> ;                              */
     3361 	        60,    62,	/*    27/  Framing_chars : <any-token>                                          */
     3362 	        63,    66,	/*    28/  Line_delimiter : <tty_char> ;                                        */
     3363 	        67,    69,	/*    29/  Line_delimiter : <any-token>                                         */
     3364 	        70,    73,	/*    30/  Input_suspend : <tty_char> ;                                         */
     3365 	        74,    76,	/*    31/  Input_suspend : <any-token>                                          */
     3366 	        77,    80,	/*    32/  Input_resume : <tty_char> ;                                          */
     3367 	        81,    86,	/*    33/  Input_resume : <tty_char> , timeout ;                                */
     3368 	        87,    89,	/*    34/  Input_resume : <any-token>                                           */
     3369 	        90,    93,	/*    35/  Output_suspend : <tty_char> ;                                        */
     3370 	        94,    96,	/*    36/  Output_suspend : <any-token>                                         */
     3371 	        97,   100,	/*    37/  Output_resume : <tty_char> ;                                         */
     3372 	       101,   103,	/*    38/  Output_resume : <any-token>                                          */
     3373 	       104,   107,	/*    39/  Buffer_size : <decimal-integer> ;                                    */
     3374 	       108,   110,	/*    40/  Buffer_size : <any-token>                                            */
     3375 	       111,   114,	/*    41/  Output_end_of_block : <tty_char> ;                                   */
     3376 	       115,   117,	/*    42/  Output_end_of_block : <any-token>                                    */
     3377 	       118,   121,	/*    43/  Output_acknowledge : <tty_char> ;                                    */
     3378 	       122,   124,	/*    44/  Output_acknowledge : <any-token>                                     */
     3379 	       125,   126,	/*    45/  Keyboard_addressing :                                                */
     3380 	       127,   128,	/*    46/  Print_preaccess_message :                                            */
     3381 	       129,   130,	/*    47/  Conditional_printer_off :                                            */
     3382 	       131,   133,	/*    48/  Input_conversion : ;                                                 */
     3383 	       134,   137,	/*    49/  Input_conversion : <legal_name> ;                                    */
     3384 	       138,   140,	/*    50/  Output_conversion : ;                                                */
     3385 	       141,   144,	/*    51/  Output_conversion : <legal_name> ;                                   */
     3386 	       145,   147,	/*    52/  Input_translation : ;                                                */
     3387 	       148,   151,	/*    53/  Input_translation : <legal_name> ;                                   */
     3388 	       152,   154,	/*    54/  Output_translation : ;                                               */
     3389 	       155,   158,	/*    55/  Output_translation : <legal_name> ;                                  */
     3390 	       159,   161,	/*    56/  Special : ;                                                          */
     3391 	       162,   165,	/*    57/  Special : <legal_name> ;                                             */
     3392 	       166,   168,	/*    58/  Function_keys : ;                                                    */
     3393 	       169,   172,	/*    59/  Function_keys : <legal_name> ;                                       */
     3394 	       173,   175,	/*    60/  Video_info : ;                                                       */
     3395 	       173,   174,	/*    61/  Video_info :                                                         */
     3396 	       176,   178,	/*    62/  Dsatm_device : ;                                                     */
     3397 	       176,   177,	/*    63/  Dsatm_device :                                                       */
     3398 	       179,   182,	/*    64/  Old_type : <decimal-integer> ;                                       */
     3399 	       183,   184,	/*    65/  end ;                                                                */
     3400 	       185,   186,	/*    66/  <any-token> :                                                        */
     3401 	        47,    47,	/*    67/  <any-token>                                                          */
     3402 	         1,     1,	/*    68/  <no-token>                                                           */
     3403 	         8,     8,	/*    69/  ;                                                                    */
     3404 	       187,   189,	/*    70/  like <defined_type> ;                                                */
     3405 	        47,    47,	/*    71/  <any-token>                                                          */
     3406 	       190,   191,	/*    72/  modes :                                                              */
     3407 	       192,   193,	/*    73/  additional_info :                                                    */
     3408 	       194,   195,	/*    74/  initial_string :                                                     */
     3409 	       196,   197,	/*    75/  comment :                                                            */
     3410 	       198,   199,	/*    76/  bauds :                                                              */
     3411 	       200,   201,	/*    77/  bps :                                                                */
     3412 	       202,   203,	/*    78/  cps :                                                                */
     3413 	       204,   205,	/*    79/  vert_nl_delays :                                                     */
     3414 	       206,   207,	/*    80/  horz_nl_delays :                                                     */
     3415 	       208,   209,	/*    81/  const_tab_delays :                                                   */
     3416 	       210,   211,	/*    82/  var_tab_delays :                                                     */
     3417 	       212,   213,	/*    83/  backspace_delays :                                                   */
     3418 	       214,   215,	/*    84/  vt_ff_delays :                                                       */
     3419 	       216,   217,	/*    85/  line_types :                                                         */
     3420 	       218,   221,	/*    86/  erase : <valid_edit> ;                                               */
     3421 	       222,   223,	/*    87/  erase: <any-token>                                                   */
     3422 	       224,   227,	/*    88/  kill : <valid_edit> ;                                                */
     3423 	       228,   230,	/*    89/  kill : <any-token>                                                   */
     3424 	       231,   235,	/*    90/  framing_chars : <tty_char> <tty_char> ;                              */
     3425 	       236,   238,	/*    91/  framing_chars : <any-token>                                          */
     3426 	       239,   242,	/*    92/  line_delimiter : <tty_char> ;                                        */
     3427 	       243,   245,	/*    93/  line_delimiter : <any-token>                                         */
     3428 	       246,   249,	/*    94/  input_suspend : <tty_char> ;                                         */
     3429 	       250,   252,	/*    95/  input_suspend : <any-token>                                          */
     3430 	       253,   256,	/*    96/  input_resume : <tty_char> ;                                          */
     3431 	       257,   262,	/*    97/  input_resume : <tty_char> , timeout ;                                */
     3432 	       263,   265,	/*    98/  input_resume : <any-token>                                           */
     3433 	       266,   269,	/*    99/  output_suspend : <tty_char> ;                                        */
     3434 	       270,   272,	/*   100/  output_suspend : <any-token>                                         */
     3435 	       273,   276,	/*   101/  output_resume : <tty_char> ;                                         */
     3436 	       277,   279,	/*   102/  output_resume : <any-token>                                          */
     3437 	       280,   283,	/*   103/  buffer_size : <decimal-integer> ;                                    */
     3438 	       284,   286,	/*   104/  buffer_size : <any-token>                                            */
     3439 	       287,   290,	/*   105/  output_end_of_block : <tty_char> ;                                   */
     3440 	       291,   293,	/*   106/  output_end_of_block : <any-token>                                    */
     3441 	       294,   297,	/*   107/  output_acknowledge : <tty_char> ;                                    */
     3442 	       298,   300,	/*   108/  output_acknowledge : <any-token>                                     */
     3443 	       301,   302,	/*   109/  keyboard_addressing :                                                */
     3444 	       303,   304,	/*   110/  print_preaccess_message :                                            */
     3445 	       305,   306,	/*   111/  conditional_printer_off :                                            */
     3446 	       307,   309,	/*   112/  input_conversion : ;                                                 */
     3447 	       310,   313,	/*   113/  input_conversion : <legal_name> ;                                    */
     3448 	       314,   316,	/*   114/  output_conversion : ;                                                */
     3449 	       317,   320,	/*   115/  output_conversion : <legal_name> ;                                   */
     3450 	       321,   323,	/*   116/  input_translation : ;                                                */
     3451 	       324,   327,	/*   117/  input_translation : <legal_name> ;                                   */
     3452 	       328,   330,	/*   118/  output_translation : ;                                               */
     3453 	       331,   334,	/*   119/  output_translation : <legal_name> ;                                  */
     3454 	       335,   337,	/*   120/  special : ;                                                          */
     3455 	       338,   341,	/*   121/  special : <legal_name> ;                                             */
     3456 	       342,   344,	/*   122/  function_keys : ;                                                    */
     3457 	       345,   348,	/*   123/  function_keys : <legal_name> ;                                       */
     3458 	       349,   351,	/*   124/  protocol : ;                                                         */
     3459 	       349,   350,	/*   125/  protocol :                                                           */
     3460 	       352,   354,	/*   126/  video_info : ;                                                       */
     3461 	       352,   353,	/*   127/  video_info :                                                         */
     3462 	       355,   357,	/*   128/  dsatm_device : ;                                                     */
     3463 	       355,   356,	/*   129/  dsatm_device :                                                       */
     3464 	       358,   361,	/*   130/  old_type : <decimal-integer> ;                                       */
     3465 	        47,    47,	/*   131/  <any-token>                                                          */
     3466 	         1,     1,	/*   132/  <no-token>                                                           */
     3467 	       362,   363,	/*   133/  yes ;                                                                */
     3468 	       364,   365,	/*   134/  YES ;                                                                */
     3469 	       366,   367,	/*   135/  no ;                                                                 */
     3470 	       368,   369,	/*   136/  NO ;                                                                 */
     3471 	       370,   371,	/*   137/  <any-token> ;                                                        */
     3472 	        47,    47,	/*   138/  <any-token>                                                          */
     3473 	         1,     1,	/*   139/  <no-token>                                                           */
     3474 	       372,   372,	/*   140/  <valid_baud>                                                         */
     3475 	       373,   372,	/*   141/                                                                       */
     3476 	       373,   373,	/*   142/  other                                                                */
     3477 	         8,     8,	/*   143/  ;                                                                    */
     3478 	        47,    47,	/*   144/  <any-token>                                                          */
     3479 	         1,     1,	/*   145/  <no-token>                                                           */
     3480 	       374,   374,	/*   146/  <valid_cps>                                                          */
     3481 	       375,   374,	/*   147/                                                                       */
     3482 	       372,   372,	/*   148/  <valid_baud>                                                         */
     3483 	       375,   374,	/*   149/                                                                       */
     3484 	       373,   373,	/*   150/  other                                                                */
     3485 	         8,     8,	/*   151/  ;                                                                    */
     3486 	        47,    47,	/*   152/  <any-token>                                                          */
     3487 	         1,     1,	/*   153/  <no-token>                                                           */
     3488 	       374,   374,	/*   154/  <valid_cps>                                                          */
     3489 	       375,   374,	/*   155/                                                                       */
     3490 	         8,     8,	/*   156/  ;                                                                    */
     3491 	       375,   376,	/*   157/  <quoted-string> ;                                                    */
     3492 	       377,   376,	/*   158/                                                                       */
     3493 	       377,   377,	/*   159/  <rep_err_found>                                                      */
     3494 	       375,   375,	/*   160/  <quoted-string>                                                      */
     3495 	        57,    57,	/*   161/  <tty_char>                                                           */
     3496 	       378,   381,	/*   162/  ( <decimal-integer> ) <                                              */
     3497 	       382,   382,	/*   163/  >                                                                    */
     3498 	         8,     8,	/*   164/  ;                                                                    */
     3499 	        47,    47,	/*   165/  <any-token>                                                          */
     3500 	         1,     1,	/*   166/  <no-token>                                                           */
     3501 	       383,   382,	/*   167/                                                                       */
     3502 	       383,   383,	/*   168/  <delay_value>                                                        */
     3503 	         8,     8,	/*   169/  ;                                                                    */
     3504 	        47,    47,	/*   170/  <any-token>                                                          */
     3505 	         1,     1,	/*   171/  <no-token>                                                           */
     3506 	         8,     8,	/*   172/  ;                                                                    */
     3507 	       384,   383,	/*   173/                                                                       */
     3508 	       384,   384,	/*   174/  <valid_line_type>                                                    */
     3509 	        47,    47,	/*   175/  <any-token>                                                          */
     3510 	         1,     1,	/*   176/  <no-token>                                                           */
     3511 	        84,    84,	/*   177/  ,                                                                    */
     3512 	         8,     8,	/*   178/  ;                                                                    */
     3513 	       385,   384,	/*   179/                                                                       */
     3514 	       385,   384,	/*   180/                                                                       */
     3515 	       385,   385,	/*   181/  <no_table>                                                           */
     3516 	       386,   385,	/*   182/                                                                       */
     3517 	        57,    57,	/*   183/  <tty_char>                                                           */
     3518 	         8,     8,	/*   184/  ;                                                                    */
     3519 	        47,    47,	/*   185/  <any-token>                                                          */
     3520 	         1,     1,	/*   186/  <no-token>                                                           */
     3521 	       386,   387,	/*   187/  new_line :                                                           */
     3522 	       388,   389,	/*   188/  carriage_return :                                                    */
     3523 	       390,   391,	/*   189/  backspace :                                                          */
     3524 	       392,   393,	/*   190/  tab :                                                                */
     3525 	       394,   395,	/*   191/  vertical_tab :                                                       */
     3526 	       396,   397,	/*   192/  form_feed :                                                          */
     3527 	       398,   399,	/*   193/  printer_on :                                                         */
     3528 	       400,   401,	/*   194/  printer_off :                                                        */
     3529 	       402,   403,	/*   195/  red_shift :                                                          */
     3530 	       404,   405,	/*   196/  black_shift :                                                        */
     3531 	       406,   407,	/*   197/  end_of_page :                                                        */
     3532 	       408,   409,	/*   198/  output_escapes :                                                     */
     3533 	       410,   411,	/*   199/  edited_output_escapes :                                              */
     3534 	       412,   413,	/*   200/  input_escapes :                                                      */
     3535 	        47,    47,	/*   201/  <any-token>                                                          */
     3536 	         1,     1,	/*   202/  <no-token>                                                           */
     3537 	       414,   413,	/*   203/                                                                       */
     3538 	       414,   414,	/*   204/  <indicator_value>                                                    */
     3539 	        47,    47,	/*   205/  <any-token>                                                          */
     3540 	         1,     1,	/*   206/  <no-token>                                                           */
     3541 	       385,   385,	/*   207/  <no_table>                                                           */
     3542 	       415,   414,	/*   208/                                                                       */
     3543 	        57,    57,	/*   209/  <tty_char>                                                           */
     3544 	        47,    47,	/*   210/  <any-token>                                                          */
     3545 	         1,     1,	/*   211/  <no-token>                                                           */
     3546 	        84,    84,	/*   212/  ,                                                                    */
     3547 	         8,     8,	/*   213/  ;                                                                    */
     3548 	        47,    47,	/*   214/  <any-token>                                                          */
     3549 	         1,     1,	/*   215/  <no-token>                                                           */
     3550 	       385,   385,	/*   216/  <no_table>                                                           */
     3551 	        57,    57,	/*   217/  <tty_char>                                                           */
     3552 	        47,    47,	/*   218/  <any-token>                                                          */
     3553 	         1,     1,	/*   219/  <no-token>                                                           */
     3554 	        57,    57,	/*   220/  <tty_char>                                                           */
     3555 	       415,   414,	/*   221/                                                                       */
     3556 	        84,    84,	/*   222/  ,                                                                    */
     3557 	         8,     8,	/*   223/  ;                                                                    */
     3558 	       415,   414,	/*   224/                                                                       */
     3559 	       415,   416,	/*   225/  home :                                                               */
     3560 	       417,   418,	/*   226/  left :                                                               */
     3561 	       419,   420,	/*   227/  right :                                                              */
     3562 	       421,   422,	/*   228/  up :                                                                 */
     3563 	       423,   424,	/*   229/  down :                                                               */
     3564 	       425,   429,	/*   230/  key ( <decimal-integer> ) :                                          */
     3565 	        47,    47,	/*   231/  <any-token>                                                          */
     3566 	         1,     1,	/*   232/  <no-token>                                                           */
     3567 	       430,   430,	/*   233/  <fkey_entry_err>                                                     */
     3568 	       375,   375,	/*   234/  <quoted-string>                                                      */
     3569 	        57,    57,	/*   235/  <tty_char>                                                           */
     3570 	        84,    84,	/*   236/  ,                                                                    */
     3571 	         8,     8,	/*   237/  ;                                                                    */
     3572 	        47,    47,	/*   238/  <any-token>                                                          */
     3573 	         1,     1,	/*   239/  <no-token>                                                           */
     3574 	       372,   372,	/*   240/  <valid_baud>                                                         */
     3575 	       431,   431,	/*   241/  any                                                                  */
     3576 	        47,    47,	/*   242/  <any-token>                                                          */
     3577 	         1,     1,	/*   243/  <no-token>                                                           */
     3578 	       432,   432,	/*   244/  <valid_dft_line_type>                                                */
     3579 	       431,   431,	/*   245/  any                                                                  */
     3580 	        47,    47,	/*   246/  <any-token>                                                          */
     3581 	         1,     1,	/*   247/  <no-token>                                                           */
     3582 	       188,   188,	/*   248/  <defined_type>                                                       */
     3583 	       136,   136,	/*   249/  <legal_name>                                                         */
     3584 	        47,    47,	/*   250/  <any-token>                                                          */
     3585 	        84,    84,	/*   251/  ,                                                                    */
     3586 	         8,     8,	/*   252/  ;                                                                    */
     3587 	        47,    47,	/*   253/  <any-token>                                                          */
     3588 	         1,     1,	/*   254/  <no-token>                                                           */
     3589 	       433,   433,	/*   255/  match                                                                */
     3590 	       434,   434,	/*   256/  search                                                               */
     3591 	       435,   436,	/*   257/  skip <decimal-integer>                                               */
     3592 	       437,   438,	/*   258/  id <decimal-integer>                                                 */
     3593 	       439,   440,	/*   259/  id rest                                                              */
     3594 	        47,    47,	/*   260/  <any-token>                                                          */
     3595 	         1,     1,	/*   261/  <no-token>                                                           */
     3596 	       375,   375,	/*   262/  <quoted-string>                                                      */
     3597 	       441,   441,	/*   263/  digit                                                                */
     3598 	       442,   442,	/*   264/  letter                                                               */
     3599 	        47,    47,	/*   265/  <any-token>                                                          */
     3600 	         1,     1,	/*   266/  <no-token>                                                           */
     3601 	        84,    84,	/*   267/  ,                                                                    */
     3602 	         8,     8,	/*   268/  ;                                                                    */
     3603 	       443,   442,	/*   269/                                                                       */
     3604 	       443,   445,	/*   270/  type : ;                                                             */
     3605 	       446,   449,	/*   271/  type : <defined_type> ;                                              */
     3606 	       443,   444,	/*   272/  type :                                                               */
     3607 	        47,    47,	/*   273/  <any-token>                                                          */
     3608 	         1,     1,	/*   274/  <no-token>                                                           */
     3609 	       450,   451,	/*   275/  clear_screen :                                                       */
     3610 	       452,   453,	/*   276/  clear_to_eos :                                                       */
     3611 	       415,   416,	/*   277/  home :                                                               */
     3612 	       454,   455,	/*   278/  clear_to_eol :                                                       */
     3613 	       456,   457,	/*   279/  cursor_up :                                                          */
     3614 	       458,   459,	/*   280/  cursor_right :                                                       */
     3615 	       460,   461,	/*   281/  cursor_down :                                                        */
     3616 	       462,   463,	/*   282/  cursor_left :                                                        */
     3617 	       464,   465,	/*   283/  insert_chars :                                                       */
     3618 	       466,   467,	/*   284/  end_insert_chars :                                                   */
     3619 	       468,   469,	/*   285/  delete_chars :                                                       */
     3620 	       470,   471,	/*   286/  insert_lines :                                                       */
     3621 	       472,   473,	/*   287/  delete_lines :                                                       */
     3622 	       474,   475,	/*   288/  abs_pos :                                                            */
     3623 	       476,   479,	/*   289/  screen_height : <decimal-integer> ;                                  */
     3624 	       480,   483,	/*   290/  screen_line_length : <decimal-integer> ;                             */
     3625 	       484,   487,	/*   291/  scroll_count : <decimal-integer> ;                                   */
     3626 	        47,    47,	/*   292/  <any-token>                                                          */
     3627 	         1,     1,	/*   293/  <no-token>                                                           */
     3628 	       375,   375,	/*   294/  <quoted-string>                                                      */
     3629 	         8,     8,	/*   295/  ;                                                                    */
     3630 	       378,   378,	/*   296/  (                                                                    */
     3631 	        57,    57,	/*   297/  <tty_char>                                                           */
     3632 	       488,   491,	/*   298/  , pad <decimal-integer> ms                                           */
     3633 	       492,   495,	/*   299/  , pad <decimal-integer> us                                           */
     3634 	       488,   490,	/*   300/  , pad <decimal-integer>                                              */
     3635 	        47,    47,	/*   301/  <any-token>                                                          */
     3636 	         1,     1,	/*   302/  <no-token>                                                           */
     3637 	       496,   495,	/*   303/                                                                       */
     3638 	       496,   496,	/*   304/  binary                                                               */
     3639 	       497,   498,	/*   305/  decimal <decimal-integer>                                            */
     3640 	       497,   497,	/*   306/  decimal                                                              */
     3641 	       499,   500,	/*   307/  octal <decimal-integer>                                              */
     3642 	       499,   499,	/*   308/  octal                                                                */
     3643 	       501,   501,	/*   309/  line                                                                 */
     3644 	       502,   502,	/*   310/  LINE                                                                 */
     3645 	       503,   503,	/*   311/  column                                                               */
     3646 	       504,   504,	/*   312/  COLUMN                                                               */
     3647 	       505,   505,	/*   313/  n                                                                    */
     3648 	       506,   506,	/*   314/  N                                                                    */
     3649 	        47,    47,	/*   315/  <any-token>                                                          */
     3650 	         1,     1,	/*   316/  <no-token>                                                           */
     3651 	       507,   508,	/*   317/  + <tty_char>                                                         */
     3652 	       509,   510,	/*   318/  - <tty_char>                                                         */
     3653 	       380,   380,	/*   319/  )                                                                    */
     3654 	       511,   510,	/*   320/                                                                       */
     3655 	        47,    47,	/*   321/  <any-token>                                                          */
     3656 	         1,     1,	/*   322/  <no-token>                                                           */
     3657 	       511,   513,	/*   323/  data_presentation : ;                                                */
     3658 	       511,   512,	/*   324/  data_presentation :                                                  */
     3659 	       514,   516,	/*   325/  sdp_class : ;                                                        */
     3660 	       514,   515,	/*   326/  sdp_class :                                                          */
     3661 	       517,   519,	/*   327/  real_class : ;                                                       */
     3662 	       517,   518,	/*   328/  real_class :                                                         */
     3663 	       520,   522,	/*   329/  device_id : ;                                                        */
     3664 	       523,   526,	/*   330/  device_id : <decimal-integer> ;                                      */
     3665 	       527,   529,	/*   331/  device_type : ;                                                      */
     3666 	       530,   533,	/*   332/  device_type : <legal_dev_type> ;                                     */
     3667 	       534,   536,	/*   333/  shareability : ;                                                     */
     3668 	       537,   540,	/*   334/  shareability : <legal_shareability> ;                                */
     3669 	       541,   543,	/*   335/  allocation_unit : ;                                                  */
     3670 	       544,   546,	/*   336/  allocation_unit : <legal_alloc_unit>                                 */
     3671 	       547,   549,	/*   337/  line_overflow : ;                                                    */
     3672 	       550,   553,	/*   338/  line_overflow : <legal_line_overflow> ;                              */
     3673 	       554,   556,	/*   339/  page_overflow : ;                                                    */
     3674 	       557,   560,	/*   340/  page_overflow : <legal_page_overflow> ;                              */
     3675 	       561,   563,	/*   341/  character_encoding : ;                                               */
     3676 	       561,   562,	/*   342/  character_encoding :                                                 */
     3677 	       564,   566,	/*   343/  character_set : ;                                                    */
     3678 	       564,   565,	/*   344/  character_set :                                                      */
     3679 	       567,   569,	/*   345/  character_subset : ;                                                 */
     3680 	       567,   568,	/*   346/  character_subset :                                                   */
     3681 	       570,   572,	/*   347/  national_language : ;                                                */
     3682 	       573,   573,	/*   348/  national_language:                                                   */
     3683 	       574,   576,	/*   349/  compression_algorithm : ;                                            */
     3684 	       574,   575,	/*   350/  compression_algorithm :                                              */
     3685 	       577,   579,	/*   351/  character_font : ;                                                   */
     3686 	       577,   578,	/*   352/  character_font :                                                     */
     3687 	       580,   582,	/*   353/  max_record_size : ;                                                  */
     3688 	       583,   586,	/*   354/  max_record_size : <decimal-integer> ;                                */
     3689 	       587,   589,	/*   355/  attd : ;                                                             */
     3690 	       590,   593,	/*   356/  attd : <legal_attd> ;                                                */
     3691 	       594,   596,	/*   357/  att1 : ;                                                             */
     3692 	       597,   600,	/*   358/  att1 : <legal_att1> ;                                                */
     3693 	       601,   602,	/*   359/  stc_available :                                                      */
     3694 	        47,    47,	/*   360/  <any-token>                                                          */
     3695 	         1,     1,	/*   361/  <no-token>                                                           */
     3696 	         8,     8,	/*   362/  ;                                                                    */
     3697 	       603,   603,	/*   363/  <legal_dpp>                                                          */
     3698 	        47,    47,	/*   364/  <any-token>                                                          */
     3699 	         1,     1,	/*   365/  <no-token>                                                           */
     3700 	         8,     8,	/*   366/  ;                                                                    */
     3701 	       604,   604,	/*   367/  <legal_sdp_class>                                                    */
     3702 	        47,    47,	/*   368/  <any-token>                                                          */
     3703 	         1,     1,	/*   369/  <no-token>                                                           */
     3704 	         8,     8,	/*   370/  ;                                                                    */
     3705 	       605,   605,	/*   371/  <legal_real_class>                                                   */
     3706 	        47,    47,	/*   372/  <any-token>                                                          */
     3707 	         1,     1,	/*   373/  <no-token>                                                           */
     3708 	         8,     8,	/*   374/  ;                                                                    */
     3709 	       546,   546,	/*   375/  <legal_alloc_unit>                                                   */
     3710 	        47,    47,	/*   376/  <any-token>                                                          */
     3711 	         1,     1,	/*   377/  <no-token>                                                           */
     3712 	         8,     8,	/*   378/  ;                                                                    */
     3713 	       606,   606,	/*   379/  <legal_char_encoding>                                                */
     3714 	        47,    47,	/*   380/  <any-token>                                                          */
     3715 	         1,     1,	/*   381/  <no-token>                                                           */
     3716 	         8,     8,	/*   382/  ;                                                                    */
     3717 	       607,   607,	/*   383/  <legal_char_set>                                                     */
     3718 	        47,    47,	/*   384/  <any-token>                                                          */
     3719 	         1,     1,	/*   385/  <no-token>                                                           */
     3720 	         8,     8,	/*   386/  ;                                                                    */
     3721 	       608,   608,	/*   387/  <legal_char_subset>                                                  */
     3722 	        47,    47,	/*   388/  <any-token>                                                          */
     3723 	         1,     1,	/*   389/  <no-token>                                                           */
     3724 	         8,     8,	/*   390/  ;                                                                    */
     3725 	       609,   609,	/*   391/  <legal_char_font>                                                    */
     3726 	        47,    47,	/*   392/  <any-token>                                                          */
     3727 	         1,     1,	/*   393/  <no-token>                                                           */
     3728 	         8,     8,	/*   394/  ;                                                                    */
     3729 	       610,   610,	/*   395/  <legal_nat_lang>                                                     */
     3730 	        47,    47,	/*   396/  <any-token>                                                          */
     3731 	         1,     1,	/*   397/  <no-token>                                                           */
     3732 	         8,     8,	/*   398/  ;                                                                    */
     3733 	       611,   611,	/*   399/  <legal_compression>                                                  */
     3734 	        47,    47,	/*   400/  <any-token>                                                          */
     3735 	         1,     1,	/*   401/  <no-token>                                                           */
     3736 	       612,   613,	/*   402/  MAP ;                                                                */
     3737 	       614,   615,	/*   403/  map ;                                                                */
     3738 	        47,    47,	/*   404/  <any-token>                                                          */
     3739 	         1,     1,	/*   405/  <no-token>                                                           */
     3740 	       446,   449,	/*   406/  type : <defined_type> ;                                              */
     3741 	       443,   444,	/*   407/  type :                                                               */
     3742 	        47,    47,	/*   408/  <any-token>                                                          */
     3743 	         1,     1,	/*   409/  <no-token>                                                           */
     3744 	       616,   615,	/*   410/                                                                       */
     3745 	         8,     8,	/*   411/  ;                                                                    */
     3746 	       616,   616,	/*   412/  <valid_mode>                                                         */
     3747 	        47,    47,	/*   413/  <any-token>                                                          */
     3748 	         1,     1,	/*   414/  <no-token>                                                           */
     3749 	        84,    84,	/*   415/  ,                                                                    */
     3750 	         8,     8,	/*   416/  ;                                                                    */
     3751 	        47,    47,	/*   417/  <any-token>                                                          */
     3752 	       617,   616,	/*   418/                                                                       */
     3753 	       617,   616,	/*   419/                                                                       */
     3754 	       617,   616,	/*   420/                                                                       */
     3755 	        47,    47,	/*   421/  <any-token>                                                          */
     3756 	         1,     1);	/*   422/  <no-token>                                                           */
     3757 
     3758      dcl	1 TOKEN_REQUIREMENT (616)	unaligned based (addr (TOKEN_REQUIREMENTS)),
     3759 						/* object token requirements.			*/
     3760 	  2 FORM			fixed bin(17),	/* form of the token requirement:		*/
     3761 						/*  -1 = relative token requirement function;	*/
     3762 						/*       TYPE = index of the particular token	*/
     3763 						/*	      function in the token_fcn array.	*/
     3764 						/*   0 = built-in token requirement function;	*/
     3765 						/*       TYPE = as defined below.		*/
     3766 						/*  >0 = absolute token requirement:		*/
     3767 						/*       FORM = index(TOKEN_STRINGS,TOKEN_REQD);	*/
     3768 						/*       TYPE = length(TOKEN_REQD);		*/
     3769 	  2 TYPE			fixed bin(17) unal,	/* type of the built-in token requirement	*/
     3770 						/* function:				*/
     3771 						/*   1 = compile test to see if input token 	*/
     3772 						/*       chain is exhausted (<no-token>).	*/
     3773 						/*   2 = compile test for any token value	*/
     3774 						/*       (<any-token>).			*/
     3775 						/*   3 = compile test for a PL/I identifier	*/
     3776 						/*       (<name>) of 32 or fewer characters.	*/
     3777 						/*   4 = compile test for token which is a	*/
     3778 						/*       <decimal-integer>.			*/
     3779 						/*   5 = compile test for token which is a single	*/
     3780 						/*       backspace character (<BS>).		*/
     3781 						/*   6 = compile test for a token which is a	*/
     3782 						/*       <quoted-string>.			*/
     3783 
     3784 	TOKEN_REQUIREMENTS  (1232)	fixed bin(17) unaligned internal static options(constant) initial (
     3785 	         0,    1,       1,   13,      14,    1,      -1,    1,      15,   16,      14,    1,      -1,    2,   
     3786 	        31,    1,      32,   17,      14,    1,      -1,    2,      31,    1,      49,   13,      14,    1,   
     3787 	        -1,    2,      31,    1,      62,   18,      14,    1,      -1,    2,      31,    1,      80,   13,   
     3788 	        14,    1,      93,   10,      14,    1,     103,   17,      14,    1,     120,    5,      14,    1,   
     3789 	       125,    5,      14,    1,     130,    3,      14,    1,     133,    3,      14,    1,     136,    3,   
     3790 	        14,    1,     139,    3,      14,    1,     142,   10,      14,    1,     152,    5,      14,    1,   
     3791 	        -1,    3,      31,    1,     152,    5,      14,    1,       0,    2,     157,    4,      14,    1,   
     3792 	        -1,    3,      31,    1,     157,    4,      14,    1,       0,    2,     161,   13,      14,    1,   
     3793 	        -1,    4,      -1,    4,      31,    1,     161,   13,      14,    1,       0,    2,     174,   14,   
     3794 	        14,    1,      -1,    4,      31,    1,     174,   14,      14,    1,       0,    2,     188,   13,   
     3795 	        14,    1,      -1,    4,      31,    1,     188,   13,      14,    1,       0,    2,     201,   12,   
     3796 	        14,    1,      -1,    4,      31,    1,     201,   12,      14,    1,      -1,    4,     213,    1,   
     3797 	       214,    7,      31,    1,     201,   12,      14,    1,       0,    2,     221,   14,      14,    1,   
     3798 	        -1,    4,      31,    1,     221,   14,      14,    1,       0,    2,     235,   13,      14,    1,   
     3799 	        -1,    4,      31,    1,     235,   13,      14,    1,       0,    2,     248,   11,      14,    1,   
     3800 	         0,    4,      31,    1,     248,   11,      14,    1,       0,    2,     259,   19,      14,    1,   
     3801 	        -1,    4,      31,    1,     259,   19,      14,    1,       0,    2,     278,   18,      14,    1,   
     3802 	        -1,    4,      31,    1,     278,   18,      14,    1,       0,    2,     296,   19,      14,    1,   
     3803 	       315,   23,      14,    1,     338,   23,      14,    1,     361,   16,      14,    1,      31,    1,   
     3804 	       361,   16,      14,    1,      -1,    5,      31,    1,     377,   17,      14,    1,      31,    1,   
     3805 	       377,   17,      14,    1,      -1,    5,      31,    1,     394,   17,      14,    1,      31,    1,   
     3806 	       394,   17,      14,    1,      -1,    5,      31,    1,     411,   18,      14,    1,      31,    1,   
     3807 	       411,   18,      14,    1,      -1,    5,      31,    1,     429,    7,      14,    1,      31,    1,   
     3808 	       429,    7,      14,    1,      -1,    5,      31,    1,     436,   13,      14,    1,      31,    1,   
     3809 	       436,   13,      14,    1,      -1,    5,      31,    1,     449,   10,      14,    1,      31,    1,   
     3810 	       459,   12,      14,    1,      31,    1,     471,    8,      14,    1,       0,    4,      31,    1,   
     3811 	       198,    3,      31,    1,       0,    2,      14,    1,     479,    4,      -1,    6,      31,    1,   
     3812 	       483,    5,      14,    1,     488,   15,      14,    1,     503,   14,      14,    1,     517,    7,   
     3813 	        14,    1,     524,    5,      14,    1,     529,    3,      14,    1,     532,    3,      14,    1,   
     3814 	       535,   14,      14,    1,     549,   14,      14,    1,     563,   16,      14,    1,     579,   14,   
     3815 	        14,    1,     593,   16,      14,    1,     609,   12,      14,    1,     621,   10,      14,    1,   
     3816 	       631,    5,      14,    1,      -1,    3,      31,    1,     636,    6,       0,    2,     642,    4,   
     3817 	        14,    1,      -1,    3,      31,    1,     642,    4,      14,    1,       0,    2,     646,   13,   
     3818 	        14,    1,      -1,    4,      -1,    4,      31,    1,     646,   13,      14,    1,       0,    2,   
     3819 	       659,   14,      14,    1,      -1,    4,      31,    1,     659,   14,      14,    1,       0,    2,   
     3820 	       673,   13,      14,    1,      -1,    4,      31,    1,     673,   13,      14,    1,       0,    2,   
     3821 	       686,   12,      14,    1,      -1,    4,      31,    1,     686,   12,      14,    1,      -1,    4,   
     3822 	       213,    1,     214,    7,      31,    1,     686,   12,      14,    1,       0,    2,     698,   14,   
     3823 	        14,    1,      -1,    4,      31,    1,     698,   14,      14,    1,       0,    2,     712,   13,   
     3824 	        14,    1,      -1,    4,      31,    1,     712,   13,      14,    1,       0,    2,     725,   11,   
     3825 	        14,    1,       0,    4,      31,    1,     725,   11,      14,    1,       0,    2,     736,   19,   
     3826 	        14,    1,      -1,    4,      31,    1,     736,   19,      14,    1,       0,    2,     755,   18,   
     3827 	        14,    1,      -1,    4,      31,    1,     755,   18,      14,    1,       0,    2,     773,   19,   
     3828 	        14,    1,     792,   23,      14,    1,     815,   23,      14,    1,     838,   16,      14,    1,   
     3829 	        31,    1,     838,   16,      14,    1,      -1,    5,      31,    1,     854,   17,      14,    1,   
     3830 	        31,    1,     854,   17,      14,    1,      -1,    5,      31,    1,     871,   17,      14,    1,   
     3831 	        31,    1,     871,   17,      14,    1,      -1,    5,      31,    1,     888,   18,      14,    1,   
     3832 	        31,    1,     888,   18,      14,    1,      -1,    5,      31,    1,      49,    7,      14,    1,   
     3833 	        31,    1,      49,    7,      14,    1,      -1,    5,      31,    1,     906,   13,      14,    1,   
     3834 	        31,    1,     906,   13,      14,    1,      -1,    5,      31,    1,     919,    8,      14,    1,   
     3835 	        31,    1,     927,   10,      14,    1,      31,    1,     937,   12,      14,    1,      31,    1,   
     3836 	       949,    8,      14,    1,       0,    4,      31,    1,     957,    3,      31,    1,     960,    3,   
     3837 	        31,    1,     288,    2,      31,    1,     963,    2,      31,    1,       0,    2,      31,    1,   
     3838 	        -1,    7,     965,    5,      -1,    8,       0,    6,      31,    1,      -1,    9,     970,    1,   
     3839 	         0,    4,     971,    1,     972,    1,     973,    1,      -1,   10,      -1,   11,      -1,   12,   
     3840 	       974,    8,      14,    1,     982,   15,      14,    1,     593,    9,      14,    1,      26,    3,   
     3841 	        14,    1,     997,   12,      14,    1,    1009,    9,      14,    1,    1018,   10,      14,    1,   
     3842 	       350,   11,      14,    1,    1028,    9,      14,    1,    1037,   11,      14,    1,    1048,   11,   
     3843 	        14,    1,    1059,   14,      14,    1,    1073,   21,      14,    1,    1094,   13,      14,    1,   
     3844 	        -1,   13,    1107,    4,      14,    1,    1111,    4,      14,    1,    1115,    5,      14,    1,   
     3845 	      1120,    2,      14,    1,    1122,    4,      14,    1,      71,    3,     970,    1,       0,    4,   
     3846 	       971,    1,      14,    1,      -1,   14,    1126,    3,      -1,   15,    1129,    5,    1134,    6,   
     3847 	      1140,    4,       0,    4,     450,    2,       0,    4,     450,    2,    1144,    4,    1148,    5,   
     3848 	      1153,    6,      10,    4,      14,    1,      31,    1,      10,    4,      14,    1,      -1,    6,   
     3849 	        31,    1,    1159,   12,      14,    1,    1171,   12,      14,    1,    1183,   12,      14,    1,   
     3850 	      1195,    9,      14,    1,    1204,   12,      14,    1,    1216,   11,      14,    1,    1227,   11,   
     3851 	        14,    1,    1238,   12,      14,    1,    1250,   16,      14,    1,    1266,   12,      14,    1,   
     3852 	      1278,   12,      14,    1,    1290,   12,      14,    1,    1302,    7,      14,    1,    1309,   13,   
     3853 	        14,    1,       0,    4,      31,    1,    1322,   18,      14,    1,       0,    4,      31,    1,   
     3854 	      1340,   12,      14,    1,       0,    4,      31,    1,     213,    1,    1352,    3,       0,    4,   
     3855 	      1355,    2,     213,    1,    1352,    3,       0,    4,     195,    2,    1357,    6,    1363,    7,   
     3856 	         0,    4,    1370,    5,       0,    4,     621,    4,    1375,    4,    1379,    6,    1385,    6,   
     3857 	         6,    1,     963,    1,    1391,    1,      -1,    4,    1392,    1,      -1,    4,    1393,   17,   
     3858 	        14,    1,      31,    1,    1410,    9,      14,    1,      31,    1,    1419,   10,      14,    1,   
     3859 	        31,    1,    1429,    9,      14,    1,      31,    1,    1429,    9,      14,    1,       0,    4,   
     3860 	        31,    1,    1438,   11,      14,    1,      31,    1,    1438,   11,      14,    1,      -1,   16,   
     3861 	        31,    1,    1449,   12,      14,    1,      31,    1,    1449,   12,      14,    1,      -1,   17,   
     3862 	        31,    1,    1461,   15,      14,    1,      31,    1,    1461,   15,      14,    1,      -1,   18,   
     3863 	      1476,   13,      14,    1,      31,    1,    1476,   13,      14,    1,      -1,   19,      31,    1,   
     3864 	      1489,   13,      14,    1,      31,    1,    1489,   13,      14,    1,      -1,   20,      31,    1,   
     3865 	      1502,   18,      14,    1,      31,    1,    1520,   13,      14,    1,      31,    1,    1533,   16,   
     3866 	        14,    1,      31,    1,    1549,   17,      14,    1,      31,    1,    1566,   18,    1584,   21,   
     3867 	        14,    1,      31,    1,    1605,   14,      14,    1,      31,    1,    1619,   15,      14,    1,   
     3868 	        31,    1,    1619,   15,      14,    1,       0,    4,      31,    1,    1634,    4,      14,    1,   
     3869 	        31,    1,    1634,    4,      14,    1,      -1,   21,      31,    1,    1638,    4,      14,    1,   
     3870 	        31,    1,    1638,    4,      14,    1,      -1,   22,      31,    1,    1642,   13,      14,    1,   
     3871 	        -1,   23,      -1,   24,      -1,   25,      -1,   26,      -1,   27,      -1,   28,      -1,   29,   
     3872 	        -1,   30,      -1,   31,    1655,    3,      31,    1,    1658,    3,      31,    1,      -1,   32);
     3873 
     3874 
     3875      dcl	TOKEN_STRINGS		char(1660) aligned based (addr (TOKEN_STRING_ARRAYS)),
     3876 						/* object token values.			*/
     3877 	TOKEN_STRING_ARRAYS (17)	char(100) aligned internal static options(constant) initial (
     3878 	     "terminal_type:conversion_table;translation_tablespecial_tablefunction_key_tabledefault_typesanswerba",
     3879 	     "ckpreaccess_commandModesBaudsBpsBPSCpsCPSLine_typesEraseKillFraming_charsLine_delimiterInput_suspend",
     3880 	     "Input_resume,timeoutOutput_suspendOutput_resumeBuffer_sizeOutput_end_of_blockOutput_acknowledgeKeybo",
     3881 	     "ard_addressingPrint_preaccess_messageConditional_printer_offInput_conversionOutput_conversionInput_t",
     3882 	     "ranslationOutput_translationSpecialFunction_keysVideo_infoDsatm_deviceOld_typelikemodesadditional_in",
     3883 	     "foinitial_stringcommentbaudsbpscpsvert_nl_delayshorz_nl_delaysconst_tab_delaysvar_tab_delaysbackspac",
     3884 	     "e_delaysvt_ff_delaysline_typeseraseerase:killframing_charsline_delimiterinput_suspendinput_resumeout",
     3885 	     "put_suspendoutput_resumebuffer_sizeoutput_end_of_blockoutput_acknowledgekeyboard_addressingprint_pre",
     3886 	     "access_messageconditional_printer_offinput_conversionoutput_conversioninput_translationoutput_transl",
     3887 	     "ationfunction_keysprotocolvideo_infodsatm_deviceold_typeyesYESNOother()<>new_linecarriage_returnvert",
     3888 	     "ical_tabform_feedprinter_onred_shiftblack_shiftend_of_pageoutput_escapesedited_output_escapesinput_e",
     3889 	     "scapeshomeleftrightupdownanymatchsearchskiprestdigitletterclear_screenclear_to_eosclear_to_eolcursor",
     3890 	     "_upcursor_rightcursor_downcursor_leftinsert_charsend_insert_charsdelete_charsinsert_linesdelete_line",
     3891 	     "sabs_posscreen_heightscreen_line_lengthscroll_countpadmsbinarydecimaloctalLINEcolumnCOLUMN+-data_pre",
     3892 	     "sentationsdp_classreal_classdevice_iddevice_typeshareabilityallocation_unitline_overflowpage_overflo",
     3893 	     "wcharacter_encodingcharacter_setcharacter_subsetnational_languagenational_language:compression_algor",
     3894 	     "ithmcharacter_fontmax_record_sizeattdatt1stc_availableMAPmap");
     3895 
     3896 	/* START OF:	rdc_end_.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
 19     2 
 19     3 
 19     4 /****^  HISTORY COMMENTS:
 19     5*  1) change(86-02-14,GWMay), approve(), audit(), install():
 19     6*     old history comments:
 19     7*      0) Created: April, 1974 by G. C. Dixon
 19     8*      1) Modified: Feb, 1975  by G. C. Dixon
 19     9*         a) support for Version 2.0 of reduction_compiler.
 19    10*      2) Modified: Feb, 1981  by G. C. Dixon
 19    11*         a) support for Version  2.2 of reduction_compiler
 19    12*      3) Modified: Aug, 1983  by G. C. Dixon - support for Version 2.3 of
 19    13*                        reductions command.
 19    14*  2) change(86-03-04,GDixon), approve(86-03-04,MCR7362), audit(86-03-17,GWMay),
 19    15*     install(86-03-17,MR12.0-1032):
 19    16*     Changed how the PUSH DOWN LANGUAGE (SPDL) definition of <no-token> is
 19    17*     implemented to avoid references through a null pointer.  The two
 19    18*     accepted uses are:
 19    19*     
 19    20*        / <no-token>               / ... / ... \
 19    21*                    A
 19    22*                    |
 19    23*           Pthis_token (points to top of push down stack)
 19    24*     
 19    25*     which checks to see if the push down stack is totally exhausted (ie,
 19    26*     Ptoken = null); and:
 19    27*     
 19    28*        / SPEC1 ... SPECN <no-token>         / ... / ... \
 19    29*                           A
 19    30*                           |
 19    31*                 Pthis_token (points to top of push down stack)
 19    32*     
 19    33*     which checks to see whether SPECN is topmost on the push down stack
 19    34*     AND is the final token in the input list.
 19    35*                                                   END HISTORY COMMENTS */
 19    36 
 19    37 
 19    38 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
 19    39 	/*									*/
 19    40 	/* NAME:  rdc_end_.incl.pl1							*/
 19    41 	/*									*/
 19    42 	/*      This include segment is used by compilers generated by the reduction_compiler.	*/
 19    43 	/* Such compilers include a SEMANTIC_ANALYSIS subroutine generated by the		*/
 19    44 	/* reduction_compiler.  This subroutine compares a chain of input tokens with token	*/
 19    45 	/* requirements specified in reductions.  The code in this include segment performs the	*/
 19    46 	/* actual comparisons.  This code is the middle part of the SEMANTIC_ANALYSIS procedure.	*/
 19    47 	/*									*/
 19    48 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
 19    49 
 19    50 	TRACING = TRACING;				/* Kludge to prevent pl1 from making TRACING	*/
 19    51 						/*   options(constant) because it is never set.	*/
 19    52 	NRED = 1;
 19    53 	go to RD_TEST_REDUCTION;
 19    54 
 19    55 RD_NEXT_REDUCTION:
 19    56 	NRED = NRED + 1;
 19    57 
 19    58 RD_TEST_REDUCTION:
 19    59 	PRED = addr(REDUCTION(NRED));
 19    60 	Ptoken = Pthis_token;
 19    61 
 19    62 	do I = RED.TOKEN_REQD.IFIRST to RED.TOKEN_REQD.ILAST by DIRECTION;
 19    63 	     PTOKEN_REQD = addr(TOKEN_REQUIREMENT(I));
 19    64 	     if Ptoken = null then do;
 19    65 		if TOKEN_REQD.FORM = 0 then		/* No more tokens.  Only matches <no-token> spec.	*/
 19    66 		     if TOKEN_REQD.TYPE = 1 then
 19    67 			go to RD_TEST_TOKEN(1);
 19    68 		go to RD_NEXT_REDUCTION;
 19    69 		end;
 19    70 	     if TOKEN_REQD.FORM = 0 then do;		/* built-in syntax function.			*/
 19    71 		go to RD_TEST_TOKEN(TOKEN_REQD.TYPE);
 19    72 
 19    73 RD_TEST_TOKEN(1):   if SPDL then			/* <no-token>				*/
 19    74 						/* In push-down-language, there are 2 		*/
 19    75 						/*   interpretations of <no-token>.		*/
 19    76 		     if      RED.TOKEN_REQD.IFIRST = RED.TOKEN_REQD.ILAST &
 19    77 			   Ptoken = null then	/* When <no-token> is only spec, the spec asks 	*/
 19    78 			go to RD_MATCH_NO_TOKEN;	/* "Is push down stack empty (all input gone)?"   */
 19    79 		     else if RED.TOKEN_REQD.IFIRST^= RED.TOKEN_REQD.ILAST &
 19    80 			   RED.TOKEN_REQD.IFIRST = I &
 19    81 			   token.Pnext = null then	/* For SPEC1 ... SPECN <no-token>, the spec asks  */
 19    82 			go to RD_MATCH_NO_TOKEN;	/* "Are the topmost tokens on stack SPEC1 - SPECN,*/
 19    83 						/*  and is SPECN the final input token?"	*/
 19    84 		     else go to RD_NEXT_REDUCTION;	/* Those are the only two defs allowed in push	*/
 19    85 						/* down language mode for <no-token>.		*/
 19    86 		else if Ptoken = null then
 19    87 		     go to RD_MATCH_NO_TOKEN;
 19    88 		go to RD_NEXT_REDUCTION;
 19    89 
 19    90 RD_TEST_TOKEN(2):	go to RD_MATCH;			/* <any-token>				*/
 19    91 
 19    92 RD_TEST_TOKEN(3):	if token.Lvalue > 0 &		/* <name>					*/
 19    93 		   token.Lvalue <= 32 & ^token.S.quoted_string then
 19    94 		     if search(substr(token_value,1,1),"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")
 19    95 		     > 0 then
 19    96 			if verify(token_value,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_$")
 19    97 			= 0 then
 19    98 			     go to RD_MATCH;
 19    99 		go to RD_NEXT_REDUCTION;
 19   100 
 19   101 RD_TEST_TOKEN(4):					/* <decimal-integer>			*/
 19   102 		if token.Nvalue ^= 0 then		/* token already determined to be a number.	*/
 19   103 		     go to RD_MATCH;
 19   104 		if token.S.quoted_string then
 19   105 		     go to RD_NEXT_REDUCTION;
 19   106 		NUMBER = cv_dec_check_ (token_value, CODE);
 19   107 		if CODE = 0 then do;
 19   108 		     token.Nvalue = NUMBER;
 19   109 		     go to RD_MATCH;
 19   110 		     end;
 19   111 		go to RD_NEXT_REDUCTION;
 19   112 
 19   113 RD_TEST_TOKEN(5):	if token.Lvalue = 1 then		/* <BS>					*/
 19   114 		     if token_value = BACKSPACE & ^token.S.quoted_string then
 19   115 			go to RD_MATCH;
 19   116 		go to RD_NEXT_REDUCTION;
 19   117 
 19   118 RD_TEST_TOKEN(6):	if token.S.quoted_string then		/* <quoted-string>				*/
 19   119 		     go to RD_MATCH;
 19   120 		go to RD_NEXT_REDUCTION;
 19   121 		end;
 19   122 
 19   123 	     else if TOKEN_REQD.FORM > 0 then do;	/* absolute syntax specification.		*/
 19   124 		if token.S.quoted_string then
 19   125 		     go to RD_NEXT_REDUCTION;
 19   126 		PTOKEN_REQD_VALUE = addr(substr(TOKEN_STRINGS,TOKEN_REQD_STRING.I));
 19   127 		LTOKEN_REQD_VALUE = TOKEN_REQD_STRING.L;
 19   128 		if token_value = TOKEN_REQD_VALUE then
 19   129 		     go to RD_MATCH;
 19   130 		go to RD_NEXT_REDUCTION;
 19   131 		end;
 19   132 
 19   133 	/* END OF:	rdc_end_.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     3896 
     3897 
     3898 	     else do;				/* relative syntax function.			*/
     3899 		go to RD_TOKEN_FCN(TOKEN_REQD.TYPE);
     3900 
     3901 RD_TOKEN_FCN(1):	STOKEN_FCN = new_type_name();
     3902 		go to RD_TEST_RESULT;
     3903 RD_TOKEN_FCN(2):	STOKEN_FCN = new_table_name();
     3904 		go to RD_TEST_RESULT;
     3905 RD_TOKEN_FCN(3):	STOKEN_FCN = valid_edit();
     3906 		go to RD_TEST_RESULT;
     3907 RD_TOKEN_FCN(4):	STOKEN_FCN = tty_char();
     3908 		go to RD_TEST_RESULT;
     3909 RD_TOKEN_FCN(5):	STOKEN_FCN = legal_name();
     3910 		go to RD_TEST_RESULT;
     3911 RD_TOKEN_FCN(6):	STOKEN_FCN = defined_type();
     3912 		go to RD_TEST_RESULT;
     3913 RD_TOKEN_FCN(7):	STOKEN_FCN = valid_baud();
     3914 		go to RD_TEST_RESULT;
     3915 RD_TOKEN_FCN(8):	STOKEN_FCN = valid_cps();
     3916 		go to RD_TEST_RESULT;
     3917 RD_TOKEN_FCN(9):	STOKEN_FCN = rep_err_found();
     3918 		go to RD_TEST_RESULT;
     3919 RD_TOKEN_FCN(10):	STOKEN_FCN = delay_value();
     3920 		go to RD_TEST_RESULT;
     3921 RD_TOKEN_FCN(11):	STOKEN_FCN = valid_line_type();
     3922 		go to RD_TEST_RESULT;
     3923 RD_TOKEN_FCN(12):	STOKEN_FCN = no_table();
     3924 		go to RD_TEST_RESULT;
     3925 RD_TOKEN_FCN(13):	STOKEN_FCN = indicator_value();
     3926 		go to RD_TEST_RESULT;
     3927 RD_TOKEN_FCN(14):	STOKEN_FCN = fkey_entry_err();
     3928 		go to RD_TEST_RESULT;
     3929 RD_TOKEN_FCN(15):	STOKEN_FCN = valid_dft_line_type();
     3930 		go to RD_TEST_RESULT;
     3931 RD_TOKEN_FCN(16):	STOKEN_FCN = legal_dev_type();
     3932 		go to RD_TEST_RESULT;
     3933 RD_TOKEN_FCN(17):	STOKEN_FCN = legal_shareability();
     3934 		go to RD_TEST_RESULT;
     3935 RD_TOKEN_FCN(18):	STOKEN_FCN = legal_alloc_unit();
     3936 		go to RD_TEST_RESULT;
     3937 RD_TOKEN_FCN(19):	STOKEN_FCN = legal_line_overflow();
     3938 		go to RD_TEST_RESULT;
     3939 RD_TOKEN_FCN(20):	STOKEN_FCN = legal_page_overflow();
     3940 		go to RD_TEST_RESULT;
     3941 RD_TOKEN_FCN(21):	STOKEN_FCN = legal_attd();
     3942 		go to RD_TEST_RESULT;
     3943 RD_TOKEN_FCN(22):	STOKEN_FCN = legal_att1();
     3944 		go to RD_TEST_RESULT;
     3945 RD_TOKEN_FCN(23):	STOKEN_FCN = legal_dpp();
     3946 		go to RD_TEST_RESULT;
     3947 RD_TOKEN_FCN(24):	STOKEN_FCN = legal_sdp_class();
     3948 		go to RD_TEST_RESULT;
     3949 RD_TOKEN_FCN(25):	STOKEN_FCN = legal_real_class();
     3950 		go to RD_TEST_RESULT;
     3951 RD_TOKEN_FCN(26):	STOKEN_FCN = legal_char_encoding();
     3952 		go to RD_TEST_RESULT;
     3953 RD_TOKEN_FCN(27):	STOKEN_FCN = legal_char_set();
     3954 		go to RD_TEST_RESULT;
     3955 RD_TOKEN_FCN(28):	STOKEN_FCN = legal_char_subset();
     3956 		go to RD_TEST_RESULT;
     3957 RD_TOKEN_FCN(29):	STOKEN_FCN = legal_char_font();
     3958 		go to RD_TEST_RESULT;
     3959 RD_TOKEN_FCN(30):	STOKEN_FCN = legal_nat_lang();
     3960 		go to RD_TEST_RESULT;
     3961 RD_TOKEN_FCN(31):	STOKEN_FCN = legal_compression();
     3962 		go to RD_TEST_RESULT;
     3963 RD_TOKEN_FCN(32):	STOKEN_FCN = valid_mode();
     3964 		go to RD_TEST_RESULT;
     3965 
     3966 RD_TEST_RESULT:	if STOKEN_FCN then go to RD_MATCH;
     3967 		else go to RD_NEXT_REDUCTION;
     3968 		end;
     3969 
     3970 RD_MATCH:      Ptoken = token.Pnext;
     3971 RD_MATCH_NO_TOKEN:
     3972 	     end;
     3973 	Ptoken = Pthis_token;
     3974 	go to RD_ACTION(NRED);
     3975 
     3976 		/* START OF:	rdc_stack_fcns_.incl.pl1	  *  *  *  *  *  *  */
 20     2 
 20     3 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
 20     4 	/*							*/
 20     5 	/* N__a_m_e:  rdc_stack_fcns_.incl.pl1				*/
 20     6 	/*							*/
 20     7 	/*      This include segment is used by compilers generated by the	*/
 20     8 	/* reduction_compiler.  It includes code for manipulating the 	*/
 20     9 	/* reduction label stack.					*/
 20    10 	/*							*/
 20    11 	/* S__t_a_t_u_s							*/
 20    12 	/*							*/
 20    13 	/* 0) Created:  April, 1974 by G. C. Dixon			*/
 20    14 	/*							*/
 20    15 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
 20    16 
 20    17 RD_STACK:	if STACK_DEPTH > 0 then do;
 20    18 	     NRED = STACK (STACK_DEPTH);
 20    19 	     go to RD_TEST_REDUCTION;
 20    20 	     end;
 20    21 	else
 20    22 	     go to RD_NEXT_REDUCTION;
 20    23 
 20    24 RD_STACK_POP:
 20    25 	if STACK_DEPTH > 0 then do;
 20    26 	     NRED = STACK (STACK_DEPTH);
 20    27 	     STACK_DEPTH = max (STACK_DEPTH-1, 0);
 20    28 	     go to RD_TEST_REDUCTION;
 20    29 	     end;
 20    30 	else
 20    31 	     go to RD_NEXT_REDUCTION;
 20    32 
 20    33 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
 20    34 
 20    35 
 20    36 PUSH:	procedure (N);				/* invoked to push reduction number 'N' onto	*/
 20    37 						/* the reduction stack.			*/
 20    38      dcl	N			fixed bin;
 20    39 
 20    40      dcl (addr, dimension, length, null)
 20    41 				builtin;
 20    42 
 20    43      dcl	cu_$cl			entry,
 20    44 	iox_$put_chars		entry (ptr, ptr, fixed bin, fixed bin(35)),
 20    45 	iox_$error_output		ptr ext static,
 20    46 	lex_error_		entry options(variable);
 20    47 
 20    48      dcl	brief_error		char(4) varying initial ("") int static,
 20    49 	long_error		char(234) varying int static init(
 20    50 "An internal stack (the reduction stack) has overflowed.
 20    51 The translation has failed.  Contact translator maintenance
 20    52 personnel for assistance.
 20    53      Processing reduction: ^d
 20    54      Reduction being stacked: ^d
 20    55      Maximum stack depth: ^d"),
 20    56 	non_restart_error		char(33) int static init ("Translation cannot be restarted.
 20    57 ");
 20    58 
 20    59 	if STACK_DEPTH >= dimension (STACK, 1) then do;
 20    60 	     call lex_error_ (0, "0"b, 4, 0, null, null, "11"b, long_error, brief_error, NRED, N,
 20    61 			  dimension(STACK,1));
 20    62 get_to_cl:     call cu_$cl();
 20    63 	     call iox_$put_chars (iox_$error_output, addr(non_restart_error), length(non_restart_error), 0);
 20    64 	     go to get_to_cl;
 20    65 	     end;					/* stack overflow is a non-recoverable error.	*/
 20    66 	else
 20    67 	     STACK_DEPTH = STACK_DEPTH + 1;
 20    68 	STACK (STACK_DEPTH) = N;
 20    69 
 20    70 	end PUSH;
 20    71 
 20    72 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
 20    73 
 20    74 	/* END OF:	rdc_stack_fcns_.incl.pl1	  *  *  *  *  *  *  */
     3976 
     3977 
     3978 
     3979 RD_ACTION(1):					/* /					*/
     3980 	call 					     ERROR ( 1 );
     3981 	return;					/* / RETURN	\			*/
     3982 
     3983 RD_ACTION(2):					/* /					*/
     3984 	call 					     LEX ( 2 );
     3985 	call					     init_type();
     3986 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     3987 	NRED = 69;
     3988 	go to RD_TEST_REDUCTION;			/* / type_entry \                      		*/
     3989 
     3990 RD_ACTION(3):					/* /					*/
     3991 	call 					     LEX ( 2 );
     3992 	call					     NEXT_STMT();
     3993 	NRED = 2;
     3994 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     3995 
     3996 RD_ACTION(4):					/* /					*/
     3997 	call 					     LEX ( 2 );
     3998 	call 					     define_ct_table ( CONV_TYPE );
     3999 	call 					     LEX ( 2 );
     4000 	NRED = 181;
     4001 	go to RD_TEST_REDUCTION;			/* / table_entries \                   		*/
     4002 
     4003 RD_ACTION(5):					/* /					*/
     4004 	call 					     LEX ( 2 );
     4005 	call					     NEXT_STMT();
     4006 	NRED = 2;
     4007 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4008 
     4009 RD_ACTION(6):					/* /					*/
     4010 	call 					     LEX ( 2 );
     4011 	call 					     define_ct_table ( TRANS_TYPE );
     4012 	call 					     LEX ( 2 );
     4013 	NRED = 181;
     4014 	go to RD_TEST_REDUCTION;			/* / table_entries \                   		*/
     4015 
     4016 RD_ACTION(7):					/* /					*/
     4017 	call 					     LEX ( 2 );
     4018 	call					     NEXT_STMT();
     4019 	NRED = 2;
     4020 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4021 
     4022 RD_ACTION(8):					/* /					*/
     4023 	call 					     LEX ( 2 );
     4024 	call					     define_special();
     4025 	call 					     LEX ( 2 );
     4026 	NRED = 187;
     4027 	go to RD_TEST_REDUCTION;			/* / special_entries \                 		*/
     4028 
     4029 RD_ACTION(9):					/* /					*/
     4030 	call 					     LEX ( 2 );
     4031 	call					     NEXT_STMT();
     4032 	NRED = 2;
     4033 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4034 
     4035 RD_ACTION(10):					/* /					*/
     4036 	call 					     LEX ( 2 );
     4037 	call					     define_fkey_table();
     4038 	call 					     LEX ( 2 );
     4039 	NRED = 225;
     4040 	go to RD_TEST_REDUCTION;			/* / fkey_entries \                    		*/
     4041 
     4042 RD_ACTION(11):					/* /					*/
     4043 	call 					     LEX ( 2 );
     4044 	call					     NEXT_STMT();
     4045 	NRED = 2;
     4046 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4047 
     4048 RD_ACTION(12):					/* /					*/
     4049 	call 					     LEX ( 2 );
     4050 						     default_count = 1;
     4051 	NRED = 240;
     4052 	go to RD_TEST_REDUCTION;			/* / default_types \                   		*/
     4053 
     4054 RD_ACTION(13):					/* /					*/
     4055 	call 					     LEX ( 2 );
     4056 	call					     set_up_answerback();
     4057 	NRED = 255;
     4058 	go to RD_TEST_REDUCTION;			/* / answerback \                      		*/
     4059 
     4060 RD_ACTION(14):					/* /					*/
     4061 	call 					     LEX ( 2 );
     4062 	NRED = 402;
     4063 	go to RD_TEST_REDUCTION;			/* / preaccess \                       		*/
     4064 
     4065 RD_ACTION(15):					/* /					*/
     4066 	call 					     LEX ( 2 );
     4067 	call PUSH(2);				/*   PUSH(mainloop)                               */
     4068 	call PUSH(419);				/*   PUSH(dft_modes)                              */
     4069 	NRED = 410;
     4070 	go to RD_TEST_REDUCTION;			/* / check_modes \                     		*/
     4071 
     4072 RD_ACTION(16):					/* /					*/
     4073 	call 					     LEX ( 2 );
     4074 						     baudx = 1;
     4075 	NRED = 140;
     4076 	go to RD_TEST_REDUCTION;			/* / default_bauds \                   		*/
     4077 
     4078 RD_ACTION(17):					/* /					*/
     4079 	call 					     LEX ( 2 );
     4080 						     baudx = 1;
     4081 	NRED = 140;
     4082 	go to RD_TEST_REDUCTION;			/* / default_bauds \                   		*/
     4083 
     4084 RD_ACTION(18):					/* /					*/
     4085 	call 					     LEX ( 2 );
     4086 						     baudx = 1;
     4087 	NRED = 140;
     4088 	go to RD_TEST_REDUCTION;			/* / default_bauds \                   		*/
     4089 
     4090 RD_ACTION(19):					/* /					*/
     4091 	call 					     LEX ( 2 );
     4092 						     baudx = 1;
     4093 	NRED = 146;
     4094 	go to RD_TEST_REDUCTION;			/* / default_cps \                     		*/
     4095 
     4096 RD_ACTION(20):					/* /					*/
     4097 	call 					     LEX ( 2 );
     4098 						     baudx = 1;
     4099 	NRED = 146;
     4100 	go to RD_TEST_REDUCTION;			/* / default_cps \                     		*/
     4101 
     4102 RD_ACTION(21):					/* /					*/
     4103 	call 					     LEX ( 2 );
     4104 	call PUSH(2);				/*   PUSH(mainloop)                               */
     4105 	call PUSH(180);				/*   PUSH(dft_line_types)                         */
     4106 	NRED = 172;
     4107 	go to RD_TEST_REDUCTION;			/* / line_types \                      		*/
     4108 
     4109 RD_ACTION(22):					/* /					*/
     4110 	call 					     LEX ( 2 );
     4111 						     dft.erase = make_char ( );
     4112 	call 					     LEX ( 2 );
     4113 	NRED = 2;
     4114 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4115 
     4116 RD_ACTION(23):					/* /					*/
     4117 	call 					     LEX ( 2 );
     4118 	call 					     ERROR ( 3 );
     4119 	call					     NEXT_STMT();
     4120 	NRED = 2;
     4121 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4122 
     4123 RD_ACTION(24):					/* /					*/
     4124 	call 					     LEX ( 2 );
     4125 						     dft.kill = make_char ( );
     4126 	call 					     LEX ( 2 );
     4127 	NRED = 2;
     4128 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4129 
     4130 RD_ACTION(25):					/* /					*/
     4131 	call 					     LEX ( 2 );
     4132 	call 					     ERROR ( 3 );
     4133 	call					     NEXT_STMT();
     4134 	NRED = 2;
     4135 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4136 
     4137 RD_ACTION(26):					/* /					*/
     4138 	call 					     LEX ( 2 );
     4139 						     dft.frame_begin = make_char ( );
     4140 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     4141 						     dft.frame_end = make_char ( );
     4142 	call 					     LEX ( 2 );
     4143 	NRED = 2;
     4144 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4145 
     4146 RD_ACTION(27):					/* /					*/
     4147 	call 					     LEX ( 2 );
     4148 	call 					     ERROR ( 6 );
     4149 	call					     NEXT_STMT();
     4150 	NRED = 2;
     4151 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4152 
     4153 RD_ACTION(28):					/* /					*/
     4154 	call 					     LEX ( 2 );
     4155 						     dft.line_delimiter = make_char ( );
     4156 	call 					     LEX ( 2 );
     4157 	NRED = 2;
     4158 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4159 
     4160 RD_ACTION(29):					/* /					*/
     4161 	call 					     LEX ( 2 );
     4162 	call 					     ERROR ( 6 );
     4163 	call					     NEXT_STMT();
     4164 	NRED = 2;
     4165 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4166 
     4167 RD_ACTION(30):					/* /					*/
     4168 	call 					     LEX ( 2 );
     4169 						     dft.input_suspend = make_char ( );
     4170 	call 					     LEX ( 2 );
     4171 	NRED = 2;
     4172 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4173 
     4174 RD_ACTION(31):					/* /					*/
     4175 	call 					     LEX ( 2 );
     4176 	call 					     ERROR ( 6 );
     4177 	call					     NEXT_STMT();
     4178 	NRED = 2;
     4179 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4180 
     4181 RD_ACTION(32):					/* /					*/
     4182 	call 					     LEX ( 2 );
     4183 						     dft.input_resume = make_char ( );
     4184 	call 					     LEX ( 2 );
     4185 	NRED = 2;
     4186 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4187 
     4188 RD_ACTION(33):					/* /					*/
     4189 	call 					     LEX ( 2 );
     4190 						     dft.input_resume = make_char ( );
     4191 						     dft.input_timeout = "1"b;
     4192 	call 					     LEX ( 4 );
     4193 	NRED = 2;
     4194 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4195 
     4196 RD_ACTION(34):					/* /					*/
     4197 	call 					     LEX ( 2 );
     4198 	call 					     ERROR ( 6 );
     4199 	call					     NEXT_STMT();
     4200 	NRED = 2;
     4201 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4202 
     4203 RD_ACTION(35):					/* /					*/
     4204 	call 					     LEX ( 2 );
     4205 						     if dft.output_block_acknowledge then call ERROR ( 42 );
     4206 						     else do;
     4207 						     dft.output_suspend_etb = make_char ( );
     4208 						     dft.output_block_acknowledge = "0"b;
     4209 						     out_sus_set = "1"b;
     4210 						     end;
     4211 	call 					     LEX ( 2 );
     4212 	NRED = 2;
     4213 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4214 
     4215 RD_ACTION(36):					/* /					*/
     4216 	call 					     LEX ( 2 );
     4217 	call 					     ERROR ( 6 );
     4218 	call 					     LEX ( 2 );
     4219 	NRED = 2;
     4220 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4221 
     4222 RD_ACTION(37):					/* /					*/
     4223 	call 					     LEX ( 2 );
     4224 						     if dft.output_block_acknowledge then call ERROR ( 42 );
     4225 						     else do;
     4226 						     dft.output_resume_ack = make_char ( );
     4227 						     dft.output_block_acknowledge = "0"b;
     4228 						     out_sus_set = "1"b;
     4229 						     end;
     4230 	call 					     LEX ( 2 );
     4231 	NRED = 2;
     4232 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4233 
     4234 RD_ACTION(38):					/* /					*/
     4235 	call 					     LEX ( 2 );
     4236 	call 					     ERROR ( 6 );
     4237 	call					     NEXT_STMT();
     4238 	NRED = 2;
     4239 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4240 
     4241 RD_ACTION(39):					/* /					*/
     4242 	call 					     LEX ( 2 );
     4243 						     if out_sus_set then call ERROR ( 42 );
     4244 						     else do;
     4245 						     dft.output_buffer_size = token.Nvalue;
     4246 						     dft.output_block_acknowledge = "1"b;
     4247 						     block_ack_set = "1"b;
     4248 						     end;
     4249 	call 					     LEX ( 2 );
     4250 	NRED = 2;
     4251 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4252 
     4253 RD_ACTION(40):					/* /					*/
     4254 	call 					     LEX ( 2 );
     4255 	call 					     ERROR ( 6 );
     4256 	call					     NEXT_STMT();
     4257 	NRED = 2;
     4258 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4259 
     4260 RD_ACTION(41):					/* /					*/
     4261 	call 					     LEX ( 2 );
     4262 						     if out_sus_set then call ERROR ( 42 );
     4263 						     else do;
     4264 						     dft.output_suspend_etb = make_char ( );
     4265 						     dft.output_block_acknowledge = "1"b;
     4266 						     block_ack_set = "1"b;
     4267 						     end;
     4268 	call 					     LEX ( 2 );
     4269 	NRED = 2;
     4270 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4271 
     4272 RD_ACTION(42):					/* /					*/
     4273 	call 					     LEX ( 2 );
     4274 	call 					     ERROR ( 6 );
     4275 	call					     NEXT_STMT();
     4276 	NRED = 2;
     4277 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4278 
     4279 RD_ACTION(43):					/* /					*/
     4280 	call 					     LEX ( 2 );
     4281 						     if out_sus_set then call ERROR ( 42 );
     4282 						     else do;
     4283 						     dft.output_resume_ack = make_char ( );
     4284 						     dft.output_block_acknowledge = "1"b;
     4285 						     block_ack_set = "1"b;
     4286 						     end;
     4287 	call 					     LEX ( 2 );
     4288 	NRED = 2;
     4289 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4290 
     4291 RD_ACTION(44):					/* /					*/
     4292 	call 					     LEX ( 2 );
     4293 	call 					     ERROR ( 6 );
     4294 	call					     NEXT_STMT();
     4295 	NRED = 2;
     4296 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4297 
     4298 RD_ACTION(45):					/* /					*/
     4299 	call 					     LEX ( 2 );
     4300 						     bitp = addr ( dft.keyboard_addressing );
     4301 	call PUSH(2);				/*   PUSH(mainloop)                               */
     4302 	NRED = 133;
     4303 	go to RD_TEST_REDUCTION;			/* / yes_no \                          		*/
     4304 
     4305 RD_ACTION(46):					/* /					*/
     4306 	call 					     LEX ( 2 );
     4307 						     bitp = addr ( dft.print_preaccess_message );
     4308 	call PUSH(2);				/*   PUSH(mainloop)                               */
     4309 	NRED = 133;
     4310 	go to RD_TEST_REDUCTION;			/* / yes_no \                          		*/
     4311 
     4312 RD_ACTION(47):					/* /					*/
     4313 	call 					     LEX ( 2 );
     4314 						     bitp = addr ( dft.conditional_printer_off );
     4315 	call PUSH(2);				/*   PUSH(mainloop)                               */
     4316 	NRED = 133;
     4317 	go to RD_TEST_REDUCTION;			/* / yes_no \                          		*/
     4318 
     4319 RD_ACTION(48):					/* /					*/
     4320 	call 					     LEX ( 3 );
     4321 						     dft.input_conversion_rp = 0;
     4322 	NRED = 2;
     4323 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4324 
     4325 RD_ACTION(49):					/* /					*/
     4326 	call 					     LEX ( 2 );
     4327 	call 					     set_table ( dft.input_conversion_rp, CONV_TYPE );
     4328 	call 					     LEX ( 2 );
     4329 	NRED = 2;
     4330 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4331 
     4332 RD_ACTION(50):					/* /					*/
     4333 	call 					     LEX ( 3 );
     4334 						     dft.output_conversion_rp = 0;
     4335 	NRED = 2;
     4336 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4337 
     4338 RD_ACTION(51):					/* /					*/
     4339 	call 					     LEX ( 2 );
     4340 	call 					     set_table ( dft.output_conversion_rp, CONV_TYPE );
     4341 	call 					     LEX ( 2 );
     4342 	NRED = 2;
     4343 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4344 
     4345 RD_ACTION(52):					/* /					*/
     4346 	call 					     LEX ( 3 );
     4347 						     dft.input_translation_rp = 0;
     4348 	NRED = 2;
     4349 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4350 
     4351 RD_ACTION(53):					/* /					*/
     4352 	call 					     LEX ( 2 );
     4353 	call 					     set_table ( dft.input_translation_rp, TRANS_TYPE );
     4354 	call 					     LEX ( 2 );
     4355 	NRED = 2;
     4356 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4357 
     4358 RD_ACTION(54):					/* /					*/
     4359 	call 					     LEX ( 3 );
     4360 						     dft.output_translation_rp = 0;
     4361 	NRED = 2;
     4362 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4363 
     4364 RD_ACTION(55):					/* /					*/
     4365 	call 					     LEX ( 2 );
     4366 	call 					     set_table ( dft.output_translation_rp, TRANS_TYPE );
     4367 	call 					     LEX ( 2 );
     4368 	NRED = 2;
     4369 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4370 
     4371 RD_ACTION(56):					/* /					*/
     4372 	call 					     LEX ( 3 );
     4373 						     dft.special_rp = 0;
     4374 	NRED = 2;
     4375 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4376 
     4377 RD_ACTION(57):					/* /					*/
     4378 	call 					     LEX ( 2 );
     4379 	call 					     set_table ( dft.special_rp, SPEC_TYPE );
     4380 	call 					     LEX ( 2 );
     4381 	NRED = 2;
     4382 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4383 
     4384 RD_ACTION(58):					/* /					*/
     4385 	call 					     LEX ( 3 );
     4386 						     tte.fkey_rp = 0;
     4387 	NRED = 2;
     4388 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4389 
     4390 RD_ACTION(59):					/* /					*/
     4391 	call 					     LEX ( 2 );
     4392 	call 					     set_table ( tte.fkey_rp, FKEY_TYPE );
     4393 	call 					     LEX ( 2 );
     4394 	NRED = 2;
     4395 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4396 
     4397 RD_ACTION(60):					/* /					*/
     4398 	call 					     LEX ( 3 );
     4399 						     dft_extended_tablesp -> extended_tables.tables_rp ( VIDEO_RP ) = 0;
     4400 	NRED = 2;
     4401 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4402 
     4403 RD_ACTION(61):					/* /					*/
     4404 	call 					     LEX ( 2 );
     4405 						     extended_tablesp = dft_extended_tablesp;
     4406 	call					     define_video();
     4407 						     dft_extended_tables_defined = "1"b;
     4408 	call PUSH(2);				/*   PUSH(mainloop)                               */
     4409 	NRED = 275;
     4410 	go to RD_TEST_REDUCTION;			/* / video_table \                     		*/
     4411 
     4412 RD_ACTION(62):					/* /					*/
     4413 	call 					     LEX ( 3 );
     4414 						     dft_extended_tablesp -> extended_tables.tables_rp ( DSATM_DEVICE_RP ) = 0;
     4415 	NRED = 2;
     4416 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4417 
     4418 RD_ACTION(63):					/* /					*/
     4419 	call 					     LEX ( 2 );
     4420 						     extended_tablesp = dft_extended_tablesp;
     4421 	call					     define_dsatm_device();
     4422 						     dft_extended_tables_defined = "1"b;
     4423 	call PUSH(2);				/*   PUSH(mainloop)                               */
     4424 	NRED = 323;
     4425 	go to RD_TEST_REDUCTION;			/* / dsatm_device_table \              		*/
     4426 
     4427 RD_ACTION(64):					/* /					*/
     4428 	call 					     LEX ( 2 );
     4429 						     dft.old_type = token.Nvalue;
     4430 	call 					     LEX ( 2 );
     4431 	NRED = 2;
     4432 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4433 
     4434 RD_ACTION(65):					/* /					*/
     4435 	call 					     LEX ( 2 );
     4436 	NRED = 421;
     4437 	go to RD_TEST_REDUCTION;			/* / finish \                          		*/
     4438 
     4439 RD_ACTION(66):					/* /					*/
     4440 	call 					     ERROR ( 5 );
     4441 	call					     NEXT_STMT();
     4442 	NRED = 2;
     4443 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4444 
     4445 RD_ACTION(67):					/* /					*/
     4446 	call 					     ERROR ( 6 );
     4447 	call					     NEXT_STMT();
     4448 	NRED = 2;
     4449 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4450 
     4451 RD_ACTION(68):					/* /					*/
     4452 	call 					     ERROR ( 7 );
     4453 	return;					/* / RETURN	\			*/
     4454 
     4455 RD_ACTION(69):					/* /					*/
     4456 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     4457 	NRED = 72;
     4458 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     4459 
     4460 RD_ACTION(70):					/* /					*/
     4461 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     4462 	call					     copy_type();
     4463 	call 					     LEX ( 2 );
     4464 	NRED = 72;
     4465 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     4466 
     4467 RD_ACTION(71):					/* /					*/
     4468 	call 					     ERROR ( 6 );
     4469 	call					     NEXT_STMT();
     4470 	NRED = 72;
     4471 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     4472 
     4473 RD_ACTION(72):					/* /					*/
     4474 	call 					     LEX ( 2 );
     4475 	call PUSH(72);				/*   PUSH(type_statements)                        */
     4476 	call PUSH(420);				/*   PUSH(entry_modes)                            */
     4477 	NRED = 410;
     4478 	go to RD_TEST_REDUCTION;			/* / check_modes \                     		*/
     4479 
     4480 RD_ACTION(73):					/* /					*/
     4481 	call 					     LEX ( 2 );
     4482 	call PUSH(72);				/*   PUSH(type_statements)                        */
     4483 						     p = addr ( tte.additional_info );
     4484 	NRED = 156;
     4485 	go to RD_TEST_REDUCTION;			/* / char_string \                     		*/
     4486 
     4487 RD_ACTION(74):					/* /					*/
     4488 	call 					     LEX ( 2 );
     4489 	call PUSH(72);				/*   PUSH(type_statements)                        */
     4490 						     p = addr ( tte.initial_string );
     4491 	NRED = 156;
     4492 	go to RD_TEST_REDUCTION;			/* / char_string \                     		*/
     4493 
     4494 RD_ACTION(75):					/* /					*/
     4495 	call 					     LEX ( 2 );
     4496 	call PUSH(72);				/*   PUSH(type_statements)                        */
     4497 						     p = addr ( tte.comment );
     4498 	NRED = 156;
     4499 	go to RD_TEST_REDUCTION;			/* / char_string \                     		*/
     4500 
     4501 RD_ACTION(76):					/* /					*/
     4502 	call 					     LEX ( 2 );
     4503 						     baudx = 1;
     4504 	NRED = 148;
     4505 	go to RD_TEST_REDUCTION;			/* / bauds \                           		*/
     4506 
     4507 RD_ACTION(77):					/* /					*/
     4508 	call 					     LEX ( 2 );
     4509 						     baudx = 1;
     4510 	NRED = 148;
     4511 	go to RD_TEST_REDUCTION;			/* / bauds \                           		*/
     4512 
     4513 RD_ACTION(78):					/* /					*/
     4514 	call 					     LEX ( 2 );
     4515 						     baudx = 1;
     4516 	NRED = 154;
     4517 	go to RD_TEST_REDUCTION;			/* / cps \                             		*/
     4518 
     4519 RD_ACTION(79):					/* /					*/
     4520 	call 					     LEX ( 2 );
     4521 						     delayx = 1;
     4522 	NRED = 167;
     4523 	go to RD_TEST_REDUCTION;			/* / delays \                          		*/
     4524 
     4525 RD_ACTION(80):					/* /					*/
     4526 	call 					     LEX ( 2 );
     4527 						     delayx = 2;
     4528 	NRED = 167;
     4529 	go to RD_TEST_REDUCTION;			/* / delays \                          		*/
     4530 
     4531 RD_ACTION(81):					/* /					*/
     4532 	call 					     LEX ( 2 );
     4533 						     delayx = 3;
     4534 	NRED = 167;
     4535 	go to RD_TEST_REDUCTION;			/* / delays \                          		*/
     4536 
     4537 RD_ACTION(82):					/* /					*/
     4538 	call 					     LEX ( 2 );
     4539 						     delayx = 4;
     4540 	NRED = 167;
     4541 	go to RD_TEST_REDUCTION;			/* / delays \                          		*/
     4542 
     4543 RD_ACTION(83):					/* /					*/
     4544 	call 					     LEX ( 2 );
     4545 						     delayx = 5;
     4546 	NRED = 167;
     4547 	go to RD_TEST_REDUCTION;			/* / delays \                          		*/
     4548 
     4549 RD_ACTION(84):					/* /					*/
     4550 	call 					     LEX ( 2 );
     4551 						     delayx = 6;
     4552 	NRED = 167;
     4553 	go to RD_TEST_REDUCTION;			/* / delays \                          		*/
     4554 
     4555 RD_ACTION(85):					/* /					*/
     4556 	call 					     LEX ( 2 );
     4557 	call PUSH(72);				/*   PUSH(type_statements)                        */
     4558 	call PUSH(179);				/*   PUSH(entry_line_types)                       */
     4559 	NRED = 172;
     4560 	go to RD_TEST_REDUCTION;			/* / line_types \                      		*/
     4561 
     4562 RD_ACTION(86):					/* /					*/
     4563 	call 					     LEX ( 2 );
     4564 						     tte.erase = make_char ( );
     4565 	call 					     LEX ( 2 );
     4566 	NRED = 72;
     4567 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     4568 
     4569 RD_ACTION(87):					/* /					*/
     4570 	call 					     LEX ( 2 );
     4571 	call 					     ERROR ( 3 );
     4572 	call					     NEXT_STMT();
     4573 	NRED = 72;
     4574 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     4575 
     4576 RD_ACTION(88):					/* /					*/
     4577 	call 					     LEX ( 2 );
     4578 						     tte.kill = make_char ( );
     4579 	call 					     LEX ( 2 );
     4580 	NRED = 72;
     4581 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     4582 
     4583 RD_ACTION(89):					/* /					*/
     4584 	call 					     LEX ( 2 );
     4585 	call 					     ERROR ( 3 );
     4586 	call					     NEXT_STMT();
     4587 	NRED = 72;
     4588 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     4589 
     4590 RD_ACTION(90):					/* /					*/
     4591 	call 					     LEX ( 2 );
     4592 						     tte.frame_begin = make_char ( );
     4593 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     4594 						     tte.frame_end = make_char ( );
     4595 	call 					     LEX ( 2 );
     4596 	NRED = 72;
     4597 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     4598 
     4599 RD_ACTION(91):					/* /					*/
     4600 	call 					     LEX ( 2 );
     4601 	call 					     ERROR ( 6 );
     4602 	call					     NEXT_STMT();
     4603 	NRED = 72;
     4604 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     4605 
     4606 RD_ACTION(92):					/* /					*/
     4607 	call 					     LEX ( 2 );
     4608 						     tte.line_delimiter = make_char ( );
     4609 	call 					     LEX ( 2 );
     4610 	NRED = 72;
     4611 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     4612 
     4613 RD_ACTION(93):					/* /					*/
     4614 	call 					     LEX ( 2 );
     4615 	call 					     ERROR ( 6 );
     4616 	call					     NEXT_STMT();
     4617 	NRED = 72;
     4618 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     4619 
     4620 RD_ACTION(94):					/* /					*/
     4621 	call 					     LEX ( 2 );
     4622 						     tte.input_suspend = make_char ( );
     4623 	call 					     LEX ( 2 );
     4624 	NRED = 72;
     4625 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     4626 
     4627 RD_ACTION(95):					/* /					*/
     4628 	call 					     LEX ( 2 );
     4629 	call 					     ERROR ( 6 );
     4630 	call					     NEXT_STMT();
     4631 	NRED = 72;
     4632 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     4633 
     4634 RD_ACTION(96):					/* /					*/
     4635 	call 					     LEX ( 2 );
     4636 						     tte.input_resume = make_char ( );
     4637 	call 					     LEX ( 2 );
     4638 	NRED = 72;
     4639 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     4640 
     4641 RD_ACTION(97):					/* /					*/
     4642 	call 					     LEX ( 2 );
     4643 						     tte.input_resume = make_char ( );
     4644 						     tte.input_timeout = "1"b;
     4645 	call 					     LEX ( 4 );
     4646 	NRED = 72;
     4647 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     4648 
     4649 RD_ACTION(98):					/* /					*/
     4650 	call 					     LEX ( 2 );
     4651 	call 					     ERROR ( 6 );
     4652 	call					     NEXT_STMT();
     4653 	NRED = 72;
     4654 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     4655 
     4656 RD_ACTION(99):					/* /					*/
     4657 	call 					     LEX ( 2 );
     4658 						     if block_ack_set then call ERROR ( 42 );
     4659 						     else do;
     4660 						     tte.output_suspend_etb = make_char ( );
     4661 						     tte.output_block_acknowledge = "0"b;
     4662 						     out_sus_set = "1"b;
     4663 						     end;
     4664 	call 					     LEX ( 2 );
     4665 	NRED = 72;
     4666 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     4667 
     4668 RD_ACTION(100):					/* /					*/
     4669 	call 					     LEX ( 2 );
     4670 	call 					     ERROR ( 6 );
     4671 	call 					     LEX ( 2 );
     4672 	NRED = 72;
     4673 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     4674 
     4675 RD_ACTION(101):					/* /					*/
     4676 	call 					     LEX ( 2 );
     4677 						     if block_ack_set then call ERROR ( 42 );
     4678 						     else do;
     4679 						     tte.output_resume_ack = make_char ( );
     4680 						     tte.output_block_acknowledge = "0"b;
     4681 						     out_sus_set = "1"b;
     4682 						     end;
     4683 	call 					     LEX ( 2 );
     4684 	NRED = 72;
     4685 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     4686 
     4687 RD_ACTION(102):					/* /					*/
     4688 	call 					     LEX ( 2 );
     4689 	call 					     ERROR ( 6 );
     4690 	call					     NEXT_STMT();
     4691 	NRED = 72;
     4692 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     4693 
     4694 RD_ACTION(103):					/* /					*/
     4695 	call 					     LEX ( 2 );
     4696 						     if out_sus_set then call ERROR ( 42 );
     4697 						     else do;
     4698 						     tte.output_buffer_size = token.Nvalue;
     4699 						     tte.output_block_acknowledge = "1"b;
     4700 						     block_ack_set = "1"b;
     4701 						     end;
     4702 	call 					     LEX ( 2 );
     4703 	NRED = 72;
     4704 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     4705 
     4706 RD_ACTION(104):					/* /					*/
     4707 	call 					     LEX ( 2 );
     4708 	call 					     ERROR ( 6 );
     4709 	call					     NEXT_STMT();
     4710 	NRED = 72;
     4711 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     4712 
     4713 RD_ACTION(105):					/* /					*/
     4714 	call 					     LEX ( 2 );
     4715 						     if out_sus_set then call ERROR ( 42 );
     4716 						     else do;
     4717 						     tte.output_suspend_etb = make_char ( );
     4718 						     tte.output_block_acknowledge = "1"b;
     4719 						     block_ack_set = "1"b;
     4720 						     end;
     4721 	call 					     LEX ( 2 );
     4722 	NRED = 72;
     4723 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     4724 
     4725 RD_ACTION(106):					/* /					*/
     4726 	call 					     LEX ( 2 );
     4727 	call 					     ERROR ( 6 );
     4728 	call					     NEXT_STMT();
     4729 	NRED = 72;
     4730 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     4731 
     4732 RD_ACTION(107):					/* /					*/
     4733 	call 					     LEX ( 2 );
     4734 						     if out_sus_set then call ERROR ( 42 );
     4735 						     else do;
     4736 						     tte.output_resume_ack = make_char ( );
     4737 						     tte.output_block_acknowledge = "1"b;
     4738 						     block_ack_set = "1"b;
     4739 						     end;
     4740 	call 					     LEX ( 2 );
     4741 	NRED = 72;
     4742 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     4743 
     4744 RD_ACTION(108):					/* /					*/
     4745 	call 					     LEX ( 2 );
     4746 	call 					     ERROR ( 6 );
     4747 	call					     NEXT_STMT();
     4748 	NRED = 72;
     4749 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     4750 
     4751 RD_ACTION(109):					/* /					*/
     4752 	call 					     LEX ( 2 );
     4753 						     bitp = addr ( tte.keyboard_addressing );
     4754 	call PUSH(72);				/*   PUSH(type_statements)                        */
     4755 	NRED = 133;
     4756 	go to RD_TEST_REDUCTION;			/* / yes_no \                          		*/
     4757 
     4758 RD_ACTION(110):					/* /					*/
     4759 	call 					     LEX ( 2 );
     4760 						     bitp = addr ( tte.print_preaccess_message );
     4761 	call PUSH(72);				/*   PUSH(type_statements)                        */
     4762 	NRED = 133;
     4763 	go to RD_TEST_REDUCTION;			/* / yes_no \                          		*/
     4764 
     4765 RD_ACTION(111):					/* /					*/
     4766 	call 					     LEX ( 2 );
     4767 						     bitp = addr ( tte.conditional_printer_off );
     4768 	call PUSH(72);				/*   PUSH(type_statements)                        */
     4769 	NRED = 133;
     4770 	go to RD_TEST_REDUCTION;			/* / yes_no \                          		*/
     4771 
     4772 RD_ACTION(112):					/* /					*/
     4773 	call 					     LEX ( 3 );
     4774 						     tte.input_conversion_rp = 0;
     4775 	NRED = 72;
     4776 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     4777 
     4778 RD_ACTION(113):					/* /					*/
     4779 	call 					     LEX ( 2 );
     4780 	call 					     set_table ( tte.input_conversion_rp, CONV_TYPE );
     4781 	call 					     LEX ( 2 );
     4782 	NRED = 72;
     4783 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     4784 
     4785 RD_ACTION(114):					/* /					*/
     4786 	call 					     LEX ( 3 );
     4787 						     tte.output_conversion_rp = 0;
     4788 	NRED = 72;
     4789 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     4790 
     4791 RD_ACTION(115):					/* /					*/
     4792 	call 					     LEX ( 2 );
     4793 	call 					     set_table ( tte.output_conversion_rp, CONV_TYPE );
     4794 	call 					     LEX ( 2 );
     4795 	NRED = 72;
     4796 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     4797 
     4798 RD_ACTION(116):					/* /					*/
     4799 	call 					     LEX ( 3 );
     4800 						     tte.input_translation_rp = 0;
     4801 	NRED = 72;
     4802 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     4803 
     4804 RD_ACTION(117):					/* /					*/
     4805 	call 					     LEX ( 2 );
     4806 	call 					     set_table ( tte.input_translation_rp, TRANS_TYPE );
     4807 	call 					     LEX ( 2 );
     4808 	NRED = 72;
     4809 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     4810 
     4811 RD_ACTION(118):					/* /					*/
     4812 	call 					     LEX ( 3 );
     4813 						     tte.output_translation_rp = 0;
     4814 	NRED = 72;
     4815 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     4816 
     4817 RD_ACTION(119):					/* /					*/
     4818 	call 					     LEX ( 2 );
     4819 	call 					     set_table ( tte.output_translation_rp, TRANS_TYPE );
     4820 	call 					     LEX ( 2 );
     4821 	NRED = 72;
     4822 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     4823 
     4824 RD_ACTION(120):					/* /					*/
     4825 	call 					     LEX ( 3 );
     4826 						     tte.special_rp = 0;
     4827 	NRED = 72;
     4828 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     4829 
     4830 RD_ACTION(121):					/* /					*/
     4831 	call 					     LEX ( 2 );
     4832 	call 					     set_table ( tte.special_rp, SPEC_TYPE );
     4833 	call 					     LEX ( 2 );
     4834 	NRED = 72;
     4835 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     4836 
     4837 RD_ACTION(122):					/* /					*/
     4838 	call 					     LEX ( 3 );
     4839 						     tte.fkey_rp = 0;
     4840 	NRED = 72;
     4841 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     4842 
     4843 RD_ACTION(123):					/* /					*/
     4844 	call 					     LEX ( 2 );
     4845 	call 					     set_table ( tte.fkey_rp, FKEY_TYPE );
     4846 	call 					     LEX ( 2 );
     4847 	NRED = 72;
     4848 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     4849 
     4850 RD_ACTION(124):					/* /					*/
     4851 	call 					     LEX ( 3 );
     4852 						     tte.protocol = 0;
     4853 	NRED = 72;
     4854 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     4855 
     4856 RD_ACTION(125):					/* /					*/
     4857 	call 					     LEX ( 2 );
     4858 						     tte.protocol = get_protocol ( );
     4859 	call 					     LEX ( 2 );
     4860 	NRED = 72;
     4861 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     4862 
     4863 RD_ACTION(126):					/* /					*/
     4864 	call 					     LEX ( 3 );
     4865 	call					     set_extended();
     4866 						     extended_tables.tables_rp ( VIDEO_RP ) = 0;
     4867 	NRED = 72;
     4868 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     4869 
     4870 RD_ACTION(127):					/* /					*/
     4871 	call 					     LEX ( 2 );
     4872 	call					     set_extended();
     4873 	call					     define_video();
     4874 	call PUSH(72);				/*   PUSH(type_statements)                        */
     4875 	NRED = 275;
     4876 	go to RD_TEST_REDUCTION;			/* / video_table \                     		*/
     4877 
     4878 RD_ACTION(128):					/* /					*/
     4879 	call 					     LEX ( 3 );
     4880 	call					     set_extended();
     4881 						     extended_tables.tables_rp ( DSATM_DEVICE_RP ) = 0;
     4882 	NRED = 72;
     4883 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     4884 
     4885 RD_ACTION(129):					/* /					*/
     4886 	call 					     LEX ( 2 );
     4887 	call					     set_extended();
     4888 	call					     define_dsatm_device();
     4889 	call PUSH(72);				/*   PUSH(type_statements)                        */
     4890 	NRED = 323;
     4891 	go to RD_TEST_REDUCTION;			/* / dsatm_device_table \              		*/
     4892 
     4893 RD_ACTION(130):					/* /					*/
     4894 	call 					     LEX ( 2 );
     4895 						     tte.old_type = token.Nvalue;
     4896 	call 					     LEX ( 2 );
     4897 	NRED = 72;
     4898 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     4899 
     4900 RD_ACTION(131):					/* /					*/
     4901 	call					     finish_type();
     4902 	NRED = 2;
     4903 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4904 
     4905 RD_ACTION(132):					/* /					*/
     4906 	call 					     ERROR ( 7 );
     4907 	return;					/* / RETURN	\			*/
     4908 
     4909 RD_ACTION(133):					/* /					*/
     4910 						     bitp -> based_bit1 = "1"b;
     4911 	call 					     LEX ( 2 );
     4912 	go to RD_STACK_POP;				/* / STACK_POP	\			*/
     4913 
     4914 RD_ACTION(134):					/* /					*/
     4915 						     bitp -> based_bit1 = "1"b;
     4916 	call 					     LEX ( 2 );
     4917 	go to RD_STACK_POP;				/* / STACK_POP	\			*/
     4918 
     4919 RD_ACTION(135):					/* /					*/
     4920 						     bitp -> based_bit1 = "0"b;
     4921 	call 					     LEX ( 2 );
     4922 	go to RD_STACK_POP;				/* / STACK_POP	\			*/
     4923 
     4924 RD_ACTION(136):					/* /					*/
     4925 						     bitp -> based_bit1 = "0"b;
     4926 	call 					     LEX ( 2 );
     4927 	go to RD_STACK_POP;				/* / STACK_POP	\			*/
     4928 
     4929 RD_ACTION(137):					/* /					*/
     4930 	call 					     ERROR ( 4 );
     4931 	call					     NEXT_STMT();
     4932 	go to RD_STACK_POP;				/* / STACK_POP	\			*/
     4933 
     4934 RD_ACTION(138):					/* /					*/
     4935 	call 					     ERROR ( 6 );
     4936 	call					     NEXT_STMT();
     4937 	go to RD_STACK_POP;				/* / STACK_POP	\			*/
     4938 
     4939 RD_ACTION(139):					/* /					*/
     4940 	call 					     ERROR ( 7 );
     4941 	return;					/* / RETURN	\			*/
     4942 
     4943 RD_ACTION(140):					/* /					*/
     4944 						     dft_bauds ( baudx ) = token.Nvalue;
     4945 						     baudx = baudx +1;
     4946 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     4947 	NRED = 140;
     4948 	go to RD_TEST_REDUCTION;			/* / default_bauds \                   		*/
     4949 
     4950 RD_ACTION(141):					/* /					*/
     4951 	call PUSH(140);				/*   PUSH(default_bauds)                          */
     4952 	NRED = 142;
     4953 	go to RD_TEST_REDUCTION;			/* / general_dft_baud \                		*/
     4954 
     4955 RD_ACTION(142):					/* /					*/
     4956 						     dft_bauds ( baudx ) = 0;
     4957 						     baudx = baudx +1;
     4958 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     4959 	go to RD_STACK_POP;				/* / STACK_POP	\			*/
     4960 
     4961 RD_ACTION(143):					/* /					*/
     4962 						     n_dft_bauds = baudx -1;
     4963 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     4964 	STACK_DEPTH = max(STACK_DEPTH-1,0);		/*   POP					*/
     4965 	NRED = 2;
     4966 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4967 
     4968 RD_ACTION(144):					/* /					*/
     4969 	call 					     ERROR ( 8 );
     4970 	STACK_DEPTH = max(STACK_DEPTH-1,0);		/*   POP					*/
     4971 	call					     NEXT_STMT();
     4972 	NRED = 2;
     4973 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     4974 
     4975 RD_ACTION(145):					/* /					*/
     4976 	call 					     ERROR ( 7 );
     4977 	return;					/* / RETURN	\			*/
     4978 
     4979 RD_ACTION(146):					/* /					*/
     4980 						     dft_bauds ( baudx ) = cps_baud_value;
     4981 						     baudx = baudx +1;
     4982 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     4983 	NRED = 146;
     4984 	go to RD_TEST_REDUCTION;			/* / default_cps \                     		*/
     4985 
     4986 RD_ACTION(147):					/* /					*/
     4987 	call PUSH(146);				/*   PUSH(default_cps)                            */
     4988 	NRED = 142;
     4989 	go to RD_TEST_REDUCTION;			/* / general_dft_baud \                		*/
     4990 
     4991 RD_ACTION(148):					/* /					*/
     4992 	call 					     make_delay_entry ( ( token.Nvalue ) );
     4993 						     baudx = baudx +1;
     4994 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     4995 	NRED = 148;
     4996 	go to RD_TEST_REDUCTION;			/* / bauds \                           		*/
     4997 
     4998 RD_ACTION(149):					/* /					*/
     4999 	call PUSH(148);				/*   PUSH(bauds)                                  */
     5000 	NRED = 150;
     5001 	go to RD_TEST_REDUCTION;			/* / general_baud \                    		*/
     5002 
     5003 RD_ACTION(150):					/* /					*/
     5004 	call 					     make_delay_entry ( 0 );
     5005 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5006 	go to RD_STACK_POP;				/* / STACK_POP	\			*/
     5007 
     5008 RD_ACTION(151):					/* /					*/
     5009 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5010 	STACK_DEPTH = max(STACK_DEPTH-1,0);		/*   POP					*/
     5011 	NRED = 72;
     5012 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     5013 
     5014 RD_ACTION(152):					/* /					*/
     5015 	call 					     ERROR ( 8 );
     5016 	STACK_DEPTH = max(STACK_DEPTH-1,0);		/*   POP					*/
     5017 	call					     NEXT_STMT();
     5018 	NRED = 72;
     5019 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     5020 
     5021 RD_ACTION(153):					/* /					*/
     5022 	call 					     ERROR ( 7 );
     5023 	return;					/* / RETURN	\			*/
     5024 
     5025 RD_ACTION(154):					/* /					*/
     5026 	call 					     make_delay_entry ( cps_baud_value );
     5027 						     baudx = baudx +1;
     5028 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5029 	NRED = 154;
     5030 	go to RD_TEST_REDUCTION;			/* / cps \                             		*/
     5031 
     5032 RD_ACTION(155):					/* /					*/
     5033 	call PUSH(154);				/*   PUSH(cps)                                    */
     5034 	NRED = 150;
     5035 	go to RD_TEST_REDUCTION;			/* / general_baud \                    		*/
     5036 
     5037 RD_ACTION(156):					/* /					*/
     5038 						     p -> based_two_words ( * ) = 0;
     5039 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5040 	go to RD_STACK_POP;				/* / STACK_POP	\			*/
     5041 
     5042 RD_ACTION(157):					/* /					*/
     5043 	call 					     copy_string ( p );
     5044 	call 					     LEX ( 2 );
     5045 	go to RD_STACK_POP;				/* / STACK_POP	\			*/
     5046 
     5047 RD_ACTION(158):					/* /					*/
     5048 						     exp_char_index , unexp_char_index = 1;
     5049 						     rep_depth , expanded ( * ) , unexpanded ( * ) = 0;
     5050 						     rep_error , rep_used = "0"b;
     5051 						    ;
     5052 	NRED = 159;
     5053 	go to RD_TEST_REDUCTION;			/* / string_item \                     		*/
     5054 
     5055 RD_ACTION(159):					/* /					*/
     5056 	call					     NEXT_STMT();
     5057 	go to RD_STACK_POP;				/* / STACK_POP	\			*/
     5058 
     5059 RD_ACTION(160):					/* /					*/
     5060 	call					     insert_quoted_string();
     5061 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5062 	NRED = 159;
     5063 	go to RD_TEST_REDUCTION;			/* / string_item \                     		*/
     5064 
     5065 RD_ACTION(161):					/* /					*/
     5066 						     call insert_single_char ( ( token.Nvalue ) );
     5067 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5068 	NRED = 159;
     5069 	go to RD_TEST_REDUCTION;			/* / string_item \                     		*/
     5070 
     5071 RD_ACTION(162):					/* /					*/
     5072 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5073 	call					     push_rep();
     5074 	call 					     LEX ( 3 );
     5075 	NRED = 159;
     5076 	go to RD_TEST_REDUCTION;			/* / string_item \                     		*/
     5077 
     5078 RD_ACTION(163):					/* /					*/
     5079 	call					     pop_rep();
     5080 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5081 	NRED = 159;
     5082 	go to RD_TEST_REDUCTION;			/* / string_item \                     		*/
     5083 
     5084 RD_ACTION(164):					/* /					*/
     5085 	call 					     store_string ( p );
     5086 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5087 	go to RD_STACK_POP;				/* / STACK_POP	\			*/
     5088 
     5089 RD_ACTION(165):					/* /					*/
     5090 	call 					     ERROR ( 6 );
     5091 	call					     NEXT_STMT();
     5092 	go to RD_STACK_POP;				/* / STACK_POP	\			*/
     5093 
     5094 RD_ACTION(166):					/* /					*/
     5095 	call 					     ERROR ( 7 );
     5096 	return;					/* / RETURN	\			*/
     5097 
     5098 RD_ACTION(167):					/* /					*/
     5099 						     n_spec = 0;
     5100 						     delay_error_printed = "0"b;
     5101 	NRED = 168;
     5102 	go to RD_TEST_REDUCTION;			/* / delay_token \                     		*/
     5103 
     5104 RD_ACTION(168):					/* /					*/
     5105 	call					     set_delay();
     5106 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5107 	NRED = 168;
     5108 	go to RD_TEST_REDUCTION;			/* / delay_token \                     		*/
     5109 
     5110 RD_ACTION(169):					/* /					*/
     5111 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5112 	NRED = 72;
     5113 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     5114 
     5115 RD_ACTION(170):					/* /					*/
     5116 	call 					     ERROR ( 9 );
     5117 	call					     NEXT_STMT();
     5118 	NRED = 72;
     5119 	go to RD_TEST_REDUCTION;			/* / type_statements \                 		*/
     5120 
     5121 RD_ACTION(171):					/* /					*/
     5122 	call 					     ERROR ( 7 );
     5123 	return;					/* / RETURN	\			*/
     5124 
     5125 RD_ACTION(172):					/* /					*/
     5126 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5127 	go to RD_STACK_POP;				/* / STACK_POP	\			*/
     5128 
     5129 RD_ACTION(173):					/* /					*/
     5130 						     line_type_str = ""b;
     5131 	NRED = 174;
     5132 	go to RD_TEST_REDUCTION;			/* / line_type_values \                		*/
     5133 
     5134 RD_ACTION(174):					/* /					*/
     5135 						     substr ( line_type_str, token.Nvalue, 1 ) = "1"b;
     5136 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5137 	NRED = 177;
     5138 	go to RD_TEST_REDUCTION;			/* / next_line_type \                  		*/
     5139 
     5140 RD_ACTION(175):					/* /					*/
     5141 	call 					     ERROR ( 10 );
     5142 	call					     NEXT_STMT();
     5143 	go to RD_STACK_POP;				/* / STACK_POP	\			*/
     5144 
     5145 RD_ACTION(176):					/* /					*/
     5146 	call 					     ERROR ( 7 );
     5147 	return;					/* / RETURN	\			*/
     5148 
     5149 RD_ACTION(177):					/* /					*/
     5150 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5151 	NRED = 174;
     5152 	go to RD_TEST_REDUCTION;			/* / line_type_values \                		*/
     5153 
     5154 RD_ACTION(178):					/* /					*/
     5155 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5156 	go to RD_STACK_POP;				/* / STACK_POP	\			*/
     5157 
     5158 RD_ACTION(179):					/* /					*/
     5159 						     tte.line_types = line_type_str;
     5160 	go to RD_STACK_POP;				/* / STACK_POP	\			*/
     5161 
     5162 RD_ACTION(180):					/* /					*/
     5163 						     dft.line_types = line_type_str;
     5164 	go to RD_STACK_POP;				/* / STACK_POP	\			*/
     5165 
     5166 RD_ACTION(181):					/* /					*/
     5167 	call					     NEXT_STMT();
     5168 	NRED = 2;
     5169 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     5170 
     5171 RD_ACTION(182):					/* /					*/
     5172 						     entryx = 0;
     5173 	NRED = 183;
     5174 	go to RD_TEST_REDUCTION;			/* / table_entry \                     		*/
     5175 
     5176 RD_ACTION(183):					/* /					*/
     5177 						     if entryx > hbound ( tablep -> cv_trans.value, 1 ) then call semant_error ( 11, cur_table_name, "" );
     5178 						     else temp_table ( entryx ) = token.Nvalue;
     5179 						     entryx = entryx +1;
     5180 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5181 	NRED = 183;
     5182 	go to RD_TEST_REDUCTION;			/* / table_entry \                     		*/
     5183 
     5184 RD_ACTION(184):					/* /					*/
     5185 						     if entryx < 128 then call semant_error ( 12, cur_table_name, "" );
     5186 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5187 	NRED = 2;
     5188 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     5189 
     5190 RD_ACTION(185):					/* /					*/
     5191 	call 					     semant_error ( 13, cur_table_name, token_value );
     5192 	call					     NEXT_STMT();
     5193 	NRED = 2;
     5194 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     5195 
     5196 RD_ACTION(186):					/* /					*/
     5197 	call 					     ERROR ( 7 );
     5198 	return;					/* / RETURN	\			*/
     5199 
     5200 RD_ACTION(187):					/* /					*/
     5201 	call 					     LEX ( 2 );
     5202 						     p = addr ( temp_special_table.nl_seq );
     5203 	call PUSH(213);				/*   PUSH(single_sequence)                        */
     5204 	NRED = 207;
     5205 	go to RD_TEST_REDUCTION;			/* / sequence \                        		*/
     5206 
     5207 RD_ACTION(188):					/* /					*/
     5208 	call 					     LEX ( 2 );
     5209 						     p = addr ( temp_special_table.cr_seq );
     5210 	call PUSH(213);				/*   PUSH(single_sequence)                        */
     5211 	NRED = 207;
     5212 	go to RD_TEST_REDUCTION;			/* / sequence \                        		*/
     5213 
     5214 RD_ACTION(189):					/* /					*/
     5215 	call 					     LEX ( 2 );
     5216 						     p = addr ( temp_special_table.bs_seq );
     5217 	call PUSH(213);				/*   PUSH(single_sequence)                        */
     5218 	NRED = 207;
     5219 	go to RD_TEST_REDUCTION;			/* / sequence \                        		*/
     5220 
     5221 RD_ACTION(190):					/* /					*/
     5222 	call 					     LEX ( 2 );
     5223 						     p = addr ( temp_special_table.tab_seq );
     5224 	call PUSH(213);				/*   PUSH(single_sequence)                        */
     5225 	NRED = 207;
     5226 	go to RD_TEST_REDUCTION;			/* / sequence \                        		*/
     5227 
     5228 RD_ACTION(191):					/* /					*/
     5229 	call 					     LEX ( 2 );
     5230 						     p = addr ( temp_special_table.vt_seq );
     5231 	call PUSH(213);				/*   PUSH(single_sequence)                        */
     5232 	NRED = 207;
     5233 	go to RD_TEST_REDUCTION;			/* / sequence \                        		*/
     5234 
     5235 RD_ACTION(192):					/* /					*/
     5236 	call 					     LEX ( 2 );
     5237 						     p = addr ( temp_special_table.ff_seq );
     5238 	call PUSH(213);				/*   PUSH(single_sequence)                        */
     5239 	NRED = 207;
     5240 	go to RD_TEST_REDUCTION;			/* / sequence \                        		*/
     5241 
     5242 RD_ACTION(193):					/* /					*/
     5243 	call 					     LEX ( 2 );
     5244 						     p = addr ( temp_special_table.printer_on );
     5245 	call PUSH(213);				/*   PUSH(single_sequence)                        */
     5246 	NRED = 207;
     5247 	go to RD_TEST_REDUCTION;			/* / sequence \                        		*/
     5248 
     5249 RD_ACTION(194):					/* /					*/
     5250 	call 					     LEX ( 2 );
     5251 						     p = addr ( temp_special_table.printer_off );
     5252 	call PUSH(213);				/*   PUSH(single_sequence)                        */
     5253 	NRED = 207;
     5254 	go to RD_TEST_REDUCTION;			/* / sequence \                        		*/
     5255 
     5256 RD_ACTION(195):					/* /					*/
     5257 	call 					     LEX ( 2 );
     5258 						     p = addr ( temp_special_table.red_ribbon_shift );
     5259 	call PUSH(213);				/*   PUSH(single_sequence)                        */
     5260 	NRED = 207;
     5261 	go to RD_TEST_REDUCTION;			/* / sequence \                        		*/
     5262 
     5263 RD_ACTION(196):					/* /					*/
     5264 	call 					     LEX ( 2 );
     5265 						     p = addr ( temp_special_table.black_ribbon_shift );
     5266 	call PUSH(213);				/*   PUSH(single_sequence)                        */
     5267 	NRED = 207;
     5268 	go to RD_TEST_REDUCTION;			/* / sequence \                        		*/
     5269 
     5270 RD_ACTION(197):					/* /					*/
     5271 	call 					     LEX ( 2 );
     5272 						     p = addr ( temp_special_table.end_of_page );
     5273 	call PUSH(213);				/*   PUSH(single_sequence)                        */
     5274 	NRED = 207;
     5275 	go to RD_TEST_REDUCTION;			/* / sequence \                        		*/
     5276 
     5277 RD_ACTION(198):					/* /					*/
     5278 	call 					     LEX ( 2 );
     5279 						     esc_p = addr ( not_edited );
     5280 						     not_edited ( * ) = 0;
     5281 	NRED = 203;
     5282 	go to RD_TEST_REDUCTION;			/* / output_escapes \                  		*/
     5283 
     5284 RD_ACTION(199):					/* /					*/
     5285 	call 					     LEX ( 2 );
     5286 						     esc_p = addr ( edited );
     5287 						     edited ( * ) = 0;
     5288 	NRED = 203;
     5289 	go to RD_TEST_REDUCTION;			/* / output_escapes \                  		*/
     5290 
     5291 RD_ACTION(200):					/* /					*/
     5292 	call 					     LEX ( 2 );
     5293 						     count = 0;
     5294 	NRED = 216;
     5295 	go to RD_TEST_REDUCTION;			/* / input_escapes \                   		*/
     5296 
     5297 RD_ACTION(201):					/* /					*/
     5298 	call					     check_special();
     5299 	NRED = 2;
     5300 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     5301 
     5302 RD_ACTION(202):					/* /					*/
     5303 	call 					     ERROR ( 7 );
     5304 	return;					/* / RETURN	\			*/
     5305 
     5306 RD_ACTION(203):					/* /					*/
     5307 						     max_output_escapes = 0;
     5308 	go to RD_NEXT_REDUCTION;			/* /	\				*/
     5309 
     5310 RD_ACTION(204):					/* /					*/
     5311 	call PUSH(212);				/*   PUSH(escape_sequences)                       */
     5312 						     p = addr ( esc_p -> escapes ( token.Nvalue -16 ) );
     5313 						     max_output_escapes = max ( max_output_escapes, token.Nvalue -16 );
     5314 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5315 	NRED = 207;
     5316 	go to RD_TEST_REDUCTION;			/* / sequence \                        		*/
     5317 
     5318 RD_ACTION(205):					/* /					*/
     5319 	call 					     ERROR ( 14 );
     5320 	call					     NEXT_STMT();
     5321 	NRED = 187;
     5322 	go to RD_TEST_REDUCTION;			/* / special_entries \                 		*/
     5323 
     5324 RD_ACTION(206):					/* /					*/
     5325 	call 					     ERROR ( 7 );
     5326 	return;					/* / RETURN	\			*/
     5327 
     5328 RD_ACTION(207):					/* /					*/
     5329 	call					     NEXT_STMT();
     5330 						     STACK_DEPTH = 0;
     5331 	NRED = 187;
     5332 	go to RD_TEST_REDUCTION;			/* / special_entries \                 		*/
     5333 
     5334 RD_ACTION(208):					/* /					*/
     5335 						     count = 0;
     5336 	NRED = 209;
     5337 	go to RD_TEST_REDUCTION;			/* / sequence_values \                 		*/
     5338 
     5339 RD_ACTION(209):					/* /					*/
     5340 						     count = count +1;
     5341 						     if count > hbound ( c_chars.chars, 1 ) then call ERROR ( 15 );
     5342 						     else addr ( p -> c_chars.chars ( count ) ) -> based_fb8 = token.Nvalue;
     5343 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5344 	NRED = 209;
     5345 	go to RD_TEST_REDUCTION;			/* / sequence_values \                 		*/
     5346 
     5347 RD_ACTION(210):					/* /					*/
     5348 	go to RD_STACK_POP;				/* / STACK_POP	\			*/
     5349 
     5350 RD_ACTION(211):					/* /					*/
     5351 	call 					     ERROR ( 7 );
     5352 	return;					/* / RETURN	\			*/
     5353 
     5354 RD_ACTION(212):					/* /					*/
     5355 						     p -> c_chars.count = count;
     5356 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5357 	NRED = 204;
     5358 	go to RD_TEST_REDUCTION;			/* / output_indicator \                		*/
     5359 
     5360 RD_ACTION(213):					/* /					*/
     5361 						     p -> c_chars.count = count;
     5362 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5363 	NRED = 187;
     5364 	go to RD_TEST_REDUCTION;			/* / special_entries \                 		*/
     5365 
     5366 RD_ACTION(214):					/* /					*/
     5367 	call 					     ERROR ( 16 );
     5368 	call					     NEXT_STMT();
     5369 	NRED = 187;
     5370 	go to RD_TEST_REDUCTION;			/* / special_entries \                 		*/
     5371 
     5372 RD_ACTION(215):					/* /					*/
     5373 	call 					     ERROR ( 7 );
     5374 	return;					/* / RETURN	\			*/
     5375 
     5376 RD_ACTION(216):					/* /					*/
     5377 	call					     NEXT_STMT();
     5378 	NRED = 187;
     5379 	go to RD_TEST_REDUCTION;			/* / special_entries \                 		*/
     5380 
     5381 RD_ACTION(217):					/* /					*/
     5382 						     count = count +1;
     5383 						     addr ( input_escapes.str ) -> fb8_array ( count ) = token.Nvalue;
     5384 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5385 	NRED = 220;
     5386 	go to RD_TEST_REDUCTION;			/* / input_result \                    		*/
     5387 
     5388 RD_ACTION(218):					/* /					*/
     5389 	call 					     ERROR ( 6 );
     5390 	call					     NEXT_STMT();
     5391 	NRED = 187;
     5392 	go to RD_TEST_REDUCTION;			/* / special_entries \                 		*/
     5393 
     5394 RD_ACTION(219):					/* /					*/
     5395 	call 					     ERROR ( 7 );
     5396 	return;					/* / RETURN	\			*/
     5397 
     5398 RD_ACTION(220):					/* /					*/
     5399 						     addr ( input_results.str ) -> fb8_array ( count ) = token.Nvalue;
     5400 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5401 	NRED = 222;
     5402 	go to RD_TEST_REDUCTION;			/* / next_esc \                        		*/
     5403 
     5404 RD_ACTION(221):					/* /					*/
     5405 	NRED = 218;
     5406 	go to RD_TEST_REDUCTION;			/* / input_esc_error \                 		*/
     5407 
     5408 RD_ACTION(222):					/* /					*/
     5409 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5410 	NRED = 216;
     5411 	go to RD_TEST_REDUCTION;			/* / input_escapes \                   		*/
     5412 
     5413 RD_ACTION(223):					/* /					*/
     5414 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5415 						     input_escapes.len = count;
     5416 	NRED = 187;
     5417 	go to RD_TEST_REDUCTION;			/* / special_entries \                 		*/
     5418 
     5419 RD_ACTION(224):					/* /					*/
     5420 	NRED = 218;
     5421 	go to RD_TEST_REDUCTION;			/* / input_esc_error \                 		*/
     5422 
     5423 RD_ACTION(225):					/* /					*/
     5424 	call 					     LEX ( 2 );
     5425 	call 					     start_fkey_seq ( addr ( function_key_data.home ( 0 ) ) );
     5426 	NRED = 233;
     5427 	go to RD_TEST_REDUCTION;			/* / fkey_entry \                      		*/
     5428 
     5429 RD_ACTION(226):					/* /					*/
     5430 	call 					     LEX ( 2 );
     5431 	call 					     start_fkey_seq ( addr ( function_key_data.left ( 0 ) ) );
     5432 	NRED = 233;
     5433 	go to RD_TEST_REDUCTION;			/* / fkey_entry \                      		*/
     5434 
     5435 RD_ACTION(227):					/* /					*/
     5436 	call 					     LEX ( 2 );
     5437 	call 					     start_fkey_seq ( addr ( function_key_data.right ( 0 ) ) );
     5438 	NRED = 233;
     5439 	go to RD_TEST_REDUCTION;			/* / fkey_entry \                      		*/
     5440 
     5441 RD_ACTION(228):					/* /					*/
     5442 	call 					     LEX ( 2 );
     5443 	call 					     start_fkey_seq ( addr ( function_key_data.up ( 0 ) ) );
     5444 	NRED = 233;
     5445 	go to RD_TEST_REDUCTION;			/* / fkey_entry \                      		*/
     5446 
     5447 RD_ACTION(229):					/* /					*/
     5448 	call 					     LEX ( 2 );
     5449 	call 					     start_fkey_seq ( addr ( function_key_data.down ( 0 ) ) );
     5450 	NRED = 233;
     5451 	go to RD_TEST_REDUCTION;			/* / fkey_entry \                      		*/
     5452 
     5453 RD_ACTION(230):					/* /					*/
     5454 	call 					     LEX ( 2 );
     5455 						     token.Nvalue = bin ( token_value, 35, 0 );
     5456 	call 					     init_fkey_area ( ( token.Nvalue ) );
     5457 	call 					     start_fkey_seq ( addr ( function_key_data.function_keys ( token.Nvalue, 0 ) ) );
     5458 	call 					     LEX ( 3 );
     5459 	NRED = 233;
     5460 	go to RD_TEST_REDUCTION;			/* / fkey_entry \                      		*/
     5461 
     5462 RD_ACTION(231):					/* /					*/
     5463 	call					     finish_fkey_table();
     5464 	NRED = 2;
     5465 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     5466 
     5467 RD_ACTION(232):					/* /					*/
     5468 	call 					     ERROR ( 7 );
     5469 	return;					/* / RETURN	\			*/
     5470 
     5471 RD_ACTION(233):					/* /					*/
     5472 	call 					     statement_error ( 52, cur_table_name, "" );
     5473 	call					     NEXT_STMT();
     5474 	NRED = 225;
     5475 	go to RD_TEST_REDUCTION;			/* / fkey_entries \                    		*/
     5476 
     5477 RD_ACTION(234):					/* /					*/
     5478 	call					     insert_quoted_string();
     5479 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5480 	NRED = 234;
     5481 	go to RD_TEST_REDUCTION;			/* / fkey_seq \                        		*/
     5482 
     5483 RD_ACTION(235):					/* /					*/
     5484 	call 					     insert_single_char ( ( token.Nvalue ) );
     5485 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5486 	NRED = 234;
     5487 	go to RD_TEST_REDUCTION;			/* / fkey_seq \                        		*/
     5488 
     5489 RD_ACTION(236):					/* /					*/
     5490 	call					     end_fkey_seq();
     5491 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5492 	NRED = 233;
     5493 	go to RD_TEST_REDUCTION;			/* / fkey_entry \                      		*/
     5494 
     5495 RD_ACTION(237):					/* /					*/
     5496 	call					     end_fkey_seq();
     5497 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5498 	NRED = 225;
     5499 	go to RD_TEST_REDUCTION;			/* / fkey_entries \                    		*/
     5500 
     5501 RD_ACTION(238):					/* /					*/
     5502 	call 					     ERROR ( 50 );
     5503 	call					     NEXT_STMT();
     5504 	NRED = 225;
     5505 	go to RD_TEST_REDUCTION;			/* / fkey_entries \                    		*/
     5506 
     5507 RD_ACTION(239):					/* /					*/
     5508 	call 					     ERROR ( 7 );
     5509 	return;					/* / RETURN	\			*/
     5510 
     5511 RD_ACTION(240):					/* /					*/
     5512 						     temp_dftte ( default_count ) .baud = token.Nvalue;
     5513 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5514 	NRED = 244;
     5515 	go to RD_TEST_REDUCTION;			/* / dftt_line_type \                  		*/
     5516 
     5517 RD_ACTION(241):					/* /					*/
     5518 						     temp_dftte ( default_count ) .baud = 0;
     5519 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5520 	NRED = 244;
     5521 	go to RD_TEST_REDUCTION;			/* / dftt_line_type \                  		*/
     5522 
     5523 RD_ACTION(242):					/* /					*/
     5524 	call 					     ERROR ( 8 );
     5525 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5526 	NRED = 244;
     5527 	go to RD_TEST_REDUCTION;			/* / dftt_line_type \                  		*/
     5528 
     5529 RD_ACTION(243):					/* /					*/
     5530 	call 					     ERROR ( 7 );
     5531 	return;					/* / RETURN	\			*/
     5532 
     5533 RD_ACTION(244):					/* /					*/
     5534 						     temp_dftte ( default_count ) .line_type = token.Nvalue;
     5535 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5536 	NRED = 248;
     5537 	go to RD_TEST_REDUCTION;			/* / dft_term_type \                   		*/
     5538 
     5539 RD_ACTION(245):					/* /					*/
     5540 						     temp_dftte ( default_count ) .line_type = 0;
     5541 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5542 	NRED = 248;
     5543 	go to RD_TEST_REDUCTION;			/* / dft_term_type \                   		*/
     5544 
     5545 RD_ACTION(246):					/* /					*/
     5546 	call 					     ERROR ( 10 );
     5547 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5548 	NRED = 248;
     5549 	go to RD_TEST_REDUCTION;			/* / dft_term_type \                   		*/
     5550 
     5551 RD_ACTION(247):					/* /					*/
     5552 	call 					     ERROR ( 7 );
     5553 	return;					/* / RETURN	\			*/
     5554 
     5555 RD_ACTION(248):					/* /					*/
     5556 						     temp_dftte ( default_count ) .term_type_index = token.Nvalue;
     5557 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5558 	NRED = 251;
     5559 	go to RD_TEST_REDUCTION;			/* / next_default \                    		*/
     5560 
     5561 RD_ACTION(249):					/* /					*/
     5562 						     temp_dftte ( default_count ) .type_name = token_value;
     5563 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5564 	NRED = 251;
     5565 	go to RD_TEST_REDUCTION;			/* / next_default \                    		*/
     5566 
     5567 RD_ACTION(250):					/* /					*/
     5568 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5569 	NRED = 251;
     5570 	go to RD_TEST_REDUCTION;			/* / next_default \                    		*/
     5571 
     5572 RD_ACTION(251):					/* /					*/
     5573 						     default_count = default_count +1;
     5574 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5575 	NRED = 240;
     5576 	go to RD_TEST_REDUCTION;			/* / default_types \                   		*/
     5577 
     5578 RD_ACTION(252):					/* /					*/
     5579 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5580 						     temp_dftt.dft_count = default_count;
     5581 	call					     check_for_any();
     5582 	NRED = 2;
     5583 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     5584 
     5585 RD_ACTION(253):					/* /					*/
     5586 	call 					     ERROR ( 6 );
     5587 	call					     NEXT_STMT();
     5588 	NRED = 2;
     5589 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     5590 
     5591 RD_ACTION(254):					/* /					*/
     5592 	call 					     ERROR ( 7 );
     5593 	return;					/* / RETURN	\			*/
     5594 
     5595 RD_ACTION(255):					/* /					*/
     5596 						     answerback_entry.def_string.chars ( ansbck_char_index ) = "m";
     5597 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5598 	NRED = 262;
     5599 	go to RD_TEST_REDUCTION;			/* / match_string \                    		*/
     5600 
     5601 RD_ACTION(256):					/* /					*/
     5602 						     answerback_entry.def_string.chars ( ansbck_char_index ) = "s";
     5603 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5604 	NRED = 262;
     5605 	go to RD_TEST_REDUCTION;			/* / match_string \                    		*/
     5606 
     5607 RD_ACTION(257):					/* /					*/
     5608 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5609 						     answerback_entry.def_string.chars ( ansbck_char_index ) = "k";
     5610 						     addr ( answerback_entry.def_string.chars ( ansbck_char_index+1 ) ) -> based_fb8 = token.Nvalue;
     5611 						     ansbck_char_index = ansbck_char_index +2;
     5612 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5613 	NRED = 267;
     5614 	go to RD_TEST_REDUCTION;			/* / next_spec \                       		*/
     5615 
     5616 RD_ACTION(258):					/* /					*/
     5617 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5618 						     answerback_entry.def_string.chars ( ansbck_char_index ) = "i";
     5619 						     addr ( answerback_entry.def_string.chars ( ansbck_char_index+1 ) ) -> based_fb8 = token.Nvalue;
     5620 						     ansbck_char_index = ansbck_char_index +2;
     5621 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5622 	NRED = 267;
     5623 	go to RD_TEST_REDUCTION;			/* / next_spec \                       		*/
     5624 
     5625 RD_ACTION(259):					/* /					*/
     5626 						     answerback_entry.def_string.chars ( ansbck_char_index ) = "i";
     5627 						     answerback_entry.def_string.chars ( ansbck_char_index+1 ) = NUL_CHAR;
     5628 						     ansbck_char_index = ansbck_char_index +2;
     5629 	call 					     LEX ( 2 );
     5630 	NRED = 267;
     5631 	go to RD_TEST_REDUCTION;			/* / next_spec \                       		*/
     5632 
     5633 RD_ACTION(260):					/* /					*/
     5634 	call 					     ERROR ( 17 );
     5635 	call					     NEXT_STMT();
     5636 	NRED = 270;
     5637 	go to RD_TEST_REDUCTION;			/* / ans_back_type \                   		*/
     5638 
     5639 RD_ACTION(261):					/* /					*/
     5640 	call 					     ERROR ( 7 );
     5641 	return;					/* / RETURN	\			*/
     5642 
     5643 RD_ACTION(262):					/* /					*/
     5644 						     addr ( answerback_entry.def_string.chars ( ansbck_char_index+1 ) ) -> based_fb8 = token.Lvalue;
     5645 						     substr ( answerback_entry.def_string.chars ( 1 ), ansbck_char_index+2, token.Lvalue ) = token_value;
     5646 						     ansbck_char_index = ansbck_char_index +token.Lvalue +2;
     5647 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5648 	NRED = 267;
     5649 	go to RD_TEST_REDUCTION;			/* / next_spec \                       		*/
     5650 
     5651 RD_ACTION(263):					/* /					*/
     5652 						     addr ( answerback_entry.def_string.chars ( ansbck_char_index+1 ) ) -> based_fb8 = -2;
     5653 						     ansbck_char_index = ansbck_char_index +2;
     5654 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5655 	NRED = 267;
     5656 	go to RD_TEST_REDUCTION;			/* / next_spec \                       		*/
     5657 
     5658 RD_ACTION(264):					/* /					*/
     5659 						     addr ( answerback_entry.def_string.chars ( ansbck_char_index+1 ) ) -> based_fb8 = -1;
     5660 						     ansbck_char_index = ansbck_char_index +2;
     5661 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5662 	NRED = 267;
     5663 	go to RD_TEST_REDUCTION;			/* / next_spec \                       		*/
     5664 
     5665 RD_ACTION(265):					/* /					*/
     5666 	call 					     ERROR ( 17 );
     5667 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5668 	NRED = 267;
     5669 	go to RD_TEST_REDUCTION;			/* / next_spec \                       		*/
     5670 
     5671 RD_ACTION(266):					/* /					*/
     5672 	call 					     ERROR ( 7 );
     5673 	return;					/* / RETURN	\			*/
     5674 
     5675 RD_ACTION(267):					/* /					*/
     5676 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5677 	NRED = 255;
     5678 	go to RD_TEST_REDUCTION;			/* / answerback \                      		*/
     5679 
     5680 RD_ACTION(268):					/* /					*/
     5681 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5682 						     answerback_entry.def_string.length = ansbck_char_index -1;
     5683 	NRED = 270;
     5684 	go to RD_TEST_REDUCTION;			/* / ans_back_type \                   		*/
     5685 
     5686 RD_ACTION(269):					/* /					*/
     5687 	NRED = 260;
     5688 	go to RD_TEST_REDUCTION;			/* / ansbck_error \                    		*/
     5689 
     5690 RD_ACTION(270):					/* /					*/
     5691 	call 					     LEX ( 3 );
     5692 	NRED = 2;
     5693 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     5694 
     5695 RD_ACTION(271):					/* /					*/
     5696 	call 					     LEX ( 2 );
     5697 						     answerback_entry.term_type_index = token.Nvalue;
     5698 	call 					     LEX ( 2 );
     5699 	NRED = 2;
     5700 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     5701 
     5702 RD_ACTION(272):					/* /					*/
     5703 	call 					     LEX ( 2 );
     5704 	call 					     ERROR ( 18 );
     5705 	call					     NEXT_STMT();
     5706 	NRED = 2;
     5707 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     5708 
     5709 RD_ACTION(273):					/* /					*/
     5710 	NRED = 2;
     5711 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     5712 
     5713 RD_ACTION(274):					/* /					*/
     5714 	call 					     ERROR ( 7 );
     5715 	return;					/* / RETURN	\			*/
     5716 
     5717 RD_ACTION(275):					/* /					*/
     5718 	call 					     LEX ( 2 );
     5719 	call 					     start_vseq ( CLEAR_SCREEN );
     5720 	NRED = 294;
     5721 	go to RD_TEST_REDUCTION;			/* / vseq \                            		*/
     5722 
     5723 RD_ACTION(276):					/* /					*/
     5724 	call 					     LEX ( 2 );
     5725 	call 					     start_vseq ( CLEAR_TO_EOS );
     5726 	NRED = 294;
     5727 	go to RD_TEST_REDUCTION;			/* / vseq \                            		*/
     5728 
     5729 RD_ACTION(277):					/* /					*/
     5730 	call 					     LEX ( 2 );
     5731 	call 					     start_vseq ( HOME );
     5732 	NRED = 294;
     5733 	go to RD_TEST_REDUCTION;			/* / vseq \                            		*/
     5734 
     5735 RD_ACTION(278):					/* /					*/
     5736 	call 					     LEX ( 2 );
     5737 	call 					     start_vseq ( CLEAR_TO_EOL );
     5738 	NRED = 294;
     5739 	go to RD_TEST_REDUCTION;			/* / vseq \                            		*/
     5740 
     5741 RD_ACTION(279):					/* /					*/
     5742 	call 					     LEX ( 2 );
     5743 	call 					     start_vseq ( CURSOR_UP );
     5744 	NRED = 294;
     5745 	go to RD_TEST_REDUCTION;			/* / vseq \                            		*/
     5746 
     5747 RD_ACTION(280):					/* /					*/
     5748 	call 					     LEX ( 2 );
     5749 	call 					     start_vseq ( CURSOR_RIGHT );
     5750 	NRED = 294;
     5751 	go to RD_TEST_REDUCTION;			/* / vseq \                            		*/
     5752 
     5753 RD_ACTION(281):					/* /					*/
     5754 	call 					     LEX ( 2 );
     5755 	call 					     start_vseq ( CURSOR_DOWN );
     5756 	NRED = 294;
     5757 	go to RD_TEST_REDUCTION;			/* / vseq \                            		*/
     5758 
     5759 RD_ACTION(282):					/* /					*/
     5760 	call 					     LEX ( 2 );
     5761 	call 					     start_vseq ( CURSOR_LEFT );
     5762 	NRED = 294;
     5763 	go to RD_TEST_REDUCTION;			/* / vseq \                            		*/
     5764 
     5765 RD_ACTION(283):					/* /					*/
     5766 	call 					     LEX ( 2 );
     5767 	call 					     start_vseq ( INSERT_CHARS );
     5768 	NRED = 294;
     5769 	go to RD_TEST_REDUCTION;			/* / vseq \                            		*/
     5770 
     5771 RD_ACTION(284):					/* /					*/
     5772 	call 					     LEX ( 2 );
     5773 	call 					     start_vseq ( END_INSERT_CHARS );
     5774 	NRED = 294;
     5775 	go to RD_TEST_REDUCTION;			/* / vseq \                            		*/
     5776 
     5777 RD_ACTION(285):					/* /					*/
     5778 	call 					     LEX ( 2 );
     5779 	call 					     start_vseq ( DELETE_CHARS );
     5780 	NRED = 294;
     5781 	go to RD_TEST_REDUCTION;			/* / vseq \                            		*/
     5782 
     5783 RD_ACTION(286):					/* /					*/
     5784 	call 					     LEX ( 2 );
     5785 	call 					     start_vseq ( INSERT_LINES );
     5786 	NRED = 294;
     5787 	go to RD_TEST_REDUCTION;			/* / vseq \                            		*/
     5788 
     5789 RD_ACTION(287):					/* /					*/
     5790 	call 					     LEX ( 2 );
     5791 	call 					     start_vseq ( DELETE_LINES );
     5792 	NRED = 294;
     5793 	go to RD_TEST_REDUCTION;			/* / vseq \                            		*/
     5794 
     5795 RD_ACTION(288):					/* /					*/
     5796 	call 					     LEX ( 2 );
     5797 	call 					     start_vseq ( ABS_POS );
     5798 	NRED = 294;
     5799 	go to RD_TEST_REDUCTION;			/* / vseq \                            		*/
     5800 
     5801 RD_ACTION(289):					/* /					*/
     5802 	call 					     LEX ( 2 );
     5803 						     tty_video_table.screen_height = token.Nvalue;
     5804 	call 					     LEX ( 2 );
     5805 	NRED = 275;
     5806 	go to RD_TEST_REDUCTION;			/* / video_loop \                      		*/
     5807 
     5808 RD_ACTION(290):					/* /					*/
     5809 	call 					     LEX ( 2 );
     5810 						     tty_video_table.screen_line_length = token.Nvalue;
     5811 	call 					     LEX ( 2 );
     5812 	NRED = 275;
     5813 	go to RD_TEST_REDUCTION;			/* / video_loop \                      		*/
     5814 
     5815 RD_ACTION(291):					/* /					*/
     5816 	call 					     LEX ( 2 );
     5817 						     tty_video_table.scroll_count = token.Nvalue;
     5818 	call 					     LEX ( 2 );
     5819 	NRED = 275;
     5820 	go to RD_TEST_REDUCTION;			/* / video_loop \                      		*/
     5821 
     5822 RD_ACTION(292):					/* /					*/
     5823 	call					     finish_video_table();
     5824 	go to RD_STACK_POP;				/* / STACK_POP	\			*/
     5825 
     5826 RD_ACTION(293):					/* /					*/
     5827 	call 					     ERROR ( 7 );
     5828 	return;					/* / RETURN	\			*/
     5829 
     5830 RD_ACTION(294):					/* /					*/
     5831 	call					     insert_quoted_string();
     5832 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5833 	NRED = 294;
     5834 	go to RD_TEST_REDUCTION;			/* / vseq_loop \                       		*/
     5835 
     5836 RD_ACTION(295):					/* /					*/
     5837 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5838 	call					     end_vseq();
     5839 	NRED = 275;
     5840 	go to RD_TEST_REDUCTION;			/* / video_loop \                      		*/
     5841 
     5842 RD_ACTION(296):					/* /					*/
     5843 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5844 	NRED = 303;
     5845 	go to RD_TEST_REDUCTION;			/* / vseq_numeric_expr \               		*/
     5846 
     5847 RD_ACTION(297):					/* /					*/
     5848 	call 					     insert_single_char ( ( token.Nvalue ) );
     5849 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5850 	NRED = 294;
     5851 	go to RD_TEST_REDUCTION;			/* / vseq_loop \                       		*/
     5852 
     5853 RD_ACTION(298):					/* /					*/
     5854 	call 					     LEX ( 2 );
     5855 	call 					     video_encode_pad ( 1000 * token.Nvalue );
     5856 	call 					     LEX ( 2 );
     5857 	NRED = 294;
     5858 	go to RD_TEST_REDUCTION;			/* / vseq_loop \                       		*/
     5859 
     5860 RD_ACTION(299):					/* /					*/
     5861 	call 					     LEX ( 2 );
     5862 	call 					     video_encode_pad ( ( token.Nvalue ) );
     5863 	call 					     LEX ( 2 );
     5864 	NRED = 294;
     5865 	go to RD_TEST_REDUCTION;			/* / vseq_loop \                       		*/
     5866 
     5867 RD_ACTION(300):					/* /					*/
     5868 	call 					     LEX ( 2 );
     5869 						     tty_video_seq.flags.cpad_present , tty_video_seq.flags.cpad_in_chars = "1"b;
     5870 						     tty_video_seq.cpad = token.Nvalue;
     5871 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5872 	NRED = 294;
     5873 	go to RD_TEST_REDUCTION;			/* / vseq_loop \                       		*/
     5874 
     5875 RD_ACTION(301):					/* /					*/
     5876 	call 					     ERROR ( 48 );
     5877 	call					     NEXT_STMT();
     5878 	NRED = 275;
     5879 	go to RD_TEST_REDUCTION;			/* / video_loop \                      		*/
     5880 
     5881 RD_ACTION(302):					/* /					*/
     5882 	call 					     ERROR ( 7 );
     5883 	return;					/* / RETURN	\			*/
     5884 
     5885 RD_ACTION(303):					/* /					*/
     5886 						     unspec ( temp_numeric_encoding ) = "0"b;
     5887 						     temp_numeric_encoding.must_be_on = "1"b;
     5888 	go to RD_NEXT_REDUCTION;			/* /	\				*/
     5889 
     5890 RD_ACTION(304):					/* /					*/
     5891 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5892 	NRED = 309;
     5893 	go to RD_TEST_REDUCTION;			/* / vseq_numencode_1 \                		*/
     5894 
     5895 RD_ACTION(305):					/* /					*/
     5896 						     temp_numeric_encoding.flags.express_in_decimal = "1"b;
     5897 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5898 						     temp_numeric_encoding.num_digits = token.Nvalue;
     5899 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5900 	NRED = 309;
     5901 	go to RD_TEST_REDUCTION;			/* / vseq_numencode_1 \                		*/
     5902 
     5903 RD_ACTION(306):					/* /					*/
     5904 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5905 						     temp_numeric_encoding.num_digits = 0;
     5906 						     temp_numeric_encoding.express_in_decimal = "1"b;
     5907 	NRED = 309;
     5908 	go to RD_TEST_REDUCTION;			/* / vseq_numencode_1 \                		*/
     5909 
     5910 RD_ACTION(307):					/* /					*/
     5911 						     temp_numeric_encoding.flags.express_in_octal = "1"b;
     5912 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5913 						     temp_numeric_encoding.num_digits = token.Nvalue;
     5914 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5915 	NRED = 309;
     5916 	go to RD_TEST_REDUCTION;			/* / vseq_numencode_1 \                		*/
     5917 
     5918 RD_ACTION(308):					/* /					*/
     5919 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5920 						     temp_numeric_encoding.num_digits = 0;
     5921 						     temp_numeric_encoding.express_in_octal = "1"b;
     5922 	NRED = 309;
     5923 	go to RD_TEST_REDUCTION;			/* / vseq_numencode_1 \                		*/
     5924 
     5925 RD_ACTION(309):					/* /					*/
     5926 						     temp_numeric_encoding.l_c_or_n = 0;
     5927 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5928 	NRED = 317;
     5929 	go to RD_TEST_REDUCTION;			/* / vseq_numencode_2 \                		*/
     5930 
     5931 RD_ACTION(310):					/* /					*/
     5932 						     temp_numeric_encoding.l_c_or_n = 0;
     5933 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5934 	NRED = 317;
     5935 	go to RD_TEST_REDUCTION;			/* / vseq_numencode_2 \                		*/
     5936 
     5937 RD_ACTION(311):					/* /					*/
     5938 						     temp_numeric_encoding.l_c_or_n = 1;
     5939 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5940 	NRED = 317;
     5941 	go to RD_TEST_REDUCTION;			/* / vseq_numencode_2 \                		*/
     5942 
     5943 RD_ACTION(312):					/* /					*/
     5944 						     temp_numeric_encoding.l_c_or_n = 1;
     5945 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5946 	NRED = 317;
     5947 	go to RD_TEST_REDUCTION;			/* / vseq_numencode_2 \                		*/
     5948 
     5949 RD_ACTION(313):					/* /					*/
     5950 						     temp_numeric_encoding.l_c_or_n = 2;
     5951 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5952 	NRED = 317;
     5953 	go to RD_TEST_REDUCTION;			/* / vseq_numencode_2 \                		*/
     5954 
     5955 RD_ACTION(314):					/* /					*/
     5956 						     temp_numeric_encoding.l_c_or_n = 2;
     5957 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5958 	NRED = 317;
     5959 	go to RD_TEST_REDUCTION;			/* / vseq_numencode_2 \                		*/
     5960 
     5961 RD_ACTION(315):					/* /					*/
     5962 	call 					     ERROR ( 46 );
     5963 	call					     NEXT_STMT();
     5964 	STACK_DEPTH = max(STACK_DEPTH-1,0);		/*   POP					*/
     5965 	NRED = 275;
     5966 	go to RD_TEST_REDUCTION;			/* / video_loop \                      		*/
     5967 
     5968 RD_ACTION(316):					/* /					*/
     5969 	call 					     ERROR ( 7 );
     5970 	return;					/* / RETURN	\			*/
     5971 
     5972 RD_ACTION(317):					/* /					*/
     5973 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5974 						     temp_numeric_encoding.offset = token.Nvalue;
     5975 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5976 	NRED = 319;
     5977 	go to RD_TEST_REDUCTION;			/* / vseq_numencode_3 \                		*/
     5978 
     5979 RD_ACTION(318):					/* /					*/
     5980 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5981 						     temp_numeric_encoding.offset = -token.Nvalue;
     5982 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5983 	NRED = 319;
     5984 	go to RD_TEST_REDUCTION;			/* / vseq_numencode_3 \                		*/
     5985 
     5986 RD_ACTION(319):					/* /					*/
     5987 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     5988 						     if temp_numeric_encoding.offset = 0 then temp_numeric_encoding.offset_is_0 = "1"b;
     5989 	go to RD_NEXT_REDUCTION;			/* /	\				*/
     5990 
     5991 RD_ACTION(320):					/* /					*/
     5992 	call 					     insert_single_char ( bin ( substr ( unspec ( temp_numeric_encoding ), 1, 9 ) ) );
     5993 						     if ^ temp_numeric_encoding.offset_is_0 then call insert_single_char ( bin ( substr ( unspec ( temp_numeric_encoding ), 10, 9 ) ) );
     5994 						     if temp_numeric_encoding.l_c_or_n = 2 then tty_video_seq.flags.able_to_repeat = "1"b;
     5995 						     tty_video_seq.flags.interpret = "1"b;
     5996 	NRED = 294;
     5997 	go to RD_TEST_REDUCTION;			/* / vseq_loop \                       		*/
     5998 
     5999 RD_ACTION(321):					/* /					*/
     6000 	call 					     ERROR ( 46 );
     6001 	call					     NEXT_STMT();
     6002 	STACK_DEPTH = max(STACK_DEPTH-1,0);		/*   POP					*/
     6003 	NRED = 275;
     6004 	go to RD_TEST_REDUCTION;			/* / video_loop \                      		*/
     6005 
     6006 RD_ACTION(322):					/* /					*/
     6007 	call 					     ERROR ( 7 );
     6008 	return;					/* / RETURN	\			*/
     6009 
     6010 RD_ACTION(323):					/* /					*/
     6011 	call 					     LEX ( 3 );
     6012 	NRED = 323;
     6013 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6014 
     6015 RD_ACTION(324):					/* /					*/
     6016 	call 					     LEX ( 2 );
     6017 	NRED = 362;
     6018 	go to RD_TEST_REDUCTION;			/* / dpp \                             		*/
     6019 
     6020 RD_ACTION(325):					/* /					*/
     6021 	call 					     LEX ( 3 );
     6022 	NRED = 323;
     6023 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6024 
     6025 RD_ACTION(326):					/* /					*/
     6026 	call 					     LEX ( 2 );
     6027 	NRED = 366;
     6028 	go to RD_TEST_REDUCTION;			/* / sdp_class \                       		*/
     6029 
     6030 RD_ACTION(327):					/* /					*/
     6031 	call 					     LEX ( 3 );
     6032 	NRED = 323;
     6033 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6034 
     6035 RD_ACTION(328):					/* /					*/
     6036 	call 					     LEX ( 2 );
     6037 	NRED = 370;
     6038 	go to RD_TEST_REDUCTION;			/* / real_class \                      		*/
     6039 
     6040 RD_ACTION(329):					/* /					*/
     6041 	call 					     LEX ( 3 );
     6042 	NRED = 323;
     6043 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6044 
     6045 RD_ACTION(330):					/* /					*/
     6046 	call 					     LEX ( 2 );
     6047 						     dsatm_device.dev_id = token.Nvalue;
     6048 	call 					     LEX ( 2 );
     6049 	NRED = 323;
     6050 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6051 
     6052 RD_ACTION(331):					/* /					*/
     6053 	call 					     LEX ( 3 );
     6054 	NRED = 323;
     6055 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6056 
     6057 RD_ACTION(332):					/* /					*/
     6058 	call 					     LEX ( 2 );
     6059 						     dsatm_device.dev_type = name_idx;
     6060 	call 					     LEX ( 2 );
     6061 	NRED = 323;
     6062 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6063 
     6064 RD_ACTION(333):					/* /					*/
     6065 	call 					     LEX ( 3 );
     6066 	NRED = 323;
     6067 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6068 
     6069 RD_ACTION(334):					/* /					*/
     6070 	call 					     LEX ( 2 );
     6071 						     dsatm_device.shareability = name_idx;
     6072 	call 					     LEX ( 2 );
     6073 	NRED = 323;
     6074 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6075 
     6076 RD_ACTION(335):					/* /					*/
     6077 	call 					     LEX ( 3 );
     6078 	NRED = 323;
     6079 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6080 
     6081 RD_ACTION(336):					/* /					*/
     6082 	call 					     LEX ( 2 );
     6083 	call					     set_alloc_unit();
     6084 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     6085 	NRED = 374;
     6086 	go to RD_TEST_REDUCTION;			/* / alloc_unit \                      		*/
     6087 
     6088 RD_ACTION(337):					/* /					*/
     6089 	call 					     LEX ( 3 );
     6090 	NRED = 323;
     6091 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6092 
     6093 RD_ACTION(338):					/* /					*/
     6094 	call 					     LEX ( 2 );
     6095 						     dsatm_device.line_overflow = name_idx;
     6096 	call 					     LEX ( 2 );
     6097 	NRED = 323;
     6098 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6099 
     6100 RD_ACTION(339):					/* /					*/
     6101 	call 					     LEX ( 3 );
     6102 	NRED = 323;
     6103 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6104 
     6105 RD_ACTION(340):					/* /					*/
     6106 	call 					     LEX ( 2 );
     6107 						     dsatm_device.page_overflow = name_idx;
     6108 	call 					     LEX ( 2 );
     6109 	NRED = 323;
     6110 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6111 
     6112 RD_ACTION(341):					/* /					*/
     6113 	call 					     LEX ( 3 );
     6114 	NRED = 323;
     6115 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6116 
     6117 RD_ACTION(342):					/* /					*/
     6118 	call 					     LEX ( 2 );
     6119 	NRED = 378;
     6120 	go to RD_TEST_REDUCTION;			/* / char_encoding \                   		*/
     6121 
     6122 RD_ACTION(343):					/* /					*/
     6123 	call 					     LEX ( 3 );
     6124 	NRED = 323;
     6125 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6126 
     6127 RD_ACTION(344):					/* /					*/
     6128 	call 					     LEX ( 2 );
     6129 	NRED = 382;
     6130 	go to RD_TEST_REDUCTION;			/* / char_set \                        		*/
     6131 
     6132 RD_ACTION(345):					/* /					*/
     6133 	call 					     LEX ( 3 );
     6134 	NRED = 323;
     6135 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6136 
     6137 RD_ACTION(346):					/* /					*/
     6138 	call 					     LEX ( 2 );
     6139 	NRED = 386;
     6140 	go to RD_TEST_REDUCTION;			/* / char_subset \                     		*/
     6141 
     6142 RD_ACTION(347):					/* /					*/
     6143 	call 					     LEX ( 3 );
     6144 	NRED = 323;
     6145 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6146 
     6147 RD_ACTION(348):					/* /					*/
     6148 	call 					     LEX ( 2 );
     6149 	NRED = 394;
     6150 	go to RD_TEST_REDUCTION;			/* / nat_lang \                        		*/
     6151 
     6152 RD_ACTION(349):					/* /					*/
     6153 	call 					     LEX ( 3 );
     6154 	NRED = 323;
     6155 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6156 
     6157 RD_ACTION(350):					/* /					*/
     6158 	call 					     LEX ( 2 );
     6159 	NRED = 398;
     6160 	go to RD_TEST_REDUCTION;			/* / compression \                     		*/
     6161 
     6162 RD_ACTION(351):					/* /					*/
     6163 	call 					     LEX ( 3 );
     6164 	NRED = 323;
     6165 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6166 
     6167 RD_ACTION(352):					/* /					*/
     6168 	call 					     LEX ( 2 );
     6169 	NRED = 390;
     6170 	go to RD_TEST_REDUCTION;			/* / char_font \                       		*/
     6171 
     6172 RD_ACTION(353):					/* /					*/
     6173 	call 					     LEX ( 3 );
     6174 	NRED = 323;
     6175 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6176 
     6177 RD_ACTION(354):					/* /					*/
     6178 	call 					     LEX ( 2 );
     6179 						     dsatm_device.max_rec_size = token.Nvalue;
     6180 	call 					     LEX ( 2 );
     6181 	NRED = 323;
     6182 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6183 
     6184 RD_ACTION(355):					/* /					*/
     6185 	call 					     LEX ( 3 );
     6186 	NRED = 323;
     6187 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6188 
     6189 RD_ACTION(356):					/* /					*/
     6190 	call 					     LEX ( 4 );
     6191 	NRED = 323;
     6192 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6193 
     6194 RD_ACTION(357):					/* /					*/
     6195 	call 					     LEX ( 3 );
     6196 	NRED = 323;
     6197 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6198 
     6199 RD_ACTION(358):					/* /					*/
     6200 	call 					     LEX ( 4 );
     6201 	NRED = 323;
     6202 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6203 
     6204 RD_ACTION(359):					/* /					*/
     6205 	call 					     LEX ( 2 );
     6206 						     bitp = addr ( dsatm_device.stc_available );
     6207 	call PUSH(323);				/*   PUSH(dsatmdev_loop)                          */
     6208 	NRED = 133;
     6209 	go to RD_TEST_REDUCTION;			/* / yes_no \                          		*/
     6210 
     6211 RD_ACTION(360):					/* /					*/
     6212 	call					     finish_dsatm_device();
     6213 	go to RD_STACK_POP;				/* / STACK_POP	\			*/
     6214 
     6215 RD_ACTION(361):					/* /					*/
     6216 	call 					     ERROR ( 7 );
     6217 	return;					/* / RETURN	\			*/
     6218 
     6219 RD_ACTION(362):					/* /					*/
     6220 						     dsatm_device.dpp_nb = dppx;
     6221 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     6222 	NRED = 323;
     6223 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6224 
     6225 RD_ACTION(363):					/* /					*/
     6226 	call					     set_dpp();
     6227 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     6228 	NRED = 362;
     6229 	go to RD_TEST_REDUCTION;			/* / dpp \                             		*/
     6230 
     6231 RD_ACTION(364):					/* /					*/
     6232 	call 					     ERROR ( 55 );
     6233 	call					     NEXT_STMT();
     6234 	NRED = 323;
     6235 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6236 
     6237 RD_ACTION(365):					/* /					*/
     6238 	call 					     ERROR ( 7 );
     6239 	return;					/* / RETURN	\			*/
     6240 
     6241 RD_ACTION(366):					/* /					*/
     6242 						     dsatm_device.sc_nb = scx;
     6243 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     6244 	NRED = 323;
     6245 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6246 
     6247 RD_ACTION(367):					/* /					*/
     6248 	call					     set_sdp_class();
     6249 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     6250 	NRED = 366;
     6251 	go to RD_TEST_REDUCTION;			/* / sdp_class \                       		*/
     6252 
     6253 RD_ACTION(368):					/* /					*/
     6254 	call 					     ERROR ( 55 );
     6255 	call					     NEXT_STMT();
     6256 	NRED = 323;
     6257 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6258 
     6259 RD_ACTION(369):					/* /					*/
     6260 	call 					     ERROR ( 7 );
     6261 	return;					/* / RETURN	\			*/
     6262 
     6263 RD_ACTION(370):					/* /					*/
     6264 						     dsatm_device.rc_nb = rcx;
     6265 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     6266 	NRED = 323;
     6267 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6268 
     6269 RD_ACTION(371):					/* /					*/
     6270 	call					     set_real_class();
     6271 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     6272 	NRED = 370;
     6273 	go to RD_TEST_REDUCTION;			/* / real_class \                      		*/
     6274 
     6275 RD_ACTION(372):					/* /					*/
     6276 	call 					     ERROR ( 55 );
     6277 	call					     NEXT_STMT();
     6278 	NRED = 323;
     6279 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6280 
     6281 RD_ACTION(373):					/* /					*/
     6282 	call 					     ERROR ( 7 );
     6283 	return;					/* / RETURN	\			*/
     6284 
     6285 RD_ACTION(374):					/* /					*/
     6286 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     6287 	NRED = 323;
     6288 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6289 
     6290 RD_ACTION(375):					/* /					*/
     6291 	call					     set_alloc_unit();
     6292 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     6293 	NRED = 374;
     6294 	go to RD_TEST_REDUCTION;			/* / alloc_unit \                      		*/
     6295 
     6296 RD_ACTION(376):					/* /					*/
     6297 	call 					     ERROR ( 55 );
     6298 	call					     NEXT_STMT();
     6299 	NRED = 323;
     6300 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6301 
     6302 RD_ACTION(377):					/* /					*/
     6303 	call 					     ERROR ( 7 );
     6304 	return;					/* / RETURN	\			*/
     6305 
     6306 RD_ACTION(378):					/* /					*/
     6307 						     dsatm_device.ce_nb = cex;
     6308 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     6309 	NRED = 323;
     6310 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6311 
     6312 RD_ACTION(379):					/* /					*/
     6313 	call					     set_char_encoding();
     6314 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     6315 	NRED = 378;
     6316 	go to RD_TEST_REDUCTION;			/* / char_encoding \                   		*/
     6317 
     6318 RD_ACTION(380):					/* /					*/
     6319 	call 					     ERROR ( 55 );
     6320 	call					     NEXT_STMT();
     6321 	NRED = 323;
     6322 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6323 
     6324 RD_ACTION(381):					/* /					*/
     6325 	call 					     ERROR ( 7 );
     6326 	return;					/* / RETURN	\			*/
     6327 
     6328 RD_ACTION(382):					/* /					*/
     6329 						     dsatm_device.cs_nb = csx;
     6330 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     6331 	NRED = 323;
     6332 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6333 
     6334 RD_ACTION(383):					/* /					*/
     6335 	call					     set_char_set();
     6336 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     6337 	NRED = 382;
     6338 	go to RD_TEST_REDUCTION;			/* / char_set \                        		*/
     6339 
     6340 RD_ACTION(384):					/* /					*/
     6341 	call 					     ERROR ( 55 );
     6342 	call					     NEXT_STMT();
     6343 	NRED = 323;
     6344 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6345 
     6346 RD_ACTION(385):					/* /					*/
     6347 	call 					     ERROR ( 7 );
     6348 	return;					/* / RETURN	\			*/
     6349 
     6350 RD_ACTION(386):					/* /					*/
     6351 						     dsatm_device.css_nb = cssx;
     6352 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     6353 	NRED = 323;
     6354 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6355 
     6356 RD_ACTION(387):					/* /					*/
     6357 	call					     set_char_subset();
     6358 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     6359 	NRED = 386;
     6360 	go to RD_TEST_REDUCTION;			/* / char_subset \                     		*/
     6361 
     6362 RD_ACTION(388):					/* /					*/
     6363 	call 					     ERROR ( 55 );
     6364 	call					     NEXT_STMT();
     6365 	NRED = 323;
     6366 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6367 
     6368 RD_ACTION(389):					/* /					*/
     6369 	call 					     ERROR ( 7 );
     6370 	return;					/* / RETURN	\			*/
     6371 
     6372 RD_ACTION(390):					/* /					*/
     6373 						     dsatm_device.cf_nb = cfx;
     6374 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     6375 	NRED = 323;
     6376 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6377 
     6378 RD_ACTION(391):					/* /					*/
     6379 	call					     set_char_font();
     6380 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     6381 	NRED = 390;
     6382 	go to RD_TEST_REDUCTION;			/* / char_font \                       		*/
     6383 
     6384 RD_ACTION(392):					/* /					*/
     6385 	call 					     ERROR ( 55 );
     6386 	call					     NEXT_STMT();
     6387 	NRED = 323;
     6388 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6389 
     6390 RD_ACTION(393):					/* /					*/
     6391 	call 					     ERROR ( 7 );
     6392 	return;					/* / RETURN	\			*/
     6393 
     6394 RD_ACTION(394):					/* /					*/
     6395 						     dsatm_device.nl_nb = nlx;
     6396 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     6397 	NRED = 323;
     6398 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6399 
     6400 RD_ACTION(395):					/* /					*/
     6401 	call					     set_nat_lang();
     6402 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     6403 	NRED = 394;
     6404 	go to RD_TEST_REDUCTION;			/* / nat_lang \                        		*/
     6405 
     6406 RD_ACTION(396):					/* /					*/
     6407 	call 					     ERROR ( 55 );
     6408 	call					     NEXT_STMT();
     6409 	NRED = 323;
     6410 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6411 
     6412 RD_ACTION(397):					/* /					*/
     6413 	call 					     ERROR ( 7 );
     6414 	return;					/* / RETURN	\			*/
     6415 
     6416 RD_ACTION(398):					/* /					*/
     6417 						     dsatm_device.ca_nb = cax;
     6418 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     6419 	NRED = 323;
     6420 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6421 
     6422 RD_ACTION(399):					/* /					*/
     6423 	call					     set_compression();
     6424 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     6425 	NRED = 398;
     6426 	go to RD_TEST_REDUCTION;			/* / compression \                     		*/
     6427 
     6428 RD_ACTION(400):					/* /					*/
     6429 	call 					     ERROR ( 55 );
     6430 	call					     NEXT_STMT();
     6431 	NRED = 323;
     6432 	go to RD_TEST_REDUCTION;			/* / dsatmdev_loop \                   		*/
     6433 
     6434 RD_ACTION(401):					/* /					*/
     6435 	call 					     ERROR ( 7 );
     6436 	return;					/* / RETURN	\			*/
     6437 
     6438 RD_ACTION(402):					/* /					*/
     6439 						     p = addr ( ttt.type_map );
     6440 						     pa_type = 1;
     6441 	call 					     LEX ( 2 );
     6442 	NRED = 406;
     6443 	go to RD_TEST_REDUCTION;			/* / preaccess_type \                  		*/
     6444 
     6445 RD_ACTION(403):					/* /					*/
     6446 						     p = addr ( ttt.type_map );
     6447 						     pa_type = 1;
     6448 	call 					     LEX ( 2 );
     6449 	NRED = 406;
     6450 	go to RD_TEST_REDUCTION;			/* / preaccess_type \                  		*/
     6451 
     6452 RD_ACTION(404):					/* /					*/
     6453 	call 					     ERROR ( 34 );
     6454 	call					     NEXT_STMT();
     6455 	NRED = 2;
     6456 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     6457 
     6458 RD_ACTION(405):					/* /					*/
     6459 	call 					     ERROR ( 7 );
     6460 	return;					/* / RETURN	\			*/
     6461 
     6462 RD_ACTION(406):					/* /					*/
     6463 	call 					     LEX ( 2 );
     6464 						     p -> based_fb = token.Nvalue;
     6465 	call 					     LEX ( 2 );
     6466 	NRED = 2;
     6467 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     6468 
     6469 RD_ACTION(407):					/* /					*/
     6470 	call 					     LEX ( 2 );
     6471 	call 					     ERROR ( 18 );
     6472 	call					     NEXT_STMT();
     6473 	NRED = 2;
     6474 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     6475 
     6476 RD_ACTION(408):					/* /					*/
     6477 	call 					     semant_error ( 35, pa_name ( pa_type ), "" );
     6478 	NRED = 2;
     6479 	go to RD_TEST_REDUCTION;			/* / mainloop \                        		*/
     6480 
     6481 RD_ACTION(409):					/* /					*/
     6482 	call 					     ERROR ( 7 );
     6483 	return;					/* / RETURN	\			*/
     6484 
     6485 RD_ACTION(410):					/* /					*/
     6486 						     mode_string = "";
     6487 	go to RD_NEXT_REDUCTION;			/* /	\				*/
     6488 
     6489 RD_ACTION(411):					/* /					*/
     6490 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     6491 	go to RD_STACK_POP;				/* / STACK_POP	\			*/
     6492 
     6493 RD_ACTION(412):					/* /					*/
     6494 						     mode_string = mode_string || token_value;
     6495 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     6496 	NRED = 415;
     6497 	go to RD_TEST_REDUCTION;			/* / delim \                           		*/
     6498 
     6499 RD_ACTION(413):					/* /					*/
     6500 	call 					     ERROR ( 2 );
     6501 						     mode_string = mode_string || token_value;
     6502 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     6503 	NRED = 415;
     6504 	go to RD_TEST_REDUCTION;			/* / delim \                           		*/
     6505 
     6506 RD_ACTION(414):					/* /					*/
     6507 	call 					     ERROR ( 7 );
     6508 	return;					/* / RETURN	\			*/
     6509 
     6510 RD_ACTION(415):					/* /					*/
     6511 						     mode_string = mode_string || ",";
     6512 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     6513 	NRED = 412;
     6514 	go to RD_TEST_REDUCTION;			/* / next_mode \                       		*/
     6515 
     6516 RD_ACTION(416):					/* /					*/
     6517 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     6518 	go to RD_STACK_POP;				/* / STACK_POP	\			*/
     6519 
     6520 RD_ACTION(417):					/* /					*/
     6521 	call 					     ERROR ( 40 );
     6522 	call					     NEXT_STMT();
     6523 	STACK_DEPTH = max(STACK_DEPTH-1,0);		/*   POP					*/
     6524 	go to RD_STACK_POP;				/* / STACK_POP	\			*/
     6525 
     6526 RD_ACTION(418):					/* /					*/
     6527 	NRED = 414;
     6528 	go to RD_TEST_REDUCTION;			/* / mode_err \                        		*/
     6529 
     6530 RD_ACTION(419):					/* /					*/
     6531 						     dft.modes = mode_string;
     6532 	go to RD_STACK_POP;				/* / STACK_POP	\			*/
     6533 
     6534 RD_ACTION(420):					/* /					*/
     6535 						     tte.modes = mode_string;
     6536 	go to RD_STACK_POP;				/* / STACK_POP	\			*/
     6537 
     6538 RD_ACTION(421):					/* /					*/
     6539 	call 					     ERROR ( 27 );
     6540 	return;					/* / RETURN	\			*/
     6541 
     6542 RD_ACTION(422):					/* /					*/
     6543 	return;					/* / RETURN	\			*/
     6544 
     6545 
     6546 	end SEMANTIC_ANALYSIS;
     6547 
     6548 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     6549 
     6550      dcl	SPDL			bit(1) aligned init ("0"b);
     6551 						/* off: This compiler parses a non-PUSH DOWN	*/
     6552 						/*      LANGUAGE.				*/
     6553 	/* START OF:	rdc_lex_.incl.pl1			  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
 21     2 
 21     3 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
 21     4 	/*									*/
 21     5 	/* N__a_m_e:  rdc_lex_.incl.pl1							*/
 21     6 	/*									*/
 21     7 	/*      This include segment is used by compilers generated by the reduction_compiler.	*/
 21     8 	/* It contains the LEX subroutine which is used to manipulate the pointer to the	*/
 21     9 	/* "current" token, Pthis_token.						*/
 21    10 	/*									*/
 21    11 	/* E__n_t_r_y:  LEX								*/
 21    12 	/*									*/
 21    13 	/*      This entry makes the |_nth|-next (or -preceding) token the "current" token, where	*/
 21    14 	/* _n is its positive (or negative) input argument.				*/
 21    15 	/*									*/
 21    16 	/* U__s_a_g_e									*/
 21    17 	/*									*/
 21    18 	/*      call LEX(n);							*/
 21    19 	/*									*/
 21    20 	/* 1) n   is the number of the token to be made the "current" token, relative to the	*/
 21    21 	/*        token identified by Pthis_token (the present "current" token).  If n is	*/
 21    22 	/*        positive, the nth token following the "current" token made "current".  If n	*/
 21    23 	/*        is negative, the nth token preceding the "current" token is made "current".	*/
 21    24 	/*									*/
 21    25 	/* S__t_a_t_u_s									*/
 21    26 	/*									*/
 21    27 	/* 0) Created by:  G. C. Dixon  in  February, 1975				*/
 21    28 	/*									*/
 21    29 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
 21    30 
 21    31 LEX:	procedure (n);
 21    32 
 21    33      dcl	n			fixed bin,
 21    34 	i			fixed bin;
 21    35 
 21    36 	Ptoken = Pthis_token;			/* do everything relative to "current" token.	*/
 21    37 	if Ptoken = null then return;			/* can't lex if token list exhausted.		*/
 21    38 	if n >= 0 then do;				/* new "current" token will follow present one.	*/
 21    39 	     do i = 1 to n while (token.Pnext ^= null);	/* find new "current" token, taking care not to	*/
 21    40 		Ptoken = token.Pnext;		/*   run off end of token list.		*/
 21    41 		end;
 21    42 	     if ^SPDL then if i <= n then Ptoken = null;	/* if not in 'PUSH DOWN LANGUAGE' mode, allow	*/
 21    43 						/*   running off end of token list.		*/
 21    44 	     end;
 21    45 	else					/* new "current" token precedes present one.	*/
 21    46 	     do i = -1 to n by -1 while (token.Plast ^= null);
 21    47 		Ptoken = token.Plast;
 21    48 		end;
 21    49 	Pthis_token = Ptoken;			/* simple wasn't it.			*/
 21    50 
 21    51 	end LEX;
 21    52 
 21    53 /* END OF:	rdc_lex_.incl.pl1			  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     6553 
     6554 
     6555 		/* START OF:	rdc_error_.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
 22     2 
 22     3      dcl	MERROR_SEVERITY		fixed bin init (0),	/* Severity of highest-severity error.		*/
 22     4 	SERROR_CONTROL		bit(2) init ("00"b),/* Global switches control error message format.	*/
 22     5 	SERROR_PRINTED (dimension (error_control_table,1))
 22     6 				bit(1) unaligned init ((dimension (error_control_table,1))(1)"0"b),
 22     7 						/* Array bit is on if corresponding error message	*/
 22     8 						/* in error_control_table has already been printed*/
 22     9 	MIN_PRINT_SEVERITY		fixed bin init (0), /* Mimimum severity message that will be printed	*/
 22    10 	PRINT_SEVERITY_CONTROL	bit(2) init ("11"b);/* Action if severity < MIN_PRINT_SEVERITY	*/
 22    11 
 22    12 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
 22    13 	/*									*/
 22    14 	/* N__a_m_e:  rdc_error_.incl.pl1							*/
 22    15 	/*									*/
 22    16 	/*      This include segment is used by compilers generated by the reduction_compiler.	*/
 22    17 	/* It defines a procedure which the compilers can use to print error messages.  	*/
 22    18 	/*									*/
 22    19 	/* E__n_t_r_y:  ERROR								*/
 22    20 	/*									*/
 22    21 	/*      Given an error number, this procedure prints a corresponding error message.	*/
 22    22 	/* The message is stored in a compiler-defined error_control_table, along with an integer	*/
 22    23 	/* which specifies the severity level of the error, and a switch which specifies whether	*/
 22    24 	/* the source statement in which the error occurred (if any) should be printed after the	*/
 22    25 	/* error message.  The printing of the error message may be supressed for all messages	*/
 22    26 	/* having a severity less than a specified (MIN_PRINT_SEVERITY) value.  The ERROR	*/
 22    27 	/*  procedure calls the lex_error_ subroutine to perform the formatting and printing of	*/
 22    28 	/*  the error message.							*/
 22    29 	/*									*/
 22    30 	/* U__s_a_g_e									*/
 22    31 	/*									*/
 22    32 	/*      call ERROR (error_number);						*/
 22    33 	/*									*/
 22    34 	/* 1) error_number	is the index of one of the structures in the error_control_table	*/
 22    35 	/*		which defines the error message to be printed.			*/
 22    36 	/*									*/
 22    37 	/* N__o_t_e_s									*/
 22    38 	/*									*/
 22    39 	/*      The format of the error_control_table is shown below.			*/
 22    40 	/*									*/
 22    41 	/*   dcl	1 error_control_table (2)	aligned internal static,			*/
 22    42 	/*	  2 severity		fixed bin(17) unaligned init (2,3),		*/
 22    43 	/*	  2 Soutput_stmt		bit(1) unaligned initial ("0"b,"1"b),		*/
 22    44 	/*	  2 message		char(252) varying initial (			*/
 22    45 	/*		"The reduction source segment does not contain any reductions.",	*/
 22    46 	/*		"Reduction label  '^a'  is invalid."),				*/
 22    47 	/*	  2 brief_message		char(100) varying initial (			*/
 22    48 	/*		"", "'^a'");						*/
 22    49 	/*									*/
 22    50 	/* error_control_table is an array of structures, with one array element per error.	*/
 22    51 	/* Each structure contains: a severity level for the error; a switch which specifies	*/
 22    52 	/* whether the source statement being processed should be output after the error message;	*/
 22    53 	/* the long form of the error message text;  and the brief form of the error message text.*/
 22    54 	/* The dimension of the error_control_table array of structures, and the lengths of	*/
 22    55 	/* message (long message) and brief_message (brief message), are compiler-defined.	*/
 22    56 	/* structures and the lengths of the message and brief_message are compiler-defined.	*/
 22    57 	/* The only requirement is that the messages be 256 characters or less in length.	*/
 22    58 	/* (Remember that the longest character string which can be used in an initial attribute	*/
 22    59 	/* is 254 characters in length.)						*/
 22    60 	/*									*/
 22    61 	/*      The severity number causes the error message to be preceded by a herald which	*/
 22    62 	/* includes one of the following prefixes:					*/
 22    63 	/*									*/
 22    64 	/*       _s_e_v  _p_r_e_f_i_x 		  _e_x_p_l_a_n_a_t_i_o_n				*/
 22    65 	/*	0 = COMMENT		- this is a comment.			*/
 22    66 	/*	1 = WARNING		- a possible error has been detected.  The	*/
 22    67 	/*				  compiler will still generate an object segment.	*/
 22    68 	/*	2 = ERROR			- a probable error has been detected.  The	*/
 22    69 	/*				  compiler will still generate an object segment.	*/
 22    70 	/*	3 = FATAL ERROR		- an error has been detected which is so severe 	*/
 22    71 	/*				  that no object segment will be generated.	*/
 22    72 	/*	4 = TRANSLATOR ERROR	- an error has been detected in the operation of	*/
 22    73 	/*				  the compiler or translator.  No object segment	*/
 22    74 	/*				  will be generated.			*/
 22    75 	/*									*/
 22    76 	/* Full error messages are of the form:						*/
 22    77 	/*									*/
 22    78 	/*	_p_r_e_f_i_x _e_r_r_o_r__n_u_m_b_e_r, SEVERITY _s_e_v_e_r_i_t_y IN STATEMENT _n OF LINE _m		*/
 22    79 	/*	_t_e_x_t__o_f__e_r_r_o_r__m_e_s_s_a_g_e						*/
 22    80 	/*	SOURCE:								*/
 22    81 	/*	_s_o_u_r_c_e__s_t_a_t_e_m_e_n_t							*/
 22    82 	/*									*/
 22    83 	/* If only one statement appears in line _m, then "STATEMENT _n OF" is omitted.		*/
 22    84 	/* If the source statement has been printed in a previous error message, it is omitted.	*/
 22    85 	/*									*/
 22    86 	/*      The reduction compiler declares a bit string, SERROR_CONTROL, which controls the	*/
 22    87 	/* text of an error message.  The compiler may set this bit string, as shown below.	*/
 22    88 	/*									*/
 22    89 	/*   SERROR_CONTROL		_m_e_a_n_i_n_g						*/
 22    90 	/*	"00"b		the first time a particular error occurs, the long message	*/
 22    91 	/*			is printed; the brief message is used in subsequent	*/
 22    92 	/*			occurrences of that error.				*/
 22    93 	/*        "10"b or "11"b	the long error message is always used.			*/
 22    94 	/*	"01"b		the brief error message is always used.			*/
 22    95 	/* The initial value of SERROR_CONTROL is "00"b.					*/
 22    96 	/*									*/
 22    97 	/*      The reduction_compiler creates a declaration for SERROR_PRINTED, an array	*/
 22    98 	/* of switches (one per error).  The switch corresponding to a particular error is	*/
 22    99 	/* turned on whenever the error message is printed.  This allows lex_error_ to detect	*/
 22   100 	/* subsequent occurrences of that same error.					*/
 22   101 	/*									*/
 22   102 	/*      The reduction_compiler creates MERROR_SEVERITY, a fixed bin(17) integer		*/
 22   103 	/* in which the severity of the highest-severity error encountered is maintained.	*/
 22   104 	/* The compiler may reference this integer.					*/
 22   105 	/*									*/
 22   106 	/*      The reduction_compiler creates MIN_PRINT_SEVERITY, a fixed bin (17) integer	*/
 22   107 	/* which controls the printing of error messages by the ERROR procedure.		*/
 22   108 	/* Errors having a severity less than MIN_PRINT_SEVERITY will not cause lex_error_ to be	*/
 22   109 	/* and no error will be printed.  The behaviour of the ERROR procedure for such errors	*/
 22   110 	/* is controlled by the value of PRINT_SEVERITY_CONTROL, described below.		*/
 22   111 	/* The compiler may set the value of MIN_PRINT_SEVERITY; its initial value is 0.	*/
 22   112 
 22   113 	/*									*/
 22   114 	/*      The reduction_compiler declares a bit string, PRINT_SEVERITY_CONTROL, which 	*/
 22   115 	/* controls the updating of MERROR_SEVERITY and SERROR_PRINTED when the severity of an	*/
 22   116 	/* error is less than MIN_PRINT_SEVERITY.  In such cases, the lex_error_ procedure is not	*/
 22   117 	/* invoked, and the ERROR procedure must update these values as though lex_error_ were	*/
 22   118 	/* called.  The compiler may set this bit string, as shown below.			*/
 22   119 	/*									*/
 22   120 	/* PRINT_SEVERITY_CONTROL	_m_e_a_n_i_n_g						*/
 22   121 	/*	"00"b		update neither SERROR_PRINTED nor MERROR_SEVERITY.	*/
 22   122 	/*	"01"b		update SERROR_PRINTED to reflect the error.		*/
 22   123 	/*	"10"b		update MERROR_SEVERITY to reflect the error severity.	*/
 22   124 	/*	"11"b		update SERROR_PRINTED and MERROR_SEVERITY appropriately.	*/
 22   125 	/*The initial value of PRINT_SEVERITY_CONTROL is "11"b.				*/
 22   126 	/*									*/
 22   127 	/*      The ERROR procedure is simple to use, but it does limit the flexibility of the	*/
 22   128 	/* error message.  A compiler action routine can output more flexible error messages	*/
 22   129 	/* by calling lex_error_ directly.  See lex_error_ documentation for more details.	*/
 22   130 	/*									*/
 22   131 	/* S__t_a_t_u_s									*/
 22   132 	/*									*/
 22   133 	/* 0) Created:  April, 1974 by G. C. Dixon					*/
 22   134 	/* 1) Modified: April, 1982 by E. N. Kittlitz.  Added MIN_PRINT_SEVERITY, 		*/
 22   135 	/*		PRINT_SEVERITY_CONTROL.					*/
 22   136 	/*									*/
 22   137 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
 22   138 
 22   139 ERROR:	procedure (Nerror);
 22   140 
 22   141      dcl	Nerror			fixed bin;	/* Number of the error which was detected. (In)	*/
 22   142 
 22   143      dcl	Pstmt			ptr,
 22   144 	1 erring_token		aligned based (Perring_token) like token,
 22   145 	Perring_token		ptr,
 22   146 	erring_token_value		char(erring_token.Lvalue) based (erring_token.Pvalue);
 22   147 
 22   148      dcl 	(max, null)		builtin;
 22   149 
 22   150      dcl	lex_error_		entry options (variable);
 22   151 
 22   152 
 22   153 	if error_control_table.severity(Nerror) < MIN_PRINT_SEVERITY then do; /* don't print		*/
 22   154 	     if PRINT_SEVERITY_CONTROL & "1"b then	/* update MERROR_SEVERITY			*/
 22   155 		MERROR_SEVERITY = max (MERROR_SEVERITY, error_control_table.severity(Nerror));
 22   156 	     if PRINT_SEVERITY_CONTROL & "01"b then	/* update SERROR_PRINTED			*/
 22   157 		SERROR_PRINTED(Nerror) = "1"b;
 22   158 	     return;
 22   159 	end;
 22   160 	Perring_token = Pthis_token;			/* address the current erring_token.		*/
 22   161 	if error_control_table.Soutput_stmt(Nerror) then
 22   162 	     if Perring_token = null then
 22   163 		Pstmt = null;
 22   164 	     else
 22   165 		Pstmt = erring_token.Pstmt;		/* address the statement descriptor.		*/
 22   166 	else
 22   167 	     Pstmt = null;
 22   168 	if Perring_token = null then
 22   169 	     call lex_error_ (Nerror, SERROR_PRINTED(Nerror), (error_control_table.severity(Nerror)),
 22   170 		MERROR_SEVERITY, Pstmt, Perring_token, SERROR_CONTROL, (error_control_table.message(Nerror)),
 22   171 		(error_control_table.brief_message(Nerror)));
 22   172 	else
 22   173 	     call lex_error_ (Nerror, SERROR_PRINTED(Nerror), (error_control_table.severity(Nerror)),
 22   174 		MERROR_SEVERITY, Pstmt, Perring_token, SERROR_CONTROL, (error_control_table.message(Nerror)),
 22   175 		(error_control_table.brief_message(Nerror)), erring_token_value, erring_token_value, erring_token_value);
 22   176 
 22   177 	end ERROR;
 22   178 
 22   179 	/* END OF:	rdc_error_.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     6555 
     6556 
     6557 		/* START OF:	rdc_next_stmt_.incl.pl1	  *  *  *  *  *  *  */
 23     2 
 23     3 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
 23     4 	/*							*/
 23     5 	/* N__a_m_e:  rdc_next_stmt_.incl.pl1				*/
 23     6 	/*							*/
 23     7 	/*      This include segment is used by compilers generated by the	*/
 23     8 	/* reduction_compiler.  It includes a procedure which shifts the	*/
 23     9 	/* compilation process to the next source statement.		*/
 23    10 	/*							*/
 23    11 	/* S__t_a_t_u_s							*/
 23    12 	/*							*/
 23    13 	/* 0) Created:  April, 1974 by G. C. Dixon			*/
 23    14 	/*							*/
 23    15 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
 23    16 
 23    17 
 23    18 NEXT_STMT:	procedure;			/* invoked to begin parsing the next statement of	*/
 23    19 						/* the input tokens.			*/
 23    20 
 23    21      dcl	null			builtin,
 23    22 	Ssearching		bit(1) aligned;
 23    23 
 23    24 	Ptoken = Pthis_token;			/* make sure these pointers are the same.	*/
 23    25 	Pstmt = token.Pstmt;			/* address "current" statement's descriptor.	*/
 23    26 	Ssearching = "1"b;				/* start scanning forward for next statement.	*/
 23    27 	do while (Ssearching & token.Pnext ^= null);
 23    28 	     Ptoken = token.Pnext;
 23    29 	     if token.Pstmt = Pstmt then;
 23    30 	     else Ssearching = "0"b;
 23    31 	     end;
 23    32 	if token.Pstmt = Pstmt then			/* if there is no next statement, and		*/
 23    33 	     if SPDL then				/*   in PUSH DOWN LANGUAGE mode, can't run off	*/
 23    34 		Ptoken = Ptoken;			/*   end of input list.			*/
 23    35 	     else Ptoken, Pthis_token = null;		/*   otherwise, input list exhausted.		*/
 23    36 	else Pthis_token = Ptoken;			/* normally, next statement exists and Ptoken	*/
 23    37 						/*   points to its 1st _n_o_n-__d_e_l_e_t_e_d token.	*/
 23    38 
 23    39 	end NEXT_STMT;
 23    40 
 23    41 	/* END OF:	rdc_next_stmt_.incl.pl1	  *  *  *  *  *  *  */
     6557 
     6558 
     6559 	end cv_ttf;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    04/17/00  1923.2  cv_ttf.pl1                        >udd>sm>ds>w>ml>cv_ttf.pl1
1179         1    04/11/85  1552.6  access_mode_values.incl.pl1       >ldd>incl>access_mode_values.incl.pl1
1180         2    09/09/75  2107.3  author_dcl.incl.pl1               >ldd>incl>author_dcl.incl.pl1
2-10         3    04/21/82  1311.8  author.incl.pl1                   >ldd>incl>author.incl.pl1
1181         4    05/28/82  1434.9  baud_rates.incl.pl1               >ldd>incl>baud_rates.incl.pl1
1182         5    08/06/87  1012.7  dsatm_attn_fcn_info.incl.pl1      >ldd>incl>dsatm_attn_fcn_info.incl.pl1
1183         6    08/06/87  1013.4  dsatm_negotiate_info.incl.pl1     >ldd>incl>dsatm_negotiate_info.incl.pl1
1184         7    07/21/88  2136.0  dsatm_tty_modes.incl.pl1          >ldd>incl>dsatm_tty_modes.incl.pl1
1185         8    02/23/81  2246.3  function_key_data.incl.pl1        >ldd>incl>function_key_data.incl.pl1
1186         9    08/06/87  1013.4  line_types.incl.pl1               >ldd>incl>line_types.incl.pl1
1187        10    08/06/87  1013.5  term_type_protocols.incl.pl1      >ldd>incl>term_type_protocols.incl.pl1
1188        11    04/06/83  1339.4  terminate_file.incl.pl1           >ldd>incl>terminate_file.incl.pl1
1189        12    10/18/88  1310.6  ttt.incl.pl1                      >ldd>incl>ttt.incl.pl1
12-232      13    10/18/88  1310.6  tty_convert.incl.pl1              >ldd>incl>tty_convert.incl.pl1
1190        14    03/19/81  1306.8  tty_can_types.incl.pl1            >ldd>incl>tty_can_types.incl.pl1
1191        15    07/21/88  2136.0  tty_mode_names.incl.pl1           >ldd>incl>tty_mode_names.incl.pl1
1192        16    08/11/81  1206.2  tty_video_tables.incl.pl1         >ldd>incl>tty_video_tables.incl.pl1
3321        17    04/18/75  1342.4  rdc_start_.incl.pl1               >ldd>incl>rdc_start_.incl.pl1
17-25       18    04/18/75  1342.4  lex_descriptors_.incl.pl1         >ldd>incl>lex_descriptors_.incl.pl1
3896        19    03/17/86  1634.3  rdc_end_.incl.pl1                 >ldd>incl>rdc_end_.incl.pl1
3976        20    04/18/75  1342.4  rdc_stack_fcns_.incl.pl1          >ldd>incl>rdc_stack_fcns_.incl.pl1
6553        21    04/18/75  1342.4  rdc_lex_.incl.pl1                 >ldd>incl>rdc_lex_.incl.pl1
6555        22    08/15/83  1611.7  rdc_error_.incl.pl1               >ldd>incl>rdc_error_.incl.pl1
6557        23    04/18/75  1342.4  rdc_next_stmt_.incl.pl1           >ldd>incl>rdc_next_stmt_.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
ABS_POS                                constant        fixed bin(17,0)          initial dcl 16-54 set ref 5797*
ALL_CAPS                        011177 constant        char(26)                 initial packed unaligned dcl 960 ref 1493 1782 1969
                                                                                  2049 2116 2342 2363 2384 2405 2416 2427 2444 2455
                                                                                  2466 2487 2508 2529 2550 2571
ALL_LOWERCASE                   011170 constant        char(26)                 initial packed unaligned dcl 961 ref 1493 1782 1969
                                                                                  2049 2116 2342 2363 2384 2405 2416 2427 2444 2455
                                                                                  2466 2487 2508 2529 2550 2571
AU_NAME                         010322 constant        char(16)                 initial array packed unaligned dcl 6-447 ref 2428
                                                                                  2429
AU_VALUE                        010320 constant        bit(8)                   initial array packed unaligned dcl 6-451 ref 2438
BACKSPACE                       042420 constant        char(1)                  initial dcl 17-99 ref 19-113
BS                              042420 constant        char(1)                  initial packed unaligned dcl 962 ref 1880
CAN_TYPE_NAMES                  007674 constant        char(32)                 initial array dcl 14-8 ref 1817 1817 1818
CA_NAME                         010713 constant        char(16)                 initial array packed unaligned dcl 6-313 ref 2572
                                                                                  2573
CE_NAME                         011073 constant        char(12)                 initial array packed unaligned dcl 6-258 ref 2467
                                                                                  2468
CF_NAME                         010245 constant        char(9)                  initial array packed unaligned dcl 6-485 ref 2530
                                                                                  2531
CLEAR_SCREEN                           constant        fixed bin(17,0)          initial dcl 16-54 set ref 5719*
CLEAR_TO_EOL                           constant        fixed bin(17,0)          initial dcl 16-54 set ref 5737*
CLEAR_TO_EOS                           constant        fixed bin(17,0)          initial dcl 16-54 set ref 5725*
CODE                            006313 automatic       fixed bin(35,0)          dcl 17-33 set ref 19-106* 19-107
CONV_TYPE                       011311 constant        fixed bin(17,0)          initial dcl 12-221 set ref 3998* 4327* 4340* 4780*
                                                                                  4793*
CSS_NAME                        010753 constant        char(16)                 initial array packed unaligned dcl 6-295 ref 2509
                                                                                  2510
CS_NAME                         010777 constant        char(16)                 initial array packed unaligned dcl 6-279 ref 2488
                                                                                  2489
CURSOR_DOWN                            constant        fixed bin(17,0)          initial dcl 16-54 set ref 5755*
CURSOR_LEFT                            constant        fixed bin(17,0)          initial dcl 16-54 set ref 5761*
CURSOR_RIGHT                           constant        fixed bin(17,0)          initial dcl 16-54 set ref 5749*
CURSOR_UP                              constant        fixed bin(17,0)          initial dcl 16-54 set ref 5743*
CV_TRANS_VERSION                       constant        fixed bin(17,0)          initial dcl 13-127 ref 2194
DELAY_VERSION                          constant        fixed bin(17,0)          initial dcl 13-126 ref 2921
DELETE_CHARS                           constant        fixed bin(17,0)          initial dcl 16-54 set ref 5779*
DELETE_LINES                           constant        fixed bin(17,0)          initial dcl 16-54 set ref 5791*
DIRECTION                       006316 automatic       fixed bin(17,0)          initial dcl 3323 set ref 19-62 3323*
DPP_NAME                        010674 constant        char(12)                 initial array packed unaligned dcl 6-363 ref 2343
                                                                                  2344
DSATM_DEVICE_RP                        constant        fixed bin(17,0)          initial dcl 12-118 ref 2625 4414 4881
DSA_modestr                            defined         char(12)                 array packed unaligned dcl 7-56 ref 1814
DT_NAME                         010424 constant        char(20)                 initial array packed unaligned dcl 6-417 ref 2406
                                                                                  2407
END_INSERT_CHARS                       constant        fixed bin(17,0)          initial dcl 16-54 set ref 5773*
FKEY_TYPE                       011306 constant        fixed bin(17,0)          initial dcl 12-224 set ref 1404 1450 3086* 4392*
                                                                                  4845*
FORM                                   based           fixed bin(17,0)          level 2 packed packed unaligned dcl 17-48 ref 19-65
                                                                                  19-70 19-123
HOME                                   constant        fixed bin(17,0)          initial dcl 16-54 set ref 5731*
I                               006314 automatic       fixed bin(17,0)          dcl 17-33 in procedure "SEMANTIC_ANALYSIS" set ref
                                                                                  19-62* 19-63 19-79*
I                                      based           fixed bin(17,0)          level 2 in structure "TOKEN_REQD_STRING" packed
                                                                                  packed unaligned dcl 17-48 in procedure
                                                                                  "SEMANTIC_ANALYSIS" ref 19-126
IFIRST                                 based           fixed bin(17,0)          level 3 packed packed unaligned dcl 17-48 ref 19-62
                                                                                  19-73 19-79 19-79
ILAST                     0(18)        based           fixed bin(17,0)          level 3 packed packed unaligned dcl 17-48 ref 19-62
                                                                                  19-73 19-79
INSERT_CHARS                           constant        fixed bin(17,0)          initial dcl 16-54 set ref 5767*
INSERT_LINES                           constant        fixed bin(17,0)          initial dcl 16-54 set ref 5785*
KEY_CTRL_AND_SHIFT                     constant        fixed bin(17,0)          initial dcl 8-22 ref 2097
KEY_PLAIN                              constant        fixed bin(17,0)          initial dcl 8-22 ref 3143
L                         0(18)        based           fixed bin(17,0)          level 2 packed packed unaligned dcl 17-48 ref 19-127
LEGAL_CHARS                     011150 constant        char(63)                 initial packed unaligned dcl 963 ref 1727
LO_NAME                         010304 constant        char(12)                 initial array packed unaligned dcl 6-461 ref 2445
                                                                                  2446
LTOKEN_REQD_VALUE               006302 automatic       fixed bin(18,0)          dcl 17-33 set ref 19-127* 19-128
Lvalue                    4            based           fixed bin(18,0)          level 2 in structure "erring_token" dcl 22-143
                                                                                  in procedure "ERROR" ref 22-172 22-172 22-172
                                                                                  22-172 22-172 22-172
Lvalue                    4            based           fixed bin(18,0)          level 2 in structure "token" dcl 18-68 in procedure
                                                                                  "cv_ttf" ref 1727 1738 1738 1742 1744 1744 1749
                                                                                  1752 1752 1772 1772 1776 1778 1778 1782 1787 1787
                                                                                  1799 1800 1804 1818 1824 1824 1827 1837 1837 1839
                                                                                  1839 1850 1860 1860 1862 1862 1888 1888 1903 1903
                                                                                  1933 1944 1944 1969 1996 2009 2012 2012 2027 2027
                                                                                  2027 2030 2031 2038 2038 2038 2042 2042 2043 2044
                                                                                  2048 2049 2116 2145 2166 2166 2174 2179 2342 2363
                                                                                  2384 2405 2416 2427 2444 2455 2466 2487 2508 2529
                                                                                  2550 2571 2601 2601 2606 2606 2609 2611 2677 2679
                                                                                  2682 2702 2702 2769 2770 2844 2847 2847 2861 19-92
                                                                                  19-92 19-92 19-92 19-106 19-106 19-113 19-113
                                                                                  19-128 5190 5190 5455 5561 5643 5645 5645 5646
                                                                                  6493 6501
MERROR_SEVERITY                 005177 automatic       fixed bin(17,0)          initial dcl 22-3 set ref 1396 1615 1632 22-3* 1707*
                                                                                  1713* 1713 22-154* 22-154 22-168* 22-172*
MIN_PRINT_SEVERITY              005201 automatic       fixed bin(17,0)          initial dcl 22-3 set ref 1269* 22-3* 1707 22-153
MODE_NAME                       007574 constant        char(8)                  initial array packed unaligned dcl 15-24 ref 1808
                                                                                  1808 1808 1808 1809 1809
N                                      parameter       fixed bin(17,0)          dcl 20-38 set ref 20-36 20-60* 20-68
NL_NAME                         010737 constant        char(9)                  initial array packed unaligned dcl 6-305 ref 2551
                                                                                  2552
NRED                            006303 automatic       fixed bin(17,0)          dcl 17-33 set ref 19-52* 19-55* 19-55 19-58 3974
                                                                                  20-18* 20-26* 3987* 3993* 4000* 4006* 4013* 4019*
                                                                                  4026* 4032* 4039* 4045* 4051* 4057* 4062* 4069*
                                                                                  4075* 4081* 4087* 4093* 4099* 4106* 4113* 4120*
                                                                                  4127* 4134* 4143* 4150* 4157* 4164* 4171* 4178*
                                                                                  4185* 4193* 4200* 4212* 4219* 4231* 4238* 4250*
                                                                                  4257* 4269* 4276* 4288* 4295* 4302* 4309* 4316*
                                                                                  4322* 4329* 4335* 4342* 4348* 4355* 4361* 4368*
                                                                                  4374* 4381* 4387* 4394* 4400* 4409* 4415* 4424*
                                                                                  4431* 4436* 4442* 4448* 4457* 4464* 4470* 4477*
                                                                                  4484* 4491* 4498* 4504* 4510* 4516* 4522* 4528*
                                                                                  4534* 4540* 4546* 4552* 4559* 4566* 4573* 4580*
                                                                                  4587* 4596* 4603* 4610* 4617* 4624* 4631* 4638*
                                                                                  4646* 4653* 4665* 4672* 4684* 4691* 4703* 4710*
                                                                                  4722* 4729* 4741* 4748* 4755* 4762* 4769* 4775*
                                                                                  4782* 4788* 4795* 4801* 4808* 4814* 4821* 4827*
                                                                                  4834* 4840* 4847* 4853* 4860* 4867* 4875* 4882*
                                                                                  4890* 4897* 4902* 4947* 4952* 4965* 4972* 4983*
                                                                                  4988* 4995* 5000* 5011* 5018* 5029* 5034* 5052*
                                                                                  5062* 5068* 5075* 5081* 5101* 5107* 5112* 5118*
                                                                                  5131* 5137* 5151* 5168* 5173* 5181* 5187* 5193*
                                                                                  5204* 5211* 5218* 5225* 5232* 5239* 5246* 5253*
                                                                                  5260* 5267* 5274* 5281* 5288* 5294* 5299* 5315*
                                                                                  5321* 5331* 5336* 5344* 5357* 5363* 5369* 5378*
                                                                                  5385* 5391* 5401* 5404* 5410* 5416* 5419* 5426*
                                                                                  5432* 5438* 5444* 5450* 5459* 5464* 5474* 5480*
                                                                                  5486* 5492* 5498* 5504* 5514* 5520* 5526* 5536*
                                                                                  5542* 5548* 5558* 5564* 5569* 5575* 5582* 5588*
                                                                                  5598* 5604* 5613* 5622* 5630* 5636* 5648* 5655*
                                                                                  5662* 5668* 5677* 5683* 5686* 5692* 5699* 5706*
                                                                                  5709* 5720* 5726* 5732* 5738* 5744* 5750* 5756*
                                                                                  5762* 5768* 5774* 5780* 5786* 5792* 5798* 5805*
                                                                                  5812* 5819* 5833* 5839* 5844* 5850* 5857* 5864*
                                                                                  5872* 5878* 5892* 5900* 5907* 5915* 5922* 5928*
                                                                                  5934* 5940* 5946* 5952* 5958* 5965* 5976* 5983*
                                                                                  5996* 6003* 6012* 6017* 6022* 6027* 6032* 6037*
                                                                                  6042* 6049* 6054* 6061* 6066* 6073* 6078* 6085*
                                                                                  6090* 6097* 6102* 6109* 6114* 6119* 6124* 6129*
                                                                                  6134* 6139* 6144* 6149* 6154* 6159* 6164* 6169*
                                                                                  6174* 6181* 6186* 6191* 6196* 6201* 6208* 6222*
                                                                                  6228* 6234* 6244* 6250* 6256* 6266* 6272* 6278*
                                                                                  6287* 6293* 6299* 6309* 6315* 6321* 6331* 6337*
                                                                                  6343* 6353* 6359* 6365* 6375* 6381* 6387* 6397*
                                                                                  6403* 6409* 6419* 6425* 6431* 6442* 6449* 6455*
                                                                                  6466* 6473* 6478* 6496* 6503* 6513* 6526* 20-60*
NUL_CHAR                               constant        char(1)                  initial packed unaligned dcl 964 ref 1580 1580 1585
                                                                                  1585 1590 1590 1590 1590 1594 1594 1594 1594 5627
NUMBER                          006315 automatic       fixed bin(35,0)          dcl 17-33 set ref 19-106* 19-108
N_VIDEO_SEQUENCES                      constant        fixed bin(17,0)          initial dcl 16-64 ref 2221 2224
Nerror                                 parameter       fixed bin(17,0)          dcl 22-141 set ref 22-139 22-153 22-154 22-156
                                                                                  22-161 22-168* 22-168 22-168 22-168 22-168 22-172*
                                                                                  22-172 22-172 22-172 22-172
Nvalue                   10            based           fixed bin(35,0)          level 3 packed packed unaligned dcl 18-68 set ref
                                                                                  1880 1888* 1893 1903* 1907 1914 1944* 1949 1949
                                                                                  1953 1953 1957 1957 1974* 1998* 2012* 2065* 2078
                                                                                  2700 2708 2710 2713 2876 2881 2985 3019 19-101
                                                                                  19-108* 4245 4429 4698 4895 4943 4991 5065 5134
                                                                                  5178 5312 5313 5342 5383 5398 5455* 5456 5457 5457
                                                                                  5483 5511 5533 5555 5610 5619 5697 5803 5810 5817
                                                                                  5847 5855 5862 5870 5898 5913 5974 5981 6047 6179
                                                                                  6464
PO_NAME                         010265 constant        char(12)                 initial array packed unaligned dcl 6-473 ref 2456
                                                                                  2457
PRED                            006304 automatic       pointer                  dcl 17-33 set ref 19-58* 19-62 19-62 19-73 19-73
                                                                                  19-79 19-79 19-79
PRINT_SEVERITY_CONTROL          005202 automatic       bit(2)                   initial packed unaligned dcl 22-3 set ref 22-3*
                                                                                  22-154 22-156
PTOKEN_REQD                     006306 automatic       pointer                  dcl 17-33 set ref 19-63* 19-65 19-65 19-70 19-71
                                                                                  19-123 19-126 19-127 3899
PTOKEN_REQD_VALUE               006310 automatic       pointer                  dcl 17-33 set ref 19-126* 19-128
Perring_token                   006406 automatic       pointer                  dcl 22-143 set ref 22-160* 22-161 22-164 22-168
                                                                                  22-168* 22-172* 22-172 22-172 22-172 22-172 22-172
                                                                                  22-172 22-172 22-172 22-172
Plast                     2            based           pointer                  level 2 packed packed unaligned dcl 18-68 ref 21-45
                                                                                  21-47
Pnext                     1            based           pointer                  level 2 packed packed unaligned dcl 18-68 ref 19-79
                                                                                  3970 3986 4140 4455 4460 4593 4946 4958 4963 4982
                                                                                  4994 5005 5008 5028 5039 5061 5067 5071 5080 5086
                                                                                  5106 5110 5125 5136 5149 5154 5180 5186 5314 5343
                                                                                  5356 5362 5384 5400 5408 5413 5479 5485 5491 5497
                                                                                  5513 5519 5525 5535 5541 5547 5557 5563 5567 5574
                                                                                  5578 5597 5603 5607 5612 5616 5621 5647 5654 5661
                                                                                  5667 5675 5680 5832 5836 5842 5849 5871 5890 5897
                                                                                  5899 5903 5912 5914 5918 5927 5933 5939 5945 5951
                                                                                  5957 5972 5975 5979 5982 5986 6084 6221 6227 6243
                                                                                  6249 6265 6271 6285 6292 6308 6314 6330 6336 6352
                                                                                  6358 6374 6380 6396 6402 6418 6424 6489 6495 6502
                                                                                  6512 6516 21-39 21-40 23-27 23-28
Pstmt                     5            based           pointer                  level 2 in structure "erring_token" packed packed
                                                                                  unaligned dcl 22-143 in procedure "ERROR" ref
                                                                                  22-164
Pstmt                     5            based           pointer                  level 2 in structure "token" packed packed unaligned
                                                                                  dcl 18-68 in procedure "cv_ttf" ref 1702 23-25
                                                                                  23-29 23-32
Pstmt                           006404 automatic       pointer                  dcl 22-143 in procedure "ERROR" set ref 22-161*
                                                                                  22-164* 22-166* 22-168* 22-172*
Pstmt                           005172 automatic       pointer                  dcl 18-40 in procedure "cv_ttf" set ref 23-25* 23-29
                                                                                  23-32
Pthis_token                     005170 automatic       pointer                  dcl 17-23 set ref 1387* 1703 19-60 3973 3986 3986*
                                                                                  4140 4140* 4455 4455* 4460 4460* 4593 4593* 4946
                                                                                  4946* 4958 4958* 4963 4963* 4982 4982* 4994 4994*
                                                                                  5005 5005* 5008 5008* 5028 5028* 5039 5039* 5061
                                                                                  5061* 5067 5067* 5071 5071* 5080 5080* 5086 5086*
                                                                                  5106 5106* 5110 5110* 5125 5125* 5136 5136* 5149
                                                                                  5149* 5154 5154* 5180 5180* 5186 5186* 5314 5314*
                                                                                  5343 5343* 5356 5356* 5362 5362* 5384 5384* 5400
                                                                                  5400* 5408 5408* 5413 5413* 5479 5479* 5485 5485*
                                                                                  5491 5491* 5497 5497* 5513 5513* 5519 5519* 5525
                                                                                  5525* 5535 5535* 5541 5541* 5547 5547* 5557 5557*
                                                                                  5563 5563* 5567 5567* 5574 5574* 5578 5578* 5597
                                                                                  5597* 5603 5603* 5607 5607* 5612 5612* 5616 5616*
                                                                                  5621 5621* 5647 5647* 5654 5654* 5661 5661* 5667
                                                                                  5667* 5675 5675* 5680 5680* 5832 5832* 5836 5836*
                                                                                  5842 5842* 5849 5849* 5871 5871* 5890 5890* 5897
                                                                                  5897* 5899 5899* 5903 5903* 5912 5912* 5914 5914*
                                                                                  5918 5918* 5927 5927* 5933 5933* 5939 5939* 5945
                                                                                  5945* 5951 5951* 5957 5957* 5972 5972* 5975 5975*
                                                                                  5979 5979* 5982 5982* 5986 5986* 6084 6084* 6221
                                                                                  6221* 6227 6227* 6243 6243* 6249 6249* 6265 6265*
                                                                                  6271 6271* 6285 6285* 6292 6292* 6308 6308* 6314
                                                                                  6314* 6330 6330* 6336 6336* 6352 6352* 6358 6358*
                                                                                  6374 6374* 6380 6380* 6396 6396* 6402 6402* 6418
                                                                                  6418* 6424 6424* 6489 6489* 6495 6495* 6502 6502*
                                                                                  6512 6512* 6516 6516* 21-36 21-49* 22-160 23-24
                                                                                  23-35* 23-36*
Ptoken                          005174 automatic       pointer                  dcl 18-68 set ref 1702 1727 1727 1738 1738 1738 1742
                                                                                  1744 1744 1744 1749 1749 1752 1752 1752 1772 1772
                                                                                  1772 1776 1778 1778 1778 1782 1782 1787 1787 1787
                                                                                  1799 1799 1800 1800 1804 1804 1818 1818 1824 1824
                                                                                  1824 1824 1827 1837 1837 1839 1839 1850 1860 1860
                                                                                  1862 1862 1880 1888 1888 1888 1888 1893 1903 1903
                                                                                  1903 1903 1907 1914 1933 1933 1944 1944 1944 1944
                                                                                  1949 1949 1953 1953 1957 1957 1969 1969 1974 1996
                                                                                  1996 1998 2009 2012 2012 2012 2012 2027 2027 2027
                                                                                  2027 2027 2027 2030 2031 2031 2038 2038 2038 2038
                                                                                  2038 2038 2042 2042 2042 2043 2043 2044 2044 2048
                                                                                  2049 2049 2065 2078 2116 2116 2145 2145 2166 2166
                                                                                  2166 2174 2174 2179 2179 2342 2342 2363 2363 2384
                                                                                  2384 2405 2405 2416 2416 2427 2427 2444 2444 2455
                                                                                  2455 2466 2466 2487 2487 2508 2508 2529 2529 2550
                                                                                  2550 2571 2571 2601 2601 2601 2601 2606 2606 2606
                                                                                  2606 2609 2609 2611 2611 2677 2679 2682 2682 2700
                                                                                  2702 2702 2702 2708 2710 2713 2769 2770 2770 2844
                                                                                  2844 2847 2847 2847 2861 2861 2876 2881 2985 3019
                                                                                  19-60* 19-64 19-73 19-79 19-86 19-92 19-92 19-92
                                                                                  19-92 19-92 19-92 19-92 19-101 19-104 19-106
                                                                                  19-106 19-106 19-108 19-113 19-113 19-113 19-113
                                                                                  19-118 19-124 19-128 19-128 3970* 3970 3973* 3986*
                                                                                  4140* 4245 4429 4455* 4460* 4593* 4698 4895 4943
                                                                                  4946* 4958* 4963* 4982* 4991 4994* 5005* 5008*
                                                                                  5028* 5039* 5061* 5065 5067* 5071* 5080* 5086*
                                                                                  5106* 5110* 5125* 5134 5136* 5149* 5154* 5178
                                                                                  5180* 5186* 5190 5190 5190 5312 5313 5314* 5342
                                                                                  5343* 5356* 5362* 5383 5384* 5398 5400* 5408*
                                                                                  5413* 5455 5455 5455 5456 5457 5457 5479* 5483
                                                                                  5485* 5491* 5497* 5511 5513* 5519* 5525* 5533
                                                                                  5535* 5541* 5547* 5555 5557* 5561 5561 5563* 5567*
                                                                                  5574* 5578* 5597* 5603* 5607* 5610 5612* 5616*
                                                                                  5619 5621* 5643 5645 5645 5645 5646 5647* 5654*
                                                                                  5661* 5667* 5675* 5680* 5697 5803 5810 5817 5832*
                                                                                  5836* 5842* 5847 5849* 5855 5862 5870 5871* 5890*
                                                                                  5897* 5898 5899* 5903* 5912* 5913 5914* 5918*
                                                                                  5927* 5933* 5939* 5945* 5951* 5957* 5972* 5974
                                                                                  5975* 5979* 5981 5982* 5986* 6047 6084* 6179 6221*
                                                                                  6227* 6243* 6249* 6265* 6271* 6285* 6292* 6308*
                                                                                  6314* 6330* 6336* 6352* 6358* 6374* 6380* 6396*
                                                                                  6402* 6418* 6424* 6464 6489* 6493 6493 6495* 6501
                                                                                  6501 6502* 6512* 6516* 21-36* 21-37 21-39 21-40*
                                                                                  21-40 21-42* 21-45 21-47* 21-47 21-49 23-24* 23-25
                                                                                  23-27 23-28* 23-28 23-29 23-32 23-32* 23-32 23-35*
                                                                                  23-36
Pvalue                    3            based           pointer                  level 2 in structure "token" packed packed unaligned
                                                                                  dcl 18-68 in procedure "cv_ttf" ref 1727 1738 1744
                                                                                  1749 1752 1772 1778 1782 1787 1799 1800 1804 1818
                                                                                  1824 1824 1888 1903 1933 1944 1969 1996 2012 2027
                                                                                  2027 2031 2038 2038 2038 2042 2043 2044 2049 2116
                                                                                  2145 2166 2174 2179 2342 2363 2384 2405 2416 2427
                                                                                  2444 2455 2466 2487 2508 2529 2550 2571 2601 2601
                                                                                  2606 2606 2611 2682 2702 2770 2844 2847 2861 19-92
                                                                                  19-92 19-106 19-113 19-128 5190 5455 5561 5645
                                                                                  6493 6501
Pvalue                    3            based           pointer                  level 2 in structure "erring_token" packed packed
                                                                                  unaligned dcl 22-143 in procedure "ERROR" ref
                                                                                  22-172 22-172 22-172
RC_NAME                         010551 constant        char(16)                 initial array packed unaligned dcl 6-392 ref 2385
                                                                                  2386
RED                                    based           structure                level 1 dcl 17-48
REDUCTION                              based           structure                array level 1 packed packed unaligned dcl 3328 set
                                                                                  ref 19-58
REDUCTIONS                      006675 constant        fixed bin(17,0)          initial array packed unaligned dcl 3328 set ref
                                                                                  19-58
R_ACCESS                        011261 constant        bit(3)                   initial packed unaligned dcl 1-11 set ref 1287*
                                                                                  1291*
S                        11            based           structure                level 3 packed packed unaligned dcl 18-68
SC_NAME                         010655 constant        char(12)                 initial array packed unaligned dcl 6-372 ref 2364
                                                                                  2365
SERROR_CONTROL                  005200 automatic       bit(2)                   initial packed unaligned dcl 22-3 set ref 1245*
                                                                                  1248* 22-3* 1707* 22-168* 22-172*
SERROR_PRINTED                  005201 automatic       bit(1)                   initial array packed unaligned dcl 22-3 set ref
                                                                                  22-3* 1707* 1714* 22-156* 22-168* 22-172*
SH_NAME                         010366 constant        char(24)                 initial array packed unaligned dcl 6-431 ref 2417
                                                                                  2418
SPDL                            005176 automatic       bit(1)                   initial dcl 6550 set ref 6550* 19-73 21-42 23-32
SPECIAL_VERSION_2                      constant        fixed bin(17,0)          initial dcl 13-125 ref 1430
SPEC_TYPE                       011304 constant        fixed bin(17,0)          initial dcl 12-223 set ref 1404 1425 2635* 4379*
                                                                                  4832*
STACK                           006317 automatic       fixed bin(17,0)          array dcl 3324 set ref 20-18 20-26 20-59 20-60 20-60
                                                                                  20-68*
STACK_DEPTH                     006331 automatic       fixed bin(17,0)          initial dcl 3324 set ref 20-17 20-18 20-24 20-26
                                                                                  20-27* 20-27 3324* 4964* 4964 4970* 4970 5010*
                                                                                  5010 5016* 5016 5330* 5964* 5964 6002* 6002 6523*
                                                                                  6523 20-59 20-66* 20-66 20-68
STOKEN_FCN                      006312 automatic       bit(1)                   dcl 17-33 set ref 3901* 3903* 3905* 3907* 3909*
                                                                                  3911* 3913* 3915* 3917* 3919* 3921* 3923* 3925*
                                                                                  3927* 3929* 3931* 3933* 3935* 3937* 3939* 3941*
                                                                                  3943* 3945* 3947* 3949* 3951* 3953* 3955* 3957*
                                                                                  3959* 3961* 3963* 3966
Soutput_stmt              0(18) 000000 constant        bit(1)                   initial array level 2 packed packed unaligned
                                                                                  dcl 3178 ref 22-161
Ssearching                      006416 automatic       bit(1)                   dcl 23-21 set ref 23-26* 23-27 23-30*
TERM_FILE_TERM                  011245 constant        bit(3)                   initial packed unaligned dcl 11-14 set ref 1644*
TERM_FILE_TRUNC_BC_TERM         007733 constant        bit(3)                   initial packed unaligned dcl 11-15 set ref 1622*
                                                                                  1653*
TOKEN_REQD                             based           structure                level 2 in structure "RED" packed packed unaligned
                                                                                  dcl 17-48 in procedure "SEMANTIC_ANALYSIS"
TOKEN_REQD                             based           structure                level 1 dcl 17-48 in procedure "SEMANTIC_ANALYSIS"
TOKEN_REQD_STRING                      based           structure                level 1 dcl 17-48
TOKEN_REQD_VALUE                       based           char                     packed unaligned dcl 17-48 ref 19-128
TOKEN_REQUIREMENT                      based           structure                array level 1 packed packed unaligned dcl 3758 set
                                                                                  ref 19-63
TOKEN_REQUIREMENTS              005525 constant        fixed bin(17,0)          initial array packed unaligned dcl 3758 set ref
                                                                                  19-63
TOKEN_STRINGS                          based           char(1660)               dcl 3875 set ref 19-126
TOKEN_STRING_ARRAYS             004654 constant        char(100)                initial array dcl 3875 set ref 19-126
TRACING                         000110 internal static bit(1)                   initial dcl 3318 set ref 19-50* 19-50
TRANS_TYPE                      011312 constant        fixed bin(17,0)          initial dcl 12-222 set ref 4011* 4353* 4366* 4806*
                                                                                  4819*
TTT_version_4                          constant        fixed bin(17,0)          initial dcl 12-30 ref 1353
TTY_BOOLEAN_MODE_DSA_NAME       010127 constant        char(12)                 initial array packed unaligned dcl 7-47 ref 1812
                                                                                  1812 1814 1814
TYPE                      0(18)        based           fixed bin(17,0)          level 2 packed packed unaligned dcl 17-48 ref 19-65
                                                                                  19-71 3899
VIDEO_RP                               constant        fixed bin(17,0)          initial dcl 12-118 ref 2244 4399 4866
a_ptr                                  parameter       pointer                  dcl 2160 in procedure "define_table" ref 2155 2180
a_ptr                                  parameter       pointer                  dcl 3131 in procedure "start_fkey_seq" ref 3129 3133
a_seqn                                 parameter       fixed bin(17,0)          dcl 2256 ref 2254 2258
a_value                                parameter       fixed bin(17,0)          dcl 2063 ref 2061 2065
able_to_repeat            0(02)        based           bit(1)                   level 3 packed packed unaligned dcl 16-37 set ref
                                                                                  5994*
additional_info         112            based           structure                level 2 dcl 12-59 set ref 4483
addr                                                   builtin function         dcl 20-40 in procedure "PUSH" ref 20-63 20-63
addr                                                   builtin function         dcl 17-92 in procedure "SEMANTIC_ANALYSIS" ref 19-58
                                                                                  19-58 19-63 19-63 19-126 19-126 4300 4307 4314
                                                                                  4483 4490 4497 4753 4760 4767 5202 5209 5216 5223
                                                                                  5230 5237 5244 5251 5258 5265 5272 5279 5286 5312
                                                                                  5342 5383 5398 5425 5425 5431 5431 5437 5437 5443
                                                                                  5443 5449 5449 5457 5457 5610 5619 5643 5651 5658
                                                                                  6206 6438 6445
addr                                                   builtin function         dcl 1177 in procedure "cv_ttf" ref 1357 1407 1420
                                                                                  1495 1546 1564 1784 1971 2113 2220 2258 2275 2286
                                                                                  2290 2652 2653 2683 2713 2735 2739 2742 2822 2824
                                                                                  2829 2830 2876 2983 3051 3087 3112 3119 3149
addrel                                                 builtin function         dcl 1177 ref 1473 1530 2196 2996
alloc_unit               43            based           bit(8)                   level 3 dcl 6-136 set ref 2316* 2438* 2438
already_called                  000010 internal static bit(1)                   initial packed unaligned dcl 965 set ref 1379 1384*
ans_back_table_ptr              000100 automatic       pointer                  initial dcl 977 set ref 977* 1337* 1518 2994
ans_size                        000102 automatic       fixed bin(18,0)          dcl 978 set ref 1528* 1529 1530
ansbck_char_index               000103 automatic       fixed bin(17,0)          dcl 979 set ref 3002* 5595 5601 5609 5610 5611* 5611
                                                                                  5618 5619 5620* 5620 5625 5627 5628* 5628 5643
                                                                                  5645 5646* 5646 5651 5653* 5653 5658 5660* 5660
                                                                                  5682
answerback_entry                       based           structure                level 1 dcl 12-214 set ref 1526* 1526 2996
answerback_entry_ptr            005156 automatic       pointer                  dcl 12-211 set ref 1518* 1525 1526 1530* 1530 2994*
                                                                                  2996* 2996 2996 2999 2999 5595 5601 5609 5610 5618
                                                                                  5619 5625 5627 5643 5645 5651 5658 5682 5697
answerback_length               005160 automatic       fixed bin(17,0)          dcl 12-212 set ref 1525* 1528
answerback_offset        44            based           fixed bin(18,0)          level 2 dcl 12-34 set ref 1512* 1514*
arg                                    based           char                     packed unaligned dcl 980 set ref 1223 1227* 1231*
                                                                                  1233* 1237* 1245 1245 1248 1248 1251 1256 1256
                                                                                  1258* 1263* 1265* 1274*
argc                            000104 automatic       fixed bin(17,0)          dcl 981 set ref 1209* 1214 1221 1257
argl                            000105 automatic       fixed bin(17,0)          dcl 982 set ref 1222* 1223 1227 1227 1231 1231 1233
                                                                                  1233 1237 1237 1245 1245 1248 1248 1251 1256 1256
                                                                                  1258 1258 1262* 1263 1263 1265 1265 1274 1274
argp                            000106 automatic       pointer                  dcl 983 set ref 1222* 1223 1227 1231 1233 1237 1245
                                                                                  1245 1248 1248 1251 1256 1256 1258 1262* 1263 1265
                                                                                  1274
argx                            000110 automatic       fixed bin(17,0)          dcl 984 set ref 1221* 1222* 1257 1261* 1261 1262*
asc_mnemonic                    005357 automatic       char(3)                  packed unaligned dcl 2019 set ref 2049* 2050 2051
                                                                                  2052 2053 2055
asc_value                       007543 constant        char(3)                  initial array packed unaligned dcl 2021 ref 2054
                                                                                  2054 2055
attention_fcn                          based           structure                level 1 dcl 5-42
attentions              126            based           structure                level 2 dcl 6-136 set ref 2330*
attn                    127            based           structure                array level 3 dcl 6-136
attribute                42            based           structure                level 2 dcl 6-136
attx                            005760 automatic       fixed bin(17,0)          dcl 2591 set ref 2593* 2598* 2601 2606 2610 2611
author                                 based           structure                level 2 in structure "author_dcl" dcl 2-9
                                                                                  in procedure "cv_ttf"
author                                 based           structure                level 2 in structure "ttt" dcl 12-34 in procedure
                                                                                  "cv_ttf"
author_dcl                             based           structure                level 1 dcl 2-9
based_bit1                             based           bit(1)                   packed unaligned dcl 1100 set ref 4909* 4914* 4919*
                                                                                  4924*
based_fb                               based           fixed bin(17,0)          dcl 1101 set ref 2983 6464*
based_fb17                             based           fixed bin(17,0)          packed unaligned dcl 1103 set ref 2683* 2713* 2735*
                                                                                  2824* 2829*
based_fb8                              based           fixed bin(8,0)           packed unaligned dcl 1102 set ref 5342* 5610* 5619*
                                                                                  5643* 5651* 5658*
based_rp                               based           fixed bin(18,0)          dcl 3063 set ref 3068* 3074*
based_two_words                        based           fixed bin(17,0)          array dcl 1104 set ref 5037*
baseno                                                 builtin function         dcl 1177 ref 3068 3068 3070 3070
baud                      1            based           fixed bin(17,0)          array level 4 dcl 1126 set ref 3009 5511* 5517*
baud_error_printed              000111 automatic       bit(1)                   packed unaligned dcl 985 set ref 2117* 2900 2903*
baud_rate                 1            based           fixed bin(17,0)          array level 3 in structure "delay_table" dcl 12-202
                                                                                  in procedure "cv_ttf" set ref 2920*
baud_rate                              parameter       fixed bin(17,0)          dcl 2896 in procedure "make_delay_entry" ref 2892
                                                                                  2920
baud_table                      011126 constant        fixed bin(17,0)          initial array dcl 4-8 ref 1892 1893 1915 1916
bauds_overridden        133            based           bit(1)                   level 3 packed packed unaligned dcl 12-59 set ref
                                                                                  2882* 2914* 2950
baudx                           000112 automatic       fixed bin(17,0)          dcl 986 set ref 2908 2943* 2944* 2957* 2958 2958*
                                                                                  2963 4074* 4080* 4086* 4092* 4098* 4503* 4509*
                                                                                  4515* 4943 4945* 4945 4955 4957* 4957 4961 4979
                                                                                  4981* 4981 4993* 4993 5027* 5027
bin                                                    builtin function         dcl 1177 ref 1412 1421 1463 2027 2027 2038 2038 2206
                                                                                  2244 2625 2680 2820 3071 5455 5991 5991 5993 5993
bit_count                       000113 automatic       fixed bin(24,0)          dcl 987 set ref 1287* 1291* 1304 1387 1387
bitp                            000114 automatic       pointer                  initial dcl 988 set ref 988* 4300* 4307* 4314* 4753*
                                                                                  4760* 4767* 4909 4914 4919 4924 6206*
black_ribbon_shift       44            based           structure                level 2 dcl 1137 set ref 5265
block_ack_set                   000116 automatic       bit(1)                   packed unaligned dcl 989 set ref 2117* 4247* 4266*
                                                                                  4285* 4658 4677 4700* 4719* 4738*
break                   127            based           bit(1)                   array level 5 packed packed unaligned dcl 6-136 set
                                                                                  ref 2601*
breaks                          000011 internal static varying char(43)         dcl 966 set ref 1382* 1383* 1387* 2038
brief_error                     000112 internal static varying char(4)          initial dcl 20-48 set ref 20-60*
brief_message            33     000000 constant        varying char(30)         initial array level 2 dcl 3178 ref 1707 22-168
                                                                                  22-172
bs_seq                   10            based           structure                level 2 in structure "special_chars" dcl 13-26
                                                                                  in procedure "cv_ttf"
bs_seq                   10            based           structure                level 2 in structure "temp_special_table" dcl 1137
                                                                                  in procedure "cv_ttf" set ref 5216
byte                                                   builtin function         dcl 1177 ref 3019
c                               006055 automatic       char(1)                  packed unaligned dcl 2767 set ref 2770* 2771 2771
c_chars                                based           structure                level 1 dcl 13-54
c_chars_ptr                     005162 automatic       pointer                  dcl 13-53 set ref 1198* 5341
ca_nb                   176            based           fixed bin(17,0)          level 3 dcl 6-136 set ref 6416*
cax                             000117 automatic       fixed bin(17,0)          dcl 990 set ref 2300* 2582* 2582 2584 2586 6416
ce_nb                   171            based           fixed bin(17,0)          level 3 dcl 6-136 set ref 6306*
cex                             000120 automatic       fixed bin(17,0)          dcl 991 set ref 2300* 2477* 2477 2479 2481 6306
cf_nb                   174            based           fixed bin(17,0)          level 3 dcl 6-136 set ref 6372*
cfx                             000121 automatic       fixed bin(17,0)          dcl 992 set ref 2300* 2540* 2540 2542 2544 6372
char                                                   builtin function         dcl 1177 ref 1223 2354 2375 2396 2478 2499 2520 2541
                                                                                  2562 2583 3113 3113
char_encoding            50            based           fixed bin(17,0)          array level 2 dcl 6-136 set ref 2321* 2478 2479
                                                                                  2481*
char_font               112            based           fixed bin(17,0)          array level 2 dcl 6-136 set ref 2326* 2541 2542
                                                                                  2544*
char_set                 60            based           fixed bin(17,0)          array level 2 dcl 6-136 set ref 2322* 2499 2500
                                                                                  2502*
char_subset              76            based           fixed bin(17,0)          array level 2 dcl 6-136 set ref 2323* 2520 2521
                                                                                  2523*
chars                     0(09)        based           char(1)                  array level 2 in structure "c_chars" packed packed
                                                                                  unaligned dcl 13-54 in procedure "cv_ttf" set ref
                                                                                  5341 5342
chars                     3            based           char(1)                  array level 3 in structure "answerback_entry" packed
                                                                                  packed unaligned dcl 12-214 in procedure "cv_ttf"
                                                                                  set ref 5595* 5601* 5609* 5610 5618* 5619 5625*
                                                                                  5627* 5643 5645* 5651 5658
check_0nums                     000122 automatic       bit(1)                   packed unaligned dcl 993 set ref 1202* 1252* 1610
                                                                                  2032
cleanup                         005122 stack reference condition                dcl 1172 ref 1204
code                            000123 automatic       fixed bin(35,0)          dcl 994 set ref 1209* 1210 1211* 1222* 1231* 1232
                                                                                  1233* 1237* 1238 1240* 1241 1262* 1263* 1264 1273*
                                                                                  1274* 1287* 1288 1291* 1292 1299 1301* 1305* 1312*
                                                                                  1313 1317* 1318 1320* 1326* 1327 1329* 1372* 1375*
                                                                                  1387* 1622* 1623 1625* 1659* 1837* 1839* 1841
                                                                                  1860* 1862* 1864 1888* 1889 1903* 1904 1944* 1945
                                                                                  2012* 2013
coded_type              134            based           fixed bin(17,0)          level 2 dcl 12-59 set ref 1600*
collate                                                builtin function         dcl 1177 ref 1381 1381
com_err_                        000222 constant        entry                    external dcl 915 ref 1211 1227 1233 1258 1265 1274
                                                                                  1294 1301 1320 1329 1375 1396 1610 1617 1625
com_err_$suppress_name          000224 constant        entry                    external dcl 916 ref 1216
comment                 114            based           structure                level 2 dcl 12-59 set ref 4497
compression             106            based           fixed bin(17,0)          array level 2 dcl 6-136 set ref 2325* 2583 2584
                                                                                  2586*
conditional_printer_off
                        130(02)        based           bit(1)                   level 3 in structure "tte" packed packed unaligned
                                                                                  dcl 12-59 in procedure "cv_ttf" set ref 4767
conditional_printer_off
                        130(02) 004652 automatic       bit(1)                   level 3 in structure "dft" packed packed unaligned
                                                                                  dcl 1089 in procedure "cv_ttf" set ref 4314
conversion                      000000 stack reference condition                dcl 1172 ref 1932 1934
count                                  based           fixed bin(8,0)           level 2 in structure "c_chars" packed packed
                                                                                  unaligned dcl 13-54 in procedure "cv_ttf" set ref
                                                                                  5354* 5360*
count                    10            based           fixed bin(8,0)           level 3 in structure "special_chars" packed packed
                                                                                  unaligned dcl 13-26 in procedure "cv_ttf" ref 2647
count                                  based           fixed bin(8,0)           level 3 in structure "special_chars" packed packed
                                                                                  unaligned dcl 13-26 in procedure "cv_ttf" ref 2644
count                           000124 automatic       fixed bin(17,0)          dcl 995 in procedure "cv_ttf" set ref 5293* 5334*
                                                                                  5339* 5339 5341 5342 5354 5360 5381* 5381 5383
                                                                                  5398 5415
count                     4            based           fixed bin(8,0)           level 3 in structure "special_chars" packed packed
                                                                                  unaligned dcl 13-26 in procedure "cv_ttf" ref 2647
cpad                      0(18)        based           fixed bin(18,0)          level 2 packed packed unsigned unaligned dcl 16-37
                                                                                  set ref 2786* 5870*
cpad_in_chars             0(04)        based           bit(1)                   level 3 packed packed unaligned dcl 16-37 set ref
                                                                                  5869*
cpad_present              0(03)        based           bit(1)                   level 3 packed packed unaligned dcl 16-37 set ref
                                                                                  2781* 5869*
cps_baud_value                  000125 automatic       fixed bin(17,0)          dcl 996 set ref 1909* 1914* 1916 4979 5025*
cr_seq                    4            based           structure                level 2 in structure "temp_special_table" dcl 1137
                                                                                  in procedure "cv_ttf" set ref 5209
cr_seq                    4            based           structure                level 2 in structure "special_chars" dcl 13-26
                                                                                  in procedure "cv_ttf"
created_table_segment           000126 automatic       bit(1)                   dcl 997 set ref 1200* 1313* 1618 1647
cs_nb                   172            based           fixed bin(17,0)          level 3 dcl 6-136 set ref 6328*
css_nb                  173            based           fixed bin(17,0)          level 3 dcl 6-136 set ref 6350*
cssx                            000127 automatic       fixed bin(17,0)          dcl 998 set ref 2300* 2519* 2519 2521 2523 6350
csx                             000130 automatic       fixed bin(17,0)          dcl 999 set ref 2300* 2498* 2498 2500 2502 6328
ct_table_offset                 000131 automatic       fixed bin(18,0)          dcl 1000 set ref 1282* 2189* 2192* 2192
ctl_chars                       000025 internal static varying char(32)         dcl 967 set ref 1381* 1382 1383* 1387*
cu_$arg_count                   000226 constant        entry                    external dcl 917 ref 1209
cu_$arg_ptr                     000230 constant        entry                    external dcl 918 ref 1222 1262
cu_$cl                          000330 constant        entry                    external dcl 20-43 ref 20-62
cur_delay_value                 000132 automatic       fixed bin(17,0)          dcl 1001 set ref 2983* 2985* 2987
cur_table_name                  000133 automatic       char(32)                 packed unaligned dcl 1002 set ref 2179* 3113* 3143*
                                                                                  5176* 5184* 5190* 5471*
curr_index                             parameter       fixed bin(17,0)          dcl 3161 ref 3159 3164 3166 3171
currentsize                                            builtin function         dcl 1177 ref 1461 1466 1466 2243 2243 2624 2624 3117
                                                                                  3123 3123
cursor_motion_keys        5            based           structure                level 2 in structure "function_key_data" dcl 8-7
                                                                                  in procedure "cv_ttf" set ref 1458 3092*
cursor_motion_keys       15            based           structure                level 3 in structure "fkey_table" dcl 12-177
                                                                                  in procedure "cv_ttf" set ref 1458*
cv_dec_check_                   000232 constant        entry                    external dcl 919 in procedure "cv_ttf" ref 1263 1837
                                                                                  1839 1860 1862 1888 1903 1944
cv_dec_check_                   000326 constant        entry                    external dcl 17-96 in procedure "SEMANTIC_ANALYSIS"
                                                                                  ref 19-106
cv_oct_check_                   000234 constant        entry                    external dcl 920 ref 2012
cv_trans                               based           structure                level 1 dcl 13-62 in procedure "cv_ttf" ref 2192
cv_trans                 13            based           structure                level 3 in structure "table_entry" dcl 12-137
                                                                                  in procedure "cv_ttf"
cv_trans_struc                         based           structure                level 1 dcl 13-107 set ref 1411
cv_ttf_severity_                000304 external static fixed bin(35,0)          initial dcl 945 set ref 1206* 1632* 1637*
def_string                2            based           structure                level 2 dcl 12-214
default                   1            based           fixed bin(17,0)          level 2 in structure "cv_trans_struc" dcl 13-107
                                                                                  in procedure "cv_ttf" set ref 2195*
default                  12            based           fixed bin(17,0)          level 3 in structure "special_table" dcl 12-143
                                                                                  in procedure "cv_ttf" set ref 1431*
default_count                   000143 automatic       fixed bin(17,0)          dcl 1003 set ref 1282* 1479 1489 1508 1509 3009 3009
                                                                                  4050* 5511 5517 5533 5539 5555 5561 5572* 5572
                                                                                  5580
default_type_offset      43            based           fixed bin(18,0)          level 2 dcl 12-34 set ref 1481* 1486*
defined                         000144 automatic       fixed bin(17,0)          dcl 1004 set ref 1757* 1762* 2163 2163 2166 2173*
                                                                                  2174 2175 2178 2644 2647
delay                                  based           structure                level 1 dcl 13-66
delay_array               1            based           structure                array level 2 dcl 12-202 set ref 2958* 2958
delay_error_printed             000145 automatic       bit(1)                   packed unaligned dcl 1005 set ref 2935 2938* 2975
                                                                                  2978* 5100*
delay_overridden        133(01)        based           bit(1)                   array level 3 packed packed unaligned dcl 12-59 set
                                                                                  ref 2882* 2967*
delay_rp                124            based           fixed bin(18,0)          level 3 dcl 12-59 set ref 2134 2134* 2910* 2931 2948
                                                                                  2962*
delay_stmt                      000146 automatic       bit(1)                   packed unaligned dcl 1006 set ref 2117* 2898 2953
                                                                                  2970*
delay_table                            based           structure                level 1 dcl 12-202
delay_tablep                    005154 automatic       pointer                  dcl 12-200 set ref 2911* 2913 2918 2918 2920 2920
                                                                                  2921 2921 2922 2922 2948* 2956 2957 2958 2964*
                                                                                  2973 2987
delays                    4            based           fixed bin(17,0)          array level 3 dcl 12-202 set ref 2987*
delayx                          000147 automatic       fixed bin(17,0)          dcl 1007 set ref 1930 1930 1948 1948 1952 1956 2967
                                                                                  2983 2983 2987 4521* 4527* 4533* 4539* 4545* 4551*
dev_id                   40            based           fixed bin(16,0)          level 2 unsigned dcl 6-136 set ref 2313* 6047*
dev_type                 41            based           fixed bin(17,0)          level 2 dcl 6-136 set ref 2314* 6059*
dft                             004652 automatic       structure                level 1 dcl 1089 set ref 1358* 2115
dft_bauds                       000150 automatic       fixed bin(17,0)          array dcl 1008 set ref 2944* 4943* 4955* 4979*
dft_count                              based           fixed bin(17,0)          level 2 in structure "temp_dftt" dcl 1126
                                                                                  in procedure "cv_ttf" set ref 5580*
dft_count                              based           fixed bin(17,0)          level 2 in structure "dftt" dcl 12-127 in procedure
                                                                                  "cv_ttf" set ref 1508*
dft_extended_tables_defined     000164 automatic       bit(1)                   packed unaligned dcl 1009 set ref 1368* 2118 4407*
                                                                                  4422*
dft_extended_tablesp            000166 automatic       pointer                  initial dcl 1010 set ref 1010* 1197* 1366* 1367 1663
                                                                                  1663 2120 4399 4405 4414 4420
dftdevp                         005524 automatic       pointer                  initial dcl 2284 set ref 2284* 2290* 2291
dftt                                   based           structure                level 1 dcl 12-127
dftte                     1            based           structure                array level 2 dcl 12-127 set ref 1490*
dfttp                           005146 automatic       pointer                  dcl 12-125 set ref 1487* 1490 1502 1508
dimension                                              builtin function         dcl 20-40 in procedure "PUSH" ref 20-59 20-60 20-60
dimension                                              builtin function         dcl 1177 in procedure "cv_ttf" ref 22-3 22-3
dirname                         000170 automatic       char(168)                packed unaligned dcl 1011 set ref 1201* 1231* 1237*
                                                                                  1287* 1291* 1294* 1294* 1301* 1301*
divide                                                 builtin function         dcl 1177 ref 1387 1387 1435 1528 2658 2786 2996 3040
                                                                                  3040
down                     25            based           structure                array level 3 dcl 8-7 set ref 5449 5449
dpp                       1            based           fixed bin(17,0)          array level 2 dcl 6-136 set ref 2306* 2354 2355
                                                                                  2357*
dpp_nb                  166            based           fixed bin(17,0)          level 3 dcl 6-136 set ref 6219*
dppx                            000242 automatic       fixed bin(17,0)          dcl 1012 set ref 2300* 2353* 2353 2355 2357 6219
dsatm_data_$device_multics_dft  000306 external static fixed bin(17,0)          dcl 947 set ref 2290
dsatm_device                           based           structure                level 1 dcl 6-136 set ref 2291* 2291 2624 2624 2626*
                                                                                  2626
dsatm_network                          based           structure                level 1 dcl 6-195
dsatm_presentation                     based           structure                level 1 dcl 6-75
dsatm_station                          based           structure                level 1 dcl 6-113
dsatmdevp                       005130 automatic       pointer                  dcl 6-134 set ref 1283* 1832 1833 1843 1844 1855
                                                                                  1856 1866 1867 2110* 2286* 2291 2295 2296 2305
                                                                                  2306 2307 2308 2309 2310 2311 2312 2313 2314 2315
                                                                                  2316 2317 2318 2319 2320 2321 2322 2323 2324 2325
                                                                                  2326 2327 2328 2329 2330 2331 2332 2333 2354 2355
                                                                                  2357 2375 2376 2378 2396 2397 2399 2438 2438 2478
                                                                                  2479 2481 2499 2500 2502 2520 2521 2523 2541 2542
                                                                                  2544 2562 2563 2565 2583 2584 2586 2601 2606 2610
                                                                                  2611 2624 2624 2626 2627* 6047 6059 6071 6095 6107
                                                                                  6179 6206 6219 6241 6263 6306 6328 6350 6372 6394
                                                                                  6416
dummy_dftte                            based           structure                level 1 dcl 1111 ref 1509
edited                          000243 automatic       fixed bin(17,0)          array dcl 1013 set ref 2653 5286 5287*
edited_escapes                         based           structure                array level 2 dcl 13-26 set ref 2653*
editing_chars           127     004652 automatic       structure                level 2 in structure "dft" dcl 1089 in procedure
                                                                                  "cv_ttf"
editing_chars           127            based           structure                level 2 in structure "tte" dcl 12-59 in procedure
                                                                                  "cv_ttf"
end_of_page              50            based           structure                level 2 dcl 1137 set ref 5272
entry                     1            based           structure                array level 3 unaligned dcl 1126 set ref 1490
entryx                          002243 automatic       fixed bin(17,0)          dcl 1014 set ref 5171* 5176 5178 5179* 5179 5184
erase                   127     004652 automatic       char(1)                  level 3 in structure "dft" packed packed unaligned
                                                                                  dcl 1089 in procedure "cv_ttf" set ref 1363* 4111*
erase                   127            based           char(1)                  level 3 in structure "tte" packed packed unaligned
                                                                                  dcl 12-59 in procedure "cv_ttf" set ref 4564*
erring_token                           based           structure                level 1 dcl 22-143
erring_token_value                     based           char                     packed unaligned dcl 22-143 set ref 22-172* 22-172*
                                                                                  22-172*
error_control_table             000000 constant        structure                array level 1 dcl 3178 ref 22-3 22-3
error_num                              parameter       fixed bin(17,0)          dcl 1697 set ref 1695 1705 1707 1707* 1707 1707 1707
                                                                                  1707 1713 1714
error_table_$bad_conversion     000322 external static fixed bin(35,0)          dcl 949 set ref 1265*
error_table_$badopt             000310 external static fixed bin(35,0)          dcl 949 ref 1273
error_table_$noarg              000320 external static fixed bin(35,0)          dcl 949 set ref 1258*
error_table_$noentry            000312 external static fixed bin(35,0)          dcl 949 ref 1288
error_table_$too_many_args      000314 external static fixed bin(35,0)          dcl 949 set ref 1227*
error_table_$translation_failed 000324 external static fixed bin(35,0)          dcl 949 set ref 1396* 1617*
error_table_$zero_length_seg    000316 external static fixed bin(35,0)          dcl 949 ref 1305
esc_p                           002244 automatic       pointer                  initial dcl 1015 set ref 1015* 5279* 5286* 5312
escape_length            67            based           fixed bin(17,0)          level 4 in structure "special_table" dcl 12-143
                                                                                  in procedure "cv_ttf" set ref 1432 1432 1432 1432
                                                                                  1432 1432 1432 1432 1432 1432 1432 1432 1432 1432
                                                                                  1432 1432 1432 1432 1432 1432
escape_length            54            based           fixed bin(17,0)          level 2 in structure "special_chars" dcl 13-26
                                                                                  in procedure "cv_ttf" set ref 1432 1432 1432 1432
                                                                                  1432 1432 1432 1432 1432 1432 1432 1432 1432 1432
                                                                                  1432 1432 1432 1432 1432 1432 1435 1435 1435 1435
                                                                                  1435 1435 1573 2651* 2652 2653 2653 2653 2653 2654
                                                                                  2654 2655 2655 2655 2655 2656 2656 2656 2656 2656
                                                                                  2656 2658 2658 2658 2658 2658 2658
escapes                                based           structure                array level 1 dcl 1113 set ref 2652 2653 5312
ete_ack_level           124            based           fixed bin(17,0)          level 2 dcl 6-136 set ref 2328*
exp_char_index                         based           fixed bin(17,0)          level 2 dcl 1163 set ref 2260* 2268 2272 2715 2738
                                                                                  2742 2743* 2743 2756 2758* 2758 2812* 2812 2815
                                                                                  2819 2822 2822 2824 2829 2830 3135* 3141 3146
                                                                                  3155* 5047*
exp_string                             based           char(2048)               packed unaligned dcl 1105 set ref 2275 2739 2742*
                                                                                  2822 3149
expand_pathname_                000236 constant        entry                    external dcl 921 ref 1231
expand_pathname_$add_suffix     000240 constant        entry                    external dcl 922 ref 1237
expanded                  2            based           fixed bin(8,0)           array level 2 packed packed unaligned dcl 1163 set
                                                                                  ref 2275 2739 2742 2756* 2822 3149 5049*
express_in_decimal        0(01) 005120 automatic       bit(1)                   level 3 packed packed unaligned dcl 1161 set ref
                                                                                  5895* 5906*
express_in_octal          0(02) 005120 automatic       bit(1)                   level 3 packed packed unaligned dcl 1161 set ref
                                                                                  5910* 5921*
extended_tables                        based           structure                level 1 dcl 12-114 set ref 1366 1663 2120* 2120 2205
                                                                                  2205 2207* 2886* 2886
extended_tables_ntables                constant        fixed bin(17,0)          initial dcl 12-122 ref 1366 1366 2205 2205 2208
extended_tables_rp      137            based           fixed bin(18,0)          level 2 dcl 12-59 set ref 2136 2136* 2204 2206* 2213
                                                                                  2878 2883 2884* 2886
extended_tables_work                   based           structure                level 1 dcl 1115
extended_tables_workp           002246 automatic       pointer                  initial dcl 1016 set ref 1016* 1340* 2220 2226 2241
                                                                                  2275 2286 3087 3096 3119 3149
extended_tablesp                005144 automatic       pointer                  dcl 12-112 set ref 2120 2205* 2205 2205 2206 2207
                                                                                  2208 2209 2210 2213* 2244 2625 2886 4405* 4420*
                                                                                  4866 4881
fb35                            002250 automatic       fixed bin(35,0)          dcl 1017 set ref 1263* 1264 1264 1269
fb8_array                              based           fixed bin(8,0)           array packed unaligned dcl 1106 set ref 5383* 5398*
ff_seq                   24            based           structure                level 2 dcl 1137 set ref 5237
fkey_data                10            based           structure                level 2 dcl 12-177
fkey_offset              42            based           fixed bin(18,0)          level 2 dcl 12-34 set ref 1447*
fkey_rp                 123            based           fixed bin(18,0)          level 3 dcl 12-59 set ref 1553* 4386* 4392* 4839*
                                                                                  4845*
fkey_table                             based           structure                level 1 dcl 12-177 set ref 1461 1466
fkey_table_offset               002251 automatic       fixed bin(18,0)          dcl 1018 set ref 1282* 3086* 3116 3117 3123* 3123
                                                                                  3124 3124* 3124
fkey_tablep                     005152 automatic       pointer                  dcl 12-175 set ref 1453* 1455 1456 1457 1458 1459
                                                                                  1461 1463 1464 1466
fkey_tables_ptr                 002252 automatic       pointer                  initial dcl 1019 set ref 1019* 1342* 1454 3086* 3116
                                                                                  3117
flags                                  based           structure                level 2 in structure "tty_video_seq" packed packed
                                                                                  unaligned dcl 16-37 in procedure "cv_ttf"
flags                           005120 automatic       structure                level 2 in structure "temp_numeric_encoding" packed
                                                                                  packed unaligned dcl 1161 in procedure "cv_ttf"
flags                   130     004652 automatic       structure                level 2 in structure "dft" dcl 1089 in procedure
                                                                                  "cv_ttf"
flags                   130            based           structure                level 2 in structure "tte" dcl 12-59 in procedure
                                                                                  "cv_ttf"
float                                                  builtin function         dcl 1177 ref 1933
floating_delay_value            002254 automatic       float bin(27)            dcl 1020 set ref 1933* 1936 1936 2983
flow_control_chars      135            based           structure                level 2 in structure "tte" packed packed unaligned
                                                                                  dcl 12-59 in procedure "cv_ttf"
flow_control_chars      135     004652 automatic       structure                level 2 in structure "dft" packed packed unaligned
                                                                                  dcl 1089 in procedure "cv_ttf"
frame_begin             127(18)        based           char(1)                  level 4 in structure "tte" packed packed unaligned
                                                                                  dcl 12-59 in procedure "cv_ttf" set ref 1580 4592*
frame_begin             127(18) 004652 automatic       char(1)                  level 4 in structure "dft" packed packed unaligned
                                                                                  dcl 1089 in procedure "cv_ttf" set ref 4139*
frame_end               127(27) 004652 automatic       char(1)                  level 4 in structure "dft" packed packed unaligned
                                                                                  dcl 1089 in procedure "cv_ttf" set ref 4141*
frame_end               127(27)        based           char(1)                  level 4 in structure "tte" packed packed unaligned
                                                                                  dcl 12-59 in procedure "cv_ttf" set ref 1580 4594*
framing_chars           127(18) 004652 automatic       structure                level 3 in structure "dft" packed packed unaligned
                                                                                  dcl 1089 in procedure "cv_ttf"
framing_chars           127(18)        based           structure                level 3 in structure "tte" packed packed unaligned
                                                                                  dcl 12-59 in procedure "cv_ttf"
function_key_data                      based           structure                level 1 dcl 8-7 set ref 3117 3120* 3120 3123
function_key_data_highest       005134 automatic       fixed bin(17,0)          dcl 8-35 set ref 3093* 3105 3164 3166 3171*
function_key_data_ptr           005132 automatic       pointer                  dcl 8-34 set ref 1454* 1456 1457 1458 1459 1460 1462
                                                                                  1462 1464 1466 1466 3087* 3091 3092 3094 3105 3106
                                                                                  3108 3109 3111 3112 3117 3118 3119 3120 3121 3121
                                                                                  3121 3123 3123 3123 3123 3167 3167 3168 5425 5425
                                                                                  5431 5431 5437 5437 5443 5443 5449 5449 5457 5457
function_key_data_version_1            constant        fixed bin(17,0)          initial dcl 8-36 ref 3094
function_key_seqs                      based           char                     packed unaligned dcl 8-32 set ref 1462* 1462 1466
                                                                                  3121* 3121 3123
function_keys            31            based           structure                array level 2 in structure "function_key_data"
                                                                                  dcl 8-7 in procedure "cv_ttf" set ref 1459 3109*
                                                                                  3112 3167 3167 3168* 5457 5457
function_keys            41            based           structure                array level 3 in structure "fkey_table" dcl 12-177
                                                                                  in procedure "cv_ttf" set ref 1459*
get_group_id_                   000242 constant        entry                    external dcl 923 ref 1348
get_temp_segments_              000244 constant        entry                    external dcl 924 ref 1326
get_wdir_                       000246 constant        entry                    external dcl 925 ref 1311
got_temps                       002255 automatic       bit(1)                   packed unaligned dcl 1021 set ref 1199* 1333* 1659
                                                                                  1661*
group2                    7            based           structure                level 2 packed packed unaligned dcl 18-68
hbound                                                 builtin function         dcl 1177 ref 1568 1808 1812 1817 1892 1915 2054 2144
                                                                                  2343 2354 2355 2364 2375 2376 2385 2396 2397 2406
                                                                                  2417 2428 2445 2456 2467 2478 2479 2488 2499 2500
                                                                                  2509 2520 2521 2530 2541 2542 2551 2562 2563 2572
                                                                                  2583 2584 3167 5176 5341
hcs_$delentry_seg               000250 constant        entry                    external dcl 926 ref 1650
hcs_$make_seg                   000252 constant        entry                    external dcl 927 ref 1312
hcs_$truncate_seg               000254 constant        entry                    external dcl 929 ref 1317
highest                         002256 automatic       fixed bin(17,0)          dcl 1022 in procedure "cv_ttf" set ref 1543* 1600
                                                                                  1600* 1603
highest                  11            based           fixed bin(17,0)          level 3 in structure "fkey_table" dcl 12-177
                                                                                  in procedure "cv_ttf" set ref 1457* 1459 1461 1466
highest                   1            based           fixed bin(17,0)          level 2 in structure "function_key_data" dcl 8-7
                                                                                  in procedure "cv_ttf" set ref 1457 1459 3105* 3106
                                                                                  3108* 3111 3117 3120 3123
highest_coded_type       51            based           fixed bin(17,0)          level 2 dcl 12-34 set ref 1603*
hold_extended_tables_rp         006116 automatic       fixed bin(18,0)          dcl 2872 set ref 2878* 2884
home                      5            based           structure                array level 3 dcl 8-7 set ref 5425 5425
i                               002257 automatic       fixed bin(17,0)          dcl 1023 in procedure "cv_ttf" set ref 1400* 1401
                                                                                  1401 1404 1404 1408 1409 1410 1412* 1424* 1425
                                                                                  1425 1428 1429 1434* 1449* 1450 1450 1454 1455
                                                                                  1465* 1489* 1490 1490 1490 1490 1490 1490 1491
                                                                                  1493 1500 1502* 1519* 1522* 1545* 1546* 1748* 1749
                                                                                  1749 1757* 1783* 1784* 1808* 1809* 1812* 1814*
                                                                                  1817* 1818* 1837* 1839* 1843 1844 1860* 1862* 1866
                                                                                  1867 1892* 1893* 1915* 1916* 1970* 1971 1974*
                                                                                  1994* 1996 1998* 2144* 2145 2145* 2741* 2843* 2844
                                                                                  2844 2847 2853* 2860 3111* 3112 3113 3113* 3166*
                                                                                  3168*
i                               006220 automatic       fixed bin(17,0)          dcl 3061 in procedure "perform_misc_relocs" set ref
                                                                                  3066* 3067*
i                               005356 automatic       fixed bin(17,0)          dcl 2018 in procedure "tty_char" set ref 2043* 2044
                                                                                  2044* 2045 2046 2054* 2055 2055*
i                               006054 automatic       fixed bin(17,0)          dcl 2766 in procedure "insert_quoted_string" set ref
                                                                                  2769* 2770*
i                               005462 automatic       fixed bin(17,0)          dcl 2202 in procedure "set_extended" set ref 2209*
                                                                                  2210*
i                               006372 automatic       fixed bin(17,0)          dcl 21-33 in procedure "LEX" set ref 21-39* 21-42
                                                                                  21-45*
increment                       002260 automatic       fixed bin(18,0)          dcl 1024 set ref 1471* 1676
index                                                  builtin function         dcl 1177 ref 2031 2038 2043 2044
init_accept_confg                      based           fixed bin(17,0)          level 2 dcl 6-136 set ref 2305*
initial_string          110            based           structure                level 2 dcl 12-59 set ref 4490
initiate_file_                  000256 constant        entry                    external dcl 930 ref 1287 1291
input_conversion_rp     120            based           fixed bin(18,0)          level 3 in structure "tte" dcl 12-59 in procedure
                                                                                  "cv_ttf" set ref 1550* 4774* 4780*
input_conversion_rp     120     004652 automatic       fixed bin(18,0)          level 3 in structure "dft" dcl 1089 in procedure
                                                                                  "cv_ttf" set ref 4321* 4327*
input_escapes                   005013 automatic       structure                level 1 dcl 1091 in procedure "cv_ttf"
input_escapes                          based           structure                level 2 in structure "special_chars" dcl 13-26
                                                                                  in procedure "cv_ttf"
input_escapes                          based           structure                level 4 in structure "special_table" dcl 12-143
                                                                                  in procedure "cv_ttf"
input_results                   005054 automatic       structure                level 1 dcl 1095 in procedure "cv_ttf"
input_results                          based           structure                level 2 in structure "special_chars" dcl 13-26
                                                                                  in procedure "cv_ttf"
input_resume            135(09)        based           char(1)                  level 3 in structure "tte" packed packed unaligned
                                                                                  dcl 12-59 in procedure "cv_ttf" set ref 1594 1594
                                                                                  4636* 4643*
input_resume            135(09) 004652 automatic       char(1)                  level 3 in structure "dft" packed packed unaligned
                                                                                  dcl 1089 in procedure "cv_ttf" set ref 4183* 4190*
input_suspend           135            based           char(1)                  level 3 in structure "tte" packed packed unaligned
                                                                                  dcl 12-59 in procedure "cv_ttf" set ref 1594 1594
                                                                                  4622*
input_suspend           135     004652 automatic       char(1)                  level 3 in structure "dft" packed packed unaligned
                                                                                  dcl 1089 in procedure "cv_ttf" set ref 4169*
input_timeout           130(03) 004652 automatic       bit(1)                   level 3 in structure "dft" packed packed unaligned
                                                                                  dcl 1089 in procedure "cv_ttf" set ref 4191*
input_timeout           130(03)        based           bit(1)                   level 3 in structure "tte" packed packed unaligned
                                                                                  dcl 12-59 in procedure "cv_ttf" set ref 1594 4644*
input_translation_rp    116            based           fixed bin(18,0)          level 3 in structure "tte" dcl 12-59 in procedure
                                                                                  "cv_ttf" set ref 1548* 4800* 4806*
input_translation_rp    116     004652 automatic       fixed bin(18,0)          level 3 in structure "dft" dcl 1089 in procedure
                                                                                  "cv_ttf" set ref 4347* 4353*
interpret                 0(01)        based           bit(1)                   level 3 packed packed unaligned dcl 16-37 set ref
                                                                                  5995*
invocation              127            based           structure                array level 4 dcl 6-136
ioa_                            000260 constant        entry                    external dcl 931 ref 1613
iox_$error_output               000334 external static pointer                  dcl 20-43 set ref 20-63*
iox_$put_chars                  000332 constant        entry                    external dcl 20-43 ref 20-63
j                               002261 automatic       fixed bin(17,0)          dcl 1025 in procedure "cv_ttf" set ref 1494* 1495*
                                                                                  1500 1502 1568* 1569 1569*
j                               006272 automatic       fixed bin(17,0)          dcl 3162 in procedure "init_fkey_area" set ref 3167*
                                                                                  3168*
key_info                               based           structure                level 1 packed packed unaligned dcl 8-28
key_info_ptr                    005136 automatic       pointer                  dcl 8-38 set ref 3112* 3113
keyboard_addressing     130     004652 automatic       bit(1)                   level 3 in structure "dft" packed packed unaligned
                                                                                  dcl 1089 in procedure "cv_ttf" set ref 4300
keyboard_addressing     130            based           bit(1)                   level 3 in structure "tte" packed packed unaligned
                                                                                  dcl 12-59 in procedure "cv_ttf" set ref 4753
kill                    127(09) 004652 automatic       char(1)                  level 3 in structure "dft" packed packed unaligned
                                                                                  dcl 1089 in procedure "cv_ttf" set ref 1364* 4125*
kill                    127(09)        based           char(1)                  level 3 in structure "tte" packed packed unaligned
                                                                                  dcl 12-59 in procedure "cv_ttf" set ref 4578*
l_c_or_n                  0(04) 005120 automatic       fixed bin(2,0)           level 2 packed packed unsigned unaligned dcl 1161
                                                                                  set ref 5925* 5931* 5937* 5943* 5949* 5955* 5994
last_install_time        12            based           fixed bin(71,0)          level 3 dcl 12-34 set ref 1349*
lbound                                                 builtin function         dcl 1177 ref 1808 1812 1817 2054 3167
left                     11            based           structure                array level 3 dcl 8-7 set ref 5431 5431
len                                    based           fixed bin(8,0)           level 5 in structure "special_table" packed packed
                                                                                  unaligned dcl 12-143 in procedure "cv_ttf" set ref
                                                                                  1432 1432 1432 1432
len                                    based           fixed bin(8,0)           level 3 in structure "special_chars" packed packed
                                                                                  unaligned dcl 13-26 in procedure "cv_ttf" set ref
                                                                                  1432 1432 1432 1432 1435 1435 2654* 2655 2656 2656
                                                                                  2658 2658
len                       1            based           fixed bin(17,0)          level 2 in structure "target" dcl 2797 in procedure
                                                                                  "store_string" set ref 2819*
len                       1            based           fixed bin(17,0)          level 2 in structure "target" dcl 2668 in procedure
                                                                                  "copy_string" set ref 2679*
len                             005013 automatic       fixed bin(8,0)           level 2 in structure "input_escapes" packed packed
                                                                                  unaligned dcl 1091 in procedure "cv_ttf" set ref
                                                                                  2636* 2654 5415*
len                       1(15)        based           fixed bin(9,0)           level 2 in structure "tty_video_seq" packed packed
                                                                                  unsigned unaligned dcl 16-37 in procedure "cv_ttf"
                                                                                  set ref 2272* 2274 2275 2275
length                                                 builtin function         dcl 1177 in procedure "cv_ttf" ref 1352 1435 2658
                                                                                  2996
length                    2            based           fixed bin(17,0)          level 3 in structure "answerback_entry" dcl 12-214
                                                                                  in procedure "cv_ttf" set ref 1525 1526 2996 5682*
length                                                 builtin function         dcl 20-40 in procedure "PUSH" ref 20-63 20-63
length_in_words                 002262 automatic       fixed bin(17,0)          dcl 1026 set ref 2658* 2659
lex_error_                      000336 constant        entry                    external dcl 20-43 in procedure "PUSH" ref 20-60
lex_error_                      000262 constant        entry                    external dcl 932 in procedure "cv_ttf" ref 1707
lex_error_                      000340 constant        entry                    external dcl 22-150 in procedure "ERROR" ref 22-168
                                                                                  22-172
lex_string_$init_lex_delims     000264 constant        entry                    external dcl 933 ref 1383
lex_string_$lex                 000266 constant        entry                    external dcl 934 ref 1387
lexctl                          000036 internal static varying char(80)         dcl 968 set ref 1383* 1387*
lexdlm                          000063 internal static varying char(80)         dcl 969 set ref 1383* 1387*
like_flags              133            based           structure                level 2 packed packed unaligned dcl 12-59
like_type               132            based           fixed bin(17,0)          level 2 dcl 12-59 set ref 2881* 2914 2950
line_delimiter          133(18)        based           char(1)                  level 2 in structure "tte" packed packed unaligned
                                                                                  dcl 12-59 in procedure "cv_ttf" set ref 4608*
line_delimiter          133(18) 004652 automatic       char(1)                  level 2 in structure "dft" packed packed unaligned
                                                                                  dcl 1089 in procedure "cv_ttf" set ref 4155*
line_length              44            based           fixed bin(8,0)           level 2 unsigned dcl 6-136 set ref 1833* 1844* 2295*
                                                                                  2317*
line_overflow            46            based           fixed bin(17,0)          level 2 dcl 6-136 set ref 2319* 6095*
line_type                 2            based           fixed bin(17,0)          array level 4 dcl 1126 set ref 3009 5533* 5539*
line_type_str                   002264 automatic       bit(72)                  packed unaligned dcl 1027 set ref 5129* 5134* 5158
                                                                                  5162
line_types              125            based           bit(72)                  level 2 in structure "tte" dcl 12-59 in procedure
                                                                                  "cv_ttf" set ref 5158*
line_types              125     004652 automatic       bit(72)                  level 2 in structure "dft" dcl 1089 in procedure
                                                                                  "cv_ttf" set ref 1362* 5162*
line_types                      007767 constant        char(16)                 initial array packed unaligned dcl 9-54 in procedure
                                                                                  "cv_ttf" ref 1996
lock                     10            based           bit(36)                  level 3 dcl 12-34 set ref 1350*
long_error                      000114 internal static varying char(234)        initial dcl 20-48 set ref 20-60*
lowest                          005340 automatic       fixed bin(17,0)          dcl 1985 set ref 1987* 1992* 1994
ltrim                                                  builtin function         dcl 1177 ref 2354 2375 2396 2478 2499 2520 2541 2562
                                                                                  2583 3113 3113
max                                                    builtin function         dcl 17-92 in procedure "SEMANTIC_ANALYSIS" ref 20-27
                                                                                  4964 4970 5010 5016 5313 5964 6002 6523
max                                                    builtin function         dcl 1177 in procedure "cv_ttf" ref 1713
max                                                    builtin function         dcl 22-148 in procedure "ERROR" ref 22-154
max_line_type                          constant        fixed bin(17,0)          initial dcl 9-48 ref 1994
max_output_escapes              002266 automatic       fixed bin(17,0)          dcl 1028 set ref 2636* 2651 2652 2653 5306* 5313*
                                                                                  5313
max_rec_size            125            based           fixed bin(16,0)          level 2 unsigned dcl 6-136 set ref 2329* 6179*
max_rep_depth                          constant        fixed bin(17,0)          initial dcl 970 ref 2693
max_values                      002267 automatic       char(2)                  packed unaligned dcl 1029 set ref 2354* 2355* 2375*
                                                                                  2376* 2396* 2397* 2478* 2479* 2499* 2500* 2520*
                                                                                  2521* 2541* 2542* 2562* 2563* 2583* 2584*
maxind                          002270 automatic       fixed bin(8,0)           dcl 1030 set ref 1566* 1569 1569* 1573 1573
mbz                       3            based           fixed bin(17,0)          array level 3 dcl 12-202 set ref 2922*
message                   1     000000 constant        varying char(100)        initial array level 2 dcl 3178 ref 1707 22-168
                                                                                  22-172
misc_relocs                            based           pointer                  array packed unaligned dcl 1124 set ref 3051* 3067
misc_relocs_count               002271 automatic       fixed bin(17,0)          dcl 1031 set ref 1344* 3050* 3050 3051 3066
misc_relocs_ptr                 002272 automatic       pointer                  initial dcl 1032 set ref 1032* 1341* 3051 3067
misc_strings                           based           fixed bin(17,0)          array dcl 1107 set ref 1476* 1476
misc_tables_ptr                 002274 automatic       pointer                  initial dcl 1033 set ref 1033* 1336* 1473* 1473 1476
                                                                                  2213 2886 2911 2948 2955 3030 3070
mod                                                    builtin function         dcl 1177 ref 3124
mode_line_length                002276 automatic       fixed bin(17,0)          dcl 1034 set ref 1832* 1843* 2109* 2295 2295
mode_page_length                002277 automatic       fixed bin(17,0)          dcl 1035 set ref 1855* 1866* 2109* 2296 2296
mode_string                     002300 automatic       varying char(256)        dcl 1036 set ref 6485* 6493* 6493 6501* 6501 6510*
                                                                                  6510 6530 6534
modes                    10            based           char(256)                level 2 in structure "tte" dcl 12-59 in procedure
                                                                                  "cv_ttf" set ref 6534*
modes                    10     004652 automatic       char(256)                level 2 in structure "dft" dcl 1089 in procedure
                                                                                  "cv_ttf" set ref 1360* 6530*
modestr                                defined         char(8)                  array packed unaligned dcl 15-36 ref 1808 1808 1809
must_be_on                      005120 automatic       bit(1)                   level 3 packed packed unaligned dcl 1161 set ref
                                                                                  5887*
n                                      parameter       fixed bin(18,0)          dcl 2754 in procedure "insert_single_char" ref 2752
                                                                                  2756 2757
n                                      parameter       fixed bin(18,0)          dcl 3048 in procedure "register_misc_reloc" set ref
                                                                                  3046 3051
n                                      parameter       fixed bin(17,0)          dcl 21-33 in procedure "LEX" ref 21-31 21-38 21-39
                                                                                  21-42 21-45
n                                      parameter       fixed bin(17,0)          dcl 3038 in procedure "get_misc_char_space" ref 3036
                                                                                  3040 3040
n                                      parameter       fixed bin(17,0)          dcl 3027 in procedure "get_misc_space" ref 3025 3031
n_answerbacks                   002401 automatic       fixed bin(17,0)          dcl 1037 set ref 1282* 1512 1519 2994 2998* 2998
n_bauds                                based           fixed bin(17,0)          level 2 dcl 12-202 set ref 2913* 2918* 2918 2920
                                                                                  2921 2922 2956* 2956 2957 2973
n_dft_bauds                     002402 automatic       fixed bin(17,0)          dcl 1038 set ref 1282* 2933 2943 4961*
n_fkey_tables            41            based           fixed bin(17,0)          level 2 in structure "ttt" dcl 12-34 in procedure
                                                                                  "cv_ttf" set ref 1469*
n_fkey_tables                   002403 automatic       fixed bin(17,0)          dcl 1039 in procedure "cv_ttf" set ref 1446* 1452*
                                                                                  1452 1469
n_spec                          002404 automatic       fixed bin(17,0)          dcl 1040 set ref 2971* 2971 2973 2987 5098*
n_special_tables                002405 automatic       fixed bin(17,0)          dcl 1041 in procedure "cv_ttf" set ref 1423* 1427*
                                                                                  1427 1442
n_special_tables         40            based           fixed bin(17,0)          level 2 in structure "ttt" dcl 12-34 in procedure
                                                                                  "cv_ttf" set ref 1442*
n_table_names                   002406 automatic       fixed bin(17,0)          dcl 1042 set ref 1282* 1400 1424 1449 1748 2173
                                                                                  2173* 2843 2860* 2861 2862 2863 2864
n_tables                 37            based           fixed bin(17,0)          level 2 in structure "ttt" dcl 12-34 in procedure
                                                                                  "cv_ttf" set ref 1416* 1420
n_tables                        002407 automatic       fixed bin(17,0)          dcl 1043 in procedure "cv_ttf" set ref 1282* 1406*
                                                                                  1406 1407 1416
n_tt_entries             36            based           fixed bin(17,0)          level 2 dcl 12-34 set ref 1407 1420 1494 1500 1545
                                                                                  1783 1970 2112* 2112 2113
name                                   based           char(32)                 level 2 in structure "special_table" packed packed
                                                                                  unaligned dcl 12-143 in procedure "cv_ttf" set ref
                                                                                  1428*
name                                   based           char(32)                 level 2 in structure "tte" packed packed unaligned
                                                                                  dcl 12-59 in procedure "cv_ttf" set ref 1496 1555*
                                                                                  1573* 1580* 1585* 1590* 1594* 1785 1972 2116* 2877
                                                                                  2880* 2902* 2937*
name                                   based           char(32)                 array level 2 in structure "table_names" packed
                                                                                  packed unaligned dcl 1119 in procedure "cv_ttf"
                                                                                  set ref 1401* 1408 1428 1455 1749 2174* 2644*
                                                                                  2647* 2844 2861*
name                                   based           char(32)                 level 2 in structure "fkey_table" packed packed
                                                                                  unaligned dcl 12-177 in procedure "cv_ttf" set ref
                                                                                  1455*
name                            004652 automatic       char(32)                 level 2 in structure "dft" packed packed unaligned
                                                                                  dcl 1089 in procedure "cv_ttf" set ref 1359*
name                                   based           char(32)                 level 2 in structure "table_entry" packed packed
                                                                                  unaligned dcl 12-137 in procedure "cv_ttf" set ref
                                                                                  1408* 1573*
name_idx                        002410 automatic       fixed bin(17,0)          dcl 1044 set ref 2343* 2344* 2357 2364* 2365* 2378
                                                                                  2385* 2386* 2399 2406* 2407* 2417* 2418* 2428*
                                                                                  2429* 2438 2445* 2446* 2456* 2457* 2467* 2468*
                                                                                  2481 2488* 2489* 2502 2509* 2510* 2523 2530* 2531*
                                                                                  2544 2551* 2552* 2565 2572* 2573* 2586 6059 6071
                                                                                  6095 6107
name_to_test_for                002411 automatic       char(32)                 packed unaligned dcl 1045 set ref 1493* 1496 1782*
                                                                                  1785 1969* 1972 2342* 2344 2363* 2365 2384* 2386
                                                                                  2405* 2407 2416* 2418 2427* 2429 2444* 2446 2455*
                                                                                  2457 2466* 2468 2487* 2489 2508* 2510 2529* 2531
                                                                                  2550* 2552 2571* 2573
nat_lang                102            based           fixed bin(17,0)          array level 2 dcl 6-136 set ref 2324* 2562 2563
                                                                                  2565*
new_delay_table_ptr             002422 automatic       pointer                  initial dcl 1046 set ref 1046* 2955* 2956 2958 2964
next                                   based           fixed bin(18,0)          level 2 dcl 12-214 set ref 1522* 2999*
next_misc_offset                002424 automatic       fixed bin(18,0)          dcl 1047 set ref 1285* 1474* 1474 1476 1477 2910
                                                                                  2911 2912* 2912 2924* 2924 2955 2962 2963* 2963
                                                                                  3030 3031* 3031
next_offset                     002425 automatic       fixed bin(18,0)          dcl 1048 in procedure "cv_ttf" set ref 1421* 1434
                                                                                  1436* 1436 1437 1447 1453 1461 1465 1466* 1466
                                                                                  1471 1472 1477* 1477 1486 1487 1509* 1509 1512
                                                                                  1520 1522 1529* 1529 1534
next_offset                            parameter       fixed bin(18,0)          dcl 2161 in procedure "define_table" ref 2155 2178
                                                                                  2180
nl_nb                   175            based           fixed bin(17,0)          level 3 dcl 6-136 set ref 6394*
nl_seq                                 based           structure                level 2 in structure "special_chars" dcl 13-26
                                                                                  in procedure "cv_ttf"
nl_seq                                 based           structure                level 2 in structure "temp_special_table" dcl 1137
                                                                                  in procedure "cv_ttf" set ref 5202
nlx                             002426 automatic       fixed bin(17,0)          dcl 1049 set ref 2300* 2561* 2561 2563 2565 6394
non_restart_error               000210 internal static char(33)                 initial packed unaligned dcl 20-48 set ref 20-63
                                                                                  20-63 20-63 20-63
not_edited                      002427 automatic       fixed bin(17,0)          array dcl 1050 set ref 2652 5279 5280*
not_edited_escapes       55            based           structure                array level 2 dcl 13-26 set ref 2652*
nseq                     10            based           fixed bin(17,0)          level 2 dcl 16-12 set ref 2221* 2223 2224* 2241 2243
                                                                                  2243 2245
ntables                                based           fixed bin(17,0)          level 2 dcl 12-114 set ref 1366* 1367 1663 2120 2207
                                                                                  2208* 2209 2886
null                                                   builtin function         dcl 1177 in procedure "cv_ttf" ref 977 988 1010 1015
                                                                                  1016 1019 1032 1033 1046 1054 1056 1068 1070 1071
                                                                                  1072 1074 1076 1077 1078 1079 1080 1081 1082 1085
                                                                                  1133 1196 1197 1198 1283 1314 1373 1644 1647 1651
                                                                                  1655 1657 1663 1700 1700 1832 1843 1855 1866 2084
                                                                                  2110 2167 2190 2284 21-37 21-39 21-42 21-45
null                                                   builtin function         dcl 17-92 in procedure "SEMANTIC_ANALYSIS" ref 19-64
                                                                                  19-73 19-79 19-86
null                                                   builtin function         dcl 23-21 in procedure "NEXT_STMT" ref 23-27 23-35
null                                                   builtin function         dcl 20-40 in procedure "PUSH" ref 20-60 20-60 20-60
                                                                                  20-60
null                                                   builtin function         dcl 22-148 in procedure "ERROR" ref 22-161 22-161
                                                                                  22-166 22-168
num_0nums                       004427 automatic       fixed bin(17,0)          dcl 1051 set ref 1253* 1610 1610* 1610 2034* 2034
num_digits                0(06) 005120 automatic       fixed bin(2,0)           level 2 packed packed unsigned unaligned dcl 1161
                                                                                  set ref 5898* 5905* 5913* 5920*
off_sw                          004430 automatic       bit(1)                   packed unaligned dcl 1052 set ref 1801* 1805* 1831
                                                                                  1854
offset                   11            based           fixed bin(18,0)          array level 2 in structure "table_names" dcl 1119
                                                                                  in procedure "cv_ttf" set ref 1401 1410 1412* 1425
                                                                                  1429 1434* 1450 1454 1465* 1690 1749 2178* 2863*
offset                  110            based           fixed bin(18,0)          level 3 in structure "tte" dcl 12-59 in procedure
                                                                                  "cv_ttf" set ref 2130 2130*
offset                    0(09) 005120 automatic       fixed bin(8,0)           level 2 in structure "temp_numeric_encoding" packed
                                                                                  packed unaligned dcl 1161 in procedure "cv_ttf"
                                                                                  set ref 5974* 5981* 5988
offset                                 based           fixed bin(18,0)          level 2 in structure "target" dcl 2668 in procedure
                                                                                  "copy_string" set ref 2680*
offset                  112            based           fixed bin(18,0)          level 3 in structure "tte" dcl 12-59 in procedure
                                                                                  "cv_ttf" set ref 2132 2132*
offset                                 based           fixed bin(18,0)          level 2 in structure "target" dcl 2797 in procedure
                                                                                  "store_string" set ref 2820*
offset_is_0               0(03) 005120 automatic       bit(1)                   level 3 packed packed unaligned dcl 1161 set ref
                                                                                  5988* 5993
old_type                131            based           fixed bin(17,0)          level 2 in structure "tte" dcl 12-59 in procedure
                                                                                  "cv_ttf" set ref 4895*
old_type                131     004652 automatic       fixed bin(17,0)          level 2 in structure "dft" dcl 1089 in procedure
                                                                                  "cv_ttf" set ref 4429*
out_sus_set                     004431 automatic       bit(1)                   packed unaligned dcl 1053 set ref 2117* 4209* 4228*
                                                                                  4243 4262 4281 4662* 4681* 4696 4715 4734
output_block_acknowledge
                        130(04) 004652 automatic       bit(1)                   level 3 in structure "dft" packed packed unaligned
                                                                                  dcl 1089 in procedure "cv_ttf" set ref 4205 4208*
                                                                                  4224 4227* 4246* 4265* 4284*
output_block_acknowledge
                        130(04)        based           bit(1)                   level 3 in structure "tte" packed packed unaligned
                                                                                  dcl 12-59 in procedure "cv_ttf" set ref 1585 4661*
                                                                                  4680* 4699* 4718* 4737*
output_buffer_size      136            based           fixed bin(17,0)          level 2 in structure "tte" dcl 12-59 in procedure
                                                                                  "cv_ttf" set ref 1585 4698*
output_buffer_size      136     004652 automatic       fixed bin(17,0)          level 2 in structure "dft" dcl 1089 in procedure
                                                                                  "cv_ttf" set ref 4245*
output_conversion_rp    121     004652 automatic       fixed bin(18,0)          level 3 in structure "dft" dcl 1089 in procedure
                                                                                  "cv_ttf" set ref 4334* 4340*
output_conversion_rp    121            based           fixed bin(18,0)          level 3 in structure "tte" dcl 12-59 in procedure
                                                                                  "cv_ttf" set ref 1551* 1555 1560 1562 4787* 4793*
output_resume_ack       135(27)        based           char(1)                  level 3 in structure "tte" packed packed unaligned
                                                                                  dcl 12-59 in procedure "cv_ttf" set ref 1585 1590
                                                                                  1590 4679* 4736*
output_resume_ack       135(27) 004652 automatic       char(1)                  level 3 in structure "dft" packed packed unaligned
                                                                                  dcl 1089 in procedure "cv_ttf" set ref 4226* 4283*
output_suspend_etb      135(18) 004652 automatic       char(1)                  level 3 in structure "dft" packed packed unaligned
                                                                                  dcl 1089 in procedure "cv_ttf" set ref 4207* 4264*
output_suspend_etb      135(18)        based           char(1)                  level 3 in structure "tte" packed packed unaligned
                                                                                  dcl 12-59 in procedure "cv_ttf" set ref 1585 1590
                                                                                  1590 4660* 4717*
output_translation_rp
                        117     004652 automatic       fixed bin(18,0)          level 3 in structure "dft" dcl 1089 in procedure
                                                                                  "cv_ttf" set ref 4360* 4366*
output_translation_rp
                        117            based           fixed bin(18,0)          level 3 in structure "tte" dcl 12-59 in procedure
                                                                                  "cv_ttf" set ref 1549* 4813* 4819*
p                               004432 automatic       pointer                  initial dcl 1054 in procedure "cv_ttf" set ref 1054*
                                                                                  4483* 4490* 4497* 5037 5042* 5084* 5202* 5209*
                                                                                  5216* 5223* 5230* 5237* 5244* 5251* 5258* 5265*
                                                                                  5272* 5312* 5342 5354 5360 6438* 6445* 6464
p                               006166 automatic       pointer                  dcl 3028 in procedure "get_misc_space" set ref 3030*
                                                                                  3032
p                               005770 automatic       pointer                  dcl 2622 in procedure "finish_dsatm_device" set ref
                                                                                  2624* 2625 2626 2627
p                               006222 automatic       pointer                  dcl 3062 in procedure "perform_misc_relocs" set ref
                                                                                  3067* 3068 3068 3070 3071 3073* 3074
p                               005500 automatic       pointer                  dcl 2238 in procedure "finish_video_table" set ref
                                                                                  2243* 2244 2245 2246
pa_name                         007714 constant        char(3)                  initial array packed unaligned dcl 12-229 set ref
                                                                                  6476*
pa_type                         004434 automatic       fixed bin(17,0)          dcl 1055 set ref 6440* 6447* 6476
page_length              45            based           fixed bin(8,0)           level 2 unsigned dcl 6-136 set ref 1856* 1867* 2296*
                                                                                  2318*
page_overflow            47            based           fixed bin(17,0)          level 2 dcl 6-136 set ref 2320* 6107*
parm1                                  parameter       char                     packed unaligned dcl 1698 set ref 1695 1705 1707*
parm2                                  parameter       char                     packed unaligned dcl 1699 set ref 1695 1705 1707*
parm_rejected           177            based           structure                level 2 dcl 6-136 set ref 2333*
pathname_                       000270 constant        entry                    external dcl 935 ref 1294 1294 1301 1301
present                                based           bit(1)                   level 3 packed packed unaligned dcl 16-37 set ref
                                                                                  2261* 2269*
prev_ptr                        004436 automatic       pointer                  initial dcl 1056 set ref 1056* 1522 1531*
print_preaccess_message
                        130(01)        based           bit(1)                   level 3 in structure "tte" packed packed unaligned
                                                                                  dcl 12-59 in procedure "cv_ttf" set ref 4760
print_preaccess_message
                        130(01) 004652 automatic       bit(1)                   level 3 in structure "dft" packed packed unaligned
                                                                                  dcl 1089 in procedure "cv_ttf" set ref 4307
printer_off              34            based           structure                level 2 dcl 1137 set ref 5251
printer_on               30            based           structure                level 2 dcl 1137 set ref 5244
proc_group_id                          based           char(32)                 level 3 dcl 12-34 set ref 1348*
prog_name                       011146 constant        char(6)                  initial packed unaligned dcl 971 set ref 1211* 1216*
                                                                                  1227* 1233* 1258* 1265* 1274* 1294* 1301* 1320*
                                                                                  1326* 1329* 1372* 1375* 1396* 1610* 1617* 1625*
                                                                                  1659*
protocol                140            based           fixed bin(17,0)          level 2 in structure "tte" dcl 12-59 in procedure
                                                                                  "cv_ttf" set ref 4852* 4858*
protocol                140     004652 automatic       fixed bin(17,0)          level 2 in structure "dft" dcl 1089 in procedure
                                                                                  "cv_ttf" set ref 1361*
protocol_names                  007737 constant        char(32)                 initial array packed unaligned dcl 10-21 ref 2144
                                                                                  2145
protocol_values                 007734 constant        fixed bin(17,0)          initial array dcl 10-26 ref 2145
ptr                                                    builtin function         dcl 1177 ref 1410 1429 1437 1453 1454 1461 1472 1487
                                                                                  1520 1562 1563 2180 2213 2886 2911 2948 2955 3030
                                                                                  3073 3116 3117
quoted_string            11(01)        based           bit(1)                   level 4 packed packed unaligned dcl 18-68 ref 2027
                                                                                  2609 19-92 19-104 19-113 19-118 19-124
rank                                                   builtin function         dcl 1177 ref 1880 2771 2771
rc_nb                   170            based           fixed bin(17,0)          level 3 dcl 6-136 set ref 6263*
rcx                             004440 automatic       fixed bin(17,0)          dcl 1057 set ref 2300* 2395* 2395 2397 2399 6263
real_class               13            based           fixed bin(17,0)          array level 3 dcl 6-136 set ref 2310* 2396 2397
                                                                                  2399*
real_dpp                 12            based           structure                level 2 dcl 6-136
real_model               33            based           varying char(12)         level 3 dcl 6-136 set ref 2311*
real_name                       004441 automatic       char(32)                 packed unaligned dcl 1058 set ref 2877* 2880
red_ribbon_shift         40            based           structure                level 2 dcl 1137 set ref 5258
rel                                                    builtin function         dcl 1177 ref 1412 1421 1463 2206 2244 2625 2680 2820
                                                                                  3071
release_temp_segments_          000272 constant        entry                    external dcl 936 ref 1659
reloc_abort                     006212 stack reference condition                dcl 3060 ref 3076
rep_depth                       004451 automatic       fixed bin(17,0)          dcl 1059 set ref 2693 2707* 2707 2708 2715 2726 2733
                                                                                  2738 2739 2741 2747* 2747 2806 5049*
rep_error                       004452 automatic       bit(1)                   packed unaligned dcl 1060 set ref 2090 2696* 2703*
                                                                                  2729* 5050*
rep_factor                      004454 automatic       fixed bin(17,0)          array dcl 1061 set ref 2708* 2733 2741
rep_item               2002            based           varying char(2048)       level 2 dcl 1163 set ref 2739* 2742
rep_length                      004456 automatic       fixed bin(17,0)          dcl 1062 set ref 2738* 2739 2742 2743
rep_start                       004460 automatic       fixed bin(17,0)          array dcl 1063 set ref 2715* 2738 2739
rep_used                        004462 automatic       bit(1)                   packed unaligned dcl 1064 set ref 2712* 2816 2824
                                                                                  5050*
repetitive_parm_nb      166            based           structure                level 2 dcl 6-136 set ref 2332*
rest_of_ttt                            based           fixed bin(17,0)          array level 2 dcl 12-34 set ref 1420
right                    21            based           structure                array level 3 dcl 8-7 set ref 5437 5437
rp                                     parameter       fixed bin(18,0)          dcl 1687 in procedure "set_table_offset" set ref
                                                                                  1683 1689 1690* 1690
rp                                     parameter       fixed bin(18,0)          dcl 1673 in procedure "add_increment" set ref 1669
                                                                                  1675 1676* 1676
rtrim                                                  builtin function         dcl 1177 ref 2145
sc_nb                   167            based           fixed bin(17,0)          level 3 dcl 6-136 set ref 6241*
screen_height             1            based           fixed bin(17,0)          level 2 dcl 16-12 set ref 5803*
screen_line_length        2            based           fixed bin(17,0)          level 2 dcl 16-12 set ref 5810*
scroll_count              3            based           fixed bin(17,0)          level 2 dcl 16-12 set ref 5817*
scx                             004463 automatic       fixed bin(17,0)          dcl 1065 set ref 2300* 2374* 2374 2376 2378 6241
sdp_class                 6            based           fixed bin(17,0)          array level 3 dcl 6-136 set ref 2308* 2375 2376
                                                                                  2378*
sdp_dpp                   5            based           structure                level 2 dcl 6-136
search                                                 builtin function         dcl 17-92 ref 19-92
sec_dialog              127(03)        based           bit(1)                   array level 5 packed packed unaligned dcl 6-136 set
                                                                                  ref 2606*
seq_index                 1(24)        based           fixed bin(12,0)          level 2 packed packed unsigned unaligned dcl 16-37
                                                                                  set ref 2273* 2275
seq_len                  14            based           fixed bin(21,0)          level 4 in structure "fkey_table" dcl 12-177
                                                                                  in procedure "cv_ttf" set ref 1464*
seq_len                   4            based           fixed bin(21,0)          level 3 in structure "function_key_data" dcl 8-7
                                                                                  in procedure "cv_ttf" set ref 1462 1462 1464 1466
                                                                                  1466 3118* 3121 3121 3123 3123
seq_offset               12            based           fixed bin(18,0)          level 4 dcl 12-177 set ref 1463*
seq_p                           006244 automatic       pointer                  dcl 3103 set ref 3117* 3121 3122
seq_ptr                   2            based           pointer                  level 3 dcl 8-7 set ref 1460 3119* 3121 3122* 3123
seqs                                   based           char(4096)               level 2 dcl 1115 set ref 2226* 2241 2275* 3096* 3119
                                                                                  3149*
seqs_index                      004464 automatic       fixed bin(17,0)          dcl 1066 set ref 2227* 2240 2241 2241 2273 2274*
                                                                                  2274 3095* 3118 3147 3148* 3148
sequence                  2            based           structure                level 2 in structure "function_key_data" dcl 8-7
                                                                                  in procedure "cv_ttf" set ref 3091*
sequence                 12            based           structure                level 3 in structure "fkey_table" dcl 12-177
                                                                                  in procedure "cv_ttf"
sequence_index                         based           fixed bin(12,0)          array level 2 packed packed unsigned unaligned
                                                                                  dcl 1135 set ref 3147* 3149
sequence_length           0(12)        based           fixed bin(6,0)           level 2 in structure "key_info" packed packed
                                                                                  unsigned unaligned dcl 8-28 in procedure "cv_ttf"
                                                                                  ref 3113
sequence_length           0(12)        based           fixed bin(6,0)           array level 2 in structure "temp_key_info" packed
                                                                                  packed unsigned unaligned dcl 1135 in procedure
                                                                                  "cv_ttf" set ref 3143 3146* 3148 3149 3149
sequences                11            based           structure                array level 2 dcl 16-12 set ref 2258
severity                        000000 constant        fixed bin(17,0)          initial array level 2 packed packed unaligned
                                                                                  dcl 3178 ref 1707 1707 1713 22-153 22-154 22-168
                                                                                  22-172
shareability             42            based           fixed bin(17,0)          level 3 dcl 6-136 set ref 2315* 6071*
size                                                   builtin function         dcl 1177 ref 1509 2192 2205 2205
size_of_ttt                     004465 automatic       fixed bin(18,0)          dcl 1067 set ref 1534* 1618* 1619* 1621 1622
sourcep                         004466 automatic       pointer                  initial dcl 1068 set ref 1068* 1410* 1411 1429* 1432
                                                                                  1435 1460* 1462
spec_offset                     004470 automatic       fixed bin(18,0)          dcl 1069 set ref 1282* 2635* 2659* 2659
special_chars                          based           structure                level 1 dcl 13-26 in procedure "cv_ttf" set ref 1432
                                                                                  1435 2658
special_chars            13            based           structure                level 3 in structure "special_table" dcl 12-143
                                                                                  in procedure "cv_ttf" set ref 1432* 1564
special_rp              122            based           fixed bin(18,0)          level 3 in structure "tte" dcl 12-59 in procedure
                                                                                  "cv_ttf" set ref 1552* 1555 1563 4826* 4832*
special_rp              122     004652 automatic       fixed bin(18,0)          level 3 in structure "dft" dcl 1089 in procedure
                                                                                  "cv_ttf" set ref 4373* 4379*
special_table                          based           structure                level 1 dcl 12-143
special_tables_ptr              004472 automatic       pointer                  initial dcl 1070 set ref 1070* 1335* 1429 2635*
specialp                        004474 automatic       pointer                  initial dcl 1071 set ref 1071* 1420* 1421 1428 1430
                                                                                  1431 1432 1437* 1563* 1564* 1564 1573
stc_available           165            based           bit(1)                   level 2 dcl 6-136 set ref 2331* 6206
stmt_ptr                        000100 automatic       pointer                  initial dcl 1700 set ref 1700* 1702* 1707*
stmtp                           004476 automatic       pointer                  initial dcl 1072 set ref 1072* 1387*
str                                    based           char                     level 3 in structure "special_chars" packed packed
                                                                                  unaligned dcl 13-26 in procedure "cv_ttf" set ref
                                                                                  2656*
str                       0(09) 005013 automatic       char(128)                level 2 in structure "input_escapes" packed packed
                                                                                  unaligned dcl 1091 in procedure "cv_ttf" set ref
                                                                                  2655 5383
str                                    based           char                     level 3 in structure "special_chars" packed packed
                                                                                  unaligned dcl 13-26 in procedure "cv_ttf" set ref
                                                                                  2655*
str                       0(09) 005054 automatic       char(128)                level 2 in structure "input_results" packed packed
                                                                                  unaligned dcl 1095 in procedure "cv_ttf" set ref
                                                                                  2656 5398
string                  127(01)        based           bit(1)                   array level 5 packed packed unaligned dcl 6-136 set
                                                                                  ref 2610*
string_value            130            based           char(2)                  array level 4 packed packed unaligned dcl 6-136 set
                                                                                  ref 2611*
stringl                         006074 automatic       fixed bin(17,0)          dcl 2803 in procedure "store_string" set ref 2815*
                                                                                  2816* 2816 2817* 2822 2830
stringl                         006020 automatic       fixed bin(17,0)          dcl 2673 in procedure "copy_string" set ref 2677*
                                                                                  2678* 2682 2683
stringp                         006076 automatic       pointer                  dcl 2804 in procedure "store_string" set ref 2817*
                                                                                  2820 2822 2824 2829 2830
stringp                         006016 automatic       pointer                  dcl 2672 in procedure "copy_string" set ref 2678*
                                                                                  2680 2682 2683
substr                                                 builtin function         dcl 1177 in procedure "cv_ttf" set ref 1352 1381
                                                                                  1381 1799 1800 1827 1837 1837 1837 1839 1839 1850
                                                                                  1860 1860 1860 1862 1862 2042 2043 2044 2241 2275*
                                                                                  2275 2739 2742* 2770 2822* 2822 2830* 2830 3149*
                                                                                  3149
substr                                                 builtin function         dcl 17-92 in procedure "SEMANTIC_ANALYSIS" set ref
                                                                                  19-92 19-126 5134* 5645* 5991 5991 5993 5993
suffixed_name_$new_suffix       000274 constant        entry                    external dcl 937 ref 1240
supplied_ename                  004500 automatic       char(32)                 packed unaligned dcl 1073 set ref 1201* 1225 1231*
                                                                                  1240* 1278 1288 1291* 1294* 1294* 1296
tab_seq                  14            based           structure                level 2 dcl 1137 set ref 5223
table                  2000            based           fixed bin(71,0)          level 2 in structure "extended_tables_work" dcl 1115
                                                                                  in procedure "cv_ttf" set ref 2220 2286 3087
table                    11            based           structure                level 2 in structure "table_entry" dcl 12-137
                                                                                  in procedure "cv_ttf" set ref 1411*
table                    11            based           structure                level 2 in structure "special_table" dcl 12-143
                                                                                  in procedure "cv_ttf"
table                    14            based           char(4)                  level 3 in structure "ttt" dcl 12-34 in procedure
                                                                                  "cv_ttf" set ref 1351*
table_entry                            based           structure                level 1 dcl 12-137
table_names                            based           structure                array level 1 dcl 1119
table_names_ptr                 004510 automatic       pointer                  initial dcl 1074 set ref 1074* 1338* 1401 1401 1404
                                                                                  1404 1408 1409 1410 1412 1425 1425 1428 1429 1434
                                                                                  1450 1450 1454 1455 1465 1690 1749 1749 2163 2166
                                                                                  2174 2175 2178 2644 2647 2844 2844 2847 2861 2862
                                                                                  2863
table_p                         006242 automatic       pointer                  dcl 3102 set ref 3116* 3120
table_size                      004512 automatic       fixed bin(18,0)          dcl 1075 set ref 1435* 1436
table_type                             parameter       fixed bin(17,0)          dcl 2841 in procedure "set_table" ref 2838 2844 2862
table_type                             parameter       fixed bin(17,0)          dcl 2159 in procedure "define_table" ref 2155 2163
                                                                                  2175
table_type                             parameter       fixed bin(17,0)          dcl 2187 in procedure "define_ct_table" set ref 2185
                                                                                  2189*
table_types                     007717 constant        char(12)                 initial array packed unaligned dcl 12-226 set ref
                                                                                  2166* 2847*
tablep                          005150 automatic       pointer                  dcl 12-135 set ref 1407* 1408 1409 1411 1412 1562*
                                                                                  1566 1568 1569 1569 1573 2084 2167* 2180* 2190
                                                                                  2194 2195 2196* 2196 2644 2647 2647 2651 2652 2653
                                                                                  2654 2655 2656 2658 3122 5176 5178 5202 5209 5216
                                                                                  5223 5230 5237 5244 5251 5258 5265 5272
tables                  116            based           structure                level 2 in structure "tte" dcl 12-59 in procedure
                                                                                  "cv_ttf" set ref 2114*
tables                  116     004652 automatic       structure                level 2 in structure "dft" dcl 1089 in procedure
                                                                                  "cv_ttf"
tables                                 based           structure                array level 2 in structure "ttt" dcl 12-34
                                                                                  in procedure "cv_ttf" set ref 1407
tables_ptr                      004514 automatic       pointer                  initial dcl 1076 set ref 1076* 1334* 1410 2189*
tables_rp                 1            based           fixed bin(18,0)          array level 2 dcl 12-114 set ref 1367* 2210* 2244*
                                                                                  2625* 4399* 4414* 4866* 4881*
target                                 based           structure                level 1 dcl 2797 in procedure "store_string"
target                                 parameter       fixed bin(18,0)          dcl 2840 in procedure "set_table" set ref 2838 2848*
                                                                                  2853* 2864*
target                                 based           structure                level 1 dcl 2668 in procedure "copy_string"
target_string                          based           char                     packed unaligned dcl 2801 in procedure
                                                                                  "store_string" set ref 2822* 2830*
target_string                          based           char                     dcl 2674 in procedure "copy_string" set ref 2682*
target_string_array                    based           char(1)                  array packed unaligned dcl 2675 in procedure
                                                                                  "copy_string" set ref 2683
target_string_array                    based           char(1)                  array packed unaligned dcl 2802 in procedure
                                                                                  "store_string" set ref 2824 2829
targetp                         004516 automatic       pointer                  initial dcl 1077 in procedure "cv_ttf" set ref 1077*
                                                                                  1461* 1462 1463 1466 1472* 1476 1520* 1526 1531
targetp                                parameter       pointer                  dcl 2667 in procedure "copy_string" ref 2665 2679
                                                                                  2680
targetp                                parameter       pointer                  dcl 2795 in procedure "store_string" ref 2791 2819
                                                                                  2820
temp_dftt                              based           structure                level 1 unaligned dcl 1126
temp_dftte                1            based           structure                array level 2 unaligned dcl 1126
temp_dfttp                      004520 automatic       pointer                  initial dcl 1078 set ref 1078* 1339* 1490 1491 1493
                                                                                  1500 3009 3009 5511 5517 5533 5539 5555 5561 5580
temp_key_index                  005115 automatic       fixed bin(17,0)          dcl 1132 set ref 2097 3134* 3143 3143 3146 3147 3148
                                                                                  3149 3149 3149 3154* 3154
temp_key_info                          based           structure                array level 1 dcl 1135
temp_key_infop                  005116 automatic       pointer                  initial dcl 1133 set ref 1133* 3133* 3143 3146 3147
                                                                                  3148 3149 3149 3149
temp_numeric_encoding           005120 automatic       structure                level 1 packed packed unaligned dcl 1161 set ref
                                                                                  5885* 5991 5991 5993 5993
temp_ptr                        004524 automatic       pointer                  initial array dcl 1080 set ref 1080* 1196* 1326*
                                                                                  1334 1335 1336 1337 1338 1339 1340 1341 1342 1343
                                                                                  1659*
temp_rp                         006224 automatic       fixed bin(18,0)          dcl 3064 set ref 3071* 3072* 3073
temp_special_table                     based           structure                level 1 dcl 1137
temp_strings                           based           structure                level 1 dcl 1163
temp_strings_ptr                004522 automatic       pointer                  initial dcl 1079 set ref 1079* 1343* 2260 2260 2268
                                                                                  2272 2275 2713 2713 2714 2714 2715 2735 2735 2736
                                                                                  2736 2738 2739 2739 2742 2742 2742 2743 2743 2756
                                                                                  2756 2757 2757 2758 2758 2759 2759 2812 2812 2813
                                                                                  2813 2815 2816 2819 2822 2822 2822 2824 2829 2829
                                                                                  2830 2830 2830 2830 3135 3135 3141 3146 3149 3155
                                                                                  3155 5047 5047 5049 5049
temp_table                             based           fixed bin(8,0)           array packed unaligned dcl 1108 set ref 5178*
temp_ttep                       004550 automatic       pointer                  initial dcl 1081 set ref 1081* 1971* 1972 2876* 2879
                                                                                  2886
template                               based           structure                level 1 packed packed unaligned dcl 12-196
tempp                           004552 automatic       pointer                  initial dcl 1082 set ref 1082* 1196* 1372* 1373
                                                                                  1387* 1655 1655* 1657*
term_type_index           3            based           fixed bin(17,0)          array level 4 in structure "temp_dftt" dcl 1126
                                                                                  in procedure "cv_ttf" set ref 1491 5555*
term_type_index           3            based           fixed bin(17,0)          array level 3 in structure "dftt" dcl 12-127
                                                                                  in procedure "cv_ttf" set ref 1502*
term_type_index           1            based           fixed bin(17,0)          level 2 in structure "answerback_entry" dcl 12-214
                                                                                  in procedure "cv_ttf" set ref 2999* 5697*
terminal_type           120            based           varying char(12)         level 2 dcl 6-136 set ref 2327*
terminate_file_                 000276 constant        entry                    external dcl 938 ref 1622 1644 1653
test_value                      004554 automatic       char(8)                  packed unaligned dcl 1083 set ref 1800* 1804* 1809
                                                                                  1814 1821 1827 1837 1837 1837 1839 1839 1850 1860
                                                                                  1860 1860 1862 1862
time                                   parameter       fixed bin(35,0)          dcl 2779 ref 2777 2782 2786
token                                  based           structure                level 1 dcl 18-68
token_ptr                       000102 automatic       pointer                  initial dcl 1700 set ref 1700* 1703* 1707*
token_value                            based           char                     packed unaligned dcl 18-68 set ref 1727 1738* 1744*
                                                                                  1749 1752* 1772* 1778* 1782 1787* 1799 1800 1804
                                                                                  1818 1824 1824 1888* 1903* 1933 1944* 1969 1996
                                                                                  2012* 2027 2027 2031 2038 2038 2038 2042 2043 2044
                                                                                  2049 2116 2145 2166* 2174 2179 2342 2363 2384 2405
                                                                                  2416 2427 2444 2455 2466 2487 2508 2529 2550 2571
                                                                                  2601 2601 2606 2606 2611 2682 2702* 2770 2844
                                                                                  2847* 2861 19-92 19-92 19-106* 19-113 19-128 5190*
                                                                                  5455 5561 5645 6493 6501
total_ttt_size           45            based           fixed bin(18,0)          level 2 dcl 12-34 set ref 1534*
trans_dpp                37            based           structure                level 2 dcl 6-136
translate                                              builtin function         dcl 1177 ref 1493 1782 1969 2049 2116 2342 2363 2384
                                                                                  2405 2416 2427 2444 2455 2466 2487 2508 2529 2550
                                                                                  2571
translation_failure                    constant        fixed bin(17,0)          initial dcl 972 ref 1396 1615
translator_temp_$get_segment    000300 constant        entry                    external dcl 939 ref 1372
translator_temp_$release_all_segments
                                000302 constant        entry                    external dcl 940 ref 1655
tt_entries               52            based           structure                array level 2 dcl 12-34 set ref 1357 1495 1546 1784
                                                                                  1971 2113 2876
tte                                    based           structure                level 1 dcl 12-59 set ref 1358 2115* 2879* 2879
ttep                            005142 automatic       pointer                  dcl 12-57 set ref 1357* 1358 1495* 1496 1546* 1548
                                                                                  1549 1550 1551 1552 1553 1555 1555 1555 1560 1562
                                                                                  1563 1573 1580 1580 1580 1585 1585 1585 1585 1585
                                                                                  1590 1590 1590 1590 1590 1594 1594 1594 1594 1594
                                                                                  1594 1600 1784* 1785 2113* 2114 2115 2116 2130
                                                                                  2130 2132 2132 2134 2134 2136 2136 2204 2206 2213
                                                                                  2877 2878 2879 2880 2881 2882 2882 2883 2884 2902
                                                                                  2910 2914 2914 2931 2937 2948 2950 2950 2962 2967
                                                                                  4386 4392 4483 4490 4497 4564 4578 4592 4594 4608
                                                                                  4622 4636 4643 4644 4660 4661 4679 4680 4698 4699
                                                                                  4717 4718 4736 4737 4753 4760 4767 4774 4780 4787
                                                                                  4793 4800 4806 4813 4819 4826 4832 4839 4845 4852
                                                                                  4858 4895 5158 6534
ttf_ename                       004556 automatic       char(32)                 packed unaligned dcl 1084 set ref 1201* 1237* 1287*
                                                                                  1288 1294* 1296* 1301* 1301*
ttfp                            004566 automatic       pointer                  initial dcl 1085 set ref 1085* 1196* 1287* 1291*
                                                                                  1387* 1644 1644*
ttt                                    based           structure                level 1 dcl 12-34
ttt_ename                       004570 automatic       char(32)                 packed unaligned dcl 1086 set ref 1201* 1240* 1312*
                                                                                  1320*
tttp                            005140 automatic       pointer                  dcl 12-32 set ref 1196* 1312* 1314 1317* 1348 1349
                                                                                  1350 1351 1352 1352 1353 1357 1407 1416 1420 1437
                                                                                  1442 1447 1453 1461 1469 1472 1481 1486 1487 1494
                                                                                  1495 1500 1512 1514 1520 1534 1545 1546 1562 1563
                                                                                  1603 1605 1622* 1647 1650* 1651* 1653* 1783 1784
                                                                                  1970 1971 2112 2112 2113 2113 2876 3068 3073 6438
                                                                                  6445
tty_numeric_encoding                   based           structure                level 1 packed packed unaligned dcl 16-69
tty_video_seq                          based           structure                level 1 dcl 16-37 set ref 2259*
tty_video_table                        based           structure                level 1 dcl 16-12 set ref 2223* 2243 2243 2245* 2245
tty_video_tables_version_1             constant        fixed bin(17,0)          initial dcl 16-7 ref 16-12 2225
ttyvseqp                        005166 automatic       pointer                  dcl 16-35 set ref 2258* 2259 2261 2269 2272 2273
                                                                                  2274 2275 2275 2275 2781 2786 5869 5869 5870 5994
                                                                                  5995
ttyvtblp                        005164 automatic       pointer                  dcl 16-9 set ref 2220* 2221 2222 2223 2224 2225 2240
                                                                                  2241 2243 2243 2245 2246* 2258 5803 5810 5817
type                     10            based           fixed bin(17,0)          array level 2 in structure "table_names" dcl 1119
                                                                                  in procedure "cv_ttf" set ref 1404 1404 1409 1425
                                                                                  1450 2163 2166 2175* 2844 2847 2862*
type                     10            based           fixed bin(17,0)          level 2 in structure "table_entry" dcl 12-137
                                                                                  in procedure "cv_ttf" set ref 1409*
type_map                 46            based           fixed bin(17,0)          level 2 dcl 12-34 set ref 1605 6438 6445
type_name                 4            based           char(32)                 array level 3 packed packed unaligned dcl 1126 set
                                                                                  ref 1493 1500* 5561*
unexp_char_index          1            based           fixed bin(17,0)          level 2 dcl 1163 set ref 2260* 2713 2714* 2714 2735
                                                                                  2736* 2736 2757 2759* 2759 2813* 2813 2816 2829
                                                                                  2830 2830 3135* 3155* 5047*
unexp_string                           based           char(2048)               packed unaligned dcl 1109 ref 2830
unexpanded             1002            based           fixed bin(8,0)           array level 2 packed packed unaligned dcl 1163 set
                                                                                  ref 2713 2735 2757* 2830 5049*
unspec                                                 builtin function         dcl 1177 set ref 1435 2027 2027 2038 2038 2114*
                                                                                  2207* 2223* 2259* 2330* 2332* 2333* 2658 2996
                                                                                  3091* 3092* 3168* 5885* 5991 5991 5993 5993
up                       15            based           structure                array level 3 dcl 8-7 set ref 5443 5443
value                                  based           fixed bin(8,0)           array level 2 in structure "cv_trans" packed packed
                                                                                  unaligned dcl 13-62 in procedure "cv_ttf" ref 1568
                                                                                  5176
value                    13            based           fixed bin(8,0)           array level 4 in structure "table_entry" packed
                                                                                  packed unaligned dcl 12-137 in procedure "cv_ttf"
                                                                                  set ref 1566 1569 1569
verify                                                 builtin function         dcl 1177 in procedure "cv_ttf" ref 1727
verify                                                 builtin function         dcl 17-92 in procedure "SEMANTIC_ANALYSIS" ref 19-92
version                                based           fixed bin(17,0)          level 2 in structure "cv_trans_struc" dcl 13-107
                                                                                  in procedure "cv_ttf" set ref 2194*
version                  37            based           fixed bin(17,0)          level 3 in structure "dsatm_device" dcl 6-136
                                                                                  in procedure "cv_ttf" set ref 2312*
version                   2            based           fixed bin(17,0)          array level 3 in structure "delay_table" dcl 12-202
                                                                                  in procedure "cv_ttf" set ref 2921*
version                  11            based           fixed bin(17,0)          level 3 in structure "special_table" dcl 12-143
                                                                                  in procedure "cv_ttf" set ref 1430*
version                                based           fixed bin(17,0)          initial level 2 in structure "tty_video_table"
                                                                                  dcl 16-12 in procedure "cv_ttf" set ref 2225*
version                  35            based           fixed bin(17,0)          level 2 in structure "ttt" dcl 12-34 in procedure
                                                                                  "cv_ttf" set ref 1353*
version                   5            based           fixed bin(17,0)          level 3 in structure "dsatm_device" dcl 6-136
                                                                                  in procedure "cv_ttf" set ref 2307*
version                                based           fixed bin(17,0)          level 2 in structure "function_key_data" dcl 8-7
                                                                                  in procedure "cv_ttf" set ref 1456 3094*
version                  10            based           fixed bin(17,0)          level 3 in structure "fkey_table" dcl 12-177
                                                                                  in procedure "cv_ttf" set ref 1456*
version                  12            based           fixed bin(17,0)          level 3 in structure "dsatm_device" dcl 6-136
                                                                                  in procedure "cv_ttf" set ref 2309*
video_chars                            based           char                     level 2 packed packed unaligned dcl 16-12 set ref
                                                                                  2241*
video_chars_len           5            based           fixed bin(21,0)          level 2 dcl 16-12 set ref 2222* 2223 2240* 2241 2243
                                                                                  2243 2245
vt_seq                   20            based           structure                level 2 dcl 1137 set ref 5230
w_dir                    15            based           char(64)                 level 3 dcl 12-34 set ref 1352* 1352
wdir                            004600 automatic       char(168)                packed unaligned dcl 1087 set ref 1311* 1312* 1352

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
AC_ATT1                                internal static fixed bin(17,0)          initial dcl 5-60
AC_ATT2                                internal static fixed bin(17,0)          initial dcl 5-61
AC_ATTD                                internal static fixed bin(17,0)          initial dcl 5-59
AI_BREAK                               internal static fixed bin(17,0)          initial dcl 5-67
AI_FCN_KEY                             internal static fixed bin(17,0)          initial dcl 5-66
AI_SEC_DIALOG                          internal static fixed bin(17,0)          initial dcl 5-68
AI_STRING                              internal static fixed bin(17,0)          initial dcl 5-65
ATTENTION_FCN_INFO_V1                  internal static char(8)                  initial packed unaligned dcl 5-71
AT_DESTRUCTIVE                         internal static fixed bin(17,0)          initial dcl 5-54
AT_NON_DESTRUCTIVE                     internal static fixed bin(17,0)          initial dcl 5-55
AU_ACKNOWLEDGMENT_UNIT                 internal static fixed bin(17,0)          initial dcl 6-443
AU_END_OF_INTERACTION_UNIT             internal static fixed bin(17,0)          initial dcl 6-440
AU_END_OF_QUARANTINE_UNIT              internal static fixed bin(17,0)          initial dcl 6-439
AU_END_OF_RECORD                       internal static fixed bin(17,0)          initial dcl 6-438
AU_END_OF_SESSION                      internal static fixed bin(17,0)          initial dcl 6-441
AU_REPORT_UNIT                         internal static fixed bin(17,0)          initial dcl 6-442
AU_RFU                                 internal static fixed bin(17,0)          initial dcl 6-445
AU_USER_DEFINED_UNIT                   internal static fixed bin(17,0)          initial dcl 6-444
A_ACCESS                               internal static bit(3)                   initial packed unaligned dcl 1-11
A_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 1-36
CAN_TYPE_OVERSTRIKE                    internal static fixed bin(17,0)          initial dcl 14-4
CAN_TYPE_REPLACE                       internal static fixed bin(17,0)          initial dcl 14-4
CA_NO_COMPRESSION                      internal static fixed bin(17,0)          initial dcl 6-311
CA_VALUE                               internal static fixed bin(8,0)           initial array unsigned dcl 6-316
CE_BINARY_8BITS                        internal static fixed bin(17,0)          initial dcl 6-256
CE_EBCDIC                              internal static fixed bin(17,0)          initial dcl 6-254
CE_ISO_7BITS                           internal static fixed bin(17,0)          initial dcl 6-252
CE_ISO_8BITS                           internal static fixed bin(17,0)          initial dcl 6-253
CE_TELETEX                             internal static fixed bin(17,0)          initial dcl 6-255
CE_VALUE                               internal static fixed bin(8,0)           initial array unsigned dcl 6-262
CF_ANY                                 internal static fixed bin(17,0)          initial dcl 6-480
CF_ELITE                               internal static fixed bin(17,0)          initial dcl 6-482
CF_ITALICS                             internal static fixed bin(17,0)          initial dcl 6-481
CF_PICA                                internal static fixed bin(17,0)          initial dcl 6-483
CF_VALUE                               internal static fixed bin(8,0)           initial array unsigned dcl 6-488
CP_NAME                                internal static char(12)                 initial array packed unaligned dcl 6-351
CP_NO_CONTROL                          internal static fixed bin(17,0)          initial dcl 6-349
CP_STANDARD                            internal static fixed bin(17,0)          initial dcl 6-348
CP_VALUE                               internal static bit(8)                   initial array packed unaligned dcl 6-354
CSS_UPPER_CASE                         internal static fixed bin(17,0)          initial dcl 6-292
CSS_UPPER_LOWER_CASE                   internal static fixed bin(17,0)          initial dcl 6-293
CSS_VALUE                              internal static fixed bin(8,0)           initial array unsigned dcl 6-298
CS_ASCII                               internal static fixed bin(17,0)          initial dcl 6-268
CS_FRENCH                              internal static fixed bin(17,0)          initial dcl 6-273
CS_GERMAN                              internal static fixed bin(17,0)          initial dcl 6-276
CS_GREEK                               internal static fixed bin(17,0)          initial dcl 6-274
CS_ISO                                 internal static fixed bin(17,0)          initial dcl 6-267
CS_NORWEGIAN_DANISH                    internal static fixed bin(17,0)          initial dcl 6-270
CS_PORTUGUESE                          internal static fixed bin(17,0)          initial dcl 6-272
CS_PSEUDO_GRAPHIC                      internal static fixed bin(17,0)          initial dcl 6-277
CS_SPANISH                             internal static fixed bin(17,0)          initial dcl 6-275
CS_SWEDISH_FINISH                      internal static fixed bin(17,0)          initial dcl 6-271
CS_UK                                  internal static fixed bin(17,0)          initial dcl 6-269
CS_VALUE                               internal static bit(8)                   initial array packed unaligned dcl 6-283
CV_TRANS_SIZE                          internal static fixed bin(17,0)          initial array dcl 13-129
DIR_ACCESS_MODE_NAMES                  internal static char(4)                  initial array packed unaligned dcl 1-33
DPP_REAL                               internal static fixed bin(17,0)          initial dcl 6-360
DPP_SDP                                internal static fixed bin(17,0)          initial dcl 6-359
DPP_TRANSPARENT                        internal static fixed bin(17,0)          initial dcl 6-361
DPP_VALUE                              internal static fixed bin(8,0)           initial array unsigned dcl 6-366
DSATM_NEG_INFO_V1                      internal static char(8)                  initial packed unaligned dcl 6-206
DSATM_SW_DEV_INFO_V1                   internal static char(8)                  initial packed unaligned dcl 6-243
DT_BADGE_READER                        internal static fixed bin(17,0)          initial dcl 6-409
DT_CARD_PUNCH                          internal static fixed bin(17,0)          initial dcl 6-413
DT_CARD_READER                         internal static fixed bin(17,0)          initial dcl 6-407
DT_CASSETTE                            internal static fixed bin(17,0)          initial dcl 6-411
DT_DISKETTE                            internal static fixed bin(17,0)          initial dcl 6-412
DT_DISPLAY                             internal static fixed bin(17,0)          initial dcl 6-402
DT_KEYBOARD                            internal static fixed bin(17,0)          initial dcl 6-403
DT_KEYBOARD_DISPLAY                    internal static fixed bin(17,0)          initial dcl 6-406
DT_KEYBOARD_PRINTER                    internal static fixed bin(17,0)          initial dcl 6-405
DT_PAPER_TAPE_PUNCH                    internal static fixed bin(17,0)          initial dcl 6-414
DT_PAPER_TAPE_READER                   internal static fixed bin(17,0)          initial dcl 6-408
DT_RFE                                 internal static fixed bin(17,0)          initial dcl 6-410
DT_RO_PRINTER                          internal static fixed bin(17,0)          initial dcl 6-404
DT_UNDEFINED                           internal static fixed bin(17,0)          initial dcl 6-401
DT_VALUE                               internal static fixed bin(8,0)           initial array unsigned dcl 6-422
EAL_DATA_ACK                           internal static fixed bin(17,0)          initial dcl 6-494
EAL_FCN_COMPLETE                       internal static fixed bin(17,0)          initial dcl 6-495
EAL_IO_TM                              internal static fixed bin(17,0)          initial dcl 6-493
EAL_NAME                               internal static char(12)                 initial array packed unaligned dcl 6-498
EAL_RFU                                internal static fixed bin(17,0)          initial dcl 6-496
EAL_VALUE                              internal static fixed bin(16,0)          initial array unsigned dcl 6-501
E_ACCESS                               internal static bit(3)                   initial packed unaligned dcl 1-11
E_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 1-36
FUNCTION_KEY_RP                        internal static fixed bin(17,0)          initial dcl 12-118
IA_ACCEPTOR                            internal static fixed bin(17,0)          initial dcl 6-339
IA_INITIATOR                           internal static fixed bin(17,0)          initial dcl 6-338
IA_NAME                                internal static char(12)                 initial array packed unaligned dcl 6-341
IA_VALUE                               internal static fixed bin(8,0)           initial array unsigned dcl 6-343
INPUT_CONVERT_BREAK                    internal static fixed bin(8,0)           initial packed unaligned dcl 13-135
INPUT_CONVERT_DISCARD                  internal static fixed bin(8,0)           initial packed unaligned dcl 13-135
INPUT_CONVERT_DSA_CR_PROCESSING        internal static fixed bin(8,0)           initial packed unaligned dcl 13-135
INPUT_CONVERT_ESCAPE                   internal static fixed bin(8,0)           initial packed unaligned dcl 13-135
INPUT_CONVERT_FORMFEED                 internal static fixed bin(8,0)           initial packed unaligned dcl 13-135
INPUT_CONVERT_ORDINARY                 internal static fixed bin(8,0)           initial packed unaligned dcl 13-135
INPUT_CONVERT_PRECEDENCE_DISCARD       internal static fixed bin(8,0)           initial packed unaligned dcl 13-135
KEY_CTRL                               internal static fixed bin(17,0)          initial dcl 8-22
KEY_SHIFT                              internal static fixed bin(17,0)          initial dcl 8-22
LINE_1050                              internal static fixed bin(17,0)          initial dcl 9-22
LINE_2741                              internal static fixed bin(17,0)          initial dcl 9-22
LINE_ARDS                              internal static fixed bin(17,0)          initial dcl 9-22
LINE_ASCII                             internal static fixed bin(17,0)          initial dcl 9-22
LINE_ASYNC1                            internal static fixed bin(17,0)          initial dcl 9-22
LINE_ASYNC2                            internal static fixed bin(17,0)          initial dcl 9-22
LINE_ASYNC3                            internal static fixed bin(17,0)          initial dcl 9-22
LINE_BSC                               internal static fixed bin(17,0)          initial dcl 9-22
LINE_COLTS                             internal static fixed bin(17,0)          initial dcl 9-22
LINE_DSA                               internal static fixed bin(17,0)          initial dcl 9-22
LINE_ETX                               internal static fixed bin(17,0)          initial dcl 9-22
LINE_G115                              internal static fixed bin(17,0)          initial dcl 9-22
LINE_HASP_OPR                          internal static fixed bin(17,0)          initial dcl 9-22
LINE_HDLC                              internal static fixed bin(17,0)          initial dcl 9-22
LINE_MC                                internal static fixed bin(17,0)          initial dcl 9-22
LINE_POLLED_VIP                        internal static fixed bin(17,0)          initial dcl 9-22
LINE_SYNC1                             internal static fixed bin(17,0)          initial dcl 9-22
LINE_SYNC2                             internal static fixed bin(17,0)          initial dcl 9-22
LINE_SYNC3                             internal static fixed bin(17,0)          initial dcl 9-22
LINE_SYNCH                             internal static fixed bin(17,0)          initial dcl 9-22
LINE_TELNET                            internal static fixed bin(17,0)          initial dcl 9-22
LINE_UNKNOWN                           internal static fixed bin(17,0)          initial dcl 9-22
LINE_VIP                               internal static fixed bin(17,0)          initial dcl 9-22
LINE_X25LAP                            internal static fixed bin(17,0)          initial dcl 9-22
LO_FOLDING                             internal static fixed bin(17,0)          initial dcl 6-458
LO_NO_FOLDING                          internal static fixed bin(17,0)          initial dcl 6-459
LO_TRUNCATION                          internal static fixed bin(17,0)          initial dcl 6-457
LO_VALUE                               internal static fixed bin(8,0)           initial array unsigned dcl 6-464
MOWSE_FANSI_PROTOCOL                   internal static fixed bin(17,0)          initial dcl 10-19
MOWSE_PROTOCOL                         internal static fixed bin(17,0)          initial dcl 10-18
MPX_MODES                              internal static bit(1)                   initial array packed unaligned dcl 15-40
M_ACCESS                               internal static bit(3)                   initial packed unaligned dcl 1-11
M_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 1-36
NL_FFS                                 internal static fixed bin(17,0)          initial dcl 6-303
NL_VALUE                               internal static fixed bin(8,0)           initial array unsigned dcl 6-307
NO_PROTOCOL                            internal static fixed bin(17,0)          initial dcl 10-17
NT_NAME                                internal static char(9)                  initial array packed unaligned dcl 6-529
NT_SWITCHED                            internal static fixed bin(17,0)          initial dcl 6-525
NT_VALUE                               internal static fixed bin(8,0)           initial array unsigned dcl 6-532
NT_X21                                 internal static fixed bin(17,0)          initial dcl 6-526
NT_X25                                 internal static fixed bin(17,0)          initial dcl 6-527
N_ACCESS                               internal static bit(3)                   initial packed unaligned dcl 1-11
N_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 1-36
N_TTY_BOOLEAN_MODES                    internal static fixed bin(17,0)          initial dcl 7-31
OUTPUT_CONVERT_BRS                     internal static fixed bin(8,0)           initial packed unaligned dcl 13-147
OUTPUT_CONVERT_BS                      internal static fixed bin(8,0)           initial packed unaligned dcl 13-147
OUTPUT_CONVERT_CR                      internal static fixed bin(8,0)           initial packed unaligned dcl 13-147
OUTPUT_CONVERT_DONT_SEND               internal static fixed bin(8,0)           initial packed unaligned dcl 13-147
OUTPUT_CONVERT_FF                      internal static fixed bin(8,0)           initial packed unaligned dcl 13-147
OUTPUT_CONVERT_FIRST_SPECIAL           internal static fixed bin(8,0)           initial packed unaligned dcl 13-147
OUTPUT_CONVERT_HT                      internal static fixed bin(8,0)           initial packed unaligned dcl 13-147
OUTPUT_CONVERT_NEWLINE                 internal static fixed bin(8,0)           initial packed unaligned dcl 13-147
OUTPUT_CONVERT_NOT_USED_13             internal static fixed bin(8,0)           initial packed unaligned dcl 13-147
OUTPUT_CONVERT_NOT_USED_14             internal static fixed bin(8,0)           initial packed unaligned dcl 13-147
OUTPUT_CONVERT_NOT_USED_15             internal static fixed bin(8,0)           initial packed unaligned dcl 13-147
OUTPUT_CONVERT_NOT_USED_16             internal static fixed bin(8,0)           initial packed unaligned dcl 13-147
OUTPUT_CONVERT_NO_MOTION               internal static fixed bin(8,0)           initial packed unaligned dcl 13-147
OUTPUT_CONVERT_OCTAL                   internal static fixed bin(8,0)           initial packed unaligned dcl 13-147
OUTPUT_CONVERT_ORDINARY                internal static fixed bin(8,0)           initial packed unaligned dcl 13-147
OUTPUT_CONVERT_PRECEDENCE_NO_MOTION    internal static fixed bin(8,0)           initial packed unaligned dcl 13-147
OUTPUT_CONVERT_RRS                     internal static fixed bin(8,0)           initial packed unaligned dcl 13-147
OUTPUT_CONVERT_VT                      internal static fixed bin(8,0)           initial packed unaligned dcl 13-147
PC_LEVEL_DSA300                        internal static bit(8)                   initial packed unaligned dcl 6-248
PN_NAME                                internal static char(9)                  initial array packed unaligned dcl 6-322
PN_TM                                  internal static fixed bin(17,0)          initial dcl 6-321
PN_VALUE                               internal static fixed bin(8,0)           initial array unsigned dcl 6-323
PO_CLEAR                               internal static fixed bin(17,0)          initial dcl 6-469
PO_NO_PAGING                           internal static fixed bin(17,0)          initial dcl 6-471
PO_SCROLL                              internal static fixed bin(17,0)          initial dcl 6-470
PO_TRUNCATION                          internal static fixed bin(17,0)          initial dcl 6-468
PO_VALUE                               internal static fixed bin(8,0)           initial array unsigned dcl 6-476
PV_NAME                                internal static char(12)                 initial array packed unaligned dcl 6-331
PV_TM_FULL_STC                         internal static fixed bin(17,0)          initial dcl 6-330
PV_TM_NO_STC                           internal static fixed bin(17,0)          initial dcl 6-329
PV_VALUE                               internal static fixed bin(17,0)          initial array dcl 6-333
Pcomment                               automatic       pointer                  dcl 18-20
RC_2780                                internal static fixed bin(17,0)          initial dcl 6-387
RC_2780_3780_RJE                       internal static fixed bin(17,0)          initial dcl 6-390
RC_327X                                internal static fixed bin(17,0)          initial dcl 6-383
RC_BATCH_RCI                           internal static fixed bin(17,0)          initial dcl 6-385
RC_TMMRB                               internal static fixed bin(17,0)          initial dcl 6-389
RC_TMMVU                               internal static fixed bin(17,0)          initial dcl 6-386
RC_TTY                                 internal static fixed bin(17,0)          initial dcl 6-384
RC_UNDEFINED                           internal static fixed bin(17,0)          initial dcl 6-380
RC_UNSPECIFIED                         internal static fixed bin(17,0)          initial dcl 6-388
RC_VALUE                               internal static fixed bin(8,0)           initial array unsigned dcl 6-396
RC_VIP77XX                             internal static fixed bin(17,0)          initial dcl 6-381
RC_VIP78XX                             internal static fixed bin(17,0)          initial dcl 6-382
REW_ACCESS                             internal static bit(3)                   initial packed unaligned dcl 1-11
REW_ACCESS_BIN                         internal static fixed bin(5,0)           initial dcl 1-36
RE_ACCESS                              internal static bit(3)                   initial packed unaligned dcl 1-11
RE_ACCESS_BIN                          internal static fixed bin(5,0)           initial dcl 1-36
RW_ACCESS                              internal static bit(3)                   initial packed unaligned dcl 1-11
RW_ACCESS_BIN                          internal static fixed bin(5,0)           initial dcl 1-36
R_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 1-36
SA_ACCESS                              internal static bit(3)                   initial packed unaligned dcl 1-11
SA_ACCESS_BIN                          internal static fixed bin(5,0)           initial dcl 1-36
SC_MANDATORY                           internal static fixed bin(17,0)          initial dcl 6-370
SC_VALUE                               internal static fixed bin(8,0)           initial array unsigned dcl 6-375
SEG_ACCESS_MODE_NAMES                  internal static char(4)                  initial array packed unaligned dcl 1-30
SH_DEDICATED                           internal static fixed bin(17,0)          initial dcl 6-427
SH_DEDICATED_OR_SHAREABLE              internal static fixed bin(17,0)          initial dcl 6-428
SH_EXCLUSIVELY_SHAREABLE               internal static fixed bin(17,0)          initial dcl 6-429
SH_VALUE                               internal static bit(2)                   initial array packed unaligned dcl 6-435
SLP_ASYNCHRONOUS                       internal static fixed bin(17,0)          initial dcl 6-505
SLP_BSC_MULTIPOINT                     internal static fixed bin(17,0)          initial dcl 6-509
SLP_BSC_POINT_TO_POINT                 internal static fixed bin(17,0)          initial dcl 6-510
SLP_HDLC_MULTIPOINT                    internal static fixed bin(17,0)          initial dcl 6-512
SLP_HDLC_POINT_TO_POINT                internal static fixed bin(17,0)          initial dcl 6-513
SLP_NAME                               internal static char(20)                 initial array packed unaligned dcl 6-515
SLP_RCI_POINT_TO_POINT                 internal static fixed bin(17,0)          initial dcl 6-511
SLP_TMMRB_MULTIPOINT                   internal static fixed bin(17,0)          initial dcl 6-508
SLP_TMMVU_MULTIPOINT                   internal static fixed bin(17,0)          initial dcl 6-507
SLP_VALUE                              internal static fixed bin(8,0)           initial array unsigned dcl 6-520
SLP_VIP_MULTIPOINT                     internal static fixed bin(17,0)          initial dcl 6-506
SMA_ACCESS                             internal static bit(3)                   initial packed unaligned dcl 1-11
SMA_ACCESS_BIN                         internal static fixed bin(5,0)           initial dcl 1-36
SM_ACCESS                              internal static bit(3)                   initial packed unaligned dcl 1-11
SM_ACCESS_BIN                          internal static fixed bin(5,0)           initial dcl 1-36
SPECIAL_INFO_STRUCT_VERSION_1          internal static char(8)                  initial packed unaligned dcl 13-122
SPECIAL_VERSION                        internal static fixed bin(17,0)          initial dcl 13-124
S_ACCESS                               internal static bit(3)                   initial packed unaligned dcl 1-11
S_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 1-36
TCT_OVERSTRIKE                         internal static fixed bin(17,0)          initial dcl 7-126
TCT_REPLACE                            internal static fixed bin(17,0)          initial dcl 7-128
TERM_FILE_BC                           internal static bit(2)                   initial packed unaligned dcl 11-12
TERM_FILE_DELETE                       internal static bit(5)                   initial packed unaligned dcl 11-17
TERM_FILE_FORCE_WRITE                  internal static bit(4)                   initial packed unaligned dcl 11-16
TERM_FILE_TRUNC                        internal static bit(1)                   initial packed unaligned dcl 11-11
TERM_FILE_TRUNC_BC                     internal static bit(2)                   initial packed unaligned dcl 11-13
TMM_CLEAR                              internal static fixed bin(17,0)          initial dcl 7-115
TMM_SCROLL                             internal static fixed bin(17,0)          initial dcl 7-117
TM_ACCEPT                              internal static fixed bin(17,0)          initial dcl 6-537
TM_LEVEL_DSA300                        internal static bit(8)                   initial packed unaligned dcl 6-326
TM_OFFER                               internal static fixed bin(17,0)          initial dcl 6-536
TM_REJECT                              internal static fixed bin(17,0)          initial dcl 6-538
TM_SWITCH                              internal static fixed bin(17,0)          initial dcl 6-539
TTY_BOOLEAN_MODE_MCS_NAME              internal static char(8)                  initial array packed unaligned dcl 7-36
TTY_BOOLEAN_MODE_NEED_STC              internal static bit(1)                   initial array packed unaligned dcl 7-60
TTY_CANON_TYPE                         internal static char(10)                 initial array dcl 7-122
TTY_MORE_MODE                          internal static char(8)                  initial array dcl 7-111
W_ACCESS                               internal static bit(3)                   initial packed unaligned dcl 1-11
W_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 1-36
attention_fcn_info                     based           structure                level 1 dcl 5-36
attn_fcn_ptr                           automatic       pointer                  dcl 5-40
comment                                based           structure                level 1 dcl 18-20
comment_value                          based           char                     packed unaligned dcl 18-20
delay_struc                            based           structure                level 1 dcl 13-112
dsatm_data_$max_logical_devices        external static fixed bin(17,0)          dcl 6-48
dsatm_data_$max_networks               external static fixed bin(17,0)          dcl 6-49
dsatm_max_logical_devices              automatic       fixed bin(17,0)          dcl 6-50
dsatm_max_networks                     automatic       fixed bin(17,0)          dcl 6-51
dsatm_neg_info                         based           structure                level 1 dcl 6-57
dsatm_sw_dev_info                      based           structure                level 1 dcl 6-213
dsatmnetp                              automatic       pointer                  dcl 6-193
dsatmnip                               automatic       pointer                  dcl 6-55
dsatmprep                              automatic       pointer                  dcl 6-73
dsatmsdip                              automatic       pointer                  dcl 6-211
dsatmstap                              automatic       pointer                  dcl 6-111
get_special_info_struc                 based           structure                level 1 dcl 13-117
hcs_$set_bc_seg                 000000 constant        entry                    external dcl 928
infop                                  automatic       pointer                  dcl 7-103
n_modes                                internal static fixed bin(17,0)          initial dcl 15-22
n_sync_line_types                      internal static fixed bin(17,0)          initial dcl 9-50
orderip                                automatic       pointer                  dcl 5-34
sc_escape_len                          automatic       fixed bin(17,0)          dcl 13-58
sc_input_escape_len                    automatic       fixed bin(17,0)          dcl 13-59
special_chars_struc                    based           structure                level 1 dcl 13-76
stmt                                   based           structure                level 1 dcl 18-40
stmt_value                             based           char                     packed unaligned dcl 18-40
sync_line_type                         internal static fixed bin(17,0)          initial array dcl 9-52
template_ptr                           automatic       pointer                  dcl 12-194
terminate_file_switches                based           structure                level 1 packed packed unaligned dcl 11-4
tty_boolean_modes                      based           structure                level 1 dcl 7-72
tty_modes_string                       based           structure                level 1 unaligned dcl 7-105
tty_video_table_video_chars_len        automatic       fixed bin(21,0)          dcl 16-10
video_chars                            based           char                     packed unaligned dcl 16-30
video_chars_ptr                        automatic       pointer                  dcl 16-29

NAMES DECLARED BY EXPLICIT CONTEXT.
ERROR                           040405 constant        entry                    internal dcl 22-139 ref 1482 2033 2149 2695 2728
                                                                                  2783 2808 2977 3009 3979 4118 4132 4148 4162 4176
                                                                                  4198 4205 4217 4224 4236 4243 4255 4262 4274 4281
                                                                                  4293 4439 4445 4451 4467 4571 4585 4601 4615 4629
                                                                                  4651 4658 4670 4677 4689 4696 4708 4715 4727 4734
                                                                                  4746 4905 4929 4934 4939 4968 4975 5014 5021 5089
                                                                                  5094 5115 5121 5140 5145 5196 5302 5318 5324 5341
                                                                                  5350 5366 5372 5388 5394 5467 5501 5507 5523 5529
                                                                                  5545 5551 5585 5591 5633 5639 5665 5671 5704 5713
                                                                                  5826 5875 5881 5961 5968 5999 6006 6215 6231 6237
                                                                                  6253 6259 6275 6281 6296 6302 6318 6324 6340 6346
                                                                                  6362 6368 6384 6390 6406 6412 6428 6434 6452 6458
                                                                                  6471 6481 6499 6506 6520 6538
LEX                             040320 constant        entry                    internal dcl 21-31 ref 3983 3990 3996 3999 4003 4009
                                                                                  4012 4016 4022 4025 4029 4035 4038 4042 4048 4054
                                                                                  4060 4065 4072 4078 4084 4090 4096 4102 4109 4112
                                                                                  4116 4123 4126 4130 4137 4142 4146 4153 4156 4160
                                                                                  4167 4170 4174 4181 4184 4188 4192 4196 4203 4211
                                                                                  4215 4218 4222 4230 4234 4241 4249 4253 4260 4268
                                                                                  4272 4279 4287 4291 4298 4305 4312 4319 4325 4328
                                                                                  4332 4338 4341 4345 4351 4354 4358 4364 4367 4371
                                                                                  4377 4380 4384 4390 4393 4397 4403 4412 4418 4427
                                                                                  4430 4434 4463 4473 4480 4487 4494 4501 4507 4513
                                                                                  4519 4525 4531 4537 4543 4549 4555 4562 4565 4569
                                                                                  4576 4579 4583 4590 4595 4599 4606 4609 4613 4620
                                                                                  4623 4627 4634 4637 4641 4645 4649 4656 4664 4668
                                                                                  4671 4675 4683 4687 4694 4702 4706 4713 4721 4725
                                                                                  4732 4740 4744 4751 4758 4765 4772 4778 4781 4785
                                                                                  4791 4794 4798 4804 4807 4811 4817 4820 4824 4830
                                                                                  4833 4837 4843 4846 4850 4856 4859 4863 4870 4878
                                                                                  4885 4893 4896 4911 4916 4921 4926 5044 5074 5200
                                                                                  5207 5214 5221 5228 5235 5242 5249 5256 5263 5270
                                                                                  5277 5284 5291 5423 5429 5435 5441 5447 5453 5458
                                                                                  5629 5690 5695 5698 5702 5717 5723 5729 5735 5741
                                                                                  5747 5753 5759 5765 5771 5777 5783 5789 5795 5801
                                                                                  5804 5808 5811 5815 5818 5853 5856 5860 5863 5867
                                                                                  6010 6015 6020 6025 6030 6035 6040 6045 6048 6052
                                                                                  6057 6060 6064 6069 6072 6076 6081 6088 6093 6096
                                                                                  6100 6105 6108 6112 6117 6122 6127 6132 6137 6142
                                                                                  6147 6152 6157 6162 6167 6172 6177 6180 6184 6189
                                                                                  6194 6199 6204 6441 6448 6462 6465 6469
NEXT_STMT                       040716 constant        entry                    internal dcl 23-18 ref 3992 4005 4018 4031 4044 4119
                                                                                  4133 4149 4163 4177 4199 4237 4256 4275 4294 4441
                                                                                  4447 4469 4572 4586 4602 4616 4630 4652 4690 4709
                                                                                  4728 4747 4931 4936 4971 5017 5055 5091 5117 5142
                                                                                  5166 5192 5320 5328 5368 5376 5390 5473 5503 5587
                                                                                  5635 5705 5877 5963 6001 6233 6255 6277 6298 6320
                                                                                  6342 6364 6386 6408 6430 6454 6472 6522
PUSH                            040157 constant        entry                    internal dcl 20-36 ref 4067 4068 4104 4105 4301 4308
                                                                                  4315 4408 4423 4475 4476 4482 4489 4496 4557 4558
                                                                                  4754 4761 4768 4874 4889 4950 4986 4998 5032 5203
                                                                                  5210 5217 5224 5231 5238 5245 5252 5259 5266 5273
                                                                                  5310 6207
RD_ACTION                       004006 constant        label                    array(422) dcl 3979 ref 3974
RD_MATCH                        027206 constant        label                    dcl 3970 ref 19-90 19-92 19-101 19-109 19-113 19-118
                                                                                  19-128 3966
RD_MATCH_NO_TOKEN               027211 constant        label                    dcl 3971 ref 19-73 19-79 19-86
RD_NEXT_REDUCTION               026551 constant        label                    dcl 19-55 ref 19-68 19-84 19-88 19-99 19-104 19-111
                                                                                  19-116 19-120 19-124 19-130 3967 20-17 20-24 5308
                                                                                  5888 5989 6487
RD_STACK                        027220 constant        label                    dcl 20-17
RD_STACK_POP                    027225 constant        label                    dcl 20-24 ref 4912 4917 4922 4927 4932 4937 4959
                                                                                  5006 5040 5045 5057 5087 5092 5127 5143 5156 5160
                                                                                  5164 5347 5824 6213 6491 6518 6524 6532 6536
RD_TEST_REDUCTION               026552 constant        label                    dcl 19-58 ref 19-53 20-19 20-28 3988 3994 4001 4007
                                                                                  4014 4020 4027 4033 4040 4046 4052 4058 4063 4070
                                                                                  4076 4082 4088 4094 4100 4107 4114 4121 4128 4135
                                                                                  4144 4151 4158 4165 4172 4179 4186 4194 4201 4213
                                                                                  4220 4232 4239 4251 4258 4270 4277 4289 4296 4303
                                                                                  4310 4317 4323 4330 4336 4343 4349 4356 4362 4369
                                                                                  4375 4382 4388 4395 4401 4410 4416 4425 4432 4437
                                                                                  4443 4449 4458 4465 4471 4478 4485 4492 4499 4505
                                                                                  4511 4517 4523 4529 4535 4541 4547 4553 4560 4567
                                                                                  4574 4581 4588 4597 4604 4611 4618 4625 4632 4639
                                                                                  4647 4654 4666 4673 4685 4692 4704 4711 4723 4730
                                                                                  4742 4749 4756 4763 4770 4776 4783 4789 4796 4802
                                                                                  4809 4815 4822 4828 4835 4841 4848 4854 4861 4868
                                                                                  4876 4883 4891 4898 4903 4948 4953 4966 4973 4984
                                                                                  4989 4996 5001 5012 5019 5030 5035 5053 5063 5069
                                                                                  5076 5082 5102 5108 5113 5119 5132 5138 5152 5169
                                                                                  5174 5182 5188 5194 5205 5212 5219 5226 5233 5240
                                                                                  5247 5254 5261 5268 5275 5282 5289 5295 5300 5316
                                                                                  5322 5332 5337 5345 5358 5364 5370 5379 5386 5392
                                                                                  5402 5406 5411 5417 5421 5427 5433 5439 5445 5451
                                                                                  5460 5465 5475 5481 5487 5493 5499 5505 5515 5521
                                                                                  5527 5537 5543 5549 5559 5565 5570 5576 5583 5589
                                                                                  5599 5605 5614 5623 5631 5637 5649 5656 5663 5669
                                                                                  5678 5684 5688 5693 5700 5707 5711 5721 5727 5733
                                                                                  5739 5745 5751 5757 5763 5769 5775 5781 5787 5793
                                                                                  5799 5806 5813 5820 5834 5840 5845 5851 5858 5865
                                                                                  5873 5879 5893 5901 5908 5916 5923 5929 5935 5941
                                                                                  5947 5953 5959 5966 5977 5984 5997 6004 6013 6018
                                                                                  6023 6028 6033 6038 6043 6050 6055 6062 6067 6074
                                                                                  6079 6086 6091 6098 6103 6110 6115 6120 6125 6130
                                                                                  6135 6140 6145 6150 6155 6160 6165 6170 6175 6182
                                                                                  6187 6192 6197 6202 6209 6223 6229 6235 6245 6251
                                                                                  6257 6267 6273 6279 6288 6294 6300 6310 6316 6322
                                                                                  6332 6338 6344 6354 6360 6366 6376 6382 6388 6398
                                                                                  6404 6410 6420 6426 6432 6443 6450 6456 6467 6474
                                                                                  6479 6497 6504 6514 6528
RD_TEST_RESULT                  027202 constant        label                    dcl 3966 ref 3902 3904 3906 3908 3910 3912 3914 3916
                                                                                  3918 3920 3922 3924 3926 3928 3930 3932 3934 3936
                                                                                  3938 3940 3942 3944 3946 3948 3950 3952 3954 3956
                                                                                  3958 3960 3962 3964
RD_TEST_TOKEN                   003740 constant        label                    array(6) dcl 19-73 ref 19-65 19-71
RD_TOKEN_FCN                    003746 constant        label                    array(32) dcl 3901 ref 3899
SEMANTIC_ANALYSIS               026540 constant        entry                    internal dcl 17-30 ref 1392
add_increment                   016521 constant        entry                    internal dcl 1669 ref 3068 3072 3074
arg_error                       012666 constant        label                    dcl 1274
bad_delay                       020351 constant        label                    dcl 1936 ref 1932
check_for_any                   025762 constant        entry                    internal dcl 3007 ref 5581
check_line_type                 020550 constant        label                    dcl 1994 ref 1988
check_special                   024274 constant        entry                    internal dcl 2642 ref 5297
clean_up                        016325 constant        entry                    internal dcl 1640 ref 1205 1631 1635
common                          024140 constant        label                    dcl 2601 ref 2594 2599
copy_string                     024602 constant        entry                    internal dcl 2665 ref 5042
copy_type                       025346 constant        entry                    internal dcl 2870 ref 4462
cv_ttf                          011701 constant        entry                    external dcl 910
define_ct_table                 021530 constant        entry                    internal dcl 2185 ref 3998 4011
define_dsatm_device             022026 constant        entry                    internal dcl 2282 ref 4421 4888
define_fkey_table               026145 constant        entry                    internal dcl 3084 ref 4037
define_special                  024265 constant        entry                    internal dcl 2633 ref 4024
define_table                    021412 constant        entry                    internal dcl 2155 ref 2189 2635 3086
define_video                    021637 constant        entry                    internal dcl 2218 ref 4406 4873
defined_type                    020463 constant        entry                    internal dcl 1967 ref 3911
delay_value                     020265 constant        entry                    internal dcl 1926 ref 3919
end_fkey_seq                    026411 constant        entry                    internal dcl 3139 ref 5489 5495
end_vseq                        021771 constant        entry                    internal dcl 2266 ref 5838
finish_dsatm_device             024245 constant        entry                    internal dcl 2620 ref 6211
finish_fkey_table               026174 constant        entry                    internal dcl 3100 ref 5462
finish_type                     021266 constant        entry                    internal dcl 2128 ref 4900
finish_video_table              021675 constant        entry                    internal dcl 2232 ref 5822
fkey_entry_err                  021175 constant        entry                    internal dcl 2095 ref 3927
found_match                     015330 constant        label                    dcl 1502 ref 1496
get_misc_char_space             026026 constant        entry                    internal dcl 3036 ref 2678 2817
get_misc_space                  026014 constant        entry                    internal dcl 3025 ref 2205 2243 2624 3040
get_protocol                    021334 constant        entry                    internal dcl 2142 ref 4858
get_to_cl                       040263 constant        label                    dcl 20-62 ref 20-64
give_usage                      012132 constant        label                    dcl 1216 ref 1278
indicator_value                 021137 constant        entry                    internal dcl 2073 ref 3925
init_fkey_area                  026502 constant        entry                    internal dcl 3159 ref 5456
init_type                       021207 constant        entry                    internal dcl 2105 ref 3985
insert_quoted_string            025053 constant        entry                    internal dcl 2764 ref 5059 5477 5830
insert_single_char              025023 constant        entry                    internal dcl 2752 ref 2771 5065 5483 5847 5991 5993
legal_alloc_unit                022747 constant        entry                    internal dcl 2425 ref 3935
legal_att1                      024133 constant        entry                    internal dcl 2596 ref 3943
legal_attd                      024127 constant        entry                    internal dcl 2590 ref 3941
legal_char_encoding             023137 constant        entry                    internal dcl 2464 ref 3951
legal_char_font                 023533 constant        entry                    internal dcl 2527 ref 3957
legal_char_set                  023263 constant        entry                    internal dcl 2485 ref 3953
legal_char_subset               023407 constant        entry                    internal dcl 2506 ref 3955
legal_compression               024002 constant        entry                    internal dcl 2569 ref 3961
legal_dev_type                  022637 constant        entry                    internal dcl 2403 ref 3931
legal_dpp                       022243 constant        entry                    internal dcl 2340 ref 3945
legal_line_overflow             023025 constant        entry                    internal dcl 2442 ref 3937
legal_name                      016763 constant        entry                    internal dcl 1725 ref 1736 1771 3909
legal_nat_lang                  023656 constant        entry                    internal dcl 2548 ref 3959
legal_page_overflow             023071 constant        entry                    internal dcl 2453 ref 3939
legal_real_class                022513 constant        entry                    internal dcl 2382 ref 3949
legal_sdp_class                 022367 constant        entry                    internal dcl 2361 ref 3947
legal_shareability              022703 constant        entry                    internal dcl 2414 ref 3933
make_char                       026001 constant        entry                    internal dcl 3017 ref 4111 4125 4139 4141 4155 4169
                                                                                  4183 4190 4207 4226 4264 4283 4564 4578 4592 4594
                                                                                  4608 4622 4636 4643 4660 4679 4717 4736
make_delay_entry                025432 constant        entry                    internal dcl 2892 ref 2944 4991 5003 5025
new_table_name                  017005 constant        entry                    internal dcl 1734 ref 3903
new_type_name                   017176 constant        entry                    internal dcl 1769 ref 3901
nlret                           021125 constant        label                    dcl 2069 ref 2066
no_table                        021160 constant        entry                    internal dcl 2082 ref 3923
octal_char                      020606 constant        entry                    internal dcl 2007 ref 2035 2041 2075
path_error                      012307 constant        label                    dcl 1233 ref 1238 1241
perform_misc_relocs             026056 constant        entry                    internal dcl 3058 ref 1541
pop_rep                         024735 constant        entry                    internal dcl 2722 ref 5078
push_rep                        024640 constant        entry                    internal dcl 2689 ref 5073
register_misc_reloc             026042 constant        entry                    internal dcl 3046 ref 2130 2132 2134 2136 2210
rep_err_found                   021170 constant        entry                    internal dcl 2088 ref 3917
return_tty_char                 021131 constant        entry                    internal dcl 2061 ref 2027 2038 2046 2050 2051 2052
                                                                                  2053 2055
semant_error                    016604 constant        entry                    internal dcl 1705 ref 1401 1500 1555 1573 1580 1585
                                                                                  1590 1594 1605 2644 2647 3113 5176 5184 5190 6476
set_alloc_unit                  023013 constant        entry                    internal dcl 2436 ref 6083 6290
set_char_encoding               023203 constant        entry                    internal dcl 2475 ref 6312
set_char_font                   023576 constant        entry                    internal dcl 2538 ref 6378
set_char_set                    023327 constant        entry                    internal dcl 2496 ref 6334
set_char_subset                 023453 constant        entry                    internal dcl 2517 ref 6356
set_compression                 024047 constant        entry                    internal dcl 2580 ref 6422
set_delay                       025530 constant        entry                    internal dcl 2929 ref 5104
set_dpp                         022307 constant        entry                    internal dcl 2351 ref 6225
set_extended                    021563 constant        entry                    internal dcl 2200 ref 2119 2885 4865 4872 4880 4887
set_nat_lang                    023722 constant        entry                    internal dcl 2559 ref 6400
set_real_class                  022557 constant        entry                    internal dcl 2393 ref 6269
set_sdp_class                   022433 constant        entry                    internal dcl 2372 ref 6247
set_table                       025225 constant        entry                    internal dcl 2838 ref 4327 4340 4353 4366 4379 4392
                                                                                  4780 4793 4806 4819 4832 4845
set_table_offset                016531 constant        entry                    internal dcl 1683 ref 1548 1549 1550 1551 1552 1553
set_up_answerback               025732 constant        entry                    internal dcl 2992 ref 4056
severity_5_failure              016314 constant        label                    dcl 1635 ref 1212 1218 1228 1235 1259 1267 1275 1302
                                                                                  1321 1330 1376 1626
start_fkey_seq                  026376 constant        entry                    internal dcl 3129 ref 5425 5431 5437 5443 5449 5457
start_vseq                      021750 constant        entry                    internal dcl 2254 ref 5719 5725 5731 5737 5743 5749
                                                                                  5755 5761 5767 5773 5779 5785 5791 5797
statement_error                 016552 constant        entry                    internal dcl 1695 ref 1738 1744 1752 1772 1778 1787
                                                                                  2166 2355 2376 2397 2479 2500 2521 2542 2563 2584
                                                                                  2702 2847 2902 2937 3143 5471
store_string                    025130 constant        entry                    internal dcl 2791 ref 5084
ttf_error                       013121 constant        label                    dcl 1301 ref 1306
ttt_error                       013272 constant        label                    dcl 1320 ref 1314
tty_char                        020652 constant        entry                    internal dcl 2016 ref 1880 2609 3907
valid_baud                      020104 constant        entry                    internal dcl 1886 ref 3913
valid_cps                       020167 constant        entry                    internal dcl 1901 ref 3915
valid_dft_line_type             020544 constant        entry                    internal dcl 1990 ref 3929
valid_edit                      020062 constant        entry                    internal dcl 1878 ref 3905
valid_line_type                 020537 constant        entry                    internal dcl 1983 ref 3921
valid_mode                      017365 constant        entry                    internal dcl 1796 ref 3963
video_encode_pad                025103 constant        entry                    internal dcl 2777 ref 5855 5862

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0     43154       43516   42433       43164
Length     44524   42433       342         772     520         212

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
cv_ttf                             4530 external procedure  is an external procedure.  
on unit on line 1204                 64 on unit               
clean_up                             84 internal procedure  is called by several nonquick procedures.  
add_increment                           internal procedure  shares stack frame of external procedure cv_ttf.  
set_table_offset                        internal procedure  shares stack frame of external procedure cv_ttf.  
statement_error                     144 internal procedure  is called during a stack extension.  
legal_name                              internal procedure  shares stack frame of external procedure cv_ttf.  
new_table_name                          internal procedure  shares stack frame of external procedure cv_ttf.  
new_type_name                           internal procedure  shares stack frame of external procedure cv_ttf.  
valid_mode                              internal procedure  shares stack frame of external procedure cv_ttf.  
valid_edit                              internal procedure  shares stack frame of external procedure cv_ttf.  
valid_baud                              internal procedure  shares stack frame of external procedure cv_ttf.  
valid_cps                               internal procedure  shares stack frame of external procedure cv_ttf.  
delay_value                         246 internal procedure  enables or reverts conditions.  
on unit on line 1932                 64 on unit               
defined_type                            internal procedure  shares stack frame of external procedure cv_ttf.  
valid_line_type                         internal procedure  shares stack frame of external procedure cv_ttf.  
octal_char                              internal procedure  shares stack frame of external procedure cv_ttf.  
tty_char                                internal procedure  shares stack frame of external procedure cv_ttf.  
return_tty_char                         internal procedure  shares stack frame of external procedure cv_ttf.  
indicator_value                         internal procedure  shares stack frame of external procedure cv_ttf.  
no_table                                internal procedure  shares stack frame of external procedure cv_ttf.  
rep_err_found                           internal procedure  shares stack frame of external procedure cv_ttf.  
fkey_entry_err                          internal procedure  shares stack frame of external procedure cv_ttf.  
init_type                               internal procedure  shares stack frame of external procedure cv_ttf.  
finish_type                             internal procedure  shares stack frame of external procedure cv_ttf.  
get_protocol                            internal procedure  shares stack frame of external procedure cv_ttf.  
define_table                            internal procedure  shares stack frame of external procedure cv_ttf.  
define_ct_table                         internal procedure  shares stack frame of external procedure cv_ttf.  
set_extended                            internal procedure  shares stack frame of external procedure cv_ttf.  
define_video                            internal procedure  shares stack frame of external procedure cv_ttf.  
finish_video_table                      internal procedure  shares stack frame of external procedure cv_ttf.  
start_vseq                              internal procedure  shares stack frame of external procedure cv_ttf.  
end_vseq                                internal procedure  shares stack frame of external procedure cv_ttf.  
define_dsatm_device                     internal procedure  shares stack frame of external procedure cv_ttf.  
legal_dpp                               internal procedure  shares stack frame of external procedure cv_ttf.  
set_dpp                                 internal procedure  shares stack frame of external procedure cv_ttf.  
legal_sdp_class                         internal procedure  shares stack frame of external procedure cv_ttf.  
set_sdp_class                           internal procedure  shares stack frame of external procedure cv_ttf.  
legal_real_class                        internal procedure  shares stack frame of external procedure cv_ttf.  
set_real_class                          internal procedure  shares stack frame of external procedure cv_ttf.  
legal_dev_type                          internal procedure  shares stack frame of external procedure cv_ttf.  
legal_shareability                      internal procedure  shares stack frame of external procedure cv_ttf.  
legal_alloc_unit                        internal procedure  shares stack frame of external procedure cv_ttf.  
set_alloc_unit                          internal procedure  shares stack frame of external procedure cv_ttf.  
legal_line_overflow                     internal procedure  shares stack frame of external procedure cv_ttf.  
legal_page_overflow                     internal procedure  shares stack frame of external procedure cv_ttf.  
legal_char_encoding                     internal procedure  shares stack frame of external procedure cv_ttf.  
set_char_encoding                       internal procedure  shares stack frame of external procedure cv_ttf.  
legal_char_set                          internal procedure  shares stack frame of external procedure cv_ttf.  
set_char_set                            internal procedure  shares stack frame of external procedure cv_ttf.  
legal_char_subset                       internal procedure  shares stack frame of external procedure cv_ttf.  
set_char_subset                         internal procedure  shares stack frame of external procedure cv_ttf.  
legal_char_font                         internal procedure  shares stack frame of external procedure cv_ttf.  
set_char_font                           internal procedure  shares stack frame of external procedure cv_ttf.  
legal_nat_lang                          internal procedure  shares stack frame of external procedure cv_ttf.  
set_nat_lang                            internal procedure  shares stack frame of external procedure cv_ttf.  
legal_compression                       internal procedure  shares stack frame of external procedure cv_ttf.  
set_compression                         internal procedure  shares stack frame of external procedure cv_ttf.  
legal_attd                              internal procedure  shares stack frame of external procedure cv_ttf.  
finish_dsatm_device                     internal procedure  shares stack frame of external procedure cv_ttf.  
define_special                          internal procedure  shares stack frame of external procedure cv_ttf.  
check_special                           internal procedure  shares stack frame of external procedure cv_ttf.  
copy_string                             internal procedure  shares stack frame of external procedure cv_ttf.  
push_rep                                internal procedure  shares stack frame of external procedure cv_ttf.  
pop_rep                                 internal procedure  shares stack frame of external procedure cv_ttf.  
insert_single_char                      internal procedure  shares stack frame of external procedure cv_ttf.  
insert_quoted_string                    internal procedure  shares stack frame of external procedure cv_ttf.  
video_encode_pad                        internal procedure  shares stack frame of external procedure cv_ttf.  
store_string                            internal procedure  shares stack frame of external procedure cv_ttf.  
set_table                               internal procedure  shares stack frame of external procedure cv_ttf.  
copy_type                               internal procedure  shares stack frame of external procedure cv_ttf.  
make_delay_entry                        internal procedure  shares stack frame of external procedure cv_ttf.  
set_delay                               internal procedure  shares stack frame of external procedure cv_ttf.  
set_up_answerback                       internal procedure  shares stack frame of external procedure cv_ttf.  
check_for_any                           internal procedure  shares stack frame of external procedure cv_ttf.  
make_char                               internal procedure  shares stack frame of external procedure cv_ttf.  
get_misc_space                          internal procedure  shares stack frame of external procedure cv_ttf.  
get_misc_char_space                     internal procedure  shares stack frame of external procedure cv_ttf.  
register_misc_reloc                     internal procedure  shares stack frame of external procedure cv_ttf.  
perform_misc_relocs                     internal procedure  shares stack frame of external procedure cv_ttf.  
define_fkey_table                       internal procedure  shares stack frame of external procedure cv_ttf.  
finish_fkey_table                       internal procedure  shares stack frame of external procedure cv_ttf.  
start_fkey_seq                          internal procedure  shares stack frame of external procedure cv_ttf.  
end_fkey_seq                            internal procedure  shares stack frame of external procedure cv_ttf.  
init_fkey_area                          internal procedure  shares stack frame of external procedure cv_ttf.  
SEMANTIC_ANALYSIS                       internal procedure  shares stack frame of external procedure cv_ttf.  
PUSH                                    internal procedure  shares stack frame of external procedure cv_ttf.  
LEX                                     internal procedure  shares stack frame of external procedure cv_ttf.  
ERROR                                   internal procedure  shares stack frame of external procedure cv_ttf.  
NEXT_STMT                               internal procedure  shares stack frame of external procedure cv_ttf.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 already_called              cv_ttf
000011 breaks                      cv_ttf
000025 ctl_chars                   cv_ttf
000036 lexctl                      cv_ttf
000063 lexdlm                      cv_ttf
000110 TRACING                     cv_ttf
000112 brief_error                 PUSH
000114 long_error                  PUSH
000210 non_restart_error           PUSH

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
cv_ttf                   000100 ans_back_table_ptr          cv_ttf
                         000102 ans_size                    cv_ttf
                         000103 ansbck_char_index           cv_ttf
                         000104 argc                        cv_ttf
                         000105 argl                        cv_ttf
                         000106 argp                        cv_ttf
                         000110 argx                        cv_ttf
                         000111 baud_error_printed          cv_ttf
                         000112 baudx                       cv_ttf
                         000113 bit_count                   cv_ttf
                         000114 bitp                        cv_ttf
                         000116 block_ack_set               cv_ttf
                         000117 cax                         cv_ttf
                         000120 cex                         cv_ttf
                         000121 cfx                         cv_ttf
                         000122 check_0nums                 cv_ttf
                         000123 code                        cv_ttf
                         000124 count                       cv_ttf
                         000125 cps_baud_value              cv_ttf
                         000126 created_table_segment       cv_ttf
                         000127 cssx                        cv_ttf
                         000130 csx                         cv_ttf
                         000131 ct_table_offset             cv_ttf
                         000132 cur_delay_value             cv_ttf
                         000133 cur_table_name              cv_ttf
                         000143 default_count               cv_ttf
                         000144 defined                     cv_ttf
                         000145 delay_error_printed         cv_ttf
                         000146 delay_stmt                  cv_ttf
                         000147 delayx                      cv_ttf
                         000150 dft_bauds                   cv_ttf
                         000164 dft_extended_tables_defined cv_ttf
                         000166 dft_extended_tablesp        cv_ttf
                         000170 dirname                     cv_ttf
                         000242 dppx                        cv_ttf
                         000243 edited                      cv_ttf
                         002243 entryx                      cv_ttf
                         002244 esc_p                       cv_ttf
                         002246 extended_tables_workp       cv_ttf
                         002250 fb35                        cv_ttf
                         002251 fkey_table_offset           cv_ttf
                         002252 fkey_tables_ptr             cv_ttf
                         002254 floating_delay_value        cv_ttf
                         002255 got_temps                   cv_ttf
                         002256 highest                     cv_ttf
                         002257 i                           cv_ttf
                         002260 increment                   cv_ttf
                         002261 j                           cv_ttf
                         002262 length_in_words             cv_ttf
                         002264 line_type_str               cv_ttf
                         002266 max_output_escapes          cv_ttf
                         002267 max_values                  cv_ttf
                         002270 maxind                      cv_ttf
                         002271 misc_relocs_count           cv_ttf
                         002272 misc_relocs_ptr             cv_ttf
                         002274 misc_tables_ptr             cv_ttf
                         002276 mode_line_length            cv_ttf
                         002277 mode_page_length            cv_ttf
                         002300 mode_string                 cv_ttf
                         002401 n_answerbacks               cv_ttf
                         002402 n_dft_bauds                 cv_ttf
                         002403 n_fkey_tables               cv_ttf
                         002404 n_spec                      cv_ttf
                         002405 n_special_tables            cv_ttf
                         002406 n_table_names               cv_ttf
                         002407 n_tables                    cv_ttf
                         002410 name_idx                    cv_ttf
                         002411 name_to_test_for            cv_ttf
                         002422 new_delay_table_ptr         cv_ttf
                         002424 next_misc_offset            cv_ttf
                         002425 next_offset                 cv_ttf
                         002426 nlx                         cv_ttf
                         002427 not_edited                  cv_ttf
                         004427 num_0nums                   cv_ttf
                         004430 off_sw                      cv_ttf
                         004431 out_sus_set                 cv_ttf
                         004432 p                           cv_ttf
                         004434 pa_type                     cv_ttf
                         004436 prev_ptr                    cv_ttf
                         004440 rcx                         cv_ttf
                         004441 real_name                   cv_ttf
                         004451 rep_depth                   cv_ttf
                         004452 rep_error                   cv_ttf
                         004454 rep_factor                  cv_ttf
                         004456 rep_length                  cv_ttf
                         004460 rep_start                   cv_ttf
                         004462 rep_used                    cv_ttf
                         004463 scx                         cv_ttf
                         004464 seqs_index                  cv_ttf
                         004465 size_of_ttt                 cv_ttf
                         004466 sourcep                     cv_ttf
                         004470 spec_offset                 cv_ttf
                         004472 special_tables_ptr          cv_ttf
                         004474 specialp                    cv_ttf
                         004476 stmtp                       cv_ttf
                         004500 supplied_ename              cv_ttf
                         004510 table_names_ptr             cv_ttf
                         004512 table_size                  cv_ttf
                         004514 tables_ptr                  cv_ttf
                         004516 targetp                     cv_ttf
                         004520 temp_dfttp                  cv_ttf
                         004522 temp_strings_ptr            cv_ttf
                         004524 temp_ptr                    cv_ttf
                         004550 temp_ttep                   cv_ttf
                         004552 tempp                       cv_ttf
                         004554 test_value                  cv_ttf
                         004556 ttf_ename                   cv_ttf
                         004566 ttfp                        cv_ttf
                         004570 ttt_ename                   cv_ttf
                         004600 wdir                        cv_ttf
                         004652 dft                         cv_ttf
                         005013 input_escapes               cv_ttf
                         005054 input_results               cv_ttf
                         005115 temp_key_index              cv_ttf
                         005116 temp_key_infop              cv_ttf
                         005120 temp_numeric_encoding       cv_ttf
                         005130 dsatmdevp                   cv_ttf
                         005132 function_key_data_ptr       cv_ttf
                         005134 function_key_data_highest   cv_ttf
                         005136 key_info_ptr                cv_ttf
                         005140 tttp                        cv_ttf
                         005142 ttep                        cv_ttf
                         005144 extended_tablesp            cv_ttf
                         005146 dfttp                       cv_ttf
                         005150 tablep                      cv_ttf
                         005152 fkey_tablep                 cv_ttf
                         005154 delay_tablep                cv_ttf
                         005156 answerback_entry_ptr        cv_ttf
                         005160 answerback_length           cv_ttf
                         005162 c_chars_ptr                 cv_ttf
                         005164 ttyvtblp                    cv_ttf
                         005166 ttyvseqp                    cv_ttf
                         005170 Pthis_token                 cv_ttf
                         005172 Pstmt                       cv_ttf
                         005174 Ptoken                      cv_ttf
                         005176 SPDL                        cv_ttf
                         005177 MERROR_SEVERITY             cv_ttf
                         005200 SERROR_CONTROL              cv_ttf
                         005201 SERROR_PRINTED              cv_ttf
                         005201 MIN_PRINT_SEVERITY          cv_ttf
                         005202 PRINT_SEVERITY_CONTROL      cv_ttf
                         005340 lowest                      valid_line_type
                         005356 i                           tty_char
                         005357 asc_mnemonic                tty_char
                         005462 i                           set_extended
                         005500 p                           finish_video_table
                         005524 dftdevp                     define_dsatm_device
                         005760 attx                        legal_attd
                         005770 p                           finish_dsatm_device
                         006016 stringp                     copy_string
                         006020 stringl                     copy_string
                         006054 i                           insert_quoted_string
                         006055 c                           insert_quoted_string
                         006074 stringl                     store_string
                         006076 stringp                     store_string
                         006116 hold_extended_tables_rp     copy_type
                         006166 p                           get_misc_space
                         006220 i                           perform_misc_relocs
                         006222 p                           perform_misc_relocs
                         006224 temp_rp                     perform_misc_relocs
                         006242 table_p                     finish_fkey_table
                         006244 seq_p                       finish_fkey_table
                         006272 j                           init_fkey_area
                         006302 LTOKEN_REQD_VALUE           SEMANTIC_ANALYSIS
                         006303 NRED                        SEMANTIC_ANALYSIS
                         006304 PRED                        SEMANTIC_ANALYSIS
                         006306 PTOKEN_REQD                 SEMANTIC_ANALYSIS
                         006310 PTOKEN_REQD_VALUE           SEMANTIC_ANALYSIS
                         006312 STOKEN_FCN                  SEMANTIC_ANALYSIS
                         006313 CODE                        SEMANTIC_ANALYSIS
                         006314 I                           SEMANTIC_ANALYSIS
                         006315 NUMBER                      SEMANTIC_ANALYSIS
                         006316 DIRECTION                   SEMANTIC_ANALYSIS
                         006317 STACK                       SEMANTIC_ANALYSIS
                         006331 STACK_DEPTH                 SEMANTIC_ANALYSIS
                         006372 i                           LEX
                         006404 Pstmt                       ERROR
                         006406 Perring_token               ERROR
                         006416 Ssearching                  NEXT_STMT
statement_error          000100 stmt_ptr                    statement_error
                         000102 token_ptr                   statement_error

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_g_a               r_e_as              r_ne_as             alloc_char_temp     unpk_to_pk          call_ext_out_desc
call_ext_out        call_int_this_desc  call_int_this       call_int_other      return_mac          longbs_to_fx2
tra_ext_1           alloc_auto_adj      bound_ck_signal     mdfx1               signal_op           enable_op
shorten_stack       ext_entry           int_entry           int_entry_desc      set_chars_eis       set_bits_eis
index_chars_eis     real_to_real_round_ any_to_any_round_   any_to_any_truncate_divide_fx3          alloc_storage
op_freen_

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      com_err_$suppress_name        cu_$arg_count                 cu_$arg_ptr
cu_$cl                        cv_dec_check_                 cv_dec_check_                 cv_oct_check_
expand_pathname_              expand_pathname_$add_suffix   get_group_id_                 get_temp_segments_
get_wdir_                     hcs_$delentry_seg             hcs_$make_seg                 hcs_$truncate_seg
initiate_file_                ioa_                          iox_$put_chars                lex_error_
lex_error_                    lex_error_                    lex_string_$init_lex_delims   lex_string_$lex
pathname_                     release_temp_segments_        suffixed_name_$new_suffix     terminate_file_
translator_temp_$get_segment  translator_temp_$release_all_segments

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
cv_ttf_severity_              dsatm_data_$device_multics_dft                              error_table_$bad_conversion
error_table_$badopt           error_table_$noarg            error_table_$noentry          error_table_$too_many_args
error_table_$translation_failed                             error_table_$zero_length_seg  iox_$error_output




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
    910 011700       977 011706       988 011710      1010 011711      1015 011712      1016 011713      1019 011714
   1032 011715      1033 011716      1046 011717      1054 011720      1056 011721      1068 011722      1070 011723
   1071 011724      1072 011725      1074 011726      1076 011727      1077 011730      1078 011731      1079 011732
   1080 011733      1081 011750      1082 011752      1085 011753      1133 011754      6550 011755   22    3 011756
   1707 012007      1196 012011      1198 012030      1199 012032      1200 012033      1201 012034      1202 012050
   1204 012051      1205 012065      1206 012072      1207 012075      1209 012076      1210 012107      1211 012111
   1212 012126      1214 012127      1216 012132      1218 012157      1221 012160      1222 012167      1223 012204
   1225 012215      1227 012221      1228 012254      1231 012255      1232 012305      1233 012307      1235 012341
   1237 012342      1238 012400      1240 012402      1241 012435      1244 012437      1245 012440      1248 012455
   1251 012472      1252 012476      1253 012500      1254 012501      1256 012502      1257 012512      1258 012515
   1259 012552      1261 012553      1262 012554      1263 012571      1264 012617      1265 012625      1267 012660
   1269 012661      1270 012662      1273 012663      1274 012666      1275 012711      1277 012712      1278 012714
   1282 012720      1283 012730      1285 012732      1287 012734      1288 012771      1291 013001      1292 013035
   1294 013037      1296 013114      1299 013117      1301 013121      1302 013170      1304 013171      1305 013173
   1306 013176      1311 013177      1312 013206      1313 013245      1314 013250      1317 013254      1318 013270
   1320 013272      1321 013313      1326 013314      1327 013335      1329 013337      1330 013363      1333 013364
   1334 013366      1335 013370      1336 013372      1337 013374      1338 013376      1339 013400      1340 013402
   1341 013404      1342 013406      1343 013410      1344 013412      1348 013413      1349 013426      1350 013430
   1351 013431      1352 013433      1353 013436      1357 013440      1358 013442      1359 013445      1360 013450
   1361 013453      1362 013454      1363 013457      1364 013461      1366 013463      1367 013471      1368 013502
   1372 013503      1373 013524      1375 013530      1376 013554      1379 013555      1381 013560      1382 013574
   1383 013617      1384 013703      1387 013706      1392 014025      1396 014026      1400 014047      1401 014057
   1404 014113      1406 014121      1407 014122      1408 014134      1409 014140      1410 014142      1411 014146
   1412 014151      1414 014154      1416 014156      1420 014161      1421 014171      1423 014174      1424 014175
   1425 014205      1427 014217      1428 014220      1429 014225      1430 014230      1431 014232      1432 014233
   1434 014750      1435 014754      1436 014764      1437 014767      1439 014772      1442 014774      1446 014777
   1447 015000      1449 015002      1450 015011      1452 015023      1453 015024      1454 015030      1455 015034
   1456 015040      1457 015042      1458 015044      1459 015047      1460 015117      1461 015121      1462 015130
   1463 015134      1464 015140      1465 015142      1466 015146      1468 015153      1469 015155      1471 015160
   1472 015163      1473 015167      1474 015172      1476 015174      1477 015201      1479 015203      1481 015205
   1482 015206      1483 015212      1486 015213      1487 015215      1489 015220      1490 015227      1491 015244
   1493 015246      1494 015253      1495 015263      1496 015267      1498 015273      1500 015275      1502 015330
   1506 015335      1508 015337      1509 015341      1512 015345      1514 015353      1518 015355      1519 015357
   1520 015367      1522 015373      1525 015400      1526 015403      1528 015413      1529 015420      1530 015421
   1531 015423      1532 015424      1534 015426      1541 015432      1543 015433      1545 015434      1546 015445
   1548 015451      1549 015457      1550 015466      1551 015475      1552 015504      1553 015513      1555 015522
   1558 015551      1560 015552      1562 015554      1563 015557      1564 015563      1566 015565      1568 015570
   1569 015575      1571 015611      1573 015613      1580 015643      1585 015677      1588 015740      1590 015741
   1594 016005      1600 016055      1601 016062      1603 016064      1605 016067      1610 016115      1613 016162
   1615 016176      1617 016201      1618 016216      1619 016223      1621 016224      1622 016226      1623 016255
   1625 016257      1626 016303      1631 016304      1632 016310      1633 016313      1635 016314      1637 016320
   1638 016323      1640 016324      1644 016332      1647 016365      1650 016374      1651 016406      1652 016411
   1653 016412      1655 016441      1657 016460      1659 016463      1661 016506      1663 016510      1665 016520
   1669 016521      1675 016523      1676 016526      1677 016530      1683 016531      1689 016533      1690 016536
   1691 016542      1700 016544      1695 016551      1702 016573      1703 016577      1705 016602      1707 016625
   1712 016750      1713 016751      1714 016755      1716 016762      1725 016763      1727 016765      1734 017005
   1736 017007      1738 017014      1739 017043      1742 017046      1744 017052      1745 017077      1748 017102
   1749 017111      1752 017131      1753 017156      1757 017161      1758 017163      1760 017167      1762 017171
   1763 017172      1769 017176      1771 017200      1772 017205      1773 017234      1776 017237      1778 017243
   1779 017270      1782 017273      1783 017304      1784 017315      1785 017321      1787 017325      1788 017354
   1790 017357      1792 017361      1796 017365      1799 017367      1800 017376      1801 017404      1802 017406
   1804 017407      1805 017414      1808 017415      1809 017423      1810 017435      1812 017437      1814 017445
   1815 017460      1817 017462      1818 017467      1819 017507      1821 017511      1824 017521      1827 017542
   1831 017555      1832 017557      1833 017565      1834 017567      1837 017573      1839 017633      1841 017666
   1843 017674      1844 017703      1845 017706      1850 017712      1854 017722      1855 017724      1856 017732
   1857 017734      1860 017740      1862 020000      1864 020033      1866 020041      1867 020050      1868 020053
   1873 020057      1878 020062      1880 020064      1881 020101      1886 020104      1888 020106      1889 020137
   1892 020144      1893 020151      1895 020162      1897 020164      1901 020167      1903 020171      1904 020222
   1907 020227      1909 020232      1910 020234      1914 020240      1915 020242      1916 020247      1918 020257
   1920 020261      1926 020264      1930 020272      1932 020300      1933 020317      1934 020343      1936 020344
   1939 020354      1944 020360      1945 020411      1948 020416      1949 020423      1951 020433      1952 020434
   1953 020436      1955 020445      1956 020446      1957 020450      1961 020457      1967 020463      1969 020465
   1970 020501      1971 020513      1972 020517      1974 020523      1975 020526      1977 020532      1979 020534
   1983 020537      1987 020541      1988 020543      1990 020544      1992 020546      1994 020550      1996 020557
   1998 020573      1999 020575      2001 020601      2003 020603      2007 020606      2009 020610      2012 020616
   2013 020645      2016 020652      2027 020654      2030 020673      2031 020677      2032 020707      2033 020711
   2034 020715      2035 020716      2038 020727      2041 020752      2042 020763      2043 020775      2044 021006
   2045 021021      2046 021025      2048 021031      2049 021035      2050 021047      2051 021057      2052 021066
   2053 021074      2054 021105      2055 021111      2056 021120      2059 021122      2069 021125      2061 021131
   2065 021133      2066 021136      2073 021137      2075 021141      2078 021151      2082 021160      2084 021162
   2088 021170      2090 021172      2095 021175      2097 021177      2099 021205      2105 021207      2109 021210
   2110 021213      2112 021215      2113 021217      2114 021223      2115 021226      2116 021231      2117 021245
   2118 021252      2119 021254      2120 021255      2123 021265      2128 021266      2130 021267      2132 021300
   2134 021311      2136 021322      2138 021333      2142 021334      2144 021336      2145 021343      2147 021400
   2149 021402      2150 021406      2155 021412      2163 021414      2166 021424      2167 021456      2168 021460
   2170 021461      2173 021462      2174 021466      2175 021500      2178 021504      2179 021513      2180 021522
   2181 021527      2185 021530      2189 021532      2190 021544      2192 021551      2194 021554      2195 021556
   2196 021560      2197 021562      2200 021563      2204 021564      2205 021567      2206 021573      2207 021577
   2208 021610      2209 021612      2210 021621      2211 021627      2213 021631      2214 021636      2218 021637
   2220 021640      2221 021643      2222 021645      2223 021647      2224 021662      2225 021664      2226 021666
   2227 021673      2228 021674      2232 021675      2240 021676      2241 021701      2243 021713      2244 021725
   2245 021731      2246 021746      2248 021747      2254 021750      2258 021752      2259 021757      2260 021762
   2261 021766      2262 021770      2266 021771      2268 021772      2269 021775      2270 021777      2272 022000
   2273 022006      2274 022011      2275 022015      2276 022025      2282 022026      2284 022027      2286 022031
   2290 022034      2291 022037      2295 022042      2296 022046      2300 022052      2305 022063      2306 022064
   2307 022074      2308 022076      2309 022107      2310 022110      2311 022121      2312 022122      2313 022123
   2314 022124      2315 022125      2316 022126      2317 022127      2318 022130      2319 022131      2320 022132
   2321 022133      2322 022145      2323 022157      2324 022171      2325 022203      2326 022215      2327 022227
   2328 022230      2329 022231      2330 022232      2331 022235      2332 022236      2333 022241      2335 022242
   2340 022243      2342 022245      2343 022261      2344 022267      2345 022302      2347 022304      2351 022307
   2353 022310      2354 022311      2355 022336      2357 022363      2359 022366      2361 022367      2363 022371
   2364 022405      2365 022413      2366 022426      2368 022430      2372 022433      2374 022434      2375 022435
   2376 022461      2378 022506      2380 022512      2382 022513      2384 022515      2385 022531      2386 022537
   2387 022552      2389 022554      2393 022557      2395 022560      2396 022561      2397 022605      2399 022632
   2401 022636      2403 022637      2405 022641      2406 022655      2407 022663      2408 022676      2410 022700
   2414 022703      2416 022705      2417 022721      2418 022727      2419 022742      2421 022744      2425 022747
   2427 022751      2428 022765      2429 022773      2430 023006      2432 023010      2436 023013      2438 023014
   2440 023024      2442 023025      2444 023027      2445 023043      2446 023051      2447 023064      2449 023066
   2453 023071      2455 023073      2456 023107      2457 023117      2458 023132      2460 023134      2464 023137
   2466 023141      2467 023155      2468 023163      2469 023176      2471 023200      2475 023203      2477 023204
   2478 023205      2479 023231      2481 023256      2483 023262      2485 023263      2487 023265      2488 023301
   2489 023307      2490 023322      2492 023324      2496 023327      2498 023330      2499 023331      2500 023355
   2502 023402      2504 023406      2506 023407      2508 023411      2509 023425      2510 023433      2511 023446
   2513 023450      2517 023453      2519 023454      2520 023455      2521 023501      2523 023526      2525 023532
   2527 023533      2529 023535      2530 023551      2531 023557      2532 023571      2534 023573      2538 023576
   2540 023577      2541 023600      2542 023624      2544 023651      2546 023655      2548 023656      2550 023660
   2551 023674      2552 023703      2553 023715      2555 023717      2559 023722      2561 023723      2562 023724
   2563 023750      2565 023775      2567 024001      2569 024002      2571 024004      2572 024020      2573 024027
   2574 024042      2576 024044      2580 024047      2582 024050      2583 024051      2584 024075      2586 024122
   2588 024126      2590 024127      2593 024131      2594 024132      2596 024133      2598 024135      2599 024137
   2601 024140      2606 024163      2609 024201      2610 024221      2611 024226      2612 024235      2614 024236
   2616 024241      2620 024245      2624 024246      2625 024252      2626 024256      2627 024263      2629 024264
   2633 024265      2635 024266      2636 024270      2638 024273      2642 024274      2644 024275      2647 024332
   2651 024373      2652 024376      2653 024443      2654 024526      2655 024536      2656 024556      2658 024570
   2659 024600      2661 024601      2665 024602      2677 024604      2678 024610      2679 024612      2680 024620
   2682 024623      2683 024632      2685 024637      2689 024640      2693 024641      2695 024644      2696 024650
   2697 024652      2700 024653      2702 024656      2703 024704      2704 024706      2707 024707      2708 024710
   2710 024712      2712 024714      2713 024716      2714 024730      2715 024732      2718 024734      2722 024735
   2726 024736      2728 024740      2729 024744      2730 024746      2733 024747      2735 024752      2736 024760
   2738 024762      2739 024766      2741 024776      2742 025005      2743 025014      2744 025016      2747 025020
   2748 025022      2752 025023      2756 025025      2757 025037      2758 025050      2759 025051      2760 025052
   2764 025053      2769 025054      2770 025065      2771 025073      2772 025100      2773 025102      2777 025103
   2781 025105      2782 025107      2783 025112      2784 025116      2786 025117      2787 025127      2791 025130
   2806 025132      2808 025134      2809 025140      2812 025141      2813 025143      2815 025146      2816 025151
   2817 025155      2819 025157      2820 025164      2822 025167      2824 025175      2829 025205      2830 025217
   2834 025224      2838 025225      2843 025227      2844 025237      2847 025261      2848 025311      2849 025313
   2853 025314      2854 025316      2856 025317      2860 025321      2861 025322      2862 025334      2863 025341
   2864 025343      2866 025345      2870 025346      2876 025347      2877 025355      2878 025361      2879 025363
   2880 025366      2881 025371      2882 025373      2883 025411      2884 025413      2885 025415      2886 025416
   2888 025431      2892 025432      2898 025434      2900 025436      2902 025440      2903 025462      2905 025464
   2908 025465      2910 025470      2911 025473      2912 025476      2913 025477      2914 025501      2916 025505
   2918 025506      2920 025507      2921 025515      2922 025522      2924 025525      2925 025527      2929 025530
   2931 025531      2933 025534      2935 025536      2937 025540      2938 025562      2940 025564      2943 025565
   2944 025573      2945 025601      2948 025603      2950 025610      2953 025615      2955 025617      2956 025623
   2957 025625      2958 025635      2960 025645      2962 025647      2963 025652      2964 025662      2967 025664
   2970 025670      2971 025672      2973 025673      2975 025676      2977 025700      2978 025704      2980 025706
   2983 025707      2985 025717      2987 025722      2988 025731      2992 025732      2994 025733      2996 025740
   2998 025753      2999 025754      3002 025757      3003 025761      3007 025762      3009 025763      3012 026000
   3017 026001      3019 026003      3025 026014      3030 026016      3031 026022      3032 026024      3036 026026
   3040 026030      3046 026042      3050 026044      3051 026045      3052 026055      3058 026056      3066 026057
   3067 026067      3068 026076      3070 026114      3071 026120      3072 026123      3073 026125      3074 026131
   3075 026136      3076 026137      3077 026142      3078 026144      3084 026145      3086 026146      3087 026150
   3091 026153      3092 026156      3093 026161      3094 026163      3095 026165      3096 026166      3098 026173
   3100 026174      3105 026175      3106 026200      3108 026201      3109 026202      3110 026222      3111 026223
   3112 026231      3113 026235      3115 026315      3116 026320      3117 026324      3118 026336      3119 026340
   3120 026342      3121 026347      3122 026354      3123 026356      3124 026371      3127 026375      3129 026376
   3133 026400      3134 026403      3135 026404      3137 026410      3139 026411      3141 026412      3143 026415
   3146 026445      3147 026453      3148 026460      3149 026464      3154 026474      3155 026475      3157 026501
   3159 026502      3164 026504      3166 026507      3167 026517      3168 026523      3169 026530      3170 026532
   3171 026534      3174 026537   17   30 026540      3323 026541      3324 026543   19   50 026544   19   52 026547
19   53 026550   19   55 026551   19   58 026552   19   60 026555   19   62 026557   19   63 026602   19   64 026605
19   65 026611   19   68 026621   19   70 026622   19   71 026626   19   73 026630   19   79 026647   19   84 026660
19   86 026661   19   88 026665   19   90 026666   19   92 026667   19   99 026723   19  101 026724   19  104 026727
19  106 026732   19  107 026756   19  108 026760   19  109 026763   19  111 026764   19  113 026765   19  116 027001
19  118 027002   19  120 027006   19  123 027007   19  124 027010   19  126 027014   19  127 027021   19  128 027025
19  130 027033      3899 027034      3901 027036      3902 027040      3903 027041      3904 027043      3905 027044
   3906 027046      3907 027047      3908 027051      3909 027052      3910 027054      3911 027055      3912 027057
   3913 027060      3914 027062      3915 027063      3916 027065      3917 027066      3918 027070      3919 027071
   3920 027077      3921 027100      3922 027102      3923 027103      3924 027105      3925 027106      3926 027110
   3927 027111      3928 027113      3929 027114      3930 027116      3931 027117      3932 027121      3933 027122
   3934 027124      3935 027125      3936 027127      3937 027130      3938 027132      3939 027133      3940 027135
   3941 027136      3942 027140      3943 027141      3944 027143      3945 027144      3946 027146      3947 027147
   3948 027151      3949 027152      3950 027154      3951 027155      3952 027157      3953 027160      3954 027162
   3955 027163      3956 027165      3957 027166      3958 027170      3959 027171      3960 027173      3961 027174
   3962 027176      3963 027177      3964 027201      3966 027202      3967 027205      3970 027206      3971 027211
   3973 027214      3974 027216   20   17 027220   20   18 027222   20   19 027224   20   24 027225   20   26 027227
20   27 027231   20   28 027237      3979 027240      3981 027244      3983 027245      3985 027251      3986 027252
   3987 027256      3988 027260      3990 027261      3992 027265      3993 027266      3994 027270      3996 027271
   3998 027275      3999 027277      4000 027303      4001 027305      4003 027306      4005 027312      4006 027313
   4007 027315      4009 027316      4011 027322      4012 027324      4013 027330      4014 027332      4016 027333
   4018 027337      4019 027340      4020 027342      4022 027343      4024 027347      4025 027350      4026 027354
   4027 027356      4029 027357      4031 027363      4032 027364      4033 027366      4035 027367      4037 027373
   4038 027374      4039 027400      4040 027402      4042 027403      4044 027407      4045 027410      4046 027412
   4048 027413      4050 027417      4051 027421      4052 027423      4054 027424      4056 027430      4057 027431
   4058 027433      4060 027434      4062 027440      4063 027442      4065 027443      4067 027447      4068 027453
   4069 027457      4070 027461      4072 027462      4074 027466      4075 027470      4076 027472      4078 027473
   4080 027477      4081 027501      4082 027503      4084 027504      4086 027510      4087 027512      4088 027514
   4090 027515      4092 027521      4093 027523      4094 027525      4096 027526      4098 027532      4099 027534
   4100 027536      4102 027537      4104 027543      4105 027547      4106 027553      4107 027555      4109 027556
   4111 027562      4112 027564      4113 027570      4114 027572      4116 027573      4118 027577      4119 027603
   4120 027604      4121 027606      4123 027607      4125 027613      4126 027615      4127 027621      4128 027623
   4130 027624      4132 027630      4133 027634      4134 027635      4135 027637      4137 027640      4139 027644
   4140 027646      4141 027652      4142 027654      4143 027660      4144 027662      4146 027663      4148 027667
   4149 027673      4150 027674      4151 027676      4153 027677      4155 027703      4156 027705      4157 027711
   4158 027713      4160 027714      4162 027720      4163 027724      4164 027725      4165 027727      4167 027730
   4169 027734      4170 027736      4171 027742      4172 027744      4174 027745      4176 027751      4177 027755
   4178 027756      4179 027760      4181 027761      4183 027765      4184 027767      4185 027773      4186 027775
   4188 027776      4190 030002      4191 030004      4192 030006      4193 030012      4194 030014      4196 030015
   4198 030021      4199 030025      4200 030026      4201 030030      4203 030031      4205 030035      4207 030045
   4208 030047      4209 030051      4211 030053      4212 030057      4213 030061      4215 030062      4217 030066
   4218 030072      4219 030076      4220 030100      4222 030101      4224 030105      4226 030115      4227 030117
   4228 030121      4230 030123      4231 030127      4232 030131      4234 030132      4236 030136      4237 030142
   4238 030143      4239 030145      4241 030146      4243 030152      4245 030161      4246 030164      4247 030166
   4249 030170      4250 030174      4251 030176      4253 030177      4255 030203      4256 030207      4257 030210
   4258 030212      4260 030213      4262 030217      4264 030226      4265 030230      4266 030232      4268 030234
   4269 030240      4270 030242      4272 030243      4274 030247      4275 030253      4276 030254      4277 030256
   4279 030257      4281 030263      4283 030272      4284 030274      4285 030276      4287 030300      4288 030304
   4289 030306      4291 030307      4293 030313      4294 030317      4295 030320      4296 030322      4298 030323
   4300 030327      4301 030331      4302 030335      4303 030337      4305 030340      4307 030344      4308 030350
   4309 030354      4310 030356      4312 030357      4314 030363      4315 030367      4316 030373      4317 030375
   4319 030376      4321 030402      4322 030403      4323 030405      4325 030406      4327 030412      4328 030414
   4329 030420      4330 030422      4332 030423      4334 030427      4335 030430      4336 030432      4338 030433
   4340 030437      4341 030441      4342 030445      4343 030447      4345 030450      4347 030454      4348 030455
   4349 030457      4351 030460      4353 030464      4354 030466      4355 030472      4356 030474      4358 030475
   4360 030501      4361 030502      4362 030504      4364 030505      4366 030511      4367 030513      4368 030517
   4369 030521      4371 030522      4373 030526      4374 030527      4375 030531      4377 030532      4379 030536
   4380 030540      4381 030544      4382 030546      4384 030547      4386 030553      4387 030555      4388 030557
   4390 030560      4392 030564      4393 030575      4394 030601      4395 030603      4397 030604      4399 030610
   4400 030612      4401 030614      4403 030615      4405 030621      4406 030623      4407 030624      4408 030626
   4409 030632      4410 030634      4412 030635      4414 030641      4415 030643      4416 030645      4418 030646
   4420 030652      4421 030654      4422 030655      4423 030657      4424 030663      4425 030665      4427 030666
   4429 030672      4430 030675      4431 030701      4432 030703      4434 030704      4436 030710      4437 030712
   4439 030713      4441 030717      4442 030720      4443 030722      4445 030723      4447 030727      4448 030730
   4449 030732      4451 030733      4453 030737      4455 030740      4457 030743      4458 030745      4460 030746
   4462 030751      4463 030752      4464 030756      4465 030760      4467 030761      4469 030765      4470 030766
   4471 030770      4473 030771      4475 030775      4476 031001      4477 031005      4478 031007      4480 031010
   4482 031014      4483 031020      4484 031023      4485 031025      4487 031026      4489 031032      4490 031036
   4491 031041      4492 031043      4494 031044      4496 031050      4497 031054      4498 031057      4499 031061
   4501 031062      4503 031066      4504 031070      4505 031072      4507 031073      4509 031077      4510 031101
   4511 031103      4513 031104      4515 031110      4516 031112      4517 031114      4519 031115      4521 031121
   4522 031123      4523 031125      4525 031126      4527 031132      4528 031134      4529 031136      4531 031137
   4533 031143      4534 031145      4535 031147      4537 031150      4539 031154      4540 031156      4541 031160
   4543 031161      4545 031165      4546 031167      4547 031171      4549 031172      4551 031176      4552 031200
   4553 031202      4555 031203      4557 031207      4558 031213      4559 031217      4560 031221      4562 031222
   4564 031226      4565 031235      4566 031241      4567 031243      4569 031244      4571 031250      4572 031254
   4573 031255      4574 031257      4576 031260      4578 031264      4579 031275      4580 031301      4581 031303
   4583 031304      4585 031310      4586 031314      4587 031315      4588 031317      4590 031320      4592 031324
   4593 031335      4594 031341      4595 031352      4596 031356      4597 031360      4599 031361      4601 031365
   4602 031371      4603 031372      4604 031374      4606 031375      4608 031401      4609 031412      4610 031416
   4611 031420      4613 031421      4615 031425      4616 031431      4617 031432      4618 031434      4620 031435
   4622 031441      4623 031450      4624 031454      4625 031456      4627 031457      4629 031463      4630 031467
   4631 031470      4632 031472      4634 031473      4636 031477      4637 031510      4638 031514      4639 031516
   4641 031517      4643 031523      4644 031534      4645 031537      4646 031543      4647 031545      4649 031546
   4651 031552      4652 031556      4653 031557      4654 031561      4656 031562      4658 031566      4660 031575
   4661 031606      4662 031611      4664 031613      4665 031617      4666 031621      4668 031622      4670 031626
   4671 031632      4672 031636      4673 031640      4675 031641      4677 031645      4679 031654      4680 031665
   4681 031670      4683 031672      4684 031676      4685 031700      4687 031701      4689 031705      4690 031711
   4691 031712      4692 031714      4694 031715      4696 031721      4698 031730      4699 031734      4700 031736
   4702 031740      4703 031744      4704 031746      4706 031747      4708 031753      4709 031757      4710 031760
   4711 031762      4713 031763      4715 031767      4717 031776      4718 032007      4719 032012      4721 032014
   4722 032020      4723 032022      4725 032023      4727 032027      4728 032033      4729 032034      4730 032036
   4732 032037      4734 032043      4736 032052      4737 032063      4738 032066      4740 032070      4741 032074
   4742 032076      4744 032077      4746 032103      4747 032107      4748 032110      4749 032112      4751 032113
   4753 032117      4754 032122      4755 032126      4756 032130      4758 032131      4760 032135      4761 032142
   4762 032146      4763 032150      4765 032151      4767 032155      4768 032162      4769 032166      4770 032170
   4772 032171      4774 032175      4775 032177      4776 032201      4778 032202      4780 032206      4781 032217
   4782 032223      4783 032225      4785 032226      4787 032232      4788 032234      4789 032236      4791 032237
   4793 032243      4794 032254      4795 032260      4796 032262      4798 032263      4800 032267      4801 032271
   4802 032273      4804 032274      4806 032300      4807 032311      4808 032315      4809 032317      4811 032320
   4813 032324      4814 032326      4815 032330      4817 032331      4819 032335      4820 032346      4821 032352
   4822 032354      4824 032355      4826 032361      4827 032363      4828 032365      4830 032366      4832 032372
   4833 032403      4834 032407      4835 032411      4837 032412      4839 032416      4840 032420      4841 032422
   4843 032423      4845 032427      4846 032440      4847 032444      4848 032446      4850 032447      4852 032453
   4853 032455      4854 032457      4856 032460      4858 032464      4859 032473      4860 032477      4861 032501
   4863 032502      4865 032506      4866 032507      4867 032511      4868 032513      4870 032514      4872 032520
   4873 032521      4874 032522      4875 032526      4876 032530      4878 032531      4880 032535      4881 032536
   4882 032540      4883 032542      4885 032543      4887 032547      4888 032550      4889 032551      4890 032555
   4891 032557      4893 032560      4895 032564      4896 032570      4897 032574      4898 032576      4900 032577
   4902 032600      4903 032602      4905 032603      4907 032607      4909 032610      4911 032614      4912 032620
   4914 032621      4916 032625      4917 032631      4919 032632      4921 032636      4922 032642      4924 032643
   4926 032647      4927 032653      4929 032654      4931 032660      4932 032661      4934 032662      4936 032666
   4937 032667      4939 032670      4941 032674      4943 032675      4945 032701      4946 032702      4947 032705
   4948 032707      4950 032710      4952 032714      4953 032716      4955 032717      4957 032721      4958 032722
   4959 032725      4961 032726      4963 032731      4964 032734      4965 032742      4966 032744      4968 032745
   4970 032751      4971 032757      4972 032760      4973 032762      4975 032763      4977 032767      4979 032770
   4981 032773      4982 032774      4983 032777      4984 033001      4986 033002      4988 033006      4989 033010
   4991 033011      4993 033016      4994 033017      4995 033023      4996 033025      4998 033026      5000 033032
   5001 033034      5003 033035      5005 033040      5006 033044      5008 033045      5010 033050      5011 033056
   5012 033060      5014 033061      5016 033065      5017 033073      5018 033074      5019 033076      5021 033077
   5023 033103      5025 033104      5027 033106      5028 033107      5029 033113      5030 033115      5032 033116
   5034 033122      5035 033124      5037 033125      5039 033137      5040 033143      5042 033144      5044 033146
   5045 033152      5047 033153      5049 033157      5050 033210      5052 033212      5053 033214      5055 033215
   5057 033216      5059 033217      5061 033220      5062 033224      5063 033226      5065 033227      5067 033234
   5068 033240      5069 033242      5071 033243      5073 033246      5074 033247      5075 033253      5076 033255
   5078 033256      5080 033257      5081 033263      5082 033265      5084 033266      5086 033270      5087 033274
   5089 033275      5091 033301      5092 033302      5094 033303      5096 033307      5098 033310      5100 033311
   5101 033312      5102 033314      5104 033315      5106 033316      5107 033322      5108 033324      5110 033325
   5112 033330      5113 033332      5115 033333      5117 033337      5118 033340      5119 033342      5121 033343
   5123 033347      5125 033350      5127 033353      5129 033354      5131 033356      5132 033360      5134 033361
   5136 033366      5137 033371      5138 033373      5140 033374      5142 033400      5143 033401      5145 033402
   5147 033406      5149 033407      5151 033412      5152 033414      5154 033415      5156 033420      5158 033421
   5160 033425      5162 033426      5164 033431      5166 033432      5168 033433      5169 033435      5171 033436
   5173 033437      5174 033441      5176 033442      5178 033470      5179 033502      5180 033503      5181 033507
   5182 033511      5184 033512      5186 033537      5187 033543      5188 033545      5190 033546      5192 033575
   5193 033576      5194 033600      5196 033601      5198 033605      5200 033606      5202 033612      5203 033614
   5204 033620      5205 033622      5207 033623      5209 033627      5210 033632      5211 033636      5212 033640
   5214 033641      5216 033645      5217 033650      5218 033654      5219 033656      5221 033657      5223 033663
   5224 033666      5225 033672      5226 033674      5228 033675      5230 033701      5231 033704      5232 033710
   5233 033712      5235 033713      5237 033717      5238 033722      5239 033726      5240 033730      5242 033731
   5244 033735      5245 033740      5246 033744      5247 033746      5249 033747      5251 033753      5252 033756
   5253 033762      5254 033764      5256 033765      5258 033771      5259 033774      5260 034000      5261 034002
   5263 034003      5265 034007      5266 034012      5267 034016      5268 034020      5270 034021      5272 034025
   5273 034030      5274 034034      5275 034036      5277 034037      5279 034043      5280 034045      5281 034056
   5282 034060      5284 034061      5286 034065      5287 034067      5288 034100      5289 034102      5291 034103
   5293 034107      5294 034110      5295 034112      5297 034113      5299 034114      5300 034116      5302 034117
   5304 034123      5306 034124      5308 034125      5310 034126      5312 034132      5313 034140      5314 034154
   5315 034160      5316 034162      5318 034163      5320 034167      5321 034170      5322 034172      5324 034173
   5326 034177      5328 034200      5330 034201      5331 034202      5332 034204      5334 034205      5336 034206
   5337 034210      5339 034211      5341 034212      5342 034222      5343 034235      5344 034241      5345 034243
   5347 034244      5350 034245      5352 034251      5354 034252      5356 034256      5357 034261      5358 034263
   5360 034264      5362 034270      5363 034273      5364 034275      5366 034276      5368 034302      5369 034303
   5370 034305      5372 034306      5374 034312      5376 034313      5378 034314      5379 034316      5381 034317
   5383 034320      5384 034336      5385 034341      5386 034343      5388 034344      5390 034350      5391 034351
   5392 034353      5394 034354      5396 034360      5398 034361      5400 034377      5401 034402      5402 034404
   5404 034405      5406 034407      5408 034410      5410 034413      5411 034415      5413 034416      5415 034421
   5416 034424      5417 034426      5419 034427      5421 034431      5423 034432      5425 034436      5426 034443
   5427 034445      5429 034446      5431 034452      5432 034457      5433 034461      5435 034462      5437 034466
   5438 034473      5439 034475      5441 034476      5443 034502      5444 034507      5445 034511      5447 034512
   5449 034516      5450 034523      5451 034525      5453 034526      5455 034532      5456 034550      5457 034553
   5458 034563      5459 034567      5460 034571      5462 034572      5464 034573      5465 034575      5467 034576
   5469 034602      5471 034603      5473 034625      5474 034626      5475 034630      5477 034631      5479 034632
   5480 034636      5481 034640      5483 034641      5485 034646      5486 034652      5487 034654      5489 034655
   5491 034656      5492 034662      5493 034664      5495 034665      5497 034666      5498 034672      5499 034674
   5501 034675      5503 034701      5504 034702      5505 034704      5507 034705      5509 034711      5511 034712
   5513 034721      5514 034724      5515 034726      5517 034727      5519 034733      5520 034736      5521 034740
   5523 034741      5525 034745      5526 034751      5527 034753      5529 034754      5531 034760      5533 034761
   5535 034770      5536 034773      5537 034775      5539 034776      5541 035002      5542 035005      5543 035007
   5545 035010      5547 035014      5548 035020      5549 035022      5551 035023      5553 035027      5555 035030
   5557 035037      5558 035042      5559 035044      5561 035045      5563 035060      5564 035063      5565 035065
   5567 035066      5569 035071      5570 035073      5572 035074      5574 035075      5575 035100      5576 035102
   5578 035103      5580 035106      5581 035110      5582 035111      5583 035113      5585 035114      5587 035120
   5588 035121      5589 035123      5591 035124      5593 035130      5595 035131      5597 035136      5598 035141
   5599 035143      5601 035144      5603 035151      5604 035154      5605 035156      5607 035157      5609 035162
   5610 035167      5611 035202      5612 035204      5613 035207      5614 035211      5616 035212      5618 035215
   5619 035222      5620 035235      5621 035237      5622 035242      5623 035244      5625 035245      5627 035252
   5628 035255      5629 035257      5630 035263      5631 035265      5633 035266      5635 035272      5636 035273
   5637 035275      5639 035276      5641 035302      5643 035303      5645 035317      5646 035325      5647 035330
   5648 035333      5649 035335      5651 035336      5653 035344      5654 035346      5655 035351      5656 035353
   5658 035354      5660 035362      5661 035364      5662 035367      5663 035371      5665 035372      5667 035376
   5668 035402      5669 035404      5671 035405      5673 035411      5675 035412      5677 035415      5678 035417
   5680 035420      5682 035423      5683 035427      5684 035431      5686 035432      5688 035434      5690 035435
   5692 035441      5693 035443      5695 035444      5697 035450      5698 035454      5699 035460      5700 035462
   5702 035463      5704 035467      5705 035473      5706 035474      5707 035476      5709 035477      5711 035501
   5713 035502      5715 035506      5717 035507      5719 035513      5720 035515      5721 035517      5723 035520
   5725 035524      5726 035526      5727 035530      5729 035531      5731 035535      5732 035537      5733 035541
   5735 035542      5737 035546      5738 035550      5739 035552      5741 035553      5743 035557      5744 035561
   5745 035563      5747 035564      5749 035570      5750 035572      5751 035574      5753 035575      5755 035601
   5756 035603      5757 035605      5759 035606      5761 035612      5762 035614      5763 035616      5765 035617
   5767 035623      5768 035625      5769 035627      5771 035630      5773 035634      5774 035636      5775 035640
   5777 035641      5779 035645      5780 035647      5781 035651      5783 035652      5785 035656      5786 035660
   5787 035662      5789 035663      5791 035667      5792 035671      5793 035673      5795 035674      5797 035700
   5798 035702      5799 035704      5801 035705      5803 035711      5804 035715      5805 035721      5806 035723
   5808 035724      5810 035730      5811 035734      5812 035740      5813 035742      5815 035743      5817 035747
   5818 035753      5819 035757      5820 035761      5822 035762      5824 035763      5826 035764      5828 035770
   5830 035771      5832 035772      5833 035776      5834 036000      5836 036001      5838 036004      5839 036005
   5840 036007      5842 036010      5844 036013      5845 036015      5847 036016      5849 036023      5850 036027
   5851 036031      5853 036032      5855 036036      5856 036044      5857 036050      5858 036052      5860 036053
   5862 036057      5863 036064      5864 036070      5865 036072      5867 036073      5869 036077      5870 036103
   5871 036107      5872 036113      5873 036115      5875 036116      5877 036122      5878 036123      5879 036125
   5881 036126      5883 036132      5885 036133      5887 036135      5888 036137      5890 036140      5892 036143
   5893 036145      5895 036146      5897 036150      5898 036153      5899 036161      5900 036164      5901 036166
   5903 036167      5905 036172      5906 036176      5907 036200      5908 036202      5910 036203      5912 036205
   5913 036210      5914 036216      5915 036221      5916 036223      5918 036224      5920 036227      5921 036233
   5922 036235      5923 036237      5925 036240      5927 036244      5928 036247      5929 036251      5931 036252
   5933 036256      5934 036261      5935 036263      5937 036264      5939 036270      5940 036273      5941 036275
   5943 036276      5945 036302      5946 036305      5947 036307      5949 036310      5951 036314      5952 036317
   5953 036321      5955 036322      5957 036326      5958 036331      5959 036333      5961 036334      5963 036340
   5964 036341      5965 036347      5966 036351      5968 036352      5970 036356      5972 036357      5974 036362
   5975 036366      5976 036371      5977 036373      5979 036374      5981 036377      5982 036403      5983 036406
   5984 036410      5986 036411      5988 036414      5989 036422      5991 036423      5993 036430      5994 036441
   5995 036450      5996 036452      5997 036454      5999 036455      6001 036461      6002 036462      6003 036470
   6004 036472      6006 036473      6008 036477      6010 036500      6012 036504      6013 036506      6015 036507
   6017 036513      6018 036515      6020 036516      6022 036522      6023 036524      6025 036525      6027 036531
   6028 036533      6030 036534      6032 036540      6033 036542      6035 036543      6037 036547      6038 036551
   6040 036552      6042 036556      6043 036560      6045 036561      6047 036565      6048 036571      6049 036575
   6050 036577      6052 036600      6054 036604      6055 036606      6057 036607      6059 036613      6060 036616
   6061 036622      6062 036624      6064 036625      6066 036631      6067 036633      6069 036634      6071 036640
   6072 036643      6073 036647      6074 036651      6076 036652      6078 036656      6079 036660      6081 036661
   6083 036665      6084 036666      6085 036672      6086 036674      6088 036675      6090 036701      6091 036703
   6093 036704      6095 036710      6096 036713      6097 036717      6098 036721      6100 036722      6102 036726
   6103 036730      6105 036731      6107 036735      6108 036740      6109 036744      6110 036746      6112 036747
   6114 036753      6115 036755      6117 036756      6119 036762      6120 036764      6122 036765      6124 036771
   6125 036773      6127 036774      6129 037000      6130 037002      6132 037003      6134 037007      6135 037011
   6137 037012      6139 037016      6140 037020      6142 037021      6144 037025      6145 037027      6147 037030
   6149 037034      6150 037036      6152 037037      6154 037043      6155 037045      6157 037046      6159 037052
   6160 037054      6162 037055      6164 037061      6165 037063      6167 037064      6169 037070      6170 037072
   6172 037073      6174 037077      6175 037101      6177 037102      6179 037106      6180 037112      6181 037116
   6182 037120      6184 037121      6186 037125      6187 037127      6189 037130      6191 037134      6192 037136
   6194 037137      6196 037143      6197 037145      6199 037146      6201 037152      6202 037154      6204 037155
   6206 037161      6207 037164      6208 037170      6209 037172      6211 037173      6213 037174      6215 037175
   6217 037201      6219 037202      6221 037205      6222 037210      6223 037212      6225 037213      6227 037214
   6228 037220      6229 037222      6231 037223      6233 037227      6234 037230      6235 037232      6237 037233
   6239 037237      6241 037240      6243 037243      6244 037246      6245 037250      6247 037251      6249 037252
   6250 037256      6251 037260      6253 037261      6255 037265      6256 037266      6257 037270      6259 037271
   6261 037275      6263 037276      6265 037301      6266 037304      6267 037306      6269 037307      6271 037310
   6272 037314      6273 037316      6275 037317      6277 037323      6278 037324      6279 037326      6281 037327
   6283 037333      6285 037334      6287 037337      6288 037341      6290 037342      6292 037343      6293 037347
   6294 037351      6296 037352      6298 037356      6299 037357      6300 037361      6302 037362      6304 037366
   6306 037367      6308 037372      6309 037375      6310 037377      6312 037400      6314 037401      6315 037405
   6316 037407      6318 037410      6320 037414      6321 037415      6322 037417      6324 037420      6326 037424
   6328 037425      6330 037430      6331 037433      6332 037435      6334 037436      6336 037437      6337 037443
   6338 037445      6340 037446      6342 037452      6343 037453      6344 037455      6346 037456      6348 037462
   6350 037463      6352 037466      6353 037471      6354 037473      6356 037474      6358 037475      6359 037501
   6360 037503      6362 037504      6364 037510      6365 037511      6366 037513      6368 037514      6370 037520
   6372 037521      6374 037524      6375 037527      6376 037531      6378 037532      6380 037533      6381 037537
   6382 037541      6384 037542      6386 037546      6387 037547      6388 037551      6390 037552      6392 037556
   6394 037557      6396 037562      6397 037565      6398 037567      6400 037570      6402 037571      6403 037575
   6404 037577      6406 037600      6408 037604      6409 037605      6410 037607      6412 037610      6414 037614
   6416 037615      6418 037620      6419 037623      6420 037625      6422 037626      6424 037627      6425 037633
   6426 037635      6428 037636      6430 037642      6431 037643      6432 037645      6434 037646      6436 037652
   6438 037653      6440 037656      6441 037660      6442 037664      6443 037666      6445 037667      6447 037672
   6448 037674      6449 037700      6450 037702      6452 037703      6454 037707      6455 037710      6456 037712
   6458 037713      6460 037717      6462 037720      6464 037724      6465 037727      6466 037733      6467 037735
   6469 037736      6471 037742      6472 037746      6473 037747      6474 037751      6476 037752      6478 040000
   6479 040002      6481 040003      6483 040007      6485 040010      6487 040011      6489 040012      6491 040015
   6493 040016      6495 040033      6496 040036      6497 040040      6499 040041      6501 040045      6502 040062
   6503 040066      6504 040070      6506 040071      6508 040075      6510 040076      6512 040105      6513 040110
   6514 040112      6516 040113      6518 040116      6520 040117      6522 040123      6523 040124      6524 040132
   6526 040133      6528 040135      6530 040136      6532 040142      6534 040143      6536 040150      6538 040151
   6540 040155      6542 040156   20   36 040157   20   59 040161   20   60 040164   20   62 040263   20   63 040270
20   64 040312   20   66 040313   20   68 040314   20   70 040317   21   31 040320   21   36 040322   21   37 040324
21   38 040331   21   39 040333   21   40 040345   21   41 040347   21   42 040351   21   44 040361   21   45 040362
21   47 040375   21   48 040377   21   49 040402   21   51 040404   22  139 040405   22  153 040407   22  154 040417
22  156 040426   22  158 040435   22  160 040436   22  161 040440   22  164 040453   22  166 040457   22  168 040461
22  172 040565   22  177 040714   23   18 040716   23   24 040717   23   25 040721   23   26 040724   23   27 040726
23   28 040734   23   29 040736   23   30 040743   23   31 040744   23   32 040745   23   35 040756   23   36 040762
23   39 040763


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
