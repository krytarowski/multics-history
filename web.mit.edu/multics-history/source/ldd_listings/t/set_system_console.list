	COMPILATION LISTING OF SEGMENT set_system_console
	Compiled by: Multics PL/I Compiler, Release 28e, of February 14, 1985
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 03/25/86  0847.6 mst Tue
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 /* format: off */
        7 
        8 set_system_console:
        9 ssc:
       10      proc;
       11 
       12 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
       13 	/*										*/
       14 	/* Purpose:									*/
       15 	/* 										*/
       16 	/*      This module implements the set_system_console operator console reconfiguration command. Its	*/
       17 	/* sole charter in life is to manipulate operator's consoles.				*/
       18 	/*										*/
       19 	/* Syntax:									*/
       20 	/*										*/
       21 	/* 	set_system_console {console_name} {-control_arg}					*/
       22 	/*										*/
       23 	/* Arguments:									*/
       24 	/*										*/
       25 	/*	console_name -	Is the name of the console to be affected by the call. If ommitted	*/
       26 	/*			the bootload console is assumed.				*/
       27 	/*										*/
       28 	/* Control arguments:								*/
       29 	/*										*/
       30 	/* 	-crash		specifies that the system is to crash if all attempts at console	*/
       31 	/*			recovery fail.						*/
       32 	/*										*/
       33 	/*	-reset		resets the bootload console. The given console_name is ignored.	*/
       34 	/*										*/
       35 	/*	-run		specifies that the system should continue to run as long as possible	*/
       36 	/*			without a configured console should all attempts at recovery fail.	*/
       37 	/*										*/
       38 	/*	-state	<state>	specifies that the state of the console should be changed to the 	*/
       39 	/*			given state. The state may have any of the following values:	*/
       40 	/*										*/
       41 	/*		on	makes the specified console the bootload console. The current	*/
       42 	/*			bootload console becomes an I/O device.				*/
       43 	/*										*/
       44 	/*		alt	makes the specified console an alternate console, available for use 	*/
       45 	/*			by console recovery.					*/
       46 	/*										*/
       47 	/*		io	makes the specified console an I/O device, available to IOI.	*/
       48 	/*										*/
       49 	/*		inop	makes the specified console an I/O device, available to IOI.	*/
       50 	/*										*/
       51 	/* The following control arguments are undocumented and are provided for system debug purposes:	*/
       52 	/*										*/
       53 	/*	-enable		enables the previously disabled console service.			*/
       54 	/*										*/
       55 	/*	-disable									*/
       56 	/*	-suspend		both of these arguments can be used to disable / suspend console	*/
       57 	/*			service. If the service is suspended the actions of the system will	*/
       58 	/*			be subject to the current crash / run state. If the system is setup	*/
       59 	/*			to crash on console recovery, it will.				*/
       60 	/*										*/
       61 	/* Note: 	Access to hphcs_ is required to utilize this command.				*/
       62 	/*										*/
       63 	/* Initial Coding:		830820							*/
       64 	/*										*/
       65 	/* Author:		E. A. Ranzenbach	(Ranzenbach.Multics@M)			*/
       66 	/* Location:		System-M.							*/
       67 	/* Release:		MR10.2							*/
       68 	/*										*/
       69 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
       70 	/*										*/
       71 	/* Modifications:									*/
       72 	/*										*/
       73 	/* Date:   Author			Reason						*/
       74 	/*										*/
       75 	/* 840420  Edward A. Ranzenbach	Added -prompt control argument.			*/
       76 	/*										*/
       77 	/*										*/
       78 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
       79 
       80 
       81      call process_arguments ();					/* get command options...		*/
       82 
       83      if setting_prompt then do;
       84 	call hphcs_$ocdcm_set_prompt (prompt_string);
       85 	return;
       86      end;
       87 
       88      if reconfiguring then do;
       89 	if reconfig_option = RESET_CONSOLE then console_name = "";		/* can only reset the bootload console..*/
       90 	call hphcs_$ocdcm_reconfigure (console_name, reconfig_option, code);	/* and let's do it...		*/
       91 	if code ^= 0 then call err (exit, code, "Operation failed.");
       92      end;
       93 
       94      return;							/* done...			*/
       95 
       96 process_arguments:
       97      proc;
       98      
       99 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
      100 	/*										*/
      101 	/* Internal procedure to obtain the argument count, check it for high and low bounds, and last but	*/
      102 	/* not least process the command arguments...						*/
      103 	/*										*/
      104 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
      105 
      106 
      107 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      108 
      109      min_arg_count = 1;
      110      max_arg_count = 5;
      111      command_name = "set_system_console";
      112 
      113      call cu_$af_arg_count (arg_count, code);
      114      if code = 0 then do;
      115 	call err (exit, error_table_$active_function, command_name);	/* can't be invoked as an AF...	*/
      116      end;
      117      else if code ^= error_table_$not_act_fnc then do;
      118 	call err (exit, code, command_name);
      119      end;
      120      else code = 0;
      121 
      122      if (arg_count < min_arg_count | arg_count > max_arg_count) then do;
      123 USAGE:	call ioa_$rs ("Usage:^-^a {console_name} {-control_args}", err_msg, 0, command_name);
      124 	call err (exit, code, err_msg);
      125      end;
      126 
      127      do idx = 1 to arg_count;
      128 
      129 	good_arg = false;
      130 
      131 	call cu_$arg_ptr (idx, arg_ptr, arg_leng, code);
      132 	if code ^= 0 then call err (exit, code, "Unable to obtain arg_ptr");
      133 
      134 	if arg_leng = 0 then call err (exit, error_table_$badopt,
      135 	     "Null input arguments are not allowed.");
      136 
      137 	if substr (arg, 1, 1) = "-" then do;				/* must be a control argument...	*/
      138 
      139 	     if arg = "-crash" then do;				/* -crash control argument...		*/
      140 		reconfiguring = true;
      141 		reconfig_option = CRASH_ON_CRF;			/* setup reconfiguration option...	*/
      142 	     end;
      143 	     
      144 	     else if arg = "-run" then do;				/* -run control argument...		*/
      145 		reconfig_option = RUN_ON_CRF;				/* setup reconfiguration option...	*/
      146 		reconfiguring = true;
      147 	     end;
      148 	     
      149 	     else if arg = "-enable" then do;				/* -enable control argument...	*/
      150 		reconfig_option = ENABLE_CONSOLE_SERVICE;		/* setup reconfiguration option...	*/
      151 		reconfiguring = true;
      152 	     end;
      153 
      154 	     else if arg = "-suspend" | arg = "-disable" then do;		/* -suspend | -disable control arg...	*/
      155 		reconfig_option = SUSPEND_CONSOLE_SERVICE;		/* setup reconfiguration option...	*/
      156 		reconfiguring = true;
      157 	     end;
      158 
      159 	     else if arg = "-reset" then do;				/* -reset control argument...		*/
      160 		reconfig_option = RESET_CONSOLE;			/* setup reconfiguration option...	*/
      161 		reconfiguring = true;
      162 	     end;
      163 	     
      164 	     else if arg = "-state" then do;				/* -state control argument...		*/
      165 		reconfiguring = true;
      166 		idx = idx + 1;					/* get the requested state...		*/
      167 		if idx > arg_count then call err (exit, error_table_$wrong_no_of_args, "A state must be supplied.");
      168 		call cu_$arg_ptr (idx, arg_ptr, arg_leng, code);
      169 		if code ^= 0 then call err (exit, code, "Unable to get state.");
      170 		
      171 		if arg = "on" then do;				/* ON state...			*/
      172 		     reconfig_option = MAKE_BOOTLOAD_CONSOLE;		/* setup reconfiguration option...	*/
      173 		end;
      174 
      175 		else if arg = "alt" then do;				/* ALT state...			*/
      176 		     reconfig_option = MAKE_ALTERNATE_CONSOLE;		/* setup reconfiguration option...	*/
      177 		end;
      178 
      179 		else if arg = "io" then do;				/* IO state...			*/
      180 		     reconfig_option = MAKE_IO_DEVICE;			/* setup reconfiguration option...	*/
      181 		end;
      182 
      183 		else if arg = "inop" then do;				/* INOP state...			*/
      184 		     reconfig_option = MAKE_INOP_DEVICE;		/* setup reconfiguration option...	*/
      185 		end;
      186 
      187 		else if arg = "off" then do;				/* OFF state...			*/
      188 		     reconfig_option = MAKE_UNAVAILABLE;		/* setup reconfiguration option...	*/
      189 		end;
      190 
      191 		else do;						/* BAD state...			*/
      192 		     call ioa_$rs ("^a is not a legal console state.", err_msg, 0, arg);
      193 		     call err (exit, 0, err_msg);			/* and let them know...		*/
      194 		end;
      195 	     end;
      196 
      197 	     else if arg = "-prompt" then do;
      198 /*		setting_prompt = true;	UNCOMMENT FOR -prompt FEATURE */
      199 		idx = idx + 1;					/* get the requested prompt...		*/
      200 		if idx <= arg_count then do;				/* get specified prompt...		*/
      201 		     call cu_$arg_ptr (idx, arg_ptr, arg_leng, code);
      202 		     if code ^= 0 then call err (exit, code, "Unable to get prompt string.");
      203 		     prompt_string = arg;
      204 		end;
      205 	     end;
      206 	     
      207 	     else do;
      208 		code = error_table_$badopt;				/* setup the proper error...		*/
      209 		call err (exit, code, arg);				/* and let them know...		*/
      210 	     end;
      211 	end;
      212 
      213 	else do;							/* must be the console_name...	*/
      214 	     if arg_leng = 4 then do;					/* console names are that long...	*/
      215 		if substr (arg, 1, 3) = "opc" then do;			/* do some preliminary checking...	*/
      216 		     if search (substr (arg, 4, 1), "abcdefgh") = 1 then do;/* must have "opcx" type name...	*/
      217 			console_name = arg;				/* console name looks OK...		*/
      218 			good_arg = true;
      219 		     end;
      220 		end;
      221 	     end;
      222 	     if ^good_arg then do;					/* BAD console name...		*/
      223 		call ioa_$rs ("^a is not a legal console name.", err_msg, 0, arg);
      224 		call err (exit, 0, err_msg);				/* let them know...			*/
      225 	     end;
      226 	end;
      227      end;
      228 
      229      return;
      230      
      231 end process_arguments;
      232 
      233 err:
      234      proc (exit_sw, err_code, ctl_str);
      235 	
      236 
      237 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
      238 	/*										*/
      239 	/* Internal procedure that reports errors to the user and optionally exits then main procedure.	*/
      240 	/* This last function is dependant upon the value of exit_sw. If found to be on a non-local go to	*/
      241 	/* is made to the "EXIT" label in the main procedure. If off this procedure returns to its caller.	*/
      242 	/*										*/
      243 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
      244 
      245 /* parameters... (I) = Input, (O) = Output */
      246 
      247      dcl	exit_sw			bit	(1)	parameter;	/* to exit or not to exit...	      (I) */
      248      dcl	err_code			fixed bin	(35)	parameter;	/* passed to com_err_...	      (I) */
      249      dcl	ctl_str			char	(*)	parameter;
      250      /* optional com_err_ ctl string...  (I) */
      251 	
      252 /* entries... */
      253 
      254      dcl	com_err_ entry() options(variable);
      255      dcl	requote_string_ entry (char(*)) returns(char(*));
      256 	
      257 /* miscellaneous... */
      258 
      259      dcl	requoted_ctl_str		char	(256)	init	("");
      260 
      261 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      262 
      263      if index (ctl_str, """") > 0 then do;
      264 	requoted_ctl_str = requote_string_ (ctl_str);
      265 	call com_err_ (err_code, command_name, requoted_ctl_str);
      266      end;
      267      else do;
      268 	call com_err_ (err_code, command_name, ctl_str);
      269      end;
      270      
      271      if exit_sw then go to EXIT;
      272 
      273      return;
      274 
      275 end err;
      276 
      277 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
      278 	/*										*/
      279 	/* 				Declarations...					*/
      280 	/* format: off									*/
      281 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
      282 
      283 /* entries... */
      284 
      285      dcl	cu_$af_arg_count entry (fixed bin, fixed bin(35));
      286      dcl	cu_$arg_ptr entry (fixed bin, ptr, fixed bin(21), fixed bin(35));
      287      dcl	hphcs_$ocdcm_reconfigure entry (char (4), fixed bin (17), fixed bin (35));
      288      dcl	ioa_$rs entry() options(variable);
      289      dcl	hphcs_$ocdcm_set_prompt entry (char (6));
      290      
      291 /* builtins... */
      292 
      293      dcl	index			builtin;
      294      dcl	null			builtin;
      295      dcl	search			builtin;
      296      dcl	substr			builtin;
      297      
      298 /* pointers... */
      299 
      300      dcl	arg_ptr			ptr		init	(null);	/* -> argument...			*/
      301 
      302 /* switches... */
      303 
      304      dcl	true			bit	(1)	init	("1"b)
      305 				internal static	options (constant);
      306 
      307      dcl	false			bit	(1)	init	("0"b)
      308 				internal static	options (constant);
      309 
      310      dcl	exit			bit	(1)	init	("1"b)	/* exit -> fatal error...		*/
      311 				internal static	options (constant);
      312 
      313      dcl	good_arg			bit	(1)	init	("0"b);	/* ON => valid argument...		*/
      314      dcl	reconfiguring		bit	(1)	init	("0"b);	/* ON => were reconfiguring consoles...	*/
      315      dcl	setting_prompt		bit	(1)	init	("0"b);	/* ON => were changing prompt...		*/
      316 
      317 /* error_table_... */
      318 
      319      dcl	error_table_$active_function	fixed bin	(35)	external static;
      320      dcl	error_table_$badopt		fixed bin	(35)	external static;
      321      dcl	error_table_$not_act_fnc	fixed bin	(35)	external static;
      322      dcl	error_table_$wrong_no_of_args	fixed bin	(35)	external static;
      323      
      324 /* miscellaneous... */
      325 
      326      dcl	arg			char	(arg_leng)		/* argument...			*/
      327 				based	(arg_ptr);
      328      dcl	arg_count			fixed bin	(17)	init	(0);	/* number of arguments...		*/
      329      dcl	arg_leng			fixed bin	(21)	init	(0);	/* length, (in bytes), of argument...	*/
      330      dcl	command_name		char	(32)	init	("");
      331      dcl	console_name		char	(4)	init	("");	/* name of the console to be affected...*/
      332      dcl	code			fixed bin	(35)	init	(0);	/* standard Multics error code...	*/
      333      dcl	err_msg			char	(80)	init	("");	/* to report errors...		*/
      334      dcl	idx			fixed bin	(17)	init	(0);	/* miscellaneous working index...	*/
      335      dcl	min_arg_count		fixed bin	(17)	init	(0);	/* minimum number of arguments...	*/
      336      dcl	max_arg_count		fixed bin	(17)	init	(0);	/* maximum number of arguments...	*/
      337      dcl	prompt_string		char	(6)	init	("");
      338      dcl	reconfig_option		fixed bin	(17)	init	(0);	/* action to take...		*/
      339 
      340 /* includes... */
      341 
  1     1 /*  START OF:	opc_reconfig_options.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
  1     2 
  1     3 	
  1     4 /****^  HISTORY COMMENTS:
  1     5*  1) change(85-09-09,Farley), approve(85-12-03,MCR7312),
  1     6*     audit(85-11-14,Fawcett), install(86-03-21,MR12.0-1033):
  1     7*     Add Lock and unlock
  1     8*     MCA.
  1     9*  2) change(85-12-03,Farley), approve(85-12-03,MCR7306),
  1    10*     audit(85-12-03,Fawcett), install(86-03-21,MR12.0-1033):
  1    11*     Fix bugs found while doing Dipper changes.
  1    12*  3) change(85-12-03,Farley), approve(85-12-03,MCR7312),
  1    13*     audit(85-12-03,Fawcett), install(86-03-21,MR12.0-1033):
  1    14*     Add BCE MCA lock and unlock.
  1    15*                                                   END HISTORY COMMENTS */
  1    16 
  1    17 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
  1    18 	/*										*/
  1    19 	/* Purpose:									*/
  1    20 	/*										*/
  1    21 	/* This include file contains the possible operator console reconfiguration options. These are 	*/
  1    22 	/* passed to hphcs_$ocdcm_reconfigure to effect explicit console reconfiguration.		*/
  1    23 	/*										*/
  1    24 	/* Initial Coding:		06/18/83							*/
  1    25 	/*										*/
  1    26 	/* Author:		E. A. Ranzenbach	(Ranzenbach.Multics@M)			*/
  1    27 	/* Location:		System-M.							*/
  1    28 	/* Release:		MR10.2							*/
  1    29 	/*										*/
  1    30 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
  1    31 	/*										*/
  1    32 	/* Modifications:									*/
  1    33 	/*										*/
  1    34 	/* Date    Author			Reason						*/
  1    35 	/*										*/
  1    36 	/* 840420  E. A. Ranzenbach		Added MAKE_UNAVAILABLE option.			*/
  1    37 	/* 850205  E. A. Ranzenbach		Added SEND_MC_IO option.				*/
  1    38 	/* 850520  Paul K Farley		Added LOCK_MCA_INPUT option.				*/
  1    39 	/*				Added UNLOCK_MCA_INPUT option.			*/
  1    40 	/*										*/
  1    41 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
  1    42 
  1    43 /* format: off */
  1    44 
  1    45      dcl	(
  1    46 	NOP			init	(0),			/* just to make sure...		*/
  1    47 	ENABLE_CONSOLE_SERVICE	init	(1),			/* allow syserr and normal I/O...	*/
  1    48 	SUSPEND_CONSOLE_SERVICE	init	(2),			/* the opposite of ENABLE...		*/
  1    49 	MAKE_BOOTLOAD_CONSOLE	init	(3),			/* make the bootload console...	*/
  1    50 	MAKE_ALTERNATE_CONSOLE	init	(4),			/* add console to alternate list...	*/
  1    51 	MAKE_IO_DEVICE		init	(5),			/* release the console to IOI...	*/
  1    52 	MAKE_INOP_DEVICE		init	(6),			/* release the console to IOI...	*/
  1    53 	RESET_CONSOLE		init	(7),			/* reset the bootload console...	*/
  1    54 	CRASH_ON_CRF		init	(8),			/* CRASH on console recovery failure... */
  1    55 	RUN_ON_CRF		init	(9),			/* RUN on console recovery failure... 	*/
  1    56 	MAKE_UNAVAILABLE		init	(10),			/* put console into the OFF state...	*/
  1    57           SEND_MC_IO		init	(11),			/* forward all I/O to the MC console... */
  1    58           LOCK_MCA_INPUT		init	(12),			/* Disable input path from console to MCA(in IMU)... */
  1    59           UNLOCK_MCA_INPUT		init	(13)			/* Enable input path from console to MCA(in IMU)... */
  1    60 	)
  1    61 				fixed bin	(17)
  1    62 				internal static	options (constant);
  1    63 
  1    64 /*  END OF:	opc_reconfig_options.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
      342 
      343 
      344 EXIT:
      345 
      346      return;
      347 
      348 end set_system_console;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    03/25/86  0847.6  set_system_console.pl1            >special_ldd>install>MR12.0-1033>set_system_console.pl1
342          1    03/21/86  1306.7  opc_reconfig_options.incl.pl1     >special_ldd>install>MR12.0-1033>opc_reconfig_options.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
CRASH_ON_CRF                           constant        fixed bin(17,0)          initial dcl 1-45 ref 141
ENABLE_CONSOLE_SERVICE                 constant        fixed bin(17,0)          initial dcl 1-45 ref 150
MAKE_ALTERNATE_CONSOLE                 constant        fixed bin(17,0)          initial dcl 1-45 ref 176
MAKE_BOOTLOAD_CONSOLE                  constant        fixed bin(17,0)          initial dcl 1-45 ref 172
MAKE_INOP_DEVICE                       constant        fixed bin(17,0)          initial dcl 1-45 ref 184
MAKE_IO_DEVICE                         constant        fixed bin(17,0)          initial dcl 1-45 ref 180
MAKE_UNAVAILABLE                       constant        fixed bin(17,0)          initial dcl 1-45 ref 188
RESET_CONSOLE                          constant        fixed bin(17,0)          initial dcl 1-45 ref 89 160
RUN_ON_CRF                             constant        fixed bin(17,0)          initial dcl 1-45 ref 145
SUSPEND_CONSOLE_SERVICE                constant        fixed bin(17,0)          initial dcl 1-45 ref 155
arg                                    based           char                     unaligned dcl 326 set ref 137 139 144 149 154 154
                                                                                  159 164 171 175 179 183 187 192* 197 203 209* 215
                                                                                  216 217 223*
arg_count                       000105 automatic       fixed bin(17,0)          initial dcl 328 set ref 113* 122 122 127 167 200
                                                                                  328*
arg_leng                        000106 automatic       fixed bin(21,0)          initial dcl 329 set ref 131* 134 137 139 144 149 154
                                                                                  154 159 164 168* 171 175 179 183 187 192 192 197
                                                                                  201* 203 209 209 214 215 216 217 223 223 329*
arg_ptr                         000100 automatic       pointer                  initial dcl 300 set ref 131* 137 139 144 149 154 154
                                                                                  159 164 168* 171 175 179 183 187 192 197 201* 203
                                                                                  209 215 216 217 223 300*
code                            000120 automatic       fixed bin(35,0)          initial dcl 332 set ref 90* 91 91* 113* 114 117 118*
                                                                                  120* 124* 131* 132 132* 168* 169 169* 201* 202
                                                                                  202* 208* 209* 332*
com_err_                        000032 constant        entry                    external dcl 254 ref 265 268
command_name                    000107 automatic       char(32)                 initial unaligned dcl 330 set ref 111* 115* 118*
                                                                                  123* 265* 268* 330*
console_name                    000117 automatic       char(4)                  initial unaligned dcl 331 set ref 89* 90* 217* 331*
ctl_str                                parameter       char                     unaligned dcl 249 set ref 233 263 264* 268*
cu_$af_arg_count                000010 constant        entry                    external dcl 285 ref 113
cu_$arg_ptr                     000012 constant        entry                    external dcl 286 ref 131 168 201
err_code                               parameter       fixed bin(35,0)          dcl 248 set ref 233 265* 268*
err_msg                         000121 automatic       char(80)                 initial unaligned dcl 333 set ref 123* 124* 192*
                                                                                  193* 223* 224* 333*
error_table_$active_function    000022 external static fixed bin(35,0)          dcl 319 set ref 115*
error_table_$badopt             000024 external static fixed bin(35,0)          dcl 320 set ref 134* 208
error_table_$not_act_fnc        000026 external static fixed bin(35,0)          dcl 321 ref 117
error_table_$wrong_no_of_args   000030 external static fixed bin(35,0)          dcl 322 set ref 167*
exit                            000000 constant        bit(1)                   initial unaligned dcl 310 set ref 91* 115* 118* 124*
                                                                                  132* 134* 167* 169* 193* 202* 209* 224*
exit_sw                                parameter       bit(1)                   unaligned dcl 247 ref 233 271
false                                  constant        bit(1)                   initial unaligned dcl 307 ref 129
good_arg                        000102 automatic       bit(1)                   initial unaligned dcl 313 set ref 129* 218* 222 313*
hphcs_$ocdcm_reconfigure        000014 constant        entry                    external dcl 287 ref 90
hphcs_$ocdcm_set_prompt         000020 constant        entry                    external dcl 289 ref 84
idx                             000145 automatic       fixed bin(17,0)          initial dcl 334 set ref 127* 131* 166* 166 167 168*
                                                                                  199* 199 200 201* 334*
index                                                  builtin function         dcl 293 ref 263
ioa_$rs                         000016 constant        entry                    external dcl 288 ref 123 192 223
max_arg_count                   000147 automatic       fixed bin(17,0)          initial dcl 336 set ref 110* 122 336*
min_arg_count                   000146 automatic       fixed bin(17,0)          initial dcl 335 set ref 109* 122 335*
null                                                   builtin function         dcl 294 ref 300
prompt_string                   000150 automatic       char(6)                  initial unaligned dcl 337 set ref 84* 203* 337*
reconfig_option                 000152 automatic       fixed bin(17,0)          initial dcl 338 set ref 89 90* 141* 145* 150* 155*
                                                                                  160* 172* 176* 180* 184* 188* 338*
reconfiguring                   000103 automatic       bit(1)                   initial unaligned dcl 314 set ref 88 140* 146* 151*
                                                                                  156* 161* 165* 314*
requote_string_                 000034 constant        entry                    external dcl 255 ref 264
requoted_ctl_str                000172 automatic       char(256)                initial unaligned dcl 259 set ref 259* 264* 265*
search                                                 builtin function         dcl 295 ref 216
setting_prompt                  000104 automatic       bit(1)                   initial unaligned dcl 315 set ref 83 315*
substr                                                 builtin function         dcl 296 ref 137 215 216
true                            000000 constant        bit(1)                   initial unaligned dcl 304 ref 140 146 151 156 161
                                                                                  165 218

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
LOCK_MCA_INPUT                         internal static fixed bin(17,0)          initial dcl 1-45
NOP                                    internal static fixed bin(17,0)          initial dcl 1-45
SEND_MC_IO                             internal static fixed bin(17,0)          initial dcl 1-45
UNLOCK_MCA_INPUT                       internal static fixed bin(17,0)          initial dcl 1-45

NAMES DECLARED BY EXPLICIT CONTEXT.
EXIT                            000305 constant        label                    dcl 344 ref 271
USAGE                           000370 constant        label                    dcl 123
err                             001157 constant        entry                    internal dcl 233 ref 91 115 118 124 132 134 167 169
                                                                                  193 202 209 224
process_arguments               000306 constant        entry                    internal dcl 96 ref 81
set_system_console              000226 constant        entry                    external dcl 8
ssc                             000216 constant        entry                    external dcl 8

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1632        1670    1457        1642
Length      2122    1457        36         215     152           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
ssc                                 270 external procedure  is an external procedure.  
process_arguments                       internal procedure  shares stack frame of external procedure ssc.  
err                                     internal procedure  shares stack frame of external procedure ssc.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
ssc                      000100 arg_ptr                     ssc
                         000102 good_arg                    ssc
                         000103 reconfiguring               ssc
                         000104 setting_prompt              ssc
                         000105 arg_count                   ssc
                         000106 arg_leng                    ssc
                         000107 command_name                ssc
                         000117 console_name                ssc
                         000120 code                        ssc
                         000121 err_msg                     ssc
                         000145 idx                         ssc
                         000146 min_arg_count               ssc
                         000147 max_arg_count               ssc
                         000150 prompt_string               ssc
                         000152 reconfig_option             ssc
                         000172 requoted_ctl_str            err

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return              shorten_stack       ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      cu_$af_arg_count              cu_$arg_ptr                   hphcs_$ocdcm_reconfigure
hphcs_$ocdcm_set_prompt       ioa_$rs                       requote_string_

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$active_function  error_table_$badopt           error_table_$not_act_fnc      error_table_$wrong_no_of_args




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
    300 000165       313 000167       314 000170       315 000171       328 000172       329 000173       330 000174
    331 000177       332 000201       333 000202       334 000205       335 000206       336 000207       337 000210
    338 000212         8 000215        81 000234        83 000235        84 000237        85 000246        88 000247
     89 000251        90 000256        91 000271        94 000304       344 000305        96 000306       109 000307
    110 000311       111 000313       113 000316       114 000327       115 000331       116 000352       117 000353
    118 000356       119 000361       120 000362       122 000363       123 000370       124 000421       127 000424
    129 000433       131 000434       132 000451       134 000461       137 000507       139 000514       140 000521
    141 000523       142 000525       144 000526       145 000532       146 000534       147 000536       149 000537
    150 000543       151 000545       152 000547       154 000550       155 000560       156 000562       157 000564
    159 000565       160 000571       161 000573       162 000575       164 000576       165 000602       166 000604
    167 000605       168 000634       169 000651       171 000664       172 000672       173 000674       175 000675
    176 000701       177 000703       179 000704       180 000710       181 000712       183 000713       184 000717
    185 000721       187 000722       188 000726       189 000730       192 000731       193 000765       195 000771
    197 000772       199 000776       200 000777       201 001002       202 001017       203 001027       205 001034
    208 001035       209 001040       211 001063       214 001064       215 001067       216 001073       217 001104
    218 001110       222 001112       223 001114       224 001150       227 001154       229 001156       233 001157
    259 001170       263 001173       264 001206       265 001234       266 001257       268 001260       271 001302
    273 001310


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
