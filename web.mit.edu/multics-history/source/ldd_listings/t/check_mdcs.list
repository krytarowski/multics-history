	COMPILATION LISTING OF SEGMENT check_mdcs
	Compiled by: Multics PL/I Compiler, Release 27d, of October 11, 1982
	Compiled at: Honeywell LISD Phoenix, System M
	Compiled on: 11/15/82  1733.4 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 /* CHECK_MDCS: Command to validate the contents of a master direcotry control segment */
       12 
       13 /* Written June 1976 by Larry Johnson */
       14 
       15 check_mdcs: proc;
       16 
       17 dcl  name char (10) int static options (constant) init ("check_mdcs");
       18 dcl  code fixed bin (35);
       19 dcl  arg_ptr ptr;
       20 dcl  arg_len fixed bin;
       21 dcl  arg char (arg_len) based (arg_ptr);
       22 dcl  volume char (32);
       23 
       24 dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
       25 dcl  ioa_ entry options (variable);
       26 dcl  com_err_ entry options (variable);
       27 dcl  mdc_priv_$validate_uidpaths entry (char (*), fixed bin (35));
       28 
       29 dcl  error_table_$bad_uidpath ext fixed bin (35);
       30 
       31 	call cu_$arg_ptr (1, arg_ptr, arg_len, code);
       32 	if code ^= 0 then do;
       33 	     call com_err_ (0, name, "Usage: ^a volume", name);
       34 	     return;
       35 	end;
       36 
       37 	volume = arg;
       38 
       39 	call mdc_priv_$validate_uidpaths (volume, code);
       40 	if code = 0 then call ioa_ ("^a: No errors detected in ^a.mdcs", name, volume);
       41 	else if code = error_table_$bad_uidpath then
       42 	     call com_err_ (0, name, "One or more uidpaths in ^a.mdcs were invalid and were deleted.", volume);
       43 	else call com_err_ (code, name, "^a", volume);
       44 	return;
       45 
       46      end check_mdcs;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/15/82  1519.2  check_mdcs.pl1                    >dumps>old>recomp>check_mdcs.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
arg                                    based           char                     unaligned dcl 21 ref 37
arg_len                         000104 automatic       fixed bin(17,0)          dcl 20 set ref 31* 37
arg_ptr                         000102 automatic       pointer                  dcl 19 set ref 31* 37
code                            000100 automatic       fixed bin(35,0)          dcl 18 set ref 31* 32 39* 40 41 43*
com_err_                        000014 constant        entry                    external dcl 26 ref 33 41 43
cu_$arg_ptr                     000010 constant        entry                    external dcl 24 ref 31
error_table_$bad_uidpath        000020 external static fixed bin(35,0)          dcl 29 ref 41
ioa_                            000012 constant        entry                    external dcl 25 ref 40
mdc_priv_$validate_uidpaths     000016 constant        entry                    external dcl 27 ref 39
name                            000000 constant        char(10)                 initial unaligned dcl 17 set ref 33* 33* 40* 41* 43*
volume                          000105 automatic       char(32)                 unaligned dcl 22 set ref 37* 39* 40* 41* 43*

NAME DECLARED BY EXPLICIT CONTEXT.
check_mdcs                      000051 constant        entry                    external dcl 15

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       360         402     266         370
Length       552     266        22         133      72           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
check_mdcs                          124 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
check_mdcs               000100 code                        check_mdcs
                         000102 arg_ptr                     check_mdcs
                         000104 arg_len                     check_mdcs
                         000105 volume                      check_mdcs

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return              ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      cu_$arg_ptr                   ioa_                          mdc_priv_$validate_uidpaths

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$bad_uidpath




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     15 000050        31 000056        32 000074        33 000076        34 000131        37 000132        39 000137
     40 000154        41 000203        43 000237        44 000265


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
