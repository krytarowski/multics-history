ASSEMBLY LISTING OF SEGMENT >special_ldd>install>MR12.0-1206>pnt_admin_gate_.alm             
ASSEMBLED ON:	11/05/86  1048.6 mst Wed
OPTIONS USED:	list 
ASSEMBLED BY:	ALM Version  6.7  October 1986  
ASSEMBLER CREATED:	10/08/86  1557.5 mst Wed

                                     1  " ***********************************************************
                                     2  " *                                                         *
                                     3  " * Copyright, (C) Honeywell Information Systems Inc., 1984 *
                                     4  " *                                                         *
                                     5  " ***********************************************************
                                     6  " PNT_ADMIN_GATE_: This gate provides various privileged entrypoints
                                     7  " to manipulate the Ring-1 PNT.
                                     8  "
                                     9  " Written 1984-08-09 by E. Swenson
                                    10  " Modified 1984-09-18 by E. Swenson to add entries from the now-unprivileged
                                    11  "   pnt_fs_gate_.
                                    12  " Modified 1985-01-26 by E. Swenson to remove chname_file and rebuild entries.
                                    13  
    000000                          14  	name	pnt_admin_gate_
                                    15  
                                    16  	include	gate_macros
                                   1-1  " BEGIN INCLUDE FILE ...... gate_macros.incl.alm
                                   1-2  "   Last modified 6/77 by N. Morris, B. Greenberg, & T. VanVleck
                                   1-3  "   Modified 741212 by PG to inhibit while computing virtual CPU time
                                   1-4  "   Modified 83-03-14 by E. N. Kittlitz to clear IR
                                   1-5  "   Modified 83-06-01 BIM for ring alarm polling
                                   1-6  "   Modified 85-04-03 by Keith Loepere to make polling a little smarter.
                                   1-7  
                                   1-8  " This file contains several macros used when generating gate segments.
                                   1-9  " The major macros that are defined are:
                                  1-10  "
                                  1-11  "	gate_info		general setup code for normal gates
                                  1-12  "	hardcore_gate_info	general setup code for hardcore gates
                                  1-13  "	bad_dir_handler	setup and handler for bad_dir_ condition (goes at bottom)
                                  1-14  "	bad_dir_handler_entry	entrypoint for above (goes at top)
                                  1-15  "	gate		to define a normal gate
                                  1-16  "	hgate		to define a hardcore gate
                                  1-17  "	fgate		to define a fast hardcore gate
                                  1-18  "
                                  1-19  
                                  1-20  
    000000                        1-21  	maclist	off
                                  1-22  
                                  1-23  
                                  1-24  " HGATE - define a hardcore gate entry
                                  1-25  "
                                  1-26  "	hgate	gatename,procedure,entry,args{,bad_dir_trap}
                                  1-27  "
                                  1-28  " The entrypoint gatename is defined in the gate segment.  If args
                                  1-29  " is nonzero, the number of arguments passed to gatename must be
                                  1-30  " equal to args.  When gatename is called, it will in turn call
                                  1-31  " procedure$entry.
                                  1-32  "
                                  1-33  
                                  1-34  macro	hgate
                              1   1-35  	gentry	&1,&4*2,&1.t
                              2   1-36  	tsx2	.setup
                              3   1-37  &=&5,bad_dir_trap&[	tsx0	.set_dir_trap
                              4   1-38  &]	ldi	=0,dl
                              5   1-39  	short_call &2$&3(ap|0)
                              6   1-40  	eppbp	lp|&1.t
                              7   1-41  	tra	.return_code
                              8   1-42  	maclist	restore
                              9   1-43  	use	linkage
                             10   1-44  	even
                             11   1-45  	maclist	on,save
                             12   1-46  &1.t:
                             13   1-47  	bss	,gate_entry_data_size
                             14   1-48  
                             15   1-49  	maclist	restore
                             16   1-50  &end
                                  1-51  
                                  1-52  
                                  1-53  " FGATE - define a fast hardcore gate
                                  1-54  "
                                  1-55  "	fgate	gatename,procedure,entry
                                  1-56  "
                                  1-57  
                                  1-58  macro	fgate
                              1   1-59  	gentry	&1,0,0
                              2   1-60  	ldi	=0,dl
                              3   1-61  	epplp	.my_lp,*
                              4   1-62  	tra	&2$&3
                              5   1-63  
                              6   1-64  	maclist	off
                              7   1-65  &end
                                  1-66  
                                  1-67  
                                  1-68  " GATE - define a normal gate entry
                                  1-69  "
                                  1-70  "	gate	gatename,procedure,entry,args
                                  1-71  "
                                  1-72  
                                  1-73  macro	gate
                              1   1-74  	gentry	&1,&4*2,0
                              2   1-75  	tsx2	.setup
                              3   1-76  	ldi	=0,dl
                              4   1-77  	short_call &2$&3(ap|0)
                              5   1-78  	return
                              6   1-79  
                              7   1-80  	maclist	restore
                              8   1-81  &end
                                  1-82  
                                  1-83  
                                  1-84  
                                  1-85  macro	gentry
                              1   1-86  	maclist	on,save
                              2   1-87  	segdef	&1
                              3   1-88  	maclist	restore
                              4   1-89  	use	transfer_vector
                              5   1-90  	maclist	on,save
                              6   1-91  &1:
                              7   1-92  	tra	&1.e
                              8   1-93  	maclist	restore
                              9   1-94  	use	main
                             10   1-95  	maclist	on,save
                             11   1-96  	zero	&2,&3
                             12   1-97  &1.e:
                             13   1-98  &end
                                  1-99  
                                 1-100  
                                 1-101  " HARDCORE_GATE_INFO - general info for hardcore gates
                                 1-102  
                                 1-103  macro	hardcore_gate_info
                              1  1-104  	maclist	on,save
                              2  1-105  	name	&1
                              3  1-106  
                              4  1-107  	include	stack_header
                              5  1-108  
                              6  1-109  	include	stack_frame
                              7  1-110  	include	gate_data
                              8  1-111  
                              9  1-112  	maclist	restore
                             10  1-113  	eject
                             11  1-114  
                             12  1-115  	tempd	.temp
                             13  1-116  	tempd	.label_variable(0)
                             14  1-117  	tempd	.time1,.time2
                             15  1-118  	tempd	.unwinder_arglist(0)
                             16  1-119  	tempd	.on_unit(5)
                             17  1-120  	temp	.pf,.entryp
                             18  1-121  	tempd	.vfl_arglist(2)
                             19  1-122  	tempd	.mcptr
                             20  1-123  
                             21  1-124  	use	transfer_vector
                             22  1-125  	equ	.tv_begin,*
                             23  1-126  
                             24  1-127  	tra	.actor
                             25  1-128  
                             26  1-129  	use	tv_end
                             27  1-130  	entrybound
                             28  1-131  
                             29  1-132  	segdef	.tv_end
                             30  1-133  .tv_end:	vfd	14/(*-.tv_begin)
                             31  1-134  
                             32  1-135  	use	main
                             33  1-136  
                             34  1-137  	segdef	.my_lp
                             35  1-138  	even
                             36  1-139  .my_lp:	bss	,2
                             37  1-140  
                             38  1-141  	join	/text/transfer_vector,tv_end,main
                             39  1-142  
                             40  1-143  	use	linkage
                             41  1-144  	join	/link/linkage
                             42  1-145  
                             43  1-146  	use	main
                             44  1-147  
                             45  1-148  	maclist	restore
                             46  1-149  	eject
                             47  1-150  
                             48  1-151  .actor:	epplp	.my_lp,*
                             49  1-152  	maclist	restore
                             50  1-153  	gate_actor
                             51  1-154  
                             52  1-155  
                             53  1-156  
                             54  1-157  .setup:	push
                             55  1-158  	epplp	.my_lp,*
                             56  1-159  	sprilp	sp|stack_frame.lp_ptr
                             57  1-160  
                             58  1-161  	maclist	restore
                             59  1-162  	gcheck
                             60  1-163  
                             61  1-164  	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
                             62  1-165  	rccl	sys_info$clock_,*	calculate times
                             63  1-166  	sbaq	pds$cpu_time
                             64  1-167  	staq	.time1
                             65  1-168  	sbaq	pds$virtual_delta
                             66  1-169  	staq	.time2
                             67  1-170  	lda	pds$page_waits
                             68  1-171  	sta	.pf
                             69  1-172  	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
                             70  1-173  	tra	0,2
                             71  1-174  
                             72  1-175  	maclist	restore
                             73  1-176  	eject
                             74  1-177  
                             75  1-178  .return_code:
                             76  1-179  
                             77  1-180  	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
                             78  1-181  	rccl	sys_info$clock_,*	calculate times
                             79  1-182  	sbaq	pds$cpu_time
                             80  1-183  	staq	.temp
                             81  1-184  	sbaq	.time1
                             82  1-185  	adaq	bp|gate_entry_data.cpu_time
                             83  1-186  	staq	bp|gate_entry_data.cpu_time
                             84  1-187  	ldaq	.temp
                             85  1-188  	sbaq	pds$virtual_delta
                             86  1-189  	sbaq	.time2
                             87  1-190  	adaq	bp|gate_entry_data.vcpu_time
                             88  1-191  	staq	bp|gate_entry_data.vcpu_time
                             89  1-192  	lda	pds$page_waits
                             90  1-193  	sbla	.pf
                             91  1-194  	asa	bp|gate_entry_data.page_waits
                             92  1-195  	aos	bp|gate_entry_data.calls
                             93  1-196  	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
                             94  1-197  
                             95  1-198  			" Poll for ring alarms
                             96  1-199  	sra	.temp	Borrow from time calc
                             97  1-200  	szn	.temp	Zero?
                             98  1-201  	tze	.return_code_return
                             99  1-202  
                            100  1-203  	epp1	sp|stack_frame.prev_sp,*	"possible ring alarm
                            101  1-204  	epaq	pr1|stack_frame.return_ptr,*
                            102  1-205  	ana	7,dl	" ring number to which we return
                            103  1-206  	cmpa	.temp
                            104  1-207  	tpl	.ring_alarm	" ring alarm will occur
                            105  1-208  
                            106  1-209  .return_code_return:
                            107  1-210  	return
                            108  1-211  
                            109  1-212  .ring_alarm:		" perhaps we can handle without faults?
                            110  1-213  
                            111  1-214  	aos	bp|gate_entry_data.ring_alarms
                            112  1-215  	stz	.temp	" return argument for ring_alarm$poll
                            113  1-216  	ldaq	.one_arg_header
                            114  1-217  	staq	.ring_alarm_arg_list
                            115  1-218  	epp1	.temp
                            116  1-219  	spri1	.ring_alarm_arg_list+2
                            117  1-220  	eppap	.ring_alarm_arg_list
                            118  1-221  	short_call ring_alarm$poll
                            119  1-222  	szn	.temp
                            120  1-223  	tze	.return_code_return
                            121  1-224  	eppsp	sp|stack_frame.prev_sp,*
                            122  1-225  	sprisp	pds$pre_empt_poll_return          " short-return from here
                            123  1-226  	epp1	sb|stack_header.stack_begin_ptr,* " abandoning this stack frame.
                            124  1-227  	spri1	sb|stack_header.stack_end_ptr
                            125  1-228  " Leave SB as stack_0, so pxss can get to operators.
                            126  1-229  	tra	pxss$pre_empt_poll
                            127  1-230  
                            128  1-231  	tempd	.ring_alarm_arg_list(2)
                            129  1-232  	even
                            130  1-233  .one_arg_header:
                            131  1-234  	vfd	17/2,1/0,18/4
                            132  1-235  	vfd	18/0,18/0
                            133  1-236  
                            134  1-237  
                            135  1-238  	maclist	restore
                            136  1-239  	eject
                            137  1-240  	maclist	restore
                            138  1-241  &end
                                 1-242  
                                 1-243  
                                 1-244  " BAD_DIR_HANDLER - code to setup and handle bad_dir_ condition
                                 1-245  "			put this after the last hgate macro
                                 1-246  
                                 1-247  macro	bad_dir_handler
                              1  1-248  	maclist	on,save
                              2  1-249  
                              3  1-250  	include	on_unit
                              4  1-251  
                              5  1-252  	use	transfer_vector
                              6  1-253  .handler_entry:
                              7  1-254  	tra	.handler
                              8  1-255  .handler_restart_entry:
                              9  1-256  	tra	.handler_restart_point
                             10  1-257  
                             11  1-258  	use	main
                             12  1-259  .set_dir_trap:
                             13  1-260  	stx0	.entryp		save for restart
                             14  1-261  
                             15  1-262  	mlr	(),(pr),fill(000)
                             16  1-263  	desc9a	0,0
                             17  1-264  	desc9a	.on_unit,10*4
                             18  1-265  	eppbp	.bad_dir_name
                             19  1-266  	spribp	.on_unit+on_unit.name
                             20  1-267  	eppbp	.handler_entry
                             21  1-268  	spribp	.on_unit+on_unit.body
                             22  1-269  	lxl1	.bad_dir_desc
                             23  1-270  	sxl1	.on_unit+on_unit.size
                             24  1-271  	eaa	.on_unit		set up on-unit for bad_dir_
                             25  1-272  	sbla	sp|0,du		.. make rel to sp
                             26  1-273  	sta	sp|stack_frame.on_unit_rel_ptrs
                             27  1-274  	lda	stack_frame.condition_bit,dl
                             28  1-275  	orsa	sp|stack_frame.flag_word
                             29  1-276  	tra	0,0
                             30  1-277  
                             31  1-278  	string	bad_dir_
                             32  1-279  
                             33  1-280  
                             34  1-281  
                             35  1-282  .handler:	epaq	sp|0		verify that call came from ring 0
                             36  1-283  	cana	-1,dl		check ring number in AL
                             37  1-284  	tze	*+2
                             38  1-285  	zero	0		go way kid you bother me
                             39  1-286  
                             40  1-287  	push			" ok, we like the call
                             41  1-288  	epplp	.my_lp,*
                             42  1-289  	ldx0	ap|0		get display
                             43  1-290  	eppbp	ap|2,0*
                             44  1-291  	lda	bp|stack_frame.prev_sp
                             45  1-292  	cana	=o700000,dl	from another ring?
                             46  1-293  	tze	.continue_signal	if not, back to signal_
                             47  1-294  	eppap	ap|2,*		Get mcptr
                             48  1-295  	eppap	ap|0,*		..
                             49  1-296  	spriap	bp|.mcptr		.. save in gate frame
                             50  1-297  	spribp	.label_variable+2
                             51  1-298  	eppbp	.handler_restart_entry
                             52  1-299  	spribp	.label_variable
                             53  1-300  	eppbp	.label_variable
                             54  1-301  	spribp	.unwinder_arglist+2
                             55  1-302  	fld	=1b24,dl
                             56  1-303  	staq	.unwinder_arglist
                             57  1-304  	call	unwinder_$unwinder_(.unwinder_arglist)
                             58  1-305  
                             59  1-306  .continue_signal:
                             60  1-307  	lda	=o400000,du	"1"b
                             61  1-308  	sta	ap|10,*		set continue bit
                             62  1-309  	return
                             63  1-310  
                             64  1-311  .handler_restart_point:
                             65  1-312  	epaq	sp|0		check that call came from ring 0
                             66  1-313  	cana	-1,dl
                             67  1-314  	tze	*+2
                             68  1-315  	zero	1
                             69  1-316  	epplp	.my_lp,*
                             70  1-317  	lca	stack_frame.condition_bit+1,dl  Vanish on-unit
                             71  1-318  	ansa	sp|stack_frame.flag_word
                             72  1-319  	eppbp	.mcptr
                             73  1-320  	spribp	.vfl_arglist+2
                             74  1-321  	fld	=1b24,dl
                             75  1-322  	staq	.vfl_arglist
                             76  1-323  	short_call  verify_lock$verify_lock_bad_dir(.vfl_arglist)
                             77  1-324  	ldx0	.entryp
                             78  1-325  	eppap	sp|stack_frame.arg_ptr,*
                             79  1-326  	tra	0,0		retry the call
                             80  1-327  
                             81  1-328  	maclist	restore
                             82  1-329  	eject
                             83  1-330  	maclist	restore
                             84  1-331  &end
                                 1-332  
                                 1-333  
                                 1-334  " GATE_INFO - general info for non-hardcore gates
                                 1-335  
                                 1-336  macro	gate_info
                              1  1-337  	maclist	on,save
                              2  1-338  	use	transfer_vector
                              3  1-339  	tra	.actor
                              4  1-340  
                              5  1-341  	use	tv_end
                              6  1-342  	entrybound
                              7  1-343  
                              8  1-344  	use	main
                              9  1-345  	join	/text/transfer_vector,tv_end,main
                             10  1-346  
                             11  1-347  	maclist	restore
                             12  1-348  	eject
                             13  1-349  
                             14  1-350  .actor:	getlp
                             15  1-351  	maclist	restore
                             16  1-352  	gate_actor
                             17  1-353  
                             18  1-354  	maclist	restore
                             19  1-355  	eject
                             20  1-356  
                             21  1-357  .setup:	push
                             22  1-358  	getlp
                             23  1-359  	maclist	restore
                             24  1-360  	gcheck
                             25  1-361  	tra	0,2
                             26  1-362  
                             27  1-363  	maclist	restore
                             28  1-364  	eject
                             29  1-365  
                             30  1-366  	maclist	restore
                             31  1-367  &end
                                 1-368  
                                 1-369  
                                 1-370  " Macro to generate gate actor.
                                 1-371  
                                 1-372  macro	gate_actor
                              1  1-373  	maclist	on,save
                              2  1-374  	eppbp	ap|2,*
                              3  1-375  	lda	bp|-1		get length of string
                              4  1-376  	tze	.return_name	zero length => get name
                              5  1-377  
                              6  1-378  	adla	1,dl		include length of acc
                              7  1-379  	stz	ap|4,*
                              8  1-380  	tsx0	.search_defs
                              9  1-381  
                             10  1-382  	cmpc	(pr,rl),(pr,rl)	compare name
                             11  1-383  	desc9a	bp|-1(3),al
                             12  1-384  	desc9a	bb|0,al
                             13  1-385  	tnz	.next_def
                             14  1-386  
                             15  1-387  	lda	ab|1,2		return location
                             16  1-388  	arl	18
                             17  1-389  	sta	ap|4,*
                             18  1-390  
                             19  1-391  	short_return
                             20  1-392  
                             21  1-393  .return_name:
                             22  1-394  	lxl3	ap|4,*		get location
                             23  1-395  	tsx0	.search_defs
                             24  1-396  
                             25  1-397  	cmpx3	ab|1,2		compare location
                             26  1-398  	tnz	.next_def
                             27  1-399  
                             28  1-400  	lda	bb|0		get length of name
                             29  1-401  	arl	27
                             30  1-402  	sta	bp|-1		set length of varying string
                             31  1-403  	mlr	(pr,rl),(pr,rl)	return string
                             32  1-404  	desc9a	bb|0(1),al
                             33  1-405  	desc9a	bp|0,al
                             34  1-406  
                             35  1-407  	short_return
                             36  1-408  
                             37  1-409  .search_defs:
                             38  1-410  	eax2	0
                             39  1-411  	eppab	lp|0,*		ab -> defs
                             40  1-412  .defs_loop:
                             41  1-413  	lxl1	ab|1,2		get class and flags
                             42  1-414  	cmpx1	=o400000,du	must be class 0
                             43  1-415  	tnz	.next_def
                             44  1-416  
                             45  1-417  	ldx7	ab|2,2
                             46  1-418  	eppbb	ab|0,7		bb -> name
                             47  1-419  	tra	0,0		test definition
                             48  1-420  .next_def:
                             49  1-421  	ldx2	ab|0,2		chain to next def
                             50  1-422  	tnz	.defs_loop
                             51  1-423  
                             52  1-424  	short_return
                             53  1-425  
                             54  1-426  &end
                                 1-427  
                                 1-428  
                                 1-429  " Miscellaneous macros.
                                 1-430  
                                 1-431  macro	gcheck
                              1  1-432  	maclist	on,save
                              2  1-433  	ldx1	-2,2		get number of args expected
                              3  1-434  	tze	.no_gate_error	if zero, none or doesn't matter
                              4  1-435  	cmpx1	ap|0		compare against number given
                              5  1-436  	tze	.no_gate_error	args match, call procedure
                              6  1-437  
                              7  1-438  	call	signal_$signal_(signal_arglist)
                              8  1-439  	oct	0
                              9  1-440  
                             10  1-441  	even
                             11  1-442  signal_arglist:
                             12  1-443  	zero	2,4
                             13  1-444  	zero	2,0
                             14  1-445  	arg	.gate_errorname
                             15  1-446  	arg
                             16  1-447  	arg	.gate_errordesc
                             17  1-448  	arg
                             18  1-449  
                             19  1-450  	string	gate_error
                             20  1-451  
                             21  1-452  
                             22  1-453  .no_gate_error:
                             23  1-454  &end
                                 1-455  
                                 1-456  macro	string
                              1  1-457  .&1name:
                              2  1-458  	aci	"&1"
                              3  1-459  .&1desc:
                              4  1-460  	vfd	o9/525,o27/&l1
                              5  1-461  
                              6  1-462  &end
                                 1-463  
                                 1-464  macro	eject
                              1  1-465  	maclist	on,save
                              2  1-466  
                              3  1-467  &end
                                 1-468  
                                 1-469  " END INCLUDE FILE ...... gate_macros.incl.alm
                                 1-470  
                                 1-471  "  To arrange the return it wants to return, it will have to reach back  2 frames.
                                    17  	include	stack_header
                                   2-1  "	BEGIN INCLUDE FILE ... stack_header.incl.alm  3/72  Bill Silver
                                   2-2  "
                                   2-3  "	modified 7/76 by M. Weaver for *system links and more system use of areas
                                   2-4  "	modified 3/77 by M. Weaver  to add rnt_ptr
                                   2-5  "	modified 7/77 by S. Webber to add run_unit_depth and assign_linkage_ptr
                                   2-6  "	modified 6/83 by J. Ives to add trace_frames and in_trace.
                                   2-7  
                                   2-8  " HISTORY COMMENTS:
                                   2-9  "  1) change(86-06-24,DGHowe), approve(86-06-24,MCR7396),
                                  2-10  "     audit(86-08-05,Schroth), install(86-11-03,MR12.0-1206):
                                  2-11  "     added the heap_header_ptr definition
                                  2-12  "  2) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
                                  2-13  "     audit(86-10-10,Fawcett), install(86-11-03,MR12.0-1206):
                                  2-14  "     Modified to support control point management.  These changes were
                                  2-15  "     actually made in February 1985 by G. Palter.
                                  2-16  "  3) change(86-10-22,Fawcett), approve(86-10-22,MCR7473),
                                  2-17  "     audit(86-10-22,Farley), install(86-11-03,MR12.0-1206):
                                  2-18  "     Remove the old_lot pointer and replace it with cpm_data_ptr. Use the 18
                                  2-19  "     bit pad after cur_lot_size for the cpm_enabled. This was done to save
                                  2-20  "     some space int the stack header and change the cpd_ptr unal to
                                  2-21  "     cpm_data_ptr (ITS pair).
                                  2-22  "                                                      END HISTORY COMMENTS
                                  2-23  
                        000004    2-24  	equ	stack_header.cpm_data_ptr,4		ptr to control point for this stack
                        000006    2-25  	equ	stack_header.combined_stat_ptr,6	ptr to separate static area
                                  2-26  
                        000010    2-27  	equ	stack_header.clr_ptr,8		ptr to area containing linkage sections
                        000012    2-28  	equ	stack_header.max_lot_size,10		number of words allowed in lot (DU)
                        000012    2-29  	equ	stack_header.main_proc_invoked,10	nonzero if main proc was invoked in run unit (DL)
                        000012    2-30  	equ	stack_header.run_unit_depth,10	number of active run units stacked (DL)
                        000013    2-31  	equ	stack_header.cur_lot_size,11		DU number of words (entries) in lot
                        000013    2-32            equ	stack_header.cpm_enabled,11		DL  non-zero if control point management is enabled
                        000014    2-33  	equ	stack_header.system_free_ptr,12	ptr to system storage area
                        000016    2-34  	equ	stack_header.user_free_ptr,14		ptr to user storage area
                                  2-35  
                        000020    2-36  	equ	stack_header.parent_ptr,16		ptr to parent stack or null
                        000022    2-37  	equ	stack_header.stack_begin_ptr,18	ptr to first stack frame
                        000024    2-38  	equ	stack_header.stack_end_ptr,20		ptr to next useable stack frame
                        000026    2-39  	equ	stack_header.lot_ptr,22		ptr to the lot for the current ring
                                  2-40  
                        000030    2-41  	equ	stack_header.signal_ptr,24		ptr to signal proc for current ring
                        000032    2-42  	equ	stack_header.bar_mode_sp,26		value of sp before entering bar mode
                        000034    2-43  	equ	stack_header.pl1_operators_ptr,28	ptr: pl1_operators_$operator_table
                        000036    2-44  	equ	stack_header.call_op_ptr,30		ptr to standard call operator
                                  2-45  
                        000040    2-46  	equ	stack_header.push_op_ptr,32		ptr to standard push operator
                        000042    2-47  	equ	stack_header.return_op_ptr,34		ptr to standard return operator
                        000044    2-48  	equ	stack_header.ret_no_pop_op_ptr,36	ptr: stand. return/ no pop operator
                        000046    2-49  	equ	stack_header.entry_op_ptr,38		ptr to standard entry operator
                                  2-50  
                        000050    2-51  	equ	stack_header.trans_op_tv_ptr,40	ptr to table of translator operator ptrs
                        000052    2-52  	equ	stack_header.isot_ptr,42		pointer to ISOT
                        000054    2-53  	equ	stack_header.sct_ptr,44		pointer to System Condition Table
                        000056    2-54  	equ	stack_header.unwinder_ptr,46		pointer to unwinder for current ring
                                  2-55  
                        000060    2-56  	equ	stack_header.sys_link_info_ptr,48	ptr to *system link name table
                        000062    2-57  	equ	stack_header.rnt_ptr,50		ptr to reference name table
                        000064    2-58  	equ	stack_header.ect_ptr,52		ptr to event channel table
                        000066    2-59  	equ	stack_header.assign_linkage_ptr,54	ptr to area for hcs_$assign_linkage calls
                        000070    2-60  	equ	stack_header.heap_header_ptr,56	ptr to heap header.
                        000072    2-61  	equ	stack_header.trace_frames,58		stack of trace_catch_ frames
                        000073    2-62  	equ	stach_header.trace_top_ptr,59		trace pointer
                        000074    2-63  	equ	stack_header.in_trace,60		trace antirecurse bit
                        000100    2-64  	equ	stack_header_end,64			length of stack header
                                  2-65  
                                  2-66  
                                  2-67  
                                  2-68  
                        000000    2-69  	equ	trace_frames.count,0		number of trace frames on stack
                        000001    2-70  	equ	trace_frames.top_ptr,1		packed pointer to top one
                                  2-71  
                                  2-72  "	The  following constant is an offset within the  pl1  operators table.
                                  2-73  "	It  references a  transfer vector table.
                                  2-74  
                        000551    2-75  	bool	tv_offset,551
                                  2-76  
                                  2-77  
                                  2-78  "	The  following constants are offsets within this transfer vector table.
                                  2-79  
                        001170    2-80  	equ	call_offset,tv_offset+271
                        001171    2-81  	equ	push_offset,tv_offset+272
                        001172    2-82  	equ	return_offset,tv_offset+273
                        001173    2-83  	equ	return_no_pop_offset,tv_offset+274
                        001174    2-84  	equ	entry_offset,tv_offset+275
                                  2-85  
                                  2-86  
                                  2-87  " 	END INCLUDE FILE stack_header.incl.alm
                                    18  	include	stack_frame
                                   3-1  "
                                   3-2  "	BEGIN INCLUDE FILE ... stack_frame.incl.alm   6/72 RBS
                                   3-3  "
                                   3-4  " Modified: 16 Dec 1977, D. Levin - to add fio_ps_ptr
                                   3-5  " Modified:  3 Feb 1978, P. Krupp - to add run_unit_manager_bit & main_proc_bit
                                   3-6  " Modified: 21 March 1978, D. Levin - change fio_ps_ptr to support_ptr
                                   3-7  "
                        000020     3-8  	equ	stack_frame.prev_sp,16
                        000020     3-9  	equ	stack_frame.condition_word,16
                        000022    3-10  	equ	stack_frame.next_sp,18
                        000022    3-11  	equ	stack_frame.signaller_word,18
                        000024    3-12  	equ	stack_frame.return_ptr,20
                        000026    3-13  	equ	stack_frame.entry_ptr,22
                        000030    3-14  	equ	stack_frame.operator_ptr,24
                        000030    3-15  	equ	stack_frame.lp_ptr,24
                        000032    3-16  	equ	stack_frame.arg_ptr,26
                        000034    3-17  	equ	stack_frame.static_ptr,28
                        000035    3-18  	equ	stack_frame.support_ptr,29	" only used by fortran I/O
                        000036    3-19  	equ	stack_frame.on_unit_rel_ptrs,30
                        000037    3-20  	equ	stack_frame.operator_ret_ptr,31
                        000037    3-21  	equ	stack_frame.translator_id,31
                        000040    3-22  	equ	stack_frame.regs,32
                        000060    3-23  	equ	stack_frame.min_length,48
                        000020    3-24  	equ	stack_frame.flag_word,16
                        020000    3-25  	bool	stack_frame.main_proc_bit,020000	(DL)
                        010000    3-26  	bool	stack_frame.run_unit_manager,010000	(DL)
                        004000    3-27  	bool	stack_frame.signal_bit,004000		(DL)
                        002000    3-28  	bool	stack_frame.crawl_out_bit,002000	(DL)
                        001000    3-29  	bool	stack_frame.signaller_bit,001000	(DL)
                        000400    3-30  	bool	stack_frame.link_trap_bit,000400	(DL)
                        000200    3-31  	bool	stack_frame.support_bit,000200	(DL)
                        000100    3-32  	bool	stack_frame.condition_bit,000100	(DL)
                                  3-33  
                                  3-34  "
                                  3-35  "	END INCLUDE FILE  ... stack_frame.incl.alm
                                  3-36  "
                                    19  
                                    20  	gate_info
                                        	use	transfer_vector
    000000  0a   000014 7100 00         	tra	.actor
                                        
                                        	use	tv_end
                                        	entrybound
                                        
                                        	use	main
                                        	join	/text/transfer_vector,tv_end,main
                                        
                                        
                                        
    000014  aa  7 00046 2721 20         .actor:	getlp
    000015  aa  0 00002 3521 20         	eppbp	ap|2,*
    000016  aa  2 77777 2351 00         	lda	bp|-1		get length of string
    000017  0a   000033 6000 00         	tze	.return_name	zero length => get name
                                        
    000020  aa   000001 0350 07         	adla	1,dl		include length of acc
    000021  aa  0 00004 4501 20         	stz	ap|4,*
    000022  0a   000046 7000 00         	tsx0	.search_defs
                                        
    000023  aa  0 00140 1065 40         	cmpc	(pr,rl),(pr,rl)	compare name
    000024  aa   277777 600005          	desc9a	bp|-1(3),al
    000025  aa   300000 000005          	desc9a	bb|0,al
    000026  0a   000056 6010 00         	tnz	.next_def
                                        
    000027  aa  1 00001 2351 12         	lda	ab|1,2		return location
    000030  aa   000022 7710 00         	arl	18
    000031  aa  0 00004 7551 20         	sta	ap|4,*
                                        
    000032  aa  7 00044 7101 20         	short_return
                                        
    000033                              .return_name:
    000033  aa  0 00004 7231 20         	lxl3	ap|4,*		get location
    000034  0a   000046 7000 00         	tsx0	.search_defs
                                        
    000035  aa  1 00001 1031 12         	cmpx3	ab|1,2		compare location
    000036  0a   000056 6010 00         	tnz	.next_def
                                        
    000037  aa  3 00000 2351 00         	lda	bb|0		get length of name
    000040  aa   000033 7710 00         	arl	27
    000041  aa  2 77777 7551 00         	sta	bp|-1		set length of varying string
    000042  aa  0 00140 1005 40         	mlr	(pr,rl),(pr,rl)	return string
    000043  aa   300000 200005          	desc9a	bb|0(1),al
    000044  aa   200000 000005          	desc9a	bp|0,al
                                        
    000045  aa  7 00044 7101 20         	short_return
                                        
    000046                              .search_defs:
    000046  aa   000000 6220 00         	eax2	0
    000047  aa  4 00000 3515 20         	eppab	lp|0,*		ab -> defs
    000050                              .defs_loop:
    000050  aa  1 00001 7211 12         	lxl1	ab|1,2		get class and flags
    000051  aa   400000 1010 03         	cmpx1	=o400000,du	must be class 0
    000052  0a   000056 6010 00         	tnz	.next_def
                                        
    000053  aa  1 00002 2271 12         	ldx7	ab|2,2
    000054  aa  1 00000 3535 17         	eppbb	ab|0,7		bb -> name
    000055  aa   000000 7100 10         	tra	0,0		test definition
    000056                              .next_def:
    000056  aa  1 00000 2221 12         	ldx2	ab|0,2		chain to next def
    000057  0a   000050 6010 00         	tnz	.defs_loop
                                        
    000060  aa  7 00044 7101 20         	short_return
                                        
                                        
                                        
                                        
    000061  aa   000060 6270 00         .setup:	push
    000062  aa  7 00040 2721 20
    000063  aa  7 00046 2721 20         	getlp
    000064  aa   777776 2210 12         	ldx1	-2,2		get number of args expected
    000065  0a   000112 6000 00         	tze	.no_gate_error	if zero, none or doesn't matter
    000066  aa  0 00000 1011 00         	cmpx1	ap|0		compare against number given
    000067  0a   000112 6000 00         	tze	.no_gate_error	args match, call procedure
                                        
    000070  aa  6 00000 2541 00         	call	signal_$signal_(signal_arglist)
    000071  0a   000100 3500 00
    000072  4a  4 00010 3521 20
    000073  aa  6 00040 7531 00
    000074  aa  7 00036 6701 20
    000075  aa  6 00000 1731 00
    000076  aa  6 00040 0731 00
    000077  aa   000000 000000          	oct	0
                                        
                                        	even
    000100                              signal_arglist:
    000100  aa   000002 000004          	zero	2,4
    000101  aa   000002 000000          	zero	2,0
    000102  0a   000106 0000 00         	arg	.gate_errorname
    000103  aa   000000 0000 00         	arg
    000104  0a   000111 0000 00         	arg	.gate_errordesc
    000105  aa   000000 0000 00         	arg
                                        
                                        	string	gate_error
    000106                              .gate_errorname:
    000106  aa  147 141 164 145         	aci	"gate_error"
    000107  aa  137 145 162 162
    000110  aa  157 162 000 000
    000111                              .gate_errordesc:
    000111  aa   525000 000010          	vfd	o9/525,o27/10
                                        
                                        
                                        
    000112                              .no_gate_error:
    000112  aa   000000 7100 12         	tra	0,2
                                        
                                        
                                        
                                    21  
                                    22  	gate add_entry,pnt_db_interface_,add_entry,3
                        000001          	segdef	add_entry
    000001                              add_entry:
    000001  0a   000114 7100 00         	tra	add_entry.e
    000113  aa   000006 000000          	zero	3*2,0
    000114                              add_entry.e:
    000114  0a   000061 7020 00         	tsx2	.setup
    000115  aa   000000 6340 07         	ldi	=0,dl
    000116  4a  4 00012 3521 20         	short_call pnt_db_interface_$add_entry(ap|0)
    000117  aa  7 00036 6701 20
    000120  aa  6 00030 3701 20
    000121  aa  7 00042 7101 20         	return
                                        
                                    23  	gate admin_get_entry,pnt_db_interface_,admin_get_entry,3
                        000002          	segdef	admin_get_entry
    000002                              admin_get_entry:
    000002  0a   000123 7100 00         	tra	admin_get_entry.e
    000122  aa   000006 000000          	zero	3*2,0
    000123                              admin_get_entry.e:
    000123  0a   000061 7020 00         	tsx2	.setup
    000124  aa   000000 6340 07         	ldi	=0,dl
    000125  4a  4 00014 3521 20         	short_call pnt_db_interface_$admin_get_entry(ap|0)
    000126  aa  7 00036 6701 20
    000127  aa  6 00030 3701 20
    000130  aa  7 00042 7101 20         	return
                                        
                                    24  	gate convert_v2_pnt,convert_v2_pnt_,convert_v2_pnt_,3
                        000003          	segdef	convert_v2_pnt
    000003                              convert_v2_pnt:
    000003  0a   000132 7100 00         	tra	convert_v2_pnt.e
    000131  aa   000006 000000          	zero	3*2,0
    000132                              convert_v2_pnt.e:
    000132  0a   000061 7020 00         	tsx2	.setup
    000133  aa   000000 6340 07         	ldi	=0,dl
    000134  4a  4 00016 3521 20         	short_call convert_v2_pnt_$convert_v2_pnt_(ap|0)
    000135  aa  7 00036 6701 20
    000136  aa  6 00030 3701 20
    000137  aa  7 00042 7101 20         	return
                                        
                                    25  	gate copy,pnt_fs_interface_,copy,6
                        000004          	segdef	copy
    000004                              copy:
    000004  0a   000141 7100 00         	tra	copy.e
    000140  aa   000014 000000          	zero	6*2,0
    000141                              copy.e:
    000141  0a   000061 7020 00         	tsx2	.setup
    000142  aa   000000 6340 07         	ldi	=0,dl
    000143  4a  4 00020 3521 20         	short_call pnt_fs_interface_$copy(ap|0)
    000144  aa  7 00036 6701 20
    000145  aa  6 00030 3701 20
    000146  aa  7 00042 7101 20         	return
                                        
                                    26  	gate create,pnt_fs_interface_,create,4
                        000005          	segdef	create
    000005                              create:
    000005  0a   000150 7100 00         	tra	create.e
    000147  aa   000010 000000          	zero	4*2,0
    000150                              create.e:
    000150  0a   000061 7020 00         	tsx2	.setup
    000151  aa   000000 6340 07         	ldi	=0,dl
    000152  4a  4 00022 3521 20         	short_call pnt_fs_interface_$create(ap|0)
    000153  aa  7 00036 6701 20
    000154  aa  6 00030 3701 20
    000155  aa  7 00042 7101 20         	return
                                        
                                    27  	gate delete,pnt_fs_interface_,delete,3
                        000006          	segdef	delete
    000006                              delete:
    000006  0a   000157 7100 00         	tra	delete.e
    000156  aa   000006 000000          	zero	3*2,0
    000157                              delete.e:
    000157  0a   000061 7020 00         	tsx2	.setup
    000160  aa   000000 6340 07         	ldi	=0,dl
    000161  4a  4 00024 3521 20         	short_call pnt_fs_interface_$delete(ap|0)
    000162  aa  7 00036 6701 20
    000163  aa  6 00030 3701 20
    000164  aa  7 00042 7101 20         	return
                                        
                                    28  	gate get_entry,pnt_db_interface_,admin_get_entry,3
                        000007          	segdef	get_entry
    000007                              get_entry:
    000007  0a   000166 7100 00         	tra	get_entry.e
    000165  aa   000006 000000          	zero	3*2,0
    000166                              get_entry.e:
    000166  0a   000061 7020 00         	tsx2	.setup
    000167  aa   000000 6340 07         	ldi	=0,dl
    000170  4a  4 00014 3521 20         	short_call pnt_db_interface_$admin_get_entry(ap|0)
    000171  aa  7 00036 6701 20
    000172  aa  6 00030 3701 20
    000173  aa  7 00042 7101 20         	return
                                        
                                    29  	gate get_abs_entry,pnt_db_interface_,get_abs_entry,3
                        000010          	segdef	get_abs_entry
    000010                              get_abs_entry:
    000010  0a   000175 7100 00         	tra	get_abs_entry.e
    000174  aa   000006 000000          	zero	3*2,0
    000175                              get_abs_entry.e:
    000175  0a   000061 7020 00         	tsx2	.setup
    000176  aa   000000 6340 07         	ldi	=0,dl
    000177  4a  4 00026 3521 20         	short_call pnt_db_interface_$get_abs_entry(ap|0)
    000200  aa  7 00036 6701 20
    000201  aa  6 00030 3701 20
    000202  aa  7 00042 7101 20         	return
                                        
                                    30  	gate table_data,pnt_db_interface_,table_data,3
                        000011          	segdef	table_data
    000011                              table_data:
    000011  0a   000204 7100 00         	tra	table_data.e
    000203  aa   000006 000000          	zero	3*2,0
    000204                              table_data.e:
    000204  0a   000061 7020 00         	tsx2	.setup
    000205  aa   000000 6340 07         	ldi	=0,dl
    000206  4a  4 00030 3521 20         	short_call pnt_db_interface_$table_data(ap|0)
    000207  aa  7 00036 6701 20
    000210  aa  6 00030 3701 20
    000211  aa  7 00042 7101 20         	return
                                        
                                    31  	gate update_entry,pnt_db_interface_,update_entry,4
                        000012          	segdef	update_entry
    000012                              update_entry:
    000012  0a   000213 7100 00         	tra	update_entry.e
    000212  aa   000010 000000          	zero	4*2,0
    000213                              update_entry.e:
    000213  0a   000061 7020 00         	tsx2	.setup
    000214  aa   000000 6340 07         	ldi	=0,dl
    000215  4a  4 00032 3521 20         	short_call pnt_db_interface_$update_entry(ap|0)
    000216  aa  7 00036 6701 20
    000217  aa  6 00030 3701 20
    000220  aa  7 00042 7101 20         	return
                                        
                                    32  	gate remove_entry,pnt_db_interface_,remove_entry,2
                        000013          	segdef	remove_entry
    000013                              remove_entry:
    000013  0a   000222 7100 00         	tra	remove_entry.e
    000221  aa   000004 000000          	zero	2*2,0
    000222                              remove_entry.e:
    000222  0a   000061 7020 00         	tsx2	.setup
    000223  aa   000000 6340 07         	ldi	=0,dl
    000224  4a  4 00034 3521 20         	short_call pnt_db_interface_$remove_entry(ap|0)
    000225  aa  7 00036 6701 20
    000226  aa  6 00030 3701 20
    000227  aa  7 00042 7101 20         	return
                                        
                                    33  
                                    34  	end

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000230  5a   000003 000000 
    000231  5a   000125 600000 
    000232  aa   000000 000000 
    000233  55   000012 000002 
    000234  5a   000002 400003 
    000235  55   000006 000012 
    000236  aa  017 160 156 164
    000237  aa  137 141 144 155
    000240  aa  151 156 137 147
    000241  aa  141 164 145 137
    000242  55   000021 000003 
    000243  0a   000013 400000 
    000244  55   000015 000003 
    000245  aa  014 162 145 155         remove_entry
    000246  aa  157 166 145 137
    000247  aa  145 156 164 162
    000250  aa  171 000 000 000
    000251  55   000030 000012 
    000252  0a   000012 400000 
    000253  55   000024 000003 
    000254  aa  014 165 160 144         update_entry
    000255  aa  141 164 145 137
    000256  aa  145 156 164 162
    000257  aa  171 000 000 000
    000260  55   000036 000021 
    000261  0a   000011 400000 
    000262  55   000033 000003 
    000263  aa  012 164 141 142         table_data
    000264  aa  154 145 137 144
    000265  aa  141 164 141 000
    000266  55   000045 000030 
    000267  0a   000010 400000 
    000270  55   000041 000003 
    000271  aa  015 147 145 164         get_abs_entry
    000272  aa  137 141 142 163
    000273  aa  137 145 156 164
    000274  aa  162 171 000 000
    000275  55   000053 000036 
    000276  0a   000007 400000 
    000277  55   000050 000003 
    000300  aa  011 147 145 164         get_entry
    000301  aa  137 145 156 164
    000302  aa  162 171 000 000
    000303  55   000060 000045 
    000304  0a   000006 400000 
    000305  55   000056 000003 
    000306  aa  006 144 145 154         delete
    000307  aa  145 164 145 000
    000310  55   000065 000053 
    000311  0a   000005 400000 
    000312  55   000063 000003 
    000313  aa  006 143 162 145         create
    000314  aa  141 164 145 000
    000315  55   000072 000060 
    000316  0a   000004 400000 
    000317  55   000070 000003 
    000320  aa  004 143 157 160         copy
    000321  aa  171 000 000 000
    000322  55   000101 000065 
    000323  0a   000003 400000 
    000324  55   000075 000003 
    000325  aa  016 143 157 156         convert_v2_pnt
    000326  aa  166 145 162 164
    000327  aa  137 166 062 137
    000330  aa  160 156 164 000
    000331  55   000110 000072 
    000332  0a   000002 400000 
    000333  55   000104 000003 
    000334  aa  017 141 144 155         admin_get_entry
    000335  aa  151 156 137 147
    000336  aa  145 164 137 145
    000337  aa  156 164 162 171
    000340  55   000116 000101 
    000341  0a   000001 400000 
    000342  55   000113 000003 
    000343  aa  011 141 144 144         add_entry
    000344  aa  137 145 156 164
    000345  aa  162 171 000 000
    000346  55   000002 000110 
    000347  6a   000000 400002 
    000350  55   000121 000003 
    000351  aa  014 163 171 155         symbol_table
    000352  aa  142 157 154 137
    000353  aa  164 141 142 154
    000354  aa  145 000 000 000

DEFINITIONS HASH TABLE

    000355  aa   000000 000015 
    000356  aa   000000 000000 
    000357  5a   000030 000000 
    000360  5a   000021 000000 
    000361  5a   000053 000000 
    000362  5a   000065 000000 
    000363  5a   000045 000000 
    000364  5a   000072 000000 
    000365  5a   000110 000000 
    000366  5a   000101 000000 
    000367  5a   000060 000000 
    000370  5a   000116 000000 
    000371  5a   000012 000000 
    000372  5a   000036 000000 

EXTERNAL NAMES

    000373  aa  021 160 156 164         pnt_fs_interface_
    000374  aa  137 146 163 137
    000375  aa  151 156 164 145
    000376  aa  162 146 141 143
    000377  aa  145 137 000 000
    000400  aa  017 143 157 156         convert_v2_pnt_
    000401  aa  166 145 162 164
    000402  aa  137 166 062 137
    000403  aa  160 156 164 137
    000404  aa  021 160 156 164         pnt_db_interface_
    000405  aa  137 144 142 137
    000406  aa  151 156 164 145
    000407  aa  162 146 141 143
    000410  aa  145 137 000 000
    000411  aa  007 163 151 147         signal_
    000412  aa  156 141 154 137

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    000413  aa   000004 000000 
    000414  55   000154 000015 
    000415  aa   000004 000000 
    000416  55   000154 000024 
    000417  aa   000004 000000 
    000420  55   000154 000033 
    000421  aa   000004 000000 
    000422  55   000154 000041 
    000423  aa   000004 000000 
    000424  55   000143 000056 
    000425  aa   000004 000000 
    000426  55   000143 000063 
    000427  aa   000004 000000 
    000430  55   000143 000070 
    000431  aa   000004 000000 
    000432  55   000150 000150 
    000433  aa   000004 000000 
    000434  55   000154 000104 
    000435  aa   000004 000000 
    000436  55   000154 000113 
    000437  aa   000004 000000 
    000440  55   000161 000161 
    000441  aa   000001 000000 
    000442  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    000443  5a   000163 000000 
    000444  5a   000165 000000 
    000445  5a   000167 000000 
    000446  5a   000171 000000 
    000447  5a   000173 000000 
    000450  5a   000175 000000 
    000451  5a   000177 000000 
    000452  5a   000201 000000 
    000453  5a   000203 000000 
    000454  5a   000205 000000 
    000455  5a   000207 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000230 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000036 
    000007  a2   000000 000000 
    000010  9a   777770 0000 46         signal_|signal_
    000011  5a   000225 0000 00
    000012  9a   777766 0000 46         pnt_db_interface_|add_entry
    000013  5a   000224 0000 00
    000014  9a   777764 0000 46         pnt_db_interface_|admin_get_entry
    000015  5a   000223 0000 00
    000016  9a   777762 0000 46         convert_v2_pnt_|convert_v2_pnt_
    000017  5a   000222 0000 00
    000020  9a   777760 0000 46         pnt_fs_interface_|copy
    000021  5a   000221 0000 00
    000022  9a   777756 0000 46         pnt_fs_interface_|create
    000023  5a   000220 0000 00
    000024  9a   777754 0000 46         pnt_fs_interface_|delete
    000025  5a   000217 0000 00
    000026  9a   777752 0000 46         pnt_db_interface_|get_abs_entry
    000027  5a   000216 0000 00
    000030  9a   777750 0000 46         pnt_db_interface_|table_data
    000031  5a   000215 0000 00
    000032  9a   777746 0000 46         pnt_db_interface_|update_entry
    000033  5a   000214 0000 00
    000034  9a   777744 0000 46         pnt_db_interface_|remove_entry
    000035  5a   000213 0000 00
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000004 
    000004  aa   000000 114732 
    000005  aa   732732 062314 
    000006  aa   000000 114775 
    000007  aa   671204 425426 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000223 
    000020  aa   000000 000163 
    000021  aa   000000 000203 
    000022  aa   000212 000163 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   040066 056067 
    000030  aa   040040 117143 
    000031  aa   164157 142145 
    000032  aa   162040 061071 
    000033  aa   070066 040040 
    000034  aa   107112 157150 
    000035  aa   156163 157156 
    000036  aa   056123 171163 
    000037  aa   115141 151156 
    000040  aa   164056 141040 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   154151 163164 
    000045  aa   040040 040040 
    000046  aa   040040 040040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040040 040040 
    000057  aa   040040 040040 
    000060  aa   040040 040040 
    000061  aa   040040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000004 
    000066  aa   000106 000064 
    000067  aa   147740 446371 
    000070  aa   000000 114774 
    000071  aa   461321 200000 
    000072  aa   000123 000041 
    000073  aa   134571 651553 
    000074  aa   000000 113462 
    000075  aa   317506 600000 
    000076  aa   000134 000066 
    000077  aa   147714 750316 
    000100  aa   000000 114774 
    000101  aa   453561 000000 
    000102  aa   000152 000041 
    000103  aa   052721 247134 
    000104  aa   000000 105272 
    000105  aa   317215 400000 
    000106  aa   076163 160145          >special_ldd>install>MR12.0-1206>pnt_admin_gate_.alm
    000107  aa   143151 141154 
    000110  aa   137154 144144 
    000111  aa   076151 156163 
    000112  aa   164141 154154 
    000113  aa   076115 122061 
    000114  aa   062056 060055 
    000115  aa   061062 060066 
    000116  aa   076160 156164 
    000117  aa   137141 144155 
    000120  aa   151156 137147 
    000121  aa   141164 145137 
    000122  aa   056141 154155 
    000123  aa   076154 144144          >ldd>include>gate_macros.incl.alm
    000124  aa   076151 156143 
    000125  aa   154165 144145 
    000126  aa   076147 141164 
    000127  aa   145137 155141 
    000130  aa   143162 157163 
    000131  aa   056151 156143 
    000132  aa   154056 141154 
    000133  aa   155040 040040 
    000134  aa   076163 160145          >special_ldd>install>MR12.0-1206>stack_header.incl.alm
    000135  aa   143151 141154 
    000136  aa   137154 144144 
    000137  aa   076151 156163 
    000140  aa   164141 154154 
    000141  aa   076115 122061 
    000142  aa   062056 060055 
    000143  aa   061062 060066 
    000144  aa   076163 164141 
    000145  aa   143153 137150 
    000146  aa   145141 144145 
    000147  aa   162056 151156 
    000150  aa   143154 056141 
    000151  aa   154155 040040 
    000152  aa   076154 144144          >ldd>include>stack_frame.incl.alm
    000153  aa   076151 156143 
    000154  aa   154165 144145 
    000155  aa   076163 164141 
    000156  aa   143153 137146 
    000157  aa   162141 155145 
    000160  aa   056151 156143 
    000161  aa   154056 141154 
    000162  aa   155040 040040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

          14    .actor                   pnt_admin_gate_:     20.
          50    .defs_loop               pnt_admin_gate_:     20.
         111    .gate_errordesc          pnt_admin_gate_:     20.
         106    .gate_errorname          pnt_admin_gate_:     20.
          56    .next_def                pnt_admin_gate_:     20.
         112    .no_gate_error           pnt_admin_gate_:     20.
          33    .return_name             pnt_admin_gate_:     20.
          46    .search_defs             pnt_admin_gate_:     20.
          61    .setup                   pnt_admin_gate_:     20,   22,   23,   24,   25,   26,   27,   28,   29,   30,   31,   32.
           1    add_entry                pnt_admin_gate_:     22.
         114    add_entry.e              pnt_admin_gate_:     22.
           2    admin_get_entry          pnt_admin_gate_:     23,   28.
         123    admin_get_entry.e        pnt_admin_gate_:     23.
        1170    call_offset              stack_header:        80.
           3    convert_v2_pnt           pnt_admin_gate_:     24.
         132    convert_v2_pnt.e         pnt_admin_gate_:     24.
                convert_v2_pnt_          pnt_admin_gate_:     24.
           4    copy                     pnt_admin_gate_:     25.
         141    copy.e                   pnt_admin_gate_:     25.
           5    create                   pnt_admin_gate_:     26.
         150    create.e                 pnt_admin_gate_:     26.
           6    delete                   pnt_admin_gate_:     27.
         157    delete.e                 pnt_admin_gate_:     27.
        1174    entry_offset             stack_header:        84.
          10    get_abs_entry            pnt_admin_gate_:     29.
         175    get_abs_entry.e          pnt_admin_gate_:     29.
           7    get_entry                pnt_admin_gate_:     28.
         166    get_entry.e              pnt_admin_gate_:     28.
          14    main                     pnt_admin_gate_:     20,   22,   23,   24,   25,   26,   27,   28,   29,   30,   31,   32.
                pnt_db_interface_        pnt_admin_gate_:     22,   23,   28,   29,   30,   31,   32.
                pnt_fs_interface_        pnt_admin_gate_:     25,   26,   27.
        1171    push_offset              stack_header:        81.
          13    remove_entry             pnt_admin_gate_:     32.
         222    remove_entry.e           pnt_admin_gate_:     32.
        1173    return_no_pop_offset     stack_header:        83.
        1172    return_offset            stack_header:        82.
                signal_                  pnt_admin_gate_:     20.
         100    signal_arglist           pnt_admin_gate_:     20.
          73    stach_header.trace_top_ptr     stack_header:        62.
          32    stack_frame.arg_ptr      stack_frame:   16.
         100    stack_frame.condition_bit      stack_frame:   32.
          20    stack_frame.condition_word     stack_frame:    9.
        2000    stack_frame.crawl_out_bit      stack_frame:   28.
          26    stack_frame.entry_ptr    stack_frame:   13.
          20    stack_frame.flag_word    stack_frame:   24.
         400    stack_frame.link_trap_bit      stack_frame:   30.
          30    stack_frame.lp_ptr       stack_frame:   15.
       20000    stack_frame.main_proc_bit      stack_frame:   25.
          60    stack_frame.min_length   stack_frame:   23.
          22    stack_frame.next_sp      stack_frame:   10.
          36    stack_frame.on_unit_rel_ptrs   stack_frame:   19.
          30    stack_frame.operator_ptr       stack_frame:   14.
          37    stack_frame.operator_ret_ptr   stack_frame:   20.
          20    stack_frame.prev_sp      stack_frame:    8.
          40    stack_frame.regs         stack_frame:   22.
          24    stack_frame.return_ptr   stack_frame:   12.
       10000    stack_frame.run_unit_manager   stack_frame:   26.
        1000    stack_frame.signaller_bit      stack_frame:   29.
          22    stack_frame.signaller_word     stack_frame:   11.
        4000    stack_frame.signal_bit   stack_frame:   27.
          34    stack_frame.static_ptr   stack_frame:   17.
         200    stack_frame.support_bit  stack_frame:   31.
          35    stack_frame.support_ptr  stack_frame:   18.
          37    stack_frame.translator_id      stack_frame:   21.
          66    stack_header.assign_linkage_ptr      stack_header:        59.
          32    stack_header.bar_mode_sp       stack_header:        42.
          36    stack_header.call_op_ptr       stack_header:        44.
          10    stack_header.clr_ptr     stack_header:        27.
           6    stack_header.combined_stat_ptr       stack_header:        25.
           4    stack_header.cpm_data_ptr      stack_header:        24.
          13    stack_header.cpm_enabled       stack_header:        32.
          13    stack_header.cur_lot_size      stack_header:        31.
          64    stack_header.ect_ptr     stack_header:        58.
          46    stack_header.entry_op_ptr      stack_header:        49.
          70    stack_header.heap_header_ptr   stack_header:        60.
          74    stack_header.in_trace    stack_header:        63.
          52    stack_header.isot_ptr    stack_header:        52.
          26    stack_header.lot_ptr     stack_header:        39.
          12    stack_header.main_proc_invoked       stack_header:        29.
          12    stack_header.max_lot_size      stack_header:        28.
          20    stack_header.parent_ptr  stack_header:        36.
          34    stack_header.pl1_operators_ptr       stack_header:        43.
          40    stack_header.push_op_ptr       stack_header:        46.
          42    stack_header.return_op_ptr     stack_header:        47.
          44    stack_header.ret_no_pop_op_ptr       stack_header:        48.
          62    stack_header.rnt_ptr     stack_header:        57.
          12    stack_header.run_unit_depth    stack_header:        30.
          54    stack_header.sct_ptr     stack_header:        53.
          30    stack_header.signal_ptr  stack_header:        41.
          22    stack_header.stack_begin_ptr   stack_header:        37.
          24    stack_header.stack_end_ptr     stack_header:        38.
          14    stack_header.system_free_ptr   stack_header:        33.
          60    stack_header.sys_link_info_ptr       stack_header:        56.
          72    stack_header.trace_frames      stack_header:        61.
          50    stack_header.trans_op_tv_ptr   stack_header:        51.
          56    stack_header.unwinder_ptr      stack_header:        54.
          16    stack_header.user_free_ptr     stack_header:        34.
         100    stack_header_end         stack_header:        64.
          11    table_data               pnt_admin_gate_:     30.
         204    table_data.e             pnt_admin_gate_:     30.
           0    trace_frames.count       stack_header:        69.
           1    trace_frames.top_ptr     stack_header:        70.
           0    transfer_vector          pnt_admin_gate_:     20,   22,   23,   24,   25,   26,   27,   28,   29,   30,   31,   32.
          14    tv_end                   pnt_admin_gate_:     20.
         551    tv_offset                stack_header:        75,   80,   81,   82,   83,   84.
          12    update_entry             pnt_admin_gate_:     31.
         213    update_entry.e           pnt_admin_gate_:     31.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
