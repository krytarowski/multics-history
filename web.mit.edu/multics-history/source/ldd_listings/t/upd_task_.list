	COMPILATION LISTING OF SEGMENT upd_task_
	Compiled by: Multics PL/I Compiler, Release 27d, of October 11, 1982
	Compiled at: Honeywell LISD Phoenix, System M
	Compiled on: 11/15/82  1724.9 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 upd_task_:	procedure (rsw, taskp, gen_call, ctlp);
       12 
       13 
       14 /*
       15*
       16*	This procedure is the task dispatcher for the Multics Online Updater.
       17*	A task consists of a pointer defining a procedure to be called, and an
       18*	argument list to be passed when making the call, plus forward and back
       19*	pointers for threading.  For each task in the input task list, caller-
       20*	supplied procedure gen_call is invoked, by
       21*
       22*		call gen_call (task.procp, addr (task.arglist));
       23*
       24*	Within the Updater, upd_gen_call_ should be provided as gen_call, as
       25*	the procedure pointers obtained from upd_add_task_ are indirect.
       26*	If task.procp is a true procedure pointer (i.e. from hcs_$make_ptr),
       27*	then cu_$gen_call may be supplied for this purpose.  If "rsw" is non-
       28*	zero, the task list will be processed backward, starting at the task
       29*	pointed to by "taskp", otherwise, it will be processed normally.  "taskp"
       30*	will always point to the current (or last) task being processed.
       31*
       32*	Task list back pointers are stored as the task list is processed in
       33*	the forward direction.  Forward pointers are never modified.
       34*
       35*	P. Bos, June 1972
       36*
       37**/
       38 
       39      dcl	rsw			bit(1),		/* forward or backward */
       40 	taskp			ptr,		/* pointer to first or next task */
       41 	gen_call			entry (ptr, ptr),	/* user-supplied procedure to invoke task */
       42 	ctlp			ptr;		/* control argument pointer */
       43 
       44      dcl (addr, fixed, null)		builtin;
       45 
       46      dcl (p, q)			ptr;		/* random */
       47 
       48      dcl	1 task			aligned based (p),	/* task element */
       49 	  2 nextp (0:1)		ptr,		/* pointers to next, previous tasks */
       50 	  2 procp			ptr,		/* procedure entry pointer or equivalent */
       51 	  2 arglist,				/* argument list */
       52 	    3 hdr			bit(72),		/* arg count, etc. */
       53 	    3 p (1)		ptr;		/* argument pointers */
       54 
       55 /**/
       56 
       57 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
       58 
       59 
       60 	p = taskp;				/* begin at the beginning */
       61 	do while (p ^= null);			/* .. and continue until the end */
       62 	     taskp = p;				/* update caller task pointer */
       63 	     q = addr (task.arglist);			/* get arglist pointer */
       64 	     if ctlp ^= null then			/* if caller supplied control arg, */
       65 		task.arglist.p(1) = ctlp;		/* give it to all tasks */
       66 	     call gen_call (task.procp, q);		/* invoke task procedure via user routine */
       67 	     p = task.nextp (fixed (rsw));		/* get pointer to next or previous task */
       68 	     if ^rsw then if p ^= null then		/* if processing forward, */
       69 		task.nextp(1) = taskp;		/* set back pointer on following task */
       70 	     end;
       71 
       72 	return;					/* .. then stop */
       73 
       74 
       75 	end upd_task_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/15/82  1515.0  upd_task_.pl1                     >dumps>old>recomp>upd_task_.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
addr                                                   builtin function         dcl 44 ref 63
arglist                   6            based           structure                level 2 dcl 48 set ref 63
ctlp                                   parameter       pointer                  dcl 39 ref 11 64 64
fixed                                                  builtin function         dcl 44 ref 67
gen_call                               parameter       entry variable           dcl 39 ref 11 66
nextp                                  based           pointer                  array level 2 dcl 48 set ref 67 68*
null                                                   builtin function         dcl 44 ref 61 64 68
p                               000100 automatic       pointer                  dcl 46 in procedure "upd_task_" set ref 60* 61 62 63
                                                                                  64 66 67* 67 68 68
p                        10            based           pointer                  array level 3 in structure "task" dcl 48
                                                                                  in procedure "upd_task_" set ref 64*
procp                     4            based           pointer                  level 2 dcl 48 set ref 66*
q                               000102 automatic       pointer                  dcl 46 set ref 63* 66*
rsw                                    parameter       bit(1)                   unaligned dcl 39 ref 11 67 68
task                                   based           structure                level 1 dcl 48
taskp                                  parameter       pointer                  dcl 39 set ref 11 60 62* 68

NAME DECLARED BY EXPLICIT CONTEXT.
upd_task_                       000013 constant        entry                    external dcl 11

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       132         142     105         142
Length       300     105        10         122      24           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
upd_task_                            79 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
upd_task_                000100 p                           upd_task_
                         000102 q                           upd_task_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_var            return              mpfx2               ext_entry

NO EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000006        60 000020        61 000024        62 000030        63 000033        64 000035        66 000044
     67 000054        68 000072        70 000103        72 000104


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
