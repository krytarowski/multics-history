	COMPILATION LISTING OF SEGMENT decode_mpc_stats_
	Compiled by: Multics PL/I Compiler, Release 33e, of October 6, 1992
	Compiled at: CGI                             
	Compiled on: 2000-04-17_1926.48_Mon_mdt
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 /* format: style4,delnl,insnl,ifthenstmt,indnoniterend */
       12 
       13 /* DECODE_MPC_STATS_ - Decode MPC counters and registers.
       14*   coded December 1980 by Rich Coppola	*/
       15 /* Modified June 1984 by Paul Farley for DAU (MSP800) support */
       16 
       17 decode_mpc_stats_:
       18      proc;
       19 
       20 
       21 /* Arguments */
       22 
       23 dcl  a_poll_mpc_datap ptr;				/* pointer to mpc data structure */
       24 dcl  a_mpc_data_summaryp ptr;				/* pointer to mpc data summary structure */
       25 
       26 
       27 /* AUTOMATIC */
       28 
       29 dcl  (i, j) fixed bin;
       30 dcl  my_mpc_stat_analp ptr;
       31 dcl  error_reg bit (16);
       32 
       33 /* STATIC */
       34 
       35 
       36 dcl  mpc_stat_name (12) char (18) static options (constant)
       37 	init ("LA0-PSI0 Parities", "LA0-PSI0 OPI Drops", "LA0-PSI1 Parities", "LA0-PSI1 OPI Drops", "LA1-PSI0 Parities",
       38 	"LA1-PSI0 OPI Drops", "LA1-PSI1 Parities", "LA1-PSI1 OPI Drops", " ", "LA0 Alert Counter", " ",
       39 	"LA1 Alert Counter");
       40 
       41 dcl  dau_stat_name (20) char (18) static options (constant)
       42 	init ("PSI0 OPI Drops", "PSI1 OPI Drops", "PSI2 OPI Drops", "PSI3 OPI Drops", "PSI0 OPO Drops",
       43 	"PSI1 OPO Drops", "PSI2 OPO Drops", "PSI3 OPO Drops", "PSI0 Time-outs", "PSI1 Time-outs", "PSI2 Time-outs",
       44 	"PSI3 Time-outs", "PSI0 IIW Faults", "PSI1 IIW Faults", "PSI2 IIW Faults", "PSI3 IIW Faults",
       45 	"PSI0 Parity Errors", "PSI1 Parity Errors", "PSI2 Parity Errors", "PSI3 Parity Errors");
       46 
       47 dcl  err_reg_name (16) char (43) static options (constant)
       48 	init ("POWER WARNING (Bit 0)", "X/Y OPERAND PARITY (Bit 1)", "FUNCTIONAL NETWORK (Bit 2)", "",
       49 	"INTERVAL TIMER PARITY (Bit 4)", "INTERVAL TIMER EXHAUST (Bit 5)", "EXTERNAL PARITY (Bit 6)",
       50 	"BRANCH TEST REGISTER PARITY (Bit 7)", "ERROR TIMEOUT (Bit 8)", "MAIN MEMORY (Bit 9)",
       51 	"DAI NON-OPERATIONAL PORT (Bit 10)", "ROSAR PARITY (Bit 11)", "ROR PARITY (Bit 12)", "ROS NOT PRESENT (Bit 13)",
       52 	"SIM ERROR INTERRUPT (bit 14)", "ERROR TIMEOUT WHILE INHIBITING EN1 (Bit 15)");
       53 
       54 dcl  err_reg_hint (16) char (21) static options (constant)
       55 	init ("", "FN WWB.", "FN WWB.", "", "IM WWB.", "", "MOS or RA WWBs.", "FN WWB or CA problem.", "LA WWB.",
       56 	"MOS WWB.", "", "RA WWB.", "Control Store WWB(s).", "", "", "");
       57 
       58 /* BUILTINS */
       59 
       60 dcl  (addr, substr) builtin;
       61 
       62 	return;					/* do not enter here */
       63 
       64 stat_ctrs_:
       65      entry (a_poll_mpc_datap, my_mpc_stat_analp);
       66 
       67 	mpc_stat_analp = my_mpc_stat_analp;
       68 	poll_mpc_datap = a_poll_mpc_datap;
       69 	poll_mpc_specp = addr (poll_mpc_data.specific);
       70 	j = 0;
       71 
       72 	do i = 1 to 12;				/* cycle thru all counters */
       73 	     if poll_mtp_data.polled_stat_counters (i) ^= 0 then do;
       74 		j = j + 1;
       75 		mpc_stat_anal.interp_stat_ctrs (j) = mpc_stat_name (i);
       76 		mpc_stat_anal.stat_cntr_cnt (j) = poll_mtp_data.polled_stat_counters (i);
       77 		end;
       78 	end;
       79 
       80 	mpc_stat_anal.num_ctr_interps = j;
       81 
       82 	return;
       83 
       84 dau_stat_ctrs_:
       85      entry (a_poll_mpc_datap, my_mpc_stat_analp);
       86 
       87 	mpc_stat_analp = my_mpc_stat_analp;
       88 	poll_mpc_datap = a_poll_mpc_datap;
       89 	poll_mpc_specp = addr (poll_mpc_data.specific);
       90 	j = 0;
       91 
       92 	do i = 1 to 20;				/* cycle thru all counters */
       93 	     if poll_dau_data.psi_cntr (i) ^= 0 then do;
       94 		j = j + 1;
       95 		mpc_stat_anal.interp_stat_ctrs (j) = dau_stat_name (i);
       96 		mpc_stat_anal.stat_cntr_cnt (j) = poll_dau_data.psi_cntr (i);
       97 		end;
       98 	end;
       99 
      100 	if poll_dau_data.err_interrupts ^= 0 then do;
      101 	     j = j + 1;
      102 	     mpc_stat_anal.interp_stat_ctrs (j) = "Error Interrupts";
      103 	     mpc_stat_anal.stat_cntr_cnt (j) = poll_dau_data.err_interrupts;
      104 	     end;
      105 
      106 	mpc_stat_anal.num_ctr_interps = j;
      107 
      108 	return;
      109 
      110 /* **********************************************************
      111*   *   This entry is used to receive a decode of the error   *
      112*   *   data register only				   *
      113*   ********************************************************** */
      114 
      115 err_data_:
      116      entry (a_poll_mpc_datap, my_mpc_stat_analp);
      117 
      118 	mpc_stat_analp = my_mpc_stat_analp;
      119 	poll_mpc_datap = a_poll_mpc_datap;
      120 	poll_mpc_specp = addr (poll_mpc_data.specific);
      121 	j = 0;
      122 
      123 	if substr (poll_mpc_data.name, 1, 3) = "urp" then do;
      124 						/* old URP controller */
      125 	     error_reg = poll_urp_data.register;
      126 	     mpc_stat_anal.auxar = "0"b;
      127 	     mpc_stat_anal.intar = poll_urp_data.INTAR;
      128 	     mpc_stat_anal.err_ctr = poll_urp_data.interrupt_counter;
      129 	     end;
      130 	else do;					/* old disk or tape controller */
      131 	     error_reg = poll_mtp_data.register;
      132 	     mpc_stat_anal.auxar = poll_mtp_data.AUXAR;
      133 	     mpc_stat_anal.intar = poll_mtp_data.INTAR;
      134 	     mpc_stat_anal.err_ctr = poll_mtp_data.interrupt_counter;
      135 	     end;
      136 
      137 	do i = 1 to 16;
      138 	     if substr (error_reg, i, 1) = "1"b then do;
      139 		j = j + 1;
      140 		mpc_stat_anal.message (j) = err_reg_name (i);
      141 		mpc_stat_anal.HINT (j) = err_reg_hint (i);
      142 		end;
      143 	end;
      144 
      145 	mpc_stat_anal.num_interps = j;
      146 	return;
      147 
      148 
      149 stat_ctrs_for_summary_:
      150      entry (a_mpc_data_summaryp, my_mpc_stat_analp);
      151 
      152 	mpc_stat_analp = my_mpc_stat_analp;
      153 	mpc_data_summaryp = a_mpc_data_summaryp;
      154 	j = 0;
      155 
      156 	do i = 1 to 12;				/* cycle thru all counters */
      157 	     if mpc_data_summary.polled_stat_counters (i) ^= 0 then do;
      158 		j = j + 1;
      159 		mpc_stat_anal.interp_stat_ctrs (j) = mpc_stat_name (i);
      160 		mpc_stat_anal.stat_cntr_cnt (j) = mpc_data_summary.polled_stat_counters (i);
      161 		end;
      162 	end;
      163 
      164 	mpc_stat_anal.num_ctr_interps = j;
      165 
      166 	return;
      167 
      168 dau_stat_ctrs_for_summary_:
      169      entry (a_mpc_data_summaryp, my_mpc_stat_analp);
      170 
      171 	mpc_stat_analp = my_mpc_stat_analp;
      172 	mpc_data_summaryp = a_mpc_data_summaryp;
      173 	j = 0;
      174 
      175 	do i = 1 to 20;				/* cycle thru all counters */
      176 	     if mpc_data_summary.psi_cntr (i) ^= 0 then do;
      177 		j = j + 1;
      178 		mpc_stat_anal.interp_stat_ctrs (j) = dau_stat_name (i);
      179 		mpc_stat_anal.stat_cntr_cnt (j) = mpc_data_summary.psi_cntr (i);
      180 		end;
      181 	end;
      182 
      183 	if mpc_data_summary.err_interrupts ^= 0 then do;
      184 	     j = j + 1;
      185 	     mpc_stat_anal.interp_stat_ctrs (j) = "Error Interrupts";
      186 	     mpc_stat_anal.stat_cntr_cnt (j) = mpc_data_summary.err_interrupts;
      187 	     end;
      188 
      189 	mpc_stat_anal.num_ctr_interps = j;
      190 
      191 	return;
      192 
      193 /* **********************************************************
      194*   *   This entry is used to receive a decode of the error   *
      195*   *   data register only				   *
      196*   ********************************************************** */
      197 
      198 err_data_for_summary_:
      199      entry (a_mpc_data_summaryp, my_mpc_stat_analp);
      200 
      201 	mpc_stat_analp = my_mpc_stat_analp;
      202 	mpc_data_summaryp = a_mpc_data_summaryp;
      203 	j = 0;
      204 
      205 	if substr (mpc_data_summary.name, 1, 3) = "urp" then do;
      206 						/* old URP controller */
      207 	     error_reg = mpc_data_summary.register;
      208 	     mpc_stat_anal.auxar = "0"b;
      209 	     mpc_stat_anal.intar = mpc_data_summary.INTAR;
      210 	     mpc_stat_anal.err_ctr = mpc_data_summary.interrupt_counter;
      211 	     end;
      212 	else do;					/* old disk or tape controller */
      213 	     error_reg = mpc_data_summary.register;
      214 	     mpc_stat_anal.auxar = mpc_data_summary.AUXAR;
      215 	     mpc_stat_anal.intar = mpc_data_summary.INTAR;
      216 	     mpc_stat_anal.err_ctr = mpc_data_summary.interrupt_counter;
      217 	     end;
      218 
      219 	do i = 1 to 16;
      220 	     if substr (error_reg, i, 1) = "1"b then do;
      221 		j = j + 1;
      222 		mpc_stat_anal.message (j) = err_reg_name (i);
      223 		mpc_stat_anal.HINT (j) = err_reg_hint (i);
      224 		end;
      225 	end;
      226 
      227 	mpc_stat_anal.num_interps = j;
      228 	return;
      229 
      230 
  1     1 /* Begin include file . . . . . poll_mpc_data.incl.pl1 */
  1     2 
  1     3 /* Describes format of syserr binary data logged with mpc polling */
  1     4 /* Prepared April 1980 by Larry Johnson */
  1     5 /* Modified November 1980 by Rich Coppola to add MPC error registers */
  1     6 /* Modified May 1982 by Rich Coppola to add info about EURC */
  1     7 /* Modified June 1983 by Paul Farley to add dev_name to dev_stat structure.
  1     8*   Modified June 1984 by Paul Farley to add MSP800(DAU) support.
  1     9*   Also changed structures to version_2, which separates unique data into
  1    10*   individual definitions.
  1    11**/
  1    12 
  1    13 dcl  poll_mpc_datap ptr;
  1    14 dcl  poll_mpc_specp ptr;				/* addr(poll_mpc_data.specific) */
  1    15 dcl  poll_mpc_data_version_2 fixed bin int static options (constant) init (2);
  1    16 dcl  poll_mpc_data_n_devices fixed bin;
  1    17 dcl  poll_mpc_data_n_stats fixed bin;
  1    18 
  1    19 dcl 1 poll_mpc_data aligned based (poll_mpc_datap),
  1    20     2 version fixed bin,
  1    21     2 name char (4),				/* Name of MPC */
  1    22     2 model fixed bin,				/* Model number */
  1    23     2 n_words fixed bin,				/* used to get size */
  1    24     2 specific					/* Unique data, depending on */
  1    25     (0 refer (poll_mpc_data.n_words)) fixed bin (35);	/* MPC model number */
  1    26 
  1    27 dcl 1 poll_mtp_data aligned based (poll_mpc_specp),
  1    28     2 firmware_rev char (2) unal,			/* Firmware revision */
  1    29     2 config_sw bit (16) unal,			/* Configuration switches */
  1    30     2 pad bit (2) unal,
  1    31     2 polled_stat_counters (12) fixed bin,		/* LA-PSI  error counters */
  1    32     2 polled_error_data,
  1    33       3 pad1 bit (8),
  1    34       3 interrupt_counter fixed bin (8) uns,		/* the error interrupt counter */
  1    35       3 register bit (16),				/* the MPC's error data register */
  1    36       3 AUXAR bit (16),				/* the auxilliary mpc addr at time of last error */
  1    37       3 INTAR bit (16),				/* the addr at which the error occurred */
  1    38     2 n_devices fixed bin,				/* Number of devices with statistics */
  1    39     2 n_stats fixed bin,				/* Number of non-zero statistics actually logged */
  1    40     2 dev_info (poll_mpc_data_n_devices refer (poll_mtp_data.n_devices)) like dev_info,
  1    41     2 stat_info (poll_mpc_data_n_stats refer (poll_mtp_data.n_stats)) like stat_info;
  1    42 
  1    43 dcl 1 poll_msp_data aligned like poll_mtp_data based (poll_mpc_specp);
  1    44 
  1    45 dcl 1 poll_urp_data aligned based (poll_mpc_specp),
  1    46     2 interrupt_counter fixed bin (8) uns,		/* the error interrupt counter */
  1    47     2 register bit (16),				/* the MPC's error data register */
  1    48     2 INTAR bit (16);				/* thar addr at which the error occurred */
  1    49 
  1    50 dcl 1 poll_eurc_data aligned based (poll_mpc_specp),
  1    51     2 uptime_clock fixed bin (32) uns,
  1    52     2 prom_revision unal,
  1    53       3 core bit (8),
  1    54       3 iom bit (8),
  1    55       3 special_controller bit (8),
  1    56       3 link_edit bit (8),
  1    57       3 pdsi_application bit (8),
  1    58       3 self_test bit (8),
  1    59       3 dai_application bit (8),
  1    60     2 n_devices fixed bin,				/* Number of devices with statistics */
  1    61     2 n_stats fixed bin,				/* Number of non-zero statistics actually logged */
  1    62     2 dev_info (poll_mpc_data_n_devices refer (poll_eurc_data.n_devices)) like dev_info,
  1    63     2 stat_info (poll_mpc_data_n_stats refer (poll_eurc_data.n_stats)) like stat_info;
  1    64 
  1    65 dcl 1 poll_dau_data aligned based (poll_mpc_specp),
  1    66     2 fw_rev char (2) unal,				/* Firmware revision */
  1    67     2 hw_rev bit (8) unal,				/* DAU Revision */
  1    68     2 config unal,
  1    69       3 ci_0_online bit (1),
  1    70       3 ci_1_online bit (1),
  1    71       3 psi0_2trip bit (1),				/* 0= 4trip, 1= 2trip */
  1    72       3 psi1_2trip bit (1),
  1    73       3 psi2_2trip bit (1),
  1    74       3 psi3_2trip bit (1),
  1    75     2 pad bit (4) unal,
  1    76     2 err_interrupts fixed bin (12) uns unal,
  1    77     2 psi_cntr (20) fixed bin (8) unal,
  1    78     2 ext_size fixed bin,				/* Size of DAU extention info, */
  1    79 						/* 0=none, 72=err_int>0 */
  1    80     2 n_devices fixed bin,				/* Number of devices with statistics */
  1    81     2 n_stats fixed bin,				/* Number of non-zero statistics actually logged */
  1    82     2 err_info (0 refer (poll_dau_data.ext_size)) bit (8) unal,
  1    83     2 dev_info (poll_mpc_data_n_devices refer (poll_dau_data.n_devices)) like dev_info,
  1    84     2 stat_info (poll_mpc_data_n_stats refer (poll_dau_data.n_stats)) like stat_info;
  1    85 
  1    86 dcl  dev_info_ptr ptr;
  1    87 
  1    88 dcl 1 dev_info based (dev_info_ptr),
  1    89     2 subsystem char (1) unal,			/* X from tapX */
  1    90     2 driveno fixed bin (6) uns unal,			/* Drive number */
  1    91     2 opi bit (1) unal,				/* Powered on Bit */
  1    92     2 ca fixed bin (2) uns unal,			/* CA or TCA number */
  1    93     2 port fixed bin (4) uns unal,			/* Port number */
  1    94     2 dev_model char (6) unal,			/* Model number */
  1    95     2 dev_name char (7) unal;				/* Name of the dev */
  1    96 
  1    97 dcl  stat_info_ptr ptr;
  1    98 
  1    99 dcl 1 stat_info based (stat_info_ptr),
  1   100     2 dev_index fixed bin (9) uns unal,			/* Index in dev_info, above */
  1   101     2 stat_index fixed bin (9) uns unal,		/* Which statistic for that device (1 to 16) */
  1   102     2 pad bit (2) unal,
  1   103     2 value fixed bin (16) uns unal;			/* Actual value of that stat */
  1   104 
  1   105 
  1   106 /* Start of MPC Summary Declarations */
  1   107 
  1   108 dcl  mpc_data_summaryp ptr;
  1   109 dcl  mpc_data_specp ptr;				/* addr(mpc_data_summary.specific) */
  1   110 dcl  mpc_data_summary_version_2 fixed bin int static options (constant) init (2);
  1   111 dcl  mpc_summary_n_devices fixed bin;
  1   112 
  1   113 dcl 1 mpc_data_summary aligned based (mpc_data_summaryp),
  1   114     2 version fixed bin,
  1   115     2 name char (4),				/* Name of MPC */
  1   116     2 model fixed bin,
  1   117     2 firmware_rev char (2),				/* Firmware revision */
  1   118 
  1   119 /* *old* MSP, MTP and URP specific data */
  1   120 
  1   121     2 config_sw bit (16),				/* Configuration switches */
  1   122     2 polled_stat_counters (12) fixed bin,		/* LA-PSI  error counters */
  1   123     2 interrupt_counter fixed bin (35),			/* the error interrupt counter */
  1   124     2 register bit (16),				/* the MPC's error data register */
  1   125     2 AUXAR bit (16),				/* the auxilliary mpc addr at time of last error */
  1   126     2 INTAR bit (16),				/* thar addr at which the error occurred */
  1   127 
  1   128 /* EURC Specific data */
  1   129 
  1   130     2 eurc_specifics,
  1   131       3 uptime_clock fixed bin (32) uns,
  1   132       3 prom_revision,
  1   133         4 core bit (8),
  1   134         4 iom bit (8),
  1   135         4 special_controller bit (8),
  1   136         4 link_edit bit (8),
  1   137         4 pdsi_application bit (8),
  1   138         4 self_test bit (8),
  1   139         4 dai_application bit (8),
  1   140 
  1   141 /* DAU specific data */
  1   142 
  1   143     2 hw_rev bit (8) unal,				/* DAU Revision */
  1   144     2 config unal,
  1   145       3 ci_0_online bit (1),
  1   146       3 ci_1_online bit (1),
  1   147       3 psi0_2trip bit (1),				/* 0= 4trip, 1= 2trip */
  1   148       3 psi1_2trip bit (1),
  1   149       3 psi2_2trip bit (1),
  1   150       3 psi3_2trip bit (1),
  1   151     2 err_interrupts fixed bin (35),
  1   152     2 err_info (72) bit (8) unal,
  1   153     2 psi_cntr (20) fixed bin (35),
  1   154 
  1   155 /* Device statistical data */
  1   156 
  1   157     2 n_devices fixed bin,				/* Number of devices with statistics */
  1   158     2 dev_stat (mpc_summary_n_devices refer (mpc_data_summary.n_devices)) like dev_stat;
  1   159 
  1   160 dcl  dev_stat_ptr ptr;
  1   161 
  1   162 dcl 1 dev_stat based (dev_stat_ptr),
  1   163     2 subsystem char (1) unal,			/* X from tapX */
  1   164     2 driveno fixed bin (6) uns unal,			/* Drive number */
  1   165     2 opi bit (1) unal,				/* Powered on Bit */
  1   166     2 ca fixed bin (2) uns unal,			/* CA or TCA number */
  1   167     2 port fixed bin (4) uns unal,			/* Port number */
  1   168     2 pad bit (5) unal,
  1   169     2 dev_model char (6) unal,			/* Model number */
  1   170     2 prev_driveno fixed bin (6) uns unal,
  1   171     2 pad1 bit (3) unal,
  1   172     2 dev_name char (6) unal,				/* Name of the dev */
  1   173     2 value (16) fixed bin (35);			/* Actual value of that stat */
  1   174 
  1   175 dcl  dev_sum_ptr ptr;
  1   176 
  1   177 dcl 1 dev_sum like dev_stat based (dev_sum_ptr);
  1   178 
  1   179 
  1   180 /* Note: except for the MPC registers only non-zero statistics are logged.
  1   181*   An entry is made in the stat_info array for each non-zero statistics noting
  1   182*   which device, and which of the counters was non-zero */
  1   183 
  1   184 /* End include file . . . . . poll_mpc_data.incl.pl1 */
      231 
      232 
  2     1 /* Begin include file ..... dump_mpc_data.incl.pl1 */
  2     2 
  2     3 /* Structure of data used by the dump_mpc command */
  2     4 
  2     5 /* Written March 1977 by Larry Johnson */
  2     6 /* Modified Jan 1981 by Rich Coppola to add additional info about mpc's */
  2     7 /* Modified May 1982 by Rich Coppola to add structure for EURC statistics */
  2     8 /*
  2     9*   Modified June 1984 by Paul Farley to add MSP800(DAU) support.
  2    10**/
  2    11 
  2    12 dcl  mpc_datap ptr;
  2    13 
  2    14 dcl 1 mpc_data aligned based (mpc_datap),
  2    15     2 type char (4),				/* Type of mpc: tape, disk, or urc */
  2    16     2 name char (32),				/* Name of device, suitable for headings */
  2    17     2 model fixed bin,				/* Model of device, from rcp_ */
  2    18     2 fw_rev char (2),				/* Revision level of current firmware */
  2    19     2 trace_start fixed bin,				/* Address of first trace table entry */
  2    20     2 trace_size fixed bin,				/* Total number of mpc words in trace table */
  2    21     2 trace_cur fixed bin,				/* Address of next available trace entry */
  2    22     2 mpc_stat_addr fixed bin,			/* Address of mpc error counters */
  2    23     2 mpc_err_int_ctr_addr fixed bin,			/* Address of the err int ctr */
  2    24     2 mpc_err_data_reg_addr fixed bin,			/* Address of error data register */
  2    25     2 dev_stat_addr fixed bin,			/* Address of device statistics table */
  2    26     2 config_sw bit (16),				/* Settings of switches on maintaince panel */
  2    27     2 dau_rev bit (8);				/* Revision of DAU hardware */
  2    28 
  2    29 
  2    30 /* structure of data collected on mpc statistics */
  2    31 
  2    32 dcl  mpc_stat_infop ptr;
  2    33 
  2    34 dcl 1 mpc_stat_info aligned based (mpc_stat_infop),
  2    35     2 mpc_name char (4),
  2    36     2 stat_counters (12) fixed bin,
  2    37     2 error_data,
  2    38       3 pad bit (8),
  2    39       3 int_counter fixed bin (8) uns,
  2    40       3 register bit (16),
  2    41       3 auxar bit (16),
  2    42       3 intar bit (16),
  2    43     2 eurc_data,
  2    44       3 uptime_clock fixed bin (32) uns,
  2    45       3 prom_revision,
  2    46         4 core bit (8),
  2    47         4 iom bit (8),
  2    48         4 special_controller bit (8),
  2    49         4 link_edit bit (8),
  2    50         4 pdsi_application bit (8),
  2    51         4 self_test bit (8),
  2    52         4 dai_application bit (8),
  2    53     2 ndev fixed bin,
  2    54     2 dev_info (64) like dev_stat_info;
  2    55 
  2    56 dcl  dev_stat_infop ptr;
  2    57 
  2    58 dcl 1 dev_stat_info aligned based (dev_stat_infop),
  2    59     2 subsystem char (4),
  2    60     2 model char (6),
  2    61     2 driveno fixed bin,
  2    62     2 opi bit (1),
  2    63     2 port fixed bin,
  2    64     2 ca fixed bin,
  2    65     2 stat (16) fixed bin (16) uns;
  2    66 
  2    67 dcl  mpc_stat_analp ptr;
  2    68 
  2    69 dcl 1 mpc_stat_anal based (mpc_stat_analp),
  2    70     2 num_interps fixed bin,
  2    71     2 interpretation (16),
  2    72       3 message char (43) var,
  2    73       3 HINT char (21) var,
  2    74     2 auxar bit (16),
  2    75     2 intar bit (16),
  2    76     2 err_ctr fixed bin,
  2    77     2 mpc_stat_ctrs,
  2    78       3 num_ctr_interps fixed bin,
  2    79       3 interp_stat_ctrs (20) char (20) var,
  2    80       3 stat_cntr_cnt (20) fixed bin;
  2    81 
  2    82 /* End include file ..... dump_mpc_data.incl.pl1 */
      233 
      234 
      235      end decode_mpc_stats_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    04/17/00  1926.4  decode_mpc_stats_.pl1             >udd>sm>ds>w>ml>decode_mpc_stats_.pl1
231          1    04/02/85  1214.7  poll_mpc_data.incl.pl1            >ldd>incl>poll_mpc_data.incl.pl1
233          2    10/08/84  1426.0  dump_mpc_data.incl.pl1            >ldd>incl>dump_mpc_data.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
AUXAR                    23            based           bit(16)                  level 2 in structure "mpc_data_summary" dcl 1-113
                                                                                  in procedure "decode_mpc_stats_" ref 214
AUXAR                    20            based           bit(16)                  level 3 in structure "poll_mtp_data" dcl 1-27
                                                                                  in procedure "decode_mpc_stats_" ref 132
HINT                     15            based           varying char(21)         array level 3 dcl 2-69 set ref 141* 223*
INTAR                    24            based           bit(16)                  level 2 in structure "mpc_data_summary" dcl 1-113
                                                                                  in procedure "decode_mpc_stats_" ref 209 215
INTAR                     2            based           bit(16)                  level 2 in structure "poll_urp_data" dcl 1-45
                                                                                  in procedure "decode_mpc_stats_" ref 127
INTAR                    21            based           bit(16)                  level 3 in structure "poll_mtp_data" dcl 1-27
                                                                                  in procedure "decode_mpc_stats_" ref 133
a_mpc_data_summaryp                    parameter       pointer                  dcl 24 ref 149 153 168 172 198 202
a_poll_mpc_datap                       parameter       pointer                  dcl 23 ref 64 68 84 88 115 119
addr                                                   builtin function         dcl 60 ref 69 89 120
auxar                   461            based           bit(16)                  level 2 packed packed unaligned dcl 2-69 set ref
                                                                                  126* 132* 208* 214*
dau_stat_name                   000400 constant        char(18)                 initial array packed unaligned dcl 41 ref 95 178
dev_info                               based           structure                level 1 packed packed unaligned dcl 1-88
dev_stat                               based           structure                level 1 unaligned dcl 1-162
dev_stat_info                          based           structure                level 1 dcl 2-58
err_ctr                 462            based           fixed bin(17,0)          level 2 dcl 2-69 set ref 128* 134* 210* 216*
err_interrupts            1            based           fixed bin(12,0)          level 2 in structure "poll_dau_data" packed packed
                                                                                  unsigned unaligned dcl 1-65 in procedure
                                                                                  "decode_mpc_stats_" ref 100 103
err_interrupts           36            based           fixed bin(35,0)          level 2 in structure "mpc_data_summary" dcl 1-113
                                                                                  in procedure "decode_mpc_stats_" ref 183 186
err_reg_hint                    000000 constant        char(21)                 initial array packed unaligned dcl 54 ref 141 223
err_reg_name                    000124 constant        char(43)                 initial array packed unaligned dcl 47 ref 140 222
error_reg                       000102 automatic       bit(16)                  packed unaligned dcl 31 set ref 125* 131* 138 207*
                                                                                  213* 220
i                               000100 automatic       fixed bin(17,0)          dcl 29 set ref 72* 73 75 76* 92* 93 95 96* 137* 138
                                                                                  140 141* 156* 157 159 160* 175* 176 178 179* 219*
                                                                                  220 222 223*
intar                   461(16)        based           bit(16)                  level 2 packed packed unaligned dcl 2-69 set ref
                                                                                  127* 133* 209* 215*
interp_stat_ctrs        464            based           varying char(20)         array level 3 dcl 2-69 set ref 75* 95* 102* 159*
                                                                                  178* 185*
interpretation            1            based           structure                array level 2 unaligned dcl 2-69
interrupt_counter        21            based           fixed bin(35,0)          level 2 in structure "mpc_data_summary" dcl 1-113
                                                                                  in procedure "decode_mpc_stats_" ref 210 216
interrupt_counter        16            based           fixed bin(8,0)           level 3 in structure "poll_mtp_data" unsigned
                                                                                  dcl 1-27 in procedure "decode_mpc_stats_" ref 134
interrupt_counter                      based           fixed bin(8,0)           level 2 in structure "poll_urp_data" unsigned
                                                                                  dcl 1-45 in procedure "decode_mpc_stats_" ref 128
j                               000101 automatic       fixed bin(17,0)          dcl 29 set ref 70* 74* 74 75 76 80 90* 94* 94 95 96
                                                                                  101* 101 102 103 106 121* 139* 139 140 141 145
                                                                                  154* 158* 158 159 160 164 173* 177* 177 178 179
                                                                                  184* 184 185 186 189 203* 221* 221 222 223 227
message                   1            based           varying char(43)         array level 3 dcl 2-69 set ref 140* 222*
mpc_data_summary                       based           structure                level 1 dcl 1-113
mpc_data_summaryp               000110 automatic       pointer                  dcl 1-108 set ref 153* 157 160 172* 176 179 183 186
                                                                                  202* 205 207 209 210 213 214 215 216
mpc_stat_anal                          based           structure                level 1 unaligned dcl 2-69
mpc_stat_analp                  000112 automatic       pointer                  dcl 2-67 set ref 67* 75 76 80 87* 95 96 102 103 106
                                                                                  118* 126 127 128 132 133 134 140 141 145 152* 159
                                                                                  160 164 171* 178 179 185 186 189 201* 208 209 210
                                                                                  214 215 216 222 223 227
mpc_stat_ctrs           463            based           structure                level 2 unaligned dcl 2-69
mpc_stat_name                   000532 constant        char(18)                 initial array packed unaligned dcl 36 ref 75 159
my_mpc_stat_analp                      parameter       pointer                  dcl 30 ref 64 67 84 87 115 118 149 152 168 171 198
                                                                                  201
name                      1            based           char(4)                  level 2 in structure "mpc_data_summary" dcl 1-113
                                                                                  in procedure "decode_mpc_stats_" ref 205
name                      1            based           char(4)                  level 2 in structure "poll_mpc_data" dcl 1-19
                                                                                  in procedure "decode_mpc_stats_" ref 123
num_ctr_interps         463            based           fixed bin(17,0)          level 3 dcl 2-69 set ref 80* 106* 164* 189*
num_interps                            based           fixed bin(17,0)          level 2 dcl 2-69 set ref 145* 227*
poll_dau_data                          based           structure                level 1 dcl 1-65
poll_mpc_data                          based           structure                level 1 dcl 1-19
poll_mpc_datap                  000104 automatic       pointer                  dcl 1-13 set ref 68* 69 88* 89 119* 120 123
poll_mpc_specp                  000106 automatic       pointer                  dcl 1-14 set ref 69* 73 76 89* 93 96 100 103 120*
                                                                                  125 127 128 131 132 133 134
poll_mtp_data                          based           structure                level 1 dcl 1-27
poll_urp_data                          based           structure                level 1 dcl 1-45
polled_error_data        15            based           structure                level 2 dcl 1-27
polled_stat_counters      1            based           fixed bin(17,0)          array level 2 in structure "poll_mtp_data" dcl 1-27
                                                                                  in procedure "decode_mpc_stats_" ref 73 76
polled_stat_counters      5            based           fixed bin(17,0)          array level 2 in structure "mpc_data_summary"
                                                                                  dcl 1-113 in procedure "decode_mpc_stats_" ref 157
                                                                                  160
psi_cntr                  1(12)        based           fixed bin(8,0)           array level 2 in structure "poll_dau_data" packed
                                                                                  packed unaligned dcl 1-65 in procedure
                                                                                  "decode_mpc_stats_" ref 93 96
psi_cntr                 57            based           fixed bin(35,0)          array level 2 in structure "mpc_data_summary"
                                                                                  dcl 1-113 in procedure "decode_mpc_stats_" ref 176
                                                                                  179
register                 22            based           bit(16)                  level 2 in structure "mpc_data_summary" dcl 1-113
                                                                                  in procedure "decode_mpc_stats_" ref 207 213
register                  1            based           bit(16)                  level 2 in structure "poll_urp_data" dcl 1-45
                                                                                  in procedure "decode_mpc_stats_" ref 125
register                 17            based           bit(16)                  level 3 in structure "poll_mtp_data" dcl 1-27
                                                                                  in procedure "decode_mpc_stats_" ref 131
specific                  4            based           fixed bin(35,0)          array level 2 dcl 1-19 set ref 69 89 120
stat_cntr_cnt           654            based           fixed bin(17,0)          array level 3 dcl 2-69 set ref 76* 96* 103* 160*
                                                                                  179* 186*
stat_info                              based           structure                level 1 packed packed unaligned dcl 1-99
substr                                                 builtin function         dcl 60 ref 123 138 205 220

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
dev_info_ptr                           automatic       pointer                  dcl 1-86
dev_stat_infop                         automatic       pointer                  dcl 2-56
dev_stat_ptr                           automatic       pointer                  dcl 1-160
dev_sum                                based           structure                level 1 unaligned dcl 1-177
dev_sum_ptr                            automatic       pointer                  dcl 1-175
mpc_data                               based           structure                level 1 dcl 2-14
mpc_data_specp                         automatic       pointer                  dcl 1-109
mpc_data_summary_version_2             internal static fixed bin(17,0)          initial dcl 1-110
mpc_datap                              automatic       pointer                  dcl 2-12
mpc_stat_info                          based           structure                level 1 dcl 2-34
mpc_stat_infop                         automatic       pointer                  dcl 2-32
mpc_summary_n_devices                  automatic       fixed bin(17,0)          dcl 1-111
poll_eurc_data                         based           structure                level 1 dcl 1-50
poll_mpc_data_n_devices                automatic       fixed bin(17,0)          dcl 1-16
poll_mpc_data_n_stats                  automatic       fixed bin(17,0)          dcl 1-17
poll_mpc_data_version_2                internal static fixed bin(17,0)          initial dcl 1-15
poll_msp_data                          based           structure                level 1 dcl 1-43
stat_info_ptr                          automatic       pointer                  dcl 1-97

NAMES DECLARED BY EXPLICIT CONTEXT.
dau_stat_ctrs_                  000721 constant        entry                    external dcl 84
dau_stat_ctrs_for_summary_      001236 constant        entry                    external dcl 168
decode_mpc_stats_               000627 constant        entry                    external dcl 17
err_data_                       001033 constant        entry                    external dcl 115
err_data_for_summary_           001337 constant        entry                    external dcl 198
stat_ctrs_                      000641 constant        entry                    external dcl 64
stat_ctrs_for_summary_          001157 constant        entry                    external dcl 149

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1570        1600    1462        1600
Length      2010    1462        10         174     105           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
decode_mpc_stats_                    79 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
decode_mpc_stats_        000100 i                           decode_mpc_stats_
                         000101 j                           decode_mpc_stats_
                         000102 error_reg                   decode_mpc_stats_
                         000104 poll_mpc_datap              decode_mpc_stats_
                         000106 poll_mpc_specp              decode_mpc_stats_
                         000110 mpc_data_summaryp           decode_mpc_stats_
                         000112 mpc_stat_analp              decode_mpc_stats_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
return_mac          ext_entry

NO EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     17 000626        62 000634        64 000635        67 000646        68 000652        69 000655        70 000657
     72 000660        73 000665        74 000667        75 000670        76 000705        78 000711        80 000713
     82 000716        84 000717        87 000726        88 000732        89 000735        90 000737        92 000740
     93 000745        94 000757        95 000760        96 000775        98 001000       100 001002       101 001007
    102 001010       103 001022       106 001025       108 001030       115 001031       118 001040       119 001044
    120 001047       121 001051       123 001052       125 001056       126 001060       127 001062       128 001067
    129 001071       131 001072       132 001074       133 001100       134 001105       137 001107       138 001115
    139 001121       140 001122       141 001137       143 001150       145 001152       146 001154       149 001155
    152 001164       153 001170       154 001173       156 001174       157 001201       158 001204       159 001205
    160 001222       162 001226       164 001230       166 001233       168 001234       171 001243       172 001247
    173 001252       175 001253       176 001261       177 001264       178 001265       179 001302       181 001306
    183 001310       184 001313       185 001314       186 001326       189 001331       191 001334       198 001335
    201 001344       202 001350       203 001353       205 001354       207 001360       208 001362       209 001364
    210 001371       211 001373       213 001374       214 001376       215 001402       216 001407       219 001411
    220 001417       221 001423       222 001424       223 001441       225 001452       227 001454       228 001456


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
