	COMPILATION LISTING OF SEGMENT !BBBJWWQlcDpQjW
	Compiled by: Multics PL/I Compiler, Release 29, of July 28, 1986
	Compiled at: Honeywell Bull, Phx. Az., Sys-M 
	Compiled on: 04/26/87  1556.0 mst Sun
	    Options: table map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 
        7 
        8 /* HISTORY COMMENTS:
        9*  1) change(81-05-14,Stansbury), approve(), audit(),
       10*     install(86-08-21,MR12.0-1138):
       11*     Created.
       12*  2) change(82-02-02,Stansbury), approve(), audit(),
       13*     install(86-08-21,MR12.0-1138):
       14*     Modified - Added the 'pmac' suffix for the PL/1 macro expander.
       15*  3) change(82-06-04,Stansbury), approve(), audit(),
       16*     install(86-08-21,MR12.0-1138):
       17*     Modified - Added the 'ld' suffix for the library descriptor language.
       18*  4) change(82-06-17,Stansbury), approve(), audit(),
       19*     install(86-08-21,MR12.0-1138):
       20*     Modified - Added the following suffixes: pascal, cmdb, header, mexp,
       21*     runoff, linus
       22*  5) change(82-09-28,Stansbury), approve(), audit(),
       23*     install(86-08-21,MR12.0-1138):
       24*     Modified - Added the ted and qedx suffixes.
       25*  6) change(85-09-03,LJAdams), approve(85-09-27,MCR7150),
       26*     audit(86-02-07,Wallman), install(86-02-13,MR12.0-1017):
       27*     Added  Type  4  and  Type  5.   Type  4  allows the comment begin
       28*     characters  to  be  "/****^  "  so  the  history comments will be
       29*     indented  properly  by  format  pl1.   Type  5  is for runoff and
       30*     compose files.  Blank lines will not be inserted before and after
       31*     the history comment block as they are interpreted as space blocks
       32*     by compose.
       33*  7) change(85-11-13,LJAdams), approve(85-11-13,MCR7150),
       34*     audit(86-02-07,Wallman), install(86-02-13,MR12.0-1017):
       35*     Changed pascal begin/end delimiters to (* and *) respectively.  Added xdw
       36*     language type suffix.  Changed pmac suffix to type 4.
       37*  8) change(86-01-29,LJAdams), approve(86-01-29,MCR7150),
       38*     audit(86-02-07,Wallman), install(86-02-13,MR12.0-1017):
       39*     Added support for "C" language and micro_assembler.
       40*  9) change(86-07-28,LJAdams), approve(86-08-01,MCR7509),
       41*     audit(86-08-05,Blair), install(86-08-21,MR12.0-1138):
       42*     Added support for lap language.
       43* 10) change(86-09-08,LJAdams), approve(86-09-08,MCR7526),
       44*     audit(86-11-05,GDixon), install(86-11-12,MR12.0-1213):
       45*     Added .cmf, .ttf, .rtmf, .ssl, .teco, and iodt suffixes.
       46* 11) change(86-09-23,LJAdams), approve(86-09-23,MCR7526),
       47*     audit(86-11-05,GDixon), install(86-11-12,MR12.0-1213):
       48*     Added support for bind_fnp suffix.
       49* 12) change(87-03-16,LJAdams), approve(87-04-22,MCR7653),
       50*     audit(87-04-02,Gilcrease), install(87-04-26,MR12.1-1026):
       51*     Added support for C language header files (.H) files. (phx20795)
       52*                                                   END HISTORY COMMENTS */
       53 
       54      
       55 pnotice_language_info_:
       56 	proc;
       57 
       58 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
       59 	/*									*/
       60 	/* This program creates the pnotice_language_info_ data structure for language names, and */
       61 	/* for their associated comment delimiters.					*/
       62 	/*									*/
       63 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
       64 
       65 	      
       66 
       67 dcl  create_data_segment_ entry (ptr, fixed bin (35));
       68 
       69 dcl  1 cdsa	     aligned like cds_args;
       70 
       71 dcl  code		     fixed bin (35);
       72 
       73 dcl  name		     char (22) aligned static init
       74                          ("pnotice_language_info_") options (constant),
       75      NL		     char (1) aligned int static options(constant) init ("
       76 "),
       77      exclude_pad         (1) char (32) aligned static options (constant) init
       78 		     ("pad*");
       79 
       80 dcl (dim,
       81      addr,
       82      size,
       83      string)	     builtin;
       84 
  1     1 /* START OF pnotice_language_info_.incl.pl1  */
  1     2 
  1     3 
  1     4 /****^  HISTORY COMMENTS:
  1     5*  1) change(81-06-14,Stansbury), approve(), audit(), install():
  1     6*     Created May 14, 1981 by JM Stansbury
  1     7*  2) change(81-07-30,Stansbury), approve(), audit(), install():
  1     8*     Modified - added type 3.
  1     9*  3) change(85-08-28,LJAdams), approve(85-10-29,MCR7150),
  1    10*     audit(86-02-07,Wallman), install(86-02-13,MR12.0-1017):
  1    11*     Modified - added type 4.
  1    12*  4) change(85-10-29,LJAdams), approve(85-10-29,MCR7150),
  1    13*     audit(86-02-07,Wallman), install(86-02-13,MR12.0-1017):
  1    14*     Added Type 5 to define runoff and compose files.
  1    15*                                                   END HISTORY COMMENTS */
  1    16 
  1    17 
  1    18 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  1    19 	/*									*/
  1    20 	/* Structure defining the individual languages known to and processed by the add_pnotice	*/
  1    21 	/* command. A language may be a true programming language, like PL/1, or some   	*/
  1    22 	/* other suffixed subsystem, like absin. The following information is kept for each	*/
  1    23 	/* language:								*/
  1    24 	/* 1: name         the suffix identifying the language,				*/
  1    25 	/* 2: type         one of the currently defined types. See notes.			*/
  1    26 	/* 3: cmt_bgn      the delimiter used to begin a comment,				*/
  1    27 	/* 4: cmt_end      the delimiter used to end a comment.				*/
  1    28 	/*									*/
  1    29 	/* Notes: There are currently 5 defined types.					*/
  1    30 	/* Type 1:         has a comment end delimiter other than a newline character. 
  1    31*                       */
  1    32 	/* Type 2:         has the newline character as the comment end delimiter.		*/
  1    33 	/* Type 3:         this type was invented due to the creation of version 1 and version 2	*/
  1    34 	/* exec_com. These require some extra work to determine comment creation and placement.	*/
  1    35           /* Type 4:         has a /****^ as a comment begin delimiter - pl1.			*/
  1    36 	/* Type 5:         this type is used to define compin and runoff files.		*/
  1    37 	/*									*/
  1    38 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  1    39 
  1    40 	
  1    41 dcl pnotice_language_info_$languages   fixed bin ext static;
  1    42 	
  1    43 dcl 1 pnotice_language_info	         aligned based (addr (pnotice_language_info_$languages)),
  1    44       2 languages,
  1    45         3 N		         fixed bin,
  1    46         3 lang_array	         (0 refer (pnotice_language_info.N)),
  1    47           4 lang_type	         fixed bin,
  1    48           4 lang_name	         char (8) var,	/* i.e., pl1, cobol, fortran... */
  1    49           4 comment_start	         char (8) var,
  1    50           4 comment_end	         char (8) var;
  1    51 
  1    52 /* END OF pnotice_language_info_.incl.pl1  */
       85 
       86 
       87 dcl 1 lang_info aligned,
       88       2 languages,
       89         3 N fixed bin,
       90         3 lang_array (41) like pnotice_language_info.lang_array;
       91 
       92 
       93 	lang_info.languages.N = dim(lang_info.languages.lang_array, 1);
       94 
       95 	lang_info.lang_type(1) = 4;
       96 	lang_info.lang_name(1) = "pl1";		/* PL/1 */
       97 	lang_info.comment_start(1) = "/****^ ";
       98 	lang_info.comment_end(1) = "*/";
       99 	
      100 	lang_info.lang_type(2) = 2;
      101 	lang_info.lang_name(2) = "alm";		/* ALM */
      102 	lang_info.comment_start(2) = """";
      103 	lang_info.comment_end(2) = NL;
      104 
      105 	lang_info.lang_type(3) = 2;
      106 	lang_info.lang_name(3) = "fortran";		/* FORTRAN */
      107 	lang_info.comment_start(3) = "c";
      108 	lang_info.comment_end(3) = NL;
      109 	
      110 	lang_info.lang_type(4) = 2;
      111 	lang_info.lang_name(4) = "cobol";		/* COBOL */
      112 	lang_info.comment_start(4) = "*";
      113 	lang_info.comment_end(4) = NL;
      114 	
      115 	lang_info.lang_type(5) = 2;
      116 	lang_info.lang_name(5) = "lisp";		/* LISP */
      117 	lang_info.comment_start(5) = ";;;";
      118 	lang_info.comment_end(5) = NL;
      119 	
      120 	lang_info.lang_type(6) = 5;
      121 	lang_info.lang_name(6) = "compin";		/* COMPIN */
      122 	lang_info.comment_start(6) = ".*";
      123 	lang_info.comment_end(6) = NL;
      124 
      125 	lang_info.lang_type(7) = 1;
      126 	lang_info.lang_name(7) = "cds";		/* CDS */
      127 	lang_info.comment_start(7) = "/*";
      128 	lang_info.comment_end(7) = "*/";
      129 
      130 	lang_info.lang_type(8) = 1;
      131 	lang_info.lang_name(8) = "et";		/* ET, ERROR_TABLE */
      132 	lang_info.comment_start(8) = "/*";
      133 	lang_info.comment_end(8) = "*/";
      134 
      135 	lang_info.lang_type(9) = 1;
      136 	lang_info.lang_name(9) = "bind";		/* BIND, BINDER */
      137 	lang_info.comment_start(9) = "/*";
      138 	lang_info.comment_end(9) = "*/";
      139 
      140 	lang_info.lang_type(10) = 1;
      141 	lang_info.lang_name(10) = "rd";		/* RD, REDUCTION COMPILER */
      142 	lang_info.comment_start(10) = "/*";
      143 	lang_info.comment_end(10) = "*/";
      144 
      145 	lang_info.lang_type(11) = 1;
      146 	lang_info.lang_name(11) = "compdv";		/* COMPDV, COMPOSE DEVICE TABLES */
      147 	lang_info.comment_start(11) = "/*";
      148 	lang_info.comment_end(11) = "*/";
      149 
      150 	lang_info.lang_type(12) = 1;
      151 	lang_info.lang_name(12) = "macro";		/* MACRO, COMPOSE MACROS */
      152 	lang_info.comment_start(12) = "/*";
      153 	lang_info.comment_end(12) = "*/";
      154 
      155 	lang_info.lang_type(13) = 1;
      156 	lang_info.lang_name(13) = "gdt";		/* GDT, GRAPHICS DEVICE TABLES */
      157 	lang_info.comment_start(13) = "/*";
      158 	lang_info.comment_end(13) = "*/";
      159 
      160 	lang_info.lang_type(14) = 2;
      161 	lang_info.lang_name(14) = "bcpl";		/* BCPL */
      162 	lang_info.comment_start(14) = "//";
      163 	lang_info.comment_end(14) = NL;
      164 
      165 	lang_info.lang_type(15) = 2;
      166 	lang_info.lang_name(15) = "map355";		/* MAP355 */
      167 	lang_info.comment_start(15) = "*";
      168 	lang_info.comment_end(15) = NL;
      169 
      170 	lang_info.lang_type(16) = 3;
      171 	lang_info.lang_name(16) = "ec";		/* EC, EXEC_COM */
      172 	lang_info.comment_start(16) = "&";		/* this is modified as needed, by pnotice tools */
      173 	lang_info.comment_end(16) = NL;
      174 	
      175 	lang_info.lang_type(17) = 2;
      176 	lang_info.lang_name(17) = "basic";		/* BASIC */
      177 	lang_info.comment_start(17) = "rem";
      178 	lang_info.comment_end(17) = NL;
      179 
      180 	lang_info.lang_type(18) = 3;
      181 	lang_info.lang_name(18) = "absin";		/* ABSIN, ABSENTEE */
      182 	lang_info.comment_start(18) = "&";		/* this is modified as needed by pnotice tools */
      183 	lang_info.comment_end(18) = NL;
      184 
      185 	lang_info.lang_type(19) = 4;
      186 	lang_info.lang_name(19) = "pmac";		/* PL/1 MACRO EXPANDER */
      187 	lang_info.comment_start(19) = "/****^ ";
      188 	lang_info.comment_end(19) = "*/";
      189 
      190 	lang_info.lang_type(20) = 1;
      191 	lang_info.lang_name(20) = "ld";		/* LIBRARY DESCRIPTOR */
      192 	lang_info.comment_start(20) = "/*";
      193 	lang_info.comment_end(20) = "*/";
      194 
      195 	lang_info.lang_type(21) = 1;
      196 	lang_info.lang_name(21) = "pascal";		/* PASCAL */
      197 	lang_info.comment_start(21) = "(*";
      198 	lang_info.comment_end(21) = "*)";
      199 
      200 	lang_info.lang_type(22) = 1;
      201 	lang_info.lang_name(22) = "cmdb";		/* MRDS DB SOURCE */
      202 	lang_info.comment_start(22) = "/*";
      203 	lang_info.comment_end(22) = "*/";
      204 
      205 	lang_info.lang_type(23) = 1;
      206 	lang_info.lang_name(23) = "header";		/* HARDCORE HEADER */
      207 	lang_info.comment_start(23) = "/*";
      208 	lang_info.comment_end(23) = "*/";
      209 
      210 	lang_info.lang_type(24) = 2;
      211 	lang_info.lang_name(24) = "mexp";		/* OLD MACRO EXPANDER */
      212 	lang_info.comment_start(24) = """";
      213 	lang_info.comment_end(24) = "NL";
      214 
      215 	lang_info.lang_type(25) = 5;
      216 	lang_info.lang_name(25) = "runoff";		/* RUNOFF SOURCE */
      217 	lang_info.comment_start(25) = ".*";
      218 	lang_info.comment_end(25) = "NL";
      219 
      220 	lang_info.lang_type(26) = 1;
      221 	lang_info.lang_name(26) = "linus";		/* LINUS INVOKE MACROS */
      222 	lang_info.comment_start(26) = "/*";
      223 	lang_info.comment_end(26) = "*/";
      224 
      225 	lang_info.lang_type(27) = 2;
      226 	lang_info.lang_name(27) = "ted";		/* TED */
      227 	lang_info.comment_start(27) = """";
      228 	lang_info.comment_end(27) = NL;
      229 
      230 	lang_info.lang_type(28) = 2;
      231 	lang_info.lang_name(28) = "qedx";		/* QEDX */
      232 	lang_info.comment_start(28) = """";
      233 	lang_info.comment_end(28) = NL;
      234 
      235 	lang_info.lang_type(29) = 2;
      236 	lang_info.lang_name(29) = "table";		/* TABLE */
      237 	lang_info.comment_start(29) = """";
      238 	lang_info.comment_end(29) = NL;
      239 
      240 	lang_info.lang_type(30) = 4;
      241 	lang_info.lang_name(30) = "xdw";		/* EXPAND DEVICE WRITER*/
      242 	lang_info.comment_start(30) = "/****^ ";
      243 	lang_info.comment_end(30) = "*/";
      244 
      245 	lang_info.lang_type(31) = 2;			/* MICRO ASSEMBLER */
      246 	lang_info.lang_name(31) = "asm";
      247 	lang_info.comment_start(31) = ";";
      248 	lang_info.comment_end(31) = NL;
      249 	
      250 	lang_info.lang_type(32) = 1;			/* C */
      251 	lang_info.lang_name(32) = "c";
      252 	lang_info.comment_start(32) = "/*";
      253 	lang_info.comment_end(32) = "*/";
      254 
      255 	lang_info.lang_type(33) = 2;
      256 	lang_info.lang_name(33) = "lap";		/* LAP */
      257 	lang_info.comment_start(33) = ";;;";
      258 	lang_info.comment_end(33) = NL;
      259 
      260 	lang_info.lang_type(34) = 4;
      261 	lang_info.lang_name(34) = "cmf";		/* CMF */
      262 	lang_info.comment_start(34) = "/****^ ";
      263 	lang_info.comment_end(34) = "*/";
      264 
      265 	lang_info.lang_type(35) = 4;
      266 	lang_info.lang_name(35) = "ttf";		/* TTF */
      267 	lang_info.comment_start(35) = "/****^ ";
      268 	lang_info.comment_end(35) = "*/";
      269 
      270 	lang_info.lang_type(36) = 4;
      271 	lang_info.lang_name(36) = "rtmf";		/* RTMF */
      272 	lang_info.comment_start(36) = "/****^ ";
      273 	lang_info.comment_end(36) = "*/";
      274 
      275 	lang_info.lang_type(37) = 4;
      276 	lang_info.lang_name(37) = "iodt";		/* IODT */
      277 	lang_info.comment_start(37) = "/****^ ";
      278 	lang_info.comment_end(37) = "*/";
      279 
      280 	lang_info.lang_type(38) = 2;
      281 	lang_info.lang_name(38) = "ssl";		/* SSL */
      282 	lang_info.comment_start(38) = "*";
      283 	lang_info.comment_end(38) = "NL";
      284 
      285 	lang_info.lang_type(39) = 1;
      286 	lang_info.lang_name(39) = "teco";		/* TECO */
      287 	lang_info.comment_start(39) = "!";
      288 	lang_info.comment_end(39) = "!";
      289 
      290 	lang_info.lang_type(40) = 1;
      291 	lang_info.lang_name(40) = "bind_fnp";		/* BIND_FNP */
      292 	lang_info.comment_start(40) = "/*";
      293 	lang_info.comment_end(40) = "*/";
      294 
      295 	lang_info.lang_type(41) = 1;			/* C Header */
      296 	lang_info.lang_name(41) = "h";
      297 	lang_info.comment_start(41) = "/*";
      298 	lang_info.comment_end(41) = "*/";
      299 
      300 /* Now set up call to create data base */
      301 
      302 	cdsa.sections (1).p = addr (lang_info);
      303 	cdsa.sections (1).len = size (lang_info);
      304 	cdsa.sections (1).struct_name = "lang_info";
      305 	cdsa.seg_name = name;
      306 	cdsa.num_exclude_names = 1;
      307 	cdsa.exclude_array_ptr = addr (exclude_pad);
      308 	string (cdsa.switches) = "0"b;
      309 	cdsa.switches.have_text = "1"b;
      310 	call create_data_segment_ (addr (cdsa), code);
      311 
      312 	/* BEGIN INCLUDE FILE cds_args.incl.pl1 */
  2     2 
  2     3 dcl 1 cds_args based aligned,
  2     4     2 sections (2),
  2     5       3 p ptr,					/* pointer to data for text/static section */
  2     6       3 len fixed bin (18),				/* size of text/static section */
  2     7       3 struct_name char (32),			/* name of declared structure for this section */
  2     8     2 seg_name char (32),				/* name to create segment by */
  2     9     2 num_exclude_names fixed bin,			/* number of names in exclude array */
  2    10     2 exclude_array_ptr ptr,				/* pointer to array of exclude names */
  2    11     2 switches,					/* control switches */
  2    12       3 defs_in_link bit (1) unal,			/* says put defs in linkage */
  2    13       3 separate_static bit (1) unal,			/* says separate static section is wanted */
  2    14       3 have_text bit (1) unal,			/* ON if text section given */
  2    15       3 have_static bit (1) unal,			/* ON if static section given */
  2    16       3 pad bit (32) unal;
  2    17 
  2    18 dcl  exclude_names (1) char (32) based;			/* pointed to be cds_args.exclude_array_ptr */
  2    19 
  2    20 /* END INCLUDE FILE cds_args.incl.pl1 */
      312 
      313 	end pnotice_language_info_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    04/26/87  1556.0  !BBBJWWQlcDpQjW.pl1               >spec>install>1026>pnotice_language_info_.cds
85           1    02/13/86  1340.2  pnotice_language_info_.incl.pl1   >ldd>include>pnotice_language_info_.incl.pl1
312          2    04/01/76  2209.5  cds_args.incl.pl1                 >ldd>include>cds_args.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
N                                      based           fixed bin(17,0)          level 3 in structure "pnotice_language_info"
                                                                                  dcl 1-43 in procedure "pnotice_language_info_" ref
                                                                                  1-43 1-43 1-43 1-43 1-43
N                               000146 automatic       fixed bin(17,0)          level 3 in structure "lang_info" dcl 87 in procedure
                                                                                  "pnotice_language_info_" set ref 93*
NL                              000010 constant        char(1)                  initial dcl 73 ref 103 108 113 118 123 163 168 173
                                                                                  178 183 228 233 238 248 258
addr                                                   builtin function         dcl 80 ref 302 307 310 310 1-43 1-43 1-43 1-43 1-43
                                                                                  1-43 1-43 1-43
cds_args                               based           structure                level 1 dcl 2-3
cdsa                            000100 automatic       structure                level 1 dcl 69 set ref 310 310
code                            000145 automatic       fixed bin(35,0)          dcl 71 set ref 310*
comment_end              10     000146 automatic       varying char(8)          array level 4 dcl 87 set ref 98* 103* 108* 113* 118*
                                                                                  123* 128* 133* 138* 143* 148* 153* 158* 163* 168*
                                                                                  173* 178* 183* 188* 193* 198* 203* 208* 213* 218*
                                                                                  223* 228* 233* 238* 243* 248* 253* 258* 263* 268*
                                                                                  273* 278* 283* 288* 293* 298*
comment_start             5     000146 automatic       varying char(8)          array level 4 dcl 87 set ref 97* 102* 107* 112* 117*
                                                                                  122* 127* 132* 137* 142* 147* 152* 157* 162* 167*
                                                                                  172* 177* 182* 187* 192* 197* 202* 207* 212* 217*
                                                                                  222* 227* 232* 237* 242* 247* 252* 257* 262* 267*
                                                                                  272* 277* 282* 287* 292* 297*
create_data_segment_            000012 constant        entry                    external dcl 67 ref 310
dim                                                    builtin function         dcl 80 ref 93
exclude_array_ptr        42     000100 automatic       pointer                  level 2 dcl 69 set ref 307*
exclude_pad                     000000 constant        char(32)                 initial array dcl 73 set ref 307
have_text                44(02) 000100 automatic       bit(1)                   level 3 packed unaligned dcl 69 set ref 309*
lang_array                1     000146 automatic       structure                array level 3 in structure "lang_info" dcl 87
                                                                                  in procedure "pnotice_language_info_" set ref 93
lang_array                1            based           structure                array level 3 in structure "pnotice_language_info"
                                                                                  dcl 1-43 in procedure "pnotice_language_info_"
lang_info                       000146 automatic       structure                level 1 dcl 87 set ref 302 303
lang_name                 2     000146 automatic       varying char(8)          array level 4 dcl 87 set ref 96* 101* 106* 111* 116*
                                                                                  121* 126* 131* 136* 141* 146* 151* 156* 161* 166*
                                                                                  171* 176* 181* 186* 191* 196* 201* 206* 211* 216*
                                                                                  221* 226* 231* 236* 241* 246* 251* 256* 261* 266*
                                                                                  271* 276* 281* 286* 291* 296*
lang_type                 1     000146 automatic       fixed bin(17,0)          array level 4 dcl 87 set ref 95* 100* 105* 110* 115*
                                                                                  120* 125* 130* 135* 140* 145* 150* 155* 160* 165*
                                                                                  170* 175* 180* 185* 190* 195* 200* 205* 210* 215*
                                                                                  220* 225* 230* 235* 240* 245* 250* 255* 260* 265*
                                                                                  270* 275* 280* 285* 290* 295*
languages                       000146 automatic       structure                level 2 in structure "lang_info" dcl 87 in procedure
                                                                                  "pnotice_language_info_"
languages                              based           structure                level 2 in structure "pnotice_language_info"
                                                                                  dcl 1-43 in procedure "pnotice_language_info_"
len                       2     000100 automatic       fixed bin(18,0)          array level 3 dcl 69 set ref 303*
name                            000011 constant        char(22)                 initial dcl 73 ref 305
num_exclude_names        40     000100 automatic       fixed bin(17,0)          level 2 dcl 69 set ref 306*
p                               000100 automatic       pointer                  array level 3 dcl 69 set ref 302*
pnotice_language_info                  based           structure                level 1 dcl 1-43
pnotice_language_info_$languages
                                000014 external static fixed bin(17,0)          dcl 1-41 set ref 1-43 1-43 1-43 1-43 1-43 1-43 1-43
                                                                                  1-43
sections                        000100 automatic       structure                array level 2 dcl 69
seg_name                 30     000100 automatic       char(32)                 level 2 dcl 69 set ref 305*
size                                                   builtin function         dcl 80 ref 303
string                                                 builtin function         dcl 80 set ref 308*
struct_name               3     000100 automatic       char(32)                 array level 3 dcl 69 set ref 304*
switches                 44     000100 automatic       structure                level 2 dcl 69 set ref 308*

NAME DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
exclude_names                          based           char(32)                 array unaligned dcl 2-18

NAME DECLARED BY EXPLICIT CONTEXT.
pnotice_language_info_          000110 constant        entry                    external dcl 55

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1266        1304    1210        1276
Length      3320    1210        16        1777      55           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
pnotice_language_info_              522 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
pnotice_language_info_   000100 cdsa                        pnotice_language_info_
                         000145 code                        pnotice_language_info_
                         000146 lang_info                   pnotice_language_info_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
create_data_segment_

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
pnotice_language_info_$languages




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     55 000107        93 000115        95 000117        96 000121        97 000125        98 000131       100 000135
    101 000136       102 000142       103 000146       105 000151       106 000153       107 000160       108 000164
    110 000167       111 000171       112 000176       113 000202       115 000205       116 000207       117 000213
    118 000217       120 000223       121 000225       122 000232       123 000236       125 000242       126 000243
    127 000247       128 000253       130 000256       131 000260       132 000264       133 000267       135 000272
    136 000274       137 000300       138 000304       140 000307       141 000311       142 000315       143 000320
    145 000323       146 000325       147 000332       148 000336       150 000341       151 000343       152 000350
    153 000354       155 000357       156 000361       157 000365       158 000371       160 000374       161 000375
    162 000401       163 000405       165 000411       166 000413       167 000420       168 000424       170 000427
    171 000431       172 000435       173 000441       175 000444       176 000446       177 000453       178 000457
    180 000463       181 000465       182 000472       183 000476       185 000501       186 000503       187 000506
    188 000512       190 000516       191 000520       192 000524       193 000527       195 000532       196 000534
    197 000541       198 000545       200 000550       201 000552       202 000556       203 000562       205 000565
    206 000567       207 000574       208 000600       210 000603       211 000604       212 000610       213 000614
    215 000620       216 000622       217 000627       218 000633       220 000636       221 000640       222 000645
    223 000651       225 000654       226 000655       227 000661       228 000665       230 000670       231 000672
    232 000676       233 000702       235 000705       236 000707       237 000714       238 000720       240 000723
    241 000725       242 000731       243 000735       245 000741       246 000742       247 000746       248 000752
    250 000755       251 000756       252 000761       253 000765       255 000770       256 000771       257 000775
    258 001000       260 001004       261 001006       262 001012       263 001016       265 001022       266 001024
    267 001030       268 001034       270 001040       271 001042       272 001045       273 001051       275 001055
    276 001057       277 001062       278 001066       280 001072       281 001073       282 001077       283 001103
    285 001107       286 001111       287 001115       288 001121       290 001123       291 001124       292 001131
    293 001135       295 001140       296 001142       297 001145       298 001151       302 001154       303 001156
    304 001160       305 001163       306 001166       307 001170       308 001172       309 001173       310 001175
    313 001207


Object Segment >spec>install>1026>pnotice_language_info_
Created on 04/26/87  1556.1 mst Sun
by GJohnson.SysMaint.a
using create_data_segment_, Version II of Thursday, November 20, 1986

        Object    Text    Defs    Link    Symb  Static
Start        0       0     634     666     676     676
Length    1113     634      32      10     201       0


3 Definitions:


segname:    pnotice_language_info_

text|0          languages
symb|0          symbol_table


No Links.





                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
