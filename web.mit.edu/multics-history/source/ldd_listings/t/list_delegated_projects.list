	COMPILATION LISTING OF SEGMENT list_delegated_projects
	Compiled by: Multics PL/I Compiler, Release 30, of February 16, 1988
	Compiled at: Honeywell Bull, Phoenix AZ, SysM
	Compiled on: 07/13/88  1010.8 mst Wed
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 list_delegated_projects: proc;
       12 
       13 dcl (sat_dir, sat_path) char (168) aligned,
       14      sel_proj char (32) aligned init (""),
       15      sat_name char (32) aligned,
       16      datestr char (16) aligned,
       17     (i, ii, iii, m, lng, sm, jj, slng, ec) fixed bin,
       18      an fixed bin init (2),
       19     (argp, satp, satep, pp) pointer,
       20      arg char (slng) based (argp),
       21      ct fixed bin init (0),
       22      ct1 fixed bin init (0);
       23 
       24 dcl  expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin),
       25      cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin),
       26      com_err_ entry options (variable),
       27      idsort_ entry ((*) char (32) aligned, (*) fixed bin, fixed bin);
       28 dcl  ioa_ entry options (variable),
       29      ioa_$rsnnl entry options (variable),
       30      hcs_$initiate entry (char (*) aligned, char (*) aligned, char (*) aligned,
       31      fixed bin (1), fixed bin (2), ptr, fixed bin),
       32      hcs_$terminate_noname entry (ptr, fixed bin),
       33      clock_ entry () returns (fixed bin (71)),
       34      date_time_ entry (fixed bin (71), char (*) aligned);
       35 dcl (addr, null, fixed, substr) builtin;
       36 
       37 /* ================================================ */
       38 
  1     1 /* BEGIN INCLUDE FILE ... user_attributes.incl.pl1  TAC 10/79 */
  1     2 
  1     3 
  1     4 /****^  HISTORY COMMENTS:
  1     5*  1) change(86-12-11,Brunelle), approve(87-07-13,MCR7741),
  1     6*     audit(87-04-19,GDixon), install(87-08-04,MR12.1-1056):
  1     7*     Add incl for abs_attributes.incl.pl1 to automatically include absentee
  1     8*     attribute switches.
  1     9*  2) change(87-04-19,GDixon), approve(87-07-13,MCR7741),
  1    10*     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1056):
  1    11*      A) Add USER_ATTRIBUTE_NAMES arrays.  attribute_names.incl.pl1 can thereby
  1    12*         be deleted.
  1    13*      B) Add constants identifying attributes that can be changed by user at
  1    14*         login, etc.
  1    15*                                                   END HISTORY COMMENTS */
  1    16 
  1    17 
  1    18 /* Modified 82-01-03  E. N. Kittlitz.  to declare a complete level-1 structure */
  1    19 
  1    20 /* format: style4 */
  1    21 dcl  1 user_attributes aligned based,			/* the user user_attributes */
  1    22        (2 administrator bit (1),			/* 1  system administrator privileges */
  1    23        2 primary_line bit (1),			/* 2  user has primary-line privileges  */
  1    24        2 nobump bit (1),				/* 2  user cannot be bumped */
  1    25        2 guaranteed_login bit (1),			/* 4  user has guaranteed login privileges */
  1    26        2 anonymous bit (1),				/* 5  used only in SAT. project may have anon.users */
  1    27        2 nopreempt bit (1),				/* 6  used only in PDT. user not preemptable by others
  1    28*						   .  of same project (distinct from "nobump") */
  1    29        2 nolist bit (1),				/* 7  don't list user on "who" */
  1    30        2 dialok bit (1),				/* 8  user may have multiple consoles */
  1    31        2 multip bit (1),				/* 9  user may have several processes */
  1    32        2 bumping bit (1),				/* 10 in SAT. Can users in project bump each other? */
  1    33        2 brief bit (1),				/* 11 no login or logout message */
  1    34        2 vinitproc bit (1),				/* 12 user may change initial procedure */
  1    35        2 vhomedir bit (1),				/* 13 user may change homedir */
  1    36        2 nostartup bit (1),				/* 14 user does not want start_up.ec */
  1    37        2 sb_ok bit (1),				/* 15 user may be standby */
  1    38        2 pm_ok bit (1),				/* 16 user may be primary */
  1    39        2 eo_ok bit (1),				/* 17 user may be edit_only */
  1    40        2 daemon bit (1),				/* 18 user may login as daemon */
  1    41        2 vdim bit (1),				/* 19 * OBSOLETE * user may change outer mdle */
  1    42        2 no_warning bit (1),				/* 20 no warning message */
  1    43        2 igroup bit (1),				/* 21 in SAT: this project may give its users individual groups
  1    44*						   .  in PDT: this user has an individual load control group */
  1    45        2 save_pdir bit (1),				/* 22 save pdir after fatal process error */
  1    46        2 disconnect_ok bit (1),			/* 23 ok to save user's disconnected processes */
  1    47        2 save_on_disconnect bit (1),			/* 24 save them unless -nosave login arg is given */
  1    48        2 pad bit (12)) unaligned;
  1    49 
  1    50 dcl  USER_ATTRIBUTE_NAMES (0:24) char (20) int static options (constant) init
  1    51     ("none",					/* 0 */
  1    52      "administrator",				/* 1 */
  1    53      "primary_line",				/* 2 */
  1    54      "nobump",					/* 3 */
  1    55      "guaranteed_login",				/* 4 */
  1    56      "anonymous",					/* 5 */
  1    57      "nopreempt",					/* 6 */
  1    58      "nolist",					/* 7 */
  1    59      "dialok",					/* 8 */
  1    60      "multip",					/* 9 */
  1    61      "bumping",					/* 10 */
  1    62      "brief",					/* 11 */
  1    63      "vinitproc",					/* 12 */
  1    64      "vhomedir",					/* 13 */
  1    65      "nostartup",					/* 14 */
  1    66      "no_secondary",				/* 15 */
  1    67      "no_prime",					/* 16 */
  1    68      "no_eo",					/* 17 */
  1    69      "daemon",					/* 18 */
  1    70      "",						/* 19 vdim OBSOLETE */
  1    71      "no_warning",					/* 20 */
  1    72      "igroup",					/* 21 */
  1    73      "save_pdir",					/* 22 */
  1    74      "disconnect_ok",				/* 23 */
  1    75      "save_on_disconnect");				/* 24 */
  1    76 
  1    77 dcl  ALT_USER_ATTRIBUTE_NAMES (0:24) char (20) int static options (constant) init
  1    78     ("null",					/* 0 */
  1    79      "admin",					/* 1 */
  1    80      "", "",					/* 2 - 3 */
  1    81      "guar",					/* 4 */
  1    82      "anon",					/* 5 */
  1    83      "", "",					/* 6 - 7 */
  1    84      "dial",					/* 8 */
  1    85      "multi_login",					/* 9 */
  1    86      "preempting",					/* 10 */
  1    87      "",						/* 11 */
  1    88      "v_process_overseer",				/* 12 */
  1    89      "v_home_dir",					/* 13 */
  1    90      "no_start_up",					/* 14 */
  1    91      "no_sec",					/* 15 */
  1    92      "no_primary",					/* 16 */
  1    93      "no_edit_only",				/* 17 */
  1    94      "op_login",					/* 18 */
  1    95      "",						/* 19 */
  1    96      "nowarn",					/* 20 */
  1    97      "", "", "",					/* 21 - 23 */
  1    98      "save");					/* 24 */
  1    99 
  1   100 dcl  USER_ATTRIBUTES_always_allowed bit (36) aligned int static
  1   101      options(constant) init("000000000010000000010000000000000000"b);
  1   102     /* SAT/PDT attributes not needed for user to give (brief, no_warning) */
  1   103 
  1   104 dcl  USER_ATTRIBUTES_default_in_pdt bit (36) aligned int static
  1   105      options(constant) init("000000000010000000010000000000000000"b);
  1   106     /* PDT value for (brief, no_warning) is default */
  1   107 
  1   108 dcl  USER_ATTRIBUTES_settable_by_user bit (36) aligned int static
  1   109      options(constant) init("000100000110010000010000000000000000"b);	
  1   110     /* user MIGHT set (bump, ns, brief, guar, no_warning) */
  1   111 
  2     1 /* BEGIN INCLUDE FILE ... user_abs_attributes.incl.pl1 */
  2     2 
  2     3 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  2     4 /*							       */
  2     5 /* This include file describes the attributes of an absentee job.  It is     */
  2     6 /* used by user_table_entry.incl.pl1, abs_message_format.incl.pl1            */
  2     7 /* and PIT.incl.pl1.   */
  2     8 /*							       */
  2     9 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  2    10 
  2    11 /****^  HISTORY COMMENTS:
  2    12*  1) change(86-12-08,GDixon), approve(87-07-13,MCR7741),
  2    13*     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1056):
  2    14*     Separated abs_attributes from the request structure
  2    15*     (abs_message_format.incl.pl1) so that the identical structure could be
  2    16*     used in the ute structure (user_table_entry.incl.pl1).
  2    17*  2) change(87-04-19,GDixon), approve(87-07-13,MCR7741),
  2    18*     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1056):
  2    19*     Added ABS_ATTRIBUTE_NAMES array.
  2    20*  3) change(87-11-11,Parisek), approve(88-02-11,MCR7849),
  2    21*     audit(88-03-22,Lippard), install(88-07-13,MR12.2-1047):
  2    22*     Added the no_start_up flag. SCP6367
  2    23*                                                   END HISTORY COMMENTS */
  2    24 
  2    25 dcl 1 user_abs_attributes		aligned based,
  2    26       2 restartable			bit (1) unaligned,	/* 1 if request may be started over from the beginning */
  2    27       2 user_deferred_until_time	bit (1) unaligned,	/* 1 if request was specified as deferred */
  2    28       2 proxy			bit (1) unaligned,	/* 1 if request submitted for someone else */
  2    29       2 set_bit_cnt			bit (1) unaligned,	/* 1 if should set bit count after every write call */
  2    30       2 time_in_gmt			bit (1) unaligned,	/* 1 if deferred_time is in GMT */
  2    31       2 user_deferred_indefinitely	bit (1) unaligned,	/* 1 if operator is to say when to run it */
  2    32       2 secondary_ok		bit (1) unaligned,	/* 1 if ok to log in as secondary foreground user */
  2    33       2 truncate_absout		bit (1) unaligned,	/* 1 if .absout is to be truncated */
  2    34       2 restarted			bit (1) unaligned,	/* 1 if job is restarted */
  2    35       2 no_start_up                     bit (1) unaligned,	/* 1 if requested -ns */
  2    36       2 attributes_pad		bit (26) unaligned;
  2    37 
  2    38 dcl  ABS_ATTRIBUTE_NAMES (10) char (28) varying int static options(constant) init(
  2    39 	"restartable",
  2    40 	"user_deferred_until_time",
  2    41 	"proxy",
  2    42 	"set_bit_cnt",
  2    43 	"time_in_gmt",
  2    44 	"user_deferred_indefinitely",
  2    45 	"secondary_ok",
  2    46 	"truncate_absout",
  2    47 	"restarted",
  2    48 	"no_start_up");
  2    49 
  2    50 /* END INCLUDE FILE ... user_abs_attributes.incl.pl1 */
  2    51 
  1   112 
  1   113 
  1   114 /* END INCLUDE FILE ... user_attributes.incl.pl1 */
       39 
  3     1 /* BEGIN INCLUDE FILE ... sat.incl.pl1 */
  3     2 
  3     3 
  3     4 
  3     5 
  3     6 /****^  HISTORY COMMENTS:
  3     7*  1) change(86-09-05,Parisek), approve(87-06-17,MCR7570),
  3     8*     audit(87-06-15,Hirneisen), install(87-08-06,MR12.1-1066):
  3     9*     Expand comment line of project.state to include the renamed state (state =
  3    10*     3).
  3    11*                                                   END HISTORY COMMENTS */
  3    12 
  3    13 
  3    14 
  3    15 /* Modified 740723 by PG to add AIM info */
  3    16 /* Modified 750604 by T. Casey to add priority scheduler parameters */
  3    17 /* Modified May 1976 by T. Casey to add project cutoff limits */
  3    18 /* Modified May 1978 by T. Casey to add pdir_quota */
  3    19 /* Modified November 1978 by T. Casey to add max_(fore back)ground and abs_foreground_cpu_limit */
  3    20 /* Modified July 1979 by J. N. R. Barnecut  to support multiple rate structures. (UNCA) */
  3    21 /* Modified January 1982 by E. N. Kittlitz for user_attributes.incl.pl1 changes */
  3    22 /* Modified 1984-07-05 BIM range of authorizations, version 3 */
  3    23 
  3    24 dcl (SAT_version init (3),				/* version 2 of this declaration */
  3    25 
  3    26      SAT_header_lth init (466),			/* length in words of SAT header */
  3    27      SAT_entry_lth init (80), 			/* length in words of SAT entry */
  3    28 
  3    29      SAT_project_name_length init (9)			/* proper length of project.project_id */
  3    30      ) fixed bin internal static options (constant);
  3    31 
  3    32 dcl 1 sat based (satp) aligned,
  3    33 
  4     1 /* BEGIN INCLUDE FILE author.incl.pl1 */
  4     2 
  4     3 /* the "author" items must always be the first ones in the table. The
  4     4*   module which moves the converted table to the System Control process
  4     5*   fills in these data items and assumes them to be at the head of the segment
  4     6*   regardless of the specific table's actual declaration. The variables
  4     7*   "lock" and "last_install_time" used to be "process_id" and "ev_channel"
  4     8*    respectively. For tables installed in multiple processes, these
  4     9*    are to be used to lock out multiple installations. */
  4    10 
  4    11 /*  Lock should be used as a modification lock. Since, in general,
  4    12*    entries may not be moved in system tables, even by installations,
  4    13*    it is sufficient for only installers and programs that change threads
  4    14*    to set or respect the lock. Simply updating data in an entry
  4    15*    requires no such protection.
  4    16*
  4    17*    Last_install_time is used by readers of system tables to detect
  4    18*    installations or other serious modifications. By checking it before
  4    19*    and after copying a block of data, they can be protected against
  4    20*    modifications.
  4    21*
  4    22*    Modules that set the lock should save proc_group_id, and then
  4    23*    put their group id there for the time they hold the lock.
  4    24*    if they do not actually install the, they should restore the group id.
  4    25**/
  4    26 
  4    27     2 author aligned,				/* validation data about table's author */
  4    28       3 proc_group_id char (32),			/* process-group-id  (personid.projectid.tag) */
  4    29       3 lock bit (36),				/* installation lock */
  4    30       3 update_attributes bit (1) unal,			/* update/add/delete attributes */
  4    31       3 update_authorization bit (1) unal,		/* update only authorizations */
  4    32       3 deferral_notified bit (1) unal,			/* installer notified of deferral of installation */
  4    33       3 pad bit (33) unaligned,
  4    34       3 last_install_time fixed bin (71),
  4    35       3 table char (4),				/* name of table, e.g., SAT MGT TTT RTDT PDT etc. */
  4    36       3 w_dir char (64),				/* author's working directory */
  4    37 
  4    38 /* END INCLUDE FILE author.incl.pl1 */
  3    34 
  3    35     2 max_size fixed bin,				/* max number of entries table can grow */
  3    36     2 current_size fixed bin,				/* current size of table  (in entries) */
  3    37     2 version fixed bin,				/* version number of table (word 32) */
  3    38     2 freep fixed bin,				/* free chain ptr. 0 if no free entries */
  3    39     2 n_projects fixed bin,				/* number of entries actually used */
  3    40     2 pad_was_max_users bit (36) aligned,
  3    41     2 max_units fixed bin,				/* maximum number of login-units per session */
  3    42     2 pad_was_max_prim bit (36) aligned,	
  3    43     2 uwt_size fixed bin,				/* size of User Weight Table */
  3    44     2 uwt (24) aligned,				/* User Weight Table */
  3    45       3 initproc char (64) unaligned,			/* user's initial procedure  */
  3    46       3 units fixed bin,				/* weight of initial procedure */
  3    47     2 system_admin (2) char (32) unal,			/* system administrator ID */
  3    48     2 pad1 (4) fixed bin,				/* padding to 466 wds */
  3    49     2 project (3258),				/* The SAT entries. 255K segment. */
  3    50       3 pad (80) fixed bin;				/* each entry is 80 words long  */
  3    51 
  3    52 
  3    53 dcl 1 project based (satep) aligned,			/* declaration of a single SAT entry  */
  3    54     2 state fixed bin,				/* state 1 = normal, 0 = free, 2 = deleted, 3 = renamed */
  3    55     2 project_id char (12) unaligned,			/* project's name */
  3    56     2 project_dir char (64) unaligned,			/* project's directory */
  3    57     2 pdt_ptr pointer,				/* pointer to current PDT */
  3    58     2 max_users fixed bin,				/* maximum number of users from project */
  3    59     2 n_users fixed bin,				/* current number */
  3    60     2 at like user_attributes aligned,			/* include user_attributes.incl.pl1 */
  3    61     2 admin (4) aligned,				/* list of project's administrators  */
  3    62       3 userid char (30) unal,			/* administrator's user-id (personid.projectid) */
  3    63       3 pad char (2) unal,
  3    64     2 cutoff char (1),				/* if project is cut off, why. */
  3    65     2 min_ring fixed bin,				/* lowest ring for project */
  3    66     2 max_ring fixed bin,				/* highest ring for project */
  3    67     2 alias char (8) unal,				/* project alias */
  3    68     2 group char (8) unal,				/* default group for this project */
  3    69     2 grace_max fixed bin,				/* maximum bump grace */
  3    70     2 audit bit (36),				/* audit flags for project */
  3    71     2 project_authorization (2) bit (72),		/* authorization of this project */
  3    72     2 groups (2) char (8) unal,			/* authorized groups for this project */
  3    73     2 days_to_cutoff fixed bin (17) unaligned,		/* these figures are as of last running of daily_summary */
  3    74     2 pct_balance fixed bin (17) unaligned,		/* they are used for warning message printing only */
  3    75     2 dollars_to_cutoff float bin,			/* and are not to be taken as up-to-date figures */
  3    76     2 pdir_quota fixed bin (17) unaligned,		/* max pdir quota allowed for project */
  3    77     2 max_foreground fixed bin (9) unsigned unaligned,	/* max simultaneous foreground and background */
  3    78     2 max_background fixed bin (9) unsigned unaligned,	/* processes that a user on this project can have */
  3    79     2 abs_foreground_cpu_limit fixed bin (17) unaligned,	/* time limit on foreground absentee jobs */
  3    80     2 rs_number fixed bin (9) unsigned unaligned,		/* rate structure number (0=default rates ) */
  3    81     2 satpad1 fixed bin (9) unsigned unaligned,
  3    82     2 satpad (1) bit (36) aligned,			/* pad to 80 words */
  3    83     2 chain fixed bin;				/* if free entry, chain */
  3    84 
  3    85 /* END INCLUDE FILE ... sat.incl.pl1 */
       40 
       41 /* ================================================ */
       42 
       43 /* INITIALIZATION - LOCATE AND INITIATE SAT */
       44 
       45 
       46 	call cu_$arg_ptr (1, argp, slng, ec);		/* 1st argument is path name of sat */
       47 	if ec ^= 0 then do;
       48 	     call com_err_ (ec, "list_delegated_projects", "");
       49 	     return;
       50 	end;
       51 
       52 	sat_path = arg;
       53 	if sat_path ^= "sat" then
       54 	     if substr (sat_path, slng-3, 4) ^= ">sat" then
       55 		if substr (sat_path, slng-3, 4) ^= ".sat" then do;
       56 	     slng = slng + 4;
       57 	     substr (sat_path, slng-3, 4) = ".sat";
       58 	end;
       59 
       60 	call expand_path_ (addr (sat_path), slng, addr (sat_dir), addr (sat_name), ec);
       61 	if ec ^= 0 then do;
       62 	     call com_err_ (ec, "list_delegated_projects", sat_path);
       63 	     return;
       64 	end;
       65 
       66 	call hcs_$initiate (sat_dir, sat_name, "", 0, 0, satp, ec);
       67 	if satp = null then do;
       68 	     call com_err_ (ec, "list_delegated_projects", sat_path);
       69 	     return;
       70 	end;
       71 	if sat.version ^= SAT_version then do;
       72 	     call com_err_ (0, "list_delegated_projects",
       73 	     "SAT version is inconsistent with declarations used by this program");
       74 	     go to exit;
       75 	end;
       76 
       77 arglp:	call cu_$arg_ptr (an, argp, slng, ec);		/* get next arg -- a project name */
       78 	if ec ^= 0 then go to endarg;			/* last arg? */
       79 	else do;
       80 	     sel_proj = arg;
       81 	end;
       82 
       83 next_arg: an = an + 1;
       84 	go to arglp;				/* loop on args */
       85 endarg:	if sel_proj ^= "" then go to quickie;
       86 	call date_time_ ((clock_ ()), datestr);
       87 	call ioa_ ("^/List of Delegated Projects as of ^a^/", datestr);
       88 
       89 	call ioa_ ("^/^10xP__r_o_j_e_c_t^4xA__d_m_i_n_i_s_t_r_a_t_o_r^/");
       90 
       91 quickie:	sm = sat.current_size;			/* Set up for sort. */
       92 	begin;
       93 
       94 dcl  x (sm) char (32) aligned,			/* project sorting array */
       95      y (sm) fixed bin;				/* grade array sorted with project id */
       96 
       97 	     do i = 1 to sat.current_size;
       98 		satep = addr (sat.project (i));
       99 		x (i) = project.project_id;
      100 		y (i) = i;
      101 	     end;
      102 	     if sel_proj = "" then call idsort_ (x, y, sm);
      103 
      104 	     do i = 1 to sat.current_size;		/* loop thru SAT looking for delegated projects */
      105 		satep = addr (sat.project (y (i)));	/* get ptr to slide down sat entries */
      106 		if project.state = 1 then do;
      107 		     if sel_proj ^= "" then if sel_proj ^= project.project_id then go to endsatloop;
      108 		     ct = ct + 1;			/* counter to report undelegated projects */
      109 		     if project.admin (1).userid = "" then go to endsatloop;
      110 		     ct1 = ct1 + 1;
      111 		     call ioa_ ("^/^10x^9a  ^a", project.project_id, project.admin (1).userid);
      112 		     do jj = 2 to 4;		/* up to 4 project administrators */
      113 			if project.admin (jj).userid ^= "" then
      114 			     call ioa_ ("^21x^a", project.admin (jj).userid);
      115 		     end;
      116 		end;
      117 endsatloop:    end;
      118 	end;
      119 
      120 	if sel_proj ^= "" then if ct = 0 then do;
      121 	     call ioa_ (" Project ^a not found in SAT", sel_proj);
      122 	end;
      123 	else if ct1 = 0 then do;
      124 	     call ioa_ ("^a is not currently a delegated project", sel_proj);
      125 	end;
      126 
      127 	call ioa_ ("");
      128 exit:	call hcs_$terminate_noname (satp, ec);
      129 	return;
      130 
      131      end list_delegated_projects;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    07/13/88  0942.4  list_delegated_projects.pl1       >special_ldd>install>MR12.2-1047>list_delegated_projects.pl1
39           1    08/06/87  0913.6  user_attributes.incl.pl1          >ldd>include>user_attributes.incl.pl1
1-112        2    07/13/88  0900.1  user_abs_attributes.incl.pl1      >special_ldd>install>MR12.2-1047>user_abs_attributes.incl.pl1
40           3    08/06/87  1416.6  sat.incl.pl1                      >ldd>include>sat.incl.pl1
3-34         4    04/21/82  1211.8  author.incl.pl1                   >ldd>include>author.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
SAT_version                            constant        fixed bin(17,0)          initial dcl 3-24 ref 71
addr                                                   builtin function         dcl 35 ref 60 60 60 60 60 60 98 105
admin                    31            based           structure                array level 2 dcl 3-53
an                              000255 automatic       fixed bin(17,0)          initial dcl 13 set ref 13* 77* 83* 83
arg                                    based           char                     packed unaligned dcl 13 ref 52 80
argp                            000256 automatic       pointer                  dcl 13 set ref 46* 52 77* 80
clock_                          000026 constant        entry                    external dcl 28 ref 86
com_err_                        000014 constant        entry                    external dcl 24 ref 48 62 68 72
ct                              000264 automatic       fixed bin(17,0)          initial dcl 13 set ref 13* 108* 108 120
ct1                             000265 automatic       fixed bin(17,0)          initial dcl 13 set ref 13* 110* 110 123
cu_$arg_ptr                     000012 constant        entry                    external dcl 24 ref 46 77
current_size             36            based           fixed bin(17,0)          level 2 dcl 3-32 ref 91 97 104
date_time_                      000030 constant        entry                    external dcl 28 ref 86
datestr                         000244 automatic       char(16)                 dcl 13 set ref 86* 87*
ec                              000254 automatic       fixed bin(17,0)          dcl 13 set ref 46* 47 48* 60* 61 62* 66* 68* 77* 78
                                                                                  128*
expand_path_                    000010 constant        entry                    external dcl 24 ref 60
hcs_$initiate                   000022 constant        entry                    external dcl 28 ref 66
hcs_$terminate_noname           000024 constant        entry                    external dcl 28 ref 128
i                               000250 automatic       fixed bin(17,0)          dcl 13 set ref 97* 98 99 100 100* 104* 105*
idsort_                         000016 constant        entry                    external dcl 24 ref 102
ioa_                            000020 constant        entry                    external dcl 28 ref 87 89 111 113 121 124 127
jj                              000252 automatic       fixed bin(17,0)          dcl 13 set ref 112* 113 113*
null                                                   builtin function         dcl 35 ref 67
project                                based           structure                level 1 dcl 3-53 in procedure
                                                                                  "list_delegated_projects"
project                 722            based           structure                array level 2 in structure "sat" dcl 3-32
                                                                                  in procedure "list_delegated_projects" set ref 98
                                                                                  105
project_id                1            based           char(12)                 level 2 packed packed unaligned dcl 3-53 set ref 99
                                                                                  107 111*
sat                                    based           structure                level 1 dcl 3-32
sat_dir                         000100 automatic       char(168)                dcl 13 set ref 60 60 66*
sat_name                        000234 automatic       char(32)                 dcl 13 set ref 60 60 66*
sat_path                        000152 automatic       char(168)                dcl 13 set ref 52* 53 53 53 57* 60 60 62* 68*
satep                           000262 automatic       pointer                  dcl 13 set ref 98* 99 105* 106 107 109 111 111 113
                                                                                  113
satp                            000260 automatic       pointer                  dcl 13 set ref 66* 67 71 91 97 98 104 105 128*
sel_proj                        000224 automatic       char(32)                 initial dcl 13 set ref 13* 80* 85 102 107 107 120
                                                                                  121* 124*
slng                            000253 automatic       fixed bin(17,0)          dcl 13 set ref 46* 52 53 53 56* 56 57 60* 77* 80
sm                              000251 automatic       fixed bin(17,0)          dcl 13 set ref 91* 94 94 102*
state                                  based           fixed bin(17,0)          level 2 dcl 3-53 ref 106
substr                                                 builtin function         dcl 35 set ref 53 53 57*
user_attributes                        based           structure                level 1 dcl 1-21
userid                   31            based           char(30)                 array level 3 packed packed unaligned dcl 3-53 set
                                                                                  ref 109 111* 113 113*
version                  37            based           fixed bin(17,0)          level 2 dcl 3-32 ref 71
x                               000100 automatic       char(32)                 array dcl 94 set ref 99* 102*
y                               000100 automatic       fixed bin(17,0)          array dcl 94 set ref 100* 102* 105

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
ABS_ATTRIBUTE_NAMES                    internal static varying char(28)         initial array dcl 2-38
ALT_USER_ATTRIBUTE_NAMES               internal static char(20)                 initial array packed unaligned dcl 1-77
SAT_entry_lth                          internal static fixed bin(17,0)          initial dcl 3-24
SAT_header_lth                         internal static fixed bin(17,0)          initial dcl 3-24
SAT_project_name_length                internal static fixed bin(17,0)          initial dcl 3-24
USER_ATTRIBUTES_always_allowed         internal static bit(36)                  initial dcl 1-100
USER_ATTRIBUTES_default_in_pdt         internal static bit(36)                  initial dcl 1-104
USER_ATTRIBUTES_settable_by_user       internal static bit(36)                  initial dcl 1-108
USER_ATTRIBUTE_NAMES                   internal static char(20)                 initial array packed unaligned dcl 1-50
fixed                                                  builtin function         dcl 35
ii                                     automatic       fixed bin(17,0)          dcl 13
iii                                    automatic       fixed bin(17,0)          dcl 13
ioa_$rsnnl                      000000 constant        entry                    external dcl 28
lng                                    automatic       fixed bin(17,0)          dcl 13
m                                      automatic       fixed bin(17,0)          dcl 13
pp                                     automatic       pointer                  dcl 13
user_abs_attributes                    based           structure                level 1 dcl 2-25

NAMES DECLARED BY EXPLICIT CONTEXT.
arglp                           000476 constant        label                    dcl 77 ref 84
endarg                          000524 constant        label                    dcl 85 ref 78
endsatloop                      001062 constant        label                    dcl 117 ref 107 109
exit                            001147 constant        label                    dcl 128 ref 74
list_delegated_projects         000145 constant        entry                    external dcl 11
next_arg                        000522 constant        label                    dcl 83
quickie                         000610 constant        label                    dcl 91 ref 85

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1300        1332    1161        1310
Length      1616    1161        32         250     117           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
list_delegated_projects             246 external procedure  is an external procedure.  
begin block on line 92              114 begin block         uses auto adjustable storage.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
begin block on line 92   000100 y                           begin block on line 92
                         000100 x                           begin block on line 92
list_delegated_projects  000100 sat_dir                     list_delegated_projects
                         000152 sat_path                    list_delegated_projects
                         000224 sel_proj                    list_delegated_projects
                         000234 sat_name                    list_delegated_projects
                         000244 datestr                     list_delegated_projects
                         000250 i                           list_delegated_projects
                         000251 sm                          list_delegated_projects
                         000252 jj                          list_delegated_projects
                         000253 slng                        list_delegated_projects
                         000254 ec                          list_delegated_projects
                         000255 an                          list_delegated_projects
                         000256 argp                        list_delegated_projects
                         000260 satp                        list_delegated_projects
                         000262 satep                       list_delegated_projects
                         000264 ct                          list_delegated_projects
                         000265 ct1                         list_delegated_projects

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
enter_begin_block   leave_begin_block   call_ext_out_desc   call_ext_out        return_mac          alloc_auto_adj
ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
clock_                        com_err_                      cu_$arg_ptr                   date_time_
expand_path_                  hcs_$initiate                 hcs_$terminate_noname         idsort_
ioa_

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000144        13 000152        46 000161        47 000177        48 000201        49 000230        52 000231
     53 000236        56 000252        57 000254        60 000260        61 000305        62 000307        63 000336
     66 000337        67 000402        68 000406        69 000435        71 000436        72 000442        74 000475
     77 000476        78 000513        80 000515        83 000522        84 000523        85 000524        86 000530
     87 000554        89 000574        91 000610        92 000613        94 000616       102 000631        97 000651
     98 000662        99 000666       100 000675       101 000700       102 000702       104 000727       105 000742
    106 000750       107 000753       108 000763       109 000764       110 000770       111 000771       112 001016
    113 001026       115 001057       117 001062       118 001064       120 001065       121 001073       122 001113
    123 001114       124 001116       127 001136       128 001147       129 001160


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
