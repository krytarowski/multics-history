ASSEMBLY LISTING OF SEGMENT >special_ldd>install>MR12.1-1054>network_accounting_gate_.alm                                                                                                           
ASSEMBLED ON:	08/04/87  1615.1 mst Tue
OPTIONS USED:	-target l68                              list symbols 
ASSEMBLED BY:	ALM Version 7.3 November 1986   
ASSEMBLER CREATED:	11/26/86  1244.2 mst Wed

                                     1  " ********************************************
                                     2  " *                                          *
                                     3  " * Copyright, (C) Honeywell Bull Inc., 1987 *
                                     4  " *                                          *
                                     5  " ********************************************
                                     6  
                                     7  " network_accounting_gate_:  interface to network_accounting_ in ring 2
                                     8  
                                     9  "   This is an administrative gate into ring 2 network accounting.  Access
                                    10  "   to the gate should be limited to the Initializer (and other SysDaemons),
                                    11  "   and system administrators and maintainers.
                                    12  
                                    13  " HISTORY COMMENTS:
                                    14  "  1) change(85-11-25,Herbst), approve(87-07-28,MCR7694),
                                    15  "     audit(87-07-28,Brunelle), install(87-08-04,MR12.1-1055):
                                    16  "     New program.
                                    17  "  2) change(86-02-10,Herbst), approve(87-07-28,MCR7694),
                                    18  "     audit(87-07-28,Brunelle), install(87-08-04,MR12.1-1055):
                                    19  "     Replaced $get_total with $get_user_total
                                    20  "  3) change(86-02-10,Herbst), approve(87-07-28,MCR7694),
                                    21  "     audit(87-07-28,Brunelle), install(87-08-04,MR12.1-1055):
                                    22  "     Added $dump_table.
                                    23  "  4) change(86-02-11,Herbst), approve(87-07-28,MCR7694),
                                    24  "     audit(87-07-28,Brunelle), install(87-08-04,MR12.1-1055):
                                    25  "     Added $read_and_reset_table.
                                    26  "  5) change(86-02-20,Herbst), approve(87-07-28,MCR7694),
                                    27  "     audit(87-07-28,Brunelle), install(87-08-04,MR12.1-1055):
                                    28  "     Renamed $set_path to $test.
                                    29  "  6) change(86-02-24,Herbst), approve(87-07-28,MCR7694),
                                    30  "     audit(87-07-28,Brunelle), install(87-08-04,MR12.1-1055):
                                    31  "     Added argument (process_id) to $charge entries.
                                    32  "  7) change(86-02-24,Herbst), approve(87-07-28,MCR7694),
                                    33  "     audit(87-07-28,Brunelle), install(87-08-04,MR12.1-1055):
                                    34  "     Replaced get_user_total with get_process_total.
                                    35  "  8) change(86-05-05,Herbst), approve(87-07-28,MCR7694),
                                    36  "     audit(87-07-28,Brunelle), install(87-08-04,MR12.1-1055):
                                    37  "     Added $clear_table and $close_process_entries.
                                    38  "  9) change(86-05-20,Herbst), approve(87-07-28,MCR7694),
                                    39  "     audit(87-07-28,Brunelle), install(87-08-04,MR12.1-1055):
                                    40  "     Added $disable_on and $disable_off.
                                    41  " 10) change(87-03-24,Brunelle), approve(87-07-28,MCR7694),
                                    42  "     audit(87-07-28,GDixon), install(87-08-04,MR12.1-1055):
                                    43  "     Remove the charge_bytes, charge_packets and close_process_entries
                                    44  "     entrypoints.  Added the charge_channel_use entrypoint.  Changed the
                                    45  "     number of arguments for get_process_total from 7 to 4.
                                    46  " 11) change(87-07-28,Brunelle), approve(87-07-28,MCR7694),
                                    47  "     audit(87-07-28,GDixon), install(87-08-04,MR12.1-1055):
                                    48  "     Replace disable_off/on entrypoints with debug entrypoint.
                                    49  "                                                      END HISTORY COMMENTS
                                    50  
                                    51  	include	gate_macros
                                   1-1  " BEGIN INCLUDE FILE ...... gate_macros.incl.alm
                                   1-2  "   Last modified 6/77 by N. Morris, B. Greenberg, & T. VanVleck
                                   1-3  "   Modified 741212 by PG to inhibit while computing virtual CPU time
                                   1-4  "   Modified 83-03-14 by E. N. Kittlitz to clear IR
                                   1-5  "   Modified 83-06-01 BIM for ring alarm polling
                                   1-6  "   Modified 85-04-03 by Keith Loepere to make polling a little smarter.
                                   1-7  
                                   1-8  " This file contains several macros used when generating gate segments.
                                   1-9  " The major macros that are defined are:
                                  1-10  "
                                  1-11  "	gate_info		general setup code for normal gates
                                  1-12  "	hardcore_gate_info	general setup code for hardcore gates
                                  1-13  "	bad_dir_handler	setup and handler for bad_dir_ condition (goes at bottom)
                                  1-14  "	bad_dir_handler_entry	entrypoint for above (goes at top)
                                  1-15  "	gate		to define a normal gate
                                  1-16  "	hgate		to define a hardcore gate
                                  1-17  "	fgate		to define a fast hardcore gate
                                  1-18  "
                                  1-19  
                                  1-20  
    000000                        1-21  	maclist	off
                                  1-22  
                                  1-23  
                                  1-24  " HGATE - define a hardcore gate entry
                                  1-25  "
                                  1-26  "	hgate	gatename,procedure,entry,args{,bad_dir_trap}
                                  1-27  "
                                  1-28  " The entrypoint gatename is defined in the gate segment.  If args
                                  1-29  " is nonzero, the number of arguments passed to gatename must be
                                  1-30  " equal to args.  When gatename is called, it will in turn call
                                  1-31  " procedure$entry.
                                  1-32  "
                                  1-33  
                                  1-34  macro	hgate
                              1   1-35  	gentry	&1,&4*2,&1.t
                              2   1-36  	tsx2	.setup
                              3   1-37  &=&5,bad_dir_trap&[	tsx0	.set_dir_trap
                              4   1-38  &]	ldi	=0,dl
                              5   1-39  	short_call &2$&3(ap|0)
                              6   1-40  	eppbp	lp|&1.t
                              7   1-41  	tra	.return_code
                              8   1-42  	maclist	restore
                              9   1-43  	use	linkage
                             10   1-44  	even
                             11   1-45  	maclist	on,save
                             12   1-46  &1.t:
                             13   1-47  	bss	,gate_entry_data_size
                             14   1-48  
                             15   1-49  	maclist	restore
                             16   1-50  &end
                                  1-51  
                                  1-52  
                                  1-53  " FGATE - define a fast hardcore gate
                                  1-54  "
                                  1-55  "	fgate	gatename,procedure,entry
                                  1-56  "
                                  1-57  
                                  1-58  macro	fgate
                              1   1-59  	gentry	&1,0,0
                              2   1-60  	ldi	=0,dl
                              3   1-61  	epplp	.my_lp,*
                              4   1-62  	tra	&2$&3
                              5   1-63  
                              6   1-64  	maclist	off
                              7   1-65  &end
                                  1-66  
                                  1-67  
                                  1-68  " GATE - define a normal gate entry
                                  1-69  "
                                  1-70  "	gate	gatename,procedure,entry,args
                                  1-71  "
                                  1-72  
                                  1-73  macro	gate
                              1   1-74  	gentry	&1,&4*2,0
                              2   1-75  	tsx2	.setup
                              3   1-76  	ldi	=0,dl
                              4   1-77  	short_call &2$&3(ap|0)
                              5   1-78  	return
                              6   1-79  
                              7   1-80  	maclist	restore
                              8   1-81  &end
                                  1-82  
                                  1-83  
                                  1-84  
                                  1-85  macro	gentry
                              1   1-86  	maclist	on,save
                              2   1-87  	segdef	&1
                              3   1-88  	maclist	restore
                              4   1-89  	use	transfer_vector
                              5   1-90  	maclist	on,save
                              6   1-91  &1:
                              7   1-92  	tra	&1.e
                              8   1-93  	maclist	restore
                              9   1-94  	use	main
                             10   1-95  	maclist	on,save
                             11   1-96  	zero	&2,&3
                             12   1-97  &1.e:
                             13   1-98  &end
                                  1-99  
                                 1-100  
                                 1-101  " HARDCORE_GATE_INFO - general info for hardcore gates
                                 1-102  
                                 1-103  macro	hardcore_gate_info
                              1  1-104  	maclist	on,save
                              2  1-105  	name	&1
                              3  1-106  
                              4  1-107  	include	stack_header
                              5  1-108  
                              6  1-109  	include	stack_frame
                              7  1-110  	include	gate_data
                              8  1-111  
                              9  1-112  	maclist	restore
                             10  1-113  	eject
                             11  1-114  
                             12  1-115  	tempd	.temp
                             13  1-116  	tempd	.label_variable(0)
                             14  1-117  	tempd	.time1,.time2
                             15  1-118  	tempd	.unwinder_arglist(0)
                             16  1-119  	tempd	.on_unit(5)
                             17  1-120  	temp	.pf,.entryp
                             18  1-121  	tempd	.vfl_arglist(2)
                             19  1-122  	tempd	.mcptr
                             20  1-123  
                             21  1-124  	use	transfer_vector
                             22  1-125  	equ	.tv_begin,*
                             23  1-126  
                             24  1-127  	tra	.actor
                             25  1-128  
                             26  1-129  	use	tv_end
                             27  1-130  	entrybound
                             28  1-131  
                             29  1-132  	segdef	.tv_end
                             30  1-133  .tv_end:	vfd	14/(*-.tv_begin)
                             31  1-134  
                             32  1-135  	use	main
                             33  1-136  
                             34  1-137  	segdef	.my_lp
                             35  1-138  	even
                             36  1-139  .my_lp:	bss	,2
                             37  1-140  
                             38  1-141  	join	/text/transfer_vector,tv_end,main
                             39  1-142  
                             40  1-143  	use	linkage
                             41  1-144  	join	/link/linkage
                             42  1-145  
                             43  1-146  	use	main
                             44  1-147  
                             45  1-148  	maclist	restore
                             46  1-149  	eject
                             47  1-150  
                             48  1-151  .actor:	epplp	.my_lp,*
                             49  1-152  	maclist	restore
                             50  1-153  	gate_actor
                             51  1-154  
                             52  1-155  
                             53  1-156  
                             54  1-157  .setup:	push
                             55  1-158  	epplp	.my_lp,*
                             56  1-159  	sprilp	sp|stack_frame.lp_ptr
                             57  1-160  
                             58  1-161  	maclist	restore
                             59  1-162  	gcheck
                             60  1-163  
                             61  1-164  	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
                             62  1-165  	rccl	sys_info$clock_,*	calculate times
                             63  1-166  	sbaq	pds$cpu_time
                             64  1-167  	staq	.time1
                             65  1-168  	sbaq	pds$virtual_delta
                             66  1-169  	staq	.time2
                             67  1-170  	lda	pds$page_waits
                             68  1-171  	sta	.pf
                             69  1-172  	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
                             70  1-173  	tra	0,2
                             71  1-174  
                             72  1-175  	maclist	restore
                             73  1-176  	eject
                             74  1-177  
                             75  1-178  .return_code:
                             76  1-179  
                             77  1-180  	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
                             78  1-181  	rccl	sys_info$clock_,*	calculate times
                             79  1-182  	sbaq	pds$cpu_time
                             80  1-183  	staq	.temp
                             81  1-184  	sbaq	.time1
                             82  1-185  	adaq	bp|gate_entry_data.cpu_time
                             83  1-186  	staq	bp|gate_entry_data.cpu_time
                             84  1-187  	ldaq	.temp
                             85  1-188  	sbaq	pds$virtual_delta
                             86  1-189  	sbaq	.time2
                             87  1-190  	adaq	bp|gate_entry_data.vcpu_time
                             88  1-191  	staq	bp|gate_entry_data.vcpu_time
                             89  1-192  	lda	pds$page_waits
                             90  1-193  	sbla	.pf
                             91  1-194  	asa	bp|gate_entry_data.page_waits
                             92  1-195  	aos	bp|gate_entry_data.calls
                             93  1-196  	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
                             94  1-197  
                             95  1-198  			" Poll for ring alarms
                             96  1-199  	sra	.temp	Borrow from time calc
                             97  1-200  	szn	.temp	Zero?
                             98  1-201  	tze	.return_code_return
                             99  1-202  
                            100  1-203  	epp1	sp|stack_frame.prev_sp,*	"possible ring alarm
                            101  1-204  	epaq	pr1|stack_frame.return_ptr,*
                            102  1-205  	ana	7,dl	" ring number to which we return
                            103  1-206  	cmpa	.temp
                            104  1-207  	tpl	.ring_alarm	" ring alarm will occur
                            105  1-208  
                            106  1-209  .return_code_return:
                            107  1-210  	return
                            108  1-211  
                            109  1-212  .ring_alarm:		" perhaps we can handle without faults?
                            110  1-213  
                            111  1-214  	aos	bp|gate_entry_data.ring_alarms
                            112  1-215  	stz	.temp	" return argument for ring_alarm$poll
                            113  1-216  	ldaq	.one_arg_header
                            114  1-217  	staq	.ring_alarm_arg_list
                            115  1-218  	epp1	.temp
                            116  1-219  	spri1	.ring_alarm_arg_list+2
                            117  1-220  	eppap	.ring_alarm_arg_list
                            118  1-221  	short_call ring_alarm$poll
                            119  1-222  	szn	.temp
                            120  1-223  	tze	.return_code_return
                            121  1-224  	eppsp	sp|stack_frame.prev_sp,*
                            122  1-225  	sprisp	pds$pre_empt_poll_return          " short-return from here
                            123  1-226  	epp1	sb|stack_header.stack_begin_ptr,* " abandoning this stack frame.
                            124  1-227  	spri1	sb|stack_header.stack_end_ptr
                            125  1-228  " Leave SB as stack_0, so pxss can get to operators.
                            126  1-229  	tra	pxss$pre_empt_poll
                            127  1-230  
                            128  1-231  	tempd	.ring_alarm_arg_list(2)
                            129  1-232  	even
                            130  1-233  .one_arg_header:
                            131  1-234  	vfd	17/2,1/0,18/4
                            132  1-235  	vfd	18/0,18/0
                            133  1-236  
                            134  1-237  
                            135  1-238  	maclist	restore
                            136  1-239  	eject
                            137  1-240  	maclist	restore
                            138  1-241  &end
                                 1-242  
                                 1-243  
                                 1-244  " BAD_DIR_HANDLER - code to setup and handle bad_dir_ condition
                                 1-245  "			put this after the last hgate macro
                                 1-246  
                                 1-247  macro	bad_dir_handler
                              1  1-248  	maclist	on,save
                              2  1-249  
                              3  1-250  	include	on_unit
                              4  1-251  
                              5  1-252  	use	transfer_vector
                              6  1-253  .handler_entry:
                              7  1-254  	tra	.handler
                              8  1-255  .handler_restart_entry:
                              9  1-256  	tra	.handler_restart_point
                             10  1-257  
                             11  1-258  	use	main
                             12  1-259  .set_dir_trap:
                             13  1-260  	stx0	.entryp		save for restart
                             14  1-261  
                             15  1-262  	mlr	(),(pr),fill(000)
                             16  1-263  	desc9a	0,0
                             17  1-264  	desc9a	.on_unit,10*4
                             18  1-265  	eppbp	.bad_dir_name
                             19  1-266  	spribp	.on_unit+on_unit.name
                             20  1-267  	eppbp	.handler_entry
                             21  1-268  	spribp	.on_unit+on_unit.body
                             22  1-269  	lxl1	.bad_dir_desc
                             23  1-270  	sxl1	.on_unit+on_unit.size
                             24  1-271  	eaa	.on_unit		set up on-unit for bad_dir_
                             25  1-272  	sbla	sp|0,du		.. make rel to sp
                             26  1-273  	sta	sp|stack_frame.on_unit_rel_ptrs
                             27  1-274  	lda	stack_frame.condition_bit,dl
                             28  1-275  	orsa	sp|stack_frame.flag_word
                             29  1-276  	tra	0,0
                             30  1-277  
                             31  1-278  	string	bad_dir_
                             32  1-279  
                             33  1-280  
                             34  1-281  
                             35  1-282  .handler:	epaq	sp|0		verify that call came from ring 0
                             36  1-283  	cana	-1,dl		check ring number in AL
                             37  1-284  	tze	*+2
                             38  1-285  	zero	0		go way kid you bother me
                             39  1-286  
                             40  1-287  	push			" ok, we like the call
                             41  1-288  	epplp	.my_lp,*
                             42  1-289  	ldx0	ap|0		get display
                             43  1-290  	eppbp	ap|2,0*
                             44  1-291  	lda	bp|stack_frame.prev_sp
                             45  1-292  	cana	=o700000,dl	from another ring?
                             46  1-293  	tze	.continue_signal	if not, back to signal_
                             47  1-294  	eppap	ap|2,*		Get mcptr
                             48  1-295  	eppap	ap|0,*		..
                             49  1-296  	spriap	bp|.mcptr		.. save in gate frame
                             50  1-297  	spribp	.label_variable+2
                             51  1-298  	eppbp	.handler_restart_entry
                             52  1-299  	spribp	.label_variable
                             53  1-300  	eppbp	.label_variable
                             54  1-301  	spribp	.unwinder_arglist+2
                             55  1-302  	fld	=1b24,dl
                             56  1-303  	staq	.unwinder_arglist
                             57  1-304  	call	unwinder_$unwinder_(.unwinder_arglist)
                             58  1-305  
                             59  1-306  .continue_signal:
                             60  1-307  	lda	=o400000,du	"1"b
                             61  1-308  	sta	ap|10,*		set continue bit
                             62  1-309  	return
                             63  1-310  
                             64  1-311  .handler_restart_point:
                             65  1-312  	epaq	sp|0		check that call came from ring 0
                             66  1-313  	cana	-1,dl
                             67  1-314  	tze	*+2
                             68  1-315  	zero	1
                             69  1-316  	epplp	.my_lp,*
                             70  1-317  	lca	stack_frame.condition_bit+1,dl  Vanish on-unit
                             71  1-318  	ansa	sp|stack_frame.flag_word
                             72  1-319  	eppbp	.mcptr
                             73  1-320  	spribp	.vfl_arglist+2
                             74  1-321  	fld	=1b24,dl
                             75  1-322  	staq	.vfl_arglist
                             76  1-323  	short_call  verify_lock$verify_lock_bad_dir(.vfl_arglist)
                             77  1-324  	ldx0	.entryp
                             78  1-325  	eppap	sp|stack_frame.arg_ptr,*
                             79  1-326  	tra	0,0		retry the call
                             80  1-327  
                             81  1-328  	maclist	restore
                             82  1-329  	eject
                             83  1-330  	maclist	restore
                             84  1-331  &end
                                 1-332  
                                 1-333  
                                 1-334  " GATE_INFO - general info for non-hardcore gates
                                 1-335  
                                 1-336  macro	gate_info
                              1  1-337  	maclist	on,save
                              2  1-338  	use	transfer_vector
                              3  1-339  	tra	.actor
                              4  1-340  
                              5  1-341  	use	tv_end
                              6  1-342  	entrybound
                              7  1-343  
                              8  1-344  	use	main
                              9  1-345  	join	/text/transfer_vector,tv_end,main
                             10  1-346  
                             11  1-347  	maclist	restore
                             12  1-348  	eject
                             13  1-349  
                             14  1-350  .actor:	getlp
                             15  1-351  	maclist	restore
                             16  1-352  	gate_actor
                             17  1-353  
                             18  1-354  	maclist	restore
                             19  1-355  	eject
                             20  1-356  
                             21  1-357  .setup:	push
                             22  1-358  	getlp
                             23  1-359  	maclist	restore
                             24  1-360  	gcheck
                             25  1-361  	tra	0,2
                             26  1-362  
                             27  1-363  	maclist	restore
                             28  1-364  	eject
                             29  1-365  
                             30  1-366  	maclist	restore
                             31  1-367  &end
                                 1-368  
                                 1-369  
                                 1-370  " Macro to generate gate actor.
                                 1-371  
                                 1-372  macro	gate_actor
                              1  1-373  	maclist	on,save
                              2  1-374  	eppbp	ap|2,*
                              3  1-375  	lda	bp|-1		get length of string
                              4  1-376  	tze	.return_name	zero length => get name
                              5  1-377  
                              6  1-378  	adla	1,dl		include length of acc
                              7  1-379  	stz	ap|4,*
                              8  1-380  	tsx0	.search_defs
                              9  1-381  
                             10  1-382  	cmpc	(pr,rl),(pr,rl)	compare name
                             11  1-383  	desc9a	bp|-1(3),al
                             12  1-384  	desc9a	bb|0,al
                             13  1-385  	tnz	.next_def
                             14  1-386  
                             15  1-387  	lda	ab|1,2		return location
                             16  1-388  	arl	18
                             17  1-389  	sta	ap|4,*
                             18  1-390  
                             19  1-391  	short_return
                             20  1-392  
                             21  1-393  .return_name:
                             22  1-394  	lxl3	ap|4,*		get location
                             23  1-395  	tsx0	.search_defs
                             24  1-396  
                             25  1-397  	cmpx3	ab|1,2		compare location
                             26  1-398  	tnz	.next_def
                             27  1-399  
                             28  1-400  	lda	bb|0		get length of name
                             29  1-401  	arl	27
                             30  1-402  	sta	bp|-1		set length of varying string
                             31  1-403  	mlr	(pr,rl),(pr,rl)	return string
                             32  1-404  	desc9a	bb|0(1),al
                             33  1-405  	desc9a	bp|0,al
                             34  1-406  
                             35  1-407  	short_return
                             36  1-408  
                             37  1-409  .search_defs:
                             38  1-410  	eax2	0
                             39  1-411  	eppab	lp|0,*		ab -> defs
                             40  1-412  .defs_loop:
                             41  1-413  	lxl1	ab|1,2		get class and flags
                             42  1-414  	cmpx1	=o400000,du	must be class 0
                             43  1-415  	tnz	.next_def
                             44  1-416  
                             45  1-417  	ldx7	ab|2,2
                             46  1-418  	eppbb	ab|0,7		bb -> name
                             47  1-419  	tra	0,0		test definition
                             48  1-420  .next_def:
                             49  1-421  	ldx2	ab|0,2		chain to next def
                             50  1-422  	tnz	.defs_loop
                             51  1-423  
                             52  1-424  	short_return
                             53  1-425  
                             54  1-426  &end
                                 1-427  
                                 1-428  
                                 1-429  " Miscellaneous macros.
                                 1-430  
                                 1-431  macro	gcheck
                              1  1-432  	maclist	on,save
                              2  1-433  	ldx1	-2,2		get number of args expected
                              3  1-434  	tze	.no_gate_error	if zero, none or doesn't matter
                              4  1-435  	cmpx1	ap|0		compare against number given
                              5  1-436  	tze	.no_gate_error	args match, call procedure
                              6  1-437  
                              7  1-438  	call	signal_$signal_(signal_arglist)
                              8  1-439  	oct	0
                              9  1-440  
                             10  1-441  	even
                             11  1-442  signal_arglist:
                             12  1-443  	zero	2,4
                             13  1-444  	zero	2,0
                             14  1-445  	arg	.gate_errorname
                             15  1-446  	arg
                             16  1-447  	arg	.gate_errordesc
                             17  1-448  	arg
                             18  1-449  
                             19  1-450  	string	gate_error
                             20  1-451  
                             21  1-452  
                             22  1-453  .no_gate_error:
                             23  1-454  &end
                                 1-455  
                                 1-456  macro	string
                              1  1-457  .&1name:
                              2  1-458  	aci	"&1"
                              3  1-459  .&1desc:
                              4  1-460  	vfd	o9/525,o27/&l1
                              5  1-461  
                              6  1-462  &end
                                 1-463  
                                 1-464  macro	eject
                              1  1-465  	maclist	on,save
                              2  1-466  
                              3  1-467  &end
                                 1-468  
                                 1-469  " END INCLUDE FILE ...... gate_macros.incl.alm
                                 1-470  
                                 1-471  "  To arrange the return it wants to return, it will have to reach back  2 frames.
                                    52  
                                    53  
                                    54  	gate_info network_accounting_gate_
                                        	use	transfer_vector
    000000  0a   000010 7100 00         	tra	.actor
                                        
                                        	use	tv_end
                                        	entrybound
                                        
                                        	use	main
                                        	join	/text/transfer_vector,tv_end,main
                                        
                                        
                                        
    000010  aa  7 00046 2721 20         .actor:	getlp
    000011  aa  0 00002 3521 20         	eppbp	ap|2,*
    000012  aa  2 77777 2351 00         	lda	bp|-1		get length of string
    000013  0a   000027 6000 00         	tze	.return_name	zero length => get name
                                        
    000014  aa   000001 0350 07         	adla	1,dl		include length of acc
    000015  aa  0 00004 4501 20         	stz	ap|4,*
    000016  0a   000042 7000 00         	tsx0	.search_defs
                                        
    000017  aa  0 00140 1065 40         	cmpc	(pr,rl),(pr,rl)	compare name
    000020  aa   277777 600005          	desc9a	bp|-1(3),al
    000021  aa   300000 000005          	desc9a	bb|0,al
    000022  0a   000052 6010 00         	tnz	.next_def
                                        
    000023  aa  1 00001 2351 12         	lda	ab|1,2		return location
    000024  aa   000022 7710 00         	arl	18
    000025  aa  0 00004 7551 20         	sta	ap|4,*
                                        
    000026  aa  7 00044 7101 20         	short_return
                                        
    000027                              .return_name:
    000027  aa  0 00004 7231 20         	lxl3	ap|4,*		get location
    000030  0a   000042 7000 00         	tsx0	.search_defs
                                        
    000031  aa  1 00001 1031 12         	cmpx3	ab|1,2		compare location
    000032  0a   000052 6010 00         	tnz	.next_def
                                        
    000033  aa  3 00000 2351 00         	lda	bb|0		get length of name
    000034  aa   000033 7710 00         	arl	27
    000035  aa  2 77777 7551 00         	sta	bp|-1		set length of varying string
    000036  aa  0 00140 1005 40         	mlr	(pr,rl),(pr,rl)	return string
    000037  aa   300000 200005          	desc9a	bb|0(1),al
    000040  aa   200000 000005          	desc9a	bp|0,al
                                        
    000041  aa  7 00044 7101 20         	short_return
                                        
    000042                              .search_defs:
    000042  aa   000000 6220 00         	eax2	0
    000043  aa  4 00000 3515 20         	eppab	lp|0,*		ab -> defs
    000044                              .defs_loop:
    000044  aa  1 00001 7211 12         	lxl1	ab|1,2		get class and flags
    000045  aa   400000 1010 03         	cmpx1	=o400000,du	must be class 0
    000046  0a   000052 6010 00         	tnz	.next_def
                                        
    000047  aa  1 00002 2271 12         	ldx7	ab|2,2
    000050  aa  1 00000 3535 17         	eppbb	ab|0,7		bb -> name
    000051  aa   000000 7100 10         	tra	0,0		test definition
    000052                              .next_def:
    000052  aa  1 00000 2221 12         	ldx2	ab|0,2		chain to next def
    000053  0a   000044 6010 00         	tnz	.defs_loop
                                        
    000054  aa  7 00044 7101 20         	short_return
                                        
                                        
                                        
                                        
    000055  aa   000060 6270 00         .setup:	push
    000056  aa  7 00040 2721 20
    000057  aa  7 00046 2721 20         	getlp
    000060  aa   777776 2210 12         	ldx1	-2,2		get number of args expected
    000061  0a   000106 6000 00         	tze	.no_gate_error	if zero, none or doesn't matter
    000062  aa  0 00000 1011 00         	cmpx1	ap|0		compare against number given
    000063  0a   000106 6000 00         	tze	.no_gate_error	args match, call procedure
                                        
    000064  aa  6 00000 2541 00         	call	signal_$signal_(signal_arglist)
    000065  0a   000074 3500 00
    000066  4a  4 00010 3521 20
    000067  aa  6 00040 7531 00
    000070  aa  7 00036 6701 20
    000071  aa  6 00000 1731 00
    000072  aa  6 00040 0731 00
    000073  aa   000000 000000          	oct	0
                                        
                                        	even
    000074                              signal_arglist:
    000074  aa   000002 000004          	zero	2,4
    000075  aa   000002 000000          	zero	2,0
    000076  0a   000102 0000 00         	arg	.gate_errorname
    000077  aa   000000 0000 00         	arg
    000100  0a   000105 0000 00         	arg	.gate_errordesc
    000101  aa   000000 0000 00         	arg
                                        
                                        	string	gate_error
    000102                              .gate_errorname:
    000102  aa  147 141 164 145         	aci	"gate_error"
    000103  aa  137 145 162 162
    000104  aa  157 162 000 000
    000105                              .gate_errordesc:
    000105  aa   525000 000010          	vfd	o9/525,o27/10
                                        
                                        
                                        
    000106                              .no_gate_error:
    000106  aa   000000 7100 12         	tra	0,2
                                        
                                        
                                        
                                    55  
                                    56  	gate	clear_table,network_accounting_,clear_table,2
                        000001          	segdef	clear_table
    000001                              clear_table:
    000001  0a   000110 7100 00         	tra	clear_table.e
    000107  aa   000004 000000          	zero	2*2,0
    000110                              clear_table.e:
    000110  0a   000055 7020 00         	tsx2	.setup
    000111  aa   000000 6340 07         	ldi	=0,dl
    000112  4a  4 00012 3521 20         	short_call network_accounting_$clear_table(ap|0)
    000113  aa  7 00036 6701 20
    000114  aa  6 00030 3701 20
    000115  aa  7 00042 7101 20         	return
                                        
                                    57  	gate	dump_table,network_accounting_,dump_table,4
                        000002          	segdef	dump_table
    000002                              dump_table:
    000002  0a   000117 7100 00         	tra	dump_table.e
    000116  aa   000010 000000          	zero	4*2,0
    000117                              dump_table.e:
    000117  0a   000055 7020 00         	tsx2	.setup
    000120  aa   000000 6340 07         	ldi	=0,dl
    000121  4a  4 00014 3521 20         	short_call network_accounting_$dump_table(ap|0)
    000122  aa  7 00036 6701 20
    000123  aa  6 00030 3701 20
    000124  aa  7 00042 7101 20         	return
                                        
                                    58  	gate	get_path,network_accounting_,get_path,1
                        000003          	segdef	get_path
    000003                              get_path:
    000003  0a   000126 7100 00         	tra	get_path.e
    000125  aa   000002 000000          	zero	1*2,0
    000126                              get_path.e:
    000126  0a   000055 7020 00         	tsx2	.setup
    000127  aa   000000 6340 07         	ldi	=0,dl
    000130  4a  4 00016 3521 20         	short_call network_accounting_$get_path(ap|0)
    000131  aa  7 00036 6701 20
    000132  aa  6 00030 3701 20
    000133  aa  7 00042 7101 20         	return
                                        
                                    59  	gate	get_process_total,network_accounting_,get_process_total,5
                        000004          	segdef	get_process_total
    000004                              get_process_total:
    000004  0a   000135 7100 00         	tra	get_process_total.e
    000134  aa   000012 000000          	zero	5*2,0
    000135                              get_process_total.e:
    000135  0a   000055 7020 00         	tsx2	.setup
    000136  aa   000000 6340 07         	ldi	=0,dl
    000137  4a  4 00020 3521 20         	short_call network_accounting_$get_process_total(ap|0)
    000140  aa  7 00036 6701 20
    000141  aa  6 00030 3701 20
    000142  aa  7 00042 7101 20         	return
                                        
                                    60  	gate	read_and_reset_table,network_accounting_,read_and_reset_table,4
                        000005          	segdef	read_and_reset_table
    000005                              read_and_reset_table:
    000005  0a   000144 7100 00         	tra	read_and_reset_table.e
    000143  aa   000010 000000          	zero	4*2,0
    000144                              read_and_reset_table.e:
    000144  0a   000055 7020 00         	tsx2	.setup
    000145  aa   000000 6340 07         	ldi	=0,dl
    000146  4a  4 00022 3521 20         	short_call network_accounting_$read_and_reset_table(ap|0)
    000147  aa  7 00036 6701 20
    000150  aa  6 00030 3701 20
    000151  aa  7 00042 7101 20         	return
                                        
                                    61  	gate	test,network_accounting_,test,1
                        000006          	segdef	test
    000006                              test:
    000006  0a   000153 7100 00         	tra	test.e
    000152  aa   000002 000000          	zero	1*2,0
    000153                              test.e:
    000153  0a   000055 7020 00         	tsx2	.setup
    000154  aa   000000 6340 07         	ldi	=0,dl
    000155  4a  4 00024 3521 20         	short_call network_accounting_$test(ap|0)
    000156  aa  7 00036 6701 20
    000157  aa  6 00030 3701 20
    000160  aa  7 00042 7101 20         	return
                                        
                                    62  
                                    63  " the following entry turns inner-ring debugging on/off
                                    64  	gate	debug,network_accounting_,debug,1
                        000007          	segdef	debug
    000007                              debug:
    000007  0a   000162 7100 00         	tra	debug.e
    000161  aa   000002 000000          	zero	1*2,0
    000162                              debug.e:
    000162  0a   000055 7020 00         	tsx2	.setup
    000163  aa   000000 6340 07         	ldi	=0,dl
    000164  4a  4 00026 3521 20         	short_call network_accounting_$debug(ap|0)
    000165  aa  7 00036 6701 20
    000166  aa  6 00030 3701 20
    000167  aa  7 00042 7101 20         	return
                                        
                                    65  
                                    66  	end

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000170  5a   000003 000000 
    000171  5a   000101 600000 
    000172  aa   000000 000000 
    000173  55   000015 000002 
    000174  5a   000002 400003 
    000175  55   000006 000015 
    000176  aa  030 156 145 164
    000177  aa  167 157 162 153
    000200  aa  137 141 143 143
    000201  aa  157 165 156 164
    000202  aa  151 156 147 137
    000203  aa  147 141 164 145
    000204  aa  137 000 000 000
    000205  55   000022 000003 
    000206  0a   000007 400000 
    000207  55   000020 000003 
    000210  aa  005 144 145 142         debug
    000211  aa  165 147 000 000
    000212  55   000027 000015 
    000213  0a   000006 400000 
    000214  55   000025 000003 
    000215  aa  004 164 145 163         test
    000216  aa  164 000 000 000
    000217  55   000040 000022 
    000220  0a   000005 400000 
    000221  55   000032 000003 
    000222  aa  024 162 145 141         read_and_reset_table
    000223  aa  144 137 141 156
    000224  aa  144 137 162 145
    000225  aa  163 145 164 137
    000226  aa  164 141 142 154
    000227  aa  145 000 000 000
    000230  55   000050 000027 
    000231  0a   000004 400000 
    000232  55   000043 000003 
    000233  aa  021 147 145 164         get_process_total
    000234  aa  137 160 162 157
    000235  aa  143 145 163 163
    000236  aa  137 164 157 164
    000237  aa  141 154 000 000
    000240  55   000056 000040 
    000241  0a   000003 400000 
    000242  55   000053 000003 
    000243  aa  010 147 145 164         get_path
    000244  aa  137 160 141 164
    000245  aa  150 000 000 000
    000246  55   000064 000050 
    000247  0a   000002 400000 
    000250  55   000061 000003 
    000251  aa  012 144 165 155         dump_table
    000252  aa  160 137 164 141
    000253  aa  142 154 145 000
    000254  55   000072 000056 
    000255  0a   000001 400000 
    000256  55   000067 000003 
    000257  aa  013 143 154 145         clear_table
    000260  aa  141 162 137 164
    000261  aa  141 142 154 145
    000262  55   000002 000064 
    000263  6a   000000 400002 
    000264  55   000075 000003 
    000265  aa  014 163 171 155         symbol_table
    000266  aa  142 157 154 137
    000267  aa  164 141 142 154
    000270  aa  145 000 000 000

DEFINITIONS HASH TABLE

    000271  aa   000000 000015 
    000272  5a   000056 000000 
    000273  aa   000000 000000 
    000274  aa   000000 000000 
    000275  5a   000022 000000 
    000276  5a   000040 000000 
    000277  aa   000000 000000 
    000300  5a   000064 000000 
    000301  5a   000072 000000 
    000302  aa   000000 000000 
    000303  aa   000000 000000 
    000304  5a   000015 000000 
    000305  5a   000027 000000 
    000306  5a   000050 000000 

EXTERNAL NAMES

    000307  aa  023 156 145 164         network_accounting_
    000310  aa  167 157 162 153
    000311  aa  137 141 143 143
    000312  aa  157 165 156 164
    000313  aa  151 156 147 137
    000314  aa  007 163 151 147         signal_
    000315  aa  156 141 154 137

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    000316  aa   000004 000000 
    000317  55   000117 000020 
    000320  aa   000004 000000 
    000321  55   000117 000025 
    000322  aa   000004 000000 
    000323  55   000117 000032 
    000324  aa   000004 000000 
    000325  55   000117 000043 
    000326  aa   000004 000000 
    000327  55   000117 000053 
    000330  aa   000004 000000 
    000331  55   000117 000061 
    000332  aa   000004 000000 
    000333  55   000117 000067 
    000334  aa   000004 000000 
    000335  55   000124 000124 
    000336  aa   000001 000000 
    000337  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    000340  5a   000126 000000 
    000341  5a   000130 000000 
    000342  5a   000132 000000 
    000343  5a   000134 000000 
    000344  5a   000136 000000 
    000345  5a   000140 000000 
    000346  5a   000142 000000 
    000347  5a   000144 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000170 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000030 
    000007  a2   000000 000000 
    000010  9a   777770 0000 46         signal_|signal_
    000011  5a   000157 0000 00
    000012  9a   777766 0000 46         network_accounting_|clear_table
    000013  5a   000156 0000 00
    000014  9a   777764 0000 46         network_accounting_|dump_table
    000015  5a   000155 0000 00
    000016  9a   777762 0000 46         network_accounting_|get_path
    000017  5a   000154 0000 00
    000020  9a   777760 0000 46         network_accounting_|get_process_total
    000021  5a   000153 0000 00
    000022  9a   777756 0000 46         network_accounting_|read_and_reset_table
    000023  5a   000152 0000 00
    000024  9a   777754 0000 46         network_accounting_|test
    000025  5a   000151 0000 00
    000026  9a   777752 0000 46         network_accounting_|debug
    000027  5a   000150 0000 00
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000007 
    000004  aa   000000 115030 
    000005  aa   273207 326355 
    000006  aa   000000 115524 
    000007  aa   101642 434536 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000202 
    000020  aa   000000 000127 
    000021  aa   000152 000144 
    000022  aa   000173 000127 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   067056 063040 
    000030  aa   116157 166145 
    000031  aa   155142 145162 
    000032  aa   040061 071070 
    000033  aa   066040 040040 
    000034  aa   107112 157150 
    000035  aa   156163 157156 
    000036  aa   056123 171163 
    000037  aa   115141 151156 
    000040  aa   164056 141040 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   055164 141162 
    000045  aa   147145 164040 
    000046  aa   154066 070040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040154 151163 
    000057  aa   164040 163171 
    000060  aa   155142 157154 
    000061  aa   163040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000002 
    000066  aa   000076 000075 
    000067  aa   155200 221224 
    000070  aa   000000 115523 
    000071  aa   731531 000000 
    000072  aa   000116 000041 
    000073  aa   134571 651553 
    000074  aa   000000 113462 
    000075  aa   317506 600000 
    000076  aa   076163 160145          >special_ldd>install>MR12.1-1054>network_accounting_gate_.alm
    000077  aa   143151 141154 
    000100  aa   137154 144144 
    000101  aa   076151 156163 
    000102  aa   164141 154154 
    000103  aa   076115 122061 
    000104  aa   062056 061055 
    000105  aa   061060 065064 
    000106  aa   076156 145164 
    000107  aa   167157 162153 
    000110  aa   137141 143143 
    000111  aa   157165 156164 
    000112  aa   151156 147137 
    000113  aa   147141 164145 
    000114  aa   137056 141154 
    000115  aa   155040 040040 
    000116  aa   076154 144144          >ldd>include>gate_macros.incl.alm
    000117  aa   076151 156143 
    000120  aa   154165 144145 
    000121  aa   076147 141164 
    000122  aa   145137 155141 
    000123  aa   143162 157163 
    000124  aa   056151 156143 
    000125  aa   154056 141154 
    000126  aa   155040 040040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

          10    .actor                   network_accounting_gate_:        54.
          44    .defs_loop               network_accounting_gate_:        54.
         105    .gate_errordesc          network_accounting_gate_:        54.
         102    .gate_errorname          network_accounting_gate_:        54.
          52    .next_def                network_accounting_gate_:        54.
         106    .no_gate_error           network_accounting_gate_:        54.
          27    .return_name             network_accounting_gate_:        54.
          42    .search_defs             network_accounting_gate_:        54.
          55    .setup                   network_accounting_gate_:        54,   56,   57,   58,   59,   60,   61,   64.
           1    clear_table              network_accounting_gate_:        56.
         110    clear_table.e            network_accounting_gate_:        56.
           7    debug                    network_accounting_gate_:        64.
         162    debug.e                  network_accounting_gate_:        64.
           2    dump_table               network_accounting_gate_:        57.
         117    dump_table.e             network_accounting_gate_:        57.
           3    get_path                 network_accounting_gate_:        58.
         126    get_path.e               network_accounting_gate_:        58.
           4    get_process_total        network_accounting_gate_:        59.
         135    get_process_total.e      network_accounting_gate_:        59.
          10    main                     network_accounting_gate_:        54,   56,   57,   58,   59,   60,   61,   64.
                network_accounting_      network_accounting_gate_:        56,   57,   58,   59,   60,   61,   64.
           5    read_and_reset_table     network_accounting_gate_:        60.
         144    read_and_reset_table.e   network_accounting_gate_:        60.
                signal_                  network_accounting_gate_:        54.
          74    signal_arglist           network_accounting_gate_:        54.
           6    test                     network_accounting_gate_:        61.
         153    test.e                   network_accounting_gate_:        61.
           0    transfer_vector          network_accounting_gate_:        54,   56,   57,   58,   59,   60,   61,   64.
          10    tv_end                   network_accounting_gate_:        54.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
