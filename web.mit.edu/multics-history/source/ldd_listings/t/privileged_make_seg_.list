	COMPILATION LISTING OF SEGMENT privileged_make_seg_
	Compiled by: Multics PL/I Compiler, Release 27d, of October 11, 1982
	Compiled at: Honeywell LISD Phoenix, System M
	Compiled on: 11/15/82  1733.3 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 privileged_make_seg_: proc (dname, ename, rname, mode, segp, ecode);
       12 
       13 /* This subroutine is provided as a replacement for hcs_$make_seg
       14*   for use by processes having access to the system_privilege_
       15*   gate.  It should be used instead of hcs_$make_seg whenever it
       16*   is desired to "make" a segment which can have an access class
       17*   different from the process authorization.
       18**/
       19 
       20 /* Written by J. Stern, 2/5/75 */
       21 
       22 
       23 dcl  dname char (*);				/* directory name */
       24 dcl  ename char (*);				/* entry name */
       25 dcl  rname char (*);				/* reference name */
       26 dcl  mode fixed bin (5);				/* access mode */
       27 dcl  segp ptr;					/* segment pointer */
       28 dcl  ecode fixed bin (35);				/* error code */
       29 dcl  priv_code fixed bin (35);			/* code returned by dir_priv_on */
       30 dcl  code1 fixed bin (35);				/* code returned by append_branch */
       31 dcl  code2 fixed bin (35);				/* code returned by initiate */
       32 
       33 dcl  null builtin;
       34 dcl  error_table_$namedup fixed bin (35) ext static;
       35 dcl  cleanup condition;
       36 
       37 dcl  system_privilege_$dir_priv_on entry (fixed bin (35));
       38 dcl  system_privilege_$dir_priv_off entry (fixed bin (35));
       39 dcl  hcs_$append_branch entry (char (*), char (*), fixed bin (5), fixed bin (35));
       40 dcl  system_privilege_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
       41 
       42           segp = null();				/* like hcs_$make_seg does for caller		*/
       43 	priv_code = 1;				/* indicates no change to dir privilege yet */
       44 	on cleanup begin;
       45 	     if priv_code = 0 then call system_privilege_$dir_priv_off (priv_code);
       46 	end;
       47 
       48 	call system_privilege_$dir_priv_on (priv_code);	/* turn on directory privilege */
       49 
       50 	call hcs_$append_branch (dname, ename, mode, code1);
       51 
       52 	if priv_code = 0 then			/* directory priv was not on before */
       53 	     call system_privilege_$dir_priv_off (priv_code);
       54 	priv_code = 1;
       55 
       56 	if code1 ^= 0 then
       57 	     if code1 ^= error_table_$namedup then go to set_code;
       58 
       59 	call system_privilege_$initiate (dname, ename, rname, 0, 1, segp, code2);
       60 	if code2 ^= 0 then ecode = code2;
       61 	else
       62 set_code:	ecode = code1;
       63 
       64 
       65      end privileged_make_seg_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/15/82  1519.0  privileged_make_seg_.pl1          >dumps>old>recomp>privileged_make_seg_.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
cleanup                         000104 stack reference condition                dcl 35 ref 44
code1                           000101 automatic       fixed bin(35,0)          dcl 30 set ref 50* 56 56 61
code2                           000102 automatic       fixed bin(35,0)          dcl 31 set ref 59* 60 60
dname                                  parameter       char                     unaligned dcl 23 set ref 11 50* 59*
ecode                                  parameter       fixed bin(35,0)          dcl 28 set ref 11 60* 61*
ename                                  parameter       char                     unaligned dcl 24 set ref 11 50* 59*
error_table_$namedup            000010 external static fixed bin(35,0)          dcl 34 ref 56
hcs_$append_branch              000016 constant        entry                    external dcl 39 ref 50
mode                                   parameter       fixed bin(5,0)           dcl 26 set ref 11 50*
null                                                   builtin function         dcl 33 ref 42
priv_code                       000100 automatic       fixed bin(35,0)          dcl 29 set ref 43* 45 45* 48* 52 52* 54*
rname                                  parameter       char                     unaligned dcl 25 set ref 11 59*
segp                                   parameter       pointer                  dcl 27 set ref 11 42* 59*
system_privilege_$dir_priv_off  000014 constant        entry                    external dcl 38 ref 45 52
system_privilege_$dir_priv_on   000012 constant        entry                    external dcl 37 ref 48
system_privilege_$initiate      000020 constant        entry                    external dcl 40 ref 59

NAMES DECLARED BY EXPLICIT CONTEXT.
privileged_make_seg_            000020 constant        entry                    external dcl 11
set_code                        000231 constant        label                    dcl 61 ref 56

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       344         366     235         354
Length       544     235        22         142     107           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
privileged_make_seg_                132 external procedure  is an external procedure.  
on unit on line 44                   68 on unit               

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
privileged_make_seg_     000100 priv_code                   privileged_make_seg_
                         000101 code1                       privileged_make_seg_
                         000102 code2                       privileged_make_seg_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return              enable              ext_entry_desc      int_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
hcs_$append_branch            system_privilege_$dir_priv_off                              system_privilege_$dir_priv_on
system_privilege_$initiate

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$namedup




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000012        42 000045        43 000050        44 000052        45 000066        46 000077        48 000100
     50 000107        52 000136        54 000147        56 000151        59 000156        60 000224        61 000231
     65 000234


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
