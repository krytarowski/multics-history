	COMPILATION LISTING OF SEGMENT set_x25_packet_threshold
	Compiled by: Multics PL/I Compiler, Release 28d, of October 4, 1983
	Compiled at: Honeywell LCPD Phoenix, System M
	Compiled on: 12/21/83  0918.2 mst Wed
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 /* format: style4,delnl,insnl,^ifthendo */
        7 set_x25_packet_threshold:
        8      procedure ();
        9 
       10 /* highly-privileged command for setting minimum size of X.25 "long packets". A long packet is one
       11*   that is not output as long as there are short packets queued.
       12**/
       13 
       14 /* Written July 1983 by Robert Coren */
       15 
       16 
       17 dcl  code fixed bin (35);
       18 dcl  n_args fixed bin;
       19 dcl  chan_name char (32);
       20 dcl  packet_size fixed bin (35);
       21 dcl  argp pointer;
       22 dcl  argl fixed bin (21);
       23 
       24 dcl  arg char (argl) based (argp);
       25 
       26 
       27 dcl  cu_$arg_count entry (fixed bin, fixed bin (35));
       28 dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
       29 dcl  com_err_ entry () options (variable);
       30 dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
       31 dcl  hphcs_$tty_control entry (char (*), char (*), pointer, fixed bin (35));
       32 
       33 dcl  CMD_NAME char (24) internal static options (constant) init ("set_x25_packet_threshold");
       34 
       35 dcl  error_table_$wrong_no_of_args fixed bin (35) external static;
       36 
       37 dcl  addr builtin;
       38 
       39 	call cu_$arg_count (n_args, code);
       40 	if code ^= 0
       41 	then do;
       42 	     call com_err_ (code, CMD_NAME);
       43 	     return;
       44 	end;
       45 
       46 	if n_args ^= 2
       47 	then do;
       48 	     call com_err_ (error_table_$wrong_no_of_args, CMD_NAME, "^/Usage: ^a channel_name packet_size", CMD_NAME);
       49 	     return;
       50 	end;
       51 
       52 	call cu_$arg_ptr (1, argp, argl, code);
       53 	chan_name = arg;
       54 
       55 	call cu_$arg_ptr (2, argp, argl, code);
       56 
       57 	packet_size = cv_dec_check_ (arg, code);
       58 	if code ^= 0
       59 	then do;
       60 	     call com_err_ (0, CMD_NAME, "^a is not a valid packet size.", arg);
       61 	     return;
       62 	end;
       63 
       64 	if packet_size < 2
       65 	then do;
       66 	     call com_err_ (0, CMD_NAME, "pakcet threshold must be at least 2.");
       67 	     return;
       68 	end;
       69 
       70 	call hphcs_$tty_control (chan_name, "set_long_packet_threshold", addr (packet_size), code);
       71 
       72 	if code ^= 0
       73 	then call com_err_ (code, CMD_NAME);
       74 
       75 	return;
       76      end set_x25_packet_threshold;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    12/21/83  0918.3  set_x25_packet_threshold.pl1      >spec>on>12/21/83-pnotice>set_x25_packet_threshold.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
CMD_NAME                        000000 constant        char(24)                 initial unaligned dcl 33 set ref 42* 48* 48* 60* 66*
                                                                                  72*
addr                                                   builtin function         dcl 37 ref 70 70
arg                                    based           char                     unaligned dcl 24 set ref 53 57* 60*
argl                            000116 automatic       fixed bin(21,0)          dcl 22 set ref 52* 53 55* 57 57 60 60
argp                            000114 automatic       pointer                  dcl 21 set ref 52* 53 55* 57 60
chan_name                       000102 automatic       char(32)                 unaligned dcl 19 set ref 53* 70*
code                            000100 automatic       fixed bin(35,0)          dcl 17 set ref 39* 40 42* 52* 55* 57* 58 70* 72 72*
com_err_                        000014 constant        entry                    external dcl 29 ref 42 48 60 66 72
cu_$arg_count                   000010 constant        entry                    external dcl 27 ref 39
cu_$arg_ptr                     000012 constant        entry                    external dcl 28 ref 52 55
cv_dec_check_                   000016 constant        entry                    external dcl 30 ref 57
error_table_$wrong_no_of_args   000022 external static fixed bin(35,0)          dcl 35 set ref 48*
hphcs_$tty_control              000020 constant        entry                    external dcl 31 ref 70
n_args                          000101 automatic       fixed bin(17,0)          dcl 18 set ref 39* 46
packet_size                     000112 automatic       fixed bin(35,0)          dcl 20 set ref 57* 64 70 70

NAME DECLARED BY EXPLICIT CONTEXT.
set_x25_packet_threshold        000061 constant        entry                    external dcl 7

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       506         532     401         516
Length       716     401        24         147     105           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
set_x25_packet_threshold            118 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
set_x25_packet_threshold 000100 code                        set_x25_packet_threshold
                         000101 n_args                      set_x25_packet_threshold
                         000102 chan_name                   set_x25_packet_threshold
                         000112 packet_size                 set_x25_packet_threshold
                         000114 argp                        set_x25_packet_threshold
                         000116 argl                        set_x25_packet_threshold

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return              ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      cu_$arg_count                 cu_$arg_ptr                   cv_dec_check_
hphcs_$tty_control

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$wrong_no_of_args




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
      7 000060        39 000066        40 000076        42 000100        43 000115        46 000116        48 000121
     49 000150        52 000151        53 000170        55 000175        57 000214        58 000237        60 000241
     61 000275        64 000276        66 000301        67 000326        70 000327        72 000361        75 000400


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
