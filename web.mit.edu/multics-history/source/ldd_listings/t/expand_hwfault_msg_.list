	COMPILATION LISTING OF SEGMENT expand_hwfault_msg_
	Compiled by: Multics PL/I Compiler, Release 28e, of February 14, 1985
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 03/13/85  1141.0 mst Wed
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 
        7 /* format: style4 */
        8 
        9 expand_hwfault_msg_:
       10      procedure ();
       11 
       12 /* *      EXPAND_HWFAULT_MSG_
       13*   *
       14*   *      Expander for hardware fault messages logged by FIM and others.
       15*   *
       16*   *      Note that this procedure does not now use a format_log_message_
       17*   *      entrypoint to write words of octal, though it probably should....
       18*   *
       19*   *      84-12-05, W. Olin Sibert: Initial coding, after print_syserr_msg_
       20*   *      85-01-21, EJ Sharpe: added check for old style binary to $format entry
       21*   *	85-02-21, EJ Sharpe: use syserr_fault_msg.incl.pl1 and excise code supporting very old message formats
       22**/
       23 
       24 declare  P_log_message_format_ptr pointer parameter;
       25 declare  P_log_message_ptr pointer parameter;
       26 declare  P_expand_mode_ptr pointer parameter;
       27 declare  P_expansion char (*) varying parameter;
       28 declare  P_code fixed bin (35) parameter;
       29 
       30 declare  temp char (2000) varying;
       31 declare  ptr_idx fixed bin;
       32 declare  ptr_ptr pointer;
       33 
       34 declare  expand_log_message_$append_octal entry (pointer, pointer, fixed bin, char (*) varying);
       35 declare  expand_log_message_$unknown_syserr entry (pointer, pointer, pointer, char (*) varying, fixed bin (35));
       36 declare  expand_log_message_$unknown entry (pointer, pointer, pointer, char (*) varying, fixed bin (35));
       37 declare  ioa_$rsnnl entry options (variable);
       38 
       39 declare  NEWLINE char (1) aligned internal static options (constant) init ("
       40 ");
       41 
       42 declare  (addr, addrel, binary, dimension, size) builtin;
       43 
       44 
       45 expand_hwfault_msg_$format:
       46      entry (P_log_message_format_ptr, P_log_message_ptr, P_expand_mode_ptr, P_expansion, P_code);
       47 
       48 	log_message_ptr = P_log_message_ptr;
       49 
       50 	fmsgp = addr (log_message.data (1));
       51 
       52 	if size (fault_msg) = dimension (log_message.data, 1)
       53 	then call expand_normal_hwfault ();
       54 	else call expand_log_message_$unknown
       55 		(P_log_message_format_ptr, log_message_ptr, P_expand_mode_ptr, P_expansion, P_code);
       56 
       57 	return;
       58 
       59 
       60 /* This is a compatibility entrypoint-- it processes an old-format "syserr" class
       61*   message, which has the syserr binary code in the first word of the data. */
       62 
       63 expand_hwfault_msg_$syserr:
       64      entry (P_log_message_format_ptr, P_log_message_ptr, P_expand_mode_ptr, P_expansion, P_code);
       65 
       66 	log_message_ptr = P_log_message_ptr;
       67 
       68 	fmsgp = addr (log_message.data (2));
       69 
       70 	if ((binary (log_message.data (1)) = SB_verify_lock)
       71 	     | (binary (log_message.data (1)) = SB_hw_fault))
       72 	     & (size (fault_msg) = dimension (log_message.data, 1) - 1)
       73 	then call expand_normal_hwfault ();
       74 	else call expand_log_message_$unknown_syserr
       75 		(P_log_message_format_ptr, log_message_ptr, P_expand_mode_ptr, P_expansion, P_code);
       76 
       77 	return;
       78 
       79 expand_normal_hwfault:
       80      procedure ();
       81 
       82 	P_expansion = P_expansion || "Pointer Registers:";
       83 	P_expansion = P_expansion || NEWLINE;
       84 
       85 	do ptr_idx = 0 to 7;
       86 	     ptr_ptr = addr (fault_msg.mach_cond.prs (ptr_idx));
       87 	     call ioa_$rsnnl ("^7o|^6.3b(^d)[^d]^[^x^]", temp, (0),
       88 		ptr_ptr -> its_unsigned.segno,
       89 		ptr_ptr -> its.offset,
       90 		ptr_ptr -> its_unsigned.bit_offset,
       91 		ptr_ptr -> its_unsigned.ringno,
       92 		(ptr_ptr -> its_unsigned.bit_offset < 10));
       93 	     P_expansion = P_expansion || temp;
       94 	end;
       95 	P_expansion = P_expansion || NEWLINE;
       96 
       97 	call ioa_$rsnnl ("x0-x7: ^( ^6.3b^)^/", temp, (0), fault_msg.mach_cond.x);
       98 	P_expansion = P_expansion || temp;
       99 
      100 	call ioa_$rsnnl ("a: ^.3b q: ^.3b e: ^.3b t: ^.3b ralr: ^.3b^/", temp, (0),
      101 	     fault_msg.mach_cond.a, fault_msg.mach_cond.q, "0"b || fault_msg.mach_cond.e,
      102 	     fault_msg.mach_cond.t, fault_msg.mach_cond.ralr);
      103 	P_expansion = P_expansion || temp;
      104 
      105 	call ioa_$rsnnl ("Fault Register: ^.3b^/", temp, (0), fault_msg.mach_cond.fault_reg);
      106 	P_expansion = P_expansion || temp;
      107 
      108 	call add_scu_data (addr (fault_msg.mach_cond.scu));
      109 
      110 	call add_words ("EIS Info:", addr (fault_msg.mach_cond.eis_info), 8);
      111 
      112 	call add_history_registers (addr (fault_msg.hist_reg), (addr (fault_msg.mach_cond.scu) -> scu.pad2));
      113 
      114 	return;
      115      end expand_normal_hwfault;
      116 
      117 
      118 add_scu_data:
      119      procedure (P_scu_ptr);
      120 
      121 declare  P_scu_ptr pointer parameter;
      122 
      123 	call add_words ("SCU Data:", P_scu_ptr, 8);
      124 
      125 	return;
      126      end add_scu_data;
      127 
      128 
      129 add_history_registers:
      130      procedure (P_hreg_ptr, P_cpu_type);
      131 
      132 declare  P_hreg_ptr pointer parameter;
      133 declare  P_cpu_type bit (9) parameter;
      134 
      135 
      136 	if (P_cpu_type = ""b) then			/* Level 68 */
      137 	     call add_words ("OU History Reg Data:", addrel (P_hreg_ptr, 0), 32);
      138 	else call add_words ("DU/OU History Reg Data:", addrel (P_hreg_ptr, 0), 32);
      139 
      140 	call add_words ("CU History Reg Data:", addrel (P_hreg_ptr, 32), 32);
      141 
      142 	if (P_cpu_type = ""b) then			/* Level 68 */
      143 	     call add_words ("DU History Reg Data:", addrel (P_hreg_ptr, 64), 32);
      144 	else call add_words ("APU #2 History Reg Data:", addrel (P_hreg_ptr, 64), 32);
      145 
      146 	if (P_cpu_type = ""b) then			/* Level 68 */
      147 	     call add_words ("APU History Reg Data:", addrel (P_hreg_ptr, 96), 32);
      148 	else call add_words ("APU #1 History Reg Data:", addrel (P_hreg_ptr, 96), 32);
      149 
      150 	return;
      151      end add_history_registers;
      152 
      153 
      154 add_words:
      155      procedure (P_title, P_words_ptr, P_words_count);
      156 
      157 declare  P_title char (*) parameter;
      158 declare  P_words_ptr pointer parameter;
      159 declare  P_words_count fixed bin parameter;
      160 
      161 
      162 	P_expansion = P_expansion || P_title;
      163 	P_expansion = P_expansion || NEWLINE;
      164 
      165 	call expand_log_message_$append_octal (P_log_message_format_ptr, P_words_ptr, P_words_count, P_expansion);
      166 
      167 	return;
      168      end add_words;
      169 
      170 /* format: off */
      171  /* BEGIN INCLUDE FILE ... log_message.incl.pl1 ... 84-04-25 ... W. Olin Sibert */
  1     2 
  1     3 declare 1 log_message_header  aligned based,                /* Items marked "(SET)" are set by $create_message */
  1     4           2 sentinel          bit (36) aligned,             /* Proper value declared in log_segment.incl.pl1 */
  1     5           2 sequence          fixed bin (35),               /* Sequence number for this message (SET) */
  1     6           2 severity          fixed bin (8) unaligned,      /* Severity of message */
  1     7           2 data_class_lth    fixed bin (9) unaligned unsigned, /* Length of data class-- 0 to 16 (SET) */
  1     8           2 time              fixed bin (53) unaligned,     /* Time message originated */
  1     9           2 text_lth          fixed bin (17) unaligned,     /* Length of message text. Must be nonzero (SET) */
  1    10           2 data_lth          fixed bin (17) unaligned,     /* Length of binary data. May be zero (SET) */
  1    11           2 process_id        bit (36) aligned;             /* Process id of process writing message */
  1    12 
  1    13 declare 1 log_message         aligned based (log_message_ptr),
  1    14           2 header            aligned like log_message_header,
  1    15           2 text              char (log_message_text_lth         refer (log_message.text_lth)) unaligned,
  1    16           2 data_class        char (log_message_data_class_lth   refer (log_message.data_class_lth)) unaligned,
  1    17           2 data              dim (log_message_data_lth          refer (log_message.data_lth)) bit (36) aligned;
  1    18 
  1    19 declare   log_message_ptr pointer;
  1    20 declare   log_message_text_lth fixed bin;
  1    21 declare   log_message_data_class_lth fixed bin;
  1    22 declare   log_message_data_lth fixed bin;
  1    23 
  1    24 /* END INCLUDE FILE ... log_message.incl.pl1 */
      171 
      172  /* BEGIN INCLUDE FILE ... log_message_format.incl.pl1 ... 84-07-03 ... W. Olin Sibert */
  2     2 
  2     3 declare 1 log_message_format            aligned based (log_message_format_ptr),
  2     4           2 caller                      char (32) unaligned, /* Caller name to use when printing error messages */
  2     5           2 line_lth                    fixed bin,          /* Max length of output lines; longer messages are folded */
  2     6           2 indentation                 fixed bin,          /* Number of spaces at beginning of each output line */
  2     7           2 equal_sw                    bit (1) aligned,    /* Whether to suppress messages with identical text */
  2     8           2 error_sw                    bit (1) aligned,    /* Whether to print error messages via com_err_ */
  2     9           2 prefix                      char (40) varying,  /* Prefix for printing messages */
  2    10           2 number_format               char (20) varying,  /* ioa_ format for printing message numbers */
  2    11           2 time_format                 char (40) varying,  /* date_time_$format string for message times */
  2    12           2 date_format                 char (40) varying,  /* date_time_$format string for when date changes */
  2    13           2 continuation_indent	fixed bin,	/* If >= zero, value for continuation lines */
  2    14 						/* Otherwise, lined up under the text by default */
  2    15 
  2    16           2 pad (59)                    bit (36) aligned,
  2    17 
  2    18 /* ONLY format_log_message_$adjust ever changes the values below */
  2    19 
  2    20           2 internal_info               aligned,            /* Internal info, set by $adjust-- DO NOT CHANGE */
  2    21             3 area_ptr                  pointer,            /* Where this structure is allocated */
  2    22             3 date_ioa_string           char (100) varying, /* Format for date breaks,if any */
  2    23             3 message_ioa_string        char (100) varying, /* Format for first lines of messages */
  2    24             3 real_continuation_indent  fixed bin,          /* Indentation for continuation lines */
  2    25             3 prefix_lth                fixed bin,          /* Length of indent + prefix + time + sequence + severity */
  2    26             3 date_modulus              fixed bin (36),     /* Modulus for checking whether dates are equal */
  2    27 
  2    28           2 end                         fixed bin;
  2    29 
  2    30 declare   log_message_format_ptr pointer;
  2    31 
  2    32 /* END INCLUDE FILE ... log_message_format.incl.pl1 */
      172 
      173  /* BEGIN INCLUDE FILE its.incl.pl1
  3     2*   modified 27 July 79 by JRDavis to add its_unsigned
  3     3*   Internal format of ITS pointer, including ring-number field for follow-on processor */
  3     4 
  3     5 dcl 1 its based aligned,				/* declaration for ITS type pointer */
  3     6     2 pad1 bit (3) unaligned,
  3     7     2 segno bit (15) unaligned,			/* segment number within the pointer */
  3     8     2 ringno bit (3) unaligned,			/* ring number within the pointer */
  3     9     2 pad2 bit (9) unaligned,
  3    10     2 its_mod bit (6) unaligned,			/* should be 43(8) */
  3    11 
  3    12     2 offset bit (18) unaligned,			/* word offset within the addressed segment */
  3    13     2 pad3 bit (3) unaligned,
  3    14     2 bit_offset bit (6) unaligned,			/* bit offset within the word */
  3    15     2 pad4 bit (3) unaligned,
  3    16     2 mod bit (6) unaligned;				/* further modification */
  3    17 
  3    18 dcl 1 itp based aligned,				/* declaration for ITP type pointer */
  3    19     2 pr_no bit (3) unaligned,			/* number of pointer register to use */
  3    20     2 pad1 bit (27) unaligned,
  3    21     2 itp_mod bit (6) unaligned,			/* should be 41(8) */
  3    22 
  3    23     2 offset bit (18) unaligned,			/* word offset from pointer register word offset */
  3    24     2 pad2 bit (3) unaligned,
  3    25     2 bit_offset bit (6) unaligned,			/* bit offset relative to new word offset */
  3    26     2 pad3 bit (3) unaligned,
  3    27     2 mod bit (6) unaligned;				/* further modification */
  3    28 
  3    29 
  3    30 dcl 1 its_unsigned based aligned,			/* just like its, but with unsigned binary */
  3    31     2 pad1 bit (3) unaligned,
  3    32     2 segno fixed bin (15) unsigned unaligned,
  3    33     2 ringno fixed bin (3) unsigned unaligned,
  3    34     2 pad2 bit (9) unaligned,
  3    35     2 its_mod bit (6) unaligned,
  3    36 
  3    37     2 offset fixed bin (18) unsigned unaligned,
  3    38     2 pad3 bit (3) unaligned,
  3    39     2 bit_offset fixed bin (6) unsigned unaligned,
  3    40     2 pad4 bit (3) unaligned,
  3    41     2 mod bit (6) unaligned;
  3    42 
  3    43 dcl 1 itp_unsigned based aligned,			/* just like itp, but with unsigned binary where appropriate */
  3    44     2 pr_no fixed bin (3) unsigned unaligned,
  3    45     2 pad1 bit (27) unaligned,
  3    46     2 itp_mod bit (6) unaligned,
  3    47 
  3    48     2 offset fixed bin (18) unsigned unaligned,
  3    49     2 pad2 bit (3) unaligned,
  3    50     2 bit_offset fixed bin (6) unsigned unaligned,
  3    51     2 pad3 bit (3) unaligned,
  3    52     2 mod bit (6) unaligned;
  3    53 
  3    54 
  3    55 dcl  ITS_MODIFIER bit (6) unaligned internal static options (constant) init ("43"b3);
  3    56 dcl  ITP_MODIFIER bit (6) unaligned internal static options (constant) init ("41"b3);
  3    57 
  3    58 /* END INCLUDE FILE   its.incl.pl1 */
      173 
      174  /*  */
  4     2 /* BEGIN INCLUDE FILE  mc.incl.pl1   Created Dec 72 for 6180 - WSS. */
  4     3 /* Modified 06/07/76 by Greenberg for mc.resignal */
  4     4 /* Modified 07/07/76 by Morris for fault register data */
  4     5 /* Modified 08/28/80 by J. A. Bush for the DPS8/70M CVPU */
  4     6 /* Modified '82 to make values constant */
  4     7 
  4     8 /* words 0-15 pointer registers */
  4     9 
  4    10 dcl  mcp ptr;
  4    11 
  4    12 dcl 1 mc based (mcp) aligned,
  4    13     2 prs (0:7) ptr,				/* POINTER  REGISTERS */
  4    14    (2 regs,					/* registers */
  4    15       3 x (0:7) bit (18),				/* index registers */
  4    16       3 a bit (36),					/* accumulator */
  4    17       3 q bit (36),					/* q-register */
  4    18       3 e bit (8),					/* exponent */
  4    19       3 pad1 bit (28),
  4    20       3 t bit (27),					/* timer register */
  4    21       3 pad2 bit (6),
  4    22       3 ralr bit (3),				/* ring alarm register */
  4    23 
  4    24     2 scu (0:7) bit (36),
  4    25 
  4    26     2 mask bit (72),				/* mem controller mask at time of fault */
  4    27     2 ips_temp bit (36),				/* Temporary storage for IPS info */
  4    28     2 errcode fixed bin (35),				/* fault handler's error code */
  4    29     2 fim_temp,
  4    30       3 unique_index bit (18) unal,			/* unique index for restarting faults */
  4    31       3 resignal bit (1) unal,			/* recompute signal name with fcode below */
  4    32       3 fcode bit (17) unal,				/* fault code used as index to FIM table and SCT */
  4    33     2 fault_reg bit (36),				/* fault register */
  4    34     2 pad2 bit (1),
  4    35     2 cpu_type fixed bin (2) unsigned,			/* L68 = 0, DPS8/70M = 1 */
  4    36     2 ext_fault_reg bit (15),				/* extended fault reg for DPS8/70M CPU */
  4    37     2 fault_time bit (54),				/* time of fault */
  4    38 
  4    39     2 eis_info (0:7) bit (36)) unaligned;
  4    40 
  4    41 
  4    42 dcl (apx fixed bin init (0),
  4    43      abx fixed bin init (1),
  4    44      bpx fixed bin init (2),
  4    45      bbx fixed bin init (3),
  4    46      lpx fixed bin init (4),
  4    47      lbx fixed bin init (5),
  4    48      spx fixed bin init (6),
  4    49      sbx fixed bin init (7)) internal static options (constant);
  4    50 
  4    51 
  4    52 
  4    53 
  4    54 dcl  scup ptr;
  4    55 
  4    56 dcl 1 scu based (scup) aligned,			/* SCU DATA */
  4    57 
  4    58 
  4    59 /*	WORD (0)		*/
  4    60 
  4    61    (2 ppr,					/* PROCEDURE POINTER REGISTER */
  4    62       3 prr bit (3),				/* procedure ring register */
  4    63       3 psr bit (15),				/* procedure segment register */
  4    64       3 p bit (1),					/* procedure privileged bit */
  4    65 
  4    66     2 apu,					/* APPENDING UNIT STATUS */
  4    67       3 xsf bit (1),				/* ext seg flag - IT modification */
  4    68       3 sdwm bit (1),				/* match in SDW Ass. Mem. */
  4    69       3 sd_on bit (1),				/* SDW Ass. Mem.  ON */
  4    70       3 ptwm bit (1),				/* match in PTW Ass. Mem. */
  4    71       3 pt_on bit (1),				/* PTW Ass. Mem.  ON */
  4    72       3 pi_ap bit (1),				/* Instr Fetch or Append cycle */
  4    73       3 dsptw bit (1),				/* Fetch of DSPTW */
  4    74       3 sdwnp bit (1),				/* Fetch of SDW non paged */
  4    75       3 sdwp bit (1),				/* Fetch of SDW paged */
  4    76       3 ptw bit (1),				/* Fetch of PTW */
  4    77       3 ptw2 bit (1),				/* Fetch of pre-paged PTW */
  4    78       3 fap bit (1),				/* Fetch of final address paged */
  4    79       3 fanp bit (1),				/* Fetch of final address non-paged */
  4    80       3 fabs bit (1),				/* Fetch of final address absolute */
  4    81 
  4    82     2 fault_cntr bit (3),				/* number of retrys of EIS instructions */
  4    83 
  4    84 
  4    85 /*	WORD (1)		*/
  4    86 
  4    87     2 fd,						/* FAULT  DATA */
  4    88       3 iro bit (1),				/* illegal ring order */
  4    89       3 oeb bit (1),				/* out of execute bracket */
  4    90       3 e_off bit (1),				/* no execute */
  4    91       3 orb bit (1),				/* out of read bracket */
  4    92       3 r_off bit (1),				/* no read */
  4    93       3 owb bit (1),				/* out of write bracket */
  4    94       3 w_off bit (1),				/* no write */
  4    95       3 no_ga bit (1),				/* not a gate */
  4    96       3 ocb bit (1),				/* out of call bracket */
  4    97       3 ocall bit (1),				/* outward call */
  4    98       3 boc bit (1),				/* bad outward call */
  4    99       3 inret bit (1),				/* inward return */
  4   100       3 crt bit (1),				/* cross ring transfer */
  4   101       3 ralr bit (1),				/* ring alarm register */
  4   102       3 am_er bit (1),				/* associative memory fault */
  4   103       3 oosb bit (1),				/* out of segment bounds */
  4   104       3 paru bit (1),				/* processor parity upper */
  4   105       3 parl bit (1),				/* processor parity lower */
  4   106       3 onc_1 bit (1),				/* op not complete type 1 */
  4   107       3 onc_2 bit (1),				/* op not complete type 2 */
  4   108 
  4   109     2 port_stat,					/* PORT  STATUS */
  4   110       3 ial bit (4),				/* illegal action lines */
  4   111       3 iac bit (3),				/* illegal action channel */
  4   112       3 con_chan bit (3),				/* connect channel */
  4   113 
  4   114     2 fi_num bit (5),				/* (fault/interrupt)  number */
  4   115     2 fi_flag bit (1),				/*  1 => fault,  0 => interrupt  */
  4   116 
  4   117 
  4   118 /*	WORD (2)		*/
  4   119 
  4   120     2 tpr,					/* TEMPORARY POINTER REGISTER */
  4   121       3 trr bit (3),				/* temporary ring register */
  4   122       3 tsr bit (15),				/* temporary segment register */
  4   123 
  4   124     2 pad2 bit (9),
  4   125 
  4   126     2 cpu_no bit (3),				/* CPU number */
  4   127 
  4   128     2 delta bit (6),				/* tally modification DELTA */
  4   129 
  4   130 
  4   131 /*	WORD (3)		*/
  4   132 
  4   133     2 word3 bit (18),
  4   134 
  4   135     2 tsr_stat,					/* TSR STATUS for 1,2,&3 word instructions */
  4   136       3 tsna,					/* Word 1 status */
  4   137         4 prn bit (3),				/* Word 1  PR  number */
  4   138         4 prv bit (1),				/* Word 1  PR  valid bit */
  4   139       3 tsnb,					/* Word 2  status */
  4   140         4 prn bit (3),				/* Word 2  PR  number */
  4   141         4 prv bit (1),				/* Word 2  PR  valid bit */
  4   142       3 tsnc,					/* Word 3  status */
  4   143         4 prn bit (3),				/* Word 3  PR  number */
  4   144         4 prv bit (1),				/* Word 3  PR  valid bit */
  4   145 
  4   146     2 tpr_tbr bit (6),				/* TPR.TBR  field */
  4   147 
  4   148 
  4   149 /* 	WORD (4)		*/
  4   150 
  4   151     2 ilc bit (18),					/* INSTRUCTION  COUNTER */
  4   152 
  4   153     2 ir,						/* INDICATOR  REGISTERS */
  4   154       3 zero bit (1),				/* zero indicator */
  4   155       3 neg bit (1),				/* negative indicator */
  4   156       3 carry bit (1),				/* carryry indicator */
  4   157       3 ovfl bit (1),				/* overflow indicator */
  4   158       3 eovf bit (1),				/* eponent overflow */
  4   159       3 eufl bit (1),				/* exponent underflow */
  4   160       3 oflm bit (1),				/* overflow mask */
  4   161       3 tro bit (1),				/* tally runout */
  4   162       3 par bit (1),				/* parity error */
  4   163       3 parm bit (1),				/* parity mask */
  4   164       3 bm bit (1),					/* ^bar mode */
  4   165       3 tru bit (1),				/* truncation mode */
  4   166       3 mif bit (1),				/* multi-word instruction mode */
  4   167       3 abs bit (1),				/* absolute mode */
  4   168       3 hex bit (1),				/* hexadecimal exponent mode */
  4   169       3 pad bit (3),
  4   170 
  4   171 
  4   172 /*	WORD (5)		*/
  4   173 
  4   174     2 ca bit (18),					/* COMPUTED  ADDRESS */
  4   175 
  4   176     2 cu,						/* CONTROL UNIT STATUS */
  4   177       3 rf bit (1),					/* on first cycle of repeat instr */
  4   178       3 rpt bit (1),				/* repeat instruction */
  4   179       3 rd bit (1),					/* repeat double instruction */
  4   180       3 rl bit (1),					/* repeat link instruciton */
  4   181       3 pot bit (1),				/* IT  modification */
  4   182       3 pon bit (1),				/* return type instruction */
  4   183       3 xde bit (1),				/* XDE from Even location */
  4   184       3 xdo bit (1),				/* XDE from Odd  location */
  4   185       3 poa bit (1),				/* operation preparation */
  4   186       3 rfi bit (1),				/* tells CPU to refetch instruction */
  4   187       3 its bit (1),				/* ITS modification */
  4   188       3 if bit (1),					/* fault occured during instruction fetch */
  4   189 
  4   190     2 cpu_tag bit (6)) unaligned,			/* computed tag field */
  4   191 
  4   192 
  4   193 /*	WORDS (6,7)	*/
  4   194 
  4   195     2 even_inst bit (36),				/* even instruction of faulting pair */
  4   196 
  4   197     2 odd_inst bit (36);				/* odd  instruction of faulting pair */
  4   198 
  4   199 
  4   200 
  4   201 
  4   202 
  4   203 
  4   204 /*	ALTERNATE   SCU  DECLARATION		*/
  4   205 
  4   206 
  4   207 dcl 1 scux based (scup) aligned,
  4   208 
  4   209    (2 pad0 bit (36),
  4   210 
  4   211     2 fd,						/* GROUP II  FAULT DATA */
  4   212       3 isn bit (1),				/* illegal segment number */
  4   213       3 ioc bit (1),				/* illegal op  code  */
  4   214       3 ia_am bit (1),				/* illegal address - modifier */
  4   215       3 isp bit (1),				/* illegal slave  procedure */
  4   216       3 ipr bit (1),				/* illegal procedure */
  4   217       3 nea bit (1),				/* non existent address */
  4   218       3 oobb bit (1),				/* out of bounds */
  4   219       3 pad bit (29),
  4   220 
  4   221     2 pad2 bit (36),
  4   222 
  4   223     2 pad3a bit (18),
  4   224 
  4   225     2 tsr_stat (0:2),				/* TSR  STATUS  as an  ARRAY */
  4   226       3 prn bit (3),				/* PR  number */
  4   227       3 prv bit (1),				/* PR  valid bit */
  4   228 
  4   229     2 pad3b bit (6)) unaligned,
  4   230 
  4   231     2 pad45 (0:1) bit (36),
  4   232 
  4   233     2 instr (0:1) bit (36);				/* Instruction ARRAY */
  4   234 
  4   235 
  4   236 
  4   237 /*  END INCLUDE FILE   mc.incl.pl1 */
      174 
      175  /* BEGIN INCLUDE FILE .. syserr_binary_def.incl.pl1 */
  5     2 
  5     3 /* This include file has an ALM version, keep 'em in sync. */
  5     4 
  5     5 /* format: off */
  5     6 
  5     7 /* Modified January 1984 by Paul Farley to add an array of entry values
  5     8*   to be examined by display_cpu_error. */
  5     9 /* Modified October 1984 by EJ Sharpe to include SB_audit_message */
  5    10 /* Modified January 1985 by EJ Sharpe for SB_char_data_classes */
  5    11 /* Modified 1985-01-25, BIM: added ring alarm audit support. */
  5    12 /* Modified 1985-02-20, EJ Sharpe: added SB_ibm3270_mde, syserr_binary_(seg vol)damage_class,
  5    13*		also changed some codes to "SB_unused_NN" - see line comments */
  5    14 
  5    15 /* In the future, these will be the only constants needed in this include
  5    16*file.  They are the binary data class strings for messages in the new format
  5    17*syserr logs.  The names are all of the form SB_ZZZZZZZ_data_class where
  5    18*ZZZZZZZ is the value of the data class string.  Message expanders are named
  5    19*expand_ZZZZZZZ_msg_ and are referenced by the log perusal tools. */
  5    20 
  5    21 dcl (						/* include file name */
  5    22 SB_io_status_data_class	init ("io_status"),		/* io_syserr_msg */
  5    23 SB_hwfault_data_class	init ("hwfault"),		/* syserr_fault_msg */
  5    24 SB_mos_data_class		init ("mos"),		/* scr */
  5    25 SB_segdamage_data_class	init ("segdamage"),		/* segdamage_msg */
  5    26 SB_voldamage_data_class	init ("voldamage"),		/* segdamage_msg (first two words) */
  5    27 SB_mdc_del_uidpath_data_class	init ("mdc_del_uidpath"),	/* none - 16 word UID path */
  5    28 SB_mmdam_data_class		init ("mmdam"),		/* syserr_mmdam_msg */
  5    29 SB_mpc_poll_data_class	init ("mpc_poll"),		/* poll_mpc_data */
  5    30 SB_fnp_poll_data_class	init ("fnp_poll"),		/* poll_fnp_data */
  5    31 SB_config_deck_data_class	init ("config_deck"),	/* config_deck */
  5    32 SB_vtoce_data_class		init ("vtoce"),		/* vtoce */
  5    33 SB_access_audit_data_class	init ("access_audit"),	/* access_audit_bin_header */
  5    34 SB_ibm3270_mde_data_class	init ("ibm3270_mde")	/* ibm3270_mpx_data */
  5    35 ) static internal char (16) varying options (constant);
  5    36 
  5    37 
  5    38 /************************
  5    39*Once the syserr$binary is replaced with something that takes real data classes
  5    40*and all system modules and tools are upgraded to use the new interface, the
  5    41*rest of this include file may be discarded.
  5    42*************************/
  5    43 
  5    44 /* The limit of 36 is arbitrary- there is no reason that it can not be
  5    45*   extended at any time. */
  5    46 
  5    47 dcl (
  5    48 SB_disk_err	init (1),		SBL_disk_err	init (5),
  5    49 SB_hw_fault	init (2),		SBL_hw_fault	init (176),
  5    50 SB_io_err		init (3),		SBL_io_err	init (5),
  5    51 SB_unused_4	init (4),		SBL_unused_4	init (1),	/* was "mos_poll" (mos poll time) */
  5    52 SB_mos_err	init (5),		SBL_mos_err	init (2),	/* mos memory error data */
  5    53 SB_unused_6	init (6),		SBL_unused_6	init (1),	/* was "bulk_status" (bulk dcb status) */
  5    54 SB_unused_7	init (7),		SBL_unused_7	init (1), /* was "bulk_csb" (bulk csb status) */
  5    55 SB_unused_8	init (8),		SBL_unused_8	init (3), /* was "free_st_1" */
  5    56 SB_unused_9	init (9),		SBL_unused_9	init (2), /* was "free_st_2" */
  5    57 SB_unused_10	init (10),	SBL_unused_10	init (21), /* was "unpr_add" */
  5    58 SB_zerpag		init (11),	SBL_zerpag	init (20),
  5    59 SB_unused_12	init (12),	SBL_unused_12	init (20), /* was "unpr_add" */
  5    60 SB_vtoc_salv_dam	init (13),	SBL_vtoc_salv_dam	init (20),
  5    61 SB_unused_14	init (14),	SBL_unused_14	init (20), /* was "page_rw_err" */
  5    62 SB_unused_15	init (15),	SBL_unused_15	init (3), /* was "ruad" */
  5    63 SB_random_segdamage	init (16),	SBL_random_segdamage init (20),
  5    64 SB_read_nc	init (17),	SBL_read_nc	init (2),
  5    65 SB_unused_18	init (18),	SBL_unused_18	init (2), /* was "vtoc_err" */
  5    66 SB_mdc_del_uidpath	init (19),	SBL_mdc_del_uidpath	init (16),
  5    67 SB_ocdcm_err	init (20),	SBL_ocdcm_err	init (5),
  5    68 SB_mmdam		init (21),	SBL_mmdam		init (2),
  5    69 SB_verify_lock	init (22),	SBL_verify_lock	init (176),
  5    70 SB_io_err_detail	init (23),	SBL_io_err_detail	init (11),
  5    71 SB_mpc_poll	init (24),	SBL_mpc_poll	init (256) /* max */,
  5    72 SB_fnp_poll	init (25),	SBL_fnp_poll	init (256) /* max */,
  5    73 SB_config_deck	init (26),	SBL_config_deck	init (256) /* 16 cards at 16 words */,
  5    74 SB_vtoce		init (27),	SBL_vtoce		init (192),    /* 1 VTOCE */
  5    75 SB_access_audit	init (28),	SBL_access_audit	init (256), /* max */
  5    76 SB_ibm3270_mde	init (35),	SBL_ibm3270_mde	init (256), /* max */
  5    77 SB_end_of_table	init (36),	SBL_end_of_table	init (1)
  5    78   ) internal static options (constant) fixed bin;
  5    79 
  5    80 
  5    81 /* The following array is a mapping of the old syserr$binary codes into the
  5    82*new data classes for MR11.  It is primarily used by syserr_copy to translate
  5    83*the binary data codes stored in the wired syserr log (see above) into the data
  5    84*classes needed by the ring-0 paged syserr log which is a new format log.  It
  5    85*is also used by syserr_log_util_ to translate the data classes back into the
  5    86*corresponding binary code (for tools not yet upgraded to deal with the new
  5    87*format log messages). */
  5    88 
  5    89 dcl SB_char_data_classes (36) char (16) varying internal static options (constant)
  5    90 	init (	"io_status",		/* 1 */
  5    91 		"hwfault",		/* 2 */
  5    92 		"io_status",		/* 3 */
  5    93 		"unused_4",		/* 4 */
  5    94 		"mos",			/* 5 */
  5    95 
  5    96 		"unused_6",		/* 6 */
  5    97 		"unused_7",		/* 7 */
  5    98 		"unused_8",		/* 8 */
  5    99 		"unused_9",		/* 9 */ 
  5   100 		"unused_10",		/* 10 */
  5   101 
  5   102 		"segdamage",		/* 11 */
  5   103 		"unused_12",		/* 12 */
  5   104 		"segdamage",		/* 13 */
  5   105 		"unused_14",		/* 14 */
  5   106 		"unused_15",		/* 15 */
  5   107 
  5   108 		"segdamage",		/* 16 */
  5   109 		"voldamage",		/* 17 */
  5   110 		"unused_18",		/* 18 */
  5   111 		"mdc_del_uidpath",		/* 19 */
  5   112 		"io_status",		/* 20 */
  5   113 
  5   114 		"mmdam",			/* 21 */
  5   115 		"hwfault",		/* 22 */
  5   116 		"io_status",		/* 23 */
  5   117 		"mpc_poll",		/* 24 */
  5   118 		"fnp_poll",		/* 25 */
  5   119 
  5   120 		"config_deck",		/* 26 */
  5   121 		"vtoce",			/* 27 */
  5   122 		"access_audit",		/* 28 */
  5   123 		"unused_29",		/* 29 */
  5   124 		"unused_30",		/* 30 */
  5   125 		"unused_31",		/* 31 */
  5   126 		"unused_32",		/* 32 */
  5   127 		"unused_33",		/* 33 */
  5   128 		"unused_34",		/* 34 */
  5   129 		"ibm3270_mde",		/* 35 */
  5   130 		"unused_36"		/* 36 */
  5   131 	);
  5   132 
  5   133 
  5   134 /* format: on */
  5   135 
  5   136 /* These constants are used by various tools which analyze syserr messages and
  5   137*still call the old interface "syserr_log_util_". */
  5   138 
  5   139      dcl	   syserr_binary_mos_mask init ("060000000000"b3) bit (36) static options (constant);
  5   140      dcl	   syserr_binary_seg_damage_mask init ("000374000000"b3) bit (36) static options (constant);
  5   141      dcl	   syserr_binary_vol_damage_mask init ("003413000000"b3) bit (36) static options (constant);
  5   142      dcl	   syserr_binary_address_damage_mask init ("002010000000"b3) bit (36) static options (constant);
  5   143 
  5   144      dcl	   display_cpu_error_binary_defs (2) init (
  5   145 			      2,			/** SB_hw_fault */
  5   146 			      22			/** SB_verify_lock */
  5   147 			      ) internal static options (constant) fixed bin;
  5   148 
  5   149 /* END INCLUDE FILE syserr_binary_def.incl.pl1 */
      175 
      176  
  6     2 /* Begin include file ...... syserr_fault_msg.incl.pl1
  6     3*	Modified 1985-02-21, EJ Sharpe: changed mach_cond to be "like mc"
  6     4*	Modified 8/12/76 by Noel I. Morris	*/
  6     5 
  6     6 
  6     7 /* This include file defines the format of the syserr message
  6     8*   generated on faults handled by various modules.
  6     9*NOTE: program must also include "mc". */
  6    10 
  6    11 dcl  fmsgp ptr;					/* pointer to structure */
  6    12 
  6    13 dcl 1 fault_msg based (fmsgp) aligned,
  6    14     2 mach_cond like mc,				/* machine conditions */
  6    15     2 hist_reg (0:127) bit (36);			/* history registers */
  6    16 		/* someday the hist_reg should be increased to 256 wds to accomodate all DPS8 data */
  6    17 
  6    18 /* End of include file ...... syserr_fault_msg.incl.pl1 */
  6    19 
      176 
      177 
      178           end expand_hwfault_msg_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    03/13/85  1026.6  expand_hwfault_msg_.pl1           >spec>on>41-11>expand_hwfault_msg_.pl1
171          1    01/21/85  0912.2  log_message.incl.pl1              >ldd>include>log_message.incl.pl1
172          2    01/21/85  0912.2  log_message_format.incl.pl1       >ldd>include>log_message_format.incl.pl1
173          3    11/26/79  1320.6  its.incl.pl1                      >ldd>include>its.incl.pl1
174          4    12/15/83  1100.4  mc.incl.pl1                       >ldd>include>mc.incl.pl1
175          5    03/12/85  1556.6  syserr_binary_def.incl.pl1        >spec>on>41-11>syserr_binary_def.incl.pl1
176          6    03/12/85  1556.6  syserr_fault_msg.incl.pl1         >spec>on>41-11>syserr_fault_msg.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
NEWLINE                         001450 constant        char(1)                  initial dcl 39 ref 83 95 163
P_code                                 parameter       fixed bin(35,0)          dcl 28 set ref 45 54* 63 74*
P_cpu_type                             parameter       bit(9)                   unaligned dcl 133 ref 129 136 142 146
P_expand_mode_ptr                      parameter       pointer                  dcl 26 set ref 45 54* 63 74*
P_expansion                            parameter       varying char             dcl 27 set ref 45 54* 63 74* 82* 82 83* 83 93* 93
                                                                                  95* 95 98* 98 103* 103 106* 106 162* 162 163* 163
                                                                                  165*
P_hreg_ptr                             parameter       pointer                  dcl 132 ref 129 136 136 138 138 140 140 142 142 144
                                                                                  144 146 146 148 148
P_log_message_format_ptr               parameter       pointer                  dcl 24 set ref 45 54* 63 74* 165*
P_log_message_ptr                      parameter       pointer                  dcl 25 ref 45 48 63 66
P_scu_ptr                              parameter       pointer                  dcl 121 set ref 118 123*
P_title                                parameter       char                     unaligned dcl 157 ref 154 162
P_words_count                          parameter       fixed bin(17,0)          dcl 159 set ref 154 165*
P_words_ptr                            parameter       pointer                  dcl 158 set ref 154 165*
SB_hw_fault                            constant        fixed bin(17,0)          initial dcl 5-47 ref 70
SB_verify_lock                         constant        fixed bin(17,0)          initial dcl 5-47 ref 70
a                        24            based           bit(36)                  level 4 packed unaligned dcl 6-13 set ref 100*
addr                                                   builtin function         dcl 42 ref 50 68 86 108 108 110 110 112 112 112
addrel                                                 builtin function         dcl 42 ref 136 136 138 138 140 140 142 142 144 144
                                                                                  146 146 148 148
binary                                                 builtin function         dcl 42 ref 70 70
bit_offset                1(21)        based           fixed bin(6,0)           level 2 packed unsigned unaligned dcl 3-30 set ref
                                                                                  87* 87
data                                   based           bit(36)                  array level 2 dcl 1-13 set ref 50 52 68 70 70 70
data_class_lth            2(09)        based           fixed bin(9,0)           level 3 packed unsigned unaligned dcl 1-13 ref 50 52
                                                                                  68 70 70 70
data_lth                  4(18)        based           fixed bin(17,0)          level 3 packed unaligned dcl 1-13 ref 52 70
dimension                                              builtin function         dcl 42 ref 52 70
e                        26            based           bit(8)                   level 4 packed unaligned dcl 6-13 ref 100
eis_info                 50            based           bit(36)                  array level 3 packed unaligned dcl 6-13 set ref 110
                                                                                  110
expand_log_message_$append_octal
                                000010 constant        entry                    external dcl 34 ref 165
expand_log_message_$unknown     000014 constant        entry                    external dcl 36 ref 54
expand_log_message_$unknown_syserr
                                000012 constant        entry                    external dcl 35 ref 74
fault_msg                              based           structure                level 1 dcl 6-13 set ref 52 70
fault_reg                45            based           bit(36)                  level 3 packed unaligned dcl 6-13 set ref 105*
fmsgp                           001072 automatic       pointer                  dcl 6-11 set ref 50* 52 68* 70 86 97 100 100 100 100
                                                                                  100 105 108 108 110 110 112 112 112
header                                 based           structure                level 2 dcl 1-13
hist_reg                 60            based           bit(36)                  array level 2 dcl 6-13 set ref 112 112
ioa_$rsnnl                      000016 constant        entry                    external dcl 37 ref 87 97 100 105
its                                    based           structure                level 1 dcl 3-5
its_unsigned                           based           structure                level 1 dcl 3-30
log_message                            based           structure                level 1 dcl 1-13
log_message_header                     based           structure                level 1 dcl 1-3
log_message_ptr                 001070 automatic       pointer                  dcl 1-19 set ref 48* 50 52 54* 66* 68 70 70 70 74*
mach_cond                              based           structure                level 2 dcl 6-13
mc                                     based           structure                level 1 dcl 4-12
offset                    1            based           bit(18)                  level 2 packed unaligned dcl 3-5 set ref 87*
pad2                      2(18)        based           bit(9)                   level 2 packed unaligned dcl 4-56 ref 112
prs                                    based           pointer                  array level 3 dcl 6-13 set ref 86
ptr_idx                         001065 automatic       fixed bin(17,0)          dcl 31 set ref 85* 86*
ptr_ptr                         001066 automatic       pointer                  dcl 32 set ref 86* 87 87 87 87 87
q                        25            based           bit(36)                  level 4 packed unaligned dcl 6-13 set ref 100*
ralr                     27(33)        based           bit(3)                   level 4 packed unaligned dcl 6-13 set ref 100*
regs                     20            based           structure                level 3 packed unaligned dcl 6-13
ringno                    0(18)        based           fixed bin(3,0)           level 2 packed unsigned unaligned dcl 3-30 set ref
                                                                                  87*
scu                                    based           structure                level 1 dcl 4-56 in procedure "expand_hwfault_msg_"
scu                      30            based           bit(36)                  array level 3 in structure "fault_msg" packed
                                                                                  unaligned dcl 6-13 in procedure
                                                                                  "expand_hwfault_msg_" set ref 108 108 112
segno                     0(03)        based           fixed bin(15,0)          level 2 packed unsigned unaligned dcl 3-30 set ref
                                                                                  87*
size                                                   builtin function         dcl 42 ref 52 70
t                        27            based           bit(27)                  level 4 packed unaligned dcl 6-13 set ref 100*
temp                            000100 automatic       varying char(2000)       dcl 30 set ref 87* 93 97* 98 100* 103 105* 106
text_lth                  4            based           fixed bin(17,0)          level 3 packed unaligned dcl 1-13 ref 50 52 68 70 70
                                                                                  70
x                        20            based           bit(18)                  array level 4 packed unaligned dcl 6-13 set ref 97*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
ITP_MODIFIER                           internal static bit(6)                   initial unaligned dcl 3-56
ITS_MODIFIER                           internal static bit(6)                   initial unaligned dcl 3-55
SBL_access_audit                       internal static fixed bin(17,0)          initial dcl 5-47
SBL_config_deck                        internal static fixed bin(17,0)          initial dcl 5-47
SBL_disk_err                           internal static fixed bin(17,0)          initial dcl 5-47
SBL_end_of_table                       internal static fixed bin(17,0)          initial dcl 5-47
SBL_fnp_poll                           internal static fixed bin(17,0)          initial dcl 5-47
SBL_hw_fault                           internal static fixed bin(17,0)          initial dcl 5-47
SBL_ibm3270_mde                        internal static fixed bin(17,0)          initial dcl 5-47
SBL_io_err                             internal static fixed bin(17,0)          initial dcl 5-47
SBL_io_err_detail                      internal static fixed bin(17,0)          initial dcl 5-47
SBL_mdc_del_uidpath                    internal static fixed bin(17,0)          initial dcl 5-47
SBL_mmdam                              internal static fixed bin(17,0)          initial dcl 5-47
SBL_mos_err                            internal static fixed bin(17,0)          initial dcl 5-47
SBL_mpc_poll                           internal static fixed bin(17,0)          initial dcl 5-47
SBL_ocdcm_err                          internal static fixed bin(17,0)          initial dcl 5-47
SBL_random_segdamage                   internal static fixed bin(17,0)          initial dcl 5-47
SBL_read_nc                            internal static fixed bin(17,0)          initial dcl 5-47
SBL_unused_10                          internal static fixed bin(17,0)          initial dcl 5-47
SBL_unused_12                          internal static fixed bin(17,0)          initial dcl 5-47
SBL_unused_14                          internal static fixed bin(17,0)          initial dcl 5-47
SBL_unused_15                          internal static fixed bin(17,0)          initial dcl 5-47
SBL_unused_18                          internal static fixed bin(17,0)          initial dcl 5-47
SBL_unused_4                           internal static fixed bin(17,0)          initial dcl 5-47
SBL_unused_6                           internal static fixed bin(17,0)          initial dcl 5-47
SBL_unused_7                           internal static fixed bin(17,0)          initial dcl 5-47
SBL_unused_8                           internal static fixed bin(17,0)          initial dcl 5-47
SBL_unused_9                           internal static fixed bin(17,0)          initial dcl 5-47
SBL_verify_lock                        internal static fixed bin(17,0)          initial dcl 5-47
SBL_vtoc_salv_dam                      internal static fixed bin(17,0)          initial dcl 5-47
SBL_vtoce                              internal static fixed bin(17,0)          initial dcl 5-47
SBL_zerpag                             internal static fixed bin(17,0)          initial dcl 5-47
SB_access_audit                        internal static fixed bin(17,0)          initial dcl 5-47
SB_access_audit_data_class             internal static varying char(16)         initial dcl 5-21
SB_char_data_classes                   internal static varying char(16)         initial array dcl 5-89
SB_config_deck                         internal static fixed bin(17,0)          initial dcl 5-47
SB_config_deck_data_class              internal static varying char(16)         initial dcl 5-21
SB_disk_err                            internal static fixed bin(17,0)          initial dcl 5-47
SB_end_of_table                        internal static fixed bin(17,0)          initial dcl 5-47
SB_fnp_poll                            internal static fixed bin(17,0)          initial dcl 5-47
SB_fnp_poll_data_class                 internal static varying char(16)         initial dcl 5-21
SB_hwfault_data_class                  internal static varying char(16)         initial dcl 5-21
SB_ibm3270_mde                         internal static fixed bin(17,0)          initial dcl 5-47
SB_ibm3270_mde_data_class              internal static varying char(16)         initial dcl 5-21
SB_io_err                              internal static fixed bin(17,0)          initial dcl 5-47
SB_io_err_detail                       internal static fixed bin(17,0)          initial dcl 5-47
SB_io_status_data_class                internal static varying char(16)         initial dcl 5-21
SB_mdc_del_uidpath                     internal static fixed bin(17,0)          initial dcl 5-47
SB_mdc_del_uidpath_data_class          internal static varying char(16)         initial dcl 5-21
SB_mmdam                               internal static fixed bin(17,0)          initial dcl 5-47
SB_mmdam_data_class                    internal static varying char(16)         initial dcl 5-21
SB_mos_data_class                      internal static varying char(16)         initial dcl 5-21
SB_mos_err                             internal static fixed bin(17,0)          initial dcl 5-47
SB_mpc_poll                            internal static fixed bin(17,0)          initial dcl 5-47
SB_mpc_poll_data_class                 internal static varying char(16)         initial dcl 5-21
SB_ocdcm_err                           internal static fixed bin(17,0)          initial dcl 5-47
SB_random_segdamage                    internal static fixed bin(17,0)          initial dcl 5-47
SB_read_nc                             internal static fixed bin(17,0)          initial dcl 5-47
SB_segdamage_data_class                internal static varying char(16)         initial dcl 5-21
SB_unused_10                           internal static fixed bin(17,0)          initial dcl 5-47
SB_unused_12                           internal static fixed bin(17,0)          initial dcl 5-47
SB_unused_14                           internal static fixed bin(17,0)          initial dcl 5-47
SB_unused_15                           internal static fixed bin(17,0)          initial dcl 5-47
SB_unused_18                           internal static fixed bin(17,0)          initial dcl 5-47
SB_unused_4                            internal static fixed bin(17,0)          initial dcl 5-47
SB_unused_6                            internal static fixed bin(17,0)          initial dcl 5-47
SB_unused_7                            internal static fixed bin(17,0)          initial dcl 5-47
SB_unused_8                            internal static fixed bin(17,0)          initial dcl 5-47
SB_unused_9                            internal static fixed bin(17,0)          initial dcl 5-47
SB_voldamage_data_class                internal static varying char(16)         initial dcl 5-21
SB_vtoc_salv_dam                       internal static fixed bin(17,0)          initial dcl 5-47
SB_vtoce                               internal static fixed bin(17,0)          initial dcl 5-47
SB_vtoce_data_class                    internal static varying char(16)         initial dcl 5-21
SB_zerpag                              internal static fixed bin(17,0)          initial dcl 5-47
abx                                    internal static fixed bin(17,0)          initial dcl 4-42
apx                                    internal static fixed bin(17,0)          initial dcl 4-42
bbx                                    internal static fixed bin(17,0)          initial dcl 4-42
bpx                                    internal static fixed bin(17,0)          initial dcl 4-42
display_cpu_error_binary_defs          internal static fixed bin(17,0)          initial array dcl 5-144
itp                                    based           structure                level 1 dcl 3-18
itp_unsigned                           based           structure                level 1 dcl 3-43
lbx                                    internal static fixed bin(17,0)          initial dcl 4-42
log_message_data_class_lth             automatic       fixed bin(17,0)          dcl 1-21
log_message_data_lth                   automatic       fixed bin(17,0)          dcl 1-22
log_message_format                     based           structure                level 1 dcl 2-3
log_message_format_ptr                 automatic       pointer                  dcl 2-30
log_message_text_lth                   automatic       fixed bin(17,0)          dcl 1-20
lpx                                    internal static fixed bin(17,0)          initial dcl 4-42
mcp                                    automatic       pointer                  dcl 4-10
sbx                                    internal static fixed bin(17,0)          initial dcl 4-42
scup                                   automatic       pointer                  dcl 4-54
scux                                   based           structure                level 1 dcl 4-207
spx                                    internal static fixed bin(17,0)          initial dcl 4-42
syserr_binary_address_damage_mask      internal static bit(36)                  initial unaligned dcl 5-142
syserr_binary_mos_mask                 internal static bit(36)                  initial unaligned dcl 5-139
syserr_binary_seg_damage_mask          internal static bit(36)                  initial unaligned dcl 5-140
syserr_binary_vol_damage_mask          internal static bit(36)                  initial unaligned dcl 5-141

NAMES DECLARED BY EXPLICIT CONTEXT.
add_history_registers           001051 constant        entry                    internal dcl 129 ref 112
add_scu_data                    001016 constant        entry                    internal dcl 118 ref 108
add_words                       001244 constant        entry                    internal dcl 154 ref 110 123 136 138 140 142 144 146
                                                                                  148
expand_hwfault_msg_             000154 constant        entry                    external dcl 9
expand_hwfault_msg_$format      000167 constant        entry                    external dcl 45
expand_hwfault_msg_$syserr      000263 constant        entry                    external dcl 63
expand_normal_hwfault           000372 constant        entry                    internal dcl 79 ref 52 70

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1574        1614    1451        1604
Length      2116    1451        20         265     123           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
expand_hwfault_msg_                 754 external procedure  is an external procedure.  
expand_normal_hwfault                   internal procedure  shares stack frame of external procedure expand_hwfault_msg_.  
add_scu_data                            internal procedure  shares stack frame of external procedure expand_hwfault_msg_.  
add_history_registers                   internal procedure  shares stack frame of external procedure expand_hwfault_msg_.  
add_words                               internal procedure  shares stack frame of external procedure expand_hwfault_msg_.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
expand_hwfault_msg_      000100 temp                        expand_hwfault_msg_
                         001065 ptr_idx                     expand_hwfault_msg_
                         001066 ptr_ptr                     expand_hwfault_msg_
                         001070 log_message_ptr             expand_hwfault_msg_
                         001072 fmsgp                       expand_hwfault_msg_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_l_a               call_ext_out_desc   return              ext_entry           ext_entry_desc

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
expand_log_message_$append_octal                            expand_log_message_$unknown
expand_log_message_$unknown_syserr                          ioa_$rsnnl

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
      9 000153        45 000161        48 000202        50 000206        52 000222        54 000231        57 000260
     63 000261        66 000276        68 000302        70 000316        74 000341        77 000371        79 000372
     82 000373        83 000407        85 000416        86 000423        87 000426        93 000516        94 000532
     95 000534        97 000545        98 000602       100 000616       103 000675       105 000711       106 000746
    108 000762       110 000767       112 001003       114 001015       118 001016       123 001020       125 001050
    129 001051       136 001053       138 001075       140 001114       142 001134       144 001157       146 001176
    148 001224       150 001243       154 001244       162 001255       163 001273       165 001302       167 001327


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
