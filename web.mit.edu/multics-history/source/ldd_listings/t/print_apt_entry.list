	COMPILATION LISTING OF SEGMENT print_apt_entry
	Compiled by: Multics PL/I Compiler, Release 30, of February 16, 1988
	Compiled at: Honeywell Bull, Phoenix AZ, SysM
	Compiled on: 08/22/88  1301.8 mst Mon
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Bull Inc., 1987                *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        6*        *                                                         *
        7*        * Copyright (c) 1972 by Massachusetts Institute of        *
        8*        * Technology and Honeywell Information Systems, Inc.      *
        9*        *                                                         *
       10*        *********************************************************** */
       11 
       12 /* DESCRIPTION:
       13*   Prints the apt entry.
       14**/
       15 
       16 /****^ HISTORY:
       17*Written by unknown, sometime.
       18*Modified:
       19*06/01/78 by T. Casey:  to add several new control args, print more info
       20*            for -brief, and always print channel and person.
       21*06/01/81 by T. Casey:  to fix it up for installation, and add process_id
       22*            active function.
       23*11/01/81 by E. N. Kittlitz:  user_table_entry conversion.
       24*06/30/83 by E. A. Ranzenbach:  for processor subset changes.
       25*07/30/84 by R. Michael Tague:  IPS name lengths were changed from 4 chars to
       26*            32.  Added dm_shutdown_warning_ and dm_user_shutdown_ signals.
       27*08/22/84 by R. Michael Tague:  Removed dm_shutdown_warning_ and
       28*            dm_user_shutdown_ IPS signals.  Added system_shutdown_scheduled_
       29*            and dm_shutdown_scheduled_ IPS signals.
       30*   Modified November 1984 by M. Pandolf to include hc_lock.
       31*
       32*   12/10/84 by E. Swenson for new IPC variables.
       33**/
       34 
       35 
       36 /****^  HISTORY COMMENTS:
       37*  1) change(87-04-26,GDixon), approve(87-07-13,MCR7741),
       38*     audit(87-07-24,Brunelle), install(87-08-04,MR12.1-1055):
       39*     Upgraded for change to answer_table.incl.pl1 and user_table_entry.incl.pl1
       40*  2) change(87-07-24,GDixon), approve(87-07-24,MCR7741),
       41*     audit(87-07-24,Brunelle), install(87-08-04,MR12.1-1055):
       42*      A) Correct stringsize errors.
       43*  3) change(87-11-03,GDixon), approve(88-08-08,MCR7960),
       44*     audit(88-08-09,Lippard), install(88-08-22,MR12.2-1088):
       45*      A) Add process lock-id to normal pae output, to aid in debugging locking
       46*         problems.  (phx13768)
       47*      B) Avoid referencing apte elements via the f array; reference them by
       48*         name instead.  Use the f array only to display the apte in octal.
       49*      C) Split lengthy output lines to avoid breaking across line boundary.
       50*  4) change(88-07-26,Lippard), approve(88-08-08,MCR7960),
       51*     audit(88-08-16,Farley), install(88-08-22,MR12.2-1088):
       52*      Use user's default time zone instead of system default. (Hardcore
       53*      1014, 1026).  Make pae -absentee print APTEs for the user's absentee
       54*      processes (instead of the user's own APTE). (Hardcore 1061)
       55*                                                   END HISTORY COMMENTS */
       56 
       57 
       58 /* format: style4 */
       59 
       60 print_apt_entry: pae: proc;
       61 
       62 /* DECLARATIONS */
       63 
       64 /* Automatic and based variables */
       65 
       66 /* based, and pointers, lengths, and things they're based on */
       67 
       68 dcl  ap ptr;
       69 dcl  al fixed bin;
       70 dcl  bchr char (al) based (ap);
       71 
       72 dcl  f (0:size (apte) - 1) fixed bin (35) based (aptep);
       73 
       74 dcl  proc_id bit (36) aligned;
       75 dcl  procid fixed bin (35) aligned based (addr (proc_id));
       76 
       77 dcl  temp_date_time char (16);			/* mm/dd/yy  HHMM.M */
       78 dcl  temp_date char (8) based (addr (temp_date_time));	/* mm/dd/yy */
       79 
       80 dcl  first_17_flags (17) bit (1) unaligned based (addr (apte.flags));
       81 dcl  flag18 bit (1) unaligned based (addr (apte.flags.firstsw));
       82 
       83 dcl  return_ptr ptr;
       84 dcl  return_len fixed bin;
       85 dcl  return_string char (return_len) varying based (return_ptr); /* active function return string */
       86 
       87 /* switches */
       88 
       89 dcl  display_mode fixed bin init (2);			/* 0= -no_display, 1= -brief_display, 2= -display */
       90 
       91 dcl  (af_sw, apte_offset_sw, as_sw, chn_sw, dmn_sw, dump_sw, ia_sw, id_sw, multiple_sw,
       92      pae_sw, pdir_sw, pid_sw, process_id_sw, short_sw, term_channel_sw, user_sw) bit (1) aligned init (""b);
       93 
       94 /* fixed bin */
       95 
       96 dcl  (total_matched, this_id_matched) fixed bin;
       97 
       98 dcl  argno fixed bin;
       99 dcl  nargs fixed bin;
      100 dcl  ids fixed bin init (0);
      101 dcl  code fixed bin (35);
      102 dcl  i fixed bin;
      103 dcl  apte_offset fixed bin (18);
      104 
      105 dcl  alrm fixed bin (71);
      106 dcl  now fixed bin (71);
      107 dcl  cpu_mon fixed bin (71) init (0);
      108 
      109 /* character strings */
      110 
      111 dcl  pers char (24);
      112 dcl  proj char (12);
      113 dcl  tag char (1);
      114 dcl  channel char (32);
      115 
      116 dcl  pers_arg char (23) varying;
      117 dcl  proj_arg char (10) varying;
      118 dcl  tag_arg char (2) varying;
      119 
      120 dcl  today char (8);
      121 dcl  c32 char (32);
      122 dcl  (flags, ips_pending) char (256) varying init ("");
      123 dcl  segname char (32);
      124 dcl  me char (16);
      125 
      126 /* structures */
      127 
      128 dcl  1 tc_data like apte aligned;			/* place in stack to put one APTE */
      129 
      130 
      131 /* Internal static constants */
      132 
      133 dcl  state_names (0:6) char (8) int static options (constant) init
      134 	("Empty", "Running", "Ready", "Waiting", "Blocked", "Stopped", "Ptl_wait");
      135 dcl  flag_names (17) char (16) int static options (constant) init
      136 	("mbz1", "wakeup_waiting", "stop_pending", "pre-empted", "hproc", "loaded", "eligible", "idle", "interaction",
      137 	"pre-empt_pending", "default_proc_set", "realtime_burst", "always_loaded", "dbr_loaded", "being_loaded", "shared_stack_0", "page_wait");
      138 
      139 dcl  sysdir char (168) int static options (constant) init (">system_control_1");
      140 dcl  CAPS char (26) int static options (constant) init ("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
      141 
      142 /* Internal static variables */
      143 
      144 dcl  apte1_offset fixed bin int static init (0);
      145 dcl  (static_ansp, static_dutp, tcdp0, static_autp) ptr static;
      146 dcl  (tables_initiated, tcd_initiated) bit (1) aligned int static init (""b);
      147 
      148 /* External static variables */
      149 
      150 dcl  error_table_$badopt ext fixed bin (35);
      151 dcl  error_table_$inconsistent ext fixed bin (35);
      152 dcl  error_table_$not_act_fnc ext fixed bin (35);
      153 
      154 /* Entries, external constant, and variable */
      155 
      156 dcl  err_proc variable entry options (variable);		/* com_err_ or active_fnc_err_ */
      157 
      158 dcl  active_fnc_err_ entry options (variable);
      159 dcl  com_err_ entry options (variable);
      160 dcl  cu_$af_return_arg entry (fixed bin, ptr, fixed bin, fixed bin (35));
      161 dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
      162 dcl  cv_oct_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
      163 dcl  date_time_ entry (fixed bin (71), char (*));
      164 dcl  date_time_$format entry (char (*), fixed bin (71), char (*), char (*)) returns (char (250) var);
      165 dcl  get_group_id_ entry returns (char (32));
      166 dcl  get_line_length_$switch entry (ptr, fixed bin (35)) returns (fixed bin);
      167 dcl  get_process_id_ entry returns (bit (36));
      168 dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
      169 dcl  ioa_ entry options (variable);
      170 dcl  ioa_$rsnnl entry options (variable);
      171 dcl  match_star_name_ entry (char (*), char (*), fixed bin (35));
      172 dcl  ring0_get_$segptr entry (char (*) aligned, char (*) aligned, ptr, fixed bin (35));
      173 dcl  ring_zero_peek_ entry (ptr, ptr, fixed bin, fixed bin (35));
      174 dcl  unique_chars_ entry (bit (*) aligned) returns (char (15));
      175 dcl  user_info_$terminal_data entry (char (*), char (*), char (*));
      176 
      177 /* Builtin */
      178 
      179 dcl  (addr, after, before, bin, clock, divide, fixed, hbound, index, lbound,
      180      length, log10, ltrim, max, mod, null, ptr, rel, rtrim, search, size,
      181      string, substr, unspec) builtin;
      182 
      183 /* This is the pae entry point */
      184 
      185 	pae_sw = "1"b;
      186 	me = "print_apt_entry";
      187 	goto af_common;				/* go see if we're a command or an active function */
      188 
      189 process_id: entry;
      190 
      191 	process_id_sw = "1"b;
      192 	me = "process_id";
      193 
      194 af_common:
      195 
      196 	call cu_$af_return_arg (nargs, return_ptr, return_len, code);
      197 
      198 	if code = 0 then do;			/* active function */
      199 	     af_sw = "1"b;
      200 	     err_proc = active_fnc_err_;
      201 	end;
      202 
      203 	else if code = error_table_$not_act_fnc then do;	/* command */
      204 	     af_sw = ""b;
      205 	     err_proc = com_err_;
      206 	end;
      207 
      208 	else do;					/* some other code - something is wrong */
      209 	     call com_err_ (code, me);
      210 	     return;
      211 	end;
      212 
      213 /* Initialize entry-point-dependent defaults before looking at control args */
      214 
      215 	if process_id_sw | af_sw then multiple_sw = ""b;	/* default for process_id and [pae] is one process */
      216 	else multiple_sw = "1"b;			/* default for pae is multiple processes */
      217 
      218 /* Initialize offset of Initializer's APTE */
      219 
      220 	if apte1_offset = 0 then
      221 	     apte1_offset = size (tcm) - 1;
      222 
      223 /* Look at control arguments */
      224 
      225 	do argno = 1 to nargs;
      226 	     call cu_$arg_ptr (argno, ap, al, code);	/* this works for both commands and active functions */
      227 	     if code ^= 0 then do;
      228 		call err_proc (code, me);
      229 		return;
      230 	     end;
      231 
      232 	     if substr (bchr, 1, 1) ^= "-" then		/* if this is an ID */
      233 		ids = ids + 1;			/* count it, and skip it until next pass thru arg list */
      234 
      235 /* Check for control arguments common to both entry points */
      236 
      237 	     else if bchr = "-ia" | bchr = "-interactive" then
      238 		ia_sw = "1"b;
      239 	     else if bchr = "-as" | bchr = "-abs" | bchr = "-absentee" then
      240 		as_sw = "1"b;
      241 	     else if bchr = "-dmn" | bchr = "-daemon" then
      242 		dmn_sw = "1"b;
      243 	     else if bchr = "-only" then
      244 		ia_sw, as_sw, dmn_sw = ""b;
      245 	     else if bchr = "-all" | bchr = "-a" then
      246 		ia_sw, as_sw, dmn_sw = "1"b;
      247 	     else if bchr = "-single" then
      248 		multiple_sw = ""b;
      249 	     else if bchr = "-multiple" then
      250 		multiple_sw = "1"b;
      251 
      252 	     else if bchr = "-user"
      253 		| bchr = "-chn" | bchr = "-channel"
      254 		| bchr = "-pid" | bchr = "-process_id" then do; /* if next argument is an ID */
      255 		argno = argno + 1;			/* skip over it this time thru arglist */
      256 		ids = ids + 1;			/* count ID args */
      257 	     end;
      258 
      259 /* Check for control arguments accepted only by pae */
      260 
      261 	     else if pae_sw then do;
      262 		if bchr = "-dump" then
      263 		     dump_sw = "1"b;
      264 		else if bchr = "-no_dump" then
      265 		     dump_sw = ""b;
      266 		else if bchr = "-sh" | bchr = "-short" then
      267 		     short_sw = "1"b;
      268 		else if bchr = "-lg" | bchr = "-long" then
      269 		     short_sw = ""b;
      270 		else if bchr = "-dpy" | bchr = "-display" then
      271 		     display_mode = 2;
      272 		else if bchr = "-bfdpy" | bchr = "-brief_display" then
      273 		     display_mode = 1;
      274 		else if bchr = "-ndpy" | bchr = "-no_display" then
      275 		     display_mode = 0;
      276 		else if bchr = "-pd" | bchr = "-pdir" | bchr = "-process_dir" | bchr = "-process_directory" then
      277 		     pdir_sw = "1"b;
      278 		else if bchr = "-tchn" | bchr = "-term" | bchr = "-term_chn" | bchr = "-term_channel" then
      279 		     term_channel_sw = "1"b;
      280 		else goto badopt;
      281 	     end;					/* end pae args */
      282 
      283 	     else do;
      284 badopt:		call err_proc (error_table_$badopt, me, "^a", bchr);
      285 		return;
      286 	     end;
      287 
      288 	end;					/* end first pass thru argument list */
      289 
      290 /* Now, see what args were given, check legality, and apply defaults */
      291 
      292 	if pdir_sw | term_channel_sw			/* if returning pdir or term channel */
      293 	then pae_sw = ""b;				/* then we're not going to print the APTE */
      294 
      295 	if pae_sw & af_sw then do;			/* can't return a whole APTE */
      296 	     call err_proc (0, me, "No APTE item specified.");
      297 	     return;
      298 	end;
      299 
      300 	if pdir_sw & term_channel_sw then do;		/* if both given, complain */
      301 	     call err_proc (error_table_$inconsistent, me, "-process_dir and -term_channel");
      302 	     return;
      303 	end;
      304 
      305 	if ids > 1 then multiple_sw = "1"b;		/* single only makes sense with one ID */
      306 
      307 /* Initialize only what is needed for what we've been asked to do */
      308 
      309 	if pae_sw then do;				/* if printing APTE, get date and time */
      310 	     now = clock ();
      311 	     call date_time_ (now, temp_date_time);	/* format current date and time */
      312 	     today = temp_date;			/* copy mm/dd/yy */
      313 	end;
      314 
      315 	if ids > 0 then				/* if no IDs given, we're doing it for this process */
      316 	     call table_init;			/* otherwise we need pointers to the user tables */
      317 						/* (all users do not have access, so only try if needed) */
      318 
      319 	if pae_sw | term_channel_sw then		/* if printing APTE or returning term channel */
      320 	     call tcd_init;				/* we'll need to look in tc_data */
      321 
      322 	aptep = addr (tc_data);			/* get pointer to temporary storage */
      323 	id_sw = ""b;
      324 	total_matched, this_id_matched = 0;
      325 
      326 /* If no ID arguments given, do it for the current process */
      327 
      328 	if ids = 0 then do;
      329 	     id_sw = valid_id (rtrim (get_group_id_ ())); /* get User_ID */
      330 	     pers = pers_arg;			/* copy components of user_ID */
      331 	     proj = proj_arg;
      332 	     tag = tag_arg;
      333 	     if ia_sw | as_sw | dmn_sw then do;
      334 		tag_arg = "*";
      335 		call table_init;
      336 		call print_matching_processes (rtrim (pers_arg) || "." || rtrim (proj_arg) || "." || tag_arg);
      337 		return;
      338 	     end;
      339 	     call user_info_$terminal_data ((""), (""), channel); /* and channel */
      340 	     proc_id = get_process_id_ ();
      341 	     call print_it;				/* either print APTE, or return something */
      342 	     return;
      343 	end;
      344 
      345 	if ^(ia_sw | as_sw | dmn_sw) then		/* if none of -ia -as -dmn given */
      346 	     ia_sw, as_sw, dmn_sw = "1"b;		/* default is all three */
      347 
      348 /* There were IDs given. Go back thru the argument list and look for them. */
      349 
      350 	do argno = 1 to nargs;			/* go thru args again to process user and channel names */
      351 	     call cu_$arg_ptr (argno, ap, al, code);	/* ignore code this time around */
      352 
      353 	     if ^id_sw				/* if previous arg wasn't -user, -chn, or -pid, */
      354 		& substr (bchr, 1, 1) = "-" then do;	/* and this is a control arg, see if it's one of those */
      355 		if bchr = "-user" then
      356 		     user_sw, id_sw = "1"b;
      357 		else if bchr = "-chn" | bchr = "-channel" then
      358 		     chn_sw, id_sw = "1"b;
      359 		else if bchr = "-pid" | bchr = "-process_id" then
      360 		     pid_sw, id_sw = "1"b;
      361 
      362 		else user_sw, chn_sw, pid_sw, id_sw, apte_offset_sw = ""b; /* if not_sw,clear all the switches */
      363 	     end;					/* end previous arg not -user, -chn or -pid */
      364 
      365 	     else if id_sw				/* if previous arg was one of the above */
      366 		| substr (bchr, 1, 1) ^= "-" then do;	/* or if this one is not a control arg */
      367 						/* treat it as an ID arg */
      368 		this_id_matched = 0;		/* we'll count processes that match this ID */
      369 
      370 
      371 		if valid_id (bchr) then do;		/* if ID is legal, search user tbales for match */
      372 						/* (if it's not legal, valid_id prints an error message) */
      373 		     call print_matching_processes ((bchr));
      374 		end;				/* end valid ID */
      375 
      376 		id_sw = ""b;			/* clear this, in case it was on for this ID argument */
      377 
      378 	     end;					/* end ID argument */
      379 
      380 	     total_matched = total_matched + this_id_matched; /* count total matches */
      381 
      382 	end;					/* end second pass thru argument list */
      383 
      384 /* If we're a command, or an active function with just one ID argument, we already
      385*   reported on failure of any process to match the ID(s), But if we're an active
      386*   function with multiple IDs, we could get here without matching any processes
      387*   or putting anything in the return string. We'll complain about that,
      388*   rather then quietly returning a null string. */
      389 
      390 	if af_sw & ids > 1 & total_matched = 0 then
      391 	     call err_proc (0, me, "The given identifiers did not match any processes.");
      392 MAIN_RETURN:
      393 	return;
      394 
      395 /* Come here from internal procedures if unable to get pointers to user tables or tc_data */
      396 
      397 init_error:
      398 	call err_proc (code, me, "Cannot get ptr to ^a", segname);
      399 	return;
      400 
      401 match_ute: proc returns (bit (1) aligned);
      402 
      403 dcl  ec fixed bin (35);
      404 
      405 	if chn_sw then do;				/* -chn ID or ID with no uppercase letters * */
      406 	     call match_star_name_ ((ute.tty_name), (bchr), ec);
      407 	     if ec = 0 then goto matched;
      408 	end;
      409 
      410 	else if user_sw then do;			/* -user ID or ID containing uppercase letters */
      411 	     call match_star_name_ ((ute.person), (pers_arg), ec);
      412 	     if ec = 0 then do;			/* person matched; check project */
      413 		call match_star_name_ ((ute.project), (proj_arg), ec);
      414 		if ec = 0 then do;			/* project matched; check tag */
      415 		     if tag_arg ^= "m" & tag_arg ^= "p" /* only for two kinds of absentee tags */
      416 		     then goto matched;		/* since main loop does process type checking */
      417 		     if ute.proxy then		/* if this process is proxy */
      418 			if tag_arg = "p" then goto matched;
      419 			else ;			/* it wasn't "p" so don't goto matched */
      420 		     else				/* this process is not proxy */
      421 			if tag_arg = "m" then goto matched;
      422 		end;				/* end project matched */
      423 	     end;					/* end person matched */
      424 	end;
      425 
      426 	else if pid_sw then do;			/* -pid ID, or octal ID */
      427 	     if ute.proc_id = proc_id then goto matched;
      428 	     if apte_offset_sw then
      429 		if substr (ute.proc_id, 1, 18) = substr (proc_id, 1, 18) then goto matched;
      430 	end;
      431 	return (""b);
      432 matched:
      433 
      434 /* Copy stuff out of the answer table entry */
      435 
      436 	proc_id = ute.proc_id;
      437 	proj = ute.project;
      438 	pers = ute.person;
      439 	channel = ute.tty_name;
      440 
      441 	if ute.queue = -1 then			/* daemon */
      442 	     tag = "z";
      443 	else if ute.queue = 0 & ^ute.adjust_abs_q_no then /* interactive */
      444 	     tag = "a";
      445 	else					/* absentee */
      446 	     if ute.proxy then			/* proxy absentee */
      447 	     tag = "p";
      448 	else tag = "m";				/* normal absentee */
      449 
      450 	return ("1"b);
      451      end match_ute;
      452 
      453 print_it: proc;
      454 
      455 /* We call this procedure either to print the whole APTE, or to print or return one value from it. */
      456 
      457 dcl  fxl fixed bin;					/* length of dump lines, either 4 or 8 words */
      458 dcl  fxp ptr;					/* pointer to first word in line */
      459 dcl  fx (fxl) fixed bin (35) based (fxp);		/* array of 4 or 8 words in dump line */
      460 dcl  i fixed bin;
      461 dcl  integer_len fixed bin;				/* length of integer part of float nums */
      462 dcl  l fixed bin;					/* for octal dump, index of first APTE word in dump line */
      463 dcl  line_len fixed bin;				/* terminal line length */
      464 
      465 	this_id_matched = this_id_matched + 1;		/* count processes matching the ID */
      466 
      467 	if this_id_matched > 1 then			/* if this is the 2nd (or more) match for this ID */
      468 	     if ^multiple_sw			/* and the user only wanted one */
      469 	     then return;				/* don't print or return any more */
      470 
      471 	if pae_sw | term_channel_sw | apte_offset_sw then do; /* if we need to look in the APTE */
      472 	     tcdp0 = ptr (tcdp0, substr (proc_id, 1, 18));/* generate pointer to APTE in ring 0 */
      473 	     call ring_zero_peek_ (tcdp0, aptep, size (apte), code); /* copy the data out */
      474 	     if code ^= 0 then do;
      475 		call err_proc (code, me, "from ring_zero_peek_");
      476 		return;
      477 	     end;
      478 	     if apte_offset_sw then			/* if just apt offset given */
      479 		unspec (procid) = apte.processid;	/* copy full procid out of apt entry */
      480 	end;					/* end we need to look in the APTE */
      481 
      482 	if pae_sw | pdir_sw then do;			/* if we need the process directory name, get it */
      483 	     apte_offset = divide (procid, 2 ** 18, 18, 0);
      484 	     if apte_offset = apte1_offset then		/* special case the Initializer's pdir name */
      485 		c32 = ">pdd>!zzzzzzzbBBBBBB";		/* it is unique_chars_ (777777777777) */
      486 	     else c32 = ">pdd>" || unique_chars_ (proc_id); /* all other pdir names come from process id */
      487 	end;					/* end we need pdir name */
      488 
      489 /* If we didn't need the pdir name, the user must have asked for either process_id or term_channel */
      490 
      491 	else if process_id_sw then			/* if process id wanted */
      492 	     call ioa_$rsnnl ("^w", c32, (0), procid);	/* format it */
      493 
      494 	else if term_channel_sw then			/* if process termination event channel wanted */
      495 	     call ioa_$rsnnl ("^24.3b", c32, (0), unspec (apte.term_channel)); /* format it */
      496 
      497 /* Now, if we're not the pae command, we either return or print an active function value */
      498 
      499 	if af_sw then do;				/* active function */
      500 	     if length (return_string) > 0 then		/* if there's anything in the return string */
      501 		return_string = return_string || " ";	/* put a blank after it */
      502 	     return_string = return_string || rtrim (c32);/* put the return value in it */
      503 	     return;				/* return to the main loop */
      504 	end;
      505 
      506 	else if ^pae_sw then do;			/* if not pae, print what the A/F would have returned */
      507 	     call ioa_ ("^a", c32);
      508 	     return;
      509 	end;
      510 
      511 /* If it was pae, fall thru and print the APTE */
      512 
      513 /* First, the heading */
      514 
      515 	line_len = get_line_length_$switch (null, code);
      516 	call ioa_ ("^/^a.^a.^a ^a at ^o in tc_data, ^a", pers, proj, tag, channel, fixed (rel (tcdp0), 18), c32);
      517 
      518 /* Print line 1 unless -no_display */
      519 
      520 	if display_mode > 0 then
      521 	     call ioa_ ("^[FLAGS: ^w^2x^;^s^]^[EVENT: ^w^2x^;^s^]PID: ^w^2xLOCK_ID: ^w^[^2x^;
      522 ^]TRM CHN: ^w ^w",
      523 		(display_mode < 2), unspec (apte.flags),
      524 		(apte.wait_event ^= ""b), apte.wait_event,
      525 		apte.processid, apte.lock_id,
      526 		bin (display_mode < 2) * length ("FLAGS: oooooooooooo  ") +
      527 		bin (apte.wait_event ^= ""b) * length ("EVENT: oooooooooooo  ") +
      528 		length ("PID: oooooooooooo  LOCK_ID: oooooooooooo  ") +
      529 		length ("TRM CHN: oooooooooooo oooooooooooo") <= line_len,
      530 		substr (unspec (apte.term_channel), 1, 36),
      531 		substr (unspec (apte.term_channel), 37, 36));
      532 
      533 	if display_mode = 2 then do;			/* -display */
      534 
      535 /* -display: print the following three lines (stuff in [] only if interesting):
      536*   2) <state> for <interval> (since <time[ <date>]). Usage: cpu <amt>; vcpu <amt>; pf <N>.
      537*   3) te/s/i/x: E S I X.[ <ips name> pending.][ Flags: <flag names>.]
      538*   4) [Alarm in <interval> (at <time>[ <date>][ (<interval> after block)]).[ CPU monitor in <interval>.]
      539*
      540**/
      541 
      542 /* Prepare for printing line 2 */
      543 
      544 	     i = fixed (apte.state);
      545 	     if i >= lbound (state_names, 1) & i <= hbound (state_names, 1) then
      546 		c32 = state_names (i);
      547 	     else call ioa_$rsnnl ("state ^d", c32, (0), i);
      548 
      549 	     call date_time_ (apte.state_change_time, temp_date_time);
      550 
      551 /* Print line 2 */
      552 
      553 	     call ioa_ ("^a for ^a (since ^a^[^x^a^;^s^]).^[^2x^;
      554 ^]Usage: cpu ^a; vcpu ^a; pf ^d.",
      555 		c32, time_interval (now - apte.state_change_time),
      556 		time_of_day (apte.state_change_time),
      557 		(temp_date ^= today), temp_date,
      558 		length (rtrim (c32)) + length (" for  (since ).") +
      559 		length (rtrim (time_interval (now - apte.state_change_time))) +
      560 		length (rtrim (time_of_day (apte.state_change_time))) +
      561 		length (" mm/dd/yy") * bin (temp_date ^= today) +
      562 		length ("Usage: cpu ; vcpu ; pf 9.") +
      563 		length (rtrim (time_interval (apte.time_used_clock))) +
      564 		length (rtrim (time_interval (apte.virtual_cpu_time))) +
      565 		log10 (apte.page_faults) <= line_len,
      566 		time_interval (apte.time_used_clock),
      567 		time_interval (apte.virtual_cpu_time), apte.page_faults);
      568 	     /*** log10(X)+1 gives number of integer digits in X
      569*		The +1 was factored in as the 9 in the expression
      570*		length("Usage... pf 9.") 		      */
      571 
      572 /* Prepare for printing line 3 */
      573 
      574 	     if apte.ips_message then do;		/* if any ips wakeups pending */
      575 		ips_pending = "";
      576 		do i = 1 to 36;
      577 		     if substr (apte.ips_message, i, 1) then do;
      578 			if i <= sys_info$ips_mask_data.count then /* we have a name for this one */
      579 			     ips_pending = ips_pending || rtrim (sys_info$ips_mask_data.mask (i).name) || " ";
      580 			else do;
      581 			     call ioa_$rsnnl ("ips_^d", c32, (0), i);
      582 			     ips_pending = ips_pending || rtrim (c32) || " ";
      583 			end;
      584 		     end;				/* end this ips is pending */
      585 		end;				/* end loop thru all ips's */
      586 		ips_pending = ips_pending || " pending.";
      587 	     end;					/* end there are some ips's pending */
      588 
      589 	     if string (first_17_flags) | ^flag18 then do;
      590 		flags = "Flags: ";
      591 		do i = 1 to 15, 17;
      592 		     if first_17_flags (i) then
      593 			flags = flags || rtrim (flag_names (i)) || ",";
      594 		end;
      595 		if ^apte.flags.default_procs_required then do; /* flag16 */
      596 		     call ioa_$rsnnl ("proc_^[A^]^[B^]^[C^]^[D^]^[E^]^[F^]^[G^]^[H^]_required,", c32, (0),
      597 			substr (apte.procs_required, 1, 1),
      598 			substr (apte.procs_required, 2, 1),
      599 			substr (apte.procs_required, 3, 1),
      600 			substr (apte.procs_required, 4, 1),
      601 			substr (apte.procs_required, 5, 1),
      602 			substr (apte.procs_required, 6, 1),
      603 			substr (apte.procs_required, 7, 1),
      604 			substr (apte.procs_required, 8, 1));
      605 		     flags = flags || rtrim (c32);
      606 		end;
      607 		if ^flag18 then
      608 		     flags = flags || "has_never_run,";
      609 		substr (flags, length (flags), 1) = ".";
      610 	     end;
      611 
      612 /* Print line 3 */
      613 
      614 	     integer_len = 0;
      615 	     if apte.te > 0 then
      616 		integer_len = integer_len + log10 (apte.te / 1.0e6);
      617 	     if apte.ts > 0 then
      618 		integer_len = integer_len + log10 (apte.ts / 1.0e6);
      619 	     if apte.ti > 0 then
      620 		integer_len = integer_len + log10 (apte.ti / 1.0e6);
      621 	     if apte.timax > 0 then
      622 		integer_len = integer_len + log10 (apte.timax / 1.0e6);
      623 	     /*** log10(X) + 1  gives number of digits in integer part of X
      624*		The +1 is accounted for below as the first 9 in 9.999     */
      625 
      626 	     call ioa_ ("te/ts/ti/tx:^4(^x^.3f^).^[^2x^a^;^s^]^[^[^2x^;^/^]^a^;^2s^]",
      627 		apte.te / 1.0e6, apte.ts / 1.0e6, apte.ti / 1.0e6, apte.timax / 1.0e6,
      628 		(ips_pending ^= ""), ips_pending, (flags ^= ""),
      629 		length ("te/ts/ti/tx: 9.999 9.999 9.999 9.999.    ") + integer_len +
      630 		length (ips_pending) + length (flags) <= line_len, flags);
      631 
      632 /* Decide if fourth line is needed; if it is, prepare for printing it */
      633 
      634 	     if apte.alarm_time ^= ""b | apte.cpu_monitor ^= 0 then do; /* print it if either is nonzero */
      635 		c32 = "";
      636 		alrm = 0;
      637 		if apte.alarm_time ^= ""b then do;
      638 		     alrm = fixed (apte.alarm_time, 71);
      639 		     call date_time_ (alrm, temp_date_time);
      640 		     if fixed (apte.state) = 4 then	/* if blocked, display alarm offset from block_time */
      641 			call ioa_$rsnnl ("^x(^a after block)", c32, (0),
      642 			     time_interval (alrm - apte.state_change_time));
      643 		end;
      644 
      645 		if apte.cpu_monitor ^= 0 then		/* it is in units of 1024 microseconds */
      646 		     cpu_mon = apte.cpu_monitor * 1024; /* make it microseconds */
      647 
      648 /* now print it */
      649 
      650 		call ioa_ ("^[Alarm in ^a (at ^a^[^x^a^;^s^]^a).^x^;^5s^]^[CPU monitor in ^a.^;^s^]",
      651 		     (alrm ^= 0), time_interval (alrm - now), time_of_day (alrm), (temp_date ^= today), temp_date,
      652 		     c32, (cpu_mon ^= 0), time_interval (cpu_mon - apte.virtual_cpu_time));
      653 
      654 	     end;					/* end line 4 being printed */
      655 
      656 	     call ioa_ ("IPC R-Offset: ^w, R-Factor: ^w", apte.ipc_r_offset, apte.ipc_r_factor);
      657 	end;					/* end -display */
      658 
      659 	if dump_sw then do;				/* -dump */
      660 
      661 	     call ioa_;				/* blank line before dump */
      662 	     if short_sw then fxl = 4;		/* if -short, set output line length to 4 words */
      663 	     else fxl = 8;				/* else set it to 8 words */
      664 	     do l = 0 by fxl while (l <= hbound (f, 1));	/* go thru APTE 4 or 8 words at a time */
      665 		fxp = addr (f (l));			/* get pointer to first word of next output line */
      666 		call ioa_ ("^3o^x^v(^x^w^)", l, fxl, fx); /* print next output line, including first word's offset */
      667 	     end;
      668 	     call ioa_;				/* blank line after dump */
      669 	end;					/* end -dump */
      670 
      671      end print_it;
      672 
      673 print_matching_processes: proc (a_user_id);
      674 
      675 dcl  a_user_id char (32) parm;
      676 
      677 	if (ia_sw & tag_arg = "*")			/* if interactives wanted and tag doesn't exclude them */
      678 	     | tag_arg = "a" then			/* or if tag specified interactives */
      679 	     do i = 1 to anstbl.current_size;		/* search for answer table entry */
      680 	     utep = addr (anstbl.entry (i));		/* get pointer to current entry */
      681 	     if ute.active >= 4 then
      682 		if match_ute () then
      683 		     call print_it;			/* call internal procedure to do work */
      684 	end;
      685 
      686 	if (as_sw & tag_arg = "*")			/* if absentees wanted and tag doesn't exclude them */
      687 	     | tag_arg = "m" | tag_arg = "p"		/* or if tag specified absentee */
      688 	then do i = 1 to autp -> autbl.current_size while (autp -> autbl.n_abs_run > 0);
      689 	     utep = addr (autp -> autbl.entry (i));	/* get ptr to current absentee user table entry */
      690 	     if ute.active >= 4 then
      691 		if match_ute () then
      692 		     call print_it;			/* call internal proc */
      693 	end;
      694 
      695 	if (dmn_sw & tag_arg = "*")			/* if daemons wanted and tag doesn't exclude them */
      696 	     | tag_arg = "z"			/* or if tag specified daemon */
      697 	then do i = 1 to dutbl.current_size;
      698 	     utep = addr (dutbl.entry (i));
      699 	     if ute.active >= 4 then
      700 		if match_ute () then
      701 		     call print_it;
      702 	end;
      703 
      704 	if pid_sw & this_id_matched = 0 then do;	/* did not find process id in user tables */
      705 	     if pae_sw then				/* if printing APTE, explain the "?"s to the user * */
      706 		call ioa_ ("^[Offset^;Process^] ^w not in user tables.", apte_offset_sw, procid);
      707 	     proj, pers, channel, tag = "?";
      708 	     call print_it;
      709 	end;
      710 
      711 	if this_id_matched = 0			/* if no matches for this ID */
      712 	     & (^af_sw | ids = 1) then		/* and we're a command or we have only one ID */
      713 	     call err_proc (0, me, "^[User^;Channel^] ^a not found", user_sw, a_user_id);
      714 
      715 	else if this_id_matched > 1			/* or if we had more than one match */
      716 	     & ^multiple_sw then do;			/* and the user only expected one */
      717 	     call err_proc (0, me, "^a matched ^d processes.", a_user_id, this_id_matched);
      718 	     go to MAIN_RETURN;
      719 	end;
      720 
      721      end print_matching_processes;
      722 
      723 table_init: proc;
      724 
      725 	if ^tables_initiated then do;
      726 	     segname = "answer_table";
      727 	     call hcs_$initiate (sysdir, segname, "", 0, 0, static_ansp,
      728 		code);
      729 	     if static_ansp = null then goto init_error;
      730 
      731 	     segname = "absentee_user_table";
      732 	     call hcs_$initiate (sysdir, segname, "", 0, 0, static_autp,
      733 		code);
      734 	     if static_autp = null then go to init_error;
      735 
      736 	     segname = "daemon_user_table";
      737 	     call hcs_$initiate (sysdir, segname, "", 0, 0, static_dutp,
      738 		code);
      739 	     if static_dutp = null then go to init_error;
      740 
      741 	     tables_initiated = "1"b;
      742 	end;
      743 
      744 	ansp = static_ansp;
      745 	autp = static_autp;
      746 	dutp = static_dutp;
      747 
      748 	return;
      749 
      750      end table_init;
      751 
      752 
      753 
      754 
      755 
      756 tcd_init: proc;
      757 
      758 	if tcd_initiated then return;			/* quit if we already have ptr to tc_data */
      759 
      760 	segname = "tc_data";
      761 	call ring0_get_$segptr ("", "tc_data", tcdp0, code); /* get pointer to tc_data */
      762 	if code ^= 0 then goto init_error;
      763 
      764 	tcd_initiated = "1"b;
      765 
      766 	return;
      767 
      768      end tcd_init;
      769 
      770 time_of_day: proc (a_time) returns (char (8));
      771 
      772 dcl  a_time fixed bin (71) parm;
      773 dcl  time char (8) var;
      774 
      775 	time = date_time_$format ("^Z9Hd:^MH:^SM", a_time, "", "");
      776 	return (time);
      777      end time_of_day;
      778 
      779 time_interval: proc (a_time) returns (char (8));
      780 
      781 dcl  (time, a_time) fixed bin (71);
      782 
      783 dcl  min fixed bin;
      784 dcl  sum fixed bin (71);
      785 dcl  sec fixed bin;
      786 dcl  hr fixed bin (35);
      787 dcl  rs char (8);
      788 dcl  rlen fixed bin;
      789 dcl  usec fixed bin (35);
      790 dcl  int_pic pic "zzzzzzz9" defined (rs) pos (1);		/* suppress leading zeros in time interval */
      791 dcl  usec_pic pic "999999";				/* to convert microseconds in time interval */
      792 
      793 	time = a_time;				/* copy time interval */
      794 
      795 	if time < 0 then time = 0;			/* avoid blowup when ^[^] will not print negative time anyway */
      796 	hr = divide (time, 3600000000, 71, 0);
      797 	min = divide (time, 60000000, 71, 0) - hr * 60;
      798 	sec = divide (time, 1000000, 71, 0) - hr * 3600 - min * 60;
      799 	sum = sec + min * 1000 + hr * 1000000;		/* HH0MM0SS */
      800 	if hr > 99999 then				/* if ridiculous number of hours */
      801 	     rs = "99999+hr";			/* say so */
      802 	else call ioa_$rsnnl ("^5d+hr", rs, (0), hr);	/* else say how many hours */
      803 	if sum > 99999999
      804 	then int_pic = 99999999;
      805 	else int_pic = sum;				/* time interval doesn't want leading zeros */
      806 
      807 	if substr (rs, 2, 1) ^= " " then substr (rs, 3, 1) = ":";
      808 	if substr (rs, 5, 1) ^= " " then substr (rs, 6, 1) = ":";
      809 
      810 /* Return the most interesting characters from the string HH:MM:SS.ffffff,
      811*   without making it so long that output strings run off ends of terminal lines.
      812*   Set rlen to the right length, according to how large the time interval is:
      813*   *
      814*   *	OUTPUT	       RLEN		length(ltrim(rs))
      815*   *
      816*   *	HH:MM:SS		8		8
      817*   *	 H:MM:SS		7		7
      818*   *	   MM:SS		5		5
      819*   *	    M:SS.f	6		4
      820*   *	      SS.fff	6		2
      821*   *	       S.fff	5		1
      822*   *	       0.fzzzzz	3 to 8 *		1
      823*   *
      824*   *			       * depending on how many z's are nonzero
      825*   *
      826**/
      827 	usec = mod (time, 1000000);			/* get ffffff in binary */
      828 	usec_pic = usec;				/* get ffffff in characters */
      829 
      830 	rlen = length (ltrim (rs));			/* see how big the interval is */
      831 	if rlen > 4 then ;				/* 8, 7, and 5 stay as is for HH:MM:SS,  H:MM:SS and MM:SS */
      832 	else if rlen = 4 then rlen = 6;		/* 4 -> 6 for M:SS.f */
      833 	else if rlen > 1 then rlen = 6;		/* 2 -> 6 for SS:fff */
      834 	else if substr (rs, 8, 1) ^= "0" then rlen = 5;	/* 1 -> 5 for S.fff */
      835 	else rlen = max (3, 2 + length (rtrim (usec_pic, "0"))); /* 0.fzzzzz */
      836 
      837 	return (substr (ltrim (rs || "." || usec_pic), 1, rlen));
      838 
      839      end time_interval;
      840 
      841 valid_id: proc (id_arg) returns (bit (1) aligned);
      842 
      843 dcl  id_arg char (*);
      844 
      845 	tag_arg = "*";				/* all tags match, unless one is given in a User_ID */
      846 
      847 	if ^id_sw | pid_sw then do;			/* if ID or -pid ID (not -user ID or -chn ID) */
      848 	     c32 = id_arg;				/* convert process id from octal characters to binary */
      849 	     procid = cv_oct_check_ (c32, code);	/* check for process id or apt offset */
      850 	     if code = 0 then			/* it was one of those */
      851 		pid_sw = "1"b;
      852 	     else if ^pid_sw then			/* if not -pid ID, we were just checking */
      853 		code = 0;				/* so it is not a real error */
      854 	     else do;				/* it was -pid ID and ID was non-octal */
      855 		call err_proc (0, me, "Invalid process id: ^a", id_arg);
      856 		return (""b);
      857 	     end;
      858 	end;
      859 
      860 	if pid_sw then do;				/* if it was octal, was it a full process id or just an offset */
      861 	     if procid < 2 ** 18 then do;		/* if just apte offset given */
      862 		procid = procid * (2 ** 18);		/* shift it into left half of word */
      863 		apte_offset_sw = "1"b;
      864 		call tcd_init;			/* we'll have to look in the APTE for the full process id */
      865 	     end;
      866 
      867 	     apte_offset = divide (procid, 2 ** 18, 18, 0); /* compute APTE offset, and validate it */
      868 	     if apte_offset < apte1_offset		/* if offset is before first APTE */
      869 		| mod (apte_offset - apte1_offset, size (apte)) ^= 0 then do; /* or isn't on an APTE boundary */
      870 		call err_proc (0, me, "Invalid APTE offset^[ in process ID^]: ^a", (^apte_offset_sw), id_arg);
      871 		return (""b);
      872 	     end;
      873 
      874 	     return ("1"b);
      875 
      876 	end;					/* end it was a process ID */
      877 
      878 /* If not a process ID, fall thru and see if it is a User_ID or a channel name. */
      879 
      880 	if ^id_sw then				/* if no -user or -channel control arg */
      881 	     if search (id_arg, CAPS) ^= 0		/* if it contains any uppercase letters */
      882 	     then user_sw = "1"b;			/* treat it as a User_ID */
      883 	     else chn_sw = "1"b;			/* else treat it as a channel name */
      884 
      885 	if user_sw then do;				/* if it's a User_ID, parse it into Pers.Proj.tag */
      886 	     pers_arg = before (id_arg, ".");
      887 	     if pers_arg = "" then pers_arg = "*";
      888 	     proj_arg = before (after (id_arg, "."), ".");
      889 	     if proj_arg = "" then proj_arg = "*";
      890 	     tag_arg = after (after (id_arg, "."), ".");
      891 	     if tag_arg = "" then tag_arg = "*";
      892 	     if length (pers_arg) > 22
      893 		| length (proj_arg) > 9
      894 		| length (tag_arg) > 1
      895 		| index ("ampz*", tag_arg) = 0 then do;
      896 		call err_proc (0, me, "Invalid User ID: ^a", id_arg);
      897 		return (""b);
      898 	     end;
      899 	end;
      900 
      901 	return ("1"b);
      902 
      903      end valid_id;
      904 
      905 /* format: off */
      906  /* BEGIN INCLUDE FILE ... absentee_user_table.incl.pl1 */
  1     2 
  1     3 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  1     4 /*							       */
  1     5 /* The absentee user table is the control data base for the absentee	       */
  1     6 /* facility.  It has a header, with scheduling parameters, then one user     */
  1     7 /* table entry for each logged-in absentee job.			       */
  1     8 /*							       */
  1     9 /* Programs which use this table must also include		       */
  1    10 /* user_table_header.incl.pl1 and user_table_entry.incl.pl1.	       */
  1    11 /*							       */
  1    12 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  1    13 
  1    14 
  1    15 /****^  HISTORY COMMENTS:
  1    16*  1) change(81-09-10,Kittlitz), approve(), audit(), install():
  1    17*     Replace abs_user_tab.incl.pl1.
  1    18*  2) change(87-04-26,GDixon), approve(87-07-13,MCR7741),
  1    19*     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1056):
  1    20*     Use ut_header common to all user control tables.
  1    21*                                                   END HISTORY COMMENTS */
  1    22 
  1    23 
  1    24 dcl  AUTBL_version_4 fixed bin int static options (constant) init (4);
  1    25 
  1    26 dcl  autp ptr automatic init (null);
  1    27 
  1    28 dcl 1 autbl based (autp) aligned,			/* a per system table to store info on absentee processes */
  1    29     2 header like ut_header,				/* Header common to all user tables. */
  1    30 
  1    31 /* Counter elements */
  1    32     2 n_abs_run fixed bin,				/* actual number of absentee processes current */
  1    33     2 max_abs_users fixed bin,			/* max number of background absentee processes permitted */
  1    34     2 n_background_abs fixed bin,			/* number of absentee processes not from foreground queue */
  1    35     2 n_sec_fg fixed bin,				/* number of secondary foreground absentee jobs */
  1    36     2 idle_units fixed bin,				/* used in adjusting abs_maxu dynamically */
  1    37     2 abs_units fixed bin,				/* part of anstbl.n_units used by background absentees */
  1    38     2 n_abs (4) fixed bin,				/* number of processes from each background queue */
  1    39     2 qres (4) fixed bin,				/* number of slots reserved for each background queue */
  1    40     2 rsc_waiting (-1:4) fixed bin,			/* number of requests waiting for resources, from each queue */
  1    41     2 qerr (-1:4) fixed bin,				/* number of consecutive errors for q (dropped if > QERR_MAX) */
  1    42     2 cpu_limit (4) fixed bin (35),			/* current per-queue cpu time limits */
  1    43 
  1    44 /* absentee user manager values. */
  1    45     2 defer_channel fixed bin (71),			/* IPC for time-defered queue entries */
  1    46     2 absentee_rq_chn fixed bin (71),			/* IPC channel for absentee requests */
  1    47     2 last_queue_searched fixed bin,			/* highest queue looked at by scheduler */
  1    48     2 debugging fixed bin,				/* take asdumps at strategic places */
  1    49     2 control,					/* see also whotab.incl.pl1 */
  1    50       3 mnbz bit (1) unal,				/* must not be zero */
  1    51       3 abs_maxu_auto bit (1) unal,			/* 1 if abs maxu has not been set by operator command */
  1    52       3 abs_maxq_auto bit (1) unal,			/* 1 if abs maxq has not been set by operator command */
  1    53       3 abs_qres_auto bit (1) unal,			/* 1 if abs qres has not been set by operator command */
  1    54       3 abs_cpu_limit_auto bit (1) unal,		/* 1 if abs cpu_limit has not been set by operator command */
  1    55       3 queue_dropped (-1:4) bit (1) unal,		/* 1 if queue has been dropped because of errors */
  1    56       3 abs_up bit (1) unal,				/* 1 if absentee facility is running */
  1    57       3 abs_stopped bit (1) unal,			/* 1 if abs stop command was issued */
  1    58 						/* both 1 if we're waiting for the last jobs to log out */
  1    59       3 aum_ctl bit (1) unal,				/* for AUM to tell AU to start a new sequence */
  1    60       3 lc_list bit (1) unal,				/* for AU to tell AUM that the lc list is non-empty */
  1    61 						/* comments in AU and AUM explain aum_ctl and lc_list */
  1    62       3 control_pad (21) bit (1) unal,			/* fill out rest of word */
  1    63     2 aum_pad fixed bin,
  1    64 
  1    65     2 entry_pad (80) fixed bin,			/*  pad table header to 128 words */
  1    66     2 entry (0 refer (autbl.current_size)) like ute;
  1    67 
  1    68 dcl AUTBL_CONTROL_NAMES (15) char(20) varying int static options(constant) init(
  1    69 	"mnbz",
  1    70 	"abs_maxu_auto",
  1    71 	"abs_maxq_auto",
  1    72 	"abs_qres_auto",
  1    73 	"abs_cpu_limit_auto",
  1    74 	"queue_dropped(-1)",
  1    75 	"queue_dropped( 0)",
  1    76 	"queue_dropped( 1)",
  1    77 	"queue_dropped( 2)",
  1    78 	"queue_dropped( 3)",
  1    79 	"queue_dropped( 4)",
  1    80 	"abs_up",
  1    81 	"abs_stopped",
  1    82 	"aum_ctl",
  1    83 	"lc_list");
  1    84 
  1    85 /* END INCLUDE FILE ... absentee_user_table.incl.pl1 */
      906 
      907  /* BEGIN INCLUDE FILE ... answer_table.incl.pl1 */
  2     2 
  2     3 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  2     4 /*							       */
  2     5 /* The answer table has one entry per "login instance" whether completed or  */
  2     6 /* not.  It is connected to the Channel Definition Table by the pointer      */
  2     7 /* "channel".  The header is used mostly by dialup_.		       */
  2     8 /*							       */
  2     9 /* Programs which use this file must also include user_table_header.incl.pl1 */
  2    10 /*							       */
  2    11 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  2    12 
  2    13 /****^  HISTORY COMMENTS:
  2    14*  1) change(81-09-10,Kittlitz), approve(), audit(), install():
  2    15*     Replace anstbl.incl.pl1.
  2    16*  2) change(85-01-15,Swenson), approve(), audit(), install():
  2    17*     Add anstbl.session_uid_counter.
  2    18*  3) change(85-08-21,Coren), approve(), audit(), install():
  2    19*     Add anstbl.message_update_time and named constants for values of
  2    20*     anstbl.session, and to make all padding explicit.
  2    21*  4) change(85-08-23,Coren), approve(), audit(), install():
  2    22*     Change "entry" to a placeholder so as not to require
  2    23*     user_table_entry.incl.pl1.
  2    24*  5) change(86-06-29,Swenson), approve(87-07-13,MCR7741),
  2    25*     audit(87-04-14,GDixon), install(87-08-04,MR12.1-1056):
  2    26*     Added the flag login_server_present which indicates whether a login
  2    27*     server request has been received.  This is used to determine whether
  2    28*     dial_ctl_ should call uc_cleanup_network_dials_ (and thus
  2    29*     hpriv_connection_list_, which only exists with the MNA RPQ software).
  2    30*  6) change(87-04-14,GDixon), approve(87-07-13,MCR7741),
  2    31*     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1056):
  2    32*      A) Moved constants for ute.pw_flags.mask_ctl into
  2    33*         user_table_entry.incl.pl1.
  2    34*      B) Added common table header to all user tables.
  2    35*                                                   END HISTORY COMMENTS */
  2    36 
  2    37 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  2    38 /*							       */
  2    39 /* The anstbl structure below is divided into sections.  Each section begins */
  2    40 /* with a comment describing the elements in the section.  Elements are      */
  2    41 /* placed within a section, based upon their function or the programs that   */
  2    42 /* use them.  Each section begins on a double word and is an even number of  */
  2    43 /* words long.						       */
  2    44 /*							       */
  2    45 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  2    46 
  2    47 
  2    48 
  2    49 /* format: style4 */
  2    50 
  2    51 dcl  ANSTBL_version_4 static options (constant) init (4);	/* version of this declaration */
  2    52 
  2    53 dcl  ansp ptr automatic init (null);
  2    54 
  2    55 dcl  1 anstbl based (ansp) aligned,			/* Structure of answer table */
  2    56        2 header like ut_header,			/* Header common to all user tables. */
  2    57 
  2    58 /* Counter elements. */
  2    59        2 nlin fixed bin,				/* number of active lines */
  2    60        2 mxlin fixed bin,				/* maximum number of active lines */
  2    61        2 n_users fixed bin,				/* number of logged-in users */
  2    62        2 max_users fixed bin,				/* maximum number of users allowed */
  2    63        2 n_units fixed bin,				/* number of logged in units */
  2    64        2 max_units fixed bin,				/* maximum number of units */
  2    65        2 n_sessions fixed bin,			/* number of Multics sessions */
  2    66        2 n_pad fixed bin,
  2    67 
  2    68 /* Name elements. */
  2    69        2 sysdir char (64) unal,			/* name of main system control directory */
  2    70        2 as_tty char (8) unal,			/* name of main answering service device. */
  2    71 
  2    72 /* Login elements. */
  2    73        2 login_word char (8) unal,			/* login word if special_session=1  */
  2    74        2 session char (8) unal,			/* session indicator */
  2    75        2 special_message char (128) unal,		/* message to be printed for special session */
  2    76        2 message_update_time fixed bin (71),		/* time at which special_message was last updated */
  2    77        2 message_lng fixed bin,			/* length of special message */
  2    78        2 login_pad fixed bin,
  2    79 
  2    80 /* Table update elements. */
  2    81        2 lock_count fixed bin,			/* global lock for all system control tables */
  2    82        2 update_pending bit (1) aligned,		/* flag indicating that update is required */
  2    83        2 update_channel fixed binary (71),		/* event channel of update procedure */
  2    84        2 acct_update_chn fixed bin (71) aligned,		/* Timer IPC channel */
  2    85        2 acct_last_update_time fixed bin (71) aligned,	/* Time of last accounting update */
  2    86        2 acct_alarm_fail fixed bin,			/* non-zero if alarm has failed */
  2    87        2 update_pad fixed bin,
  2    88 
  2    89 /* dialup_ data values. */
  2    90        2 current_time fixed bin (71),			/* Time of last transaction */
  2    91        2 processid_index fixed bin (18),		/* unique index for process id generation */
  2    92        2 session_uid_counter fixed bin (35),		/* current session_uid */
  2    93 
  2    94 /* load_ctl_ elements. */
  2    95        2 shift fixed bin,				/* Shift, set by act_ctl_ */
  2    96        2 auto_maxu fixed bin,				/* 0 = manual, 1 = config, 2 = load-level */
  2    97        2 extra_units fixed bin,			/* Total daemon and abs units. */
  2    98 						/* load_ctl_ load leveling desired response range: */
  2    99        2 response_high fixed bin,			/* bad if user response time slower than this */
  2   100        2 response_low fixed bin,			/* bad if user response time faster than this */
  2   101        2 load_ctl_pad fixed bin,
  2   102 
  2   103 /* Login server request server data. */
  2   104        2 ls_request_server_event_channel fixed bin (71),	/* channel for login server requests */
  2   105        2 ls_request_server_process_id bit (36) aligned,	/* process serving login server requests */
  2   106        2 login_server_present bit (1) aligned,		/* On IFF a login server request has been processed */
  2   107 
  2   108        2 entry_pad (28) fixed bin,			/* pad to 128 words */
  2   109        2 entry (0 refer (anstbl.current_size)),		/* user entries */
  2   110          3 contents (UTE_SIZE) fixed bin;
  2   111 
  2   112 /* constants */
  2   113 
  2   114 /* values for anstbl.session */
  2   115 
  2   116 dcl  (AT_NORMAL init ("normal  "),
  2   117      AT_SPECIAL init ("special "),
  2   118      AT_SHUTDOWN init ("shutdown")) char (8) internal static options (constant);
  2   119 
  2   120 dcl  UTE_SIZE fixed bin internal static initial (300);
  2   121 
  2   122 /* END INCLUDE FILE ... answer_table.incl.pl1 */
      907 
      908  /*  BEGIN INCLUDE FILE ... apte.incl.pl1 */
  3     2 
  3     3 /* Modified 1984-11-11 by E. Swenson for IPC event channel validation. */
  3     4 
  3     5 dcl  aptep pointer;
  3     6 
  3     7 dcl 1 apte based (aptep) aligned,			/* APT entry declaration for an active (known) process */
  3     8     2 thread unaligned,				/* List thread */
  3     9       3 fp bit (18),				/* Forward pointer */
  3    10       3 bp bit (18),				/* Backward pointer */
  3    11     2 flags unaligned,				/* Flags and miscellaneous */
  3    12       3 mbz bit (1),				/* This bit must be zero (sentinel bit) */
  3    13       3 wakeup_waiting bit (1),			/* ON if process has received wakeup */
  3    14       3 stop_pending bit (1),				/* ON if process has received stop connect */
  3    15       3 pre_empted bit (1),				/* ON if process is being pre-empted by get_processor */
  3    16       3 hproc bit (1),				/* ON if process is hardcore process */
  3    17       3 loaded bit (1),				/* ON if required per-process pages are in memory and wired */
  3    18       3 eligible bit (1),				/* ON if process is eligible */
  3    19       3 idle bit (1),				/* ON if  this is an idle process */
  3    20       3 interaction bit (1),				/* ON if process has interacted recently */
  3    21       3 pre_empt_pending bit (1),			/* ON if process has received pre-empt connect */
  3    22       3 default_procs_required bit (1),			/* ON if apte.procs_required is system default */
  3    23       3 realtime_burst bit (1),			/* ON if next eligibility is realtime */
  3    24       3 always_loaded bit (1),			/* ON if process is not to be unloaded */
  3    25       3 dbr_loaded bit (1),				/* ON if DBR is loaded on some CPU */
  3    26       3 being_loaded bit (1),				/* ON if somebody loading this process */
  3    27       3 shared_stack_0 bit (1),			/* ON if a shared stack_0 is assigned */
  3    28       3 page_wait_flag bit (1),			/* flag ON if waiting for page */
  3    29       3 firstsw bit (1),				/* OFF until process is intialized */
  3    30       3 state bit (18),				/* execution state */
  3    31     2 page_faults fixed bin (35),			/* total page faults for the process */
  3    32     2 processid bit (36),				/* bit 0-17: offset of ATPE */
  3    33 						/* bit 18-35: sequential number */
  3    34     2 te fixed bin (35),				/* virtual time since eligibility award */
  3    35     2 ts fixed bin (35),				/* virtual time since scheduling */
  3    36     2 ti fixed bin (35),				/* virtual time since interaction */
  3    37     2 timax fixed bin (35),				/* maximum value allowed for apte.ti */
  3    38 
  3    39 /* * * * * * * * */
  3    40 
  3    41     2 ipc_pointers unaligned,
  3    42       3 event_thread bit (18),			/* relative pointer to ITT list */
  3    43       3 pad3 bit (18),
  3    44     2 ips_message bit (36),				/* IPS signals pending */
  3    45     2 asteps unaligned,				/* relative ASTE pointers */
  3    46       3 pds bit (18),				/* PDS (per-process) */
  3    47       3 dseg bit (18),				/* DSEG (per-process) */
  3    48       3 prds bit (18),				/* PRDS (per-processor) */
  3    49     2 savex7 bit (18) unaligned,			/* x7 at call to getwork (return point in pxss) */
  3    50     2 term_processid bit (36),			/* process to send wakeup at temination */
  3    51     2 lock_id bit (36),				/* File System unqieu ID associated with process */
  3    52     2 time_used_clock fixed bin (71),			/* Total CPU time when process last lost CPU */
  3    53 
  3    54 /* * * * * * * * */
  3    55 
  3    56     2 wait_event bit (36) aligned,			/* Event ID process awaiting */
  3    57     2 wct_index bit (18) unaligned,			/* rel offset of WCTE */
  3    58     2 flags2 unaligned,
  3    59       3 priority_scheduling bit (1),			/* ON if guaranteed eligibility */
  3    60       3 special_wakeups bit (6),			/* Special wakeup channels */
  3    61       3 pad7 bit (7),
  3    62       3 batch bit (1),				/* ON if absentee */
  3    63       3 pr_tag bit (3),				/* CPU tag running or last run */
  3    64     2 state_change_time fixed bin (71),			/* Time apte.state last changed */
  3    65     2 alarm_event fixed bin (71),			/* wakeup event for alarm clock manager */
  3    66     2 alarm_time_thread bit (18) unaligned,		/* thread of processes with pending alarms */
  3    67     2 alarm_time bit (54) unaligned,			/* wakeup time for alarm */
  3    68 
  3    69 /* * * * * * */
  3    70 
  3    71     2 term_channel fixed bin (71),			/* wakeup event for account overflow */
  3    72     2 ws_size fixed bin,				/* working set estimate for the process */
  3    73     2 temax fixed bin (35),				/* maximum eligibility slice (vcpu) */
  3    74     2 deadline fixed bin (71),			/* time of next run */
  3    75     2 lock bit (18) unaligned,			/* 0 => APTE locked, unlocked => return point of last unlock */
  3    76     2 unusable bit (18) unaligned,			/* locking routines destroy */
  3    77     2 cpu_monitor fixed bin (35),			/* if not 0, send wakeup to term_processid when virtual cpu
  3    78*						/* reaches this (units = 1/1024 sec) */
  3    79     2 paging_measure fixed bin (71),			/* cumulative memory units */
  3    80     2 access_authorization bit (72),			/* authorization of this process */
  3    81     2 dbr fixed bin (71),				/* DBR value (constant since DSEG entry-held) */
  3    82 
  3    83     2 virtual_cpu_time fixed bin (71),			/* cumulative virtual CPU time for the process */
  3    84     2 ittes_sent fixed bin (18),			/* Unprocessed ITTs sent by this process */
  3    85     2 ittes_got fixed bin (18),			/* Unprocessed ITTs received by this process */
  3    86 
  3    87 /*  Cells used to drive and instrument finite-state model for response time
  3    88*    measurement. Maintained by meter_response_time */
  3    89 
  3    90     2 current_response_state fixed bin (17) unaligned,	/* Process state in modle */
  3    91     2 pad18 bit (18) unaligned,
  3    92     2 number_processing fixed bin (35),			/* Number interactions */
  3    93     2 last_response_state_time fixed bin (71),		/* Clock time at last response state change */
  3    94     2 total_processing_time fixed bin (71),		/* Total interaction processing time */
  3    95 
  3    96 /* * * * * * */
  3    97 
  3    98     2 begin_interaction_vcpu fixed bin (71),		/* Virtual cpu at beginning of last interaction */
  3    99 
  3   100 /*  End of cells for finite-state model */
  3   101 
  3   102     2 saved_temax fixed bin (35),			/* temax at eligibility award */
  3   103     2 procs_required bit (8) unaligned,			/* bit mask of CPUs this process can run */
  3   104     2 pad4 bit (28) unaligned,
  3   105     2 ipc_r_offset fixed bin (18) unsigned,
  3   106     2 ipc_r_factor fixed bin (35) unsigned,
  3   107     2 apad (10) fixed bin (35);
  3   108 
  3   109 /*  END INCLUDE FILE ... apte.incl.pl1 */
      908 
      909  /* BEGIN INCLUDE FILE ... daemon_user_table.incl.pl1 */
  4     2 
  4     3 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  4     4 /*							       */
  4     5 /* The daemon_user_table has one entry per daemon.  Daemons are logged in by */
  4     6 /* operator command or automatically.  If they do any I/O, it is done via    */
  4     7 /* the message coordinator.					       */
  4     8 /*							       */
  4     9 /* Programs using this include file must also use user_table_header.incl.pl1 */
  4    10 /* and user_table_entry.incl.pl1.				       */
  4    11 /*							       */
  4    12 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  4    13 
  4    14 
  4    15 /****^  HISTORY COMMENTS:
  4    16*  1) change(81-09-10,Kittlitz), approve(), audit(), install():
  4    17*     Initially coded from dutbl.incl.pl1.
  4    18*  2) change(87-04-26,GDixon), approve(87-07-13,MCR7741),
  4    19*     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1056):
  4    20*      A) Add use of ut_header common to all user control tables.
  4    21*      B) Corrected padding prior to first ute entry.
  4    22*                                                   END HISTORY COMMENTS */
  4    23 
  4    24 
  4    25 dcl  DUTBL_version_4 fixed bin int static init (4);	/* version of this declaration */
  4    26 
  4    27 dcl  dutp ptr automatic init (null);
  4    28 
  4    29 dcl 1 dutbl based (dutp) aligned,			/* Daemon user table */
  4    30     2 header like ut_header,				/* Header common to all user tables. */
  4    31 
  4    32     2 active_count fixed bin,				/* the count of active daemons managed by DUM_ */
  4    33 
  4    34     2 entry_pad (117) fixed bin,			/* pad to 128 words */
  4    35     2 entry (0 refer (dutbl.current_size)) like ute;	/* daemon user entries */
  4    36 
  4    37 /* END INCLUDE FILE ... daemon_user_table.incl.pl1 */
      909 
      910  /* BEGIN INCLUDE FILE ips_mask_data.incl.pl1 */
  5     2 /* Added all_valid_ips_mask, Benson Margulies 83-12 */
  5     3 
  5     4 dcl 1 sys_info$ips_mask_data ext aligned,		/* structure of mask/name associations for IPS masks */
  5     5     2 count fixed bin,				/* number of ips signals currently in the system */
  5     6     2 mask (35),
  5     7       3 name char (32),				/* name of the ips signal */
  5     8       3 mask bit (36);				/* has one bit ON, the one for the current ips signal */
  5     9 
  5    10 dcl sys_info$all_valid_ips_mask bit (36) aligned external;
  5    11 
  5    12 /* END INCLUDE FILE ips_mask_data.incl.pl1 */
      910 
      911  /* Begin include file hc_lock.incl.pl1 BIM 2/82 */
  6     2 /* Replaced by hc_fast_lock.incl.pl1 RSC 11/84 because name of structure
  6     3*   encourages name conflicts.
  6     4*   USE HC_FAST_LOCK INSTEAD!
  6     5**/
  6     6 
  6     7 /* Lock format suitable for use with lock$lock_fast, unlock_fast */
  6     8 
  6     9 /* format: style3 */
  6    10 
  6    11 declare	lock_ptr		pointer;
  6    12 declare	1 lock		aligned based (lock_ptr),
  6    13 	  2 pid		bit (36) aligned,		/* holder of lock */
  6    14 	  2 event		bit (36) aligned,		/* event associated with lock */
  6    15 	  2 flags		aligned,
  6    16 	    3 notify_sw	bit (1) unaligned,
  6    17 	    3 pad		bit (35) unaligned;		/* certain locks use this pad, like dirs */
  6    18 
  6    19 /* End include file hc_lock.incl.pl1 */
      911 
      912  /* BEGIN INCLUDE FILE ... tcm.incl.pl1 ... used to generate tc_data cds */
  7     2 /* NOTE -- This include file has TWO counterparts in ALM: tc_meters.incl.alm and */
  7     3 /* wcte.incl.alm. They cannot be produced with cif, and must be kept up to date manually. */
  7     4 /* Modified 830914 to replace tty_polling_time with opc_polling_time... -E. A. Ranzenbach */
  7     5 /* Modified 1984.05.21 by M. Pandolf to add tc_suspend_lock */
  7     6 /* Modified 1984.11.26 by Keith Loepere for uid_array. */
  7     7 /* Modified 1984.12.06 by Keith Loepere for page create delaying. */
  7     8 
  7     9 dcl  tcmp ptr;
  7    10 
  7    11 dcl 1 tcm aligned based (tcmp),
  7    12     2 tc_suspend_lock like lock,			/* when locked, tc is suspended */
  7    13     2 cid2 fixed bin (18),
  7    14     2 cid3 fixed bin (18),
  7    15     2 cid4 fixed bin (18),
  7    16     2 depth_count fixed bin (18),			/* depth last process run */
  7    17     2 loadings fixed bin (18),			/* number of process loadings */
  7    18 
  7    19     2 blocks fixed bin (18),				/* number of calls to block */
  7    20     2 wakeups fixed bin (18),				/* number of calls to wakeup */
  7    21     2 waits fixed bin (18),				/* number of calls to wait */
  7    22     2 notifies fixed bin (18),			/* number of calls to notify */
  7    23     2 schedulings fixed bin (18),
  7    24     2 interactions fixed bin (18),			/* number of interactive schedulings */
  7    25     2 avequeue fixed bin (35, 18),			/* recent time average of number in queue */
  7    26     2 te_wait fixed bin (18),				/* times te called from wait */
  7    27 
  7    28     2 te_block fixed bin (18),			/* times te updated from block */
  7    29     2 te_i_stop fixed bin (18),			/* times te updated from i_stop */
  7    30     2 te_pre_empt fixed bin (18),			/* times te updated from pre_empt */
  7    31     2 p_interactions fixed bin,			/* times interaction bit turned off because of high priority */
  7    32     2 idle fixed bin (71),				/* total idle time */
  7    33     2 mp_idle fixed bin (71),				/* multi-programming idle */
  7    34 
  7    35     2 nmp_idle fixed bin (71),			/* non-multi-programming idle time */
  7    36     2 zero_idle fixed bin (71),			/* zero idle time */
  7    37     2 last_time fixed bin (71),			/* last time a process was run */
  7    38     2 loop_locks fixed bin (18),			/* times looped on the APT lock */
  7    39     2 loop_lock_time fixed bin (18),			/* time looping on the APT lock */
  7    40     2 ave_eligible fixed bin (35, 18),			/* average length of eligible queue */
  7    41     2 sort_to_elhead fixed bin (18),			/* 0=> no one,1 => int've only, 2 => everybody */
  7    42     2 processor_time fixed bin (71),			/* total processor time on system */
  7    43     2 response_time fixed bin (71),			/* estimate of response time */
  7    44     2 eligible_time fixed bin (71),			/* estimate of eligible time */
  7    45     2 response_count fixed bin,			/* count of response meters */
  7    46     2 eligible_count fixed bin,			/* count of eligible meters */
  7    47     2 quit_counts (0:5) fixed bin,			/* array of buckets indexed by state */
  7    48     2 loading_idle fixed bin (71),			/* loading_idle time */
  7    49     2 delta_vcpu fixed bin (71),			/* delta virtual CPU time for the system */
  7    50     2 post_purge_switch fixed bin,			/* ON if post purging is to be done */
  7    51     2 time_out_severity fixed bin,			/* syserr first arg for notify time outs */
  7    52     2 notify_check fixed bin,				/* obsolete */
  7    53     2 quit_priority fixed bin,			/* factor for scheduler quit response */
  7    54     2 iobm_polling_time fixed bin (71),			/* time to poll iobm */
  7    55     2 end_of_time fixed bin (71),			/* very large time */
  7    56     2 gp_at_notify fixed bin (18),			/* 0 => just do get_idle_processor */
  7    57     2 gp_at_ptlnotify fixed bin (18),			/* 0 => just do get_idle_processor */
  7    58     2 int_q_enabled fixed bin (18),			/* 0 => no intv q in percent mode */
  7    59     2 fnp_buffer_threshold fixed bin (18),		/* if fewer free buffs then stingy alloc strategy */
  7    60 						/* set this to >= half n_ttylines/fnp for safety */
  7    61 
  7    62 /* 100 octal */
  7    63 
  7    64     2 depths (8) fixed bin (18),			/* histogram of run depths */
  7    65     2 tdepths (8) fixed bin (71),			/* histogram of times run per depth */
  7    66     2 pfdepth (8) fixed bin (18),			/* histogram of page faults per depth */
  7    67 
  7    68     2 ptl_not_waits fixed bin (18),			/* times ptl_wait noticed ptl was unlocked */
  7    69     2 gw_gp_window_count fixed bin (18),		/* times window noticed */
  7    70     2 metering_lock fixed bin (18),			/* 0=locked, else unlocked */
  7    71     2 ptl_waits fixed bin (18),			/* num calls to ptl_wait */
  7    72     2 gp_start_count fixed bin (18),			/*  to detect gw_gp window lossage */
  7    73     2 gp_done_count fixed bin (18),
  7    74     2 nto_check_time fixed bin (71),			/* next time at which nto code will be called */
  7    75     2 nto_delta fixed bin (35),			/* microsec between nto checks */
  7    76     2 nto_count fixed bin (18),			/* number of times nto detected */
  7    77     2 tcpu_scheduling fixed bin (18),			/* obsolete				*/
  7    78     2 nto_event bit (36),				/* last event which NTO'd */
  7    79     2 page_notifies fixed bin (18),
  7    80     2 notify_nobody_count fixed bin (18),
  7    81     2 notify_nobody_event bit (36),
  7    82     2 system_type fixed bin,				/* used to be tcm.inter */
  7    83 
  7    84     2 stat (0:15) fixed bin (18),			/* num apte's in each state */
  7    85 
  7    86 /* 200 octal */
  7    87 
  7    88     2 wait (8),
  7    89       3 time fixed bin (18),				/* histogram of page fault waiting times versus did */
  7    90       3 count fixed bin (18),
  7    91 
  7    92     2 ready (8),
  7    93       3 time fixed bin (18),				/* histogram of times in ready queue */
  7    94       3 count fixed bin (18),
  7    95 
  7    96     2 total_pf_time fixed bin (71),			/* total time spent from start to end of
  7    97*						   all page faults */
  7    98     2 total_pf_count fixed bin (18),			/* total number of page faults metered */
  7    99     2 auto_tune_ws fixed bin (18),			/* 0=> dont, atherwise compensate for quantum len */
  7   100     2 ocore_delta fixed bin (18),			/* number of pages reserved for int users */
  7   101     2 ws_sum fixed bin (18),				/* total of eligible's ws_sizes */
  7   102     2 nonidle_force_count fixed bin (18),		/* count of eligibilities forced */
  7   103     2 itt_list_lock bit (36) aligned,			/* Lock on ITT free list */
  7   104     2 cpu_pf_time fixed bin (71),			/* total cpu time spent handling page faults */
  7   105     2 cpu_pf_count fixed bin (18),			/* total count of cpu time meterings */
  7   106     2 special_offsets unaligned,
  7   107       3 apt_offset bit (18),
  7   108       3 pad bit (18),
  7   109     2 getwork_time fixed bin (71),			/* total time spent in getwork */
  7   110     2 getwork_count fixed bin (18),			/* total times through getwork */
  7   111     2 short_pf_count fixed bin (18),			/* number of short page faults */
  7   112     2 interrupt_time fixed bin (71),			/* total time spent in interrupt */
  7   113     2 interrupt_count fixed bin (71),			/* total number of metered interrupts */
  7   114     2 ocore fixed bin (35, 18),			/* fraction of core for int've users */
  7   115     2 pre_empt_flag bit (36) aligned,			/* controls whether preempting at done time */
  7   116     2 cumulative_memory_usage fixed binary (71),		/* total number of memory usage units */
  7   117     2 processor_time_at_define_wc fixed bin (71),		/* value of processor_time when WC's last defined */
  7   118     2 boost_priority fixed bin,			/* number of times priority process given high priority */
  7   119     2 lost_priority fixed bin,			/* number of times priority process lost eligibility */
  7   120     2 total_clock_lag fixed bin (71),			/* sum of all simulated clock delays */
  7   121     2 clock_simulations fixed bin,			/* number of times alarm clock interrupt was simulated */
  7   122     2 max_clock_lag fixed bin,			/* largest simulated alarm clock delay */
  7   123 
  7   124 /* 300 octal */
  7   125 
  7   126     2 pdscopyl fixed bin (18),			/* amount of pds to copy for new process */
  7   127     2 max_hproc_segno fixed bin,			/* largest allowed hardcore segment number */
  7   128     2 prds_length fixed bin (18),			/* length of PRDS */
  7   129     2 pds_length fixed bin (18),			/* length of PDS */
  7   130     2 lock fixed bin (18),				/* process id generator lock */
  7   131     2 id bit (36) aligned,				/* next uid to be added to uid_array */
  7   132     2 system_shutdown fixed bin (18),
  7   133     2 working_set_factor fixed bin (35, 18),		/* working set factor */
  7   134 
  7   135     2 ncpu fixed bin (18),				/* number of processors currently being used */
  7   136     2 last_eligible bit (18),				/* last process to gain eligibility */
  7   137     2 apt_lock fixed bin (35),			/* + write; 0 hidden; -1 unlocked; -(N+1) Nreaders */
  7   138     2 apt_size fixed bin (18),			/* number of APT entries */
  7   139     2 realtime_q aligned like based_sentinel,		/* processes with realtime deadlines */
  7   140     2 aht_size fixed bin (18),			/* APT hash table size */
  7   141     2 itt_size fixed bin (18),			/* number of ITT entries */
  7   142 
  7   143     2 dst_size fixed bin (18),			/* number of allowed DST entries */
  7   144     2 itt_free_list bit (18),				/* pointer to ITT free list */
  7   145     2 used_itt fixed bin (18),			/* number of used ITT entries */
  7   146     2 initializer_id bit (36) aligned,			/* process id of initializer */
  7   147     2 n_eligible fixed bin (18),			/* number of processes eligible */
  7   148     2 max_eligible fixed bin (30),			/* maximum allowed number of eligible processes */
  7   149     2 wait_enable fixed bin (18),			/* turned on when waiting mechanism works */
  7   150     2 apt_entry_size fixed bin (18),			/* size of an APT entry */
  7   151 
  7   152     2 interactive_q aligned like based_sentinel,		/* head of interactive queue */
  7   153     2 dst_ptr ptr,					/* pointer to device signal table */
  7   154     2 old_user ptr,					/* last process to run (apt ptr ) */
  7   155     2 initialize_time fixed bin (71),			/* time of initialization */
  7   156 
  7   157     2 init_event fixed bin (18),			/* wait event during initialization */
  7   158     2 oldt fixed bin (18),				/* timer reading from previous process */
  7   159     2 newt fixed bin (18),				/* timer setting for new process */
  7   160     2 tefirst fixed bin (30),				/* first eligible time */
  7   161     2 telast fixed bin (30),				/* last eligible time */
  7   162     2 timax fixed bin (35),				/* time in queue for lowest level */
  7   163     2 empty_q bit (18),				/* thread of empty APT entries */
  7   164     2 working_set_addend fixed bin (18),		/* additive working set parameter */
  7   165     2 ready_q_head bit (0) aligned,			/* for added segdef */
  7   166     2 eligible_q_head aligned like based_sentinel,	/* head of eligible queue */
  7   167     2 ready_q_tail bit (0) aligned,			/* for added segdef */
  7   168     2 eligible_q_tail aligned like based_sentinel,	/* tail of eligible queue */
  7   169     2 idle_tail aligned like based_sentinel,		/* tail of idle list */
  7   170     2 min_eligible fixed bin (30),
  7   171     2 alarm_timer_list bit (18) aligned,		/* rel pointer to apt entry for next alarm timer */
  7   172     2 guaranteed_elig_inc fixed bin (35),		/* amount of guaranteed eligibility time in microsecs. */
  7   173     2 priority_sched_inc fixed bin (35),		/* amount of block time before process is given priority */
  7   174     2 next_alarm_time fixed bin (71),			/* clock time for next alarm timer */
  7   175     2 priority_sched_time fixed bin (71),		/* time for priority process to be given priority */
  7   176     2 opc_polling_time fixed bin (71),			/* time to poll console DIM */
  7   177     2 disk_polling_time fixed bin (71),			/* time to poll disk DIM */
  7   178     2 tape_polling_time fixed bin (71),			/* time to poll tape DIM */
  7   179     2 imp_polling_time fixed bin (71),			/* time to poll imp */
  7   180     2 imp_polling_lock fixed bin (18),			/* do not poll if lock set */
  7   181     2 max_channels fixed bin (18),			/* num special channels per process */
  7   182 
  7   183 /* 400 octal */
  7   184 
  7   185     2 system_virtual_time fixed bin (71),		/* non-idle virtual time */
  7   186     2 credit_bank fixed bin (71),			/* credits not yet passed out */
  7   187     2 min_wct_index bit (18) aligned,			/* offset of initializer work class table entry */
  7   188     2 max_wct_index bit (18) aligned,			/* offset of highest wcte currently defined */
  7   189     2 delta_vt fixed bin (71),			/* temp used by pxss.compute_virtual_clocks */
  7   190     2 gross_idle_time fixed bin (71),			/* idle time_used_clock */
  7   191     2 credits_per_scatter fixed bin (35),		/* total number of credits awarded at once */
  7   192     2 best_credit_value fixed bin (18),			/* temp for pxss.find_next_eligible */
  7   193     2 define_wc_time fixed bin (71),			/* clock time when workclasses last degined */
  7   194     2 max_batch_elig fixed bin (35),
  7   195     2 num_batch_elig fixed bin (35),
  7   196     2 deadline_mode fixed bin (35),			/* 0=> ti sorts, else deadline sorts */
  7   197     2 credits_scattered fixed bin (35),
  7   198     2 max_max_eligible fixed bin (30),			/* Maximum of maxe */
  7   199     2 max_stopped_stack_0 fixed bin (35),		/* Maximum stack_0's suspended by stopped procs	*/
  7   200     2 stopped_stack_0 fixed bin (35),			/* Number stack_0's suspended by stopped procs	*/
  7   201     2 mos_polling_interval fixed bin (35),		/* for heals */
  7   202     2 mos_polling_time fixed bin (71),			/* for heals */
  7   203     2 vcpu_response_bounds (VCPU_RESPONSE_BOUNDS) fixed bin (35),
  7   204     2 vcpu_response_bounds_size fixed bin (35),
  7   205     2 meter_response_time_calls fixed bin (35),
  7   206     2 meter_response_time_invalid fixed bin (35),
  7   207     2 meter_response_time_overhead fixed bin (71),
  7   208     2 init_wait_time fixed bin (71),			/* used by wait/notify during initialization	*/
  7   209     2 init_wait_timeout fixed bin (71),			/* notify-timeout interval during initialization	*/
  7   210     2 init_timeout_severity fixed bin,			/* notify-timeout severity during initialization	*/
  7   211     2 init_timeout_recurse fixed bin,			/* count of NTO recursion during initialization	*/
  7   212     2 max_timer_register fixed bin (71),		/* max cpu burst = # cpus x pre_empt_sample_time	*/
  7   213     2 pre_empt_sample_time fixed bin (35),		/* tuning parameter - max time between samples	*/
  7   214     2 governing_credit_bank fixed bin (35),		/* used for limiting eligibility on governed work classes*/
  7   215     2 process_initial_quantum fixed bin (35),		/* eligibility quantum first eligibility	*/
  7   216     2 default_procs_required bit (8) aligned,		/* default mask of CPUs required */
  7   217     2 work_class_idle fixed bin (71),			/* idle time due to work class restrictions */
  7   218 
  7   219 /* Tuning Parameters for Stack Truncation */
  7   220 
  7   221     2 stk_truncate bit (1) aligned,
  7   222     2 stk_truncate_always bit (1) aligned,
  7   223     2 stk_trunc_avg_f1 fixed bin (35, 18),
  7   224     2 stk_trunc_avg_f2 fixed bin (35, 18),
  7   225     2 lock_error_severity fixed bin,                        /* syserr severity */
  7   226 
  7   227     2 gv_integration fixed bin (35),			/* Integration interval for governing */
  7   228     2 gv_integration_set bit (1) aligned,		/* ON => gv_integration set by ctp */
  7   229     2 pauses fixed bin (35),				/* Calls to pause (reschedule) */
  7   230     2 volmap_polling_time fixed bin (71),
  7   231     2 next_ring0_timer fixed bin (71),			/* next time that ring 0 timer goes off */
  7   232     2 realtime_io_priority_switch fixed bin,		/* 0 => give I/O interrupt wakeups realtime priotiry */
  7   233     2 realtime_io_deadline fixed bin (35),		/* Delta to clock for I/O realtime deadline */
  7   234     2 realtime_io_quantum fixed bin (35),		/* Quantum for I/O realtime burst */
  7   235     2 realtime_priorities fixed bin (35),		/* Count for metering */
  7   236     2 relinquishes fixed bin (35),			/* Calls to relinquish_priority */
  7   237     2 abort_ips_mask bit (36) aligned,			/* IPS mask for tc_util$check_abort */
  7   238 
  7   239 /* 500 octal */
  7   240 
  7   241     2 uid_array (0:15) bit (36) aligned,		/* array from which a uid is chosen (randomly) */
  7   242     2 pad5 (176) fixed bin (35),			/* room for expansion compatibly		*/
  7   243 
  7   244 /* 1000 octal */
  7   245 
  7   246     2 pad7 (64) fixed bin (35),
  7   247 
  7   248 /* 1100 octal */
  7   249 
  7   250     2 pad6 (8) fixed bin (35),
  7   251     2 work_class_table aligned,			/* array of per workclass information */
  7   252       3 wcte (0:16) aligned like wct_entry,
  7   253 
  7   254 /* 3000 octal */
  7   255 
  7   256     2 apt fixed bin;
  7   257 
  7   258 dcl  wctep ptr;
  7   259 
  7   260 dcl 1 wct_entry aligned based (wctep),			/* Work class entry */
  7   261     2 thread unaligned,				/* Ready list */
  7   262       3 fp bit (18),				/* Head of ready list */
  7   263       3 bp bit (18),				/* Tail of ready list */
  7   264     2 flags unaligned,
  7   265       3 mnbz bit (1),				/* Sentinel bit must not be zero. */
  7   266       3 defined bit (1),
  7   267       3 io_priority bit (1),
  7   268       3 governed bit (1),
  7   269       3 interactive_q bit (1),
  7   270       3 pad bit (31),
  7   271     2 credits fixed bin (35),				/* Current worthiness of group */
  7   272     2 minf fixed bin (35),				/* min fraction of cpu */
  7   273     2 pin_weight fixed bin (35),			/* number of cycles to pin pages */
  7   274     2 eligibilities fixed bin (35),			/* Count of eligibilities awarded */
  7   275     2 cpu_sum fixed bin (71),				/* CPU used by members */
  7   276     2 resp1 fixed bin (71),
  7   277     2 resp2 fixed bin (71),
  7   278     2 quantum1 fixed bin (35),
  7   279     2 quantum2 fixed bin (35),
  7   280     2 rmeter1 fixed bin (71),
  7   281     2 rmeter2 fixed bin (71),
  7   282     2 rcount1 fixed bin (35),
  7   283     2 rcount2 fixed bin (35),
  7   284     2 realtime fixed bin (35),
  7   285     2 purging fixed bin (35),
  7   286     2 maxel fixed bin (35),
  7   287     2 nel fixed bin (35),
  7   288     2 number_thinks fixed bin (35),			/* number times process entered "think" state	*/
  7   289     2 number_queues fixed bin (35),			/* number times process entered "queued" state	*/
  7   290     2 total_think_time fixed bin (71),
  7   291     2 total_queue_time fixed bin (71),
  7   292 
  7   293 /*  The next three arrays  correspond to the array vcpu_response_bounds				*/
  7   294 
  7   295     2 number_processing (VCPU_RESPONSE_BOUNDS+1) fixed bin (35), /* number times entered "processing" state	*/
  7   296     2 total_processing_time (VCPU_RESPONSE_BOUNDS+1) fixed bin (71),
  7   297     2 total_vcpu_time (VCPU_RESPONSE_BOUNDS+1) fixed bin (71),
  7   298     2 maxf fixed bin (35),				/* maximum fraction of cpu time		*/
  7   299     2 governing_credits fixed bin (35),			/* for limiting cpu resources			*/
  7   300     2 pad1 (4) fixed bin (35);
  7   301 	
  7   302 
  7   303 dcl 1 based_sentinel aligned based,			/* format of pxss-style sentinel */
  7   304     2 fp bit (18) unal,
  7   305     2 bp bit (18) unal,
  7   306     2 sentinel bit (36) aligned;
  7   307 
  7   308 dcl VCPU_RESPONSE_BOUNDS fixed bin init (3) int static options (constant);
  7   309 
  7   310 /* END INCLUDE FILE tcm.incl.pl1 */
      912 
      913  /* BEGIN INCLUDE FILE ... user_attributes.incl.pl1  TAC 10/79 */
  8     2 
  8     3 
  8     4 /****^  HISTORY COMMENTS:
  8     5*  1) change(86-12-11,Brunelle), approve(87-07-13,MCR7741),
  8     6*     audit(87-04-19,GDixon), install(87-08-04,MR12.1-1056):
  8     7*     Add incl for abs_attributes.incl.pl1 to automatically include absentee
  8     8*     attribute switches.
  8     9*  2) change(87-04-19,GDixon), approve(87-07-13,MCR7741),
  8    10*     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1056):
  8    11*      A) Add USER_ATTRIBUTE_NAMES arrays.  attribute_names.incl.pl1 can thereby
  8    12*         be deleted.
  8    13*      B) Add constants identifying attributes that can be changed by user at
  8    14*         login, etc.
  8    15*                                                   END HISTORY COMMENTS */
  8    16 
  8    17 
  8    18 /* Modified 82-01-03  E. N. Kittlitz.  to declare a complete level-1 structure */
  8    19 
  8    20 /* format: style4 */
  8    21 dcl  1 user_attributes aligned based,			/* the user user_attributes */
  8    22        (2 administrator bit (1),			/* 1  system administrator privileges */
  8    23        2 primary_line bit (1),			/* 2  user has primary-line privileges  */
  8    24        2 nobump bit (1),				/* 2  user cannot be bumped */
  8    25        2 guaranteed_login bit (1),			/* 4  user has guaranteed login privileges */
  8    26        2 anonymous bit (1),				/* 5  used only in SAT. project may have anon.users */
  8    27        2 nopreempt bit (1),				/* 6  used only in PDT. user not preemptable by others
  8    28*						   .  of same project (distinct from "nobump") */
  8    29        2 nolist bit (1),				/* 7  don't list user on "who" */
  8    30        2 dialok bit (1),				/* 8  user may have multiple consoles */
  8    31        2 multip bit (1),				/* 9  user may have several processes */
  8    32        2 bumping bit (1),				/* 10 in SAT. Can users in project bump each other? */
  8    33        2 brief bit (1),				/* 11 no login or logout message */
  8    34        2 vinitproc bit (1),				/* 12 user may change initial procedure */
  8    35        2 vhomedir bit (1),				/* 13 user may change homedir */
  8    36        2 nostartup bit (1),				/* 14 user does not want start_up.ec */
  8    37        2 sb_ok bit (1),				/* 15 user may be standby */
  8    38        2 pm_ok bit (1),				/* 16 user may be primary */
  8    39        2 eo_ok bit (1),				/* 17 user may be edit_only */
  8    40        2 daemon bit (1),				/* 18 user may login as daemon */
  8    41        2 vdim bit (1),				/* 19 * OBSOLETE * user may change outer mdle */
  8    42        2 no_warning bit (1),				/* 20 no warning message */
  8    43        2 igroup bit (1),				/* 21 in SAT: this project may give its users individual groups
  8    44*						   .  in PDT: this user has an individual load control group */
  8    45        2 save_pdir bit (1),				/* 22 save pdir after fatal process error */
  8    46        2 disconnect_ok bit (1),			/* 23 ok to save user's disconnected processes */
  8    47        2 save_on_disconnect bit (1),			/* 24 save them unless -nosave login arg is given */
  8    48        2 pad bit (12)) unaligned;
  8    49 
  8    50 dcl  USER_ATTRIBUTE_NAMES (0:24) char (20) int static options (constant) init
  8    51     ("none",					/* 0 */
  8    52      "administrator",				/* 1 */
  8    53      "primary_line",				/* 2 */
  8    54      "nobump",					/* 3 */
  8    55      "guaranteed_login",				/* 4 */
  8    56      "anonymous",					/* 5 */
  8    57      "nopreempt",					/* 6 */
  8    58      "nolist",					/* 7 */
  8    59      "dialok",					/* 8 */
  8    60      "multip",					/* 9 */
  8    61      "bumping",					/* 10 */
  8    62      "brief",					/* 11 */
  8    63      "vinitproc",					/* 12 */
  8    64      "vhomedir",					/* 13 */
  8    65      "nostartup",					/* 14 */
  8    66      "no_secondary",				/* 15 */
  8    67      "no_prime",					/* 16 */
  8    68      "no_eo",					/* 17 */
  8    69      "daemon",					/* 18 */
  8    70      "",						/* 19 vdim OBSOLETE */
  8    71      "no_warning",					/* 20 */
  8    72      "igroup",					/* 21 */
  8    73      "save_pdir",					/* 22 */
  8    74      "disconnect_ok",				/* 23 */
  8    75      "save_on_disconnect");				/* 24 */
  8    76 
  8    77 dcl  ALT_USER_ATTRIBUTE_NAMES (0:24) char (20) int static options (constant) init
  8    78     ("null",					/* 0 */
  8    79      "admin",					/* 1 */
  8    80      "", "",					/* 2 - 3 */
  8    81      "guar",					/* 4 */
  8    82      "anon",					/* 5 */
  8    83      "", "",					/* 6 - 7 */
  8    84      "dial",					/* 8 */
  8    85      "multi_login",					/* 9 */
  8    86      "preempting",					/* 10 */
  8    87      "",						/* 11 */
  8    88      "v_process_overseer",				/* 12 */
  8    89      "v_home_dir",					/* 13 */
  8    90      "no_start_up",					/* 14 */
  8    91      "no_sec",					/* 15 */
  8    92      "no_primary",					/* 16 */
  8    93      "no_edit_only",				/* 17 */
  8    94      "op_login",					/* 18 */
  8    95      "",						/* 19 */
  8    96      "nowarn",					/* 20 */
  8    97      "", "", "",					/* 21 - 23 */
  8    98      "save");					/* 24 */
  8    99 
  8   100 dcl  USER_ATTRIBUTES_always_allowed bit (36) aligned int static
  8   101      options(constant) init("000000000010000000010000000000000000"b);
  8   102     /* SAT/PDT attributes not needed for user to give (brief, no_warning) */
  8   103 
  8   104 dcl  USER_ATTRIBUTES_default_in_pdt bit (36) aligned int static
  8   105      options(constant) init("000000000010000000010000000000000000"b);
  8   106     /* PDT value for (brief, no_warning) is default */
  8   107 
  8   108 dcl  USER_ATTRIBUTES_settable_by_user bit (36) aligned int static
  8   109      options(constant) init("000100000110010000010000000000000000"b);	
  8   110     /* user MIGHT set (bump, ns, brief, guar, no_warning) */
  8   111 
  9     1 /* BEGIN INCLUDE FILE ... user_abs_attributes.incl.pl1 */
  9     2 
  9     3 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  9     4 /*							       */
  9     5 /* This include file describes the attributes of an absentee job.  It is     */
  9     6 /* used by user_table_entry.incl.pl1, abs_message_format.incl.pl1            */
  9     7 /* and PIT.incl.pl1.   */
  9     8 /*							       */
  9     9 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  9    10 
  9    11 /****^  HISTORY COMMENTS:
  9    12*  1) change(86-12-08,GDixon), approve(87-07-13,MCR7741),
  9    13*     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1056):
  9    14*     Separated abs_attributes from the request structure
  9    15*     (abs_message_format.incl.pl1) so that the identical structure could be
  9    16*     used in the ute structure (user_table_entry.incl.pl1).
  9    17*  2) change(87-04-19,GDixon), approve(87-07-13,MCR7741),
  9    18*     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1056):
  9    19*     Added ABS_ATTRIBUTE_NAMES array.
  9    20*  3) change(87-11-11,Parisek), approve(88-02-11,MCR7849),
  9    21*     audit(88-03-22,Lippard), install(88-07-13,MR12.2-1047):
  9    22*     Added the no_start_up flag. SCP6367
  9    23*                                                   END HISTORY COMMENTS */
  9    24 
  9    25 dcl 1 user_abs_attributes		aligned based,
  9    26       2 restartable			bit (1) unaligned,	/* 1 if request may be started over from the beginning */
  9    27       2 user_deferred_until_time	bit (1) unaligned,	/* 1 if request was specified as deferred */
  9    28       2 proxy			bit (1) unaligned,	/* 1 if request submitted for someone else */
  9    29       2 set_bit_cnt			bit (1) unaligned,	/* 1 if should set bit count after every write call */
  9    30       2 time_in_gmt			bit (1) unaligned,	/* 1 if deferred_time is in GMT */
  9    31       2 user_deferred_indefinitely	bit (1) unaligned,	/* 1 if operator is to say when to run it */
  9    32       2 secondary_ok		bit (1) unaligned,	/* 1 if ok to log in as secondary foreground user */
  9    33       2 truncate_absout		bit (1) unaligned,	/* 1 if .absout is to be truncated */
  9    34       2 restarted			bit (1) unaligned,	/* 1 if job is restarted */
  9    35       2 no_start_up                     bit (1) unaligned,	/* 1 if requested -ns */
  9    36       2 attributes_pad		bit (26) unaligned;
  9    37 
  9    38 dcl  ABS_ATTRIBUTE_NAMES (10) char (28) varying int static options(constant) init(
  9    39 	"restartable",
  9    40 	"user_deferred_until_time",
  9    41 	"proxy",
  9    42 	"set_bit_cnt",
  9    43 	"time_in_gmt",
  9    44 	"user_deferred_indefinitely",
  9    45 	"secondary_ok",
  9    46 	"truncate_absout",
  9    47 	"restarted",
  9    48 	"no_start_up");
  9    49 
  9    50 /* END INCLUDE FILE ... user_abs_attributes.incl.pl1 */
  9    51 
  8   112 
  8   113 
  8   114 /* END INCLUDE FILE ... user_attributes.incl.pl1 */
      913 
      914  /*  BEGIN INCLUDE FILE ... user_table_entry.incl.pl1 */
 10     2 
 10     3 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
 10     4 /*							       */
 10     5 /* This include file requires that the user include		       */
 10     6 /* user_attributes.incl.pl1 as well.  It also includes		       */
 10     7 /* abs_attributes.incl.pl1 itself.				       */
 10     8 /*							       */
 10     9 /* This include file must be included to use absentee_user_table.incl.pl1,   */
 10    10 /* answer_table.incl.pl1, and daemon_user_table.incl.pl1.		       */
 10    11 /*							       */
 10    12 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
 10    13 
 10    14 /****^  HISTORY COMMENTS:
 10    15*  1) change(81-12-21,Gilcrease), approve(86-03-27,MCR7370),
 10    16*     audit(86-06-23,Lippard), install(86-06-30,MR12.0-1082):
 10    17*     This comment for hcom.
 10    18*     81-12-21  E. N. Kittlitz. derived from abs_user_tab.incl.pl1,
 10    19*     anstbl.incl.pl1, and dutbl.incl.pl1.
 10    20*     82-01-02 E. N. Kittlitz. user_attributes.incl.pl1 changes
 10    21*     84-04-04 BIM added privileged_dial_server and dial_server_ring
 10    22*     84-07-12 BIM added min_process_authorization
 10    23*     84-12-31 Keith Loepere added pdir_dir_quota
 10    24*     85-01-16 by E. Swenson to add ute.session_uid
 10    25*  2) change(85-11-16,Swenson), approve(87-07-13,MCR7737),
 10    26*     audit(87-04-14,GDixon), install(87-08-04,MR12.1-1056):
 10    27*     Added fields for DSA login server support.
 10    28*  3) change(86-03-27,Gilcrease), approve(86-03-27,MCR7370),
 10    29*     audit(86-06-23,Lippard), install(86-06-30,MR12.0-1082):
 10    30*     Add truncate_absout and restarted bit for -truncate absout, SCP6297.
 10    31*  4) change(86-04-09,Herbst), approve(87-07-13,MCR7697),
 10    32*     audit(87-04-14,GDixon), install(87-08-04,MR12.1-1056):
 10    33*     Added disconnection_rel_minutes.
 10    34*  5) change(86-12-08,GDixon), approve(87-07-13,MCR7741),
 10    35*     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1056):
 10    36*     Changed structure under ute.abs_attributes to use like structure in
 10    37*     abs_attributes.incl.pl1.  This allows the same attributes to be used
 10    38*     in abs_message_format.incl.pl1 and pit.incl.pl1 as well as this include
 10    39*     file.
 10    40*  6) change(87-04-14,GDixon), approve(87-07-13,MCR7741),
 10    41*     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1056):
 10    42*     Move constants for ute.pw_flags.mask_ctl from answer_table.incl.pl1.
 10    43*  7) change(87-04-16,GDixon), approve(87-07-13,MCR7741),
 10    44*     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1056):
 10    45*      A) Global reorganization to locate things by type of data.
 10    46*      B) Eliminate ute.uflags.logged_in.
 10    47*  8) change(87-05-10,GDixon), approve(87-07-13,MCR7741),
 10    48*     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1056):
 10    49*      A) Reduced overlength person and project fields to proper length.
 10    50*      B) Adjusted dialed-console section to begin on even word boundary.
 10    51*  9) change(87-05-13,GDixon), approve(87-07-13,MCR7741),
 10    52*     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1056):
 10    53*     Add ute.line_type.
 10    54* 10) change(87-11-19,Parisek), approve(88-02-11,MCR7849),
 10    55*     audit(88-02-23,Lippard), install(88-07-13,MR12.2-1047):
 10    56*     Added the lowest_ring element. Used the upper half of ute.highest_ring
 10    57*     for the storage.  SCP6367
 10    58*                                                   END HISTORY COMMENTS */
 10    59 
 10    60 /* format: style4 */
 10    61 
 10    62 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
 10    63 /*							       */
 10    64 /* Each of the named sections below defines a type of data.  Typing comes    */
 10    65 /* from data associated with the ute entry itself, with the person, with     */
 10    66 /* login argument data, from the main user of the data (eg, dialup_,	       */
 10    67 /* load_ctl_, login server).  Each section begins on a double-word boundary  */
 10    68 /* and is an even number of words long.  The total structure is 300 decimal  */
 10    69 /* words long.						       */
 10    70 /*							       */
 10    71 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
 10    72 
 10    73 
 10    74 dcl  UTE_version_4 fixed bin internal static options (constant) init (4);
 10    75 
 10    76 dcl  utep pointer automatic init (null);
 10    77 
 10    78 dcl  1 ute based (utep) aligned,			/* individual entry in one of the user control tables */
 10    79 
 10    80 /* Variables which give state of this entry */
 10    81        2 active fixed bin,				/* state of entry. 0=>free. see dialup_values.incl.pl1 */
 10    82        2 process_type fixed bin,			/* 1=interactive, 2=absentee, 3=daemon */
 10    83        2 ute_index fixed bin,				/* index of ute in (anstbl autbl dutbl).entry array */
 10    84        2 next_free fixed bin,				/* points to previous free entry */
 10    85 
 10    86 /* Information user gave about person_id associated with this entry. */
 10    87        2 person char (24) unal,			/* user's name */
 10    88        2 project char (12) unal,			/* project of absentee user */
 10    89        2 tag char (1) unal,				/* instance tag - someday will be generated */
 10    90        2 tag_pad bit (27) unal,
 10    91        2 anonymous fixed bin,				/* 1 if anonymous, otherwise 0 */
 10    92        2 login_flags,				/* flags for login data */
 10    93          3 cpw bit (1) unal,				/* flag for wish to change password */
 10    94          3 generate_pw bit (1) unal,			/* flag meaning -generate_pw (-gpw) was used. */
 10    95          3 special_pw unal,				/* dial or slave */
 10    96 	 4 dial_pw bit (1) unal,			/* true if dial -user */
 10    97 	 4 slave_pw bit (1) unal,			/* true if slave -user */
 10    98          3 cdp bit (1) unal,				/* flag for wish to change default project */
 10    99          3 cda bit (1) unal,				/* flag to change default authorization */
 10   100          3 auth_given bit (1) unal,			/* flag to mean -authorization was used. */
 10   101          3 noprint bit (1) unal,			/* used at logout. inhibits printing. */
 10   102          3 operator bit (1) unaligned,			/* user specified -operator on login command line */
 10   103          3 pw_pad bit (25) unal,			/* spare parts */
 10   104          3 mask_ctl bit (2) unal,			/* bits controlling pw mask. See constants, below */
 10   105 						/* Must remain last in pw_flags so it does not */
 10   106 						/* appear in PW_FLAG_VALUES array below. */
 10   107        2 generated_pw char (8) unal,			/* user must type this as new password */
 10   108        2 old_password char (8) unal,			/* must match user's previous password (value scrambled) */
 10   109        2 process_authorization bit (72),		/* access_authorization of this process */
 10   110 
 10   111 /* Information user gave about process associated with this entry. */
 10   112        2 outer_module char (32) unal,			/* Name of console dim */
 10   113        2 home_dir char (64) unal,			/* initial home directory */
 10   114        2 init_proc char (64) unal,			/* name of login responder */
 10   115        2 ip_len fixed bin (17) unal,			/* length of initproc string */
 10   116        2 ss_len fixed bin (17) unal,			/* length of subsystem string */
 10   117        2 ur_at like user_attributes aligned,		/* bits on means attributes given by user */
 10   118        2 at like user_attributes aligned,		/* bits on means attribute is on */
 10   119        2 initial_ring fixed bin,			/* ring process will be started in */
 10   120        2 arg_count fixed bin,				/* number of arguments to absentee control segment */
 10   121        2 ln_args fixed bin,				/* length of string containing arguments */
 10   122        2 arg_lengths_ptr ptr,				/* pointer to array of argument lengths */
 10   123        2 args_ptr ptr,				/* pointer to arguments to absentee control segment */
 10   124 
 10   125 /* Most of the following information is relevant only to absentee processes */
 10   126        2 input_seg char (168) unal,			/* pathname of absentee control segment */
 10   127        2 output_seg char (168) unal,			/* pathname of absentee output file */
 10   128        2 request_id fixed bin (71),			/* time request was entered - used as uid of request */
 10   129        2 reservation_id fixed bin (71),			/* nonzero if job has a resource reservation */
 10   130        2 message_id bit (72),				/* message segment id assoc with absentee request */
 10   131        2 deferred_time fixed bin (71),			/* time at which absentee process should be created */
 10   132        2 max_cpu_time fixed bin (35),			/* maximum number of seconds this process can run */
 10   133        2 queue fixed bin,				/* -1=daemon;0=interactive or foreground;>0=queue no.
 10   134*						   (but see uflags.adjust_abs_q_no). */
 10   135        2 real_queue fixed bin,			/* real queue number; ute.queue gets fudged sometimes */
 10   136        2 abs_attributes aligned like user_abs_attributes,	/* include abs_attributes.incl.pl1 */
 10   137        2 abs_flags,
 10   138          3 abs_run bit (1) unal,			/* on if job was started by abs run command */
 10   139          3 notify bit (1) unal,			/* on if user wants notification at login and logout */
 10   140          3 abs_flags_pad bit (34) unal,
 10   141        2 abs_group char (8) unal,			/* original group before load_ctl_ moves it to absentee group */
 10   142        2 sender char (32) unal,			/* name of RJE station that job is from */
 10   143        2 proxy_person char (28) unal,			/* name of user who actually entered the request, if proxy */
 10   144        2 proxy_project char (9) unal,
 10   145        2 proxy_project_pad char (3) unal,
 10   146        2 abs_pad fixed bin,
 10   147 
 10   148 /* Information about process actually created */
 10   149        2 proc_id bit (36),				/* process id of absentee process */
 10   150        2 session_uid fixed bin (35),			/* Unique authentication session id */
 10   151        2 process_authorization_range (2) bit (72) aligned,
 10   152        2 audit bit (36),				/* audit flags for user */
 10   153        2 lot_size fixed bin,				/* Size of linkage offset table */
 10   154        2 kst_size fixed bin,				/* Size of process known segment table */
 10   155        2 cls_size fixed bin,				/* Size of process combined linkage */
 10   156        2 sus_channel fixed bin (71),			/* event channel on which suspended process is blocked */
 10   157        2 lowest_ring fixed bin (17) unal,		/* lowest ring permitted */
 10   158        2 highest_ring fixed bin (17) unal,		/* highest ring permitted */
 10   159        2 pdir_lvix fixed bin (17) unal,			/* index in disk table of lv where pdir is */
 10   160        2 pdir_quota fixed bin (17) unal,		/* process directory quota */
 10   161        2 pdir_dir_quota fixed bin (17) unal,		/* process directory quota for dirs */
 10   162        2 pdir_pad fixed bin(17) unal,
 10   163        2 process_pad fixed bin,
 10   164 
 10   165 /* Information about primary terminal associated with this entry */
 10   166        2 tty_name char (32) unal,			/* absentee=>"abs1", etc.  daemon=>"bk", etc. */
 10   167        2 terminal_type char (32) unaligned,		/* terminal type */
 10   168        2 line_type fixed bin,				/* line type */
 10   169        2 tty_id_code char (4) unal,			/* "none" for absentee */
 10   170        2 network_connection_type fixed bin,		/* see net_event_message.incl.pl1 */
 10   171        2 channel ptr unal,				/* points to CDT entry for user, if any */
 10   172 
 10   173 /* Variables useful for dialed terminals */
 10   174        2 ndialed_consoles fixed bin,			/* if master, number of slaves */
 10   175        2 dial_qualifier char (22) unal,			/* first argument to dial command */
 10   176        2 dial_server_ring fixed bin (3) unsigned unaligned, /* dial server intends to attach dialing in channels at this ring. */
 10   177        2 dial_server_flags,
 10   178          3 registered_dial_server bit (1) unal,		/* process is a registered dial server */
 10   179          3 privileged_dial_server bit (1) unal,		/* "1"b -> serves range of AIM classes */
 10   180          3 dial_server_flags_pad bit (13) unal,		/* fill out the word */
 10   181        2 dial_ev_chn fixed bin (71),			/* if master, control event channel */
 10   182 
 10   183 /* Information about usage/accounting.  Device usage meters are in a
 10   184*   separate segment, "devtab" */
 10   185        2 pdtep ptr,					/* ptr to user's pdt entry, where usage meters live */
 10   186        2 cpu_this_process fixed bin (71),		/* cpu used so far this process */
 10   187        2 cpu_usage fixed bin (71),			/* total cpu time used in this session */
 10   188        2 mem_usage fixed bin (71),			/* memory usage for previous processes in session */
 10   189        2 mem_this_process fixed bin (71),		/* memory usage at last update */
 10   190        2 last_update_time fixed bin (71),		/* time of last account update */
 10   191        2 session_cost float bin,			/* dollar cost of session, for printing in logout messages */
 10   192        2 ndevices fixed bin,				/* Count of attached devices */
 10   193        2 device_head fixed bin,			/* Table index of head of device chain */
 10   194        2 device_tail fixed bin,			/* Table index of tail of device chain */
 10   195        2 rs_number fixed bin (6) unsigned unal,		/* rate structure number */
 10   196        2 rs_number_pad bit(30) unal,
 10   197        2 usage_pad fixed bin,
 10   198 
 10   199 /* Information for dialup_ (control variables). */
 10   200        2 event fixed bin (71),			/* event associated with channel or user manager */
 10   201        2 uprojp ptr,				/* ptr to user project sat entry */
 10   202        2 login_time fixed bin (71),			/* time when absentee user approved by lg_ctl_ */
 10   203        2 cant_bump_until fixed bin (71),		/* bump-protection clock */
 10   204        2 recent_fatal_error_time fixed bin (71),		/* time of first error in the suspected loop */
 10   205        2 recent_fatal_error_count fixed bin,		/* counter to detect fatal process error loops */
 10   206        2 failure_reason fixed bin,			/* why login refused 1=lg_ctl, 2=act_ctl, 3=load_ctl */
 10   207        2 count fixed bin,				/* counter for logins and dialups */
 10   208        2 n_processes fixed bin,			/* number of processes created in this session */
 10   209        2 lock_value fixed bin,			/* number of locks set for this entry */
 10   210        2 login_result fixed bin,			/* 0=logged in;1=hopeless,hang him up;2=allow another attempt */
 10   211        2 login_code char (8) unal,			/* login command from LOGIN line */
 10   212        2 preempted fixed bin,				/* if ^= 0 user preempted (never for abs) */
 10   213        2 destroy_flag fixed bin,			/* >8 when awaiting destroy */
 10   214        2 logout_type char (4) unal,			/* type of logout */
 10   215        2 logout_index fixed bin,			/* to save logout handler index while waiting for termsgnl */
 10   216        2 disconnection_rel_minutes fixed bin (17) unal,	/* disconnected this many minutes after login_time */
 10   217        2 next_disconnected_ate_index fixed bin (17) unal,	/* thread of list of user's disconnected processes */
 10   218        2 work_class fixed bin,			/* work class used by priority scheduler */
 10   219        2 group char (8) unal,				/* party group identifier */
 10   220        2 whotabx fixed bin,				/* index of user's entry in whotab */
 10   221 
 10   222        2 uflags,					/* Miscellaneous flags */
 10   223          3 dont_call_init_admin bit (1) unal,		/* Call overseer directly */
 10   224          3 ip_given bit (1) unal,			/* user gave an initproc arg on login line */
 10   225          3 ss_given bit (1) unal,			/* initial_procedure contains a subsystem name */
 10   226          3 lvs_attached bit (1) unal,			/* set and used by the lv_request_ procedure */
 10   227          3 send_initial_string bit (1) unal,		/* initial string should be sent after login line read */
 10   228          3 adjust_abs_q_no bit (1) unal,		/* this is an absentee job; user_profile.queue is NOT true Q # */
 10   229          3 foreground_secondary_ok bit (1) unal,		/* ok to login foreground absentee job as secondary */
 10   230          3 foreground_job bit (1) unal,			/* job was originally from foreground queue */
 10   231          3 sus_sent bit (1) unal,			/* sus_ ips signal has been sent to process */
 10   232          3 suspended bit (1) unal,			/* process has responded to sus_ signal */
 10   233          3 ignore_cpulimit bit (1) unal,		/* process is released, but timer can't be turned off */
 10   234          3 deferral_logged bit (1) unal,		/* abs job deferral has already been logged once */
 10   235          3 save_if_disconnected bit (1) unal,		/* user wants process preserved across hangups */
 10   236          3 disconnected bit (1) unal,			/* process is disconnected from terminal */
 10   237          3 disconnected_list bit (1) unal,		/* this ate is on a list of disconnected processes */
 10   238          3 proc_create_ok bit (1) unal,			/* lg_ctl_ has set the process creation variables */
 10   239          3 activity_can_unbump bit (1) unal,		/* only bump pending is for inactivity */
 10   240          3 fpe_causes_logout bit (1) unal,		/* "1"b means don't try to new_proc after fatal process error */
 10   241          3 user_specified_immediate bit (1) unal,		/* "1"b -> don't wait around for process destruction. */
 10   242          3 uflags_pad bit (17) unal,
 10   243 
 10   244 /* Information used by load_ctl_ for the process */
 10   245        2 user_weight fixed bin,			/* usually 10 - used in load control */
 10   246        2 standby_line fixed bin,			/* 0=user has primary line, 1=standby user */
 10   247        2 bump_grace fixed bin (71),			/* bump grace in microseconds */
 10   248 
 10   249 
 10   250 /* Information for login server */
 10   251        2 login_server_info,
 10   252          3 our_handle bit (72) aligned,			/* how LS refers to us. */
 10   253          3 his_handle bit (72) aligned,			/* how we talk to LS */
 10   254          3 termination_event_channel fixed bin (71),	/* for process termination notifications to the LS */
 10   255          3 response_event_channel fixed bin (71),		/* for other communications with the LS */
 10   256          3 process_id bit (36) aligned,			/* process_id of login server */
 10   257        2 ls_pad (5) fixed bin;			/* pad to 300 decimal words */
 10   258 
 10   259 /* values for ute.process_type */
 10   260 
 10   261 dcl  (PT_INTERACTIVE initial (1),
 10   262      PT_ABSENTEE initial (2),
 10   263      PT_DAEMON initial (3)) fixed bin internal static options (constant);
 10   264 
 10   265 dcl  PROCESS_TYPE_NAMES (0:3) char(12) varying int static options(constant) init(
 10   266 	"INVALID-TYPE",
 10   267 	"interactive",
 10   268 	"absentee",
 10   269 	"daemon");
 10   270 
 10   271 dcl  TABLE_NAMES (0:3) char(20) int static options(constant) init(
 10   272 	"UNKNOWN-TABLE",
 10   273 	"answer_table",
 10   274 	"absentee_user_table",
 10   275 	"daemon_user_table");
 10   276 
 10   277 
 10   278 /* values for ute.pw_flags.mask_ctl  */
 10   279 
 10   280 dcl  (DO_MASK init ("00"b),
 10   281      DONT_MASK init ("01"b),
 10   282      DERIVE_MASK init ("10"b)) bit (2) internal static options (constant);
 10   283 
 10   284 dcl  MASK_CTL_NAMES (0:3) char(12) varying int static options(constant) init(
 10   285 	"do_mask", "dont_mask", "derive_mask", "");
 10   286 
 10   287 
 10   288 /* names for ute.pw_flags */
 10   289 
 10   290 dcl  PW_FLAG_NAMES (9) char (12) varying int static options(constant) init(
 10   291 	"cpw",
 10   292 	"generate_pw",
 10   293 	"dial_pw",
 10   294 	"slave_pw",
 10   295 	"cdp",
 10   296 	"cda",
 10   297 	"auth_given",
 10   298 	"noprint",
 10   299 	"operator");
 10   300 
 10   301 /* names for ute.uflags */
 10   302 
 10   303 dcl  UFLAG_NAMES (19) char (24) varying int static options (constant) init (
 10   304 	"dont_call_init_admin",
 10   305 	"ip_given",
 10   306 	"ss_given",
 10   307 	"lvs_attached",
 10   308 	"send_initial_string",
 10   309 	"adjust_abs_q_no",
 10   310 	"foreground_secondary_ok",
 10   311 	"foreground_job",
 10   312 	"sus_sent",
 10   313 	"suspended",
 10   314 	"ignore_cpulimit",
 10   315 	"deferral_logged",
 10   316 	"save_if_disconnected",
 10   317 	"disconnected",
 10   318 	"disconnected_list",
 10   319 	"proc_create_ok",
 10   320 	"activity_can_unbump",
 10   321 	"fpe_causes_logout",
 10   322 	"user_specified_immediate");
 10   323 
 10   324 /* names for ute.abs_flags */
 10   325 
 10   326 dcl  ABS_FLAG_NAMES (2) char (8) varying int static options (constant) init (
 10   327 	"abs_run",
 10   328 	"notify");
 10   329 
 10   330 /* names of ute.dial_server_flags */
 10   331 
 10   332 dcl  DIAL_SERVER_FLAG_NAMES (2) char (12) varying int static options (constant) init (
 10   333 	"registered",
 10   334 	"privileged");
 10   335 
 10   336 /* values of ute.login_result */
 10   337 
 10   338 dcl  LOGIN_RESULT_VALUES (0:2) char(24) varying int static options(constant) init(
 10   339 	"logged in",
 10   340 	"login failed, hangup",
 10   341 	"login failed, try again");
 10   342 
 10   343 /*  END INCLUDE FILE ... user_table_entry.incl.pl1 */
      914 
      915  /* BEGIN INCLUDE FILE ... user_table_header.incl.pl1 */
 11     2 
 11     3 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
 11     4 /*							       */
 11     5 /* This include file declares the header shared by the answer_table,	       */
 11     6 /* absentee_user_table and daemon_user_table include files.		       */
 11     7 /*							       */
 11     8 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
 11     9 
 11    10 /****^  HISTORY COMMENTS:
 11    11*  1) change(87-04-26,GDixon), approve(87-07-13,MCR7741),
 11    12*     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1056):
 11    13*     Initial coding.
 11    14*                                                   END HISTORY COMMENTS */
 11    15 
 11    16 dcl  1 ut_header			aligned based,	/* header shared by all user control tables. */
 11    17        2 header_version fixed bin,			/* version of the header (3) */
 11    18        2 entry_version fixed bin,			/* version of user table entries */
 11    19        2 user_table_type fixed bin,			/* 1 interactive, 2 absentee, 3 daemon */
 11    20        2 header_length fixed bin,			/* length of the header */
 11    21        2 max_size fixed bin,				/* max number of entries in this table */
 11    22        2 current_size fixed bin,			/* actual size of table (in entries) */
 11    23        2 number_free fixed bin,			/* number of free entries in the table. */
 11    24        2 first_free fixed bin,			/* index of first entry in the free list. */
 11    25        2 as_procid bit (36),				/* process ID of user table manager process */
 11    26        2 ut_header_pad fixed bin;
 11    27 
 11    28 /* END INCLUDE FILE ... user_table_header.incl.pl1 */
      915 
      916 
      917 /* format: on */
      918 
      919      end print_apt_entry;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    08/22/88  1301.8  print_apt_entry.pl1               >spec>install>1088>print_apt_entry.pl1
906          1    08/06/87  0913.4  absentee_user_table.incl.pl1      >ldd>include>absentee_user_table.incl.pl1
907          2    08/06/87  0913.0  answer_table.incl.pl1             >ldd>include>answer_table.incl.pl1
908          3    01/06/85  1422.2  apte.incl.pl1                     >ldd>include>apte.incl.pl1
909          4    08/06/87  0912.9  daemon_user_table.incl.pl1        >ldd>include>daemon_user_table.incl.pl1
910          5    07/11/84  0937.3  ips_mask_data.incl.pl1            >ldd>include>ips_mask_data.incl.pl1
911          6    01/06/85  1422.1  hc_lock.incl.pl1                  >ldd>include>hc_lock.incl.pl1
912          7    01/30/85  1523.9  tcm.incl.pl1                      >ldd>include>tcm.incl.pl1
913          8    08/06/87  0913.6  user_attributes.incl.pl1          >ldd>include>user_attributes.incl.pl1
8-112        9    07/14/88  2015.0  user_abs_attributes.incl.pl1      >ldd>include>user_abs_attributes.incl.pl1
914         10    07/14/88  2015.0  user_table_entry.incl.pl1         >ldd>include>user_table_entry.incl.pl1
915         11    08/06/87  0913.6  user_table_header.incl.pl1        >ldd>include>user_table_header.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
CAPS                            000000 constant        char(26)                 initial packed unaligned dcl 140 ref 880
UTE_SIZE                               constant        fixed bin(17,0)          initial dcl 2-120 ref 680 680
VCPU_RESPONSE_BOUNDS                   constant        fixed bin(17,0)          initial dcl 7-308 ref 220 220 220 220
a_time                                 parameter       fixed bin(71,0)          dcl 772 in procedure "time_of_day" set ref 770 775*
a_time                                 parameter       fixed bin(71,0)          dcl 781 in procedure "time_interval" ref 779 793
a_user_id                              parameter       char(32)                 packed unaligned dcl 675 set ref 673 711* 717*
abs_attributes          247            based           structure                level 2 dcl 10-78
active                                 based           fixed bin(17,0)          level 2 dcl 10-78 ref 681 690 699
active_fnc_err_                 000034 constant        entry                    external dcl 158 ref 200
addr                                                   builtin function         dcl 179 ref 312 322 478 483 491 553 553 553 589 589
                                                                                  592 607 650 650 665 680 689 698 705 849 861 862
                                                                                  862 867
adjust_abs_q_no         431(05)        based           bit(1)                   level 3 packed packed unaligned dcl 10-78 ref 443
af_sw                           000114 automatic       bit(1)                   initial dcl 91 set ref 91* 199* 204* 215 295 390 499
                                                                                  711
after                                                  builtin function         dcl 179 ref 888 890 890
al                              000102 automatic       fixed bin(17,0)          dcl 69 set ref 226* 232 237 237 239 239 239 241 241
                                                                                  243 245 245 247 249 252 252 252 252 252 262 264
                                                                                  266 266 268 268 270 270 272 272 274 274 276 276
                                                                                  276 276 278 278 278 278 284 284 351* 353 355 357
                                                                                  357 359 359 365 371 371 373 406
alarm_time               26(18)        based           bit(54)                  level 2 packed packed unaligned dcl 3-7 ref 634 637
                                                                                  638
alrm                            000144 automatic       fixed bin(71,0)          dcl 105 set ref 636* 638* 639* 640 640 650 650 650
                                                                                  650* 650*
ansp                            000550 automatic       pointer                  initial dcl 2-53 set ref 2-53* 677 680 744*
anstbl                                 based           structure                level 1 dcl 2-55
ap                              000100 automatic       pointer                  dcl 68 set ref 226* 232 237 237 239 239 239 241 241
                                                                                  243 245 245 247 249 252 252 252 252 252 262 264
                                                                                  266 266 268 268 270 270 272 272 274 274 276 276
                                                                                  276 276 278 278 278 278 284 351* 353 355 357 357
                                                                                  359 359 365 371 373 406
apte                                   based           structure                level 1 dcl 3-7 set ref 473 473 664 868
apte1_offset                    000010 internal static fixed bin(17,0)          initial dcl 144 set ref 220 220* 484 868 868
apte_offset                     000143 automatic       fixed bin(18,0)          dcl 103 set ref 483* 484 867* 868 868
apte_offset_sw                  000115 automatic       bit(1)                   initial dcl 91 set ref 91* 362* 428 471 478 705*
                                                                                  863* 870
aptep                           000552 automatic       pointer                  dcl 3-5 set ref 322* 473* 473 473 478 494 494 520
                                                                                  520 520 520 520 520 520 520 520 520 520 544 549
                                                                                  553 553 553 553 553 553 553 553 553 553 553 553
                                                                                  553 553 574 577 589 589 592 595 596 596 596 596
                                                                                  596 596 596 596 596 596 596 596 596 596 596 596
                                                                                  607 615 615 617 617 619 619 621 621 626 626 626
                                                                                  626 634 634 637 638 640 640 640 645 645 650 650
                                                                                  656 656 664 664 665 868
argno                           000136 automatic       fixed bin(17,0)          dcl 98 set ref 225* 226* 255* 255* 350* 351*
as_sw                           000116 automatic       bit(1)                   initial dcl 91 set ref 91* 239* 243* 245* 333 345
                                                                                  345* 686
autbl                                  based           structure                level 1 dcl 1-28
autp                            000546 automatic       pointer                  initial dcl 1-26 set ref 1-26* 686 686 689 745*
based_sentinel                         based           structure                level 1 dcl 7-303
bchr                                   based           char                     packed unaligned dcl 70 set ref 232 237 237 239 239
                                                                                  239 241 241 243 245 245 247 249 252 252 252 252
                                                                                  252 262 264 266 266 268 268 270 270 272 272 274
                                                                                  274 276 276 276 276 278 278 278 278 284* 353 355
                                                                                  357 357 359 359 365 371* 373 406
before                                                 builtin function         dcl 179 ref 886 888
bin                                                    builtin function         dcl 179 ref 520 520 553
c32                             000214 automatic       char(32)                 packed unaligned dcl 121 set ref 484* 486* 491* 494*
                                                                                  502 507* 516* 545* 547* 553* 553 581* 582 596* 605
                                                                                  635* 640* 650* 848* 849*
channel                         000164 automatic       char(32)                 packed unaligned dcl 114 set ref 339* 439* 516* 707*
chn_sw                          000117 automatic       bit(1)                   initial dcl 91 set ref 91* 357* 362* 405 883*
clock                                                  builtin function         dcl 179 ref 310
code                            000141 automatic       fixed bin(35,0)          dcl 101 set ref 194* 198 203 209* 226* 227 228* 351*
                                                                                  397* 473* 474 475* 515* 727* 732* 737* 761* 762
                                                                                  849* 850 852*
com_err_                        000036 constant        entry                    external dcl 159 ref 205 209
count                           000100 external static fixed bin(17,0)          level 2 dcl 5-4 ref 578
cpu_mon                         000150 automatic       fixed bin(71,0)          initial dcl 107 set ref 107* 645* 650 650 650
cpu_monitor              37            based           fixed bin(35,0)          level 2 dcl 3-7 ref 634 645 645
cu_$af_return_arg               000040 constant        entry                    external dcl 160 ref 194
cu_$arg_ptr                     000042 constant        entry                    external dcl 161 ref 226 351
current_size              5            based           fixed bin(17,0)          level 3 in structure "dutbl" dcl 4-29 in procedure
                                                                                  "pae" ref 695
current_size              5            based           fixed bin(17,0)          level 3 in structure "autbl" dcl 1-28 in procedure
                                                                                  "pae" ref 686
current_size              5            based           fixed bin(17,0)          level 3 in structure "anstbl" dcl 2-55 in procedure
                                                                                  "pae" ref 677
cv_oct_check_                   000044 constant        entry                    external dcl 162 ref 849
date_time_                      000046 constant        entry                    external dcl 163 ref 311 549 639
date_time_$format               000050 constant        entry                    external dcl 164 ref 775
default_procs_required
                          1(10)        based           bit(1)                   level 3 packed packed unaligned dcl 3-7 set ref 595
display_mode                    000113 automatic       fixed bin(17,0)          initial dcl 89 set ref 89* 270* 272* 274* 520 520
                                                                                  520 533
divide                                                 builtin function         dcl 179 ref 483 796 797 798 867
dmn_sw                          000120 automatic       bit(1)                   initial dcl 91 set ref 91* 241* 243* 245* 333 345
                                                                                  345* 695
dump_sw                         000121 automatic       bit(1)                   initial dcl 91 set ref 91* 262* 264* 659
dutbl                                  based           structure                level 1 dcl 4-29
dutp                            000554 automatic       pointer                  initial dcl 4-27 set ref 4-27* 695 698 746*
ec                              000570 automatic       fixed bin(35,0)          dcl 403 set ref 406* 407 411* 412 413* 414
entry                   200            based           structure                array level 2 in structure "anstbl" dcl 2-55
                                                                                  in procedure "pae" set ref 680
entry                   200            based           structure                array level 2 in structure "dutbl" dcl 4-29
                                                                                  in procedure "pae" set ref 698
entry                   200            based           structure                array level 2 in structure "autbl" dcl 1-28
                                                                                  in procedure "pae" set ref 689
err_proc                        000542 automatic       entry variable           dcl 156 set ref 200* 205* 228 284 296 301 390 397
                                                                                  475 711 717 855 870 896
error_table_$badopt             000026 external static fixed bin(35,0)          dcl 150 set ref 284*
error_table_$inconsistent       000030 external static fixed bin(35,0)          dcl 151 set ref 301*
error_table_$not_act_fnc        000032 external static fixed bin(35,0)          dcl 152 ref 203
f                                      based           fixed bin(35,0)          array dcl 72 set ref 664 665
first_17_flags                         based           bit(1)                   array packed unaligned dcl 80 ref 589 592
firstsw                   1(17)        based           bit(1)                   level 3 packed packed unaligned dcl 3-7 set ref 589
                                                                                  607
fixed                                                  builtin function         dcl 179 ref 516 516 544 638 640
flag18                                 based           bit(1)                   packed unaligned dcl 81 ref 589 607
flag_names                      000061 constant        char(16)                 initial array packed unaligned dcl 135 ref 592
flags                     1            based           structure                level 2 in structure "apte" packed packed unaligned
                                                                                  dcl 3-7 in procedure "pae" set ref 520 520 589 592
flags                           000224 automatic       varying char(256)        initial dcl 122 in procedure "pae" set ref 122* 590*
                                                                                  592* 592 605* 605 607* 607 609 609* 626 626 626*
fx                                     based           fixed bin(35,0)          array dcl 459 set ref 666*
fxl                             000600 automatic       fixed bin(17,0)          dcl 457 set ref 662* 663* 664 666* 666
fxp                             000602 automatic       pointer                  dcl 458 set ref 665* 666
get_group_id_                   000052 constant        entry                    external dcl 165 ref 329 329
get_line_length_$switch         000054 constant        entry                    external dcl 166 ref 515
get_process_id_                 000056 constant        entry                    external dcl 167 ref 340
hbound                                                 builtin function         dcl 179 ref 545 664
hcs_$initiate                   000060 constant        entry                    external dcl 168 ref 727 732 737
header                                 based           structure                level 2 in structure "dutbl" dcl 4-29 in procedure
                                                                                  "pae"
header                                 based           structure                level 2 in structure "autbl" dcl 1-28 in procedure
                                                                                  "pae"
header                                 based           structure                level 2 in structure "anstbl" dcl 2-55 in procedure
                                                                                  "pae"
hr                              000663 automatic       fixed bin(35,0)          dcl 786 set ref 796* 797 798 799 800 802*
i                               000142 automatic       fixed bin(17,0)          dcl 102 in procedure "pae" set ref 677* 680* 686*
                                                                                  689* 695* 698*
i                               000604 automatic       fixed bin(17,0)          dcl 460 in procedure "print_it" set ref 544* 545 545
                                                                                  545 547* 576* 577 578 578 581* 591* 592 592*
ia_sw                           000122 automatic       bit(1)                   initial dcl 91 set ref 91* 237* 243* 245* 333 345
                                                                                  345* 677
id_arg                                 parameter       char                     packed unaligned dcl 843 set ref 841 848 855* 870*
                                                                                  880 886 888 890 896*
id_sw                           000123 automatic       bit(1)                   initial dcl 91 set ref 91* 323* 329* 353 355* 357*
                                                                                  359* 362* 365 376* 847 880
ids                             000140 automatic       fixed bin(17,0)          initial dcl 100 set ref 100* 232* 232 256* 256 305
                                                                                  315 328 390 711
index                                                  builtin function         dcl 179 ref 892
int_pic                                defined         picture(8)               packed unaligned dcl 790 set ref 803* 805*
integer_len                     000605 automatic       fixed bin(17,0)          dcl 461 set ref 614* 615* 615 617* 617 619* 619 621*
                                                                                  621 626
ioa_                            000062 constant        entry                    external dcl 169 ref 507 516 520 553 626 650 656 661
                                                                                  666 668 705
ioa_$rsnnl                      000064 constant        entry                    external dcl 170 ref 491 494 547 581 596 640 802
ipc_r_factor             65            based           fixed bin(35,0)          level 2 unsigned dcl 3-7 set ref 656*
ipc_r_offset             64            based           fixed bin(18,0)          level 2 unsigned dcl 3-7 set ref 656*
ips_message              11            based           bit(36)                  level 2 dcl 3-7 ref 574 577
ips_pending                     000325 automatic       varying char(256)        initial dcl 122 set ref 122* 575* 578* 578 582* 582
                                                                                  586* 586 626 626* 626
l                               000606 automatic       fixed bin(17,0)          dcl 462 set ref 664* 664* 665 666*
lbound                                                 builtin function         dcl 179 ref 545
length                                                 builtin function         dcl 179 ref 500 520 520 520 520 553 553 553 553 553
                                                                                  553 553 553 609 626 626 626 830 835 892 892 892
line_len                        000607 automatic       fixed bin(17,0)          dcl 463 set ref 515* 520 553 626
lock                                   based           structure                level 1 dcl 6-12
lock_id                  15            based           bit(36)                  level 2 dcl 3-7 set ref 520*
log10                                                  builtin function         dcl 179 ref 553 615 617 619 621
ltrim                                                  builtin function         dcl 179 ref 830 837
mask                      1     000100 external static structure                array level 2 dcl 5-4
match_star_name_                000066 constant        entry                    external dcl 171 ref 406 411 413
max                                                    builtin function         dcl 179 ref 835
me                              000436 automatic       char(16)                 packed unaligned dcl 124 set ref 186* 192* 209* 228*
                                                                                  284* 296* 301* 390* 397* 475* 711* 717* 855* 870*
                                                                                  896*
min                             000656 automatic       fixed bin(17,0)          dcl 783 set ref 797* 798 799
mod                                                    builtin function         dcl 179 ref 827 868
multiple_sw                     000124 automatic       bit(1)                   initial dcl 91 set ref 91* 215* 216* 247* 249* 305*
                                                                                  467 715
n_abs_run                12            based           fixed bin(17,0)          level 2 dcl 1-28 ref 686
name                      1     000100 external static char(32)                 array level 3 dcl 5-4 ref 578
nargs                           000137 automatic       fixed bin(17,0)          dcl 99 set ref 194* 225 350
now                             000146 automatic       fixed bin(71,0)          dcl 106 set ref 310* 311* 553 553 553 650 650
null                                                   builtin function         dcl 179 ref 1-26 2-53 4-27 10-76 515 515 729 734 739
pae_sw                          000125 automatic       bit(1)                   initial dcl 91 set ref 91* 185* 261 292* 295 309 319
                                                                                  471 482 506 705
page_faults               2            based           fixed bin(35,0)          level 2 dcl 3-7 set ref 553 553*
pdir_sw                         000126 automatic       bit(1)                   initial dcl 91 set ref 91* 276* 292 300 482
pers                            000152 automatic       char(24)                 packed unaligned dcl 111 set ref 330* 438* 516* 707*
pers_arg                        000174 automatic       varying char(23)         dcl 116 set ref 330 336 411 886* 887 887* 892
person                    4            based           char(24)                 level 2 packed packed unaligned dcl 10-78 ref 411
                                                                                  438
pid_sw                          000127 automatic       bit(1)                   initial dcl 91 set ref 91* 359* 362* 426 704 847
                                                                                  850* 852 860
proc_id                 276            based           bit(36)                  level 2 in structure "ute" dcl 10-78 in procedure
                                                                                  "pae" ref 427 428 432
proc_id                         000103 automatic       bit(36)                  dcl 74 in procedure "pae" set ref 340* 427 428 432*
                                                                                  472 478 483 486* 491 705 849 861 862 862 867
process_id_sw                   000130 automatic       bit(1)                   initial dcl 91 set ref 91* 191* 215 491
processid                 3            based           bit(36)                  level 2 dcl 3-7 set ref 478 520*
procid                                 based           fixed bin(35,0)          dcl 75 set ref 478* 483 491* 705* 849* 861 862* 862
                                                                                  867
procs_required           63            based           bit(8)                   level 2 packed packed unaligned dcl 3-7 ref 596 596
                                                                                  596 596 596 596 596 596 596 596 596 596 596 596
                                                                                  596 596
proj                            000160 automatic       char(12)                 packed unaligned dcl 112 set ref 331* 437* 516* 707*
proj_arg                        000203 automatic       varying char(10)         dcl 117 set ref 331 336 413 888* 889 889* 892
project                  12            based           char(12)                 level 2 packed packed unaligned dcl 10-78 ref 413
                                                                                  437
proxy                   247(02)        based           bit(1)                   level 3 packed packed unaligned dcl 10-78 ref 417
                                                                                  445
ptr                                                    builtin function         dcl 179 ref 472
queue                   245            based           fixed bin(17,0)          level 2 dcl 10-78 ref 441 443
rel                                                    builtin function         dcl 179 ref 516 516
return_len                      000112 automatic       fixed bin(17,0)          dcl 84 set ref 194* 500 502
return_ptr                      000110 automatic       pointer                  dcl 83 set ref 194* 500 500 500 502 502
return_string                          based           varying char             dcl 85 set ref 500 500* 500 502* 502
ring0_get_$segptr               000070 constant        entry                    external dcl 172 ref 761
ring_zero_peek_                 000072 constant        entry                    external dcl 173 ref 473
rlen                            000666 automatic       fixed bin(17,0)          dcl 788 set ref 830* 831 832 832* 833 833* 834* 835*
                                                                                  837
rs                              000664 automatic       char(8)                  packed unaligned dcl 787 set ref 800* 802* 803* 803
                                                                                  805* 805 807 807* 808 808* 830 834 837
rtrim                                                  builtin function         dcl 179 ref 329 329 336 336 502 553 553 553 553 553
                                                                                  578 582 592 605 835
search                                                 builtin function         dcl 179 ref 880
sec                             000662 automatic       fixed bin(17,0)          dcl 785 set ref 798* 799
segname                         000426 automatic       char(32)                 packed unaligned dcl 123 set ref 397* 726* 727* 731*
                                                                                  732* 736* 737* 760*
short_sw                        000131 automatic       bit(1)                   initial dcl 91 set ref 91* 266* 268* 662
size                                                   builtin function         dcl 179 ref 220 473 473 664 868
state                     1(18)        based           bit(18)                  level 3 packed packed unaligned dcl 3-7 set ref 544
                                                                                  640
state_change_time        22            based           fixed bin(71,0)          level 2 dcl 3-7 set ref 549* 553 553 553* 553* 553
                                                                                  553* 640 640
state_names                     000165 constant        char(8)                  initial array packed unaligned dcl 133 ref 545 545
                                                                                  545
static_ansp                     000012 internal static pointer                  dcl 145 set ref 727* 729 744
static_autp                     000020 internal static pointer                  dcl 145 set ref 732* 734 745
static_dutp                     000014 internal static pointer                  dcl 145 set ref 737* 739 746
string                                                 builtin function         dcl 179 ref 589
substr                                                 builtin function         dcl 179 set ref 232 353 365 428 428 472 520 520 520
                                                                                  520 577 596 596 596 596 596 596 596 596 596 596
                                                                                  596 596 596 596 596 596 609* 807 807* 808 808* 834
                                                                                  837
sum                             000660 automatic       fixed bin(71,0)          dcl 784 set ref 799* 803 805
sys_info$ips_mask_data          000100 external static structure                level 1 dcl 5-4
sysdir                          000007 constant        char(168)                initial packed unaligned dcl 139 set ref 727* 732*
                                                                                  737*
tables_initiated                000022 internal static bit(1)                   initial dcl 146 set ref 725 741*
tag                             000163 automatic       char(1)                  packed unaligned dcl 113 set ref 332* 441* 443* 445*
                                                                                  448* 516* 707*
tag_arg                         000210 automatic       varying char(2)          dcl 118 set ref 332 334* 336 415 415 417 420 677 677
                                                                                  686 686 686 695 695 845* 890* 891 891* 892 892
tc_data                         000442 automatic       structure                level 1 dcl 128 set ref 322
tcd_initiated                   000023 internal static bit(1)                   initial dcl 146 set ref 758 764*
tcdp0                           000016 internal static pointer                  dcl 145 set ref 472* 472 473* 516 516 761*
tcm                                    based           structure                level 1 dcl 7-11 ref 220
tcmp                                   automatic       pointer                  dcl 7-9 ref 220
te                        4            based           fixed bin(35,0)          level 2 dcl 3-7 ref 615 615 626
temp_date                              based           char(8)                  packed unaligned dcl 78 set ref 312 553 553* 553 650
                                                                                  650*
temp_date_time                  000104 automatic       char(16)                 packed unaligned dcl 77 set ref 311* 312 549* 553
                                                                                  553 553 639* 650 650
term_channel             30            based           fixed bin(71,0)          level 2 dcl 3-7 ref 494 494 520 520 520 520
term_channel_sw                 000132 automatic       bit(1)                   initial dcl 91 set ref 91* 278* 292 300 319 471 494
this_id_matched                 000135 automatic       fixed bin(17,0)          dcl 96 set ref 324* 368* 380 465* 465 467 704 711
                                                                                  715 717*
ti                        6            based           fixed bin(35,0)          level 2 dcl 3-7 ref 619 619 626
timax                     7            based           fixed bin(35,0)          level 2 dcl 3-7 ref 621 621 626
time                            000654 automatic       fixed bin(71,0)          dcl 781 in procedure "time_interval" set ref 793*
                                                                                  795 795* 796 797 798 827
time                            000642 automatic       varying char(8)          dcl 773 in procedure "time_of_day" set ref 775* 776
time_used_clock          16            based           fixed bin(71,0)          level 2 dcl 3-7 set ref 553* 553* 553*
today                           000212 automatic       char(8)                  packed unaligned dcl 120 set ref 312* 553 553 650
total_matched                   000134 automatic       fixed bin(17,0)          dcl 96 set ref 324* 380* 380 390
ts                        5            based           fixed bin(35,0)          level 2 dcl 3-7 ref 617 617 626
tty_name                316            based           char(32)                 level 2 packed packed unaligned dcl 10-78 ref 406
                                                                                  439
uflags                  431            based           structure                level 2 dcl 10-78
unique_chars_                   000074 constant        entry                    external dcl 174 ref 486
unspec                                                 builtin function         dcl 179 set ref 478* 494 494 520 520 520 520 520 520
usec                            000667 automatic       fixed bin(35,0)          dcl 789 set ref 827* 828
usec_pic                        000670 automatic       picture(6)               packed unaligned dcl 791 set ref 828* 835 837
user_abs_attributes                    based           structure                level 1 dcl 9-25
user_attributes                        based           structure                level 1 dcl 8-21
user_info_$terminal_data        000076 constant        entry                    external dcl 175 ref 339
user_sw                         000133 automatic       bit(1)                   initial dcl 91 set ref 91* 355* 362* 410 711* 880*
                                                                                  885
ut_header                              based           structure                level 1 dcl 11-16
ute                                    based           structure                level 1 dcl 10-78
utep                            000556 automatic       pointer                  initial dcl 10-76 set ref 10-76* 406 411 413 417 427
                                                                                  428 432 437 438 439 441 443 443 445 680* 681 689*
                                                                                  690 698* 699
virtual_cpu_time         46            based           fixed bin(71,0)          level 2 dcl 3-7 set ref 553* 553* 553* 650 650
wait_event               20            based           bit(36)                  level 2 dcl 3-7 set ref 520 520* 520
wct_entry                              based           structure                level 1 dcl 7-260

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
ABS_ATTRIBUTE_NAMES                    internal static varying char(28)         initial array dcl 9-38
ABS_FLAG_NAMES                         internal static varying char(8)          initial array dcl 10-326
ALT_USER_ATTRIBUTE_NAMES               internal static char(20)                 initial array packed unaligned dcl 8-77
ANSTBL_version_4                       internal static fixed bin(17,0)          initial dcl 2-51
AT_NORMAL                              internal static char(8)                  initial packed unaligned dcl 2-116
AT_SHUTDOWN                            internal static char(8)                  initial packed unaligned dcl 2-116
AT_SPECIAL                             internal static char(8)                  initial packed unaligned dcl 2-116
AUTBL_CONTROL_NAMES                    internal static varying char(20)         initial array dcl 1-68
AUTBL_version_4                        internal static fixed bin(17,0)          initial dcl 1-24
DERIVE_MASK                            internal static bit(2)                   initial packed unaligned dcl 10-280
DIAL_SERVER_FLAG_NAMES                 internal static varying char(12)         initial array dcl 10-332
DONT_MASK                              internal static bit(2)                   initial packed unaligned dcl 10-280
DO_MASK                                internal static bit(2)                   initial packed unaligned dcl 10-280
DUTBL_version_4                        internal static fixed bin(17,0)          initial dcl 4-25
LOGIN_RESULT_VALUES                    internal static varying char(24)         initial array dcl 10-338
MASK_CTL_NAMES                         internal static varying char(12)         initial array dcl 10-284
PROCESS_TYPE_NAMES                     internal static varying char(12)         initial array dcl 10-265
PT_ABSENTEE                            internal static fixed bin(17,0)          initial dcl 10-261
PT_DAEMON                              internal static fixed bin(17,0)          initial dcl 10-261
PT_INTERACTIVE                         internal static fixed bin(17,0)          initial dcl 10-261
PW_FLAG_NAMES                          internal static varying char(12)         initial array dcl 10-290
TABLE_NAMES                            internal static char(20)                 initial array packed unaligned dcl 10-271
UFLAG_NAMES                            internal static varying char(24)         initial array dcl 10-303
USER_ATTRIBUTES_always_allowed         internal static bit(36)                  initial dcl 8-100
USER_ATTRIBUTES_default_in_pdt         internal static bit(36)                  initial dcl 8-104
USER_ATTRIBUTES_settable_by_user       internal static bit(36)                  initial dcl 8-108
USER_ATTRIBUTE_NAMES                   internal static char(20)                 initial array packed unaligned dcl 8-50
UTE_version_4                          internal static fixed bin(17,0)          initial dcl 10-74
lock_ptr                               automatic       pointer                  dcl 6-11
sys_info$all_valid_ips_mask            external static bit(36)                  dcl 5-10
wctep                                  automatic       pointer                  dcl 7-258

NAMES DECLARED BY EXPLICIT CONTEXT.
MAIN_RETURN                     002567 constant        label                    dcl 392 ref 718
af_common                       001204 constant        label                    dcl 194 ref 187
badopt                          001717 constant        label                    dcl 284 ref 278
init_error                      002570 constant        label                    dcl 397 ref 729 734 739 762
match_ute                       002623 constant        entry                    internal dcl 401 ref 681 690 699
matched                         003052 constant        label                    dcl 432 ref 407 415 417 420 427 428
pae                             001144 constant        entry                    external dcl 60
print_apt_entry                 001154 constant        entry                    external dcl 60
print_it                        003122 constant        entry                    internal dcl 453 ref 341 681 690 699 708
print_matching_processes        005601 constant        entry                    internal dcl 673 ref 336 373
process_id                      001171 constant        entry                    external dcl 189
table_init                      006150 constant        entry                    internal dcl 723 ref 315 335
tcd_init                        006364 constant        entry                    internal dcl 756 ref 319 864
time_interval                   006515 constant        entry                    internal dcl 779 ref 553 553 553 553 553 553 553 553
                                                                                  553 640 640 650 650 650 650
time_of_day                     006437 constant        entry                    internal dcl 770 ref 553 553 553 650 650
valid_id                        007005 constant        entry                    internal dcl 841 ref 329 371

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0     10422       10524   10101       10432
Length     11216   10101       102         455     320          14

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
pae                                 936 external procedure  is an external procedure.  
match_ute                               internal procedure  shares stack frame of external procedure pae.  
print_it                                internal procedure  shares stack frame of external procedure pae.  
print_matching_processes                internal procedure  shares stack frame of external procedure pae.  
table_init                              internal procedure  shares stack frame of external procedure pae.  
tcd_init                             86 internal procedure  is called by several nonquick procedures.  
time_of_day                             internal procedure  shares stack frame of external procedure pae.  
time_interval                           internal procedure  shares stack frame of external procedure pae.  
valid_id                            146 internal procedure  is called during a stack extension.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 apte1_offset                pae
000012 static_ansp                 pae
000014 static_dutp                 pae
000016 tcdp0                       pae
000020 static_autp                 pae
000022 tables_initiated            pae
000023 tcd_initiated               pae

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
pae                      000100 ap                          pae
                         000102 al                          pae
                         000103 proc_id                     pae
                         000104 temp_date_time              pae
                         000110 return_ptr                  pae
                         000112 return_len                  pae
                         000113 display_mode                pae
                         000114 af_sw                       pae
                         000115 apte_offset_sw              pae
                         000116 as_sw                       pae
                         000117 chn_sw                      pae
                         000120 dmn_sw                      pae
                         000121 dump_sw                     pae
                         000122 ia_sw                       pae
                         000123 id_sw                       pae
                         000124 multiple_sw                 pae
                         000125 pae_sw                      pae
                         000126 pdir_sw                     pae
                         000127 pid_sw                      pae
                         000130 process_id_sw               pae
                         000131 short_sw                    pae
                         000132 term_channel_sw             pae
                         000133 user_sw                     pae
                         000134 total_matched               pae
                         000135 this_id_matched             pae
                         000136 argno                       pae
                         000137 nargs                       pae
                         000140 ids                         pae
                         000141 code                        pae
                         000142 i                           pae
                         000143 apte_offset                 pae
                         000144 alrm                        pae
                         000146 now                         pae
                         000150 cpu_mon                     pae
                         000152 pers                        pae
                         000160 proj                        pae
                         000163 tag                         pae
                         000164 channel                     pae
                         000174 pers_arg                    pae
                         000203 proj_arg                    pae
                         000210 tag_arg                     pae
                         000212 today                       pae
                         000214 c32                         pae
                         000224 flags                       pae
                         000325 ips_pending                 pae
                         000426 segname                     pae
                         000436 me                          pae
                         000442 tc_data                     pae
                         000542 err_proc                    pae
                         000546 autp                        pae
                         000550 ansp                        pae
                         000552 aptep                       pae
                         000554 dutp                        pae
                         000556 utep                        pae
                         000570 ec                          match_ute
                         000600 fxl                         print_it
                         000602 fxp                         print_it
                         000604 i                           print_it
                         000605 integer_len                 print_it
                         000606 l                           print_it
                         000607 line_len                    print_it
                         000642 time                        time_of_day
                         000654 time                        time_interval
                         000656 min                         time_interval
                         000660 sum                         time_interval
                         000662 sec                         time_interval
                         000663 hr                          time_interval
                         000664 rs                          time_interval
                         000666 rlen                        time_interval
                         000667 usec                        time_interval
                         000670 usec_pic                    time_interval

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
fx1_to_fl2          r_l_a               r_ne_as             r_le_a              r_ge_a              alloc_char_temp
cat_realloc_chars   call_ent_var_desc   call_ext_out_desc   call_ext_out        call_int_this_desc  call_int_this
call_int_other      return_mac          fl2_to_fx1          tra_ext_1           mpfx2               mdfx1
mdfx3               shorten_stack       ext_entry           int_entry           int_entry_desc      set_chars_eis
index_chars_eis     divide_fx2          divide_fx3          double_log_base_10_ clock_mac

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
active_fnc_err_               com_err_                      cu_$af_return_arg             cu_$arg_ptr
cv_oct_check_                 date_time_                    date_time_$format             decimal_exp_
get_group_id_                 get_line_length_$switch       get_process_id_               hcs_$initiate
ioa_                          ioa_$rsnnl                    match_star_name_              ring0_get_$segptr
ring_zero_peek_               unique_chars_                 user_info_$terminal_data

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$badopt           error_table_$inconsistent     error_table_$not_act_fnc      sys_info$ips_mask_data




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     89 001105        91 001107       100 001127       107 001130       122 001132    1   26 001134    2   53 001136
 4   27 001137   10   76 001140        60 001143       185 001162       186 001164       187 001167       189 001170
    191 001177       192 001201       194 001204       198 001221       199 001223       200 001225       201 001232
    203 001233       204 001236       205 001237       206 001243       209 001244       210 001260       215 001261
    216 001267       220 001271       225 001333       226 001343       227 001360       228 001362       229 001376
    232 001377       237 001406       239 001422       241 001441       243 001454       245 001464       247 001501
    249 001507       252 001516       255 001542       256 001543       257 001544       261 001545       262 001547
    264 001556       266 001564       268 001577       270 001611       272 001624       274 001637       276 001651
    278 001674       281 001716       284 001717       285 001751       288 001752       292 001754       295 001761
    296 001765       297 002014       300 002015       301 002021       302 002045       305 002046       309 002053
    310 002055       311 002057       312 002074       315 002076       319 002101       322 002111       323 002113
    324 002114       328 002116       329 002120       330 002163       331 002170       332 002174       333 002201
    334 002207       335 002213       336 002214       337 002313       339 002315       340 002335       341 002346
    342 002347       345 002350       350 002362       351 002371       353 002406       355 002420       357 002431
    359 002445       362 002461       363 002466       365 002467       368 002475       371 002476       373 002520
    376 002527       380 002530       382 002532       390 002534       392 002567       397 002570       399 002622
    401 002623       405 002625       406 002627       407 002664       408 002667       410 002670       411 002673
    412 002730       413 002733       414 002772       415 002775       417 003007       419 003020       420 003021
    424 003026       426 003027       427 003031       428 003035       431 003047       432 003052       437 003055
    438 003062       439 003065       441 003070       443 003076       445 003106       448 003114       450 003116
    453 003122       465 003123       467 003124       471 003132       472 003141       473 003147       474 003165
    475 003167       476 003212       478 003213       482 003221       483 003225       484 003256       486 003265
    487 003314       491 003316       494 003351       499 003407       500 003411       502 003423       503 003450
    506 003451       507 003453       508 003472       515 003473       516 003510       520 003556       533 003677
    544 003702       545 003706       547 003720       549 003750       553 003766       574 004271       575 004274
    576 004275       577 004303       578 004310       580 004372       581 004373       582 004422       583 004467
    585 004470       586 004472       589 004504       590 004516       591 004523       592 004533       594 004616
    595 004627       596 004633       605 004750       607 004774       609 005012       614 005016       615 005017
    617 005036       619 005056       621 005076       626 005116       634 005244       635 005254       636 005257
    637 005261       638 005263       639 005265       640 005302       645 005350       650 005355       656 005454
    659 005501       661 005503       662 005510       663 005515       664 005517       665 005525       666 005530
    667 005570       668 005573       671 005600       673 005601       677 005603       680 005627       681 005634
    684 005645       686 005647       689 005704       690 005710       693 005721       695 005723       698 005747
    699 005753       702 005764       704 005766       705 005772       707 006020       708 006033       711 006034
    715 006101       717 006106       718 006146       721 006147       723 006150       725 006151       726 006154
    727 006157       729 006221       731 006226       732 006231       734 006273       736 006300       737 006303
    739 006345       741 006352       744 006354       745 006356       746 006360       748 006362       756 006363
    758 006371       760 006373       761 006377       762 006425       764 006433       766 006436       770 006437
    775 006441       776 006506       779 006515       793 006517       795 006521       796 006524       797 006530
    798 006540       799 006556       800 006566       802 006574       803 006624       805 006635       807 006644
    808 006653       827 006661       828 006665       830 006675       831 006707       832 006712       833 006716
    834 006723       835 006732       837 006750       841 007004       845 007020       847 007025       848 007032
    849 007040       850 007057       852 007065       855 007071       856 007126       860 007131       861 007132
    862 007165       863 007216       864 007220       867 007225       868 007257       870 007266       871 007330
    874 007333       880 007337       883 007363       885 007365       886 007370       887 007407       888 007420
    889 007451       890 007462       891 007513       892 007524       896 007544       897 007600       901 007603


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
