	COMPILATION LISTING OF SEGMENT reduction_compiler_
	Compiled by: Multics PL/I Compiler, Release 28e, of February 14, 1985
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 03/17/86  1454.3 mst Mon
	    Options: optimize map

        1 
        2 
        3 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
        4 	/*							*/
        5 	/* COMPILED OUTPUT OF SEGMENT  reduction_compiler_.rd          	*/
        6 	/* Compiled by:  reduction_compiler, Version 2.5 of Oct 21, 1985      */
        7 	/* Compiled on:  03/17/86  1454.2 mst Mon                             */
        8 	/*							*/
        9 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
       10 
       11 /* ***************************************************************
       12*   *                                                             *
       13*   * Copyright (c) 1986 by Massachusetts Institute of Technology *
       14*   *                                                             *
       15*   * Copyright (c) 1975 by Massachusetts Institute of Technology *
       16*   *                                                             *
       17*   *************************************************************** */
       18 
       19 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
       20 	/*									*/
       21 	/* N__a_m_e:  reduction_compiler_							*/
       22 	/*									*/
       23 	/*      This procedure is the subroutine interface for the reduction_compiler.  It	*/
       24 	/* accepts as input a set of reductions, a temporary segment for use in allocations	*/
       25 	/* of a temporary nature, and a pointer to and maximum length of the object segment to	*/
       26 	/* be generated.  It returns the actual length of the compiled object segment.		*/
       27 	/*      The reductions to be compiled have been pre-processed by the lex_string_	*/
       28 	/* subroutine, and are represented by a chain of input tokens.			*/
       29 	/*      This subroutine is, itself, driven by a set of reductions which were compiled	*/
       30 	/* by a bootstrapped version of the reduction_compiler.				*/
       31 	/*									*/
       32 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
       33 
       34 
       35 /* HISTORY COMMENTS:
       36*  1) change(74-04-05,GDixon), approve(), audit(),
       37*     install(86-03-17,MR12.0-1032):
       38*     Version 1.0--
       39*      Created the reduction_compiler (rdc) command.
       40*  2) change(74-05-06,GDixon), approve(), audit(),
       41*     install(86-03-17,MR12.0-1032):
       42*     Version 1.1--
       43*      Fixed bugs in initial version.
       44*  3) change(74-05-17,GDixon), approve(), audit(),
       45*     install(86-03-17,MR12.0-1032):
       46*     Version 1.2--
       47*      Changed the following rdc constructs:
       48*       a) STACK-POP  ==>  STACK_POP
       49*       b) (PL/I-stmt)  ==>  [PL/I-stmt]  for semantic statements.
       50*  4) change(75-01-30,GDixon), approve(), audit(),
       51*     install(86-03-17,MR12.0-1032):
       52*     Version 1.3--
       53*      Make relative syntax functions quick PL/I blocks by converting array of
       54*      entries into relative syntax functions into a label transfer vector into
       55*      calls to the relative syntax functions.
       56*  5) change(75-02-03,GDixon), approve(), audit(),
       57*     install(86-03-17,MR12.0-1032):
       58*     Version 2.0--
       59*      a) code generated for LEX converted to calls to a subroutine LEX(n).
       60*      b) new DELETE and DELETE_STMT built-in action routines added.
       61*      c) new INCLUDE attribute added to force inclusion of include segments.
       62*      d) code for PUSH DOWN LANGUAGE added but not documented.
       63*      e) allocate statements changed to calls to translator_temp_$allocate.
       64*     
       65*  6) change(75-04-28,GDixon), approve(), audit(),
       66*     install(86-03-17,MR12.0-1032):
       67*     Version 2.1--
       68*      a) put a space after all tokens in semantic statement brackets ([]),
       69*         except <quoted-string> tokens, and the following paired token
       70*         sequences:
       71*                                   < =
       72*                                   > =
       73*                                   ^ =
       74*                                   ^ >
       75*                                   ^ <
       76*                                   - >
       77*      b) In order to implement this change, four new break characters were
       78*         added: - ^ = ;
       79*      c) Commenting delimiters were added:  \" begins a comment, which ends
       80*         with a newline character.
       81*  7) change(81-02-16,GDixon), approve(), audit(),
       82*     install(86-03-17,MR12.0-1032):
       83*     Version 2.2--
       84*      a) INCLUDE LEX stmt added, because of
       85*      b) code added to detect only use of LEX (rather than LEX(N)).
       86*         If only LEX used, then the LEX subroutine is NOT included in
       87*         SEMANTIC_ANALYSIS by default.
       88*      c) Many data structures declared options(constant)
       89*      d) VT now acccpted in .rd segments as a whitespace character
       90*      e) <no-token> in a PUSH DOWN LANGUAGE checks to see if token on top of
       91*         push down stack is the final input token (ie, all tokens are on the
       92*         stack or have been deleted.
       93*      f) Add code to support rdc's -trace control argument.
       94*  8) change(83-07-23,GDixon), approve(), audit(),
       95*     install(86-03-17,MR12.0-1032):
       96*     Version 2.3--
       97*      a) Place sequence numbers in unlabeled reductions appearing in the .pl1
       98*         and .list segments.  The same numbers are placed in the reductions
       99*         printed during tracing.
      100*      b) Changed implementation of -trace to avoid temporary copying of
      101*         reduction source.  Instead, reduction source is extracted from the
      102*         stmt descriptors.
      103*  9) change(84-09-08,GDixon), approve(), audit(),
      104*     install(86-03-17,MR12.0-1032):
      105*     Version 2.4--
      106*      a) Allow ERROR (named_constant) in addition to ERROR (decimal_integer)
      107*      b) Use perprocess date_time format for date put in header comment of
      108*         translator.
      109* 10) change(85-10-21,GDixon), approve(86-02-06,MCR7339),
      110*     audit(86-02-19,Wallman), install(86-02-19,MR12.0-1022):
      111*     Version 2.5--
      112*      Upgrade the severity of several error messages to severity 3, because
      113*      these messages describe conditions which are likely to make PL/I
      114*      compilation fail.  Severity 3 errors prevent the PL/I compiler from
      115*      being invoked. (phx19850)
      116*                                                   END HISTORY COMMENTS */
      117 
      118 
      119 
      120 /*++
      121*MAX_DEPTH 20 \
      122*
      123*BEGIN	/ <no-token>			/ 			ERROR(1)		/ stop	\
      124*2	/ <any-token>			/ reductions_init				/ attributes \
      125*
      126*attributes
      127*3	\" 1) parse and process the reduction attributes.  If present, these must precede any
      128*	\"    reduction statements.
      129*	/ BEGIN 				/ 		[Psave = Pthis_token]	/ pass1	 \
      130*4	/ MAX_DEPTH <decimal-integer> "\"	/ LEX set_depth     LEX(2)			/ attributes \
      131*5	/ PUSH DOWN LANGUAGE "\"		/ LEX(4)            [S_PDL = "1"b]		/ attributes \
      132*6	/ INCLUDE DELETE "\"		/ LEX(3)            [Sinclude_DELETE = "1"b]	/ attributes \
      133*7	/ INCLUDE DELETE_STMT "\"		/ LEX(3)            [Sinclude_DELETE_STMT = "1"b]	/ attributes \
      134*8	/ INCLUDE ERROR "\"			/ LEX(3)            [Sinclude_ERROR  = "1"b]	/ attributes \
      135*9	/ INCLUDE NEXT_STMT "\"		/ LEX(3)            [Sinclude_NEXT_STMT = "1"b]	/ attributes \
      136*10	/ INCLUDE LEX "\"			/ LEX(3)		[Sinclude_LEX = "1"b]	/ attributes \
      137*11	/ INCLUDE				/ 			ERROR(19)	NEXT_STMT	/ attributes \
      138*12	/ <no-token>			/ 			ERROR(1)		/ stop	\
      139*13	/ <any-token>			/ 			ERROR(2)	NEXT_STMT	/ attributes \
      140*
      141*pass1	\" 1) create a symbol table giving name and reduction number for all reduction labels.
      142*	\" 2) count the tokens in the syntax specification field to get an estimate of the amount
      143*	\"    of temporary storage rdc will need to hold the syntax specifications.
      144*set_label	/ /_				/ count_reduction   LEX			/ count	\
      145*15	/ <name>				/ set_label         LEX			/ set_label \
      146*16	/ "\"				/ 			ERROR(22)	LEX	/ set_label \
      147*17	/ <no-token>			/ reductions_begin  [Pthis_token = Psave]	/ pass2	 \
      148*18	/ <any-token>			/ 			ERROR(3)	LEX	/ set_label \
      149*
      150*count	/ <quoted-string>			/ count_token(1)    LEX(1)			/ count	\
      151*20	/ /_ <BS> _			/ count_token(1)    LEX(3)			/ count	\
      152*21	/ /_				/ 		NEXT_STMT			/ set_label \
      153*22	/ <any-token>			/ count_token(1)    LEX			/ count	\
      154*23	/ <no-token>			/ 			ERROR(5)		/ stop	\
      155*
      156*pass2	\" Process the reduction statements, as follows:
      157*	\" 1) skip over any labels on the reduction statement.
      158*	\" 2) compile the syntax specifications by storing them in rdc's temporary syntax table.
      159*	\" 3) compile the action specifications by outputting calls to built-in action routines and
      160*	\"    semantic subroutines, and by outputting semantic statements.
      161*	\" 4) compile the next reduction field by outputting code to transfer to the appropriate reduction.
      162*label
      163*skip_label
      164*	/ /_				/ reduction_begin	LEX			/ first_token \
      165*25	/ <name>	 			/		LEX			/ skip_label \
      166*26	/ "\"				/		LEX			/ skip_label \
      167*27	/ <any-token>			/		LEX			/ skip_label \
      168*28	/ <no-token>			/ 					/ stop	\
      169*
      170*first_token
      171*29	/ <PUSH_DOWN_LANGUAGE>		/					/ token1	\
      172*	\" For a non-PUSH DOWN LANGUAGE, <no-token> followed by any syntax specification is in error
      173*	\" because tokens are checked from left to right;  for a PUSH DOWN LANGUAGE, <no-token> has
      174*	\" meaning as the first or last specification in a reduction.  As the first spec, it identifies
      175*	\" the bottom of the push-down stack.  As the last spec, it identifies when the list of input tokens
      176*	\" has run out.
      177*30	/				/					/ tokens	\
      178*
      179*token1	/ <quoted-string>			/ 					/ tokens	\
      180*32	/ <_ no - token >_ <any-token>		/ compile_token(1)  LEX(5)			/ tokens	\
      181*
      182*tokens	/ <quoted-string>			/ compile_token(0)	LEX			/ tokens	\
      183*34	/ /_ <BS> _			/ compile_token(0)	LEX(3)			/ tokens	\
      184*35	/ /_				/ 	    	LEX       action_begin	/ action	\
      185*36	/ < <BS> _			/ compile_token(0)	LEX(3)			/ tokens	\
      186*37	/ > <BS> _			/ compile_token(0)	LEX(3)			/ tokens	\
      187*38	/ [ <BS> _			/ compile_token(0)	LEX(3)			/ tokens	\
      188*39	/ ] <BS> _			/ compile_token(0)	LEX(3)			/ tokens	\
      189*40	/ ( <BS> _			/ compile_token(0)	LEX(3)			/ tokens	\
      190*41	/ ) <BS> _			/ compile_token(0)	LEX(3)			/ tokens	\
      191*42	/ <_ no - token >_ /_			/ compile_token(1) 	LEX(6)    action_begin	/ action	\
      192*43	/ <_ no - token >_ <any-token>		/		LEX(5)    ERROR(14)		/ error_in_red \
      193*44	/ <_ any - token >_			/ compile_token(2)	LEX(5)			/ tokens	\
      194*45	/ <_ name >_			/ compile_token(3)	LEX(3)			/ tokens	\
      195*46	/ <_ decimal - integer >_		/ compile_token(4)	LEX(5)			/ tokens	\
      196*47	/ <_ BS >_				/ compile_token(5)	LEX(3)			/ tokens	\
      197*48	/ <_ quoted - string >_		/ compile_token(6)	LEX(5)			/ tokens	\
      198*49	/ <_ <name> >_			/ LEX
      199*					  compile_token(7) 	LEX(2)			/ tokens	\
      200*50	/ "\"				/ 	  	LEX       ERROR(22)		/ label	\
      201*51	/ <any-token>			/ compile_token(0)	LEX			/ tokens	\
      202*52	/ <no-token>			/ 		          ERROR(5)		/ stop	\
      203*
      204*action	/ /_				/ 		   LEX			/ next_red \
      205*54	/ LEX (   <decimal-integer> )		/ set_action_with_args LEX(2) PUSH(last_paren)
      206*					  [Sinclude_LEX = "1"b]			/ args	\
      207*55	/ LEX ( - <decimal-integer> )		/ set_action_with_args LEX(2) PUSH(last_paren)
      208*					  [Sinclude_LEX = "1"b]			/ args	\
      209*56	/ LEX ( + <decimal-integer> )		/ set_action_with_args LEX(2) PUSH(last_paren)
      210*					  [Sinclude_LEX = "1"b]			/ args	\
      211*57	/ LEX (				/ 			ERROR(19)		/ error_in_red \
      212*58	/ LEX				/ rtn(1)		   LEX			/ action	\
      213*59	/ NEXT_STMT (			/ 			ERROR(19)		/ error_in_red \
      214*60	/ NEXT_STMT			/ set_action	   LEX
      215*					  [Sinclude_NEXT_STMT = "1"b]			/ action	\
      216*61	/ POP (				/ 			ERROR(19)		/ error_in_red \
      217*62	/ POP				/ rtn(2)		   LEX			/ action	\
      218*63	/ PUSH ( <name> ) 			/ LEX(2) rtn(3)	   LEX(2)			/ action	\
      219*64	/ PUSH				/ 			ERROR(19)		/ error_in_red \
      220*65	/ DELETE				/					/ DELETE	\
      221*	\" Remove tests for all of the DELETE cases from main stream of reductions to a subroutine.
      222*66	/ DELETE_STMT (			/ 			ERROR(19)		/ error_in_red \
      223*67	/ DELETE_STMT			/ set_action 	   LEX
      224*					  [Sinclude_DELETE_STMT = "1"b] 		/ action	\
      225*68	/ ERROR ( <decimal-integer> )		/ set_action_with_args LEX(2)
      226*					  [Sinclude_ERROR = "1"b] 	PUSH(last_paren)	/ args	\
      227*69	/ ERROR (				/ set_action_with_args LEX(2)
      228*					  [Sinclude_ERROR = "1"b] 	PUSH(last_paren)	/ args	\
      229*	\" The preceding reduction allows the builtin ERROR routine to accept
      230*	\" a named constant instead of a decimal integer.
      231*70	/ [				/ output((6)"	" || (4)" ")
      232*					 		   LEX			/ stmt	\
      233*71	/ ]				/ 			ERROR(21)	LEX	/ action	\
      234*72	/ (				/ 			ERROR(21)	LEX	/ action	\
      235*73	/ )				/ 			ERROR(21)	LEX	/ action	\
      236*74	/ <quoted-string>			/ 			ERROR(23)		/ error_in_red \
      237*75	/ "\"				/ 			ERROR(22)		/ error_in_red \
      238*76	/ <any-token> (			/ set_action_with_args LEX(2) PUSH(last_paren)	/ args	\
      239*77	/ <any-token>			/ set_action 	   LEX			/ action	\
      240*78	/ <no-token>			/ 			ERROR(5)		/ stop	\
      241*
      242*error_in_red
      243*79	/ 				/ [obj_red.Ilast(Nobj_red) = 0]
      244*					  reduction_end 	   NEXT_STMT		/ label	\
      245*
      246*DELETE	/ DELETE (   <decimal-integer> ,   <decimal-integer> )	/			/ DELETE_2 \
      247*81	/ DELETE (   <decimal-integer> , - <decimal-integer> )	/			/ DELETE_2 \
      248*82	/ DELETE (   <decimal-integer> , + <decimal-integer> )	/			/ DELETE_2 \
      249*83	/ DELETE ( - <decimal-integer> ,   <decimal-integer> )	/			/ DELETE_2 \
      250*84	/ DELETE ( - <decimal-integer> , - <decimal-integer> )	/			/ DELETE_2 \
      251*85	/ DELETE ( - <decimal-integer> , + <decimal-integer> ) 	/			/ DELETE_2 \
      252*86	/ DELETE ( + <decimal-integer> ,   <decimal-integer> )	/			/ DELETE_2 \
      253*87	/ DELETE ( + <decimal-integer> , - <decimal-integer> )	/			/ DELETE_2 \
      254*88	/ DELETE ( + <decimal-integer> , + <decimal-integer> )	/			/ DELETE_2 \
      255*89	/ DELETE (   <decimal-integer> )			/			/ DELETE_1 \
      256*90	/ DELETE ( - <decimal-integer> )			/			/ DELETE_1 \
      257*91	/ DELETE ( + <decimal-integer> )			/			/ DELETE_1 \
      258*
      259*92	/ DELETE (			/ 			ERROR(19)		/ error_in_red \
      260*93	/ DELETE				/ set_action_with_args LEX	output(" 0, 0 )")
      261*					  [Sinclude_DELETE = "1"b]			/ last_paren\
      262*	\" The only way to reach the next reduction is by branch.  All possible cases of DELETE
      263*	\" have been handled above, including illegal ones.
      264*
      265*DELETE_1	/				/ set_action_with_args LEX(2)
      266*					  [Sinclude_DELETE = "1"b]			/	\
      267*95	/ <any-token> <decimal-integer>	/ output(" ") output(token_value) 	LEX
      268*						    output(token_value) 	LEX(-1)
      269*					  output(",")		PUSH(last_paren)	/ args	\
      270*96	/	    <decimal-integer>	/ output(" ") output(token_value)
      271*					  output(",")		PUSH(last_paren)	/ args	\
      272*
      273*DELETE_2	/				/ set_action_with_args LEX(2)	PUSH(last_paren)
      274*					  [Sinclude_DELETE = "1"b]			/ args	\
      275*
      276*stmt	\" Process the contents of semantic statements.  Special attention is given when generating
      277*	\" PL/I code for the statements to the following cases:
      278*	\" 1) No space is placed between the last token of a semantic statement and its
      279*	\"    ending semi-colon statement delimiter.
      280*	\" 2) No space is placed between an argument in a subprogram call and any comma delimiter
      281*	\"    which may follow it.
      282*	\" 3) No space is placed between a quoted string and any b, b1, b2, b3 or b4
      283*	\"    token which follows it in order to handle bit string constants (eg "101"b)
      284*	\" 4) No space is placed between any of the following pairs of characters which
      285*	\"    have a special meaning in the PL/I language:  ->  >=  <=  ^=  ^>  ^<
      286*	\" 5) No space is placed between any minus sign (-) and the token which follows, in
      287*	\"    order to handle signed numeric constants.
      288*	\" 6) Semantic statements appearing in the same pair of brackets in an action specification
      289*	\"    are placed on different lines in the generated code (as if they had appeared in
      290*	\"    separate brackets).
      291*	/ <quoted-string> b			/					/ bit_constant  \
      292*99	/ <quoted-string> b1		/					/ bit_constant  \
      293*100	/ <quoted-string> b2		/					/ bit_constant  \
      294*101	/ <quoted-string> b3		/					/ bit_constant  \
      295*102	/ <quoted-string> b4		/					/ bit_constant  \
      296*103	/ <quoted-string>			/ output(" ") output_quote(token_value) LEX	/	\
      297*104	/ (				/ output(" ") output("(") PUSH(stmt)    LEX	/ args	\
      298*105	/ ]				/				LEX	/ last_paren \
      299*106	/ ;				/ output (";" || NL || (6)"	" || (4)" ")
      300*					  				LEX	/ stmt	\
      301*107	/ "\"				/ 			ERROR(24)		/ error_in_red \
      302*108	/				/ PUSH(stmt) PUSH(stmt1)			/ special_chars \
      303*	\" Always branch to special subroutine to check for paired character sequences.
      304*	\" This subroutine returns to the 1st PUSHed label if a paired character sequence
      305*	\" is found, and to the second PUSHed label if no paired sequence is found.
      306*stmt1	/				/ 				POP	/	\
      307*110	/ <any-token>			/ output(" ") output(token_value) 	LEX	/ stmt	\
      308*111	/ <no-token>			/ 			ERROR(5)		/ stop	\
      309*
      310*bit_constant
      311*112	/ 				/ output(" ") output_quote(token_value) LEX
      312*					  	    output(token_value)       LEX	/ stmt	\
      313*
      314*
      315*args	\" This reduction subroutine processed the arguments in calls to semantic subroutines, and
      316*	\" the parenthesized expression or sub-program arguments in semantic statements.  It handles
      317*	\" the special cases described above under "stmt".  Nested parentheses are handled to a
      318*	\" depth of about 17.  It returns to the last PUSHed reduction label.
      319*	/ <quoted-string> (			/ 					/ quoted_arg \
      320*114	/ <quoted-string> "\"		/ 					/ quoted_arg \
      321*115	/ <quoted-string> )			/ 					/ quoted_arg \
      322*116	/ <quoted-string> <any-token>		/ output(" ") output_quote(token_value) LEX
      323*					  	    output(token_value) 	LEX	/ args	\
      324*quoted_arg
      325*117	/ <quoted-string>			/ output(" ") output_quote(token_value) LEX	/	\
      326*118	/ (				/ output(" ") output("(") PUSH(args)	LEX	/ args	\
      327*119	/ )				/ output(" ") output(")") 		LEX	/ STACK_POP \
      328*120	/ ;				/ 			ERROR(24)		/ error_in_red \
      329*121	/ "\"				/ 			ERROR(24)		/ error_in_red \
      330*122	/				/ PUSH(args) PUSH(args1)			/ special_chars \
      331*	\" Always branch to special subroutine to check for paired character sequences.
      332*	\" This subroutine returns to the 1st PUSHed label if a paired character sequence
      333*	\" is found, and to the second PUSHed label if no paired sequence is found.
      334*args1	/				/ 				POP	/	\
      335*124	/ ,				/ 	    output(token_value) 	LEX	/ args	\
      336*125	/ <any-token>			/ output(" ") output(token_value) 	LEX	/ args	\
      337*126	/ <no-token>			/ 			ERROR(5)		/ stop	\
      338*
      339*last_paren/				/ output(";") output(NL)			/ action	\
      340*
      341*special_chars
      342*128	\" Special reduction subroutine to check for paired character sequences in action specifications.
      343*	\" Calling sequence is:    /	/ PUSH(label1) PUSH(label2)	/ special_chars \
      344*	\"		 label2/  / POP			/	\
      345*	\" This subroutine returns through the first PUSHed reduction label if a paired sequence
      346*	\" is found, and through the second PUSHed label if none if found.
      347*	/ < =				/					/ spec_found \
      348*129	/ > =				/					/ spec_found \
      349*130	/ ^ =				/					/ spec_found \
      350*131	/ ^ >				/					/ spec_found \
      351*132	/ ^ <				/					/ spec_found \
      352*133	/ - >				/					/ spec_found \
      353*134	/ - <any-token>			/					/ spec_found \
      354*135	/ + <any-token>			/					/ spec_found\
      355*136	/				/					/ STACK_POP \
      356*
      357*spec_found
      358*137	/				/ output(" ") output(token_value) 	LEX
      359*						    output(token_value)	LEX POP	/ STACK_POP \
      360*
      361*next_red	\" The final group of reductions identifies and compiles code for the various next
      362*	\" reduction fields of a reduction statement.
      363*	/ "\"				/ next_reduction	    reduction_end 	LEX	/ label	\
      364*139	/ RETURN "\"			/ terminal_reduction    reduction_end 	LEX(2)	/ label	\
      365*140	/ STACK "\"			/ stacked_reduction     reduction_end 	LEX(2)	/ label	\
      366*141	/ STACK_POP "\"			/ stacked_reduction_pop reduction_end 	LEX(2)	/ label	\
      367*142	/ <name> "\"			/ specified_label       reduction_end 	LEX(2)	/ label	\
      368*143	/ <name>				/ specified_label       reduction_end 
      369*					  			ERROR(16)	NEXT_STMT	/ label	\
      370*144	/ <any-token> "\"			/ next_reduction        reduction_end
      371*					  			ERROR(4)	NEXT_STMT	/ label	\
      372*145	/ <any-token>			/ next_reduction        reduction_end 
      373*					  			ERROR(15)	NEXT_STMT	/ label	\
      374*146	/ <no-token>			/ 			ERROR(5)		/ stop	\
      375*
      376*stop	/ <no-token>			/ reductions_end				/ RETURN	\
      377*148	/ <any-token>			/ reductions_end		ERROR(6)		/ RETURN	\
      378*											++*/
      379 
      380 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
      381 
      382 
      383 reduction_compiler_:
      384 	proc    (Psource, Lsource, Psegment, APobj, ALobj, Aname_source, Scontrol, Mseverity, Acode);
      385 
      386      dcl	Psource			ptr,		/* ptr to reduction source segment. (In)	*/
      387 	Lsource			fixed bin(21),	/* length of reduction source segment (in chars).	*/
      388 						/* (Input)				*/
      389 	Psegment			ptr,		/* ptr to a segment in which allocations	*/
      390 						/* may be performed.  The segment must be a temp	*/
      391 						/* segment provided by translator_temp_. (In)	*/
      392 	APobj			ptr,		/* ptr to words of the object segment. (In)	*/
      393 	ALobj			fixed bin(21),	/* maximum number of characters allowed in object	*/
      394 						/* segment. (In)				*/
      395 						/* number of words in constructed object segment.	*/
      396 						/* (Out)					*/
      397 	Aname_source		char(32),		/* entry name of input source segment. (In)	*/
      398 	Scontrol			bit(*),		/* error format control bits. (In)		*/
      399 	Mseverity			fixed bin(35),	/* severity of highest-severity error encountered	*/
      400 						/* during the compilation. (Out)		*/
      401 	Acode			fixed bin(35);	/* error code. (Out)			*/
      402 
      403      dcl						/*	automatic variables			*/
      404          (Ired_start, Ired_end)	fixed bin(21),	/* index into source of start/end of reductions.	*/
      405 	Llongest_red		fixed bin,	/* length (in chars) of longest reduction.	*/
      406 	Lobj			fixed bin(21),	/* length (in chars) of unused part of object	*/
      407 						/* segment being created.			*/
      408 	Lobj_part			fixed bin(21) init (0),
      409 						/* length of a subset of the object segment.	*/
      410 	Lobj_spaces		fixed bin,	/* number of spaces to be output into object seg.	*/
      411 	Lobj_string		fixed bin,	/* maximum length of the string containing the	*/
      412 						/* stored object token values.		*/
      413 	Lobj_string_part		fixed bin(21),	/* length of a particular token value within the	*/
      414 						/* string of all object token values.		*/
      415 	Ltemp			fixed bin(21),	/* length of temporary character string.	*/
      416 	Ltemp_obj			fixed bin(21),	/* length of temp copy of object segment contents.*/
      417 	Mstack_depth		fixed bin,	/* user-specified maximum depth of the 		*/
      418 						/* next-reduction-label stack.		*/
      419 	Nchar			pic "----9" aligned,/* convert fixed bin integers to 4-char numbers.	*/
      420 	Nobj_red			fixed bin,	/* index of the object reduction being compiled.	*/
      421 	Nobj_token		fixed bin,	/* index of the object token being compiled.	*/
      422 	Nobj_token_fcn		fixed bin,	/* index of the object token function being	*/
      423 						/* compiled.				*/
      424 	Nreductions		fixed bin,	/* number of reductions which can be stored in	*/
      425 						/* object reduction storage structure.		*/
      426 	Ntokens			fixed bin,	/* number of token requirements which can be 	*/
      427 						/* stored in object token storage structure.	*/
      428 	Osc_start			fixed bin(21),	/* char offset of start of source to be output.	*/
      429 	Pobj			ptr,		/* ptr to unused part of object segment.	*/
      430 	Pobj_red			ptr,		/* ptr to temp. storage structure for object	*/
      431 						/* reductions.				*/
      432 	Pobj_spaces		ptr,		/* ptr to adjustable-length string  of spaces.	*/
      433 	Pobj_string		ptr,		/* ptr to temp. storage string for object token	*/
      434 						/* values.				*/
      435 	Pobj_string_part		ptr,		/* ptr to a particular token value within the	*/
      436 						/* string of all object token values.		*/
      437 	Pobj_token		ptr,		/* ptr to temp. storage structure for object	*/
      438 						/* token requirements.			*/
      439 	Pobj_token_quoted		ptr,		/* ptr to temp. storage for bits which are on if	*/
      440 						/* object token was in quotes when input.	*/
      441 	Psave			ptr,		/* ptr used in saving/restoring value of	*/
      442 						/* Pthis_token between pass1 and pass2.		*/
      443 	Ptemp			ptr,		/* ptr to temporary character string.		*/
      444 	Ptemp_obj			ptr,		/* ptr to temp copy of object segment contents.	*/
      445 	S_PDL			bit(1) aligned,	/* on if to be in 'PUSH DOWN LANGUAGE' mode.	*/
      446 	S_TRACE			bit(1) aligned,	/* on if tracing code is to be generated.	*/
      447 	S_TRACE_ON		bit(1) aligned,	/* on if tracing to be on initially.		*/
      448 	Sinclude_DELETE		bit(1) aligned,	/* on if DELETE proc to be included in object seg.*/
      449 	Sinclude_DELETE_STMT	bit(1) aligned,	/* on if DELETE_STMT proc to be included in obj.	*/
      450 	Sinclude_ERROR		bit(1) aligned,	/* on if ERROR proc to be include in object seg.	*/
      451 	Sinclude_NEXT_STMT		bit(1) aligned,	/* on if NEXT_STMT proc to be included.		*/
      452 	Sinclude_LEX		bit(1) aligned,	/* on if LEX proc to be included.		*/
      453 	Sinclude_STACK		bit(1) aligned,	/* on if STACK procs to be included in obj seg.	*/
      454 	Soptimize_possible		bit(1) aligned,	/* on if optimization of object token storage	*/
      455 						/* allocation is possible for the tokens assoc.	*/
      456 						/* with the reduction being compiled.		*/
      457 	code			fixed bin(35),	/* a status code.				*/
      458 	date			char(53),		/* a date/time string.			*/
      459 	form			fixed bin,	/* form of an object token.			*/
      460 	i			fixed bin,	/* an integer temporary.			*/
      461 	j			fixed bin,	/* an integer temporary.			*/
      462 	name_source		char(32),		/* name of source segment, without its suffix.	*/
      463 	1 obj_label		aligned,		/* temp storage for labels on object reductions.	*/
      464 	  2 N			fixed bin,	/* number of labels currently defined.		*/
      465 	  2 set (1000),				/* space for up to 1000 labels.		*/
      466 	    3 name		char(32) aligned,	/* name of label.				*/
      467 	    3 reduction_no		fixed bin,	/* number of reduction labelled by this label.	*/
      468 	1 obj_token_fcn		aligned,		/* temp storage for relative token requirement	*/
      469 						/* functions.				*/
      470 	  2 N			fixed bin,	/* number of object token requirements defined.	*/
      471 	  2 name (100)		char(32) varying,	/* name of token requirement.			*/
      472 	type			fixed bin;	/* type of an object token.			*/
      473 
      474 
      475      dcl						/*	builtin functions			*/
      476          (addcharno, addr, addrel, bit, char, charno, dimension, divide,
      477 	fixed, index, length, log, ltrim, max, min, null, rtrim,
      478 	size, string, substr, verify)
      479 				builtin;
      480 
      481      dcl						/*	entries				*/
      482 	clock_			entry returns (fixed bin(71)),
      483 	date_time_$format		entry (char(*), fixed bin(71), char(*), char(*)) returns(char(250) var),
      484 	lex_error_		entry options (variable),
      485 	lex_string_$lex		entry (ptr, fixed bin(21), fixed bin(21), ptr, bit(*) aligned,
      486 				       char(*) aligned, char(*) aligned, char(*) aligned, char(*) aligned,
      487 				       char(*) aligned, char(*) varying aligned, char(*) varying aligned,
      488 				       char(*) varying aligned, char(*) varying aligned,
      489 				       ptr, ptr, fixed bin(35)),
      490 	lex_string_$init_lex_delims	entry (char(*) aligned, char(*) aligned, char(*) aligned, char(*) aligned,
      491 				       char(*) aligned, bit(*) aligned, char(*) varying aligned, 
      492 				       char(*) varying aligned, char(*) varying aligned,
      493 				       char(*) varying aligned),
      494 	suffixed_name_$new_suffix	entry (char(*), char(*), char(*), char(32), fixed bin(35)),
      495 	translator_temp_$allocate	entry (ptr, fixed bin) returns (ptr);
      496 
      497      dcl	NL			char(1) defined (NP) position (2);
      498 
      499      dcl						/*	based variables			*/
      500 	obj			char(Lobj) aligned based (Pobj),
      501 						/* object segment being created.		*/
      502 	1 obj_red			aligned based (Pobj_red),
      503 						/* temp storage for object reductions, prior	*/
      504 						/* to outputting them into the object segment.	*/
      505 	  2 N			fixed bin,	/* number of reductions currently defined.	*/
      506 	  2 M			fixed bin,	/* maximum number which may be defined.		*/
      507 	  2 token_reqd (Nreductions refer (obj_red.M)),
      508 	    3 Ifirst		fixed bin(17) unal,	/* index of 1st and last token requirements	*/
      509 	    3 Ilast		fixed bin(17) unal,	/* associated with this reduction.		*/
      510 
      511 	obj_spaces		char(Lobj_spaces) based (Pobj_spaces),
      512 						/* overlay for a number of spaces used to 	*/
      513 						/* right-adjust an output line.		*/
      514 	obj_string		char(Lobj_string) varying aligned based (Pobj_string),
      515 						/* temp storage for object token values.	*/
      516 	obj_string_part		char(Lobj_string_part) based (Pobj_string_part),
      517 						/* overlay for a particular token value within	*/
      518 						/* the string of all object token values.	*/
      519 	obj_token_quoted (Ntokens)	bit(1) unaligned based (Pobj_token_quoted),
      520 						/* on if object token was enclosed in quotes.	*/
      521 	1 obj_token		aligned based (Pobj_token),
      522 						/* temp storage for object token requirements,	*/
      523 						/* prior to outputting them into the object seg.	*/
      524 	  2 N			fixed bin,	/* number of tokens currently defined.		*/
      525 	  2 M			fixed bin,	/* maximum number which may be defined.		*/
      526 	  2 token (Ntokens refer (obj_token.M)),
      527 	    3 form		fixed bin(17) unal,	/* form of the object token:			*/
      528 						/*  -1 = relative token requirement function;	*/
      529 						/*       type = index of the particular token	*/
      530 						/*	      function in the token_fcn array.	*/
      531 						/*   0 = built-in token requirement function;	*/
      532 						/*       type = as defined below.		*/
      533 						/*  >0 = absolute token requirement:		*/
      534 						/*       form = index(token_strings,token_req);	*/
      535 						/*       type = length(token_req);		*/
      536 	    3 type		fixed bin(17) unal,	/* type of the built-in token requirement	*/
      537 						/* function:				*/
      538 						/*   1 = compile test to see if input token 	*/
      539 						/*       chain is exhausted (<no-token>).	*/
      540 						/*   2 = compile test for any token value	*/
      541 						/*       (<any-token>).			*/
      542 						/*   3 = compile test for a PL/I identifier	*/
      543 						/*       (<name>) of 32 or fewer characters.	*/
      544 						/*   4 = compile test for token which is a	*/
      545 						/*       <decimal-integer>.			*/
      546 						/*   5 = compile test for token which is a single	*/
      547 						/*       backspace character (<BS>).		*/
      548 						/*   6 = compile test for a token which is a	*/
      549 						/*       <quoted-string>.			*/
      550 	source			char(Lsource) based(Psource),
      551 						/* overlay for reduction source segment.	*/
      552 	temp			char(Ltemp) based (Ptemp),
      553 						/* overlay for part of object segment contents	*/
      554 						/* just generated.				*/
      555 	temp_obj			char(Ltemp_obj) based (Ptemp_obj);
      556 						/* temporary copy of object segment contents.	*/
      557 
      558      dcl						/*	static variables			*/
      559 	HT			char(1) int static options(constant) init("	"),
      560 	HT_SP			char(2) int static options(constant) init("	 "),
      561 	Mreductions		fixed bin int static options(constant) init (9999),
      562 	MMstack_depth		fixed bin int static options(constant) init (9999),
      563 	Mtokens			fixed bin int static options(constant) init (9999),
      564 	NP			char(2) int static options(constant) init ("
      565 "),						/* <NP><NL>				*/
      566 	Sinitialization_reqd	bit(1) aligned int static init ("1"b),
      567 	breaks			char(19) varying aligned int static options(constant) init (" 	
      568 /\<>[]()-^=;,"),					/* BS SP HT NL / \ < > [ ] ( ) - ^ = ; , VT NP	*/
      569 	1 error_control_table (26)	aligned internal static options(constant),
      570 						/* reduction compiler error message text and 	*/
      571 						/* action specifications.			*/
      572 	  /* 1     2     3     4     5     6     7     8     9    10    11    12    13    14    15	*/
      573 	  /*16    17    18    19    20    21    22    23    24    25    26    27    28    29    30	*/
      574 	  2 severity		fixed bin(17) unaligned init (
      575 	     3,    2,    2,    3,    3,    2,    4,    4,    4,    4,    3,    4,    3,    2,    3,
      576 	     3,    4,    2,    3,    4,    3,    3,    3,    3,    3,    3),
      577 						/* severity of each error.			*/
      578 	  2 Soutput_stmt		bit(1) unaligned init (
      579 	    "0"b, "1"b, "1"b, "1"b, "0"b, "0"b, "1"b, "1"b, "1"b, "1"b, "1"b, "0"b, "1"b, "1"b, "1"b,
      580 	    "1"b, "1"b, "1"b, "1"b, "1"b, "1"b, "1"b, "1"b, "1"b, "0"b, "0"b),
      581 						/* on if "current" statement should be output	*/
      582 						/* with the error message.			*/
      583 	  2 message		char(252) varying init (
      584 	  /*  1 */
      585 "The reduction source segment does not contain any valid reductions.",
      586 	  /*  2 */
      587 "The statement is not a valid attribute declaration or
      588 reduction.  (Remember, the label of the first reduction must
      589 be 'BEGIN'.)",
      590 	  /*  3 */
      591 "Label '^a' is invalid.  The label has been ignored.",
      592 	  /*  4 */
      593 "Label '^a' in the next-reduction field of the
      594 reduction statement is invalid.  The label has been ignored.",
      595 	  /*  5 */
      596 "Unexpected end encountered.  The reduction source segment ends
      597 with an incomplete reduction.",
      598 	  /*  6 */
      599 "Unexpected statement encountered when the end of the reduction
      600 source segment was expected.",
      601 	  /*  7 */
      602 "Compiler restriction:  the reduction source segment contains
      603 more than ^d labels.  Label '^a'
      604 and all labels which follow it have been ignored.",
      605 	  /*  8 */
      606 "Compiler restriction:  the reduction source segment contains
      607 more than ^d reductions.  The reduction on line ^d,
      608 and those which follow it, could not be compiled.",
      609 	  /*  9 */
      610 "Compiler restriction:  the reduction source segment contains
      611 more than ^d tokens.  Token '^a'
      612 could not be compiled.",
      613 	  /* 10 */
      614 "Compiler restriction:  the reduction source segment contains
      615 too many different tokens.  Because more than ^d token value
      616 characters have been defined, token '^a'
      617 could not be compiled.",
      618 	  /* 11 */
      619 "Label '^a' is undefined.  The reference to this label
      620 could not be resolved.",
      621 	  /* 12 */
      622 "The reduction source segment is too large to compile, causing
      623 the object segment to overflow.",
      624 	  /* 13 */
      625 "Label '^a' has been multiply-defined.",
      626 	  /* 14 */
      627 "Token requirement '^a' appears in a reduction
      628 after a <no-token> token requirement.  This combination of
      629 requirements could never be satisfied.  Therefore, the reduction
      630 will be ignored.",
      631 	  /* 15 */
      632 "Label '^a' in the next-reduction field
      633 of a reduction is invalid.  In addition, the next-reduction field
      634 contains more than one label.  This is not allowed.",
      635 	  /* 16 */
      636 "The next-reduction field of a reduction contains more than one label.
      637 This is not allowed.",
      638 	  /* 17 */
      639 "Compiler restriction:  the reduction source segment contains
      640 more than ^d token requirement functions.
      641 Function '<^a>' could not be compiled.",
      642 	  /* 18 */
      643 "Compiler restriction:  the number specified in a 'MAX_DEPTH'
      644 attribute declaration is out of bounds.  The allowable range is:
      645 ^2-0 < MAX_DEPTH < ^d
      646 A maximum depth of ^d will be assumed.",
      647 	  /* 19 */
      648 "The '^a' built-in action routine has been used improperly
      649 in a reduction.",
      650 	  /* 20 */
      651 "In attempting to compile the reduction on line ^d,
      652 the estimated number of reductions (^d) was exceeded.
      653 The reduction on line ^d, and those which follow it,
      654 could not be compiled.",
      655 	  /* 21 */
      656 "Unexpected '^a' in the action field of the reduction statement.",
      657 	  /* 22 */
      658 "One or more fields are missing from a reduction.  All of the
      659 reduction fields (label, syntax, action, & next-label field)
      660 must be supplied.",
      661 	  /* 23 */
      662 "A quoted string appears as the name of a semantic subroutine
      663 in the action field.  This is not permitted.  The reduction
      664 has been ignored.",
      665 	  /* 24 */
      666 "A right parenthesis ()) is missing from the action field of
      667 a reduction.",
      668 	  /* 25 */
      669 "The reduction segment ends with an incomplete reduction.",
      670             /* 26 */
      671 "The reduction delimiters in the reduction segment were not
      672 found or were positioned improperly."),
      673 						/* text of the error message.			*/
      674 	  2 brief_message		char(64) varying init (
      675 	  /*  1 */
      676 "No reductions.",
      677 	  /*  2 */
      678 "Invalid statement.",
      679 	  /*  3 */
      680 "Invalid label '^a' ignored.",
      681 	  /*  4 */
      682 "Invalid label '^a' ignored.",
      683 	  /*  5 */
      684 "Reductions are incomplete.",
      685 	  /*  6 */
      686 "Unexpected statement after end of reductions.",
      687 	  /*  7 */
      688 "Restriction: >^d labels.  '^a' ignored.",
      689 	  /*  8 */
      690 "Restriction: >^d reductions.  Line ^d ignored.",
      691 	  /*  9 */
      692 "Restriction: >^d tokens.  '^a' ignored.",
      693 	  /* 10 */
      694 "Restriction: >^d token characters.  '^a' ignored.",
      695 	  /* 11 */
      696 "Label '^a' undefined.",
      697 	  /* 12 */
      698 "Object segment overflow.",
      699 	  /* 13 */
      700 "Label '^a' multiply-defined.",
      701 	  /* 14 */
      702 "'^a' appears after <no-token>.",
      703 	  /* 15 */
      704 "Label '^a' invalid & >1 next-reduction labels.",
      705 	  /* 16 */
      706 ">1 label in next-reduction field.",
      707 	  /* 17 */
      708 "Restriction: >^d token requirement functions.  '<^a>' ignored.",
      709 	  /* 18 */
      710 "Restriction:  0 < MAX_DEPTH < ^d.  ^d assumed.",
      711 	  /* 19 */
      712 "'^a' built-in used improperly.",
      713 	  /* 20 */
      714 "#_reductions > ^s^d estimate.",
      715 	  /* 21 */
      716 "Unexpected '^a' ignored.",
      717 	  /* 22 */
      718 "Incomplete reduction.",
      719 	  /* 23 */
      720 "Quoted subroutine name.",
      721 	  /* 24 */
      722 "')' missing from action field.",
      723 	  /* 25 */
      724 "Reductions incomplete.",
      725 	  /* 26 */
      726 "Bad reduction delimiters."),
      727 	ignored_breaks		char(5) varying aligned int static options(constant) init (" 	
      728 "),					/* SP HT NL VT NP					*/
      729          (error_table_$fatal_error,
      730 	error_table_$improper_data_format)
      731 				fixed bin(35) ext static,
      732 	lex_control_chars		char(128) varying aligned int static,
      733 	lex_delims		char(128) varying aligned int static,
      734 	nl			char(1) aligned int static options(constant) init ("
      735 "),
      736 	spaces			char(120) aligned int static options(constant) init ((120)" ");
      737 
      738 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
      739 
      740 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
      741 
      742 
      743 	Acode = 0;				/* initialize error code.			*/
      744 	SERROR_CONTROL = Scontrol;
      745 	S_TRACE = substr(bit(Scontrol,36),3,1);
      746 	if S_TRACE then S_TRACE_ON = substr(bit(Scontrol,36),4,1);
      747 	else S_TRACE_ON = "0"b;
      748 	TRACING = S_TRACE;
      749 	Pobj_spaces = addr(spaces);
      750 	Pstmt, Pthis_token = null;			/* start out with no input tokens.		*/
      751 	Ired_start = index(source,"/*++");		/* find reductions in reduction source segment.	*/
      752 	Ired_end = index(source,"++*/");
      753 	if (Ired_start = 0) | (Ired_end = 0) | (Ired_start+4 >= Ired_end-1) then do;
      754 	     call ERROR(26);
      755 	     Acode = error_table_$improper_data_format;
      756 	     go to RETURN;
      757 	     end;
      758 	Ired_start = Ired_start + 4;			/* skip over delimiters.			*/
      759 	Ired_end = Ired_end - 1;
      760 	if Sinitialization_reqd then do;		/* initialize static variables.		*/
      761 	   call lex_string_$init_lex_delims ("""", """", "\""", nl, "\", "10"b,
      762 		breaks, ignored_breaks, lex_delims, lex_control_chars);
      763 	     Sinitialization_reqd = "0"b;
      764 	     end;
      765 	call lex_string_$lex (Psource, Ired_end-Ired_start+1, Ired_start-1, Psegment, "1"b,
      766 	   """", """", "\""", nl, "\", breaks, ignored_breaks,
      767 	     lex_delims, lex_control_chars, null, Ptoken, code);
      768 	if code ^= 0 then				/* lex source segment into tokens.		*/
      769 	     call ERROR(25);
      770 	if Ptoken = null then do;
      771 	     Acode = code;
      772 	     go to RETURN;
      773 	     end;
      774 	Pthis_token = Ptoken;
      775 	call SEMANTIC_ANALYSIS;			/* perform semantic analysis of tokens.		*/
      776 RETURN:	Mseverity = MERROR_SEVERITY;
      777 	if Mseverity > 2 then do;			/* Fatal error?  Return nothing.		*/
      778 	     ALobj = 0;
      779 	     if Acode = 0 then
      780 		Acode = error_table_$fatal_error;
      781 	     end;
      782 	return;					/* All done!				*/
      783 
      784 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
      785 
      786 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
      787 
      788 
      789 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      790 	/*									*/
      791 	/* RELATIVE SYNTAX FUNCTIONS							*/
      792 	/*									*/
      793 	/*      The relative syntax functions below are invoked to compare the input tokens	*/
      794 	/* with specifications built into the function.					*/
      795 	/*									*/
      796 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      797 
      798 
      799 PUSH_DOWN_LANGUAGE:	procedure returns (bit(1) aligned);	/* returns "1"b if a 'PUSH DOWN LANGUAGE' is being*/
      800 						/* compiled.				*/
      801 
      802 	return (S_PDL);
      803 
      804 	end PUSH_DOWN_LANGUAGE;
      805 
      806 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
      807 
      808 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
      809 
      810 
      811 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      812 	/*									*/
      813 	/* ACTION ROUTINES:								*/
      814 	/*									*/
      815 	/*      The action routines below are invoked at various stages of the compilation	*/
      816 	/* process to impart semantic meaning to the series of tokens which have passed the	*/
      817 	/* syntactic analysis tests of the input reductions.				*/
      818 	/*									*/
      819 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      820 
      821 
      822 action_begin:	procedure;			/* invoked when beginning to compile the actions	*/
      823 						/* associated with a particular reduction.	*/
      824 
      825 	call output ("
      826 RD_ACTION(");					/* output label array constant identifying rtn.	*/
      827 	call output_number (Nobj_red);
      828 	call output ("):					/* /					*/
      829 ");
      830 	end action_begin;
      831 
      832 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
      833 
      834 
      835 compile_token:	procedure (type);			/* invoked to compile a syntax specification for	*/
      836 						/* the reduction being parsed.		*/
      837 
      838      dcl	type			fixed bin;	/* type of specification to be compiled. (In)	*/
      839 						/*   0 = compile absolute token requirement whose	*/
      840 						/*       value is the character string value of	*/
      841 						/*       the "current" token.			*/
      842 						/*   1 = compile test to see if input token 	*/
      843 						/*       chain is exhausted (<no-token>).	*/
      844 						/*   2 = compile test for any token value	*/
      845 						/*       (<any-token>).			*/
      846 						/*   3 = compile test for a PL/I identifier	*/
      847 						/*       (<name>) of 32 or fewer characters.	*/
      848 						/*   4 = compile test for token which is a	*/
      849 						/*       <decimal-integer>.			*/
      850 						/*   5 = compile test for token which is a single	*/
      851 						/*       backspace character (<BS>).		*/
      852 						/*   6 = compile test for token which is a	*/
      853 						/*       <quoted-string>.			*/
      854 						/*   7 = compile relative token requirement fcn.	*/
      855 
      856 	Nobj_token = obj_token.N + 1;			/* increment count of object tokens.		*/
      857 	if Nobj_token > obj_token.M then do;		/* make sure we don't overflow obj token table.	*/
      858 	     call lex_error_ (9, SERROR_PRINTED(9), (error_control_table(9).severity), MERROR_SEVERITY,
      859 			  addrel(token.Pstmt,0), Ptoken, SERROR_CONTROL, (error_control_table(9).message),
      860 			  (error_control_table(9).brief_message), obj_token.M, token_value);
      861 	     go to RETURN;
      862 	     end;
      863 	obj_token.N = Nobj_token;			/* append token to obj token array, and to list 	*/
      864 	obj_red.Ilast (Nobj_red) 			/* of object tokens related to reduction being	*/
      865 	     = obj_red.Ilast (Nobj_red) + 1;		/* parsed.				*/
      866 	go to comp (type);				/* compile the appropriate type of token.	*/
      867 
      868 comp(0):	i = index (obj_string, token_value);		/* see if current token exists in string	*/
      869 						/* of previously-defined token values.		*/
      870 	if i > 0 then do;				/* if so, use previously-defined string.	*/
      871 	     obj_token.form (Nobj_token) = i;
      872 	     obj_token.type (Nobj_token) = token.Lvalue;
      873 	     obj_token_quoted (Nobj_token) = token.S.quoted_string;
      874 	     end;
      875 	else do;					/* if not found, add it to obj token string	*/
      876 						/* values.				*/
      877 	     Soptimize_possible = "0"b;		/* optimization of obj token storage requirements	*/
      878 						/* no longer possible for this reduction.	*/
      879 	     if token.Lvalue + length (obj_string) > Lobj_string then do;
      880 		call lex_error_ (10, SERROR_PRINTED(10), (error_control_table(10).severity), MERROR_SEVERITY,
      881 			       addrel(token.Pstmt,0), Ptoken, SERROR_CONTROL, (error_control_table(10).message),
      882 			       (error_control_table(10).brief_message), Lobj_string, token_value);
      883 		go to RETURN;			/* complain if token too big for object string.	*/
      884 		end;
      885 	     else do;
      886 		obj_token.form (Nobj_token) = length (obj_string) + 1;
      887 		obj_token.type (Nobj_token) = token.Lvalue;
      888 		obj_token_quoted (Nobj_token) = token.S.quoted_string;
      889 		obj_string = obj_string || token_value;
      890 		end;
      891 	     end;
      892 	return;
      893 comp(1):
      894 comp(2):
      895 comp(3):
      896 comp(4):
      897 comp(5):
      898 comp(6):	obj_token.form (Nobj_token) = 0;		/* indicate built-in nature of object token.	*/
      899 	obj_token.type (Nobj_token) = type;		/* set appropriate object token type.		*/
      900 	return;
      901 
      902 comp(7):	obj_token.form (Nobj_token) = -1;
      903 	do Nobj_token_fcn = 1 to obj_token_fcn.N while (obj_token_fcn.name(Nobj_token_fcn) ^= token_value);
      904 	     end;					/* see if it was previously defined.		*/
      905 	if Nobj_token_fcn <= obj_token_fcn.N then do;	/* yes, it was.				*/
      906 	     obj_token.type (Nobj_token) = Nobj_token_fcn;
      907 	     return;
      908 	     end;
      909 
      910 	if Nobj_token_fcn > dimension (obj_token_fcn.name, 1) then do;
      911 	     call lex_error_ (17, SERROR_PRINTED(17), (error_control_table(17).severity), MERROR_SEVERITY,
      912 			  addrel(token.Pstmt,0), Ptoken, SERROR_CONTROL, (error_control_table(17).message),
      913 			  (error_control_table(17).brief_message), dimension(obj_token_fcn.name,1), token_value);
      914 						/* complain if no more room to define functions.	*/
      915 	     go to RETURN;
      916 	     end;
      917 	obj_token.type(Nobj_token) = Nobj_token_fcn;
      918 	obj_token_fcn.N = Nobj_token_fcn;
      919 	obj_token_fcn.name(Nobj_token_fcn) = token_value;
      920 
      921 	end compile_token;
      922 
      923 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
      924 
      925 
      926 count_reduction:	proc;				/* invoked during pass 1 to count the number of	*/
      927 						/* reductions and tokens being compiled.	*/
      928 
      929 	Nreductions = Nreductions + 1;		/* count reduction being parsed.		*/
      930 	if Nreductions > Mreductions then do;		/* check for too many reductions.		*/
      931 	     Nreductions = Mreductions;
      932 	     Ptoken = Pthis_token;
      933 	     Pstmt = token.Pstmt;
      934 	     call lex_error_ (8, SERROR_PRINTED(8), (error_control_table(8).severity), MERROR_SEVERITY,
      935 			  addrel(token.Pstmt,0), Ptoken, SERROR_CONTROL, (error_control_table(8).message),
      936 			  (error_control_table(8).brief_message), Mreductions, fixed (stmt.line_no,35));
      937 	     go to RETURN;
      938 	     end;
      939 	Pstmt = token.Pstmt;
      940 	Llongest_red = min (254, max(Llongest_red, length(stmt_value)));
      941 	return;
      942 
      943 count_token:	entry (N);
      944 
      945      dcl	N			fixed bin;	/* number of tokens to be counted. (In)		*/
      946 
      947 	Ntokens = min (Mtokens, Ntokens + 1);		/* By counting every token requirement of each	*/
      948 						/* reduction, we get an upper limit on the number	*/
      949 						/* of object tokens.			*/
      950 	do i = 1 to N;				/* in each reduction, count length of every token	*/
      951 	     Lobj_string = min (Mtokens, Lobj_string + token.Lvalue);
      952 	     Ptoken = token.Pnext;			/* to get upper limit on length of string in which*/
      953 	     end;					/* tokens will be stored by compiler.	*/
      954 
      955 	end count_reduction;
      956 
      957 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
      958 
      959 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
      960 
      961 
      962 label_value:	procedure (label_sought)		/* invoked to obtain the reduction number which	*/
      963 		returns	(fixed bin(17));		/* is the value of a given reduction label.	*/
      964 
      965      dcl	label_sought		char(*),		/* name of label whose value is sought. (In)	*/
      966 	i			fixed bin;	/* do group index.				*/
      967 
      968 	do i = 1 to obj_label.N while (obj_label.name(i) ^= label_sought);
      969 	     end;					/* search for the sought label in list of defined	*/
      970 						/* labels.				*/
      971 	if i > obj_label.N then do;			/* if label not found in list, complain.	*/
      972 	     call ERROR(11);
      973 	     return(1);				/* return value for first reduction.		*/
      974 	     end;
      975 	else					/* if label found, return its value.		*/
      976 	     return (obj_label.reduction_no(i));
      977 
      978 	end label_value;
      979 
      980 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
      981 
      982 
      983 next_reduction:	procedure;			/* invoked to compile the next-reduction field of	*/
      984 						/* a reduction where no label is specified.  This	*/
      985 						/* means "proceed with the next reduction".	*/
      986 
      987 	call output ("	go to RD_NEXT_REDUCTION;			/* /	\				*/
      988 ");
      989 
      990 	end next_reduction;
      991 
      992 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
      993 
      994 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
      995 
      996 
      997 number:	procedure (no, statement) returns (char(*));	/* Procedure to put a sequence number at the 	*/
      998 						/* beginning of each reduction (in label field).	*/
      999      dcl	no			fixed bin,
     1000 	statement			char(*);
     1001 
     1002      dcl	Isearch			fixed bin,
     1003 	number			char(4) varying;
     1004 
     1005 	number = ltrim(char(no));
     1006 	if substr(ltrim(statement, HT_SP), 1, 1) = "/" then do;
     1007 						/* Don't put in a sequence number if a label	*/
     1008 						/* is already present.			*/
     1009 	     if substr(statement,1,1) = HT then
     1010 		return (number || statement);
     1011 	     if substr(statement,1,length(number)) = "" then
     1012 		return (number || substr(statement, length(number)+1));
     1013 	     if substr(statement,1,1) = "/" then
     1014 		return(statement);
     1015 	     end;
     1016 
     1017 	Isearch = verify(statement, "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_0123456789");
     1018 	Isearch = (Isearch-1) + verify(substr(statement,Isearch), HT_SP);
     1019 	if substr(statement,Isearch,1) = NL then do;	/* Look for label on line by itself, with next	*/
     1020 						/*   line starting with whitespace.		*/
     1021 	     Isearch = Isearch + 1;
     1022 	     if substr(statement,Isearch,1) = HT then	/*   line begins with HT.			*/
     1023 		return (substr(statement,1,Isearch-1) || number ||
     1024 		     substr(statement,Isearch));
     1025 	     if substr(statement,Isearch,length(number)) = "" then
     1026 		return (substr(statement,1,Isearch-1) || number ||
     1027 		     substr(statement,Isearch+length(number)));
     1028 	     end;
     1029 	return (statement);
     1030 
     1031 	end number;
     1032 
     1033 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     1034 
     1035 
     1036 output:	procedure	(chars);				/* invoked to write a character string into the	*/
     1037 						/* object segment.				*/
     1038 
     1039      dcl	chars			char(*);		/* the character string to be written. (In)	*/
     1040 
     1041 	if length (chars) > Lobj then do;		/* make sure character string will fit.		*/
     1042 	     call ERROR(12);
     1043 	     go to RETURN;				/* give up completely.  This error is very fatal.	*/
     1044 	     end;
     1045 	substr (obj, 1, length(chars)) = chars;
     1046 	Pobj = addr (substr (obj, length(chars)+1));
     1047 	Lobj = Lobj - length(chars);
     1048 	Lobj_part = Lobj_part + length(chars);
     1049 
     1050 	end output;
     1051 
     1052 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     1053 
     1054 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     1055 
     1056 
     1057 
     1058 output_quote:	procedure (chars);			/* invoked to write a character string into the	*/
     1059 						/* object segment, handling the doubling of quotes*/
     1060 						/* if necessary.				*/
     1061 
     1062      dcl	chars			char(*);		/* the character string (possibly containing	*/
     1063 						/* quotes which must be doubled) to be output.	*/
     1064      dcl	Iquote			fixed bin(21),	/* index into part of character string.		*/
     1065 	Lpart			fixed bin(21),	/* length of part of character string.		*/
     1066 	Ppart			ptr,		/* ptr to part of character string.		*/
     1067 	up_to_quote		char(Iquote) based (Ppart),
     1068 						/* part of part up to the next quote.		*/
     1069 	part			char(Lpart) based (Ppart);
     1070 						/* part of character string.			*/
     1071 
     1072 	call output ("""");
     1073 	Ppart = addr(chars);
     1074 	Lpart = length(chars);
     1075 	Iquote = index(part, """");
     1076 	do while (Iquote > 0);
     1077 	     call output (up_to_quote);
     1078 	     call output ("""");
     1079 	     Ppart = addr(substr(part,Iquote+1));
     1080 	     Lpart = Lpart - Iquote;
     1081 	     Iquote = index(part, """");
     1082 	     end;
     1083 	if Lpart > 0 then call output (part);
     1084 	call output ("""");
     1085 
     1086 	end output_quote;
     1087 
     1088 
     1089 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     1090 
     1091 
     1092 output_number:	procedure (number);			/* invoked to convert a number to a character	*/
     1093 						/* string, strip off leading blanks, and output	*/
     1094 						/* the result.				*/
     1095 
     1096      dcl	number			fixed bin,	/* number to be output. (In)			*/
     1097 	ltrim			builtin;
     1098 
     1099 	Nchar = number;				/* convert number to a character string.	*/
     1100 	call output (ltrim(Nchar));
     1101 
     1102 	end output_number;
     1103 
     1104 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     1105 
     1106 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     1107 
     1108 
     1109 output_source:
     1110      	procedure (Ostart, Iend);
     1111 
     1112      dcl	Ostart			fixed bin(21),
     1113 	Iend			fixed bin(21);
     1114 
     1115      dcl	Lsource_part		fixed bin(21),
     1116 	Psource_part		ptr,
     1117 	source_part		char(Lsource_part) based(Psource_part);
     1118 
     1119 	Psource_part = addcharno(addr(source), Ostart);
     1120 	Lsource_part = Iend - Ostart;
     1121 	call output (source_part);
     1122 
     1123 	end output_source;
     1124 
     1125 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
     1126 
     1127 
     1128 output_var:	procedure (chars);			/* invoked to write a varying character string	*/
     1129 						/* into the output segment.			*/
     1130 
     1131      dcl	chars			char(*) varying aligned;
     1132 						/* the character string to be written. (In)	*/
     1133 
     1134 	if length (chars) > Lobj then do;		/* make sure character string will fit.		*/
     1135 	     call ERROR(12);
     1136 	     go to RETURN;
     1137 	     end;
     1138 	else do;
     1139 	     substr (obj, 1, length(chars)) = chars;
     1140 	     Pobj = addr (substr (obj, length(chars)+1));
     1141 	     Lobj = Lobj - length(chars);
     1142 	     Lobj_part = Lobj_part + length(chars);
     1143 	     end;
     1144 
     1145 	end output_var;
     1146 
     1147 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
     1148 
     1149 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     1150 
     1151 
     1152 reduction_begin:	procedure;			/* invoked to begin parsing a reduction.	*/
     1153 
     1154 	Nobj_red = obj_red.N + 1;			/* address the next object reduction.		*/
     1155 	if Nobj_red > obj_red.M then do;		/* if there is none, complain.		*/
     1156 	     Pstmt = token.Pstmt;
     1157 	     call lex_error_ (20, SERROR_PRINTED(20), (error_control_table(20).severity), MERROR_SEVERITY,
     1158 			  Pstmt, Ptoken, SERROR_CONTROL, (error_control_table(20).message),
     1159 			  (error_control_table(20).brief_message), fixed(stmt.line_no,35), obj_red.M,
     1160 			  fixed(stmt.line_no,35));
     1161 	     go to RETURN;
     1162 	     end;
     1163 
     1164 	obj_red.Ifirst (Nobj_red) = obj_token.N + 1;	/* initiate indices of first/last token req'mts	*/
     1165 	obj_red.Ilast (Nobj_red) = obj_token.N;		/* to reflect no token requirements (so far).	*/
     1166 	Soptimize_possible = "1"b;			/* indicate optimization of token requirements is	*/
     1167 						/* possible (so far).			*/
     1168 	end reduction_begin;
     1169 
     1170 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
     1171 
     1172 
     1173 reduction_end:	procedure;			/* invoke to end parsing of a reduction.	*/
     1174 
     1175 	obj_red.N = Nobj_red;			/* Formally add the completed reduction to the	*/
     1176 						/* object reduction array.			*/
     1177 	if Soptimize_possible then;			/* All end work involves optimization of token	*/
     1178 	else					/* requirement storage.  If optimization not	*/
     1179 	     return;				/* possible, quit while we're ahead.		*/
     1180 	if obj_red.Ifirst (Nobj_red) > obj_red.Ilast (Nobj_red) then
     1181 	     return;				/* same if no token requirements associated with	*/
     1182 						/* the reduction.				*/
     1183 	form = obj_token.form (obj_red.Ifirst(Nobj_red));	/* for efficiency, save value of first token 	*/
     1184 	type = obj_token.type (obj_red.Ifirst(Nobj_red));	/* requirement associated with reduction.	*/
     1185 	do i = 1 to obj_red.Ifirst(Nobj_red) - 1;	/* search through previously-defined token	*/
     1186 	     if obj_token.form(i) = form then		/* requirements for a series which match those	*/
     1187 	     if obj_token.type(i) = type then do;	/* associated with reduction.			*/
     1188 		do j = 1 to obj_red.Ilast(Nobj_red) - obj_red.Ifirst(Nobj_red);
     1189 		     if obj_token.form(i+j) = obj_token.form(obj_red.Ifirst(Nobj_red)+j) then
     1190 			if obj_token.type(i+j) = obj_token.type(obj_red.Ifirst(Nobj_red)+j) then;
     1191 			else
     1192 			     go to no_match;
     1193 		     else
     1194 			go to no_match;
     1195 		     end;
     1196 		j = j - 1;			/* make j = do-group end limit above.		*/
     1197 		obj_token.N = max(obj_red.Ifirst(Nobj_red)-1, i+j);
     1198 		obj_red.Ifirst (Nobj_red) = i;	/* if search succeeds, use previously-defined	*/
     1199 		obj_red.Ilast (Nobj_red) = i + j;	/* tokens in this reduction.			*/
     1200 		return;
     1201 no_match:		end;
     1202 	     end;
     1203 
     1204 	end reduction_end;
     1205 
     1206 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     1207 
     1208 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     1209 
     1210 
     1211 reductions_begin:	procedure;			/* invoked before parsing the first reduction to	*/
     1212 						/* temporary storage for object reductions, object*/
     1213 						/* tokens, and object token strings.		*/
     1214 						/* Also initialize object segment and maximum	*/
     1215 						/* severity value.				*/
     1216 	Pobj_red = translator_temp_$allocate (Psegment, size(obj_red));
     1217 	obj_red.M = Nreductions;
     1218 	Pobj_token = translator_temp_$allocate (Psegment, size(obj_token));
     1219 	obj_token.M = Ntokens;
     1220 	Pobj_token_quoted = translator_temp_$allocate (Psegment, size(obj_token_quoted));
     1221 	Pobj_string = translator_temp_$allocate (Psegment, size(obj_string));
     1222 	if S_TRACE then
     1223 	     Llongest_red = min(254, Llongest_red + log(Nreductions));
     1224 	obj_red.N = 0;
     1225 	obj_token.N = 0;
     1226 	string (obj_token_quoted) = "0"b;
     1227 	obj_token_fcn.N = 0;
     1228 	Pobj = APobj;
     1229 	Lobj = ALobj;
     1230 
     1231 	end reductions_begin;
     1232 
     1233 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     1234 
     1235 
     1236 reductions_end:	procedure;			/* invoked after all reductions have been parsed,	*/
     1237 						/* and after action routine calls have been	*/
     1238 						/* output.				*/
     1239 
     1240 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
     1241 	/*									*/
     1242 	/* 1) Store maximum severity as an output value.  If it is greater than 2, return with	*/
     1243 	/*    an empty object segment as output.					*/
     1244 	/* 2) Otherwise:								*/
     1245 	/*    a) copy the action routine calls which have already been output into temporary	*/
     1246 	/*       storage.								*/
     1247 	/*    b) re-initialize the output object segment to zero length.			*/
     1248 	/*    c) output declarations for the object reduction and token structures.		*/
     1249 	/*    d) re-output the copied action routine calls.				*/
     1250 	/*    e) output an end statement.						*/
     1251 	/*									*/
     1252 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
     1253 
     1254 	if MERROR_SEVERITY > 2 then
     1255 	     go to RETURN;
     1256 	if obj_red.N = 0 then do;			/* if there is no output, give up.		*/
     1257 	     call ERROR(1);
     1258 	     go to RETURN;
     1259 	     end;
     1260 	Ptemp = APobj;				/* copy contents of object segment output so far	*/
     1261 	Ltemp = ALobj - Lobj;			/* to temp storage so we can reuse		*/
     1262 	Ltemp_obj = Ltemp;				/* space at head of object segment.		*/
     1263 	Ptemp_obj = translator_temp_$allocate (Psegment, size(temp_obj));
     1264 	temp_obj = temp;
     1265 	Pobj = APobj;
     1266 	Lobj = ALobj;
     1267 
     1268 	call output(NP);				/* output start of SEMANTIC_ANALYSIS subroutine.	*/
     1269 	if S_TRACE_ON then
     1270 	     call output ("
     1271      dcl	TRACING			bit(1) aligned int static init(""1""b);
     1272 ");
     1273 	else call output ("
     1274      dcl	TRACING			bit(1) aligned int static init(""0""b);
     1275 ");
     1276 	call output ("
     1277 
     1278 %include rdc_start_;
     1279 ");
     1280 
     1281 	call output (NP);				/* output the reduction label stack.		*/
     1282 	if S_PDL then
     1283 	     call output ("     dcl	DIRECTION			fixed bin init(-1);	/* direction in which tokens compared.		*/
     1284 ");
     1285 	else call output ("     dcl	DIRECTION			fixed bin init(+1);	/* direction in which tokens compared.		*/
     1286 ");
     1287 	if Sinclude_STACK then do;
     1288 	     call output ("     dcl	STACK (");
     1289 	     call output_number (Mstack_depth);
     1290 	     call output (")   		fixed bin,	/* reduction label stack.			*/
     1291 	STACK_DEPTH		fixed bin init (0);	/* index into STACK.			*/
     1292 ");
     1293 	     end;
     1294 
     1295 						/* output declaration for object reductions.	*/
     1296 	call output ("
     1297 
     1298      dcl	1 REDUCTION (");
     1299 	call output_number (obj_red.N);
     1300 	call output (")		unaligned based (addr (REDUCTIONS)),
     1301 						/* object reductions.			*/
     1302 	  2 TOKEN_REQD,
     1303 ");
     1304 	call output ("	    3 IFIRST		fixed bin(17),	/* index of first required token.		*/
     1305 	    3 ILAST		fixed bin(17),	/* index of last required token.		*/
     1306 
     1307 	REDUCTIONS  (");
     1308 	call output_number (obj_red.N + obj_red.N);
     1309 	call output (")		fixed bin(17) unaligned internal static options(constant) initial (
     1310 ");
     1311 
     1312 	do i = 1 to obj_red.N;
     1313 	     call output ("	     ");
     1314 	     if S_PDL then Nchar = obj_red.Ilast (i);
     1315 		    else Nchar = obj_red.Ifirst(i);
     1316 	     call output ((Nchar));
     1317 	     call output (", ");
     1318 	     if S_PDL then Nchar = obj_red.Ifirst(i);
     1319 		    else Nchar = obj_red.Ilast (i);
     1320 	     call output ((Nchar));
     1321 	     if i = obj_red.N then
     1322 		call output (");	/* ");
     1323 	     else
     1324 		call output (",	/* ");
     1325 	     Nchar = i;
     1326 	     call output ((Nchar));
     1327 	     call output ("/  ");
     1328 	     Lobj_part = 41;
     1329 	     do j = obj_red.Ifirst(i) to obj_red.Ilast(i);
     1330 		if obj_token.form(j) > 0 then do;
     1331 		     Pobj_string_part = addr(substr(obj_string, obj_token.form(j)));
     1332 		     Lobj_string_part = obj_token.type(j);
     1333 		     if obj_token_quoted(j) then
     1334 			call output_quote (obj_string_part);
     1335 		     else call output (obj_string_part);
     1336 		     call output (" ");
     1337 		     end;
     1338 		else if obj_token.form(j) = 0 then do;
     1339 		     go to comment (obj_token.type(j));
     1340 
     1341 comment(1):	     call output ("<no-token> ");
     1342 		     go to end_comment;
     1343 comment(2):	     call output ("<any-token> ");
     1344 		     go to end_comment;
     1345 comment(3):	     call output ("<name> ");
     1346 		     go to end_comment;
     1347 comment(4):	     call output ("<decimal-integer> ");
     1348 		     go to end_comment;
     1349 comment(5):	     call output ("<BS> ");
     1350 		     go to end_comment;
     1351 comment(6):	     call output ("<quoted-string> ");
     1352 end_comment:	     end;
     1353 		else do;
     1354 		     call output ("<");
     1355 		     call output_var (obj_token_fcn.name(obj_token.type(j)));
     1356 		     call output ("> ");
     1357 		     end;
     1358 		end;
     1359 	     Lobj_spaces = max(0, 110-Lobj_part);
     1360 	     call output (obj_spaces);
     1361 	     call output ("*/
     1362 ");
     1363 	     end;
     1364 
     1365 	call output (NP);				/* output declaration for object tokens.	*/
     1366 	call output ("     dcl	1 TOKEN_REQUIREMENT (");
     1367 	call output_number (obj_token.N);
     1368 	call output (")	unaligned based (addr (TOKEN_REQUIREMENTS)),
     1369 						/* object token requirements.			*/
     1370 	  2 FORM			fixed bin(17),	/* form of the token requirement:		*/");
     1371 	call output ("
     1372 						/*  -1 = relative token requirement function;	*/
     1373 						/*       TYPE = index of the particular token	*/
     1374 						/*	      function in the token_fcn array.	*/
     1375 						/*   0 = built-in token requirement function;	*/");
     1376 	call output ("
     1377 						/*       TYPE = as defined below.		*/
     1378 						/*  >0 = absolute token requirement:		*/
     1379 						/*       FORM = index(TOKEN_STRINGS,TOKEN_REQD);	*/
     1380 						/*       TYPE = length(TOKEN_REQD);		*/");
     1381 	call output ("
     1382 	  2 TYPE			fixed bin(17) unal,	/* type of the built-in token requirement	*/
     1383 						/* function:				*/
     1384 						/*   1 = compile test to see if input token 	*/");
     1385 	call output ("
     1386 						/*       chain is exhausted (<no-token>).	*/
     1387 						/*   2 = compile test for any token value	*/
     1388 						/*       (<any-token>).			*/");
     1389 	call output ("
     1390 						/*   3 = compile test for a PL/I identifier	*/
     1391 						/*       (<name>) of 32 or fewer characters.	*/
     1392 						/*   4 = compile test for token which is a	*/
     1393 						/*       <decimal-integer>.			*/");
     1394 	call output ("
     1395 						/*   5 = compile test for token which is a single	*/
     1396 						/*       backspace character (<BS>).		*/
     1397 						/*   6 = compile test for a token which is a	*/
     1398 						/*       <quoted-string>.			*/");
     1399 	call output ("
     1400 
     1401 	TOKEN_REQUIREMENTS  (");
     1402 	call output_number (obj_token.N + obj_token.N);
     1403 	call output (")	fixed bin(17) unaligned internal static options(constant) initial (");
     1404 	do i = 1 to obj_token.N;
     1405 	     call output ("
     1406 	     ");
     1407 	     do i = i to min (obj_token.N, i + 6);
     1408 		Nchar = obj_token.form(i);
     1409 		call output ((Nchar));
     1410 		call output (",");
     1411 		Nchar = obj_token.type(i);
     1412 		call output ((Nchar));
     1413 		if i = obj_token.N then
     1414 		     call output (");
     1415 ");
     1416 		else
     1417 		     call output (",   ");
     1418 		end;
     1419 	     i = i - 1;
     1420 	     end;
     1421 
     1422 	i = length (obj_string);			/* output declaration for object token values.	*/
     1423 	call output ("
     1424 
     1425      dcl	TOKEN_STRINGS		char(");
     1426 	call output_number (i);
     1427 	call output (") aligned based (addr (TOKEN_STRING_ARRAYS)),
     1428 						/* object token values.			*/
     1429 ");
     1430 	i = divide (length(obj_string),100,17,0) + 1;	/* compute number of 100-char substrings.	*/
     1431 	call output ("	TOKEN_STRING_ARRAYS (");
     1432 	call output_number (i);
     1433 	call output (")	char(100) aligned internal static options(constant) initial (
     1434 ");
     1435 	Lobj_string_part = 100;
     1436 	do i = 0 to i-2;
     1437 	     call output ("	     """);
     1438 	     Pobj_string_part = addr (substr (obj_string, i*100+1));
     1439 	     call output (obj_string_part);
     1440 	     call output (""",
     1441 ");
     1442 	     end;
     1443 	call output ("	     """);
     1444 	Pobj_string_part = addr (substr (obj_string, i*100+1));
     1445 	Lobj_string_part = length(obj_string) - i*100;
     1446 	call output (obj_string_part);
     1447 	call output (""");
     1448 ");
     1449 
     1450 	call output (NP);				/* output include statement for end semant.	*/
     1451 	call output ("	%include rdc_end_;
     1452 ");
     1453 	if obj_token_fcn.N > 0 then do;		/* output relative syntax function calls, if any. */
     1454 	     call output ("
     1455 	     else do;				/* relative syntax function.			*/
     1456 		go to RD_TOKEN_FCN(TOKEN_REQD.TYPE);
     1457 ");
     1458 	     do i = 1 to obj_token_fcn.N;
     1459 		call output ("
     1460 RD_TOKEN_FCN(");	call output_number(i);
     1461 		call output("):	STOKEN_FCN = ");
     1462 		call output_var (obj_token_fcn.name(i));
     1463 		call output ("();
     1464 		go to RD_TEST_RESULT;");
     1465 		end;
     1466 	     call output ("
     1467 
     1468 RD_TEST_RESULT:	if STOKEN_FCN then go to RD_MATCH;
     1469 		else go to RD_NEXT_REDUCTION;
     1470 		end;
     1471 ");
     1472 	     end;
     1473 
     1474 	if S_PDL then
     1475 	     call output ("
     1476 RD_MATCH:	     Ptoken = token.Plast;
     1477 RD_MATCH_NO_TOKEN:
     1478 	     end;
     1479 	Ptoken = Pthis_token;
     1480 ");
     1481 	else call output ("
     1482 RD_MATCH:      Ptoken = token.Pnext;
     1483 RD_MATCH_NO_TOKEN:
     1484 	     end;
     1485 	Ptoken = Pthis_token;
     1486 ");
     1487 	if S_TRACE then do;
     1488 	     call output ("
     1489 	if TRACING then do;
     1490 	     call PRINT_REDUCTION(NRED);
     1491 	     call PRINT_TOKENS (DIRECTION, (RED.TOKEN_REQD.IFIRST), (RED.TOKEN_REQD.ILAST));
     1492 	     end;
     1493 ");
     1494 	     end;
     1495 	call output ("	go to RD_ACTION(NRED);
     1496 ");
     1497 
     1498 	if Sinclude_STACK then do;			/* include the label stack functions.		*/
     1499 	     call output (NP);
     1500 	     call output ("	%include rdc_stack_fcns_;
     1501 ");
     1502 	     end;
     1503 
     1504 	call output (NP);				/* output action routine calls saved previously.	*/
     1505 	call output (temp_obj);
     1506 	if S_TRACE then do;
     1507 	     call output (NP);
     1508 	     call output ("%include rdc_tracing_fcns_;
     1509 ");
     1510 	     end;
     1511 	call output ("
     1512 
     1513 	end SEMANTIC_ANALYSIS;
     1514 
     1515 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     1516 ");
     1517 
     1518 	call output (NP);				/* define the PUSH DOWN LANGUAGE switch and	*/
     1519 						/*   include the LEX subroutine in object seg.	*/
     1520 	if S_PDL then
     1521 	     call output ("     dcl	SPDL			bit(1) aligned init (""1""b);
     1522 						/* on: This compiler parses a PUSH DOWN LANGUAGE.	*/
     1523 
     1524 ");	else
     1525 	     call output ("     dcl	SPDL			bit(1) aligned init (""0""b);
     1526 						/* off: This compiler parses a non-PUSH DOWN	*/
     1527 						/*      LANGUAGE.				*/
     1528 ");
     1529 	if Sinclude_LEX then
     1530 	     call output ("	%include rdc_lex_;
     1531 ");
     1532 	if Sinclude_DELETE then do;			/* include the DELETE subroutine.		*/
     1533 	     call output (NP);
     1534 	     call output ("	%include rdc_delete_;
     1535 ");	     end;
     1536 	if Sinclude_DELETE_STMT then do;		/* include the DELETE_STMT subroutine.		*/
     1537 	     call output (NP);
     1538 	     call output ("	%include rdc_delete_stmt_;
     1539 ");	     end;
     1540 	if Sinclude_ERROR then do;			/* output include statement for ERROR message proc*/
     1541 	     call output (NP);
     1542 	     call output ("	%include rdc_error_;
     1543 ");
     1544 	     end;
     1545 
     1546 	if Sinclude_NEXT_STMT then do;		/* output NEXT_STMT proc.			*/
     1547 	     call output (NP);
     1548 	     call output ("	%include rdc_next_stmt_;
     1549 ");
     1550 	     end;
     1551 
     1552 	if S_TRACE then do;
     1553 	     call output (NP);
     1554 	     call output ("     dcl	RED_TEXT (");
     1555 	     call output_number (Nreductions);
     1556 	     call output (")		char (");
     1557 	     call output_number (Llongest_red);
     1558 	     Llongest_red = Llongest_red - log(Nreductions);
     1559 						/* leave room for reduction number.		*/
     1560 	     call output (") varying int static options(constant) init (
     1561 ");
     1562 	     Pstmt = Psave -> token.Pstmt;
     1563 	     call output_quote (number(1, substr(stmt_value,1,min(length(stmt_value), Llongest_red))));
     1564 	     do i = 2 to Nreductions;
     1565 		call output (",
     1566 ");
     1567 		Pstmt = stmt.Pnext;
     1568 		call output_quote (number(i, substr(stmt_value,1,min(length(stmt_value), Llongest_red))));
     1569 		end;
     1570 	     call output (");
     1571 ");
     1572 	     end;
     1573 
     1574 	Ptemp = APobj;				/* again, copy what we've generated in obj seg	*/
     1575 	Ltemp = ALobj - Lobj;			/* so we can reuse beginning.			*/
     1576 	Ltemp_obj = Ltemp;
     1577 	Ptemp_obj = translator_temp_$allocate (Psegment, size(temp_obj));
     1578 	temp_obj = temp;
     1579 
     1580 	Pobj = APobj;				/* output segment header for object segment.	*/
     1581 	Lobj = ALobj;
     1582 	call output ("
     1583 
     1584 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     1585 	/*							*/
     1586 	/* COMPILED OUTPUT OF SEGMENT  ");
     1587 	call output (Aname_source);
     1588 	call output ("	*/
     1589 	/* Compiled by:  reduction_compiler, Version 2.5 of Oct 21, 1985      */
     1590 	/* Compiled on:  ");
     1591 	date = date_time_$format ("date_time", clock_(), "", "");
     1592 	call output (date);
     1593 	call output ("*/
     1594 	/*							*/
     1595 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     1596 ");
     1597 	call output(NP);
     1598 
     1599 	Pstmt = Psave -> token.Pstmt;			/* copy source into object segment.		*/
     1600 	Osc_start = 0;				/*   each reduction is written separately so it	*/
     1601 	do i = 1 to Nreductions;			/*   can be numbered for ease of debugging.	*/
     1602 	     call output_source (Osc_start, charno(addr(stmt_value)));
     1603 	     call output (number(i, stmt_value));
     1604 	     Osc_start = charno(addr(stmt_value)) + length(stmt_value);
     1605 	     Pstmt = stmt.Pnext;
     1606 	     end;
     1607 	call output_source (Osc_start, length(source));
     1608 
     1609 	call output(temp_obj);			/* output object previously generated & saved.	*/
     1610 						/* output final end statement for translator.	*/
     1611 	call suffixed_name_$new_suffix (Aname_source, "rd", "", name_source, code);
     1612 	call output ("
     1613 	end ");
     1614 	call output (rtrim(name_source));
     1615 	call output (";
     1616 ");
     1617 	ALobj = ALobj - Lobj;			/* adjust length of object seg returned to caller.*/
     1618 
     1619 	end reductions_end;
     1620 
     1621 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     1622 
     1623 
     1624 reductions_init:	procedure;			/* invoked before pass1 of parse to		*/
     1625 						/* initialize maximum stack depth, reduction and	*/
     1626 						/* token counters, & maximum object string length.*/
     1627 						/* Set switch to suppress inclusion of ERROR proc */
     1628 						/* unless is it actually referenced.  Do same for	*/
     1629 						/* reduction STACK fcns, NEXT_STMT proc, and	*/
     1630 						/* DELETE procs. Default to ^'PUSH DOWN LANGUAGE'.*/
     1631 	Mstack_depth = 10;				/* maximum stack depth is 10, by default.	*/
     1632 	Nreductions = 0;
     1633 	Ntokens = 0;
     1634 	Llongest_red = 0;
     1635 	Lobj_string = 0;
     1636 	obj_label.N = 0;
     1637 	S_PDL = "0"b;
     1638 	Sinclude_DELETE = "0"b;
     1639 	Sinclude_DELETE_STMT = "0"b;
     1640 	Sinclude_ERROR = "0"b;
     1641 	Sinclude_NEXT_STMT = "0"b;
     1642 	Sinclude_LEX = "0"b;
     1643 	Sinclude_STACK = "0"b;
     1644 
     1645 	end reductions_init;
     1646 
     1647 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     1648 
     1649 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     1650 
     1651 
     1652 rtn:	procedure (type);				/* invoked to compile one of the pre-defined	*/
     1653 						/* (pre-, mid-, or post-) actions.		*/
     1654 
     1655      dcl	type			fixed bin;	/* type of action to be compiled.		*/
     1656 						/*   1 = LEX				*/
     1657 						/*   2 = POP				*/
     1658 						/*   3 = PUSH(<label>)			*/
     1659 
     1660 	go to RTN(type);
     1661 
     1662 RTN(1):	if S_PDL then do;
     1663 	     call output ("	call					     LEX(1);
     1664 ");
     1665 	     Sinclude_LEX = "1"b;
     1666 	     end;
     1667 	else
     1668 	     call output ("	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     1669 ");	return;
     1670 
     1671 RTN(2):	call output ("	STACK_DEPTH = max(STACK_DEPTH-1,0);		/*   POP					*/
     1672 ");	Sinclude_STACK = "1"b;
     1673 	return;
     1674 
     1675 RTN(3):	call output ("	call PUSH(");
     1676 	call output_number (label_value(token_value));
     1677 	call output (");				/*   PUSH(");
     1678 	Lobj_part = 70;
     1679 	call output (token_value);
     1680 	call output (")");
     1681 	Lobj_spaces = 110 - Lobj_part;
     1682 	call output (obj_spaces);
     1683 	call output ("*/
     1684 ");	Sinclude_STACK = "1"b;
     1685 	return;
     1686 
     1687 	end rtn;
     1688 
     1689 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     1690 
     1691 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     1692 
     1693 
     1694 set_action:	procedure;			/* invoked to compile a call to an action routine.*/
     1695 
     1696 	call output ("	call					     ");
     1697 	call output (token_value);
     1698 	call output ("();
     1699 ");
     1700 
     1701 	end set_action;
     1702 
     1703 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     1704 
     1705 
     1706 set_action_with_args:	procedure;		/* invoked to compile a call to an action routine	*/
     1707 						/* that requires input arguments.		*/
     1708 
     1709 	call output ("	call 					     ");
     1710 	call output (token_value);
     1711 	call output (" (");
     1712 
     1713 	end set_action_with_args;
     1714 
     1715 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     1716 
     1717 
     1718 set_depth:	procedure;			/* invoked to set the maximum allowable depth of	*/
     1719 						/* the reduction stack.			*/
     1720 
     1721 	Mstack_depth = token.Nvalue;
     1722 	if Mstack_depth <= 0 | Mstack_depth > MMstack_depth then do;
     1723 	     call lex_error_ (18, SERROR_PRINTED(18), (error_control_table(18).severity), MERROR_SEVERITY,
     1724 			  addrel(token.Pstmt,0), Ptoken, SERROR_CONTROL, (error_control_table(18).message),
     1725 			  (error_control_table(18).brief_message), MMstack_depth, MMstack_depth);
     1726 	     Mstack_depth = MMstack_depth;
     1727 	     return;
     1728 	     end;
     1729 
     1730 	end set_depth;
     1731 
     1732 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     1733 
     1734 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     1735 
     1736 
     1737 set_label:	procedure;			/* invoked to store an association between a	*/
     1738 						/* the label of a reduction and the number of the	*/
     1739 						/* reduction into the object label store.	*/
     1740 
     1741      dcl	N			fixed bin(17);	/* number of labels stored in object label array.	*/
     1742 
     1743 	do N = 1 to obj_label.N while (obj_label.name(N) ^= token_value);
     1744 	     end;					/* see if label is already defined.		*/
     1745 	if N <= obj_label.N then do;			/* it is! Complain.				*/
     1746 	     call ERROR(13);
     1747 	     return;
     1748 	     end;
     1749 	if N > dimension (obj_label.set, 1) then do;
     1750 	     call lex_error_ (7, SERROR_PRINTED(7), (error_control_table(7).severity), MERROR_SEVERITY,
     1751 			  addrel(token.Pstmt,0), Ptoken, SERROR_CONTROL, (error_control_table(7).message),
     1752 			  (error_control_table(7).brief_message), dimension(obj_label.set,1), token_value);
     1753 	     go to RETURN;
     1754 	     end;
     1755 	obj_label.N = N;
     1756 	obj_label.name(N) = token_value;
     1757 	obj_label.reduction_no(N) = Nreductions + 1;
     1758 
     1759 	end set_label;
     1760 
     1761 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     1762 
     1763 
     1764 specified_label:	procedure;			/* invoked to compile the next-reduction field of	*/
     1765 						/* a reduction where a label was specified.  This	*/
     1766 						/* means "proceed with the reduction whose label	*/
     1767 						/* was specified".				*/
     1768 
     1769 	call output ("	NRED = ");
     1770 	call output_number (label_value(token_value));
     1771 	call output (";
     1772 	go to RD_TEST_REDUCTION;			/* / ");
     1773 	Lobj_part = 0;
     1774 	call output (token_value);
     1775 	call output (" \");
     1776 	Lobj_spaces = max (0, 34 - Lobj_part);
     1777 	call output (obj_spaces);
     1778 	call output ("		*/
     1779 ");
     1780 
     1781 	end specified_label;
     1782 
     1783 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     1784 
     1785 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     1786 
     1787 
     1788 stacked_reduction:	procedure;			/* invoked to compile the next-reduction field of	*/
     1789 						/* a reduction where STACK is specified.  This	*/
     1790 						/* means "proced with the reduction whose label	*/
     1791 						/* is on the top of the reduction stack".	*/
     1792 
     1793 	call output ("	go to RD_STACK;				/* / STACK	\			*/
     1794 ");
     1795 	Sinclude_STACK = "1"b;
     1796 
     1797 	end stacked_reduction;
     1798 
     1799 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     1800 
     1801 
     1802 stacked_reduction_pop:	procedure;		/* invoked to compile the next-reduction field of	*/
     1803 						/* a reduction where STACK_POP is specified. 	*/
     1804 						/* This means "proceed with the reduction whose	*/
     1805 						/* label is on the top of the reduction stack,	*/
     1806 						/* and pop the stack".			*/
     1807 
     1808 	call output ("	go to RD_STACK_POP;				/* / STACK_POP	\			*/
     1809 ");
     1810 	Sinclude_STACK = "1"b;
     1811 
     1812 	end stacked_reduction_pop;
     1813 
     1814 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     1815 
     1816 
     1817 terminal_reduction:	procedure;			/* invoked to compile the next-reduction field of	*/
     1818 						/* a reduction where RETURN is specified.  This 	*/
     1819 						/* means "compilation is complete; return to the	*/
     1820 						/* caller of the compiler".			*/
     1821 
     1822 	call output ("	return;					/* / RETURN	\			*/
     1823 ");
     1824 	end terminal_reduction;
     1825 
     1826 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     1827 
     1828 
     1829 
     1830 
     1831      dcl	TRACING			bit(1) aligned int static init("0"b);
     1832 
     1833 
  1     1 	/* START OF:	rdc_start_.incl.pl1		  *  *  *  *  *  *  */
  1     2 
  1     3 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
  1     4 	/*							*/
  1     5 	/* N__a_m_e:  rdc_start_.incl.pl1					*/
  1     6 	/*							*/
  1     7 	/*      This include segment is used by compilers generated by the	*/
  1     8 	/* reduction_compiler.  Such compilers include a SEMANTIC_ANALYSIS	*/
  1     9 	/* subroutine generated by the reduction_compiler.  This subroutine	*/
  1    10 	/* compares a chain of input tokens with token requirements		*/
  1    11 	/* specified in reductions.  This include segment declares the 	*/
  1    12 	/* structure of the input tokens (which are generated by lex_string_),*/
  1    13 	/* defines the beginning of the SEMANTIC_ANALYSIS procedure, and	*/
  1    14 	/* declares Pthis_token, a global pointer variable which points to	*/
  1    15 	/* the "current" token being referenced by SEMANTIC_ANALYSIS.	*/
  1    16 	/*							*/
  1    17 	/* S__t_a_t_u_s							*/
  1    18 	/*							*/
  1    19 	/* 0) Created:  April, 1974 by G. C. Dixon			*/
  1    20 	/*							*/
  1    21 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
  1    22 
  1    23      dcl	Pthis_token		ptr;		/* ptr to the "current" token being acted upon.	*/
  1    24 
  2     1 	/*  START OF:	lex_descriptors_.incl.pl1	  *  *  *  *  *  *  */
  2     2 	
  2     3 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
  2     4 	/*							*/
  2     5 	/* Name:  lex_descriptors_.incl.pl1				*/
  2     6 	/*							*/
  2     7 	/*      This include segment defines the structure of the token	*/
  2     8 	/* descriptor, statement descriptor, and comment descriptor created	*/
  2     9 	/* by the lex_string_ program.				*/
  2    10 	/*							*/
  2    11 	/* Status:						*/
  2    12 	/*							*/
  2    13 	/* 0) Created:  Dec, 1973 by G. C. Dixon			*/
  2    14 	/*							*/
  2    15 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
  2    16 	
  2    17 	
  2    18 	
  2    19 	
  2    20      dcl	
  2    21 	1 comment			aligned based (Pcomment),
  2    22 						/* descriptor for a comment.			*/
  2    23 	  2 group1		unaligned,
  2    24 	    3 version		fixed bin(17),	/* comment descriptor version.		*/
  2    25 	    3 size		fixed bin(17),	/* comment descriptor size (in words).		*/
  2    26 	  2 Pnext			ptr unal,		/* ptr to next comment descriptor.		*/
  2    27 	  2 Plast			ptr unal,		/* ptr to last comment descriptor.		*/
  2    28 	  2 Pvalue		ptr unal,		/* ptr to comment.				*/
  2    29 	  2 Lvalue		fixed bin(18),	/* length of comment.			*/
  2    30 	  2 group2		unaligned,
  2    31 	    3 line_no		fixed bin(17),	/* line no of line containing comment.		*/
  2    32 	    3 S,					/* switches:				*/
  2    33 	      4 before_stmt		bit(1),		/* comment is before 1st token of stmt.		*/
  2    34 	      4 contiguous		bit(1),		/* no tokens between this and last comment.	*/
  2    35 	      4 pad		bit(16),
  2    36 	comment_value		char(comment.Lvalue) based (comment.Pvalue),
  2    37 						/* body of comment.				*/
  2    38 	Pcomment			ptr;		/* ptr to comment descriptor.			*/
  2    39 	
  2    40      dcl	
  2    41 	1 stmt			aligned based (Pstmt),
  2    42 						/* descriptor for a statement.		*/
  2    43 	  2 group1		unaligned,
  2    44 	    3 version		fixed bin(17),	/* statement descriptor version.		*/
  2    45 	    3 size		fixed bin(17),	/* statement descriptor size (in words).	*/
  2    46 	  2 Pnext			ptr unal,		/* ptr to next statement descriptor.		*/
  2    47 	  2 Plast			ptr unal,		/* ptr to last statement descriptor.		*/
  2    48 	  2 Pvalue		ptr unal,		/* ptr to statement.			*/
  2    49 	  2 Lvalue		fixed bin(18),	/* length of statement.			*/
  2    50 	  2 Pfirst_token		ptr unal,		/* ptr to 1st token of statement.		*/
  2    51 	  2 Plast_token		ptr unal,		/* ptr to last token of statement.		*/
  2    52 	  2 Pcomments		ptr unal,		/* ptr to comments in statement.		*/
  2    53 	  2 Puser			ptr unal,		/* user-defined ptr.			*/
  2    54 	  2 group2		unaligned,
  2    55 	    3 Ntokens		fixed bin(17),	/* number of tokens in statement.		*/
  2    56 	    3 line_no		fixed bin(17),	/* line no of line on which statement begins.	*/
  2    57 	    3 Istmt_in_line		fixed bin(17),	/* number of stmts in line containing this stmt.	*/
  2    58 						/* (the number includes this stmt.)		*/
  2    59 	    3 semant_type		fixed bin(17),	/* semantic type of the statement.		*/
  2    60 	    3 S,					/* switches:				*/
  2    61 	      4 error_in_stmt	bit(1),		/* stmt contains a syntactic error.		*/
  2    62 	      4 output_in_err_msg	bit(1),		/* stmt has been output in previous error message.*/
  2    63 	      4 pad		bit(34),
  2    64 	stmt_value		char(stmt.Lvalue) based (stmt.Pvalue),
  2    65 						/* text of the statement.			*/
  2    66 	Pstmt			ptr;		/* ptr to a stmt descriptor. 			*/
  2    67 	
  2    68      dcl	
  2    69 	1 token			aligned based (Ptoken),
  2    70 						/* descriptor for a token.			*/
  2    71 	  2 group1		unaligned,
  2    72 	    3 version		fixed bin(17),	/* token descriptor version.			*/
  2    73 	    3 size		fixed bin(17),	/* token descriptor size (in words).		*/
  2    74 	  2 Pnext			ptr unal,		/* ptr to next token descriptor.		*/
  2    75 	  2 Plast			ptr unal,		/* ptr to last token descriptor.		*/
  2    76 	  2 Pvalue		ptr unal,		/* ptr to token.				*/
  2    77 	  2 Lvalue		fixed bin(18),	/* length of token.				*/
  2    78 	  2 Pstmt			ptr unal,		/* ptr to descriptor of stmt containing token.	*/
  2    79 	  2 Psemant		ptr unal,		/* ptr to descriptor(s) of token's semantic value.*/
  2    80 	  2 group2		unaligned,
  2    81 	    3 Itoken_in_stmt	fixed bin(17),	/* position of token within its statement.	*/
  2    82 	    3 line_no		fixed bin(17),	/* line number of the line containing the token.	*/
  2    83 	    3 Nvalue		fixed bin(35),	/* numeric value of decimal-integer tokens.	*/
  2    84 	    3 S,					/* switches:				*/
  2    85 	      4 end_of_stmt		bit(1),		/* token is an end-of-stmt token.		*/
  2    86 	      4 quoted_string	bit(1),		/* token is a quoted string.			*/
  2    87 	      4 quotes_in_string	bit(1),		/* on if quote-close delimiters appear in quoted	*/
  2    88 						/* string (as doubled quotes on input.)		*/
  2    89 	      4 quotes_doubled	bit(1),		/* on if quotes in the string are doubled after	*/
  2    90 						/* string has been lexed into a token.		*/
  2    91 	      4 pad2		bit(32),
  2    92 	token_value		char(token.Lvalue) based (token.Pvalue),
  2    93 						/* value of the token.			*/
  2    94 	Ptoken			ptr;		/* ptr to a token descriptor.			*/
  2    95 
  2    96 	/*  END OF:	lex_descriptors_.incl.pl1	  *  *  *  *  *  *  */
  1    25 
  1    26 
  1    27 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
  1    28 
  1    29 
  1    30 SEMANTIC_ANALYSIS:	procedure;			/* procedure which analyzes the syntax and	*/
  1    31 						/* semantics of the tokens in the input list.	*/
  1    32 
  1    33      dcl						/*	automatic variables			*/
  1    34 	LTOKEN_REQD_VALUE		fixed bin(18),	/* length of a token requirement.		*/
  1    35 	NRED			fixed bin,	/* number of the reduction tokens are being	*/
  1    36 						/* compared to.				*/
  1    37 	PRED			ptr,		/* ptr to the reduction tokens are being	*/
  1    38 						/* compared to.				*/
  1    39 	PTOKEN_REQD		ptr,		/* ptr to token requirement descriptor associated	*/
  1    40 						/* with reduction tokens are being compared to.	*/
  1    41 	PTOKEN_REQD_VALUE		ptr,		/* ptr to a token requirement.		*/
  1    42 	STOKEN_FCN		bit(1) aligned,	/* return value from a relative syntax function.	*/
  1    43 	CODE			fixed bin(35),	/* an error code.				*/
  1    44 	I			fixed bin,	/* a do-group index.			*/
  1    45 	NUMBER			fixed bin(35);	/* fixed binary representation of a decimal 	*/
  1    46 						/* number character string.			*/
  1    47 
  1    48      dcl						/*	based variables			*/
  1    49 	1 RED			aligned based (PRED),
  1    50 						/* descriptor for reduction tokens are being 	*/
  1    51 						/* compared to.				*/
  1    52 	  2 TOKEN_REQD		unaligned,
  1    53 	    3 IFIRST		fixed bin(17) unal,	/* index of first token requirement.		*/
  1    54 	    3 ILAST		fixed bin(17) unal,	/* index of last  token requirement associated	*/
  1    55 						/* with this reduction.			*/
  1    56 	1 TOKEN_REQD		aligned based (PTOKEN_REQD),
  1    57 						/* a token requirement descriptor.		*/
  1    58 	  2 FORM			fixed bin(17) unal,	/* form of the token requirement:		*/
  1    59 						/*  -1 = relative token requirement function;	*/
  1    60 						/*       TYPE = index of the particular token	*/
  1    61 						/*	      function in the token_fcn array.	*/
  1    62 						/*   0 = built-in token requirement function;	*/
  1    63 						/*       TYPE = as defined below.		*/
  1    64 						/*  >0 = absolute token requirement:		*/
  1    65 						/*       FORM = index(TOKEN_STRINGS,TOKEN_REQD);	*/
  1    66 						/*       TYPE = length(TOKEN_REQD);		*/
  1    67 	  2 TYPE			fixed bin(17) unal,	/* TYPE of built-in token requirement function:	*/
  1    68 						/*   1 = compile test to see if input token 	*/
  1    69 						/*       chain is exhausted (<no-token>).	*/
  1    70 						/*   2 = compile test for any token value	*/
  1    71 						/*       (<any-token>).			*/
  1    72 						/*   3 = compile test for a PL/I identifier	*/
  1    73 						/*       (<name>) of 32 or fewer characters.	*/
  1    74 						/*   4 = compile test for token which is a	*/
  1    75 						/*       <decimal-integer>.			*/
  1    76 						/*   5 = compile test for token which is a single	*/
  1    77 						/*       backspace character (<BS>).		*/
  1    78 						/*   6 = compile test for a token which is a	*/
  1    79 						/*       <quoted-string>.			*/
  1    80 
  1    81 	1 TOKEN_REQD_STRING		aligned based (PTOKEN_REQD),
  1    82 						/* overlay for an absolute token requirement	*/
  1    83 						/* descriptor.				*/
  1    84 	  2 I			fixed bin(17) unal,	/* index into list of token strings of the	*/
  1    85 						/* absolute token string assoc w/ descriptor.	*/
  1    86 	  2 L			fixed bin(17) unal,	/* length of the absolute token string.		*/
  1    87 	TOKEN_REQD_VALUE		char(LTOKEN_REQD_VALUE) based (PTOKEN_REQD_VALUE);
  1    88 						/* absolute token string which token is reqd	*/
  1    89 						/* to match in order for tokens which are	*/
  1    90 						/* "current" on the list to match the reduction.	*/
  1    91 
  1    92      dcl						/*	builtin functions			*/
  1    93          (addr, max, null, search, substr, verify)
  1    94 				builtin;
  1    95 
  1    96      dcl						/*	entries				*/
  1    97 	cv_dec_check_		entry (char(*), fixed bin(35)) returns (fixed bin(35));
  1    98 
  1    99      dcl						/*	static variables			*/
  1   100 	BACKSPACE			char(1) aligned int static init ("");
  1   101 
  1   102 	/* END OF:	rdc_start_.incl.pl1		  *  *  *  *  *  *  */
     1834 
     1835 
     1836      dcl	DIRECTION			fixed bin init(+1);	/* direction in which tokens compared.		*/
     1837      dcl	STACK (20)   		fixed bin,	/* reduction label stack.			*/
     1838 	STACK_DEPTH		fixed bin init (0);	/* index into STACK.			*/
     1839 
     1840 
     1841      dcl	1 REDUCTION (148)		unaligned based (addr (REDUCTIONS)),
     1842 						/* object reductions.			*/
     1843 	  2 TOKEN_REQD,
     1844 	    3 IFIRST		fixed bin(17),	/* index of first required token.		*/
     1845 	    3 ILAST		fixed bin(17),	/* index of last required token.		*/
     1846 
     1847 	REDUCTIONS  (296)		fixed bin(17) unaligned internal static options(constant) initial (
     1848 	         1,     1,	/*     1/  <no-token>                                                           */
     1849 	         2,     2,	/*     2/  <any-token>                                                          */
     1850 	         3,     3,	/*     3/  BEGIN                                                                */
     1851 	         4,     6,	/*     4/  MAX_DEPTH <decimal-integer> "\"                                      */
     1852 	         7,    10,	/*     5/  PUSH DOWN LANGUAGE "\"                                               */
     1853 	        11,    13,	/*     6/  INCLUDE DELETE "\"                                                   */
     1854 	        14,    16,	/*     7/  INCLUDE DELETE_STMT "\"                                              */
     1855 	        17,    19,	/*     8/  INCLUDE ERROR "\"                                                    */
     1856 	        20,    22,	/*     9/  INCLUDE NEXT_STMT "\"                                                */
     1857 	        23,    25,	/*    10/  INCLUDE LEX "\"                                                      */
     1858 	        11,    11,	/*    11/  INCLUDE                                                              */
     1859 	         1,     1,	/*    12/  <no-token>                                                           */
     1860 	         2,     2,	/*    13/  <any-token>                                                          */
     1861 	        26,    26,	/*    14/  /                                                                    */
     1862 	        27,    27,	/*    15/  <name>                                                               */
     1863 	         6,     6,	/*    16/  "\"                                                                  */
     1864 	         1,     1,	/*    17/  <no-token>                                                           */
     1865 	         2,     2,	/*    18/  <any-token>                                                          */
     1866 	        28,    28,	/*    19/  <quoted-string>                                                      */
     1867 	        29,    31,	/*    20/  / <BS> _                                                             */
     1868 	        26,    26,	/*    21/  /                                                                    */
     1869 	         2,     2,	/*    22/  <any-token>                                                          */
     1870 	         1,     1,	/*    23/  <no-token>                                                           */
     1871 	        26,    26,	/*    24/  /                                                                    */
     1872 	        27,    27,	/*    25/  <name>                                                               */
     1873 	         6,     6,	/*    26/  "\"                                                                  */
     1874 	         2,     2,	/*    27/  <any-token>                                                          */
     1875 	         1,     1,	/*    28/  <no-token>                                                           */
     1876 	        32,    32,	/*    29/  <PUSH_DOWN_LANGUAGE>                                                 */
     1877 	        33,    32,	/*    30/                                                                       */
     1878 	        28,    28,	/*    31/  <quoted-string>                                                      */
     1879 	        33,    38,	/*    32/  < no - token > <any-token>                                           */
     1880 	        28,    28,	/*    33/  <quoted-string>                                                      */
     1881 	        29,    31,	/*    34/  / <BS> _                                                             */
     1882 	        26,    26,	/*    35/  /                                                                    */
     1883 	        39,    41,	/*    36/  < <BS> _                                                             */
     1884 	        42,    44,	/*    37/  > <BS> _                                                             */
     1885 	        45,    47,	/*    38/  [ <BS> _                                                             */
     1886 	        48,    50,	/*    39/  ] <BS> _                                                             */
     1887 	        51,    53,	/*    40/  ( <BS> _                                                             */
     1888 	        54,    56,	/*    41/  ) <BS> _                                                             */
     1889 	        57,    62,	/*    42/  < no - token > /                                                     */
     1890 	        33,    38,	/*    43/  < no - token > <any-token>                                           */
     1891 	        63,    67,	/*    44/  < any - token >                                                      */
     1892 	        68,    70,	/*    45/  < name >                                                             */
     1893 	        71,    75,	/*    46/  < decimal - integer >                                                */
     1894 	        76,    78,	/*    47/  < BS >                                                               */
     1895 	        79,    83,	/*    48/  < quoted - string >                                                  */
     1896 	        84,    86,	/*    49/  < <name> >                                                           */
     1897 	         6,     6,	/*    50/  "\"                                                                  */
     1898 	         2,     2,	/*    51/  <any-token>                                                          */
     1899 	         1,     1,	/*    52/  <no-token>                                                           */
     1900 	        26,    26,	/*    53/  /                                                                    */
     1901 	        87,    90,	/*    54/  LEX ( <decimal-integer> )                                            */
     1902 	        91,    95,	/*    55/  LEX ( - <decimal-integer> )                                          */
     1903 	        96,   100,	/*    56/  LEX ( + <decimal-integer> )                                          */
     1904 	        87,    88,	/*    57/  LEX (                                                                */
     1905 	        24,    24,	/*    58/  LEX                                                                  */
     1906 	       101,   102,	/*    59/  NEXT_STMT (                                                          */
     1907 	        21,    21,	/*    60/  NEXT_STMT                                                            */
     1908 	       103,   104,	/*    61/  POP (                                                                */
     1909 	       103,   103,	/*    62/  POP                                                                  */
     1910 	       105,   108,	/*    63/  PUSH ( <name> )                                                      */
     1911 	         7,     7,	/*    64/  PUSH                                                                 */
     1912 	        12,    12,	/*    65/  DELETE                                                               */
     1913 	       109,   110,	/*    66/  DELETE_STMT (                                                        */
     1914 	        15,    15,	/*    67/  DELETE_STMT                                                          */
     1915 	       111,   114,	/*    68/  ERROR ( <decimal-integer> )                                          */
     1916 	       111,   112,	/*    69/  ERROR (                                                              */
     1917 	        45,    45,	/*    70/  [                                                                    */
     1918 	        48,    48,	/*    71/  ]                                                                    */
     1919 	        51,    51,	/*    72/  (                                                                    */
     1920 	        54,    54,	/*    73/  )                                                                    */
     1921 	        28,    28,	/*    74/  <quoted-string>                                                      */
     1922 	         6,     6,	/*    75/  "\"                                                                  */
     1923 	       115,   116,	/*    76/  <any-token> (                                                        */
     1924 	         2,     2,	/*    77/  <any-token>                                                          */
     1925 	         1,     1,	/*    78/  <no-token>                                                           */
     1926 	       117,   116,	/*    79/                                                                       */
     1927 	       117,   122,	/*    80/  DELETE ( <decimal-integer> , <decimal-integer> )                     */
     1928 	       123,   129,	/*    81/  DELETE ( <decimal-integer> , - <decimal-integer> )                   */
     1929 	       130,   136,	/*    82/  DELETE ( <decimal-integer> , + <decimal-integer> )                   */
     1930 	       137,   143,	/*    83/  DELETE ( - <decimal-integer> , <decimal-integer> )                   */
     1931 	       144,   151,	/*    84/  DELETE ( - <decimal-integer> , - <decimal-integer> )                 */
     1932 	       152,   159,	/*    85/  DELETE ( - <decimal-integer> , + <decimal-integer> )                 */
     1933 	       160,   166,	/*    86/  DELETE ( + <decimal-integer> , <decimal-integer> )                   */
     1934 	       167,   174,	/*    87/  DELETE ( + <decimal-integer> , - <decimal-integer> )                 */
     1935 	       175,   182,	/*    88/  DELETE ( + <decimal-integer> , + <decimal-integer> )                 */
     1936 	       183,   186,	/*    89/  DELETE ( <decimal-integer> )                                         */
     1937 	       187,   191,	/*    90/  DELETE ( - <decimal-integer> )                                       */
     1938 	       192,   196,	/*    91/  DELETE ( + <decimal-integer> )                                       */
     1939 	       117,   118,	/*    92/  DELETE (                                                             */
     1940 	        12,    12,	/*    93/  DELETE                                                               */
     1941 	       197,   196,	/*    94/                                                                       */
     1942 	       197,   198,	/*    95/  <any-token> <decimal-integer>                                        */
     1943 	         5,     5,	/*    96/  <decimal-integer>                                                    */
     1944 	       199,   198,	/*    97/                                                                       */
     1945 	       199,   200,	/*    98/  <quoted-string> b                                                    */
     1946 	       201,   202,	/*    99/  <quoted-string> b1                                                   */
     1947 	       203,   204,	/*   100/  <quoted-string> b2                                                   */
     1948 	       205,   206,	/*   101/  <quoted-string> b3                                                   */
     1949 	       207,   208,	/*   102/  <quoted-string> b4                                                   */
     1950 	        28,    28,	/*   103/  <quoted-string>                                                      */
     1951 	        51,    51,	/*   104/  (                                                                    */
     1952 	        48,    48,	/*   105/  ]                                                                    */
     1953 	       209,   209,	/*   106/  ;                                                                    */
     1954 	         6,     6,	/*   107/  "\"                                                                  */
     1955 	       210,   209,	/*   108/                                                                       */
     1956 	       210,   209,	/*   109/                                                                       */
     1957 	         2,     2,	/*   110/  <any-token>                                                          */
     1958 	         1,     1,	/*   111/  <no-token>                                                           */
     1959 	       210,   209,	/*   112/                                                                       */
     1960 	       210,   211,	/*   113/  <quoted-string> (                                                    */
     1961 	       212,   213,	/*   114/  <quoted-string> "\"                                                  */
     1962 	       214,   215,	/*   115/  <quoted-string> )                                                    */
     1963 	       216,   217,	/*   116/  <quoted-string> <any-token>                                          */
     1964 	        28,    28,	/*   117/  <quoted-string>                                                      */
     1965 	        51,    51,	/*   118/  (                                                                    */
     1966 	        54,    54,	/*   119/  )                                                                    */
     1967 	       209,   209,	/*   120/  ;                                                                    */
     1968 	         6,     6,	/*   121/  "\"                                                                  */
     1969 	       218,   217,	/*   122/                                                                       */
     1970 	       218,   217,	/*   123/                                                                       */
     1971 	       120,   120,	/*   124/  ,                                                                    */
     1972 	         2,     2,	/*   125/  <any-token>                                                          */
     1973 	         1,     1,	/*   126/  <no-token>                                                           */
     1974 	       218,   217,	/*   127/                                                                       */
     1975 	       218,   219,	/*   128/  < =                                                                  */
     1976 	       220,   221,	/*   129/  > =                                                                  */
     1977 	       222,   223,	/*   130/  ^ =                                                                  */
     1978 	       224,   225,	/*   131/  ^ >                                                                  */
     1979 	       226,   227,	/*   132/  ^ <                                                                  */
     1980 	       228,   229,	/*   133/  - >                                                                  */
     1981 	       230,   231,	/*   134/  - <any-token>                                                        */
     1982 	       232,   233,	/*   135/  + <any-token>                                                        */
     1983 	       234,   233,	/*   136/                                                                       */
     1984 	       234,   233,	/*   137/                                                                       */
     1985 	         6,     6,	/*   138/  "\"                                                                  */
     1986 	       234,   235,	/*   139/  RETURN "\"                                                           */
     1987 	       236,   237,	/*   140/  STACK "\"                                                            */
     1988 	       238,   239,	/*   141/  STACK_POP "\"                                                        */
     1989 	       240,   241,	/*   142/  <name> "\"                                                           */
     1990 	        27,    27,	/*   143/  <name>                                                               */
     1991 	       242,   243,	/*   144/  <any-token> "\"                                                      */
     1992 	         2,     2,	/*   145/  <any-token>                                                          */
     1993 	         1,     1,	/*   146/  <no-token>                                                           */
     1994 	         1,     1,	/*   147/  <no-token>                                                           */
     1995 	         2,     2);	/*   148/  <any-token>                                                          */
     1996 
     1997      dcl	1 TOKEN_REQUIREMENT (243)	unaligned based (addr (TOKEN_REQUIREMENTS)),
     1998 						/* object token requirements.			*/
     1999 	  2 FORM			fixed bin(17),	/* form of the token requirement:		*/
     2000 						/*  -1 = relative token requirement function;	*/
     2001 						/*       TYPE = index of the particular token	*/
     2002 						/*	      function in the token_fcn array.	*/
     2003 						/*   0 = built-in token requirement function;	*/
     2004 						/*       TYPE = as defined below.		*/
     2005 						/*  >0 = absolute token requirement:		*/
     2006 						/*       FORM = index(TOKEN_STRINGS,TOKEN_REQD);	*/
     2007 						/*       TYPE = length(TOKEN_REQD);		*/
     2008 	  2 TYPE			fixed bin(17) unal,	/* type of the built-in token requirement	*/
     2009 						/* function:				*/
     2010 						/*   1 = compile test to see if input token 	*/
     2011 						/*       chain is exhausted (<no-token>).	*/
     2012 						/*   2 = compile test for any token value	*/
     2013 						/*       (<any-token>).			*/
     2014 						/*   3 = compile test for a PL/I identifier	*/
     2015 						/*       (<name>) of 32 or fewer characters.	*/
     2016 						/*   4 = compile test for token which is a	*/
     2017 						/*       <decimal-integer>.			*/
     2018 						/*   5 = compile test for token which is a single	*/
     2019 						/*       backspace character (<BS>).		*/
     2020 						/*   6 = compile test for a token which is a	*/
     2021 						/*       <quoted-string>.			*/
     2022 
     2023 	TOKEN_REQUIREMENTS  (486)	fixed bin(17) unaligned internal static options(constant) initial (
     2024 	         0,    1,       0,    2,       1,    5,       6,    9,       0,    4,      15,    1,      16,    4,   
     2025 	        20,    4,      24,    8,      15,    1,      32,    7,      39,    6,      15,    1,      32,    7,   
     2026 	        45,   11,      15,    1,      32,    7,      56,    5,      15,    1,      32,    7,      61,    9,   
     2027 	        15,    1,      32,    7,      70,    3,      15,    1,      73,    1,       0,    3,       0,    6,   
     2028 	        73,    1,       0,    5,       9,    1,      -1,    1,      74,    1,      75,    2,      77,    1,   
     2029 	        78,    5,      83,    1,       0,    2,      74,    1,       0,    5,       9,    1,      83,    1,   
     2030 	         0,    5,       9,    1,      84,    1,       0,    5,       9,    1,      85,    1,       0,    5,   
     2031 	         9,    1,      86,    1,       0,    5,       9,    1,      87,    1,       0,    5,       9,    1,   
     2032 	        74,    1,      75,    2,      77,    1,      78,    5,      83,    1,      73,    1,      74,    1,   
     2033 	        88,    3,      77,    1,      78,    5,      83,    1,      74,    1,      91,    4,      83,    1,   
     2034 	        74,    1,      95,    7,      77,    1,     102,    7,      83,    1,      74,    1,     109,    2,   
     2035 	        83,    1,      74,    1,     111,    6,      77,    1,     117,    6,      83,    1,      74,    1,   
     2036 	         0,    3,      83,    1,      70,    3,      86,    1,       0,    4,      87,    1,      70,    3,   
     2037 	        86,    1,      77,    1,       0,    4,      87,    1,      70,    3,      86,    1,     123,    1,   
     2038 	         0,    4,      87,    1,      61,    9,      86,    1,     124,    3,      86,    1,      16,    4,   
     2039 	        86,    1,       0,    3,      87,    1,      45,   11,      86,    1,      56,    5,      86,    1,   
     2040 	         0,    4,      87,    1,       0,    2,      86,    1,      39,    6,      86,    1,       0,    4,   
     2041 	       127,    1,       0,    4,      87,    1,      39,    6,      86,    1,       0,    4,     127,    1,   
     2042 	        77,    1,       0,    4,      87,    1,      39,    6,      86,    1,       0,    4,     127,    1,   
     2043 	       123,    1,       0,    4,      87,    1,      39,    6,      86,    1,      77,    1,       0,    4,   
     2044 	       127,    1,       0,    4,      87,    1,      39,    6,      86,    1,      77,    1,       0,    4,   
     2045 	       127,    1,      77,    1,       0,    4,      87,    1,      39,    6,      86,    1,      77,    1,   
     2046 	         0,    4,     127,    1,     123,    1,       0,    4,      87,    1,      39,    6,      86,    1,   
     2047 	       123,    1,       0,    4,     127,    1,       0,    4,      87,    1,      39,    6,      86,    1,   
     2048 	       123,    1,       0,    4,     127,    1,      77,    1,       0,    4,      87,    1,      39,    6,   
     2049 	        86,    1,     123,    1,       0,    4,     127,    1,     123,    1,       0,    4,      87,    1,   
     2050 	        39,    6,      86,    1,       0,    4,      87,    1,      39,    6,      86,    1,      77,    1,   
     2051 	         0,    4,      87,    1,      39,    6,      86,    1,     123,    1,       0,    4,      87,    1,   
     2052 	         0,    2,       0,    4,       0,    6,     128,    1,       0,    6,     129,    2,       0,    6,   
     2053 	       131,    2,       0,    6,     133,    2,       0,    6,     135,    2,     137,    1,       0,    6,   
     2054 	        86,    1,       0,    6,      15,    1,       0,    6,      87,    1,       0,    6,       0,    2,   
     2055 	        74,    1,     138,    1,      83,    1,     138,    1,     139,    1,     138,    1,     139,    1,   
     2056 	        83,    1,     139,    1,      74,    1,      77,    1,      83,    1,      77,    1,       0,    2,   
     2057 	       123,    1,       0,    2,     140,    6,      15,    1,     146,    5,      15,    1,     151,    9,   
     2058 	        15,    1,       0,    3,      15,    1,       0,    2,      15,    1);
     2059 
     2060 
     2061      dcl	TOKEN_STRINGS		char(159) aligned based (addr (TOKEN_STRING_ARRAYS)),
     2062 						/* object token values.			*/
     2063 	TOKEN_STRING_ARRAYS (2)	char(100) aligned internal static options(constant) initial (
     2064 	     "BEGINMAX_DEPTH\PUSHDOWNLANGUAGEINCLUDEDELETEDELETE_STMTERRORNEXT_STMTLEX/<no-token>[]()anynamedecima",
     2065 	     "lintegerBSquotedstring+POP,bb1b2b3b4;=^RETURNSTACKSTACK_POP");
     2066 
     2067 	/* START OF:	rdc_end_.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
  3     2 
  3     3 
  3     4 /****^  HISTORY COMMENTS:
  3     5*  1) change(86-02-14,GWMay), approve(), audit(), install():
  3     6*     old history comments:
  3     7*      0) Created: April, 1974 by G. C. Dixon
  3     8*      1) Modified: Feb, 1975  by G. C. Dixon
  3     9*         a) support for Version 2.0 of reduction_compiler.
  3    10*      2) Modified: Feb, 1981  by G. C. Dixon
  3    11*         a) support for Version  2.2 of reduction_compiler
  3    12*      3) Modified: Aug, 1983  by G. C. Dixon - support for Version 2.3 of
  3    13*                        reductions command.
  3    14*  2) change(86-03-04,GDixon), approve(86-03-04,MCR7362), audit(86-03-17,GWMay),
  3    15*     install(86-03-17,MR12.0-1032):
  3    16*     Changed how the PUSH DOWN LANGUAGE (SPDL) definition of <no-token> is
  3    17*     implemented to avoid references through a null pointer.  The two
  3    18*     accepted uses are:
  3    19*     
  3    20*        / <no-token>               / ... / ... \
  3    21*                    A
  3    22*                    |
  3    23*           Pthis_token (points to top of push down stack)
  3    24*     
  3    25*     which checks to see if the push down stack is totally exhausted (ie,
  3    26*     Ptoken = null); and:
  3    27*     
  3    28*        / SPEC1 ... SPECN <no-token>         / ... / ... \
  3    29*                           A
  3    30*                           |
  3    31*                 Pthis_token (points to top of push down stack)
  3    32*     
  3    33*     which checks to see whether SPECN is topmost on the push down stack
  3    34*     AND is the final token in the input list.
  3    35*                                                   END HISTORY COMMENTS */
  3    36 
  3    37 
  3    38 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  3    39 	/*									*/
  3    40 	/* NAME:  rdc_end_.incl.pl1							*/
  3    41 	/*									*/
  3    42 	/*      This include segment is used by compilers generated by the reduction_compiler.	*/
  3    43 	/* Such compilers include a SEMANTIC_ANALYSIS subroutine generated by the		*/
  3    44 	/* reduction_compiler.  This subroutine compares a chain of input tokens with token	*/
  3    45 	/* requirements specified in reductions.  The code in this include segment performs the	*/
  3    46 	/* actual comparisons.  This code is the middle part of the SEMANTIC_ANALYSIS procedure.	*/
  3    47 	/*									*/
  3    48 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  3    49 
  3    50 	TRACING = TRACING;				/* Kludge to prevent pl1 from making TRACING	*/
  3    51 						/*   options(constant) because it is never set.	*/
  3    52 	NRED = 1;
  3    53 	go to RD_TEST_REDUCTION;
  3    54 
  3    55 RD_NEXT_REDUCTION:
  3    56 	NRED = NRED + 1;
  3    57 
  3    58 RD_TEST_REDUCTION:
  3    59 	PRED = addr(REDUCTION(NRED));
  3    60 	Ptoken = Pthis_token;
  3    61 
  3    62 	do I = RED.TOKEN_REQD.IFIRST to RED.TOKEN_REQD.ILAST by DIRECTION;
  3    63 	     PTOKEN_REQD = addr(TOKEN_REQUIREMENT(I));
  3    64 	     if Ptoken = null then do;
  3    65 		if TOKEN_REQD.FORM = 0 then		/* No more tokens.  Only matches <no-token> spec.	*/
  3    66 		     if TOKEN_REQD.TYPE = 1 then
  3    67 			go to RD_TEST_TOKEN(1);
  3    68 		go to RD_NEXT_REDUCTION;
  3    69 		end;
  3    70 	     if TOKEN_REQD.FORM = 0 then do;		/* built-in syntax function.			*/
  3    71 		go to RD_TEST_TOKEN(TOKEN_REQD.TYPE);
  3    72 
  3    73 RD_TEST_TOKEN(1):   if SPDL then			/* <no-token>				*/
  3    74 						/* In push-down-language, there are 2 		*/
  3    75 						/*   interpretations of <no-token>.		*/
  3    76 		     if      RED.TOKEN_REQD.IFIRST = RED.TOKEN_REQD.ILAST &
  3    77 			   Ptoken = null then	/* When <no-token> is only spec, the spec asks 	*/
  3    78 			go to RD_MATCH_NO_TOKEN;	/* "Is push down stack empty (all input gone)?"   */
  3    79 		     else if RED.TOKEN_REQD.IFIRST^= RED.TOKEN_REQD.ILAST &
  3    80 			   RED.TOKEN_REQD.IFIRST = I &
  3    81 			   token.Pnext = null then	/* For SPEC1 ... SPECN <no-token>, the spec asks  */
  3    82 			go to RD_MATCH_NO_TOKEN;	/* "Are the topmost tokens on stack SPEC1 - SPECN,*/
  3    83 						/*  and is SPECN the final input token?"	*/
  3    84 		     else go to RD_NEXT_REDUCTION;	/* Those are the only two defs allowed in push	*/
  3    85 						/* down language mode for <no-token>.		*/
  3    86 		else if Ptoken = null then
  3    87 		     go to RD_MATCH_NO_TOKEN;
  3    88 		go to RD_NEXT_REDUCTION;
  3    89 
  3    90 RD_TEST_TOKEN(2):	go to RD_MATCH;			/* <any-token>				*/
  3    91 
  3    92 RD_TEST_TOKEN(3):	if token.Lvalue > 0 &		/* <name>					*/
  3    93 		   token.Lvalue <= 32 & ^token.S.quoted_string then
  3    94 		     if search(substr(token_value,1,1),"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")
  3    95 		     > 0 then
  3    96 			if verify(token_value,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_$")
  3    97 			= 0 then
  3    98 			     go to RD_MATCH;
  3    99 		go to RD_NEXT_REDUCTION;
  3   100 
  3   101 RD_TEST_TOKEN(4):					/* <decimal-integer>			*/
  3   102 		if token.Nvalue ^= 0 then		/* token already determined to be a number.	*/
  3   103 		     go to RD_MATCH;
  3   104 		if token.S.quoted_string then
  3   105 		     go to RD_NEXT_REDUCTION;
  3   106 		NUMBER = cv_dec_check_ (token_value, CODE);
  3   107 		if CODE = 0 then do;
  3   108 		     token.Nvalue = NUMBER;
  3   109 		     go to RD_MATCH;
  3   110 		     end;
  3   111 		go to RD_NEXT_REDUCTION;
  3   112 
  3   113 RD_TEST_TOKEN(5):	if token.Lvalue = 1 then		/* <BS>					*/
  3   114 		     if token_value = BACKSPACE & ^token.S.quoted_string then
  3   115 			go to RD_MATCH;
  3   116 		go to RD_NEXT_REDUCTION;
  3   117 
  3   118 RD_TEST_TOKEN(6):	if token.S.quoted_string then		/* <quoted-string>				*/
  3   119 		     go to RD_MATCH;
  3   120 		go to RD_NEXT_REDUCTION;
  3   121 		end;
  3   122 
  3   123 	     else if TOKEN_REQD.FORM > 0 then do;	/* absolute syntax specification.		*/
  3   124 		if token.S.quoted_string then
  3   125 		     go to RD_NEXT_REDUCTION;
  3   126 		PTOKEN_REQD_VALUE = addr(substr(TOKEN_STRINGS,TOKEN_REQD_STRING.I));
  3   127 		LTOKEN_REQD_VALUE = TOKEN_REQD_STRING.L;
  3   128 		if token_value = TOKEN_REQD_VALUE then
  3   129 		     go to RD_MATCH;
  3   130 		go to RD_NEXT_REDUCTION;
  3   131 		end;
  3   132 
  3   133 	/* END OF:	rdc_end_.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     2067 
     2068 
     2069 	     else do;				/* relative syntax function.			*/
     2070 		go to RD_TOKEN_FCN(TOKEN_REQD.TYPE);
     2071 
     2072 RD_TOKEN_FCN(1):	STOKEN_FCN = PUSH_DOWN_LANGUAGE();
     2073 		go to RD_TEST_RESULT;
     2074 
     2075 RD_TEST_RESULT:	if STOKEN_FCN then go to RD_MATCH;
     2076 		else go to RD_NEXT_REDUCTION;
     2077 		end;
     2078 
     2079 RD_MATCH:      Ptoken = token.Pnext;
     2080 RD_MATCH_NO_TOKEN:
     2081 	     end;
     2082 	Ptoken = Pthis_token;
     2083 	go to RD_ACTION(NRED);
     2084 
     2085 		/* START OF:	rdc_stack_fcns_.incl.pl1	  *  *  *  *  *  *  */
  4     2 
  4     3 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
  4     4 	/*							*/
  4     5 	/* N__a_m_e:  rdc_stack_fcns_.incl.pl1				*/
  4     6 	/*							*/
  4     7 	/*      This include segment is used by compilers generated by the	*/
  4     8 	/* reduction_compiler.  It includes code for manipulating the 	*/
  4     9 	/* reduction label stack.					*/
  4    10 	/*							*/
  4    11 	/* S__t_a_t_u_s							*/
  4    12 	/*							*/
  4    13 	/* 0) Created:  April, 1974 by G. C. Dixon			*/
  4    14 	/*							*/
  4    15 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
  4    16 
  4    17 RD_STACK:	if STACK_DEPTH > 0 then do;
  4    18 	     NRED = STACK (STACK_DEPTH);
  4    19 	     go to RD_TEST_REDUCTION;
  4    20 	     end;
  4    21 	else
  4    22 	     go to RD_NEXT_REDUCTION;
  4    23 
  4    24 RD_STACK_POP:
  4    25 	if STACK_DEPTH > 0 then do;
  4    26 	     NRED = STACK (STACK_DEPTH);
  4    27 	     STACK_DEPTH = max (STACK_DEPTH-1, 0);
  4    28 	     go to RD_TEST_REDUCTION;
  4    29 	     end;
  4    30 	else
  4    31 	     go to RD_NEXT_REDUCTION;
  4    32 
  4    33 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
  4    34 
  4    35 
  4    36 PUSH:	procedure (N);				/* invoked to push reduction number 'N' onto	*/
  4    37 						/* the reduction stack.			*/
  4    38      dcl	N			fixed bin;
  4    39 
  4    40      dcl (addr, dimension, length, null)
  4    41 				builtin;
  4    42 
  4    43      dcl	cu_$cl			entry,
  4    44 	iox_$put_chars		entry (ptr, ptr, fixed bin, fixed bin(35)),
  4    45 	iox_$error_output		ptr ext static,
  4    46 	lex_error_		entry options(variable);
  4    47 
  4    48      dcl	brief_error		char(4) varying initial ("") int static,
  4    49 	long_error		char(234) varying int static init(
  4    50 "An internal stack (the reduction stack) has overflowed.
  4    51 The translation has failed.  Contact translator maintenance
  4    52 personnel for assistance.
  4    53      Processing reduction: ^d
  4    54      Reduction being stacked: ^d
  4    55      Maximum stack depth: ^d"),
  4    56 	non_restart_error		char(33) int static init ("Translation cannot be restarted.
  4    57 ");
  4    58 
  4    59 	if STACK_DEPTH >= dimension (STACK, 1) then do;
  4    60 	     call lex_error_ (0, "0"b, 4, 0, null, null, "11"b, long_error, brief_error, NRED, N,
  4    61 			  dimension(STACK,1));
  4    62 get_to_cl:     call cu_$cl();
  4    63 	     call iox_$put_chars (iox_$error_output, addr(non_restart_error), length(non_restart_error), 0);
  4    64 	     go to get_to_cl;
  4    65 	     end;					/* stack overflow is a non-recoverable error.	*/
  4    66 	else
  4    67 	     STACK_DEPTH = STACK_DEPTH + 1;
  4    68 	STACK (STACK_DEPTH) = N;
  4    69 
  4    70 	end PUSH;
  4    71 
  4    72 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
  4    73 
  4    74 	/* END OF:	rdc_stack_fcns_.incl.pl1	  *  *  *  *  *  *  */
     2085 
     2086 
     2087 
     2088 RD_ACTION(1):					/* /					*/
     2089 	call 					     ERROR ( 1 );
     2090 	NRED = 147;
     2091 	go to RD_TEST_REDUCTION;			/* / stop \                            		*/
     2092 
     2093 RD_ACTION(2):					/* /					*/
     2094 	call					     reductions_init();
     2095 	NRED = 3;
     2096 	go to RD_TEST_REDUCTION;			/* / attributes \                      		*/
     2097 
     2098 RD_ACTION(3):					/* /					*/
     2099 						     Psave = Pthis_token;
     2100 	NRED = 14;
     2101 	go to RD_TEST_REDUCTION;			/* / pass1 \                           		*/
     2102 
     2103 RD_ACTION(4):					/* /					*/
     2104 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     2105 	call					     set_depth();
     2106 	call 					     LEX ( 2 );
     2107 	NRED = 3;
     2108 	go to RD_TEST_REDUCTION;			/* / attributes \                      		*/
     2109 
     2110 RD_ACTION(5):					/* /					*/
     2111 	call 					     LEX ( 4 );
     2112 						     S_PDL = "1"b;
     2113 	NRED = 3;
     2114 	go to RD_TEST_REDUCTION;			/* / attributes \                      		*/
     2115 
     2116 RD_ACTION(6):					/* /					*/
     2117 	call 					     LEX ( 3 );
     2118 						     Sinclude_DELETE = "1"b;
     2119 	NRED = 3;
     2120 	go to RD_TEST_REDUCTION;			/* / attributes \                      		*/
     2121 
     2122 RD_ACTION(7):					/* /					*/
     2123 	call 					     LEX ( 3 );
     2124 						     Sinclude_DELETE_STMT = "1"b;
     2125 	NRED = 3;
     2126 	go to RD_TEST_REDUCTION;			/* / attributes \                      		*/
     2127 
     2128 RD_ACTION(8):					/* /					*/
     2129 	call 					     LEX ( 3 );
     2130 						     Sinclude_ERROR = "1"b;
     2131 	NRED = 3;
     2132 	go to RD_TEST_REDUCTION;			/* / attributes \                      		*/
     2133 
     2134 RD_ACTION(9):					/* /					*/
     2135 	call 					     LEX ( 3 );
     2136 						     Sinclude_NEXT_STMT = "1"b;
     2137 	NRED = 3;
     2138 	go to RD_TEST_REDUCTION;			/* / attributes \                      		*/
     2139 
     2140 RD_ACTION(10):					/* /					*/
     2141 	call 					     LEX ( 3 );
     2142 						     Sinclude_LEX = "1"b;
     2143 	NRED = 3;
     2144 	go to RD_TEST_REDUCTION;			/* / attributes \                      		*/
     2145 
     2146 RD_ACTION(11):					/* /					*/
     2147 	call 					     ERROR ( 19 );
     2148 	call					     NEXT_STMT();
     2149 	NRED = 3;
     2150 	go to RD_TEST_REDUCTION;			/* / attributes \                      		*/
     2151 
     2152 RD_ACTION(12):					/* /					*/
     2153 	call 					     ERROR ( 1 );
     2154 	NRED = 147;
     2155 	go to RD_TEST_REDUCTION;			/* / stop \                            		*/
     2156 
     2157 RD_ACTION(13):					/* /					*/
     2158 	call 					     ERROR ( 2 );
     2159 	call					     NEXT_STMT();
     2160 	NRED = 3;
     2161 	go to RD_TEST_REDUCTION;			/* / attributes \                      		*/
     2162 
     2163 RD_ACTION(14):					/* /					*/
     2164 	call					     count_reduction();
     2165 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     2166 	NRED = 19;
     2167 	go to RD_TEST_REDUCTION;			/* / count \                           		*/
     2168 
     2169 RD_ACTION(15):					/* /					*/
     2170 	call					     set_label();
     2171 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     2172 	NRED = 14;
     2173 	go to RD_TEST_REDUCTION;			/* / set_label \                       		*/
     2174 
     2175 RD_ACTION(16):					/* /					*/
     2176 	call 					     ERROR ( 22 );
     2177 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     2178 	NRED = 14;
     2179 	go to RD_TEST_REDUCTION;			/* / set_label \                       		*/
     2180 
     2181 RD_ACTION(17):					/* /					*/
     2182 	call					     reductions_begin();
     2183 						     Pthis_token = Psave;
     2184 	NRED = 24;
     2185 	go to RD_TEST_REDUCTION;			/* / pass2 \                           		*/
     2186 
     2187 RD_ACTION(18):					/* /					*/
     2188 	call 					     ERROR ( 3 );
     2189 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     2190 	NRED = 14;
     2191 	go to RD_TEST_REDUCTION;			/* / set_label \                       		*/
     2192 
     2193 RD_ACTION(19):					/* /					*/
     2194 	call 					     count_token ( 1 );
     2195 	call 					     LEX ( 1 );
     2196 	NRED = 19;
     2197 	go to RD_TEST_REDUCTION;			/* / count \                           		*/
     2198 
     2199 RD_ACTION(20):					/* /					*/
     2200 	call 					     count_token ( 1 );
     2201 	call 					     LEX ( 3 );
     2202 	NRED = 19;
     2203 	go to RD_TEST_REDUCTION;			/* / count \                           		*/
     2204 
     2205 RD_ACTION(21):					/* /					*/
     2206 	call					     NEXT_STMT();
     2207 	NRED = 14;
     2208 	go to RD_TEST_REDUCTION;			/* / set_label \                       		*/
     2209 
     2210 RD_ACTION(22):					/* /					*/
     2211 	call 					     count_token ( 1 );
     2212 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     2213 	NRED = 19;
     2214 	go to RD_TEST_REDUCTION;			/* / count \                           		*/
     2215 
     2216 RD_ACTION(23):					/* /					*/
     2217 	call 					     ERROR ( 5 );
     2218 	NRED = 147;
     2219 	go to RD_TEST_REDUCTION;			/* / stop \                            		*/
     2220 
     2221 RD_ACTION(24):					/* /					*/
     2222 	call					     reduction_begin();
     2223 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     2224 	NRED = 29;
     2225 	go to RD_TEST_REDUCTION;			/* / first_token \                     		*/
     2226 
     2227 RD_ACTION(25):					/* /					*/
     2228 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     2229 	NRED = 24;
     2230 	go to RD_TEST_REDUCTION;			/* / skip_label \                      		*/
     2231 
     2232 RD_ACTION(26):					/* /					*/
     2233 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     2234 	NRED = 24;
     2235 	go to RD_TEST_REDUCTION;			/* / skip_label \                      		*/
     2236 
     2237 RD_ACTION(27):					/* /					*/
     2238 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     2239 	NRED = 24;
     2240 	go to RD_TEST_REDUCTION;			/* / skip_label \                      		*/
     2241 
     2242 RD_ACTION(28):					/* /					*/
     2243 	NRED = 147;
     2244 	go to RD_TEST_REDUCTION;			/* / stop \                            		*/
     2245 
     2246 RD_ACTION(29):					/* /					*/
     2247 	NRED = 31;
     2248 	go to RD_TEST_REDUCTION;			/* / token1 \                          		*/
     2249 
     2250 RD_ACTION(30):					/* /					*/
     2251 	NRED = 33;
     2252 	go to RD_TEST_REDUCTION;			/* / tokens \                          		*/
     2253 
     2254 RD_ACTION(31):					/* /					*/
     2255 	NRED = 33;
     2256 	go to RD_TEST_REDUCTION;			/* / tokens \                          		*/
     2257 
     2258 RD_ACTION(32):					/* /					*/
     2259 	call 					     compile_token ( 1 );
     2260 	call 					     LEX ( 5 );
     2261 	NRED = 33;
     2262 	go to RD_TEST_REDUCTION;			/* / tokens \                          		*/
     2263 
     2264 RD_ACTION(33):					/* /					*/
     2265 	call 					     compile_token ( 0 );
     2266 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     2267 	NRED = 33;
     2268 	go to RD_TEST_REDUCTION;			/* / tokens \                          		*/
     2269 
     2270 RD_ACTION(34):					/* /					*/
     2271 	call 					     compile_token ( 0 );
     2272 	call 					     LEX ( 3 );
     2273 	NRED = 33;
     2274 	go to RD_TEST_REDUCTION;			/* / tokens \                          		*/
     2275 
     2276 RD_ACTION(35):					/* /					*/
     2277 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     2278 	call					     action_begin();
     2279 	NRED = 53;
     2280 	go to RD_TEST_REDUCTION;			/* / action \                          		*/
     2281 
     2282 RD_ACTION(36):					/* /					*/
     2283 	call 					     compile_token ( 0 );
     2284 	call 					     LEX ( 3 );
     2285 	NRED = 33;
     2286 	go to RD_TEST_REDUCTION;			/* / tokens \                          		*/
     2287 
     2288 RD_ACTION(37):					/* /					*/
     2289 	call 					     compile_token ( 0 );
     2290 	call 					     LEX ( 3 );
     2291 	NRED = 33;
     2292 	go to RD_TEST_REDUCTION;			/* / tokens \                          		*/
     2293 
     2294 RD_ACTION(38):					/* /					*/
     2295 	call 					     compile_token ( 0 );
     2296 	call 					     LEX ( 3 );
     2297 	NRED = 33;
     2298 	go to RD_TEST_REDUCTION;			/* / tokens \                          		*/
     2299 
     2300 RD_ACTION(39):					/* /					*/
     2301 	call 					     compile_token ( 0 );
     2302 	call 					     LEX ( 3 );
     2303 	NRED = 33;
     2304 	go to RD_TEST_REDUCTION;			/* / tokens \                          		*/
     2305 
     2306 RD_ACTION(40):					/* /					*/
     2307 	call 					     compile_token ( 0 );
     2308 	call 					     LEX ( 3 );
     2309 	NRED = 33;
     2310 	go to RD_TEST_REDUCTION;			/* / tokens \                          		*/
     2311 
     2312 RD_ACTION(41):					/* /					*/
     2313 	call 					     compile_token ( 0 );
     2314 	call 					     LEX ( 3 );
     2315 	NRED = 33;
     2316 	go to RD_TEST_REDUCTION;			/* / tokens \                          		*/
     2317 
     2318 RD_ACTION(42):					/* /					*/
     2319 	call 					     compile_token ( 1 );
     2320 	call 					     LEX ( 6 );
     2321 	call					     action_begin();
     2322 	NRED = 53;
     2323 	go to RD_TEST_REDUCTION;			/* / action \                          		*/
     2324 
     2325 RD_ACTION(43):					/* /					*/
     2326 	call 					     LEX ( 5 );
     2327 	call 					     ERROR ( 14 );
     2328 	NRED = 79;
     2329 	go to RD_TEST_REDUCTION;			/* / error_in_red \                    		*/
     2330 
     2331 RD_ACTION(44):					/* /					*/
     2332 	call 					     compile_token ( 2 );
     2333 	call 					     LEX ( 5 );
     2334 	NRED = 33;
     2335 	go to RD_TEST_REDUCTION;			/* / tokens \                          		*/
     2336 
     2337 RD_ACTION(45):					/* /					*/
     2338 	call 					     compile_token ( 3 );
     2339 	call 					     LEX ( 3 );
     2340 	NRED = 33;
     2341 	go to RD_TEST_REDUCTION;			/* / tokens \                          		*/
     2342 
     2343 RD_ACTION(46):					/* /					*/
     2344 	call 					     compile_token ( 4 );
     2345 	call 					     LEX ( 5 );
     2346 	NRED = 33;
     2347 	go to RD_TEST_REDUCTION;			/* / tokens \                          		*/
     2348 
     2349 RD_ACTION(47):					/* /					*/
     2350 	call 					     compile_token ( 5 );
     2351 	call 					     LEX ( 3 );
     2352 	NRED = 33;
     2353 	go to RD_TEST_REDUCTION;			/* / tokens \                          		*/
     2354 
     2355 RD_ACTION(48):					/* /					*/
     2356 	call 					     compile_token ( 6 );
     2357 	call 					     LEX ( 5 );
     2358 	NRED = 33;
     2359 	go to RD_TEST_REDUCTION;			/* / tokens \                          		*/
     2360 
     2361 RD_ACTION(49):					/* /					*/
     2362 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     2363 	call 					     compile_token ( 7 );
     2364 	call 					     LEX ( 2 );
     2365 	NRED = 33;
     2366 	go to RD_TEST_REDUCTION;			/* / tokens \                          		*/
     2367 
     2368 RD_ACTION(50):					/* /					*/
     2369 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     2370 	call 					     ERROR ( 22 );
     2371 	NRED = 24;
     2372 	go to RD_TEST_REDUCTION;			/* / label \                           		*/
     2373 
     2374 RD_ACTION(51):					/* /					*/
     2375 	call 					     compile_token ( 0 );
     2376 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     2377 	NRED = 33;
     2378 	go to RD_TEST_REDUCTION;			/* / tokens \                          		*/
     2379 
     2380 RD_ACTION(52):					/* /					*/
     2381 	call 					     ERROR ( 5 );
     2382 	NRED = 147;
     2383 	go to RD_TEST_REDUCTION;			/* / stop \                            		*/
     2384 
     2385 RD_ACTION(53):					/* /					*/
     2386 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     2387 	NRED = 138;
     2388 	go to RD_TEST_REDUCTION;			/* / next_red \                        		*/
     2389 
     2390 RD_ACTION(54):					/* /					*/
     2391 	call					     set_action_with_args();
     2392 	call 					     LEX ( 2 );
     2393 	call PUSH(127);				/*   PUSH(last_paren)                             */
     2394 						     Sinclude_LEX = "1"b;
     2395 	NRED = 113;
     2396 	go to RD_TEST_REDUCTION;			/* / args \                            		*/
     2397 
     2398 RD_ACTION(55):					/* /					*/
     2399 	call					     set_action_with_args();
     2400 	call 					     LEX ( 2 );
     2401 	call PUSH(127);				/*   PUSH(last_paren)                             */
     2402 						     Sinclude_LEX = "1"b;
     2403 	NRED = 113;
     2404 	go to RD_TEST_REDUCTION;			/* / args \                            		*/
     2405 
     2406 RD_ACTION(56):					/* /					*/
     2407 	call					     set_action_with_args();
     2408 	call 					     LEX ( 2 );
     2409 	call PUSH(127);				/*   PUSH(last_paren)                             */
     2410 						     Sinclude_LEX = "1"b;
     2411 	NRED = 113;
     2412 	go to RD_TEST_REDUCTION;			/* / args \                            		*/
     2413 
     2414 RD_ACTION(57):					/* /					*/
     2415 	call 					     ERROR ( 19 );
     2416 	NRED = 79;
     2417 	go to RD_TEST_REDUCTION;			/* / error_in_red \                    		*/
     2418 
     2419 RD_ACTION(58):					/* /					*/
     2420 	call 					     rtn ( 1 );
     2421 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     2422 	NRED = 53;
     2423 	go to RD_TEST_REDUCTION;			/* / action \                          		*/
     2424 
     2425 RD_ACTION(59):					/* /					*/
     2426 	call 					     ERROR ( 19 );
     2427 	NRED = 79;
     2428 	go to RD_TEST_REDUCTION;			/* / error_in_red \                    		*/
     2429 
     2430 RD_ACTION(60):					/* /					*/
     2431 	call					     set_action();
     2432 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     2433 						     Sinclude_NEXT_STMT = "1"b;
     2434 	NRED = 53;
     2435 	go to RD_TEST_REDUCTION;			/* / action \                          		*/
     2436 
     2437 RD_ACTION(61):					/* /					*/
     2438 	call 					     ERROR ( 19 );
     2439 	NRED = 79;
     2440 	go to RD_TEST_REDUCTION;			/* / error_in_red \                    		*/
     2441 
     2442 RD_ACTION(62):					/* /					*/
     2443 	call 					     rtn ( 2 );
     2444 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     2445 	NRED = 53;
     2446 	go to RD_TEST_REDUCTION;			/* / action \                          		*/
     2447 
     2448 RD_ACTION(63):					/* /					*/
     2449 	call 					     LEX ( 2 );
     2450 	call 					     rtn ( 3 );
     2451 	call 					     LEX ( 2 );
     2452 	NRED = 53;
     2453 	go to RD_TEST_REDUCTION;			/* / action \                          		*/
     2454 
     2455 RD_ACTION(64):					/* /					*/
     2456 	call 					     ERROR ( 19 );
     2457 	NRED = 79;
     2458 	go to RD_TEST_REDUCTION;			/* / error_in_red \                    		*/
     2459 
     2460 RD_ACTION(65):					/* /					*/
     2461 	NRED = 80;
     2462 	go to RD_TEST_REDUCTION;			/* / DELETE \                          		*/
     2463 
     2464 RD_ACTION(66):					/* /					*/
     2465 	call 					     ERROR ( 19 );
     2466 	NRED = 79;
     2467 	go to RD_TEST_REDUCTION;			/* / error_in_red \                    		*/
     2468 
     2469 RD_ACTION(67):					/* /					*/
     2470 	call					     set_action();
     2471 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     2472 						     Sinclude_DELETE_STMT = "1"b;
     2473 	NRED = 53;
     2474 	go to RD_TEST_REDUCTION;			/* / action \                          		*/
     2475 
     2476 RD_ACTION(68):					/* /					*/
     2477 	call					     set_action_with_args();
     2478 	call 					     LEX ( 2 );
     2479 						     Sinclude_ERROR = "1"b;
     2480 	call PUSH(127);				/*   PUSH(last_paren)                             */
     2481 	NRED = 113;
     2482 	go to RD_TEST_REDUCTION;			/* / args \                            		*/
     2483 
     2484 RD_ACTION(69):					/* /					*/
     2485 	call					     set_action_with_args();
     2486 	call 					     LEX ( 2 );
     2487 						     Sinclude_ERROR = "1"b;
     2488 	call PUSH(127);				/*   PUSH(last_paren)                             */
     2489 	NRED = 113;
     2490 	go to RD_TEST_REDUCTION;			/* / args \                            		*/
     2491 
     2492 RD_ACTION(70):					/* /					*/
     2493 	call 					     output ( ( 6 ) "	"|| ( 4 ) " " );
     2494 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     2495 	NRED = 98;
     2496 	go to RD_TEST_REDUCTION;			/* / stmt \                            		*/
     2497 
     2498 RD_ACTION(71):					/* /					*/
     2499 	call 					     ERROR ( 21 );
     2500 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     2501 	NRED = 53;
     2502 	go to RD_TEST_REDUCTION;			/* / action \                          		*/
     2503 
     2504 RD_ACTION(72):					/* /					*/
     2505 	call 					     ERROR ( 21 );
     2506 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     2507 	NRED = 53;
     2508 	go to RD_TEST_REDUCTION;			/* / action \                          		*/
     2509 
     2510 RD_ACTION(73):					/* /					*/
     2511 	call 					     ERROR ( 21 );
     2512 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     2513 	NRED = 53;
     2514 	go to RD_TEST_REDUCTION;			/* / action \                          		*/
     2515 
     2516 RD_ACTION(74):					/* /					*/
     2517 	call 					     ERROR ( 23 );
     2518 	NRED = 79;
     2519 	go to RD_TEST_REDUCTION;			/* / error_in_red \                    		*/
     2520 
     2521 RD_ACTION(75):					/* /					*/
     2522 	call 					     ERROR ( 22 );
     2523 	NRED = 79;
     2524 	go to RD_TEST_REDUCTION;			/* / error_in_red \                    		*/
     2525 
     2526 RD_ACTION(76):					/* /					*/
     2527 	call					     set_action_with_args();
     2528 	call 					     LEX ( 2 );
     2529 	call PUSH(127);				/*   PUSH(last_paren)                             */
     2530 	NRED = 113;
     2531 	go to RD_TEST_REDUCTION;			/* / args \                            		*/
     2532 
     2533 RD_ACTION(77):					/* /					*/
     2534 	call					     set_action();
     2535 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     2536 	NRED = 53;
     2537 	go to RD_TEST_REDUCTION;			/* / action \                          		*/
     2538 
     2539 RD_ACTION(78):					/* /					*/
     2540 	call 					     ERROR ( 5 );
     2541 	NRED = 147;
     2542 	go to RD_TEST_REDUCTION;			/* / stop \                            		*/
     2543 
     2544 RD_ACTION(79):					/* /					*/
     2545 						     obj_red.Ilast ( Nobj_red ) = 0;
     2546 	call					     reduction_end();
     2547 	call					     NEXT_STMT();
     2548 	NRED = 24;
     2549 	go to RD_TEST_REDUCTION;			/* / label \                           		*/
     2550 
     2551 RD_ACTION(80):					/* /					*/
     2552 	NRED = 97;
     2553 	go to RD_TEST_REDUCTION;			/* / DELETE_2 \                        		*/
     2554 
     2555 RD_ACTION(81):					/* /					*/
     2556 	NRED = 97;
     2557 	go to RD_TEST_REDUCTION;			/* / DELETE_2 \                        		*/
     2558 
     2559 RD_ACTION(82):					/* /					*/
     2560 	NRED = 97;
     2561 	go to RD_TEST_REDUCTION;			/* / DELETE_2 \                        		*/
     2562 
     2563 RD_ACTION(83):					/* /					*/
     2564 	NRED = 97;
     2565 	go to RD_TEST_REDUCTION;			/* / DELETE_2 \                        		*/
     2566 
     2567 RD_ACTION(84):					/* /					*/
     2568 	NRED = 97;
     2569 	go to RD_TEST_REDUCTION;			/* / DELETE_2 \                        		*/
     2570 
     2571 RD_ACTION(85):					/* /					*/
     2572 	NRED = 97;
     2573 	go to RD_TEST_REDUCTION;			/* / DELETE_2 \                        		*/
     2574 
     2575 RD_ACTION(86):					/* /					*/
     2576 	NRED = 97;
     2577 	go to RD_TEST_REDUCTION;			/* / DELETE_2 \                        		*/
     2578 
     2579 RD_ACTION(87):					/* /					*/
     2580 	NRED = 97;
     2581 	go to RD_TEST_REDUCTION;			/* / DELETE_2 \                        		*/
     2582 
     2583 RD_ACTION(88):					/* /					*/
     2584 	NRED = 97;
     2585 	go to RD_TEST_REDUCTION;			/* / DELETE_2 \                        		*/
     2586 
     2587 RD_ACTION(89):					/* /					*/
     2588 	NRED = 94;
     2589 	go to RD_TEST_REDUCTION;			/* / DELETE_1 \                        		*/
     2590 
     2591 RD_ACTION(90):					/* /					*/
     2592 	NRED = 94;
     2593 	go to RD_TEST_REDUCTION;			/* / DELETE_1 \                        		*/
     2594 
     2595 RD_ACTION(91):					/* /					*/
     2596 	NRED = 94;
     2597 	go to RD_TEST_REDUCTION;			/* / DELETE_1 \                        		*/
     2598 
     2599 RD_ACTION(92):					/* /					*/
     2600 	call 					     ERROR ( 19 );
     2601 	NRED = 79;
     2602 	go to RD_TEST_REDUCTION;			/* / error_in_red \                    		*/
     2603 
     2604 RD_ACTION(93):					/* /					*/
     2605 	call					     set_action_with_args();
     2606 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     2607 	call 					     output ( " 0, 0 )" );
     2608 						     Sinclude_DELETE = "1"b;
     2609 	NRED = 127;
     2610 	go to RD_TEST_REDUCTION;			/* / last_paren \                      		*/
     2611 
     2612 RD_ACTION(94):					/* /					*/
     2613 	call					     set_action_with_args();
     2614 	call 					     LEX ( 2 );
     2615 						     Sinclude_DELETE = "1"b;
     2616 	go to RD_NEXT_REDUCTION;			/* /	\				*/
     2617 
     2618 RD_ACTION(95):					/* /					*/
     2619 	call 					     output ( " " );
     2620 	call 					     output ( token_value );
     2621 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     2622 	call 					     output ( token_value );
     2623 	call 					     LEX ( -1 );
     2624 	call 					     output ( "," );
     2625 	call PUSH(127);				/*   PUSH(last_paren)                             */
     2626 	NRED = 113;
     2627 	go to RD_TEST_REDUCTION;			/* / args \                            		*/
     2628 
     2629 RD_ACTION(96):					/* /					*/
     2630 	call 					     output ( " " );
     2631 	call 					     output ( token_value );
     2632 	call 					     output ( "," );
     2633 	call PUSH(127);				/*   PUSH(last_paren)                             */
     2634 	NRED = 113;
     2635 	go to RD_TEST_REDUCTION;			/* / args \                            		*/
     2636 
     2637 RD_ACTION(97):					/* /					*/
     2638 	call					     set_action_with_args();
     2639 	call 					     LEX ( 2 );
     2640 	call PUSH(127);				/*   PUSH(last_paren)                             */
     2641 						     Sinclude_DELETE = "1"b;
     2642 	NRED = 113;
     2643 	go to RD_TEST_REDUCTION;			/* / args \                            		*/
     2644 
     2645 RD_ACTION(98):					/* /					*/
     2646 	NRED = 112;
     2647 	go to RD_TEST_REDUCTION;			/* / bit_constant \                    		*/
     2648 
     2649 RD_ACTION(99):					/* /					*/
     2650 	NRED = 112;
     2651 	go to RD_TEST_REDUCTION;			/* / bit_constant \                    		*/
     2652 
     2653 RD_ACTION(100):					/* /					*/
     2654 	NRED = 112;
     2655 	go to RD_TEST_REDUCTION;			/* / bit_constant \                    		*/
     2656 
     2657 RD_ACTION(101):					/* /					*/
     2658 	NRED = 112;
     2659 	go to RD_TEST_REDUCTION;			/* / bit_constant \                    		*/
     2660 
     2661 RD_ACTION(102):					/* /					*/
     2662 	NRED = 112;
     2663 	go to RD_TEST_REDUCTION;			/* / bit_constant \                    		*/
     2664 
     2665 RD_ACTION(103):					/* /					*/
     2666 	call 					     output ( " " );
     2667 	call 					     output_quote ( token_value );
     2668 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     2669 	go to RD_NEXT_REDUCTION;			/* /	\				*/
     2670 
     2671 RD_ACTION(104):					/* /					*/
     2672 	call 					     output ( " " );
     2673 	call 					     output ( "(" );
     2674 	call PUSH(98);				/*   PUSH(stmt)                                   */
     2675 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     2676 	NRED = 113;
     2677 	go to RD_TEST_REDUCTION;			/* / args \                            		*/
     2678 
     2679 RD_ACTION(105):					/* /					*/
     2680 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     2681 	NRED = 127;
     2682 	go to RD_TEST_REDUCTION;			/* / last_paren \                      		*/
     2683 
     2684 RD_ACTION(106):					/* /					*/
     2685 	call 					     output ( ";"|| NL || ( 6 ) "	"|| ( 4 ) " " );
     2686 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     2687 	NRED = 98;
     2688 	go to RD_TEST_REDUCTION;			/* / stmt \                            		*/
     2689 
     2690 RD_ACTION(107):					/* /					*/
     2691 	call 					     ERROR ( 24 );
     2692 	NRED = 79;
     2693 	go to RD_TEST_REDUCTION;			/* / error_in_red \                    		*/
     2694 
     2695 RD_ACTION(108):					/* /					*/
     2696 	call PUSH(98);				/*   PUSH(stmt)                                   */
     2697 	call PUSH(109);				/*   PUSH(stmt1)                                  */
     2698 	NRED = 128;
     2699 	go to RD_TEST_REDUCTION;			/* / special_chars \                   		*/
     2700 
     2701 RD_ACTION(109):					/* /					*/
     2702 	STACK_DEPTH = max(STACK_DEPTH-1,0);		/*   POP					*/
     2703 	go to RD_NEXT_REDUCTION;			/* /	\				*/
     2704 
     2705 RD_ACTION(110):					/* /					*/
     2706 	call 					     output ( " " );
     2707 	call 					     output ( token_value );
     2708 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     2709 	NRED = 98;
     2710 	go to RD_TEST_REDUCTION;			/* / stmt \                            		*/
     2711 
     2712 RD_ACTION(111):					/* /					*/
     2713 	call 					     ERROR ( 5 );
     2714 	NRED = 147;
     2715 	go to RD_TEST_REDUCTION;			/* / stop \                            		*/
     2716 
     2717 RD_ACTION(112):					/* /					*/
     2718 	call 					     output ( " " );
     2719 	call 					     output_quote ( token_value );
     2720 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     2721 	call 					     output ( token_value );
     2722 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     2723 	NRED = 98;
     2724 	go to RD_TEST_REDUCTION;			/* / stmt \                            		*/
     2725 
     2726 RD_ACTION(113):					/* /					*/
     2727 	NRED = 117;
     2728 	go to RD_TEST_REDUCTION;			/* / quoted_arg \                      		*/
     2729 
     2730 RD_ACTION(114):					/* /					*/
     2731 	NRED = 117;
     2732 	go to RD_TEST_REDUCTION;			/* / quoted_arg \                      		*/
     2733 
     2734 RD_ACTION(115):					/* /					*/
     2735 	NRED = 117;
     2736 	go to RD_TEST_REDUCTION;			/* / quoted_arg \                      		*/
     2737 
     2738 RD_ACTION(116):					/* /					*/
     2739 	call 					     output ( " " );
     2740 	call 					     output_quote ( token_value );
     2741 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     2742 	call 					     output ( token_value );
     2743 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     2744 	NRED = 113;
     2745 	go to RD_TEST_REDUCTION;			/* / args \                            		*/
     2746 
     2747 RD_ACTION(117):					/* /					*/
     2748 	call 					     output ( " " );
     2749 	call 					     output_quote ( token_value );
     2750 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     2751 	go to RD_NEXT_REDUCTION;			/* /	\				*/
     2752 
     2753 RD_ACTION(118):					/* /					*/
     2754 	call 					     output ( " " );
     2755 	call 					     output ( "(" );
     2756 	call PUSH(113);				/*   PUSH(args)                                   */
     2757 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     2758 	NRED = 113;
     2759 	go to RD_TEST_REDUCTION;			/* / args \                            		*/
     2760 
     2761 RD_ACTION(119):					/* /					*/
     2762 	call 					     output ( " " );
     2763 	call 					     output ( ")" );
     2764 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     2765 	go to RD_STACK_POP;				/* / STACK_POP	\			*/
     2766 
     2767 RD_ACTION(120):					/* /					*/
     2768 	call 					     ERROR ( 24 );
     2769 	NRED = 79;
     2770 	go to RD_TEST_REDUCTION;			/* / error_in_red \                    		*/
     2771 
     2772 RD_ACTION(121):					/* /					*/
     2773 	call 					     ERROR ( 24 );
     2774 	NRED = 79;
     2775 	go to RD_TEST_REDUCTION;			/* / error_in_red \                    		*/
     2776 
     2777 RD_ACTION(122):					/* /					*/
     2778 	call PUSH(113);				/*   PUSH(args)                                   */
     2779 	call PUSH(123);				/*   PUSH(args1)                                  */
     2780 	NRED = 128;
     2781 	go to RD_TEST_REDUCTION;			/* / special_chars \                   		*/
     2782 
     2783 RD_ACTION(123):					/* /					*/
     2784 	STACK_DEPTH = max(STACK_DEPTH-1,0);		/*   POP					*/
     2785 	go to RD_NEXT_REDUCTION;			/* /	\				*/
     2786 
     2787 RD_ACTION(124):					/* /					*/
     2788 	call 					     output ( token_value );
     2789 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     2790 	NRED = 113;
     2791 	go to RD_TEST_REDUCTION;			/* / args \                            		*/
     2792 
     2793 RD_ACTION(125):					/* /					*/
     2794 	call 					     output ( " " );
     2795 	call 					     output ( token_value );
     2796 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     2797 	NRED = 113;
     2798 	go to RD_TEST_REDUCTION;			/* / args \                            		*/
     2799 
     2800 RD_ACTION(126):					/* /					*/
     2801 	call 					     ERROR ( 5 );
     2802 	NRED = 147;
     2803 	go to RD_TEST_REDUCTION;			/* / stop \                            		*/
     2804 
     2805 RD_ACTION(127):					/* /					*/
     2806 	call 					     output ( ";" );
     2807 	call 					     output ( NL );
     2808 	NRED = 53;
     2809 	go to RD_TEST_REDUCTION;			/* / action \                          		*/
     2810 
     2811 RD_ACTION(128):					/* /					*/
     2812 	NRED = 137;
     2813 	go to RD_TEST_REDUCTION;			/* / spec_found \                      		*/
     2814 
     2815 RD_ACTION(129):					/* /					*/
     2816 	NRED = 137;
     2817 	go to RD_TEST_REDUCTION;			/* / spec_found \                      		*/
     2818 
     2819 RD_ACTION(130):					/* /					*/
     2820 	NRED = 137;
     2821 	go to RD_TEST_REDUCTION;			/* / spec_found \                      		*/
     2822 
     2823 RD_ACTION(131):					/* /					*/
     2824 	NRED = 137;
     2825 	go to RD_TEST_REDUCTION;			/* / spec_found \                      		*/
     2826 
     2827 RD_ACTION(132):					/* /					*/
     2828 	NRED = 137;
     2829 	go to RD_TEST_REDUCTION;			/* / spec_found \                      		*/
     2830 
     2831 RD_ACTION(133):					/* /					*/
     2832 	NRED = 137;
     2833 	go to RD_TEST_REDUCTION;			/* / spec_found \                      		*/
     2834 
     2835 RD_ACTION(134):					/* /					*/
     2836 	NRED = 137;
     2837 	go to RD_TEST_REDUCTION;			/* / spec_found \                      		*/
     2838 
     2839 RD_ACTION(135):					/* /					*/
     2840 	NRED = 137;
     2841 	go to RD_TEST_REDUCTION;			/* / spec_found \                      		*/
     2842 
     2843 RD_ACTION(136):					/* /					*/
     2844 	go to RD_STACK_POP;				/* / STACK_POP	\			*/
     2845 
     2846 RD_ACTION(137):					/* /					*/
     2847 	call 					     output ( " " );
     2848 	call 					     output ( token_value );
     2849 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     2850 	call 					     output ( token_value );
     2851 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     2852 	STACK_DEPTH = max(STACK_DEPTH-1,0);		/*   POP					*/
     2853 	go to RD_STACK_POP;				/* / STACK_POP	\			*/
     2854 
     2855 RD_ACTION(138):					/* /					*/
     2856 	call					     next_reduction();
     2857 	call					     reduction_end();
     2858 	Ptoken, Pthis_token = Pthis_token -> token.Pnext;	/*   LEX					*/
     2859 	NRED = 24;
     2860 	go to RD_TEST_REDUCTION;			/* / label \                           		*/
     2861 
     2862 RD_ACTION(139):					/* /					*/
     2863 	call					     terminal_reduction();
     2864 	call					     reduction_end();
     2865 	call 					     LEX ( 2 );
     2866 	NRED = 24;
     2867 	go to RD_TEST_REDUCTION;			/* / label \                           		*/
     2868 
     2869 RD_ACTION(140):					/* /					*/
     2870 	call					     stacked_reduction();
     2871 	call					     reduction_end();
     2872 	call 					     LEX ( 2 );
     2873 	NRED = 24;
     2874 	go to RD_TEST_REDUCTION;			/* / label \                           		*/
     2875 
     2876 RD_ACTION(141):					/* /					*/
     2877 	call					     stacked_reduction_pop();
     2878 	call					     reduction_end();
     2879 	call 					     LEX ( 2 );
     2880 	NRED = 24;
     2881 	go to RD_TEST_REDUCTION;			/* / label \                           		*/
     2882 
     2883 RD_ACTION(142):					/* /					*/
     2884 	call					     specified_label();
     2885 	call					     reduction_end();
     2886 	call 					     LEX ( 2 );
     2887 	NRED = 24;
     2888 	go to RD_TEST_REDUCTION;			/* / label \                           		*/
     2889 
     2890 RD_ACTION(143):					/* /					*/
     2891 	call					     specified_label();
     2892 	call					     reduction_end();
     2893 	call 					     ERROR ( 16 );
     2894 	call					     NEXT_STMT();
     2895 	NRED = 24;
     2896 	go to RD_TEST_REDUCTION;			/* / label \                           		*/
     2897 
     2898 RD_ACTION(144):					/* /					*/
     2899 	call					     next_reduction();
     2900 	call					     reduction_end();
     2901 	call 					     ERROR ( 4 );
     2902 	call					     NEXT_STMT();
     2903 	NRED = 24;
     2904 	go to RD_TEST_REDUCTION;			/* / label \                           		*/
     2905 
     2906 RD_ACTION(145):					/* /					*/
     2907 	call					     next_reduction();
     2908 	call					     reduction_end();
     2909 	call 					     ERROR ( 15 );
     2910 	call					     NEXT_STMT();
     2911 	NRED = 24;
     2912 	go to RD_TEST_REDUCTION;			/* / label \                           		*/
     2913 
     2914 RD_ACTION(146):					/* /					*/
     2915 	call 					     ERROR ( 5 );
     2916 	NRED = 147;
     2917 	go to RD_TEST_REDUCTION;			/* / stop \                            		*/
     2918 
     2919 RD_ACTION(147):					/* /					*/
     2920 	call					     reductions_end();
     2921 	return;					/* / RETURN	\			*/
     2922 
     2923 RD_ACTION(148):					/* /					*/
     2924 	call					     reductions_end();
     2925 	call 					     ERROR ( 6 );
     2926 	return;					/* / RETURN	\			*/
     2927 
     2928 
     2929 	end SEMANTIC_ANALYSIS;
     2930 
     2931 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     2932 
     2933      dcl	SPDL			bit(1) aligned init ("0"b);
     2934 						/* off: This compiler parses a non-PUSH DOWN	*/
     2935 						/*      LANGUAGE.				*/
     2936 	/* START OF:	rdc_lex_.incl.pl1			  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
  5     2 
  5     3 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  5     4 	/*									*/
  5     5 	/* N__a_m_e:  rdc_lex_.incl.pl1							*/
  5     6 	/*									*/
  5     7 	/*      This include segment is used by compilers generated by the reduction_compiler.	*/
  5     8 	/* It contains the LEX subroutine which is used to manipulate the pointer to the	*/
  5     9 	/* "current" token, Pthis_token.						*/
  5    10 	/*									*/
  5    11 	/* E__n_t_r_y:  LEX								*/
  5    12 	/*									*/
  5    13 	/*      This entry makes the |_nth|-next (or -preceding) token the "current" token, where	*/
  5    14 	/* _n is its positive (or negative) input argument.				*/
  5    15 	/*									*/
  5    16 	/* U__s_a_g_e									*/
  5    17 	/*									*/
  5    18 	/*      call LEX(n);							*/
  5    19 	/*									*/
  5    20 	/* 1) n   is the number of the token to be made the "current" token, relative to the	*/
  5    21 	/*        token identified by Pthis_token (the present "current" token).  If n is	*/
  5    22 	/*        positive, the nth token following the "current" token made "current".  If n	*/
  5    23 	/*        is negative, the nth token preceding the "current" token is made "current".	*/
  5    24 	/*									*/
  5    25 	/* S__t_a_t_u_s									*/
  5    26 	/*									*/
  5    27 	/* 0) Created by:  G. C. Dixon  in  February, 1975				*/
  5    28 	/*									*/
  5    29 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  5    30 
  5    31 LEX:	procedure (n);
  5    32 
  5    33      dcl	n			fixed bin,
  5    34 	i			fixed bin;
  5    35 
  5    36 	Ptoken = Pthis_token;			/* do everything relative to "current" token.	*/
  5    37 	if Ptoken = null then return;			/* can't lex if token list exhausted.		*/
  5    38 	if n >= 0 then do;				/* new "current" token will follow present one.	*/
  5    39 	     do i = 1 to n while (token.Pnext ^= null);	/* find new "current" token, taking care not to	*/
  5    40 		Ptoken = token.Pnext;		/*   run off end of token list.		*/
  5    41 		end;
  5    42 	     if ^SPDL then if i <= n then Ptoken = null;	/* if not in 'PUSH DOWN LANGUAGE' mode, allow	*/
  5    43 						/*   running off end of token list.		*/
  5    44 	     end;
  5    45 	else					/* new "current" token precedes present one.	*/
  5    46 	     do i = -1 to n by -1 while (token.Plast ^= null);
  5    47 		Ptoken = token.Plast;
  5    48 		end;
  5    49 	Pthis_token = Ptoken;			/* simple wasn't it.			*/
  5    50 
  5    51 	end LEX;
  5    52 
  5    53 /* END OF:	rdc_lex_.incl.pl1			  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     2936 
     2937 
     2938 		/* START OF:	rdc_error_.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
  6     2 
  6     3      dcl	MERROR_SEVERITY		fixed bin init (0),	/* Severity of highest-severity error.		*/
  6     4 	SERROR_CONTROL		bit(2) init ("00"b),/* Global switches control error message format.	*/
  6     5 	SERROR_PRINTED (dimension (error_control_table,1))
  6     6 				bit(1) unaligned init ((dimension (error_control_table,1))(1)"0"b),
  6     7 						/* Array bit is on if corresponding error message	*/
  6     8 						/* in error_control_table has already been printed*/
  6     9 	MIN_PRINT_SEVERITY		fixed bin init (0), /* Mimimum severity message that will be printed	*/
  6    10 	PRINT_SEVERITY_CONTROL	bit(2) init ("11"b);/* Action if severity < MIN_PRINT_SEVERITY	*/
  6    11 
  6    12 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  6    13 	/*									*/
  6    14 	/* N__a_m_e:  rdc_error_.incl.pl1							*/
  6    15 	/*									*/
  6    16 	/*      This include segment is used by compilers generated by the reduction_compiler.	*/
  6    17 	/* It defines a procedure which the compilers can use to print error messages.  	*/
  6    18 	/*									*/
  6    19 	/* E__n_t_r_y:  ERROR								*/
  6    20 	/*									*/
  6    21 	/*      Given an error number, this procedure prints a corresponding error message.	*/
  6    22 	/* The message is stored in a compiler-defined error_control_table, along with an integer	*/
  6    23 	/* which specifies the severity level of the error, and a switch which specifies whether	*/
  6    24 	/* the source statement in which the error occurred (if any) should be printed after the	*/
  6    25 	/* error message.  The printing of the error message may be supressed for all messages	*/
  6    26 	/* having a severity less than a specified (MIN_PRINT_SEVERITY) value.  The ERROR	*/
  6    27 	/*  procedure calls the lex_error_ subroutine to perform the formatting and printing of	*/
  6    28 	/*  the error message.							*/
  6    29 	/*									*/
  6    30 	/* U__s_a_g_e									*/
  6    31 	/*									*/
  6    32 	/*      call ERROR (error_number);						*/
  6    33 	/*									*/
  6    34 	/* 1) error_number	is the index of one of the structures in the error_control_table	*/
  6    35 	/*		which defines the error message to be printed.			*/
  6    36 	/*									*/
  6    37 	/* N__o_t_e_s									*/
  6    38 	/*									*/
  6    39 	/*      The format of the error_control_table is shown below.			*/
  6    40 	/*									*/
  6    41 	/*   dcl	1 error_control_table (2)	aligned internal static,			*/
  6    42 	/*	  2 severity		fixed bin(17) unaligned init (2,3),		*/
  6    43 	/*	  2 Soutput_stmt		bit(1) unaligned initial ("0"b,"1"b),		*/
  6    44 	/*	  2 message		char(252) varying initial (			*/
  6    45 	/*		"The reduction source segment does not contain any reductions.",	*/
  6    46 	/*		"Reduction label  '^a'  is invalid."),				*/
  6    47 	/*	  2 brief_message		char(100) varying initial (			*/
  6    48 	/*		"", "'^a'");						*/
  6    49 	/*									*/
  6    50 	/* error_control_table is an array of structures, with one array element per error.	*/
  6    51 	/* Each structure contains: a severity level for the error; a switch which specifies	*/
  6    52 	/* whether the source statement being processed should be output after the error message;	*/
  6    53 	/* the long form of the error message text;  and the brief form of the error message text.*/
  6    54 	/* The dimension of the error_control_table array of structures, and the lengths of	*/
  6    55 	/* message (long message) and brief_message (brief message), are compiler-defined.	*/
  6    56 	/* structures and the lengths of the message and brief_message are compiler-defined.	*/
  6    57 	/* The only requirement is that the messages be 256 characters or less in length.	*/
  6    58 	/* (Remember that the longest character string which can be used in an initial attribute	*/
  6    59 	/* is 254 characters in length.)						*/
  6    60 	/*									*/
  6    61 	/*      The severity number causes the error message to be preceded by a herald which	*/
  6    62 	/* includes one of the following prefixes:					*/
  6    63 	/*									*/
  6    64 	/*       _s_e_v  _p_r_e_f_i_x 		  _e_x_p_l_a_n_a_t_i_o_n				*/
  6    65 	/*	0 = COMMENT		- this is a comment.			*/
  6    66 	/*	1 = WARNING		- a possible error has been detected.  The	*/
  6    67 	/*				  compiler will still generate an object segment.	*/
  6    68 	/*	2 = ERROR			- a probable error has been detected.  The	*/
  6    69 	/*				  compiler will still generate an object segment.	*/
  6    70 	/*	3 = FATAL ERROR		- an error has been detected which is so severe 	*/
  6    71 	/*				  that no object segment will be generated.	*/
  6    72 	/*	4 = TRANSLATOR ERROR	- an error has been detected in the operation of	*/
  6    73 	/*				  the compiler or translator.  No object segment	*/
  6    74 	/*				  will be generated.			*/
  6    75 	/*									*/
  6    76 	/* Full error messages are of the form:						*/
  6    77 	/*									*/
  6    78 	/*	_p_r_e_f_i_x _e_r_r_o_r__n_u_m_b_e_r, SEVERITY _s_e_v_e_r_i_t_y IN STATEMENT _n OF LINE _m		*/
  6    79 	/*	_t_e_x_t__o_f__e_r_r_o_r__m_e_s_s_a_g_e						*/
  6    80 	/*	SOURCE:								*/
  6    81 	/*	_s_o_u_r_c_e__s_t_a_t_e_m_e_n_t							*/
  6    82 	/*									*/
  6    83 	/* If only one statement appears in line _m, then "STATEMENT _n OF" is omitted.		*/
  6    84 	/* If the source statement has been printed in a previous error message, it is omitted.	*/
  6    85 	/*									*/
  6    86 	/*      The reduction compiler declares a bit string, SERROR_CONTROL, which controls the	*/
  6    87 	/* text of an error message.  The compiler may set this bit string, as shown below.	*/
  6    88 	/*									*/
  6    89 	/*   SERROR_CONTROL		_m_e_a_n_i_n_g						*/
  6    90 	/*	"00"b		the first time a particular error occurs, the long message	*/
  6    91 	/*			is printed; the brief message is used in subsequent	*/
  6    92 	/*			occurrences of that error.				*/
  6    93 	/*        "10"b or "11"b	the long error message is always used.			*/
  6    94 	/*	"01"b		the brief error message is always used.			*/
  6    95 	/* The initial value of SERROR_CONTROL is "00"b.					*/
  6    96 	/*									*/
  6    97 	/*      The reduction_compiler creates a declaration for SERROR_PRINTED, an array	*/
  6    98 	/* of switches (one per error).  The switch corresponding to a particular error is	*/
  6    99 	/* turned on whenever the error message is printed.  This allows lex_error_ to detect	*/
  6   100 	/* subsequent occurrences of that same error.					*/
  6   101 	/*									*/
  6   102 	/*      The reduction_compiler creates MERROR_SEVERITY, a fixed bin(17) integer		*/
  6   103 	/* in which the severity of the highest-severity error encountered is maintained.	*/
  6   104 	/* The compiler may reference this integer.					*/
  6   105 	/*									*/
  6   106 	/*      The reduction_compiler creates MIN_PRINT_SEVERITY, a fixed bin (17) integer	*/
  6   107 	/* which controls the printing of error messages by the ERROR procedure.		*/
  6   108 	/* Errors having a severity less than MIN_PRINT_SEVERITY will not cause lex_error_ to be	*/
  6   109 	/* and no error will be printed.  The behaviour of the ERROR procedure for such errors	*/
  6   110 	/* is controlled by the value of PRINT_SEVERITY_CONTROL, described below.		*/
  6   111 	/* The compiler may set the value of MIN_PRINT_SEVERITY; its initial value is 0.	*/
  6   112 
  6   113 	/*									*/
  6   114 	/*      The reduction_compiler declares a bit string, PRINT_SEVERITY_CONTROL, which 	*/
  6   115 	/* controls the updating of MERROR_SEVERITY and SERROR_PRINTED when the severity of an	*/
  6   116 	/* error is less than MIN_PRINT_SEVERITY.  In such cases, the lex_error_ procedure is not	*/
  6   117 	/* invoked, and the ERROR procedure must update these values as though lex_error_ were	*/
  6   118 	/* called.  The compiler may set this bit string, as shown below.			*/
  6   119 	/*									*/
  6   120 	/* PRINT_SEVERITY_CONTROL	_m_e_a_n_i_n_g						*/
  6   121 	/*	"00"b		update neither SERROR_PRINTED nor MERROR_SEVERITY.	*/
  6   122 	/*	"01"b		update SERROR_PRINTED to reflect the error.		*/
  6   123 	/*	"10"b		update MERROR_SEVERITY to reflect the error severity.	*/
  6   124 	/*	"11"b		update SERROR_PRINTED and MERROR_SEVERITY appropriately.	*/
  6   125 	/*The initial value of PRINT_SEVERITY_CONTROL is "11"b.				*/
  6   126 	/*									*/
  6   127 	/*      The ERROR procedure is simple to use, but it does limit the flexibility of the	*/
  6   128 	/* error message.  A compiler action routine can output more flexible error messages	*/
  6   129 	/* by calling lex_error_ directly.  See lex_error_ documentation for more details.	*/
  6   130 	/*									*/
  6   131 	/* S__t_a_t_u_s									*/
  6   132 	/*									*/
  6   133 	/* 0) Created:  April, 1974 by G. C. Dixon					*/
  6   134 	/* 1) Modified: April, 1982 by E. N. Kittlitz.  Added MIN_PRINT_SEVERITY, 		*/
  6   135 	/*		PRINT_SEVERITY_CONTROL.					*/
  6   136 	/*									*/
  6   137 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  6   138 
  6   139 ERROR:	procedure (Nerror);
  6   140 
  6   141      dcl	Nerror			fixed bin;	/* Number of the error which was detected. (In)	*/
  6   142 
  6   143      dcl	Pstmt			ptr,
  6   144 	1 erring_token		aligned based (Perring_token) like token,
  6   145 	Perring_token		ptr,
  6   146 	erring_token_value		char(erring_token.Lvalue) based (erring_token.Pvalue);
  6   147 
  6   148      dcl 	(max, null)		builtin;
  6   149 
  6   150      dcl	lex_error_		entry options (variable);
  6   151 
  6   152 
  6   153 	if error_control_table.severity(Nerror) < MIN_PRINT_SEVERITY then do; /* don't print		*/
  6   154 	     if PRINT_SEVERITY_CONTROL & "1"b then	/* update MERROR_SEVERITY			*/
  6   155 		MERROR_SEVERITY = max (MERROR_SEVERITY, error_control_table.severity(Nerror));
  6   156 	     if PRINT_SEVERITY_CONTROL & "01"b then	/* update SERROR_PRINTED			*/
  6   157 		SERROR_PRINTED(Nerror) = "1"b;
  6   158 	     return;
  6   159 	end;
  6   160 	Perring_token = Pthis_token;			/* address the current erring_token.		*/
  6   161 	if error_control_table.Soutput_stmt(Nerror) then
  6   162 	     if Perring_token = null then
  6   163 		Pstmt = null;
  6   164 	     else
  6   165 		Pstmt = erring_token.Pstmt;		/* address the statement descriptor.		*/
  6   166 	else
  6   167 	     Pstmt = null;
  6   168 	if Perring_token = null then
  6   169 	     call lex_error_ (Nerror, SERROR_PRINTED(Nerror), (error_control_table.severity(Nerror)),
  6   170 		MERROR_SEVERITY, Pstmt, Perring_token, SERROR_CONTROL, (error_control_table.message(Nerror)),
  6   171 		(error_control_table.brief_message(Nerror)));
  6   172 	else
  6   173 	     call lex_error_ (Nerror, SERROR_PRINTED(Nerror), (error_control_table.severity(Nerror)),
  6   174 		MERROR_SEVERITY, Pstmt, Perring_token, SERROR_CONTROL, (error_control_table.message(Nerror)),
  6   175 		(error_control_table.brief_message(Nerror)), erring_token_value, erring_token_value, erring_token_value);
  6   176 
  6   177 	end ERROR;
  6   178 
  6   179 	/* END OF:	rdc_error_.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     2938 
     2939 
     2940 		/* START OF:	rdc_next_stmt_.incl.pl1	  *  *  *  *  *  *  */
  7     2 
  7     3 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
  7     4 	/*							*/
  7     5 	/* N__a_m_e:  rdc_next_stmt_.incl.pl1				*/
  7     6 	/*							*/
  7     7 	/*      This include segment is used by compilers generated by the	*/
  7     8 	/* reduction_compiler.  It includes a procedure which shifts the	*/
  7     9 	/* compilation process to the next source statement.		*/
  7    10 	/*							*/
  7    11 	/* S__t_a_t_u_s							*/
  7    12 	/*							*/
  7    13 	/* 0) Created:  April, 1974 by G. C. Dixon			*/
  7    14 	/*							*/
  7    15 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
  7    16 
  7    17 
  7    18 NEXT_STMT:	procedure;			/* invoked to begin parsing the next statement of	*/
  7    19 						/* the input tokens.			*/
  7    20 
  7    21      dcl	null			builtin,
  7    22 	Ssearching		bit(1) aligned;
  7    23 
  7    24 	Ptoken = Pthis_token;			/* make sure these pointers are the same.	*/
  7    25 	Pstmt = token.Pstmt;			/* address "current" statement's descriptor.	*/
  7    26 	Ssearching = "1"b;				/* start scanning forward for next statement.	*/
  7    27 	do while (Ssearching & token.Pnext ^= null);
  7    28 	     Ptoken = token.Pnext;
  7    29 	     if token.Pstmt = Pstmt then;
  7    30 	     else Ssearching = "0"b;
  7    31 	     end;
  7    32 	if token.Pstmt = Pstmt then			/* if there is no next statement, and		*/
  7    33 	     if SPDL then				/*   in PUSH DOWN LANGUAGE mode, can't run off	*/
  7    34 		Ptoken = Ptoken;			/*   end of input list.			*/
  7    35 	     else Ptoken, Pthis_token = null;		/*   otherwise, input list exhausted.		*/
  7    36 	else Pthis_token = Ptoken;			/* normally, next statement exists and Ptoken	*/
  7    37 						/*   points to its 1st _n_o_n-__d_e_l_e_t_e_d token.	*/
  7    38 
  7    39 	end NEXT_STMT;
  7    40 
  7    41 	/* END OF:	rdc_next_stmt_.incl.pl1	  *  *  *  *  *  *  */
     2940 
     2941 
     2942 	end reduction_compiler_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    03/17/86  1454.3  reduction_compiler_.pl1           >spec>install>1032>reduction_compiler_.pl1
1834         1    04/18/75  1242.4  rdc_start_.incl.pl1               >ldd>include>rdc_start_.incl.pl1
1-25         2    04/18/75  1242.4  lex_descriptors_.incl.pl1         >ldd>include>lex_descriptors_.incl.pl1
2067         3    03/17/86  1404.9  rdc_end_.incl.pl1                 >spec>install>1032>rdc_end_.incl.pl1
2085         4    04/18/75  1242.4  rdc_stack_fcns_.incl.pl1          >ldd>include>rdc_stack_fcns_.incl.pl1
2936         5    04/18/75  1242.4  rdc_lex_.incl.pl1                 >ldd>include>rdc_lex_.incl.pl1
2938         6    08/15/83  1511.7  rdc_error_.incl.pl1               >ldd>include>rdc_error_.incl.pl1
2940         7    04/18/75  1242.4  rdc_next_stmt_.incl.pl1           >ldd>include>rdc_next_stmt_.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
ALobj                                  parameter       fixed bin(21,0)          dcl 386 set ref 383 778* 1229 1261 1266 1575 1581
                                                                                  1617* 1617
APobj                                  parameter       pointer                  dcl 386 ref 383 1228 1260 1265 1574 1580
Acode                                  parameter       fixed bin(35,0)          dcl 386 set ref 383 743* 755* 771* 779 779*
Aname_source                           parameter       char(32)                 unaligned dcl 386 set ref 383 1587* 1611*
BACKSPACE                       025122 constant        char(1)                  initial dcl 1-99 ref 3-113
CODE                            024021 automatic       fixed bin(35,0)          dcl 1-33 set ref 3-106* 3-107
DIRECTION                       024024 automatic       fixed bin(17,0)          initial dcl 1836 set ref 3-62 1836*
FORM                                   based           fixed bin(17,0)          level 2 packed unaligned dcl 1-48 ref 3-65 3-70
                                                                                  3-123
HT                              025161 constant        char(1)                  initial unaligned dcl 558 ref 1009 1022
HT_SP                                  constant        char(2)                  initial unaligned dcl 558 ref 1006 1018
I                               024022 automatic       fixed bin(17,0)          dcl 1-33 in procedure "SEMANTIC_ANALYSIS" set ref
                                                                                  3-62* 3-63 3-79*
I                                      based           fixed bin(17,0)          level 2 in structure "TOKEN_REQD_STRING" packed
                                                                                  unaligned dcl 1-48 in procedure
                                                                                  "SEMANTIC_ANALYSIS" ref 3-126
IFIRST                                 based           fixed bin(17,0)          level 3 packed unaligned dcl 1-48 ref 3-62 3-73 3-79
                                                                                  3-79
ILAST                     0(18)        based           fixed bin(17,0)          level 3 packed unaligned dcl 1-48 ref 3-62 3-73 3-79
Iend                                   parameter       fixed bin(21,0)          dcl 1112 ref 1109 1120
Ifirst                    2            based           fixed bin(17,0)          array level 3 packed unaligned dcl 499 set ref 1164*
                                                                                  1180 1183 1184 1185 1188 1189 1189 1197 1198* 1315
                                                                                  1318 1329
Ilast                     2(18)        based           fixed bin(17,0)          array level 3 packed unaligned dcl 499 set ref 864*
                                                                                  864 1165* 1180 1188 1199* 1314 1319 1329 2544*
Iquote                          000100 automatic       fixed bin(21,0)          dcl 1064 set ref 1075* 1076 1077 1077 1079 1080
                                                                                  1081*
Ired_end                        000101 automatic       fixed bin(21,0)          dcl 403 set ref 752* 753 753 759* 759 765
Ired_start                      000100 automatic       fixed bin(21,0)          dcl 403 set ref 751* 753 753 758* 758 765 765
Isearch                         000100 automatic       fixed bin(17,0)          dcl 1002 set ref 1017* 1018* 1018 1018 1019 1021*
                                                                                  1021 1022 1022 1022 1025 1025 1025
L                         0(18)        based           fixed bin(17,0)          level 2 packed unaligned dcl 1-48 ref 3-127
LTOKEN_REQD_VALUE               024010 automatic       fixed bin(18,0)          dcl 1-33 set ref 3-127* 3-128
Llongest_red                    000102 automatic       fixed bin(17,0)          dcl 403 set ref 940* 940 1222* 1222 1557* 1558* 1558
                                                                                  1563 1563 1568 1568 1634*
Lobj                            000103 automatic       fixed bin(21,0)          dcl 403 set ref 1041 1045 1046 1047* 1047 1134 1139
                                                                                  1140 1141* 1141 1229* 1261 1266* 1575 1581* 1617
Lobj_part                       000104 automatic       fixed bin(21,0)          initial dcl 403 set ref 403* 1048* 1048 1142* 1142
                                                                                  1328* 1359 1678* 1681 1773* 1776
Lobj_spaces                     000105 automatic       fixed bin(17,0)          dcl 403 set ref 1359* 1360 1360 1681* 1682 1682
                                                                                  1776* 1777 1777
Lobj_string                     000106 automatic       fixed bin(17,0)          dcl 403 set ref 879 880* 889 951* 951 1221 1221
                                                                                  1635*
Lobj_string_part                000107 automatic       fixed bin(21,0)          dcl 403 set ref 1332* 1333 1333 1335 1335 1435* 1439
                                                                                  1439 1445* 1446 1446
Lpart                           000101 automatic       fixed bin(21,0)          dcl 1064 set ref 1074* 1075 1079 1080* 1080 1081
                                                                                  1083 1083 1083
Lsource                                parameter       fixed bin(21,0)          dcl 386 ref 383 751 752 1119 1607 1607
Lsource_part                    023606 automatic       fixed bin(21,0)          dcl 1115 set ref 1120* 1121 1121
Ltemp                           000110 automatic       fixed bin(21,0)          dcl 403 set ref 1261* 1262 1264 1575* 1576 1578
Ltemp_obj                       000111 automatic       fixed bin(21,0)          dcl 403 set ref 1262* 1263 1263 1263 1263 1264 1505
                                                                                  1505 1576* 1577 1577 1577 1577 1578 1609 1609
Lvalue                    4            based           fixed bin(18,0)          level 2 in structure "stmt" dcl 2-40 in procedure
                                                                                  "reduction_compiler_" ref 940 1563 1563 1563 1563
                                                                                  1568 1568 1568 1568 1602 1602 1603 1603 1604 1604
Lvalue                    4            based           fixed bin(18,0)          level 2 in structure "erring_token" dcl 6-143
                                                                                  in procedure "ERROR" ref 6-172 6-172 6-172 6-172
                                                                                  6-172 6-172
Lvalue                    4            based           fixed bin(18,0)          level 2 in structure "token" dcl 2-68 in procedure
                                                                                  "reduction_compiler_" ref 858 858 868 872 879 880
                                                                                  880 887 889 903 911 911 919 951 1676 1676 1676
                                                                                  1676 1679 1679 1697 1697 1710 1710 1743 1750 1750
                                                                                  1756 1770 1770 1770 1770 1774 1774 3-92 3-92 3-92
                                                                                  3-92 3-106 3-106 3-113 3-113 3-128 2620 2620 2622
                                                                                  2622 2631 2631 2667 2667 2707 2707 2719 2719 2721
                                                                                  2721 2740 2740 2742 2742 2749 2749 2787 2787 2795
                                                                                  2795 2848 2848 2850 2850
M                         1            based           fixed bin(17,0)          level 2 in structure "obj_red" dcl 499 in procedure
                                                                                  "reduction_compiler_" set ref 1155 1157* 1217*
M                         1            based           fixed bin(17,0)          level 2 in structure "obj_token" dcl 499
                                                                                  in procedure "reduction_compiler_" set ref 857
                                                                                  858* 1219*
MERROR_SEVERITY                 023503 automatic       fixed bin(17,0)          initial dcl 6-3 set ref 776 6-3* 858* 880* 911* 934*
                                                                                  1157* 1254 1723* 1750* 6-154* 6-154 6-168* 6-172*
MIN_PRINT_SEVERITY              023505 automatic       fixed bin(17,0)          initial dcl 6-3 set ref 6-3* 6-153
MMstack_depth                   005304 constant        fixed bin(17,0)          initial dcl 558 set ref 1722 1723* 1723* 1726
Mreductions                     005304 constant        fixed bin(17,0)          initial dcl 558 set ref 930 931 934*
Mseverity                              parameter       fixed bin(35,0)          dcl 386 set ref 383 776* 777
Mstack_depth                    000112 automatic       fixed bin(17,0)          dcl 403 set ref 1289* 1631* 1721* 1722 1722 1726*
Mtokens                                constant        fixed bin(17,0)          initial dcl 558 ref 947 951
N                                      parameter       fixed bin(17,0)          dcl 945 in procedure "count_reduction" ref 943 950
N                               000214 automatic       fixed bin(17,0)          level 2 in structure "obj_label" dcl 403
                                                                                  in procedure "reduction_compiler_" set ref 968 971
                                                                                  1636* 1743 1745 1755*
N                               021665 automatic       fixed bin(17,0)          level 2 in structure "obj_token_fcn" dcl 403
                                                                                  in procedure "reduction_compiler_" set ref 903 905
                                                                                  918* 1227* 1453 1458
N                               023750 automatic       fixed bin(17,0)          dcl 1741 in procedure "set_label" set ref 1743*
                                                                                  1743* 1745 1749 1755 1756 1757
N                                      based           fixed bin(17,0)          level 2 in structure "obj_token" dcl 499
                                                                                  in procedure "reduction_compiler_" set ref 856
                                                                                  863* 1164 1165 1197* 1225* 1367* 1402 1402 1404
                                                                                  1407 1413
N                                      parameter       fixed bin(17,0)          dcl 4-38 in procedure "PUSH" set ref 4-36 4-60* 4-68
N                                      based           fixed bin(17,0)          level 2 in structure "obj_red" dcl 499 in procedure
                                                                                  "reduction_compiler_" set ref 1154 1175* 1224*
                                                                                  1256 1299* 1308 1308 1312 1321
NL                                     defined         char(1)                  unaligned dcl 497 set ref 1019 2684 2807*
NP                              005303 constant        char(2)                  initial unaligned dcl 558 set ref 1019 1019 1268*
                                                                                  1281* 1365* 1450* 1499* 1504* 1507* 1518* 1533*
                                                                                  1537* 1541* 1547* 1553* 1597* 2684 2684 2807 2807
NRED                            024011 automatic       fixed bin(17,0)          dcl 1-33 set ref 3-52* 3-55* 3-55 3-58 2083 4-18*
                                                                                  4-26* 2090* 2095* 2100* 2107* 2113* 2119* 2125*
                                                                                  2131* 2137* 2143* 2149* 2154* 2160* 2166* 2172*
                                                                                  2178* 2184* 2190* 2196* 2202* 2207* 2213* 2218*
                                                                                  2224* 2229* 2234* 2239* 2242* 2246* 2250* 2254*
                                                                                  2261* 2267* 2273* 2279* 2285* 2291* 2297* 2303*
                                                                                  2309* 2315* 2322* 2328* 2334* 2340* 2346* 2352*
                                                                                  2358* 2365* 2371* 2377* 2382* 2387* 2395* 2403*
                                                                                  2411* 2416* 2422* 2427* 2434* 2439* 2445* 2452*
                                                                                  2457* 2460* 2466* 2473* 2481* 2489* 2495* 2501*
                                                                                  2507* 2513* 2518* 2523* 2530* 2536* 2541* 2548*
                                                                                  2551* 2555* 2559* 2563* 2567* 2571* 2575* 2579*
                                                                                  2583* 2587* 2591* 2595* 2601* 2609* 2626* 2634*
                                                                                  2642* 2645* 2649* 2653* 2657* 2661* 2676* 2681*
                                                                                  2687* 2692* 2698* 2709* 2714* 2723* 2726* 2730*
                                                                                  2734* 2744* 2758* 2769* 2774* 2780* 2790* 2797*
                                                                                  2802* 2808* 2811* 2815* 2819* 2823* 2827* 2831*
                                                                                  2835* 2839* 2859* 2866* 2873* 2880* 2887* 2895*
                                                                                  2903* 2911* 2916* 4-60*
NUMBER                          024023 automatic       fixed bin(35,0)          dcl 1-33 set ref 3-106* 3-108
Nchar                           000114 automatic       picture(5)               dcl 403 set ref 1099* 1100 1100 1314* 1315* 1316
                                                                                  1318* 1319* 1320 1325* 1326 1408* 1409 1411* 1412
Nerror                                 parameter       fixed bin(17,0)          dcl 6-141 set ref 6-139 6-153 6-154 6-156 6-161
                                                                                  6-168* 6-168 6-168 6-168 6-168 6-172* 6-172 6-172
                                                                                  6-172 6-172
Nobj_red                        000116 automatic       fixed bin(17,0)          dcl 403 set ref 827* 864 864 1154* 1155 1164 1165
                                                                                  1175 1180 1180 1183 1184 1185 1188 1188 1189 1189
                                                                                  1197 1198 1199 2544
Nobj_token                      000117 automatic       fixed bin(17,0)          dcl 403 set ref 856* 857 863 871 872 873 886 887 888
                                                                                  893 899 902 906 917
Nobj_token_fcn                  000120 automatic       fixed bin(17,0)          dcl 403 set ref 903* 903* 905 906 910 917 918 919
Nreductions                     000121 automatic       fixed bin(17,0)          dcl 403 set ref 929* 929 930 931* 1216 1216 1217
                                                                                  1222 1555* 1558 1564 1601 1632* 1757
Ntokens                         000122 automatic       fixed bin(17,0)          dcl 403 set ref 947* 947 1218 1218 1219 1220 1220
                                                                                  1226 1633*
Nvalue                   10            based           fixed bin(35,0)          level 3 packed unaligned dcl 2-68 set ref 1721 3-101
                                                                                  3-108*
Osc_start                       000123 automatic       fixed bin(21,0)          dcl 403 set ref 1600* 1602* 1604* 1607*
Ostart                                 parameter       fixed bin(21,0)          dcl 1112 ref 1109 1119 1120
PRED                            024012 automatic       pointer                  dcl 1-33 set ref 3-58* 3-62 3-62 3-73 3-73 3-79 3-79
                                                                                  3-79
PRINT_SEVERITY_CONTROL          023506 automatic       bit(2)                   initial unaligned dcl 6-3 set ref 6-3* 6-154 6-156
PTOKEN_REQD                     024014 automatic       pointer                  dcl 1-33 set ref 3-63* 3-65 3-65 3-70 3-71 3-123
                                                                                  3-126 3-127 2070
PTOKEN_REQD_VALUE               024016 automatic       pointer                  dcl 1-33 set ref 3-126* 3-128
Perring_token                   000102 automatic       pointer                  dcl 6-143 set ref 6-160* 6-161 6-164 6-168 6-168*
                                                                                  6-172* 6-172 6-172 6-172 6-172 6-172 6-172 6-172
                                                                                  6-172 6-172
Plast                     2            based           pointer                  level 2 packed unaligned dcl 2-68 ref 5-45 5-47
Pnext                     1            based           pointer                  level 2 in structure "token" packed unaligned
                                                                                  dcl 2-68 in procedure "reduction_compiler_" ref
                                                                                  952 3-79 2079 2103 2165 2171 2177 2189 2212 2223
                                                                                  2227 2232 2237 2266 2276 2361 2368 2376 2385 2421
                                                                                  2432 2444 2471 2494 2500 2506 2512 2535 2606 2621
                                                                                  2668 2675 2679 2686 2708 2720 2722 2741 2743 2750
                                                                                  2757 2764 2789 2796 2849 2851 2858 5-39 5-40 7-27
                                                                                  7-28
Pnext                     1            based           pointer                  level 2 in structure "stmt" packed unaligned
                                                                                  dcl 2-40 in procedure "reduction_compiler_" ref
                                                                                  1567 1605
Pobj                            000124 automatic       pointer                  dcl 403 set ref 1045 1046* 1046 1139 1140* 1140
                                                                                  1228* 1265* 1580*
Pobj_red                        000126 automatic       pointer                  dcl 403 set ref 864 864 1154 1155 1157 1164 1165
                                                                                  1175 1180 1180 1183 1184 1185 1188 1188 1189 1189
                                                                                  1197 1198 1199 1216* 1216 1216 1217 1224 1256 1299
                                                                                  1308 1308 1312 1314 1315 1318 1319 1321 1329 1329
                                                                                  2544
Pobj_spaces                     000130 automatic       pointer                  dcl 403 set ref 749* 1360 1682 1777
Pobj_string                     000132 automatic       pointer                  dcl 403 set ref 868 879 886 889 889 1221* 1221 1221
                                                                                  1331 1422 1430 1438 1444 1445
Pobj_string_part                000134 automatic       pointer                  dcl 403 set ref 1331* 1333 1335 1438* 1439 1444*
                                                                                  1446
Pobj_token                      000136 automatic       pointer                  dcl 403 set ref 856 857 858 863 871 872 886 887 893
                                                                                  899 902 906 917 1164 1165 1183 1184 1186 1186 1189
                                                                                  1189 1189 1189 1197 1218* 1218 1218 1219 1225 1330
                                                                                  1331 1332 1338 1339 1355 1367 1402 1402 1404 1407
                                                                                  1408 1411 1413
Pobj_token_quoted               000140 automatic       pointer                  dcl 403 set ref 873 888 1220* 1220 1220 1226 1333
Ppart                           000102 automatic       pointer                  dcl 1064 set ref 1073* 1075 1077 1079* 1079 1081
                                                                                  1083
Psave                           000142 automatic       pointer                  dcl 403 set ref 1562 1599 2098* 2183
Psegment                               parameter       pointer                  dcl 386 set ref 383 765* 1216* 1218* 1220* 1221*
                                                                                  1263* 1577*
Psource                                parameter       pointer                  dcl 386 set ref 383 751 752 765* 1119 1607 1607
Psource_part                    023610 automatic       pointer                  dcl 1115 set ref 1119* 1121
Pstmt                           000100 automatic       pointer                  dcl 6-143 in procedure "ERROR" set ref 6-161* 6-164*
                                                                                  6-166* 6-168* 6-172*
Pstmt                     5            based           pointer                  level 2 in structure "erring_token" packed unaligned
                                                                                  dcl 6-143 in procedure "ERROR" ref 6-164
Pstmt                           023476 automatic       pointer                  dcl 2-40 in procedure "reduction_compiler_" set ref
                                                                                  750* 933* 934 934 939* 940 940 1156* 1157* 1157
                                                                                  1157 1157 1157 1562* 1563 1563 1563 1563 1563 1563
                                                                                  1563 1563 1567* 1567 1568 1568 1568 1568 1568 1568
                                                                                  1568 1568 1599* 1602 1602 1602 1602 1603 1603 1603
                                                                                  1604 1604 1604 1604 1605* 1605 7-25* 7-29 7-32
Pstmt                     5            based           pointer                  level 2 in structure "token" packed unaligned
                                                                                  dcl 2-68 in procedure "reduction_compiler_" ref
                                                                                  858 858 880 880 911 911 933 934 934 939 1156 1562
                                                                                  1599 1723 1723 1750 1750 7-25 7-29 7-32
Ptemp                           000144 automatic       pointer                  dcl 403 set ref 1260* 1264 1574* 1578
Ptemp_obj                       000146 automatic       pointer                  dcl 403 set ref 1263* 1263 1263 1264 1505 1577* 1577
                                                                                  1577 1578 1609
Pthis_token                     023474 automatic       pointer                  dcl 1-23 set ref 750* 774* 932 3-60 2082 2098 2103
                                                                                  2103* 2165 2165* 2171 2171* 2177 2177* 2183* 2189
                                                                                  2189* 2212 2212* 2223 2223* 2227 2227* 2232 2232*
                                                                                  2237 2237* 2266 2266* 2276 2276* 2361 2361* 2368
                                                                                  2368* 2376 2376* 2385 2385* 2421 2421* 2432 2432*
                                                                                  2444 2444* 2471 2471* 2494 2494* 2500 2500* 2506
                                                                                  2506* 2512 2512* 2535 2535* 2606 2606* 2621 2621*
                                                                                  2668 2668* 2675 2675* 2679 2679* 2686 2686* 2708
                                                                                  2708* 2720 2720* 2722 2722* 2741 2741* 2743 2743*
                                                                                  2750 2750* 2757 2757* 2764 2764* 2789 2789* 2796
                                                                                  2796* 2849 2849* 2851 2851* 2858 2858* 5-36 5-49*
                                                                                  6-160 7-24 7-35* 7-36*
Ptoken                          023500 automatic       pointer                  dcl 2-68 set ref 765* 770 774 858 858 858* 858 858
                                                                                  858 868 868 872 873 879 880 880 880* 880 880 880
                                                                                  887 888 889 889 903 903 911 911 911* 911 911 911
                                                                                  919 919 932* 933 934 934 934* 939 951 952* 952
                                                                                  1156 1157* 1676 1676 1676 1676 1676 1676 1679 1679
                                                                                  1679 1697 1697 1697 1710 1710 1710 1721 1723 1723
                                                                                  1723* 1743 1743 1750 1750 1750* 1750 1750 1750
                                                                                  1756 1756 1770 1770 1770 1770 1770 1770 1774 1774
                                                                                  1774 3-60* 3-64 3-73 3-79 3-86 3-92 3-92 3-92 3-92
                                                                                  3-92 3-92 3-92 3-101 3-104 3-106 3-106 3-106 3-108
                                                                                  3-113 3-113 3-113 3-113 3-118 3-124 3-128 3-128
                                                                                  2079* 2079 2082* 2103* 2165* 2171* 2177* 2189*
                                                                                  2212* 2223* 2227* 2232* 2237* 2266* 2276* 2361*
                                                                                  2368* 2376* 2385* 2421* 2432* 2444* 2471* 2494*
                                                                                  2500* 2506* 2512* 2535* 2606* 2620 2620 2620 2621*
                                                                                  2622 2622 2622 2631 2631 2631 2667 2667 2667 2668*
                                                                                  2675* 2679* 2686* 2707 2707 2707 2708* 2719 2719
                                                                                  2719 2720* 2721 2721 2721 2722* 2740 2740 2740
                                                                                  2741* 2742 2742 2742 2743* 2749 2749 2749 2750*
                                                                                  2757* 2764* 2787 2787 2787 2789* 2795 2795 2795
                                                                                  2796* 2848 2848 2848 2849* 2850 2850 2850 2851*
                                                                                  2858* 5-36* 5-37 5-39 5-40* 5-40 5-42* 5-45 5-47*
                                                                                  5-47 5-49 7-24* 7-25 7-27 7-28* 7-28 7-29 7-32
                                                                                  7-32* 7-32 7-35* 7-36
Pvalue                    3            based           pointer                  level 2 in structure "token" packed unaligned
                                                                                  dcl 2-68 in procedure "reduction_compiler_" ref
                                                                                  858 868 880 889 903 911 919 1676 1676 1679 1697
                                                                                  1710 1743 1750 1756 1770 1770 1774 3-92 3-92 3-106
                                                                                  3-113 3-128 2620 2622 2631 2667 2707 2719 2721
                                                                                  2740 2742 2749 2787 2795 2848 2850
Pvalue                    3            based           pointer                  level 2 in structure "stmt" packed unaligned
                                                                                  dcl 2-40 in procedure "reduction_compiler_" ref
                                                                                  940 1563 1563 1563 1563 1568 1568 1568 1568 1602
                                                                                  1602 1603 1604 1604
Pvalue                    3            based           pointer                  level 2 in structure "erring_token" packed unaligned
                                                                                  dcl 6-143 in procedure "ERROR" ref 6-172 6-172
                                                                                  6-172
RED                                    based           structure                level 1 dcl 1-48
REDUCTION                              based           structure                array level 1 packed unaligned dcl 1841 set ref 3-58
REDUCTIONS                      005045 constant        fixed bin(17,0)          initial array unaligned dcl 1841 set ref 3-58
S                        11            based           structure                level 3 packed unaligned dcl 2-68
SERROR_CONTROL                  023504 automatic       bit(2)                   initial unaligned dcl 6-3 set ref 744* 6-3* 858*
                                                                                  880* 911* 934* 1157* 1723* 1750* 6-168* 6-172*
SERROR_PRINTED                  023505 automatic       bit(1)                   initial array unaligned dcl 6-3 set ref 6-3* 858*
                                                                                  880* 911* 934* 1157* 1723* 1750* 6-156* 6-168*
                                                                                  6-172*
SPDL                            023502 automatic       bit(1)                   initial dcl 2933 set ref 2933* 3-73 5-42 7-32
STACK                           024025 automatic       fixed bin(17,0)          array dcl 1837 set ref 4-18 4-26 4-59 4-60 4-60
                                                                                  4-68*
STACK_DEPTH                     024051 automatic       fixed bin(17,0)          initial dcl 1837 set ref 4-17 4-18 4-24 4-26 4-27*
                                                                                  4-27 1837* 2701* 2701 2783* 2783 2852* 2852 4-59
                                                                                  4-66* 4-66 4-68
STOKEN_FCN                      024020 automatic       bit(1)                   dcl 1-33 set ref 2072* 2075
S_PDL                           000150 automatic       bit(1)                   dcl 403 set ref 802 1282 1314 1318 1474 1520 1637*
                                                                                  1662 2112*
S_TRACE                         000151 automatic       bit(1)                   dcl 403 set ref 745* 746 748 1222 1487 1506 1552
S_TRACE_ON                      000152 automatic       bit(1)                   dcl 403 set ref 746* 747* 1269
Scontrol                               parameter       bit                      unaligned dcl 386 ref 383 744 745 746
Sinclude_DELETE                 000153 automatic       bit(1)                   dcl 403 set ref 1532 1638* 2118* 2608* 2615* 2641*
Sinclude_DELETE_STMT            000154 automatic       bit(1)                   dcl 403 set ref 1536 1639* 2124* 2472*
Sinclude_ERROR                  000155 automatic       bit(1)                   dcl 403 set ref 1540 1640* 2130* 2479* 2487*
Sinclude_LEX                    000157 automatic       bit(1)                   dcl 403 set ref 1529 1642* 1665* 2142* 2394* 2402*
                                                                                  2410*
Sinclude_NEXT_STMT              000156 automatic       bit(1)                   dcl 403 set ref 1546 1641* 2136* 2433*
Sinclude_STACK                  000160 automatic       bit(1)                   dcl 403 set ref 1287 1498 1643* 1672* 1684* 1795*
                                                                                  1810*
Sinitialization_reqd            000010 internal static bit(1)                   initial dcl 558 set ref 760 763*
Soptimize_possible              000161 automatic       bit(1)                   dcl 403 set ref 877* 1166* 1177
Soutput_stmt              0(18) 000000 constant        bit(1)                   initial array level 2 packed unaligned dcl 558 ref
                                                                                  6-161
Ssearching                      024124 automatic       bit(1)                   dcl 7-21 set ref 7-26* 7-27 7-30*
TOKEN_REQD                             based           structure                level 2 in structure "RED" packed unaligned dcl 1-48
                                                                                  in procedure "SEMANTIC_ANALYSIS"
TOKEN_REQD                             based           structure                level 1 dcl 1-48 in procedure "SEMANTIC_ANALYSIS"
TOKEN_REQD_STRING                      based           structure                level 1 dcl 1-48
TOKEN_REQD_VALUE                       based           char                     unaligned dcl 1-48 ref 3-128
TOKEN_REQUIREMENT                      based           structure                array level 1 packed unaligned dcl 1997 set ref 3-63
TOKEN_REQUIREMENTS              004462 constant        fixed bin(17,0)          initial array unaligned dcl 1997 set ref 3-63
TOKEN_STRINGS                          based           char(159)                dcl 2061 set ref 3-126
TOKEN_STRING_ARRAYS             004400 constant        char(100)                initial array dcl 2061 set ref 3-126
TRACING                         000113 internal static bit(1)                   initial dcl 1831 set ref 748* 3-50* 3-50
TYPE                      0(18)        based           fixed bin(17,0)          level 2 packed unaligned dcl 1-48 ref 3-65 3-71 2070
addcharno                                              builtin function         dcl 475 ref 1119
addr                                                   builtin function         dcl 1-92 in procedure "SEMANTIC_ANALYSIS" ref 3-58
                                                                                  3-58 3-63 3-63 3-126 3-126
addr                                                   builtin function         dcl 475 in procedure "reduction_compiler_" ref 749
                                                                                  1046 1073 1079 1119 1140 1331 1438 1444 1602 1602
                                                                                  1604
addr                                                   builtin function         dcl 4-40 in procedure "PUSH" ref 4-63 4-63
addrel                                                 builtin function         dcl 475 ref 858 858 880 880 911 911 934 934 1723
                                                                                  1723 1750 1750
bit                                                    builtin function         dcl 475 ref 745 746
breaks                          005275 constant        varying char(19)         initial dcl 558 set ref 761* 765*
brief_error                     000114 internal static varying char(4)          initial dcl 4-48 set ref 4-60*
brief_message           101     000000 constant        varying char(64)         initial array level 2 dcl 558 ref 858 880 911 934
                                                                                  1157 1723 1750 6-168 6-172
char                                                   builtin function         dcl 475 ref 1005
charno                                                 builtin function         dcl 475 ref 1602 1602 1604
chars                                  parameter       char                     unaligned dcl 1039 in procedure "output" ref 1036
                                                                                  1041 1045 1045 1046 1047 1048
chars                                  parameter       varying char             dcl 1131 in procedure "output_var" ref 1128 1134
                                                                                  1139 1139 1140 1141 1142
chars                                  parameter       char                     unaligned dcl 1062 in procedure "output_quote" set
                                                                                  ref 1058 1073 1074
clock_                          000224 constant        entry                    external dcl 481 ref 1591 1591
code                            000162 automatic       fixed bin(35,0)          dcl 403 set ref 765* 768 771 1611*
cu_$cl                          000250 constant        entry                    external dcl 4-43 ref 4-62
cv_dec_check_                   000246 constant        entry                    external dcl 1-96 ref 3-106
date                            000163 automatic       char(53)                 unaligned dcl 403 set ref 1591* 1592*
date_time_$format               000226 constant        entry                    external dcl 481 ref 1591
dimension                                              builtin function         dcl 475 in procedure "reduction_compiler_" ref 6-3
                                                                                  6-3 910 911 911 1749 1750 1750
dimension                                              builtin function         dcl 4-40 in procedure "PUSH" ref 4-59 4-60 4-60
divide                                                 builtin function         dcl 475 ref 1430
erring_token                           based           structure                level 1 dcl 6-143
erring_token_value                     based           char                     unaligned dcl 6-143 set ref 6-172* 6-172* 6-172*
error_control_table             000000 constant        structure                array level 1 dcl 558 ref 6-3 6-3
error_table_$fatal_error        000242 external static fixed bin(35,0)          dcl 558 ref 779
error_table_$improper_data_format
                                000244 external static fixed bin(35,0)          dcl 558 ref 755
fixed                                                  builtin function         dcl 475 ref 934 934 1157 1157 1157 1157
form                            000201 automatic       fixed bin(17,0)          dcl 403 in procedure "reduction_compiler_" set ref
                                                                                  1183* 1186
form                      2            based           fixed bin(17,0)          array level 3 in structure "obj_token" packed
                                                                                  unaligned dcl 499 in procedure
                                                                                  "reduction_compiler_" set ref 871* 886* 893* 902*
                                                                                  1183 1186 1189 1189 1330 1331 1338 1408
group2                    7            based           structure                level 2 in structure "token" packed unaligned
                                                                                  dcl 2-68 in procedure "reduction_compiler_"
group2                   11            based           structure                level 2 in structure "stmt" packed unaligned
                                                                                  dcl 2-40 in procedure "reduction_compiler_"
i                               024112 automatic       fixed bin(17,0)          dcl 5-33 in procedure "LEX" set ref 5-39* 5-42 5-45*
i                               000202 automatic       fixed bin(17,0)          dcl 403 in procedure "reduction_compiler_" set ref
                                                                                  868* 870 871 950* 1185* 1186 1186 1189 1189 1197
                                                                                  1198 1199* 1312* 1314 1315 1318 1319 1321 1325
                                                                                  1329 1329* 1404* 1407* 1407 1407* 1408 1411 1413*
                                                                                  1419* 1419* 1422* 1426* 1430* 1432* 1436* 1436*
                                                                                  1438* 1444 1445 1458* 1460* 1462* 1564* 1568*
                                                                                  1601* 1603*
i                               023562 automatic       fixed bin(17,0)          dcl 965 in procedure "label_value" set ref 968* 968*
                                                                                  971 975
ignored_breaks                  005272 constant        varying char(5)          initial dcl 558 set ref 761* 765*
index                                                  builtin function         dcl 475 ref 751 752 868 1075 1081
iox_$error_output               000254 external static pointer                  dcl 4-43 set ref 4-63*
iox_$put_chars                  000252 constant        entry                    external dcl 4-43 ref 4-63
j                               000203 automatic       fixed bin(17,0)          dcl 403 set ref 1188* 1189 1189 1189 1189* 1196*
                                                                                  1196 1197 1199 1329* 1330 1331 1332 1333 1338 1339
                                                                                  1355*
label_sought                           parameter       char                     unaligned dcl 965 ref 962 968
length                                                 builtin function         dcl 4-40 in procedure "PUSH" ref 4-63 4-63
length                                                 builtin function         dcl 475 in procedure "reduction_compiler_" ref 879
                                                                                  886 940 1011 1011 1025 1025 1041 1045 1046 1047
                                                                                  1048 1074 1134 1139 1140 1141 1142 1422 1430 1445
                                                                                  1563 1563 1568 1568 1604 1607 1607
lex_control_chars               000011 internal static varying char(128)        dcl 558 set ref 761* 765*
lex_delims                      000052 internal static varying char(128)        dcl 558 set ref 761* 765*
lex_error_                      000256 constant        entry                    external dcl 4-43 in procedure "PUSH" ref 4-60
lex_error_                      000230 constant        entry                    external dcl 481 in procedure "reduction_compiler_"
                                                                                  ref 858 880 911 934 1157 1723 1750
lex_error_                      000260 constant        entry                    external dcl 6-150 in procedure "ERROR" ref 6-168
                                                                                  6-172
lex_string_$init_lex_delims     000234 constant        entry                    external dcl 481 ref 761
lex_string_$lex                 000232 constant        entry                    external dcl 481 ref 765
line_no                  11(18)        based           fixed bin(17,0)          level 3 packed unaligned dcl 2-40 ref 934 934 1157
                                                                                  1157 1157 1157
log                                                    builtin function         dcl 475 ref 1222 1558
long_error                      000116 internal static varying char(234)        initial dcl 4-48 set ref 4-60*
ltrim                                                  builtin function         dcl 1096 in procedure "output_number" ref 1100 1100
ltrim                                                  builtin function         dcl 475 in procedure "reduction_compiler_" ref 1005
                                                                                  1006
max                                                    builtin function         dcl 475 in procedure "reduction_compiler_" ref 940
                                                                                  1197 1359 1776
max                                                    builtin function         dcl 6-148 in procedure "ERROR" ref 6-154
max                                                    builtin function         dcl 1-92 in procedure "SEMANTIC_ANALYSIS" ref 4-27
                                                                                  2701 2783 2852
message                   1     000000 constant        varying char(252)        initial array level 2 dcl 558 ref 858 880 911 934
                                                                                  1157 1723 1750 6-168 6-172
min                                                    builtin function         dcl 475 ref 940 947 951 1222 1407 1563 1563 1568
                                                                                  1568
n                                      parameter       fixed bin(17,0)          dcl 5-33 ref 5-31 5-38 5-39 5-42 5-45
name                      1     000214 automatic       char(32)                 array level 3 in structure "obj_label" dcl 403
                                                                                  in procedure "reduction_compiler_" set ref 968
                                                                                  1743 1756*
name                      1     021665 automatic       varying char(32)         array level 2 in structure "obj_token_fcn" dcl 403
                                                                                  in procedure "reduction_compiler_" set ref 903 910
                                                                                  911 911 919* 1355* 1462*
name_source                     000204 automatic       char(32)                 unaligned dcl 403 set ref 1611* 1614 1614
nl                              005271 constant        char(1)                  initial dcl 558 set ref 761* 765*
no                                     parameter       fixed bin(17,0)          dcl 999 ref 997 1005
non_restart_error               000212 internal static char(33)                 initial unaligned dcl 4-48 set ref 4-63 4-63 4-63
                                                                                  4-63
null                                                   builtin function         dcl 4-40 in procedure "PUSH" ref 4-60 4-60 4-60 4-60
null                                                   builtin function         dcl 7-21 in procedure "NEXT_STMT" ref 7-27 7-35
null                                                   builtin function         dcl 6-148 in procedure "ERROR" ref 6-161 6-161 6-166
                                                                                  6-168
null                                                   builtin function         dcl 475 in procedure "reduction_compiler_" ref 750
                                                                                  765 765 770 5-37 5-39 5-42 5-45
null                                                   builtin function         dcl 1-92 in procedure "SEMANTIC_ANALYSIS" ref 3-64
                                                                                  3-73 3-79 3-86
number                                 parameter       fixed bin(17,0)          dcl 1096 in procedure "output_number" ref 1092 1099
number                          000102 automatic       varying char(4)          dcl 1002 in procedure "number" set ref 1005* 1009
                                                                                  1011 1011 1011 1022 1025 1025 1025
obj                                    based           char                     dcl 499 set ref 1045* 1046 1139* 1140
obj_label                       000214 automatic       structure                level 1 dcl 403
obj_red                                based           structure                level 1 dcl 499 set ref 1216 1216
obj_spaces                             based           char                     unaligned dcl 499 set ref 1360* 1682* 1777*
obj_string                             based           varying char             dcl 499 set ref 868 879 886 889* 889 1221 1221 1331
                                                                                  1422 1430 1438 1444 1445
obj_string_part                        based           char                     unaligned dcl 499 set ref 1333* 1335* 1439* 1446*
obj_token                              based           structure                level 1 dcl 499 set ref 1218 1218
obj_token_fcn                   021665 automatic       structure                level 1 dcl 403
obj_token_quoted                       based           bit(1)                   array unaligned dcl 499 set ref 873* 888* 1220 1220
                                                                                  1226* 1333
part                                   based           char                     unaligned dcl 1064 set ref 1075 1079 1081 1083*
quoted_string            11(01)        based           bit(1)                   level 4 packed unaligned dcl 2-68 ref 873 888 3-92
                                                                                  3-104 3-113 3-118 3-124
reduction_no             11     000214 automatic       fixed bin(17,0)          array level 3 dcl 403 set ref 975 1757*
rtrim                                                  builtin function         dcl 475 ref 1614 1614
search                                                 builtin function         dcl 1-92 ref 3-92
set                       1     000214 automatic       structure                array level 2 dcl 403 set ref 1749 1750 1750
severity                        000000 constant        fixed bin(17,0)          initial array level 2 packed unaligned dcl 558 ref
                                                                                  858 880 911 934 1157 1723 1750 6-153 6-154 6-168
                                                                                  6-172
size                                                   builtin function         dcl 475 ref 1216 1216 1218 1218 1220 1220 1221 1221
                                                                                  1263 1263 1577 1577
source                                 based           char                     unaligned dcl 499 set ref 751 752 1119 1607 1607
source_part                            based           char                     unaligned dcl 1115 set ref 1121*
spaces                          025123 constant        char(120)                initial dcl 558 set ref 749
statement                              parameter       char                     unaligned dcl 999 ref 997 1006 1009 1009 1011 1011
                                                                                  1013 1013 1017 1018 1019 1022 1022 1022 1025 1025
                                                                                  1025 1029
stmt                                   based           structure                level 1 dcl 2-40
stmt_value                             based           char                     unaligned dcl 2-40 set ref 940 1563 1563 1563 1563
                                                                                  1568 1568 1568 1568 1602 1602 1603* 1604 1604
string                                                 builtin function         dcl 475 set ref 1226*
substr                                                 builtin function         dcl 1-92 in procedure "SEMANTIC_ANALYSIS" ref 3-92
                                                                                  3-126
substr                                                 builtin function         dcl 475 in procedure "reduction_compiler_" set ref
                                                                                  745 746 1006 1009 1011 1011 1013 1018 1019 1022
                                                                                  1022 1022 1025 1025 1025 1045* 1046 1079 1139*
                                                                                  1140 1331 1438 1444 1563 1563 1568 1568
suffixed_name_$new_suffix       000236 constant        entry                    external dcl 481 ref 1611
temp                                   based           char                     unaligned dcl 499 ref 1264 1578
temp_obj                               based           char                     unaligned dcl 499 set ref 1263 1263 1264* 1505* 1577
                                                                                  1577 1578* 1609*
token                                  based           structure                level 1 dcl 2-68 in procedure "reduction_compiler_"
token                     2            based           structure                array level 2 in structure "obj_token" dcl 499
                                                                                  in procedure "reduction_compiler_"
token_reqd                2            based           structure                array level 2 dcl 499
token_value                            based           char                     unaligned dcl 2-68 set ref 858* 868 880* 889 903
                                                                                  911* 919 1676* 1676* 1679* 1697* 1710* 1743 1750*
                                                                                  1756 1770* 1770* 1774* 3-92 3-92 3-106* 3-113
                                                                                  3-128 2620* 2622* 2631* 2667* 2707* 2719* 2721*
                                                                                  2740* 2742* 2749* 2787* 2795* 2848* 2850*
translator_temp_$allocate       000240 constant        entry                    external dcl 481 ref 1216 1218 1220 1221 1263 1577
type                                   parameter       fixed bin(17,0)          dcl 838 in procedure "compile_token" ref 835 866 899
type                                   parameter       fixed bin(17,0)          dcl 1655 in procedure "rtn" ref 1652 1660
type                      2(18)        based           fixed bin(17,0)          array level 3 in structure "obj_token" packed
                                                                                  unaligned dcl 499 in procedure
                                                                                  "reduction_compiler_" set ref 872* 887* 899* 906*
                                                                                  917* 1184 1186 1189 1189 1332 1339 1355 1411
type                            023472 automatic       fixed bin(17,0)          dcl 403 in procedure "reduction_compiler_" set ref
                                                                                  1184* 1186
up_to_quote                            based           char                     unaligned dcl 1064 set ref 1077*
verify                                                 builtin function         dcl 1-92 in procedure "SEMANTIC_ANALYSIS" ref 3-92
verify                                                 builtin function         dcl 475 in procedure "reduction_compiler_" ref 1017
                                                                                  1018

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
Pcomment                               automatic       pointer                  dcl 2-20
comment                                based           structure                level 1 dcl 2-20
comment_value                          based           char                     unaligned dcl 2-20

NAMES DECLARED BY EXPLICIT CONTEXT.
ERROR                           023656 constant        entry                    internal dcl 6-139 ref 754 768 972 1042 1135 1257
                                                                                  1746 2088 2146 2152 2157 2175 2187 2216 2327 2370
                                                                                  2380 2414 2425 2437 2455 2464 2498 2504 2510 2516
                                                                                  2521 2539 2599 2690 2712 2767 2772 2800 2893 2901
                                                                                  2909 2914 2925
LEX                             023570 constant        entry                    internal dcl 5-31 ref 2106 2110 2116 2122 2128 2134
                                                                                  2140 2195 2201 2260 2272 2284 2290 2296 2302 2308
                                                                                  2314 2320 2325 2333 2339 2345 2351 2357 2364 2392
                                                                                  2400 2408 2448 2451 2478 2486 2528 2614 2623 2639
                                                                                  2865 2872 2879 2886
NEXT_STMT                       024170 constant        entry                    internal dcl 7-18 ref 2148 2159 2205 2547 2894 2902
                                                                                  2910
PUSH                            023427 constant        entry                    internal dcl 4-36 ref 2393 2401 2409 2480 2488 2529
                                                                                  2625 2633 2640 2674 2695 2697 2756 2777 2779
PUSH_DOWN_LANGUAGE              010331 constant        entry                    internal dcl 799 ref 2072
RD_ACTION                       004154 constant        label                    array(148) dcl 2088 ref 2083
RD_MATCH                        020165 constant        label                    dcl 2079 ref 3-90 3-92 3-101 3-109 3-113 3-118 3-128
                                                                                  2075
RD_MATCH_NO_TOKEN               020170 constant        label                    dcl 2080 ref 3-73 3-79 3-86
RD_NEXT_REDUCTION               017670 constant        label                    dcl 3-55 ref 3-68 3-84 3-88 3-99 3-104 3-111 3-116
                                                                                  3-120 3-124 3-130 2076 4-17 4-24 2616 2669 2703
                                                                                  2751 2785
RD_STACK                        020177 constant        label                    dcl 4-17
RD_STACK_POP                    020204 constant        label                    dcl 4-24 ref 2765 2843 2853
RD_TEST_REDUCTION               017671 constant        label                    dcl 3-58 ref 3-53 4-19 4-28 2091 2096 2101 2108 2114
                                                                                  2120 2126 2132 2138 2144 2150 2155 2161 2167 2173
                                                                                  2179 2185 2191 2197 2203 2208 2214 2219 2225 2230
                                                                                  2235 2240 2244 2248 2252 2256 2262 2268 2274 2280
                                                                                  2286 2292 2298 2304 2310 2316 2323 2329 2335 2341
                                                                                  2347 2353 2359 2366 2372 2378 2383 2388 2396 2404
                                                                                  2412 2417 2423 2428 2435 2440 2446 2453 2458 2462
                                                                                  2467 2474 2482 2490 2496 2502 2508 2514 2519 2524
                                                                                  2531 2537 2542 2549 2553 2557 2561 2565 2569 2573
                                                                                  2577 2581 2585 2589 2593 2597 2602 2610 2627 2635
                                                                                  2643 2647 2651 2655 2659 2663 2677 2682 2688 2693
                                                                                  2699 2710 2715 2724 2728 2732 2736 2745 2759 2770
                                                                                  2775 2781 2791 2798 2803 2809 2813 2817 2821 2825
                                                                                  2829 2833 2837 2841 2860 2867 2874 2881 2888 2896
                                                                                  2904 2912 2917
RD_TEST_RESULT                  020161 constant        label                    dcl 2075 ref 2073
RD_TEST_TOKEN                   004145 constant        label                    array(6) dcl 3-73 ref 3-65 3-71
RD_TOKEN_FCN                    004153 constant        label                    array(1) dcl 2072 ref 2070
RETURN                          010315 constant        label                    dcl 776 ref 756 772 861 883 915 937 1043 1136 1161
                                                                                  1254 1258 1753
RTN                             004142 constant        label                    array(3) dcl 1662 ref 1660
SEMANTIC_ANALYSIS               017657 constant        entry                    internal dcl 1-30 ref 775
action_begin                    010336 constant        entry                    internal dcl 822 ref 2278 2321
comment                         004134 constant        label                    array(6) dcl 1341 ref 1339
comp                            004124 constant        label                    array(0:7) dcl 868 ref 866
compile_token                   010371 constant        entry                    internal dcl 835 ref 2258 2264 2270 2282 2288 2294
                                                                                  2300 2306 2312 2318 2331 2337 2343 2349 2355 2363
                                                                                  2374
count_reduction                 011164 constant        entry                    internal dcl 926 ref 2163
count_token                     011333 constant        entry                    internal dcl 943 ref 2193 2199 2210
end_comment                     014130 constant        label                    dcl 1352 ref 1342 1344 1346 1348 1350
get_to_cl                       023533 constant        label                    dcl 4-62 ref 4-64
label_value                     011367 constant        entry                    internal dcl 962 ref 1676 1676 1770 1770
next_reduction                  011446 constant        entry                    internal dcl 983 ref 2855 2898 2906
no_match                        012746 constant        label                    dcl 1201 ref 1189 1189
number                          011464 constant        entry                    internal dcl 997 ref 1563 1568 1603
output                          012036 constant        entry                    internal dcl 1036 ref 825 828 987 1072 1077 1078
                                                                                  1083 1084 1100 1121 1268 1269 1273 1276 1281 1282
                                                                                  1285 1288 1290 1296 1300 1304 1309 1313 1316 1317
                                                                                  1320 1321 1323 1326 1327 1335 1336 1341 1343 1345
                                                                                  1347 1349 1351 1354 1356 1360 1361 1365 1366 1368
                                                                                  1371 1376 1381 1385 1389 1394 1399 1403 1405 1409
                                                                                  1410 1412 1413 1416 1423 1427 1431 1433 1437 1439
                                                                                  1440 1443 1446 1447 1450 1451 1454 1459 1461 1463
                                                                                  1466 1474 1481 1488 1495 1499 1500 1504 1505 1507
                                                                                  1508 1511 1518 1520 1524 1529 1533 1534 1537 1538
                                                                                  1541 1542 1547 1548 1553 1554 1556 1560 1565 1570
                                                                                  1582 1587 1588 1592 1593 1597 1603 1609 1612 1614
                                                                                  1615 1663 1667 1671 1675 1677 1679 1680 1682 1683
                                                                                  1696 1697 1698 1709 1710 1711 1769 1771 1774 1775
                                                                                  1777 1778 1793 1808 1822 2492 2607 2618 2620 2622
                                                                                  2624 2629 2631 2632 2665 2671 2673 2684 2705 2707
                                                                                  2717 2721 2738 2742 2747 2753 2755 2761 2763 2787
                                                                                  2793 2795 2805 2807 2846 2848 2850
output_number                   012256 constant        entry                    internal dcl 1092 ref 827 1289 1299 1308 1367 1402
                                                                                  1426 1432 1460 1555 1557 1676 1770
output_quote                    012107 constant        entry                    internal dcl 1058 ref 1333 1563 1568 2667 2719 2740
                                                                                  2749
output_source                   012324 constant        entry                    internal dcl 1109 ref 1602 1607
output_var                      012354 constant        entry                    internal dcl 1128 ref 1355 1462
reduction_begin                 012420 constant        entry                    internal dcl 1152 ref 2221
reduction_compiler_             007701 constant        entry                    external dcl 383
reduction_end                   012564 constant        entry                    internal dcl 1173 ref 2546 2857 2864 2871 2878 2885
                                                                                  2892 2900 2908
reductions_begin                012751 constant        entry                    internal dcl 1211 ref 2181
reductions_end                  013114 constant        entry                    internal dcl 1236 ref 2919 2923
reductions_init                 016542 constant        entry                    internal dcl 1624 ref 2093
rtn                             016562 constant        entry                    internal dcl 1652 ref 2419 2442 2450
set_action                      017004 constant        entry                    internal dcl 1694 ref 2430 2469 2533
set_action_with_args            017053 constant        entry                    internal dcl 1706 ref 2390 2398 2406 2476 2484 2526
                                                                                  2604 2612 2637
set_depth                       017122 constant        entry                    internal dcl 1718 ref 2105
set_label                       017244 constant        entry                    internal dcl 1737 ref 2169
specified_label                 017450 constant        entry                    internal dcl 1764 ref 2883 2890
stacked_reduction               017604 constant        entry                    internal dcl 1788 ref 2869
stacked_reduction_pop           017623 constant        entry                    internal dcl 1802 ref 2876
terminal_reduction              017642 constant        entry                    internal dcl 1817 ref 2862

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0     25412       25674   25163       25422
Length     26264   25163       262         353     226         214

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
reduction_compiler_               11446 external procedure  is an external procedure.  
PUSH_DOWN_LANGUAGE                      internal procedure  shares stack frame of external procedure reduction_compiler_.  
action_begin                            internal procedure  shares stack frame of external procedure reduction_compiler_.  
compile_token                           internal procedure  shares stack frame of external procedure reduction_compiler_.  
count_reduction                         internal procedure  shares stack frame of external procedure reduction_compiler_.  
label_value                             internal procedure  shares stack frame of external procedure reduction_compiler_.  
next_reduction                          internal procedure  shares stack frame of external procedure reduction_compiler_.  
number                               83 internal procedure  uses returns(char(*)) or returns(bit(*)), and   
                                                            is called during a stack extension.  
output                               72 internal procedure  is called during a stack extension.  
output_quote                         78 internal procedure  is called during a stack extension.  
output_number                           internal procedure  shares stack frame of external procedure reduction_compiler_.  
output_source                           internal procedure  shares stack frame of external procedure reduction_compiler_.  
output_var                              internal procedure  shares stack frame of external procedure reduction_compiler_.  
reduction_begin                         internal procedure  shares stack frame of external procedure reduction_compiler_.  
reduction_end                           internal procedure  shares stack frame of external procedure reduction_compiler_.  
reductions_begin                        internal procedure  shares stack frame of external procedure reduction_compiler_.  
reductions_end                          internal procedure  shares stack frame of external procedure reduction_compiler_.  
reductions_init                         internal procedure  shares stack frame of external procedure reduction_compiler_.  
rtn                                     internal procedure  shares stack frame of external procedure reduction_compiler_.  
set_action                              internal procedure  shares stack frame of external procedure reduction_compiler_.  
set_action_with_args                    internal procedure  shares stack frame of external procedure reduction_compiler_.  
set_depth                               internal procedure  shares stack frame of external procedure reduction_compiler_.  
set_label                               internal procedure  shares stack frame of external procedure reduction_compiler_.  
specified_label                         internal procedure  shares stack frame of external procedure reduction_compiler_.  
stacked_reduction                       internal procedure  shares stack frame of external procedure reduction_compiler_.  
stacked_reduction_pop                   internal procedure  shares stack frame of external procedure reduction_compiler_.  
terminal_reduction                      internal procedure  shares stack frame of external procedure reduction_compiler_.  
SEMANTIC_ANALYSIS                       internal procedure  shares stack frame of external procedure reduction_compiler_.  
PUSH                                    internal procedure  shares stack frame of external procedure reduction_compiler_.  
LEX                                     internal procedure  shares stack frame of external procedure reduction_compiler_.  
ERROR                               186 internal procedure  is called by several nonquick procedures.  
NEXT_STMT                               internal procedure  shares stack frame of external procedure reduction_compiler_.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 Sinitialization_reqd        reduction_compiler_
000011 lex_control_chars           reduction_compiler_
000052 lex_delims                  reduction_compiler_
000113 TRACING                     reduction_compiler_
000114 brief_error                 PUSH
000116 long_error                  PUSH
000212 non_restart_error           PUSH

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
ERROR                    000100 Pstmt                       ERROR
                         000102 Perring_token               ERROR
number                   000100 Isearch                     number
                         000102 number                      number
output_quote             000100 Iquote                      output_quote
                         000101 Lpart                       output_quote
                         000102 Ppart                       output_quote
reduction_compiler_      000100 Ired_start                  reduction_compiler_
                         000101 Ired_end                    reduction_compiler_
                         000102 Llongest_red                reduction_compiler_
                         000103 Lobj                        reduction_compiler_
                         000104 Lobj_part                   reduction_compiler_
                         000105 Lobj_spaces                 reduction_compiler_
                         000106 Lobj_string                 reduction_compiler_
                         000107 Lobj_string_part            reduction_compiler_
                         000110 Ltemp                       reduction_compiler_
                         000111 Ltemp_obj                   reduction_compiler_
                         000112 Mstack_depth                reduction_compiler_
                         000114 Nchar                       reduction_compiler_
                         000116 Nobj_red                    reduction_compiler_
                         000117 Nobj_token                  reduction_compiler_
                         000120 Nobj_token_fcn              reduction_compiler_
                         000121 Nreductions                 reduction_compiler_
                         000122 Ntokens                     reduction_compiler_
                         000123 Osc_start                   reduction_compiler_
                         000124 Pobj                        reduction_compiler_
                         000126 Pobj_red                    reduction_compiler_
                         000130 Pobj_spaces                 reduction_compiler_
                         000132 Pobj_string                 reduction_compiler_
                         000134 Pobj_string_part            reduction_compiler_
                         000136 Pobj_token                  reduction_compiler_
                         000140 Pobj_token_quoted           reduction_compiler_
                         000142 Psave                       reduction_compiler_
                         000144 Ptemp                       reduction_compiler_
                         000146 Ptemp_obj                   reduction_compiler_
                         000150 S_PDL                       reduction_compiler_
                         000151 S_TRACE                     reduction_compiler_
                         000152 S_TRACE_ON                  reduction_compiler_
                         000153 Sinclude_DELETE             reduction_compiler_
                         000154 Sinclude_DELETE_STMT        reduction_compiler_
                         000155 Sinclude_ERROR              reduction_compiler_
                         000156 Sinclude_NEXT_STMT          reduction_compiler_
                         000157 Sinclude_LEX                reduction_compiler_
                         000160 Sinclude_STACK              reduction_compiler_
                         000161 Soptimize_possible          reduction_compiler_
                         000162 code                        reduction_compiler_
                         000163 date                        reduction_compiler_
                         000201 form                        reduction_compiler_
                         000202 i                           reduction_compiler_
                         000203 j                           reduction_compiler_
                         000204 name_source                 reduction_compiler_
                         000214 obj_label                   reduction_compiler_
                         021665 obj_token_fcn               reduction_compiler_
                         023472 type                        reduction_compiler_
                         023474 Pthis_token                 reduction_compiler_
                         023476 Pstmt                       reduction_compiler_
                         023500 Ptoken                      reduction_compiler_
                         023502 SPDL                        reduction_compiler_
                         023503 MERROR_SEVERITY             reduction_compiler_
                         023504 SERROR_CONTROL              reduction_compiler_
                         023505 MIN_PRINT_SEVERITY          reduction_compiler_
                         023505 SERROR_PRINTED              reduction_compiler_
                         023506 PRINT_SEVERITY_CONTROL      reduction_compiler_
                         023562 i                           label_value
                         023606 Lsource_part                output_source
                         023610 Psource_part                output_source
                         023750 N                           set_label
                         024010 LTOKEN_REQD_VALUE           SEMANTIC_ANALYSIS
                         024011 NRED                        SEMANTIC_ANALYSIS
                         024012 PRED                        SEMANTIC_ANALYSIS
                         024014 PTOKEN_REQD                 SEMANTIC_ANALYSIS
                         024016 PTOKEN_REQD_VALUE           SEMANTIC_ANALYSIS
                         024020 STOKEN_FCN                  SEMANTIC_ANALYSIS
                         024021 CODE                        SEMANTIC_ANALYSIS
                         024022 I                           SEMANTIC_ANALYSIS
                         024023 NUMBER                      SEMANTIC_ANALYSIS
                         024024 DIRECTION                   SEMANTIC_ANALYSIS
                         024025 STACK                       SEMANTIC_ANALYSIS
                         024051 STACK_DEPTH                 SEMANTIC_ANALYSIS
                         024112 i                           LEX
                         024124 Ssearching                  NEXT_STMT

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
fx1_to_fl2          alloc_cs            unpk_to_pk          cat_realloc_cs      call_ext_out_desc   call_ext_out
call_int_this_desc  call_int_this       call_int_other_desc call_int_other      return              fl2_to_fx1
tra_ext             alloc_auto_adj      shorten_stack       ext_entry_desc      int_entry           int_entry_desc
set_cs_eis          index_cs_eis        return_chars_eis    log

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
clock_                        cu_$cl                        cv_dec_check_                 date_time_$format
iox_$put_chars                lex_error_                    lex_error_                    lex_error_
lex_string_$init_lex_delims   lex_string_$lex               suffixed_name_$new_suffix     translator_temp_$allocate

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$fatal_error      error_table_$improper_data_format                           iox_$error_output




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
    383 007672       403 007714      2933 007715    6    3 007716       858 007747       743 007751       744 007753
    745 007760       746 007767       747 007775       748 007776       749 010001       750 010003       751 010006
    752 010016       753 010025       754 010037       755 010047       756 010053       758 010054       759 010056
    760 010060       761 010062       763 010143       765 010145       768 010270       770 010302       771 010306
    772 010311       774 010312       775 010314       776 010315       777 010320       778 010322       779 010323
    782 010330       799 010331       802 010333       822 010336       825 010337       827 010353       828 010355
    830 010370       835 010371       856 010373       857 010376       858 010401       861 010517       863 010521
    864 010522       866 010532       868 010534       870 010547       871 010551       872 010556       873 010561
    874 010565       877 010566       879 010567       880 010573       883 010706       886 010710       887 010717
    888 010723       889 010727       892 010742       893 010743       899 010747       900 010752       902 010753
    903 010757       904 011002       905 011004       906 011007       907 011013       910 011014       911 011016
    915 011136       917 011140       918 011144       919 011145       921 011163       926 011164       929 011165
    930 011166       931 011171       932 011173       933 011175       934 011200       937 011315       939 011317
    940 011322       941 011332       943 011333       947 011335       950 011343       951 011353       952 011362
    953 011364       955 011366       962 011367       968 011400       969 011420       971 011422       972 011425
    973 011435       975 011441       983 011446       987 011447       990 011462       997 011463      1005 011477
   1006 011531      1009 011546      1011 011576      1013 011627      1017 011640      1018 011653      1019 011675
   1021 011701      1022 011702      1025 011750      1029 012026      1036 012035      1041 012051      1042 012054
   1043 012065      1045 012070      1046 012076      1047 012101      1048 012103      1050 012105      1058 012106
   1072 012122      1073 012135      1074 012140      1075 012142      1076 012153      1077 012156      1078 012171
   1079 012204      1080 012210      1081 012212      1082 012224      1083 012225      1084 012242      1086 012255
   1092 012256      1099 012260      1100 012271      1102 012322      1109 012324      1119 012326      1120 012335
   1121 012340      1123 012353      1128 012354      1134 012365      1135 012372      1136 012402      1139 012403
   1140 012410      1141 012413      1142 012415      1145 012417      1152 012420      1154 012421      1155 012424
   1156 012427      1157 012432      1161 012546      1164 012550      1165 012556      1166 012561      1168 012563
   1173 012564      1175 012565      1177 012567      1178 012572      1180 012573      1183 012606      1184 012613
   1185 012617      1186 012627      1188 012642      1189 012661      1195 012714      1196 012716      1197 012720
   1198 012734      1199 012741      1200 012745      1202 012746      1204 012750      1211 012751      1216 012752
   1217 012771      1218 012774      1219 013013      1220 013016      1221 013035      1222 013056      1224 013075
   1225 013076      1226 013077      1227 013104      1228 013105      1229 013111      1231 013113      1236 013114
   1254 013115      1256 013120      1257 013122      1258 013132      1260 013133      1261 013137      1262 013142
   1263 013143      1264 013161      1265 013170      1266 013174      1268 013176      1269 013206      1273 013224
   1276 013237      1281 013255      1282 013265      1285 013303      1287 013316      1288 013320      1289 013336
   1290 013340      1296 013353      1299 013371      1300 013377      1304 013412      1308 013425      1309 013432
   1312 013445      1313 013455      1314 013467      1315 013510      1316 013525      1317 013537      1318 013551
   1319 013571      1320 013607      1321 013621      1323 013637      1325 013651      1326 013661      1327 013673
   1328 013705      1329 013707      1330 013723      1331 013730      1332 013735      1333 013742      1335 013762
   1336 013773      1337 014005      1338 014006      1339 014007      1341 014012      1342 014027      1343 014030
   1344 014044      1345 014045      1346 014057      1347 014060      1348 014076      1349 014077      1350 014111
   1351 014112      1352 014130      1354 014131      1355 014143      1356 014161      1358 014173      1359 014175
   1360 014203      1361 014215      1363 014227      1365 014231      1366 014241      1367 014254      1368 014262
   1371 014275      1376 014310      1381 014323      1385 014336      1389 014351      1394 014364      1399 014377
   1402 014415      1403 014422      1404 014435      1405 014445      1407 014457      1408 014473      1409 014507
   1410 014521      1411 014533      1412 014551      1413 014563      1416 014601      1418 014613      1419 014615
   1420 014617      1422 014621      1423 014623      1426 014636      1427 014640      1430 014653      1431 014657
   1432 014675      1433 014677      1435 014712      1436 014714      1437 014723      1438 014735      1439 014743
   1440 014756      1442 014770      1443 014772      1444 015004      1445 015012      1446 015016      1447 015027
   1450 015041      1451 015051      1453 015064      1454 015066      1458 015101      1459 015111      1460 015127
   1461 015131      1462 015147      1463 015161      1465 015174      1466 015176      1474 015211      1481 015227
   1487 015242      1488 015244      1495 015257      1498 015275      1499 015277      1500 015307      1504 015322
   1505 015332      1506 015345      1507 015347      1508 015357      1511 015372      1518 015405      1520 015415
   1524 015433      1529 015446      1532 015466      1533 015470      1534 015500      1536 015516      1537 015520
   1538 015530      1540 015543      1541 015545      1542 015555      1546 015573      1547 015575      1548 015605
   1552 015620      1553 015622      1554 015632      1555 015645      1556 015647      1557 015664      1558 015666
   1560 015700      1562 015713      1563 015716      1564 015764      1565 015775      1567 016007      1568 016012
   1569 016056      1570 016061      1574 016073      1575 016077      1576 016102      1577 016103      1578 016121
   1580 016130      1581 016134      1582 016136      1587 016151      1588 016162      1591 016175      1592 016244
   1593 016254      1597 016267      1599 016277      1600 016302      1601 016303      1602 016313      1603 016330
   1604 016365      1605 016402      1606 016404      1607 016406      1609 016413      1611 016426      1612 016461
   1614 016473      1615 016523      1617 016536      1619 016541      1624 016542      1631 016543      1632 016545
   1633 016546      1634 016547      1635 016550      1636 016551      1637 016552      1638 016553      1639 016554
   1640 016555      1641 016556      1642 016557      1643 016560      1645 016561      1652 016562      1660 016564
   1662 016566      1663 016570      1665 016606      1666 016610      1667 016611      1669 016624      1671 016625
   1672 016640      1673 016642      1675 016643      1676 016660      1677 016703      1678 016721      1679 016723
   1680 016740      1681 016752      1682 016755      1683 016767      1684 017001      1685 017003      1694 017004
   1696 017005      1697 017023      1698 017040      1701 017052      1706 017053      1709 017054      1710 017072
   1711 017107      1713 017121      1718 017122      1721 017123      1722 017126      1723 017131      1726 017237
   1727 017242      1730 017243      1737 017244      1743 017245      1744 017267      1745 017271      1746 017274
   1747 017304      1749 017305      1750 017307      1753 017427      1755 017431      1756 017432      1757 017443
   1759 017447      1764 017450      1769 017451      1770 017463      1771 017506      1773 017521      1774 017522
   1775 017537      1776 017551      1777 017557      1778 017571      1781 017603      1788 017604      1793 017605
   1795 017620      1797 017622      1802 017623      1808 017624      1810 017637      1812 017641      1817 017642
   1822 017643      1824 017656    1   30 017657      1836 017660      1837 017662    3   50 017663    3   52 017666
 3   53 017667    3   55 017670    3   58 017671    3   60 017674    3   62 017676    3   63 017722    3   64 017725
 3   65 017731    3   68 017741    3   70 017742    3   71 017746    3   73 017750    3   79 017767    3   84 020000
 3   86 020001    3   88 020005    3   90 020006    3   92 020007    3   99 020043    3  101 020044    3  104 020047
 3  106 020052    3  107 020076    3  108 020100    3  109 020103    3  111 020104    3  113 020105    3  116 020121
 3  118 020122    3  120 020126    3  123 020127    3  124 020130    3  126 020134    3  127 020141    3  128 020145
 3  130 020153      2070 020154      2072 020156      2073 020160      2075 020161      2076 020164      2079 020165
   2080 020170      2082 020173      2083 020175    4   17 020177    4   18 020201    4   19 020203    4   24 020204
 4   26 020206    4   27 020210    4   28 020216      2088 020217      2090 020227      2091 020231      2093 020232
   2095 020233      2096 020235      2098 020236      2100 020237      2101 020241      2103 020242      2105 020245
   2106 020246      2107 020252      2108 020254      2110 020255      2112 020261      2113 020263      2114 020265
   2116 020266      2118 020272      2119 020274      2120 020276      2122 020277      2124 020303      2125 020305
   2126 020307      2128 020310      2130 020314      2131 020316      2132 020320      2134 020321      2136 020325
   2137 020327      2138 020331      2140 020332      2142 020336      2143 020340      2144 020342      2146 020343
   2148 020353      2149 020354      2150 020356      2152 020357      2154 020367      2155 020371      2157 020372
   2159 020402      2160 020403      2161 020405      2163 020406      2165 020407      2166 020413      2167 020415
   2169 020416      2171 020417      2172 020423      2173 020425      2175 020426      2177 020436      2178 020442
   2179 020444      2181 020445      2183 020446      2184 020450      2185 020452      2187 020453      2189 020463
   2190 020467      2191 020471      2193 020472      2195 020476      2196 020502      2197 020504      2199 020505
   2201 020511      2202 020515      2203 020517      2205 020520      2207 020521      2208 020523      2210 020524
   2212 020530      2213 020534      2214 020536      2216 020537      2218 020547      2219 020551      2221 020552
   2223 020553      2224 020557      2225 020561      2227 020562      2229 020565      2230 020567      2232 020570
   2234 020573      2235 020575      2237 020576      2239 020601      2240 020603      2242 020604      2244 020606
   2246 020607      2248 020611      2250 020612      2252 020614      2254 020615      2256 020617      2258 020620
   2260 020624      2261 020630      2262 020632      2264 020633      2266 020636      2267 020642      2268 020644
   2270 020645      2272 020650      2273 020654      2274 020656      2276 020657      2278 020662      2279 020663
   2280 020665      2282 020666      2284 020671      2285 020675      2286 020677      2288 020700      2290 020703
   2291 020707      2292 020711      2294 020712      2296 020715      2297 020721      2298 020723      2300 020724
   2302 020727      2303 020733      2304 020735      2306 020736      2308 020741      2309 020745      2310 020747
   2312 020750      2314 020753      2315 020757      2316 020761      2318 020762      2320 020766      2321 020772
   2322 020773      2323 020775      2325 020776      2327 021002      2328 021012      2329 021014      2331 021015
   2333 021021      2334 021025      2335 021027      2337 021030      2339 021034      2340 021040      2341 021042
   2343 021043      2345 021047      2346 021053      2347 021055      2349 021056      2351 021062      2352 021066
   2353 021070      2355 021071      2357 021075      2358 021101      2359 021103      2361 021104      2363 021107
   2364 021113      2365 021117      2366 021121      2368 021122      2370 021125      2371 021135      2372 021137
   2374 021140      2376 021143      2377 021147      2378 021151      2380 021152      2382 021162      2383 021164
   2385 021165      2387 021170      2388 021172      2390 021173      2392 021174      2393 021200      2394 021204
   2395 021206      2396 021210      2398 021211      2400 021212      2401 021216      2402 021222      2403 021224
   2404 021226      2406 021227      2408 021230      2409 021234      2410 021240      2411 021242      2412 021244
   2414 021245      2416 021255      2417 021257      2419 021260      2421 021264      2422 021270      2423 021272
   2425 021273      2427 021303      2428 021305      2430 021306      2432 021307      2433 021313      2434 021315
   2435 021317      2437 021320      2439 021330      2440 021332      2442 021333      2444 021337      2445 021343
   2446 021345      2448 021346      2450 021352      2451 021356      2452 021362      2453 021364      2455 021365
   2457 021375      2458 021377      2460 021400      2462 021402      2464 021403      2466 021413      2467 021415
   2469 021416      2471 021417      2472 021423      2473 021425      2474 021427      2476 021430      2478 021431
   2479 021435      2480 021437      2481 021443      2482 021445      2484 021446      2486 021447      2487 021453
   2488 021455      2489 021461      2490 021463      2492 021464      2494 021500      2495 021504      2496 021506
   2498 021507      2500 021517      2501 021523      2502 021525      2504 021526      2506 021536      2507 021542
   2508 021544      2510 021545      2512 021555      2513 021561      2514 021563      2516 021564      2518 021574
   2519 021576      2521 021577      2523 021607      2524 021611      2526 021612      2528 021613      2529 021617
   2530 021623      2531 021625      2533 021626      2535 021627      2536 021633      2537 021635      2539 021636
   2541 021646      2542 021650      2544 021651      2546 021656      2547 021657      2548 021660      2549 021662
   2551 021663      2553 021665      2555 021666      2557 021670      2559 021671      2561 021673      2563 021674
   2565 021676      2567 021677      2569 021701      2571 021702      2573 021704      2575 021705      2577 021707
   2579 021710      2581 021712      2583 021713      2585 021715      2587 021716      2589 021720      2591 021721
   2593 021723      2595 021724      2597 021726      2599 021727      2601 021737      2602 021741      2604 021742
   2606 021743      2607 021747      2608 021761      2609 021763      2610 021765      2612 021766      2614 021767
   2615 021773      2616 021775      2618 021776      2620 022010      2621 022025      2622 022031      2623 022046
   2624 022052      2625 022064      2626 022070      2627 022072      2629 022073      2631 022105      2632 022122
   2633 022134      2634 022140      2635 022142      2637 022143      2639 022144      2640 022150      2641 022154
   2642 022156      2643 022160      2645 022161      2647 022163      2649 022164      2651 022166      2653 022167
   2655 022171      2657 022172      2659 022174      2661 022175      2663 022177      2665 022200      2667 022212
   2668 022227      2669 022233      2671 022234      2673 022246      2674 022260      2675 022264      2676 022270
   2677 022272      2679 022273      2681 022276      2682 022300      2684 022301      2686 022331      2687 022335
   2688 022337      2690 022340      2692 022350      2693 022352      2695 022353      2697 022357      2698 022363
   2699 022365      2701 022366      2703 022374      2705 022375      2707 022407      2708 022424      2709 022430
   2710 022432      2712 022433      2714 022443      2715 022445      2717 022446      2719 022460      2720 022475
   2721 022501      2722 022516      2723 022522      2724 022524      2726 022525      2728 022527      2730 022530
   2732 022532      2734 022533      2736 022535      2738 022536      2740 022550      2741 022565      2742 022571
   2743 022606      2744 022612      2745 022614      2747 022615      2749 022627      2750 022644      2751 022650
   2753 022651      2755 022663      2756 022675      2757 022701      2758 022705      2759 022707      2761 022710
   2763 022722      2764 022734      2765 022740      2767 022741      2769 022751      2770 022753      2772 022754
   2774 022764      2775 022766      2777 022767      2779 022773      2780 022777      2781 023001      2783 023002
   2785 023010      2787 023011      2789 023026      2790 023032      2791 023034      2793 023035      2795 023047
   2796 023064      2797 023070      2798 023072      2800 023073      2802 023103      2803 023105      2805 023106
   2807 023120      2808 023132      2809 023134      2811 023135      2813 023137      2815 023140      2817 023142
   2819 023143      2821 023145      2823 023146      2825 023150      2827 023151      2829 023153      2831 023154
   2833 023156      2835 023157      2837 023161      2839 023162      2841 023164      2843 023165      2846 023166
   2848 023200      2849 023215      2850 023221      2851 023236      2852 023242      2853 023250      2855 023251
   2857 023252      2858 023253      2859 023257      2860 023261      2862 023262      2864 023263      2865 023264
   2866 023270      2867 023272      2869 023273      2871 023274      2872 023275      2873 023301      2874 023303
   2876 023304      2878 023305      2879 023306      2880 023312      2881 023314      2883 023315      2885 023316
   2886 023317      2887 023323      2888 023325      2890 023326      2892 023327      2893 023330      2894 023340
   2895 023341      2896 023343      2898 023344      2900 023345      2901 023346      2902 023356      2903 023357
   2904 023361      2906 023362      2908 023363      2909 023364      2910 023374      2911 023375      2912 023377
   2914 023400      2916 023410      2917 023412      2919 023413      2921 023414      2923 023415      2925 023416
   2926 023426    4   36 023427    4   59 023431    4   60 023434    4   62 023533    4   63 023540    4   64 023562
 4   66 023563    4   68 023564    4   70 023567    5   31 023570    5   36 023572    5   37 023574    5   38 023601
 5   39 023603    5   40 023615    5   41 023617    5   42 023621    5   44 023631    5   45 023632    5   47 023645
 5   48 023647    5   49 023652    5   51 023654    6  139 023655    6  153 023663    6  154 023675    6  156 023704
 6  158 023713    6  160 023714    6  161 023716    6  164 023731    6  166 023735    6  168 023737    6  172 024041
 6  177 024166    7   18 024170    7   24 024171    7   25 024173    7   26 024176    7   27 024200    7   28 024206
 7   29 024210    7   30 024215    7   31 024216    7   32 024217    7   35 024230    7   36 024234    7   39 024235


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
