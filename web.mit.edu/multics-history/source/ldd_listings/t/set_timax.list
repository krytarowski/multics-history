	COMPILATION LISTING OF SEGMENT set_timax
	Compiled by: Multics PL/I Compiler, Release 27d, of October 11, 1982
	Compiled at: Honeywell LISD Phoenix, System M
	Compiled on: 11/15/82  1546.0 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 set_timax: stm: proc;
       12 
       13 /* program to set timax to allow higher usage of the processor by the user
       14*
       15*   Usage:	set_timax n
       16*
       17*   where "n" is the number of seconds to set timax to.  (A value
       18*   of "0" will set it to the default: tc_data|timax.)
       19*
       20*   coded by Roger Roach - April 26, 1971
       21*   modified December, 1978 - P. B. Kelley - to call get_process_id_() 
       22*							*/
       23 
       24 dcl  arg char (arglen) based (argptr), argptr pointer,
       25     (arglen, ret_length, timax) fixed bin,
       26      code fixed bin (35),
       27      fnum float bin (27),
       28      ret_string char (120),
       29      ring_0_message char (ret_length) based (addr (ret_string)),
       30      bad_char char (1);
       31 
       32 dcl  cu_$arg_ptr ext entry (fixed bin, ptr, fixed bin, fixed bin (35)),
       33      cv_float_ ext entry (char (*), fixed bin (35), float bin (27)),
       34      hphcs_$pxss_set_timax ext entry (bit (36), fixed bin),
       35     (com_err_, ioa_, ioa_$rs, phcs_$ring_0_message) ext entry options (variable),
       36      get_process_id_ ext entry returns (bit(36));
       37 dcl  processid bit(36);
       38 dcl  linkage_error condition;
       39 
       40 	call cu_$arg_ptr (1, argptr, arglen, code);
       41 
       42 	if code ^= 0 then do;
       43 	     call com_err_ (code, "set_timax");
       44 	     return;
       45 	end;
       46 
       47 	call cv_float_ (arg, code, fnum);
       48 
       49 	if code ^= 0 then do;
       50 	     bad_char = substr (arg, code, 1);
       51 	     call com_err_ (0, "set_timax", "illegal character ""^a"" in argument ""^a"".", bad_char, arg);
       52 	     return;
       53 	end;
       54 
       55 	timax = fnum * 1000000;
       56 
       57 	if timax > 0
       58 	     then call ioa_ ("setting timax to ^.1f seconds.", fnum);
       59 	     else call ioa_ ("resetting timax to default.");
       60 
       61 	processid = get_process_id_ ();
       62 
       63 	on linkage_error begin;
       64 	     revert linkage_error;
       65 	     call com_err_ (0, "set_timax", "Insufficient access to reset timax.");
       66 	     go to out;
       67 	end;
       68 
       69 	call hphcs_$pxss_set_timax (processid, timax);
       70 
       71 	revert linkage_error;
       72 
       73 	if timax > 0 then do;
       74 	     call ioa_$rs ("setting timax to ^.1f seconds.", ret_string, ret_length, fnum);
       75 	     call phcs_$ring_0_message (ring_0_message);
       76 	end;
       77 	else call phcs_$ring_0_message ("setting timax to default.");
       78 
       79 out:
       80 	return;
       81 
       82      end;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/15/82  1456.2  set_timax.pl1                     >dumps>old>recomp>set_timax.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
arg                                    based           char                     unaligned dcl 24 set ref 47* 50 51*
arglen                          000102 automatic       fixed bin(17,0)          dcl 24 set ref 40* 47 47 50 51 51
argptr                          000100 automatic       pointer                  dcl 24 set ref 40* 47 50 51
bad_char                        000145 automatic       char(1)                  unaligned dcl 24 set ref 50* 51*
code                            000105 automatic       fixed bin(35,0)          dcl 24 set ref 40* 42 43* 47* 49 50
com_err_                        000016 constant        entry                    external dcl 32 ref 43 51 65
cu_$arg_ptr                     000010 constant        entry                    external dcl 32 ref 40
cv_float_                       000012 constant        entry                    external dcl 32 ref 47
fnum                            000106 automatic       float bin(27)            dcl 24 set ref 47* 55 57* 74*
get_process_id_                 000026 constant        entry                    external dcl 32 ref 61
hphcs_$pxss_set_timax           000014 constant        entry                    external dcl 32 ref 69
ioa_                            000020 constant        entry                    external dcl 32 ref 57 59
ioa_$rs                         000022 constant        entry                    external dcl 32 ref 74
linkage_error                   000150 stack reference condition                dcl 38 ref 63 64 71
phcs_$ring_0_message            000024 constant        entry                    external dcl 32 ref 75 77
processid                       000146 automatic       bit(36)                  unaligned dcl 37 set ref 61* 69*
ret_length                      000103 automatic       fixed bin(17,0)          dcl 24 set ref 74* 75 75
ret_string                      000107 automatic       char(120)                unaligned dcl 24 set ref 74* 75
ring_0_message                         based           char                     unaligned dcl 24 set ref 75*
timax                           000104 automatic       fixed bin(17,0)          dcl 24 set ref 55* 57 69* 73

NAMES DECLARED BY EXPLICIT CONTEXT.
out                             000477 constant        label                    dcl 79 ref 66
set_timax                       000107 constant        entry                    external dcl 11
stm                             000100 constant        entry                    external dcl 11

NAMES DECLARED BY CONTEXT OR IMPLICATION.
addr                                                   builtin function         ref 75
substr                                                 builtin function         ref 50

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       624         654     500         634
Length      1034     500        30         144     123           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
stm                                 168 external procedure  is an external procedure.  
on unit on line 63                  100 on unit             enables or reverts conditions.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
stm                      000100 argptr                      stm
                         000102 arglen                      stm
                         000103 ret_length                  stm
                         000104 timax                       stm
                         000105 code                        stm
                         000106 fnum                        stm
                         000107 ret_string                  stm
                         000145 bad_char                    stm
                         000146 processid                   stm

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return              fl2_to_fx1          tra_ext             enable
ext_entry           int_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      cu_$arg_ptr                   cv_float_                     get_process_id_
hphcs_$pxss_set_timax         ioa_                          ioa_$rs                       phcs_$ring_0_message

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000077        40 000114        42 000132        43 000134        44 000156        47 000157        49 000203
     50 000205        51 000212        52 000257        55 000260        57 000264        59 000306        61 000322
     63 000331        64 000345        65 000346        66 000377        69 000402        71 000413        73 000414
     74 000416        75 000446        76 000462        77 000463        79 000477


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
