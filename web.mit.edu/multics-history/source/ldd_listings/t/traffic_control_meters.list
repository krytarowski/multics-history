	COMPILATION LISTING OF SEGMENT traffic_control_meters
	Compiled by: Multics PL/I Compiler, Release 28d, of October 4, 1983
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 01/22/85  1516.4 mst Tue
	    Options: optimize list

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 /* format: style3 */
       11 
       12 traffic_control_meters:
       13 tcm:
       14      proc;
       15 
       16 
       17 /*  Traffic Control Metering Program
       18*
       19*    Written by one of the Ancients (probably Webber)
       20*    Cleaned up a bit, I/O boosts added, by J. Bongiovanni, August 1982
       21*    Modified November 1984 by M. Pandolf to include hc_lock.
       22*    Modified January 1985 by Keith Loepere to include pauses.
       23**/
       24 
       25 /*  Automatic  */
       26 
       27 dcl	arg_no		fixed bin;
       28 dcl	argl		fixed bin (21);
       29 dcl	argp		ptr;
       30 dcl	atb		float bin;
       31 dcl	c1		float bin;
       32 dcl	code		fixed bin (35);
       33 dcl	cpu		(16) float bin;
       34 dcl	cpu_time		float bin;
       35 dcl	cpusum		float bin;
       36 dcl	counters_sw	bit (1) aligned;
       37 dcl	cur_ptrs		(1) ptr;
       38 dcl	delta		float bin;
       39 dcl	formatted_time	char (10);
       40 dcl	general_sw	bit (1) aligned;
       41 dcl	i		fixed bin;
       42 dcl	intc		float bin;
       43 dcl	meter_time	float bin;
       44 dcl	meter_time_micsec	fixed bin (71);
       45 dcl	n_args		fixed bin;
       46 dcl	numint		float bin;
       47 dcl	p1		float bin;
       48 dcl	pf		(16) float bin;
       49 dcl	pfsum		float bin;
       50 dcl	prev_ptrs		(1) ptr;
       51 dcl	queue_sw		bit (1) aligned;
       52 dcl	reset_sw		bit (1) aligned;
       53 dcl	s1		float bin;
       54 dcl	sc		(16) float bin;
       55 dcl	scsum		float bin;
       56 dcl	tbpf		(8) float bin;
       57 dcl	tbs		(8) float bin;
       58 dcl	total_notifies	fixed bin;
       59 dcl	total_waits	fixed bin;
       60 
       61 /*  Static  */
       62 
       63 dcl	(
       64 	MILLI		init ("1"b),
       65 	SEC		init ("0"b),
       66 	PER		init ("1"b),
       67 	NOP		init ("0"b)
       68 	)		bit (1) aligned int static options (constant);
       69 dcl	MYNAME		char (22) int static options (constant) init ("traffic_control_meters");
       70 dcl	unique		fixed bin int static init (0);
       71 
       72 /*  Based  */
       73 
       74 dcl	arg		char (argl) based (argp);
       75 dcl	1 cur_tcm		aligned like tcm based (cur_ptrs (1));
       76 dcl	1 prev_tcm	aligned like tcm based (prev_ptrs (1));
       77 
       78 /*  External  */
       79 
       80 dcl	error_table_$badopt fixed bin (35) external;
       81 
       82 
       83 /*  Entry  */
       84 
       85 dcl	com_err_		entry options (variable);
       86 dcl	cu_$arg_count	entry (fixed bin, fixed bin (35));
       87 dcl	cu_$arg_ptr	entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
       88 dcl	ioa_		entry options (variable);
       89 dcl	metering_util_$define_regions
       90 			entry options (variable);
       91 dcl	metering_util_$fill_buffers
       92 			entry (fixed bin, fixed bin (71), char (*), (*) ptr, (*) ptr, fixed bin (35));
       93 dcl	metering_util_$reset
       94 			entry (fixed bin, fixed bin (35));
       95 
       96 
       97 /*  Builtin  */
       98 
       99 dcl	fixed		builtin;
      100 dcl	float		builtin;
      101 dcl	size		builtin;
      102 
      103 
      104 
      105 
      106 
      107 	reset_sw, counters_sw, queue_sw, general_sw = "0"b;
      108 
      109 	call cu_$arg_count (n_args, code);
      110 	if code ^= 0
      111 	then do;
      112 		call com_err_ (code, MYNAME);
      113 		return;
      114 	     end;
      115 
      116 	if unique = 0
      117 	then do;
      118 		call metering_util_$define_regions (unique, code, "tc_data", 0, size (tcm));
      119 		if code ^= 0
      120 		then do;
      121 			call com_err_ (code, MYNAME, "Defining regions");
      122 			unique = 0;
      123 			return;
      124 		     end;
      125 	     end;
      126 
      127 
      128 	do arg_no = 1 to n_args;
      129 	     call cu_$arg_ptr (arg_no, argp, argl, code);
      130 	     if arg = "-gen"
      131 	     then general_sw = "1"b;
      132 	     else if arg = "-rs" | arg = "-reset"
      133 	     then reset_sw = "1"b;
      134 	     else if arg = "-ct" | arg = "-counters"
      135 	     then counters_sw = "1"b;
      136 	     else if arg = "-qu" | arg = "-queue"
      137 	     then queue_sw = "1"b;
      138 	     else if arg = "-rr" | arg = "-report_reset"
      139 	     then general_sw, counters_sw, reset_sw, queue_sw = "1"b;
      140 	     else do;
      141 		     call com_err_ (error_table_$badopt, MYNAME, arg);
      142 		     return;
      143 		end;
      144 	end;
      145 
      146 	if n_args = 0
      147 	then general_sw, counters_sw, queue_sw = "1"b;
      148 
      149 	call metering_util_$fill_buffers (unique, meter_time_micsec, formatted_time, cur_ptrs, prev_ptrs, code);
      150 	if code ^= 0
      151 	then do;
      152 		call com_err_ (code, MYNAME, "Filling buffers");
      153 		return;
      154 	     end;
      155 
      156 	call ioa_ ("^/Total metering time^-^a", formatted_time);
      157 
      158 	cpu_time = cur_tcm.processor_time - prev_tcm.processor_time;
      159 	meter_time = float (meter_time_micsec) / 1.0e2;	/* micro-seconds, percent */
      160 
      161 	if general_sw
      162 	then do;
      163 		total_waits, total_notifies = 0;
      164 		call ioa_ ("^/Ave queue length^9.2f", cur_tcm.avequeue * 1e0);
      165 		call ioa_ ("Ave eligible    ^9.2f", cur_tcm.ave_eligible * 1e0);
      166 		numint = cur_tcm.response_count - prev_tcm.response_count;
      167 		delta = cur_tcm.response_time - prev_tcm.response_time;
      168 		if numint = 0e0
      169 		then atb = 0e0;
      170 		else atb = 1e-6 * delta / numint;
      171 		call ioa_ ("Response time    ^9.3f sec", atb);
      172 	     end;
      173 	if counters_sw
      174 	then do;
      175 		call ioa_ ("^/  COUNTER          TOTAL         ATB       #/INT^/");
      176 		intc, delta = cur_tcm.response_count - prev_tcm.response_count;
      177 		call print ("Interactions", SEC, NOP);
      178 		delta = cur_tcm.loadings - prev_tcm.loadings;
      179 		call print ("Loadings", SEC, PER);
      180 		delta = cur_tcm.blocks - prev_tcm.blocks;
      181 		call print ("Blocks", SEC, NOP);
      182 		delta = cur_tcm.pauses - prev_tcm.pauses;
      183 		if delta ^= 0
      184 		then call print ("Pauses", SEC, NOP);
      185 		delta = cur_tcm.wakeups - prev_tcm.wakeups;
      186 		call print ("Wakeups", SEC, NOP);
      187 		delta = cur_tcm.schedulings - prev_tcm.schedulings;
      188 		call print ("Schedulings", SEC, PER);
      189 		delta = cur_tcm.lost_priority - prev_tcm.lost_priority;
      190 		call print ("Lost priority", SEC, NOP);
      191 		delta = cur_tcm.boost_priority - prev_tcm.boost_priority;
      192 		call print ("Priority boosts", SEC, NOP);
      193 		delta = cur_tcm.realtime_priorities - prev_tcm.realtime_priorities;
      194 		call print ("I/O boosts", SEC, NOP);
      195 		delta = cur_tcm.waits - prev_tcm.waits;
      196 		total_waits = total_waits + delta;
      197 		call print ("Wait Page", MILLI, PER);
      198 		delta = cur_tcm.ptl_waits - prev_tcm.ptl_waits;
      199 		total_waits = total_waits + delta;
      200 		if delta ^= 0
      201 		then call print ("Wait PTL", MILLI, PER);
      202 		delta = cur_tcm.te_wait - prev_tcm.te_wait;
      203 		total_waits = total_waits + delta;
      204 		call print ("Wait Other", MILLI, PER);
      205 		delta = total_waits;
      206 		call print ("Total Waits", MILLI, PER);
      207 		delta = cur_tcm.page_notifies - prev_tcm.page_notifies;
      208 		total_notifies = total_notifies + delta;
      209 		call print ("Notify Page", MILLI, NOP);
      210 		delta = cur_tcm.ptl_waits - prev_tcm.ptl_waits - (cur_tcm.stat (6) - prev_tcm.stat (6));
      211 						/* ptlnfy = ptlwaits - waiters */
      212 		total_notifies = total_notifies + delta;
      213 		if delta ^= 0
      214 		then call print ("Notify PTL", MILLI, NOP);
      215 		delta = cur_tcm.notifies - prev_tcm.notifies;
      216 		total_notifies = total_notifies + delta;
      217 		call print ("Notify Other", MILLI, NOP);
      218 		delta = total_notifies;
      219 		call print ("Total Notifies", MILLI, NOP);
      220 		delta = cur_tcm.gp_done_count - prev_tcm.gp_done_count;
      221 		call print ("Get Processor", MILLI, NOP);
      222 		delta = cur_tcm.te_pre_empt - prev_tcm.te_pre_empt;
      223 		call print ("Pre-empts", MILLI, PER);
      224 		delta = cur_tcm.depth_count - prev_tcm.depth_count;
      225 		call print ("Getwork", MILLI, NOP);
      226 		delta = cur_tcm.gw_gp_window_count - prev_tcm.gw_gp_window_count;
      227 		if delta ^= 0
      228 		then call print ("Retry getwork", SEC, NOP);
      229 		delta = cur_tcm.notify_nobody_count - prev_tcm.notify_nobody_count;
      230 		if delta ^= 0
      231 		then do;
      232 			call print ("Extra notifies", SEC, NOP);
      233 			call ioa_ (" Last EN event    ^w", cur_tcm.notify_nobody_event);
      234 		     end;
      235 		delta = cur_tcm.nto_count - prev_tcm.nto_count;
      236 		if delta ^= 0
      237 		then do;
      238 			call print ("Notify timeout", SEC, NOP);
      239 			call ioa_ (" Last NTO event   ^w", cur_tcm.nto_event);
      240 		     end;
      241 	     end;
      242 	if queue_sw
      243 	then do;
      244 		call ioa_ ("^/ DEPTH   %PF   TBPF   %GTW   TBS   %CPU^/");
      245 		pfsum, scsum, cpusum = 0e0;
      246 		do i = 1 to 8;
      247 		     p1, pf (i) = cur_tcm.pfdepth (i) - prev_tcm.pfdepth (i);
      248 		     pfsum = pfsum + p1;
      249 		     s1, sc (i) = cur_tcm.depths (i) - prev_tcm.depths (i);
      250 		     scsum = scsum + s1;
      251 		     c1, cpu (i) = cur_tcm.tdepths (i) - prev_tcm.tdepths (i);
      252 		     if p1 <= 1e-6
      253 		     then p1 = 1e0;
      254 		     if s1 <= 1e-6
      255 		     then s1 = 1e0;
      256 		     cpusum = cpusum + c1;
      257 		     tbpf (i) = c1 * 1e-3 / p1;
      258 		     tbs (i) = c1 * 1e-3 / s1;
      259 		end;
      260 		p1 = 2e0;
      261 		do i = 1 to 8 while (p1 > 1e0);
      262 		     if pfsum = 0e0
      263 		     then p1 = 0e0;
      264 		     else p1 = (pf (i) * 100e0) / pfsum;
      265 		     if scsum = 0e0
      266 		     then s1 = 0e0;
      267 		     else s1 = (sc (i) * 100e0) / scsum;
      268 		     if cpusum = 0e0
      269 		     then c1 = 0e0;
      270 		     else c1 = (cpu (i) * 100e0) / cpusum;
      271 		     call ioa_ ("^4d^9.1f^6.1f^7.1f^7.1f^6.1f", i, p1, tbpf (i), s1, tbs (i), c1);
      272 		end;
      273 	     end;
      274 
      275 	if reset_sw
      276 	then do;
      277 		call metering_util_$reset (unique, code);
      278 		if code ^= 0
      279 		then do;
      280 			call com_err_ (code, MYNAME, "Resetting");
      281 			return;
      282 		     end;
      283 	     end;
      284 
      285 	call ioa_ (" ");
      286 	return;
      287 
      288 
      289 
      290 
      291 print:
      292      proc (name, milli, per);
      293 
      294 dcl	name		char (*);
      295 dcl	milli		bit (1) aligned;
      296 dcl	per		bit (1) aligned;
      297 
      298 
      299 dcl	units		char (4);
      300 
      301 
      302 	if delta = 0e0
      303 	then atb = 0e0;
      304 	else atb = meter_time / (delta * 1e1);
      305 	if ^milli
      306 	then atb = atb / 1e3;
      307 
      308 	if milli
      309 	then units = "msec";
      310 	else units = "sec";
      311 
      312 
      313 	if per
      314 	then do;
      315 		if intc = 0e0
      316 		then numint = 0e0;
      317 		else numint = delta / intc;
      318 		call ioa_ ("^16a^8d^11.3f ^4a^8.3f", name, fixed (delta), atb, units, numint);
      319 	     end;
      320 	else do;
      321 		call ioa_ ("^16a^8d^11.3f ^4a", name, fixed (delta), atb, units);
      322 	     end;
      323 
      324      end print;
      325 
  1     1 /* BEGIN INCLUDE FILE ... tcm.incl.pl1 ... used to generate tc_data cds */
  1     2 /* NOTE -- This include file has TWO counterparts in ALM: tc_meters.incl.alm and */
  1     3 /* wcte.incl.alm. They cannot be produced with cif, and must be kept up to date manually. */
  1     4 /* Modified 830914 to replace tty_polling_time with opc_polling_time... -E. A. Ranzenbach */
  1     5 /* Modified 1984.05.21 by M. Pandolf to add tc_suspend_lock */
  1     6 /* Modified 1984.11.26 by Keith Loepere for uid_array. */
  1     7 /* Modified 1984.12.06 by Keith Loepere for page create delaying. */
  1     8 
  1     9 dcl  tcmp ptr;
  1    10 
  1    11 dcl 1 tcm aligned based (tcmp),
  1    12     2 tc_suspend_lock like lock,			/* when locked, tc is suspended */
  1    13     2 cid2 fixed bin (18),
  1    14     2 cid3 fixed bin (18),
  1    15     2 cid4 fixed bin (18),
  1    16     2 depth_count fixed bin (18),			/* depth last process run */
  1    17     2 loadings fixed bin (18),			/* number of process loadings */
  1    18 
  1    19     2 blocks fixed bin (18),				/* number of calls to block */
  1    20     2 wakeups fixed bin (18),				/* number of calls to wakeup */
  1    21     2 waits fixed bin (18),				/* number of calls to wait */
  1    22     2 notifies fixed bin (18),			/* number of calls to notify */
  1    23     2 schedulings fixed bin (18),
  1    24     2 interactions fixed bin (18),			/* number of interactive schedulings */
  1    25     2 avequeue fixed bin (35, 18),			/* recent time average of number in queue */
  1    26     2 te_wait fixed bin (18),				/* times te called from wait */
  1    27 
  1    28     2 te_block fixed bin (18),			/* times te updated from block */
  1    29     2 te_i_stop fixed bin (18),			/* times te updated from i_stop */
  1    30     2 te_pre_empt fixed bin (18),			/* times te updated from pre_empt */
  1    31     2 p_interactions fixed bin,			/* times interaction bit turned off because of high priority */
  1    32     2 idle fixed bin (71),				/* total idle time */
  1    33     2 mp_idle fixed bin (71),				/* multi-programming idle */
  1    34 
  1    35     2 nmp_idle fixed bin (71),			/* non-multi-programming idle time */
  1    36     2 zero_idle fixed bin (71),			/* zero idle time */
  1    37     2 last_time fixed bin (71),			/* last time a process was run */
  1    38     2 loop_locks fixed bin (18),			/* times looped on the APT lock */
  1    39     2 loop_lock_time fixed bin (18),			/* time looping on the APT lock */
  1    40     2 ave_eligible fixed bin (35, 18),			/* average length of eligible queue */
  1    41     2 sort_to_elhead fixed bin (18),			/* 0=> no one,1 => int've only, 2 => everybody */
  1    42     2 processor_time fixed bin (71),			/* total processor time on system */
  1    43     2 response_time fixed bin (71),			/* estimate of response time */
  1    44     2 eligible_time fixed bin (71),			/* estimate of eligible time */
  1    45     2 response_count fixed bin,			/* count of response meters */
  1    46     2 eligible_count fixed bin,			/* count of eligible meters */
  1    47     2 quit_counts (0:5) fixed bin,			/* array of buckets indexed by state */
  1    48     2 loading_idle fixed bin (71),			/* loading_idle time */
  1    49     2 delta_vcpu fixed bin (71),			/* delta virtual CPU time for the system */
  1    50     2 post_purge_switch fixed bin,			/* ON if post purging is to be done */
  1    51     2 time_out_severity fixed bin,			/* syserr first arg for notify time outs */
  1    52     2 notify_check fixed bin,				/* obsolete */
  1    53     2 quit_priority fixed bin,			/* factor for scheduler quit response */
  1    54     2 iobm_polling_time fixed bin (71),			/* time to poll iobm */
  1    55     2 end_of_time fixed bin (71),			/* very large time */
  1    56     2 gp_at_notify fixed bin (18),			/* 0 => just do get_idle_processor */
  1    57     2 gp_at_ptlnotify fixed bin (18),			/* 0 => just do get_idle_processor */
  1    58     2 int_q_enabled fixed bin (18),			/* 0 => no intv q in percent mode */
  1    59     2 fnp_buffer_threshold fixed bin (18),		/* if fewer free buffs then stingy alloc strategy */
  1    60 						/* set this to >= half n_ttylines/fnp for safety */
  1    61 
  1    62 /* 100 octal */
  1    63 
  1    64     2 depths (8) fixed bin (18),			/* histogram of run depths */
  1    65     2 tdepths (8) fixed bin (71),			/* histogram of times run per depth */
  1    66     2 pfdepth (8) fixed bin (18),			/* histogram of page faults per depth */
  1    67 
  1    68     2 ptl_not_waits fixed bin (18),			/* times ptl_wait noticed ptl was unlocked */
  1    69     2 gw_gp_window_count fixed bin (18),		/* times window noticed */
  1    70     2 metering_lock fixed bin (18),			/* 0=locked, else unlocked */
  1    71     2 ptl_waits fixed bin (18),			/* num calls to ptl_wait */
  1    72     2 gp_start_count fixed bin (18),			/*  to detect gw_gp window lossage */
  1    73     2 gp_done_count fixed bin (18),
  1    74     2 nto_check_time fixed bin (71),			/* next time at which nto code will be called */
  1    75     2 nto_delta fixed bin (35),			/* microsec between nto checks */
  1    76     2 nto_count fixed bin (18),			/* number of times nto detected */
  1    77     2 tcpu_scheduling fixed bin (18),			/* obsolete				*/
  1    78     2 nto_event bit (36),				/* last event which NTO'd */
  1    79     2 page_notifies fixed bin (18),
  1    80     2 notify_nobody_count fixed bin (18),
  1    81     2 notify_nobody_event bit (36),
  1    82     2 system_type fixed bin,				/* used to be tcm.inter */
  1    83 
  1    84     2 stat (0:15) fixed bin (18),			/* num apte's in each state */
  1    85 
  1    86 /* 200 octal */
  1    87 
  1    88     2 wait (8),
  1    89       3 time fixed bin (18),				/* histogram of page fault waiting times versus did */
  1    90       3 count fixed bin (18),
  1    91 
  1    92     2 ready (8),
  1    93       3 time fixed bin (18),				/* histogram of times in ready queue */
  1    94       3 count fixed bin (18),
  1    95 
  1    96     2 total_pf_time fixed bin (71),			/* total time spent from start to end of
  1    97*						   all page faults */
  1    98     2 total_pf_count fixed bin (18),			/* total number of page faults metered */
  1    99     2 auto_tune_ws fixed bin (18),			/* 0=> dont, atherwise compensate for quantum len */
  1   100     2 ocore_delta fixed bin (18),			/* number of pages reserved for int users */
  1   101     2 ws_sum fixed bin (18),				/* total of eligible's ws_sizes */
  1   102     2 nonidle_force_count fixed bin (18),		/* count of eligibilities forced */
  1   103     2 itt_list_lock bit (36) aligned,			/* Lock on ITT free list */
  1   104     2 cpu_pf_time fixed bin (71),			/* total cpu time spent handling page faults */
  1   105     2 cpu_pf_count fixed bin (18),			/* total count of cpu time meterings */
  1   106     2 special_offsets unaligned,
  1   107       3 apt_offset bit (18),
  1   108       3 pad bit (18),
  1   109     2 getwork_time fixed bin (71),			/* total time spent in getwork */
  1   110     2 getwork_count fixed bin (18),			/* total times through getwork */
  1   111     2 short_pf_count fixed bin (18),			/* number of short page faults */
  1   112     2 interrupt_time fixed bin (71),			/* total time spent in interrupt */
  1   113     2 interrupt_count fixed bin (71),			/* total number of metered interrupts */
  1   114     2 ocore fixed bin (35, 18),			/* fraction of core for int've users */
  1   115     2 pre_empt_flag bit (36) aligned,			/* controls whether preempting at done time */
  1   116     2 cumulative_memory_usage fixed binary (71),		/* total number of memory usage units */
  1   117     2 processor_time_at_define_wc fixed bin (71),		/* value of processor_time when WC's last defined */
  1   118     2 boost_priority fixed bin,			/* number of times priority process given high priority */
  1   119     2 lost_priority fixed bin,			/* number of times priority process lost eligibility */
  1   120     2 total_clock_lag fixed bin (71),			/* sum of all simulated clock delays */
  1   121     2 clock_simulations fixed bin,			/* number of times alarm clock interrupt was simulated */
  1   122     2 max_clock_lag fixed bin,			/* largest simulated alarm clock delay */
  1   123 
  1   124 /* 300 octal */
  1   125 
  1   126     2 pdscopyl fixed bin (18),			/* amount of pds to copy for new process */
  1   127     2 max_hproc_segno fixed bin,			/* largest allowed hardcore segment number */
  1   128     2 prds_length fixed bin (18),			/* length of PRDS */
  1   129     2 pds_length fixed bin (18),			/* length of PDS */
  1   130     2 lock fixed bin (18),				/* process id generator lock */
  1   131     2 id bit (36) aligned,				/* next uid to be added to uid_array */
  1   132     2 system_shutdown fixed bin (18),
  1   133     2 working_set_factor fixed bin (35, 18),		/* working set factor */
  1   134 
  1   135     2 ncpu fixed bin (18),				/* number of processors currently being used */
  1   136     2 last_eligible bit (18),				/* last process to gain eligibility */
  1   137     2 apt_lock fixed bin (35),			/* + write; 0 hidden; -1 unlocked; -(N+1) Nreaders */
  1   138     2 apt_size fixed bin (18),			/* number of APT entries */
  1   139     2 realtime_q aligned like based_sentinel,		/* processes with realtime deadlines */
  1   140     2 aht_size fixed bin (18),			/* APT hash table size */
  1   141     2 itt_size fixed bin (18),			/* number of ITT entries */
  1   142 
  1   143     2 dst_size fixed bin (18),			/* number of allowed DST entries */
  1   144     2 itt_free_list bit (18),				/* pointer to ITT free list */
  1   145     2 used_itt fixed bin (18),			/* number of used ITT entries */
  1   146     2 initializer_id bit (36) aligned,			/* process id of initializer */
  1   147     2 n_eligible fixed bin (18),			/* number of processes eligible */
  1   148     2 max_eligible fixed bin (30),			/* maximum allowed number of eligible processes */
  1   149     2 wait_enable fixed bin (18),			/* turned on when waiting mechanism works */
  1   150     2 apt_entry_size fixed bin (18),			/* size of an APT entry */
  1   151 
  1   152     2 interactive_q aligned like based_sentinel,		/* head of interactive queue */
  1   153     2 dst_ptr ptr,					/* pointer to device signal table */
  1   154     2 old_user ptr,					/* last process to run (apt ptr ) */
  1   155     2 initialize_time fixed bin (71),			/* time of initialization */
  1   156 
  1   157     2 init_event fixed bin (18),			/* wait event during initialization */
  1   158     2 oldt fixed bin (18),				/* timer reading from previous process */
  1   159     2 newt fixed bin (18),				/* timer setting for new process */
  1   160     2 tefirst fixed bin (30),				/* first eligible time */
  1   161     2 telast fixed bin (30),				/* last eligible time */
  1   162     2 timax fixed bin (35),				/* time in queue for lowest level */
  1   163     2 empty_q bit (18),				/* thread of empty APT entries */
  1   164     2 working_set_addend fixed bin (18),		/* additive working set parameter */
  1   165     2 ready_q_head bit (0) aligned,			/* for added segdef */
  1   166     2 eligible_q_head aligned like based_sentinel,	/* head of eligible queue */
  1   167     2 ready_q_tail bit (0) aligned,			/* for added segdef */
  1   168     2 eligible_q_tail aligned like based_sentinel,	/* tail of eligible queue */
  1   169     2 idle_tail aligned like based_sentinel,		/* tail of idle list */
  1   170     2 min_eligible fixed bin (30),
  1   171     2 alarm_timer_list bit (18) aligned,		/* rel pointer to apt entry for next alarm timer */
  1   172     2 guaranteed_elig_inc fixed bin (35),		/* amount of guaranteed eligibility time in microsecs. */
  1   173     2 priority_sched_inc fixed bin (35),		/* amount of block time before process is given priority */
  1   174     2 next_alarm_time fixed bin (71),			/* clock time for next alarm timer */
  1   175     2 priority_sched_time fixed bin (71),		/* time for priority process to be given priority */
  1   176     2 opc_polling_time fixed bin (71),			/* time to poll console DIM */
  1   177     2 disk_polling_time fixed bin (71),			/* time to poll disk DIM */
  1   178     2 tape_polling_time fixed bin (71),			/* time to poll tape DIM */
  1   179     2 imp_polling_time fixed bin (71),			/* time to poll imp */
  1   180     2 imp_polling_lock fixed bin (18),			/* do not poll if lock set */
  1   181     2 max_channels fixed bin (18),			/* num special channels per process */
  1   182 
  1   183 /* 400 octal */
  1   184 
  1   185     2 system_virtual_time fixed bin (71),		/* non-idle virtual time */
  1   186     2 credit_bank fixed bin (71),			/* credits not yet passed out */
  1   187     2 min_wct_index bit (18) aligned,			/* offset of initializer work class table entry */
  1   188     2 max_wct_index bit (18) aligned,			/* offset of highest wcte currently defined */
  1   189     2 delta_vt fixed bin (71),			/* temp used by pxss.compute_virtual_clocks */
  1   190     2 gross_idle_time fixed bin (71),			/* idle time_used_clock */
  1   191     2 credits_per_scatter fixed bin (35),		/* total number of credits awarded at once */
  1   192     2 best_credit_value fixed bin (18),			/* temp for pxss.find_next_eligible */
  1   193     2 define_wc_time fixed bin (71),			/* clock time when workclasses last degined */
  1   194     2 max_batch_elig fixed bin (35),
  1   195     2 num_batch_elig fixed bin (35),
  1   196     2 deadline_mode fixed bin (35),			/* 0=> ti sorts, else deadline sorts */
  1   197     2 credits_scattered fixed bin (35),
  1   198     2 max_max_eligible fixed bin (30),			/* Maximum of maxe */
  1   199     2 max_stopped_stack_0 fixed bin (35),		/* Maximum stack_0's suspended by stopped procs	*/
  1   200     2 stopped_stack_0 fixed bin (35),			/* Number stack_0's suspended by stopped procs	*/
  1   201     2 mos_polling_interval fixed bin (35),		/* for heals */
  1   202     2 mos_polling_time fixed bin (71),			/* for heals */
  1   203     2 vcpu_response_bounds (VCPU_RESPONSE_BOUNDS) fixed bin (35),
  1   204     2 vcpu_response_bounds_size fixed bin (35),
  1   205     2 meter_response_time_calls fixed bin (35),
  1   206     2 meter_response_time_invalid fixed bin (35),
  1   207     2 meter_response_time_overhead fixed bin (71),
  1   208     2 init_wait_time fixed bin (71),			/* used by wait/notify during initialization	*/
  1   209     2 init_wait_timeout fixed bin (71),			/* notify-timeout interval during initialization	*/
  1   210     2 init_timeout_severity fixed bin,			/* notify-timeout severity during initialization	*/
  1   211     2 init_timeout_recurse fixed bin,			/* count of NTO recursion during initialization	*/
  1   212     2 max_timer_register fixed bin (71),		/* max cpu burst = # cpus x pre_empt_sample_time	*/
  1   213     2 pre_empt_sample_time fixed bin (35),		/* tuning parameter - max time between samples	*/
  1   214     2 governing_credit_bank fixed bin (35),		/* used for limiting eligibility on governed work classes*/
  1   215     2 process_initial_quantum fixed bin (35),		/* eligibility quantum first eligibility	*/
  1   216     2 default_procs_required bit (8) aligned,		/* default mask of CPUs required */
  1   217     2 work_class_idle fixed bin (71),			/* idle time due to work class restrictions */
  1   218 
  1   219 /* Tuning Parameters for Stack Truncation */
  1   220 
  1   221     2 stk_truncate bit (1) aligned,
  1   222     2 stk_truncate_always bit (1) aligned,
  1   223     2 stk_trunc_avg_f1 fixed bin (35, 18),
  1   224     2 stk_trunc_avg_f2 fixed bin (35, 18),
  1   225     2 lock_error_severity fixed bin,                        /* syserr severity */
  1   226 
  1   227     2 gv_integration fixed bin (35),			/* Integration interval for governing */
  1   228     2 gv_integration_set bit (1) aligned,		/* ON => gv_integration set by ctp */
  1   229     2 pauses fixed bin (35),				/* Calls to pause (reschedule) */
  1   230     2 volmap_polling_time fixed bin (71),
  1   231     2 next_ring0_timer fixed bin (71),			/* next time that ring 0 timer goes off */
  1   232     2 realtime_io_priority_switch fixed bin,		/* 0 => give I/O interrupt wakeups realtime priotiry */
  1   233     2 realtime_io_deadline fixed bin (35),		/* Delta to clock for I/O realtime deadline */
  1   234     2 realtime_io_quantum fixed bin (35),		/* Quantum for I/O realtime burst */
  1   235     2 realtime_priorities fixed bin (35),		/* Count for metering */
  1   236     2 relinquishes fixed bin (35),			/* Calls to relinquish_priority */
  1   237     2 abort_ips_mask bit (36) aligned,			/* IPS mask for tc_util$check_abort */
  1   238 
  1   239 /* 500 octal */
  1   240 
  1   241     2 uid_array (0:15) bit (36) aligned,		/* array from which a uid is chosen (randomly) */
  1   242     2 pad5 (176) fixed bin (35),			/* room for expansion compatibly		*/
  1   243 
  1   244 /* 1000 octal */
  1   245 
  1   246     2 pad7 (64) fixed bin (35),
  1   247 
  1   248 /* 1100 octal */
  1   249 
  1   250     2 pad6 (8) fixed bin (35),
  1   251     2 work_class_table aligned,			/* array of per workclass information */
  1   252       3 wcte (0:16) aligned like wct_entry,
  1   253 
  1   254 /* 3000 octal */
  1   255 
  1   256     2 apt fixed bin;
  1   257 
  1   258 dcl  wctep ptr;
  1   259 
  1   260 dcl 1 wct_entry aligned based (wctep),			/* Work class entry */
  1   261     2 thread unaligned,				/* Ready list */
  1   262       3 fp bit (18),				/* Head of ready list */
  1   263       3 bp bit (18),				/* Tail of ready list */
  1   264     2 flags unaligned,
  1   265       3 mnbz bit (1),				/* Sentinel bit must not be zero. */
  1   266       3 defined bit (1),
  1   267       3 io_priority bit (1),
  1   268       3 governed bit (1),
  1   269       3 interactive_q bit (1),
  1   270       3 pad bit (31),
  1   271     2 credits fixed bin (35),				/* Current worthiness of group */
  1   272     2 minf fixed bin (35),				/* min fraction of cpu */
  1   273     2 pin_weight fixed bin (35),			/* number of cycles to pin pages */
  1   274     2 eligibilities fixed bin (35),			/* Count of eligibilities awarded */
  1   275     2 cpu_sum fixed bin (71),				/* CPU used by members */
  1   276     2 resp1 fixed bin (71),
  1   277     2 resp2 fixed bin (71),
  1   278     2 quantum1 fixed bin (35),
  1   279     2 quantum2 fixed bin (35),
  1   280     2 rmeter1 fixed bin (71),
  1   281     2 rmeter2 fixed bin (71),
  1   282     2 rcount1 fixed bin (35),
  1   283     2 rcount2 fixed bin (35),
  1   284     2 realtime fixed bin (35),
  1   285     2 purging fixed bin (35),
  1   286     2 maxel fixed bin (35),
  1   287     2 nel fixed bin (35),
  1   288     2 number_thinks fixed bin (35),			/* number times process entered "think" state	*/
  1   289     2 number_queues fixed bin (35),			/* number times process entered "queued" state	*/
  1   290     2 total_think_time fixed bin (71),
  1   291     2 total_queue_time fixed bin (71),
  1   292 
  1   293 /*  The next three arrays  correspond to the array vcpu_response_bounds				*/
  1   294 
  1   295     2 number_processing (VCPU_RESPONSE_BOUNDS+1) fixed bin (35), /* number times entered "processing" state	*/
  1   296     2 total_processing_time (VCPU_RESPONSE_BOUNDS+1) fixed bin (71),
  1   297     2 total_vcpu_time (VCPU_RESPONSE_BOUNDS+1) fixed bin (71),
  1   298     2 maxf fixed bin (35),				/* maximum fraction of cpu time		*/
  1   299     2 governing_credits fixed bin (35),			/* for limiting cpu resources			*/
  1   300     2 pad1 (4) fixed bin (35);
  1   301 	
  1   302 
  1   303 dcl 1 based_sentinel aligned based,			/* format of pxss-style sentinel */
  1   304     2 fp bit (18) unal,
  1   305     2 bp bit (18) unal,
  1   306     2 sentinel bit (36) aligned;
  1   307 
  1   308 dcl VCPU_RESPONSE_BOUNDS fixed bin init (3) int static options (constant);
  1   309 
  1   310 /* END INCLUDE FILE tcm.incl.pl1 */
      326 
      327 
  2     1 /* Begin include file hc_lock.incl.pl1 BIM 2/82 */
  2     2 /* Replaced by hc_fast_lock.incl.pl1 RSC 11/84 because name of structure
  2     3*   encourages name conflicts.
  2     4*   USE HC_FAST_LOCK INSTEAD!
  2     5**/
  2     6 
  2     7 /* Lock format suitable for use with lock$lock_fast, unlock_fast */
  2     8 
  2     9 /* format: style3 */
  2    10 
  2    11 declare	lock_ptr		pointer;
  2    12 declare	1 lock		aligned based (lock_ptr),
  2    13 	  2 pid		bit (36) aligned,		/* holder of lock */
  2    14 	  2 event		bit (36) aligned,		/* event associated with lock */
  2    15 	  2 flags		aligned,
  2    16 	    3 notify_sw	bit (1) unaligned,
  2    17 	    3 pad		bit (35) unaligned;		/* certain locks use this pad, like dirs */
  2    18 
  2    19 /* End include file hc_lock.incl.pl1 */
      328 
      329      end;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    01/22/85  1306.6  traffic_control_meters.pl1        >spec>temp>41-5>traffic_control_meters.pl1
326          1    01/22/85  1321.5  tcm.incl.pl1                      >spec>temp>41-5>tcm.incl.pl1
328          2    01/06/85  1422.1  hc_lock.incl.pl1                  >ldd>include>hc_lock.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
MILLI                                  constant        bit(1)                   initial dcl 63 set ref 197* 200* 204* 206* 209* 213*
                                                                                  217* 219* 221* 223* 225*
MYNAME                          000000 constant        char(22)                 initial unaligned dcl 69 set ref 112* 121* 141* 152*
                                                                                  280*
NOP                                    constant        bit(1)                   initial dcl 63 set ref 177* 181* 183* 186* 190* 192*
                                                                                  194* 209* 213* 217* 219* 221* 225* 227* 232* 238*
PER                                    constant        bit(1)                   initial dcl 63 set ref 179* 188* 197* 200* 204* 206*
                                                                                  223*
SEC                                    constant        bit(1)                   initial dcl 63 set ref 177* 179* 181* 183* 186* 188*
                                                                                  190* 192* 194* 227* 232* 238*
VCPU_RESPONSE_BOUNDS                   constant        fixed bin(17,0)          initial dcl 1-308 ref 118 118 118 118 118 118 118
                                                                                  118 182 182 193 193
arg                                    based           char                     unaligned dcl 74 set ref 130 132 132 134 134 136 136
                                                                                  138 138 141*
arg_no                          000100 automatic       fixed bin(17,0)          dcl 27 set ref 128* 129*
argl                            000101 automatic       fixed bin(21,0)          dcl 28 set ref 129* 130 132 132 134 134 136 136 138
                                                                                  138 141 141
argp                            000102 automatic       pointer                  dcl 29 set ref 129* 130 132 132 134 134 136 136 138
                                                                                  138 141
atb                             000104 automatic       float bin(27)            dcl 30 set ref 168* 170* 171* 302* 304* 305* 305
                                                                                  318* 321*
ave_eligible             40            based           fixed bin(35,18)         level 2 dcl 75 ref 165
avequeue                 16            based           fixed bin(35,18)         level 2 dcl 75 ref 164
based_sentinel                         based           structure                level 1 dcl 1-303
blocks                   10            based           fixed bin(18,0)          level 2 in structure "prev_tcm" dcl 76 in procedure
                                                                                  "tcm" ref 180
blocks                   10            based           fixed bin(18,0)          level 2 in structure "cur_tcm" dcl 75 in procedure
                                                                                  "tcm" ref 180
boost_priority          272            based           fixed bin(17,0)          level 2 in structure "cur_tcm" dcl 75 in procedure
                                                                                  "tcm" ref 191
boost_priority          272            based           fixed bin(17,0)          level 2 in structure "prev_tcm" dcl 76 in procedure
                                                                                  "tcm" ref 191
c1                              000105 automatic       float bin(27)            dcl 31 set ref 251* 256 257 258 268* 270* 271*
code                            000106 automatic       fixed bin(35,0)          dcl 32 set ref 109* 110 112* 118* 119 121* 129* 149*
                                                                                  150 152* 277* 278 280*
com_err_                        000014 constant        entry                    external dcl 85 ref 112 121 141 152 280
counters_sw                     000131 automatic       bit(1)                   dcl 36 set ref 107* 134* 138* 146* 173
cpu                             000107 automatic       float bin(27)            array dcl 33 set ref 251* 270
cpu_time                        000127 automatic       float bin(27)            dcl 34 set ref 158*
cpusum                          000130 automatic       float bin(27)            dcl 35 set ref 245* 256* 256 268 270
cu_$arg_count                   000016 constant        entry                    external dcl 86 ref 109
cu_$arg_ptr                     000020 constant        entry                    external dcl 87 ref 129
cur_ptrs                        000132 automatic       pointer                  array dcl 37 set ref 149* 158 164 165 166 167 176
                                                                                  178 180 182 185 187 189 191 193 195 198 202 207
                                                                                  210 210 215 220 222 224 226 229 233 235 239 247
                                                                                  249 251
cur_tcm                                based           structure                level 1 dcl 75
delta                           000134 automatic       float bin(27)            dcl 38 set ref 167* 170 176* 178* 180* 182* 183 185*
                                                                                  187* 189* 191* 193* 195* 196 198* 199 200 202* 203
                                                                                  205* 207* 208 210* 212 213 215* 216 218* 220* 222*
                                                                                  224* 226* 227 229* 230 235* 236 302 304 317 318
                                                                                  318 321 321
depth_count               6            based           fixed bin(18,0)          level 2 in structure "prev_tcm" dcl 76 in procedure
                                                                                  "tcm" ref 224
depth_count               6            based           fixed bin(18,0)          level 2 in structure "cur_tcm" dcl 75 in procedure
                                                                                  "tcm" ref 224
depths                  100            based           fixed bin(18,0)          array level 2 in structure "cur_tcm" dcl 75
                                                                                  in procedure "tcm" ref 249
depths                  100            based           fixed bin(18,0)          array level 2 in structure "prev_tcm" dcl 76
                                                                                  in procedure "tcm" ref 249
error_table_$badopt             000012 external static fixed bin(35,0)          dcl 80 set ref 141*
fixed                                                  builtin function         dcl 99 ref 318 318 321 321
float                                                  builtin function         dcl 100 ref 159
formatted_time                  000135 automatic       char(10)                 unaligned dcl 39 set ref 149* 156*
general_sw                      000140 automatic       bit(1)                   dcl 40 set ref 107* 130* 138* 146* 161
gp_done_count           145            based           fixed bin(18,0)          level 2 in structure "prev_tcm" dcl 76 in procedure
                                                                                  "tcm" ref 220
gp_done_count           145            based           fixed bin(18,0)          level 2 in structure "cur_tcm" dcl 75 in procedure
                                                                                  "tcm" ref 220
gw_gp_window_count      141            based           fixed bin(18,0)          level 2 in structure "cur_tcm" dcl 75 in procedure
                                                                                  "tcm" ref 226
gw_gp_window_count      141            based           fixed bin(18,0)          level 2 in structure "prev_tcm" dcl 76 in procedure
                                                                                  "tcm" ref 226
i                               000141 automatic       fixed bin(17,0)          dcl 41 set ref 246* 247 247 247 249 249 249 251 251
                                                                                  251 257 258* 261* 264 267 270 271* 271 271*
intc                            000142 automatic       float bin(27)            dcl 42 set ref 176* 315 317
ioa_                            000022 constant        entry                    external dcl 88 ref 156 164 165 171 175 233 239 244
                                                                                  271 285 318 321
loadings                  7            based           fixed bin(18,0)          level 2 in structure "prev_tcm" dcl 76 in procedure
                                                                                  "tcm" ref 178
loadings                  7            based           fixed bin(18,0)          level 2 in structure "cur_tcm" dcl 75 in procedure
                                                                                  "tcm" ref 178
lock                                   based           structure                level 1 dcl 2-12
lost_priority           273            based           fixed bin(17,0)          level 2 in structure "cur_tcm" dcl 75 in procedure
                                                                                  "tcm" ref 189
lost_priority           273            based           fixed bin(17,0)          level 2 in structure "prev_tcm" dcl 76 in procedure
                                                                                  "tcm" ref 189
meter_time                      000143 automatic       float bin(27)            dcl 43 set ref 159* 304
meter_time_micsec               000144 automatic       fixed bin(71,0)          dcl 44 set ref 149* 159
metering_util_$define_regions   000024 constant        entry                    external dcl 89 ref 118
metering_util_$fill_buffers     000026 constant        entry                    external dcl 91 ref 149
metering_util_$reset            000030 constant        entry                    external dcl 93 ref 277
milli                                  parameter       bit(1)                   dcl 295 ref 291 305 308
n_args                          000146 automatic       fixed bin(17,0)          dcl 45 set ref 109* 128 146
name                                   parameter       char                     unaligned dcl 294 set ref 291 318* 321*
notifies                 13            based           fixed bin(18,0)          level 2 in structure "prev_tcm" dcl 76 in procedure
                                                                                  "tcm" ref 215
notifies                 13            based           fixed bin(18,0)          level 2 in structure "cur_tcm" dcl 75 in procedure
                                                                                  "tcm" ref 215
notify_nobody_count     155            based           fixed bin(18,0)          level 2 in structure "prev_tcm" dcl 76 in procedure
                                                                                  "tcm" ref 229
notify_nobody_count     155            based           fixed bin(18,0)          level 2 in structure "cur_tcm" dcl 75 in procedure
                                                                                  "tcm" ref 229
notify_nobody_event     156            based           bit(36)                  level 2 dcl 75 set ref 233*
nto_count               151            based           fixed bin(18,0)          level 2 in structure "cur_tcm" dcl 75 in procedure
                                                                                  "tcm" ref 235
nto_count               151            based           fixed bin(18,0)          level 2 in structure "prev_tcm" dcl 76 in procedure
                                                                                  "tcm" ref 235
nto_event               153            based           bit(36)                  level 2 dcl 75 set ref 239*
numint                          000147 automatic       float bin(27)            dcl 46 set ref 166* 168 170 315* 317* 318*
p1                              000150 automatic       float bin(27)            dcl 47 set ref 247* 248 252 252* 257 260* 261 262*
                                                                                  264* 271*
page_notifies           154            based           fixed bin(18,0)          level 2 in structure "cur_tcm" dcl 75 in procedure
                                                                                  "tcm" ref 207
page_notifies           154            based           fixed bin(18,0)          level 2 in structure "prev_tcm" dcl 76 in procedure
                                                                                  "tcm" ref 207
pauses                                 based           fixed bin(35,0)          level 2 in structure "cur_tcm" dcl 75 in procedure
                                                                                  "tcm" ref 182
pauses                                 based           fixed bin(35,0)          level 2 in structure "prev_tcm" dcl 76 in procedure
                                                                                  "tcm" ref 182
per                                    parameter       bit(1)                   dcl 296 ref 291 313
pf                              000151 automatic       float bin(27)            array dcl 48 set ref 247* 264
pfdepth                 130            based           fixed bin(18,0)          array level 2 in structure "prev_tcm" dcl 76
                                                                                  in procedure "tcm" ref 247
pfdepth                 130            based           fixed bin(18,0)          array level 2 in structure "cur_tcm" dcl 75
                                                                                  in procedure "tcm" ref 247
pfsum                           000171 automatic       float bin(27)            dcl 49 set ref 245* 248* 248 262 264
prev_ptrs                       000172 automatic       pointer                  array dcl 50 set ref 149* 158 166 167 176 178 180
                                                                                  182 185 187 189 191 193 195 198 202 207 210 210
                                                                                  215 220 222 224 226 229 235 247 249 251
prev_tcm                               based           structure                level 1 dcl 76
processor_time           42            based           fixed bin(71,0)          level 2 in structure "prev_tcm" dcl 76 in procedure
                                                                                  "tcm" ref 158
processor_time           42            based           fixed bin(71,0)          level 2 in structure "cur_tcm" dcl 75 in procedure
                                                                                  "tcm" ref 158
ptl_waits               143            based           fixed bin(18,0)          level 2 in structure "prev_tcm" dcl 76 in procedure
                                                                                  "tcm" ref 198 210
ptl_waits               143            based           fixed bin(18,0)          level 2 in structure "cur_tcm" dcl 75 in procedure
                                                                                  "tcm" ref 198 210
queue_sw                        000174 automatic       bit(1)                   dcl 51 set ref 107* 136* 138* 146* 242
realtime_priorities                    based           fixed bin(35,0)          level 2 in structure "cur_tcm" dcl 75 in procedure
                                                                                  "tcm" ref 193
realtime_priorities                    based           fixed bin(35,0)          level 2 in structure "prev_tcm" dcl 76 in procedure
                                                                                  "tcm" ref 193
reset_sw                        000175 automatic       bit(1)                   dcl 52 set ref 107* 132* 138* 275
response_count           50            based           fixed bin(17,0)          level 2 in structure "prev_tcm" dcl 76 in procedure
                                                                                  "tcm" ref 166 176
response_count           50            based           fixed bin(17,0)          level 2 in structure "cur_tcm" dcl 75 in procedure
                                                                                  "tcm" ref 166 176
response_time            44            based           fixed bin(71,0)          level 2 in structure "prev_tcm" dcl 76 in procedure
                                                                                  "tcm" ref 167
response_time            44            based           fixed bin(71,0)          level 2 in structure "cur_tcm" dcl 75 in procedure
                                                                                  "tcm" ref 167
s1                              000176 automatic       float bin(27)            dcl 53 set ref 249* 250 254 254* 258 265* 267* 271*
sc                              000177 automatic       float bin(27)            array dcl 54 set ref 249* 267
schedulings              14            based           fixed bin(18,0)          level 2 in structure "cur_tcm" dcl 75 in procedure
                                                                                  "tcm" ref 187
schedulings              14            based           fixed bin(18,0)          level 2 in structure "prev_tcm" dcl 76 in procedure
                                                                                  "tcm" ref 187
scsum                           000217 automatic       float bin(27)            dcl 55 set ref 245* 250* 250 265 267
size                                                   builtin function         dcl 101 ref 118 118
stat                    160            based           fixed bin(18,0)          array level 2 in structure "cur_tcm" dcl 75
                                                                                  in procedure "tcm" ref 210
stat                    160            based           fixed bin(18,0)          array level 2 in structure "prev_tcm" dcl 76
                                                                                  in procedure "tcm" ref 210
tbpf                            000220 automatic       float bin(27)            array dcl 56 set ref 257* 271*
tbs                             000230 automatic       float bin(27)            array dcl 57 set ref 258* 271*
tcm                                    based           structure                level 1 dcl 1-11 ref 118 118
tcmp                                   automatic       pointer                  dcl 1-9 ref 118 118
tdepths                 110            based           fixed bin(71,0)          array level 2 in structure "cur_tcm" dcl 75
                                                                                  in procedure "tcm" ref 251
tdepths                 110            based           fixed bin(71,0)          array level 2 in structure "prev_tcm" dcl 76
                                                                                  in procedure "tcm" ref 251
te_pre_empt              22            based           fixed bin(18,0)          level 2 in structure "cur_tcm" dcl 75 in procedure
                                                                                  "tcm" ref 222
te_pre_empt              22            based           fixed bin(18,0)          level 2 in structure "prev_tcm" dcl 76 in procedure
                                                                                  "tcm" ref 222
te_wait                  17            based           fixed bin(18,0)          level 2 in structure "cur_tcm" dcl 75 in procedure
                                                                                  "tcm" ref 202
te_wait                  17            based           fixed bin(18,0)          level 2 in structure "prev_tcm" dcl 76 in procedure
                                                                                  "tcm" ref 202
total_notifies                  000240 automatic       fixed bin(17,0)          dcl 58 set ref 163* 208* 208 212* 212 216* 216 218
total_waits                     000241 automatic       fixed bin(17,0)          dcl 59 set ref 163* 196* 196 199* 199 203* 203 205
unique                          000010 internal static fixed bin(17,0)          initial dcl 70 set ref 116 118* 122* 149* 277*
units                           000252 automatic       char(4)                  unaligned dcl 299 set ref 308* 310* 318* 321*
waits                    12            based           fixed bin(18,0)          level 2 in structure "prev_tcm" dcl 76 in procedure
                                                                                  "tcm" ref 195
waits                    12            based           fixed bin(18,0)          level 2 in structure "cur_tcm" dcl 75 in procedure
                                                                                  "tcm" ref 195
wakeups                  11            based           fixed bin(18,0)          level 2 in structure "prev_tcm" dcl 76 in procedure
                                                                                  "tcm" ref 185
wakeups                  11            based           fixed bin(18,0)          level 2 in structure "cur_tcm" dcl 75 in procedure
                                                                                  "tcm" ref 185
wct_entry                              based           structure                level 1 dcl 1-260

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
lock_ptr                               automatic       pointer                  dcl 2-11
wctep                                  automatic       pointer                  dcl 1-258

NAMES DECLARED BY EXPLICIT CONTEXT.
print                           002344 constant        entry                    internal dcl 291 ref 177 179 181 183 186 188 190 192
                                                                                  194 197 200 204 206 209 213 217 219 221 223 225
                                                                                  227 232 238
tcm                             000347 constant        entry                    external dcl 12
traffic_control_meters          000356 constant        entry                    external dcl 12

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      3262        3314    3140        3272
Length      3574    3140        32         243     122           2

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
tcm                                 306 external procedure  is an external procedure.  
print                                   internal procedure  shares stack frame of external procedure tcm.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 unique                      tcm

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
tcm                      000100 arg_no                      tcm
                         000101 argl                        tcm
                         000102 argp                        tcm
                         000104 atb                         tcm
                         000105 c1                          tcm
                         000106 code                        tcm
                         000107 cpu                         tcm
                         000127 cpu_time                    tcm
                         000130 cpusum                      tcm
                         000131 counters_sw                 tcm
                         000132 cur_ptrs                    tcm
                         000134 delta                       tcm
                         000135 formatted_time              tcm
                         000140 general_sw                  tcm
                         000141 i                           tcm
                         000142 intc                        tcm
                         000143 meter_time                  tcm
                         000144 meter_time_micsec           tcm
                         000146 n_args                      tcm
                         000147 numint                      tcm
                         000150 p1                          tcm
                         000151 pf                          tcm
                         000171 pfsum                       tcm
                         000172 prev_ptrs                   tcm
                         000174 queue_sw                    tcm
                         000175 reset_sw                    tcm
                         000176 s1                          tcm
                         000177 sc                          tcm
                         000217 scsum                       tcm
                         000220 tbpf                        tcm
                         000230 tbs                         tcm
                         000240 total_notifies              tcm
                         000241 total_waits                 tcm
                         000252 units                       print

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
fx1_to_fl2          call_ext_out_desc   call_ext_out        return              fl2_to_fx1          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      cu_$arg_count                 cu_$arg_ptr                   ioa_
metering_util_$define_regions metering_util_$fill_buffers   metering_util_$reset

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$badopt


CONSTANTS
002526  aa     000006000000
002527  aa     000006000000
002530  aa     600000000041
002531  aa     000254000000
002532  ta     000065000000
002533  aa     000000000000
002534  ta     000065000000
002535  aa     000000000000
002536  ta     000023000000
002537  aa     000000000000
002540  ta     000032000000
002541  aa     000000000000
002542  ta     000032000000
002543  aa     000000000000

002544  aa     000006000000
002545  aa     000006000000
002546  aa     600000000041
002547  aa     000274000000
002550  ta     000054000000
002551  aa     000000000000
002552  ta     000065000000
002553  aa     000000000000
002554  ta     000061000000
002555  aa     000000000000
002556  ta     000032000000
002557  aa     000000000000
002560  ta     000032000000
002561  aa     000000000000

002562  aa     000006000000
002563  aa     000006000000
002564  aa     600000000041
002565  aa     000254000000
002566  ta     000054000000
002567  aa     000000000000
002570  ta     000065000000
002571  aa     000000000000
002572  ta     000026000000
002573  aa     000000000000
002574  ta     000032000000
002575  aa     000000000000
002576  ta     000032000000
002577  aa     000000000000

002600  aa     000006000000
002601  aa     000006000000
002602  aa     600000000041
002603  aa     000254000000
002604  ta     000054000000
002605  aa     000000000000
002606  ta     000065000000
002607  aa     000000000000
002610  ta     000023000000
002611  aa     000000000000
002612  ta     000032000000
002613  aa     000000000000
002614  ta     000032000000
002615  aa     000000000000

002616  aa     000006000000
002617  aa     000006000000
002620  aa     600000000041
002621  aa     000254000000
002622  ta     000054000000
002623  aa     000000000000
002624  ta     000065000000
002625  aa     000000000000
002626  ta     000033000000
002627  aa     000000000000
002630  ta     000032000000
002631  aa     000000000000
002632  ta     000032000000
002633  aa     000000000000

002634  aa     000006000000
002635  aa     000006000000
002636  aa     600000000041
002637  aa     000254000000
002640  ta     000054000000
002641  aa     000000000000
002642  ta     000065000000
002643  aa     000000000000
002644  ta     000025000000
002645  aa     000000000000
002646  ta     000032000000
002647  aa     000000000000
002650  ta     000032000000
002651  aa     000000000000

002652  aa     000006000000
002653  aa     000006000000
002654  aa     600000000041
002655  aa     000254000000
002656  ta     000054000000
002657  aa     000000000000
002660  ta     000065000000
002661  aa     000000000000
002662  ta     000027000000
002663  aa     000000000000
002664  ta     000032000000
002665  aa     000000000000
002666  ta     000032000000
002667  aa     000000000000

002670  aa     000006000000
002671  aa     000006000000
002672  aa     600000000041
002673  aa     000254000000
002674  ta     000054000000
002675  aa     000000000000
002676  ta     000054000000
002677  aa     000000000000
002700  ta     000027000000
002701  aa     000000000000
002702  ta     000032000000
002703  aa     000000000000
002704  ta     000032000000
002705  aa     000000000000

002706  aa     000006000000
002707  aa     000006000000
002710  aa     600000000041
002711  aa     000254000000
002712  ta     000054000000
002713  aa     000000000000
002714  ta     000054000000
002715  aa     000000000000
002716  ta     000025000000
002717  aa     000000000000
002720  ta     000032000000
002721  aa     000000000000
002722  ta     000032000000
002723  aa     000000000000

002724  aa     000006000000
002725  aa     000006000000
002726  aa     600000000041
002727  aa     000274000000
002730  ta     000054000000
002731  aa     000000000000
002732  ta     000054000000
002733  aa     000000000000
002734  ta     000031000000
002735  aa     000000000000
002736  ta     000032000000
002737  aa     000000000000
002740  ta     000032000000
002741  aa     000000000000

002742  aa     000006000000
002743  aa     000006000000
002744  aa     600000000041
002745  aa     000254000000
002746  ta     000054000000
002747  aa     000000000000
002750  ta     000054000000
002751  aa     000000000000
002752  ta     000024000000
002753  aa     000000000000
002754  ta     000032000000
002755  aa     000000000000
002756  ta     000032000000
002757  aa     000000000000

002760  aa     000006000000
002761  aa     000006000000
002762  aa     600000000041
002763  aa     000254000000
002764  ta     000065000000
002765  aa     000000000000
002766  ta     000065000000
002767  aa     000000000000
002770  ta     000025000000
002771  aa     000000000000
002772  ta     000032000000
002773  aa     000000000000
002774  ta     000032000000
002775  aa     000000000000

002776  aa     000006000000
002777  aa     000006000000
003000  aa     600000000041
003001  aa     000254000000
003002  ta     000065000000
003003  aa     000000000000
003004  ta     000065000000
003005  aa     000000000000
003006  ta     000044000000
003007  aa     000000000000
003010  ta     000032000000
003011  aa     000000000000
003012  ta     000032000000
003013  aa     000000000000

003014  aa     000006000000
003015  aa     000006000000
003016  aa     600000000041
003017  aa     000254000000
003020  ta     000065000000
003021  aa     000000000000
003022  ta     000065000000
003023  aa     000000000000
003024  ta     000026000000
003025  aa     000000000000
003026  ta     000032000000
003027  aa     000000000000
003030  ta     000032000000
003031  aa     000000000000

003032  aa     000006000000
003033  aa     000006000000
003034  aa     600000000041
003035  aa     000254000000
003036  ta     000065000000
003037  aa     000000000000
003040  ta     000054000000
003041  aa     000000000000
003042  ta     000027000000
003043  aa     000000000000
003044  ta     000032000000
003045  aa     000000000000
003046  ta     000032000000
003047  aa     000000000000

003050  aa     000006000000
003051  aa     000006000000
003052  aa     600000000041
003053  aa     000274000000
003054  ta     000065000000
003055  aa     000000000000
003056  ta     000065000000
003057  aa     000000000000
003060  ta     000061000000
003061  aa     000000000000
003062  ta     000032000000
003063  aa     000000000000
003064  ta     000032000000
003065  aa     000000000000

003066  aa     000006000000
003067  aa     000006000000
003070  aa     600000000041
003071  aa     000274000000
003072  ta     000065000000
003073  aa     000000000000
003074  ta     000065000000
003075  aa     000000000000
003076  ta     000030000000
003077  aa     000000000000
003100  ta     000032000000
003101  aa     000000000000
003102  ta     000032000000
003103  aa     000000000000

003104  aa     000006000000
003105  aa     000006000000
003106  aa     600000000041
003107  aa     000274000000
003110  ta     000065000000
003111  aa     000000000000
003112  ta     000054000000
003113  aa     000000000000
003114  ta     000031000000
003115  aa     000000000000
003116  ta     000032000000
003117  aa     000000000000
003120  ta     000032000000
003121  aa     000000000000

003122  aa     000006000000
003123  aa     000006000000
003124  aa     600000000041
003125  aa     000254000000
003126  ta     000065000000
003127  aa     000000000000
003130  ta     000065000000
003131  aa     000000000000
003132  ta     000033000000
003133  aa     000000000000
003134  ta     000032000000
003135  aa     000000000000
003136  ta     000032000000
003137  aa     000000000000

000000  aa  164 162 141 146	traf
000001  aa  146 151 143 137	fic_
000002  aa  143 157 156 164	cont
000003  aa  162 157 154 137	rol_
000004  aa  155 145 164 145	mete
000005  aa  162 163 000 000	rs

000006  aa     524000000021

000007  aa     526000000004

000010  aa     404000000033

000011  aa     524000000026

000012  aa  163 145 143 040	sec 

000013  aa  155 163 145 143	msec

000014  aa     526077777777

000015  aa     524000000001

000016  aa     524000000034

000017  aa     756406111565

000020  aa     524000000053

000021  aa     514000000044

000022  aa     524000000024

000023  aa     524000000016

000024  aa     524000000011

000025  aa     524000000012

000026  aa     524000000015

000027  aa     524000000013

000030  aa     524000000006

000031  aa     524000000010

000032  aa     514000000001

000033  aa     524000000014

000034  aa     524000000064

000035  aa     414000000033

000036  aa     524000000032

000037  aa     732414336750

000040  aa     524000000025

000041  aa     420000000043

000042  aa     524000000027

000043  aa     524000000031

000044  aa     524000000017

000045  aa     526000000012

000046  aa     410000000107

000047  aa     526000000000

000050  aa  055 162 162 000	-rr

000051  aa  055 161 165 000	-qu

000052  aa  055 143 164 000	-ct

000053  aa  055 162 163 000	-rs

000054  aa     400000000000

000055  aa  055 147 145 156	-gen

000056  aa     524000000020

000057  aa     404000000030

000060  aa     404000000005

000061  aa     524000000007

000062  aa     404000000021

000063  aa     526000000026

000064  aa     404000000043

000065  aa     000000000000

000066  aa  107 145 164 167	Getw
000067  aa  157 162 153 000	ork

000070  aa  127 141 151 164	Wait
000071  aa  040 120 124 114	 PTL

000072  aa  127 141 153 145	Wake
000073  aa  165 160 163 000	ups

000074  aa  120 141 165 163	Paus
000075  aa  145 163 000 000	es

000076  aa  102 154 157 143	Bloc
000077  aa  153 163 000 000	ks

000100  aa  114 157 141 144	Load
000101  aa  151 156 147 163	ings

000102  aa  055 161 165 145	-que
000103  aa  165 145 000 000	ue

000104  aa  055 162 145 163	-res
000105  aa  145 164 000 000	et

000106  aa  164 143 137 144	tc_d
000107  aa  141 164 141 000	ata

000110  aa  122 145 163 145	Rese
000111  aa  164 164 151 156	ttin
000112  aa  147 000 000 000	g

000113  aa  120 162 145 055	Pre-
000114  aa  145 155 160 164	empt
000115  aa  163 000 000 000	s

000116  aa  116 157 164 151	Noti
000117  aa  146 171 040 117	fy O
000120  aa  164 150 145 162	ther

000121  aa  116 157 164 151	Noti
000122  aa  146 171 040 120	fy P
000123  aa  124 114 000 000	TL

000124  aa  116 157 164 151	Noti
000125  aa  146 171 040 120	fy P
000126  aa  141 147 145 000	age

000127  aa  124 157 164 141	Tota
000130  aa  154 040 127 141	l Wa
000131  aa  151 164 163 000	its

000132  aa  127 141 151 164	Wait
000133  aa  040 117 164 150	 Oth
000134  aa  145 162 000 000	er

000135  aa  127 141 151 164	Wait
000136  aa  040 120 141 147	 Pag
000137  aa  145 000 000 000	e

000140  aa  111 057 117 040	I/O 
000141  aa  142 157 157 163	boos
000142  aa  164 163 000 000	ts

000143  aa  123 143 150 145	Sche
000144  aa  144 165 154 151	duli
000145  aa  156 147 163 000	ngs

000146  aa  111 156 164 145	Inte
000147  aa  162 141 143 164	ract
000150  aa  151 157 156 163	ions

000151  aa  055 143 157 165	-cou
000152  aa  156 164 145 162	nter
000153  aa  163 000 000 000	s

000154  aa  116 157 164 151	Noti
000155  aa  146 171 040 164	fy t
000156  aa  151 155 145 157	imeo
000157  aa  165 164 000 000	ut

000160  aa  105 170 164 162	Extr
000161  aa  141 040 156 157	a no
000162  aa  164 151 146 151	tifi
000163  aa  145 163 000 000	es

000164  aa  122 145 164 162	Retr
000165  aa  171 040 147 145	y ge
000166  aa  164 167 157 162	twor
000167  aa  153 000 000 000	k

000170  aa  107 145 164 040	Get 
000171  aa  120 162 157 143	Proc
000172  aa  145 163 163 157	esso
000173  aa  162 000 000 000	r

000174  aa  124 157 164 141	Tota
000175  aa  154 040 116 157	l No
000176  aa  164 151 146 151	tifi
000177  aa  145 163 000 000	es

000200  aa  120 162 151 157	Prio
000201  aa  162 151 164 171	rity
000202  aa  040 142 157 157	 boo
000203  aa  163 164 163 000	sts

000204  aa  114 157 163 164	Lost
000205  aa  040 160 162 151	 pri
000206  aa  157 162 151 164	orit
000207  aa  171 000 000 000	y

000210  aa  106 151 154 154	Fill
000211  aa  151 156 147 040	ing 
000212  aa  142 165 146 146	buff
000213  aa  145 162 163 000	ers

000214  aa     464100000000
000215  aa     000000000001
000216  aa     000000000001
000217  aa     000000000002

000220  aa  055 162 145 160	-rep
000221  aa  157 162 164 137	ort_
000222  aa  162 145 163 145	rese
000223  aa  164 000 000 000	t

000224  aa  104 145 146 151	Defi
000225  aa  156 151 156 147	ning
000226  aa  040 162 145 147	 reg
000227  aa  151 157 156 163	ions

000230  aa  136 061 066 141	^16a
000231  aa  136 070 144 136	^8d^
000232  aa  061 061 056 063	11.3
000233  aa  146 040 136 064	f ^4
000234  aa  141 000 000 000	a

000235  aa  040 114 141 163	 Las
000236  aa  164 040 116 124	t NT
000237  aa  117 040 145 166	O ev
000240  aa  145 156 164 040	ent 
000241  aa  040 040 136 167	  ^w

000242  aa  040 114 141 163	 Las
000243  aa  164 040 105 116	t EN
000244  aa  040 145 166 145	 eve
000245  aa  156 164 040 040	nt  
000246  aa  040 040 136 167	  ^w

000247  aa  136 061 066 141	^16a
000250  aa  136 070 144 136	^8d^
000251  aa  061 061 056 063	11.3
000252  aa  146 040 136 064	f ^4
000253  aa  141 136 070 056	a^8.
000254  aa  063 146 000 000	3f

000255  aa  101 166 145 040	Ave 
000256  aa  145 154 151 147	elig
000257  aa  151 142 154 145	ible
000260  aa  040 040 040 040	    
000261  aa  136 071 056 062	^9.2
000262  aa  146 000 000 000	f

000263  aa  136 057 101 166	^/Av
000264  aa  145 040 161 165	e qu
000265  aa  145 165 145 040	eue 
000266  aa  154 145 156 147	leng
000267  aa  164 150 136 071	th^9
000270  aa  056 062 146 000	.2f

000271  aa  136 064 144 136	^4d^
000272  aa  071 056 061 146	9.1f
000273  aa  136 066 056 061	^6.1
000274  aa  146 136 067 056	f^7.
000275  aa  061 146 136 067	1f^7
000276  aa  056 061 146 136	.1f^
000277  aa  066 056 061 146	6.1f

000300  aa  122 145 163 160	Resp
000301  aa  157 156 163 145	onse
000302  aa  040 164 151 155	 tim
000303  aa  145 040 040 040	e   
000304  aa  040 136 071 056	 ^9.
000305  aa  063 146 040 163	3f s
000306  aa  145 143 000 000	ec

000307  aa  136 057 124 157	^/To
000310  aa  164 141 154 040	tal 
000311  aa  155 145 164 145	mete
000312  aa  162 151 156 147	ring
000313  aa  040 164 151 155	 tim
000314  aa  145 136 055 136	e^-^
000315  aa  141 000 000 000	a

000316  aa  136 057 040 104	^/ D
000317  aa  105 120 124 110	EPTH
000320  aa  040 040 040 045	   %
000321  aa  120 106 040 040	PF  
000322  aa  040 124 102 120	 TBP
000323  aa  106 040 040 040	F   
000324  aa  045 107 124 127	%GTW
000325  aa  040 040 040 124	   T
000326  aa  102 123 040 040	BS  
000327  aa  040 045 103 120	 %CP
000330  aa  125 136 057 000	U^/

000331  aa  136 057 040 040	^/  
000332  aa  103 117 125 116	COUN
000333  aa  124 105 122 040	TER 
000334  aa  040 040 040 040	    
000335  aa  040 040 040 040	    
000336  aa  040 124 117 124	 TOT
000337  aa  101 114 040 040	AL  
000340  aa  040 040 040 040	    
000341  aa  040 040 040 101	   A
000342  aa  124 102 040 040	TB  
000343  aa  040 040 040 040	    
000344  aa  040 043 057 111	 #/I
000345  aa  116 124 136 057	NT^/

BEGIN PROCEDURE tcm
ENTRY TO tcm                                                STATEMENT 1 ON LINE 12
traffic_control_meters:
tcm:
     proc;

000346  da     000113200000
000347  aa   000500 6270 00	eax7 	320
000350  aa  7 00034 3521 20	epp2 	pr7|28,*
000351  aa  2 01045 2721 00	tsp2 	pr2|549		ext_entry
000352  aa     000000000000
000353  aa     000000000000
000354  aa   000007 7100 04	tra  	7,ic		000363
ENTRY TO traffic_control_meters                             STATEMENT 1 ON LINE 12
traffic_control_meters:
tcm:
     proc;

000355  da     000116200000
000356  aa   000500 6270 00	eax7 	320
000357  aa  7 00034 3521 20	epp2 	pr7|28,*
000360  aa  2 01045 2721 00	tsp2 	pr2|549		ext_entry
000361  aa     000000000000
000362  aa     000000000000
						STATEMENT 1 ON LINE 107
	reset_sw, counters_sw, queue_sw, general_sw = "0"b;

000363  aa  6 00175 4501 00	stz  	pr6|125		reset_sw
000364  aa  6 00131 4501 00	stz  	pr6|89		counters_sw
000365  aa  6 00174 4501 00	stz  	pr6|124		queue_sw
000366  aa  6 00140 4501 00	stz  	pr6|96		general_sw
						STATEMENT 1 ON LINE 109
	call cu_$arg_count (n_args, code);

000367  aa  6 00146 3521 00	epp2 	pr6|102		n_args
000370  aa  6 00256 2521 00	spri2	pr6|174
000371  aa  6 00106 3521 00	epp2 	pr6|70		code
000372  aa  6 00260 2521 00	spri2	pr6|176
000373  aa  6 00254 6211 00	eax1 	pr6|172
000374  aa   010000 4310 07	fld  	4096,dl
000375  la  4 00016 3521 20	epp2 	pr4|14,*		cu_$arg_count
000376  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 110
	if code ^= 0
	then do;

000377  aa  6 00106 2361 00	ldq  	pr6|70		code
000400  aa   000017 6000 04	tze  	15,ic		000417
						STATEMENT 1 ON LINE 112
		call com_err_ (code, MYNAME);

000401  aa  6 00106 3521 00	epp2 	pr6|70		code
000402  aa  6 00264 2521 00	spri2	pr6|180
000403  aa   777375 3520 04	epp2 	-259,ic		000000 = 164162141146
000404  aa  6 00266 2521 00	spri2	pr6|182
000405  aa   777457 3520 04	epp2 	-209,ic		000064 = 404000000043
000406  aa  6 00270 2521 00	spri2	pr6|184
000407  aa   777454 3520 04	epp2 	-212,ic		000063 = 526000000026
000410  aa  6 00272 2521 00	spri2	pr6|186
000411  aa  6 00262 6211 00	eax1 	pr6|178
000412  aa   010000 4310 07	fld  	4096,dl
000413  aa  6 00044 3701 20	epp4 	pr6|36,*
000414  la  4 00014 3521 20	epp2 	pr4|12,*		com_err_
000415  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 113
		return;

000416  aa  0 00631 7101 00	tra  	pr0|409		return
						STATEMENT 1 ON LINE 114
	     end;

						STATEMENT 1 ON LINE 116
	if unique = 0
	then do;

000417  aa  6 00044 3701 20	epp4 	pr6|36,*
000420  ia  4 00010 2361 00	ldq  	pr4|8		unique
000421  aa   000127 6010 04	tnz  	87,ic		000550
						STATEMENT 1 ON LINE 118
		call metering_util_$define_regions (unique, code, "tc_data", 0, size (tcm));

000422  aa   777464 2370 04	ldaq 	-204,ic		000106 = 164143137144 141164141000
000423  aa  6 00274 7571 00	staq 	pr6|188
000424  aa  6 00253 4501 00	stz  	pr6|171
000425  aa   000004 2360 07	ldq  	4,dl
000426  aa  6 00277 7561 00	stq  	pr6|191
000427  aa   000001 7360 00	qls  	1
000430  aa  6 00300 7561 00	stq  	pr6|192
000431  aa  6 00277 2361 00	ldq  	pr6|191
000432  aa   000036 0760 07	adq  	30,dl
000433  aa   000001 0760 07	adq  	1,dl
000434  aa   777776 3760 07	anq  	262142,dl
000435  aa  6 00300 0761 00	adq  	pr6|192
000436  aa  6 00300 0761 00	adq  	pr6|192
000437  aa   000006 0760 07	adq  	6,dl
000440  aa   000001 0760 07	adq  	1,dl
000441  aa   777776 3760 07	anq  	262142,dl
000442  aa   000021 4020 07	mpy  	17,dl
000443  aa  6 00300 7561 00	stq  	pr6|192
000444  aa   000436 2360 07	ldq  	286,dl
000445  aa   000001 0760 07	adq  	1,dl
000446  aa   777776 3760 07	anq  	262142,dl
000447  aa   000010 0760 07	adq  	8,dl
000450  aa   000001 0760 07	adq  	1,dl
000451  aa   777776 3760 07	anq  	262142,dl
000452  aa   000006 0760 07	adq  	6,dl
000453  aa   000001 0760 07	adq  	1,dl
000454  aa   777776 3760 07	anq  	262142,dl
000455  aa   000012 0760 07	adq  	10,dl
000456  aa   000001 0760 07	adq  	1,dl
000457  aa   777776 3760 07	anq  	262142,dl
000460  aa   000422 0760 07	adq  	274,dl
000461  aa   000001 0760 07	adq  	1,dl
000462  aa   777776 3760 07	anq  	262142,dl
000463  aa  6 00300 0761 00	adq  	pr6|192
000464  aa   000001 0760 07	adq  	1,dl
000465  aa  6 00276 7561 00	stq  	pr6|190
000466  ia  4 00010 3521 00	epp2 	pr4|8		unique
000467  aa  6 00304 2521 00	spri2	pr6|196
000470  aa  6 00106 3521 00	epp2 	pr6|70		code
000471  aa  6 00306 2521 00	spri2	pr6|198
000472  aa  6 00274 3521 00	epp2 	pr6|188
000473  aa  6 00310 2521 00	spri2	pr6|200
000474  aa  6 00253 3521 00	epp2 	pr6|171
000475  aa  6 00312 2521 00	spri2	pr6|202
000476  aa  6 00276 3521 00	epp2 	pr6|190
000477  aa  6 00314 2521 00	spri2	pr6|204
000500  aa   777362 3520 04	epp2 	-270,ic		000062 = 404000000021
000501  aa  6 00316 2521 00	spri2	pr6|206
000502  aa   777362 3520 04	epp2 	-270,ic		000064 = 404000000043
000503  aa  6 00320 2521 00	spri2	pr6|208
000504  aa   777355 3520 04	epp2 	-275,ic		000061 = 524000000007
000505  aa  6 00322 2521 00	spri2	pr6|210
000506  aa   777352 3520 04	epp2 	-278,ic		000060 = 404000000005
000507  aa  6 00324 2521 00	spri2	pr6|212
000510  aa   777347 3520 04	epp2 	-281,ic		000057 = 404000000030
000511  aa  6 00326 2521 00	spri2	pr6|214
000512  aa  6 00302 6211 00	eax1 	pr6|194
000513  aa   024000 4310 07	fld  	10240,dl
000514  la  4 00024 3521 20	epp2 	pr4|20,*		metering_util_$define_regions
000515  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 119
		if code ^= 0
		then do;

000516  aa  6 00106 2361 00	ldq  	pr6|70		code
000517  aa   000031 6000 04	tze  	25,ic		000550
						STATEMENT 1 ON LINE 121
			call com_err_ (code, MYNAME, "Defining regions");

000520  aa   777504 2370 04	ldaq 	-188,ic		000224 = 104145146151 156151156147
000521  aa  6 00254 7571 00	staq 	pr6|172
000522  aa   777504 2370 04	ldaq 	-188,ic		000226 = 040162145147 151157156163
000523  aa  6 00256 7571 00	staq 	pr6|174
000524  aa  6 00106 3521 00	epp2 	pr6|70		code
000525  aa  6 00304 2521 00	spri2	pr6|196
000526  aa   777252 3520 04	epp2 	-342,ic		000000 = 164162141146
000527  aa  6 00306 2521 00	spri2	pr6|198
000530  aa  6 00254 3521 00	epp2 	pr6|172
000531  aa  6 00310 2521 00	spri2	pr6|200
000532  aa   777332 3520 04	epp2 	-294,ic		000064 = 404000000043
000533  aa  6 00312 2521 00	spri2	pr6|202
000534  aa   777327 3520 04	epp2 	-297,ic		000063 = 526000000026
000535  aa  6 00314 2521 00	spri2	pr6|204
000536  aa   777320 3520 04	epp2 	-304,ic		000056 = 524000000020
000537  aa  6 00316 2521 00	spri2	pr6|206
000540  aa  6 00302 6211 00	eax1 	pr6|194
000541  aa   014000 4310 07	fld  	6144,dl
000542  aa  6 00044 3701 20	epp4 	pr6|36,*
000543  la  4 00014 3521 20	epp2 	pr4|12,*		com_err_
000544  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 122
			unique = 0;

000545  aa  6 00044 3701 20	epp4 	pr6|36,*
000546  ia  4 00010 4501 00	stz  	pr4|8		unique
						STATEMENT 1 ON LINE 123
			return;

000547  aa  0 00631 7101 00	tra  	pr0|409		return
						STATEMENT 1 ON LINE 124
		     end;

						STATEMENT 1 ON LINE 125
	     end;

						STATEMENT 1 ON LINE 128
	do arg_no = 1 to n_args;

000550  aa  6 00146 2361 00	ldq  	pr6|102		n_args
000551  aa  6 00242 7561 00	stq  	pr6|162
000552  aa   000001 2360 07	ldq  	1,dl
000553  aa  6 00100 7561 00	stq  	pr6|64		arg_no
000554  aa  6 00100 2361 00	ldq  	pr6|64		arg_no
000555  aa  6 00242 1161 00	cmpq 	pr6|162
000556  aa   000135 6054 04	tpnz 	93,ic		000713
						STATEMENT 1 ON LINE 129
	     call cu_$arg_ptr (arg_no, argp, argl, code);

000557  aa  6 00100 3521 00	epp2 	pr6|64		arg_no
000560  aa  6 00264 2521 00	spri2	pr6|180
000561  aa  6 00102 3521 00	epp2 	pr6|66		argp
000562  aa  6 00266 2521 00	spri2	pr6|182
000563  aa  6 00101 3521 00	epp2 	pr6|65		argl
000564  aa  6 00270 2521 00	spri2	pr6|184
000565  aa  6 00106 3521 00	epp2 	pr6|70		code
000566  aa  6 00272 2521 00	spri2	pr6|186
000567  aa  6 00262 6211 00	eax1 	pr6|178
000570  aa   020000 4310 07	fld  	8192,dl
000571  aa  6 00044 3701 20	epp4 	pr6|36,*
000572  la  4 00020 3521 20	epp2 	pr4|16,*		cu_$arg_ptr
000573  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 130
	     if arg = "-gen"
	     then general_sw = "1"b;

000574  aa  6 00102 3735 20	epp7 	pr6|66,*		argp
000575  aa  6 00101 2351 00	lda  	pr6|65		argl
000576  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
000577  aa  7 00000 00 0005	desc9a	pr7|0,al		arg
000600  aa   777257 00 0004	desc9a	-337,4		000055 = 055147145156
000601  aa   000004 6010 04	tnz  	4,ic		000605
000602  aa   400000 2350 03	lda  	131072,du
000603  aa  6 00140 7551 00	sta  	pr6|96		general_sw
000604  aa   000105 7100 04	tra  	69,ic		000711
						STATEMENT 1 ON LINE 132
	     else if arg = "-rs" | arg = "-reset"
	     then reset_sw = "1"b;

000605  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
000606  aa  7 00000 00 0005	desc9a	pr7|0,al		arg
000607  aa   777246 00 0003	desc9a	-346,3		000053 = 055162163000
000610  aa   000005 6000 04	tze  	5,ic		000615
000611  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
000612  aa  7 00000 00 0005	desc9a	pr7|0,al		arg
000613  aa   777273 00 0006	desc9a	-325,6		000104 = 055162145163
000614  aa   000004 6010 04	tnz  	4,ic		000620
000615  aa   400000 2350 03	lda  	131072,du
000616  aa  6 00175 7551 00	sta  	pr6|125		reset_sw
000617  aa   000072 7100 04	tra  	58,ic		000711
						STATEMENT 1 ON LINE 134
	     else if arg = "-ct" | arg = "-counters"
	     then counters_sw = "1"b;

000620  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
000621  aa  7 00000 00 0005	desc9a	pr7|0,al		arg
000622  aa   777232 00 0003	desc9a	-358,3		000052 = 055143164000
000623  aa   000005 6000 04	tze  	5,ic		000630
000624  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
000625  aa  7 00000 00 0005	desc9a	pr7|0,al		arg
000626  aa   777325 00 0011	desc9a	-299,9		000151 = 055143157165
000627  aa   000004 6010 04	tnz  	4,ic		000633
000630  aa   400000 2350 03	lda  	131072,du
000631  aa  6 00131 7551 00	sta  	pr6|89		counters_sw
000632  aa   000057 7100 04	tra  	47,ic		000711
						STATEMENT 1 ON LINE 136
	     else if arg = "-qu" | arg = "-queue"
	     then queue_sw = "1"b;

000633  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
000634  aa  7 00000 00 0005	desc9a	pr7|0,al		arg
000635  aa   777216 00 0003	desc9a	-370,3		000051 = 055161165000
000636  aa   000005 6000 04	tze  	5,ic		000643
000637  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
000640  aa  7 00000 00 0005	desc9a	pr7|0,al		arg
000641  aa   777243 00 0006	desc9a	-349,6		000102 = 055161165145
000642  aa   000004 6010 04	tnz  	4,ic		000646
000643  aa   400000 2350 03	lda  	131072,du
000644  aa  6 00174 7551 00	sta  	pr6|124		queue_sw
000645  aa   000044 7100 04	tra  	36,ic		000711
						STATEMENT 1 ON LINE 138
	     else if arg = "-rr" | arg = "-report_reset"
	     then general_sw, counters_sw, reset_sw, queue_sw = "1"b;

000646  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
000647  aa  7 00000 00 0005	desc9a	pr7|0,al		arg
000650  aa   777202 00 0003	desc9a	-382,3		000050 = 055162162000
000651  aa   000005 6000 04	tze  	5,ic		000656
000652  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
000653  aa  7 00000 00 0005	desc9a	pr7|0,al		arg
000654  aa   777346 00 0015	desc9a	-282,13		000220 = 055162145160
000655  aa   000007 6010 04	tnz  	7,ic		000664
000656  aa   400000 2350 03	lda  	131072,du
000657  aa  6 00140 7551 00	sta  	pr6|96		general_sw
000660  aa  6 00131 7551 00	sta  	pr6|89		counters_sw
000661  aa  6 00175 7551 00	sta  	pr6|125		reset_sw
000662  aa  6 00174 7551 00	sta  	pr6|124		queue_sw
000663  aa   000026 7100 04	tra  	22,ic		000711
						STATEMENT 1 ON LINE 140
	     else do;

						STATEMENT 1 ON LINE 141
		     call com_err_ (error_table_$badopt, MYNAME, arg);

000664  aa  6 00101 2361 00	ldq  	pr6|65		argl
000665  aa   526000 2760 03	orq  	175104,du
000666  aa  6 00276 7561 00	stq  	pr6|190
000667  aa  6 00044 3701 20	epp4 	pr6|36,*
000670  la  4 00012 3521 20	epp2 	pr4|10,*		error_table_$badopt
000671  aa  6 00304 2521 00	spri2	pr6|196
000672  aa   777106 3520 04	epp2 	-442,ic		000000 = 164162141146
000673  aa  6 00306 2521 00	spri2	pr6|198
000674  aa  7 00000 3521 00	epp2 	pr7|0		arg
000675  aa  6 00310 2521 00	spri2	pr6|200
000676  aa   777166 3520 04	epp2 	-394,ic		000064 = 404000000043
000677  aa  6 00312 2521 00	spri2	pr6|202
000700  aa   777163 3520 04	epp2 	-397,ic		000063 = 526000000026
000701  aa  6 00314 2521 00	spri2	pr6|204
000702  aa  6 00276 3521 00	epp2 	pr6|190
000703  aa  6 00316 2521 00	spri2	pr6|206
000704  aa  6 00302 6211 00	eax1 	pr6|194
000705  aa   014000 4310 07	fld  	6144,dl
000706  la  4 00014 3521 20	epp2 	pr4|12,*		com_err_
000707  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 142
		     return;

000710  aa  0 00631 7101 00	tra  	pr0|409		return
						STATEMENT 1 ON LINE 143
		end;

						STATEMENT 1 ON LINE 144
	end;

000711  aa  6 00100 0541 00	aos  	pr6|64		arg_no
000712  aa   777642 7100 04	tra  	-94,ic		000554
						STATEMENT 1 ON LINE 146
	if n_args = 0
	then general_sw, counters_sw, queue_sw = "1"b;

000713  aa  6 00146 2361 00	ldq  	pr6|102		n_args
000714  aa   000005 6010 04	tnz  	5,ic		000721
000715  aa   400000 2350 03	lda  	131072,du
000716  aa  6 00140 7551 00	sta  	pr6|96		general_sw
000717  aa  6 00131 7551 00	sta  	pr6|89		counters_sw
000720  aa  6 00174 7551 00	sta  	pr6|124		queue_sw
						STATEMENT 1 ON LINE 149
	call metering_util_$fill_buffers (unique, meter_time_micsec, formatted_time, cur_ptrs, prev_ptrs, code);

000721  aa  6 00044 3701 20	epp4 	pr6|36,*
000722  ia  4 00010 3521 00	epp2 	pr4|8		unique
000723  aa  6 00332 2521 00	spri2	pr6|218
000724  aa  6 00144 3521 00	epp2 	pr6|100		meter_time_micsec
000725  aa  6 00334 2521 00	spri2	pr6|220
000726  aa  6 00135 3521 00	epp2 	pr6|93		formatted_time
000727  aa  6 00336 2521 00	spri2	pr6|222
000730  aa  6 00132 3521 00	epp2 	pr6|90		cur_ptrs
000731  aa  6 00340 2521 00	spri2	pr6|224
000732  aa  6 00172 3521 00	epp2 	pr6|122		prev_ptrs
000733  aa  6 00342 2521 00	spri2	pr6|226
000734  aa  6 00106 3521 00	epp2 	pr6|70		code
000735  aa  6 00344 2521 00	spri2	pr6|228
000736  aa   777124 3520 04	epp2 	-428,ic		000062 = 404000000021
000737  aa  6 00346 2521 00	spri2	pr6|230
000740  aa   777106 3520 04	epp2 	-442,ic		000046 = 410000000107
000741  aa  6 00350 2521 00	spri2	pr6|232
000742  aa   777103 3520 04	epp2 	-445,ic		000045 = 526000000012
000743  aa  6 00352 2521 00	spri2	pr6|234
000744  aa   777250 3520 04	epp2 	-344,ic		000214 = 464100000000
000745  aa  6 00354 2521 00	spri2	pr6|236
000746  aa  6 00356 2521 00	spri2	pr6|238
000747  aa   777115 3520 04	epp2 	-435,ic		000064 = 404000000043
000750  aa  6 00360 2521 00	spri2	pr6|240
000751  aa  6 00330 6211 00	eax1 	pr6|216
000752  aa   030000 4310 07	fld  	12288,dl
000753  la  4 00026 3521 20	epp2 	pr4|22,*		metering_util_$fill_buffers
000754  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 150
	if code ^= 0
	then do;

000755  aa  6 00106 2361 00	ldq  	pr6|70		code
000756  aa   000027 6000 04	tze  	23,ic		001005
						STATEMENT 1 ON LINE 152
		call com_err_ (code, MYNAME, "Filling buffers");

000757  aa   777231 2370 04	ldaq 	-359,ic		000210 = 106151154154 151156147040
000760  aa  6 00254 7571 00	staq 	pr6|172
000761  aa   777231 2370 04	ldaq 	-359,ic		000212 = 142165146146 145162163000
000762  aa  6 00256 7571 00	staq 	pr6|174
000763  aa  6 00106 3521 00	epp2 	pr6|70		code
000764  aa  6 00304 2521 00	spri2	pr6|196
000765  aa   777013 3520 04	epp2 	-501,ic		000000 = 164162141146
000766  aa  6 00306 2521 00	spri2	pr6|198
000767  aa  6 00254 3521 00	epp2 	pr6|172
000770  aa  6 00310 2521 00	spri2	pr6|200
000771  aa   777073 3520 04	epp2 	-453,ic		000064 = 404000000043
000772  aa  6 00312 2521 00	spri2	pr6|202
000773  aa   777070 3520 04	epp2 	-456,ic		000063 = 526000000026
000774  aa  6 00314 2521 00	spri2	pr6|204
000775  aa   777047 3520 04	epp2 	-473,ic		000044 = 524000000017
000776  aa  6 00316 2521 00	spri2	pr6|206
000777  aa  6 00302 6211 00	eax1 	pr6|194
001000  aa   014000 4310 07	fld  	6144,dl
001001  aa  6 00044 3701 20	epp4 	pr6|36,*
001002  la  4 00014 3521 20	epp2 	pr4|12,*		com_err_
001003  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 153
		return;

001004  aa  0 00631 7101 00	tra  	pr0|409		return
						STATEMENT 1 ON LINE 154
	     end;

						STATEMENT 1 ON LINE 156
	call ioa_ ("^/Total metering time^-^a", formatted_time);

001005  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
001006  aa   777302 00 0034	desc9a	-318,28		000307 = 136057124157
001007  aa  6 00262 00 0034	desc9a	pr6|178,28
001010  aa  6 00262 3521 00	epp2 	pr6|178
001011  aa  6 00304 2521 00	spri2	pr6|196
001012  aa  6 00135 3521 00	epp2 	pr6|93		formatted_time
001013  aa  6 00306 2521 00	spri2	pr6|198
001014  aa   777027 3520 04	epp2 	-489,ic		000043 = 524000000031
001015  aa  6 00310 2521 00	spri2	pr6|200
001016  aa   777027 3520 04	epp2 	-489,ic		000045 = 526000000012
001017  aa  6 00312 2521 00	spri2	pr6|202
001020  aa  6 00302 6211 00	eax1 	pr6|194
001021  aa   010000 4310 07	fld  	4096,dl
001022  aa  6 00044 3701 20	epp4 	pr6|36,*
001023  la  4 00022 3521 20	epp2 	pr4|18,*		ioa_
001024  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 158
	cpu_time = cur_tcm.processor_time - prev_tcm.processor_time;

001025  aa  6 00132 3735 20	epp7 	pr6|90,*		cur_ptrs
001026  aa  7 00042 2371 00	ldaq 	pr7|34		cur_tcm.processor_time
001027  aa  6 00172 3715 20	epp5 	pr6|122,*		prev_ptrs
001030  aa  5 00042 1771 00	sbaq 	pr5|34		prev_tcm.processor_time
001031  aa   216000 4110 03	lde  	72704,du
001032  aa   400000 4750 03	fad  	131072,du
001033  aa  6 00127 4551 00	fst  	pr6|87		cpu_time
						STATEMENT 1 ON LINE 159
	meter_time = float (meter_time_micsec) / 1.0e2;

001034  aa   016620 4310 03	fld  	7568,du
001035  aa  6 00274 4571 00	dfst 	pr6|188
001036  aa  6 00144 2371 00	ldaq 	pr6|100		meter_time_micsec
001037  aa   216000 4110 03	lde  	72704,du
001040  aa   400000 4750 03	fad  	131072,du
001041  aa  6 00274 5671 00	dfdv 	pr6|188
001042  aa  6 00143 4551 00	fst  	pr6|99		meter_time
						STATEMENT 1 ON LINE 161
	if general_sw
	then do;

001043  aa  6 00140 2351 00	lda  	pr6|96		general_sw
001044  aa   000124 6000 04	tze  	84,ic		001170
						STATEMENT 1 ON LINE 163
		total_waits, total_notifies = 0;

001045  aa  6 00241 4501 00	stz  	pr6|161		total_waits
001046  aa  6 00240 4501 00	stz  	pr6|160		total_notifies
						STATEMENT 1 ON LINE 164
		call ioa_ ("^/Ave queue length^9.2f", cur_tcm.avequeue * 1e0);

001047  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
001050  aa   777214 00 0030	desc9a	-372,24		000263 = 136057101166
001051  aa  6 00254 00 0030	desc9a	pr6|172,24
001052  aa  7 00016 2351 00	lda  	pr7|14		cur_tcm.avequeue
001053  aa   000044 7330 00	lrs  	36
001054  aa   152000 4110 03	lde  	54272,du
001055  aa   400000 4750 03	fad  	131072,du
001056  aa   002400 4610 03	fmp  	1280,du
001057  aa  6 00274 4571 00	dfst 	pr6|188
001060  aa  6 00254 3521 00	epp2 	pr6|172
001061  aa  6 00264 2521 00	spri2	pr6|180
001062  aa  6 00274 3521 00	epp2 	pr6|188
001063  aa  6 00266 2521 00	spri2	pr6|182
001064  aa   776756 3520 04	epp2 	-530,ic		000042 = 524000000027
001065  aa  6 00270 2521 00	spri2	pr6|184
001066  aa   776753 3520 04	epp2 	-533,ic		000041 = 420000000043
001067  aa  6 00272 2521 00	spri2	pr6|186
001070  aa  6 00262 6211 00	eax1 	pr6|178
001071  aa   010000 4310 07	fld  	4096,dl
001072  aa  6 00044 3701 20	epp4 	pr6|36,*
001073  la  4 00022 3521 20	epp2 	pr4|18,*		ioa_
001074  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 165
		call ioa_ ("Ave eligible    ^9.2f", cur_tcm.ave_eligible * 1e0);

001075  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
001076  aa   777160 00 0030	desc9a	-400,24		000255 = 101166145040
001077  aa  6 00254 00 0030	desc9a	pr6|172,24
001100  aa  6 00132 3735 20	epp7 	pr6|90,*		cur_ptrs
001101  aa  7 00040 2351 00	lda  	pr7|32		cur_tcm.ave_eligible
001102  aa   000044 7330 00	lrs  	36
001103  aa   152000 4110 03	lde  	54272,du
001104  aa   400000 4750 03	fad  	131072,du
001105  aa   002400 4610 03	fmp  	1280,du
001106  aa  6 00274 4571 00	dfst 	pr6|188
001107  aa  6 00254 3521 00	epp2 	pr6|172
001110  aa  6 00264 2521 00	spri2	pr6|180
001111  aa  6 00274 3521 00	epp2 	pr6|188
001112  aa  6 00266 2521 00	spri2	pr6|182
001113  aa   776725 3520 04	epp2 	-555,ic		000040 = 524000000025
001114  aa  6 00270 2521 00	spri2	pr6|184
001115  aa   776724 3520 04	epp2 	-556,ic		000041 = 420000000043
001116  aa  6 00272 2521 00	spri2	pr6|186
001117  aa  6 00262 6211 00	eax1 	pr6|178
001120  aa   010000 4310 07	fld  	4096,dl
001121  aa  6 00044 3701 20	epp4 	pr6|36,*
001122  la  4 00022 3521 20	epp2 	pr4|18,*		ioa_
001123  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 166
		numint = cur_tcm.response_count - prev_tcm.response_count;

001124  aa  6 00132 3735 20	epp7 	pr6|90,*		cur_ptrs
001125  aa  7 00050 2361 00	ldq  	pr7|40		cur_tcm.response_count
001126  aa  6 00172 3715 20	epp5 	pr6|122,*		prev_ptrs
001127  aa  5 00050 1761 00	sbq  	pr5|40		prev_tcm.response_count
001130  aa  0 00465 7001 00	tsx0 	pr0|309		fx1_to_fl2
001131  aa  6 00147 4551 00	fst  	pr6|103		numint
						STATEMENT 1 ON LINE 167
		delta = cur_tcm.response_time - prev_tcm.response_time;

001132  aa  7 00044 2371 00	ldaq 	pr7|36		cur_tcm.response_time
001133  aa  5 00044 1771 00	sbaq 	pr5|36		prev_tcm.response_time
001134  aa   216000 4110 03	lde  	72704,du
001135  aa   400000 4750 03	fad  	131072,du
001136  aa  6 00134 4551 00	fst  	pr6|92		delta
						STATEMENT 1 ON LINE 168
		if numint = 0e0
		then atb = 0e0;

001137  aa  6 00147 4311 00	fld  	pr6|103		numint
001140  aa   000004 6010 04	tnz  	4,ic		001144
001141  aa   400000 4310 03	fld  	131072,du
001142  aa  6 00104 4551 00	fst  	pr6|68		atb
001143  aa   000005 7100 04	tra  	5,ic		001150
						STATEMENT 1 ON LINE 170
		else atb = 1e-6 * delta / numint;

001144  aa   776673 4310 04	fld  	-581,ic		000037 = 732414336750
001145  aa  6 00134 4611 00	fmp  	pr6|92		delta
001146  aa  6 00147 5651 00	fdv  	pr6|103		numint
001147  aa  6 00104 4551 00	fst  	pr6|68		atb
						STATEMENT 1 ON LINE 171
		call ioa_ ("Response time    ^9.3f sec", atb);

001150  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
001151  aa   777130 00 0034	desc9a	-424,28		000300 = 122145163160
001152  aa  6 00262 00 0034	desc9a	pr6|178,28
001153  aa  6 00262 3521 00	epp2 	pr6|178
001154  aa  6 00304 2521 00	spri2	pr6|196
001155  aa  6 00104 3521 00	epp2 	pr6|68		atb
001156  aa  6 00306 2521 00	spri2	pr6|198
001157  aa   776657 3520 04	epp2 	-593,ic		000036 = 524000000032
001160  aa  6 00310 2521 00	spri2	pr6|200
001161  aa   776654 3520 04	epp2 	-596,ic		000035 = 414000000033
001162  aa  6 00312 2521 00	spri2	pr6|202
001163  aa  6 00302 6211 00	eax1 	pr6|194
001164  aa   010000 4310 07	fld  	4096,dl
001165  aa  6 00044 3701 20	epp4 	pr6|36,*
001166  la  4 00022 3521 20	epp2 	pr4|18,*		ioa_
001167  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 172
	     end;

						STATEMENT 1 ON LINE 173
	if counters_sw
	then do;

001170  aa  6 00131 2351 00	lda  	pr6|89		counters_sw
001171  aa   000635 6000 04	tze  	413,ic		002026
						STATEMENT 1 ON LINE 175
		call ioa_ ("^/  COUNTER          TOTAL         ATB       #/INT^/");

001172  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
001173  aa   777137 00 0064	desc9a	-417,52		000331 = 136057040040
001174  aa  6 00302 00 0064	desc9a	pr6|194,52
001175  aa  6 00302 3521 00	epp2 	pr6|194
001176  aa  6 00256 2521 00	spri2	pr6|174
001177  aa   776635 3520 04	epp2 	-611,ic		000034 = 524000000064
001200  aa  6 00260 2521 00	spri2	pr6|176
001201  aa  6 00254 6211 00	eax1 	pr6|172
001202  aa   004000 4310 07	fld  	2048,dl
001203  aa  6 00044 3701 20	epp4 	pr6|36,*
001204  la  4 00022 3521 20	epp2 	pr4|18,*		ioa_
001205  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 176
		intc, delta = cur_tcm.response_count - prev_tcm.response_count;

001206  aa  6 00132 3735 20	epp7 	pr6|90,*		cur_ptrs
001207  aa  7 00050 2361 00	ldq  	pr7|40		cur_tcm.response_count
001210  aa  6 00172 3715 20	epp5 	pr6|122,*		prev_ptrs
001211  aa  5 00050 1761 00	sbq  	pr5|40		prev_tcm.response_count
001212  aa  6 00276 7561 00	stq  	pr6|190
001213  aa  0 00465 7001 00	tsx0 	pr0|309		fx1_to_fl2
001214  aa  6 00142 4551 00	fst  	pr6|98		intc
001215  aa  6 00276 2361 00	ldq  	pr6|190
001216  aa  0 00465 7001 00	tsx0 	pr0|309		fx1_to_fl2
001217  aa  6 00134 4551 00	fst  	pr6|92		delta
						STATEMENT 1 ON LINE 177
		call print ("Interactions", SEC, NOP);

001220  aa   776726 2370 04	ldaq 	-554,ic		000146 = 111156164145 162141143164
001221  aa  6 00254 7571 00	staq 	pr6|172
001222  aa   776726 2350 04	lda  	-554,ic		000150 = 151157156163
001223  aa  6 00256 7551 00	sta  	pr6|174
001224  aa   001676 3520 04	epp2 	958,ic		003122 = 000006000000
001225  aa  2 00000 2351 00	lda  	pr2|0
001226  aa   001116 6700 04	tsp4 	590,ic		002344
						STATEMENT 1 ON LINE 178
		delta = cur_tcm.loadings - prev_tcm.loadings;

001227  aa  6 00132 3735 20	epp7 	pr6|90,*		cur_ptrs
001230  aa  7 00007 2361 00	ldq  	pr7|7		cur_tcm.loadings
001231  aa  6 00172 3715 20	epp5 	pr6|122,*		prev_ptrs
001232  aa  5 00007 1761 00	sbq  	pr5|7		prev_tcm.loadings
001233  aa  0 00465 7001 00	tsx0 	pr0|309		fx1_to_fl2
001234  aa  6 00134 4551 00	fst  	pr6|92		delta
						STATEMENT 1 ON LINE 179
		call print ("Loadings", SEC, PER);

001235  aa   776643 2370 04	ldaq 	-605,ic		000100 = 114157141144 151156147163
001236  aa  6 00274 7571 00	staq 	pr6|188
001237  aa   001645 3520 04	epp2 	933,ic		003104 = 000006000000
001240  aa  2 00000 2351 00	lda  	pr2|0
001241  aa   001103 6700 04	tsp4 	579,ic		002344
						STATEMENT 1 ON LINE 180
		delta = cur_tcm.blocks - prev_tcm.blocks;

001242  aa  6 00132 3735 20	epp7 	pr6|90,*		cur_ptrs
001243  aa  7 00010 2361 00	ldq  	pr7|8		cur_tcm.blocks
001244  aa  6 00172 3715 20	epp5 	pr6|122,*		prev_ptrs
001245  aa  5 00010 1761 00	sbq  	pr5|8		prev_tcm.blocks
001246  aa  0 00465 7001 00	tsx0 	pr0|309		fx1_to_fl2
001247  aa  6 00134 4551 00	fst  	pr6|92		delta
						STATEMENT 1 ON LINE 181
		call print ("Blocks", SEC, NOP);

001250  aa   776626 2370 04	ldaq 	-618,ic		000076 = 102154157143 153163000000
001251  aa  6 00274 7571 00	staq 	pr6|188
001252  aa   001614 3520 04	epp2 	908,ic		003066 = 000006000000
001253  aa  2 00000 2351 00	lda  	pr2|0
001254  aa   001070 6700 04	tsp4 	568,ic		002344
						STATEMENT 1 ON LINE 182
		delta = cur_tcm.pauses - prev_tcm.pauses;

001255  aa   000436 2360 07	ldq  	286,dl
001256  aa   000001 0760 07	adq  	1,dl
001257  aa   777776 3760 07	anq  	262142,dl
001260  aa   000010 0760 07	adq  	8,dl
001261  aa   000001 0760 07	adq  	1,dl
001262  aa   777776 3760 07	anq  	262142,dl
001263  aa   000006 0760 07	adq  	6,dl
001264  aa   000001 0760 07	adq  	1,dl
001265  aa   777776 3760 07	anq  	262142,dl
001266  aa  6 00132 3735 20	epp7 	pr6|90,*		cur_ptrs
001267  aa   000000 6270 06	eax7 	0,ql
001270  aa  7 00011 3361 06	lcq  	pr7|9,ql		cur_tcm.pauses
001271  aa   000044 7770 00	llr  	36
001272  aa   000044 7330 00	lrs  	36
001273  aa  6 00172 3715 20	epp5 	pr6|122,*		prev_ptrs
001274  aa  5 00011 0331 17	adl  	pr5|9,7		prev_tcm.pauses
001275  aa   000000 5330 00	negl 	0
001276  aa   216000 4110 03	lde  	72704,du
001277  aa   400000 4750 03	fad  	131072,du
001300  aa  6 00134 4551 00	fst  	pr6|92		delta
						STATEMENT 1 ON LINE 183
		if delta ^= 0
		then call print ("Pauses", SEC, NOP);

001301  aa   000006 6000 04	tze  	6,ic		001307
001302  aa   776572 2370 04	ldaq 	-646,ic		000074 = 120141165163 145163000000
001303  aa  6 00274 7571 00	staq 	pr6|188
001304  aa   001562 3520 04	epp2 	882,ic		003066 = 000006000000
001305  aa  2 00000 2351 00	lda  	pr2|0
001306  aa   001036 6700 04	tsp4 	542,ic		002344
						STATEMENT 1 ON LINE 185
		delta = cur_tcm.wakeups - prev_tcm.wakeups;

001307  aa  6 00132 3735 20	epp7 	pr6|90,*		cur_ptrs
001310  aa  7 00011 2361 00	ldq  	pr7|9		cur_tcm.wakeups
001311  aa  6 00172 3715 20	epp5 	pr6|122,*		prev_ptrs
001312  aa  5 00011 1761 00	sbq  	pr5|9		prev_tcm.wakeups
001313  aa  0 00465 7001 00	tsx0 	pr0|309		fx1_to_fl2
001314  aa  6 00134 4551 00	fst  	pr6|92		delta
						STATEMENT 1 ON LINE 186
		call print ("Wakeups", SEC, NOP);

001315  aa   776555 2370 04	ldaq 	-659,ic		000072 = 127141153145 165160163000
001316  aa  6 00274 7571 00	staq 	pr6|188
001317  aa   001531 3520 04	epp2 	857,ic		003050 = 000006000000
001320  aa  2 00000 2351 00	lda  	pr2|0
001321  aa   001023 6700 04	tsp4 	531,ic		002344
						STATEMENT 1 ON LINE 187
		delta = cur_tcm.schedulings - prev_tcm.schedulings;

001322  aa  6 00132 3735 20	epp7 	pr6|90,*		cur_ptrs
001323  aa  7 00014 2361 00	ldq  	pr7|12		cur_tcm.schedulings
001324  aa  6 00172 3715 20	epp5 	pr6|122,*		prev_ptrs
001325  aa  5 00014 1761 00	sbq  	pr5|12		prev_tcm.schedulings
001326  aa  0 00465 7001 00	tsx0 	pr0|309		fx1_to_fl2
001327  aa  6 00134 4551 00	fst  	pr6|92		delta
						STATEMENT 1 ON LINE 188
		call print ("Schedulings", SEC, PER);

001330  aa   776613 2350 04	lda  	-629,ic		000143 = 123143150145
001331  aa   776613 2360 04	ldq  	-629,ic		000144 = 144165154151
001332  aa  6 00254 7571 00	staq 	pr6|172
001333  aa   776612 2350 04	lda  	-630,ic		000145 = 156147163000
001334  aa  6 00256 7551 00	sta  	pr6|174
001335  aa   001475 3520 04	epp2 	829,ic		003032 = 000006000000
001336  aa  2 00000 2351 00	lda  	pr2|0
001337  aa   001005 6700 04	tsp4 	517,ic		002344
						STATEMENT 1 ON LINE 189
		delta = cur_tcm.lost_priority - prev_tcm.lost_priority;

001340  aa  6 00132 3735 20	epp7 	pr6|90,*		cur_ptrs
001341  aa  7 00273 2361 00	ldq  	pr7|187		cur_tcm.lost_priority
001342  aa  6 00172 3715 20	epp5 	pr6|122,*		prev_ptrs
001343  aa  5 00273 1761 00	sbq  	pr5|187		prev_tcm.lost_priority
001344  aa  0 00465 7001 00	tsx0 	pr0|309		fx1_to_fl2
001345  aa  6 00134 4551 00	fst  	pr6|92		delta
						STATEMENT 1 ON LINE 190
		call print ("Lost priority", SEC, NOP);

001346  aa   776636 2370 04	ldaq 	-610,ic		000204 = 114157163164 040160162151
001347  aa  6 00254 7571 00	staq 	pr6|172
001350  aa   776636 2370 04	ldaq 	-610,ic		000206 = 157162151164 171000000000
001351  aa  6 00256 7571 00	staq 	pr6|174
001352  aa   001442 3520 04	epp2 	802,ic		003014 = 000006000000
001353  aa  2 00000 2351 00	lda  	pr2|0
001354  aa   000770 6700 04	tsp4 	504,ic		002344
						STATEMENT 1 ON LINE 191
		delta = cur_tcm.boost_priority - prev_tcm.boost_priority;

001355  aa  6 00132 3735 20	epp7 	pr6|90,*		cur_ptrs
001356  aa  7 00272 2361 00	ldq  	pr7|186		cur_tcm.boost_priority
001357  aa  6 00172 3715 20	epp5 	pr6|122,*		prev_ptrs
001360  aa  5 00272 1761 00	sbq  	pr5|186		prev_tcm.boost_priority
001361  aa  0 00465 7001 00	tsx0 	pr0|309		fx1_to_fl2
001362  aa  6 00134 4551 00	fst  	pr6|92		delta
						STATEMENT 1 ON LINE 192
		call print ("Priority boosts", SEC, NOP);

001363  aa   776615 2370 04	ldaq 	-627,ic		000200 = 120162151157 162151164171
001364  aa  6 00254 7571 00	staq 	pr6|172
001365  aa   776615 2370 04	ldaq 	-627,ic		000202 = 040142157157 163164163000
001366  aa  6 00256 7571 00	staq 	pr6|174
001367  aa   001407 3520 04	epp2 	775,ic		002776 = 000006000000
001370  aa  2 00000 2351 00	lda  	pr2|0
001371  aa   000753 6700 04	tsp4 	491,ic		002344
						STATEMENT 1 ON LINE 193
		delta = cur_tcm.realtime_priorities - prev_tcm.realtime_priorities;

001372  aa   000436 2360 07	ldq  	286,dl
001373  aa   000001 0760 07	adq  	1,dl
001374  aa   777776 3760 07	anq  	262142,dl
001375  aa   000010 0760 07	adq  	8,dl
001376  aa   000001 0760 07	adq  	1,dl
001377  aa   777776 3760 07	anq  	262142,dl
001400  aa   000006 0760 07	adq  	6,dl
001401  aa   000001 0760 07	adq  	1,dl
001402  aa   777776 3760 07	anq  	262142,dl
001403  aa   000012 0760 07	adq  	10,dl
001404  aa   000001 0760 07	adq  	1,dl
001405  aa   777776 3760 07	anq  	262142,dl
001406  aa  6 00132 3735 20	epp7 	pr6|90,*		cur_ptrs
001407  aa   000000 6270 06	eax7 	0,ql
001410  aa  7 00007 3361 06	lcq  	pr7|7,ql		cur_tcm.realtime_priorities
001411  aa   000044 7770 00	llr  	36
001412  aa   000044 7330 00	lrs  	36
001413  aa  6 00172 3715 20	epp5 	pr6|122,*		prev_ptrs
001414  aa  5 00007 0331 17	adl  	pr5|7,7		prev_tcm.realtime_priorities
001415  aa   000000 5330 00	negl 	0
001416  aa   216000 4110 03	lde  	72704,du
001417  aa   400000 4750 03	fad  	131072,du
001420  aa  6 00134 4551 00	fst  	pr6|92		delta
						STATEMENT 1 ON LINE 194
		call print ("I/O boosts", SEC, NOP);

001421  aa   776517 2370 04	ldaq 	-689,ic		000140 = 111057117040 142157157163
001422  aa  6 00254 7571 00	staq 	pr6|172
001423  aa   164163 2350 03	lda  	59507,du
001424  aa  6 00256 7551 00	sta  	pr6|174
001425  aa   001333 3520 04	epp2 	731,ic		002760 = 000006000000
001426  aa  2 00000 2351 00	lda  	pr2|0
001427  aa   000715 6700 04	tsp4 	461,ic		002344
						STATEMENT 1 ON LINE 195
		delta = cur_tcm.waits - prev_tcm.waits;

001430  aa  6 00132 3735 20	epp7 	pr6|90,*		cur_ptrs
001431  aa  7 00012 2361 00	ldq  	pr7|10		cur_tcm.waits
001432  aa  6 00172 3715 20	epp5 	pr6|122,*		prev_ptrs
001433  aa  5 00012 1761 00	sbq  	pr5|10		prev_tcm.waits
001434  aa  0 00465 7001 00	tsx0 	pr0|309		fx1_to_fl2
001435  aa  6 00134 4551 00	fst  	pr6|92		delta
						STATEMENT 1 ON LINE 196
		total_waits = total_waits + delta;

001436  aa  6 00241 2361 00	ldq  	pr6|161		total_waits
001437  aa  0 00465 7001 00	tsx0 	pr0|309		fx1_to_fl2
001440  aa  6 00134 4751 00	fad  	pr6|92		delta
001441  aa  0 00654 7001 00	tsx0 	pr0|428		fl2_to_fx1
001442  aa  6 00241 7561 00	stq  	pr6|161		total_waits
						STATEMENT 1 ON LINE 197
		call print ("Wait Page", MILLI, PER);

001443  aa   776472 2350 04	lda  	-710,ic		000135 = 127141151164
001444  aa   776472 2360 04	ldq  	-710,ic		000136 = 040120141147
001445  aa  6 00254 7571 00	staq 	pr6|172
001446  aa   145000 2350 03	lda  	51712,du
001447  aa  6 00256 7551 00	sta  	pr6|174
001450  aa   001272 3520 04	epp2 	698,ic		002742 = 000006000000
001451  aa  2 00000 2351 00	lda  	pr2|0
001452  aa   000672 6700 04	tsp4 	442,ic		002344
						STATEMENT 1 ON LINE 198
		delta = cur_tcm.ptl_waits - prev_tcm.ptl_waits;

001453  aa  6 00132 3735 20	epp7 	pr6|90,*		cur_ptrs
001454  aa  7 00143 2361 00	ldq  	pr7|99		cur_tcm.ptl_waits
001455  aa  6 00172 3715 20	epp5 	pr6|122,*		prev_ptrs
001456  aa  5 00143 1761 00	sbq  	pr5|99		prev_tcm.ptl_waits
001457  aa  0 00465 7001 00	tsx0 	pr0|309		fx1_to_fl2
001460  aa  6 00134 4551 00	fst  	pr6|92		delta
						STATEMENT 1 ON LINE 199
		total_waits = total_waits + delta;

001461  aa  6 00241 2361 00	ldq  	pr6|161		total_waits
001462  aa  0 00465 7001 00	tsx0 	pr0|309		fx1_to_fl2
001463  aa  6 00134 4751 00	fad  	pr6|92		delta
001464  aa  0 00654 7001 00	tsx0 	pr0|428		fl2_to_fx1
001465  aa  6 00241 7561 00	stq  	pr6|161		total_waits
						STATEMENT 1 ON LINE 200
		if delta ^= 0
		then call print ("Wait PTL", MILLI, PER);

001466  aa  6 00134 4311 00	fld  	pr6|92		delta
001467  aa   000006 6000 04	tze  	6,ic		001475
001470  aa   776400 2370 04	ldaq 	-768,ic		000070 = 127141151164 040120124114
001471  aa  6 00274 7571 00	staq 	pr6|188
001472  aa   001232 3520 04	epp2 	666,ic		002724 = 000006000000
001473  aa  2 00000 2351 00	lda  	pr2|0
001474  aa   000650 6700 04	tsp4 	424,ic		002344
						STATEMENT 1 ON LINE 202
		delta = cur_tcm.te_wait - prev_tcm.te_wait;

001475  aa  6 00132 3735 20	epp7 	pr6|90,*		cur_ptrs
001476  aa  7 00017 2361 00	ldq  	pr7|15		cur_tcm.te_wait
001477  aa  6 00172 3715 20	epp5 	pr6|122,*		prev_ptrs
001500  aa  5 00017 1761 00	sbq  	pr5|15		prev_tcm.te_wait
001501  aa  0 00465 7001 00	tsx0 	pr0|309		fx1_to_fl2
001502  aa  6 00134 4551 00	fst  	pr6|92		delta
						STATEMENT 1 ON LINE 203
		total_waits = total_waits + delta;

001503  aa  6 00241 2361 00	ldq  	pr6|161		total_waits
001504  aa  0 00465 7001 00	tsx0 	pr0|309		fx1_to_fl2
001505  aa  6 00134 4751 00	fad  	pr6|92		delta
001506  aa  0 00654 7001 00	tsx0 	pr0|428		fl2_to_fx1
001507  aa  6 00241 7561 00	stq  	pr6|161		total_waits
						STATEMENT 1 ON LINE 204
		call print ("Wait Other", MILLI, PER);

001510  aa   776422 2370 04	ldaq 	-750,ic		000132 = 127141151164 040117164150
001511  aa  6 00254 7571 00	staq 	pr6|172
001512  aa   145162 2350 03	lda  	51826,du
001513  aa  6 00256 7551 00	sta  	pr6|174
001514  aa   001172 3520 04	epp2 	634,ic		002706 = 000006000000
001515  aa  2 00000 2351 00	lda  	pr2|0
001516  aa   000626 6700 04	tsp4 	406,ic		002344
						STATEMENT 1 ON LINE 205
		delta = total_waits;

001517  aa  6 00241 2361 00	ldq  	pr6|161		total_waits
001520  aa  0 00465 7001 00	tsx0 	pr0|309		fx1_to_fl2
001521  aa  6 00134 4551 00	fst  	pr6|92		delta
						STATEMENT 1 ON LINE 206
		call print ("Total Waits", MILLI, PER);

001522  aa   776405 2350 04	lda  	-763,ic		000127 = 124157164141
001523  aa   776405 2360 04	ldq  	-763,ic		000130 = 154040127141
001524  aa  6 00254 7571 00	staq 	pr6|172
001525  aa   776404 2350 04	lda  	-764,ic		000131 = 151164163000
001526  aa  6 00256 7551 00	sta  	pr6|174
001527  aa   001141 3520 04	epp2 	609,ic		002670 = 000006000000
001530  aa  2 00000 2351 00	lda  	pr2|0
001531  aa   000613 6700 04	tsp4 	395,ic		002344
						STATEMENT 1 ON LINE 207
		delta = cur_tcm.page_notifies - prev_tcm.page_notifies;

001532  aa  6 00132 3735 20	epp7 	pr6|90,*		cur_ptrs
001533  aa  7 00154 2361 00	ldq  	pr7|108		cur_tcm.page_notifies
001534  aa  6 00172 3715 20	epp5 	pr6|122,*		prev_ptrs
001535  aa  5 00154 1761 00	sbq  	pr5|108		prev_tcm.page_notifies
001536  aa  0 00465 7001 00	tsx0 	pr0|309		fx1_to_fl2
001537  aa  6 00134 4551 00	fst  	pr6|92		delta
						STATEMENT 1 ON LINE 208
		total_notifies = total_notifies + delta;

001540  aa  6 00240 2361 00	ldq  	pr6|160		total_notifies
001541  aa  0 00465 7001 00	tsx0 	pr0|309		fx1_to_fl2
001542  aa  6 00134 4751 00	fad  	pr6|92		delta
001543  aa  0 00654 7001 00	tsx0 	pr0|428		fl2_to_fx1
001544  aa  6 00240 7561 00	stq  	pr6|160		total_notifies
						STATEMENT 1 ON LINE 209
		call print ("Notify Page", MILLI, NOP);

001545  aa   776357 2370 04	ldaq 	-785,ic		000124 = 116157164151 146171040120
001546  aa  6 00254 7571 00	staq 	pr6|172
001547  aa   776357 2350 04	lda  	-785,ic		000126 = 141147145000
001550  aa  6 00256 7551 00	sta  	pr6|174
001551  aa   001101 3520 04	epp2 	577,ic		002652 = 000006000000
001552  aa  2 00000 2351 00	lda  	pr2|0
001553  aa   000571 6700 04	tsp4 	377,ic		002344
						STATEMENT 1 ON LINE 210
		delta = cur_tcm.ptl_waits - prev_tcm.ptl_waits - (cur_tcm.stat (6) - prev_tcm.stat (6));

001554  aa  6 00132 3735 20	epp7 	pr6|90,*		cur_ptrs
001555  aa  7 00166 2361 00	ldq  	pr7|118		cur_tcm.stat
001556  aa  6 00172 3715 20	epp5 	pr6|122,*		prev_ptrs
001557  aa  5 00166 1761 00	sbq  	pr5|118		prev_tcm.stat
001560  aa  6 00276 7561 00	stq  	pr6|190
001561  aa  7 00143 2361 00	ldq  	pr7|99		cur_tcm.ptl_waits
001562  aa  5 00143 1761 00	sbq  	pr5|99		prev_tcm.ptl_waits
001563  aa  6 00276 1761 00	sbq  	pr6|190
001564  aa  0 00465 7001 00	tsx0 	pr0|309		fx1_to_fl2
001565  aa  6 00134 4551 00	fst  	pr6|92		delta
						STATEMENT 1 ON LINE 212
		total_notifies = total_notifies + delta;

001566  aa  6 00240 2361 00	ldq  	pr6|160		total_notifies
001567  aa  0 00465 7001 00	tsx0 	pr0|309		fx1_to_fl2
001570  aa  6 00134 4751 00	fad  	pr6|92		delta
001571  aa  0 00654 7001 00	tsx0 	pr0|428		fl2_to_fx1
001572  aa  6 00240 7561 00	stq  	pr6|160		total_notifies
						STATEMENT 1 ON LINE 213
		if delta ^= 0
		then call print ("Notify PTL", MILLI, NOP);

001573  aa  6 00134 4311 00	fld  	pr6|92		delta
001574  aa   000011 6000 04	tze  	9,ic		001605
001575  aa   776324 2350 04	lda  	-812,ic		000121 = 116157164151
001576  aa   776324 2360 04	ldq  	-812,ic		000122 = 146171040120
001577  aa  6 00254 7571 00	staq 	pr6|172
001600  aa   124114 2350 03	lda  	43084,du
001601  aa  6 00256 7551 00	sta  	pr6|174
001602  aa   001032 3520 04	epp2 	538,ic		002634 = 000006000000
001603  aa  2 00000 2351 00	lda  	pr2|0
001604  aa   000540 6700 04	tsp4 	352,ic		002344
						STATEMENT 1 ON LINE 215
		delta = cur_tcm.notifies - prev_tcm.notifies;

001605  aa  6 00132 3735 20	epp7 	pr6|90,*		cur_ptrs
001606  aa  7 00013 2361 00	ldq  	pr7|11		cur_tcm.notifies
001607  aa  6 00172 3715 20	epp5 	pr6|122,*		prev_ptrs
001610  aa  5 00013 1761 00	sbq  	pr5|11		prev_tcm.notifies
001611  aa  0 00465 7001 00	tsx0 	pr0|309		fx1_to_fl2
001612  aa  6 00134 4551 00	fst  	pr6|92		delta
						STATEMENT 1 ON LINE 216
		total_notifies = total_notifies + delta;

001613  aa  6 00240 2361 00	ldq  	pr6|160		total_notifies
001614  aa  0 00465 7001 00	tsx0 	pr0|309		fx1_to_fl2
001615  aa  6 00134 4751 00	fad  	pr6|92		delta
001616  aa  0 00654 7001 00	tsx0 	pr0|428		fl2_to_fx1
001617  aa  6 00240 7561 00	stq  	pr6|160		total_notifies
						STATEMENT 1 ON LINE 217
		call print ("Notify Other", MILLI, NOP);

001620  aa   776276 2370 04	ldaq 	-834,ic		000116 = 116157164151 146171040117
001621  aa  6 00254 7571 00	staq 	pr6|172
001622  aa   776276 2350 04	lda  	-834,ic		000120 = 164150145162
001623  aa  6 00256 7551 00	sta  	pr6|174
001624  aa   000772 3520 04	epp2 	506,ic		002616 = 000006000000
001625  aa  2 00000 2351 00	lda  	pr2|0
001626  aa   000516 6700 04	tsp4 	334,ic		002344
						STATEMENT 1 ON LINE 218
		delta = total_notifies;

001627  aa  6 00240 2361 00	ldq  	pr6|160		total_notifies
001630  aa  0 00465 7001 00	tsx0 	pr0|309		fx1_to_fl2
001631  aa  6 00134 4551 00	fst  	pr6|92		delta
						STATEMENT 1 ON LINE 219
		call print ("Total Notifies", MILLI, NOP);

001632  aa   776342 2370 04	ldaq 	-798,ic		000174 = 124157164141 154040116157
001633  aa  6 00254 7571 00	staq 	pr6|172
001634  aa   776342 2370 04	ldaq 	-798,ic		000176 = 164151146151 145163000000
001635  aa  6 00256 7571 00	staq 	pr6|174
001636  aa   000742 3520 04	epp2 	482,ic		002600 = 000006000000
001637  aa  2 00000 2351 00	lda  	pr2|0
001640  aa   000504 6700 04	tsp4 	324,ic		002344
						STATEMENT 1 ON LINE 220
		delta = cur_tcm.gp_done_count - prev_tcm.gp_done_count;

001641  aa  6 00132 3735 20	epp7 	pr6|90,*		cur_ptrs
001642  aa  7 00145 2361 00	ldq  	pr7|101		cur_tcm.gp_done_count
001643  aa  6 00172 3715 20	epp5 	pr6|122,*		prev_ptrs
001644  aa  5 00145 1761 00	sbq  	pr5|101		prev_tcm.gp_done_count
001645  aa  0 00465 7001 00	tsx0 	pr0|309		fx1_to_fl2
001646  aa  6 00134 4551 00	fst  	pr6|92		delta
						STATEMENT 1 ON LINE 221
		call print ("Get Processor", MILLI, NOP);

001647  aa   776321 2370 04	ldaq 	-815,ic		000170 = 107145164040 120162157143
001650  aa  6 00254 7571 00	staq 	pr6|172
001651  aa   776321 2370 04	ldaq 	-815,ic		000172 = 145163163157 162000000000
001652  aa  6 00256 7571 00	staq 	pr6|174
001653  aa   000707 3520 04	epp2 	455,ic		002562 = 000006000000
001654  aa  2 00000 2351 00	lda  	pr2|0
001655  aa   000467 6700 04	tsp4 	311,ic		002344
						STATEMENT 1 ON LINE 222
		delta = cur_tcm.te_pre_empt - prev_tcm.te_pre_empt;

001656  aa  6 00132 3735 20	epp7 	pr6|90,*		cur_ptrs
001657  aa  7 00022 2361 00	ldq  	pr7|18		cur_tcm.te_pre_empt
001660  aa  6 00172 3715 20	epp5 	pr6|122,*		prev_ptrs
001661  aa  5 00022 1761 00	sbq  	pr5|18		prev_tcm.te_pre_empt
001662  aa  0 00465 7001 00	tsx0 	pr0|309		fx1_to_fl2
001663  aa  6 00134 4551 00	fst  	pr6|92		delta
						STATEMENT 1 ON LINE 223
		call print ("Pre-empts", MILLI, PER);

001664  aa   776227 2350 04	lda  	-873,ic		000113 = 120162145055
001665  aa   776227 2360 04	ldq  	-873,ic		000114 = 145155160164
001666  aa  6 00254 7571 00	staq 	pr6|172
001667  aa   163000 2350 03	lda  	58880,du
001670  aa  6 00256 7551 00	sta  	pr6|174
001671  aa   001051 3520 04	epp2 	553,ic		002742 = 000006000000
001672  aa  2 00000 2351 00	lda  	pr2|0
001673  aa   000451 6700 04	tsp4 	297,ic		002344
						STATEMENT 1 ON LINE 224
		delta = cur_tcm.depth_count - prev_tcm.depth_count;

001674  aa  6 00132 3735 20	epp7 	pr6|90,*		cur_ptrs
001675  aa  7 00006 2361 00	ldq  	pr7|6		cur_tcm.depth_count
001676  aa  6 00172 3715 20	epp5 	pr6|122,*		prev_ptrs
001677  aa  5 00006 1761 00	sbq  	pr5|6		prev_tcm.depth_count
001700  aa  0 00465 7001 00	tsx0 	pr0|309		fx1_to_fl2
001701  aa  6 00134 4551 00	fst  	pr6|92		delta
						STATEMENT 1 ON LINE 225
		call print ("Getwork", MILLI, NOP);

001702  aa   776164 2370 04	ldaq 	-908,ic		000066 = 107145164167 157162153000
001703  aa  6 00274 7571 00	staq 	pr6|188
001704  aa   000640 3520 04	epp2 	416,ic		002544 = 000006000000
001705  aa  2 00000 2351 00	lda  	pr2|0
001706  aa   000436 6700 04	tsp4 	286,ic		002344
						STATEMENT 1 ON LINE 226
		delta = cur_tcm.gw_gp_window_count - prev_tcm.gw_gp_window_count;

001707  aa  6 00132 3735 20	epp7 	pr6|90,*		cur_ptrs
001710  aa  7 00141 2361 00	ldq  	pr7|97		cur_tcm.gw_gp_window_count
001711  aa  6 00172 3715 20	epp5 	pr6|122,*		prev_ptrs
001712  aa  5 00141 1761 00	sbq  	pr5|97		prev_tcm.gw_gp_window_count
001713  aa  0 00465 7001 00	tsx0 	pr0|309		fx1_to_fl2
001714  aa  6 00134 4551 00	fst  	pr6|92		delta
						STATEMENT 1 ON LINE 227
		if delta ^= 0
		then call print ("Retry getwork", SEC, NOP);

001715  aa   000010 6000 04	tze  	8,ic		001725
001716  aa   776246 2370 04	ldaq 	-858,ic		000164 = 122145164162 171040147145
001717  aa  6 00254 7571 00	staq 	pr6|172
001720  aa   776246 2370 04	ldaq 	-858,ic		000166 = 164167157162 153000000000
001721  aa  6 00256 7571 00	staq 	pr6|174
001722  aa   001072 3520 04	epp2 	570,ic		003014 = 000006000000
001723  aa  2 00000 2351 00	lda  	pr2|0
001724  aa   000420 6700 04	tsp4 	272,ic		002344
						STATEMENT 1 ON LINE 229
		delta = cur_tcm.notify_nobody_count - prev_tcm.notify_nobody_count;

001725  aa  6 00132 3735 20	epp7 	pr6|90,*		cur_ptrs
001726  aa  7 00155 2361 00	ldq  	pr7|109		cur_tcm.notify_nobody_count
001727  aa  6 00172 3715 20	epp5 	pr6|122,*		prev_ptrs
001730  aa  5 00155 1761 00	sbq  	pr5|109		prev_tcm.notify_nobody_count
001731  aa  0 00465 7001 00	tsx0 	pr0|309		fx1_to_fl2
001732  aa  6 00134 4551 00	fst  	pr6|92		delta
						STATEMENT 1 ON LINE 230
		if delta ^= 0
		then do;

001733  aa   000034 6000 04	tze  	28,ic		001767
						STATEMENT 1 ON LINE 232
			call print ("Extra notifies", SEC, NOP);

001734  aa   776224 2370 04	ldaq 	-876,ic		000160 = 105170164162 141040156157
001735  aa  6 00254 7571 00	staq 	pr6|172
001736  aa   776224 2370 04	ldaq 	-876,ic		000162 = 164151146151 145163000000
001737  aa  6 00256 7571 00	staq 	pr6|174
001740  aa   000566 3520 04	epp2 	374,ic		002526 = 000006000000
001741  aa  2 00000 2351 00	lda  	pr2|0
001742  aa   000402 6700 04	tsp4 	258,ic		002344
						STATEMENT 1 ON LINE 233
			call ioa_ (" Last EN event    ^w", cur_tcm.notify_nobody_event);

001743  aa   776277 2370 04	ldaq 	-833,ic		000242 = 040114141163 164040105116
001744  aa  6 00254 7571 00	staq 	pr6|172
001745  aa   776277 2370 04	ldaq 	-833,ic		000244 = 040145166145 156164040040
001746  aa  6 00256 7571 00	staq 	pr6|174
001747  aa   776277 2350 04	lda  	-833,ic		000246 = 040040136167
001750  aa  6 00260 7551 00	sta  	pr6|176
001751  aa  6 00254 3521 00	epp2 	pr6|172
001752  aa  6 00264 2521 00	spri2	pr6|180
001753  aa  6 00132 3735 20	epp7 	pr6|90,*		cur_ptrs
001754  aa  7 00156 3521 00	epp2 	pr7|110		cur_tcm.notify_nobody_event
001755  aa  6 00266 2521 00	spri2	pr6|182
001756  aa   776044 3520 04	epp2 	-988,ic		000022 = 524000000024
001757  aa  6 00270 2521 00	spri2	pr6|184
001760  aa   776041 3520 04	epp2 	-991,ic		000021 = 514000000044
001761  aa  6 00272 2521 00	spri2	pr6|186
001762  aa  6 00262 6211 00	eax1 	pr6|178
001763  aa   010000 4310 07	fld  	4096,dl
001764  aa  6 00044 3701 20	epp4 	pr6|36,*
001765  la  4 00022 3521 20	epp2 	pr4|18,*		ioa_
001766  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 234
		     end;

						STATEMENT 1 ON LINE 235
		delta = cur_tcm.nto_count - prev_tcm.nto_count;

001767  aa  6 00132 3735 20	epp7 	pr6|90,*		cur_ptrs
001770  aa  7 00151 2361 00	ldq  	pr7|105		cur_tcm.nto_count
001771  aa  6 00172 3715 20	epp5 	pr6|122,*		prev_ptrs
001772  aa  5 00151 1761 00	sbq  	pr5|105		prev_tcm.nto_count
001773  aa  0 00465 7001 00	tsx0 	pr0|309		fx1_to_fl2
001774  aa  6 00134 4551 00	fst  	pr6|92		delta
						STATEMENT 1 ON LINE 236
		if delta ^= 0
		then do;

001775  aa   000031 6000 04	tze  	25,ic		002026
						STATEMENT 1 ON LINE 238
			call print ("Notify timeout", SEC, NOP);

001776  aa   776156 2370 04	ldaq 	-914,ic		000154 = 116157164151 146171040164
001777  aa  6 00254 7571 00	staq 	pr6|172
002000  aa   776156 2370 04	ldaq 	-914,ic		000156 = 151155145157 165164000000
002001  aa  6 00256 7571 00	staq 	pr6|174
002002  aa   000524 3520 04	epp2 	340,ic		002526 = 000006000000
002003  aa  2 00000 2351 00	lda  	pr2|0
002004  aa   000340 6700 04	tsp4 	224,ic		002344
						STATEMENT 1 ON LINE 239
			call ioa_ (" Last NTO event   ^w", cur_tcm.nto_event);

002005  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
002006  aa   776230 00 0024	desc9a	-872,20		000235 = 040114141163
002007  aa  6 00254 00 0024	desc9a	pr6|172,20
002010  aa  6 00254 3521 00	epp2 	pr6|172
002011  aa  6 00264 2521 00	spri2	pr6|180
002012  aa  6 00132 3735 20	epp7 	pr6|90,*		cur_ptrs
002013  aa  7 00153 3521 00	epp2 	pr7|107		cur_tcm.nto_event
002014  aa  6 00266 2521 00	spri2	pr6|182
002015  aa   776005 3520 04	epp2 	-1019,ic		000022 = 524000000024
002016  aa  6 00270 2521 00	spri2	pr6|184
002017  aa   776002 3520 04	epp2 	-1022,ic		000021 = 514000000044
002020  aa  6 00272 2521 00	spri2	pr6|186
002021  aa  6 00262 6211 00	eax1 	pr6|178
002022  aa   010000 4310 07	fld  	4096,dl
002023  aa  6 00044 3701 20	epp4 	pr6|36,*
002024  la  4 00022 3521 20	epp2 	pr4|18,*		ioa_
002025  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 240
		     end;

						STATEMENT 1 ON LINE 241
	     end;

						STATEMENT 1 ON LINE 242
	if queue_sw
	then do;

002026  aa  6 00174 2351 00	lda  	pr6|124		queue_sw
002027  aa   000236 6000 04	tze  	158,ic		002265
						STATEMENT 1 ON LINE 244
		call ioa_ ("^/ DEPTH   %PF   TBPF   %GTW   TBS   %CPU^/");

002030  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
002031  aa   776266 00 0054	desc9a	-842,44		000316 = 136057040104
002032  aa  6 00302 00 0054	desc9a	pr6|194,44
002033  aa  6 00302 3521 00	epp2 	pr6|194
002034  aa  6 00256 2521 00	spri2	pr6|174
002035  aa   775763 3520 04	epp2 	-1037,ic		000020 = 524000000053
002036  aa  6 00260 2521 00	spri2	pr6|176
002037  aa  6 00254 6211 00	eax1 	pr6|172
002040  aa   004000 4310 07	fld  	2048,dl
002041  aa  6 00044 3701 20	epp4 	pr6|36,*
002042  la  4 00022 3521 20	epp2 	pr4|18,*		ioa_
002043  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 245
		pfsum, scsum, cpusum = 0e0;

002044  aa   400000 4310 03	fld  	131072,du
002045  aa  6 00171 4551 00	fst  	pr6|121		pfsum
002046  aa  6 00217 4551 00	fst  	pr6|143		scsum
002047  aa  6 00130 4551 00	fst  	pr6|88		cpusum
						STATEMENT 1 ON LINE 246
		do i = 1 to 8;

002050  aa   000001 2360 07	ldq  	1,dl
002051  aa  6 00141 7561 00	stq  	pr6|97		i
002052  aa  6 00141 2361 00	ldq  	pr6|97		i
002053  aa   000010 1160 07	cmpq 	8,dl
002054  aa   000076 6054 04	tpnz 	62,ic		002152
						STATEMENT 1 ON LINE 247
		     p1, pf (i) = cur_tcm.pfdepth (i) - prev_tcm.pfdepth (i);

002055  aa  6 00132 3735 20	epp7 	pr6|90,*		cur_ptrs
002056  aa  7 00127 2361 06	ldq  	pr7|87,ql		cur_tcm.pfdepth
002057  aa  6 00141 7271 00	lxl7 	pr6|97		i
002060  aa  6 00172 3715 20	epp5 	pr6|122,*		prev_ptrs
002061  aa  5 00127 1761 17	sbq  	pr5|87,7		prev_tcm.pfdepth
002062  aa  6 00276 7561 00	stq  	pr6|190
002063  aa  0 00465 7001 00	tsx0 	pr0|309		fx1_to_fl2
002064  aa  6 00150 4551 00	fst  	pr6|104		p1
002065  aa  6 00276 2361 00	ldq  	pr6|190
002066  aa  0 00465 7001 00	tsx0 	pr0|309		fx1_to_fl2
002067  aa  6 00150 4551 17	fst  	pr6|104,7		pf
						STATEMENT 1 ON LINE 248
		     pfsum = pfsum + p1;

002070  aa  6 00171 4311 00	fld  	pr6|121		pfsum
002071  aa  6 00150 4751 00	fad  	pr6|104		p1
002072  aa  6 00171 4551 00	fst  	pr6|121		pfsum
						STATEMENT 1 ON LINE 249
		     s1, sc (i) = cur_tcm.depths (i) - prev_tcm.depths (i);

002073  aa  7 00077 2361 17	ldq  	pr7|63,7		cur_tcm.depths
002074  aa  5 00077 1761 17	sbq  	pr5|63,7		prev_tcm.depths
002075  aa  6 00276 7561 00	stq  	pr6|190
002076  aa  0 00465 7001 00	tsx0 	pr0|309		fx1_to_fl2
002077  aa  6 00176 4551 00	fst  	pr6|126		s1
002100  aa  6 00276 2361 00	ldq  	pr6|190
002101  aa  0 00465 7001 00	tsx0 	pr0|309		fx1_to_fl2
002102  aa  6 00176 4551 17	fst  	pr6|126,7		sc
						STATEMENT 1 ON LINE 250
		     scsum = scsum + s1;

002103  aa  6 00217 4311 00	fld  	pr6|143		scsum
002104  aa  6 00176 4751 00	fad  	pr6|126		s1
002105  aa  6 00217 4551 00	fst  	pr6|143		scsum
						STATEMENT 1 ON LINE 251
		     c1, cpu (i) = cur_tcm.tdepths (i) - prev_tcm.tdepths (i);

002106  aa  6 00141 2361 00	ldq  	pr6|97		i
002107  aa   000001 7360 00	qls  	1
002110  aa   000000 6260 06	eax6 	0,ql
002111  aa  7 00106 2371 06	ldaq 	pr7|70,ql		cur_tcm.tdepths
002112  aa  5 00106 1771 16	sbaq 	pr5|70,6		prev_tcm.tdepths
002113  aa  6 00274 7571 00	staq 	pr6|188
002114  aa   216000 4110 03	lde  	72704,du
002115  aa   400000 4750 03	fad  	131072,du
002116  aa  6 00105 4551 00	fst  	pr6|69		c1
002117  aa  6 00274 2371 00	ldaq 	pr6|188
002120  aa   216000 4110 03	lde  	72704,du
002121  aa   400000 4750 03	fad  	131072,du
002122  aa  6 00106 4551 17	fst  	pr6|70,7		cpu
						STATEMENT 1 ON LINE 252
		     if p1 <= 1e-6
		     then p1 = 1e0;

002123  aa  6 00150 4311 00	fld  	pr6|104		p1
002124  aa   775713 5150 04	fcmp 	-1077,ic		000037 = 732414336750
002125  aa   000003 6054 04	tpnz 	3,ic		002130
002126  aa   002400 4310 03	fld  	1280,du
002127  aa  6 00150 4551 00	fst  	pr6|104		p1
						STATEMENT 1 ON LINE 254
		     if s1 <= 1e-6
		     then s1 = 1e0;

002130  aa  6 00176 4311 00	fld  	pr6|126		s1
002131  aa   775706 5150 04	fcmp 	-1082,ic		000037 = 732414336750
002132  aa   000003 6054 04	tpnz 	3,ic		002135
002133  aa   002400 4310 03	fld  	1280,du
002134  aa  6 00176 4551 00	fst  	pr6|126		s1
						STATEMENT 1 ON LINE 256
		     cpusum = cpusum + c1;

002135  aa  6 00130 4311 00	fld  	pr6|88		cpusum
002136  aa  6 00105 4751 00	fad  	pr6|69		c1
002137  aa  6 00130 4551 00	fst  	pr6|88		cpusum
						STATEMENT 1 ON LINE 257
		     tbpf (i) = c1 * 1e-3 / p1;

002140  aa  6 00105 4311 00	fld  	pr6|69		c1
002141  aa   775656 4610 04	fmp  	-1106,ic		000017 = 756406111565
002142  aa  6 00276 4551 00	fst  	pr6|190
002143  aa  6 00150 5651 00	fdv  	pr6|104		p1
002144  aa  6 00217 4551 17	fst  	pr6|143,7		tbpf
						STATEMENT 1 ON LINE 258
		     tbs (i) = c1 * 1e-3 / s1;

002145  aa  6 00276 4311 00	fld  	pr6|190
002146  aa  6 00176 5651 00	fdv  	pr6|126		s1
002147  aa  6 00227 4551 17	fst  	pr6|151,7		tbs
						STATEMENT 1 ON LINE 259
		end;

002150  aa  6 00141 0541 00	aos  	pr6|97		i
002151  aa   777701 7100 04	tra  	-63,ic		002052
						STATEMENT 1 ON LINE 260
		p1 = 2e0;

002152  aa   004400 4310 03	fld  	2304,du
002153  aa  6 00150 4551 00	fst  	pr6|104		p1
						STATEMENT 1 ON LINE 261
		do i = 1 to 8 while (p1 > 1e0);

002154  aa   000001 2360 07	ldq  	1,dl
002155  aa  6 00141 7561 00	stq  	pr6|97		i
002156  aa  6 00141 2361 00	ldq  	pr6|97		i
002157  aa   000010 1160 07	cmpq 	8,dl
002160  aa   000105 6054 04	tpnz 	69,ic		002265
002161  aa  6 00150 4311 00	fld  	pr6|104		p1
002162  aa   002400 5150 03	fcmp 	1280,du
002163  aa   000102 6044 04	tmoz 	66,ic		002265
						STATEMENT 1 ON LINE 262
		     if pfsum = 0e0
		     then p1 = 0e0;

002164  aa  6 00171 4311 00	fld  	pr6|121		pfsum
002165  aa   000004 6010 04	tnz  	4,ic		002171
002166  aa   400000 4310 03	fld  	131072,du
002167  aa  6 00150 4551 00	fst  	pr6|104		p1
002170  aa   000006 7100 04	tra  	6,ic		002176
						STATEMENT 1 ON LINE 264
		     else p1 = (pf (i) * 100e0) / pfsum;

002171  aa  6 00141 7271 00	lxl7 	pr6|97		i
002172  aa  6 00150 4311 17	fld  	pr6|104,7		pf
002173  aa   016620 4610 03	fmp  	7568,du
002174  aa  6 00171 5651 00	fdv  	pr6|121		pfsum
002175  aa  6 00150 4551 00	fst  	pr6|104		p1
						STATEMENT 1 ON LINE 265
		     if scsum = 0e0
		     then s1 = 0e0;

002176  aa  6 00217 4311 00	fld  	pr6|143		scsum
002177  aa   000004 6010 04	tnz  	4,ic		002203
002200  aa   400000 4310 03	fld  	131072,du
002201  aa  6 00176 4551 00	fst  	pr6|126		s1
002202  aa   000006 7100 04	tra  	6,ic		002210
						STATEMENT 1 ON LINE 267
		     else s1 = (sc (i) * 100e0) / scsum;

002203  aa  6 00141 7271 00	lxl7 	pr6|97		i
002204  aa  6 00176 4311 17	fld  	pr6|126,7		sc
002205  aa   016620 4610 03	fmp  	7568,du
002206  aa  6 00217 5651 00	fdv  	pr6|143		scsum
002207  aa  6 00176 4551 00	fst  	pr6|126		s1
						STATEMENT 1 ON LINE 268
		     if cpusum = 0e0
		     then c1 = 0e0;

002210  aa  6 00130 4311 00	fld  	pr6|88		cpusum
002211  aa   000004 6010 04	tnz  	4,ic		002215
002212  aa   400000 4310 03	fld  	131072,du
002213  aa  6 00105 4551 00	fst  	pr6|69		c1
002214  aa   000006 7100 04	tra  	6,ic		002222
						STATEMENT 1 ON LINE 270
		     else c1 = (cpu (i) * 100e0) / cpusum;

002215  aa  6 00141 7271 00	lxl7 	pr6|97		i
002216  aa  6 00106 4311 17	fld  	pr6|70,7		cpu
002217  aa   016620 4610 03	fmp  	7568,du
002220  aa  6 00130 5651 00	fdv  	pr6|88		cpusum
002221  aa  6 00105 4551 00	fst  	pr6|69		c1
						STATEMENT 1 ON LINE 271
		     call ioa_ ("^4d^9.1f^6.1f^7.1f^7.1f^6.1f", i, p1, tbpf (i), s1, tbs (i), c1);

002222  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
002223  aa   776047 00 0034	desc9a	-985,28		000271 = 136064144136
002224  aa  6 00262 00 0034	desc9a	pr6|178,28
002225  aa  6 00262 3521 00	epp2 	pr6|178
002226  aa  6 00364 2521 00	spri2	pr6|244
002227  aa  6 00141 3521 00	epp2 	pr6|97		i
002230  aa  6 00366 2521 00	spri2	pr6|246
002231  aa  6 00150 3521 00	epp2 	pr6|104		p1
002232  aa  6 00370 2521 00	spri2	pr6|248
002233  aa  6 00141 7271 00	lxl7 	pr6|97		i
002234  aa  6 00217 3521 17	epp2 	pr6|143,7		tbpf
002235  aa  6 00372 2521 00	spri2	pr6|250
002236  aa  6 00176 3521 00	epp2 	pr6|126		s1
002237  aa  6 00374 2521 00	spri2	pr6|252
002240  aa  6 00227 3521 17	epp2 	pr6|151,7		tbs
002241  aa  6 00376 2521 00	spri2	pr6|254
002242  aa  6 00105 3521 00	epp2 	pr6|69		c1
002243  aa  6 00400 2521 00	spri2	pr6|256
002244  aa   775552 3520 04	epp2 	-1174,ic		000016 = 524000000034
002245  aa  6 00402 2521 00	spri2	pr6|258
002246  aa   775614 3520 04	epp2 	-1140,ic		000062 = 404000000021
002247  aa  6 00404 2521 00	spri2	pr6|260
002250  aa   775565 3520 04	epp2 	-1163,ic		000035 = 414000000033
002251  aa  6 00406 2521 00	spri2	pr6|262
002252  aa  6 00410 2521 00	spri2	pr6|264
002253  aa  6 00412 2521 00	spri2	pr6|266
002254  aa  6 00414 2521 00	spri2	pr6|268
002255  aa  6 00416 2521 00	spri2	pr6|270
002256  aa  6 00362 6211 00	eax1 	pr6|242
002257  aa   034000 4310 07	fld  	14336,dl
002260  aa  6 00044 3701 20	epp4 	pr6|36,*
002261  la  4 00022 3521 20	epp2 	pr4|18,*		ioa_
002262  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 272
		end;

002263  aa  6 00141 0541 00	aos  	pr6|97		i
002264  aa   777672 7100 04	tra  	-70,ic		002156
						STATEMENT 1 ON LINE 273
	     end;

						STATEMENT 1 ON LINE 275
	if reset_sw
	then do;

002265  aa  6 00175 2351 00	lda  	pr6|125		reset_sw
002266  aa   000042 6000 04	tze  	34,ic		002330
						STATEMENT 1 ON LINE 277
		call metering_util_$reset (unique, code);

002267  aa  6 00044 3701 20	epp4 	pr6|36,*
002270  ia  4 00010 3521 00	epp2 	pr4|8		unique
002271  aa  6 00256 2521 00	spri2	pr6|174
002272  aa  6 00106 3521 00	epp2 	pr6|70		code
002273  aa  6 00260 2521 00	spri2	pr6|176
002274  aa  6 00254 6211 00	eax1 	pr6|172
002275  aa   010000 4310 07	fld  	4096,dl
002276  la  4 00030 3521 20	epp2 	pr4|24,*		metering_util_$reset
002277  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 278
		if code ^= 0
		then do;

002300  aa  6 00106 2361 00	ldq  	pr6|70		code
002301  aa   000027 6000 04	tze  	23,ic		002330
						STATEMENT 1 ON LINE 280
			call com_err_ (code, MYNAME, "Resetting");

002302  aa   775606 2370 04	ldaq 	-1146,ic		000110 = 122145163145 164164151156
002303  aa  6 00254 7571 00	staq 	pr6|172
002304  aa   147000 2350 03	lda  	52736,du
002305  aa  6 00256 7551 00	sta  	pr6|174
002306  aa  6 00106 3521 00	epp2 	pr6|70		code
002307  aa  6 00304 2521 00	spri2	pr6|196
002310  aa   775470 3520 04	epp2 	-1224,ic		000000 = 164162141146
002311  aa  6 00306 2521 00	spri2	pr6|198
002312  aa  6 00254 3521 00	epp2 	pr6|172
002313  aa  6 00310 2521 00	spri2	pr6|200
002314  aa   775550 3520 04	epp2 	-1176,ic		000064 = 404000000043
002315  aa  6 00312 2521 00	spri2	pr6|202
002316  aa   775545 3520 04	epp2 	-1179,ic		000063 = 526000000026
002317  aa  6 00314 2521 00	spri2	pr6|204
002320  aa   775504 3520 04	epp2 	-1212,ic		000024 = 524000000011
002321  aa  6 00316 2521 00	spri2	pr6|206
002322  aa  6 00302 6211 00	eax1 	pr6|194
002323  aa   014000 4310 07	fld  	6144,dl
002324  aa  6 00044 3701 20	epp4 	pr6|36,*
002325  la  4 00014 3521 20	epp2 	pr4|12,*		com_err_
002326  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 281
			return;

002327  aa  0 00631 7101 00	tra  	pr0|409		return
						STATEMENT 1 ON LINE 282
		     end;

						STATEMENT 1 ON LINE 283
	     end;

						STATEMENT 1 ON LINE 285
	call ioa_ (" ");

002330  aa   040000 2350 03	lda  	16384,du
002331  aa  6 00276 7551 00	sta  	pr6|190
002332  aa  6 00276 3521 00	epp2 	pr6|190
002333  aa  6 00256 2521 00	spri2	pr6|174
002334  aa   775461 3520 04	epp2 	-1231,ic		000015 = 524000000001
002335  aa  6 00260 2521 00	spri2	pr6|176
002336  aa  6 00254 6211 00	eax1 	pr6|172
002337  aa   004000 4310 07	fld  	2048,dl
002340  aa  6 00044 3701 20	epp4 	pr6|36,*
002341  la  4 00022 3521 20	epp2 	pr4|18,*		ioa_
002342  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 286
	return;

002343  aa  0 00631 7101 00	tra  	pr0|409		return
						STATEMENT 1 ON LINE 329
     end;

BEGIN PROCEDURE print
ENTRY TO print                                              STATEMENT 1 ON LINE 291
print:
     proc (name, milli, per);

002344  aa  6 00244 6501 00	spri4	pr6|164
002345  aa  6 00246 2521 00	spri2	pr6|166
002346  aa  2 00002 3521 01	epp2 	pr2|2,au
002347  aa  6 00250 2521 00	spri2	pr6|168
002350  aa  2 00000 2361 20	ldq  	pr2|0,*
002351  aa   000002 6040 04	tmi  	2,ic		002353
002352  aa   777777 3760 07	anq  	262143,dl
002353  aa  0 00250 3761 00	anq  	pr0|168		= 000077777777
002354  aa  6 00420 7561 00	stq  	pr6|272
						STATEMENT 1 ON LINE 302
	if delta = 0e0
	then atb = 0e0;

002355  aa  6 00134 4311 00	fld  	pr6|92		delta
002356  aa   000004 6010 04	tnz  	4,ic		002362
002357  aa   400000 4310 03	fld  	131072,du
002360  aa  6 00104 4551 00	fst  	pr6|68		atb
002361  aa   000004 7100 04	tra  	4,ic		002365
						STATEMENT 1 ON LINE 304
	else atb = meter_time / (delta * 1e1);

002362  aa   010500 4610 03	fmp  	4416,du
002363  aa  6 00143 5251 00	fdi  	pr6|99		meter_time
002364  aa  6 00104 4551 00	fst  	pr6|68		atb
						STATEMENT 1 ON LINE 305
	if ^milli
	then atb = atb / 1e3;

002365  aa  6 00246 3735 20	epp7 	pr6|166,*
002366  aa  7 00004 2351 20	lda  	pr7|4,*		milli
002367  aa  0 00002 3771 00	anaq 	pr0|2		= 400000000000 000000000000
002370  aa  6 00421 7551 00	sta  	pr6|273		milli
002371  aa   000004 6010 04	tnz  	4,ic		002375
002372  aa  6 00104 4311 00	fld  	pr6|68		atb
002373  aa   024764 5650 03	fdv  	10740,du
002374  aa  6 00104 4551 00	fst  	pr6|68		atb
						STATEMENT 1 ON LINE 308
	if milli
	then units = "msec";

002375  aa  6 00421 2351 00	lda  	pr6|273		milli
002376  aa   000004 6000 04	tze  	4,ic		002402
002377  aa   775414 2350 04	lda  	-1268,ic		000013 = 155163145143
002400  aa  6 00252 7551 00	sta  	pr6|170		units
002401  aa   000003 7100 04	tra  	3,ic		002404
						STATEMENT 1 ON LINE 310
	else units = "sec";

002402  aa   775410 2350 04	lda  	-1272,ic		000012 = 163145143040
002403  aa  6 00252 7551 00	sta  	pr6|170		units
						STATEMENT 1 ON LINE 313
	if per
	then do;

002404  aa  7 00006 2351 20	lda  	pr7|6,*		per
002405  aa   400000 3150 03	cana 	131072,du
002406  aa   000054 6000 04	tze  	44,ic		002462
						STATEMENT 1 ON LINE 315
		if intc = 0e0
		then numint = 0e0;

002407  aa  6 00142 4311 00	fld  	pr6|98		intc
002410  aa   000004 6010 04	tnz  	4,ic		002414
002411  aa   400000 4310 03	fld  	131072,du
002412  aa  6 00147 4551 00	fst  	pr6|103		numint
002413  aa   000003 7100 04	tra  	3,ic		002416
						STATEMENT 1 ON LINE 317
		else numint = delta / intc;

002414  aa  6 00134 5251 00	fdi  	pr6|92		delta
002415  aa  6 00147 4551 00	fst  	pr6|103		numint
						STATEMENT 1 ON LINE 318
		call ioa_ ("^16a^8d^11.3f ^4a^8.3f", name, fixed (delta), atb, units, numint);

002416  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
002417  aa   775631 00 0030	desc9a	-1127,24		000247 = 136061066141
002420  aa  6 00422 00 0030	desc9a	pr6|274,24
002421  aa  6 00134 4311 00	fld  	pr6|92		delta
002422  aa  0 00654 7001 00	tsx0 	pr0|428		fl2_to_fx1
002423  aa  6 00421 7561 00	stq  	pr6|273
002424  aa  6 00422 3521 00	epp2 	pr6|274
002425  aa  6 00432 2521 00	spri2	pr6|282
002426  aa  7 00002 3521 20	epp2 	pr7|2,*		name
002427  aa  6 00434 2521 00	spri2	pr6|284
002430  aa  6 00421 3521 00	epp2 	pr6|273
002431  aa  6 00436 2521 00	spri2	pr6|286
002432  aa  6 00104 3521 00	epp2 	pr6|68		atb
002433  aa  6 00440 2521 00	spri2	pr6|288
002434  aa  6 00252 3521 00	epp2 	pr6|170		units
002435  aa  6 00442 2521 00	spri2	pr6|290
002436  aa  6 00147 3521 00	epp2 	pr6|103		numint
002437  aa  6 00444 2521 00	spri2	pr6|292
002440  aa   775351 3520 04	epp2 	-1303,ic		000011 = 524000000026
002441  aa  6 00446 2521 00	spri2	pr6|294
002442  aa  6 00250 3715 20	epp5 	pr6|168,*
002443  aa  5 00000 3521 20	epp2 	pr5|0,*
002444  aa  6 00450 2521 00	spri2	pr6|296
002445  aa   775343 3520 04	epp2 	-1309,ic		000010 = 404000000033
002446  aa  6 00452 2521 00	spri2	pr6|298
002447  aa   775366 3520 04	epp2 	-1290,ic		000035 = 414000000033
002450  aa  6 00454 2521 00	spri2	pr6|300
002451  aa  6 00460 2521 00	spri2	pr6|304
002452  aa   775335 3520 04	epp2 	-1315,ic		000007 = 526000000004
002453  aa  6 00456 2521 00	spri2	pr6|302
002454  aa  6 00430 6211 00	eax1 	pr6|280
002455  aa   030000 4310 07	fld  	12288,dl
002456  aa  6 00044 3701 20	epp4 	pr6|36,*
002457  la  4 00022 3521 20	epp2 	pr4|18,*		ioa_
002460  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 319
	     end;

002461  aa   000044 7100 04	tra  	36,ic		002525
						STATEMENT 1 ON LINE 320
	else do;

						STATEMENT 1 ON LINE 321
		call ioa_ ("^16a^8d^11.3f ^4a", name, fixed (delta), atb, units);

002462  aa   775546 2370 04	ldaq 	-1178,ic		000230 = 136061066141 136070144136
002463  aa  6 00422 7571 00	staq 	pr6|274
002464  aa   775546 2370 04	ldaq 	-1178,ic		000232 = 061061056063 146040136064
002465  aa  6 00424 7571 00	staq 	pr6|276
002466  aa   141000 2350 03	lda  	49664,du
002467  aa  6 00426 7551 00	sta  	pr6|278
002470  aa  6 00134 4311 00	fld  	pr6|92		delta
002471  aa  0 00654 7001 00	tsx0 	pr0|428		fl2_to_fx1
002472  aa  6 00421 7561 00	stq  	pr6|273
002473  aa  6 00422 3521 00	epp2 	pr6|274
002474  aa  6 00432 2521 00	spri2	pr6|282
002475  aa  7 00002 3521 20	epp2 	pr7|2,*		name
002476  aa  6 00434 2521 00	spri2	pr6|284
002477  aa  6 00421 3521 00	epp2 	pr6|273
002500  aa  6 00436 2521 00	spri2	pr6|286
002501  aa  6 00104 3521 00	epp2 	pr6|68		atb
002502  aa  6 00440 2521 00	spri2	pr6|288
002503  aa  6 00252 3521 00	epp2 	pr6|170		units
002504  aa  6 00442 2521 00	spri2	pr6|290
002505  aa   775301 3520 04	epp2 	-1343,ic		000006 = 524000000021
002506  aa  6 00444 2521 00	spri2	pr6|292
002507  aa  6 00250 3715 20	epp5 	pr6|168,*
002510  aa  5 00000 3521 20	epp2 	pr5|0,*
002511  aa  6 00446 2521 00	spri2	pr6|294
002512  aa   775276 3520 04	epp2 	-1346,ic		000010 = 404000000033
002513  aa  6 00450 2521 00	spri2	pr6|296
002514  aa   775321 3520 04	epp2 	-1327,ic		000035 = 414000000033
002515  aa  6 00452 2521 00	spri2	pr6|298
002516  aa   775271 3520 04	epp2 	-1351,ic		000007 = 526000000004
002517  aa  6 00454 2521 00	spri2	pr6|300
002520  aa  6 00430 6211 00	eax1 	pr6|280
002521  aa   024000 4310 07	fld  	10240,dl
002522  aa  6 00044 3701 20	epp4 	pr6|36,*
002523  la  4 00022 3521 20	epp2 	pr4|18,*		ioa_
002524  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 322
	     end;

						STATEMENT 1 ON LINE 324
     end print;

002525  aa  6 00244 6101 00	rtcd 	pr6|164
  END PROCEDURE print
  END PROCEDURE tcm


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
