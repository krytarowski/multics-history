	COMPILATION LISTING OF SEGMENT display_log_segment
	Compiled by: Multics PL/I Compiler, Release 28d, of October 4, 1983
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 01/17/85  0835.6 mst Thu
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 display_log_segment:
        7 dls:
        8      procedure () options (variable);
        9 
       10 /* *	DISPLAY_LOG_SEGMENT
       11*   *
       12*   *	This is a tool for the new log primitives. It is used to display the
       13*   *	contents of a single log segment, in unformatted form.
       14*   *
       15*   *	84-06-01, W. Olin Sibert
       16*   */
       17 
       18 declare	arg_count fixed bin;
       19 declare	arg_lth fixed bin (21);
       20 declare	arg_ptr pointer;
       21 declare	arg char (arg_lth) based (arg_ptr);
       22 declare	arg_idx fixed bin;
       23 declare	code fixed bin (35);
       24 
       25 declare	brief_sw bit (1) aligned;
       26 declare	trace_sw bit (1) aligned;
       27 declare	header_sw bit (1) aligned;
       28 declare	print_sw bit (1) aligned;
       29 
       30 declare   log_data_$new_message_flag bit (36) aligned external static;
       31 declare   log_data_$complete_message_flag bit (36) aligned external static;
       32 
       33 declare	error_table_$badopt fixed bin (35) external static;
       34 declare	error_table_$noarg fixed bin (35) external static;
       35 declare	error_table_$inconsistent fixed bin (35) external static;
       36 declare	error_table_$null_info_ptr fixed bin (35) external static;
       37 declare	error_table_$too_many_args fixed bin (35) external static;
       38 
       39 declare	com_err_ entry options (variable);
       40 declare	cu_$arg_count entry (fixed bin, fixed bin (35));
       41 declare	cu_$arg_ptr entry (fixed bin, pointer, fixed bin (21), fixed bin (35));
       42 declare	cv_ptr_ entry (char (*), fixed bin (35)) returns (pointer);
       43 declare	cv_ptr_$terminate entry (pointer);
       44 declare	ioa_ entry options (variable);
       45 declare	log_format_time_ entry (fixed bin (71)) returns (char (32) varying);
       46 
       47 declare	WHOAMI char (32) internal static options (constant) init ("display_log_segment");
       48 
       49 declare	cleanup condition;
       50 
       51 declare  (addr, addrel, binary, char, currentsize, null, substr, unspec) builtin;
       52 
       53 /* */
       54 
       55 	log_segment_ptr = null ();
       56 
       57 	on condition (cleanup) call clean_up ();
       58 
       59 	call cu_$arg_count (arg_count, code);
       60 	if (code ^= 0) then do;
       61 	     call com_err_ (code, WHOAMI);
       62 	     goto MAIN_RETURN;
       63 	     end;
       64 
       65 	call process_args ();
       66 
       67 	if header_sw then call display_log ();
       68 
       69 	if print_sw then
       70 	     call display_messages ("1"b);
       71 	else if trace_sw then
       72 	     call display_messages ("0"b);
       73 
       74 MAIN_RETURN:
       75 	call clean_up ();
       76 	return;
       77 
       78 /* */
       79 
       80 display_log:
       81      procedure ();
       82 
       83 	call ioa_ ("");
       84 	call ioa_ ("Log segment version ""^a"" at ^p:", log_segment.version, log_segment_ptr);
       85 	call ioa_ ("^3xCreated at ^a", log_format_time_ (log_segment.time_created));
       86 	call ioa_ ("^3x^[No previous log^;Previous log in:^4x""^a""^]",
       87 	     (log_segment.previous_log_dir = ""), log_segment.previous_log_dir);
       88 	call ioa_ ("^3xFirst/last messages: ^d / ^d", log_segment.first_sequence, log_segment.last_sequence);
       89 	call ioa_ ("^3xFirst/last time:     ^a / ^a",
       90 	     log_format_time_ (log_segment.first_time), log_format_time_ (log_segment.last_time));
       91 	call ioa_ ("^3xLast word used:       ^6oo   (^[in^;out of^] service)",
       92 	     binary (substr (unspec (log_segment.alloc_info), 55, 18)),
       93 	     substr (unspec (log_segment.alloc_info), 54, 1));
       94 	call ioa_ ("^3xReal last sequence:  ^d", binary (substr (unspec (log_segment.alloc_info), 18, 36)));
       95 	call ioa_ ("^3xLast word available:  ^6oo", log_segment.max_size);
       96 	call ioa_ ("^3xFirst message at:    ^p", addr (log_segment.data));
       97 	call ioa_ ("^3xListener info not printed yet.");
       98 	call ioa_ ("");
       99 
      100 	return;
      101 	end display_log;
      102 
      103 /* */
      104 
      105 display_messages:
      106     procedure (P_text);
      107 
      108 declare	P_text bit (1) aligned parameter;
      109 
      110 declare	msg_idx fixed bin (18);
      111 declare	wasted_space fixed bin;
      112 declare	last_message fixed bin (18);
      113 declare	msg_type char (32);
      114 
      115 
      116 	msg_idx = 1;
      117 	last_message = binary (substr (log_segment.alloc_info.word_2, 19, 18));
      118 	wasted_space = 0;
      119 
      120 	do while (msg_idx <= last_message);
      121 	     log_message_ptr = addr (log_segment.data (msg_idx));
      122                if (log_message.sentinel = log_data_$new_message_flag) then
      123 		msg_type = "Incomplete message";
      124                else if (log_message.sentinel = log_data_$complete_message_flag) then
      125 		msg_type = "Complete message";
      126 	     else do;
      127 		wasted_space = wasted_space + 1;
      128 		msg_idx = msg_idx + 1;
      129 		goto NEXT_WORD;
      130 		end;
      131 
      132 	     if (wasted_space > 0) then
      133 		call ioa_ ("Wasted space^7xat ^p (^d words)",
      134 		     addrel (log_message_ptr, (0 - wasted_space)), wasted_space);
      135 	     wasted_space = 0;
      136 
      137 	     call ioa_ ("^18a at ^p: ^d chars, ^d words",
      138 		msg_type, log_message_ptr, log_message.text_lth, log_message.data_lth);
      139 
      140 	     if P_text then do;
      141 		call ioa_ ("^3xSequence:^5x^d", log_message.sequence);
      142 		call ioa_ ("^3xSeverity:^5x^d", log_message.severity);
      143 		call ioa_ ("^3xTime:^9x^a", log_format_time_ ((log_message.time)));
      144 		call ioa_ ("^3xProcess:^6x^w", log_message.process_id);
      145 		call ioa_ ("^3xText:^9x""^a""", log_message.text);
      146 
      147 		if (log_message.data_lth ^= 0) then do;
      148 		     call ioa_ ("^3xData class:^3x""^a""", log_message.data_class);
      149 		     call ioa_ ("^3xData:^9x^d words at ^p", log_message.data_lth, addr (log_message.data));
      150 		     end;
      151 		call ioa_ ("");
      152 
      153 		end;
      154 
      155 	     msg_idx = msg_idx + currentsize (log_message);
      156 
      157 NEXT_WORD:
      158 	     end;
      159 
      160 	if (wasted_space > 0) then
      161 	     call ioa_ ("Wasted space^7xat ^p (^d words)^/",
      162 		addrel (log_message_ptr, (0 - wasted_space)), wasted_space);
      163 
      164 	return;
      165 	end display_messages;
      166 
      167 /* */
      168 
      169 process_args:
      170      procedure ();
      171 
      172 	brief_sw = "0"b;
      173 	header_sw = "1"b;
      174 	trace_sw = "0"b;
      175 	print_sw = "0"b;
      176 
      177 	do arg_idx = 1 to arg_count;
      178 	     call cu_$arg_ptr (arg_idx, arg_ptr, arg_lth, (0));
      179 
      180 	     if (arg = "-brief") | (arg = "-bf") then brief_sw = "1"b;
      181 	     else if (arg = "-long") | (arg = "-lg") then brief_sw = "0"b;
      182 	     else if (arg = "-header") | (arg = "-he") then header_sw = "1"b;
      183 	     else if (arg = "-no_header") | (arg = "-nhe") then header_sw = "0"b;
      184 	     else if (arg = "-trace") then trace_sw = "1"b;
      185 	     else if (arg = "-no_trace") then trace_sw = "0"b;
      186 	     else if (arg = "-print") | (arg = "-pr") then print_sw = "1"b;
      187 	     else if (arg = "-no_print") | (arg = "-npr") then print_sw = "0"b;
      188 
      189 	     else if (char (arg, 1) = "-") then do;
      190 		call com_err_ (error_table_$badopt, WHOAMI, "^a", arg);
      191 		goto MAIN_RETURN;
      192 		end;
      193 
      194 	     else if (log_segment_ptr = null ()) then do;
      195 		log_segment_ptr = cv_ptr_ (arg, code);
      196 		if (code = 0) & (log_segment_ptr = null ()) then code = error_table_$null_info_ptr;
      197 		if (code ^= 0) then do;
      198 		     call com_err_ (code, WHOAMI, "^a", arg);
      199 		     goto MAIN_RETURN;
      200 		     end;
      201 		end;
      202 
      203 	     else do;
      204 		call com_err_ (error_table_$too_many_args, WHOAMI, "Only one log pointer allowed. ^a", arg);
      205 		goto MAIN_RETURN;
      206 		end;
      207 	     end;
      208 
      209 	if (log_segment_ptr = null ()) then do;
      210 	     call com_err_ (error_table_$noarg, WHOAMI, "^/Usage:  ^a  LOG_PTR  {-control_args}", WHOAMI);
      211 	     goto MAIN_RETURN;
      212 	     end;
      213 
      214 	if (^header_sw) & (^trace_sw) & (^print_sw) then do;
      215 	     call com_err_ (error_table_$inconsistent, WHOAMI,
      216 		"At least one of -header, -trace, and -print must be supplied.");
      217 	     goto MAIN_RETURN;
      218 	     end;
      219 
      220 	return;
      221 	end process_args;
      222 
      223 /* */
      224 
      225 clean_up:
      226      procedure ();
      227 
      228 	if (log_segment_ptr ^= null ()) then
      229 	     call cv_ptr_$terminate (log_segment_ptr);
      230 
      231 	return;
      232 	end clean_up;
      233 
      234  /* BEGIN INCLUDE FILE ... log_segment.incl.pl1 ... 84-05-03 ... W. Olin Sibert */
  1     2 
  1     3 declare   log_segment_ptr               pointer;
  1     4 declare   log_segment_max_size          fixed bin (18);
  1     5 declare   LOG_SEGMENT_VERSION_1         char (8) internal static options (constant) init ("SysLog01");
  1     6 
  1     7 
  1     8 declare 1 log_segment                   aligned based (log_segment_ptr),
  1     9           2 header                      aligned like log_segment_header,
  1    10           2 data                        dim (log_segment_max_size refer (log_segment.max_size)) bit (36) aligned;
  1    11 
  1    12 
  1    13 declare 1 log_segment_header            aligned based,
  1    14           2 version                     char (8) unaligned, /* LOG_SEGMENT_VERSION_1 */
  1    15           2 time_created                fixed bin (71),     /* When the segment header was initialized */
  1    16           2 previous_log_dir            char (168) unaligned, /* Directory containing previous log segment */
  1    17 
  1    18           2 limits,
  1    19             3 first_sequence            fixed bin (35),     /* First and last sequence numbers / time stamps */
  1    20             3 last_sequence             fixed bin (35),     /* of messages in the log. These may be slightly */
  1    21             3 first_time                fixed bin (71),     /* incorrect due to lockless updating strategy */
  1    22             3 last_time                 fixed bin (71),
  1    23 
  1    24           2 alloc_info,                                     /* Complex STACQ hack for allocating and assigning */
  1    25             3 word_1                    fixed bin (18),     /* sequence numbers locklessly. See log_segment_ */
  1    26             3 word_2                    bit (36) aligned,   /* for details of strategy */
  1    27           2 max_size                    fixed bin (18),     /* Total words in data area */
  1    28 
  1    29           2 listeners_registered        bit (1) aligned,    /* Set if ANY processes were ever registered-- it's only */
  1    30           2 listener_bootload_time      fixed bin (71),     /* kept here for efficiency. The bootload time is used to */
  1    31                                                             /* detect all the dead listeners after a reboot */
  1    32           2 listener (25),                                  /* Processes waiting for messages in the log */
  1    33             3 process_id                bit (36) aligned,
  1    34             3 event_channel             fixed bin (71) unaligned, /* Saves space-- allows 3-word entries */
  1    35 
  1    36           2 last_wakeup_time            fixed bin (71),     /* When last wakeup was sent */
  1    37           2 wakeup_delta                fixed bin (71),     /* Wakeups sent no more than once per this interval */
  1    38 
  1    39           2 pad (6)                     fixed bin (71);     /* Pad header to 150 words */
  1    40 
  1    41 
  1    42 declare   LOG_SEGMENT_NEW_MESSAGE           init ("777111555333"b3) bit (36) aligned internal static options (constant);
  1    43 declare   LOG_SEGMENT_COMPLETE_MESSAGE      init ("666000444222"b3) bit (36) aligned internal static options (constant);
  1    44 
  1    45 /* END INCLUDE FILE ... log_segment.incl.pl1 */
      234 
      235  /* BEGIN INCLUDE FILE ... log_message.incl.pl1 ... 84-04-25 ... W. Olin Sibert */
  2     2 
  2     3 declare 1 log_message_header  aligned based,                /* Items marked "(SET)" are set by $create_message */
  2     4           2 sentinel          bit (36) aligned,             /* Proper value declared in log_segment.incl.pl1 */
  2     5           2 sequence          fixed bin (35),               /* Sequence number for this message (SET) */
  2     6           2 severity          fixed bin (8) unaligned,      /* Severity of message */
  2     7           2 data_class_lth    fixed bin (9) unaligned unsigned, /* Length of data class-- 0 to 16 (SET) */
  2     8           2 time              fixed bin (53) unaligned,     /* Time message originated */
  2     9           2 text_lth          fixed bin (17) unaligned,     /* Length of message text. Must be nonzero (SET) */
  2    10           2 data_lth          fixed bin (17) unaligned,     /* Length of binary data. May be zero (SET) */
  2    11           2 process_id        bit (36) aligned;             /* Process id of process writing message */
  2    12 
  2    13 declare 1 log_message         aligned based (log_message_ptr),
  2    14           2 header            aligned like log_message_header,
  2    15           2 text              char (log_message_text_lth         refer (log_message.text_lth)) unaligned,
  2    16           2 data_class        char (log_message_data_class_lth   refer (log_message.data_class_lth)) unaligned,
  2    17           2 data              dim (log_message_data_lth          refer (log_message.data_lth)) bit (36) aligned;
  2    18 
  2    19 declare   log_message_ptr pointer;
  2    20 declare   log_message_text_lth fixed bin;
  2    21 declare   log_message_data_class_lth fixed bin;
  2    22 declare   log_message_data_lth fixed bin;
  2    23 
  2    24 /* END INCLUDE FILE ... log_message.incl.pl1 */
      235 
      236 
      237 	end display_log_segment;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    01/17/85  0834.5  display_log_segment.pl1           >special_ldd>online>41-4>display_log_segment.pl1
234          1    12/04/84  2124.9  log_segment.incl.pl1              >ldd>include>log_segment.incl.pl1
235          2    01/10/85  1340.2  log_message.incl.pl1              >special_ldd>online>41-4>log_message.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
P_text                                 parameter       bit(1)                   dcl 108 ref 105 140
WHOAMI                          000000 constant        char(32)                 initial unaligned dcl 47 set ref 61* 190* 198* 204*
                                                                                  210* 210* 215*
addr                                                   builtin function         dcl 51 ref 96 96 121 149 149
addrel                                                 builtin function         dcl 51 ref 132 132 160 160
alloc_info               64            based           structure                level 3 dcl 1-8 ref 91 91 91 91 94 94
arg                                    based           char                     unaligned dcl 21 set ref 180 180 181 181 182 182 183
                                                                                  183 184 185 186 186 187 187 189 190* 195* 198*
                                                                                  204*
arg_count                       000100 automatic       fixed bin(17,0)          dcl 18 set ref 59* 177
arg_idx                         000104 automatic       fixed bin(17,0)          dcl 22 set ref 177* 178*
arg_lth                         000101 automatic       fixed bin(21,0)          dcl 19 set ref 178* 180 180 181 181 182 182 183 183
                                                                                  184 185 186 186 187 187 189 190 190 195 195 198
                                                                                  198 204 204
arg_ptr                         000102 automatic       pointer                  dcl 20 set ref 178* 180 180 181 181 182 182 183 183
                                                                                  184 185 186 186 187 187 189 190 195 198 204
binary                                                 builtin function         dcl 51 ref 91 91 94 94 117
brief_sw                        000106 automatic       bit(1)                   dcl 25 set ref 172* 180* 181*
char                                                   builtin function         dcl 51 ref 189
cleanup                         000112 stack reference condition                dcl 49 ref 57
code                            000105 automatic       fixed bin(35,0)          dcl 23 set ref 59* 60 61* 195* 196 196* 197 198*
com_err_                        000026 constant        entry                    external dcl 39 ref 61 190 198 204 210 215
cu_$arg_count                   000030 constant        entry                    external dcl 40 ref 59
cu_$arg_ptr                     000032 constant        entry                    external dcl 41 ref 178
currentsize                                            builtin function         dcl 51 ref 155
cv_ptr_                         000034 constant        entry                    external dcl 42 ref 195
cv_ptr_$terminate               000036 constant        entry                    external dcl 43 ref 228
data                                   based           bit(36)                  array level 2 in structure "log_message" dcl 2-13
                                                                                  in procedure "dls" set ref 149 149
data                    226            based           bit(36)                  array level 2 in structure "log_segment" dcl 1-8
                                                                                  in procedure "dls" set ref 96 96 121
data_class                             based           char                     level 2 packed unaligned dcl 2-13 set ref 148*
data_class_lth            2(09)        based           fixed bin(9,0)           level 3 packed unsigned unaligned dcl 2-13 ref 148
                                                                                  148 149 149 155
data_lth                  4(18)        based           fixed bin(17,0)          level 3 packed unaligned dcl 2-13 set ref 137* 147
                                                                                  149* 155
error_table_$badopt             000014 external static fixed bin(35,0)          dcl 33 set ref 190*
error_table_$inconsistent       000020 external static fixed bin(35,0)          dcl 35 set ref 215*
error_table_$noarg              000016 external static fixed bin(35,0)          dcl 34 set ref 210*
error_table_$null_info_ptr      000022 external static fixed bin(35,0)          dcl 36 ref 196
error_table_$too_many_args      000024 external static fixed bin(35,0)          dcl 37 set ref 204*
first_sequence           56            based           fixed bin(35,0)          level 4 dcl 1-8 set ref 88*
first_time               60            based           fixed bin(71,0)          level 4 dcl 1-8 set ref 89*
header                                 based           structure                level 2 in structure "log_message" dcl 2-13
                                                                                  in procedure "dls"
header                                 based           structure                level 2 in structure "log_segment" dcl 1-8
                                                                                  in procedure "dls"
header_sw                       000110 automatic       bit(1)                   dcl 27 set ref 67 173* 182* 183* 214
ioa_                            000040 constant        entry                    external dcl 44 ref 83 84 85 86 88 89 91 94 95 96 97
                                                                                  98 132 137 141 142 143 144 145 148 149 151 160
last_message                    000142 automatic       fixed bin(18,0)          dcl 112 set ref 117* 120
last_sequence            57            based           fixed bin(35,0)          level 4 dcl 1-8 set ref 88*
last_time                62            based           fixed bin(71,0)          level 4 dcl 1-8 set ref 89*
limits                   56            based           structure                level 3 dcl 1-8
log_data_$complete_message_flag 000012 external static bit(36)                  dcl 31 ref 124
log_data_$new_message_flag      000010 external static bit(36)                  dcl 30 ref 122
log_format_time_                000042 constant        entry                    external dcl 45 ref 85 89 89 143
log_message                            based           structure                level 1 dcl 2-13 set ref 155
log_message_header                     based           structure                level 1 dcl 2-3
log_message_ptr                 000122 automatic       pointer                  dcl 2-19 set ref 121* 122 124 132 132 137* 137 137
                                                                                  141 142 143 144 145 147 148 149 149 149 155 160
                                                                                  160
log_segment                            based           structure                level 1 dcl 1-8
log_segment_header                     based           structure                level 1 dcl 1-13
log_segment_ptr                 000120 automatic       pointer                  dcl 1-3 set ref 55* 84 84* 85 86 86 88 88 89 89 91
                                                                                  91 91 91 94 94 95 96 96 117 121 194 195* 196 209
                                                                                  228 228*
max_size                 66            based           fixed bin(18,0)          level 3 dcl 1-8 set ref 95*
msg_idx                         000140 automatic       fixed bin(18,0)          dcl 110 set ref 116* 120 121 128* 128 155* 155
msg_type                        000143 automatic       char(32)                 unaligned dcl 113 set ref 122* 124* 137*
null                                                   builtin function         dcl 51 ref 55 194 196 209 228
previous_log_dir          4            based           char(168)                level 3 packed unaligned dcl 1-8 set ref 86 86*
print_sw                        000111 automatic       bit(1)                   dcl 28 set ref 69 175* 186* 187* 214
process_id                5            based           bit(36)                  level 3 dcl 2-13 set ref 144*
sentinel                               based           bit(36)                  level 3 dcl 2-13 ref 122 124
sequence                  1            based           fixed bin(35,0)          level 3 dcl 2-13 set ref 141*
severity                  2            based           fixed bin(8,0)           level 3 packed unaligned dcl 2-13 set ref 142*
substr                                                 builtin function         dcl 51 ref 91 91 91 91 94 94 117
text                      6            based           char                     level 2 packed unaligned dcl 2-13 set ref 145*
text_lth                  4            based           fixed bin(17,0)          level 3 packed unaligned dcl 2-13 set ref 137* 145
                                                                                  145 148 149 149 155
time                      2(18)        based           fixed bin(53,0)          level 3 packed unaligned dcl 2-13 ref 143
time_created              2            based           fixed bin(71,0)          level 3 dcl 1-8 set ref 85*
trace_sw                        000107 automatic       bit(1)                   dcl 26 set ref 71 174* 184* 185* 214
unspec                                                 builtin function         dcl 51 ref 91 91 91 91 94 94
version                                based           char(8)                  level 3 packed unaligned dcl 1-8 set ref 84*
wasted_space                    000141 automatic       fixed bin(17,0)          dcl 111 set ref 118* 127* 127 132 132 132 132* 135*
                                                                                  160 160 160 160*
word_2                   65            based           bit(36)                  level 4 dcl 1-8 ref 117

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
LOG_SEGMENT_COMPLETE_MESSAGE           internal static bit(36)                  initial dcl 1-43
LOG_SEGMENT_NEW_MESSAGE                internal static bit(36)                  initial dcl 1-42
LOG_SEGMENT_VERSION_1                  internal static char(8)                  initial unaligned dcl 1-5
log_message_data_class_lth             automatic       fixed bin(17,0)          dcl 2-21
log_message_data_lth                   automatic       fixed bin(17,0)          dcl 2-22
log_message_text_lth                   automatic       fixed bin(17,0)          dcl 2-20
log_segment_max_size                   automatic       fixed bin(18,0)          dcl 1-4

NAMES DECLARED BY EXPLICIT CONTEXT.
MAIN_RETURN                     000514 constant        label                    dcl 74 ref 62 191 199 205 211 217
NEXT_WORD                       001574 constant        label                    dcl 157 ref 129
clean_up                        002273 constant        entry                    internal dcl 225 ref 57 74
display_log                     000521 constant        entry                    internal dcl 80 ref 67
display_log_segment             000411 constant        entry                    external dcl 6
display_messages                001115 constant        entry                    internal dcl 105 ref 69 71
dls                             000402 constant        entry                    external dcl 6
process_args                    001631 constant        entry                    internal dcl 169 ref 65

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      2530        2574    2320        2540
Length      3050    2320        44         240     207           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
dls                                 282 external procedure  is an external procedure.  
on unit on line 57                   64 on unit               
display_log                             internal procedure  shares stack frame of external procedure dls.  
display_messages                        internal procedure  shares stack frame of external procedure dls.  
process_args                            internal procedure  shares stack frame of external procedure dls.  
clean_up                             68 internal procedure  is called by several nonquick procedures.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
dls                      000100 arg_count                   dls
                         000101 arg_lth                     dls
                         000102 arg_ptr                     dls
                         000104 arg_idx                     dls
                         000105 code                        dls
                         000106 brief_sw                    dls
                         000107 trace_sw                    dls
                         000110 header_sw                   dls
                         000111 print_sw                    dls
                         000120 log_segment_ptr             dls
                         000122 log_message_ptr             dls
                         000140 msg_idx                     display_messages
                         000141 wasted_space                display_messages
                         000142 last_message                display_messages
                         000143 msg_type                    display_messages

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_e_as              call_ext_out_desc   call_ext_out        call_int_this       call_int_other      return
enable              ext_entry           int_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      cu_$arg_count                 cu_$arg_ptr                   cv_ptr_
cv_ptr_$terminate             ioa_                          log_format_time_

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$badopt           error_table_$inconsistent     error_table_$noarg            error_table_$null_info_ptr
error_table_$too_many_args    log_data_$complete_message_flag                             log_data_$new_message_flag




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
      6 000401        55 000416        57 000420        59 000442        60 000453        61 000455        62 000472
     65 000473        67 000474        69 000477        71 000506        74 000514        76 000520        80 000521
     83 000522        84 000533        85 000557        86 000614        88 000646        89 000672        91 000741
     94 000775        95 001023        96 001044        97 001067        98 001103       100 001114       105 001115
    116 001117       117 001121       118 001125       120 001126       121 001131       122 001134       124 001144
    127 001152       128 001153       129 001154       132 001155       135 001207       137 001210       140 001246
    141 001252       142 001276       143 001317       144 001361       145 001405       147 001436       148 001443
    149 001477       151 001542       155 001553       157 001574       160 001575       164 001630       169 001631
    172 001632       173 001633       174 001635       175 001636       177 001637       178 001647       180 001665
    181 001702       182 001714       183 001727       184 001741       185 001750       186 001756       187 001771
    189 002003       190 002012       191 002044       194 002045       195 002051       196 002075       197 002106
    198 002110       199 002142       201 002143       204 002144       205 002177       207 002200       209 002202
    210 002206       211 002235       214 002236       215 002244       217 002270       220 002271       225 002272
    228 002300       231 002313


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
