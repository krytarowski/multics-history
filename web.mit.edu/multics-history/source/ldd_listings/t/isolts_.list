	COMPILATION LISTING OF SEGMENT isolts_
	Compiled by: Multics PL/I Compiler, Release 31a, of October 12, 1988
	Compiled at: Honeywell Bull, Phoenix AZ, SysM
	Compiled on: 10/14/88  1312.8 mst Fri
	    Options: optimize list

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*        *                                                         *
        5*        * Copyright (c) 1972 by Massachusetts Institute of        *
        6*        * Technology and Honeywell Information Systems, Inc.      *
        7*        *                                                         *
        8*        *********************************************************** */
        9 
       10 
       11 /* format: style4,ifthenstmt,ifthen,ind3,ll125,lineconind1 */
       12 isolts_: proc;
       13 
       14 /* isolts_ - the I_S_olated O_nL_ine T_est S_ystem (ISOLTS) driver
       15*   initially coded by James A. Bush 6/78
       16*   Modified 09/80 by R. Fakoury to make the operator message more understandable,
       17*   to correct a bug when displaying the last error, to request input after invalid responce,
       18*   to add a delay between operator request reconfig messages and to force the end pass message to the terminal.
       19*   Modified 8102 by R. Fakoury to allow margin/nomargin options and to add the display_error in the initial request.
       20*   Modified 8112 by R. Fakoury to correct an oversight in the operator message sequence,
       21*   to add new numbers to inv_tst_ids.
       22*   Modified 02/04/83 by R. Fakoury to add new test ids to the invalid test list.
       23*   Modified 03/83 by R. Fakoury to allow -type option to the display request and the type option to a pas option request.
       24*   Also put temp cludge to increase the timeout time for prg892/893.
       25*   Modified 03/83 by Rick Fakoury to add call to tolts_util_$get_ttl_date, and
       26*   tolts_util_$opr_msg.
       27*   Modified 03/83 by Rick Fakoury to remove the (non_quick) option from interpret_action and run_pas.
       28*   Modified 08/17/83 by Rick Fakoury to allow partial config printing & correct an error in display error of one.
       29*   Modified 09/21/83 by R. Fakoury to check for a config card with no cpu type and to modify dps8 reconfig instructions.
       30*   Modified 10/83 by R.Fakoury to implement auditor suggested changes.
       31*   Modified 11/84 by R. Fakoury to changes the call from tolts_pcd_$config to tolts_util_$find_card, make tst893 invalid,
       32*   and to use the system includes files for cpu.
       33**/
       34 
       35 /* External entries */
       36 
       37 dcl  tolts_util_$get_ttl_date entry (entry, char (6));
       38 dcl  tandd_$check_isolts_resources entry (fixed bin (5), fixed bin (5), fixed bin (5), fixed bin (35));
       39 dcl  tandd_$create_cpu_test_env entry (fixed bin (5), fixed bin (5), (4) bit (36), ptr, fixed bin (35));
       40 dcl  tandd_$destroy_cpu_test_env entry;
       41 dcl  tandd_$interrupt_test_cpu entry (fixed bin (35));
       42 dcl  tolts_pcd_ entry (char (6), char (*));
       43 dcl  tolts_util_$find_card entry (char (4), ptr);
       44 dcl  tolts_util_$query entry (char (*), char (132) aligned, fixed bin, (32) char (28) varying, fixed bin);
       45 dcl  tolts_util_$config entry (char (4), ptr, char (*) varying);
       46 dcl  tolts_util_$bci_to_ascii entry (bit (*), char (*) varying, fixed bin);
       47 dcl  tolts_util_$search entry (ptr, char (32), ptr, fixed bin, fixed bin (35));
       48 dcl  tolts_util_$on_off entry (char (6), char (3), char (6));
       49 dcl  tolts_util_$opr_msg entry;
       50 dcl  isolts_err_log_$init entry (fixed bin (35));
       51 dcl  isolts_err_log_$write entry (ptr, fixed bin, fixed bin, fixed bin (5), fixed bin (5));
       52 dcl  isolts_err_log_$display entry (fixed bin, fixed bin, bit (1));
       53 dcl  isolts_err_log_$dump entry (char (5), ptr, fixed bin (18), fixed bin, fixed bin (5), fixed bin (5));
       54 dcl  dump_segment_ entry (ptr, ptr, fixed bin, fixed bin (18), fixed bin (18), bit (*));
       55 dcl  timer_manager_$sleep entry (fixed bin (71), bit (2));
       56 dcl  gload_ entry (ptr, ptr, fixed bin (18), ptr, fixed bin (35));
       57 dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
       58 dcl  cv_oct_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
       59 dcl  cu_$cp entry (ptr, fixed bin (21), fixed bin (35));
       60 dcl  bcd_to_ascii_ entry (bit (*), char (*));
       61 dcl  tolts_alm_util_$ascii_to_bci_ entry (char (*) aligned, bit (*));
       62 dcl  continue_to_signal_ entry (fixed bin (35));
       63 dcl  (ioa_, signal, com_err_, ioa_$rsnnl, ioa_$nnl, opr_query_) entry options (variable);
       64 dcl  iox_$close entry (ptr, fixed bin (35));
       65 dcl  iox_$detach_iocb entry (ptr, fixed bin (35));
       66 
       67 /* Automatic */
       68 
       69 dcl  code fixed bin (35);				/* standard system error code */
       70 dcl  (cpu_tag, scu_tag, cpu_port) fixed bin (5);		/* cpu and scu tags */
       71 dcl  switches (4) bit (36);				/* read switch descrepency data */
       72 dcl  bf_sw bit (1) init ("0"b);			/* brief option switch */
       73 dcl  (nxt_tst, new_tst) char (3);			/* next test id for search */
       74 dcl  cpu_type char (4);
       75 dcl  (term, trm, trm1, pas_sw, mess_in_prog, ntype, run, option, trace_sw,
       76      dump_in_prog, idump, car_nz) bit (1) init ("0"b);
       77 dcl  out_str char (136) varying;
       78 dcl  com_string char (132) aligned;
       79 dcl  add_opt char (6);
       80 dcl  tim char (12);
       81 dcl  delay_iter fixed bin init (300);
       82 dcl  ttl_date char (6);
       83 dcl  d_type char (5);
       84 dcl  args (32) char (28) varying;
       85 dcl  (pgm_offset, first, last) fixed bin (18);
       86 dcl  (cmd_cnt, delay, i, j, k, c_len, bcd_chars, mtype, mlen, count, limit) fixed bin;
       87 dcl  (pip, wseg_p, t_ptr, awcp, mptr, hdr_p) ptr;
       88 
       89 /* Constants */
       90 
       91 dcl  (quit, cleanup, finish) condition;
       92 dcl  pname char (6) static options (constant) init ("isolts");
       93 dcl  tags (0:7) char (1) static options (constant) init
       94       ("a", "b", "c", "d", "e", "f", "g", "h");
       95 dcl  first_pft char (3) static options (constant) init ("01c");
       96 dcl  pas_exec char (3) static options (constant) init ("061");
       97 dcl  inv_tst_ids (22) char (3) static options (constant) init
       98       ("781", "782", "783", "784", "891", "894", "895", "897", "899", "908", "920", "921", "922", "923",
       99       "924", "927", "928", "929", "930", "975", "980", "990");
      100 dcl  illegal_pas_opt (2) char (8) varying static options (constant) init
      101       ("cardin", "i/o");
      102 dcl  NL char (1) int static options (constant) init ("
      103 ");
      104 dcl  pas_delay fixed bin static options (constant) init (2);
      105 dcl  pft_delay fixed bin static options (constant) init (2);
      106 dcl  p_err bit (1) int static init ("1"b);		/* print error flag */
      107 dcl  df_iocbp ptr int static init (null);		/* deck file iocb ptr */
      108 dcl  isolate_cpu bit (1) int static;			/* cleanup flag */
      109 dcl  (cont_pas, restart, end_pas, eopt) label;		/* target of non_local gotos */
      110 dcl  iox_$user_output ptr ext;
      111 dcl  (addr, addrel, fixed, hbound, index, length, ltrim, mod, null, ptr, rel,
      112      rtrim, search, string, substr, time) builtin;
      113 
      114 /* Structures and based variables */
      115 
      116 dcl  1 wseg based (wseg_p) aligned,			/* structure definition of PAS2 layout */
      117        2 int_vectors (0:31) bit (72),			/* 0 - 77 interrupt vectors */
      118        2 flt_vectors (0:31) bit (72),			/* 100 - 177 fault vectors */
      119        2 pad1 (32) bit (72),
      120        2 COW bit (36),				/* 300 Connect operand word */
      121        2 pad2 (10) bit (36),
      122        2 prt_out (30) bit (36),			/* 313 - 350 printer output buffer */
      123        2 cons_in (21) bit (36),			/* 351 - 375 console input buffer */
      124        2 pad3 (322) bit (36),
      125        2 opt_save (25) bit (36),			/* 1100 - 1130 options save area */
      126        2 pad4 (31) bit (36),
      127        2 is_mbx,					/* 1170 - 1177 ISOLTS mailbox area */
      128          3 control fixed bin (35),			/* ISOLTS in control, if non-zero */
      129          3 service fixed bin (35),			/* ISOLTS service requested flag, If non-zero */
      130          3 action_codes unaligned,			/* service action codes */
      131 	 4 pad5 bit (21),
      132 	 4 halt bit (1),				/* bit 21 - halt imediately */
      133 	 4 pad6 bit (4),
      134 	 4 ld_spgm bit (1),				/* bit 26 - load slave mode program */
      135 	 4 ld_mpgm bit (1),				/* bit 27 - load master mode program or PFT */
      136 	 4 wc_eop bit (1),				/* bit 28 - write console, end of program */
      137 	 4 wc_opt bit (1),				/* bit 29 - write console, option request flag */
      138 	 4 read bit (1),				/* bit 30 - read console */
      139 	 4 wc_type bit (1),				/* bit 31 - write console, type message */
      140 	 4 print bit (1),				/* bit 32 - print message */
      141 	 4 err bit (1),				/* bit 33 - error flag */
      142 	 4 pad7 bit (2),
      143          3 pgm_name bit (36),				/* word 3 - program name or ptr and wd count */
      144          3 pad8 (4) bit (36),
      145        2 pad9 (64) bit (36),
      146        2 wk_survey (16) bit (36),			/* 1300 - 1317 working survey table */
      147        2 pad10 (3359) bit (36),
      148        2 imw unaligned,				/* 7757 - IOM interrupt multiplexor word */
      149          3 pad bit (18),
      150          3 base bit (18),				/* base address */
      151        2 sys_survey unaligned,			/* 7760 - 7777 system survey table */
      152          3 iom0,					/* IOM 0 mailbox and port */
      153 	 4 mbx bit (18),
      154 	 4 port fixed bin,
      155          3 iom1_3 (3) bit (36),			/* same info for IOMs 1, 2, and 3 */
      156          3 console,					/* info on system console */
      157 	 4 chan fixed bin (8),			/* console channel number */
      158 	 4 pad bit (27),
      159 	 4 cons_iom bit (36),			/* iom number that console is on */
      160          3 printer,					/* info about system printer */
      161 	 4 chan fixed bin (8),			/* printer channel number */
      162 	 4 pad bit (27),
      163 	 4 prt_iom bit (36),			/* iom number that printer is on */
      164          3 cont_cpu,				/* info about control cpu */
      165 	 4 f_vec bit (18),				/* fault vector base address */
      166 	 4 port fixed bin,				/* control cpu port number */
      167          3 hi_mem,					/* info about highest addressable memory location */
      168 	 4 address fixed bin,
      169 	 4 pad bit (18),
      170          3 cpu_1,					/* info about cpu # 1 */
      171 	 4 f_vec bit (18),				/* fault vector base address */
      172 	 4 port fixed bin,				/* cpu # 1 port number */
      173          3 cpu2_4 (3) bit (36),			/* the same info for cpus 2, 3, and 4 */
      174          3 boot,					/* info on boot device */
      175 	 4 chan fixed bin (8),			/* boot tape chan number */
      176 	 4 pad bit (27),
      177 	 4 iom bit (36),				/* iom number that boot tape is on */
      178        2 exec (28672) bit (36),			/* 10000 - 77777 PAS2 exec area */
      179        2 test_pgm (32768) bit (36);			/* 100000 - 177777 slave program area */
      180 
      181 dcl  1 slave_hdr based (hdr_p) aligned,			/* slave program header template */
      182        (
      183        2 pgm_num bit (36),				/* pgm # in bcd (e.g. - pm700, pa864, ps955) */
      184        2 erlink bit (18),				/* error linkage pointer */
      185        2 pgm_rev bit (18),				/* program revision in bcd */
      186        2 p_int_tab bit (18),				/* pseudo interrupt vector ptr */
      187        2 pgm_size bit (18),				/* program size in words */
      188        2 tst_name bit (72),				/* test name */
      189        2 num_tests bit (18),				/* number of tests in program */
      190        2 xfer_p bit (18),				/* transfer table pointer */
      191        2 cksum bit (36),				/* check sum word before init. */
      192        2 program_name bit (108),			/* program name */
      193        2 pad (9) bit (36)
      194        ) unaligned;					/* pad area */
      195 
      196 dcl  1 action like is_mbx.action_codes unaligned;		/* copy of action flags */
      197 dcl  1 pi like rsw_1_3.port_info based (pip) unaligned;
      198 dcl  wseg1 (65536) fixed bin based (wseg_p);		/* work seg as an array */
      199 dcl  bcd_str bit (bcd_chars * 6) based (mptr);		/* bcd message input */
      200 dcl  add_wc (2) fixed bin unaligned based (awcp);		/* address and word count */
      201 
      202 
  1     1 /* BEGIN INCLUDE FILE ... config_cpu_card.incl.pl1 ... 11/27/80 W. Olin Sibert */
  1     2 /* format: style4 */
  1     3 
  1     4 dcl  cpu_cardp pointer;				/* pointer to CPU card */
  1     5 
  1     6 dcl  1 cpu_card aligned based (cpu_cardp),		/* CPU card declaration */
  1     7        2 word char (4),				/* "cpu" */
  1     8        2 tag fixed bin (3),				/* CPU tag from switches, plus one */
  1     9        2 port fixed bin (3),				/* Controller port for CPU */
  1    10        2 state char (4),				/* "on", "off", "shut", or "test" */
  1    11        2 type char (4),				/* "l68", "dps", "dps8" */
  1    12 
  1    13        2 model fixed bin,				/* 60., 80., or 70. */
  1    14        2 cache_size fixed bin,			/* either 0. 2. 8. 16. or 32. */
  1    15        2 expander_port fixed bin (3),			/* If present, indicates expander sub-port */
  1    16 
  1    17        2 pad (7) bit (36) aligned,			/* Pad to 15 fields */
  1    18 
  1    19        2 type_word aligned,
  1    20          3 field_type (14) bit (2) unaligned,		/* type of each field; see config_deck.incl.pl1 */
  1    21          3 pad1 bit (4) unaligned,
  1    22          3 n_fields fixed bin (4) unsigned unaligned;	/* number of fields used on card */
  1    23 
  1    24 dcl  CPU_CARD_WORD char (4) aligned internal static options (constant) init ("cpu");
  1    25 
  1    26 /* END INCLUDE FILE ... config_cpu_card.incl.pl1 */
      203 
      204 
      205 
      206 
      207       isolate_cpu = "0"b;				/* reset cleanup flag */
      208       on cleanup call clean_up;			/* establish cleanup and */
      209       on finish call clean_up;			/* finish condition handlers */
      210 
      211       call tolts_util_$get_ttl_date (isolts_, ttl_date);
      212       call tolts_util_$on_off (pname, "on", ttl_date);	/* signon */
      213 
      214 /* now get a pointer to our error message file */
      215 
      216       call isolts_err_log_$init (code);
      217       if code ^= 0 then				/* if problem */
      218          go to t_off;				/* wrap up and return */
      219 
      220 
      221 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
      222 /*											*/
      223 /* Loop until user quits									*/
      224 /*											*/
      225 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
      226 
      227 
      228 
      229       term = "0"b;					/* reset terminate cndition */
      230       do while (^term);
      231          call ioa_ ("^/***enter ""test cpu <tag>"", "" display_error"", ""test pcd"", ""msg"", or ""quit """);
      232 
      233 /* Now find out what user wants to do */
      234 
      235 ask:
      236          call tolts_util_$query ("??? ", com_string, c_len, args, cmd_cnt);
      237          if args (1) = "quit" | args (1) = "q" then	/* user wants to quit */
      238 	  term = "1"b;				/* so let him */
      239          else if args (1) = "msg" then			/* user wants to send a msg to the operator */
      240 	  call tolts_util_$opr_msg;
      241          else if args (1) = "display_error" | args (1) = "display"
      242 	| args (1) = "derr" then do;			/* display error message */
      243 	  do i = 2 to cmd_cnt by 1;
      244 
      245 	     if args (i) = "-type" then do;
      246 	        p_err = "0"b;
      247 	        args (i) = "";
      248 	        cmd_cnt = cmd_cnt - 1;
      249 	     end;
      250 	  end;
      251 	  cmd_cnt = cmd_cnt - 1;
      252 	  if ^display_log () then			/* go display requested log entries */
      253 
      254 bad_rsp:	     call com_err_ (0, pname, "invalid response - ""^a""", com_string);
      255 	  go to ask;
      256          end;
      257          else if cmd_cnt < 2 | args (1) ^= "test" then	/* bad input */
      258 	  go to bad_rsp;
      259          else if args (2) = "pcd" then do;		/* user wants a list of avail. cpus and scus */
      260 	  if cmd_cnt = 3 then call tolts_pcd_ ("isolts", (args (3)));
      261 	  else call tolts_pcd_ ("isolts", "");
      262          end;
      263          else if args (2) ^= "cpu" then			/* user goofed */
      264 	  go to bad_rsp;
      265          else do;					/* test cpu request */
      266 	  trace_sw = "0"b;				/* reset trace switch if set */
      267 	  if cmd_cnt < 3 then			/* not enough args */
      268 	     go to bad_rsp;
      269 	  cpu_tag = search ("abcdefgh", args (3));	/* convert cpu tag to number */
      270 	  if cpu_tag = 0 then			/* not correct format */
      271 	     go to bad_rsp;
      272 	  term = "0"b;
      273 	  scu_tag = -1;				/* default, let hardcore decide */
      274 	  if cmd_cnt > 3 then do;			/* additional args */
      275 	     trm = "0"b;				/* reset flag */
      276 	     do i = 4 to cmd_cnt;			/* process rest of args */
      277 	        if ^trm then			/* if tag flag not set */
      278 		 if args (i) = "-memory"
      279 		  | args (i) = "-mem" then trm = "1"b;	/* set tag flag */
      280 		 else if args (i) = "-brief"
      281 		  | args (i) = "-bf" then bf_sw = "1"b; /* set brief mode */
      282 		 else if args (i) = "-trace" then	/* user wants to trace action codes */
      283 		    trace_sw = "1"b;		/* set trace switch */
      284 		 else go to bad_rsp;		/* tell user about his typing problem */
      285 	        else do;				/* ok lets find the memory tag */
      286 		 scu_tag = search ("abcdefgh", args (i));
      287 		 if scu_tag = 0 then		/* did not find tag */
      288 		    go to bad_rsp;
      289 		 else scu_tag = scu_tag - 1;
      290 		 trm = "0"b;			/* reset tag flag */
      291 	        end;
      292 	     end;
      293 	  end;
      294 
      295 	  cpu_cardp = null;
      296 	  do while (^term);
      297 	     call tolts_util_$find_card ("cpu", cpu_cardp);
      298 	     if cpu_cardp = null then term = "1"b;
      299 	     else if cpu_card.tag = cpu_tag then do;
      300 	        if cpu_card.type ^= "l68"
      301 	         & substr (type, 1, 3) ^= "dps" then do;
      302 		 call ioa_ ("isolts_: unable to determine cpu type for cpu ^a", tags (cpu_tag - 1));
      303 reask:		 call tolts_util_$query ("enter l68 or dps8 ", com_string, c_len, args, cmd_cnt);
      304 		 if args (1) = "l68 "
      305 		  | args (1) = "dps8" then cpu_type = args (1);
      306 		 else do;
      307 		    call ioa_ ("isolts_: invalid input pls reenter.");
      308 		    goto reask;
      309 		 end;
      310 	        end;
      311 	        else cpu_type = cpu_card.type;
      312 	        term = "1"b;
      313 	     end;
      314 	  end;
      315 	  cpu_tag = cpu_tag - 1;			/* a = 0, h = 7, etc */
      316 
      317 /* Now lets go to hardcore and check if we can get resources to run */
      318 
      319 	  call tandd_$check_isolts_resources (cpu_tag, scu_tag, cpu_port, code);
      320 	  if code ^= 0 then do;			/* can't get what we need */
      321 	     call abort (code);			/* go display config error */
      322 	     go to cmd_loop;
      323 	  end;
      324 	  isolate_cpu = "1"b;			/* set flag for cleanup handler */
      325 
      326 /* now  give the operator manual reconfiguration instructions */
      327 
      328 	  if opr_com (cpu_tag, scu_tag) then		/* if permission denied */
      329 	     go to cmd_loop;			/* then go release resources */
      330 
      331 /* now go do actual reconfig and primitive cpu test */
      332 
      333 	  call tandd_$create_cpu_test_env (cpu_tag, scu_tag, switches, wseg_p, code);
      334 	  if code ^= 0 then do;			/* some problem */
      335 	     call abort (code);			/* go display config error */
      336 	     go to cmd_loop;
      337 	  end;
      338 	  call ioa_ ("^/reconfiguration complete");	/* tell user */
      339 
      340 	  hdr_p = addr (wseg.test_pgm);		/* set test program header ptr */
      341 	  wseg1 = 0;				/* clear out our memory area */
      342 	  restart = restart_label;			/* set restart label */
      343 
      344 /* now go run the pfts and pas2 */
      345 
      346 restart_label:					/* target of non-local gotos */
      347 	  call run_pas;
      348          end;
      349 cmd_loop: call clean_up;				/* go release resources if assigned */
      350       end;
      351 
      352 /* user is all done we can wrap up now */
      353 
      354 t_off: call tolts_util_$on_off (pname, "off", ttl_date);	/* signoff */
      355       return;
      356 
      357 
      358 
      359 
      360 /* run_pas - internal procedure to run and do the test sequencing of the pfts and pas2 */
      361 
      362 run_pas: proc;
      363 
      364       nxt_tst = first_pft;				/* set up for first test */
      365       awcp = addr (is_mbx.pgm_name);			/* set up address/word count templete ptr */
      366       cont_pas = continue_pas;			/* set up continue label */
      367       end_pas = end_tst;				/* set up quit label */
      368       pgm_offset = 0;				/* preset loading offset for master mode program */
      369       trm, pas_sw, mess_in_prog, ntype, run, option, car_nz = "0"b;
      370 						/* reset flags */
      371       dump_in_prog, idump = "0"b;
      372 
      373 /* quit_handler - quit condition handler for isolts */
      374 
      375       on quit begin;				/* establish quit condition handler */
      376 
      377          if pas_sw then do;				/* if not in primitives */
      378 	  ntype = "0"b;				/* force options type out */
      379 	  string (action_codes) = "0"b;		/* clear out any existing action code */
      380 	  if dump_in_prog & ^idump then do;		/* if dumping to file */
      381 	     dump_in_prog = "0"b;			/* abort dump and return to options */
      382 	     go to eopt;
      383 	  end;
      384 	  if option then do;			/* if we are in the option loop */
      385 	     call ioa_ ("^/");			/* force new line */
      386 	     car_nz = "0"b;
      387 	     go to eopt;
      388 	  end;
      389 	  action_codes.halt = "1"b;			/* set halt imediate flag */
      390 	  go to cont_pas;				/* perform non local go to */
      391          end;
      392          else call continue_to_signal_ (code);		/* if not in pas2 pass it on */
      393 
      394       end;
      395 
      396       call ioa_ ("^/start pft ^a^/", nxt_tst);
      397 
      398       do while (^trm);				/* loop until user quits */
      399 
      400 /* search for test page in file system */
      401 
      402          call tolts_util_$search (df_iocbp, "pas." || nxt_tst, t_ptr, c_len, code);
      403          if code ^= 0 then do;			/* if couldn't find test page */
      404 	  call com_err_ (code, pname, "searching for pas.^a", nxt_tst);
      405 	  ntype = "0"b;
      406 	  string (action_codes) = "0"b;
      407 	  action_codes.halt = "1"b;
      408 	  go to cont_pas;
      409          end;
      410 
      411 /* load the core image into our work segment */
      412 
      413 tout_retry: call gload_ (t_ptr, addrel (wseg_p, pgm_offset), 0, addr (gload_data), code);
      414          if code ^= 0 then do;			/* problem durring load */
      415 	  call com_err_ (code, pname, "^a^/attempting to load pas.^a",
      416 	   gload_data.diagnostic, nxt_tst);
      417 	  return;
      418          end;
      419 
      420 /* reset the isolts mailbox flags and set isolts control flag */
      421 
      422          if ^pas_sw then				/* if pft */
      423 	  call set_survey;				/* go set up system survey */
      424          else do;
      425 	  delay = pas_delay;
      426 	  slave_hdr.cksum = gload_data.checksum;	/* set up deck checksum in pgm header */
      427          end;
      428          if nxt_tst = "892" | nxt_tst = "893"		/* thesetests cause timeouts */
      429 	| nxt_tst = "955" then delay_iter = 600;	/* increase the delay until fixed */
      430          else delay_iter = 300;
      431          string (is_mbx.action_codes) = "0"b;		/* reset all action flags */
      432          is_mbx.pgm_name = "0"b;			/* reset program name */
      433 continue_pas:					/* target of non local go tos */
      434          if is_mbx.control = 0 then			/* if flag is reset */
      435 	  is_mbx.control = 65535;			/* set it to indicate isolts in control */
      436          is_mbx.service = 0;				/* reset service requested flag */
      437          if trace_sw then				/* if tracing action codes */
      438 	  if string (action_codes) ^= "0"b then		/* and we have  bit 21 set */
      439 	     call itrace;				/* go trace action code */
      440 
      441 /* send interrupt to the cpu under test */
      442 
      443          call tandd_$interrupt_test_cpu (code);
      444          if code ^= 0 then do;			/* if couldn't interrupt */
      445 	  call com_err_ (code, pname, "attempting to interrupt cpu ^a", tags (cpu_tag));
      446 	  return;
      447          end;
      448 
      449 /* now go to sleep for awhile */
      450 
      451          do i = 1 to 1000 while (is_mbx.service = 0);
      452          end;					/* give pas2 a chance if intermediate I/O */
      453          if is_mbx.service = 0 then			/* if didn't make it give up processor */
      454 wait:	  call sleep (delay);
      455          if is_mbx.service = 0 then do;			/* if time out */
      456 	  call ioa_ (" ");				/* make sure we return to collum 1 */
      457 	  if ^pas_sw & nxt_tst ^= pas_exec then do;	/* if pft and not pas2 exec */
      458 	     call com_err_ (0, pname,
      459 	      "time out after ^d seconds while executing PFT ^a",
      460 	      delay * delay_iter, nxt_tst);
      461 	     call com_err_ (0, pname,
      462 	      "check cpu ^a's maintenence panel and consult program listing to determine failure",
      463 	      tags (cpu_tag));
      464 	  end;
      465 	  else if nxt_tst = pas_exec then		/* hung up while initializing pas exec */
      466 	     call com_err_ (0, pname,
      467 	      "time out after ^d seconds while initializing the pas2 executive",
      468 	      delay * delay_iter);
      469 	  else call com_err_ (0, pname,
      470 	        "time out after ^d seconds while executing pas2 test ^a",
      471 	        delay * delay_iter, nxt_tst);
      472 	  trm1 = "0"b;
      473 	  do while (^trm1);				/* loop until user gets it right */
      474 	     call tolts_util_$query ("respond ""quit (q)"", ""retry (r)"", or ""continue (c)"" - ",
      475 	      com_string, c_len, args, cmd_cnt);
      476 	     if args (1) = "quit" | args (1) = "q" then	/* user wants to get out */
      477 	        return;
      478 	     else if args (1) = "retry"
      479 	      | args (1) = "r" then			/* user wants to retry test */
      480 	        go to tout_retry;
      481 	     else if args (1) = "continue"
      482 	      | args (1) = "c" then			/* wait some more */
      483 	        go to wait;
      484 	  end;
      485          end;
      486          else do;
      487 	  string (action) = string (is_mbx.action_codes); /* copy action codes */
      488 	  if trace_sw then				/* if tracing action codes */
      489 	     call itrace;				/* go trace action code */
      490 	  string (is_mbx.action_codes) = "0"b;		/* and reset */
      491 	  call interpret_action;			/* do what the test wants */
      492          end;
      493 end_tst:						/* target of non-local gotos */
      494       end;
      495 
      496 
      497 
      498    end run_pas;
      499 
      500 
      501 
      502 /* interpret_action - internal procedure to interpret  the isolts action flags */
      503 
      504 interpret_action: proc;
      505 
      506       if action.ld_mpgm | action.ld_spgm then do;		/* load next program request */
      507          call complete_err_mess;			/* go complete error message if one active */
      508          call bcd_to_ascii_ (substr (pgm_name, 13, 18), new_tst);
      509 						/* convert tst id to ascii */
      510          if trace_sw then				/* if user tracing action codes... */
      511 	  call ioa_ ("load pgm^a", new_tst);		/* tell him what we want to load */
      512          do i = 1 to hbound (inv_tst_ids, 1) while (new_tst ^= inv_tst_ids (i));
      513          end;					/* check validity of test id */
      514          if i <= hbound (inv_tst_ids, 1) then do;		/* If this test is illegal for isolts */
      515 	  ntype = "1"b;				/* set flag so we don't type options message */
      516 	  action_codes.halt = "1"b;			/* set halt imediate flag */
      517 	  go to cont_pas;				/* perform non local goto */
      518          end;
      519          if ^pas_sw & ^bf_sw then			/* if PFT and not in brief mode ... */
      520 	  call ioa_ ("*** end ^a, next ^a ***", nxt_tst, new_tst); /* display test seq for user */
      521          nxt_tst = new_tst;				/* pick up new test id and go find it */
      522          if action.ld_spgm then			/* if slave program to be loaded */
      523 	  pgm_offset = fixed (rel (addr (wseg.test_pgm)), 18); /* set slave base */
      524          else pgm_offset = 0;				/* if master mode pgm then offset = 0 */
      525       end;					/* fall through and return */
      526       else if action.wc_type | action.wc_eop | action.wc_opt then do;
      527 						/* write console */
      528          call complete_err_mess;			/* go complete error message if one active */
      529          mptr = ptr (wseg_p, add_wc (1));
      530          bcd_chars = add_wc (2) * 6;			/* get address and word count of message */
      531          call tolts_util_$bci_to_ascii (bcd_str, out_str, bcd_chars); /* convert bcd */
      532          if substr (out_str, 1, 1) = NL & length (out_str) > 2 then /* if new line strip it off */
      533 	  out_str = substr (out_str, 2);
      534          if action.wc_type & length (out_str) >= 1 then	/* if output to go on same line */
      535 	  car_nz = "1"b;
      536          if action.wc_opt | action.wc_eop then option = "1"b; /* if option type request */
      537          else option = "0"b;
      538 
      539          if ^ntype then do;				/* if no type flag is on ignore message */
      540 	  call ioa_$nnl ("^[^/^]^a^[^/^]", (car_nz & length (out_str) > 1),
      541 	   out_str, (^action.wc_opt & length (out_str) > 1 & ^option));
      542 	  if length (out_str) > 1 then car_nz = "0"b;	/* reset carriage position switch */
      543          end;
      544          go to cont_pas;				/* perform non local goto */
      545       end;
      546       else if action.read then			/* enter options request */
      547          call enter_options;
      548       else if action.print then do;			/* output message to printer */
      549          mptr = ptr (wseg_p, add_wc (1));
      550          mlen = add_wc (2);				/* set word count of message */
      551          if dump_in_prog then				/* if we are getting dump reg info from pas2 */
      552 	  call isolts_err_log_$dump (d_type, mptr, (mlen), 1, cpu_tag, scu_tag);
      553          else if action.err | mess_in_prog then do;	/* if new error message or one in progress */
      554 	  if mlen > 1 & mlen < 5 & ^mess_in_prog then do; /* must be end pass & ^message */
      555 	     mptr = ptr (wseg_p, add_wc (1));
      556 	     bcd_chars = add_wc (2) * 6;		/* get address and word count of message */
      557 	     call tolts_util_$bci_to_ascii (bcd_str, out_str, bcd_chars);
      558 						/* convert bcd */
      559 	     call ioa_ (" ^a", out_str);		/* print on terminal */
      560 	     go to cont_pas;
      561 	  end;
      562 	  else if action.err then do;			/* if beginning of new message */
      563 	     call complete_err_mess;			/* complete old one */
      564 	     mess_in_prog = "1"b;			/* indicate an unfinished error message */
      565 	     mtype = 1;				/* set message type flag to start of message */
      566 	     if ^run then do;			/* if run option not in force */
      567 	        call ioa_ ("^/*** an error has occurred ***^/");
      568 						/* let user know about error */
      569 	     end;
      570 	  end;
      571 	  else mtype = 2;				/* must be intermediate message */
      572 	  call isolts_err_log_$write (mptr, mlen, mtype, cpu_tag, scu_tag);
      573          end;
      574          else do;					/* write it to users terminal for now */
      575 	  bcd_chars = mlen * 6;			/* get word count of message */
      576 	  call tolts_util_$bci_to_ascii (bcd_str, out_str, bcd_chars);
      577 						/* convert bcd */
      578 	  if ^bf_sw then do;			/* if not in brief mode */
      579 	     call ioa_ ("^[^/^]^a", car_nz, out_str);	/* display message for user */
      580 	     car_nz = "0"b;				/* reset carriage position switch */
      581 	  end;
      582          end;
      583          go to cont_pas;				/* perform non local goto */
      584       end;
      585 
      586    end interpret_action;
      587 
      588 
      589 
      590 /* enter_options - internal procedure to enter pas2 or isolts options and check for legality */
      591 
      592 enter_options: proc;
      593 
      594       add_opt = "";					/* pad additional option  with blanks */
      595       mptr = ptr (wseg_p, add_wc (1));			/* get ptr to return options string */
      596       eopt = opt_mess;				/* set enter options label */
      597       if dump_in_prog then do;			/* dumping and we get here, means we are ready to dump */
      598          idump = "0"b;				/* octal from the Multics side */
      599          call isolts_err_log_$dump (d_type, addrel (wseg_p, first), last,
      600 	2, cpu_tag, scu_tag);			/* dump it */
      601          idump, ntype, dump_in_prog = "0"b;		/* dump finsihed, reset flags */
      602          go to opt_mess;				/* and go to enter options */
      603       end;
      604       if ntype then do;				/* if we are forcing seq option */
      605          ntype = "0"b;				/* reset it so we don't come back */
      606          bcd_chars = 6;
      607          call tolts_alm_util_$ascii_to_bci_ ("seq", bcd_str);
      608 						/* convert ascii to bcd */
      609          go to cont_pas;				/* and return to pas2 exec */
      610       end;
      611 
      612 reenter:
      613       call tolts_util_$query (" ", com_string, c_len, args, cmd_cnt);
      614       if cmd_cnt = 0 then do;				/* if user typed NL char */
      615          option = "0"b;				/* reset options flag */
      616          go to cont_pas;				/* return to pas2 at point interrupted */
      617       end;
      618 
      619 /* check for ISOLTS only options first */
      620 
      621       if option then do;				/* execute only if options request */
      622          if ck_isolts_opt () then			/* if isolts option, it has already been done */
      623 	  go to opt_mess;				/* go to options again */
      624          else do;					/* must be pas2 option, check them for legality */
      625 	  k = 0;
      626 	  trm1 = "0"b;
      627 	  if cmd_cnt > 0 then do;
      628 	     do i = 1 to cmd_cnt while (^trm1);
      629 	        if length (args (i)) > 2 then do;
      630 		 if substr (args (i), 1, 3) = "prg"
      631 		  | substr (args (i), 1, 3) = "tst" then
      632 		    k = i;			/* set flag for later */
      633 	        end;
      634 	        else
      635 		 do j = 1 to hbound (illegal_pas_opt, 1) while (^trm1);
      636 		 if args (i) = illegal_pas_opt (j) then
      637 		    trm1 = "1"b;			/* if illegal option */
      638 	        end;
      639 	     end;
      640 	  end;
      641 	  if trm1 then do;				/* if user has entered options not supported by ISOLTS */
      642 	     call com_err_ (0, pname, "^a option not supported by ^a", args (i - 1), pname);
      643 opt_mess:	     call ioa_$nnl ("^a", out_str);
      644 	     go to reenter;
      645 	  end;
      646 	  if k ^= 0 then do;			/* if "prgxxx" or "tstxxx" option specified */
      647 	     do i = 1 to hbound (inv_tst_ids, 1) while (substr (args (k), 4, 3) ^= inv_tst_ids (i));
      648 	     end;
      649 	     if i <= hbound (inv_tst_ids, 1) then do;	/* found bad tst id */
      650 	        call com_err_ (0, pname, "^a not supported by ^a",
      651 	         args (k), pname);
      652 	        go to opt_mess;			/* let user try again */
      653 	     end;
      654 	  end;
      655 	  if add_opt ^= "" then			/* if additional option */
      656 	     com_string = rtrim (com_string) || " " || add_opt; /* add it to end */
      657 	  if index (com_string, "run") ^= 0 then	/* if run option specified */
      658 	     run = "1"b;
      659 	  if index (com_string, "halt") ^= 0 then run = "0"b; /* reset run if halt option */
      660 	  if index (com_string, "reset") ^= 0 then do;	/* if reset option */
      661 	     run = "0"b;				/* reset run flag */
      662 	     p_err = "1"b;				/* set print error flag */
      663 	  end;
      664 	  option = "0"b;				/* reset option flag */
      665          end;
      666       end;
      667       bcd_chars = length (rtrim (com_string));		/* get exact options string length */
      668       if mod (bcd_chars, 6) ^= 0
      669        then					/* if not already mod 6 */
      670          bcd_chars = bcd_chars + (6 - mod (bcd_chars, 6));	/* make output mod 6 */
      671       call tolts_alm_util_$ascii_to_bci_ (com_string, bcd_str); /* convert it to bcd */
      672       go to cont_pas;				/* perform non_local goto */
      673 
      674    end enter_options;
      675 
      676 
      677 
      678 
      679 
      680 /* clean_up - internal procedure to establish a cleanup and finish condition handler */
      681 
      682 clean_up: proc;
      683 
      684       if isolate_cpu then do;				/* if cleanup flag set */
      685          call tandd_$destroy_cpu_test_env;
      686          isolate_cpu = "0"b;				/* reset flag */
      687       end;
      688       if df_iocbp ^= null then do;			/* detach deck file if attached */
      689          call iox_$close (df_iocbp, code);
      690          call iox_$detach_iocb (df_iocbp, code);
      691          df_iocbp = null;
      692       end;
      693 
      694    end clean_up;
      695 
      696 /* sw_mess_1, sw_mess_2 - subroutines to set up read switch error diagnostics */
      697 
      698 sw_mess_1: proc (arg, mess);
      699 
      700 dcl  (arg, mess) char (*);
      701 
      702       arg = rtrim (arg) || NL || mess;
      703       return;
      704 
      705 sw_mess_2: entry (arg, mess);
      706 
      707       arg = rtrim (arg) || NL || "memory " || tags (i) || " " || mess;
      708       return;
      709 
      710    end sw_mess_1;
      711 
      712 
      713 
      714 /* sleep - internal procedure to put process to sleep for specified time period */
      715 
      716 sleep: proc (t_delay);
      717 
      718 dcl  (t_delay, i) fixed bin;
      719 dcl  tm_delay fixed bin (71);
      720 
      721       tm_delay = t_delay;
      722       do i = 1 to delay_iter while (is_mbx.service = 0);	/* loop until service requested or time out */
      723          call timer_manager_$sleep (tm_delay, "11"b);	/* sleep for specified seconds */
      724       end;
      725 
      726    end sleep;
      727 
      728 /* complete_err_mess - internal subroutine to check if an error message is in progress and complete it */
      729 
      730 complete_err_mess: proc;
      731 
      732       if ^pas_sw then				/* if still in primitives */
      733          if nxt_tst >= pas_exec then			/* set pas switch if in pas exec or pas pgm */
      734 	  pas_sw = "1"b;
      735       if mess_in_prog then do;			/* if error message in progress */
      736          mess_in_prog = "0"b;				/* reset flag */
      737          call isolts_err_log_$write (null, 0, 3, 0, 0);	/* complete it */
      738       end;
      739    end complete_err_mess;
      740 
      741 /* set_survey - internal procdure to set up system survey table */
      742 
      743 set_survey: proc;
      744 
      745       delay = pft_delay;				/* set up pft delay value */
      746       iom0.mbx = "001400"b3;				/* set up iom 0 mailbox address */
      747       cont_cpu.f_vec, cpu_1.f_vec = "000100"b3;		/* set up fault vector address */
      748       iom0.port, cont_cpu.port, cpu_1.port = cpu_port;	/* set port number */
      749       imw.base = "001200"b3;				/* set interrupt multiplexor base */
      750 
      751    end set_survey;
      752 
      753 
      754 
      755 /* itrace - internal procedure to trace action codes and time */
      756 
      757 itrace: proc;
      758 
      759       tim = time;					/* get current time */
      760       call ioa_ ("^a.^a - action code = ^12.3b", substr (tim, 1, 4),
      761        substr (tim, 5, 3), string (action_codes));
      762    end itrace;
      763 
      764 /* ck_isolts_opt - internal procedure to check and perform isolts only options */
      765 
      766 ck_isolts_opt: proc returns (bit (1));
      767 
      768       if args (1) = "quit" | args (1) = "q" then do;	/* user wants to quit */
      769          trm = "1"b;				/* set terminate condition */
      770          go to end_pas;				/* perform non-local goto */
      771       end;
      772       else if args (1) = "restart" then			/* user wants to restart from PFTs */
      773          go to restart;				/* perform non-local goto */
      774       else if args (1) = "itrace_on"
      775        | args (1) = "itn" then			/* user wants to turn on trace */
      776          trace_sw = "1"b;
      777       else if args (1) = "itrace_off"
      778        | args (1) = "itf" then			/* user wants to turn trace off */
      779          trace_sw = "0"b;
      780       else if args (1) = "type"
      781        | args (1) = "atype" then do;			/* type messages */
      782          p_err = "0"b;				/* reset dprint error switch */
      783          if args (1) = "type" then			/* pas2 still thinks he */
      784 	  add_opt = "print";			/* is going to printer */
      785          else add_opt = "aprint";
      786       end;
      787       else if args (1) = "print"
      788        | args (1) = "aprint" then do;			/* dprint messages */
      789          p_err = "1"b;				/* set dprint error switch */
      790          add_opt = args (1);				/* set additional option */
      791       end;
      792       else if args (1) = "test"
      793        & args (2) = "msg" then			/* user wants to communicate with the operator */
      794          call tolts_util_$opr_msg;
      795       else if args (1) = "display_error"
      796        | args (1) = "display"
      797        | args (1) = "derr" then do;			/* display error message */
      798          if ^display_log () then do;			/* go display requested log entries */
      799 inv_display:
      800 	  call com_err_ (0, pname, "invalid input - ""^a""", com_string);
      801 	  return ("1"b);				/* reneter options */
      802          end;
      803       end;
      804       else if args (1) = "E" then do;			/* user wants to execute Multics command */
      805          com_string = ltrim (substr (com_string, 2));
      806          call cu_$cp (addr (com_string), length (com_string), code);
      807 						/* execute Multics command */
      808       end;
      809       else if args (1) = "cdump" | args (1) = "mdump"
      810        | args (1) = "xdump" | args (1) = "sdump" then do;
      811          first = 0;					/* set defaults */
      812          last = 65535;
      813          d_type = args (1);
      814          if cmd_cnt > 1 then do;			/* if we have offset */
      815 	  first = cv_oct_check_ ((args (2)), code);	/* convert offset arg */
      816 	  if code ^= 0 | first > 65535 then		/* tell user what he typed wrong */
      817 	     go to inv_display;
      818 	  last = last - first;			/* adjust length */
      819 	  if cmd_cnt > 2 then do;			/* if length arg supplied */
      820 	     last = cv_oct_check_ ((args (3)), code);
      821 	     if code ^= 0 | first + last > 65536 then	/* tell user what he typed wrong */
      822 	        go to inv_display;
      823 	  end;
      824          end;
      825          if args (1) = "cdump" then do;			/* if console dump requested */
      826 	  call ioa_ ("^/^a ""cdump"" from ^o to ^o of cpu ^a using memory ^a^/",
      827 	   pname, first, last + first, tags (cpu_tag), tags (scu_tag));
      828 	  call dump_segment_ (iox_$user_output, addrel (wseg_p, first), 0, first, last, "01000000000"b);
      829 	  dump_in_prog = "0"b;			/* entire cdump done from Multics side */
      830 	  return ("1"b);				/* return for next option */
      831          end;
      832          else if args (1) = "sdump" then do;		/* if slave dump to be taken */
      833 	  first = fixed (rel (hdr_p), 17);		/* set first to slave base */
      834 	  last = fixed (slave_hdr.pgm_size, 17);	/* dump this many words */
      835 	  if last = 0 then do;			/* no slave program loaded */
      836 	     call ioa_ ("slave program not loaded");	/* tell user */
      837 	     return ("1"b);				/* and return for next option */
      838 	  end;
      839 	  else if last > hbound (wseg.test_pgm, 1) then	/* in case there is garbage here */
      840 	     last = hbound (wseg.test_pgm, 1) - 1;	/* set it to last loc in wseg */
      841          end;
      842          dump_in_prog, ntype, idump = "1"b;		/* set flags */
      843          return ("0"b);				/* let pas2 handle first part of dump */
      844       end;
      845       else return ("0"b);				/* not isolts option, go process pass options */
      846       return ("1"b);				/* isolts option has been processed */
      847 
      848    end ck_isolts_opt;
      849 
      850 
      851 
      852 /* opr_com - internal procedure to relay manual reconfiguration intructions to operator */
      853 
      854 opr_com: proc (icpu, iscu) returns (bit (1));
      855 
      856 dcl  (icpu, iscu) fixed bin (5);
      857 dcl  timer_manager$sleep entry (fixed bin (71), bit (2));
      858 dcl  d fixed bin (71) init (1);
      859 
      860       opr_query_info.q_sw = "1"b;			/* must wait for opr to grant or deny permission */
      861       opr_query_info.prim = "grant";			/* set primary expected response */
      862       opr_query_info.alt = "deny";			/* set alternate expected response */
      863       opr_query_info.r_comment = "";
      864       call ioa_ ("asking operators permission to test cpu ""^a"" using memory ""^a""", tags (icpu), tags (iscu));
      865       call opr_query_ (addr (opr_query_info),
      866        "permission asked to test cpu ""^a"" using memory ""^a""", tags (icpu), tags (iscu));
      867       if opr_query_info.answer = "deny" then do;		/* if opr doesn't want us to use cpu */
      868          call ioa_ ("permission denied");		/* tell user the sad news */
      869          return ("1"b);				/* return and indicate denial */
      870       end;
      871       call ioa_ ("permission granted");			/* operator says it ok to test cpu */
      872       call ioa_ ("asking operator to manually reconfigure cpu ^a", tags (icpu));
      873       opr_query_info.q_sw = "0"b;			/* no operator response needed */
      874       call opr_query_ (addr (opr_query_info),
      875        "execute the following manual reconfiguration on cpu ""^a"":", tags (icpu));
      876       call timer_manager_$sleep (d, "11"b);		/* To prevent console messages from getting out of sync */
      877       call opr_query_ (addr (opr_query_info),
      878        " 1. set all port and initialize enable switches and interlace switches to off.");
      879       call timer_manager_$sleep (d, "11"b);		/* To prevent console messages from getting out of sync */
      880       if cpu_type = "dps8"
      881        then
      882          call opr_query_ (addr (opr_query_info),
      883 	" 2. set the assignment switches for all ports to 000.");
      884       else if cpu_type = "l68 "
      885        then
      886          call opr_query_ (addr (opr_query_info),
      887 	" 2. set all port assignment switches to 000 and the size switches to full");
      888       call timer_manager_$sleep (d, "11"b);		/* To prevent console messages from getting out of sync */
      889       if cpu_type = "dps8" then
      890          call opr_query_ (addr (opr_query_info),
      891 	" 3. set store size switches to 2222.");
      892       else if cpu_type = "l68 "
      893        then
      894          call opr_query_ (addr (opr_query_info),
      895 	" 3. remove the right free-edge connector on the 645pq wwb at slot ab28.");
      896       call timer_manager_$sleep (d, "11"b);		/* To prevent console messages from getting out of sync */
      897       if cpu_type = "dps8" then
      898          call opr_query_ (addr (opr_query_info),
      899 	" 4. verify that the mode switch is in vms.");
      900       else if cpu_type = "l68 " then
      901          call opr_query_ (addr (opr_query_info),
      902 	" 4. install the ""cpu test""  on the right free-edge connector at slot ab28.");
      903       call timer_manager_$sleep (d, "11"b);		/* To prevent console messages from getting out of sync */
      904       call opr_query_ (addr (opr_query_info),
      905        " 5. depress the initialize and clear push button.");
      906       call timer_manager_$sleep (d, "11"b);		/* To prevent console messages from getting out of sync */
      907       opr_query_info.q_sw = "1"b;			/* must wait for opr response */
      908       opr_query_info.prim = "done";			/* set primary expected response */
      909       opr_query_info.alt = "unable";			/* set alternate response */
      910       opr_query_info.r_comment = "when reconfiguration complete";
      911 						/* set response comment */
      912       call opr_query_ (addr (opr_query_info),
      913        " 6. set the port enable switch ""on"" for port ""^a"".", tags (iscu));
      914       if opr_query_info.answer = "unable" then do;
      915          call ioa_ ("having problems reconfiguring");
      916          return ("1"b);
      917       end;
      918 
      919       else return ("0"b);				/* return and indicate manual reconfig complete */
      920    end opr_com;
      921 
      922 
      923 
      924 
      925 
      926 
      927 
      928 
      929 /* display_log - internal procedure to display messages in the isolts_err_log */
      930 
      931 display_log: proc returns (bit (1));
      932 
      933       if cmd_cnt = 1 then				/* if only last message wanted */
      934          count, limit = 1;
      935       else if cmd_cnt >= 2 & cmd_cnt < 4 then		/* count, limit or -all */
      936          if args (2) = "-all" then			/* print entire log */
      937 	  count, limit = -1;
      938          else do;
      939 	  count = cv_dec_check_ ((args (2)), code);	/* convert count */
      940 	  if code ^= 0 then				/* must be dec number */
      941 	     return ("0"b);				/* return error */
      942 	  if cmd_cnt < 3 then			/* no limit specified, set to 1 */
      943 	     limit = 0;
      944 	  else do;
      945 	     limit = cv_dec_check_ ((args (3)), code);
      946 	     if code ^= 0 then			/* must be dec number */
      947 	        return ("0"b);			/* return error */
      948 	  end;
      949          end;
      950       else return ("0"b);				/* no more than 3 args allowed, return error */
      951       call isolts_err_log_$display (count, limit, p_err);	/* display requested err messages */
      952       return ("1"b);				/* return with no error */
      953    end display_log;
      954 
      955 
      956 
      957 /* abort - internal subroutine to display reconfiguration error messages */
      958 
      959 abort: proc (ecode);
      960 
      961 dcl  ecode fixed bin (35);
      962 dcl  (arg1, arg3, arg4) char (12);
      963 dcl  arg2 char (128);
      964 
      965 dcl  reconfig_err_message (17) char (64) static options (constant) init
      966       ("System dynamic reconfiguration in progress, try later", /* rcerr_isolts_locked */
      967       "cpu tag ^a is illegal",			/* rcerr_isolts_illegal_cpu */
      968       "cpu ^a is online and unavailable for test",	/* rcerr_isolts_cpu_online */
      969       "cpu ^a is not configured",			/* rcerr_isolts_no_config */
      970       "there must be at least two online scus to run isolts", /* rcerr_isolts_two_scu */
      971       "scu tag ^a is illegal",			/* rcerr_isolts_illegal_scu */
      972       "scu ^a is the bootload scu and cannot be used for testing", /* rcerr_isolts_bootload_scu */
      973       "scu ^a is not online",				/* rcerr_isolts_scu_not */
      974       "requesting process is not running isolts",		/* rcerr_isolts_not */
      975       "cpu ^a responded to interrupt cell ^a at loc ^a",	/* rcerr_isolts_wrong_cell */
      976       "cpu ^a responded to an interrupt cell ^a on scu ^a", /* rcerr_isolts_wrong_scu */
      977       "cpu ^a responded to an interrupt cell ^a on scu ^a at loc ^a", /* rcerr_isolts_wrong_scu_cell */
      978       "cpu ^a failed to respond to an interrupt cell ^a interrupt", /* rcerr_isolts_no_response */
      979       "the following switches on cpu ^a are set incorrectly: ^a", /* rcerr_isolts_bad_switches */
      980       "a ""lda 2"" did not operate properly",		/* rcerr_isolts_lda_fail */
      981       "a ""lda 65536"" (64k) failed to produce a store fault", /* rcerr_isolts_no_str_flt */
      982       "scu ^a has no interrupt mask register assigned to cpu ^a"); /* rcerr_isolts_no_mask */
      983 
      984       call com_err_ (0, pname, "the following errors were detected while attempting reconfiguration:^/");
      985       if ecode > 17 then				/* if standard error code */
      986          call com_err_ (ecode, pname, "attempting reconfiguration");
      987 
      988       else do;					/* reconfig error message */
      989          arg1, arg2, arg3, arg4 = "";			/* initialize args */
      990          if ecode > 9 & ecode < 14 then do;		/* if codes 10 - 13 */
      991 	  rswp = addr (switches (1));			/* set ptr to cpu switch data */
      992 	  arg1 = tags (cpu_tag);			/* set cpu tag arg */
      993 	  call ioa_$rsnnl ("^d", arg2, i, rswp -> switch_w1.cell); /* set int cell number */
      994 	  if ecode > 10 & ecode < 13 then		/* if codes 11 or 12 */
      995 	     arg3 = tags (scu_tag);			/* set scu_tag */
      996          end;
      997          go to etype (ecode);				/* go set up correct message */
      998 
      999 etype (2):					/* rcerr_isolts_illegal_cpu */
     1000 etype (3):					/* rcerr_isolts_cpu_online */
     1001 etype (4):					/* rcerr_isolts_no_config */
     1002          arg1 = tags (cpu_tag);			/* cpu tag only */
     1003          go to display_err;				/* display message */
     1004 
     1005 etype (6):					/* rcerr_isolts_illegal_scu */
     1006 etype (7):					/* rcerr_isolts_bootload_scu */
     1007 etype (8):					/* rcerr_isolts_scu_not */
     1008          arg1 = tags (scu_tag);			/* scu_tag only */
     1009          go to display_err;				/* display message */
     1010 
     1011 etype (10):					/* rcerr_isolts_wrong_cell */
     1012          call ioa_$rsnnl ("^o", arg3, i, rswp -> switch_w1.offset);
     1013          go to display_err;				/* display message */
     1014 
     1015 etype (12):					/* rcerr_isolts_wrong_scu_cell */
     1016          call ioa_$rsnnl ("^o", arg4, i, rswp -> switch_w1.offset);
     1017          go to display_err;				/* display message */
     1018 
     1019 etype (17):					/* rcerr_isolts_no_mask */
     1020          arg1 = tags (scu_tag);
     1021          arg2 = tags (cpu_tag);
     1022          go to display_err;				/* display message */
     1023 
     1024 etype (14):					/* rcerr_isolts_bad_swiches */
     1025          arg1 = tags (cpu_tag);
     1026          rswp = addr (switches (2));
     1027          if cpu_type = "l68 " then do;
     1028 	  if dps_rsw_2.fault_base then
     1029 	     call sw_mess_1 (arg2, "fault base");
     1030 	  if dps_rsw_2.cpu_num ^= 0 then
     1031 	     call sw_mess_1 (arg2, "processor number");
     1032          end;
     1033          else if cpu_type = "dps8" then do;
     1034 	  if dps8_rsw_2.fault_base then
     1035 	     call sw_mess_1 (arg2, "fault base");
     1036 	  if dps8_rsw_2.cpu_num ^= 0 then
     1037 	     call sw_mess_1 (arg2, "processor number");
     1038          end;
     1039          rswp = addr (switches (4));
     1040          do i = 0 to 7;
     1041 	  if i < 4 then
     1042 	     pip = addr (addr (switches (1)) -> rsw_1_3.port_info (i));
     1043 	  else pip = addr (addr (switches (3)) -> rsw_1_3.port_info (i - 4));
     1044 
     1045 	  if pi.port_assignment then
     1046 	     call sw_mess_2 (arg2, "port assignment");
     1047 	  if pi.port_enable then
     1048 	     call sw_mess_2 (arg2, "port enable");
     1049 	  if pi.initialize_enable then
     1050 	     call sw_mess_2 (arg2, "initialize enable");
     1051 	  if pi.interlace_enable | rsw_4.four (i) then
     1052 	     call sw_mess_2 (arg2, "interlace");
     1053 	  if pi.mem_size ^= 0 then
     1054 	     call sw_mess_2 (arg2, "size");
     1055 	  if rsw_4.half (i) then
     1056 	     call sw_mess_2 (arg2, "half/full");
     1057          end;
     1058 
     1059          go to display_err;				/* display_message */
     1060 
     1061 etype (1):					/* rcerr_isolts_locked */
     1062 etype (5):					/* rcerr_isolts_two_scu */
     1063 etype (9):					/* rcerr_isolts_not */
     1064 etype (11):					/* rcerr_isolts_wrong_scu */
     1065 etype (13):					/* rcerr_isolts_no_response */
     1066 etype (15):					/* rcerr_isolts_lda_fail */
     1067 etype (16):					/* rcerr_isolts_no_str_flt */
     1068 
     1069 display_err: call com_err_ (0, pname, reconfig_err_message (ecode), arg1, arg2, arg3, arg4);
     1070 
     1071       end;
     1072 
     1073 
     1074 
     1075    end abort;
     1076 
     1077 
     1078 
  2     1 
  2     2 /* Begin include file ...... rcerr.incl.pl1 */
  2     3 /* These are the reconfiguration error codes. */
  2     4 /*	Created 4/5/76 by Noel I. Morris	*/
  2     5 /* Modified 5/25/78 by J. A. Bush to add ISOLTS  reconfig error codes */
  2     6 /* Modified 5/79 by BSG for port expander */
  2     7 
  2     8 
  2     9 /****^  HISTORY COMMENTS:
  2    10*  1) change(88-07-27,Farley), approve(88-10-05,MCR7968),
  2    11*     audit(88-10-10,Beattie), install(88-10-14,MR12.2-1166):
  2    12*     Added new rcerr_addscu_memoverlap error code.
  2    13*                                                   END HISTORY COMMENTS */
  2    14 
  2    15 
  2    16 dcl (rcerr_addcpu_no_response init (1),			/* no response from CPU */
  2    17      rcerr_addcpu_bad_switches init (2),		/* CPU config switches set improperly */
  2    18      rcerr_addcpu_trouble init (3),			/* trouble fault adding CPU */
  2    19      rcerr_addcpu_startup init (4),			/* startup fault adding CPU */
  2    20      rcerr_addcpu_lockup init (5),			/* lockup fault adding CPU */
  2    21      rcerr_addcpu_gcos init (6),			/* attempt to add processor in GCOS mode */
  2    22      rcerr_addcpu_amoff init (7),			/* attempt to add processor with assoc mem off */
  2    23      rcerr_addcpu_enable init (8)			/* controller port for CPU not enabled */
  2    24      ) fixed bin static options (constant);
  2    25 
  2    26 dcl (rcerr_delcpu_no_stop init (1),			/* CPU did not stop running */
  2    27      rcerr_delcpu_last init (2),			/* attempt to delete last CPU */
  2    28      rcerr_delcpu_no_good_blcpu init (3)		/* no suitable bootload CPU left */
  2    29      ) fixed bin static options (constant);
  2    30 
  2    31 dcl (rcerr_addscu_size init (1),			/* memory size discrepancy */
  2    32      rcerr_addscu_dup_mask init (2),			/* duplicate mask assignment */
  2    33      rcerr_addscu_no_mask init (3),			/* no mask assigned to CPU */
  2    34      rcerr_addscu_bad_mask init (4),			/* mask assigned to non-CPU port */
  2    35      rcerr_addscu_fault init (5),			/* fault trying to add controller */
  2    36      rcerr_addscu_switches init (6),			/* some active module has incorrect switches */
  2    37      rcerr_addscu_enable init (7),			/* some active module not enabled */
  2    38      rcerr_addscu_manual init (8),			/* 4MW SCU is in manual mode */
  2    39      rcerr_addscu_oldexpand init (9),			/* Adding 6000 SCU with port expander */
  2    40      rcerr_addscu_bigconfig init (10),			/* SCU has less memory than config cards say */
  2    41      rcerr_addscu_memoverlap init (11)			/* SCU has possible memory address overlap */
  2    42      ) fixed bin static options (constant);
  2    43 
  2    44 dcl (rcerr_delmain_nomem init (1),			/* not enough main memory left */
  2    45      rcerr_delmain_abs_wired init (2)			/* abs wired pages in memory */
  2    46      ) fixed bin static options (constant);
  2    47 
  2    48 dcl (rcerr_locked init (12),				/* database already locked */
  2    49      rcerr_online init (13),				/* device already online */
  2    50      rcerr_no_config init (14),			/* device not in configuration */
  2    51      rcerr_not_online init (15),			/* device not online */
  2    52      rcerr_range init (16),				/* request is out of range */
  2    53      rcerr_sprq_failed init (17)			/* could not set CPU required */
  2    54 
  2    55      ) fixed bin static options (constant);
  2    56 
  2    57 dcl (rcerr_isolts_locked init (1),			/* reconfig_lock locked to another process */
  2    58      rcerr_isolts_illegal_cpu init (2),			/* illegal cpu tag */
  2    59      rcerr_isolts_cpu_online init (3),			/* requested cpu is online */
  2    60      rcerr_isolts_no_config init (4),			/* requested cpu is not configured */
  2    61      rcerr_isolts_two_scu init (5),			/* Must have at least two SCUs to run ISOLTS */
  2    62      rcerr_isolts_illegal_scu init (6),			/* illegal scu tag */
  2    63      rcerr_isolts_bootload_scu init (7),		/* requested scu is the bootload memory */
  2    64      rcerr_isolts_scu_not init (8),			/* requested scu is not configured */
  2    65      rcerr_isolts_not init (9),			/* requesting process is not ISOLTS process */
  2    66      rcerr_isolts_wrong_cell init (10),			/* interrupt answered in correct scu but wrong cell */
  2    67      rcerr_isolts_wrong_scu init (11),			/* interrupt answered in wrong scu */
  2    68      rcerr_isolts_wrong_scu_cell init (12),		/* interrupt answered in wrong scu on wrong cell */
  2    69      rcerr_isolts_no_response init (13),		/* No response to a processor start interrupt */
  2    70      rcerr_isolts_bad_switches init (14),		/* read switch data is not in expected format */
  2    71      rcerr_isolts_lda_fail init (15),			/* A LDA 2 did not operate correctly */
  2    72      rcerr_isolts_no_str_flt init (16),			/* No store falt when a LDA 64k was executed */
  2    73      rcerr_isolts_no_mask init (17)			/* No mask set for test cpu */
  2    74      ) fixed bin static options (constant);
  2    75 
  2    76 dcl 1 switch_w1 aligned based,			/* template for switch word 1, when containing diagnostic info */
  2    77    (2 cell fixed bin (5),				/* interrupt cell being used */
  2    78     2 errtag fixed bin (5),				/* tag of scu in error */
  2    79     2 valid bit (1),				/* if on then offset field is valid */
  2    80     2 pad bit (5),
  2    81     2 offset bit (18)) unaligned;			/* offset of error if any */
  2    82 
  2    83 /* End of include file ...... rcerr.incl.pl1 */
  2    84 
     1079 
  3     1 /* ***********************************************************
  3     2*   *                                                         *
  3     3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
  3     4*   *                                                         *
  3     5*   *********************************************************** */
  3     6 /* Begin include file ...... rsw.incl.pl1
  3     7*   Modified 3/26/77 by Noel I. Morris
  3     8*   Modified 9/03/80 by J. A. Bush for the DPS8/70M CPU
  3     9*   Modified 3/24/82 by J. A. Bush to allow the L68 CPU to address 4MW/port */
  3    10 
  3    11 dcl  rswp ptr;
  3    12 
  3    13 dcl 1 dps_rsw_2 aligned based (rswp),			/* rsw 2 template for DPS and L68 CPUs */
  3    14    (2 pad1 bit (4),
  3    15     2 cpu_type fixed bin (2) unsigned,			/* 0 = L68 or DPS, 1 = DPS8 */
  3    16     2 fault_base bit (7),				/* high order bits of fault vector */
  3    17     2 pad2 bit (6),
  3    18     2 dps_option bit (1),				/* "1"b => DPS CPU, "0"b => L68 CPU */
  3    19     2 pad3 bit (7),
  3    20     2 cache2 bit (1),				/* "1"b => 2k cache installed, "0"b => no cache */
  3    21     2 ext_gcos bit (1),				/* "1"b => ext gcos option installed */
  3    22     2 id bit (4),					/* CPU ID - "1110"b => L68 */
  3    23     2 cpu_num fixed bin (3) unsigned) unaligned;		/* processor number */
  3    24 
  3    25 dcl 1 dps8_rsw_2 aligned based (rswp),			/* rsw 2 template for DPS8 CPUs */
  3    26    (2 interlace_info (0:3) bit (1),			/* if interlace enabled; "0"b => 4-word, "1"b => 2-word */
  3    27     2 cpu_type fixed bin (2) unsigned,			/* 0 = L68 or DPS, 1 = DPS8 */
  3    28     2 fault_base bit (7),				/* high order bits of fault vector */
  3    29     2 id_prom bit (1),				/* "1"b => id_prom present */
  3    30     2 pad1 bit (5),
  3    31     2 dps_option bit (1),				/* always "1"b for DPS8 CPU */
  3    32     2 cache8 bit (1),				/* "1"b => 8k cache installed, "0"b => no cache */
  3    33     2 pad2 bit (2),
  3    34     2 multics_cpu bit (1),				/* always "1"b for Multics cpu */
  3    35     2 pad3 bit (5),
  3    36     2 cpu_speed bit (4),				/* cpu speed options */
  3    37     2 cpu_num fixed bin (3) unsigned) unaligned;		/* processor number */
  3    38 
  3    39 dcl 1 rsw_1_3 aligned based (rswp),			/* rsw 3 only valid on DPS and L68 CPUs */
  3    40    (2 port_info (0:3),				/* controller port information */
  3    41       3 port_assignment bit (3),			/* port address assignment */
  3    42       3 port_enable bit (1),				/* "1"b => port enabled */
  3    43       3 initialize_enable bit (1),			/* "1"b => system initialize enabled */
  3    44       3 interlace_enable bit (1),			/* "1"b => port is interlaced with neighbor */
  3    45       3 mem_size fixed bin (3) unsigned) unaligned;	/* encoded memory size on port */
  3    46 
  3    47 dcl 1 rsw_4 aligned based (rswp),			/* rsw 4 only valid on DPS and L68 CPUs */
  3    48    (2 pad1 bit (13),
  3    49     2 port_info (0:7),				/* additional controller port information */
  3    50       3 four bit (1),				/* "0"b => 4-word interlace - "1"b => 2-word interlace */
  3    51       3 half bit (1),				/* "1"b => only half of memory on controller in use */
  3    52     2 pad2 bit (7)) unaligned;
  3    53 
  3    54 dcl  dps_mem_size_table (0:7) fixed bin (24) static options (constant) init /* DPS and L68 memory sizes */
  3    55     (32768, 65536, 4194304, 131072, 524288, 1048576, 2097152, 262144);
  3    56 
  3    57 /* Note that the third array element above, is changed incompatibly in MR10.0.
  3    58*   In previous releases, this array element was used to decode a port size of
  3    59*   98304 (96K). With MR10.0 it is now possible to address 4MW per CPU port, by
  3    60*   installing  FCO # PHAF183 and using a group 10 patch plug, on L68 and DPS CPUs.
  3    61**/
  3    62 
  3    63 dcl  dps8_mem_size_table (0:7) fixed bin (24) static options (constant) init /* DPS8 memory sizes */
  3    64     (32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304);
  3    65 
  3    66 dcl  rsw_valid (0:1) fixed bin static options (constant) init (5, 3); /* # of rsw valid per cpu type */
  3    67 
  3    68 /* End of include file ...... rsw.incl.pl1 */
     1080 
  4     1 
  4     2 /* BEGIN INCLUDE FILE opr_query_info.incl.pl1 */
  4     3 
  4     4 /* created 10/20/78 by J. A. Bush. 
  4     5*   Modified by Rick Fakoury to increase size of the allowable answer.
  4     6**/
  4     7 
  4     8 dcl 1 opr_query_info aligned,				/* info structure for the opr_query_ subroutine */
  4     9     2 version fixed bin,				/* version of this structure, currently = to 1 */
  4    10     2 q_sw bit (1) aligned,				/* = "1"b if aswer is expected from operator */
  4    11     2 prim char (8),				/* primary expected operators response */
  4    12     2 alt char (8),					/* alternate expected operator response */
  4    13     2 answer char (80) varying,				/* operators answer */
  4    14     2 r_comment char (64),				/* comment to be output with respond message */
  4    15     2 err_code fixed bin (35);			/* standard system status code */
  4    16 
  4    17 /* END INCLUDE FILE opr_query_info.incl.pl1 */
  4    18 
     1081 
  5     1 
  5     2 /* BEGIN INCLUDE FILE gload_data.incl.pl1 */
  5     3 /* created 9/29/78 by James A. Bush */
  5     4 
  5     5 dcl 1 gload_data aligned,				/* pertinent info  generated from gload_ */
  5     6    (2 deck_name char (4),				/* name from columns 73-76 of $ object card */
  5     7     2 deck_type bit (1),				/* "0"b = absolute, "1"b = relocatable */
  5     8     2 sym_cnt fixed bin (16),				/* count of valid symbols */
  5     9     2 text_len bit (18),				/* length in words including load offset */
  5    10     2 checksum bit (36),				/* checksum of loaded deck */
  5    11     2 diagnostic char (200),				/* loader diagnostic */
  5    12     2 definition (128),				/* array of definitions */
  5    13       3 symbol char (6),				/* symbol name */
  5    14       3 pad1 bit (18),
  5    15       3 offset bit (18),				/* symbol offset in text */
  5    16       3 pad2 bit (14),
  5    17       3 sym_type fixed bin (3)) unaligned;		/* type of symbol (0 - 7) */
  5    18 
  5    19 /* END INCLUDE FILE gload_data.incl.pl1 */
  5    20 
     1082 
     1083 
     1084 
     1085 
     1086 /* BEGIN MESSAGE DOCUMENTATION
     1087*
     1088*   Message:   <Person>.<Project>.a: permission asked to test cpu <cpu_tag> using memory <mem_tag>
     1089*
     1090*   S:  $beep
     1091*
     1092*   T:  $run
     1093*
     1094*   M:  <person>.<Project> is asking permission to test the indicated cpu that
     1095*   is currently deconfigured from the system. The indicated memory will be usurped
     1096*   until a primitive test is made on the processor to verify switch settings and
     1097*   to assure that a memory address above 64k cannot be generated without a store fault
     1098*   occurring. After this primitive test is complete, all memory in the indicated
     1099*   SCU above 64k will be given back to the system.
     1100*   Until processor testing is completed, the reconfiguration data base is locked
     1101*   thereby not allowing dynamic reconfiguration of processors, memories,
     1102*   or bulk store.
     1103*
     1104*   A:  $info
     1105*
     1106*   Message:   <Person>.<Project>.a: respond "grant" or "deny".
     1107*
     1108*   S:  $beep
     1109*
     1110*   T:  $run
     1111*
     1112*   M:  <Person>.<Project> is expecting an operator response to either grant or
     1113*   deny  permission to test the indicated processor.
     1114*   The indicated response must be made via the opr_query_response command.
     1115*
     1116*   A:  Operator must respond "grant" or "deny" via the opr_query_response command
     1117*   (or with the oqr entry in the admin ec; e.g. x oqr grant) to either grant or deny the test request.
     1118*
     1119*   Message:   <Person>.<Project>.a: execute the following manual reconfiguration on cpu <tag>:
     1120*
     1121*   S:  $beep
     1122*
     1123*   T:  $run
     1124*
     1125*   M:  <person>.<Project> is asking the operator to manually reconfigure
     1126*   the indicated processor.
     1127*
     1128*   A:  $ignore
     1129*
     1130*   Message:   <Person>.<Project>.a:  1. set all port and initialize enable switches to off.
     1131*
     1132*   S:  $beep
     1133*
     1134*   T:  $run
     1135*
     1136*   M:  The first step of the manual reconfiguration instructions.
     1137*
     1138*   A:  $ignore
     1139*
     1140*   Message:   <Person>.<Project>.a:  2. set the assignment switches for all ports to 000.
     1141*
     1142*   S:  $beep
     1143*
     1144*   T:  $run
     1145*
     1146*   M:  The second step of the manual reconfiguration instructions.
     1147*
     1148*   A:  $ignore
     1149*
     1150*   Message:   <Person>.<Project>.a:  3. remove the right free-edge connector on the
     1151*
     1152*   S:  $beep
     1153*
     1154*   T:  $run
     1155*
     1156*   M:  The third step of the manual reconfiguration instructions.
     1157*   The indicated free-edge connector contains the port size plugs
     1158*   (maximum of 4) for the configured SCU ports.
     1159*
     1160*   A:  $ignore
     1161*
     1162*   Message:   <Person>.<Project>.a:     645pq wwb at slot 28l.
     1163*
     1164*   S:  $beep
     1165*
     1166*   T:  $run
     1167*
     1168*   M:  Continuation of above message.
     1169*
     1170*   A:  $ignore
     1171*
     1172*   Message:   <Person>.<Project>.a:  4. install the "cpu test" free-edge connector at slot 28l.
     1173*
     1174*   S:  $beep
     1175*
     1176*   T:  $run
     1177*
     1178*   M:  The fourth step of the manual reconfiguration instructions.
     1179*   The "cpu test" free-edge connector referred to is a special tool
     1180*   provided by Field Engingeering. It is simply a port free-edge connector with
     1181*   all 4 port groups wired for 64k.
     1182*
     1183*   A:  $ignore
     1184*
     1185*   Message:   <Person>.<Project>.a:  5. depress the initialize and clear push button.
     1186*
     1187*   S:  $beep
     1188*
     1189*   T:  $run
     1190*
     1191*   M:  The fifth step of the manual reconfiguration instructions.
     1192*
     1193*   A:  $ignore
     1194*
     1195*   Message:   <Person>.<Project>.a:  6. set the port enable switch on for port <mem_tag>.
     1196*
     1197*   S:  $beep
     1198*
     1199*   T:  $run
     1200*
     1201*   M:  The sixth and last step of the manual reconfiguration instructions.
     1202*
     1203*   A:  $ignore
     1204*
     1205*   Message:   <Person>.<Project>.a: respond "done" when reconfiguration complete.
     1206*
     1207*   S:  $beep
     1208*
     1209*   T:  $run
     1210*
     1211*   M:  The indicated response must be made via the opr_query_response command.
     1212*
     1213*   A:  Operator must respond "done" via the opr_query_response command
     1214*   (x oqr done), when reconfiguration is complete.
     1215*
     1216*   END MESSAGE DOCUMENTATION */
     1217 
     1218    end isolts_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    10/14/88  1311.0  isolts_.pl1                       >spec>install>MR12.2-1166>isolts_.pl1
203          1    10/14/83  0957.2  config_cpu_card.incl.pl1          >ldd>include>config_cpu_card.incl.pl1
1079         2    10/14/88  1308.6  rcerr.incl.pl1                    >spec>install>MR12.2-1166>rcerr.incl.pl1
1080         3    06/10/82  1045.2  rsw.incl.pl1                      >ldd>include>rsw.incl.pl1
1081         4    06/09/83  1430.8  opr_query_info.incl.pl1           >ldd>include>opr_query_info.incl.pl1
1082         5    05/23/79  1612.1  gload_data.incl.pl1               >ldd>include>gload_data.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
NL                              011162 constant        char(1)                  initial packed unaligned dcl 102 ref 532 702 707
action                          000734 automatic       structure                level 1 packed packed unaligned dcl 196 set ref 487*
action_codes           1172            based           structure                level 3 packed packed unaligned dcl 116 set ref 379*
                                                                                  406* 431* 437 487 490* 760 760
add_opt                         000234 automatic       char(6)                  packed unaligned dcl 79 set ref 594* 655 655 783*
                                                                                  785* 790*
add_wc                                 based           fixed bin(17,0)          array packed unaligned dcl 200 ref 529 530 549 550
                                                                                  555 556 595
addr                                                   builtin function         dcl 111 ref 340 365 413 413 522 806 806 865 865 874
                                                                                  874 877 877 880 880 884 884 889 889 892 892 897
                                                                                  897 900 900 904 904 912 912 991 1026 1039 1041
                                                                                  1041 1043 1043
addrel                                                 builtin function         dcl 111 ref 413 413 599 599 828 828
alt                       4     000742 automatic       char(8)                  level 2 dcl 4-8 set ref 862* 909*
answer                    6     000742 automatic       varying char(80)         level 2 dcl 4-8 set ref 867 914
arg                                    parameter       char                     packed unaligned dcl 700 set ref 698 702* 702 705
                                                                                  707* 707
arg1                            001732 automatic       char(12)                 packed unaligned dcl 962 set ref 989* 992* 999*
                                                                                  1005* 1019* 1024* 1061*
arg2                            001743 automatic       char(128)                packed unaligned dcl 963 set ref 989* 993* 1021*
                                                                                  1028* 1030* 1034* 1036* 1045* 1047* 1049* 1051*
                                                                                  1053* 1055* 1061*
arg3                            001735 automatic       char(12)                 packed unaligned dcl 962 set ref 989* 994* 1011*
                                                                                  1061*
arg4                            001740 automatic       char(12)                 packed unaligned dcl 962 set ref 989* 1015* 1061*
args                            000246 automatic       varying char(28)         array dcl 84 set ref 235* 237 237 239 241 241 241
                                                                                  245 247* 257 259 260 263 269 277 277 280 280 282
                                                                                  286 303* 304 304 304 474* 476 476 478 478 481 481
                                                                                  612* 629 630 630 636 642* 647 650* 768 768 772 774
                                                                                  774 777 777 780 780 783 787 787 790 792 792 795
                                                                                  795 795 804 809 809 809 809 813 815 820 825 832
                                                                                  935 939 945
awcp                            000672 automatic       pointer                  dcl 87 set ref 365* 529 530 549 550 555 556 595
base                   7757(18)        based           bit(18)                  level 3 packed packed unaligned dcl 116 set ref 749*
bcd_chars                       000657 automatic       fixed bin(17,0)          dcl 86 set ref 530* 531 531 531* 556* 557 557 557*
                                                                                  575* 576 576 576* 606* 607 607 667* 668 668* 668
                                                                                  668 671 671
bcd_str                                based           bit                      packed unaligned dcl 199 set ref 531* 557* 576* 607*
                                                                                  671*
bcd_to_ascii_                   000074 constant        entry                    external dcl 60 ref 508
bf_sw                           000110 automatic       bit(1)                   initial packed unaligned dcl 72 set ref 72* 280* 519
                                                                                  578
c_len                           000656 automatic       fixed bin(17,0)          dcl 86 set ref 235* 303* 402* 474* 612*
car_nz                          000127 automatic       bit(1)                   initial packed unaligned dcl 75 set ref 75* 369*
                                                                                  386* 534* 540 542* 579* 580*
cell                                   based           fixed bin(5,0)           level 2 packed packed unaligned dcl 2-76 set ref
                                                                                  993*
checksum                  2     001016 automatic       bit(36)                  level 2 packed packed unaligned dcl 5-5 set ref 426
cksum                     6            based           bit(36)                  level 2 packed packed unaligned dcl 181 set ref 426*
cleanup                         000700 stack reference condition                dcl 91 ref 208
cmd_cnt                         000651 automatic       fixed bin(17,0)          dcl 86 set ref 235* 243 248* 248 251* 251 257 260
                                                                                  267 274 276 303* 474* 612* 614 627 628 814 819 933
                                                                                  935 935 942
code                            000100 automatic       fixed bin(35,0)          dcl 69 set ref 216* 217 319* 320 321* 333* 334 335*
                                                                                  392* 402* 403 404* 413* 414 415* 443* 444 445*
                                                                                  689* 690* 806* 815* 816 820* 821 939* 940 945* 946
com_err_                        000104 constant        entry                    external dcl 63 ref 252 404 415 445 458 461 465 469
                                                                                  642 650 799 984 985 1061
com_string                      000173 automatic       char(132)                dcl 78 set ref 235* 252* 303* 474* 612* 655* 655 657
                                                                                  659 660 667 671* 799* 805* 805 806 806 806 806
cont_cpu               7770            based           structure                level 3 packed packed unaligned dcl 116
cont_pas                        000714 automatic       label variable           dcl 109 set ref 366* 390 408 517 544 560 583 609 616
                                                                                  672
continue_to_signal_             000100 constant        entry                    external dcl 62 ref 392
control                1170            based           fixed bin(35,0)          level 3 dcl 116 set ref 433 433*
count                           000662 automatic       fixed bin(17,0)          dcl 86 set ref 933* 935* 939* 951*
cpu_1                  7772            based           structure                level 3 packed packed unaligned dcl 116
cpu_card                               based           structure                level 1 dcl 1-6
cpu_cardp                       000736 automatic       pointer                  dcl 1-4 set ref 295* 297* 298 299 300 300 311
cpu_num                   0(33)        based           fixed bin(3,0)           level 2 in structure "dps8_rsw_2" packed packed
                                                                                  unsigned unaligned dcl 3-25 in procedure "isolts_"
                                                                                  ref 1036
cpu_num                   0(33)        based           fixed bin(3,0)           level 2 in structure "dps_rsw_2" packed packed
                                                                                  unsigned unaligned dcl 3-13 in procedure "isolts_"
                                                                                  ref 1030
cpu_port                        000103 automatic       fixed bin(5,0)           dcl 70 set ref 319* 748
cpu_tag                         000101 automatic       fixed bin(5,0)           dcl 70 set ref 269* 270 299 302 315* 315 319* 328*
                                                                                  333* 445 461 551* 572* 599* 826 992 999 1021 1024
cpu_type                        000113 automatic       char(4)                  packed unaligned dcl 74 set ref 304* 311* 880 884
                                                                                  889 892 897 900 1027 1033
cu_$cp                          000072 constant        entry                    external dcl 59 ref 806
cv_dec_check_                   000066 constant        entry                    external dcl 57 ref 939 945
cv_oct_check_                   000070 constant        entry                    external dcl 58 ref 815 820
d                               001722 automatic       fixed bin(71,0)          initial dcl 858 set ref 858* 876* 879* 888* 896*
                                                                                  903* 906*
d_type                          000244 automatic       char(5)                  packed unaligned dcl 83 set ref 551* 599* 813*
delay                           000652 automatic       fixed bin(17,0)          dcl 86 set ref 425* 453* 458 465 469 745*
delay_iter                      000241 automatic       fixed bin(17,0)          initial dcl 81 set ref 81* 428* 430* 458 465 469 722
df_iocbp                        000012 internal static pointer                  initial dcl 107 set ref 402* 688 689* 690* 691*
diagnostic                3     001016 automatic       char(200)                level 2 packed packed unaligned dcl 5-5 set ref 415*
dps8_rsw_2                             based           structure                level 1 dcl 3-25
dps_rsw_2                              based           structure                level 1 dcl 3-13
dump_in_prog                    000125 automatic       bit(1)                   initial packed unaligned dcl 75 set ref 75* 371* 380
                                                                                  381* 551 597 601* 829* 842*
dump_segment_                   000060 constant        entry                    external dcl 54 ref 828
ecode                                  parameter       fixed bin(35,0)          dcl 961 set ref 959 985 985* 990 990 994 994 997
                                                                                  1061
end_pas                         000724 automatic       label variable           dcl 109 set ref 367* 770
eopt                            000730 automatic       label variable           dcl 109 set ref 382 387 596*
err                       0(33) 000734 automatic       bit(1)                   level 2 packed packed unaligned dcl 196 set ref 553
                                                                                  562
f_vec                  7770            based           bit(18)                  level 4 in structure "wseg" packed packed unaligned
                                                                                  dcl 116 in procedure "isolts_" set ref 747*
f_vec                  7772            based           bit(18)                  level 4 in structure "wseg" packed packed unaligned
                                                                                  dcl 116 in procedure "isolts_" set ref 747*
fault_base                0(06)        based           bit(7)                   level 2 in structure "dps8_rsw_2" packed packed
                                                                                  unaligned dcl 3-25 in procedure "isolts_" ref 1034
fault_base                0(06)        based           bit(7)                   level 2 in structure "dps_rsw_2" packed packed
                                                                                  unaligned dcl 3-13 in procedure "isolts_" ref 1028
finish                          000706 stack reference condition                dcl 91 ref 209
first                           000647 automatic       fixed bin(18,0)          dcl 85 set ref 599 599 811* 815* 816 818 821 826*
                                                                                  826 828 828 828* 833*
first_pft                       000471 constant        char(3)                  initial packed unaligned dcl 95 ref 364
fixed                                                  builtin function         dcl 111 ref 522 833 834
four                      0(13)        based           bit(1)                   array level 3 packed packed unaligned dcl 3-47 ref
                                                                                  1051
gload_                          000064 constant        entry                    external dcl 56 ref 413
gload_data                      001016 automatic       structure                level 1 dcl 5-5 set ref 413 413
half                      0(14)        based           bit(1)                   array level 3 packed packed unaligned dcl 3-47 ref
                                                                                  1055
halt                   1172(21)        based           bit(1)                   level 4 packed packed unaligned dcl 116 set ref 389*
                                                                                  407* 516*
hbound                                                 builtin function         dcl 111 ref 512 514 634 647 649 839 839
hdr_p                           000676 automatic       pointer                  dcl 87 set ref 340* 426 833 834
i                               000132 automatic       fixed bin(17,0)          dcl 718 in procedure "sleep" set ref 722*
i                               000653 automatic       fixed bin(17,0)          dcl 86 in procedure "isolts_" set ref 243* 245 247*
                                                                                  276* 277 277 280 280 282 286* 451* 512* 512* 514
                                                                                  628* 629 630 630 630 636* 642 647* 647* 649 707
                                                                                  993* 1011* 1015* 1040* 1041 1041 1043 1051 1055*
icpu                                   parameter       fixed bin(5,0)           dcl 856 ref 854 864 865 872 874
idump                           000126 automatic       bit(1)                   initial packed unaligned dcl 75 set ref 75* 371* 380
                                                                                  598* 601* 842*
illegal_pas_opt                 000441 constant        varying char(8)          initial array dcl 100 ref 634 636
imw                    7757            based           structure                level 2 packed packed unaligned dcl 116
index                                                  builtin function         dcl 111 ref 657 659 660
initialize_enable         0(04)        based           bit(1)                   level 2 packed packed unaligned dcl 197 ref 1049
interlace_enable          0(05)        based           bit(1)                   level 2 packed packed unaligned dcl 197 ref 1051
inv_tst_ids                     000447 constant        char(3)                  initial array packed unaligned dcl 97 ref 512 512
                                                                                  514 647 647 649
ioa_                            000102 constant        entry                    external dcl 63 ref 231 302 307 338 385 396 456 510
                                                                                  519 559 567 579 760 826 836 864 868 871 872 915
ioa_$nnl                        000110 constant        entry                    external dcl 63 ref 540 643
ioa_$rsnnl                      000106 constant        entry                    external dcl 63 ref 993 1011 1015
iom0                   7760            based           structure                level 3 packed packed unaligned dcl 116
iox_$close                      000114 constant        entry                    external dcl 64 ref 689
iox_$detach_iocb                000116 constant        entry                    external dcl 65 ref 690
iox_$user_output                000120 external static pointer                  dcl 110 set ref 828*
is_mbx                 1170            based           structure                level 2 dcl 116
iscu                                   parameter       fixed bin(5,0)           dcl 856 ref 854 864 865 912
isolate_cpu                     000014 internal static bit(1)                   packed unaligned dcl 108 set ref 207* 324* 684 686*
isolts_err_log_$display         000054 constant        entry                    external dcl 52 ref 951
isolts_err_log_$dump            000056 constant        entry                    external dcl 53 ref 551 599
isolts_err_log_$init            000050 constant        entry                    external dcl 50 ref 216
isolts_err_log_$write           000052 constant        entry                    external dcl 51 ref 572 737
j                               000654 automatic       fixed bin(17,0)          dcl 86 set ref 634* 636*
k                               000655 automatic       fixed bin(17,0)          dcl 86 set ref 625* 630* 646 647 650
last                            000650 automatic       fixed bin(18,0)          dcl 85 set ref 599* 812* 818* 818 820* 821 826 828*
                                                                                  834* 835 839 839*
ld_mpgm                   0(27) 000734 automatic       bit(1)                   level 2 packed packed unaligned dcl 196 set ref 506
ld_spgm                   0(26) 000734 automatic       bit(1)                   level 2 packed packed unaligned dcl 196 set ref 506
                                                                                  522
length                                                 builtin function         dcl 111 ref 532 534 540 540 542 629 667 806 806
limit                           000663 automatic       fixed bin(17,0)          dcl 86 set ref 933* 935* 942* 945* 951*
ltrim                                                  builtin function         dcl 111 ref 805
mbx                    7760            based           bit(18)                  level 4 packed packed unaligned dcl 116 set ref 746*
mem_size                  0(06)        based           fixed bin(3,0)           level 2 packed packed unsigned unaligned dcl 197 ref
                                                                                  1053
mess                                   parameter       char                     packed unaligned dcl 700 ref 698 702 705 707
mess_in_prog                    000120 automatic       bit(1)                   initial packed unaligned dcl 75 set ref 75* 369* 553
                                                                                  554 564* 735 736*
mlen                            000661 automatic       fixed bin(17,0)          dcl 86 set ref 550* 551 554 554 572* 575
mod                                                    builtin function         dcl 111 ref 668 668
mptr                            000674 automatic       pointer                  dcl 87 set ref 529* 531 549* 551* 555* 557 572* 576
                                                                                  595* 607 671
mtype                           000660 automatic       fixed bin(17,0)          dcl 86 set ref 565* 571* 572*
new_tst                         000112 automatic       char(3)                  packed unaligned dcl 73 set ref 508* 510* 512 519*
                                                                                  521
ntype                           000121 automatic       bit(1)                   initial packed unaligned dcl 75 set ref 75* 369*
                                                                                  378* 405* 515* 539 601* 604 605* 842*
null                                                   builtin function         dcl 111 ref 295 298 688 691 737 737
nxt_tst                         000111 automatic       char(3)                  packed unaligned dcl 73 set ref 364* 396* 402 404*
                                                                                  415* 428 428 428 457 458* 465 469* 519* 521* 732
offset                    0(18)        based           bit(18)                  level 2 packed packed unaligned dcl 2-76 set ref
                                                                                  1011* 1015*
opr_query_                      000112 constant        entry                    external dcl 63 ref 865 874 877 880 884 889 892 897
                                                                                  900 904 912
opr_query_info                  000742 automatic       structure                level 1 dcl 4-8 set ref 865 865 874 874 877 877 880
                                                                                  880 884 884 889 889 892 892 897 897 900 900 904
                                                                                  904 912 912
option                          000123 automatic       bit(1)                   initial packed unaligned dcl 75 set ref 75* 369* 384
                                                                                  536* 537* 540 615* 621 664*
out_str                         000130 automatic       varying char(136)        dcl 77 set ref 531* 532 532 532* 532 534 540 540*
                                                                                  540 542 557* 559* 576* 579* 643*
p_err                           000010 internal static bit(1)                   initial packed unaligned dcl 106 set ref 246* 662*
                                                                                  782* 789* 951*
pas_delay                              constant        fixed bin(17,0)          initial dcl 104 ref 425
pas_exec                        000470 constant        char(3)                  initial packed unaligned dcl 96 ref 457 465 732
pas_sw                          000117 automatic       bit(1)                   initial packed unaligned dcl 75 set ref 75* 369* 377
                                                                                  422 457 519 732 732*
pft_delay                              constant        fixed bin(17,0)          initial dcl 105 ref 745
pgm_name               1173            based           bit(36)                  level 3 dcl 116 set ref 365 432* 508 508
pgm_offset                      000646 automatic       fixed bin(18,0)          dcl 85 set ref 368* 413 413 522* 524*
pgm_size                  2(18)        based           bit(18)                  level 2 packed packed unaligned dcl 181 ref 834
pi                                     based           structure                level 1 packed packed unaligned dcl 197
pip                             000664 automatic       pointer                  dcl 87 set ref 1041* 1043* 1045 1047 1049 1051 1053
pname                           000474 constant        char(6)                  initial packed unaligned dcl 92 set ref 212* 252*
                                                                                  354* 404* 415* 445* 458* 461* 465* 469* 642* 642*
                                                                                  650* 650* 799* 826* 984* 985* 1061*
port                   7760(18)        based           fixed bin(17,0)          level 4 in structure "wseg" packed packed unaligned
                                                                                  dcl 116 in procedure "isolts_" set ref 748*
port                   7770(18)        based           fixed bin(17,0)          level 4 in structure "wseg" packed packed unaligned
                                                                                  dcl 116 in procedure "isolts_" set ref 748*
port                   7772(18)        based           fixed bin(17,0)          level 4 in structure "wseg" packed packed unaligned
                                                                                  dcl 116 in procedure "isolts_" set ref 748*
port_assignment                        based           bit(3)                   level 2 packed packed unaligned dcl 197 ref 1045
port_enable               0(03)        based           bit(1)                   level 2 packed packed unaligned dcl 197 ref 1047
port_info                              based           structure                array level 2 in structure "rsw_1_3" packed packed
                                                                                  unaligned dcl 3-39 in procedure "isolts_" set ref
                                                                                  1041 1043
port_info                 0(13)        based           structure                array level 2 in structure "rsw_4" packed packed
                                                                                  unaligned dcl 3-47 in procedure "isolts_"
prim                      2     000742 automatic       char(8)                  level 2 dcl 4-8 set ref 861* 908*
print                     0(32) 000734 automatic       bit(1)                   level 2 packed packed unaligned dcl 196 set ref 548
ptr                                                    builtin function         dcl 111 ref 529 549 555 595
q_sw                      1     000742 automatic       bit(1)                   level 2 dcl 4-8 set ref 860* 873* 907*
quit                            000000 stack reference condition                dcl 91 ref 375
r_comment                33     000742 automatic       char(64)                 level 2 dcl 4-8 set ref 863* 910*
read                      0(30) 000734 automatic       bit(1)                   level 2 packed packed unaligned dcl 196 set ref 546
reconfig_err_message            000021 constant        char(64)                 initial array packed unaligned dcl 965 set ref 1061*
rel                                                    builtin function         dcl 111 ref 522 833
restart                         000720 automatic       label variable           dcl 109 set ref 342* 772
rsw_1_3                                based           structure                level 1 dcl 3-39
rsw_4                                  based           structure                level 1 dcl 3-47
rswp                            000740 automatic       pointer                  dcl 3-11 set ref 991* 993 1011 1015 1026* 1028 1030
                                                                                  1034 1036 1039* 1051 1055
rtrim                                                  builtin function         dcl 111 ref 655 667 702 707
run                             000122 automatic       bit(1)                   initial packed unaligned dcl 75 set ref 75* 369* 566
                                                                                  657* 659* 661*
scu_tag                         000102 automatic       fixed bin(5,0)           dcl 70 set ref 273* 286* 287 289* 289 319* 328* 333*
                                                                                  551* 572* 599* 826 994 1005 1019
search                                                 builtin function         dcl 111 ref 269 286
service                1171            based           fixed bin(35,0)          level 3 dcl 116 set ref 436* 451 453 455 722
slave_hdr                              based           structure                level 1 dcl 181
string                                                 builtin function         dcl 111 set ref 379* 406* 431* 437 487* 487 490* 760
                                                                                  760
substr                                                 builtin function         dcl 111 ref 300 508 508 532 532 630 630 647 760 760
                                                                                  760 760 805
switch_w1                              based           structure                level 1 dcl 2-76
switches                        000104 automatic       bit(36)                  array packed unaligned dcl 71 set ref 333* 991 1026
                                                                                  1039 1041 1043
sys_survey             7760            based           structure                level 2 packed packed unaligned dcl 116
t_delay                                parameter       fixed bin(17,0)          dcl 718 ref 716 721
t_ptr                           000670 automatic       pointer                  dcl 87 set ref 402* 413*
tag                       1            based           fixed bin(3,0)           level 2 dcl 1-6 ref 299
tags                            000472 constant        char(1)                  initial array packed unaligned dcl 93 set ref 302*
                                                                                  445* 461* 707 826* 826* 864* 864* 865* 865* 872*
                                                                                  874* 912* 992 994 999 1005 1019 1021 1024
tandd_$check_isolts_resources   000022 constant        entry                    external dcl 38 ref 319
tandd_$create_cpu_test_env      000024 constant        entry                    external dcl 39 ref 333
tandd_$destroy_cpu_test_env     000026 constant        entry                    external dcl 40 ref 685
tandd_$interrupt_test_cpu       000030 constant        entry                    external dcl 41 ref 443
term                            000114 automatic       bit(1)                   initial packed unaligned dcl 75 set ref 75* 229* 230
                                                                                  237* 272* 296 298* 312*
test_pgm             100000            based           bit(36)                  array level 2 dcl 116 set ref 340 522 839 839
tim                             000236 automatic       char(12)                 packed unaligned dcl 80 set ref 759* 760 760 760 760
time                                                   builtin function         dcl 111 ref 759
timer_manager_$sleep            000062 constant        entry                    external dcl 55 ref 723 876 879 888 896 903 906
tm_delay                        000134 automatic       fixed bin(71,0)          dcl 719 set ref 721* 723*
tolts_alm_util_$ascii_to_bci_   000076 constant        entry                    external dcl 61 ref 607 671
tolts_pcd_                      000032 constant        entry                    external dcl 42 ref 260 261
tolts_util_$bci_to_ascii        000040 constant        entry                    external dcl 46 ref 531 557 576
tolts_util_$find_card           000034 constant        entry                    external dcl 43 ref 297
tolts_util_$get_ttl_date        000020 constant        entry                    external dcl 37 ref 211
tolts_util_$on_off              000044 constant        entry                    external dcl 48 ref 212 354
tolts_util_$opr_msg             000046 constant        entry                    external dcl 49 ref 239 792
tolts_util_$query               000036 constant        entry                    external dcl 44 ref 235 303 474 612
tolts_util_$search              000042 constant        entry                    external dcl 47 ref 402
trace_sw                        000124 automatic       bit(1)                   initial packed unaligned dcl 75 set ref 75* 266*
                                                                                  282* 437 488 510 774* 777*
trm                             000115 automatic       bit(1)                   initial packed unaligned dcl 75 set ref 75* 275* 277
                                                                                  277* 290* 369* 398 769*
trm1                            000116 automatic       bit(1)                   initial packed unaligned dcl 75 set ref 75* 472* 473
                                                                                  626* 628 634 636* 641
ttl_date                        000242 automatic       char(6)                  packed unaligned dcl 82 set ref 211* 212* 354*
type                      4            based           char(4)                  level 2 dcl 1-6 ref 300 300 311
wc_eop                    0(28) 000734 automatic       bit(1)                   level 2 packed packed unaligned dcl 196 set ref 526
                                                                                  536
wc_opt                    0(29) 000734 automatic       bit(1)                   level 2 packed packed unaligned dcl 196 set ref 526
                                                                                  536 540
wc_type                   0(31) 000734 automatic       bit(1)                   level 2 packed packed unaligned dcl 196 set ref 526
                                                                                  534
wseg                                   based           structure                level 1 dcl 116
wseg1                                  based           fixed bin(17,0)          array dcl 198 set ref 341*
wseg_p                          000666 automatic       pointer                  dcl 87 set ref 333* 340 341 365 379 389 406 407 413
                                                                                  413 431 432 433 433 436 437 451 453 455 487 490
                                                                                  508 508 516 522 529 549 555 595 599 599 722 746
                                                                                  747 747 748 748 748 749 760 760 828 828 839 839

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
CPU_CARD_WORD                          internal static char(4)                  initial dcl 1-24
dps8_mem_size_table                    internal static fixed bin(24,0)          initial array dcl 3-63
dps_mem_size_table                     internal static fixed bin(24,0)          initial array dcl 3-54
rcerr_addcpu_amoff                     internal static fixed bin(17,0)          initial dcl 2-16
rcerr_addcpu_bad_switches              internal static fixed bin(17,0)          initial dcl 2-16
rcerr_addcpu_enable                    internal static fixed bin(17,0)          initial dcl 2-16
rcerr_addcpu_gcos                      internal static fixed bin(17,0)          initial dcl 2-16
rcerr_addcpu_lockup                    internal static fixed bin(17,0)          initial dcl 2-16
rcerr_addcpu_no_response               internal static fixed bin(17,0)          initial dcl 2-16
rcerr_addcpu_startup                   internal static fixed bin(17,0)          initial dcl 2-16
rcerr_addcpu_trouble                   internal static fixed bin(17,0)          initial dcl 2-16
rcerr_addscu_bad_mask                  internal static fixed bin(17,0)          initial dcl 2-31
rcerr_addscu_bigconfig                 internal static fixed bin(17,0)          initial dcl 2-31
rcerr_addscu_dup_mask                  internal static fixed bin(17,0)          initial dcl 2-31
rcerr_addscu_enable                    internal static fixed bin(17,0)          initial dcl 2-31
rcerr_addscu_fault                     internal static fixed bin(17,0)          initial dcl 2-31
rcerr_addscu_manual                    internal static fixed bin(17,0)          initial dcl 2-31
rcerr_addscu_memoverlap                internal static fixed bin(17,0)          initial dcl 2-31
rcerr_addscu_no_mask                   internal static fixed bin(17,0)          initial dcl 2-31
rcerr_addscu_oldexpand                 internal static fixed bin(17,0)          initial dcl 2-31
rcerr_addscu_size                      internal static fixed bin(17,0)          initial dcl 2-31
rcerr_addscu_switches                  internal static fixed bin(17,0)          initial dcl 2-31
rcerr_delcpu_last                      internal static fixed bin(17,0)          initial dcl 2-26
rcerr_delcpu_no_good_blcpu             internal static fixed bin(17,0)          initial dcl 2-26
rcerr_delcpu_no_stop                   internal static fixed bin(17,0)          initial dcl 2-26
rcerr_delmain_abs_wired                internal static fixed bin(17,0)          initial dcl 2-44
rcerr_delmain_nomem                    internal static fixed bin(17,0)          initial dcl 2-44
rcerr_isolts_bad_switches              internal static fixed bin(17,0)          initial dcl 2-57
rcerr_isolts_bootload_scu              internal static fixed bin(17,0)          initial dcl 2-57
rcerr_isolts_cpu_online                internal static fixed bin(17,0)          initial dcl 2-57
rcerr_isolts_illegal_cpu               internal static fixed bin(17,0)          initial dcl 2-57
rcerr_isolts_illegal_scu               internal static fixed bin(17,0)          initial dcl 2-57
rcerr_isolts_lda_fail                  internal static fixed bin(17,0)          initial dcl 2-57
rcerr_isolts_locked                    internal static fixed bin(17,0)          initial dcl 2-57
rcerr_isolts_no_config                 internal static fixed bin(17,0)          initial dcl 2-57
rcerr_isolts_no_mask                   internal static fixed bin(17,0)          initial dcl 2-57
rcerr_isolts_no_response               internal static fixed bin(17,0)          initial dcl 2-57
rcerr_isolts_no_str_flt                internal static fixed bin(17,0)          initial dcl 2-57
rcerr_isolts_not                       internal static fixed bin(17,0)          initial dcl 2-57
rcerr_isolts_scu_not                   internal static fixed bin(17,0)          initial dcl 2-57
rcerr_isolts_two_scu                   internal static fixed bin(17,0)          initial dcl 2-57
rcerr_isolts_wrong_cell                internal static fixed bin(17,0)          initial dcl 2-57
rcerr_isolts_wrong_scu                 internal static fixed bin(17,0)          initial dcl 2-57
rcerr_isolts_wrong_scu_cell            internal static fixed bin(17,0)          initial dcl 2-57
rcerr_locked                           internal static fixed bin(17,0)          initial dcl 2-48
rcerr_no_config                        internal static fixed bin(17,0)          initial dcl 2-48
rcerr_not_online                       internal static fixed bin(17,0)          initial dcl 2-48
rcerr_online                           internal static fixed bin(17,0)          initial dcl 2-48
rcerr_range                            internal static fixed bin(17,0)          initial dcl 2-48
rcerr_sprq_failed                      internal static fixed bin(17,0)          initial dcl 2-48
rsw_valid                              internal static fixed bin(17,0)          initial array dcl 3-66
signal                          000000 constant        entry                    external dcl 63
timer_manager$sleep             000000 constant        entry                    external dcl 857
tolts_util_$config              000000 constant        entry                    external dcl 45

NAMES DECLARED BY EXPLICIT CONTEXT.
abort                           010242 constant        entry                    internal dcl 959 ref 321 335
ask                             002110 constant        label                    dcl 235 ref 255
bad_rsp                         002253 constant        label                    dcl 252 ref 257 263 267 270 282 287
ck_isolts_opt                   006246 constant        entry                    internal dcl 766 ref 622
clean_up                        005573 constant        entry                    internal dcl 682 ref 208 209 349
cmd_loop                        003024 constant        label                    dcl 349 ref 322 328 336
complete_err_mess               006105 constant        entry                    internal dcl 730 ref 507 528 563
continue_pas                    003436 constant        label                    dcl 433 ref 366
display_err                     010763 constant        label                    dcl 1061 ref 1003 1009 1013 1017 1022 1059
display_log                     010043 constant        entry                    internal dcl 931 ref 252 798
end_tst                         004104 constant        label                    dcl 493 ref 367
enter_options                   004775 constant        entry                    internal dcl 592 ref 546
etype                           000000 constant        label                    array(17) dcl 999 ref 997
interpret_action                004106 constant        entry                    internal dcl 504 ref 491
inv_display                     006455 constant        label                    dcl 799 ref 816 821
isolts_                         001735 constant        entry                    external dcl 12 ref 211 211
itrace                          006173 constant        entry                    internal dcl 757 ref 437 488
opr_com                         007151 constant        entry                    internal dcl 854 ref 328
opt_mess                        005311 constant        label                    dcl 643 ref 596 602 622 652
reask                           002604 constant        label                    dcl 303 set ref 308
reenter                         005107 constant        label                    dcl 612 ref 644
restart_label                   003020 constant        label                    dcl 346 ref 342
run_pas                         003050 constant        entry                    internal dcl 362 ref 346
set_survey                      006151 constant        entry                    internal dcl 743 ref 422
sleep                           006046 constant        entry                    internal dcl 716 ref 453
sw_mess_1                       005643 constant        entry                    internal dcl 698 ref 1028 1030 1034 1036
sw_mess_2                       005730 constant        entry                    internal dcl 705 ref 1045 1047 1049 1051 1053 1055
t_off                           003031 constant        label                    dcl 354 ref 217
tout_retry                      003315 constant        label                    dcl 413 ref 478
wait                            003536 constant        label                    dcl 453 ref 481

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0     11620       11742   11171       11630
Length     12374   11171       122         415     427           6

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
isolts_                            1232 external procedure  is an external procedure.  
on unit on line 208                  64 on unit               
on unit on line 209                  64 on unit               
run_pas                             406 internal procedure  enables or reverts conditions.  
on unit on line 375                  72 on unit               
interpret_action                        internal procedure  shares stack frame of internal procedure run_pas.  
enter_options                           internal procedure  shares stack frame of internal procedure run_pas.  
clean_up                             70 internal procedure  is called by several nonquick procedures.  
sw_mess_1                               internal procedure  shares stack frame of external procedure isolts_.  
sleep                                   internal procedure  shares stack frame of internal procedure run_pas.  
complete_err_mess                       internal procedure  shares stack frame of internal procedure run_pas.  
set_survey                              internal procedure  shares stack frame of internal procedure run_pas.  
itrace                                  internal procedure  shares stack frame of internal procedure run_pas.  
ck_isolts_opt                           internal procedure  shares stack frame of internal procedure run_pas.  
opr_com                                 internal procedure  shares stack frame of external procedure isolts_.  
display_log                          82 internal procedure  is called by several nonquick procedures.  
abort                                   internal procedure  shares stack frame of external procedure isolts_.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 p_err                       isolts_
000012 df_iocbp                    isolts_
000014 isolate_cpu                 isolts_

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
isolts_                  000100 code                        isolts_
                         000101 cpu_tag                     isolts_
                         000102 scu_tag                     isolts_
                         000103 cpu_port                    isolts_
                         000104 switches                    isolts_
                         000110 bf_sw                       isolts_
                         000111 nxt_tst                     isolts_
                         000112 new_tst                     isolts_
                         000113 cpu_type                    isolts_
                         000114 term                        isolts_
                         000115 trm                         isolts_
                         000116 trm1                        isolts_
                         000117 pas_sw                      isolts_
                         000120 mess_in_prog                isolts_
                         000121 ntype                       isolts_
                         000122 run                         isolts_
                         000123 option                      isolts_
                         000124 trace_sw                    isolts_
                         000125 dump_in_prog                isolts_
                         000126 idump                       isolts_
                         000127 car_nz                      isolts_
                         000130 out_str                     isolts_
                         000173 com_string                  isolts_
                         000234 add_opt                     isolts_
                         000236 tim                         isolts_
                         000241 delay_iter                  isolts_
                         000242 ttl_date                    isolts_
                         000244 d_type                      isolts_
                         000246 args                        isolts_
                         000646 pgm_offset                  isolts_
                         000647 first                       isolts_
                         000650 last                        isolts_
                         000651 cmd_cnt                     isolts_
                         000652 delay                       isolts_
                         000653 i                           isolts_
                         000654 j                           isolts_
                         000655 k                           isolts_
                         000656 c_len                       isolts_
                         000657 bcd_chars                   isolts_
                         000660 mtype                       isolts_
                         000661 mlen                        isolts_
                         000662 count                       isolts_
                         000663 limit                       isolts_
                         000664 pip                         isolts_
                         000666 wseg_p                      isolts_
                         000670 t_ptr                       isolts_
                         000672 awcp                        isolts_
                         000674 mptr                        isolts_
                         000676 hdr_p                       isolts_
                         000714 cont_pas                    isolts_
                         000720 restart                     isolts_
                         000724 end_pas                     isolts_
                         000730 eopt                        isolts_
                         000734 action                      isolts_
                         000736 cpu_cardp                   isolts_
                         000740 rswp                        isolts_
                         000742 opr_query_info              isolts_
                         001016 gload_data                  isolts_
                         001722 d                           opr_com
                         001732 arg1                        abort
                         001735 arg3                        abort
                         001740 arg4                        abort
                         001743 arg2                        abort
run_pas                  000132 i                           sleep
                         000134 tm_delay                    sleep

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_g_a               alloc_char_temp     cat_realloc_chars   call_ext_out_desc   call_ext_out        call_int_this
call_int_other      return_mac          tra_ext_2           mdfx1               enable_op           shorten_stack
ext_entry           int_entry           set_chars_eis       index_chars_eis     search_eis

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
bcd_to_ascii_                 com_err_                      continue_to_signal_           cu_$cp
cv_dec_check_                 cv_oct_check_                 dump_segment_                 gload_
ioa_                          ioa_$nnl                      ioa_$rsnnl                    iox_$close
iox_$detach_iocb              isolts_err_log_$display       isolts_err_log_$dump          isolts_err_log_$init
isolts_err_log_$write         opr_query_                    pl1_time_                     tandd_$check_isolts_resources
tandd_$create_cpu_test_env    tandd_$destroy_cpu_test_env   tandd_$interrupt_test_cpu     timer_manager_$sleep
tolts_alm_util_$ascii_to_bci_ tolts_pcd_                    tolts_util_$bci_to_ascii      tolts_util_$find_card
tolts_util_$get_ttl_date      tolts_util_$on_off            tolts_util_$opr_msg           tolts_util_$query
tolts_util_$search

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
iox_$user_output


CONSTANTS
011030  aa     000004000000
011031  aa     000004000000
011032  aa     600000000041
011033  aa     001743000000
011034  aa     600000000041
011035  aa     002220000000
011036  ta     000506000000
011037  aa     000000000000
011040  ta     000632000000
011041  aa     000000000000

011042  aa     000004000000
011043  aa     000004000000
011044  aa     600000000041
011045  aa     001743000000
011046  aa     600000000041
011047  aa     002244000000
011050  ta     000506000000
011051  aa     000000000000
011052  ta     000500000000
011053  aa     000000000000

011054  aa     000004000000
011055  aa     000004000000
011056  aa     600000000041
011057  aa     001743000000
011060  aa     600000000041
011061  aa     002244000000
011062  ta     000506000000
011063  aa     000000000000
011064  ta     000523000000
011065  aa     000000000000

011066  aa     000004000000
011067  aa     000004000000
011070  aa     600000000041
011071  aa     001743000000
011072  aa     600000000041
011073  aa     002244000000
011074  ta     000506000000
011075  aa     000000000000
011076  ta     000501000000
011077  aa     000000000000

011100  aa     000004000000
011101  aa     000004000000
011102  aa     600000000041
011103  aa     001743000000
011104  aa     600000000041
011105  aa     002244000000
011106  ta     000506000000
011107  aa     000000000000
011110  ta     000502000000
011111  aa     000000000000

011112  aa     000004000000
011113  aa     000004000000
011114  aa     600000000041
011115  aa     001743000000
011116  aa     600000000041
011117  aa     002244000000
011120  ta     000506000000
011121  aa     000000000000
011122  ta     000601000000
011123  aa     000000000000

011124  aa     000004000000
011125  aa     000004000000
011126  aa     600000000041
011127  aa     001743000000
011130  aa     600000000041
011131  aa     002244000000
011132  ta     000506000000
011133  aa     000000000000
011134  ta     000560000000
011135  aa     000000000000

011136  aa     000002000000
011137  aa     000000000000
011140  aa     600000000041
011141  aa     000374000000

011142  aa     377777777777

011144  aa     000006000000
011145  aa     000000000000
011146  aa     600000000041
011147  aa     000101000000
011150  aa     600000000041
011151  aa     000102000000
011152  aa     600000000041
011153  aa     002003000000

011154  aa     000002000000
011155  aa     000000000000
011156  aa     600000000041
011157  aa     000100000000

011160  aa     077777000043
011161  aa     000001000000

000021  aa  123 171 163 164	Syst
000022  aa  145 155 040 144	em d
000023  aa  171 156 141 155	ynam
000024  aa  151 143 040 162	ic r
000025  aa  145 143 157 156	econ
000026  aa  146 151 147 165	figu
000027  aa  162 141 164 151	rati
000030  aa  157 156 040 151	on i
000031  aa  156 040 160 162	n pr
000032  aa  157 147 162 145	ogre
000033  aa  163 163 054 040	ss, 
000034  aa  164 162 171 040	try 
000035  aa  154 141 164 145	late
000036  aa  162 040 040 040	r   
000037  aa  040 040 040 040	    
000040  aa  040 040 040 040	    
000041  aa  143 160 165 040	cpu 
000042  aa  164 141 147 040	tag 
000043  aa  136 141 040 151	^a i
000044  aa  163 040 151 154	s il
000045  aa  154 145 147 141	lega
000046  aa  154 040 040 040	l   
000047  aa  040 040 040 040	    
000050  aa  040 040 040 040	    
000051  aa  040 040 040 040	    
000052  aa  040 040 040 040	    
000053  aa  040 040 040 040	    
000054  aa  040 040 040 040	    
000055  aa  040 040 040 040	    
000056  aa  040 040 040 040	    
000057  aa  040 040 040 040	    
000060  aa  040 040 040 040	    
000061  aa  143 160 165 040	cpu 
000062  aa  136 141 040 151	^a i
000063  aa  163 040 157 156	s on
000064  aa  154 151 156 145	line
000065  aa  040 141 156 144	 and
000066  aa  040 165 156 141	 una
000067  aa  166 141 151 154	vail
000070  aa  141 142 154 145	able
000071  aa  040 146 157 162	 for
000072  aa  040 164 145 163	 tes
000073  aa  164 040 040 040	t   
000074  aa  040 040 040 040	    
000075  aa  040 040 040 040	    
000076  aa  040 040 040 040	    
000077  aa  040 040 040 040	    
000100  aa  040 040 040 040	    
000101  aa  143 160 165 040	cpu 
000102  aa  136 141 040 151	^a i
000103  aa  163 040 156 157	s no
000104  aa  164 040 143 157	t co
000105  aa  156 146 151 147	nfig
000106  aa  165 162 145 144	ured
000107  aa  040 040 040 040	    
000110  aa  040 040 040 040	    
000111  aa  040 040 040 040	    
000112  aa  040 040 040 040	    
000113  aa  040 040 040 040	    
000114  aa  040 040 040 040	    
000115  aa  040 040 040 040	    
000116  aa  040 040 040 040	    
000117  aa  040 040 040 040	    
000120  aa  040 040 040 040	    
000121  aa  164 150 145 162	ther
000122  aa  145 040 155 165	e mu
000123  aa  163 164 040 142	st b
000124  aa  145 040 141 164	e at
000125  aa  040 154 145 141	 lea
000126  aa  163 164 040 164	st t
000127  aa  167 157 040 157	wo o
000130  aa  156 154 151 156	nlin
000131  aa  145 040 163 143	e sc
000132  aa  165 163 040 164	us t
000133  aa  157 040 162 165	o ru
000134  aa  156 040 151 163	n is
000135  aa  157 154 164 163	olts
000136  aa  040 040 040 040	    
000137  aa  040 040 040 040	    
000140  aa  040 040 040 040	    
000141  aa  163 143 165 040	scu 
000142  aa  164 141 147 040	tag 
000143  aa  136 141 040 151	^a i
000144  aa  163 040 151 154	s il
000145  aa  154 145 147 141	lega
000146  aa  154 040 040 040	l   
000147  aa  040 040 040 040	    
000150  aa  040 040 040 040	    
000151  aa  040 040 040 040	    
000152  aa  040 040 040 040	    
000153  aa  040 040 040 040	    
000154  aa  040 040 040 040	    
000155  aa  040 040 040 040	    
000156  aa  040 040 040 040	    
000157  aa  040 040 040 040	    
000160  aa  040 040 040 040	    
000161  aa  163 143 165 040	scu 
000162  aa  136 141 040 151	^a i
000163  aa  163 040 164 150	s th
000164  aa  145 040 142 157	e bo
000165  aa  157 164 154 157	otlo
000166  aa  141 144 040 163	ad s
000167  aa  143 165 040 141	cu a
000170  aa  156 144 040 143	nd c
000171  aa  141 156 156 157	anno
000172  aa  164 040 142 145	t be
000173  aa  040 165 163 145	 use
000174  aa  144 040 146 157	d fo
000175  aa  162 040 164 145	r te
000176  aa  163 164 151 156	stin
000177  aa  147 040 040 040	g   
000200  aa  040 040 040 040	    
000201  aa  163 143 165 040	scu 
000202  aa  136 141 040 151	^a i
000203  aa  163 040 156 157	s no
000204  aa  164 040 157 156	t on
000205  aa  154 151 156 145	line
000206  aa  040 040 040 040	    
000207  aa  040 040 040 040	    
000210  aa  040 040 040 040	    
000211  aa  040 040 040 040	    
000212  aa  040 040 040 040	    
000213  aa  040 040 040 040	    
000214  aa  040 040 040 040	    
000215  aa  040 040 040 040	    
000216  aa  040 040 040 040	    
000217  aa  040 040 040 040	    
000220  aa  040 040 040 040	    
000221  aa  162 145 161 165	requ
000222  aa  145 163 164 151	esti
000223  aa  156 147 040 160	ng p
000224  aa  162 157 143 145	roce
000225  aa  163 163 040 151	ss i
000226  aa  163 040 156 157	s no
000227  aa  164 040 162 165	t ru
000230  aa  156 156 151 156	nnin
000231  aa  147 040 151 163	g is
000232  aa  157 154 164 163	olts
000233  aa  040 040 040 040	    
000234  aa  040 040 040 040	    
000235  aa  040 040 040 040	    
000236  aa  040 040 040 040	    
000237  aa  040 040 040 040	    
000240  aa  040 040 040 040	    
000241  aa  143 160 165 040	cpu 
000242  aa  136 141 040 162	^a r
000243  aa  145 163 160 157	espo
000244  aa  156 144 145 144	nded
000245  aa  040 164 157 040	 to 
000246  aa  151 156 164 145	inte
000247  aa  162 162 165 160	rrup
000250  aa  164 040 143 145	t ce
000251  aa  154 154 040 136	ll ^
000252  aa  141 040 141 164	a at
000253  aa  040 154 157 143	 loc
000254  aa  040 136 141 040	 ^a 
000255  aa  040 040 040 040	    
000256  aa  040 040 040 040	    
000257  aa  040 040 040 040	    
000260  aa  040 040 040 040	    
000261  aa  143 160 165 040	cpu 
000262  aa  136 141 040 162	^a r
000263  aa  145 163 160 157	espo
000264  aa  156 144 145 144	nded
000265  aa  040 164 157 040	 to 
000266  aa  141 156 040 151	an i
000267  aa  156 164 145 162	nter
000270  aa  162 165 160 164	rupt
000271  aa  040 143 145 154	 cel
000272  aa  154 040 136 141	l ^a
000273  aa  040 157 156 040	 on 
000274  aa  163 143 165 040	scu 
000275  aa  136 141 040 040	^a  
000276  aa  040 040 040 040	    
000277  aa  040 040 040 040	    
000300  aa  040 040 040 040	    
000301  aa  143 160 165 040	cpu 
000302  aa  136 141 040 162	^a r
000303  aa  145 163 160 157	espo
000304  aa  156 144 145 144	nded
000305  aa  040 164 157 040	 to 
000306  aa  141 156 040 151	an i
000307  aa  156 164 145 162	nter
000310  aa  162 165 160 164	rupt
000311  aa  040 143 145 154	 cel
000312  aa  154 040 136 141	l ^a
000313  aa  040 157 156 040	 on 
000314  aa  163 143 165 040	scu 
000315  aa  136 141 040 141	^a a
000316  aa  164 040 154 157	t lo
000317  aa  143 040 136 141	c ^a
000320  aa  040 040 040 040	    
000321  aa  143 160 165 040	cpu 
000322  aa  136 141 040 146	^a f
000323  aa  141 151 154 145	aile
000324  aa  144 040 164 157	d to
000325  aa  040 162 145 163	 res
000326  aa  160 157 156 144	pond
000327  aa  040 164 157 040	 to 
000330  aa  141 156 040 151	an i
000331  aa  156 164 145 162	nter
000332  aa  162 165 160 164	rupt
000333  aa  040 143 145 154	 cel
000334  aa  154 040 136 141	l ^a
000335  aa  040 151 156 164	 int
000336  aa  145 162 162 165	erru
000337  aa  160 164 040 040	pt  
000340  aa  040 040 040 040	    
000341  aa  164 150 145 040	the 
000342  aa  146 157 154 154	foll
000343  aa  157 167 151 156	owin
000344  aa  147 040 163 167	g sw
000345  aa  151 164 143 150	itch
000346  aa  145 163 040 157	es o
000347  aa  156 040 143 160	n cp
000350  aa  165 040 136 141	u ^a
000351  aa  040 141 162 145	 are
000352  aa  040 163 145 164	 set
000353  aa  040 151 156 143	 inc
000354  aa  157 162 162 145	orre
000355  aa  143 164 154 171	ctly
000356  aa  072 040 136 141	: ^a
000357  aa  040 040 040 040	    
000360  aa  040 040 040 040	    
000361  aa  141 040 042 154	a "l
000362  aa  144 141 040 062	da 2
000363  aa  042 040 144 151	" di
000364  aa  144 040 156 157	d no
000365  aa  164 040 157 160	t op
000366  aa  145 162 141 164	erat
000367  aa  145 040 160 162	e pr
000370  aa  157 160 145 162	oper
000371  aa  154 171 040 040	ly  
000372  aa  040 040 040 040	    
000373  aa  040 040 040 040	    
000374  aa  040 040 040 040	    
000375  aa  040 040 040 040	    
000376  aa  040 040 040 040	    
000377  aa  040 040 040 040	    
000400  aa  040 040 040 040	    
000401  aa  141 040 042 154	a "l
000402  aa  144 141 040 066	da 6
000403  aa  065 065 063 066	5536
000404  aa  042 040 050 066	" (6
000405  aa  064 153 051 040	4k) 
000406  aa  146 141 151 154	fail
000407  aa  145 144 040 164	ed t
000410  aa  157 040 160 162	o pr
000411  aa  157 144 165 143	oduc
000412  aa  145 040 141 040	e a 
000413  aa  163 164 157 162	stor
000414  aa  145 040 146 141	e fa
000415  aa  165 154 164 040	ult 
000416  aa  040 040 040 040	    
000417  aa  040 040 040 040	    
000420  aa  040 040 040 040	    
000421  aa  163 143 165 040	scu 
000422  aa  136 141 040 150	^a h
000423  aa  141 163 040 156	as n
000424  aa  157 040 151 156	o in
000425  aa  164 145 162 162	terr
000426  aa  165 160 164 040	upt 
000427  aa  155 141 163 153	mask
000430  aa  040 162 145 147	 reg
000431  aa  151 163 164 145	iste
000432  aa  162 040 141 163	r as
000433  aa  163 151 147 156	sign
000434  aa  145 144 040 164	ed t
000435  aa  157 040 143 160	o cp
000436  aa  165 040 136 141	u ^a
000437  aa  040 040 040 040	    
000440  aa  040 040 040 040	    

011162  aa  012 000 000 000	


000441  aa     000000000006
000442  aa  143 141 162 144	card
000443  aa  151 156 040 040	in  
000444  aa     000000000003
000445  aa  151 057 157 040	i/o 
000446  aa  040 040 040 040	    

000447  aa  067 070 061 067	7817
000450  aa  070 062 067 070	8278
000451  aa  063 067 070 064	3784
000452  aa  070 071 061 070	8918
000453  aa  071 064 070 071	9489
000454  aa  065 070 071 067	5897
000455  aa  070 071 071 071	8999
000456  aa  060 070 071 062	0892
000457  aa  060 071 062 061	0921
000460  aa  071 062 062 071	9229
000461  aa  062 063 071 062	2392
000462  aa  064 071 062 067	4927
000463  aa  071 062 070 071	9289
000464  aa  062 071 071 063	2993
000465  aa  060 071 067 065	0975
000466  aa  071 070 060 071	9809
000467  aa  071 060 000 000	90  

000470  aa  060 066 061 000	061

000471  aa  060 061 143 000	01c

000472  aa  141 142 143 144	abcd
000473  aa  145 146 147 150	efgh

000474  aa  151 163 157 154	isol
000475  aa  164 163 000 000	ts

000476  aa     526000000100

000477  aa  163 151 172 145	size

000500  aa     524000000011

000501  aa     524000000013

000502  aa     524000000017

000503  aa     516000000022

000504  aa     526000000014

000505  aa     406000000005

000506  aa     526000000200

000507  aa     524000000106

000510  aa  055 141 154 154	-all

000511  aa     524000000062

000512  aa     524000000061

000513  aa     524000000112

000514  aa     524000000052

000515  aa     524000000107

000516  aa     524000000044

000517  aa     524000000111

000520  aa     524000000116

000521  aa     524000000071

000522  aa     524000000056

000523  aa     524000000021

000524  aa     524000000063

000525  aa     524000000076

000526  aa     524000000030

000527  aa     514000000013

000530  aa     464000000000

000531  aa     404000000023

000532  aa     404000000022

011163  aa  105 000 000 000	E

000533  aa  164 171 160 145	type

000534  aa  151 164 146 000	itf

000535  aa  151 164 156 000	itn

000536  aa     514000000044

000537  aa     524000000034

000540  aa     526077777777

000541  aa  150 141 154 164	halt

000542  aa  162 165 156 000	run

000543  aa     524000000026

000544  aa     530000000034

000545  aa  164 163 164 000	tst

000546  aa  160 162 147 000	prg

000547  aa  163 145 161 000	seq

000550  aa     524000000010

000551  aa     524000000041

000552  aa     524000000003

000553  aa  040 136 141 000	 ^a

000554  aa     514000000001

000555  aa     524000000016

000556  aa     530000000210

000557  aa     516000000000

011164  aa     000000000006

000560  aa     524000000012

000561  aa     514000000022

000562  aa     524000000002

011165  aa  143 000 000 000	c

011166  aa  162 000 000 000	r

000563  aa     524000000065

000564  aa     524000000066

000565  aa     524000000077

000566  aa     524000000121

000567  aa     524000000001

011167  aa  040 000 000 000	 

000570  aa     524000000036

000571  aa  071 065 065 000	955

000572  aa  070 071 063 000	893

000573  aa  070 071 062 000	892

000574  aa     526000000310

000575  aa     524000000035

000576  aa     524000000024

000577  aa  160 141 163 056	pas.

000600  aa     526000000003

000601  aa     524000000020

000602  aa  157 146 146 000	off

000603  aa     524000000032

000604  aa     524000000043

000605  aa  144 160 163 070	dps8

000606  aa  154 066 070 040	l68 

000607  aa     524000000022

000610  aa     526000000001

000611  aa     524000000060

000612  aa  144 160 163 000	dps

000613  aa  154 066 070 000	l68

000614  aa  143 160 165 040	cpu 

000615  aa  055 142 146 000	-bf

000616  aa  143 160 165 000	cpu

000617  aa     524000000000

000620  aa     524000000006

000621  aa  160 143 144 000	pcd

000622  aa  164 145 163 164	test

000623  aa     524000000027

000624  aa     526000000006

000625  aa     404000000005

000626  aa  144 145 162 162	derr

000627  aa  155 163 147 000	msg

011170  aa  161 000 000 000	q

000630  aa     404000000021

000631  aa     524000000204

000632  aa     524000000004

000633  aa  077 077 077 040	??? 

000634  aa     524000000114

000635  aa  157 156 040 000	on 

000636  aa     516000000001

000637  aa  161 165 151 164	quit

000640  aa     404000000043

000642  aa     000000000000
000643  aa     000000000001

000644  aa  165 156 141 142	unab
000645  aa  154 145 000 000	le

000646  aa  165 156 141 142	unab
000647  aa  154 145 040 040	le  

000650  aa  144 157 156 145	done
000651  aa  040 040 040 040	    

000652  aa  144 145 156 171	deny
000653  aa  040 040 040 040	    

000654  aa  147 162 141 156	gran
000655  aa  164 040 040 040	t   

000656  aa  163 144 165 155	sdum
000657  aa  160 000 000 000	p

000660  aa  170 144 165 155	xdum
000661  aa  160 000 000 000	p

000662  aa  155 144 165 155	mdum
000663  aa  160 000 000 000	p

000664  aa  143 144 165 155	cdum
000665  aa  160 000 000 000	p

000666  aa  160 162 151 156	prin
000667  aa  164 000 000 000	t

000670  aa  141 160 162 151	apri
000671  aa  156 164 000 000	nt

000672  aa  160 162 151 156	prin
000673  aa  164 040 000 000	t 

000674  aa  141 164 171 160	atyp
000675  aa  145 000 000 000	e

000676  aa  162 145 163 164	rest
000677  aa  141 162 164 000	art

000700  aa  155 145 155 157	memo
000701  aa  162 171 040 000	ry 

000702  aa  162 145 163 145	rese
000703  aa  164 000 000 000	t

000704  aa  040 040 040 040	    
000705  aa  040 040 000 000	  

000706  aa  143 157 156 164	cont
000707  aa  151 156 165 145	inue

000710  aa  162 145 164 162	retr
000711  aa  171 000 000 000	y

000712  aa     077777000043
000713  aa     000001000000

000714  aa  055 164 162 141	-tra
000715  aa  143 145 000 000	ce

000716  aa  055 142 162 151	-bri
000717  aa  145 146 000 000	ef

000720  aa  055 155 145 155	-mem
000721  aa  157 162 171 000	ory

000722  aa  141 142 143 144	abcd
000723  aa  145 146 147 150	efgh

000724  aa  151 163 157 154	isol
000725  aa  164 163 000 000	ts

000726  aa  055 164 171 160	-typ
000727  aa  145 000 000 000	e

000730  aa  144 151 163 160	disp
000731  aa  154 141 171 000	lay

000732  aa  146 151 156 151	fini
000733  aa  163 150 000 000	sh

000734  aa  143 154 145 141	clea
000735  aa  156 165 160 000	nup

000736  aa  150 141 154 146	half
000737  aa  057 146 165 154	/ful
000740  aa  154 000 000 000	l

000741  aa  151 156 164 145	inte
000742  aa  162 154 141 143	rlac
000743  aa  145 000 000 000	e

000744  aa  160 157 162 164	port
000745  aa  040 145 156 141	 ena
000746  aa  142 154 145 000	ble

000747  aa  146 141 165 154	faul
000750  aa  164 040 142 141	t ba
000751  aa  163 145 000 000	se

000752  aa  151 164 162 141	itra
000753  aa  143 145 137 157	ce_o
000754  aa  146 146 000 000	ff

000755  aa  151 164 162 141	itra
000756  aa  143 145 137 157	ce_o
000757  aa  156 000 000 000	n

000760  aa  154 157 141 144	load
000761  aa  040 160 147 155	 pgm
000762  aa  136 141 000 000	^a

000763  aa  160 157 162 164	port
000764  aa  040 141 163 163	 ass
000765  aa  151 147 156 155	ignm
000766  aa  145 156 164 000	ent

000767  aa  160 162 157 143	proc
000770  aa  145 163 163 157	esso
000771  aa  162 040 156 165	r nu
000772  aa  155 142 145 162	mber

000773  aa  136 133 136 057	^[^/
000774  aa  136 135 136 141	^]^a
000775  aa  136 133 136 057	^[^/
000776  aa  136 135 000 000	^]

000777  aa  136 057 163 164	^/st
001000  aa  141 162 164 040	art 
001001  aa  160 146 164 040	pft 
001002  aa  136 141 136 057	^a^/

001003  aa  144 151 163 160	disp
001004  aa  154 141 171 137	lay_
001005  aa  145 162 162 157	erro
001006  aa  162 000 000 000	r

001007  aa     530100000034
001010  aa     000000000001
001011  aa     000000000040
001012  aa     000000000010

001013  aa  151 156 151 164	init
001014  aa  151 141 154 151	iali
001015  aa  172 145 040 145	ze e
001016  aa  156 141 142 154	nabl
001017  aa  145 000 000 000	e

001020  aa  160 145 162 155	perm
001021  aa  151 163 163 151	issi
001022  aa  157 156 040 147	on g
001023  aa  162 141 156 164	rant
001024  aa  145 144 000 000	ed

001025  aa  160 145 162 155	perm
001026  aa  151 163 163 151	issi
001027  aa  157 156 040 144	on d
001030  aa  145 156 151 145	enie
001031  aa  144 000 000 000	d

001032  aa  151 156 166 141	inva
001033  aa  154 151 144 040	lid 
001034  aa  151 156 160 165	inpu
001035  aa  164 040 055 040	t - 
001036  aa  042 136 141 042	"^a"

001037  aa  163 145 141 162	sear
001040  aa  143 150 151 156	chin
001041  aa  147 040 146 157	g fo
001042  aa  162 040 160 141	r pa
001043  aa  163 056 136 141	s.^a

001044  aa  145 156 164 145	ente
001045  aa  162 040 154 066	r l6
001046  aa  070 040 157 162	8 or
001047  aa  040 144 160 163	 dps
001050  aa  070 040 000 000	8 

001051  aa  163 154 141 166	slav
001052  aa  145 040 160 162	e pr
001053  aa  157 147 162 141	ogra
001054  aa  155 040 156 157	m no
001055  aa  164 040 154 157	t lo
001056  aa  141 144 145 144	aded

001057  aa  136 141 040 156	^a n
001060  aa  157 164 040 163	ot s
001061  aa  165 160 160 157	uppo
001062  aa  162 164 145 144	rted
001063  aa  040 142 171 040	 by 
001064  aa  136 141 000 000	^a

001065  aa  052 052 052 040	*** 
001066  aa  145 156 144 040	end 
001067  aa  136 141 054 040	^a, 
001070  aa  156 145 170 164	next
001071  aa  040 136 141 040	 ^a 
001072  aa  052 052 052 000	***

001073  aa  151 156 166 141	inva
001074  aa  154 151 144 040	lid 
001075  aa  162 145 163 160	resp
001076  aa  157 156 163 145	onse
001077  aa  040 055 040 042	 - "
001100  aa  136 141 042 000	^a"

001101  aa  141 164 164 145	atte
001102  aa  155 160 164 151	mpti
001103  aa  156 147 040 162	ng r
001104  aa  145 143 157 156	econ
001105  aa  146 151 147 165	figu
001106  aa  162 141 164 151	rati
001107  aa  157 156 000 000	on

001110  aa  136 141 056 136	^a.^
001111  aa  141 040 055 040	a - 
001112  aa  141 143 164 151	acti
001113  aa  157 156 040 143	on c
001114  aa  157 144 145 040	ode 
001115  aa  075 040 136 061	= ^1
001116  aa  062 056 063 142	2.3b

001117  aa  136 057 162 145	^/re
001120  aa  143 157 156 146	conf
001121  aa  151 147 165 162	igur
001122  aa  141 164 151 157	atio
001123  aa  156 040 143 157	n co
001124  aa  155 160 154 145	mple
001125  aa  164 145 000 000	te

001126  aa  150 141 166 151	havi
001127  aa  156 147 040 160	ng p
001130  aa  162 157 142 154	robl
001131  aa  145 155 163 040	ems 
001132  aa  162 145 143 157	reco
001133  aa  156 146 151 147	nfig
001134  aa  165 162 151 156	urin
001135  aa  147 000 000 000	g

001136  aa  167 150 145 156	when
001137  aa  040 162 145 143	 rec
001140  aa  157 156 146 151	onfi
001141  aa  147 165 162 141	gura
001142  aa  164 151 157 156	tion
001143  aa  040 143 157 155	 com
001144  aa  160 154 145 164	plet
001145  aa  145 000 000 000	e

001146  aa  136 141 040 157	^a o
001147  aa  160 164 151 157	ptio
001150  aa  156 040 156 157	n no
001151  aa  164 040 163 165	t su
001152  aa  160 160 157 162	ppor
001153  aa  164 145 144 040	ted 
001154  aa  142 171 040 136	by ^
001155  aa  141 000 000 000	a

001156  aa  141 164 164 145	atte
001157  aa  155 160 164 151	mpti
001160  aa  156 147 040 164	ng t
001161  aa  157 040 151 156	o in
001162  aa  164 145 162 162	terr
001163  aa  165 160 164 040	upt 
001164  aa  143 160 165 040	cpu 
001165  aa  136 141 000 000	^a

001166  aa  136 141 136 057	^a^/
001167  aa  141 164 164 145	atte
001170  aa  155 160 164 151	mpti
001171  aa  156 147 040 164	ng t
001172  aa  157 040 154 157	o lo
001173  aa  141 144 040 160	ad p
001174  aa  141 163 056 136	as.^
001175  aa  141 000 000 000	a

001176  aa  040 063 056 040	 3. 
001177  aa  163 145 164 040	set 
001200  aa  163 164 157 162	stor
001201  aa  145 040 163 151	e si
001202  aa  172 145 040 163	ze s
001203  aa  167 151 164 143	witc
001204  aa  150 145 163 040	hes 
001205  aa  164 157 040 062	to 2
001206  aa  062 062 062 056	222.

001207  aa  136 057 052 052	^/**
001210  aa  052 040 141 156	* an
001211  aa  040 145 162 162	 err
001212  aa  157 162 040 150	or h
001213  aa  141 163 040 157	as o
001214  aa  143 143 165 162	ccur
001215  aa  162 145 144 040	red 
001216  aa  052 052 052 136	***^
001217  aa  057 000 000 000	/

001220  aa  151 163 157 154	isol
001221  aa  164 163 137 072	ts_:
001222  aa  040 151 156 166	 inv
001223  aa  141 154 151 144	alid
001224  aa  040 151 156 160	 inp
001225  aa  165 164 040 160	ut p
001226  aa  154 163 040 162	ls r
001227  aa  145 145 156 164	eent
001230  aa  145 162 056 000	er.

001231  aa  040 064 056 040	 4. 
001232  aa  166 145 162 151	veri
001233  aa  146 171 040 164	fy t
001234  aa  150 141 164 040	hat 
001235  aa  164 150 145 040	the 
001236  aa  155 157 144 145	mode
001237  aa  040 163 167 151	 swi
001240  aa  164 143 150 040	tch 
001241  aa  151 163 040 151	is i
001242  aa  156 040 166 155	n vm
001243  aa  163 056 000 000	s.

001244  aa  141 163 153 151	aski
001245  aa  156 147 040 157	ng o
001246  aa  160 145 162 141	pera
001247  aa  164 157 162 040	tor 
001250  aa  164 157 040 155	to m
001251  aa  141 156 165 141	anua
001252  aa  154 154 171 040	lly 
001253  aa  162 145 143 157	reco
001254  aa  156 146 151 147	nfig
001255  aa  165 162 145 040	ure 
001256  aa  143 160 165 040	cpu 
001257  aa  136 141 000 000	^a

001260  aa  164 151 155 145	time
001261  aa  040 157 165 164	 out
001262  aa  040 141 146 164	 aft
001263  aa  145 162 040 136	er ^
001264  aa  144 040 163 145	d se
001265  aa  143 157 156 144	cond
001266  aa  163 040 167 150	s wh
001267  aa  151 154 145 040	ile 
001270  aa  145 170 145 143	exec
001271  aa  165 164 151 156	utin
001272  aa  147 040 120 106	g PF
001273  aa  124 040 136 141	T ^a

001274  aa  151 163 157 154	isol
001275  aa  164 163 137 072	ts_:
001276  aa  040 165 156 141	 una
001277  aa  142 154 145 040	ble 
001300  aa  164 157 040 144	to d
001301  aa  145 164 145 162	eter
001302  aa  155 151 156 145	mine
001303  aa  040 143 160 165	 cpu
001304  aa  040 164 171 160	 typ
001305  aa  145 040 146 157	e fo
001306  aa  162 040 143 160	r cp
001307  aa  165 040 136 141	u ^a

001310  aa  040 066 056 040	 6. 
001311  aa  163 145 164 040	set 
001312  aa  164 150 145 040	the 
001313  aa  160 157 162 164	port
001314  aa  040 145 156 141	 ena
001315  aa  142 154 145 040	ble 
001316  aa  163 167 151 164	swit
001317  aa  143 150 040 042	ch "
001320  aa  157 156 042 040	on" 
001321  aa  146 157 162 040	for 
001322  aa  160 157 162 164	port
001323  aa  040 042 136 141	 "^a
001324  aa  042 056 000 000	".

001325  aa  040 065 056 040	 5. 
001326  aa  144 145 160 162	depr
001327  aa  145 163 163 040	ess 
001330  aa  164 150 145 040	the 
001331  aa  151 156 151 164	init
001332  aa  151 141 154 151	iali
001333  aa  172 145 040 141	ze a
001334  aa  156 144 040 143	nd c
001335  aa  154 145 141 162	lear
001336  aa  040 160 165 163	 pus
001337  aa  150 040 142 165	h bu
001340  aa  164 164 157 156	tton
001341  aa  056 000 000 000	.

001342  aa  160 145 162 155	perm
001343  aa  151 163 163 151	issi
001344  aa  157 156 040 141	on a
001345  aa  163 153 145 144	sked
001346  aa  040 164 157 040	 to 
001347  aa  164 145 163 164	test
001350  aa  040 143 160 165	 cpu
001351  aa  040 042 136 141	 "^a
001352  aa  042 040 165 163	" us
001353  aa  151 156 147 040	ing 
001354  aa  155 145 155 157	memo
001355  aa  162 171 040 042	ry "
001356  aa  136 141 042 000	^a"

001357  aa  040 062 056 040	 2. 
001360  aa  163 145 164 040	set 
001361  aa  164 150 145 040	the 
001362  aa  141 163 163 151	assi
001363  aa  147 156 155 145	gnme
001364  aa  156 164 040 163	nt s
001365  aa  167 151 164 143	witc
001366  aa  150 145 163 040	hes 
001367  aa  146 157 162 040	for 
001370  aa  141 154 154 040	all 
001371  aa  160 157 162 164	port
001372  aa  163 040 164 157	s to
001373  aa  040 060 060 060	 000
001374  aa  056 000 000 000	.

001375  aa  136 057 136 141	^/^a
001376  aa  040 042 143 144	 "cd
001377  aa  165 155 160 042	ump"
001400  aa  040 146 162 157	 fro
001401  aa  155 040 136 157	m ^o
001402  aa  040 164 157 040	 to 
001403  aa  136 157 040 157	^o o
001404  aa  146 040 143 160	f cp
001405  aa  165 040 136 141	u ^a
001406  aa  040 165 163 151	 usi
001407  aa  156 147 040 155	ng m
001410  aa  145 155 157 162	emor
001411  aa  171 040 136 141	y ^a
001412  aa  136 057 000 000	^/

001413  aa  162 145 163 160	resp
001414  aa  157 156 144 040	ond 
001415  aa  042 161 165 151	"qui
001416  aa  164 040 050 161	t (q
001417  aa  051 042 054 040	)", 
001420  aa  042 162 145 164	"ret
001421  aa  162 171 040 050	ry (
001422  aa  162 051 042 054	r)",
001423  aa  040 157 162 040	 or 
001424  aa  042 143 157 156	"con
001425  aa  164 151 156 165	tinu
001426  aa  145 040 050 143	e (c
001427  aa  051 042 040 055	)" -
001430  aa  040 000 000 000	 

001431  aa  164 151 155 145	time
001432  aa  040 157 165 164	 out
001433  aa  040 141 146 164	 aft
001434  aa  145 162 040 136	er ^
001435  aa  144 040 163 145	d se
001436  aa  143 157 156 144	cond
001437  aa  163 040 167 150	s wh
001440  aa  151 154 145 040	ile 
001441  aa  145 170 145 143	exec
001442  aa  165 164 151 156	utin
001443  aa  147 040 160 141	g pa
001444  aa  163 062 040 164	s2 t
001445  aa  145 163 164 040	est 
001446  aa  136 141 000 000	^a

001447  aa  145 170 145 143	exec
001450  aa  165 164 145 040	ute 
001451  aa  164 150 145 040	the 
001452  aa  146 157 154 154	foll
001453  aa  157 167 151 156	owin
001454  aa  147 040 155 141	g ma
001455  aa  156 165 141 154	nual
001456  aa  040 162 145 143	 rec
001457  aa  157 156 146 151	onfi
001460  aa  147 165 162 141	gura
001461  aa  164 151 157 156	tion
001462  aa  040 157 156 040	 on 
001463  aa  143 160 165 040	cpu 
001464  aa  042 136 141 042	"^a"
001465  aa  072 000 000 000	:

001466  aa  141 163 153 151	aski
001467  aa  156 147 040 157	ng o
001470  aa  160 145 162 141	pera
001471  aa  164 157 162 163	tors
001472  aa  040 160 145 162	 per
001473  aa  155 151 163 163	miss
001474  aa  151 157 156 040	ion 
001475  aa  164 157 040 164	to t
001476  aa  145 163 164 040	est 
001477  aa  143 160 165 040	cpu 
001500  aa  042 136 141 042	"^a"
001501  aa  040 165 163 151	 usi
001502  aa  156 147 040 155	ng m
001503  aa  145 155 157 162	emor
001504  aa  171 040 042 136	y "^
001505  aa  141 042 000 000	a"

001506  aa  164 151 155 145	time
001507  aa  040 157 165 164	 out
001510  aa  040 141 146 164	 aft
001511  aa  145 162 040 136	er ^
001512  aa  144 040 163 145	d se
001513  aa  143 157 156 144	cond
001514  aa  163 040 167 150	s wh
001515  aa  151 154 145 040	ile 
001516  aa  151 156 151 164	init
001517  aa  151 141 154 151	iali
001520  aa  172 151 156 147	zing
001521  aa  040 164 150 145	 the
001522  aa  040 160 141 163	 pas
001523  aa  062 040 145 170	2 ex
001524  aa  145 143 165 164	ecut
001525  aa  151 166 145 000	ive

001526  aa  164 150 145 040	the 
001527  aa  146 157 154 154	foll
001530  aa  157 167 151 156	owin
001531  aa  147 040 145 162	g er
001532  aa  162 157 162 163	rors
001533  aa  040 167 145 162	 wer
001534  aa  145 040 144 145	e de
001535  aa  164 145 143 164	tect
001536  aa  145 144 040 167	ed w
001537  aa  150 151 154 145	hile
001540  aa  040 141 164 164	 att
001541  aa  145 155 160 164	empt
001542  aa  151 156 147 040	ing 
001543  aa  162 145 143 157	reco
001544  aa  156 146 151 147	nfig
001545  aa  165 162 141 164	urat
001546  aa  151 157 156 072	ion:
001547  aa  136 057 000 000	^/

001550  aa  040 063 056 040	 3. 
001551  aa  162 145 155 157	remo
001552  aa  166 145 040 164	ve t
001553  aa  150 145 040 162	he r
001554  aa  151 147 150 164	ight
001555  aa  040 146 162 145	 fre
001556  aa  145 055 145 144	e-ed
001557  aa  147 145 040 143	ge c
001560  aa  157 156 156 145	onne
001561  aa  143 164 157 162	ctor
001562  aa  040 157 156 040	 on 
001563  aa  164 150 145 040	the 
001564  aa  066 064 065 160	645p
001565  aa  161 040 167 167	q ww
001566  aa  142 040 141 164	b at
001567  aa  040 163 154 157	 slo
001570  aa  164 040 141 142	t ab
001571  aa  062 070 056 000	28.

001572  aa  040 064 056 040	 4. 
001573  aa  151 156 163 164	inst
001574  aa  141 154 154 040	all 
001575  aa  164 150 145 040	the 
001576  aa  042 143 160 165	"cpu
001577  aa  040 164 145 163	 tes
001600  aa  164 042 040 040	t"  
001601  aa  157 156 040 164	on t
001602  aa  150 145 040 162	he r
001603  aa  151 147 150 164	ight
001604  aa  040 146 162 145	 fre
001605  aa  145 055 145 144	e-ed
001606  aa  147 145 040 143	ge c
001607  aa  157 156 156 145	onne
001610  aa  143 164 157 162	ctor
001611  aa  040 141 164 040	 at 
001612  aa  163 154 157 164	slot
001613  aa  040 141 142 062	 ab2
001614  aa  070 056 000 000	8.

001615  aa  040 062 056 040	 2. 
001616  aa  163 145 164 040	set 
001617  aa  141 154 154 040	all 
001620  aa  160 157 162 164	port
001621  aa  040 141 163 163	 ass
001622  aa  151 147 156 155	ignm
001623  aa  145 156 164 040	ent 
001624  aa  163 167 151 164	swit
001625  aa  143 150 145 163	ches
001626  aa  040 164 157 040	 to 
001627  aa  060 060 060 040	000 
001630  aa  141 156 144 040	and 
001631  aa  164 150 145 040	the 
001632  aa  163 151 172 145	size
001633  aa  040 163 167 151	 swi
001634  aa  164 143 150 145	tche
001635  aa  163 040 164 157	s to
001636  aa  040 146 165 154	 ful
001637  aa  154 000 000 000	l

001640  aa  136 057 052 052	^/**
001641  aa  052 145 156 164	*ent
001642  aa  145 162 040 042	er "
001643  aa  164 145 163 164	test
001644  aa  040 143 160 165	 cpu
001645  aa  040 074 164 141	 <ta
001646  aa  147 076 042 054	g>",
001647  aa  040 042 040 144	 " d
001650  aa  151 163 160 154	ispl
001651  aa  141 171 137 145	ay_e
001652  aa  162 162 157 162	rror
001653  aa  042 054 040 042	", "
001654  aa  164 145 163 164	test
001655  aa  040 160 143 144	 pcd
001656  aa  042 054 040 042	", "
001657  aa  155 163 147 042	msg"
001660  aa  054 040 157 162	, or
001661  aa  040 042 161 165	 "qu
001662  aa  151 164 040 042	it "

001663  aa  040 061 056 040	 1. 
001664  aa  163 145 164 040	set 
001665  aa  141 154 154 040	all 
001666  aa  160 157 162 164	port
001667  aa  040 141 156 144	 and
001670  aa  040 151 156 151	 ini
001671  aa  164 151 141 154	tial
001672  aa  151 172 145 040	ize 
001673  aa  145 156 141 142	enab
001674  aa  154 145 040 163	le s
001675  aa  167 151 164 143	witc
001676  aa  150 145 163 040	hes 
001677  aa  141 156 144 040	and 
001700  aa  151 156 164 145	inte
001701  aa  162 154 141 143	rlac
001702  aa  145 040 163 167	e sw
001703  aa  151 164 143 150	itch
001704  aa  145 163 040 164	es t
001705  aa  157 040 157 146	o of
001706  aa  146 056 000 000	f.

001707  aa  143 150 145 143	chec
001710  aa  153 040 143 160	k cp
001711  aa  165 040 136 141	u ^a
001712  aa  047 163 040 155	's m
001713  aa  141 151 156 164	aint
001714  aa  145 156 145 156	enen
001715  aa  143 145 040 160	ce p
001716  aa  141 156 145 154	anel
001717  aa  040 141 156 144	 and
001720  aa  040 143 157 156	 con
001721  aa  163 165 154 164	sult
001722  aa  040 160 162 157	 pro
001723  aa  147 162 141 155	gram
001724  aa  040 154 151 163	 lis
001725  aa  164 151 156 147	ting
001726  aa  040 164 157 040	 to 
001727  aa  144 145 164 145	dete
001730  aa  162 155 151 156	rmin
001731  aa  145 040 146 141	e fa
001732  aa  151 154 165 162	ilur
001733  aa  145 000 000 000	e

LABEL ARRAYS
000000  aa   010763 7100 04	tra  	4595,ic		010763
000001  aa   010412 7100 04	tra  	4362,ic		010413
000002  aa   010411 7100 04	tra  	4361,ic		010413
000003  aa   010410 7100 04	tra  	4360,ic		010413
000004  aa   010757 7100 04	tra  	4591,ic		010763
000005  aa   010413 7100 04	tra  	4363,ic		010420
000006  aa   010412 7100 04	tra  	4362,ic		010420
000007  aa   010411 7100 04	tra  	4361,ic		010420
000010  aa   010753 7100 04	tra  	4587,ic		010763
000011  aa   010414 7100 04	tra  	4364,ic		010425
000012  aa   010751 7100 04	tra  	4585,ic		010763
000013  aa   010444 7100 04	tra  	4388,ic		010457
000014  aa   010747 7100 04	tra  	4583,ic		010763
000015  aa   010505 7100 04	tra  	4421,ic		010522
000016  aa   010745 7100 04	tra  	4581,ic		010763
000017  aa   010744 7100 04	tra  	4580,ic		010763
000020  aa   010471 7100 04	tra  	4409,ic		010511

BEGIN PROCEDURE isolts_
ENTRY TO isolts_                                            STATEMENT 1 ON LINE 12
isolts_: proc;

001734  da     000361200000
001735  aa   002320 6270 00	eax7 	1232
001736  aa  7 00034 3521 20	epp2 	pr7|28,*
001737  aa  2 01045 2721 00	tsp2 	pr2|549		ext_entry
001740  aa     000000000000
001741  aa     000000000000
						STATEMENT 1 ON LINE 72
001742  aa  6 00110 4501 00	stz  	pr6|72		bf_sw
						STATEMENT 1 ON LINE 75
001743  aa  6 00114 4501 00	stz  	pr6|76		term
001744  aa  6 00115 4501 00	stz  	pr6|77		trm
001745  aa  6 00116 4501 00	stz  	pr6|78		trm1
001746  aa  6 00117 4501 00	stz  	pr6|79		pas_sw
001747  aa  6 00120 4501 00	stz  	pr6|80		mess_in_prog
001750  aa  6 00121 4501 00	stz  	pr6|81		ntype
001751  aa  6 00122 4501 00	stz  	pr6|82		run
001752  aa  6 00123 4501 00	stz  	pr6|83		option
001753  aa  6 00124 4501 00	stz  	pr6|84		trace_sw
001754  aa  6 00125 4501 00	stz  	pr6|85		dump_in_prog
001755  aa  6 00126 4501 00	stz  	pr6|86		idump
001756  aa  6 00127 4501 00	stz  	pr6|87		car_nz
						STATEMENT 1 ON LINE 81
001757  aa   000454 2360 07	ldq  	300,dl
001760  aa  6 00241 7561 00	stq  	pr6|161		delay_iter
						STATEMENT 1 ON LINE 207
      isolate_cpu = "0"b;

001761  ia  4 00014 4501 00	stz  	pr4|12		isolate_cpu
						STATEMENT 1 ON LINE 208
      on cleanup call clean_up;

001762  aa   000007 7260 07	lxl6 	7,dl
001763  aa   776751 3520 04	epp2 	-535,ic		000734 = 143154145141
001764  aa  0 00717 7001 00	tsx0 	pr0|463		enable_op
001765  aa   000004 7100 04	tra  	4,ic		001771
001766  aa     000700000000
001767  aa   000015 7100 04	tra  	13,ic		002004
BEGIN CONDITION cleanup.1
ENTRY TO cleanup.1                                          STATEMENT 1 ON LINE 208
      on cleanup call clean_up;

001770  da     000367200000
001771  aa   000100 6270 00	eax7 	64
001772  aa  7 00034 3521 20	epp2 	pr7|28,*
001773  aa  2 01047 2721 00	tsp2 	pr2|551		int_entry
001774  aa     000000000000
001775  aa     000000000000
001776  aa   000001 7270 07	lxl7 	1,dl
001777  aa  6 00056 6211 00	eax1 	pr6|46
002000  aa   000000 4310 07	fld  	0,dl
002001  aa   003572 3520 04	epp2 	1914,ic		005573 = 000120627000
002002  aa  0 00627 7001 00	tsx0 	pr0|407		call_int_other
002003  aa  0 00631 7101 00	tra  	pr0|409		return_mac
  END CONDITION cleanup.1
						STATEMENT 1 ON LINE 209
      on finish call clean_up;

002004  aa   000006 7260 07	lxl6 	6,dl
002005  aa   776725 3520 04	epp2 	-555,ic		000732 = 146151156151
002006  aa  0 00717 7001 00	tsx0 	pr0|463		enable_op
002007  aa   000004 7100 04	tra  	4,ic		002013
002010  aa     000706000000
002011  aa   000015 7100 04	tra  	13,ic		002026
BEGIN CONDITION finish.2
ENTRY TO finish.2                                           STATEMENT 1 ON LINE 209
      on finish call clean_up;

002012  da     000375200000
002013  aa   000100 6270 00	eax7 	64
002014  aa  7 00034 3521 20	epp2 	pr7|28,*
002015  aa  2 01047 2721 00	tsp2 	pr2|551		int_entry
002016  aa     000000000000
002017  aa     000000000000
002020  aa   000001 7270 07	lxl7 	1,dl
002021  aa  6 00056 6211 00	eax1 	pr6|46
002022  aa   000000 4310 07	fld  	0,dl
002023  aa   003550 3520 04	epp2 	1896,ic		005573 = 000120627000
002024  aa  0 00627 7001 00	tsx0 	pr0|407		call_int_other
002025  aa  0 00631 7101 00	tra  	pr0|409		return_mac
  END CONDITION finish.2
						STATEMENT 1 ON LINE 211
      call tolts_util_$get_ttl_date (isolts_, ttl_date);

002026  aa   777707 3520 04	epp2 	-57,ic		001735 = 002320627000
002027  aa  6 02004 2521 00	spri2	pr6|1028		cp.304
002030  aa   007130 2370 04	ldaq 	3672,ic		011160 = 077777000043 000001000000
002031  aa  6 02006 7571 00	staq 	pr6|1030		cp.304
002032  aa  6 02004 3521 00	epp2 	pr6|1028		cp.304
002033  aa  6 02012 2521 00	spri2	pr6|1034
002034  aa  6 00242 3521 00	epp2 	pr6|162		ttl_date
002035  aa  6 02014 2521 00	spri2	pr6|1036
002036  aa  6 02010 6211 00	eax1 	pr6|1032
002037  aa   010000 4310 07	fld  	4096,dl
002040  aa  6 00044 3701 20	epp4 	pr6|36,*
002041  la  4 00020 3521 20	epp2 	pr4|16,*		tolts_util_$get_ttl_date
002042  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 212
      call tolts_util_$on_off (pname, "on", ttl_date);

002043  aa   776572 2350 04	lda  	-646,ic		000635 = 157156040000
002044  aa  6 02003 7551 00	sta  	pr6|1027
002045  aa   776427 3520 04	epp2 	-745,ic		000474 = 151163157154
002046  aa  6 02020 2521 00	spri2	pr6|1040
002047  aa  6 02003 3521 00	epp2 	pr6|1027
002050  aa  6 02022 2521 00	spri2	pr6|1042
002051  aa  6 00242 3521 00	epp2 	pr6|162		ttl_date
002052  aa  6 02024 2521 00	spri2	pr6|1044
002053  aa  6 02016 6211 00	eax1 	pr6|1038
002054  aa   014000 4310 07	fld  	6144,dl
002055  aa  6 00044 3701 20	epp4 	pr6|36,*
002056  la  4 00044 3521 20	epp2 	pr4|36,*		tolts_util_$on_off
002057  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 216
      call isolts_err_log_$init (code);

002060  aa  6 00100 3521 00	epp2 	pr6|64		code
002061  aa  6 02006 2521 00	spri2	pr6|1030
002062  aa  6 02004 6211 00	eax1 	pr6|1028
002063  aa   004000 4310 07	fld  	2048,dl
002064  aa  6 00044 3701 20	epp4 	pr6|36,*
002065  la  4 00050 3521 20	epp2 	pr4|40,*		isolts_err_log_$init
002066  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 217
      if code ^= 0 then				/* if problem */
         go to t_off;

002067  aa  6 00100 2361 00	ldq  	pr6|64		code
002070  aa   000741 6010 04	tnz  	481,ic		003031
						STATEMENT 1 ON LINE 229
      term = "0"b;

002071  aa  6 00114 4501 00	stz  	pr6|76		term
						STATEMENT 1 ON LINE 230
      do while (^term);

002072  aa  6 00114 2351 00	lda  	pr6|76		term
002073  aa   000736 6010 04	tnz  	478,ic		003031
						STATEMENT 1 ON LINE 231
         call ioa_ ("^/***enter ""test cpu <tag>"", "" display_error"", ""test pcd"", ""msg"", or ""quit """);

002074  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
002075  aa   777544 00 0114	desc9a	-156,76		001640 = 136057052052
002076  aa  6 02026 00 0114	desc9a	pr6|1046,76
002077  aa  6 02026 3521 00	epp2 	pr6|1046
002100  aa  6 02012 2521 00	spri2	pr6|1034
002101  aa   776533 3520 04	epp2 	-677,ic		000634 = 524000000114
002102  aa  6 02014 2521 00	spri2	pr6|1036
002103  aa  6 02010 6211 00	eax1 	pr6|1032
002104  aa   004000 4310 07	fld  	2048,dl
002105  aa  6 00044 3701 20	epp4 	pr6|36,*
002106  la  4 00102 3521 20	epp2 	pr4|66,*		ioa_
002107  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 235
ask:
         call tolts_util_$query ("??? ", com_string, c_len, args, cmd_cnt);

002110  aa   776523 2350 04	lda  	-685,ic		000633 = 077077077040
002111  aa  6 02003 7551 00	sta  	pr6|1027
002112  aa  6 02003 3521 00	epp2 	pr6|1027
002113  aa  6 02054 2521 00	spri2	pr6|1068
002114  aa  6 00173 3521 00	epp2 	pr6|123		com_string
002115  aa  6 02056 2521 00	spri2	pr6|1070
002116  aa  6 00656 3521 00	epp2 	pr6|430		c_len
002117  aa  6 02060 2521 00	spri2	pr6|1072
002120  aa  6 00247 3521 00	epp2 	pr6|167		args
002121  aa  6 02062 2521 00	spri2	pr6|1074
002122  aa  6 00651 3521 00	epp2 	pr6|425		cmd_cnt
002123  aa  6 02064 2521 00	spri2	pr6|1076
002124  aa   776506 3520 04	epp2 	-698,ic		000632 = 524000000004
002125  aa  6 02066 2521 00	spri2	pr6|1078
002126  aa   776503 3520 04	epp2 	-701,ic		000631 = 524000000204
002127  aa  6 02070 2521 00	spri2	pr6|1080
002130  aa   776500 3520 04	epp2 	-704,ic		000630 = 404000000021
002131  aa  6 02072 2521 00	spri2	pr6|1082
002132  aa  6 02076 2521 00	spri2	pr6|1086
002133  aa   776654 3520 04	epp2 	-596,ic		001007 = 530100000034
002134  aa  6 02074 2521 00	spri2	pr6|1084
002135  aa  6 02052 6211 00	eax1 	pr6|1066
002136  aa   024000 4310 07	fld  	10240,dl
002137  aa  6 00044 3701 20	epp4 	pr6|36,*
002140  la  4 00036 3521 20	epp2 	pr4|30,*		tolts_util_$query
002141  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 237
         if args (1) = "quit" | args (1) = "q" then	/* user wants to quit */
	  term = "1"b;

002142  aa  6 00246 7271 00	lxl7 	pr6|166		args
002143  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
002144  aa  6 00247 00 0017	desc9a	pr6|167,x7	args
002145  aa   776474 00 0004	desc9a	-708,4		000637 = 161165151164
002146  aa   000006 6000 04	tze  	6,ic		002154
002147  aa  6 00246 7271 00	lxl7 	pr6|166		args
002150  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
002151  aa  6 00247 00 0017	desc9a	pr6|167,x7	args
002152  aa   007020 00 0001	desc9a	3600,1		011170 = 161000000000
002153  aa   000004 6010 04	tnz  	4,ic		002157
002154  aa   400000 2350 03	lda  	131072,du
002155  aa  6 00114 7551 00	sta  	pr6|76		term
002156  aa   000646 7100 04	tra  	422,ic		003024
						STATEMENT 1 ON LINE 239
         else if args (1) = "msg" then			/* user wants to send a msg to the operator */
	  call tolts_util_$opr_msg;

002157  aa  6 00246 7271 00	lxl7 	pr6|166		args
002160  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
002161  aa  6 00247 00 0017	desc9a	pr6|167,x7	args
002162  aa   776447 00 0003	desc9a	-729,3		000627 = 155163147000
002163  aa   000007 6010 04	tnz  	7,ic		002172
002164  aa  6 00056 6211 00	eax1 	pr6|46
002165  aa   000000 4310 07	fld  	0,dl
002166  aa  6 00044 3701 20	epp4 	pr6|36,*
002167  la  4 00046 3521 20	epp2 	pr4|38,*		tolts_util_$opr_msg
002170  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
002171  aa   000633 7100 04	tra  	411,ic		003024
						STATEMENT 1 ON LINE 241
         else if args (1) = "display_error" | args (1) = "display"
	| args (1) = "derr" then do;

002172  aa  6 00246 7271 00	lxl7 	pr6|166		args
002173  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
002174  aa  6 00247 00 0017	desc9a	pr6|167,x7	args
002175  aa   776610 00 0015	desc9a	-632,13		001003 = 144151163160
002176  aa   000013 6000 04	tze  	11,ic		002211
002177  aa  6 00246 7271 00	lxl7 	pr6|166		args
002200  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
002201  aa  6 00247 00 0017	desc9a	pr6|167,x7	args
002202  aa   776530 00 0007	desc9a	-680,7		000730 = 144151163160
002203  aa   000006 6000 04	tze  	6,ic		002211
002204  aa  6 00246 7271 00	lxl7 	pr6|166		args
002205  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
002206  aa  6 00247 00 0017	desc9a	pr6|167,x7	args
002207  aa   776421 00 0004	desc9a	-751,4		000626 = 144145162162
002210  aa   000075 6010 04	tnz  	61,ic		002305
						STATEMENT 1 ON LINE 243
	  do i = 2 to cmd_cnt by 1;

002211  aa  6 00651 2361 00	ldq  	pr6|425		cmd_cnt
002212  aa  6 01703 7561 00	stq  	pr6|963
002213  aa   000002 2360 07	ldq  	2,dl
002214  aa  6 00653 7561 00	stq  	pr6|427		i
002215  aa   000000 0110 03	nop  	0,du
002216  aa  6 00653 2361 00	ldq  	pr6|427		i
002217  aa  6 01703 1161 00	cmpq 	pr6|963
002220  aa   000020 6054 04	tpnz 	16,ic		002240
						STATEMENT 1 ON LINE 245
	     if args (i) = "-type" then do;

002221  aa   000003 7360 00	qls  	3
002222  aa  6 00237 3735 06	epp7 	pr6|159,ql	args
002223  aa  7 77777 7271 00	lxl7 	pr7|-1		args
002224  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
002225  aa  7 00000 00 0017	desc9a	pr7|0,x7		args
002226  aa   776502 00 0005	desc9a	-702,5		000726 = 055164171160
002227  aa  6 02003 7561 00	stq  	pr6|1027
002230  aa   000006 6010 04	tnz  	6,ic		002236
						STATEMENT 1 ON LINE 246
	        p_err = "0"b;

002231  aa  6 00044 3701 20	epp4 	pr6|36,*
002232  ia  4 00010 4501 00	stz  	pr4|8		p_err
						STATEMENT 1 ON LINE 247
	        args (i) = "";

002233  aa  6 00236 4501 06	stz  	pr6|158,ql	args
						STATEMENT 1 ON LINE 248
	        cmd_cnt = cmd_cnt - 1;

002234  aa   000001 3360 07	lcq  	1,dl
002235  aa  6 00651 0561 00	asq  	pr6|425		cmd_cnt
						STATEMENT 1 ON LINE 249
	     end;

						STATEMENT 1 ON LINE 250
	  end;

002236  aa  6 00653 0541 00	aos  	pr6|427		i
002237  aa   777757 7100 04	tra  	-17,ic		002216
						STATEMENT 1 ON LINE 251
	  cmd_cnt = cmd_cnt - 1;

002240  aa   000001 3360 07	lcq  	1,dl
002241  aa  6 00651 0561 00	asq  	pr6|425		cmd_cnt
						STATEMENT 1 ON LINE 252
	  if ^display_log () then			/* go display requested log entries */

bad_rsp:	     call com_err_ (0, pname, "invalid response - ""^a""", com_string);

002242  aa  6 02003 3521 00	epp2 	pr6|1027
002243  aa  6 02012 2521 00	spri2	pr6|1034
002244  aa  6 02010 6211 00	eax1 	pr6|1032
002245  aa   004000 4310 07	fld  	2048,dl
002246  aa   005575 3520 04	epp2 	2941,ic		010043 = 000140627000
002247  aa  0 00625 7001 00	tsx0 	pr0|405		call_int_this
002250  aa  6 02003 2351 00	lda  	pr6|1027
002251  aa   400000 3150 03	cana 	131072,du
002252  aa   777636 6010 04	tnz  	-98,ic		002110
002253  aa  6 02003 4501 00	stz  	pr6|1027
002254  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
002255  aa   776617 00 0030	desc9a	-625,24		001073 = 151156166141
002256  aa  6 02010 00 0030	desc9a	pr6|1032,24
002257  aa  6 02003 3521 00	epp2 	pr6|1027
002260  aa  6 02030 2521 00	spri2	pr6|1048
002261  aa   776213 3520 04	epp2 	-885,ic		000474 = 151163157154
002262  aa  6 02032 2521 00	spri2	pr6|1050
002263  aa  6 02010 3521 00	epp2 	pr6|1032
002264  aa  6 02034 2521 00	spri2	pr6|1052
002265  aa  6 00173 3521 00	epp2 	pr6|123		com_string
002266  aa  6 02036 2521 00	spri2	pr6|1054
002267  aa   776336 3520 04	epp2 	-802,ic		000625 = 404000000005
002270  aa  6 02040 2521 00	spri2	pr6|1056
002271  aa   776333 3520 04	epp2 	-805,ic		000624 = 526000000006
002272  aa  6 02042 2521 00	spri2	pr6|1058
002273  aa   776330 3520 04	epp2 	-808,ic		000623 = 524000000027
002274  aa  6 02044 2521 00	spri2	pr6|1060
002275  aa   776334 3520 04	epp2 	-804,ic		000631 = 524000000204
002276  aa  6 02046 2521 00	spri2	pr6|1062
002277  aa  6 02026 6211 00	eax1 	pr6|1046
002300  aa   020000 4310 07	fld  	8192,dl
002301  aa  6 00044 3701 20	epp4 	pr6|36,*
002302  la  4 00104 3521 20	epp2 	pr4|68,*		com_err_
002303  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 255
	  go to ask;

002304  aa   777604 7100 04	tra  	-124,ic		002110
						STATEMENT 1 ON LINE 256
         end;

						STATEMENT 1 ON LINE 257
         else if cmd_cnt < 2 | args (1) ^= "test" then	/* bad input */
	  go to bad_rsp;

002305  aa  6 00651 2361 00	ldq  	pr6|425		cmd_cnt
002306  aa   000002 1160 07	cmpq 	2,dl
002307  aa   777744 6040 04	tmi  	-28,ic		002253
002310  aa  6 00246 7271 00	lxl7 	pr6|166		args
002311  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
002312  aa  6 00247 00 0017	desc9a	pr6|167,x7	args
002313  aa   776311 00 0004	desc9a	-823,4		000622 = 164145163164
002314  aa   777737 6010 04	tnz  	-33,ic		002253
						STATEMENT 1 ON LINE 259
         else if args (2) = "pcd" then do;

002315  aa  6 00256 7271 00	lxl7 	pr6|174		args
002316  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
002317  aa  6 00257 00 0017	desc9a	pr6|175,x7	args
002320  aa   776303 00 0003	desc9a	-829,3		000621 = 160143144000
002321  aa   000054 6010 04	tnz  	44,ic		002375
						STATEMENT 1 ON LINE 260
	  if cmd_cnt = 3 then call tolts_pcd_ ("isolts", (args (3)));

002322  aa   000003 1160 07	cmpq 	3,dl
002323  aa   000031 6010 04	tnz  	25,ic		002354
002324  aa  6 00266 2361 00	ldq  	pr6|182		args
002325  aa   524000 2760 03	orq  	174080,du
002326  aa  6 02003 7561 00	stq  	pr6|1027
002327  aa   776375 2370 04	ldaq 	-771,ic		000724 = 151163157154 164163000000
002330  aa  6 02100 7571 00	staq 	pr6|1088
002331  aa  6 00266 2361 00	ldq  	pr6|182		args
002332  aa  0 00551 7001 00	tsx0 	pr0|361		alloc_char_temp
002333  aa  6 02032 2521 00	spri2	pr6|1050
002334  aa  6 00266 7271 00	lxl7 	pr6|182		args
002335  aa  040 140 100 540	mlr  	(pr,rl),(pr,rl),fill(040)
002336  aa  6 00267 00 0017	desc9a	pr6|183,x7	args
002337  aa  2 00000 00 0006	desc9a	pr2|0,ql
002340  aa  6 02100 3521 00	epp2 	pr6|1088
002341  aa  6 02030 2521 00	spri2	pr6|1048
002342  aa   776256 3520 04	epp2 	-850,ic		000620 = 524000000006
002343  aa  6 02034 2521 00	spri2	pr6|1052
002344  aa  6 02003 3521 00	epp2 	pr6|1027
002345  aa  6 02036 2521 00	spri2	pr6|1054
002346  aa  6 02026 6211 00	eax1 	pr6|1046
002347  aa   010000 4310 07	fld  	4096,dl
002350  aa  6 00044 3701 20	epp4 	pr6|36,*
002351  la  4 00032 3521 20	epp2 	pr4|26,*		tolts_pcd_
002352  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
002353  aa   000451 7100 04	tra  	297,ic		003024
						STATEMENT 1 ON LINE 261
	  else call tolts_pcd_ ("isolts", "");

002354  aa  0 01014 7001 00	tsx0 	pr0|524		shorten_stack
002355  aa   776347 2370 04	ldaq 	-793,ic		000724 = 151163157154 164163000000
002356  aa  6 02102 7571 00	staq 	pr6|1090
002357  aa  6 02102 3521 00	epp2 	pr6|1090
002360  aa  6 02030 2521 00	spri2	pr6|1048
002361  aa  6 02003 3521 00	epp2 	pr6|1027
002362  aa  6 02032 2521 00	spri2	pr6|1050
002363  aa   776235 3520 04	epp2 	-867,ic		000620 = 524000000006
002364  aa  6 02034 2521 00	spri2	pr6|1052
002365  aa   776232 3520 04	epp2 	-870,ic		000617 = 524000000000
002366  aa  6 02036 2521 00	spri2	pr6|1054
002367  aa  6 02026 6211 00	eax1 	pr6|1046
002370  aa   010000 4310 07	fld  	4096,dl
002371  aa  6 00044 3701 20	epp4 	pr6|36,*
002372  la  4 00032 3521 20	epp2 	pr4|26,*		tolts_pcd_
002373  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 262
         end;

002374  aa   000430 7100 04	tra  	280,ic		003024
						STATEMENT 1 ON LINE 263
         else if args (2) ^= "cpu" then			/* user goofed */
	  go to bad_rsp;

002375  aa  6 00256 7271 00	lxl7 	pr6|174		args
002376  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
002377  aa  6 00257 00 0017	desc9a	pr6|175,x7	args
002400  aa   776220 00 0003	desc9a	-880,3		000616 = 143160165000
002401  aa   777652 6010 04	tnz  	-86,ic		002253
						STATEMENT 1 ON LINE 265
         else do;

						STATEMENT 1 ON LINE 266
	  trace_sw = "0"b;

002402  aa  6 00124 4501 00	stz  	pr6|84		trace_sw
						STATEMENT 1 ON LINE 267
	  if cmd_cnt < 3 then			/* not enough args */
	     go to bad_rsp;

002403  aa   000003 1160 07	cmpq 	3,dl
002404  aa   777647 6040 04	tmi  	-89,ic		002253
						STATEMENT 1 ON LINE 269
	  cpu_tag = search ("abcdefgh", args (3));

002405  aa   776315 3520 04	epp2 	-819,ic		000722 = 141142143144
002406  aa   000010 2360 07	ldq  	8,dl
002407  aa  6 00267 3515 00	epp1 	pr6|183		args
002410  aa  1 77777 2351 00	lda  	pr1|-1		args
002411  aa  0 01245 7001 00	tsx0 	pr0|677		search_eis
002412  aa  6 00101 7561 00	stq  	pr6|65		cpu_tag
						STATEMENT 1 ON LINE 270
	  if cpu_tag = 0 then			/* not correct format */
	     go to bad_rsp;

002413  aa   777640 6000 04	tze  	-96,ic		002253
						STATEMENT 1 ON LINE 272
	  term = "0"b;

002414  aa  6 00114 4501 00	stz  	pr6|76		term
						STATEMENT 1 ON LINE 273
	  scu_tag = -1;

002415  aa   000001 3360 07	lcq  	1,dl
002416  aa  6 00102 7561 00	stq  	pr6|66		scu_tag
						STATEMENT 1 ON LINE 274
	  if cmd_cnt > 3 then do;

002417  aa  6 00651 2361 00	ldq  	pr6|425		cmd_cnt
002420  aa   000003 1160 07	cmpq 	3,dl
002421  aa   000075 6044 04	tmoz 	61,ic		002516
						STATEMENT 1 ON LINE 275
	     trm = "0"b;

002422  aa  6 00115 4501 00	stz  	pr6|77		trm
						STATEMENT 1 ON LINE 276
	     do i = 4 to cmd_cnt;

002423  aa  6 01704 7561 00	stq  	pr6|964
002424  aa   000004 2360 07	ldq  	4,dl
002425  aa  6 00653 7561 00	stq  	pr6|427		i
002426  aa  6 00653 2361 00	ldq  	pr6|427		i
002427  aa  6 01704 1161 00	cmpq 	pr6|964
002430  aa   000066 6054 04	tpnz 	54,ic		002516
						STATEMENT 1 ON LINE 277
	        if ^trm then			/* if tag flag not set */
		 if args (i) = "-memory"
		  | args (i) = "-mem" then trm = "1"b;

002431  aa  6 00115 2351 00	lda  	pr6|77		trm
002432  aa   000046 6010 04	tnz  	38,ic		002500
002433  aa   000003 7360 00	qls  	3
002434  aa  6 00237 3735 06	epp7 	pr6|159,ql	args
002435  aa  7 77777 7271 00	lxl7 	pr7|-1		args
002436  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
002437  aa  7 00000 00 0017	desc9a	pr7|0,x7		args
002440  aa   776262 00 0007	desc9a	-846,7		000720 = 055155145155
002441  aa  6 02003 7561 00	stq  	pr6|1027
002442  aa   000006 6000 04	tze  	6,ic		002450
002443  aa  7 77777 7271 00	lxl7 	pr7|-1		args
002444  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
002445  aa  7 00000 00 0017	desc9a	pr7|0,x7		args
002446  aa   776254 00 0004	desc9a	-852,4		000720 = 055155145155
002447  aa   000004 6010 04	tnz  	4,ic		002453
002450  aa   400000 2350 03	lda  	131072,du
002451  aa  6 00115 7551 00	sta  	pr6|77		trm
002452  aa   000042 7100 04	tra  	34,ic		002514
						STATEMENT 1 ON LINE 280
		 else if args (i) = "-brief"
		  | args (i) = "-bf" then bf_sw = "1"b;

002453  aa  7 77777 7271 00	lxl7 	pr7|-1		args
002454  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
002455  aa  7 00000 00 0017	desc9a	pr7|0,x7		args
002456  aa   776242 00 0006	desc9a	-862,6		000716 = 055142162151
002457  aa   000006 6000 04	tze  	6,ic		002465
002460  aa  7 77777 7271 00	lxl7 	pr7|-1		args
002461  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
002462  aa  7 00000 00 0017	desc9a	pr7|0,x7		args
002463  aa   776134 00 0003	desc9a	-932,3		000615 = 055142146000
002464  aa   000004 6010 04	tnz  	4,ic		002470
002465  aa   400000 2350 03	lda  	131072,du
002466  aa  6 00110 7551 00	sta  	pr6|72		bf_sw
002467  aa   000025 7100 04	tra  	21,ic		002514
						STATEMENT 1 ON LINE 282
		 else if args (i) = "-trace" then	/* user wants to trace action codes */
		    trace_sw = "1"b;

002470  aa  7 77777 7271 00	lxl7 	pr7|-1		args
002471  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
002472  aa  7 00000 00 0017	desc9a	pr7|0,x7		args
002473  aa   776223 00 0006	desc9a	-877,6		000714 = 055164162141
002474  aa   777557 6010 04	tnz  	-145,ic		002253
002475  aa   400000 2350 03	lda  	131072,du
002476  aa  6 00124 7551 00	sta  	pr6|84		trace_sw
002477  aa   000015 7100 04	tra  	13,ic		002514
						STATEMENT 1 ON LINE 285
	        else do;

						STATEMENT 1 ON LINE 286
		 scu_tag = search ("abcdefgh", args (i));

002500  aa   000003 7360 00	qls  	3
002501  aa   776221 3520 04	epp2 	-879,ic		000722 = 141142143144
002502  aa   000000 6270 06	eax7 	0,ql
002503  aa   000010 2360 07	ldq  	8,dl
002504  aa  6 00237 3515 17	epp1 	pr6|159,7		args
002505  aa  1 77777 2351 00	lda  	pr1|-1		args
002506  aa  0 01245 7001 00	tsx0 	pr0|677		search_eis
002507  aa  6 00102 7561 00	stq  	pr6|66		scu_tag
						STATEMENT 1 ON LINE 287
		 if scu_tag = 0 then		/* did not find tag */
		    go to bad_rsp;

002510  aa   777543 6000 04	tze  	-157,ic		002253
						STATEMENT 1 ON LINE 289
		 else scu_tag = scu_tag - 1;

002511  aa   000001 3360 07	lcq  	1,dl
002512  aa  6 00102 0561 00	asq  	pr6|66		scu_tag
						STATEMENT 1 ON LINE 290
		 trm = "0"b;

002513  aa  6 00115 4501 00	stz  	pr6|77		trm
						STATEMENT 1 ON LINE 291
	        end;

						STATEMENT 1 ON LINE 292
	     end;

002514  aa  6 00653 0541 00	aos  	pr6|427		i
002515  aa   777711 7100 04	tra  	-55,ic		002426
						STATEMENT 1 ON LINE 293
	  end;

						STATEMENT 1 ON LINE 295
	  cpu_cardp = null;

002516  aa   776174 2370 04	ldaq 	-900,ic		000712 = 077777000043 000001000000
002517  aa  6 00736 7571 00	staq 	pr6|478		cpu_cardp
						STATEMENT 1 ON LINE 296
	  do while (^term);

002520  aa  6 00114 2351 00	lda  	pr6|76		term
002521  aa   000163 6010 04	tnz  	115,ic		002704
						STATEMENT 1 ON LINE 297
	     call tolts_util_$find_card ("cpu", cpu_cardp);

002522  aa   776072 2350 04	lda  	-966,ic		000614 = 143160165040
002523  aa  6 02003 7551 00	sta  	pr6|1027
002524  aa  6 02003 3521 00	epp2 	pr6|1027
002525  aa  6 02012 2521 00	spri2	pr6|1034
002526  aa  6 00736 3521 00	epp2 	pr6|478		cpu_cardp
002527  aa  6 02014 2521 00	spri2	pr6|1036
002530  aa  6 02010 6211 00	eax1 	pr6|1032
002531  aa   010000 4310 07	fld  	4096,dl
002532  aa  6 00044 3701 20	epp4 	pr6|36,*
002533  la  4 00034 3521 20	epp2 	pr4|28,*		tolts_util_$find_card
002534  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 298
	     if cpu_cardp = null then term = "1"b;

002535  aa  6 00736 2371 00	ldaq 	pr6|478		cpu_cardp
002536  aa   776154 6770 04	eraq 	-916,ic		000712 = 077777000043 000001000000
002537  aa  0 00460 3771 00	anaq 	pr0|304		= 077777000077 777777077077
002540  aa   000004 6010 04	tnz  	4,ic		002544
002541  aa   400000 2350 03	lda  	131072,du
002542  aa  6 00114 7551 00	sta  	pr6|76		term
002543  aa   777755 7100 04	tra  	-19,ic		002520
						STATEMENT 1 ON LINE 299
	     else if cpu_card.tag = cpu_tag then do;

002544  aa  6 00736 3735 20	epp7 	pr6|478,*		cpu_cardp
002545  aa  7 00001 2361 00	ldq  	pr7|1		cpu_card.tag
002546  aa  6 00101 1161 00	cmpq 	pr6|65		cpu_tag
002547  aa   777751 6010 04	tnz  	-23,ic		002520
						STATEMENT 1 ON LINE 300
	        if cpu_card.type ^= "l68"
	         & substr (type, 1, 3) ^= "dps" then do;

002550  aa   776043 2350 04	lda  	-989,ic		000613 = 154066070000
002551  aa  0 00446 2771 00	oraq 	pr0|294		= 000000000040 040040040040
002552  aa  0 00110 3771 00	anaq 	pr0|72		= 777777777777 000000000000
002553  aa  7 00004 1151 00	cmpa 	pr7|4		cpu_card.type
002554  aa   000123 6000 04	tze  	83,ic		002677
002555  aa  7 00004 2351 00	lda  	pr7|4		cpu_card.type
002556  aa  0 00066 3771 00	anaq 	pr0|54		= 777777777000 000000000000
002557  aa   776033 1150 04	cmpa 	-997,ic		000612 = 144160163000
002560  aa   000117 6000 04	tze  	79,ic		002677
						STATEMENT 1 ON LINE 302
		 call ioa_ ("isolts_: unable to determine cpu type for cpu ^a", tags (cpu_tag - 1));

002561  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
002562  aa   776513 00 0060	desc9a	-693,48		001274 = 151163157154
002563  aa  6 02026 00 0060	desc9a	pr6|1046,48
002564  aa  6 02026 3521 00	epp2 	pr6|1046
002565  aa  6 02054 2521 00	spri2	pr6|1068
002566  aa  6 00101 7271 00	lxl7 	pr6|65		cpu_tag
002567  aa   000003 6270 17	eax7 	3,7
002570  ta   000471 3520 00	epp2 	313
002571  aa  2 00000 5005 17	a9bd 	pr2|0,7
002572  aa  6 02056 2521 00	spri2	pr6|1070
002573  aa   776016 3520 04	epp2 	-1010,ic		000611 = 524000000060
002574  aa  6 02060 2521 00	spri2	pr6|1072
002575  aa   776013 3520 04	epp2 	-1013,ic		000610 = 526000000001
002576  aa  6 02062 2521 00	spri2	pr6|1074
002577  aa  6 02052 6211 00	eax1 	pr6|1066
002600  aa   010000 4310 07	fld  	4096,dl
002601  aa  6 00044 3701 20	epp4 	pr6|36,*
002602  la  4 00102 3521 20	epp2 	pr4|66,*		ioa_
002603  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 303
reask:		 call tolts_util_$query ("enter l68 or dps8 ", com_string, c_len, args, cmd_cnt);

002604  aa   776240 2370 04	ldaq 	-864,ic		001044 = 145156164145 162040154066
002605  aa  6 02010 7571 00	staq 	pr6|1032
002606  aa   776240 2370 04	ldaq 	-864,ic		001046 = 070040157162 040144160163
002607  aa  6 02012 7571 00	staq 	pr6|1034
002610  aa   070040 2350 03	lda  	28704,du
002611  aa  6 02014 7551 00	sta  	pr6|1036
002612  aa  6 02010 3521 00	epp2 	pr6|1032
002613  aa  6 02054 2521 00	spri2	pr6|1068
002614  aa  6 00173 3521 00	epp2 	pr6|123		com_string
002615  aa  6 02056 2521 00	spri2	pr6|1070
002616  aa  6 00656 3521 00	epp2 	pr6|430		c_len
002617  aa  6 02060 2521 00	spri2	pr6|1072
002620  aa  6 00247 3521 00	epp2 	pr6|167		args
002621  aa  6 02062 2521 00	spri2	pr6|1074
002622  aa  6 00651 3521 00	epp2 	pr6|425		cmd_cnt
002623  aa  6 02064 2521 00	spri2	pr6|1076
002624  aa   775763 3520 04	epp2 	-1037,ic		000607 = 524000000022
002625  aa  6 02066 2521 00	spri2	pr6|1078
002626  aa   776003 3520 04	epp2 	-1021,ic		000631 = 524000000204
002627  aa  6 02070 2521 00	spri2	pr6|1080
002630  aa   776000 3520 04	epp2 	-1024,ic		000630 = 404000000021
002631  aa  6 02072 2521 00	spri2	pr6|1082
002632  aa  6 02076 2521 00	spri2	pr6|1086
002633  aa   776154 3520 04	epp2 	-916,ic		001007 = 530100000034
002634  aa  6 02074 2521 00	spri2	pr6|1084
002635  aa  6 02052 6211 00	eax1 	pr6|1066
002636  aa   024000 4310 07	fld  	10240,dl
002637  aa  6 00044 3701 20	epp4 	pr6|36,*
002640  la  4 00036 3521 20	epp2 	pr4|30,*		tolts_util_$query
002641  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 304
		 if args (1) = "l68 "
		  | args (1) = "dps8" then cpu_type = args (1);

002642  aa  6 00246 7271 00	lxl7 	pr6|166		args
002643  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
002644  aa  6 00247 00 0017	desc9a	pr6|167,x7	args
002645  aa   775743 00 0004	desc9a	-1053,4		000606 = 154066070040
002646  aa   000006 6000 04	tze  	6,ic		002654
002647  aa  6 00246 7271 00	lxl7 	pr6|166		args
002650  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
002651  aa  6 00247 00 0017	desc9a	pr6|167,x7	args
002652  aa   775735 00 0004	desc9a	-1059,4		000605 = 144160163070
002653  aa   000006 6010 04	tnz  	6,ic		002661
002654  aa  6 00246 7271 00	lxl7 	pr6|166		args
002655  aa  040 100 100 540	mlr  	(pr,rl),(pr),fill(040)
002656  aa  6 00247 00 0017	desc9a	pr6|167,x7	args
002657  aa  6 00113 00 0004	desc9a	pr6|75,4		cpu_type
002660  aa   000021 7100 04	tra  	17,ic		002701
						STATEMENT 1 ON LINE 306
		 else do;

						STATEMENT 1 ON LINE 307
		    call ioa_ ("isolts_: invalid input pls reenter.");

002661  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
002662  aa   776337 00 0044	desc9a	-801,36		001220 = 151163157154
002663  aa  6 02026 00 0044	desc9a	pr6|1046,36
002664  aa  6 02026 3521 00	epp2 	pr6|1046
002665  aa  6 02012 2521 00	spri2	pr6|1034
002666  aa   775716 3520 04	epp2 	-1074,ic		000604 = 524000000043
002667  aa  6 02014 2521 00	spri2	pr6|1036
002670  aa  6 02010 6211 00	eax1 	pr6|1032
002671  aa   004000 4310 07	fld  	2048,dl
002672  aa  6 00044 3701 20	epp4 	pr6|36,*
002673  la  4 00102 3521 20	epp2 	pr4|66,*		ioa_
002674  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 308
		    goto reask;

002675  aa   777707 7100 04	tra  	-57,ic		002604
						STATEMENT 1 ON LINE 309
		 end;

						STATEMENT 1 ON LINE 310
	        end;

002676  aa   000003 7100 04	tra  	3,ic		002701
						STATEMENT 1 ON LINE 311
	        else cpu_type = cpu_card.type;

002677  aa  7 00004 2351 00	lda  	pr7|4		cpu_card.type
002700  aa  6 00113 7551 00	sta  	pr6|75		cpu_type
						STATEMENT 1 ON LINE 312
	        term = "1"b;

002701  aa   400000 2350 03	lda  	131072,du
002702  aa  6 00114 7551 00	sta  	pr6|76		term
						STATEMENT 1 ON LINE 313
	     end;

						STATEMENT 1 ON LINE 314
	  end;

002703  aa   777615 7100 04	tra  	-115,ic		002520
						STATEMENT 1 ON LINE 315
	  cpu_tag = cpu_tag - 1;

002704  aa   000001 3360 07	lcq  	1,dl
002705  aa  6 00101 0561 00	asq  	pr6|65		cpu_tag
						STATEMENT 1 ON LINE 319
	  call tandd_$check_isolts_resources (cpu_tag, scu_tag, cpu_port, code);

002706  aa  6 00101 3521 00	epp2 	pr6|65		cpu_tag
002707  aa  6 02030 2521 00	spri2	pr6|1048
002710  aa  6 00102 3521 00	epp2 	pr6|66		scu_tag
002711  aa  6 02032 2521 00	spri2	pr6|1050
002712  aa  6 00103 3521 00	epp2 	pr6|67		cpu_port
002713  aa  6 02034 2521 00	spri2	pr6|1052
002714  aa  6 00100 3521 00	epp2 	pr6|64		code
002715  aa  6 02036 2521 00	spri2	pr6|1054
002716  aa  6 02026 6211 00	eax1 	pr6|1046
002717  aa   020000 4310 07	fld  	8192,dl
002720  aa  6 00044 3701 20	epp4 	pr6|36,*
002721  la  4 00022 3521 20	epp2 	pr4|18,*		tandd_$check_isolts_resources
002722  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 320
	  if code ^= 0 then do;

002723  aa  6 00100 2361 00	ldq  	pr6|64		code
002724  aa   000004 6000 04	tze  	4,ic		002730
						STATEMENT 1 ON LINE 321
	     call abort (code);

002725  aa   006227 3520 04	epp2 	3223,ic		011154 = 000002000000
002726  aa   005314 6700 04	tsp4 	2764,ic		010242
						STATEMENT 1 ON LINE 322
	     go to cmd_loop;

002727  aa   000075 7100 04	tra  	61,ic		003024
						STATEMENT 1 ON LINE 323
	  end;

						STATEMENT 1 ON LINE 324
	  isolate_cpu = "1"b;

002730  aa   400000 2350 03	lda  	131072,du
002731  aa  6 00044 3701 20	epp4 	pr6|36,*
002732  ia  4 00014 7551 00	sta  	pr4|12		isolate_cpu
						STATEMENT 1 ON LINE 328
	  if opr_com (cpu_tag, scu_tag) then		/* if permission denied */
	     go to cmd_loop;

002733  aa   006211 3520 04	epp2 	3209,ic		011144 = 000006000000
002734  aa   004215 6700 04	tsp4 	2189,ic		007151
002735  aa  6 02003 2351 00	lda  	pr6|1027
002736  aa   400000 3150 03	cana 	131072,du
002737  aa   000065 6010 04	tnz  	53,ic		003024
						STATEMENT 1 ON LINE 333
	  call tandd_$create_cpu_test_env (cpu_tag, scu_tag, switches, wseg_p, code);

002740  aa  6 00101 3521 00	epp2 	pr6|65		cpu_tag
002741  aa  6 02030 2521 00	spri2	pr6|1048
002742  aa  6 00102 3521 00	epp2 	pr6|66		scu_tag
002743  aa  6 02032 2521 00	spri2	pr6|1050
002744  aa  6 00104 3521 00	epp2 	pr6|68		switches
002745  aa  6 02034 2521 00	spri2	pr6|1052
002746  aa  6 00666 3521 00	epp2 	pr6|438		wseg_p
002747  aa  6 02036 2521 00	spri2	pr6|1054
002750  aa  6 00100 3521 00	epp2 	pr6|64		code
002751  aa  6 02040 2521 00	spri2	pr6|1056
002752  aa  6 02026 6211 00	eax1 	pr6|1046
002753  aa   024000 4310 07	fld  	10240,dl
002754  aa  6 00044 3701 20	epp4 	pr6|36,*
002755  la  4 00024 3521 20	epp2 	pr4|20,*		tandd_$create_cpu_test_env
002756  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 334
	  if code ^= 0 then do;

002757  aa  6 00100 2361 00	ldq  	pr6|64		code
002760  aa   000004 6000 04	tze  	4,ic		002764
						STATEMENT 1 ON LINE 335
	     call abort (code);

002761  aa   006173 3520 04	epp2 	3195,ic		011154 = 000002000000
002762  aa   005260 6700 04	tsp4 	2736,ic		010242
						STATEMENT 1 ON LINE 336
	     go to cmd_loop;

002763  aa   000041 7100 04	tra  	33,ic		003024
						STATEMENT 1 ON LINE 337
	  end;

						STATEMENT 1 ON LINE 338
	  call ioa_ ("^/reconfiguration complete");

002764  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
002765  aa   776133 00 0034	desc9a	-933,28		001117 = 136057162145
002766  aa  6 02016 00 0034	desc9a	pr6|1038,28
002767  aa  6 02016 3521 00	epp2 	pr6|1038
002770  aa  6 02012 2521 00	spri2	pr6|1034
002771  aa   775612 3520 04	epp2 	-1142,ic		000603 = 524000000032
002772  aa  6 02014 2521 00	spri2	pr6|1036
002773  aa  6 02010 6211 00	eax1 	pr6|1032
002774  aa   004000 4310 07	fld  	2048,dl
002775  aa  6 00044 3701 20	epp4 	pr6|36,*
002776  la  4 00102 3521 20	epp2 	pr4|66,*		ioa_
002777  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 340
	  hdr_p = addr (wseg.test_pgm);

003000  aa   100000 7270 07	lxl7 	32768,dl
003001  aa  6 00666 3735 77	epp7 	pr6|438,*7	wseg.test_pgm
003002  aa  6 00676 6535 00	spri7	pr6|446		hdr_p
						STATEMENT 1 ON LINE 341
	  wseg1 = 0;

003003  aa   000001 2360 07	ldq  	1,dl
003004  aa  6 01705 7561 00	stq  	pr6|965
003005  aa   000000 0110 03	nop  	0,du
003006  aa  6 01705 7271 00	lxl7 	pr6|965
003007  aa  6 00666 3735 20	epp7 	pr6|438,*		wseg_p
003010  aa  7 77777 4501 17	stz  	pr7|-1,7		wseg1
003011  aa  6 01705 2361 00	ldq  	pr6|965
003012  aa  6 01705 0541 00	aos  	pr6|965
003013  aa   200000 1160 07	cmpq 	65536,dl
003014  aa   777772 6040 04	tmi  	-6,ic		003006
						STATEMENT 1 ON LINE 342
	  restart = restart_label;

003015  aa   000003 3520 04	epp2 	3,ic		003020 = 600056621100
003016  aa  6 00720 2521 00	spri2	pr6|464		restart
003017  aa  6 00722 6521 00	spri6	pr6|466		restart
						STATEMENT 1 ON LINE 346
restart_label:					/* target of non-local gotos */
	  call run_pas;

003020  aa  6 00056 6211 00	eax1 	pr6|46
003021  aa   000000 4310 07	fld  	0,dl
003022  aa   000026 3520 04	epp2 	22,ic		003050 = 000640627000
003023  aa  0 00625 7001 00	tsx0 	pr0|405		call_int_this
						STATEMENT 1 ON LINE 348
         end;

						STATEMENT 1 ON LINE 349
cmd_loop: call clean_up;

003024  aa  6 00056 6211 00	eax1 	pr6|46
003025  aa   000000 4310 07	fld  	0,dl
003026  aa   002545 3520 04	epp2 	1381,ic		005573 = 000120627000
003027  aa  0 00625 7001 00	tsx0 	pr0|405		call_int_this
						STATEMENT 1 ON LINE 350
      end;

003030  aa   777042 7100 04	tra  	-478,ic		002072
						STATEMENT 1 ON LINE 354
t_off: call tolts_util_$on_off (pname, "off", ttl_date);

003031  aa   775551 2350 04	lda  	-1175,ic		000602 = 157146146000
003032  aa  6 02003 7551 00	sta  	pr6|1027
003033  aa   775441 3520 04	epp2 	-1247,ic		000474 = 151163157154
003034  aa  6 02020 2521 00	spri2	pr6|1040
003035  aa  6 02003 3521 00	epp2 	pr6|1027
003036  aa  6 02022 2521 00	spri2	pr6|1042
003037  aa  6 00242 3521 00	epp2 	pr6|162		ttl_date
003040  aa  6 02024 2521 00	spri2	pr6|1044
003041  aa  6 02016 6211 00	eax1 	pr6|1038
003042  aa   014000 4310 07	fld  	6144,dl
003043  aa  6 00044 3701 20	epp4 	pr6|36,*
003044  la  4 00044 3521 20	epp2 	pr4|36,*		tolts_util_$on_off
003045  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 355
      return;

003046  aa  0 00631 7101 00	tra  	pr0|409		return_mac
						STATEMENT 1 ON LINE 1218
   end isolts_;

BEGIN PROCEDURE run_pas
ENTRY TO run_pas                                            STATEMENT 1 ON LINE 362
run_pas: proc;

003047  da     000402200000
003050  aa   000640 6270 00	eax7 	416
003051  aa  7 00034 3521 20	epp2 	pr7|28,*
003052  aa  2 01047 2721 00	tsp2 	pr2|551		int_entry
003053  aa     000000000000
003054  aa     000000000000
						STATEMENT 1 ON LINE 364
      nxt_tst = first_pft;

003055  aa   775414 2350 04	lda  	-1268,ic		000471 = 060061143000
003056  aa  6 00040 3735 20	epp7 	pr6|32,*
003057  aa  7 00111 7551 00	sta  	pr7|73		nxt_tst
						STATEMENT 1 ON LINE 365
      awcp = addr (is_mbx.pgm_name);

003060  aa  7 00666 3715 20	epp5 	pr7|438,*		wseg_p
003061  aa  5 01173 3715 00	epp5 	pr5|635		wseg.pgm_name
003062  aa  7 00672 6515 00	spri5	pr7|442		awcp
						STATEMENT 1 ON LINE 366
      cont_pas = continue_pas;

003063  aa   000353 3520 04	epp2 	235,ic		003436 = 600040373520
003064  aa  7 00714 2521 00	spri2	pr7|460		cont_pas
003065  aa  7 00716 6521 00	spri6	pr7|462		cont_pas
						STATEMENT 1 ON LINE 367
      end_pas = end_tst;

003066  aa   001016 3520 04	epp2 	526,ic		004104 = 777114710004
003067  aa  7 00724 2521 00	spri2	pr7|468		end_pas
003070  aa  7 00726 6521 00	spri6	pr7|470		end_pas
						STATEMENT 1 ON LINE 368
      pgm_offset = 0;

003071  aa  7 00646 4501 00	stz  	pr7|422		pgm_offset
						STATEMENT 1 ON LINE 369
      trm, pas_sw, mess_in_prog, ntype, run, option, car_nz = "0"b;

003072  aa  7 00115 4501 00	stz  	pr7|77		trm
003073  aa  7 00117 4501 00	stz  	pr7|79		pas_sw
003074  aa  7 00120 4501 00	stz  	pr7|80		mess_in_prog
003075  aa  7 00121 4501 00	stz  	pr7|81		ntype
003076  aa  7 00122 4501 00	stz  	pr7|82		run
003077  aa  7 00123 4501 00	stz  	pr7|83		option
003100  aa   006042 2350 04	lda  	3106,ic		011142 = 377777777777
003101  aa  7 00127 3551 00	ansa 	pr7|87		car_nz
						STATEMENT 1 ON LINE 371
      dump_in_prog, idump = "0"b;

003102  aa  7 00125 4501 00	stz  	pr7|85		dump_in_prog
003103  aa  7 00126 4501 00	stz  	pr7|86		idump
						STATEMENT 1 ON LINE 375
      on quit begin;

003104  aa   000004 7260 07	lxl6 	4,dl
003105  aa   775532 3520 04	epp2 	-1190,ic		000637 = 161165151164
003106  aa  0 00717 7001 00	tsx0 	pr0|463		enable_op
003107  aa   000004 7100 04	tra  	4,ic		003113
003110  aa     000100000000
003111  aa   000062 7100 04	tra  	50,ic		003173
BEGIN CONDITION quit.3
ENTRY TO quit.3                                             STATEMENT 1 ON LINE 375
      on quit begin;

003112  da     000407200000
003113  aa   000120 6270 00	eax7 	80
003114  aa  7 00034 3521 20	epp2 	pr7|28,*
003115  aa  2 01047 2721 00	tsp2 	pr2|551		int_entry
003116  aa     000000000000
003117  aa     000000000000
						STATEMENT 1 ON LINE 377
         if pas_sw then do;

003120  aa  6 00040 3735 20	epp7 	pr6|32,*
003121  aa  7 00040 3735 20	epp7 	pr7|32,*
003122  aa  7 00117 2351 00	lda  	pr7|79		pas_sw
003123  aa   000041 6000 04	tze  	33,ic		003164
						STATEMENT 1 ON LINE 378
	  ntype = "0"b;

003124  aa  7 00121 4501 00	stz  	pr7|81		ntype
						STATEMENT 1 ON LINE 379
	  string (action_codes) = "0"b;

003125  aa  7 00666 3715 20	epp5 	pr7|438,*		wseg_p
003126  aa  5 01172 4501 00	stz  	pr5|634
						STATEMENT 1 ON LINE 380
	  if dump_in_prog & ^idump then do;

003127  aa  7 00125 2351 00	lda  	pr7|85		dump_in_prog
003130  aa   000006 6000 04	tze  	6,ic		003136
003131  aa  7 00126 2351 00	lda  	pr7|86		idump
003132  aa   000004 6010 04	tnz  	4,ic		003136
						STATEMENT 1 ON LINE 381
	     dump_in_prog = "0"b;

003133  aa  7 00125 4501 00	stz  	pr7|85		dump_in_prog
						STATEMENT 1 ON LINE 382
	     go to eopt;

003134  aa  7 00730 3521 00	epp2 	pr7|472		eopt
003135  aa  0 00660 7101 00	tra  	pr0|432		tra_ext_2
						STATEMENT 1 ON LINE 383
	  end;

						STATEMENT 1 ON LINE 384
	  if option then do;

003136  aa  7 00123 2351 00	lda  	pr7|83		option
003137  aa   000021 6000 04	tze  	17,ic		003160
						STATEMENT 1 ON LINE 385
	     call ioa_ ("^/");

003140  aa   136057 2350 03	lda  	48175,du
003141  aa  6 00100 7551 00	sta  	pr6|64
003142  aa  6 00100 3521 00	epp2 	pr6|64
003143  aa  6 00104 2521 00	spri2	pr6|68
003144  aa   775416 3520 04	epp2 	-1266,ic		000562 = 524000000002
003145  aa  6 00106 2521 00	spri2	pr6|70
003146  aa  6 00102 6211 00	eax1 	pr6|66
003147  aa   004000 4310 07	fld  	2048,dl
003150  la  4 00102 3521 20	epp2 	pr4|66,*		ioa_
003151  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 386
	     car_nz = "0"b;

003152  aa   005770 2350 04	lda  	3064,ic		011142 = 377777777777
003153  aa  6 00040 3735 20	epp7 	pr6|32,*
003154  aa  7 00040 3735 20	epp7 	pr7|32,*
003155  aa  7 00127 3551 00	ansa 	pr7|87		car_nz
						STATEMENT 1 ON LINE 387
	     go to eopt;

003156  aa  7 00730 3521 00	epp2 	pr7|472		eopt
003157  aa  0 00660 7101 00	tra  	pr0|432		tra_ext_2
						STATEMENT 1 ON LINE 388
	  end;

						STATEMENT 1 ON LINE 389
	  action_codes.halt = "1"b;

003160  aa   040000 2350 07	lda  	16384,dl
003161  aa  5 01172 2551 00	orsa 	pr5|634		wseg.halt
						STATEMENT 1 ON LINE 390
	  go to cont_pas;

003162  aa  7 00714 3521 00	epp2 	pr7|460		cont_pas
003163  aa  0 00660 7101 00	tra  	pr0|432		tra_ext_2
						STATEMENT 1 ON LINE 391
         end;

						STATEMENT 1 ON LINE 392
         else call continue_to_signal_ (code);

003164  aa  7 00100 3521 00	epp2 	pr7|64		code
003165  aa  6 00104 2521 00	spri2	pr6|68
003166  aa  6 00102 6211 00	eax1 	pr6|66
003167  aa   004000 4310 07	fld  	2048,dl
003170  la  4 00100 3521 20	epp2 	pr4|64,*		continue_to_signal_
003171  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 394
      end;

003172  aa  0 00631 7101 00	tra  	pr0|409		return_mac
  END CONDITION quit.3
						STATEMENT 1 ON LINE 396
      call ioa_ ("^/start pft ^a^/", nxt_tst);

003173  aa   775604 2350 04	lda  	-1148,ic		000777 = 136057163164
003174  aa   775604 2360 04	ldq  	-1148,ic		001000 = 141162164040
003175  aa  6 00170 7571 00	staq 	pr6|120
003176  aa   775603 2350 04	lda  	-1149,ic		001001 = 160146164040
003177  aa   775603 2360 04	ldq  	-1149,ic		001002 = 136141136057
003200  aa  6 00172 7571 00	staq 	pr6|122
003201  aa  6 00170 3521 00	epp2 	pr6|120
003202  aa  6 00176 2521 00	spri2	pr6|126
003203  aa  6 00040 3735 20	epp7 	pr6|32,*
003204  aa  7 00111 3521 00	epp2 	pr7|73		nxt_tst
003205  aa  6 00200 2521 00	spri2	pr6|128
003206  aa   775373 3520 04	epp2 	-1285,ic		000601 = 524000000020
003207  aa  6 00202 2521 00	spri2	pr6|130
003210  aa   775370 3520 04	epp2 	-1288,ic		000600 = 526000000003
003211  aa  6 00204 2521 00	spri2	pr6|132
003212  aa  6 00174 6211 00	eax1 	pr6|124
003213  aa   010000 4310 07	fld  	4096,dl
003214  aa  6 00044 3701 20	epp4 	pr6|36,*
003215  la  4 00102 3521 20	epp2 	pr4|66,*		ioa_
003216  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 398
      do while (^trm);

003217  aa   000000 0110 03	nop  	0,du
003220  aa  6 00040 3735 20	epp7 	pr6|32,*
003221  aa  7 00115 2351 00	lda  	pr7|77		trm
003222  aa   000663 6010 04	tnz  	435,ic		004105
						STATEMENT 1 ON LINE 402
         call tolts_util_$search (df_iocbp, "pas." || nxt_tst, t_ptr, c_len, code);

003223  aa  7 00111 2351 00	lda  	pr7|73		nxt_tst
003224  aa  0 00066 3771 00	anaq 	pr0|54		= 777777777000 000000000000
003225  aa   000044 7730 00	lrl  	36
003226  aa   775351 2750 04	ora  	-1303,ic		000577 = 160141163056
003227  aa  6 00206 7571 00	staq 	pr6|134
003230  aa  040 100 100 500	mlr  	(pr),(pr),fill(040)
003231  aa  6 00206 00 0007	desc9a	pr6|134,7
003232  aa  6 00174 00 0040	desc9a	pr6|124,32
003233  aa  6 00044 3701 20	epp4 	pr6|36,*
003234  ia  4 00012 3521 00	epp2 	pr4|10		df_iocbp
003235  aa  6 00212 2521 00	spri2	pr6|138
003236  aa  6 00174 3521 00	epp2 	pr6|124
003237  aa  6 00214 2521 00	spri2	pr6|140
003240  aa  7 00670 3521 00	epp2 	pr7|440		t_ptr
003241  aa  6 00216 2521 00	spri2	pr6|142
003242  aa  7 00656 3521 00	epp2 	pr7|430		c_len
003243  aa  6 00220 2521 00	spri2	pr6|144
003244  aa  7 00100 3521 00	epp2 	pr7|64		code
003245  aa  6 00222 2521 00	spri2	pr6|146
003246  aa  6 00210 6211 00	eax1 	pr6|136
003247  aa   024000 4310 07	fld  	10240,dl
003250  la  4 00042 3521 20	epp2 	pr4|34,*		tolts_util_$search
003251  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 403
         if code ^= 0 then do;

003252  aa  6 00040 3735 20	epp7 	pr6|32,*
003253  aa  7 00100 2361 00	ldq  	pr7|64		code
003254  aa   000041 6000 04	tze  	33,ic		003315
						STATEMENT 1 ON LINE 404
	  call com_err_ (code, pname, "searching for pas.^a", nxt_tst);

003255  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
003256  aa   775562 00 0024	desc9a	-1166,20		001037 = 163145141162
003257  aa  6 00174 00 0024	desc9a	pr6|124,20
003260  aa  7 00100 3521 00	epp2 	pr7|64		code
003261  aa  6 00226 2521 00	spri2	pr6|150
003262  aa   775212 3520 04	epp2 	-1398,ic		000474 = 151163157154
003263  aa  6 00230 2521 00	spri2	pr6|152
003264  aa  6 00174 3521 00	epp2 	pr6|124
003265  aa  6 00232 2521 00	spri2	pr6|154
003266  aa  7 00111 3521 00	epp2 	pr7|73		nxt_tst
003267  aa  6 00234 2521 00	spri2	pr6|156
003270  aa   775350 3520 04	epp2 	-1304,ic		000640 = 404000000043
003271  aa  6 00236 2521 00	spri2	pr6|158
003272  aa   775332 3520 04	epp2 	-1318,ic		000624 = 526000000006
003273  aa  6 00240 2521 00	spri2	pr6|160
003274  aa   775302 3520 04	epp2 	-1342,ic		000576 = 524000000024
003275  aa  6 00242 2521 00	spri2	pr6|162
003276  aa   775302 3520 04	epp2 	-1342,ic		000600 = 526000000003
003277  aa  6 00244 2521 00	spri2	pr6|164
003300  aa  6 00224 6211 00	eax1 	pr6|148
003301  aa   020000 4310 07	fld  	8192,dl
003302  aa  6 00044 3701 20	epp4 	pr6|36,*
003303  la  4 00104 3521 20	epp2 	pr4|68,*		com_err_
003304  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 405
	  ntype = "0"b;

003305  aa  6 00040 3735 20	epp7 	pr6|32,*
003306  aa  7 00121 4501 00	stz  	pr7|81		ntype
						STATEMENT 1 ON LINE 406
	  string (action_codes) = "0"b;

003307  aa  7 00666 3715 20	epp5 	pr7|438,*		wseg_p
003310  aa  5 01172 4501 00	stz  	pr5|634
						STATEMENT 1 ON LINE 407
	  action_codes.halt = "1"b;

003311  aa   040000 2350 07	lda  	16384,dl
003312  aa  5 01172 2551 00	orsa 	pr5|634		wseg.halt
						STATEMENT 1 ON LINE 408
	  go to cont_pas;

003313  aa  7 00714 3521 00	epp2 	pr7|460		cont_pas
003314  aa  0 00660 7101 00	tra  	pr0|432		tra_ext_2
						STATEMENT 1 ON LINE 409
         end;

						STATEMENT 1 ON LINE 413
tout_retry: call gload_ (t_ptr, addrel (wseg_p, pgm_offset), 0, addr (gload_data), code);

003315  aa  6 00040 3735 20	epp7 	pr6|32,*
003316  aa  7 00646 2361 00	ldq  	pr7|422		pgm_offset
003317  aa  7 00666 3521 66	epp2 	pr7|438,*ql	wseg_p
003320  aa   000000 0520 03	adwp2	0,du
003321  aa  6 00206 2521 00	spri2	pr6|134
003322  aa  6 00246 4501 00	stz  	pr6|166
003323  aa  7 01016 3715 00	epp5 	pr7|526		gload_data
003324  aa  6 00250 6515 00	spri5	pr6|168
003325  aa  7 00670 3521 00	epp2 	pr7|440		t_ptr
003326  aa  6 00212 2521 00	spri2	pr6|138
003327  aa  6 00206 3521 00	epp2 	pr6|134
003330  aa  6 00214 2521 00	spri2	pr6|140
003331  aa  6 00246 3521 00	epp2 	pr6|166
003332  aa  6 00216 2521 00	spri2	pr6|142
003333  aa  6 00250 3521 00	epp2 	pr6|168
003334  aa  6 00220 2521 00	spri2	pr6|144
003335  aa  7 00100 3521 00	epp2 	pr7|64		code
003336  aa  6 00222 2521 00	spri2	pr6|146
003337  aa  6 00210 6211 00	eax1 	pr6|136
003340  aa   024000 4310 07	fld  	10240,dl
003341  aa  6 00044 3701 20	epp4 	pr6|36,*
003342  la  4 00064 3521 20	epp2 	pr4|52,*		gload_
003343  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 414
         if code ^= 0 then do;

003344  aa  6 00040 3735 20	epp7 	pr6|32,*
003345  aa  7 00100 2361 00	ldq  	pr7|64		code
003346  aa   000036 6000 04	tze  	30,ic		003404
						STATEMENT 1 ON LINE 415
	  call com_err_ (code, pname, "^a^/attempting to load pas.^a",
	   gload_data.diagnostic, nxt_tst);

003347  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
003350  aa   775617 00 0040	desc9a	-1137,32		001166 = 136141136057
003351  aa  6 00174 00 0040	desc9a	pr6|124,32
003352  aa  7 00100 3521 00	epp2 	pr7|64		code
003353  aa  6 00254 2521 00	spri2	pr6|172
003354  aa   775120 3520 04	epp2 	-1456,ic		000474 = 151163157154
003355  aa  6 00256 2521 00	spri2	pr6|174
003356  aa  6 00174 3521 00	epp2 	pr6|124
003357  aa  6 00260 2521 00	spri2	pr6|176
003360  aa  7 01021 3521 00	epp2 	pr7|529		gload_data.diagnostic
003361  aa  6 00262 2521 00	spri2	pr6|178
003362  aa  7 00111 3521 00	epp2 	pr7|73		nxt_tst
003363  aa  6 00264 2521 00	spri2	pr6|180
003364  aa   775254 3520 04	epp2 	-1364,ic		000640 = 404000000043
003365  aa  6 00266 2521 00	spri2	pr6|182
003366  aa   775236 3520 04	epp2 	-1378,ic		000624 = 526000000006
003367  aa  6 00270 2521 00	spri2	pr6|184
003370  aa   775205 3520 04	epp2 	-1403,ic		000575 = 524000000035
003371  aa  6 00272 2521 00	spri2	pr6|186
003372  aa   775202 3520 04	epp2 	-1406,ic		000574 = 526000000310
003373  aa  6 00274 2521 00	spri2	pr6|188
003374  aa   775204 3520 04	epp2 	-1404,ic		000600 = 526000000003
003375  aa  6 00276 2521 00	spri2	pr6|190
003376  aa  6 00252 6211 00	eax1 	pr6|170
003377  aa   024000 4310 07	fld  	10240,dl
003400  aa  6 00044 3701 20	epp4 	pr6|36,*
003401  la  4 00104 3521 20	epp2 	pr4|68,*		com_err_
003402  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 417
	  return;

003403  aa  0 00631 7101 00	tra  	pr0|409		return_mac
						STATEMENT 1 ON LINE 418
         end;

						STATEMENT 1 ON LINE 422
         if ^pas_sw then				/* if pft */
	  call set_survey;

003404  aa  7 00117 2351 00	lda  	pr7|79		pas_sw
003405  aa   000003 6010 04	tnz  	3,ic		003410
003406  aa   002543 6700 04	tsp4 	1379,ic		006151
003407  aa   000006 7100 04	tra  	6,ic		003415
						STATEMENT 1 ON LINE 424
         else do;

						STATEMENT 1 ON LINE 425
	  delay = pas_delay;

003410  aa   000002 2360 07	ldq  	2,dl
003411  aa  7 00652 7561 00	stq  	pr7|426		delay
						STATEMENT 1 ON LINE 426
	  slave_hdr.cksum = gload_data.checksum;

003412  aa  7 01020 2351 00	lda  	pr7|528		gload_data.checksum
003413  aa  7 00676 3715 20	epp5 	pr7|446,*		hdr_p
003414  aa  5 00006 7551 00	sta  	pr5|6		slave_hdr.cksum
						STATEMENT 1 ON LINE 427
         end;

						STATEMENT 1 ON LINE 428
         if nxt_tst = "892" | nxt_tst = "893"		/* thesetests cause timeouts */
	| nxt_tst = "955" then delay_iter = 600;

003415  aa  6 00040 3735 20	epp7 	pr6|32,*
003416  aa  7 00111 2351 00	lda  	pr7|73		nxt_tst
003417  aa  0 00066 3771 00	anaq 	pr0|54		= 777777777000 000000000000
003420  aa   775153 1150 04	cmpa 	-1429,ic		000573 = 070071062000
003421  aa   000005 6000 04	tze  	5,ic		003426
003422  aa   775150 1150 04	cmpa 	-1432,ic		000572 = 070071063000
003423  aa   000003 6000 04	tze  	3,ic		003426
003424  aa   775145 1150 04	cmpa 	-1435,ic		000571 = 071065065000
003425  aa   000004 6010 04	tnz  	4,ic		003431
003426  aa   001130 2360 07	ldq  	600,dl
003427  aa  7 00241 7561 00	stq  	pr7|161		delay_iter
003430  aa   000003 7100 04	tra  	3,ic		003433
						STATEMENT 1 ON LINE 430
         else delay_iter = 300;

003431  aa   000454 2360 07	ldq  	300,dl
003432  aa  7 00241 7561 00	stq  	pr7|161		delay_iter
						STATEMENT 1 ON LINE 431
         string (is_mbx.action_codes) = "0"b;

003433  aa  7 00666 3715 20	epp5 	pr7|438,*		wseg_p
003434  aa  5 01172 4501 00	stz  	pr5|634
						STATEMENT 1 ON LINE 432
         is_mbx.pgm_name = "0"b;

003435  aa  5 01173 4501 00	stz  	pr5|635		wseg.pgm_name
						STATEMENT 1 ON LINE 433
continue_pas:					/* target of non local go tos */
         if is_mbx.control = 0 then			/* if flag is reset */
	  is_mbx.control = 65535;

003436  aa  6 00040 3735 20	epp7 	pr6|32,*
003437  aa  7 00666 3715 20	epp5 	pr7|438,*		wseg_p
003440  aa  5 01170 2361 00	ldq  	pr5|632		wseg.control
003441  aa   000003 6010 04	tnz  	3,ic		003444
003442  aa   177777 2360 07	ldq  	65535,dl
003443  aa  5 01170 7561 00	stq  	pr5|632		wseg.control
						STATEMENT 1 ON LINE 436
         is_mbx.service = 0;

003444  aa  5 01171 4501 00	stz  	pr5|633		wseg.service
						STATEMENT 1 ON LINE 437
         if trace_sw then				/* if tracing action codes */
	  if string (action_codes) ^= "0"b then		/* and we have  bit 21 set */
	     call itrace;

003445  aa  7 00124 2351 00	lda  	pr7|84		trace_sw
003446  aa   000004 6000 04	tze  	4,ic		003452
003447  aa  5 01172 2351 00	lda  	pr5|634
003450  aa   000002 6000 04	tze  	2,ic		003452
003451  aa   002522 6700 04	tsp4 	1362,ic		006173
						STATEMENT 1 ON LINE 443
         call tandd_$interrupt_test_cpu (code);

003452  aa  6 00040 3735 20	epp7 	pr6|32,*
003453  aa  7 00100 3521 00	epp2 	pr7|64		code
003454  aa  6 00172 2521 00	spri2	pr6|122
003455  aa  6 00170 6211 00	eax1 	pr6|120
003456  aa   004000 4310 07	fld  	2048,dl
003457  aa  6 00044 3701 20	epp4 	pr6|36,*
003460  la  4 00030 3521 20	epp2 	pr4|24,*		tandd_$interrupt_test_cpu
003461  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 444
         if code ^= 0 then do;

003462  aa  6 00040 3735 20	epp7 	pr6|32,*
003463  aa  7 00100 2361 00	ldq  	pr7|64		code
003464  aa   000034 6000 04	tze  	28,ic		003520
						STATEMENT 1 ON LINE 445
	  call com_err_ (code, pname, "attempting to interrupt cpu ^a", tags (cpu_tag));

003465  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
003466  aa   775471 00 0040	desc9a	-1223,32		001156 = 141164164145
003467  aa  6 00174 00 0040	desc9a	pr6|124,32
003470  aa  7 00100 3521 00	epp2 	pr7|64		code
003471  aa  6 00226 2521 00	spri2	pr6|150
003472  aa   775002 3520 04	epp2 	-1534,ic		000474 = 151163157154
003473  aa  6 00230 2521 00	spri2	pr6|152
003474  aa  6 00174 3521 00	epp2 	pr6|124
003475  aa  6 00232 2521 00	spri2	pr6|154
003476  aa  7 00101 7271 00	lxl7 	pr7|65		cpu_tag
003477  ta   000472 3520 00	epp2 	314
003500  aa  2 00000 5005 17	a9bd 	pr2|0,7
003501  aa  6 00234 2521 00	spri2	pr6|156
003502  aa   775136 3520 04	epp2 	-1442,ic		000640 = 404000000043
003503  aa  6 00236 2521 00	spri2	pr6|158
003504  aa   775120 3520 04	epp2 	-1456,ic		000624 = 526000000006
003505  aa  6 00240 2521 00	spri2	pr6|160
003506  aa   775062 3520 04	epp2 	-1486,ic		000570 = 524000000036
003507  aa  6 00242 2521 00	spri2	pr6|162
003510  aa   775100 3520 04	epp2 	-1472,ic		000610 = 526000000001
003511  aa  6 00244 2521 00	spri2	pr6|164
003512  aa  6 00224 6211 00	eax1 	pr6|148
003513  aa   020000 4310 07	fld  	8192,dl
003514  aa  6 00044 3701 20	epp4 	pr6|36,*
003515  la  4 00104 3521 20	epp2 	pr4|68,*		com_err_
003516  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 446
	  return;

003517  aa  0 00631 7101 00	tra  	pr0|409		return_mac
						STATEMENT 1 ON LINE 447
         end;

						STATEMENT 1 ON LINE 451
         do i = 1 to 1000 while (is_mbx.service = 0);

003520  aa   000001 2360 07	ldq  	1,dl
003521  aa  7 00653 7561 00	stq  	pr7|427		i
003522  aa  6 00040 3735 20	epp7 	pr6|32,*
003523  aa  7 00653 2361 00	ldq  	pr7|427		i
003524  aa   001750 1160 07	cmpq 	1000,dl
003525  aa   000006 6054 04	tpnz 	6,ic		003533
003526  aa  7 00666 3715 20	epp5 	pr7|438,*		wseg_p
003527  aa  5 01171 2361 00	ldq  	pr5|633		wseg.service
003530  aa   000003 6010 04	tnz  	3,ic		003533
						STATEMENT 1 ON LINE 452
         end;

003531  aa  7 00653 0541 00	aos  	pr7|427		i
003532  aa   777770 7100 04	tra  	-8,ic		003522
						STATEMENT 1 ON LINE 453
         if is_mbx.service = 0 then			/* if didn't make it give up processor */
wait:	  call sleep (delay);

003533  aa  7 00666 3715 20	epp5 	pr7|438,*		wseg_p
003534  aa  5 01171 2361 00	ldq  	pr5|633		wseg.service
003535  aa   000010 6010 04	tnz  	8,ic		003545
003536  aa  6 00040 3735 20	epp7 	pr6|32,*
003537  aa  7 00652 3521 00	epp2 	pr7|426		delay
003540  aa  6 00176 2521 00	spri2	pr6|126
003541  aa  6 00174 3521 00	epp2 	pr6|124
003542  aa   004000 4310 07	fld  	2048,dl
003543  aa  2 00000 7571 00	staq 	pr2|0
003544  aa   002302 6700 04	tsp4 	1218,ic		006046
						STATEMENT 1 ON LINE 455
         if is_mbx.service = 0 then do;

003545  aa  6 00040 3735 20	epp7 	pr6|32,*
003546  aa  7 00666 3715 20	epp5 	pr7|438,*		wseg_p
003547  aa  5 01171 2361 00	ldq  	pr5|633		wseg.service
003550  aa   000323 6010 04	tnz  	211,ic		004073
						STATEMENT 1 ON LINE 456
	  call ioa_ (" ");

003551  aa   040000 2350 03	lda  	16384,du
003552  aa  6 00246 7551 00	sta  	pr6|166
003553  aa  6 00246 3521 00	epp2 	pr6|166
003554  aa  6 00176 2521 00	spri2	pr6|126
003555  aa   775012 3520 04	epp2 	-1526,ic		000567 = 524000000001
003556  aa  6 00200 2521 00	spri2	pr6|128
003557  aa  6 00174 6211 00	eax1 	pr6|124
003560  aa   004000 4310 07	fld  	2048,dl
003561  aa  6 00044 3701 20	epp4 	pr6|36,*
003562  la  4 00102 3521 20	epp2 	pr4|66,*		ioa_
003563  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 457
	  if ^pas_sw & nxt_tst ^= pas_exec then do;

003564  aa  6 00040 3735 20	epp7 	pr6|32,*
003565  aa  7 00117 2351 00	lda  	pr7|79		pas_sw
003566  aa   000102 6010 04	tnz  	66,ic		003670
003567  aa  7 00111 2351 00	lda  	pr7|73		nxt_tst
003570  aa  0 00066 3771 00	anaq 	pr0|54		= 777777777000 000000000000
003571  aa   774677 1150 04	cmpa 	-1601,ic		000470 = 060066061000
003572  aa   000076 6000 04	tze  	62,ic		003670
						STATEMENT 1 ON LINE 458
	     call com_err_ (0, pname,
	      "time out after ^d seconds while executing PFT ^a",
	      delay * delay_iter, nxt_tst);

003573  aa  6 00246 4501 00	stz  	pr6|166
003574  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
003575  aa   775464 00 0060	desc9a	-1228,48		001260 = 164151155145
003576  aa  6 00210 00 0060	desc9a	pr6|136,48
003577  aa  7 00652 2361 00	ldq  	pr7|426		delay
003600  aa  7 00241 4021 00	mpy  	pr7|161		delay_iter
003601  aa  6 00247 7561 00	stq  	pr6|167
003602  aa  6 00246 3521 00	epp2 	pr6|166
003603  aa  6 00254 2521 00	spri2	pr6|172
003604  aa   774670 3520 04	epp2 	-1608,ic		000474 = 151163157154
003605  aa  6 00256 2521 00	spri2	pr6|174
003606  aa  6 00210 3521 00	epp2 	pr6|136
003607  aa  6 00260 2521 00	spri2	pr6|176
003610  aa  6 00247 3521 00	epp2 	pr6|167
003611  aa  6 00262 2521 00	spri2	pr6|178
003612  aa  7 00111 3521 00	epp2 	pr7|73		nxt_tst
003613  aa  6 00264 2521 00	spri2	pr6|180
003614  aa   775011 3520 04	epp2 	-1527,ic		000625 = 404000000005
003615  aa  6 00266 2521 00	spri2	pr6|182
003616  aa   775006 3520 04	epp2 	-1530,ic		000624 = 526000000006
003617  aa  6 00270 2521 00	spri2	pr6|184
003620  aa   774771 3520 04	epp2 	-1543,ic		000611 = 524000000060
003621  aa  6 00272 2521 00	spri2	pr6|186
003622  aa   775016 3520 04	epp2 	-1522,ic		000640 = 404000000043
003623  aa  6 00274 2521 00	spri2	pr6|188
003624  aa   774754 3520 04	epp2 	-1556,ic		000600 = 526000000003
003625  aa  6 00276 2521 00	spri2	pr6|190
003626  aa  6 00252 6211 00	eax1 	pr6|170
003627  aa   024000 4310 07	fld  	10240,dl
003630  aa  6 00044 3701 20	epp4 	pr6|36,*
003631  la  4 00104 3521 20	epp2 	pr4|68,*		com_err_
003632  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 461
	     call com_err_ (0, pname,
	      "check cpu ^a's maintenence panel and consult program listing to determine failure",
	      tags (cpu_tag));

003633  aa  6 00247 4501 00	stz  	pr6|167
003634  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
003635  aa   776053 00 0124	desc9a	-981,84		001707 = 143150145143
003636  aa  6 00252 00 0124	desc9a	pr6|170,84
003637  aa  6 00247 3521 00	epp2 	pr6|167
003640  aa  6 00226 2521 00	spri2	pr6|150
003641  aa   774633 3520 04	epp2 	-1637,ic		000474 = 151163157154
003642  aa  6 00230 2521 00	spri2	pr6|152
003643  aa  6 00252 3521 00	epp2 	pr6|170
003644  aa  6 00232 2521 00	spri2	pr6|154
003645  aa  6 00040 3735 20	epp7 	pr6|32,*
003646  aa  7 00101 7271 00	lxl7 	pr7|65		cpu_tag
003647  ta   000472 3520 00	epp2 	314
003650  aa  2 00000 5005 17	a9bd 	pr2|0,7
003651  aa  6 00234 2521 00	spri2	pr6|156
003652  aa   774753 3520 04	epp2 	-1557,ic		000625 = 404000000005
003653  aa  6 00236 2521 00	spri2	pr6|158
003654  aa   774750 3520 04	epp2 	-1560,ic		000624 = 526000000006
003655  aa  6 00240 2521 00	spri2	pr6|160
003656  aa   774710 3520 04	epp2 	-1592,ic		000566 = 524000000121
003657  aa  6 00242 2521 00	spri2	pr6|162
003660  aa   774730 3520 04	epp2 	-1576,ic		000610 = 526000000001
003661  aa  6 00244 2521 00	spri2	pr6|164
003662  aa  6 00224 6211 00	eax1 	pr6|148
003663  aa   020000 4310 07	fld  	8192,dl
003664  aa  6 00044 3701 20	epp4 	pr6|36,*
003665  la  4 00104 3521 20	epp2 	pr4|68,*		com_err_
003666  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 464
	  end;

003667  aa   000102 7100 04	tra  	66,ic		003771
						STATEMENT 1 ON LINE 465
	  else if nxt_tst = pas_exec then		/* hung up while initializing pas exec */
	     call com_err_ (0, pname,
	      "time out after ^d seconds while initializing the pas2 executive",
	      delay * delay_iter);

003670  aa  7 00111 2351 00	lda  	pr7|73		nxt_tst
003671  aa  0 00066 3771 00	anaq 	pr0|54		= 777777777000 000000000000
003672  aa   774576 1150 04	cmpa 	-1666,ic		000470 = 060066061000
003673  aa   000036 6010 04	tnz  	30,ic		003731
003674  aa  6 00247 4501 00	stz  	pr6|167
003675  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
003676  aa   775611 00 0100	desc9a	-1143,64		001506 = 164151155145
003677  aa  6 00224 00 0100	desc9a	pr6|148,64
003700  aa  7 00652 2361 00	ldq  	pr7|426		delay
003701  aa  7 00241 4021 00	mpy  	pr7|161		delay_iter
003702  aa  6 00246 7561 00	stq  	pr6|166
003703  aa  6 00247 3521 00	epp2 	pr6|167
003704  aa  6 00254 2521 00	spri2	pr6|172
003705  aa   774567 3520 04	epp2 	-1673,ic		000474 = 151163157154
003706  aa  6 00256 2521 00	spri2	pr6|174
003707  aa  6 00224 3521 00	epp2 	pr6|148
003710  aa  6 00260 2521 00	spri2	pr6|176
003711  aa  6 00246 3521 00	epp2 	pr6|166
003712  aa  6 00262 2521 00	spri2	pr6|178
003713  aa   774712 3520 04	epp2 	-1590,ic		000625 = 404000000005
003714  aa  6 00264 2521 00	spri2	pr6|180
003715  aa   774707 3520 04	epp2 	-1593,ic		000624 = 526000000006
003716  aa  6 00266 2521 00	spri2	pr6|182
003717  aa   774646 3520 04	epp2 	-1626,ic		000565 = 524000000077
003720  aa  6 00270 2521 00	spri2	pr6|184
003721  aa   774717 3520 04	epp2 	-1585,ic		000640 = 404000000043
003722  aa  6 00272 2521 00	spri2	pr6|186
003723  aa  6 00252 6211 00	eax1 	pr6|170
003724  aa   020000 4310 07	fld  	8192,dl
003725  aa  6 00044 3701 20	epp4 	pr6|36,*
003726  la  4 00104 3521 20	epp2 	pr4|68,*		com_err_
003727  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
003730  aa   000041 7100 04	tra  	33,ic		003771
						STATEMENT 1 ON LINE 469
	  else call com_err_ (0, pname,
	        "time out after ^d seconds while executing pas2 test ^a",
	        delay * delay_iter, nxt_tst);

003731  aa  6 00246 4501 00	stz  	pr6|166
003732  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
003733  aa   775477 00 0070	desc9a	-1217,56		001431 = 164151155145
003734  aa  6 00224 00 0070	desc9a	pr6|148,56
003735  aa  7 00652 2361 00	ldq  	pr7|426		delay
003736  aa  7 00241 4021 00	mpy  	pr7|161		delay_iter
003737  aa  6 00247 7561 00	stq  	pr6|167
003740  aa  6 00246 3521 00	epp2 	pr6|166
003741  aa  6 00254 2521 00	spri2	pr6|172
003742  aa   774532 3520 04	epp2 	-1702,ic		000474 = 151163157154
003743  aa  6 00256 2521 00	spri2	pr6|174
003744  aa  6 00224 3521 00	epp2 	pr6|148
003745  aa  6 00260 2521 00	spri2	pr6|176
003746  aa  6 00247 3521 00	epp2 	pr6|167
003747  aa  6 00262 2521 00	spri2	pr6|178
003750  aa  7 00111 3521 00	epp2 	pr7|73		nxt_tst
003751  aa  6 00264 2521 00	spri2	pr6|180
003752  aa   774653 3520 04	epp2 	-1621,ic		000625 = 404000000005
003753  aa  6 00266 2521 00	spri2	pr6|182
003754  aa   774650 3520 04	epp2 	-1624,ic		000624 = 526000000006
003755  aa  6 00270 2521 00	spri2	pr6|184
003756  aa   774606 3520 04	epp2 	-1658,ic		000564 = 524000000066
003757  aa  6 00272 2521 00	spri2	pr6|186
003760  aa   774660 3520 04	epp2 	-1616,ic		000640 = 404000000043
003761  aa  6 00274 2521 00	spri2	pr6|188
003762  aa   774616 3520 04	epp2 	-1650,ic		000600 = 526000000003
003763  aa  6 00276 2521 00	spri2	pr6|190
003764  aa  6 00252 6211 00	eax1 	pr6|170
003765  aa   024000 4310 07	fld  	10240,dl
003766  aa  6 00044 3701 20	epp4 	pr6|36,*
003767  la  4 00104 3521 20	epp2 	pr4|68,*		com_err_
003770  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 472
	  trm1 = "0"b;

003771  aa  6 00040 3735 20	epp7 	pr6|32,*
003772  aa  7 00116 4501 00	stz  	pr7|78		trm1
						STATEMENT 1 ON LINE 473
	  do while (^trm1);

003773  aa   000000 0110 03	nop  	0,du
003774  aa  6 00040 3735 20	epp7 	pr6|32,*
003775  aa  7 00116 2351 00	lda  	pr7|78		trm1
003776  aa   777222 6010 04	tnz  	-366,ic		003220
						STATEMENT 1 ON LINE 474
	     call tolts_util_$query ("respond ""quit (q)"", ""retry (r)"", or ""continue (c)"" - ",
	      com_string, c_len, args, cmd_cnt);

003777  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
004000  aa   775414 00 0070	desc9a	-1268,56		001413 = 162145163160
004001  aa  6 00224 00 0070	desc9a	pr6|148,56
004002  aa  6 00224 3521 00	epp2 	pr6|148
004003  aa  6 00254 2521 00	spri2	pr6|172
004004  aa  7 00173 3521 00	epp2 	pr7|123		com_string
004005  aa  6 00256 2521 00	spri2	pr6|174
004006  aa  7 00656 3521 00	epp2 	pr7|430		c_len
004007  aa  6 00260 2521 00	spri2	pr6|176
004010  aa  7 00247 3521 00	epp2 	pr7|167		args
004011  aa  6 00262 2521 00	spri2	pr6|178
004012  aa  7 00651 3521 00	epp2 	pr7|425		cmd_cnt
004013  aa  6 00264 2521 00	spri2	pr6|180
004014  aa   774547 3520 04	epp2 	-1689,ic		000563 = 524000000065
004015  aa  6 00266 2521 00	spri2	pr6|182
004016  aa   774613 3520 04	epp2 	-1653,ic		000631 = 524000000204
004017  aa  6 00270 2521 00	spri2	pr6|184
004020  aa   774610 3520 04	epp2 	-1656,ic		000630 = 404000000021
004021  aa  6 00272 2521 00	spri2	pr6|186
004022  aa  6 00276 2521 00	spri2	pr6|190
004023  aa   774764 3520 04	epp2 	-1548,ic		001007 = 530100000034
004024  aa  6 00274 2521 00	spri2	pr6|188
004025  aa  6 00252 6211 00	eax1 	pr6|170
004026  aa   024000 4310 07	fld  	10240,dl
004027  aa  6 00044 3701 20	epp4 	pr6|36,*
004030  la  4 00036 3521 20	epp2 	pr4|30,*		tolts_util_$query
004031  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 476
	     if args (1) = "quit" | args (1) = "q" then	/* user wants to get out */
	        return;

004032  aa  6 00040 3735 20	epp7 	pr6|32,*
004033  aa  7 00246 7271 00	lxl7 	pr7|166		args
004034  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
004035  aa  7 00247 00 0017	desc9a	pr7|167,x7	args
004036  aa   774603 00 0004	desc9a	-1661,4		000637 = 161165151164
004037  aa  0 00631 6001 00	tze  	pr0|409		return_mac
004040  aa  7 00246 7271 00	lxl7 	pr7|166		args
004041  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
004042  aa  7 00247 00 0017	desc9a	pr7|167,x7	args
004043  aa   005127 00 0001	desc9a	2647,1		011170 = 161000000000
004044  aa  0 00631 6001 00	tze  	pr0|409		return_mac
						STATEMENT 1 ON LINE 478
	     else if args (1) = "retry"
	      | args (1) = "r" then			/* user wants to retry test */
	        go to tout_retry;

004045  aa  7 00246 7271 00	lxl7 	pr7|166		args
004046  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
004047  aa  7 00247 00 0017	desc9a	pr7|167,x7	args
004050  aa   774642 00 0005	desc9a	-1630,5		000710 = 162145164162
004051  aa   777244 6000 04	tze  	-348,ic		003315
004052  aa  7 00246 7271 00	lxl7 	pr7|166		args
004053  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
004054  aa  7 00247 00 0017	desc9a	pr7|167,x7	args
004055  aa   005113 00 0001	desc9a	2635,1		011166 = 162000000000
004056  aa   777237 6000 04	tze  	-353,ic		003315
						STATEMENT 1 ON LINE 481
	     else if args (1) = "continue"
	      | args (1) = "c" then			/* wait some more */
	        go to wait;

004057  aa  7 00246 7271 00	lxl7 	pr7|166		args
004060  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
004061  aa  7 00247 00 0017	desc9a	pr7|167,x7	args
004062  aa   774626 00 0010	desc9a	-1642,8		000706 = 143157156164
004063  aa   777453 6000 04	tze  	-213,ic		003536
004064  aa  7 00246 7271 00	lxl7 	pr7|166		args
004065  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
004066  aa  7 00247 00 0017	desc9a	pr7|167,x7	args
004067  aa   005100 00 0001	desc9a	2624,1		011165 = 143000000000
004070  aa   777446 6000 04	tze  	-218,ic		003536
						STATEMENT 1 ON LINE 484
	  end;

004071  aa   777703 7100 04	tra  	-61,ic		003774
						STATEMENT 1 ON LINE 485
         end;

004072  aa   777126 7100 04	tra  	-426,ic		003220
						STATEMENT 1 ON LINE 486
         else do;

						STATEMENT 1 ON LINE 487
	  string (action) = string (is_mbx.action_codes);

004073  aa  5 01172 2351 00	lda  	pr5|634
004074  aa  7 00734 7551 00	sta  	pr7|476
						STATEMENT 1 ON LINE 488
	  if trace_sw then				/* if tracing action codes */
	     call itrace;

004075  aa  7 00124 2351 00	lda  	pr7|84		trace_sw
004076  aa   000002 6000 04	tze  	2,ic		004100
004077  aa   002074 6700 04	tsp4 	1084,ic		006173
						STATEMENT 1 ON LINE 490
	  string (is_mbx.action_codes) = "0"b;

004100  aa  6 00040 3735 20	epp7 	pr6|32,*
004101  aa  7 00666 3715 20	epp5 	pr7|438,*		wseg_p
004102  aa  5 01172 4501 00	stz  	pr5|634
						STATEMENT 1 ON LINE 491
	  call interpret_action;

004103  aa   000003 6700 04	tsp4 	3,ic		004106
						STATEMENT 1 ON LINE 492
         end;

						STATEMENT 1 ON LINE 493
end_tst:						/* target of non-local gotos */
      end;

004104  aa   777114 7100 04	tra  	-436,ic		003220
						STATEMENT 1 ON LINE 498
   end run_pas;

004105  aa  0 00631 7101 00	tra  	pr0|409		return_mac
  END PROCEDURE run_pas
BEGIN PROCEDURE interpret_action
ENTRY TO interpret_action                                   STATEMENT 1 ON LINE 504
interpret_action: proc;

004106  aa  6 00106 6501 00	spri4	pr6|70
						STATEMENT 1 ON LINE 506
      if action.ld_mpgm | action.ld_spgm then do;

004107  aa  6 00040 3735 20	epp7 	pr6|32,*
004110  aa  7 00734 2351 00	lda  	pr7|476		action.ld_spgm
004111  aa   001400 3150 07	cana 	768,dl
004112  aa   000146 6000 04	tze  	102,ic		004260
						STATEMENT 1 ON LINE 507
         call complete_err_mess;

004113  aa   001772 6700 04	tsp4 	1018,ic		006105
						STATEMENT 1 ON LINE 508
         call bcd_to_ascii_ (substr (pgm_name, 13, 18), new_tst);

004114  aa  6 00040 3735 20	epp7 	pr6|32,*
004115  aa  7 00666 3715 20	epp5 	pr7|438,*		wseg_p
004116  aa  5 01173 2351 00	lda  	pr5|635		wseg.pgm_name
004117  aa   000014 7350 00	als  	12
004120  aa  0 00044 3771 00	anaq 	pr0|36		= 777777000000 000000000000
004121  aa  6 00300 7551 00	sta  	pr6|192
004122  aa  6 00300 3521 00	epp2 	pr6|192
004123  aa  6 00304 2521 00	spri2	pr6|196
004124  aa  7 00112 3521 00	epp2 	pr7|74		new_tst
004125  aa  6 00306 2521 00	spri2	pr6|198
004126  aa   774433 3520 04	epp2 	-1765,ic		000561 = 514000000022
004127  aa  6 00310 2521 00	spri2	pr6|200
004130  aa   774450 3520 04	epp2 	-1752,ic		000600 = 526000000003
004131  aa  6 00312 2521 00	spri2	pr6|202
004132  aa  6 00302 6211 00	eax1 	pr6|194
004133  aa   010000 4310 07	fld  	4096,dl
004134  aa  6 00044 3701 20	epp4 	pr6|36,*
004135  la  4 00074 3521 20	epp2 	pr4|60,*		bcd_to_ascii_
004136  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 510
         if trace_sw then				/* if user tracing action codes... */
	  call ioa_ ("load pgm^a", new_tst);

004137  aa  6 00040 3735 20	epp7 	pr6|32,*
004140  aa  7 00124 2351 00	lda  	pr7|84		trace_sw
004141  aa   000022 6000 04	tze  	18,ic		004163
004142  aa   774616 2370 04	ldaq 	-1650,ic		000760 = 154157141144 040160147155
004143  aa  6 00302 7571 00	staq 	pr6|194
004144  aa   136141 2350 03	lda  	48225,du
004145  aa  6 00304 7551 00	sta  	pr6|196
004146  aa  6 00302 3521 00	epp2 	pr6|194
004147  aa  6 00316 2521 00	spri2	pr6|206
004150  aa  7 00112 3521 00	epp2 	pr7|74		new_tst
004151  aa  6 00320 2521 00	spri2	pr6|208
004152  aa   774406 3520 04	epp2 	-1786,ic		000560 = 524000000012
004153  aa  6 00322 2521 00	spri2	pr6|210
004154  aa   774424 3520 04	epp2 	-1772,ic		000600 = 526000000003
004155  aa  6 00324 2521 00	spri2	pr6|212
004156  aa  6 00314 6211 00	eax1 	pr6|204
004157  aa   010000 4310 07	fld  	4096,dl
004160  aa  6 00044 3701 20	epp4 	pr6|36,*
004161  la  4 00102 3521 20	epp2 	pr4|66,*		ioa_
004162  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 512
         do i = 1 to hbound (inv_tst_ids, 1) while (new_tst ^= inv_tst_ids (i));

004163  aa   000001 2360 07	ldq  	1,dl
004164  aa  6 00040 3735 20	epp7 	pr6|32,*
004165  aa  7 00653 7561 00	stq  	pr7|427		i
004166  aa  6 00040 3735 20	epp7 	pr6|32,*
004167  aa  7 00653 2361 00	ldq  	pr7|427		i
004170  aa   000026 1160 07	cmpq 	22,dl
004171  aa   000010 6054 04	tpnz 	8,ic		004201
004172  aa   000003 4020 07	mpy  	3,dl
004173  aa  040 006 106 500	cmpc 	(pr),(ql),fill(040)
004174  aa  7 00112 00 0003	desc9a	pr7|74,3		new_tst
004175  ta   000446 20 0003	desc9a	294(1),3
004176  aa   000003 6000 04	tze  	3,ic		004201
						STATEMENT 1 ON LINE 513
         end;

004177  aa  7 00653 0541 00	aos  	pr7|427		i
004200  aa   777766 7100 04	tra  	-10,ic		004166
						STATEMENT 1 ON LINE 514
         if i <= hbound (inv_tst_ids, 1) then do;

004201  aa  7 00653 2361 00	ldq  	pr7|427		i
004202  aa   000026 1160 07	cmpq 	22,dl
004203  aa   000010 6054 04	tpnz 	8,ic		004213
						STATEMENT 1 ON LINE 515
	  ntype = "1"b;

004204  aa   400000 2350 03	lda  	131072,du
004205  aa  7 00121 7551 00	sta  	pr7|81		ntype
						STATEMENT 1 ON LINE 516
	  action_codes.halt = "1"b;

004206  aa   040000 2350 07	lda  	16384,dl
004207  aa  7 00666 3715 20	epp5 	pr7|438,*		wseg_p
004210  aa  5 01172 2551 00	orsa 	pr5|634		wseg.halt
						STATEMENT 1 ON LINE 517
	  go to cont_pas;

004211  aa  7 00714 3521 00	epp2 	pr7|460		cont_pas
004212  aa  0 00660 7101 00	tra  	pr0|432		tra_ext_2
						STATEMENT 1 ON LINE 518
         end;

						STATEMENT 1 ON LINE 519
         if ^pas_sw & ^bf_sw then			/* if PFT and not in brief mode ... */
	  call ioa_ ("*** end ^a, next ^a ***", nxt_tst, new_tst);

004213  aa  7 00117 2351 00	lda  	pr7|79		pas_sw
004214  aa   000026 6010 04	tnz  	22,ic		004242
004215  aa  7 00110 2351 00	lda  	pr7|72		bf_sw
004216  aa   000024 6010 04	tnz  	20,ic		004242
004217  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
004220  aa   774646 00 0030	desc9a	-1626,24		001065 = 052052052040
004221  aa  6 00314 00 0030	desc9a	pr6|204,24
004222  aa  6 00314 3521 00	epp2 	pr6|204
004223  aa  6 00330 2521 00	spri2	pr6|216
004224  aa  7 00111 3521 00	epp2 	pr7|73		nxt_tst
004225  aa  6 00332 2521 00	spri2	pr6|218
004226  aa  7 00112 3521 00	epp2 	pr7|74		new_tst
004227  aa  6 00334 2521 00	spri2	pr6|220
004230  aa   774373 3520 04	epp2 	-1797,ic		000623 = 524000000027
004231  aa  6 00336 2521 00	spri2	pr6|222
004232  aa   774346 3520 04	epp2 	-1818,ic		000600 = 526000000003
004233  aa  6 00340 2521 00	spri2	pr6|224
004234  aa  6 00342 2521 00	spri2	pr6|226
004235  aa  6 00326 6211 00	eax1 	pr6|214
004236  aa   014000 4310 07	fld  	6144,dl
004237  aa  6 00044 3701 20	epp4 	pr6|36,*
004240  la  4 00102 3521 20	epp2 	pr4|66,*		ioa_
004241  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 521
         nxt_tst = new_tst;

004242  aa  6 00040 3735 20	epp7 	pr6|32,*
004243  aa  7 00112 2351 00	lda  	pr7|74		new_tst
004244  aa  7 00111 5511 70	stba 	pr7|73,70		nxt_tst
						STATEMENT 1 ON LINE 522
         if action.ld_spgm then			/* if slave program to be loaded */
	  pgm_offset = fixed (rel (addr (wseg.test_pgm)), 18);

004245  aa  7 00734 2351 00	lda  	pr7|476		action.ld_spgm
004246  aa   001000 3150 07	cana 	512,dl
004247  aa   000007 6000 04	tze  	7,ic		004256
004250  aa   100000 7270 07	lxl7 	32768,dl
004251  aa  7 00666 3715 77	epp5 	pr7|438,*7	wseg.test_pgm
004252  aa  5 00000 6351 00	eaa  	pr5|0
004253  aa   000066 7730 00	lrl  	54
004254  aa  7 00646 7561 00	stq  	pr7|422		pgm_offset
004255  aa   000517 7100 04	tra  	335,ic		004774
						STATEMENT 1 ON LINE 524
         else pgm_offset = 0;

004256  aa  7 00646 4501 00	stz  	pr7|422		pgm_offset
						STATEMENT 1 ON LINE 525
      end;

004257  aa   000515 7100 04	tra  	333,ic		004774
						STATEMENT 1 ON LINE 526
      else if action.wc_type | action.wc_eop | action.wc_opt then do;

004260  aa  7 00734 2351 00	lda  	pr7|476		action.wc_opt
004261  aa   000320 3150 07	cana 	208,dl
004262  aa   000177 6000 04	tze  	127,ic		004461
						STATEMENT 1 ON LINE 528
         call complete_err_mess;

004263  aa   001622 6700 04	tsp4 	914,ic		006105
						STATEMENT 1 ON LINE 529
         mptr = ptr (wseg_p, add_wc (1));

004264  aa  6 00040 3735 20	epp7 	pr6|32,*
004265  aa  7 00672 3715 20	epp5 	pr7|442,*		awcp
004266  aa  003 100 060 500	csl  	(pr),(pr),fill(0),bool(move)
004267  aa  5 00000 00 0022	descb	pr5|0,18		add_wc
004270  aa  6 00056 00 0044	descb	pr6|46,36
004271  aa  6 00056 2351 00	lda  	pr6|46
004272  aa   000066 7330 00	lrs  	54
004273  aa  7 00666 3521 20	epp2 	pr7|438,*		wseg_p
004274  aa   000000 3120 06	eawp2	0,ql
004275  aa  7 00674 2521 00	spri2	pr7|444		mptr
						STATEMENT 1 ON LINE 530
         bcd_chars = add_wc (2) * 6;

004276  aa  003 100 060 500	csl  	(pr),(pr),fill(0),bool(move)
004277  aa  5 00000 40 0022	descb	pr5|0(18),18	add_wc
004300  aa  6 00056 00 0044	descb	pr6|46,36
004301  aa  6 00056 2351 00	lda  	pr6|46
004302  aa   000066 7330 00	lrs  	54
004303  aa   000006 4020 07	mpy  	6,dl
004304  aa  7 00657 7561 00	stq  	pr7|431		bcd_chars
						STATEMENT 1 ON LINE 531
         call tolts_util_$bci_to_ascii (bcd_str, out_str, bcd_chars);

004305  aa   000006 4020 07	mpy  	6,dl
004306  aa  6 00301 7561 00	stq  	pr6|193
004307  aa   516000 2760 03	orq  	171008,du
004310  aa  6 00300 7561 00	stq  	pr6|192
004311  aa  6 00330 2521 00	spri2	pr6|216		bcd_str
004312  aa  7 00131 3521 00	epp2 	pr7|89		out_str
004313  aa  6 00332 2521 00	spri2	pr6|218
004314  aa  7 00657 3521 00	epp2 	pr7|431		bcd_chars
004315  aa  6 00334 2521 00	spri2	pr6|220
004316  aa  6 00300 3521 00	epp2 	pr6|192
004317  aa  6 00336 2521 00	spri2	pr6|222
004320  aa   774236 3520 04	epp2 	-1890,ic		000556 = 530000000210
004321  aa  6 00340 2521 00	spri2	pr6|224
004322  aa   774306 3520 04	epp2 	-1850,ic		000630 = 404000000021
004323  aa  6 00342 2521 00	spri2	pr6|226
004324  aa  6 00326 6211 00	eax1 	pr6|214
004325  aa   014000 4310 07	fld  	6144,dl
004326  aa  6 00044 3701 20	epp4 	pr6|36,*
004327  la  4 00040 3521 20	epp2 	pr4|32,*		tolts_util_$bci_to_ascii
004330  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 532
         if substr (out_str, 1, 1) = NL & length (out_str) > 2 then /* if new line strip it off */
	  out_str = substr (out_str, 2);

004331  aa  6 00040 3735 20	epp7 	pr6|32,*
004332  aa  7 00131 2351 00	lda  	pr7|89		out_str
004333  aa  0 00022 3771 00	anaq 	pr0|18		= 777000000000 000000000000
004334  aa   012000 1150 03	cmpa 	5120,du
004335  aa   000014 6010 04	tnz  	12,ic		004351
004336  aa  7 00130 2361 00	ldq  	pr7|88		out_str
004337  aa   000002 1160 07	cmpq 	2,dl
004340  aa   000011 6044 04	tmoz 	9,ic		004351
004341  aa   000001 1760 07	sbq  	1,dl
004342  aa   000210 1160 07	cmpq 	136,dl
004343  aa   000002 6040 04	tmi  	2,ic		004345
004344  aa   000210 2360 07	ldq  	136,dl
004345  aa  7 00130 7561 00	stq  	pr7|88		out_str
004346  aa  040 140 100 540	mlr  	(pr,rl),(pr,rl),fill(040)
004347  aa  7 00131 20 0006	desc9a	pr7|89(1),ql	out_str
004350  aa  7 00131 00 0006	desc9a	pr7|89,ql		out_str
						STATEMENT 1 ON LINE 534
         if action.wc_type & length (out_str) >= 1 then	/* if output to go on same line */
	  car_nz = "1"b;

004351  aa  7 00734 2351 00	lda  	pr7|476		action.wc_type
004352  aa   000020 3150 07	cana 	16,dl
004353  aa   000006 6000 04	tze  	6,ic		004361
004354  aa  7 00130 2361 00	ldq  	pr7|88		out_str
004355  aa   000001 1160 07	cmpq 	1,dl
004356  aa   000003 6040 04	tmi  	3,ic		004361
004357  aa   400000 2350 03	lda  	131072,du
004360  aa  7 00127 2551 00	orsa 	pr7|87		car_nz
						STATEMENT 1 ON LINE 536
         if action.wc_opt | action.wc_eop then option = "1"b;

004361  aa  7 00734 2351 00	lda  	pr7|476		action.wc_opt
004362  aa   000035 7350 00	als  	29
004363  aa  0 00002 3771 00	anaq 	pr0|2		= 400000000000 000000000000
004364  aa  6 00300 7551 00	sta  	pr6|192		action.wc_opt
004365  aa   000004 6010 04	tnz  	4,ic		004371
004366  aa  7 00734 2351 00	lda  	pr7|476		action.wc_eop
004367  aa   000200 3150 07	cana 	128,dl
004370  aa   000004 6000 04	tze  	4,ic		004374
004371  aa   400000 2350 03	lda  	131072,du
004372  aa  7 00123 7551 00	sta  	pr7|83		option
004373  aa   000002 7100 04	tra  	2,ic		004375
						STATEMENT 1 ON LINE 537
         else option = "0"b;

004374  aa  7 00123 4501 00	stz  	pr7|83		option
						STATEMENT 1 ON LINE 539
         if ^ntype then do;

004375  aa  7 00121 2351 00	lda  	pr7|81		ntype
004376  aa   000061 6010 04	tnz  	49,ic		004457
						STATEMENT 1 ON LINE 540
	  call ioa_$nnl ("^[^/^]^a^[^/^]", (car_nz & length (out_str) > 1),
	   out_str, (^action.wc_opt & length (out_str) > 1 & ^option));

004377  aa   774374 2350 04	lda  	-1796,ic		000773 = 136133136057
004400  aa   774374 2360 04	ldq  	-1796,ic		000774 = 136135136141
004401  aa  6 00302 7571 00	staq 	pr6|194
004402  aa   774373 2350 04	lda  	-1797,ic		000775 = 136133136057
004403  aa   136135 2360 03	ldq  	48221,du
004404  aa  6 00304 7571 00	staq 	pr6|196
004405  aa  7 00130 2361 00	ldq  	pr7|88		out_str
004406  aa   000001 1160 07	cmpq 	1,dl
004407  aa  0 00503 7001 00	tsx0 	pr0|323		r_g_a
004410  aa  6 00301 7551 00	sta  	pr6|193
004411  aa  7 00127 2351 00	lda  	pr7|87		car_nz
004412  aa  0 00002 3771 00	anaq 	pr0|2		= 400000000000 000000000000
004413  aa  6 00301 3751 00	ana  	pr6|193
004414  aa  6 00344 7551 00	sta  	pr6|228
004415  aa  7 00123 2351 00	lda  	pr7|83		option
004416  aa  0 00002 6751 00	era  	pr0|2		= 400000000000
004417  aa  6 00345 7551 00	sta  	pr6|229
004420  aa  6 00300 2351 00	lda  	pr6|192		action.wc_opt
004421  aa  0 00002 6751 00	era  	pr0|2		= 400000000000
004422  aa  6 00301 3751 00	ana  	pr6|193
004423  aa  6 00345 3751 00	ana  	pr6|229
004424  aa  6 00345 7551 00	sta  	pr6|229
004425  aa  6 00302 3521 00	epp2 	pr6|194
004426  aa  6 00350 2521 00	spri2	pr6|232
004427  aa  6 00344 3521 00	epp2 	pr6|228
004430  aa  6 00352 2521 00	spri2	pr6|234
004431  aa  7 00131 3521 00	epp2 	pr7|89		out_str
004432  aa  6 00354 2521 00	spri2	pr6|236
004433  aa  6 00345 3521 00	epp2 	pr6|229
004434  aa  6 00356 2521 00	spri2	pr6|238
004435  aa   774120 3520 04	epp2 	-1968,ic		000555 = 524000000016
004436  aa  6 00360 2521 00	spri2	pr6|240
004437  aa   774115 3520 04	epp2 	-1971,ic		000554 = 514000000001
004440  aa  6 00362 2521 00	spri2	pr6|242
004441  aa  6 00366 2521 00	spri2	pr6|246
004442  aa   774114 3520 04	epp2 	-1972,ic		000556 = 530000000210
004443  aa  6 00364 2521 00	spri2	pr6|244
004444  aa  6 00346 6211 00	eax1 	pr6|230
004445  aa   020000 4310 07	fld  	8192,dl
004446  aa  6 00044 3701 20	epp4 	pr6|36,*
004447  la  4 00110 3521 20	epp2 	pr4|72,*		ioa_$nnl
004450  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 542
	  if length (out_str) > 1 then car_nz = "0"b;

004451  aa  6 00040 3735 20	epp7 	pr6|32,*
004452  aa  7 00130 2361 00	ldq  	pr7|88		out_str
004453  aa   000001 1160 07	cmpq 	1,dl
004454  aa   000003 6044 04	tmoz 	3,ic		004457
004455  aa   004465 2350 04	lda  	2357,ic		011142 = 377777777777
004456  aa  7 00127 3551 00	ansa 	pr7|87		car_nz
						STATEMENT 1 ON LINE 543
         end;

						STATEMENT 1 ON LINE 544
         go to cont_pas;

004457  aa  7 00714 3521 00	epp2 	pr7|460		cont_pas
004460  aa  0 00660 7101 00	tra  	pr0|432		tra_ext_2
						STATEMENT 1 ON LINE 545
      end;

						STATEMENT 1 ON LINE 546
      else if action.read then			/* enter options request */
         call enter_options;

004461  aa  7 00734 2351 00	lda  	pr7|476		action.read
004462  aa   000040 3150 07	cana 	32,dl
004463  aa   000003 6000 04	tze  	3,ic		004466
004464  aa   000311 6700 04	tsp4 	201,ic		004775
004465  aa   000307 7100 04	tra  	199,ic		004774
						STATEMENT 1 ON LINE 548
      else if action.print then do;

004466  aa  7 00734 2351 00	lda  	pr7|476		action.print
004467  aa   000010 3150 07	cana 	8,dl
004470  aa   000304 6000 04	tze  	196,ic		004774
						STATEMENT 1 ON LINE 549
         mptr = ptr (wseg_p, add_wc (1));

004471  aa  7 00672 3715 20	epp5 	pr7|442,*		awcp
004472  aa  003 100 060 500	csl  	(pr),(pr),fill(0),bool(move)
004473  aa  5 00000 00 0022	descb	pr5|0,18		add_wc
004474  aa  6 00056 00 0044	descb	pr6|46,36
004475  aa  6 00056 2351 00	lda  	pr6|46
004476  aa   000066 7330 00	lrs  	54
004477  aa  7 00666 3521 20	epp2 	pr7|438,*		wseg_p
004500  aa   000000 3120 06	eawp2	0,ql
004501  aa  7 00674 2521 00	spri2	pr7|444		mptr
						STATEMENT 1 ON LINE 550
         mlen = add_wc (2);

004502  aa  003 100 060 500	csl  	(pr),(pr),fill(0),bool(move)
004503  aa  5 00000 40 0022	descb	pr5|0(18),18	add_wc
004504  aa  6 00056 00 0044	descb	pr6|46,36
004505  aa  6 00056 2351 00	lda  	pr6|46
004506  aa  6 00345 7561 00	stq  	pr6|229		add_wc
004507  aa   000066 7330 00	lrs  	54
004510  aa  7 00661 7561 00	stq  	pr7|433		mlen
						STATEMENT 1 ON LINE 551
         if dump_in_prog then				/* if we are getting dump reg info from pas2 */
	  call isolts_err_log_$dump (d_type, mptr, (mlen), 1, cpu_tag, scu_tag);

004511  aa  7 00125 2351 00	lda  	pr7|85		dump_in_prog
004512  aa  6 00344 7561 00	stq  	pr6|228		add_wc
004513  aa   000026 6000 04	tze  	22,ic		004541
004514  aa  6 00301 7561 00	stq  	pr6|193
004515  aa   000001 2360 07	ldq  	1,dl
004516  aa  6 00300 7561 00	stq  	pr6|192
004517  aa  7 00244 3521 00	epp2 	pr7|164		d_type
004520  aa  6 00330 2521 00	spri2	pr6|216
004521  aa  7 00674 3521 00	epp2 	pr7|444		mptr
004522  aa  6 00332 2521 00	spri2	pr6|218
004523  aa  6 00301 3521 00	epp2 	pr6|193
004524  aa  6 00334 2521 00	spri2	pr6|220
004525  aa  6 00300 3521 00	epp2 	pr6|192
004526  aa  6 00336 2521 00	spri2	pr6|222
004527  aa  7 00101 3521 00	epp2 	pr7|65		cpu_tag
004530  aa  6 00340 2521 00	spri2	pr6|224
004531  aa  7 00102 3521 00	epp2 	pr7|66		scu_tag
004532  aa  6 00342 2521 00	spri2	pr6|226
004533  aa  6 00326 6211 00	eax1 	pr6|214
004534  aa   030000 4310 07	fld  	12288,dl
004535  aa  6 00044 3701 20	epp4 	pr6|36,*
004536  la  4 00056 3521 20	epp2 	pr4|46,*		isolts_err_log_$dump
004537  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
004540  aa   000231 7100 04	tra  	153,ic		004771
						STATEMENT 1 ON LINE 553
         else if action.err | mess_in_prog then do;

004541  aa  7 00734 2351 00	lda  	pr7|476		action.err
004542  aa   000041 7350 00	als  	33
004543  aa  0 00002 3771 00	anaq 	pr0|2		= 400000000000 000000000000
004544  aa  6 00300 7551 00	sta  	pr6|192		action.err
004545  aa   000003 6010 04	tnz  	3,ic		004550
004546  aa  7 00120 2351 00	lda  	pr7|80		mess_in_prog
004547  aa   000141 6000 04	tze  	97,ic		004710
						STATEMENT 1 ON LINE 554
	  if mlen > 1 & mlen < 5 & ^mess_in_prog then do;

004550  aa  7 00661 2361 00	ldq  	pr7|433		mlen
004551  aa   000001 1160 07	cmpq 	1,dl
004552  aa   000064 6044 04	tmoz 	52,ic		004636
004553  aa   000005 1160 07	cmpq 	5,dl
004554  aa   000062 6050 04	tpl  	50,ic		004636
004555  aa  7 00120 2351 00	lda  	pr7|80		mess_in_prog
004556  aa   000060 6010 04	tnz  	48,ic		004636
						STATEMENT 1 ON LINE 555
	     mptr = ptr (wseg_p, add_wc (1));

004557  aa  6 00345 2361 00	ldq  	pr6|229		add_wc
004560  aa  7 00666 3515 20	epp1 	pr7|438,*		wseg_p
004561  aa   000000 3114 06	eawp1	0,ql
004562  aa  7 00674 2515 00	spri1	pr7|444		mptr
						STATEMENT 1 ON LINE 556
	     bcd_chars = add_wc (2) * 6;

004563  aa  6 00344 2361 00	ldq  	pr6|228		add_wc
004564  aa   000006 4020 07	mpy  	6,dl
004565  aa  7 00657 7561 00	stq  	pr7|431		bcd_chars
						STATEMENT 1 ON LINE 557
	     call tolts_util_$bci_to_ascii (bcd_str, out_str, bcd_chars);

004566  aa   000006 4020 07	mpy  	6,dl
004567  aa  6 00345 7561 00	stq  	pr6|229
004570  aa   516000 2760 03	orq  	171008,du
004571  aa  6 00344 7561 00	stq  	pr6|228
004572  aa  1 00000 3521 00	epp2 	pr1|0		bcd_str
004573  aa  6 00330 2521 00	spri2	pr6|216
004574  aa  7 00131 3521 00	epp2 	pr7|89		out_str
004575  aa  6 00332 2521 00	spri2	pr6|218
004576  aa  7 00657 3521 00	epp2 	pr7|431		bcd_chars
004577  aa  6 00334 2521 00	spri2	pr6|220
004600  aa  6 00344 3521 00	epp2 	pr6|228
004601  aa  6 00336 2521 00	spri2	pr6|222
004602  aa   773754 3520 04	epp2 	-2068,ic		000556 = 530000000210
004603  aa  6 00340 2521 00	spri2	pr6|224
004604  aa   774024 3520 04	epp2 	-2028,ic		000630 = 404000000021
004605  aa  6 00342 2521 00	spri2	pr6|226
004606  aa  6 00326 6211 00	eax1 	pr6|214
004607  aa   014000 4310 07	fld  	6144,dl
004610  aa  6 00044 3701 20	epp4 	pr6|36,*
004611  la  4 00040 3521 20	epp2 	pr4|32,*		tolts_util_$bci_to_ascii
004612  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 559
	     call ioa_ (" ^a", out_str);

004613  aa   773740 2350 04	lda  	-2080,ic		000553 = 040136141000
004614  aa  6 00344 7551 00	sta  	pr6|228
004615  aa  6 00344 3521 00	epp2 	pr6|228
004616  aa  6 00316 2521 00	spri2	pr6|206
004617  aa  6 00040 3735 20	epp7 	pr6|32,*
004620  aa  7 00131 3521 00	epp2 	pr7|89		out_str
004621  aa  6 00320 2521 00	spri2	pr6|208
004622  aa   773730 3520 04	epp2 	-2088,ic		000552 = 524000000003
004623  aa  6 00322 2521 00	spri2	pr6|210
004624  aa   773732 3520 04	epp2 	-2086,ic		000556 = 530000000210
004625  aa  6 00324 2521 00	spri2	pr6|212
004626  aa  6 00314 6211 00	eax1 	pr6|204
004627  aa   010000 4310 07	fld  	4096,dl
004630  aa  6 00044 3701 20	epp4 	pr6|36,*
004631  la  4 00102 3521 20	epp2 	pr4|66,*		ioa_
004632  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 560
	     go to cont_pas;

004633  aa  6 00040 3735 20	epp7 	pr6|32,*
004634  aa  7 00714 3521 00	epp2 	pr7|460		cont_pas
004635  aa  0 00660 7101 00	tra  	pr0|432		tra_ext_2
						STATEMENT 1 ON LINE 561
	  end;

						STATEMENT 1 ON LINE 562
	  else if action.err then do;

004636  aa  6 00300 2351 00	lda  	pr6|192		action.err
004637  aa   000026 6000 04	tze  	22,ic		004665
						STATEMENT 1 ON LINE 563
	     call complete_err_mess;

004640  aa   001245 6700 04	tsp4 	677,ic		006105
						STATEMENT 1 ON LINE 564
	     mess_in_prog = "1"b;

004641  aa   400000 2350 03	lda  	131072,du
004642  aa  6 00040 3735 20	epp7 	pr6|32,*
004643  aa  7 00120 7551 00	sta  	pr7|80		mess_in_prog
						STATEMENT 1 ON LINE 565
	     mtype = 1;

004644  aa   000001 2360 07	ldq  	1,dl
004645  aa  7 00660 7561 00	stq  	pr7|432		mtype
						STATEMENT 1 ON LINE 566
	     if ^run then do;

004646  aa  7 00122 2351 00	lda  	pr7|82		run
004647  aa   000020 6010 04	tnz  	16,ic		004667
						STATEMENT 1 ON LINE 567
	        call ioa_ ("^/*** an error has occurred ***^/");

004650  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
004651  aa   774337 00 0044	desc9a	-1825,36		001207 = 136057052052
004652  aa  6 00302 00 0044	desc9a	pr6|194,36
004653  aa  6 00302 3521 00	epp2 	pr6|194
004654  aa  6 00316 2521 00	spri2	pr6|206
004655  aa   773674 3520 04	epp2 	-2116,ic		000551 = 524000000041
004656  aa  6 00320 2521 00	spri2	pr6|208
004657  aa  6 00314 6211 00	eax1 	pr6|204
004660  aa   004000 4310 07	fld  	2048,dl
004661  aa  6 00044 3701 20	epp4 	pr6|36,*
004662  la  4 00102 3521 20	epp2 	pr4|66,*		ioa_
004663  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 569
	     end;

						STATEMENT 1 ON LINE 570
	  end;

004664  aa   000003 7100 04	tra  	3,ic		004667
						STATEMENT 1 ON LINE 571
	  else mtype = 2;

004665  aa   000002 2360 07	ldq  	2,dl
004666  aa  7 00660 7561 00	stq  	pr7|432		mtype
						STATEMENT 1 ON LINE 572
	  call isolts_err_log_$write (mptr, mlen, mtype, cpu_tag, scu_tag);

004667  aa  6 00040 3735 20	epp7 	pr6|32,*
004670  aa  7 00674 3521 00	epp2 	pr7|444		mptr
004671  aa  6 00330 2521 00	spri2	pr6|216
004672  aa  7 00661 3521 00	epp2 	pr7|433		mlen
004673  aa  6 00332 2521 00	spri2	pr6|218
004674  aa  7 00660 3521 00	epp2 	pr7|432		mtype
004675  aa  6 00334 2521 00	spri2	pr6|220
004676  aa  7 00101 3521 00	epp2 	pr7|65		cpu_tag
004677  aa  6 00336 2521 00	spri2	pr6|222
004700  aa  7 00102 3521 00	epp2 	pr7|66		scu_tag
004701  aa  6 00340 2521 00	spri2	pr6|224
004702  aa  6 00326 6211 00	eax1 	pr6|214
004703  aa   024000 4310 07	fld  	10240,dl
004704  aa  6 00044 3701 20	epp4 	pr6|36,*
004705  la  4 00052 3521 20	epp2 	pr4|42,*		isolts_err_log_$write
004706  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 573
         end;

004707  aa   000062 7100 04	tra  	50,ic		004771
						STATEMENT 1 ON LINE 574
         else do;

						STATEMENT 1 ON LINE 575
	  bcd_chars = mlen * 6;

004710  aa  7 00661 2361 00	ldq  	pr7|433		mlen
004711  aa   000006 4020 07	mpy  	6,dl
004712  aa  7 00657 7561 00	stq  	pr7|431		bcd_chars
						STATEMENT 1 ON LINE 576
	  call tolts_util_$bci_to_ascii (bcd_str, out_str, bcd_chars);

004713  aa   000006 4020 07	mpy  	6,dl
004714  aa  6 00344 7561 00	stq  	pr6|228
004715  aa   516000 2760 03	orq  	171008,du
004716  aa  6 00300 7561 00	stq  	pr6|192
004717  aa  6 00330 2521 00	spri2	pr6|216		bcd_str
004720  aa  7 00131 3521 00	epp2 	pr7|89		out_str
004721  aa  6 00332 2521 00	spri2	pr6|218
004722  aa  7 00657 3521 00	epp2 	pr7|431		bcd_chars
004723  aa  6 00334 2521 00	spri2	pr6|220
004724  aa  6 00300 3521 00	epp2 	pr6|192
004725  aa  6 00336 2521 00	spri2	pr6|222
004726  aa   773630 3520 04	epp2 	-2152,ic		000556 = 530000000210
004727  aa  6 00340 2521 00	spri2	pr6|224
004730  aa   773700 3520 04	epp2 	-2112,ic		000630 = 404000000021
004731  aa  6 00342 2521 00	spri2	pr6|226
004732  aa  6 00326 6211 00	eax1 	pr6|214
004733  aa   014000 4310 07	fld  	6144,dl
004734  aa  6 00044 3701 20	epp4 	pr6|36,*
004735  la  4 00040 3521 20	epp2 	pr4|32,*		tolts_util_$bci_to_ascii
004736  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 578
	  if ^bf_sw then do;

004737  aa  6 00040 3735 20	epp7 	pr6|32,*
004740  aa  7 00110 2351 00	lda  	pr7|72		bf_sw
004741  aa   000030 6010 04	tnz  	24,ic		004771
						STATEMENT 1 ON LINE 579
	     call ioa_ ("^[^/^]^a", car_nz, out_str);

004742  aa   774031 2350 04	lda  	-2023,ic		000773 = 136133136057
004743  aa   774031 2360 04	ldq  	-2023,ic		000774 = 136135136141
004744  aa  6 00370 7571 00	staq 	pr6|248
004745  aa  6 00370 3521 00	epp2 	pr6|248
004746  aa  6 00330 2521 00	spri2	pr6|216
004747  aa  7 00127 3521 00	epp2 	pr7|87		car_nz
004750  aa  6 00332 2521 00	spri2	pr6|218
004751  aa  7 00131 3521 00	epp2 	pr7|89		out_str
004752  aa  6 00334 2521 00	spri2	pr6|220
004753  aa   773575 3520 04	epp2 	-2179,ic		000550 = 524000000010
004754  aa  6 00336 2521 00	spri2	pr6|222
004755  aa   773661 3520 04	epp2 	-2127,ic		000636 = 516000000001
004756  aa  6 00340 2521 00	spri2	pr6|224
004757  aa   773577 3520 04	epp2 	-2177,ic		000556 = 530000000210
004760  aa  6 00342 2521 00	spri2	pr6|226
004761  aa  6 00326 6211 00	eax1 	pr6|214
004762  aa   014000 4310 07	fld  	6144,dl
004763  aa  6 00044 3701 20	epp4 	pr6|36,*
004764  la  4 00102 3521 20	epp2 	pr4|66,*		ioa_
004765  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 580
	     car_nz = "0"b;

004766  aa   004154 2350 04	lda  	2156,ic		011142 = 377777777777
004767  aa  6 00040 3735 20	epp7 	pr6|32,*
004770  aa  7 00127 3551 00	ansa 	pr7|87		car_nz
						STATEMENT 1 ON LINE 581
	  end;

						STATEMENT 1 ON LINE 582
         end;

						STATEMENT 1 ON LINE 583
         go to cont_pas;

004771  aa  6 00040 3735 20	epp7 	pr6|32,*
004772  aa  7 00714 3521 00	epp2 	pr7|460		cont_pas
004773  aa  0 00660 7101 00	tra  	pr0|432		tra_ext_2
						STATEMENT 1 ON LINE 584
      end;

						STATEMENT 1 ON LINE 586
   end interpret_action;

004774  aa  6 00106 6101 00	rtcd 	pr6|70
  END PROCEDURE interpret_action
BEGIN PROCEDURE enter_options
ENTRY TO enter_options                                      STATEMENT 1 ON LINE 592
enter_options: proc;

004775  aa  6 00114 6501 00	spri4	pr6|76
						STATEMENT 1 ON LINE 594
      add_opt = "";

004776  aa   773706 2370 04	ldaq 	-2106,ic		000704 = 040040040040 040040000000
004777  aa  6 00040 3735 20	epp7 	pr6|32,*
005000  aa  7 00234 7571 00	staq 	pr7|156		add_opt
						STATEMENT 1 ON LINE 595
      mptr = ptr (wseg_p, add_wc (1));

005001  aa  7 00672 3715 20	epp5 	pr7|442,*		awcp
005002  aa  003 100 060 500	csl  	(pr),(pr),fill(0),bool(move)
005003  aa  5 00000 00 0022	descb	pr5|0,18		add_wc
005004  aa  6 00056 00 0044	descb	pr6|46,36
005005  aa  6 00056 2351 00	lda  	pr6|46
005006  aa   000066 7330 00	lrs  	54
005007  aa  7 00666 3521 20	epp2 	pr7|438,*		wseg_p
005010  aa   000000 3120 06	eawp2	0,ql
005011  aa  7 00674 2521 00	spri2	pr7|444		mptr
						STATEMENT 1 ON LINE 596
      eopt = opt_mess;

005012  aa   000277 3520 04	epp2 	191,ic		005311 = 136141235003
005013  aa  7 00730 2521 00	spri2	pr7|472		eopt
005014  aa  7 00732 6521 00	spri6	pr7|474		eopt
						STATEMENT 1 ON LINE 597
      if dump_in_prog then do;

005015  aa  7 00125 2351 00	lda  	pr7|85		dump_in_prog
005016  aa   000036 6000 04	tze  	30,ic		005054
						STATEMENT 1 ON LINE 598
         idump = "0"b;

005017  aa  7 00126 4501 00	stz  	pr7|86		idump
						STATEMENT 1 ON LINE 599
         call isolts_err_log_$dump (d_type, addrel (wseg_p, first), last,
	2, cpu_tag, scu_tag);

005020  aa  7 00647 2361 00	ldq  	pr7|423		first
005021  aa  7 00666 3521 66	epp2 	pr7|438,*ql	wseg_p
005022  aa   000000 0520 03	adwp2	0,du
005023  aa  6 00372 2521 00	spri2	pr6|250
005024  aa   000002 2360 07	ldq  	2,dl
005025  aa  6 00374 7561 00	stq  	pr6|252
005026  aa  7 00244 3521 00	epp2 	pr7|164		d_type
005027  aa  6 00400 2521 00	spri2	pr6|256
005030  aa  6 00372 3521 00	epp2 	pr6|250
005031  aa  6 00402 2521 00	spri2	pr6|258
005032  aa  7 00650 3521 00	epp2 	pr7|424		last
005033  aa  6 00404 2521 00	spri2	pr6|260
005034  aa  6 00374 3521 00	epp2 	pr6|252
005035  aa  6 00406 2521 00	spri2	pr6|262
005036  aa  7 00101 3521 00	epp2 	pr7|65		cpu_tag
005037  aa  6 00410 2521 00	spri2	pr6|264
005040  aa  7 00102 3521 00	epp2 	pr7|66		scu_tag
005041  aa  6 00412 2521 00	spri2	pr6|266
005042  aa  6 00376 6211 00	eax1 	pr6|254
005043  aa   030000 4310 07	fld  	12288,dl
005044  aa  6 00044 3701 20	epp4 	pr6|36,*
005045  la  4 00056 3521 20	epp2 	pr4|46,*		isolts_err_log_$dump
005046  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 601
         idump, ntype, dump_in_prog = "0"b;

005047  aa  6 00040 3735 20	epp7 	pr6|32,*
005050  aa  7 00126 4501 00	stz  	pr7|86		idump
005051  aa  7 00121 4501 00	stz  	pr7|81		ntype
005052  aa  7 00125 4501 00	stz  	pr7|85		dump_in_prog
						STATEMENT 1 ON LINE 602
         go to opt_mess;

005053  aa   000236 7100 04	tra  	158,ic		005311
						STATEMENT 1 ON LINE 603
      end;

						STATEMENT 1 ON LINE 604
      if ntype then do;

005054  aa  7 00121 2351 00	lda  	pr7|81		ntype
005055  aa   000032 6000 04	tze  	26,ic		005107
						STATEMENT 1 ON LINE 605
         ntype = "0"b;

005056  aa  7 00121 4501 00	stz  	pr7|81		ntype
						STATEMENT 1 ON LINE 606
         bcd_chars = 6;

005057  aa   000006 2360 07	ldq  	6,dl
005060  aa  7 00657 7561 00	stq  	pr7|431		bcd_chars
						STATEMENT 1 ON LINE 607
         call tolts_alm_util_$ascii_to_bci_ ("seq", bcd_str);

005061  aa   000006 4020 07	mpy  	6,dl
005062  aa  6 00375 7561 00	stq  	pr6|253
005063  aa   516000 2760 03	orq  	171008,du
005064  aa  6 00374 7561 00	stq  	pr6|252
005065  aa   773462 2350 04	lda  	-2254,ic		000547 = 163145161000
005066  aa  6 00414 7551 00	sta  	pr6|268
005067  aa  6 00414 3521 00	epp2 	pr6|268
005070  aa  6 00400 2521 00	spri2	pr6|256
005071  aa  7 00674 3521 20	epp2 	pr7|444,*		bcd_str
005072  aa  6 00402 2521 00	spri2	pr6|258
005073  aa   773457 3520 04	epp2 	-2257,ic		000552 = 524000000003
005074  aa  6 00404 2521 00	spri2	pr6|260
005075  aa  6 00374 3521 00	epp2 	pr6|252
005076  aa  6 00406 2521 00	spri2	pr6|262
005077  aa  6 00376 6211 00	eax1 	pr6|254
005100  aa   010000 4310 07	fld  	4096,dl
005101  aa  6 00044 3701 20	epp4 	pr6|36,*
005102  la  4 00076 3521 20	epp2 	pr4|62,*		tolts_alm_util_$ascii_to_bci_
005103  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 609
         go to cont_pas;

005104  aa  6 00040 3735 20	epp7 	pr6|32,*
005105  aa  7 00714 3521 00	epp2 	pr7|460		cont_pas
005106  aa  0 00660 7101 00	tra  	pr0|432		tra_ext_2
						STATEMENT 1 ON LINE 610
      end;

						STATEMENT 1 ON LINE 612
reenter:
      call tolts_util_$query (" ", com_string, c_len, args, cmd_cnt);

005107  aa   040000 2350 03	lda  	16384,du
005110  aa  6 00374 7551 00	sta  	pr6|252
005111  aa  6 00374 3521 00	epp2 	pr6|252
005112  aa  6 00420 2521 00	spri2	pr6|272
005113  aa  6 00040 3735 20	epp7 	pr6|32,*
005114  aa  7 00173 3521 00	epp2 	pr7|123		com_string
005115  aa  6 00422 2521 00	spri2	pr6|274
005116  aa  7 00656 3521 00	epp2 	pr7|430		c_len
005117  aa  6 00424 2521 00	spri2	pr6|276
005120  aa  7 00247 3521 00	epp2 	pr7|167		args
005121  aa  6 00426 2521 00	spri2	pr6|278
005122  aa  7 00651 3521 00	epp2 	pr7|425		cmd_cnt
005123  aa  6 00430 2521 00	spri2	pr6|280
005124  aa   773443 3520 04	epp2 	-2269,ic		000567 = 524000000001
005125  aa  6 00432 2521 00	spri2	pr6|282
005126  aa   773503 3520 04	epp2 	-2237,ic		000631 = 524000000204
005127  aa  6 00434 2521 00	spri2	pr6|284
005130  aa   773500 3520 04	epp2 	-2240,ic		000630 = 404000000021
005131  aa  6 00436 2521 00	spri2	pr6|286
005132  aa  6 00442 2521 00	spri2	pr6|290
005133  aa   773654 3520 04	epp2 	-2132,ic		001007 = 530100000034
005134  aa  6 00440 2521 00	spri2	pr6|288
005135  aa  6 00416 6211 00	eax1 	pr6|270
005136  aa   024000 4310 07	fld  	10240,dl
005137  aa  6 00044 3701 20	epp4 	pr6|36,*
005140  la  4 00036 3521 20	epp2 	pr4|30,*		tolts_util_$query
005141  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 614
      if cmd_cnt = 0 then do;

005142  aa  6 00040 3735 20	epp7 	pr6|32,*
005143  aa  7 00651 2361 00	ldq  	pr7|425		cmd_cnt
005144  aa   000004 6010 04	tnz  	4,ic		005150
						STATEMENT 1 ON LINE 615
         option = "0"b;

005145  aa  7 00123 4501 00	stz  	pr7|83		option
						STATEMENT 1 ON LINE 616
         go to cont_pas;

005146  aa  7 00714 3521 00	epp2 	pr7|460		cont_pas
005147  aa  0 00660 7101 00	tra  	pr0|432		tra_ext_2
						STATEMENT 1 ON LINE 617
      end;

						STATEMENT 1 ON LINE 621
      if option then do;

005150  aa  7 00123 2351 00	lda  	pr7|83		option
005151  aa   000353 6000 04	tze  	235,ic		005524
						STATEMENT 1 ON LINE 622
         if ck_isolts_opt () then			/* if isolts option, it has already been done */
	  go to opt_mess;

005152  aa   003764 3520 04	epp2 	2036,ic		011136 = 000002000000
005153  aa   001073 6700 04	tsp4 	571,ic		006246
005154  aa  6 00374 2351 00	lda  	pr6|252
005155  aa   400000 3150 03	cana 	131072,du
005156  aa   000133 6010 04	tnz  	91,ic		005311
						STATEMENT 1 ON LINE 624
         else do;

						STATEMENT 1 ON LINE 625
	  k = 0;

005157  aa  6 00040 3735 20	epp7 	pr6|32,*
005160  aa  7 00655 4501 00	stz  	pr7|429		k
						STATEMENT 1 ON LINE 626
	  trm1 = "0"b;

005161  aa  7 00116 4501 00	stz  	pr7|78		trm1
						STATEMENT 1 ON LINE 627
	  if cmd_cnt > 0 then do;

005162  aa  7 00651 2361 00	ldq  	pr7|425		cmd_cnt
005163  aa   000066 6044 04	tmoz 	54,ic		005251
						STATEMENT 1 ON LINE 628
	     do i = 1 to cmd_cnt while (^trm1);

005164  aa  6 00122 7561 00	stq  	pr6|82
005165  aa   000001 2360 07	ldq  	1,dl
005166  aa  7 00653 7561 00	stq  	pr7|427		i
005167  aa   000000 0110 03	nop  	0,du
005170  aa  6 00040 3735 20	epp7 	pr6|32,*
005171  aa  7 00653 2361 00	ldq  	pr7|427		i
005172  aa  6 00122 1161 00	cmpq 	pr6|82
005173  aa   000056 6054 04	tpnz 	46,ic		005251
005174  aa  7 00116 2351 00	lda  	pr7|78		trm1
005175  aa   000054 6010 04	tnz  	44,ic		005251
						STATEMENT 1 ON LINE 629
	        if length (args (i)) > 2 then do;

005176  aa   000003 7360 00	qls  	3
005177  aa  6 00374 7561 00	stq  	pr6|252
005200  aa  7 00236 2361 06	ldq  	pr7|158,ql	args
005201  aa   000002 1160 07	cmpq 	2,dl
005202  aa   000014 6044 04	tmoz 	12,ic		005216
						STATEMENT 1 ON LINE 630
		 if substr (args (i), 1, 3) = "prg"
		  | substr (args (i), 1, 3) = "tst" then
		    k = i;

005203  aa  6 00374 7271 00	lxl7 	pr6|252
005204  aa  7 00237 2351 17	lda  	pr7|159,7		args
005205  aa  0 00066 3771 00	anaq 	pr0|54		= 777777777000 000000000000
005206  aa  6 00374 7551 00	sta  	pr6|252		args
005207  aa   773337 1150 04	cmpa 	-2337,ic		000546 = 160162147000
005210  aa   000003 6000 04	tze  	3,ic		005213
005211  aa   773334 1150 04	cmpa 	-2340,ic		000545 = 164163164000
005212  aa   000035 6010 04	tnz  	29,ic		005247
005213  aa  7 00653 2361 00	ldq  	pr7|427		i
005214  aa  7 00655 7561 00	stq  	pr7|429		k
						STATEMENT 1 ON LINE 633
	        end;

005215  aa   000032 7100 04	tra  	26,ic		005247
						STATEMENT 1 ON LINE 634
	        else
		 do j = 1 to hbound (illegal_pas_opt, 1) while (^trm1);

005216  aa   000001 2360 07	ldq  	1,dl
005217  aa  7 00654 7561 00	stq  	pr7|428		j
005220  aa  6 00040 3735 20	epp7 	pr6|32,*
005221  aa  7 00654 2361 00	ldq  	pr7|428		j
005222  aa   000002 1160 07	cmpq 	2,dl
005223  aa   000024 6054 04	tpnz 	20,ic		005247
005224  aa  7 00116 2351 00	lda  	pr7|78		trm1
005225  aa   000022 6010 04	tnz  	18,ic		005247
						STATEMENT 1 ON LINE 636
		 if args (i) = illegal_pas_opt (j) then
		    trm1 = "1"b;

005226  aa  7 00653 2361 00	ldq  	pr7|427		i
005227  aa   000003 7360 00	qls  	3
005230  aa   000000 6270 06	eax7 	0,ql
005231  aa  7 00654 2361 00	ldq  	pr7|428		j
005232  aa   000003 4020 07	mpy  	3,dl
005233  aa  7 00237 3715 17	epp5 	pr7|159,7		args
005234  ta   000437 3534 06	epp3 	287,ql
005235  aa  5 77777 7261 00	lxl6 	pr5|-1		args
005236  aa  3 77777 7251 00	lxl5 	pr3|-1		illegal_pas_opt
005237  aa  040 140 106 540	cmpc 	(pr,rl),(pr,rl),fill(040)
005240  aa  5 00000 00 0016	desc9a	pr5|0,x6		args
005241  aa  3 00000 00 0015	desc9a	pr3|0,x5		illegal_pas_opt
005242  aa   000003 6010 04	tnz  	3,ic		005245
005243  aa   400000 2350 03	lda  	131072,du
005244  aa  7 00116 7551 00	sta  	pr7|78		trm1
						STATEMENT 1 ON LINE 638
	        end;

005245  aa  7 00654 0541 00	aos  	pr7|428		j
005246  aa   777752 7100 04	tra  	-22,ic		005220
						STATEMENT 1 ON LINE 639
	     end;

005247  aa  7 00653 0541 00	aos  	pr7|427		i
005250  aa   777720 7100 04	tra  	-48,ic		005170
						STATEMENT 1 ON LINE 640
	  end;

						STATEMENT 1 ON LINE 641
	  if trm1 then do;

005251  aa  7 00116 2351 00	lda  	pr7|78		trm1
005252  aa   000060 6000 04	tze  	48,ic		005332
						STATEMENT 1 ON LINE 642
	     call com_err_ (0, pname, "^a option not supported by ^a", args (i - 1), pname);

005253  aa  6 00374 4501 00	stz  	pr6|252
005254  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
005255  aa   773672 00 0040	desc9a	-2118,32		001146 = 136141040157
005256  aa  6 00376 00 0040	desc9a	pr6|254,32
005257  aa  7 00653 2361 00	ldq  	pr7|427		i
005260  aa   000003 7360 00	qls  	3
005261  aa  6 00374 3521 00	epp2 	pr6|252
005262  aa  6 00420 2521 00	spri2	pr6|272
005263  aa   773211 3520 04	epp2 	-2423,ic		000474 = 151163157154
005264  aa  6 00422 2521 00	spri2	pr6|274
005265  aa  6 00376 3521 00	epp2 	pr6|254
005266  aa  6 00424 2521 00	spri2	pr6|276
005267  aa  7 00227 3521 06	epp2 	pr7|151,ql	args
005270  aa  6 00426 2521 00	spri2	pr6|278
005271  aa   773203 3520 04	epp2 	-2429,ic		000474 = 151163157154
005272  aa  6 00430 2521 00	spri2	pr6|280
005273  aa   773332 3520 04	epp2 	-2342,ic		000625 = 404000000005
005274  aa  6 00432 2521 00	spri2	pr6|282
005275  aa   773327 3520 04	epp2 	-2345,ic		000624 = 526000000006
005276  aa  6 00434 2521 00	spri2	pr6|284
005277  aa  6 00442 2521 00	spri2	pr6|290
005300  aa   773275 3520 04	epp2 	-2371,ic		000575 = 524000000035
005301  aa  6 00436 2521 00	spri2	pr6|286
005302  aa   773242 3520 04	epp2 	-2398,ic		000544 = 530000000034
005303  aa  6 00440 2521 00	spri2	pr6|288
005304  aa  6 00416 6211 00	eax1 	pr6|270
005305  aa   024000 4310 07	fld  	10240,dl
005306  aa  6 00044 3701 20	epp4 	pr6|36,*
005307  la  4 00104 3521 20	epp2 	pr4|68,*		com_err_
005310  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 643
opt_mess:	     call ioa_$nnl ("^a", out_str);

005311  aa   136141 2350 03	lda  	48225,du
005312  aa  6 00374 7551 00	sta  	pr6|252
005313  aa  6 00374 3521 00	epp2 	pr6|252
005314  aa  6 00400 2521 00	spri2	pr6|256
005315  aa  6 00040 3735 20	epp7 	pr6|32,*
005316  aa  7 00131 3521 00	epp2 	pr7|89		out_str
005317  aa  6 00402 2521 00	spri2	pr6|258
005320  aa   773242 3520 04	epp2 	-2398,ic		000562 = 524000000002
005321  aa  6 00404 2521 00	spri2	pr6|260
005322  aa   773234 3520 04	epp2 	-2404,ic		000556 = 530000000210
005323  aa  6 00406 2521 00	spri2	pr6|262
005324  aa  6 00376 6211 00	eax1 	pr6|254
005325  aa   010000 4310 07	fld  	4096,dl
005326  aa  6 00044 3701 20	epp4 	pr6|36,*
005327  la  4 00110 3521 20	epp2 	pr4|72,*		ioa_$nnl
005330  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 644
	     go to reenter;

005331  aa   777556 7100 04	tra  	-146,ic		005107
						STATEMENT 1 ON LINE 645
	  end;

						STATEMENT 1 ON LINE 646
	  if k ^= 0 then do;

005332  aa  7 00655 2361 00	ldq  	pr7|429		k
005333  aa   000067 6000 04	tze  	55,ic		005422
						STATEMENT 1 ON LINE 647
	     do i = 1 to hbound (inv_tst_ids, 1) while (substr (args (k), 4, 3) ^= inv_tst_ids (i));

005334  aa   000001 2360 07	ldq  	1,dl
005335  aa  7 00653 7561 00	stq  	pr7|427		i
005336  aa  6 00040 3735 20	epp7 	pr6|32,*
005337  aa  7 00653 2361 00	ldq  	pr7|427		i
005340  aa   000026 1160 07	cmpq 	22,dl
005341  aa   000017 6054 04	tpnz 	15,ic		005360
005342  aa  7 00655 2361 00	ldq  	pr7|429		k
005343  aa   000003 7360 00	qls  	3
005344  aa   000000 6270 06	eax7 	0,ql
005345  aa  7 00653 2361 00	ldq  	pr7|427		i
005346  aa   000003 4020 07	mpy  	3,dl
005347  aa  7 00237 3715 17	epp5 	pr7|159,7		args
005350  aa   000003 7260 07	lxl6 	3,dl
005351  aa  5 00000 5005 16	a9bd 	pr5|0,6
005352  aa  040 006 106 500	cmpc 	(pr),(ql),fill(040)
005353  aa  5 00000 00 0003	desc9a	pr5|0,3		args
005354  ta   000446 20 0003	desc9a	294(1),3
005355  aa   000003 6000 04	tze  	3,ic		005360
						STATEMENT 1 ON LINE 648
	     end;

005356  aa  7 00653 0541 00	aos  	pr7|427		i
005357  aa   777757 7100 04	tra  	-17,ic		005336
						STATEMENT 1 ON LINE 649
	     if i <= hbound (inv_tst_ids, 1) then do;

005360  aa  7 00653 2361 00	ldq  	pr7|427		i
005361  aa   000026 1160 07	cmpq 	22,dl
005362  aa   000040 6054 04	tpnz 	32,ic		005422
						STATEMENT 1 ON LINE 650
	        call com_err_ (0, pname, "^a not supported by ^a",
	         args (k), pname);

005363  aa  6 00374 4501 00	stz  	pr6|252
005364  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
005365  aa   773473 00 0030	desc9a	-2245,24		001057 = 136141040156
005366  aa  6 00376 00 0030	desc9a	pr6|254,24
005367  aa  7 00655 2361 00	ldq  	pr7|429		k
005370  aa   000003 7360 00	qls  	3
005371  aa  6 00374 3521 00	epp2 	pr6|252
005372  aa  6 00420 2521 00	spri2	pr6|272
005373  aa   773101 3520 04	epp2 	-2495,ic		000474 = 151163157154
005374  aa  6 00422 2521 00	spri2	pr6|274
005375  aa  6 00376 3521 00	epp2 	pr6|254
005376  aa  6 00424 2521 00	spri2	pr6|276
005377  aa  7 00237 3521 06	epp2 	pr7|159,ql	args
005400  aa  6 00426 2521 00	spri2	pr6|278
005401  aa   773073 3520 04	epp2 	-2501,ic		000474 = 151163157154
005402  aa  6 00430 2521 00	spri2	pr6|280
005403  aa   773222 3520 04	epp2 	-2414,ic		000625 = 404000000005
005404  aa  6 00432 2521 00	spri2	pr6|282
005405  aa   773217 3520 04	epp2 	-2417,ic		000624 = 526000000006
005406  aa  6 00434 2521 00	spri2	pr6|284
005407  aa  6 00442 2521 00	spri2	pr6|290
005410  aa   773133 3520 04	epp2 	-2469,ic		000543 = 524000000026
005411  aa  6 00436 2521 00	spri2	pr6|286
005412  aa   773132 3520 04	epp2 	-2470,ic		000544 = 530000000034
005413  aa  6 00440 2521 00	spri2	pr6|288
005414  aa  6 00416 6211 00	eax1 	pr6|270
005415  aa   024000 4310 07	fld  	10240,dl
005416  aa  6 00044 3701 20	epp4 	pr6|36,*
005417  la  4 00104 3521 20	epp2 	pr4|68,*		com_err_
005420  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 652
	        go to opt_mess;

005421  aa   777670 7100 04	tra  	-72,ic		005311
						STATEMENT 1 ON LINE 653
	     end;

						STATEMENT 1 ON LINE 654
	  end;

						STATEMENT 1 ON LINE 655
	  if add_opt ^= "" then			/* if additional option */
	     com_string = rtrim (com_string) || " " || add_opt;

005422  aa   000000 4310 07	fld  	0,dl
005423  aa  0 00440 2771 00	oraq 	pr0|288		= 040040040040 040040040040
005424  aa  0 00154 3771 00	anaq 	pr0|108		= 777777777777 777777000000
005425  aa  7 00234 1171 00	cmpaq	pr7|156		add_opt
005426  aa   000040 6000 04	tze  	32,ic		005466
005427  aa  000 000 165 500	tctr 	(pr)
005430  aa  7 00173 00 0204	desc9a	pr7|123,132	com_string
005431  aa  0 76605 0001 00	arg  	pr0|-635		= 777777777777
005432  aa  6 00056 0001 00	arg  	pr6|46
005433  aa  6 00056 2361 00	ldq  	pr6|46
005434  aa  0 00242 3761 00	anq  	pr0|162		= 000777777777
005435  aa  6 00374 7561 00	stq  	pr6|252
005436  aa   000204 2360 07	ldq  	132,dl
005437  aa  6 00374 1761 00	sbq  	pr6|252
005440  aa  6 00374 7561 00	stq  	pr6|252
005441  aa   000001 0760 07	adq  	1,dl
005442  aa  0 00551 7001 00	tsx0 	pr0|361		alloc_char_temp
005443  aa  6 00374 2351 00	lda  	pr6|252
005444  aa  040 140 100 540	mlr  	(pr,rl),(pr,rl),fill(040)
005445  aa  7 00173 00 0005	desc9a	pr7|123,al	com_string
005446  aa  2 00000 00 0005	desc9a	pr2|0,al
005447  aa  040 105 100 404	mlr  	(ic),(pr,al),fill(040)
005450  aa   003520 00 0001	desc9a	1872,1		011167 = 040000000000
005451  aa  2 00000 00 0001	desc9a	pr2|0,1
005452  aa  6 00374 7561 00	stq  	pr6|252
005453  aa   000006 0760 07	adq  	6,dl
005454  aa  6 00415 7561 00	stq  	pr6|269
005455  aa  0 00606 7001 00	tsx0 	pr0|390		cat_realloc_chars
005456  aa  6 00374 2351 00	lda  	pr6|252
005457  aa  040 105 100 500	mlr  	(pr),(pr,al),fill(040)
005460  aa  7 00234 00 0006	desc9a	pr7|156,6		add_opt
005461  aa  2 00000 00 0006	desc9a	pr2|0,6
005462  aa  6 00415 2361 00	ldq  	pr6|269
005463  aa  040 100 100 540	mlr  	(pr,rl),(pr),fill(040)
005464  aa  2 00000 00 0006	desc9a	pr2|0,ql
005465  aa  7 00173 00 0204	desc9a	pr7|123,132	com_string
						STATEMENT 1 ON LINE 657
	  if index (com_string, "run") ^= 0 then	/* if run option specified */
	     run = "1"b;

005466  aa  0 01014 7001 00	tsx0 	pr0|524		shorten_stack
005467  aa   000204 2360 07	ldq  	132,dl
005470  aa  7 00173 3521 00	epp2 	pr7|123		com_string
005471  aa  0 01227 7001 00	tsx0 	pr0|663		set_chars_eis
005472  aa   000003 2360 07	ldq  	3,dl
005473  aa   773047 3520 04	epp2 	-2521,ic		000542 = 162165156000
005474  aa  0 01231 7001 00	tsx0 	pr0|665		index_chars_eis
005475  aa   000003 6000 04	tze  	3,ic		005500
005476  aa   400000 2350 03	lda  	131072,du
005477  aa  7 00122 7551 00	sta  	pr7|82		run
						STATEMENT 1 ON LINE 659
	  if index (com_string, "halt") ^= 0 then run = "0"b;

005500  aa   000204 2360 07	ldq  	132,dl
005501  aa  7 00173 3521 00	epp2 	pr7|123		com_string
005502  aa  0 01227 7001 00	tsx0 	pr0|663		set_chars_eis
005503  aa   000004 2360 07	ldq  	4,dl
005504  aa   773035 3520 04	epp2 	-2531,ic		000541 = 150141154164
005505  aa  0 01231 7001 00	tsx0 	pr0|665		index_chars_eis
005506  aa   000002 6000 04	tze  	2,ic		005510
005507  aa  7 00122 4501 00	stz  	pr7|82		run
						STATEMENT 1 ON LINE 660
	  if index (com_string, "reset") ^= 0 then do;

005510  aa   000204 2360 07	ldq  	132,dl
005511  aa  7 00173 3521 00	epp2 	pr7|123		com_string
005512  aa  0 01227 7001 00	tsx0 	pr0|663		set_chars_eis
005513  aa   000005 2360 07	ldq  	5,dl
005514  aa   773166 3520 04	epp2 	-2442,ic		000702 = 162145163145
005515  aa  0 01231 7001 00	tsx0 	pr0|665		index_chars_eis
005516  aa   000005 6000 04	tze  	5,ic		005523
						STATEMENT 1 ON LINE 661
	     run = "0"b;

005517  aa  7 00122 4501 00	stz  	pr7|82		run
						STATEMENT 1 ON LINE 662
	     p_err = "1"b;

005520  aa   400000 2350 03	lda  	131072,du
005521  aa  6 00044 3701 20	epp4 	pr6|36,*
005522  ia  4 00010 2551 00	orsa 	pr4|8		p_err
						STATEMENT 1 ON LINE 663
	  end;

						STATEMENT 1 ON LINE 664
	  option = "0"b;

005523  aa  7 00123 4501 00	stz  	pr7|83		option
						STATEMENT 1 ON LINE 665
         end;

						STATEMENT 1 ON LINE 666
      end;

						STATEMENT 1 ON LINE 667
      bcd_chars = length (rtrim (com_string));

005524  aa  000 000 165 500	tctr 	(pr)
005525  aa  7 00173 00 0204	desc9a	pr7|123,132	com_string
005526  aa  0 76605 0001 00	arg  	pr0|-635		= 777777777777
005527  aa  6 00056 0001 00	arg  	pr6|46
005530  aa  6 00056 2361 00	ldq  	pr6|46
005531  aa  0 00242 3761 00	anq  	pr0|162		= 000777777777
005532  aa  6 00415 7561 00	stq  	pr6|269
005533  aa   000204 2360 07	ldq  	132,dl
005534  aa  6 00415 1761 00	sbq  	pr6|269
005535  aa  7 00657 7561 00	stq  	pr7|431		bcd_chars
						STATEMENT 1 ON LINE 668
      if mod (bcd_chars, 6) ^= 0
       then					/* if not already mod 6 */
         bcd_chars = bcd_chars + (6 - mod (bcd_chars, 6));

005536  aa   003426 3520 04	epp2 	1814,ic		011164 = 000000000006
005537  aa  0 00704 7001 00	tsx0 	pr0|452		mdfx1
005540  aa   000005 6000 04	tze  	5,ic		005545
005541  aa  6 00415 7561 00	stq  	pr6|269
005542  aa  2 00000 2361 00	ldq  	pr2|0
005543  aa  6 00415 1761 00	sbq  	pr6|269
005544  aa  7 00657 0561 00	asq  	pr7|431		bcd_chars
						STATEMENT 1 ON LINE 671
      call tolts_alm_util_$ascii_to_bci_ (com_string, bcd_str);

005545  aa  7 00657 2361 00	ldq  	pr7|431		bcd_chars
005546  aa  2 00000 4021 00	mpy  	pr2|0
005547  aa  6 00374 7561 00	stq  	pr6|252
005550  aa   516000 2760 03	orq  	171008,du
005551  aa  6 00415 7561 00	stq  	pr6|269
005552  aa  7 00173 3521 00	epp2 	pr7|123		com_string
005553  aa  6 00400 2521 00	spri2	pr6|256
005554  aa  7 00674 3521 20	epp2 	pr7|444,*		bcd_str
005555  aa  6 00402 2521 00	spri2	pr6|258
005556  aa   773053 3520 04	epp2 	-2517,ic		000631 = 524000000204
005557  aa  6 00404 2521 00	spri2	pr6|260
005560  aa  6 00415 3521 00	epp2 	pr6|269
005561  aa  6 00406 2521 00	spri2	pr6|262
005562  aa  6 00376 6211 00	eax1 	pr6|254
005563  aa   010000 4310 07	fld  	4096,dl
005564  aa  6 00044 3701 20	epp4 	pr6|36,*
005565  la  4 00076 3521 20	epp2 	pr4|62,*		tolts_alm_util_$ascii_to_bci_
005566  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 672
      go to cont_pas;

005567  aa  6 00040 3735 20	epp7 	pr6|32,*
005570  aa  7 00714 3521 00	epp2 	pr7|460		cont_pas
005571  aa  0 00660 7101 00	tra  	pr0|432		tra_ext_2
						STATEMENT 1 ON LINE 674
   end enter_options;

  END PROCEDURE enter_options
BEGIN PROCEDURE clean_up
ENTRY TO clean_up                                           STATEMENT 1 ON LINE 682
clean_up: proc;

005572  da     000415200000
005573  aa   000120 6270 00	eax7 	80
005574  aa  7 00034 3521 20	epp2 	pr7|28,*
005575  aa  2 01047 2721 00	tsp2 	pr2|551		int_entry
005576  aa     000000000000
005577  aa     000000000000
						STATEMENT 1 ON LINE 684
      if isolate_cpu then do;

005600  ia  4 00014 2351 00	lda  	pr4|12		isolate_cpu
005601  aa   000007 6000 04	tze  	7,ic		005610
						STATEMENT 1 ON LINE 685
         call tandd_$destroy_cpu_test_env;

005602  aa  6 00056 6211 00	eax1 	pr6|46
005603  aa   000000 4310 07	fld  	0,dl
005604  la  4 00026 3521 20	epp2 	pr4|22,*		tandd_$destroy_cpu_test_env
005605  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 686
         isolate_cpu = "0"b;

005606  aa  6 00044 3701 20	epp4 	pr6|36,*
005607  ia  4 00014 4501 00	stz  	pr4|12		isolate_cpu
						STATEMENT 1 ON LINE 687
      end;

						STATEMENT 1 ON LINE 688
      if df_iocbp ^= null then do;

005610  ia  4 00012 2371 00	ldaq 	pr4|10		df_iocbp
005611  aa   773101 6770 04	eraq 	-2495,ic		000712 = 077777000043 000001000000
005612  aa  0 00460 3771 00	anaq 	pr0|304		= 077777000077 777777077077
005613  aa   000027 6000 04	tze  	23,ic		005642
						STATEMENT 1 ON LINE 689
         call iox_$close (df_iocbp, code);

005614  ia  4 00012 3521 00	epp2 	pr4|10		df_iocbp
005615  aa  6 00102 2521 00	spri2	pr6|66
005616  aa  6 00040 3735 20	epp7 	pr6|32,*
005617  aa  7 00100 3521 00	epp2 	pr7|64		code
005620  aa  6 00104 2521 00	spri2	pr6|68
005621  aa  6 00100 6211 00	eax1 	pr6|64
005622  aa   010000 4310 07	fld  	4096,dl
005623  la  4 00114 3521 20	epp2 	pr4|76,*		iox_$close
005624  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 690
         call iox_$detach_iocb (df_iocbp, code);

005625  aa  6 00044 3701 20	epp4 	pr6|36,*
005626  ia  4 00012 3521 00	epp2 	pr4|10		df_iocbp
005627  aa  6 00102 2521 00	spri2	pr6|66
005630  aa  6 00040 3735 20	epp7 	pr6|32,*
005631  aa  7 00100 3521 00	epp2 	pr7|64		code
005632  aa  6 00104 2521 00	spri2	pr6|68
005633  aa  6 00100 6211 00	eax1 	pr6|64
005634  aa   010000 4310 07	fld  	4096,dl
005635  la  4 00116 3521 20	epp2 	pr4|78,*		iox_$detach_iocb
005636  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 691
         df_iocbp = null;

005637  aa   773053 2370 04	ldaq 	-2517,ic		000712 = 077777000043 000001000000
005640  aa  6 00044 3701 20	epp4 	pr6|36,*
005641  ia  4 00012 7571 00	staq 	pr4|10		df_iocbp
						STATEMENT 1 ON LINE 692
      end;

						STATEMENT 1 ON LINE 694
   end clean_up;

005642  aa  0 00631 7101 00	tra  	pr0|409		return_mac
  END PROCEDURE clean_up
BEGIN PROCEDURE sw_mess_1
ENTRY TO sw_mess_1                                          STATEMENT 1 ON LINE 698
sw_mess_1: proc (arg, mess);

005643  aa  6 01706 6501 00	spri4	pr6|966
005644  aa  6 01710 2521 00	spri2	pr6|968
005645  aa  2 00002 3521 01	epp2 	pr2|2,au
005646  aa  6 01712 2521 00	spri2	pr6|970
005647  aa  2 00000 2361 20	ldq  	pr2|0,*
005650  aa   000002 6040 04	tmi  	2,ic		005652
005651  aa   777777 3760 07	anq  	262143,dl
005652  aa  0 00250 3761 00	anq  	pr0|168		= 000077777777
005653  aa  6 02104 7561 00	stq  	pr6|1092
005654  aa  2 00002 2361 20	ldq  	pr2|2,*
005655  aa   000002 6040 04	tmi  	2,ic		005657
005656  aa   777777 3760 07	anq  	262143,dl
005657  aa  0 00250 3761 00	anq  	pr0|168		= 000077777777
005660  aa  6 02105 7561 00	stq  	pr6|1093
						STATEMENT 1 ON LINE 702
      arg = rtrim (arg) || NL || mess;

005661  aa  6 01710 3735 20	epp7 	pr6|968,*
005662  aa  7 00002 3715 20	epp5 	pr7|2,*
005663  aa  6 02104 2351 00	lda  	pr6|1092
005664  aa  000 000 165 540	tctr 	(pr,rl)
005665  aa  5 00000 00 0005	desc9a	pr5|0,al		arg
005666  aa  0 76605 0001 00	arg  	pr0|-635		= 777777777777
005667  aa  6 00056 0001 00	arg  	pr6|46
005670  aa  6 00056 2361 00	ldq  	pr6|46
005671  aa  0 00242 3761 00	anq  	pr0|162		= 000777777777
005672  aa  6 02106 7561 00	stq  	pr6|1094
005673  aa  6 02104 2361 00	ldq  	pr6|1092
005674  aa  6 02106 1761 00	sbq  	pr6|1094
005675  aa  6 02106 7561 00	stq  	pr6|1094
005676  aa   000001 0760 07	adq  	1,dl
005677  aa  0 00551 7001 00	tsx0 	pr0|361		alloc_char_temp
005700  aa  6 02106 2351 00	lda  	pr6|1094
005701  aa  040 140 100 540	mlr  	(pr,rl),(pr,rl),fill(040)
005702  aa  5 00000 00 0005	desc9a	pr5|0,al		arg
005703  aa  2 00000 00 0005	desc9a	pr2|0,al
005704  aa  040 105 100 404	mlr  	(ic),(pr,al),fill(040)
005705  aa   003256 00 0001	desc9a	1710,1		011162 = 012000000000
005706  aa  2 00000 00 0001	desc9a	pr2|0,1
005707  aa  6 02106 7561 00	stq  	pr6|1094
005710  aa  6 02105 0761 00	adq  	pr6|1093
005711  aa  6 02107 7561 00	stq  	pr6|1095
005712  aa  0 00606 7001 00	tsx0 	pr0|390		cat_realloc_chars
005713  aa  6 02106 2351 00	lda  	pr6|1094
005714  aa  7 00004 3535 20	epp3 	pr7|4,*
005715  aa  6 02105 2361 00	ldq  	pr6|1093
005716  aa  040 145 100 540	mlr  	(pr,rl),(pr,rl,al),fill(040)
005717  aa  3 00000 00 0006	desc9a	pr3|0,ql		mess
005720  aa  2 00000 00 0006	desc9a	pr2|0,ql
005721  aa  6 02104 2351 00	lda  	pr6|1092
005722  aa  6 02107 2361 00	ldq  	pr6|1095
005723  aa  040 140 100 540	mlr  	(pr,rl),(pr,rl),fill(040)
005724  aa  2 00000 00 0006	desc9a	pr2|0,ql
005725  aa  5 00000 00 0005	desc9a	pr5|0,al		arg
						STATEMENT 1 ON LINE 703
      return;

005726  aa  0 01014 7001 00	tsx0 	pr0|524		shorten_stack
005727  aa  6 01706 6101 00	rtcd 	pr6|966
ENTRY TO sw_mess_2                                          STATEMENT 1 ON LINE 705
sw_mess_2: entry (arg, mess);

005730  aa  6 01706 6501 00	spri4	pr6|966
005731  aa  6 01710 2521 00	spri2	pr6|968
005732  aa  2 00002 3521 01	epp2 	pr2|2,au
005733  aa  6 01712 2521 00	spri2	pr6|970
005734  aa  2 00000 2361 20	ldq  	pr2|0,*
005735  aa   000002 6040 04	tmi  	2,ic		005737
005736  aa   777777 3760 07	anq  	262143,dl
005737  aa  0 00250 3761 00	anq  	pr0|168		= 000077777777
005740  aa  6 02104 7561 00	stq  	pr6|1092
005741  aa  2 00002 2361 20	ldq  	pr2|2,*
005742  aa   000002 6040 04	tmi  	2,ic		005744
005743  aa   777777 3760 07	anq  	262143,dl
005744  aa  0 00250 3761 00	anq  	pr0|168		= 000077777777
005745  aa  6 02105 7561 00	stq  	pr6|1093
						STATEMENT 1 ON LINE 707
      arg = rtrim (arg) || NL || "memory " || tags (i) || " " || mess;

005746  aa  6 01710 3735 20	epp7 	pr6|968,*
005747  aa  7 00002 3715 20	epp5 	pr7|2,*
005750  aa  6 02104 2351 00	lda  	pr6|1092
005751  aa  000 000 165 540	tctr 	(pr,rl)
005752  aa  5 00000 00 0005	desc9a	pr5|0,al		arg
005753  aa  0 76605 0001 00	arg  	pr0|-635		= 777777777777
005754  aa  6 00056 0001 00	arg  	pr6|46
005755  aa  6 00056 2361 00	ldq  	pr6|46
005756  aa  0 00242 3761 00	anq  	pr0|162		= 000777777777
005757  aa  6 02107 7561 00	stq  	pr6|1095
005760  aa  6 02104 2361 00	ldq  	pr6|1092
005761  aa  6 02107 1761 00	sbq  	pr6|1095
005762  aa  6 02107 7561 00	stq  	pr6|1095
005763  aa   000001 0760 07	adq  	1,dl
005764  aa  0 00551 7001 00	tsx0 	pr0|361		alloc_char_temp
005765  aa  6 02107 2351 00	lda  	pr6|1095
005766  aa  040 140 100 540	mlr  	(pr,rl),(pr,rl),fill(040)
005767  aa  5 00000 00 0005	desc9a	pr5|0,al		arg
005770  aa  2 00000 00 0005	desc9a	pr2|0,al
005771  aa  040 105 100 404	mlr  	(ic),(pr,al),fill(040)
005772  aa   003171 00 0001	desc9a	1657,1		011162 = 012000000000
005773  aa  2 00000 00 0001	desc9a	pr2|0,1
005774  aa  6 02107 7561 00	stq  	pr6|1095
005775  aa   000007 0760 07	adq  	7,dl
005776  aa  6 02106 7561 00	stq  	pr6|1094
005777  aa  0 00606 7001 00	tsx0 	pr0|390		cat_realloc_chars
006000  aa  6 02107 2351 00	lda  	pr6|1095
006001  aa  040 105 100 404	mlr  	(ic),(pr,al),fill(040)
006002  aa   772677 00 0007	desc9a	-2625,7		000700 = 155145155157
006003  aa  2 00000 00 0007	desc9a	pr2|0,7
006004  aa  6 02106 2361 00	ldq  	pr6|1094
006005  aa   000001 0760 07	adq  	1,dl
006006  aa  6 02107 7561 00	stq  	pr6|1095
006007  aa  0 00606 7001 00	tsx0 	pr0|390		cat_realloc_chars
006010  aa  6 02106 2351 00	lda  	pr6|1094
006011  aa  6 00653 7271 00	lxl7 	pr6|427		i
006012  aa  040 105 100 417	mlr  	(x7),(pr,al),fill(040)
006013  ta   000472 00 0001	desc9a	314,1
006014  aa  2 00000 00 0001	desc9a	pr2|0,1
006015  aa  6 02107 2361 00	ldq  	pr6|1095
006016  aa   000001 0760 07	adq  	1,dl
006017  aa  6 02106 7561 00	stq  	pr6|1094
006020  aa  0 00606 7001 00	tsx0 	pr0|390		cat_realloc_chars
006021  aa  6 02107 2351 00	lda  	pr6|1095
006022  aa  040 105 100 404	mlr  	(ic),(pr,al),fill(040)
006023  aa   003145 00 0001	desc9a	1637,1		011167 = 040000000000
006024  aa  2 00000 00 0001	desc9a	pr2|0,1
006025  aa  6 02106 2361 00	ldq  	pr6|1094
006026  aa  6 02105 0761 00	adq  	pr6|1093
006027  aa  6 02107 7561 00	stq  	pr6|1095
006030  aa  0 00606 7001 00	tsx0 	pr0|390		cat_realloc_chars
006031  aa  6 02106 2351 00	lda  	pr6|1094
006032  aa  7 00004 3535 20	epp3 	pr7|4,*
006033  aa  6 02105 2361 00	ldq  	pr6|1093
006034  aa  040 145 100 540	mlr  	(pr,rl),(pr,rl,al),fill(040)
006035  aa  3 00000 00 0006	desc9a	pr3|0,ql		mess
006036  aa  2 00000 00 0006	desc9a	pr2|0,ql
006037  aa  6 02104 2351 00	lda  	pr6|1092
006040  aa  6 02107 2361 00	ldq  	pr6|1095
006041  aa  040 140 100 540	mlr  	(pr,rl),(pr,rl),fill(040)
006042  aa  2 00000 00 0006	desc9a	pr2|0,ql
006043  aa  5 00000 00 0005	desc9a	pr5|0,al		arg
						STATEMENT 1 ON LINE 708
      return;

006044  aa  0 01014 7001 00	tsx0 	pr0|524		shorten_stack
006045  aa  6 01706 6101 00	rtcd 	pr6|966
						STATEMENT 1 ON LINE 710
   end sw_mess_1;

  END PROCEDURE sw_mess_1
BEGIN PROCEDURE sleep
ENTRY TO sleep                                              STATEMENT 1 ON LINE 716
sleep: proc (t_delay);

006046  aa  6 00124 6501 00	spri4	pr6|84
006047  aa  6 00126 2521 00	spri2	pr6|86
						STATEMENT 1 ON LINE 721
      tm_delay = t_delay;

006050  aa  2 00002 2351 20	lda  	pr2|2,*		t_delay
006051  aa   000044 7330 00	lrs  	36
006052  aa  6 00134 7571 00	staq 	pr6|92		tm_delay
						STATEMENT 1 ON LINE 722
      do i = 1 to delay_iter while (is_mbx.service = 0);

006053  aa  6 00040 3735 20	epp7 	pr6|32,*
006054  aa  7 00241 2361 00	ldq  	pr7|161		delay_iter
006055  aa  6 00136 7561 00	stq  	pr6|94
006056  aa   000001 2360 07	ldq  	1,dl
006057  aa  6 00132 7561 00	stq  	pr6|90		i
006060  aa  6 00132 2361 00	ldq  	pr6|90		i
006061  aa  6 00136 1161 00	cmpq 	pr6|94
006062  aa   000022 6054 04	tpnz 	18,ic		006104
006063  aa  6 00040 3735 20	epp7 	pr6|32,*
006064  aa  7 00666 3715 20	epp5 	pr7|438,*		wseg_p
006065  aa  5 01171 2361 00	ldq  	pr5|633		wseg.service
006066  aa   000016 6010 04	tnz  	14,ic		006104
						STATEMENT 1 ON LINE 723
         call timer_manager_$sleep (tm_delay, "11"b);

006067  aa   600000 2350 03	lda  	196608,du
006070  aa  6 00444 7551 00	sta  	pr6|292
006071  aa  6 00134 3521 00	epp2 	pr6|92		tm_delay
006072  aa  6 00450 2521 00	spri2	pr6|296
006073  aa  6 00444 3521 00	epp2 	pr6|292
006074  aa  6 00452 2521 00	spri2	pr6|298
006075  aa  6 00446 6211 00	eax1 	pr6|294
006076  aa   010000 4310 07	fld  	4096,dl
006077  aa  6 00044 3701 20	epp4 	pr6|36,*
006100  la  4 00062 3521 20	epp2 	pr4|50,*		timer_manager_$sleep
006101  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 724
      end;

006102  aa  6 00132 0541 00	aos  	pr6|90		i
006103  aa   777755 7100 04	tra  	-19,ic		006060
						STATEMENT 1 ON LINE 726
   end sleep;

006104  aa  6 00124 6101 00	rtcd 	pr6|84
  END PROCEDURE sleep
BEGIN PROCEDURE complete_err_mess
ENTRY TO complete_err_mess                                  STATEMENT 1 ON LINE 730
complete_err_mess: proc;

006105  aa  6 00140 6501 00	spri4	pr6|96
						STATEMENT 1 ON LINE 732
      if ^pas_sw then				/* if still in primitives */
         if nxt_tst >= pas_exec then			/* set pas switch if in pas exec or pas pgm */
	  pas_sw = "1"b;

006106  aa  6 00040 3735 20	epp7 	pr6|32,*
006107  aa  7 00117 2351 00	lda  	pr7|79		pas_sw
006110  aa   000007 6010 04	tnz  	7,ic		006117
006111  aa  7 00111 2351 00	lda  	pr7|73		nxt_tst
006112  aa  0 00066 3771 00	anaq 	pr0|54		= 777777777000 000000000000
006113  aa   772355 1150 04	cmpa 	-2835,ic		000470 = 060066061000
006114  aa   000003 6020 04	tnc  	3,ic		006117
006115  aa   400000 2350 03	lda  	131072,du
006116  aa  7 00117 7551 00	sta  	pr7|79		pas_sw
						STATEMENT 1 ON LINE 735
      if mess_in_prog then do;

006117  aa  7 00120 2351 00	lda  	pr7|80		mess_in_prog
006120  aa   000030 6000 04	tze  	24,ic		006150
						STATEMENT 1 ON LINE 736
         mess_in_prog = "0"b;

006121  aa  7 00120 4501 00	stz  	pr7|80		mess_in_prog
						STATEMENT 1 ON LINE 737
         call isolts_err_log_$write (null, 0, 3, 0, 0);

006122  aa   772570 3714 24	epp5 	-2696,ic*
006123  aa  6 00454 6515 00	spri5	pr6|300
006124  aa  6 00456 4501 00	stz  	pr6|302
006125  aa   000003 2360 07	ldq  	3,dl
006126  aa  6 00457 7561 00	stq  	pr6|303
006127  aa  6 00460 4501 00	stz  	pr6|304
006130  aa  6 00461 4501 00	stz  	pr6|305
006131  aa  6 00454 3521 00	epp2 	pr6|300
006132  aa  6 00464 2521 00	spri2	pr6|308
006133  aa  6 00456 3521 00	epp2 	pr6|302
006134  aa  6 00466 2521 00	spri2	pr6|310
006135  aa  6 00457 3521 00	epp2 	pr6|303
006136  aa  6 00470 2521 00	spri2	pr6|312
006137  aa  6 00460 3521 00	epp2 	pr6|304
006140  aa  6 00472 2521 00	spri2	pr6|314
006141  aa  6 00461 3521 00	epp2 	pr6|305
006142  aa  6 00474 2521 00	spri2	pr6|316
006143  aa  6 00462 6211 00	eax1 	pr6|306
006144  aa   024000 4310 07	fld  	10240,dl
006145  aa  6 00044 3701 20	epp4 	pr6|36,*
006146  la  4 00052 3521 20	epp2 	pr4|42,*		isolts_err_log_$write
006147  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 738
      end;

						STATEMENT 1 ON LINE 739
   end complete_err_mess;

006150  aa  6 00140 6101 00	rtcd 	pr6|96
  END PROCEDURE complete_err_mess
BEGIN PROCEDURE set_survey
ENTRY TO set_survey                                         STATEMENT 1 ON LINE 743
set_survey: proc;

006151  aa  6 00146 6501 00	spri4	pr6|102
						STATEMENT 1 ON LINE 745
      delay = pft_delay;

006152  aa   000002 2360 07	ldq  	2,dl
006153  aa  6 00040 3735 20	epp7 	pr6|32,*
006154  aa  7 00652 7561 00	stq  	pr7|426		delay
						STATEMENT 1 ON LINE 746
      iom0.mbx = "001400"b3;

006155  aa   001400 2350 03	lda  	768,du
006156  aa  7 00666 3715 20	epp5 	pr7|438,*		wseg_p
006157  aa  5 07760 5511 60	stba 	pr5|4080,60	wseg.mbx
						STATEMENT 1 ON LINE 747
      cont_cpu.f_vec, cpu_1.f_vec = "000100"b3;

006160  aa   000100 2350 03	lda  	64,du
006161  aa  5 07770 5511 60	stba 	pr5|4088,60	wseg.f_vec
006162  aa   000100 2350 03	lda  	64,du
006163  aa  5 07772 5511 60	stba 	pr5|4090,60	wseg.f_vec
						STATEMENT 1 ON LINE 748
      iom0.port, cont_cpu.port, cpu_1.port = cpu_port;

006164  aa  7 00103 2361 00	ldq  	pr7|67		cpu_port
006165  aa  5 07760 5521 14	stbq 	pr5|4080,14	wseg.port
006166  aa  5 07770 5521 14	stbq 	pr5|4088,14	wseg.port
006167  aa  5 07772 5521 14	stbq 	pr5|4090,14	wseg.port
						STATEMENT 1 ON LINE 749
      imw.base = "001200"b3;

006170  aa   001200 2350 07	lda  	640,dl
006171  aa  5 07757 5511 14	stba 	pr5|4079,14	wseg.base
						STATEMENT 1 ON LINE 751
   end set_survey;

006172  aa  6 00146 6101 00	rtcd 	pr6|102
  END PROCEDURE set_survey
BEGIN PROCEDURE itrace
ENTRY TO itrace                                             STATEMENT 1 ON LINE 757
itrace: proc;

006173  aa  6 00154 6501 00	spri4	pr6|108
						STATEMENT 1 ON LINE 759
      tim = time;

006174  aa  6 00040 3735 20	epp7 	pr6|32,*
006175  aa  7 00236 3521 00	epp2 	pr7|158		tim
006176  aa  6 00502 2521 00	spri2	pr6|322
006177  aa  6 00500 6211 00	eax1 	pr6|320
006200  aa   004000 4310 07	fld  	2048,dl
006201  aa  6 00044 3701 20	epp4 	pr6|36,*
006202  la  4 00016 3521 20	epp2 	pr4|14,*		pl1_time_
006203  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 760
      call ioa_ ("^a.^a - action code = ^12.3b", substr (tim, 1, 4),
       substr (tim, 5, 3), string (action_codes));

006204  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
006205  aa   772704 00 0034	desc9a	-2620,28		001110 = 136141056136
006206  aa  6 00504 00 0034	desc9a	pr6|324,28
006207  aa  6 00040 3735 20	epp7 	pr6|32,*
006210  aa  7 00236 2351 00	lda  	pr7|158		tim
006211  aa  6 00477 7551 00	sta  	pr6|319
006212  aa  7 00237 2351 00	lda  	pr7|159		tim
006213  aa  0 00066 3771 00	anaq 	pr0|54		= 777777777000 000000000000
006214  aa  6 00513 7551 00	sta  	pr6|331
006215  aa  7 00666 3715 20	epp5 	pr7|438,*		wseg_p
006216  aa  5 01172 2351 00	lda  	pr5|634
006217  aa  6 00514 7551 00	sta  	pr6|332
006220  aa  6 00504 3521 00	epp2 	pr6|324
006221  aa  6 00520 2521 00	spri2	pr6|336
006222  aa  6 00477 3521 00	epp2 	pr6|319
006223  aa  6 00522 2521 00	spri2	pr6|338
006224  aa  6 00513 3521 00	epp2 	pr6|331
006225  aa  6 00524 2521 00	spri2	pr6|340
006226  aa  6 00514 3521 00	epp2 	pr6|332
006227  aa  6 00526 2521 00	spri2	pr6|342
006230  aa   772307 3520 04	epp2 	-2873,ic		000537 = 524000000034
006231  aa  6 00530 2521 00	spri2	pr6|344
006232  aa   772400 3520 04	epp2 	-2816,ic		000632 = 524000000004
006233  aa  6 00532 2521 00	spri2	pr6|346
006234  aa   772316 3520 04	epp2 	-2866,ic		000552 = 524000000003
006235  aa  6 00534 2521 00	spri2	pr6|348
006236  aa   772300 3520 04	epp2 	-2880,ic		000536 = 514000000044
006237  aa  6 00536 2521 00	spri2	pr6|350
006240  aa  6 00516 6211 00	eax1 	pr6|334
006241  aa   020000 4310 07	fld  	8192,dl
006242  aa  6 00044 3701 20	epp4 	pr6|36,*
006243  la  4 00102 3521 20	epp2 	pr4|66,*		ioa_
006244  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 762
   end itrace;

006245  aa  6 00154 6101 00	rtcd 	pr6|108
  END PROCEDURE itrace
BEGIN PROCEDURE ck_isolts_opt
ENTRY TO ck_isolts_opt                                      STATEMENT 1 ON LINE 766
ck_isolts_opt: proc returns (bit (1));

006246  aa  6 00162 6501 00	spri4	pr6|114
006247  aa  6 00164 2521 00	spri2	pr6|116
						STATEMENT 1 ON LINE 768
      if args (1) = "quit" | args (1) = "q" then do;

006250  aa  6 00040 3735 20	epp7 	pr6|32,*
006251  aa  7 00246 7271 00	lxl7 	pr7|166		args
006252  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
006253  aa  7 00247 00 0017	desc9a	pr7|167,x7	args
006254  aa   772365 00 0004	desc9a	-2827,4		000637 = 161165151164
006255  aa   000006 6000 04	tze  	6,ic		006263
006256  aa  7 00246 7271 00	lxl7 	pr7|166		args
006257  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
006260  aa  7 00247 00 0017	desc9a	pr7|167,x7	args
006261  aa   002711 00 0001	desc9a	1481,1		011170 = 161000000000
006262  aa   000005 6010 04	tnz  	5,ic		006267
						STATEMENT 1 ON LINE 769
         trm = "1"b;

006263  aa   400000 2350 03	lda  	131072,du
006264  aa  7 00115 7551 00	sta  	pr7|77		trm
						STATEMENT 1 ON LINE 770
         go to end_pas;

006265  aa  7 00724 3521 00	epp2 	pr7|468		end_pas
006266  aa  0 00660 7101 00	tra  	pr0|432		tra_ext_2
						STATEMENT 1 ON LINE 771
      end;

						STATEMENT 1 ON LINE 772
      else if args (1) = "restart" then			/* user wants to restart from PFTs */
         go to restart;

006267  aa  7 00246 7271 00	lxl7 	pr7|166		args
006270  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
006271  aa  7 00247 00 0017	desc9a	pr7|167,x7	args
006272  aa   772406 00 0007	desc9a	-2810,7		000676 = 162145163164
006273  aa   000004 6010 04	tnz  	4,ic		006277
006274  aa  6 00040 3735 20	epp7 	pr6|32,*
006275  aa  7 00720 3521 00	epp2 	pr7|464		restart
006276  aa  0 00660 7101 00	tra  	pr0|432		tra_ext_2
						STATEMENT 1 ON LINE 774
      else if args (1) = "itrace_on"
       | args (1) = "itn" then			/* user wants to turn on trace */
         trace_sw = "1"b;

006277  aa  6 00040 3735 20	epp7 	pr6|32,*
006300  aa  7 00246 7271 00	lxl7 	pr7|166		args
006301  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
006302  aa  7 00247 00 0017	desc9a	pr7|167,x7	args
006303  aa   772454 00 0011	desc9a	-2772,9		000755 = 151164162141
006304  aa   000006 6000 04	tze  	6,ic		006312
006305  aa  7 00246 7271 00	lxl7 	pr7|166		args
006306  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
006307  aa  7 00247 00 0017	desc9a	pr7|167,x7	args
006310  aa   772227 00 0003	desc9a	-2921,3		000535 = 151164156000
006311  aa   000004 6010 04	tnz  	4,ic		006315
006312  aa   400000 2350 03	lda  	131072,du
006313  aa  7 00124 7551 00	sta  	pr7|84		trace_sw
006314  aa   000627 7100 04	tra  	407,ic		007143
						STATEMENT 1 ON LINE 777
      else if args (1) = "itrace_off"
       | args (1) = "itf" then			/* user wants to turn trace off */
         trace_sw = "0"b;

006315  aa  7 00246 7271 00	lxl7 	pr7|166		args
006316  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
006317  aa  7 00247 00 0017	desc9a	pr7|167,x7	args
006320  aa   772434 00 0012	desc9a	-2788,10		000752 = 151164162141
006321  aa   000006 6000 04	tze  	6,ic		006327
006322  aa  7 00246 7271 00	lxl7 	pr7|166		args
006323  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
006324  aa  7 00247 00 0017	desc9a	pr7|167,x7	args
006325  aa   772211 00 0003	desc9a	-2935,3		000534 = 151164146000
006326  aa   000003 6010 04	tnz  	3,ic		006331
006327  aa  7 00124 4501 00	stz  	pr7|84		trace_sw
006330  aa   000613 7100 04	tra  	395,ic		007143
						STATEMENT 1 ON LINE 780
      else if args (1) = "type"
       | args (1) = "atype" then do;

006331  aa  7 00246 7271 00	lxl7 	pr7|166		args
006332  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
006333  aa  7 00247 00 0017	desc9a	pr7|167,x7	args
006334  aa   772201 00 0004	desc9a	-2943,4		000533 = 164171160145
006335  aa   000006 6000 04	tze  	6,ic		006343
006336  aa  7 00246 7271 00	lxl7 	pr7|166		args
006337  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
006340  aa  7 00247 00 0017	desc9a	pr7|167,x7	args
006341  aa   772335 00 0005	desc9a	-2851,5		000674 = 141164171160
006342  aa   000017 6010 04	tnz  	15,ic		006361
						STATEMENT 1 ON LINE 782
         p_err = "0"b;

006343  aa   002577 2350 04	lda  	1407,ic		011142 = 377777777777
006344  aa  6 00044 3701 20	epp4 	pr6|36,*
006345  ia  4 00010 3551 00	ansa 	pr4|8		p_err
						STATEMENT 1 ON LINE 783
         if args (1) = "type" then			/* pas2 still thinks he */
	  add_opt = "print";

006346  aa  7 00246 7271 00	lxl7 	pr7|166		args
006347  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
006350  aa  7 00247 00 0017	desc9a	pr7|167,x7	args
006351  aa   772164 00 0004	desc9a	-2956,4		000533 = 164171160145
006352  aa   000004 6010 04	tnz  	4,ic		006356
006353  aa   772317 2370 04	ldaq 	-2865,ic		000672 = 160162151156 164040000000
006354  aa  7 00234 7571 00	staq 	pr7|156		add_opt
006355  aa   000566 7100 04	tra  	374,ic		007143
						STATEMENT 1 ON LINE 785
         else add_opt = "aprint";

006356  aa   772312 2370 04	ldaq 	-2870,ic		000670 = 141160162151 156164000000
006357  aa  7 00234 7571 00	staq 	pr7|156		add_opt
						STATEMENT 1 ON LINE 786
      end;

006360  aa   000563 7100 04	tra  	371,ic		007143
						STATEMENT 1 ON LINE 787
      else if args (1) = "print"
       | args (1) = "aprint" then do;

006361  aa  7 00246 7271 00	lxl7 	pr7|166		args
006362  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
006363  aa  7 00247 00 0017	desc9a	pr7|167,x7	args
006364  aa   772304 00 0005	desc9a	-2876,5		000666 = 160162151156
006365  aa   000006 6000 04	tze  	6,ic		006373
006366  aa  7 00246 7271 00	lxl7 	pr7|166		args
006367  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
006370  aa  7 00247 00 0017	desc9a	pr7|167,x7	args
006371  aa   772301 00 0006	desc9a	-2879,6		000670 = 141160162151
006372  aa   000012 6010 04	tnz  	10,ic		006404
						STATEMENT 1 ON LINE 789
         p_err = "1"b;

006373  aa   400000 2350 03	lda  	131072,du
006374  aa  6 00044 3701 20	epp4 	pr6|36,*
006375  ia  4 00010 2551 00	orsa 	pr4|8		p_err
						STATEMENT 1 ON LINE 790
         add_opt = args (1);

006376  aa  7 00235 4501 00	stz  	pr7|157		add_opt
006377  aa  7 00246 7271 00	lxl7 	pr7|166		args
006400  aa  040 100 100 540	mlr  	(pr,rl),(pr),fill(040)
006401  aa  7 00247 00 0017	desc9a	pr7|167,x7	args
006402  aa  7 00234 00 0006	desc9a	pr7|156,6		add_opt
						STATEMENT 1 ON LINE 791
      end;

006403  aa   000540 7100 04	tra  	352,ic		007143
						STATEMENT 1 ON LINE 792
      else if args (1) = "test"
       & args (2) = "msg" then			/* user wants to communicate with the operator */
         call tolts_util_$opr_msg;

006404  aa  7 00246 7271 00	lxl7 	pr7|166		args
006405  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
006406  aa  7 00247 00 0017	desc9a	pr7|167,x7	args
006407  aa   772215 00 0004	desc9a	-2931,4		000622 = 164145163164
006410  aa   000014 6010 04	tnz  	12,ic		006424
006411  aa  7 00256 7271 00	lxl7 	pr7|174		args
006412  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
006413  aa  7 00257 00 0017	desc9a	pr7|175,x7	args
006414  aa   772215 00 0003	desc9a	-2931,3		000627 = 155163147000
006415  aa   000007 6010 04	tnz  	7,ic		006424
006416  aa  6 00056 6211 00	eax1 	pr6|46
006417  aa   000000 4310 07	fld  	0,dl
006420  aa  6 00044 3701 20	epp4 	pr6|36,*
006421  la  4 00046 3521 20	epp2 	pr4|38,*		tolts_util_$opr_msg
006422  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
006423  aa   000520 7100 04	tra  	336,ic		007143
						STATEMENT 1 ON LINE 795
      else if args (1) = "display_error"
       | args (1) = "display"
       | args (1) = "derr" then do;

006424  aa  7 00246 7271 00	lxl7 	pr7|166		args
006425  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
006426  aa  7 00247 00 0017	desc9a	pr7|167,x7	args
006427  aa   772356 00 0015	desc9a	-2834,13		001003 = 144151163160
006430  aa   000013 6000 04	tze  	11,ic		006443
006431  aa  7 00246 7271 00	lxl7 	pr7|166		args
006432  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
006433  aa  7 00247 00 0017	desc9a	pr7|167,x7	args
006434  aa   772276 00 0007	desc9a	-2882,7		000730 = 144151163160
006435  aa   000006 6000 04	tze  	6,ic		006443
006436  aa  7 00246 7271 00	lxl7 	pr7|166		args
006437  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
006440  aa  7 00247 00 0017	desc9a	pr7|167,x7	args
006441  aa   772167 00 0004	desc9a	-2953,4		000626 = 144145162162
006442  aa   000057 6010 04	tnz  	47,ic		006521
						STATEMENT 1 ON LINE 798
         if ^display_log () then do;

006443  aa  6 00540 3521 00	epp2 	pr6|352
006444  aa  6 00544 2521 00	spri2	pr6|356
006445  aa   000001 7270 07	lxl7 	1,dl
006446  aa  6 00542 6211 00	eax1 	pr6|354
006447  aa   004000 4310 07	fld  	2048,dl
006450  aa   001373 3520 04	epp2 	763,ic		010043 = 000140627000
006451  aa  0 00627 7001 00	tsx0 	pr0|407		call_int_other
006452  aa  6 00540 2351 00	lda  	pr6|352
006453  aa   400000 3150 03	cana 	131072,du
006454  aa   000467 6010 04	tnz  	311,ic		007143
						STATEMENT 1 ON LINE 799
inv_display:
	  call com_err_ (0, pname, "invalid input - ""^a""", com_string);

006455  aa  6 00540 4501 00	stz  	pr6|352
006456  aa   772354 2370 04	ldaq 	-2836,ic		001032 = 151156166141 154151144040
006457  aa  6 00542 7571 00	staq 	pr6|354
006460  aa   772354 2370 04	ldaq 	-2836,ic		001034 = 151156160165 164040055040
006461  aa  6 00544 7571 00	staq 	pr6|356
006462  aa   772354 2350 04	lda  	-2836,ic		001036 = 042136141042
006463  aa  6 00546 7551 00	sta  	pr6|358
006464  aa  6 00540 3521 00	epp2 	pr6|352
006465  aa  6 00552 2521 00	spri2	pr6|362
006466  aa   772006 3520 04	epp2 	-3066,ic		000474 = 151163157154
006467  aa  6 00554 2521 00	spri2	pr6|364
006470  aa  6 00542 3521 00	epp2 	pr6|354
006471  aa  6 00556 2521 00	spri2	pr6|366
006472  aa  6 00040 3735 20	epp7 	pr6|32,*
006473  aa  7 00173 3521 00	epp2 	pr7|123		com_string
006474  aa  6 00560 2521 00	spri2	pr6|368
006475  aa   772130 3520 04	epp2 	-2984,ic		000625 = 404000000005
006476  aa  6 00562 2521 00	spri2	pr6|370
006477  aa   772125 3520 04	epp2 	-2987,ic		000624 = 526000000006
006500  aa  6 00564 2521 00	spri2	pr6|372
006501  aa   772075 3520 04	epp2 	-3011,ic		000576 = 524000000024
006502  aa  6 00566 2521 00	spri2	pr6|374
006503  aa   772126 3520 04	epp2 	-2986,ic		000631 = 524000000204
006504  aa  6 00570 2521 00	spri2	pr6|376
006505  aa  6 00550 6211 00	eax1 	pr6|360
006506  aa   020000 4310 07	fld  	8192,dl
006507  aa  6 00044 3701 20	epp4 	pr6|36,*
006510  la  4 00104 3521 20	epp2 	pr4|68,*		com_err_
006511  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 801
	  return ("1"b);

006512  aa  6 00164 3735 20	epp7 	pr6|116,*
006513  aa  7 00002 3715 20	epp5 	pr7|2,*
006514  aa  403 100 060 400	csl  	(),(pr),fill(1),bool(move)
006515  aa   000000 00 0000	descb	0,0
006516  aa  5 00000 00 0001	descb	pr5|0,1
006517  aa  6 00162 6101 00	rtcd 	pr6|114
						STATEMENT 1 ON LINE 802
         end;

						STATEMENT 1 ON LINE 803
      end;

006520  aa   000423 7100 04	tra  	275,ic		007143
						STATEMENT 1 ON LINE 804
      else if args (1) = "E" then do;

006521  aa  7 00246 7271 00	lxl7 	pr7|166		args
006522  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
006523  aa  7 00247 00 0017	desc9a	pr7|167,x7	args
006524  aa   002441 00 0001	desc9a	1313,1		011163 = 105000000000
006525  aa   000036 6010 04	tnz  	30,ic		006563
						STATEMENT 1 ON LINE 805
         com_string = ltrim (substr (com_string, 2));

006526  aa  000 000 164 500	tct  	(pr)
006527  aa  7 00173 20 0203	desc9a	pr7|123(1),131	com_string
006530  aa  0 76605 0001 00	arg  	pr0|-635		= 777777777777
006531  aa  6 00056 0001 00	arg  	pr6|46
006532  aa  6 00056 2361 00	ldq  	pr6|46
006533  aa  0 00242 3761 00	anq  	pr0|162		= 000777777777
006534  aa  6 00540 7561 00	stq  	pr6|352
006535  aa   000203 2360 07	ldq  	131,dl
006536  aa  6 00540 1761 00	sbq  	pr6|352
006537  aa  6 00540 2351 00	lda  	pr6|352
006540  aa  040 100 100 545	mlr  	(pr,rl,al),(pr),fill(040)
006541  aa  7 00173 20 0006	desc9a	pr7|123(1),ql	com_string
006542  aa  7 00173 00 0204	desc9a	pr7|123,132	com_string
						STATEMENT 1 ON LINE 806
         call cu_$cp (addr (com_string), length (com_string), code);

006543  aa  7 00173 3715 00	epp5 	pr7|123		com_string
006544  aa  6 00572 6515 00	spri5	pr6|378
006545  aa   000204 2360 07	ldq  	132,dl
006546  aa  6 00540 7561 00	stq  	pr6|352
006547  aa  6 00572 3521 00	epp2 	pr6|378
006550  aa  6 00552 2521 00	spri2	pr6|362
006551  aa  6 00540 3521 00	epp2 	pr6|352
006552  aa  6 00554 2521 00	spri2	pr6|364
006553  aa  7 00100 3521 00	epp2 	pr7|64		code
006554  aa  6 00556 2521 00	spri2	pr6|366
006555  aa  6 00550 6211 00	eax1 	pr6|360
006556  aa   014000 4310 07	fld  	6144,dl
006557  aa  6 00044 3701 20	epp4 	pr6|36,*
006560  la  4 00072 3521 20	epp2 	pr4|58,*		cu_$cp
006561  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 808
      end;

006562  aa   000361 7100 04	tra  	241,ic		007143
						STATEMENT 1 ON LINE 809
      else if args (1) = "cdump" | args (1) = "mdump"
       | args (1) = "xdump" | args (1) = "sdump" then do;

006563  aa  7 00246 7271 00	lxl7 	pr7|166		args
006564  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
006565  aa  7 00247 00 0017	desc9a	pr7|167,x7	args
006566  aa   772100 00 0005	desc9a	-3008,5		000664 = 143144165155
006567  aa   000020 6000 04	tze  	16,ic		006607
006570  aa  7 00246 7271 00	lxl7 	pr7|166		args
006571  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
006572  aa  7 00247 00 0017	desc9a	pr7|167,x7	args
006573  aa   772071 00 0005	desc9a	-3015,5		000662 = 155144165155
006574  aa   000013 6000 04	tze  	11,ic		006607
006575  aa  7 00246 7271 00	lxl7 	pr7|166		args
006576  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
006577  aa  7 00247 00 0017	desc9a	pr7|167,x7	args
006600  aa   772062 00 0005	desc9a	-3022,5		000660 = 170144165155
006601  aa   000006 6000 04	tze  	6,ic		006607
006602  aa  7 00246 7271 00	lxl7 	pr7|166		args
006603  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
006604  aa  7 00247 00 0017	desc9a	pr7|167,x7	args
006605  aa   772053 00 0005	desc9a	-3029,5		000656 = 163144165155
006606  aa   000327 6010 04	tnz  	215,ic		007135
						STATEMENT 1 ON LINE 811
         first = 0;

006607  aa  7 00647 4501 00	stz  	pr7|423		first
						STATEMENT 1 ON LINE 812
         last = 65535;

006610  aa   177777 2360 07	ldq  	65535,dl
006611  aa  7 00650 7561 00	stq  	pr7|424		last
						STATEMENT 1 ON LINE 813
         d_type = args (1);

006612  aa  7 00246 7271 00	lxl7 	pr7|166		args
006613  aa  040 100 100 540	mlr  	(pr,rl),(pr),fill(040)
006614  aa  7 00247 00 0017	desc9a	pr7|167,x7	args
006615  aa  7 00244 00 0005	desc9a	pr7|164,5		d_type
						STATEMENT 1 ON LINE 814
         if cmd_cnt > 1 then do;

006616  aa  7 00651 2361 00	ldq  	pr7|425		cmd_cnt
006617  aa   000001 1160 07	cmpq 	1,dl
006620  aa   000111 6044 04	tmoz 	73,ic		006731
						STATEMENT 1 ON LINE 815
	  first = cv_oct_check_ ((args (2)), code);

006621  aa  7 00256 2361 00	ldq  	pr7|174		args
006622  aa   524000 2760 03	orq  	174080,du
006623  aa  6 00540 7561 00	stq  	pr6|352
006624  aa  7 00256 2361 00	ldq  	pr7|174		args
006625  aa  0 00551 7001 00	tsx0 	pr0|361		alloc_char_temp
006626  aa  6 00552 2521 00	spri2	pr6|362
006627  aa  7 00256 7271 00	lxl7 	pr7|174		args
006630  aa  040 140 100 540	mlr  	(pr,rl),(pr,rl),fill(040)
006631  aa  7 00257 00 0017	desc9a	pr7|175,x7	args
006632  aa  2 00000 00 0006	desc9a	pr2|0,ql
006633  aa  7 00100 3521 00	epp2 	pr7|64		code
006634  aa  6 00554 2521 00	spri2	pr6|364
006635  aa  6 00541 3521 00	epp2 	pr6|353
006636  aa  6 00556 2521 00	spri2	pr6|366
006637  aa  6 00540 3521 00	epp2 	pr6|352
006640  aa  6 00560 2521 00	spri2	pr6|368
006641  aa   771777 3520 04	epp2 	-3073,ic		000640 = 404000000043
006642  aa  6 00562 2521 00	spri2	pr6|370
006643  aa  6 00564 2521 00	spri2	pr6|372
006644  aa  6 00550 6211 00	eax1 	pr6|360
006645  aa   014000 4310 07	fld  	6144,dl
006646  aa  6 00044 3701 20	epp4 	pr6|36,*
006647  la  4 00070 3521 20	epp2 	pr4|56,*		cv_oct_check_
006650  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
006651  aa  6 00541 2361 00	ldq  	pr6|353
006652  aa  6 00040 3735 20	epp7 	pr6|32,*
006653  aa  7 00647 7561 00	stq  	pr7|423		first
						STATEMENT 1 ON LINE 816
	  if code ^= 0 | first > 65535 then		/* tell user what he typed wrong */
	     go to inv_display;

006654  aa  0 01014 7001 00	tsx0 	pr0|524		shorten_stack
006655  aa  7 00100 2361 00	ldq  	pr7|64		code
006656  aa   777577 6010 04	tnz  	-129,ic		006455
006657  aa  7 00647 2361 00	ldq  	pr7|423		first
006660  aa   177777 1160 07	cmpq 	65535,dl
006661  aa   777574 6054 04	tpnz 	-132,ic		006455
						STATEMENT 1 ON LINE 818
	  last = last - first;

006662  aa  7 00647 3361 00	lcq  	pr7|423		first
006663  aa  7 00650 0561 00	asq  	pr7|424		last
						STATEMENT 1 ON LINE 819
	  if cmd_cnt > 2 then do;

006664  aa  7 00651 2361 00	ldq  	pr7|425		cmd_cnt
006665  aa   000002 1160 07	cmpq 	2,dl
006666  aa   000043 6044 04	tmoz 	35,ic		006731
						STATEMENT 1 ON LINE 820
	     last = cv_oct_check_ ((args (3)), code);

006667  aa  7 00266 2361 00	ldq  	pr7|182		args
006670  aa   524000 2760 03	orq  	174080,du
006671  aa  6 00540 7561 00	stq  	pr6|352
006672  aa  7 00266 2361 00	ldq  	pr7|182		args
006673  aa  0 00551 7001 00	tsx0 	pr0|361		alloc_char_temp
006674  aa  6 00552 2521 00	spri2	pr6|362
006675  aa  7 00266 7271 00	lxl7 	pr7|182		args
006676  aa  040 140 100 540	mlr  	(pr,rl),(pr,rl),fill(040)
006677  aa  7 00267 00 0017	desc9a	pr7|183,x7	args
006700  aa  2 00000 00 0006	desc9a	pr2|0,ql
006701  aa  7 00100 3521 00	epp2 	pr7|64		code
006702  aa  6 00554 2521 00	spri2	pr6|364
006703  aa  6 00541 3521 00	epp2 	pr6|353
006704  aa  6 00556 2521 00	spri2	pr6|366
006705  aa  6 00540 3521 00	epp2 	pr6|352
006706  aa  6 00560 2521 00	spri2	pr6|368
006707  aa   771731 3520 04	epp2 	-3111,ic		000640 = 404000000043
006710  aa  6 00562 2521 00	spri2	pr6|370
006711  aa  6 00564 2521 00	spri2	pr6|372
006712  aa  6 00550 6211 00	eax1 	pr6|360
006713  aa   014000 4310 07	fld  	6144,dl
006714  aa  6 00044 3701 20	epp4 	pr6|36,*
006715  la  4 00070 3521 20	epp2 	pr4|56,*		cv_oct_check_
006716  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
006717  aa  6 00541 2361 00	ldq  	pr6|353
006720  aa  6 00040 3735 20	epp7 	pr6|32,*
006721  aa  7 00650 7561 00	stq  	pr7|424		last
						STATEMENT 1 ON LINE 821
	     if code ^= 0 | first + last > 65536 then	/* tell user what he typed wrong */
	        go to inv_display;

006722  aa  0 01014 7001 00	tsx0 	pr0|524		shorten_stack
006723  aa  7 00100 2361 00	ldq  	pr7|64		code
006724  aa   777531 6010 04	tnz  	-167,ic		006455
006725  aa  7 00647 2361 00	ldq  	pr7|423		first
006726  aa  7 00650 0761 00	adq  	pr7|424		last
006727  aa   200000 1160 07	cmpq 	65536,dl
006730  aa   777525 6054 04	tpnz 	-171,ic		006455
						STATEMENT 1 ON LINE 823
	  end;

						STATEMENT 1 ON LINE 824
         end;

						STATEMENT 1 ON LINE 825
         if args (1) = "cdump" then do;

006731  aa  7 00246 7271 00	lxl7 	pr7|166		args
006732  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
006733  aa  7 00247 00 0017	desc9a	pr7|167,x7	args
006734  aa   771732 00 0005	desc9a	-3110,5		000664 = 143144165155
006735  aa   000122 6010 04	tnz  	82,ic		007057
						STATEMENT 1 ON LINE 826
	  call ioa_ ("^/^a ""cdump"" from ^o to ^o of cpu ^a using memory ^a^/",
	   pname, first, last + first, tags (cpu_tag), tags (scu_tag));

006736  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
006737  aa   772437 00 0070	desc9a	-2785,56		001375 = 136057136141
006740  aa  6 00550 00 0070	desc9a	pr6|360,56
006741  aa  7 00650 2361 00	ldq  	pr7|424		last
006742  aa  7 00647 0761 00	adq  	pr7|423		first
006743  aa  6 00540 7561 00	stq  	pr6|352
006744  aa  6 00550 3521 00	epp2 	pr6|360
006745  aa  6 00576 2521 00	spri2	pr6|382
006746  aa   771526 3520 04	epp2 	-3242,ic		000474 = 151163157154
006747  aa  6 00600 2521 00	spri2	pr6|384
006750  aa  7 00647 3521 00	epp2 	pr7|423		first
006751  aa  6 00602 2521 00	spri2	pr6|386
006752  aa  6 00540 3521 00	epp2 	pr6|352
006753  aa  6 00604 2521 00	spri2	pr6|388
006754  aa  7 00101 7271 00	lxl7 	pr7|65		cpu_tag
006755  ta   000472 3520 00	epp2 	314
006756  aa  2 00000 5005 17	a9bd 	pr2|0,7
006757  aa  6 00606 2521 00	spri2	pr6|390
006760  aa  7 00102 7261 00	lxl6 	pr7|66		scu_tag
006761  ta   000472 3520 00	epp2 	314
006762  aa  2 00000 5005 16	a9bd 	pr2|0,6
006763  aa  6 00610 2521 00	spri2	pr6|392
006764  aa   771600 3520 04	epp2 	-3200,ic		000564 = 524000000066
006765  aa  6 00612 2521 00	spri2	pr6|394
006766  aa   771636 3520 04	epp2 	-3170,ic		000624 = 526000000006
006767  aa  6 00614 2521 00	spri2	pr6|396
006770  aa   771542 3520 04	epp2 	-3230,ic		000532 = 404000000022
006771  aa  6 00616 2521 00	spri2	pr6|398
006772  aa   771537 3520 04	epp2 	-3233,ic		000531 = 404000000023
006773  aa  6 00620 2521 00	spri2	pr6|400
006774  aa   771614 3520 04	epp2 	-3188,ic		000610 = 526000000001
006775  aa  6 00622 2521 00	spri2	pr6|402
006776  aa  6 00624 2521 00	spri2	pr6|404
006777  aa  6 00574 6211 00	eax1 	pr6|380
007000  aa   030000 4310 07	fld  	12288,dl
007001  aa  6 00044 3701 20	epp4 	pr6|36,*
007002  la  4 00102 3521 20	epp2 	pr4|66,*		ioa_
007003  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 828
	  call dump_segment_ (iox_$user_output, addrel (wseg_p, first), 0, first, last, "01000000000"b);

007004  aa  6 00040 3735 20	epp7 	pr6|32,*
007005  aa  7 00647 2361 00	ldq  	pr7|423		first
007006  aa  7 00666 3521 66	epp2 	pr7|438,*ql	wseg_p
007007  aa   000000 0520 03	adwp2	0,du
007010  aa  6 00572 2521 00	spri2	pr6|378
007011  aa  6 00540 4501 00	stz  	pr6|352
007012  aa   200000 2350 03	lda  	65536,du
007013  aa  6 00541 7551 00	sta  	pr6|353
007014  aa  6 00044 3701 20	epp4 	pr6|36,*
007015  la  4 00120 3521 20	epp2 	pr4|80,*		iox_$user_output
007016  aa  6 00576 2521 00	spri2	pr6|382
007017  aa  6 00572 3521 00	epp2 	pr6|378
007020  aa  6 00600 2521 00	spri2	pr6|384
007021  aa  6 00540 3521 00	epp2 	pr6|352
007022  aa  6 00602 2521 00	spri2	pr6|386
007023  aa  7 00647 3521 00	epp2 	pr7|423		first
007024  aa  6 00604 2521 00	spri2	pr6|388
007025  aa  7 00650 3521 00	epp2 	pr7|424		last
007026  aa  6 00606 2521 00	spri2	pr6|390
007027  aa  6 00541 3521 00	epp2 	pr6|353
007030  aa  6 00610 2521 00	spri2	pr6|392
007031  aa   771477 3520 04	epp2 	-3265,ic		000530 = 464000000000
007032  aa  6 00612 2521 00	spri2	pr6|394
007033  aa  6 00614 2521 00	spri2	pr6|396
007034  aa   771574 3520 04	epp2 	-3204,ic		000630 = 404000000021
007035  aa  6 00616 2521 00	spri2	pr6|398
007036  aa   771474 3520 04	epp2 	-3268,ic		000532 = 404000000022
007037  aa  6 00620 2521 00	spri2	pr6|400
007040  aa  6 00622 2521 00	spri2	pr6|402
007041  aa   771466 3520 04	epp2 	-3274,ic		000527 = 514000000013
007042  aa  6 00624 2521 00	spri2	pr6|404
007043  aa  6 00574 6211 00	eax1 	pr6|380
007044  aa   030000 4310 07	fld  	12288,dl
007045  la  4 00060 3521 20	epp2 	pr4|48,*		dump_segment_
007046  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 829
	  dump_in_prog = "0"b;

007047  aa  6 00040 3735 20	epp7 	pr6|32,*
007050  aa  7 00125 4501 00	stz  	pr7|85		dump_in_prog
						STATEMENT 1 ON LINE 830
	  return ("1"b);

007051  aa  6 00164 3715 20	epp5 	pr6|116,*
007052  aa  5 00002 3535 20	epp3 	pr5|2,*
007053  aa  403 100 060 400	csl  	(),(pr),fill(1),bool(move)
007054  aa   000000 00 0000	descb	0,0
007055  aa  3 00000 00 0001	descb	pr3|0,1
007056  aa  6 00162 6101 00	rtcd 	pr6|114
						STATEMENT 1 ON LINE 831
         end;

						STATEMENT 1 ON LINE 832
         else if args (1) = "sdump" then do;

007057  aa  7 00246 7271 00	lxl7 	pr7|166		args
007060  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
007061  aa  7 00247 00 0017	desc9a	pr7|167,x7	args
007062  aa   771576 00 0005	desc9a	-3202,5		000656 = 163144165155
007063  aa   000040 6010 04	tnz  	32,ic		007123
						STATEMENT 1 ON LINE 833
	  first = fixed (rel (hdr_p), 17);

007064  aa  7 00676 6351 20	eaa  	pr7|446,*		hdr_p
007065  aa   000066 7730 00	lrl  	54
007066  aa  7 00647 7561 00	stq  	pr7|423		first
						STATEMENT 1 ON LINE 834
	  last = fixed (slave_hdr.pgm_size, 17);

007067  aa  7 00676 3715 20	epp5 	pr7|446,*		hdr_p
007070  aa  5 00002 2361 00	ldq  	pr5|2		slave_hdr.pgm_size
007071  aa  0 00374 3771 00	anaq 	pr0|252		= 000000000000 000000777777
007072  aa  7 00650 7561 00	stq  	pr7|424		last
						STATEMENT 1 ON LINE 835
	  if last = 0 then do;

007073  aa  7 00650 2361 00	ldq  	pr7|424		last
007074  aa   000023 6010 04	tnz  	19,ic		007117
						STATEMENT 1 ON LINE 836
	     call ioa_ ("slave program not loaded");

007075  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
007076  aa   771754 00 0030	desc9a	-3092,24		001051 = 163154141166
007077  aa  6 00542 00 0030	desc9a	pr6|354,24
007100  aa  6 00542 3521 00	epp2 	pr6|354
007101  aa  6 00552 2521 00	spri2	pr6|362
007102  aa   771424 3520 04	epp2 	-3308,ic		000526 = 524000000030
007103  aa  6 00554 2521 00	spri2	pr6|364
007104  aa  6 00550 6211 00	eax1 	pr6|360
007105  aa   004000 4310 07	fld  	2048,dl
007106  aa  6 00044 3701 20	epp4 	pr6|36,*
007107  la  4 00102 3521 20	epp2 	pr4|66,*		ioa_
007110  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 837
	     return ("1"b);

007111  aa  6 00164 3735 20	epp7 	pr6|116,*
007112  aa  7 00002 3715 20	epp5 	pr7|2,*
007113  aa  403 100 060 400	csl  	(),(pr),fill(1),bool(move)
007114  aa   000000 00 0000	descb	0,0
007115  aa  5 00000 00 0001	descb	pr5|0,1
007116  aa  6 00162 6101 00	rtcd 	pr6|114
						STATEMENT 1 ON LINE 838
	  end;

						STATEMENT 1 ON LINE 839
	  else if last > hbound (wseg.test_pgm, 1) then	/* in case there is garbage here */
	     last = hbound (wseg.test_pgm, 1) - 1;

007117  aa   100000 1160 07	cmpq 	32768,dl
007120  aa   000003 6044 04	tmoz 	3,ic		007123
007121  aa   077777 2360 07	ldq  	32767,dl
007122  aa  7 00650 7561 00	stq  	pr7|424		last
						STATEMENT 1 ON LINE 841
         end;

						STATEMENT 1 ON LINE 842
         dump_in_prog, ntype, idump = "1"b;

007123  aa   400000 2350 03	lda  	131072,du
007124  aa  7 00125 7551 00	sta  	pr7|85		dump_in_prog
007125  aa  7 00121 7551 00	sta  	pr7|81		ntype
007126  aa  7 00126 7551 00	sta  	pr7|86		idump
						STATEMENT 1 ON LINE 843
         return ("0"b);

007127  aa  6 00164 3715 20	epp5 	pr6|116,*
007130  aa  5 00002 3535 20	epp3 	pr5|2,*
007131  aa  003 100 060 400	csl  	(),(pr),fill(0),bool(move)
007132  aa   000000 00 0000	descb	0,0
007133  aa  3 00000 00 0001	descb	pr3|0,1
007134  aa  6 00162 6101 00	rtcd 	pr6|114
						STATEMENT 1 ON LINE 844
      end;

						STATEMENT 1 ON LINE 845
      else return ("0"b);

007135  aa  6 00164 3715 20	epp5 	pr6|116,*
007136  aa  5 00002 3535 20	epp3 	pr5|2,*
007137  aa  003 100 060 400	csl  	(),(pr),fill(0),bool(move)
007140  aa   000000 00 0000	descb	0,0
007141  aa  3 00000 00 0001	descb	pr3|0,1
007142  aa  6 00162 6101 00	rtcd 	pr6|114
						STATEMENT 1 ON LINE 846
      return ("1"b);

007143  aa  6 00164 3735 20	epp7 	pr6|116,*
007144  aa  7 00002 3715 20	epp5 	pr7|2,*
007145  aa  403 100 060 400	csl  	(),(pr),fill(1),bool(move)
007146  aa   000000 00 0000	descb	0,0
007147  aa  5 00000 00 0001	descb	pr5|0,1
007150  aa  6 00162 6101 00	rtcd 	pr6|114
						STATEMENT 1 ON LINE 848
   end ck_isolts_opt;

  END PROCEDURE ck_isolts_opt
BEGIN PROCEDURE opr_com
ENTRY TO opr_com                                            STATEMENT 1 ON LINE 854
opr_com: proc (icpu, iscu) returns (bit (1));

007151  aa  6 01714 6501 00	spri4	pr6|972
007152  aa  6 01716 2521 00	spri2	pr6|974
						STATEMENT 1 ON LINE 858
007153  aa   771467 2370 04	ldaq 	-3273,ic		000642 = 000000000000 000000000001
007154  aa  6 01722 7571 00	staq 	pr6|978		d
						STATEMENT 1 ON LINE 860
      opr_query_info.q_sw = "1"b;

007155  aa   400000 2350 03	lda  	131072,du
007156  aa  6 00743 7551 00	sta  	pr6|483		opr_query_info.q_sw
						STATEMENT 1 ON LINE 861
      opr_query_info.prim = "grant";

007157  aa   771475 2370 04	ldaq 	-3267,ic		000654 = 147162141156 164040040040
007160  aa  6 00744 7571 00	staq 	pr6|484		opr_query_info.prim
						STATEMENT 1 ON LINE 862
      opr_query_info.alt = "deny";

007161  aa   771471 2370 04	ldaq 	-3271,ic		000652 = 144145156171 040040040040
007162  aa  6 00746 7571 00	staq 	pr6|486		opr_query_info.alt
						STATEMENT 1 ON LINE 863
      opr_query_info.r_comment = "";

007163  aa  040 100 100 400	mlr  	(),(pr),fill(040)
007164  aa   000000 00 0000	desc9a	0,0
007165  aa  6 00775 00 0100	desc9a	pr6|509,64	opr_query_info.r_comment
						STATEMENT 1 ON LINE 864
      call ioa_ ("asking operators permission to test cpu ""^a"" using memory ""^a""", tags (icpu), tags (iscu));

007166  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
007167  aa   772300 00 0100	desc9a	-2880,64		001466 = 141163153151
007170  aa  6 02110 00 0100	desc9a	pr6|1096,64
007171  aa  6 02110 3521 00	epp2 	pr6|1096
007172  aa  6 02132 2521 00	spri2	pr6|1114
007173  aa  6 01716 3735 20	epp7 	pr6|974,*
007174  aa  7 00002 7271 20	lxl7 	pr7|2,*		icpu
007175  ta   000472 3520 00	epp2 	314
007176  aa  2 00000 5005 17	a9bd 	pr2|0,7
007177  aa  6 02134 2521 00	spri2	pr6|1116
007200  aa  7 00004 7261 20	lxl6 	pr7|4,*		iscu
007201  ta   000472 3520 00	epp2 	314
007202  aa  2 00000 5005 16	a9bd 	pr2|0,6
007203  aa  6 02136 2521 00	spri2	pr6|1118
007204  aa   771321 3520 04	epp2 	-3375,ic		000525 = 524000000076
007205  aa  6 02140 2521 00	spri2	pr6|1120
007206  aa   771402 3520 04	epp2 	-3326,ic		000610 = 526000000001
007207  aa  6 02142 2521 00	spri2	pr6|1122
007210  aa  6 02144 2521 00	spri2	pr6|1124
007211  aa  6 02130 6211 00	eax1 	pr6|1112
007212  aa   014000 4310 07	fld  	6144,dl
007213  aa  6 00044 3701 20	epp4 	pr6|36,*
007214  la  4 00102 3521 20	epp2 	pr4|66,*		ioa_
007215  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 865
      call opr_query_ (addr (opr_query_info),
       "permission asked to test cpu ""^a"" using memory ""^a""", tags (icpu), tags (iscu));

007216  aa  6 00742 3735 00	epp7 	pr6|482		opr_query_info
007217  aa  6 02146 6535 00	spri7	pr6|1126
007220  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
007221  aa   772122 00 0064	desc9a	-2990,52		001342 = 160145162155
007222  aa  6 02130 00 0064	desc9a	pr6|1112,52
007223  aa  6 02146 3521 00	epp2 	pr6|1126
007224  aa  6 02152 2521 00	spri2	pr6|1130
007225  aa  6 02130 3521 00	epp2 	pr6|1112
007226  aa  6 02154 2521 00	spri2	pr6|1132
007227  aa  6 01716 3715 20	epp5 	pr6|974,*
007230  aa  5 00002 7271 20	lxl7 	pr5|2,*		icpu
007231  ta   000472 3520 00	epp2 	314
007232  aa  2 00000 5005 17	a9bd 	pr2|0,7
007233  aa  6 02156 2521 00	spri2	pr6|1134
007234  aa  5 00004 7261 20	lxl6 	pr5|4,*		iscu
007235  ta   000472 3520 00	epp2 	314
007236  aa  2 00000 5005 16	a9bd 	pr2|0,6
007237  aa  6 02160 2521 00	spri2	pr6|1136
007240  aa   771270 3520 04	epp2 	-3400,ic		000530 = 464000000000
007241  aa  6 02162 2521 00	spri2	pr6|1138
007242  aa   771262 3520 04	epp2 	-3406,ic		000524 = 524000000063
007243  aa  6 02164 2521 00	spri2	pr6|1140
007244  aa   771344 3520 04	epp2 	-3356,ic		000610 = 526000000001
007245  aa  6 02166 2521 00	spri2	pr6|1142
007246  aa  6 02170 2521 00	spri2	pr6|1144
007247  aa  6 02150 6211 00	eax1 	pr6|1128
007250  aa   020000 4310 07	fld  	8192,dl
007251  aa  6 00044 3701 20	epp4 	pr6|36,*
007252  la  4 00112 3521 20	epp2 	pr4|74,*		opr_query_
007253  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 867
      if opr_query_info.answer = "deny" then do;

007254  aa  6 00750 7271 00	lxl7 	pr6|488		opr_query_info.answer
007255  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
007256  aa  6 00751 00 0017	desc9a	pr6|489,x7	opr_query_info.answer
007257  aa   771375 00 0004	desc9a	-3331,4		000652 = 144145156171
007260  aa   000023 6010 04	tnz  	19,ic		007303
						STATEMENT 1 ON LINE 868
         call ioa_ ("permission denied");

007261  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
007262  aa   771544 00 0024	desc9a	-3228,20		001025 = 160145162155
007263  aa  6 02130 00 0024	desc9a	pr6|1112,20
007264  aa  6 02130 3521 00	epp2 	pr6|1112
007265  aa  6 02112 2521 00	spri2	pr6|1098
007266  aa   771235 3520 04	epp2 	-3427,ic		000523 = 524000000021
007267  aa  6 02114 2521 00	spri2	pr6|1100
007270  aa  6 02110 6211 00	eax1 	pr6|1096
007271  aa   004000 4310 07	fld  	2048,dl
007272  aa  6 00044 3701 20	epp4 	pr6|36,*
007273  la  4 00102 3521 20	epp2 	pr4|66,*		ioa_
007274  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 869
         return ("1"b);

007275  aa  6 01716 3735 20	epp7 	pr6|974,*
007276  aa  7 00006 3715 20	epp5 	pr7|6,*
007277  aa  403 100 060 400	csl  	(),(pr),fill(1),bool(move)
007300  aa   000000 00 0000	descb	0,0
007301  aa  5 00000 00 0001	descb	pr5|0,1
007302  aa  6 01714 6101 00	rtcd 	pr6|972
						STATEMENT 1 ON LINE 870
      end;

						STATEMENT 1 ON LINE 871
      call ioa_ ("permission granted");

007303  aa   771515 2370 04	ldaq 	-3251,ic		001020 = 160145162155 151163163151
007304  aa  6 02130 7571 00	staq 	pr6|1112
007305  aa   771515 2370 04	ldaq 	-3251,ic		001022 = 157156040147 162141156164
007306  aa  6 02132 7571 00	staq 	pr6|1114
007307  aa   145144 2350 03	lda  	51812,du
007310  aa  6 02134 7551 00	sta  	pr6|1116
007311  aa  6 02130 3521 00	epp2 	pr6|1112
007312  aa  6 02112 2521 00	spri2	pr6|1098
007313  aa   771274 3520 04	epp2 	-3396,ic		000607 = 524000000022
007314  aa  6 02114 2521 00	spri2	pr6|1100
007315  aa  6 02110 6211 00	eax1 	pr6|1096
007316  aa   004000 4310 07	fld  	2048,dl
007317  aa  6 00044 3701 20	epp4 	pr6|36,*
007320  la  4 00102 3521 20	epp2 	pr4|66,*		ioa_
007321  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 872
      call ioa_ ("asking operator to manually reconfigure cpu ^a", tags (icpu));

007322  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
007323  aa   771722 00 0060	desc9a	-3118,48		001244 = 141163153151
007324  aa  6 02130 00 0060	desc9a	pr6|1112,48
007325  aa  6 02130 3521 00	epp2 	pr6|1112
007326  aa  6 02112 2521 00	spri2	pr6|1098
007327  aa  6 01716 3735 20	epp7 	pr6|974,*
007330  aa  7 00002 7271 20	lxl7 	pr7|2,*		icpu
007331  ta   000472 3520 00	epp2 	314
007332  aa  2 00000 5005 17	a9bd 	pr2|0,7
007333  aa  6 02114 2521 00	spri2	pr6|1100
007334  aa   771166 3520 04	epp2 	-3466,ic		000522 = 524000000056
007335  aa  6 02116 2521 00	spri2	pr6|1102
007336  aa   771252 3520 04	epp2 	-3414,ic		000610 = 526000000001
007337  aa  6 02120 2521 00	spri2	pr6|1104
007340  aa  6 02110 6211 00	eax1 	pr6|1096
007341  aa   010000 4310 07	fld  	4096,dl
007342  aa  6 00044 3701 20	epp4 	pr6|36,*
007343  la  4 00102 3521 20	epp2 	pr4|66,*		ioa_
007344  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 873
      opr_query_info.q_sw = "0"b;

007345  aa  6 00743 4501 00	stz  	pr6|483		opr_query_info.q_sw
						STATEMENT 1 ON LINE 874
      call opr_query_ (addr (opr_query_info),
       "execute the following manual reconfiguration on cpu ""^a"":", tags (icpu));

007346  aa  6 00742 3735 00	epp7 	pr6|482		opr_query_info
007347  aa  6 02146 6535 00	spri7	pr6|1126
007350  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
007351  aa   772077 00 0074	desc9a	-3009,60		001447 = 145170145143
007352  aa  6 02110 00 0074	desc9a	pr6|1096,60
007353  aa  6 02146 3521 00	epp2 	pr6|1126
007354  aa  6 02132 2521 00	spri2	pr6|1114
007355  aa  6 02110 3521 00	epp2 	pr6|1096
007356  aa  6 02134 2521 00	spri2	pr6|1116
007357  aa  6 01716 3715 20	epp5 	pr6|974,*
007360  aa  5 00002 7271 20	lxl7 	pr5|2,*		icpu
007361  ta   000472 3520 00	epp2 	314
007362  aa  2 00000 5005 17	a9bd 	pr2|0,7
007363  aa  6 02136 2521 00	spri2	pr6|1118
007364  aa   771144 3520 04	epp2 	-3484,ic		000530 = 464000000000
007365  aa  6 02140 2521 00	spri2	pr6|1120
007366  aa   771133 3520 04	epp2 	-3493,ic		000521 = 524000000071
007367  aa  6 02142 2521 00	spri2	pr6|1122
007370  aa   771220 3520 04	epp2 	-3440,ic		000610 = 526000000001
007371  aa  6 02144 2521 00	spri2	pr6|1124
007372  aa  6 02130 6211 00	eax1 	pr6|1112
007373  aa   014000 4310 07	fld  	6144,dl
007374  aa  6 00044 3701 20	epp4 	pr6|36,*
007375  la  4 00112 3521 20	epp2 	pr4|74,*		opr_query_
007376  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 876
      call timer_manager_$sleep (d, "11"b);

007377  aa   600000 2350 03	lda  	196608,du
007400  aa  6 02172 7551 00	sta  	pr6|1146
007401  aa  6 01722 3521 00	epp2 	pr6|978		d
007402  aa  6 02132 2521 00	spri2	pr6|1114
007403  aa  6 02172 3521 00	epp2 	pr6|1146
007404  aa  6 02134 2521 00	spri2	pr6|1116
007405  aa  6 02130 6211 00	eax1 	pr6|1112
007406  aa   010000 4310 07	fld  	4096,dl
007407  aa  6 00044 3701 20	epp4 	pr6|36,*
007410  la  4 00062 3521 20	epp2 	pr4|50,*		timer_manager_$sleep
007411  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 877
      call opr_query_ (addr (opr_query_info),
       " 1. set all port and initialize enable switches and interlace switches to off.");

007412  aa  6 00742 3735 00	epp7 	pr6|482		opr_query_info
007413  aa  6 02146 6535 00	spri7	pr6|1126
007414  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
007415  aa   772247 00 0120	desc9a	-2905,80		001663 = 040061056040
007416  aa  6 02174 00 0120	desc9a	pr6|1148,80
007417  aa  6 02146 3521 00	epp2 	pr6|1126
007420  aa  6 02132 2521 00	spri2	pr6|1114
007421  aa  6 02174 3521 00	epp2 	pr6|1148
007422  aa  6 02134 2521 00	spri2	pr6|1116
007423  aa   771105 3520 04	epp2 	-3515,ic		000530 = 464000000000
007424  aa  6 02136 2521 00	spri2	pr6|1118
007425  aa   771073 3520 04	epp2 	-3525,ic		000520 = 524000000116
007426  aa  6 02140 2521 00	spri2	pr6|1120
007427  aa  6 02130 6211 00	eax1 	pr6|1112
007430  aa   010000 4310 07	fld  	4096,dl
007431  aa  6 00044 3701 20	epp4 	pr6|36,*
007432  la  4 00112 3521 20	epp2 	pr4|74,*		opr_query_
007433  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 879
      call timer_manager_$sleep (d, "11"b);

007434  aa   600000 2350 03	lda  	196608,du
007435  aa  6 02173 7551 00	sta  	pr6|1147
007436  aa  6 01722 3521 00	epp2 	pr6|978		d
007437  aa  6 02132 2521 00	spri2	pr6|1114
007440  aa  6 02173 3521 00	epp2 	pr6|1147
007441  aa  6 02134 2521 00	spri2	pr6|1116
007442  aa  6 02130 6211 00	eax1 	pr6|1112
007443  aa   010000 4310 07	fld  	4096,dl
007444  aa  6 00044 3701 20	epp4 	pr6|36,*
007445  la  4 00062 3521 20	epp2 	pr4|50,*		timer_manager_$sleep
007446  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 880
      if cpu_type = "dps8"
       then
         call opr_query_ (addr (opr_query_info),
	" 2. set the assignment switches for all ports to 000.");

007447  aa  6 00113 2351 00	lda  	pr6|75		cpu_type
007450  aa   771135 1150 04	cmpa 	-3491,ic		000605 = 144160163070
007451  aa   000024 6010 04	tnz  	20,ic		007475
007452  aa  6 00742 3735 00	epp7 	pr6|482		opr_query_info
007453  aa  6 02146 6535 00	spri7	pr6|1126
007454  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
007455  aa   771703 00 0070	desc9a	-3133,56		001357 = 040062056040
007456  aa  6 02130 00 0070	desc9a	pr6|1112,56
007457  aa  6 02146 3521 00	epp2 	pr6|1126
007460  aa  6 02112 2521 00	spri2	pr6|1098
007461  aa  6 02130 3521 00	epp2 	pr6|1112
007462  aa  6 02114 2521 00	spri2	pr6|1100
007463  aa   771045 3520 04	epp2 	-3547,ic		000530 = 464000000000
007464  aa  6 02116 2521 00	spri2	pr6|1102
007465  aa   771076 3520 04	epp2 	-3522,ic		000563 = 524000000065
007466  aa  6 02120 2521 00	spri2	pr6|1104
007467  aa  6 02110 6211 00	eax1 	pr6|1096
007470  aa   010000 4310 07	fld  	4096,dl
007471  aa  6 00044 3701 20	epp4 	pr6|36,*
007472  la  4 00112 3521 20	epp2 	pr4|74,*		opr_query_
007473  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
007474  aa   000025 7100 04	tra  	21,ic		007521
						STATEMENT 1 ON LINE 884
      else if cpu_type = "l68 "
       then
         call opr_query_ (addr (opr_query_info),
	" 2. set all port assignment switches to 000 and the size switches to full");

007475  aa   771111 1150 04	cmpa 	-3511,ic		000606 = 154066070040
007476  aa   000023 6010 04	tnz  	19,ic		007521
007477  aa  6 00742 3735 00	epp7 	pr6|482		opr_query_info
007500  aa  6 02146 6535 00	spri7	pr6|1126
007501  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
007502  aa   772114 00 0114	desc9a	-2996,76		001615 = 040062056040
007503  aa  6 02174 00 0114	desc9a	pr6|1148,76
007504  aa  6 02146 3521 00	epp2 	pr6|1126
007505  aa  6 02132 2521 00	spri2	pr6|1114
007506  aa  6 02174 3521 00	epp2 	pr6|1148
007507  aa  6 02134 2521 00	spri2	pr6|1116
007510  aa   771020 3520 04	epp2 	-3568,ic		000530 = 464000000000
007511  aa  6 02136 2521 00	spri2	pr6|1118
007512  aa   771005 3520 04	epp2 	-3579,ic		000517 = 524000000111
007513  aa  6 02140 2521 00	spri2	pr6|1120
007514  aa  6 02130 6211 00	eax1 	pr6|1112
007515  aa   010000 4310 07	fld  	4096,dl
007516  aa  6 00044 3701 20	epp4 	pr6|36,*
007517  la  4 00112 3521 20	epp2 	pr4|74,*		opr_query_
007520  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 888
      call timer_manager_$sleep (d, "11"b);

007521  aa   600000 2350 03	lda  	196608,du
007522  aa  6 02173 7551 00	sta  	pr6|1147
007523  aa  6 01722 3521 00	epp2 	pr6|978		d
007524  aa  6 02132 2521 00	spri2	pr6|1114
007525  aa  6 02173 3521 00	epp2 	pr6|1147
007526  aa  6 02134 2521 00	spri2	pr6|1116
007527  aa  6 02130 6211 00	eax1 	pr6|1112
007530  aa   010000 4310 07	fld  	4096,dl
007531  aa  6 00044 3701 20	epp4 	pr6|36,*
007532  la  4 00062 3521 20	epp2 	pr4|50,*		timer_manager_$sleep
007533  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 889
      if cpu_type = "dps8" then
         call opr_query_ (addr (opr_query_info),
	" 3. set store size switches to 2222.");

007534  aa  6 00113 2351 00	lda  	pr6|75		cpu_type
007535  aa   771050 1150 04	cmpa 	-3544,ic		000605 = 144160163070
007536  aa   000024 6010 04	tnz  	20,ic		007562
007537  aa  6 00742 3735 00	epp7 	pr6|482		opr_query_info
007540  aa  6 02146 6535 00	spri7	pr6|1126
007541  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
007542  aa   771435 00 0044	desc9a	-3299,36		001176 = 040063056040
007543  aa  6 02130 00 0044	desc9a	pr6|1112,36
007544  aa  6 02146 3521 00	epp2 	pr6|1126
007545  aa  6 02112 2521 00	spri2	pr6|1098
007546  aa  6 02130 3521 00	epp2 	pr6|1112
007547  aa  6 02114 2521 00	spri2	pr6|1100
007550  aa   770760 3520 04	epp2 	-3600,ic		000530 = 464000000000
007551  aa  6 02116 2521 00	spri2	pr6|1102
007552  aa   770744 3520 04	epp2 	-3612,ic		000516 = 524000000044
007553  aa  6 02120 2521 00	spri2	pr6|1104
007554  aa  6 02110 6211 00	eax1 	pr6|1096
007555  aa   010000 4310 07	fld  	4096,dl
007556  aa  6 00044 3701 20	epp4 	pr6|36,*
007557  la  4 00112 3521 20	epp2 	pr4|74,*		opr_query_
007560  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
007561  aa   000025 7100 04	tra  	21,ic		007606
						STATEMENT 1 ON LINE 892
      else if cpu_type = "l68 "
       then
         call opr_query_ (addr (opr_query_info),
	" 3. remove the right free-edge connector on the 645pq wwb at slot ab28.");

007562  aa   771024 1150 04	cmpa 	-3564,ic		000606 = 154066070040
007563  aa   000023 6010 04	tnz  	19,ic		007606
007564  aa  6 00742 3735 00	epp7 	pr6|482		opr_query_info
007565  aa  6 02146 6535 00	spri7	pr6|1126
007566  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
007567  aa   771762 00 0110	desc9a	-3086,72		001550 = 040063056040
007570  aa  6 02150 00 0110	desc9a	pr6|1128,72
007571  aa  6 02146 3521 00	epp2 	pr6|1126
007572  aa  6 02132 2521 00	spri2	pr6|1114
007573  aa  6 02150 3521 00	epp2 	pr6|1128
007574  aa  6 02134 2521 00	spri2	pr6|1116
007575  aa   770733 3520 04	epp2 	-3621,ic		000530 = 464000000000
007576  aa  6 02136 2521 00	spri2	pr6|1118
007577  aa   770716 3520 04	epp2 	-3634,ic		000515 = 524000000107
007600  aa  6 02140 2521 00	spri2	pr6|1120
007601  aa  6 02130 6211 00	eax1 	pr6|1112
007602  aa   010000 4310 07	fld  	4096,dl
007603  aa  6 00044 3701 20	epp4 	pr6|36,*
007604  la  4 00112 3521 20	epp2 	pr4|74,*		opr_query_
007605  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 896
      call timer_manager_$sleep (d, "11"b);

007606  aa   600000 2350 03	lda  	196608,du
007607  aa  6 02173 7551 00	sta  	pr6|1147
007610  aa  6 01722 3521 00	epp2 	pr6|978		d
007611  aa  6 02132 2521 00	spri2	pr6|1114
007612  aa  6 02173 3521 00	epp2 	pr6|1147
007613  aa  6 02134 2521 00	spri2	pr6|1116
007614  aa  6 02130 6211 00	eax1 	pr6|1112
007615  aa   010000 4310 07	fld  	4096,dl
007616  aa  6 00044 3701 20	epp4 	pr6|36,*
007617  la  4 00062 3521 20	epp2 	pr4|50,*		timer_manager_$sleep
007620  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 897
      if cpu_type = "dps8" then
         call opr_query_ (addr (opr_query_info),
	" 4. verify that the mode switch is in vms.");

007621  aa  6 00113 2351 00	lda  	pr6|75		cpu_type
007622  aa   770763 1150 04	cmpa 	-3597,ic		000605 = 144160163070
007623  aa   000024 6010 04	tnz  	20,ic		007647
007624  aa  6 00742 3735 00	epp7 	pr6|482		opr_query_info
007625  aa  6 02146 6535 00	spri7	pr6|1126
007626  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
007627  aa   771403 00 0054	desc9a	-3325,44		001231 = 040064056040
007630  aa  6 02130 00 0054	desc9a	pr6|1112,44
007631  aa  6 02146 3521 00	epp2 	pr6|1126
007632  aa  6 02112 2521 00	spri2	pr6|1098
007633  aa  6 02130 3521 00	epp2 	pr6|1112
007634  aa  6 02114 2521 00	spri2	pr6|1100
007635  aa   770673 3520 04	epp2 	-3653,ic		000530 = 464000000000
007636  aa  6 02116 2521 00	spri2	pr6|1102
007637  aa   770655 3520 04	epp2 	-3667,ic		000514 = 524000000052
007640  aa  6 02120 2521 00	spri2	pr6|1104
007641  aa  6 02110 6211 00	eax1 	pr6|1096
007642  aa   010000 4310 07	fld  	4096,dl
007643  aa  6 00044 3701 20	epp4 	pr6|36,*
007644  la  4 00112 3521 20	epp2 	pr4|74,*		opr_query_
007645  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
007646  aa   000025 7100 04	tra  	21,ic		007673
						STATEMENT 1 ON LINE 900
      else if cpu_type = "l68 " then
         call opr_query_ (addr (opr_query_info),
	" 4. install the ""cpu test""  on the right free-edge connector at slot ab28.");

007647  aa   770737 1150 04	cmpa 	-3617,ic		000606 = 154066070040
007650  aa   000023 6010 04	tnz  	19,ic		007673
007651  aa  6 00742 3735 00	epp7 	pr6|482		opr_query_info
007652  aa  6 02146 6535 00	spri7	pr6|1126
007653  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
007654  aa   771717 00 0114	desc9a	-3121,76		001572 = 040064056040
007655  aa  6 02174 00 0114	desc9a	pr6|1148,76
007656  aa  6 02146 3521 00	epp2 	pr6|1126
007657  aa  6 02132 2521 00	spri2	pr6|1114
007660  aa  6 02174 3521 00	epp2 	pr6|1148
007661  aa  6 02134 2521 00	spri2	pr6|1116
007662  aa   770646 3520 04	epp2 	-3674,ic		000530 = 464000000000
007663  aa  6 02136 2521 00	spri2	pr6|1118
007664  aa   770627 3520 04	epp2 	-3689,ic		000513 = 524000000112
007665  aa  6 02140 2521 00	spri2	pr6|1120
007666  aa  6 02130 6211 00	eax1 	pr6|1112
007667  aa   010000 4310 07	fld  	4096,dl
007670  aa  6 00044 3701 20	epp4 	pr6|36,*
007671  la  4 00112 3521 20	epp2 	pr4|74,*		opr_query_
007672  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 903
      call timer_manager_$sleep (d, "11"b);

007673  aa   600000 2350 03	lda  	196608,du
007674  aa  6 02173 7551 00	sta  	pr6|1147
007675  aa  6 01722 3521 00	epp2 	pr6|978		d
007676  aa  6 02132 2521 00	spri2	pr6|1114
007677  aa  6 02173 3521 00	epp2 	pr6|1147
007700  aa  6 02134 2521 00	spri2	pr6|1116
007701  aa  6 02130 6211 00	eax1 	pr6|1112
007702  aa   010000 4310 07	fld  	4096,dl
007703  aa  6 00044 3701 20	epp4 	pr6|36,*
007704  la  4 00062 3521 20	epp2 	pr4|50,*		timer_manager_$sleep
007705  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 904
      call opr_query_ (addr (opr_query_info),
       " 5. depress the initialize and clear push button.");

007706  aa  6 00742 3735 00	epp7 	pr6|482		opr_query_info
007707  aa  6 02146 6535 00	spri7	pr6|1126
007710  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
007711  aa   771415 00 0064	desc9a	-3315,52		001325 = 040065056040
007712  aa  6 02130 00 0064	desc9a	pr6|1112,52
007713  aa  6 02146 3521 00	epp2 	pr6|1126
007714  aa  6 02112 2521 00	spri2	pr6|1098
007715  aa  6 02130 3521 00	epp2 	pr6|1112
007716  aa  6 02114 2521 00	spri2	pr6|1100
007717  aa   770611 3520 04	epp2 	-3703,ic		000530 = 464000000000
007720  aa  6 02116 2521 00	spri2	pr6|1102
007721  aa   770571 3520 04	epp2 	-3719,ic		000512 = 524000000061
007722  aa  6 02120 2521 00	spri2	pr6|1104
007723  aa  6 02110 6211 00	eax1 	pr6|1096
007724  aa   010000 4310 07	fld  	4096,dl
007725  aa  6 00044 3701 20	epp4 	pr6|36,*
007726  la  4 00112 3521 20	epp2 	pr4|74,*		opr_query_
007727  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 906
      call timer_manager_$sleep (d, "11"b);

007730  aa   600000 2350 03	lda  	196608,du
007731  aa  6 02173 7551 00	sta  	pr6|1147
007732  aa  6 01722 3521 00	epp2 	pr6|978		d
007733  aa  6 02132 2521 00	spri2	pr6|1114
007734  aa  6 02173 3521 00	epp2 	pr6|1147
007735  aa  6 02134 2521 00	spri2	pr6|1116
007736  aa  6 02130 6211 00	eax1 	pr6|1112
007737  aa   010000 4310 07	fld  	4096,dl
007740  aa  6 00044 3701 20	epp4 	pr6|36,*
007741  la  4 00062 3521 20	epp2 	pr4|50,*		timer_manager_$sleep
007742  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 907
      opr_query_info.q_sw = "1"b;

007743  aa   400000 2350 03	lda  	131072,du
007744  aa  6 00743 7551 00	sta  	pr6|483		opr_query_info.q_sw
						STATEMENT 1 ON LINE 908
      opr_query_info.prim = "done";

007745  aa   770703 2370 04	ldaq 	-3645,ic		000650 = 144157156145 040040040040
007746  aa  6 00744 7571 00	staq 	pr6|484		opr_query_info.prim
						STATEMENT 1 ON LINE 909
      opr_query_info.alt = "unable";

007747  aa   770677 2370 04	ldaq 	-3649,ic		000646 = 165156141142 154145040040
007750  aa  6 00746 7571 00	staq 	pr6|486		opr_query_info.alt
						STATEMENT 1 ON LINE 910
      opr_query_info.r_comment = "when reconfiguration complete";

007751  aa  040 100 100 404	mlr  	(ic),(pr),fill(040)
007752  aa   771165 00 0035	desc9a	-3467,29		001136 = 167150145156
007753  aa  6 00775 00 0100	desc9a	pr6|509,64	opr_query_info.r_comment
						STATEMENT 1 ON LINE 912
      call opr_query_ (addr (opr_query_info),
       " 6. set the port enable switch ""on"" for port ""^a"".", tags (iscu));

007754  aa  6 00742 3735 00	epp7 	pr6|482		opr_query_info
007755  aa  6 02146 6535 00	spri7	pr6|1126
007756  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
007757  aa   771332 00 0064	desc9a	-3366,52		001310 = 040066056040
007760  aa  6 02130 00 0064	desc9a	pr6|1112,52
007761  aa  6 02146 3521 00	epp2 	pr6|1126
007762  aa  6 02112 2521 00	spri2	pr6|1098
007763  aa  6 02130 3521 00	epp2 	pr6|1112
007764  aa  6 02114 2521 00	spri2	pr6|1100
007765  aa  6 01716 3715 20	epp5 	pr6|974,*
007766  aa  5 00004 7271 20	lxl7 	pr5|4,*		iscu
007767  ta   000472 3520 00	epp2 	314
007770  aa  2 00000 5005 17	a9bd 	pr2|0,7
007771  aa  6 02116 2521 00	spri2	pr6|1102
007772  aa   770536 3520 04	epp2 	-3746,ic		000530 = 464000000000
007773  aa  6 02120 2521 00	spri2	pr6|1104
007774  aa   770515 3520 04	epp2 	-3763,ic		000511 = 524000000062
007775  aa  6 02122 2521 00	spri2	pr6|1106
007776  aa   770612 3520 04	epp2 	-3702,ic		000610 = 526000000001
007777  aa  6 02124 2521 00	spri2	pr6|1108
010000  aa  6 02110 6211 00	eax1 	pr6|1096
010001  aa   014000 4310 07	fld  	6144,dl
010002  aa  6 00044 3701 20	epp4 	pr6|36,*
010003  la  4 00112 3521 20	epp2 	pr4|74,*		opr_query_
010004  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 914
      if opr_query_info.answer = "unable" then do;

010005  aa  6 00750 7271 00	lxl7 	pr6|488		opr_query_info.answer
010006  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
010007  aa  6 00751 00 0017	desc9a	pr6|489,x7	opr_query_info.answer
010010  aa   770636 00 0006	desc9a	-3682,6		000644 = 165156141142
010011  aa   000023 6010 04	tnz  	19,ic		010034
						STATEMENT 1 ON LINE 915
         call ioa_ ("having problems reconfiguring");

010012  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
010013  aa   771114 00 0040	desc9a	-3508,32		001126 = 150141166151
010014  aa  6 02130 00 0040	desc9a	pr6|1112,32
010015  aa  6 02130 3521 00	epp2 	pr6|1112
010016  aa  6 02112 2521 00	spri2	pr6|1098
010017  aa   770556 3520 04	epp2 	-3730,ic		000575 = 524000000035
010020  aa  6 02114 2521 00	spri2	pr6|1100
010021  aa  6 02110 6211 00	eax1 	pr6|1096
010022  aa   004000 4310 07	fld  	2048,dl
010023  aa  6 00044 3701 20	epp4 	pr6|36,*
010024  la  4 00102 3521 20	epp2 	pr4|66,*		ioa_
010025  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 916
         return ("1"b);

010026  aa  6 01716 3735 20	epp7 	pr6|974,*
010027  aa  7 00006 3715 20	epp5 	pr7|6,*
010030  aa  403 100 060 400	csl  	(),(pr),fill(1),bool(move)
010031  aa   000000 00 0000	descb	0,0
010032  aa  5 00000 00 0001	descb	pr5|0,1
010033  aa  6 01714 6101 00	rtcd 	pr6|972
						STATEMENT 1 ON LINE 917
      end;

						STATEMENT 1 ON LINE 919
      else return ("0"b);

010034  aa  6 01716 3735 20	epp7 	pr6|974,*
010035  aa  7 00006 3715 20	epp5 	pr7|6,*
010036  aa  003 100 060 400	csl  	(),(pr),fill(0),bool(move)
010037  aa   000000 00 0000	descb	0,0
010040  aa  5 00000 00 0001	descb	pr5|0,1
010041  aa  6 01714 6101 00	rtcd 	pr6|972
						STATEMENT 1 ON LINE 920
   end opr_com;

  END PROCEDURE opr_com
BEGIN PROCEDURE display_log
ENTRY TO display_log                                        STATEMENT 1 ON LINE 931
display_log: proc returns (bit (1));

010042  da     000423220000
010043  aa   000140 6270 00	eax7 	96
010044  aa  7 00034 3521 20	epp2 	pr7|28,*
010045  aa  2 01047 2721 00	tsp2 	pr2|551		int_entry
010046  aa     000002000000
010047  aa     000000000000
						STATEMENT 1 ON LINE 933
      if cmd_cnt = 1 then				/* if only last message wanted */
         count, limit = 1;

010050  aa  6 00040 3735 20	epp7 	pr6|32,*
010051  aa  7 00651 2361 00	ldq  	pr7|425		cmd_cnt
010052  aa   000001 1160 07	cmpq 	1,dl
010053  aa   000005 6010 04	tnz  	5,ic		010060
010054  aa   000001 2360 07	ldq  	1,dl
010055  aa  7 00662 7561 00	stq  	pr7|434		count
010056  aa  7 00663 7561 00	stq  	pr7|435		limit
010057  aa   000141 7100 04	tra  	97,ic		010220
						STATEMENT 1 ON LINE 935
      else if cmd_cnt >= 2 & cmd_cnt < 4 then		/* count, limit or -all */
         if args (2) = "-all" then			/* print entire log */
	  count, limit = -1;

010060  aa   000002 1160 07	cmpq 	2,dl
010061  aa   000131 6040 04	tmi  	89,ic		010212
010062  aa   000004 1160 07	cmpq 	4,dl
010063  aa   000127 6050 04	tpl  	87,ic		010212
010064  aa  7 00256 7271 00	lxl7 	pr7|174		args
010065  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
010066  aa  7 00257 00 0017	desc9a	pr7|175,x7	args
010067  aa   770423 00 0004	desc9a	-3821,4		000510 = 055141154154
010070  aa   000005 6010 04	tnz  	5,ic		010075
010071  aa   000001 3360 07	lcq  	1,dl
010072  aa  7 00662 7561 00	stq  	pr7|434		count
010073  aa  7 00663 7561 00	stq  	pr7|435		limit
010074  aa   000124 7100 04	tra  	84,ic		010220
						STATEMENT 1 ON LINE 938
         else do;

						STATEMENT 1 ON LINE 939
	  count = cv_dec_check_ ((args (2)), code);

010075  aa  7 00256 2361 00	ldq  	pr7|174		args
010076  aa   524000 2760 03	orq  	174080,du
010077  aa  6 00100 7561 00	stq  	pr6|64
010100  aa  7 00256 2361 00	ldq  	pr7|174		args
010101  aa  0 00551 7001 00	tsx0 	pr0|361		alloc_char_temp
010102  aa  6 00106 2521 00	spri2	pr6|70
010103  aa  7 00256 7271 00	lxl7 	pr7|174		args
010104  aa  040 140 100 540	mlr  	(pr,rl),(pr,rl),fill(040)
010105  aa  7 00257 00 0017	desc9a	pr7|175,x7	args
010106  aa  2 00000 00 0006	desc9a	pr2|0,ql
010107  aa  7 00100 3521 00	epp2 	pr7|64		code
010110  aa  6 00110 2521 00	spri2	pr6|72
010111  aa  6 00101 3521 00	epp2 	pr6|65
010112  aa  6 00112 2521 00	spri2	pr6|74
010113  aa  6 00100 3521 00	epp2 	pr6|64
010114  aa  6 00114 2521 00	spri2	pr6|76
010115  aa   770523 3520 04	epp2 	-3757,ic		000640 = 404000000043
010116  aa  6 00116 2521 00	spri2	pr6|78
010117  aa  6 00120 2521 00	spri2	pr6|80
010120  aa  6 00104 6211 00	eax1 	pr6|68
010121  aa   014000 4310 07	fld  	6144,dl
010122  la  4 00066 3521 20	epp2 	pr4|54,*		cv_dec_check_
010123  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
010124  aa  6 00101 2361 00	ldq  	pr6|65
010125  aa  6 00040 3735 20	epp7 	pr6|32,*
010126  aa  7 00662 7561 00	stq  	pr7|434		count
						STATEMENT 1 ON LINE 940
	  if code ^= 0 then				/* must be dec number */
	     return ("0"b);

010127  aa  0 01014 7001 00	tsx0 	pr0|524		shorten_stack
010130  aa  7 00100 2361 00	ldq  	pr7|64		code
010131  aa   000007 6000 04	tze  	7,ic		010140
010132  aa  6 00032 3715 20	epp5 	pr6|26,*
010133  aa  5 00002 3535 20	epp3 	pr5|2,*
010134  aa  003 100 060 400	csl  	(),(pr),fill(0),bool(move)
010135  aa   000000 00 0000	descb	0,0
010136  aa  3 00000 00 0001	descb	pr3|0,1
010137  aa  0 00631 7101 00	tra  	pr0|409		return_mac
						STATEMENT 1 ON LINE 942
	  if cmd_cnt < 3 then			/* no limit specified, set to 1 */
	     limit = 0;

010140  aa  7 00651 2361 00	ldq  	pr7|425		cmd_cnt
010141  aa   000003 1160 07	cmpq 	3,dl
010142  aa   000003 6050 04	tpl  	3,ic		010145
010143  aa  7 00663 4501 00	stz  	pr7|435		limit
010144  aa   000054 7100 04	tra  	44,ic		010220
						STATEMENT 1 ON LINE 944
	  else do;

						STATEMENT 1 ON LINE 945
	     limit = cv_dec_check_ ((args (3)), code);

010145  aa  7 00266 2361 00	ldq  	pr7|182		args
010146  aa   524000 2760 03	orq  	174080,du
010147  aa  6 00100 7561 00	stq  	pr6|64
010150  aa  7 00266 2361 00	ldq  	pr7|182		args
010151  aa  0 00551 7001 00	tsx0 	pr0|361		alloc_char_temp
010152  aa  6 00106 2521 00	spri2	pr6|70
010153  aa  7 00266 7271 00	lxl7 	pr7|182		args
010154  aa  040 140 100 540	mlr  	(pr,rl),(pr,rl),fill(040)
010155  aa  7 00267 00 0017	desc9a	pr7|183,x7	args
010156  aa  2 00000 00 0006	desc9a	pr2|0,ql
010157  aa  7 00100 3521 00	epp2 	pr7|64		code
010160  aa  6 00110 2521 00	spri2	pr6|72
010161  aa  6 00101 3521 00	epp2 	pr6|65
010162  aa  6 00112 2521 00	spri2	pr6|74
010163  aa  6 00100 3521 00	epp2 	pr6|64
010164  aa  6 00114 2521 00	spri2	pr6|76
010165  aa   770453 3520 04	epp2 	-3797,ic		000640 = 404000000043
010166  aa  6 00116 2521 00	spri2	pr6|78
010167  aa  6 00120 2521 00	spri2	pr6|80
010170  aa  6 00104 6211 00	eax1 	pr6|68
010171  aa   014000 4310 07	fld  	6144,dl
010172  aa  6 00044 3701 20	epp4 	pr6|36,*
010173  la  4 00066 3521 20	epp2 	pr4|54,*		cv_dec_check_
010174  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
010175  aa  6 00101 2361 00	ldq  	pr6|65
010176  aa  6 00040 3735 20	epp7 	pr6|32,*
010177  aa  7 00663 7561 00	stq  	pr7|435		limit
						STATEMENT 1 ON LINE 946
	     if code ^= 0 then			/* must be dec number */
	        return ("0"b);

010200  aa  0 01014 7001 00	tsx0 	pr0|524		shorten_stack
010201  aa  7 00100 2361 00	ldq  	pr7|64		code
010202  aa   000016 6000 04	tze  	14,ic		010220
010203  aa  6 00032 3715 20	epp5 	pr6|26,*
010204  aa  5 00002 3535 20	epp3 	pr5|2,*
010205  aa  003 100 060 400	csl  	(),(pr),fill(0),bool(move)
010206  aa   000000 00 0000	descb	0,0
010207  aa  3 00000 00 0001	descb	pr3|0,1
010210  aa  0 00631 7101 00	tra  	pr0|409		return_mac
						STATEMENT 1 ON LINE 948
	  end;

						STATEMENT 1 ON LINE 949
         end;

010211  aa   000007 7100 04	tra  	7,ic		010220
						STATEMENT 1 ON LINE 950
      else return ("0"b);

010212  aa  6 00032 3715 20	epp5 	pr6|26,*
010213  aa  5 00002 3535 20	epp3 	pr5|2,*
010214  aa  003 100 060 400	csl  	(),(pr),fill(0),bool(move)
010215  aa   000000 00 0000	descb	0,0
010216  aa  3 00000 00 0001	descb	pr3|0,1
010217  aa  0 00631 7101 00	tra  	pr0|409		return_mac
						STATEMENT 1 ON LINE 951
      call isolts_err_log_$display (count, limit, p_err);

010220  aa  6 00040 3735 20	epp7 	pr6|32,*
010221  aa  7 00662 3521 00	epp2 	pr7|434		count
010222  aa  6 00106 2521 00	spri2	pr6|70
010223  aa  7 00663 3521 00	epp2 	pr7|435		limit
010224  aa  6 00110 2521 00	spri2	pr6|72
010225  aa  6 00044 3701 20	epp4 	pr6|36,*
010226  ia  4 00010 3521 00	epp2 	pr4|8		p_err
010227  aa  6 00112 2521 00	spri2	pr6|74
010230  aa  6 00104 6211 00	eax1 	pr6|68
010231  aa   014000 4310 07	fld  	6144,dl
010232  la  4 00054 3521 20	epp2 	pr4|44,*		isolts_err_log_$display
010233  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 952
      return ("1"b);

010234  aa  6 00032 3735 20	epp7 	pr6|26,*
010235  aa  7 00002 3715 20	epp5 	pr7|2,*
010236  aa  403 100 060 400	csl  	(),(pr),fill(1),bool(move)
010237  aa   000000 00 0000	descb	0,0
010240  aa  5 00000 00 0001	descb	pr5|0,1
010241  aa  0 00631 7101 00	tra  	pr0|409		return_mac
						STATEMENT 1 ON LINE 953
   end display_log;

  END PROCEDURE display_log
BEGIN PROCEDURE abort
ENTRY TO abort                                              STATEMENT 1 ON LINE 959
abort: proc (ecode);

010242  aa  6 01724 6501 00	spri4	pr6|980
010243  aa  6 01726 2521 00	spri2	pr6|982
						STATEMENT 1 ON LINE 984
      call com_err_ (0, pname, "the following errors were detected while attempting reconfiguration:^/");

010244  aa  6 02220 4501 00	stz  	pr6|1168
010245  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
010246  aa   771261 00 0110	desc9a	-3407,72		001526 = 164150145040
010247  aa  6 02222 00 0110	desc9a	pr6|1170,72
010250  aa  6 02220 3521 00	epp2 	pr6|1168
010251  aa  6 02246 2521 00	spri2	pr6|1190
010252  aa   770222 3520 04	epp2 	-3950,ic		000474 = 151163157154
010253  aa  6 02250 2521 00	spri2	pr6|1192
010254  aa  6 02222 3521 00	epp2 	pr6|1170
010255  aa  6 02252 2521 00	spri2	pr6|1194
010256  aa   770347 3520 04	epp2 	-3865,ic		000625 = 404000000005
010257  aa  6 02254 2521 00	spri2	pr6|1196
010260  aa   770344 3520 04	epp2 	-3868,ic		000624 = 526000000006
010261  aa  6 02256 2521 00	spri2	pr6|1198
010262  aa   770225 3520 04	epp2 	-3947,ic		000507 = 524000000106
010263  aa  6 02260 2521 00	spri2	pr6|1200
010264  aa  6 02244 6211 00	eax1 	pr6|1188
010265  aa   014000 4310 07	fld  	6144,dl
010266  aa  6 00044 3701 20	epp4 	pr6|36,*
010267  la  4 00104 3521 20	epp2 	pr4|68,*		com_err_
010270  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 985
      if ecode > 17 then				/* if standard error code */
         call com_err_ (ecode, pname, "attempting reconfiguration");

010271  aa  6 01726 3735 20	epp7 	pr6|982,*
010272  aa  7 00002 2361 20	ldq  	pr7|2,*		ecode
010273  aa   000021 1160 07	cmpq 	17,dl
010274  aa   000026 6044 04	tmoz 	22,ic		010322
010275  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
010276  aa   770604 00 0034	desc9a	-3708,28		001101 = 141164164145
010277  aa  6 02244 00 0034	desc9a	pr6|1188,28
010300  aa  7 00002 3521 20	epp2 	pr7|2,*		ecode
010301  aa  6 02224 2521 00	spri2	pr6|1172
010302  aa   770172 3520 04	epp2 	-3974,ic		000474 = 151163157154
010303  aa  6 02226 2521 00	spri2	pr6|1174
010304  aa  6 02244 3521 00	epp2 	pr6|1188
010305  aa  6 02230 2521 00	spri2	pr6|1176
010306  aa   770332 3520 04	epp2 	-3878,ic		000640 = 404000000043
010307  aa  6 02232 2521 00	spri2	pr6|1178
010310  aa   770314 3520 04	epp2 	-3892,ic		000624 = 526000000006
010311  aa  6 02234 2521 00	spri2	pr6|1180
010312  aa   770271 3520 04	epp2 	-3911,ic		000603 = 524000000032
010313  aa  6 02236 2521 00	spri2	pr6|1182
010314  aa  6 02222 6211 00	eax1 	pr6|1170
010315  aa   014000 4310 07	fld  	6144,dl
010316  aa  6 00044 3701 20	epp4 	pr6|36,*
010317  la  4 00104 3521 20	epp2 	pr4|68,*		com_err_
010320  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
010321  aa   000505 7100 04	tra  	325,ic		011026
						STATEMENT 1 ON LINE 988
      else do;

						STATEMENT 1 ON LINE 989
         arg1, arg2, arg3, arg4 = "";

010322  aa  040 100 100 400	mlr  	(),(pr),fill(040)
010323  aa   000000 00 0000	desc9a	0,0
010324  aa  6 01732 00 0014	desc9a	pr6|986,12	arg1
010325  aa  040 100 100 400	mlr  	(),(pr),fill(040)
010326  aa   000000 00 0000	desc9a	0,0
010327  aa  6 01743 00 0200	desc9a	pr6|995,128	arg2
010330  aa  040 100 100 400	mlr  	(),(pr),fill(040)
010331  aa   000000 00 0000	desc9a	0,0
010332  aa  6 01735 00 0014	desc9a	pr6|989,12	arg3
010333  aa  040 100 100 400	mlr  	(),(pr),fill(040)
010334  aa   000000 00 0000	desc9a	0,0
010335  aa  6 01740 00 0014	desc9a	pr6|992,12	arg4
						STATEMENT 1 ON LINE 990
         if ecode > 9 & ecode < 14 then do;

010336  aa   000011 1160 07	cmpq 	9,dl
010337  aa   000052 6044 04	tmoz 	42,ic		010411
010340  aa   000016 1160 07	cmpq 	14,dl
010341  aa   000050 6050 04	tpl  	40,ic		010411
						STATEMENT 1 ON LINE 991
	  rswp = addr (switches (1));

010342  aa  6 00104 3715 00	epp5 	pr6|68		switches
010343  aa  6 00740 6515 00	spri5	pr6|480		rswp
						STATEMENT 1 ON LINE 992
	  arg1 = tags (cpu_tag);

010344  aa  6 00101 7271 00	lxl7 	pr6|65		cpu_tag
010345  aa  040 100 100 417	mlr  	(x7),(pr),fill(040)
010346  ta   000472 00 0001	desc9a	314,1
010347  aa  6 01732 00 0014	desc9a	pr6|986,12	arg1
						STATEMENT 1 ON LINE 993
	  call ioa_$rsnnl ("^d", arg2, i, rswp -> switch_w1.cell);

010350  aa   136144 2350 03	lda  	48228,du
010351  aa  6 02220 7551 00	sta  	pr6|1168
010352  aa  6 02220 3521 00	epp2 	pr6|1168
010353  aa  6 02224 2521 00	spri2	pr6|1172
010354  aa  6 01743 3521 00	epp2 	pr6|995		arg2
010355  aa  6 02226 2521 00	spri2	pr6|1174
010356  aa  6 00653 3521 00	epp2 	pr6|427		i
010357  aa  6 02230 2521 00	spri2	pr6|1176
010360  aa  5 00000 3521 00	epp2 	pr5|0		switch_w1.cell
010361  aa  6 02232 2521 00	spri2	pr6|1178
010362  aa   770200 3520 04	epp2 	-3968,ic		000562 = 524000000002
010363  aa  6 02234 2521 00	spri2	pr6|1180
010364  aa   770122 3520 04	epp2 	-4014,ic		000506 = 526000000200
010365  aa  6 02236 2521 00	spri2	pr6|1182
010366  aa   770242 3520 04	epp2 	-3934,ic		000630 = 404000000021
010367  aa  6 02240 2521 00	spri2	pr6|1184
010370  aa   770115 3520 04	epp2 	-4019,ic		000505 = 406000000005
010371  aa  6 02242 2521 00	spri2	pr6|1186
010372  aa  6 02222 6211 00	eax1 	pr6|1170
010373  aa   020000 4310 07	fld  	8192,dl
010374  aa  6 00044 3701 20	epp4 	pr6|36,*
010375  la  4 00106 3521 20	epp2 	pr4|70,*		ioa_$rsnnl
010376  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 994
	  if ecode > 10 & ecode < 13 then		/* if codes 11 or 12 */
	     arg3 = tags (scu_tag);

010377  aa  6 01726 3735 20	epp7 	pr6|982,*
010400  aa  7 00002 2361 20	ldq  	pr7|2,*		ecode
010401  aa   000012 1160 07	cmpq 	10,dl
010402  aa   000007 6044 04	tmoz 	7,ic		010411
010403  aa   000015 1160 07	cmpq 	13,dl
010404  aa   000005 6050 04	tpl  	5,ic		010411
010405  aa  6 00102 7271 00	lxl7 	pr6|66		scu_tag
010406  aa  040 100 100 417	mlr  	(x7),(pr),fill(040)
010407  ta   000472 00 0001	desc9a	314,1
010410  aa  6 01735 00 0014	desc9a	pr6|989,12	arg3
						STATEMENT 1 ON LINE 996
         end;

						STATEMENT 1 ON LINE 997
         go to etype (ecode);

010411  aa  7 00002 7271 20	lxl7 	pr7|2,*		ecode
010412  ta   777777 7100 17	tra  	-1,7
						STATEMENT 1 ON LINE 999
etype (2):					/* rcerr_isolts_illegal_cpu */
etype (3):					/* rcerr_isolts_cpu_online */
etype (4):					/* rcerr_isolts_no_config */
         arg1 = tags (cpu_tag);

010413  aa  6 00101 7261 00	lxl6 	pr6|65		cpu_tag
010414  aa  040 100 100 416	mlr  	(x6),(pr),fill(040)
010415  ta   000472 00 0001	desc9a	314,1
010416  aa  6 01732 00 0014	desc9a	pr6|986,12	arg1
						STATEMENT 1 ON LINE 1003
         go to display_err;

010417  aa   000344 7100 04	tra  	228,ic		010763
						STATEMENT 1 ON LINE 1005
etype (6):					/* rcerr_isolts_illegal_scu */
etype (7):					/* rcerr_isolts_bootload_scu */
etype (8):					/* rcerr_isolts_scu_not */
         arg1 = tags (scu_tag);

010420  aa  6 00102 7261 00	lxl6 	pr6|66		scu_tag
010421  aa  040 100 100 416	mlr  	(x6),(pr),fill(040)
010422  ta   000472 00 0001	desc9a	314,1
010423  aa  6 01732 00 0014	desc9a	pr6|986,12	arg1
						STATEMENT 1 ON LINE 1009
         go to display_err;

010424  aa   000337 7100 04	tra  	223,ic		010763
						STATEMENT 1 ON LINE 1011
etype (10):					/* rcerr_isolts_wrong_cell */
         call ioa_$rsnnl ("^o", arg3, i, rswp -> switch_w1.offset);

010425  aa   136157 2350 03	lda  	48239,du
010426  aa  6 02220 7551 00	sta  	pr6|1168
010427  aa  6 02220 3521 00	epp2 	pr6|1168
010430  aa  6 02224 2521 00	spri2	pr6|1172
010431  aa  6 01735 3521 00	epp2 	pr6|989		arg3
010432  aa  6 02226 2521 00	spri2	pr6|1174
010433  aa  6 00653 3521 00	epp2 	pr6|427		i
010434  aa  6 02230 2521 00	spri2	pr6|1176
010435  aa   000022 7260 07	lxl6 	18,dl
010436  aa  6 00740 3521 20	epp2 	pr6|480,*		switch_w1.offset
010437  aa  2 00000 5035 16	abd  	pr2|0,6
010440  aa  6 02232 2521 00	spri2	pr6|1178
010441  aa   770121 3520 04	epp2 	-4015,ic		000562 = 524000000002
010442  aa  6 02234 2521 00	spri2	pr6|1180
010443  aa   770041 3520 04	epp2 	-4063,ic		000504 = 526000000014
010444  aa  6 02236 2521 00	spri2	pr6|1182
010445  aa   770163 3520 04	epp2 	-3981,ic		000630 = 404000000021
010446  aa  6 02240 2521 00	spri2	pr6|1184
010447  aa   770034 3520 04	epp2 	-4068,ic		000503 = 516000000022
010450  aa  6 02242 2521 00	spri2	pr6|1186
010451  aa  6 02222 6211 00	eax1 	pr6|1170
010452  aa   020000 4310 07	fld  	8192,dl
010453  aa  6 00044 3701 20	epp4 	pr6|36,*
010454  la  4 00106 3521 20	epp2 	pr4|70,*		ioa_$rsnnl
010455  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 1013
         go to display_err;

010456  aa   000305 7100 04	tra  	197,ic		010763
						STATEMENT 1 ON LINE 1015
etype (12):					/* rcerr_isolts_wrong_scu_cell */
         call ioa_$rsnnl ("^o", arg4, i, rswp -> switch_w1.offset);

010457  aa   136157 2350 03	lda  	48239,du
010460  aa  6 02220 7551 00	sta  	pr6|1168
010461  aa  6 02220 3521 00	epp2 	pr6|1168
010462  aa  6 02224 2521 00	spri2	pr6|1172
010463  aa  6 01740 3521 00	epp2 	pr6|992		arg4
010464  aa  6 02226 2521 00	spri2	pr6|1174
010465  aa  6 00653 3521 00	epp2 	pr6|427		i
010466  aa  6 02230 2521 00	spri2	pr6|1176
010467  aa   000022 7260 07	lxl6 	18,dl
010470  aa  6 00740 3521 20	epp2 	pr6|480,*		switch_w1.offset
010471  aa  2 00000 5035 16	abd  	pr2|0,6
010472  aa  6 02232 2521 00	spri2	pr6|1178
010473  aa   770067 3520 04	epp2 	-4041,ic		000562 = 524000000002
010474  aa  6 02234 2521 00	spri2	pr6|1180
010475  aa   770007 3520 04	epp2 	-4089,ic		000504 = 526000000014
010476  aa  6 02236 2521 00	spri2	pr6|1182
010477  aa   770131 3520 04	epp2 	-4007,ic		000630 = 404000000021
010500  aa  6 02240 2521 00	spri2	pr6|1184
010501  aa   770002 3520 04	epp2 	-4094,ic		000503 = 516000000022
010502  aa  6 02242 2521 00	spri2	pr6|1186
010503  aa  6 02222 6211 00	eax1 	pr6|1170
010504  aa   020000 4310 07	fld  	8192,dl
010505  aa  6 00044 3701 20	epp4 	pr6|36,*
010506  la  4 00106 3521 20	epp2 	pr4|70,*		ioa_$rsnnl
010507  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 1017
         go to display_err;

010510  aa   000253 7100 04	tra  	171,ic		010763
						STATEMENT 1 ON LINE 1019
etype (17):					/* rcerr_isolts_no_mask */
         arg1 = tags (scu_tag);

010511  aa  6 00102 7261 00	lxl6 	pr6|66		scu_tag
010512  aa  040 100 100 416	mlr  	(x6),(pr),fill(040)
010513  ta   000472 00 0001	desc9a	314,1
010514  aa  6 01732 00 0014	desc9a	pr6|986,12	arg1
						STATEMENT 1 ON LINE 1021
         arg2 = tags (cpu_tag);

010515  aa  6 00101 7251 00	lxl5 	pr6|65		cpu_tag
010516  aa  040 100 100 415	mlr  	(x5),(pr),fill(040)
010517  ta   000472 00 0001	desc9a	314,1
010520  aa  6 01743 00 0200	desc9a	pr6|995,128	arg2
						STATEMENT 1 ON LINE 1022
         go to display_err;

010521  aa   000242 7100 04	tra  	162,ic		010763
						STATEMENT 1 ON LINE 1024
etype (14):					/* rcerr_isolts_bad_swiches */
         arg1 = tags (cpu_tag);

010522  aa  6 00101 7261 00	lxl6 	pr6|65		cpu_tag
010523  aa  040 100 100 416	mlr  	(x6),(pr),fill(040)
010524  ta   000472 00 0001	desc9a	314,1
010525  aa  6 01732 00 0014	desc9a	pr6|986,12	arg1
						STATEMENT 1 ON LINE 1026
         rswp = addr (switches (2));

010526  aa  6 00105 3715 00	epp5 	pr6|69		switches
010527  aa  6 00740 6515 00	spri5	pr6|480		rswp
						STATEMENT 1 ON LINE 1027
         if cpu_type = "l68 " then do;

010530  aa  6 00113 2351 00	lda  	pr6|75		cpu_type
010531  aa   770055 1150 04	cmpa 	-4051,ic		000606 = 154066070040
010532  aa   000031 6010 04	tnz  	25,ic		010563
						STATEMENT 1 ON LINE 1028
	  if dps_rsw_2.fault_base then
	     call sw_mess_1 (arg2, "fault base");

010533  aa  5 00000 2351 00	lda  	pr5|0		dps_rsw_2.fault_base
010534  aa   007740 3150 03	cana 	4064,du
010535  aa   000011 6000 04	tze  	9,ic		010546
010536  aa   770211 2350 04	lda  	-3959,ic		000747 = 146141165154
010537  aa   770211 2360 04	ldq  	-3959,ic		000750 = 164040142141
010540  aa  6 02244 7571 00	staq 	pr6|1188
010541  aa   163145 2350 03	lda  	58981,du
010542  aa  6 02246 7551 00	sta  	pr6|1190
010543  aa   000361 3520 04	epp2 	241,ic		011124 = 000004000000
010544  aa  2 00000 2351 00	lda  	pr2|0
010545  aa   775076 6700 04	tsp4 	-1474,ic		005643
						STATEMENT 1 ON LINE 1030
	  if dps_rsw_2.cpu_num ^= 0 then
	     call sw_mess_1 (arg2, "processor number");

010546  aa  6 00740 2361 20	ldq  	pr6|480,*		dps_rsw_2.cpu_num
010547  aa  0 00432 3771 00	anaq 	pr0|282		= 000000000000 000000000007
010550  aa   000044 6000 04	tze  	36,ic		010614
010551  aa   770216 2350 04	lda  	-3954,ic		000767 = 160162157143
010552  aa   770216 2360 04	ldq  	-3954,ic		000770 = 145163163157
010553  aa  6 02244 7571 00	staq 	pr6|1188
010554  aa   770215 2350 04	lda  	-3955,ic		000771 = 162040156165
010555  aa   770215 2360 04	ldq  	-3955,ic		000772 = 155142145162
010556  aa  6 02246 7571 00	staq 	pr6|1190
010557  aa   000333 3520 04	epp2 	219,ic		011112 = 000004000000
010560  aa  2 00000 2351 00	lda  	pr2|0
010561  aa   775062 6700 04	tsp4 	-1486,ic		005643
						STATEMENT 1 ON LINE 1032
         end;

010562  aa   000032 7100 04	tra  	26,ic		010614
						STATEMENT 1 ON LINE 1033
         else if cpu_type = "dps8" then do;

010563  aa   770022 1150 04	cmpa 	-4078,ic		000605 = 144160163070
010564  aa   000030 6010 04	tnz  	24,ic		010614
						STATEMENT 1 ON LINE 1034
	  if dps8_rsw_2.fault_base then
	     call sw_mess_1 (arg2, "fault base");

010565  aa  5 00000 2351 00	lda  	pr5|0		dps8_rsw_2.fault_base
010566  aa   007740 3150 03	cana 	4064,du
010567  aa   000011 6000 04	tze  	9,ic		010600
010570  aa   770157 2350 04	lda  	-3985,ic		000747 = 146141165154
010571  aa   770157 2360 04	ldq  	-3985,ic		000750 = 164040142141
010572  aa  6 02244 7571 00	staq 	pr6|1188
010573  aa   163145 2350 03	lda  	58981,du
010574  aa  6 02246 7551 00	sta  	pr6|1190
010575  aa   000327 3520 04	epp2 	215,ic		011124 = 000004000000
010576  aa  2 00000 2351 00	lda  	pr2|0
010577  aa   775044 6700 04	tsp4 	-1500,ic		005643
						STATEMENT 1 ON LINE 1036
	  if dps8_rsw_2.cpu_num ^= 0 then
	     call sw_mess_1 (arg2, "processor number");

010600  aa  6 00740 2361 20	ldq  	pr6|480,*		dps8_rsw_2.cpu_num
010601  aa  0 00432 3771 00	anaq 	pr0|282		= 000000000000 000000000007
010602  aa   000012 6000 04	tze  	10,ic		010614
010603  aa   770164 2350 04	lda  	-3980,ic		000767 = 160162157143
010604  aa   770164 2360 04	ldq  	-3980,ic		000770 = 145163163157
010605  aa  6 02244 7571 00	staq 	pr6|1188
010606  aa   770163 2350 04	lda  	-3981,ic		000771 = 162040156165
010607  aa   770163 2360 04	ldq  	-3981,ic		000772 = 155142145162
010610  aa  6 02246 7571 00	staq 	pr6|1190
010611  aa   000301 3520 04	epp2 	193,ic		011112 = 000004000000
010612  aa  2 00000 2351 00	lda  	pr2|0
010613  aa   775030 6700 04	tsp4 	-1512,ic		005643
						STATEMENT 1 ON LINE 1038
         end;

						STATEMENT 1 ON LINE 1039
         rswp = addr (switches (4));

010614  aa  6 00107 3735 00	epp7 	pr6|71		switches
010615  aa  6 00740 6535 00	spri7	pr6|480		rswp
						STATEMENT 1 ON LINE 1040
         do i = 0 to 7;

010616  aa  6 00653 4501 00	stz  	pr6|427		i
010617  aa   000000 0110 03	nop  	0,du
010620  aa  6 00653 2361 00	ldq  	pr6|427		i
010621  aa   000007 1160 07	cmpq 	7,dl
010622  aa   000141 6054 04	tpnz 	97,ic		010763
						STATEMENT 1 ON LINE 1041
	  if i < 4 then
	     pip = addr (addr (switches (1)) -> rsw_1_3.port_info (i));

010623  aa   000004 1160 07	cmpq 	4,dl
010624  aa   000006 6050 04	tpl  	6,ic		010632
010625  aa   000011 4020 07	mpy  	9,dl
010626  aa  6 00104 3521 00	epp2 	pr6|68		rsw_1_3.port_info
010627  aa  2 00000 5035 06	abd  	pr2|0,ql
010630  aa  6 00664 2521 00	spri2	pr6|436		pip
010631  aa   000005 7100 04	tra  	5,ic		010636
						STATEMENT 1 ON LINE 1043
	  else pip = addr (addr (switches (3)) -> rsw_1_3.port_info (i - 4));

010632  aa   000011 4020 07	mpy  	9,dl
010633  aa  6 00105 3521 00	epp2 	pr6|69		rsw_1_3.port_info
010634  aa  2 00000 5035 06	abd  	pr2|0,ql
010635  aa  6 00664 2521 00	spri2	pr6|436		pip
						STATEMENT 1 ON LINE 1045
	  if pi.port_assignment then
	     call sw_mess_2 (arg2, "port assignment");

010636  aa  000 000 066 500	cmpb 	(pr),(),fill(0)
010637  aa  2 00000 00 0003	descb	pr2|0,3		pi.port_assignment
010640  aa   000000 00 0000	descb	0,0
010641  aa   000012 6000 04	tze  	10,ic		010653
010642  aa   770121 2350 04	lda  	-4015,ic		000763 = 160157162164
010643  aa   770121 2360 04	ldq  	-4015,ic		000764 = 040141163163
010644  aa  6 02244 7571 00	staq 	pr6|1188
010645  aa   770120 2350 04	lda  	-4016,ic		000765 = 151147156155
010646  aa   770120 2360 04	ldq  	-4016,ic		000766 = 145156164000
010647  aa  6 02246 7571 00	staq 	pr6|1190
010650  aa   000230 3520 04	epp2 	152,ic		011100 = 000004000000
010651  aa  2 00000 2351 00	lda  	pr2|0
010652  aa   775056 6700 04	tsp4 	-1490,ic		005730
						STATEMENT 1 ON LINE 1047
	  if pi.port_enable then
	     call sw_mess_2 (arg2, "port enable");

010653  aa  6 00664 3735 20	epp7 	pr6|436,*		pip
010654  aa  000 000 066 500	cmpb 	(pr),(),fill(0)
010655  aa  7 00000 03 0001	descb	pr7|0(3),1	pi.port_enable
010656  aa   000000 00 0000	descb	0,0
010657  aa   000010 6000 04	tze  	8,ic		010667
010660  aa   770064 2370 04	ldaq 	-4044,ic		000744 = 160157162164 040145156141
010661  aa  6 02244 7571 00	staq 	pr6|1188
010662  aa   770064 2350 04	lda  	-4044,ic		000746 = 142154145000
010663  aa  6 02246 7551 00	sta  	pr6|1190
010664  aa   000202 3520 04	epp2 	130,ic		011066 = 000004000000
010665  aa  2 00000 2351 00	lda  	pr2|0
010666  aa   775042 6700 04	tsp4 	-1502,ic		005730
						STATEMENT 1 ON LINE 1049
	  if pi.initialize_enable then
	     call sw_mess_2 (arg2, "initialize enable");

010667  aa  6 00664 3735 20	epp7 	pr6|436,*		pip
010670  aa  000 000 066 500	cmpb 	(pr),(),fill(0)
010671  aa  7 00000 04 0001	descb	pr7|0(4),1	pi.initialize_enable
010672  aa   000000 00 0000	descb	0,0
010673  aa   000007 6000 04	tze  	7,ic		010702
010674  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
010675  aa   770117 00 0024	desc9a	-4017,20		001013 = 151156151164
010676  aa  6 02244 00 0024	desc9a	pr6|1188,20
010677  aa   000155 3520 04	epp2 	109,ic		011054 = 000004000000
010700  aa  2 00000 2351 00	lda  	pr2|0
010701  aa   775027 6700 04	tsp4 	-1513,ic		005730
						STATEMENT 1 ON LINE 1051
	  if pi.interlace_enable | rsw_4.four (i) then
	     call sw_mess_2 (arg2, "interlace");

010702  aa  6 00664 3735 20	epp7 	pr6|436,*		pip
010703  aa  000 000 066 500	cmpb 	(pr),(),fill(0)
010704  aa  7 00000 05 0001	descb	pr7|0(5),1	pi.interlace_enable
010705  aa   000000 00 0000	descb	0,0
010706  aa   000010 6010 04	tnz  	8,ic		010716
010707  aa  6 00653 2361 00	ldq  	pr6|427		i
010710  aa   000001 7360 00	qls  	1
010711  aa  6 00740 3715 20	epp5 	pr6|480,*		rswp
010712  aa  000 000 066 506	cmpb 	(pr,ql),(),fill(0)
010713  aa  5 00000 24 0001	descb	pr5|0(13),1	rsw_4.four
010714  aa   000000 00 0000	descb	0,0
010715  aa   000011 6000 04	tze  	9,ic		010726
010716  aa   770023 2350 04	lda  	-4077,ic		000741 = 151156164145
010717  aa   770023 2360 04	ldq  	-4077,ic		000742 = 162154141143
010720  aa  6 02244 7571 00	staq 	pr6|1188
010721  aa   145000 2350 03	lda  	51712,du
010722  aa  6 02246 7551 00	sta  	pr6|1190
010723  aa   000117 3520 04	epp2 	79,ic		011042 = 000004000000
010724  aa  2 00000 2351 00	lda  	pr2|0
010725  aa   775003 6700 04	tsp4 	-1533,ic		005730
						STATEMENT 1 ON LINE 1053
	  if pi.mem_size ^= 0 then
	     call sw_mess_2 (arg2, "size");

010726  aa  6 00664 3735 20	epp7 	pr6|436,*		pip
010727  aa  003 100 060 500	csl  	(pr),(pr),fill(0),bool(move)
010730  aa  7 00000 06 0003	descb	pr7|0(6),3	pi.mem_size
010731  aa  6 00056 00 0044	descb	pr6|46,36
010732  aa  6 00056 2351 00	lda  	pr6|46
010733  aa   000105 7730 00	lrl  	69
010734  aa   000006 6000 04	tze  	6,ic		010742
010735  aa   767542 2350 04	lda  	-4254,ic		000477 = 163151172145
010736  aa  6 02220 7551 00	sta  	pr6|1168
010737  aa   000071 3520 04	epp2 	57,ic		011030 = 000004000000
010740  aa  2 00000 2351 00	lda  	pr2|0
010741  aa   774767 6700 04	tsp4 	-1545,ic		005730
						STATEMENT 1 ON LINE 1055
	  if rsw_4.half (i) then
	     call sw_mess_2 (arg2, "half/full");

010742  aa  6 00653 2361 00	ldq  	pr6|427		i
010743  aa   000001 7360 00	qls  	1
010744  aa  6 00740 3735 20	epp7 	pr6|480,*		rswp
010745  aa  000 000 066 506	cmpb 	(pr,ql),(),fill(0)
010746  aa  7 00000 25 0001	descb	pr7|0(14),1	rsw_4.half
010747  aa   000000 00 0000	descb	0,0
010750  aa   000010 6000 04	tze  	8,ic		010760
010751  aa   767765 2370 04	ldaq 	-4107,ic		000736 = 150141154146 057146165154
010752  aa  6 02244 7571 00	staq 	pr6|1188
010753  aa   154000 2350 03	lda  	55296,du
010754  aa  6 02246 7551 00	sta  	pr6|1190
010755  aa   000065 3520 04	epp2 	53,ic		011042 = 000004000000
010756  aa  2 00000 2351 00	lda  	pr2|0
010757  aa   774751 6700 04	tsp4 	-1559,ic		005730
						STATEMENT 1 ON LINE 1057
         end;

010760  aa  6 00653 0541 00	aos  	pr6|427		i
010761  aa   777637 7100 04	tra  	-97,ic		010620
						STATEMENT 1 ON LINE 1059
         go to display_err;

010762  aa   000001 7100 04	tra  	1,ic		010763
						STATEMENT 1 ON LINE 1061
etype (1):					/* rcerr_isolts_locked */
etype (5):					/* rcerr_isolts_two_scu */
etype (9):					/* rcerr_isolts_not */
etype (11):					/* rcerr_isolts_wrong_scu */
etype (13):					/* rcerr_isolts_no_response */
etype (15):					/* rcerr_isolts_lda_fail */
etype (16):					/* rcerr_isolts_no_str_flt */

display_err: call com_err_ (0, pname, reconfig_err_message (ecode), arg1, arg2, arg3, arg4);

010763  aa  6 02220 4501 00	stz  	pr6|1168
010764  aa  6 01726 3735 20	epp7 	pr6|982,*
010765  aa  7 00002 2361 20	ldq  	pr7|2,*		ecode
010766  aa   000004 7360 00	qls  	4
010767  aa  6 02220 3521 00	epp2 	pr6|1168
010770  aa  6 02264 2521 00	spri2	pr6|1204
010771  aa   767503 3520 04	epp2 	-4285,ic		000474 = 151163157154
010772  aa  6 02266 2521 00	spri2	pr6|1206
010773  ta   000001 3520 06	epp2 	1,ql
010774  aa  6 02270 2521 00	spri2	pr6|1208
010775  aa  6 01732 3521 00	epp2 	pr6|986		arg1
010776  aa  6 02272 2521 00	spri2	pr6|1210
010777  aa  6 01743 3521 00	epp2 	pr6|995		arg2
011000  aa  6 02274 2521 00	spri2	pr6|1212
011001  aa  6 01735 3521 00	epp2 	pr6|989		arg3
011002  aa  6 02276 2521 00	spri2	pr6|1214
011003  aa  6 01740 3521 00	epp2 	pr6|992		arg4
011004  aa  6 02300 2521 00	spri2	pr6|1216
011005  aa   767620 3520 04	epp2 	-4208,ic		000625 = 404000000005
011006  aa  6 02302 2521 00	spri2	pr6|1218
011007  aa   767615 3520 04	epp2 	-4211,ic		000624 = 526000000006
011010  aa  6 02304 2521 00	spri2	pr6|1220
011011  aa   767465 3520 04	epp2 	-4299,ic		000476 = 526000000100
011012  aa  6 02306 2521 00	spri2	pr6|1222
011013  aa   767471 3520 04	epp2 	-4295,ic		000504 = 526000000014
011014  aa  6 02310 2521 00	spri2	pr6|1224
011015  aa  6 02314 2521 00	spri2	pr6|1228
011016  aa  6 02316 2521 00	spri2	pr6|1230
011017  aa   767467 3520 04	epp2 	-4297,ic		000506 = 526000000200
011020  aa  6 02312 2521 00	spri2	pr6|1226
011021  aa  6 02262 6211 00	eax1 	pr6|1202
011022  aa   034000 4310 07	fld  	14336,dl
011023  aa  6 00044 3701 20	epp4 	pr6|36,*
011024  la  4 00104 3521 20	epp2 	pr4|68,*		com_err_
011025  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 1071
      end;

						STATEMENT 1 ON LINE 1075
   end abort;

011026  aa  6 01724 6101 00	rtcd 	pr6|980
  END PROCEDURE abort
  END PROCEDURE isolts_


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
