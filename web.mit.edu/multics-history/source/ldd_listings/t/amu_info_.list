	COMPILATION LISTING OF SEGMENT amu_info_
	Compiled by: Multics PL/I Compiler, Release 29, of July 28, 1986
	Compiled at: Honeywell Bull, Phoenix AZ, SysM
	Compiled on: 02/16/88  1410.9 mst Tue
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 amu_info_: proc ();
        7 
        8 	return;					/* not an entrypoint */
        9 
       10 /* format: style4,delnl,insnl,ifthenstmt,indnoniterend,ifthendo,ifthen,^thendo */
       11 
       12 /* This procedure is in charge of creating and destroying amu_info structures
       13*
       14*   09/06/80 W. Olin Sibert
       15**/
       16 
       17 dcl  (
       18      P_amu_info_ptr pointer,
       19      P_type fixed bin
       20      ) parameter;
       21 
       22 dcl  system_area area based (system_area_ptr);
       23 dcl  system_area_ptr pointer;
       24 dcl  new_aip  pointer;
       25 dcl  code fixed bin (35);
       26 dcl  amu_$check_info entry (pointer);
       27 dcl  amu_$fdump_mgr_really_terminate entry (ptr, fixed bin (35));
       28 dcl  amu_$deadproc_term entry (ptr, fixed bin (35));
       29 dcl  get_system_free_area_ entry () returns (pointer);
       30 
       31 dcl  amu_reset bit (1) init ("0"b);
       32 
       33 
       34 dcl  (clock, null) builtin;
       35 
       36 
       37 
       38 amu_info_$create:
       39      entry (P_amu_info_ptr, P_type);
       40 
       41 /* This entrypoint allocates and initializes an amu_info */
       42 
       43 	system_area_ptr = get_system_free_area_ ();
       44 
       45 	allocate amu_info in (system_area) set (amu_info_ptr);
       46 
       47 	amu_info.version = AMU_INFO_VERSION_2;
       48 	amu_info.type = P_type;
       49 	amu_info.time_created = clock ();
       50 	amu_info.area_ptr = system_area_ptr;		/* so we can use amu_area from now on */
       51 	amu_info.translation_table_ptr = null ();
       52 	amu_info.fdump_info_ptr = null ();
       53 	amu_info.hardcore_info_ptr = null ();
       54 	amu_info.process_info_ptr = null ();
       55 	amu_info.definitions_info_ptr = null ();
       56 	amu_info.early_dump = "0"b;
       57 
       58 /* we have no Idea how to chain this entry so null the chain pointer and let some one who called chain it in (some one that cares */
       59 
       60 	amu_info.chain.prev = null ();
       61 	amu_info.chain.next = null ();
       62 
       63 
       64 	allocate definitions_info in (amu_area) set (amu_info.definitions_info_ptr);
       65 	definitions_info.hash_buckets (*) = null;
       66 	definitions_info.t_ptrs (*).val = null;
       67 	do t_ptr_indx = 0 to 9;
       68 	     definitions_info.t_ptrs (t_ptr_indx).name = init_ptr_names (t_ptr_indx);
       69 	end;
       70 
       71 	allocate hardcore_info in (amu_area) set (amu_info.hardcore_info_ptr);
       72 
       73 	amu_info.copy_chain = null ();		/* no copies created yet */
       74 
       75 	amu_info.process_info_ptr = null ();		/* not specified yet */
       76 	amu_info.process_idx = -1;
       77 
       78 
       79 	P_amu_info_ptr = amu_info_ptr;		/* all done */
       80 	return;
       81 
       82 
       83 
       84 amu_info_$destroy:
       85      entry (P_amu_info_ptr);
       86 
       87 /* This entry destroys an amu_info */
       88 
       89 	amu_info_ptr = P_amu_info_ptr;
       90 	new_aip = null ();
       91 	call amu_$check_info (amu_info_ptr);
       92 
       93 	if amu_info.type = FDUMP_TYPE | amu_info.type = FDUMP_PROCESS_TYPE then
       94 	     if amu_info.fdump_info_ptr ^= null () then call amu_$fdump_mgr_really_terminate (amu_info_ptr, code);
       95 
       96 	if amu_info.type = SAVED_PROC_TYPE then call amu_$deadproc_term (amu_info_ptr, code);
       97 
       98 
       99 	system_area_ptr = amu_info.area_ptr;		/* for when it is freed later */
      100 
      101 /* now unthread it before doing anything */
      102 /* return prev translation in chain if there is one */
      103 /* if no prev return next, */
      104 /* if next is null then return the null ptr */
      105 
      106 	if amu_info.chain.prev ^= null () then do;
      107 	     amu_info.chain.prev -> amu_info.chain.next = amu_info.chain.next;
      108 	     new_aip = amu_info.chain.prev;
      109 	     end;
      110 	if amu_info.chain.next ^= null () then amu_info.chain.next -> amu_info.chain.prev = amu_info.chain.prev;
      111 	if new_aip = null () then new_aip = amu_info.chain.next;
      112 
      113 	if amu_info.translation_table_ptr ^= null () then /* free anything which may have been allocated */
      114 	     free translation_table in (system_area);
      115 
      116 	if amu_info.hardcore_info_ptr ^= null () then free hardcore_info in (system_area);
      117 
      118 /* This will delete one amu_info and default to the last translation in
      119*   The chain if it is valid null if not */
      120 
      121 	free amu_info in (system_area);
      122 
      123 	P_amu_info_ptr = new_aip;
      124 
      125 	return;					/* all done for this entry */
      126 
      127 
  1     1 /*	BEGIN INCLUDE FILE amu_info.incl.pl1		*/
  1     2 
  1     3 dcl 1 amu_info aligned based (amu_info_ptr),
  1     4     2 version char (8) aligned,			/* AMU_INFO_VERSION */
  1     5     2 flags aligned,
  1     6       3 early_dump bit(1) unal,
  1     7       3 pad  bit(35) unal,
  1     8     2 type fixed bin unal,				/* One of the types below */
  1     9     2 time_created fixed bin (71) aligned,		/* time created -- for debugging purposes */
  1    10     2 chain,					/* a chain of all the amu_info's which exist */
  1    11       3 prev pointer unaligned,
  1    12       3 next pointer unaligned,
  1    13 
  1    14     2 area_ptr pointer,				/* pointer to area used for allocating things */
  1    15 
  1    16     2 translation_table_ptr pointer,			/* pointer to address map -- always present */
  1    17 						/*   SEE: amu_translation.incl.pl1 */
  1    18     2 fdump_info_ptr pointer, 			
  1    19 						/* pointer to FDUMP info, present if looking at an FDUMP */
  1    20 						/*   SEE: amu_fdump_info.incl.pl1 */
  1    21 						/* old_uid_table pointer if looking at a SAVED PROC. */
  1    22 						/* See: amu_old_uid_table			*/
  1    23 	
  1    24 
  1    25     2 hardcore_info_ptr pointer,			/* pointer to hardcore information -- always present */
  1    26 						/*   SEE: amu_hardcore_info.incl.pl1 */
  1    27     2 copy_chain pointer,				/* pointer to info about segment copies */
  1    28 						/*   SEE: amu_copy_info.incl.pl1 */
  1    29     2 process_info_ptr pointer,			/* pointer to process info for this translation */
  1    30 						/*   SEE: amu_process_info.incl.pl1 */
  1    31     2 process_idx fixed bin,				/* index of process in translation-specifc process table */
  1    32 
  1    33     2 proc_idx_hold fixed bin,			/* a place to keep the index when a changing to another proc */
  1    34 
  1    35     2 error_info,					/* various info about how amu_error_ is to behave */
  1    36       3 error_flags aligned,
  1    37         4 handler_exists bit (1) unaligned,		/* set to indicate existence of an amu_error handler */
  1    38         4 in_subsystem bit (1) unaligned,		/* This amu_info belongs to an ssu_ maintained subsystem */
  1    39         4 pad bit (34) unaligned,
  1    40       3 sci_ptr pointer,				/* sci_ptr for subsystem, if in_subsystem = "1"b */
  1    41     2 definitions_info_ptr ptr;
  1    42 
  1    43 dcl  amu_area area based (amu_info.area_ptr);
  1    44 
  1    45 dcl  amu_info_ptr pointer;
  1    46 
  1    47 dcl (FDUMP_TYPE		init (1037),		/* the various legitimate types of amu_info's */
  1    48      FDUMP_PROCESS_TYPE	init (1038),
  1    49      ONLINE_TYPE		init (1039),
  1    50      ONLINE_PROCESS_TYPE	init (1040),
  1    51      NETWORK_FDUMP_TYPE	init (1041),
  1    52      NETWORK_ONLINE_TYPE	init (1042),
  1    53      SAVED_PROC_TYPE	init (1043),
  1    54      INDIRECT_TYPE		init (1044)) fixed bin internal static options (constant);
  1    55 
  1    56 dcl  AMU_INFO_VERSION_1 char (8) internal static options (constant) init ("amu_v1");
  1    57 dcl  AMU_INFO_VERSION char (8) internal static options (constant) init ("amu_v1");
  1    58 dcl  AMU_INFO_VERSION_2 char (8) internal static options (constant) init ("amu_v2");
  1    59 
  1    60 dcl  PDIR_SUFFIX		char(4) init("pdir") int static options(constant);
  1    61 
  1    62 /*	END INCLUDE FILE amu_info.incl.pl1		*/
      128 
      129 
  2     1 /*	BEGIN INCLUDE FILE amu_translation.incl.pl1	*/
  2     2 
  2     3 
  2     4 
  2     5 /****^  HISTORY COMMENTS:
  2     6*  1) change(87-01-16,Parisek), approve(87-07-16,MCR7746),
  2     7*     audit(87-07-16,Fawcett), install(87-07-28,MR12.1-1049):
  2     8*     Added the "replaced" field to record whether a segment was replaced by
  2     9*     another segment via the "replace" request.
  2    10*                                                   END HISTORY COMMENTS */
  2    11 
  2    12 
  2    13 dcl 1 translation_table aligned based (amu_info.translation_table_ptr),
  2    14     2 n_entries fixed bin,
  2    15     2 max_entries fixed bin,
  2    16 
  2    17     2 valid_array aligned,				/* one bit for each valid segno */
  2    18       3 valid (0 : 4095) bit (1) unaligned,
  2    19     2 used_array aligned,				/* one bit for each existing translation */
  2    20       3 used (0 : 4095) bit (1) unaligned,
  2    21 
  2    22     2 array (alloc_translation_table_max_entries refer (translation_table.max_entries)) like translation;
  2    23 
  2    24 dcl 1 translation aligned based (translation_ptr),	/* a single translation */
  2    25     2 segno fixed bin (18) unsigned unaligned,		/* foreign segno for this translation */
  2    26     2 flags unaligned,
  2    27       3 two_part bit (1) unaligned,			/* segment is in two pieces -- from an FDUMP */
  2    28       3 in_dump bit (1) unaligned,			/* segment is part of an FDUMP image */
  2    29       3 in_temp_seg bit (1) unaligned,			/* segment is a copy at the base of a temp segment */
  2    30       3 in_perm_seg bit (1) unaligned,			/* segment is in the file system */
  2    31       3 in_dp_dir bit (1) unaligned,
  2    32       3 replaced bit (1) unaligned,
  2    33       3 pad bit (12) unaligned,
  2    34     2 part1,					/* pointer to first (possibly only) part of segment */
  2    35       3 ptr pointer unaligned,
  2    36       3 lth fixed bin (19),
  2    37     2 part2 like translation.part1;
  2    38 
  2    39 dcl  alloc_translation_table_max_entries fixed bin;
  2    40 dcl  translation_ptr pointer;
  2    41 
  2    42 /*	END INCLUDE FILE amu_translation.incl.pl1	*/
      130 
      131 
  3     1 /*	BEGIN INCLUDE FILE amu_hardcore_info.incl.pl1	*/
  3     2 
  3     3 /* This structure contains information about the hardcore supervisor address
  3     4*   space for an address translation. */
  3     5 
  3     6 dcl 1 hardcore_info aligned based (amu_info.hardcore_info_ptr),
  3     7 
  3     8     2 pointers,					/* assorted pointers to various useful items */
  3     9       3 slt aligned,				/* SLT */
  3    10         4 fptr pointer unaligned,			/* address in foreign address space */
  3    11         4 lptr pointer unaligned,			/* location in local address space */
  3    12       3 sltnt aligned like hardcore_info.slt,		/* SLT names segment */
  3    13       3 definitions aligned like hardcore_info.slt,	/* hardcore definitions_ segment */
  3    14 
  3    15       3 sst aligned like hardcore_info.slt,		/* SST */
  3    16       3 tc_data aligned like hardcore_info.slt,		/* TC_DATA */
  3    17       3 sstnt aligned like hardcore_info.slt,		/* SSTNT (if any -- foreign_ptr = null if not) */
  3    18       3 upt aligned like hardcore_info.slt,		/* unpaged_page_tables (if any -- foreign_ptr = null if not) */
  3    19 
  3    20     2 segno,					/* segment numbers of various per-process/per-processor segs */
  3    21       3 prds fixed bin (15),				/* segno of PRDS */
  3    22       3 dseg fixed bin (15),				/* DSEG */
  3    23       3 pds fixed bin (15),				/* PDS */
  3    24       3 kst fixed bin (15),				/* KST */
  3    25       3 stack_0 fixed bin (15),			/* segno of stack_0 -- first one in stack group */
  3    26       3 unpaged_page_tables fixed bin(15),		/* segno of unpaged_page_tables if it exists */
  3    27 
  3    28     2 apt,					/* information about the APT */
  3    29       3 foreign_ptr pointer unaligned,			/* foreign and local pointers to tcm.apt */
  3    30       3 local_ptr pointer unaligned,
  3    31       3 count fixed bin,				/* number of APTEs */
  3    32       3 size fixed bin,				/* size of a single APTE */
  3    33 
  3    34     2 hcs_count fixed bin,				/* highest hardcore segno */
  3    35 
  3    36     2 pad1 fixed bin;
  3    37 
  3    38 dcl hardcore_cur_ptr ptr;
  3    39 
  3    40 dcl 1 hardcore_cur based (hardcore_cur_ptr),
  3    41     2 sltp ptr,
  3    42     2 sltntp ptr,
  3    43     2 defp ptr,
  3    44     2 sstp ptr,
  3    45     2 tc_datap ptr,
  3    46     2 sstntp ptr,
  3    47     2 uptp ptr;
  3    48 	
  3    49     
  3    50 
  3    51 
  3    52 /*	END INCLUDE FILE amu_hardcore_info.incl.pl1	*/
      132 
      133 
  4     1 /*	BEGIN INCLUDE FILE amu_fdump_info.incl.pl1	*/
  4     2 
  4     3 dcl 1 fdump_info aligned based (amu_info.fdump_info_ptr),
  4     4     2 version char (8),
  4     5     2 ref_count fixed bin,				/* number of initiations */
  4     6 
  4     7     2 erf_name char (32),				/* ERF name for this dump */
  4     8     2 dump_dname char (168),				/* location of the dump */
  4     9     2 dump_ename char (32),				/* ename of component zero */
  4    10     2 system_id char (8),				/* the system_id of this erf */
  4    11     2 version_id char (8),				/* the version id of this erf */
  4    12     2 dump_seg_0_uid bit (36) aligned,			/* for determining EQ-ness and gullibility checking */
  4    13 
  4    14     2 n_dump_segs fixed bin,				/* number of real segs in the dump */
  4    15     2 copy_block_ptr pointer, 			/* pointer to chain of temp segment blocks */
  4    16 
  4    17     2 dump_seg_ptr (0:31) pointer,			/* pointer and length arrays */
  4    18     2 dump_seg_lth (0:31) fixed bin (18),
  4    19 
  4    20     2 fdump_process_table_ptr pointer;			/* pointer to array describing processes */
  4    21 
  4    22 
  4    23 dcl 1 fdump_process_table aligned based (fdump_info.fdump_process_table_ptr),
  4    24     2 size fixed bin,				/* number of entries */
  4    25 
  4    26     2 array (0:alloc_fdump_process_table_size - 1 refer (fdump_process_table.size)) like fp_table;
  4    27 
  4    28 dcl 1 fp_table based (fp_table_ptr),
  4    29       2 first_seg fixed bin,
  4    30       2 last_seg fixed bin,
  4    31       2 process_info_ptr pointer unaligned,		/* pointer to process_info structure, if filled in */
  4    32       2 dmp_seg_indx fixed bin,			/* dump seg index where process can be found */
  4    33       2 dmp_seg_offset fixed bin (24),			/* offset in the segment refered to by dmp_seg_indx where process starts */
  4    34       2 cpu_name char (1),
  4    35       2 dbr fixed bin (24),				/* address portion of DBR */
  4    36       2 apte_offset fixed bin (18);
  4    37 
  4    38 dcl fp_table_ptr ptr;
  4    39 
  4    40 dcl  alloc_fdump_process_table_size fixed bin;
  4    41 
  4    42 dcl  AMU_FDUMP_INFO_VERSION_1 char (8) internal static options (constant) init ("amu_erf1");
  4    43 dcl  AMU_FDUMP_INFO_VERSION char (8) internal static options (constant) init ("amu_erf1");
  4    44 
  4    45 /*	END INCLUDE FILE amu_fdump_info.incl.pl1	*/
      134 
      135 
  5     1 /* Begin amu_definitions.incl.pl1  */
  5     2 /* This is a place to keep the definitions for a translation */
  5     3 
  5     4 dcl 1 definitions_info based (amu_info.definitions_info_ptr),
  5     5     2 hash_buckets (127) pointer unaligned,
  5     6     2 t_ptrs (0:9),
  5     7        3 name char (4),
  5     8        3 val ptr unal,
  5     9     2 pad fixed bin;
  5    10 
  5    11 dcl t_ptr_indx fixed bin;
  5    12 dcl  init_ptr_names (0:9) char (4) init ("ap", "ab", "bp", "bb", "lp", "lb", "sp", "sb", "prfr", "prmc");
  5    13 	
  5    14 
  5    15 /* End amu_definitions_info.incl.pl1 */
      136 
      137 
  6     1 /* BEGIN INCLUDE FILE . . . sl_info.incl.pl1 */
  6     2 
  6     3      
  6     4 
  6     5 /****^  HISTORY COMMENTS:
  6     6*  1) change(87-11-16,Lippard), approve(87-12-21,MCR7822),
  6     7*     audit(88-02-09,Blair), install(88-02-16,MR12.2-1023):
  6     8*     Modified to add INITIATED_SEGS type.
  6     9*  2) change(87-11-19,Lippard), approve(87-12-21,MCR7822),
  6    10*     audit(88-02-09,Blair), install(88-02-16,MR12.2-1023):
  6    11*     Added uid to sl_info structure.
  6    12*                                                   END HISTORY COMMENTS */
  6    13 
  6    14 
  6    15 declare 1 sl_info	      aligned based (sl_info_p),
  6    16 	     2 version	      fixed binary,		/* Must be 1 */
  6    17 	     2 num_paths	      fixed binary,		/* Number of search paths */
  6    18 	     2 change_index_p     pointer,		/* Pointer to search list's update count */
  6    19 	     2 change_index	      fixed binary (71),	/* This search list's update count */
  6    20 	     2 pad1	      (6) bit (36),		/* Must be zero */
  6    21 	     2 paths	      (sl_info_num_paths refer (sl_info.num_paths)),
  6    22 	       3 type	      fixed binary,		/* Type of search path */
  6    23 	       3 code	      fixed binary (35),	/* Standard status code of search path */
  6    24 	       3 uid	      bit (36),		/* Unique ID */
  6    25 	       3 pathname	      char (168) unaligned;	/* Search pathname */
  6    26 
  6    27      declare sl_info_num_paths      fixed binary;
  6    28      declare sl_info_p	      pointer;
  6    29      declare sl_info_version_1      fixed binary internal static options (constant) initial (1);
  6    30 
  6    31 /* Keyword Types */
  6    32 
  6    33      declare ABSOLUTE_PATH	      fixed binary internal static options (constant) initial (0);
  6    34      declare UNEXPANDED_PATH	      fixed binary internal static options (constant) initial (1);
  6    35      declare REFERENCING_DIR	      fixed binary internal static options (constant) initial (3);
  6    36      declare WORKING_DIR	      fixed binary internal static options (constant) initial (4);
  6    37      declare PROCESS_DIR	      fixed binary internal static options (constant) initial (5);
  6    38      declare HOME_DIR	      fixed binary internal static options (constant) initial (6);
  6    39      declare INITIATED_SEGS	      fixed binary internal static options (constant) initial (7);
  6    40 
  6    41 /* END INCLUDE FILE . . . sl_info.incl.pl1 */
      138 
      139 
      140 
      141      end amu_info_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    02/16/88  1409.6  amu_info_.pl1                     >spec>install>MR12.2-1023>amu_info_.pl1
128          1    11/20/84  0856.1  amu_info.incl.pl1                 >ldd>include>amu_info.incl.pl1
130          2    07/28/87  0943.5  amu_translation.incl.pl1          >ldd>include>amu_translation.incl.pl1
132          3    11/20/84  0854.8  amu_hardcore_info.incl.pl1        >ldd>include>amu_hardcore_info.incl.pl1
134          4    09/22/83  1102.5  amu_fdump_info.incl.pl1           >ldd>include>amu_fdump_info.incl.pl1
136          5    09/22/83  1102.5  amu_definitions.incl.pl1          >ldd>include>amu_definitions.incl.pl1
138          6    02/16/88  1407.4  sl_info.incl.pl1                  >spec>install>MR12.2-1023>sl_info.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
AMU_INFO_VERSION_2              000000 constant        char(8)                  initial unaligned dcl 1-58 ref 47
FDUMP_PROCESS_TYPE                     constant        fixed bin(17,0)          initial dcl 1-47 ref 93
FDUMP_TYPE                             constant        fixed bin(17,0)          initial dcl 1-47 ref 93
P_amu_info_ptr                         parameter       pointer                  dcl 17 set ref 38 79* 84 89 123*
P_type                                 parameter       fixed bin(17,0)          dcl 17 ref 38 48
SAVED_PROC_TYPE                        constant        fixed bin(17,0)          initial dcl 1-47 ref 96
amu_$check_info                 000010 constant        entry                    external dcl 26 ref 91
amu_$deadproc_term              000014 constant        entry                    external dcl 28 ref 96
amu_$fdump_mgr_really_terminate 000012 constant        entry                    external dcl 27 ref 93
amu_area                               based           area(1024)               dcl 1-43 ref 64 71
amu_info                               based           structure                level 1 dcl 1-3 set ref 45 121
amu_info_ptr                    000106 automatic       pointer                  dcl 1-45 set ref 45* 47 48 49 50 51 52 53 54 55 56
                                                                                  60 61 64 64 65 66 68 71 71 73 75 76 79 89* 91* 93
                                                                                  93 93 93* 96 96* 99 106 107 107 108 110 110 110
                                                                                  111 113 113 116 116 121
amu_reset                       000105 automatic       bit(1)                   initial unaligned dcl 31 set ref 31*
area_ptr                 10            based           pointer                  level 2 dcl 1-3 set ref 50* 64 71 99
chain                     6            based           structure                level 2 dcl 1-3
clock                                                  builtin function         dcl 34 ref 49
code                            000104 automatic       fixed bin(35,0)          dcl 25 set ref 93* 96*
copy_chain               20            based           pointer                  level 2 dcl 1-3 set ref 73*
definitions_info                       based           structure                level 1 unaligned dcl 5-4 set ref 64
definitions_info_ptr     32            based           pointer                  level 2 dcl 1-3 set ref 55* 64* 65 66 68
early_dump                2            based           bit(1)                   level 3 packed unaligned dcl 1-3 set ref 56*
fdump_info_ptr           14            based           pointer                  level 2 dcl 1-3 set ref 52* 93
flags                     2            based           structure                level 2 dcl 1-3
fp_table                               based           structure                level 1 unaligned dcl 4-28
get_system_free_area_           000016 constant        entry                    external dcl 29 ref 43
hardcore_info                          based           structure                level 1 dcl 3-6 ref 71 116
hardcore_info_ptr        16            based           pointer                  level 2 dcl 1-3 set ref 53* 71* 116 116
hash_buckets                           based           pointer                  array level 2 packed unaligned dcl 5-4 set ref 65*
init_ptr_names                  000111 automatic       char(4)                  initial array unaligned dcl 5-12 set ref 68 5-12*
                                                                                  5-12* 5-12* 5-12* 5-12* 5-12* 5-12* 5-12* 5-12*
                                                                                  5-12*
max_entries               1            based           fixed bin(17,0)          level 2 dcl 2-13 ref 113
name                    177            based           char(4)                  array level 3 packed unaligned dcl 5-4 set ref 68*
new_aip                         000102 automatic       pointer                  dcl 24 set ref 90* 108* 111 111* 123
next                      7            based           pointer                  level 3 packed unaligned dcl 1-3 set ref 61* 107*
                                                                                  107 110 110 111
null                                                   builtin function         dcl 34 ref 51 52 53 54 55 60 61 65 66 73 75 90 93
                                                                                  106 110 111 113 116
part1                   347            based           structure                array level 3 in structure "translation_table"
                                                                                  dcl 2-13 in procedure "amu_info_"
part1                     1            based           structure                level 2 in structure "translation" dcl 2-24
                                                                                  in procedure "amu_info_"
pointers                               based           structure                level 2 dcl 3-6
prev                      6            based           pointer                  level 3 packed unaligned dcl 1-3 set ref 60* 106 107
                                                                                  108 110* 110
process_idx              24            based           fixed bin(17,0)          level 2 dcl 1-3 set ref 76*
process_info_ptr         22            based           pointer                  level 2 dcl 1-3 set ref 54* 75*
slt                                    based           structure                level 3 dcl 3-6
system_area                            based           area(1024)               dcl 22 ref 45 113 116 121
system_area_ptr                 000100 automatic       pointer                  dcl 23 set ref 43* 45 50 99* 113 116 121
t_ptr_indx                      000110 automatic       fixed bin(17,0)          dcl 5-11 set ref 67* 68 68*
t_ptrs                  177            based           structure                array level 2 packed unaligned dcl 5-4
time_created              4            based           fixed bin(71,0)          level 2 dcl 1-3 set ref 49*
translation                            based           structure                level 1 dcl 2-24
translation_table                      based           structure                level 1 dcl 2-13 ref 113
translation_table_ptr
                         12            based           pointer                  level 2 dcl 1-3 set ref 51* 113 113
type                      3            based           fixed bin(17,0)          level 2 packed unaligned dcl 1-3 set ref 48* 93 93
                                                                                  96
val                     200            based           pointer                  array level 3 packed unaligned dcl 5-4 set ref 66*
version                                based           char(8)                  level 2 dcl 1-3 set ref 47*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
ABSOLUTE_PATH                          internal static fixed bin(17,0)          initial dcl 6-33
AMU_FDUMP_INFO_VERSION                 internal static char(8)                  initial unaligned dcl 4-43
AMU_FDUMP_INFO_VERSION_1               internal static char(8)                  initial unaligned dcl 4-42
AMU_INFO_VERSION                       internal static char(8)                  initial unaligned dcl 1-57
AMU_INFO_VERSION_1                     internal static char(8)                  initial unaligned dcl 1-56
HOME_DIR                               internal static fixed bin(17,0)          initial dcl 6-38
INDIRECT_TYPE                          internal static fixed bin(17,0)          initial dcl 1-47
INITIATED_SEGS                         internal static fixed bin(17,0)          initial dcl 6-39
NETWORK_FDUMP_TYPE                     internal static fixed bin(17,0)          initial dcl 1-47
NETWORK_ONLINE_TYPE                    internal static fixed bin(17,0)          initial dcl 1-47
ONLINE_PROCESS_TYPE                    internal static fixed bin(17,0)          initial dcl 1-47
ONLINE_TYPE                            internal static fixed bin(17,0)          initial dcl 1-47
PDIR_SUFFIX                            internal static char(4)                  initial unaligned dcl 1-60
PROCESS_DIR                            internal static fixed bin(17,0)          initial dcl 6-37
REFERENCING_DIR                        internal static fixed bin(17,0)          initial dcl 6-35
UNEXPANDED_PATH                        internal static fixed bin(17,0)          initial dcl 6-34
WORKING_DIR                            internal static fixed bin(17,0)          initial dcl 6-36
alloc_fdump_process_table_size         automatic       fixed bin(17,0)          dcl 4-40
alloc_translation_table_max_entries    automatic       fixed bin(17,0)          dcl 2-39
fdump_info                             based           structure                level 1 dcl 4-3
fdump_process_table                    based           structure                level 1 dcl 4-23
fp_table_ptr                           automatic       pointer                  dcl 4-38
hardcore_cur                           based           structure                level 1 unaligned dcl 3-40
hardcore_cur_ptr                       automatic       pointer                  dcl 3-38
sl_info                                based           structure                level 1 dcl 6-15
sl_info_num_paths                      automatic       fixed bin(17,0)          dcl 6-27
sl_info_p                              automatic       pointer                  dcl 6-28
sl_info_version_1                      internal static fixed bin(17,0)          initial dcl 6-29
translation_ptr                        automatic       pointer                  dcl 2-40

NAMES DECLARED BY EXPLICIT CONTEXT.
amu_info_                       000077 constant        entry                    external dcl 6
amu_info_$create                000112 constant        entry                    external dcl 38
amu_info_$destroy               000261 constant        entry                    external dcl 84

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       550         570     430         560
Length      1066     430        20         262     120           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
amu_info_                            98 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
amu_info_                000100 system_area_ptr             amu_info_
                         000102 new_aip                     amu_info_
                         000104 code                        amu_info_
                         000105 amu_reset                   amu_info_
                         000106 amu_info_ptr                amu_info_
                         000110 t_ptr_indx                  amu_info_
                         000111 init_ptr_names              amu_info_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        return_mac          ext_entry           op_alloc_           op_freen_           clock_mac

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
amu_$check_info               amu_$deadproc_term            amu_$fdump_mgr_really_terminate
get_system_free_area_

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     31 000021    5   12 000022         6 000076         8 000105        38 000106        43 000120        45 000127
     47 000134        48 000137        49 000143        50 000145        51 000147        52 000151        53 000152
     54 000153        55 000154        56 000155        60 000157        61 000161        64 000162        65 000171
     66 000205        67 000223        68 000227        69 000235        71 000237        73 000246        75 000250
     76 000251        79 000253        80 000255        84 000256        89 000267        90 000273        91 000275
     93 000304        96 000331        99 000347       106 000352       107 000356       108 000361       110 000363
    111 000371       113 000377       116 000411       121 000420       123 000422       125 000425


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
