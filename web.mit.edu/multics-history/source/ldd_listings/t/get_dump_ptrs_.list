	COMPILATION LISTING OF SEGMENT get_dump_ptrs_
	Compiled by: Multics PL/I Compiler, Release 27d, of October 11, 1982
	Compiled at: Honeywell LISD Phoenix, System M
	Compiled on: 11/15/82  1727.1 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 get_dump_ptrs_: proc (erfno, pa, la, nsegs, name);
       12 
       13 dcl  erfno char (*),
       14     (pa ptr,
       15      la fixed bin) (0:31),
       16      nsegs fixed bin,
       17      name char (32) aligned,
       18      d_dir char (*);
       19 
       20 /* This program gets pointers to all of the segments of
       21*   a multics on-line dump given the error report form number of the
       22*   dump. It returns the pointers in the array 'pa' and the number of
       23*   pointers returned in 'nsegs'. It also returns the name of the
       24*   first dump segment in 'name'.
       25*
       26*   Coded 4/71 SHW */
       27 /* Modified 02/01/79 by F. W. Martinson to allow up to 32 dump segments */
       28 /* Modified 06/29/79 by J. A. Bush to add the dump_dir entry point */
       29 
       30 dcl  code fixed bin (35);
       31 dcl (i, count) fixed bin,
       32     (dumpdir char (168) int static,
       33     (dump_name,
       34      star_name,
       35      char32 based) char (32),
       36      c0 char (0)) aligned,
       37     (eptr, nptr, areap) ptr,
       38      star_area area ((128)),
       39 
       40      hcs_$star_ entry (char (*) aligned, char (*) aligned, fixed bin (2), ptr, fixed bin, ptr, ptr, fixed bin (35)),
       41      hcs_$initiate entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (1), fixed bin (2), ptr, fixed bin (35)),
       42      hcs_$status_long entry (char (*) aligned, char (*) aligned, fixed bin (1), ptr, ptr, fixed bin (35));
       43 dcl (addr, fixed, null, substr) builtin;
       44 
       45 declare 1 br aligned,
       46        (2 (type bit (2), nnames bit (16), nrp bit (18)),
       47         2 dtm bit (36),
       48         2 dtu bit (36),
       49         2 (mode bit (5), pad1 bit (13), records bit (18)),
       50         2 dtd bit (36),
       51         2 dtem bit (36),
       52         2 acct bit (36),
       53         2 (curlen bit (12), bitcnt bit (24)),
       54         2 (did bit (4), imdid bit (4),
       55          copysw bit (1), pad3 bit (9),
       56          rbs (0:2) bit (6)),
       57         2 uid bit (36)) unaligned;
       58 
       59 /* 
       60*   */
       61 
       62 	dumpdir = ">dumps";				/* set default dump directory */
       63 join:
       64 	areap = addr (star_area);			/* get a pointer to the star area */
       65 	star_name = "*.*.0." || erfno;		/* generate star name */
       66 
       67 	call hcs_$star_ (dumpdir, star_name, 2, areap, count, eptr, nptr, code);
       68 						/* get first dump seg name */
       69 	if code = 0
       70 	then do;					/* No problems, continue */
       71 
       72 	     dump_name = nptr -> char32;		/* copy name of first dump seg */
       73 	     name = dump_name;			/* return name to caller */
       74 
       75 	     areap = addr (br);			/* Get pointer to branch structure */
       76 
       77 	     do i = 0 to 31;			/* Initiate the dump segments */
       78 
       79 		call hcs_$initiate (dumpdir, dump_name, c0, 0, 1, eptr, code); /* initiate the dump seg */
       80 		if eptr = null
       81 		then do;				/* no more segs, return */
       82 
       83 		     nsegs = i;			/* return number of segs found */
       84 		     return;
       85 
       86 		end;
       87 
       88 /* We will allow up to 32 dump segments 0-31 */
       89 
       90 		pa (i) = eptr;			/* Copy pointer */
       91 		call hcs_$status_long (dumpdir, dump_name, 1, areap, null, code);
       92 		if code ^= 0
       93 		then la (i) = 0;
       94 		else la (i) = fixed (br.curlen, 17);
       95 		substr (dump_name, 13) = ltrim (char (i+1))||"."||ltrim (erfno);
       96 						/* generate the next dump seg name */
       97 
       98 	     end;
       99 
      100 	end;
      101 
      102 	nsegs = 0;				/* Fell out of loop, or error in star_ call */
      103 	return;
      104 
      105 /* dump_dir - entry to get dump ptrs, given a dump directory name */
      106 
      107 dump_dir:	entry (d_dir, erfno, pa, la, nsegs, name);
      108 
      109 	dumpdir = d_dir;				/* copy dump directory */
      110 	go to join;				/* and go to common code */
      111 
      112 
      113      end get_dump_ptrs_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/15/82  1516.4  get_dump_ptrs_.pl1                >dumps>old>recomp>get_dump_ptrs_.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
addr                                                   builtin function         dcl 43 ref 63 75
areap                           000130 automatic       pointer                  dcl 31 set ref 63* 67* 75* 91*
br                              000332 automatic       structure                level 1 dcl 45 set ref 75
c0                              000123 automatic       char                     dcl 31 set ref 79*
char32                                 based           char(32)                 dcl 31 ref 72
code                            000100 automatic       fixed bin(35,0)          dcl 30 set ref 67* 69 79* 91* 92
count                           000102 automatic       fixed bin(17,0)          dcl 31 set ref 67*
curlen                    7     000332 automatic       bit(12)                  level 2 packed unaligned dcl 45 set ref 94
d_dir                                  parameter       char                     unaligned dcl 13 ref 107 109
dump_name                       000103 automatic       char(32)                 dcl 31 set ref 72* 73 79* 91* 95*
dumpdir                         000010 internal static char(168)                dcl 31 set ref 62* 67* 79* 91* 109*
eptr                            000124 automatic       pointer                  dcl 31 set ref 67* 79* 80 90
erfno                                  parameter       char                     unaligned dcl 13 ref 11 65 95 107
fixed                                                  builtin function         dcl 43 ref 94
hcs_$initiate                   000064 constant        entry                    external dcl 31 ref 79
hcs_$star_                      000062 constant        entry                    external dcl 31 ref 67
hcs_$status_long                000066 constant        entry                    external dcl 31 ref 91
i                               000101 automatic       fixed bin(17,0)          dcl 31 set ref 77* 83 90 92 94 95*
la                                     parameter       fixed bin(17,0)          array dcl 13 set ref 11 92* 94* 107
name                                   parameter       char(32)                 dcl 13 set ref 11 73* 107
nptr                            000126 automatic       pointer                  dcl 31 set ref 67* 72
nsegs                                  parameter       fixed bin(17,0)          dcl 13 set ref 11 83* 102* 107
null                                                   builtin function         dcl 43 ref 80 91 91
pa                                     parameter       pointer                  array dcl 13 set ref 11 90* 107
star_area                       000132 automatic       area(128)                dcl 31 set ref 31* 63
star_name                       000113 automatic       char(32)                 dcl 31 set ref 65* 67*
substr                                                 builtin function         dcl 43 set ref 95*

NAMES DECLARED BY EXPLICIT CONTEXT.
dump_dir                        000447 constant        entry                    external dcl 107
get_dump_ptrs_                  000043 constant        entry                    external dcl 11
join                            000073 constant        label                    dcl 63 ref 110

NAMES DECLARED BY CONTEXT OR IMPLICATION.
char                                                   builtin function         ref 95
empty                                                  builtin function         ref 31
ltrim                                                  builtin function         ref 95 95

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       572         662     513         602
Length      1034     513        70         136      56          52

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
get_dump_ptrs_                      283 external procedure  is an external procedure.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 dumpdir                     get_dump_ptrs_

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
get_dump_ptrs_           000100 code                        get_dump_ptrs_
                         000101 i                           get_dump_ptrs_
                         000102 count                       get_dump_ptrs_
                         000103 dump_name                   get_dump_ptrs_
                         000113 star_name                   get_dump_ptrs_
                         000123 c0                          get_dump_ptrs_
                         000124 eptr                        get_dump_ptrs_
                         000126 nptr                        get_dump_ptrs_
                         000130 areap                       get_dump_ptrs_
                         000132 star_area                   get_dump_ptrs_
                         000332 br                          get_dump_ptrs_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
alloc_cs            cat_realloc_cs      call_ext_out_desc   return              shorten_stack       ext_entry_desc
empty

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
hcs_$initiate                 hcs_$star_                    hcs_$status_long

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     31 000031        11 000036        62 000067        63 000073        65 000075        67 000117        69 000165
     72 000167        73 000173        75 000177        77 000201        79 000205        80 000251        83 000255
     84 000257        90 000260        91 000264        92 000324        94 000331        95 000335        98 000434
    102 000437       103 000440       107 000441       109 000500       110 000507


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
