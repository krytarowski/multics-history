ASSEMBLY LISTING OF SEGMENT >special_ldd>install>MR12.0-1206>tolts_alm_util_.alm             
ASSEMBLED ON:	11/05/86  1048.2 mst Wed
OPTIONS USED:	list 
ASSEMBLED BY:	ALM Version  6.7  October 1986  
ASSEMBLER CREATED:	10/08/86  1557.5 mst Wed

                                     1  " ***********************************************************
                                     2  " *                                                         *
                                     3  " * Copyright, (C) Honeywell Information Systems Inc., 1982 *
                                     4  " *                                                         *
                                     5  " * Copyright (c) 1972 by Massachusetts Institute of        *
                                     6  " * Technology and Honeywell Information Systems, Inc.      *
                                     7  " *                                                         *
                                     8  " ***********************************************************
                                     9  
                                    10  """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
                                    11  " Modified by R. Fakoury 8102 to cumpute an icm checksum for colts. 
                                    12  "
                                    13  "  The entry point, ascii_to_bcd_, takes a character string
                                    14  "  as input and produces a bit string of length divide (length (output),6,24)
                                    15  "  as output. If the output string has more bcd char positions
                                    16  "  than there are input chars to convert, then the output is blank filled.
                                    17  "
                                    18  "  PL/1 Usage:
                                    19  "
                                    20  "  dcl tolts_alm_util_$ascii_to_bcd_ entry (char (*), bit (*));
                                    21  "  call tolts_alm_util_$ascii_to_bcd_ (input_chars, output_bits);
                                    22  "
                                    23  "  The entry point, ascii_to_bci_ is the same as ascii_to_bcd_ except
                                    24  "  that the output string is zero filled.
                                    25  
                                    26  "  PL/1 Usage:
                                    27  "
                                    28  "  dcl tolts_alm_util_$ascii_to_bci_ entry (char (*), bit (*));
                                    29  "  call tolts_alm_util_$ascii_to_bci_ (input_chars, output_bits);
                                    30  "
                                    31  "
                                    32  "  The entry point enter_slave_ is used to do a transfer into a gcos type object.
                                    33  "  The single entry argument is a pointer to the desired entry address into the gcos object.
                                    34  "  By convention this entry point is a 3 word program located in the slave prefix area,
                                    35  "  at offset  32 (octal). This 3 word program contains:
                                    36  "  
                                    37  "  	lreg	<regs>		load safe stored registers
                                    38  "  	lbar	<bar>,du		load desired base address setting
                                    39  "  	ret	<saved_ic_and_i>	return to desired ic and i value
                                    40  "  
                                    41  "  The enter_slave_ entry merely does an indirect TRA instruction into this entry program.
                                    42  "  The RET instruction will put the processor in slave mode and returns to the saved IC value
                                    43  "  that is relative to the loaded BAR.
                                    44  "
                                    45  "
                                    46  "  The entry point gen_ck_sum computes an icm cksum for colts icm's
                                    47  "	   pl/1 usage:
                                    48  "  dcl tolts_alm_util_$gen_ck_sum entry (ptr);
                                    49  "  call tolts_alm_util_$gen_ck_sum entry (icm ptr);
                                    50  """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
                                    51  
    000000                          52  	name	tolts_alm_util_
                        000023      53  	entry	ascii_to_bcd_
                        000025      54  	entry	ascii_to_bci_
                        000072      55  	entry	enter_slave_
                        000057      56  	entry	enter_ccc_req_
                        000000      57  	entry	gen_ck_sum
                                    58  	temp	temp
                                    59  
    000000                          60  gen_ck_sum: 			"generate icm cksum
    000000  aa  0 00002 3515 20     61  	epp1	ap|2,*		get ptr to icm
    000001  aa  1 00000 2261 20     62  	ldx6	pr1|0,*		get the number of words
    000002  aa   000001 2250 03     63  	ldx5	1,du		set word index
    000003  aa   000001 2240 03     64  	ldx4	1,du
    000004  aa  1 00000 2351 75     65  	lda	pr1|0,*5		load first word
    000005  aa   777777 3750 07     66  	ana	-1,dl		exclude cksum bits
    000006  aa  1 00000 7551 74     67  	sta	pr1|0,*4		store in cksum word
    000007                          68  ck_sum2:
    000007  aa   000001 0250 03     69  	adlx5	1,du		inc index
    000010  aa   000001 1260 03     70  	sblx6	1,du		decrement wrod count
    000011  0a   000015 6000 00     71  	tze	ck_sum3		tally exhausted
    000012  aa  1 00000 2351 75     72  	lda	pr1|0,*5		load next word
    000013  aa  1 00000 6551 74     73  	ersa	pr1|0,*4		include in checksum
    000014  0a   000007 7100 00     74  	tra	ck_sum2		loop
    000015                          75  ck_sum3:
    000015  aa  1 00000 2351 74     76  	lda	pr1|0,*4
    000016  aa   000022 7350 00     77  	als	18		reduce to 18 bits
    000017  aa  1 00000 6751 74     78  	era	pr1|0,*4		store in checksum
    000020  aa   777777 3750 03     79  	ana	-1,du
    000021  aa  1 00000 7551 74     80  	sta	pr1|0,*4
    000022  aa  7 00044 7101 20     81  	short_return
                                    82  
    000023                          83  ascii_to_bcd_:			" ascii to bcd entry
    000023  aa   000001 2250 03     84  	ldx5	1,du		set bcd indicator
    000024  0a   000026 7100 00     85  	tra	*+2
                                    86  
    000025                          87  ascii_to_bci_:			" ascii to bci entry
    000025  aa   000002 2250 03     88  	ldx5	2,du		set bci indicator
    000026  aa  0 00002 3515 20     89  	epp1	ap|2,*		address of source string to pr1
    000027  aa  0 00004 3535 20     90  	epp3	ap|4,*		address of target string to pr3
    000030  aa   000000 2230 03     91  	ldx3	0,du		set x3 not to skip parent pointer if none
    000031  aa  0 00000 7221 00     92  	lxl2	ap|0		load arg list code value
    000032  aa   000004 3020 03     93  	canx2	=o0000004,du	check for no parent pointer (code 4)
    000033  0a   000035 6010 00     94  	tnz	*+2		transfer if no parent pointer
    000034  aa   000002 2230 03     95  	ldx3	2,du		parent pointer, set x3 to skip it
    000035  aa  0 00010 2361 33     96  	ldq	ap|8,x3*		load target string descriptor
    000036  0a   000102 3760 00     97  	anq	mask		drop all but string size  bits
    000037  aa   000006 5060 07     98  	div	6,dl		get length of target in BCD characters
    000040  aa  0 00006 2351 33     99  	lda	ap|6,x3*		load source string descriptor
    000041  0a   000102 3750 00    100  	ana	mask		drop all but string size bits
    000042  aa   000002 1050 03    101  	cmpx5	2,du		test for bci conversion
    000043  0a   000052 6000 00    102  	tze	cv_bci		tra if bci convert
                                   103  	even			"EIS address must be even
    000044  aa  0 40140 1605 40    104  	mvt	(pr,rl),(pr,rl),fill(040)	now do the ascii to bcd
    000045  aa   100000 000005     105  	desc9a	1|0,al
    000046  aa   300000 020006     106  	desc6a	3|0,ql
    000047  0a   000104 0000 00    107  	arg	atb_tab
    000050  aa  7 00044 7101 20    108  	short_return
                                   109  
    000051  aa   000000 0110 03    110  	even			"EIS address must be even
    000052                         111  cv_bci:
    000052  aa  0 60140 1605 40    112  	mvt	(pr,rl),(pr,rl),fill(060)	now do the ascii to bci
    000053  aa   100000 000005     113  	desc9a	1|0,al
    000054  aa   300000 020006     114  	desc6a	3|0,ql
    000055  0a   000104 0000 00    115  	arg	atb_tab
    000056  aa  7 00044 7101 20    116  	short_return
                                   117  
    000057                         118  	inhibit	on
    000057                         119  enter_ccc_req_:
    000057  aa   000060 6272 00    120  	push
    000060  aa  7 00040 2723 20
                                   121  "
                                   122  "	pl1 definition of courtesy call queue:
                                   123  "
                                   124  "	dcl 1 ccc_queue,
                                   125  "	    2 ccc_requests fixed bin,	/* number of courtesy call requests outstanding */
                                   126  "	    2 icivlu (16) bit (36),	/* outstanding ic values (ind value is always 0) */
                                   127  "
    000061  aa  0 00002 3523 20    128  	eppbp	ap|2,*		get ptr to ccc queue
    000062  aa  2 00000 3523 20    129  	eppbp	bp|0,*
    000063  aa  2 00000 2353 00    130  	lda	bp|0		get ccc request count, current
    000064  aa   000001 0352 07    131  	adla	1,dl		increment by 1
    000065  aa  2 00000 7553 00    132  	sta	bp|0		store updated count
    000066  aa  0 00004 2363 20    133  	ldq	ap|4,*		get  ic value to store
    000067  aa  2 00000 7563 05    134  	stq	bp|0,al		store in correct queue entry
    000070  aa   757061 3762 03    135  	anq	777777,du		save only ic value
    000071  aa  7 00042 7103 20    136  	return
                                   137  
    000072                         138  enter_slave_:
    000072  aa   000060 6272 00    139  	push
    000073  aa  7 00040 2723 20
    000074  aa  7 00032 6523 00    140  	sprisp	sb|stack_header.bar_mode_sp save sp so signaller can reset
                                   141  "				 it in case gcos uses adr6
    000075  aa  0 00002 3523 20    142  	eppbp	ap|2,*		get the entry ptr
    000076  aa  2 00000 3523 20    143  	eppbp	bp|0,*		..
    000077  aa  6 00026 4503 00    144  	stz	sp|stack_frame.entry_ptr  make stack traces look nice
    000100  aa  6 00027 4503 00    145  	stz	sp|stack_frame.entry_ptr+1
    000101  aa  2 00000 7103 00    146  	tra	bp|0		transfer directly into to the entry program
                                   147  
    000102                         148  	inhibit	off
                                   149  
    000102  aa   000077 777777     150  mask:	oct	000077777777
    000103  aa   000000 0110 03    151  	even
    000104                         152  atb_tab:
                                   153  " ascii chars 000 - 037 (8) - invalid bcd chars set to bcd "?" (ignore char)
    000104  aa   017017 017017     154  	oct	017017017017,017017017017,017017017017,017017017017
    000105  aa   017017 017017 
    000106  aa   017017 017017 
    000107  aa   017017 017017 
    000110  aa   017017 017017     155  	oct	017017017017,017017017017,017017017017,017017017017
    000111  aa   017017 017017 
    000112  aa   017017 017017 
    000113  aa   017017 017017 
                                   156  " ascii chars 040 - 057 (8) = " !"#$%&'()*+,-./"
    000114  aa   020077 076013     157  	oct	020077076013,053074032057,035055054060,073052033061
    000115  aa   053074 032057 
    000116  aa   035055 054060 
    000117  aa   073052 033061 
                                   158  " ascii chars 060 - 077 (8) = "0123456789:semicolon<=>?"
    000120  aa   000001 002003     159  	oct	000001002003,004005006007,010011015056,036075016017
    000121  aa   004005 006007 
    000122  aa   010011 015056 
    000123  aa   036075 016017 
                                   160  " ascii chars 100 - 117 (8) = "@ABCDEFGHIJKLMNO"
    000124  aa   014021 022023     161  	oct	014021022023,024025026027,030031041042,043044045046
    000125  aa   024025 026027 
    000126  aa   030031 041042 
    000127  aa   043044 045046 
                                   162  " ascii chars 120 - 137 (8) = "PQRSTUVWXYZ[\]^_"
    000130  aa   047050 051062     163  	oct	047050051062,063064065066,067070071012,037034040072
    000131  aa   063064 065066 
    000132  aa   067070 071012 
    000133  aa   037034 040072 
                                   164  " ascii chars 140 - 157 (8) = "`abcdefghijklmno"
    000134  aa   017021 022023     165  	oct	017021022023,024025026027,030031041042,043044045046
    000135  aa   024025 026027 
    000136  aa   030031 041042 
    000137  aa   043044 045046 
                                   166  " ascii chars 160 - 177 (8) = "pqrstuvwxyz{|}~PAD"
    000140  aa   047050 051062     167  	oct	047050051062,063064065066,067070071012,040034017017
    000141  aa   063064 065066 
    000142  aa   067070 071012 
    000143  aa   040034 017017 
                                   168  
                                   169  
                                   170  	include	stack_header
                                   1-1  "	BEGIN INCLUDE FILE ... stack_header.incl.alm  3/72  Bill Silver
                                   1-2  "
                                   1-3  "	modified 7/76 by M. Weaver for *system links and more system use of areas
                                   1-4  "	modified 3/77 by M. Weaver  to add rnt_ptr
                                   1-5  "	modified 7/77 by S. Webber to add run_unit_depth and assign_linkage_ptr
                                   1-6  "	modified 6/83 by J. Ives to add trace_frames and in_trace.
                                   1-7  
                                   1-8  " HISTORY COMMENTS:
                                   1-9  "  1) change(86-06-24,DGHowe), approve(86-06-24,MCR7396),
                                  1-10  "     audit(86-08-05,Schroth), install(86-11-03,MR12.0-1206):
                                  1-11  "     added the heap_header_ptr definition
                                  1-12  "  2) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
                                  1-13  "     audit(86-10-10,Fawcett), install(86-11-03,MR12.0-1206):
                                  1-14  "     Modified to support control point management.  These changes were
                                  1-15  "     actually made in February 1985 by G. Palter.
                                  1-16  "  3) change(86-10-22,Fawcett), approve(86-10-22,MCR7473),
                                  1-17  "     audit(86-10-22,Farley), install(86-11-03,MR12.0-1206):
                                  1-18  "     Remove the old_lot pointer and replace it with cpm_data_ptr. Use the 18
                                  1-19  "     bit pad after cur_lot_size for the cpm_enabled. This was done to save
                                  1-20  "     some space int the stack header and change the cpd_ptr unal to
                                  1-21  "     cpm_data_ptr (ITS pair).
                                  1-22  "                                                      END HISTORY COMMENTS
                                  1-23  
                        000004    1-24  	equ	stack_header.cpm_data_ptr,4		ptr to control point for this stack
                        000006    1-25  	equ	stack_header.combined_stat_ptr,6	ptr to separate static area
                                  1-26  
                        000010    1-27  	equ	stack_header.clr_ptr,8		ptr to area containing linkage sections
                        000012    1-28  	equ	stack_header.max_lot_size,10		number of words allowed in lot (DU)
                        000012    1-29  	equ	stack_header.main_proc_invoked,10	nonzero if main proc was invoked in run unit (DL)
                        000012    1-30  	equ	stack_header.run_unit_depth,10	number of active run units stacked (DL)
                        000013    1-31  	equ	stack_header.cur_lot_size,11		DU number of words (entries) in lot
                        000013    1-32            equ	stack_header.cpm_enabled,11		DL  non-zero if control point management is enabled
                        000014    1-33  	equ	stack_header.system_free_ptr,12	ptr to system storage area
                        000016    1-34  	equ	stack_header.user_free_ptr,14		ptr to user storage area
                                  1-35  
                        000020    1-36  	equ	stack_header.parent_ptr,16		ptr to parent stack or null
                        000022    1-37  	equ	stack_header.stack_begin_ptr,18	ptr to first stack frame
                        000024    1-38  	equ	stack_header.stack_end_ptr,20		ptr to next useable stack frame
                        000026    1-39  	equ	stack_header.lot_ptr,22		ptr to the lot for the current ring
                                  1-40  
                        000030    1-41  	equ	stack_header.signal_ptr,24		ptr to signal proc for current ring
                        000032    1-42  	equ	stack_header.bar_mode_sp,26		value of sp before entering bar mode
                        000034    1-43  	equ	stack_header.pl1_operators_ptr,28	ptr: pl1_operators_$operator_table
                        000036    1-44  	equ	stack_header.call_op_ptr,30		ptr to standard call operator
                                  1-45  
                        000040    1-46  	equ	stack_header.push_op_ptr,32		ptr to standard push operator
                        000042    1-47  	equ	stack_header.return_op_ptr,34		ptr to standard return operator
                        000044    1-48  	equ	stack_header.ret_no_pop_op_ptr,36	ptr: stand. return/ no pop operator
                        000046    1-49  	equ	stack_header.entry_op_ptr,38		ptr to standard entry operator
                                  1-50  
                        000050    1-51  	equ	stack_header.trans_op_tv_ptr,40	ptr to table of translator operator ptrs
                        000052    1-52  	equ	stack_header.isot_ptr,42		pointer to ISOT
                        000054    1-53  	equ	stack_header.sct_ptr,44		pointer to System Condition Table
                        000056    1-54  	equ	stack_header.unwinder_ptr,46		pointer to unwinder for current ring
                                  1-55  
                        000060    1-56  	equ	stack_header.sys_link_info_ptr,48	ptr to *system link name table
                        000062    1-57  	equ	stack_header.rnt_ptr,50		ptr to reference name table
                        000064    1-58  	equ	stack_header.ect_ptr,52		ptr to event channel table
                        000066    1-59  	equ	stack_header.assign_linkage_ptr,54	ptr to area for hcs_$assign_linkage calls
                        000070    1-60  	equ	stack_header.heap_header_ptr,56	ptr to heap header.
                        000072    1-61  	equ	stack_header.trace_frames,58		stack of trace_catch_ frames
                        000073    1-62  	equ	stach_header.trace_top_ptr,59		trace pointer
                        000074    1-63  	equ	stack_header.in_trace,60		trace antirecurse bit
                        000100    1-64  	equ	stack_header_end,64			length of stack header
                                  1-65  
                                  1-66  
                                  1-67  
                                  1-68  
                        000000    1-69  	equ	trace_frames.count,0		number of trace frames on stack
                        000001    1-70  	equ	trace_frames.top_ptr,1		packed pointer to top one
                                  1-71  
                                  1-72  "	The  following constant is an offset within the  pl1  operators table.
                                  1-73  "	It  references a  transfer vector table.
                                  1-74  
                        000551    1-75  	bool	tv_offset,551
                                  1-76  
                                  1-77  
                                  1-78  "	The  following constants are offsets within this transfer vector table.
                                  1-79  
                        001170    1-80  	equ	call_offset,tv_offset+271
                        001171    1-81  	equ	push_offset,tv_offset+272
                        001172    1-82  	equ	return_offset,tv_offset+273
                        001173    1-83  	equ	return_no_pop_offset,tv_offset+274
                        001174    1-84  	equ	entry_offset,tv_offset+275
                                  1-85  
                                  1-86  
                                  1-87  " 	END INCLUDE FILE stack_header.incl.alm
                                   171  	include	stack_frame
                                   2-1  "
                                   2-2  "	BEGIN INCLUDE FILE ... stack_frame.incl.alm   6/72 RBS
                                   2-3  "
                                   2-4  " Modified: 16 Dec 1977, D. Levin - to add fio_ps_ptr
                                   2-5  " Modified:  3 Feb 1978, P. Krupp - to add run_unit_manager_bit & main_proc_bit
                                   2-6  " Modified: 21 March 1978, D. Levin - change fio_ps_ptr to support_ptr
                                   2-7  "
                        000020     2-8  	equ	stack_frame.prev_sp,16
                        000020     2-9  	equ	stack_frame.condition_word,16
                        000022    2-10  	equ	stack_frame.next_sp,18
                        000022    2-11  	equ	stack_frame.signaller_word,18
                        000024    2-12  	equ	stack_frame.return_ptr,20
                        000026    2-13  	equ	stack_frame.entry_ptr,22
                        000030    2-14  	equ	stack_frame.operator_ptr,24
                        000030    2-15  	equ	stack_frame.lp_ptr,24
                        000032    2-16  	equ	stack_frame.arg_ptr,26
                        000034    2-17  	equ	stack_frame.static_ptr,28
                        000035    2-18  	equ	stack_frame.support_ptr,29	" only used by fortran I/O
                        000036    2-19  	equ	stack_frame.on_unit_rel_ptrs,30
                        000037    2-20  	equ	stack_frame.operator_ret_ptr,31
                        000037    2-21  	equ	stack_frame.translator_id,31
                        000040    2-22  	equ	stack_frame.regs,32
                        000060    2-23  	equ	stack_frame.min_length,48
                        000020    2-24  	equ	stack_frame.flag_word,16
                        020000    2-25  	bool	stack_frame.main_proc_bit,020000	(DL)
                        010000    2-26  	bool	stack_frame.run_unit_manager,010000	(DL)
                        004000    2-27  	bool	stack_frame.signal_bit,004000		(DL)
                        002000    2-28  	bool	stack_frame.crawl_out_bit,002000	(DL)
                        001000    2-29  	bool	stack_frame.signaller_bit,001000	(DL)
                        000400    2-30  	bool	stack_frame.link_trap_bit,000400	(DL)
                        000200    2-31  	bool	stack_frame.support_bit,000200	(DL)
                        000100    2-32  	bool	stack_frame.condition_bit,000100	(DL)
                                  2-33  
                                  2-34  "
                                  2-35  "	END INCLUDE FILE  ... stack_frame.incl.alm
                                  2-36  "
                                   172  	end
ENTRY SEQUENCES
     
    000144  5a   000045 0000 00
    000145  aa  7 00046 2721 20
    000146  0a   000023 7100 00
    000147  5a   000036 0000 00
    000150  aa  7 00046 2721 20
    000151  0a   000025 7100 00
    000152  5a   000027 0000 00
    000153  aa  7 00046 2721 20
    000154  0a   000072 7100 00
    000155  5a   000020 0000 00
    000156  aa  7 00046 2721 20
    000157  0a   000057 7100 00
    000160  5a   000012 0000 00
    000161  aa  7 00046 2721 20
    000162  0a   000000 7100 00

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000164  5a   000003 000000 
    000165  5a   000063 600000 
    000166  aa   000000 000000 
    000167  55   000012 000002 
    000170  5a   000002 400003 
    000171  55   000006 000012 
    000172  aa  017 164 157 154
    000173  aa  164 163 137 141
    000174  aa  154 155 137 165
    000175  aa  164 151 154 137
    000176  55   000020 000003 
    000177  0a   000161 500000 
    000200  55   000015 000003 
    000201  aa  012 147 145 156         gen_ck_sum
    000202  aa  137 143 153 137
    000203  aa  163 165 155 000
    000204  55   000027 000012 
    000205  0a   000156 500000 
    000206  55   000023 000003 
    000207  aa  016 145 156 164         enter_ccc_req_
    000210  aa  145 162 137 143
    000211  aa  143 143 137 162
    000212  aa  145 161 137 000
    000213  55   000036 000020 
    000214  0a   000153 500000 
    000215  55   000032 000003 
    000216  aa  014 145 156 164         enter_slave_
    000217  aa  145 162 137 163
    000220  aa  154 141 166 145
    000221  aa  137 000 000 000
    000222  55   000045 000027 
    000223  0a   000150 500000 
    000224  55   000041 000003 
    000225  aa  015 141 163 143         ascii_to_bci_
    000226  aa  151 151 137 164
    000227  aa  157 137 142 143
    000230  aa  151 137 000 000
    000231  55   000054 000036 
    000232  0a   000145 500000 
    000233  55   000050 000003 
    000234  aa  015 141 163 143         ascii_to_bcd_
    000235  aa  151 151 137 164
    000236  aa  157 137 142 143
    000237  aa  144 137 000 000
    000240  55   000002 000045 
    000241  6a   000000 400002 
    000242  55   000057 000003 
    000243  aa  014 163 171 155         symbol_table
    000244  aa  142 157 154 137
    000245  aa  164 141 142 154
    000246  aa  145 000 000 000

DEFINITIONS HASH TABLE

    000247  aa   000000 000015 
    000250  aa   000000 000000 
    000251  5a   000020 000000 
    000252  aa   000000 000000 
    000253  aa   000000 000000 
    000254  aa   000000 000000 
    000255  5a   000036 000000 
    000256  5a   000045 000000 
    000257  5a   000012 000000 
    000260  5a   000054 000000 
    000261  aa   000000 000000 
    000262  aa   000000 000000 
    000263  5a   000027 000000 
    000264  aa   000000 000000 

NO EXTERNAL NAMES

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    000265  aa   000001 000000 
    000266  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    000267  aa   000000 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000164 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000010 
    000007  a2   000000 000000 
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000004 
    000004  aa   000000 114732 
    000005  aa   732732 062314 
    000006  aa   000000 114775 
    000007  aa   671063 234130 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000174 
    000020  aa   000000 000146 
    000021  aa   000000 000161 
    000022  aa   000164 000146 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   040066 056067 
    000030  aa   040040 117143 
    000031  aa   164157 142145 
    000032  aa   162040 061071 
    000033  aa   070066 040040 
    000034  aa   107112 157150 
    000035  aa   156163 157156 
    000036  aa   056123 171163 
    000037  aa   115141 151156 
    000040  aa   164056 141040 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   154151 163164 
    000045  aa   040040 040040 
    000046  aa   040040 040040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040040 040040 
    000057  aa   040040 040040 
    000060  aa   040040 040040 
    000061  aa   040040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000003 
    000066  aa   000102 000064 
    000067  aa   147740 446372 
    000070  aa   000000 114774 
    000071  aa   461311 400000 
    000072  aa   000117 000066 
    000073  aa   147714 750316 
    000074  aa   000000 114774 
    000075  aa   453561 000000 
    000076  aa   000135 000041 
    000077  aa   052721 247134 
    000100  aa   000000 105272 
    000101  aa   317215 400000 
    000102  aa   076163 160145          >special_ldd>install>MR12.0-1206>tolts_alm_util_.alm
    000103  aa   143151 141154 
    000104  aa   137154 144144 
    000105  aa   076151 156163 
    000106  aa   164141 154154 
    000107  aa   076115 122061 
    000110  aa   062056 060055 
    000111  aa   061062 060066 
    000112  aa   076164 157154 
    000113  aa   164163 137141 
    000114  aa   154155 137165 
    000115  aa   164151 154137 
    000116  aa   056141 154155 
    000117  aa   076163 160145          >special_ldd>install>MR12.0-1206>stack_header.incl.alm
    000120  aa   143151 141154 
    000121  aa   137154 144144 
    000122  aa   076151 156163 
    000123  aa   164141 154154 
    000124  aa   076115 122061 
    000125  aa   062056 060055 
    000126  aa   061062 060066 
    000127  aa   076163 164141 
    000130  aa   143153 137150 
    000131  aa   145141 144145 
    000132  aa   162056 151156 
    000133  aa   143154 056141 
    000134  aa   154155 040040 
    000135  aa   076154 144144          >ldd>include>stack_frame.incl.alm
    000136  aa   076151 156143 
    000137  aa   154165 144145 
    000140  aa   076163 164141 
    000141  aa   143153 137146 
    000142  aa   162141 155145 
    000143  aa   056151 156143 
    000144  aa   154056 141154 
    000145  aa   155040 040040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

          23    ascii_to_bcd_            tolts_alm_util_:     53,   83.
          25    ascii_to_bci_            tolts_alm_util_:     54,   87.
         104    atb_tab                  tolts_alm_util_:    107,  115,  152.
        1170    call_offset              stack_header:        80.
           7    ck_sum2                  tolts_alm_util_:     68,   74.
          15    ck_sum3                  tolts_alm_util_:     71,   75.
          52    cv_bci                   tolts_alm_util_:    102,  111.
          57    enter_ccc_req_           tolts_alm_util_:     56,  119.
          72    enter_slave_             tolts_alm_util_:     55,  138.
        1174    entry_offset             stack_header:        84.
           0    gen_ck_sum               tolts_alm_util_:     57,   60.
         102    mask                     tolts_alm_util_:     97,  100,  150.
        1171    push_offset              stack_header:        81.
        1173    return_no_pop_offset     stack_header:        83.
        1172    return_offset            stack_header:        82.
          73    stach_header.trace_top_ptr     stack_header:        62.
          32    stack_frame.arg_ptr      stack_frame:   16.
         100    stack_frame.condition_bit      stack_frame:   32.
          20    stack_frame.condition_word     stack_frame:    9.
        2000    stack_frame.crawl_out_bit      stack_frame:   28.
          26    stack_frame.entry_ptr    tolts_alm_util_:    144,  145,
                                         stack_frame:   13.
          20    stack_frame.flag_word    stack_frame:   24.
         400    stack_frame.link_trap_bit      stack_frame:   30.
          30    stack_frame.lp_ptr       stack_frame:   15.
       20000    stack_frame.main_proc_bit      stack_frame:   25.
          60    stack_frame.min_length   stack_frame:   23.
          22    stack_frame.next_sp      stack_frame:   10.
          36    stack_frame.on_unit_rel_ptrs   stack_frame:   19.
          30    stack_frame.operator_ptr       stack_frame:   14.
          37    stack_frame.operator_ret_ptr   stack_frame:   20.
          20    stack_frame.prev_sp      stack_frame:    8.
          40    stack_frame.regs         stack_frame:   22.
          24    stack_frame.return_ptr   stack_frame:   12.
       10000    stack_frame.run_unit_manager   stack_frame:   26.
        1000    stack_frame.signaller_bit      stack_frame:   29.
          22    stack_frame.signaller_word     stack_frame:   11.
        4000    stack_frame.signal_bit   stack_frame:   27.
          34    stack_frame.static_ptr   stack_frame:   17.
         200    stack_frame.support_bit  stack_frame:   31.
          35    stack_frame.support_ptr  stack_frame:   18.
          37    stack_frame.translator_id      stack_frame:   21.
          66    stack_header.assign_linkage_ptr      stack_header:        59.
          32    stack_header.bar_mode_sp       tolts_alm_util_:    140,
                                               stack_header:        42.
          36    stack_header.call_op_ptr       stack_header:        44.
          10    stack_header.clr_ptr     stack_header:        27.
           6    stack_header.combined_stat_ptr       stack_header:        25.
           4    stack_header.cpm_data_ptr      stack_header:        24.
          13    stack_header.cpm_enabled       stack_header:        32.
          13    stack_header.cur_lot_size      stack_header:        31.
          64    stack_header.ect_ptr     stack_header:        58.
          46    stack_header.entry_op_ptr      stack_header:        49.
          70    stack_header.heap_header_ptr   stack_header:        60.
          74    stack_header.in_trace    stack_header:        63.
          52    stack_header.isot_ptr    stack_header:        52.
          26    stack_header.lot_ptr     stack_header:        39.
          12    stack_header.main_proc_invoked       stack_header:        29.
          12    stack_header.max_lot_size      stack_header:        28.
          20    stack_header.parent_ptr  stack_header:        36.
          34    stack_header.pl1_operators_ptr       stack_header:        43.
          40    stack_header.push_op_ptr       stack_header:        46.
          42    stack_header.return_op_ptr     stack_header:        47.
          44    stack_header.ret_no_pop_op_ptr       stack_header:        48.
          62    stack_header.rnt_ptr     stack_header:        57.
          12    stack_header.run_unit_depth    stack_header:        30.
          54    stack_header.sct_ptr     stack_header:        53.
          30    stack_header.signal_ptr  stack_header:        41.
          22    stack_header.stack_begin_ptr   stack_header:        37.
          24    stack_header.stack_end_ptr     stack_header:        38.
          14    stack_header.system_free_ptr   stack_header:        33.
          60    stack_header.sys_link_info_ptr       stack_header:        56.
          72    stack_header.trace_frames      stack_header:        61.
          50    stack_header.trans_op_tv_ptr   stack_header:        51.
          56    stack_header.unwinder_ptr      stack_header:        54.
          16    stack_header.user_free_ptr     stack_header:        34.
         100    stack_header_end         stack_header:        64.
          50    temp                     tolts_alm_util_:     58.
           0    trace_frames.count       stack_header:        69.
           1    trace_frames.top_ptr     stack_header:        70.
         551    tv_offset                stack_header:        75,   80,   81,   82,   83,   84.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
