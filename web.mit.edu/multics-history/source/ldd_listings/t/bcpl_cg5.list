Compilation listing of file >2.1spec>online>mib083074>bcpl_cg5.bcpl.
Compilation performed for Martinson.SysMaint.a at 01/24/75  0655.7 mst Fri.
Compiled by BCPL version 3.4, August 1973.  Compiler updated at 09/25/73  0959.1 mst Tue.
Options applied:  source  xref  alist  optimize  6180.

     1	//  These routines store the object code in an internal representation.
     2	//  Last modified on 06/06/74 at 18:22:35 by R F Mabee.
     3	//  Changes for 6180 code generation installed with Version 3.4 by R F Mabee.
     4	//  First installed with Version 2.7 of the compiler, R F Mabee.
     5	
     6	//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.
     7	
     8	//  General permission is granted to copy and use this program, but not to sell it, provided that the above
     9	//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
    10	//  Please contact R F Mabee at MIT for information on this program and versions for other machines.
    11	
    12	get "bcpl_cg_head"
	     1	//  Declarations for the code generator.
	     2	//  Last modified on 08/15/73 at 00:31:50 by R F Mabee.
	     3	//  Code generator substantially modified during 6180 bootstrap, and installed with Version 3.4, R F Mabee.
	     4	//  First installed as Version 2.7, R F Mabee.
	     5	
	     6	//  Copyright (c) 1973 by the author, Robert F. Mabee.
	     7	//  This file may only be reproduced or modified with explicit written
	     8	//  permission of the author.  Permission is hereby extended to those
	     9	//  persons responsible for operating the Multics system to make such
	    10	//  copies as are normally required to ensure the integrity of the Multics
	    11	//  file system.  Permission is also hereby extended to those persons
	    12	//  responsible for maintaining the Multics program libraries to make such
	    13	//  copies as are normally required for online installations.
	    14	
	    15	get "bcpl_compiler_head"
		     1	//  Declarations common to the entire BCPL compiler.
		     2	//  Last modified on 07/28/73 at 03:56:32 by R F Mabee.
		     3	//  Installed on 6180 as Version 3.4, R F Mabee.
		     4	//  First installed on 645 as Version 2.7 by R F Mabee.
		     5	
		     6	//  Copyright (c) 1973 by the author, Robert F. Mabee.
		     7	//  This file may only be reproduced or modified with explicit written
		     8	//  permission of the author.  Permission is hereby extended to those
		     9	//  persons responsible for operating the Multics system to make such
		    10	//  copies as are normally required to ensure the integrity of the Multics
		    11	//  file system.  Permission is also hereby extended to those persons
		    12	//  responsible for maintaining the Multics program libraries to make such
		    13	//  copies as are normally required for online installations.
		    14	
		    15	external
		    16	     $(	Readch = "bcpl_machine_code_$Readch"		//  Library routines used by the compiler.
		    17		Writech = "bcpl_machine_code_$Writech"
		    18		WriteS = "bcpl_stream_io_$WriteS"
		    19		WriteN = "bcpl_stream_io_$WriteN"
		    20		Format = "bcpl_stream_io_$Format"
		    21		Packstring = "bcpl_machine_code_$Packstring"
		    22		Unpackstring = "bcpl_machine_code_$Unpackstring"
		    23		RemoveEscapes = "bcpl_conversions_$RemoveEscapes"
		    24		EqualString = "bcpl_strings_$EqualString"
		    25		CompareStrings = "bcpl_strings_$CompareStrings"	//  Alphabetic comparison.
		    26		Concatenate = "bcpl_strings_$Concatenate"
		    27		ConvertStoN = "bcpl_conversions_$ConvertStoN"
		    28		ConvertNtoS = "bcpl_conversions_$ConvertNtoS"
		    29		Length = "bcpl_strings_$Length"		//  Number of characters.
		    30		LengthInWords = "bcpl_strings_$LengthInWords"	//  Length of packed string.
		    31		RandomI = "bcpl_arithmetic_$RandomI"
		    32	
		    33		Newvec = "bcpl_utility$Newvec"		//  Utility routines used throughout the compiler.
		    34		Freevec = "bcpl_utility$Freevec"
		    35		List1 = "bcpl_utility$List1"
		    36		List2 = "bcpl_utility$List2"
		    37		List3 = "bcpl_utility$List3"
		    38		List4 = "bcpl_utility$List4"
		    39		List5 = "bcpl_utility$List5"
		    40		List6 = "bcpl_utility$List6"
		    41		StoreString = "bcpl_utility$StoreString"
		    42		PushInput = "bcpl_utility$PushInput"
		    43		PopInput = "bcpl_utility$PopInput"
		    44		MakeTimeString = "bcpl_utility$MakeTimeString"
		    45		Nextparam = "bcpl_utility$Nextparam"
		    46		FormCharconst = "bcpl_utility$FormCharconst"
		    47		FormStringconst = "bcpl_utility$FormStringconst"
		    48	
		    49		CaeReport = "bcpl_report$CaeReport"
		    50		Transreport = "bcpl_report$Transreport"
		    51		CGreport = "bcpl_report$CGreport"
		    52	
		    53		Nextsymb = "bcpl_lex0$Nextsymb"
		    54	
		    55		SymbolName = "bcpl_plist$SymbolName"
		    56		FindPrintName = "bcpl_plist$FindPrintName"
		    57		EnterIntoCrossreference = "bcpl_plist$EnterIntoCrossreference"
		    58	
		    59		GetVersion = "bcpl_version$GetVersion"		//  Routines used only by the driver.
		    60		UtilitiesInit = "bcpl_utility$UtilitiesInit"
		    61		Cleanup = "bcpl_utility$Cleanup"
		    62		GetStream = "bcpl_utility$GetStream"
		    63	
		    64		CAE = "bcpl_cae0$CAE"
		    65		LexInit = "bcpl_lex0$LexInit"
		    66	
		    67		Pname = "bcpl_plist$Pname"
		    68		Plist = "bcpl_plist$Plist"
		    69	
		    70		Trans = "bcpl_trans0$Trans"
		    71		CgInit = "bcpl_cg0$CgInit"
		    72		BuildObject = "bcpl_cg0$BuildObject"
		    73		WriteObjectListing = "bcpl_cg0$WriteObjectListing"
		    74	     $)
		    75	
		    76	global		//  Globals are reserved in blocks as follows:
		    77	     $(	//    0 -  31	system
		    78		//   32 -  99	library
		    79		//  100 - 149	options and other common cells
		    80		//  150 - 159	metering cells
		    81		//  160 - 169	bcpl_utility
		    82		//  170 - 199	to be assigned
		    83		//  200 - 229	lexical phase
		    84		//  230 - 249	syntax analyzer
		    85		//  250 - 299	translator
		    86		//  300 - 399	code generator
		    87	
		    88			//  Cells used for communication with the library.
		    89		OUTPUT		: 32
		    90		INPUT		: 33
		    91		MONITOR		: 34
		    92		Ch		: 36
		    93	
		    94			//  Options for this compilation.
		    95		Listing		: 100
		    96		UpperCase		: 101
		    97		PPrep		: 102
		    98		Crep		: 103
		    99		Symbols		: 104
		   100		LineMap		: 105
		   101		Optimize		: 106
		   102		Machine		: 107
		   103		Xref		: 108
		   104		OcodeSw		: 109
		   105		HaveListingFile	: 110
		   106		QuietSw		: 111
		   107	
		   108			//  Other information about this compilation.
		   109		CompilerVersionString : 120
		   110		CompilerVersionNumber : 121
		   111		CompilerDTMString	: 122
		   112		CompilerDTM	: 123
		   113		TimeNowString	: 124
		   114		TimeNow		: 125
		   115		OptionString	: 126
		   116		FileNames		: 127
		   117		FilesInfo		: 128
		   118		FileCount		: 129
		   119		ProgramName	: 130
		   120		UserID		: 131
		   121	
		   122			//  Working variables needing global scope.
		   123		LineCount		: 140
		   124		Errorsw		: 141
		   125		NAMECHAIN		: 142
		   126		Symb		: 143
		   127		DictionaryEntry	: 144
		   128		Column		: 145
		   129	     $)
		   130	manifest
		   131	     $(	GlobalTemp = 199  $)	//  Number of cell available for local, temporary use.
		   132	
		   133	manifest
		   134	     $(	Left = 18; Right = $8777777
		   135		Endofstreamch = $87777
		   136		Even = $87777777777776
		   137		Vmax = 511
		   138		LineMask = $817777; FileShift = 13	//  Breakdown of line count.
		   139		UnexpectedCase = 99		//  Error code for use throughout compiler.
		   140	     $)
	    16	get "bcpl_symbols"
		     1	//  All symbols used in the interface between any two phases of the compiler are defined here.
		     2	//  This includes all canonical symbols, syntax tree nodes, and XOCODE operators.
		     3	//  Last modified on 07/08/73 at 22:55:31 by R F Mabee.
		     4	//  Revisions installed in Version 3.4 on 6180, R F Mabee.
		     5	//  First installed with Version 2.7 by R F Mabee.
		     6	
		     7	//  Copyright (c) 1973 by the author, Robert F. Mabee.
		     8	//  This file may only be reproduced or modified with explicit written
		     9	//  permission of the author.  Permission is hereby extended to those
		    10	//  persons responsible for operating the Multics system to make such
		    11	//  copies as are normally required to ensure the integrity of the Multics
		    12	//  file system.  Permission is also hereby extended to those persons
		    13	//  responsible for maintaining the Multics program libraries to make such
		    14	//  copies as are normally required for online installations.
		    15	
		    16	manifest
		    17	     $(	AND_S = 1
		    18		ASSIGN_S = 2
		    19		BE_S = 3
		    20		BIT_S = 4
		    21		BREAK_S = 5
		    22		BY_S = 6
		    23		CALL_S = 07
		    24		CASE_S = 08
		    25	
		    26		CHAR_S = 10
		    27		CHARCONST_S = 11
		    28		COLON_S = 12
		    29		COMMA_S = 13
		    30		COND_S = 14
		    31		CONSTANT_S = 15
		    32		CONSTDEF_S = 16
		    33		DEFAULT_S = 17
		    34		DIV_F = 18
		    35	
		    36		DIV_S = 20
		    37		DO_S = 21
		    38		DOUBLE_S = 22
		    39		ENDCASE_S = 23
		    40		ENDPROG_S = 24
		    41		ERROR_S = 25
		    42		EQ_F = 26
		    43		EQ_S = 27
		    44		EQV_S = 28
		    45	
		    46		EXTERNAL_S = 30
		    47		FALSE_S = 31
		    48		FINISH_S = 32
		    49		FIXED_S = 33
		    50		FLOAT_S = 34
		    51		FNAP_S = 35
		    52		FNDEF_S = 36
		    53		FOR_S = 37
		    54		GE_F = 38
		    55	
		    56		GE_S = 40
		    57		GET_S = 41
		    58		GLOBAL_S = 42
		    59		GOTO_S = 43
		    60		GR_F = 44
		    61		GR_S = 45
		    62		IF_S = 46
		    63		IFNOT_S = 47
		    64		IFSO_S = 48
		    65	
		    66		INTO_S = 50
		    67		LABDEF_S = 51
		    68		LABEL_S = 52
		    69		LE_F = 53
		    70		LE_S = 54
		    71		LENGTH_S = 55
		    72		LET_S = 56
		    73		LIST_S = 57
		    74		LOCAL_S = 58
		    75	
		    76		LOGAND_S = 60
		    77		LOGOR_S = 61
		    78		LOOP_S = 62
		    79		LS_F = 63
		    80		LS_S = 64
		    81		LSHIFT_S = 65
		    82		LV_S = 66
		    83		LVECAP_S = 67
		    84		LV_ARG_OUT = 68
		    85	
		    86		LV_FNAP_RESULT = 70
		    87		LV_GLOBAL = 71
		    88		LV_LOCAL = 72
		    89		LV_STATIC = 73
		    90		LV_TEMP = 74
		    91		MAIN_S = 75
		    92		MANIFEST_S = 76
		    93		MINUS_F = 77
		    94		MINUS_S = 78
		    95	
		    96		MULT_F = 80
		    97		MULT_S = 81
		    98		NAME_S = 82
		    99		NEG_F = 83
		   100		NEG_S = 84
		   101		NEQV_S = 85
		   102		NE_F = 86
		   103		NE_S = 87
		   104		NIL_S = 88
		   105	
		   106		NOT_S = 90
		   107		NUMBER_S = 91
		   108		OFFSET_S = 92
		   109		OR_S = 93
		   110		PLUS_F = 94
		   111		PLUS_S = 95
		   112		POINTER_S = 96
		   113		POS_F = 97
		   114		POS_S = 98
		   115	
		   116		RBRA_S = 100
		   117		REGISTER_S = 101
		   118		REL_S = 102
		   119		REM_S = 103
		   120		REP_S = 104
		   121		REPEAT_S = 105
		   122		REPEATUNTIL_S = 106
		   123		REPEATWHILE_S = 107
		   124		RESULTIS_S = 108
		   125	
		   126		RETURN_S = 110
		   127		RKET_S = 111
		   128		RSHIFT_S = 112
		   129		RTAP_S = 113
		   130		RTDEF_S = 114
		   131		RV_S = 115
		   132		SBRA_S = 116
		   133		SECTBEGIN_S = 117
		   134		SECTBRA_S = 118
		   135	
		   136		SECTEND_S = 120
		   137		SECTKET_S = 121
		   138		SEMICOLON_S = 122
		   139		SKET_S = 123
		   140		STATIC_S = 124
		   141		STRING_S = 125
		   142		STRINGCONST_S = 126
		   143		STRUCTURE_S = 127
		   144		SWITCHON_S = 128
		   145	
		   146		TABLE_S = 130
		   147		TEMP_S = 131
		   148		TEST_S = 132
		   149		TO_S = 133
		   150		TRUE_S = 134
		   151		TYPE_S = 135
		   152		UNLESS_S = 136
		   153		UNTIL_S = 137
		   154		VALDEF_S = 138
		   155	
		   156		VALOF_S = 140
		   157		VEC_S = 141
		   158		VECAP_S = 142
		   159		WHILE_S = 143
		   160	     $)
	    17	get "bcpl_cg_codes"
		     1	//  Report codes for the code generation phase.
		     2	//  Last modified on 08/15/73 at 00:33:36 by R F Mabee.
		     3	//  First installed in Version 3.4 by R F Mabee.
		     4	//  Code generation error codes separated from bcpl_trans_codes in April 1973.
		     5	
		     6	//  Copyright (c) 1973 by the author, Robert F. Mabee.
		     7	//  This file may only be reproduced or modified with explicit written
		     8	//  permission of the author.  Permission is hereby extended to those
		     9	//  persons responsible for operating the Multics system to make such
		    10	//  copies as are normally required to ensure the integrity of the Multics
		    11	//  file system.  Permission is also hereby extended to those persons
		    12	//  responsible for maintaining the Multics program libraries to make such
		    13	//  copies as are normally required for online installations.
		    14	
		    15	manifest		//  300 - 399 are reserved for CG.
		    16	     $(	BadAddress	= 300
		    17		BadLabel		= 301
		    18		BadRegOpPair	= 302
		    19		DupCase		= 303
		    20		DupLabel		= 304
		    21		LinkRefersThis	= 305
		    22		OverCase		= 306
		    23		PhaseError	= 307
		    24		UndefLab		= 308
		    25	     $)
	    18	
	    19	external
	    20	     $(	FinishText = "bcpl_cg0$FinishText"
	    21	
	    22		ApplyMonadicOperator = "bcpl_cg1$ApplyMonadicOperator"
	    23		ApplyDiadicOperator = "bcpl_cg1$ApplyDiadicOperator"
	    24		ApplyOffsetOperator = "bcpl_cg1$ApplyOffsetOperator"
	    25		MonadicJumpcond = "bcpl_cg1$MonadicJumpcond"
	    26		DiadicJumpcond = "bcpl_cg1$DiadicJumpcond"
	    27	
	    28		IsNumber = "bcpl_cg2$IsNumber"
	    29		EvalNumber = "bcpl_cg2$EvalNumber"
	    30		IsZero = "bcpl_cg2$IsZero"
	    31		IsAddress = "bcpl_cg2$IsAddress"
	    32		IsStored = "bcpl_cg2$IsStored"
	    33		LookupTemp = "bcpl_cg2$LookupTemp"
	    34		MakeCgTemp = "bcpl_cg2$MakeCgTemp"
	    35		ClaimRegister = "bcpl_cg2$ClaimRegister"
	    36		DisclaimRegister = "bcpl_cg2$DisclaimRegister"
	    37		InRegister = "bcpl_cg2$InRegister"
	    38		FindInRegister = "bcpl_cg2$FindInRegister"
	    39		CombineAddress = "bcpl_cg2$CombineAddress"
	    40		Compjump = "bcpl_cg2$Compjump"
	    41		Complab = "bcpl_cg2$Complab"
	    42		DefineLab = "bcpl_cg2$DefineLab"
	    43		LookupLabel = "bcpl_cg2$LookupLabel"
	    44		ClearRegisters = "bcpl_cg2$ClearRegisters"
	    45		ClearMemory = "bcpl_cg2$ClearMemory"
	    46		AddLiteral = "bcpl_cg2$AddLiteral"
	    47		OutLiterals = "bcpl_cg2$OutLiterals"
	    48		Outstring = "bcpl_cg2$Outstring"
	    49	
	    50		LoadRegister = "bcpl_cg3$LoadRegister"
	    51		LoadPointer = "bcpl_cg3$LoadPointer"
	    52		LoadIndex = "bcpl_cg3$LoadIndex"
	    53		LoadAppropriateRegister = "bcpl_cg3$LoadAppropriateRegister"
	    54		LoadNumber = "bcpl_cg3$LoadNumber"
	    55		SetupAddr = "bcpl_cg3$SetupAddr"
	    56		CompareToZero = "bcpl_cg3$CompareToZero"
	    57		Makeaddressable = "bcpl_cg3$Makeaddressable"
	    58		SwapAandQ = "bcpl_cg3$SwapAandQ"
	    59		Preserve = "bcpl_cg3$Preserve"
	    60		Store = "bcpl_cg3$Store"
	    61		StoreRegister = "bcpl_cg3$StoreRegister"
	    62		GetRegister = "bcpl_cg3$GetRegister"
	    63		Satisfactory = "bcpl_cg3$Satisfactory"
	    64		Literal = "bcpl_cg3$Literal"
	    65	
	    66		NewSSP = "bcpl_cg4$NewSSP"
	    67		Compentry = "bcpl_cg4$Compentry"
	    68		Compreturn = "bcpl_cg4$Compreturn"
	    69		CreateArglist = "bcpl_cg4$CreateArglist"
	    70		StoreArg = "bcpl_cg4$StoreArg"
	    71		Compfnap = "bcpl_cg4$Compfnap"
	    72		CreateSystemArglist = "bcpl_cg4$CreateSystemArglist"
	    73		StoreSystemArg = "bcpl_cg4$StoreSystemArg"
	    74		CompSystemCall = "bcpl_cg4$CompSystemCall"
	    75		ResultBlockBegin = "bcpl_cg4$ResultBlockBegin"
	    76		ResultSet = "bcpl_cg4$ResultSet"
	    77		ResultGet = "bcpl_cg4$ResultGet"
	    78		Compfinish = "bcpl_cg4$Compfinish"
	    79		Compgoto = "bcpl_cg4$Compgoto"
	    80		Compstring = "bcpl_cg4$Compstring"
	    81		Comptable = "bcpl_cg4$Comptable"
	    82		Compexternal = "bcpl_cg4$Compexternal"
	    83	
	    84		OutData = "bcpl_cg5$OutData"
	    85		Outop = "bcpl_cg5$Outop"
	    86		Outop2 = "bcpl_cg5$Outop2"
	    87		Outop3 = "bcpl_cg5$Outop3"
	    88		Outop4 = "bcpl_cg5$Outop4"
	    89		OutW = "bcpl_cg5$OutW"
	    90		OutW2 = "bcpl_cg5$OutW2"
	    91		PutCode = "bcpl_cg5$PutCode"
	    92		PutAbsBits = "bcpl_cg5$PutAbsBits"
	    93		SetLineNumber = "bcpl_cg5$SetLineNumber"
	    94		SectionHeader = "bcpl_cg5$SectionHeader"
	    95		FormOpcode = "bcpl_cg5$FormOpcode"
	    96		FormTag = "bcpl_cg5$FormTag"
	    97		CheckAddr = "bcpl_cg5$CheckAddr"
	    98	
	    99		Compswitch = "bcpl_cg6$Compswitch"
	   100	
	   101		WriteGetlp = "bcpl_cg7$WriteGetlp"
	   102		WriteEntry = "bcpl_cg7$WriteEntry"
	   103		WriteDefs = "bcpl_cg7$WriteDefs"
	   104		WriteLinkage = "bcpl_cg7$WriteLinkage"
	   105	
	   106		WriteSymbol = "bcpl_cg8$WriteSymbol"
	   107		WriteRelBits = "bcpl_cg8$WriteRelBits"
	   108		WriteObjectMap = "bcpl_cg8$WriteObjectMap"
	   109	
	   110		WriteData = "bcpl_cg9$WriteData"
	   111		WriteInstruction = "bcpl_cg9$WriteInstruction"
	   112		ListCodeItem = "bcpl_cg9$ListCodeItem"
	   113	     $)
	   114	global		//  300 - 399 are reserved for the code generator.
	   115	     $(	AbsRelBits	: 300
	   116		Address		: 301
	   117		ArgCount		: 302
	   118		ArgLen		: 303
	   119		CgTempList	: 304
	   120		CodeFirst		: 305
	   121		CodeP		: 306
	   122		CodeV		: 307
	   123		Comment		: 308
	   124	
	   125		DeferredJumpLabel	: 310
	   126		DefsLength	: 311
	   127		DefsRelbits	: 312
	   128		EntryLabel	: 313
	   129		GetLpLabel	: 314
	   130		IndicatorsSetBy	: 315
	   131		Jumpsw		: 316
	   132		LabMaxArg		: 317
	   133		LabMaxSSP		: 318
	   134	
	   135		LabTable		: 320
	   136		LC		: 321
	   137		LineMapFirst	: 322
	   138		LineMapLength	: 323
	   139		LineMapList	: 324
	   140		LinkageLength	: 325
	   141		LinkageRelbits	: 326
	   142		LinkList		: 327
	   143		Lrand		: 328
	   144	
	   145		MainEntriesList	: 330
	   146		MaxArgOffset	: 331
	   147		MaxSSP		: 332
	   148		NewLiteralsList	: 333
	   149		OldLabel		: 334
	   150		OldLiteralsList	: 335
	   151		Param		: 336
	   152		Rrand		: 337
	   153		RegisterTemps	: 338
	   154	
	   155		RegisterUsage	: 340
	   156		RelbitsFirst	: 341
	   157		RelbitsLength	: 342
	   158		RelbitsList	: 343
	   159		RelbitsOffset	: 344
	   160		Reloc		: 345
	   161		ResultInfo	: 346
	   162		ResultInfoList	: 347
	   163		SaveSpaceSize	: 348
	   164	
	   165		SymbolLength	: 350
	   166		SymbolRelbits	: 351
	   167		StackRefTag	: 352
	   168		SymtabFirst	: 353
	   169		SymtabP		: 354
	   170		SymtabV		: 355
	   171		Tag		: 356
	   172		TextLength	: 357
	   173		TextRelbits	: 358
	   174	
	   175		UsageCounter	: 360
	   176	     $)
	   177	manifest
	   178	     $(	CgTempSize = 9
	   179		CodeSize = 1000
	   180		LabTableSize = 100
	   181		SymtabSize = 200
	   182	     $)
	   183	manifest		//  Flags for listing.
	   184	     $(	CodeSwitch	= 1
	   185		InstructionSwitch	= 2
	   186		DataSwitch	= 3
	   187		LabelSwitch	= 4
	   188		LineCountSwitch	= 5
	   189		SectionSwitch	= 6
	   190		HeaderSwitch	= 7
	   191	     $)
	   192	manifest		//  Relocation codes.
	   193	     $(	RelText		= $820
	   194		RelLink18		= $822
	   195		RelNegLink18	= $823
	   196		RelLink15		= $824
	   197		RelDef		= $825
	   198		RelSymbol		= $826
	   199		RelNegSymbol	= $827
	   200		RelStat18		= $830
	   201		RelStat15		= $831
	   202		RelExtendedAbs	= $836		//  Ten bit count follows this code.
	   203	     $)
	   204	manifest
	   205	     $(	TagXrMask = $817
	   206		TagPrMask = $8700000000100
	   207	
	   208		Mod16 = $8777777777760
	   209	     $)
	   210	
	   211	manifest			//  Modifiers and tags used in the code generator.
	   212	     $(	Ap = $8000000000100
	   213		Ab = $8100000000100
	   214		Bp = $8200000000100
	   215		Bb = $8300000000100
	   216		Lp = $8400000000100
	   217		Lb = $8500000000100
	   218		Sp = $8600000000100
	   219		Sb = $8700000000100
	   220	
	   221		Al = $805
	   222		Au = $801
	   223		Dl = $807
	   224		Du = $803
	   225		Ql = $806
	   226		Qu = $802
	   227	
	   228		X0 = $810
	   229		X1 = $811
	   230		X2 = $812
	   231		X3 = $813
	   232		X4 = $814
	   233		X5 = $815
	   234		X6 = $816
	   235		X7 = $817
	   236	
	   237		Ft2 = $846
	   238		Ic = $804
	   239		Star = $820
	   240		StarThenReg = $860
	   241	     $)
	   242	manifest			//  Internal codes for all machine registers used.
	   243	     $(	Ar	= 1
	   244		Qr	= 2
	   245	
	   246		Xr0	= 3
	   247		Xr1	= 4
	   248		Xr2	= 5
	   249		Xr3	= 6
	   250		Xr4	= 7
	   251		Xr5	= 8
	   252		Xr6	= 9
	   253		Xr7	= 10
	   254	
	   255		Apr	= 11
	   256		Abr	= 12
	   257		Bpr	= 13
	   258		Bbr	= 14
	   259		Lpr	= 15
	   260		Lbr	= 16
	   261		Spr	= 17
	   262		Sbr	= 18
	   263	
	   264		EAQr	= 19
	   265	
	   266		NumberOfRegisters = 20
	   267	
	   268		AorQr	= 22
	   269		AnyPr	= 23
	   270		AnyXr	= 24
	   271	     $)
    13	get "bcpl_opcodes"
	     1	//  Definitions for 645 and 6180 machine instructions.  See FormOpcode.
	     2	//  Last modified on 07/20/73 at 23:35:00 by R F Mabee.
	     3	//  6180 instructions added and installed as Version 3.4 by R F Mabee.
	     4	//  First installed as Version 2.7 by R F Mabee
	     5	
	     6	//  Copyright (c) 1973 by the author, Robert F. Mabee.
	     7	//  This file may only be reproduced or modified with explicit written
	     8	//  permission of the author.  Permission is hereby extended to those
	     9	//  persons responsible for operating the Multics system to make such
	    10	//  copies as are normally required to ensure the integrity of the Multics
	    11	//  file system.  Permission is also hereby extended to those persons
	    12	//  responsible for maintaining the Multics program libraries to make such
	    13	//  copies as are normally required for online installations.
	    14	
	    15	manifest		//  Note: low order bit of ten bit opcode is here represented by high order bit,
	    16	     $(		//  so remaining bits will retain proper representation as octal numbers.
	    17		Abd	= $81503
	    18		Ada	= $80075
	    19		Adlx1	= $80021
	    20		Als	= $80735
	    21		Ana	= $80375
	    22		Ansa	= $80355
	    23		Anx0	= $80360
	    24		Aos	= $80054
	    25		Arl	= $80771
	    26		Asa	= $80055
	    27		Cmpa	= $80115
	    28		Div	= $80506
	    29		Dvf	= $80507
	    30		Eabap	= $80310
	    31		Eablb	= $80331
	    32		Eablp	= $80330
	    33		Eapab	= $81351
	    34		Eapap	= $80350
	    35		Eapbp	= $80352
	    36		Eaplb	= $81371
	    37		Eaplp	= $80370
	    38		Eax0	= $80620
	    39		Eax1	= $80621
	    40		Eax7	= $80627
	    41		Epaq	= $80213
	    42		Era	= $80675
	    43		Ersa	= $80655
	    44		Fad	= $80475
	    45		Fcmp	= $80515
	    46		Fdi	= $80525
	    47		Fdv	= $80565
	    48		Fld	= $80431
	    49		Fmp	= $80461
	    50		Fneg	= $80513
	    51		Fsb	= $80575
	    52		Fstr	= $80470
	    53		Fszn	= $80430
	    54		Lca	= $80335
	    55		Lda	= $80235
	    56		Ldaq	= $80237
	    57		Ldx7	= $80227
	    58		Llr	= $80777
	    59		Lprpap	= $80760
	    60		Lprpbp	= $80762
	    61		Lprplp	= $80764
	    62		Lrl	= $80773
	    63		Lxl0	= $80720
	    64		Lxl1	= $80721
	    65		Mpy	= $80402
	    66		Neg	= $80531
	    67		Negl	= $80533
	    68		Ora	= $80275
	    69		Orsa	= $80255
	    70		Sba	= $80175
	    71		Sblx1	= $80121
	    72		Sprpap	= $80540
	    73		Sprpbp	= $80542
	    74		Sprplp	= $80544
	    75		Sreg	= $80753
	    76		Ssa	= $80155
	    77		Sta	= $80755
	    78		Staq	= $80757
	    79		Stb	= $80254
	    80		Stc1	= $80554
	    81		Stcd	= $80357
	    82		Stpab	= $81251
	    83		Stpap	= $80250
	    84		Stpbp	= $80252
	    85		Stplb	= $81651
	    86		Stplp	= $80650
	    87		Stx0	= $80740
	    88		Stz	= $80450
	    89		Sxl0	= $80440
	    90		Sxl1	= $80441
	    91		Szn	= $80234
	    92		Tmi	= $80604
	    93		Tmoz	= $81604
	    94		Tnz	= $80601
	    95		Tpl	= $80605
	    96		Tpnz	= $81605
	    97		Tra	= $80710
	    98		Trc	= $80603
	    99		Tsbap	= $80270
	   100		Tsbbp	= $80272
	   101		Tsblp	= $80670
	   102		Tsx0	= $80700
	   103		Tze	= $80600
	   104	     $)
    14	
    15	let CompRel (r) be
    16	     $(	test r = 0
    17		then $(	if AbsRelBits ge 1023 do PutAbsBits ()
    18			AbsRelBits := AbsRelBits + 1
    19		     $)
    20		or   $(	unless AbsRelBits = 0 do PutAbsBits ()
    21			PutBits (r, 5)
    22		     $)
    23	     $)
    24	and PutAbsBits () be
    25	     $(	test AbsRelBits le 15
    26		then PutBits (0, AbsRelBits)
    27		or PutBits (RelExtendedAbs lshift 10 | AbsRelBits, 15)
    28		AbsRelBits := 0
    29	     $)
    30	and PutBits (r, n) be
    31	     $(	RelbitsOffset := RelbitsOffset + n
    32		test RelbitsOffset le 36
    33		then RelbitsList!0 := RelbitsList!0 | r lshift (36 - RelbitsOffset)
    34		or   $(	RelbitsOffset := RelbitsOffset - 36
    35			RelbitsList!0 := RelbitsList!0 | r rshift RelbitsOffset
    36			let New = Newvec (1)
    37			RelbitsList!1 := New
    38			RelbitsList, RelbitsLength := New, RelbitsLength + 1
    39			RelbitsList!0 := r lshift (36 - RelbitsOffset)
    40		     $)
    41	     $)
    42	
    43	let PutCode (Flags, a, b) be
    44	     $(	if CodeP ge CodeSize - 3 do
    45		     $(	let y = Newvec (CodeSize)
    46			CodeV!0, CodeV!1 := y, CodeP
    47			CodeV, CodeP := y, 2
    48		     $)
    49		CodeV!CodeP, CodeV!(CodeP + 1), CodeV!(CodeP + 2) := Flags, a, b
    50		CodeP := CodeP + 3
    51	     $)
    52	and OutWord (x, ListType) be
    53	     $(	PutCode (Param lshift Left | ListType, x, Comment)
    54		CompRel (Reloc rshift Left)
    55		CompRel (Reloc & Right)
    56		LC, Param, Reloc, Comment := LC + 1, 0, 0, 0
    57	     $)
    58	
    59	let SetLineNumber (n) be
    60	     $(	PutCode (LineCountSwitch, n)
    61		if LineMap do
    62		     $(	unless (LineMapList!0 rshift Left) = LC do
    63			     $(	let New = Newvec (1)
    64				LineMapList!1 := New
    65				LineMapList, LineMapLength := New, LineMapLength + 1
    66			     $)
    67			LineMapList!0 := LC lshift Left | n
    68		     $)
    69	     $)
    70	and SectionHeader (Comment) be
    71		PutCode (HeaderSwitch, 0, Comment)
    72	
    73	let OutW (x) be
    74	     $(	if Jumpsw return
    75		OutWord (x, CodeSwitch)
    76	     $)
    77	and OutW2 (x, c) be
    78	     $(	Comment := c
    79		OutW (x)
    80	     $)
    81	
    82	and Outop (Op) be
    83	     $(	if Jumpsw return
    84		let a, t = Address, Tag
    85		if Reloc = 0 then test t = 0 & Param ne 0
    86		then a, t := a - LC, t | Ic
    87		or if (t & TagPrMask) = Lp do Reloc := (t & Star) = 0 -> RelStat15 lshift Left, RelLink15 lshift Left
    88		if (t & TagPrMask) ne 0 do a := a & $877777
    89		let Ext, Rest = Op rshift 9, Op & $8777
    90		let Word = (a lshift 18) | (Rest lshift 9) | (Ext lshift 8) | t
    91		if Listing do
    92		     $(	WriteInstruction (Word, Param)
    93			Writech (OUTPUT, '*n')
    94		     $)
    95		OutWord (Word, InstructionSwitch)
    96	     $)
    97	and Outop2 (Op, P) be
    98	     $(	Address, Tag, Param := 0, 0, P
    99		Outop (Op)
   100	     $)
   101	and Outop3 (Op, A, T) be
   102	     $(	Address, Tag, Param := A, T, 0
   103		CheckAddr ()
   104		Outop (Op)
   105	     $)
   106	and Outop4 (Op, A, T, C) be
   107	     $(	Address, Tag, Param, Comment := A, T, 0, C
   108		CheckAddr ()
   109		Outop (Op)
   110	     $)
   111	
   112	and OutData (w) be
   113	     $(	if Jumpsw return
   114		if Listing do
   115		     $(	WriteData (w, Param)
   116			Writech (OUTPUT, '*n')
   117		     $)
   118		OutWord (w, DataSwitch)
   119	     $)
   120	
   121	and FormOpcode (Op, r) = valof
   122	     $(	let OpAB, OpLP = nil, nil
   123		switchon Op into
   124		     $(	case Ada: case Als: case Ana: case Ansa:
   125			case Arl: case Asa: case Cmpa: case Era:
   126			case Ersa: case Lca: case Lda: case Ora:
   127			case Orsa: case Sba: case Ssa: case Sta:
   128				if r = Ar resultis Op
   129				if r = Qr resultis Op + 1
   130				endcase
   131	
   132			case Mpy: case Div:
   133				if r = Qr resultis Op
   134				endcase
   135	
   136			case Fad: case Fcmp: case Fdi: case Fdv:
   137			case Fld: case Fmp: case Fneg: case Fsb:
   138			case Fstr:
   139				if r = EAQr resultis Op
   140				endcase
   141	
   142			case Eax0: case Lxl0:
   143				switchon r into
   144				     $(	case Xr0:	resultis Op
   145					case Xr1:	resultis Op + 1
   146					case Xr2:	resultis Op + 2
   147					case Xr3: resultis Op + 3
   148					case Xr4:	resultis Op + 4
   149					case Xr5:	resultis Op + 5
   150					case Xr6:	resultis Op + 6
   151					case Xr7:	resultis Op + 7
   152					default:
   153				     $)
   154				endcase
   155	
   156			case Eabap:
   157				OpAB, OpLP := 1, Eablp - Eabap
   158				goto Bases
   159			case Eapap:
   160				OpAB, OpLP := Eapab - Eapap, Eaplp - Eapap
   161				goto Bases
   162			case Stpap:
   163				OpAB, OpLP := Stpab - Stpap, Stplp - Stpap
   164				goto Bases
   165			case Lprpap: case Sprpap:
   166				OpAB, OpLP := 1, 4		//  Normal case.
   167			  Bases:
   168				switchon r into
   169				     $(	case Apr:	resultis Op
   170					case Abr:	resultis Op + OpAB
   171					case Bpr:	resultis Op + 2
   172					case Bbr:	resultis Op + 2 + OpAB
   173					case Lpr:	resultis Op + OpLP
   174					case Lbr:	resultis Op + OpLP + OpAB
   175					case Spr:	resultis Op + OpLP + 2
   176					case Sbr:	resultis Op + OpLP + 2 + OpAB
   177					default:
   178				     $)
   179			default:
   180		     $)
   181		CGreport (BadRegOpPair, r, Op)
   182		resultis Op
   183	     $)
   184	and FormTag (r) = valof
   185	  switchon r into
   186	     $(	case Ar:	resultis Al
   187		case Qr:	resultis Ql
   188		case Xr0:	resultis X0
   189		case Xr1:	resultis X1
   190		case Xr2:	resultis X2
   191		case Xr3:	resultis X3
   192		case Xr4:	resultis X4
   193		case Xr5:	resultis X5
   194		case Xr6:	resultis X6
   195		case Xr7:	resultis X7
   196		case Apr:	resultis Ap
   197		case Abr:	resultis Ab
   198		case Bpr:	resultis Bp
   199		case Bbr:	resultis Bb
   200		case Lpr:	resultis Lp
   201		case Lbr:	resultis Lb
   202		case Spr:	resultis Sp
   203		case Sbr:	resultis Sb
   204		default:	CGreport (UnexpectedCase, r, "FormTag")
   205			resultis 0
   206		case 0:	resultis 0
   207	     $)
   208	
   209	
   210	and CheckAddr () be
   211	     $(	manifest
   212		     $(	TwoToTheEighteenth = 1 lshift 18
   213			TwoToTheFourteenth = 1 lshift 14
   214		     $)
   215		unless - TwoToTheEighteenth le Address < TwoToTheEighteenth do CGreport (BadAddress, Address)
   216		if (Tag & $8100) ne 0 then unless - TwoToTheFourteenth le Address < TwoToTheFourteenth do
   217		     $(	let t, p, c = Tag, Param, Comment
   218			Tag, Param, Comment := Tag & TagXrMask, 0, "compute offset"
   219			Outop (Eax7)
   220			IndicatorsSetBy := Xr7
   221			Address, Tag, Param, Comment := 0, (t & not TagXrMask) | X7, p, c
   222		     $)
   223	     $)



CAE time 7.5, 121 source lines per second.
cross reference table

A			bcpl_cg5:  101, 102, 106, 107

a			bcpl_cg5:  43, 49, 84, 86, 86, 88, 88, 90

Ab			bcpl_cg_head:  213, bcpl_cg5:  197

Abd			bcpl_opcodes:  17

Abr			bcpl_cg_head:  256, bcpl_cg5:  170, 197

AbsRelBits		bcpl_cg_head:  115, bcpl_cg5:  17, 18, 18, 20, 25, 26, 27, 28

Ada			bcpl_opcodes:  18, bcpl_cg5:  124

AddLiteral		bcpl_cg_head:  46

Address			bcpl_cg_head:  116, bcpl_cg5:  84, 98, 102, 107, 215, 215, 216, 221

Adlx1			bcpl_opcodes:  19

Al			bcpl_cg_head:  221, bcpl_cg5:  186

Als			bcpl_opcodes:  20, bcpl_cg5:  124

Ana			bcpl_opcodes:  21, bcpl_cg5:  124

AND_S			bcpl_symbols:  17

Ansa			bcpl_opcodes:  22, bcpl_cg5:  124

Anx0			bcpl_opcodes:  23

AnyPr			bcpl_cg_head:  269

AnyXr			bcpl_cg_head:  270

AorQr			bcpl_cg_head:  268

Aos			bcpl_opcodes:  24

Ap			bcpl_cg_head:  212, bcpl_cg5:  196

ApplyDiadicOperator		bcpl_cg_head:  23

ApplyMonadicOperator	bcpl_cg_head:  22

ApplyOffsetOperator		bcpl_cg_head:  24

Apr			bcpl_cg_head:  255, bcpl_cg5:  169, 196

Ar			bcpl_cg_head:  243, bcpl_cg5:  128, 186

ArgCount			bcpl_cg_head:  117

ArgLen			bcpl_cg_head:  118

Arl			bcpl_opcodes:  25, bcpl_cg5:  125

Asa			bcpl_opcodes:  26, bcpl_cg5:  125

ASSIGN_S			bcpl_symbols:  18

Au			bcpl_cg_head:  222

b			bcpl_cg5:  43, 49

BadAddress		bcpl_cg_codes:  16, bcpl_cg5:  215

BadLabel			bcpl_cg_codes:  17

BadRegOpPair		bcpl_cg_codes:  18, bcpl_cg5:  181

Bases			bcpl_cg5:  158, 161, 164, 167

Bb			bcpl_cg_head:  215, bcpl_cg5:  199

Bbr			bcpl_cg_head:  258, bcpl_cg5:  172, 199

BE_S			bcpl_symbols:  19

BIT_S			bcpl_symbols:  20

Bp			bcpl_cg_head:  214, bcpl_cg5:  198

Bpr			bcpl_cg_head:  257, bcpl_cg5:  171, 198

BREAK_S			bcpl_symbols:  21

BuildObject		bcpl_compiler_head:  72

BY_S			bcpl_symbols:  22

C			bcpl_cg5:  106, 107

c			bcpl_cg5:  77, 78, 217, 221

CAE			bcpl_compiler_head:  64

CaeReport			bcpl_compiler_head:  49

CALL_S			bcpl_symbols:  23

CASE_S			bcpl_symbols:  24

CgInit			bcpl_compiler_head:  71

CGreport			bcpl_compiler_head:  51, bcpl_cg5:  181, 204, 215

CgTempList		bcpl_cg_head:  119

CgTempSize		bcpl_cg_head:  178

Ch			bcpl_compiler_head:  92

CHARCONST_S		bcpl_symbols:  27

CHAR_S			bcpl_symbols:  26

CheckAddr			bcpl_cg_head:  97, bcpl_cg5:  103, 108, 210

ClaimRegister		bcpl_cg_head:  35

Cleanup			bcpl_compiler_head:  61

ClearMemory		bcpl_cg_head:  45

ClearRegisters		bcpl_cg_head:  44

Cmpa			bcpl_opcodes:  27, bcpl_cg5:  125

CodeFirst			bcpl_cg_head:  120

CodeP			bcpl_cg_head:  121, bcpl_cg5:  44, 46, 47, 49, 49, 49, 50, 50

CodeSize			bcpl_cg_head:  179, bcpl_cg5:  44, 45

CodeSwitch		bcpl_cg_head:  184, bcpl_cg5:  75

CodeV			bcpl_cg_head:  122, bcpl_cg5:  46, 46, 47, 49, 49, 49

COLON_S			bcpl_symbols:  28

Column			bcpl_compiler_head:  128

CombineAddress		bcpl_cg_head:  39

COMMA_S			bcpl_symbols:  29

Comment			bcpl_cg_head:  123, bcpl_cg5:  53, 56, 70, 71, 78, 107, 217, 218, 221

CompareStrings		bcpl_compiler_head:  25

CompareToZero		bcpl_cg_head:  56

Compentry			bcpl_cg_head:  67

Compexternal		bcpl_cg_head:  82

Compfinish		bcpl_cg_head:  78

Compfnap			bcpl_cg_head:  71

Compgoto			bcpl_cg_head:  79

CompilerDTM		bcpl_compiler_head:  112

CompilerDTMString		bcpl_compiler_head:  111

CompilerVersionNumber	bcpl_compiler_head:  110

CompilerVersionString	bcpl_compiler_head:  109

Compjump			bcpl_cg_head:  40

Complab			bcpl_cg_head:  41

CompRel			bcpl_cg5:  15, 54, 55

Compreturn		bcpl_cg_head:  68

Compstring		bcpl_cg_head:  80

Compswitch		bcpl_cg_head:  99

CompSystemCall		bcpl_cg_head:  74

Comptable			bcpl_cg_head:  81

Concatenate		bcpl_compiler_head:  26

COND_S			bcpl_symbols:  30

CONSTANT_S		bcpl_symbols:  31

CONSTDEF_S		bcpl_symbols:  32

ConvertNtoS		bcpl_compiler_head:  28

ConvertStoN		bcpl_compiler_head:  27

CreateArglist		bcpl_cg_head:  69

CreateSystemArglist		bcpl_cg_head:  72

Crep			bcpl_compiler_head:  98

DataSwitch		bcpl_cg_head:  186, bcpl_cg5:  118

DEFAULT_S			bcpl_symbols:  33

DeferredJumpLabel		bcpl_cg_head:  125

DefineLab			bcpl_cg_head:  42

DefsLength		bcpl_cg_head:  126

DefsRelbits		bcpl_cg_head:  127

DiadicJumpcond		bcpl_cg_head:  26

DictionaryEntry		bcpl_compiler_head:  127

DisclaimRegister		bcpl_cg_head:  36

Div			bcpl_opcodes:  28, bcpl_cg5:  132

DIV_F			bcpl_symbols:  34

DIV_S			bcpl_symbols:  36

Dl			bcpl_cg_head:  223

DOUBLE_S			bcpl_symbols:  38

DO_S			bcpl_symbols:  37

Du			bcpl_cg_head:  224

DupCase			bcpl_cg_codes:  19

DupLabel			bcpl_cg_codes:  20

Dvf			bcpl_opcodes:  29

Eabap			bcpl_opcodes:  30, bcpl_cg5:  156, 157

Eablb			bcpl_opcodes:  31

Eablp			bcpl_opcodes:  32, bcpl_cg5:  157

Eapab			bcpl_opcodes:  33, bcpl_cg5:  160

Eapap			bcpl_opcodes:  34, bcpl_cg5:  159, 160, 160

Eapbp			bcpl_opcodes:  35

Eaplb			bcpl_opcodes:  36

Eaplp			bcpl_opcodes:  37, bcpl_cg5:  160

EAQr			bcpl_cg_head:  264, bcpl_cg5:  139

Eax0			bcpl_opcodes:  38, bcpl_cg5:  142

Eax1			bcpl_opcodes:  39

Eax7			bcpl_opcodes:  40, bcpl_cg5:  219

ENDCASE_S			bcpl_symbols:  39

Endofstreamch		bcpl_compiler_head:  135

ENDPROG_S			bcpl_symbols:  40

EnterIntoCrossreference	bcpl_compiler_head:  57

EntryLabel		bcpl_cg_head:  128

Epaq			bcpl_opcodes:  41

EqualString		bcpl_compiler_head:  24

EQV_S			bcpl_symbols:  44

EQ_F			bcpl_symbols:  42

EQ_S			bcpl_symbols:  43

Era			bcpl_opcodes:  42, bcpl_cg5:  125

Errorsw			bcpl_compiler_head:  124

ERROR_S			bcpl_symbols:  41

Ersa			bcpl_opcodes:  43, bcpl_cg5:  126

EvalNumber		bcpl_cg_head:  29

Even			bcpl_compiler_head:  136

Ext			bcpl_cg5:  89, 90

EXTERNAL_S		bcpl_symbols:  46

Fad			bcpl_opcodes:  44, bcpl_cg5:  136

FALSE_S			bcpl_symbols:  47

Fcmp			bcpl_opcodes:  45, bcpl_cg5:  136

Fdi			bcpl_opcodes:  46, bcpl_cg5:  136

Fdv			bcpl_opcodes:  47, bcpl_cg5:  136

FileCount			bcpl_compiler_head:  118

FileNames			bcpl_compiler_head:  116

FileShift			bcpl_compiler_head:  138

FilesInfo			bcpl_compiler_head:  117

FindInRegister		bcpl_cg_head:  38

FindPrintName		bcpl_compiler_head:  56

FinishText		bcpl_cg_head:  20

FINISH_S			bcpl_symbols:  48

FIXED_S			bcpl_symbols:  49

Flags			bcpl_cg5:  43, 49

Fld			bcpl_opcodes:  48, bcpl_cg5:  137

FLOAT_S			bcpl_symbols:  50

Fmp			bcpl_opcodes:  49, bcpl_cg5:  137

FNAP_S			bcpl_symbols:  51

FNDEF_S			bcpl_symbols:  52

Fneg			bcpl_opcodes:  50, bcpl_cg5:  137

Format			bcpl_compiler_head:  20

FormCharconst		bcpl_compiler_head:  46

FormOpcode		bcpl_cg_head:  95, bcpl_cg5:  121

FormStringconst		bcpl_compiler_head:  47

FormTag			bcpl_cg_head:  96, bcpl_cg5:  184

FOR_S			bcpl_symbols:  53

Freevec			bcpl_compiler_head:  34

Fsb			bcpl_opcodes:  51, bcpl_cg5:  137

Fstr			bcpl_opcodes:  52, bcpl_cg5:  138

Fszn			bcpl_opcodes:  53

Ft2			bcpl_cg_head:  237

GetLpLabel		bcpl_cg_head:  129

GetRegister		bcpl_cg_head:  62

GetStream			bcpl_compiler_head:  62

GetVersion		bcpl_compiler_head:  59

GET_S			bcpl_symbols:  57

GE_F			bcpl_symbols:  54

GE_S			bcpl_symbols:  56

GlobalTemp		bcpl_compiler_head:  131

GLOBAL_S			bcpl_symbols:  58

GOTO_S			bcpl_symbols:  59

GR_F			bcpl_symbols:  60

GR_S			bcpl_symbols:  61

HaveListingFile		bcpl_compiler_head:  105

HeaderSwitch		bcpl_cg_head:  190, bcpl_cg5:  71

Ic			bcpl_cg_head:  238, bcpl_cg5:  86

IFNOT_S			bcpl_symbols:  63

IFSO_S			bcpl_symbols:  64

IF_S			bcpl_symbols:  62

IndicatorsSetBy		bcpl_cg_head:  130, bcpl_cg5:  220

INPUT			bcpl_compiler_head:  90

InRegister		bcpl_cg_head:  37

InstructionSwitch		bcpl_cg_head:  185, bcpl_cg5:  95

INTO_S			bcpl_symbols:  66

IsAddress			bcpl_cg_head:  31

IsNumber			bcpl_cg_head:  28

IsStored			bcpl_cg_head:  32

IsZero			bcpl_cg_head:  30

Jumpsw			bcpl_cg_head:  131, bcpl_cg5:  74, 83, 113

LABDEF_S			bcpl_symbols:  67

LabelSwitch		bcpl_cg_head:  187

LABEL_S			bcpl_symbols:  68

LabMaxArg			bcpl_cg_head:  132

LabMaxSSP			bcpl_cg_head:  133

LabTable			bcpl_cg_head:  135

LabTableSize		bcpl_cg_head:  180

Lb			bcpl_cg_head:  217, bcpl_cg5:  201

Lbr			bcpl_cg_head:  260, bcpl_cg5:  174, 201

LC			bcpl_cg_head:  136, bcpl_cg5:  56, 56, 62, 67, 86

Lca			bcpl_opcodes:  54, bcpl_cg5:  126

Lda			bcpl_opcodes:  55, bcpl_cg5:  126

Ldaq			bcpl_opcodes:  56

Ldx7			bcpl_opcodes:  57

Left			bcpl_compiler_head:  134, bcpl_cg5:  53, 54, 62, 67, 87, 87

Length			bcpl_compiler_head:  29

LengthInWords		bcpl_compiler_head:  30

LENGTH_S			bcpl_symbols:  71

LET_S			bcpl_symbols:  72

LexInit			bcpl_compiler_head:  65

LE_F			bcpl_symbols:  69

LE_S			bcpl_symbols:  70

LineCount			bcpl_compiler_head:  123

LineCountSwitch		bcpl_cg_head:  188, bcpl_cg5:  60

LineMap			bcpl_compiler_head:  100, bcpl_cg5:  61

LineMapFirst		bcpl_cg_head:  137

LineMapLength		bcpl_cg_head:  138, bcpl_cg5:  65, 65

LineMapList		bcpl_cg_head:  139, bcpl_cg5:  62, 64, 65, 67

LineMask			bcpl_compiler_head:  138

LinkageLength		bcpl_cg_head:  140

LinkageRelbits		bcpl_cg_head:  141

LinkList			bcpl_cg_head:  142

LinkRefersThis		bcpl_cg_codes:  21

List1			bcpl_compiler_head:  35

List2			bcpl_compiler_head:  36

List3			bcpl_compiler_head:  37

List4			bcpl_compiler_head:  38

List5			bcpl_compiler_head:  39

List6			bcpl_compiler_head:  40

ListCodeItem		bcpl_cg_head:  112

Listing			bcpl_compiler_head:  95, bcpl_cg5:  91, 114

ListType			bcpl_cg5:  52, 53

LIST_S			bcpl_symbols:  73

Literal			bcpl_cg_head:  64

Llr			bcpl_opcodes:  58

LoadAppropriateRegister	bcpl_cg_head:  53

LoadIndex			bcpl_cg_head:  52

LoadNumber		bcpl_cg_head:  54

LoadPointer		bcpl_cg_head:  51

LoadRegister		bcpl_cg_head:  50

LOCAL_S			bcpl_symbols:  74

LOGAND_S			bcpl_symbols:  76

LOGOR_S			bcpl_symbols:  77

LookupLabel		bcpl_cg_head:  43

LookupTemp		bcpl_cg_head:  33

LOOP_S			bcpl_symbols:  78

Lp			bcpl_cg_head:  216, bcpl_cg5:  87, 200

Lpr			bcpl_cg_head:  259, bcpl_cg5:  173, 200

Lprpap			bcpl_opcodes:  59, bcpl_cg5:  165

Lprpbp			bcpl_opcodes:  60

Lprplp			bcpl_opcodes:  61

Lrand			bcpl_cg_head:  143

Lrl			bcpl_opcodes:  62

LSHIFT_S			bcpl_symbols:  81

LS_F			bcpl_symbols:  79

LS_S			bcpl_symbols:  80

LVECAP_S			bcpl_symbols:  83

LV_ARG_OUT		bcpl_symbols:  84

LV_FNAP_RESULT		bcpl_symbols:  86

LV_GLOBAL			bcpl_symbols:  87

LV_LOCAL			bcpl_symbols:  88

LV_S			bcpl_symbols:  82

LV_STATIC			bcpl_symbols:  89

LV_TEMP			bcpl_symbols:  90

Lxl0			bcpl_opcodes:  63, bcpl_cg5:  142

Lxl1			bcpl_opcodes:  64

Machine			bcpl_compiler_head:  102

MainEntriesList		bcpl_cg_head:  145

MAIN_S			bcpl_symbols:  91

Makeaddressable		bcpl_cg_head:  57

MakeCgTemp		bcpl_cg_head:  34

MakeTimeString		bcpl_compiler_head:  44

MANIFEST_S		bcpl_symbols:  92

MaxArgOffset		bcpl_cg_head:  146

MaxSSP			bcpl_cg_head:  147

MINUS_F			bcpl_symbols:  93

MINUS_S			bcpl_symbols:  94

Mod16			bcpl_cg_head:  208

MonadicJumpcond		bcpl_cg_head:  25

MONITOR			bcpl_compiler_head:  91

Mpy			bcpl_opcodes:  65, bcpl_cg5:  132

MULT_F			bcpl_symbols:  96

MULT_S			bcpl_symbols:  97

n			bcpl_cg5:  30, 31, 59, 60, 67

NAMECHAIN			bcpl_compiler_head:  125

NAME_S			bcpl_symbols:  98

Neg			bcpl_opcodes:  66

Negl			bcpl_opcodes:  67

NEG_F			bcpl_symbols:  99

NEG_S			bcpl_symbols:  100

NEQV_S			bcpl_symbols:  101

New			bcpl_cg5:  36, 37, 38, 63, 64, 65

NewLiteralsList		bcpl_cg_head:  148

NewSSP			bcpl_cg_head:  66

Newvec			bcpl_compiler_head:  33, bcpl_cg5:  36, 45, 63

Nextparam			bcpl_compiler_head:  45

Nextsymb			bcpl_compiler_head:  53

NE_F			bcpl_symbols:  102

NE_S			bcpl_symbols:  103

NIL_S			bcpl_symbols:  104

NOT_S			bcpl_symbols:  106

NumberOfRegisters		bcpl_cg_head:  266

NUMBER_S			bcpl_symbols:  107

OcodeSw			bcpl_compiler_head:  104

OFFSET_S			bcpl_symbols:  108

OldLabel			bcpl_cg_head:  149

OldLiteralsList		bcpl_cg_head:  150

Op			bcpl_cg5:  82, 89, 89, 97, 99, 101, 104, 106, 109, 121, 123, 128, 129, 133, 139, 144, 
			145, 146, 147, 148, 149, 150, 151, 169, 170, 171, 172, 173, 174, 175, 176, 181, 182

OpAB			bcpl_cg5:  122, 157, 160, 163, 166, 170, 172, 174, 176

OpLP			bcpl_cg5:  122, 157, 160, 163, 166, 173, 174, 175, 176

Optimize			bcpl_compiler_head:  101

OptionString		bcpl_compiler_head:  115

Ora			bcpl_opcodes:  68, bcpl_cg5:  126

Orsa			bcpl_opcodes:  69, bcpl_cg5:  127

OR_S			bcpl_symbols:  109

OutData			bcpl_cg_head:  84, bcpl_cg5:  112

OutLiterals		bcpl_cg_head:  47

Outop			bcpl_cg_head:  85, bcpl_cg5:  82, 99, 104, 109, 219

Outop2			bcpl_cg_head:  86, bcpl_cg5:  97

Outop3			bcpl_cg_head:  87, bcpl_cg5:  101

Outop4			bcpl_cg_head:  88, bcpl_cg5:  106

OUTPUT			bcpl_compiler_head:  89, bcpl_cg5:  93, 116

Outstring			bcpl_cg_head:  48

OutW			bcpl_cg_head:  89, bcpl_cg5:  73, 79

OutW2			bcpl_cg_head:  90, bcpl_cg5:  77

OutWord			bcpl_cg5:  52, 75, 95, 118

OverCase			bcpl_cg_codes:  22

P			bcpl_cg5:  97, 98

p			bcpl_cg5:  217, 221

Packstring		bcpl_compiler_head:  21

Param			bcpl_cg_head:  151, bcpl_cg5:  53, 56, 85, 92, 98, 102, 107, 115, 217, 218, 221

PhaseError		bcpl_cg_codes:  23

Plist			bcpl_compiler_head:  68

PLUS_F			bcpl_symbols:  110

PLUS_S			bcpl_symbols:  111

Pname			bcpl_compiler_head:  67

POINTER_S			bcpl_symbols:  112

PopInput			bcpl_compiler_head:  43

POS_F			bcpl_symbols:  113

POS_S			bcpl_symbols:  114

PPrep			bcpl_compiler_head:  97

Preserve			bcpl_cg_head:  59

ProgramName		bcpl_compiler_head:  119

PushInput			bcpl_compiler_head:  42

PutAbsBits		bcpl_cg_head:  92, bcpl_cg5:  17, 20, 24

PutBits			bcpl_cg5:  21, 26, 27, 30

PutCode			bcpl_cg_head:  91, bcpl_cg5:  43, 53, 60, 71

Ql			bcpl_cg_head:  225, bcpl_cg5:  187

Qr			bcpl_cg_head:  244, bcpl_cg5:  129, 133, 187

Qu			bcpl_cg_head:  226

QuietSw			bcpl_compiler_head:  106

r			bcpl_cg5:  15, 16, 21, 30, 33, 35, 39, 121, 128, 129, 133, 139, 143, 168, 181, 184, 185, 
			204

RandomI			bcpl_compiler_head:  31

RBRA_S			bcpl_symbols:  116

Readch			bcpl_compiler_head:  16

RegisterTemps		bcpl_cg_head:  153

RegisterUsage		bcpl_cg_head:  155

REGISTER_S		bcpl_symbols:  117

RelbitsFirst		bcpl_cg_head:  156

RelbitsLength		bcpl_cg_head:  157, bcpl_cg5:  38, 38

RelbitsList		bcpl_cg_head:  158, bcpl_cg5:  33, 33, 35, 35, 37, 38, 39

RelbitsOffset		bcpl_cg_head:  159, bcpl_cg5:  31, 31, 32, 33, 34, 34, 35, 39

RelDef			bcpl_cg_head:  197

RelExtendedAbs		bcpl_cg_head:  202, bcpl_cg5:  27

RelLink15			bcpl_cg_head:  196, bcpl_cg5:  87

RelLink18			bcpl_cg_head:  194

RelNegLink18		bcpl_cg_head:  195

RelNegSymbol		bcpl_cg_head:  199

Reloc			bcpl_cg_head:  160, bcpl_cg5:  54, 55, 56, 85, 87

RelStat15			bcpl_cg_head:  201, bcpl_cg5:  87

RelStat18			bcpl_cg_head:  200

RelSymbol			bcpl_cg_head:  198

RelText			bcpl_cg_head:  193

REL_S			bcpl_symbols:  118

RemoveEscapes		bcpl_compiler_head:  23

REM_S			bcpl_symbols:  119

REPEATUNTIL_S		bcpl_symbols:  122

REPEATWHILE_S		bcpl_symbols:  123

REPEAT_S			bcpl_symbols:  121

REP_S			bcpl_symbols:  120

Rest			bcpl_cg5:  89, 90

ResultBlockBegin		bcpl_cg_head:  75

ResultGet			bcpl_cg_head:  77

ResultInfo		bcpl_cg_head:  161

ResultInfoList		bcpl_cg_head:  162

RESULTIS_S		bcpl_symbols:  124

ResultSet			bcpl_cg_head:  76

RETURN_S			bcpl_symbols:  126

Right			bcpl_compiler_head:  134, bcpl_cg5:  55

RKET_S			bcpl_symbols:  127

Rrand			bcpl_cg_head:  152

RSHIFT_S			bcpl_symbols:  128

RTAP_S			bcpl_symbols:  129

RTDEF_S			bcpl_symbols:  130

RV_S			bcpl_symbols:  131

Satisfactory		bcpl_cg_head:  63

SaveSpaceSize		bcpl_cg_head:  163

Sb			bcpl_cg_head:  219, bcpl_cg5:  203

Sba			bcpl_opcodes:  70, bcpl_cg5:  127

Sblx1			bcpl_opcodes:  71

Sbr			bcpl_cg_head:  262, bcpl_cg5:  176, 203

SBRA_S			bcpl_symbols:  132

SECTBEGIN_S		bcpl_symbols:  133

SECTBRA_S			bcpl_symbols:  134

SECTEND_S			bcpl_symbols:  136

SectionHeader		bcpl_cg_head:  94, bcpl_cg5:  70

SectionSwitch		bcpl_cg_head:  189

SECTKET_S			bcpl_symbols:  137

SEMICOLON_S		bcpl_symbols:  138

SetLineNumber		bcpl_cg_head:  93, bcpl_cg5:  59

SetupAddr			bcpl_cg_head:  55

SKET_S			bcpl_symbols:  139

Sp			bcpl_cg_head:  218, bcpl_cg5:  202

Spr			bcpl_cg_head:  261, bcpl_cg5:  175, 202

Sprpap			bcpl_opcodes:  72, bcpl_cg5:  165

Sprpbp			bcpl_opcodes:  73

Sprplp			bcpl_opcodes:  74

Sreg			bcpl_opcodes:  75

Ssa			bcpl_opcodes:  76, bcpl_cg5:  127

Sta			bcpl_opcodes:  77, bcpl_cg5:  127

StackRefTag		bcpl_cg_head:  167

Staq			bcpl_opcodes:  78

Star			bcpl_cg_head:  239, bcpl_cg5:  87

StarThenReg		bcpl_cg_head:  240

STATIC_S			bcpl_symbols:  140

Stb			bcpl_opcodes:  79

Stc1			bcpl_opcodes:  80

Stcd			bcpl_opcodes:  81

Store			bcpl_cg_head:  60

StoreArg			bcpl_cg_head:  70

StoreRegister		bcpl_cg_head:  61

StoreString		bcpl_compiler_head:  41

StoreSystemArg		bcpl_cg_head:  73

Stpab			bcpl_opcodes:  82, bcpl_cg5:  163

Stpap			bcpl_opcodes:  83, bcpl_cg5:  162, 163, 163

Stpbp			bcpl_opcodes:  84

Stplb			bcpl_opcodes:  85

Stplp			bcpl_opcodes:  86, bcpl_cg5:  163

STRINGCONST_S		bcpl_symbols:  142

STRING_S			bcpl_symbols:  141

STRUCTURE_S		bcpl_symbols:  143

Stx0			bcpl_opcodes:  87

Stz			bcpl_opcodes:  88

SwapAandQ			bcpl_cg_head:  58

SWITCHON_S		bcpl_symbols:  144

Sxl0			bcpl_opcodes:  89

Sxl1			bcpl_opcodes:  90

Symb			bcpl_compiler_head:  126

SymbolLength		bcpl_cg_head:  165

SymbolName		bcpl_compiler_head:  55

SymbolRelbits		bcpl_cg_head:  166

Symbols			bcpl_compiler_head:  99

SymtabFirst		bcpl_cg_head:  168

SymtabP			bcpl_cg_head:  169

SymtabSize		bcpl_cg_head:  181

SymtabV			bcpl_cg_head:  170

Szn			bcpl_opcodes:  91

T			bcpl_cg5:  101, 102, 106, 107

t			bcpl_cg5:  84, 85, 86, 86, 87, 87, 88, 90, 217, 221

TABLE_S			bcpl_symbols:  146

Tag			bcpl_cg_head:  171, bcpl_cg5:  84, 98, 102, 107, 216, 217, 218, 218, 221

TagPrMask			bcpl_cg_head:  206, bcpl_cg5:  87, 88

TagXrMask			bcpl_cg_head:  205, bcpl_cg5:  218, 221

TEMP_S			bcpl_symbols:  147

TEST_S			bcpl_symbols:  148

TextLength		bcpl_cg_head:  172

TextRelbits		bcpl_cg_head:  173

TimeNow			bcpl_compiler_head:  114

TimeNowString		bcpl_compiler_head:  113

Tmi			bcpl_opcodes:  92

Tmoz			bcpl_opcodes:  93

Tnz			bcpl_opcodes:  94

TO_S			bcpl_symbols:  149

Tpl			bcpl_opcodes:  95

Tpnz			bcpl_opcodes:  96

Tra			bcpl_opcodes:  97

Trans			bcpl_compiler_head:  70

Transreport		bcpl_compiler_head:  50

Trc			bcpl_opcodes:  98

TRUE_S			bcpl_symbols:  150

Tsbap			bcpl_opcodes:  99

Tsbbp			bcpl_opcodes:  100

Tsblp			bcpl_opcodes:  101

Tsx0			bcpl_opcodes:  102

TwoToTheEighteenth		bcpl_cg5:  212, 215, 215

TwoToTheFourteenth		bcpl_cg5:  213, 216, 216

TYPE_S			bcpl_symbols:  151

Tze			bcpl_opcodes:  103

UndefLab			bcpl_cg_codes:  24

UnexpectedCase		bcpl_compiler_head:  139, bcpl_cg5:  204

UNLESS_S			bcpl_symbols:  152

Unpackstring		bcpl_compiler_head:  22

UNTIL_S			bcpl_symbols:  153

UpperCase			bcpl_compiler_head:  96

UsageCounter		bcpl_cg_head:  175

UserID			bcpl_compiler_head:  120

UtilitiesInit		bcpl_compiler_head:  60

VALDEF_S			bcpl_symbols:  154

VALOF_S			bcpl_symbols:  156

VECAP_S			bcpl_symbols:  158

VEC_S			bcpl_symbols:  157

Vmax			bcpl_compiler_head:  137

w			bcpl_cg5:  112, 115, 118

WHILE_S			bcpl_symbols:  159

Word			bcpl_cg5:  90, 92, 95

Writech			bcpl_compiler_head:  17, bcpl_cg5:  93, 116

WriteData			bcpl_cg_head:  110, bcpl_cg5:  115

WriteDefs			bcpl_cg_head:  103

WriteEntry		bcpl_cg_head:  102

WriteGetlp		bcpl_cg_head:  101

WriteInstruction		bcpl_cg_head:  111, bcpl_cg5:  92

WriteLinkage		bcpl_cg_head:  104

WriteN			bcpl_compiler_head:  19

WriteObjectListing		bcpl_compiler_head:  73

WriteObjectMap		bcpl_cg_head:  108

WriteRelBits		bcpl_cg_head:  107

WriteS			bcpl_compiler_head:  18

WriteSymbol		bcpl_cg_head:  106

x			bcpl_cg5:  52, 53, 73, 75, 77, 79

X0			bcpl_cg_head:  228, bcpl_cg5:  188

X1			bcpl_cg_head:  229, bcpl_cg5:  189

X2			bcpl_cg_head:  230, bcpl_cg5:  190

X3			bcpl_cg_head:  231, bcpl_cg5:  191

X4			bcpl_cg_head:  232, bcpl_cg5:  192

X5			bcpl_cg_head:  233, bcpl_cg5:  193

X6			bcpl_cg_head:  234, bcpl_cg5:  194

X7			bcpl_cg_head:  235, bcpl_cg5:  195, 221

Xr0			bcpl_cg_head:  246, bcpl_cg5:  144, 188

Xr1			bcpl_cg_head:  247, bcpl_cg5:  145, 189

Xr2			bcpl_cg_head:  248, bcpl_cg5:  146, 190

Xr3			bcpl_cg_head:  249, bcpl_cg5:  147, 191

Xr4			bcpl_cg_head:  250, bcpl_cg5:  148, 192

Xr5			bcpl_cg_head:  251, bcpl_cg5:  149, 193

Xr6			bcpl_cg_head:  252, bcpl_cg5:  150, 194

Xr7			bcpl_cg_head:  253, bcpl_cg5:  151, 195, 220

Xref			bcpl_compiler_head:  103

y			bcpl_cg5:  45, 46, 47




Trans time 2.1, 608 object words per second.
	"	Begin text of PutBits

aa 000000  000007 120165		zero	7,41077		" PutBits
aa 000001  164102 151164		zero	59458,53876
aa 000002  163000 000000		zero	58880
			L3:
aa 000003  000000 213000  30		epaq	0		" set lp to linkage section
aa 000004  700026 764161		lprplp	sb|22,*au
aa 000005  200000 021100		adlx1	bp|0		" BCPL save
aa 000006  700000 542111		sprpbp	sb|0,x1
aa 000007  700001 544111		sprplp	sb|1,x1
aa 000010  700422 620111		eax0	sb|274,x1
aa 000011  777760 360003		anx0	-16,du
aa 000012  700025 740100		stx0	sb|21		" end of save sequence

aa 000013  700003 236111  31		ldq	sb|3,x1		" n
aa 000014  600530 056100		asq	sp|344		" RelbitsOffset
aa 000015  600530 236100  32		ldq	sp|344		" RelbitsOffset
aa 000016  000044 116007		cmpq	36,dl		" 36
aa 000017  000010 605404		tpnz	L7
aa 000020  000044 235007  33		lda	36,dl		" 36
aa 000021  600530 175100		sba	sp|344		" RelbitsOffset
aa 000022  700002 236111		ldq	sb|2,x1		" r
aa 000023  000000 736005		qls	0,al
aa 000024  600527 760100		lprpap	sp|343		" RelbitsList
aa 000025  000000 256100		orsq	ap|0
aa 000026  000031 710004		tra	L8
			L7:
aa 000027  000044 336007  34		lcq	36,dl		" 36
aa 000030  600530 056100		asq	sp|344		" RelbitsOffset
aa 000031  700002 236111  35		ldq	sb|2,x1		" r
aa 000032  600530 722100		lxl2	sp|344		" RelbitsOffset
aa 000033  000000 772012		qrl	0,x2
aa 000034  600527 762100		lprpbp	sp|343		" RelbitsList
aa 000035  200000 256100		orsq	bp|0
aa 000036  000001 236007  36		ldq	1,dl		" 1
aa 000037  700012 756111		stq	sb|10,x1
4a 000040  400020 272120		tsbbp	lp|L9,*		" Newvec
aa 000041  000010 000001		zero	8,1
aa 000042  700004 756111		stq	sb|4,x1		" New
aa 000043  700004 236111  37		ldq	sb|4,x1		" New
aa 000044  600527 761100		lprpab	sp|343		" RelbitsList
aa 000045  100001 756100		stq	ab|1
aa 000046  700004 236111  38		ldq	sb|4,x1		" New
aa 000047  600527 756100		stq	sp|343		" RelbitsList
aa 000050  600526 054100		aos	sp|342		" RelbitsLength
aa 000051  000044 236007  39		ldq	36,dl		" 36
aa 000052  600530 176100		sbq	sp|344		" RelbitsOffset
aa 000053  700002 235111		lda	sb|2,x1		" r
aa 000054  000000 735006		als	0,ql
aa 000055  600527 763100		lprpbb	sp|343		" RelbitsList
aa 000056  300000 755100		sta	bb|0
			L8:
			L6:
aa 000057  700000 762111		lprpbp	sb|0,x1		" bcpl return
aa 000060  200000 121100		sblx1	bp|0
aa 000061  700001 764111		lprplp	sb|1,x1
aa 000062  200001 710100		tra	bp|1		" end of return sequence
	"	Begin text of PutAbsBits

aa 000063  000012 120165		zero	10,41077		" PutAbsBits
aa 000064  164101 142163		zero	59457,50291
aa 000065  102151 164163		zero	33897,59507
			L2:
aa 000066  000000 213000  24		epaq	0		" set lp to linkage section
aa 000067  700026 764161		lprplp	sb|22,*au
aa 000070  200000 021100		adlx1	bp|0		" BCPL save
aa 000071  700000 542111		sprpbp	sb|0,x1
aa 000072  700001 544111		sprplp	sb|1,x1
aa 000073  700423 620111		eax0	sb|275,x1
aa 000074  777760 360003		anx0	-16,du
aa 000075  700025 740100		stx0	sb|21		" end of save sequence

aa 000076  600454 236100  25		ldq	sp|300		" AbsRelBits
aa 000077  000017 116007		cmpq	15,dl		" 15
aa 000100  000007 605404		tpnz	L13
aa 000101  700006 450111  26		stz	sb|6,x1
aa 000102  600454 235100		lda	sp|300		" AbsRelBits
aa 000103  700007 755111		sta	sb|7,x1
aa 000104  777701 272004		tsbbp	L3+2		" PutBits
aa 000105  000004 000002		zero	4,2
aa 000106  000010 710004		tra	L14
			L13:
aa 000107  074000 235007  27		lda	30720,dl
aa 000110  600454 275100		ora	sp|300		" AbsRelBits
aa 000111  700006 755111		sta	sb|6,x1
aa 000112  000017 235007		lda	15,dl		" 15
aa 000113  700007 755111		sta	sb|7,x1
aa 000114  777671 272004		tsbbp	L3+2		" PutBits
aa 000115  000004 000002		zero	4,2
			L14:
aa 000116  600454 450100  28		stz	sp|300		" AbsRelBits
			L12:
aa 000117  700000 762111		lprpbp	sb|0,x1		" bcpl return
aa 000120  200000 121100		sblx1	bp|0
aa 000121  700001 764111		lprplp	sb|1,x1
aa 000122  200001 710100		tra	bp|1		" end of return sequence
	"	Begin text of CompRel

aa 000123  000007 103157		zero	7,34415		" CompRel
aa 000124  155160 122145		zero	55920,42085
aa 000125  154000 000000		zero	55296
			L1:
aa 000126  000000 213000  15		epaq	0		" set lp to linkage section
aa 000127  700026 764161		lprplp	sb|22,*au
aa 000130  200000 021100		adlx1	bp|0		" BCPL save
aa 000131  700000 542111		sprpbp	sb|0,x1
aa 000132  700001 544111		sprplp	sb|1,x1
aa 000133  700423 620111		eax0	sb|275,x1
aa 000134  777760 360003		anx0	-16,du
aa 000135  700025 740100		stx0	sb|21		" end of save sequence

aa 000136  700002 234111  16		szn	sb|2,x1		" r
aa 000137  000010 601004		tnz	L18
aa 000140  600454 235100  17		lda	sp|300		" AbsRelBits
aa 000141  001777 115007		cmpa	1023,dl		" 1023
aa 000142  000003 604004		tmi	L20
aa 000143  777725 272004		tsbbp	L2+2		" PutAbsBits
aa 000144  000004 000000		zero	4
			L20:
aa 000145  600454 054100  18		aos	sp|300		" AbsRelBits
aa 000146  000013 710004		tra	L19
			L18:
aa 000147  600454 234100  20		szn	sp|300		" AbsRelBits
aa 000150  000003 600004		tze	L21
aa 000151  777717 272004		tsbbp	L2+2		" PutAbsBits
aa 000152  000004 000000		zero	4
			L21:
aa 000153  700002 236111  21		ldq	sb|2,x1		" r
aa 000154  700006 756111		stq	sb|6,x1
aa 000155  000005 236007		ldq	5,dl		" 5
aa 000156  700007 756111		stq	sb|7,x1
aa 000157  777626 272004		tsbbp	L3+2		" PutBits
aa 000160  000004 000002		zero	4,2
			L19:
			L17:
aa 000161  700000 762111		lprpbp	sb|0,x1		" bcpl return
aa 000162  200000 121100		sblx1	bp|0
aa 000163  700001 764111		lprplp	sb|1,x1
aa 000164  200001 710100		tra	bp|1		" end of return sequence
	"	Begin text of PutCode

aa 000165  000007 120165		zero	7,41077		" PutCode
aa 000166  164103 157144		zero	59459,56932
aa 000167  145000 000000		zero	51712
			L22:
aa 000170  000000 213000  43		epaq	0		" set lp to linkage section
aa 000171  700026 764161		lprplp	sb|22,*au
aa 000172  200000 021100		adlx1	bp|0		" BCPL save
aa 000173  700000 542111		sprpbp	sb|0,x1
aa 000174  700001 544111		sprplp	sb|1,x1
aa 000175  700422 620111		eax0	sb|274,x1
aa 000176  777760 360003		anx0	-16,du
aa 000177  700025 740100		stx0	sb|21		" end of save sequence

aa 000200  600462 236100  44		ldq	sp|306		" CodeP
aa 000201  001745 116007		cmpq	997,dl
aa 000202  000020 604004		tmi	L27
aa 000203  001750 235007  45		lda	1000,dl		" CodeSize
aa 000204  700014 755111		sta	sb|12,x1
4a 000205  400020 272120		tsbbp	lp|L9,*		" Newvec
aa 000206  000012 000001		zero	10,1
aa 000207  700005 756111		stq	sb|5,x1		" y
aa 000210  600462 236100  46		ldq	sp|306		" CodeP
aa 000211  600463 765100		lprplb	sp|307		" CodeV
aa 000212  500001 756100		stq	lb|1
aa 000213  700005 236111		ldq	sb|5,x1		" y
aa 000214  600463 760100		lprpap	sp|307		" CodeV
aa 000215  000000 756100		stq	ap|0
aa 000216  000002 236007  47		ldq	2,dl		" 2
aa 000217  600462 756100		stq	sp|306		" CodeP
aa 000220  700005 236111		ldq	sb|5,x1		" y
aa 000221  600463 756100		stq	sp|307		" CodeV
			L27:
aa 000222  600462 236100  49		ldq	sp|306		" CodeP
aa 000223  000002 076007		adq	2,dl		" 2
aa 000224  700004 235111		lda	sb|4,x1		" b
aa 000225  600463 762100		lprpbp	sp|307		" CodeV
aa 000226  200000 755106		sta	bp|0,ql
aa 000227  700002 236111		ldq	sb|2,x1		" Flags
aa 000230  600462 723100		lxl3	sp|306		" CodeP
aa 000231  600463 761100		lprpab	sp|307		" CodeV
aa 000232  100000 756113		stq	ab|0,x3
aa 000233  600462 236100		ldq	sp|306		" CodeP
aa 000234  000001 076007		adq	1,dl		" 1
aa 000235  700003 235111		lda	sb|3,x1		" a
aa 000236  600463 763100		lprpbb	sp|307		" CodeV
aa 000237  300000 755106		sta	bb|0,ql
aa 000240  000003 236007  50		ldq	3,dl		" 3
aa 000241  600462 056100		asq	sp|306		" CodeP
			L26:
aa 000242  700000 762111		lprpbp	sb|0,x1		" bcpl return
aa 000243  200000 121100		sblx1	bp|0
aa 000244  700001 764111		lprplp	sb|1,x1
aa 000245  200001 710100		tra	bp|1		" end of return sequence
	"	Begin text of OutWord

aa 000246  000007 117165		zero	7,40565		" OutWord
aa 000247  164127 157162		zero	59479,56946
aa 000250  144000 000000		zero	51200
			L23:
aa 000251  000000 213000  52		epaq	0		" set lp to linkage section
aa 000252  700026 764161		lprplp	sb|22,*au
aa 000253  200000 021100		adlx1	bp|0		" BCPL save
aa 000254  700000 542111		sprpbp	sb|0,x1
aa 000255  700001 544111		sprplp	sb|1,x1
aa 000256  700424 620111		eax0	sb|276,x1
aa 000257  777760 360003		anx0	-16,du
aa 000260  700025 740100		stx0	sb|21		" end of save sequence

aa 000261  600520 236100  53		ldq	sp|336		" Param
aa 000262  000022 736000		qls	18
aa 000263  700003 276111		orq	sb|3,x1		" ListType
aa 000264  700010 756111		stq	sb|8,x1
aa 000265  700002 236111		ldq	sb|2,x1		" x
aa 000266  700011 756111		stq	sb|9,x1
aa 000267  600464 236100		ldq	sp|308		" Comment
aa 000270  700012 756111		stq	sb|10,x1
aa 000271  777701 272004		tsbbp	L22+2		" PutCode
aa 000272  000006 000003		zero	6,3
aa 000273  600531 236100  54		ldq	sp|345		" Reloc
aa 000274  000022 772000		qrl	18
aa 000275  700010 756111		stq	sb|8,x1
aa 000276  777632 272004		tsbbp	L1+2		" CompRel
aa 000277  000006 000001		zero	6,1
aa 000300  600531 236100  55		ldq	sp|345		" Reloc
aa 000301  777777 376007		anq	-1,dl		" Right
aa 000302  700010 756111		stq	sb|8,x1
aa 000303  777625 272004		tsbbp	L1+2		" CompRel
aa 000304  000006 000001		zero	6,1
aa 000305  600501 054100  56		aos	sp|321		" LC
aa 000306  600520 450100		stz	sp|336		" Param
aa 000307  600531 450100		stz	sp|345		" Reloc
aa 000310  600464 450100		stz	sp|308		" Comment
			L30:
aa 000311  700000 762111		lprpbp	sb|0,x1		" bcpl return
aa 000312  200000 121100		sblx1	bp|0
aa 000313  700001 764111		lprplp	sb|1,x1
aa 000314  200001 710100		tra	bp|1		" end of return sequence
	"	Begin text of SetLineNumber

aa 000315  000015 123145		zero	13,42597		" SetLineNumber
aa 000316  164114 151156		zero	59468,53870
aa 000317  145116 165155		zero	51790,60013
aa 000320  142145 162000		zero	50277,58368
			L31:
aa 000321  000000 213000  59		epaq	0		" set lp to linkage section
aa 000322  700026 764161		lprplp	sb|22,*au
aa 000323  200000 021100		adlx1	bp|0		" BCPL save
aa 000324  700000 542111		sprpbp	sb|0,x1
aa 000325  700001 544111		sprplp	sb|1,x1
aa 000326  700423 620111		eax0	sb|275,x1
aa 000327  777760 360003		anx0	-16,du
aa 000330  700025 740100		stx0	sb|21		" end of save sequence

aa 000331  000005 236007  60		ldq	5,dl		" LineCountSwitch
aa 000332  700010 756111		stq	sb|8,x1
aa 000333  700002 236111		ldq	sb|2,x1		" n
aa 000334  700011 756111		stq	sb|9,x1
aa 000335  777635 272004		tsbbp	L22+2		" PutCode
aa 000336  000006 000002		zero	6,2
aa 000337  600151 234100  61		szn	sp|105		" LineMap
aa 000340  000026 600004		tze	L36
aa 000341  600504 765100  62		lprplb	sp|324		" LineMapList
aa 000342  500000 236100		ldq	lb|0
aa 000343  000022 772000		qrl	18
aa 000344  600501 116100		cmpq	sp|321		" LC
aa 000345  000014 600004		tze	L37
aa 000346  000001 236007  63		ldq	1,dl		" 1
aa 000347  700010 756111		stq	sb|8,x1
4a 000350  400020 272120		tsbbp	lp|L9,*		" Newvec
aa 000351  000006 000001		zero	6,1
aa 000352  700003 756111		stq	sb|3,x1		" New
aa 000353  700003 236111  64		ldq	sb|3,x1		" New
aa 000354  600504 760100		lprpap	sp|324		" LineMapList
aa 000355  000001 756100		stq	ap|1
aa 000356  600503 054100  65		aos	sp|323		" LineMapLength
aa 000357  700003 236111		ldq	sb|3,x1		" New
aa 000360  600504 756100		stq	sp|324		" LineMapList
			L37:
aa 000361  600501 236100  67		ldq	sp|321		" LC
aa 000362  000022 736000		qls	18
aa 000363  700002 276111		orq	sb|2,x1		" n
aa 000364  600504 762100		lprpbp	sp|324		" LineMapList
aa 000365  200000 756100		stq	bp|0
			L36:
			L35:
aa 000366  700000 762111		lprpbp	sb|0,x1		" bcpl return
aa 000367  200000 121100		sblx1	bp|0
aa 000370  700001 764111		lprplp	sb|1,x1
aa 000371  200001 710100		tra	bp|1		" end of return sequence
	"	Begin text of SectionHeader

aa 000372  000015 123145		zero	13,42597		" SectionHeader
aa 000373  143164 151157		zero	50804,53871
aa 000374  156110 145141		zero	56392,51809
aa 000375  144145 162000		zero	51301,58368
			L32:
aa 000376  000000 213000  70		epaq	0		" set lp to linkage section
aa 000377  700026 764161		lprplp	sb|22,*au
aa 000400  200000 021100		adlx1	bp|0		" BCPL save
aa 000401  700000 542111		sprpbp	sb|0,x1
aa 000402  700001 544111		sprplp	sb|1,x1
aa 000403  700424 620111		eax0	sb|276,x1
aa 000404  777760 360003		anx0	-16,du
aa 000405  700025 740100		stx0	sb|21		" end of save sequence

aa 000406  000007 236007  71		ldq	7,dl		" HeaderSwitch
aa 000407  700006 756111		stq	sb|6,x1
aa 000410  700007 450111		stz	sb|7,x1
aa 000411  700002 236111		ldq	sb|2,x1		" Comment
aa 000412  700010 756111		stq	sb|8,x1
aa 000413  777557 272004		tsbbp	L22+2		" PutCode
aa 000414  000004 000003		zero	4,3
			L40:
aa 000415  700000 762111		lprpbp	sb|0,x1		" bcpl return
aa 000416  200000 121100		sblx1	bp|0
aa 000417  700001 764111		lprplp	sb|1,x1
aa 000420  200001 710100		tra	bp|1		" end of return sequence
	"	Begin text of Outop2

aa 000421  000006 117165		zero	6,40565		" Outop2
aa 000422  164157 160062		zero	59503,57394
			L44:
aa 000423  000000 213000  97		epaq	0		" set lp to linkage section
aa 000424  700026 764161		lprplp	sb|22,*au
aa 000425  200000 021100		adlx1	bp|0		" BCPL save
aa 000426  700000 542111		sprpbp	sb|0,x1
aa 000427  700001 544111		sprplp	sb|1,x1
aa 000430  700422 620111		eax0	sb|274,x1
aa 000431  777760 360003		anx0	-16,du
aa 000432  700025 740100		stx0	sb|21		" end of save sequence

aa 000433  700003 236111  98		ldq	sb|3,x1		" P
aa 000434  600520 756100		stq	sp|336		" Param
aa 000435  600544 450100		stz	sp|356		" Tag
aa 000436  600455 450100		stz	sp|301		" Address
aa 000437  700002 236111  99		ldq	sb|2,x1		" Op
aa 000440  700006 756111		stq	sb|6,x1
aa 000441  001056 272004		tsbbp	L43+2		" Outop
aa 000442  000004 000001		zero	4,1
			L53:
aa 000443  700000 762111		lprpbp	sb|0,x1		" bcpl return
aa 000444  200000 121100		sblx1	bp|0
aa 000445  700001 764111		lprplp	sb|1,x1
aa 000446  200001 710100		tra	bp|1		" end of return sequence
	"	Begin text of Outop4

aa 000447  000006 117165		zero	6,40565		" Outop4
aa 000450  164157 160064		zero	59503,57396
			L46:
aa 000451  000000 213000  106		epaq	0		" set lp to linkage section
aa 000452  700026 764161		lprplp	sb|22,*au
aa 000453  200000 021100		adlx1	bp|0		" BCPL save
aa 000454  700000 542111		sprpbp	sb|0,x1
aa 000455  700001 544111		sprplp	sb|1,x1
aa 000456  700422 620111		eax0	sb|274,x1
aa 000457  777760 360003		anx0	-16,du
aa 000460  700025 740100		stx0	sb|21		" end of save sequence

aa 000461  700005 236111  107		ldq	sb|5,x1		" C
aa 000462  600464 756100		stq	sp|308		" Comment
aa 000463  700003 236111		ldq	sb|3,x1		" A
aa 000464  600455 756100		stq	sp|301		" Address
aa 000465  600520 450100		stz	sp|336		" Param
aa 000466  700004 236111		ldq	sb|4,x1		" T
aa 000467  600544 756100		stq	sp|356		" Tag
aa 000470  000627 272004  108		tsbbp	L50+2		" CheckAddr
aa 000471  000006 000000		zero	6
aa 000472  700002 236111  109		ldq	sb|2,x1		" Op
aa 000473  700010 756111		stq	sb|8,x1
aa 000474  001023 272004		tsbbp	L43+2		" Outop
aa 000475  000006 000001		zero	6,1
			L56:
aa 000476  700000 762111		lprpbp	sb|0,x1		" bcpl return
aa 000477  200000 121100		sblx1	bp|0
aa 000500  700001 764111		lprplp	sb|1,x1
aa 000501  200001 710100		tra	bp|1		" end of return sequence
	"	Begin text of FormOpcode

aa 000502  000012 106157		zero	10,35951		" FormOpcode
aa 000503  162155 117160		zero	58477,40560
aa 000504  143157 144145		zero	50799,51301
			L48:
aa 000505  000000 213000  121		epaq	0		" set lp to linkage section
aa 000506  700026 764161		lprplp	sb|22,*au
aa 000507  200000 021100		adlx1	bp|0		" BCPL save
aa 000510  700000 542111		sprpbp	sb|0,x1
aa 000511  700001 544111		sprplp	sb|1,x1
aa 000512  700424 620111		eax0	sb|276,x1
aa 000513  777760 360003		anx0	-16,du
aa 000514  700025 740100		stx0	sb|21		" end of save sequence

aa 000515  000203 710004  124		tra	L62
			L63:
aa 000516  700003 236111  128		ldq	sb|3,x1		" r
aa 000517  000001 116007		cmpq	1,dl		" Ar
aa 000520  000003 601004		tnz	L64
aa 000521  700002 235111		lda	sb|2,x1		" Op
aa 000522  000415 710004		tra	L60
			L64:
aa 000523  700003 236111  129		ldq	sb|3,x1		" r
aa 000524  000002 116007		cmpq	2,dl		" Qr
aa 000525  000004 601004		tnz	L65
aa 000526  700002 235111		lda	sb|2,x1		" Op
aa 000527  000001 075007		ada	1,dl		" 1
aa 000530  000407 710004		tra	L60
			L65:
aa 000531  000375 710004  132		tra	L61
			L66:
aa 000532  700003 235111  133		lda	sb|3,x1		" r
aa 000533  000002 115007		cmpa	2,dl		" Qr
aa 000534  000003 601004		tnz	L67
aa 000535  700002 235111		lda	sb|2,x1		" Op
aa 000536  000401 710004		tra	L60
			L67:
aa 000537  000367 710004  136		tra	L61
			L68:
aa 000540  700003 236111  139		ldq	sb|3,x1		" r
aa 000541  000023 116007		cmpq	19,dl		" EAQr
aa 000542  000003 601004		tnz	L69
aa 000543  700002 235111		lda	sb|2,x1		" Op
aa 000544  000373 710004		tra	L60
			L69:
aa 000545  000361 710004  142		tra	L61
			L70:
aa 000546  000032 710004  144		tra	L72
			L73:
aa 000547  700002 235111		lda	sb|2,x1		" Op
aa 000550  000367 710004  145		tra	L60
			L74:
aa 000551  700002 236111		ldq	sb|2,x1		" Op
aa 000552  000001 076007		adq	1,dl		" 1
aa 000553  000044 777000		llr	36		" exchange A and Q
aa 000554  000363 710004  146		tra	L60
			L75:
aa 000555  700002 235111		lda	sb|2,x1		" Op
aa 000556  000002 075007		ada	2,dl		" 2
aa 000557  000360 710004  147		tra	L60
			L76:
aa 000560  700002 235111		lda	sb|2,x1		" Op
aa 000561  000003 075007		ada	3,dl		" 3
aa 000562  000355 710004  148		tra	L60
			L77:
aa 000563  700002 235111		lda	sb|2,x1		" Op
aa 000564  000004 075007		ada	4,dl		" 4
aa 000565  000352 710004  149		tra	L60
			L78:
aa 000566  700002 235111		lda	sb|2,x1		" Op
aa 000567  000005 075007		ada	5,dl		" 5
aa 000570  000347 710004  150		tra	L60
			L79:
aa 000571  700002 235111		lda	sb|2,x1		" Op
aa 000572  000006 075007		ada	6,dl		" 6
aa 000573  000344 710004  151		tra	L60
			L80:
aa 000574  700002 235111		lda	sb|2,x1		" Op
aa 000575  000007 075007		ada	7,dl		" 7
aa 000576  000341 710004  152		tra	L60
			L81:
aa 000577  000020 710004		tra	L71
			L72:

	"	Begin switchon

aa 000600  700003 235111		lda	sb|3,x1		" r
aa 000601  000013 115007		cmpa	11,dl
aa 000602  777775 603004		trc	L81
0a 000603  000604 710005		tra	L82,al
			L82:
aa 000604  777773 710004		tra	L81
aa 000605  777772 710004		tra	L81
aa 000606  777771 710004		tra	L81
aa 000607  777740 710004		tra	L73
aa 000610  777741 710004		tra	L74
aa 000611  777744 710004		tra	L75
aa 000612  777746 710004		tra	L76
aa 000613  777750 710004		tra	L77
aa 000614  777752 710004		tra	L78
aa 000615  777754 710004		tra	L79
aa 000616  777756 710004		tra	L80
			L71:
aa 000617  000307 710004  156		tra	L61
			L83:
aa 000620  000020 236007  157		ldq	16,dl
aa 000621  700005 756111		stq	sb|5,x1		" OpLP
aa 000622  000001 236007		ldq	1,dl		" 1
aa 000623  700006 756111		stq	sb|6,x1		" OpAB
aa 000624  000017 710004  159		tra	L57
			L84:
aa 000625  001001 236007  160		ldq	513,dl
aa 000626  700006 756111		stq	sb|6,x1		" OpAB
aa 000627  000020 236007		ldq	16,dl
aa 000630  700005 756111		stq	sb|5,x1		" OpLP
aa 000631  000012 710004  162		tra	L57
			L85:
aa 000632  001001 236007  163		ldq	513,dl
aa 000633  700006 756111		stq	sb|6,x1		" OpAB
aa 000634  000400 236007		ldq	256,dl
aa 000635  700005 756111		stq	sb|5,x1		" OpLP
aa 000636  000005 710004  165		tra	L57
			L86:
aa 000637  000001 236007  166		ldq	1,dl		" 1
aa 000640  700006 756111		stq	sb|6,x1		" OpAB
aa 000641  000004 236007		ldq	4,dl		" 4
aa 000642  700005 756111		stq	sb|5,x1		" OpLP
			L57:
aa 000643  000037 710004  169		tra	L88
			L89:
aa 000644  700002 235111		lda	sb|2,x1		" Op
aa 000645  000272 710004  170		tra	L60
			L90:
aa 000646  700002 236111		ldq	sb|2,x1		" Op
aa 000647  700006 076111		adq	sb|6,x1		" OpAB
aa 000650  000044 777000		llr	36		" exchange A and Q
aa 000651  000266 710004  171		tra	L60
			L91:
aa 000652  700002 235111		lda	sb|2,x1		" Op
aa 000653  000002 075007		ada	2,dl		" 2
aa 000654  000263 710004  172		tra	L60
			L92:
aa 000655  700002 235111		lda	sb|2,x1		" Op
aa 000656  000002 075007		ada	2,dl		" 2
aa 000657  700006 075111		ada	sb|6,x1		" OpAB
aa 000660  000257 710004  173		tra	L60
			L93:
aa 000661  700002 235111		lda	sb|2,x1		" Op
aa 000662  700005 075111		ada	sb|5,x1		" OpLP
aa 000663  000254 710004  174		tra	L60
			L94:
aa 000664  700002 235111		lda	sb|2,x1		" Op
aa 000665  700005 075111		ada	sb|5,x1		" OpLP
aa 000666  700006 075111		ada	sb|6,x1		" OpAB
aa 000667  000250 710004  175		tra	L60
			L95:
aa 000670  700002 235111		lda	sb|2,x1		" Op
aa 000671  700005 075111		ada	sb|5,x1		" OpLP
aa 000672  000002 075007		ada	2,dl		" 2
aa 000673  000244 710004  176		tra	L60
			L96:
aa 000674  700002 235111		lda	sb|2,x1		" Op
aa 000675  700005 075111		ada	sb|5,x1		" OpLP
aa 000676  000002 075007		ada	2,dl		" 2
aa 000677  700006 075111		ada	sb|6,x1		" OpAB
aa 000700  000237 710004  177		tra	L60
			L97:
aa 000701  000016 710004		tra	L87
			L88:

	"	Begin switchon

aa 000702  700003 235111		lda	sb|3,x1		" r
aa 000703  000013 175007		sba	11,dl
aa 000704  000010 115007		cmpa	8,dl
aa 000705  777774 603004		trc	L97
0a 000706  000707 710005		tra	L98,al
			L98:
aa 000707  777735 710004		tra	L89
aa 000710  777736 710004		tra	L90
aa 000711  777741 710004		tra	L91
aa 000712  777743 710004		tra	L92
aa 000713  777746 710004		tra	L93
aa 000714  777750 710004		tra	L94
aa 000715  777753 710004		tra	L95
aa 000716  777756 710004		tra	L96
			L87:
			L99:
aa 000717  000207 710004  179		tra	L61
			L62:

	"	Begin switchon

aa 000720  700002 235111		lda	sb|2,x1		" Op
aa 000721  000470 115007		cmpa	312,dl
aa 000722  000107 604004		tmi	L100
aa 000723  777615 600004		tze	L68
aa 000724  000655 115007		cmpa	429,dl
aa 000725  000035 604004		tmi	L101
aa 000726  777570 600004		tze	L63
aa 000727  000043 773000		lrl	35
aa 000730  000013 507007		dvf	11,dl		" hash table size
0a 000731  000747 115006		cmpa	L102,ql
aa 000732  777765 601004		tnz	L99
0a 000733  000734 710006		tra	L103,ql
			L103:
aa 000734  777763 710004		tra	L99
aa 000735  777702 710004		tra	L86
aa 000736  777610 710004		tra	L70
aa 000737  777760 710004		tra	L99
aa 000740  777556 710004		tra	L63
aa 000741  777555 710004		tra	L63
aa 000742  777755 710004		tra	L99
aa 000743  777754 710004		tra	L99
aa 000744  777753 710004		tra	L99
aa 000745  777551 710004		tra	L63
aa 000746  777550 710004		tra	L63
			L102:
aa 000747  000000 000000		zero	0
aa 000750  000000 000055		zero	0,45
aa 000751  000000 000052		zero	0,42
aa 000752  000000 000000		zero	0
aa 000753  000000 000053		zero	0,43
aa 000754  000000 000050		zero	0,40
aa 000755  000000 000000		zero	0
aa 000756  000000 000000		zero	0
aa 000757  000000 000000		zero	0
aa 000760  000000 000054		zero	0,44
aa 000761  000000 000055		zero	0,45
			L101:
aa 000762  000043 773000		lrl	35
aa 000763  000021 507007		dvf	17,dl		" hash table size
0a 000764  001010 115006		cmpa	L104,ql
aa 000765  777732 601004		tnz	L99
0a 000766  000767 710006		tra	L105,ql
			L105:
aa 000767  777730 710004		tra	L99
aa 000770  777550 710004		tra	L68
aa 000771  777726 710004		tra	L99
aa 000772  777540 710004		tra	L66
aa 000773  777724 710004		tra	L99
aa 000774  777723 710004		tra	L99
aa 000775  777722 710004		tra	L99
aa 000776  777542 710004		tra	L68
aa 000777  777541 710004		tra	L68
aa 001000  777546 710004		tra	L70
aa 001001  777537 710004		tra	L68
aa 001002  777536 710004		tra	L68
aa 001003  777634 710004		tra	L86
aa 001004  777713 710004		tra	L99
aa 001005  777712 710004		tra	L99
aa 001006  777711 710004		tra	L99
aa 001007  777531 710004		tra	L68
			L104:
aa 001010  000000 000000		zero	0
aa 001011  000000 000024		zero	0,20
aa 001012  000000 000000		zero	0
aa 001013  000000 000023		zero	0,19
aa 001014  000000 000000		zero	0
aa 001015  000000 000000		zero	0
aa 001016  000000 000000		zero	0
aa 001017  000000 000026		zero	0,22
aa 001020  000000 000023		zero	0,19
aa 001021  000000 000027		zero	0,23
aa 001022  000000 000023		zero	0,19
aa 001023  000000 000022		zero	0,18
aa 001024  000000 000024		zero	0,20
aa 001025  000000 000000		zero	0
aa 001026  000000 000000		zero	0
aa 001027  000000 000000		zero	0
aa 001030  000000 000025		zero	0,21
			L100:
aa 001031  000155 115007		cmpa	109,dl
aa 001032  000063 604004		tmi	L106
aa 001033  777463 600004		tze	L63
aa 001034  000235 115007		cmpa	157,dl
aa 001035  000055 604004		tmi	L107
aa 001036  777460 600004		tze	L63
aa 001037  000043 773000		lrl	35
aa 001040  000023 507007		dvf	19,dl		" hash table size
0a 001041  001067 115006		cmpa	L108,ql
aa 001042  777655 601004		tnz	L99
0a 001043  001044 710006		tra	L109,ql
			L109:
aa 001044  777653 710004		tra	L99
aa 001045  777473 710004		tra	L68
aa 001046  777450 710004		tra	L63
aa 001047  777650 710004		tra	L99
aa 001050  777555 710004		tra	L84
aa 001051  777646 710004		tra	L99
aa 001052  777444 710004		tra	L63
aa 001053  777644 710004		tra	L99
aa 001054  777643 710004		tra	L99
aa 001055  777441 710004		tra	L63
aa 001056  777542 710004		tra	L83
aa 001057  777453 710004		tra	L66
aa 001060  777436 710004		tra	L63
aa 001061  777636 710004		tra	L99
aa 001062  777635 710004		tra	L99
aa 001063  777455 710004		tra	L68
aa 001064  777546 710004		tra	L85
aa 001065  777632 710004		tra	L99
aa 001066  777430 710004		tra	L63
			L108:
aa 001067  000000 000000		zero	0
aa 001070  000000 000020		zero	0,16
aa 001071  000000 000011		zero	0,9
aa 001072  000000 000000		zero	0
aa 001073  000000 000014		zero	0,12
aa 001074  000000 000000		zero	0
aa 001075  000000 000015		zero	0,13
aa 001076  000000 000000		zero	0
aa 001077  000000 000000		zero	0
aa 001100  000000 000014		zero	0,12
aa 001101  000000 000012		zero	0,10
aa 001102  000000 000015		zero	0,13
aa 001103  000000 000013		zero	0,11
aa 001104  000000 000000		zero	0
aa 001105  000000 000000		zero	0
aa 001106  000000 000016		zero	0,14
aa 001107  000000 000010		zero	0,8
aa 001110  000000 000000		zero	0
aa 001111  000000 000011		zero	0,9
			L107:
aa 001112  000175 115007		cmpa	125,dl
aa 001113  777403 600004		tze	L63
aa 001114  777603 710004		tra	L99
			L106:
aa 001115  000075 115007		cmpa	61,dl
aa 001116  000005 604004		tmi	L110
aa 001117  777377 600004		tze	L63
aa 001120  000115 115007		cmpa	77,dl
aa 001121  777375 600004		tze	L63
aa 001122  777575 710004		tra	L99
			L110:
aa 001123  000055 115007		cmpa	45,dl
aa 001124  777372 600004		tze	L63
aa 001125  777572 710004		tra	L99
			L61:
aa 001126  000456 236007  181		ldq	302,dl		" BadRegOpPair
aa 001127  700014 756111		stq	sb|12,x1
aa 001130  700003 236111		ldq	sb|3,x1		" r
aa 001131  700015 756111		stq	sb|13,x1
aa 001132  700002 236111		ldq	sb|2,x1		" Op
aa 001133  700016 756111		stq	sb|14,x1
4a 001134  400016 272120		tsbbp	lp|L111,*		" CGreport
aa 001135  000012 000003		zero	10,3
aa 001136  700002 235111  182		lda	sb|2,x1		" Op
			L60:
aa 001137  700005 755111		sta	sb|5,x1
aa 001140  700005 236111		ldq	sb|5,x1
aa 001141  700000 762111		lprpbp	sb|0,x1		" bcpl return
aa 001142  200000 121100		sblx1	bp|0
aa 001143  700001 764111		lprplp	sb|1,x1
aa 001144  200001 710100		tra	bp|1		" end of return sequence
	"	Begin text of FormTag

aa 001145  000007 106157		zero	7,35951		" FormTag
aa 001146  162155 124141		zero	58477,43105
aa 001147  147000 000000		zero	52736
aa 001150  700004 756111  184		stq	sb|4,x1		" temporary
			L49:
aa 001151  000000 213000		epaq	0		" set lp to linkage section
aa 001152  700026 764161		lprplp	sb|22,*au
aa 001153  200000 021100		adlx1	bp|0		" BCPL save
aa 001154  700000 542111		sprpbp	sb|0,x1
aa 001155  700001 544111		sprplp	sb|1,x1
aa 001156  700424 620111		eax0	sb|276,x1
aa 001157  777760 360003		anx0	-16,du
aa 001160  700025 740100		stx0	sb|21		" end of save sequence

aa 001161  000061 710004  186		tra	L116
			L117:
aa 001162  000005 236007		ldq	5,dl		" Al
aa 001163  000106 710004  187		tra	L114
			L118:
aa 001164  000006 236007		ldq	6,dl		" Ql
aa 001165  000104 710004  188		tra	L114
			L119:
aa 001166  000010 236007		ldq	8,dl		" X0
aa 001167  000102 710004  189		tra	L114
			L120:
aa 001170  000011 236007		ldq	9,dl		" X1
aa 001171  000100 710004  190		tra	L114
			L121:
aa 001172  000012 236007		ldq	10,dl		" X2
aa 001173  000076 710004  191		tra	L114
			L122:
aa 001174  000013 236007		ldq	11,dl		" X3
aa 001175  000074 710004  192		tra	L114
			L123:
aa 001176  000014 236007		ldq	12,dl		" X4
aa 001177  000072 710004  193		tra	L114
			L124:
aa 001200  000015 236007		ldq	13,dl		" X5
aa 001201  000070 710004  194		tra	L114
			L125:
aa 001202  000016 236007		ldq	14,dl		" X6
aa 001203  000066 710004  195		tra	L114
			L126:
aa 001204  000017 236007		ldq	15,dl		" X7
aa 001205  000064 710004  196		tra	L114
			L127:
aa 001206  000100 236007		ldq	64,dl		" Ap
aa 001207  000062 710004  197		tra	L114
			L128:
aa 001210  000101 236004		ldq	L129		" Ab
aa 001211  000060 710004  198		tra	L114
			L130:
aa 001212  000076 236004		ldq	L131		" Bp
aa 001213  000056 710004  199		tra	L114
			L132:
aa 001214  000073 236004		ldq	L133		" Bb
aa 001215  000054 710004  200		tra	L114
			L134:
aa 001216  000070 336004		lcq	L135		" Lp
aa 001217  000052 710004  201		tra	L114
			L136:
aa 001220  000065 336004		lcq	L137		" Lb
aa 001221  000050 710004  202		tra	L114
			L138:
aa 001222  000062 336004		lcq	L139		" Sp
aa 001223  000046 710004  203		tra	L114
			L140:
aa 001224  000057 336004		lcq	L141		" Sb
aa 001225  000044 710004  204		tra	L114
			L142:
aa 001226  000143 235007		lda	99,dl		" UnexpectedCase
aa 001227  700010 755111		sta	sb|8,x1
aa 001230  700002 235111		lda	sb|2,x1		" r
aa 001231  700011 755111		sta	sb|9,x1
aa 001232  000046 351404		eapab	L143		" "FormTag"
aa 001233  700012 541111		sprpab	sb|10,x1
4a 001234  400016 272120		tsbbp	lp|L111,*		" CGreport
aa 001235  000006 000003		zero	6,3
aa 001236  000000 236007  205		ldq	0,dl		" 0
aa 001237  000032 710004  206		tra	L114
			L144:
aa 001240  000000 236007		ldq	0,dl		" 0
aa 001241  000030 710004		tra	L114
			L116:

	"	Begin switchon

aa 001242  700002 235111		lda	sb|2,x1		" r
aa 001243  000023 115007		cmpa	19,dl
aa 001244  777762 603004		trc	L142
0a 001245  001246 710005		tra	L145,al
			L145:
aa 001246  777772 710004		tra	L144
aa 001247  777713 710004		tra	L117
aa 001250  777714 710004		tra	L118
aa 001251  777715 710004		tra	L119
aa 001252  777716 710004		tra	L120
aa 001253  777717 710004		tra	L121
aa 001254  777720 710004		tra	L122
aa 001255  777721 710004		tra	L123
aa 001256  777722 710004		tra	L124
aa 001257  777723 710004		tra	L125
aa 001260  777724 710004		tra	L126
aa 001261  777725 710004		tra	L127
aa 001262  777726 710004		tra	L128
aa 001263  777727 710004		tra	L130
aa 001264  777730 710004		tra	L132
aa 001265  777731 710004		tra	L134
aa 001266  777732 710004		tra	L136
aa 001267  777733 710004		tra	L138
aa 001270  777734 710004		tra	L140
			L115:
			L114:
aa 001271  700004 756111		stq	sb|4,x1
aa 001272  700004 236111		ldq	sb|4,x1
aa 001273  700000 762111		lprpbp	sb|0,x1		" bcpl return
aa 001274  200000 121100		sblx1	bp|0
aa 001275  700001 764111		lprplp	sb|1,x1
aa 001276  200001 710100		tra	bp|1		" end of return sequence
aa 001277  700003 756111		stq	sb|3,x1		" temporary

	"	Literal pool

			L143:
aa 001300  000007 106157		zero	7,35951		" "FormTag"
aa 001301  162155 124141		zero	58477,43105
aa 001302  147000 000000		zero	52736
			L141:
aa 001303  077777 777700		zero	32767,-64		" Sb
			L139:
aa 001304  177777 777700		zero	65535,-64		" Sp
			L137:
aa 001305  277777 777700		zero	98303,-64		" Lb
			L135:
aa 001306  377777 777700		zero	131071,-64	" Lp
			L133:
aa 001307  300000 000100		zero	98304,64		" Bb
			L131:
aa 001310  200000 000100		zero	65536,64		" Bp
			L129:
aa 001311  100000 000100		zero	32768,64		" Ab
	"	Begin text of CheckAddr

aa 001312  000011 103150		zero	9,34408		" CheckAddr
aa 001313  145143 153101		zero	51811,54849
aa 001314  144144 162000		zero	51300,58368
			L50:
aa 001315  000000 213000  210		epaq	0		" set lp to linkage section
aa 001316  700026 764161		lprplp	sb|22,*au
aa 001317  200000 021100		adlx1	bp|0		" BCPL save
aa 001320  700000 542111		sprpbp	sb|0,x1
aa 001321  700001 544111		sprplp	sb|1,x1
aa 001322  700423 620111		eax0	sb|275,x1
aa 001323  777760 360003		anx0	-16,du
aa 001324  700025 740100		stx0	sb|21		" end of save sequence

aa 001325  000001 336003  215		lcq	1,du
aa 001326  600455 116100		cmpq	sp|301		" Address
aa 001327  000004 605404		tpnz	L150
aa 001330  600455 235100		lda	sp|301		" Address
aa 001331  000001 115003		cmpa	1,du		" TwoToTheEighteenth
aa 001332  000007 604004		tmi	L149
			L150:
aa 001333  000454 236007		ldq	300,dl		" BadAddress
aa 001334  700010 756111		stq	sb|8,x1
aa 001335  600455 236100		ldq	sp|301		" Address
aa 001336  700011 756111		stq	sb|9,x1
4a 001337  400016 272120		tsbbp	lp|L111,*		" CGreport
aa 001340  000006 000002		zero	6,2
			L149:
aa 001341  600544 236100  216		ldq	sp|356		" Tag
aa 001342  000100 376007		anq	64,dl		" $8100
aa 001343  000041 600004		tze	L151
aa 001344  040000 336007		lcq	16384,dl
aa 001345  600455 116100		cmpq	sp|301		" Address
aa 001346  000004 605404		tpnz	L153
aa 001347  600455 235100		lda	sp|301		" Address
aa 001350  040000 115007		cmpa	16384,dl		" TwoToTheFourteenth
aa 001351  000033 604004		tmi	L152
			L153:
aa 001352  600520 236100  217		ldq	sp|336		" Param
aa 001353  700004 756111		stq	sb|4,x1		" p
aa 001354  600464 236100		ldq	sp|308		" Comment
aa 001355  700002 756111		stq	sb|2,x1		" c
aa 001356  600544 236100		ldq	sp|356		" Tag
aa 001357  700003 756111		stq	sb|3,x1		" t
aa 001360  000031 351404  218		eapab	L154		" "compute offset"
aa 001361  600464 541100		sprpab	sp|308		" Comment
aa 001362  000017 236007		ldq	15,dl		" TagXrMask
aa 001363  600544 356100		ansq	sp|356		" Tag
aa 001364  600520 450100		stz	sp|336		" Param
aa 001365  000627 236007  219		ldq	407,dl		" Eax7
aa 001366  700010 756111		stq	sb|8,x1
aa 001367  000130 272004		tsbbp	L43+2		" Outop
aa 001370  000006 000001		zero	6,1
aa 001371  000012 236007  220		ldq	10,dl		" Xr7
aa 001372  600473 756100		stq	sp|315		" IndicatorsSetBy
aa 001373  700004 236111  221		ldq	sb|4,x1		" p
aa 001374  600520 756100		stq	sp|336		" Param
aa 001375  700003 236111		ldq	sb|3,x1		" t
aa 001376  000012 376004		anq	L155
aa 001377  000017 276007		orq	15,dl		" X7
aa 001400  600544 756100		stq	sp|356		" Tag
aa 001401  700002 236111		ldq	sb|2,x1		" c
aa 001402  600464 756100		stq	sp|308		" Comment
aa 001403  600455 450100		stz	sp|301		" Address
			L152:
			L151:
			L148:
aa 001404  700000 762111		lprpbp	sb|0,x1		" bcpl return
aa 001405  200000 121100		sblx1	bp|0
aa 001406  700001 764111		lprplp	sb|1,x1
aa 001407  200001 710100		tra	bp|1		" end of return sequence

	"	Literal pool

			L155:
aa 001410  777777 777760		zero	-1,-16
			L154:
aa 001411  000016 143157		zero	14,50799		" "compute offset"
aa 001412  155160 165164		zero	55920,60020
aa 001413  145040 157146		zero	51744,56934
aa 001414  146163 145164		zero	52339,51828
	"	Begin text of OutData

aa 001415  000007 117165		zero	7,40565		" OutData
aa 001416  164104 141164		zero	59460,49780
aa 001417  141000 000000		zero	49664
			L47:
aa 001420  000000 213000  112		epaq	0		" set lp to linkage section
aa 001421  700026 764161		lprplp	sb|22,*au
aa 001422  200000 021100		adlx1	bp|0		" BCPL save
aa 001423  700000 542111		sprpbp	sb|0,x1
aa 001424  700001 544111		sprplp	sb|1,x1
aa 001425  700423 620111		eax0	sb|275,x1
aa 001426  777760 360003		anx0	-16,du
aa 001427  700025 740100		stx0	sb|21		" end of save sequence

aa 001430  600474 234100  113		szn	sp|316		" Jumpsw
aa 001431  000025 601004		tnz	L158
aa 001432  600144 234100  114		szn	sp|100		" Listing
aa 001433  000015 600004		tze	L159
aa 001434  700002 236111  115		ldq	sb|2,x1		" w
aa 001435  700006 756111		stq	sb|6,x1
aa 001436  600520 236100		ldq	sp|336		" Param
aa 001437  700007 756111		stq	sb|7,x1
4a 001440  400014 272120		tsbbp	lp|L160,*		" WriteData
aa 001441  000004 000002		zero	4,2
aa 001442  600040 236100  116		ldq	sp|32		" OUTPUT
aa 001443  700006 756111		stq	sb|6,x1
aa 001444  000012 236007		ldq	10,dl		" '*n'
aa 001445  700007 756111		stq	sb|7,x1
4a 001446  400012 272120		tsbbp	lp|L161,*		" Writech
aa 001447  000004 000002		zero	4,2
			L159:
aa 001450  700002 236111  118		ldq	sb|2,x1		" w
aa 001451  700006 756111		stq	sb|6,x1
aa 001452  000003 236007		ldq	3,dl		" DataSwitch
aa 001453  700007 756111		stq	sb|7,x1
aa 001454  776577 272004		tsbbp	L23+2		" OutWord
aa 001455  000004 000002		zero	4,2
			L158:
aa 001456  700000 762111		lprpbp	sb|0,x1		" bcpl return
aa 001457  200000 121100		sblx1	bp|0
aa 001460  700001 764111		lprplp	sb|1,x1
aa 001461  200001 710100		tra	bp|1		" end of return sequence
	"	Begin text of Outop3

aa 001462  000006 117165		zero	6,40565		" Outop3
aa 001463  164157 160063		zero	59503,57395
			L45:
aa 001464  000000 213000  101		epaq	0		" set lp to linkage section
aa 001465  700026 764161		lprplp	sb|22,*au
aa 001466  200000 021100		adlx1	bp|0		" BCPL save
aa 001467  700000 542111		sprpbp	sb|0,x1
aa 001470  700001 544111		sprplp	sb|1,x1
aa 001471  700422 620111		eax0	sb|274,x1
aa 001472  777760 360003		anx0	-16,du
aa 001473  700025 740100		stx0	sb|21		" end of save sequence

aa 001474  600520 450100  102		stz	sp|336		" Param
aa 001475  700004 236111		ldq	sb|4,x1		" T
aa 001476  600544 756100		stq	sp|356		" Tag
aa 001477  700003 236111		ldq	sb|3,x1		" A
aa 001500  600455 756100		stq	sp|301		" Address
aa 001501  777616 272004  103		tsbbp	L50+2		" CheckAddr
aa 001502  000006 000000		zero	6
aa 001503  700002 236111  104		ldq	sb|2,x1		" Op
aa 001504  700010 756111		stq	sb|8,x1
aa 001505  000012 272004		tsbbp	L43+2		" Outop
aa 001506  000006 000001		zero	6,1
			L164:
aa 001507  700000 762111		lprpbp	sb|0,x1		" bcpl return
aa 001510  200000 121100		sblx1	bp|0
aa 001511  700001 764111		lprplp	sb|1,x1
aa 001512  200001 710100		tra	bp|1		" end of return sequence
	"	Begin text of Outop

aa 001513  000005 117165		zero	5,40565		" Outop
aa 001514  164157 160000		zero	59503,57344
			L43:
aa 001515  000000 213000  82		epaq	0		" set lp to linkage section
aa 001516  700026 764161		lprplp	sb|22,*au
aa 001517  200000 021100		adlx1	bp|0		" BCPL save
aa 001520  700000 542111		sprpbp	sb|0,x1
aa 001521  700001 544111		sprplp	sb|1,x1
aa 001522  700423 620111		eax0	sb|275,x1
aa 001523  777760 360003		anx0	-16,du
aa 001524  700025 740100		stx0	sb|21		" end of save sequence

aa 001525  600474 234100  83		szn	sp|316		" Jumpsw
aa 001526  000110 601004		tnz	L167
aa 001527  600455 236100  84		ldq	sp|301		" Address
aa 001530  700003 756111		stq	sb|3,x1		" a
aa 001531  600544 236100		ldq	sp|356		" Tag
aa 001532  700004 756111		stq	sb|4,x1		" t
aa 001533  600531 234100  85		szn	sp|345		" Reloc
aa 001534  000027 601004		tnz	L168
aa 001535  700004 234111		szn	sb|4,x1		" t
aa 001536  000010 601004		tnz	L169
aa 001537  600520 234100		szn	sp|336		" Param
aa 001540  000006 600004		tze	L169
aa 001541  000004 236007  86		ldq	4,dl		" Ic
aa 001542  700004 256111		orsq	sb|4,x1		" t
aa 001543  600501 336100		lcq	sp|321		" LC
aa 001544  700003 056111		asq	sb|3,x1		" a
aa 001545  000016 710004		tra	L170
			L169:
aa 001546  700004 236111  87		ldq	sb|4,x1		" t
aa 001547  000074 376004		anq	L172		" TagPrMask
aa 001550  000072 116004		cmpq	L173		" Lp
aa 001551  000012 601004		tnz	L171
aa 001552  700004 236111		ldq	sb|4,x1		" t
aa 001553  000020 376007		anq	16,dl		" Star
aa 001554  000003 601004		tnz	L174
aa 001555  000031 236003		ldq	25,du
aa 001556  000002 710004		tra	L175
			L174:
aa 001557  000024 236003		ldq	20,du
			L175:
aa 001560  700005 756111		stq	sb|5,x1
aa 001561  700005 236111		ldq	sb|5,x1
aa 001562  600531 756100		stq	sp|345		" Reloc
			L171:
			L170:
			L168:
aa 001563  700004 236111  88		ldq	sb|4,x1		" t
aa 001564  000057 376004		anq	L172		" TagPrMask
aa 001565  000003 600004		tze	L176
aa 001566  077777 236007		ldq	32767,dl		" $877777
aa 001567  700003 356111		ansq	sb|3,x1		" a
			L176:
aa 001570  700002 236111  89		ldq	sb|2,x1		" Op
aa 001571  000011 772000		qrl	9
aa 001572  700006 756111		stq	sb|6,x1		" Ext
aa 001573  700002 236111		ldq	sb|2,x1		" Op
aa 001574  000777 376007		anq	511,dl		" $8777
aa 001575  700005 756111		stq	sb|5,x1		" Rest
aa 001576  700005 236111  90		ldq	sb|5,x1		" Rest
aa 001577  000011 736000		qls	9
aa 001600  700003 235111		lda	sb|3,x1		" a
aa 001601  000022 735000		als	18
aa 001602  600000 755100		sta	sp|0
aa 001603  600000 276100		orq	sp|0
aa 001604  700006 235111		lda	sb|6,x1		" Ext
aa 001605  000010 735000		als	8
aa 001606  600000 756100		stq	sp|0
aa 001607  600000 275100		ora	sp|0
aa 001610  700004 275111		ora	sb|4,x1		" t
aa 001611  700007 755111		sta	sb|7,x1		" Word
aa 001612  600144 234100  91		szn	sp|100		" Listing
aa 001613  000015 600004		tze	L177
aa 001614  700007 236111  92		ldq	sb|7,x1		" Word
aa 001615  700020 756111		stq	sb|16,x1
aa 001616  600520 236100		ldq	sp|336		" Param
aa 001617  700021 756111		stq	sb|17,x1
4a 001620  400010 272120		tsbbp	lp|L178,*		" WriteInstruction
aa 001621  000016 000002		zero	14,2
aa 001622  600040 236100  93		ldq	sp|32		" OUTPUT
aa 001623  700020 756111		stq	sb|16,x1
aa 001624  000012 236007		ldq	10,dl		" '*n'
aa 001625  700021 756111		stq	sb|17,x1
4a 001626  400012 272120		tsbbp	lp|L161,*		" Writech
aa 001627  000016 000002		zero	14,2
			L177:
aa 001630  700007 236111  95		ldq	sb|7,x1		" Word
aa 001631  700020 756111		stq	sb|16,x1
aa 001632  000002 236007		ldq	2,dl		" InstructionSwitch
aa 001633  700021 756111		stq	sb|17,x1
aa 001634  776417 272004		tsbbp	L23+2		" OutWord
aa 001635  000016 000002		zero	14,2
			L167:
aa 001636  700000 762111		lprpbp	sb|0,x1		" bcpl return
aa 001637  200000 121100		sblx1	bp|0
aa 001640  700001 764111		lprplp	sb|1,x1
aa 001641  200001 710100		tra	bp|1		" end of return sequence

	"	Literal pool

			L173:
aa 001642  400000 000100		zero	-131072,64	" Lp
			L172:
aa 001643  700000 000100		zero	-32768,64		" TagPrMask
	"	Begin text of OutW2

aa 001644  000005 117165		zero	5,40565		" OutW2
aa 001645  164127 062000		zero	59479,25600
			L42:
aa 001646  000000 213000  77		epaq	0		" set lp to linkage section
aa 001647  700026 764161		lprplp	sb|22,*au
aa 001650  200000 021100		adlx1	bp|0		" BCPL save
aa 001651  700000 542111		sprpbp	sb|0,x1
aa 001652  700001 544111		sprplp	sb|1,x1
aa 001653  700422 620111		eax0	sb|274,x1
aa 001654  777760 360003		anx0	-16,du
aa 001655  700025 740100		stx0	sb|21		" end of save sequence

aa 001656  700003 236111  78		ldq	sb|3,x1		" c
aa 001657  600464 756100		stq	sp|308		" Comment
aa 001660  700002 236111  79		ldq	sb|2,x1		" x
aa 001661  700006 756111		stq	sb|6,x1
aa 001662  000012 272004		tsbbp	L41+2		" OutW
aa 001663  000004 000001		zero	4,1
			L181:
aa 001664  700000 762111		lprpbp	sb|0,x1		" bcpl return
aa 001665  200000 121100		sblx1	bp|0
aa 001666  700001 764111		lprplp	sb|1,x1
aa 001667  200001 710100		tra	bp|1		" end of return sequence
	"	Begin text of OutW

aa 001670  000004 117165		zero	4,40565		" OutW
aa 001671  164127 000000		zero	59479
			L41:
aa 001672  000000 213000  73		epaq	0		" set lp to linkage section
aa 001673  700026 764161		lprplp	sb|22,*au
aa 001674  200000 021100		adlx1	bp|0		" BCPL save
aa 001675  700000 542111		sprpbp	sb|0,x1
aa 001676  700001 544111		sprplp	sb|1,x1
aa 001677  700423 620111		eax0	sb|275,x1
aa 001700  777760 360003		anx0	-16,du
aa 001701  700025 740100		stx0	sb|21		" end of save sequence

aa 001702  600474 234100  74		szn	sp|316		" Jumpsw
aa 001703  000007 601004		tnz	L184
aa 001704  700002 236111  75		ldq	sb|2,x1		" x
aa 001705  700006 756111		stq	sb|6,x1
aa 001706  000001 236007		ldq	1,dl		" CodeSwitch
aa 001707  700007 756111		stq	sb|7,x1
aa 001710  776343 272004		tsbbp	L23+2		" OutWord
aa 001711  000004 000002		zero	4,2
			L184:
aa 001712  700000 762111		lprpbp	sb|0,x1		" bcpl return
aa 001713  200000 121100		sblx1	bp|0
aa 001714  700001 764111		lprplp	sb|1,x1
aa 001715  200001 710100		tra	bp|1		" end of return sequence
	"	Definition section part one - external entry points

5a 000000  000055 000000		" pointer to first definition
aa 000001  000000 600000		" flags: new format, ignore header
aa 000002  000000 000000		" list terminator

aa 000003  010142 143160		" "bcpl_cg5"
aa 000004  154137 143147
aa 000005  065000 000000
aa 000006  011103 150145		" "CheckAddr"
aa 000007  143153 101144
aa 000010  144162 000000
aa 000011  007106 157162		" "FormTag"
aa 000012  155124 141147
aa 000013  012106 157162		" "FormOpcode"
aa 000014  155117 160143
aa 000015  157144 145000
aa 000016  007117 165164		" "OutData"
aa 000017  104141 164141
aa 000020  006117 165164		" "Outop4"
aa 000021  157160 064000
aa 000022  006117 165164		" "Outop3"
aa 000023  157160 063000
aa 000024  006117 165164		" "Outop2"
aa 000025  157160 062000
aa 000026  005117 165164		" "Outop"
aa 000027  157160 000000
aa 000030  005117 165164		" "OutW2"
aa 000031  127062 000000
aa 000032  004117 165164		" "OutW"
aa 000033  127000 000000
aa 000034  015123 145143		" "SectionHeader"
aa 000035  164151 157156
aa 000036  110145 141144
aa 000037  145162 000000
aa 000040  015123 145164		" "SetLineNumber"
aa 000041  114151 156145
aa 000042  116165 155142
aa 000043  145162 000000
aa 000044  007120 165164		" "PutCode"
aa 000045  103157 144145
aa 000046  012120 165164		" "PutAbsBits"
aa 000047  101142 163102
aa 000050  151164 163000
aa 000051  014163 171155		" "symbol_table"
aa 000052  142157 154137
aa 000053  164141 142154
aa 000054  145000 000000

	"	Segname definition for bcpl_cg5

55 000055  000060 000002		" forward, backward threads
5a 000056  000002 400003		" value defined, class flags
55 000057  000003 000060		" name pointer, first entry def

	"	Definition for CheckAddr

55 000060  000063 000055		" forward, backward threads
0a 000061  001315 500000		" value defined, class flags
55 000062  000006 000055		" name pointer, segname def pointer

	"	Definition for FormTag

55 000063  000066 000060		" forward, backward threads
0a 000064  001151 500000		" value defined, class flags
55 000065  000011 000055		" name pointer, segname def pointer

	"	Definition for FormOpcode

55 000066  000071 000063		" forward, backward threads
0a 000067  000505 500000		" value defined, class flags
55 000070  000013 000055		" name pointer, segname def pointer

	"	Definition for OutData

55 000071  000074 000066		" forward, backward threads
0a 000072  001420 500000		" value defined, class flags
55 000073  000016 000055		" name pointer, segname def pointer

	"	Definition for Outop4

55 000074  000077 000071		" forward, backward threads
0a 000075  000451 500000		" value defined, class flags
55 000076  000020 000055		" name pointer, segname def pointer

	"	Definition for Outop3

55 000077  000102 000074		" forward, backward threads
0a 000100  001464 500000		" value defined, class flags
55 000101  000022 000055		" name pointer, segname def pointer

	"	Definition for Outop2

55 000102  000105 000077		" forward, backward threads
0a 000103  000423 500000		" value defined, class flags
55 000104  000024 000055		" name pointer, segname def pointer

	"	Definition for Outop

55 000105  000110 000102		" forward, backward threads
0a 000106  001515 500000		" value defined, class flags
55 000107  000026 000055		" name pointer, segname def pointer

	"	Definition for OutW2

55 000110  000113 000105		" forward, backward threads
0a 000111  001646 500000		" value defined, class flags
55 000112  000030 000055		" name pointer, segname def pointer

	"	Definition for OutW

55 000113  000116 000110		" forward, backward threads
0a 000114  001672 500000		" value defined, class flags
55 000115  000032 000055		" name pointer, segname def pointer

	"	Definition for SectionHeader

55 000116  000121 000113		" forward, backward threads
0a 000117  000376 500000		" value defined, class flags
55 000120  000034 000055		" name pointer, segname def pointer

	"	Definition for SetLineNumber

55 000121  000124 000116		" forward, backward threads
0a 000122  000321 500000		" value defined, class flags
55 000123  000040 000055		" name pointer, segname def pointer

	"	Definition for PutCode

55 000124  000127 000121		" forward, backward threads
0a 000125  000170 500000		" value defined, class flags
55 000126  000044 000055		" name pointer, segname def pointer

	"	Definition for PutAbsBits

55 000127  000132 000124		" forward, backward threads
0a 000130  000066 500000		" value defined, class flags
55 000131  000046 000055		" name pointer, segname def pointer

	"	Definition for symbol_table

55 000132  000002 000127		" forward, backward threads
6a 000133  000000 400002		" value defined, class flags
55 000134  000051 000055		" name pointer, segname def pointer
	"	Definition section part two - symbolic info for external references

aa 000135  010142 143160		" "bcpl_cg9"
aa 000136  154137 143147
aa 000137  071000 000000
aa 000140  020127 162151		" "WriteInstruction"
aa 000141  164145 111156
aa 000142  163164 162165
aa 000143  143164 151157
aa 000144  156000 000000
5a 000145  000146 000000
aa 000146  000004 000000
55 000147  000135 000140
aa 000150  022142 143160		" "bcpl_machine_code_"
aa 000151  154137 155141
aa 000152  143150 151156
aa 000153  145137 143157
aa 000154  144145 137000
aa 000155  007127 162151		" "Writech"
aa 000156  164145 143150
5a 000157  000160 000000
aa 000160  000004 000000
55 000161  000150 000155
aa 000162  011127 162151		" "WriteData"
aa 000163  164145 104141
aa 000164  164141 000000
5a 000165  000166 000000
aa 000166  000004 000000
55 000167  000135 000162
aa 000170  013142 143160		" "bcpl_report"
aa 000171  154137 162145
aa 000172  160157 162164
aa 000173  010103 107162		" "CGreport"
aa 000174  145160 157162
aa 000175  164000 000000
5a 000176  000177 000000
aa 000177  000004 000000
55 000200  000170 000173
aa 000201  014142 143160		" "bcpl_utility"
aa 000202  154137 165164
aa 000203  151154 151164
aa 000204  171000 000000
aa 000205  006116 145167		" "Newvec"
aa 000206  166145 143000
5a 000207  000210 000000
aa 000210  000004 000000
55 000211  000201 000205
	"	Linkage section - static variables and external links

aa 000000  000000 000000		" linkage header
0a 000001  001716 000000		" address of defs
aa 000002  000000 000000
aa 000003  000000 000000
aa 000004  000000 000000
aa 000005  000000 000000
2a 000006  000010 000022		" offset to links, total length
aa 000007  000000 000022		" obsolete length

	"	External link pairs

			L178:
3a 000010  777770 000046		" "bcpl_cg9$WriteInstruction"
5a 000011  000145 000000
			L161:
3a 000012  777766 000046		" "bcpl_machine_code_$Writech"
5a 000013  000157 000000
			L160:
3a 000014  777764 000046		" "bcpl_cg9$WriteData"
5a 000015  000165 000000
			L111:
3a 000016  777762 000046		" "bcpl_report$CGreport"
5a 000017  000176 000000
			L9:
3a 000020  777760 000046		" "bcpl_utility$Newvec"
5a 000021  000207 000000
	"	Symbol section header

aa 000000  000000 000001		" version number of header structure
aa 000001  163171 155142		" "symbtree"
aa 000002  164162 145145
aa 000003  000000 000003		" compiler version number
aa 000004  000000 101170		" date/time compiler modified
aa 000005  533311 032072		" 09/25/73  0959.1 mst Tue
aa 000006  000000 102333		" time of this compilation
aa 000007  436212 114053		" 01/24/75  0655.7 mst Fri
aa 000010  142143 160154		" "bcpl    "
aa 000011  040040 040040
aa 000012  000056 000035		" compiler version name - pointer, length
aa 000013  000066 000024		" user id - pointer, length
aa 000014  000073 000043		" comment string - pointer, length
aa 000015  000002 000002		" text and linkage boundaries
aa 000016  000024 000000		" source map, symbol tree root
7a 000017  000000 000175		" section header pointer, block size
aa 000020  000000 000175		" next block pointer, rel_text
aa 000021  000000 000211		" rel_def, rel_link
aa 000022  000216 000175		" rel_symbol, default truncate
aa 000023  000024 000000		" optional truncate, unused
aa 000024  000000 000001		" source files map: version number
aa 000025  000000 000006		"                   number of files
aa 000026  000104 000047		" bcpl_cg5
aa 000027  023333 611407		" last modified on
aa 000030  000000 102333		" 01/24/75  0647.2 mst Fri
aa 000031  432366 600000
aa 000032  000116 000043		" bcpl_cg_head
aa 000033  021607 540213		" last modified on
aa 000034  000000 101621		" 05/06/74  1740.6 mst Mon
aa 000035  351403 200000
aa 000036  000127 000051		" bcpl_compiler_head
aa 000037  021607 540214		" last modified on
aa 000040  000000 101621		" 05/06/74  1740.6 mst Mon
aa 000041  351403 200000
aa 000042  000142 000043		" bcpl_symbols
aa 000043  021607 540223		" last modified on
aa 000044  000000 101621		" 05/06/74  1740.8 mst Mon
aa 000045  351474 000000
aa 000046  000153 000044		" bcpl_cg_codes
aa 000047  021607 540212		" last modified on
aa 000050  000000 101621		" 05/06/74  1740.6 mst Mon
aa 000051  351402 400000
aa 000052  000164 000043		" bcpl_opcodes
aa 000053  021607 540221		" last modified on
aa 000054  000000 101621		" 05/06/74  1740.8 mst Mon
aa 000055  351474 000000
aa 000056  102103 120114		" "BCPL version 3.4, August 1973"
aa 000057  040166 145162
aa 000060  163151 157156
aa 000061  040063 056064
aa 000062  054040 101165
aa 000063  147165 163164
aa 000064  040061 071067
aa 000065  063040 040040
aa 000066  115141 162164		" "Martinson.SysMaint.a"
aa 000067  151156 163157
aa 000070  156056 123171
aa 000071  163115 141151
aa 000072  156164 056141
aa 000073  163157 165162		" "source  xref  alist  optimize  6180"
aa 000074  143145 040040
aa 000075  170162 145146
aa 000076  040040 141154
aa 000077  151163 164040
aa 000100  040157 160164
aa 000101  151155 151172
aa 000102  145040 040066
aa 000103  061070 060040
aa 000104  076062 056061		" ">2.1spec>online>mib083074>bcpl_cg5.bcpl"
aa 000105  163160 145143
aa 000106  076157 156154
aa 000107  151156 145076
aa 000110  155151 142060
aa 000111  070063 060067
aa 000112  064076 142143
aa 000113  160154 137143
aa 000114  147065 056142
aa 000115  143160 154040
aa 000116  076154 144144		" ">ldd>include>bcpl_cg_head.incl.bcpl"
aa 000117  076151 156143
aa 000120  154165 144145
aa 000121  076142 143160
aa 000122  154137 143147
aa 000123  137150 145141
aa 000124  144056 151156
aa 000125  143154 056142
aa 000126  143160 154040
aa 000127  076154 144144		" ">ldd>include>bcpl_compiler_head.incl.bcpl"
aa 000130  076151 156143
aa 000131  154165 144145
aa 000132  076142 143160
aa 000133  154137 143157
aa 000134  155160 151154
aa 000135  145162 137150
aa 000136  145141 144056
aa 000137  151156 143154
aa 000140  056142 143160
aa 000141  154040 040040
aa 000142  076154 144144		" ">ldd>include>bcpl_symbols.incl.bcpl"
aa 000143  076151 156143
aa 000144  154165 144145
aa 000145  076142 143160
aa 000146  154137 163171
aa 000147  155142 157154
aa 000150  163056 151156
aa 000151  143154 056142
aa 000152  143160 154040
aa 000153  076154 144144		" ">ldd>include>bcpl_cg_codes.incl.bcpl"
aa 000154  076151 156143
aa 000155  154165 144145
aa 000156  076142 143160
aa 000157  154137 143147
aa 000160  137143 157144
aa 000161  145163 056151
aa 000162  156143 154056
aa 000163  142143 160154
aa 000164  076154 144144		" ">ldd>include>bcpl_opcodes.incl.bcpl"
aa 000165  076151 156143
aa 000166  154165 144145
aa 000167  076142 143160
aa 000170  154137 157160
aa 000171  143157 144145
aa 000172  163056 151156
aa 000173  143154 056142
aa 000174  143160 154040
	"	Relocation information


	"	text section relocation bits

aa 000175  000000 000002		" version number of rel-bits structure
aa 000176  000000 000537		" length in bits
aa 000177  741005 170623
aa 000200  236142 647446
aa 000201  541704 130360
aa 000202  226004 170143
aa 000203  002074 125401
aa 000204  036070 647417
aa 000205  751700 430360
aa 000206  716474 201500
aa 000207  002474 323500
aa 000210  002474 157000
l	"	inkage relocation bits

aa 000211  000000 000002		" version number of rel-bits structure
aa 000212  000000 000124		" length in bits
aa 000213  100002 204652
aa 000214  465246 524652
aa 000215  465200 000000
s	"	ymbol relocation bits

aa 000216  000000 000002		" version number of rel-bits structure
aa 000217  000000 000043		" length in bits
aa 000220  740365 770666
	"	Object map

aa 002373  000000 000001		" version number of object_map structure
aa 002374  157142 152137		" "obj_map "
aa 002375  155141 160040
aa 002376  000000 001716		" text offset, length
aa 002377  001716 000212		" def offset, length
aa 002400  002130 000022		" link offset, length
aa 002401  002152 000221		" symbol offset, length
aa 002402  000000 000000		" break map offset, length
aa 002403  340000 000000		" flags: ^bound, relocatable, procedure, standard
aa 002404  002373 000000		" object map pointer, unused


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
