	COMPILATION LISTING OF SEGMENT convert_MR10_2_pnt
	Compiled by: Multics PL/I Compiler, Release 28d, of October 4, 1983
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 12/05/84  1102.9 mst Wed
	    Options: optimize list

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 /* CONVERT_MR10_2_PNT: This program converts a MR10.2 PNT to an MR11 PNT.
        7*   MR11 PNTs use Version 3 MSTBs for better integrity and use a new format
        8*   PNT entry which accomodates longer passwords, AIM ranges, and a version
        9*   number (currently 2). */
       10 
       11 /* format: style2 */
       12 
       13 /* Written 1984-08-08 by E. Swenson */
       14 /* Modified 1984-09-18 by E. Swenson to use pnt_admin_gate_. */
       15 
       16 convert_MR10_2_pnt:
       17      procedure options (variable);
       18 
       19 /* Automatic */
       20 
       21 	dcl     argument_idx	 fixed bin (17);
       22 	dcl     argument_lth	 fixed bin (21);
       23 	dcl     argument_ptr	 ptr;
       24 	dcl     code		 fixed bin (35);
       25 	dcl     dirname		 char (168);
       26 	dcl     entryname		 char (32);
       27 	dcl     n_arguments		 fixed bin (17);
       28 	dcl     pathname		 char (168);
       29 
       30 /* Based */
       31 
       32 	dcl     argument		 char (argument_lth) based (argument_ptr);
       33 
       34 /* External Entries */
       35 
       36 	dcl     com_err_		 entry () options (variable);
       37 	dcl     cu_$arg_count	 entry (fixed bin, fixed bin (35));
       38 	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
       39 	dcl     expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35));
       40 	dcl     ioa_		 entry options (variable);
       41 	dcl     pnt_admin_gate_$convert_v2_pnt
       42 				 entry (char (*), char (*), fixed bin (35));
       43 	dcl     pathname_		 entry (char (*), char (*)) returns (char (168));
       44 
       45 /* Constant */
       46 
       47 	dcl     ME		 char (32) initial ("convert_MR10_2_pnt") internal static options (constant);
       48 
       49 /* Program */
       50 
       51 	call cu_$arg_count (n_arguments, code);
       52 	if code ^= 0
       53 	then do;
       54 		call com_err_ (code, ME);
       55 		return;
       56 	     end;
       57 
       58 	if n_arguments = 0
       59 	then do;
       60 		call com_err_ (0, ME, "Usage: ^a pathname_of_pnt_to_convert", ME);
       61 		return;
       62 	     end;
       63 
       64 	call cu_$arg_ptr (1, argument_ptr, argument_lth, (0));
       65 	call expand_pathname_ (argument, dirname, entryname, code);
       66 	if code ^= 0
       67 	then do;
       68 		call com_err_ (code, ME, "^a", argument);
       69 		return;
       70 	     end;
       71 
       72 	pathname = pathname_ (dirname, entryname);
       73 
       74 	call ioa_ ("^a: Beginning conversion of ^a.", ME, pathname);
       75 	call pnt_admin_gate_$convert_v2_pnt (dirname, entryname, code);
       76 	if code ^= 0
       77 	then do;
       78 		call com_err_ (code, ME, "Converting ^a", pathname);
       79 		return;
       80 	     end;
       81 	call ioa_ ("^a: Finished conversion of ^a.", ME, pathname);
       82 	return;
       83 
       84      end convert_MR10_2_pnt;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    12/05/84  0854.0  convert_MR10_2_pnt.pl1            >special_ldd>temp>as>convert_MR10_2_pnt.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
ME                              000000 constant        char(32)                 initial unaligned dcl 47 set ref 54* 60* 60* 68* 74*
                                                                                  78* 81*
argument                               based           char                     unaligned dcl 32 set ref 65* 68*
argument_lth                    000100 automatic       fixed bin(21,0)          dcl 22 set ref 64* 65 65 68 68
argument_ptr                    000102 automatic       pointer                  dcl 23 set ref 64* 65 68
code                            000104 automatic       fixed bin(35,0)          dcl 24 set ref 51* 52 54* 65* 66 68* 75* 76 78*
com_err_                        000010 constant        entry                    external dcl 36 ref 54 60 68 78
cu_$arg_count                   000012 constant        entry                    external dcl 37 ref 51
cu_$arg_ptr                     000014 constant        entry                    external dcl 38 ref 64
dirname                         000105 automatic       char(168)                unaligned dcl 25 set ref 65* 72* 75*
entryname                       000157 automatic       char(32)                 unaligned dcl 26 set ref 65* 72* 75*
expand_pathname_                000016 constant        entry                    external dcl 39 ref 65
ioa_                            000020 constant        entry                    external dcl 40 ref 74 81
n_arguments                     000167 automatic       fixed bin(17,0)          dcl 27 set ref 51* 58
pathname                        000170 automatic       char(168)                unaligned dcl 28 set ref 72* 74* 78* 81*
pathname_                       000024 constant        entry                    external dcl 43 ref 72
pnt_admin_gate_$convert_v2_pnt  000022 constant        entry                    external dcl 41 ref 75

NAME DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
argument_idx                           automatic       fixed bin(17,0)          dcl 21

NAME DECLARED BY EXPLICIT CONTEXT.
convert_MR10_2_pnt              000060 constant        entry                    external dcl 16

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       532         560     423         542
Length       742     423        26         145     106           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
convert_MR10_2_pnt                  198 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
convert_MR10_2_pnt       000100 argument_lth                convert_MR10_2_pnt
                         000102 argument_ptr                convert_MR10_2_pnt
                         000104 code                        convert_MR10_2_pnt
                         000105 dirname                     convert_MR10_2_pnt
                         000157 entryname                   convert_MR10_2_pnt
                         000167 n_arguments                 convert_MR10_2_pnt
                         000170 pathname                    convert_MR10_2_pnt

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return              ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      cu_$arg_count                 cu_$arg_ptr                   expand_pathname_
ioa_                          pathname_                     pnt_admin_gate_$convert_v2_pnt

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.


CONSTANTS
000000  aa  143 157 156 166	conv
000001  aa  145 162 164 137	ert_
000002  aa  115 122 061 060	MR10
000003  aa  137 062 137 160	_2_p
000004  aa  156 164 040 040	nt  
000005  aa  040 040 040 040	    
000006  aa  040 040 040 040	    
000007  aa  040 040 040 040	    

000010  aa     524000000036

000011  aa     524000000015

000012  aa     524000000037

000013  aa     524000000002

000014  aa     526000000000

000015  aa     524000000044

000016  aa     404000000005

000017  aa     526000000040

000020  aa     404000000043

000021  aa     526000000250

000022  aa  103 157 156 166	Conv
000023  aa  145 162 164 151	erti
000024  aa  156 147 040 136	ng ^
000025  aa  141 000 000 000	a

000026  aa  136 141 072 040	^a: 
000027  aa  106 151 156 151	Fini
000030  aa  163 150 145 144	shed
000031  aa  040 143 157 156	 con
000032  aa  166 145 162 163	vers
000033  aa  151 157 156 040	ion 
000034  aa  157 146 040 136	of ^
000035  aa  141 056 000 000	a.

000036  aa  136 141 072 040	^a: 
000037  aa  102 145 147 151	Begi
000040  aa  156 156 151 156	nnin
000041  aa  147 040 143 157	g co
000042  aa  156 166 145 162	nver
000043  aa  163 151 157 156	sion
000044  aa  040 157 146 040	 of 
000045  aa  136 141 056 000	^a.

000046  aa  125 163 141 147	Usag
000047  aa  145 072 040 136	e: ^
000050  aa  141 040 160 141	a pa
000051  aa  164 150 156 141	thna
000052  aa  155 145 137 157	me_o
000053  aa  146 137 160 156	f_pn
000054  aa  164 137 164 157	t_to
000055  aa  137 143 157 156	_con
000056  aa  166 145 162 164	vert

BEGIN PROCEDURE convert_MR10_2_pnt
ENTRY TO convert_MR10_2_pnt                                 STATEMENT 1 ON LINE 16
convert_MR10_2_pnt:
     procedure options (variable);

000057  da     000102240000
000060  aa   000320 6270 00	eax7 	208
000061  aa  7 00034 3521 20	epp2 	pr7|28,*
000062  aa  2 01045 2721 00	tsp2 	pr2|549		ext_entry
000063  aa     000000000000
000064  aa     000000000000
						STATEMENT 1 ON LINE 51
	call cu_$arg_count (n_arguments, code);

000065  aa  6 00167 3521 00	epp2 	pr6|119		n_arguments
000066  aa  6 00244 2521 00	spri2	pr6|164
000067  aa  6 00104 3521 00	epp2 	pr6|68		code
000070  aa  6 00246 2521 00	spri2	pr6|166
000071  aa  6 00242 6211 00	eax1 	pr6|162
000072  aa   010000 4310 07	fld  	4096,dl
000073  la  4 00012 3521 20	epp2 	pr4|10,*		cu_$arg_count
000074  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 52
	if code ^= 0
	then do;

000075  aa  6 00104 2361 00	ldq  	pr6|68		code
000076  aa   000017 6000 04	tze  	15,ic		000115
						STATEMENT 1 ON LINE 54
		call com_err_ (code, ME);

000077  aa  6 00104 3521 00	epp2 	pr6|68		code
000100  aa  6 00252 2521 00	spri2	pr6|170
000101  aa   777677 3520 04	epp2 	-65,ic		000000 = 143157156166
000102  aa  6 00254 2521 00	spri2	pr6|172
000103  aa   777715 3520 04	epp2 	-51,ic		000020 = 404000000043
000104  aa  6 00256 2521 00	spri2	pr6|174
000105  aa   777712 3520 04	epp2 	-54,ic		000017 = 526000000040
000106  aa  6 00260 2521 00	spri2	pr6|176
000107  aa  6 00250 6211 00	eax1 	pr6|168
000110  aa   010000 4310 07	fld  	4096,dl
000111  aa  6 00044 3701 20	epp4 	pr6|36,*
000112  la  4 00010 3521 20	epp2 	pr4|8,*		com_err_
000113  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 55
		return;

000114  aa  0 00631 7101 00	tra  	pr0|409		return
						STATEMENT 1 ON LINE 56
	     end;

						STATEMENT 1 ON LINE 58
	if n_arguments = 0
	then do;

000115  aa  6 00167 2361 00	ldq  	pr6|119		n_arguments
000116  aa   000032 6010 04	tnz  	26,ic		000150
						STATEMENT 1 ON LINE 60
		call com_err_ (0, ME, "Usage: ^a pathname_of_pnt_to_convert", ME);

000117  aa  6 00262 4501 00	stz  	pr6|178
000120  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
000121  aa   777726 00 0044	desc9a	-42,36		000046 = 125163141147
000122  aa  6 00250 00 0044	desc9a	pr6|168,36
000123  aa  6 00262 3521 00	epp2 	pr6|178
000124  aa  6 00266 2521 00	spri2	pr6|182
000125  aa   777653 3520 04	epp2 	-85,ic		000000 = 143157156166
000126  aa  6 00270 2521 00	spri2	pr6|184
000127  aa  6 00250 3521 00	epp2 	pr6|168
000130  aa  6 00272 2521 00	spri2	pr6|186
000131  aa   777647 3520 04	epp2 	-89,ic		000000 = 143157156166
000132  aa  6 00274 2521 00	spri2	pr6|188
000133  aa   777663 3520 04	epp2 	-77,ic		000016 = 404000000005
000134  aa  6 00276 2521 00	spri2	pr6|190
000135  aa   777662 3520 04	epp2 	-78,ic		000017 = 526000000040
000136  aa  6 00300 2521 00	spri2	pr6|192
000137  aa  6 00304 2521 00	spri2	pr6|196
000140  aa   777655 3520 04	epp2 	-83,ic		000015 = 524000000044
000141  aa  6 00302 2521 00	spri2	pr6|194
000142  aa  6 00264 6211 00	eax1 	pr6|180
000143  aa   020000 4310 07	fld  	8192,dl
000144  aa  6 00044 3701 20	epp4 	pr6|36,*
000145  la  4 00010 3521 20	epp2 	pr4|8,*		com_err_
000146  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 61
		return;

000147  aa  0 00631 7101 00	tra  	pr0|409		return
						STATEMENT 1 ON LINE 62
	     end;

						STATEMENT 1 ON LINE 64
	call cu_$arg_ptr (1, argument_ptr, argument_lth, (0));

000150  aa   000001 2360 07	ldq  	1,dl
000151  aa  6 00262 7561 00	stq  	pr6|178
000152  aa  6 00263 4501 00	stz  	pr6|179
000153  aa  6 00262 3521 00	epp2 	pr6|178
000154  aa  6 00252 2521 00	spri2	pr6|170
000155  aa  6 00102 3521 00	epp2 	pr6|66		argument_ptr
000156  aa  6 00254 2521 00	spri2	pr6|172
000157  aa  6 00100 3521 00	epp2 	pr6|64		argument_lth
000160  aa  6 00256 2521 00	spri2	pr6|174
000161  aa  6 00263 3521 00	epp2 	pr6|179
000162  aa  6 00260 2521 00	spri2	pr6|176
000163  aa  6 00250 6211 00	eax1 	pr6|168
000164  aa   020000 4310 07	fld  	8192,dl
000165  aa  6 00044 3701 20	epp4 	pr6|36,*
000166  la  4 00014 3521 20	epp2 	pr4|12,*		cu_$arg_ptr
000167  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 65
	call expand_pathname_ (argument, dirname, entryname, code);

000170  aa  6 00100 2361 00	ldq  	pr6|64		argument_lth
000171  aa   526000 2760 03	orq  	175104,du
000172  aa  6 00263 7561 00	stq  	pr6|179
000173  aa  6 00102 3521 20	epp2 	pr6|66,*		argument
000174  aa  6 00266 2521 00	spri2	pr6|182
000175  aa  6 00105 3521 00	epp2 	pr6|69		dirname
000176  aa  6 00270 2521 00	spri2	pr6|184
000177  aa  6 00157 3521 00	epp2 	pr6|111		entryname
000200  aa  6 00272 2521 00	spri2	pr6|186
000201  aa  6 00104 3521 00	epp2 	pr6|68		code
000202  aa  6 00274 2521 00	spri2	pr6|188
000203  aa  6 00263 3521 00	epp2 	pr6|179
000204  aa  6 00276 2521 00	spri2	pr6|190
000205  aa   777614 3520 04	epp2 	-116,ic		000021 = 526000000250
000206  aa  6 00300 2521 00	spri2	pr6|192
000207  aa   777610 3520 04	epp2 	-120,ic		000017 = 526000000040
000210  aa  6 00302 2521 00	spri2	pr6|194
000211  aa   777607 3520 04	epp2 	-121,ic		000020 = 404000000043
000212  aa  6 00304 2521 00	spri2	pr6|196
000213  aa  6 00264 6211 00	eax1 	pr6|180
000214  aa   020000 4310 07	fld  	8192,dl
000215  aa  6 00044 3701 20	epp4 	pr6|36,*
000216  la  4 00016 3521 20	epp2 	pr4|14,*		expand_pathname_
000217  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 66
	if code ^= 0
	then do;

000220  aa  6 00104 2361 00	ldq  	pr6|68		code
000221  aa   000034 6000 04	tze  	28,ic		000255
						STATEMENT 1 ON LINE 68
		call com_err_ (code, ME, "^a", argument);

000222  aa  6 00100 2361 00	ldq  	pr6|64		argument_lth
000223  aa   526000 2760 03	orq  	175104,du
000224  aa  6 00263 7561 00	stq  	pr6|179
000225  aa   136141 2350 03	lda  	48225,du
000226  aa  6 00262 7551 00	sta  	pr6|178
000227  aa  6 00104 3521 00	epp2 	pr6|68		code
000230  aa  6 00266 2521 00	spri2	pr6|182
000231  aa   777547 3520 04	epp2 	-153,ic		000000 = 143157156166
000232  aa  6 00270 2521 00	spri2	pr6|184
000233  aa  6 00262 3521 00	epp2 	pr6|178
000234  aa  6 00272 2521 00	spri2	pr6|186
000235  aa  6 00102 3521 20	epp2 	pr6|66,*		argument
000236  aa  6 00274 2521 00	spri2	pr6|188
000237  aa   777561 3520 04	epp2 	-143,ic		000020 = 404000000043
000240  aa  6 00276 2521 00	spri2	pr6|190
000241  aa   777556 3520 04	epp2 	-146,ic		000017 = 526000000040
000242  aa  6 00300 2521 00	spri2	pr6|192
000243  aa   777550 3520 04	epp2 	-152,ic		000013 = 524000000002
000244  aa  6 00302 2521 00	spri2	pr6|194
000245  aa  6 00263 3521 00	epp2 	pr6|179
000246  aa  6 00304 2521 00	spri2	pr6|196
000247  aa  6 00264 6211 00	eax1 	pr6|180
000250  aa   020000 4310 07	fld  	8192,dl
000251  aa  6 00044 3701 20	epp4 	pr6|36,*
000252  la  4 00010 3521 20	epp2 	pr4|8,*		com_err_
000253  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 69
		return;

000254  aa  0 00631 7101 00	tra  	pr0|409		return
						STATEMENT 1 ON LINE 70
	     end;

						STATEMENT 1 ON LINE 72
	pathname = pathname_ (dirname, entryname);

000255  aa  6 00105 3521 00	epp2 	pr6|69		dirname
000256  aa  6 00266 2521 00	spri2	pr6|182
000257  aa  6 00157 3521 00	epp2 	pr6|111		entryname
000260  aa  6 00270 2521 00	spri2	pr6|184
000261  aa  6 00170 3521 00	epp2 	pr6|120		pathname
000262  aa  6 00272 2521 00	spri2	pr6|186
000263  aa   777536 3520 04	epp2 	-162,ic		000021 = 526000000250
000264  aa  6 00274 2521 00	spri2	pr6|188
000265  aa  6 00300 2521 00	spri2	pr6|192
000266  aa   777531 3520 04	epp2 	-167,ic		000017 = 526000000040
000267  aa  6 00276 2521 00	spri2	pr6|190
000270  aa  6 00264 6211 00	eax1 	pr6|180
000271  aa   014000 4310 07	fld  	6144,dl
000272  aa  6 00044 3701 20	epp4 	pr6|36,*
000273  la  4 00024 3521 20	epp2 	pr4|20,*		pathname_
000274  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 74
	call ioa_ ("^a: Beginning conversion of ^a.", ME, pathname);

000275  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
000276  aa   777541 00 0040	desc9a	-159,32		000036 = 136141072040
000277  aa  6 00250 00 0040	desc9a	pr6|168,32
000300  aa  6 00250 3521 00	epp2 	pr6|168
000301  aa  6 00266 2521 00	spri2	pr6|182
000302  aa   777476 3520 04	epp2 	-194,ic		000000 = 143157156166
000303  aa  6 00270 2521 00	spri2	pr6|184
000304  aa  6 00170 3521 00	epp2 	pr6|120		pathname
000305  aa  6 00272 2521 00	spri2	pr6|186
000306  aa   777504 3520 04	epp2 	-188,ic		000012 = 524000000037
000307  aa  6 00274 2521 00	spri2	pr6|188
000310  aa   777507 3520 04	epp2 	-185,ic		000017 = 526000000040
000311  aa  6 00276 2521 00	spri2	pr6|190
000312  aa   777507 3520 04	epp2 	-185,ic		000021 = 526000000250
000313  aa  6 00300 2521 00	spri2	pr6|192
000314  aa  6 00264 6211 00	eax1 	pr6|180
000315  aa   014000 4310 07	fld  	6144,dl
000316  aa  6 00044 3701 20	epp4 	pr6|36,*
000317  la  4 00020 3521 20	epp2 	pr4|16,*		ioa_
000320  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 75
	call pnt_admin_gate_$convert_v2_pnt (dirname, entryname, code);

000321  aa  6 00105 3521 00	epp2 	pr6|69		dirname
000322  aa  6 00266 2521 00	spri2	pr6|182
000323  aa  6 00157 3521 00	epp2 	pr6|111		entryname
000324  aa  6 00270 2521 00	spri2	pr6|184
000325  aa  6 00104 3521 00	epp2 	pr6|68		code
000326  aa  6 00272 2521 00	spri2	pr6|186
000327  aa   777472 3520 04	epp2 	-198,ic		000021 = 526000000250
000330  aa  6 00274 2521 00	spri2	pr6|188
000331  aa   777466 3520 04	epp2 	-202,ic		000017 = 526000000040
000332  aa  6 00276 2521 00	spri2	pr6|190
000333  aa   777465 3520 04	epp2 	-203,ic		000020 = 404000000043
000334  aa  6 00300 2521 00	spri2	pr6|192
000335  aa  6 00264 6211 00	eax1 	pr6|180
000336  aa   014000 4310 07	fld  	6144,dl
000337  aa  6 00044 3701 20	epp4 	pr6|36,*
000340  la  4 00022 3521 20	epp2 	pr4|18,*		pnt_admin_gate_$convert_v2_pnt
000341  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 76
	if code ^= 0
	then do;

000342  aa  6 00104 2361 00	ldq  	pr6|68		code
000343  aa   000033 6000 04	tze  	27,ic		000376
						STATEMENT 1 ON LINE 78
		call com_err_ (code, ME, "Converting ^a", pathname);

000344  aa   777456 2370 04	ldaq 	-210,ic		000022 = 103157156166 145162164151
000345  aa  6 00242 7571 00	staq 	pr6|162
000346  aa   777456 2370 04	ldaq 	-210,ic		000024 = 156147040136 141000000000
000347  aa  6 00244 7571 00	staq 	pr6|164
000350  aa  6 00104 3521 00	epp2 	pr6|68		code
000351  aa  6 00266 2521 00	spri2	pr6|182
000352  aa   777426 3520 04	epp2 	-234,ic		000000 = 143157156166
000353  aa  6 00270 2521 00	spri2	pr6|184
000354  aa  6 00242 3521 00	epp2 	pr6|162
000355  aa  6 00272 2521 00	spri2	pr6|186
000356  aa  6 00170 3521 00	epp2 	pr6|120		pathname
000357  aa  6 00274 2521 00	spri2	pr6|188
000360  aa   777440 3520 04	epp2 	-224,ic		000020 = 404000000043
000361  aa  6 00276 2521 00	spri2	pr6|190
000362  aa   777435 3520 04	epp2 	-227,ic		000017 = 526000000040
000363  aa  6 00300 2521 00	spri2	pr6|192
000364  aa   777425 3520 04	epp2 	-235,ic		000011 = 524000000015
000365  aa  6 00302 2521 00	spri2	pr6|194
000366  aa   777433 3520 04	epp2 	-229,ic		000021 = 526000000250
000367  aa  6 00304 2521 00	spri2	pr6|196
000370  aa  6 00264 6211 00	eax1 	pr6|180
000371  aa   020000 4310 07	fld  	8192,dl
000372  aa  6 00044 3701 20	epp4 	pr6|36,*
000373  la  4 00010 3521 20	epp2 	pr4|8,*		com_err_
000374  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 79
		return;

000375  aa  0 00631 7101 00	tra  	pr0|409		return
						STATEMENT 1 ON LINE 80
	     end;

						STATEMENT 1 ON LINE 81
	call ioa_ ("^a: Finished conversion of ^a.", ME, pathname);

000376  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
000377  aa   777430 00 0040	desc9a	-232,32		000026 = 136141072040
000400  aa  6 00250 00 0040	desc9a	pr6|168,32
000401  aa  6 00250 3521 00	epp2 	pr6|168
000402  aa  6 00266 2521 00	spri2	pr6|182
000403  aa   777375 3520 04	epp2 	-259,ic		000000 = 143157156166
000404  aa  6 00270 2521 00	spri2	pr6|184
000405  aa  6 00170 3521 00	epp2 	pr6|120		pathname
000406  aa  6 00272 2521 00	spri2	pr6|186
000407  aa   777401 3520 04	epp2 	-255,ic		000010 = 524000000036
000410  aa  6 00274 2521 00	spri2	pr6|188
000411  aa   777406 3520 04	epp2 	-250,ic		000017 = 526000000040
000412  aa  6 00276 2521 00	spri2	pr6|190
000413  aa   777406 3520 04	epp2 	-250,ic		000021 = 526000000250
000414  aa  6 00300 2521 00	spri2	pr6|192
000415  aa  6 00264 6211 00	eax1 	pr6|180
000416  aa   014000 4310 07	fld  	6144,dl
000417  aa  6 00044 3701 20	epp4 	pr6|36,*
000420  la  4 00020 3521 20	epp2 	pr4|16,*		ioa_
000421  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 82
	return;

000422  aa  0 00631 7101 00	tra  	pr0|409		return
						STATEMENT 1 ON LINE 84
     end convert_MR10_2_pnt;

  END PROCEDURE convert_MR10_2_pnt


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
