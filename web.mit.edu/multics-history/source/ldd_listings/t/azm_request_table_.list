ASSEMBLY LISTING OF SEGMENT >special_ldd>install>MR12.0-1206>azm_request_table_.alm          
ASSEMBLED ON:	11/05/86  1045.4 mst Wed
OPTIONS USED:	list 
ASSEMBLED BY:	ALM Version  6.7  October 1986  
ASSEMBLER CREATED:	10/08/86  1557.5 mst Wed

                                     1  " ***********************************************************
                                     2  " *                                                         *
                                     3  " * Copyright, (C) Honeywell Information Systems Inc., 1983 *
                                     4  " *                                                         *
                                     5  " ***********************************************************
                                     6  "	AZM_REQUEST_TABLE_
                                     7  "
                                     8  "	Request definitions for analyze_multics subsystem.
                                     9  "
                                    10  "	Initial coding: 09/07/80 W. Olin Sibert
                                    11  "
                                    12  "         Modified: 06/21/83 B.Braun 
                                    13  "	          to add/modify requests per MTB624 revision 1.
                                    14  "
                                    15  "         Modified: 08/14/84 B.Braun 
                                    16  "	          to add select_deadproc request per MTB665.
                                    17  "
    000000                          18  	name	azm_request_table_
                                    19  	include	ssu_request_macros
                                   1-1  " BEGIN INCLUDE FILE ... ssu_request_macros.incl.alm
                                   1-2  " Created:  5 May 1980 by W. Olin Sibert
                                   1-3  " Modified: 25 July 1980 by G. Palter to add multics_request macro
                                   1-4  " Modified: 1 December 1981 by G. Palter to remove user_flags
                                   1-5  " Modified: 12 February 1982 by G. Palter for version 4
                                   1-6  " Modified: 28 February 1982 by G. Palter to add dont_summarize and dont_list
                                   1-7  " Modified: 2 August 1982 by Jay Pattin to add unknown_request
                                   1-8  " Modified: 24 October 1984 by G. Palter to restore user flags and add the
                                   1-9  "    set_default_flags and set_default_multics_flags macros
                                  1-10  
                                  1-11  
                                  1-12  " ALM macros used to define subsystem request tables
                                  1-13  
                                  1-14  
                                  1-15  	macro	request_table_version
                              1   1-16  	aci	"srqt_4.0",8
                              2   1-17  	&end
                                  1-18  
                                  1-19  
                                  1-20  	macro	namelist
                              1   1-21  	maclist	off,save
                              2   1-22  	vfd	36/&K
                              3   1-23  &R&(	aci	@&i@,32
                              4   1-24  &)
                              5   1-25  	maclist	restore
                              6   1-26  	&end
                                  1-27  
                                  1-28  " 
                                  1-29  
                                  1-30  " System defined per-request flags
                                  1-31  
                        400000    1-32  	bool	flags.allow_command,400000	" valid as a command
                        200000    1-33  	bool	flags.allow_af,200000	" valid as an active function
                        600000    1-34  	bool	flags.allow_both,600000	" valid as both
                                  1-35  
                        100000    1-36  	bool	flags.unimplemented,100000	" request is not yet implemented
                        040000    1-37  	bool	flags.multics_request,040000	" request is actually a Multics command
                                  1-38  
                        020000    1-39  	bool	flags.dont_summarize,020000	" summarize_requests won't list it
                        010000    1-40  	bool	flags.dont_list,010000	" list_requests won't show it without -all
                                  1-41  
                        004000    1-42  	bool	flags.unknown,004000	" request is explicitly made unknown
                                  1-43  
                                  1-44  
                                  1-45  " Macros for setting per-request flags
                                  1-46  
                                  1-47  	macro	set_flags_loop
                              1   1-48  	maclist	off,save
                              2   1-49  &(3
                              3   1-50  &=&i,default&[	set_flags_loop	&1,(0),(&2)
                              4   1-51  &;	set	&1,&1+&i
                              5   1-52  &]&)
                              6   1-53  	maclist	restore
                              7   1-54  	&end
                                  1-55  
                                  1-56  
                                  1-57  	macro	set_flags
                              1   1-58  	maclist	off,save
                              2   1-59  	set	&1,0
                              3   1-60  &=&3,&[	set_flags_loop	&1,(0),(&2)
                              4   1-61  &;	set_flags_loop	&1,(&2),(&3)
                              5   1-62  &]
                              6   1-63  	maclist	restore
                              7   1-64  	&end
                                  1-65  
                                  1-66  " 
                                  1-67  
                                  1-68  "	set_default_flags {(system-flags)},{(user-flags)}
                                  1-69  
                                  1-70  " Sets the default system and/or user flags to be used for requests:
                                  1-71  "   system-flags: defines the default general nature of requests;" the default
                                  1-72  "      default is flags.allow_command
                                  1-73  "   user-flags:  defines the default setting for the subsystem specific flags
                                  1-74  "      associated with requests;" the default default is none (0)
                                  1-75  "   Note: If either system-flags or user-flags is ommitted, the default is not
                                  1-76  "      changed from its prior value.  This action allows the use of multiple
                                  1-77  "      set_default_flags macros within a table to change system or user
                                  1-78  "      flags without affecting the other defaults
                                  1-79  
                                  1-80  	macro	set_default_flags
                              1   1-81  	maclist	off,save
                              2   1-82  &^=&1,&[	set_flags	.dft_sf,(flags.allow_command),(&1)
                              3   1-83  &]
                              4   1-84  &^=&2,&[	set_flags	.dft_uf,(0),(&2)
                              5   1-85  &]
                              6   1-86  	maclist	restore
                              7   1-87  	&end
                                  1-88  
                                  1-89  
                                  1-90  "	set_default_multics_flags {(system-flags)},{(user-flags)}
                                  1-91  
                                  1-92  " Sets the default system and/or user flags to be used for Multics commands when used as requests:
                                  1-93  "   system-flags: defines the default general nature of Multics requests;" the
                                  1-94  "      default default is flags.allow_command+flags.allow_af
                                  1-95  "   user-flags:  defines the default setting for the subsystem specific flags
                                  1-96  "      associated with Multics requests;" the default default is none (0)
                                  1-97  "   Note: If either system-flags or user-flags is ommitted, the default is not
                                  1-98  "      changed from its prior value.  This action allows the use of multiple
                                  1-99  "      set_default_multics_flags macros within a table to change system or user
                                 1-100  "      flags without affecting the other defaults
                                 1-101  
                                 1-102  	macro	set_default_multics_flags
                              1  1-103  	maclist	off,save
                              2  1-104  &^=&1,&[	set_flags	.dft_mrsf,(flags.allow_command,flags.allow_af),(&1)
                              3  1-105  &]
                              4  1-106  &^=&2,&[	set_flags	.dft_mruf,(0),(&2)
                              5  1-107  &]
                              6  1-108  	maclist	restore
                              7  1-109  	&end
                                 1-110  
                                 1-111  " 
                                 1-112  
                                 1-113  	macro	.multics_request_doc
                              1  1-114  	null
                              2  1-115  	&end
                                 1-116  
                                 1-117  
                                 1-118  	macro	dft_multics_doc_lth
                              1  1-119  	set	.multics_doc_lth,0
                              2  1-120  	&end
                                 1-121  
                                 1-122  
                                 1-123  "	set_default_multics_doc (string)
                                 1-124  
                                 1-125  " Sets the default documentation to be used for Multics commands when used as requests:
                                 1-126  "   string: is the documentation string to be used for any subsequent requests defined by
                                 1-127  "      the multics_request_macro;" all occurences of "&1" in this string will be replaced by
                                 1-128  "      the actual name of the request;" Eg:
                                 1-129  "	set_default_multics_doc (Type '.. help &1' for more information.)
                                 1-130  
                                 1-131  	macro	set_default_multics_doc
                              1  1-132  	maclist	off,save
                              2  1-133  	macro	.multics_request_doc
                              3  1-134  	aci	@&1@
                              4  1-135  	&&end
                              5  1-136  	macro	dft_multics_doc_lth
                              6  1-137  	macro	.compute
                              7  1-138  	set	.multics_doc_lth,&&&&l1
                              8  1-139  	&&&&end
                              9  1-140  	.compute (&1)
                             10  1-141  	&&end
                             11  1-142  	maclist	restore
                             12  1-143  	&end
                                 1-144  
                                 1-145  " 
                                 1-146  
                                 1-147  "	begin_table tablename
                                 1-148  
                                 1-149  " Defines a subsystem request table (multiple tables may exist in a single object segment):
                                 1-150  "   tablename: the name by which this table may be referenced externally;" references to the
                                 1-151  "      table should be of the form segname$tablename where segname is the name of this
                                 1-152  "      object segment
                                 1-153  
                                 1-154  	macro	begin_table
                              1  1-155  	segdef	&1
                              2  1-156  	maclist	object,save
                              3  1-157  	use	tables
                              4  1-158  &1:	request_table_version
                              5  1-159  	aci	@&1@,32
                              6  1-160  	dup	6
                              7  1-161  	vfd	36/0
                              8  1-162  	dupend
                              9  1-163  	vfd	36/&1.rc
                             10  1-164  	maclist	off
                             11  1-165  	set	.rc,0
                             12  1-166  	set_default_flags (default),(default)
                             13  1-167  	set_default_multics_flags (default),(default)
                             14  1-168  	maclist	restore
                             15  1-169  	&end
                                 1-170  
                                 1-171  
                                 1-172  "	end_table	tablename
                                 1-173  
                                 1-174  " Indicates the end of a subsystem request table definition:
                                 1-175  "   tablename: the name of the table which has now been completely defined
                                 1-176  
                                 1-177  	macro	end_table
                              1  1-178  	maclist	off,save
                              2  1-179  	set	&1.rc,.rc
                              3  1-180  	maclist	restore
                              4  1-181  	&end
                                 1-182  
                                 1-183  " 
                                 1-184  
                                 1-185  "	request	name,processor,({abbreviations}),{(documentation)},
                                 1-186  "		 {(system-flags)},{(user-flags)}
                                 1-187  
                                 1-188  " Defines a subsystem request:
                                 1-189  "   name: the primary name of this request
                                 1-190  "   processor: the name of the procedure which actually executes this request;" it must be
                                 1-191  "      of the form segname$entryname
                                 1-192  "   abbreviations: is the list of defined abbreviations for this request
                                 1-193  "   documentation: a short string used by the list_requests request to explain this request
                                 1-194  "   system-flags: defines the general nature of this request;" the default is
                                 1-195  "      flags.allow_command
                                 1-196  "   user-flags: allows a subsystem to provide subsystem-specific information
                                 1-197  "      with the request's definition;" the default is none (0)
                                 1-198  
                                 1-199  	macro	request
                              1  1-200  	maclist	off,save
                              2  1-201  	set	.rc,.rc+1
                              3  1-202  	maclist	object
                              4  1-203  	use	tables
                              5  1-204  	vfd	18/&U.call,18/&U.names
                              6  1-205  &=&4,&[	vfd	36/0
                              7  1-206  &;	vfd	18/&U.info,18/&l4
                              8  1-207  	maclist	off
                              9  1-208  	use	info
                             10  1-209  &U.info:	aci	@&4@
                             11  1-210  &]
                             12  1-211  	use	tables
                             13  1-212  	set_flags	.sf,(.dft_sf),(&5)
                             14  1-213  	set_flags	.uf,(.dft_uf),(&6)
                             15  1-214  	maclist	object
                             16  1-215  	vfd	18/.sf,18/.uf
                             17  1-216  	maclist	off
                             18  1-217  	use	calls
                             19  1-218  &U.call:	epaq	*
                             20  1-219  	lprp4	7|stack_header.lot_ptr,*au
                             21  1-220  	call6	&2
                             22  1-221  	use	names
                             23  1-222  &U.names:	namelist	&1&^=&3,&[,&3&]
                             24  1-223  	maclist	restore
                             25  1-224  	&end
                                 1-225  
                                 1-226  " 
                                 1-227  
                                 1-228  "	unknown_request name,(abbreviations)
                                 1-229  
                                 1-230  " Defines an unknown request: used to make the utilities not recognize a request even though
                                 1-231  " it is defined in a later request table (such as ssu_request_tables_$standard_request):
                                 1-232  "   name: the primary name of the request to be marked as unknown
                                 1-233  "   abbreviations: is the list of defined abbreviations for this request
                                 1-234  
                                 1-235  	macro	unknown_request
                              1  1-236  	maclist	off,save
                              2  1-237  	set	.rc,.rc+1
                              3  1-238  	maclist	object
                              4  1-239  	use	tables
                              5  1-240  	vfd	18/&U.call,18/&U.names
                              6  1-241  	vfd	36/0
                              7  1-242  	vfd	18/flags.unknown,18/0
                              8  1-243  	maclist	off
                              9  1-244  	use	calls
                             10  1-245  &U.call:	epaq	*
                             11  1-246  	lprp4	7|stack_header.lot_ptr,*au
                             12  1-247  	call6	ssu_$unknown_request
                             13  1-248  	use	names
                             14  1-249  &U.names: namelist	&1&^=&2,&[,&2&]
                             15  1-250  	maclist	restore
                             16  1-251  	&end
                                 1-252  
                                 1-253  " 
                                 1-254  
                                 1-255  "	multics_request name,({abbreviations}),({documenation}),{procedure},
                                 1-256  "		       {(system-flags)},{(user-flags)}
                                 1-257  
                                 1-258  " Defines that a Multics command/AF may be used as a subsystem request:
                                 1-259  "   name: the primary name of this request (usually the name of the Multics command/AF)
                                 1-260  "   abbreviations: is the list of defined abbreviations for this request
                                 1-261  "   documentation: a short string used by the list_requests request to explain this request;
                                 1-262  "      if no documentation is provided, the documentation specified by a prior use of
                                 1-263  "      set_default_multics_doc is used
                                 1-264  "   procedure: the name of the Multics command/AF which is actually executed by this
                                 1-265  "      request;" it must be of the form segname$entryname;" if not given, the default is
                                 1-266  "      name$name
                                 1-267  "   system-flags: defines the general nature of this request;" the default is
                                 1-268  "      flags.allow_command+flags.allow_af
                                 1-269  "   user-flags: allows a subsystem to provide subsystem-specific information
                                 1-270  "      with the request's definition;" the default is none (0)
                                 1-271  
                                 1-272  	macro	multics_request
                              1  1-273  	maclist	off,save
                              2  1-274  	set	.rc,.rc+1
                              3  1-275  	maclist	object
                              4  1-276  	use	tables
                              5  1-277  	vfd	18/&U.call,18/&U.names
                              6  1-278  &=&3,&[	dft_multics_doc_lth &1,(&2),(&3),(&4),(&5),(&6)
                              7  1-279  	vfd	18/&U.info,18/.multics_doc_lth
                              8  1-280  &;	vfd	18/&U.info,18/&l3
                              9  1-281  &]
                             10  1-282  	maclist	off
                             11  1-283  	use	info
                             12  1-284  &U.info:
                             13  1-285  &=&3,&[	.multics_request_doc &1,(&2),(&3),(&4),(&5),(&6)
                             14  1-286  &;	aci	@&3@
                             15  1-287  &]
                             16  1-288  	use	tables
                             17  1-289  	maclist	object
                             18  1-290  	set_flags	.sf,(.dft_mrsf),(&5)
                             19  1-291  	set_flags	.uf,(.dft_mruf),(&6)
                             20  1-292  	maclist	object
                             21  1-293  	vfd	18/.sf+flags.multics_request,18/.uf
                             22  1-294  	maclist	off
                             23  1-295  	use	calls
                             24  1-296  &U.call:	epaq	*
                             25  1-297  	lprp4	7|stack_header.lot_ptr,*au
                             26  1-298  &=&4,&[	call6	&1$&1
                             27  1-299  &;	call6	&4
                             28  1-300  &]
                             29  1-301  	use	names
                             30  1-302  &U.names:	namelist	&1&^=&2,&[,&2&]
                             31  1-303  	maclist	restore
                             32  1-304  	&end
                                 1-305  
                                 1-306  " 
                                 1-307  
                                 1-308  " Required ALM statements to make this all work
                                 1-309  
                                 1-310  	use	tables
                                 1-311  	use	calls
                                 1-312  	use	names
                                 1-313  	use	info
                                 1-314  	join	/text/tables,calls,names,info
                                 1-315  
                                 1-316  	include	stack_header
                                   2-1  "	BEGIN INCLUDE FILE ... stack_header.incl.alm  3/72  Bill Silver
                                   2-2  "
                                   2-3  "	modified 7/76 by M. Weaver for *system links and more system use of areas
                                   2-4  "	modified 3/77 by M. Weaver  to add rnt_ptr
                                   2-5  "	modified 7/77 by S. Webber to add run_unit_depth and assign_linkage_ptr
                                   2-6  "	modified 6/83 by J. Ives to add trace_frames and in_trace.
                                   2-7  
                                   2-8  " HISTORY COMMENTS:
                                   2-9  "  1) change(86-06-24,DGHowe), approve(86-06-24,MCR7396),
                                  2-10  "     audit(86-08-05,Schroth), install(86-11-03,MR12.0-1206):
                                  2-11  "     added the heap_header_ptr definition
                                  2-12  "  2) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
                                  2-13  "     audit(86-10-10,Fawcett), install(86-11-03,MR12.0-1206):
                                  2-14  "     Modified to support control point management.  These changes were
                                  2-15  "     actually made in February 1985 by G. Palter.
                                  2-16  "  3) change(86-10-22,Fawcett), approve(86-10-22,MCR7473),
                                  2-17  "     audit(86-10-22,Farley), install(86-11-03,MR12.0-1206):
                                  2-18  "     Remove the old_lot pointer and replace it with cpm_data_ptr. Use the 18
                                  2-19  "     bit pad after cur_lot_size for the cpm_enabled. This was done to save
                                  2-20  "     some space int the stack header and change the cpd_ptr unal to
                                  2-21  "     cpm_data_ptr (ITS pair).
                                  2-22  "                                                      END HISTORY COMMENTS
                                  2-23  
                        000004    2-24  	equ	stack_header.cpm_data_ptr,4		ptr to control point for this stack
                        000006    2-25  	equ	stack_header.combined_stat_ptr,6	ptr to separate static area
                                  2-26  
                        000010    2-27  	equ	stack_header.clr_ptr,8		ptr to area containing linkage sections
                        000012    2-28  	equ	stack_header.max_lot_size,10		number of words allowed in lot (DU)
                        000012    2-29  	equ	stack_header.main_proc_invoked,10	nonzero if main proc was invoked in run unit (DL)
                        000012    2-30  	equ	stack_header.run_unit_depth,10	number of active run units stacked (DL)
                        000013    2-31  	equ	stack_header.cur_lot_size,11		DU number of words (entries) in lot
                        000013    2-32            equ	stack_header.cpm_enabled,11		DL  non-zero if control point management is enabled
                        000014    2-33  	equ	stack_header.system_free_ptr,12	ptr to system storage area
                        000016    2-34  	equ	stack_header.user_free_ptr,14		ptr to user storage area
                                  2-35  
                        000020    2-36  	equ	stack_header.parent_ptr,16		ptr to parent stack or null
                        000022    2-37  	equ	stack_header.stack_begin_ptr,18	ptr to first stack frame
                        000024    2-38  	equ	stack_header.stack_end_ptr,20		ptr to next useable stack frame
                        000026    2-39  	equ	stack_header.lot_ptr,22		ptr to the lot for the current ring
                                  2-40  
                        000030    2-41  	equ	stack_header.signal_ptr,24		ptr to signal proc for current ring
                        000032    2-42  	equ	stack_header.bar_mode_sp,26		value of sp before entering bar mode
                        000034    2-43  	equ	stack_header.pl1_operators_ptr,28	ptr: pl1_operators_$operator_table
                        000036    2-44  	equ	stack_header.call_op_ptr,30		ptr to standard call operator
                                  2-45  
                        000040    2-46  	equ	stack_header.push_op_ptr,32		ptr to standard push operator
                        000042    2-47  	equ	stack_header.return_op_ptr,34		ptr to standard return operator
                        000044    2-48  	equ	stack_header.ret_no_pop_op_ptr,36	ptr: stand. return/ no pop operator
                        000046    2-49  	equ	stack_header.entry_op_ptr,38		ptr to standard entry operator
                                  2-50  
                        000050    2-51  	equ	stack_header.trans_op_tv_ptr,40	ptr to table of translator operator ptrs
                        000052    2-52  	equ	stack_header.isot_ptr,42		pointer to ISOT
                        000054    2-53  	equ	stack_header.sct_ptr,44		pointer to System Condition Table
                        000056    2-54  	equ	stack_header.unwinder_ptr,46		pointer to unwinder for current ring
                                  2-55  
                        000060    2-56  	equ	stack_header.sys_link_info_ptr,48	ptr to *system link name table
                        000062    2-57  	equ	stack_header.rnt_ptr,50		ptr to reference name table
                        000064    2-58  	equ	stack_header.ect_ptr,52		ptr to event channel table
                        000066    2-59  	equ	stack_header.assign_linkage_ptr,54	ptr to area for hcs_$assign_linkage calls
                        000070    2-60  	equ	stack_header.heap_header_ptr,56	ptr to heap header.
                        000072    2-61  	equ	stack_header.trace_frames,58		stack of trace_catch_ frames
                        000073    2-62  	equ	stach_header.trace_top_ptr,59		trace pointer
                        000074    2-63  	equ	stack_header.in_trace,60		trace antirecurse bit
                        000100    2-64  	equ	stack_header_end,64			length of stack header
                                  2-65  
                                  2-66  
                                  2-67  
                                  2-68  
                        000000    2-69  	equ	trace_frames.count,0		number of trace frames on stack
                        000001    2-70  	equ	trace_frames.top_ptr,1		packed pointer to top one
                                  2-71  
                                  2-72  "	The  following constant is an offset within the  pl1  operators table.
                                  2-73  "	It  references a  transfer vector table.
                                  2-74  
                        000551    2-75  	bool	tv_offset,551
                                  2-76  
                                  2-77  
                                  2-78  "	The  following constants are offsets within this transfer vector table.
                                  2-79  
                        001170    2-80  	equ	call_offset,tv_offset+271
                        001171    2-81  	equ	push_offset,tv_offset+272
                        001172    2-82  	equ	return_offset,tv_offset+273
                        001173    2-83  	equ	return_no_pop_offset,tv_offset+274
                        001174    2-84  	equ	entry_offset,tv_offset+275
                                  2-85  
                                  2-86  
                                  2-87  " 	END INCLUDE FILE stack_header.incl.alm
                                 2-317  
                                 2-318  " END INCLUDE FILE ... ssu_request_macros.incl.alm
                                    20  
                                    21  	begin_table azm_request_table_
                        000000          	segdef	azm_request_table_
    000000  aa  163 162 161 164
    000001  aa  137 064 056 060
    000002  aa  141 172 155 137
    000003  aa  162 145 161 165
    000004  aa  145 163 164 137
    000005  aa  164 141 142 154
    000006  aa  145 137 040 040
    000007  aa  040 040 040 040
    000010  aa  040 040 040 040
    000011  aa  040 040 040 040
                        000006 
    000012  aa   000000 000000 
    000013  aa   000000 000000 
    000014  aa   000000 000000 
    000015  aa   000000 000000 
    000016  aa   000000 000000 
    000017  aa   000000 000000 
    000020  aa   000000 000052 
                                    22  
                                    23            request   absolute_address,azm_requests_2_$absolute_address, 
                                    24  		(absadr),
                                    25  		(Prints the absolute address of <virtual-addr>.),
                                    26  		flags.allow_both
    000021  00   000217 000415 
    000022  0a   001607 000056 
    000023  aa   600000 000000 
                                    27  
                                    28  	request	add_request_table,azm_requests_2_$add_request_table,
                                    29  		(arqt),
                                    30  		(Adds a request table for use.),
                                    31  		flags.allow_command
    000024  00   000222 000436 
    000025  0a   001623 000035 
    000026  aa   400000 000000 
                                    32  
                                    33  	request	apply,azm_requests_1_$extract_seg,(ap),
                                    34  		(Apply command to selected segment.),
                                    35  		flags.allow_command
    000027  00   000225 000457 
    000030  0a   001633 000042 
    000031  aa   400000 000000 
                                    36  
                                    37  	request	apte,azm_requests_1_$apte,
                                    38  		(),
                                    39  		(Print apte info.),
                                    40  		flags.allow_both
    000032  00   000230 000500 
    000033  0a   001644 000020 
    000034  aa   600000 000000 
                                    41  
                                    42  	request	associative_memory,azm_requests_2_$associative_memory,
                                    43  		(am),
                                    44  		(Display associative memory.),
                                    45  		flags.allow_command
    000035  00   000233 000511 
    000036  0a   001650 000033 
    000037  aa   400000 000000 
                                    46  
                                    47  	request   aste,azm_requests_1_$aste,
                                    48  		(),
                                    49  		(Print aste for <virtual-addr>.),
                                    50  		flags.allow_command
    000040  00   000236 000532 
    000041  0a   001657 000036 
    000042  aa   400000 000000 
                                    51       
                                    52  	request	clock,azm_requests_2_$clock,
                                    53  	          (),
                                    54  		(Interprets a Multics clock.),
                                    55  		flags.unimplemented+flags.dont_summarize+flags.dont_list
    000043  00   000241 000543 
    000044  0a   001667 000033 
    000045  aa   130000 000000 
                                    56  
                                    57  	request	configuration_deck,azm_requests_1_$config_deck,(cd),
                                    58  		(Print the config deck found in the FDUMP.),
                                    59  		flags.allow_command
    000046  00   000244 000554 
    000047  0a   001676 000051 
    000050  aa   400000 000000 
                                    60  
                                    61            request   delete_dump,azm_address_space_$delete_dump,
                                    62  		(dld),
                                    63  		(Deletes a dump given the ERF name.),
                                    64  		flags.unimplemented+flags.dont_summarize+flags.dont_list
    000051  00   000247 000575 
    000052  0a   001711 000042 
    000053  aa   130000 000000 
                                    65  
                                    66            request   delete_request_table,azm_requests_2_$delete_request_table,
                                    67  		(drqt),
                                    68  		(Deletes a request table from the request table list.),
                                    69  		flags.unimplemented+flags.dont_summarize+flags.dont_list
    000054  00   000252 000616 
    000055  0a   001722 000064 
    000056  aa   130000 000000 
                                    70  
                                    71  	request	display,azm_requests_1_$display,(d),
                                    72  		(Displays selected portions of segments or real memory.),
                                    73  		flags.allow_both
    000057  00   000255 000637 
    000060  0a   001737 000066 
    000061  aa   600000 000000 
                                    74  
                                    75  	request	display_absolute,azm_requests_1_$display_abs,
                                    76  		(da),
                                    77  		(Displays what's at a given absolute memory address.),
                                    78  		flags.allow_both
    000062  00   000260 000660 
    000063  0a   001755 000063 
    000064  aa   600000 000000 
                                    79  
                                    80  	request	error_code,azm_requests_2_$error_code,(err),
                                    81  		(Display a standard error_code.),
                                    82  		flags.unimplemented+flags.dont_summarize+flags.dont_list
    000065  00   000263 000701 
    000066  0a   001772 000036 
    000067  aa   130000 000000 
                                    83  
                                    84  	request	events,azm_requests_3_$events,(ev),
                                    85  		(Display dump events.),
                                    86  		flags.allow_command
    000070  00   000266 000722 
    000071  0a   002002 000024 
    000072  aa   400000 000000 
                                    87  
                                    88  	request	fdump_components,azm_address_space_$fdump_components,
                                    89  		(),
                                    90  		(Prints absolute pathnames of a FDUMP component.),
                                    91  		flags.unimplemented+flags.dont_summarize+flags.dont_list
    000073  00   000271 000743 
    000074  0a   002007 000057 
    000075  aa   130000 000000 
                                    92  
                                    93            request   frame,azm_stack_requests_$frame, 
                                    94  		(fr),
                                    95  		(Displays information from a single stack frame.),
                                    96  		flags.unimplemented+flags.dont_summarize+flags.dont_list
    000076  00   000274 000754 
    000077  0a   002023 000057 
    000100  aa   130000 000000 
                                    97  
                                    98  	request	history_regs,azm_requests_1_$history_regs,(hregs),
                                    99  		(Display CPU history registers.),
                                   100  		flags.allow_command
    000101  00   000277 000775 
    000102  0a   002037 000036 
    000103  aa   400000 000000 
                                   101  
                                   102            request   list_dumps,azm_address_space_$list_dumps,
                                   103  		(lsd),
                                   104  		(Lists dumps via the dumps search paths.),
                                   105  		flags.allow_command
    000104  00   000302 001016 
    000105  0a   002047 000047 
    000106  aa   400000 000000 
                                   106  
                                   107            request   list_processes,azm_requests_1_$list_proc,
                                   108  		(lsp),
                                   109  		(Lists all processes in the current dump.),
                                   110  		flags.allow_both
    000107  00   000305 001037 
    000110  0a   002061 000050 
    000111  aa   600000 000000 
                                   111  
                                   112            request   list_request_table,azm_requests_2_$list_request_table,
                                   113  		(lrqt),
                                   114  		(Lists all request tables in the request table list.),
                                   115  		flags.unimplemented+flags.dont_summarize+flags.dont_list
    000112  00   000310 001060 
    000113  0a   002073 000063 
    000114  aa   130000 000000 
                                   116  
                                   117  	request   machine_conditions,azm_requests_1_$mc,(mc),
                                   118  		(Print machine condition frame from <virtual-addr>.),
                                   119  		flags.allow_command
    000115  00   000313 001101 
    000116  0a   002110 000062 
    000117  aa   400000 000000 
                                   120  
                                   121            request   page_trace,azm_pds_trace_$azm_pds_trace_,(pgt),
                                   122  		(Print system trace table for process.),
                                   123  		flags.allow_command
    000120  00   000316 001122 
    000121  0a   002125 000045 
    000122  aa   400000 000000 
                                   124  
                                   125  	request	quit,azm_requests_2_$quit,(q),
                                   126  		(Leave analyze_multics.),
                                   127  		flags.allow_command
    000123  00   000321 001143 
    000124  0a   002137 000026 
    000125  aa   400000 000000 
                                   128  
                                   129  	request	replace,azm_requests_2_$replace,(rp),
                                   130  		(Replace translation of segment number with path.),
                                   131  		flags.allow_command
    000126  00   000324 001164 
    000127  0a   002145 000060 
    000130  aa   400000 000000 
                                   132  
                                   133  	request	scus,azm_requests_2_$scus,(),
                                   134  		(Print the memory configuration at dump time.),
                                   135  		flags.allow_command
    000131  00   000327 001205 
    000132  0a   002161 000054 
    000133  aa   400000 000000 
                                   136  
                                   137  	request	sdw,azm_requests_1_$sdw,
                                   138  		(),
                                   139  		(List SDWs in DSEG.),
                                   140  		flags.allow_command
    000134  00   000332 001216 
    000135  0a   002174 000022 
    000136  aa   400000 000000 
                                   141  
                                   142  	request	select_deadproc,azm_address_space_$deadproc,(sldp),
                                   143  		(Switch to looking at a dead process directory.),
                                   144  		flags.allow_both
    000137  00   000335 001227 
    000140  0a   002201 000056 
    000141  aa   600000 000000 
                                   145  
                                   146  	request	select_dump,azm_address_space_$erf,(sld),
                                   147  		(Switch to examining a specific FDUMP.),
                                   148  		flags.allow_command
    000142  00   000340 001250 
    000143  0a   002215 000045 
    000144  aa   400000 000000 
                                   149  
                                   150  	request	select_process,azm_requests_1_$select_proc,(slp),
                                   151  		(Selects a process from the FDUMP.),
                                   152  		flags.allow_both
    000145  00   000343 001271 
    000146  0a   002227 000041 
    000147  aa   600000 000000 
                                   153  
                                   154  	request   search,azm_requests_2_$search,(srh),
                                   155  		(Search a segment for an octal pattern on a word boundary.),
                                   156  		flags.allow_both
    000150  00   000346 001312 
    000151  0a   002240 000071 
    000152  aa   600000 000000 
                                   157  
                                   158  	request   segment_name,azm_requests_2_$name,(name),
                                   159  		(Print segment name given number.),
                                   160  		flags.allow_both
    000153  00   000351 001333 
    000154  0a   002257 000040 
    000155  aa   600000 000000 
                                   161  
                                   162  	request	segment_number,azm_requests_2_$number,(number),
                                   163  		(Print segment number given name.),
                                   164  		flags.allow_both
    000156  00   000354 001354 
    000157  0a   002267 000040 
    000160  aa   600000 000000 
                                   165  
                                   166            request   set,azm_requests_2_$set,
                                   167  		(),
                                   168  		(Set a temporary pointer.),
                                   169  		flags.allow_command
    000161  00   000357 001375 
    000162  0a   002277 000030 
    000163  aa   400000 000000 
                                   170  
                                   171  	request	syserr_log,azm_requests_3_$syserr_log,(slog),
                                   172  		(Print message(s) in syserr_log.),
                                   173  		flags.allow_command
    000164  00   000362 001406 
    000165  0a   002305 000037 
    000166  aa   400000 000000 
                                   174  
                                   175  	request	stack,azm_stack_requests_$stack,(sk),
                                   176  	 	(Trace the requested stack.),
                                   177  		flags.allow_command
    000167  00   000365 001427 
    000170  0a   002315 000032 
    000171  aa   400000 000000 
                                   178  
                                   179  	request	traffic_control_queue,azm_requests_3_$tcq,(tcq),
                                   180  		(Print the traffic controller queue.),
                                   181  		flags.allow_both
    000172  00   000370 001450 
    000173  0a   002324 000043 
    000174  aa   600000 000000 
                                   182  
                                   183  	request	value,azm_requests_2_$value,(v),
                                   184  		(Display a temporary pointer.),
                                   185  		flags.allow_command
    000175  00   000373 001471 
    000176  0a   002335 000034 
    000177  aa   400000 000000 
                                   186  
                                   187  	request	verify_associative_memory,
                                   188  		azm_requests_2_$verify_am,(vfam),
                                   189  		(Verify the associative memories in bos cpu.),
                                   190  		flags.allow_both
    000200  00   000376 001512 
    000201  0a   002344 000053 
    000202  aa   600000 000000 
                                   191  
                                   192  	request   why,azm_stack_requests_$why,(),
                                   193  		(Try to find the failing process.),
                                   194  		flags.allow_command
    000203  00   000401 001533 
    000204  0a   002357 000040 
    000205  aa   400000 000000 
                                   195  
                                   196  	request	.,azm_requests_2_$self_identify,(),
                                   197  		(),
                                   198  		flags.dont_summarize+flags.dont_list+flags.allow_command
    000206  00   000404 001544 
    000207  aa   000000 000000 
    000210  aa   430000 000000 
                                   199  
                                   200  	request	nothing,ssu_$just_return,(nt),
                                   201  		(),
                                   202  		flags.dont_summarize+flags.dont_list+flags.allow_both
    000211  00   000407 001555 
    000212  aa   000000 000000 
    000213  aa   630000 000000 
                                   203  
                                   204  	multics_request index_set,
                                   205  		(),
                                   206  		(),
                                   207  		(),
                                   208  		flags.dont_summarize+flags.dont_list+flags.allow_both
    000214  00   000412 001576 
                        000000 
    000215  0a   002367 000000 
    000216  aa   670000 000000 
                                   209  		
                                   210  	end_table azm_request_table_
                                   211  
                                   212  	end

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    002370  5a   000003 000000 
    002371  5a   000032 600000 
    002372  aa   000000 000000 
    002373  55   000013 000002 
    002374  5a   000002 400003 
    002375  55   000006 000013 
    002376  aa  022 141 172 155
    002377  aa  137 162 145 161
    002400  aa  165 145 163 164
    002401  aa  137 164 141 142
    002402  aa  154 145 137 000
    002403  55   000023 000003 
    002404  0a   000000 400000 
    002405  55   000016 000003 
    002406  aa  022 141 172 155         azm_request_table_
    002407  aa  137 162 145 161
    002410  aa  165 145 163 164
    002411  aa  137 164 141 142
    002412  aa  154 145 137 000
    002413  55   000002 000013 
    002414  6a   000000 400002 
    002415  55   000026 000003 
    002416  aa  014 163 171 155         symbol_table
    002417  aa  142 157 154 137
    002420  aa  164 141 142 154
    002421  aa  145 000 000 000

DEFINITIONS HASH TABLE

    002422  aa   000000 000015 
    002423  aa   000000 000000 
    002424  aa   000000 000000 
    002425  aa   000000 000000 
    002426  aa   000000 000000 
    002427  aa   000000 000000 
    002430  aa   000000 000000 
    002431  5a   000023 000000 
    002432  aa   000000 000000 
    002433  aa   000000 000000 
    002434  aa   000000 000000 
    002435  aa   000000 000000 
    002436  aa   000000 000000 
    002437  5a   000013 000000 

EXTERNAL NAMES

    002440  aa  011 151 156 144         index_set
    002441  aa  145 170 137 163
    002442  aa  145 164 000 000
    002443  aa  013 152 165 163         just_return
    002444  aa  164 137 162 145
    002445  aa  164 165 162 156
    002446  aa  004 163 163 165         ssu_
    002447  aa  137 000 000 000
    002450  aa  015 163 145 154         self_identify
    002451  aa  146 137 151 144
    002452  aa  145 156 164 151
    002453  aa  146 171 000 000
    002454  aa  003 167 150 171         why
    002455  aa  011 166 145 162         verify_am
    002456  aa  151 146 171 137
    002457  aa  141 155 000 000
    002460  aa  005 166 141 154         value
    002461  aa  165 145 000 000
    002462  aa  003 164 143 161         tcq
    002463  aa  005 163 164 141         stack
    002464  aa  143 153 000 000
    002465  aa  012 163 171 163         syserr_log
    002466  aa  145 162 162 137
    002467  aa  154 157 147 000
    002470  aa  003 163 145 164         set
    002471  aa  006 156 165 155         number
    002472  aa  142 145 162 000
    002473  aa  004 156 141 155         name
    002474  aa  145 000 000 000
    002475  aa  006 163 145 141         search
    002476  aa  162 143 150 000
    002477  aa  013 163 145 154         select_proc
    002500  aa  145 143 164 137
    002501  aa  160 162 157 143
    002502  aa  003 145 162 146         erf
    002503  aa  010 144 145 141         deadproc
    002504  aa  144 160 162 157
    002505  aa  143 000 000 000
    002506  aa  003 163 144 167         sdw
    002507  aa  004 163 143 165         scus
    002510  aa  163 000 000 000
    002511  aa  007 162 145 160         replace
    002512  aa  154 141 143 145
    002513  aa  004 161 165 151         quit
    002514  aa  164 000 000 000
    002515  aa  016 141 172 155         azm_pds_trace_
    002516  aa  137 160 144 163
    002517  aa  137 164 162 141
    002520  aa  143 145 137 000
    002521  aa  002 155 143 000         mc
    002522  aa  022 154 151 163         list_request_table
    002523  aa  164 137 162 145
    002524  aa  161 165 145 163
    002525  aa  164 137 164 141
    002526  aa  142 154 145 000
    002527  aa  011 154 151 163         list_proc
    002530  aa  164 137 160 162
    002531  aa  157 143 000 000
    002532  aa  012 154 151 163         list_dumps
    002533  aa  164 137 144 165
    002534  aa  155 160 163 000
    002535  aa  014 150 151 163         history_regs
    002536  aa  164 157 162 171
    002537  aa  137 162 145 147
    002540  aa  163 000 000 000
    002541  aa  005 146 162 141         frame
    002542  aa  155 145 000 000
    002543  aa  023 141 172 155         azm_stack_requests_
    002544  aa  137 163 164 141
    002545  aa  143 153 137 162
    002546  aa  145 161 165 145
    002547  aa  163 164 163 137
    002550  aa  020 146 144 165         fdump_components
    002551  aa  155 160 137 143
    002552  aa  157 155 160 157
    002553  aa  156 145 156 164
    002554  aa  163 000 000 000
    002555  aa  006 145 166 145         events
    002556  aa  156 164 163 000
    002557  aa  017 141 172 155         azm_requests_3_
    002560  aa  137 162 145 161
    002561  aa  165 145 163 164
    002562  aa  163 137 063 137
    002563  aa  012 145 162 162         error_code
    002564  aa  157 162 137 143
    002565  aa  157 144 145 000
    002566  aa  013 144 151 163         display_abs
    002567  aa  160 154 141 171
    002570  aa  137 141 142 163
    002571  aa  007 144 151 163         display
    002572  aa  160 154 141 171
    002573  aa  024 144 145 154         delete_request_table
    002574  aa  145 164 145 137
    002575  aa  162 145 161 165
    002576  aa  145 163 164 137
    002577  aa  164 141 142 154
    002600  aa  145 000 000 000
    002601  aa  013 144 145 154         delete_dump
    002602  aa  145 164 145 137
    002603  aa  144 165 155 160
    002604  aa  022 141 172 155         azm_address_space_
    002605  aa  137 141 144 144
    002606  aa  162 145 163 163
    002607  aa  137 163 160 141
    002610  aa  143 145 137 000
    002611  aa  013 143 157 156         config_deck
    002612  aa  146 151 147 137
    002613  aa  144 145 143 153
    002614  aa  005 143 154 157         clock
    002615  aa  143 153 000 000
    002616  aa  004 141 163 164         aste
    002617  aa  145 000 000 000
    002620  aa  022 141 163 163         associative_memory
    002621  aa  157 143 151 141
    002622  aa  164 151 166 145
    002623  aa  137 155 145 155
    002624  aa  157 162 171 000
    002625  aa  004 141 160 164         apte
    002626  aa  145 000 000 000
    002627  aa  013 145 170 164         extract_seg
    002630  aa  162 141 143 164
    002631  aa  137 163 145 147
    002632  aa  017 141 172 155         azm_requests_1_
    002633  aa  137 162 145 161
    002634  aa  165 145 163 164
    002635  aa  163 137 061 137
    002636  aa  021 141 144 144         add_request_table
    002637  aa  137 162 145 161
    002640  aa  165 145 163 164
    002641  aa  137 164 141 142
    002642  aa  154 145 000 000
    002643  aa  020 141 142 163         absolute_address
    002644  aa  157 154 165 164
    002645  aa  145 137 141 144
    002646  aa  144 162 145 163
    002647  aa  163 000 000 000
    002650  aa  017 141 172 155         azm_requests_2_
    002651  aa  137 162 145 161
    002652  aa  165 145 163 164
    002653  aa  163 137 062 137

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    002654  aa   000004 000000 
    002655  55   000050 000050 
    002656  aa   000004 000000 
    002657  55   000056 000053 
    002660  aa   000004 000000 
    002661  55   000260 000060 
    002662  aa   000004 000000 
    002663  55   000153 000064 
    002664  aa   000004 000000 
    002665  55   000260 000065 
    002666  aa   000004 000000 
    002667  55   000260 000070 
    002670  aa   000004 000000 
    002671  55   000167 000072 
    002672  aa   000004 000000 
    002673  55   000153 000073 
    002674  aa   000004 000000 
    002675  55   000167 000075 
    002676  aa   000004 000000 
    002677  55   000260 000100 
    002700  aa   000004 000000 
    002701  55   000260 000101 
    002702  aa   000004 000000 
    002703  55   000260 000103 
    002704  aa   000004 000000 
    002705  55   000260 000105 
    002706  aa   000004 000000 
    002707  55   000242 000107 
    002710  aa   000004 000000 
    002711  55   000214 000112 
    002712  aa   000004 000000 
    002713  55   000214 000113 
    002714  aa   000004 000000 
    002715  55   000242 000116 
    002716  aa   000004 000000 
    002717  55   000260 000117 
    002720  aa   000004 000000 
    002721  55   000260 000121 
    002722  aa   000004 000000 
    002723  55   000260 000123 
    002724  aa   000004 000000 
    002725  55   000125 000125 
    002726  aa   000004 000000 
    002727  55   000242 000131 
    002730  aa   000004 000000 
    002731  55   000260 000132 
    002732  aa   000004 000000 
    002733  55   000242 000137 
    002734  aa   000004 000000 
    002735  55   000214 000142 
    002736  aa   000004 000000 
    002737  55   000242 000145 
    002740  aa   000004 000000 
    002741  55   000153 000151 
    002742  aa   000004 000000 
    002743  55   000214 000160 
    002744  aa   000004 000000 
    002745  55   000167 000165 
    002746  aa   000004 000000 
    002747  55   000260 000173 
    002750  aa   000004 000000 
    002751  55   000242 000176 
    002752  aa   000004 000000 
    002753  55   000242 000201 
    002754  aa   000004 000000 
    002755  55   000260 000203 
    002756  aa   000004 000000 
    002757  55   000214 000211 
    002760  aa   000004 000000 
    002761  55   000242 000221 
    002762  aa   000004 000000 
    002763  55   000260 000224 
    002764  aa   000004 000000 
    002765  55   000242 000226 
    002766  aa   000004 000000 
    002767  55   000260 000230 
    002770  aa   000004 000000 
    002771  55   000242 000235 
    002772  aa   000004 000000 
    002773  55   000242 000237 
    002774  aa   000004 000000 
    002775  55   000260 000246 
    002776  aa   000004 000000 
    002777  55   000260 000253 
    003000  aa   000001 000000 
    003001  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    003002  5a   000264 000000 
    003003  5a   000266 000000 
    003004  5a   000270 000000 
    003005  5a   000272 000000 
    003006  5a   000274 000000 
    003007  5a   000276 000000 
    003010  5a   000300 000000 
    003011  5a   000302 000000 
    003012  5a   000304 000000 
    003013  5a   000306 000000 
    003014  5a   000310 000000 
    003015  5a   000312 000000 
    003016  5a   000314 000000 
    003017  5a   000316 000000 
    003020  5a   000320 000000 
    003021  5a   000322 000000 
    003022  5a   000324 000000 
    003023  5a   000326 000000 
    003024  5a   000330 000000 
    003025  5a   000332 000000 
    003026  5a   000334 000000 
    003027  5a   000336 000000 
    003030  5a   000340 000000 
    003031  5a   000342 000000 
    003032  5a   000344 000000 
    003033  5a   000346 000000 
    003034  5a   000350 000000 
    003035  5a   000352 000000 
    003036  5a   000354 000000 
    003037  5a   000356 000000 
    003040  5a   000360 000000 
    003041  5a   000362 000000 
    003042  5a   000364 000000 
    003043  5a   000366 000000 
    003044  5a   000370 000000 
    003045  5a   000372 000000 
    003046  5a   000374 000000 
    003047  5a   000376 000000 
    003050  5a   000400 000000 
    003051  5a   000402 000000 
    003052  5a   000404 000000 
    003053  5a   000406 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   002370 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000134 
    000007  a2   000000 000000 
    000010  9a   777770 0000 46         azm_requests_2_|absolute_address
    000011  5a   000463 0000 00
    000012  9a   777766 0000 46         azm_requests_2_|add_request_table
    000013  5a   000462 0000 00
    000014  9a   777764 0000 46         azm_requests_1_|extract_seg
    000015  5a   000461 0000 00
    000016  9a   777762 0000 46         azm_requests_1_|apte
    000017  5a   000460 0000 00
    000020  9a   777760 0000 46         azm_requests_2_|associative_memory
    000021  5a   000457 0000 00
    000022  9a   777756 0000 46         azm_requests_1_|aste
    000023  5a   000456 0000 00
    000024  9a   777754 0000 46         azm_requests_2_|clock
    000025  5a   000455 0000 00
    000026  9a   777752 0000 46         azm_requests_1_|config_deck
    000027  5a   000454 0000 00
    000030  9a   777750 0000 46         azm_address_space_|delete_dump
    000031  5a   000453 0000 00
    000032  9a   777746 0000 46         azm_requests_2_|delete_request_table
    000033  5a   000452 0000 00
    000034  9a   777744 0000 46         azm_requests_1_|display
    000035  5a   000451 0000 00
    000036  9a   777742 0000 46         azm_requests_1_|display_abs
    000037  5a   000450 0000 00
    000040  9a   777740 0000 46         azm_requests_2_|error_code
    000041  5a   000447 0000 00
    000042  9a   777736 0000 46         azm_requests_3_|events
    000043  5a   000446 0000 00
    000044  9a   777734 0000 46         azm_address_space_|fdump_components
    000045  5a   000445 0000 00
    000046  9a   777732 0000 46         azm_stack_requests_|frame
    000047  5a   000444 0000 00
    000050  9a   777730 0000 46         azm_requests_1_|history_regs
    000051  5a   000443 0000 00
    000052  9a   777726 0000 46         azm_address_space_|list_dumps
    000053  5a   000442 0000 00
    000054  9a   777724 0000 46         azm_requests_1_|list_proc
    000055  5a   000441 0000 00
    000056  9a   777722 0000 46         azm_requests_2_|list_request_table
    000057  5a   000440 0000 00
    000060  9a   777720 0000 46         azm_requests_1_|mc
    000061  5a   000437 0000 00
    000062  9a   777716 0000 46         azm_pds_trace_|azm_pds_trace_
    000063  5a   000436 0000 00
    000064  9a   777714 0000 46         azm_requests_2_|quit
    000065  5a   000435 0000 00
    000066  9a   777712 0000 46         azm_requests_2_|replace
    000067  5a   000434 0000 00
    000070  9a   777710 0000 46         azm_requests_2_|scus
    000071  5a   000433 0000 00
    000072  9a   777706 0000 46         azm_requests_1_|sdw
    000073  5a   000432 0000 00
    000074  9a   777704 0000 46         azm_address_space_|deadproc
    000075  5a   000431 0000 00
    000076  9a   777702 0000 46         azm_address_space_|erf
    000077  5a   000430 0000 00
    000100  9a   777700 0000 46         azm_requests_1_|select_proc
    000101  5a   000427 0000 00
    000102  9a   777676 0000 46         azm_requests_2_|search
    000103  5a   000426 0000 00
    000104  9a   777674 0000 46         azm_requests_2_|name
    000105  5a   000425 0000 00
    000106  9a   777672 0000 46         azm_requests_2_|number
    000107  5a   000424 0000 00
    000110  9a   777670 0000 46         azm_requests_2_|set
    000111  5a   000423 0000 00
    000112  9a   777666 0000 46         azm_requests_3_|syserr_log
    000113  5a   000422 0000 00
    000114  9a   777664 0000 46         azm_stack_requests_|stack
    000115  5a   000421 0000 00
    000116  9a   777662 0000 46         azm_requests_3_|tcq
    000117  5a   000420 0000 00
    000120  9a   777660 0000 46         azm_requests_2_|value
    000121  5a   000417 0000 00
    000122  9a   777656 0000 46         azm_requests_2_|verify_am
    000123  5a   000416 0000 00
    000124  9a   777654 0000 46         azm_stack_requests_|why
    000125  5a   000415 0000 00
    000126  9a   777652 0000 46         azm_requests_2_|self_identify
    000127  5a   000414 0000 00
    000130  9a   777650 0000 46         ssu_|just_return
    000131  5a   000413 0000 00
    000132  9a   777646 0000 46         index_set|index_set
    000133  5a   000412 0000 00
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000004 
    000004  aa   000000 114732 
    000005  aa   732732 062314 
    000006  aa   000000 114775 
    000007  aa   667652 100616 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000341 
    000020  aa   000000 000150 
    000021  aa   000000 000310 
    000022  aa   000331 000150 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   040066 056067 
    000030  aa   040040 117143 
    000031  aa   164157 142145 
    000032  aa   162040 061071 
    000033  aa   070066 040040 
    000034  aa   107112 157150 
    000035  aa   156163 157156 
    000036  aa   056123 171163 
    000037  aa   115141 151156 
    000040  aa   164056 141040 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   154151 163164 
    000045  aa   040040 040040 
    000046  aa   040040 040040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040040 040040 
    000057  aa   040040 040040 
    000060  aa   040040 040040 
    000061  aa   040040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000003 
    000066  aa   000102 000067 
    000067  aa   147740 446365 
    000070  aa   000000 114774 
    000071  aa   461304 400000 
    000072  aa   000120 000050 
    000073  aa   133055 020064 
    000074  aa   000000 113310 
    000075  aa   612334 200000 
    000076  aa   000132 000066 
    000077  aa   147714 750316 
    000100  aa   000000 114774 
    000101  aa   453561 000000 
    000102  aa   076163 160145          >special_ldd>install>MR12.0-1206>azm_request_table_.alm
    000103  aa   143151 141154 
    000104  aa   137154 144144 
    000105  aa   076151 156163 
    000106  aa   164141 154154 
    000107  aa   076115 122061 
    000110  aa   062056 060055 
    000111  aa   061062 060066 
    000112  aa   076141 172155 
    000113  aa   137162 145161 
    000114  aa   165145 163164 
    000115  aa   137164 141142 
    000116  aa   154145 137056 
    000117  aa   141154 155040 
    000120  aa   076154 144144          >ldd>include>ssu_request_macros.incl.alm
    000121  aa   076151 156143 
    000122  aa   154165 144145 
    000123  aa   076163 163165 
    000124  aa   137162 145161 
    000125  aa   165145 163164 
    000126  aa   137155 141143 
    000127  aa   162157 163056 
    000130  aa   151156 143154 
    000131  aa   056141 154155 
    000132  aa   076163 160145          >special_ldd>install>MR12.0-1206>stack_header.incl.alm
    000133  aa   143151 141154 
    000134  aa   137154 144144 
    000135  aa   076151 156163 
    000136  aa   164141 154154 
    000137  aa   076115 122061 
    000140  aa   062056 060055 
    000141  aa   061062 060066 
    000142  aa   076163 164141 
    000143  aa   143153 137150 
    000144  aa   145141 144145 
    000145  aa   162056 151156 
    000146  aa   143154 056141 
    000147  aa   154155 040040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

         217    .._00000.call            azm_request_table_:        26.
        1607    .._00000.info            azm_request_table_:        26.
         415    .._00000.names           azm_request_table_:        26.
         222    .._00001.call            azm_request_table_:        31.
        1623    .._00001.info            azm_request_table_:        31.
         436    .._00001.names           azm_request_table_:        31.
         225    .._00002.call            azm_request_table_:        35.
        1633    .._00002.info            azm_request_table_:        35.
         457    .._00002.names           azm_request_table_:        35.
         230    .._00003.call            azm_request_table_:        40.
        1644    .._00003.info            azm_request_table_:        40.
         500    .._00003.names           azm_request_table_:        40.
         233    .._00004.call            azm_request_table_:        45.
        1650    .._00004.info            azm_request_table_:        45.
         511    .._00004.names           azm_request_table_:        45.
         236    .._00005.call            azm_request_table_:        50.
        1657    .._00005.info            azm_request_table_:        50.
         532    .._00005.names           azm_request_table_:        50.
         241    .._00006.call            azm_request_table_:        55.
        1667    .._00006.info            azm_request_table_:        55.
         543    .._00006.names           azm_request_table_:        55.
         244    .._00007.call            azm_request_table_:        59.
        1676    .._00007.info            azm_request_table_:        59.
         554    .._00007.names           azm_request_table_:        59.
         247    .._00010.call            azm_request_table_:        64.
        1711    .._00010.info            azm_request_table_:        64.
         575    .._00010.names           azm_request_table_:        64.
         252    .._00011.call            azm_request_table_:        69.
        1722    .._00011.info            azm_request_table_:        69.
         616    .._00011.names           azm_request_table_:        69.
         255    .._00012.call            azm_request_table_:        73.
        1737    .._00012.info            azm_request_table_:        73.
         637    .._00012.names           azm_request_table_:        73.
         260    .._00013.call            azm_request_table_:        78.
        1755    .._00013.info            azm_request_table_:        78.
         660    .._00013.names           azm_request_table_:        78.
         263    .._00014.call            azm_request_table_:        82.
        1772    .._00014.info            azm_request_table_:        82.
         701    .._00014.names           azm_request_table_:        82.
         266    .._00015.call            azm_request_table_:        86.
        2002    .._00015.info            azm_request_table_:        86.
         722    .._00015.names           azm_request_table_:        86.
         271    .._00016.call            azm_request_table_:        91.
        2007    .._00016.info            azm_request_table_:        91.
         743    .._00016.names           azm_request_table_:        91.
         274    .._00017.call            azm_request_table_:        96.
        2023    .._00017.info            azm_request_table_:        96.
         754    .._00017.names           azm_request_table_:        96.
         277    .._00020.call            azm_request_table_:       100.
        2037    .._00020.info            azm_request_table_:       100.
         775    .._00020.names           azm_request_table_:       100.
         302    .._00021.call            azm_request_table_:       105.
        2047    .._00021.info            azm_request_table_:       105.
        1016    .._00021.names           azm_request_table_:       105.
         305    .._00022.call            azm_request_table_:       110.
        2061    .._00022.info            azm_request_table_:       110.
        1037    .._00022.names           azm_request_table_:       110.
         310    .._00023.call            azm_request_table_:       115.
        2073    .._00023.info            azm_request_table_:       115.
        1060    .._00023.names           azm_request_table_:       115.
         313    .._00024.call            azm_request_table_:       119.
        2110    .._00024.info            azm_request_table_:       119.
        1101    .._00024.names           azm_request_table_:       119.
         316    .._00025.call            azm_request_table_:       123.
        2125    .._00025.info            azm_request_table_:       123.
        1122    .._00025.names           azm_request_table_:       123.
         321    .._00026.call            azm_request_table_:       127.
        2137    .._00026.info            azm_request_table_:       127.
        1143    .._00026.names           azm_request_table_:       127.
         324    .._00027.call            azm_request_table_:       131.
        2145    .._00027.info            azm_request_table_:       131.
        1164    .._00027.names           azm_request_table_:       131.
         327    .._00030.call            azm_request_table_:       135.
        2161    .._00030.info            azm_request_table_:       135.
        1205    .._00030.names           azm_request_table_:       135.
         332    .._00031.call            azm_request_table_:       140.
        2174    .._00031.info            azm_request_table_:       140.
        1216    .._00031.names           azm_request_table_:       140.
         335    .._00032.call            azm_request_table_:       144.
        2201    .._00032.info            azm_request_table_:       144.
        1227    .._00032.names           azm_request_table_:       144.
         340    .._00033.call            azm_request_table_:       148.
        2215    .._00033.info            azm_request_table_:       148.
        1250    .._00033.names           azm_request_table_:       148.
         343    .._00034.call            azm_request_table_:       152.
        2227    .._00034.info            azm_request_table_:       152.
        1271    .._00034.names           azm_request_table_:       152.
         346    .._00035.call            azm_request_table_:       156.
        2240    .._00035.info            azm_request_table_:       156.
        1312    .._00035.names           azm_request_table_:       156.
         351    .._00036.call            azm_request_table_:       160.
        2257    .._00036.info            azm_request_table_:       160.
        1333    .._00036.names           azm_request_table_:       160.
         354    .._00037.call            azm_request_table_:       164.
        2267    .._00037.info            azm_request_table_:       164.
        1354    .._00037.names           azm_request_table_:       164.
         357    .._00040.call            azm_request_table_:       169.
        2277    .._00040.info            azm_request_table_:       169.
        1375    .._00040.names           azm_request_table_:       169.
         362    .._00041.call            azm_request_table_:       173.
        2305    .._00041.info            azm_request_table_:       173.
        1406    .._00041.names           azm_request_table_:       173.
         365    .._00042.call            azm_request_table_:       177.
        2315    .._00042.info            azm_request_table_:       177.
        1427    .._00042.names           azm_request_table_:       177.
         370    .._00043.call            azm_request_table_:       181.
        2324    .._00043.info            azm_request_table_:       181.
        1450    .._00043.names           azm_request_table_:       181.
         373    .._00044.call            azm_request_table_:       185.
        2335    .._00044.info            azm_request_table_:       185.
        1471    .._00044.names           azm_request_table_:       185.
         376    .._00045.call            azm_request_table_:       190.
        2344    .._00045.info            azm_request_table_:       190.
        1512    .._00045.names           azm_request_table_:       190.
         401    .._00046.call            azm_request_table_:       194.
        2357    .._00046.info            azm_request_table_:       194.
        1533    .._00046.names           azm_request_table_:       194.
         404    .._00047.call            azm_request_table_:       198.
        1544    .._00047.names           azm_request_table_:       198.
         407    .._00050.call            azm_request_table_:       202.
        1555    .._00050.names           azm_request_table_:       202.
         412    .._00051.call            azm_request_table_:       208.
        2367    .._00051.info            azm_request_table_:       208.
        1576    .._00051.names           azm_request_table_:       208.
      600000    .dft_mrsf                azm_request_table_:        21.
           0    .dft_mruf                azm_request_table_:        21,  208.
      400000    .dft_sf                  azm_request_table_:        21.
           0    .dft_uf                  azm_request_table_:        21,   26,   31,   35,   40,   45,   50,   55,   59,   64,
                                                                    69,   73,   78,   82,   86,   91,   96,  100,  105,  110,
                                                                   115,  119,  123,  127,  131,  135,  140,  144,  148,  152,
                                                                   156,  160,  164,  169,  173,  177,  181,  185,  190,  194,
                                                                   198,  202.
           0    .multics_doc_lth         azm_request_table_:       208.
       40112    .rc                      azm_request_table_:        21,   26,   31,   35,   40,   45,   50,   55,   59,   64,
                                                                    69,   73,   78,   82,   86,   91,   96,  100,  105,  110,
                                                                   115,  119,  123,  127,  131,  135,  140,  144,  148,  152,
                                                                   156,  160,  164,  169,  173,  177,  181,  185,  190,  194,
                                                                   198,  202,  208,  210.
      630000    .sf                      azm_request_table_:        26,   31,   35,   40,   45,   50,   55,   59,   64,   69,
                                                                    73,   78,   82,   86,   91,   96,  100,  105,  110,  115,
                                                                   119,  123,  127,  131,  135,  140,  144,  148,  152,  156,
                                                                   160,  164,  169,  173,  177,  181,  185,  190,  194,  198,
                                                                   202,  208.
           0    .uf                      azm_request_table_:        26,   31,   35,   40,   45,   50,   55,   59,   64,   69,
                                                                    73,   78,   82,   86,   91,   96,  100,  105,  110,  115,
                                                                   119,  123,  127,  131,  135,  140,  144,  148,  152,  156,
                                                                   160,  164,  169,  173,  177,  181,  185,  190,  194,  198,
                                                                   202,  208.
                absolute_address         azm_request_table_:        26.
                add_request_table        azm_request_table_:        31.
                apte                     azm_request_table_:        40.
                associative_memory       azm_request_table_:        45.
                aste                     azm_request_table_:        50.
                azm_address_space_       azm_request_table_:        64,   91,  105,  144,  148.
                azm_pds_trace_           azm_request_table_:       123.
                azm_requests_1_          azm_request_table_:        35,   40,   50,   59,   73,   78,  100,  110,  119,  140,  152.
                azm_requests_2_          azm_request_table_:        26,   31,   45,   55,   69,   82,  115,  127,  131,  135,
                                                                   156,  160,  164,  169,  185,  190,  198.
                azm_requests_3_          azm_request_table_:        86,  173,  181.
           0    azm_request_table_       azm_request_table_:        21.
          52    azm_request_table_.rc    azm_request_table_:        21,  210.
                azm_stack_requests_      azm_request_table_:        96,  177,  194.
         217    calls                    azm_request_table_:        26,   31,   35,   40,   45,   50,   55,   59,   64,   69,
                                                                    73,   78,   82,   86,   91,   96,  100,  105,  110,  115,
                                                                   119,  123,  127,  131,  135,  140,  144,  148,  152,  156,
                                                                   160,  164,  169,  173,  177,  181,  185,  190,  194,  198,
                                                                   202,  208,
                                         ssu_request_macros:       311,  314.
        1170    call_offset              stack_header:        80.
                clock                    azm_request_table_:        55.
                config_deck              azm_request_table_:        59.
                deadproc                 azm_request_table_:       144.
                delete_dump              azm_request_table_:        64.
                delete_request_table     azm_request_table_:        69.
                display                  azm_request_table_:        73.
                display_abs              azm_request_table_:        78.
        1174    entry_offset             stack_header:        84.
                erf                      azm_request_table_:       148.
                error_code               azm_request_table_:        82.
                events                   azm_request_table_:        86.
                extract_seg              azm_request_table_:        35.
                fdump_components         azm_request_table_:        91.
      200000    flags.allow_af           azm_request_table_:        21,
                                         ssu_request_macros:        33.
      600000    flags.allow_both         azm_request_table_:        26,   40,   73,   78,  110,  144,  152,  156,  160,  164,
                                                                   181,  190,  202,  208,
                                         ssu_request_macros:        34.
      400000    flags.allow_command      azm_request_table_:        21,   31,   35,   45,   50,   59,   86,  100,  105,  119,
                                                                   123,  127,  131,  135,  140,  148,  169,  173,  177,  185,
                                                                   194,  198,
                                         ssu_request_macros:        32.
       10000    flags.dont_list          azm_request_table_:        55,   64,   69,   82,   91,   96,  115,  198,  202,  208,
                                         ssu_request_macros:        40.
       20000    flags.dont_summarize     azm_request_table_:        55,   64,   69,   82,   91,   96,  115,  198,  202,  208,
                                         ssu_request_macros:        39.
       40000    flags.multics_request    azm_request_table_:       208,
                                         ssu_request_macros:        37.
      100000    flags.unimplemented      azm_request_table_:        55,   64,   69,   82,   91,   96,  115,
                                         ssu_request_macros:        36.
        4000    flags.unknown            ssu_request_macros:        42.
                frame                    azm_request_table_:        96.
                history_regs             azm_request_table_:       100.
                index_set                azm_request_table_:       208.
        1607    info                     azm_request_table_:        26,   31,   35,   40,   45,   50,   55,   59,   64,   69,
                                                                    73,   78,   82,   86,   91,   96,  100,  105,  110,  115,
                                                                   119,  123,  127,  131,  135,  140,  144,  148,  152,  156,
                                                                   160,  164,  169,  173,  177,  181,  185,  190,  194,  208,
                                         ssu_request_macros:       313,  314.
                just_return              azm_request_table_:       202.
                list_dumps               azm_request_table_:       105.
                list_proc                azm_request_table_:       110.
                list_request_table       azm_request_table_:       115.
                mc                       azm_request_table_:       119.
                name                     azm_request_table_:       160.
         415    names                    azm_request_table_:        26,   31,   35,   40,   45,   50,   55,   59,   64,   69,
                                                                    73,   78,   82,   86,   91,   96,  100,  105,  110,  115,
                                                                   119,  123,  127,  131,  135,  140,  144,  148,  152,  156,
                                                                   160,  164,  169,  173,  177,  181,  185,  190,  194,  198,
                                                                   202,  208,
                                         ssu_request_macros:       312,  314.
                number                   azm_request_table_:       164.
        1171    push_offset              stack_header:        81.
                quit                     azm_request_table_:       127.
                replace                  azm_request_table_:       131.
        1173    return_no_pop_offset     stack_header:        83.
        1172    return_offset            stack_header:        82.
                scus                     azm_request_table_:       135.
                sdw                      azm_request_table_:       140.
                search                   azm_request_table_:       156.
                select_proc              azm_request_table_:       152.
                self_identify            azm_request_table_:       198.
                set                      azm_request_table_:       169.
                ssu_                     azm_request_table_:       202.
          73    stach_header.trace_top_ptr     stack_header:        62.
                stack                    azm_request_table_:       177.
          66    stack_header.assign_linkage_ptr      stack_header:        59.
          32    stack_header.bar_mode_sp       stack_header:        42.
          36    stack_header.call_op_ptr       stack_header:        44.
          10    stack_header.clr_ptr     stack_header:        27.
           6    stack_header.combined_stat_ptr       stack_header:        25.
           4    stack_header.cpm_data_ptr      stack_header:        24.
          13    stack_header.cpm_enabled       stack_header:        32.
          13    stack_header.cur_lot_size      stack_header:        31.
          64    stack_header.ect_ptr     stack_header:        58.
          46    stack_header.entry_op_ptr      stack_header:        49.
          70    stack_header.heap_header_ptr   stack_header:        60.
          74    stack_header.in_trace    stack_header:        63.
          52    stack_header.isot_ptr    stack_header:        52.
          26    stack_header.lot_ptr     azm_request_table_:        26,   31,   35,   40,   45,   50,   55,   59,   64,   69,
                                                                    73,   78,   82,   86,   91,   96,  100,  105,  110,  115,
                                                                   119,  123,  127,  131,  135,  140,  144,  148,  152,  156,
                                                                   160,  164,  169,  173,  177,  181,  185,  190,  194,  198,
                                                                   202,  208,
                                         stack_header:        39.
          12    stack_header.main_proc_invoked       stack_header:        29.
          12    stack_header.max_lot_size      stack_header:        28.
          20    stack_header.parent_ptr  stack_header:        36.
          34    stack_header.pl1_operators_ptr       stack_header:        43.
          40    stack_header.push_op_ptr       stack_header:        46.
          42    stack_header.return_op_ptr     stack_header:        47.
          44    stack_header.ret_no_pop_op_ptr       stack_header:        48.
          62    stack_header.rnt_ptr     stack_header:        57.
          12    stack_header.run_unit_depth    stack_header:        30.
          54    stack_header.sct_ptr     stack_header:        53.
          30    stack_header.signal_ptr  stack_header:        41.
          22    stack_header.stack_begin_ptr   stack_header:        37.
          24    stack_header.stack_end_ptr     stack_header:        38.
          14    stack_header.system_free_ptr   stack_header:        33.
          60    stack_header.sys_link_info_ptr       stack_header:        56.
          72    stack_header.trace_frames      stack_header:        61.
          50    stack_header.trans_op_tv_ptr   stack_header:        51.
          56    stack_header.unwinder_ptr      stack_header:        54.
          16    stack_header.user_free_ptr     stack_header:        34.
         100    stack_header_end         stack_header:        64.
                syserr_log               azm_request_table_:       173.
           0    tables                   azm_request_table_:        21,   26,   31,   35,   40,   45,   50,   55,   59,   64,
                                                                    69,   73,   78,   82,   86,   91,   96,  100,  105,  110,
                                                                   115,  119,  123,  127,  131,  135,  140,  144,  148,  152,
                                                                   156,  160,  164,  169,  173,  177,  181,  185,  190,  194,
                                                                   198,  202,  208,
                                         ssu_request_macros:       310,  314.
                tcq                      azm_request_table_:       181.
           0    trace_frames.count       stack_header:        69.
           1    trace_frames.top_ptr     stack_header:        70.
         551    tv_offset                stack_header:        75,   80,   81,   82,   83,   84.
                value                    azm_request_table_:       185.
                verify_am                azm_request_table_:       190.
                why                      azm_request_table_:       194.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
