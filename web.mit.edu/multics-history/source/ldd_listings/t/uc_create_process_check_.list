	COMPILATION LISTING OF SEGMENT uc_create_process_check_
	Compiled by: Multics PL/I Compiler, Release 30, of February 16, 1988
	Compiled at: Honeywell Bull, Phoenix AZ, SysM
	Compiled on: 07/13/88  1043.0 mst Wed
	    Options: optimize map

        1 /****^  ********************************************
        2*        *                                          *
        3*        * Copyright, (C) Honeywell Bull Inc., 1987 *
        4*        *                                          *
        5*        ******************************************** */
        6 
        7 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
        8 /*							       */
        9 /* This module is part of the Multics Network Architecture (MNA) version of  */
       10 /* user control.  MNA user control serves users coming into Multics via      */
       11 /* separate networks (eg, the Distributed Systems Architecture (DSA)	       */
       12 /* network.  MNA user control is not used for logins through the Multics     */
       13 /* Communications System (MCS).  A separate MCS user control system serves   */
       14 /* MCS users.						       */
       15 /*							       */
       16 /* To Be Supplied:						       */
       17 /*  1) Brief module description.  See MDD010 or MTBs 751 and 752 for details */
       18 /*     about this module, and its relationship to modules in the MCS user    */
       19 /*     control system.					       */
       20 /*  2) Operator error message documentation.  This program calls	       */
       21 /*     sys_log_$general but does not contain the required descriptions of    */
       22 /*     these messages.  This omission was waived for initial installation    */
       23 /*     of the subsystem by the auditor, security coordinator, and by MDC     */
       24 /*     management.						       */
       25 /*							       */
       26 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
       27 
       28 /****^  HISTORY COMMENTS:
       29*  1) change(86-04-27,Swenson), approve(87-07-13,MCR7737),
       30*     audit(87-05-16,GDixon), install(87-08-04,MR12.1-1055):
       31*     Initial coding.
       32*  2) change(87-04-27,GDixon), approve(87-07-13,MCR7737),
       33*     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
       34*      A) Upgraded for change to answer_table.incl.pl1 and
       35*         user_table_entry.incl.pl1.
       36*      B) Move notification of other processes into uc_login_, now that the
       37*         login operation is distinguished from process creation.
       38*      C) Add support for minimum MNA terminal manager ring check.  Data comes
       39*         from login_server_process_request.minimum_ring.
       40*  3) change(87-05-09,GDixon), approve(87-07-13,MCR7737),
       41*     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
       42*     Corrected to reference login_server_process_request.default_io_module,
       43*     rather than .outer_module.  login_server_process_request.outer_module was
       44*     assign to ute.outer_mode in uc_ls_create_request_.
       45*  4) change(88-02-02,Parisek), approve(88-02-11,MCR7849),
       46*     audit(88-03-22,Lippard), install(88-07-13,MR12.2-1047):
       47*     Added setting of new UTE element lowest_ring. SCP6367
       48*                                                   END HISTORY COMMENTS */
       49 
       50 /* format: style4,indattr */
       51 
       52 uc_create_process_check_:
       53      procedure (P_utep, P_ls_process_request_ptr, P_code);
       54 
       55 /* Parameters */
       56 
       57 dcl  P_ls_process_request_ptr ptr parameter;		/* ptr to process request data structure */
       58 dcl  P_utep	        ptr parameter;
       59 dcl  P_code	        fixed bin (35) parameter;
       60 
       61 /* Automatic */
       62 
       63 dcl  code		        fixed bin (35) automatic;
       64 dcl  pdtep	        ptr automatic;
       65 dcl  satp		        ptr automatic;
       66 dcl  satep	        ptr automatic;
       67 
       68 /* Entries */
       69 
       70 dcl  act_ctl_$check_for_process_creation entry (ptr, char (8) aligned, char (168) var, fixed bin (35));
       71 dcl  load_ctl_$check_for_process_creation entry (ptr, fixed bin (35));
       72 
       73 /* External */
       74 
       75 dcl  as_error_table_$illegal_om_arg fixed bin (35) external static;
       76 dcl  as_error_table_$already_logged_in fixed bin (35) external static;
       77 dcl  as_error_table_$illegal_hd_arg fixed bin (35) external static;
       78 dcl  as_error_table_$illegal_ip_arg fixed bin (35) external static;
       79 dcl  as_error_table_$illegal_ss_arg fixed bin (35) external static;
       80 dcl  as_error_table_$long_ip_arg fixed bin (35) external static;
       81 dcl  as_error_table_$long_ss_arg fixed bin (35) external static;
       82 dcl  as_error_table_$no_primary fixed bin (35) ext static;
       83 dcl  as_error_table_$ring_too_high fixed bin (35) external static;
       84 dcl  as_error_table_$ring_too_low fixed bin (35) external static;
       85 dcl  as_error_table_$user_fg_cpu_limit fixed bin (35) ext static;
       86 dcl  as_error_table_$user_max_bg fixed bin (35) ext static;
       87 dcl  as_error_table_$user_max_fg fixed bin (35) ext static;
       88 dcl  error_table_$bad_arg   fixed bin (35) ext static;
       89 dcl  error_table_$out_of_sequence fixed bin (35) ext static;
       90 
       91 /* Constant */
       92 
       93 dcl  ME		        char (24) int static options (constant) init ("uc_create_process_check_");
       94 dcl  (TRUE	        initial ("1"b),
       95      FALSE	        initial ("0"b)) bit (1) aligned internal static options (constant);
       96 
       97 /* Builtin */
       98 
       99 dcl  (addr, clock, index, length, max, min, null, rtrim, substr)
      100 		        builtin;
      101 
      102 /* Program */
      103 
      104 	call Setup ();
      105 	if ute.active ^= NOW_LOGGED_IN then
      106 	     call Abort_Create (error_table_$out_of_sequence);
      107 
      108 	call Check_Process_Limits ();
      109 	call Check_For_Multiple_Logins ();
      110 	call Check_With_Accounting ();
      111 	call Setup_Initial_Procedure_And_Subsystem ();
      112 	call Setup_Login_Ring ();
      113 	call Setup_Outer_Module ();
      114 	call Setup_Miscellaneous_Variables ();
      115 	call Check_With_Load_Control ();
      116 
      117 	ute.uflags.proc_create_ok = TRUE;
      118 RETURN:
      119 	P_code = code;
      120 	return;
      121 
      122 Setup:
      123      procedure ();
      124 
      125 	utep = P_utep;
      126 	ls_request_ptr = P_ls_process_request_ptr;
      127 	code = 0;
      128 
      129 	ansp = as_data_$ansp;
      130 	satp = as_data_$satp;
      131 	satep = ute.uprojp;
      132 	pdtep = ute.pdtep;
      133 
      134 	anstbl.current_time = clock ();
      135 	return;
      136      end Setup;
      137 
      138 Abort_Create:
      139      procedure (P_code);
      140 
      141 dcl  P_code	        fixed bin (35) parameter;
      142 
      143 	code = P_code;
      144 	goto RETURN;
      145      end Abort_Create;
      146 
      147 Check_Process_Limits:
      148      procedure ();
      149 
      150 dcl  limit	        fixed bin automatic;
      151 
      152 	if ute.queue <= 0 then do;			/* foreground process */
      153 	     if ute.process_type = PT_ABSENTEE then do;
      154 
      155 /**** Check foreground absentee CPU limits */
      156 		limit = project.abs_foreground_cpu_limit;
      157 		if limit = 0 then			/* no SAT limit */
      158 		     limit = user.abs_foreground_cpu_limit;
      159 		else if user.abs_foreground_cpu_limit > 0 then /* PDT limit */
      160 		     limit = min (limit, user.abs_foreground_cpu_limit);
      161 
      162 		if limit > 0 then			/* there is a SAT or PDT limit */
      163 		     if ute.max_cpu_time > limit then
      164 			call Abort_Create (as_error_table_$user_fg_cpu_limit);
      165 		if ^ute.at.pm_ok &			/* primary not allowed */
      166 		     ^ute.uflags.foreground_secondary_ok/* secondary not ok */
      167 		then call Abort_Create (as_error_table_$no_primary);
      168 	     end;
      169 
      170 /**** Check foreground absentee process limits */
      171 
      172 	     limit = project.max_foreground;
      173 	     if limit = 0 then			/* no SAT limit */
      174 		limit = user.max_foreground;		/* use PDT limit */
      175 	     else if user.max_foreground > 0 then	/* there is a PDT limit */
      176 		limit = min (limit, user.max_foreground);
      177 	     if limit > 0 then			/* there is a limit */
      178 		if user.n_foreground ^< limit then do;	/* user at limit */
      179 		     if ute.process_type = PT_INTERACTIVE then do;
      180 			if user.n_interactive > 0 &	/* already has one */
      181 			     ^ute.at.multip then do;	/* no multip */
      182 			     call Abort_Create (as_error_table_$already_logged_in);
      183 			end;			/* end already has one */
      184 		     end;				/* end interactive */
      185 		     else				/* foreground absentee */
      186 			call Abort_Create (as_error_table_$user_max_fg);
      187 		end;				/* user at limit */
      188 	end;					/* foreground process */
      189 	else do;					/* background process */
      190 	     if ^ute.abs_run then do;			/* not force-run by operator */
      191 		limit = project.max_background;
      192 		if limit = 0 then			/* no SAT limit */
      193 		     limit = user.max_background;	/* pick up PDT limit */
      194 		else if user.max_background > 0 then	/* there is a PDT limit */
      195 		     limit = min (limit, user.max_background); /* get smaller */
      196 		if limit > 0 then			/* if there is a limit */
      197 		     if user.n_background ^< limit then /* user at limit */
      198 			call Abort_Create (as_error_table_$user_max_bg);
      199 	     end;					/* end not force-run by operator */
      200 	end;					/* end background process */
      201 	return;
      202 
      203 
      204      end Check_Process_Limits;
      205 
      206 Check_For_Multiple_Logins:
      207      procedure ();
      208 
      209 	if ute.process_type ^= PT_INTERACTIVE | ute.anonymous = 1 then
      210 	     return;
      211 
      212 	if user.n_interactive > 0 then do;
      213 	     if ^ute.at.multip then			/* no multip */
      214 		call Abort_Create (as_error_table_$already_logged_in);
      215 	end;
      216 	return;
      217      end Check_For_Multiple_Logins;
      218 
      219 Check_With_Accounting:
      220      procedure ();
      221 
      222 dcl  short_info	        char (8) aligned automatic;
      223 dcl  long_info	        char (168) varying automatic;
      224 
      225 	call act_ctl_$check_for_process_creation (utep, short_info, long_info, code);
      226 	if code ^= 0 then
      227 	     call Abort_Create (code);
      228 	return;
      229      end Check_With_Accounting;
      230 
      231 Setup_Initial_Procedure_And_Subsystem:
      232      procedure ();
      233 
      234 dcl  ip_len	        fixed bin automatic;
      235 dcl  ss_len	        fixed bin automatic;
      236 dcl  subsystem	        char (64) automatic;
      237 
      238 /**** Check if login is restricted to using a special process overseer.
      239*      If it is, use this correct overseer_. */
      240 
      241 	if ute.network_connection_type ^= 0 &
      242 	     ute.network_connection_type ^= NETWORK_CONNECTION_LOGIN then do;
      243 	     if ute.network_connection_type ^=
      244 		NETWORK_CONNECTION_DSA_FILE_TRANSFER then
      245 		call Abort_Create (error_table_$bad_arg);
      246 	     else do;				/* DSA file transfer connection */
      247 		ute.init_proc = "dsa_uft_server_overseer_";
      248 		ute.ip_len = length (rtrim (ute.init_proc));
      249 		ute.ss_len = 0;			/* no subsystem */
      250 		ute.uflags.dont_call_init_admin = FALSE;
      251 	     end;
      252 	end;
      253 	else do;					/* Normal LOGIN  */
      254 /**** Save the subsystem so that we don't clobber it below */
      255 
      256 	     if ute.uflags.ss_given then
      257 		subsystem = substr (ute.init_proc, ute.ip_len + 1, ute.ss_len);
      258 
      259 	     if ute.uflags.ip_given then do;
      260 		if ^ute.at.vinitproc then
      261 		     call Abort_Create (as_error_table_$illegal_ip_arg);
      262 	     end;
      263 	     else do;				/* not supplied on command line, use PDT */
      264 		if user.uflags.ip_given then		/* length stored in PDT */
      265 		     ip_len = user.ip_len;
      266 		else do;				/* must scan and figure it out */
      267 		     ip_len = -1 + index (user.initial_procedure, " ");
      268 		     if ip_len = -1 then		/* if no blanks, then */
      269 			ip_len = length (user.initial_procedure);
      270 		end;				/* it is 64 characters long */
      271 
      272 		substr (ute.init_proc, 1, ip_len) =
      273 		     substr (user.initial_procedure, 1, ip_len);
      274 		ute.ip_len = ip_len;
      275 		ute.uflags.dont_call_init_admin = user.uflags.dont_call_init_admin;
      276 	     end;
      277 
      278 	     if ute.ip_len > length (",direct") then
      279 		if substr (ute.init_proc,
      280 		     ute.ip_len - length (",direct") + 1,
      281 		     length (",direct")) = ",direct" then do;
      282 		     ute.uflags.dont_call_init_admin = TRUE;
      283 		     ute.ip_len = ute.ip_len - length (",direct");
      284 		end;
      285 
      286 /**** Now process the subsystem.  We may have it already from above */
      287 
      288 	     if ute.uflags.ss_given then do;
      289 		if ^ute.at.vinitproc then
      290 		     call Abort_Create (as_error_table_$illegal_ss_arg);
      291 		ss_len = ute.ss_len;
      292 	     end;
      293 	     else
      294 		if user.uflags.ss_given then do;	/* is it supplied in PDT? */
      295 		ss_len = user.ss_len;
      296 		subsystem = substr (user.initial_procedure, user.ip_len + 1,
      297 		     user.ss_len);
      298 	     end;
      299 	     else ss_len = -1;			/* not supplied at all */
      300 
      301 	     if ss_len ^= -1 then do;			/* we have a subsystem */
      302 		if ss_len + ute.ip_len > length (ute.init_proc) then do;
      303 						/* no room */
      304 		     if ute.uflags.ip_given then
      305 			call Abort_Create (as_error_table_$long_ip_arg);
      306 		     else call Abort_Create (as_error_table_$long_ss_arg);
      307 		end;
      308 		else do;
      309 		     substr (ute.init_proc, ute.ip_len + 1, ss_len) =
      310 			substr (subsystem, 1, ss_len);
      311 		     ute.ss_len = ss_len;
      312 		     ute.uflags.ss_given = TRUE;
      313 		end;
      314 	     end;
      315 	end;
      316 	return;
      317      end Setup_Initial_Procedure_And_Subsystem;
      318 
      319 Setup_Login_Ring:
      320      procedure ();
      321 
      322 dcl  ring		        fixed bin (3) automatic;
      323 
      324 	if user.low_ring < project.min_ring then
      325 	     call Log ("Raised min ring for ^a.^a from ^d (in PDTE) to ^d (in SATE).",
      326 		ute.person, ute.project, user.low_ring, project.min_ring);
      327 
      328 	if ute.initial_ring ^= -1 then		/* user specified it */
      329 	     ring = ute.initial_ring;
      330 	else ring = user.default_ring;		/* otherwise use PDT default */
      331 
      332 	ring = max (project.min_ring, user.low_ring, ring);
      333 	if ring <= 0 then
      334 	     ring = as_data_$dft_user_ring;
      335 
      336 	if login_server_process_request.minimum_ring_given then do;
      337 	     if ring < login_server_process_request.minimum_ring then do;
      338 		call Log ("Raised min ring for ^a.^a from ^d (in SATE/PDTE) to ^d (of Login Server)",
      339 		     ute.person, ute.project, ring,
      340 		     login_server_process_request.minimum_ring);
      341 		ring = login_server_process_request.minimum_ring;
      342 	     end;
      343 	end;
      344 
      345 	if ute.initial_ring ^= -1 then
      346 	     if ute.initial_ring < ring then
      347 		call Abort_Create (as_error_table_$ring_too_low);
      348 
      349 	if ring > as_data_$max_user_ring then
      350 	     ring = as_data_$max_user_ring;
      351 
      352 	ute.lowest_ring = max (project.min_ring, user.low_ring);
      353 	ute.initial_ring = ring;
      354 
      355 /**** Determine max user ring */
      356 
      357 	if user.high_ring > project.max_ring then
      358 	     call Log ("Lowered max ring for ^a.^a from ^d (in PDTE) to ^d (in SATE).",
      359 		ute.person, ute.project, user.high_ring, project.max_ring);
      360 
      361 	if project.max_ring <= 0 then
      362 	     ring = as_data_$dft_user_ring + 1;
      363 	else ring = project.max_ring;
      364 
      365 	ring = min (ring, user.high_ring, as_data_$max_user_ring);
      366 
      367 	if ring < ute.initial_ring then
      368 	     call Abort_Create (as_error_table_$ring_too_high);
      369 
      370 	ute.highest_ring = ring;
      371 
      372 	return;
      373      end Setup_Login_Ring;
      374 
      375 Setup_Outer_Module:
      376      procedure ();
      377 
      378 	if ute.outer_module ^= "" then
      379 	     if ^ute.at.vinitproc then
      380 		call Abort_Create (as_error_table_$illegal_om_arg);
      381 
      382 	if ute.outer_module = "" then do;
      383 	     ute.outer_module = user.outer_module;
      384 	     if ute.outer_module = "" |
      385 		ute.outer_module = as_data_$tty_dim then do;
      386 
      387 		if login_server_process_request.default_io_module ^= "" then
      388 		     ute.outer_module =
      389 			login_server_process_request.default_io_module;
      390 		else
      391 		     ute.outer_module = as_data_$tty_dim;
      392 	     end;
      393 	end;
      394 	return;
      395      end Setup_Outer_Module;
      396 
      397 Setup_Miscellaneous_Variables:
      398      procedure ();
      399 
      400 dcl  i		        fixed bin automatic;
      401 
      402 /**** Constraint process directory quota */
      403 
      404 	if project.pdir_quota > 0 then do;		/* there is a SAT limit */
      405 	     if user.pdir_quota > project.pdir_quota then
      406 		call Log ("Reduced pdir quota for ^a.^a from ^d (in PDTE) to ^d (in SATE).",
      407 		     ute.person, ute.project, user.pdir_quota,
      408 		     project.pdir_quota);
      409 	     ute.pdir_quota = min (project.pdir_quota, user.pdir_quota);
      410 	end;
      411 	else					/* no SAT limit */
      412 	     ute.pdir_quota = user.pdir_quota;
      413 
      414 /**** Copy various tables sizes from the PDT */
      415 
      416 	ute.lot_size = user.lot_size;
      417 	ute.kst_size = user.kst_size;
      418 	ute.cls_size = user.cls_size;
      419 
      420 /**** Determine user's load control weight */
      421 
      422 	ute.user_weight = -1;			/* not yet set */
      423 	do i = 1 to sat.uwt_size while (ute.user_weight = -1);
      424 	     if ute.init_proc = sat.uwt (i).initproc then
      425 		ute.user_weight = sat.uwt (i).units;
      426 	end;
      427 	if ute.user_weight = -1 then
      428 	     ute.user_weight = as_data_$default_weight;
      429 
      430 /**** Locate user's home directory */
      431 
      432 	if ute.home_dir ^= "" then			/* user supplied home directory? */
      433 	     if ^ute.at.vhomedir then			/* allowed */
      434 		call Abort_Create (as_error_table_$illegal_hd_arg);
      435 	     else ;
      436 	else ute.home_dir = user.home_dir;		/* use PDT default */
      437 
      438 /**** Process disconnection/saving checks. */
      439 
      440 	if ute.process_type = PT_INTERACTIVE then do;	/* only for interactive processes */
      441 	     if ute.at.save_on_disconnect & ute.at.disconnect_ok then
      442 		ute.uflags.save_if_disconnected = TRUE;
      443 	     else ute.uflags.save_if_disconnected = FALSE;
      444 	end;
      445 	return;
      446      end Setup_Miscellaneous_Variables;
      447 
      448 Check_With_Load_Control:
      449      procedure ();
      450 
      451 	call load_ctl_$check_for_process_creation (utep, code);
      452 	if code ^= 0 then
      453 	     call Abort_Create (code);
      454 	return;
      455      end Check_With_Load_Control;
      456 
      457 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      458 /*							       */
      459 /* Log:  log information about process creation restrictions in AS log.      */
      460 /*							       */
      461 /* Syntax:  call Log (ioa_ctl, args);				       */
      462 /*							       */
      463 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      464 
      465 Log:
      466      procedure () options (variable);
      467 
      468 dcl  cu_$arg_list_ptr       entry returns (ptr);
      469 dcl  sys_log_$general       entry (ptr);
      470 
      471 	sl_info = sl_info_msg;
      472 	sl_info.caller = ME;
      473 	sl_info.arg_list_ptr = cu_$arg_list_ptr ();
      474 	call sys_log_$general (addr (sl_info));
      475 
      476      end Log;
      477 
      478 /* format: off */
      479  /* BEGIN INCLUDE FILE ... answer_table.incl.pl1 */
  1     2 
  1     3 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  1     4 /*							       */
  1     5 /* The answer table has one entry per "login instance" whether completed or  */
  1     6 /* not.  It is connected to the Channel Definition Table by the pointer      */
  1     7 /* "channel".  The header is used mostly by dialup_.		       */
  1     8 /*							       */
  1     9 /* Programs which use this file must also include user_table_header.incl.pl1 */
  1    10 /*							       */
  1    11 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  1    12 
  1    13 /****^  HISTORY COMMENTS:
  1    14*  1) change(81-09-10,Kittlitz), approve(), audit(), install():
  1    15*     Replace anstbl.incl.pl1.
  1    16*  2) change(85-01-15,Swenson), approve(), audit(), install():
  1    17*     Add anstbl.session_uid_counter.
  1    18*  3) change(85-08-21,Coren), approve(), audit(), install():
  1    19*     Add anstbl.message_update_time and named constants for values of
  1    20*     anstbl.session, and to make all padding explicit.
  1    21*  4) change(85-08-23,Coren), approve(), audit(), install():
  1    22*     Change "entry" to a placeholder so as not to require
  1    23*     user_table_entry.incl.pl1.
  1    24*  5) change(86-06-29,Swenson), approve(87-07-13,MCR7741),
  1    25*     audit(87-04-14,GDixon), install(87-08-04,MR12.1-1056):
  1    26*     Added the flag login_server_present which indicates whether a login
  1    27*     server request has been received.  This is used to determine whether
  1    28*     dial_ctl_ should call uc_cleanup_network_dials_ (and thus
  1    29*     hpriv_connection_list_, which only exists with the MNA RPQ software).
  1    30*  6) change(87-04-14,GDixon), approve(87-07-13,MCR7741),
  1    31*     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1056):
  1    32*      A) Moved constants for ute.pw_flags.mask_ctl into
  1    33*         user_table_entry.incl.pl1.
  1    34*      B) Added common table header to all user tables.
  1    35*                                                   END HISTORY COMMENTS */
  1    36 
  1    37 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  1    38 /*							       */
  1    39 /* The anstbl structure below is divided into sections.  Each section begins */
  1    40 /* with a comment describing the elements in the section.  Elements are      */
  1    41 /* placed within a section, based upon their function or the programs that   */
  1    42 /* use them.  Each section begins on a double word and is an even number of  */
  1    43 /* words long.						       */
  1    44 /*							       */
  1    45 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  1    46 
  1    47 
  1    48 
  1    49 /* format: style4 */
  1    50 
  1    51 dcl  ANSTBL_version_4 static options (constant) init (4);	/* version of this declaration */
  1    52 
  1    53 dcl  ansp ptr automatic init (null);
  1    54 
  1    55 dcl  1 anstbl based (ansp) aligned,			/* Structure of answer table */
  1    56        2 header like ut_header,			/* Header common to all user tables. */
  1    57 
  1    58 /* Counter elements. */
  1    59        2 nlin fixed bin,				/* number of active lines */
  1    60        2 mxlin fixed bin,				/* maximum number of active lines */
  1    61        2 n_users fixed bin,				/* number of logged-in users */
  1    62        2 max_users fixed bin,				/* maximum number of users allowed */
  1    63        2 n_units fixed bin,				/* number of logged in units */
  1    64        2 max_units fixed bin,				/* maximum number of units */
  1    65        2 n_sessions fixed bin,			/* number of Multics sessions */
  1    66        2 n_pad fixed bin,
  1    67 
  1    68 /* Name elements. */
  1    69        2 sysdir char (64) unal,			/* name of main system control directory */
  1    70        2 as_tty char (8) unal,			/* name of main answering service device. */
  1    71 
  1    72 /* Login elements. */
  1    73        2 login_word char (8) unal,			/* login word if special_session=1  */
  1    74        2 session char (8) unal,			/* session indicator */
  1    75        2 special_message char (128) unal,		/* message to be printed for special session */
  1    76        2 message_update_time fixed bin (71),		/* time at which special_message was last updated */
  1    77        2 message_lng fixed bin,			/* length of special message */
  1    78        2 login_pad fixed bin,
  1    79 
  1    80 /* Table update elements. */
  1    81        2 lock_count fixed bin,			/* global lock for all system control tables */
  1    82        2 update_pending bit (1) aligned,		/* flag indicating that update is required */
  1    83        2 update_channel fixed binary (71),		/* event channel of update procedure */
  1    84        2 acct_update_chn fixed bin (71) aligned,		/* Timer IPC channel */
  1    85        2 acct_last_update_time fixed bin (71) aligned,	/* Time of last accounting update */
  1    86        2 acct_alarm_fail fixed bin,			/* non-zero if alarm has failed */
  1    87        2 update_pad fixed bin,
  1    88 
  1    89 /* dialup_ data values. */
  1    90        2 current_time fixed bin (71),			/* Time of last transaction */
  1    91        2 processid_index fixed bin (18),		/* unique index for process id generation */
  1    92        2 session_uid_counter fixed bin (35),		/* current session_uid */
  1    93 
  1    94 /* load_ctl_ elements. */
  1    95        2 shift fixed bin,				/* Shift, set by act_ctl_ */
  1    96        2 auto_maxu fixed bin,				/* 0 = manual, 1 = config, 2 = load-level */
  1    97        2 extra_units fixed bin,			/* Total daemon and abs units. */
  1    98 						/* load_ctl_ load leveling desired response range: */
  1    99        2 response_high fixed bin,			/* bad if user response time slower than this */
  1   100        2 response_low fixed bin,			/* bad if user response time faster than this */
  1   101        2 load_ctl_pad fixed bin,
  1   102 
  1   103 /* Login server request server data. */
  1   104        2 ls_request_server_event_channel fixed bin (71),	/* channel for login server requests */
  1   105        2 ls_request_server_process_id bit (36) aligned,	/* process serving login server requests */
  1   106        2 login_server_present bit (1) aligned,		/* On IFF a login server request has been processed */
  1   107 
  1   108        2 entry_pad (28) fixed bin,			/* pad to 128 words */
  1   109        2 entry (0 refer (anstbl.current_size)),		/* user entries */
  1   110          3 contents (UTE_SIZE) fixed bin;
  1   111 
  1   112 /* constants */
  1   113 
  1   114 /* values for anstbl.session */
  1   115 
  1   116 dcl  (AT_NORMAL init ("normal  "),
  1   117      AT_SPECIAL init ("special "),
  1   118      AT_SHUTDOWN init ("shutdown")) char (8) internal static options (constant);
  1   119 
  1   120 dcl  UTE_SIZE fixed bin internal static initial (300);
  1   121 
  1   122 /* END INCLUDE FILE ... answer_table.incl.pl1 */
      479 
      480  /* BEGIN INCLUDE FILE ... as_data_.incl.pl1 ... */
  2     2 
  2     3 /* format: style4 */
  2     4 
  2     5 /* This file must be kept in sync with as_data_.alm */
  2     6 
  2     7 /****^  HISTORY COMMENTS:
  2     8*  1) change(86-09-21,Beattie), approve(86-09-22,MCR7542),
  2     9*     audit(86-10-31,Brunelle), install(86-11-12,MR12.0-1211):
  2    10*     Remove references to the 963 and 029 preaccess commands and remove support
  2    11*     for ARDS, 202_ETX, 2741 and 1050 in system interfaces.
  2    12*  2) change(86-09-25,Swenson), approve(87-07-20,MCR7737),
  2    13*     audit(87-07-20,GDixon), install(87-08-04,MR12.1-1056):
  2    14*     Add references to as_data_ entrypoints added for Login Server.
  2    15*  3) change(87-03-03,Brunelle), approve(87-07-20,MCR7697),
  2    16*     audit(87-07-20,GDixon), install(87-08-04,MR12.1-1056):
  2    17*     Added new user signal field of inacrcvd (14) to handle inactivity response
  2    18*     from user.
  2    19*                                                   END HISTORY COMMENTS */
  2    20 
  2    21 dcl  as_data_$BS char (1) aligned ext static;		/* BACKSPACE character */
  2    22 dcl  as_data_$CR char (1) aligned ext static;		/* CARRIAGE RETURN character */
  2    23 dcl  as_data_$abs_dim char (32) ext static;		/* absentee DIM */
  2    24 dcl  as_data_$acct_update_priority fixed bin ext static;	/* accounting update IPC priority */
  2    25 dcl  as_data_$acsdir char (168) ext static;		/* Access Control Segment directory */
  2    26 dcl  as_data_$ansp ptr ext static;			/* answer_table */
  2    27 dcl  as_data_$as_procid bit (36) aligned ext static;	/* Answering Service process id */
  2    28 dcl  as_data_$as_ring fixed bin (3) ext static;		/* AS operating ring */
  2    29 dcl  as_data_$as_tty char (6);			/* AS master tty channel */
  2    30 dcl  as_data_$asmtp ptr ext static;			/* AS meter table */
  2    31 dcl  as_data_$autp ptr ext static;			/* absentee_user_table */
  2    32 dcl  as_data_$buzzardp ptr ext static;			/* dpg_ list of buteo processes */
  2    33 dcl  as_data_$cdtp ptr ext static;			/* CDT */
  2    34 dcl  as_data_$default_weight fixed bin (35) ext;		/* default user process load control weight */
  2    35 dcl  as_data_$devtabp ptr ext static;			/* device_table */
  2    36 dcl  as_data_$dft_user_ring fixed bin (3) ext static;	/* default user ring */
  2    37 dcl  as_data_$dutp ptr ext static;			/* daemon_user_table */
  2    38 dcl  as_data_$g115_dim char (32) ext static;
  2    39 dcl  as_data_$lct_initialized bit (1) aligned ext static;	/* LCT allocated in ring 0 */
  2    40 dcl  as_data_$lct_size fixed bin ext static;		/* CDT tty channels + spares */
  2    41 dcl  as_data_$max_user_ring fixed bin (3) ext static;	/* maximum user ring */
  2    42 dcl  as_data_$mgtp ptr ext static;			/* master group table */
  2    43 dcl  as_data_$mrd_dim char (32) ext static;		/* daemon's message routing DIM */
  2    44 dcl  as_data_$ntty_dim char (32) ext static;		/* network connection DIM */
  2    45 dcl  as_data_$pdtdir char (168) ext static;		/* PDT directory */
  2    46 dcl  as_data_$pit_ptr ptr ext static;			/* pit_temp_ */
  2    47 dcl  as_data_$rcpdir char (168) ext static;		/* RCP directory */
  2    48 dcl  as_data_$request_priority fixed bin ext static;
  2    49 dcl  as_data_$rs_ptrs (0:9) ptr ext static;		/* rate_structures */
  2    50 dcl  as_data_$rtdtp ptr ext static;			/* RTDT */
  2    51 dcl  as_data_$sat_htp ptr ext static;			/* SAT hash table */
  2    52 dcl  as_data_$satp ptr ext static;			/* SAT */
  2    53 dcl  as_data_$suffix (0:9) char (2) unaligned ext static;
  2    54 dcl  as_data_$sysdir char (168) ext static;		/* system control directory */
  2    55 dcl  as_data_$teens_suffix (10:19) char (2) unaligned ext static;
  2    56 dcl  as_data_$terminet_tabs_string char (144) varying ext static;
  2    57 dcl  as_data_$tty_dim char (32) ext static;		/* standard interactive DIM */
  2    58 dcl  as_data_$update_priority fixed bin ext static;	/* ??? */
  2    59 dcl  as_data_$version char (8) ext static;		/* AS version */
  2    60 dcl  as_data_$whoptr ptr ext static;			/* whotab */
  2    61 
  2    62 dcl  1 as_data_$login_args aligned ext static,		/* control arguments for login */
  2    63        2 n_login_args fixed bin,
  2    64        2 pad fixed bin,
  2    65        2 login_args (55 /* as_data_$login_args.n_login_args */) char (24) unaligned;
  2    66 
  2    67 dcl  1 as_data_$signal_types ext static aligned,		/* IPC process control signals */
  2    68        2 n_signals fixed bin,
  2    69        2 pad fixed bin,
  2    70        2 signals (14 /* as_data_$signal_types.n_signals */) char (8) unaligned;
  2    71 
  2    72 dcl  1 as_data_$system_signal_types ext static aligned,	/* IPC process control signals */
  2    73        2 n_system_signals fixed bin,
  2    74        2 pad fixed bin,
  2    75        2 system_signals (10 /* as_data_$system_signal_types.n_system_signals */) char (8) unaligned;
  2    76 
  2    77 dcl  as_data_$login_words fixed bin ext static aligned,
  2    78 						/* interactive login words */
  2    79      1 as_data_login_words aligned based (addr (as_data_$login_words)),
  2    80        2 n_words fixed bin,
  2    81        2 pad fixed bin,
  2    82        2 words (0 refer (as_data_login_words.n_words)) char (16) unaligned;
  2    83 
  2    84 dcl  as_data_$debug_flag bit (1) aligned external static;
  2    85 dcl  as_data_$ls_request_server_info_ptr ptr external static;
  2    86 dcl  as_data_$ls_message_buffer_cur_lth fixed bin (18) external static;
  2    87 dcl  as_data_$ls_message_buffer_max_lth fixed bin (18) external static;
  2    88 dcl  as_data_$ls_message_buffer_ptr ptr external static;
  2    89 
  2    90 /* END INCLUDE FILE ... as_data_.incl.pl1 ... */
      480 
      481  /* BEGIN INCLUDE FILE ... dialup_values.incl.pl1 */
  3     2 
  3     3 /* format: style4 */
  3     4 
  3     5 /* Values for "cdte.tra_vec" used by dialup_ and others. */
  3     6 
  3     7 /* Modified by T. Casey April 1976 to add WAIT_NEW_PASSWORD
  3     8*   -		in 1977 and 1978 to add WAIT_(GREETING_MSG DELETE_CHANNEL)
  3     9*   -		and in October 1979 to add WAIT_CONNECT_REQUEST
  3    10*   Modified by Robert Coren in May 1981 to add TANDD_ATTACH values and 
  3    11*		WAIT_DISCARD_WAKEUP
  3    12*   Modified by T. Casey, July 1981, for MR9.0, to add WAIT_BEFORE_HANGUP.
  3    13*   Modified by E. N. Kittlitz, July 1982, to add TTY_MASKED.
  3    14**/
  3    15 
  3    16 /****^  HISTORY COMMENTS:
  3    17*  1) change(87-04-20,GDixon), approve(87-07-13,MCR7741),
  3    18*     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1056):
  3    19*     Add constant arrays naming cdte.state, cdte.tra_vec and ute.active values.
  3    20*  2) change(87-05-11,GDixon), approve(87-07-13,MCR7741),
  3    21*     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1056):
  3    22*     Add named constants for instance tags.
  3    23*                                                   END HISTORY COMMENTS */
  3    24 
  3    25 dcl  (WAIT_DIALUP init (1),				/* Channel waiting for dialup. */
  3    26      WAIT_ANSWERBACK initial (2),			/* WRU sent, waiting for reply */
  3    27      WAIT_LOGIN_LINE init (3),			/* Greeting typed, wait for login command. */
  3    28      WAIT_LOGIN_ARGS init (4),			/* Want rest of login line */
  3    29      WAIT_OLD_PASSWORD init (5),			/* "-cpw" was specified. Wait for old password. */
  3    30      WAIT_PASSWORD init (6),				/* Waiting for password. (If "-cpw", repeat of new one.) */
  3    31      WAIT_NEW_PASSWORD init (7),			/* "-cpw" was specified. Wait for new password */
  3    32      WAIT_LOGOUT_SIG init (8),			/* Channel is hooked up. Wait for logout. */
  3    33      WAIT_LOGOUT init (9),				/* A logout has been requested. Wait for process to die */
  3    34      WAIT_LOGOUT_HOLD init (10),			/* As above but don't hang up when it dies. */
  3    35      WAIT_DETACH init (11),				/* As above but ignore channel afterwards. */
  3    36      WAIT_NEW_PROC init (12),				/* As above but make new process and continue. */
  3    37      WAIT_REMOVE init (13),				/* As above but completely expunge channel. */
  3    38      WAIT_FIN_PRIV_ATTACH init (14),			/* When channel dials up, connect it to user */
  3    39      WAIT_DIAL_RELEASE init (15),			/* Waiting for master process to release. */
  3    40      WAIT_DIAL_OUT init (16),				/* Waiting for auto call to complete */
  3    41      WAIT_HANGUP init (17),				/* Wait for the hangup event to occur for a channel */
  3    42      WAIT_SLAVE_REQUEST init (18),			/* Ignore line until someone asks */
  3    43      WAIT_GREETING_MSG init (19),			/* Print greeting message and wait for login line */
  3    44      WAIT_DELETE_CHANNEL init (20),			/* Channel deleted - mark cdte after process is destroyed */
  3    45      WAIT_CONNECT_REQUEST init (21),			/* logged in; awaiting request re disconnected processes */
  3    46      WAIT_TANDD_HANGUP init (22),			/* when channel hangs up, proceed with t & d attachment */
  3    47      WAIT_FIN_TANDD_ATTACH init (23),			/* when channel dials up, finish t & d attachment */
  3    48      WAIT_DISCARD_WAKEUPS init (24),			/* disregard all wakeups on channel */
  3    49      WAIT_BEFORE_HANGUP init (25),			/* allow output to print before hanging up */
  3    50      WAIT_DESTROY_REQUEST init (26),			/* waiting to continue with destroy request after process has destroyed itself */
  3    51      WAIT_NEW_PROC_REQUEST init (27)			/* waiting to continue with new_proc request after process has destroyed itself */
  3    52      ) fixed bin internal static options (constant);
  3    53 
  3    54 dcl  TRA_VEC_VALUES (0:13) char (32) aligned int static options (constant) init
  3    55 						/* names of ute.destroy_flag values */
  3    56 	("", "wait dialup", "wait answerback", "wait login line", /*  0-3  */
  3    57 	"wait login args", "wait old password", "wait password",  /*  4-6  */
  3    58 	"wait new password", "wait logout signal", "wait logout", /*  7-9  */
  3    59 	"wait logout hold", "wait detach", "wait new proc",       /* 10-12 */
  3    60 	"wait remove");				        /*   -13 */
  3    61 
  3    62 /* Values for "cdte.state", typewriter state. */
  3    63 
  3    64 dcl  (TTY_MASKED init (-1),				/* Terminal channel is there, but masked by MCS */
  3    65      TTY_HUNG init (1),				/* Terminal channel is there, but dead. */
  3    66      TTY_KNOWN init (2),				/* Channel being "listened" to, awaiting dialup. */
  3    67      TTY_DIALED init (5)				/* Channel is dialed up. This is normal state. */
  3    68      ) fixed bin internal static options (constant);
  3    69 
  3    70 dcl  STATE_VALUES (-1:5) char (15) aligned int static options (constant) init
  3    71 						/* names of cdte.state values */
  3    72 	("masked", "dead", "hung up", "listening", "", "", "dialed up");
  3    73 
  3    74 /* Values for "cdte.in_use" and "ate.active" */
  3    75 
  3    76 dcl  (NOW_FREE init (0),				/* Entry is empty. */
  3    77      NOW_HUNG_UP init (1),				/* Entry is usable but tty is hung up. */
  3    78      NOW_LISTENING init (2),				/* Entry is waiting for phone call. */
  3    79      NOW_DIALED init (3),				/* Entry is connected but login not complete. */
  3    80      NOW_LOGGED_IN init (4),				/* Entry is logged in but no process. */
  3    81      NOW_HAS_PROCESS init (5),			/* Entry has a valid process. */
  3    82      NOW_DIALING init (6),				/* Entry (auto_call line) is dialing */
  3    83      NOW_DIALED_OUT init (7)				/* Entry (auto_call line) is in use */
  3    84      ) fixed bin internal static options (constant);
  3    85 
  3    86 dcl  ACTIVE_VALUES (0:5) char (18) aligned int static options (constant) init
  3    87 						/* names of ute.active values */
  3    88 	("free", "hung-up", "listening", "dialed", "logged in, no proc", "logged in & proc");
  3    89 
  3    90 
  3    91 /**** Values for ute.tag */
  3    92 
  3    93 dcl (TAG_INTERACTIVE init("a"),
  3    94      TAG_UFT init("f"),
  3    95      TAG_ABSENTEE init("m"),
  3    96      TAG_PROXY init("p"),
  3    97      TAG_DAEMON init("z")
  3    98      ) char(1) int static options(constant);
  3    99 
  3   100 
  3   101 /**** Following are constants used to indicate to the process termination
  3   102*      handler the reason for the process termination.  They are used by
  3   103*      uc_proc_term_handler_, as well as uc_ls_new_proc_request_ and
  3   104*      uc_ls_destroy_request_. */
  3   105 
  3   106 dcl  (
  3   107      PT_FPE initial (1),
  3   108      PT_LOGOUT initial (4),
  3   109      PT_NEW_PROC_AUTH initial (13),
  3   110      PT_HANGUP initial (20),
  3   111      PT_SHUTDOWN initial (21),
  3   112      PT_BUMP initial (22),
  3   113      PT_ALARM initial (23),
  3   114      PT_DETACH initial (24),
  3   115      PT_UNBUMP initial (25),
  3   116      PT_OPERATOR_TERMINATE initial (27),
  3   117      PT_DESTROY_REQUEST initial (30),
  3   118      PT_NEW_PROC_REQUEST initial (31)
  3   119      ) fixed bin (17) internal static options (constant);
  3   120 
  3   121 /**** Values for ute.preempted:
  3   122*  -1  user unbumped after term signal sent
  3   123*   0  user unbumped; ignore alarm___
  3   124*   1  value internally used in load_ctl_
  3   125*   2  user bumped; when alarm___ comes in, send term signal
  3   126*   3  term signal sent; destroy process if termsgnl, alarm___, or cpulimit 
  3   127*      signals come in
  3   128*   4  user bumped; process sick, so destroy without sending term signal
  3   129*   5  trm_ signal sent, termsgnl received; (if still 3, we never got the 
  3   130*      termsgnl).						       */
  3   131 
  3   132 dcl  (
  3   133      PREEMPT_UNBUMP initial (-1),
  3   134      PREEMPT_UNBUMP_IGNORE_ALARM initial (0),
  3   135      PREEMPT_LOAD_CTL initial (1),
  3   136      PREEMPT_BUMPED initial (2),
  3   137      PREEMPT_TERM_SENT initial (3),
  3   138      PREEMPT_BUMPED_NO_TERM initial (4),
  3   139      PREEMPT_TERMSGNL_RECEIVED initial (5)
  3   140      ) fixed bin (17) internal static options(constant);
  3   141 
  3   142 dcl  PREEMPT_VALUES (-1:5) char(28) varying int static options(constant) init(
  3   143 	"unbumped",
  3   144 	"not bumped, ignore alarm___",
  3   145 	"load_ctl_",
  3   146 	"bumped",
  3   147 	"bumped, trm_ sent",
  3   148 	"bumped without trm_",
  3   149 	"bumped, termsgnl received");
  3   150 
  3   151 /* END INCLUDE FILE ... dialup_values.incl.pl1 */
      481 
      482  /* BEGIN INCLUDE FILE ... login_server_messages.incl.pl1 */
  4     2 
  4     3 /****^  HISTORY COMMENTS:
  4     4*  1) change(86-06-30,Coren), approve(86-06-30,MCR7415),
  4     5*     audit(86-07-02,Margolin), install(86-07-11,MR12.0-1092):
  4     6*     Initial implementation.
  4     7*  2) change(87-04-16,GDixon), approve(87-07-13,MCR7679),
  4     8*     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1056):
  4     9*      A) Add REQUEST_TYPES and RESPONSE_TYPES arrays.
  4    10*      B) Add login_server_validate_response.last_incorrect_password.time.
  4    11*      C) Add user_connection_info.line_type.
  4    12*      D) Add login_server_process_request.minimum_ring.
  4    13*  3) change(87-05-14,GDixon), approve(87-07-13,MCR7737),
  4    14*     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1056):
  4    15*      A) Add login_server_process_response.brief.
  4    16*      B) Add login_server_list_response.initial_ring.
  4    17*      C) Separate login_server_process_response into fixed and variable parts.
  4    18*      D) Move user_connection_info into login_server_request_header.
  4    19*                                                   END HISTORY COMMENTS */
  4    20 
  4    21 /* This include file defines all the structures passed in message segments
  4    22*   between a login server process and the Initializer (or "answering service")
  4    23*   process. For convenience, messages from the server to the initializer,
  4    24*   passed using the send_ls_request_ subroutine, are called "requests"; 
  4    25*   messages from the initializer to the server, passed using the user_message_ 
  4    26*   mechanism, are called "responses".
  4    27**/
  4    28 
  4    29 /* Request types */
  4    30 
  4    31 dcl  (LS_VALIDATE_REQUEST initial (1),			/* validate user ID and password */
  4    32       LS_PROCESS_REQUEST initial (2),			/* create or connect to a process */
  4    33       LS_LIST_REQUEST initial (3),			/* list disconnected processes */
  4    34       LS_DIAL_REQUEST initial (4),			/* find a dial server */
  4    35       LS_DISCONNECT_REQUEST initial (5),		/* report disconnection of a login channel */
  4    36       LS_LOGOUT_REQUEST initial (6),			/* discard UTE (end of dialogue) */
  4    37       LS_OPERATOR_REQUEST initial (7))			/* log the user in as an operator */
  4    38       fixed bin internal static options (constant);
  4    39 
  4    40 dcl  LS_REQUEST_TYPES        (7) char (10) internal static options (constant) initial
  4    41 		        (
  4    42 		        "validate",
  4    43 		        "process",
  4    44 		        "list",
  4    45 		        "dial",
  4    46 		        "disconnect",
  4    47 		        "logout",
  4    48 		        "operator");
  4    49 
  4    50 dcl  ls_request_ptr pointer;
  4    51 
  4    52 /* common header for all requests */
  4    53 
  4    54 dcl 1 ls_request_header aligned based (ls_request_ptr),
  4    55     2 header_version char (8),			/* version for this header */
  4    56     2 request_version char (8),			/* varies depending on the request */
  4    57     2 request_type fixed bin,
  4    58     2 pad1 bit (36),
  4    59     2 reply_event_channel fixed bin (71),		/* event channel over which reply_message should be sent */
  4    60     2 reply_handle bit (72) aligned,			/* used for dispatching response */
  4    61     2 connection_info like user_connection_info;		/* connection making this request. */
  4    62 
  4    63 dcl  LS_REQUEST_HEADER_VERSION_1 char (8) initial ("lsrh0001") internal static options (constant);
  4    64 
  4    65 dcl 1 user_connection_info aligned based,		/* common info passed in most requests */
  4    66     2 connection_name char (32),
  4    67     2 access_class_range (2) bit (72),
  4    68     2 terminal_type char (32),
  4    69     2 terminal_id char (4),
  4    70     2 line_type fixed bin;
  4    71 
  4    72 
  4    73 
  4    74 /* "validate" request: validate user ID and password */
  4    75 
  4    76 dcl 1 login_server_validate_request aligned based (ls_request_ptr),
  4    77     2 header like ls_request_header,			/* request_type = LS_VALIDATE_REQUEST */
  4    78     2 current_password char (8),			/* scrambled */
  4    79     2 authorization bit (72),				/* only valid if auth_given = "1"b */
  4    80     2 terminate_event_channel fixed bin (71),		/* event channel to notify server when process terminates */
  4    81     2 person_id char (22),				/* as specified in login line */
  4    82     2 project_id char (9),				/* likewise, might be null string */
  4    83     2 network_connection_type fixed bin,		/* see below for values */
  4    84     2 new_password char (8),				/* only valid if change_password = "1"b */
  4    85     2 flags,
  4    86       3 gpw bit (1) unaligned,			/* password generated in response to -generate_password */
  4    87       3 auth_given bit (1) unaligned,			/* -authorization specified */
  4    88       3 anonymous bit (1) unaligned,			/* "enterp" request */
  4    89       3 anon_no_password bit (1) unaligned,		/* "enter" request */
  4    90       3 change_password bit (1) unaligned,		/* gave -cpw or -gpw */
  4    91       3 change_default_auth bit (1) unaligned,		/* gave -change_default_authorization */
  4    92       3 change_default_proj bit (1) unaligned,		/* gave -change_default_project */
  4    93       3 operator bit (1) unaligned,			/* gave -operator */
  4    94       3 pad bit (28) unaligned;
  4    95 
  4    96 
  4    97 dcl  LS_VALIDATE_REQUEST_VERSION_1 char (8) internal static options (constant) initial ("lsvr0001");
  4    98 
  4    99 
  4   100 
  4   101 /* "process" request: create a process or reconnect to an existing process for the specified user */
  4   102 
  4   103 dcl 1 login_server_process_request aligned based (ls_request_ptr),
  4   104     2 fixed_part,					/* to allow for automatic copies */
  4   105       3 header like ls_request_header,			/* request_type = LS_PROCESS_REQUEST */
  4   106       3 handle bit (72),				/* as provided in validate_response */
  4   107       3 person_id char (22),				/* the real one */
  4   108       3 project_id char (9),				/* likewise */
  4   109       3 project_pad fixed bin,
  4   110       3 command_type fixed bin,			/* login, connect, etc.; see below for names */
  4   111       3 process_number fixed bin,			/* 0 if unspecified or irrelevant */
  4   112       3 default_io_module char (32),			/* I/O module to use if no outer_module specified */
  4   113       3 switch_flags,				/* used to indicate if "switch"-type control args were specified */
  4   114         4 warn_given bit (1) unaligned,
  4   115         4 force_given bit (1) unaligned,
  4   116         4 save_given bit (1) unaligned,
  4   117         4 preempt_given bit (1) unaligned,
  4   118         4 brief_given bit (1) unaligned,
  4   119         4 pad2 bit (31) unaligned,
  4   120       3 switch_values,				/* these are only valid if corresponding bit in switch_flags is on */
  4   121         4 warn bit (1) unaligned,
  4   122         4 force bit (1) unaligned,
  4   123         4 save_on_disconnect bit (1) unaligned,
  4   124         4 preempt bit (1) unaligned,
  4   125         4 brief bit (1) unaligned,			/* "0"b & brief_given => -long */
  4   126         4 pad3 bit (31) unaligned,
  4   127       3 other_flags,
  4   128         4 init_ring_given bit (1) unaligned,		/* "1"b if -ring */
  4   129         4 minimum_ring_given bit (1) unaligned,		/* "1"b if MNA terminal interface ring > 1 */
  4   130         4 immediate bit (1) unaligned,			/* "1"b => -new_proc (or -destroy) -immediate */
  4   131         4 no_start_up bit (1) unaligned,		/* "1"b if -no_start_up */
  4   132         4 pad4 bit (32) unaligned,
  4   133       3 initial_ring fixed bin,			/* valid iff init_ring_given = "1"b */
  4   134       3 minimum_ring fixed bin,			/* ring in which MNA terminal mgr operates */
  4   135       3 home_dir char (168),				/* null if not specified */
  4   136       3 outer_module char (32),			/* likewise */
  4   137       3 process_overseer char (168),			/* likewise */
  4   138       3 subsystem char (168),				/* likewise */
  4   139       3 n_args fixed bin,				/* how many arguments specified after -ag; if 0, ignore the rest of the structure */
  4   140     2 login_arguments,				/* variable part, describes stuff after -ag */
  4   141       3 arg_string_length fixed bin (21),
  4   142       3 args (ls_process_request_n_args refer (login_server_process_request.n_args)),
  4   143         4 start_index fixed bin (21),			/* position in arg_string at which arg (i) starts */
  4   144         4 arg_length fixed bin (21),			/* length of arg (i) */
  4   145       3 arg_string char (ls_process_request_arg_string_length refer (login_server_process_request.arg_string_length));
  4   146 
  4   147 dcl ls_process_request_n_args fixed bin;
  4   148 dcl ls_process_request_arg_string_length fixed bin (21);
  4   149 
  4   150 dcl  LS_PROCESS_REQUEST_VERSION_1 char (8) internal static options (constant) initial ("lspr0001");
  4   151 
  4   152 
  4   153 
  4   154 /* "list" request: list the user's disconnected processes, if any */
  4   155 
  4   156 dcl 1 login_server_list_request aligned based (ls_request_ptr),
  4   157     2 header like ls_request_header,			/* request_type = LS_LIST_REQUEST */
  4   158     2 handle bit (72);
  4   159 
  4   160 dcl  LS_LIST_REQUEST_VERSION_1 char (8) internal static options (constant) initial ("lslr0001");
  4   161 
  4   162 
  4   163 
  4   164 /* "dial" request: find a process to accept a dial */
  4   165 
  4   166 /* Note: because a dial request may or may not have been preceded
  4   167*   by a validate request/response, the initializer_handle may be null.
  4   168**/
  4   169 
  4   170 dcl 1 login_server_dial_request aligned based (ls_request_ptr),
  4   171     2 header like ls_request_header,			/* request_type = LS_DIAL_REQUEST */
  4   172     2 initializer_handle bit (72),			/* as provided in validate_response (if any) */
  4   173     2 terminate_event_channel fixed bin (71),		/* event channel to wake up login server when master process terminates */
  4   174     2 dial_qualifier char (22),
  4   175     2 person_id char (22),				/* null if not specified */
  4   176     2 project_id char (9),				/* likewise */
  4   177     2 user_person_id char (22),			/* if -user was specified, otherwise "" */
  4   178     2 user_project_id char (9);			/* likewise */
  4   179 
  4   180 dcl LS_DIAL_REQUEST_VERSION_1 char (8) internal static options (constant) initial ("lsdr0001");
  4   181 
  4   182 
  4   183 
  4   184 /* "disconnect" request: report that a login channel has disconnected */
  4   185 /* Note: this message is sent if the connection is broken either during the login dialogue
  4   186*   or later on when the process was using it */
  4   187 
  4   188 dcl 1 login_server_disconnect_request aligned based (ls_request_ptr),
  4   189     2 header like ls_request_header,			/* request_type = LS_DISCONNECT_REQUEST */
  4   190     2 handle bit (72),				/* from original validate_response */
  4   191     2 process_id bit (36);				/* ""b if no process established */
  4   192 
  4   193 dcl LS_DISCONNECT_REQUEST_VERSION_1 char (8) internal static options (constant) initial ("lsdc0001");
  4   194 
  4   195 
  4   196 
  4   197 /* "logout" request: indicates that user entered the "logout" request, ending the dialogue; does not require any response */
  4   198 
  4   199 dcl 1 login_server_logout_request aligned based (ls_request_ptr),
  4   200     2 header like ls_request_header,			/* request_type = LS_LOGOUT_REQUEST */
  4   201     2 handle bit (72);
  4   202 
  4   203 dcl LS_LOGOUT_REQUEST_VERSION_1 char (8) internal static options (constant) initial ("lslg0001");
  4   204 
  4   205 
  4   206 
  4   207 /* "operator" request: sign the user on as an operator, the result of either
  4   208*   "login -operator" or "dial system". Note that in the latter case, there may
  4   209*   not have been a validate request (if the -user control argument wasn't specified),
  4   210*    in which case initializer_handle is null, and the person_id and project_id
  4   211*    are blank.
  4   212**/
  4   213 
  4   214 dcl 1 login_server_operator_request aligned based (ls_request_ptr),
  4   215     2 header like ls_request_header,			/* request_type = LS_OPERATOR_REQUEST */
  4   216     2 initializer_handle bit (72) aligned,		/* as provided in validate_response (if any) */
  4   217     2 terminate_event_channel fixed bin (71),		/* event channel for wakeup when connection is dropped */
  4   218     2 person_id char (22),				/* likewise */
  4   219     2 project_id char (9),				/* likewise */
  4   220     2 virtual_channel char (32);			/* if -virtual_channel specified, otherwise "" */
  4   221 
  4   222 dcl  LOGIN_SERVER_OPERATOR_REQUEST_VERSION_1 char (8) internal static options (constant) initial ("lsor0001");
  4   223 
  4   224 
  4   225 
  4   226 /* Response types */
  4   227 
  4   228 dcl (LS_UNKNOWN_RESPONSE initial (100),			/* unknown response type. */
  4   229      LS_VALIDATE_RESPONSE initial (101),		/* response to validation request */
  4   230      LS_PROCESS_RESPONSE initial (102),			/* response to process request */
  4   231      LS_LIST_RESPONSE initial (103),			/* response to list request */
  4   232      LS_DIAL_RESPONSE initial (104),			/* response to dial request */
  4   233      LS_TERMINATION_RESPONSE initial (105),		/* to notify server of a logout */
  4   234      LS_NEW_PROC_RESPONSE initial (106),		/* to notify server of process termination */
  4   235      LS_OPERATOR_RESPONSE initial (107))		/* response to operator request */
  4   236 	fixed bin internal static options (constant);
  4   237 
  4   238 dcl  LS_RESPONSE_TYPES        (100:107) char (10) internal static options (constant) initial
  4   239 		        (
  4   240 		        "UNKNOWN",
  4   241 		        "validate",
  4   242 		        "process",
  4   243 		        "list",
  4   244 		        "dial",
  4   245 		        "terminate",
  4   246 		        "new_proc",
  4   247 		        "operator");
  4   248 
  4   249 /* NOTE: the server_handle is not included in the response structures because 
  4   250*   it is provided in the user_message_ structures */
  4   251 
  4   252 
  4   253 
  4   254 dcl ls_response_ptr pointer;
  4   255 
  4   256 /* common header for all responses */
  4   257 
  4   258 dcl 1 login_server_response_header aligned based (ls_response_ptr),
  4   259     2 message_type fixed bin,
  4   260     2 header_pad bit (36),				/* force doubleword alignment */
  4   261     2 version char (8);
  4   262 
  4   263 
  4   264 
  4   265 /* "validate" response: indicate whether user_id/password is valid */
  4   266 
  4   267 dcl 1 login_server_validate_response aligned based (ls_response_ptr),
  4   268     2 header like login_server_response_header,		/* message_type = LS_VALIDATE_RESPONSE */
  4   269     2 handle bit (72),				/* to be provided by the server in subsequent */
  4   270 						/* messages for the same connection */		
  4   271     2 authorization bit (72),				/* default if none was supplied */
  4   272     2 authorization_range (2) bit (72),			/* authorization range permitted for this user */
  4   273     2 status_code fixed bin (35),			/* 0 iff user is validated */
  4   274     2 person_id char (22),				/* primary name from the PNT */
  4   275     2 project_id char (9),				/* primary name from the PNT or PDT */
  4   276     2 n_disconnected_processes fixed bin,		/* number of disconnected processes for specified user */
  4   277     2 validate_pad fixed bin,
  4   278     2 previous_login_info,				/* for printing login message */
  4   279       3 time fixed bin (71),
  4   280       3 terminal_type char (32),
  4   281       3 terminal_id char (4),
  4   282     2 incorrect_passwords fixed bin,			/* number of times password given incorrectly */
  4   283     2 last_incorrect_password,			/* where it came from */
  4   284       3 time fixed bin (71), 
  4   285       3 terminal_type char (32),
  4   286       3 terminal_id char (4),
  4   287     2 password_interval fixed bin,			/* limit (in days) for password use or change */
  4   288     2 flags,
  4   289       3 disconnect bit (1) unaligned,			/* if "1"b, close the connection immediately */
  4   290       3 password_changed bit (1) unal,			/* "1"b => changed password */
  4   291       3 default_auth_changed bit (1) unal,		/* "1"b => changed default authorization */
  4   292       3 default_proj_changed bit (1) unal,		/* "1"b => changed default project */
  4   293       3 password_expired bit (1) unal,			/* "1"b => password not changed recently enough */
  4   294       3 password_unused_too_long bit (1) unal,		/* "1"b => password hasn't been used recently */
  4   295       3 pad bit (30) unaligned;
  4   296 
  4   297 dcl LS_VALIDATE_RESPONSE_VERSION_1 char (8) internal static options (constant) initial ("lsvs0001");
  4   298 
  4   299 
  4   300 
  4   301 /* "process" response: responds to request to create or connect */
  4   302 
  4   303 dcl 1 login_server_process_response aligned based (ls_response_ptr),
  4   304     2 fixed_part,
  4   305       3 header like login_server_response_header,		/* message_type = LS_PROCESS_RESPONSE */
  4   306       3 status_code fixed bin (35),			/* 0 iff process was created or requested process exists */
  4   307       3 process_id bit (36),
  4   308       3 new_handle bit (72),				/* changed if reconnecting, etc. to preexisting process, all 0 otherwise */
  4   309       3 authorization bit (72),			/* authorization of created or existing process */
  4   310       3 process_group_id char (32),			/* Person.Project.tag */
  4   311       3 process_number fixed bin,			/* as in, "Your disconnected process #2..." */
  4   312       3 n_disconnected_processes fixed bin,		/* valid even if code ^= 0, e.g., if request was ambiguous */
  4   313       3 start_event_channel fixed bin (71),		/* event channel to wake up user process on */
  4   314       3 login_instance fixed bin,			/* "This is your Nth interactive login" */
  4   315       3 accounting_info,				/* for destroyed process, if any */
  4   316         4 cpu_usage fixed bin (71),
  4   317         4 cost float bin,
  4   318       3 flags,					/* except for disconnect and logout, invalid if status_code ^= 0 */
  4   319         4 disconnect bit (1) unaligned,			/* "1"b => break the connection immediately */
  4   320         4 logout bit (1) unaligned,			/* "1"b => restart login sequence */
  4   321         4 created bit (1) unaligned,			/* "1"b => new process created */
  4   322         4 connected bit (1) unaligned,			/* "1"b => connected to old process */
  4   323         4 new_proc bit (1) unaligned,			/* "1"b => connected after new_proc */
  4   324         4 destroyed bit (1) unaligned,			/* "1"b => process destroyed */
  4   325         4 anonymous bit (1) unaligned,			/* "1"b => anonymous user ("enter" or "enterp") */
  4   326         4 already_logged_in bit (1) unaligned,		/* "1"b => user can't log in because he already is */
  4   327         4 message_coordinator bit (1) unaligned,		/* "1"b => this connection is going to be used by the message coordinator */
  4   328         4 brief bit (1) unaligned,			/* "1"b => brief user attribute from PDT */
  4   329         4 pad bit (26) unaligned,
  4   330       3 initial_ring fixed bin,			/* ring in which process was created */
  4   331       3 already_logged_in_info,			/* relevant if already_logged_in flag is "1"b */
  4   332         4 connection_name char (32),
  4   333         4 terminal_type char (32),
  4   334         4 terminal_id char (4),
  4   335     2 accounting_message_struc,			/* character string assembled by initializer giving error or warnings about the user's account */
  4   336       3 accounting_message_length fixed bin,
  4   337       3 accounting_message char (ls_process_response_accounting_message_length refer (login_server_process_response.accounting_message_length));
  4   338 
  4   339 dcl  ls_process_response_accounting_message_length fixed bin;
  4   340 
  4   341 dcl LOGIN_SERVER_PROCESS_RESPONSE_VERSION_1 char (8) internal static options (constant) initial ("lsps0001");
  4   342 
  4   343 
  4   344 
  4   345 /* "list" response: used if create request specified "list" command */
  4   346 
  4   347 dcl 1 login_server_list_response aligned based (ls_response_ptr),
  4   348     2 header like login_server_response_header,		/* message_type = LS_LIST_RESPONSE */
  4   349     2 n_processes fixed bin,				/* number of disconnected processes (might be 0) */
  4   350     2 pad_header fixed bin,
  4   351     2 process_info (login_server_list_response_n_processes refer (login_server_list_response.n_processes)),
  4   352       3 creation_time fixed bin (71),
  4   353       3 authorization bit (72),
  4   354       3 initial_ring fixed bin,
  4   355       3 pad_process_info fixed bin,
  4   356       3 connection_info like user_connection_info;
  4   357 
  4   358 dcl login_server_list_response_n_processes fixed bin;
  4   359 
  4   360 dcl LOGIN_SERVER_LIST_RESPONSE_VERSION_1 char (8) internal static options (constant) initial ("lslr0001");
  4   361 
  4   362 
  4   363 
  4   364 /* "dial" response: response to dial request */
  4   365 
  4   366 dcl 1 login_server_dial_response aligned based (ls_response_ptr),
  4   367     2 header like login_server_response_header,		/* message_type = LS_DIAL_RESPONSE */
  4   368     2 status_code fixed bin (35),			/* 0 iff dial server was found and all is OK */
  4   369     2 process_id bit (36),				/* of dial server */
  4   370     2 process_group_id char (32),			/* likewise */
  4   371     2 authorization bit (72),				/* likewise, to make sure connection is usable */
  4   372     2 start_event_channel fixed bin (71),		/* event channel to wake up user process on */
  4   373     2 process_ring fixed bin,				/* initial ring of dial server */
  4   374     2 flags,
  4   375       3 disconnect bit (1) unaligned,			/* "1"b => break connection immediately */
  4   376       3 pad bit (35) unaligned;
  4   377 
  4   378 dcl LOGIN_SERVER_DIAL_RESPONSE_VERSION_1 char (8) internal static options (constant) initial ("lsds0001");
  4   379 
  4   380 
  4   381 
  4   382 /* "termination" response: (not a response to anything): notify server that a
  4   383*   process terminated other than by logout */
  4   384 
  4   385 dcl 1 login_server_termination_response aligned based (ls_response_ptr),
  4   386     2 header like login_server_response_header,		/* message_type =  LS_TERMINATION_RESPONSE */
  4   387     2 accounting_info,				/* for printing in logout message */
  4   388       3 cpu_usage fixed bin (71),
  4   389       3 cost float bin,
  4   390       3 pad bit (33) unaligned,
  4   391     2 process_id bit (36),				/* of the logged-out process */
  4   392     2 process_group_id char (32),
  4   393     2 status_code fixed bin (35),			/* e.g., to indicate reason for fatal error */ 
  4   394     2 flags,
  4   395       3 logout bit (1) aligned,			/* no new process coming */
  4   396       3 automatic_logout bit (1) unaligned,
  4   397       3 hold bit (1) unaligned,
  4   398       3 brief bit (1) unaligned,
  4   399       3 new_proc bit (1) unaligned,			/* user-requested new process */
  4   400       3 fatal_error bit (1) unaligned,			/* process died unexpectedly */
  4   401       3 fpe_caused_logout bit (1) unaligned,		/* fatal error doesn't generate new process */
  4   402       3 fpe_loop bit (1) unaligned,			/* fatal error loop: too many in too short a time */
  4   403       3 fpe_during_init bit (1) unaligned,		/* fatal error during process initialization */
  4   404       3 offer_help bit (1) unaligned,			/* print a message offering "help" */ 
  4   405       3 pad bit (27) unaligned;
  4   406 
  4   407 dcl LOGIN_SERVER_TERMINATION_RESPONSE_VERSION_1 char (8) internal static options (constant) initial ("lstr0001");
  4   408 
  4   409 
  4   410 
  4   411 /* "new_proc" response: (not actually a response to anything) -- describes a 
  4   412*    new process (after a termination_response) */
  4   413 
  4   414 dcl 1 login_server_new_proc_response aligned based (ls_response_ptr),
  4   415     2 header like login_server_response_header,		/* message_type = LS_NEW_PROC_RESPONSE */
  4   416     2 new_authorization bit (72),			/* in case of new_proc -auth */
  4   417     2 new_start_event_channel fixed bin (71),		/* event channel for starting new process */
  4   418     2 new_process_id bit (36);			/* process_id of newly-created process */
  4   419 
  4   420 dcl  LOGIN_SERVER_NEW_PROC_RESPONSE_VERSION_1 char (8) internal static options (constant) initial ("lsnp0001");
  4   421 
  4   422 
  4   423 
  4   424 /* "operator" response: indicates success or failure of operator request */
  4   425 
  4   426 dcl 1 login_server_operator_response aligned based (ls_response_ptr),
  4   427     2 header like login_server_response_header,		/* message_type = LS_OPERATOR_RESPONSE */
  4   428     2 status_code fixed bin (35),			/* indicates success or failure */
  4   429     2 process_id bit (36),				/* process ID of the message coordinator */
  4   430     2 process_group_id char (32),			/* Person.Project.tag */
  4   431     2 event_channel fixed bin (71),			/* event channel over which to send connect/disconnect wakeups */
  4   432     2 ring fixed bin,				/* ring of message coordinator */
  4   433     2 flags,
  4   434       3 disconnect bit (1) unaligned,			/* "1" => break the connection immediately */
  4   435       3 mbz bit (35) unaligned;
  4   436 
  4   437 
  4   438 dcl  LOGIN_SERVER_OPERATOR_RESPONSE_VERSION_1 char (8) internal static options (constant) initial ("lsos0001");
  4   439 
  4   440 
  4   441 /* format of reply message sent to acknowledge receipt of a request */
  4   442 
  4   443 dcl  ls_reply_message_ptr pointer;
  4   444 
  4   445 dcl 1 ls_reply_message aligned based (ls_reply_message_ptr),
  4   446     2 code fixed bin (35),
  4   447     2 flags,
  4   448       3 request_invalid bit (1) unaligned,		/* "1"b => could not process request */
  4   449       3 response_sent bit (1) unaligned,		/* "1"b => there is a response message */
  4   450       3 as_error_code bit (1) unaligned,		/* "1"b => code is from as_error_table_ */
  4   451       3 do_not_reply bit (1) unaligned, /* "1"b => special flag for AS to prevent any reply from being sent to login server */
  4   452       3 mbz bit (32) unaligned;
  4   453 
  4   454 /* The following are values used to identify the various requests internally; those from CREATE_REQ on 
  4   455*   can appear as "command_type" in ls_process_requests. */
  4   456 
  4   457 dcl (LOGIN_REQ initial (1),
  4   458      ENTER_REQ initial (2),
  4   459      ENTERP_REQ initial (3),
  4   460      CREATE_REQ initial (4),
  4   461      DESTROY_REQ initial (5),
  4   462      CONNECT_REQ initial (6),
  4   463      NEW_PROC_REQ initial (7),
  4   464      LIST_REQ initial (8))
  4   465 	fixed bin internal static options (constant);
  4   466 
  4   467 /* The following are the possible values for login_server_validate_request.network_connection_type.
  4   468*   They are used by the initializer to select a default process overseer and an instance tag.
  4   469**/
  4   470 
  4   471 dcl (NETWORK_CONNECTION_LOGIN initial (1),
  4   472      NETWORK_CONNECTION_DSA_FILE_TRANSFER initial (2))
  4   473 	fixed bin internal static options (constant);
  4   474 
  4   475 /* END INCLUDE FILE ... login_server_messages.incl.pl1 */
      482 
      483  /* BEGIN INCLUDE FILE ... pdt.incl.pl1 */
  5     2 /* Requires user_attributes.incl.pl1 */
  5     3 
  5     4 /* Modified 740723 by PG to add AIM info */
  5     5 /* Modified 750604 by T. Casey to add priority scheduler parameters */
  5     6 /* Modified May 1976 by T. Casey to add cutoff warning thresholds and change version to 3 */
  5     7 /* Modified May 1977 by John Gintell to add reqfile, projfile, and SAT to header */
  5     8 /* Modified May 1978 by T. Casey to add pdir_quota to user entry */
  5     9 /* Modified June 1978 by T. Casey to add rel ptr to pdt hash table */
  5    10 /* Modified November 1978 by T. Casey to add max_(fore back)ground, n_(fore back)ground and abs_foreground_cpu_limit */
  5    11 /* Modified October 1979 by T. Casey to add counters for interactive and disconnected processes. */
  5    12 /* Modified Feb 1980 by M. B. Armstrong to implement multiple rate structures (UNCA). */
  5    13 /* Modified May 1980 by R. McDonald to use iod cpu time field for page charging (UNCA) */
  5    14 /* Modified December 1981 by E. N. Kittlitz for user_warn fields */
  5    15 /* Modified January 1982 by E. N. Kittlitz for user_attributes.incl.pl1 changes */
  5    16 /* Modified September 1982 by E. N. Kittlitz for default ring. */
  5    17 /* Modified 1984-07-05 BIM for min authorization, version to 4 */
  5    18 
  5    19 dcl (PDT_version init (4),				/* version of this declaration */
  5    20      PDT_header_lth init (256),			/* length in words of PDT head */
  5    21      PDT_entry_lth init (256),			/* length in words of PDT entry */
  5    22 
  5    23      PDT_project_name_length init (9),			/* proper length of pdt.project_name */
  5    24      PDT_person_id_length init (22)			/* proper length of user.person_id */
  5    25      ) fixed bin internal static options (constant);
  5    26 
  5    27 dcl 1 pdt based (pdtp) aligned,
  5    28 
  6     1 /* BEGIN INCLUDE FILE author.incl.pl1 */
  6     2 
  6     3 /* the "author" items must always be the first ones in the table. The
  6     4*   module which moves the converted table to the System Control process
  6     5*   fills in these data items and assumes them to be at the head of the segment
  6     6*   regardless of the specific table's actual declaration. The variables
  6     7*   "lock" and "last_install_time" used to be "process_id" and "ev_channel"
  6     8*    respectively. For tables installed in multiple processes, these
  6     9*    are to be used to lock out multiple installations. */
  6    10 
  6    11 /*  Lock should be used as a modification lock. Since, in general,
  6    12*    entries may not be moved in system tables, even by installations,
  6    13*    it is sufficient for only installers and programs that change threads
  6    14*    to set or respect the lock. Simply updating data in an entry
  6    15*    requires no such protection.
  6    16*
  6    17*    Last_install_time is used by readers of system tables to detect
  6    18*    installations or other serious modifications. By checking it before
  6    19*    and after copying a block of data, they can be protected against
  6    20*    modifications.
  6    21*
  6    22*    Modules that set the lock should save proc_group_id, and then
  6    23*    put their group id there for the time they hold the lock.
  6    24*    if they do not actually install the, they should restore the group id.
  6    25**/
  6    26 
  6    27     2 author aligned,				/* validation data about table's author */
  6    28       3 proc_group_id char (32),			/* process-group-id  (personid.projectid.tag) */
  6    29       3 lock bit (36),				/* installation lock */
  6    30       3 update_attributes bit (1) unal,			/* update/add/delete attributes */
  6    31       3 update_authorization bit (1) unal,		/* update only authorizations */
  6    32       3 deferral_notified bit (1) unal,			/* installer notified of deferral of installation */
  6    33       3 pad bit (33) unaligned,
  6    34       3 last_install_time fixed bin (71),
  6    35       3 table char (4),				/* name of table, e.g., SAT MGT TTT RTDT PDT etc. */
  6    36       3 w_dir char (64),				/* author's working directory */
  6    37 
  6    38 /* END INCLUDE FILE author.incl.pl1 */
  5    29 
  5    30     2 max_size fixed bin,				/* max number of entries table can grow */
  5    31     2 current_size fixed bin,				/* current size of table (in entries) */
  5    32     2 version fixed bin,				/* table version */
  5    33     2 freep fixed bin,				/* relptr to begin of free chain */
  5    34     2 n_users fixed bin,				/* number of entries actually used */
  5    35     2 project_name char (28),				/* name of project */
  5    36     2 project_dir char (64),				/* treename of project's directory */
  5    37     2 projfile_version fixed bin,
  5    38     2 projentry bit (66*36),
  5    39     2 pad3 (5) bit (36) aligned,
  5    40     2 reqfile_version fixed bin,
  5    41     2 reqentry bit (40*36),
  5    42     2 pad4 (9) fixed bin,
  5    43     2 sat_version fixed bin,
  5    44     2 satentry bit (52*36),				/* everything in sat.project from project.at on */
  5    45     2 pad5 (4) bit (36) aligned,
  5    46     2 date_reqfile_copied fixed bin (71),
  5    47     2 rs_number fixed bin (9) unsigned unaligned,		/* rate structure number, easier than looking in satentry */
  5    48     2 pad2l bit (27) unaligned,
  5    49     2 pad2 (16) fixed bin,				/* make header 256 words long */
  5    50     2 ht_relp fixed bin (18) aligned,			/* if nonzero, pdt has hash table at that loc */
  5    51     2 user (1019) aligned,				/* the project definition table entries */
  5    52       3 pad (256) bit (36) aligned;			/* each entry is 256 words long  */
  5    53 
  5    54 /* The hash table, if there is one, is right after the last user, and is described in hashst.incl.pl1 */
  5    55 
  5    56 
  5    57 
  5    58 dcl 1 user based (pdtep) aligned,			/* declaration of a single PDT entry  */
  5    59     2 state fixed bin,				/* 1 = normal, 2 = deleted 0 = free */
  5    60     2 lock bit (36),				/* update lock */
  5    61     2 person_id char (24) aligned,			/* login name of user */
  5    62     2 now_in fixed bin,				/* count of users logged in on this entry */
  5    63     2 password char (8) aligned,			/* password for anonymous user */
  5    64     2 at like user_attributes aligned,			/* include user_attributes.incl.pl1 */
  5    65     2 initial_procedure char (64) aligned,		/* initproc and subsystem name packed into one string */
  5    66     2 home_dir char (64) aligned,			/* user's default working directory */
  5    67     2 bump_grace fixed bin,				/* number of minutes he is protected */
  5    68     2 high_ring fixed bin,				/* highest ring user may use */
  5    69     2 default_ring fixed bin (17) unal,			/* ring user will start in */
  5    70     2 low_ring fixed bin (17) unal,			/* lowest ring user may use */
  5    71     2 outer_module char (32),				/* outer module used if user is interactive */
  5    72     2 lot_size fixed bin,				/* size of linkage offset table */
  5    73     2 kst_size fixed bin,				/* size of known segment table */
  5    74     2 cls_size fixed bin,				/* size of combined linkage */
  5    75     2 uflags,					/* various flags */
  5    76       3 dont_call_init_admin bit (1) unal,		/* call overseer direct */
  5    77       3 ip_given bit (1) unal,			/* ip_len gives length of initproc packed in initial_procedure */
  5    78       3 ss_given bit (1) unal,			/* subsystem name is packed in initial_procedure */
  5    79       3 flagpad bit (33) unal,
  5    80     2 ip_len fixed bin (17) unal,			/* length of initproc name packed in initial_procedure */
  5    81     2 ss_len fixed bin (17) unal,			/* length of subsystem name packed in initial_procedure */
  5    82     2 dollar_limit float bin,
  5    83     2 dollar_charge float bin,			/* total dollars spent this month */
  5    84     2 shift_limit (0: 7) float bin,
  5    85     2 daton fixed bin (71),				/* date user added to system */
  5    86     2 datof fixed bin (71),				/* date user deleted */
  5    87     2 last_login_time fixed bin (71),			/* time of last login */
  5    88     2 last_login_unit char (4),			/* terminal id last used */
  5    89     2 last_login_type fixed bin (17) unal,		/* terminal type */
  5    90     2 last_login_line_type fixed bin (17) unal,		/* terminal line type */
  5    91     2 time_last_bump fixed bin (71),			/* for bump-wait */
  5    92     2 last_update fixed bin (71),			/* time of last transaction */
  5    93     2 logins fixed bin,				/* number of logins */
  5    94     2 crashes fixed bin,				/* sessions abnormally terminated */
  5    95     2 interactive (0: 7),				/* interactive use, shifts 0-7 */
  5    96       3 charge float bin,				/* total dollar charge this shift */
  5    97       3 xxx fixed bin,
  5    98       3 cpu fixed bin (71),				/* cpu usage in microseconds */
  5    99       3 core fixed bin (71),				/* core demand in page-microseconds */
  5   100       3 connect fixed bin (71),			/* total console time in microseconds */
  5   101       3 io_ops fixed bin (71),			/* total i/o ops on terminal */
  5   102     2 absentee (4),					/* absentee use, queues 1-4 */
  5   103       3 charge float bin,				/* dollar charge this queue */
  5   104       3 jobs fixed bin,				/* number of jobs submitted */
  5   105       3 cpu fixed bin (71),				/* total cpu time in microseconds */
  5   106       3 memory fixed bin (71),			/* total memory demand */
  5   107     2 iod (4),					/* io daemon use, queues 1-4 */
  5   108       3 charge float bin,				/* dollar charge this queue */
  5   109       3 pieces fixed bin,				/* pieces of output requested */
  5   110       3 pad fixed bin (35),
  5   111       3 pages fixed bin (35),				/* number of pages output */
  5   112       3 lines fixed bin (71),				/* total record count of output */
  5   113     2 devices (16) float bin,				/* device charges */
  5   114     2 time_last_reset fixed bin (71),			/* time PDT last updated */
  5   115     2 absolute_limit float bin,			/* Limit, not reset monthly */
  5   116     2 absolute_spent float bin,			/* Spending against this */
  5   117     2 absolute_cutoff fixed bin (71),			/* Spending will be reset on this date */
  5   118     2 absolute_increm fixed bin,			/* .. time increment code. 0 = don't reset */
  5   119     2 pad_was_authorization bit (72) aligned,
  5   120     2 group char (8),				/* group for this user (if at.igroup = "1"b) */
  5   121     2 warn_days fixed bin (17) unaligned,		/* warn user if less than this many days to cutoff */
  5   122     2 warn_pct fixed bin (17) unaligned,		/* warn user if less than this percent of funds left */
  5   123     2 warn_dollars float bin,				/* warn user if less than this amount of funds left */
  5   124     2 n_foreground fixed bin (9) unsigned unaligned,	/* number of foreground and background processes */
  5   125     2 n_background fixed bin (9) unsigned unaligned,	/* that this user has. see limits just below */
  5   126     2 max_foreground fixed bin (9) unsigned unaligned,	/* max simultaneous foreground and */
  5   127     2 max_background fixed bin (9) unsigned unaligned,	/* background processes that this user can have */
  5   128     2 n_interactive fixed bin (9) unsigned unaligned,	/* number of interactive processes that user has */
  5   129     2 n_disconnected fixed bin (9) unsigned unaligned,	/* number of disconnected processes that user has */
  5   130     2 pdtupad1 fixed bin (18) unsigned unaligned,
  5   131     2 user_warn_days fixed bin (17) unaligned,		/* warn user if less than this many days to user cutoff */
  5   132     2 user_warn_pct fixed bin (17) unaligned,		/* warn user if less than this percent of user funds left */
  5   133     2 user_warn_dollars float bin,			/* warn user if less than this amount of user funds left */
  5   134     2 user_authorization (2) bit (72) aligned,		/* range */
  5   135     2 pdtupad (5) fixed bin,
  5   136     2 abs_foreground_cpu_limit fixed bin (17) unaligned,	/* time limit (sec) on foreground absentee jobs */
  5   137     2 pdir_quota fixed bin (17) unaligned,		/* quota to put on user's pdir (0 => use default) */
  5   138     2 chain fixed bin;				/* free chain */
  5   139 
  5   140 /* END INCLUDE FILE ... pdt.incl.pl1 */
      483 
      484 
      485 dcl  pdtp		        ptr automatic init (null);	/* pdt needs it  */
      486  /* BEGIN INCLUDE FILE ... sat.incl.pl1 */
  7     2 
  7     3 
  7     4 
  7     5 
  7     6 /****^  HISTORY COMMENTS:
  7     7*  1) change(86-09-05,Parisek), approve(87-06-17,MCR7570),
  7     8*     audit(87-06-15,Hirneisen), install(87-08-06,MR12.1-1066):
  7     9*     Expand comment line of project.state to include the renamed state (state =
  7    10*     3).
  7    11*                                                   END HISTORY COMMENTS */
  7    12 
  7    13 
  7    14 
  7    15 /* Modified 740723 by PG to add AIM info */
  7    16 /* Modified 750604 by T. Casey to add priority scheduler parameters */
  7    17 /* Modified May 1976 by T. Casey to add project cutoff limits */
  7    18 /* Modified May 1978 by T. Casey to add pdir_quota */
  7    19 /* Modified November 1978 by T. Casey to add max_(fore back)ground and abs_foreground_cpu_limit */
  7    20 /* Modified July 1979 by J. N. R. Barnecut  to support multiple rate structures. (UNCA) */
  7    21 /* Modified January 1982 by E. N. Kittlitz for user_attributes.incl.pl1 changes */
  7    22 /* Modified 1984-07-05 BIM range of authorizations, version 3 */
  7    23 
  7    24 dcl (SAT_version init (3),				/* version 2 of this declaration */
  7    25 
  7    26      SAT_header_lth init (466),			/* length in words of SAT header */
  7    27      SAT_entry_lth init (80), 			/* length in words of SAT entry */
  7    28 
  7    29      SAT_project_name_length init (9)			/* proper length of project.project_id */
  7    30      ) fixed bin internal static options (constant);
  7    31 
  7    32 dcl 1 sat based (satp) aligned,
  7    33 
  8     1 /* BEGIN INCLUDE FILE author.incl.pl1 */
  8     2 
  8     3 /* the "author" items must always be the first ones in the table. The
  8     4*   module which moves the converted table to the System Control process
  8     5*   fills in these data items and assumes them to be at the head of the segment
  8     6*   regardless of the specific table's actual declaration. The variables
  8     7*   "lock" and "last_install_time" used to be "process_id" and "ev_channel"
  8     8*    respectively. For tables installed in multiple processes, these
  8     9*    are to be used to lock out multiple installations. */
  8    10 
  8    11 /*  Lock should be used as a modification lock. Since, in general,
  8    12*    entries may not be moved in system tables, even by installations,
  8    13*    it is sufficient for only installers and programs that change threads
  8    14*    to set or respect the lock. Simply updating data in an entry
  8    15*    requires no such protection.
  8    16*
  8    17*    Last_install_time is used by readers of system tables to detect
  8    18*    installations or other serious modifications. By checking it before
  8    19*    and after copying a block of data, they can be protected against
  8    20*    modifications.
  8    21*
  8    22*    Modules that set the lock should save proc_group_id, and then
  8    23*    put their group id there for the time they hold the lock.
  8    24*    if they do not actually install the, they should restore the group id.
  8    25**/
  8    26 
  8    27     2 author aligned,				/* validation data about table's author */
  8    28       3 proc_group_id char (32),			/* process-group-id  (personid.projectid.tag) */
  8    29       3 lock bit (36),				/* installation lock */
  8    30       3 update_attributes bit (1) unal,			/* update/add/delete attributes */
  8    31       3 update_authorization bit (1) unal,		/* update only authorizations */
  8    32       3 deferral_notified bit (1) unal,			/* installer notified of deferral of installation */
  8    33       3 pad bit (33) unaligned,
  8    34       3 last_install_time fixed bin (71),
  8    35       3 table char (4),				/* name of table, e.g., SAT MGT TTT RTDT PDT etc. */
  8    36       3 w_dir char (64),				/* author's working directory */
  8    37 
  8    38 /* END INCLUDE FILE author.incl.pl1 */
  7    34 
  7    35     2 max_size fixed bin,				/* max number of entries table can grow */
  7    36     2 current_size fixed bin,				/* current size of table  (in entries) */
  7    37     2 version fixed bin,				/* version number of table (word 32) */
  7    38     2 freep fixed bin,				/* free chain ptr. 0 if no free entries */
  7    39     2 n_projects fixed bin,				/* number of entries actually used */
  7    40     2 pad_was_max_users bit (36) aligned,
  7    41     2 max_units fixed bin,				/* maximum number of login-units per session */
  7    42     2 pad_was_max_prim bit (36) aligned,	
  7    43     2 uwt_size fixed bin,				/* size of User Weight Table */
  7    44     2 uwt (24) aligned,				/* User Weight Table */
  7    45       3 initproc char (64) unaligned,			/* user's initial procedure  */
  7    46       3 units fixed bin,				/* weight of initial procedure */
  7    47     2 system_admin (2) char (32) unal,			/* system administrator ID */
  7    48     2 pad1 (4) fixed bin,				/* padding to 466 wds */
  7    49     2 project (3258),				/* The SAT entries. 255K segment. */
  7    50       3 pad (80) fixed bin;				/* each entry is 80 words long  */
  7    51 
  7    52 
  7    53 dcl 1 project based (satep) aligned,			/* declaration of a single SAT entry  */
  7    54     2 state fixed bin,				/* state 1 = normal, 0 = free, 2 = deleted, 3 = renamed */
  7    55     2 project_id char (12) unaligned,			/* project's name */
  7    56     2 project_dir char (64) unaligned,			/* project's directory */
  7    57     2 pdt_ptr pointer,				/* pointer to current PDT */
  7    58     2 max_users fixed bin,				/* maximum number of users from project */
  7    59     2 n_users fixed bin,				/* current number */
  7    60     2 at like user_attributes aligned,			/* include user_attributes.incl.pl1 */
  7    61     2 admin (4) aligned,				/* list of project's administrators  */
  7    62       3 userid char (30) unal,			/* administrator's user-id (personid.projectid) */
  7    63       3 pad char (2) unal,
  7    64     2 cutoff char (1),				/* if project is cut off, why. */
  7    65     2 min_ring fixed bin,				/* lowest ring for project */
  7    66     2 max_ring fixed bin,				/* highest ring for project */
  7    67     2 alias char (8) unal,				/* project alias */
  7    68     2 group char (8) unal,				/* default group for this project */
  7    69     2 grace_max fixed bin,				/* maximum bump grace */
  7    70     2 audit bit (36),				/* audit flags for project */
  7    71     2 project_authorization (2) bit (72),		/* authorization of this project */
  7    72     2 groups (2) char (8) unal,			/* authorized groups for this project */
  7    73     2 days_to_cutoff fixed bin (17) unaligned,		/* these figures are as of last running of daily_summary */
  7    74     2 pct_balance fixed bin (17) unaligned,		/* they are used for warning message printing only */
  7    75     2 dollars_to_cutoff float bin,			/* and are not to be taken as up-to-date figures */
  7    76     2 pdir_quota fixed bin (17) unaligned,		/* max pdir quota allowed for project */
  7    77     2 max_foreground fixed bin (9) unsigned unaligned,	/* max simultaneous foreground and background */
  7    78     2 max_background fixed bin (9) unsigned unaligned,	/* processes that a user on this project can have */
  7    79     2 abs_foreground_cpu_limit fixed bin (17) unaligned,	/* time limit on foreground absentee jobs */
  7    80     2 rs_number fixed bin (9) unsigned unaligned,		/* rate structure number (0=default rates ) */
  7    81     2 satpad1 fixed bin (9) unsigned unaligned,
  7    82     2 satpad (1) bit (36) aligned,			/* pad to 80 words */
  7    83     2 chain fixed bin;				/* if free entry, chain */
  7    84 
  7    85 /* END INCLUDE FILE ... sat.incl.pl1 */
      486 
      487  /* BEGIN INCLUDE FILE sys_log_constants.incl.pl1 ... 82-09-24 E. N. Kittlitz */
  9     2 
  9     3 
  9     4 /****^  HISTORY COMMENTS:
  9     5*  1) change(87-04-22,GDixon), approve(87-06-10,MCR7708),
  9     6*     audit(87-06-02,Parisek), install(87-08-04,MR12.1-1056):
  9     7*     Added sl_info structure and associated named constants for use in calling
  9     8*     sys_log_$general.
  9     9*                                                   END HISTORY COMMENTS */
  9    10 
  9    11 
  9    12 /* format: style4 */
  9    13 
  9    14 dcl  (
  9    15      SL_TYPE_CRASH init (-3),				/* type message with banner & kill system */
  9    16      SL_TYPE_BEEP init (-2),				/* type message with banner */
  9    17      SL_TYPE init (-1),				/* type message */
  9    18      SL_LOG_SILENT init (0),				/* log message */
  9    19      SL_LOG init (1),				/* log & type message */
  9    20      SL_LOG_BEEP init (2),				/* log & type message with banner */
  9    21      SL_LOG_CRASH init (3)				/* log & type message with banner & kill system */
  9    22      ) fixed bin internal static options (constant);
  9    23 
  9    24 dcl  1 sl_info aligned automatic,
  9    25        2 version char(8),			/* structure version       */
  9    26        2 arg_list_ptr ptr,			/* arg_list with values    */
  9    27        2 loc,
  9    28          3 (mode, severity, code, caller, data, class, ioa_msg) fixed bin,
  9    29            /* These flags control where the corresponding data item is found.*/
  9    30 	 /*  -1: data appears in the corresponding structure element below */
  9    31 	 /*   0: data is not present anywhere			       */
  9    32 	 /*  +N: data is Nth item in argument list pointed to by 	       */
  9    33 	 /*      sl_info.arg_list_ptr.  Upon return, data copied into      */
  9    34 	 /*      corresponding structure element.		       */
  9    35 	 /*  if data = +N:					       */
  9    36 	 /*      argN is data_ptr, argN+1 is data_len		       */
  9    37 	 /*  if ioa_msg = +N:				       */
  9    38 	 /*      argN+1, ... argLAST are arguments substituted into the    */
  9    39 	 /*      ioa_msg control string.  The formatted msg is returned.   */
  9    40        2 flags,
  9    41          3 ioa_msg_is_error_code bit(1) unal,	/* ioa_ctl is error code.  */
  9    42          3 flags_pad bit(35) unal,
  9    43        2 mode fixed bin,			/* as-mode, command-mode   */
  9    44        2 severity fixed bin,			/* error severity	       */
  9    45        2 code fixed bin(35),			/* error table code        */
  9    46        2 caller char(65) varying,		/* caller refname$entryname*/
  9    47        2 data,				/* binary data ptr/length  */
  9    48          3 data_ptr ptr,
  9    49          3 data_lth fixed bin(21),
  9    50        2 class char(10) varying,		/* binary data class       */
  9    51        2 ioa_msg char(500) varying;		/* formatted message text  */
  9    52 
  9    53 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  9    54 /*							       */
  9    55 /* If data values (eg, sl_info.caller) are passed in the argument list,      */
  9    56 /* their data types should be as shown in the structure above, except that   */
  9    57 /* character strings should be char(*) nonvarying.		       */
  9    58 /*							       */
  9    59 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  9    60 
  9    61 /* value for sl_info.version */
  9    62 dcl  SL_INFO_version_1 char (8) int static options(constant) init("sl_info1");
  9    63 
  9    64 /* values for sl_info.mode */
  9    65 dcl (SL_INFO_as_mode init(1),
  9    66      SL_INFO_command_mode init(2)) fixed bin int static options(constant);
  9    67 
  9    68 /* values for sl_info.loc.(severity code caller data class ioa_ctl arg) */
  9    69 dcl (SL_INFO_arg_given_in_structure init(-1),
  9    70      SL_INFO_arg_not_given init(0)) fixed bin int static options(constant);
  9    71 
  9    72 
  9    73 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  9    74 /*							       */
  9    75 /* The following static structures are commonly used in the Login Server     */
  9    76 /* user control software.					       */
  9    77 /*							       */
  9    78 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  9    79 
  9    80 /* Syntax: call Abort (severity, code, ioa_ctl, args);		       */
  9    81 
  9    82 dcl  1 sl_info_sev_code_msg		aligned int static options(constant),
  9    83        2 version char(8)		init ("sl_info1"),
  9    84        2 arg_list_ptr ptr		init (null),
  9    85        2 loc,
  9    86          3 (mode			init (-1),
  9    87 	  severity  		init ( 1),
  9    88 	  code 			init ( 2),
  9    89 	  caller 			init (-1),
  9    90 	  data 			init ( 0),
  9    91 	  class 			init ( 0),
  9    92 	  ioa_msg			init ( 3)) fixed bin,
  9    93        2 flags,
  9    94          3 ioa_msg_is_error_code bit(1) unal init ("0"b),
  9    95          3 flags_pad bit(35) unal	init ("0"b),
  9    96        2 mode fixed bin		init ( 1),
  9    97        2 severity fixed bin		init ( 0),
  9    98        2 code fixed bin(35)		init ( 0),
  9    99        2 caller char(65) varying	init (""),
  9   100        2 data,
  9   101          3 data_ptr ptr		init (null),
  9   102          3 data_lth fixed bin(21)	init ( 0),
  9   103        2 class char(10) varying	init (""),
  9   104        2 ioa_msg char(500) varying	init ("");
  9   105 
  9   106 /* Syntax: call Abort (severity, ioa_ctl, args);			       */
  9   107 
  9   108 dcl  1 sl_info_sev_msg		aligned int static options(constant),
  9   109        2 version char(8)		init ("sl_info1"),
  9   110        2 arg_list_ptr ptr		init (null),
  9   111        2 loc,
  9   112          3 (mode			init (-1),
  9   113 	  severity  		init ( 1),
  9   114 	  code 			init ( 0),
  9   115 	  caller 			init (-1),
  9   116 	  data 			init ( 0),
  9   117 	  class 			init ( 0),
  9   118 	  ioa_msg			init ( 2)) fixed bin,
  9   119        2 flags,
  9   120          3 ioa_msg_is_error_code bit(1) unal init ("0"b),
  9   121          3 flags_pad bit(35) unal	init ("0"b),
  9   122        2 mode fixed bin		init ( 1),
  9   123        2 severity fixed bin		init ( 0),
  9   124        2 code fixed bin(35)		init ( 0),
  9   125        2 caller char(65) varying	init (""),
  9   126        2 data,
  9   127          3 data_ptr ptr		init (null),
  9   128          3 data_lth fixed bin(21)	init ( 0),
  9   129        2 class char(10) varying	init (""),
  9   130        2 ioa_msg char(500) varying	init ("");
  9   131 
  9   132 /* Syntax: call Abort (severity, ioa_ctl_as_error_code, args);	       */
  9   133 
  9   134 dcl  1 sl_info_sev_coded_msg		aligned int static options(constant),
  9   135        2 version char(8)		init ("sl_info1"),
  9   136        2 arg_list_ptr ptr		init (null),
  9   137        2 loc,
  9   138          3 (mode			init (-1),
  9   139 	  severity  		init ( 1),
  9   140 	  code 			init ( 0),
  9   141 	  caller 			init (-1),
  9   142 	  data 			init ( 0),
  9   143 	  class 			init ( 0),
  9   144 	  ioa_msg			init ( 2)) fixed bin,
  9   145        2 flags,
  9   146          3 ioa_msg_is_error_code bit(1) unal init ("1"b),
  9   147          3 flags_pad bit(35) unal	init ("0"b),
  9   148        2 mode fixed bin		init ( 1),
  9   149        2 severity fixed bin		init ( 0),
  9   150        2 code fixed bin(35)		init ( 0),
  9   151        2 caller char(65) varying	init (""),
  9   152        2 data,
  9   153          3 data_ptr ptr		init (null),
  9   154          3 data_lth fixed bin(21)	init ( 0),
  9   155        2 class char(10) varying	init (""),
  9   156        2 ioa_msg char(500) varying	init ("");
  9   157 
  9   158 
  9   159 /* Syntax: call Abort (severity, code, error_return_label, ioa_ctl, args);   */
  9   160 
  9   161 dcl  1 sl_info_sev_code_label_msg	aligned int static options(constant),
  9   162        2 version char(8)		init ("sl_info1"),
  9   163        2 arg_list_ptr ptr		init (null),
  9   164        2 loc,
  9   165          3 (mode			init (-1),
  9   166 	  severity  		init ( 1),
  9   167 	  code 			init ( 2),
  9   168 	  caller 			init (-1),
  9   169 	  data 			init ( 0),
  9   170 	  class 			init ( 0),
  9   171 	  ioa_msg			init ( 4)) fixed bin,
  9   172        2 flags,
  9   173          3 ioa_msg_is_error_code bit(1) unal init ("0"b),
  9   174          3 flags_pad bit(35) unal	init ("0"b),
  9   175        2 mode fixed bin		init ( 1),
  9   176        2 severity fixed bin		init ( 0),
  9   177        2 code fixed bin(35)		init ( 0),
  9   178        2 caller char(65) varying	init (""),
  9   179        2 data,
  9   180          3 data_ptr ptr		init (null),
  9   181          3 data_lth fixed bin(21)	init ( 0),
  9   182        2 class char(10) varying	init (""),
  9   183        2 ioa_msg char(500) varying	init ("");
  9   184 
  9   185 /* Syntax:  call Log_error (code, ioa_ctl, args);			       */
  9   186 
  9   187 dcl  1 sl_info_code_msg		aligned int static options(constant),
  9   188        2 version char(8)		init ("sl_info1"),
  9   189        2 arg_list_ptr ptr		init (null),
  9   190        2 loc,
  9   191          3 (mode			init (-1),
  9   192 	  severity  		init (-1),
  9   193 	  code 			init ( 1),
  9   194 	  caller 			init (-1),
  9   195 	  data 			init ( 0),
  9   196 	  class 			init ( 0),
  9   197 	  ioa_msg			init ( 2)) fixed bin,
  9   198        2 flags,
  9   199          3 ioa_msg_is_error_code bit(1) unal init ("0"b),
  9   200          3 flags_pad bit(35) unal	init ("0"b),
  9   201        2 mode fixed bin		init ( 1),
  9   202        2 severity fixed bin		init ( 0),
  9   203        2 code fixed bin(35)		init ( 0),
  9   204        2 caller char(65) varying	init (""),
  9   205        2 data,
  9   206          3 data_ptr ptr		init (null),
  9   207          3 data_lth fixed bin(21)	init ( 0),
  9   208        2 class char(10) varying	init (""),
  9   209        2 ioa_msg char(500) varying	init ("");
  9   210 
  9   211 
  9   212 /* Syntax:  call Trace (ioa_ctl, args);				       */
  9   213 
  9   214 dcl  1 sl_info_msg			aligned int static options(constant),
  9   215        2 version char(8)		init ("sl_info1"),
  9   216        2 arg_list_ptr ptr		init (null),
  9   217        2 loc,
  9   218          3 (mode			init (-1),
  9   219 	  severity  		init (-1),
  9   220 	  code 			init ( 0),
  9   221 	  caller 			init (-1),
  9   222 	  data 			init ( 0),
  9   223 	  class 			init ( 0),
  9   224 	  ioa_msg			init ( 1)) fixed bin,
  9   225        2 flags,
  9   226          3 ioa_msg_is_error_code bit(1) unal init ("0"b),
  9   227          3 flags_pad bit(35) unal	init ("0"b),
  9   228        2 mode fixed bin		init ( 1),
  9   229        2 severity fixed bin		init ( 0),
  9   230        2 code fixed bin(35)		init ( 0),
  9   231        2 caller char(65) varying	init (""),
  9   232        2 data,
  9   233          3 data_ptr ptr		init (null),
  9   234          3 data_lth fixed bin(21)	init ( 0),
  9   235        2 class char(10) varying	init (""),
  9   236        2 ioa_msg char(500) varying	init ("");
  9   237 
  9   238 /* END INCLUDE FILE sys_log_constants.incl.pl1 */
      487 
      488  /* BEGIN INCLUDE FILE ... user_attributes.incl.pl1  TAC 10/79 */
 10     2 
 10     3 
 10     4 /****^  HISTORY COMMENTS:
 10     5*  1) change(86-12-11,Brunelle), approve(87-07-13,MCR7741),
 10     6*     audit(87-04-19,GDixon), install(87-08-04,MR12.1-1056):
 10     7*     Add incl for abs_attributes.incl.pl1 to automatically include absentee
 10     8*     attribute switches.
 10     9*  2) change(87-04-19,GDixon), approve(87-07-13,MCR7741),
 10    10*     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1056):
 10    11*      A) Add USER_ATTRIBUTE_NAMES arrays.  attribute_names.incl.pl1 can thereby
 10    12*         be deleted.
 10    13*      B) Add constants identifying attributes that can be changed by user at
 10    14*         login, etc.
 10    15*                                                   END HISTORY COMMENTS */
 10    16 
 10    17 
 10    18 /* Modified 82-01-03  E. N. Kittlitz.  to declare a complete level-1 structure */
 10    19 
 10    20 /* format: style4 */
 10    21 dcl  1 user_attributes aligned based,			/* the user user_attributes */
 10    22        (2 administrator bit (1),			/* 1  system administrator privileges */
 10    23        2 primary_line bit (1),			/* 2  user has primary-line privileges  */
 10    24        2 nobump bit (1),				/* 2  user cannot be bumped */
 10    25        2 guaranteed_login bit (1),			/* 4  user has guaranteed login privileges */
 10    26        2 anonymous bit (1),				/* 5  used only in SAT. project may have anon.users */
 10    27        2 nopreempt bit (1),				/* 6  used only in PDT. user not preemptable by others
 10    28*						   .  of same project (distinct from "nobump") */
 10    29        2 nolist bit (1),				/* 7  don't list user on "who" */
 10    30        2 dialok bit (1),				/* 8  user may have multiple consoles */
 10    31        2 multip bit (1),				/* 9  user may have several processes */
 10    32        2 bumping bit (1),				/* 10 in SAT. Can users in project bump each other? */
 10    33        2 brief bit (1),				/* 11 no login or logout message */
 10    34        2 vinitproc bit (1),				/* 12 user may change initial procedure */
 10    35        2 vhomedir bit (1),				/* 13 user may change homedir */
 10    36        2 nostartup bit (1),				/* 14 user does not want start_up.ec */
 10    37        2 sb_ok bit (1),				/* 15 user may be standby */
 10    38        2 pm_ok bit (1),				/* 16 user may be primary */
 10    39        2 eo_ok bit (1),				/* 17 user may be edit_only */
 10    40        2 daemon bit (1),				/* 18 user may login as daemon */
 10    41        2 vdim bit (1),				/* 19 * OBSOLETE * user may change outer mdle */
 10    42        2 no_warning bit (1),				/* 20 no warning message */
 10    43        2 igroup bit (1),				/* 21 in SAT: this project may give its users individual groups
 10    44*						   .  in PDT: this user has an individual load control group */
 10    45        2 save_pdir bit (1),				/* 22 save pdir after fatal process error */
 10    46        2 disconnect_ok bit (1),			/* 23 ok to save user's disconnected processes */
 10    47        2 save_on_disconnect bit (1),			/* 24 save them unless -nosave login arg is given */
 10    48        2 pad bit (12)) unaligned;
 10    49 
 10    50 dcl  USER_ATTRIBUTE_NAMES (0:24) char (20) int static options (constant) init
 10    51     ("none",					/* 0 */
 10    52      "administrator",				/* 1 */
 10    53      "primary_line",				/* 2 */
 10    54      "nobump",					/* 3 */
 10    55      "guaranteed_login",				/* 4 */
 10    56      "anonymous",					/* 5 */
 10    57      "nopreempt",					/* 6 */
 10    58      "nolist",					/* 7 */
 10    59      "dialok",					/* 8 */
 10    60      "multip",					/* 9 */
 10    61      "bumping",					/* 10 */
 10    62      "brief",					/* 11 */
 10    63      "vinitproc",					/* 12 */
 10    64      "vhomedir",					/* 13 */
 10    65      "nostartup",					/* 14 */
 10    66      "no_secondary",				/* 15 */
 10    67      "no_prime",					/* 16 */
 10    68      "no_eo",					/* 17 */
 10    69      "daemon",					/* 18 */
 10    70      "",						/* 19 vdim OBSOLETE */
 10    71      "no_warning",					/* 20 */
 10    72      "igroup",					/* 21 */
 10    73      "save_pdir",					/* 22 */
 10    74      "disconnect_ok",				/* 23 */
 10    75      "save_on_disconnect");				/* 24 */
 10    76 
 10    77 dcl  ALT_USER_ATTRIBUTE_NAMES (0:24) char (20) int static options (constant) init
 10    78     ("null",					/* 0 */
 10    79      "admin",					/* 1 */
 10    80      "", "",					/* 2 - 3 */
 10    81      "guar",					/* 4 */
 10    82      "anon",					/* 5 */
 10    83      "", "",					/* 6 - 7 */
 10    84      "dial",					/* 8 */
 10    85      "multi_login",					/* 9 */
 10    86      "preempting",					/* 10 */
 10    87      "",						/* 11 */
 10    88      "v_process_overseer",				/* 12 */
 10    89      "v_home_dir",					/* 13 */
 10    90      "no_start_up",					/* 14 */
 10    91      "no_sec",					/* 15 */
 10    92      "no_primary",					/* 16 */
 10    93      "no_edit_only",				/* 17 */
 10    94      "op_login",					/* 18 */
 10    95      "",						/* 19 */
 10    96      "nowarn",					/* 20 */
 10    97      "", "", "",					/* 21 - 23 */
 10    98      "save");					/* 24 */
 10    99 
 10   100 dcl  USER_ATTRIBUTES_always_allowed bit (36) aligned int static
 10   101      options(constant) init("000000000010000000010000000000000000"b);
 10   102     /* SAT/PDT attributes not needed for user to give (brief, no_warning) */
 10   103 
 10   104 dcl  USER_ATTRIBUTES_default_in_pdt bit (36) aligned int static
 10   105      options(constant) init("000000000010000000010000000000000000"b);
 10   106     /* PDT value for (brief, no_warning) is default */
 10   107 
 10   108 dcl  USER_ATTRIBUTES_settable_by_user bit (36) aligned int static
 10   109      options(constant) init("000100000110010000010000000000000000"b);	
 10   110     /* user MIGHT set (bump, ns, brief, guar, no_warning) */
 10   111 
 11     1 /* BEGIN INCLUDE FILE ... user_abs_attributes.incl.pl1 */
 11     2 
 11     3 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
 11     4 /*							       */
 11     5 /* This include file describes the attributes of an absentee job.  It is     */
 11     6 /* used by user_table_entry.incl.pl1, abs_message_format.incl.pl1            */
 11     7 /* and PIT.incl.pl1.   */
 11     8 /*							       */
 11     9 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
 11    10 
 11    11 /****^  HISTORY COMMENTS:
 11    12*  1) change(86-12-08,GDixon), approve(87-07-13,MCR7741),
 11    13*     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1056):
 11    14*     Separated abs_attributes from the request structure
 11    15*     (abs_message_format.incl.pl1) so that the identical structure could be
 11    16*     used in the ute structure (user_table_entry.incl.pl1).
 11    17*  2) change(87-04-19,GDixon), approve(87-07-13,MCR7741),
 11    18*     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1056):
 11    19*     Added ABS_ATTRIBUTE_NAMES array.
 11    20*  3) change(87-11-11,Parisek), approve(88-02-11,MCR7849),
 11    21*     audit(88-03-22,Lippard), install(88-07-13,MR12.2-1047):
 11    22*     Added the no_start_up flag. SCP6367
 11    23*                                                   END HISTORY COMMENTS */
 11    24 
 11    25 dcl 1 user_abs_attributes		aligned based,
 11    26       2 restartable			bit (1) unaligned,	/* 1 if request may be started over from the beginning */
 11    27       2 user_deferred_until_time	bit (1) unaligned,	/* 1 if request was specified as deferred */
 11    28       2 proxy			bit (1) unaligned,	/* 1 if request submitted for someone else */
 11    29       2 set_bit_cnt			bit (1) unaligned,	/* 1 if should set bit count after every write call */
 11    30       2 time_in_gmt			bit (1) unaligned,	/* 1 if deferred_time is in GMT */
 11    31       2 user_deferred_indefinitely	bit (1) unaligned,	/* 1 if operator is to say when to run it */
 11    32       2 secondary_ok		bit (1) unaligned,	/* 1 if ok to log in as secondary foreground user */
 11    33       2 truncate_absout		bit (1) unaligned,	/* 1 if .absout is to be truncated */
 11    34       2 restarted			bit (1) unaligned,	/* 1 if job is restarted */
 11    35       2 no_start_up                     bit (1) unaligned,	/* 1 if requested -ns */
 11    36       2 attributes_pad		bit (26) unaligned;
 11    37 
 11    38 dcl  ABS_ATTRIBUTE_NAMES (10) char (28) varying int static options(constant) init(
 11    39 	"restartable",
 11    40 	"user_deferred_until_time",
 11    41 	"proxy",
 11    42 	"set_bit_cnt",
 11    43 	"time_in_gmt",
 11    44 	"user_deferred_indefinitely",
 11    45 	"secondary_ok",
 11    46 	"truncate_absout",
 11    47 	"restarted",
 11    48 	"no_start_up");
 11    49 
 11    50 /* END INCLUDE FILE ... user_abs_attributes.incl.pl1 */
 11    51 
 10   112 
 10   113 
 10   114 /* END INCLUDE FILE ... user_attributes.incl.pl1 */
      488 
      489  /*  BEGIN INCLUDE FILE ... user_table_entry.incl.pl1 */
 12     2 
 12     3 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
 12     4 /*							       */
 12     5 /* This include file requires that the user include		       */
 12     6 /* user_attributes.incl.pl1 as well.  It also includes		       */
 12     7 /* abs_attributes.incl.pl1 itself.				       */
 12     8 /*							       */
 12     9 /* This include file must be included to use absentee_user_table.incl.pl1,   */
 12    10 /* answer_table.incl.pl1, and daemon_user_table.incl.pl1.		       */
 12    11 /*							       */
 12    12 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
 12    13 
 12    14 /****^  HISTORY COMMENTS:
 12    15*  1) change(81-12-21,Gilcrease), approve(86-03-27,MCR7370),
 12    16*     audit(86-06-23,Lippard), install(86-06-30,MR12.0-1082):
 12    17*     This comment for hcom.
 12    18*     81-12-21  E. N. Kittlitz. derived from abs_user_tab.incl.pl1,
 12    19*     anstbl.incl.pl1, and dutbl.incl.pl1.
 12    20*     82-01-02 E. N. Kittlitz. user_attributes.incl.pl1 changes
 12    21*     84-04-04 BIM added privileged_dial_server and dial_server_ring
 12    22*     84-07-12 BIM added min_process_authorization
 12    23*     84-12-31 Keith Loepere added pdir_dir_quota
 12    24*     85-01-16 by E. Swenson to add ute.session_uid
 12    25*  2) change(85-11-16,Swenson), approve(87-07-13,MCR7737),
 12    26*     audit(87-04-14,GDixon), install(87-08-04,MR12.1-1056):
 12    27*     Added fields for DSA login server support.
 12    28*  3) change(86-03-27,Gilcrease), approve(86-03-27,MCR7370),
 12    29*     audit(86-06-23,Lippard), install(86-06-30,MR12.0-1082):
 12    30*     Add truncate_absout and restarted bit for -truncate absout, SCP6297.
 12    31*  4) change(86-04-09,Herbst), approve(87-07-13,MCR7697),
 12    32*     audit(87-04-14,GDixon), install(87-08-04,MR12.1-1056):
 12    33*     Added disconnection_rel_minutes.
 12    34*  5) change(86-12-08,GDixon), approve(87-07-13,MCR7741),
 12    35*     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1056):
 12    36*     Changed structure under ute.abs_attributes to use like structure in
 12    37*     abs_attributes.incl.pl1.  This allows the same attributes to be used
 12    38*     in abs_message_format.incl.pl1 and pit.incl.pl1 as well as this include
 12    39*     file.
 12    40*  6) change(87-04-14,GDixon), approve(87-07-13,MCR7741),
 12    41*     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1056):
 12    42*     Move constants for ute.pw_flags.mask_ctl from answer_table.incl.pl1.
 12    43*  7) change(87-04-16,GDixon), approve(87-07-13,MCR7741),
 12    44*     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1056):
 12    45*      A) Global reorganization to locate things by type of data.
 12    46*      B) Eliminate ute.uflags.logged_in.
 12    47*  8) change(87-05-10,GDixon), approve(87-07-13,MCR7741),
 12    48*     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1056):
 12    49*      A) Reduced overlength person and project fields to proper length.
 12    50*      B) Adjusted dialed-console section to begin on even word boundary.
 12    51*  9) change(87-05-13,GDixon), approve(87-07-13,MCR7741),
 12    52*     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1056):
 12    53*     Add ute.line_type.
 12    54* 10) change(87-11-19,Parisek), approve(88-02-11,MCR7849),
 12    55*     audit(88-02-23,Lippard), install(88-07-13,MR12.2-1047):
 12    56*     Added the lowest_ring element. Used the upper half of ute.highest_ring
 12    57*     for the storage.  SCP6367
 12    58*                                                   END HISTORY COMMENTS */
 12    59 
 12    60 /* format: style4 */
 12    61 
 12    62 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
 12    63 /*							       */
 12    64 /* Each of the named sections below defines a type of data.  Typing comes    */
 12    65 /* from data associated with the ute entry itself, with the person, with     */
 12    66 /* login argument data, from the main user of the data (eg, dialup_,	       */
 12    67 /* load_ctl_, login server).  Each section begins on a double-word boundary  */
 12    68 /* and is an even number of words long.  The total structure is 300 decimal  */
 12    69 /* words long.						       */
 12    70 /*							       */
 12    71 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
 12    72 
 12    73 
 12    74 dcl  UTE_version_4 fixed bin internal static options (constant) init (4);
 12    75 
 12    76 dcl  utep pointer automatic init (null);
 12    77 
 12    78 dcl  1 ute based (utep) aligned,			/* individual entry in one of the user control tables */
 12    79 
 12    80 /* Variables which give state of this entry */
 12    81        2 active fixed bin,				/* state of entry. 0=>free. see dialup_values.incl.pl1 */
 12    82        2 process_type fixed bin,			/* 1=interactive, 2=absentee, 3=daemon */
 12    83        2 ute_index fixed bin,				/* index of ute in (anstbl autbl dutbl).entry array */
 12    84        2 next_free fixed bin,				/* points to previous free entry */
 12    85 
 12    86 /* Information user gave about person_id associated with this entry. */
 12    87        2 person char (24) unal,			/* user's name */
 12    88        2 project char (12) unal,			/* project of absentee user */
 12    89        2 tag char (1) unal,				/* instance tag - someday will be generated */
 12    90        2 tag_pad bit (27) unal,
 12    91        2 anonymous fixed bin,				/* 1 if anonymous, otherwise 0 */
 12    92        2 login_flags,				/* flags for login data */
 12    93          3 cpw bit (1) unal,				/* flag for wish to change password */
 12    94          3 generate_pw bit (1) unal,			/* flag meaning -generate_pw (-gpw) was used. */
 12    95          3 special_pw unal,				/* dial or slave */
 12    96 	 4 dial_pw bit (1) unal,			/* true if dial -user */
 12    97 	 4 slave_pw bit (1) unal,			/* true if slave -user */
 12    98          3 cdp bit (1) unal,				/* flag for wish to change default project */
 12    99          3 cda bit (1) unal,				/* flag to change default authorization */
 12   100          3 auth_given bit (1) unal,			/* flag to mean -authorization was used. */
 12   101          3 noprint bit (1) unal,			/* used at logout. inhibits printing. */
 12   102          3 operator bit (1) unaligned,			/* user specified -operator on login command line */
 12   103          3 pw_pad bit (25) unal,			/* spare parts */
 12   104          3 mask_ctl bit (2) unal,			/* bits controlling pw mask. See constants, below */
 12   105 						/* Must remain last in pw_flags so it does not */
 12   106 						/* appear in PW_FLAG_VALUES array below. */
 12   107        2 generated_pw char (8) unal,			/* user must type this as new password */
 12   108        2 old_password char (8) unal,			/* must match user's previous password (value scrambled) */
 12   109        2 process_authorization bit (72),		/* access_authorization of this process */
 12   110 
 12   111 /* Information user gave about process associated with this entry. */
 12   112        2 outer_module char (32) unal,			/* Name of console dim */
 12   113        2 home_dir char (64) unal,			/* initial home directory */
 12   114        2 init_proc char (64) unal,			/* name of login responder */
 12   115        2 ip_len fixed bin (17) unal,			/* length of initproc string */
 12   116        2 ss_len fixed bin (17) unal,			/* length of subsystem string */
 12   117        2 ur_at like user_attributes aligned,		/* bits on means attributes given by user */
 12   118        2 at like user_attributes aligned,		/* bits on means attribute is on */
 12   119        2 initial_ring fixed bin,			/* ring process will be started in */
 12   120        2 arg_count fixed bin,				/* number of arguments to absentee control segment */
 12   121        2 ln_args fixed bin,				/* length of string containing arguments */
 12   122        2 arg_lengths_ptr ptr,				/* pointer to array of argument lengths */
 12   123        2 args_ptr ptr,				/* pointer to arguments to absentee control segment */
 12   124 
 12   125 /* Most of the following information is relevant only to absentee processes */
 12   126        2 input_seg char (168) unal,			/* pathname of absentee control segment */
 12   127        2 output_seg char (168) unal,			/* pathname of absentee output file */
 12   128        2 request_id fixed bin (71),			/* time request was entered - used as uid of request */
 12   129        2 reservation_id fixed bin (71),			/* nonzero if job has a resource reservation */
 12   130        2 message_id bit (72),				/* message segment id assoc with absentee request */
 12   131        2 deferred_time fixed bin (71),			/* time at which absentee process should be created */
 12   132        2 max_cpu_time fixed bin (35),			/* maximum number of seconds this process can run */
 12   133        2 queue fixed bin,				/* -1=daemon;0=interactive or foreground;>0=queue no.
 12   134*						   (but see uflags.adjust_abs_q_no). */
 12   135        2 real_queue fixed bin,			/* real queue number; ute.queue gets fudged sometimes */
 12   136        2 abs_attributes aligned like user_abs_attributes,	/* include abs_attributes.incl.pl1 */
 12   137        2 abs_flags,
 12   138          3 abs_run bit (1) unal,			/* on if job was started by abs run command */
 12   139          3 notify bit (1) unal,			/* on if user wants notification at login and logout */
 12   140          3 abs_flags_pad bit (34) unal,
 12   141        2 abs_group char (8) unal,			/* original group before load_ctl_ moves it to absentee group */
 12   142        2 sender char (32) unal,			/* name of RJE station that job is from */
 12   143        2 proxy_person char (28) unal,			/* name of user who actually entered the request, if proxy */
 12   144        2 proxy_project char (9) unal,
 12   145        2 proxy_project_pad char (3) unal,
 12   146        2 abs_pad fixed bin,
 12   147 
 12   148 /* Information about process actually created */
 12   149        2 proc_id bit (36),				/* process id of absentee process */
 12   150        2 session_uid fixed bin (35),			/* Unique authentication session id */
 12   151        2 process_authorization_range (2) bit (72) aligned,
 12   152        2 audit bit (36),				/* audit flags for user */
 12   153        2 lot_size fixed bin,				/* Size of linkage offset table */
 12   154        2 kst_size fixed bin,				/* Size of process known segment table */
 12   155        2 cls_size fixed bin,				/* Size of process combined linkage */
 12   156        2 sus_channel fixed bin (71),			/* event channel on which suspended process is blocked */
 12   157        2 lowest_ring fixed bin (17) unal,		/* lowest ring permitted */
 12   158        2 highest_ring fixed bin (17) unal,		/* highest ring permitted */
 12   159        2 pdir_lvix fixed bin (17) unal,			/* index in disk table of lv where pdir is */
 12   160        2 pdir_quota fixed bin (17) unal,		/* process directory quota */
 12   161        2 pdir_dir_quota fixed bin (17) unal,		/* process directory quota for dirs */
 12   162        2 pdir_pad fixed bin(17) unal,
 12   163        2 process_pad fixed bin,
 12   164 
 12   165 /* Information about primary terminal associated with this entry */
 12   166        2 tty_name char (32) unal,			/* absentee=>"abs1", etc.  daemon=>"bk", etc. */
 12   167        2 terminal_type char (32) unaligned,		/* terminal type */
 12   168        2 line_type fixed bin,				/* line type */
 12   169        2 tty_id_code char (4) unal,			/* "none" for absentee */
 12   170        2 network_connection_type fixed bin,		/* see net_event_message.incl.pl1 */
 12   171        2 channel ptr unal,				/* points to CDT entry for user, if any */
 12   172 
 12   173 /* Variables useful for dialed terminals */
 12   174        2 ndialed_consoles fixed bin,			/* if master, number of slaves */
 12   175        2 dial_qualifier char (22) unal,			/* first argument to dial command */
 12   176        2 dial_server_ring fixed bin (3) unsigned unaligned, /* dial server intends to attach dialing in channels at this ring. */
 12   177        2 dial_server_flags,
 12   178          3 registered_dial_server bit (1) unal,		/* process is a registered dial server */
 12   179          3 privileged_dial_server bit (1) unal,		/* "1"b -> serves range of AIM classes */
 12   180          3 dial_server_flags_pad bit (13) unal,		/* fill out the word */
 12   181        2 dial_ev_chn fixed bin (71),			/* if master, control event channel */
 12   182 
 12   183 /* Information about usage/accounting.  Device usage meters are in a
 12   184*   separate segment, "devtab" */
 12   185        2 pdtep ptr,					/* ptr to user's pdt entry, where usage meters live */
 12   186        2 cpu_this_process fixed bin (71),		/* cpu used so far this process */
 12   187        2 cpu_usage fixed bin (71),			/* total cpu time used in this session */
 12   188        2 mem_usage fixed bin (71),			/* memory usage for previous processes in session */
 12   189        2 mem_this_process fixed bin (71),		/* memory usage at last update */
 12   190        2 last_update_time fixed bin (71),		/* time of last account update */
 12   191        2 session_cost float bin,			/* dollar cost of session, for printing in logout messages */
 12   192        2 ndevices fixed bin,				/* Count of attached devices */
 12   193        2 device_head fixed bin,			/* Table index of head of device chain */
 12   194        2 device_tail fixed bin,			/* Table index of tail of device chain */
 12   195        2 rs_number fixed bin (6) unsigned unal,		/* rate structure number */
 12   196        2 rs_number_pad bit(30) unal,
 12   197        2 usage_pad fixed bin,
 12   198 
 12   199 /* Information for dialup_ (control variables). */
 12   200        2 event fixed bin (71),			/* event associated with channel or user manager */
 12   201        2 uprojp ptr,				/* ptr to user project sat entry */
 12   202        2 login_time fixed bin (71),			/* time when absentee user approved by lg_ctl_ */
 12   203        2 cant_bump_until fixed bin (71),		/* bump-protection clock */
 12   204        2 recent_fatal_error_time fixed bin (71),		/* time of first error in the suspected loop */
 12   205        2 recent_fatal_error_count fixed bin,		/* counter to detect fatal process error loops */
 12   206        2 failure_reason fixed bin,			/* why login refused 1=lg_ctl, 2=act_ctl, 3=load_ctl */
 12   207        2 count fixed bin,				/* counter for logins and dialups */
 12   208        2 n_processes fixed bin,			/* number of processes created in this session */
 12   209        2 lock_value fixed bin,			/* number of locks set for this entry */
 12   210        2 login_result fixed bin,			/* 0=logged in;1=hopeless,hang him up;2=allow another attempt */
 12   211        2 login_code char (8) unal,			/* login command from LOGIN line */
 12   212        2 preempted fixed bin,				/* if ^= 0 user preempted (never for abs) */
 12   213        2 destroy_flag fixed bin,			/* >8 when awaiting destroy */
 12   214        2 logout_type char (4) unal,			/* type of logout */
 12   215        2 logout_index fixed bin,			/* to save logout handler index while waiting for termsgnl */
 12   216        2 disconnection_rel_minutes fixed bin (17) unal,	/* disconnected this many minutes after login_time */
 12   217        2 next_disconnected_ate_index fixed bin (17) unal,	/* thread of list of user's disconnected processes */
 12   218        2 work_class fixed bin,			/* work class used by priority scheduler */
 12   219        2 group char (8) unal,				/* party group identifier */
 12   220        2 whotabx fixed bin,				/* index of user's entry in whotab */
 12   221 
 12   222        2 uflags,					/* Miscellaneous flags */
 12   223          3 dont_call_init_admin bit (1) unal,		/* Call overseer directly */
 12   224          3 ip_given bit (1) unal,			/* user gave an initproc arg on login line */
 12   225          3 ss_given bit (1) unal,			/* initial_procedure contains a subsystem name */
 12   226          3 lvs_attached bit (1) unal,			/* set and used by the lv_request_ procedure */
 12   227          3 send_initial_string bit (1) unal,		/* initial string should be sent after login line read */
 12   228          3 adjust_abs_q_no bit (1) unal,		/* this is an absentee job; user_profile.queue is NOT true Q # */
 12   229          3 foreground_secondary_ok bit (1) unal,		/* ok to login foreground absentee job as secondary */
 12   230          3 foreground_job bit (1) unal,			/* job was originally from foreground queue */
 12   231          3 sus_sent bit (1) unal,			/* sus_ ips signal has been sent to process */
 12   232          3 suspended bit (1) unal,			/* process has responded to sus_ signal */
 12   233          3 ignore_cpulimit bit (1) unal,		/* process is released, but timer can't be turned off */
 12   234          3 deferral_logged bit (1) unal,		/* abs job deferral has already been logged once */
 12   235          3 save_if_disconnected bit (1) unal,		/* user wants process preserved across hangups */
 12   236          3 disconnected bit (1) unal,			/* process is disconnected from terminal */
 12   237          3 disconnected_list bit (1) unal,		/* this ate is on a list of disconnected processes */
 12   238          3 proc_create_ok bit (1) unal,			/* lg_ctl_ has set the process creation variables */
 12   239          3 activity_can_unbump bit (1) unal,		/* only bump pending is for inactivity */
 12   240          3 fpe_causes_logout bit (1) unal,		/* "1"b means don't try to new_proc after fatal process error */
 12   241          3 user_specified_immediate bit (1) unal,		/* "1"b -> don't wait around for process destruction. */
 12   242          3 uflags_pad bit (17) unal,
 12   243 
 12   244 /* Information used by load_ctl_ for the process */
 12   245        2 user_weight fixed bin,			/* usually 10 - used in load control */
 12   246        2 standby_line fixed bin,			/* 0=user has primary line, 1=standby user */
 12   247        2 bump_grace fixed bin (71),			/* bump grace in microseconds */
 12   248 
 12   249 
 12   250 /* Information for login server */
 12   251        2 login_server_info,
 12   252          3 our_handle bit (72) aligned,			/* how LS refers to us. */
 12   253          3 his_handle bit (72) aligned,			/* how we talk to LS */
 12   254          3 termination_event_channel fixed bin (71),	/* for process termination notifications to the LS */
 12   255          3 response_event_channel fixed bin (71),		/* for other communications with the LS */
 12   256          3 process_id bit (36) aligned,			/* process_id of login server */
 12   257        2 ls_pad (5) fixed bin;			/* pad to 300 decimal words */
 12   258 
 12   259 /* values for ute.process_type */
 12   260 
 12   261 dcl  (PT_INTERACTIVE initial (1),
 12   262      PT_ABSENTEE initial (2),
 12   263      PT_DAEMON initial (3)) fixed bin internal static options (constant);
 12   264 
 12   265 dcl  PROCESS_TYPE_NAMES (0:3) char(12) varying int static options(constant) init(
 12   266 	"INVALID-TYPE",
 12   267 	"interactive",
 12   268 	"absentee",
 12   269 	"daemon");
 12   270 
 12   271 dcl  TABLE_NAMES (0:3) char(20) int static options(constant) init(
 12   272 	"UNKNOWN-TABLE",
 12   273 	"answer_table",
 12   274 	"absentee_user_table",
 12   275 	"daemon_user_table");
 12   276 
 12   277 
 12   278 /* values for ute.pw_flags.mask_ctl  */
 12   279 
 12   280 dcl  (DO_MASK init ("00"b),
 12   281      DONT_MASK init ("01"b),
 12   282      DERIVE_MASK init ("10"b)) bit (2) internal static options (constant);
 12   283 
 12   284 dcl  MASK_CTL_NAMES (0:3) char(12) varying int static options(constant) init(
 12   285 	"do_mask", "dont_mask", "derive_mask", "");
 12   286 
 12   287 
 12   288 /* names for ute.pw_flags */
 12   289 
 12   290 dcl  PW_FLAG_NAMES (9) char (12) varying int static options(constant) init(
 12   291 	"cpw",
 12   292 	"generate_pw",
 12   293 	"dial_pw",
 12   294 	"slave_pw",
 12   295 	"cdp",
 12   296 	"cda",
 12   297 	"auth_given",
 12   298 	"noprint",
 12   299 	"operator");
 12   300 
 12   301 /* names for ute.uflags */
 12   302 
 12   303 dcl  UFLAG_NAMES (19) char (24) varying int static options (constant) init (
 12   304 	"dont_call_init_admin",
 12   305 	"ip_given",
 12   306 	"ss_given",
 12   307 	"lvs_attached",
 12   308 	"send_initial_string",
 12   309 	"adjust_abs_q_no",
 12   310 	"foreground_secondary_ok",
 12   311 	"foreground_job",
 12   312 	"sus_sent",
 12   313 	"suspended",
 12   314 	"ignore_cpulimit",
 12   315 	"deferral_logged",
 12   316 	"save_if_disconnected",
 12   317 	"disconnected",
 12   318 	"disconnected_list",
 12   319 	"proc_create_ok",
 12   320 	"activity_can_unbump",
 12   321 	"fpe_causes_logout",
 12   322 	"user_specified_immediate");
 12   323 
 12   324 /* names for ute.abs_flags */
 12   325 
 12   326 dcl  ABS_FLAG_NAMES (2) char (8) varying int static options (constant) init (
 12   327 	"abs_run",
 12   328 	"notify");
 12   329 
 12   330 /* names of ute.dial_server_flags */
 12   331 
 12   332 dcl  DIAL_SERVER_FLAG_NAMES (2) char (12) varying int static options (constant) init (
 12   333 	"registered",
 12   334 	"privileged");
 12   335 
 12   336 /* values of ute.login_result */
 12   337 
 12   338 dcl  LOGIN_RESULT_VALUES (0:2) char(24) varying int static options(constant) init(
 12   339 	"logged in",
 12   340 	"login failed, hangup",
 12   341 	"login failed, try again");
 12   342 
 12   343 /*  END INCLUDE FILE ... user_table_entry.incl.pl1 */
      489 
      490  /* BEGIN INCLUDE FILE ... user_table_header.incl.pl1 */
 13     2 
 13     3 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
 13     4 /*							       */
 13     5 /* This include file declares the header shared by the answer_table,	       */
 13     6 /* absentee_user_table and daemon_user_table include files.		       */
 13     7 /*							       */
 13     8 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
 13     9 
 13    10 /****^  HISTORY COMMENTS:
 13    11*  1) change(87-04-26,GDixon), approve(87-07-13,MCR7741),
 13    12*     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1056):
 13    13*     Initial coding.
 13    14*                                                   END HISTORY COMMENTS */
 13    15 
 13    16 dcl  1 ut_header			aligned based,	/* header shared by all user control tables. */
 13    17        2 header_version fixed bin,			/* version of the header (3) */
 13    18        2 entry_version fixed bin,			/* version of user table entries */
 13    19        2 user_table_type fixed bin,			/* 1 interactive, 2 absentee, 3 daemon */
 13    20        2 header_length fixed bin,			/* length of the header */
 13    21        2 max_size fixed bin,				/* max number of entries in this table */
 13    22        2 current_size fixed bin,			/* actual size of table (in entries) */
 13    23        2 number_free fixed bin,			/* number of free entries in the table. */
 13    24        2 first_free fixed bin,			/* index of first entry in the free list. */
 13    25        2 as_procid bit (36),				/* process ID of user table manager process */
 13    26        2 ut_header_pad fixed bin;
 13    27 
 13    28 /* END INCLUDE FILE ... user_table_header.incl.pl1 */
      490 
      491 
      492      end uc_create_process_check_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    07/13/88  0904.2  uc_create_process_check_.pl1      >special_ldd>install>MR12.2-1047>uc_create_process_check_.pl1
479          1    08/06/87  0913.0  answer_table.incl.pl1             >ldd>include>answer_table.incl.pl1
480          2    08/06/87  0913.4  as_data_.incl.pl1                 >ldd>include>as_data_.incl.pl1
481          3    08/06/87  0913.4  dialup_values.incl.pl1            >ldd>include>dialup_values.incl.pl1
482          4    08/06/87  0913.4  login_server_messages.incl.pl1    >ldd>include>login_server_messages.incl.pl1
483          5    09/13/84  0921.6  pdt.incl.pl1                      >ldd>include>pdt.incl.pl1
5-29         6    04/21/82  1211.8  author.incl.pl1                   >ldd>include>author.incl.pl1
486          7    08/06/87  1416.6  sat.incl.pl1                      >ldd>include>sat.incl.pl1
7-34         8    04/21/82  1211.8  author.incl.pl1                   >ldd>include>author.incl.pl1
487          9    08/06/87  0913.5  sys_log_constants.incl.pl1        >ldd>include>sys_log_constants.incl.pl1
488         10    08/06/87  0913.6  user_attributes.incl.pl1          >ldd>include>user_attributes.incl.pl1
10-112      11    07/13/88  0900.1  user_abs_attributes.incl.pl1      >special_ldd>install>MR12.2-1047>user_abs_attributes.incl.pl1
489         12    07/13/88  0903.2  user_table_entry.incl.pl1         >special_ldd>install>MR12.2-1047>user_table_entry.incl.pl1
490         13    08/06/87  0913.6  user_table_header.incl.pl1        >ldd>include>user_table_header.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
FALSE                                  constant        bit(1)                   initial dcl 94 ref 250 443
ME                              000247 constant        char(24)                 initial packed unaligned dcl 93 ref 472
NETWORK_CONNECTION_DSA_FILE_TRANSFER   constant        fixed bin(17,0)          initial dcl 4-471 ref 243
NETWORK_CONNECTION_LOGIN               constant        fixed bin(17,0)          initial dcl 4-471 ref 241
NOW_LOGGED_IN                          constant        fixed bin(17,0)          initial dcl 3-76 ref 105
PT_ABSENTEE                            constant        fixed bin(17,0)          initial dcl 12-261 ref 153
PT_INTERACTIVE                         constant        fixed bin(17,0)          initial dcl 12-261 ref 179 209 440
P_code                                 parameter       fixed bin(35,0)          dcl 141 in procedure "Abort_Create" ref 138 143
P_code                                 parameter       fixed bin(35,0)          dcl 59 in procedure "uc_create_process_check_" set
                                                                                  ref 52 118*
P_ls_process_request_ptr               parameter       pointer                  dcl 57 ref 52 126
P_utep                                 parameter       pointer                  dcl 58 ref 52 125
TRUE                                   constant        bit(1)                   initial dcl 94 ref 117 282 312 441
abs_flags               250            based           structure                level 2 dcl 12-78
abs_foreground_cpu_limit
                        115            based           fixed bin(17,0)          level 2 in structure "project" packed packed
                                                                                  unaligned dcl 7-53 in procedure
                                                                                  "uc_create_process_check_" ref 156
abs_foreground_cpu_limit
                        376            based           fixed bin(17,0)          level 2 in structure "user" packed packed unaligned
                                                                                  dcl 5-58 in procedure "uc_create_process_check_"
                                                                                  ref 157 159 159
abs_run                 250            based           bit(1)                   level 3 packed packed unaligned dcl 12-78 ref 190
act_ctl_$check_for_process_creation
                                000010 constant        entry                    external dcl 70 ref 225
active                                 based           fixed bin(17,0)          level 2 dcl 12-78 ref 105
addr                                                   builtin function         dcl 99 ref 474 474
anonymous                16            based           fixed bin(17,0)          level 2 dcl 12-78 ref 209
ansp                            000110 automatic       pointer                  initial dcl 1-53 set ref 1-53* 129* 134
anstbl                                 based           structure                level 1 dcl 1-55
arg_list_ptr              2     000116 automatic       pointer                  level 2 dcl 9-24 set ref 473*
as_data_$ansp                   000052 external static pointer                  dcl 2-26 ref 129
as_data_$default_weight         000054 external static fixed bin(35,0)          dcl 2-34 ref 427
as_data_$dft_user_ring          000056 external static fixed bin(3,0)           dcl 2-36 ref 333 361
as_data_$max_user_ring          000060 external static fixed bin(3,0)           dcl 2-41 ref 349 349 365
as_data_$satp                   000062 external static pointer                  dcl 2-52 ref 130
as_data_$tty_dim                000064 external static char(32)                 packed unaligned dcl 2-57 ref 384 390
as_error_table_$already_logged_in
                                000016 external static fixed bin(35,0)          dcl 76 set ref 182* 213*
as_error_table_$illegal_hd_arg  000020 external static fixed bin(35,0)          dcl 77 set ref 432*
as_error_table_$illegal_ip_arg  000022 external static fixed bin(35,0)          dcl 78 set ref 260*
as_error_table_$illegal_om_arg  000014 external static fixed bin(35,0)          dcl 75 set ref 378*
as_error_table_$illegal_ss_arg  000024 external static fixed bin(35,0)          dcl 79 set ref 289*
as_error_table_$long_ip_arg     000026 external static fixed bin(35,0)          dcl 80 set ref 304*
as_error_table_$long_ss_arg     000030 external static fixed bin(35,0)          dcl 81 set ref 306*
as_error_table_$no_primary      000032 external static fixed bin(35,0)          dcl 82 set ref 165*
as_error_table_$ring_too_high   000034 external static fixed bin(35,0)          dcl 83 set ref 367*
as_error_table_$ring_too_low    000036 external static fixed bin(35,0)          dcl 84 set ref 345*
as_error_table_$user_fg_cpu_limit
                                000040 external static fixed bin(35,0)          dcl 85 set ref 162*
as_error_table_$user_max_bg     000042 external static fixed bin(35,0)          dcl 86 set ref 196*
as_error_table_$user_max_fg     000044 external static fixed bin(35,0)          dcl 87 set ref 185*
at                      100            based           structure                level 2 dcl 12-78
caller                   17     000116 automatic       varying char(65)         level 2 dcl 9-24 set ref 472*
clock                                                  builtin function         dcl 99 ref 134
cls_size                307            based           fixed bin(17,0)          level 2 in structure "ute" dcl 12-78 in procedure
                                                                                  "uc_create_process_check_" set ref 418*
cls_size                 71            based           fixed bin(17,0)          level 2 in structure "user" dcl 5-58 in procedure
                                                                                  "uc_create_process_check_" ref 418
code                            000100 automatic       fixed bin(35,0)          dcl 63 set ref 118 127* 143* 225* 226 226* 451* 452
                                                                                  452*
cu_$arg_list_ptr                000066 constant        entry                    external dcl 468 ref 473
current_time            126            based           fixed bin(71,0)          level 2 dcl 1-55 set ref 134*
default_io_module        56            based           char(32)                 level 3 dcl 4-103 ref 387 387
default_ring             56            based           fixed bin(17,0)          level 2 packed packed unaligned dcl 5-58 ref 330
disconnect_ok           100(22)        based           bit(1)                   level 3 packed packed unaligned dcl 12-78 ref 441
dont_call_init_admin     72            based           bit(1)                   level 3 in structure "user" packed packed unaligned
                                                                                  dcl 5-58 in procedure "uc_create_process_check_"
                                                                                  ref 275
dont_call_init_admin    431            based           bit(1)                   level 3 in structure "ute" packed packed unaligned
                                                                                  dcl 12-78 in procedure "uc_create_process_check_"
                                                                                  set ref 250* 275* 282*
error_table_$bad_arg            000046 external static fixed bin(35,0)          dcl 88 set ref 243*
error_table_$out_of_sequence    000050 external static fixed bin(35,0)          dcl 89 set ref 105*
fixed_part                             based           structure                level 2 dcl 4-103
foreground_secondary_ok
                        431(06)        based           bit(1)                   level 3 packed packed unaligned dcl 12-78 ref 165
high_ring                55            based           fixed bin(17,0)          level 2 dcl 5-58 set ref 357 357* 365
highest_ring            312(18)        based           fixed bin(17,0)          level 2 packed packed unaligned dcl 12-78 set ref
                                                                                  370*
home_dir                 36            based           char(64)                 level 2 in structure "ute" packed packed unaligned
                                                                                  dcl 12-78 in procedure "uc_create_process_check_"
                                                                                  set ref 432 436*
home_dir                 34            based           char(64)                 level 2 in structure "user" dcl 5-58 in procedure
                                                                                  "uc_create_process_check_" ref 436
i                               000562 automatic       fixed bin(17,0)          dcl 400 set ref 423* 424 424*
index                                                  builtin function         dcl 99 ref 267
init_proc                56            based           char(64)                 level 2 packed packed unaligned dcl 12-78 set ref
                                                                                  247* 248 256 272* 278 302 309* 424
initial_procedure        14            based           char(64)                 level 2 dcl 5-58 ref 267 268 272 296
initial_ring            101            based           fixed bin(17,0)          level 2 dcl 12-78 set ref 328 328 345 345 353* 367
initproc                 46            based           char(64)                 array level 3 packed packed unaligned dcl 7-32 ref
                                                                                  424
ip_given                431(01)        based           bit(1)                   level 3 in structure "ute" packed packed unaligned
                                                                                  dcl 12-78 in procedure "uc_create_process_check_"
                                                                                  ref 259 304
ip_given                 72(01)        based           bit(1)                   level 3 in structure "user" packed packed unaligned
                                                                                  dcl 5-58 in procedure "uc_create_process_check_"
                                                                                  ref 264
ip_len                   76            based           fixed bin(17,0)          level 2 in structure "ute" packed packed unaligned
                                                                                  dcl 12-78 in procedure "uc_create_process_check_"
                                                                                  set ref 248* 256 274* 278 278 283* 283 302 309
ip_len                          000514 automatic       fixed bin(17,0)          dcl 234 in procedure
                                                                                  "Setup_Initial_Procedure_And_Subsystem" set ref
                                                                                  264* 267* 268 268* 272 272 274
ip_len                   73            based           fixed bin(17,0)          level 2 in structure "user" packed packed unaligned
                                                                                  dcl 5-58 in procedure "uc_create_process_check_"
                                                                                  ref 264 296
kst_size                 70            based           fixed bin(17,0)          level 2 in structure "user" dcl 5-58 in procedure
                                                                                  "uc_create_process_check_" ref 417
kst_size                306            based           fixed bin(17,0)          level 2 in structure "ute" dcl 12-78 in procedure
                                                                                  "uc_create_process_check_" set ref 417*
length                                                 builtin function         dcl 99 ref 248 268 278 278 278 283 302
limit                           000412 automatic       fixed bin(17,0)          dcl 150 set ref 156* 157 157* 159* 159 162 162 172*
                                                                                  173 173* 175* 175 177 177 191* 192 192* 194* 194
                                                                                  196 196
load_ctl_$check_for_process_creation
                                000012 constant        entry                    external dcl 71 ref 451
login_server_process_request           based           structure                level 1 dcl 4-103
login_server_response_header           based           structure                level 1 dcl 4-258
long_info                       000432 automatic       varying char(168)        dcl 223 set ref 225*
lot_size                305            based           fixed bin(17,0)          level 2 in structure "ute" dcl 12-78 in procedure
                                                                                  "uc_create_process_check_" set ref 416*
lot_size                 67            based           fixed bin(17,0)          level 2 in structure "user" dcl 5-58 in procedure
                                                                                  "uc_create_process_check_" ref 416
low_ring                 56(18)        based           fixed bin(17,0)          level 2 packed packed unaligned dcl 5-58 set ref 324
                                                                                  324* 332 352
lowest_ring             312            based           fixed bin(17,0)          level 2 packed packed unaligned dcl 12-78 set ref
                                                                                  352*
ls_request_header                      based           structure                level 1 dcl 4-54
ls_request_ptr                  000112 automatic       pointer                  dcl 4-50 set ref 126* 336 337 338 341 387 387
max                                                    builtin function         dcl 99 ref 332 352
max_background          114(27)        based           fixed bin(9,0)           level 2 in structure "project" packed packed
                                                                                  unsigned unaligned dcl 7-53 in procedure
                                                                                  "uc_create_process_check_" ref 191
max_background          361(27)        based           fixed bin(9,0)           level 2 in structure "user" packed packed unsigned
                                                                                  unaligned dcl 5-58 in procedure
                                                                                  "uc_create_process_check_" ref 192 194 194
max_cpu_time            244            based           fixed bin(35,0)          level 2 dcl 12-78 ref 162
max_foreground          361(18)        based           fixed bin(9,0)           level 2 in structure "user" packed packed unsigned
                                                                                  unaligned dcl 5-58 in procedure
                                                                                  "uc_create_process_check_" ref 173 175 175
max_foreground          114(18)        based           fixed bin(9,0)           level 2 in structure "project" packed packed
                                                                                  unsigned unaligned dcl 7-53 in procedure
                                                                                  "uc_create_process_check_" ref 172
max_ring                 73            based           fixed bin(17,0)          level 2 dcl 7-53 set ref 357 357* 361 363
min                                                    builtin function         dcl 99 ref 159 175 194 365 409
min_ring                 72            based           fixed bin(17,0)          level 2 dcl 7-53 set ref 324 324* 332 352
minimum_ring             72            based           fixed bin(17,0)          level 3 dcl 4-103 set ref 337 338* 341
minimum_ring_given       70(01)        based           bit(1)                   level 4 packed packed unaligned dcl 4-103 ref 336
multip                  100(08)        based           bit(1)                   level 3 packed packed unaligned dcl 12-78 ref 180
                                                                                  213
n_background            361(09)        based           fixed bin(9,0)           level 2 packed packed unsigned unaligned dcl 5-58
                                                                                  ref 196
n_foreground            361            based           fixed bin(9,0)           level 2 packed packed unsigned unaligned dcl 5-58
                                                                                  ref 177
n_interactive           362            based           fixed bin(9,0)           level 2 packed packed unsigned unaligned dcl 5-58
                                                                                  ref 180 212
network_connection_type
                        340            based           fixed bin(17,0)          level 2 dcl 12-78 ref 241 241 243
null                                                   builtin function         dcl 99 ref 1-53 485 12-76
other_flags              70            based           structure                level 3 dcl 4-103
outer_module             57            based           char(32)                 level 2 in structure "user" dcl 5-58 in procedure
                                                                                  "uc_create_process_check_" ref 383
outer_module             26            based           char(32)                 level 2 in structure "ute" packed packed unaligned
                                                                                  dcl 12-78 in procedure "uc_create_process_check_"
                                                                                  set ref 378 382 383* 384 384 387* 390*
pdir_quota              313(18)        based           fixed bin(17,0)          level 2 in structure "ute" packed packed unaligned
                                                                                  dcl 12-78 in procedure "uc_create_process_check_"
                                                                                  set ref 409* 411*
pdir_quota              114            based           fixed bin(17,0)          level 2 in structure "project" packed packed
                                                                                  unaligned dcl 7-53 in procedure
                                                                                  "uc_create_process_check_" set ref 404 405 405*
                                                                                  409
pdir_quota              376(18)        based           fixed bin(17,0)          level 2 in structure "user" packed packed unaligned
                                                                                  dcl 5-58 in procedure "uc_create_process_check_"
                                                                                  set ref 405 405* 409 411
pdtep                           000102 automatic       pointer                  dcl 64 in procedure "uc_create_process_check_" set
                                                                                  ref 132* 157 159 159 173 175 175 177 180 192 194
                                                                                  194 196 212 264 264 267 268 272 275 293 295 296
                                                                                  296 296 324 324 330 332 352 357 357 365 383 405
                                                                                  405 409 411 416 417 418 436
pdtep                   354            based           pointer                  level 2 in structure "ute" dcl 12-78 in procedure
                                                                                  "uc_create_process_check_" ref 132
pdtp                            000114 automatic       pointer                  initial dcl 485 set ref 485*
person                    4            based           char(24)                 level 2 packed packed unaligned dcl 12-78 set ref
                                                                                  324* 338* 357* 405*
pm_ok                   100(15)        based           bit(1)                   level 3 packed packed unaligned dcl 12-78 ref 165
proc_create_ok          431(15)        based           bit(1)                   level 3 packed packed unaligned dcl 12-78 set ref
                                                                                  117*
process_type              1            based           fixed bin(17,0)          level 2 dcl 12-78 ref 153 179 209 440
project                  12            based           char(12)                 level 2 in structure "ute" packed packed unaligned
                                                                                  dcl 12-78 in procedure "uc_create_process_check_"
                                                                                  set ref 324* 338* 357* 405*
project                                based           structure                level 1 dcl 7-53 in procedure
                                                                                  "uc_create_process_check_"
queue                   245            based           fixed bin(17,0)          level 2 dcl 12-78 ref 152
ring                            000544 automatic       fixed bin(3,0)           dcl 322 set ref 328* 330* 332* 332 333 333* 337 338*
                                                                                  341* 345 349 349* 353 361* 363* 365* 365 367 370
rtrim                                                  builtin function         dcl 99 ref 248
sat                                    based           structure                level 1 dcl 7-32
satep                           000106 automatic       pointer                  dcl 66 set ref 131* 156 172 191 324 324 332 352 357
                                                                                  357 361 363 404 405 405 409
satp                            000104 automatic       pointer                  dcl 65 set ref 130* 423 424 424
save_if_disconnected    431(12)        based           bit(1)                   level 3 packed packed unaligned dcl 12-78 set ref
                                                                                  441* 443*
save_on_disconnect      100(23)        based           bit(1)                   level 3 packed packed unaligned dcl 12-78 ref 441
short_info                      000430 automatic       char(8)                  dcl 222 set ref 225*
sl_info                         000116 automatic       structure                level 1 dcl 9-24 set ref 471* 474 474
sl_info_msg                     000000 constant        structure                level 1 dcl 9-214 ref 471
ss_given                431(02)        based           bit(1)                   level 3 in structure "ute" packed packed unaligned
                                                                                  dcl 12-78 in procedure "uc_create_process_check_"
                                                                                  set ref 256 288 312*
ss_given                 72(02)        based           bit(1)                   level 3 in structure "user" packed packed unaligned
                                                                                  dcl 5-58 in procedure "uc_create_process_check_"
                                                                                  ref 293
ss_len                          000515 automatic       fixed bin(17,0)          dcl 235 in procedure
                                                                                  "Setup_Initial_Procedure_And_Subsystem" set ref
                                                                                  291* 295* 299* 301 302 309 309 311
ss_len                   76(18)        based           fixed bin(17,0)          level 2 in structure "ute" packed packed unaligned
                                                                                  dcl 12-78 in procedure "uc_create_process_check_"
                                                                                  set ref 249* 256 291 311*
ss_len                   73(18)        based           fixed bin(17,0)          level 2 in structure "user" packed packed unaligned
                                                                                  dcl 5-58 in procedure "uc_create_process_check_"
                                                                                  ref 295 296
substr                                                 builtin function         dcl 99 set ref 256 272* 272 278 296 309* 309
subsystem                       000516 automatic       char(64)                 packed unaligned dcl 236 set ref 256* 296* 309
sys_log_$general                000070 constant        entry                    external dcl 469 ref 474
uflags                   72            based           structure                level 2 in structure "user" dcl 5-58 in procedure
                                                                                  "uc_create_process_check_"
uflags                  431            based           structure                level 2 in structure "ute" dcl 12-78 in procedure
                                                                                  "uc_create_process_check_"
units                    66            based           fixed bin(17,0)          array level 3 dcl 7-32 ref 424
uprojp                  400            based           pointer                  level 2 dcl 12-78 ref 131
user                                   based           structure                level 1 dcl 5-58
user_abs_attributes                    based           structure                level 1 dcl 11-25
user_attributes                        based           structure                level 1 dcl 10-21
user_connection_info                   based           structure                level 1 dcl 4-65
user_weight             432            based           fixed bin(17,0)          level 2 dcl 12-78 set ref 422* 423 424* 427 427*
ut_header                              based           structure                level 1 dcl 13-16
ute                                    based           structure                level 1 dcl 12-78
utep                            000366 automatic       pointer                  initial dcl 12-76 set ref 105 117 12-76* 125* 131
                                                                                  132 152 153 162 165 165 179 180 190 209 209 213
                                                                                  225* 241 241 243 247 248 248 249 250 256 256 256
                                                                                  256 259 260 272 274 275 278 278 278 282 283 283
                                                                                  288 289 291 302 302 304 309 309 311 312 324 324
                                                                                  328 328 338 338 345 345 352 353 357 357 367 370
                                                                                  378 378 382 383 384 384 387 390 405 405 409 411
                                                                                  416 417 418 422 423 424 424 427 427 432 432 436
                                                                                  440 441 441 441 443 451*
uwt                      46            based           structure                array level 2 dcl 7-32
uwt_size                 45            based           fixed bin(17,0)          level 2 dcl 7-32 ref 423
vhomedir                100(12)        based           bit(1)                   level 3 packed packed unaligned dcl 12-78 ref 432
vinitproc               100(11)        based           bit(1)                   level 3 packed packed unaligned dcl 12-78 ref 260
                                                                                  289 378

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
ABS_ATTRIBUTE_NAMES                    internal static varying char(28)         initial array dcl 11-38
ABS_FLAG_NAMES                         internal static varying char(8)          initial array dcl 12-326
ACTIVE_VALUES                          internal static char(18)                 initial array dcl 3-86
ALT_USER_ATTRIBUTE_NAMES               internal static char(20)                 initial array packed unaligned dcl 10-77
ANSTBL_version_4                       internal static fixed bin(17,0)          initial dcl 1-51
AT_NORMAL                              internal static char(8)                  initial packed unaligned dcl 1-116
AT_SHUTDOWN                            internal static char(8)                  initial packed unaligned dcl 1-116
AT_SPECIAL                             internal static char(8)                  initial packed unaligned dcl 1-116
CONNECT_REQ                            internal static fixed bin(17,0)          initial dcl 4-457
CREATE_REQ                             internal static fixed bin(17,0)          initial dcl 4-457
DERIVE_MASK                            internal static bit(2)                   initial packed unaligned dcl 12-280
DESTROY_REQ                            internal static fixed bin(17,0)          initial dcl 4-457
DIAL_SERVER_FLAG_NAMES                 internal static varying char(12)         initial array dcl 12-332
DONT_MASK                              internal static bit(2)                   initial packed unaligned dcl 12-280
DO_MASK                                internal static bit(2)                   initial packed unaligned dcl 12-280
ENTERP_REQ                             internal static fixed bin(17,0)          initial dcl 4-457
ENTER_REQ                              internal static fixed bin(17,0)          initial dcl 4-457
LIST_REQ                               internal static fixed bin(17,0)          initial dcl 4-457
LOGIN_REQ                              internal static fixed bin(17,0)          initial dcl 4-457
LOGIN_RESULT_VALUES                    internal static varying char(24)         initial array dcl 12-338
LOGIN_SERVER_DIAL_RESPONSE_VERSION_1   internal static char(8)                  initial packed unaligned dcl 4-378
LOGIN_SERVER_LIST_RESPONSE_VERSION_1   internal static char(8)                  initial packed unaligned dcl 4-360
LOGIN_SERVER_NEW_PROC_RESPONSE_VERSION_1
                                       internal static char(8)                  initial packed unaligned dcl 4-420
LOGIN_SERVER_OPERATOR_REQUEST_VERSION_1
                                       internal static char(8)                  initial packed unaligned dcl 4-222
LOGIN_SERVER_OPERATOR_RESPONSE_VERSION_1
                                       internal static char(8)                  initial packed unaligned dcl 4-438
LOGIN_SERVER_PROCESS_RESPONSE_VERSION_1
                                       internal static char(8)                  initial packed unaligned dcl 4-341
LOGIN_SERVER_TERMINATION_RESPONSE_VERSION_1
                                       internal static char(8)                  initial packed unaligned dcl 4-407
LS_DIAL_REQUEST                        internal static fixed bin(17,0)          initial dcl 4-31
LS_DIAL_REQUEST_VERSION_1              internal static char(8)                  initial packed unaligned dcl 4-180
LS_DIAL_RESPONSE                       internal static fixed bin(17,0)          initial dcl 4-228
LS_DISCONNECT_REQUEST                  internal static fixed bin(17,0)          initial dcl 4-31
LS_DISCONNECT_REQUEST_VERSION_1        internal static char(8)                  initial packed unaligned dcl 4-193
LS_LIST_REQUEST                        internal static fixed bin(17,0)          initial dcl 4-31
LS_LIST_REQUEST_VERSION_1              internal static char(8)                  initial packed unaligned dcl 4-160
LS_LIST_RESPONSE                       internal static fixed bin(17,0)          initial dcl 4-228
LS_LOGOUT_REQUEST                      internal static fixed bin(17,0)          initial dcl 4-31
LS_LOGOUT_REQUEST_VERSION_1            internal static char(8)                  initial packed unaligned dcl 4-203
LS_NEW_PROC_RESPONSE                   internal static fixed bin(17,0)          initial dcl 4-228
LS_OPERATOR_REQUEST                    internal static fixed bin(17,0)          initial dcl 4-31
LS_OPERATOR_RESPONSE                   internal static fixed bin(17,0)          initial dcl 4-228
LS_PROCESS_REQUEST                     internal static fixed bin(17,0)          initial dcl 4-31
LS_PROCESS_REQUEST_VERSION_1           internal static char(8)                  initial packed unaligned dcl 4-150
LS_PROCESS_RESPONSE                    internal static fixed bin(17,0)          initial dcl 4-228
LS_REQUEST_HEADER_VERSION_1            internal static char(8)                  initial packed unaligned dcl 4-63
LS_REQUEST_TYPES                       internal static char(10)                 initial array packed unaligned dcl 4-40
LS_RESPONSE_TYPES                      internal static char(10)                 initial array packed unaligned dcl 4-238
LS_TERMINATION_RESPONSE                internal static fixed bin(17,0)          initial dcl 4-228
LS_UNKNOWN_RESPONSE                    internal static fixed bin(17,0)          initial dcl 4-228
LS_VALIDATE_REQUEST                    internal static fixed bin(17,0)          initial dcl 4-31
LS_VALIDATE_REQUEST_VERSION_1          internal static char(8)                  initial packed unaligned dcl 4-97
LS_VALIDATE_RESPONSE                   internal static fixed bin(17,0)          initial dcl 4-228
LS_VALIDATE_RESPONSE_VERSION_1         internal static char(8)                  initial packed unaligned dcl 4-297
MASK_CTL_NAMES                         internal static varying char(12)         initial array dcl 12-284
NEW_PROC_REQ                           internal static fixed bin(17,0)          initial dcl 4-457
NOW_DIALED                             internal static fixed bin(17,0)          initial dcl 3-76
NOW_DIALED_OUT                         internal static fixed bin(17,0)          initial dcl 3-76
NOW_DIALING                            internal static fixed bin(17,0)          initial dcl 3-76
NOW_FREE                               internal static fixed bin(17,0)          initial dcl 3-76
NOW_HAS_PROCESS                        internal static fixed bin(17,0)          initial dcl 3-76
NOW_HUNG_UP                            internal static fixed bin(17,0)          initial dcl 3-76
NOW_LISTENING                          internal static fixed bin(17,0)          initial dcl 3-76
PDT_entry_lth                          internal static fixed bin(17,0)          initial dcl 5-19
PDT_header_lth                         internal static fixed bin(17,0)          initial dcl 5-19
PDT_person_id_length                   internal static fixed bin(17,0)          initial dcl 5-19
PDT_project_name_length                internal static fixed bin(17,0)          initial dcl 5-19
PDT_version                            internal static fixed bin(17,0)          initial dcl 5-19
PREEMPT_BUMPED                         internal static fixed bin(17,0)          initial dcl 3-132
PREEMPT_BUMPED_NO_TERM                 internal static fixed bin(17,0)          initial dcl 3-132
PREEMPT_LOAD_CTL                       internal static fixed bin(17,0)          initial dcl 3-132
PREEMPT_TERMSGNL_RECEIVED              internal static fixed bin(17,0)          initial dcl 3-132
PREEMPT_TERM_SENT                      internal static fixed bin(17,0)          initial dcl 3-132
PREEMPT_UNBUMP                         internal static fixed bin(17,0)          initial dcl 3-132
PREEMPT_UNBUMP_IGNORE_ALARM            internal static fixed bin(17,0)          initial dcl 3-132
PREEMPT_VALUES                         internal static varying char(28)         initial array dcl 3-142
PROCESS_TYPE_NAMES                     internal static varying char(12)         initial array dcl 12-265
PT_ALARM                               internal static fixed bin(17,0)          initial dcl 3-106
PT_BUMP                                internal static fixed bin(17,0)          initial dcl 3-106
PT_DAEMON                              internal static fixed bin(17,0)          initial dcl 12-261
PT_DESTROY_REQUEST                     internal static fixed bin(17,0)          initial dcl 3-106
PT_DETACH                              internal static fixed bin(17,0)          initial dcl 3-106
PT_FPE                                 internal static fixed bin(17,0)          initial dcl 3-106
PT_HANGUP                              internal static fixed bin(17,0)          initial dcl 3-106
PT_LOGOUT                              internal static fixed bin(17,0)          initial dcl 3-106
PT_NEW_PROC_AUTH                       internal static fixed bin(17,0)          initial dcl 3-106
PT_NEW_PROC_REQUEST                    internal static fixed bin(17,0)          initial dcl 3-106
PT_OPERATOR_TERMINATE                  internal static fixed bin(17,0)          initial dcl 3-106
PT_SHUTDOWN                            internal static fixed bin(17,0)          initial dcl 3-106
PT_UNBUMP                              internal static fixed bin(17,0)          initial dcl 3-106
PW_FLAG_NAMES                          internal static varying char(12)         initial array dcl 12-290
SAT_entry_lth                          internal static fixed bin(17,0)          initial dcl 7-24
SAT_header_lth                         internal static fixed bin(17,0)          initial dcl 7-24
SAT_project_name_length                internal static fixed bin(17,0)          initial dcl 7-24
SAT_version                            internal static fixed bin(17,0)          initial dcl 7-24
SL_INFO_arg_given_in_structure         internal static fixed bin(17,0)          initial dcl 9-69
SL_INFO_arg_not_given                  internal static fixed bin(17,0)          initial dcl 9-69
SL_INFO_as_mode                        internal static fixed bin(17,0)          initial dcl 9-65
SL_INFO_command_mode                   internal static fixed bin(17,0)          initial dcl 9-65
SL_INFO_version_1                      internal static char(8)                  initial packed unaligned dcl 9-62
SL_LOG                                 internal static fixed bin(17,0)          initial dcl 9-14
SL_LOG_BEEP                            internal static fixed bin(17,0)          initial dcl 9-14
SL_LOG_CRASH                           internal static fixed bin(17,0)          initial dcl 9-14
SL_LOG_SILENT                          internal static fixed bin(17,0)          initial dcl 9-14
SL_TYPE                                internal static fixed bin(17,0)          initial dcl 9-14
SL_TYPE_BEEP                           internal static fixed bin(17,0)          initial dcl 9-14
SL_TYPE_CRASH                          internal static fixed bin(17,0)          initial dcl 9-14
STATE_VALUES                           internal static char(15)                 initial array dcl 3-70
TABLE_NAMES                            internal static char(20)                 initial array packed unaligned dcl 12-271
TAG_ABSENTEE                           internal static char(1)                  initial packed unaligned dcl 3-93
TAG_DAEMON                             internal static char(1)                  initial packed unaligned dcl 3-93
TAG_INTERACTIVE                        internal static char(1)                  initial packed unaligned dcl 3-93
TAG_PROXY                              internal static char(1)                  initial packed unaligned dcl 3-93
TAG_UFT                                internal static char(1)                  initial packed unaligned dcl 3-93
TRA_VEC_VALUES                         internal static char(32)                 initial array dcl 3-54
TTY_DIALED                             internal static fixed bin(17,0)          initial dcl 3-64
TTY_HUNG                               internal static fixed bin(17,0)          initial dcl 3-64
TTY_KNOWN                              internal static fixed bin(17,0)          initial dcl 3-64
TTY_MASKED                             internal static fixed bin(17,0)          initial dcl 3-64
UFLAG_NAMES                            internal static varying char(24)         initial array dcl 12-303
USER_ATTRIBUTES_always_allowed         internal static bit(36)                  initial dcl 10-100
USER_ATTRIBUTES_default_in_pdt         internal static bit(36)                  initial dcl 10-104
USER_ATTRIBUTES_settable_by_user       internal static bit(36)                  initial dcl 10-108
USER_ATTRIBUTE_NAMES                   internal static char(20)                 initial array packed unaligned dcl 10-50
UTE_SIZE                               internal static fixed bin(17,0)          initial dcl 1-120
UTE_version_4                          internal static fixed bin(17,0)          initial dcl 12-74
WAIT_ANSWERBACK                        internal static fixed bin(17,0)          initial dcl 3-25
WAIT_BEFORE_HANGUP                     internal static fixed bin(17,0)          initial dcl 3-25
WAIT_CONNECT_REQUEST                   internal static fixed bin(17,0)          initial dcl 3-25
WAIT_DELETE_CHANNEL                    internal static fixed bin(17,0)          initial dcl 3-25
WAIT_DESTROY_REQUEST                   internal static fixed bin(17,0)          initial dcl 3-25
WAIT_DETACH                            internal static fixed bin(17,0)          initial dcl 3-25
WAIT_DIALUP                            internal static fixed bin(17,0)          initial dcl 3-25
WAIT_DIAL_OUT                          internal static fixed bin(17,0)          initial dcl 3-25
WAIT_DIAL_RELEASE                      internal static fixed bin(17,0)          initial dcl 3-25
WAIT_DISCARD_WAKEUPS                   internal static fixed bin(17,0)          initial dcl 3-25
WAIT_FIN_PRIV_ATTACH                   internal static fixed bin(17,0)          initial dcl 3-25
WAIT_FIN_TANDD_ATTACH                  internal static fixed bin(17,0)          initial dcl 3-25
WAIT_GREETING_MSG                      internal static fixed bin(17,0)          initial dcl 3-25
WAIT_HANGUP                            internal static fixed bin(17,0)          initial dcl 3-25
WAIT_LOGIN_ARGS                        internal static fixed bin(17,0)          initial dcl 3-25
WAIT_LOGIN_LINE                        internal static fixed bin(17,0)          initial dcl 3-25
WAIT_LOGOUT                            internal static fixed bin(17,0)          initial dcl 3-25
WAIT_LOGOUT_HOLD                       internal static fixed bin(17,0)          initial dcl 3-25
WAIT_LOGOUT_SIG                        internal static fixed bin(17,0)          initial dcl 3-25
WAIT_NEW_PASSWORD                      internal static fixed bin(17,0)          initial dcl 3-25
WAIT_NEW_PROC                          internal static fixed bin(17,0)          initial dcl 3-25
WAIT_NEW_PROC_REQUEST                  internal static fixed bin(17,0)          initial dcl 3-25
WAIT_OLD_PASSWORD                      internal static fixed bin(17,0)          initial dcl 3-25
WAIT_PASSWORD                          internal static fixed bin(17,0)          initial dcl 3-25
WAIT_REMOVE                            internal static fixed bin(17,0)          initial dcl 3-25
WAIT_SLAVE_REQUEST                     internal static fixed bin(17,0)          initial dcl 3-25
WAIT_TANDD_HANGUP                      internal static fixed bin(17,0)          initial dcl 3-25
as_data_$BS                            external static char(1)                  dcl 2-21
as_data_$CR                            external static char(1)                  dcl 2-22
as_data_$abs_dim                       external static char(32)                 packed unaligned dcl 2-23
as_data_$acct_update_priority          external static fixed bin(17,0)          dcl 2-24
as_data_$acsdir                        external static char(168)                packed unaligned dcl 2-25
as_data_$as_procid                     external static bit(36)                  dcl 2-27
as_data_$as_ring                       external static fixed bin(3,0)           dcl 2-28
as_data_$as_tty                        automatic       char(6)                  packed unaligned dcl 2-29
as_data_$asmtp                         external static pointer                  dcl 2-30
as_data_$autp                          external static pointer                  dcl 2-31
as_data_$buzzardp                      external static pointer                  dcl 2-32
as_data_$cdtp                          external static pointer                  dcl 2-33
as_data_$debug_flag                    external static bit(1)                   dcl 2-84
as_data_$devtabp                       external static pointer                  dcl 2-35
as_data_$dutp                          external static pointer                  dcl 2-37
as_data_$g115_dim                      external static char(32)                 packed unaligned dcl 2-38
as_data_$lct_initialized               external static bit(1)                   dcl 2-39
as_data_$lct_size                      external static fixed bin(17,0)          dcl 2-40
as_data_$login_args                    external static structure                level 1 dcl 2-62
as_data_$login_words                   external static fixed bin(17,0)          dcl 2-77
as_data_$ls_message_buffer_cur_lth     external static fixed bin(18,0)          dcl 2-86
as_data_$ls_message_buffer_max_lth     external static fixed bin(18,0)          dcl 2-87
as_data_$ls_message_buffer_ptr         external static pointer                  dcl 2-88
as_data_$ls_request_server_info_ptr    external static pointer                  dcl 2-85
as_data_$mgtp                          external static pointer                  dcl 2-42
as_data_$mrd_dim                       external static char(32)                 packed unaligned dcl 2-43
as_data_$ntty_dim                      external static char(32)                 packed unaligned dcl 2-44
as_data_$pdtdir                        external static char(168)                packed unaligned dcl 2-45
as_data_$pit_ptr                       external static pointer                  dcl 2-46
as_data_$rcpdir                        external static char(168)                packed unaligned dcl 2-47
as_data_$request_priority              external static fixed bin(17,0)          dcl 2-48
as_data_$rs_ptrs                       external static pointer                  array dcl 2-49
as_data_$rtdtp                         external static pointer                  dcl 2-50
as_data_$sat_htp                       external static pointer                  dcl 2-51
as_data_$signal_types                  external static structure                level 1 dcl 2-67
as_data_$suffix                        external static char(2)                  array packed unaligned dcl 2-53
as_data_$sysdir                        external static char(168)                packed unaligned dcl 2-54
as_data_$system_signal_types           external static structure                level 1 dcl 2-72
as_data_$teens_suffix                  external static char(2)                  array packed unaligned dcl 2-55
as_data_$terminet_tabs_string          external static varying char(144)        dcl 2-56
as_data_$update_priority               external static fixed bin(17,0)          dcl 2-58
as_data_$version                       external static char(8)                  packed unaligned dcl 2-59
as_data_$whoptr                        external static pointer                  dcl 2-60
as_data_login_words                    based           structure                level 1 dcl 2-77
login_server_dial_request              based           structure                level 1 dcl 4-170
login_server_dial_response             based           structure                level 1 dcl 4-366
login_server_disconnect_request        based           structure                level 1 dcl 4-188
login_server_list_request              based           structure                level 1 dcl 4-156
login_server_list_response             based           structure                level 1 dcl 4-347
login_server_list_response_n_processes automatic       fixed bin(17,0)          dcl 4-358
login_server_logout_request            based           structure                level 1 dcl 4-199
login_server_new_proc_response         based           structure                level 1 dcl 4-414
login_server_operator_request          based           structure                level 1 dcl 4-214
login_server_operator_response         based           structure                level 1 dcl 4-426
login_server_process_response          based           structure                level 1 dcl 4-303
login_server_termination_response      based           structure                level 1 dcl 4-385
login_server_validate_request          based           structure                level 1 dcl 4-76
login_server_validate_response         based           structure                level 1 dcl 4-267
ls_process_request_arg_string_length   automatic       fixed bin(21,0)          dcl 4-148
ls_process_request_n_args              automatic       fixed bin(17,0)          dcl 4-147
ls_process_response_accounting_message_length
                                       automatic       fixed bin(17,0)          dcl 4-339
ls_reply_message                       based           structure                level 1 dcl 4-445
ls_reply_message_ptr                   automatic       pointer                  dcl 4-443
ls_response_ptr                        automatic       pointer                  dcl 4-254
pdt                                    based           structure                level 1 dcl 5-27
sl_info_code_msg                       internal static structure                level 1 dcl 9-187
sl_info_sev_code_label_msg             internal static structure                level 1 dcl 9-161
sl_info_sev_code_msg                   internal static structure                level 1 dcl 9-82
sl_info_sev_coded_msg                  internal static structure                level 1 dcl 9-134
sl_info_sev_msg                        internal static structure                level 1 dcl 9-108

NAMES DECLARED BY EXPLICIT CONTEXT.
Abort_Create                    000504 constant        entry                    internal dcl 138 ref 105 162 165 182 185 196 213 226
                                                                                  243 260 289 304 306 345 367 378 432 452
Check_For_Multiple_Logins       000727 constant        entry                    internal dcl 206 ref 109
Check_Process_Limits            000511 constant        entry                    internal dcl 147 ref 108
Check_With_Accounting           000757 constant        entry                    internal dcl 219 ref 110
Check_With_Load_Control         002053 constant        entry                    internal dcl 448 ref 115
Log                             002073 constant        entry                    internal dcl 465 ref 324 338 357 405
RETURN                          000446 constant        label                    dcl 118 ref 144
Setup                           000452 constant        entry                    internal dcl 122 ref 104
Setup_Initial_Procedure_And_Subsystem
                                001002 constant        entry                    internal dcl 231 ref 111
Setup_Login_Ring                001260 constant        entry                    internal dcl 319 ref 112
Setup_Miscellaneous_Variables   001645 constant        entry                    internal dcl 397 ref 114
Setup_Outer_Module              001563 constant        entry                    internal dcl 375 ref 113
uc_create_process_check_        000407 constant        entry                    external dcl 52

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      2464        2556    2141        2474
Length      3266    2141        72         473     322           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
uc_create_process_check_            534 external procedure  is an external procedure.  
Setup                                   internal procedure  shares stack frame of external procedure uc_create_process_check_.  
Abort_Create                            internal procedure  shares stack frame of external procedure uc_create_process_check_.  
Check_Process_Limits                    internal procedure  shares stack frame of external procedure uc_create_process_check_.  
Check_For_Multiple_Logins               internal procedure  shares stack frame of external procedure uc_create_process_check_.  
Check_With_Accounting                   internal procedure  shares stack frame of external procedure uc_create_process_check_.  
Setup_Initial_Procedure_And_Subsystem
                                        internal procedure  shares stack frame of external procedure uc_create_process_check_.  
Setup_Login_Ring                        internal procedure  shares stack frame of external procedure uc_create_process_check_.  
Setup_Outer_Module                      internal procedure  shares stack frame of external procedure uc_create_process_check_.  
Setup_Miscellaneous_Variables           internal procedure  shares stack frame of external procedure uc_create_process_check_.  
Check_With_Load_Control                 internal procedure  shares stack frame of external procedure uc_create_process_check_.  
Log                                  70 internal procedure  is declared options(variable).  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
uc_create_process_check_ 000100 code                        uc_create_process_check_
                         000102 pdtep                       uc_create_process_check_
                         000104 satp                        uc_create_process_check_
                         000106 satep                       uc_create_process_check_
                         000110 ansp                        uc_create_process_check_
                         000112 ls_request_ptr              uc_create_process_check_
                         000114 pdtp                        uc_create_process_check_
                         000116 sl_info                     uc_create_process_check_
                         000366 utep                        uc_create_process_check_
                         000412 limit                       Check_Process_Limits
                         000430 short_info                  Check_With_Accounting
                         000432 long_info                   Check_With_Accounting
                         000514 ip_len                      Setup_Initial_Procedure_And_Subsystem
                         000515 ss_len                      Setup_Initial_Procedure_And_Subsystem
                         000516 subsystem                   Setup_Initial_Procedure_And_Subsystem
                         000544 ring                        Setup_Login_Ring
                         000562 i                           Setup_Miscellaneous_Variables

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        call_int_this_desc  return_mac          ext_entry           int_entry           clock_mac

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
act_ctl_$check_for_process_creation                         cu_$arg_list_ptr
load_ctl_$check_for_process_creation                        sys_log_$general

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
as_data_$ansp                 as_data_$default_weight       as_data_$dft_user_ring        as_data_$max_user_ring
as_data_$satp                 as_data_$tty_dim              as_error_table_$already_logged_in
as_error_table_$illegal_hd_arg                              as_error_table_$illegal_ip_arg
as_error_table_$illegal_om_arg                              as_error_table_$illegal_ss_arg
as_error_table_$long_ip_arg   as_error_table_$long_ss_arg   as_error_table_$no_primary    as_error_table_$ring_too_high
as_error_table_$ring_too_low  as_error_table_$user_fg_cpu_limit                           as_error_table_$user_max_bg
as_error_table_$user_max_fg   error_table_$bad_arg          error_table_$out_of_sequence




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     52 000403    1   53 000414       485 000416   12   76 000417       104 000420       105 000421       108 000433
    109 000434       110 000435       111 000436       112 000437       113 000440       114 000441       115 000442
    117 000443       118 000446       120 000451       122 000452       125 000453       126 000457       127 000462
    129 000463       130 000467       131 000472       132 000475       134 000500       135 000503       138 000504
    143 000506       144 000510       147 000511       152 000512       153 000515       156 000520       157 000524
    159 000532       162 000543       165 000556       172 000574       173 000601       175 000610       177 000622
    179 000630       180 000634       182 000642       184 000651       185 000652       188 000661       190 000662
    191 000665       192 000671       194 000677       196 000710       201 000726       206 000727       209 000730
    212 000740       213 000744       216 000756       219 000757       225 000760       226 000775       228 001001
    231 001002       241 001003       243 001010       247 001022       248 001025       249 001040       250 001042
    252 001044       256 001045       259 001055       260 001060       262 001072       264 001073       267 001103
    268 001113       272 001117       274 001122       275 001124       278 001130       282 001143       283 001145
    288 001150       289 001153       291 001165       292 001172       293 001173       295 001177       296 001203
    298 001210       299 001211       301 001213       302 001215       304 001223       306 001236       307 001245
    309 001246       311 001253       312 001255       316 001257       319 001260       324 001261       328 001326
    330 001334       332 001340       333 001356       336 001363       337 001367       338 001371       341 001424
    345 001427       349 001444       352 001452       353 001465       357 001467       361 001524       363 001534
    365 001535       367 001546       370 001557       372 001562       375 001563       378 001564       382 001603
    383 001610       384 001614       387 001626       390 001637       394 001644       397 001645       404 001646
    405 001653       409 001716       410 001733       411 001734       416 001740       417 001743       418 001745
    422 001747       423 001751       424 001765       426 002001       427 002003       432 002012       435 002030
    436 002031       440 002035       441 002041       443 002050       445 002052       448 002053       451 002054
    452 002065       454 002071       465 002072       471 002100       472 002104       473 002111       474 002117
    476 002131


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
