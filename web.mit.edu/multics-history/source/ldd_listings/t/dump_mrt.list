	COMPILATION LISTING OF SEGMENT dump_mrt
	Compiled by: Multics PL/I Compiler, Release 28d, of October 4, 1983
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 02/06/85  1446.7 mst Wed
	    Options: optimize list

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 dump_mrt: proc;
       12 
       13 /* DUMP_MRT - dump message routing table
       14*
       15*   THVV */
       16 
       17 dcl (path, dn) char (168) aligned,
       18      en char (32) aligned,
       19      srch (10) char (32) aligned,
       20      line char (120) aligned,
       21      datstr char (16) aligned,
       22      vstr char (64) aligned,
       23      vconst char (33) aligned,
       24     (i, j, k, l, m, n) fixed bin,
       25     (time, fb71) fixed bin (71),
       26      ap ptr,
       27      al fixed bin,
       28      bchr char (al) unaligned based (ap),
       29      ec fixed bin (35),
       30     (p, q) ptr;
       31 
       32 dcl (addr, null, substr, index, unspec, length, bit, fixed, divide, mod, abs) builtin;
       33 
       34 dcl  clock_ entry () returns (fixed bin (71)),
       35      cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35)),
       36      expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin (35)),
       37      ioa_ entry options (variable),
       38      date_time_ entry (fixed bin (71), char (*) aligned),
       39      com_err_ entry options (variable);
       40 
       41 dcl  hcs_$initiate entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (1),
       42      fixed bin (2), ptr, fixed bin (35)),
       43      hcs_$terminate_noname entry (ptr, fixed bin (35));
       44 
  1     1 /* Begin include file  mess_route_table.incl.pl1   */
  1     2 
  1     3 /*
  1     4*Message Routing Table 
  1     5*
  1     6*This table will be used by the protocol & router entries of the 
  1     7*message  coordinator  to match source (e.g. I/O Daemon, answering
  1     8*service) -- stream (e.g. "user_i/o","error_output")  combinations 
  1     9*with virtual consoles to which messages are to be directed.  
  1    10**/
  1    11 
  1    12 dcl 1 MRT aligned based(mrtp),		/* header 4 words */
  1    13 	2 lock bit(36),			/*     0 */
  1    14 	2 no_of_sources fixed bin,
  1    15 	2 flags         bit(36),
  1    16 	2 pad1	      fixed bin,
  1    17 	2 star_entry aligned,		/*     4 * */
  1    18 	     3 source	char(32),
  1    19 	     3 hismess      ptr,
  1    20 	     3 no_of_streams fixed bin,
  1    21 	     3 flags,
  1    22 		4 init    bit(1) unal,
  1    23 		4 valid   bit(1) unal,
  1    24 		4 unused  bit(34) unal,
  1    25 	     3 stream like stream aligned,	/*    20 * str */
  1    26 	2 source(16) aligned,	/* source entry head 12 dec 14 oct words */
  1    27 	     3 source	char(32),		/*   220-1,2240-2,4260-3 */
  1    28 	     3 hismess      ptr,
  1    29 	     3 no_of_streams fixed bin,
  1    30 	     3 flags,
  1    31 		4 init    bit(1) unal,
  1    32 		4 valid   bit(1) unal,
  1    33 		4 unused  bit(34) unal,
  1    34 	     3 stream(8) like stream aligned;
  1    35 
  1    36 
  1    37 dcl 1 stream aligned based(streamp),	/* 128dec 200 oct words */
  1    38 	2 gumbo(28)	fixed bin,	/* This stuff is not used */
  1    39 	2 ourmess		ptr,
  1    40 	2 hismess		ptr,
  1    41 	2 source		char(32),
  1    42 	2 stream		char(32),
  1    43 	2 source_index	fixed bin,	/* Our own address */
  1    44 	2 stream_index	fixed bin,
  1    45 	2 flags,				
  1    46 	     3 valid	bit(1) unal,
  1    47 	     3 read	bit(1) unal,
  1    48 	     3 write	bit(1) unal,
  1    49 	     3 active	bit(1) unal,
  1    50 	     3 more	bit(1) unal,
  1    51 	     3 unused	bit(23) unal,
  1    52 	     3 alarm	bit (8) unal,
  1    53 	2 prev_trans,
  1    54 	     3 first_block	fixed bin,
  1    55 	     3 end_block	fixed bin,
  1    56 	     3 current_block fixed bin,
  1    57 	     3 offset	fixed bin,
  1    58 
  1    59 	2 no_of_vcons	fixed bin,
  1    60 	2 vcons(8)	char(32),
  1    61 	2 vcons_index(8)	fixed bin;
  1    62 /*
  1    63*MRT
  1    64*lock
  1    65*no_of_sources	     Number of source rows in this matrix.
  1    66*flags
  1    67*star_entry	     Contains default routing.
  1    68*source		     The source rows
  1    69*source		     Name of this source.
  1    70*no_of_streams	     Number of stream columns that have
  1    71*		     entries in this row.
  1    72*flags
  1    73*init		     "1"b -- This entry is for a source which
  1    74*		     is currently attached & sending messages.
  1    75*valid		     "1"b -- This entry contains correct information.
  1    76*stream		     The virtual consoles for this element
  1    77*		     of the matrix.
  1    78*		     The Source Data Block, which
  1    79*		     corresponds to the Stream Data
  1    80*		     Block on the mrd side has been included
  1    81*		     in the MRT.
  1    82*gumbo		     Stream DB has stuff here we dont need.
  1    83*ourmess		     Pointer to message seg for this
  1    84*		     function (in this case mc_ ).
  1    85*hismess		     Pointer to message seg for other
  1    86*		     guy (in this case, the source).
  1    87*source		     Name of this source
  1    88*stream		     Name of this stream.
  1    89*source_index	     in MRT
  1    90*stream_index
  1    91*flags
  1    92*valid		     "1"b -- This entry contains correct information.
  1    93*active		     "1"b -- This entry is for a stream which
  1    94*		     is currently attached & sending messages.
  1    95*alarm		     "1"b -- These messages are "alarm-class" messages.
  1    96*prev_trans	     Information useful to mrd_util_ if more than
  1    97*		     one read call is made.
  1    98*first_block	     of the message
  1    99*end_block		     of the message
  1   100*current_block	     out of which we are taking text
  1   101*offset		     of current character in current_block
  1   102*
  1   103*no_of_vcons
  1   104*vcons		     Virtual consoles to which messages should
  1   105*		     go when originating from this source
  1   106*		     over this stream.
  1   107*vcons-index	     Index in the virtual console table
  1   108*ev_chn		     For waking up function waiting for
  1   109*		     input.
  1   110*messp		     Pointer to message segment if this is
  1   111*		     input stream.
  1   112**/
  1   113 
  1   114 /* End include file  mess_route_table.incl.pl1  */
       45 
       46 
       47 dcl  mrtp ptr;
       48 dcl  streamp ptr;
       49 
       50 /* ------------------------------------------------------- */
       51 
       52 	m = 0;
       53 	l = 0;
       54 	k = 2;
       55 	path = ">system_control_1>MRT";
       56 	call cu_$arg_ptr (1, ap, al, ec);
       57 	if ec ^= 0 then go to mrt1;
       58 	path = bchr;
       59 arglp:	call cu_$arg_ptr (k, ap, al, ec);		/* See if optional args */
       60 	if ec ^= 0 then go to mrt1;
       61 	m = m + 1;				/* count selectors */
       62 	if m > 10 then go to mrt1;
       63 	if bchr = "*" then l = m;
       64 	srch (m) = bchr;
       65 	k = k + 1;
       66 	go to arglp;
       67 
       68 mrt1:	i = index (path, " ");
       69 	call expand_path_ (addr (path), i, addr (dn), addr (en), ec);
       70 	if ec ^= 0 then do;
       71 er:	     call com_err_ (ec, "dump_mrt", "^a", path);
       72 	     return;
       73 	end;
       74 	call hcs_$initiate (dn, en, "", 0, 1, mrtp, ec);
       75 	if mrtp = null then go to er;
       76 
       77 	if m = 0 then do;				/* Header only if no selected args. */
       78 	     call date_time_ ((clock_ ()), datstr);
       79 	     call ioa_ ("^/Message Routing Table - ^a^/", datstr);
       80 
       81 	     call ioa_ ("lock:^15x^w", MRT.lock);
       82 	     call ioa_ ("no_of_sources:^6x^d", MRT.no_of_sources);
       83 	     call ioa_ ("flags:^14x^w", MRT.flags);
       84 	end;
       85 
       86 	if l ^= 0 then do;				/* want to list star entry */
       87 	     srch (m) = "";
       88 	     go to pss;
       89 	end;
       90 	if m = 0 then do;
       91 pss:	     call ioa_ ("^/SOURCE: ^a^/", MRT.star_entry.source);
       92 	     call ioa_ ("no_of_streams:^6x^d", MRT.star_entry.no_of_streams);
       93 	     call pstream (addr (MRT.star_entry.stream));
       94 	end;
       95 
       96 	do i = 1 to MRT.no_of_sources;
       97 	     if ^MRT.source (i).flags.valid then go to skip;
       98 	     if m = 0 then go to pss1;
       99 	     do n = 1 to m;
      100 		if MRT.source (i).source = srch (n) then do;
      101 		     srch (n) = "";
      102 		     go to pss1;
      103 		end;
      104 	     end;
      105 	     go to skip;
      106 
      107 pss1:	     call ioa_ ("^/SOURCE: ^a^/", MRT.source (i).source);
      108 	     call ioa_ ("hismess:^12x^p", MRT.source (i).hismess);
      109 	     call ioa_ ("no_of_streams:^6x^d", MRT.source (i).no_of_streams);
      110 	     vstr = "valid";
      111 	     if MRT.source (i).flags.init then vstr = vstr || ", init";
      112 	     call ioa_ ("flags:^14x^a", vstr);
      113 
      114 	     do j = 1 to MRT.source (i).no_of_streams;
      115 
      116 		if MRT.source (i).stream (j).flags.valid then
      117 		call pstream (addr (MRT.source (i).stream (j)));
      118 
      119 	     end;
      120 
      121 skip:	end;
      122 
      123 	if m = 0 then call ioa_ ("^/End^/");
      124 	else do i = 1 to m;
      125 	     if srch (i) ^= "" then call ioa_ ("source ""^a"" not in MRT", srch (i));
      126 	end;
      127 	call hcs_$terminate_noname (mrtp, ec);
      128 	return;
      129 
      130 pstream:	proc (sp);
      131 
      132 dcl  sp ptr;
      133 
      134 dcl  k fixed bin,
      135      vstr char (64) varying,
      136      sourcet char (32) aligned;
      137 
      138 	     streamp = sp;
      139 	     call ioa_ ("^/^5xSTREAM: ^a^/", stream.stream);
      140 	     if substr (stream.source, 1, 1) < " " then sourcet = "*";
      141 	     else sourcet = stream.source;
      142 	     call ioa_ ("^5xsource:^8x^a", sourcet);
      143 	     vstr = "valid";
      144 	     if stream.flags.read then vstr = vstr || ", read";
      145 	     if stream.flags.write then vstr = vstr || ", write";
      146 	     if stream.flags.active then vstr = vstr || ", active";
      147 	     call ioa_ ("^5xflags:^9x^a", vstr);
      148 	     call ioa_ ("^5xourmess:^7x^p", stream.ourmess);
      149 	     call ioa_ ("^5xhismess:^7x^p", stream.hismess);
      150 	     call ioa_ ("^5xsource_index:^2x^d", stream.source_index);
      151 	     call ioa_ ("^5xstream_index:^2x^d", stream.stream_index);
      152 	     call ioa_ ("^5xno_of_vcons:^3x^d^/", stream.no_of_vcons);
      153 	     do k = 1 to stream.no_of_vcons;
      154 
      155 		if substr (stream.flags.alarm, k, 1) then vconst = "*" || stream.vcons (k);
      156 		else vconst = stream.vcons (k);	/* Star means alarm flag will be in message */
      157 		call ioa_ ("^10xvcons ^d:  ^3d ^a", k, stream.vcons_index (k), vconst);
      158 
      159 	     end;
      160 
      161 	end pstream;
      162 
      163      end dump_mrt;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    02/06/85  1403.7  dump_mrt.pl1                      >spec>on>41-7>dump_mrt.pl1
45           1    05/06/74  1743.1  mess_route_table.incl.pl1         >ldd>include>mess_route_table.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
MRT                                    based           structure                level 1 dcl 1-12
active                   62(03)        based           bit(1)                   level 3 packed unaligned dcl 1-37 ref 146
addr                                                   builtin function         dcl 32 ref 69 69 69 69 69 69 93 93 116 116
al                              000422 automatic       fixed bin(17,0)          dcl 17 set ref 56* 58 59* 63 64
alarm                    62(28)        based           bit(8)                   level 3 packed unaligned dcl 1-37 ref 155
ap                              000420 automatic       pointer                  dcl 17 set ref 56* 58 59* 63 64
bchr                                   based           char                     unaligned dcl 17 ref 58 63 64
clock_                          000010 constant        entry                    external dcl 34 ref 78
com_err_                        000022 constant        entry                    external dcl 34 ref 71
cu_$arg_ptr                     000012 constant        entry                    external dcl 34 ref 56 59
date_time_                      000020 constant        entry                    external dcl 34 ref 78
datstr                          000354 automatic       char(16)                 dcl 17 set ref 78* 79*
dn                              000152 automatic       char(168)                dcl 17 set ref 69 69 74*
ec                              000423 automatic       fixed bin(35,0)          dcl 17 set ref 56* 57 59* 60 69* 70 71* 74* 127*
en                              000224 automatic       char(32)                 dcl 17 set ref 69 69 74*
expand_path_                    000014 constant        entry                    external dcl 34 ref 69
flags                     2            based           bit(36)                  level 2 in structure "MRT" dcl 1-12 in procedure
                                                                                  "dump_mrt" set ref 83*
flags                   316            based           structure                array level 4 in structure "MRT" dcl 1-12
                                                                                  in procedure "dump_mrt"
flags                   233            based           structure                array level 3 in structure "MRT" dcl 1-12
                                                                                  in procedure "dump_mrt"
flags                    62            based           structure                level 2 in structure "stream" dcl 1-37 in procedure
                                                                                  "dump_mrt"
hcs_$initiate                   000024 constant        entry                    external dcl 41 ref 74
hcs_$terminate_noname           000026 constant        entry                    external dcl 41 ref 127
hismess                 230            based           pointer                  array level 3 in structure "MRT" dcl 1-12
                                                                                  in procedure "dump_mrt" set ref 108*
hismess                  36            based           pointer                  level 2 in structure "stream" dcl 1-37 in procedure
                                                                                  "dump_mrt" set ref 149*
i                               000411 automatic       fixed bin(17,0)          dcl 17 set ref 68* 69* 96* 97 100 107 108 109 111
                                                                                  114 116 116 116* 124* 125 125*
index                                                  builtin function         dcl 32 ref 68
init                    233            based           bit(1)                   array level 4 packed unaligned dcl 1-12 ref 111
ioa_                            000016 constant        entry                    external dcl 34 ref 79 81 82 83 91 92 107 108 109
                                                                                  112 123 125 139 142 147 148 149 150 151 152 157
j                               000412 automatic       fixed bin(17,0)          dcl 17 set ref 114* 116 116 116*
k                               000413 automatic       fixed bin(17,0)          dcl 17 in procedure "dump_mrt" set ref 54* 59* 65*
                                                                                  65
k                               000442 automatic       fixed bin(17,0)          dcl 134 in procedure "pstream" set ref 153* 155 155
                                                                                  156 157* 157*
l                               000414 automatic       fixed bin(17,0)          dcl 17 set ref 53* 63* 86
lock                                   based           bit(36)                  level 2 dcl 1-12 set ref 81*
m                               000415 automatic       fixed bin(17,0)          dcl 17 set ref 52* 61* 61 62 63 64 77 87 90 98 99
                                                                                  123 124
mrtp                            000424 automatic       pointer                  dcl 47 set ref 74* 75 81 82 83 91 92 93 93 96 97 100
                                                                                  107 108 109 111 114 116 116 116 127*
n                               000416 automatic       fixed bin(17,0)          dcl 17 set ref 99* 100 101*
no_of_sources             1            based           fixed bin(17,0)          level 2 dcl 1-12 set ref 82* 96
no_of_streams            16            based           fixed bin(17,0)          level 3 in structure "MRT" dcl 1-12 in procedure
                                                                                  "dump_mrt" set ref 92*
no_of_streams           232            based           fixed bin(17,0)          array level 3 in structure "MRT" dcl 1-12
                                                                                  in procedure "dump_mrt" set ref 109* 114
no_of_vcons              67            based           fixed bin(17,0)          level 2 dcl 1-37 set ref 152* 153
null                                                   builtin function         dcl 32 ref 75
ourmess                  34            based           pointer                  level 2 dcl 1-37 set ref 148*
path                            000100 automatic       char(168)                dcl 17 set ref 55* 58* 68 69 69 71*
read                     62(01)        based           bit(1)                   level 3 packed unaligned dcl 1-37 ref 144
source                   40            based           char(32)                 level 2 in structure "stream" dcl 1-37 in procedure
                                                                                  "dump_mrt" ref 140 141
source                    4            based           char(32)                 level 3 in structure "MRT" dcl 1-12 in procedure
                                                                                  "dump_mrt" set ref 91*
source                  220            based           structure                array level 2 in structure "MRT" dcl 1-12
                                                                                  in procedure "dump_mrt"
source                  220            based           char(32)                 array level 3 in structure "MRT" dcl 1-12
                                                                                  in procedure "dump_mrt" set ref 100 107*
source_index             60            based           fixed bin(17,0)          level 2 dcl 1-37 set ref 150*
sourcet                         000464 automatic       char(32)                 dcl 134 set ref 140* 141* 142*
sp                                     parameter       pointer                  dcl 132 ref 130 138
srch                            000234 automatic       char(32)                 array dcl 17 set ref 64* 87* 100 101* 125 125*
star_entry                4            based           structure                level 2 dcl 1-12
stream                   50            based           char(32)                 level 2 in structure "stream" dcl 1-37 in procedure
                                                                                  "dump_mrt" set ref 139*
stream                   20            based           structure                level 3 in structure "MRT" dcl 1-12 in procedure
                                                                                  "dump_mrt" set ref 93 93
stream                  234            based           structure                array level 3 in structure "MRT" dcl 1-12
                                                                                  in procedure "dump_mrt" set ref 116 116
stream                                 based           structure                level 1 dcl 1-37 in procedure "dump_mrt"
stream_index             61            based           fixed bin(17,0)          level 2 dcl 1-37 set ref 151*
streamp                         000426 automatic       pointer                  dcl 48 set ref 138* 139 140 141 144 145 146 148 149
                                                                                  150 151 152 153 155 155 156 157
substr                                                 builtin function         dcl 32 ref 140 155
valid                   316            based           bit(1)                   array level 5 in structure "MRT" packed unaligned
                                                                                  dcl 1-12 in procedure "dump_mrt" set ref 116
valid                   233(01)        based           bit(1)                   array level 4 in structure "MRT" packed unaligned
                                                                                  dcl 1-12 in procedure "dump_mrt" ref 97
vcons                    70            based           char(32)                 array level 2 dcl 1-37 ref 155 156
vcons_index             170            based           fixed bin(17,0)          array level 2 dcl 1-37 set ref 157*
vconst                          000400 automatic       char(33)                 dcl 17 set ref 155* 156* 157*
vstr                            000360 automatic       char(64)                 dcl 17 in procedure "dump_mrt" set ref 110* 111* 111
                                                                                  112*
vstr                            000443 automatic       varying char(64)         dcl 134 in procedure "pstream" set ref 143* 144* 144
                                                                                  145* 145 146* 146 147*
write                    62(02)        based           bit(1)                   level 3 packed unaligned dcl 1-37 ref 145

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
abs                                                    builtin function         dcl 32
bit                                                    builtin function         dcl 32
divide                                                 builtin function         dcl 32
fb71                                   automatic       fixed bin(71,0)          dcl 17
fixed                                                  builtin function         dcl 32
length                                                 builtin function         dcl 32
line                                   automatic       char(120)                dcl 17
mod                                                    builtin function         dcl 32
p                                      automatic       pointer                  dcl 17
q                                      automatic       pointer                  dcl 17
time                                   automatic       fixed bin(71,0)          dcl 17
unspec                                                 builtin function         dcl 32

NAMES DECLARED BY EXPLICIT CONTEXT.
arglp                           000250 constant        label                    dcl 59 ref 66
dump_mrt                        000207 constant        entry                    external dcl 11
er                              000351 constant        label                    dcl 71 ref 75
mrt1                            000311 constant        label                    dcl 68 ref 57 60 62
pss                             000621 constant        label                    dcl 91 ref 88
pss1                            000752 constant        label                    dcl 107 ref 98 102
pstream                         001246 constant        entry                    internal dcl 130 ref 93 116
skip                            001151 constant        label                    dcl 121 ref 97 105

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      2012        2042    1703        2022
Length      2250    1703        30         171     107           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
dump_mrt                            440 external procedure  is an external procedure.  
pstream                                 internal procedure  shares stack frame of external procedure dump_mrt.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
dump_mrt                 000100 path                        dump_mrt
                         000152 dn                          dump_mrt
                         000224 en                          dump_mrt
                         000234 srch                        dump_mrt
                         000354 datstr                      dump_mrt
                         000360 vstr                        dump_mrt
                         000400 vconst                      dump_mrt
                         000411 i                           dump_mrt
                         000412 j                           dump_mrt
                         000413 k                           dump_mrt
                         000414 l                           dump_mrt
                         000415 m                           dump_mrt
                         000416 n                           dump_mrt
                         000420 ap                          dump_mrt
                         000422 al                          dump_mrt
                         000423 ec                          dump_mrt
                         000424 mrtp                        dump_mrt
                         000426 streamp                     dump_mrt
                         000442 k                           pstream
                         000443 vstr                        pstream
                         000464 sourcet                     pstream

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
alloc_cs            call_ext_out_desc   call_ext_out        return              shorten_stack       ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
clock_                        com_err_                      cu_$arg_ptr                   date_time_
expand_path_                  hcs_$initiate                 hcs_$terminate_noname         ioa_

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.


CONSTANTS
001676  aa     000002000000
001677  aa     000000000000
001700  aa     600000000041
001701  aa     000514000000


000000  aa     524000000041

000001  aa     524000000025

000002  aa     530000000100

000003  aa     524000000017

000004  aa     524000000021

000005  aa     524000000026

000006  aa     524000000007

000007  aa     524000000100

000010  aa     524000000016

000011  aa     524000000014

000012  aa     404000000021

000013  aa     524000000023

000014  aa     514000000044

000015  aa     524000000013

000016  aa     524000000036

000017  aa     524000000020

000020  aa     464000000000

000021  aa     404000000002

000022  aa     404000000001

000023  aa     524000000000

000024  aa     524000000040

000025  aa     524000000250

000026  aa     524000000002

000027  aa     524000000010

000030  aa     404000000043

001702  aa  052 000 000 000	*

000031  aa     410000000107

000032  aa  054 040 141 143	, ac
000033  aa  164 151 166 145	tive

000034  aa  054 040 167 162	, wr
000035  aa  151 164 145 000	ite

000036  aa  054 040 162 145	, re
000037  aa  141 144 000 000	ad

000040  aa  136 057 105 156	^/En
000041  aa  144 136 057 000	d^/

000042  aa  054 040 151 156	, in
000043  aa  151 164 000 000	it

000044  aa  166 141 154 151	vali
000045  aa  144 000 000 000	d

000046  aa     077777000043
000047  aa     000001000000

000050  aa  144 165 155 160	dump
000051  aa  137 155 162 164	_mrt

000052  aa  146 154 141 147	flag
000053  aa  163 072 136 061	s:^1
000054  aa  064 170 136 141	4x^a

000055  aa  146 154 141 147	flag
000056  aa  163 072 136 061	s:^1
000057  aa  064 170 136 167	4x^w

000060  aa  154 157 143 153	lock
000061  aa  072 136 061 065	:^15
000062  aa  170 136 167 000	x^w

000063  aa  136 065 170 150	^5xh
000064  aa  151 163 155 145	isme
000065  aa  163 163 072 136	ss:^
000066  aa  067 170 136 160	7x^p

000067  aa  136 065 170 157	^5xo
000070  aa  165 162 155 145	urme
000071  aa  163 163 072 136	ss:^
000072  aa  067 170 136 160	7x^p

000073  aa  136 065 170 146	^5xf
000074  aa  154 141 147 163	lags
000075  aa  072 136 071 170	:^9x
000076  aa  136 141 000 000	^a

000077  aa  136 065 170 163	^5xs
000100  aa  157 165 162 143	ourc
000101  aa  145 072 136 070	e:^8
000102  aa  170 136 141 000	x^a

000103  aa  150 151 163 155	hism
000104  aa  145 163 163 072	ess:
000105  aa  136 061 062 170	^12x
000106  aa  136 160 000 000	^p

000107  aa  136 057 123 117	^/SO
000110  aa  125 122 103 105	URCE
000111  aa  072 040 136 141	: ^a
000112  aa  136 057 000 000	^/

000113  aa  136 057 136 065	^/^5
000114  aa  170 123 124 122	xSTR
000115  aa  105 101 115 072	EAM:
000116  aa  040 136 141 136	 ^a^
000117  aa  057 000 000 000	/

000120  aa  156 157 137 157	no_o
000121  aa  146 137 163 164	f_st
000122  aa  162 145 141 155	ream
000123  aa  163 072 136 066	s:^6
000124  aa  170 136 144 000	x^d

000125  aa  156 157 137 157	no_o
000126  aa  146 137 163 157	f_so
000127  aa  165 162 143 145	urce
000130  aa  163 072 136 066	s:^6
000131  aa  170 136 144 000	x^d

000132  aa  136 061 060 170	^10x
000133  aa  166 143 157 156	vcon
000134  aa  163 040 136 144	s ^d
000135  aa  072 040 040 136	:  ^
000136  aa  063 144 040 136	3d ^
000137  aa  141 000 000 000	a

000140  aa  136 065 170 156	^5xn
000141  aa  157 137 157 146	o_of
000142  aa  137 166 143 157	_vco
000143  aa  156 163 072 136	ns:^
000144  aa  063 170 136 144	3x^d
000145  aa  136 057 000 000	^/

000146  aa  136 065 170 163	^5xs
000147  aa  164 162 145 141	trea
000150  aa  155 137 151 156	m_in
000151  aa  144 145 170 072	dex:
000152  aa  136 062 170 136	^2x^
000153  aa  144 000 000 000	d

000154  aa  136 065 170 163	^5xs
000155  aa  157 165 162 143	ourc
000156  aa  145 137 151 156	e_in
000157  aa  144 145 170 072	dex:
000160  aa  136 062 170 136	^2x^
000161  aa  144 000 000 000	d

000162  aa  163 157 165 162	sour
000163  aa  143 145 040 042	ce "
000164  aa  136 141 042 040	^a" 
000165  aa  156 157 164 040	not 
000166  aa  151 156 040 115	in M
000167  aa  122 124 000 000	RT

000170  aa  076 163 171 163	>sys
000171  aa  164 145 155 137	tem_
000172  aa  143 157 156 164	cont
000173  aa  162 157 154 137	rol_
000174  aa  061 076 115 122	1>MR
000175  aa  124 000 000 000	T

000176  aa  136 057 115 145	^/Me
000177  aa  163 163 141 147	ssag
000200  aa  145 040 122 157	e Ro
000201  aa  165 164 151 156	utin
000202  aa  147 040 124 141	g Ta
000203  aa  142 154 145 040	ble 
000204  aa  055 040 136 141	- ^a
000205  aa  136 057 000 000	^/

BEGIN PROCEDURE dump_mrt
ENTRY TO dump_mrt                                           STATEMENT 1 ON LINE 11
dump_mrt: proc;

000206  da     000103200000
000207  aa   000700 6270 00	eax7 	448
000210  aa  7 00034 3521 20	epp2 	pr7|28,*
000211  aa  2 01045 2721 00	tsp2 	pr2|549		ext_entry
000212  aa     000000000000
000213  aa     000000000000
						STATEMENT 1 ON LINE 52
	m = 0;

000214  aa  6 00415 4501 00	stz  	pr6|269		m
						STATEMENT 1 ON LINE 53
	l = 0;

000215  aa  6 00414 4501 00	stz  	pr6|268		l
						STATEMENT 1 ON LINE 54
	k = 2;

000216  aa   000002 2360 07	ldq  	2,dl
000217  aa  6 00413 7561 00	stq  	pr6|267		k
						STATEMENT 1 ON LINE 55
	path = ">system_control_1>MRT";

000220  aa  040 100 100 404	mlr  	(ic),(pr),fill(040)
000221  aa   777750 00 0025	desc9a	-24,21		000170 = 076163171163
000222  aa  6 00100 00 0250	desc9a	pr6|64,168	path
						STATEMENT 1 ON LINE 56
	call cu_$arg_ptr (1, ap, al, ec);

000223  aa   000001 2360 07	ldq  	1,dl
000224  aa  6 00475 7561 00	stq  	pr6|317
000225  aa  6 00475 3521 00	epp2 	pr6|317
000226  aa  6 00500 2521 00	spri2	pr6|320
000227  aa  6 00420 3521 00	epp2 	pr6|272		ap
000230  aa  6 00502 2521 00	spri2	pr6|322
000231  aa  6 00422 3521 00	epp2 	pr6|274		al
000232  aa  6 00504 2521 00	spri2	pr6|324
000233  aa  6 00423 3521 00	epp2 	pr6|275		ec
000234  aa  6 00506 2521 00	spri2	pr6|326
000235  aa  6 00476 6211 00	eax1 	pr6|318
000236  aa   020000 4310 07	fld  	8192,dl
000237  la  4 00012 3521 20	epp2 	pr4|10,*		cu_$arg_ptr
000240  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 57
	if ec ^= 0 then go to mrt1;

000241  aa  6 00423 2361 00	ldq  	pr6|275		ec
000242  aa   000047 6010 04	tnz  	39,ic		000311
						STATEMENT 1 ON LINE 58
	path = bchr;

000243  aa  6 00420 3735 20	epp7 	pr6|272,*		ap
000244  aa  6 00422 7271 00	lxl7 	pr6|274		al
000245  aa  040 100 100 540	mlr  	(pr,rl),(pr),fill(040)
000246  aa  7 00000 00 0017	desc9a	pr7|0,x7		bchr
000247  aa  6 00100 00 0250	desc9a	pr6|64,168	path
						STATEMENT 1 ON LINE 59
arglp:	call cu_$arg_ptr (k, ap, al, ec);

000250  aa  6 00413 3521 00	epp2 	pr6|267		k
000251  aa  6 00500 2521 00	spri2	pr6|320
000252  aa  6 00420 3521 00	epp2 	pr6|272		ap
000253  aa  6 00502 2521 00	spri2	pr6|322
000254  aa  6 00422 3521 00	epp2 	pr6|274		al
000255  aa  6 00504 2521 00	spri2	pr6|324
000256  aa  6 00423 3521 00	epp2 	pr6|275		ec
000257  aa  6 00506 2521 00	spri2	pr6|326
000260  aa  6 00476 6211 00	eax1 	pr6|318
000261  aa   020000 4310 07	fld  	8192,dl
000262  aa  6 00044 3701 20	epp4 	pr6|36,*
000263  la  4 00012 3521 20	epp2 	pr4|10,*		cu_$arg_ptr
000264  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 60
	if ec ^= 0 then go to mrt1;

000265  aa  6 00423 2361 00	ldq  	pr6|275		ec
000266  aa   000023 6010 04	tnz  	19,ic		000311
						STATEMENT 1 ON LINE 61
	m = m + 1;

000267  aa  6 00415 0541 00	aos  	pr6|269		m
						STATEMENT 1 ON LINE 62
	if m > 10 then go to mrt1;

000270  aa  6 00415 2361 00	ldq  	pr6|269		m
000271  aa   000012 1160 07	cmpq 	10,dl
000272  aa   000017 6054 04	tpnz 	15,ic		000311
						STATEMENT 1 ON LINE 63
	if bchr = "*" then l = m;

000273  aa  6 00420 3735 20	epp7 	pr6|272,*		ap
000274  aa  6 00422 7271 00	lxl7 	pr6|274		al
000275  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
000276  aa  7 00000 00 0017	desc9a	pr7|0,x7		bchr
000277  aa   001405 00 0001	desc9a	773,1		001702 = 052000000000
000300  aa   000002 6010 04	tnz  	2,ic		000302
000301  aa  6 00414 7561 00	stq  	pr6|268		l
						STATEMENT 1 ON LINE 64
	srch (m) = bchr;

000302  aa   000003 7360 00	qls  	3
000303  aa  6 00224 3715 06	epp5 	pr6|148,ql	srch
000304  aa  040 100 100 540	mlr  	(pr,rl),(pr),fill(040)
000305  aa  7 00000 00 0017	desc9a	pr7|0,x7		bchr
000306  aa  5 00000 00 0040	desc9a	pr5|0,32		srch
						STATEMENT 1 ON LINE 65
	k = k + 1;

000307  aa  6 00413 0541 00	aos  	pr6|267		k
						STATEMENT 1 ON LINE 66
	go to arglp;

000310  aa   777740 7100 04	tra  	-32,ic		000250
						STATEMENT 1 ON LINE 68
mrt1:	i = index (path, " ");

000311  aa  000 003 124 500	scm  	(pr),(du),mask(000)
000312  aa  6 00100 00 0250	desc9a	pr6|64,168	path
000313  aa   040000 00 0001	desc9a	16384,1
000314  aa  6 00056 0001 00	arg  	pr6|46
000315  aa  6 00056 2361 00	ldq  	pr6|46
000316  aa   000002 6070 04	ttf  	2,ic		000320
000317  aa   000001 3360 07	lcq  	1,dl
000320  aa   000001 0760 07	adq  	1,dl
000321  aa  6 00411 7561 00	stq  	pr6|265		i
						STATEMENT 1 ON LINE 69
	call expand_path_ (addr (path), i, addr (dn), addr (en), ec);

000322  aa  6 00100 3735 00	epp7 	pr6|64		path
000323  aa  6 00510 6535 00	spri7	pr6|328
000324  aa  6 00152 3715 00	epp5 	pr6|106		dn
000325  aa  6 00512 6515 00	spri5	pr6|330
000326  aa  6 00224 3535 00	epp3 	pr6|148		en
000327  aa  6 00514 2535 00	spri3	pr6|332
000330  aa  6 00510 3521 00	epp2 	pr6|328
000331  aa  6 00520 2521 00	spri2	pr6|336
000332  aa  6 00411 3521 00	epp2 	pr6|265		i
000333  aa  6 00522 2521 00	spri2	pr6|338
000334  aa  6 00512 3521 00	epp2 	pr6|330
000335  aa  6 00524 2521 00	spri2	pr6|340
000336  aa  6 00514 3521 00	epp2 	pr6|332
000337  aa  6 00526 2521 00	spri2	pr6|342
000340  aa  6 00423 3521 00	epp2 	pr6|275		ec
000341  aa  6 00530 2521 00	spri2	pr6|344
000342  aa  6 00516 6211 00	eax1 	pr6|334
000343  aa   024000 4310 07	fld  	10240,dl
000344  aa  6 00044 3701 20	epp4 	pr6|36,*
000345  la  4 00014 3521 20	epp2 	pr4|12,*		expand_path_
000346  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 70
	if ec ^= 0 then do;

000347  aa  6 00423 2361 00	ldq  	pr6|275		ec
000350  aa   000033 6000 04	tze  	27,ic		000403
						STATEMENT 1 ON LINE 71
er:	     call com_err_ (ec, "dump_mrt", "^a", path);

000351  aa   777477 2370 04	ldaq 	-193,ic		000050 = 144165155160 137155162164
000352  aa  6 00514 7571 00	staq 	pr6|332
000353  aa   136141 2350 03	lda  	48225,du
000354  aa  6 00475 7551 00	sta  	pr6|317
000355  aa  6 00423 3521 00	epp2 	pr6|275		ec
000356  aa  6 00534 2521 00	spri2	pr6|348
000357  aa  6 00514 3521 00	epp2 	pr6|332
000360  aa  6 00536 2521 00	spri2	pr6|350
000361  aa  6 00475 3521 00	epp2 	pr6|317
000362  aa  6 00540 2521 00	spri2	pr6|352
000363  aa  6 00100 3521 00	epp2 	pr6|64		path
000364  aa  6 00542 2521 00	spri2	pr6|354
000365  aa   777443 3520 04	epp2 	-221,ic		000030 = 404000000043
000366  aa  6 00544 2521 00	spri2	pr6|356
000367  aa   777440 3520 04	epp2 	-224,ic		000027 = 524000000010
000370  aa  6 00546 2521 00	spri2	pr6|358
000371  aa   777435 3520 04	epp2 	-227,ic		000026 = 524000000002
000372  aa  6 00550 2521 00	spri2	pr6|360
000373  aa   777432 3520 04	epp2 	-230,ic		000025 = 524000000250
000374  aa  6 00552 2521 00	spri2	pr6|362
000375  aa  6 00532 6211 00	eax1 	pr6|346
000376  aa   020000 4310 07	fld  	8192,dl
000377  aa  6 00044 3701 20	epp4 	pr6|36,*
000400  la  4 00022 3521 20	epp2 	pr4|18,*		com_err_
000401  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 72
	     return;

000402  aa  0 00631 7101 00	tra  	pr0|409		return
						STATEMENT 1 ON LINE 73
	end;

						STATEMENT 1 ON LINE 74
	call hcs_$initiate (dn, en, "", 0, 1, mrtp, ec);

000403  aa  6 00554 4501 00	stz  	pr6|364
000404  aa   000001 2360 07	ldq  	1,dl
000405  aa  6 00555 7561 00	stq  	pr6|365
000406  aa  6 00152 3521 00	epp2 	pr6|106		dn
000407  aa  6 00560 2521 00	spri2	pr6|368
000410  aa  6 00224 3521 00	epp2 	pr6|148		en
000411  aa  6 00562 2521 00	spri2	pr6|370
000412  aa  6 00475 3521 00	epp2 	pr6|317
000413  aa  6 00564 2521 00	spri2	pr6|372
000414  aa  6 00554 3521 00	epp2 	pr6|364
000415  aa  6 00566 2521 00	spri2	pr6|374
000416  aa  6 00555 3521 00	epp2 	pr6|365
000417  aa  6 00570 2521 00	spri2	pr6|376
000420  aa  6 00424 3521 00	epp2 	pr6|276		mrtp
000421  aa  6 00572 2521 00	spri2	pr6|378
000422  aa  6 00423 3521 00	epp2 	pr6|275		ec
000423  aa  6 00574 2521 00	spri2	pr6|380
000424  aa   777401 3520 04	epp2 	-255,ic		000025 = 524000000250
000425  aa  6 00576 2521 00	spri2	pr6|382
000426  aa   777376 3520 04	epp2 	-258,ic		000024 = 524000000040
000427  aa  6 00600 2521 00	spri2	pr6|384
000430  aa   777373 3520 04	epp2 	-261,ic		000023 = 524000000000
000431  aa  6 00602 2521 00	spri2	pr6|386
000432  aa   777370 3520 04	epp2 	-264,ic		000022 = 404000000001
000433  aa  6 00604 2521 00	spri2	pr6|388
000434  aa   777365 3520 04	epp2 	-267,ic		000021 = 404000000002
000435  aa  6 00606 2521 00	spri2	pr6|390
000436  aa   777362 3520 04	epp2 	-270,ic		000020 = 464000000000
000437  aa  6 00610 2521 00	spri2	pr6|392
000440  aa   777370 3520 04	epp2 	-264,ic		000030 = 404000000043
000441  aa  6 00612 2521 00	spri2	pr6|394
000442  aa  6 00556 6211 00	eax1 	pr6|366
000443  aa   034000 4310 07	fld  	14336,dl
000444  aa  6 00044 3701 20	epp4 	pr6|36,*
000445  la  4 00024 3521 20	epp2 	pr4|20,*		hcs_$initiate
000446  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 75
	if mrtp = null then go to er;

000447  aa  6 00424 2371 00	ldaq 	pr6|276		mrtp
000450  aa   777376 6770 04	eraq 	-258,ic		000046 = 077777000043 000001000000
000451  aa  0 00460 3771 00	anaq 	pr0|304		= 077777000077 777777077077
000452  aa   777677 6000 04	tze  	-65,ic		000351
						STATEMENT 1 ON LINE 77
	if m = 0 then do;

000453  aa  6 00415 2361 00	ldq  	pr6|269		m
000454  aa   000132 6010 04	tnz  	90,ic		000606
						STATEMENT 1 ON LINE 78
	     call date_time_ ((clock_ ()), datstr);

000455  aa  6 00514 3521 00	epp2 	pr6|332
000456  aa  6 00500 2521 00	spri2	pr6|320
000457  aa  6 00476 6211 00	eax1 	pr6|318
000460  aa   004000 4310 07	fld  	2048,dl
000461  aa  6 00044 3701 20	epp4 	pr6|36,*
000462  la  4 00010 3521 20	epp2 	pr4|8,*		clock_
000463  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
000464  aa  6 00514 3521 00	epp2 	pr6|332
000465  aa  6 00500 2521 00	spri2	pr6|320
000466  aa  6 00354 3521 00	epp2 	pr6|236		datstr
000467  aa  6 00502 2521 00	spri2	pr6|322
000470  aa   777341 3520 04	epp2 	-287,ic		000031 = 410000000107
000471  aa  6 00504 2521 00	spri2	pr6|324
000472  aa   777325 3520 04	epp2 	-299,ic		000017 = 524000000020
000473  aa  6 00506 2521 00	spri2	pr6|326
000474  aa  6 00476 6211 00	eax1 	pr6|318
000475  aa   010000 4310 07	fld  	4096,dl
000476  aa  6 00044 3701 20	epp4 	pr6|36,*
000477  la  4 00020 3521 20	epp2 	pr4|16,*		date_time_
000500  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 79
	     call ioa_ ("^/Message Routing Table - ^a^/", datstr);

000501  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
000502  aa   777475 00 0040	desc9a	-195,32		000176 = 136057115145
000503  aa  6 00476 00 0040	desc9a	pr6|318,32
000504  aa  6 00476 3521 00	epp2 	pr6|318
000505  aa  6 00520 2521 00	spri2	pr6|336
000506  aa  6 00354 3521 00	epp2 	pr6|236		datstr
000507  aa  6 00522 2521 00	spri2	pr6|338
000510  aa   777306 3520 04	epp2 	-314,ic		000016 = 524000000036
000511  aa  6 00524 2521 00	spri2	pr6|340
000512  aa   777305 3520 04	epp2 	-315,ic		000017 = 524000000020
000513  aa  6 00526 2521 00	spri2	pr6|342
000514  aa  6 00516 6211 00	eax1 	pr6|334
000515  aa   010000 4310 07	fld  	4096,dl
000516  aa  6 00044 3701 20	epp4 	pr6|36,*
000517  la  4 00016 3521 20	epp2 	pr4|14,*		ioa_
000520  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 81
	     call ioa_ ("lock:^15x^w", MRT.lock);

000521  aa   777337 2370 04	ldaq 	-289,ic		000060 = 154157143153 072136061065
000522  aa  6 00476 7571 00	staq 	pr6|318
000523  aa   777337 2350 04	lda  	-289,ic		000062 = 170136167000
000524  aa  6 00500 7551 00	sta  	pr6|320
000525  aa  6 00476 3521 00	epp2 	pr6|318
000526  aa  6 00520 2521 00	spri2	pr6|336
000527  aa  6 00424 3521 20	epp2 	pr6|276,*		MRT.lock
000530  aa  6 00522 2521 00	spri2	pr6|338
000531  aa   777264 3520 04	epp2 	-332,ic		000015 = 524000000013
000532  aa  6 00524 2521 00	spri2	pr6|340
000533  aa   777261 3520 04	epp2 	-335,ic		000014 = 514000000044
000534  aa  6 00526 2521 00	spri2	pr6|342
000535  aa  6 00516 6211 00	eax1 	pr6|334
000536  aa   010000 4310 07	fld  	4096,dl
000537  aa  6 00044 3701 20	epp4 	pr6|36,*
000540  la  4 00016 3521 20	epp2 	pr4|14,*		ioa_
000541  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 82
	     call ioa_ ("no_of_sources:^6x^d", MRT.no_of_sources);

000542  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
000543  aa   777363 00 0024	desc9a	-269,20		000125 = 156157137157
000544  aa  6 00476 00 0024	desc9a	pr6|318,20
000545  aa  6 00476 3521 00	epp2 	pr6|318
000546  aa  6 00520 2521 00	spri2	pr6|336
000547  aa  6 00424 3735 20	epp7 	pr6|276,*		mrtp
000550  aa  7 00001 3521 00	epp2 	pr7|1		MRT.no_of_sources
000551  aa  6 00522 2521 00	spri2	pr6|338
000552  aa   777241 3520 04	epp2 	-351,ic		000013 = 524000000023
000553  aa  6 00524 2521 00	spri2	pr6|340
000554  aa   777236 3520 04	epp2 	-354,ic		000012 = 404000000021
000555  aa  6 00526 2521 00	spri2	pr6|342
000556  aa  6 00516 6211 00	eax1 	pr6|334
000557  aa   010000 4310 07	fld  	4096,dl
000560  aa  6 00044 3701 20	epp4 	pr6|36,*
000561  la  4 00016 3521 20	epp2 	pr4|14,*		ioa_
000562  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 83
	     call ioa_ ("flags:^14x^w", MRT.flags);

000563  aa   777272 2350 04	lda  	-326,ic		000055 = 146154141147
000564  aa   777272 2360 04	ldq  	-326,ic		000056 = 163072136061
000565  aa  6 00476 7571 00	staq 	pr6|318
000566  aa   777271 2350 04	lda  	-327,ic		000057 = 064170136167
000567  aa  6 00500 7551 00	sta  	pr6|320
000570  aa  6 00476 3521 00	epp2 	pr6|318
000571  aa  6 00520 2521 00	spri2	pr6|336
000572  aa  6 00424 3735 20	epp7 	pr6|276,*		mrtp
000573  aa  7 00002 3521 00	epp2 	pr7|2		MRT.flags
000574  aa  6 00522 2521 00	spri2	pr6|338
000575  aa   777214 3520 04	epp2 	-372,ic		000011 = 524000000014
000576  aa  6 00524 2521 00	spri2	pr6|340
000577  aa   777215 3520 04	epp2 	-371,ic		000014 = 514000000044
000600  aa  6 00526 2521 00	spri2	pr6|342
000601  aa  6 00516 6211 00	eax1 	pr6|334
000602  aa   010000 4310 07	fld  	4096,dl
000603  aa  6 00044 3701 20	epp4 	pr6|36,*
000604  la  4 00016 3521 20	epp2 	pr4|14,*		ioa_
000605  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 84
	end;

						STATEMENT 1 ON LINE 86
	if l ^= 0 then do;

000606  aa  6 00414 2361 00	ldq  	pr6|268		l
000607  aa   000010 6000 04	tze  	8,ic		000617
						STATEMENT 1 ON LINE 87
	     srch (m) = "";

000610  aa  6 00415 2361 00	ldq  	pr6|269		m
000611  aa   000003 7360 00	qls  	3
000612  aa  6 00224 3735 06	epp7 	pr6|148,ql	srch
000613  aa  040 100 100 400	mlr  	(),(pr),fill(040)
000614  aa   000000 00 0000	desc9a	0,0
000615  aa  7 00000 00 0040	desc9a	pr7|0,32		srch
						STATEMENT 1 ON LINE 88
	     go to pss;

000616  aa   000003 7100 04	tra  	3,ic		000621
						STATEMENT 1 ON LINE 89
	end;

						STATEMENT 1 ON LINE 90
	if m = 0 then do;

000617  aa  6 00415 2361 00	ldq  	pr6|269		m
000620  aa   000056 6010 04	tnz  	46,ic		000676
						STATEMENT 1 ON LINE 91
pss:	     call ioa_ ("^/SOURCE: ^a^/", MRT.star_entry.source);

000621  aa   777266 2350 04	lda  	-330,ic		000107 = 136057123117
000622  aa   777266 2360 04	ldq  	-330,ic		000110 = 125122103105
000623  aa  6 00476 7571 00	staq 	pr6|318
000624  aa   777265 2350 04	lda  	-331,ic		000111 = 072040136141
000625  aa   136057 2360 03	ldq  	48175,du
000626  aa  6 00500 7571 00	staq 	pr6|320
000627  aa  6 00476 3521 00	epp2 	pr6|318
000630  aa  6 00520 2521 00	spri2	pr6|336
000631  aa  6 00424 3735 20	epp7 	pr6|276,*		mrtp
000632  aa  7 00004 3521 00	epp2 	pr7|4		MRT.source
000633  aa  6 00522 2521 00	spri2	pr6|338
000634  aa   777154 3520 04	epp2 	-404,ic		000010 = 524000000016
000635  aa  6 00524 2521 00	spri2	pr6|340
000636  aa   777166 3520 04	epp2 	-394,ic		000024 = 524000000040
000637  aa  6 00526 2521 00	spri2	pr6|342
000640  aa  6 00516 6211 00	eax1 	pr6|334
000641  aa   010000 4310 07	fld  	4096,dl
000642  aa  6 00044 3701 20	epp4 	pr6|36,*
000643  la  4 00016 3521 20	epp2 	pr4|14,*		ioa_
000644  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 92
	     call ioa_ ("no_of_streams:^6x^d", MRT.star_entry.no_of_streams);

000645  aa   777253 2370 04	ldaq 	-341,ic		000120 = 156157137157 146137163164
000646  aa  6 00476 7571 00	staq 	pr6|318
000647  aa   777253 2370 04	ldaq 	-341,ic		000122 = 162145141155 163072136066
000650  aa  6 00500 7571 00	staq 	pr6|320
000651  aa   777253 2350 04	lda  	-341,ic		000124 = 170136144000
000652  aa  6 00502 7551 00	sta  	pr6|322
000653  aa  6 00476 3521 00	epp2 	pr6|318
000654  aa  6 00520 2521 00	spri2	pr6|336
000655  aa  6 00424 3735 20	epp7 	pr6|276,*		mrtp
000656  aa  7 00016 3521 00	epp2 	pr7|14		MRT.no_of_streams
000657  aa  6 00522 2521 00	spri2	pr6|338
000660  aa   777133 3520 04	epp2 	-421,ic		000013 = 524000000023
000661  aa  6 00524 2521 00	spri2	pr6|340
000662  aa   777130 3520 04	epp2 	-424,ic		000012 = 404000000021
000663  aa  6 00526 2521 00	spri2	pr6|342
000664  aa  6 00516 6211 00	eax1 	pr6|334
000665  aa   010000 4310 07	fld  	4096,dl
000666  aa  6 00044 3701 20	epp4 	pr6|36,*
000667  la  4 00016 3521 20	epp2 	pr4|14,*		ioa_
000670  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 93
	     call pstream (addr (MRT.star_entry.stream));

000671  aa  6 00424 3735 20	epp7 	pr6|276,*		mrtp
000672  aa  7 00020 3735 00	epp7 	pr7|16		MRT.stream
000673  aa  6 00514 6535 00	spri7	pr6|332
000674  aa   001002 3520 04	epp2 	514,ic		001676 = 000002000000
000675  aa   000351 6700 04	tsp4 	233,ic		001246
						STATEMENT 1 ON LINE 94
	end;

						STATEMENT 1 ON LINE 96
	do i = 1 to MRT.no_of_sources;

000676  aa  6 00424 3735 20	epp7 	pr6|276,*		mrtp
000677  aa  7 00001 2361 00	ldq  	pr7|1		MRT.no_of_sources
000700  aa  6 00430 7561 00	stq  	pr6|280
000701  aa   000001 2360 07	ldq  	1,dl
000702  aa  6 00411 7561 00	stq  	pr6|265		i
000703  aa   000000 0110 03	nop  	0,du
000704  aa  6 00411 2361 00	ldq  	pr6|265		i
000705  aa  6 00430 1161 00	cmpq 	pr6|280
000706  aa   000245 6054 04	tpnz 	165,ic		001153
						STATEMENT 1 ON LINE 97
	     if ^MRT.source (i).flags.valid then go to skip;

000707  aa   002014 4020 07	mpy  	1036,dl
000710  aa  6 00424 3735 20	epp7 	pr6|276,*		mrtp
000711  aa  7 76217 2351 06	lda  	pr7|-881,ql	MRT.valid
000712  aa   200000 3150 03	cana 	65536,du
000713  aa   000236 6000 04	tze  	158,ic		001151
						STATEMENT 1 ON LINE 98
	     if m = 0 then go to pss1;

000714  aa  6 00415 2361 00	ldq  	pr6|269		m
000715  aa   000035 6000 04	tze  	29,ic		000752
						STATEMENT 1 ON LINE 99
	     do n = 1 to m;

000716  aa  6 00431 7561 00	stq  	pr6|281
000717  aa   000001 2360 07	ldq  	1,dl
000720  aa  6 00416 7561 00	stq  	pr6|270		n
000721  aa   000000 0110 03	nop  	0,du
000722  aa  6 00416 2361 00	ldq  	pr6|270		n
000723  aa  6 00431 1161 00	cmpq 	pr6|281
000724  aa   000225 6054 04	tpnz 	149,ic		001151
						STATEMENT 1 ON LINE 100
		if MRT.source (i).source = srch (n) then do;

000725  aa  6 00411 2361 00	ldq  	pr6|265		i
000726  aa   002014 4020 07	mpy  	1036,dl
000727  aa   000000 6270 06	eax7 	0,ql
000730  aa  6 00416 2361 00	ldq  	pr6|270		n
000731  aa   000003 7360 00	qls  	3
000732  aa  6 00424 3735 20	epp7 	pr6|276,*		mrtp
000733  aa  7 76204 3735 17	epp7 	pr7|-892,7	MRT.source
000734  aa  6 00224 3715 06	epp5 	pr6|148,ql	srch
000735  aa  040 100 106 500	cmpc 	(pr),(pr),fill(040)
000736  aa  7 00000 00 0040	desc9a	pr7|0,32		MRT.source
000737  aa  5 00000 00 0040	desc9a	pr5|0,32		srch
000740  aa  6 00555 7561 00	stq  	pr6|365
000741  aa   000006 6010 04	tnz  	6,ic		000747
						STATEMENT 1 ON LINE 101
		     srch (n) = "";

000742  aa  6 00224 3535 06	epp3 	pr6|148,ql	srch
000743  aa  040 100 100 400	mlr  	(),(pr),fill(040)
000744  aa   000000 00 0000	desc9a	0,0
000745  aa  3 00000 00 0040	desc9a	pr3|0,32		srch
						STATEMENT 1 ON LINE 102
		     go to pss1;

000746  aa   000004 7100 04	tra  	4,ic		000752
						STATEMENT 1 ON LINE 103
		end;

						STATEMENT 1 ON LINE 104
	     end;

000747  aa  6 00416 0541 00	aos  	pr6|270		n
000750  aa   777752 7100 04	tra  	-22,ic		000722
						STATEMENT 1 ON LINE 105
	     go to skip;

000751  aa   000200 7100 04	tra  	128,ic		001151
						STATEMENT 1 ON LINE 107
pss1:	     call ioa_ ("^/SOURCE: ^a^/", MRT.source (i).source);

000752  aa   777135 2350 04	lda  	-419,ic		000107 = 136057123117
000753  aa   777135 2360 04	ldq  	-419,ic		000110 = 125122103105
000754  aa  6 00476 7571 00	staq 	pr6|318
000755  aa   777134 2350 04	lda  	-420,ic		000111 = 072040136141
000756  aa   136057 2360 03	ldq  	48175,du
000757  aa  6 00500 7571 00	staq 	pr6|320
000760  aa  6 00411 2361 00	ldq  	pr6|265		i
000761  aa   002014 4020 07	mpy  	1036,dl
000762  aa  6 00476 3521 00	epp2 	pr6|318
000763  aa  6 00520 2521 00	spri2	pr6|336
000764  aa  6 00424 3735 20	epp7 	pr6|276,*		mrtp
000765  aa  7 76204 3521 06	epp2 	pr7|-892,ql	MRT.source
000766  aa  6 00522 2521 00	spri2	pr6|338
000767  aa   777021 3520 04	epp2 	-495,ic		000010 = 524000000016
000770  aa  6 00524 2521 00	spri2	pr6|340
000771  aa   777033 3520 04	epp2 	-485,ic		000024 = 524000000040
000772  aa  6 00526 2521 00	spri2	pr6|342
000773  aa  6 00555 7561 00	stq  	pr6|365
000774  aa  6 00516 6211 00	eax1 	pr6|334
000775  aa   010000 4310 07	fld  	4096,dl
000776  aa  6 00044 3701 20	epp4 	pr6|36,*
000777  la  4 00016 3521 20	epp2 	pr4|14,*		ioa_
001000  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 108
	     call ioa_ ("hismess:^12x^p", MRT.source (i).hismess);

001001  aa   777102 2350 04	lda  	-446,ic		000103 = 150151163155
001002  aa   777102 2360 04	ldq  	-446,ic		000104 = 145163163072
001003  aa  6 00476 7571 00	staq 	pr6|318
001004  aa   777101 2350 04	lda  	-447,ic		000105 = 136061062170
001005  aa   136160 2360 03	ldq  	48240,du
001006  aa  6 00500 7571 00	staq 	pr6|320
001007  aa  6 00476 3521 00	epp2 	pr6|318
001010  aa  6 00520 2521 00	spri2	pr6|336
001011  aa  6 00555 7271 00	lxl7 	pr6|365
001012  aa  6 00424 3735 20	epp7 	pr6|276,*		mrtp
001013  aa  7 76214 3521 17	epp2 	pr7|-884,7	MRT.hismess
001014  aa  6 00522 2521 00	spri2	pr6|338
001015  aa   776773 3520 04	epp2 	-517,ic		000010 = 524000000016
001016  aa  6 00524 2521 00	spri2	pr6|340
001017  aa   777001 3520 04	epp2 	-511,ic		000020 = 464000000000
001020  aa  6 00526 2521 00	spri2	pr6|342
001021  aa  6 00516 6211 00	eax1 	pr6|334
001022  aa   010000 4310 07	fld  	4096,dl
001023  aa  6 00044 3701 20	epp4 	pr6|36,*
001024  la  4 00016 3521 20	epp2 	pr4|14,*		ioa_
001025  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 109
	     call ioa_ ("no_of_streams:^6x^d", MRT.source (i).no_of_streams);

001026  aa   777072 2370 04	ldaq 	-454,ic		000120 = 156157137157 146137163164
001027  aa  6 00476 7571 00	staq 	pr6|318
001030  aa   777072 2370 04	ldaq 	-454,ic		000122 = 162145141155 163072136066
001031  aa  6 00500 7571 00	staq 	pr6|320
001032  aa   777072 2350 04	lda  	-454,ic		000124 = 170136144000
001033  aa  6 00502 7551 00	sta  	pr6|322
001034  aa  6 00476 3521 00	epp2 	pr6|318
001035  aa  6 00520 2521 00	spri2	pr6|336
001036  aa  6 00555 7271 00	lxl7 	pr6|365
001037  aa  6 00424 3735 20	epp7 	pr6|276,*		mrtp
001040  aa  7 76216 3521 17	epp2 	pr7|-882,7	MRT.no_of_streams
001041  aa  6 00522 2521 00	spri2	pr6|338
001042  aa   776751 3520 04	epp2 	-535,ic		000013 = 524000000023
001043  aa  6 00524 2521 00	spri2	pr6|340
001044  aa   776746 3520 04	epp2 	-538,ic		000012 = 404000000021
001045  aa  6 00526 2521 00	spri2	pr6|342
001046  aa  6 00516 6211 00	eax1 	pr6|334
001047  aa   010000 4310 07	fld  	4096,dl
001050  aa  6 00044 3701 20	epp4 	pr6|36,*
001051  la  4 00016 3521 20	epp2 	pr4|14,*		ioa_
001052  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 110
	     vstr = "valid";

001053  aa  040 100 100 404	mlr  	(ic),(pr),fill(040)
001054  aa   776771 00 0005	desc9a	-519,5		000044 = 166141154151
001055  aa  6 00360 00 0100	desc9a	pr6|240,64	vstr
						STATEMENT 1 ON LINE 111
	     if MRT.source (i).flags.init then vstr = vstr || ", init";

001056  aa  6 00555 7271 00	lxl7 	pr6|365
001057  aa  6 00424 3735 20	epp7 	pr6|276,*		mrtp
001060  aa  7 76217 2351 17	lda  	pr7|-881,7	MRT.init
001061  aa   400000 3150 03	cana 	131072,du
001062  aa   000014 6000 04	tze  	12,ic		001076
001063  aa   000106 2360 07	ldq  	70,dl
001064  aa  0 00551 7001 00	tsx0 	pr0|361		alloc_cs
001065  aa  040 100 100 500	mlr  	(pr),(pr),fill(040)
001066  aa  6 00360 00 0100	desc9a	pr6|240,64	vstr
001067  aa  2 00000 00 0100	desc9a	pr2|0,64
001070  aa  040 100 100 404	mlr  	(ic),(pr),fill(040)
001071  aa   776752 00 0006	desc9a	-534,6		000042 = 054040151156
001072  aa  2 00020 00 0006	desc9a	pr2|16,6
001073  aa  000 100 100 500	mlr  	(pr),(pr),fill(000)
001074  aa  2 00000 00 0100	desc9a	pr2|0,64
001075  aa  6 00360 00 0100	desc9a	pr6|240,64	vstr
						STATEMENT 1 ON LINE 112
	     call ioa_ ("flags:^14x^a", vstr);

001076  aa  0 01014 7001 00	tsx0 	pr0|524		shorten_stack
001077  aa   776753 2370 04	ldaq 	-533,ic		000052 = 146154141147 163072136061
001100  aa  6 00476 7571 00	staq 	pr6|318
001101  aa   776753 2350 04	lda  	-533,ic		000054 = 064170136141
001102  aa  6 00500 7551 00	sta  	pr6|320
001103  aa  6 00476 3521 00	epp2 	pr6|318
001104  aa  6 00520 2521 00	spri2	pr6|336
001105  aa  6 00360 3521 00	epp2 	pr6|240		vstr
001106  aa  6 00522 2521 00	spri2	pr6|338
001107  aa   776702 3520 04	epp2 	-574,ic		000011 = 524000000014
001110  aa  6 00524 2521 00	spri2	pr6|340
001111  aa   776676 3520 04	epp2 	-578,ic		000007 = 524000000100
001112  aa  6 00526 2521 00	spri2	pr6|342
001113  aa  6 00516 6211 00	eax1 	pr6|334
001114  aa   010000 4310 07	fld  	4096,dl
001115  aa  6 00044 3701 20	epp4 	pr6|36,*
001116  la  4 00016 3521 20	epp2 	pr4|14,*		ioa_
001117  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 114
	     do j = 1 to MRT.source (i).no_of_streams;

001120  aa  6 00555 7271 00	lxl7 	pr6|365
001121  aa  6 00424 3735 20	epp7 	pr6|276,*		mrtp
001122  aa  7 76216 2361 17	ldq  	pr7|-882,7	MRT.no_of_streams
001123  aa  6 00432 7561 00	stq  	pr6|282
001124  aa   000001 2360 07	ldq  	1,dl
001125  aa  6 00412 7561 00	stq  	pr6|266		j
001126  aa  6 00412 2361 00	ldq  	pr6|266		j
001127  aa  6 00432 1161 00	cmpq 	pr6|282
001130  aa   000021 6054 04	tpnz 	17,ic		001151
						STATEMENT 1 ON LINE 116
		if MRT.source (i).stream (j).flags.valid then
		call pstream (addr (MRT.source (i).stream (j)));

001131  aa  6 00411 2361 00	ldq  	pr6|265		i
001132  aa   002014 4020 07	mpy  	1036,dl
001133  aa  6 00555 7561 00	stq  	pr6|365
001134  aa  6 00412 2361 00	ldq  	pr6|266		j
001135  aa   000007 7360 00	qls  	7
001136  aa  6 00555 0761 00	adq  	pr6|365
001137  aa  6 00424 3735 20	epp7 	pr6|276,*		mrtp
001140  aa  7 76102 2351 06	lda  	pr7|-958,ql	MRT.valid
001141  aa   400000 3150 03	cana 	131072,du
001142  aa   000005 6000 04	tze  	5,ic		001147
001143  aa  7 76020 3715 06	epp5 	pr7|-1008,ql	MRT.stream
001144  aa  6 00514 6515 00	spri5	pr6|332
001145  aa   000531 3520 04	epp2 	345,ic		001676 = 000002000000
001146  aa   000100 6700 04	tsp4 	64,ic		001246
						STATEMENT 1 ON LINE 119
	     end;

001147  aa  6 00412 0541 00	aos  	pr6|266		j
001150  aa   777756 7100 04	tra  	-18,ic		001126
						STATEMENT 1 ON LINE 121
skip:	end;

001151  aa  6 00411 0541 00	aos  	pr6|265		i
001152  aa   777532 7100 04	tra  	-166,ic		000704
						STATEMENT 1 ON LINE 123
	if m = 0 then call ioa_ ("^/End^/");

001153  aa  6 00415 2361 00	ldq  	pr6|269		m
001154  aa   000015 6010 04	tnz  	13,ic		001171
001155  aa   776663 2370 04	ldaq 	-589,ic		000040 = 136057105156 144136057000
001156  aa  6 00514 7571 00	staq 	pr6|332
001157  aa  6 00514 3521 00	epp2 	pr6|332
001160  aa  6 00500 2521 00	spri2	pr6|320
001161  aa   776625 3520 04	epp2 	-619,ic		000006 = 524000000007
001162  aa  6 00502 2521 00	spri2	pr6|322
001163  aa  6 00476 6211 00	eax1 	pr6|318
001164  aa   004000 4310 07	fld  	2048,dl
001165  aa  6 00044 3701 20	epp4 	pr6|36,*
001166  la  4 00016 3521 20	epp2 	pr4|14,*		ioa_
001167  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
001170  aa   000044 7100 04	tra  	36,ic		001234
						STATEMENT 1 ON LINE 124
	else do i = 1 to m;

001171  aa  6 00433 7561 00	stq  	pr6|283
001172  aa   000001 2360 07	ldq  	1,dl
001173  aa  6 00411 7561 00	stq  	pr6|265		i
001174  aa  6 00411 2361 00	ldq  	pr6|265		i
001175  aa  6 00433 1161 00	cmpq 	pr6|283
001176  aa   000036 6054 04	tpnz 	30,ic		001234
						STATEMENT 1 ON LINE 125
	     if srch (i) ^= "" then call ioa_ ("source ""^a"" not in MRT", srch (i));

001177  aa   000003 7360 00	qls  	3
001200  aa  6 00224 3735 06	epp7 	pr6|148,ql	srch
001201  aa  040 004 106 500	cmpc 	(pr),(ic),fill(040)
001202  aa  7 00000 00 0040	desc9a	pr7|0,32		srch
001203  aa   000501 00 0000	desc9a	321,0		001702 = 052000000000
001204  aa  6 00555 7561 00	stq  	pr6|365
001205  aa   000025 6000 04	tze  	21,ic		001232
001206  aa   776754 2370 04	ldaq 	-532,ic		000162 = 163157165162 143145040042
001207  aa  6 00476 7571 00	staq 	pr6|318
001210  aa   776754 2370 04	ldaq 	-532,ic		000164 = 136141042040 156157164040
001211  aa  6 00500 7571 00	staq 	pr6|320
001212  aa   776754 2370 04	ldaq 	-532,ic		000166 = 151156040115 122124000000
001213  aa  6 00502 7571 00	staq 	pr6|322
001214  aa  6 00476 3521 00	epp2 	pr6|318
001215  aa  6 00520 2521 00	spri2	pr6|336
001216  aa  6 00555 7271 00	lxl7 	pr6|365
001217  aa  6 00224 3521 17	epp2 	pr6|148,7		srch
001220  aa  6 00522 2521 00	spri2	pr6|338
001221  aa   776564 3520 04	epp2 	-652,ic		000005 = 524000000026
001222  aa  6 00524 2521 00	spri2	pr6|340
001223  aa   776601 3520 04	epp2 	-639,ic		000024 = 524000000040
001224  aa  6 00526 2521 00	spri2	pr6|342
001225  aa  6 00516 6211 00	eax1 	pr6|334
001226  aa   010000 4310 07	fld  	4096,dl
001227  aa  6 00044 3701 20	epp4 	pr6|36,*
001230  la  4 00016 3521 20	epp2 	pr4|14,*		ioa_
001231  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 126
	end;

001232  aa  6 00411 0541 00	aos  	pr6|265		i
001233  aa   777741 7100 04	tra  	-31,ic		001174
						STATEMENT 1 ON LINE 127
	call hcs_$terminate_noname (mrtp, ec);

001234  aa  6 00424 3521 00	epp2 	pr6|276		mrtp
001235  aa  6 00500 2521 00	spri2	pr6|320
001236  aa  6 00423 3521 00	epp2 	pr6|275		ec
001237  aa  6 00502 2521 00	spri2	pr6|322
001240  aa  6 00476 6211 00	eax1 	pr6|318
001241  aa   010000 4310 07	fld  	4096,dl
001242  aa  6 00044 3701 20	epp4 	pr6|36,*
001243  la  4 00026 3521 20	epp2 	pr4|22,*		hcs_$terminate_noname
001244  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 128
	return;

001245  aa  0 00631 7101 00	tra  	pr0|409		return
						STATEMENT 1 ON LINE 163
     end dump_mrt;

BEGIN PROCEDURE pstream
ENTRY TO pstream                                            STATEMENT 1 ON LINE 130
pstream:	proc (sp);

001246  aa  6 00434 6501 00	spri4	pr6|284
001247  aa  6 00436 2521 00	spri2	pr6|286
						STATEMENT 1 ON LINE 138
	     streamp = sp;

001250  aa  2 00002 3735 20	epp7 	pr2|2,*		sp
001251  aa  7 00000 3735 20	epp7 	pr7|0,*		sp
001252  aa  6 00426 6535 00	spri7	pr6|278		streamp
						STATEMENT 1 ON LINE 139
	     call ioa_ ("^/^5xSTREAM: ^a^/", stream.stream);

001253  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
001254  aa   776640 00 0024	desc9a	-608,20		000113 = 136057136065
001255  aa  6 00614 00 0024	desc9a	pr6|396,20
001256  aa  6 00614 3521 00	epp2 	pr6|396
001257  aa  6 00624 2521 00	spri2	pr6|404
001260  aa  7 00050 3521 00	epp2 	pr7|40		stream.stream
001261  aa  6 00626 2521 00	spri2	pr6|406
001262  aa   776522 3520 04	epp2 	-686,ic		000004 = 524000000021
001263  aa  6 00630 2521 00	spri2	pr6|408
001264  aa   776540 3520 04	epp2 	-672,ic		000024 = 524000000040
001265  aa  6 00632 2521 00	spri2	pr6|410
001266  aa  6 00622 6211 00	eax1 	pr6|402
001267  aa   010000 4310 07	fld  	4096,dl
001270  aa  6 00044 3701 20	epp4 	pr6|36,*
001271  la  4 00016 3521 20	epp2 	pr4|14,*		ioa_
001272  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 140
	     if substr (stream.source, 1, 1) < " " then sourcet = "*";

001273  aa  6 00426 3735 20	epp7 	pr6|278,*		streamp
001274  aa  7 00040 2351 00	lda  	pr7|32		stream.source
001275  aa  0 00022 3771 00	anaq 	pr0|18		= 777000000000 000000000000
001276  aa   040000 1150 03	cmpa 	16384,du
001277  aa   000005 6030 04	trc  	5,ic		001304
001300  aa  040 100 100 404	mlr  	(ic),(pr),fill(040)
001301  aa   000402 00 0001	desc9a	258,1		001702 = 052000000000
001302  aa  6 00464 00 0040	desc9a	pr6|308,32	sourcet
001303  aa   000004 7100 04	tra  	4,ic		001307
						STATEMENT 1 ON LINE 141
	     else sourcet = stream.source;

001304  aa  000 100 100 500	mlr  	(pr),(pr),fill(000)
001305  aa  7 00040 00 0040	desc9a	pr7|32,32		stream.source
001306  aa  6 00464 00 0040	desc9a	pr6|308,32	sourcet
						STATEMENT 1 ON LINE 142
	     call ioa_ ("^5xsource:^8x^a", sourcet);

001307  aa   776570 2350 04	lda  	-648,ic		000077 = 136065170163
001310  aa   776570 2360 04	ldq  	-648,ic		000100 = 157165162143
001311  aa  6 00614 7571 00	staq 	pr6|396
001312  aa   776567 2350 04	lda  	-649,ic		000101 = 145072136070
001313  aa   776567 2360 04	ldq  	-649,ic		000102 = 170136141000
001314  aa  6 00616 7571 00	staq 	pr6|398
001315  aa  6 00614 3521 00	epp2 	pr6|396
001316  aa  6 00624 2521 00	spri2	pr6|404
001317  aa  6 00464 3521 00	epp2 	pr6|308		sourcet
001320  aa  6 00626 2521 00	spri2	pr6|406
001321  aa   776462 3520 04	epp2 	-718,ic		000003 = 524000000017
001322  aa  6 00630 2521 00	spri2	pr6|408
001323  aa   776501 3520 04	epp2 	-703,ic		000024 = 524000000040
001324  aa  6 00632 2521 00	spri2	pr6|410
001325  aa  6 00622 6211 00	eax1 	pr6|402
001326  aa   010000 4310 07	fld  	4096,dl
001327  aa  6 00044 3701 20	epp4 	pr6|36,*
001330  la  4 00016 3521 20	epp2 	pr4|14,*		ioa_
001331  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 143
	     vstr = "valid";

001332  aa   776512 2370 04	ldaq 	-694,ic		000044 = 166141154151 144000000000
001333  aa  6 00444 7571 00	staq 	pr6|292		vstr
001334  aa   000005 2360 07	ldq  	5,dl
001335  aa  6 00443 7561 00	stq  	pr6|291		vstr
						STATEMENT 1 ON LINE 144
	     if stream.flags.read then vstr = vstr || ", read";

001336  aa  6 00426 3735 20	epp7 	pr6|278,*		streamp
001337  aa  7 00062 2351 00	lda  	pr7|50		stream.read
001340  aa   200000 3150 03	cana 	65536,du
001341  aa   000013 6000 04	tze  	11,ic		001354
001342  aa   000100 2360 07	ldq  	64,dl
001343  aa  6 00443 1761 00	sbq  	pr6|291		vstr
001344  aa   000006 1160 07	cmpq 	6,dl
001345  aa   000002 6040 04	tmi  	2,ic		001347
001346  aa   000006 2360 07	ldq  	6,dl
001347  aa  6 00443 7271 00	lxl7 	pr6|291		vstr
001350  aa  6 00443 0561 00	asq  	pr6|291		vstr
001351  aa  040 157 100 444	mlr  	(rl,ic),(pr,rl,x7),fill(040)
001352  aa   776465 00 0006	desc9a	-715,ql		000036 = 054040162145
001353  aa  6 00444 00 0006	desc9a	pr6|292,ql	vstr
						STATEMENT 1 ON LINE 145
	     if stream.flags.write then vstr = vstr || ", write";

001354  aa  7 00062 2351 00	lda  	pr7|50		stream.write
001355  aa   100000 3150 03	cana 	32768,du
001356  aa   000013 6000 04	tze  	11,ic		001371
001357  aa   000100 2360 07	ldq  	64,dl
001360  aa  6 00443 1761 00	sbq  	pr6|291		vstr
001361  aa   000007 1160 07	cmpq 	7,dl
001362  aa   000002 6040 04	tmi  	2,ic		001364
001363  aa   000007 2360 07	ldq  	7,dl
001364  aa  6 00443 7271 00	lxl7 	pr6|291		vstr
001365  aa  6 00443 0561 00	asq  	pr6|291		vstr
001366  aa  040 157 100 444	mlr  	(rl,ic),(pr,rl,x7),fill(040)
001367  aa   776446 00 0006	desc9a	-730,ql		000034 = 054040167162
001370  aa  6 00444 00 0006	desc9a	pr6|292,ql	vstr
						STATEMENT 1 ON LINE 146
	     if stream.flags.active then vstr = vstr || ", active";

001371  aa  7 00062 2351 00	lda  	pr7|50		stream.active
001372  aa   040000 3150 03	cana 	16384,du
001373  aa   000013 6000 04	tze  	11,ic		001406
001374  aa   000100 2360 07	ldq  	64,dl
001375  aa  6 00443 1761 00	sbq  	pr6|291		vstr
001376  aa   000010 1160 07	cmpq 	8,dl
001377  aa   000002 6040 04	tmi  	2,ic		001401
001400  aa   000010 2360 07	ldq  	8,dl
001401  aa  6 00443 7271 00	lxl7 	pr6|291		vstr
001402  aa  6 00443 0561 00	asq  	pr6|291		vstr
001403  aa  040 157 100 444	mlr  	(rl,ic),(pr,rl,x7),fill(040)
001404  aa   776427 00 0006	desc9a	-745,ql		000032 = 054040141143
001405  aa  6 00444 00 0006	desc9a	pr6|292,ql	vstr
						STATEMENT 1 ON LINE 147
	     call ioa_ ("^5xflags:^9x^a", vstr);

001406  aa   776465 2350 04	lda  	-715,ic		000073 = 136065170146
001407  aa   776465 2360 04	ldq  	-715,ic		000074 = 154141147163
001410  aa  6 00614 7571 00	staq 	pr6|396
001411  aa   776464 2350 04	lda  	-716,ic		000075 = 072136071170
001412  aa   136141 2360 03	ldq  	48225,du
001413  aa  6 00616 7571 00	staq 	pr6|398
001414  aa  6 00614 3521 00	epp2 	pr6|396
001415  aa  6 00624 2521 00	spri2	pr6|404
001416  aa  6 00444 3521 00	epp2 	pr6|292		vstr
001417  aa  6 00626 2521 00	spri2	pr6|406
001420  aa   776370 3520 04	epp2 	-776,ic		000010 = 524000000016
001421  aa  6 00630 2521 00	spri2	pr6|408
001422  aa   776360 3520 04	epp2 	-784,ic		000002 = 530000000100
001423  aa  6 00632 2521 00	spri2	pr6|410
001424  aa  6 00622 6211 00	eax1 	pr6|402
001425  aa   010000 4310 07	fld  	4096,dl
001426  aa  6 00044 3701 20	epp4 	pr6|36,*
001427  la  4 00016 3521 20	epp2 	pr4|14,*		ioa_
001430  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 148
	     call ioa_ ("^5xourmess:^7x^p", stream.ourmess);

001431  aa   776436 2350 04	lda  	-738,ic		000067 = 136065170157
001432  aa   776436 2360 04	ldq  	-738,ic		000070 = 165162155145
001433  aa  6 00614 7571 00	staq 	pr6|396
001434  aa   776435 2350 04	lda  	-739,ic		000071 = 163163072136
001435  aa   776435 2360 04	ldq  	-739,ic		000072 = 067170136160
001436  aa  6 00616 7571 00	staq 	pr6|398
001437  aa  6 00614 3521 00	epp2 	pr6|396
001440  aa  6 00624 2521 00	spri2	pr6|404
001441  aa  6 00426 3735 20	epp7 	pr6|278,*		streamp
001442  aa  7 00034 3521 00	epp2 	pr7|28		stream.ourmess
001443  aa  6 00626 2521 00	spri2	pr6|406
001444  aa   776353 3520 04	epp2 	-789,ic		000017 = 524000000020
001445  aa  6 00630 2521 00	spri2	pr6|408
001446  aa   776352 3520 04	epp2 	-790,ic		000020 = 464000000000
001447  aa  6 00632 2521 00	spri2	pr6|410
001450  aa  6 00622 6211 00	eax1 	pr6|402
001451  aa   010000 4310 07	fld  	4096,dl
001452  aa  6 00044 3701 20	epp4 	pr6|36,*
001453  la  4 00016 3521 20	epp2 	pr4|14,*		ioa_
001454  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 149
	     call ioa_ ("^5xhismess:^7x^p", stream.hismess);

001455  aa   776406 2350 04	lda  	-762,ic		000063 = 136065170150
001456  aa   776406 2360 04	ldq  	-762,ic		000064 = 151163155145
001457  aa  6 00614 7571 00	staq 	pr6|396
001460  aa   776405 2350 04	lda  	-763,ic		000065 = 163163072136
001461  aa   776405 2360 04	ldq  	-763,ic		000066 = 067170136160
001462  aa  6 00616 7571 00	staq 	pr6|398
001463  aa  6 00614 3521 00	epp2 	pr6|396
001464  aa  6 00624 2521 00	spri2	pr6|404
001465  aa  6 00426 3735 20	epp7 	pr6|278,*		streamp
001466  aa  7 00036 3521 00	epp2 	pr7|30		stream.hismess
001467  aa  6 00626 2521 00	spri2	pr6|406
001470  aa   776327 3520 04	epp2 	-809,ic		000017 = 524000000020
001471  aa  6 00630 2521 00	spri2	pr6|408
001472  aa   776326 3520 04	epp2 	-810,ic		000020 = 464000000000
001473  aa  6 00632 2521 00	spri2	pr6|410
001474  aa  6 00622 6211 00	eax1 	pr6|402
001475  aa   010000 4310 07	fld  	4096,dl
001476  aa  6 00044 3701 20	epp4 	pr6|36,*
001477  la  4 00016 3521 20	epp2 	pr4|14,*		ioa_
001500  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 150
	     call ioa_ ("^5xsource_index:^2x^d", stream.source_index);

001501  aa   776453 2370 04	ldaq 	-725,ic		000154 = 136065170163 157165162143
001502  aa  6 00622 7571 00	staq 	pr6|402
001503  aa   776453 2370 04	ldaq 	-725,ic		000156 = 145137151156 144145170072
001504  aa  6 00624 7571 00	staq 	pr6|404
001505  aa   776453 2370 04	ldaq 	-725,ic		000160 = 136062170136 144000000000
001506  aa  6 00626 7571 00	staq 	pr6|406
001507  aa  6 00622 3521 00	epp2 	pr6|402
001510  aa  6 00636 2521 00	spri2	pr6|414
001511  aa  6 00426 3735 20	epp7 	pr6|278,*		streamp
001512  aa  7 00060 3521 00	epp2 	pr7|48		stream.source_index
001513  aa  6 00640 2521 00	spri2	pr6|416
001514  aa   776265 3520 04	epp2 	-843,ic		000001 = 524000000025
001515  aa  6 00642 2521 00	spri2	pr6|418
001516  aa   776274 3520 04	epp2 	-836,ic		000012 = 404000000021
001517  aa  6 00644 2521 00	spri2	pr6|420
001520  aa  6 00634 6211 00	eax1 	pr6|412
001521  aa   010000 4310 07	fld  	4096,dl
001522  aa  6 00044 3701 20	epp4 	pr6|36,*
001523  la  4 00016 3521 20	epp2 	pr4|14,*		ioa_
001524  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 151
	     call ioa_ ("^5xstream_index:^2x^d", stream.stream_index);

001525  aa   776421 2370 04	ldaq 	-751,ic		000146 = 136065170163 164162145141
001526  aa  6 00634 7571 00	staq 	pr6|412
001527  aa   776421 2370 04	ldaq 	-751,ic		000150 = 155137151156 144145170072
001530  aa  6 00636 7571 00	staq 	pr6|414
001531  aa   776421 2370 04	ldaq 	-751,ic		000152 = 136062170136 144000000000
001532  aa  6 00640 7571 00	staq 	pr6|416
001533  aa  6 00634 3521 00	epp2 	pr6|412
001534  aa  6 00624 2521 00	spri2	pr6|404
001535  aa  6 00426 3735 20	epp7 	pr6|278,*		streamp
001536  aa  7 00061 3521 00	epp2 	pr7|49		stream.stream_index
001537  aa  6 00626 2521 00	spri2	pr6|406
001540  aa   776241 3520 04	epp2 	-863,ic		000001 = 524000000025
001541  aa  6 00630 2521 00	spri2	pr6|408
001542  aa   776250 3520 04	epp2 	-856,ic		000012 = 404000000021
001543  aa  6 00632 2521 00	spri2	pr6|410
001544  aa  6 00622 6211 00	eax1 	pr6|402
001545  aa   010000 4310 07	fld  	4096,dl
001546  aa  6 00044 3701 20	epp4 	pr6|36,*
001547  la  4 00016 3521 20	epp2 	pr4|14,*		ioa_
001550  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 152
	     call ioa_ ("^5xno_of_vcons:^3x^d^/", stream.no_of_vcons);

001551  aa   776367 2370 04	ldaq 	-777,ic		000140 = 136065170156 157137157146
001552  aa  6 00622 7571 00	staq 	pr6|402
001553  aa   776367 2370 04	ldaq 	-777,ic		000142 = 137166143157 156163072136
001554  aa  6 00624 7571 00	staq 	pr6|404
001555  aa   776367 2370 04	ldaq 	-777,ic		000144 = 063170136144 136057000000
001556  aa  6 00626 7571 00	staq 	pr6|406
001557  aa  6 00622 3521 00	epp2 	pr6|402
001560  aa  6 00636 2521 00	spri2	pr6|414
001561  aa  6 00426 3735 20	epp7 	pr6|278,*		streamp
001562  aa  7 00067 3521 00	epp2 	pr7|55		stream.no_of_vcons
001563  aa  6 00640 2521 00	spri2	pr6|416
001564  aa   776221 3520 04	epp2 	-879,ic		000005 = 524000000026
001565  aa  6 00642 2521 00	spri2	pr6|418
001566  aa   776224 3520 04	epp2 	-876,ic		000012 = 404000000021
001567  aa  6 00644 2521 00	spri2	pr6|420
001570  aa  6 00634 6211 00	eax1 	pr6|412
001571  aa   010000 4310 07	fld  	4096,dl
001572  aa  6 00044 3701 20	epp4 	pr6|36,*
001573  la  4 00016 3521 20	epp2 	pr4|14,*		ioa_
001574  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 153
	     do k = 1 to stream.no_of_vcons;

001575  aa  6 00426 3735 20	epp7 	pr6|278,*		streamp
001576  aa  7 00067 2361 00	ldq  	pr7|55		stream.no_of_vcons
001577  aa  6 00474 7561 00	stq  	pr6|316
001600  aa   000001 2360 07	ldq  	1,dl
001601  aa  6 00442 7561 00	stq  	pr6|290		k
001602  aa  6 00442 2361 00	ldq  	pr6|290		k
001603  aa  6 00474 1161 00	cmpq 	pr6|316
001604  aa   000070 6054 04	tpnz 	56,ic		001674
						STATEMENT 1 ON LINE 155
		if substr (stream.flags.alarm, k, 1) then vconst = "*" || stream.vcons (k);

001605  aa  6 00426 3735 20	epp7 	pr6|278,*		streamp
001606  aa  000 000 066 506	cmpb 	(pr,ql),(),fill(0)
001607  aa  7 00062 60 0001	descb	pr7|50(27),1	stream.alarm
001610  aa   000000 00 0000	descb	0,0
001611  aa   000020 6000 04	tze  	16,ic		001631
001612  aa   000003 7360 00	qls  	3
001613  aa   000000 6270 06	eax7 	0,ql
001614  aa   000041 2360 07	ldq  	33,dl
001615  aa  0 00551 7001 00	tsx0 	pr0|361		alloc_cs
001616  aa  040 100 100 404	mlr  	(ic),(pr),fill(040)
001617  aa   000064 00 0001	desc9a	52,1		001702 = 052000000000
001620  aa  2 00000 00 0001	desc9a	pr2|0,1
001621  aa  7 00060 3715 17	epp5 	pr7|48,7		stream.vcons
001622  aa  040 100 100 500	mlr  	(pr),(pr),fill(040)
001623  aa  5 00000 00 0040	desc9a	pr5|0,32		stream.vcons
001624  aa  2 00000 20 0040	desc9a	pr2|0(1),32
001625  aa  040 100 100 500	mlr  	(pr),(pr),fill(040)
001626  aa  2 00000 00 0041	desc9a	pr2|0,33
001627  aa  6 00400 00 0041	desc9a	pr6|256,33	vconst
001630  aa   000007 7100 04	tra  	7,ic		001637
						STATEMENT 1 ON LINE 156
		else vconst = stream.vcons (k);

001631  aa  0 01014 7001 00	tsx0 	pr0|524		shorten_stack
001632  aa   000003 7360 00	qls  	3
001633  aa  7 00060 3715 06	epp5 	pr7|48,ql		stream.vcons
001634  aa  040 100 100 500	mlr  	(pr),(pr),fill(040)
001635  aa  5 00000 00 0040	desc9a	pr5|0,32		stream.vcons
001636  aa  6 00400 00 0041	desc9a	pr6|256,33	vconst
						STATEMENT 1 ON LINE 157
		call ioa_ ("^10xvcons ^d:  ^3d ^a", k, stream.vcons_index (k), vconst);

001637  aa   776273 2370 04	ldaq 	-837,ic		000132 = 136061060170 166143157156
001640  aa  6 00634 7571 00	staq 	pr6|412
001641  aa   776273 2370 04	ldaq 	-837,ic		000134 = 163040136144 072040040136
001642  aa  6 00636 7571 00	staq 	pr6|414
001643  aa   776273 2370 04	ldaq 	-837,ic		000136 = 063144040136 141000000000
001644  aa  6 00640 7571 00	staq 	pr6|416
001645  aa  6 00634 3521 00	epp2 	pr6|412
001646  aa  6 00650 2521 00	spri2	pr6|424
001647  aa  6 00442 3521 00	epp2 	pr6|290		k
001650  aa  6 00652 2521 00	spri2	pr6|426
001651  aa  2 00000 7271 00	lxl7 	pr2|0		k
001652  aa  7 00167 3521 17	epp2 	pr7|119,7		stream.vcons_index
001653  aa  6 00654 2521 00	spri2	pr6|428
001654  aa  6 00400 3521 00	epp2 	pr6|256		vconst
001655  aa  6 00656 2521 00	spri2	pr6|430
001656  aa   776123 3520 04	epp2 	-941,ic		000001 = 524000000025
001657  aa  6 00660 2521 00	spri2	pr6|432
001660  aa   776132 3520 04	epp2 	-934,ic		000012 = 404000000021
001661  aa  6 00662 2521 00	spri2	pr6|434
001662  aa  6 00664 2521 00	spri2	pr6|436
001663  aa   776115 3520 04	epp2 	-947,ic		000000 = 524000000041
001664  aa  6 00666 2521 00	spri2	pr6|438
001665  aa  6 00646 6211 00	eax1 	pr6|422
001666  aa   020000 4310 07	fld  	8192,dl
001667  aa  6 00044 3701 20	epp4 	pr6|36,*
001670  la  4 00016 3521 20	epp2 	pr4|14,*		ioa_
001671  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 159
	     end;

001672  aa  6 00442 0541 00	aos  	pr6|290		k
001673  aa   777707 7100 04	tra  	-57,ic		001602
						STATEMENT 1 ON LINE 161
	end pstream;

001674  aa  6 00434 6101 00	rtcd 	pr6|284
  END PROCEDURE pstream
  END PROCEDURE dump_mrt


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
