	COMPILATION LISTING OF SEGMENT display_exp
	Compiled by: Multics PL/I Compiler, Release 27d, of October 11, 1982
	Compiled at: Honeywell LISD Phoenix, System M
	Compiled on: 11/15/82  1624.0 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 /*	prints expressions
       12*
       13*	Modified on:	22 September 1970 by P. Green for Version II
       14*	Modified on:	28 February 1978 by PCK for the stop operator
       15*	Modified on:	Dec 1978 by David Spector for cross_reference.set_reference bit
       16*	Modified on:	25 April 1979 by PCK to implement 4-bit decimal
       17*	Modified on:	17 May 1979 by RAB for reference.substr
       18*	Modified on:	6 June 1979 by PG for rank and byte
       19*	Modified 791017 by PG to print all info in a temporary node
       20*	Modified on:	29 November 1979 by PCK to print tree level indented output
       21*	Modified on:	26 Dec 1979 by PCK for by name assignment
       22*	Modified on:	23 March 1980 by RAB for reference.(padded aligned)_for_store_ref
       23* 	Modified on:	24 June 1980 by PCK to correctly indent list nodes
       24*	Modified on:	27 June 1980 by PCK to decode data type of reference node
       25*	Modified on:	11 September 1980 by M. N. Davidoff to print temporary node info instead of garbage
       26*	Modified on:	15 September 1980 by M. N. Davidoff to decode reference.address
       27**/
       28 /* format: style3 */
       29 display_exp:
       30      proc (a, tree_level);
       31 
       32 dcl	(a, p, q, s)	ptr,
       33 	tree_level	fixed bin,
       34 	display_stat_$brief_display
       35 			bit (1) ext static,
       36 	display_any_node_name
       37 			entry (char (*) aligned, ptr, fixed bin);
       38 dcl	(binary, substr, addr, fixed, string, length, null, hbound, baseno, rel)
       39 			builtin;
       40 dcl	decode_node_id	entry (ptr, bit (1) aligned) returns (char (120) varying),
       41 	display_list	entry (ptr, fixed bin),
       42 	display_constant	entry (ptr, fixed bin);
       43 dcl	ioa_		entry options (variable);
       44 dcl	ioa_$nnl		entry options (variable);
       45 dcl	(i, n)		fixed bin (15),
       46 	line		char (96),
       47 	lp		fixed bin;
       48 dcl	b36		bit (36) aligned,
       49 	m		fixed bin (18),
       50 	word_bit		bit (36) aligned based (p),
       51 	op_name		char (20) aligned,
       52 	op_number		bit (9) aligned,
       53 	1 op_number_structure
       54 			based (addr (op_number)) aligned,
       55 	  2 op_class	bit (5) unaligned,
       56 	  2 op_relative	bit (4) unaligned;
       57 
       58 /* include files */
       59 
  1     1 /* BEGIN INCLUDE FILE ... op_codes.incl.pl1 */
  1     2 
  1     3 /* Modified: 25 Apr 1979 by PCK 4-bit decimal */
  1     4 /* Modified: 6 Jun 1979 by PG to add rank and byte */
  1     5 /* Modified: 26 Dec 1979 by PCK to add assign_by_name */
  1     6 
  1     7 dcl (	add		initial("000010001"b),	/* opnd(1) <- opnd(2)+opnd(3)		*/
  1     8 	sub		initial("000010010"b),	/* opnd(1) <- opnd(2)-opnd(3)		*/
  1     9 	mult		initial("000010011"b),	/* opnd(1) <- opnd(2)*opnd(3)		*/
  1    10 	div		initial("000010100"b),	/* opnd(1) <- opnd(2)/opnd(3)		*/
  1    11 	negate		initial("000010101"b),	/* opnd(1) <- -opnd(2)  		*/
  1    12 	exp		initial("000010110"b),	/* opnd(1) <- opnd(2) ** opnd(3)	*/
  1    13 
  1    14 	and_bits		initial("000100001"b),	/* opnd(1) <- opnd(2) & opnd(3)	*/
  1    15 	or_bits		initial("000100010"b),	/* opnd(1) <- opnd(2)|opnd(3)		*/
  1    16 	xor_bits		initial("000100011"b),	/* opnd(1) <- opnd(2) xor opnd(3)	*/
  1    17 	not_bits		initial("000100100"b),	/* opnd(1) <- ^opnd(2)		*/
  1    18 	cat_string	initial("000100101"b),	/* opnd(1) <- opnd(2)||opnd(3)	*/
  1    19 	bool_fun		initial("000100110"b),	/* opnd(1) <- bool(opnd(2),opnd(3),opnd(4)) */
  1    20 
  1    21 	assign		initial("000110001"b),	/* opnd(1) <- opnd(2)		*/
  1    22 	assign_size_ck	initial("000110010"b),	/* opnd(1) <- opnd(2)		*/
  1    23 	assign_zero	initial("000110011"b),	/* opnd(1) <- 0			*/
  1    24 	copy_words	initial("000110100"b),	/* move opnd(2) to opnd(1) by opnd(3) words */
  1    25 	copy_string	initial("000110101"b),	/* move opnd(2) to opnd(1) by opnd(3) units */
  1    26 	make_desc		initial("000110110"b),	/* opnd(1) <- descriptor(opnd(2),opnd(3)) */
  1    27 	assign_round	initial("000110111"b),	/* opnd(1) <- opnd(2) rounded		*/
  1    28 	pack		initial("000111000"b),	/* opnd(1) <- encode to picture opnd(2) */
  1    29 	unpack		initial("000111001"b),	/* opnd(1) <- decode from picture opnd(2) */
  1    30 
  1    31 	less_than		initial("001000100"b),	/* opnd(1) <- opnd(2) < opnd(3)	*/
  1    32 	greater_than	initial("001000101"b),	/* opnd(1) <- opnd(2) > opnd(3)	*/
  1    33 	equal		initial("001000110"b),	/* opnd(1) <- opnd(2) = opnd(3)	*/
  1    34 	not_equal		initial("001000111"b),	/* opnd(1) <- opnd(2) ^= opnd(3)	*/
  1    35 	less_or_equal	initial("001001000"b),	/* opnd(1) <- opnd(2) <= opnd(3)	*/
  1    36 	greater_or_equal	initial("001001001"b),	/* opnd(1) <- opnd(2) >= opnd(3)	*/
  1    37 
  1    38 	jump		initial("001010001"b),	/* go to opnd(1) unconditionally	*/
  1    39 	jump_true		initial("001010010"b),	/* go to opnd(1) if opnd(2) is not 0	*/
  1    40 	jump_false	initial("001010011"b),	/* go to opnd(1) if opnd(2) is all 0	*/
  1    41 	jump_if_lt	initial("001010100"b),	/* go to opnd(1) if opnd(2) < opnd(3)	*/
  1    42 	jump_if_gt	initial("001010101"b),	/* go to opnd(1) if opnd(2) > opnd(3)	*/
  1    43 	jump_if_eq	initial("001010110"b),	/* go to opnd(1) if opnd(2) = opnd(3)	*/
  1    44 	jump_if_ne	initial("001010111"b),	/* go to opnd(1) if opnd(2) ^= opnd(3)	*/
  1    45 	jump_if_le	initial("001011000"b),	/* go to opnd(1) if opnd(2) <= opnd(3)	*/
  1    46 	jump_if_ge	initial("001011001"b),	/* go to opnd(1) if opnd(2) >= opnd(3)	*/
  1    47 
  1    48 	std_arg_list	initial("001100001"b),	/* opnd(1) <- arglist(opnd(2) desclist(opnd(3)))	*/
  1    49 	return_words	initial("001100010"b),	/* return aggregate opnd(1), opnd(2) is length in words */
  1    50 	std_call		initial("001100011"b),	/* opnd(1) <- call opnd(2) with opnd(3)		*/
  1    51 	return_bits	initial("001100100"b),	/* return aggregate opnd(1), opnd(2) is length in bits */
  1    52 	std_entry		initial("001100101"b),	/* entry(opnd(1)... opnd(n))			*/
  1    53 	return_string	initial("001100110"b),	/* return string opnd(1) */
  1    54 	ex_prologue	initial("001100111"b),	/* execute the prologue -no operands-		*/
  1    55 	allot_auto	initial("001101000"b),	/* opnd(1) <- addrel(stack,opnd(2))		*/
  1    56 	param_ptr		initial("001101001"b),	/* opnd(1) <- ptr to opnd(2) in  block opnd(3)	*/
  1    57 	param_desc_ptr	initial("001101010"b),	/* opnd(1) <- ptr to opnd(2) in block opnd(3)	*/
  1    58 	std_return	initial("001101011"b),	/* return -no arguments-			*/
  1    59 	allot_ctl		initial("001101100"b),	/* allocate opnd(1) , length in words is opnd(2) 	*/
  1    60 	free_ctl		initial("001101101"b),	/* free opnd(1)				*/
  1    61 	stop		initial("001101110"b),	/* stop - terminate run unit			*/
  1    62 
  1    63 	mod_bit		initial("001110000"b),	/* opnd(1) <- mod(opnd(3),36),
  1    64*						   opnd(2) <- opnd(3) / 36		*/
  1    65 	mod_byte		initial("001110001"b),	/* opnd(1) <- mod(opnd(3),4),
  1    66*						   opnd(2) <- opnd(3) / 4		*/
  1    67 	mod_half		initial("001110010"b),	/* opnd(1) <- mod(opnd(3),2),
  1    68*						   opnd(2) <- opnd(3) / 2		*/
  1    69 	mod_word		initial("001110011"b),	/* TO BE DEFINED BY BLW			*/
  1    70 
  1    71 	bit_to_char	initial("010000000"b),	/* opnd(1) <- (opnd(2)+8)/9		*/
  1    72 	bit_to_word	initial("010000001"b),	/* opnd(1) <- (opnd(2)+35)/36		*/
  1    73 	char_to_word	initial("010000010"b),	/* opnd(1) <- (opnd(2)+3)/4		*/
  1    74 	half_to_word	initial("010000011"b),	/* opnd(1) <- (opnd(2)+1)/2		*/
  1    75 	word_to_mod2	initial("010000100"b),	/* opnd(1) <- (opnd(2)+1)/2*2		*/
  1    76 	word_to_mod4	initial("010000101"b),	/* opnd(1) <- (opnd(2)+3)/4*4		*/
  1    77 	word_to_mod8	initial("010000110"b),	/* opnd(1) <- (opnd(2)+7)/8*8		*/
  1    78 	rel_fun		initial("010000111"b),	/* opnd(1) <- rel(opnd(2))		*/
  1    79 	baseno_fun	initial("010001000"b),	/* opnd(1) <- baseno(opnd(2))		*/
  1    80 	desc_size		initial("010001001"b),	/* opnd(1) <- substr(opnd(2),13,24)	*/
  1    81 	bit_pointer	initial("010001010"b),	/* opnd(1) <- bit offset of opnd(2)	*/
  1    82 	index_before_fun	initial("010001011"b),	/* opnd(1) <- length of before(opnd(2),opnd(3)) */
  1    83 	index_after_fun	initial("010001100"b),	/* opnd(1) <- offset of after(opnd(2),opnd(3)) in opnd(2) */
  1    84 	verify_ltrim_fun	initial("010001101"b),	/* opnd(1) <- offset of ltrim(opnd(2),opnd(3)) in opnd(2) */
  1    85 	verify_rtrim_fun	initial("010001110"b),	/* opnd(1) <- length(opnd(2))-length(rtrim(opnd(2),opnd(3))) */
  1    86 	digit_to_bit	initial("010001111"b),	/* opnd(1) <- 9*opnd(2)/2		*/
  1    87 
  1    88 	ceil_fun		initial("010010000"b),	/* opnd(1) <- ceil(opnd(2))		*/
  1    89 	floor_fun		initial("010010001"b),	/* opnd(1) <- floor(opnd(2))		*/
  1    90 	round_fun		initial("010010010"b),	/* opnd(1) <- round(opnd(2))		*/
  1    91 	sign_fun		initial("010010011"b),	/* opnd(1) <- sign(opnd(2))		*/
  1    92 	abs_fun		initial("010010100"b),	/* opnd(1) <- abs(opnd(2))		*/
  1    93 	trunc_fun		initial("010010101"b),	/* opnd(1) <- trunc(opnd(2))		*/
  1    94 	byte_fun		initial("010010110"b),	/* opnd(1) <- byte(opnd(2))		*/
  1    95 	rank_fun		initial("010010111"b),	/* opnd(1) <- rank(opnd(2))		*/
  1    96 	index_rev_fun	initial("010011000"b),	/* opnd(1) <- index(reverse(opnd(2)),reverse(opnd(3))) */
  1    97 	search_rev_fun	initial("010011001"b),	/* opnd(1) <- search(reverse(opnd(2)),opnd(3)) */
  1    98 	verify_rev_fun	initial("010011010"b),	/* opnd(1) <- verify(reverse(opnd(2)),opnd(3)) */
  1    99 
  1   100 	index_fun		initial("010100000"b),	/* opnd(1) <- index(opnd(2),opnd(3))	*/
  1   101 	off_fun		initial("010100001"b),	/* opnd(1) <- offset(opnd(2),opnd(3))	*/
  1   102 	complex_fun	initial("010100010"b),	/* opnd(1) <- complex(opnd(2),opnd(3))	*/
  1   103 	conjg_fun		initial("010100011"b),	/* opnd(1) <- conjg(opnd(2),opnd(3))	*/
  1   104 	mod_fun		initial("010100100"b),	/* opnd(1) <- mod(opnd(2),opnd(3))	*/
  1   105 	repeat_fun	initial("010100101"b),	/* opnd(1) <- repeat(opnd(2),opnd(3))	*/
  1   106 	verify_fun	initial("010100110"b),	/* opnd(1) <- verify(opnd(2),opnd(3))	*/
  1   107 	translate_fun	initial("010100111"b),	/* opnd(1) <- translate(opnd(2),opnd(3))*/
  1   108 	real_fun   	initial("010101001"b),	/* opnd(1) <- real(opnd(2))		*/
  1   109 	imag_fun   	initial("010101010"b),	/* opnd(1) <- imag(opnd(2))		*/
  1   110 	length_fun	initial("010101011"b),	/* opnd(1) <- length(opnd(2))	*/
  1   111 	pl1_mod_fun	initial("010101100"b),	/* opnd(1) <- mod(opnd(2)) */
  1   112 	search_fun	initial("010101101"b),	/* opnd(1) <- search(opnd(2),opnd(3)) */
  1   113 	allocation_fun	initial("010101110"b),	/* opnd(1) <- allocation(opnd(2)) */
  1   114 	reverse_fun	initial("010101111"b),	/* opnd(1) <- reverse(opnd(2)) */
  1   115 
  1   116 	addr_fun		initial("010110000"b),	/* opnd(1) <- addr(opnd(2))		*/
  1   117 	addr_fun_bits	initial("010110001"b),	/* opnd(1) <- addr(opnd(2))		*/
  1   118 	ptr_fun		initial("010110010"b),	/* opnd(1) <- ptr(opnd(2),opnd(3))	*/
  1   119 	baseptr_fun	initial("010110011"b),	/* opnd(1) <- baseptr(opnd(2))	*/
  1   120 	addrel_fun	initial("010110100"b),	/* opnd(1) <- addrel(opnd(2),opnd(3))	*/
  1   121 	codeptr_fun	initial("010110101"b),	/* opnd(1) <- codeptr(opnd(2))	*/
  1   122 	environmentptr_fun	initial("010110110"b),	/* opnd(1) <- environmentptr(opnd(2))	*/
  1   123 	stackbaseptr_fun	initial("010110111"b),	/* opnd(1) is ptr to base of current stack	*/
  1   124 	stackframeptr_fun	initial("010111000"b),	/* opnd(1) is ptr to current block's stack frame	*/
  1   125 
  1   126 	min_fun		initial("011000000"b),	/* opnd(1) <- min(opnd(1),opnd(2),...)	*/
  1   127 	max_fun		initial("011000001"b),	/* opnd(1) <- max(opnd(1),opnd(2),...)	*/
  1   128 
  1   129 	stack_ptr		initial("011010001"b),	/* opnd(1) <- stack frame ptr		*/
  1   130 	empty_area	initial("011010010"b),	/* empty opnd(1), length in words is opnd(2) */
  1   131 	enable_on		initial("011010100"b),	/* opnd(1) is the cond name
  1   132*						   opnd(2) is the file name
  1   133*						   opnd(3) is the block	*/
  1   134 	revert_on		initial("011010101"b),	/* opnd(1) is the cond name,
  1   135*						   opnd(2) is the file name	*/
  1   136 	signal_on		initial("011010110"b),	/* opnd(1) is the cond name
  1   137*						   opnd(2) is the file name */
  1   138 
  1   139 	lock_fun		initial("011010111"b),	/* opnd(1) <- stac(opnd(2),opnd(3))	*/
  1   140 	stacq_fun		initial("011011000"b),	/* opnd(1) is result, opnd(2) is ptr to lock word,
  1   141*						   opnd(3) is old value, (4) is new value. */
  1   142 	clock_fun		initial("011011001"b),	/* opnd(1) is the clock time		*/
  1   143 	vclock_fun	initial("011011010"b),	/* opnd(1) is the virtual clock time	*/
  1   144 
  1   145 	bound_ck		initial("011100000"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
  1   146 	range_ck		initial("011100001"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
  1   147 	loop		initial("011100010"b),	/* do opnd(1) for opnd(2) from opnd(3) to opnd(4) by 1,
  1   148*						   opnd(5) is the list */
  1   149 	join		initial("011100011"b),	/* do opnd(1), opnd(2) ... opnd(n)	*/
  1   150 	allot_based	initial("011100100"b),	/* allocate opnd(2) words in opnd(3), set opnd(1) */
  1   151 	free_based	initial("011100101"b),	/* free opnd(1) in opnd(3), length is opnd(2) words */
  1   152 
  1   153 	r_parn		initial("011110001"b),	/* format op code			*/
  1   154 	l_parn		initial("011110010"b),
  1   155 	r_format		initial("011110011"b),
  1   156 	c_format		initial("011110100"b),
  1   157 	f_format		initial("011110101"b),
  1   158 	e_format		initial("011110110"b),
  1   159 	b_format		initial("011110111"b),
  1   160 	a_format		initial("011111000"b),
  1   161 	x_format		initial("011111001"b),
  1   162 	skip_format	initial("011111010"b),
  1   163 	column_format	initial("011111011"b),
  1   164 	page_format	initial("011111100"b),
  1   165 	line_format	initial("011111101"b),
  1   166 	picture_format	initial("011111110"b),
  1   167 	bn_format		initial("011111111"b),	/* bit format, length(opnd(2)), radix factor(opnd(3)) */
  1   168 
  1   169 	get_list_trans	initial("100000000"b),	/* getlist(opnd(2) with desc(opnd(1)))	*/
  1   170 	get_edit_trans	initial("100000001"b),	/* getedit(opnd(2) with desc(opnd(1)))	*/
  1   171 	get_data_trans	initial("100000010"b),	/* getdata(opnd(1) to opnd(n))	*/
  1   172 	put_list_trans	initial("100000011"b),	/* putlist(opnd(2) with desc(opnd(1)))	*/
  1   173 	put_edit_trans	initial("100000100"b),	/* putedit(opnd(2) with desc(opnd(1)))	*/
  1   174 	put_data_trans	initial("100000101"b),	/* putdata(opnd(2)) with subscript-list opnd(1) */
  1   175 	terminate_trans	initial("100000110"b),	/* terminate stream transmission	*/
  1   176 	stream_prep	initial("100000111"b),	/* initiate stream transmission	*/
  1   177 	record_io		initial("100001000"b),	/* perform record io operation	*/
  1   178 	fortran_read	initial("100001001"b),	/* A complete read statement		*/
  1   179 	fortran_write	initial("100001010"b),	/* A complete write statement		*/
  1   180 	ftn_file_manip	initial("100001011"b),	/* endfile,backspace,rewind,etc.	*/
  1   181 	ftn_trans_loop	initial("100001100"b),	/* An implied do in i/o list		*/
  1   182 	put_control	initial("100001101"b),	/* put control opnd(1) opnd(2) times	*/
  1   183 	put_field		initial("100001110"b),	/* putlist(opnd(2)) of length(opnd(1))	*/
  1   184 	put_field_chk	initial("100001111"b),	/* putlist(op(2)) of len(op(1)) check char index(op(3)) */
  1   185 
  1   186 /* These operators are produced by the parse but are not used as input to the code generator.	*/
  1   187 /* They are processed by the semantic translator.						*/
  1   188 
  1   189 	return_value	initial("100010010"b),	/* return(opnd(1))			*/
  1   190 	allot_var		initial("100010011"b),	/* allot opnd(1) in opnd(2)		*/
  1   191 	free_var		initial("100010100"b),	/* free opnd(1) out of opnd(2)	*/
  1   192 	get_file		initial("100010101"b),	/* opnd(1) is filename,opnd(2) is copy	*/
  1   193 						/* opnd(3) is skip, opnd(4) is list	*/
  1   194 	get_string	initial("100010110"b),	/* opnd(1) is string,opnd(2) is list	*/
  1   195 	put_file		initial("100010111"b),	/* opnd(1) is filename,opnd(2) is page	*/
  1   196 						/* opnd(3) is skip,opnd(4) is line	*/
  1   197 	put_string	initial("100011000"b),	/* opnd(1) is string,opnd(2) is list	*/
  1   198 	open_file		initial("100011001"b),
  1   199 	close_file	initial("100011010"b),
  1   200 	read_file		initial("100011011"b),
  1   201 	write_file	initial("100011100"b),
  1   202 	locate_file	initial("100011101"b),
  1   203 	do_fun		initial("100011110"b),	/* opnd(1) is join of a list		*/
  1   204 						/* opnd(2) is control variable ref	*/
  1   205 						/* opnd(3) is specification operator	*/
  1   206 	do_spec		initial("100011111"b),	/* opnd(1) to opnd(2) by opnd(3) 	*/
  1   207 						/* repeat opnd(4) while opnd(5)	*/
  1   208 						/* opnd(6) is next specification	*/
  1   209 
  1   210 	rewrite_file	initial("100100000"b),
  1   211 	delete_file	initial("100100001"b),
  1   212 	unlock_file	initial("100100010"b),
  1   213 	lock_file		initial("100100011"b),
  1   214 	refer		initial("100100101"b),	/* opnd(1) refer(opnd(2))		*/
  1   215 	prefix_plus	initial("100100110"b),	/* opnd(1) <- +opnd(2)		*/
  1   216 	nop		initial("100100111"b),	/* no-op */
  1   217 	assign_by_name	initial("100101000"b),	/* opnd(1) <- opnd(2),by name		*/
  1   218 
  1   219 /* These operators are produced by the semantic translator in processing the math
  1   220*   builtin functions and are used as input to the code generator			*/
  1   221 
  1   222 	sqrt_fun		initial("100110000"b),	/* opnd(1) <- sqrt(opnd(2))	*/
  1   223 	sin_fun		initial("100110001"b),	/* opnd(1) <- sin(opnd(2))	*/
  1   224 	sind_fun		initial("100110010"b),	/* opnd(1) <- sind(opnd(2))	*/
  1   225 	cos_fun		initial("100110011"b),	/* opnd(1) <- cos(opnd(2))	*/
  1   226 	cosd_fun		initial("100110100"b),	/* opnd(1) <- cosd(opnd(2))	*/
  1   227 	tan_fun		initial("100110101"b),	/* opnd(1) <- tan(opnd(2))	*/
  1   228 	tand_fun		initial("100110110"b),	/* opnd(1) <- tand(opnd(2))	*/
  1   229 	asin_fun		initial("100110111"b),	/* opnd(1) <- asin(opnd(2))	*/
  1   230 	asind_fun		initial("100111000"b),	/* opnd(1) <- asind(opnd(2))	*/
  1   231 	acos_fun		initial("100111001"b),	/* opnd(1) <- acos(opnd(2))	*/
  1   232 	acosd_fun		initial("100111010"b),	/* opnd(1) <- acosd(opnd(2))	*/
  1   233 	atan_fun		initial("100111011"b),	/* opnd(1) <- atan(opnd(2)[,opnd(3)])	*/
  1   234 	atand_fun		initial("100111100"b),	/* opnd(1) <- atand(opnd(2)[,opnd(3)])	*/
  1   235 	log2_fun		initial("100111101"b),	/* opnd(1) <- log2(opnd(2))	*/
  1   236 	log_fun		initial("100111110"b),	/* opnd(1) <- log(opnd(2))	*/
  1   237 	log10_fun		initial("100111111"b),	/* opnd(1) <- log10(opnd(2))	*/
  1   238 
  1   239 	exp_fun		initial("101000000"b))	/* opnd(1) <- exp(opnd(2))	*/
  1   240 
  1   241 			bit(9) aligned internal static options(constant);
  1   242 
  1   243 /* END INCLUDE FILE ... op_codes.incl.pl1 */
       60 
  2     1 /* BEGIN INCLUDE FILE ... cross_reference.incl.pl1 */
  2     2 
  2     3 dcl	1 cross_reference		based aligned,
  2     4 	2 node_type		bit(9) unaligned,
  2     5 	2 source_id		structure unaligned,
  2     6 	  3 file_number		bit(8),
  2     7 	  3 line_number		bit(14),
  2     8 	  3 statement_number	bit(5),
  2     9 	2 next			ptr unaligned,
  2    10 	2 ref_type		structure unaligned,
  2    11 	  3 set_reference		bit(1),
  2    12 	  3 pad			bit(35);
  2    13 
  2    14 /* END INCLUDE FILE ... cross_reference.incl.pl1 */
       61 
  3     1 dcl	1 label			based aligned,
  3     2 	2 node_type		bit(9) unaligned,
  3     3 	2 source_id		structure unaligned,
  3     4 	  3 file_number		bit(8),
  3     5 	  3 line_number		bit(14),
  3     6 	  3 statement_number	bit(5),
  3     7 	2 location		fixed(17) unaligned,
  3     8 	2 allocated		bit(1) unaligned,
  3     9 	2 dcl_type		bit(3) unaligned,
  3    10 	2 reserved		bit(29) unaligned,
  3    11 	2 array			bit(1) unaligned,
  3    12 	2 used_as_format		bit(1) unaligned,
  3    13 	2 used_in_goto		bit(1) unaligned,
  3    14 	2 symbol_table		bit(18) unaligned,
  3    15 	2 low_bound		fixed(17) unaligned,
  3    16 	2 high_bound		fixed(17) unaligned,
  3    17 	2 block_node		ptr unaligned,
  3    18 	2 token			ptr unaligned,
  3    19 	2 next			ptr unaligned,
  3    20 	2 multi_use		ptr unaligned,
  3    21 	2 cross_reference		ptr unaligned,
  3    22 	2 statement		ptr unaligned;
       62 
  4     1 /* BEGIN INCLUDE FILE ... nodes.incl.pl1 */
  4     2 
  4     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
  4     4 
  4     5 dcl (	block_node		initial("000000001"b),
  4     6 	statement_node		initial("000000010"b),
  4     7 	operator_node		initial("000000011"b),
  4     8 	reference_node		initial("000000100"b),
  4     9 	token_node		initial("000000101"b),
  4    10 	symbol_node		initial("000000110"b),
  4    11 	context_node		initial("000000111"b),
  4    12 	array_node		initial("000001000"b),
  4    13 	bound_node		initial("000001001"b),
  4    14 	format_value_node		initial("000001010"b),
  4    15 	list_node			initial("000001011"b),
  4    16 	default_node		initial("000001100"b),
  4    17 	machine_state_node		initial("000001101"b),
  4    18 	source_node		initial("000001110"b),
  4    19 	label_node		initial("000001111"b),
  4    20 	cross_reference_node	initial("000010000"b),
  4    21 	sf_par_node		initial("000010001"b),
  4    22 	temporary_node		initial("000010010"b),
  4    23 	label_array_element_node	initial("000010011"b),
  4    24 	by_name_agg_node		initial("000010100"b))
  4    25 				bit(9) internal static aligned options(constant);
  4    26 
  4    27 dcl	1 node			based aligned,
  4    28 	2 type			unal bit(9),
  4    29 	2 source_id		unal structure,
  4    30 	  3 file_number		bit(8),
  4    31 	  3 line_number		bit(14),
  4    32 	  3 statement_number	bit(5);
  4    33 
  4    34 /* END INCLUDE FILE ... nodes.incl.pl1 */
       63 
  5     1 /* BEGIN INCLUDE FILE ... symbol.incl.pl1 */
  5     2 
  5     3 dcl	1 symbol			based aligned,
  5     4 	2 node_type		bit(9) unal,
  5     5 	2 source_id		structure unal,
  5     6 	  3 file_number		bit(8),
  5     7 	  3 line_number		bit(14),
  5     8 	  3 statement_number	bit(5),
  5     9 	2 location		fixed(18) unal unsigned,
  5    10 	2 allocated		bit(1) unal,
  5    11 	2 dcl_type		bit(3) unal,
  5    12 	2 reserved		bit(6) unal,
  5    13 	2 pix			unal,
  5    14 	  3 pic_fixed		bit(1) unal,
  5    15 	  3 pic_float		bit(1) unal,
  5    16 	  3 pic_char		bit(1) unal,
  5    17 	  3 pic_scale		fixed(7) unal,
  5    18 	  3 pic_size		fixed(7) unal,
  5    19 	2 level			fixed(8) unal,
  5    20 	2 boundary		fixed(3) unal,
  5    21 	2 size_units		fixed(3) unal,
  5    22 	2 scale			fixed(7) unal,
  5    23 	2 runtime			bit(18) unal,
  5    24 	2 runtime_offset		bit(18) unal,
  5    25 	2 block_node		ptr unal,
  5    26 	2 token			ptr unal,
  5    27 	2 next			ptr unal,
  5    28 	2 multi_use		ptr unal,
  5    29 	2 cross_references		ptr unal,
  5    30 	2 initial			ptr unal,
  5    31 	2 array			ptr unal,
  5    32 	2 descriptor		ptr unal,
  5    33 	2 equivalence		ptr unal,
  5    34 	2 reference		ptr unal,
  5    35 	2 general			ptr unal,
  5    36 	2 father			ptr unal,
  5    37 	2 brother			ptr unal,
  5    38 	2 son			ptr unal,
  5    39 	2 word_size		ptr unal,
  5    40 	2 bit_size		ptr unal,
  5    41 	2 dcl_size		ptr unal,
  5    42 	2 symtab_size		ptr unal,
  5    43 	2 c_word_size		fixed(24),
  5    44 	2 c_bit_size		fixed(24),
  5    45 	2 c_dcl_size		fixed(24),
  5    46 
  5    47 	2 attributes		structure aligned,
  5    48 	  3 data_type		structure unal,
  5    49 	    4 structure		bit(1) ,
  5    50 	    4 fixed		bit(1),
  5    51 	    4 float		bit(1),
  5    52 	    4 bit			bit(1),
  5    53 	    4 char		bit(1),
  5    54 	    4 ptr			bit(1),
  5    55 	    4 offset		bit(1),
  5    56 	    4 area		bit(1),
  5    57 	    4 label		bit(1),
  5    58 	    4 entry		bit(1),
  5    59 	    4 file		bit(1),
  5    60 	    4 arg_descriptor	bit(1),
  5    61 	    4 storage_block		bit(1),
  5    62 	    4 unused_1		bit(1),
  5    63 	    4 condition		bit(1),
  5    64 	    4 format		bit(1),
  5    65 	    4 builtin		bit(1),
  5    66 	    4 generic		bit(1),
  5    67 	    4 picture		bit(1),
  5    68 
  5    69 	  3 misc_attributes		structure unal,
  5    70 	    4 dimensioned		bit(1),
  5    71 	    4 initialed		bit(1),
  5    72 	    4 aligned		bit(1),
  5    73 	    4 unaligned		bit(1),
  5    74 	    4 signed		bit(1),
  5    75 	    4 unsigned		bit(1),
  5    76 	    4 precision		bit(1),
  5    77 	    4 varying		bit(1),
  5    78 	    4 local		bit(1),
  5    79 	    4 decimal		bit(1),
  5    80 	    4 binary		bit(1),
  5    81 	    4 real		bit(1),
  5    82 	    4 complex		bit(1),
  5    83 	    4 variable		bit(1),
  5    84 	    4 reducible		bit(1),
  5    85 	    4 irreducible		bit(1),
  5    86 	    4 returns		bit(1),
  5    87 	    4 position		bit(1),
  5    88 	    4 internal		bit(1),
  5    89 	    4 external		bit(1),
  5    90 	    4 like		bit(1),
  5    91 	    4 member		bit(1),
  5    92 	    4 non_varying		bit(1),
  5    93 	    4 options		bit(1),
  5    94 	    4 variable_arg_list 	bit(1),		/* options(variable) */
  5    95 	    4 alloc_in_text		bit(1),		/* options(constant) */
  5    96 
  5    97 	  3 storage_class		structure unal,
  5    98 	    4 auto		bit(1),
  5    99 	    4 based		bit(1),
  5   100 	    4 static		bit(1),
  5   101 	    4 controlled		bit(1),
  5   102 	    4 defined		bit(1),
  5   103 	    4 parameter		bit(1),
  5   104 	    4 param_desc		bit(1),
  5   105 	    4 constant		bit(1),
  5   106 	    4 temporary		bit(1),
  5   107 	    4 return_value		bit(1),
  5   108 
  5   109 	  3 file_attributes		structure unal,
  5   110 	    4 print		bit(1),
  5   111 	    4 input		bit(1),
  5   112 	    4 output		bit(1),
  5   113 	    4 update		bit(1),
  5   114 	    4 stream		bit(1),
  5   115 	    4 reserved_1		bit(1),
  5   116 	    4 record		bit(1),
  5   117 	    4 sequential		bit(1),
  5   118 	    4 direct		bit(1),
  5   119 	    4 interactive		bit(1),		/* env(interactive) */
  5   120 	    4 reserved_2		bit(1),
  5   121 	    4 reserved_3		bit(1),
  5   122 	    4 stringvalue		bit(1),		/* env(stringvalue) */
  5   123 	    4 keyed		bit(1),
  5   124 	    4 reserved_4		bit(1),
  5   125 	    4 environment		bit(1),
  5   126 
  5   127 	  3 compiler_developed	structure unal,
  5   128 	    4 aliasable		bit(1),
  5   129 	    4 packed		bit(1),
  5   130 	    4 passed_as_arg		bit(1),
  5   131 	    4 allocate		bit(1),
  5   132 	    4 set			bit(1),
  5   133 	    4 exp_extents		bit(1),
  5   134 	    4 refer_extents		bit(1),
  5   135 	    4 star_extents		bit(1),
  5   136 	    4 isub		bit(1),
  5   137 	    4 put_in_symtab		bit(1),
  5   138 	    4 contiguous		bit(1),
  5   139 	    4 put_data		bit(1),
  5   140 	    4 overlayed		bit(1),
  5   141 	    4 error		bit(1),
  5   142 	    4 symtab_processed	bit(1),
  5   143 	    4 overlayed_by_builtin	bit(1),
  5   144 	    4 defaulted		bit(1),
  5   145 	    4 connected		bit(1);
  5   146 
  5   147 /* END INCLUDE FILE ... symbol.incl.pl1 */
       64 
  6     1 /* BEGIN INCLUDE FILE ... operator.incl.pl1 */
  6     2 
  6     3 /*	Modified: 2 Apr 1980 by PCK to add max_number_of_operands */
  6     4 
  6     5 /* format: style3 */
  6     6 dcl	1 operator	based aligned,
  6     7 	  2 node_type	bit (9) unaligned,
  6     8 	  2 op_code	bit (9) unaligned,
  6     9 	  2 shared	bit (1) unaligned,
  6    10 	  2 processed	bit (1) unaligned,
  6    11 	  2 optimized	bit (1) unaligned,
  6    12 	  2 number	fixed (14) unaligned,
  6    13 	  2 operand	dimension (n refer (operator.number)) ptr unaligned;
  6    14 
  6    15 dcl	max_number_of_operands
  6    16 			fixed bin (15) int static options (constant) initial (32767);
  6    17 
  6    18 /* END INCLUDE FILE ... operator.incl.pl1 */
       65 
  7     1 /* BEGIN INCLUDE FILE ... temporary.incl.pl1 */
  7     2 
  7     3 dcl	1 temporary	based,
  7     4 	2 node_type	bit(9),	/* type is "000001010"b */
  7     5 	2 size		fixed bin(18),
  7     6 	2 next		ptr,
  7     7 	2 location	fixed bin(18),
  7     8 	2 ref_count	fixed bin,
  7     9 	2 symbol		ptr unal,
  7    10 	2 last_freed	fixed bin(18);
  7    11 
  7    12 /* END INCLUDE FILE ... temporary.incl.pl1 */
       66 
  8     1 /* BEGIN INCLUDE FILE ... token.incl.pl1 */
  8     2 
  8     3 dcl	1 token			based aligned,
  8     4 	2 node_type		bit(9) unaligned,
  8     5 	2 type			bit(9) unaligned,
  8     6 	2 loc			bit(18) unaligned,	/* symtab offset for identifiers, "p" flag for constants */
  8     7 	2 declaration		ptr unaligned,
  8     8 	2 next			ptr unaligned,
  8     9 	2 size			fixed(9),
  8    10 	2 string			char(n refer(token.size));
  8    11 
  8    12 /* END INCLUDE FILE ... token.incl.pl1 */
       67 
  9     1 /* BEGIN INCLUDE FILE ... token_types.incl.pl1 */
  9     2 
  9     3 dcl (	no_token		initial("000000000"b),	/*	token types		*/
  9     4 	identifier	initial("100000000"b),
  9     5 	isub		initial("010000000"b),
  9     6 	plus		initial("001000001"b),
  9     7 	minus		initial("001000010"b),
  9     8 	asterisk		initial("001000011"b),
  9     9 	slash		initial("001000100"b),
  9    10 	expon		initial("001000101"b),
  9    11 	not		initial("001000110"b),
  9    12 	and		initial("001000111"b),
  9    13 	or		initial("001001000"b),
  9    14 	cat		initial("001001001"b),
  9    15 	eq		initial("001001010"b),
  9    16 	ne		initial("001001011"b),
  9    17 	lt		initial("001001100"b),
  9    18 	gt		initial("001001101"b),
  9    19 	le		initial("001001110"b),
  9    20 	ge		initial("001001111"b),
  9    21 	ngt		initial("001010000"b),
  9    22 	nlt		initial("001010001"b),
  9    23 	assignment	initial("001010010"b),
  9    24 	colon		initial("001010011"b),
  9    25 	semi_colon	initial("001010100"b),
  9    26 	comma		initial("001010101"b),
  9    27 	period		initial("001010110"b),
  9    28 	arrow		initial("001010111"b),
  9    29 	left_parn		initial("001011000"b),
  9    30 	right_parn	initial("001011001"b),
  9    31 	percent		initial("001011100"b),
  9    32 	bit_string	initial("000100001"b),
  9    33 	char_string	initial("000100010"b),
  9    34 	bin_integer	initial("000110001"b),
  9    35 	dec_integer	initial("000110011"b),
  9    36 	fixed_bin		initial("000110000"b),
  9    37 	fixed_dec		initial("000110010"b),
  9    38 	float_bin		initial("000110100"b),
  9    39 	float_dec		initial("000110110"b),
  9    40 	i_bin_integer	initial("000111001"b),
  9    41 	i_dec_integer	initial("000111011"b),
  9    42 	i_fixed_bin	initial("000111000"b),
  9    43 	i_fixed_dec	initial("000111010"b),
  9    44 	i_float_bin	initial("000111100"b),
  9    45 	i_float_dec	initial("000111110"b)) bit (9) aligned internal static options (constant);
  9    46 
  9    47 dcl (	is_identifier		initial ("100000000"b),	/*	token type masks		*/
  9    48 	is_isub			initial ("010000000"b),
  9    49 	is_delimiter		initial ("001000000"b),
  9    50 	is_constant		initial ("000100000"b),
  9    51 	is_arith_constant		initial ("000010000"b),	/* N.B. not really a mask...s/b "000110000"b */
  9    52 	is_arithmetic_constant	initial ("000110000"b),
  9    53 	is_imaginary_constant	initial ("000111000"b),
  9    54 	is_float_constant		initial ("000110100"b),
  9    55 	is_decimal_constant		initial ("000110010"b),
  9    56 	is_integral_constant 	initial ("000110001"b)
  9    57 	) bit(9) internal static aligned options(constant);
  9    58 
  9    59 /* END INCLUDE FILE ... token_types.incl.pl1 */
       68 
 10     1 /* BEGIN INCLUDE FILE ... reference.incl.pl1 */
 10     2 
 10     3 dcl	1 reference		based aligned,
 10     4 	2 node_type		bit(9) unaligned,
 10     5 	2 array_ref		bit(1) unaligned,
 10     6 	2 varying_ref		bit(1) unaligned,
 10     7 	2 shared			bit(1) unaligned,
 10     8 	2 put_data_sw		bit(1) unaligned,
 10     9 	2 processed		bit(1) unaligned,
 10    10 	2 units			fixed(3) unaligned,
 10    11 	2 ref_count		fixed(17) unaligned,
 10    12 	2 c_offset		fixed(24),
 10    13 	2 c_length		fixed(24),
 10    14 	2 symbol			ptr unaligned,
 10    15 	2 qualifier		ptr unaligned,
 10    16 	2 offset			ptr unaligned,
 10    17 	2 length			ptr unaligned,
 10    18 	2 subscript_list		ptr unaligned,
 10    19 						/* these fields are used by the 645 code generator */
 10    20 	2 address			structure unaligned,
 10    21 	  3 base			bit(3),
 10    22 	  3 offset		bit(15),
 10    23 	  3 op			bit(9),
 10    24 	  3 no_address		bit(1),
 10    25 	  3 inhibit		bit(1),
 10    26 	  3 ext_base		bit(1),
 10    27 	  3 tag			bit(6),
 10    28 	2 info			structure unaligned,
 10    29 	  3 address_in		structure,
 10    30 	    4 b			dimension(0:7) bit(1),
 10    31 	    4 storage		bit(1),
 10    32 	  3 value_in		structure,
 10    33 	    4 a			bit(1),
 10    34 	    4 q			bit(1),
 10    35 	    4 aq			bit(1),
 10    36 	    4 string_aq		bit(1),
 10    37 	    4 complex_aq		bit(1),
 10    38 	    4 decimal_aq		bit(1),
 10    39 	    4 b			dimension(0:7) bit(1),
 10    40 	    4 storage		bit(1),
 10    41 	    4 indicators		bit(1),
 10    42 	    4 x			dimension(0:7) bit(1),
 10    43 	  3 other			structure,
 10    44 	    4 big_offset		bit(1),
 10    45 	    4 big_length		bit(1),
 10    46 	    4 modword_in_offset	bit(1),
 10    47 	2 data_type		fixed(5) unaligned,
 10    48 	2 bits			structure unaligned,
 10    49 	  3 padded_ref		bit(1),
 10    50 	  3 aligned_ref		bit(1),
 10    51 	  3 long_ref		bit(1),
 10    52 	  3 forward_ref		bit(1),
 10    53 	  3 ic_ref		bit(1),
 10    54 	  3 temp_ref		bit(1),
 10    55 	  3 defined_ref		bit(1),
 10    56 	  3 evaluated		bit(1),
 10    57 	  3 allocate		bit(1),
 10    58 	  3 allocated		bit(1),
 10    59 	  3 aliasable		bit(1),
 10    60 	  3 even			bit(1),
 10    61 	  3 perm_address		bit(1),
 10    62 	  3 aggregate		bit(1),
 10    63 	  3 hit_zero		bit(1),
 10    64 	  3 dont_save		bit(1),
 10    65 	  3 fo_in_qual		bit(1),
 10    66 	  3 hard_to_load		bit(1),
 10    67 	2 relocation		bit(12) unaligned,
 10    68 	2 more_bits		structure unaligned,
 10    69 	  3 substr		bit(1),
 10    70 	  3 padded_for_store_ref	bit(1),
 10    71 	  3 aligned_for_store_ref	bit(1),
 10    72 	  3 mbz			bit(15),
 10    73 	2 store_ins		bit(18) unaligned;
 10    74 
 10    75 /* END INCLUDE FILE ... reference.incl.pl1 */
       69 
       70 
       71 /* internal static */
       72 
       73 dcl	units		(7) char (5) int static options (constant) aligned
       74 			init ("bit ", "digit", "char", "half", "word", "mod2", "mod4");
       75 
       76 dcl	bit_names		(30) char (20) varying static
       77 			init ("array", "varying", "shared", "put_data", "processed", "inhibit", "big_offset",
       78 			"big_length", "has_modword", "padded", "aligned", "long", "forward", "ic", "temp", "defined",
       79 			"evaluated", "allocate", "allocated", "aliasable", "even", "", "aggregate", "hit_zero",
       80 			"dont_save", "fo_in_qual", "hard_to_load", "substr", "padded_for_store", "aligned_for_store");
       81 
       82 dcl	data_type_name	(1:24) char (20) var aligned
       83 			init ("real_fix_bin_1", "real_fix_bin_2", "real_flt_bin_1", "real_flt_bin_2",
       84 			"complex_fix_bin_1", "complex_fix_bin_2", "complex_flt_bin_1", "complex_flt_bin_2",
       85 			"real_fix_dec", "real_flt_dec", "complex_fix_dec", "complex_flt_dec", "char_string",
       86 			"bit_string", "label_constant", "local_label_variable", "label_variable", "entry_variable",
       87 			"ext_entry_in", "ext_entry_out", "int_entry", "int_entry_other", "unpacked_ptr", "packed_ptr")
       88 			int static options (constant);
       89 
       90 dcl	address_name	(9) char (8) varying static init ("b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "storage");
       91 
       92 dcl	value_name	(24) char (12) varying static
       93 			init ("a", "q", "aq", "string_aq", "complex_aq", "decimal_aq", "b0", "b1", "b2", "b3", "b4",
       94 			"b5", "b6", "b7", "storage", "indicators", "x0", "x1", "x2", "x3", "x4", "x5", "x6", "x7");
       95 
       96 dcl	op_offset		(0:20) fixed bin (15) int static
       97 			initial (0, 1, 8, 15, 25, 35, 46, 61, 65, 81, 92, 108, 117, 120, 131, 137, 153, 169, 185, 194,
       98 			210);
       99 
      100 /* format: ^delnl */
      101 
      102 dcl	op_names		(0:210) char (20) aligned internal static initial (
      103 			"ZERO!!",
      104 			"UNUSED 1-0",		/* class 1	1 */
      105 			"add",
      106 			"sub",
      107 			"mult",
      108 			"div",
      109 			"negate",
      110 			"exp",
      111 
      112 			"UNUSED 2-0",		/* class 2	8 */
      113 			"and_bits",
      114 			"or_bits",
      115 			"xor_bits",
      116 			"not_bits",
      117 			"cat_string",
      118 			"bool_fun",
      119 
      120 			"UNUSED 3-0",		/* class 3	15 */
      121 			"assign",
      122 			"assign_size_ck",
      123 			"assign_zero",
      124 			"copy_words",
      125 			"copy_string",
      126 			"make_desc",
      127 			"assign_round",
      128 			"pack",
      129 			"unpack",
      130 
      131 			"UNUSED 4-0",		/* class 4	25 */
      132 			"UNUSED 4-1",
      133 			"UNUSED 4-2",
      134 			"UNUSED 4-3",
      135 			"less_than",
      136 			"greater_than",
      137 			"equal",
      138 			"not_equal",
      139 			"less_or_equal",
      140 			"greater_or_equal",
      141 
      142 			"UNUSED 5-0",		/* class 5	35 */
      143 			"jump",
      144 			"jump_true",
      145 			"jump_false",
      146 			"jump_if_lt",
      147 			"jump_if_gt",
      148 			"jump_if_eq",
      149 			"jump_if_ne",
      150 			"jump_if_le",
      151 			"jump_if_ge",
      152 			"jump_three_way",
      153 
      154 			"UNUSED 6-0",		/* class 6	46 */
      155 			"std_arg_list",
      156 			"return_words",
      157 			"std_call",
      158 			"return_bits",
      159 			"std_entry",
      160 			"return_string",
      161 			"ex_prologue",
      162 			"allot_auto",
      163 			"param_ptr",
      164 			"param_desc_ptr",
      165 			"std_return",
      166 			"allot_ctl",
      167 			"free_ctl",
      168 			"stop",
      169 
      170 			"mod_bit",		/* class 7	61 */
      171 			"mod_byte",
      172 			"mod_half",
      173 			"mod_word",
      174 
      175 			"bit_to_char",		/* class 8	65 */
      176 			"bit_to_word",
      177 			"char_to_word",
      178 			"half_to_word",
      179 			"word_to_mod2",
      180 			"word_to_mod4",
      181 			"word_to_mod8",
      182 			"rel_fun",
      183 			"baseno_fun",
      184 			"desc_size",
      185 			"bit_pointer",
      186 			"index_before_fun",
      187 			"index_after_fun",
      188 			"verify_ltrim_fun",
      189 			"verify_rtrim_fun",
      190 			"digit_to_bit",
      191 
      192 			"ceil_fun",		/* class 9	81 */
      193 			"floor_fun",
      194 			"round_fun",
      195 			"sign_fun",
      196 			"abs_fun",
      197 			"trunc_fun",
      198 			"byte",
      199 			"rank",
      200 			"index_rev_fun",
      201 			"search_rev_fun",
      202 			"verify_rev_fun",
      203 
      204 			"index_fun",		/* class 10	92 */
      205 			"off_fun",
      206 			"complex_fun",
      207 			"conjg_fun",
      208 			"mod_fun",
      209 			"repeat_fun",
      210 			"verify_fun",
      211 			"translate_fun",
      212 			"UNUSED 10-8",
      213 			"real_fun",
      214 			"imag_fun",
      215 			"length_fun",
      216 			"pl1_mod_fun",
      217 			"search_fun",
      218 			"allocation_fun",
      219 			"reverse_fun",
      220 
      221 			"addr_fun",		/* class 11	108 */
      222 			"addr_fun_bits",
      223 			"ptr_fun",
      224 			"baseptr_fun",
      225 			"addrel_fun",
      226 			"codeptr_fun",
      227 			"environmentptr_fun",
      228 			"stackbaseptr_fun",
      229 			"stackframeptr_fun",
      230 
      231 			"min_fun",		/* class 12	117 */
      232 			"max_fun",
      233 			"pos_dif_fun",
      234 
      235 			"UNUSED 13-0",		/* class 13	120 */
      236 			"stack_ptr",
      237 			"empty_area",
      238 			"UNUSED 13-3",
      239 			"enable_on",
      240 			"revert_on",
      241 			"signal_on",
      242 			"lock_fun",
      243 			"stacq_fun",
      244 			"clock_fun",
      245 			"vclock_fun",
      246 
      247 			"bound_ck",		/* class 14	131 */
      248 			"range_ck",
      249 			"loop",
      250 			"join",
      251 			"allot_based",
      252 			"free_based",
      253 
      254 			"UNUSED 15-0",		/* class 15	137 */
      255 			"r_parn",
      256 			"l_parn",
      257 			"r_format",
      258 			"c_format",
      259 			"f_format",
      260 			"e_format",
      261 			"b_format",
      262 			"a_format",
      263 			"x_format",
      264 			"skip_format",
      265 			"column_format",
      266 			"page_format",
      267 			"line_format",
      268 			"picture_format",
      269 			"bn_format",
      270 
      271 			"get_list_trans",		/* class 16	153 */
      272 			"get_edit_trans",
      273 			"get_data_trans",
      274 			"put_list_trans",
      275 			"put_edit_trans",
      276 			"put_data_trans",
      277 			"terminate_trans",
      278 			"stream_prep",
      279 			"record_io",
      280 			"fortran_read",
      281 			"fortran_write",
      282 			"ftn_file_manip",
      283 			"ftn_trans_loop",
      284 			"put_control",
      285 			"put_field",
      286 			"put_field_chk",
      287 
      288 			"UNUSED 17-0",		/* class 17	169 */
      289 			"UNUSED 17-1",
      290 			"return_value",
      291 			"allot_var",
      292 			"free_var",
      293 			"get_file",
      294 			"get_string",
      295 			"put_file",
      296 			"put_string",
      297 			"open_file",
      298 			"close_file",
      299 			"read_file",
      300 			"write_file",
      301 			"locate_file",
      302 			"do_fun",
      303 			"do_spec",
      304 
      305 			"rewrite_file",		/* class 18	185 */
      306 			"delete_file",
      307 			"unlock_file",
      308 			"lock_file",
      309 			"UNUSED 18-4",
      310 			"refer",
      311 			"prefix_plus",
      312 			"nop",
      313 			"assign_by_name",
      314 
      315 			"sqrt_fun",		/* class 19	194 */
      316 			"sin_fun",
      317 			"sind_fun",
      318 			"cos_fun",
      319 			"cosd_fun",
      320 			"tan_fun",
      321 			"tand_fun",
      322 			"asin_fun",
      323 			"asind_fun",
      324 			"acos_fun",
      325 			"acosd_fun",
      326 			"atan_fun",
      327 			"atand_fun",
      328 			"log2_fun",
      329 			"log_fun",
      330 			"log10_fun",
      331 
      332 			"exp_fun");		/* class 20 (end)	210 */
      333 
      334 /* format: revert */
      335 
      336 /* program */
      337 
      338 	p = a;
      339 	if p = null
      340 	then do;
      341 		call ioa_ ("^/^vxdisplay_exp: pointer is NULL^/", tree_level);
      342 		return;
      343 	     end;
      344 	if p -> node.type = token_node
      345 	then do;
      346 		call ioa_ ("^/^vxTOKEN ^p is ^a", tree_level, p, p -> token.string);
      347 		if p -> token.type = bit_string
      348 		then call ioa_ ("^vxtype is bit_string", tree_level);
      349 		else if p -> token.type = char_string
      350 		then call ioa_ ("^vxtype is char_string", tree_level);
      351 
      352 		call ioa_ ("");
      353 		return;
      354 	     end;
      355 	if p -> node.type = block_node
      356 	then do;
      357 		call ioa_ ("^/^vxBLOCK ^p^/", tree_level, p);
      358 		return;
      359 	     end;
      360 	if p -> node.type = label_node
      361 	then do;
      362 		call ioa_ ("^/^vxLABEL ^p is ^a^/", tree_level, p, p -> label.token -> token.string);
      363 		return;
      364 	     end;
      365 	if p -> node.type = cross_reference_node
      366 	then do;
      367 		do p = p repeat p -> cross_reference.next while (p ^= null);
      368 		     call ioa_ ("^/^vxXREF ^p, ^a^[ set^]^/", tree_level, p, decode_node_id (p, "0"b),
      369 			p -> cross_reference.set_reference);
      370 		end;
      371 		return;
      372 	     end;
      373 	if p -> node.type = symbol_node
      374 	then do;
      375 		call ioa_ ("^/^vxSYMBOL ^p is ^a^/", tree_level, p, p -> symbol.token -> token.string);
      376 		return;
      377 	     end;
      378 	if p -> node.type = reference_node
      379 	then do;
      380 		s, q = p -> reference.symbol;
      381 		if s = null
      382 		then call ioa_ ("^/^vxREFERENCE ^p", tree_level, p);
      383 		else do;
      384 			if q -> node.type = symbol_node | q -> node.type = label_node
      385 			then q = q -> symbol.token;
      386 			else ;			/* is already token from parse */
      387 
      388 			call ioa_$nnl ("^/^vxREFERENCE ^p is ^a, symbol is ^p", tree_level, p, q -> token.string,
      389 			     p -> reference.symbol);
      390 
      391 			if p -> reference.data_type ^= 0
      392 			then call ioa_$nnl (", data type is ^d (^a)", p -> reference.data_type,
      393 				data_type_name (p -> reference.data_type));
      394 
      395 
      396 			call ioa_ ("");
      397 
      398 			if s -> node.type = symbol_node
      399 			then if s -> symbol.constant & ^s -> symbol.entry & s -> symbol.initial ^= null
      400 			     then call display_constant (s, tree_level + 1);
      401 		     end;
      402 
      403 		m = p -> reference.c_offset;
      404 		if m ^= 0
      405 		then call ioa_ ("^vxc_offset = ^d", tree_level, m);
      406 		m = p -> reference.c_length;
      407 		if m ^= 0
      408 		then call ioa_ ("^vxc_length = ^d", tree_level, m);
      409 
      410 		b36 = substr (p -> word_bit, 10, 5) || p -> reference.inhibit || string (p -> reference.other)
      411 		     || string (p -> reference.bits) || string (p -> reference.more_bits);
      412 		if b36 ^= "0"b
      413 		then do;
      414 			line = "";
      415 			lp = 1;
      416 
      417 			do i = 1 to hbound (bit_names, 1);
      418 			     if substr (b36, i, 1)
      419 			     then do;
      420 				     n = length (bit_names (i));
      421 				     if n > 0
      422 				     then do;
      423 					     substr (line, lp, n) = bit_names (i);
      424 					     lp = lp + n + 1;
      425 
      426 					     if lp > 72
      427 					     then do;
      428 						     call ioa_ ("^vx^a", tree_level, line);
      429 						     lp = 1;
      430 						     line = "";
      431 						end;
      432 					end;
      433 				end;
      434 			end;
      435 
      436 			if lp > 1
      437 			then call ioa_ ("^vx^a", tree_level, line);
      438 		     end;
      439 
      440 		if ^p -> reference.no_address
      441 		then call ioa_ (
      442 			"^vx^[perm ^]address = ^[^spr^.3b|^;^[^s^;(base = ^.3b)^] ^]^.3b^a^[^s^; (tag = ^.3b)^]^[ inhibit^]^[^s^; (op = ^.3b)^]"
      443 			, tree_level, p -> reference.perm_address, p -> reference.address.ext_base,
      444 			p -> reference.address.base = ""b, p -> reference.address.base, p -> reference.address.offset,
      445 			decode_tag (p -> reference.address.tag), p -> reference.address.tag = ""b,
      446 			p -> reference.address.tag, p -> reference.address.inhibit, p -> reference.address.op = ""b,
      447 			p -> reference.address.op);
      448 
      449 		b36 = string (p -> reference.address_in);
      450 		if b36 ^= "0"b
      451 		then do;
      452 			line = "address is in:";
      453 			lp = 16;
      454 
      455 			do i = 1 to length (string (p -> reference.address_in));
      456 			     if substr (b36, i, 1)
      457 			     then do;
      458 				     n = length (address_name (i));
      459 				     substr (line, lp, n) = address_name (i);
      460 				     lp = lp + n + 1;
      461 				end;
      462 			end;
      463 
      464 			call ioa_ ("^vx^a", tree_level, line);
      465 		     end;
      466 
      467 		b36 = string (p -> reference.value_in);
      468 		if b36 ^= "0"b
      469 		then do;
      470 			line = "value is in:";
      471 			lp = 14;
      472 
      473 			do i = 1 to length (string (p -> reference.value_in));
      474 			     if substr (b36, i, 1)
      475 			     then do;
      476 				     n = length (value_name (i));
      477 				     substr (line, lp, n) = value_name (i);
      478 				     lp = lp + n + 1;
      479 
      480 				     if lp > 72
      481 				     then do;
      482 					     call ioa_ ("^vx^a", tree_level, line);
      483 					     lp = 1;
      484 					     line = "";
      485 					end;
      486 
      487 				end;
      488 			end;
      489 
      490 			if lp > 1
      491 			then call ioa_ ("^vx^a", tree_level, line);
      492 		     end;
      493 
      494 		i = p -> reference.ref_count;
      495 		if i ^= 0
      496 		then call ioa_ ("^vxreference count = ^d", tree_level, i);
      497 
      498 		m = fixed (p -> reference.units, 3);
      499 		if m ^= 0
      500 		then call ioa_ ("^vxunits = ^a", tree_level, units (m));
      501 
      502 		i = fixed (p -> reference.store_ins, 18);
      503 		if i ^= 0
      504 		then call ioa_ ("^vxstored into at ^6w", tree_level, i);
      505 
      506 		q = p -> reference.offset;
      507 		if q ^= null
      508 		then call show_exp ("offset");
      509 		q = p -> reference.length;
      510 		if q ^= null
      511 		then call show_exp ("length");
      512 		q = p -> reference.qualifier;
      513 		if q ^= null
      514 		then call show_exp ("qualifier");
      515 		q = p -> reference.subscript_list;
      516 		if baseno (q) ^= (18)"0"b
      517 		then if q ^= null
      518 		     then call show_exp ("subscript list");
      519 		     else ;
      520 		else do;
      521 			i = fixed (rel (q), 18);
      522 			if i ^= 0
      523 			then call ioa_ ("^vxfractional offset is ^6w", tree_level, i);
      524 		     end;
      525 		call ioa_ ("^vxEND REFERENCE ^p^/", tree_level, p);
      526 		return;
      527 	     end;
      528 
      529 	if p -> node.type = list_node
      530 	then do;
      531 		call display_list (p, tree_level);
      532 		return;
      533 	     end;
      534 
      535 	if p -> node.type = temporary_node
      536 	then do;
      537 		call ioa_ ("^/^vxTEMPORARY ^p", tree_level, p);
      538 		call ioa_ ("^vxnext = ^p", tree_level, p -> temporary.next);
      539 		call ioa_ ("^vxsize = ^d", tree_level, p -> temporary.size);
      540 		call ioa_ ("^vxlocation = sp|^6w", tree_level, (p -> temporary.location));
      541 		call ioa_ ("^vxref_count = ^d", tree_level, p -> temporary.ref_count);
      542 		call ioa_ ("^vxsymbol = ^p", tree_level, p -> temporary.symbol);
      543 		call ioa_ ("^vxlast_freed = ^6w", tree_level, (p -> temporary.last_freed));
      544 		call ioa_ ("^vxEND TEMPORARY ^p^/", tree_level, p);
      545 		return;
      546 	     end;
      547 
      548 	if p -> node.type ^= operator_node
      549 	then do;
      550 		call display_any_node_name ("display_exp: arg node not handled by display_exp,
      551 arg =", p, tree_level + 1);
      552 		return;
      553 	     end;
      554 	n = p -> operator.number;
      555 	op_number = p -> operator.op_code;
      556 	op_name = op_names (op_offset (fixed (op_class, 5)) + fixed (op_relative, 4));
      557 
      558 	line = "";
      559 	lp = 1;
      560 
      561 	if p -> operator.shared
      562 	then do;
      563 		substr (line, lp, 6) = "shared";
      564 		lp = lp + 7;
      565 	     end;
      566 
      567 	if p -> operator.optimized
      568 	then do;
      569 		substr (line, lp, 9) = "optimized";
      570 		lp = lp + 10;
      571 	     end;
      572 
      573 	if p -> operator.processed
      574 	then do;
      575 		substr (line, lp, 9) = "processed";
      576 		lp = lp + 10;
      577 	     end;
      578 
      579 	if lp = 1
      580 	then call ioa_ ("^/^vxOPERATOR ^p is ^a, ^d operands", tree_level, p, op_name, n);
      581 	else call ioa_ ("^/^vxOPERATOR ^p is ^a, (^va), ^d operands", tree_level, p, op_name, lp - 2, line, n);
      582 	do i = 1 to n;
      583 	     if p -> operator.operand (i) = null
      584 	     then call ioa_ ("^vxOPERAND (^d) of ^p = NULL", tree_level, i, p);
      585 	     else do;
      586 		     call ioa_ ("^vxOPERAND (^d) of ^p =", tree_level, i, p);
      587 		     call display_exp ((p -> operator.operand (i)), tree_level + 1);
      588 		end;
      589 	end;
      590 	if n ^= 0
      591 	then call ioa_ ("^vxEND OPERATOR ^p, ^d operands^/", tree_level, p, n);
      592 	else call ioa_ ("");
      593 
      594 	return;
      595 
      596 show_exp:
      597      proc (message);
      598 
      599 dcl	message		char (*);
      600 
      601 	if display_stat_$brief_display
      602 	then call ioa_ ("^vx^a exp = ^p", tree_level, message, q);
      603 	else do;
      604 		call ioa_ ("^vx^a follows:", tree_level, message);
      605 		call display_exp (q, tree_level + 1);
      606 		call ioa_ ("^vx^a ended", tree_level, message);
      607 	     end;
      608      end show_exp;
      609 
      610 decode_tag:
      611      procedure (tag) returns (char (4) varying);
      612 
      613 dcl	tag		bit (6);
      614 
      615 dcl	designator	fixed bin (4);
      616 
      617 dcl	designator_names	(0:15) char (2) varying internal static options (constant)
      618 			initial ("n", "au", "qu", "du", "ic", "al", "ql", "dl", "x0", "x1", "x2", "x3", "x4", "x5",
      619 			"x6", "x7");
      620 
      621 dcl	it_designator_names (0:15) char (3) varying internal static options (constant)
      622 			initial ("f1", "itp", "42", "its", "sd", "scr", "f2", "f3", "ci", "i", "sc", "ad", "di", "dic",
      623 			"id", "idc");
      624 
      625 	designator = binary (substr (tag, 3), 4);
      626 	goto modification (binary (substr (tag, 1, 2), 2));
      627 
      628 modification (0):					/* register (r) */
      629 	if designator = 0
      630 	then return ("");
      631 	else return ("," || designator_names (designator));
      632 
      633 modification (1):					/* register then indirect (ri) */
      634 	if designator = 0
      635 	then return (",*");
      636 	else return ("," || designator_names (designator) || "*");
      637 
      638 modification (2):					/* indirect then tally (it) */
      639 	return ("," || it_designator_names (designator));
      640 
      641 modification (3):					/* indirect then register (ir) */
      642 	return (",*" || designator_names (designator));
      643      end decode_tag;
      644 
      645      end display_exp;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/15/82  1503.1  display_exp.pl1                   >dumps>old>recomp>display_exp.pl1
60           1    07/21/80  1546.3  op_codes.incl.pl1                 >ldd>include>op_codes.incl.pl1
61           2    10/25/79  1645.8  cross_reference.incl.pl1          >ldd>include>cross_reference.incl.pl1
62           3    05/06/74  1742.1  label.incl.pl1                    >ldd>include>label.incl.pl1
63           4    07/21/80  1546.3  nodes.incl.pl1                    >ldd>include>nodes.incl.pl1
64           5    07/21/80  1546.3  symbol.incl.pl1                   >ldd>include>symbol.incl.pl1
65           6    07/21/80  1546.3  operator.incl.pl1                 >ldd>include>operator.incl.pl1
66           7    11/30/78  1227.4  temporary.incl.pl1                >ldd>include>temporary.incl.pl1
67           8    09/14/77  1705.7  token.incl.pl1                    >ldd>include>token.incl.pl1
68           9    11/30/78  1227.4  token_types.incl.pl1              >ldd>include>token_types.incl.pl1
69          10    07/21/80  1546.3  reference.incl.pl1                >ldd>include>reference.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
a                                      parameter       pointer                  dcl 32 ref 29 338
addr                                                   builtin function         dcl 38 ref 556 556
address                  10            based           structure                level 2 packed unaligned dcl 10-3
address_in               11            based           structure                level 3 packed unaligned dcl 10-3 ref 449 455
address_name                    002330 constant        varying char(8)          initial array dcl 90 ref 458 459
attributes               31            based           structure                level 2 dcl 5-3
b36                             000141 automatic       bit(36)                  dcl 48 set ref 410* 412 418 449* 450 456 467* 468
                                                                                  474
base                     10            based           bit(3)                   level 3 packed unaligned dcl 10-3 set ref 440 440*
baseno                                                 builtin function         dcl 38 ref 516
binary                                                 builtin function         dcl 38 ref 625 626
bit_names                       002603 constant        varying char(20)         initial array dcl 76 ref 417 420 423
bit_string                             constant        bit(9)                   initial dcl 9-3 ref 347
bits                     12(06)        based           structure                level 2 packed unaligned dcl 10-3 set ref 410
block_node                             constant        bit(9)                   initial dcl 4-5 ref 355
c_length                  2            based           fixed bin(24,0)          level 2 dcl 10-3 ref 406
c_offset                  1            based           fixed bin(24,0)          level 2 dcl 10-3 ref 403
char_string                            constant        bit(9)                   initial dcl 9-3 ref 349
constant                 32(16)        based           bit(1)                   level 4 packed unaligned dcl 5-3 ref 398
cross_reference                        based           structure                level 1 dcl 2-3
cross_reference_node                   constant        bit(9)                   initial dcl 4-5 ref 365
data_type                12            based           fixed bin(5,0)           level 2 in structure "reference" packed unaligned
                                                                                  dcl 10-3 in procedure "display_exp" set ref 391
                                                                                  391* 391
data_type                31            based           structure                level 3 in structure "symbol" packed unaligned
                                                                                  dcl 5-3 in procedure "display_exp"
data_type_name                  002363 constant        varying char(20)         initial array dcl 82 set ref 391*
decode_node_id                  000014 constant        entry                    external dcl 40 ref 368
designator                      000166 automatic       fixed bin(4,0)           dcl 615 set ref 625* 628 631 633 636 638 641
designator_names                000044 constant        varying char(2)          initial array dcl 617 ref 631 636 641
display_any_node_name           000012 constant        entry                    external dcl 32 ref 550
display_constant                000020 constant        entry                    external dcl 40 ref 398
display_list                    000016 constant        entry                    external dcl 40 ref 531
display_stat_$brief_display     000010 external static bit(1)                   unaligned dcl 32 ref 601
entry                    31(09)        based           bit(1)                   level 4 packed unaligned dcl 5-3 ref 398
ext_base                 10(29)        based           bit(1)                   level 3 packed unaligned dcl 10-3 set ref 440*
fixed                                                  builtin function         dcl 38 ref 498 502 521 556 556
hbound                                                 builtin function         dcl 38 ref 417
i                               000106 automatic       fixed bin(15,0)          dcl 45 set ref 417* 418 420 423* 455* 456 458 459*
                                                                                  473* 474 476 477* 494* 495 495* 502* 503 503* 521*
                                                                                  522 522* 582* 583 583* 586* 587*
info                     11            based           structure                level 2 packed unaligned dcl 10-3
inhibit                  10(28)        based           bit(1)                   level 3 packed unaligned dcl 10-3 set ref 410 440*
initial                  11            based           pointer                  level 2 packed unaligned dcl 5-3 ref 398
ioa_                            000022 constant        entry                    external dcl 43 ref 341 346 347 349 352 357 362 368
                                                                                  375 381 396 404 407 428 436 440 464 482 490 495
                                                                                  499 503 522 525 537 538 539 540 541 542 543 544
                                                                                  579 581 583 586 590 592 601 604 606
ioa_$nnl                        000024 constant        entry                    external dcl 44 ref 388 391
it_designator_names             000004 constant        varying char(3)          initial array dcl 621 ref 638
label                                  based           structure                level 1 dcl 3-1
label_node                             constant        bit(9)                   initial dcl 4-5 ref 360 384
last_freed                7            based           fixed bin(18,0)          level 2 dcl 7-3 ref 543
length                    6            based           pointer                  level 2 in structure "reference" packed unaligned
                                                                                  dcl 10-3 in procedure "display_exp" ref 509
length                                                 builtin function         dcl 38 in procedure "display_exp" ref 420 455 458
                                                                                  473 476
line                            000110 automatic       char(96)                 unaligned dcl 45 set ref 414* 423* 428* 430* 436*
                                                                                  452* 459* 464* 470* 477* 482* 484* 490* 558* 563*
                                                                                  569* 575* 581*
list_node                              constant        bit(9)                   initial dcl 4-5 ref 529
location                  4            based           fixed bin(18,0)          level 2 dcl 7-3 ref 540
lp                              000140 automatic       fixed bin(17,0)          dcl 45 set ref 415* 423 424* 424 426 429* 436 453*
                                                                                  459 460* 460 471* 477 478* 478 480 483* 490 559*
                                                                                  563 564* 564 569 570* 570 575 576* 576 579 581
m                               000142 automatic       fixed bin(18,0)          dcl 48 set ref 403* 404 404* 406* 407 407* 498* 499
                                                                                  499
message                                parameter       char                     unaligned dcl 599 set ref 596 601* 604* 606*
more_bits                13            based           structure                level 2 packed unaligned dcl 10-3 ref 410
n                               000107 automatic       fixed bin(15,0)          dcl 45 set ref 420* 421 423 424 458* 459 460 476*
                                                                                  477 478 554* 579* 581* 582 590 590*
next                      1            based           pointer                  level 2 in structure "cross_reference" packed
                                                                                  unaligned dcl 2-3 in procedure "display_exp" ref
                                                                                  370
next                      2            based           pointer                  level 2 in structure "temporary" dcl 7-3
                                                                                  in procedure "display_exp" set ref 538*
no_address               10(27)        based           bit(1)                   level 3 packed unaligned dcl 10-3 ref 440
node                                   based           structure                level 1 dcl 4-27
null                                                   builtin function         dcl 38 ref 339 367 381 398 507 510 513 516 583
number                    0(21)        based           fixed bin(14,0)          level 2 packed unaligned dcl 6-6 ref 554
offset                   10(03)        based           bit(15)                  level 3 in structure "reference" packed unaligned
                                                                                  dcl 10-3 in procedure "display_exp" set ref 440*
offset                    5            based           pointer                  level 2 in structure "reference" packed unaligned
                                                                                  dcl 10-3 in procedure "display_exp" ref 506
op                       10(18)        based           bit(9)                   level 3 packed unaligned dcl 10-3 set ref 440 440*
op_class                               based           bit(5)                   level 2 packed unaligned dcl 48 ref 556
op_code                   0(09)        based           bit(9)                   level 2 packed unaligned dcl 6-6 ref 555
op_name                         000143 automatic       char(20)                 dcl 48 set ref 556* 579* 581*
op_names                        000104 constant        char(20)                 initial array dcl 102 ref 556
op_number                       000150 automatic       bit(9)                   dcl 48 set ref 555* 556 556
op_number_structure                    based           structure                level 1 dcl 48
op_offset                       002143 constant        fixed bin(15,0)          initial array dcl 96 ref 556
op_relative               0(05)        based           bit(4)                   level 2 packed unaligned dcl 48 ref 556
operand                   1            based           pointer                  array level 2 packed unaligned dcl 6-6 ref 583 587
operator                               based           structure                level 1 dcl 6-6
operator_node                          constant        bit(9)                   initial dcl 4-5 ref 548
optimized                 0(20)        based           bit(1)                   level 2 packed unaligned dcl 6-6 ref 567
other                    11(33)        based           structure                level 3 packed unaligned dcl 10-3 ref 410
p                               000100 automatic       pointer                  dcl 32 set ref 338* 339 344 346* 346 347 349 355
                                                                                  357* 360 362* 362 365 367* 367 367* 368* 368* 368*
                                                                                  370 373 375* 375 378 380 381* 388* 388 391 391 391
                                                                                  403 406 410 410 410 410 410 440 440 440 440 440
                                                                                  440 440 440 440 440 440 440 449 455 467 473 494
                                                                                  498 502 506 509 512 515 525* 529 531* 535 537* 538
                                                                                  539 540 541 542 543 544* 548 550* 554 555 561 567
                                                                                  573 579* 581* 583 583* 586* 587 590*
perm_address             12(18)        based           bit(1)                   level 3 packed unaligned dcl 10-3 set ref 440*
processed                 0(19)        based           bit(1)                   level 2 packed unaligned dcl 6-6 ref 573
q                               000102 automatic       pointer                  dcl 32 set ref 380* 384 384 384* 384 388 506* 507
                                                                                  509* 510 512* 513 515* 516 516 521 601* 605*
qualifier                 4            based           pointer                  level 2 packed unaligned dcl 10-3 ref 512
ref_count                 5            based           fixed bin(17,0)          level 2 in structure "temporary" dcl 7-3
                                                                                  in procedure "display_exp" set ref 541*
ref_count                 0(18)        based           fixed bin(17,0)          level 2 in structure "reference" packed unaligned
                                                                                  dcl 10-3 in procedure "display_exp" ref 494
ref_type                  2            based           structure                level 2 packed unaligned dcl 2-3
reference                              based           structure                level 1 dcl 10-3
reference_node                         constant        bit(9)                   initial dcl 4-5 ref 378
rel                                                    builtin function         dcl 38 ref 521
s                               000104 automatic       pointer                  dcl 32 set ref 380* 381 398 398 398 398 398*
set_reference             2            based           bit(1)                   level 3 packed unaligned dcl 2-3 set ref 368*
shared                    0(18)        based           bit(1)                   level 2 packed unaligned dcl 6-6 ref 561
size                      1            based           fixed bin(18,0)          level 2 in structure "temporary" dcl 7-3
                                                                                  in procedure "display_exp" set ref 539*
size                      3            based           fixed bin(9,0)           level 2 in structure "token" dcl 8-3 in procedure
                                                                                  "display_exp" ref 346 346 362 362 375 375 388 388
storage_class            32(09)        based           structure                level 3 packed unaligned dcl 5-3
store_ins                13(18)        based           bit(18)                  level 2 packed unaligned dcl 10-3 ref 502
string                    4            based           char                     level 2 in structure "token" dcl 8-3 in procedure
                                                                                  "display_exp" set ref 346* 362* 375* 388*
string                                                 builtin function         dcl 38 in procedure "display_exp" ref 410 410 410
                                                                                  449 455 467 473
subscript_list            7            based           pointer                  level 2 packed unaligned dcl 10-3 ref 515
substr                                                 builtin function         dcl 38 set ref 410 418 423* 456 459* 474 477* 563*
                                                                                  569* 575* 625 626
symbol                    3            based           pointer                  level 2 in structure "reference" packed unaligned
                                                                                  dcl 10-3 in procedure "display_exp" set ref 380
                                                                                  388*
symbol                    6            based           pointer                  level 2 in structure "temporary" packed unaligned
                                                                                  dcl 7-3 in procedure "display_exp" set ref 542*
symbol                                 based           structure                level 1 dcl 5-3 in procedure "display_exp"
symbol_node                            constant        bit(9)                   initial dcl 4-5 ref 373 384 398
tag                      10(30)        based           bit(6)                   level 3 in structure "reference" packed unaligned
                                                                                  dcl 10-3 in procedure "display_exp" set ref 440*
                                                                                  440 440*
tag                                    parameter       bit(6)                   unaligned dcl 613 in procedure "decode_tag" ref 610
                                                                                  625 626
temporary                              based           structure                level 1 unaligned dcl 7-3
temporary_node                         constant        bit(9)                   initial dcl 4-5 ref 535
token                     5            based           pointer                  level 2 in structure "symbol" packed unaligned
                                                                                  dcl 5-3 in procedure "display_exp" ref 375 384
token                     5            based           pointer                  level 2 in structure "label" packed unaligned
                                                                                  dcl 3-1 in procedure "display_exp" ref 362
token                                  based           structure                level 1 dcl 8-3 in procedure "display_exp"
token_node                             constant        bit(9)                   initial dcl 4-5 ref 344
tree_level                             parameter       fixed bin(17,0)          dcl 32 set ref 29 341* 346* 347* 349* 357* 362* 368*
                                                                                  375* 381* 388* 398 404* 407* 428* 436* 440* 464*
                                                                                  482* 490* 495* 499* 503* 522* 525* 531* 537* 538*
                                                                                  539* 540* 541* 542* 543* 544* 550 579* 581* 583*
                                                                                  586* 587 590* 601* 604* 605 606*
type                                   based           bit(9)                   level 2 in structure "node" packed unaligned
                                                                                  dcl 4-27 in procedure "display_exp" ref 344 355
                                                                                  360 365 373 378 384 384 398 529 535 548
type                      0(09)        based           bit(9)                   level 2 in structure "token" packed unaligned
                                                                                  dcl 8-3 in procedure "display_exp" ref 347 349
units                     0(14)        based           fixed bin(3,0)           level 2 in structure "reference" packed unaligned
                                                                                  dcl 10-3 in procedure "display_exp" ref 498
units                           003067 constant        char(5)                  initial array dcl 73 in procedure "display_exp" set
                                                                                  ref 499*
value_in                 11(09)        based           structure                level 3 packed unaligned dcl 10-3 ref 467 473
value_name                      002170 constant        varying char(12)         initial array dcl 92 ref 476 477
word_bit                               based           bit(36)                  dcl 48 ref 410

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
a_format                               internal static bit(9)                   initial dcl 1-7
abs_fun                                internal static bit(9)                   initial dcl 1-7
acos_fun                               internal static bit(9)                   initial dcl 1-7
acosd_fun                              internal static bit(9)                   initial dcl 1-7
add                                    internal static bit(9)                   initial dcl 1-7
addr_fun                               internal static bit(9)                   initial dcl 1-7
addr_fun_bits                          internal static bit(9)                   initial dcl 1-7
addrel_fun                             internal static bit(9)                   initial dcl 1-7
allocation_fun                         internal static bit(9)                   initial dcl 1-7
allot_auto                             internal static bit(9)                   initial dcl 1-7
allot_based                            internal static bit(9)                   initial dcl 1-7
allot_ctl                              internal static bit(9)                   initial dcl 1-7
allot_var                              internal static bit(9)                   initial dcl 1-7
and                                    internal static bit(9)                   initial dcl 9-3
and_bits                               internal static bit(9)                   initial dcl 1-7
array_node                             internal static bit(9)                   initial dcl 4-5
arrow                                  internal static bit(9)                   initial dcl 9-3
asin_fun                               internal static bit(9)                   initial dcl 1-7
asind_fun                              internal static bit(9)                   initial dcl 1-7
assign                                 internal static bit(9)                   initial dcl 1-7
assign_by_name                         internal static bit(9)                   initial dcl 1-7
assign_round                           internal static bit(9)                   initial dcl 1-7
assign_size_ck                         internal static bit(9)                   initial dcl 1-7
assign_zero                            internal static bit(9)                   initial dcl 1-7
assignment                             internal static bit(9)                   initial dcl 9-3
asterisk                               internal static bit(9)                   initial dcl 9-3
atan_fun                               internal static bit(9)                   initial dcl 1-7
atand_fun                              internal static bit(9)                   initial dcl 1-7
b_format                               internal static bit(9)                   initial dcl 1-7
baseno_fun                             internal static bit(9)                   initial dcl 1-7
baseptr_fun                            internal static bit(9)                   initial dcl 1-7
bin_integer                            internal static bit(9)                   initial dcl 9-3
bit_pointer                            internal static bit(9)                   initial dcl 1-7
bit_to_char                            internal static bit(9)                   initial dcl 1-7
bit_to_word                            internal static bit(9)                   initial dcl 1-7
bn_format                              internal static bit(9)                   initial dcl 1-7
bool_fun                               internal static bit(9)                   initial dcl 1-7
bound_ck                               internal static bit(9)                   initial dcl 1-7
bound_node                             internal static bit(9)                   initial dcl 4-5
by_name_agg_node                       internal static bit(9)                   initial dcl 4-5
byte_fun                               internal static bit(9)                   initial dcl 1-7
c_format                               internal static bit(9)                   initial dcl 1-7
cat                                    internal static bit(9)                   initial dcl 9-3
cat_string                             internal static bit(9)                   initial dcl 1-7
ceil_fun                               internal static bit(9)                   initial dcl 1-7
char_to_word                           internal static bit(9)                   initial dcl 1-7
clock_fun                              internal static bit(9)                   initial dcl 1-7
close_file                             internal static bit(9)                   initial dcl 1-7
codeptr_fun                            internal static bit(9)                   initial dcl 1-7
colon                                  internal static bit(9)                   initial dcl 9-3
column_format                          internal static bit(9)                   initial dcl 1-7
comma                                  internal static bit(9)                   initial dcl 9-3
complex_fun                            internal static bit(9)                   initial dcl 1-7
conjg_fun                              internal static bit(9)                   initial dcl 1-7
context_node                           internal static bit(9)                   initial dcl 4-5
copy_string                            internal static bit(9)                   initial dcl 1-7
copy_words                             internal static bit(9)                   initial dcl 1-7
cos_fun                                internal static bit(9)                   initial dcl 1-7
cosd_fun                               internal static bit(9)                   initial dcl 1-7
dec_integer                            internal static bit(9)                   initial dcl 9-3
default_node                           internal static bit(9)                   initial dcl 4-5
delete_file                            internal static bit(9)                   initial dcl 1-7
desc_size                              internal static bit(9)                   initial dcl 1-7
digit_to_bit                           internal static bit(9)                   initial dcl 1-7
div                                    internal static bit(9)                   initial dcl 1-7
do_fun                                 internal static bit(9)                   initial dcl 1-7
do_spec                                internal static bit(9)                   initial dcl 1-7
e_format                               internal static bit(9)                   initial dcl 1-7
empty_area                             internal static bit(9)                   initial dcl 1-7
enable_on                              internal static bit(9)                   initial dcl 1-7
environmentptr_fun                     internal static bit(9)                   initial dcl 1-7
eq                                     internal static bit(9)                   initial dcl 9-3
equal                                  internal static bit(9)                   initial dcl 1-7
ex_prologue                            internal static bit(9)                   initial dcl 1-7
exp                                    internal static bit(9)                   initial dcl 1-7
exp_fun                                internal static bit(9)                   initial dcl 1-7
expon                                  internal static bit(9)                   initial dcl 9-3
f_format                               internal static bit(9)                   initial dcl 1-7
fixed_bin                              internal static bit(9)                   initial dcl 9-3
fixed_dec                              internal static bit(9)                   initial dcl 9-3
float_bin                              internal static bit(9)                   initial dcl 9-3
float_dec                              internal static bit(9)                   initial dcl 9-3
floor_fun                              internal static bit(9)                   initial dcl 1-7
format_value_node                      internal static bit(9)                   initial dcl 4-5
fortran_read                           internal static bit(9)                   initial dcl 1-7
fortran_write                          internal static bit(9)                   initial dcl 1-7
free_based                             internal static bit(9)                   initial dcl 1-7
free_ctl                               internal static bit(9)                   initial dcl 1-7
free_var                               internal static bit(9)                   initial dcl 1-7
ftn_file_manip                         internal static bit(9)                   initial dcl 1-7
ftn_trans_loop                         internal static bit(9)                   initial dcl 1-7
ge                                     internal static bit(9)                   initial dcl 9-3
get_data_trans                         internal static bit(9)                   initial dcl 1-7
get_edit_trans                         internal static bit(9)                   initial dcl 1-7
get_file                               internal static bit(9)                   initial dcl 1-7
get_list_trans                         internal static bit(9)                   initial dcl 1-7
get_string                             internal static bit(9)                   initial dcl 1-7
greater_or_equal                       internal static bit(9)                   initial dcl 1-7
greater_than                           internal static bit(9)                   initial dcl 1-7
gt                                     internal static bit(9)                   initial dcl 9-3
half_to_word                           internal static bit(9)                   initial dcl 1-7
i_bin_integer                          internal static bit(9)                   initial dcl 9-3
i_dec_integer                          internal static bit(9)                   initial dcl 9-3
i_fixed_bin                            internal static bit(9)                   initial dcl 9-3
i_fixed_dec                            internal static bit(9)                   initial dcl 9-3
i_float_bin                            internal static bit(9)                   initial dcl 9-3
i_float_dec                            internal static bit(9)                   initial dcl 9-3
identifier                             internal static bit(9)                   initial dcl 9-3
imag_fun                               internal static bit(9)                   initial dcl 1-7
index_after_fun                        internal static bit(9)                   initial dcl 1-7
index_before_fun                       internal static bit(9)                   initial dcl 1-7
index_fun                              internal static bit(9)                   initial dcl 1-7
index_rev_fun                          internal static bit(9)                   initial dcl 1-7
is_arith_constant                      internal static bit(9)                   initial dcl 9-47
is_arithmetic_constant                 internal static bit(9)                   initial dcl 9-47
is_constant                            internal static bit(9)                   initial dcl 9-47
is_decimal_constant                    internal static bit(9)                   initial dcl 9-47
is_delimiter                           internal static bit(9)                   initial dcl 9-47
is_float_constant                      internal static bit(9)                   initial dcl 9-47
is_identifier                          internal static bit(9)                   initial dcl 9-47
is_imaginary_constant                  internal static bit(9)                   initial dcl 9-47
is_integral_constant                   internal static bit(9)                   initial dcl 9-47
is_isub                                internal static bit(9)                   initial dcl 9-47
isub                                   internal static bit(9)                   initial dcl 9-3
join                                   internal static bit(9)                   initial dcl 1-7
jump                                   internal static bit(9)                   initial dcl 1-7
jump_false                             internal static bit(9)                   initial dcl 1-7
jump_if_eq                             internal static bit(9)                   initial dcl 1-7
jump_if_ge                             internal static bit(9)                   initial dcl 1-7
jump_if_gt                             internal static bit(9)                   initial dcl 1-7
jump_if_le                             internal static bit(9)                   initial dcl 1-7
jump_if_lt                             internal static bit(9)                   initial dcl 1-7
jump_if_ne                             internal static bit(9)                   initial dcl 1-7
jump_true                              internal static bit(9)                   initial dcl 1-7
l_parn                                 internal static bit(9)                   initial dcl 1-7
label_array_element_node               internal static bit(9)                   initial dcl 4-5
le                                     internal static bit(9)                   initial dcl 9-3
left_parn                              internal static bit(9)                   initial dcl 9-3
length_fun                             internal static bit(9)                   initial dcl 1-7
less_or_equal                          internal static bit(9)                   initial dcl 1-7
less_than                              internal static bit(9)                   initial dcl 1-7
line_format                            internal static bit(9)                   initial dcl 1-7
locate_file                            internal static bit(9)                   initial dcl 1-7
lock_file                              internal static bit(9)                   initial dcl 1-7
lock_fun                               internal static bit(9)                   initial dcl 1-7
log10_fun                              internal static bit(9)                   initial dcl 1-7
log2_fun                               internal static bit(9)                   initial dcl 1-7
log_fun                                internal static bit(9)                   initial dcl 1-7
loop                                   internal static bit(9)                   initial dcl 1-7
lt                                     internal static bit(9)                   initial dcl 9-3
machine_state_node                     internal static bit(9)                   initial dcl 4-5
make_desc                              internal static bit(9)                   initial dcl 1-7
max_fun                                internal static bit(9)                   initial dcl 1-7
max_number_of_operands                 internal static fixed bin(15,0)          initial dcl 6-15
min_fun                                internal static bit(9)                   initial dcl 1-7
minus                                  internal static bit(9)                   initial dcl 9-3
mod_bit                                internal static bit(9)                   initial dcl 1-7
mod_byte                               internal static bit(9)                   initial dcl 1-7
mod_fun                                internal static bit(9)                   initial dcl 1-7
mod_half                               internal static bit(9)                   initial dcl 1-7
mod_word                               internal static bit(9)                   initial dcl 1-7
mult                                   internal static bit(9)                   initial dcl 1-7
ne                                     internal static bit(9)                   initial dcl 9-3
negate                                 internal static bit(9)                   initial dcl 1-7
ngt                                    internal static bit(9)                   initial dcl 9-3
nlt                                    internal static bit(9)                   initial dcl 9-3
no_token                               internal static bit(9)                   initial dcl 9-3
nop                                    internal static bit(9)                   initial dcl 1-7
not                                    internal static bit(9)                   initial dcl 9-3
not_bits                               internal static bit(9)                   initial dcl 1-7
not_equal                              internal static bit(9)                   initial dcl 1-7
off_fun                                internal static bit(9)                   initial dcl 1-7
open_file                              internal static bit(9)                   initial dcl 1-7
or                                     internal static bit(9)                   initial dcl 9-3
or_bits                                internal static bit(9)                   initial dcl 1-7
pack                                   internal static bit(9)                   initial dcl 1-7
page_format                            internal static bit(9)                   initial dcl 1-7
param_desc_ptr                         internal static bit(9)                   initial dcl 1-7
param_ptr                              internal static bit(9)                   initial dcl 1-7
percent                                internal static bit(9)                   initial dcl 9-3
period                                 internal static bit(9)                   initial dcl 9-3
picture_format                         internal static bit(9)                   initial dcl 1-7
pl1_mod_fun                            internal static bit(9)                   initial dcl 1-7
plus                                   internal static bit(9)                   initial dcl 9-3
prefix_plus                            internal static bit(9)                   initial dcl 1-7
ptr_fun                                internal static bit(9)                   initial dcl 1-7
put_control                            internal static bit(9)                   initial dcl 1-7
put_data_trans                         internal static bit(9)                   initial dcl 1-7
put_edit_trans                         internal static bit(9)                   initial dcl 1-7
put_field                              internal static bit(9)                   initial dcl 1-7
put_field_chk                          internal static bit(9)                   initial dcl 1-7
put_file                               internal static bit(9)                   initial dcl 1-7
put_list_trans                         internal static bit(9)                   initial dcl 1-7
put_string                             internal static bit(9)                   initial dcl 1-7
r_format                               internal static bit(9)                   initial dcl 1-7
r_parn                                 internal static bit(9)                   initial dcl 1-7
range_ck                               internal static bit(9)                   initial dcl 1-7
rank_fun                               internal static bit(9)                   initial dcl 1-7
read_file                              internal static bit(9)                   initial dcl 1-7
real_fun                               internal static bit(9)                   initial dcl 1-7
record_io                              internal static bit(9)                   initial dcl 1-7
refer                                  internal static bit(9)                   initial dcl 1-7
rel_fun                                internal static bit(9)                   initial dcl 1-7
repeat_fun                             internal static bit(9)                   initial dcl 1-7
return_bits                            internal static bit(9)                   initial dcl 1-7
return_string                          internal static bit(9)                   initial dcl 1-7
return_value                           internal static bit(9)                   initial dcl 1-7
return_words                           internal static bit(9)                   initial dcl 1-7
reverse_fun                            internal static bit(9)                   initial dcl 1-7
revert_on                              internal static bit(9)                   initial dcl 1-7
rewrite_file                           internal static bit(9)                   initial dcl 1-7
right_parn                             internal static bit(9)                   initial dcl 9-3
round_fun                              internal static bit(9)                   initial dcl 1-7
search_fun                             internal static bit(9)                   initial dcl 1-7
search_rev_fun                         internal static bit(9)                   initial dcl 1-7
semi_colon                             internal static bit(9)                   initial dcl 9-3
sf_par_node                            internal static bit(9)                   initial dcl 4-5
sign_fun                               internal static bit(9)                   initial dcl 1-7
signal_on                              internal static bit(9)                   initial dcl 1-7
sin_fun                                internal static bit(9)                   initial dcl 1-7
sind_fun                               internal static bit(9)                   initial dcl 1-7
skip_format                            internal static bit(9)                   initial dcl 1-7
slash                                  internal static bit(9)                   initial dcl 9-3
source_node                            internal static bit(9)                   initial dcl 4-5
sqrt_fun                               internal static bit(9)                   initial dcl 1-7
stack_ptr                              internal static bit(9)                   initial dcl 1-7
stackbaseptr_fun                       internal static bit(9)                   initial dcl 1-7
stackframeptr_fun                      internal static bit(9)                   initial dcl 1-7
stacq_fun                              internal static bit(9)                   initial dcl 1-7
statement_node                         internal static bit(9)                   initial dcl 4-5
std_arg_list                           internal static bit(9)                   initial dcl 1-7
std_call                               internal static bit(9)                   initial dcl 1-7
std_entry                              internal static bit(9)                   initial dcl 1-7
std_return                             internal static bit(9)                   initial dcl 1-7
stop                                   internal static bit(9)                   initial dcl 1-7
stream_prep                            internal static bit(9)                   initial dcl 1-7
sub                                    internal static bit(9)                   initial dcl 1-7
tan_fun                                internal static bit(9)                   initial dcl 1-7
tand_fun                               internal static bit(9)                   initial dcl 1-7
terminate_trans                        internal static bit(9)                   initial dcl 1-7
translate_fun                          internal static bit(9)                   initial dcl 1-7
trunc_fun                              internal static bit(9)                   initial dcl 1-7
unlock_file                            internal static bit(9)                   initial dcl 1-7
unpack                                 internal static bit(9)                   initial dcl 1-7
vclock_fun                             internal static bit(9)                   initial dcl 1-7
verify_fun                             internal static bit(9)                   initial dcl 1-7
verify_ltrim_fun                       internal static bit(9)                   initial dcl 1-7
verify_rev_fun                         internal static bit(9)                   initial dcl 1-7
verify_rtrim_fun                       internal static bit(9)                   initial dcl 1-7
word_to_mod2                           internal static bit(9)                   initial dcl 1-7
word_to_mod4                           internal static bit(9)                   initial dcl 1-7
word_to_mod8                           internal static bit(9)                   initial dcl 1-7
write_file                             internal static bit(9)                   initial dcl 1-7
x_format                               internal static bit(9)                   initial dcl 1-7
xor_bits                               internal static bit(9)                   initial dcl 1-7

NAMES DECLARED BY EXPLICIT CONTEXT.
decode_tag                      006612 constant        entry                    internal dcl 610 ref 440
display_exp                     003602 constant        entry                    external dcl 29 ref 587 605
modification                    000000 constant        label                    array(0:3) dcl 628 ref 626
show_exp                        006442 constant        entry                    internal dcl 596 ref 507 510 513 516

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      7160        7206    7050        7170
Length      7612    7050        26         367     107           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
display_exp                         296 external procedure  is an external procedure.  
show_exp                                internal procedure  shares stack frame of external procedure display_exp.  
decode_tag                              internal procedure  shares stack frame of external procedure display_exp.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
display_exp              000100 p                           display_exp
                         000102 q                           display_exp
                         000104 s                           display_exp
                         000106 i                           display_exp
                         000107 n                           display_exp
                         000110 line                        display_exp
                         000140 lp                          display_exp
                         000141 b36                         display_exp
                         000142 m                           display_exp
                         000143 op_name                     display_exp
                         000150 op_number                   display_exp
                         000166 designator                  decode_tag

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_e_as              alloc_cs            cat_realloc_cs      call_ext_in         call_ext_out_desc   call_ext_out
return              shorten_stack       ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
decode_node_id                display_any_node_name         display_constant              display_list
ioa_                          ioa_$nnl

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
display_stat_$brief_display




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     29 003576       338 003607       339 003613       341 003617       342 003636       344 003637       346 003644
    347 003701       349 003731       352 003754       353 003765       355 003766       357 003770       358 004016
    360 004017       362 004021       363 004054       365 004055       367 004057       368 004064       370 004137
    371 004143       373 004144       375 004146       376 004201       378 004202       380 004204       381 004207
    384 004237       388 004250       391 004307       396 004342       398 004353       403 004406       404 004411
    406 004442       407 004445       410 004476       412 004531       414 004532       415 004535       417 004537
    418 004544       420 004550       421 004554       423 004555       424 004564       426 004567       428 004571
    429 004615       430 004617       434 004622       436 004624       440 004653       449 005012       450 005016
    452 005017       453 005022       455 005024       456 005031       458 005035       459 005041       460 005047
    462 005052       464 005054       467 005100       468 005105       470 005106       471 005111       473 005113
    474 005120       476 005124       477 005130       478 005136       480 005141       482 005143       483 005167
    484 005171       488 005174       490 005176       494 005225       495 005231       498 005257       499 005263
    502 005316       503 005322       506 005351       507 005354       509 005365       510 005370       512 005401
    513 005404       515 005420       516 005423       519 005443       521 005444       522 005447       525 005476
    526 005523       529 005524       531 005526       532 005536       535 005537       537 005541       538 005567
    539 005616       540 005646       541 005676       542 005726       543 005757       544 006007       545 006034
    548 006035       550 006037       552 006065       554 006066       555 006072       556 006076       558 006113
    559 006116       561 006120       563 006123       564 006126       567 006130       569 006133       570 006137
    573 006141       575 006144       576 006150       579 006152       581 006211       582 006256       583 006265
    586 006322       587 006353       589 006372       590 006374       592 006430       594 006441       596 006442
    601 006453       604 006514       605 006545       606 006561       608 006611       610 006612       625 006614
    626 006623       628 006631       631 006636       633 006666       636 006676       638 006737       641 006770


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
