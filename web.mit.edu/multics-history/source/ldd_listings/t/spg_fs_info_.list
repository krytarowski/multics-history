	COMPILATION LISTING OF SEGMENT spg_fs_info_
	Compiled by: Multics PL/I Compiler, Release 33e, of October 6, 1992
	Compiled at: CGI                             
	Compiled on: 2000-04-17_1928.61_Mon_mdt
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 /* SPG_FS_INFO_ - Get Bulk Store and Disk I/O Activity Meters.
        7*	coded 9/24/76 by Noel I. Morris	*/
        8 
        9 /* Modified May 1984 by T. Oke for adaptive disk optimization mods. */
       10 /* Modified Oct 1984 by T. Oke to fix bugs of adaptive mods. */
       11 /* Modified Dec 1984 by T. Oke to restrict peek size to limit of buffer. */
       12 
       13 spg_fs_info_: procedure (pdio, dkio, vtio) options (separate_static);
       14 
       15 	dcl     pdio		 fixed bin,	/* paging device I/O count */
       16 	        dkio		 fixed bin,	/* disk page I/O count */
       17 	        vtio		 fixed bin;	/* VTOC I/O count */
       18 
       19 	dcl     code		 fixed bin (35),	/* error code */
       20 	        (cur_dkio, cur_vtio)	 fixed bin,	/* current values */
       21 	        dev		 fixed bin,	/* device in disktab */
       22 	        type		 fixed bin,	/* IO type in devtab */
       23 	        sx		 fixed bin,	/* disk subsystem index */
       24 	        r0dp		 ptr;		/* pointer to ring zero disk database */
       25 
       26 	dcl     buffer		 (3000) fixed bin;	/* data buffer */
       27 
       28 	dcl     dsp		 (31) ptr static init ((31) null ()), /* pointers to disk database */
       29 	        subsys_size		 (32) fixed bin (18) static, /* size of each sub-system */
       30 	        subsystems		 fixed bin static init (0), /* number of disk subsystems */
       31 	        (prev_dkio, prev_vtio) fixed bin static init (0); /* previous values */
       32 
       33 	dcl     ring0_get_$segptr	 entry (char (*), char (*), ptr, fixed bin (35)),
       34 	        ring_zero_peek_	 entry (ptr, ptr, fixed bin (18), fixed bin (35));
       35 
       36 	dcl     (addr, hbound, lbound, null, ptr, size) builtin;
       37 
       38 	if subsystems = 0 then do;			/* Get pointer to disk_seg. */
       39 		call ring0_get_$segptr ("", "disk_seg", r0dp, code);
       40 		if code = 0 then do;
       41 			disksp = addr (buffer);
       42 			call ring_zero_peek_ (r0dp, disksp, size (disk_data), code);
       43 			if code = 0 then do;
       44 				subsystems = disk_data.subsystems;
       45 				do sx = 1 to subsystems;
       46 				     dsp (sx) = ptr (r0dp, disk_data.offset (sx));
       47 				     if sx ^= disk_data.subsystems then
       48 					subsys_size (sx) = bin (disk_data.offset (sx + 1)) -
       49 					     bin (disk_data.offset (sx));
       50 				     else subsys_size (sx) = bin (disk_data.free_offset) -
       51 					     bin (disk_data.offset (sx));
       52 				end;
       53 			     end;
       54 		     end;
       55 	     end;
       56 
       57 	pdio, dkio, vtio = 0;
       58 	cur_dkio, cur_vtio = 0;
       59 	diskp = addr (buffer);
       60 	do sx = 1 to subsystems;			/* Iterate through disk subsystems. */
       61 	     call ring_zero_peek_ (dsp (sx), diskp, min (hbound (buffer, 1), subsys_size (sx)), code);
       62 	     if code ^= 0 then return;
       63 	     do dev = lbound (disktab.devtab, 1) to hbound (disktab.devtab, 1);
       64 		dp = addr (disktab.devtab (dev));
       65 		cur_dkio = cur_dkio + devtab.opt_info (PAGE_READ).seek_count +
       66 		     devtab.opt_info (PAGE_WRITE).seek_count;
       67 		cur_vtio = cur_vtio + devtab.opt_info (VTOC_READ).seek_count +
       68 		     devtab.opt_info (VTOC_WRITE).seek_count;
       69 	     end;
       70 	end;
       71 	dkio = cur_dkio - prev_dkio;
       72 	prev_dkio = cur_dkio;
       73 	vtio = cur_vtio - prev_vtio;
       74 	prev_vtio = cur_vtio;
       75 
       76 	return;
       77 
  1     1 /* Begin include file ...... dskdcl.incl.pl1 */
  1     2 
  1     3 /****^  HISTORY COMMENTS:
  1     4*  1) change(85-09-09,Fawcett), approve(85-09-09,MCR6979),
  1     5*     audit(86-01-17,CLJones), install(86-03-21,MR12.0-1033):
  1     6*     Support for FIPS dev 0.
  1     7*  2) change(88-05-10,Farley), approve(88-06-03,MCR7906),
  1     8*     audit(88-08-03,Fawcett), install(88-08-08,MR12.2-1080):
  1     9*     Added reconnect_announce_time to chantab to allow announcement of
  1    10*     reconnects at a throttled rate.  Otherwise only report them in the syserr
  1    11*     log.  Also added IO_TYPE constant array for displaying I/O type.
  1    12*                                                   END HISTORY COMMENTS */
  1    13 
  1    14 /* Structures used by the Disk DIM */
  1    15 
  1    16 /* Modified 84-03-21 by T. Oke for system wide free queue. */
  1    17 /* Modified 84-04-24 by T. Oke for dynamic channel table. */
  1    18 /* Modified 84-05-03 by T. Oke to hold sx for azm analysis. */
  1    19 /* Modified 84-05-14 by T. Oke for larger quentry and adaptive optimization. */
  1    20 /* Modifies 84-11-26 by R. A. Fawcett for device 0 (fips) */
  1    21 
  1    22 /* format: style4,delnl,insnl,tree,ifthenstmt,indnoniterend */
  1    23 
  1    24 dcl  disk_seg$ ext;					/* disk data segment */
  1    25 
  1    26 dcl  disksp ptr,					/* pointer to disk subsystem info */
  1    27      diskp ptr,					/* pointer to disk DIM info structure */
  1    28      optp ptr,					/* pointer to opt_info */
  1    29      sysp ptr;					/* pointer to sys_info */
  1    30 
  1    31 dcl  1 disk_data based (disksp) aligned,		/* disk subsystem information */
  1    32        2 subsystems fixed bin,			/* number of subsystems */
  1    33        2 free_offset bit (18),			/* offset of first unused location in segment */
  1    34        2 status_mask bit (36),			/* mask for checking for disk error */
  1    35        2 lock bit (36) unal,				/* disk_data lock */
  1    36        2 free_q like qht,				/* head/tail offsets */
  1    37        2 free_q_size fixed bin,			/* length of queue */
  1    38        2 array (32),				/* per subsystem info */
  1    39          (
  1    40          3 offset bit (18),				/* location of data for this subsystem */
  1    41          3 mbz bit (18),				/* low 18 of old  style indirect word */
  1    42          3 name char (4)
  1    43          ) unal,					/* name of subsystem */
  1    44        2 stagnate_time fixed bin (35),			/* stagnatation period */
  1    45        2 bail_outs fixed bin (35),			/* times ALM called PL1 */
  1    46        2 pad bit (36),				/* double word align */
  1    47        2 max_depth_reset_time fixed bin (71),		/* time max_reset done */
  1    48 						/* Upper bound is MAX_IO_TYPE, hard coded to avoid dynamic calculation */
  1    49        2 sys_info (0:6) like sys_info,			/* MUST BE DOUBLE WORD ALIGNED */
  1    50        2 free_q_entries (2 refer (disk_data.free_q_size)) like quentry;
  1    51 
  1    52 
  1    53 /* The following system table is used to hold the maximum queue loading
  1    54*   permitted system-wide for each IO type.  From the current loading and
  1    55*   the maximum loading a multiplier fraction is calculated.  These combine
  1    56*   to produce the final optimization multiplier to derive a Logcial Seek
  1    57*   from a Physical Seek. */
  1    58 
  1    59 dcl  1 sys_info aligned based (sysp),
  1    60        3 depth float bin (27),			/* current load */
  1    61        3 max_depth float bin (27),			/* max permissible */
  1    62        3 fraction float bin (27),			/* load fraction */
  1    63        3 depth_map bit (18) unaligned,			/* which depth counter */
  1    64        3 pad bit (18) unaligned;
  1    65 
  1    66 /* Maximum number of channels per sub-system.  Must be a power of two.  It must
  1    67*   be at or below the size of disk_init's chan_array size.  Shift factor is for
  1    68*   dctl's use. */
  1    69 
  1    70 dcl  dskdcl_chans_per_subsys fixed bin static options (constant) initial (32);
  1    71 dcl  dskdcl_chans_per_subsys_shift fixed bin static options (constant) initial (5);
  1    72 
  1    73 
  1    74 dcl  1 disktab based (diskp) aligned,			/* control structure for DIM's */
  1    75        2 lock bit (36) unal,				/* data base lock */
  1    76        2 nchan fixed bin,				/* number of disk channels */
  1    77        2 first_dev fixed bin unal,			/* frist device number  0 or 1 */
  1    78        2 last_dev fixed bin unal,			/* highest disk drive number */
  1    79        2 channels_online fixed bin,			/* number of disk channels actually in use */
  1    80        2 dev_busy bit (72),				/* busy bit for each device (only 0-63 used) */
  1    81        2 dev_queued bit (72),				/* requests queued bit for each device (only 0-63 used) */
  1    82        2 abs_mem_addr fixed bin (26) unsigned,		/* absolute memory address of this structure */
  1    83        2 channels bit (18) unal,			/* location of chantab for this subsystem */
  1    84        2 dev_index fixed bin (17) unal,			/* current device to check */
  1    85        2 errors fixed bin,				/* error count */
  1    86        2 ferrors fixed bin,				/* fatal error count */
  1    87        2 edac_errors fixed bin,			/* count of EDAC correctable errors */
  1    88        2 call_lock_meters like disk_lock_meters,		/* lock meters for call side of DIM */
  1    89        2 int_lock_meters like disk_lock_meters,		/* lock meters for interrupt side of DIM */
  1    90        2 alloc_wait_meters like disk_lock_meters,		/* meters for queue entry allocations */
  1    91        2 run_lock_meters like disk_lock_meters,		/* lock meters for run calls */
  1    92        2 devtab (0:0 refer (disktab.last_dev)) like devtab; /* device information table */
  1    93 
  1    94 dcl  1 disk_channel_table (1 refer (disktab.nchan)) like chantab based aligned;
  1    95 
  1    96 
  1    97 dcl  qp ptr,					/* pointer to queue entry */
  1    98      cp ptr;					/* pointer to channel information table */
  1    99 
  1   100 
  1   101 /* Queue entry, 6 words.  Cylinder and sector variables are over-size for
  1   102*   expansion space.  They will always be positive and upper bits can be
  1   103*   stolen for other fields.
  1   104*
  1   105*   Entries are forward and back linked to permit easy chasing and removal. */
  1   106 
  1   107 dcl  1 quentry based (qp) aligned,			/* queue entry */
  1   108 						/* WORD 1 */
  1   109        2 next bit (18) unaligned,			/* forward link */
  1   110        2 prev bit (18) unaligned,			/* back link */
  1   111 						/* WORD 2 */
  1   112        2 intrpt bit (1) unaligned,			/* completion interrupt desired */
  1   113        2 used bit (1) unaligned,			/* entry in use */
  1   114        2 type fixed bin (4) unsigned unaligned,		/* IO type */
  1   115        2 pad bit (6) unaligned,			/* future expansion */
  1   116        2 coreadd bit (24) unaligned,			/* main memory address */
  1   117 						/* WORD 3 */
  1   118        2 pvtx fixed bin (8) unsigned unaligned,		/* for AZM/ol_dump */
  1   119        2 pdi fixed bin (6) unsigned unaligned,		/* physical device */
  1   120        2 dev fixed bin (6) unsigned unaligned,		/* device in sub-sys */
  1   121        2 pad2 bit (5) unaligned,
  1   122        2 cylinder fixed bin (11) unsigned unaligned,	/* cylinder of request */
  1   123 						/* WORD 4 */
  1   124        2 n_sectors fixed bin (6) unsigned unaligned,	/* # sectors of IO */
  1   125        2 pad3 bit (9) unaligned,
  1   126        2 sector bit (21) unaligned,			/* device sector desired */
  1   127 						/* WORDS 5&6 */
  1   128        2 time fixed bin (71);				/* clock at queue */
  1   129 
  1   130 
  1   131 
  1   132 dcl  1 chantab based (cp) aligned,			/* channel information table */
  1   133        2 chx fixed bin (35),				/* io_manager channel index */
  1   134        2 ioi_ctx fixed bin (35),			/* ioi channel table index */
  1   135        2 statusp ptr,				/* pointer to hardware status word */
  1   136        2 chanid char (8),				/* channel name */
  1   137        (
  1   138        2 pad0 bit (18),
  1   139        2 in_use bit (1),				/* non-zero if channel being used */
  1   140        2 active bit (1),				/* non-zero if channel active */
  1   141        2 rsr bit (1),				/* non-zero if RSR in progress */
  1   142        2 ioi_use bit (1),				/* non-zero if channel usurped by IOI */
  1   143        2 inop bit (1),				/* non-zero if channel inoperative */
  1   144        2 broken bit (1),				/* non-zero if channel broken */
  1   145        2 action_code bit (2),				/* saved from status */
  1   146        2 pad1 bit (10)
  1   147        ) unal,
  1   148        (
  1   149        2 qrp bit (18),				/* rel ptr to queue entry */
  1   150        2 pad2 bit (3),
  1   151        2 command bit (6),				/* peripheral command */
  1   152        2 erct fixed bin (8)
  1   153        ) unal,					/* error retry count */
  1   154        2 select_data,				/* data passed to IOM on select */
  1   155          (
  1   156          3 limit bit (12),				/* limit on number of sectors */
  1   157          3 mbz bit (3),
  1   158          3 sector bit (21)
  1   159          ) unaligned,				/* sector address */
  1   160        2 reconnect_announce_time fixed bin (52),		/* reconnect announcement throttle */
  1   161        2 connect_time fixed bin (52),			/* time of last connect */
  1   162        2 connects fixed bin,				/* count of connects performed */
  1   163        2 detailed_status (0:17) bit (8) unal,		/* detailed status bytes */
  1   164        2 rstdcw bit (36),				/* restore command */
  1   165        2 scdcw bit (36),				/* select command */
  1   166        2 sddcw bit (36),				/* select data xfer */
  1   167        2 dcdcw bit (36),				/* command to read or write */
  1   168        2 dddcw bit (36),				/* data xfer DCW */
  1   169        2 dscdcw bit (36),				/* RSR command */
  1   170        2 dsddcw bit (36),				/* RSR data xfer */
  1   171        2 rssdcw bit (36),				/* RSS command */
  1   172        2 status bit (36) aligned,			/* saved status */
  1   173 						/* Lossage counters for interrupt loss. */
  1   174        2 no_io_terminate fixed bin (35),		/* no t bit from io_manager$get_status */
  1   175        2 terminate_not_active fixed bin (35),		/* terminate, but not active */
  1   176        2 no_status_terminate fixed bin (35),		/* interrupt with no terminate */
  1   177        2 status_from_run fixed bin (35);		/* status missed til run called */
  1   178 
  1   179 dcl  1 qht aligned based,				/* queue head/tail structure */
  1   180        2 sum fixed bin (35),				/* sum of depths */
  1   181        2 count fixed bin (35),			/* allocs */
  1   182        2 max_depth fixed bin (17) unaligned,		/* high water mark */
  1   183        2 depth fixed bin (17) unaligned,		/* current depth */
  1   184        2 head bit (18) unaligned,			/* queue head */
  1   185        2 tail bit (18) unaligned;			/* queue tail */
  1   186 
  1   187 dcl  dp ptr,					/* pointer to device information table */
  1   188      pvtdip ptr;					/* pointer to dim_info in PVT entry */
  1   189 
  1   190 dcl  1 devtab based (dp) aligned,			/* device information table */
  1   191        (
  1   192        2 pvtx fixed bin (8),				/* index of PVT entry for device */
  1   193        2 inop bit (1),				/* device inoperative */
  1   194        2 was_broken bit (1),				/* device previously broken */
  1   195        2 broken bit (1),				/* device down */
  1   196        2 abandoned bit (1),				/* device lost and gone forever */
  1   197        2 forward bit (1),				/* moving low->high */
  1   198        2 pad bit (10),
  1   199        2 buddy unsigned fixed bin (6),			/* other device on this spindle or 0 */
  1   200        2 pdi unsigned fixed bin (6)
  1   201        ) unal,					/* primary device index */
  1   202        2 cylinder fixed bin (35),			/* current cylinder position */
  1   203        2 comb fixed bin (35),				/* number of combs */
  1   204        2 pad1 fixed bin (35),
  1   205        2 time_inop fixed bin (52),			/* time drive became inoperative */
  1   206        2 wq like qht,				/* work queue */
  1   207 						/* Upper bound must be MAX_IO_TYPE, constant to avoid dynamic calculation. */
  1   208        2 opt_info (0:6) like opt_info;			/* optimizer */
  1   209 
  1   210 
  1   211 /* Optimizing table for device. Must be even multiple words long. */
  1   212 /* Slope and intercept define a straight line of y = intercept - slope*x
  1   213*   Multiplier is calculated from this and current system loading.
  1   214*
  1   215*   sys_info is the offset to the relevant system queue loading fraction. */
  1   216 
  1   217 dcl  1 opt_info aligned based (optp),
  1   218        3 multiplier float bin (27),			/* depth mult */
  1   219        3 slope float bin (27),			/* slope of line */
  1   220        3 intercept float bin (27),			/* Y intercept */
  1   221        3 sys_info bit (18) unaligned,			/* offset to sys_info */
  1   222        3 depth fixed bin (17) unaligned,		/* elements in queue */
  1   223        3 channel_wait fixed bin (52),			/* total channel time waiting */
  1   224        3 queue_wait fixed bin (52),			/* total queue time waiting */
  1   225        3 seek_sum fixed bin (35) unaligned,		/* sum of seeks */
  1   226        3 seek_count fixed bin (35) unaligned;		/* number of seeks */
  1   227 
  1   228 
  1   229 dcl  1 pvtdi based (pvtdip) aligned,			/* disk DIM info in PVT entry */
  1   230        (
  1   231        2 sx fixed bin (11),				/* structure index */
  1   232        2 usable_sect_per_cyl fixed bin (11),		/* # of usable sectors on disk cylinder */
  1   233        2 unused_sect_per_cyl fixed bin (11)
  1   234        ) unal;					/* # of unused sectors at end of cylinder */
  1   235 
  1   236 dcl  1 disk_lock_meters based aligned,			/* lock meters for disk DIM */
  1   237        2 count fixed bin,				/* total number of attempts */
  1   238        2 waits fixed bin,				/* number of attempts which required waiting */
  1   239        2 wait_time fixed bin (52);			/* total time spent waiting */
  1   240 
  1   241 dcl  (
  1   242      RST_LISTX init (1),				/* listx for restore */
  1   243      SC_LISTX init (2),				/* listx for select */
  1   244      DSC_LISTX init (6),				/* listx for RSR */
  1   245      RSS_LISTX init (8)
  1   246      ) fixed bin (12) static options (constant);		/* listx for RSS */
  1   247 
  1   248 /* IO types defined.  Value is also index of write_map to determine if
  1   249*   the IO type is a read or a write. */
  1   250 
  1   251 dcl  (
  1   252      PAGE_READ init (0),
  1   253      PAGE_WRITE init (1),
  1   254      VTOC_READ init (2),
  1   255      VTOC_WRITE init (3),
  1   256      TEST init (4),
  1   257      BOOTLOAD_READ init (5),
  1   258      BOOTLOAD_WRITE init (6),
  1   259      MAX_IO_TYPE init (6)
  1   260      ) fixed bin (4) static options (constant);
  1   261 
  1   262 dcl  IO_TYPE (0:6) char (16)
  1   263 	initial ("Page Read", "Page Write", "VTOC Read", "VTOC Write", "Test", "Bootload Read", "Bootload Write")
  1   264 	static options (constant);
  1   265 
  1   266 /* Map indexed by IO type to determine if operation is a read or write. */
  1   267 
  1   268 dcl  write_mapping bit (7) initial ("0101001"b) static options (constant);
  1   269 dcl  write_map (0:6) bit (1) defined (write_mapping);
  1   270 
  1   271 /* Map indexed by IO type to determine if operation is a sector IO. */
  1   272 
  1   273 dcl  sector_mapping bit (7) initial ("0011111"b) static options (constant);
  1   274 dcl  sector_map (0:6) bit (1) defined (sector_mapping);
  1   275 
  1   276 /* Map indexed by IO type to determine if operation is done on behalf of bce */
  1   277 
  1   278 dcl  bootload_mapping bit (7) initial ("0000011"b) static options (constant);
  1   279 dcl  bootload_map (0:6) bit (1) defined (bootload_mapping);
  1   280 
  1   281 /* End of include file ...... dskdcl.incl.pl1 */
       78 
       79 
       80      end;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    04/17/00  1928.6  spg_fs_info_.pl1                  >udd>sm>ds>w>ml>spg_fs_info_.pl1
78           1    08/11/88  2111.5  dskdcl.incl.pl1                   >ldd>incl>dskdcl.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
PAGE_READ                              constant        fixed bin(4,0)           initial dcl 1-251 ref 65
PAGE_WRITE                             constant        fixed bin(4,0)           initial dcl 1-251 ref 65
VTOC_READ                              constant        fixed bin(4,0)           initial dcl 1-251 ref 67
VTOC_WRITE                             constant        fixed bin(4,0)           initial dcl 1-251 ref 67
addr                                                   builtin function         dcl 36 ref 41 59 64
array                    11            based           structure                array level 2 dcl 1-31
buffer                          000110 automatic       fixed bin(17,0)          array dcl 26 set ref 41 59 61 61
chantab                                based           structure                level 1 dcl 1-132
code                            000100 automatic       fixed bin(35,0)          dcl 19 set ref 39* 40 42* 43 61* 62
cur_dkio                        000101 automatic       fixed bin(17,0)          dcl 19 set ref 58* 65* 65 71 72
cur_vtio                        000102 automatic       fixed bin(17,0)          dcl 19 set ref 58* 67* 67 73 74
dev                             000103 automatic       fixed bin(17,0)          dcl 19 set ref 63* 64*
devtab                   36            based           structure                array level 2 in structure "disktab" dcl 1-74
                                                                                  in procedure "spg_fs_info_" set ref 63 63 64
devtab                                 based           structure                level 1 dcl 1-190 in procedure "spg_fs_info_"
disk_data                              based           structure                level 1 dcl 1-31 ref 42 42
disk_lock_meters                       based           structure                level 1 dcl 1-236
diskp                           006002 automatic       pointer                  dcl 1-26 set ref 59* 61* 63 63 64
disksp                          006000 automatic       pointer                  dcl 1-26 set ref 41* 42* 42 42 44 46 47 47 47 50 50
disktab                                based           structure                level 1 dcl 1-74
dkio                                   parameter       fixed bin(17,0)          dcl 15 set ref 13 57* 71*
dp                              006004 automatic       pointer                  dcl 1-187 set ref 64* 65 65 67 67
dsp                             000000 internal static pointer                  initial array dcl 28 set ref 46* 61*
free_offset               1            based           bit(18)                  level 2 dcl 1-31 ref 50
hbound                                                 builtin function         dcl 36 ref 61 61 63
last_dev                  2(18)        based           fixed bin(17,0)          level 2 packed packed unaligned dcl 1-74 ref 63
lbound                                                 builtin function         dcl 36 ref 63
offset                   11            based           bit(18)                  array level 3 packed packed unaligned dcl 1-31 ref
                                                                                  46 47 47 50
opt_info                               based           structure                level 1 dcl 1-217 in procedure "spg_fs_info_"
opt_info                 12            based           structure                array level 2 in structure "devtab" dcl 1-190
                                                                                  in procedure "spg_fs_info_"
pdio                                   parameter       fixed bin(17,0)          dcl 15 set ref 13 57*
prev_dkio                       000137 internal static fixed bin(17,0)          initial dcl 28 set ref 71 72*
prev_vtio                       000140 internal static fixed bin(17,0)          initial dcl 28 set ref 73 74*
ptr                                                    builtin function         dcl 36 ref 46
qht                                    based           structure                level 1 dcl 1-179
quentry                                based           structure                level 1 dcl 1-107
r0dp                            000106 automatic       pointer                  dcl 19 set ref 39* 42* 46
ring0_get_$segptr               000010 constant        entry                    external dcl 33 ref 39
ring_zero_peek_                 000012 constant        entry                    external dcl 33 ref 42 61
seek_count               23            based           fixed bin(35,0)          array level 3 packed packed unaligned dcl 1-190 ref
                                                                                  65 65 67 67
size                                                   builtin function         dcl 36 ref 42 42
subsys_size                     000076 internal static fixed bin(18,0)          array dcl 28 set ref 47* 50* 61 61
subsystems                      000136 internal static fixed bin(17,0)          initial dcl 28 in procedure "spg_fs_info_" set ref
                                                                                  38 44* 45 60
subsystems                             based           fixed bin(17,0)          level 2 in structure "disk_data" dcl 1-31
                                                                                  in procedure "spg_fs_info_" ref 44 47
sx                              000104 automatic       fixed bin(17,0)          dcl 19 set ref 45* 46 46 47 47 47 47 50 50* 60* 61
                                                                                  61 61*
sys_info                               based           structure                level 1 dcl 1-59
vtio                                   parameter       fixed bin(17,0)          dcl 15 set ref 13 57* 73*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
BOOTLOAD_READ                          internal static fixed bin(4,0)           initial dcl 1-251
BOOTLOAD_WRITE                         internal static fixed bin(4,0)           initial dcl 1-251
DSC_LISTX                              internal static fixed bin(12,0)          initial dcl 1-241
IO_TYPE                                internal static char(16)                 initial array packed unaligned dcl 1-262
MAX_IO_TYPE                            internal static fixed bin(4,0)           initial dcl 1-251
RSS_LISTX                              internal static fixed bin(12,0)          initial dcl 1-241
RST_LISTX                              internal static fixed bin(12,0)          initial dcl 1-241
SC_LISTX                               internal static fixed bin(12,0)          initial dcl 1-241
TEST                                   internal static fixed bin(4,0)           initial dcl 1-251
bootload_map                           defined         bit(1)                   array packed unaligned dcl 1-279
bootload_mapping                       internal static bit(7)                   initial packed unaligned dcl 1-278
cp                                     automatic       pointer                  dcl 1-97
disk_channel_table                     based           structure                array level 1 dcl 1-94
disk_seg$                              external static fixed bin(17,0)          dcl 1-24
dskdcl_chans_per_subsys                internal static fixed bin(17,0)          initial dcl 1-70
dskdcl_chans_per_subsys_shift          internal static fixed bin(17,0)          initial dcl 1-71
null                                                   builtin function         dcl 36
optp                                   automatic       pointer                  dcl 1-26
pvtdi                                  based           structure                level 1 dcl 1-229
pvtdip                                 automatic       pointer                  dcl 1-187
qp                                     automatic       pointer                  dcl 1-97
sector_map                             defined         bit(1)                   array packed unaligned dcl 1-274
sector_mapping                         internal static bit(7)                   initial packed unaligned dcl 1-273
sysp                                   automatic       pointer                  dcl 1-26
type                                   automatic       fixed bin(17,0)          dcl 19
write_map                              defined         bit(1)                   array packed unaligned dcl 1-269
write_mapping                          internal static bit(7)                   initial packed unaligned dcl 1-268

NAME DECLARED BY EXPLICIT CONTEXT.
spg_fs_info_                    000014 constant        entry                    external dcl 13

NAMES DECLARED BY CONTEXT OR IMPLICATION.
bin                                                    builtin function         ref 47 47 50 50
min                                                    builtin function         ref 61 61

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       346         524     302         362
Length       710     302        14         147      44         141

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
spg_fs_info_                       3103 external procedure  is an external procedure.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000000 dsp                         spg_fs_info_
000076 subsys_size                 spg_fs_info_
000136 subsystems                  spg_fs_info_
000137 prev_dkio                   spg_fs_info_
000140 prev_vtio                   spg_fs_info_

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
spg_fs_info_             000100 code                        spg_fs_info_
                         000101 cur_dkio                    spg_fs_info_
                         000102 cur_vtio                    spg_fs_info_
                         000103 dev                         spg_fs_info_
                         000104 sx                          spg_fs_info_
                         000106 r0dp                        spg_fs_info_
                         000110 buffer                      spg_fs_info_
                         006000 disksp                      spg_fs_info_
                         006002 diskp                       spg_fs_info_
                         006004 dp                          spg_fs_info_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return_mac          ss_ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
ring0_get_$segptr             ring_zero_peek_

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     13 000010        38 000021        39 000024        40 000052        41 000054        42 000056        43 000075
     44 000077        45 000102        46 000111        47 000122        50 000137        52 000146        57 000150
     58 000154        59 000156        60 000160        61 000171        62 000217        63 000221        64 000233
     65 000237        67 000250        69 000261        70 000263        71 000265        72 000272        73 000274
     74 000277        76 000301


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
