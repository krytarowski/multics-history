	COMPILATION LISTING OF SEGMENT dmpr_arg_reader_
	Compiled by: Multics PL/I Compiler, Release 32f, of October 9, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 10/10/89  1420.6 mst Tue
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        6*        *                                                         *
        7*        * Copyright (c) 1972 by Massachusetts Institute of        *
        8*        * Technology and Honeywell Information Systems, Inc.      *
        9*        *                                                         *
       10*        *********************************************************** */
       11 
       12 /****^  HISTORY COMMENTS:
       13*  1) change(85-12-04,GWMay), approve(), audit(), install():
       14*     old history comments -
       15*     Written: In antiquity, probably by Dave Vinograd.
       16*     Modified: April 1983 by GA Texada for -trace -no_trace.
       17*     Modified: May 1983 by GA Texada to add -preattach.
       18*     Modified: August 1983 by GA Texada to redefine -detach & -no_detach.
       19*  2) change(85-12-04,GWMay), approve(85-12-04,MCR7310), audit(85-12-05,Dupuis),
       20*     install(85-12-16,MR12.0-1001):
       21*     Modified wakeup interval to allow a maximum of 1440 minutes. It
       22*     previously allowed 480 minutes.
       23*  3) change(89-08-31,GWMay), approve(89-10-03,MCR8135),
       24*     audit(89-10-04,Beattie), install(89-10-10,MR12.3-1089):
       25*     Disabled the -incr_skip_count argument.  Used the value
       26*     dmpr_data_.incr_skip_count as a switch for a new control argument set.
       27*     Added -purge_volume_log, -pvl, -no_purge_volume_log, -npvl arguments.
       28*                                                   END HISTORY COMMENTS */
       29 
       30 /* format: style1,ind2,^inddcls,ifthenstmt,dclind2,declareind2,ifthendo,ifthen*/
       31 
       32 dmpr_arg_reader_: proc (a_alp, a_code);
       33 
       34 /* This routine reads and handles the arguments
       35*   *   for the volume dumper.
       36*   *
       37*   *  Usage:  dcl dmpr_arg_reader_ entry ( pointer, fixed bin (35));
       38*   *
       39*   *	call dmpr_arg_reader_ (a_alp, a_code);
       40*   *
       41*   *	where
       42*   *
       43*   *
       44*   *	1) a_alp		is a pointer to the argument list (Input).
       45*   *
       46*   *	2) a_code		is a standard status code (Output).
       47*   *
       48**/
       49 
       50 dcl (ac, al)	     fixed bin;
       51 dcl pre_attach_vol	     fixed bin;
       52 dcl (a_code, code)	     fixed bin (35);
       53 dcl (a_alp, alp, ap)     ptr;
       54 dcl arg		     char (al) based (ap);
       55 dcl myname	     char (16) int static init ("dmpr_arg_reader_") options (constant);
       56 
       57 dcl error_table_$bad_arg ext fixed bin (35);
       58 dcl error_table_$noarg   ext fixed bin (35);
       59 dcl error_table_$badopt  ext fixed bin (35);
       60 
       61 dcl get_wdir_	     entry returns (char (168));
       62 dcl suffixed_name_$make  entry (char (*), char (*), char (*) aligned, fixed bin (35));
       63 dcl dmpr_report_$error_output entry options (variable);
       64 dcl convert_date_to_binary_ entry (char (*), fixed bin (71), fixed bin (35));
       65 dcl cu_$arg_ptr_rel	     entry (fixed bin, ptr, fixed bin, fixed bin (35), ptr);
       66 dcl cv_dec_check_	     entry (char (*), fixed bin (35)) returns (fixed bin);
       67 
       68 dcl hbound	     builtin;
       69 
       70     a_code = 0;					/* set up and copy args */
       71     alp = a_alp;					/* arg list pointer */
       72     do ac = 1 by 1;					/* scan the arg list */
       73       call cu_$arg_ptr_rel (ac, ap, al, code, alp);
       74       if code ^= 0 then
       75 	 if code = error_table_$noarg then return;
       76 	 else go to err;				/* error if code other than noargs */
       77       if arg = "-control" then do;
       78 	call suffixed_name_$make (get_arg (), "dump", dmpr_data_.control_name, code);
       79 	if code ^= 0 then goto bad_arg;
       80         end;
       81       else if arg = "-operator" then
       82 	 dmpr_data_.operator = get_arg ();
       83       else if arg = "-output_volume_desc" then		/* this must be attach description  */
       84 	 dmpr_data_.att_desc = get_arg ();
       85       else if arg = "-wakeup" then do;			/* this must be wakeup interval in minutes */
       86 	dmpr_data_.wakeup_interval = cv_dec_check_ (get_arg (), code);
       87 	if code ^= 0 then do;
       88 bad_intr:	    call dmpr_report_$error_output (0, myname, "Invalid interval ^a specified", arg);
       89 	    goto bad_arg;
       90 	  end;
       91 	if dmpr_data_.wakeup_interval < 1 | dmpr_data_.wakeup_interval > 1440 then goto bad_intr;
       92 	dmpr_data_.wakeup_interval = dmpr_data_.wakeup_interval * 60000000;
       93 						/* interval converted to microseconds */
       94         end;
       95       else if arg = "-restart" then			/* restart at pvname given */
       96 	 dmpr_data_.restart_pvname = get_arg ();
       97       else if arg = "-mod_after" then do;
       98 	call convert_date_to_binary_ (get_arg (), dmpr_data_.mod_after_time, code);
       99 	if code ^= 0 then do;
      100 	    call dmpr_report_$error_output (0, myname, "Invalid time ^a specified",
      101 	      arg);
      102 	    goto bad_arg;
      103 	  end;
      104         end;
      105       else if arg = "-incr_skip_count" then do;
      106 	  call dmpr_report_$error_output (error_table_$bad_arg, myname, "
      107 The -incr_skip_count function has been replaced by -purge_volume_log.", arg);
      108 	  goto bad_arg;
      109 	  end;
      110       else if arg = "-purge_volume_log" | arg = "-pvl" then
      111 	  dmpr_data_.incr_skip_count = 0; /* use the old value as a switch */
      112       else if arg = "-no_purge_volume_log" | arg = "-npvl" then
      113 	  dmpr_data_.incr_skip_count = -1; /* use the old value as a switch */
      114       else if arg = "-pre_attach" | arg = "-preattach" then do;
      115 	pre_attach_vol = cv_dec_check_ (get_arg (), code);
      116 	if code ^= 0 then do;
      117 bad_mv:	    call dmpr_report_$error_output (0, myname,
      118 	      "Invalid preattach vol number ^a specified", arg);
      119 	    goto bad_arg;
      120 	  end;
      121 	if pre_attach_vol > hbound (dmpr_data_.pre_attach_volname, 1) then goto bad_mv;
      122 	dmpr_data_.pre_attach_vol = pre_attach_vol;
      123         end;
      124       else if arg = "-working_dir" | arg = "-wd" then
      125 	 dmpr_data_.sys_dir = get_wdir_ ();
      126       else if arg = "-accounting" then dmpr_data_.accounting = "1"b;
      127       else if arg = "-auto" then dmpr_data_.auto_vol = "1"b;/* enable auto volume selection */
      128       else if arg = "-error_on" then dmpr_data_.err_online = "1"b; /* output errors online */
      129       else if arg = "-names" then dmpr_data_.names = "1"b;	/* collect all names */
      130       else if arg = "-detach" then do;			/* only valid for incrementals		*/
      131 	 if dmpr_data_.dump_type ^= incr then goto bad_arg;
      132 	 dmpr_data_.detach = "1"b;
      133 	 end;
      134       else if arg = "-no_detach" then do;		/* only for incr's				*/
      135 	 if dmpr_data_.dump_type ^= incr then goto bad_arg;
      136 	 dmpr_data_.detach = ""b; /* don't detach */
      137 	 end;
      138       else if arg = "-no_object" then dmpr_data_.no_object = "1"b; /* don't activate object */
      139       else if arg = "-cumulative" then dmpr_data_.reset = "1"b; /* reset bit map. */
      140       else if arg = "-manual_free" then dmpr_data_.manual_free = "1"b;
      141       else if arg = "-no_update" then dmpr_data_.no_update = "1"b; /* don't modify vtoce */
      142       else if arg = "-trace" then dmpr_data_.trace = "1"b;
      143       else if arg = "-no_trace" then dmpr_data_.trace = "0"b;
      144       else do;
      145 	code = error_table_$badopt;
      146 	goto err;
      147         end;
      148     end;
      149 
      150 bad_arg: code = error_table_$bad_arg;
      151 err: call dmpr_report_$error_output (code, myname, "^a", arg);
      152     a_code = code;					/* return an error code */
      153     return;
      154 
      155 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
      156 
      157 
      158 get_arg: proc returns (char (*));
      159     ac = ac + 1;
      160     call cu_$arg_ptr_rel (ac, ap, al, code, alp);
      161     if code ^= 0 then goto err;
      162 
      163     return (arg);
      164   end get_arg;
      165 
  1     1 /* BEGIN INCLUDE FILE ... dmpr_data_.incl.pl1 Feb 1976 */
  1     2 /* format: style1,ind2,^inddcls,ifthenstmt,dclind2,declareind2,ifthendo,ifthen*/
  1     3 /* Modified 7/79 by D. Vinograd to add new variables and change to based structure */
  1     4 /* Modified: 1/26/83 by GA Texada to add cur_vol_open and change version to 2.	   */
  1     5 /* Modified: 04/05/83 by GA Texada to add trace switch to support tracing.	   */
  1     6 /* Modified 04/84 by GA Texada to change to version 3 (disk_type). This begins the adding of new items	*/
  1     7 /* to the END of the structure to facilite easy additions.						*/
  1     8 dcl dmprp		     ptr ext static init (null);
  1     9 dcl dmpr_data_version_2  fixed bin int static init (2) options (constant);
  1    10 dcl dmpr_data_version_3  fixed bin int static init (3) options (constant);
  1    11 						/* Version 3 is current			*/
  1    12 
  1    13 dcl 1 dmpr_data_	     aligned based (dmprp),
  1    14     2 version	     fixed bin,			/* version */
  1    15     2 lock	     bit (36),			/* inter-lock */
  1    16     2 ptrs,
  1    17       3 pre_attach_pvlp  (50) ptr,			/* array of pvolog ptrs */
  1    18       3 contents_namesp  ptr,				/* ptr to contents name seg */
  1    19       3 pre_attach_iocbp (50) ptr,			/* array of output iocbp */
  1    20       3 pvlp	     ptr,				/* ptr to dump volume log */
  1    21       3 account_iocbp    ptr,				/* iocbp for account seg */
  1    22       3 infop	     ptr,				/* ptr to info seg */
  1    23       3 inputp	     ptr,				/* ptr to input storage for sup interface */
  1    24       3 recordp	     ptr,				/* ditto for output */
  1    25       3 control_iocbp    ptr,				/* iocbp for dump control segment */
  1    26       3 error_iocbp	     ptr,				/* iocbp for error output file */
  1    27       3 outputvol_iocbp  ptr,				/* iocbp for dump volume */
  1    28       3 contentsp	     ptr,				/* ptr to dump volume table of contents */
  1    29       3 bvlp	     ptr,				/* ptr to volume log */
  1    30       3 dirp	     ptr,				/* ptr to directory buffer seg */
  1    31       3 segp	     ptr,				/* ptr to segment to be dumped */
  1    32       3 fcbp	     ptr,				/* ptr to file control block for contents_name msf */
  1    33       3 vpp	     ptr,				/* ptr to volume pool */
  1    34     2 fixed_bin,
  1    35       3 retrys	     fixed bin,			/* number of time segment disappeared while being dumped */
  1    36       3 physical_volume_dir_num fixed bin,		/* number of dirs dumped from this physical volume */
  1    37       3 physical_volume_dir_rec fixed bin,		/* number of dir records on this physical volume */
  1    38       3 physical_volume_seg_num fixed bin,		/* number of segs dumped from this physical volume */
  1    39       3 physical_volume_seg_rec fixed bin,		/* number of seg records dumped from this physical volume  */
  1    40       3 vol_log_dir_num  fixed bin,			/*  dirs dumped from pvol to dump vol */
  1    41       3 vol_log_dir_rec  fixed bin,			/*  dir rec on this pvol to dump vol */
  1    42       3 vol_log_seg_num  fixed bin,			/*  segs dumped from pvol to dump vol */
  1    43       3 vol_log_seg_rec  fixed bin,			/*  seg rec dumped from pvol to dump vol  */
  1    44       3 dump_volume_dir_num fixed bin,			/* number of dirs dumped on this dump volume */
  1    45       3 dump_volume_dir_rec fixed bin,			/* number of dir records on this dump volume */
  1    46       3 dump_volume_seg_num fixed bin,			/* number of segs dumped on this dump volume */
  1    47       3 dump_volume_seg_rec fixed bin,			/* number of seg records dumped on this dump volume  */
  1    48       3 num_null_vtoce   fixed bin,			/* number of null vtoce dumped from this physical volume */
  1    49       3 num_vtoce_only   fixed bin,			/* number of vtoce only  */
  1    50       3 mod_after_time   fixed bin (71),		/* dump all modified since this date */
  1    51       3 dump_type	     fixed bin,			/* type of dump */
  1    52       3 save_time	     fixed bin (71),		/* date, time of start of dump */
  1    53       3 start_time	     fixed bin (71),		/* start time of physical volume pass */
  1    54       3 wakeup_interval  fixed bin (71),		/* interval between wakeups of dumper in micro secs. */
  1    55       3 incr_ev_chn	     fixed bin (71),		/* event chn used to wakeup incremental dumper */
  1    56       3 incr_skip_count  fixed bin,			/* number of incr cycles skiped befor purging */
  1    57       3 pre_attach_vol   fixed bin,			/* if greater then 1 then pre attach output streams */
  1    58       3 vol_idx	     fixed bin,			/* index of multi volume attachment sequence */
  1    59       3 component	     fixed bin,			/* msf component of contents_name seg */
  1    60     2 bits,
  1    61       3 volid	     bit (36),			/* uid of dump volume */
  1    62       3 pre_attach_volid (50) bit (36),			/* array of volid */
  1    63       3 cycle_uid	     bit (36),			/* uid of this dump cycle */
  1    64       3 pvid	     bit (36),			/* uid of physical volume being dumped */
  1    65       3 flags,
  1    66       ( 4 purge	     bit (1),			/* if on purge volume logs */
  1    67         4 auto_vol	     bit (1),			/* if on use automatic dump volume selection */
  1    68         4 disable_error_report bit (1),			/* if on disables error reporting */
  1    69         4 arg_init	     bit (1),			/* if on indicates args have been processed */
  1    70         4 manual_free    bit (1),			/* on if manual free will be done */
  1    71         4 err_online     bit (1),			/* Flag error output to be online, default to a file */
  1    72         4 detach	     bit (1),			/* if on control detachment of dump volume */
  1    73         4 no_object	     bit (1),			/* if on not copy object from ring 0 */
  1    74         4 no_update	     bit (1),			/* if on prevent vtoce update */
  1    75         4 data_init	     bit (1),			/* if on indicates that data structure has been initialized */
  1    76         4 reset	     bit (1),			/* if on put items back on list */
  1    77         4 accounting     bit (1),			/* if on enables accounting */
  1    78         4 dmpr_asleep    bit (1),			/* dumper is asleep - interlock to prevent restart of last volume */
  1    79         4 dump_in_progress bit (1),			/* recursive entry interlock */
  1    80         4 not_reported   bit (1),			/* on if output counts not reported */
  1    81         4 names	     bit (1),			/* collect all names from dirs that are dumped */
  1    82         4 cur_vol_open   bit (1),			/* if a successful open on this volname		*/
  1    83         4 trace	     bit (1),			/* ON => trace				*/
  1    84         4 pad	     bit (18)) unal,		/* fill out the word properly			*/
  1    85       3 old_256K_switch bit(2) aligned,			/* 256K segs enabled prior to this dumper invocation?*/
  1    86       3 rpv_pvid        bit (36),			/* because the label really doesn't have it	*/
  1    87     2 chars,
  1    88       3 sys_dir	     char (168),			/* system directory where all volume dumper data lives */
  1    89       3 prev_volname     char (32),
  1    90       3 pre_attach_volname (50) char (32),		/* array of volnames */
  1    91       3 io_module	     char (32),			/* name of attached outer module for output io */
  1    92       3 pvname	     char (32),			/* name of physical volume being dumped */
  1    93       3 att_desc	     char (256),			/* attach description for output */
  1    94       3 volname	     char (32),			/* name of dump volume */
  1    95       3 control_name     char (32),			/* dump control file name   */
  1    96       3 myname	     char (32),			/* name of entry called */
  1    97       3 operator	     char (32),			/* operator name */
  1    98       3 restart_pvname   char (32),			/* where to restart complete or consolidated dump */
  1    99       3 lvname	     char (32),			/* name of logical volume being dumped */
  1   100    2 disk_type fixed bin;				/* disk type for recording in the volog		*/
  1   101 	
  1   102 
  1   103 /* END OF INCLUDE FILE ... dmpr_data_.incl.pl1 */
      166 
      167 
  2     1 /* BEGIN INCLUDE FILE ... backup_static_variables.incl.pl1 ... March 1976 */
  2     2 
  2     3 
  2     4 dcl  incr fixed bin init (1) internal static options (constant); /* incremental dump mode */
  2     5 dcl  cons fixed bin init (2) internal static options (constant); /* consolidated dump mode */
  2     6 dcl  comp fixed bin init (3) internal static options (constant); /* complete dump mode */
  2     7 dcl  backup_version_1 fixed bin init (1) static internal options (constant); /* backup_version_1 of input/output structures */
  2     8 
  2     9 
  2    10 
  2    11 /* END INCLUDE FILE ... backup_static_variables.incl.pl1 */
      168 
  3     1 /* BEGIN INCLUDE FILE ... backup_volume_header ... Feb 1976 */
  3     2 
  3     3 dcl  hdp ptr;					/* ptr to header */
  3     4 
  3     5 dcl 1 backup_volume_header based (hdp) aligned,
  3     6     2 pattern1 bit (36),				/* unique  word 1 */
  3     7     2 rec1_type fixed bin,				/* record 1 type */
  3     8     2 rec1_len fixed bin,				/* length in chars */
  3     9     2 pattern2 bit (36),				/* unique word 2 */
  3    10     2 rec2_type fixed bin,				/* record 2 type */
  3    11     2 rec2_len fixed bin,				/* length in chars */
  3    12     2 pattern3 bit (36),				/* unique word 3 */
  3    13     2 time_dumped bit (36);				/* dump time of this record */
  3    14 
  3    15 dcl  vtoce_type fixed bin static init (1) options (constant); /* type code for vtoce */
  3    16 dcl  dir_type fixed bin static init (2) options (constant); /* type code for directory */
  3    17 dcl  seg_type fixed bin static init (3) options (constant); /* type code for segment */
  3    18 dcl  null_type fixed bin static init (4) options (constant); /* type code for null record */
  3    19 dcl  volume_log_type fixed bin static init (5) options (constant); /* type code for volume log */
  3    20 dcl  prev_output_log_type fixed bin static init (6) options (constant); /* type code for prev output log */
  3    21 dcl  contents_type fixed bin static init (7) options (constant); /* type code for contents segment of previous volume */
  3    22 dcl  info_type fixed bin static init (8) options (constant); /* type code for info structure */
  3    23 
  3    24 dcl  pattern1 bit (36) int static init ("110111000011001100011101101010100101"b) options (constant);
  3    25 dcl  pattern2 bit (36) int static init ("101001010101101110001100110000111011"b) options (constant);
  3    26 dcl  pattern3 bit (36) int static init ("001000111100110011100010010101011010"b) options (constant);
  3    27 
  3    28 /* END INCLUDE FILE ... backup_volume_header */
      169 
      170   end dmpr_arg_reader_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    10/10/89  1359.2  dmpr_arg_reader_.pl1              >special_ldd>install>MR12.3-1089>dmpr_arg_reader_.pl1
166          1    10/24/84  0933.1  dmpr_data_.incl.pl1               >ldd>include>dmpr_data_.incl.pl1
168          2    09/05/80  1136.5  backup_static_variables.incl.pl1  >ldd>include>backup_static_variables.incl.pl1
169          3    09/05/80  1136.5  backup_volume_header.incl.pl1     >ldd>include>backup_volume_header.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
a_alp                                  parameter       pointer                  dcl 53 ref 32 71
a_code                                 parameter       fixed bin(35,0)          dcl 52 set ref 32 70* 152*
ac                              000100 automatic       fixed bin(17,0)          dcl 50 set ref 72* 73* 159* 159 160*
accounting              475(11)        based           bit(1)                   level 4 packed packed unaligned dcl 1-13 set ref
                                                                                  126*
al                              000101 automatic       fixed bin(17,0)          dcl 50 set ref 73* 77 81 83 85 88 88 95 97 100 100
                                                                                  105 106 106 110 110 112 112 114 114 117 117 124
                                                                                  124 126 127 128 129 130 134 138 139 140 141 142
                                                                                  143 151 151 160* 163
alp                             000104 automatic       pointer                  dcl 53 set ref 71* 73* 160*
ap                              000106 automatic       pointer                  dcl 53 set ref 73* 77 81 83 85 88 95 97 100 105 106
                                                                                  110 110 112 112 114 114 117 124 124 126 127 128
                                                                                  129 130 134 138 139 140 141 142 143 151 160* 163
arg                                    based           char                     packed unaligned dcl 54 set ref 77 81 83 85 88* 95
                                                                                  97 100* 105 106* 110 110 112 112 114 114 117* 124
                                                                                  124 126 127 128 129 130 134 138 139 140 141 142
                                                                                  143 151* 163
att_desc               1422            based           char(256)                level 3 dcl 1-13 set ref 83*
auto_vol                475(01)        based           bit(1)                   level 4 packed packed unaligned dcl 1-13 set ref
                                                                                  127*
bits                    410            based           structure                level 2 dcl 1-13
chars                   500            based           structure                level 2 dcl 1-13
code                            000103 automatic       fixed bin(35,0)          dcl 52 set ref 73* 74 74 78* 79 86* 87 98* 99 115*
                                                                                  116 145* 150* 151* 152 160* 161
control_name           1532            based           char(32)                 level 3 dcl 1-13 set ref 78*
convert_date_to_binary_         000024 constant        entry                    external dcl 64 ref 98
cu_$arg_ptr_rel                 000026 constant        entry                    external dcl 65 ref 73 160
cv_dec_check_                   000030 constant        entry                    external dcl 66 ref 86 115
detach                  475(06)        based           bit(1)                   level 4 packed packed unaligned dcl 1-13 set ref
                                                                                  132* 136*
dmpr_data_                             based           structure                level 1 dcl 1-13
dmpr_report_$error_output       000022 constant        entry                    external dcl 63 ref 88 100 106 117 151
dmprp                           000032 external static pointer                  initial dcl 1-8 ref 78 81 83 86 91 91 92 92 95 98
                                                                                  110 112 121 122 124 126 127 128 129 131 132 135
                                                                                  136 138 139 140 141 142 143
dump_type               372            based           fixed bin(17,0)          level 3 dcl 1-13 ref 131 135
err_online              475(05)        based           bit(1)                   level 4 packed packed unaligned dcl 1-13 set ref
                                                                                  128*
error_table_$bad_arg            000010 external static fixed bin(35,0)          dcl 57 set ref 106* 150
error_table_$badopt             000014 external static fixed bin(35,0)          dcl 59 ref 145
error_table_$noarg              000012 external static fixed bin(35,0)          dcl 58 ref 74
fixed_bin               350            based           structure                level 2 dcl 1-13
flags                   475            based           structure                level 3 dcl 1-13
get_wdir_                       000016 constant        entry                    external dcl 61 ref 124
hbound                                                 builtin function         dcl 68 ref 121
incr                                   constant        fixed bin(17,0)          initial dcl 2-4 ref 131 135
incr_skip_count         404            based           fixed bin(17,0)          level 3 dcl 1-13 set ref 110* 112*
manual_free             475(04)        based           bit(1)                   level 4 packed packed unaligned dcl 1-13 set ref
                                                                                  140*
mod_after_time          370            based           fixed bin(71,0)          level 3 dcl 1-13 set ref 98*
myname                          000000 constant        char(16)                 initial packed unaligned dcl 55 set ref 88* 100*
                                                                                  106* 117* 151*
names                   475(15)        based           bit(1)                   level 4 packed packed unaligned dcl 1-13 set ref
                                                                                  129*
no_object               475(07)        based           bit(1)                   level 4 packed packed unaligned dcl 1-13 set ref
                                                                                  138*
no_update               475(08)        based           bit(1)                   level 4 packed packed unaligned dcl 1-13 set ref
                                                                                  141*
operator               1552            based           char(32)                 level 3 dcl 1-13 set ref 81*
pre_attach_vol          405            based           fixed bin(17,0)          level 3 in structure "dmpr_data_" dcl 1-13
                                                                                  in procedure "dmpr_arg_reader_" set ref 122*
pre_attach_vol                  000102 automatic       fixed bin(17,0)          dcl 51 in procedure "dmpr_arg_reader_" set ref 115*
                                                                                  121 122
pre_attach_volname      562            based           char(32)                 array level 3 dcl 1-13 ref 121
reset                   475(10)        based           bit(1)                   level 4 packed packed unaligned dcl 1-13 set ref
                                                                                  139*
restart_pvname         1562            based           char(32)                 level 3 dcl 1-13 set ref 95*
suffixed_name_$make             000020 constant        entry                    external dcl 62 ref 78
sys_dir                 500            based           char(168)                level 3 dcl 1-13 set ref 124*
trace                   475(17)        based           bit(1)                   level 4 packed packed unaligned dcl 1-13 set ref
                                                                                  142* 143*
wakeup_interval         400            based           fixed bin(71,0)          level 3 dcl 1-13 set ref 86* 91 91 92* 92

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
backup_version_1                       internal static fixed bin(17,0)          initial dcl 2-7
backup_volume_header                   based           structure                level 1 dcl 3-5
comp                                   internal static fixed bin(17,0)          initial dcl 2-6
cons                                   internal static fixed bin(17,0)          initial dcl 2-5
contents_type                          internal static fixed bin(17,0)          initial dcl 3-21
dir_type                               internal static fixed bin(17,0)          initial dcl 3-16
dmpr_data_version_2                    internal static fixed bin(17,0)          initial dcl 1-9
dmpr_data_version_3                    internal static fixed bin(17,0)          initial dcl 1-10
hdp                                    automatic       pointer                  dcl 3-3
info_type                              internal static fixed bin(17,0)          initial dcl 3-22
null_type                              internal static fixed bin(17,0)          initial dcl 3-18
pattern1                               internal static bit(36)                  initial packed unaligned dcl 3-24
pattern2                               internal static bit(36)                  initial packed unaligned dcl 3-25
pattern3                               internal static bit(36)                  initial packed unaligned dcl 3-26
prev_output_log_type                   internal static fixed bin(17,0)          initial dcl 3-20
seg_type                               internal static fixed bin(17,0)          initial dcl 3-17
volume_log_type                        internal static fixed bin(17,0)          initial dcl 3-19
vtoce_type                             internal static fixed bin(17,0)          initial dcl 3-15

NAMES DECLARED BY EXPLICIT CONTEXT.
bad_arg                         001327 constant        label                    dcl 150 ref 79 89 102 108 119 131 135
bad_intr                        000466 constant        label                    dcl 88 ref 91
bad_mv                          001030 constant        label                    dcl 117 ref 121
dmpr_arg_reader_                000222 constant        entry                    external dcl 32
err                             001332 constant        label                    dcl 151 ref 74 146 161
get_arg                         001371 constant        entry                    internal dcl 158 ref 78 81 83 86 95 98 115

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1610        1644    1437        1620
Length      2126    1437        34         245     150           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
dmpr_arg_reader_                    166 external procedure  is an external procedure.  
get_arg                              76 internal procedure  uses returns(char(*)) or returns(bit(*)).  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
dmpr_arg_reader_         000100 ac                          dmpr_arg_reader_
                         000101 al                          dmpr_arg_reader_
                         000102 pre_attach_vol              dmpr_arg_reader_
                         000103 code                        dmpr_arg_reader_
                         000104 alp                         dmpr_arg_reader_
                         000106 ap                          dmpr_arg_reader_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        call_int_this_desc  return_mac          tra_ext_1           mpfx2
shorten_stack       ext_entry           int_entry_desc      return_chars_eis

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
convert_date_to_binary_       cu_$arg_ptr_rel               cv_dec_check_                 dmpr_report_$error_output
get_wdir_                     suffixed_name_$make

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
dmprp                         error_table_$bad_arg          error_table_$badopt           error_table_$noarg




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     32 000216        70 000227        71 000231        72 000234        73 000236        74 000255        77 000263
     78 000271        79 000332        80 000335        81 000336        83 000366        85 000417        86 000424
     87 000463        88 000466        89 000522        91 000523        92 000533        94 000537        95 000540
     97 000570        98 000575        99 000630       100 000633       102 000667       104 000670       105 000671
    106 000675       108 000730       110 000731       112 000746       114 000764       115 000774       116 001025
    117 001030       119 001064       121 001065       122 001070       123 001074       124 001075       126 001123
    127 001135       128 001147       129 001161       130 001173       131 001177       132 001205       133 001207
    134 001210       135 001214       136 001222       137 001224       138 001225       139 001237       140 001251
    141 001263       142 001275       143 001307       145 001321       146 001324       148 001325       150 001327
    151 001332       152 001364       153 001367       158 001370       159 001376       160 001400       161 001416
    163 001424


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
