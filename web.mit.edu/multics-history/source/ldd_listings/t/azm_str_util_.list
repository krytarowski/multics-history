	COMPILATION LISTING OF SEGMENT azm_str_util_
	Compiled by: Multics PL/I Compiler, Release 28d, of October 4, 1983
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 11/19/84  1133.2 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 
        7 azm_str_util_:
        8      proc (P_amu_info_ptr, P_strp, P_code);
        9 						/* format: style4,delnl,insnl,ifthenstmt,indnoniterend,ifthendo,ifthen,^thendo */
       10 
       11 
       12 dcl  P_amu_info_ptr ptr;
       13 dcl  P_strp bit (18);
       14 dcl  P_code fixed bin (35);
       15 
       16 dcl  code fixed bin (35);
       17 dcl  save_process_index fixed bin;
       18 dcl  loop_exit bit (1);
       19 dcl  exit_sw bit (1);
       20 dcl  1 seg_trailer like str;
       21 dcl  str_size fixed bin (18);
       22 dcl  seg_name char (32);
       23 dcl  str_segno fixed bin;
       24 dcl  offset fixed bin (18);
       25 dcl  pds_dstep ptr;
       26 dcl  1 hard_cur like hardcore_cur;
       27 dcl temp_dstep bit (18);
       28 dcl temp_indx fixed bin;
       29 dcl  amu_$definition_ptr entry (ptr, char (*), char (*), fixed bin (35)) returns (ptr);
       30 dcl  amu_$do_translation entry (ptr, fixed bin, ptr, fixed bin (18), fixed bin (18), fixed bin (35));
       31 dcl  amu_$do_translation_by_ptr entry (ptr, ptr, fixed bin (18), ptr, fixed bin (35));
       32 dcl  amu_$fdump_mpt_change_idx entry (ptr, fixed bin);
       33 dcl  amu_$hardcore_info_set_cur_ptrs entry (ptr, ptr);
       34 dcl  amu_$slt_search_seg_num entry (ptr, ptr, char (32), fixed bin, fixed bin (35));
       35 dcl  amu_$fdump_mpt_current_process entry (ptr);
       36 dcl  ioa_$nnl entry () options (variable);
       37 
       38 dcl (addr, fixed, hbound, size)	builtin;
       39 
       40 	amu_info_ptr = P_amu_info_ptr;
       41 	offset = fixed (P_strp, 18);
       42 	if offset = 0 then return;
       43 	save_process_index = amu_info.process_idx;
       44 
       45 /* change to first process in fdump */
       46 
       47 	call amu_$fdump_mpt_change_idx (amu_info_ptr, 0);
       48 
       49 	hardcore_cur_ptr = addr (hard_cur);
       50 	call amu_$hardcore_info_set_cur_ptrs (amu_info_ptr, hardcore_cur_ptr);
       51 
       52 /* now get the str_seg data */
       53 
       54 	seg_name = "str_seg";
       55 	call amu_$slt_search_seg_num (hard_cur.sltp, hard_cur.sltntp, seg_name, str_segno, code);
       56 	if code ^= 0 then goto str_exit;
       57 
       58 
       59 	str_size = size (str);
       60 	strp = addr (seg_trailer);
       61 	call amu_$do_translation (amu_info_ptr, str_segno, strp, offset, str_size, code);
       62 	if code ^= 0 then goto str_exit;
       63 
       64 /* now find the first process that this seg known to  */
       65 
       66 	do while (str.bp ^= "0"b);
       67 	     offset = fixed (str.bp, 18);
       68 	     call amu_$do_translation (amu_info_ptr, str_segno, strp, offset, str_size, code);
       69 	     if code ^= 0 then do;
       70 		P_code = code;
       71 		return;
       72 		end;
       73 	end;
       74 
       75 /* get pointer of prds$dstep */
       76 
       77 	pds_dstep = amu_$definition_ptr (amu_info_ptr, "pds", "dstep", code);
       78 	if code ^= 0 then do;
       79 	     P_code = code;
       80 	     return;
       81 	     end;
       82 
       83 /*  now start walking the str thread matching up str.dstep with pds$dstep */
       84 
       85 	exit_sw = "0"b;
       86 	do while (exit_sw = "0"b);
       87 	     loop_exit = "0"b;
       88 	     do temp_indx = 0 to hbound (fdump_process_table.array, 1) while (^loop_exit);
       89 		call amu_$fdump_mpt_change_idx (amu_info_ptr, temp_indx);
       90 		call amu_$do_translation_by_ptr (amu_info_ptr, pds_dstep, 1, addr (temp_dstep), code);
       91 		if code ^= 0 then goto str_exit;
       92 		if temp_dstep = str.dstep /* found a process */ then do;
       93 		     loop_exit = "1"b;
       94 		     call ioa_$nnl ("^o in ", str.segno);
       95 		     call amu_$fdump_mpt_current_process (amu_info_ptr);
       96 		     end;
       97 	     end;
       98 	     call amu_$fdump_mpt_change_idx (amu_info_ptr, save_process_index);
       99 
      100 	     if str.fp = "0"b then
      101 		exit_sw = "1"b;
      102 	     else do;
      103 		offset = fixed (str.fp, 18);
      104 		call amu_$do_translation (amu_info_ptr, str_segno, strp, offset, str_size, code);
      105 		if code ^= 0 then goto str_exit;
      106 		end;
      107 	end;
      108 str_exit:
      109 	call amu_$fdump_mpt_change_idx (amu_info_ptr, save_process_index);
      110 	P_code = code;
      111 	return;
      112 
  1     1 /*	BEGIN INCLUDE FILE amu_fdump_info.incl.pl1	*/
  1     2 
  1     3 dcl 1 fdump_info aligned based (amu_info.fdump_info_ptr),
  1     4     2 version char (8),
  1     5     2 ref_count fixed bin,				/* number of initiations */
  1     6 
  1     7     2 erf_name char (32),				/* ERF name for this dump */
  1     8     2 dump_dname char (168),				/* location of the dump */
  1     9     2 dump_ename char (32),				/* ename of component zero */
  1    10     2 system_id char (8),				/* the system_id of this erf */
  1    11     2 version_id char (8),				/* the version id of this erf */
  1    12     2 dump_seg_0_uid bit (36) aligned,			/* for determining EQ-ness and gullibility checking */
  1    13 
  1    14     2 n_dump_segs fixed bin,				/* number of real segs in the dump */
  1    15     2 copy_block_ptr pointer, 			/* pointer to chain of temp segment blocks */
  1    16 
  1    17     2 dump_seg_ptr (0:31) pointer,			/* pointer and length arrays */
  1    18     2 dump_seg_lth (0:31) fixed bin (18),
  1    19 
  1    20     2 fdump_process_table_ptr pointer;			/* pointer to array describing processes */
  1    21 
  1    22 
  1    23 dcl 1 fdump_process_table aligned based (fdump_info.fdump_process_table_ptr),
  1    24     2 size fixed bin,				/* number of entries */
  1    25 
  1    26     2 array (0:alloc_fdump_process_table_size - 1 refer (fdump_process_table.size)) like fp_table;
  1    27 
  1    28 dcl 1 fp_table based (fp_table_ptr),
  1    29       2 first_seg fixed bin,
  1    30       2 last_seg fixed bin,
  1    31       2 process_info_ptr pointer unaligned,		/* pointer to process_info structure, if filled in */
  1    32       2 dmp_seg_indx fixed bin,			/* dump seg index where process can be found */
  1    33       2 dmp_seg_offset fixed bin (24),			/* offset in the segment refered to by dmp_seg_indx where process starts */
  1    34       2 cpu_name char (1),
  1    35       2 dbr fixed bin (24),				/* address portion of DBR */
  1    36       2 apte_offset fixed bin (18);
  1    37 
  1    38 dcl fp_table_ptr ptr;
  1    39 
  1    40 dcl  alloc_fdump_process_table_size fixed bin;
  1    41 
  1    42 dcl  AMU_FDUMP_INFO_VERSION_1 char (8) internal static options (constant) init ("amu_erf1");
  1    43 dcl  AMU_FDUMP_INFO_VERSION char (8) internal static options (constant) init ("amu_erf1");
  1    44 
  1    45 /*	END INCLUDE FILE amu_fdump_info.incl.pl1	*/
      113 
      114 
  2     1 /*	BEGIN INCLUDE FILE amu_hardcore_info.incl.pl1	*/
  2     2 
  2     3 /* This structure contains information about the hardcore supervisor address
  2     4*   space for an address translation. */
  2     5 
  2     6 dcl 1 hardcore_info aligned based (amu_info.hardcore_info_ptr),
  2     7 
  2     8     2 pointers,					/* assorted pointers to various useful items */
  2     9       3 slt aligned,				/* SLT */
  2    10         4 fptr pointer unaligned,			/* address in foreign address space */
  2    11         4 lptr pointer unaligned,			/* location in local address space */
  2    12       3 sltnt aligned like hardcore_info.slt,		/* SLT names segment */
  2    13       3 definitions aligned like hardcore_info.slt,	/* hardcore definitions_ segment */
  2    14 
  2    15       3 sst aligned like hardcore_info.slt,		/* SST */
  2    16       3 tc_data aligned like hardcore_info.slt,		/* TC_DATA */
  2    17       3 sstnt aligned like hardcore_info.slt,		/* SSTNT (if any -- foreign_ptr = null if not) */
  2    18       3 upt aligned like hardcore_info.slt,		/* unpaged_page_tables (if any -- foreign_ptr = null if not) */
  2    19 
  2    20     2 segno,					/* segment numbers of various per-process/per-processor segs */
  2    21       3 prds fixed bin (15),				/* segno of PRDS */
  2    22       3 dseg fixed bin (15),				/* DSEG */
  2    23       3 pds fixed bin (15),				/* PDS */
  2    24       3 kst fixed bin (15),				/* KST */
  2    25       3 stack_0 fixed bin (15),			/* segno of stack_0 -- first one in stack group */
  2    26       3 unpaged_page_tables fixed bin(15),		/* segno of unpaged_page_tables if it exists */
  2    27 
  2    28     2 apt,					/* information about the APT */
  2    29       3 foreign_ptr pointer unaligned,			/* foreign and local pointers to tcm.apt */
  2    30       3 local_ptr pointer unaligned,
  2    31       3 count fixed bin,				/* number of APTEs */
  2    32       3 size fixed bin,				/* size of a single APTE */
  2    33 
  2    34     2 hcs_count fixed bin,				/* highest hardcore segno */
  2    35 
  2    36     2 pad1 fixed bin;
  2    37 
  2    38 dcl hardcore_cur_ptr ptr;
  2    39 
  2    40 dcl 1 hardcore_cur based (hardcore_cur_ptr),
  2    41     2 sltp ptr,
  2    42     2 sltntp ptr,
  2    43     2 defp ptr,
  2    44     2 sstp ptr,
  2    45     2 tc_datap ptr,
  2    46     2 sstntp ptr,
  2    47     2 uptp ptr;
  2    48 	
  2    49     
  2    50 
  2    51 
  2    52 /*	END INCLUDE FILE amu_hardcore_info.incl.pl1	*/
      115 
      116 
  3     1 /*	BEGIN INCLUDE FILE amu_info.incl.pl1		*/
  3     2 
  3     3 dcl 1 amu_info aligned based (amu_info_ptr),
  3     4     2 version char (8) aligned,			/* AMU_INFO_VERSION */
  3     5     2 flags aligned,
  3     6       3 early_dump bit(1) unal,
  3     7       3 pad  bit(35) unal,
  3     8     2 type fixed bin unal,				/* One of the types below */
  3     9     2 time_created fixed bin (71) aligned,		/* time created -- for debugging purposes */
  3    10     2 chain,					/* a chain of all the amu_info's which exist */
  3    11       3 prev pointer unaligned,
  3    12       3 next pointer unaligned,
  3    13 
  3    14     2 area_ptr pointer,				/* pointer to area used for allocating things */
  3    15 
  3    16     2 translation_table_ptr pointer,			/* pointer to address map -- always present */
  3    17 						/*   SEE: amu_translation.incl.pl1 */
  3    18     2 fdump_info_ptr pointer, 			
  3    19 						/* pointer to FDUMP info, present if looking at an FDUMP */
  3    20 						/*   SEE: amu_fdump_info.incl.pl1 */
  3    21 						/* old_uid_table pointer if looking at a SAVED PROC. */
  3    22 						/* See: amu_old_uid_table			*/
  3    23 	
  3    24 
  3    25     2 hardcore_info_ptr pointer,			/* pointer to hardcore information -- always present */
  3    26 						/*   SEE: amu_hardcore_info.incl.pl1 */
  3    27     2 copy_chain pointer,				/* pointer to info about segment copies */
  3    28 						/*   SEE: amu_copy_info.incl.pl1 */
  3    29     2 process_info_ptr pointer,			/* pointer to process info for this translation */
  3    30 						/*   SEE: amu_process_info.incl.pl1 */
  3    31     2 process_idx fixed bin,				/* index of process in translation-specifc process table */
  3    32 
  3    33     2 proc_idx_hold fixed bin,			/* a place to keep the index when a changing to another proc */
  3    34 
  3    35     2 error_info,					/* various info about how amu_error_ is to behave */
  3    36       3 error_flags aligned,
  3    37         4 handler_exists bit (1) unaligned,		/* set to indicate existence of an amu_error handler */
  3    38         4 in_subsystem bit (1) unaligned,		/* This amu_info belongs to an ssu_ maintained subsystem */
  3    39         4 pad bit (34) unaligned,
  3    40       3 sci_ptr pointer,				/* sci_ptr for subsystem, if in_subsystem = "1"b */
  3    41     2 definitions_info_ptr ptr;
  3    42 
  3    43 dcl  amu_area area based (amu_info.area_ptr);
  3    44 
  3    45 dcl  amu_info_ptr pointer;
  3    46 
  3    47 dcl (FDUMP_TYPE		init (1037),		/* the various legitimate types of amu_info's */
  3    48      FDUMP_PROCESS_TYPE	init (1038),
  3    49      ONLINE_TYPE		init (1039),
  3    50      ONLINE_PROCESS_TYPE	init (1040),
  3    51      NETWORK_FDUMP_TYPE	init (1041),
  3    52      NETWORK_ONLINE_TYPE	init (1042),
  3    53      SAVED_PROC_TYPE	init (1043),
  3    54      INDIRECT_TYPE		init (1044)) fixed bin internal static options (constant);
  3    55 
  3    56 dcl  AMU_INFO_VERSION_1 char (8) internal static options (constant) init ("amu_v1");
  3    57 dcl  AMU_INFO_VERSION char (8) internal static options (constant) init ("amu_v1");
  3    58 dcl  AMU_INFO_VERSION_2 char (8) internal static options (constant) init ("amu_v2");
  3    59 
  3    60 dcl  PDIR_SUFFIX		char(4) init("pdir") int static options(constant);
  3    61 
  3    62 /*	END INCLUDE FILE amu_info.incl.pl1		*/
      117 
      118 
  4     1 
  4     2 /*  BEGIN INCLUDE FILE ... str.incl.pl1 ... last modified March 1970 */
  4     3 
  4     4 dcl str_seg$ ext,
  4     5     strp ptr;
  4     6 
  4     7 dcl 1 str based (strp) aligned,		/* segment or process trailer declaration */
  4     8 
  4     9    (2 fp bit (18),				/* forward ast trailer rel pointer */
  4    10     2 bp bit (18),				/* backward ast trailer rel pointer*/
  4    11 
  4    12     2 segno bit (18),			/* segment number*/
  4    13     2 dstep bit (18)) unaligned;		/* rel pointer to ring 0 dste */
  4    14  
  4    15 dcl stra (0:8000) bit (72) based (strp) aligned;
  4    16 
  4    17 /*  END INCLUDE FILE ... str.incl.pl1 */
  4    18 
      119 
      120 
      121      end azm_str_util_;
      122 
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/15/84  1440.2  azm_str_util_.pl1                 >special_ldd>online>6897-11/15/84>azm_str_util_.pl1
113          1    09/22/83  1102.5  amu_fdump_info.incl.pl1           >ldd>include>amu_fdump_info.incl.pl1
115          2    11/15/84  1437.4  amu_hardcore_info.incl.pl1        >special_ldd>online>6897-11/15/84>amu_hardcore_info.incl.pl1
117          3    11/15/84  1524.3  amu_info.incl.pl1                 >special_ldd>online>6897-11/15/84>amu_info.incl.pl1
119          4    05/06/74  1751.6  str.incl.pl1                      >ldd>include>str.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
P_amu_info_ptr                         parameter       pointer                  dcl 12 ref 7 40
P_code                                 parameter       fixed bin(35,0)          dcl 14 set ref 7 70* 79* 110*
P_strp                                 parameter       bit(18)                  unaligned dcl 13 ref 7 41
addr                                                   builtin function         dcl 38 ref 49 60 90 90
amu_$definition_ptr             000010 constant        entry                    external dcl 29 ref 77
amu_$do_translation             000012 constant        entry                    external dcl 30 ref 61 68 104
amu_$do_translation_by_ptr      000014 constant        entry                    external dcl 31 ref 90
amu_$fdump_mpt_change_idx       000016 constant        entry                    external dcl 32 ref 47 89 98 108
amu_$fdump_mpt_current_process  000024 constant        entry                    external dcl 35 ref 95
amu_$hardcore_info_set_cur_ptrs 000020 constant        entry                    external dcl 33 ref 50
amu_$slt_search_seg_num         000022 constant        entry                    external dcl 34 ref 55
amu_info                               based           structure                level 1 dcl 3-3
amu_info_ptr                    000146 automatic       pointer                  dcl 3-45 set ref 40* 43 47* 50* 61* 68* 77* 88 89*
                                                                                  90* 95* 98* 104* 108*
array                     1            based           structure                array level 2 dcl 1-23 ref 88
bp                        0(18)        based           bit(18)                  level 2 packed unaligned dcl 4-7 ref 66 67
code                            000100 automatic       fixed bin(35,0)          dcl 16 set ref 55* 56 61* 62 68* 69 70 77* 78 79 90*
                                                                                  91 104* 105 110
dstep                     1(18)        based           bit(18)                  level 2 packed unaligned dcl 4-7 ref 92
exit_sw                         000103 automatic       bit(1)                   unaligned dcl 19 set ref 85* 86 100*
fdump_info                             based           structure                level 1 dcl 1-3
fdump_info_ptr           14            based           pointer                  level 2 dcl 3-3 ref 88
fdump_process_table                    based           structure                level 1 dcl 1-23
fdump_process_table_ptr
                        246            based           pointer                  level 2 dcl 1-3 ref 88
fixed                                                  builtin function         dcl 38 ref 41 67 103
fp                                     based           bit(18)                  level 2 packed unaligned dcl 4-7 ref 100 103
fp_table                               based           structure                level 1 unaligned dcl 1-28
hard_cur                        000124 automatic       structure                level 1 unaligned dcl 26 set ref 49
hardcore_cur                           based           structure                level 1 unaligned dcl 2-40
hardcore_cur_ptr                000144 automatic       pointer                  dcl 2-38 set ref 49* 50*
hardcore_info                          based           structure                level 1 dcl 2-6
hbound                                                 builtin function         dcl 38 ref 88
ioa_$nnl                        000026 constant        entry                    external dcl 36 ref 94
loop_exit                       000102 automatic       bit(1)                   unaligned dcl 18 set ref 87* 88 93*
offset                          000120 automatic       fixed bin(18,0)          dcl 24 set ref 41* 42 61* 67* 68* 103* 104*
pds_dstep                       000122 automatic       pointer                  dcl 25 set ref 77* 90*
pointers                               based           structure                level 2 dcl 2-6
process_idx              24            based           fixed bin(17,0)          level 2 dcl 3-3 ref 43
save_process_index              000101 automatic       fixed bin(17,0)          dcl 17 set ref 43* 98* 108*
seg_name                        000107 automatic       char(32)                 unaligned dcl 22 set ref 54* 55*
seg_trailer                     000104 automatic       structure                level 1 packed unaligned dcl 20 set ref 60
segno                     1            based           bit(18)                  level 2 packed unaligned dcl 4-7 set ref 94*
size                                                   builtin function         dcl 38 in procedure "azm_str_util_" ref 59
size                                   based           fixed bin(17,0)          level 2 in structure "fdump_process_table" dcl 1-23
                                                                                  in procedure "azm_str_util_" ref 88
slt                                    based           structure                level 3 dcl 2-6
sltntp                    2     000124 automatic       pointer                  level 2 dcl 26 set ref 55*
sltp                            000124 automatic       pointer                  level 2 dcl 26 set ref 55*
str                                    based           structure                level 1 dcl 4-7 set ref 59
str_segno                       000117 automatic       fixed bin(17,0)          dcl 23 set ref 55* 61* 68* 104*
str_size                        000106 automatic       fixed bin(18,0)          dcl 21 set ref 59* 61* 68* 104*
strp                            000150 automatic       pointer                  dcl 4-4 set ref 59 60* 61* 66 67 68* 92 94 100 103
                                                                                  104*
temp_dstep                      000142 automatic       bit(18)                  unaligned dcl 27 set ref 90 90 92
temp_indx                       000143 automatic       fixed bin(17,0)          dcl 28 set ref 88* 89*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
AMU_FDUMP_INFO_VERSION                 internal static char(8)                  initial unaligned dcl 1-43
AMU_FDUMP_INFO_VERSION_1               internal static char(8)                  initial unaligned dcl 1-42
AMU_INFO_VERSION                       internal static char(8)                  initial unaligned dcl 3-57
AMU_INFO_VERSION_1                     internal static char(8)                  initial unaligned dcl 3-56
AMU_INFO_VERSION_2                     internal static char(8)                  initial unaligned dcl 3-58
FDUMP_PROCESS_TYPE                     internal static fixed bin(17,0)          initial dcl 3-47
FDUMP_TYPE                             internal static fixed bin(17,0)          initial dcl 3-47
INDIRECT_TYPE                          internal static fixed bin(17,0)          initial dcl 3-47
NETWORK_FDUMP_TYPE                     internal static fixed bin(17,0)          initial dcl 3-47
NETWORK_ONLINE_TYPE                    internal static fixed bin(17,0)          initial dcl 3-47
ONLINE_PROCESS_TYPE                    internal static fixed bin(17,0)          initial dcl 3-47
ONLINE_TYPE                            internal static fixed bin(17,0)          initial dcl 3-47
PDIR_SUFFIX                            internal static char(4)                  initial unaligned dcl 3-60
SAVED_PROC_TYPE                        internal static fixed bin(17,0)          initial dcl 3-47
alloc_fdump_process_table_size         automatic       fixed bin(17,0)          dcl 1-40
amu_area                               based           area(1024)               dcl 3-43
fp_table_ptr                           automatic       pointer                  dcl 1-38
str_seg$                               external static fixed bin(17,0)          dcl 4-4
stra                                   based           bit(72)                  array dcl 4-15

NAMES DECLARED BY EXPLICIT CONTEXT.
azm_str_util_                   000022 constant        entry                    external dcl 7
str_exit                        000426 constant        label                    dcl 108 set ref 56 62 91 105

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       574         624     443         604
Length      1106     443        30         245     131           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
azm_str_util_                       164 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
azm_str_util_            000100 code                        azm_str_util_
                         000101 save_process_index          azm_str_util_
                         000102 loop_exit                   azm_str_util_
                         000103 exit_sw                     azm_str_util_
                         000104 seg_trailer                 azm_str_util_
                         000106 str_size                    azm_str_util_
                         000107 seg_name                    azm_str_util_
                         000117 str_segno                   azm_str_util_
                         000120 offset                      azm_str_util_
                         000122 pds_dstep                   azm_str_util_
                         000124 hard_cur                    azm_str_util_
                         000142 temp_dstep                  azm_str_util_
                         000143 temp_indx                   azm_str_util_
                         000144 hardcore_cur_ptr            azm_str_util_
                         000146 amu_info_ptr                azm_str_util_
                         000150 strp                        azm_str_util_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return              ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
amu_$definition_ptr           amu_$do_translation           amu_$do_translation_by_ptr    amu_$fdump_mpt_change_idx
amu_$fdump_mpt_current_process                              amu_$hardcore_info_set_cur_ptrs
amu_$slt_search_seg_num       ioa_$nnl

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
      7 000016        40 000027        41 000033        42 000042        43 000044        47 000046        49 000057
     50 000061        54 000072        55 000075        56 000114        59 000116        60 000120        61 000122
     62 000143        66 000145        67 000152        68 000154        69 000175        70 000177        71 000201
     73 000202        77 000203        78 000237        79 000241        80 000243        85 000244        86 000245
     87 000250        88 000251        89 000263        90 000274        91 000317        92 000321        93 000326
     94 000330        95 000347        97 000356        98 000360       100 000371       103 000400       104 000402
    105 000423       107 000425       108 000426       110 000437       111 000442


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
