	COMPILATION LISTING OF SEGMENT mpc_data_summary
	Compiled by: Multics PL/I Compiler, Release 28e, of February 14, 1985
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 04/02/85  1043.3 mst Tue
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 /* MPC_DATA_SUMMARY: Command to summarize mpc data from the syserr log collected by poll_mpc */
       12 
       13 /* Written MAY 1981 by Rich Fawcett  */
       14 /* Most of this program was borrowed from the mos_edac_summary command. */
       15 /* Modified May 1982 by Rich Coppola for EURC support */
       16 /* Modified June 1983 by Paul Farley to fix EURC bugs. */
       17 /* Modified Sept. 1983 to change "-mpc" arg to set mpc_only flag and to
       18*   only update stats_data.polled_error_data if error_data reg is NON-ZERO.
       19*   Modified Jan 1984 by Paul Farley to fix "-ext" function (phx16436).
       20*   Modified June 1984 by Paul Farley to add DAU (MSP800) support.
       21*   Modified March 1985 by Paul Farley to increase the size of psi_cntr (PBF).
       22**/
       23 
       24 /* format: style4,delnl,insnl,ifthenstmt,indnoniterend */
       25 
       26 mpc_data_summary:
       27      proc;
       28 
       29 dcl  name char (17) int static options (constant) init ("mpc_data_summary");
       30 						/* Name of procedure */
       31 dcl  check_mpc fixed bin;
       32 dcl  code fixed bin (35);				/* Standard system status code */
       33 dcl  open_status bit (36) aligned;			/* Code from syserr_log_util_$open */
       34 dcl  ptr_array (2) ptr;				/* An array of pointers as required by get_temp_segment_ */
       35 dcl  tab_cnt fixed bin init (0);			/* Number of seperate status found */
       36 dcl  mask bit (36) aligned init ("0"b);			/* Mask of significant bits in status word */
       37 dcl  arg_ptr ptr;					/* Pointer to an argument */
       38 dcl  arg_len fixed bin;				/* Length of an argument */
       39 dcl  arg char (arg_len) based (arg_ptr);		/* A command argument */
       40 dcl  arg_count fixed bin;				/* The number of arguments */
       41 dcl  arg_list_ptr ptr;				/* Pointer to commands argument list */
       42 dcl  for_ptr ptr;					/* Saved pointer to the -for argument */
       43 dcl  for_len fixed bin;				/* Saved length of -for argument */
       44 dcl  for_arg char (for_len) based (for_ptr);		/* This is the -for argument */
       45 dcl  from_sw bit (1) init ("0"b);			/* Set if -from used */
       46 dcl  to_sw bit (1) init ("0"b);			/* Set if -to used */
       47 dcl  for_sw bit (1) init ("0"b);			/* Set if -for used */
       48 dcl  more_args bit (1);				/* Set while there are more arguments to scan */
       49 dcl  short_display_sw bit (1) init ("1"b);
       50 dcl  short_arg bit (1) init ("0"b);
       51 dcl  top_of_page_req bit (1) init ("0"b);
       52 dcl  mpc_only bit (1) init ("0"b);
       53 dcl  bf_sw bit (1) init ("0"b);
       54 dcl  all_mpcs bit (1) init ("0"b);			/* all mpc's that we find will be summarized
       55*						   if no mpc name are in put this will set set  */
       56 dcl  (output_file, of_file_att, of_file_open) bit (1) init ("0"b);
       57 						/* output file to be used and if it is attached and open */
       58 dcl  ext_file bit (1) init ("0"b);			/* set if the output file is to be extended */
       59 dcl  expand_sw bit (1) init ("0"b);			/* set if each entry found is the syserr_log is to also be printed */
       60 dcl  segs_allocated bit (1) init ("0"b);		/* Set after work segments created */
       61 dcl  (urp_sw, eurc_sw, dau_sw) bit (1) init ("0"b);
       62 dcl  from_time fixed bin (71);			/* Time specified on -from */
       63 dcl  to_time fixed bin (71);				/* Time specified on -to */
       64 dcl  for_time fixed bin (71);				/* Time specified on -for */
       65 dcl  count_limit fixed bin init (0);			/* Results for -limit arg */
       66 dcl  day_limit fixed bin init (0);			/* Results for -day_limit arg */
       67 dcl  workp ptr;					/* Pointer to work segment */
       68 dcl  arg_no fixed bin init (1);			/* For scanning argument list */
       69 dcl  msg_time fixed bin (71);				/* Time of syserrmessage */
       70 dcl  msg_seq fixed bin (35);				/* Sequence number */
       71 dcl  mpc_cnt fixed bin init (0);			/* Number of MPCs requested */
       72 dcl  temp fixed bin;
       73 
       74 dcl  output_iocbp ptr;				/* pointer to the output iocb */
       75 dcl  of_path char (168);				/* path name used for output file */
       76 dcl  attach_desc char (180);				/* variable used to build description used
       77*						   for output file when attached */
       78 
       79 dcl  1 work aligned based (workp),			/* Declaration of work segment */
       80        2 mpcreq (32) char (4),			/* Table of requested MPCs */
       81        2 stats_block (32, size (stats_data)) bit (36),	/* stats for each mpc */
       82        2 buffer (500) bit (36) aligned;			/* Syserr messages are read here */
       83 
       84 
       85 
       86 dcl  1 stats_data aligned based (stats_block_ptr),
       87        2 version fixed bin,
       88        2 name char (4),				/* Name of MPC */
       89        2 model fixed bin,
       90        2 firmware_rev char (2),			/* Firmware revision */
       91 						/* *old* MSP, MTP and URP specific data */
       92        2 config_sw bit (16),				/* Configuration switches */
       93        2 polled_stat_counters (12) fixed bin,		/* LA-PSI  error counters */
       94        2 interrupt_counter fixed bin (35),		/* the error interrupt counter */
       95        2 register bit (16),				/* the MPC's error data register */
       96        2 AUXAR bit (16),				/* the auxilliary mpc addr at time of last error */
       97        2 INTAR bit (16),				/* thar addr at which the error occurred */
       98 						/* EURC Specific data */
       99        2 eurc_specifics,
      100          3 uptime_clock fixed bin (32) uns,
      101          3 prom_revision,
      102 	 4 core bit (8),
      103 	 4 iom bit (8),
      104 	 4 special_controller bit (8),
      105 	 4 link_edit bit (8),
      106 	 4 pdsi_application bit (8),
      107 	 4 self_test bit (8),
      108 	 4 dai_application bit (8),			/* DAU specific data */
      109        2 hw_rev bit (8) unal,				/* DAU Revision */
      110        2 config unal,
      111          3 ci_0_online bit (1),
      112          3 ci_1_online bit (1),
      113          3 psi0_2trip bit (1),			/* 0= 4trip, 1= 2trip */
      114          3 psi1_2trip bit (1),
      115          3 psi2_2trip bit (1),
      116          3 psi3_2trip bit (1),
      117        2 err_interrupts fixed bin (35),
      118        2 err_info (72) bit (8) unal,
      119        2 psi_cntr (20) fixed bin (35),			/* Misc. data */
      120        2 the_mtp_sw bit (1),
      121        2 the_msp_sw bit (1),
      122        2 the_urp_sw bit (1),
      123        2 the_eurc_sw bit (1),
      124        2 the_dau_sw bit (1),
      125        2 type_other fixed bin,			/* = 0 device stats stored by device number,
      126*						   = 1 device stats stored by ca number and port number
      127*						   = 2 device stats stored by ca number, port number
      128*						   and logical device */
      129        2 entries_found fixed bin,			/* number of syserr_log entries */
      130        2 first_time fixed bin (71) unaligned,		/* time fo the first syserr_log entry found fo this mpc */
      131        2 last_time fixed bin (71) unaligned,		/* time of the last syserr_log entry found for this mpc */
      132        2 dev_stat (0:3, 0:16, 0:1) like dev_stat,		/* array for disk with removable device number
      133*						   indexed by ca and port */
      134        2 end_of_status_data fixed bin;
      135 
      136 
      137 dcl  1 my_dev_info (my_n_devices) like dev_info based (my_dev_ptr);
      138 dcl  1 my_stat_info (my_n_stats) like stat_info based (my_stat_ptr);
      139 
      140 dcl  (my_n_devices, my_n_stats) fixed bin;
      141 dcl  (my_dev_ptr, my_stat_ptr) ptr;
      142 dcl  stats_block_ptr ptr;				/* pointers used to optmize arrays */
      143 dcl  (F_TIME, L_TIME) char (24);
      144 
      145 /* entrys for syserr_log */
      146 
      147 dcl  syserr_log_util_$open entry (bit (36) aligned, fixed bin (35));
      148 dcl  print_syserr_msg_$open_err entry (bit (36) aligned, char (*), fixed bin (35));
      149 dcl  syserr_log_util_$read entry (ptr, fixed bin, fixed bin, fixed bin (35));
      150 dcl  syserr_log_util_$close entry (fixed bin (35));
      151 dcl  syserr_log_util_$search entry (fixed bin (71), fixed bin (71), fixed bin (35), fixed bin (35));
      152 
      153 /* io type entrys */
      154 
      155 dcl  ioa_$ioa_switch entry options (variable);
      156 dcl  iox_$attach_ioname entry (char (*), ptr, char (*), fixed bin (35));
      157 dcl  iox_$open entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
      158 dcl  iox_$close entry (ptr, fixed bin (35));
      159 dcl  iox_$detach_iocb entry (ptr, fixed bin (35));
      160 dcl  iox_$user_output ext ptr;
      161 
      162 /* misc entries */
      163 
      164 dcl  com_err_ entry options (variable);
      165 dcl  get_temp_segments_ entry (char (*), dim (*) ptr, fixed bin (35));
      166 dcl  release_temp_segments_ entry (char (*), dim (*) ptr, fixed bin (35));
      167 dcl  date_time_ entry (fixed bin (71), char (*));
      168 dcl  cu_$arg_list_ptr entry (ptr);
      169 dcl  cu_$arg_count entry (fixed bin);
      170 dcl  cu_$arg_ptr_rel entry (fixed bin, ptr, fixed bin, fixed bin (35), ptr);
      171 dcl  convert_date_to_binary_ entry (char (*), fixed bin (71), fixed bin (35));
      172 dcl  convert_date_to_binary_$relative entry (char (*), fixed bin (71), fixed bin (71), fixed bin (35));
      173 dcl  print_mpc_summary entry (ptr, ptr, bit (1), bit (1));
      174 dcl  print_mpc_summary$display_mpc_ entry (ptr, ptr, bit (1), bit (1));
      175 dcl  display_mpc_data_ entry (ptr, ptr, bit (1));
      176 dcl  get_line_length_$switch entry (ptr, fixed bin (35)) returns (fixed bin);
      177 
      178 /* error_table_ */
      179 
      180 dcl  error_table_$end_of_info ext fixed bin (35);
      181 dcl  error_table_$badopt ext fixed bin (35);
      182 
      183 dcl  cleanup condition;
      184 
      185 dcl  (addr, hbound, low, mod, null, rtrim, size, substr, unspec) builtin;
      186 
      187 /* Initialization */
      188 
      189 	on cleanup call clean_up;
      190 	output_iocbp = iox_$user_output;
      191 	call get_temp_segments_ (name, ptr_array, code);	/* Get a work segment */
      192 	if code ^= 0 then do;
      193 	     call com_err_ (code, name, "Can't get temp segment");
      194 	     go to done;
      195 	     end;
      196 	segs_allocated = "1"b;			/* Remember that they are allocated */
      197 	workp = ptr_array (1);			/* Copy pointer to my segment */
      198 
      199 	stats_block (*, *) = ""b;			/* zero status area */
      200 
      201 	call cu_$arg_list_ptr (arg_list_ptr);		/* Need pointer to argument list */
      202 	call cu_$arg_count (arg_count);		/* And the length */
      203 	more_args = (arg_count > 0);			/* Set if args to scan */
      204 	call scan_args;				/* Scan the argument list */
      205 
      206 	if mpc_cnt = 0 then all_mpcs = "1"b;
      207 
      208 
      209 	if output_file then do;
      210 	     if short_arg
      211 	     then short_display_sw = "1"b;
      212 	     else short_display_sw = "0"b;
      213 	     attach_desc = "vfile_ " || rtrim (of_path);
      214 	     if ext_file then attach_desc = rtrim (attach_desc) || " -extend";
      215 	     call iox_$attach_ioname ("mpc_sum_sw", output_iocbp, attach_desc, code);
      216 	     if code ^= 0 then do;
      217 		call com_err_ (code, name, "attaching ^a", rtrim (of_path));
      218 		goto done;
      219 		end;
      220 	     of_file_att = "1"b;
      221 	     call iox_$open (output_iocbp, 2, "0"b, code);/* open for stream output */
      222 	     if code ^= 0 then do;
      223 		call com_err_ (code, name, "opening ^a", rtrim (of_path));
      224 		goto done;
      225 		end;
      226 	     of_file_open = "1"b;
      227 	     end;
      228 	temp = get_line_length_$switch (output_iocbp, code);
      229 	if ^short_arg then do;
      230 	     if code ^= 0 | temp > 80
      231 	     then short_display_sw = "0"b;
      232 	     else short_display_sw = "1"b;
      233 	     end;
      234 	else short_display_sw = "1"b;
      235 	if code ^= 0 | output_file
      236 	then top_of_page_req = "1"b;
      237 	else top_of_page_req = "0"b;
      238 
      239 
      240 	call syserr_log_util_$open (open_status, code);	/* Open the syserr log */
      241 	if code ^= 0 | substr (open_status, 1, 2) ^= "11"b then do;
      242 						/* If error */
      243 	     call print_syserr_msg_$open_err (open_status, name, code);
      244 	     if code ^= 0 then go to done;		/* Not recoverable */
      245 	     end;
      246 
      247 	if ^from_sw then do;			/* No -from, so start at beginning */
      248 	     call syserr_log_util_$search (0, msg_time, msg_seq, code);
      249 	     if code ^= 0 then do;
      250 		call com_err_ (code, name, "Can't find first message in log.");
      251 		go to done;
      252 		end;
      253 	     from_time = msg_time;			/* Official starting time */
      254 	     end;
      255 	else do;					/* -from used, find rightmessage */
      256 	     call syserr_log_util_$search (from_time, msg_time, msg_seq, code);
      257 	     if code ^= 0 then do;
      258 		call com_err_ (code, name, "Locating first message requested.");
      259 		go to done;
      260 		end;
      261 	     end;
      262 
      263 	if for_sw then do;				/* Now can compute -for limit */
      264 	     call convert_date_to_binary_$relative (for_arg, to_time, from_time, code);
      265 	     if code ^= 0 then do;
      266 		call com_err_ (code, name, "-for ^a", for_arg);
      267 		go to done;
      268 		end;
      269 	     to_sw = "1"b;				/* Now, just as if -to was specified */
      270 	     end;
      271 	if ^to_sw then to_time = from_time;		/* Initialize lastmessage time */
      272 
      273 	syserr_msgp = addr (work.buffer);		/* Read here */
      274 
      275 /* Loop thru the file */
      276 
      277 loop:
      278 	call syserr_log_util_$read (syserr_msgp, hbound (buffer, 1), (0), code);
      279 	if code ^= 0 then do;
      280 	     if code = error_table_$end_of_info then go to print;
      281 	     call com_err_ (code, name, "Reading syserr log");
      282 	     go to done;
      283 	     end;
      284 
      285 	if to_sw then do;				/* If time limit */
      286 	     if syserr_msg.time > to_time then go to print;
      287 	     end;
      288 	else to_time = syserr_msg.time;		/* Save lastmessage time */
      289 
      290 	if syserr_msg.data_code = SB_mpc_poll & syserr_msg.data_size > 0 then do;
      291 	     poll_mpc_datap = addr (syserr_msg.data);
      292 	     if look_for (poll_mpc_data.name, stats_block_ptr) then call count_it;
      293 	     end;
      294 
      295 	go to loop;
      296 
      297 /* End of log reached */
      298 
      299 print:
      300 	call print_it;				/* Print results */
      301 
      302 /* End of command */
      303 
      304 done:
      305 	call clean_up;
      306 	return;
      307 
      308 
      309 
      310 
      311 count_it:
      312      proc;
      313 
      314 /* This proc will take the syserr entry in poll_mpc_data format and
      315*   expand it to the stats_data so that the tracking by ca,port,logical */
      316 
      317 dcl  (i, st, logical, ca_num, port_num, st_inx) fixed bin;
      318 
      319 	if poll_mpc_data.version ^= poll_mpc_data_version_2 then do;
      320 						/* wrong version? */
      321 	     if ^bf_sw
      322 	     then call com_err_ (0, name, "Syserr#^d contains a non-supported version of ^d, message skipped.",
      323 		     syserr_msg.seq_num, poll_mpc_data.version);
      324 	     return;
      325 	     end;
      326 	poll_mpc_specp = addr (poll_mpc_data.specific);
      327 	if stats_data.first_time = 0 then do;
      328 	     stats_data.version = poll_mpc_data.version;
      329 	     stats_data.name = poll_mpc_data.name;
      330 	     stats_data.model = poll_mpc_data.model;
      331 	     stats_data.first_time = syserr_msg.time;
      332 
      333 	     if substr (stats_data.name, 1, 3) = "urp" then do;
      334 		stats_data.the_urp_sw = "1"b;
      335 		stats_data.firmware_rev = "";
      336 		do i = 1 to hbound (eurc_model_numbers, 1) while (stats_data.the_eurc_sw = "0"b);
      337 		     if stats_data.model = eurc_model_numbers (i) then stats_data.the_eurc_sw = "1"b;
      338 		end;
      339 		end;
      340 	     else if substr (stats_data.name, 1, 3) = "mtp" then do;
      341 		stats_data.the_mtp_sw = "1"b;
      342 		stats_data.firmware_rev = poll_mtp_data.firmware_rev;
      343 		end;
      344 	     else if substr (stats_data.name, 1, 3) = "msp" then do;
      345 		stats_data.the_msp_sw = "1"b;
      346 		if stats_data.model = 800 then do;
      347 		     stats_data.the_dau_sw = "1"b;
      348 		     stats_data.firmware_rev = poll_dau_data.fw_rev;
      349 		     end;
      350 		else stats_data.firmware_rev = poll_msp_data.firmware_rev;
      351 		end;
      352 	     end;
      353 	stats_data.entries_found = stats_data.entries_found + 1;
      354 	stats_data.last_time = syserr_msg.time;
      355 
      356 	if expand_sw then call expand_syserr_entry;	/* user wants each entry expanded */
      357 
      358 	urp_sw = stats_data.the_urp_sw;
      359 	eurc_sw = stats_data.the_eurc_sw;
      360 	dau_sw = stats_data.the_dau_sw;
      361 
      362 	if ^urp_sw & ^dau_sw
      363 	then					/* URC & EURC dont have any */
      364 	     do i = 1 to 12;
      365 	     stats_data.polled_stat_counters (i) =
      366 		stats_data.polled_stat_counters (i) + poll_mtp_data.polled_stat_counters (i);
      367 	end;
      368 
      369 	else if dau_sw
      370 	then do i = 1 to 20;
      371 	     stats_data.psi_cntr (i) = stats_data.psi_cntr (i) + poll_dau_data.psi_cntr (i);
      372 	end;
      373 
      374 	if ^eurc_sw & ^dau_sw & poll_mtp_data.register ^= "0"b then do;
      375 						/* any error bits on? */
      376 	     if stats_data.the_mtp_sw then do;
      377 		stats_data.interrupt_counter = stats_data.interrupt_counter + poll_mtp_data.interrupt_counter;
      378 		stats_data.register = stats_data.register | poll_mtp_data.register;
      379 		stats_data.AUXAR = poll_mtp_data.AUXAR;
      380 		stats_data.INTAR = poll_mtp_data.INTAR;
      381 		end;
      382 	     else if stats_data.the_msp_sw then do;
      383 		stats_data.interrupt_counter = stats_data.interrupt_counter + poll_msp_data.interrupt_counter;
      384 		stats_data.register = stats_data.register | poll_msp_data.register;
      385 		stats_data.AUXAR = poll_msp_data.AUXAR;
      386 		stats_data.INTAR = poll_msp_data.INTAR;
      387 		end;
      388 	     else if stats_data.the_urp_sw then do;
      389 		stats_data.interrupt_counter = stats_data.interrupt_counter + poll_urp_data.interrupt_counter;
      390 		stats_data.register = stats_data.register | poll_urp_data.register;
      391 		stats_data.INTAR = poll_urp_data.INTAR;
      392 		end;
      393 	     end;
      394 
      395 	if eurc_sw then do;
      396 	     stats_data.uptime_clock = poll_eurc_data.uptime_clock + stats_data.uptime_clock;
      397 	     stats_data.core = poll_eurc_data.core;
      398 	     stats_data.iom = poll_eurc_data.iom;
      399 	     stats_data.special_controller = poll_eurc_data.special_controller;
      400 	     stats_data.link_edit = poll_eurc_data.link_edit;
      401 	     stats_data.pdsi_application = poll_eurc_data.pdsi_application;
      402 	     stats_data.self_test = poll_eurc_data.self_test;
      403 	     stats_data.dai_application = poll_eurc_data.dai_application;
      404 	     end;
      405 
      406 	else if dau_sw then do;
      407 	     stats_data.hw_rev = poll_dau_data.hw_rev;
      408 	     stats_data.config = poll_dau_data.config;
      409 	     if poll_dau_data.ext_size ^= 0 then stats_data.err_info (*) = poll_dau_data.err_info;
      410 	     stats_data.err_interrupts = stats_data.err_interrupts + poll_dau_data.err_interrupts;
      411 	     end;
      412 
      413 	if mpc_only | urp_sw then return;		/* all done? */
      414 
      415 	if eurc_sw then do;
      416 	     my_n_devices = poll_eurc_data.n_devices;
      417 	     my_dev_ptr = addr (poll_eurc_data.dev_info);
      418 	     my_n_stats = poll_eurc_data.n_stats;
      419 	     my_stat_ptr = addr (poll_eurc_data.stat_info);
      420 	     end;
      421 
      422 
      423 	else if dau_sw then do;
      424 	     my_n_devices = poll_dau_data.n_devices;
      425 	     my_dev_ptr = addr (poll_dau_data.dev_info);
      426 	     my_n_stats = poll_dau_data.n_stats;
      427 	     my_stat_ptr = addr (poll_dau_data.stat_info);
      428 	     end;
      429 
      430 	else if stats_data.the_mtp_sw | stats_data.the_msp_sw then do;
      431 	     my_n_devices = poll_mtp_data.n_devices;
      432 	     my_dev_ptr = addr (poll_mtp_data.dev_info);
      433 	     my_n_stats = poll_mtp_data.n_stats;
      434 	     my_stat_ptr = addr (poll_mtp_data.stat_info);
      435 	     end;
      436 
      437 	do st = 1 to my_n_stats;
      438 	     stat_info_ptr = addr (my_stat_info (st));
      439 	     dev_info_ptr = addr (my_dev_info (stat_info.dev_index));
      440 
      441 /* MPC can return a device number but not if opi is down, then data is invalid */
      442 
      443 	     if ^dev_info.opi
      444 	     then if ^eurc_sw then goto skip_dev_no_opi;
      445 	     port_num = dev_info.driveno;		/* setup as if type_other = 0 */
      446 	     ca_num = 0;
      447 	     logical = 0;				/* now see what type is is */
      448 	     if stats_data.the_msp_sw then do;
      449 		if substr (dev_info.dev_model, 4, 1) = "5"
      450 		then if substr (dev_info.dev_model, 6, 1) ^= "9" then do;
      451 			logical = mod (dev_info.driveno, 2);
      452 			type_other = 2;
      453 			end;
      454 		     else ;
      455 		else ;
      456 		ca_num = dev_info.ca;
      457 		port_num = dev_info.port;
      458 		if stats_data.type_other < 1 then stats_data.type_other = 1;
      459 		end;
      460 	     if stats_data.the_mtp_sw & stats_data.model >= 610 then do;
      461 		ca_num = dev_info.ca;
      462 		port_num = dev_info.port;
      463 		if stats_data.type_other < 1 then stats_data.type_other = 1;
      464 		end;
      465 	     dev_stat_ptr = addr (stats_data.dev_stat (ca_num, port_num, logical));
      466 	     dev_stat.subsystem = dev_info.subsystem;
      467 	     if dev_stat.driveno ^= dev_info.driveno then dev_stat.prev_driveno = dev_stat.driveno;
      468 	     dev_stat.driveno = dev_info.driveno;
      469 	     dev_stat.opi = dev_info.opi;
      470 	     dev_stat.ca = dev_info.ca;
      471 	     dev_stat.port = dev_info.port;
      472 	     dev_stat.dev_model = dev_info.dev_model;
      473 	     dev_stat.dev_name = substr (dev_info.dev_name, 1, 6);
      474 	     st_inx = stat_info.stat_index;
      475 	     dev_stat.value (st_inx) = dev_stat.value (st_inx) + stat_info.value;
      476 skip_dev_no_opi:
      477 	end;
      478 
      479      end count_it;
      480 
      481 
      482 look_for:
      483      proc (mpc_name, stat_ptr) returns (bit (1));
      484 
      485 /* This proc will return a bit = "1"b then we want to count this data */
      486 
      487 dcl  mpc_name char (4) aligned;
      488 dcl  stat_ptr ptr;
      489 dcl  i;
      490 look:
      491 	do i = 1 to mpc_cnt;
      492 	     if mpc_name = work.mpcreq (i) then do;
      493 		stat_ptr = addr (work.stats_block (i, 1));
      494 		return ("1"b);
      495 		end;
      496 	end;
      497 	if all_mpcs then do;			/* count all we find */
      498 	     mpc_cnt = mpc_cnt + 1;
      499 	     work.mpcreq (mpc_cnt) = mpc_name;
      500 	     stat_ptr = addr (work.stats_block (mpc_cnt, 1));
      501 	     return ("1"b);
      502 	     end;
      503 	stat_ptr = null ();
      504 	return ("0"b);
      505      end look_for;
      506 
      507 
      508 /* Procedure to print results */
      509 
      510 print_it:
      511      proc;
      512 dcl  idx fixed bin;
      513 
      514 	do idx = 1 to mpc_cnt;
      515 	     stats_block_ptr = addr (stats_block (idx, 1));
      516 	     if stats_data.entries_found ^= 0 then do;
      517 		stats_data.end_of_status_data = 1;
      518 		mpc_data_summaryp = ptr_array (2);
      519 		call pack;			/* set up format for printing */
      520 		call date_time_ ((stats_data.first_time), F_TIME);
      521 		call date_time_ ((stats_data.last_time), L_TIME);
      522 		if top_of_page_req
      523 		then call ioa_$ioa_switch (output_iocbp, "^|");
      524 		else call ioa_$ioa_switch (output_iocbp, "^2/");
      525 		if short_display_sw
      526 		then call ioa_$ioa_switch (output_iocbp,
      527 			"^23x^d syserr_log entries for ^a^/^23xfrom: ^a^/^23x^2xto: ^a", stats_data.entries_found,
      528 			stats_data.name, F_TIME, L_TIME);
      529 
      530 		else call ioa_$ioa_switch (output_iocbp,
      531 			"^47x^d syserr_log entries for ^a^/^47xfrom: ^a^/^47x^2xto: ^a", stats_data.entries_found,
      532 			stats_data.name, F_TIME, L_TIME);
      533 		if mpc_only
      534 		then call print_mpc_summary$display_mpc_ (mpc_data_summaryp, output_iocbp, short_display_sw, bf_sw);
      535 		else call print_mpc_summary (mpc_data_summaryp, output_iocbp, short_display_sw, bf_sw);
      536 		end;
      537 
      538 	     else do;
      539 		call date_time_ (from_time, F_TIME);
      540 		call date_time_ (to_time, L_TIME);
      541 		if top_of_page_req
      542 		then call ioa_$ioa_switch (output_iocbp, "^|");
      543 		else call ioa_$ioa_switch (output_iocbp, "^2/");
      544 		call ioa_$ioa_switch (output_iocbp,
      545 		     "^[^23x^;^47x^]No syserr_log entries found for ^a^/^[^23x^;^47x^]from: ^a^/^[^25x^;^49x^]to: ^a",
      546 		     short_display_sw, work.mpcreq (idx), short_display_sw, F_TIME, short_display_sw, L_TIME);
      547 		end;
      548 	end;
      549 
      550 
      551      end print_it;
      552 
      553 
      554 pack:
      555      proc;
      556 
      557 dcl  (logical, ca_num, port_num, m, n) fixed bin;
      558 dcl  from_data char (80) based (from_ptr);
      559 dcl  to_data char (80) based (to_ptr);
      560 dcl  1 next_stat like dev_stat based (next_ptr);
      561 dcl  (next_ptr, to_ptr, from_ptr) ptr;
      562 
      563 
      564 	unspec (mpc_data_summary) = ""b;		/* zero area */
      565 	mpc_data_summary.version = mpc_data_summary_version_2;
      566 	mpc_data_summary.name = stats_data.name;
      567 	mpc_data_summary.model = stats_data.model;
      568 	mpc_data_summary.firmware_rev = stats_data.firmware_rev;
      569 	mpc_data_summary.config_sw = stats_data.config_sw;
      570 	mpc_data_summary.polled_stat_counters (*) = stats_data.polled_stat_counters (*);
      571 	mpc_data_summary.interrupt_counter = stats_data.interrupt_counter;
      572 	mpc_data_summary.register = stats_data.register;
      573 	mpc_data_summary.AUXAR = stats_data.AUXAR;
      574 	mpc_data_summary.INTAR = stats_data.INTAR;
      575 	mpc_data_summary.uptime_clock = stats_data.uptime_clock;
      576 	mpc_data_summary.prom_revision = stats_data.prom_revision;
      577 	mpc_data_summary.hw_rev = stats_data.hw_rev;
      578 	mpc_data_summary.config = stats_data.config;
      579 	mpc_data_summary.err_interrupts = stats_data.err_interrupts;
      580 	mpc_data_summary.psi_cntr (*) = stats_data.psi_cntr (*);
      581 	mpc_data_summary.n_devices = 0;
      582 	if mpc_only then return;
      583 	do logical = 0 to 1;
      584 	     do ca_num = 0 to 3;
      585 		do port_num = 0 to 16;
      586 		     dev_stat_ptr = addr (stats_data.dev_stat (ca_num, port_num, logical));
      587 		     if dev_stat.subsystem ^= low (1) then call add_dev;
      588 		end;
      589 		if stats_data.type_other = 0 then return;
      590 	     end;
      591 	     if stats_data.type_other = 1 then return;
      592 	end;
      593 	return;
      594 
      595 
      596 add_dev:
      597 	proc;
      598 
      599 	     mpc_data_summary.n_devices = mpc_data_summary.n_devices + 1;
      600 	     dev_sum_ptr = addr (mpc_data_summary.dev_stat (mpc_data_summary.n_devices));
      601 	     do m = 1 to mpc_data_summary.n_devices - 1;
      602 		next_ptr = addr (mpc_data_summary.dev_stat (m));
      603 		if dev_stat.driveno < next_stat.driveno then do;
      604 		     do n = mpc_data_summary.n_devices by -1 to m + 1;
      605 			from_ptr = addr (mpc_data_summary.dev_stat (n - 1));
      606 			to_ptr = addr (mpc_data_summary.dev_stat (n));
      607 			to_data = from_data;
      608 		     end;
      609 		     next_ptr -> to_data = dev_stat_ptr -> from_data;
      610 		     return;
      611 		     end;
      612 	     end;
      613 	     dev_sum_ptr -> to_data = dev_stat_ptr -> from_data;
      614 
      615 	end add_dev;
      616 
      617      end pack;
      618 
      619 /* expand each entry */
      620 
      621 expand_syserr_entry:
      622      proc;
      623 	call date_time_ ((stats_data.last_time), F_TIME);
      624 	call ioa_$ioa_switch (output_iocbp, "Entry number ^d at ^a", stats_data.entries_found, F_TIME);
      625 
      626 
      627 	call display_mpc_data_ (poll_mpc_datap, output_iocbp, short_display_sw);
      628      end expand_syserr_entry;
      629 
      630 
      631 /* Cleanup handler */
      632 
      633 clean_up:
      634      proc;
      635 
      636 	call syserr_log_util_$close (code);
      637 	if output_file then do;
      638 	     if of_file_open then call iox_$close (output_iocbp, code);
      639 	     if of_file_att then call iox_$detach_iocb (output_iocbp, code);
      640 	     end;
      641 
      642 
      643 	if segs_allocated then do;
      644 	     segs_allocated = "0"b;
      645 	     call release_temp_segments_ (name, ptr_array, code);
      646 	     end;
      647 	return;
      648 
      649      end clean_up;
      650 
      651 /* Procedure to scan the argument list */
      652 scan_args:
      653      proc;
      654 
      655 	do while (more_args);			/* Do while things to look at */
      656 	     call get_arg;
      657 
      658 	     if substr (arg, 1, 1) ^= "-" then do;	/* assume MPC name */
      659 new_mpc:
      660 		if substr (arg, 1, 3) ^= "msp"
      661 		then if substr (arg, 1, 3) ^= "mtp"
      662 		     then if substr (arg, 1, 3) ^= "urp" then do;
      663 			     call com_err_ (0, name, "Invalid mpc specified ""^a""", arg);
      664 			     go to done;
      665 			     end;
      666 			else ;
      667 		     else ;
      668 		else ;
      669 
      670 		do check_mpc = 1 to mpc_cnt;
      671 		     if arg = work.mpcreq (check_mpc) then goto skip_mpc;
      672 		end;
      673 
      674 		mpc_cnt = mpc_cnt + 1;		/* Count MPC found */
      675 		all_mpcs = "0"b;
      676 		work.mpcreq (mpc_cnt) = arg;		/* Save name */
      677 skip_mpc:
      678 		if more_args then do;		/* If more to scan */
      679 		     call get_arg;
      680 		     if substr (arg, 1, 1) ^= "-" then do;
      681 						/* Found another MPC */
      682 			if mpc_cnt < hbound (work.mpcreq, 1)
      683 			then go to new_mpc;
      684 			else do;			/* Too many */
      685 			     call com_err_ (0, name, "There were more than ^d MPCs specified.",
      686 				hbound (work.mpcreq, 1));
      687 			     go to done;
      688 			     end;
      689 			end;
      690 		     else call put_arg;		/* Went too far, back up 1 */
      691 		     end;
      692 		end;
      693 
      694 	     else if arg = "-from" | arg = "-fm" then do; /* Start time */
      695 		from_sw = "1"b;
      696 		call time_arg (from_time);
      697 		end;
      698 
      699 	     else if arg = "-to" then do;		/* Ending time */
      700 		to_sw = "1"b;
      701 		call time_arg (to_time);
      702 		end;
      703 
      704 	     else if arg = "-for" then do;		/* Time limit */
      705 		for_sw = "1"b;
      706 		call time_arg (for_time);		/* For syntax checking only */
      707 		for_len = arg_len;			/* Save pointer to this argument */
      708 		for_ptr = arg_ptr;
      709 		end;
      710 
      711 	     else if arg = "-short" then short_arg = "1"b;
      712 
      713 	     else if arg = "-long" | arg = "-lg" then bf_sw = "0"b;
      714 
      715 	     else if arg = "-bf" | arg = "-brief" then bf_sw = "1"b;
      716 
      717 	     else if arg = "-expand" then expand_sw = "1"b;
      718 
      719 	     else if arg = "-all" | arg = "-a" then all_mpcs = "1"b;
      720 
      721 	     else if arg = "-of" | arg = "output_file" then do;
      722 		if more_args then do;
      723 		     call get_arg;
      724 
      725 		     if substr (arg, 1, 1) ^= "-"
      726 		     then of_path = arg;
      727 		     else do;
      728 			of_path = rtrim (name) || ".output";
      729 			call put_arg;
      730 			end;
      731 		     end;
      732 		else of_path = rtrim (name) || ".output";
      733 		short_display_sw = "0"b;
      734 		output_file = "1"b;
      735 		end;
      736 
      737 	     else if arg = "-ext" | arg = "-extend" then ext_file = "1"b;
      738 
      739 	     else if arg = "-mpc" then mpc_only = "1"b;
      740 
      741 	     else do;				/* Bad arg */
      742 		call com_err_ (error_table_$badopt, name, "^a", arg);
      743 		go to done;
      744 		end;
      745 	end;
      746 
      747 	if to_sw & for_sw then do;			/* Conflict */
      748 	     call com_err_ (0, name, "Conflicting arguments: -to and -for");
      749 	     go to done;
      750 	     end;
      751 	if ext_file & ^output_file then do;
      752 	     call com_err_ (0, name, "Arg error extent argument but no output_file ");
      753 	     go to done;
      754 	     end;
      755 
      756 
      757 	return;
      758 
      759      end scan_args;
      760 
      761 /* Procedure to return the next argument from command line */
      762 
      763 get_arg:
      764      proc;
      765 
      766 	call cu_$arg_ptr_rel (arg_no, arg_ptr, arg_len, code, arg_list_ptr);
      767 	if code ^= 0 then do;			/* Should never happen */
      768 	     call com_err_ (code, name, "Arg ^d", arg_no);
      769 	     go to done;
      770 	     end;
      771 	arg_no = arg_no + 1;			/* For next call */
      772 	more_args = (arg_no <= arg_count);
      773 	return;
      774 
      775 put_arg:
      776      entry;					/* Entry to return argument after scanning too far */
      777 	arg_no = arg_no - 1;
      778 	more_args = (arg_no <= arg_count);
      779 	return;
      780 
      781      end get_arg;
      782 
      783 /* Procedure to convert a time argument */
      784 
      785 time_arg:
      786      proc (t);
      787 
      788 dcl  t fixed bin (71);				/* The time to ouput */
      789 dcl  arg_copy char (10) var;				/* Save copy of arg here */
      790 
      791 	arg_copy = arg;
      792 	if ^more_args then do;			/* Must be more */
      793 	     call com_err_ (0, name, "Argument required after ^a.", arg_copy);
      794 	     go to done;
      795 	     end;
      796 	call get_arg;
      797 	call convert_date_to_binary_ (arg, t, code);
      798 	if code ^= 0 then do;
      799 	     call com_err_ (code, name, "^a ^a", arg_copy, arg);
      800 	     go to done;
      801 	     end;
      802 
      803 	return;
      804 
      805      end time_arg;
      806 
      807 
      808 
  1     1 /* Begin include file ..... syserr_message.incl.pl1 */
  1     2 
  1     3 /* Format of a syserr message */
  1     4 
  1     5 /* Created October 1975 by Larry Johnson */
  1     6 
  1     7 dcl  syserr_msgp ptr;				/* Base for include file */
  1     8 
  1     9 dcl 1 syserr_msg based (syserr_msgp) aligned,
  1    10     2 seq_num fixed bin (35),				/* Sequence number of this message. */
  1    11     2 time fixed bin (71) unal,			/* Time message logged at */
  1    12     2 code fixed bin (11) unal,			/* Syserr code associated with this message. */
  1    13     2 text_len fixed bin (11) unal,			/* Length of message text in ASCII characters. */
  1    14     2 data_size fixed bin (11) unal,			/* Size of binary data */
  1    15     2 data_code fixed bin (11) unal,			/* Code identifying message type. */
  1    16     2 pad bit (60) unal,				/* RESERVED! */
  1    17     2 text char (0 refer (syserr_msg.text_len)),		/* Text of expanded message - kept in ASCII. */
  1    18     2 data (0 refer (syserr_msg.data_size)) bit (36);	/* Binary data area */
  1    19 
  1    20 
  1    21 /* End include file ..... syserr_message.incl.pl1 */
      809 
      810 
  2     1 /* Begin include file . . . . . poll_mpc_data.incl.pl1 */
  2     2 
  2     3 /* Describes format of syserr binary data logged with mpc polling */
  2     4 /* Prepared April 1980 by Larry Johnson */
  2     5 /* Modified November 1980 by Rich Coppola to add MPC error registers */
  2     6 /* Modified May 1982 by Rich Coppola to add info about EURC */
  2     7 /* Modified June 1983 by Paul Farley to add dev_name to dev_stat structure.
  2     8*   Modified June 1984 by Paul Farley to add MSP800(DAU) support.
  2     9*   Also changed structures to version_2, which separates unique data into
  2    10*   individual definitions.
  2    11**/
  2    12 
  2    13 dcl  poll_mpc_datap ptr;
  2    14 dcl  poll_mpc_specp ptr;				/* addr(poll_mpc_data.specific) */
  2    15 dcl  poll_mpc_data_version_2 fixed bin int static options (constant) init (2);
  2    16 dcl  poll_mpc_data_n_devices fixed bin;
  2    17 dcl  poll_mpc_data_n_stats fixed bin;
  2    18 
  2    19 dcl 1 poll_mpc_data aligned based (poll_mpc_datap),
  2    20     2 version fixed bin,
  2    21     2 name char (4),				/* Name of MPC */
  2    22     2 model fixed bin,				/* Model number */
  2    23     2 n_words fixed bin,				/* used to get size */
  2    24     2 specific					/* Unique data, depending on */
  2    25     (0 refer (poll_mpc_data.n_words)) fixed bin (35);	/* MPC model number */
  2    26 
  2    27 dcl 1 poll_mtp_data aligned based (poll_mpc_specp),
  2    28     2 firmware_rev char (2) unal,			/* Firmware revision */
  2    29     2 config_sw bit (16) unal,			/* Configuration switches */
  2    30     2 pad bit (2) unal,
  2    31     2 polled_stat_counters (12) fixed bin,		/* LA-PSI  error counters */
  2    32     2 polled_error_data,
  2    33       3 pad1 bit (8),
  2    34       3 interrupt_counter fixed bin (8) uns,		/* the error interrupt counter */
  2    35       3 register bit (16),				/* the MPC's error data register */
  2    36       3 AUXAR bit (16),				/* the auxilliary mpc addr at time of last error */
  2    37       3 INTAR bit (16),				/* the addr at which the error occurred */
  2    38     2 n_devices fixed bin,				/* Number of devices with statistics */
  2    39     2 n_stats fixed bin,				/* Number of non-zero statistics actually logged */
  2    40     2 dev_info (poll_mpc_data_n_devices refer (poll_mtp_data.n_devices)) like dev_info,
  2    41     2 stat_info (poll_mpc_data_n_stats refer (poll_mtp_data.n_stats)) like stat_info;
  2    42 
  2    43 dcl 1 poll_msp_data aligned like poll_mtp_data based (poll_mpc_specp);
  2    44 
  2    45 dcl 1 poll_urp_data aligned based (poll_mpc_specp),
  2    46     2 interrupt_counter fixed bin (8) uns,		/* the error interrupt counter */
  2    47     2 register bit (16),				/* the MPC's error data register */
  2    48     2 INTAR bit (16);				/* thar addr at which the error occurred */
  2    49 
  2    50 dcl 1 poll_eurc_data aligned based (poll_mpc_specp),
  2    51     2 uptime_clock fixed bin (32) uns,
  2    52     2 prom_revision unal,
  2    53       3 core bit (8),
  2    54       3 iom bit (8),
  2    55       3 special_controller bit (8),
  2    56       3 link_edit bit (8),
  2    57       3 pdsi_application bit (8),
  2    58       3 self_test bit (8),
  2    59       3 dai_application bit (8),
  2    60     2 n_devices fixed bin,				/* Number of devices with statistics */
  2    61     2 n_stats fixed bin,				/* Number of non-zero statistics actually logged */
  2    62     2 dev_info (poll_mpc_data_n_devices refer (poll_eurc_data.n_devices)) like dev_info,
  2    63     2 stat_info (poll_mpc_data_n_stats refer (poll_eurc_data.n_stats)) like stat_info;
  2    64 
  2    65 dcl 1 poll_dau_data aligned based (poll_mpc_specp),
  2    66     2 fw_rev char (2) unal,				/* Firmware revision */
  2    67     2 hw_rev bit (8) unal,				/* DAU Revision */
  2    68     2 config unal,
  2    69       3 ci_0_online bit (1),
  2    70       3 ci_1_online bit (1),
  2    71       3 psi0_2trip bit (1),				/* 0= 4trip, 1= 2trip */
  2    72       3 psi1_2trip bit (1),
  2    73       3 psi2_2trip bit (1),
  2    74       3 psi3_2trip bit (1),
  2    75     2 pad bit (4) unal,
  2    76     2 err_interrupts fixed bin (12) uns unal,
  2    77     2 psi_cntr (20) fixed bin (8) unal,
  2    78     2 ext_size fixed bin,				/* Size of DAU extention info, */
  2    79 						/* 0=none, 72=err_int>0 */
  2    80     2 n_devices fixed bin,				/* Number of devices with statistics */
  2    81     2 n_stats fixed bin,				/* Number of non-zero statistics actually logged */
  2    82     2 err_info (0 refer (poll_dau_data.ext_size)) bit (8) unal,
  2    83     2 dev_info (poll_mpc_data_n_devices refer (poll_dau_data.n_devices)) like dev_info,
  2    84     2 stat_info (poll_mpc_data_n_stats refer (poll_dau_data.n_stats)) like stat_info;
  2    85 
  2    86 dcl  dev_info_ptr ptr;
  2    87 
  2    88 dcl 1 dev_info based (dev_info_ptr),
  2    89     2 subsystem char (1) unal,			/* X from tapX */
  2    90     2 driveno fixed bin (6) uns unal,			/* Drive number */
  2    91     2 opi bit (1) unal,				/* Powered on Bit */
  2    92     2 ca fixed bin (2) uns unal,			/* CA or TCA number */
  2    93     2 port fixed bin (4) uns unal,			/* Port number */
  2    94     2 dev_model char (6) unal,			/* Model number */
  2    95     2 dev_name char (7) unal;				/* Name of the dev */
  2    96 
  2    97 dcl  stat_info_ptr ptr;
  2    98 
  2    99 dcl 1 stat_info based (stat_info_ptr),
  2   100     2 dev_index fixed bin (9) uns unal,			/* Index in dev_info, above */
  2   101     2 stat_index fixed bin (9) uns unal,		/* Which statistic for that device (1 to 16) */
  2   102     2 pad bit (2) unal,
  2   103     2 value fixed bin (16) uns unal;			/* Actual value of that stat */
  2   104 
  2   105 
  2   106 /* Start of MPC Summary Declarations */
  2   107 
  2   108 dcl  mpc_data_summaryp ptr;
  2   109 dcl  mpc_data_specp ptr;				/* addr(mpc_data_summary.specific) */
  2   110 dcl  mpc_data_summary_version_2 fixed bin int static options (constant) init (2);
  2   111 dcl  mpc_summary_n_devices fixed bin;
  2   112 
  2   113 dcl 1 mpc_data_summary aligned based (mpc_data_summaryp),
  2   114     2 version fixed bin,
  2   115     2 name char (4),				/* Name of MPC */
  2   116     2 model fixed bin,
  2   117     2 firmware_rev char (2),				/* Firmware revision */
  2   118 
  2   119 /* *old* MSP, MTP and URP specific data */
  2   120 
  2   121     2 config_sw bit (16),				/* Configuration switches */
  2   122     2 polled_stat_counters (12) fixed bin,		/* LA-PSI  error counters */
  2   123     2 interrupt_counter fixed bin (35),			/* the error interrupt counter */
  2   124     2 register bit (16),				/* the MPC's error data register */
  2   125     2 AUXAR bit (16),				/* the auxilliary mpc addr at time of last error */
  2   126     2 INTAR bit (16),				/* thar addr at which the error occurred */
  2   127 
  2   128 /* EURC Specific data */
  2   129 
  2   130     2 eurc_specifics,
  2   131       3 uptime_clock fixed bin (32) uns,
  2   132       3 prom_revision,
  2   133         4 core bit (8),
  2   134         4 iom bit (8),
  2   135         4 special_controller bit (8),
  2   136         4 link_edit bit (8),
  2   137         4 pdsi_application bit (8),
  2   138         4 self_test bit (8),
  2   139         4 dai_application bit (8),
  2   140 
  2   141 /* DAU specific data */
  2   142 
  2   143     2 hw_rev bit (8) unal,				/* DAU Revision */
  2   144     2 config unal,
  2   145       3 ci_0_online bit (1),
  2   146       3 ci_1_online bit (1),
  2   147       3 psi0_2trip bit (1),				/* 0= 4trip, 1= 2trip */
  2   148       3 psi1_2trip bit (1),
  2   149       3 psi2_2trip bit (1),
  2   150       3 psi3_2trip bit (1),
  2   151     2 err_interrupts fixed bin (35),
  2   152     2 err_info (72) bit (8) unal,
  2   153     2 psi_cntr (20) fixed bin (35),
  2   154 
  2   155 /* Device statistical data */
  2   156 
  2   157     2 n_devices fixed bin,				/* Number of devices with statistics */
  2   158     2 dev_stat (mpc_summary_n_devices refer (mpc_data_summary.n_devices)) like dev_stat;
  2   159 
  2   160 dcl  dev_stat_ptr ptr;
  2   161 
  2   162 dcl 1 dev_stat based (dev_stat_ptr),
  2   163     2 subsystem char (1) unal,			/* X from tapX */
  2   164     2 driveno fixed bin (6) uns unal,			/* Drive number */
  2   165     2 opi bit (1) unal,				/* Powered on Bit */
  2   166     2 ca fixed bin (2) uns unal,			/* CA or TCA number */
  2   167     2 port fixed bin (4) uns unal,			/* Port number */
  2   168     2 pad bit (5) unal,
  2   169     2 dev_model char (6) unal,			/* Model number */
  2   170     2 prev_driveno fixed bin (6) uns unal,
  2   171     2 pad1 bit (3) unal,
  2   172     2 dev_name char (6) unal,				/* Name of the dev */
  2   173     2 value (16) fixed bin (35);			/* Actual value of that stat */
  2   174 
  2   175 dcl  dev_sum_ptr ptr;
  2   176 
  2   177 dcl 1 dev_sum like dev_stat based (dev_sum_ptr);
  2   178 
  2   179 
  2   180 /* Note: except for the MPC registers only non-zero statistics are logged.
  2   181*   An entry is made in the stat_info array for each non-zero statistics noting
  2   182*   which device, and which of the counters was non-zero */
  2   183 
  2   184 /* End include file . . . . . poll_mpc_data.incl.pl1 */
      811 
      812 
  3     1 /* BEGIN INCLUDE FILE ... eurc_model_numbers.incl.pl1 ... 11/13/81 E. N. Kittlitz */
  3     2 
  3     3 dcl  eurc_model_numbers (4) fixed bin internal static init (8001, 8002, 8003, 8004);
  3     4 
  3     5 /* END INCLUDE FILE ... eurc_model_numbers.incl.pl1 ... */
      813 
      814 
  4     1 /* BEGIN INCLUDE FILE .. syserr_binary_def.incl.pl1 */
  4     2 
  4     3 /* This include file has an ALM version, keep 'em in sync. */
  4     4 
  4     5 /* format: off */
  4     6 
  4     7 /* Modified January 1984 by Paul Farley to add an array of entry values
  4     8*   to be examined by display_cpu_error. */
  4     9 /* Modified October 1984 by EJ Sharpe to include SB_audit_message */
  4    10 /* Modified January 1985 by EJ Sharpe for SB_char_data_classes */
  4    11 /* Modified 1985-01-25, BIM: added ring alarm audit support. */
  4    12 /* Modified 1985-02-20, EJ Sharpe: added SB_ibm3270_mde, syserr_binary_(seg vol)damage_class,
  4    13*		also changed some codes to "SB_unused_NN" - see line comments */
  4    14 
  4    15 /* In the future, these will be the only constants needed in this include
  4    16*file.  They are the binary data class strings for messages in the new format
  4    17*syserr logs.  The names are all of the form SB_ZZZZZZZ_data_class where
  4    18*ZZZZZZZ is the value of the data class string.  Message expanders are named
  4    19*expand_ZZZZZZZ_msg_ and are referenced by the log perusal tools. */
  4    20 
  4    21 dcl (						/* include file name */
  4    22 SB_io_status_data_class	init ("io_status"),		/* io_syserr_msg */
  4    23 SB_hwfault_data_class	init ("hwfault"),		/* syserr_fault_msg */
  4    24 SB_mos_data_class		init ("mos"),		/* scr */
  4    25 SB_segdamage_data_class	init ("segdamage"),		/* segdamage_msg */
  4    26 SB_voldamage_data_class	init ("voldamage"),		/* segdamage_msg (first two words) */
  4    27 SB_mdc_del_uidpath_data_class	init ("mdc_del_uidpath"),	/* none - 16 word UID path */
  4    28 SB_mmdam_data_class		init ("mmdam"),		/* syserr_mmdam_msg */
  4    29 SB_mpc_poll_data_class	init ("mpc_poll"),		/* poll_mpc_data */
  4    30 SB_fnp_poll_data_class	init ("fnp_poll"),		/* poll_fnp_data */
  4    31 SB_config_deck_data_class	init ("config_deck"),	/* config_deck */
  4    32 SB_vtoce_data_class		init ("vtoce"),		/* vtoce */
  4    33 SB_access_audit_data_class	init ("access_audit"),	/* access_audit_bin_header */
  4    34 SB_ibm3270_mde_data_class	init ("ibm3270_mde")	/* ibm3270_mpx_data */
  4    35 ) static internal char (16) varying options (constant);
  4    36 
  4    37 
  4    38 /************************
  4    39*Once the syserr$binary is replaced with something that takes real data classes
  4    40*and all system modules and tools are upgraded to use the new interface, the
  4    41*rest of this include file may be discarded.
  4    42*************************/
  4    43 
  4    44 /* The limit of 36 is arbitrary- there is no reason that it can not be
  4    45*   extended at any time. */
  4    46 
  4    47 dcl (
  4    48 SB_disk_err	init (1),		SBL_disk_err	init (5),
  4    49 SB_hw_fault	init (2),		SBL_hw_fault	init (176),
  4    50 SB_io_err		init (3),		SBL_io_err	init (5),
  4    51 SB_unused_4	init (4),		SBL_unused_4	init (1),	/* was "mos_poll" (mos poll time) */
  4    52 SB_mos_err	init (5),		SBL_mos_err	init (2),	/* mos memory error data */
  4    53 SB_unused_6	init (6),		SBL_unused_6	init (1),	/* was "bulk_status" (bulk dcb status) */
  4    54 SB_unused_7	init (7),		SBL_unused_7	init (1), /* was "bulk_csb" (bulk csb status) */
  4    55 SB_unused_8	init (8),		SBL_unused_8	init (3), /* was "free_st_1" */
  4    56 SB_unused_9	init (9),		SBL_unused_9	init (2), /* was "free_st_2" */
  4    57 SB_unused_10	init (10),	SBL_unused_10	init (21), /* was "unpr_add" */
  4    58 SB_zerpag		init (11),	SBL_zerpag	init (20),
  4    59 SB_unused_12	init (12),	SBL_unused_12	init (20), /* was "unpr_add" */
  4    60 SB_vtoc_salv_dam	init (13),	SBL_vtoc_salv_dam	init (20),
  4    61 SB_unused_14	init (14),	SBL_unused_14	init (20), /* was "page_rw_err" */
  4    62 SB_unused_15	init (15),	SBL_unused_15	init (3), /* was "ruad" */
  4    63 SB_random_segdamage	init (16),	SBL_random_segdamage init (20),
  4    64 SB_read_nc	init (17),	SBL_read_nc	init (2),
  4    65 SB_unused_18	init (18),	SBL_unused_18	init (2), /* was "vtoc_err" */
  4    66 SB_mdc_del_uidpath	init (19),	SBL_mdc_del_uidpath	init (16),
  4    67 SB_ocdcm_err	init (20),	SBL_ocdcm_err	init (5),
  4    68 SB_mmdam		init (21),	SBL_mmdam		init (2),
  4    69 SB_verify_lock	init (22),	SBL_verify_lock	init (176),
  4    70 SB_io_err_detail	init (23),	SBL_io_err_detail	init (11),
  4    71 SB_mpc_poll	init (24),	SBL_mpc_poll	init (256) /* max */,
  4    72 SB_fnp_poll	init (25),	SBL_fnp_poll	init (256) /* max */,
  4    73 SB_config_deck	init (26),	SBL_config_deck	init (256) /* 16 cards at 16 words */,
  4    74 SB_vtoce		init (27),	SBL_vtoce		init (192),    /* 1 VTOCE */
  4    75 SB_access_audit	init (28),	SBL_access_audit	init (256), /* max */
  4    76 SB_ibm3270_mde	init (35),	SBL_ibm3270_mde	init (256), /* max */
  4    77 SB_end_of_table	init (36),	SBL_end_of_table	init (1)
  4    78   ) internal static options (constant) fixed bin;
  4    79 
  4    80 
  4    81 /* The following array is a mapping of the old syserr$binary codes into the
  4    82*new data classes for MR11.  It is primarily used by syserr_copy to translate
  4    83*the binary data codes stored in the wired syserr log (see above) into the data
  4    84*classes needed by the ring-0 paged syserr log which is a new format log.  It
  4    85*is also used by syserr_log_util_ to translate the data classes back into the
  4    86*corresponding binary code (for tools not yet upgraded to deal with the new
  4    87*format log messages). */
  4    88 
  4    89 dcl SB_char_data_classes (36) char (16) varying internal static options (constant)
  4    90 	init (	"io_status",		/* 1 */
  4    91 		"hwfault",		/* 2 */
  4    92 		"io_status",		/* 3 */
  4    93 		"unused_4",		/* 4 */
  4    94 		"mos",			/* 5 */
  4    95 
  4    96 		"unused_6",		/* 6 */
  4    97 		"unused_7",		/* 7 */
  4    98 		"unused_8",		/* 8 */
  4    99 		"unused_9",		/* 9 */ 
  4   100 		"unused_10",		/* 10 */
  4   101 
  4   102 		"segdamage",		/* 11 */
  4   103 		"unused_12",		/* 12 */
  4   104 		"segdamage",		/* 13 */
  4   105 		"unused_14",		/* 14 */
  4   106 		"unused_15",		/* 15 */
  4   107 
  4   108 		"segdamage",		/* 16 */
  4   109 		"voldamage",		/* 17 */
  4   110 		"unused_18",		/* 18 */
  4   111 		"mdc_del_uidpath",		/* 19 */
  4   112 		"io_status",		/* 20 */
  4   113 
  4   114 		"mmdam",			/* 21 */
  4   115 		"hwfault",		/* 22 */
  4   116 		"io_status",		/* 23 */
  4   117 		"mpc_poll",		/* 24 */
  4   118 		"fnp_poll",		/* 25 */
  4   119 
  4   120 		"config_deck",		/* 26 */
  4   121 		"vtoce",			/* 27 */
  4   122 		"access_audit",		/* 28 */
  4   123 		"unused_29",		/* 29 */
  4   124 		"unused_30",		/* 30 */
  4   125 		"unused_31",		/* 31 */
  4   126 		"unused_32",		/* 32 */
  4   127 		"unused_33",		/* 33 */
  4   128 		"unused_34",		/* 34 */
  4   129 		"ibm3270_mde",		/* 35 */
  4   130 		"unused_36"		/* 36 */
  4   131 	);
  4   132 
  4   133 
  4   134 /* format: on */
  4   135 
  4   136 /* These constants are used by various tools which analyze syserr messages and
  4   137*still call the old interface "syserr_log_util_". */
  4   138 
  4   139      dcl	   syserr_binary_mos_mask init ("060000000000"b3) bit (36) static options (constant);
  4   140      dcl	   syserr_binary_seg_damage_mask init ("000374000000"b3) bit (36) static options (constant);
  4   141      dcl	   syserr_binary_vol_damage_mask init ("003413000000"b3) bit (36) static options (constant);
  4   142      dcl	   syserr_binary_address_damage_mask init ("002010000000"b3) bit (36) static options (constant);
  4   143 
  4   144      dcl	   display_cpu_error_binary_defs (2) init (
  4   145 			      2,			/** SB_hw_fault */
  4   146 			      22			/** SB_verify_lock */
  4   147 			      ) internal static options (constant) fixed bin;
  4   148 
  4   149 /* END INCLUDE FILE syserr_binary_def.incl.pl1 */
      815 
      816 
      817      end mpc_data_summary;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    04/02/85  1035.4  mpc_data_summary.pl1              >spec>on>6953_pbf-04/02/85>mpc_data_summary.pl1
809          1    08/18/77  1118.1  syserr_message.incl.pl1           >ldd>include>syserr_message.incl.pl1
811          2    04/02/85  1035.5  poll_mpc_data.incl.pl1            >spec>on>6953_pbf-04/02/85>poll_mpc_data.incl.pl1
813          3    05/27/82  1525.6  eurc_model_numbers.incl.pl1       >ldd>include>eurc_model_numbers.incl.pl1
815          4    03/15/85  0953.1  syserr_binary_def.incl.pl1        >ldd>include>syserr_binary_def.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
AUXAR                    20            based           bit(16)                  level 3 in structure "poll_msp_data" dcl 2-43
                                                                                  in procedure "mpc_data_summary" ref 385
AUXAR                    23            based           bit(16)                  level 2 in structure "stats_data" dcl 86
                                                                                  in procedure "mpc_data_summary" set ref 379* 385*
                                                                                  573
AUXAR                    20            based           bit(16)                  level 3 in structure "poll_mtp_data" dcl 2-27
                                                                                  in procedure "mpc_data_summary" ref 379
AUXAR                    23            based           bit(16)                  level 2 in structure "mpc_data_summary" dcl 2-113
                                                                                  in procedure "mpc_data_summary" set ref 573*
F_TIME                          000332 automatic       char(24)                 unaligned dcl 143 set ref 520* 525* 530* 539* 544*
                                                                                  623* 624*
INTAR                    21            based           bit(16)                  level 3 in structure "poll_mtp_data" dcl 2-27
                                                                                  in procedure "mpc_data_summary" ref 380
INTAR                    21            based           bit(16)                  level 3 in structure "poll_msp_data" dcl 2-43
                                                                                  in procedure "mpc_data_summary" ref 386
INTAR                     2            based           bit(16)                  level 2 in structure "poll_urp_data" dcl 2-45
                                                                                  in procedure "mpc_data_summary" ref 391
INTAR                    24            based           bit(16)                  level 2 in structure "stats_data" dcl 86
                                                                                  in procedure "mpc_data_summary" set ref 380* 386*
                                                                                  391* 574
INTAR                    24            based           bit(16)                  level 2 in structure "mpc_data_summary" dcl 2-113
                                                                                  in procedure "mpc_data_summary" set ref 574*
L_TIME                          000340 automatic       char(24)                 unaligned dcl 143 set ref 521* 525* 530* 540* 544*
SB_mpc_poll                            constant        fixed bin(17,0)          initial dcl 4-47 ref 290
addr                                                   builtin function         dcl 185 ref 273 291 326 417 419 425 427 432 434 438
                                                                                  439 465 493 500 515 586 600 602 605 606
all_mpcs                        000134 automatic       bit(1)                   initial unaligned dcl 54 set ref 54* 206* 497 675*
                                                                                  719*
arg                                    based           char                     unaligned dcl 39 set ref 658 659 659 659 663* 671
                                                                                  676 680 694 694 699 704 711 713 713 715 715 717
                                                                                  719 719 721 721 725 725 737 737 739 742* 791 797*
                                                                                  799*
arg_copy                        000520 automatic       varying char(10)         dcl 789 set ref 791* 793* 799*
arg_count                       000115 automatic       fixed bin(17,0)          dcl 40 set ref 202* 203 772 778
arg_len                         000114 automatic       fixed bin(17,0)          dcl 38 set ref 658 659 659 659 663 663 671 676 680
                                                                                  694 694 699 704 707 711 713 713 715 715 717 719
                                                                                  719 721 721 725 725 737 737 739 742 742 766* 791
                                                                                  797 797 799 799
arg_list_ptr                    000116 automatic       pointer                  dcl 41 set ref 201* 766*
arg_no                          000160 automatic       fixed bin(17,0)          initial dcl 68 set ref 68* 766* 768* 771* 771 772
                                                                                  777* 777 778
arg_ptr                         000112 automatic       pointer                  dcl 37 set ref 658 659 659 659 663 671 676 680 694
                                                                                  694 699 704 708 711 713 713 715 715 717 719 719
                                                                                  721 721 725 725 737 737 739 742 766* 791 797 799
attach_desc                     000244 automatic       char(180)                unaligned dcl 76 set ref 213* 214* 214 215*
bf_sw                           000133 automatic       bit(1)                   initial unaligned dcl 53 set ref 53* 321 533* 535*
                                                                                  713* 715*
buffer                                 based           bit(36)                  array level 2 dcl 79 set ref 273 277 277
ca                        0(16)        based           fixed bin(2,0)           level 2 in structure "dev_stat" packed unsigned
                                                                                  unaligned dcl 2-162 in procedure
                                                                                  "mpc_data_summary" set ref 470*
ca                        0(16)        based           fixed bin(2,0)           level 2 in structure "dev_info" packed unsigned
                                                                                  unaligned dcl 2-88 in procedure "mpc_data_summary"
                                                                                  ref 456 461 470
ca_num                          000407 automatic       fixed bin(17,0)          dcl 317 in procedure "count_it" set ref 446* 456*
                                                                                  461* 465
ca_num                          000443 automatic       fixed bin(17,0)          dcl 557 in procedure "pack" set ref 584* 586*
check_mpc                       000100 automatic       fixed bin(17,0)          dcl 31 set ref 670* 671*
cleanup                         000346 stack reference condition                dcl 183 ref 189
code                            000101 automatic       fixed bin(35,0)          dcl 32 set ref 191* 192 193* 215* 216 217* 221* 222
                                                                                  223* 228* 230 235 240* 241 243* 244 248* 249 250*
                                                                                  256* 257 258* 264* 265 266* 277* 279 280 281* 636*
                                                                                  638* 639* 645* 766* 767 768* 797* 798 799*
com_err_                        000036 constant        entry                    external dcl 164 ref 193 217 223 250 258 266 281 321
                                                                                  663 685 742 748 752 768 793 799
config                   35(08)        based           structure                level 2 in structure "stats_data" packed unaligned
                                                                                  dcl 86 in procedure "mpc_data_summary" set ref
                                                                                  408* 578
config                   35(08)        based           structure                level 2 in structure "mpc_data_summary" packed
                                                                                  unaligned dcl 2-113 in procedure
                                                                                  "mpc_data_summary" set ref 578*
config                    0(26)        based           structure                level 2 in structure "poll_dau_data" packed
                                                                                  unaligned dcl 2-65 in procedure "mpc_data_summary"
                                                                                  ref 408
config_sw                 4            based           bit(16)                  level 2 in structure "mpc_data_summary" dcl 2-113
                                                                                  in procedure "mpc_data_summary" set ref 569*
config_sw                 4            based           bit(16)                  level 2 in structure "stats_data" dcl 86
                                                                                  in procedure "mpc_data_summary" ref 569
convert_date_to_binary_         000054 constant        entry                    external dcl 171 ref 797
convert_date_to_binary_$relative
                                000056 constant        entry                    external dcl 172 ref 264
core                     26            based           bit(8)                   level 4 in structure "stats_data" dcl 86
                                                                                  in procedure "mpc_data_summary" set ref 397*
core                      1            based           bit(8)                   level 3 in structure "poll_eurc_data" packed
                                                                                  unaligned dcl 2-50 in procedure "mpc_data_summary"
                                                                                  ref 397
count_limit                     000154 automatic       fixed bin(17,0)          initial dcl 65 set ref 65*
cu_$arg_count                   000050 constant        entry                    external dcl 169 ref 202
cu_$arg_list_ptr                000046 constant        entry                    external dcl 168 ref 201
cu_$arg_ptr_rel                 000052 constant        entry                    external dcl 170 ref 766
dai_application           2(12)        based           bit(8)                   level 3 in structure "poll_eurc_data" packed
                                                                                  unaligned dcl 2-50 in procedure "mpc_data_summary"
                                                                                  ref 403
dai_application          34            based           bit(8)                   level 4 in structure "stats_data" dcl 86
                                                                                  in procedure "mpc_data_summary" set ref 403*
data                                   based           bit(36)                  array level 2 dcl 1-9 set ref 291
data_code                 4            based           fixed bin(11,0)          level 2 packed unaligned dcl 1-9 ref 290
data_size                 3(24)        based           fixed bin(11,0)          level 2 packed unaligned dcl 1-9 ref 290
date_time_                      000044 constant        entry                    external dcl 167 ref 520 521 539 540 623
dau_sw                          000145 automatic       bit(1)                   initial unaligned dcl 61 set ref 61* 360* 362 369
                                                                                  374 406 423
day_limit                       000155 automatic       fixed bin(17,0)          initial dcl 66 set ref 66*
dev_index                              based           fixed bin(9,0)           level 2 packed unsigned unaligned dcl 2-99 ref 439
dev_info                               based           structure                level 1 packed unaligned dcl 2-88 in procedure
                                                                                  "mpc_data_summary"
dev_info                  5            based           structure                array level 2 in structure "poll_eurc_data" dcl 2-50
                                                                                  in procedure "mpc_data_summary" set ref 417
dev_info                               based           structure                array level 2 in structure "poll_dau_data" dcl 2-65
                                                                                  in procedure "mpc_data_summary" set ref 425
dev_info                 24            based           structure                array level 2 in structure "poll_mtp_data" dcl 2-27
                                                                                  in procedure "mpc_data_summary" set ref 432
dev_info_ptr                    000362 automatic       pointer                  dcl 2-86 set ref 439* 443 445 449 449 451 456 457
                                                                                  461 462 466 467 468 469 470 471 472 473
dev_model                 0(27)        based           char(6)                  level 2 in structure "dev_stat" packed unaligned
                                                                                  dcl 2-162 in procedure "mpc_data_summary" set ref
                                                                                  472*
dev_model                 0(27)        based           char(6)                  level 2 in structure "dev_info" packed unaligned
                                                                                  dcl 2-88 in procedure "mpc_data_summary" ref 449
                                                                                  449 472
dev_name                  2(18)        based           char(6)                  level 2 in structure "dev_stat" packed unaligned
                                                                                  dcl 2-162 in procedure "mpc_data_summary" set ref
                                                                                  473*
dev_name                  2(09)        based           char(7)                  level 2 in structure "dev_info" packed unaligned
                                                                                  dcl 2-88 in procedure "mpc_data_summary" ref 473
dev_stat                116            based           structure                array level 2 in structure "stats_data" dcl 86
                                                                                  in procedure "mpc_data_summary" set ref 465 586
dev_stat                               based           structure                level 1 unaligned dcl 2-162 in procedure
                                                                                  "mpc_data_summary"
dev_stat                104            based           structure                array level 2 in structure "mpc_data_summary"
                                                                                  dcl 2-113 in procedure "mpc_data_summary" set ref
                                                                                  600 602 605 606
dev_stat_ptr                    000370 automatic       pointer                  dcl 2-160 set ref 465* 466 467 467 467 468 469 470
                                                                                  471 472 473 475 475 586* 587 603 609 613
dev_sum_ptr                     000372 automatic       pointer                  dcl 2-175 set ref 600* 613
display_mpc_data_               000064 constant        entry                    external dcl 175 ref 627
driveno                   0(09)        based           fixed bin(6,0)           level 2 in structure "dev_stat" packed unsigned
                                                                                  unaligned dcl 2-162 in procedure
                                                                                  "mpc_data_summary" set ref 467 467 468* 603
driveno                   0(09)        based           fixed bin(6,0)           level 2 in structure "next_stat" packed unsigned
                                                                                  unaligned dcl 560 in procedure "pack" ref 603
driveno                   0(09)        based           fixed bin(6,0)           level 2 in structure "dev_info" packed unsigned
                                                                                  unaligned dcl 2-88 in procedure "mpc_data_summary"
                                                                                  ref 445 451 467 468
end_of_status_data     5356            based           fixed bin(17,0)          level 2 dcl 86 set ref 517*
entries_found           111            based           fixed bin(17,0)          level 2 dcl 86 set ref 353* 353 516 525* 530* 624*
err_info                 37            based           bit(8)                   array level 2 in structure "stats_data" packed
                                                                                  unaligned dcl 86 in procedure "mpc_data_summary"
                                                                                  set ref 409*
err_info                 12            based           bit(8)                   array level 2 in structure "poll_dau_data" packed
                                                                                  unaligned dcl 2-65 in procedure "mpc_data_summary"
                                                                                  ref 409
err_interrupts            1            based           fixed bin(12,0)          level 2 in structure "poll_dau_data" packed unsigned
                                                                                  unaligned dcl 2-65 in procedure "mpc_data_summary"
                                                                                  ref 410
err_interrupts           36            based           fixed bin(35,0)          level 2 in structure "mpc_data_summary" dcl 2-113
                                                                                  in procedure "mpc_data_summary" set ref 579*
err_interrupts           36            based           fixed bin(35,0)          level 2 in structure "stats_data" dcl 86
                                                                                  in procedure "mpc_data_summary" set ref 410* 410
                                                                                  579
error_table_$badopt             000072 external static fixed bin(35,0)          dcl 181 set ref 742*
error_table_$end_of_info        000070 external static fixed bin(35,0)          dcl 180 ref 280
eurc_model_numbers              000000 constant        fixed bin(17,0)          initial array dcl 3-3 ref 336 337
eurc_specifics           25            based           structure                level 2 in structure "mpc_data_summary" dcl 2-113
                                                                                  in procedure "mpc_data_summary"
eurc_specifics           25            based           structure                level 2 in structure "stats_data" dcl 86
                                                                                  in procedure "mpc_data_summary"
eurc_sw                         000144 automatic       bit(1)                   initial unaligned dcl 61 set ref 61* 359* 374 395
                                                                                  415 443
expand_sw                       000141 automatic       bit(1)                   initial unaligned dcl 59 set ref 59* 356 717*
ext_file                        000140 automatic       bit(1)                   initial unaligned dcl 58 set ref 58* 214 737* 751
ext_size                  7            based           fixed bin(17,0)          level 2 dcl 2-65 ref 409 409 409 409 409 425 427
firmware_rev              3            based           char(2)                  level 2 in structure "mpc_data_summary" dcl 2-113
                                                                                  in procedure "mpc_data_summary" set ref 568*
firmware_rev                           based           char(2)                  level 2 in structure "poll_msp_data" packed
                                                                                  unaligned dcl 2-43 in procedure "mpc_data_summary"
                                                                                  ref 350
firmware_rev              3            based           char(2)                  level 2 in structure "stats_data" dcl 86
                                                                                  in procedure "mpc_data_summary" set ref 335* 342*
                                                                                  348* 350* 568
firmware_rev                           based           char(2)                  level 2 in structure "poll_mtp_data" packed
                                                                                  unaligned dcl 2-27 in procedure "mpc_data_summary"
                                                                                  ref 342
first_time              112            based           fixed bin(71,0)          level 2 packed unaligned dcl 86 set ref 327 331* 520
for_arg                                based           char                     unaligned dcl 44 set ref 264* 266*
for_len                         000122 automatic       fixed bin(17,0)          dcl 43 set ref 264 264 266 266 707*
for_ptr                         000120 automatic       pointer                  dcl 42 set ref 264 266 708*
for_sw                          000125 automatic       bit(1)                   initial unaligned dcl 47 set ref 47* 263 705* 747
for_time                        000152 automatic       fixed bin(71,0)          dcl 64 set ref 706*
from_data                              based           char(80)                 unaligned dcl 558 ref 607 609 613
from_ptr                        000454 automatic       pointer                  dcl 561 set ref 605* 607
from_sw                         000123 automatic       bit(1)                   initial unaligned dcl 45 set ref 45* 247 695*
from_time                       000146 automatic       fixed bin(71,0)          dcl 62 set ref 253* 256* 264* 271 539* 696*
fw_rev                                 based           char(2)                  level 2 packed unaligned dcl 2-65 ref 348
get_line_length_$switch         000066 constant        entry                    external dcl 176 ref 228
get_temp_segments_              000040 constant        entry                    external dcl 165 ref 191
hbound                                                 builtin function         dcl 185 ref 277 277 336 682 685 685
hw_rev                    0(18)        based           bit(8)                   level 2 in structure "poll_dau_data" packed
                                                                                  unaligned dcl 2-65 in procedure "mpc_data_summary"
                                                                                  ref 407
hw_rev                   35            based           bit(8)                   level 2 in structure "mpc_data_summary" packed
                                                                                  unaligned dcl 2-113 in procedure
                                                                                  "mpc_data_summary" set ref 577*
hw_rev                   35            based           bit(8)                   level 2 in structure "stats_data" packed unaligned
                                                                                  dcl 86 in procedure "mpc_data_summary" set ref
                                                                                  407* 577
i                               000404 automatic       fixed bin(17,0)          dcl 317 in procedure "count_it" set ref 336* 337*
                                                                                  362* 365 365 365* 369* 371 371 371*
i                               000422 automatic       fixed bin(17,0)          dcl 489 in procedure "look_for" set ref 490* 492
                                                                                  493*
idx                             000432 automatic       fixed bin(17,0)          dcl 512 set ref 514* 515 544*
interrupt_counter                      based           fixed bin(8,0)           level 2 in structure "poll_urp_data" unsigned
                                                                                  dcl 2-45 in procedure "mpc_data_summary" ref 389
interrupt_counter        16            based           fixed bin(8,0)           level 3 in structure "poll_mtp_data" unsigned
                                                                                  dcl 2-27 in procedure "mpc_data_summary" ref 377
interrupt_counter        16            based           fixed bin(8,0)           level 3 in structure "poll_msp_data" unsigned
                                                                                  dcl 2-43 in procedure "mpc_data_summary" ref 383
interrupt_counter        21            based           fixed bin(35,0)          level 2 in structure "stats_data" dcl 86
                                                                                  in procedure "mpc_data_summary" set ref 377* 377
                                                                                  383* 383 389* 389 571
interrupt_counter        21            based           fixed bin(35,0)          level 2 in structure "mpc_data_summary" dcl 2-113
                                                                                  in procedure "mpc_data_summary" set ref 571*
ioa_$ioa_switch                 000022 constant        entry                    external dcl 155 ref 522 524 525 530 541 543 544 624
iom                      27            based           bit(8)                   level 4 in structure "stats_data" dcl 86
                                                                                  in procedure "mpc_data_summary" set ref 398*
iom                       1(08)        based           bit(8)                   level 3 in structure "poll_eurc_data" packed
                                                                                  unaligned dcl 2-50 in procedure "mpc_data_summary"
                                                                                  ref 398
iox_$attach_ioname              000024 constant        entry                    external dcl 156 ref 215
iox_$close                      000030 constant        entry                    external dcl 158 ref 638
iox_$detach_iocb                000032 constant        entry                    external dcl 159 ref 639
iox_$open                       000026 constant        entry                    external dcl 157 ref 221
iox_$user_output                000034 external static pointer                  dcl 160 ref 190
last_time               114            based           fixed bin(71,0)          level 2 packed unaligned dcl 86 set ref 354* 521 623
link_edit                 1(24)        based           bit(8)                   level 3 in structure "poll_eurc_data" packed
                                                                                  unaligned dcl 2-50 in procedure "mpc_data_summary"
                                                                                  ref 400
link_edit                31            based           bit(8)                   level 4 in structure "stats_data" dcl 86
                                                                                  in procedure "mpc_data_summary" set ref 400*
logical                         000442 automatic       fixed bin(17,0)          dcl 557 in procedure "pack" set ref 583* 586*
logical                         000406 automatic       fixed bin(17,0)          dcl 317 in procedure "count_it" set ref 447* 451*
                                                                                  465
low                                                    builtin function         dcl 185 ref 587
m                               000445 automatic       fixed bin(17,0)          dcl 557 set ref 601* 602 604*
mask                            000111 automatic       bit(36)                  initial dcl 36 set ref 36*
mod                                                    builtin function         dcl 185 ref 451
model                     2            based           fixed bin(17,0)          level 2 in structure "stats_data" dcl 86
                                                                                  in procedure "mpc_data_summary" set ref 330* 337
                                                                                  346 460 567
model                     2            based           fixed bin(17,0)          level 2 in structure "mpc_data_summary" dcl 2-113
                                                                                  in procedure "mpc_data_summary" set ref 567*
model                     2            based           fixed bin(17,0)          level 2 in structure "poll_mpc_data" dcl 2-19
                                                                                  in procedure "mpc_data_summary" ref 330
more_args                       000126 automatic       bit(1)                   unaligned dcl 48 set ref 203* 655 677 722 772* 778*
                                                                                  792
mpc_cnt                         000165 automatic       fixed bin(17,0)          initial dcl 71 set ref 71* 206 490 498* 498 499 500
                                                                                  514 670 674* 674 676 682
mpc_data_summary                       based           structure                level 1 dcl 2-113 set ref 564*
mpc_data_summary_version_2             constant        fixed bin(17,0)          initial dcl 2-110 ref 565
mpc_data_summaryp               000366 automatic       pointer                  dcl 2-108 set ref 518* 533* 535* 564 565 566 567 568
                                                                                  569 570 571 572 573 574 575 576 577 578 579 580
                                                                                  581 599 599 600 600 601 602 604 605 606
mpc_name                               parameter       char(4)                  dcl 487 ref 482 492 499
mpc_only                        000132 automatic       bit(1)                   initial unaligned dcl 52 set ref 52* 413 533 582
                                                                                  739*
mpcreq                                 based           char(4)                  array level 2 dcl 79 set ref 492 499* 544* 671 676*
                                                                                  682 685 685
msg_seq                         000164 automatic       fixed bin(35,0)          dcl 70 set ref 248* 256*
msg_time                        000162 automatic       fixed bin(71,0)          dcl 69 set ref 248* 253 256*
my_dev_info                            based           structure                array level 1 packed unaligned dcl 137 set ref 439
my_dev_ptr                      000324 automatic       pointer                  dcl 141 set ref 417* 425* 432* 439
my_n_devices                    000321 automatic       fixed bin(17,0)          dcl 140 set ref 416* 424* 431*
my_n_stats                      000322 automatic       fixed bin(17,0)          dcl 140 set ref 418* 426* 433* 437
my_stat_info                           based           structure                array level 1 packed unaligned dcl 138 set ref 438
my_stat_ptr                     000326 automatic       pointer                  dcl 141 set ref 419* 427* 434* 438
n                               000446 automatic       fixed bin(17,0)          dcl 557 set ref 604* 605 606*
n_devices                10            based           fixed bin(17,0)          level 2 in structure "poll_dau_data" dcl 2-65
                                                                                  in procedure "mpc_data_summary" ref 424 427
n_devices               103            based           fixed bin(17,0)          level 2 in structure "mpc_data_summary" dcl 2-113
                                                                                  in procedure "mpc_data_summary" set ref 564 581*
                                                                                  599* 599 600 601 604
n_devices                22            based           fixed bin(17,0)          level 2 in structure "poll_mtp_data" dcl 2-27
                                                                                  in procedure "mpc_data_summary" ref 431 434
n_devices                 3            based           fixed bin(17,0)          level 2 in structure "poll_eurc_data" dcl 2-50
                                                                                  in procedure "mpc_data_summary" ref 416 419
n_stats                  11            based           fixed bin(17,0)          level 2 in structure "poll_dau_data" dcl 2-65
                                                                                  in procedure "mpc_data_summary" ref 426
n_stats                   4            based           fixed bin(17,0)          level 2 in structure "poll_eurc_data" dcl 2-50
                                                                                  in procedure "mpc_data_summary" ref 418
n_stats                  23            based           fixed bin(17,0)          level 2 in structure "poll_mtp_data" dcl 2-27
                                                                                  in procedure "mpc_data_summary" ref 433
name                      1            based           char(4)                  level 2 in structure "stats_data" dcl 86
                                                                                  in procedure "mpc_data_summary" set ref 329* 333
                                                                                  340 344 525* 530* 566
name                      1            based           char(4)                  level 2 in structure "poll_mpc_data" dcl 2-19
                                                                                  in procedure "mpc_data_summary" set ref 292* 329
name                            000004 constant        char(17)                 initial unaligned dcl 29 in procedure
                                                                                  "mpc_data_summary" set ref 191* 193* 217* 223*
                                                                                  243* 250* 258* 266* 281* 321* 645* 663* 685* 728
                                                                                  732 742* 748* 752* 768* 793* 799*
name                      1            based           char(4)                  level 2 in structure "mpc_data_summary" dcl 2-113
                                                                                  in procedure "mpc_data_summary" set ref 566*
next_ptr                        000450 automatic       pointer                  dcl 561 set ref 602* 603 609
next_stat                              based           structure                level 1 unaligned dcl 560
null                                                   builtin function         dcl 185 ref 503
of_file_att                     000136 automatic       bit(1)                   initial unaligned dcl 56 set ref 56* 220* 639
of_file_open                    000137 automatic       bit(1)                   initial unaligned dcl 56 set ref 56* 226* 638
of_path                         000172 automatic       char(168)                unaligned dcl 75 set ref 213 217 217 223 223 725*
                                                                                  728* 732*
open_status                     000102 automatic       bit(36)                  dcl 33 set ref 240* 241 243*
opi                       0(15)        based           bit(1)                   level 2 in structure "dev_stat" packed unaligned
                                                                                  dcl 2-162 in procedure "mpc_data_summary" set ref
                                                                                  469*
opi                       0(15)        based           bit(1)                   level 2 in structure "dev_info" packed unaligned
                                                                                  dcl 2-88 in procedure "mpc_data_summary" ref 443
                                                                                  469
output_file                     000135 automatic       bit(1)                   initial unaligned dcl 56 set ref 56* 209 235 637
                                                                                  734* 751
output_iocbp                    000170 automatic       pointer                  dcl 74 set ref 190* 215* 221* 228* 522* 524* 525*
                                                                                  530* 533* 535* 541* 543* 544* 624* 627* 638* 639*
pdsi_application          1(32)        based           bit(8)                   level 3 in structure "poll_eurc_data" packed
                                                                                  unaligned dcl 2-50 in procedure "mpc_data_summary"
                                                                                  ref 401
pdsi_application         32            based           bit(8)                   level 4 in structure "stats_data" dcl 86
                                                                                  in procedure "mpc_data_summary" set ref 401*
poll_dau_data                          based           structure                level 1 dcl 2-65
poll_eurc_data                         based           structure                level 1 dcl 2-50
poll_mpc_data                          based           structure                level 1 dcl 2-19
poll_mpc_data_version_2                constant        fixed bin(17,0)          initial dcl 2-15 ref 319
poll_mpc_datap                  000356 automatic       pointer                  dcl 2-13 set ref 291* 292 319 321 326 328 329 330
                                                                                  627*
poll_mpc_specp                  000360 automatic       pointer                  dcl 2-14 set ref 326* 342 348 350 365 371 374 377
                                                                                  378 379 380 383 384 385 386 389 390 391 396 397
                                                                                  398 399 400 401 402 403 407 408 409 409 410 416
                                                                                  417 418 419 424 425 426 427 431 432 433 434
poll_msp_data                          based           structure                level 1 dcl 2-43
poll_mtp_data                          based           structure                level 1 dcl 2-27
poll_urp_data                          based           structure                level 1 dcl 2-45
polled_error_data        15            based           structure                level 2 in structure "poll_mtp_data" dcl 2-27
                                                                                  in procedure "mpc_data_summary"
polled_error_data        15            based           structure                level 2 in structure "poll_msp_data" dcl 2-43
                                                                                  in procedure "mpc_data_summary"
polled_stat_counters      5            based           fixed bin(17,0)          array level 2 in structure "mpc_data_summary"
                                                                                  dcl 2-113 in procedure "mpc_data_summary" set ref
                                                                                  570*
polled_stat_counters      5            based           fixed bin(17,0)          array level 2 in structure "stats_data" dcl 86
                                                                                  in procedure "mpc_data_summary" set ref 365* 365
                                                                                  570
polled_stat_counters      1            based           fixed bin(17,0)          array level 2 in structure "poll_mtp_data" dcl 2-27
                                                                                  in procedure "mpc_data_summary" ref 365
port                      0(18)        based           fixed bin(4,0)           level 2 in structure "dev_stat" packed unsigned
                                                                                  unaligned dcl 2-162 in procedure
                                                                                  "mpc_data_summary" set ref 471*
port                      0(18)        based           fixed bin(4,0)           level 2 in structure "dev_info" packed unsigned
                                                                                  unaligned dcl 2-88 in procedure "mpc_data_summary"
                                                                                  ref 457 462 471
port_num                        000410 automatic       fixed bin(17,0)          dcl 317 in procedure "count_it" set ref 445* 457*
                                                                                  462* 465
port_num                        000444 automatic       fixed bin(17,0)          dcl 557 in procedure "pack" set ref 585* 586*
prev_driveno              2(09)        based           fixed bin(6,0)           level 2 packed unsigned unaligned dcl 2-162 set ref
                                                                                  467*
print_mpc_summary               000060 constant        entry                    external dcl 173 ref 535
print_mpc_summary$display_mpc_  000062 constant        entry                    external dcl 174 ref 533
print_syserr_msg_$open_err      000012 constant        entry                    external dcl 148 ref 243
prom_revision             1            based           structure                level 2 in structure "poll_eurc_data" packed
                                                                                  unaligned dcl 2-50 in procedure "mpc_data_summary"
prom_revision            26            based           structure                level 3 in structure "stats_data" dcl 86
                                                                                  in procedure "mpc_data_summary" set ref 576
prom_revision            26            based           structure                level 3 in structure "mpc_data_summary" dcl 2-113
                                                                                  in procedure "mpc_data_summary" set ref 576*
psi_cntr                  1(12)        based           fixed bin(8,0)           array level 2 in structure "poll_dau_data" packed
                                                                                  unaligned dcl 2-65 in procedure "mpc_data_summary"
                                                                                  ref 371
psi_cntr                 57            based           fixed bin(35,0)          array level 2 in structure "mpc_data_summary"
                                                                                  dcl 2-113 in procedure "mpc_data_summary" set ref
                                                                                  580*
psi_cntr                 57            based           fixed bin(35,0)          array level 2 in structure "stats_data" dcl 86
                                                                                  in procedure "mpc_data_summary" set ref 371* 371
                                                                                  580
ptr_array                       000104 automatic       pointer                  array dcl 34 set ref 191* 197 518 645*
register                 17            based           bit(16)                  level 3 in structure "poll_msp_data" dcl 2-43
                                                                                  in procedure "mpc_data_summary" ref 384
register                  1            based           bit(16)                  level 2 in structure "poll_urp_data" dcl 2-45
                                                                                  in procedure "mpc_data_summary" ref 390
register                 17            based           bit(16)                  level 3 in structure "poll_mtp_data" dcl 2-27
                                                                                  in procedure "mpc_data_summary" ref 374 378
register                 22            based           bit(16)                  level 2 in structure "mpc_data_summary" dcl 2-113
                                                                                  in procedure "mpc_data_summary" set ref 572*
register                 22            based           bit(16)                  level 2 in structure "stats_data" dcl 86
                                                                                  in procedure "mpc_data_summary" set ref 378* 378
                                                                                  384* 384 390* 390 572
release_temp_segments_          000042 constant        entry                    external dcl 166 ref 645
rtrim                                                  builtin function         dcl 185 ref 213 214 217 217 223 223 728 732
segs_allocated                  000142 automatic       bit(1)                   initial unaligned dcl 60 set ref 60* 196* 643 644*
self_test                33            based           bit(8)                   level 4 in structure "stats_data" dcl 86
                                                                                  in procedure "mpc_data_summary" set ref 402*
self_test                 2(04)        based           bit(8)                   level 3 in structure "poll_eurc_data" packed
                                                                                  unaligned dcl 2-50 in procedure "mpc_data_summary"
                                                                                  ref 402
seq_num                                based           fixed bin(35,0)          level 2 dcl 1-9 set ref 321*
short_arg                       000130 automatic       bit(1)                   initial unaligned dcl 50 set ref 50* 210 229 711*
short_display_sw                000127 automatic       bit(1)                   initial unaligned dcl 49 set ref 49* 210* 212* 230*
                                                                                  232* 234* 525 533* 535* 544* 544* 544* 627* 733*
size                                                   builtin function         dcl 185 ref 199 199 199 273 277 277 493 493 500 500
                                                                                  515 515
special_controller       30            based           bit(8)                   level 4 in structure "stats_data" dcl 86
                                                                                  in procedure "mpc_data_summary" set ref 399*
special_controller        1(16)        based           bit(8)                   level 3 in structure "poll_eurc_data" packed
                                                                                  unaligned dcl 2-50 in procedure "mpc_data_summary"
                                                                                  ref 399
specific                  4            based           fixed bin(35,0)          array level 2 dcl 2-19 set ref 326
st                              000405 automatic       fixed bin(17,0)          dcl 317 set ref 437* 438*
st_inx                          000411 automatic       fixed bin(17,0)          dcl 317 set ref 474* 475 475
stat_index                0(09)        based           fixed bin(9,0)           level 2 packed unsigned unaligned dcl 2-99 ref 474
stat_info                              based           structure                array level 2 in structure "poll_dau_data" dcl 2-65
                                                                                  in procedure "mpc_data_summary" set ref 427
stat_info                              based           structure                array level 2 in structure "poll_mtp_data" dcl 2-27
                                                                                  in procedure "mpc_data_summary" set ref 434
stat_info                              based           structure                level 1 packed unaligned dcl 2-99 in procedure
                                                                                  "mpc_data_summary"
stat_info                              based           structure                array level 2 in structure "poll_eurc_data" dcl 2-50
                                                                                  in procedure "mpc_data_summary" set ref 419
stat_info_ptr                   000364 automatic       pointer                  dcl 2-97 set ref 438* 439 474 475
stat_ptr                               parameter       pointer                  dcl 488 set ref 482 493* 500* 503*
stats_block              40            based           bit(36)                  array level 2 dcl 79 set ref 199* 493 500 515
stats_block_ptr                 000330 automatic       pointer                  dcl 142 set ref 199 199 199 273 277 277 292* 327 328
                                                                                  329 330 331 333 334 335 336 337 337 340 341 342
                                                                                  344 345 346 347 348 350 353 353 354 358 359 360
                                                                                  365 365 371 371 376 377 377 378 378 379 380 382
                                                                                  383 383 384 384 385 386 388 389 389 390 390 391
                                                                                  396 396 397 398 399 400 401 402 403 407 408 409
                                                                                  410 410 430 430 448 452 458 458 460 460 463 463
                                                                                  465 493 493 500 500 515* 515 515 516 517 520 521
                                                                                  525 525 530 530 566 567 568 569 570 571 572 573
                                                                                  574 575 576 577 578 579 580 586 589 591 623 624
stats_data                             based           structure                level 1 dcl 86 set ref 199 199 199 273 277 277 493
                                                                                  493 500 500 515 515
substr                                                 builtin function         dcl 185 ref 241 333 340 344 449 449 473 658 659 659
                                                                                  659 680 725
subsystem                              based           char(1)                  level 2 in structure "dev_info" packed unaligned
                                                                                  dcl 2-88 in procedure "mpc_data_summary" ref 466
subsystem                              based           char(1)                  level 2 in structure "dev_stat" packed unaligned
                                                                                  dcl 2-162 in procedure "mpc_data_summary" set ref
                                                                                  466* 587
syserr_log_util_$close          000016 constant        entry                    external dcl 150 ref 636
syserr_log_util_$open           000010 constant        entry                    external dcl 147 ref 240
syserr_log_util_$read           000014 constant        entry                    external dcl 149 ref 277
syserr_log_util_$search         000020 constant        entry                    external dcl 151 ref 248 256
syserr_msg                             based           structure                level 1 dcl 1-9
syserr_msgp                     000354 automatic       pointer                  dcl 1-7 set ref 273* 277* 286 288 290 290 291 321
                                                                                  331 354
t                                      parameter       fixed bin(71,0)          dcl 788 set ref 785 797*
tab_cnt                         000110 automatic       fixed bin(17,0)          initial dcl 35 set ref 35*
temp                            000166 automatic       fixed bin(17,0)          dcl 72 set ref 228* 230
text_len                  3(12)        based           fixed bin(11,0)          level 2 packed unaligned dcl 1-9 ref 291
the_dau_sw              107            based           bit(1)                   level 2 dcl 86 set ref 347* 360
the_eurc_sw             106            based           bit(1)                   level 2 dcl 86 set ref 336 337* 359
the_msp_sw              104            based           bit(1)                   level 2 dcl 86 set ref 345* 382 430 448
the_mtp_sw              103            based           bit(1)                   level 2 dcl 86 set ref 341* 376 430 460
the_urp_sw              105            based           bit(1)                   level 2 dcl 86 set ref 334* 358 388
time                      1            based           fixed bin(71,0)          level 2 packed unaligned dcl 1-9 ref 286 288 331 354
to_data                                based           char(80)                 unaligned dcl 559 set ref 607* 609* 613*
to_ptr                          000452 automatic       pointer                  dcl 561 set ref 606* 607
to_sw                           000124 automatic       bit(1)                   initial unaligned dcl 46 set ref 46* 269* 271 285
                                                                                  700* 747
to_time                         000150 automatic       fixed bin(71,0)          dcl 63 set ref 264* 271* 286 288* 540* 701*
top_of_page_req                 000131 automatic       bit(1)                   initial unaligned dcl 51 set ref 51* 235* 237* 522
                                                                                  541
type_other              110            based           fixed bin(17,0)          level 2 dcl 86 set ref 452* 458 458* 463 463* 589
                                                                                  591
unspec                                                 builtin function         dcl 185 set ref 564*
uptime_clock             25            based           fixed bin(32,0)          level 3 in structure "stats_data" unsigned dcl 86
                                                                                  in procedure "mpc_data_summary" set ref 396* 396
                                                                                  575
uptime_clock             25            based           fixed bin(32,0)          level 3 in structure "mpc_data_summary" unsigned
                                                                                  dcl 2-113 in procedure "mpc_data_summary" set ref
                                                                                  575*
uptime_clock                           based           fixed bin(32,0)          level 2 in structure "poll_eurc_data" unsigned
                                                                                  dcl 2-50 in procedure "mpc_data_summary" ref 396
urp_sw                          000143 automatic       bit(1)                   initial unaligned dcl 61 set ref 61* 358* 362 413
value                     0(20)        based           fixed bin(16,0)          level 2 in structure "stat_info" packed unsigned
                                                                                  unaligned dcl 2-99 in procedure "mpc_data_summary"
                                                                                  ref 475
value                     4            based           fixed bin(35,0)          array level 2 in structure "dev_stat" dcl 2-162
                                                                                  in procedure "mpc_data_summary" set ref 475* 475
version                                based           fixed bin(17,0)          level 2 in structure "poll_mpc_data" dcl 2-19
                                                                                  in procedure "mpc_data_summary" set ref 319 321*
                                                                                  328
version                                based           fixed bin(17,0)          level 2 in structure "mpc_data_summary" dcl 2-113
                                                                                  in procedure "mpc_data_summary" set ref 565*
version                                based           fixed bin(17,0)          level 2 in structure "stats_data" dcl 86
                                                                                  in procedure "mpc_data_summary" set ref 328*
work                                   based           structure                level 1 dcl 79
workp                           000156 automatic       pointer                  dcl 67 set ref 197* 199 273 277 277 492 493 499 500
                                                                                  515 544 671 676 682 685 685

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
SBL_access_audit                       internal static fixed bin(17,0)          initial dcl 4-47
SBL_config_deck                        internal static fixed bin(17,0)          initial dcl 4-47
SBL_disk_err                           internal static fixed bin(17,0)          initial dcl 4-47
SBL_end_of_table                       internal static fixed bin(17,0)          initial dcl 4-47
SBL_fnp_poll                           internal static fixed bin(17,0)          initial dcl 4-47
SBL_hw_fault                           internal static fixed bin(17,0)          initial dcl 4-47
SBL_ibm3270_mde                        internal static fixed bin(17,0)          initial dcl 4-47
SBL_io_err                             internal static fixed bin(17,0)          initial dcl 4-47
SBL_io_err_detail                      internal static fixed bin(17,0)          initial dcl 4-47
SBL_mdc_del_uidpath                    internal static fixed bin(17,0)          initial dcl 4-47
SBL_mmdam                              internal static fixed bin(17,0)          initial dcl 4-47
SBL_mos_err                            internal static fixed bin(17,0)          initial dcl 4-47
SBL_mpc_poll                           internal static fixed bin(17,0)          initial dcl 4-47
SBL_ocdcm_err                          internal static fixed bin(17,0)          initial dcl 4-47
SBL_random_segdamage                   internal static fixed bin(17,0)          initial dcl 4-47
SBL_read_nc                            internal static fixed bin(17,0)          initial dcl 4-47
SBL_unused_10                          internal static fixed bin(17,0)          initial dcl 4-47
SBL_unused_12                          internal static fixed bin(17,0)          initial dcl 4-47
SBL_unused_14                          internal static fixed bin(17,0)          initial dcl 4-47
SBL_unused_15                          internal static fixed bin(17,0)          initial dcl 4-47
SBL_unused_18                          internal static fixed bin(17,0)          initial dcl 4-47
SBL_unused_4                           internal static fixed bin(17,0)          initial dcl 4-47
SBL_unused_6                           internal static fixed bin(17,0)          initial dcl 4-47
SBL_unused_7                           internal static fixed bin(17,0)          initial dcl 4-47
SBL_unused_8                           internal static fixed bin(17,0)          initial dcl 4-47
SBL_unused_9                           internal static fixed bin(17,0)          initial dcl 4-47
SBL_verify_lock                        internal static fixed bin(17,0)          initial dcl 4-47
SBL_vtoc_salv_dam                      internal static fixed bin(17,0)          initial dcl 4-47
SBL_vtoce                              internal static fixed bin(17,0)          initial dcl 4-47
SBL_zerpag                             internal static fixed bin(17,0)          initial dcl 4-47
SB_access_audit                        internal static fixed bin(17,0)          initial dcl 4-47
SB_access_audit_data_class             internal static varying char(16)         initial dcl 4-21
SB_char_data_classes                   internal static varying char(16)         initial array dcl 4-89
SB_config_deck                         internal static fixed bin(17,0)          initial dcl 4-47
SB_config_deck_data_class              internal static varying char(16)         initial dcl 4-21
SB_disk_err                            internal static fixed bin(17,0)          initial dcl 4-47
SB_end_of_table                        internal static fixed bin(17,0)          initial dcl 4-47
SB_fnp_poll                            internal static fixed bin(17,0)          initial dcl 4-47
SB_fnp_poll_data_class                 internal static varying char(16)         initial dcl 4-21
SB_hw_fault                            internal static fixed bin(17,0)          initial dcl 4-47
SB_hwfault_data_class                  internal static varying char(16)         initial dcl 4-21
SB_ibm3270_mde                         internal static fixed bin(17,0)          initial dcl 4-47
SB_ibm3270_mde_data_class              internal static varying char(16)         initial dcl 4-21
SB_io_err                              internal static fixed bin(17,0)          initial dcl 4-47
SB_io_err_detail                       internal static fixed bin(17,0)          initial dcl 4-47
SB_io_status_data_class                internal static varying char(16)         initial dcl 4-21
SB_mdc_del_uidpath                     internal static fixed bin(17,0)          initial dcl 4-47
SB_mdc_del_uidpath_data_class          internal static varying char(16)         initial dcl 4-21
SB_mmdam                               internal static fixed bin(17,0)          initial dcl 4-47
SB_mmdam_data_class                    internal static varying char(16)         initial dcl 4-21
SB_mos_data_class                      internal static varying char(16)         initial dcl 4-21
SB_mos_err                             internal static fixed bin(17,0)          initial dcl 4-47
SB_mpc_poll_data_class                 internal static varying char(16)         initial dcl 4-21
SB_ocdcm_err                           internal static fixed bin(17,0)          initial dcl 4-47
SB_random_segdamage                    internal static fixed bin(17,0)          initial dcl 4-47
SB_read_nc                             internal static fixed bin(17,0)          initial dcl 4-47
SB_segdamage_data_class                internal static varying char(16)         initial dcl 4-21
SB_unused_10                           internal static fixed bin(17,0)          initial dcl 4-47
SB_unused_12                           internal static fixed bin(17,0)          initial dcl 4-47
SB_unused_14                           internal static fixed bin(17,0)          initial dcl 4-47
SB_unused_15                           internal static fixed bin(17,0)          initial dcl 4-47
SB_unused_18                           internal static fixed bin(17,0)          initial dcl 4-47
SB_unused_4                            internal static fixed bin(17,0)          initial dcl 4-47
SB_unused_6                            internal static fixed bin(17,0)          initial dcl 4-47
SB_unused_7                            internal static fixed bin(17,0)          initial dcl 4-47
SB_unused_8                            internal static fixed bin(17,0)          initial dcl 4-47
SB_unused_9                            internal static fixed bin(17,0)          initial dcl 4-47
SB_verify_lock                         internal static fixed bin(17,0)          initial dcl 4-47
SB_voldamage_data_class                internal static varying char(16)         initial dcl 4-21
SB_vtoc_salv_dam                       internal static fixed bin(17,0)          initial dcl 4-47
SB_vtoce                               internal static fixed bin(17,0)          initial dcl 4-47
SB_vtoce_data_class                    internal static varying char(16)         initial dcl 4-21
SB_zerpag                              internal static fixed bin(17,0)          initial dcl 4-47
dev_sum                                based           structure                level 1 unaligned dcl 2-177
display_cpu_error_binary_defs          internal static fixed bin(17,0)          initial array dcl 4-144
mpc_data_specp                         automatic       pointer                  dcl 2-109
mpc_summary_n_devices                  automatic       fixed bin(17,0)          dcl 2-111
poll_mpc_data_n_devices                automatic       fixed bin(17,0)          dcl 2-16
poll_mpc_data_n_stats                  automatic       fixed bin(17,0)          dcl 2-17
syserr_binary_address_damage_mask      internal static bit(36)                  initial unaligned dcl 4-142
syserr_binary_mos_mask                 internal static bit(36)                  initial unaligned dcl 4-139
syserr_binary_seg_damage_mask          internal static bit(36)                  initial unaligned dcl 4-140
syserr_binary_vol_damage_mask          internal static bit(36)                  initial unaligned dcl 4-141

NAMES DECLARED BY EXPLICIT CONTEXT.
add_dev                         003501 constant        entry                    internal dcl 596 ref 587
clean_up                        003673 constant        entry                    internal dcl 633 ref 189 304
count_it                        001573 constant        entry                    internal dcl 311 ref 292
done                            001566 constant        label                    dcl 304 ref 194 218 224 244 251 259 267 282 664 687
                                                                                  743 749 753 769 794 800
expand_syserr_entry             003602 constant        entry                    internal dcl 621 ref 356
get_arg                         004554 constant        entry                    internal dcl 763 ref 656 679 723 796
look                            002611 constant        label                    dcl 490
look_for                        002607 constant        entry                    internal dcl 482 ref 292
loop                            001435 constant        label                    dcl 277 ref 295
mpc_data_summary                000377 constant        entry                    external dcl 26
new_mpc                         004000 constant        label                    dcl 659 ref 682
pack                            003330 constant        entry                    internal dcl 554 ref 519
print                           001565 constant        label                    dcl 299 ref 280 286
print_it                        002671 constant        entry                    internal dcl 510 ref 299
put_arg                         004634 constant        entry                    internal dcl 775 ref 690 729
scan_args                       003767 constant        entry                    internal dcl 652 ref 204
skip_dev_no_opi                 002604 constant        label                    dcl 476 ref 443
skip_mpc                        004103 constant        label                    dcl 677 ref 671
time_arg                        004644 constant        entry                    internal dcl 785 ref 696 701 706

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      5360        5454    5026        5370
Length      6006    5026        74         315     331           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
mpc_data_summary                    688 external procedure  is an external procedure.  
on unit on line 189                  64 on unit               
count_it                                internal procedure  shares stack frame of external procedure mpc_data_summary.  
look_for                                internal procedure  shares stack frame of external procedure mpc_data_summary.  
print_it                                internal procedure  shares stack frame of external procedure mpc_data_summary.  
pack                                    internal procedure  shares stack frame of external procedure mpc_data_summary.  
add_dev                                 internal procedure  shares stack frame of external procedure mpc_data_summary.  
expand_syserr_entry                     internal procedure  shares stack frame of external procedure mpc_data_summary.  
clean_up                             88 internal procedure  is called by several nonquick procedures.  
scan_args                               internal procedure  shares stack frame of external procedure mpc_data_summary.  
get_arg                                 internal procedure  shares stack frame of external procedure mpc_data_summary.  
time_arg                                internal procedure  shares stack frame of external procedure mpc_data_summary.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
mpc_data_summary         000100 check_mpc                   mpc_data_summary
                         000101 code                        mpc_data_summary
                         000102 open_status                 mpc_data_summary
                         000104 ptr_array                   mpc_data_summary
                         000110 tab_cnt                     mpc_data_summary
                         000111 mask                        mpc_data_summary
                         000112 arg_ptr                     mpc_data_summary
                         000114 arg_len                     mpc_data_summary
                         000115 arg_count                   mpc_data_summary
                         000116 arg_list_ptr                mpc_data_summary
                         000120 for_ptr                     mpc_data_summary
                         000122 for_len                     mpc_data_summary
                         000123 from_sw                     mpc_data_summary
                         000124 to_sw                       mpc_data_summary
                         000125 for_sw                      mpc_data_summary
                         000126 more_args                   mpc_data_summary
                         000127 short_display_sw            mpc_data_summary
                         000130 short_arg                   mpc_data_summary
                         000131 top_of_page_req             mpc_data_summary
                         000132 mpc_only                    mpc_data_summary
                         000133 bf_sw                       mpc_data_summary
                         000134 all_mpcs                    mpc_data_summary
                         000135 output_file                 mpc_data_summary
                         000136 of_file_att                 mpc_data_summary
                         000137 of_file_open                mpc_data_summary
                         000140 ext_file                    mpc_data_summary
                         000141 expand_sw                   mpc_data_summary
                         000142 segs_allocated              mpc_data_summary
                         000143 urp_sw                      mpc_data_summary
                         000144 eurc_sw                     mpc_data_summary
                         000145 dau_sw                      mpc_data_summary
                         000146 from_time                   mpc_data_summary
                         000150 to_time                     mpc_data_summary
                         000152 for_time                    mpc_data_summary
                         000154 count_limit                 mpc_data_summary
                         000155 day_limit                   mpc_data_summary
                         000156 workp                       mpc_data_summary
                         000160 arg_no                      mpc_data_summary
                         000162 msg_time                    mpc_data_summary
                         000164 msg_seq                     mpc_data_summary
                         000165 mpc_cnt                     mpc_data_summary
                         000166 temp                        mpc_data_summary
                         000170 output_iocbp                mpc_data_summary
                         000172 of_path                     mpc_data_summary
                         000244 attach_desc                 mpc_data_summary
                         000321 my_n_devices                mpc_data_summary
                         000322 my_n_stats                  mpc_data_summary
                         000324 my_dev_ptr                  mpc_data_summary
                         000326 my_stat_ptr                 mpc_data_summary
                         000330 stats_block_ptr             mpc_data_summary
                         000332 F_TIME                      mpc_data_summary
                         000340 L_TIME                      mpc_data_summary
                         000354 syserr_msgp                 mpc_data_summary
                         000356 poll_mpc_datap              mpc_data_summary
                         000360 poll_mpc_specp              mpc_data_summary
                         000362 dev_info_ptr                mpc_data_summary
                         000364 stat_info_ptr               mpc_data_summary
                         000366 mpc_data_summaryp           mpc_data_summary
                         000370 dev_stat_ptr                mpc_data_summary
                         000372 dev_sum_ptr                 mpc_data_summary
                         000404 i                           count_it
                         000405 st                          count_it
                         000406 logical                     count_it
                         000407 ca_num                      count_it
                         000410 port_num                    count_it
                         000411 st_inx                      count_it
                         000422 i                           look_for
                         000432 idx                         print_it
                         000442 logical                     pack
                         000443 ca_num                      pack
                         000444 port_num                    pack
                         000445 m                           pack
                         000446 n                           pack
                         000450 next_ptr                    pack
                         000452 to_ptr                      pack
                         000454 from_ptr                    pack
                         000520 arg_copy                    time_arg

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_g_a               r_le_a              alloc_cs            alloc_temp          call_ext_out_desc   call_ext_out
call_int_this       call_int_other      return              bound_check_signal  mod_fx1             enable
shorten_stack       ext_entry           int_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      convert_date_to_binary_       convert_date_to_binary_$relative
cu_$arg_count                 cu_$arg_list_ptr              cu_$arg_ptr_rel               date_time_
display_mpc_data_             get_line_length_$switch       get_temp_segments_            ioa_$ioa_switch
iox_$attach_ioname            iox_$close                    iox_$detach_iocb              iox_$open
print_mpc_summary             print_mpc_summary$display_mpc_                              print_syserr_msg_$open_err
release_temp_segments_        syserr_log_util_$close        syserr_log_util_$open         syserr_log_util_$read
syserr_log_util_$search

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$badopt           error_table_$end_of_info      iox_$user_output




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     26 000376        35 000404        36 000405        45 000406        46 000407        47 000410        49 000411
     50 000413        51 000414        52 000415        53 000416        54 000417        56 000420        58 000423
     59 000424        60 000425        61 000426        65 000431        66 000432        68 000433        71 000435
    189 000436       190 000460       191 000464       192 000504       193 000506       194 000532       196 000533
    197 000535       199 000537       201 000561       202 000570       203 000577       204 000602       206 000603
    209 000607       210 000611       212 000616       213 000620       214 000646       215 000677       216 000732
    217 000734       218 001005       220 001007       221 001011       222 001032       223 001034       224 001106
    226 001110       228 001112       229 001125       230 001127       232 001137       233 001141       234 001142
    235 001144       237 001153       240 001154       241 001165       243 001173       244 001214       247 001216
    248 001220       249 001237       250 001241       251 001265       253 001266       254 001270       256 001271
    257 001306       258 001310       259 001334       263 001335       264 001337       265 001366       266 001370
    267 001422       269 001423       271 001425       273 001431       277 001435       279 001455       280 001457
    281 001462       282 001510       285 001511       286 001513       287 001521       288 001522       290 001527
    291 001537       292 001546       295 001564       299 001565       304 001566       306 001572       311 001573
    319 001574       321 001577       324 001637       326 001640       327 001643       328 001650       329 001652
    330 001655       331 001657       333 001665       334 001672       335 001674       336 001676       337 001706
    338 001714       339 001716       340 001717       341 001721       342 001723       343 001726       344 001727
    345 001731       346 001733       347 001736       348 001737       349 001742       350 001743       353 001746
    354 001750       356 001756       358 001761       359 001764       360 001766       362 001770       365 002001
    367 002005       369 002010       371 002017       372 002034       374 002036       376 002045       377 002050
    378 002054       379 002056       380 002060       381 002062       382 002063       383 002065       384 002071
    385 002073       386 002075       387 002077       388 002100       389 002102       390 002106       391 002110
    395 002112       396 002114       397 002117       398 002123       399 002127       400 002133       401 002137
    402 002144       403 002150       404 002154       406 002155       407 002157       408 002165       409 002175
    410 002252       413 002262       415 002267       416 002271       417 002274       418 002276       419 002300
    420 002304       423 002305       424 002307       425 002312       426 002321       427 002324       428 002331
    430 002332       431 002337       432 002342       433 002344       434 002346       437 002352       438 002361
    439 002364       443 002375       445 002404       446 002412       447 002413       448 002414       449 002420
    451 002430       452 002433       456 002435       457 002444       458 002452       460 002457       461 002464
    462 002473       463 002501       465 002506       466 002522       467 002526       468 002537       469 002542
    470 002547       471 002552       472 002555       473 002560       474 002563       475 002572       476 002604
    479 002606       482 002607       490 002611       492 002621       493 002626       494 002631       496 002636
    497 002640       498 002642       499 002643       500 002650       501 002654       503 002661       504 002664
    510 002671       514 002672       515 002701       516 002705       517 002707       518 002711       519 002713
    520 002714       521 002736       522 002760       524 003002       525 003021       530 003065       533 003125
    535 003145       536 003162       539 003163       540 003200       541 003215       543 003237       544 003256
    548 003325       551 003327       554 003330       564 003331       565 003343       566 003345       567 003350
    568 003352       569 003354       570 003356       571 003361       572 003363       573 003365       574 003367
    575 003371       576 003373       577 003376       578 003402       579 003411       580 003413       581 003416
    582 003417       583 003422       584 003427       585 003433       586 003437       587 003454       588 003461
    589 003463       590 003467       591 003471       592 003476       593 003500       596 003501       599 003502
    600 003504       601 003510       602 003521       603 003525       604 003536       605 003547       606 003553
    607 003556       608 003561       609 003564       610 003571       612 003572       613 003574       615 003601
    621 003602       623 003603       624 003625       627 003656       628 003671       633 003672       636 003700
    637 003707       638 003712       639 003725       643 003741       644 003744       645 003745       647 003766
    652 003767       655 003770       656 003772       658 003773       659 004000       663 004013       664 004047
    670 004050       671 004057       672 004067       674 004071       675 004072       676 004073       677 004103
    679 004105       680 004106       682 004113       685 004116       687 004151       690 004152       692 004153
    694 004154       695 004165       696 004167       697 004171       699 004172       700 004176       701 004200
    702 004202       704 004203       705 004207       706 004211       707 004213       708 004215       709 004217
    711 004220       713 004227       715 004242       717 004255       719 004264       721 004277       722 004307
    723 004311       725 004312       728 004324       729 004352       731 004354       732 004355       733 004403
    734 004406       735 004410       737 004411       739 004424       742 004433       743 004465       745 004466
    747 004467       748 004473       749 004520       751 004521       752 004525       753 004552       757 004553
    763 004554       766 004555       767 004574       768 004576       769 004625       771 004626       772 004627
    773 004633       775 004634       777 004635       778 004637       779 004643       785 004644       791 004646
    792 004657       793 004661       794 004712       796 004713       797 004714       798 004741       799 004743
    800 005001       803 005002


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
