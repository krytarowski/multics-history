	COMPILATION LISTING OF SEGMENT is_legal_proj
	Compiled by: Multics PL/I Compiler, Release 33e, of October 6, 1992
	Compiled at: CGI                             
	Compiled on: 2000-04-17_1927.59_Mon_mdt
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 is_legal_proj: proc (name, ans);
       12 
       13 /* IS_LEGAL_PROJ - answer whether a project is a legal one. looks in SAT */
       14 
       15 dcl  name char (*) unal,
       16      name1 char (32) aligned,
       17      en char (32) aligned,
       18      ans char (*) varying,
       19      i fixed bin,
       20      ec fixed bin,
       21      satep ptr,
       22      satp ptr;
       23 
       24 dcl (addr, null) builtin;
       25 
       26 dcl  active_fnc_err_ entry options (variable),
       27      error_table_$wrong_no_of_args fixed bin ext,
       28      cu_$arg_count entry (fixed bin),
       29      hcs_$initiate entry (char (*) aligned, char (*) aligned, char (*) aligned,
       30      fixed bin, fixed bin, ptr, fixed bin),
       31      get_wdir_ entry () returns (char (168) aligned);
       32 
       33 /* =============================================== */
       34 
       35 	call cu_$arg_count (i);			/* check arg count */
       36 	if i ^= 2 then do;
       37 	     ec = error_table_$wrong_no_of_args;
       38 	     en = "";
       39 er:	     call active_fnc_err_ (ec, "is_legal_proj", en);
       40 	     return;
       41 	end;
       42 	name1 = name;
       43 	ans = "false";
       44 	en = "smf.cur.sat";
       45 	call hcs_$initiate ((get_wdir_()), en, "", 0, 1, satp, ec);
       46 	if satp = null then go to er;
       47 	do i = 1 to sat.current_size;
       48 	     satep = addr (sat.project(i));
       49 	     if satep -> project.state = 1 then
       50 	     if name1 = satep -> project.project_id then go to yup;
       51 	end;
       52 	return;
       53 yup:	ans = "true";
       54 
       55 
  1     1 /* BEGIN INCLUDE FILE ... sat.incl.pl1 */
  1     2 
  1     3 
  1     4 
  1     5 
  1     6 /****^  HISTORY COMMENTS:
  1     7*  1) change(86-09-05,Parisek), approve(87-06-17,MCR7570),
  1     8*     audit(87-06-15,Hirneisen), install(87-08-06,MR12.1-1066):
  1     9*     Expand comment line of project.state to include the renamed state (state =
  1    10*     3).
  1    11*                                                   END HISTORY COMMENTS */
  1    12 
  1    13 
  1    14 
  1    15 /* Modified 740723 by PG to add AIM info */
  1    16 /* Modified 750604 by T. Casey to add priority scheduler parameters */
  1    17 /* Modified May 1976 by T. Casey to add project cutoff limits */
  1    18 /* Modified May 1978 by T. Casey to add pdir_quota */
  1    19 /* Modified November 1978 by T. Casey to add max_(fore back)ground and abs_foreground_cpu_limit */
  1    20 /* Modified July 1979 by J. N. R. Barnecut  to support multiple rate structures. (UNCA) */
  1    21 /* Modified January 1982 by E. N. Kittlitz for user_attributes.incl.pl1 changes */
  1    22 /* Modified 1984-07-05 BIM range of authorizations, version 3 */
  1    23 
  1    24 dcl (SAT_version init (3),				/* version 2 of this declaration */
  1    25 
  1    26      SAT_header_lth init (466),			/* length in words of SAT header */
  1    27      SAT_entry_lth init (80), 			/* length in words of SAT entry */
  1    28 
  1    29      SAT_project_name_length init (9)			/* proper length of project.project_id */
  1    30      ) fixed bin internal static options (constant);
  1    31 
  1    32 dcl 1 sat based (satp) aligned,
  1    33 
  2     1 /* BEGIN INCLUDE FILE author.incl.pl1 */
  2     2 
  2     3 /* the "author" items must always be the first ones in the table. The
  2     4*   module which moves the converted table to the System Control process
  2     5*   fills in these data items and assumes them to be at the head of the segment
  2     6*   regardless of the specific table's actual declaration. The variables
  2     7*   "lock" and "last_install_time" used to be "process_id" and "ev_channel"
  2     8*    respectively. For tables installed in multiple processes, these
  2     9*    are to be used to lock out multiple installations. */
  2    10 
  2    11 /*  Lock should be used as a modification lock. Since, in general,
  2    12*    entries may not be moved in system tables, even by installations,
  2    13*    it is sufficient for only installers and programs that change threads
  2    14*    to set or respect the lock. Simply updating data in an entry
  2    15*    requires no such protection.
  2    16*
  2    17*    Last_install_time is used by readers of system tables to detect
  2    18*    installations or other serious modifications. By checking it before
  2    19*    and after copying a block of data, they can be protected against
  2    20*    modifications.
  2    21*
  2    22*    Modules that set the lock should save proc_group_id, and then
  2    23*    put their group id there for the time they hold the lock.
  2    24*    if they do not actually install the, they should restore the group id.
  2    25**/
  2    26 
  2    27     2 author aligned,				/* validation data about table's author */
  2    28       3 proc_group_id char (32),			/* process-group-id  (personid.projectid.tag) */
  2    29       3 lock bit (36),				/* installation lock */
  2    30       3 update_attributes bit (1) unal,			/* update/add/delete attributes */
  2    31       3 update_authorization bit (1) unal,		/* update only authorizations */
  2    32       3 deferral_notified bit (1) unal,			/* installer notified of deferral of installation */
  2    33       3 pad bit (33) unaligned,
  2    34       3 last_install_time fixed bin (71),
  2    35       3 table char (4),				/* name of table, e.g., SAT MGT TTT RTDT PDT etc. */
  2    36       3 w_dir char (64),				/* author's working directory */
  2    37 
  2    38 /* END INCLUDE FILE author.incl.pl1 */
  1    34 
  1    35     2 max_size fixed bin,				/* max number of entries table can grow */
  1    36     2 current_size fixed bin,				/* current size of table  (in entries) */
  1    37     2 version fixed bin,				/* version number of table (word 32) */
  1    38     2 freep fixed bin,				/* free chain ptr. 0 if no free entries */
  1    39     2 n_projects fixed bin,				/* number of entries actually used */
  1    40     2 pad_was_max_users bit (36) aligned,
  1    41     2 max_units fixed bin,				/* maximum number of login-units per session */
  1    42     2 pad_was_max_prim bit (36) aligned,	
  1    43     2 uwt_size fixed bin,				/* size of User Weight Table */
  1    44     2 uwt (24) aligned,				/* User Weight Table */
  1    45       3 initproc char (64) unaligned,			/* user's initial procedure  */
  1    46       3 units fixed bin,				/* weight of initial procedure */
  1    47     2 system_admin (2) char (32) unal,			/* system administrator ID */
  1    48     2 pad1 (4) fixed bin,				/* padding to 466 wds */
  1    49     2 project (3258),				/* The SAT entries. 255K segment. */
  1    50       3 pad (80) fixed bin;				/* each entry is 80 words long  */
  1    51 
  1    52 
  1    53 dcl 1 project based (satep) aligned,			/* declaration of a single SAT entry  */
  1    54     2 state fixed bin,				/* state 1 = normal, 0 = free, 2 = deleted, 3 = renamed */
  1    55     2 project_id char (12) unaligned,			/* project's name */
  1    56     2 project_dir char (64) unaligned,			/* project's directory */
  1    57     2 pdt_ptr pointer,				/* pointer to current PDT */
  1    58     2 max_users fixed bin,				/* maximum number of users from project */
  1    59     2 n_users fixed bin,				/* current number */
  1    60     2 at like user_attributes aligned,			/* include user_attributes.incl.pl1 */
  1    61     2 admin (4) aligned,				/* list of project's administrators  */
  1    62       3 userid char (30) unal,			/* administrator's user-id (personid.projectid) */
  1    63       3 pad char (2) unal,
  1    64     2 cutoff char (1),				/* if project is cut off, why. */
  1    65     2 min_ring fixed bin,				/* lowest ring for project */
  1    66     2 max_ring fixed bin,				/* highest ring for project */
  1    67     2 alias char (8) unal,				/* project alias */
  1    68     2 group char (8) unal,				/* default group for this project */
  1    69     2 grace_max fixed bin,				/* maximum bump grace */
  1    70     2 audit bit (36),				/* audit flags for project */
  1    71     2 project_authorization (2) bit (72),		/* authorization of this project */
  1    72     2 groups (2) char (8) unal,			/* authorized groups for this project */
  1    73     2 days_to_cutoff fixed bin (17) unaligned,		/* these figures are as of last running of daily_summary */
  1    74     2 pct_balance fixed bin (17) unaligned,		/* they are used for warning message printing only */
  1    75     2 dollars_to_cutoff float bin,			/* and are not to be taken as up-to-date figures */
  1    76     2 pdir_quota fixed bin (17) unaligned,		/* max pdir quota allowed for project */
  1    77     2 max_foreground fixed bin (9) unsigned unaligned,	/* max simultaneous foreground and background */
  1    78     2 max_background fixed bin (9) unsigned unaligned,	/* processes that a user on this project can have */
  1    79     2 abs_foreground_cpu_limit fixed bin (17) unaligned,	/* time limit on foreground absentee jobs */
  1    80     2 rs_number fixed bin (9) unsigned unaligned,		/* rate structure number (0=default rates ) */
  1    81     2 satpad1 fixed bin (9) unsigned unaligned,
  1    82     2 satpad (1) bit (36) aligned,			/* pad to 80 words */
  1    83     2 chain fixed bin;				/* if free entry, chain */
  1    84 
  1    85 /* END INCLUDE FILE ... sat.incl.pl1 */
       56 
       57 
  3     1 /* BEGIN INCLUDE FILE ... user_attributes.incl.pl1  TAC 10/79 */
  3     2 
  3     3 
  3     4 /****^  HISTORY COMMENTS:
  3     5*  1) change(86-12-11,Brunelle), approve(87-07-13,MCR7741),
  3     6*     audit(87-04-19,GDixon), install(87-08-04,MR12.1-1056):
  3     7*     Add incl for abs_attributes.incl.pl1 to automatically include absentee
  3     8*     attribute switches.
  3     9*  2) change(87-04-19,GDixon), approve(87-07-13,MCR7741),
  3    10*     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1056):
  3    11*      A) Add USER_ATTRIBUTE_NAMES arrays.  attribute_names.incl.pl1 can thereby
  3    12*         be deleted.
  3    13*      B) Add constants identifying attributes that can be changed by user at
  3    14*         login, etc.
  3    15*                                                   END HISTORY COMMENTS */
  3    16 
  3    17 
  3    18 /* Modified 82-01-03  E. N. Kittlitz.  to declare a complete level-1 structure */
  3    19 
  3    20 /* format: style4 */
  3    21 dcl  1 user_attributes aligned based,			/* the user user_attributes */
  3    22        (2 administrator bit (1),			/* 1  system administrator privileges */
  3    23        2 primary_line bit (1),			/* 2  user has primary-line privileges  */
  3    24        2 nobump bit (1),				/* 2  user cannot be bumped */
  3    25        2 guaranteed_login bit (1),			/* 4  user has guaranteed login privileges */
  3    26        2 anonymous bit (1),				/* 5  used only in SAT. project may have anon.users */
  3    27        2 nopreempt bit (1),				/* 6  used only in PDT. user not preemptable by others
  3    28*						   .  of same project (distinct from "nobump") */
  3    29        2 nolist bit (1),				/* 7  don't list user on "who" */
  3    30        2 dialok bit (1),				/* 8  user may have multiple consoles */
  3    31        2 multip bit (1),				/* 9  user may have several processes */
  3    32        2 bumping bit (1),				/* 10 in SAT. Can users in project bump each other? */
  3    33        2 brief bit (1),				/* 11 no login or logout message */
  3    34        2 vinitproc bit (1),				/* 12 user may change initial procedure */
  3    35        2 vhomedir bit (1),				/* 13 user may change homedir */
  3    36        2 nostartup bit (1),				/* 14 user does not want start_up.ec */
  3    37        2 sb_ok bit (1),				/* 15 user may be standby */
  3    38        2 pm_ok bit (1),				/* 16 user may be primary */
  3    39        2 eo_ok bit (1),				/* 17 user may be edit_only */
  3    40        2 daemon bit (1),				/* 18 user may login as daemon */
  3    41        2 vdim bit (1),				/* 19 * OBSOLETE * user may change outer mdle */
  3    42        2 no_warning bit (1),				/* 20 no warning message */
  3    43        2 igroup bit (1),				/* 21 in SAT: this project may give its users individual groups
  3    44*						   .  in PDT: this user has an individual load control group */
  3    45        2 save_pdir bit (1),				/* 22 save pdir after fatal process error */
  3    46        2 disconnect_ok bit (1),			/* 23 ok to save user's disconnected processes */
  3    47        2 save_on_disconnect bit (1),			/* 24 save them unless -nosave login arg is given */
  3    48        2 pad bit (12)) unaligned;
  3    49 
  3    50 dcl  USER_ATTRIBUTE_NAMES (0:24) char (20) int static options (constant) init
  3    51     ("none",					/* 0 */
  3    52      "administrator",				/* 1 */
  3    53      "primary_line",				/* 2 */
  3    54      "nobump",					/* 3 */
  3    55      "guaranteed_login",				/* 4 */
  3    56      "anonymous",					/* 5 */
  3    57      "nopreempt",					/* 6 */
  3    58      "nolist",					/* 7 */
  3    59      "dialok",					/* 8 */
  3    60      "multip",					/* 9 */
  3    61      "bumping",					/* 10 */
  3    62      "brief",					/* 11 */
  3    63      "vinitproc",					/* 12 */
  3    64      "vhomedir",					/* 13 */
  3    65      "nostartup",					/* 14 */
  3    66      "no_secondary",				/* 15 */
  3    67      "no_prime",					/* 16 */
  3    68      "no_eo",					/* 17 */
  3    69      "daemon",					/* 18 */
  3    70      "",						/* 19 vdim OBSOLETE */
  3    71      "no_warning",					/* 20 */
  3    72      "igroup",					/* 21 */
  3    73      "save_pdir",					/* 22 */
  3    74      "disconnect_ok",				/* 23 */
  3    75      "save_on_disconnect");				/* 24 */
  3    76 
  3    77 dcl  ALT_USER_ATTRIBUTE_NAMES (0:24) char (20) int static options (constant) init
  3    78     ("null",					/* 0 */
  3    79      "admin",					/* 1 */
  3    80      "", "",					/* 2 - 3 */
  3    81      "guar",					/* 4 */
  3    82      "anon",					/* 5 */
  3    83      "", "",					/* 6 - 7 */
  3    84      "dial",					/* 8 */
  3    85      "multi_login",					/* 9 */
  3    86      "preempting",					/* 10 */
  3    87      "",						/* 11 */
  3    88      "v_process_overseer",				/* 12 */
  3    89      "v_home_dir",					/* 13 */
  3    90      "no_start_up",					/* 14 */
  3    91      "no_sec",					/* 15 */
  3    92      "no_primary",					/* 16 */
  3    93      "no_edit_only",				/* 17 */
  3    94      "op_login",					/* 18 */
  3    95      "",						/* 19 */
  3    96      "nowarn",					/* 20 */
  3    97      "", "", "",					/* 21 - 23 */
  3    98      "save");					/* 24 */
  3    99 
  3   100 dcl  USER_ATTRIBUTES_always_allowed bit (36) aligned int static
  3   101      options(constant) init("000000000010000000010000000000000000"b);
  3   102     /* SAT/PDT attributes not needed for user to give (brief, no_warning) */
  3   103 
  3   104 dcl  USER_ATTRIBUTES_default_in_pdt bit (36) aligned int static
  3   105      options(constant) init("000000000010000000010000000000000000"b);
  3   106     /* PDT value for (brief, no_warning) is default */
  3   107 
  3   108 dcl  USER_ATTRIBUTES_settable_by_user bit (36) aligned int static
  3   109      options(constant) init("000100000110010000010000000000000000"b);	
  3   110     /* user MIGHT set (bump, ns, brief, guar, no_warning) */
  3   111 
  4     1 /* BEGIN INCLUDE FILE ... user_abs_attributes.incl.pl1 */
  4     2 
  4     3 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  4     4 /*							       */
  4     5 /* This include file describes the attributes of an absentee job.  It is     */
  4     6 /* used by user_table_entry.incl.pl1, abs_message_format.incl.pl1            */
  4     7 /* and PIT.incl.pl1.   */
  4     8 /*							       */
  4     9 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  4    10 
  4    11 /****^  HISTORY COMMENTS:
  4    12*  1) change(86-12-08,GDixon), approve(87-07-13,MCR7741),
  4    13*     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1056):
  4    14*     Separated abs_attributes from the request structure
  4    15*     (abs_message_format.incl.pl1) so that the identical structure could be
  4    16*     used in the ute structure (user_table_entry.incl.pl1).
  4    17*  2) change(87-04-19,GDixon), approve(87-07-13,MCR7741),
  4    18*     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1056):
  4    19*     Added ABS_ATTRIBUTE_NAMES array.
  4    20*  3) change(87-11-11,Parisek), approve(88-02-11,MCR7849),
  4    21*     audit(88-03-22,Lippard), install(88-07-13,MR12.2-1047):
  4    22*     Added the no_start_up flag. SCP6367
  4    23*                                                   END HISTORY COMMENTS */
  4    24 
  4    25 dcl 1 user_abs_attributes		aligned based,
  4    26       2 restartable			bit (1) unaligned,	/* 1 if request may be started over from the beginning */
  4    27       2 user_deferred_until_time	bit (1) unaligned,	/* 1 if request was specified as deferred */
  4    28       2 proxy			bit (1) unaligned,	/* 1 if request submitted for someone else */
  4    29       2 set_bit_cnt			bit (1) unaligned,	/* 1 if should set bit count after every write call */
  4    30       2 time_in_gmt			bit (1) unaligned,	/* 1 if deferred_time is in GMT */
  4    31       2 user_deferred_indefinitely	bit (1) unaligned,	/* 1 if operator is to say when to run it */
  4    32       2 secondary_ok		bit (1) unaligned,	/* 1 if ok to log in as secondary foreground user */
  4    33       2 truncate_absout		bit (1) unaligned,	/* 1 if .absout is to be truncated */
  4    34       2 restarted			bit (1) unaligned,	/* 1 if job is restarted */
  4    35       2 no_start_up                     bit (1) unaligned,	/* 1 if requested -ns */
  4    36       2 attributes_pad		bit (26) unaligned;
  4    37 
  4    38 dcl  ABS_ATTRIBUTE_NAMES (10) char (28) varying int static options(constant) init(
  4    39 	"restartable",
  4    40 	"user_deferred_until_time",
  4    41 	"proxy",
  4    42 	"set_bit_cnt",
  4    43 	"time_in_gmt",
  4    44 	"user_deferred_indefinitely",
  4    45 	"secondary_ok",
  4    46 	"truncate_absout",
  4    47 	"restarted",
  4    48 	"no_start_up");
  4    49 
  4    50 /* END INCLUDE FILE ... user_abs_attributes.incl.pl1 */
  4    51 
  3   112 
  3   113 
  3   114 /* END INCLUDE FILE ... user_attributes.incl.pl1 */
       58 
       59 
       60 
       61      end is_legal_proj;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    04/17/00  1927.5  is_legal_proj.pl1                 >udd>sm>ds>w>ml>is_legal_proj.pl1
56           1    08/06/87  1516.6  sat.incl.pl1                      >ldd>incl>sat.incl.pl1
1-34         2    04/21/82  1311.8  author.incl.pl1                   >ldd>incl>author.incl.pl1
58           3    08/06/87  1013.6  user_attributes.incl.pl1          >ldd>incl>user_attributes.incl.pl1
3-112        4    07/14/88  2115.0  user_abs_attributes.incl.pl1      >ldd>incl>user_abs_attributes.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
active_fnc_err_                 000010 constant        entry                    external dcl 26 ref 39
addr                                                   builtin function         dcl 24 ref 48
ans                                    parameter       varying char             dcl 15 set ref 11 43* 53*
cu_$arg_count                   000014 constant        entry                    external dcl 26 ref 35
current_size             36            based           fixed bin(17,0)          level 2 dcl 1-32 ref 47
ec                              000121 automatic       fixed bin(17,0)          dcl 15 set ref 37* 39* 45*
en                              000110 automatic       char(32)                 dcl 15 set ref 38* 39* 44* 45*
error_table_$wrong_no_of_args   000012 external static fixed bin(17,0)          dcl 26 ref 37
get_wdir_                       000020 constant        entry                    external dcl 26 ref 45
hcs_$initiate                   000016 constant        entry                    external dcl 26 ref 45
i                               000120 automatic       fixed bin(17,0)          dcl 15 set ref 35* 36 47* 48*
name                                   parameter       char                     packed unaligned dcl 15 ref 11 42
name1                           000100 automatic       char(32)                 dcl 15 set ref 42* 49
null                                                   builtin function         dcl 24 ref 46
project                                based           structure                level 1 dcl 1-53 in procedure "is_legal_proj"
project                 722            based           structure                array level 2 in structure "sat" dcl 1-32
                                                                                  in procedure "is_legal_proj" set ref 48
project_id                1            based           char(12)                 level 2 packed packed unaligned dcl 1-53 ref 49
sat                                    based           structure                level 1 dcl 1-32
satep                           000122 automatic       pointer                  dcl 15 set ref 48* 49 49
satp                            000124 automatic       pointer                  dcl 15 set ref 45* 46 47 48
state                                  based           fixed bin(17,0)          level 2 dcl 1-53 ref 49
user_attributes                        based           structure                level 1 dcl 3-21

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
ABS_ATTRIBUTE_NAMES                    internal static varying char(28)         initial array dcl 4-38
ALT_USER_ATTRIBUTE_NAMES               internal static char(20)                 initial array packed unaligned dcl 3-77
SAT_entry_lth                          internal static fixed bin(17,0)          initial dcl 1-24
SAT_header_lth                         internal static fixed bin(17,0)          initial dcl 1-24
SAT_project_name_length                internal static fixed bin(17,0)          initial dcl 1-24
SAT_version                            internal static fixed bin(17,0)          initial dcl 1-24
USER_ATTRIBUTES_always_allowed         internal static bit(36)                  initial dcl 3-100
USER_ATTRIBUTES_default_in_pdt         internal static bit(36)                  initial dcl 3-104
USER_ATTRIBUTES_settable_by_user       internal static bit(36)                  initial dcl 3-108
USER_ATTRIBUTE_NAMES                   internal static char(20)                 initial array packed unaligned dcl 3-50
user_abs_attributes                    based           structure                level 1 dcl 4-25

NAMES DECLARED BY EXPLICIT CONTEXT.
er                              000070 constant        label                    dcl 39 ref 46
is_legal_proj                   000031 constant        entry                    external dcl 11
yup                             000245 constant        label                    dcl 53 set ref 49

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       356         400     260         366
Length       632     260        22         215      75           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
is_legal_proj                       182 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
is_legal_proj            000100 name1                       is_legal_proj
                         000110 en                          is_legal_proj
                         000120 i                           is_legal_proj
                         000121 ec                          is_legal_proj
                         000122 satep                       is_legal_proj
                         000124 satp                        is_legal_proj

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return_mac          ext_entry_desc

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
active_fnc_err_               cu_$arg_count                 get_wdir_                     hcs_$initiate

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$wrong_no_of_args




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000025        35 000051        36 000057        37 000062        38 000065        39 000070        40 000117
     42 000120        43 000126        44 000137        45 000142        46 000213        47 000217        48 000227
     49 000233        51 000242        52 000244        53 000245        61 000257


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
