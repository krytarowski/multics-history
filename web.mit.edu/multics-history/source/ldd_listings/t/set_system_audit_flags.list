	COMPILATION LISTING OF SEGMENT set_system_audit_flags
	Compiled by: Multics PL/I Compiler, Release 28d, of October 4, 1983
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 01/22/85  1525.0 mst Tue
	    Options: optimize list

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 
        7 /* format: style1,^inddcls,^indnoniterdo,insnl,linecom,indcomtxt */
        8 
        9 set_system_audit_flags:
       10 ssaf:
       11      procedure;
       12 
       13 /* format: off */
       14 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
       15 	/*									*/
       16 	/* SET_SYSTEM_AUDIT_FLAGS							*/
       17 	/*									*/
       18 	/* Command to set the system access audit enable flags and thresholds per command line	*/
       19 	/* per command line arguments.						*/
       20 	/*									*/
       21 	/* Usage:	     set_system_audit_flags -control_args				*/
       22 	/*									*/
       23 	/*									*/
       24 	/* DISPLAY_SYSTEM_AUDIT_FLAGS							*/
       25 	/*									*/
       26 	/* Command to display the current values of the system access auditing enable flags and	*/
       27 	/* thresholds.								*/
       28 	/*									*/
       29 	/* Usage:	     display_system_audit_flags					*/
       30 	/*									*/
       31 	/*									*/
       32 	/* History:								*/
       33 	/* 84-12-14 EJ Sharpe - changed display format					*/
       34 	/* 84-12-12 EJ Sharpe - initial coding						*/
       35 	/*									*/
       36 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
       37 /* format: on */
       38 
       39 
       40 /* AUTOMATIC */
       41 
       42 dcl     covert_channel_sw	 bit (1) aligned;
       43 dcl     covert_channel_threshold
       44 			 bit (72) aligned;
       45 dcl     successful_access_sw	 bit (1) aligned;
       46 dcl     successful_access_threshold
       47 			 bit (72) aligned;
       48 dcl     unsuccessful_access_sw bit (1) aligned;
       49 dcl     unsuccessful_access_threshold
       50 			 bit (72) aligned;
       51 
       52 dcl     ME		 char (32);
       53 dcl     arglistptr		 pointer;
       54 dcl     arglen		 fixed bin (21);
       55 dcl     argptr		 pointer;
       56 dcl     class_str		 char (172);
       57 dcl     n_args		 fixed bin;
       58 dcl     ec		 fixed bin (35);
       59 
       60 
       61 /* EXTERNAL CONSTANT */
       62 
       63 dcl     error_table_$bad_arg	 fixed bin (35) external;
       64 dcl     error_table_$noarg	 fixed bin (35) external;
       65 
       66 dcl     sys_info$audit_covert_channel
       67 			 bit (1) aligned external;
       68 dcl     sys_info$covert_channel_threshold
       69 			 bit (72) aligned external;
       70 dcl     sys_info$audit_successful_access
       71 			 bit (1) aligned external;
       72 dcl     sys_info$successful_access_threshold
       73 			 bit (72) aligned external;
       74 dcl     sys_info$audit_unsuccessful_access
       75 			 bit (1) aligned external;
       76 dcl     sys_info$unsuccessful_access_threshold
       77 			 bit (72) aligned external;
       78 
       79 
       80 /* MISC */
       81 
       82 dcl     addr		 builtin;
       83 dcl     arg		 char (arglen) based (argptr);
       84 dcl     based_dblwd		 (2) bit (36) aligned based;	/* for octal display of access class */
       85 
       86 /* ENTRIES */
       87 
       88 dcl     hphcs_$set_sys_audit_thresholds
       89 			 entry (bit (1) aligned, bit (72) aligned,
       90 			 bit (1) aligned, bit (72) aligned,
       91 			 bit (1) aligned, bit (72) aligned,
       92 			 fixed bin (35));
       93 
       94 dcl     com_err_		 entry options (variable);
       95 dcl     convert_access_class_$to_string_short
       96 			 entry (bit (72) aligned, char (*), fixed bin (35));
       97 dcl     convert_access_class_$from_string
       98 			 entry (bit (72) aligned, char (*), fixed bin (35));
       99 dcl     cu_$arg_count	 entry (fixed bin, fixed bin (35));
      100 dcl     cu_$arg_count_rel	 entry (fixed bin, pointer, fixed bin (35));
      101 dcl     cu_$arg_list_ptr	 entry (pointer);
      102 dcl     cu_$arg_ptr_rel	 entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
      103 dcl     ioa_		 entry () options (variable);
      104 
      105 
      106 /* set_system_audit_flags: procedure (); */
      107 
      108 
      109 	ME = "set_system_audit_flags";
      110 
      111 	call copy_values;
      112 
      113 	call cu_$arg_list_ptr (arglistptr);
      114 
      115 	call process_arguments;
      116 
      117 	call hphcs_$set_sys_audit_thresholds (covert_channel_sw, covert_channel_threshold,
      118 	     successful_access_sw, successful_access_threshold,
      119 	     unsuccessful_access_sw, unsuccessful_access_threshold,
      120 	     ec);
      121 	if ec ^= 0
      122 	then call ERROR (ec, "Could not set access audit parameters.");
      123 
      124 	return;
      125 
      126 
      127 
      128 display_system_audit_flags:
      129 dsaf:
      130      entry ();
      131 
      132 	ME = "display_system_audit_flags";
      133 
      134 	call cu_$arg_count (n_args, ec);
      135 	if ec ^= 0
      136 	then call ERROR (ec, "");
      137 
      138 	if n_args ^= 0
      139 	then call ERROR (ec, "No arguments are recognized by this command.");
      140 
      141 	call copy_values;
      142 
      143 	call display_values;
      144 
      145 	return;
      146 
      147 
      148 /* COPY_VALUES - Internal procedure to copy the audit enable flags and thresholds out of sys_info */
      149 
      150 copy_values:
      151      proc ();
      152 
      153 	covert_channel_sw = sys_info$audit_covert_channel;
      154 	covert_channel_threshold = sys_info$covert_channel_threshold;
      155 	successful_access_sw = sys_info$audit_successful_access;
      156 	successful_access_threshold = sys_info$successful_access_threshold;
      157 	unsuccessful_access_sw = sys_info$audit_unsuccessful_access;
      158 	unsuccessful_access_threshold = sys_info$unsuccessful_access_threshold;
      159 
      160      end copy_values;
      161 
      162 
      163 /* DISPLAY_VALUES - Internal procedure to display the current values of the access audit enable flags and thresholds */
      164 
      165 display_values:
      166      proc ();
      167 
      168 	call ioa_ ("Covert channel auditing ^[enabled,^;disabled.^]", covert_channel_sw);
      169 	if covert_channel_sw
      170 	then do;
      171 	     call convert_access_class_$to_string_short (covert_channel_threshold, class_str, ec);
      172 	     if class_str = ""
      173 	     then class_str = "system_low";
      174 	     if ec ^= 0
      175 	     then call com_err_ (ec, ME, "Illegal covert channel threshold ^w ^w.",
      176 		     addr (covert_channel_threshold) -> based_dblwd);
      177 	     else call ioa_ ("   threshold = ^a.", class_str);
      178 	end;
      179 
      180 	call ioa_ ("Successful access auditing ^[enabled,^;disabled.^]", successful_access_sw);
      181 	if successful_access_sw
      182 	then do;
      183 	     call convert_access_class_$to_string_short (successful_access_threshold, class_str, ec);
      184 	     if class_str = ""
      185 	     then class_str = "system_low";
      186 	     if ec ^= 0
      187 	     then call com_err_ (ec, ME, "Illegal successful access threshold ^w ^w.",
      188 		     addr (successful_access_threshold) -> based_dblwd);
      189 	     else call ioa_ ("   threshold = ^a.", class_str);
      190 	end;
      191 
      192 	call ioa_ ("Unsuccessful access auditing ^[enabled,^;disabled.^]", unsuccessful_access_sw);
      193 	if unsuccessful_access_sw
      194 	then do;
      195 	     call convert_access_class_$to_string_short (unsuccessful_access_threshold, class_str, ec);
      196 	     if class_str = ""
      197 	     then class_str = "system_low";
      198 	     if ec ^= 0
      199 	     then call com_err_ (ec, ME, "Illegal unsuccessful access threshold ^w ^w.",
      200 		     addr (unsuccessful_access_threshold) -> based_dblwd);
      201 	     else call ioa_ ("   threshold = ^a.", class_str);
      202 	end;
      203 
      204 	return;
      205 
      206      end display_values;
      207 
      208 
      209 /* PROCESS_ARGUMENTS - Internal procedure to process the command line arguments */
      210 /*	(used only by SET_system_audit_flags entrypoint)	*/
      211 
      212 process_arguments:
      213      procedure ();
      214 
      215 dcl     arg_no		 fixed bin;
      216 
      217 	call cu_$arg_count_rel (n_args, arglistptr, ec);
      218 	if ec ^= 0
      219 	then call ERROR (ec, "Unable to get argument count.");
      220 
      221 	if n_args < 1
      222 	then call ERROR (error_table_$noarg, "");
      223 
      224 	arg_no = 1;
      225 	do while (arg_no <= n_args);
      226 	     call get_arg ("next control argument");
      227 	     if arg = "-covert_channel"
      228 		| arg = "-cch"
      229 	     then do;
      230 		call get_thresh ("covert channel threshold string", covert_channel_threshold);
      231 		covert_channel_sw = "1"b;
      232 	     end;
      233 
      234 	     else if arg = "-no_covert_channel"
      235 		| arg = "-ncch"
      236 	     then covert_channel_sw = "0"b;
      237 
      238 	     else if arg = "-successful_access"
      239 		| arg = "-sa"
      240 	     then do;
      241 		call get_thresh ("successful access threshold string", successful_access_threshold);
      242 		successful_access_sw = "1"b;
      243 	     end;
      244 
      245 	     else if arg = "-no_successful_access"
      246 		| arg = "-nsa"
      247 	     then successful_access_sw = "0"b;
      248 
      249 	     else if arg = "-unsuccessful_access"
      250 		| arg = "-usa"
      251 	     then do;
      252 		call get_thresh ("unsuccessful access threshold string", unsuccessful_access_threshold);
      253 		unsuccessful_access_sw = "1"b;
      254 	     end;
      255 
      256 	     else if arg = "-no_unsuccessful_access"
      257 		| arg = "-nusa"
      258 	     then unsuccessful_access_sw = "0"b;
      259 
      260 	     else call ERROR (error_table_$bad_arg, arg);
      261 
      262 	     arg_no = arg_no + 1;
      263 
      264 	end;					/* LOOP */
      265 
      266 	return;
      267 
      268 get_thresh:
      269      procedure (arg_name, thresh_var);			/* procedure internal to process_arguments to get a
      270*						   threshold command line argument */
      271 
      272 dcl     arg_name		 char (*) parameter;
      273 dcl     thresh_var		 bit (72) aligned parameter;
      274 
      275 	arg_no = arg_no + 1;
      276 	call get_arg (arg_name);
      277 
      278 	call convert_access_class_$from_string (thresh_var, arg, ec);
      279 	if ec ^= 0
      280 	then call ERROR (ec, arg);
      281 
      282 	return;
      283 
      284      end get_thresh;
      285 
      286 
      287 get_arg:
      288      procedure (arg_name);				/* procedure internal to process_arguments to get the next argument */
      289 
      290 dcl     arg_name		 char (*) parameter;
      291 
      292 	call cu_$arg_ptr_rel (arg_no, argptr, arglen, ec, arglistptr);
      293 
      294 	if ec ^= 0
      295 	then call ERROR (ec, arg_name);
      296 
      297 	return;
      298 
      299      end get_arg;
      300 
      301      end process_arguments;
      302 
      303 
      304 /* ERROR - internal procedure to report an error and exit the command */
      305 
      306 ERROR:
      307      procedure (code, msg);
      308 
      309 dcl     code		 fixed bin (35) parameter;
      310 dcl     msg		 char (*) parameter;
      311 
      312 	call com_err_ (code, ME, msg);
      313 
      314 	goto ERROR_EXIT;
      315 
      316      end ERROR;
      317 
      318 
      319 ERROR_EXIT:
      320 
      321      end set_system_audit_flags;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    01/22/85  1313.4  set_system_audit_flags.pl1        >spec>temp>41-5>set_system_audit_flags.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
ME                              000114 automatic       char(32)                 unaligned dcl 52 set ref 109* 132* 174* 186* 198*
                                                                                  312*
addr                                                   builtin function         dcl 82 ref 174 186 198
arg                                    based           char                     unaligned dcl 83 set ref 227 227 234 234 238 238 245
                                                                                  245 249 249 256 256 260* 278* 279*
arg_name                               parameter       char                     unaligned dcl 272 in procedure "get_thresh" set ref
                                                                                  268 276*
arg_name                               parameter       char                     unaligned dcl 290 in procedure "get_arg" set ref 287
                                                                                  294*
arg_no                          000232 automatic       fixed bin(17,0)          dcl 215 set ref 224* 225 262* 262 275* 275 292*
arglen                          000126 automatic       fixed bin(21,0)          dcl 54 set ref 227 227 234 234 238 238 245 245 249
                                                                                  249 256 256 260 260 278 278 279 279 292*
arglistptr                      000124 automatic       pointer                  dcl 53 set ref 113* 217* 292*
argptr                          000130 automatic       pointer                  dcl 55 set ref 227 227 234 234 238 238 245 245 249
                                                                                  249 256 256 260 278 279 292*
based_dblwd                            based           bit(36)                  array dcl 84 set ref 174* 186* 198*
class_str                       000132 automatic       char(172)                unaligned dcl 56 set ref 171* 172 172* 177* 183* 184
                                                                                  184* 189* 195* 196 196* 201*
code                                   parameter       fixed bin(35,0)          dcl 309 set ref 306 312*
com_err_                        000032 constant        entry                    external dcl 94 ref 174 186 198 312
convert_access_class_$from_string
                                000036 constant        entry                    external dcl 97 ref 278
convert_access_class_$to_string_short
                                000034 constant        entry                    external dcl 95 ref 171 183 195
covert_channel_sw               000100 automatic       bit(1)                   dcl 42 set ref 117* 153* 168* 169 231* 234*
covert_channel_threshold        000102 automatic       bit(72)                  dcl 43 set ref 117* 154* 171* 174 230*
cu_$arg_count                   000040 constant        entry                    external dcl 99 ref 134
cu_$arg_count_rel               000042 constant        entry                    external dcl 100 ref 217
cu_$arg_list_ptr                000044 constant        entry                    external dcl 101 ref 113
cu_$arg_ptr_rel                 000046 constant        entry                    external dcl 102 ref 292
ec                              000206 automatic       fixed bin(35,0)          dcl 58 set ref 117* 121 121* 134* 135 135* 138* 171*
                                                                                  174 174* 183* 186 186* 195* 198 198* 217* 218 218*
                                                                                  278* 279 279* 292* 294 294*
error_table_$bad_arg            000010 external static fixed bin(35,0)          dcl 63 set ref 260*
error_table_$noarg              000012 external static fixed bin(35,0)          dcl 64 set ref 221*
hphcs_$set_sys_audit_thresholds 000030 constant        entry                    external dcl 88 ref 117
ioa_                            000050 constant        entry                    external dcl 103 ref 168 177 180 189 192 201
msg                                    parameter       char                     unaligned dcl 310 set ref 306 312*
n_args                          000205 automatic       fixed bin(17,0)          dcl 57 set ref 134* 138 217* 221 225
successful_access_sw            000104 automatic       bit(1)                   dcl 45 set ref 117* 155* 180* 181 242* 245*
successful_access_threshold     000106 automatic       bit(72)                  dcl 46 set ref 117* 156* 183* 186 241*
sys_info$audit_covert_channel   000014 external static bit(1)                   dcl 66 ref 153
sys_info$audit_successful_access
                                000020 external static bit(1)                   dcl 70 ref 155
sys_info$audit_unsuccessful_access
                                000024 external static bit(1)                   dcl 74 ref 157
sys_info$covert_channel_threshold
                                000016 external static bit(72)                  dcl 68 ref 154
sys_info$successful_access_threshold
                                000022 external static bit(72)                  dcl 72 ref 156
sys_info$unsuccessful_access_threshold
                                000026 external static bit(72)                  dcl 76 ref 158
thresh_var                             parameter       bit(72)                  dcl 273 set ref 268 278*
unsuccessful_access_sw          000110 automatic       bit(1)                   dcl 48 set ref 117* 157* 192* 193 253* 256*
unsuccessful_access_threshold   000112 automatic       bit(72)                  dcl 49 set ref 117* 158* 195* 198 252*

NAMES DECLARED BY EXPLICIT CONTEXT.
ERROR                           001523 constant        entry                    internal dcl 306 ref 121 135 138 218 221 260 279 294
ERROR_EXIT                      000467 constant        label                    dcl 319 ref 314
copy_values                     000470 constant        entry                    internal dcl 150 ref 111 141
display_system_audit_flags      000426 constant        entry                    external dcl 128
display_values                  000515 constant        entry                    internal dcl 165 ref 143
dsaf                            000417 constant        entry                    external dcl 128
get_arg                         001452 constant        entry                    internal dcl 287 ref 226 276
get_thresh                      001357 constant        entry                    internal dcl 268 ref 230 241 252
process_arguments               001132 constant        entry                    internal dcl 212 ref 115
set_system_audit_flags          000341 constant        entry                    external dcl 9
ssaf                            000332 constant        entry                    external dcl 9

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      2170        2242    1674        2200
Length      2462    1674        52         204     274           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
ssaf                                326 external procedure  is an external procedure.  
copy_values                             internal procedure  shares stack frame of external procedure ssaf.  
display_values                          internal procedure  shares stack frame of external procedure ssaf.  
process_arguments                       internal procedure  shares stack frame of external procedure ssaf.  
get_thresh                              internal procedure  shares stack frame of external procedure ssaf.  
get_arg                                 internal procedure  shares stack frame of external procedure ssaf.  
ERROR                                   internal procedure  shares stack frame of external procedure ssaf.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
ssaf                     000100 covert_channel_sw           ssaf
                         000102 covert_channel_threshold    ssaf
                         000104 successful_access_sw        ssaf
                         000106 successful_access_threshold ssaf
                         000110 unsuccessful_access_sw      ssaf
                         000112 unsuccessful_access_threshold
                                                            ssaf
                         000114 ME                          ssaf
                         000124 arglistptr                  ssaf
                         000126 arglen                      ssaf
                         000130 argptr                      ssaf
                         000132 class_str                   ssaf
                         000205 n_args                      ssaf
                         000206 ec                          ssaf
                         000232 arg_no                      process_arguments

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return              ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      convert_access_class_$from_string
convert_access_class_$to_string_short                       cu_$arg_count                 cu_$arg_count_rel
cu_$arg_list_ptr              cu_$arg_ptr_rel               hphcs_$set_sys_audit_thresholds
ioa_

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$bad_arg          error_table_$noarg            sys_info$audit_covert_channel
sys_info$audit_successful_access                            sys_info$audit_unsuccessful_access
sys_info$covert_channel_threshold                           sys_info$successful_access_threshold
sys_info$unsuccessful_access_threshold


CONSTANTS
001560  aa     000004000000
001561  aa     000004000000
001562  aa     600000000041
001563  aa     000404000000
001564  aa     600000000041
001565  aa     000112000000
001566  ta     000002000000
001567  aa     000000000000
001570  ta     000022000000
001571  aa     000000000000

001572  aa     000004000000
001573  aa     000004000000
001574  aa     600000000041
001575  aa     000404000000
001576  aa     600000000041
001577  aa     000106000000
001600  ta     000005000000
001601  aa     000000000000
001602  ta     000022000000
001603  aa     000000000000

001604  aa     000004000000
001605  aa     000004000000
001606  aa     600000000041
001607  aa     000372000000
001610  aa     600000000041
001611  aa     000102000000
001612  ta     000007000000
001613  aa     000000000000
001614  ta     000022000000
001615  aa     000000000000

001616  aa     000002000000
001617  aa     000002000000
001620  aa     600000000041
001621  aa     000372000000
001622  ta     000011000000
001623  aa     000000000000

001624  aa     000004000000
001625  aa     000004000000
001626  aa     600000000041
001627  aa     000206000000
001630  aa     600000000041
001631  aa     000372000000
001632  ta     000030000000
001633  aa     000000000000
001634  ta     000012000000
001635  aa     000000000000

001636  aa     000004000000
001637  aa     000004000000
001640  aa     600000000041
001641  aa     000206000000
001642  aa     600000000041
001643  aa     000262000000
001644  ta     000030000000
001645  aa     000000000000
001646  ta     000025000000
001647  aa     000000000000

001650  aa     000004000000
001651  aa     000004000000
001652  aa     600000000041
001653  aa     000206000000
001654  aa     600000000041
001655  aa     000302000000
001656  ta     000030000000
001657  aa     000000000000
001660  ta     000026000000
001661  aa     000000000000

001662  aa     000004000000
001663  aa     000004000000
001664  aa     600000000041
001665  aa     000206000000
001666  aa     600000000041
001667  aa     000262000000
001670  ta     000030000000
001671  aa     000000000000
001672  ta     000027000000
001673  aa     000000000000


000000  aa     526077777777

000001  aa     526000000000

000002  aa     524000000044

000003  aa  055 165 163 141	-usa

000004  aa  055 156 163 141	-nsa

000005  aa     524000000042

000006  aa  055 163 141 000	-sa

000007  aa     524000000037

000010  aa  055 143 143 150	-cch

000011  aa     524000000025

000012  aa     524000000035

000013  aa     524000000064

000014  aa     524000000052

000015  aa     524000000062

000016  aa     524000000022

000017  aa     524000000047

000020  aa     526000000040

000021  aa     526000000254

000022  aa     514000000110

000023  aa     514000000001

000024  aa     524000000057

000025  aa     524000000054

000026  aa     524000000000

000027  aa     524000000046

000030  aa     404000000043

000032  aa  055 156 165 163	-nus
000033  aa  141 000 000 000	a

000034  aa  055 156 143 143	-ncc
000035  aa  150 000 000 000	h

000036  aa  163 171 163 164	syst
000037  aa  145 155 137 154	em_l
000040  aa  157 167 000 000	ow

000041  aa  055 143 157 166	-cov
000042  aa  145 162 164 137	ert_
000043  aa  143 150 141 156	chan
000044  aa  156 145 154 000	nel

000045  aa     514100000044
000046  aa     000000000001
000047  aa     000000000002
000050  aa     000000000001

000051  aa  055 165 156 163	-uns
000052  aa  165 143 143 145	ucce
000053  aa  163 163 146 165	ssfu
000054  aa  154 137 141 143	l_ac
000055  aa  143 145 163 163	cess

000056  aa  055 163 165 143	-suc
000057  aa  143 145 163 163	cess
000060  aa  146 165 154 137	ful_
000061  aa  141 143 143 145	acce
000062  aa  163 163 000 000	ss

000063  aa  055 156 157 137	-no_
000064  aa  143 157 166 145	cove
000065  aa  162 164 137 143	rt_c
000066  aa  150 141 156 156	hann
000067  aa  145 154 000 000	el

000070  aa  040 040 040 164	   t
000071  aa  150 162 145 163	hres
000072  aa  150 157 154 144	hold
000073  aa  040 075 040 136	 = ^
000074  aa  141 056 000 000	a.

000075  aa  055 156 157 137	-no_
000076  aa  165 156 163 165	unsu
000077  aa  143 143 145 163	cces
000100  aa  163 146 165 154	sful
000101  aa  137 141 143 143	_acc
000102  aa  145 163 163 000	ess

000103  aa  055 156 157 137	-no_
000104  aa  163 165 143 143	succ
000105  aa  145 163 163 146	essf
000106  aa  165 154 137 141	ul_a
000107  aa  143 143 145 163	cces
000110  aa  163 000 000 000	s

000111  aa  156 145 170 164	next
000112  aa  040 143 157 156	 con
000113  aa  164 162 157 154	trol
000114  aa  040 141 162 147	 arg
000115  aa  165 155 145 156	umen
000116  aa  164 000 000 000	t

000117  aa  163 145 164 137	set_
000120  aa  163 171 163 164	syst
000121  aa  145 155 137 141	em_a
000122  aa  165 144 151 164	udit
000123  aa  137 146 154 141	_fla
000124  aa  147 163 000 000	gs

000125  aa  144 151 163 160	disp
000126  aa  154 141 171 137	lay_
000127  aa  163 171 163 164	syst
000130  aa  145 155 137 141	em_a
000131  aa  165 144 151 164	udit
000132  aa  137 146 154 141	_fla
000133  aa  147 163 000 000	gs

000134  aa  143 157 166 145	cove
000135  aa  162 164 040 143	rt c
000136  aa  150 141 156 156	hann
000137  aa  145 154 040 164	el t
000140  aa  150 162 145 163	hres
000141  aa  150 157 154 144	hold
000142  aa  040 163 164 162	 str
000143  aa  151 156 147 000	ing

000144  aa  125 156 141 142	Unab
000145  aa  154 145 040 164	le t
000146  aa  157 040 147 145	o ge
000147  aa  164 040 141 162	t ar
000150  aa  147 165 155 145	gume
000151  aa  156 164 040 143	nt c
000152  aa  157 165 156 164	ount
000153  aa  056 000 000 000	.

000154  aa  165 156 163 165	unsu
000155  aa  143 143 145 163	cces
000156  aa  163 146 165 154	sful
000157  aa  040 141 143 143	 acc
000160  aa  145 163 163 040	ess 
000161  aa  164 150 162 145	thre
000162  aa  163 150 157 154	shol
000163  aa  144 040 163 164	d st
000164  aa  162 151 156 147	ring

000165  aa  163 165 143 143	succ
000166  aa  145 163 163 146	essf
000167  aa  165 154 040 141	ul a
000170  aa  143 143 145 163	cces
000171  aa  163 040 164 150	s th
000172  aa  162 145 163 150	resh
000173  aa  157 154 144 040	old 
000174  aa  163 164 162 151	stri
000175  aa  156 147 000 000	ng

000176  aa  111 154 154 145	Ille
000177  aa  147 141 154 040	gal 
000200  aa  143 157 166 145	cove
000201  aa  162 164 040 143	rt c
000202  aa  150 141 156 156	hann
000203  aa  145 154 040 164	el t
000204  aa  150 162 145 163	hres
000205  aa  150 157 154 144	hold
000206  aa  040 136 167 040	 ^w 
000207  aa  136 167 056 000	^w.

000210  aa  103 157 165 154	Coul
000211  aa  144 040 156 157	d no
000212  aa  164 040 163 145	t se
000213  aa  164 040 141 143	t ac
000214  aa  143 145 163 163	cess
000215  aa  040 141 165 144	 aud
000216  aa  151 164 040 160	it p
000217  aa  141 162 141 155	aram
000220  aa  145 164 145 162	eter
000221  aa  163 056 000 000	s.

000222  aa  111 154 154 145	Ille
000223  aa  147 141 154 040	gal 
000224  aa  165 156 163 165	unsu
000225  aa  143 143 145 163	cces
000226  aa  163 146 165 154	sful
000227  aa  040 141 143 143	 acc
000230  aa  145 163 163 040	ess 
000231  aa  164 150 162 145	thre
000232  aa  163 150 157 154	shol
000233  aa  144 040 136 167	d ^w
000234  aa  040 136 167 056	 ^w.

000235  aa  111 154 154 145	Ille
000236  aa  147 141 154 040	gal 
000237  aa  163 165 143 143	succ
000240  aa  145 163 163 146	essf
000241  aa  165 154 040 141	ul a
000242  aa  143 143 145 163	cces
000243  aa  163 040 164 150	s th
000244  aa  162 145 163 150	resh
000245  aa  157 154 144 040	old 
000246  aa  136 167 040 136	^w ^
000247  aa  167 056 000 000	w.

000250  aa  116 157 040 141	No a
000251  aa  162 147 165 155	rgum
000252  aa  145 156 164 163	ents
000253  aa  040 141 162 145	 are
000254  aa  040 162 145 143	 rec
000255  aa  157 147 156 151	ogni
000256  aa  172 145 144 040	zed 
000257  aa  142 171 040 164	by t
000260  aa  150 151 163 040	his 
000261  aa  143 157 155 155	comm
000262  aa  141 156 144 056	and.

000263  aa  103 157 166 145	Cove
000264  aa  162 164 040 143	rt c
000265  aa  150 141 156 156	hann
000266  aa  145 154 040 141	el a
000267  aa  165 144 151 164	udit
000270  aa  151 156 147 040	ing 
000271  aa  136 133 145 156	^[en
000272  aa  141 142 154 145	able
000273  aa  144 054 136 073	d,^;
000274  aa  144 151 163 141	disa
000275  aa  142 154 145 144	bled
000276  aa  056 136 135 000	.^]

000277  aa  125 156 163 165	Unsu
000300  aa  143 143 145 163	cces
000301  aa  163 146 165 154	sful
000302  aa  040 141 143 143	 acc
000303  aa  145 163 163 040	ess 
000304  aa  141 165 144 151	audi
000305  aa  164 151 156 147	ting
000306  aa  040 136 133 145	 ^[e
000307  aa  156 141 142 154	nabl
000310  aa  145 144 054 136	ed,^
000311  aa  073 144 151 163	;dis
000312  aa  141 142 154 145	able
000313  aa  144 056 136 135	d.^]

000314  aa  123 165 143 143	Succ
000315  aa  145 163 163 146	essf
000316  aa  165 154 040 141	ul a
000317  aa  143 143 145 163	cces
000320  aa  163 040 141 165	s au
000321  aa  144 151 164 151	diti
000322  aa  156 147 040 136	ng ^
000323  aa  133 145 156 141	[ena
000324  aa  142 154 145 144	bled
000325  aa  054 136 073 144	,^;d
000326  aa  151 163 141 142	isab
000327  aa  154 145 144 056	led.
000330  aa  136 135 000 000	^]

BEGIN PROCEDURE ssaf
ENTRY TO ssaf                                               STATEMENT 1 ON LINE 9
set_system_audit_flags:
ssaf:
     procedure;

000331  da     000246200000
000332  aa   000520 6270 00	eax7 	336
000333  aa  7 00034 3521 20	epp2 	pr7|28,*
000334  aa  2 01045 2721 00	tsp2 	pr2|549		ext_entry
000335  aa     000000000000
000336  aa     000000000000
000337  aa   000007 7100 04	tra  	7,ic		000346
ENTRY TO set_system_audit_flags                             STATEMENT 1 ON LINE 9
set_system_audit_flags:
ssaf:
     procedure;

000340  da     000251200000
000341  aa   000520 6270 00	eax7 	336
000342  aa  7 00034 3521 20	epp2 	pr7|28,*
000343  aa  2 01045 2721 00	tsp2 	pr2|549		ext_entry
000344  aa     000000000000
000345  aa     000000000000
						STATEMENT 1 ON LINE 109
	ME = "set_system_audit_flags";

000346  aa  040 100 100 404	mlr  	(ic),(pr),fill(040)
000347  aa   777551 00 0026	desc9a	-151,22		000117 = 163145164137
000350  aa  6 00114 00 0040	desc9a	pr6|76,32		ME
						STATEMENT 1 ON LINE 111
	call copy_values;

000351  aa   000117 6700 04	tsp4 	79,ic		000470
						STATEMENT 1 ON LINE 113
	call cu_$arg_list_ptr (arglistptr);

000352  aa  6 00124 3521 00	epp2 	pr6|84		arglistptr
000353  aa  6 00260 2521 00	spri2	pr6|176
000354  aa  6 00256 6211 00	eax1 	pr6|174
000355  aa   004000 4310 07	fld  	2048,dl
000356  aa  6 00044 3701 20	epp4 	pr6|36,*
000357  la  4 00044 3521 20	epp2 	pr4|36,*		cu_$arg_list_ptr
000360  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 115
	call process_arguments;

000361  aa   000551 6700 04	tsp4 	361,ic		001132
						STATEMENT 1 ON LINE 117
	call hphcs_$set_sys_audit_thresholds (covert_channel_sw, covert_channel_threshold,
	     successful_access_sw, successful_access_threshold,
	     unsuccessful_access_sw, unsuccessful_access_threshold,
	     ec);

000362  aa  6 00100 3521 00	epp2 	pr6|64		covert_channel_sw
000363  aa  6 00264 2521 00	spri2	pr6|180
000364  aa  6 00102 3521 00	epp2 	pr6|66		covert_channel_threshold
000365  aa  6 00266 2521 00	spri2	pr6|182
000366  aa  6 00104 3521 00	epp2 	pr6|68		successful_access_sw
000367  aa  6 00270 2521 00	spri2	pr6|184
000370  aa  6 00106 3521 00	epp2 	pr6|70		successful_access_threshold
000371  aa  6 00272 2521 00	spri2	pr6|186
000372  aa  6 00110 3521 00	epp2 	pr6|72		unsuccessful_access_sw
000373  aa  6 00274 2521 00	spri2	pr6|188
000374  aa  6 00112 3521 00	epp2 	pr6|74		unsuccessful_access_threshold
000375  aa  6 00276 2521 00	spri2	pr6|190
000376  aa  6 00206 3521 00	epp2 	pr6|134		ec
000377  aa  6 00300 2521 00	spri2	pr6|192
000400  aa  6 00262 6211 00	eax1 	pr6|178
000401  aa   034000 4310 07	fld  	14336,dl
000402  aa  6 00044 3701 20	epp4 	pr6|36,*
000403  la  4 00030 3521 20	epp2 	pr4|24,*		hphcs_$set_sys_audit_thresholds
000404  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 121
	if ec ^= 0
	then call ERROR (ec, "Could not set access audit parameters.");

000405  aa  6 00206 2361 00	ldq  	pr6|134		ec
000406  aa   000007 6000 04	tze  	7,ic		000415
000407  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
000410  aa   777601 00 0050	desc9a	-127,40		000210 = 103157165154
000411  aa  6 00262 00 0050	desc9a	pr6|178,40
000412  aa   001250 3520 04	epp2 	680,ic		001662 = 000004000000
000413  aa  2 00000 2351 00	lda  	pr2|0
000414  aa   001107 6700 04	tsp4 	583,ic		001523
						STATEMENT 1 ON LINE 124
	return;

000415  aa  0 00631 7101 00	tra  	pr0|409		return
ENTRY TO dsaf                                               STATEMENT 1 ON LINE 128
display_system_audit_flags:
dsaf:
     entry ();

000416  da     000256200000
000417  aa   000520 6270 00	eax7 	336
000420  aa  7 00034 3521 20	epp2 	pr7|28,*
000421  aa  2 01045 2721 00	tsp2 	pr2|549		ext_entry
000422  aa     000000000000
000423  aa     000000000000
000424  aa   000007 7100 04	tra  	7,ic		000433
ENTRY TO display_system_audit_flags                         STATEMENT 1 ON LINE 128
display_system_audit_flags:
dsaf:
     entry ();

000425  da     000270200000
000426  aa   000520 6270 00	eax7 	336
000427  aa  7 00034 3521 20	epp2 	pr7|28,*
000430  aa  2 01045 2721 00	tsp2 	pr2|549		ext_entry
000431  aa     000000000000
000432  aa     000000000000
						STATEMENT 1 ON LINE 132
	ME = "display_system_audit_flags";

000433  aa  040 100 100 404	mlr  	(ic),(pr),fill(040)
000434  aa   777472 00 0032	desc9a	-198,26		000125 = 144151163160
000435  aa  6 00114 00 0040	desc9a	pr6|76,32		ME
						STATEMENT 1 ON LINE 134
	call cu_$arg_count (n_args, ec);

000436  aa  6 00205 3521 00	epp2 	pr6|133		n_args
000437  aa  6 00264 2521 00	spri2	pr6|180
000440  aa  6 00206 3521 00	epp2 	pr6|134		ec
000441  aa  6 00266 2521 00	spri2	pr6|182
000442  aa  6 00262 6211 00	eax1 	pr6|178
000443  aa   010000 4310 07	fld  	4096,dl
000444  aa  6 00044 3701 20	epp4 	pr6|36,*
000445  la  4 00040 3521 20	epp2 	pr4|32,*		cu_$arg_count
000446  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 135
	if ec ^= 0
	then call ERROR (ec, "");

000447  aa  6 00206 2361 00	ldq  	pr6|134		ec
000450  aa   000004 6000 04	tze  	4,ic		000454
000451  aa   001177 3520 04	epp2 	639,ic		001650 = 000004000000
000452  aa  2 00000 2351 00	lda  	pr2|0
000453  aa   001050 6700 04	tsp4 	552,ic		001523
						STATEMENT 1 ON LINE 138
	if n_args ^= 0
	then call ERROR (ec, "No arguments are recognized by this command.");

000454  aa  6 00205 2361 00	ldq  	pr6|133		n_args
000455  aa   000007 6000 04	tze  	7,ic		000464
000456  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
000457  aa   777572 00 0054	desc9a	-134,44		000250 = 116157040141
000460  aa  6 00262 00 0054	desc9a	pr6|178,44
000461  aa   001155 3520 04	epp2 	621,ic		001636 = 000004000000
000462  aa  2 00000 2351 00	lda  	pr2|0
000463  aa   001040 6700 04	tsp4 	544,ic		001523
						STATEMENT 1 ON LINE 141
	call copy_values;

000464  aa   000004 6700 04	tsp4 	4,ic		000470
						STATEMENT 1 ON LINE 143
	call display_values;

000465  aa   000030 6700 04	tsp4 	24,ic		000515
						STATEMENT 1 ON LINE 145
	return;

000466  aa  0 00631 7101 00	tra  	pr0|409		return
						STATEMENT 1 ON LINE 319
ERROR_EXIT:

     end set_system_audit_flags;

000467  aa  0 00631 7101 00	tra  	pr0|409		return
BEGIN PROCEDURE copy_values
ENTRY TO copy_values                                        STATEMENT 1 ON LINE 150
copy_values:
     proc ();

000470  aa  6 00210 6501 00	spri4	pr6|136
						STATEMENT 1 ON LINE 153
	covert_channel_sw = sys_info$audit_covert_channel;

000471  aa  6 00044 3701 20	epp4 	pr6|36,*
000472  la  4 00014 2351 20	lda  	pr4|12,*		sys_info$audit_covert_channel
000473  aa  6 00100 7551 00	sta  	pr6|64		covert_channel_sw
						STATEMENT 1 ON LINE 154
	covert_channel_threshold = sys_info$covert_channel_threshold;

000474  la  4 00016 3735 20	epp7 	pr4|14,*		sys_info$covert_channel_threshold
000475  aa  7 00000 2351 00	lda  	pr7|0		sys_info$covert_channel_threshold
000476  aa  7 00001 2361 00	ldq  	pr7|1		sys_info$covert_channel_threshold
000477  aa  6 00102 7571 00	staq 	pr6|66		covert_channel_threshold
						STATEMENT 1 ON LINE 155
	successful_access_sw = sys_info$audit_successful_access;

000500  la  4 00020 2351 20	lda  	pr4|16,*		sys_info$audit_successful_access
000501  aa  6 00104 7551 00	sta  	pr6|68		successful_access_sw
						STATEMENT 1 ON LINE 156
	successful_access_threshold = sys_info$successful_access_threshold;

000502  la  4 00022 3715 20	epp5 	pr4|18,*		sys_info$successful_access_threshold
000503  aa  5 00000 2351 00	lda  	pr5|0		sys_info$successful_access_threshold
000504  aa  5 00001 2361 00	ldq  	pr5|1		sys_info$successful_access_threshold
000505  aa  6 00106 7571 00	staq 	pr6|70		successful_access_threshold
						STATEMENT 1 ON LINE 157
	unsuccessful_access_sw = sys_info$audit_unsuccessful_access;

000506  la  4 00024 2351 20	lda  	pr4|20,*		sys_info$audit_unsuccessful_access
000507  aa  6 00110 7551 00	sta  	pr6|72		unsuccessful_access_sw
						STATEMENT 1 ON LINE 158
	unsuccessful_access_threshold = sys_info$unsuccessful_access_threshold;

000510  la  4 00026 3535 20	epp3 	pr4|22,*		sys_info$unsuccessful_access_threshold
000511  aa  3 00000 2351 00	lda  	pr3|0		sys_info$unsuccessful_access_threshold
000512  aa  3 00001 2361 00	ldq  	pr3|1		sys_info$unsuccessful_access_threshold
000513  aa  6 00112 7571 00	staq 	pr6|74		unsuccessful_access_threshold
						STATEMENT 1 ON LINE 160
     end copy_values;

000514  aa  6 00210 6101 00	rtcd 	pr6|136
  END PROCEDURE copy_values
BEGIN PROCEDURE display_values
ENTRY TO display_values                                     STATEMENT 1 ON LINE 165
display_values:
     proc ();

000515  aa  6 00216 6501 00	spri4	pr6|142
						STATEMENT 1 ON LINE 168
	call ioa_ ("Covert channel auditing ^[enabled,^;disabled.^]", covert_channel_sw);

000516  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
000517  aa   777545 00 0060	desc9a	-155,48		000263 = 103157166145
000520  aa  6 00304 00 0060	desc9a	pr6|196,48
000521  aa  6 00304 3521 00	epp2 	pr6|196
000522  aa  6 00322 2521 00	spri2	pr6|210
000523  aa  6 00100 3521 00	epp2 	pr6|64		covert_channel_sw
000524  aa  6 00324 2521 00	spri2	pr6|212
000525  aa   777277 3520 04	epp2 	-321,ic		000024 = 524000000057
000526  aa  6 00326 2521 00	spri2	pr6|214
000527  aa   777274 3520 04	epp2 	-324,ic		000023 = 514000000001
000530  aa  6 00330 2521 00	spri2	pr6|216
000531  aa  6 00320 6211 00	eax1 	pr6|208
000532  aa   010000 4310 07	fld  	4096,dl
000533  aa  6 00044 3701 20	epp4 	pr6|36,*
000534  la  4 00050 3521 20	epp2 	pr4|40,*		ioa_
000535  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 169
	if covert_channel_sw
	then do;

000536  aa  6 00100 2351 00	lda  	pr6|64		covert_channel_sw
000537  aa   400000 3150 03	cana 	131072,du
000540  aa   000107 6000 04	tze  	71,ic		000647
						STATEMENT 1 ON LINE 171
	     call convert_access_class_$to_string_short (covert_channel_threshold, class_str, ec);

000541  aa  6 00102 3521 00	epp2 	pr6|66		covert_channel_threshold
000542  aa  6 00334 2521 00	spri2	pr6|220
000543  aa  6 00132 3521 00	epp2 	pr6|90		class_str
000544  aa  6 00336 2521 00	spri2	pr6|222
000545  aa  6 00206 3521 00	epp2 	pr6|134		ec
000546  aa  6 00340 2521 00	spri2	pr6|224
000547  aa   777253 3520 04	epp2 	-341,ic		000022 = 514000000110
000550  aa  6 00342 2521 00	spri2	pr6|226
000551  aa   777250 3520 04	epp2 	-344,ic		000021 = 526000000254
000552  aa  6 00344 2521 00	spri2	pr6|228
000553  aa   777255 3520 04	epp2 	-339,ic		000030 = 404000000043
000554  aa  6 00346 2521 00	spri2	pr6|230
000555  aa  6 00332 6211 00	eax1 	pr6|218
000556  aa   014000 4310 07	fld  	6144,dl
000557  aa  6 00044 3701 20	epp4 	pr6|36,*
000560  la  4 00034 3521 20	epp2 	pr4|28,*		convert_access_class_$to_string_short
000561  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 172
	     if class_str = ""
	     then class_str = "system_low";

000562  aa  040 004 106 500	cmpc 	(pr),(ic),fill(040)
000563  aa  6 00132 00 0254	desc9a	pr6|90,172	class_str
000564  aa   001112 00 0000	desc9a	586,0		001674 = 000011000000
000565  aa   000004 6010 04	tnz  	4,ic		000571
000566  aa  040 100 100 404	mlr  	(ic),(pr),fill(040)
000567  aa   777250 00 0012	desc9a	-344,10		000036 = 163171163164
000570  aa  6 00132 00 0254	desc9a	pr6|90,172	class_str
						STATEMENT 1 ON LINE 174
	     if ec ^= 0
	     then call com_err_ (ec, ME, "Illegal covert channel threshold ^w ^w.",
		     addr (covert_channel_threshold) -> based_dblwd);

000571  aa  6 00206 2361 00	ldq  	pr6|134		ec
000572  aa   000032 6000 04	tze  	26,ic		000624
000573  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
000574  aa   777403 00 0050	desc9a	-253,40		000176 = 111154154145
000575  aa  6 00320 00 0050	desc9a	pr6|208,40
000576  aa  6 00206 3521 00	epp2 	pr6|134		ec
000577  aa  6 00352 2521 00	spri2	pr6|234
000600  aa  6 00114 3521 00	epp2 	pr6|76		ME
000601  aa  6 00354 2521 00	spri2	pr6|236
000602  aa  6 00320 3521 00	epp2 	pr6|208
000603  aa  6 00356 2521 00	spri2	pr6|238
000604  aa  6 00102 3521 00	epp2 	pr6|66		based_dblwd
000605  aa  6 00360 2521 00	spri2	pr6|240
000606  aa   777222 3520 04	epp2 	-366,ic		000030 = 404000000043
000607  aa  6 00362 2521 00	spri2	pr6|242
000610  aa   777210 3520 04	epp2 	-376,ic		000020 = 526000000040
000611  aa  6 00364 2521 00	spri2	pr6|244
000612  aa   777205 3520 04	epp2 	-379,ic		000017 = 524000000047
000613  aa  6 00366 2521 00	spri2	pr6|246
000614  aa   777231 3520 04	epp2 	-359,ic		000045 = 514100000044
000615  aa  6 00370 2521 00	spri2	pr6|248
000616  aa  6 00350 6211 00	eax1 	pr6|232
000617  aa   020000 4310 07	fld  	8192,dl
000620  aa  6 00044 3701 20	epp4 	pr6|36,*
000621  la  4 00032 3521 20	epp2 	pr4|26,*		com_err_
000622  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
000623  aa   000024 7100 04	tra  	20,ic		000647
						STATEMENT 1 ON LINE 177
	     else call ioa_ ("   threshold = ^a.", class_str);

000624  aa   777244 2370 04	ldaq 	-348,ic		000070 = 040040040164 150162145163
000625  aa  6 00320 7571 00	staq 	pr6|208
000626  aa   777244 2370 04	ldaq 	-348,ic		000072 = 150157154144 040075040136
000627  aa  6 00322 7571 00	staq 	pr6|210
000630  aa   141056 2350 03	lda  	49710,du
000631  aa  6 00324 7551 00	sta  	pr6|212
000632  aa  6 00320 3521 00	epp2 	pr6|208
000633  aa  6 00306 2521 00	spri2	pr6|198
000634  aa  6 00132 3521 00	epp2 	pr6|90		class_str
000635  aa  6 00310 2521 00	spri2	pr6|200
000636  aa   777160 3520 04	epp2 	-400,ic		000016 = 524000000022
000637  aa  6 00312 2521 00	spri2	pr6|202
000640  aa   777161 3520 04	epp2 	-399,ic		000021 = 526000000254
000641  aa  6 00314 2521 00	spri2	pr6|204
000642  aa  6 00304 6211 00	eax1 	pr6|196
000643  aa   010000 4310 07	fld  	4096,dl
000644  aa  6 00044 3701 20	epp4 	pr6|36,*
000645  la  4 00050 3521 20	epp2 	pr4|40,*		ioa_
000646  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 178
	end;

						STATEMENT 1 ON LINE 180
	call ioa_ ("Successful access auditing ^[enabled,^;disabled.^]", successful_access_sw);

000647  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
000650  aa   777445 00 0064	desc9a	-219,52		000314 = 123165143143
000651  aa  6 00332 00 0064	desc9a	pr6|218,52
000652  aa  6 00332 3521 00	epp2 	pr6|218
000653  aa  6 00322 2521 00	spri2	pr6|210
000654  aa  6 00104 3521 00	epp2 	pr6|68		successful_access_sw
000655  aa  6 00324 2521 00	spri2	pr6|212
000656  aa   777137 3520 04	epp2 	-417,ic		000015 = 524000000062
000657  aa  6 00326 2521 00	spri2	pr6|214
000660  aa   777143 3520 04	epp2 	-413,ic		000023 = 514000000001
000661  aa  6 00330 2521 00	spri2	pr6|216
000662  aa  6 00320 6211 00	eax1 	pr6|208
000663  aa   010000 4310 07	fld  	4096,dl
000664  aa  6 00044 3701 20	epp4 	pr6|36,*
000665  la  4 00050 3521 20	epp2 	pr4|40,*		ioa_
000666  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 181
	if successful_access_sw
	then do;

000667  aa  6 00104 2351 00	lda  	pr6|68		successful_access_sw
000670  aa   400000 3150 03	cana 	131072,du
000671  aa   000107 6000 04	tze  	71,ic		001000
						STATEMENT 1 ON LINE 183
	     call convert_access_class_$to_string_short (successful_access_threshold, class_str, ec);

000672  aa  6 00106 3521 00	epp2 	pr6|70		successful_access_threshold
000673  aa  6 00334 2521 00	spri2	pr6|220
000674  aa  6 00132 3521 00	epp2 	pr6|90		class_str
000675  aa  6 00336 2521 00	spri2	pr6|222
000676  aa  6 00206 3521 00	epp2 	pr6|134		ec
000677  aa  6 00340 2521 00	spri2	pr6|224
000700  aa   777122 3520 04	epp2 	-430,ic		000022 = 514000000110
000701  aa  6 00342 2521 00	spri2	pr6|226
000702  aa   777117 3520 04	epp2 	-433,ic		000021 = 526000000254
000703  aa  6 00344 2521 00	spri2	pr6|228
000704  aa   777124 3520 04	epp2 	-428,ic		000030 = 404000000043
000705  aa  6 00346 2521 00	spri2	pr6|230
000706  aa  6 00332 6211 00	eax1 	pr6|218
000707  aa   014000 4310 07	fld  	6144,dl
000710  aa  6 00044 3701 20	epp4 	pr6|36,*
000711  la  4 00034 3521 20	epp2 	pr4|28,*		convert_access_class_$to_string_short
000712  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 184
	     if class_str = ""
	     then class_str = "system_low";

000713  aa  040 004 106 500	cmpc 	(pr),(ic),fill(040)
000714  aa  6 00132 00 0254	desc9a	pr6|90,172	class_str
000715  aa   000761 00 0000	desc9a	497,0		001674 = 000011000000
000716  aa   000004 6010 04	tnz  	4,ic		000722
000717  aa  040 100 100 404	mlr  	(ic),(pr),fill(040)
000720  aa   777117 00 0012	desc9a	-433,10		000036 = 163171163164
000721  aa  6 00132 00 0254	desc9a	pr6|90,172	class_str
						STATEMENT 1 ON LINE 186
	     if ec ^= 0
	     then call com_err_ (ec, ME, "Illegal successful access threshold ^w ^w.",
		     addr (successful_access_threshold) -> based_dblwd);

000722  aa  6 00206 2361 00	ldq  	pr6|134		ec
000723  aa   000032 6000 04	tze  	26,ic		000755
000724  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
000725  aa   777311 00 0054	desc9a	-311,44		000235 = 111154154145
000726  aa  6 00304 00 0054	desc9a	pr6|196,44
000727  aa  6 00206 3521 00	epp2 	pr6|134		ec
000730  aa  6 00352 2521 00	spri2	pr6|234
000731  aa  6 00114 3521 00	epp2 	pr6|76		ME
000732  aa  6 00354 2521 00	spri2	pr6|236
000733  aa  6 00304 3521 00	epp2 	pr6|196
000734  aa  6 00356 2521 00	spri2	pr6|238
000735  aa  6 00106 3521 00	epp2 	pr6|70		based_dblwd
000736  aa  6 00360 2521 00	spri2	pr6|240
000737  aa   777071 3520 04	epp2 	-455,ic		000030 = 404000000043
000740  aa  6 00362 2521 00	spri2	pr6|242
000741  aa   777057 3520 04	epp2 	-465,ic		000020 = 526000000040
000742  aa  6 00364 2521 00	spri2	pr6|244
000743  aa   777051 3520 04	epp2 	-471,ic		000014 = 524000000052
000744  aa  6 00366 2521 00	spri2	pr6|246
000745  aa   777100 3520 04	epp2 	-448,ic		000045 = 514100000044
000746  aa  6 00370 2521 00	spri2	pr6|248
000747  aa  6 00350 6211 00	eax1 	pr6|232
000750  aa   020000 4310 07	fld  	8192,dl
000751  aa  6 00044 3701 20	epp4 	pr6|36,*
000752  la  4 00032 3521 20	epp2 	pr4|26,*		com_err_
000753  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
000754  aa   000024 7100 04	tra  	20,ic		001000
						STATEMENT 1 ON LINE 189
	     else call ioa_ ("   threshold = ^a.", class_str);

000755  aa   777113 2370 04	ldaq 	-437,ic		000070 = 040040040164 150162145163
000756  aa  6 00320 7571 00	staq 	pr6|208
000757  aa   777113 2370 04	ldaq 	-437,ic		000072 = 150157154144 040075040136
000760  aa  6 00322 7571 00	staq 	pr6|210
000761  aa   141056 2350 03	lda  	49710,du
000762  aa  6 00324 7551 00	sta  	pr6|212
000763  aa  6 00320 3521 00	epp2 	pr6|208
000764  aa  6 00306 2521 00	spri2	pr6|198
000765  aa  6 00132 3521 00	epp2 	pr6|90		class_str
000766  aa  6 00310 2521 00	spri2	pr6|200
000767  aa   777027 3520 04	epp2 	-489,ic		000016 = 524000000022
000770  aa  6 00312 2521 00	spri2	pr6|202
000771  aa   777030 3520 04	epp2 	-488,ic		000021 = 526000000254
000772  aa  6 00314 2521 00	spri2	pr6|204
000773  aa  6 00304 6211 00	eax1 	pr6|196
000774  aa   010000 4310 07	fld  	4096,dl
000775  aa  6 00044 3701 20	epp4 	pr6|36,*
000776  la  4 00050 3521 20	epp2 	pr4|40,*		ioa_
000777  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 190
	end;

						STATEMENT 1 ON LINE 192
	call ioa_ ("Unsuccessful access auditing ^[enabled,^;disabled.^]", unsuccessful_access_sw);

001000  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
001001  aa   777277 00 0064	desc9a	-321,52		000277 = 125156163165
001002  aa  6 00332 00 0064	desc9a	pr6|218,52
001003  aa  6 00332 3521 00	epp2 	pr6|218
001004  aa  6 00322 2521 00	spri2	pr6|210
001005  aa  6 00110 3521 00	epp2 	pr6|72		unsuccessful_access_sw
001006  aa  6 00324 2521 00	spri2	pr6|212
001007  aa   777004 3520 04	epp2 	-508,ic		000013 = 524000000064
001010  aa  6 00326 2521 00	spri2	pr6|214
001011  aa   777012 3520 04	epp2 	-502,ic		000023 = 514000000001
001012  aa  6 00330 2521 00	spri2	pr6|216
001013  aa  6 00320 6211 00	eax1 	pr6|208
001014  aa   010000 4310 07	fld  	4096,dl
001015  aa  6 00044 3701 20	epp4 	pr6|36,*
001016  la  4 00050 3521 20	epp2 	pr4|40,*		ioa_
001017  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 193
	if unsuccessful_access_sw
	then do;

001020  aa  6 00110 2351 00	lda  	pr6|72		unsuccessful_access_sw
001021  aa   400000 3150 03	cana 	131072,du
001022  aa   000107 6000 04	tze  	71,ic		001131
						STATEMENT 1 ON LINE 195
	     call convert_access_class_$to_string_short (unsuccessful_access_threshold, class_str, ec);

001023  aa  6 00112 3521 00	epp2 	pr6|74		unsuccessful_access_threshold
001024  aa  6 00334 2521 00	spri2	pr6|220
001025  aa  6 00132 3521 00	epp2 	pr6|90		class_str
001026  aa  6 00336 2521 00	spri2	pr6|222
001027  aa  6 00206 3521 00	epp2 	pr6|134		ec
001030  aa  6 00340 2521 00	spri2	pr6|224
001031  aa   776771 3520 04	epp2 	-519,ic		000022 = 514000000110
001032  aa  6 00342 2521 00	spri2	pr6|226
001033  aa   776766 3520 04	epp2 	-522,ic		000021 = 526000000254
001034  aa  6 00344 2521 00	spri2	pr6|228
001035  aa   776773 3520 04	epp2 	-517,ic		000030 = 404000000043
001036  aa  6 00346 2521 00	spri2	pr6|230
001037  aa  6 00332 6211 00	eax1 	pr6|218
001040  aa   014000 4310 07	fld  	6144,dl
001041  aa  6 00044 3701 20	epp4 	pr6|36,*
001042  la  4 00034 3521 20	epp2 	pr4|28,*		convert_access_class_$to_string_short
001043  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 196
	     if class_str = ""
	     then class_str = "system_low";

001044  aa  040 004 106 500	cmpc 	(pr),(ic),fill(040)
001045  aa  6 00132 00 0254	desc9a	pr6|90,172	class_str
001046  aa   000630 00 0000	desc9a	408,0		001674 = 000011000000
001047  aa   000004 6010 04	tnz  	4,ic		001053
001050  aa  040 100 100 404	mlr  	(ic),(pr),fill(040)
001051  aa   776766 00 0012	desc9a	-522,10		000036 = 163171163164
001052  aa  6 00132 00 0254	desc9a	pr6|90,172	class_str
						STATEMENT 1 ON LINE 198
	     if ec ^= 0
	     then call com_err_ (ec, ME, "Illegal unsuccessful access threshold ^w ^w.",
		     addr (unsuccessful_access_threshold) -> based_dblwd);

001053  aa  6 00206 2361 00	ldq  	pr6|134		ec
001054  aa   000032 6000 04	tze  	26,ic		001106
001055  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
001056  aa   777145 00 0054	desc9a	-411,44		000222 = 111154154145
001057  aa  6 00304 00 0054	desc9a	pr6|196,44
001060  aa  6 00206 3521 00	epp2 	pr6|134		ec
001061  aa  6 00352 2521 00	spri2	pr6|234
001062  aa  6 00114 3521 00	epp2 	pr6|76		ME
001063  aa  6 00354 2521 00	spri2	pr6|236
001064  aa  6 00304 3521 00	epp2 	pr6|196
001065  aa  6 00356 2521 00	spri2	pr6|238
001066  aa  6 00112 3521 00	epp2 	pr6|74		based_dblwd
001067  aa  6 00360 2521 00	spri2	pr6|240
001070  aa   776740 3520 04	epp2 	-544,ic		000030 = 404000000043
001071  aa  6 00362 2521 00	spri2	pr6|242
001072  aa   776726 3520 04	epp2 	-554,ic		000020 = 526000000040
001073  aa  6 00364 2521 00	spri2	pr6|244
001074  aa   776731 3520 04	epp2 	-551,ic		000025 = 524000000054
001075  aa  6 00366 2521 00	spri2	pr6|246
001076  aa   776747 3520 04	epp2 	-537,ic		000045 = 514100000044
001077  aa  6 00370 2521 00	spri2	pr6|248
001100  aa  6 00350 6211 00	eax1 	pr6|232
001101  aa   020000 4310 07	fld  	8192,dl
001102  aa  6 00044 3701 20	epp4 	pr6|36,*
001103  la  4 00032 3521 20	epp2 	pr4|26,*		com_err_
001104  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
001105  aa   000024 7100 04	tra  	20,ic		001131
						STATEMENT 1 ON LINE 201
	     else call ioa_ ("   threshold = ^a.", class_str);

001106  aa   776762 2370 04	ldaq 	-526,ic		000070 = 040040040164 150162145163
001107  aa  6 00320 7571 00	staq 	pr6|208
001110  aa   776762 2370 04	ldaq 	-526,ic		000072 = 150157154144 040075040136
001111  aa  6 00322 7571 00	staq 	pr6|210
001112  aa   141056 2350 03	lda  	49710,du
001113  aa  6 00324 7551 00	sta  	pr6|212
001114  aa  6 00320 3521 00	epp2 	pr6|208
001115  aa  6 00306 2521 00	spri2	pr6|198
001116  aa  6 00132 3521 00	epp2 	pr6|90		class_str
001117  aa  6 00310 2521 00	spri2	pr6|200
001120  aa   776676 3520 04	epp2 	-578,ic		000016 = 524000000022
001121  aa  6 00312 2521 00	spri2	pr6|202
001122  aa   776677 3520 04	epp2 	-577,ic		000021 = 526000000254
001123  aa  6 00314 2521 00	spri2	pr6|204
001124  aa  6 00304 6211 00	eax1 	pr6|196
001125  aa   010000 4310 07	fld  	4096,dl
001126  aa  6 00044 3701 20	epp4 	pr6|36,*
001127  la  4 00050 3521 20	epp2 	pr4|40,*		ioa_
001130  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 202
	end;

						STATEMENT 1 ON LINE 204
	return;

001131  aa  6 00216 6101 00	rtcd 	pr6|142
						STATEMENT 1 ON LINE 206
     end display_values;

  END PROCEDURE display_values
BEGIN PROCEDURE process_arguments
ENTRY TO process_arguments                                  STATEMENT 1 ON LINE 212
process_arguments:
     procedure ();

001132  aa  6 00224 6501 00	spri4	pr6|148
						STATEMENT 1 ON LINE 217
	call cu_$arg_count_rel (n_args, arglistptr, ec);

001133  aa  6 00205 3521 00	epp2 	pr6|133		n_args
001134  aa  6 00374 2521 00	spri2	pr6|252
001135  aa  6 00124 3521 00	epp2 	pr6|84		arglistptr
001136  aa  6 00376 2521 00	spri2	pr6|254
001137  aa  6 00206 3521 00	epp2 	pr6|134		ec
001140  aa  6 00400 2521 00	spri2	pr6|256
001141  aa  6 00372 6211 00	eax1 	pr6|250
001142  aa   014000 4310 07	fld  	6144,dl
001143  aa  6 00044 3701 20	epp4 	pr6|36,*
001144  la  4 00042 3521 20	epp2 	pr4|34,*		cu_$arg_count_rel
001145  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 218
	if ec ^= 0
	then call ERROR (ec, "Unable to get argument count.");

001146  aa  6 00206 2361 00	ldq  	pr6|134		ec
001147  aa   000007 6000 04	tze  	7,ic		001156
001150  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
001151  aa   776774 00 0040	desc9a	-516,32		000144 = 125156141142
001152  aa  6 00372 00 0040	desc9a	pr6|250,32
001153  aa   000451 3520 04	epp2 	297,ic		001624 = 000004000000
001154  aa  2 00000 2351 00	lda  	pr2|0
001155  aa   000346 6700 04	tsp4 	230,ic		001523
						STATEMENT 1 ON LINE 221
	if n_args < 1
	then call ERROR (error_table_$noarg, "");

001156  aa  6 00205 2361 00	ldq  	pr6|133		n_args
001157  aa   000001 1160 07	cmpq 	1,dl
001160  aa   000016 6050 04	tpl  	14,ic		001176
001161  aa  6 00044 3701 20	epp4 	pr6|36,*
001162  la  4 00012 3521 20	epp2 	pr4|10,*		error_table_$noarg
001163  aa  6 00406 2521 00	spri2	pr6|262
001164  aa  6 00402 3521 00	epp2 	pr6|258
001165  aa  6 00410 2521 00	spri2	pr6|264
001166  aa   776642 3520 04	epp2 	-606,ic		000030 = 404000000043
001167  aa  6 00412 2521 00	spri2	pr6|266
001170  aa   776636 3520 04	epp2 	-610,ic		000026 = 524000000000
001171  aa  6 00414 2521 00	spri2	pr6|268
001172  aa  6 00404 3521 00	epp2 	pr6|260
001173  aa   010000 4310 07	fld  	4096,dl
001174  aa  2 00000 7571 00	staq 	pr2|0
001175  aa   000326 6700 04	tsp4 	214,ic		001523
						STATEMENT 1 ON LINE 224
	arg_no = 1;

001176  aa   000001 2360 07	ldq  	1,dl
001177  aa  6 00232 7561 00	stq  	pr6|154		arg_no
						STATEMENT 1 ON LINE 225
	do while (arg_no <= n_args);

001200  aa  6 00232 2361 00	ldq  	pr6|154		arg_no
001201  aa  6 00205 1161 00	cmpq 	pr6|133		n_args
001202  aa   000154 6054 04	tpnz 	108,ic		001356
						STATEMENT 1 ON LINE 226
	     call get_arg ("next control argument");

001203  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
001204  aa   776706 00 0030	desc9a	-570,24		000111 = 156145170164
001205  aa  6 00372 00 0030	desc9a	pr6|250,24
001206  aa   000410 3520 04	epp2 	264,ic		001616 = 000002000000
001207  aa  2 00000 2351 00	lda  	pr2|0
001210  aa   000242 6700 04	tsp4 	162,ic		001452
						STATEMENT 1 ON LINE 227
	     if arg = "-covert_channel"
		| arg = "-cch"
	     then do;

001211  aa  6 00130 3735 20	epp7 	pr6|88,*		argptr
001212  aa  6 00126 2351 00	lda  	pr6|86		arglen
001213  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
001214  aa  7 00000 00 0005	desc9a	pr7|0,al		arg
001215  aa   776626 00 0017	desc9a	-618,15		000041 = 055143157166
001216  aa   000005 6000 04	tze  	5,ic		001223
001217  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
001220  aa  7 00000 00 0005	desc9a	pr7|0,al		arg
001221  aa   776571 00 0004	desc9a	-647,4		000010 = 055143143150
001222  aa   000012 6010 04	tnz  	10,ic		001234
						STATEMENT 1 ON LINE 230
		call get_thresh ("covert channel threshold string", covert_channel_threshold);

001223  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
001224  aa   776711 00 0040	desc9a	-567,32		000134 = 143157166145
001225  aa  6 00372 00 0040	desc9a	pr6|250,32
001226  aa   000356 3520 04	epp2 	238,ic		001604 = 000004000000
001227  aa  2 00000 2351 00	lda  	pr2|0
001230  aa   000127 6700 04	tsp4 	87,ic		001357
						STATEMENT 1 ON LINE 231
		covert_channel_sw = "1"b;

001231  aa   400000 2350 03	lda  	131072,du
001232  aa  6 00100 7551 00	sta  	pr6|64		covert_channel_sw
						STATEMENT 1 ON LINE 232
	     end;

001233  aa   000121 7100 04	tra  	81,ic		001354
						STATEMENT 1 ON LINE 234
	     else if arg = "-no_covert_channel"
		| arg = "-ncch"
	     then covert_channel_sw = "0"b;

001234  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
001235  aa  7 00000 00 0005	desc9a	pr7|0,al		arg
001236  aa   776627 00 0022	desc9a	-617,18		000063 = 055156157137
001237  aa   000005 6000 04	tze  	5,ic		001244
001240  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
001241  aa  7 00000 00 0005	desc9a	pr7|0,al		arg
001242  aa   776574 00 0005	desc9a	-644,5		000034 = 055156143143
001243  aa   000003 6010 04	tnz  	3,ic		001246
001244  aa  6 00100 4501 00	stz  	pr6|64		covert_channel_sw
001245  aa   000107 7100 04	tra  	71,ic		001354
						STATEMENT 1 ON LINE 238
	     else if arg = "-successful_access"
		| arg = "-sa"
	     then do;

001246  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
001247  aa  7 00000 00 0005	desc9a	pr7|0,al		arg
001250  aa   776610 00 0022	desc9a	-632,18		000056 = 055163165143
001251  aa   000005 6000 04	tze  	5,ic		001256
001252  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
001253  aa  7 00000 00 0005	desc9a	pr7|0,al		arg
001254  aa   776534 00 0003	desc9a	-676,3		000006 = 055163141000
001255  aa   000012 6010 04	tnz  	10,ic		001267
						STATEMENT 1 ON LINE 241
		call get_thresh ("successful access threshold string", successful_access_threshold);

001256  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
001257  aa   776707 00 0044	desc9a	-569,36		000165 = 163165143143
001260  aa  6 00404 00 0044	desc9a	pr6|260,36
001261  aa   000311 3520 04	epp2 	201,ic		001572 = 000004000000
001262  aa  2 00000 2351 00	lda  	pr2|0
001263  aa   000074 6700 04	tsp4 	60,ic		001357
						STATEMENT 1 ON LINE 242
		successful_access_sw = "1"b;

001264  aa   400000 2350 03	lda  	131072,du
001265  aa  6 00104 7551 00	sta  	pr6|68		successful_access_sw
						STATEMENT 1 ON LINE 243
	     end;

001266  aa   000066 7100 04	tra  	54,ic		001354
						STATEMENT 1 ON LINE 245
	     else if arg = "-no_successful_access"
		| arg = "-nsa"
	     then successful_access_sw = "0"b;

001267  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
001270  aa  7 00000 00 0005	desc9a	pr7|0,al		arg
001271  aa   776614 00 0025	desc9a	-628,21		000103 = 055156157137
001272  aa   000005 6000 04	tze  	5,ic		001277
001273  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
001274  aa  7 00000 00 0005	desc9a	pr7|0,al		arg
001275  aa   776511 00 0004	desc9a	-695,4		000004 = 055156163141
001276  aa   000003 6010 04	tnz  	3,ic		001301
001277  aa  6 00104 4501 00	stz  	pr6|68		successful_access_sw
001300  aa   000054 7100 04	tra  	44,ic		001354
						STATEMENT 1 ON LINE 249
	     else if arg = "-unsuccessful_access"
		| arg = "-usa"
	     then do;

001301  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
001302  aa  7 00000 00 0005	desc9a	pr7|0,al		arg
001303  aa   776550 00 0024	desc9a	-664,20		000051 = 055165156163
001304  aa   000005 6000 04	tze  	5,ic		001311
001305  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
001306  aa  7 00000 00 0005	desc9a	pr7|0,al		arg
001307  aa   776476 00 0004	desc9a	-706,4		000003 = 055165163141
001310  aa   000012 6010 04	tnz  	10,ic		001322
						STATEMENT 1 ON LINE 252
		call get_thresh ("unsuccessful access threshold string", unsuccessful_access_threshold);

001311  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
001312  aa   776643 00 0044	desc9a	-605,36		000154 = 165156163165
001313  aa  6 00404 00 0044	desc9a	pr6|260,36
001314  aa   000244 3520 04	epp2 	164,ic		001560 = 000004000000
001315  aa  2 00000 2351 00	lda  	pr2|0
001316  aa   000041 6700 04	tsp4 	33,ic		001357
						STATEMENT 1 ON LINE 253
		unsuccessful_access_sw = "1"b;

001317  aa   400000 2350 03	lda  	131072,du
001320  aa  6 00110 7551 00	sta  	pr6|72		unsuccessful_access_sw
						STATEMENT 1 ON LINE 254
	     end;

001321  aa   000033 7100 04	tra  	27,ic		001354
						STATEMENT 1 ON LINE 256
	     else if arg = "-no_unsuccessful_access"
		| arg = "-nusa"
	     then unsuccessful_access_sw = "0"b;

001322  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
001323  aa  7 00000 00 0005	desc9a	pr7|0,al		arg
001324  aa   776553 00 0027	desc9a	-661,23		000075 = 055156157137
001325  aa   000005 6000 04	tze  	5,ic		001332
001326  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
001327  aa  7 00000 00 0005	desc9a	pr7|0,al		arg
001330  aa   776504 00 0005	desc9a	-700,5		000032 = 055156165163
001331  aa   000003 6010 04	tnz  	3,ic		001334
001332  aa  6 00110 4501 00	stz  	pr6|72		unsuccessful_access_sw
001333  aa   000021 7100 04	tra  	17,ic		001354
						STATEMENT 1 ON LINE 260
	     else call ERROR (error_table_$bad_arg, arg);

001334  aa  6 00126 2361 00	ldq  	pr6|86		arglen
001335  aa   526000 2760 03	orq  	175104,du
001336  aa  6 00402 7561 00	stq  	pr6|258
001337  aa  6 00044 3701 20	epp4 	pr6|36,*
001340  la  4 00010 3521 20	epp2 	pr4|8,*		error_table_$bad_arg
001341  aa  6 00406 2521 00	spri2	pr6|262
001342  aa  7 00000 3521 00	epp2 	pr7|0		arg
001343  aa  6 00410 2521 00	spri2	pr6|264
001344  aa   776464 3520 04	epp2 	-716,ic		000030 = 404000000043
001345  aa  6 00412 2521 00	spri2	pr6|266
001346  aa  6 00402 3521 00	epp2 	pr6|258
001347  aa  6 00414 2521 00	spri2	pr6|268
001350  aa  6 00404 3521 00	epp2 	pr6|260
001351  aa   010000 4310 07	fld  	4096,dl
001352  aa  2 00000 7571 00	staq 	pr2|0
001353  aa   000150 6700 04	tsp4 	104,ic		001523
						STATEMENT 1 ON LINE 262
	     arg_no = arg_no + 1;

001354  aa  6 00232 0541 00	aos  	pr6|154		arg_no
						STATEMENT 1 ON LINE 264
	end;

001355  aa   777623 7100 04	tra  	-109,ic		001200
						STATEMENT 1 ON LINE 266
	return;

001356  aa  6 00224 6101 00	rtcd 	pr6|148
						STATEMENT 1 ON LINE 301
     end process_arguments;

BEGIN PROCEDURE get_thresh
ENTRY TO get_thresh                                         STATEMENT 1 ON LINE 268
get_thresh:
     procedure (arg_name, thresh_var);

001357  aa  6 00234 6501 00	spri4	pr6|156
001360  aa  6 00236 2521 00	spri2	pr6|158
001361  aa  2 00002 3521 01	epp2 	pr2|2,au
001362  aa  6 00240 2521 00	spri2	pr6|160
001363  aa  2 00000 2361 20	ldq  	pr2|0,*
001364  aa   000002 6040 04	tmi  	2,ic		001366
001365  aa   777777 3760 07	anq  	262143,dl
001366  aa  0 00250 3761 00	anq  	pr0|168		= 000077777777
001367  aa  6 00420 7561 00	stq  	pr6|272
						STATEMENT 1 ON LINE 275
	arg_no = arg_no + 1;

001370  aa  6 00232 0541 00	aos  	pr6|154		arg_no
						STATEMENT 1 ON LINE 276
	call get_arg (arg_name);

001371  aa  6 00236 3735 20	epp7 	pr6|158,*
001372  aa  7 00002 3521 20	epp2 	pr7|2,*		arg_name
001373  aa  6 00424 2521 00	spri2	pr6|276
001374  aa  6 00240 3715 20	epp5 	pr6|160,*
001375  aa  5 00000 3521 20	epp2 	pr5|0,*
001376  aa  6 00426 2521 00	spri2	pr6|278
001377  aa  6 00422 3521 00	epp2 	pr6|274
001400  aa   004000 4310 07	fld  	2048,dl
001401  aa  2 00000 7571 00	staq 	pr2|0
001402  aa   000050 6700 04	tsp4 	40,ic		001452
						STATEMENT 1 ON LINE 278
	call convert_access_class_$from_string (thresh_var, arg, ec);

001403  aa  6 00126 2361 00	ldq  	pr6|86		arglen
001404  aa   526000 2760 03	orq  	175104,du
001405  aa  6 00421 7561 00	stq  	pr6|273
001406  aa  6 00236 3735 20	epp7 	pr6|158,*
001407  aa  7 00004 3521 20	epp2 	pr7|4,*		thresh_var
001410  aa  6 00434 2521 00	spri2	pr6|284
001411  aa  6 00130 3521 20	epp2 	pr6|88,*		arg
001412  aa  6 00436 2521 00	spri2	pr6|286
001413  aa  6 00206 3521 00	epp2 	pr6|134		ec
001414  aa  6 00440 2521 00	spri2	pr6|288
001415  aa   776405 3520 04	epp2 	-763,ic		000022 = 514000000110
001416  aa  6 00442 2521 00	spri2	pr6|290
001417  aa  6 00421 3521 00	epp2 	pr6|273
001420  aa  6 00444 2521 00	spri2	pr6|292
001421  aa   776407 3520 04	epp2 	-761,ic		000030 = 404000000043
001422  aa  6 00446 2521 00	spri2	pr6|294
001423  aa  6 00432 6211 00	eax1 	pr6|282
001424  aa   014000 4310 07	fld  	6144,dl
001425  aa  6 00044 3701 20	epp4 	pr6|36,*
001426  la  4 00036 3521 20	epp2 	pr4|30,*		convert_access_class_$from_string
001427  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 279
	if ec ^= 0
	then call ERROR (ec, arg);

001430  aa  6 00206 2361 00	ldq  	pr6|134		ec
001431  aa   000020 6000 04	tze  	16,ic		001451
001432  aa  6 00126 2361 00	ldq  	pr6|86		arglen
001433  aa   526000 2760 03	orq  	175104,du
001434  aa  6 00421 7561 00	stq  	pr6|273
001435  aa  6 00206 3521 00	epp2 	pr6|134		ec
001436  aa  6 00434 2521 00	spri2	pr6|284
001437  aa  6 00130 3521 20	epp2 	pr6|88,*		arg
001440  aa  6 00436 2521 00	spri2	pr6|286
001441  aa   776367 3520 04	epp2 	-777,ic		000030 = 404000000043
001442  aa  6 00440 2521 00	spri2	pr6|288
001443  aa  6 00421 3521 00	epp2 	pr6|273
001444  aa  6 00442 2521 00	spri2	pr6|290
001445  aa  6 00432 3521 00	epp2 	pr6|282
001446  aa   010000 4310 07	fld  	4096,dl
001447  aa  2 00000 7571 00	staq 	pr2|0
001450  aa   000053 6700 04	tsp4 	43,ic		001523
						STATEMENT 1 ON LINE 282
	return;

001451  aa  6 00234 6101 00	rtcd 	pr6|156
						STATEMENT 1 ON LINE 284
     end get_thresh;

  END PROCEDURE get_thresh
BEGIN PROCEDURE get_arg
ENTRY TO get_arg                                            STATEMENT 1 ON LINE 287
get_arg:
     procedure (arg_name);

001452  aa  6 00242 6501 00	spri4	pr6|162
001453  aa  6 00244 2521 00	spri2	pr6|164
001454  aa  2 00002 3521 01	epp2 	pr2|2,au
001455  aa  6 00246 2521 00	spri2	pr6|166
001456  aa  2 00000 2361 20	ldq  	pr2|0,*
001457  aa   000002 6040 04	tmi  	2,ic		001461
001460  aa   777777 3760 07	anq  	262143,dl
001461  aa  0 00250 3761 00	anq  	pr0|168		= 000077777777
001462  aa  6 00450 7561 00	stq  	pr6|296
						STATEMENT 1 ON LINE 292
	call cu_$arg_ptr_rel (arg_no, argptr, arglen, ec, arglistptr);

001463  aa  6 00232 3521 00	epp2 	pr6|154		arg_no
001464  aa  6 00454 2521 00	spri2	pr6|300
001465  aa  6 00130 3521 00	epp2 	pr6|88		argptr
001466  aa  6 00456 2521 00	spri2	pr6|302
001467  aa  6 00126 3521 00	epp2 	pr6|86		arglen
001470  aa  6 00460 2521 00	spri2	pr6|304
001471  aa  6 00206 3521 00	epp2 	pr6|134		ec
001472  aa  6 00462 2521 00	spri2	pr6|306
001473  aa  6 00124 3521 00	epp2 	pr6|84		arglistptr
001474  aa  6 00464 2521 00	spri2	pr6|308
001475  aa  6 00452 6211 00	eax1 	pr6|298
001476  aa   024000 4310 07	fld  	10240,dl
001477  aa  6 00044 3701 20	epp4 	pr6|36,*
001500  la  4 00046 3521 20	epp2 	pr4|38,*		cu_$arg_ptr_rel
001501  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 294
	if ec ^= 0
	then call ERROR (ec, arg_name);

001502  aa  6 00206 2361 00	ldq  	pr6|134		ec
001503  aa   000017 6000 04	tze  	15,ic		001522
001504  aa  6 00206 3521 00	epp2 	pr6|134		ec
001505  aa  6 00454 2521 00	spri2	pr6|300
001506  aa  6 00244 3735 20	epp7 	pr6|164,*
001507  aa  7 00002 3521 20	epp2 	pr7|2,*		arg_name
001510  aa  6 00456 2521 00	spri2	pr6|302
001511  aa   776317 3520 04	epp2 	-817,ic		000030 = 404000000043
001512  aa  6 00460 2521 00	spri2	pr6|304
001513  aa  6 00246 3715 20	epp5 	pr6|166,*
001514  aa  5 00000 3521 20	epp2 	pr5|0,*
001515  aa  6 00462 2521 00	spri2	pr6|306
001516  aa  6 00452 3521 00	epp2 	pr6|298
001517  aa   010000 4310 07	fld  	4096,dl
001520  aa  2 00000 7571 00	staq 	pr2|0
001521  aa   000002 6700 04	tsp4 	2,ic		001523
						STATEMENT 1 ON LINE 297
	return;

001522  aa  6 00242 6101 00	rtcd 	pr6|162
						STATEMENT 1 ON LINE 299
     end get_arg;

  END PROCEDURE get_arg
  END PROCEDURE process_arguments
BEGIN PROCEDURE ERROR
ENTRY TO ERROR                                              STATEMENT 1 ON LINE 306
ERROR:
     procedure (code, msg);

001523  aa  6 00250 6501 00	spri4	pr6|168
001524  aa  6 00252 2521 00	spri2	pr6|170
001525  aa  2 00002 3521 01	epp2 	pr2|2,au
001526  aa  6 00254 2521 00	spri2	pr6|172
001527  aa  2 00002 2361 20	ldq  	pr2|2,*
001530  aa   000002 6040 04	tmi  	2,ic		001532
001531  aa   777777 3760 07	anq  	262143,dl
001532  aa  0 00250 3761 00	anq  	pr0|168		= 000077777777
001533  aa  6 00466 7561 00	stq  	pr6|310
						STATEMENT 1 ON LINE 312
	call com_err_ (code, ME, msg);

001534  aa  6 00252 3735 20	epp7 	pr6|170,*
001535  aa  7 00002 3521 20	epp2 	pr7|2,*		code
001536  aa  6 00472 2521 00	spri2	pr6|314
001537  aa  6 00114 3521 00	epp2 	pr6|76		ME
001540  aa  6 00474 2521 00	spri2	pr6|316
001541  aa  7 00004 3521 20	epp2 	pr7|4,*		msg
001542  aa  6 00476 2521 00	spri2	pr6|318
001543  aa   776265 3520 04	epp2 	-843,ic		000030 = 404000000043
001544  aa  6 00500 2521 00	spri2	pr6|320
001545  aa   776253 3520 04	epp2 	-853,ic		000020 = 526000000040
001546  aa  6 00502 2521 00	spri2	pr6|322
001547  aa  6 00254 3715 20	epp5 	pr6|172,*
001550  aa  5 00002 3521 20	epp2 	pr5|2,*
001551  aa  6 00504 2521 00	spri2	pr6|324
001552  aa  6 00470 6211 00	eax1 	pr6|312
001553  aa   014000 4310 07	fld  	6144,dl
001554  aa  6 00044 3701 20	epp4 	pr6|36,*
001555  la  4 00032 3521 20	epp2 	pr4|26,*		com_err_
001556  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 314
	goto ERROR_EXIT;

001557  aa   776710 7100 04	tra  	-568,ic		000467
						STATEMENT 1 ON LINE 316
     end ERROR;

  END PROCEDURE ERROR
  END PROCEDURE ssaf


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
