	COMPILATION LISTING OF SEGMENT backup_cleanup
	Compiled by: Multics PL/I Compiler, Release 31a, of October 12, 1988
	Compiled at: Honeywell Bull, Phoenix AZ, SysM
	Compiled on: 10/28/88  1317.8 mst Fri
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 backup_cleanup: bc: proc;
       12 
       13 /* Command to dprint and delete backup maps and error files.
       14*
       15*   Usage:
       16*	backup_cleanup {starnames} {-no_dprint}
       17*
       18*   If no starnames are specified, *.*.map and *.*.ef in the working directory
       19*   are processed. If -no_dprint is specified, the segments are deleted.
       20*   Otherwise they are dprinted and deleted.
       21*
       22*Written 04/26/79 S. Herbst */
       23 
       24 
       25 
  1     1 /* BEGIN INCLUDE FILE ... dprint_arg.incl.pl1 */
  1     2 /* Modified 11/13/74 by Noel I. Morris */
  1     3 /* Modified: 10 April 1981 by G. Palter for version 6 structure -- longer request type names */
  1     4 /* Modified: 30 April 1982 by R. Kovalcik for version 7 structure -- defer_until_process_terminataion */
  1     5 /* Modified: November 1983 by C. Marker for version 8 structure -- no_separator */
  1     6 
  1     7 /****^  HISTORY COMMENTS:
  1     8*  1) change(87-05-10,Gilcrease), approve(87-05-13,MCR7686),
  1     9*     audit(88-02-01,Farley), install(88-02-02,MR12.2-1019):
  1    10*     Add line_nbrs bit for line-numbered printouts, version 9.
  1    11*  2) change(88-02-05,Farley), approve(88-02-05,PBF7686), audit(88-02-05,GWMay),
  1    12*     install(88-02-05,MR12.2-1022):
  1    13*     Corrected alignment of line_nbrs, was aligned s/b unaligned..
  1    14*  3) change(88-08-29,Farley), approve(88-09-16,MCR7911),
  1    15*     audit(88-09-29,Wallman), install(88-10-28,MR12.2-1199):
  1    16*     Created a new 64 character forms_name variable, which supersedes the old
  1    17*     char 24 form_name variable, version 10.
  1    18*                                                   END HISTORY COMMENTS */
  1    19 
  1    20 
  1    21 dcl  dpap ptr;					/* ptr to argument structure */
  1    22 dcl  1 dprint_arg_buf aligned like dprint_arg;		/* Automatic storage for arg. */
  1    23 
  1    24 dcl  1 dprint_arg based (dpap) aligned,			/* argument structure */
  1    25        2 version fixed bin,				/* version number of dcl - current version is 9 */
  1    26        2 copies fixed bin,				/* number of copies wanted */
  1    27        2 delete fixed bin,				/* 1=delete after print */
  1    28        2 queue fixed bin,				/* print queue */
  1    29        2 pt_pch fixed bin,				/* 1=print, 2=punch */
  1    30        2 notify fixed bin,				/* 1 = notify user when done */
  1    31        2 heading char (64),				/* first page heading */
  1    32        2 output_module fixed bin,			/* 1=print, 2=7punch, 3=mcc, 4=raw, 5=plotter */
  1    33        2 dest char (12),				/* version 5 made this a pad - see destination below */
  1    34 						/* limit of version 1 structure */
  1    35        2 carriage_control,				/* Carriage control flags. */
  1    36          3 nep bit (1) unal,				/* TRUE if print trhu perf. */
  1    37          3 single bit (1) unal,			/* TRUE if ignore FF and VT */
  1    38          3 non_edited bit (1) unal,			/* TRUE if printing in non-edited mode */
  1    39          3 truncate bit (1) unal,			/* TRUE if truncating lines at line length */
  1    40          3 center_top_label bit (1) unal,		/* TRUE if top label to be centered */
  1    41          3 center_bottom_label bit (1) unal,		/* TRUE if bottom label to be centered */
  1    42          3 esc bit (1) unal,				/* version 5 TRUE if text escapes are to be processed */
  1    43          3 no_separator bit (1) unal,			/* version 8 TRUE if the inner head and tail sheets are to be suppressed. */
  1    44          3 line_nbrs bit (1) unal,			/* version 9, line numbers */
  1    45          3 padding bit (27) unal,
  1    46        2 pad (30) fixed bin,
  1    47        2 forms char (8),				/* version 5 made this a pad - see form_name below */
  1    48        2 lmargin fixed bin,				/* left margin */
  1    49        2 line_lth fixed bin,				/* max line lth */
  1    50 						/* limit of version 2 structure */
  1    51        2 class char (8),				/* version 6 made this a pad - see request_type below */
  1    52        2 page_lth fixed bin,				/* Paper length arg */
  1    53 						/* limit of version 3 structure */
  1    54        2 top_label char (136),			/* top-of-page label */
  1    55        2 bottom_label char (136),			/* bottom-of-page label */
  1    56 						/* limit of version 4 structure */
  1    57        2 bit_count fixed bin (35),			/* segment bit count */
  1    58        2 form_name char (24),				/* name of special forms needed - moved from forms */
  1    59 						/* version 10 made this a pad - see forms_name below */
  1    60        2 destination char (24),			/* the long destination - moved from dest */
  1    61        2 chan_stop_path char (168),			/* path of user channel stops - future */
  1    62 						/* limit of version 5 structure */
  1    63        2 request_type character (24) unaligned,		/* request type for the request */
  1    64                                                             /* limit of version 6 structure */
  1    65        2 defer_until_process_termination fixed bin,	/* 1 = don't process request until requesting process terminates */
  1    66        2 forms_name char (64) unal;			/* name of special forms needed - moved from form_name */
  1    67                                                             /* limit of version 10 structure */
  1    68 
  1    69 dcl  dprint_arg_version_1 fixed bin int static options (constant) init (1);
  1    70 dcl  dprint_arg_version_2 fixed bin int static options (constant) init (2);
  1    71 dcl  dprint_arg_version_3 fixed bin int static options (constant) init (3);
  1    72 dcl  dprint_arg_version_4 fixed bin int static options (constant) init (4);
  1    73 dcl  dprint_arg_version_5 fixed bin int static options (constant) init (5);
  1    74 dcl  dprint_arg_version_6 fixed bin int static options (constant) init (6);
  1    75 dcl  dprint_arg_version_7 fixed bin int static options (constant) init (7);
  1    76 dcl  dprint_arg_version_8 fixed bin int static options (constant) init (8);
  1    77 dcl  dprint_arg_version_9 fixed bin int static options (constant) init (9);
  1    78 dcl  dprint_arg_version_10 fixed bin int static options (constant) init (10);
  1    79 						/* current version */
  1    80 
  1    81 dcl  (
  1    82      DP_PRINT init (1),
  1    83      DP_PUNCH init (2),
  1    84      DP_PLOT init (3)
  1    85      ) fixed bin static options (constant);		/* for dprint_arg.pt_pch */
  1    86 
  1    87 /* END INCLUDE FILE ... dprint_arg.incl.pl1 */
       26 
       27 
       28 dcl 1 entries (branch_count) aligned based (entries_ptr),	/* for hcs_$star_ */
       29      2 type bit (2) unaligned,
       30      2 nnames bit (16) unaligned,
       31      2 nindex bit (18) unaligned;
       32 
       33 dcl names (99) char (32) aligned based (names_ptr);	/* for hcs_$star_ */
       34 
       35 dcl area area based (area_ptr);
       36 
       37 dcl arg char (arg_len) based (arg_ptr);
       38 dcl ERROR_FILE_DIR char (168) int static options (constant) init (">udd>SysDaemon>error_file");
       39 dcl dn char (168);
       40 dcl (en, name) char (32);
       41 
       42 dcl (dprint_sw, ef_sw, path_sw) bit (1) aligned;
       43 
       44 dcl (area_ptr, arg_ptr, entries_ptr, names_ptr) ptr;
       45 
       46 dcl rings (3) fixed bin (5);
       47 dcl (arg_count, arg_len, branch_count, i, j, queue_number) fixed bin;
       48 
       49 dcl code fixed bin (35);
       50 dcl error_table_$badopt fixed bin (35) ext;
       51 dcl error_table_$noentry fixed bin (35) ext;
       52 dcl error_table_$nomatch fixed bin (35) ext;
       53 
       54 dcl bk_ss_$myname char (16) ext;
       55 
       56 dcl adjust_bit_count_ entry (char (168) aligned, char (32) aligned, bit (1) aligned,
       57 	fixed bin (24), fixed bin (35));
       58 dcl check_star_name_$entry entry (char (*), fixed bin (35));
       59 dcl com_err_ entry options (variable);
       60 dcl copy_seg_ entry (char (*), char (*), char (*), char (*), char (*), bit (1) aligned, fixed bin (35));
       61 dcl cu_$arg_count entry (fixed bin);
       62 dcl cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
       63 dcl cu_$level_get entry returns (fixed bin);
       64 dcl cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin);
       65 dcl dprint_ entry (char (*), char (*), ptr, fixed bin (35));
       66 dcl expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
       67 dcl get_system_free_area_ entry returns (ptr);
       68 dcl get_wdir_ entry returns (char (168));
       69 dcl hcs_$delentry_file entry (char (*), char (*), fixed bin (35));
       70 dcl hcs_$set_ring_brackets entry (char (*), char (*), (3) fixed bin (5), fixed bin (35));
       71 dcl hcs_$star_ entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr, fixed bin (35));
       72 dcl hcs_$status_minf entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24), fixed bin (35));
       73 
       74 dcl (addr, fixed, length, max, null, rtrim, substr) builtin;
       75 
       76 dcl cleanup condition;
       77 /**/
       78 	bk_ss_$myname = "backup_cleanup";
       79 
       80 	call cu_$arg_count (arg_count);
       81 
       82 	dprint_sw = "1"b;
       83 	path_sw = "0"b;
       84 	queue_number = 1;
       85 
       86 	do i = 1 to arg_count;
       87 	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
       88 	     if substr (arg, 1, 1) = "-" then
       89 		if arg = "-no_dprint" | arg = "-ndp" then dprint_sw = "0"b;
       90 		else if arg = "-dprint" | arg = "-dp" then dprint_sw = "1"b;
       91 		else if arg = "-queue" | arg = "-q" then do;
       92 		     i = i + 1;
       93 		     if i > arg_count then do;
       94 			call com_err_ (0, "backup_cleanup", "No value specified for ^a", arg);
       95 			return;
       96 		     end;
       97 		     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
       98 		     queue_number = cv_dec_check_ (arg, code);
       99 		     if code ^= 0 then do;
      100 BAD_QUEUE:		call com_err_ (0, "backup_cleanup", "Invalid queue number ^a", arg);
      101 			return;
      102 		     end;
      103 		     else if queue_number < 1 | queue_number > 4 then go to BAD_QUEUE;
      104 		end;
      105 		else do;
      106 		     call com_err_ (error_table_$badopt, "backup_cleanup", "^a", arg);
      107 		     return;
      108 		end;
      109 	     else path_sw = "1"b;
      110 	end;
      111 
      112 	area_ptr = get_system_free_area_ ();
      113 
      114 	if dprint_sw then do;
      115 	     dpap = addr (dprint_arg_buf);
      116 	     dprint_arg.version = 1;
      117 	     dprint_arg.copies = 1;
      118 	     dprint_arg.delete = 1;
      119 	     dprint_arg.queue = queue_number;
      120 	     dprint_arg.pt_pch = 1;
      121 	     dprint_arg.notify = 0;
      122 	     dprint_arg.output_module = 1;
      123 	     dprint_arg.dest = "SysDaemon";
      124 	end;
      125 
      126 	if ^path_sw then do;			/* no starnames specified */
      127 
      128 	     call do_starname (get_wdir_ (), "*.*.map");
      129 
      130 	     call do_starname (get_wdir_ (), "*.*.*.ef");
      131 	end;
      132 
      133 	else do i = 1 to arg_count;
      134 
      135 	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
      136 	     if substr (arg, 1, 1) ^= "-" then do;
      137 
      138 		call expand_pathname_ (arg, dn, en, code);
      139 		if code ^= 0 then do;
      140 		     call com_err_ (code, "backup_cleanup", "^a", arg);
      141 		     return;
      142 		end;
      143 
      144 		if substr (arg, arg_len - 3, 4) = ".map" | substr (arg, arg_len - 2, 3) = ".ef" then
      145 
      146 		     call do_starname (dn, en);
      147 
      148 		else do;
      149 
      150 		     call do_starname (dn, rtrim (en) || ".map");
      151 
      152 		     call do_starname (dn, rtrim (en) || ".ef");
      153 		end;
      154 	     end;
      155 	end;
      156 
      157 	return;
      158 /**/
      159 do_starname: proc (a_dn, a_en);
      160 
      161 dcl (a_dn, a_en) char (*);
      162 
      163 	call check_star_name_$entry (a_en, code);
      164 
      165 	if code = 0 then do;
      166 	     branch_count, j = 1;
      167 	     name = a_en;
      168 	     go to ONE_FILE;
      169 	end;
      170 
      171 	else if code = 1 | code = 2 then do;
      172 
      173 	     entries_ptr, names_ptr = null;
      174 
      175 	     on condition (cleanup) call clean_up;
      176 
      177 	     call hcs_$star_ (a_dn, a_en, 2 /* branches */, area_ptr, branch_count,
      178 		entries_ptr, names_ptr, code);
      179 	     if code ^= 0 then do;
      180 		if code ^= error_table_$nomatch then
      181 		     call com_err_ (code, "backup_cleanup", "^a^[>^]^a", a_dn, a_dn ^= ">", a_en);
      182 		return;
      183 	     end;
      184 
      185 	     do j = 1 to branch_count;
      186 
      187 		name = names (fixed (entries (j).nindex, 18));
      188 
      189 ONE_FILE:		if substr (a_en, length (rtrim (a_en)) - 2, 3) = ".ef" then do;
      190 		     ef_sw = "1"b;
      191 		     dprint_arg.heading = " for OLD ERROR FILE";
      192 		end;
      193 		else do;
      194 		     ef_sw = "0"b;
      195 		     dprint_arg.heading = " for OLD MAP";
      196 		end;
      197 
      198 		if dprint_sw | ef_sw then do;
      199 
      200 		     call adjust_bit_count_ ((a_dn), (name), "1"b, 0, code);
      201 		     if code ^= 0 then do;
      202 			call com_err_ (code, "backup_cleanup", "^a^[>^]^a", a_dn, a_dn ^= ">", name);
      203 			return;
      204 		     end;
      205 
      206 		     rings (1), rings (2), rings (3) = max (4, cu_$level_get ());
      207 		     call hcs_$set_ring_brackets (a_dn, name, rings, code);
      208 		end;
      209 
      210 		if ef_sw then do;			/* copy error file */
      211 		     call hcs_$status_minf (ERROR_FILE_DIR, name, 0, 0, 0, code);
      212 		     if code ^= error_table_$noentry then do;
      213 			call hcs_$delentry_file (ERROR_FILE_DIR, name, code);
      214 COPY_ERROR:		if code ^= 0 then call com_err_ (code, "backup_cleanup",
      215 			     "Copying ^a^[>^]^a to ^a>^a", a_dn, a_dn ^= ">", name, ERROR_FILE_DIR, name);
      216 		     end;
      217 		     else code = 0;
      218 
      219 		     if code = 0 then do;
      220 			call copy_seg_ (a_dn, name, ERROR_FILE_DIR, name, "backup_cleanup", "0"b, code);
      221 			if code ^= 0 then go to COPY_ERROR;
      222 		     end;
      223 		end;
      224 
      225 		if dprint_sw then call dprint_ (a_dn, name, dpap, code);
      226 
      227 		else call hcs_$delentry_file (a_dn, name, code);
      228 	     end;
      229 
      230 	     call clean_up;
      231 	end;
      232 
      233 	else call com_err_ (code, "backup_cleanup", "^a", a_en);
      234 
      235 end do_starname;
      236 /**/
      237 clean_up: proc;
      238 
      239 	if entries_ptr ^= null then free entries_ptr -> entries in (area);
      240 	if names_ptr ^= null then free names_ptr -> names in (area);
      241 
      242 end clean_up;
      243 
      244 end backup_cleanup;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    10/28/88  1302.3  backup_cleanup.pl1                >special_ldd>install>MR12.2-1199>backup_cleanup.pl1
26           1    10/28/88  1227.7  dprint_arg.incl.pl1               >special_ldd>install>MR12.2-1199>dprint_arg.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
ERROR_FILE_DIR                  000000 constant        char(168)                initial packed unaligned dcl 38 set ref 211* 213*
                                                                                  214* 220*
a_dn                                   parameter       char                     packed unaligned dcl 161 set ref 159 177* 180* 180
                                                                                  200 202* 202 207* 214* 214 220* 225* 227*
a_en                                   parameter       char                     packed unaligned dcl 161 set ref 159 163* 167 177*
                                                                                  180* 189 189 233*
addr                                                   builtin function         dcl 74 ref 115
adjust_bit_count_               000020 constant        entry                    external dcl 56 ref 200
area                                   based           area(1024)               dcl 35 ref 239 240
area_ptr                        000522 automatic       pointer                  dcl 44 set ref 112* 177* 239 240
arg                                    based           char                     packed unaligned dcl 37 set ref 88 88 88 90 90 91 91
                                                                                  94* 98* 100* 106* 136 138* 140* 144 144
arg_count                       000535 automatic       fixed bin(17,0)          dcl 47 set ref 80* 86 93 133
arg_len                         000536 automatic       fixed bin(17,0)          dcl 47 set ref 87* 88 88 88 90 90 91 91 94 94 97* 98
                                                                                  98 100 100 106 106 135* 136 138 138 140 140 144
                                                                                  144 144 144
arg_ptr                         000524 automatic       pointer                  dcl 44 set ref 87* 88 88 88 90 90 91 91 94 97* 98
                                                                                  100 106 135* 136 138 140 144 144
bk_ss_$myname                   000016 external static char(16)                 packed unaligned dcl 54 set ref 78*
branch_count                    000537 automatic       fixed bin(17,0)          dcl 47 set ref 166* 177* 185 239
check_star_name_$entry          000022 constant        entry                    external dcl 58 ref 163
cleanup                         000000 stack reference condition                dcl 76 ref 175
code                            000543 automatic       fixed bin(35,0)          dcl 49 set ref 87* 97* 98* 99 135* 138* 139 140*
                                                                                  163* 165 171 171 177* 179 180 180* 200* 201 202*
                                                                                  207* 211* 212 213* 214 214* 217* 219 220* 221 225*
                                                                                  227* 233*
com_err_                        000024 constant        entry                    external dcl 59 ref 94 100 106 140 180 202 214 233
copies                    1            based           fixed bin(17,0)          level 2 dcl 1-24 set ref 117*
copy_seg_                       000026 constant        entry                    external dcl 60 ref 220
cu_$arg_count                   000030 constant        entry                    external dcl 61 ref 80
cu_$arg_ptr                     000032 constant        entry                    external dcl 62 ref 87 97 135
cu_$level_get                   000034 constant        entry                    external dcl 63 ref 206
cv_dec_check_                   000036 constant        entry                    external dcl 64 ref 98
delete                    2            based           fixed bin(17,0)          level 2 dcl 1-24 set ref 118*
dest                     27            based           char(12)                 level 2 dcl 1-24 set ref 123*
dn                              000424 automatic       char(168)                packed unaligned dcl 39 set ref 138* 144* 150* 152*
dpap                            000100 automatic       pointer                  dcl 1-21 set ref 115* 116 117 118 119 120 121 122
                                                                                  123 191 195 225*
dprint_                         000040 constant        entry                    external dcl 65 ref 225
dprint_arg                             based           structure                level 1 dcl 1-24
dprint_arg_buf                  000102 automatic       structure                level 1 dcl 1-22 set ref 115
dprint_sw                       000516 automatic       bit(1)                   dcl 42 set ref 82* 88* 90* 114 198 225
ef_sw                           000517 automatic       bit(1)                   dcl 42 set ref 190* 194* 198 210
en                              000476 automatic       char(32)                 packed unaligned dcl 40 set ref 138* 144* 150 152
entries                                based           structure                array level 1 dcl 28 ref 239
entries_ptr                     000526 automatic       pointer                  dcl 44 set ref 173* 177* 187 239 239
error_table_$badopt             000010 external static fixed bin(35,0)          dcl 50 set ref 106*
error_table_$noentry            000012 external static fixed bin(35,0)          dcl 51 ref 212
error_table_$nomatch            000014 external static fixed bin(35,0)          dcl 52 ref 180
expand_pathname_                000042 constant        entry                    external dcl 66 ref 138
fixed                                                  builtin function         dcl 74 ref 187
get_system_free_area_           000044 constant        entry                    external dcl 67 ref 112
get_wdir_                       000046 constant        entry                    external dcl 68 ref 128 128 130 130
hcs_$delentry_file              000050 constant        entry                    external dcl 69 ref 213 227
hcs_$set_ring_brackets          000052 constant        entry                    external dcl 70 ref 207
hcs_$star_                      000054 constant        entry                    external dcl 71 ref 177
hcs_$status_minf                000056 constant        entry                    external dcl 72 ref 211
heading                   6            based           char(64)                 level 2 dcl 1-24 set ref 191* 195*
i                               000540 automatic       fixed bin(17,0)          dcl 47 set ref 86* 87* 92* 92 93 97* 133* 135*
j                               000541 automatic       fixed bin(17,0)          dcl 47 set ref 166* 185* 187*
length                                                 builtin function         dcl 74 ref 189
max                                                    builtin function         dcl 74 ref 206
name                            000506 automatic       char(32)                 packed unaligned dcl 40 set ref 167* 187* 200 202*
                                                                                  207* 211* 213* 214* 214* 220* 220* 225* 227*
names                                  based           char(32)                 array dcl 33 ref 187 240
names_ptr                       000530 automatic       pointer                  dcl 44 set ref 173* 177* 187 240 240
nindex                    0(18)        based           bit(18)                  array level 2 packed packed unaligned dcl 28 ref 187
notify                    5            based           fixed bin(17,0)          level 2 dcl 1-24 set ref 121*
null                                                   builtin function         dcl 74 ref 173 239 240
output_module            26            based           fixed bin(17,0)          level 2 dcl 1-24 set ref 122*
path_sw                         000520 automatic       bit(1)                   dcl 42 set ref 83* 109* 126
pt_pch                    4            based           fixed bin(17,0)          level 2 dcl 1-24 set ref 120*
queue                     3            based           fixed bin(17,0)          level 2 dcl 1-24 set ref 119*
queue_number                    000542 automatic       fixed bin(17,0)          dcl 47 set ref 84* 98* 103 103 119
rings                           000532 automatic       fixed bin(5,0)           array dcl 46 set ref 206* 206* 206* 207*
rtrim                                                  builtin function         dcl 74 ref 150 152 189
substr                                                 builtin function         dcl 74 ref 88 136 144 144 189
version                                based           fixed bin(17,0)          level 2 dcl 1-24 set ref 116*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
DP_PLOT                                internal static fixed bin(17,0)          initial dcl 1-81
DP_PRINT                               internal static fixed bin(17,0)          initial dcl 1-81
DP_PUNCH                               internal static fixed bin(17,0)          initial dcl 1-81
dprint_arg_version_1                   internal static fixed bin(17,0)          initial dcl 1-69
dprint_arg_version_10                  internal static fixed bin(17,0)          initial dcl 1-78
dprint_arg_version_2                   internal static fixed bin(17,0)          initial dcl 1-70
dprint_arg_version_3                   internal static fixed bin(17,0)          initial dcl 1-71
dprint_arg_version_4                   internal static fixed bin(17,0)          initial dcl 1-72
dprint_arg_version_5                   internal static fixed bin(17,0)          initial dcl 1-73
dprint_arg_version_6                   internal static fixed bin(17,0)          initial dcl 1-74
dprint_arg_version_7                   internal static fixed bin(17,0)          initial dcl 1-75
dprint_arg_version_8                   internal static fixed bin(17,0)          initial dcl 1-76
dprint_arg_version_9                   internal static fixed bin(17,0)          initial dcl 1-77

NAMES DECLARED BY EXPLICIT CONTEXT.
BAD_QUEUE                       000431 constant        label                    dcl 100 ref 103
COPY_ERROR                      001732 constant        label                    dcl 214 ref 221
ONE_FILE                        001417 constant        label                    dcl 189 ref 168
backup_cleanup                  000205 constant        entry                    external dcl 11
bc                              000176 constant        entry                    external dcl 11
clean_up                        002226 constant        entry                    internal dcl 237 ref 175 230
do_starname                     001135 constant        entry                    internal dcl 159 ref 128 130 144 150 152

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      2542        2622    2255        2552
Length      3062    2255        60         224     264           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
bc                                  437 external procedure  is an external procedure.  
do_starname                         190 internal procedure  is called during a stack extension, and enables or reverts conditions.  
on unit on line 175                  64 on unit               
clean_up                             64 internal procedure  is called by several nonquick procedures.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
bc                       000100 dpap                        bc
                         000102 dprint_arg_buf              bc
                         000424 dn                          bc
                         000476 en                          bc
                         000506 name                        bc
                         000516 dprint_sw                   bc
                         000517 ef_sw                       bc
                         000520 path_sw                     bc
                         000522 area_ptr                    bc
                         000524 arg_ptr                     bc
                         000526 entries_ptr                 bc
                         000530 names_ptr                   bc
                         000532 rings                       bc
                         000535 arg_count                   bc
                         000536 arg_len                     bc
                         000537 branch_count                bc
                         000540 i                           bc
                         000541 j                           bc
                         000542 queue_number                bc
                         000543 code                        bc

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_ne_as             alloc_char_temp     call_ext_out_desc   call_ext_out        call_int_this_desc  call_int_other
return_mac          enable_op           shorten_stack       ext_entry           int_entry           int_entry_desc
op_freen_

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
adjust_bit_count_             check_star_name_$entry        com_err_                      copy_seg_
cu_$arg_count                 cu_$arg_ptr                   cu_$level_get                 cv_dec_check_
dprint_                       expand_pathname_              get_system_free_area_         get_wdir_
hcs_$delentry_file            hcs_$set_ring_brackets        hcs_$star_                    hcs_$status_minf

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
bk_ss_$myname                 error_table_$badopt           error_table_$noentry          error_table_$nomatch




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000175        78 000212        80 000216        82 000224        83 000226        84 000227        86 000231
     87 000241        88 000256        90 000276        91 000311        92 000321        93 000322        94 000325
     95 000365        97 000366        98 000403        99 000427       100 000431       101 000471       103 000472
    104 000477       106 000500       107 000536       108 000537       109 000540       110 000542       112 000544
    114 000553       115 000555       116 000557       117 000561       118 000562       119 000563       120 000565
    121 000567       122 000570       123 000571       126 000574       128 000576       130 000623       131 000650
    133 000651       135 000661       136 000676       138 000703       139 000733       140 000735       141 000773
    144 000774       150 001023       152 001065       153 001130       155 001131       157 001133       159 001134
    163 001155       165 001173       166 001176       167 001201       168 001207       171 001210       173 001214
    175 001217       177 001241       179 001311       180 001314       182 001375       185 001376       187 001406
    189 001417       190 001437       191 001441       192 001445       194 001446       195 001447       198 001453
    200 001457       201 001511       202 001514       203 001573       206 001574       207 001613       210 001642
    211 001645       212 001705       213 001712       214 001732       216 002021       217 002022       219 002023
    220 002026       221 002076       225 002101       227 002133       228 002156       230 002161       231 002166
    233 002167       235 002224       237 002225       239 002233       240 002242       242 002251


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
