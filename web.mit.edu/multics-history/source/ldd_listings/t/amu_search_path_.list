	COMPILATION LISTING OF SEGMENT amu_search_path_
	Compiled by: Multics PL/I Compiler, Release 29, of July 28, 1986
	Compiled at: Honeywell Bull, Phoenix AZ, SysM
	Compiled on: 02/16/88  1410.7 mst Tue
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 amu_search_path_: proc;
        7 	return;					/* not an entry */
        8 
        9 /* format: style4,delnl,insnl,ifthenstmt,indnoniterend,ifthendo,ifthen,^thendo */
       10 
       11 dcl  P_dump_path_ptr ptr;
       12 dcl  P_object_path_ptr ptr;
       13 dcl  P_fdump_name char (*);
       14 dcl  P_code fixed bin (35);
       15 dcl  search_paths_$set entry (char (*), ptr, ptr, fixed bin (35));
       16 dcl  search_paths_$get entry (char (*), bit (36), char (*), ptr, ptr, fixed bin, ptr, fixed bin (35));
       17 dcl  cleanup condition;
       18 dcl  system_free_area area based (system_free_ptr);
       19 dcl  get_system_free_area_ entry () returns (ptr);
       20 dcl  hcs_$star_ entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr, fixed bin (35));
       21 dcl  ioa_ entry () options (variable);
       22 dcl  (
       23      error_table_$new_search_list,
       24      error_table_$action_not_performed,
       25      error_table_$nomatch,
       26      error_table_$no_search_list
       27      ) fixed bin (35) ext static;
       28 dcl  system_free_ptr ptr;
       29 dcl  com_err_ entry () options (variable);
       30 dcl  ecode fixed bin (35);
       31 dcl  sl_name char (32) init ("");
       32 dcl  my_entry_name char (32);
       33 dcl  starname char (32);
       34 dcl  not_found bit (1);
       35 dcl  path_idx fixed bin;
       36 dcl  get_dump_paths bit (1) init ("0"b);
       37 dcl  get_object_paths bit (1) init ("0"b);
       38 dcl  (addr, null, sum) builtin;
       39 
       40 
       41 
       42 amu_search_path_$get_dump_paths:
       43      entry (P_dump_path_ptr, P_code);
       44 
       45 	my_entry_name = "amu_search_path_$get_dump_paths";
       46 	get_dump_paths = "1"b;
       47 	go to dump_common;
       48 
       49 amu_search_path_$set_dump_paths:
       50      entry (P_dump_path_ptr, P_fdump_name, P_code);
       51 
       52 	my_entry_name = "amu_search_path_$set_dump_paths";
       53 	get_dump_paths = "0"b;
       54 dump_common:
       55 	sl_name = "dumps";
       56 	system_free_ptr = get_system_free_area_ ();
       57 	call search_paths_$get (sl_name, sl_control_default, "", null (), system_free_ptr, sl_info_version_1, sl_info_p,
       58 	     ecode);
       59 
       60 	if ecode = error_table_$no_search_list then do;	/* set default */
       61 	     sl_info_num_paths = 1;
       62 	     allocate sl_info in (system_free_area) set (sl_info_p);
       63 	     sl_info.version = sl_info_version_1;
       64 	     sl_info.num_paths = 1;
       65 	     sl_info.paths (1).code = 0;
       66 	     sl_info.paths (1).type = ABSOLUTE_PATH;
       67 	     sl_info.paths (1).pathname = ">dumps";
       68 
       69 	     call search_paths_$set (sl_name, null (), sl_info_p, ecode);
       70 	     if ecode ^= 0 then do;
       71 		if ecode ^= error_table_$new_search_list then do;
       72 		     P_dump_path_ptr = null ();
       73 		     P_code = ecode;
       74 		     end;
       75 		else ecode = 0;
       76 		end;
       77 	     end;
       78 
       79 	else if ecode ^= 0 then do;
       80 	      P_code = ecode;
       81 	     return;
       82 	     end;
       83 
       84 	if get_dump_paths = "1"b then do;
       85 	     P_dump_path_ptr = sl_info_p;
       86 	     P_code = ecode;
       87 	     return;
       88 	     end;
       89 
       90 	not_found = "1"b;
       91 	do path_idx = 1 to sl_info.num_paths while (not_found);
       92 	     call check_dir (sl_info.paths (path_idx).pathname, not_found);
       93 	     if ^not_found then goto FOUND_DUMP;
       94 	end;
       95 	if not_found then do;
       96 	     P_dump_path_ptr = null ();
       97 	     P_code = ecode;
       98 	     return;
       99 	     end;
      100 FOUND_DUMP:
      101 	P_dump_path_ptr = addr (sl_info.paths (path_idx).pathname);
      102 	P_code = 0;
      103 	return;
      104 
      105 amu_search_path_$get_object_paths:
      106      entry (P_object_path_ptr, P_code);
      107 
      108 	get_object_paths = "1"b;
      109 	go to object_common;
      110 
      111 amu_search_path_$set_object_paths:
      112      entry (P_object_path_ptr, P_code);
      113 
      114 	get_object_paths = "0"b;
      115 
      116 object_common:
      117 	sl_name = "hardcore";
      118 	system_free_ptr = get_system_free_area_ ();
      119 	call search_paths_$get (sl_name, sl_control_default, "", null (), system_free_ptr, sl_info_version_1, sl_info_p,
      120 	     ecode);
      121 	if ecode = error_table_$no_search_list then do;	/* set default */
      122 	     sl_info_num_paths = 1;
      123 	     allocate sl_info in (system_free_area) set (sl_info_p);
      124 	     sl_info.version = sl_info_version_1;
      125 	     sl_info.num_paths = 1;
      126 	     sl_info.paths (1).code = 0;
      127 	     sl_info.paths (1).type = ABSOLUTE_PATH;
      128 	     sl_info.paths (1).pathname = ">library_dir_dir>hardcore>execution";
      129 	     call search_paths_$set (sl_name, null (), sl_info_p, ecode);
      130 	     if ecode ^= 0 then do;
      131 		if ecode ^= error_table_$new_search_list then do;
      132 		     P_object_path_ptr = null ();
      133 		     P_code = ecode;
      134 		     end;
      135 		else ecode = 0;
      136 		end;
      137 	     end;
      138 
      139 	P_object_path_ptr = sl_info_p;
      140 	P_code = ecode;
      141 	return;
      142 
      143 
      144 check_dir:
      145      proc (check_path, not_here);
      146 dcl  check_path char (168);
      147 dcl  not_here bit (1);
      148 dcl  dirname char (168);
      149 	dirname = check_path;
      150 	starname = "*.*.0." || P_fdump_name;
      151 	star_entry_ptr = null ();
      152 	star_names_ptr = null ();
      153 
      154 	on condition (cleanup)
      155 	     begin;
      156 
      157 		if star_names_ptr ^= null () then free star_names in (system_free_area);
      158 		if star_entry_ptr ^= null () then free star_entries in (system_free_area);
      159 	     end;
      160 
      161 
      162 	call hcs_$star_ (dirname, starname, star_ALL_ENTRIES, addr (system_free_area), star_entry_count, star_entry_ptr,
      163 	     star_names_ptr, ecode);
      164 	if ecode ^= 0 then do;
      165 	     if ecode = error_table_$nomatch then do;
      166 		not_here = "1"b;
      167 		goto FREE;
      168 		end;
      169 	     else do;
      170 		not_here = "1"b;
      171 		call com_err_ (ecode, my_entry_name, "");
      172 		end;
      173 	     end;					/* found it */
      174 	not_here = "0"b;
      175 FREE:
      176 	if star_names_ptr ^= null () then free star_names in (system_free_area);
      177 	if star_entry_ptr ^= null () then free star_entries in (system_free_area);
      178 	revert condition (cleanup);
      179 	if star_entry_count > 1 then do;		/* must have only one */
      180 	     call ioa_ ("There appear to be several copies of ERF ^a in ^a", P_fdump_name, dirname);
      181 	     ecode = error_table_$action_not_performed;
      182 	     end;
      183 
      184      end check_dir;
      185 
  1     1 /* BEGIN INCLUDE FILE . . . sl_info.incl.pl1 */
  1     2 
  1     3      
  1     4 
  1     5 /****^  HISTORY COMMENTS:
  1     6*  1) change(87-11-16,Lippard), approve(87-12-21,MCR7822),
  1     7*     audit(88-02-09,Blair), install(88-02-16,MR12.2-1023):
  1     8*     Modified to add INITIATED_SEGS type.
  1     9*  2) change(87-11-19,Lippard), approve(87-12-21,MCR7822),
  1    10*     audit(88-02-09,Blair), install(88-02-16,MR12.2-1023):
  1    11*     Added uid to sl_info structure.
  1    12*                                                   END HISTORY COMMENTS */
  1    13 
  1    14 
  1    15 declare 1 sl_info	      aligned based (sl_info_p),
  1    16 	     2 version	      fixed binary,		/* Must be 1 */
  1    17 	     2 num_paths	      fixed binary,		/* Number of search paths */
  1    18 	     2 change_index_p     pointer,		/* Pointer to search list's update count */
  1    19 	     2 change_index	      fixed binary (71),	/* This search list's update count */
  1    20 	     2 pad1	      (6) bit (36),		/* Must be zero */
  1    21 	     2 paths	      (sl_info_num_paths refer (sl_info.num_paths)),
  1    22 	       3 type	      fixed binary,		/* Type of search path */
  1    23 	       3 code	      fixed binary (35),	/* Standard status code of search path */
  1    24 	       3 uid	      bit (36),		/* Unique ID */
  1    25 	       3 pathname	      char (168) unaligned;	/* Search pathname */
  1    26 
  1    27      declare sl_info_num_paths      fixed binary;
  1    28      declare sl_info_p	      pointer;
  1    29      declare sl_info_version_1      fixed binary internal static options (constant) initial (1);
  1    30 
  1    31 /* Keyword Types */
  1    32 
  1    33      declare ABSOLUTE_PATH	      fixed binary internal static options (constant) initial (0);
  1    34      declare UNEXPANDED_PATH	      fixed binary internal static options (constant) initial (1);
  1    35      declare REFERENCING_DIR	      fixed binary internal static options (constant) initial (3);
  1    36      declare WORKING_DIR	      fixed binary internal static options (constant) initial (4);
  1    37      declare PROCESS_DIR	      fixed binary internal static options (constant) initial (5);
  1    38      declare HOME_DIR	      fixed binary internal static options (constant) initial (6);
  1    39      declare INITIATED_SEGS	      fixed binary internal static options (constant) initial (7);
  1    40 
  1    41 /* END INCLUDE FILE . . . sl_info.incl.pl1 */
      186 
      187 
  2     1 /* BEGIN INCLUDE FILE . . . sl_control_s.incl.pl1 */
  2     2 
  2     3      declare 1 sl_control_s	      unaligned based (addr (sl_control)),
  2     4 	     2 af_pathname	      bit (1),		/* "1"b => expand active functions */
  2     5 	     2 pad1	      bit (1),		/* Must be zero */
  2     6 	     2 key_ref_dir	      bit (1),		/* "1"b => expand -referencing_dir keyword */
  2     7 	     2 key_work_dir	      bit (1),		/* "1"b => expand -working_dir keyword */
  2     8 	     2 key_proc_dir	      bit (1),		/* "1"b => expand -process_dir keyword */
  2     9 	     2 key_home_dir	      bit (1),		/* "1"b => expand -home_dir keyword */
  2    10 	     2 pad2	      bit (30);		/* Must be zero */
  2    11 
  2    12      declare sl_control	      bit (36);
  2    13      declare sl_control_default     bit (36) internal static options (constant) initial ("101111"b);
  2    14 
  2    15 /* END INCLUDE FILE . . . sl_control_s.incl.pl1 */
      188 
      189 
  3     1 /* BEGIN INCLUDE FILE . . . star_structures.incl.pl1 */
  3     2 
  3     3 /* This include file contains structures for the hcs_$star_,
  3     4*   hcs_$star_list_ and hcs_$star_dir_list_ entry points.
  3     5*
  3     6*   Written 23 October 1978 by Monte Davidoff.
  3     7*   Modified January 1979 by Michael R. Jordan to use unsigned and different pointers for different structures.
  3     8*   Modified June 1981 by C. Hornig to count link pathnames more efficiently.
  3     9**/
  3    10 
  3    11 /* automatic */
  3    12 
  3    13 declare  star_branch_count fixed binary;		/* hcs_$star_list_, hcs_$star_dir_list_: matching branch count */
  3    14 declare  star_entry_count fixed binary;			/* hcs_$star_: number of matching entries */
  3    15 declare  star_entry_ptr pointer;			/* hcs_$star_: pointer to array of entry information */
  3    16 declare  star_list_branch_ptr pointer;			/* hcs_$star_list_, hcs_$star_dir_list_: ptr to array of info */
  3    17 declare  star_link_count fixed binary;			/* hcs_$star_list_, hcs_$star_dir_list_: matching link count */
  3    18 declare  star_linkx fixed binary;			/* hcs_$star_list_, hcs_$star_dir_list_: index into star_links */
  3    19 declare  star_names_ptr pointer;			/* hcs_$star_: pointer to array of entry names */
  3    20 declare  star_list_names_ptr pointer;			/* hcs_$star_list_, hcs_$star_dir_list_: ptr to entry names */
  3    21 declare  star_select_sw fixed binary (3);		/* hcs_$star_list_, hcs_$star_dir_list_: what info to return */
  3    22 
  3    23 /* based */
  3    24 
  3    25 /* hcs_$star_ entry structure */
  3    26 
  3    27 declare 1 star_entries (star_entry_count) aligned based (star_entry_ptr),
  3    28         2 type fixed binary (2) unsigned unaligned,
  3    29 						/* storage system type */
  3    30         2 nnames fixed binary (16) unsigned unaligned,
  3    31 						/* number of names of entry that match star_name */
  3    32         2 nindex fixed binary (18) unsigned unaligned;
  3    33 						/* index of first name in star_names */
  3    34 
  3    35 /* hcs_$star_ name structure */
  3    36 
  3    37 declare  star_names (sum (star_entries (*).nnames)) char (32) based (star_names_ptr);
  3    38 
  3    39 /* hcs_$star_list_ branch structure */
  3    40 
  3    41 declare 1 star_list_branch (star_branch_count + star_link_count) aligned based (star_list_branch_ptr),
  3    42         2 type fixed binary (2) unsigned unaligned,
  3    43 						/* storage system type */
  3    44         2 nnames fixed binary (16) unsigned unaligned,
  3    45 						/* number of names of entry that match star_name */
  3    46         2 nindex fixed binary (18) unsigned unaligned,
  3    47 						/* index of first name in star_list_names */
  3    48         2 dtcm bit (36) unaligned,			/* date-time contents of branch were last modified */
  3    49         2 dtu bit (36) unaligned,			/* date-time branch was last used */
  3    50         2 mode bit (5) unaligned,			/* user's access mode to the branch */
  3    51         2 raw_mode bit (5) unaligned,			/* user's ACL access mode */
  3    52         2 master_dir bit (1) unaligned,			/* is branch a master directory */
  3    53         2 pad bit (7) unaligned,
  3    54         2 records fixed binary (18) unsigned unaligned;
  3    55 						/* records used by branch */
  3    56 
  3    57 /* hcs_$star_dir_list_ branch structure */
  3    58 
  3    59 declare 1 star_dir_list_branch (star_branch_count + star_link_count) aligned based (star_list_branch_ptr),
  3    60         2 type fixed binary (2) unsigned unaligned,
  3    61 						/* storage system type */
  3    62         2 nnames fixed binary (16) unsigned unaligned,
  3    63 						/* number of names of entry that match star_name */
  3    64         2 nindex fixed binary (18) unsigned unaligned,
  3    65 						/* index of first name in star_list_names */
  3    66         2 dtem bit (36) unaligned,			/* date-time directory entry of branch was last modified */
  3    67         2 pad bit (36) unaligned,
  3    68         2 mode bit (5) unaligned,			/* user's access mode to the branch */
  3    69         2 raw_mode bit (5) unaligned,			/* user's ACL access mode */
  3    70         2 master_dir bit (1) unaligned,			/* is branch a master directory */
  3    71         2 bit_count fixed binary (24) unaligned;
  3    72 						/* bit count of the branch */
  3    73 
  3    74 /* hcs_$star_list_ and hcs_$star_dir_list_ link structure */
  3    75 
  3    76 declare 1 star_links (star_branch_count + star_link_count) aligned based (star_list_branch_ptr),
  3    77         2 type fixed binary (2) unsigned unaligned,
  3    78 						/* storage system type */
  3    79         2 nnames fixed binary (16) unsigned unaligned,
  3    80 						/* number of names of entry that match star_name */
  3    81         2 nindex fixed binary (18) unsigned unaligned,
  3    82 						/* index of first name in star_list_names */
  3    83         2 dtem bit (36) unaligned,			/* date-time link was last modified */
  3    84         2 dtd bit (36) unaligned,			/* date-time the link was last dumped */
  3    85         2 pathname_len fixed binary (18) unsigned unaligned,
  3    86 						/* length of the pathname of the link */
  3    87         2 pathname_index fixed binary (18) unsigned unaligned;
  3    88 						/* index of start of pathname in star_list_names */
  3    89 
  3    90 /* hcs_$star_list_ and hcs_$star_dir_list_ name array */
  3    91 
  3    92 declare  star_list_names char (32) based (star_list_names_ptr)
  3    93 	dimension (star_links (star_branch_count + star_link_count).nindex
  3    94 	 + star_links (star_branch_count + star_link_count).nnames
  3    95 	 + divide (star_links (star_branch_count + star_link_count).pathname_len + 31, 32, 17, 0)
  3    96 	   * binary (
  3    97 	     (star_links (star_branch_count + star_link_count).type = star_LINK)
  3    98 	     & (star_select_sw >= star_LINKS_ONLY_WITH_LINK_PATHS), 1));
  3    99 
  3   100 /* hcs_$star_list_ and hcs_$star_dir_list_ link pathname */
  3   101 
  3   102 declare  star_link_pathname char (star_links (star_linkx).pathname_len)
  3   103          based (addr (star_list_names (star_links (star_linkx).pathname_index)));
  3   104 
  3   105 /* internal static */
  3   106 
  3   107 /* star_select_sw values */
  3   108 
  3   109 declare  star_LINKS_ONLY fixed binary (2) internal static options (constant) initial (1);
  3   110 declare  star_BRANCHES_ONLY fixed binary (2) internal static options (constant) initial (2);
  3   111 declare  star_ALL_ENTRIES fixed binary (2) internal static options (constant) initial (3);
  3   112 declare  star_LINKS_ONLY_WITH_LINK_PATHS
  3   113          fixed binary (3) internal static options (constant) initial (5);
  3   114 declare  star_ALL_ENTRIES_WITH_LINK_PATHS
  3   115          fixed binary (3) internal static options (constant) initial (7);
  3   116 
  3   117 /* storage system types */
  3   118 
  3   119 declare  star_LINK fixed binary (2) unsigned internal static options (constant) initial (0);
  3   120 declare  star_SEGMENT fixed binary (2) unsigned internal static options (constant) initial (1);
  3   121 declare  star_DIRECTORY fixed binary (2) unsigned internal static options (constant) initial (2);
  3   122 
  3   123 /* END INCLUDE FILE . . . star_structures.incl.pl1 */
      190 
      191 
      192 
      193      end amu_search_path_;
      194 
      195 
      196 
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    02/16/88  1409.7  amu_search_path_.pl1              >spec>install>MR12.2-1023>amu_search_path_.pl1
186          1    02/16/88  1407.4  sl_info.incl.pl1                  >spec>install>MR12.2-1023>sl_info.incl.pl1
188          2    01/09/79  1617.9  sl_control_s.incl.pl1             >ldd>include>sl_control_s.incl.pl1
190          3    06/10/82  1045.5  star_structures.incl.pl1          >ldd>include>star_structures.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
ABSOLUTE_PATH                          constant        fixed bin(17,0)          initial dcl 1-33 ref 66 127
P_code                                 parameter       fixed bin(35,0)          dcl 14 set ref 42 49 73* 80* 86* 97* 102* 105 111
                                                                                  133* 140*
P_dump_path_ptr                        parameter       pointer                  dcl 11 set ref 42 49 72* 85* 96* 100*
P_fdump_name                           parameter       char                     unaligned dcl 13 set ref 49 150 180*
P_object_path_ptr                      parameter       pointer                  dcl 12 set ref 105 111 132* 139*
addr                                                   builtin function         dcl 38 ref 100 162 162
check_path                             parameter       char(168)                unaligned dcl 146 ref 144 149
cleanup                         000000 stack reference condition                dcl 17 ref 154 178
code                     15            based           fixed bin(35,0)          array level 3 dcl 1-15 set ref 65* 126*
com_err_                        000032 constant        entry                    external dcl 29 ref 171
dirname                         000100 automatic       char(168)                unaligned dcl 148 set ref 149* 162* 180*
ecode                           000102 automatic       fixed bin(35,0)          dcl 30 set ref 57* 60 69* 70 71 73 75* 79 80 86 97
                                                                                  119* 121 129* 130 131 133 135* 140 162* 164 165
                                                                                  171* 181*
error_table_$action_not_performed
                                000024 external static fixed bin(35,0)          dcl 22 ref 181
error_table_$new_search_list    000022 external static fixed bin(35,0)          dcl 22 ref 71 131
error_table_$no_search_list     000030 external static fixed bin(35,0)          dcl 22 ref 60 121
error_table_$nomatch            000026 external static fixed bin(35,0)          dcl 22 ref 165
get_dump_paths                  000135 automatic       bit(1)                   initial unaligned dcl 36 set ref 36* 46* 53* 84
get_object_paths                000136 automatic       bit(1)                   initial unaligned dcl 37 set ref 37* 108* 114*
get_system_free_area_           000014 constant        entry                    external dcl 19 ref 56 118
hcs_$star_                      000016 constant        entry                    external dcl 20 ref 162
ioa_                            000020 constant        entry                    external dcl 21 ref 180
my_entry_name                   000113 automatic       char(32)                 unaligned dcl 32 set ref 45* 52* 171*
nnames                    0(02)        based           fixed bin(16,0)          array level 2 packed unsigned unaligned dcl 3-27 ref
                                                                                  157 175
not_found                       000133 automatic       bit(1)                   unaligned dcl 34 set ref 90* 91 92* 93 95
not_here                               parameter       bit(1)                   unaligned dcl 147 set ref 144 166* 170* 174*
null                                                   builtin function         dcl 38 ref 57 57 69 69 72 96 119 119 129 129 132 151
                                                                                  152 157 158 175 177
num_paths                 1            based           fixed bin(17,0)          level 2 dcl 1-15 set ref 62* 64* 91 123* 125*
path_idx                        000134 automatic       fixed bin(17,0)          dcl 35 set ref 91* 92* 100
pathname                 17            based           char(168)                array level 3 packed unaligned dcl 1-15 set ref 67*
                                                                                  92* 100 128*
paths                    14            based           structure                array level 2 dcl 1-15
search_paths_$get               000012 constant        entry                    external dcl 16 ref 57 119
search_paths_$set               000010 constant        entry                    external dcl 15 ref 69 129
sl_control_default              000000 constant        bit(36)                  initial unaligned dcl 2-13 set ref 57* 119*
sl_info                                based           structure                level 1 dcl 1-15 set ref 62 123
sl_info_num_paths               000137 automatic       fixed bin(17,0)          dcl 1-27 set ref 61* 62 62 122* 123 123
sl_info_p                       000140 automatic       pointer                  dcl 1-28 set ref 57* 62* 63 64 65 66 67 69* 85 91 92
                                                                                  100 119* 123* 124 125 126 127 128 129* 139
sl_info_version_1               000014 constant        fixed bin(17,0)          initial dcl 1-29 set ref 57* 63 119* 124
sl_name                         000103 automatic       char(32)                 initial unaligned dcl 31 set ref 31* 54* 57* 69*
                                                                                  116* 119* 129*
star_ALL_ENTRIES                000011 constant        fixed bin(2,0)           initial dcl 3-111 set ref 162*
star_entries                           based           structure                array level 1 dcl 3-27 ref 158 177
star_entry_count                000142 automatic       fixed bin(17,0)          dcl 3-14 set ref 157 158 162* 175 177 179
star_entry_ptr                  000144 automatic       pointer                  dcl 3-15 set ref 151* 157 158 158 162* 175 177 177
star_names                             based           char(32)                 array unaligned dcl 3-37 ref 157 175
star_names_ptr                  000146 automatic       pointer                  dcl 3-19 set ref 152* 157 157 162* 175 175
starname                        000123 automatic       char(32)                 unaligned dcl 33 set ref 150* 162*
sum                                                    builtin function         dcl 38 ref 157 175
system_free_area                       based           area(1024)               dcl 18 set ref 62 123 157 158 162 162 175 177
system_free_ptr                 000100 automatic       pointer                  dcl 28 set ref 56* 57* 62 118* 119* 123 157 158 162
                                                                                  162 175 177
type                     14            based           fixed bin(17,0)          array level 3 dcl 1-15 set ref 66* 127*
version                                based           fixed bin(17,0)          level 2 dcl 1-15 set ref 63* 124*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
HOME_DIR                               internal static fixed bin(17,0)          initial dcl 1-38
INITIATED_SEGS                         internal static fixed bin(17,0)          initial dcl 1-39
PROCESS_DIR                            internal static fixed bin(17,0)          initial dcl 1-37
REFERENCING_DIR                        internal static fixed bin(17,0)          initial dcl 1-35
UNEXPANDED_PATH                        internal static fixed bin(17,0)          initial dcl 1-34
WORKING_DIR                            internal static fixed bin(17,0)          initial dcl 1-36
sl_control                             automatic       bit(36)                  unaligned dcl 2-12
sl_control_s                           based           structure                level 1 packed unaligned dcl 2-3
star_ALL_ENTRIES_WITH_LINK_PATHS       internal static fixed bin(3,0)           initial dcl 3-114
star_BRANCHES_ONLY                     internal static fixed bin(2,0)           initial dcl 3-110
star_DIRECTORY                         internal static fixed bin(2,0)           initial unsigned dcl 3-121
star_LINK                              internal static fixed bin(2,0)           initial unsigned dcl 3-119
star_LINKS_ONLY                        internal static fixed bin(2,0)           initial dcl 3-109
star_LINKS_ONLY_WITH_LINK_PATHS        internal static fixed bin(3,0)           initial dcl 3-112
star_SEGMENT                           internal static fixed bin(2,0)           initial unsigned dcl 3-120
star_branch_count                      automatic       fixed bin(17,0)          dcl 3-13
star_dir_list_branch                   based           structure                array level 1 dcl 3-59
star_link_count                        automatic       fixed bin(17,0)          dcl 3-17
star_link_pathname                     based           char                     unaligned dcl 3-102
star_links                             based           structure                array level 1 dcl 3-76
star_linkx                             automatic       fixed bin(17,0)          dcl 3-18
star_list_branch                       based           structure                array level 1 dcl 3-41
star_list_branch_ptr                   automatic       pointer                  dcl 3-16
star_list_names                        based           char(32)                 array unaligned dcl 3-92
star_list_names_ptr                    automatic       pointer                  dcl 3-20
star_select_sw                         automatic       fixed bin(3,0)           dcl 3-21

NAMES DECLARED BY EXPLICIT CONTEXT.
FOUND_DUMP                      000432 constant        label                    dcl 100 ref 93
FREE                            001114 constant        label                    dcl 175 ref 167
amu_search_path_                000113 constant        entry                    external dcl 6
amu_search_path_$get_dump_paths 000126 constant        entry                    external dcl 42
amu_search_path_$get_object_paths
                                000444 constant        entry                    external dcl 105
amu_search_path_$set_dump_paths 000151 constant        entry                    external dcl 49
amu_search_path_$set_object_paths
                                000462 constant        entry                    external dcl 111
check_dir                       000655 constant        entry                    internal dcl 144 ref 92
dump_common                     000174 constant        label                    dcl 54 ref 47
object_common                   000474 constant        label                    dcl 116 ref 109

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1506        1542    1220        1516
Length      2020    1220        34         241     265           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
amu_search_path_                    156 external procedure  is an external procedure.  
check_dir                           164 internal procedure  enables or reverts conditions.  
on unit on line 154                  64 on unit               

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
amu_search_path_         000100 system_free_ptr             amu_search_path_
                         000102 ecode                       amu_search_path_
                         000103 sl_name                     amu_search_path_
                         000113 my_entry_name               amu_search_path_
                         000123 starname                    amu_search_path_
                         000133 not_found                   amu_search_path_
                         000134 path_idx                    amu_search_path_
                         000135 get_dump_paths              amu_search_path_
                         000136 get_object_paths            amu_search_path_
                         000137 sl_info_num_paths           amu_search_path_
                         000140 sl_info_p                   amu_search_path_
                         000142 star_entry_count            amu_search_path_
                         000144 star_entry_ptr              amu_search_path_
                         000146 star_names_ptr              amu_search_path_
check_dir                000100 dirname                     check_dir

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
alloc_char_temp     call_ext_out_desc   call_ext_out        call_int_this       return_mac          mpfx2
enable_op           shorten_stack       ext_entry           ext_entry_desc      int_entry           op_alloc_
op_freen_

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      get_system_free_area_         hcs_$star_                    ioa_
search_paths_$get             search_paths_$set

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$action_not_performed                           error_table_$new_search_list  error_table_$no_search_list
error_table_$nomatch




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     31 000103        36 000106        37 000107         6 000112         7 000121        42 000122        45 000137
     46 000142        47 000144        49 000145        52 000170        53 000173        54 000174        56 000177
     57 000206        60 000253        61 000257        62 000261        63 000272        64 000274        65 000276
     66 000277        67 000301        69 000304        70 000332        71 000334        72 000337        73 000342
     74 000344        75 000345        77 000346        79 000347        80 000351        81 000352        84 000353
     85 000356        86 000361        87 000363        90 000364        91 000366        92 000402        93 000414
     94 000417        95 000421        96 000424        97 000427        98 000431       100 000432       102 000440
    103 000441       105 000442       108 000455       109 000457       111 000460       114 000473       116 000474
    118 000477       119 000506       121 000553       122 000557       123 000561       124 000572       125 000574
    126 000576       127 000577       128 000601       129 000604       130 000632       131 000634       132 000637
    133 000642       134 000644       135 000645       139 000646       140 000651       141 000653       144 000654
    149 000662       150 000667       151 000707       152 000712       154 000713       157 000727       158 000766
    159 000776       162 000777       164 001046       165 001051       166 001054       167 001061       170 001062
    171 001067       174 001107       175 001114       177 001151       178 001160       179 001161       180 001165
    181 001213       184 001217


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
