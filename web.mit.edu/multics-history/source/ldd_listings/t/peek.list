	COMPILATION LISTING OF SEGMENT peek
	Compiled by: Multics PL/I Compiler, Release 27d, of October 11, 1982
	Compiled at: Honeywell LISD Phoenix, System M
	Compiled on: 11/15/82  1625.2 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 peek:	proc(string);
       12 
       13 /*	Modified: 1 April 1980 by PCK to add by_name_agg	*/
       14 
       15 dcl	string char(*);
       16 
       17 dcl	p ptr static,
       18 	set bit(1) aligned,
       19 	debug entry,
       20 	(index,null,ptr,substr) builtin,
       21 	pl1_stat_$root ptr ext,
       22 	cu_$arg_count entry returns(fixed bin),
       23 	cv_oct_ entry(char(*) aligned) returns(fixed bin),
       24 	n fixed bin;
       25 
  1     1 /* BEGIN INCLUDE FILE .. by_name_agg.incl.pl1 */
  1     2 
  1     3 dcl	1 by_name_agg	based aligned,
  1     4 	2 node_type	bit(9) unal,
  1     5 	2 pad		bit(26) unal,
  1     6 	2 ok_to_free	bit(1) unal,
  1     7 	2 token		ptr unal,
  1     8 	2 father		ptr unal,
  1     9 	2 left_brother	ptr unal,
  1    10 	2 right_brother	ptr unal,
  1    11 	2 son		ptr unal,
  1    12 	2 next		ptr unal;
  1    13 
  1    14 /* END INCLUDE FILE ... by_name_agg.incl.pl1 */
       26 
  2     1 /* BEGIN INCLUDE FILE ... reference.incl.pl1 */
  2     2 
  2     3 dcl	1 reference		based aligned,
  2     4 	2 node_type		bit(9) unaligned,
  2     5 	2 array_ref		bit(1) unaligned,
  2     6 	2 varying_ref		bit(1) unaligned,
  2     7 	2 shared			bit(1) unaligned,
  2     8 	2 put_data_sw		bit(1) unaligned,
  2     9 	2 processed		bit(1) unaligned,
  2    10 	2 units			fixed(3) unaligned,
  2    11 	2 ref_count		fixed(17) unaligned,
  2    12 	2 c_offset		fixed(24),
  2    13 	2 c_length		fixed(24),
  2    14 	2 symbol			ptr unaligned,
  2    15 	2 qualifier		ptr unaligned,
  2    16 	2 offset			ptr unaligned,
  2    17 	2 length			ptr unaligned,
  2    18 	2 subscript_list		ptr unaligned,
  2    19 						/* these fields are used by the 645 code generator */
  2    20 	2 address			structure unaligned,
  2    21 	  3 base			bit(3),
  2    22 	  3 offset		bit(15),
  2    23 	  3 op			bit(9),
  2    24 	  3 no_address		bit(1),
  2    25 	  3 inhibit		bit(1),
  2    26 	  3 ext_base		bit(1),
  2    27 	  3 tag			bit(6),
  2    28 	2 info			structure unaligned,
  2    29 	  3 address_in		structure,
  2    30 	    4 b			dimension(0:7) bit(1),
  2    31 	    4 storage		bit(1),
  2    32 	  3 value_in		structure,
  2    33 	    4 a			bit(1),
  2    34 	    4 q			bit(1),
  2    35 	    4 aq			bit(1),
  2    36 	    4 string_aq		bit(1),
  2    37 	    4 complex_aq		bit(1),
  2    38 	    4 decimal_aq		bit(1),
  2    39 	    4 b			dimension(0:7) bit(1),
  2    40 	    4 storage		bit(1),
  2    41 	    4 indicators		bit(1),
  2    42 	    4 x			dimension(0:7) bit(1),
  2    43 	  3 other			structure,
  2    44 	    4 big_offset		bit(1),
  2    45 	    4 big_length		bit(1),
  2    46 	    4 modword_in_offset	bit(1),
  2    47 	2 data_type		fixed(5) unaligned,
  2    48 	2 bits			structure unaligned,
  2    49 	  3 padded_ref		bit(1),
  2    50 	  3 aligned_ref		bit(1),
  2    51 	  3 long_ref		bit(1),
  2    52 	  3 forward_ref		bit(1),
  2    53 	  3 ic_ref		bit(1),
  2    54 	  3 temp_ref		bit(1),
  2    55 	  3 defined_ref		bit(1),
  2    56 	  3 evaluated		bit(1),
  2    57 	  3 allocate		bit(1),
  2    58 	  3 allocated		bit(1),
  2    59 	  3 aliasable		bit(1),
  2    60 	  3 even			bit(1),
  2    61 	  3 perm_address		bit(1),
  2    62 	  3 aggregate		bit(1),
  2    63 	  3 hit_zero		bit(1),
  2    64 	  3 dont_save		bit(1),
  2    65 	  3 fo_in_qual		bit(1),
  2    66 	  3 hard_to_load		bit(1),
  2    67 	2 relocation		bit(12) unaligned,
  2    68 	2 more_bits		structure unaligned,
  2    69 	  3 substr		bit(1),
  2    70 	  3 padded_for_store_ref	bit(1),
  2    71 	  3 aligned_for_store_ref	bit(1),
  2    72 	  3 mbz			bit(15),
  2    73 	2 store_ins		bit(18) unaligned;
  2    74 
  2    75 /* END INCLUDE FILE ... reference.incl.pl1 */
       27 
  3     1 /* BEGIN INCLUDE FILE ... operator.incl.pl1 */
  3     2 
  3     3 /*	Modified: 2 Apr 1980 by PCK to add max_number_of_operands */
  3     4 
  3     5 /* format: style3 */
  3     6 dcl	1 operator	based aligned,
  3     7 	  2 node_type	bit (9) unaligned,
  3     8 	  2 op_code	bit (9) unaligned,
  3     9 	  2 shared	bit (1) unaligned,
  3    10 	  2 processed	bit (1) unaligned,
  3    11 	  2 optimized	bit (1) unaligned,
  3    12 	  2 number	fixed (14) unaligned,
  3    13 	  2 operand	dimension (n refer (operator.number)) ptr unaligned;
  3    14 
  3    15 dcl	max_number_of_operands
  3    16 			fixed bin (15) int static options (constant) initial (32767);
  3    17 
  3    18 /* END INCLUDE FILE ... operator.incl.pl1 */
       28 
  4     1 /* BEGIN INCLUDE FILE ... symbol.incl.pl1 */
  4     2 
  4     3 dcl	1 symbol			based aligned,
  4     4 	2 node_type		bit(9) unal,
  4     5 	2 source_id		structure unal,
  4     6 	  3 file_number		bit(8),
  4     7 	  3 line_number		bit(14),
  4     8 	  3 statement_number	bit(5),
  4     9 	2 location		fixed(18) unal unsigned,
  4    10 	2 allocated		bit(1) unal,
  4    11 	2 dcl_type		bit(3) unal,
  4    12 	2 reserved		bit(6) unal,
  4    13 	2 pix			unal,
  4    14 	  3 pic_fixed		bit(1) unal,
  4    15 	  3 pic_float		bit(1) unal,
  4    16 	  3 pic_char		bit(1) unal,
  4    17 	  3 pic_scale		fixed(7) unal,
  4    18 	  3 pic_size		fixed(7) unal,
  4    19 	2 level			fixed(8) unal,
  4    20 	2 boundary		fixed(3) unal,
  4    21 	2 size_units		fixed(3) unal,
  4    22 	2 scale			fixed(7) unal,
  4    23 	2 runtime			bit(18) unal,
  4    24 	2 runtime_offset		bit(18) unal,
  4    25 	2 block_node		ptr unal,
  4    26 	2 token			ptr unal,
  4    27 	2 next			ptr unal,
  4    28 	2 multi_use		ptr unal,
  4    29 	2 cross_references		ptr unal,
  4    30 	2 initial			ptr unal,
  4    31 	2 array			ptr unal,
  4    32 	2 descriptor		ptr unal,
  4    33 	2 equivalence		ptr unal,
  4    34 	2 reference		ptr unal,
  4    35 	2 general			ptr unal,
  4    36 	2 father			ptr unal,
  4    37 	2 brother			ptr unal,
  4    38 	2 son			ptr unal,
  4    39 	2 word_size		ptr unal,
  4    40 	2 bit_size		ptr unal,
  4    41 	2 dcl_size		ptr unal,
  4    42 	2 symtab_size		ptr unal,
  4    43 	2 c_word_size		fixed(24),
  4    44 	2 c_bit_size		fixed(24),
  4    45 	2 c_dcl_size		fixed(24),
  4    46 
  4    47 	2 attributes		structure aligned,
  4    48 	  3 data_type		structure unal,
  4    49 	    4 structure		bit(1) ,
  4    50 	    4 fixed		bit(1),
  4    51 	    4 float		bit(1),
  4    52 	    4 bit			bit(1),
  4    53 	    4 char		bit(1),
  4    54 	    4 ptr			bit(1),
  4    55 	    4 offset		bit(1),
  4    56 	    4 area		bit(1),
  4    57 	    4 label		bit(1),
  4    58 	    4 entry		bit(1),
  4    59 	    4 file		bit(1),
  4    60 	    4 arg_descriptor	bit(1),
  4    61 	    4 storage_block		bit(1),
  4    62 	    4 unused_1		bit(1),
  4    63 	    4 condition		bit(1),
  4    64 	    4 format		bit(1),
  4    65 	    4 builtin		bit(1),
  4    66 	    4 generic		bit(1),
  4    67 	    4 picture		bit(1),
  4    68 
  4    69 	  3 misc_attributes		structure unal,
  4    70 	    4 dimensioned		bit(1),
  4    71 	    4 initialed		bit(1),
  4    72 	    4 aligned		bit(1),
  4    73 	    4 unaligned		bit(1),
  4    74 	    4 signed		bit(1),
  4    75 	    4 unsigned		bit(1),
  4    76 	    4 precision		bit(1),
  4    77 	    4 varying		bit(1),
  4    78 	    4 local		bit(1),
  4    79 	    4 decimal		bit(1),
  4    80 	    4 binary		bit(1),
  4    81 	    4 real		bit(1),
  4    82 	    4 complex		bit(1),
  4    83 	    4 variable		bit(1),
  4    84 	    4 reducible		bit(1),
  4    85 	    4 irreducible		bit(1),
  4    86 	    4 returns		bit(1),
  4    87 	    4 position		bit(1),
  4    88 	    4 internal		bit(1),
  4    89 	    4 external		bit(1),
  4    90 	    4 like		bit(1),
  4    91 	    4 member		bit(1),
  4    92 	    4 non_varying		bit(1),
  4    93 	    4 options		bit(1),
  4    94 	    4 variable_arg_list 	bit(1),		/* options(variable) */
  4    95 	    4 alloc_in_text		bit(1),		/* options(constant) */
  4    96 
  4    97 	  3 storage_class		structure unal,
  4    98 	    4 auto		bit(1),
  4    99 	    4 based		bit(1),
  4   100 	    4 static		bit(1),
  4   101 	    4 controlled		bit(1),
  4   102 	    4 defined		bit(1),
  4   103 	    4 parameter		bit(1),
  4   104 	    4 param_desc		bit(1),
  4   105 	    4 constant		bit(1),
  4   106 	    4 temporary		bit(1),
  4   107 	    4 return_value		bit(1),
  4   108 
  4   109 	  3 file_attributes		structure unal,
  4   110 	    4 print		bit(1),
  4   111 	    4 input		bit(1),
  4   112 	    4 output		bit(1),
  4   113 	    4 update		bit(1),
  4   114 	    4 stream		bit(1),
  4   115 	    4 reserved_1		bit(1),
  4   116 	    4 record		bit(1),
  4   117 	    4 sequential		bit(1),
  4   118 	    4 direct		bit(1),
  4   119 	    4 interactive		bit(1),		/* env(interactive) */
  4   120 	    4 reserved_2		bit(1),
  4   121 	    4 reserved_3		bit(1),
  4   122 	    4 stringvalue		bit(1),		/* env(stringvalue) */
  4   123 	    4 keyed		bit(1),
  4   124 	    4 reserved_4		bit(1),
  4   125 	    4 environment		bit(1),
  4   126 
  4   127 	  3 compiler_developed	structure unal,
  4   128 	    4 aliasable		bit(1),
  4   129 	    4 packed		bit(1),
  4   130 	    4 passed_as_arg		bit(1),
  4   131 	    4 allocate		bit(1),
  4   132 	    4 set			bit(1),
  4   133 	    4 exp_extents		bit(1),
  4   134 	    4 refer_extents		bit(1),
  4   135 	    4 star_extents		bit(1),
  4   136 	    4 isub		bit(1),
  4   137 	    4 put_in_symtab		bit(1),
  4   138 	    4 contiguous		bit(1),
  4   139 	    4 put_data		bit(1),
  4   140 	    4 overlayed		bit(1),
  4   141 	    4 error		bit(1),
  4   142 	    4 symtab_processed	bit(1),
  4   143 	    4 overlayed_by_builtin	bit(1),
  4   144 	    4 defaulted		bit(1),
  4   145 	    4 connected		bit(1);
  4   146 
  4   147 /* END INCLUDE FILE ... symbol.incl.pl1 */
       29 
  5     1 /* BEGIN INCLUDE FILE ... statement.incl.pl1 */
  5     2 
  5     3 dcl	1 statement		based aligned,
  5     4 	2 node_type		bit(9) unaligned,
  5     5 	2 source_id		structure unaligned,
  5     6 	  3 file_number		bit(8),
  5     7 	  3 line_number		bit(14),
  5     8 	  3 statement_number	bit(5),
  5     9 	2 next			ptr unaligned,
  5    10 	2 back			ptr unaligned,
  5    11 	2 root			ptr unaligned,
  5    12 	2 labels			ptr unaligned,
  5    13 	2 reference_list		ptr unaligned,
  5    14 	2 state_list		ptr unaligned,
  5    15 	2 reference_count		fixed(17) unaligned,
  5    16 	2 ref_count_copy		fixed(17) unaligned,
  5    17 	2 object			structure unaligned,
  5    18 	  3 start			fixed(17),
  5    19 	  3 finish		fixed(17),
  5    20 	2 source			structure unaligned,
  5    21 	  3 segment		fixed(11),
  5    22 	  3 start			fixed(23),
  5    23 	  3 length		fixed(11),
  5    24 	2 prefix			bit(12) unaligned,
  5    25 	2 optimized		bit(1) unaligned,
  5    26 	2 free_temps		bit(1) unaligned,
  5    27 	2 LHS_in_RHS		bit(1) unaligned,
  5    28 	2 statement_type		bit(9) unaligned,
  5    29 	2 bits			structure unaligned,
  5    30 	  3 processed		bit(1) unaligned,
  5    31 	  3 put_in_profile		bit(1) unaligned,
  5    32 	  3 generated		bit(1) unaligned,
  5    33 	  3 snap			bit(1) unaligned,
  5    34 	  3 system		bit(1) unaligned,
  5    35 	  3 irreducible		bit(1) unaligned,
  5    36 	  3 checked		bit(1) unaligned,
  5    37 	  3 save_temps		bit(1) unaligned,
  5    38 	  3 suppress_warnings	bit(1) unaligned,
  5    39 	  3 force_nonquick		bit(1) unaligned,
  5    40 	  3 expanded_by_name	bit(1) unaligned,
  5    41 	  3 pad			bit(25) unaligned;
  5    42 
  5    43 /* END INCLUDE FILE ... statement.incl.pl1 */
       30 
  6     1 dcl	1 label			based aligned,
  6     2 	2 node_type		bit(9) unaligned,
  6     3 	2 source_id		structure unaligned,
  6     4 	  3 file_number		bit(8),
  6     5 	  3 line_number		bit(14),
  6     6 	  3 statement_number	bit(5),
  6     7 	2 location		fixed(17) unaligned,
  6     8 	2 allocated		bit(1) unaligned,
  6     9 	2 dcl_type		bit(3) unaligned,
  6    10 	2 reserved		bit(29) unaligned,
  6    11 	2 array			bit(1) unaligned,
  6    12 	2 used_as_format		bit(1) unaligned,
  6    13 	2 used_in_goto		bit(1) unaligned,
  6    14 	2 symbol_table		bit(18) unaligned,
  6    15 	2 low_bound		fixed(17) unaligned,
  6    16 	2 high_bound		fixed(17) unaligned,
  6    17 	2 block_node		ptr unaligned,
  6    18 	2 token			ptr unaligned,
  6    19 	2 next			ptr unaligned,
  6    20 	2 multi_use		ptr unaligned,
  6    21 	2 cross_reference		ptr unaligned,
  6    22 	2 statement		ptr unaligned;
       31 
  7     1 /* BEGIN INCLUDE FILE ... list.incl.pl1 */
  7     2 
  7     3 /* Modified 26 June 81 by EBush to add max_list_elements */
  7     4 
  7     5 
  7     6 dcl	1 list		based aligned,
  7     7 	2 node_type	bit(9) unaligned,
  7     8 	2 reserved	bit(12) unaligned,
  7     9 	2 number		fixed(14) unaligned,
  7    10 	2 element		dimension(n refer(list.number)) ptr unaligned;
  7    11 
  7    12 dcl       max_list_elements   fixed bin(17) internal static options (constant)
  7    13 	                    init(16383);
  7    14 
  7    15 /* END INCLUDE FILE ... list.incl.pl1 */
       32 
  8     1 /* BEGIN INCLUDE FILE ... block.incl.pl1 */
  8     2 /* Modified 22 Ocober 1980 by M. N. Davidoff to increase max block.number to 511 */
  8     3 /* format: style3,idind30 */
  8     4 
  8     5 declare	1 block			aligned based,
  8     6 	  2 node_type		bit (9) unaligned,
  8     7 	  2 source_id		structure unaligned,
  8     8 	    3 file_number		bit (8),
  8     9 	    3 line_number		bit (14),
  8    10 	    3 statement_number	bit (5),
  8    11 	  2 father		ptr unaligned,
  8    12 	  2 brother		ptr unaligned,
  8    13 	  2 son			ptr unaligned,
  8    14 	  2 declaration		ptr unaligned,
  8    15 	  2 end_declaration		ptr unaligned,
  8    16 	  2 default		ptr unaligned,
  8    17 	  2 end_default		ptr unaligned,
  8    18 	  2 context		ptr unaligned,
  8    19 	  2 prologue		ptr unaligned,
  8    20 	  2 end_prologue		ptr unaligned,
  8    21 	  2 main			ptr unaligned,
  8    22 	  2 end_main		ptr unaligned,
  8    23 	  2 return_values		ptr unaligned,
  8    24 	  2 return_count		ptr unaligned,
  8    25 	  2 plio_ps		ptr unaligned,
  8    26 	  2 plio_fa		ptr unaligned,
  8    27 	  2 plio_ffsb		ptr unaligned,
  8    28 	  2 plio_ssl		ptr unaligned,
  8    29 	  2 plio_fab2		ptr unaligned,
  8    30 	  2 block_type		bit (9) unaligned,
  8    31 	  2 prefix		bit (12) unaligned,
  8    32 	  2 like_attribute		bit (1) unaligned,
  8    33 	  2 no_stack		bit (1) unaligned,
  8    34 	  2 get_data		bit (1) unaligned,
  8    35 	  2 flush_at_call		bit (1) unaligned,
  8    36 	  2 processed		bit (1) unaligned,
  8    37 	  2 text_displayed		bit (1) unaligned,
  8    38 	  2 number		fixed bin (9) unsigned unaligned,
  8    39 	  2 free_temps		dimension (3) ptr,	/* these fields are used by the code generator */
  8    40 	  2 temp_list		ptr,
  8    41 	  2 entry_list		ptr,
  8    42 	  2 o_and_s		ptr,
  8    43 	  2 why_nonquick		aligned,
  8    44 	    3 auto_adjustable_storage bit (1) unaligned,
  8    45 	    3 returns_star_extents	bit (1) unaligned,
  8    46 	    3 stack_extended_by_args	bit (1) unaligned,
  8    47 	    3 invoked_by_format	bit (1) unaligned,
  8    48 	    3 format_statement	bit (1) unaligned,
  8    49 	    3 io_statements		bit (1) unaligned,
  8    50 	    3 assigned_to_entry_var	bit (1) unaligned,
  8    51 	    3 condition_statements	bit (1) unaligned,
  8    52 	    3 no_owner		bit (1) unaligned,
  8    53 	    3 recursive_call	bit (1) unaligned,
  8    54 	    3 options_non_quick	bit (1) unaligned,
  8    55 	    3 options_variable	bit (1) unaligned,
  8    56 	    3 never_referenced	bit (1) unaligned,
  8    57 	    3 pad_nonquick		bit (5) unaligned,
  8    58 	  2 prologue_flag		bit (1) unaligned,
  8    59 	  2 options_main		bit (1) unaligned,
  8    60 	  2 pad			bit (16) unaligned,
  8    61 	  2 number_of_entries	fixed bin (17),
  8    62 	  2 level			fixed bin (17),
  8    63 	  2 last_auto_loc		fixed bin (17),
  8    64 	  2 symbol_block		fixed bin (17),
  8    65 	  2 entry_info		fixed bin (18),
  8    66 	  2 enter			structure unaligned,
  8    67 	    3 start		fixed bin (17),
  8    68 	    3 end			fixed bin (17),
  8    69 	  2 leave			structure unaligned,
  8    70 	    3 start		fixed bin (17),
  8    71 	    3 end			fixed bin (17),
  8    72 	  2 owner			ptr;
  8    73 
  8    74 declare	max_block_number		fixed bin internal static options (constant) initial (511);
  8    75 
  8    76 /* END INCLUDE FILE ... block.incl.pl1 */
       33 
  9     1 /* BEGIN INCLUDE FILE ... context.incl.pl1 */
  9     2 
  9     3 dcl	1 context			based aligned,
  9     4 	2 node_type		bit(9) unaligned,
  9     5 	2 bits			structure unaligned,
  9     6 	  3 types			structure,
  9     7 	    4 structure		bit(1),
  9     8 	    4 fixed		bit(1),
  9     9 	    4 float		bit(1),
  9    10 	    4 bit			bit(1),
  9    11 	    4 char		bit(1),
  9    12 	    4 ptr			bit(1),
  9    13 	    4 offset		bit(1),
  9    14 	    4 area		bit(1),
  9    15 	    4 label		bit(1),
  9    16 	    4 entry		bit(1),
  9    17 	    4 file		bit(1),
  9    18 	    4 arg_descriptor	bit(1),
  9    19 	    4 storage_block		bit(1),
  9    20 	    4 unused_1		bit(1),
  9    21 	    4 condition		bit(1),
  9    22 	    4 format		bit(1),
  9    23 	    4 builtin		bit(1),
  9    24 	    4 generic		bit(1),
  9    25 	    4 picture		bit(1),
  9    26 	  3 parameter		bit(1),
  9    27 	2 reserved		bit(7) unaligned,
  9    28 	2 next			ptr unaligned,
  9    29 	2 token			ptr unaligned;
  9    30 
  9    31 /* END INCLUDE FILE ... context.incl.pl1 */
       34 
 10     1 /* BEGIN INCLUDE FILE ... token.incl.pl1 */
 10     2 
 10     3 dcl	1 token			based aligned,
 10     4 	2 node_type		bit(9) unaligned,
 10     5 	2 type			bit(9) unaligned,
 10     6 	2 loc			bit(18) unaligned,	/* symtab offset for identifiers, "p" flag for constants */
 10     7 	2 declaration		ptr unaligned,
 10     8 	2 next			ptr unaligned,
 10     9 	2 size			fixed(9),
 10    10 	2 string			char(n refer(token.size));
 10    11 
 10    12 /* END INCLUDE FILE ... token.incl.pl1 */
       35 
 11     1 /* BEGIN INCLUDE FILE ... cross_reference.incl.pl1 */
 11     2 
 11     3 dcl	1 cross_reference		based aligned,
 11     4 	2 node_type		bit(9) unaligned,
 11     5 	2 source_id		structure unaligned,
 11     6 	  3 file_number		bit(8),
 11     7 	  3 line_number		bit(14),
 11     8 	  3 statement_number	bit(5),
 11     9 	2 next			ptr unaligned,
 11    10 	2 ref_type		structure unaligned,
 11    11 	  3 set_reference		bit(1),
 11    12 	  3 pad			bit(35);
 11    13 
 11    14 /* END INCLUDE FILE ... cross_reference.incl.pl1 */
       36 
 12     1 /* BEGIN INCLUDE FILE ... machine_state.incl.pl1 */
 12     2 
 12     3 dcl	cg_static_$m_s_p ptr ext static,
 12     4 	m_s_p ptr init(cg_static_$m_s_p);
 12     5 
 12     6 dcl	1 machine_state	aligned based(m_s_p),
 12     7 	2 node_type	bit(9),
 12     8 	2 indicators	fixed bin,
 12     9 	2 next		ptr unal,
 12    10 	2 a_reg,
 12    11 	  3 variable(10)	ptr unal,
 12    12 	  3 number	fixed bin(17),
 12    13 	  3 size		fixed bin(8),
 12    14 	  3 length	fixed bin(8),
 12    15 	  3 offset	fixed bin(8),
 12    16 	  3 constant	fixed bin(24),
 12    17 	  3 changed	fixed bin(18),
 12    18 	  3 instruction	bit(36),
 12    19 	  3 locked	bit(1) aligned,
 12    20 	  3 number_h_o	fixed bin,
 12    21 	  3 has_offset(3)	ptr unal,
 12    22 	2 q_reg,
 12    23 	  3 variable(10)	ptr unal,
 12    24 	  3 number	fixed bin(17),
 12    25 	  3 size		fixed bin(8),
 12    26 	  3 length	fixed bin(8),
 12    27 	  3 offset	fixed bin(8),
 12    28 	  3 constant	fixed bin(24),
 12    29 	  3 changed	fixed bin(18),
 12    30 	  3 instruction	bit(36),
 12    31 	  3 locked	bit(1) aligned,
 12    32 	  3 number_h_o	fixed bin,
 12    33 	  3 has_offset(3)	ptr unal,
 12    34 	2 string_reg,
 12    35 	  3 variable	ptr unal,
 12    36 	  3 size		fixed bin(8),
 12    37 	  3 offset	fixed bin(8),
 12    38 	2 complex_reg,
 12    39 	  3 variable	ptr unal,
 12    40 	  3 size		fixed bin(8),
 12    41 	  3 scale		fixed bin(8),
 12    42 	2 decimal_reg,
 12    43 	  3 variable	ptr unal,
 12    44 	  3 size		fixed bin(8),
 12    45 	  3 scale		fixed bin(8),
 12    46 	2 index_regs(0:7),
 12    47 	  3 variable	ptr unal,
 12    48 	  3 constant	fixed bin,
 12    49 	  3 type		fixed bin(8),
 12    50 	  3 used		fixed bin(18),
 12    51 	  3 changed	fixed bin(18),
 12    52 	  3 instruction	bit(36),
 12    53 	  3 filler	fixed bin,
 12    54 	2 base_regs(0:7),
 12    55 	  3 variable	ptr unal,
 12    56 	  3 constant	fixed bin,
 12    57 	  3 type		fixed bin(8),
 12    58 	  3 pad (12)	fixed bin,	/* future...room to make 5 element array for variable, constant, type */
 12    59 	  3 number	fixed bin (17),	/* future...number of valid elements in array */
 12    60 	  3 used		fixed bin(18),
 12    61 	  3 changed	fixed bin(18),
 12    62 	  3 instruction	bit(36),
 12    63 	  3 locked	fixed bin(2),
 12    64 	2 indicators_ref(2:3) ptr unal;
 12    65 
 12    66 /* Permissible values for machine_state.indicators. */
 12    67 
 12    68 dcl (	ind_known_refs	init (-2),		/* set by comparison of known, nonzero, references */
 12    69 	ind_invalid	init (-1),
 12    70 	ind_string_aq	init (0),			/* logical value in storage */
 12    71 	ind_logical	init (1),			/* logical value in A or AQ */
 12    72 	ind_arithmetic	init (2),			/* arith value in Q, AQ, or EAQ */
 12    73 	ind_x (0:7)	init (6, 7, 8, 9, 10, 11, 12, 13),
 12    74 	ind_decimal_reg	init (14)
 12    75 	) fixed bin internal static options (constant);
 12    76 
 12    77 /* END INCLUDE FILE ... machine_state.incl.pl1 */
       37 
 13     1 /* BEGIN INCLUDE FILE ... temporary.incl.pl1 */
 13     2 
 13     3 dcl	1 temporary	based,
 13     4 	2 node_type	bit(9),	/* type is "000001010"b */
 13     5 	2 size		fixed bin(18),
 13     6 	2 next		ptr,
 13     7 	2 location	fixed bin(18),
 13     8 	2 ref_count	fixed bin,
 13     9 	2 symbol		ptr unal,
 13    10 	2 last_freed	fixed bin(18);
 13    11 
 13    12 /* END INCLUDE FILE ... temporary.incl.pl1 */
       38 
 14     1 dcl	1 array			based aligned,
 14     2 	2 node_type		bit(9) unaligned,
 14     3 	2 reserved		bit(34) unaligned,
 14     4 	2 number_of_dimensions	fixed(7) unaligned,
 14     5 	2 own_number_of_dimensions	fixed(7) unaligned,
 14     6 	2 element_boundary		fixed(3) unaligned,
 14     7 	2 size_units		fixed(3) unaligned,
 14     8 	2 offset_units		fixed(3) unaligned,
 14     9 	2 interleaved		bit(1) unaligned,
 14    10 	2 c_element_size		fixed(24),
 14    11 	2 c_element_size_bits	fixed(24),
 14    12 	2 c_virtual_origin		fixed(24),
 14    13 	2 element_size		ptr unaligned,
 14    14 	2 element_size_bits		ptr unaligned,
 14    15 	2 virtual_origin		ptr unaligned,
 14    16 	2 symtab_virtual_origin	ptr unaligned,
 14    17 	2 symtab_element_size	ptr unaligned,
 14    18 	2 bounds			ptr unaligned,
 14    19 	2 element_descriptor	ptr unaligned;
 14    20 
 14    21 dcl	1 bound			based aligned,
 14    22 	2 node_type		bit(9),
 14    23 	2 c_lower			fixed(24),
 14    24 	2 c_upper			fixed(24),
 14    25 	2 c_multiplier		fixed(24),
 14    26 	2 c_desc_multiplier		fixed(24),
 14    27 	2 lower			ptr unaligned,
 14    28 	2 upper			ptr unaligned,
 14    29 	2 multiplier		ptr unaligned,
 14    30 	2 desc_multiplier		ptr unaligned,
 14    31 	2 symtab_lower		ptr unaligned,
 14    32 	2 symtab_upper		ptr unaligned,
 14    33 	2 symtab_multiplier		ptr unaligned,
 14    34 	2 next			ptr unaligned;
       39 
 15     1 
 15     2 dcl	1 default			based aligned,
 15     3 	2 node_type		bit(9) unaligned,
 15     4 	2 source_id		structure unaligned,
 15     5 	  3 file_number		bit(8),
 15     6 	  3 line_number		bit(14),
 15     7 	  3 statement_number	bit(5),
 15     8 	2 next			ptr unaligned,
 15     9 	2 predicate		ptr unaligned,
 15    10 	2 symbol			ptr unaligned,
 15    11 	2 system			bit(1) unaligned,
 15    12 	2 error			bit(1) unaligned,
 15    13 	2 no_defaults		bit(1) unaligned,
 15    14 	2 reserved		bit(29) unaligned;
       40 
 16     1 dcl	1 sf_par		based,
 16     2 	2 type		bit(9),
 16     3 	2 parnum		fixed bin(9),
 16     4 	2 parsym		ptr;
       41 
 17     1 /*special overlay definitions for list nodes used to save data list info*/
 17     2 dcl 1 data_list based,
 17     3     2 node_type bit (9) unaligned,
 17     4     2 reserved bit (12) unaligned,
 17     5     2 number fixed bin (14) unaligned,
 17     6     2 next ptr unaligned, /*next node for list*/
 17     7     2 symbol ptr unaligned, /*symbol table node*/
 17     8     2 index_ptr ptr unaligned, /*index node for beginning of implied do range*/
 17     9     2 sub_ptr ptr unaligned, /*subscript node for subscripting information*/
 17    10     2 condition bit (1) aligned; /*on if illegal action occurred*/
 17    11 
 17    12 dcl 1 subscripts based,
 17    13     2 node_type bit (9) unaligned,
 17    14     2 reserved bit (12) unaligned,
 17    15     2 number fixed bin (14) unaligned,
 17    16     2 next ptr unaligned,      /*ptr to next subscript -left to right*/
 17    17     2 value fixed bin (31), /*value of constant subscript or do nest level*/
 17    18     2 variable ptr unaligned;   /*ptr to token if subscript was a variable*/
 17    19 
 17    20 dcl 1 indices based,
 17    21     2 node_type bit (9) unaligned,
 17    22     2 reserved bit (12) unaligned,
 17    23     2 number fixed bin (14) unaligned,
 17    24     2 next ptr unaligned,   /*ptr to inner do*/
 17    25     2 end_ptr ptr unaligned,  /*ptr to last node in do range*/
 17    26     2 value(3) fixed bin (31);  /*initial, final, and incremental do values*/
 17    27 
 17    28 /*special constant data_list node for use during type statement processing*/
 17    29 dcl 1 dummy_list internal static,
 17    30     2 node_type bit (9) unaligned initial ("000001011"b),
 17    31     2 reserved bit (12) unaligned,
 17    32     2 number fixed bin (14) unaligned initial (5),
 17    33     2 next ptr unaligned,
 17    34     2 symbol ptr unaligned,
 17    35     2 index_ptr ptr unaligned initial (null),
 17    36     2 sub_ptr ptr unaligned initial (null),
 17    37     2 condition bit (1) aligned initial ("0"b);
 17    38 
       42 
       43 
       44 	set = "0"b;
       45 
       46 join:	if cu_$arg_count() = 0 then p = null;
       47 	else do;
       48 	     n = index(string,"|");
       49 	     if n = 0 then p = ptr(pl1_stat_$root,cv_oct_((string)));
       50 	     else p = ptr(baseptr(cv_oct_(substr(string,1,n-1))),cv_oct_(substr(string,n+1)));
       51 	     end;
       52 
       53 	if ^ set then call debug;
       54 
       55 	return;
       56 
       57 l:	p -> reference.symbol,
       58 	p -> symbol.reference,
       59 	p -> operator.operand(1),
       60 	p -> block.son,
       61 	p -> token.next,
       62 	p -> temporary.next,
       63 	p -> context.next,
       64 	p -> label.next,
       65 	p -> cross_reference.next,
       66 	p -> list.element(1),
       67 	p -> machine_state.next,
       68 	p -> array.bounds,
       69 	p -> bound.lower,
       70 	p -> default.next,
       71 	p -> sf_par.parsym,
       72 	p -> data_list.next,
       73 	p -> by_name_agg.next,
       74 	p -> statement.root = p;
       75 	return;
       76 
       77 peek$set: entry(string);
       78 
       79 	set = "1"b;
       80 	goto join;
       81 
       82 	end;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/15/82  1503.5  peek.pl1                          >dumps>old>recomp>peek.pl1
26           1    07/21/80  1546.3  by_name_agg.incl.pl1              >ldd>include>by_name_agg.incl.pl1
27           2    07/21/80  1546.3  reference.incl.pl1                >ldd>include>reference.incl.pl1
28           3    07/21/80  1546.3  operator.incl.pl1                 >ldd>include>operator.incl.pl1
29           4    07/21/80  1546.3  symbol.incl.pl1                   >ldd>include>symbol.incl.pl1
30           5    07/21/80  1546.3  statement.incl.pl1                >ldd>include>statement.incl.pl1
31           6    05/06/74  1742.1  label.incl.pl1                    >ldd>include>label.incl.pl1
32           7    08/13/81  2211.5  list.incl.pl1                     >ldd>include>list.incl.pl1
33           8    08/13/81  2043.5  block.incl.pl1                    >ldd>include>block.incl.pl1
34           9    11/30/78  1227.4  context.incl.pl1                  >ldd>include>context.incl.pl1
35          10    09/14/77  1705.7  token.incl.pl1                    >ldd>include>token.incl.pl1
36          11    10/25/79  1645.8  cross_reference.incl.pl1          >ldd>include>cross_reference.incl.pl1
37          12    11/13/79  1015.8  machine_state.incl.pl1            >ldd>include>machine_state.incl.pl1
38          13    11/30/78  1227.4  temporary.incl.pl1                >ldd>include>temporary.incl.pl1
39          14    05/06/74  1741.6  array.incl.pl1                    >ldd>include>array.incl.pl1
40          15    05/06/74  1742.2  default.incl.pl1                  >ldd>include>default.incl.pl1
41          16    05/06/74  1743.6  sf_par.incl.pl1                   >ldd>include>sf_par.incl.pl1
42          17    05/06/74  1741.2  fdata_nodes.incl.pl1              >ldd>include>fdata_nodes.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
array                                  based           structure                level 1 dcl 14-1
block                                  based           structure                level 1 dcl 8-5
bound                                  based           structure                level 1 dcl 14-21
bounds                   12            based           pointer                  level 2 packed unaligned dcl 14-1 set ref 57*
by_name_agg                            based           structure                level 1 dcl 1-3
cg_static_$m_s_p                000022 external static pointer                  dcl 12-3 ref 12-3
context                                based           structure                level 1 dcl 9-3
cross_reference                        based           structure                level 1 dcl 11-3
cu_$arg_count                   000016 constant        entry                    external dcl 17 ref 46
cv_oct_                         000020 constant        entry                    external dcl 17 ref 49 50 50
data_list                              based           structure                level 1 unaligned dcl 17-2
debug                           000012 constant        entry                    external dcl 17 ref 53
default                                based           structure                level 1 dcl 15-2
element                   1            based           pointer                  array level 2 packed unaligned dcl 7-6 set ref 57*
index                                                  builtin function         dcl 17 ref 48
label                                  based           structure                level 1 dcl 6-1
list                                   based           structure                level 1 dcl 7-6
lower                     5            based           pointer                  level 2 packed unaligned dcl 14-21 set ref 57*
m_s_p                           000102 automatic       pointer                  initial dcl 12-3 set ref 12-3*
machine_state                          based           structure                level 1 dcl 12-6
n                               000101 automatic       fixed bin(17,0)          dcl 17 set ref 48* 49 50 50 50 50
next                      6            based           pointer                  level 2 in structure "by_name_agg" packed unaligned
                                                                                  dcl 1-3 in procedure "peek" set ref 57*
next                      2            based           pointer                  level 2 in structure "temporary" dcl 13-3
                                                                                  in procedure "peek" set ref 57*
next                      2            based           pointer                  level 2 in structure "token" packed unaligned
                                                                                  dcl 10-3 in procedure "peek" set ref 57*
next                      1            based           pointer                  level 2 in structure "context" packed unaligned
                                                                                  dcl 9-3 in procedure "peek" set ref 57*
next                      1            based           pointer                  level 2 in structure "default" packed unaligned
                                                                                  dcl 15-2 in procedure "peek" set ref 57*
next                      1            based           pointer                  level 2 in structure "data_list" packed unaligned
                                                                                  dcl 17-2 in procedure "peek" set ref 57*
next                      2            based           pointer                  level 2 in structure "machine_state" packed
                                                                                  unaligned dcl 12-6 in procedure "peek" set ref 57*
next                      1            based           pointer                  level 2 in structure "cross_reference" packed
                                                                                  unaligned dcl 11-3 in procedure "peek" set ref 57*
next                      6            based           pointer                  level 2 in structure "label" packed unaligned
                                                                                  dcl 6-1 in procedure "peek" set ref 57*
null                                                   builtin function         dcl 17 ref 46
operand                   1            based           pointer                  array level 2 packed unaligned dcl 3-6 set ref 57*
operator                               based           structure                level 1 dcl 3-6
p                               000010 internal static pointer                  dcl 17 set ref 46* 49* 50* 57 57 57 57 57 57 57 57
                                                                                  57 57 57 57 57 57 57 57 57 57 57
parsym                    2            based           pointer                  level 2 dcl 16-1 set ref 57*
pl1_stat_$root                  000014 external static pointer                  dcl 17 ref 49
ptr                                                    builtin function         dcl 17 ref 49 50
reference                15            based           pointer                  level 2 in structure "symbol" packed unaligned
                                                                                  dcl 4-3 in procedure "peek" set ref 57*
reference                              based           structure                level 1 dcl 2-3 in procedure "peek"
root                      3            based           pointer                  level 2 packed unaligned dcl 5-3 set ref 57*
set                             000100 automatic       bit(1)                   dcl 17 set ref 44* 53 79*
sf_par                                 based           structure                level 1 unaligned dcl 16-1
son                       3            based           pointer                  level 2 packed unaligned dcl 8-5 set ref 57*
statement                              based           structure                level 1 dcl 5-3
string                                 parameter       char                     unaligned dcl 15 ref 11 48 49 50 50 50 50 77
substr                                                 builtin function         dcl 17 ref 50 50 50 50
symbol                    3            based           pointer                  level 2 in structure "reference" packed unaligned
                                                                                  dcl 2-3 in procedure "peek" set ref 57*
symbol                                 based           structure                level 1 dcl 4-3 in procedure "peek"
temporary                              based           structure                level 1 unaligned dcl 13-3
token                                  based           structure                level 1 dcl 10-3

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
dummy_list                             internal static structure                level 1 unaligned dcl 17-29
ind_arithmetic                         internal static fixed bin(17,0)          initial dcl 12-68
ind_decimal_reg                        internal static fixed bin(17,0)          initial dcl 12-68
ind_invalid                            internal static fixed bin(17,0)          initial dcl 12-68
ind_known_refs                         internal static fixed bin(17,0)          initial dcl 12-68
ind_logical                            internal static fixed bin(17,0)          initial dcl 12-68
ind_string_aq                          internal static fixed bin(17,0)          initial dcl 12-68
ind_x                                  internal static fixed bin(17,0)          initial array dcl 12-68
indices                                based           structure                level 1 unaligned dcl 17-20
max_block_number                       internal static fixed bin(17,0)          initial dcl 8-74
max_list_elements                      internal static fixed bin(17,0)          initial dcl 7-12
max_number_of_operands                 internal static fixed bin(15,0)          initial dcl 3-15
subscripts                             based           structure                level 1 unaligned dcl 17-12

NAMES DECLARED BY EXPLICIT CONTEXT.
join                            000035 constant        label                    dcl 46 ref 80
l                               000221 constant        label                    dcl 57
peek                            000020 constant        entry                    external dcl 11
peek$set                        000251 constant        entry                    external dcl 77

NAME DECLARED BY CONTEXT OR IMPLICATION.
baseptr                                                builtin function         ref 50

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       366         412     270         376
Length      1074     270        24         446      76           2

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
peek                                 91 external procedure  is an external procedure.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 p                           peek

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
peek                     000100 set                         peek
                         000101 n                           peek
                         000102 m_s_p                       peek

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
alloc_cs            call_ext_out_desc   call_ext_out        return              shorten_stack       ext_entry_desc

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
cu_$arg_count                 cv_oct_                       debug

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
cg_static_$m_s_p              pl1_stat_$root




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
12    3 000007        11 000015        44 000034        46 000035        48 000052        49 000066        50 000122
     51 000211        53 000212        55 000220        57 000221        75 000246        77 000247        79 000265
     80 000267


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
