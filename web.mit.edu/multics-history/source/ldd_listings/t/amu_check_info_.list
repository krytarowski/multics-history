	COMPILATION LISTING OF SEGMENT amu_check_info_
	Compiled by: Multics PL/I Compiler, Release 28d, of October 4, 1983
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 11/19/84  1135.2 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 amu_check_info_: proc (P_amu_info_ptr);
        7 
        8 /* format: style4,delnl,insnl,ifthenstmt,indnoniterend,ifthendo,ifthen,^thendo */
        9 
       10 /* Minor procedure used to validate an amu_info */
       11 
       12 dcl  P_amu_info_ptr pointer parameter;
       13 
       14 dcl  amu_error_ entry options (variable);
       15 
       16 dcl  (null, substr, unspec) builtin;
       17 
       18 
       19 
       20 	call ck_amu;
       21 	return;					/* nothing appears wrong */
       22 
       23 
       24 
       25 amu_check_info_$hard:
       26      entry (P_amu_info_ptr);
       27 	call ck_amu;
       28 	call ck_hard;
       29 
       30 	return;					/* nothing appears wrong */
       31 
       32 ERROR_RET:					/* somting was wrong and the error was printed */
       33 	return;
       34 
       35 
       36 ck_amu:
       37      proc;
       38 	if substr (unspec (P_amu_info_ptr), 31, 6) ^= "43"b3 then do;
       39 	     call amu_error_ ((null ()), 0, "amu_check_info_: Invalid amu_info pointer: ^w ^w",
       40 		substr (unspec (P_amu_info_ptr), 1, 36), substr (unspec (P_amu_info_ptr), 37, 36));
       41 	     goto ERROR_RET;
       42 	     end;
       43 	amu_info_ptr = P_amu_info_ptr;
       44 	if amu_info_ptr = null () then do;
       45 	     call amu_error_ (amu_info_ptr, 0, "amu_check_info_: Null amu_info pointer.");
       46 	     goto ERROR_RET;
       47 	     end;
       48 	if amu_info.version ^= AMU_INFO_VERSION_2 then do;
       49 	     call amu_error_ (amu_info_ptr, 0, "amu_check_info_: Invalid amu_info version ""^8a"" at ^p.",
       50 		amu_info.version, amu_info_ptr);
       51 
       52 	     goto ERROR_RET;
       53 	     end;
       54      end ck_amu;
       55 
       56 
       57 
       58 ck_hard:
       59      proc;
       60 	if substr (unspec (hardcore_info_ptr), 31, 6) ^= "43"b3 then do;
       61 	     call amu_error_ ((null ()), 0, "amu_check_info_: Invalid hardcore_info pointer: ^w ^w",
       62 		substr (unspec (hardcore_info_ptr), 1, 36), substr (unspec (hardcore_info_ptr), 37, 36));
       63 	     goto ERROR_RET;
       64 
       65 	     end;
       66 
       67 
       68 	if hardcore_info_ptr = null () then do;
       69 	     call amu_error_ (hardcore_info_ptr, 0, "amu_check_info_: Null hardcore_info pointer.");
       70 
       71 	     goto ERROR_RET;
       72 	     end;
       73 
       74      end ck_hard;
       75 
  1     1 /*	BEGIN INCLUDE FILE amu_info.incl.pl1		*/
  1     2 
  1     3 dcl 1 amu_info aligned based (amu_info_ptr),
  1     4     2 version char (8) aligned,			/* AMU_INFO_VERSION */
  1     5     2 flags aligned,
  1     6       3 early_dump bit(1) unal,
  1     7       3 pad  bit(35) unal,
  1     8     2 type fixed bin unal,				/* One of the types below */
  1     9     2 time_created fixed bin (71) aligned,		/* time created -- for debugging purposes */
  1    10     2 chain,					/* a chain of all the amu_info's which exist */
  1    11       3 prev pointer unaligned,
  1    12       3 next pointer unaligned,
  1    13 
  1    14     2 area_ptr pointer,				/* pointer to area used for allocating things */
  1    15 
  1    16     2 translation_table_ptr pointer,			/* pointer to address map -- always present */
  1    17 						/*   SEE: amu_translation.incl.pl1 */
  1    18     2 fdump_info_ptr pointer, 			
  1    19 						/* pointer to FDUMP info, present if looking at an FDUMP */
  1    20 						/*   SEE: amu_fdump_info.incl.pl1 */
  1    21 						/* old_uid_table pointer if looking at a SAVED PROC. */
  1    22 						/* See: amu_old_uid_table			*/
  1    23 	
  1    24 
  1    25     2 hardcore_info_ptr pointer,			/* pointer to hardcore information -- always present */
  1    26 						/*   SEE: amu_hardcore_info.incl.pl1 */
  1    27     2 copy_chain pointer,				/* pointer to info about segment copies */
  1    28 						/*   SEE: amu_copy_info.incl.pl1 */
  1    29     2 process_info_ptr pointer,			/* pointer to process info for this translation */
  1    30 						/*   SEE: amu_process_info.incl.pl1 */
  1    31     2 process_idx fixed bin,				/* index of process in translation-specifc process table */
  1    32 
  1    33     2 proc_idx_hold fixed bin,			/* a place to keep the index when a changing to another proc */
  1    34 
  1    35     2 error_info,					/* various info about how amu_error_ is to behave */
  1    36       3 error_flags aligned,
  1    37         4 handler_exists bit (1) unaligned,		/* set to indicate existence of an amu_error handler */
  1    38         4 in_subsystem bit (1) unaligned,		/* This amu_info belongs to an ssu_ maintained subsystem */
  1    39         4 pad bit (34) unaligned,
  1    40       3 sci_ptr pointer,				/* sci_ptr for subsystem, if in_subsystem = "1"b */
  1    41     2 definitions_info_ptr ptr;
  1    42 
  1    43 dcl  amu_area area based (amu_info.area_ptr);
  1    44 
  1    45 dcl  amu_info_ptr pointer;
  1    46 
  1    47 dcl (FDUMP_TYPE		init (1037),		/* the various legitimate types of amu_info's */
  1    48      FDUMP_PROCESS_TYPE	init (1038),
  1    49      ONLINE_TYPE		init (1039),
  1    50      ONLINE_PROCESS_TYPE	init (1040),
  1    51      NETWORK_FDUMP_TYPE	init (1041),
  1    52      NETWORK_ONLINE_TYPE	init (1042),
  1    53      SAVED_PROC_TYPE	init (1043),
  1    54      INDIRECT_TYPE		init (1044)) fixed bin internal static options (constant);
  1    55 
  1    56 dcl  AMU_INFO_VERSION_1 char (8) internal static options (constant) init ("amu_v1");
  1    57 dcl  AMU_INFO_VERSION char (8) internal static options (constant) init ("amu_v1");
  1    58 dcl  AMU_INFO_VERSION_2 char (8) internal static options (constant) init ("amu_v2");
  1    59 
  1    60 dcl  PDIR_SUFFIX		char(4) init("pdir") int static options(constant);
  1    61 
  1    62 /*	END INCLUDE FILE amu_info.incl.pl1		*/
       76 
       77      end amu_check_info_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/15/84  1445.3  amu_check_info_.pl1               >special_ldd>online>6897-11/15/84>amu_check_info_.pl1
76           1    11/15/84  1524.3  amu_info.incl.pl1                 >special_ldd>online>6897-11/15/84>amu_info.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
AMU_INFO_VERSION_2              000000 constant        char(8)                  initial unaligned dcl 1-58 ref 48
P_amu_info_ptr                         parameter       pointer                  dcl 12 ref 6 25 38 39 39 39 39 43
amu_error_                      000010 constant        entry                    external dcl 14 ref 39 45 49 61 69
amu_info                               based           structure                level 1 dcl 1-3
amu_info_ptr                    000100 automatic       pointer                  dcl 1-45 set ref 43* 44 45* 48 49* 49 49* 60 61 61
                                                                                  61 61 68 69
hardcore_info_ptr        16            based           pointer                  level 2 dcl 1-3 set ref 60 61 61 61 61 68 69*
null                                                   builtin function         dcl 16 ref 39 44 61 68
substr                                                 builtin function         dcl 16 ref 38 39 39 39 39 60 61 61 61 61
unspec                                                 builtin function         dcl 16 ref 38 39 39 39 39 60 61 61 61 61
version                                based           char(8)                  level 2 dcl 1-3 set ref 48 49*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
AMU_INFO_VERSION                       internal static char(8)                  initial unaligned dcl 1-57
AMU_INFO_VERSION_1                     internal static char(8)                  initial unaligned dcl 1-56
FDUMP_PROCESS_TYPE                     internal static fixed bin(17,0)          initial dcl 1-47
FDUMP_TYPE                             internal static fixed bin(17,0)          initial dcl 1-47
INDIRECT_TYPE                          internal static fixed bin(17,0)          initial dcl 1-47
NETWORK_FDUMP_TYPE                     internal static fixed bin(17,0)          initial dcl 1-47
NETWORK_ONLINE_TYPE                    internal static fixed bin(17,0)          initial dcl 1-47
ONLINE_PROCESS_TYPE                    internal static fixed bin(17,0)          initial dcl 1-47
ONLINE_TYPE                            internal static fixed bin(17,0)          initial dcl 1-47
PDIR_SUFFIX                            internal static char(4)                  initial unaligned dcl 1-60
SAVED_PROC_TYPE                        internal static fixed bin(17,0)          initial dcl 1-47
amu_area                               based           area(1024)               dcl 1-43

NAMES DECLARED BY EXPLICIT CONTEXT.
ERROR_RET                       000137 constant        label                    dcl 32 ref 41 46 52 63 71
amu_check_info_                 000116 constant        entry                    external dcl 6
amu_check_info_$hard            000127 constant        entry                    external dcl 25
ck_amu                          000140 constant        entry                    internal dcl 36 ref 20 27
ck_hard                         000311 constant        entry                    internal dcl 58 ref 28

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       466         500     415         476
Length       674     415        12         160      51           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
amu_check_info_                     182 external procedure  is an external procedure.  
ck_amu                                  internal procedure  shares stack frame of external procedure amu_check_info_.  
ck_hard                                 internal procedure  shares stack frame of external procedure amu_check_info_.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
amu_check_info_          000100 amu_info_ptr                amu_check_info_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   return              ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
amu_error_

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
      6 000113        20 000123        21 000124        25 000125        27 000134        28 000135        30 000136
     32 000137        36 000140        38 000141        39 000146        41 000211        43 000212        44 000215
     45 000221        46 000246        48 000247        49 000253        52 000307        54 000310        58 000311
     60 000312        61 000317        63 000361        68 000362        69 000366        71 000413        74 000414


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
