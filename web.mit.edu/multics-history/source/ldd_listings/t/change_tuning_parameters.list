	COMPILATION LISTING OF SEGMENT change_tuning_parameters
	Compiled by: Multics PL/I Compiler, Release 27d, of October 11, 1982
	Compiled at: Honeywell LISD Phoenix, System M
	Compiled on: 11/15/82  1744.4 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 change_tuning_parameters:
       12 change_tuning_parameter:
       13 ctp:
       14 
       15 	procedure () options (variable);
       16 
       17 /* Completely rewritten, for hc_tune, 27 June 1981, W. Olin Sibert */
       18 
       19 dcl  argno fixed bin;
       20 dcl  nargs fixed bin;
       21 dcl  al fixed bin (21);
       22 dcl  ap pointer;
       23 dcl  arg char (al) based (ap);
       24 dcl  code fixed bin (35);
       25 
       26 dcl  tp_type fixed bin;
       27 dcl  tp_value bit (36) aligned;
       28 dcl  tp_name char (32);
       29 
       30 dcl  have_name bit (1) aligned;
       31 dcl  silent_sw bit (1) aligned;
       32 dcl  gate_name char (32);
       33 dcl  set_entry variable entry (char (*), bit (36) aligned, bit (36) aligned, pointer, char (*), fixed bin (35));
       34 dcl  requested_value char (64);
       35 dcl  answer char (4) varying;
       36 
       37 dcl  com_err_ entry options (variable);
       38 dcl  command_query_ entry options (variable);
       39 dcl  cu_$arg_count entry (fixed bin, fixed bin (35));
       40 dcl  cu_$arg_ptr entry (fixed bin, pointer, fixed bin (21), fixed bin (35));
       41 dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
       42 dcl  cv_float_ entry (char (*), fixed bin (35)) returns (float bin (27));
       43 dcl  cv_oct_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
       44 dcl  metering_gate_$get_tuning_parameter entry
       45     (char (*), fixed bin, bit (36) aligned, pointer, char (*), char (*), fixed bin (35));
       46 dcl  hphcs_$set_tuning_parameter entry
       47     (char (*), bit (36) aligned, bit (36) aligned, pointer, char (*), fixed bin (35));
       48 dcl  initializer_gate_$set_tuning_parameter entry
       49     (char (*), bit (36) aligned, bit (36) aligned, pointer, char (*), fixed bin (35));
       50 
       51 dcl  error_table_$badopt fixed bin (35) external static;
       52 dcl  error_table_$noarg fixed bin (35) external static;
       53 dcl  error_table_$odd_no_of_args fixed bin (35) external static;
       54 
       55 dcl  WHOAMI char (32) internal static options (constant) init ("change_tuning_parameters");
       56 
       57 dcl  linkage_error condition;
       58 
       59 dcl (addr, bit, char, decimal, float, length, maxlength, null, round, rtrim, unspec) builtin;
       60 
       61 /*  */
       62 
       63 	call cu_$arg_count (nargs, code);
       64 	if code ^= 0 then do;
       65 	     call com_err_ (code, WHOAMI);
       66 MAIN_RETURN:   return;
       67 	     end;
       68 
       69 	silent_sw = "0"b;
       70 	have_name = "0"b;
       71 
       72 	do argno = 1 to nargs;
       73 	     call cu_$arg_ptr (argno, ap, al, (0));
       74 
       75 	     if (arg = "-silent") then silent_sw = "1"b;
       76 
       77 	     else if (char (arg, 1) = "-") then do;
       78 		call com_err_ (error_table_$badopt, WHOAMI, "^a", arg);
       79 		goto MAIN_RETURN;
       80 		end;
       81 
       82 	     else do;
       83 		if argno = nargs then do;
       84 		     call com_err_ (error_table_$odd_no_of_args, WHOAMI, "Value missing after ^a", arg);
       85 		     goto MAIN_RETURN;
       86 		     end;
       87 
       88 		argno = argno + 1;			     /* Skip value argument */
       89 		have_name = "1"b;
       90 		end;
       91 	     end;
       92 
       93 	if ^have_name then do;
       94 	     call com_err_ (error_table_$noarg, WHOAMI,
       95 		"^/Usage:^-^a Name1 Value1 {... NameN ValueN} {-control_args}", WHOAMI);
       96 	     goto MAIN_RETURN;
       97 	     end;
       98 
       99 
      100 /* Now, see if we have all the access we will need to accomplish this operation */
      101 
      102 	if silent_sw then gate_name = "initializer_gate_"; /* Print the right name */
      103 	else gate_name = "hphcs_";
      104 
      105 	on condition (linkage_error) begin;
      106 	     call com_err_ (0, WHOAMI, "This procedure requires access to metering_gate_ and ^a.", gate_name);
      107 	     goto MAIN_RETURN;
      108 	     end;
      109 
      110 	if silent_sw then set_entry = initializer_gate_$set_tuning_parameter;
      111 	else set_entry = hphcs_$set_tuning_parameter;
      112 
      113 	call metering_gate_$get_tuning_parameter ("tefirst", (0), (""b), (null ()), (""), (""), (0));
      114 						/* This call is just to see if we have access */
      115 	revert condition (linkage_error);
      116 
      117 
      118 /* Finally, loop through and make all the requested changes */
      119 
      120 	do argno = 1 to nargs;
      121 	     call cu_$arg_ptr (argno, ap, al, (0));
      122 	     if char (arg, 1) = "-" then goto SKIP_THIS_ARGUMENT;
      123 
      124 	     tp_name = arg;
      125 	     call metering_gate_$get_tuning_parameter (tp_name, tp_type, tp_value, (null ()), tp_name, (""), code);
      126 	     if code ^= 0 then do;
      127 		call com_err_ (code, WHOAMI, "^a", arg);
      128 		argno = argno + 1;			/* Skip over new value */
      129 		goto SKIP_THIS_ARGUMENT;
      130 		end;
      131 
      132 	     argno = argno + 1;			/* This is guaranteed to work, tested above */
      133 	     call cu_$arg_ptr (argno, ap, al, (0));
      134 	     requested_value = arg;
      135 
      136 	     call change ();			/* Convert the argument, and try to change */
      137 
      138 SKIP_THIS_ARGUMENT:
      139 	     end;
      140 
      141 	return;					/* End of main procedure */
      142 
      143 /*  */
      144 
      145 change: procedure ();
      146 
      147 /* This procedure sets the parameter to the new value, appropriately converted */
      148 
      149 dcl  char_value char (4) aligned;
      150 dcl  scaled_value fixed bin (35, 18);
      151 dcl  binary_value fixed bin (35);
      152 dcl  float_value float bin (27);
      153 
      154 dcl  new_value bit (36) aligned;
      155 dcl  new_char_value char (4) aligned;
      156 dcl  new_scaled_value fixed bin (35, 18);
      157 dcl  new_binary_value fixed bin (35);
      158 dcl  new_float_value float bin (27);
      159 
      160 dcl  error_message char (128);
      161 
      162 
      163 	unspec (char_value) = tp_value;
      164 	unspec (scaled_value) = tp_value;
      165 	unspec (binary_value) = tp_value;
      166 	unspec (float_value) = tp_value;
      167 
      168 	if tp_type = TP_CHAR then do; 		/* First, try to convert to appropriate format */
      169 	     if length (rtrim (requested_value)) > 4 then
      170 		call bad_value ("four characters or less");
      171 	     new_char_value = requested_value;
      172 	     new_value = unspec (new_char_value);
      173 	     end;
      174 
      175 	else if tp_type = TP_INTEGER then do;
      176 	     new_binary_value = cv_dec_check_ (requested_value, code);
      177 	     if code ^= 0 then call bad_value ("a decimal integer");
      178 	     new_value = unspec (new_binary_value);
      179 	     end;
      180 
      181 	else if tp_type = TP_SCALED_INTEGER then do;
      182 	     new_scaled_value = cv_float_ (requested_value, code);
      183 	     if code ^= 0 then call bad_value ("a scaled integer");
      184 	     new_value = unspec (new_scaled_value);
      185 	     end;
      186 
      187 	else if tp_type = TP_MICROSECONDS then do;
      188 	     new_binary_value = (0.5 + 1.0e6 * cv_float_ (requested_value, code));
      189 	     if code ^= 0 then call bad_value ("a positive number of seconds");
      190 	     if new_binary_value < 0 then call bad_value ("a positive number of seconds");
      191 	     new_value = unspec (new_binary_value);
      192 	     end;
      193 
      194 	else if tp_type = TP_ON_OFF then do;
      195 	     if requested_value = "on" then new_binary_value = 1;
      196 	     else if requested_value = "off" then new_binary_value = 0;
      197 	     else call bad_value ("either ""on"" or ""off""");
      198 	     unspec (new_value) = unspec (new_binary_value);
      199 	     end;
      200 
      201 	else if tp_type = TP_FLOAT then do;
      202 	     new_float_value = cv_float_ (requested_value, code);
      203 	     if code ^= 0 then call bad_value ("a floating point number");
      204 	     unspec (new_value) = unspec (new_float_value);
      205 	     end;
      206 
      207 	else do;
      208 	     new_binary_value = cv_oct_check_ (requested_value, code);
      209 	     if code ^= 0 then call bad_value ("an octal number");
      210 	     new_value = unspec (new_binary_value);
      211 	     end;
      212 
      213 	unspec (new_char_value) = unspec (new_value);	/* Copy back just in case */
      214 	unspec (new_scaled_value) = unspec (new_value);
      215 	unspec (new_binary_value) = unspec (new_value);
      216 	unspec (new_float_value) = unspec (new_value);
      217 
      218 	query_info.yes_or_no_sw = "1"b;
      219 	query_info.version = query_info_version_4;
      220 
      221 	if tp_type = TP_CHAR then			/* Make discreet inquiry about the change */
      222 	     call command_query_ (addr (query_info), answer, WHOAMI,
      223 		"OK to change ^a from ""^4a"" to ""^4a""?",
      224 		tp_name, char_value, new_char_value);
      225 
      226 	else if tp_type = TP_INTEGER then
      227 	     call command_query_ (addr (query_info), answer, WHOAMI,
      228 		"OK to change ^a from ^d to ^d?",
      229 		tp_name, binary_value, new_binary_value);
      230 
      231 	else if tp_type = TP_SCALED_INTEGER then
      232 	     call command_query_ (addr (query_info), answer, WHOAMI,
      233 		"OK to change ^a from ^f to ^f?",
      234 		tp_name, round (decimal (scaled_value), 4), round (decimal (new_scaled_value), 4));
      235 
      236 	else if tp_type = TP_MICROSECONDS then
      237 	     call command_query_ (addr (query_info), answer, WHOAMI,
      238 		"OK to change ^a from ^f to ^f seconds?",
      239 		tp_name, (float (binary_value) / 1.0e6), (float (new_binary_value) / 1.0e6));
      240 
      241 	else if tp_type = TP_ON_OFF then
      242 	     call command_query_ (addr (query_info), answer, WHOAMI,
      243 		"OK to change ^a from ^[on^;off^] to ^[on^;off^] ?",
      244 		tp_name, (binary_value ^= 0), (new_binary_value ^= 0));
      245 
      246 	else if tp_type = TP_FLOAT then
      247 	     call command_query_ (addr (query_info), answer, WHOAMI,
      248 	     "OK to change ^a from ^f to ^f?",
      249 	     tp_name, float_value, new_float_value);
      250 
      251 	else call command_query_ (addr (query_info), answer, WHOAMI,
      252 		"OK to change ^a from ^w to ^w?",
      253 		tp_name, tp_value, new_value);
      254 
      255 	if answer ^= "yes" then return;		/* Chickened out */
      256 
      257 	call set_entry (tp_name, new_value, (""b), (null ()), error_message, code);
      258 
      259 	if code ^= 0 then call com_err_ (code, WHOAMI,
      260 	     "^/^3xCannot change ^a to ^a^[: Must be ^a.^]",
      261 	     tp_name, requested_value, (error_message ^= ""), error_message);
      262 
      263 	return;
      264 	end change;
      265 
      266 /*  */
      267 
      268 bad_value: proc (P_error);
      269 
      270 dcl  P_error char (*);
      271 
      272 	call com_err_ (0, WHOAMI, "Value for ^a must be ^a, not ""^a"".", tp_name, P_error, requested_value);
      273 
      274 	goto SKIP_THIS_ARGUMENT;
      275 
      276 	end bad_value;
      277 
      278  /* BEGIN INCLUDE FILE ... tuning_parameter_info.incl.pl1 ... 04/21/81 ... WOS */
  1     2 
  1     3 dcl  tp_info_ptr pointer;
  1     4 
  1     5 dcl 1 tp_info aligned based (tp_info_ptr),
  1     6     2 ptr pointer unaligned,				/* Location of the value */
  1     7     2 value bit (36) aligned, 			/* Current value */
  1     8     2 type fixed bin,				/* See types, below */
  1     9     2 special bit (1) aligned,			/* Whether this one is "special" */
  1    10     2 long_name char (32) unaligned,			/* Long and short names */
  1    11     2 short_name char (16) unaligned;
  1    12 
  1    13 dcl (TP_ON_OFF		init (1), 		/* bit (1) aligned -- also "on" and "off" to the command */
  1    14      TP_INTEGER		init (2), 		/* fixed bin (35) */
  1    15      TP_MICROSECONDS	init (3), 		/* fixed bin (35) microseconds, scaled by command */
  1    16      TP_SCALED_INTEGER	init (4), 		/* fixed bin (35, 18) */
  1    17      TP_CHAR		init (5),			/* char (4) aligned */
  1    18      TP_FLOAT		init (6)			/* float bin (27) aligned */
  1    19 	) fixed binary internal static options (constant);
  1    20 
  1    21 /* END INCLUDE FILE ... tuning_parameter_info.incl.pl1 */
      278 
      279  /*	BEGIN INCLUDE FILE query_info.incl.pl1		TAC June 1, 1973 */
  2     2 /*        Renamed to query_info.incl.pl1 and cp_escape_control added, 08/10/78 WOS */
  2     3 /*	version number changed to 4, 08/10/78 WOS */
  2     4 /* Version 5 adds explanation_(ptr len) 05/08/81 S. Herbst */
  2     5 
  2     6 dcl 1 query_info aligned,				/* argument structure for command_query_ call */
  2     7     2 version fixed bin,				/* version of this structure - must be set, see below */
  2     8     2 switches aligned,                                     /* various bit switch values */
  2     9       3 yes_or_no_sw bit (1) unaligned init ("0"b),		/* not a yes-or-no question, by default */
  2    10       3 suppress_name_sw bit (1) unaligned init ("0"b),	/* do not suppress command name */
  2    11       3 cp_escape_control bit (2) unaligned init ("00"b),   /* obey static default value */
  2    12                                                             /* "01" -> invalid, "10" -> don't allow, "11" -> allow */
  2    13       3 suppress_spacing bit (1) unaligned init ("0"b),     /* whether to print extra spacing */
  2    14       3 padding bit (31) unaligned init (""b),		/* pads it out to t word */
  2    15     2 status_code fixed bin (35) init (0),		/* query not prompted by any error, by default */
  2    16     2 query_code fixed bin (35) init (0),		/* currently has no meaning */
  2    17 
  2    18 /*  Limit of data defined for version 2 */
  2    19 
  2    20     2 question_iocbp ptr init (null ()),		/* IO switch to write question */
  2    21     2 answer_iocbp ptr init (null ()),			/* IO switch to read answer */
  2    22     2 repeat_time fixed bin (71) init (0),		/* repeat question every N seconds if no answer */
  2    23 						/* minimum of 30 seconds required for repeat */
  2    24 						/* otherwise, no repeat will occur */
  2    25 /* Limit of data defined for version 4 */
  2    26 
  2    27     2 explanation_ptr ptr init (null ()),		/* explanation of question to be printed if */
  2    28     2 explanation_len fixed bin (21) init (0);		/* user answers "?" (disabled if ptr=null or len=0) */
  2    29 
  2    30 dcl  query_info_version_3 fixed bin int static options (constant) init (3);
  2    31 dcl  query_info_version_4 fixed bin int static options (constant) init (4);
  2    32 dcl  query_info_version_5 fixed bin int static options (constant) init (5); /* the current version number */
  2    33 
  2    34 /*	END INCLUDE FILE query_info.incl.pl1 */
      279 
      280 
      281 	end change_tuning_parameters;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/15/82  1453.7  change_tuning_parameters.pl1      >dumps>old>recomp>change_tuning_parameters.pl1
278          1    03/29/82  1006.9  tuning_parameter_info.incl.pl1    >ldd>include>tuning_parameter_info.incl.pl1
279          2    08/12/81  0911.2  query_info.incl.pl1               >ldd>include>query_info.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
P_error                                parameter       char                     unaligned dcl 270 set ref 268 272*
TP_CHAR                                constant        fixed bin(17,0)          initial dcl 1-13 ref 168 221
TP_FLOAT                               constant        fixed bin(17,0)          initial dcl 1-13 ref 201 246
TP_INTEGER                             constant        fixed bin(17,0)          initial dcl 1-13 ref 175 226
TP_MICROSECONDS                        constant        fixed bin(17,0)          initial dcl 1-13 ref 187 236
TP_ON_OFF                              constant        fixed bin(17,0)          initial dcl 1-13 ref 194 241
TP_SCALED_INTEGER                      constant        fixed bin(17,0)          initial dcl 1-13 ref 181 231
WHOAMI                          000000 constant        char(32)                 initial unaligned dcl 55 set ref 65* 78* 84* 94* 94*
                                                                                  106* 127* 221* 226* 231* 236* 241* 246* 251* 259*
                                                                                  272*
addr                                                   builtin function         dcl 59 ref 221 221 226 226 231 231 236 236 241 241
                                                                                  246 246 251 251
al                              000102 automatic       fixed bin(21,0)          dcl 21 set ref 73* 75 77 78 78 84 84 121* 122 124
                                                                                  127 127 133* 134
answer                          000160 automatic       varying char(4)          dcl 35 set ref 221* 226* 231* 236* 241* 246* 251*
                                                                                  255
answer_iocbp              6     000170 automatic       pointer                  initial level 2 dcl 2-6 set ref 2-6*
ap                              000104 automatic       pointer                  dcl 22 set ref 73* 75 77 78 84 121* 122 124 127 133*
                                                                                  134
arg                                    based           char                     unaligned dcl 23 set ref 75 77 78* 84* 122 124 127*
                                                                                  134
argno                           000100 automatic       fixed bin(17,0)          dcl 19 set ref 72* 73* 83 88* 88* 120* 121* 128* 128
                                                                                  132* 132 133*
binary_value                    000220 automatic       fixed bin(35,0)          dcl 151 set ref 165* 226* 236 241
char                                                   builtin function         dcl 59 ref 77 122
char_value                      000216 automatic       char(4)                  dcl 149 set ref 163* 221*
code                            000106 automatic       fixed bin(35,0)          dcl 24 set ref 63* 64 65* 125* 126 127* 176* 177
                                                                                  182* 183 188* 189 202* 203 208* 209 257* 259 259*
com_err_                        000010 constant        entry                    external dcl 37 ref 65 78 84 94 106 127 259 272
command_query_                  000012 constant        entry                    external dcl 38 ref 221 226 231 236 241 246 251
cp_escape_control         1(02) 000170 automatic       bit(2)                   initial level 3 packed unaligned dcl 2-6 set ref
                                                                                  2-6*
cu_$arg_count                   000014 constant        entry                    external dcl 39 ref 63
cu_$arg_ptr                     000016 constant        entry                    external dcl 40 ref 73 121 133
cv_dec_check_                   000020 constant        entry                    external dcl 41 ref 176
cv_float_                       000022 constant        entry                    external dcl 42 ref 182 188 202
cv_oct_check_                   000024 constant        entry                    external dcl 43 ref 208
decimal                                                builtin function         dcl 59 ref 231 231 231 231
error_message                   000227 automatic       char(128)                unaligned dcl 160 set ref 257* 259 259*
error_table_$badopt             000034 external static fixed bin(35,0)          dcl 51 set ref 78*
error_table_$noarg              000036 external static fixed bin(35,0)          dcl 52 set ref 94*
error_table_$odd_no_of_args     000040 external static fixed bin(35,0)          dcl 53 set ref 84*
explanation_len          14     000170 automatic       fixed bin(21,0)          initial level 2 dcl 2-6 set ref 2-6*
explanation_ptr          12     000170 automatic       pointer                  initial level 2 dcl 2-6 set ref 2-6*
float                                                  builtin function         dcl 59 ref 236 236
float_value                     000221 automatic       float bin(27)            dcl 152 set ref 166* 246*
gate_name                       000123 automatic       char(32)                 unaligned dcl 32 set ref 102* 103* 106*
have_name                       000121 automatic       bit(1)                   dcl 30 set ref 70* 89* 93
hphcs_$set_tuning_parameter     000030 constant        entry                    external dcl 46 ref 111
initializer_gate_$set_tuning_parameter
                                000032 constant        entry                    external dcl 48 ref 110
length                                                 builtin function         dcl 59 ref 169
linkage_error                   000162 stack reference condition                dcl 57 ref 105 115
metering_gate_$get_tuning_parameter
                                000026 constant        entry                    external dcl 44 ref 113 125
nargs                           000101 automatic       fixed bin(17,0)          dcl 20 set ref 63* 72 83 120
new_binary_value                000225 automatic       fixed bin(35,0)          dcl 157 set ref 176* 178 188* 190 191 195* 196* 198
                                                                                  208* 210 215* 226* 236 241
new_char_value                  000223 automatic       char(4)                  dcl 155 set ref 171* 172 213* 221*
new_float_value                 000226 automatic       float bin(27)            dcl 158 set ref 202* 204 216* 246*
new_scaled_value                000224 automatic       fixed bin(35,18)         dcl 156 set ref 182* 184 214* 231 231
new_value                       000222 automatic       bit(36)                  dcl 154 set ref 172* 178* 184* 191* 198* 204* 210*
                                                                                  213 214 215 216 251* 257*
null                                                   builtin function         dcl 59 ref 113 125 2-6 2-6 2-6 257
padding                   1(05) 000170 automatic       bit(31)                  initial level 3 packed unaligned dcl 2-6 set ref
                                                                                  2-6*
query_code                3     000170 automatic       fixed bin(35,0)          initial level 2 dcl 2-6 set ref 2-6*
query_info                      000170 automatic       structure                level 1 dcl 2-6 set ref 221 221 226 226 231 231 236
                                                                                  236 241 241 246 246 251 251
query_info_version_4                   constant        fixed bin(17,0)          initial dcl 2-31 ref 219
question_iocbp            4     000170 automatic       pointer                  initial level 2 dcl 2-6 set ref 2-6*
repeat_time              10     000170 automatic       fixed bin(71,0)          initial level 2 dcl 2-6 set ref 2-6*
requested_value                 000140 automatic       char(64)                 unaligned dcl 34 set ref 134* 169 171 176* 182* 188*
                                                                                  195 196 202* 208* 259* 272*
round                                                  builtin function         dcl 59 ref 231 231 231 231
rtrim                                                  builtin function         dcl 59 ref 169
scaled_value                    000217 automatic       fixed bin(35,18)         dcl 150 set ref 164* 231 231
set_entry                       000134 automatic       entry variable           dcl 33 set ref 110* 111* 257
silent_sw                       000122 automatic       bit(1)                   dcl 31 set ref 69* 75* 102 110
status_code               2     000170 automatic       fixed bin(35,0)          initial level 2 dcl 2-6 set ref 2-6*
suppress_name_sw          1(01) 000170 automatic       bit(1)                   initial level 3 packed unaligned dcl 2-6 set ref
                                                                                  2-6*
suppress_spacing          1(04) 000170 automatic       bit(1)                   initial level 3 packed unaligned dcl 2-6 set ref
                                                                                  2-6*
switches                  1     000170 automatic       structure                level 2 dcl 2-6
tp_name                         000111 automatic       char(32)                 unaligned dcl 28 set ref 124* 125* 125* 221* 226*
                                                                                  231* 236* 241* 246* 251* 257* 259* 272*
tp_type                         000107 automatic       fixed bin(17,0)          dcl 26 set ref 125* 168 175 181 187 194 201 221 226
                                                                                  231 236 241 246
tp_value                        000110 automatic       bit(36)                  dcl 27 set ref 125* 163 164 165 166 251*
unspec                                                 builtin function         dcl 59 set ref 163* 164* 165* 166* 172 178 184 191
                                                                                  198* 198 204* 204 210 213* 213 214* 214 215* 215
                                                                                  216* 216
version                         000170 automatic       fixed bin(17,0)          level 2 dcl 2-6 set ref 219*
yes_or_no_sw              1     000170 automatic       bit(1)                   initial level 3 packed unaligned dcl 2-6 set ref
                                                                                  2-6* 218*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
bit                                                    builtin function         dcl 59
maxlength                                              builtin function         dcl 59
query_info_version_3                   internal static fixed bin(17,0)          initial dcl 2-30
query_info_version_5                   internal static fixed bin(17,0)          initial dcl 2-32
tp_info                                based           structure                level 1 dcl 1-5
tp_info_ptr                            automatic       pointer                  dcl 1-3

NAMES DECLARED BY EXPLICIT CONTEXT.
MAIN_RETURN                     000433 constant        label                    dcl 66 ref 79 85 96 107
SKIP_THIS_ARGUMENT              001170 constant        label                    dcl 138 ref 122 129 274
bad_value                       002356 constant        entry                    internal dcl 268 ref 169 177 183 189 190 197 203 209
change                          001173 constant        entry                    internal dcl 145 ref 136
change_tuning_parameter         000365 constant        entry                    external dcl 11
change_tuning_parameters        000375 constant        entry                    external dcl 11
ctp                             000355 constant        entry                    external dcl 11

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      2730        2772    2511        2740
Length      3240    2511        42         232     216           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
ctp                                 436 external procedure  is an external procedure.  
on unit on line 105                  98 on unit               
change                                  internal procedure  shares stack frame of external procedure ctp.  
bad_value                               internal procedure  shares stack frame of external procedure ctp.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
ctp                      000100 argno                       ctp
                         000101 nargs                       ctp
                         000102 al                          ctp
                         000104 ap                          ctp
                         000106 code                        ctp
                         000107 tp_type                     ctp
                         000110 tp_value                    ctp
                         000111 tp_name                     ctp
                         000121 have_name                   ctp
                         000122 silent_sw                   ctp
                         000123 gate_name                   ctp
                         000134 set_entry                   ctp
                         000140 requested_value             ctp
                         000160 answer                      ctp
                         000170 query_info                  ctp
                         000216 char_value                  change
                         000217 scaled_value                change
                         000220 binary_value                change
                         000221 float_value                 change
                         000222 new_value                   change
                         000223 new_char_value              change
                         000224 new_scaled_value            change
                         000225 new_binary_value            change
                         000226 new_float_value             change
                         000227 error_message               change

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
fx1_to_fl2          r_ne_as             call_var_desc       call_ext_out_desc   call_ext_out        return
fl2_to_fx1          tra_ext             enable              ext_entry           int_entry           fl2_to_fxscaled
real_to_real_tr

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      command_query_                cu_$arg_count                 cu_$arg_ptr
cv_dec_check_                 cv_float_                     cv_oct_check_                 hphcs_$set_tuning_parameter
initializer_gate_$set_tuning_parameter                      metering_gate_$get_tuning_parameter

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$badopt           error_table_$noarg            error_table_$odd_no_of_args




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
 2    6 000326        11 000354        63 000403        64 000414        65 000416        66 000433        69 000434
     70 000435        72 000436        73 000445        75 000463        77 000474        78 000503        79 000535
     83 000536        84 000541        85 000574        88 000575        89 000576        91 000600        93 000602
     94 000604        96 000633       102 000634       103 000642       105 000645       106 000661       107 000711
    110 000714       111 000724       113 000731       115 001000       120 001001       121 001010       122 001026
    124 001037       125 001043       126 001105       127 001107       128 001141       129 001142       132 001143
    133 001144       134 001162       136 001167       138 001170       141 001172       145 001173       163 001174
    164 001176       165 001177       166 001200       168 001201       169 001204       171 001225       172 001227
    173 001231       175 001232       176 001234       177 001254       178 001264       179 001266       181 001267
    182 001271       183 001316       184 001327       185 001331       187 001332       188 001334       189 001362
    190 001372       191 001402       192 001404       194 001405       195 001407       196 001416       197 001424
    198 001435       199 001437       201 001440       202 001442       203 001463       204 001473       205 001475
    208 001476       209 001516       210 001527       213 001531       214 001533       215 001535       216 001537
    218 001541       219 001543       221 001545       226 001615       231 001664       236 001763       241 002046
    246 002123       251 002172       255 002236       257 002244       259 002303       263 002355       268 002356
    272 002367       274 002431


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
