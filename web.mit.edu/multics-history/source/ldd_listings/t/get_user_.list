	COMPILATION LISTING OF SEGMENT get_user_
	Compiled by: Multics PL/I Compiler, Release 30, of February 16, 1988
	Compiled at: Honeywell Bull, Phoenix AZ, SysM
	Compiled on: 07/13/88  1011.2 mst Wed
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 
        7 /* ******************************************************
        8*   *                                                    *
        9*   *                                                    *
       10*   * Copyright (c) 1972 by Massachusetts Institute of   *
       11*   * Technology and Honeywell Information Systems, Inc. *
       12*   *                                                    *
       13*   *                                                    *
       14*   ****************************************************** */
       15 
       16 /* program to return the name and project of each user registered on the Multics system */
       17 
       18 /* j m grochow 		7/23/70 */
       19 
       20 /* upgraded to version II pl1 and
       21*   modified for new SAT / PDT formats by Janice B. Phillipps, March 1972 */
       22 
       23 guinit: proc(dirname, code);
       24 
       25 dcl ( (satp,					/* pointer to the sat */
       26      satep,
       27      pdtep,
       28      pdtp) ptr,					/* pointer to the pdt */
       29     (satsize,					/* current size of the sat */
       30      satindex,					/* where are we now */
       31      pdtsize,					/* current size of the pdt */
       32      pdtindex) fixed bin,				/* where are we now */
       33     (projectname char(9),				/* save the current projectname */
       34      dirnamepdt char(168)) aligned			/* directory name which contains pdt's */
       35      ) internal static;				/* all internal static */
       36 
       37 dcl  ioa_ external entry options(variable),
       38      com_err_ external entry options (variable),
       39      hcs_$initiate external entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (1), fixed bin (2),
       40      ptr, fixed bin),
       41      hcs_$terminate_noname external entry (ptr, fixed bin);
       42 
       43 dcl (null, addr, substr, fixed, index) builtin;
       44 
       45 dcl  p ptr,
       46      i fixed bin;
       47 
       48 
       49 dcl (person, proj) char(*);
       50 dcl  dirname char(*) aligned;
       51 dcl  code fixed bin;
       52 
  1     1 /* BEGIN INCLUDE FILE ... user_attributes.incl.pl1  TAC 10/79 */
  1     2 
  1     3 
  1     4 /****^  HISTORY COMMENTS:
  1     5*  1) change(86-12-11,Brunelle), approve(87-07-13,MCR7741),
  1     6*     audit(87-04-19,GDixon), install(87-08-04,MR12.1-1056):
  1     7*     Add incl for abs_attributes.incl.pl1 to automatically include absentee
  1     8*     attribute switches.
  1     9*  2) change(87-04-19,GDixon), approve(87-07-13,MCR7741),
  1    10*     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1056):
  1    11*      A) Add USER_ATTRIBUTE_NAMES arrays.  attribute_names.incl.pl1 can thereby
  1    12*         be deleted.
  1    13*      B) Add constants identifying attributes that can be changed by user at
  1    14*         login, etc.
  1    15*                                                   END HISTORY COMMENTS */
  1    16 
  1    17 
  1    18 /* Modified 82-01-03  E. N. Kittlitz.  to declare a complete level-1 structure */
  1    19 
  1    20 /* format: style4 */
  1    21 dcl  1 user_attributes aligned based,			/* the user user_attributes */
  1    22        (2 administrator bit (1),			/* 1  system administrator privileges */
  1    23        2 primary_line bit (1),			/* 2  user has primary-line privileges  */
  1    24        2 nobump bit (1),				/* 2  user cannot be bumped */
  1    25        2 guaranteed_login bit (1),			/* 4  user has guaranteed login privileges */
  1    26        2 anonymous bit (1),				/* 5  used only in SAT. project may have anon.users */
  1    27        2 nopreempt bit (1),				/* 6  used only in PDT. user not preemptable by others
  1    28*						   .  of same project (distinct from "nobump") */
  1    29        2 nolist bit (1),				/* 7  don't list user on "who" */
  1    30        2 dialok bit (1),				/* 8  user may have multiple consoles */
  1    31        2 multip bit (1),				/* 9  user may have several processes */
  1    32        2 bumping bit (1),				/* 10 in SAT. Can users in project bump each other? */
  1    33        2 brief bit (1),				/* 11 no login or logout message */
  1    34        2 vinitproc bit (1),				/* 12 user may change initial procedure */
  1    35        2 vhomedir bit (1),				/* 13 user may change homedir */
  1    36        2 nostartup bit (1),				/* 14 user does not want start_up.ec */
  1    37        2 sb_ok bit (1),				/* 15 user may be standby */
  1    38        2 pm_ok bit (1),				/* 16 user may be primary */
  1    39        2 eo_ok bit (1),				/* 17 user may be edit_only */
  1    40        2 daemon bit (1),				/* 18 user may login as daemon */
  1    41        2 vdim bit (1),				/* 19 * OBSOLETE * user may change outer mdle */
  1    42        2 no_warning bit (1),				/* 20 no warning message */
  1    43        2 igroup bit (1),				/* 21 in SAT: this project may give its users individual groups
  1    44*						   .  in PDT: this user has an individual load control group */
  1    45        2 save_pdir bit (1),				/* 22 save pdir after fatal process error */
  1    46        2 disconnect_ok bit (1),			/* 23 ok to save user's disconnected processes */
  1    47        2 save_on_disconnect bit (1),			/* 24 save them unless -nosave login arg is given */
  1    48        2 pad bit (12)) unaligned;
  1    49 
  1    50 dcl  USER_ATTRIBUTE_NAMES (0:24) char (20) int static options (constant) init
  1    51     ("none",					/* 0 */
  1    52      "administrator",				/* 1 */
  1    53      "primary_line",				/* 2 */
  1    54      "nobump",					/* 3 */
  1    55      "guaranteed_login",				/* 4 */
  1    56      "anonymous",					/* 5 */
  1    57      "nopreempt",					/* 6 */
  1    58      "nolist",					/* 7 */
  1    59      "dialok",					/* 8 */
  1    60      "multip",					/* 9 */
  1    61      "bumping",					/* 10 */
  1    62      "brief",					/* 11 */
  1    63      "vinitproc",					/* 12 */
  1    64      "vhomedir",					/* 13 */
  1    65      "nostartup",					/* 14 */
  1    66      "no_secondary",				/* 15 */
  1    67      "no_prime",					/* 16 */
  1    68      "no_eo",					/* 17 */
  1    69      "daemon",					/* 18 */
  1    70      "",						/* 19 vdim OBSOLETE */
  1    71      "no_warning",					/* 20 */
  1    72      "igroup",					/* 21 */
  1    73      "save_pdir",					/* 22 */
  1    74      "disconnect_ok",				/* 23 */
  1    75      "save_on_disconnect");				/* 24 */
  1    76 
  1    77 dcl  ALT_USER_ATTRIBUTE_NAMES (0:24) char (20) int static options (constant) init
  1    78     ("null",					/* 0 */
  1    79      "admin",					/* 1 */
  1    80      "", "",					/* 2 - 3 */
  1    81      "guar",					/* 4 */
  1    82      "anon",					/* 5 */
  1    83      "", "",					/* 6 - 7 */
  1    84      "dial",					/* 8 */
  1    85      "multi_login",					/* 9 */
  1    86      "preempting",					/* 10 */
  1    87      "",						/* 11 */
  1    88      "v_process_overseer",				/* 12 */
  1    89      "v_home_dir",					/* 13 */
  1    90      "no_start_up",					/* 14 */
  1    91      "no_sec",					/* 15 */
  1    92      "no_primary",					/* 16 */
  1    93      "no_edit_only",				/* 17 */
  1    94      "op_login",					/* 18 */
  1    95      "",						/* 19 */
  1    96      "nowarn",					/* 20 */
  1    97      "", "", "",					/* 21 - 23 */
  1    98      "save");					/* 24 */
  1    99 
  1   100 dcl  USER_ATTRIBUTES_always_allowed bit (36) aligned int static
  1   101      options(constant) init("000000000010000000010000000000000000"b);
  1   102     /* SAT/PDT attributes not needed for user to give (brief, no_warning) */
  1   103 
  1   104 dcl  USER_ATTRIBUTES_default_in_pdt bit (36) aligned int static
  1   105      options(constant) init("000000000010000000010000000000000000"b);
  1   106     /* PDT value for (brief, no_warning) is default */
  1   107 
  1   108 dcl  USER_ATTRIBUTES_settable_by_user bit (36) aligned int static
  1   109      options(constant) init("000100000110010000010000000000000000"b);	
  1   110     /* user MIGHT set (bump, ns, brief, guar, no_warning) */
  1   111 
  2     1 /* BEGIN INCLUDE FILE ... user_abs_attributes.incl.pl1 */
  2     2 
  2     3 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  2     4 /*							       */
  2     5 /* This include file describes the attributes of an absentee job.  It is     */
  2     6 /* used by user_table_entry.incl.pl1, abs_message_format.incl.pl1            */
  2     7 /* and PIT.incl.pl1.   */
  2     8 /*							       */
  2     9 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  2    10 
  2    11 /****^  HISTORY COMMENTS:
  2    12*  1) change(86-12-08,GDixon), approve(87-07-13,MCR7741),
  2    13*     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1056):
  2    14*     Separated abs_attributes from the request structure
  2    15*     (abs_message_format.incl.pl1) so that the identical structure could be
  2    16*     used in the ute structure (user_table_entry.incl.pl1).
  2    17*  2) change(87-04-19,GDixon), approve(87-07-13,MCR7741),
  2    18*     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1056):
  2    19*     Added ABS_ATTRIBUTE_NAMES array.
  2    20*  3) change(87-11-11,Parisek), approve(88-02-11,MCR7849),
  2    21*     audit(88-03-22,Lippard), install(88-07-13,MR12.2-1047):
  2    22*     Added the no_start_up flag. SCP6367
  2    23*                                                   END HISTORY COMMENTS */
  2    24 
  2    25 dcl 1 user_abs_attributes		aligned based,
  2    26       2 restartable			bit (1) unaligned,	/* 1 if request may be started over from the beginning */
  2    27       2 user_deferred_until_time	bit (1) unaligned,	/* 1 if request was specified as deferred */
  2    28       2 proxy			bit (1) unaligned,	/* 1 if request submitted for someone else */
  2    29       2 set_bit_cnt			bit (1) unaligned,	/* 1 if should set bit count after every write call */
  2    30       2 time_in_gmt			bit (1) unaligned,	/* 1 if deferred_time is in GMT */
  2    31       2 user_deferred_indefinitely	bit (1) unaligned,	/* 1 if operator is to say when to run it */
  2    32       2 secondary_ok		bit (1) unaligned,	/* 1 if ok to log in as secondary foreground user */
  2    33       2 truncate_absout		bit (1) unaligned,	/* 1 if .absout is to be truncated */
  2    34       2 restarted			bit (1) unaligned,	/* 1 if job is restarted */
  2    35       2 no_start_up                     bit (1) unaligned,	/* 1 if requested -ns */
  2    36       2 attributes_pad		bit (26) unaligned;
  2    37 
  2    38 dcl  ABS_ATTRIBUTE_NAMES (10) char (28) varying int static options(constant) init(
  2    39 	"restartable",
  2    40 	"user_deferred_until_time",
  2    41 	"proxy",
  2    42 	"set_bit_cnt",
  2    43 	"time_in_gmt",
  2    44 	"user_deferred_indefinitely",
  2    45 	"secondary_ok",
  2    46 	"truncate_absout",
  2    47 	"restarted",
  2    48 	"no_start_up");
  2    49 
  2    50 /* END INCLUDE FILE ... user_abs_attributes.incl.pl1 */
  2    51 
  1   112 
  1   113 
  1   114 /* END INCLUDE FILE ... user_attributes.incl.pl1 */
       53 
  3     1 /* BEGIN INCLUDE FILE ... sat.incl.pl1 */
  3     2 
  3     3 
  3     4 
  3     5 
  3     6 /****^  HISTORY COMMENTS:
  3     7*  1) change(86-09-05,Parisek), approve(87-06-17,MCR7570),
  3     8*     audit(87-06-15,Hirneisen), install(87-08-06,MR12.1-1066):
  3     9*     Expand comment line of project.state to include the renamed state (state =
  3    10*     3).
  3    11*                                                   END HISTORY COMMENTS */
  3    12 
  3    13 
  3    14 
  3    15 /* Modified 740723 by PG to add AIM info */
  3    16 /* Modified 750604 by T. Casey to add priority scheduler parameters */
  3    17 /* Modified May 1976 by T. Casey to add project cutoff limits */
  3    18 /* Modified May 1978 by T. Casey to add pdir_quota */
  3    19 /* Modified November 1978 by T. Casey to add max_(fore back)ground and abs_foreground_cpu_limit */
  3    20 /* Modified July 1979 by J. N. R. Barnecut  to support multiple rate structures. (UNCA) */
  3    21 /* Modified January 1982 by E. N. Kittlitz for user_attributes.incl.pl1 changes */
  3    22 /* Modified 1984-07-05 BIM range of authorizations, version 3 */
  3    23 
  3    24 dcl (SAT_version init (3),				/* version 2 of this declaration */
  3    25 
  3    26      SAT_header_lth init (466),			/* length in words of SAT header */
  3    27      SAT_entry_lth init (80), 			/* length in words of SAT entry */
  3    28 
  3    29      SAT_project_name_length init (9)			/* proper length of project.project_id */
  3    30      ) fixed bin internal static options (constant);
  3    31 
  3    32 dcl 1 sat based (satp) aligned,
  3    33 
  4     1 /* BEGIN INCLUDE FILE author.incl.pl1 */
  4     2 
  4     3 /* the "author" items must always be the first ones in the table. The
  4     4*   module which moves the converted table to the System Control process
  4     5*   fills in these data items and assumes them to be at the head of the segment
  4     6*   regardless of the specific table's actual declaration. The variables
  4     7*   "lock" and "last_install_time" used to be "process_id" and "ev_channel"
  4     8*    respectively. For tables installed in multiple processes, these
  4     9*    are to be used to lock out multiple installations. */
  4    10 
  4    11 /*  Lock should be used as a modification lock. Since, in general,
  4    12*    entries may not be moved in system tables, even by installations,
  4    13*    it is sufficient for only installers and programs that change threads
  4    14*    to set or respect the lock. Simply updating data in an entry
  4    15*    requires no such protection.
  4    16*
  4    17*    Last_install_time is used by readers of system tables to detect
  4    18*    installations or other serious modifications. By checking it before
  4    19*    and after copying a block of data, they can be protected against
  4    20*    modifications.
  4    21*
  4    22*    Modules that set the lock should save proc_group_id, and then
  4    23*    put their group id there for the time they hold the lock.
  4    24*    if they do not actually install the, they should restore the group id.
  4    25**/
  4    26 
  4    27     2 author aligned,				/* validation data about table's author */
  4    28       3 proc_group_id char (32),			/* process-group-id  (personid.projectid.tag) */
  4    29       3 lock bit (36),				/* installation lock */
  4    30       3 update_attributes bit (1) unal,			/* update/add/delete attributes */
  4    31       3 update_authorization bit (1) unal,		/* update only authorizations */
  4    32       3 deferral_notified bit (1) unal,			/* installer notified of deferral of installation */
  4    33       3 pad bit (33) unaligned,
  4    34       3 last_install_time fixed bin (71),
  4    35       3 table char (4),				/* name of table, e.g., SAT MGT TTT RTDT PDT etc. */
  4    36       3 w_dir char (64),				/* author's working directory */
  4    37 
  4    38 /* END INCLUDE FILE author.incl.pl1 */
  3    34 
  3    35     2 max_size fixed bin,				/* max number of entries table can grow */
  3    36     2 current_size fixed bin,				/* current size of table  (in entries) */
  3    37     2 version fixed bin,				/* version number of table (word 32) */
  3    38     2 freep fixed bin,				/* free chain ptr. 0 if no free entries */
  3    39     2 n_projects fixed bin,				/* number of entries actually used */
  3    40     2 pad_was_max_users bit (36) aligned,
  3    41     2 max_units fixed bin,				/* maximum number of login-units per session */
  3    42     2 pad_was_max_prim bit (36) aligned,	
  3    43     2 uwt_size fixed bin,				/* size of User Weight Table */
  3    44     2 uwt (24) aligned,				/* User Weight Table */
  3    45       3 initproc char (64) unaligned,			/* user's initial procedure  */
  3    46       3 units fixed bin,				/* weight of initial procedure */
  3    47     2 system_admin (2) char (32) unal,			/* system administrator ID */
  3    48     2 pad1 (4) fixed bin,				/* padding to 466 wds */
  3    49     2 project (3258),				/* The SAT entries. 255K segment. */
  3    50       3 pad (80) fixed bin;				/* each entry is 80 words long  */
  3    51 
  3    52 
  3    53 dcl 1 project based (satep) aligned,			/* declaration of a single SAT entry  */
  3    54     2 state fixed bin,				/* state 1 = normal, 0 = free, 2 = deleted, 3 = renamed */
  3    55     2 project_id char (12) unaligned,			/* project's name */
  3    56     2 project_dir char (64) unaligned,			/* project's directory */
  3    57     2 pdt_ptr pointer,				/* pointer to current PDT */
  3    58     2 max_users fixed bin,				/* maximum number of users from project */
  3    59     2 n_users fixed bin,				/* current number */
  3    60     2 at like user_attributes aligned,			/* include user_attributes.incl.pl1 */
  3    61     2 admin (4) aligned,				/* list of project's administrators  */
  3    62       3 userid char (30) unal,			/* administrator's user-id (personid.projectid) */
  3    63       3 pad char (2) unal,
  3    64     2 cutoff char (1),				/* if project is cut off, why. */
  3    65     2 min_ring fixed bin,				/* lowest ring for project */
  3    66     2 max_ring fixed bin,				/* highest ring for project */
  3    67     2 alias char (8) unal,				/* project alias */
  3    68     2 group char (8) unal,				/* default group for this project */
  3    69     2 grace_max fixed bin,				/* maximum bump grace */
  3    70     2 audit bit (36),				/* audit flags for project */
  3    71     2 project_authorization (2) bit (72),		/* authorization of this project */
  3    72     2 groups (2) char (8) unal,			/* authorized groups for this project */
  3    73     2 days_to_cutoff fixed bin (17) unaligned,		/* these figures are as of last running of daily_summary */
  3    74     2 pct_balance fixed bin (17) unaligned,		/* they are used for warning message printing only */
  3    75     2 dollars_to_cutoff float bin,			/* and are not to be taken as up-to-date figures */
  3    76     2 pdir_quota fixed bin (17) unaligned,		/* max pdir quota allowed for project */
  3    77     2 max_foreground fixed bin (9) unsigned unaligned,	/* max simultaneous foreground and background */
  3    78     2 max_background fixed bin (9) unsigned unaligned,	/* processes that a user on this project can have */
  3    79     2 abs_foreground_cpu_limit fixed bin (17) unaligned,	/* time limit on foreground absentee jobs */
  3    80     2 rs_number fixed bin (9) unsigned unaligned,		/* rate structure number (0=default rates ) */
  3    81     2 satpad1 fixed bin (9) unsigned unaligned,
  3    82     2 satpad (1) bit (36) aligned,			/* pad to 80 words */
  3    83     2 chain fixed bin;				/* if free entry, chain */
  3    84 
  3    85 /* END INCLUDE FILE ... sat.incl.pl1 */
       54 
  5     1 /* BEGIN INCLUDE FILE ... pdt.incl.pl1 */
  5     2 /* Requires user_attributes.incl.pl1 */
  5     3 
  5     4 /* Modified 740723 by PG to add AIM info */
  5     5 /* Modified 750604 by T. Casey to add priority scheduler parameters */
  5     6 /* Modified May 1976 by T. Casey to add cutoff warning thresholds and change version to 3 */
  5     7 /* Modified May 1977 by John Gintell to add reqfile, projfile, and SAT to header */
  5     8 /* Modified May 1978 by T. Casey to add pdir_quota to user entry */
  5     9 /* Modified June 1978 by T. Casey to add rel ptr to pdt hash table */
  5    10 /* Modified November 1978 by T. Casey to add max_(fore back)ground, n_(fore back)ground and abs_foreground_cpu_limit */
  5    11 /* Modified October 1979 by T. Casey to add counters for interactive and disconnected processes. */
  5    12 /* Modified Feb 1980 by M. B. Armstrong to implement multiple rate structures (UNCA). */
  5    13 /* Modified May 1980 by R. McDonald to use iod cpu time field for page charging (UNCA) */
  5    14 /* Modified December 1981 by E. N. Kittlitz for user_warn fields */
  5    15 /* Modified January 1982 by E. N. Kittlitz for user_attributes.incl.pl1 changes */
  5    16 /* Modified September 1982 by E. N. Kittlitz for default ring. */
  5    17 /* Modified 1984-07-05 BIM for min authorization, version to 4 */
  5    18 
  5    19 dcl (PDT_version init (4),				/* version of this declaration */
  5    20      PDT_header_lth init (256),			/* length in words of PDT head */
  5    21      PDT_entry_lth init (256),			/* length in words of PDT entry */
  5    22 
  5    23      PDT_project_name_length init (9),			/* proper length of pdt.project_name */
  5    24      PDT_person_id_length init (22)			/* proper length of user.person_id */
  5    25      ) fixed bin internal static options (constant);
  5    26 
  5    27 dcl 1 pdt based (pdtp) aligned,
  5    28 
  6     1 /* BEGIN INCLUDE FILE author.incl.pl1 */
  6     2 
  6     3 /* the "author" items must always be the first ones in the table. The
  6     4*   module which moves the converted table to the System Control process
  6     5*   fills in these data items and assumes them to be at the head of the segment
  6     6*   regardless of the specific table's actual declaration. The variables
  6     7*   "lock" and "last_install_time" used to be "process_id" and "ev_channel"
  6     8*    respectively. For tables installed in multiple processes, these
  6     9*    are to be used to lock out multiple installations. */
  6    10 
  6    11 /*  Lock should be used as a modification lock. Since, in general,
  6    12*    entries may not be moved in system tables, even by installations,
  6    13*    it is sufficient for only installers and programs that change threads
  6    14*    to set or respect the lock. Simply updating data in an entry
  6    15*    requires no such protection.
  6    16*
  6    17*    Last_install_time is used by readers of system tables to detect
  6    18*    installations or other serious modifications. By checking it before
  6    19*    and after copying a block of data, they can be protected against
  6    20*    modifications.
  6    21*
  6    22*    Modules that set the lock should save proc_group_id, and then
  6    23*    put their group id there for the time they hold the lock.
  6    24*    if they do not actually install the, they should restore the group id.
  6    25**/
  6    26 
  6    27     2 author aligned,				/* validation data about table's author */
  6    28       3 proc_group_id char (32),			/* process-group-id  (personid.projectid.tag) */
  6    29       3 lock bit (36),				/* installation lock */
  6    30       3 update_attributes bit (1) unal,			/* update/add/delete attributes */
  6    31       3 update_authorization bit (1) unal,		/* update only authorizations */
  6    32       3 deferral_notified bit (1) unal,			/* installer notified of deferral of installation */
  6    33       3 pad bit (33) unaligned,
  6    34       3 last_install_time fixed bin (71),
  6    35       3 table char (4),				/* name of table, e.g., SAT MGT TTT RTDT PDT etc. */
  6    36       3 w_dir char (64),				/* author's working directory */
  6    37 
  6    38 /* END INCLUDE FILE author.incl.pl1 */
  5    29 
  5    30     2 max_size fixed bin,				/* max number of entries table can grow */
  5    31     2 current_size fixed bin,				/* current size of table (in entries) */
  5    32     2 version fixed bin,				/* table version */
  5    33     2 freep fixed bin,				/* relptr to begin of free chain */
  5    34     2 n_users fixed bin,				/* number of entries actually used */
  5    35     2 project_name char (28),				/* name of project */
  5    36     2 project_dir char (64),				/* treename of project's directory */
  5    37     2 projfile_version fixed bin,
  5    38     2 projentry bit (66*36),
  5    39     2 pad3 (5) bit (36) aligned,
  5    40     2 reqfile_version fixed bin,
  5    41     2 reqentry bit (40*36),
  5    42     2 pad4 (9) fixed bin,
  5    43     2 sat_version fixed bin,
  5    44     2 satentry bit (52*36),				/* everything in sat.project from project.at on */
  5    45     2 pad5 (4) bit (36) aligned,
  5    46     2 date_reqfile_copied fixed bin (71),
  5    47     2 rs_number fixed bin (9) unsigned unaligned,		/* rate structure number, easier than looking in satentry */
  5    48     2 pad2l bit (27) unaligned,
  5    49     2 pad2 (16) fixed bin,				/* make header 256 words long */
  5    50     2 ht_relp fixed bin (18) aligned,			/* if nonzero, pdt has hash table at that loc */
  5    51     2 user (1019) aligned,				/* the project definition table entries */
  5    52       3 pad (256) bit (36) aligned;			/* each entry is 256 words long  */
  5    53 
  5    54 /* The hash table, if there is one, is right after the last user, and is described in hashst.incl.pl1 */
  5    55 
  5    56 
  5    57 
  5    58 dcl 1 user based (pdtep) aligned,			/* declaration of a single PDT entry  */
  5    59     2 state fixed bin,				/* 1 = normal, 2 = deleted 0 = free */
  5    60     2 lock bit (36),				/* update lock */
  5    61     2 person_id char (24) aligned,			/* login name of user */
  5    62     2 now_in fixed bin,				/* count of users logged in on this entry */
  5    63     2 password char (8) aligned,			/* password for anonymous user */
  5    64     2 at like user_attributes aligned,			/* include user_attributes.incl.pl1 */
  5    65     2 initial_procedure char (64) aligned,		/* initproc and subsystem name packed into one string */
  5    66     2 home_dir char (64) aligned,			/* user's default working directory */
  5    67     2 bump_grace fixed bin,				/* number of minutes he is protected */
  5    68     2 high_ring fixed bin,				/* highest ring user may use */
  5    69     2 default_ring fixed bin (17) unal,			/* ring user will start in */
  5    70     2 low_ring fixed bin (17) unal,			/* lowest ring user may use */
  5    71     2 outer_module char (32),				/* outer module used if user is interactive */
  5    72     2 lot_size fixed bin,				/* size of linkage offset table */
  5    73     2 kst_size fixed bin,				/* size of known segment table */
  5    74     2 cls_size fixed bin,				/* size of combined linkage */
  5    75     2 uflags,					/* various flags */
  5    76       3 dont_call_init_admin bit (1) unal,		/* call overseer direct */
  5    77       3 ip_given bit (1) unal,			/* ip_len gives length of initproc packed in initial_procedure */
  5    78       3 ss_given bit (1) unal,			/* subsystem name is packed in initial_procedure */
  5    79       3 flagpad bit (33) unal,
  5    80     2 ip_len fixed bin (17) unal,			/* length of initproc name packed in initial_procedure */
  5    81     2 ss_len fixed bin (17) unal,			/* length of subsystem name packed in initial_procedure */
  5    82     2 dollar_limit float bin,
  5    83     2 dollar_charge float bin,			/* total dollars spent this month */
  5    84     2 shift_limit (0: 7) float bin,
  5    85     2 daton fixed bin (71),				/* date user added to system */
  5    86     2 datof fixed bin (71),				/* date user deleted */
  5    87     2 last_login_time fixed bin (71),			/* time of last login */
  5    88     2 last_login_unit char (4),			/* terminal id last used */
  5    89     2 last_login_type fixed bin (17) unal,		/* terminal type */
  5    90     2 last_login_line_type fixed bin (17) unal,		/* terminal line type */
  5    91     2 time_last_bump fixed bin (71),			/* for bump-wait */
  5    92     2 last_update fixed bin (71),			/* time of last transaction */
  5    93     2 logins fixed bin,				/* number of logins */
  5    94     2 crashes fixed bin,				/* sessions abnormally terminated */
  5    95     2 interactive (0: 7),				/* interactive use, shifts 0-7 */
  5    96       3 charge float bin,				/* total dollar charge this shift */
  5    97       3 xxx fixed bin,
  5    98       3 cpu fixed bin (71),				/* cpu usage in microseconds */
  5    99       3 core fixed bin (71),				/* core demand in page-microseconds */
  5   100       3 connect fixed bin (71),			/* total console time in microseconds */
  5   101       3 io_ops fixed bin (71),			/* total i/o ops on terminal */
  5   102     2 absentee (4),					/* absentee use, queues 1-4 */
  5   103       3 charge float bin,				/* dollar charge this queue */
  5   104       3 jobs fixed bin,				/* number of jobs submitted */
  5   105       3 cpu fixed bin (71),				/* total cpu time in microseconds */
  5   106       3 memory fixed bin (71),			/* total memory demand */
  5   107     2 iod (4),					/* io daemon use, queues 1-4 */
  5   108       3 charge float bin,				/* dollar charge this queue */
  5   109       3 pieces fixed bin,				/* pieces of output requested */
  5   110       3 pad fixed bin (35),
  5   111       3 pages fixed bin (35),				/* number of pages output */
  5   112       3 lines fixed bin (71),				/* total record count of output */
  5   113     2 devices (16) float bin,				/* device charges */
  5   114     2 time_last_reset fixed bin (71),			/* time PDT last updated */
  5   115     2 absolute_limit float bin,			/* Limit, not reset monthly */
  5   116     2 absolute_spent float bin,			/* Spending against this */
  5   117     2 absolute_cutoff fixed bin (71),			/* Spending will be reset on this date */
  5   118     2 absolute_increm fixed bin,			/* .. time increment code. 0 = don't reset */
  5   119     2 pad_was_authorization bit (72) aligned,
  5   120     2 group char (8),				/* group for this user (if at.igroup = "1"b) */
  5   121     2 warn_days fixed bin (17) unaligned,		/* warn user if less than this many days to cutoff */
  5   122     2 warn_pct fixed bin (17) unaligned,		/* warn user if less than this percent of funds left */
  5   123     2 warn_dollars float bin,				/* warn user if less than this amount of funds left */
  5   124     2 n_foreground fixed bin (9) unsigned unaligned,	/* number of foreground and background processes */
  5   125     2 n_background fixed bin (9) unsigned unaligned,	/* that this user has. see limits just below */
  5   126     2 max_foreground fixed bin (9) unsigned unaligned,	/* max simultaneous foreground and */
  5   127     2 max_background fixed bin (9) unsigned unaligned,	/* background processes that this user can have */
  5   128     2 n_interactive fixed bin (9) unsigned unaligned,	/* number of interactive processes that user has */
  5   129     2 n_disconnected fixed bin (9) unsigned unaligned,	/* number of disconnected processes that user has */
  5   130     2 pdtupad1 fixed bin (18) unsigned unaligned,
  5   131     2 user_warn_days fixed bin (17) unaligned,		/* warn user if less than this many days to user cutoff */
  5   132     2 user_warn_pct fixed bin (17) unaligned,		/* warn user if less than this percent of user funds left */
  5   133     2 user_warn_dollars float bin,			/* warn user if less than this amount of user funds left */
  5   134     2 user_authorization (2) bit (72) aligned,		/* range */
  5   135     2 pdtupad (5) fixed bin,
  5   136     2 abs_foreground_cpu_limit fixed bin (17) unaligned,	/* time limit (sec) on foreground absentee jobs */
  5   137     2 pdir_quota fixed bin (17) unaligned,		/* quota to put on user's pdir (0 => use default) */
  5   138     2 chain fixed bin;				/* free chain */
  5   139 
  5   140 /* END INCLUDE FILE ... pdt.incl.pl1 */
       55 
       56 
       57 
       58 
       59 /* ======================================================== */
       60 
       61 	call hcs_$initiate(dirname, "sat", "", 0, 1, satp, code);
       62 	if satp = null then do;
       63 	     if code = 0 then code = 1;
       64 	     return;
       65 	end;
       66 
       67 	if satp -> sat.version ^= SAT_version then do;
       68 	     call com_err_ (0, "get_user_", "SAT version is inconsistent with declarations used by this program.");
       69 	     return;
       70 	end;
       71 
       72 
       73 	satsize = satp->sat.current_size;
       74 	satindex = 1;
       75 
       76 	dirnamepdt = dirname;
       77 	substr(dirnamepdt, index(dirnamepdt, " "), 4) = ">pdt";
       78 	call initpdt;				/* get the first pdt */
       79 
       80 	return;
       81 
       82 get_user_: entry(person, proj);
       83 
       84 beginloop: do i = pdtindex to pdtsize;
       85 
       86 	     p = addr(pdtp->pdt.user(i));
       87 
       88 	     if p->user.state = 0 then go to endloop;
       89 
       90 	     person = p->user.person_id;		/* person's name */
       91 	     proj = projectname;			/* the current project */
       92 
       93 	     pdtindex = i+1;
       94 	     return;
       95 
       96 endloop:	end;
       97 
       98 /* if we fall through, get another pdt */
       99 
      100 	call hcs_$terminate_noname (pdtp, code);	/* terminate the current pdt */
      101 	call initpdt;
      102 	if projectname = " " then do;			/* no more pdt's */
      103 	     person = " ";
      104 	     proj = " ";
      105 	     call hcs_$terminate_noname (pdtp, code);	/* terminate last pdt */
      106 	     call hcs_$terminate_noname (satp, code);	/* terminate sat */
      107 
      108 	     return;
      109 	end;
      110 
      111 	go to beginloop;
      112 
      113 
      114 /* internal entry to get another pdt */
      115 
      116 initpdt:	proc;
      117 
      118 dcl  projfile char(32) aligned,			/* name of project pdt file */
      119      code fixed bin;				/* for error codes */
      120 dcl  com_err_ external entry options (variable);
      121 
      122 dcl (null, addr, substr, fixed) builtin;
      123 
      124 	     do i = satindex to satsize;
      125 
      126 		p = addr(satp->sat.project(i));
      127 
      128 		if p->project.state = 0 then go to endloop1;
      129 
      130 		projfile = substr(p->project.project_id, 1, index(p->project.project_id, " ")-1)||".pdt";
      131 
      132 		call hcs_$initiate(dirnamepdt, projfile, "", 0, 1, pdtp, code);
      133 		if pdtp = null then do;
      134 		     call ioa_("The following pdt could not be initiated: ^a>^a", dirnamepdt, projfile);
      135 		     go to endloop1;
      136 		end;
      137 
      138 		if pdtp -> pdt.version ^= PDT_version then do;
      139 		     call com_err_ (0, "get_user_", "PDT version is inconsistent with the declarations used by this program.");
      140 		     return;
      141 		end;
      142 
      143 		projectname = p->project.project_id;
      144 		pdtsize = pdtp->pdt.current_size;
      145 		pdtindex = 1;
      146 
      147 		satindex = i+1;
      148 		return;
      149 
      150 endloop1:      end;
      151 
      152 /* if we fall through, no more pdt's */
      153 
      154 	     projectname = " ";
      155 
      156 	     return;
      157 
      158 	end initpdt;
      159 
      160      end guinit;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    07/13/88  0942.4  get_user_.pl1                     >special_ldd>install>MR12.2-1047>get_user_.pl1
53           1    08/06/87  0913.6  user_attributes.incl.pl1          >ldd>include>user_attributes.incl.pl1
1-112        2    07/13/88  0900.1  user_abs_attributes.incl.pl1      >special_ldd>install>MR12.2-1047>user_abs_attributes.incl.pl1
54           3    08/06/87  1416.6  sat.incl.pl1                      >ldd>include>sat.incl.pl1
3-34         4    04/21/82  1211.8  author.incl.pl1                   >ldd>include>author.incl.pl1
55           5    09/13/84  0921.6  pdt.incl.pl1                      >ldd>include>pdt.incl.pl1
5-29         6    04/21/82  1211.8  author.incl.pl1                   >ldd>include>author.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
PDT_version                            constant        fixed bin(17,0)          initial dcl 5-19 ref 138
SAT_version                            constant        fixed bin(17,0)          initial dcl 3-24 ref 67
addr                                                   builtin function         dcl 122 in procedure "initpdt" ref 126
addr                                                   builtin function         dcl 43 in procedure "guinit" ref 86
code                            000122 automatic       fixed bin(17,0)          dcl 118 in procedure "initpdt" set ref 132*
code                                   parameter       fixed bin(17,0)          dcl 51 in procedure "guinit" set ref 23 61* 63 63*
                                                                                  100* 105* 106*
com_err_                        000100 constant        entry                    external dcl 37 in procedure "guinit" ref 68
com_err_                        000106 constant        entry                    external dcl 120 in procedure "initpdt" ref 139
current_size             36            based           fixed bin(17,0)          level 2 in structure "pdt" dcl 5-27 in procedure
                                                                                  "guinit" ref 144
current_size             36            based           fixed bin(17,0)          level 2 in structure "sat" dcl 3-32 in procedure
                                                                                  "guinit" ref 73
dirname                                parameter       char                     dcl 50 set ref 23 61* 76
dirnamepdt                      000023 internal static char(168)                dcl 25 set ref 76* 77 77* 132* 134*
hcs_$initiate                   000102 constant        entry                    external dcl 37 ref 61 132
hcs_$terminate_noname           000104 constant        entry                    external dcl 37 ref 100 105 106
i                               000102 automatic       fixed bin(17,0)          dcl 45 set ref 84* 86 93* 124* 126 147*
index                                                  builtin function         dcl 43 ref 77 130
ioa_                            000076 constant        entry                    external dcl 37 ref 134
null                                                   builtin function         dcl 43 in procedure "guinit" ref 62
null                                                   builtin function         dcl 122 in procedure "initpdt" ref 133
p                               000100 automatic       pointer                  dcl 45 set ref 86* 88 90 126* 128 130 130 143
pdt                                    based           structure                level 1 dcl 5-27
pdtindex                        000017 internal static fixed bin(17,0)          dcl 25 set ref 84 93* 145*
pdtp                            000012 internal static pointer                  dcl 25 set ref 86 100* 105* 132* 133 138 144
pdtsize                         000016 internal static fixed bin(17,0)          dcl 25 set ref 84 144*
person                                 parameter       char                     packed unaligned dcl 49 set ref 82 90* 103*
person_id                 2            based           char(24)                 level 2 dcl 5-58 ref 90
proj                                   parameter       char                     packed unaligned dcl 49 set ref 82 91* 104*
project                 722            based           structure                array level 2 in structure "sat" dcl 3-32
                                                                                  in procedure "guinit" set ref 126
project                                based           structure                level 1 dcl 3-53 in procedure "guinit"
project_id                1            based           char(12)                 level 2 packed packed unaligned dcl 3-53 ref 130 130
                                                                                  143
projectname                     000020 internal static char(9)                  dcl 25 set ref 91 102 143* 154*
projfile                        000112 automatic       char(32)                 dcl 118 set ref 130* 132* 134*
sat                                    based           structure                level 1 dcl 3-32
satindex                        000015 internal static fixed bin(17,0)          dcl 25 set ref 74* 124 147*
satp                            000010 internal static pointer                  dcl 25 set ref 61* 62 67 73 106* 126
satsize                         000014 internal static fixed bin(17,0)          dcl 25 set ref 73* 124
state                                  based           fixed bin(17,0)          level 2 in structure "user" dcl 5-58 in procedure
                                                                                  "guinit" ref 88
state                                  based           fixed bin(17,0)          level 2 in structure "project" dcl 3-53 in procedure
                                                                                  "guinit" ref 128
substr                                                 builtin function         dcl 43 in procedure "guinit" set ref 77*
substr                                                 builtin function         dcl 122 in procedure "initpdt" ref 130
user                    400            based           structure                array level 2 in structure "pdt" dcl 5-27
                                                                                  in procedure "guinit" set ref 86
user                                   based           structure                level 1 dcl 5-58 in procedure "guinit"
user_attributes                        based           structure                level 1 dcl 1-21
version                  37            based           fixed bin(17,0)          level 2 in structure "pdt" dcl 5-27 in procedure
                                                                                  "guinit" ref 138
version                  37            based           fixed bin(17,0)          level 2 in structure "sat" dcl 3-32 in procedure
                                                                                  "guinit" ref 67

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
ABS_ATTRIBUTE_NAMES                    internal static varying char(28)         initial array dcl 2-38
ALT_USER_ATTRIBUTE_NAMES               internal static char(20)                 initial array packed unaligned dcl 1-77
PDT_entry_lth                          internal static fixed bin(17,0)          initial dcl 5-19
PDT_header_lth                         internal static fixed bin(17,0)          initial dcl 5-19
PDT_person_id_length                   internal static fixed bin(17,0)          initial dcl 5-19
PDT_project_name_length                internal static fixed bin(17,0)          initial dcl 5-19
SAT_entry_lth                          internal static fixed bin(17,0)          initial dcl 3-24
SAT_header_lth                         internal static fixed bin(17,0)          initial dcl 3-24
SAT_project_name_length                internal static fixed bin(17,0)          initial dcl 3-24
USER_ATTRIBUTES_always_allowed         internal static bit(36)                  initial dcl 1-100
USER_ATTRIBUTES_default_in_pdt         internal static bit(36)                  initial dcl 1-104
USER_ATTRIBUTES_settable_by_user       internal static bit(36)                  initial dcl 1-108
USER_ATTRIBUTE_NAMES                   internal static char(20)                 initial array packed unaligned dcl 1-50
fixed                                                  builtin function         dcl 43 in procedure "guinit"
fixed                                                  builtin function         dcl 122 in procedure "initpdt"
pdtep                                  internal static pointer                  dcl 25
satep                                  internal static pointer                  dcl 25
user_abs_attributes                    based           structure                level 1 dcl 2-25

NAMES DECLARED BY EXPLICIT CONTEXT.
beginloop                       000316 constant        label                    dcl 84 ref 111
endloop                         000354 constant        label                    dcl 96 ref 88
endloop1                        000652 constant        label                    dcl 150 ref 128 135
get_user_                       000276 constant        entry                    external dcl 82
guinit                          000112 constant        entry                    external dcl 23
initpdt                         000435 constant        entry                    internal dcl 116 ref 78 101

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       752        1062     662         762
Length      1372     662       110         274      67          66

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
guinit                              214 external procedure  is an external procedure.  
initpdt                                 internal procedure  shares stack frame of external procedure guinit.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 satp                        guinit
000012 pdtp                        guinit
000014 satsize                     guinit
000015 satindex                    guinit
000016 pdtsize                     guinit
000017 pdtindex                    guinit
000020 projectname                 guinit
000023 dirnamepdt                  guinit

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
guinit                   000100 p                           guinit
                         000102 i                           guinit
                         000112 projfile                    initpdt
                         000122 code                        initpdt

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
alloc_char_temp     call_ext_out_desc   call_ext_out        return_mac          shorten_stack       ext_entry_desc

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      com_err_                      hcs_$initiate                 hcs_$terminate_noname
ioa_

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     23 000106        61 000125        62 000173        63 000200        64 000205        67 000206        68 000212
     69 000242        73 000243        74 000245        76 000247        77 000255        78 000270        80 000271
     82 000272        84 000316        86 000327        88 000333        90 000335        91 000343        93 000350
     94 000353        96 000354       100 000356       101 000370       102 000371       103 000376       104 000404
    105 000411       106 000421       108 000433       111 000434       116 000435       124 000436       126 000447
    128 000454       130 000456       132 000502       133 000546       134 000553       135 000576       138 000577
    139 000603       140 000633       143 000634       144 000642       145 000644       147 000646       148 000651
    150 000652       154 000654       156 000660


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
