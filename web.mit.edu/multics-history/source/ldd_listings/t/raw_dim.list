	COMPILATION LISTING OF SEGMENT raw_dim
	Compiled by: Multics PL/I Compiler, Release 27d, of October 11, 1982
	Compiled at: Honeywell LISD Phoenix, System M
	Compiled on: 11/15/82  1558.1 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 /* "Outer module" of peripheral package to return "raw" (unconverted) data from the card reader.
        7*   coded by MAP, 12/69. */
        8 
        9 /* Last modified by J. Stern on 8/1/71 to add standard SDB declaration
       10*   and to reject attempted multiple attachments.  */
       11 
       12 /* Last modifier 6/27/75 by Noel I. Morris	*/
       13 
       14 
       15 /* ******************************************************
       16*   *                                                    *
       17*   *                                                    *
       18*   * Copyright (c) 1972 by Massachusetts Institute of   *
       19*   * Technology and Honeywell Information Systems, Inc. *
       20*   *                                                    *
       21*   *                                                    *
       22*   ****************************************************** */
       23 
       24 
       25 raw_read: proc (sdb_ptr, wksp, off, nel, nelt, iostatus);
       26 
       27 dcl  wksp ptr,					/* pointer to caller's workspace */
       28      off fixed bin,					/* offset into caller's workspace */
       29      nel fixed bin,					/* number of elements to be transmitted */
       30      nelt fixed bin,				/* number of elements actually transmitted */
       31      iostatus bit (72) aligned;			/* status bits */
       32 
       33 dcl  nleft fixed bin,				/* elements remaining to be transferred */
       34      in ptr,					/* input pointer */
       35      out ptr,					/* output pointer */
       36      j fixed bin;					/* elements transmitted from reader or to punch */
       37 
       38 dcl  raw_card bit (972) aligned;			/* buffer for raw card */
       39 
       40 dcl  wks (0:1) bit (960) based unal;			/* caller's workspace */
       41 
       42 dcl  error_table_$eof_record ext fixed bin(35);
       43 
       44 dcl  ios_$read entry (char (*) aligned, ptr, fixed bin, fixed bin, fixed bin, bit (72) aligned),
       45      ios_$write entry (char (*) aligned, ptr, fixed bin, fixed bin, fixed bin, bit (72) aligned);
       46 
       47 dcl (addr, substr) builtin;
       48 
       49 
       50 		/*  */
       51 
  1     1 
  1     2 /* Begin include file ...... card_sdb.incl.pl1 */
  1     3 
  1     4 dcl  sdb_ptr ptr;					/* pointer to stream data block */
  1     5 
  1     6 dcl 1 SDB aligned based (sdb_ptr),
  1     7     2 outer_module_name char (32),
  1     8     2 attachment_list_ptr ptr,			/* ptr to list of stream names to which this SDB is attached */
  1     9     2 stream_name,
  1    10       3 next_stream_ptr ptr,				/* always null, single attachments only */
  1    11       3 name_size fixed bin (17),			/* length of stream name */
  1    12       3 stream char (32),				/* the stream to which this SDB is attached */
  1    13     2 areaptr ptr,					/* pointer to allocation area for SDB */
  1    14     2 modes bit (36);				/* mode bits */
  1    15 
  1    16 /* End of include file ...... card_sdb.incl.pl1 */
  1    17 
       52 
       53 
       54 
       55 		/*  */
       56 
       57 	iostatus = "0"b;				/* Clear status bits. */
       58 	in = addr (raw_card);			/* Set input pointer. */
       59 	out = addr (wksp -> wks (off));		/* Set output pointer. */
       60 	nelt = 0;					/* clear elements transmitted. */
       61 
       62 	do nleft = nel by -1 while (nleft > 0);		/* Handle one elements at a time. */
       63 	     call ios_$read (stream, in, 0, 1, j, iostatus);
       64 	     if substr (iostatus, 1, 36) & substr(iostatus, 1, 36) ^= unspec(error_table_$eof_record) then do;
       65 bad_read:		substr (iostatus, 46, 1) = "0"b;
       66 		return;
       67 	     end;
       68 	     if j = 0 then
       69 		if substr (iostatus, 46, 1) then return;
       70 		else go to bad_read;
       71 
       72 	     out -> wks (0) = raw_card;		/* Copy the card. */
       73 
       74 	     nelt = nelt + 1;			/* Count one element transmitted. */
       75 	     out = addr (out -> wks (1));		/* Step output pointer. */
       76 	end;
       77 
       78 	return;
       79 
       80 
       81 		/*  */
       82 
       83 raw_write: entry (sdb_ptr, wksp, off, nel, nelt, iostatus);
       84 
       85 	iostatus = "0"b;				/* Clear status bits. */
       86 	out = addr (raw_card);			/* Set output pointer. */
       87 	in = addr (wksp -> wks (off));		/* Set input pointer. */
       88 	nelt = 0;					/* Clear count of elements transmitted. */
       89 
       90 	do nleft = nel by -1 while (nleft > 0);		/* Handle one element at a time. */
       91 	     raw_card = in -> wks (0);		/* Copy one element. */
       92 
       93 	     call ios_$write (stream, out, 0, 1, j, iostatus);
       94 	     if substr (iostatus, 1, 36) ^= "0"b | j = 0 then do;
       95 		substr (iostatus, 46, 1) = "0"b;
       96 		return;
       97 	     end;
       98 
       99 	     nelt = nelt + 1;			/* Count one element transmitted. */
      100 	     in = addr (in -> wks (1));		/* Step input pointer. */
      101 	end;
      102 
      103 	return;
      104 
      105 
      106 		/*  */
      107 
      108 raw_getsize: entry (sdb_ptr, el_size, iostatus);
      109 
      110 dcl  el_size fixed bin;				/* element size */
      111 
      112 
      113 	iostatus = "0"b;
      114 
      115 	el_size = 960;				/* Element size is one raw card image. */
      116 
      117 	return;
      118 
      119 
      120 
      121      end raw_read;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/15/82  1458.3  raw_dim.pl1                       >dumps>old>recomp>raw_dim.pl1
52           1    09/09/75  1333.7  card_sdb.incl.pl1                 >ldd>include>card_sdb.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
SDB                                    based           structure                level 1 dcl 1-6
addr                                                   builtin function         dcl 47 ref 58 59 75 86 87 100
el_size                                parameter       fixed bin(17,0)          dcl 110 set ref 108 115*
error_table_$eof_record         000010 external static fixed bin(35,0)          dcl 42 ref 64
in                              000102 automatic       pointer                  dcl 33 set ref 58* 63* 87* 91 100* 100
ios_$read                       000012 constant        entry                    external dcl 44 ref 63
ios_$write                      000014 constant        entry                    external dcl 44 ref 93
iostatus                               parameter       bit(72)                  dcl 27 set ref 25 57* 63* 64 64 65* 68 83 85* 93* 94
                                                                                  95* 108 113*
j                               000106 automatic       fixed bin(17,0)          dcl 33 set ref 63* 68 93* 94
nel                                    parameter       fixed bin(17,0)          dcl 27 ref 25 62 83 90
nelt                                   parameter       fixed bin(17,0)          dcl 27 set ref 25 60* 74* 74 83 88* 99* 99
nleft                           000100 automatic       fixed bin(17,0)          dcl 33 set ref 62* 62* 90* 90*
off                                    parameter       fixed bin(17,0)          dcl 27 ref 25 59 83 87
out                             000104 automatic       pointer                  dcl 33 set ref 59* 72 75* 75 86* 93*
raw_card                        000107 automatic       bit(972)                 dcl 38 set ref 58 72 86 91*
sdb_ptr                                parameter       pointer                  dcl 1-4 ref 25 63 83 93 108
stream                   15            based           char(32)                 level 3 dcl 1-6 set ref 63* 93*
stream_name              12            based           structure                level 2 dcl 1-6
substr                                                 builtin function         dcl 47 set ref 64 64 65* 68 94 95*
wks                                    based           bit(960)                 array unaligned dcl 40 set ref 59 72* 75 87 91 100
wksp                                   parameter       pointer                  dcl 27 ref 25 59 83 87

NAMES DECLARED BY EXPLICIT CONTEXT.
bad_read                        000113 constant        label                    dcl 65 ref 68
raw_getsize                     000274 constant        entry                    external dcl 108
raw_read                        000014 constant        entry                    external dcl 25
raw_write                       000146 constant        entry                    external dcl 83

NAME DECLARED BY CONTEXT OR IMPLICATION.
unspec                                                 builtin function         ref 64

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       406         424     315         416
Length       606     315        16         146      70           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
raw_read                            128 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
raw_read                 000100 nleft                       raw_read
                         000102 in                          raw_read
                         000104 out                         raw_read
                         000106 j                           raw_read
                         000107 raw_card                    raw_read

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_ne_as             call_ext_out_desc   return              ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
ios_$read                     ios_$write

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$eof_record




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     25 000006        57 000024        58 000027        59 000031        60 000037        62 000040        63 000044
     64 000105        65 000113        66 000116        68 000117        72 000126        74 000132        75 000134
     76 000140        78 000143        83 000144        85 000156        86 000162        87 000164        88 000173
     90 000174        91 000200        93 000204        94 000245        95 000251        96 000254        99 000255
    100 000257       101 000264       103 000267       108 000270       113 000304       115 000310       117 000313


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
