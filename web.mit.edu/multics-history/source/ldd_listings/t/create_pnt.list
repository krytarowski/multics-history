	COMPILATION LISTING OF SEGMENT create_pnt
	Compiled by: Multics PL/I Compiler, Release 28d, of October 4, 1983
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 12/05/84  1103.5 mst Wed
	    Options: optimize list

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 /* CREATE_PNT:  Program to create an empty PNT.  Used by acct_start_up.ec
        7*   when setting up the answering service environment for the first time. */
        8 
        9 /* format: style2 */
       10 /* Written 1984-07-26 by E. Swenson */
       11 /* Modified 1984-09-20 by E. Swenson to use pnt_manager_. */
       12 
       13 create_pnt:
       14      procedure options (variable);
       15 
       16 /* Automatic */
       17 
       18 	dcl     argument_idx	 fixed bin (17);
       19 	dcl     argument_lth	 fixed bin (21);
       20 	dcl     argument_ptr	 ptr;
       21 	dcl     code		 fixed bin (35);
       22 	dcl     dirname		 char (168);
       23 	dcl     entryname		 char (32);
       24 	dcl     n_arguments		 fixed bin (17);
       25 	dcl     size		 fixed bin (17);
       26 
       27 /* External Entries */
       28 
       29 	dcl     com_err_		 entry () options (variable);
       30 	dcl     cu_$arg_count	 entry (fixed bin, fixed bin (35));
       31 	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
       32 	dcl     cv_dec_check_	 entry (char (*), fixed bin (35)) returns (fixed bin (35));
       33 	dcl     expand_pathname_$add_suffix
       34 				 entry (char (*), char (*), char (*), char (*), fixed bin (35));
       35 	dcl     pathname_		 entry (char (*), char (*)) returns (char (168));
       36 	dcl     pnt_manager_$create	 entry (char (*), char (*), fixed bin (17), fixed bin (35));
       37 
       38 /* External Static */
       39 
       40 	dcl     error_table_$noarg	 fixed bin (35) external static;
       41 	dcl     error_table_$bad_arg	 fixed bin (35) external static;
       42 	dcl     error_table_$badopt	 fixed bin (35) external static;
       43 
       44 /* Based */
       45 
       46 	dcl     argument		 char (argument_lth) based (argument_ptr);
       47 
       48 /* Constant */
       49 
       50 	dcl     ME		 char (32) initial ("create_pnt") internal static options (constant);
       51 	dcl     SIZE_DEFAULT	 fixed bin (17) initial (100) internal static options (constant);
       52 
       53 
       54 	call cu_$arg_count (n_arguments, code);
       55 	if code ^= 0
       56 	then do;
       57 		call com_err_ (code, ME);
       58 		return;
       59 	     end;
       60 
       61 	if n_arguments = 0
       62 	then do;
       63 		call com_err_ (0, ME, "Usage: ^a pathname_of_new_pnt -control_args", ME);
       64 		return;
       65 	     end;
       66 
       67 	call cu_$arg_ptr (1, argument_ptr, argument_lth, (0));
       68 	call expand_pathname_$add_suffix (argument, "pnt", dirname, entryname, code);
       69 	if code ^= 0
       70 	then do;
       71 		call com_err_ (code, ME, "^a", argument);
       72 		return;
       73 	     end;
       74 
       75 	size = SIZE_DEFAULT;			/* Initialize default size of PNT */
       76 
       77 	do argument_idx = 2 to n_arguments;
       78 	     call cu_$arg_ptr (argument_idx, argument_ptr, argument_lth, (0));
       79 	     if argument = "-size"
       80 	     then do;
       81 		     if argument_idx = n_arguments
       82 		     then do;
       83 			     call com_err_ (error_table_$noarg, ME, "-size");
       84 			     return;
       85 			end;
       86 		     argument_idx = argument_idx + 1;
       87 		     call cu_$arg_ptr (argument_idx, argument_ptr, argument_lth, (0));
       88 		     size = cv_dec_check_ (argument, code);
       89 		     if code ^= 0
       90 		     then do;
       91 			     call com_err_ (error_table_$bad_arg, ME, "-size ^a", argument);
       92 			     return;
       93 			end;
       94 		end;
       95 	     else do;
       96 		     call com_err_ (error_table_$badopt, ME, "^a", argument);
       97 		     return;
       98 		end;
       99 	end;
      100 
      101 	call pnt_manager_$create (dirname, entryname, size, code);
      102 	if code ^= 0
      103 	then call com_err_ (code, ME, "Creating PNT ^a.", pathname_ (dirname, entryname));
      104 	return;
      105 
      106      end create_pnt;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    12/05/84  0856.9  create_pnt.pl1                    >special_ldd>temp>as>create_pnt.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
ME                              000000 constant        char(32)                 initial unaligned dcl 50 set ref 57* 63* 63* 71* 83*
                                                                                  91* 96* 102*
SIZE_DEFAULT                           constant        fixed bin(17,0)          initial dcl 51 ref 75
argument                               based           char                     unaligned dcl 46 set ref 68* 71* 79 88* 91* 96*
argument_idx                    000100 automatic       fixed bin(17,0)          dcl 18 set ref 77* 78* 81 86* 86 87*
argument_lth                    000101 automatic       fixed bin(21,0)          dcl 19 set ref 67* 68 68 71 71 78* 79 87* 88 88 91
                                                                                  91 96 96
argument_ptr                    000102 automatic       pointer                  dcl 20 set ref 67* 68 71 78* 79 87* 88 91 96
code                            000104 automatic       fixed bin(35,0)          dcl 21 set ref 54* 55 57* 68* 69 71* 88* 89 101* 102
                                                                                  102*
com_err_                        000010 constant        entry                    external dcl 29 ref 57 63 71 83 91 96 102
cu_$arg_count                   000012 constant        entry                    external dcl 30 ref 54
cu_$arg_ptr                     000014 constant        entry                    external dcl 31 ref 67 78 87
cv_dec_check_                   000016 constant        entry                    external dcl 32 ref 88
dirname                         000105 automatic       char(168)                unaligned dcl 22 set ref 68* 101* 102* 102*
entryname                       000157 automatic       char(32)                 unaligned dcl 23 set ref 68* 101* 102* 102*
error_table_$bad_arg            000030 external static fixed bin(35,0)          dcl 41 set ref 91*
error_table_$badopt             000032 external static fixed bin(35,0)          dcl 42 set ref 96*
error_table_$noarg              000026 external static fixed bin(35,0)          dcl 40 set ref 83*
expand_pathname_$add_suffix     000020 constant        entry                    external dcl 33 ref 68
n_arguments                     000167 automatic       fixed bin(17,0)          dcl 24 set ref 54* 61 77 81
pathname_                       000022 constant        entry                    external dcl 35 ref 102 102
pnt_manager_$create             000024 constant        entry                    external dcl 36 ref 101
size                            000170 automatic       fixed bin(17,0)          dcl 25 set ref 75* 88* 101*

NAME DECLARED BY EXPLICIT CONTEXT.
create_pnt                      000052 constant        entry                    external dcl 13

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       734         770     602         744
Length      1154     602        34         150     132           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
create_pnt                          236 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
create_pnt               000100 argument_idx                create_pnt
                         000101 argument_lth                create_pnt
                         000102 argument_ptr                create_pnt
                         000104 code                        create_pnt
                         000105 dirname                     create_pnt
                         000157 entryname                   create_pnt
                         000167 n_arguments                 create_pnt
                         000170 size                        create_pnt

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return              ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      cu_$arg_count                 cu_$arg_ptr                   cv_dec_check_
expand_pathname_$add_suffix   pathname_                     pnt_manager_$create

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$bad_arg          error_table_$badopt           error_table_$noarg


CONSTANTS
000000  aa  143 162 145 141	crea
000001  aa  164 145 137 160	te_p
000002  aa  156 164 040 040	nt  
000003  aa  040 040 040 040	    
000004  aa  040 040 040 040	    
000005  aa  040 040 040 040	    
000006  aa  040 040 040 040	    
000007  aa  040 040 040 040	    

000010  aa     524000000250

000011  aa     524000000020

000012  aa     404000000021

000013  aa     524000000010

000014  aa     524000000005

000015  aa     524000000002

000016  aa     524000000003

000017  aa  160 156 164 000	pnt

000020  aa     526000000000

000021  aa     524000000053

000022  aa     404000000005

000023  aa     526000000040

000024  aa     526000000250

000025  aa     404000000043

000026  aa  055 163 151 172	-siz
000027  aa  145 040 136 141	e ^a

000030  aa  055 163 151 172	-siz
000031  aa  145 000 000 000	e

000032  aa  103 162 145 141	Crea
000033  aa  164 151 156 147	ting
000034  aa  040 120 116 124	 PNT
000035  aa  040 136 141 056	 ^a.

000036  aa  125 163 141 147	Usag
000037  aa  145 072 040 136	e: ^
000040  aa  141 040 160 141	a pa
000041  aa  164 150 156 141	thna
000042  aa  155 145 137 157	me_o
000043  aa  146 137 156 145	f_ne
000044  aa  167 137 160 156	w_pn
000045  aa  164 040 055 143	t -c
000046  aa  157 156 164 162	ontr
000047  aa  157 154 137 141	ol_a
000050  aa  162 147 163 000	rgs

BEGIN PROCEDURE create_pnt
ENTRY TO create_pnt                                         STATEMENT 1 ON LINE 13
create_pnt:
     procedure options (variable);

000051  da     000126240000
000052  aa   000360 6270 00	eax7 	240
000053  aa  7 00034 3521 20	epp2 	pr7|28,*
000054  aa  2 01045 2721 00	tsp2 	pr2|549		ext_entry
000055  aa     000000000000
000056  aa     000000000000
						STATEMENT 1 ON LINE 54
	call cu_$arg_count (n_arguments, code);

000057  aa  6 00167 3521 00	epp2 	pr6|119		n_arguments
000060  aa  6 00174 2521 00	spri2	pr6|124
000061  aa  6 00104 3521 00	epp2 	pr6|68		code
000062  aa  6 00176 2521 00	spri2	pr6|126
000063  aa  6 00172 6211 00	eax1 	pr6|122
000064  aa   010000 4310 07	fld  	4096,dl
000065  la  4 00012 3521 20	epp2 	pr4|10,*		cu_$arg_count
000066  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 55
	if code ^= 0
	then do;

000067  aa  6 00104 2361 00	ldq  	pr6|68		code
000070  aa   000017 6000 04	tze  	15,ic		000107
						STATEMENT 1 ON LINE 57
		call com_err_ (code, ME);

000071  aa  6 00104 3521 00	epp2 	pr6|68		code
000072  aa  6 00202 2521 00	spri2	pr6|130
000073  aa   777705 3520 04	epp2 	-59,ic		000000 = 143162145141
000074  aa  6 00204 2521 00	spri2	pr6|132
000075  aa   777730 3520 04	epp2 	-40,ic		000025 = 404000000043
000076  aa  6 00206 2521 00	spri2	pr6|134
000077  aa   777724 3520 04	epp2 	-44,ic		000023 = 526000000040
000100  aa  6 00210 2521 00	spri2	pr6|136
000101  aa  6 00200 6211 00	eax1 	pr6|128
000102  aa   010000 4310 07	fld  	4096,dl
000103  aa  6 00044 3701 20	epp4 	pr6|36,*
000104  la  4 00010 3521 20	epp2 	pr4|8,*		com_err_
000105  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 58
		return;

000106  aa  0 00631 7101 00	tra  	pr0|409		return
						STATEMENT 1 ON LINE 59
	     end;

						STATEMENT 1 ON LINE 61
	if n_arguments = 0
	then do;

000107  aa  6 00167 2361 00	ldq  	pr6|119		n_arguments
000110  aa   000032 6010 04	tnz  	26,ic		000142
						STATEMENT 1 ON LINE 63
		call com_err_ (0, ME, "Usage: ^a pathname_of_new_pnt -control_args", ME);

000111  aa  6 00212 4501 00	stz  	pr6|138
000112  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
000113  aa   777724 00 0054	desc9a	-44,44		000036 = 125163141147
000114  aa  6 00214 00 0054	desc9a	pr6|140,44
000115  aa  6 00212 3521 00	epp2 	pr6|138
000116  aa  6 00232 2521 00	spri2	pr6|154
000117  aa   777661 3520 04	epp2 	-79,ic		000000 = 143162145141
000120  aa  6 00234 2521 00	spri2	pr6|156
000121  aa  6 00214 3521 00	epp2 	pr6|140
000122  aa  6 00236 2521 00	spri2	pr6|158
000123  aa   777655 3520 04	epp2 	-83,ic		000000 = 143162145141
000124  aa  6 00240 2521 00	spri2	pr6|160
000125  aa   777675 3520 04	epp2 	-67,ic		000022 = 404000000005
000126  aa  6 00242 2521 00	spri2	pr6|162
000127  aa   777674 3520 04	epp2 	-68,ic		000023 = 526000000040
000130  aa  6 00244 2521 00	spri2	pr6|164
000131  aa  6 00250 2521 00	spri2	pr6|168
000132  aa   777667 3520 04	epp2 	-73,ic		000021 = 524000000053
000133  aa  6 00246 2521 00	spri2	pr6|166
000134  aa  6 00230 6211 00	eax1 	pr6|152
000135  aa   020000 4310 07	fld  	8192,dl
000136  aa  6 00044 3701 20	epp4 	pr6|36,*
000137  la  4 00010 3521 20	epp2 	pr4|8,*		com_err_
000140  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 64
		return;

000141  aa  0 00631 7101 00	tra  	pr0|409		return
						STATEMENT 1 ON LINE 65
	     end;

						STATEMENT 1 ON LINE 67
	call cu_$arg_ptr (1, argument_ptr, argument_lth, (0));

000142  aa   000001 2360 07	ldq  	1,dl
000143  aa  6 00212 7561 00	stq  	pr6|138
000144  aa  6 00227 4501 00	stz  	pr6|151
000145  aa  6 00212 3521 00	epp2 	pr6|138
000146  aa  6 00202 2521 00	spri2	pr6|130
000147  aa  6 00102 3521 00	epp2 	pr6|66		argument_ptr
000150  aa  6 00204 2521 00	spri2	pr6|132
000151  aa  6 00101 3521 00	epp2 	pr6|65		argument_lth
000152  aa  6 00206 2521 00	spri2	pr6|134
000153  aa  6 00227 3521 00	epp2 	pr6|151
000154  aa  6 00210 2521 00	spri2	pr6|136
000155  aa  6 00200 6211 00	eax1 	pr6|128
000156  aa   020000 4310 07	fld  	8192,dl
000157  aa  6 00044 3701 20	epp4 	pr6|36,*
000160  la  4 00014 3521 20	epp2 	pr4|12,*		cu_$arg_ptr
000161  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 68
	call expand_pathname_$add_suffix (argument, "pnt", dirname, entryname, code);

000162  aa  6 00101 2361 00	ldq  	pr6|65		argument_lth
000163  aa   526000 2760 03	orq  	175104,du
000164  aa  6 00227 7561 00	stq  	pr6|151
000165  aa   777632 2350 04	lda  	-102,ic		000017 = 160156164000
000166  aa  6 00212 7551 00	sta  	pr6|138
000167  aa  6 00102 3521 20	epp2 	pr6|66,*		argument
000170  aa  6 00254 2521 00	spri2	pr6|172
000171  aa  6 00212 3521 00	epp2 	pr6|138
000172  aa  6 00256 2521 00	spri2	pr6|174
000173  aa  6 00105 3521 00	epp2 	pr6|69		dirname
000174  aa  6 00260 2521 00	spri2	pr6|176
000175  aa  6 00157 3521 00	epp2 	pr6|111		entryname
000176  aa  6 00262 2521 00	spri2	pr6|178
000177  aa  6 00104 3521 00	epp2 	pr6|68		code
000200  aa  6 00264 2521 00	spri2	pr6|180
000201  aa  6 00227 3521 00	epp2 	pr6|151
000202  aa  6 00266 2521 00	spri2	pr6|182
000203  aa   777613 3520 04	epp2 	-117,ic		000016 = 524000000003
000204  aa  6 00270 2521 00	spri2	pr6|184
000205  aa   777617 3520 04	epp2 	-113,ic		000024 = 526000000250
000206  aa  6 00272 2521 00	spri2	pr6|186
000207  aa   777614 3520 04	epp2 	-116,ic		000023 = 526000000040
000210  aa  6 00274 2521 00	spri2	pr6|188
000211  aa   777614 3520 04	epp2 	-116,ic		000025 = 404000000043
000212  aa  6 00276 2521 00	spri2	pr6|190
000213  aa  6 00252 6211 00	eax1 	pr6|170
000214  aa   024000 4310 07	fld  	10240,dl
000215  aa  6 00044 3701 20	epp4 	pr6|36,*
000216  la  4 00020 3521 20	epp2 	pr4|16,*		expand_pathname_$add_suffix
000217  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 69
	if code ^= 0
	then do;

000220  aa  6 00104 2361 00	ldq  	pr6|68		code
000221  aa   000034 6000 04	tze  	28,ic		000255
						STATEMENT 1 ON LINE 71
		call com_err_ (code, ME, "^a", argument);

000222  aa  6 00101 2361 00	ldq  	pr6|65		argument_lth
000223  aa   526000 2760 03	orq  	175104,du
000224  aa  6 00227 7561 00	stq  	pr6|151
000225  aa   136141 2350 03	lda  	48225,du
000226  aa  6 00212 7551 00	sta  	pr6|138
000227  aa  6 00104 3521 00	epp2 	pr6|68		code
000230  aa  6 00232 2521 00	spri2	pr6|154
000231  aa   777547 3520 04	epp2 	-153,ic		000000 = 143162145141
000232  aa  6 00234 2521 00	spri2	pr6|156
000233  aa  6 00212 3521 00	epp2 	pr6|138
000234  aa  6 00236 2521 00	spri2	pr6|158
000235  aa  6 00102 3521 20	epp2 	pr6|66,*		argument
000236  aa  6 00240 2521 00	spri2	pr6|160
000237  aa   777566 3520 04	epp2 	-138,ic		000025 = 404000000043
000240  aa  6 00242 2521 00	spri2	pr6|162
000241  aa   777562 3520 04	epp2 	-142,ic		000023 = 526000000040
000242  aa  6 00244 2521 00	spri2	pr6|164
000243  aa   777552 3520 04	epp2 	-150,ic		000015 = 524000000002
000244  aa  6 00246 2521 00	spri2	pr6|166
000245  aa  6 00227 3521 00	epp2 	pr6|151
000246  aa  6 00250 2521 00	spri2	pr6|168
000247  aa  6 00230 6211 00	eax1 	pr6|152
000250  aa   020000 4310 07	fld  	8192,dl
000251  aa  6 00044 3701 20	epp4 	pr6|36,*
000252  la  4 00010 3521 20	epp2 	pr4|8,*		com_err_
000253  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 72
		return;

000254  aa  0 00631 7101 00	tra  	pr0|409		return
						STATEMENT 1 ON LINE 73
	     end;

						STATEMENT 1 ON LINE 75
	size = SIZE_DEFAULT;

000255  aa   000144 2360 07	ldq  	100,dl
000256  aa  6 00170 7561 00	stq  	pr6|120		size
						STATEMENT 1 ON LINE 77
	do argument_idx = 2 to n_arguments;

000257  aa  6 00167 2361 00	ldq  	pr6|119		n_arguments
000260  aa  6 00171 7561 00	stq  	pr6|121
000261  aa   000002 2360 07	ldq  	2,dl
000262  aa  6 00100 7561 00	stq  	pr6|64		argument_idx
000263  aa   000000 0110 03	nop  	0,du
000264  aa  6 00100 2361 00	ldq  	pr6|64		argument_idx
000265  aa  6 00171 1161 00	cmpq 	pr6|121
000266  aa   000213 6054 04	tpnz 	139,ic		000501
						STATEMENT 1 ON LINE 78
	     call cu_$arg_ptr (argument_idx, argument_ptr, argument_lth, (0));

000267  aa  6 00227 4501 00	stz  	pr6|151
000270  aa  6 00100 3521 00	epp2 	pr6|64		argument_idx
000271  aa  6 00202 2521 00	spri2	pr6|130
000272  aa  6 00102 3521 00	epp2 	pr6|66		argument_ptr
000273  aa  6 00204 2521 00	spri2	pr6|132
000274  aa  6 00101 3521 00	epp2 	pr6|65		argument_lth
000275  aa  6 00206 2521 00	spri2	pr6|134
000276  aa  6 00227 3521 00	epp2 	pr6|151
000277  aa  6 00210 2521 00	spri2	pr6|136
000300  aa  6 00200 6211 00	eax1 	pr6|128
000301  aa   020000 4310 07	fld  	8192,dl
000302  aa  6 00044 3701 20	epp4 	pr6|36,*
000303  la  4 00014 3521 20	epp2 	pr4|12,*		cu_$arg_ptr
000304  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 79
	     if argument = "-size"
	     then do;

000305  aa  6 00102 3735 20	epp7 	pr6|66,*		argument_ptr
000306  aa  6 00101 2351 00	lda  	pr6|65		argument_lth
000307  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
000310  aa  7 00000 00 0005	desc9a	pr7|0,al		argument
000311  aa   777521 00 0005	desc9a	-175,5		000030 = 055163151172
000312  aa   000132 6010 04	tnz  	90,ic		000444
						STATEMENT 1 ON LINE 81
		     if argument_idx = n_arguments
		     then do;

000313  aa  6 00100 2361 00	ldq  	pr6|64		argument_idx
000314  aa  6 00167 1161 00	cmpq 	pr6|119		n_arguments
000315  aa   000025 6010 04	tnz  	21,ic		000342
						STATEMENT 1 ON LINE 83
			     call com_err_ (error_table_$noarg, ME, "-size");

000316  aa   777512 2370 04	ldaq 	-182,ic		000030 = 055163151172 145000000000
000317  aa  6 00300 7571 00	staq 	pr6|192
000320  aa  6 00044 3701 20	epp4 	pr6|36,*
000321  la  4 00026 3521 20	epp2 	pr4|22,*		error_table_$noarg
000322  aa  6 00232 2521 00	spri2	pr6|154
000323  aa   777455 3520 04	epp2 	-211,ic		000000 = 143162145141
000324  aa  6 00234 2521 00	spri2	pr6|156
000325  aa  6 00300 3521 00	epp2 	pr6|192
000326  aa  6 00236 2521 00	spri2	pr6|158
000327  aa   777476 3520 04	epp2 	-194,ic		000025 = 404000000043
000330  aa  6 00240 2521 00	spri2	pr6|160
000331  aa   777472 3520 04	epp2 	-198,ic		000023 = 526000000040
000332  aa  6 00242 2521 00	spri2	pr6|162
000333  aa   777461 3520 04	epp2 	-207,ic		000014 = 524000000005
000334  aa  6 00244 2521 00	spri2	pr6|164
000335  aa  6 00230 6211 00	eax1 	pr6|152
000336  aa   014000 4310 07	fld  	6144,dl
000337  la  4 00010 3521 20	epp2 	pr4|8,*		com_err_
000340  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 84
			     return;

000341  aa  0 00631 7101 00	tra  	pr0|409		return
						STATEMENT 1 ON LINE 85
			end;

						STATEMENT 1 ON LINE 86
		     argument_idx = argument_idx + 1;

000342  aa  6 00100 0541 00	aos  	pr6|64		argument_idx
						STATEMENT 1 ON LINE 87
		     call cu_$arg_ptr (argument_idx, argument_ptr, argument_lth, (0));

000343  aa  6 00227 4501 00	stz  	pr6|151
000344  aa  6 00100 3521 00	epp2 	pr6|64		argument_idx
000345  aa  6 00202 2521 00	spri2	pr6|130
000346  aa  6 00102 3521 00	epp2 	pr6|66		argument_ptr
000347  aa  6 00204 2521 00	spri2	pr6|132
000350  aa  6 00101 3521 00	epp2 	pr6|65		argument_lth
000351  aa  6 00206 2521 00	spri2	pr6|134
000352  aa  6 00227 3521 00	epp2 	pr6|151
000353  aa  6 00210 2521 00	spri2	pr6|136
000354  aa  6 00200 6211 00	eax1 	pr6|128
000355  aa   020000 4310 07	fld  	8192,dl
000356  aa  6 00044 3701 20	epp4 	pr6|36,*
000357  la  4 00014 3521 20	epp2 	pr4|12,*		cu_$arg_ptr
000360  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 88
		     size = cv_dec_check_ (argument, code);

000361  aa  6 00101 2361 00	ldq  	pr6|65		argument_lth
000362  aa   526000 2760 03	orq  	175104,du
000363  aa  6 00227 7561 00	stq  	pr6|151
000364  aa  6 00102 3521 20	epp2 	pr6|66,*		argument
000365  aa  6 00232 2521 00	spri2	pr6|154
000366  aa  6 00104 3521 00	epp2 	pr6|68		code
000367  aa  6 00234 2521 00	spri2	pr6|156
000370  aa  6 00212 3521 00	epp2 	pr6|138
000371  aa  6 00236 2521 00	spri2	pr6|158
000372  aa  6 00227 3521 00	epp2 	pr6|151
000373  aa  6 00240 2521 00	spri2	pr6|160
000374  aa   777431 3520 04	epp2 	-231,ic		000025 = 404000000043
000375  aa  6 00242 2521 00	spri2	pr6|162
000376  aa  6 00244 2521 00	spri2	pr6|164
000377  aa  6 00230 6211 00	eax1 	pr6|152
000400  aa   014000 4310 07	fld  	6144,dl
000401  aa  6 00044 3701 20	epp4 	pr6|36,*
000402  la  4 00016 3521 20	epp2 	pr4|14,*		cv_dec_check_
000403  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
000404  aa  6 00212 2361 00	ldq  	pr6|138
000405  aa  6 00170 7561 00	stq  	pr6|120		size
						STATEMENT 1 ON LINE 89
		     if code ^= 0
		     then do;

000406  aa  6 00104 2361 00	ldq  	pr6|68		code
000407  aa   000070 6000 04	tze  	56,ic		000477
						STATEMENT 1 ON LINE 91
			     call com_err_ (error_table_$bad_arg, ME, "-size ^a", argument);

000410  aa  6 00101 2361 00	ldq  	pr6|65		argument_lth
000411  aa   526000 2760 03	orq  	175104,du
000412  aa  6 00227 7561 00	stq  	pr6|151
000413  aa   777413 2370 04	ldaq 	-245,ic		000026 = 055163151172 145040136141
000414  aa  6 00300 7571 00	staq 	pr6|192
000415  aa  6 00044 3701 20	epp4 	pr6|36,*
000416  la  4 00030 3521 20	epp2 	pr4|24,*		error_table_$bad_arg
000417  aa  6 00232 2521 00	spri2	pr6|154
000420  aa   777360 3520 04	epp2 	-272,ic		000000 = 143162145141
000421  aa  6 00234 2521 00	spri2	pr6|156
000422  aa  6 00300 3521 00	epp2 	pr6|192
000423  aa  6 00236 2521 00	spri2	pr6|158
000424  aa  6 00102 3521 20	epp2 	pr6|66,*		argument
000425  aa  6 00240 2521 00	spri2	pr6|160
000426  aa   777377 3520 04	epp2 	-257,ic		000025 = 404000000043
000427  aa  6 00242 2521 00	spri2	pr6|162
000430  aa   777373 3520 04	epp2 	-261,ic		000023 = 526000000040
000431  aa  6 00244 2521 00	spri2	pr6|164
000432  aa   777361 3520 04	epp2 	-271,ic		000013 = 524000000010
000433  aa  6 00246 2521 00	spri2	pr6|166
000434  aa  6 00227 3521 00	epp2 	pr6|151
000435  aa  6 00250 2521 00	spri2	pr6|168
000436  aa  6 00230 6211 00	eax1 	pr6|152
000437  aa   020000 4310 07	fld  	8192,dl
000440  la  4 00010 3521 20	epp2 	pr4|8,*		com_err_
000441  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 92
			     return;

000442  aa  0 00631 7101 00	tra  	pr0|409		return
						STATEMENT 1 ON LINE 93
			end;

						STATEMENT 1 ON LINE 94
		end;

000443  aa   000034 7100 04	tra  	28,ic		000477
						STATEMENT 1 ON LINE 95
	     else do;

						STATEMENT 1 ON LINE 96
		     call com_err_ (error_table_$badopt, ME, "^a", argument);

000444  aa  6 00101 2361 00	ldq  	pr6|65		argument_lth
000445  aa   526000 2760 03	orq  	175104,du
000446  aa  6 00227 7561 00	stq  	pr6|151
000447  aa   136141 2350 03	lda  	48225,du
000450  aa  6 00212 7551 00	sta  	pr6|138
000451  aa  6 00044 3701 20	epp4 	pr6|36,*
000452  la  4 00032 3521 20	epp2 	pr4|26,*		error_table_$badopt
000453  aa  6 00232 2521 00	spri2	pr6|154
000454  aa   777324 3520 04	epp2 	-300,ic		000000 = 143162145141
000455  aa  6 00234 2521 00	spri2	pr6|156
000456  aa  6 00212 3521 00	epp2 	pr6|138
000457  aa  6 00236 2521 00	spri2	pr6|158
000460  aa  7 00000 3521 00	epp2 	pr7|0		argument
000461  aa  6 00240 2521 00	spri2	pr6|160
000462  aa   777343 3520 04	epp2 	-285,ic		000025 = 404000000043
000463  aa  6 00242 2521 00	spri2	pr6|162
000464  aa   777337 3520 04	epp2 	-289,ic		000023 = 526000000040
000465  aa  6 00244 2521 00	spri2	pr6|164
000466  aa   777327 3520 04	epp2 	-297,ic		000015 = 524000000002
000467  aa  6 00246 2521 00	spri2	pr6|166
000470  aa  6 00227 3521 00	epp2 	pr6|151
000471  aa  6 00250 2521 00	spri2	pr6|168
000472  aa  6 00230 6211 00	eax1 	pr6|152
000473  aa   020000 4310 07	fld  	8192,dl
000474  la  4 00010 3521 20	epp2 	pr4|8,*		com_err_
000475  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 97
		     return;

000476  aa  0 00631 7101 00	tra  	pr0|409		return
						STATEMENT 1 ON LINE 98
		end;

						STATEMENT 1 ON LINE 99
	end;

000477  aa  6 00100 0541 00	aos  	pr6|64		argument_idx
000500  aa   777564 7100 04	tra  	-140,ic		000264
						STATEMENT 1 ON LINE 101
	call pnt_manager_$create (dirname, entryname, size, code);

000501  aa  6 00105 3521 00	epp2 	pr6|69		dirname
000502  aa  6 00232 2521 00	spri2	pr6|154
000503  aa  6 00157 3521 00	epp2 	pr6|111		entryname
000504  aa  6 00234 2521 00	spri2	pr6|156
000505  aa  6 00170 3521 00	epp2 	pr6|120		size
000506  aa  6 00236 2521 00	spri2	pr6|158
000507  aa  6 00104 3521 00	epp2 	pr6|68		code
000510  aa  6 00240 2521 00	spri2	pr6|160
000511  aa   777313 3520 04	epp2 	-309,ic		000024 = 526000000250
000512  aa  6 00242 2521 00	spri2	pr6|162
000513  aa   777310 3520 04	epp2 	-312,ic		000023 = 526000000040
000514  aa  6 00244 2521 00	spri2	pr6|164
000515  aa   777275 3520 04	epp2 	-323,ic		000012 = 404000000021
000516  aa  6 00246 2521 00	spri2	pr6|166
000517  aa   777306 3520 04	epp2 	-314,ic		000025 = 404000000043
000520  aa  6 00250 2521 00	spri2	pr6|168
000521  aa  6 00230 6211 00	eax1 	pr6|152
000522  aa   020000 4310 07	fld  	8192,dl
000523  aa  6 00044 3701 20	epp4 	pr6|36,*
000524  la  4 00024 3521 20	epp2 	pr4|20,*		pnt_manager_$create
000525  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 102
	if code ^= 0
	then call com_err_ (code, ME, "Creating PNT ^a.", pathname_ (dirname, entryname));

000526  aa  6 00104 2361 00	ldq  	pr6|68		code
000527  aa   000052 6000 04	tze  	42,ic		000601
000530  aa   777302 2370 04	ldaq 	-318,ic		000032 = 103162145141 164151156147
000531  aa  6 00172 7571 00	staq 	pr6|122
000532  aa   777302 2370 04	ldaq 	-318,ic		000034 = 040120116124 040136141056
000533  aa  6 00174 7571 00	staq 	pr6|124
000534  aa  6 00105 3521 00	epp2 	pr6|69		dirname
000535  aa  6 00232 2521 00	spri2	pr6|154
000536  aa  6 00157 3521 00	epp2 	pr6|111		entryname
000537  aa  6 00234 2521 00	spri2	pr6|156
000540  aa  6 00302 3521 00	epp2 	pr6|194
000541  aa  6 00236 2521 00	spri2	pr6|158
000542  aa   777262 3520 04	epp2 	-334,ic		000024 = 526000000250
000543  aa  6 00240 2521 00	spri2	pr6|160
000544  aa  6 00244 2521 00	spri2	pr6|164
000545  aa   777256 3520 04	epp2 	-338,ic		000023 = 526000000040
000546  aa  6 00242 2521 00	spri2	pr6|162
000547  aa  6 00230 6211 00	eax1 	pr6|152
000550  aa   014000 4310 07	fld  	6144,dl
000551  aa  6 00044 3701 20	epp4 	pr6|36,*
000552  la  4 00022 3521 20	epp2 	pr4|18,*		pathname_
000553  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
000554  aa  6 00104 3521 00	epp2 	pr6|68		code
000555  aa  6 00232 2521 00	spri2	pr6|154
000556  aa   777222 3520 04	epp2 	-366,ic		000000 = 143162145141
000557  aa  6 00234 2521 00	spri2	pr6|156
000560  aa  6 00172 3521 00	epp2 	pr6|122
000561  aa  6 00236 2521 00	spri2	pr6|158
000562  aa  6 00302 3521 00	epp2 	pr6|194
000563  aa  6 00240 2521 00	spri2	pr6|160
000564  aa   777241 3520 04	epp2 	-351,ic		000025 = 404000000043
000565  aa  6 00242 2521 00	spri2	pr6|162
000566  aa   777235 3520 04	epp2 	-355,ic		000023 = 526000000040
000567  aa  6 00244 2521 00	spri2	pr6|164
000570  aa   777221 3520 04	epp2 	-367,ic		000011 = 524000000020
000571  aa  6 00246 2521 00	spri2	pr6|166
000572  aa   777216 3520 04	epp2 	-370,ic		000010 = 524000000250
000573  aa  6 00250 2521 00	spri2	pr6|168
000574  aa  6 00230 6211 00	eax1 	pr6|152
000575  aa   020000 4310 07	fld  	8192,dl
000576  aa  6 00044 3701 20	epp4 	pr6|36,*
000577  la  4 00010 3521 20	epp2 	pr4|8,*		com_err_
000600  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 104
	return;

000601  aa  0 00631 7101 00	tra  	pr0|409		return
						STATEMENT 1 ON LINE 106
     end create_pnt;

  END PROCEDURE create_pnt


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
