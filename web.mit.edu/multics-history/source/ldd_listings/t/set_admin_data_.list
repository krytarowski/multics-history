	COMPILATION LISTING OF SEGMENT set_admin_data_
	Compiled by: Multics PL/I Compiler, Release 28d, of October 4, 1983
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 01/22/85  1436.8 mst Tue
	    Options: optimize list

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 
        7 /* ******************************************************
        8*   *                                                    *
        9*   *                                                    *
       10*   * Copyright (c) 1972 by Massachusetts Institute of   *
       11*   * Technology and Honeywell Information Systems, Inc. *
       12*   *                                                    *
       13*   *                                                    *
       14*   ****************************************************** */
       15 
       16 set_admin_data_: proc;
       17 
       18 /* originally coded by K.Willis 3/26/71 */
       19 
  1     1 /* BEGIN INCLUDE FILE ... sys_admin_data.incl.pl1 */
  1     2 
  1     3 /* This data base is writeable by all system administrators.
  1     4*   It resides in the working directory of the system administrators.
  1     5*   The important item in this data base is "lock", which is used to prevent
  1     6*   two administrators from modifying the system administration data bases simultaneously. */
  1     7 
  1     8 /* Modified 1984-12-14 by EJ Sharpe to add default_audit_flags, and remove log_control */
  1     9 
  1    10 dcl 1 sys_admin_data based (sadp) aligned,
  1    11     2 lock bit (36),
  1    12     2 locker char (24),				/* name of person using table */
  1    13     2 sadxx fixed bin,
  1    14     2 time_locked fixed bin (71),
  1    15     2 pntno fixed bin,
  1    16     2 pnt_entries_to_install bit (1),
  1    17     2 smf_entries_to_install bit (1),
  1    18     2 pad1 (97) fixed bin,				/* was log_control stuff before MR11 */
  1    19     2 user_accounts_office char (64),
  1    20     2 user_accounts_addr char (64),
  1    21     2 user_accounts_phone char (16),
  1    22     2 mailing_banner (3) char (10),			/* Used by mailing_page_ */
  1    23     2 default_proj_attributes bit (36),			/* Used by new_proj */
  1    24     2 default_proj_ring1 fixed bin,			/* .. */
  1    25     2 default_proj_ring2 fixed bin,			/* .. */
  1    26     2 default_proj_group char (8),			/* .. */
  1    27     2 default_proj_grace fixed bin,			/* .. */
  1    28     2 default_audit_flags bit (36) aligned;		/* initial set of flags for new_user and edit_proj */
  1    29 
  1    30 /* END INCLUDE FILE .. sys_admin_data.incl.pl1 */
       20 
       21 
       22 dcl  sadp ptr int static init (null),			 /* ptr to sys_admin_data */
       23      null builtin,
       24      ec fixed bin,
       25      user_info_ entry options (variable),
       26      myname char (32) aligned,			 /* name of caller */
       27      myproj char (9),				 /* project of caller */
       28      get_wdir_ entry returns (char (168) aligned),
       29      hcs_$initiate entry (char (*) aligned, char (*) aligned, char (*) aligned,
       30      fixed bin (1), fixed bin (2), ptr, fixed bin),
       31      com_err_ entry options (variable),
       32      ioa_ entry options (variable),
       33      set_lock_$lock entry (bit (36) aligned, fixed bin, fixed bin),
       34      set_lock_$unlock entry (bit (36) aligned, fixed bin);
       35 
       36 dcl  error_table_$invalid_lock_reset fixed bin ext,
       37      error_table_$locked_by_this_process fixed bin ext;
       38 
       39 /* this entry unlocks sys_admin_data only if called by the locker */
       40 unlock:	entry;
       41 	if sadp = null then call setup;
       42 	call set_lock_$unlock (sadp -> lock, ec);
       43 	return;
       44 
       45 
       46 
       47 /* If sys_admin_data was locked by the same caller since system initialization, this entry returns the value 2.
       48*   If sys_admin_data was locked by a different caller since the system was initialized, this entry returns
       49*   the value 1 indicating that the caller should not use the table.  Otherwise it locks the table
       50*   and returns the value 0 indicating that the caller may use sys_admin_data_ but noe one else
       51*   will be permitted to use it until the caller unlocks it.  */
       52 
       53 
       54 lock:	entry returns (fixed bin);
       55 	if sadp = null then call setup;		 /* get pointer to sys_admin_data */
       56 	call set_lock_$lock (sadp -> lock, 1, ec);
       57 	if ec = 0 then do;
       58 ok:	     call user_info_ (myname, myproj);		 /* get name of caller */
       59 	     sadp -> locker = myname;			 /* fill in locker's name */
       60 	     return (0);				 /* show success */
       61 	end;
       62 	else if ec = error_table_$invalid_lock_reset then go to ok;
       63 	else if ec = error_table_$locked_by_this_process then do;
       64 	     return (2);
       65 	end;
       66 	else do;
       67 	     call ioa_ ("sys_admin_data is locked by ^a", sadp -> locker);
       68 	     return (1);
       69 	end;
       70 
       71 setup:	proc;
       72 
       73 	     call hcs_$initiate ((get_wdir_ ()), "sys_admin_data", "", 0, 1, sadp, ec);
       74 	     if sadp = null then call com_err_ (ec, "set_admin_data_", "sys_admin_data");
       75 
       76 	end setup;
       77 
       78      end set_admin_data_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    01/22/85  1240.9  set_admin_data_.pl1               >spec>temp>41-5>set_admin_data_.pl1
20           1    01/22/85  1321.5  sys_admin_data.incl.pl1           >spec>temp>41-5>sys_admin_data.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
com_err_                        000020 constant        entry                    external dcl 22 ref 74
ec                              000100 automatic       fixed bin(17,0)          dcl 22 set ref 42* 56* 57 62 63 73* 74*
error_table_$invalid_lock_reset 000030 external static fixed bin(17,0)          dcl 36 ref 62
error_table_$locked_by_this_process
                                000032 external static fixed bin(17,0)          dcl 36 ref 63
get_wdir_                       000014 constant        entry                    external dcl 22 ref 73
hcs_$initiate                   000016 constant        entry                    external dcl 22 ref 73
ioa_                            000022 constant        entry                    external dcl 22 ref 67
lock                                   based           bit(36)                  level 2 dcl 1-10 set ref 42* 56*
locker                    1            based           char(24)                 level 2 dcl 1-10 set ref 59* 67*
myname                          000101 automatic       char(32)                 dcl 22 set ref 58* 59
myproj                          000111 automatic       char(9)                  unaligned dcl 22 set ref 58*
null                                                   builtin function         dcl 22 ref 41 55 74
sadp                            000010 internal static pointer                  initial dcl 22 set ref 41 42 55 56 59 67 73* 74
set_lock_$lock                  000024 constant        entry                    external dcl 22 ref 56
set_lock_$unlock                000026 constant        entry                    external dcl 22 ref 42
sys_admin_data                         based           structure                level 1 dcl 1-10
user_info_                      000012 constant        entry                    external dcl 22 ref 58

NAMES DECLARED BY EXPLICIT CONTEXT.
lock                            000115 constant        entry                    external dcl 54
ok                              000150 constant        label                    dcl 58 ref 62
set_admin_data_                 000045 constant        entry                    external dcl 16
setup                           000255 constant        entry                    internal dcl 71 ref 41 55
unlock                          000056 constant        entry                    external dcl 40

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       530         564     373         540
Length       770     373        34         170     134           2

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
set_admin_data_                     190 external procedure  is an external procedure.  
setup                                   internal procedure  shares stack frame of external procedure set_admin_data_.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 sadp                        set_admin_data_

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
set_admin_data_          000100 ec                          set_admin_data_
                         000101 myname                      set_admin_data_
                         000111 myproj                      set_admin_data_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return              signal              ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      get_wdir_                     hcs_$initiate                 ioa_
set_lock_$lock                set_lock_$unlock              user_info_

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$invalid_lock_reset                             error_table_$locked_by_this_process


CONSTANTS
000000  aa     524000000017

000001  aa     464000000000

000002  aa     404000000002

000003  aa     404000000001

000004  aa     524000000000

000005  aa     524000000016

000006  aa     524000000030

000007  aa     524000000036

000010  aa     526000000011

000011  aa     524000000040

000012  aa     524000000250

000013  aa     404000000021

000014  aa     077777000043
000015  aa     000001000000

000016  aa  163 145 164 137	set_
000017  aa  141 144 155 151	admi
000020  aa  156 137 144 141	n_da
000021  aa  164 141 137 000	ta_

000022  aa  163 171 163 137	sys_
000023  aa  141 144 155 151	admi
000024  aa  156 137 144 141	n_da
000025  aa  164 141 000 000	ta

000026  aa  162 145 164 165	retu
000027  aa  162 156 137 143	rn_c
000030  aa  157 156 166 145	onve
000031  aa  162 163 151 157	rsio
000032  aa  156 137 145 162	n_er
000033  aa  162 157 162 000	ror

000034  aa  163 171 163 137	sys_
000035  aa  141 144 155 151	admi
000036  aa  156 137 144 141	n_da
000037  aa  164 141 040 151	ta i
000040  aa  163 040 154 157	s lo
000041  aa  143 153 145 144	cked
000042  aa  040 142 171 040	 by 
000043  aa  136 141 000 000	^a

BEGIN PROCEDURE set_admin_data_
ENTRY TO set_admin_data_                                    STATEMENT 1 ON LINE 16
set_admin_data_: proc;

000044  da     000122200000
000045  aa   000300 6270 00	eax7 	192
000046  aa  7 00034 3521 20	epp2 	pr7|28,*
000047  aa  2 01045 2721 00	tsp2 	pr2|549		ext_entry
000050  aa     000000000000
000051  aa     000000000000
000052  aa   000001 2360 07	ldq  	1,dl
000053  aa  6 00114 7561 00	stq  	pr6|76
						STATEMENT 1 ON LINE 40
unlock:	entry;

000054  aa   000011 7100 04	tra  	9,ic		000065
ENTRY TO unlock                                             STATEMENT 1 ON LINE 40
unlock:	entry;

000055  da     000125200000
000056  aa   000300 6270 00	eax7 	192
000057  aa  7 00034 3521 20	epp2 	pr7|28,*
000060  aa  2 01045 2721 00	tsp2 	pr2|549		ext_entry
000061  aa     000000000000
000062  aa     000000000000
000063  aa   000001 2360 07	ldq  	1,dl
000064  aa  6 00114 7561 00	stq  	pr6|76
						STATEMENT 1 ON LINE 41
	if sadp = null then call setup;

000065  ia  4 00010 2371 00	ldaq 	pr4|8		sadp
000066  aa   777726 6770 04	eraq 	-42,ic		000014 = 077777000043 000001000000
000067  aa  0 00460 3771 00	anaq 	pr0|304		= 077777000077 777777077077
000070  aa   000002 6010 04	tnz  	2,ic		000072
000071  aa   000164 6700 04	tsp4 	116,ic		000255
						STATEMENT 1 ON LINE 42
	call set_lock_$unlock (sadp -> lock, ec);

000072  aa  6 00044 3701 20	epp4 	pr6|36,*
000073  ia  4 00010 3521 20	epp2 	pr4|8,*		sys_admin_data.lock
000074  aa  6 00126 2521 00	spri2	pr6|86
000075  aa  6 00100 3521 00	epp2 	pr6|64		ec
000076  aa  6 00130 2521 00	spri2	pr6|88
000077  aa  6 00124 6211 00	eax1 	pr6|84
000100  aa   010000 4310 07	fld  	4096,dl
000101  la  4 00026 3521 20	epp2 	pr4|22,*		set_lock_$unlock
000102  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 43
	return;

000103  aa  6 00114 2361 00	ldq  	pr6|76
000104  aa   000005 6010 04	tnz  	5,ic		000111
000105  aa   000027 7260 07	lxl6 	23,dl
000106  aa   777720 3520 04	epp2 	-48,ic		000026 = 162145164165
000107  aa  0 00716 7001 00	tsx0 	pr0|462		signal
000110  aa  0 00631 7101 00	tra  	pr0|409		return
000111  aa  0 00631 7101 00	tra  	pr0|409		return
ENTRY TO lock                                               STATEMENT 1 ON LINE 54
lock:	entry returns (fixed bin);

000112  at     000001000013
000113  ta     000112000000
000114  da     000130320000
000115  aa   000300 6270 00	eax7 	192
000116  aa  7 00034 3521 20	epp2 	pr7|28,*
000117  aa  2 01045 2721 00	tsp2 	pr2|549		ext_entry
000120  aa     000002000000
000121  aa     000000000000
000122  aa  6 00114 4501 00	stz  	pr6|76
						STATEMENT 1 ON LINE 55
	if sadp = null then call setup;

000123  aa  6 00044 3701 20	epp4 	pr6|36,*
000124  ia  4 00010 2371 00	ldaq 	pr4|8		sadp
000125  aa   777667 6770 04	eraq 	-73,ic		000014 = 077777000043 000001000000
000126  aa  0 00460 3771 00	anaq 	pr0|304		= 077777000077 777777077077
000127  aa   000002 6010 04	tnz  	2,ic		000131
000130  aa   000125 6700 04	tsp4 	85,ic		000255
						STATEMENT 1 ON LINE 56
	call set_lock_$lock (sadp -> lock, 1, ec);

000131  aa   000001 2360 07	ldq  	1,dl
000132  aa  6 00132 7561 00	stq  	pr6|90
000133  aa  6 00044 3701 20	epp4 	pr6|36,*
000134  ia  4 00010 3521 20	epp2 	pr4|8,*		sys_admin_data.lock
000135  aa  6 00136 2521 00	spri2	pr6|94
000136  aa  6 00132 3521 00	epp2 	pr6|90
000137  aa  6 00140 2521 00	spri2	pr6|96
000140  aa  6 00100 3521 00	epp2 	pr6|64		ec
000141  aa  6 00142 2521 00	spri2	pr6|98
000142  aa  6 00134 6211 00	eax1 	pr6|92
000143  aa   014000 4310 07	fld  	6144,dl
000144  la  4 00024 3521 20	epp2 	pr4|20,*		set_lock_$lock
000145  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 57
	if ec = 0 then do;

000146  aa  6 00100 2361 00	ldq  	pr6|64		ec
000147  aa   000034 6010 04	tnz  	28,ic		000203
						STATEMENT 1 ON LINE 58
ok:	     call user_info_ (myname, myproj);

000150  aa  6 00101 3521 00	epp2 	pr6|65		myname
000151  aa  6 00146 2521 00	spri2	pr6|102
000152  aa  6 00111 3521 00	epp2 	pr6|73		myproj
000153  aa  6 00150 2521 00	spri2	pr6|104
000154  aa   777635 3520 04	epp2 	-99,ic		000011 = 524000000040
000155  aa  6 00152 2521 00	spri2	pr6|106
000156  aa   777632 3520 04	epp2 	-102,ic		000010 = 526000000011
000157  aa  6 00154 2521 00	spri2	pr6|108
000160  aa  6 00144 6211 00	eax1 	pr6|100
000161  aa   010000 4310 07	fld  	4096,dl
000162  aa  6 00044 3701 20	epp4 	pr6|36,*
000163  la  4 00012 3521 20	epp2 	pr4|10,*		user_info_
000164  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 59
	     sadp -> locker = myname;

000165  aa  6 00044 3701 20	epp4 	pr6|36,*
000166  ia  4 00010 3735 20	epp7 	pr4|8,*		sadp
000167  aa  000 100 100 500	mlr  	(pr),(pr),fill(000)
000170  aa  6 00101 00 0030	desc9a	pr6|65,24		myname
000171  aa  7 00001 00 0030	desc9a	pr7|1,24		sys_admin_data.locker
						STATEMENT 1 ON LINE 60
	     return (0);

000172  aa  6 00114 2361 00	ldq  	pr6|76
000173  aa   000004 6010 04	tnz  	4,ic		000177
000174  aa  6 00032 3715 20	epp5 	pr6|26,*
000175  aa  5 00002 4501 20	stz  	pr5|2,*
000176  aa  0 00631 7101 00	tra  	pr0|409		return
000177  aa   000027 7260 07	lxl6 	23,dl
000200  aa   777626 3520 04	epp2 	-106,ic		000026 = 162145164165
000201  aa  0 00716 7001 00	tsx0 	pr0|462		signal
000202  aa  0 00631 7101 00	tra  	pr0|409		return
						STATEMENT 1 ON LINE 61
	end;

						STATEMENT 1 ON LINE 62
	else if ec = error_table_$invalid_lock_reset then go to ok;

000203  aa  6 00044 3701 20	epp4 	pr6|36,*
000204  la  4 00030 1161 20	cmpq 	pr4|24,*		error_table_$invalid_lock_reset
000205  aa   777743 6000 04	tze  	-29,ic		000150
						STATEMENT 1 ON LINE 63
	else if ec = error_table_$locked_by_this_process then do;

000206  la  4 00032 1161 20	cmpq 	pr4|26,*		error_table_$locked_by_this_process
000207  aa   000013 6010 04	tnz  	11,ic		000222
						STATEMENT 1 ON LINE 64
	     return (2);

000210  aa  6 00114 2361 00	ldq  	pr6|76
000211  aa   000005 6010 04	tnz  	5,ic		000216
000212  aa   000002 2360 07	ldq  	2,dl
000213  aa  6 00032 3735 20	epp7 	pr6|26,*
000214  aa  7 00002 7561 20	stq  	pr7|2,*
000215  aa  0 00631 7101 00	tra  	pr0|409		return
000216  aa   000027 7260 07	lxl6 	23,dl
000217  aa   777607 3520 04	epp2 	-121,ic		000026 = 162145164165
000220  aa  0 00716 7001 00	tsx0 	pr0|462		signal
000221  aa  0 00631 7101 00	tra  	pr0|409		return
						STATEMENT 1 ON LINE 65
	end;

						STATEMENT 1 ON LINE 66
	else do;

						STATEMENT 1 ON LINE 67
	     call ioa_ ("sys_admin_data is locked by ^a", sadp -> locker);

000222  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
000223  aa   777612 00 0040	desc9a	-118,32		000034 = 163171163137
000224  aa  6 00134 00 0040	desc9a	pr6|92,32
000225  aa  6 00134 3521 00	epp2 	pr6|92
000226  aa  6 00146 2521 00	spri2	pr6|102
000227  ia  4 00010 3735 20	epp7 	pr4|8,*		sadp
000230  aa  7 00001 3521 00	epp2 	pr7|1		sys_admin_data.locker
000231  aa  6 00150 2521 00	spri2	pr6|104
000232  aa   777555 3520 04	epp2 	-147,ic		000007 = 524000000036
000233  aa  6 00152 2521 00	spri2	pr6|106
000234  aa   777552 3520 04	epp2 	-150,ic		000006 = 524000000030
000235  aa  6 00154 2521 00	spri2	pr6|108
000236  aa  6 00144 6211 00	eax1 	pr6|100
000237  aa   010000 4310 07	fld  	4096,dl
000240  la  4 00022 3521 20	epp2 	pr4|18,*		ioa_
000241  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 68
	     return (1);

000242  aa  6 00114 2361 00	ldq  	pr6|76
000243  aa   000005 6010 04	tnz  	5,ic		000250
000244  aa   000001 2360 07	ldq  	1,dl
000245  aa  6 00032 3735 20	epp7 	pr6|26,*
000246  aa  7 00002 7561 20	stq  	pr7|2,*
000247  aa  0 00631 7101 00	tra  	pr0|409		return
000250  aa   000027 7260 07	lxl6 	23,dl
000251  aa   777555 3520 04	epp2 	-147,ic		000026 = 162145164165
000252  aa  0 00716 7001 00	tsx0 	pr0|462		signal
000253  aa  0 00631 7101 00	tra  	pr0|409		return
						STATEMENT 1 ON LINE 69
	end;

						STATEMENT 1 ON LINE 78
     end set_admin_data_;

000254  aa  0 00631 7101 00	tra  	pr0|409		return
BEGIN PROCEDURE setup
ENTRY TO setup                                              STATEMENT 1 ON LINE 71
setup:	proc;

000255  aa  6 00116 6501 00	spri4	pr6|78
						STATEMENT 1 ON LINE 73
	     call hcs_$initiate ((get_wdir_ ()), "sys_admin_data", "", 0, 1, sadp, ec);

000256  aa  6 00156 3521 00	epp2 	pr6|110
000257  aa  6 00232 2521 00	spri2	pr6|154
000260  aa  6 00230 6211 00	eax1 	pr6|152
000261  aa   004000 4310 07	fld  	2048,dl
000262  aa  6 00044 3701 20	epp4 	pr6|36,*
000263  la  4 00014 3521 20	epp2 	pr4|12,*		get_wdir_
000264  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
000265  aa   777535 2370 04	ldaq 	-163,ic		000022 = 163171163137 141144155151
000266  aa  6 00230 7571 00	staq 	pr6|152
000267  aa   777535 2370 04	ldaq 	-163,ic		000024 = 156137144141 164141000000
000270  aa  6 00232 7571 00	staq 	pr6|154
000271  aa  6 00235 4501 00	stz  	pr6|157
000272  aa   000001 2360 07	ldq  	1,dl
000273  aa  6 00236 7561 00	stq  	pr6|158
000274  aa  6 00156 3521 00	epp2 	pr6|110
000275  aa  6 00242 2521 00	spri2	pr6|162
000276  aa  6 00230 3521 00	epp2 	pr6|152
000277  aa  6 00244 2521 00	spri2	pr6|164
000300  aa  6 00234 3521 00	epp2 	pr6|156
000301  aa  6 00246 2521 00	spri2	pr6|166
000302  aa  6 00235 3521 00	epp2 	pr6|157
000303  aa  6 00250 2521 00	spri2	pr6|168
000304  aa  6 00236 3521 00	epp2 	pr6|158
000305  aa  6 00252 2521 00	spri2	pr6|170
000306  aa  6 00044 3701 20	epp4 	pr6|36,*
000307  ia  4 00010 3521 00	epp2 	pr4|8		sadp
000310  aa  6 00254 2521 00	spri2	pr6|172
000311  aa  6 00100 3521 00	epp2 	pr6|64		ec
000312  aa  6 00256 2521 00	spri2	pr6|174
000313  aa   777477 3520 04	epp2 	-193,ic		000012 = 524000000250
000314  aa  6 00260 2521 00	spri2	pr6|176
000315  aa   777470 3520 04	epp2 	-200,ic		000005 = 524000000016
000316  aa  6 00262 2521 00	spri2	pr6|178
000317  aa   777465 3520 04	epp2 	-203,ic		000004 = 524000000000
000320  aa  6 00264 2521 00	spri2	pr6|180
000321  aa   777462 3520 04	epp2 	-206,ic		000003 = 404000000001
000322  aa  6 00266 2521 00	spri2	pr6|182
000323  aa   777457 3520 04	epp2 	-209,ic		000002 = 404000000002
000324  aa  6 00270 2521 00	spri2	pr6|184
000325  aa   777454 3520 04	epp2 	-212,ic		000001 = 464000000000
000326  aa  6 00272 2521 00	spri2	pr6|186
000327  aa   777464 3520 04	epp2 	-204,ic		000013 = 404000000021
000330  aa  6 00274 2521 00	spri2	pr6|188
000331  aa  6 00240 6211 00	eax1 	pr6|160
000332  aa   034000 4310 07	fld  	14336,dl
000333  la  4 00016 3521 20	epp2 	pr4|14,*		hcs_$initiate
000334  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 74
	     if sadp = null then call com_err_ (ec, "set_admin_data_", "sys_admin_data");

000335  aa  6 00044 3701 20	epp4 	pr6|36,*
000336  ia  4 00010 2371 00	ldaq 	pr4|8		sadp
000337  aa   777455 6770 04	eraq 	-211,ic		000014 = 077777000043 000001000000
000340  aa  0 00460 3771 00	anaq 	pr0|304		= 077777000077 777777077077
000341  aa   000031 6010 04	tnz  	25,ic		000372
000342  aa   777454 2370 04	ldaq 	-212,ic		000016 = 163145164137 141144155151
000343  aa  6 00230 7571 00	staq 	pr6|152
000344  aa   777454 2370 04	ldaq 	-212,ic		000020 = 156137144141 164141137000
000345  aa  6 00232 7571 00	staq 	pr6|154
000346  aa   777454 2370 04	ldaq 	-212,ic		000022 = 163171163137 141144155151
000347  aa  6 00240 7571 00	staq 	pr6|160
000350  aa   777454 2370 04	ldaq 	-212,ic		000024 = 156137144141 164141000000
000351  aa  6 00242 7571 00	staq 	pr6|162
000352  aa  6 00100 3521 00	epp2 	pr6|64		ec
000353  aa  6 00160 2521 00	spri2	pr6|112
000354  aa  6 00230 3521 00	epp2 	pr6|152
000355  aa  6 00162 2521 00	spri2	pr6|114
000356  aa  6 00240 3521 00	epp2 	pr6|160
000357  aa  6 00164 2521 00	spri2	pr6|116
000360  aa   777433 3520 04	epp2 	-229,ic		000013 = 404000000021
000361  aa  6 00166 2521 00	spri2	pr6|118
000362  aa   777416 3520 04	epp2 	-242,ic		000000 = 524000000017
000363  aa  6 00170 2521 00	spri2	pr6|120
000364  aa   777421 3520 04	epp2 	-239,ic		000005 = 524000000016
000365  aa  6 00172 2521 00	spri2	pr6|122
000366  aa  6 00156 6211 00	eax1 	pr6|110
000367  aa   014000 4310 07	fld  	6144,dl
000370  la  4 00020 3521 20	epp2 	pr4|16,*		com_err_
000371  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 76
	end setup;

000372  aa  6 00116 6101 00	rtcd 	pr6|78
  END PROCEDURE setup
  END PROCEDURE set_admin_data_


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
