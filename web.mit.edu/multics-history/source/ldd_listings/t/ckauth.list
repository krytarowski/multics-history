	COMPILATION LISTING OF SEGMENT ckauth
	Compiled by: Multics PL/I Compiler, Release 27d, of October 11, 1982
	Compiled at: Honeywell LISD Phoenix, System M
	Compiled on: 11/12/82  1257.4 mst Fri
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 ckauth: proc;
       12 
       13 /* CKAUTH - check for file authored by given user */
       14 
       15 
       16 dcl  path char (168) aligned,				/* root of tree */
       17      ctime char (24) aligned,
       18     (co, dp) char (64) aligned,			/* titles for report */
       19     (c1, char1) char (1) aligned,
       20     (i, j, k, l, m, n) fixed bin,
       21     (t1, t2) fixed bin,
       22      rolder (0: 90) fixed bin,
       23      folder (0: 90) fixed bin,
       24      movelen fixed bin,
       25      slp ptr,
       26      lth fixed bin (24),
       27      NL char (1) aligned,
       28      kk fixed bin,
       29      ap ptr,
       30      al fixed bin,
       31      bchr char (al) unaligned based (ap),
       32      ec fixed bin,
       33      total fixed bin int static,
       34      name char (32) aligned int static init ("Dumper.SysDaemon.a"),
       35      an fixed bin init (2),
       36      modsw bit (1) init ("1"b),
       37     (p, q, p1, q1, p2, q2) ptr;
       38 
       39 dcl  clock_ ext entry returns (fixed bin (71)),
       40      com_err_ entry options (variable),
       41      ioa_$rsnnl entry options (variable),
       42      cu_$arg_ptr ext entry (fixed bin, ptr, fixed bin, fixed bin),
       43      sweep_disk_ ext entry (char (168) aligned, entry),
       44      expand_path_ ext entry (ptr, fixed bin, ptr, ptr, fixed bin),
       45      ioa_ entry options (variable),
       46      date_time_ entry (fixed bin (71), char (*) aligned),
       47      hcs_$initiate_count entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (24),
       48      fixed bin (2), ptr, fixed bin),
       49      get_wdir_ entry returns (char (168) aligned),
       50      hcs_$get_author entry (char (*) aligned, char (*) aligned, fixed bin, char (*) aligned, fixed bin),
       51      hcs_$get_bc_author entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin),
       52      hcs_$acl_add1 entry (char (*) aligned, char (*) aligned, char (*) aligned,
       53      fixed bin (5), (3) fixed bin (3), fixed bin),
       54      hcs_$terminate_noname entry (ptr, fixed bin);
       55 
       56 dcl  bcs char (262144) aligned based (slp);
       57 
       58 dcl (divide, substr, addr, null, index, fixed) builtin;
       59 
       60 dcl 1 movetable based aligned,
       61     2 moveary (movelen) fixed bin (35);
       62 
       63 /* --------------------- */
       64 
       65 	total = 0;
       66 	call cu_$arg_ptr (1, ap, al, ec);
       67 	if ec ^= 0 then path = ">";
       68 	else path = bchr;
       69 
       70 arglp:	call cu_$arg_ptr (an, ap, al, ec);
       71 	if ec = 0 then do;
       72 	     if substr (bchr, 1, 1) = "-" then do;
       73 		if bchr = "-author" | bchr = "-at" then do;
       74 		     modsw = "0"b;
       75 		end;
       76 		else do;
       77 		     call com_err_ (0, "ckauth", "unknown option ^a", bchr);
       78 		     return;
       79 		end;
       80 	     end;
       81 	     else do;				/* not control arg, must be access name */
       82 		name = bchr;
       83 		if index (name, ".") = 0 then do;
       84 		     call com_err_ (0, "ckauth", "no period in access control name ^a", name);
       85 		     return;
       86 		end;
       87 	     end;
       88 	     an = an + 1;
       89 	     go to arglp;
       90 	end;
       91 
       92 /* Now, go to work. Call disk sweeper program */
       93 
       94 	call sweep_disk_ (path, counter);
       95 	call ioa_ ("Total ^d", total);
       96 
       97 	return;
       98 
       99 counter:	proc (sdn, sen, lvl, een, bptr, nptr);
      100 
      101 dcl  sdn char (168) aligned,				/* superior dir name */
      102      sen char (32) aligned,				/* dirname */
      103      lvl fixed bin,					/* distance from root */
      104      een char (32) aligned,				/* entry name */
      105      bptr ptr,					/* ptr to info structure */
      106      nptr ptr;					/* ptr to names structure */
      107 
      108 dcl  xp char (168) aligned,
      109      xi fixed bin,
      110      hisid char (32) aligned,
      111      mode fixed bin (5);
      112 
      113 dcl 1 branch based (bptr) aligned,			/* thing returned by star_long */
      114     2 type bit (2) unal,
      115     2 nname bit (16) unal,
      116     2 nindex bit (18) unal,
      117     2 dtm bit (36) unal,
      118     2 dtu bit (36) unal,
      119     2 mode bit (5) unal,
      120     2 pad bit (13) unal,
      121     2 records bit (18) unal;
      122 
      123 dcl 1 links based (bptr) aligned,
      124     2 type bit (2) unal,				/* 00b */
      125     2 nname bit (16) unal,
      126     2 nindex bit (18) unal,
      127     2 dtm bit (36) unal,
      128     2 dtd bit (36) unal,
      129     2 pln bit (18) unal,
      130     2 pnindex bit (18) unal;
      131 
      132 dcl  names (100) char (32) based (nptr);
      133 
      134 	xi = fixed (branch.type);
      135 	if xi ^= 1 then return;
      136 	     call ioa_$rsnnl ("^a>^a", xp, xi, sdn, sen);
      137 	     if modsw then call hcs_$get_bc_author (xp, een, hisid, ec);
      138 	     else call hcs_$get_author (xp, een, 0, hisid, ec);
      139 	     if ec ^= 0 then do;
      140 		call com_err_ (ec, "ckauth", "^a>^a", xp, een);
      141 	     end;
      142 	     else do;
      143 		if name = hisid then do;
      144 		     total = total + 1;
      145 		     call ioa_ ("^a>^a", xp, een);
      146 		end;
      147 	     end;
      148 
      149 	end counter;
      150 
      151      end ckauth;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/12/82  1045.2  ckauth.pl1                        >spec>on>11/12/82>ckauth.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
al                              000154 automatic       fixed bin(17,0)          dcl 16 set ref 66* 68 70* 72 73 73 77 77 82
an                              000156 automatic       fixed bin(17,0)          initial dcl 16 set ref 16* 70* 88* 88
ap                              000152 automatic       pointer                  dcl 16 set ref 66* 68 70* 72 73 73 77 82
bchr                                   based           char                     unaligned dcl 16 set ref 68 72 73 73 77* 82
bptr                                   parameter       pointer                  dcl 101 ref 99 134
branch                                 based           structure                level 1 dcl 113
com_err_                        000022 constant        entry                    external dcl 39 ref 77 84 140
cu_$arg_ptr                     000026 constant        entry                    external dcl 39 ref 66 70
ec                              000155 automatic       fixed bin(17,0)          dcl 16 set ref 66* 67 70* 71 137* 138* 139 140*
een                                    parameter       char(32)                 dcl 101 set ref 99 137* 138* 140* 145*
fixed                                                  builtin function         dcl 58 ref 134
hcs_$get_author                 000034 constant        entry                    external dcl 39 ref 138
hcs_$get_bc_author              000036 constant        entry                    external dcl 39 ref 137
hisid                           000153 automatic       char(32)                 dcl 108 set ref 137* 138* 143
index                                                  builtin function         dcl 58 ref 83
ioa_                            000032 constant        entry                    external dcl 39 ref 95 145
ioa_$rsnnl                      000024 constant        entry                    external dcl 39 ref 136
lvl                                    parameter       fixed bin(17,0)          dcl 101 ref 99
modsw                           000157 automatic       bit(1)                   initial unaligned dcl 16 set ref 16* 74* 137
name                            000011 internal static char(32)                 initial dcl 16 set ref 82* 83 84* 143
nptr                                   parameter       pointer                  dcl 101 ref 99
path                            000100 automatic       char(168)                dcl 16 set ref 67* 68* 94*
sdn                                    parameter       char(168)                dcl 101 set ref 99 136*
sen                                    parameter       char(32)                 dcl 101 set ref 99 136*
substr                                                 builtin function         dcl 58 ref 72
sweep_disk_                     000030 constant        entry                    external dcl 39 ref 94
total                           000010 internal static fixed bin(17,0)          dcl 16 set ref 65* 95* 144* 144
type                                   based           bit(2)                   level 2 packed unaligned dcl 113 ref 134
xi                              000152 automatic       fixed bin(17,0)          dcl 108 set ref 134* 135 136*
xp                              000100 automatic       char(168)                dcl 108 set ref 136* 137* 138* 140* 145*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
NL                                     automatic       char(1)                  dcl 16
addr                                                   builtin function         dcl 58
bcs                                    based           char(262144)             dcl 56
c1                                     automatic       char(1)                  dcl 16
char1                                  automatic       char(1)                  dcl 16
clock_                          000000 constant        entry                    external dcl 39
co                                     automatic       char(64)                 dcl 16
ctime                                  automatic       char(24)                 dcl 16
date_time_                      000000 constant        entry                    external dcl 39
divide                                                 builtin function         dcl 58
dp                                     automatic       char(64)                 dcl 16
expand_path_                    000000 constant        entry                    external dcl 39
folder                                 automatic       fixed bin(17,0)          array dcl 16
get_wdir_                       000000 constant        entry                    external dcl 39
hcs_$acl_add1                   000000 constant        entry                    external dcl 39
hcs_$initiate_count             000000 constant        entry                    external dcl 39
hcs_$terminate_noname           000000 constant        entry                    external dcl 39
i                                      automatic       fixed bin(17,0)          dcl 16
j                                      automatic       fixed bin(17,0)          dcl 16
k                                      automatic       fixed bin(17,0)          dcl 16
kk                                     automatic       fixed bin(17,0)          dcl 16
l                                      automatic       fixed bin(17,0)          dcl 16
links                                  based           structure                level 1 dcl 123
lth                                    automatic       fixed bin(24,0)          dcl 16
m                                      automatic       fixed bin(17,0)          dcl 16
mode                                   automatic       fixed bin(5,0)           dcl 108
movelen                                automatic       fixed bin(17,0)          dcl 16
movetable                              based           structure                level 1 dcl 60
n                                      automatic       fixed bin(17,0)          dcl 16
names                                  based           char(32)                 array unaligned dcl 132
null                                                   builtin function         dcl 58
p                                      automatic       pointer                  dcl 16
p1                                     automatic       pointer                  dcl 16
p2                                     automatic       pointer                  dcl 16
q                                      automatic       pointer                  dcl 16
q1                                     automatic       pointer                  dcl 16
q2                                     automatic       pointer                  dcl 16
rolder                                 automatic       fixed bin(17,0)          array dcl 16
slp                                    automatic       pointer                  dcl 16
t1                                     automatic       fixed bin(17,0)          dcl 16
t2                                     automatic       fixed bin(17,0)          dcl 16

NAMES DECLARED BY EXPLICIT CONTEXT.
arglp                           000110 constant        label                    dcl 70 ref 89
ckauth                          000045 constant        entry                    external dcl 11
counter                         000322 constant        entry                    internal dcl 99 ref 94 94

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       652         712     547         662
Length      1070     547        40         141     103          12

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
ckauth                              144 external procedure  is an external procedure.  
counter                             142 internal procedure  is assigned to an entry variable.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 total                       ckauth
000011 name                        ckauth

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
ckauth                   000100 path                        ckauth
                         000152 ap                          ckauth
                         000154 al                          ckauth
                         000155 ec                          ckauth
                         000156 an                          ckauth
                         000157 modsw                       ckauth
counter                  000100 xp                          counter
                         000152 xi                          counter
                         000153 hisid                       counter

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return              ext_entry           int_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      cu_$arg_ptr                   hcs_$get_author               hcs_$get_bc_author
ioa_                          ioa_$rsnnl                    sweep_disk_

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000044        16 000052        65 000056        66 000057        67 000075        68 000103        70 000110
     71 000125        72 000127        73 000134        74 000145        75 000146        77 000147        78 000210
     80 000211        82 000212        83 000217        84 000230        85 000262        88 000263        89 000264
     94 000265        95 000301        97 000320        99 000321       134 000327       135 000334       136 000336
    137 000367       138 000420       139 000451       140 000454       141 000512       143 000513       144 000520
    145 000521       149 000544


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
