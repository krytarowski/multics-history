ASSEMBLY LISTING OF SEGMENT >special_ldd>install>MR12.0-1159>mca_.alm                        
ASSEMBLED ON:	09/16/86  1003.5 mst Tue
OPTIONS USED:	-target Level68 list 
ASSEMBLED BY:	ALM Version  6.6  November 1982 
ASSEMBLER CREATED:	09/21/83  1227.3 mst Wed

                                     1  " ***********************************************************
                                     2  " *                                                         *
                                     3  " * Copyright, (C) Honeywell Information Systems Inc., 1984 *
                                     4  " *                                                         *
                                     5  " ***********************************************************
                                     6  
                                     7  " HISTORY COMMENTS:
                                     8  "  1) change(86-03-19,Fawcett), approve(86-03-19,MCR7374),
                                     9  "     audit(86-05-01,Lippard), install(86-09-16,MR12.0-1159):
                                    10  "     Created to access the ring 1 code for control of the MCA access
                                    11  "                                                      END HISTORY COMMENTS
                                    12  
                                    13  "
                                    14  "	Standard gate to get to the MCA.
                                    15  "	This gate has ring brackets of (1,1,5).
                                    16  
                                    17  	include	gate_macros
                                   1-1  " BEGIN INCLUDE FILE ...... gate_macros.incl.alm
                                   1-2  "   Last modified 6/77 by N. Morris, B. Greenberg, & T. VanVleck
                                   1-3  "   Modified 741212 by PG to inhibit while computing virtual CPU time
                                   1-4  "   Modified 83-03-14 by E. N. Kittlitz to clear IR
                                   1-5  "   Modified 83-06-01 BIM for ring alarm polling
                                   1-6  "   Modified 85-04-03 by Keith Loepere to make polling a little smarter.
                                   1-7  
                                   1-8  " This file contains several macros used when generating gate segments.
                                   1-9  " The major macros that are defined are:
                                  1-10  "
                                  1-11  "	gate_info		general setup code for normal gates
                                  1-12  "	hardcore_gate_info	general setup code for hardcore gates
                                  1-13  "	bad_dir_handler	setup and handler for bad_dir_ condition (goes at bottom)
                                  1-14  "	bad_dir_handler_entry	entrypoint for above (goes at top)
                                  1-15  "	gate		to define a normal gate
                                  1-16  "	hgate		to define a hardcore gate
                                  1-17  "	fgate		to define a fast hardcore gate
                                  1-18  "
                                  1-19  
                                  1-20  
    000000                        1-21  	maclist	off
                                  1-22  
                                  1-23  
                                  1-24  " HGATE - define a hardcore gate entry
                                  1-25  "
                                  1-26  "	hgate	gatename,procedure,entry,args{,bad_dir_trap}
                                  1-27  "
                                  1-28  " The entrypoint gatename is defined in the gate segment.  If args
                                  1-29  " is nonzero, the number of arguments passed to gatename must be
                                  1-30  " equal to args.  When gatename is called, it will in turn call
                                  1-31  " procedure$entry.
                                  1-32  "
                                  1-33  
                                  1-34  macro	hgate
                              1   1-35  	gentry	&1,&4*2,&1.t
                              2   1-36  	tsx2	.setup
                              3   1-37  &=&5,bad_dir_trap&[	tsx0	.set_dir_trap
                              4   1-38  &]	ldi	=0,dl
                              5   1-39  	short_call &2$&3(ap|0)
                              6   1-40  	eppbp	lp|&1.t
                              7   1-41  	tra	.return_code
                              8   1-42  	maclist	restore
                              9   1-43  	use	linkage
                             10   1-44  	even
                             11   1-45  	maclist	on,save
                             12   1-46  &1.t:
                             13   1-47  	bss	,gate_entry_data_size
                             14   1-48  
                             15   1-49  	maclist	restore
                             16   1-50  &end
                                  1-51  
                                  1-52  
                                  1-53  " FGATE - define a fast hardcore gate
                                  1-54  "
                                  1-55  "	fgate	gatename,procedure,entry
                                  1-56  "
                                  1-57  
                                  1-58  macro	fgate
                              1   1-59  	gentry	&1,0,0
                              2   1-60  	ldi	=0,dl
                              3   1-61  	epplp	.my_lp,*
                              4   1-62  	tra	&2$&3
                              5   1-63  
                              6   1-64  	maclist	off
                              7   1-65  &end
                                  1-66  
                                  1-67  
                                  1-68  " GATE - define a normal gate entry
                                  1-69  "
                                  1-70  "	gate	gatename,procedure,entry,args
                                  1-71  "
                                  1-72  
                                  1-73  macro	gate
                              1   1-74  	gentry	&1,&4*2,0
                              2   1-75  	tsx2	.setup
                              3   1-76  	ldi	=0,dl
                              4   1-77  	short_call &2$&3(ap|0)
                              5   1-78  	return
                              6   1-79  
                              7   1-80  	maclist	restore
                              8   1-81  &end
                                  1-82  
                                  1-83  
                                  1-84  
                                  1-85  macro	gentry
                              1   1-86  	maclist	on,save
                              2   1-87  	segdef	&1
                              3   1-88  	maclist	restore
                              4   1-89  	use	transfer_vector
                              5   1-90  	maclist	on,save
                              6   1-91  &1:
                              7   1-92  	tra	&1.e
                              8   1-93  	maclist	restore
                              9   1-94  	use	main
                             10   1-95  	maclist	on,save
                             11   1-96  	zero	&2,&3
                             12   1-97  &1.e:
                             13   1-98  &end
                                  1-99  
                                 1-100  
                                 1-101  " HARDCORE_GATE_INFO - general info for hardcore gates
                                 1-102  
                                 1-103  macro	hardcore_gate_info
                              1  1-104  	maclist	on,save
                              2  1-105  	name	&1
                              3  1-106  
                              4  1-107  	include	stack_header
                              5  1-108  
                              6  1-109  	include	stack_frame
                              7  1-110  	include	gate_data
                              8  1-111  
                              9  1-112  	maclist	restore
                             10  1-113  	eject
                             11  1-114  
                             12  1-115  	tempd	.temp
                             13  1-116  	tempd	.label_variable(0)
                             14  1-117  	tempd	.time1,.time2
                             15  1-118  	tempd	.unwinder_arglist(0)
                             16  1-119  	tempd	.on_unit(5)
                             17  1-120  	temp	.pf,.entryp
                             18  1-121  	tempd	.vfl_arglist(2)
                             19  1-122  	tempd	.mcptr
                             20  1-123  
                             21  1-124  	use	transfer_vector
                             22  1-125  	equ	.tv_begin,*
                             23  1-126  
                             24  1-127  	tra	.actor
                             25  1-128  
                             26  1-129  	use	tv_end
                             27  1-130  	entrybound
                             28  1-131  
                             29  1-132  	segdef	.tv_end
                             30  1-133  .tv_end:	vfd	14/(*-.tv_begin)
                             31  1-134  
                             32  1-135  	use	main
                             33  1-136  
                             34  1-137  	segdef	.my_lp
                             35  1-138  	even
                             36  1-139  .my_lp:	bss	,2
                             37  1-140  
                             38  1-141  	join	/text/transfer_vector,tv_end,main
                             39  1-142  
                             40  1-143  	use	linkage
                             41  1-144  	join	/link/linkage
                             42  1-145  
                             43  1-146  	use	main
                             44  1-147  
                             45  1-148  	maclist	restore
                             46  1-149  	eject
                             47  1-150  
                             48  1-151  .actor:	epplp	.my_lp,*
                             49  1-152  	maclist	restore
                             50  1-153  	gate_actor
                             51  1-154  
                             52  1-155  
                             53  1-156  
                             54  1-157  .setup:	push
                             55  1-158  	epplp	.my_lp,*
                             56  1-159  	sprilp	sp|stack_frame.lp_ptr
                             57  1-160  
                             58  1-161  	maclist	restore
                             59  1-162  	gcheck
                             60  1-163  
                             61  1-164  	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
                             62  1-165  	rccl	sys_info$clock_,*	calculate times
                             63  1-166  	sbaq	pds$cpu_time
                             64  1-167  	staq	.time1
                             65  1-168  	sbaq	pds$virtual_delta
                             66  1-169  	staq	.time2
                             67  1-170  	lda	pds$page_waits
                             68  1-171  	sta	.pf
                             69  1-172  	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
                             70  1-173  	tra	0,2
                             71  1-174  
                             72  1-175  	maclist	restore
                             73  1-176  	eject
                             74  1-177  
                             75  1-178  .return_code:
                             76  1-179  
                             77  1-180  	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
                             78  1-181  	rccl	sys_info$clock_,*	calculate times
                             79  1-182  	sbaq	pds$cpu_time
                             80  1-183  	staq	.temp
                             81  1-184  	sbaq	.time1
                             82  1-185  	adaq	bp|gate_entry_data.cpu_time
                             83  1-186  	staq	bp|gate_entry_data.cpu_time
                             84  1-187  	ldaq	.temp
                             85  1-188  	sbaq	pds$virtual_delta
                             86  1-189  	sbaq	.time2
                             87  1-190  	adaq	bp|gate_entry_data.vcpu_time
                             88  1-191  	staq	bp|gate_entry_data.vcpu_time
                             89  1-192  	lda	pds$page_waits
                             90  1-193  	sbla	.pf
                             91  1-194  	asa	bp|gate_entry_data.page_waits
                             92  1-195  	aos	bp|gate_entry_data.calls
                             93  1-196  	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
                             94  1-197  
                             95  1-198  			" Poll for ring alarms
                             96  1-199  	sra	.temp	Borrow from time calc
                             97  1-200  	szn	.temp	Zero?
                             98  1-201  	tze	.return_code_return
                             99  1-202  
                            100  1-203  	epp1	sp|stack_frame.prev_sp,*	"possible ring alarm
                            101  1-204  	epaq	pr1|stack_frame.return_ptr,*
                            102  1-205  	ana	7,dl	" ring number to which we return
                            103  1-206  	cmpa	.temp
                            104  1-207  	tpl	.ring_alarm	" ring alarm will occur
                            105  1-208  
                            106  1-209  .return_code_return:
                            107  1-210  	return
                            108  1-211  
                            109  1-212  .ring_alarm:		" perhaps we can handle without faults?
                            110  1-213  
                            111  1-214  	aos	bp|gate_entry_data.ring_alarms
                            112  1-215  	stz	.temp	" return argument for ring_alarm$poll
                            113  1-216  	ldaq	.one_arg_header
                            114  1-217  	staq	.ring_alarm_arg_list
                            115  1-218  	epp1	.temp
                            116  1-219  	spri1	.ring_alarm_arg_list+2
                            117  1-220  	eppap	.ring_alarm_arg_list
                            118  1-221  	short_call ring_alarm$poll
                            119  1-222  	szn	.temp
                            120  1-223  	tze	.return_code_return
                            121  1-224  	eppsp	sp|stack_frame.prev_sp,*
                            122  1-225  	sprisp	pds$pre_empt_poll_return          " short-return from here
                            123  1-226  	epp1	sb|stack_header.stack_begin_ptr,* " abandoning this stack frame.
                            124  1-227  	spri1	sb|stack_header.stack_end_ptr
                            125  1-228  " Leave SB as stack_0, so pxss can get to operators.
                            126  1-229  	tra	pxss$pre_empt_poll
                            127  1-230  
                            128  1-231  	tempd	.ring_alarm_arg_list(2)
                            129  1-232  	even
                            130  1-233  .one_arg_header:
                            131  1-234  	vfd	17/2,1/0,18/4
                            132  1-235  	vfd	18/0,18/0
                            133  1-236  
                            134  1-237  
                            135  1-238  	maclist	restore
                            136  1-239  	eject
                            137  1-240  	maclist	restore
                            138  1-241  &end
                                 1-242  
                                 1-243  
                                 1-244  " BAD_DIR_HANDLER - code to setup and handle bad_dir_ condition
                                 1-245  "			put this after the last hgate macro
                                 1-246  
                                 1-247  macro	bad_dir_handler
                              1  1-248  	maclist	on,save
                              2  1-249  
                              3  1-250  	include	on_unit
                              4  1-251  
                              5  1-252  	use	transfer_vector
                              6  1-253  .handler_entry:
                              7  1-254  	tra	.handler
                              8  1-255  .handler_restart_entry:
                              9  1-256  	tra	.handler_restart_point
                             10  1-257  
                             11  1-258  	use	main
                             12  1-259  .set_dir_trap:
                             13  1-260  	stx0	.entryp		save for restart
                             14  1-261  
                             15  1-262  	mlr	(),(pr),fill(000)
                             16  1-263  	desc9a	0,0
                             17  1-264  	desc9a	.on_unit,10*4
                             18  1-265  	eppbp	.bad_dir_name
                             19  1-266  	spribp	.on_unit+on_unit.name
                             20  1-267  	eppbp	.handler_entry
                             21  1-268  	spribp	.on_unit+on_unit.body
                             22  1-269  	lxl1	.bad_dir_desc
                             23  1-270  	sxl1	.on_unit+on_unit.size
                             24  1-271  	eaa	.on_unit		set up on-unit for bad_dir_
                             25  1-272  	sbla	sp|0,du		.. make rel to sp
                             26  1-273  	sta	sp|stack_frame.on_unit_rel_ptrs
                             27  1-274  	lda	stack_frame.condition_bit,dl
                             28  1-275  	orsa	sp|stack_frame.flag_word
                             29  1-276  	tra	0,0
                             30  1-277  
                             31  1-278  	string	bad_dir_
                             32  1-279  
                             33  1-280  
                             34  1-281  
                             35  1-282  .handler:	epaq	sp|0		verify that call came from ring 0
                             36  1-283  	cana	-1,dl		check ring number in AL
                             37  1-284  	tze	*+2
                             38  1-285  	zero	0		go way kid you bother me
                             39  1-286  
                             40  1-287  	push			" ok, we like the call
                             41  1-288  	epplp	.my_lp,*
                             42  1-289  	ldx0	ap|0		get display
                             43  1-290  	eppbp	ap|2,0*
                             44  1-291  	lda	bp|stack_frame.prev_sp
                             45  1-292  	cana	=o700000,dl	from another ring?
                             46  1-293  	tze	.continue_signal	if not, back to signal_
                             47  1-294  	eppap	ap|2,*		Get mcptr
                             48  1-295  	eppap	ap|0,*		..
                             49  1-296  	spriap	bp|.mcptr		.. save in gate frame
                             50  1-297  	spribp	.label_variable+2
                             51  1-298  	eppbp	.handler_restart_entry
                             52  1-299  	spribp	.label_variable
                             53  1-300  	eppbp	.label_variable
                             54  1-301  	spribp	.unwinder_arglist+2
                             55  1-302  	fld	=1b24,dl
                             56  1-303  	staq	.unwinder_arglist
                             57  1-304  	call	unwinder_$unwinder_(.unwinder_arglist)
                             58  1-305  
                             59  1-306  .continue_signal:
                             60  1-307  	lda	=o400000,du	"1"b
                             61  1-308  	sta	ap|10,*		set continue bit
                             62  1-309  	return
                             63  1-310  
                             64  1-311  .handler_restart_point:
                             65  1-312  	epaq	sp|0		check that call came from ring 0
                             66  1-313  	cana	-1,dl
                             67  1-314  	tze	*+2
                             68  1-315  	zero	1
                             69  1-316  	epplp	.my_lp,*
                             70  1-317  	lca	stack_frame.condition_bit+1,dl  Vanish on-unit
                             71  1-318  	ansa	sp|stack_frame.flag_word
                             72  1-319  	eppbp	.mcptr
                             73  1-320  	spribp	.vfl_arglist+2
                             74  1-321  	fld	=1b24,dl
                             75  1-322  	staq	.vfl_arglist
                             76  1-323  	short_call  verify_lock$verify_lock_bad_dir(.vfl_arglist)
                             77  1-324  	ldx0	.entryp
                             78  1-325  	eppap	sp|stack_frame.arg_ptr,*
                             79  1-326  	tra	0,0		retry the call
                             80  1-327  
                             81  1-328  	maclist	restore
                             82  1-329  	eject
                             83  1-330  	maclist	restore
                             84  1-331  &end
                                 1-332  
                                 1-333  
                                 1-334  " GATE_INFO - general info for non-hardcore gates
                                 1-335  
                                 1-336  macro	gate_info
                              1  1-337  	maclist	on,save
                              2  1-338  	use	transfer_vector
                              3  1-339  	tra	.actor
                              4  1-340  
                              5  1-341  	use	tv_end
                              6  1-342  	entrybound
                              7  1-343  
                              8  1-344  	use	main
                              9  1-345  	join	/text/transfer_vector,tv_end,main
                             10  1-346  
                             11  1-347  	maclist	restore
                             12  1-348  	eject
                             13  1-349  
                             14  1-350  .actor:	getlp
                             15  1-351  	maclist	restore
                             16  1-352  	gate_actor
                             17  1-353  
                             18  1-354  	maclist	restore
                             19  1-355  	eject
                             20  1-356  
                             21  1-357  .setup:	push
                             22  1-358  	getlp
                             23  1-359  	maclist	restore
                             24  1-360  	gcheck
                             25  1-361  	tra	0,2
                             26  1-362  
                             27  1-363  	maclist	restore
                             28  1-364  	eject
                             29  1-365  
                             30  1-366  	maclist	restore
                             31  1-367  &end
                                 1-368  
                                 1-369  
                                 1-370  " Macro to generate gate actor.
                                 1-371  
                                 1-372  macro	gate_actor
                              1  1-373  	maclist	on,save
                              2  1-374  	eppbp	ap|2,*
                              3  1-375  	lda	bp|-1		get length of string
                              4  1-376  	tze	.return_name	zero length => get name
                              5  1-377  
                              6  1-378  	adla	1,dl		include length of acc
                              7  1-379  	stz	ap|4,*
                              8  1-380  	tsx0	.search_defs
                              9  1-381  
                             10  1-382  	cmpc	(pr,rl),(pr,rl)	compare name
                             11  1-383  	desc9a	bp|-1(3),al
                             12  1-384  	desc9a	bb|0,al
                             13  1-385  	tnz	.next_def
                             14  1-386  
                             15  1-387  	lda	ab|1,2		return location
                             16  1-388  	arl	18
                             17  1-389  	sta	ap|4,*
                             18  1-390  
                             19  1-391  	short_return
                             20  1-392  
                             21  1-393  .return_name:
                             22  1-394  	lxl3	ap|4,*		get location
                             23  1-395  	tsx0	.search_defs
                             24  1-396  
                             25  1-397  	cmpx3	ab|1,2		compare location
                             26  1-398  	tnz	.next_def
                             27  1-399  
                             28  1-400  	lda	bb|0		get length of name
                             29  1-401  	arl	27
                             30  1-402  	sta	bp|-1		set length of varying string
                             31  1-403  	mlr	(pr,rl),(pr,rl)	return string
                             32  1-404  	desc9a	bb|0(1),al
                             33  1-405  	desc9a	bp|0,al
                             34  1-406  
                             35  1-407  	short_return
                             36  1-408  
                             37  1-409  .search_defs:
                             38  1-410  	eax2	0
                             39  1-411  	eppab	lp|0,*		ab -> defs
                             40  1-412  .defs_loop:
                             41  1-413  	lxl1	ab|1,2		get class and flags
                             42  1-414  	cmpx1	=o400000,du	must be class 0
                             43  1-415  	tnz	.next_def
                             44  1-416  
                             45  1-417  	ldx7	ab|2,2
                             46  1-418  	eppbb	ab|0,7		bb -> name
                             47  1-419  	tra	0,0		test definition
                             48  1-420  .next_def:
                             49  1-421  	ldx2	ab|0,2		chain to next def
                             50  1-422  	tnz	.defs_loop
                             51  1-423  
                             52  1-424  	short_return
                             53  1-425  
                             54  1-426  &end
                                 1-427  
                                 1-428  
                                 1-429  " Miscellaneous macros.
                                 1-430  
                                 1-431  macro	gcheck
                              1  1-432  	maclist	on,save
                              2  1-433  	ldx1	-2,2		get number of args expected
                              3  1-434  	tze	.no_gate_error	if zero, none or doesn't matter
                              4  1-435  	cmpx1	ap|0		compare against number given
                              5  1-436  	tze	.no_gate_error	args match, call procedure
                              6  1-437  
                              7  1-438  	call	signal_$signal_(signal_arglist)
                              8  1-439  	oct	0
                              9  1-440  
                             10  1-441  	even
                             11  1-442  signal_arglist:
                             12  1-443  	zero	2,4
                             13  1-444  	zero	2,0
                             14  1-445  	arg	.gate_errorname
                             15  1-446  	arg
                             16  1-447  	arg	.gate_errordesc
                             17  1-448  	arg
                             18  1-449  
                             19  1-450  	string	gate_error
                             20  1-451  
                             21  1-452  
                             22  1-453  .no_gate_error:
                             23  1-454  &end
                                 1-455  
                                 1-456  macro	string
                              1  1-457  .&1name:
                              2  1-458  	aci	"&1"
                              3  1-459  .&1desc:
                              4  1-460  	vfd	o9/525,o27/&l1
                              5  1-461  
                              6  1-462  &end
                                 1-463  
                                 1-464  macro	eject
                              1  1-465  	maclist	on,save
                              2  1-466  
                              3  1-467  &end
                                 1-468  
                                 1-469  " END INCLUDE FILE ...... gate_macros.incl.alm
                                 1-470  
                                 1-471  "  To arrange the return it wants to return, it will have to reach back  2 frames.
                                    18  
                                    19  	gate_info	mca_
                                        	use	transfer_vector
    000000  0a   000020 7100 00         	tra	.actor
                                        
                                        	use	tv_end
                                        	entrybound
                                        
                                        	use	main
                                        	join	/text/transfer_vector,tv_end,main
                                        
                                        
                                        
    000020  aa  7 00046 2721 20         .actor:	getlp
    000021  aa  0 00002 3521 20         	eppbp	ap|2,*
    000022  aa  2 77777 2351 00         	lda	bp|-1		get length of string
    000023  0a   000037 6000 00         	tze	.return_name	zero length => get name
                                        
    000024  aa   000001 0350 07         	adla	1,dl		include length of acc
    000025  aa  0 00004 4501 20         	stz	ap|4,*
    000026  0a   000052 7000 00         	tsx0	.search_defs
                                        
    000027  aa  0 00140 1065 40         	cmpc	(pr,rl),(pr,rl)	compare name
    000030  aa   277777 600005          	desc9a	bp|-1(3),al
    000031  aa   300000 000005          	desc9a	bb|0,al
    000032  0a   000062 6010 00         	tnz	.next_def
                                        
    000033  aa  1 00001 2351 12         	lda	ab|1,2		return location
    000034  aa   000022 7710 00         	arl	18
    000035  aa  0 00004 7551 20         	sta	ap|4,*
                                        
    000036  aa  7 00044 7101 20         	short_return
                                        
    000037                              .return_name:
    000037  aa  0 00004 7231 20         	lxl3	ap|4,*		get location
    000040  0a   000052 7000 00         	tsx0	.search_defs
                                        
    000041  aa  1 00001 1031 12         	cmpx3	ab|1,2		compare location
    000042  0a   000062 6010 00         	tnz	.next_def
                                        
    000043  aa  3 00000 2351 00         	lda	bb|0		get length of name
    000044  aa   000033 7710 00         	arl	27
    000045  aa  2 77777 7551 00         	sta	bp|-1		set length of varying string
    000046  aa  0 00140 1005 40         	mlr	(pr,rl),(pr,rl)	return string
    000047  aa   300000 200005          	desc9a	bb|0(1),al
    000050  aa   200000 000005          	desc9a	bp|0,al
                                        
    000051  aa  7 00044 7101 20         	short_return
                                        
    000052                              .search_defs:
    000052  aa   000000 6220 00         	eax2	0
    000053  aa  4 00000 3515 20         	eppab	lp|0,*		ab -> defs
    000054                              .defs_loop:
    000054  aa  1 00001 7211 12         	lxl1	ab|1,2		get class and flags
    000055  aa   400000 1010 03         	cmpx1	=o400000,du	must be class 0
    000056  0a   000062 6010 00         	tnz	.next_def
                                        
    000057  aa  1 00002 2271 12         	ldx7	ab|2,2
    000060  aa  1 00000 3535 17         	eppbb	ab|0,7		bb -> name
    000061  aa   000000 7100 10         	tra	0,0		test definition
    000062                              .next_def:
    000062  aa  1 00000 2221 12         	ldx2	ab|0,2		chain to next def
    000063  0a   000054 6010 00         	tnz	.defs_loop
                                        
    000064  aa  7 00044 7101 20         	short_return
                                        
                                        
                                        
                                        
    000065  aa   000060 6270 00         .setup:	push
    000066  aa  7 00040 2721 20
    000067  aa  7 00046 2721 20         	getlp
    000070  aa   777776 2210 12         	ldx1	-2,2		get number of args expected
    000071  0a   000116 6000 00         	tze	.no_gate_error	if zero, none or doesn't matter
    000072  aa  0 00000 1011 00         	cmpx1	ap|0		compare against number given
    000073  0a   000116 6000 00         	tze	.no_gate_error	args match, call procedure
                                        
    000074  aa  6 00000 2541 00         	call	signal_$signal_(signal_arglist)
    000075  0a   000104 3500 00
    000076  4a  4 00010 3521 20
    000077  aa  6 00040 7531 00
    000100  aa  7 00036 6701 20
    000101  aa  6 00000 1731 00
    000102  aa  6 00040 0731 00
    000103  aa   000000 000000          	oct	0
                                        
                                        	even
    000104                              signal_arglist:
    000104  aa   000002 000004          	zero	2,4
    000105  aa   000002 000000          	zero	2,0
    000106  0a   000112 0000 00         	arg	.gate_errorname
    000107  aa   000000 0000 00         	arg
    000110  0a   000115 0000 00         	arg	.gate_errordesc
    000111  aa   000000 0000 00         	arg
                                        
                                        	string	gate_error
    000112                              .gate_errorname:
    000112  aa  147 141 164 145         	aci	"gate_error"
    000113  aa  137 145 162 162
    000114  aa  157 162 000 000
    000115                              .gate_errordesc:
    000115  aa   525000 000010          	vfd	o9/525,o27/10
                                        
                                        
                                        
    000116                              .no_gate_error:
    000116  aa   000000 7100 12         	tra	0,2
                                        
                                        
                                        
                                    20  
                                    21  	gate	attach_ipc,mca_attach_,ipc_attach,4
                        000001          	segdef	attach_ipc
    000001                              attach_ipc:
    000001  0a   000120 7100 00         	tra	attach_ipc.e
    000117  aa   000010 000000          	zero	4*2,0
    000120                              attach_ipc.e:
    000120  0a   000065 7020 00         	tsx2	.setup
    000121  aa   000000 6340 07         	ldi	=0,dl
    000122  4a  4 00012 3521 20         	short_call mca_attach_$ipc_attach(ap|0)
    000123  aa  7 00036 6701 20
    000124  aa  6 00030 3701 20
    000125  aa  7 00042 7101 20         	return
                                        
                                    22  	gate	attach_mca,mca_attach_,mca_attach,4
                        000002          	segdef	attach_mca
    000002                              attach_mca:
    000002  0a   000127 7100 00         	tra	attach_mca.e
    000126  aa   000010 000000          	zero	4*2,0
    000127                              attach_mca.e:
    000127  0a   000065 7020 00         	tsx2	.setup
    000130  aa   000000 6340 07         	ldi	=0,dl
    000131  4a  4 00014 3521 20         	short_call mca_attach_$mca_attach(ap|0)
    000132  aa  7 00036 6701 20
    000133  aa  6 00030 3701 20
    000134  aa  7 00042 7101 20         	return
                                        
                                    23  	gate	config,mca_util_,read_config,6
                        000003          	segdef	config
    000003                              config:
    000003  0a   000136 7100 00         	tra	config.e
    000135  aa   000014 000000          	zero	6*2,0
    000136                              config.e:
    000136  0a   000065 7020 00         	tsx2	.setup
    000137  aa   000000 6340 07         	ldi	=0,dl
    000140  4a  4 00016 3521 20         	short_call mca_util_$read_config(ap|0)
    000141  aa  7 00036 6701 20
    000142  aa  6 00030 3701 20
    000143  aa  7 00042 7101 20         	return
                                        
                                    24  	gate	detach_ipc,mca_attach_,ipc_detach,4
                        000004          	segdef	detach_ipc
    000004                              detach_ipc:
    000004  0a   000145 7100 00         	tra	detach_ipc.e
    000144  aa   000010 000000          	zero	4*2,0
    000145                              detach_ipc.e:
    000145  0a   000065 7020 00         	tsx2	.setup
    000146  aa   000000 6340 07         	ldi	=0,dl
    000147  4a  4 00020 3521 20         	short_call mca_attach_$ipc_detach(ap|0)
    000150  aa  7 00036 6701 20
    000151  aa  6 00030 3701 20
    000152  aa  7 00042 7101 20         	return
                                        
                                    25  	gate	detach_mca,mca_attach_,mca_detach,2
                        000005          	segdef	detach_mca
    000005                              detach_mca:
    000005  0a   000154 7100 00         	tra	detach_mca.e
    000153  aa   000004 000000          	zero	2*2,0
    000154                              detach_mca.e:
    000154  0a   000065 7020 00         	tsx2	.setup
    000155  aa   000000 6340 07         	ldi	=0,dl
    000156  4a  4 00022 3521 20         	short_call mca_attach_$mca_detach(ap|0)
    000157  aa  7 00036 6701 20
    000160  aa  6 00030 3701 20
    000161  aa  7 00042 7101 20         	return
                                        
                                    26  	gate	diskette_read,mca_util_,diskette_read,8
                        000006          	segdef	diskette_read
    000006                              diskette_read:
    000006  0a   000163 7100 00         	tra	diskette_read.e
    000162  aa   000020 000000          	zero	8*2,0
    000163                              diskette_read.e:
    000163  0a   000065 7020 00         	tsx2	.setup
    000164  aa   000000 6340 07         	ldi	=0,dl
    000165  4a  4 00024 3521 20         	short_call mca_util_$diskette_read(ap|0)
    000166  aa  7 00036 6701 20
    000167  aa  6 00030 3701 20
    000170  aa  7 00042 7101 20         	return
                                        
                                    27  	gate	display,mca_util_,display,4
                        000007          	segdef	display
    000007                              display:
    000007  0a   000172 7100 00         	tra	display.e
    000171  aa   000010 000000          	zero	4*2,0
    000172                              display.e:
    000172  0a   000065 7020 00         	tsx2	.setup
    000173  aa   000000 6340 07         	ldi	=0,dl
    000174  4a  4 00026 3521 20         	short_call mca_util_$display(ap|0)
    000175  aa  7 00036 6701 20
    000176  aa  6 00030 3701 20
    000177  aa  7 00042 7101 20         	return
                                        
                                    28  	gate	load_ipc,mca_util_,load_ipc,4
                        000010          	segdef	load_ipc
    000010                              load_ipc:
    000010  0a   000201 7100 00         	tra	load_ipc.e
    000200  aa   000010 000000          	zero	4*2,0
    000201                              load_ipc.e:
    000201  0a   000065 7020 00         	tsx2	.setup
    000202  aa   000000 6340 07         	ldi	=0,dl
    000203  4a  4 00030 3521 20         	short_call mca_util_$load_ipc(ap|0)
    000204  aa  7 00036 6701 20
    000205  aa  6 00030 3701 20
    000206  aa  7 00042 7101 20         	return
                                        
                                    29  	gate	process_io_event,mca_util_,io_event,4
                        000011          	segdef	process_io_event
    000011                              process_io_event:
    000011  0a   000210 7100 00         	tra	process_io_event.e
    000207  aa   000010 000000          	zero	4*2,0
    000210                              process_io_event.e:
    000210  0a   000065 7020 00         	tsx2	.setup
    000211  aa   000000 6340 07         	ldi	=0,dl
    000212  4a  4 00032 3521 20         	short_call mca_util_$io_event(ap|0)
    000213  aa  7 00036 6701 20
    000214  aa  6 00030 3701 20
    000215  aa  7 00042 7101 20         	return
                                        
                                    30  	gate	read_data,mca_util_,read_data,6
                        000012          	segdef	read_data
    000012                              read_data:
    000012  0a   000217 7100 00         	tra	read_data.e
    000216  aa   000014 000000          	zero	6*2,0
    000217                              read_data.e:
    000217  0a   000065 7020 00         	tsx2	.setup
    000220  aa   000000 6340 07         	ldi	=0,dl
    000221  4a  4 00034 3521 20         	short_call mca_util_$read_data(ap|0)
    000222  aa  7 00036 6701 20
    000223  aa  6 00030 3701 20
    000224  aa  7 00042 7101 20         	return
                                        
                                    31  	gate	reset_ipc,mca_util_,reset_ipc,4
                        000013          	segdef	reset_ipc
    000013                              reset_ipc:
    000013  0a   000226 7100 00         	tra	reset_ipc.e
    000225  aa   000010 000000          	zero	4*2,0
    000226                              reset_ipc.e:
    000226  0a   000065 7020 00         	tsx2	.setup
    000227  aa   000000 6340 07         	ldi	=0,dl
    000230  4a  4 00036 3521 20         	short_call mca_util_$reset_ipc(ap|0)
    000231  aa  7 00036 6701 20
    000232  aa  6 00030 3701 20
    000233  aa  7 00042 7101 20         	return
                                        
                                    32  	gate	reset,mca_util_,reset,3
                        000014          	segdef	reset
    000014                              reset:
    000014  0a   000235 7100 00         	tra	reset.e
    000234  aa   000006 000000          	zero	3*2,0
    000235                              reset.e:
    000235  0a   000065 7020 00         	tsx2	.setup
    000236  aa   000000 6340 07         	ldi	=0,dl
    000237  4a  4 00040 3521 20         	short_call mca_util_$reset(ap|0)
    000240  aa  7 00036 6701 20
    000241  aa  6 00030 3701 20
    000242  aa  7 00042 7101 20         	return
                                        
                                    33  	gate	tandd_read_data,mca_tandd_,read_data,5
                        000015          	segdef	tandd_read_data
    000015                              tandd_read_data:
    000015  0a   000244 7100 00         	tra	tandd_read_data.e
    000243  aa   000012 000000          	zero	5*2,0
    000244                              tandd_read_data.e:
    000244  0a   000065 7020 00         	tsx2	.setup
    000245  aa   000000 6340 07         	ldi	=0,dl
    000246  4a  4 00042 3521 20         	short_call mca_tandd_$read_data(ap|0)
    000247  aa  7 00036 6701 20
    000250  aa  6 00030 3701 20
    000251  aa  7 00042 7101 20         	return
                                        
                                    34  	gate	tandd_write_data,mca_tandd_,write_data,5
                        000016          	segdef	tandd_write_data
    000016                              tandd_write_data:
    000016  0a   000253 7100 00         	tra	tandd_write_data.e
    000252  aa   000012 000000          	zero	5*2,0
    000253                              tandd_write_data.e:
    000253  0a   000065 7020 00         	tsx2	.setup
    000254  aa   000000 6340 07         	ldi	=0,dl
    000255  4a  4 00044 3521 20         	short_call mca_tandd_$write_data(ap|0)
    000256  aa  7 00036 6701 20
    000257  aa  6 00030 3701 20
    000260  aa  7 00042 7101 20         	return
                                        
                                    35  	gate	tandd_write_text,mca_tandd_,write_text,5
                        000017          	segdef	tandd_write_text
    000017                              tandd_write_text:
    000017  0a   000262 7100 00         	tra	tandd_write_text.e
    000261  aa   000012 000000          	zero	5*2,0
    000262                              tandd_write_text.e:
    000262  0a   000065 7020 00         	tsx2	.setup
    000263  aa   000000 6340 07         	ldi	=0,dl
    000264  4a  4 00046 3521 20         	short_call mca_tandd_$write_text(ap|0)
    000265  aa  7 00036 6701 20
    000266  aa  6 00030 3701 20
    000267  aa  7 00042 7101 20         	return
                                        
                                    36  
                                    37  	end

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000270  5a   000003 000000 
    000271  5a   000156 600000 
    000272  aa   000000 000000 
    000273  55   000010 000002 
    000274  5a   000002 400003 
    000275  55   000006 000010 
    000276  aa  004 155 143 141
    000277  aa  137 000 000 000
    000300  55   000020 000003 
    000301  0a   000017 400000 
    000302  55   000013 000003 
    000303  aa  020 164 141 156         tandd_write_text
    000304  aa  144 144 137 167
    000305  aa  162 151 164 145
    000306  aa  137 164 145 170
    000307  aa  164 000 000 000
    000310  55   000030 000010 
    000311  0a   000016 400000 
    000312  55   000023 000003 
    000313  aa  020 164 141 156         tandd_write_data
    000314  aa  144 144 137 167
    000315  aa  162 151 164 145
    000316  aa  137 144 141 164
    000317  aa  141 000 000 000
    000320  55   000037 000020 
    000321  0a   000015 400000 
    000322  55   000033 000003 
    000323  aa  017 164 141 156         tandd_read_data
    000324  aa  144 144 137 162
    000325  aa  145 141 144 137
    000326  aa  144 141 164 141
    000327  55   000044 000030 
    000330  0a   000014 400000 
    000331  55   000042 000003 
    000332  aa  005 162 145 163         reset
    000333  aa  145 164 000 000
    000334  55   000052 000037 
    000335  0a   000013 400000 
    000336  55   000047 000003 
    000337  aa  011 162 145 163         reset_ipc
    000340  aa  145 164 137 151
    000341  aa  160 143 000 000
    000342  55   000060 000044 
    000343  0a   000012 400000 
    000344  55   000055 000003 
    000345  aa  011 162 145 141         read_data
    000346  aa  144 137 144 141
    000347  aa  164 141 000 000
    000350  55   000070 000052 
    000351  0a   000011 400000 
    000352  55   000063 000003 
    000353  aa  020 160 162 157         process_io_event
    000354  aa  143 145 163 163
    000355  aa  137 151 157 137
    000356  aa  145 166 145 156
    000357  aa  164 000 000 000
    000360  55   000076 000060 
    000361  0a   000010 400000 
    000362  55   000073 000003 
    000363  aa  010 154 157 141         load_ipc
    000364  aa  144 137 151 160
    000365  aa  143 000 000 000
    000366  55   000103 000070 
    000367  0a   000007 400000 
    000370  55   000101 000003 
    000371  aa  007 144 151 163         display
    000372  aa  160 154 141 171
    000373  55   000112 000076 
    000374  0a   000006 400000 
    000375  55   000106 000003 
    000376  aa  015 144 151 163         diskette_read
    000377  aa  153 145 164 164
    000400  aa  145 137 162 145
    000401  aa  141 144 000 000
    000402  55   000120 000103 
    000403  0a   000005 400000 
    000404  55   000115 000003 
    000405  aa  012 144 145 164         detach_mca
    000406  aa  141 143 150 137
    000407  aa  155 143 141 000
    000410  55   000126 000112 
    000411  0a   000004 400000 
    000412  55   000123 000003 
    000413  aa  012 144 145 164         detach_ipc
    000414  aa  141 143 150 137
    000415  aa  151 160 143 000
    000416  55   000133 000120 
    000417  0a   000003 400000 
    000420  55   000131 000003 
    000421  aa  006 143 157 156         config
    000422  aa  146 151 147 000
    000423  55   000141 000126 
    000424  0a   000002 400000 
    000425  55   000136 000003 
    000426  aa  012 141 164 164         attach_mca
    000427  aa  141 143 150 137
    000430  aa  155 143 141 000
    000431  55   000147 000133 
    000432  0a   000001 400000 
    000433  55   000144 000003 
    000434  aa  012 141 164 164         attach_ipc
    000435  aa  141 143 150 137
    000436  aa  151 160 143 000
    000437  55   000002 000141 
    000440  6a   000000 400002 
    000441  55   000152 000003 
    000442  aa  014 163 171 155         symbol_table
    000443  aa  142 157 154 137
    000444  aa  164 141 142 154
    000445  aa  145 000 000 000

DEFINITIONS HASH TABLE

    000446  aa   000000 000033 
    000447  aa   000000 000000 
    000450  aa   000000 000000 
    000451  aa   000000 000000 
    000452  aa   000000 000000 
    000453  aa   000000 000000 
    000454  5a   000010 000000 
    000455  5a   000020 000000 
    000456  5a   000030 000000 
    000457  5a   000070 000000 
    000460  5a   000133 000000 
    000461  5a   000141 000000 
    000462  5a   000044 000000 
    000463  5a   000060 000000 
    000464  5a   000126 000000 
    000465  5a   000147 000000 
    000466  5a   000037 000000 
    000467  5a   000103 000000 
    000470  aa   000000 000000 
    000471  aa   000000 000000 
    000472  aa   000000 000000 
    000473  5a   000052 000000 
    000474  aa   000000 000000 
    000475  5a   000076 000000 
    000476  aa   000000 000000 
    000477  5a   000112 000000 
    000500  5a   000120 000000 
    000501  aa   000000 000000 

EXTERNAL NAMES

    000502  aa  012 167 162 151         write_text
    000503  aa  164 145 137 164
    000504  aa  145 170 164 000
    000505  aa  012 167 162 151         write_data
    000506  aa  164 145 137 144
    000507  aa  141 164 141 000
    000510  aa  012 155 143 141         mca_tandd_
    000511  aa  137 164 141 156
    000512  aa  144 144 137 000
    000513  aa  010 151 157 137         io_event
    000514  aa  145 166 145 156
    000515  aa  164 000 000 000
    000516  aa  012 155 143 141         mca_detach
    000517  aa  137 144 145 164
    000520  aa  141 143 150 000
    000521  aa  012 151 160 143         ipc_detach
    000522  aa  137 144 145 164
    000523  aa  141 143 150 000
    000524  aa  013 162 145 141         read_config
    000525  aa  144 137 143 157
    000526  aa  156 146 151 147
    000527  aa  011 155 143 141         mca_util_
    000530  aa  137 165 164 151
    000531  aa  154 137 000 000
    000532  aa  012 155 143 141         mca_attach
    000533  aa  137 141 164 164
    000534  aa  141 143 150 000
    000535  aa  012 151 160 143         ipc_attach
    000536  aa  137 141 164 164
    000537  aa  141 143 150 000
    000540  aa  013 155 143 141         mca_attach_
    000541  aa  137 141 164 164
    000542  aa  141 143 150 137
    000543  aa  007 163 151 147         signal_
    000544  aa  156 141 154 137

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    000545  aa   000004 000000 
    000546  55   000220 000212 
    000547  aa   000004 000000 
    000550  55   000220 000215 
    000551  aa   000004 000000 
    000552  55   000220 000055 
    000553  aa   000004 000000 
    000554  55   000237 000042 
    000555  aa   000004 000000 
    000556  55   000237 000047 
    000557  aa   000004 000000 
    000560  55   000237 000055 
    000561  aa   000004 000000 
    000562  55   000237 000223 
    000563  aa   000004 000000 
    000564  55   000237 000073 
    000565  aa   000004 000000 
    000566  55   000237 000101 
    000567  aa   000004 000000 
    000570  55   000237 000106 
    000571  aa   000004 000000 
    000572  55   000250 000226 
    000573  aa   000004 000000 
    000574  55   000250 000231 
    000575  aa   000004 000000 
    000576  55   000237 000234 
    000577  aa   000004 000000 
    000600  55   000250 000242 
    000601  aa   000004 000000 
    000602  55   000250 000245 
    000603  aa   000004 000000 
    000604  55   000253 000253 
    000605  aa   000001 000000 
    000606  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    000607  5a   000255 000000 
    000610  5a   000257 000000 
    000611  5a   000261 000000 
    000612  5a   000263 000000 
    000613  5a   000265 000000 
    000614  5a   000267 000000 
    000615  5a   000271 000000 
    000616  5a   000273 000000 
    000617  5a   000275 000000 
    000620  5a   000277 000000 
    000621  5a   000301 000000 
    000622  5a   000303 000000 
    000623  5a   000305 000000 
    000624  5a   000307 000000 
    000625  5a   000311 000000 
    000626  5a   000313 000000 
    000627  aa   000000 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000270 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000050 
    000007  a2   000000 000000 
    000010  9a   777770 0000 46         signal_|signal_
    000011  5a   000336 0000 00
    000012  9a   777766 0000 46         mca_attach_|ipc_attach
    000013  5a   000335 0000 00
    000014  9a   777764 0000 46         mca_attach_|mca_attach
    000015  5a   000334 0000 00
    000016  9a   777762 0000 46         mca_util_|read_config
    000017  5a   000333 0000 00
    000020  9a   777760 0000 46         mca_attach_|ipc_detach
    000021  5a   000332 0000 00
    000022  9a   777756 0000 46         mca_attach_|mca_detach
    000023  5a   000331 0000 00
    000024  9a   777754 0000 46         mca_util_|diskette_read
    000025  5a   000330 0000 00
    000026  9a   777752 0000 46         mca_util_|display
    000027  5a   000327 0000 00
    000030  9a   777750 0000 46         mca_util_|load_ipc
    000031  5a   000326 0000 00
    000032  9a   777746 0000 46         mca_util_|io_event
    000033  5a   000325 0000 00
    000034  9a   777744 0000 46         mca_util_|read_data
    000035  5a   000324 0000 00
    000036  9a   777742 0000 46         mca_util_|reset_ipc
    000037  5a   000323 0000 00
    000040  9a   777740 0000 46         mca_util_|reset
    000041  5a   000322 0000 00
    000042  9a   777736 0000 46         mca_tandd_|read_data
    000043  5a   000321 0000 00
    000044  9a   777734 0000 46         mca_tandd_|write_data
    000045  5a   000320 0000 00
    000046  9a   777732 0000 46         mca_tandd_|write_text
    000047  5a   000317 0000 00
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000004 
    000004  aa   000000 112143 
    000005  aa   305203 523135 
    000006  aa   000000 114676 
    000007  aa   752454 737427 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000165 
    000020  aa   000000 000122 
    000021  aa   000000 000145 
    000022  aa   000156 000122 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   040066 056066 
    000030  aa   040040 116157 
    000031  aa   166145 155142 
    000032  aa   145162 040061 
    000033  aa   071070 062040 
    000034  aa   107112 157150 
    000035  aa   156163 157156 
    000036  aa   056123 171163 
    000037  aa   115141 151156 
    000040  aa   164056 141040 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   055164 141162 
    000045  aa   147145 164040 
    000046  aa   114145 166145 
    000047  aa   154066 070040 
    000050  aa   154151 163164 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040040 040040 
    000057  aa   040040 040040 
    000060  aa   040040 040040 
    000061  aa   040040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000002 
    000066  aa   000076 000051 
    000067  aa   146751 560743 
    000070  aa   000000 114676 
    000071  aa   751032 600000 
    000072  aa   000111 000041 
    000073  aa   134571 651553 
    000074  aa   000000 113462 
    000075  aa   317506 600000 
    000076  aa   076163 160145          >special_ldd>install>MR12.0-1159>mca_.alm
    000077  aa   143151 141154 
    000100  aa   137154 144144 
    000101  aa   076151 156163 
    000102  aa   164141 154154 
    000103  aa   076115 122061 
    000104  aa   062056 060055 
    000105  aa   061061 065071 
    000106  aa   076155 143141 
    000107  aa   137056 141154 
    000110  aa   155040 040040 
    000111  aa   076154 144144          >ldd>include>gate_macros.incl.alm
    000112  aa   076151 156143 
    000113  aa   154165 144145 
    000114  aa   076147 141164 
    000115  aa   145137 155141 
    000116  aa   143162 157163 
    000117  aa   056151 156143 
    000120  aa   154056 141154 
    000121  aa   155040 040040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

          20    .actor                   mca_:          19.
          54    .defs_loop               mca_:          19.
         115    .gate_errordesc          mca_:          19.
         112    .gate_errorname          mca_:          19.
          62    .next_def                mca_:          19.
         116    .no_gate_error           mca_:          19.
          37    .return_name             mca_:          19.
          52    .search_defs             mca_:          19.
          65    .setup                   mca_:          19,   21,   22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
                                                        32,   33,   34,   35.
           1    attach_ipc               mca_:          21.
         120    attach_ipc.e             mca_:          21.
           2    attach_mca               mca_:          22.
         127    attach_mca.e             mca_:          22.
           3    config                   mca_:          23.
         136    config.e                 mca_:          23.
           4    detach_ipc               mca_:          24.
         145    detach_ipc.e             mca_:          24.
           5    detach_mca               mca_:          25.
         154    detach_mca.e             mca_:          25.
           6    diskette_read            mca_:          26.
         163    diskette_read.e          mca_:          26.
           7    display                  mca_:          27.
         172    display.e                mca_:          27.
                io_event                 mca_:          29.
                ipc_attach               mca_:          21.
                ipc_detach               mca_:          24.
          10    load_ipc                 mca_:          28.
         201    load_ipc.e               mca_:          28.
          20    main                     mca_:          19,   21,   22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
                                                        32,   33,   34,   35.
                mca_attach               mca_:          22.
                mca_attach_              mca_:          21,   22,   24,   25.
                mca_detach               mca_:          25.
                mca_tandd_               mca_:          33,   34,   35.
                mca_util_                mca_:          23,   26,   27,   28,   29,   30,   31,   32.
          11    process_io_event         mca_:          29.
         210    process_io_event.e       mca_:          29.
                read_config              mca_:          23.
          12    read_data                mca_:          30,   33.
         217    read_data.e              mca_:          30.
          14    reset                    mca_:          32.
         235    reset.e                  mca_:          32.
          13    reset_ipc                mca_:          31.
         226    reset_ipc.e              mca_:          31.
                signal_                  mca_:          19.
         104    signal_arglist           mca_:          19.
          15    tandd_read_data          mca_:          33.
         244    tandd_read_data.e        mca_:          33.
          16    tandd_write_data         mca_:          34.
         253    tandd_write_data.e       mca_:          34.
          17    tandd_write_text         mca_:          35.
         262    tandd_write_text.e       mca_:          35.
           0    transfer_vector          mca_:          19,   21,   22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
                                                        32,   33,   34,   35.
          20    tv_end                   mca_:          19.
                write_data               mca_:          34.
                write_text               mca_:          35.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
