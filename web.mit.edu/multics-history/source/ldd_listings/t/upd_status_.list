	COMPILATION LISTING OF SEGMENT upd_status_
	Compiled by: Multics PL/I Compiler, Release 27d, of October 11, 1982
	Compiled at: Honeywell LISD Phoenix, System M
	Compiled on: 11/15/82  1724.7 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 upd_status_:	procedure (dir, seg, chase, statp, areap, code);
       12 
       13 
       14 /*
       15*
       16*	This procedure provides an interface to hcs_$status which makes
       17*	links transparent to the caller if the chase switch in the call
       18*	is non-zero, i.e. status of the target branch is returned with
       19*	names on the link.
       20*
       21*	P. Bos, May 1972
       22*
       23**/
       24 
       25      dcl	dir			char(*),		/* dirname of segment in question */
       26 	seg			char(*),		/* entryname of segment */
       27 	chase			fixed bin(1),	/* non-zero if to chase link */
       28 	statp			ptr,		/* pointer to status structure */
       29 	areap			ptr,		/* pointer to area */
       30 	code			fixed bin(35);	/* status code for call */
       31 
       32      dcl	hcs_$status_		entry (char(*), char(*), fixed bin(1), ptr, ptr, fixed bin(35)),
       33 	hcs_$status_long		entry (char(*), char(*), fixed bin(1), ptr, ptr, fixed bin(35));
       34 
       35      dcl	null			builtin;
       36 
       37      dcl	error_table_$no_s_permission	fixed bin(35) ext static;
       38 
       39      dcl	long_status_block		bit(360) aligned based (statp),
       40 						/* overlay for status block */
       41 	status_block		bit(144) aligned based (statp);
       42 						/* ditto */
       43 
       44      dcl	1 stat			aligned based (statp),	/* first part of status block */
       45 	 (2 type			bit(2),		/* entry type */
       46 	  2 nnames		bit(16),		/* number of names on entry */
       47 	  2 nrp			bit(18)) unal;	/* rel. pointer to name array */
       48 
       49      dcl (nnames			bit(16),
       50 	nrp			bit(18),
       51 	sw			bit(1)) aligned;
       52 
       53 /**/
       54 
       55 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
       56 
       57 
       58 	sw = "0"b;				/* short mode of status_ call */
       59 	status_block = "0"b;			/* hcs_$status_ doesn't zero entries in stat */
       60 	call hcs_$status_(dir, seg, 0, statp, areap, code);
       61 	go to join;				/* skip */
       62 
       63 
       64 long:		entry (dir, seg, chase, statp, areap, code);
       65 
       66 
       67 	sw = "1"b;				/* long mode */
       68 	long_status_block = "0"b;			/* hcs_$status_long doesn't zero entries either. */
       69 	call hcs_$status_long (dir, seg, 0, statp, areap, code);
       70 
       71 join:	if code ^= 0 then				/* was there an error? */
       72 	     if code ^= error_table_$no_s_permission then	/* ignore no_s_permission errors. */
       73 		return;
       74 	     else if areap ^= null then		/* unless user wants names also. */
       75 		return;
       76 	if chase ^= 0 then if stat.type = "00"b then do;	/* user wants to chase link */
       77 	     nnames = stat.nnames;			/* save count and pointer */
       78 	     nrp = stat.nrp;			/* of current name list */
       79 	     if sw then				/* call status_ again with chase option */
       80 		call hcs_$status_long (dir, seg, 1, statp, null, code);
       81 	     else					/* but without names */
       82 		call hcs_$status_(dir, seg, 1, statp, null, code);
       83 	     stat.nnames = nnames;			/* put back original name list */
       84 	     stat.nrp = nrp;			/* count and pointer */
       85 	     end;
       86 
       87 	if code = error_table_$no_s_permission then	/* ignore this error. */
       88 	     code = 0;
       89 
       90 
       91 	end upd_status_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/15/82  1514.6  upd_status_.pl1                   >dumps>old>recomp>upd_status_.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
areap                                  parameter       pointer                  dcl 25 set ref 11 60* 64 69* 74
chase                                  parameter       fixed bin(1,0)           dcl 25 ref 11 64 76
code                                   parameter       fixed bin(35,0)          dcl 25 set ref 11 60* 64 69* 71 71 79* 81* 87 87*
dir                                    parameter       char                     unaligned dcl 25 set ref 11 60* 64 69* 79* 81*
error_table_$no_s_permission    000014 external static fixed bin(35,0)          dcl 37 ref 71 87
hcs_$status_                    000010 constant        entry                    external dcl 32 ref 60 81
hcs_$status_long                000012 constant        entry                    external dcl 32 ref 69 79
long_status_block                      based           bit(360)                 dcl 39 set ref 68*
nnames                          000100 automatic       bit(16)                  dcl 49 in procedure "upd_status_" set ref 77* 83
nnames                    0(02)        based           bit(16)                  level 2 in structure "stat" packed unaligned dcl 44
                                                                                  in procedure "upd_status_" set ref 77 83*
nrp                             000101 automatic       bit(18)                  dcl 49 in procedure "upd_status_" set ref 78* 84
nrp                       0(18)        based           bit(18)                  level 2 in structure "stat" packed unaligned dcl 44
                                                                                  in procedure "upd_status_" set ref 78 84*
null                                                   builtin function         dcl 35 ref 74 79 79 81 81
seg                                    parameter       char                     unaligned dcl 25 set ref 11 60* 64 69* 79* 81*
stat                                   based           structure                level 1 dcl 44
statp                                  parameter       pointer                  dcl 25 set ref 11 59 60* 64 68 69* 76 77 78 79* 81*
                                                                                  83 84
status_block                           based           bit(144)                 dcl 39 set ref 59*
sw                              000102 automatic       bit(1)                   dcl 49 set ref 58* 67* 79
type                                   based           bit(2)                   level 2 packed unaligned dcl 44 ref 76

NAMES DECLARED BY EXPLICIT CONTEXT.
join                            000170 constant        label                    dcl 71 ref 61
long                            000102 constant        entry                    external dcl 64
upd_status_                     000014 constant        entry                    external dcl 11

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       426         444     345         436
Length       614     345        16         133      61           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
upd_status_                          98 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
upd_status_              000100 nnames                      upd_status_
                         000101 nrp                         upd_status_
                         000102 sw                          upd_status_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   return              ext_entry_desc

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
hcs_$status_                  hcs_$status_long

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$no_s_permission




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000006        58 000034        59 000035        60 000043        61 000077        64 000100        67 000122
     68 000124        69 000132        71 000170        74 000176        76 000202        77 000210        78 000214
     79 000217        81 000263        83 000324        84 000333        87 000337        91 000344


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
