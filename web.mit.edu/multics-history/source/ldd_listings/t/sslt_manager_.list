ASSEMBLY LISTING OF SEGMENT >special_ldd>install>MR12.0-1206>sslt_manager_.alm               
ASSEMBLED ON:	11/05/86  1047.2 mst Wed
OPTIONS USED:	list 
ASSEMBLED BY:	ALM Version  6.7  October 1986  
ASSEMBLER CREATED:	10/08/86  1557.5 mst Wed

                                     1  " ***********************************************************
                                     2  " *                                                         *
                                     3  " * Copyright, (C) Honeywell Information Systems Inc., 1982 *
                                     4  " *                                                         *
                                     5  " ***********************************************************
                                     6  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                     7  "							"
                                     8  "	Segment Loading Table Manager		MSPM BL.2.02	"
                                     9  "							"
                                    10  "	T.H. Van Vleck			5/19/67		"
                                    11  "	Rewritten by N. I. Morris		12/27/67		"
                                    12  "	Last modified by N. I. Morris		08/12/76		"
                                    13  "							"
                                    14  "	This program is a utility routine for use in system	"
                                    15  "	initialization.  It is first called by the Bootstrap	"
                                    16  "	Initializer, and remains useful well into the execution	"
                                    17  "	of the Initializer Control Program.			"
                                    18  "							"
                                    19  "	Note:	THIS IS NOT A PURE PROCEDURE			"
                                    20  "							"
                                    21  "	The Segment Loading Table (SLT) contains an entry for	"
                                    22  "	each segment that is part of the Multics Initializer	"
                                    23  "	or hard-core supervisor.  Each entry contains useful	"
                                    24  "	information about the segment, such as its name, number,	"
                                    25  "	linkage status, etc.				"
                                    26  "							"
                                    27  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                    28  
                                    29  
    000000                          30  	name	slt_manager
                                    31  
                                    32  
                                    33  "  ******************************************************
                                    34  "  *                                                    *
                                    35  "  *                                                    *
                                    36  "  * Copyright (c) 1972 by Massachusetts Institute of   *
                                    37  "  * Technology and Honeywell Information Systems, Inc. *
                                    38  "  *                                                    *
                                    39  "  *                                                    *
                                    40  "  ******************************************************
                                    41  
                                    42  
                                    43  " Miscellaneous Equivalences:
                        000010      44  	equ	wdsnm,32/4	words per segment name
                                    45  
                                    46  
                                    47  
                                    48  
                                    49  
                                    50  
                                    51  
                                    52  	include	slt
                                   1-1  
                                   1-2  
                                   1-3       "BEGIN INCLUDE FILE slt.incl.alm
                                   1-4  
                                   1-5  	"Created 11/04/76  1459.6 est Thu by convert_include_file,
                                   1-6  	"   Version of 04/30/76  1208.1 est Fri.
                                   1-7  
                                   1-8  	"Made from >user_dir_dir>Multics>Morris>slt>include>slt.incl.pl1,
                                   1-9  	"   modified 11/04/76  1459.5 est Thu
                                  1-10  
                                  1-11  "
                                  1-12  "	Structure slt
                                  1-13  "
                        100010    1-14  	equ	slt_size,32776
                                  1-15  
                                  1-16  
                        000000    1-17  	equ	slt.name_seg_ptr,0
                        000002    1-18  	equ	slt.free_core_start,2
                        000003    1-19  	equ	slt.first_sup_seg,3
                        000004    1-20  	equ	slt.last_sup_seg,4
                        000005    1-21  	equ	slt.first_init_seg,5
                        000006    1-22  	equ	slt.last_init_seg,6
                        000007    1-23  	equ	slt.free_core_size,7
                        000010    1-24  	equ	slt.seg,8			"LEVEL 2
                                  1-25  
                        000010    1-26  	equ	slt.slte,8
                                  1-27  
                                  1-28  "
                                  1-29  "	Structure name_seg
                                  1-30  "
                        000201    1-31  	equ	name_seg_size,129
                                  1-32  
                        000000    1-33  	equ	name_seg.next_loc,0		"LOWER
                                  1-34  
                        000001    1-35  	equ	name_seg.ht,1		"UPPER
                                  1-36  
                                  1-37  "
                                  1-38  "	Structure segnam
                                  1-39  "
                                  1-40  
                        000000    1-41  	equ	segnam.count,0
                        000001    1-42  	equ	segnam.names,1		"LEVEL 2
                                  1-43  
                        000001    1-44  	equ	segnam.hp,1		"UPPER
                        400000    1-45  	bool	segnam.ref,400000		"DL
                        000000    1-46  	equ	segnam.segno_shift,0
                        007777    1-47  	bool	segnam.segno_mask,007777
                                  1-48  
                        000002    1-49  	equ	segnam.name,2		"DOUBLE
                                  1-50  
                                  1-51  "
                                  1-52  "	Structure path
                                  1-53  "
                        000000    1-54  	equ	path.size,0
                        000001    1-55  	equ	path.name,1
                        000000    1-56  	equ	path.acls,0
                                  1-57  
                                  1-58  "
                                  1-59  "	Structure acls
                                  1-60  "
                        000000    1-61  	equ	acls.count,0
                        000001    1-62  	equ	acls.acl,1		"LEVEL 2
                                  1-63  
                        000001    1-64  	equ	acls.userid,1		"DOUBLE
                        000011    1-65  	equ	acls.mode,9
                        000013    1-66  	equ	acls.code,11
                                  1-67  
                                  1-68       "END INCLUDE FILE slt.incl.alm
                                    53  
                                    54  
                                    55  
                                    56  	include	slte
                                   2-1  
                                   2-2  
                                   2-3       "BEGIN INCLUDE FILE slte.incl.alm
                                   2-4  
                                   2-5  
                                   2-6  	"Created 12/12/83  1408.5 est Mon by convert_include_file,
                                   2-7  	"   Version of 11/07/82  1445.1 est Sun.
                                   2-8  
                                   2-9  	"Made from >bootload>update>incl>slte.incl.pl1,
                                  2-10  	"   modified 12/12/83  1408.5 est Mon
                                  2-11  
                                  2-12  "
                                  2-13  "	Structure slte_uns
                                  2-14  "
                        000004    2-15  	equ	slte_uns_size,4
                                  2-16  
                        000000    2-17  	equ	slte_uns.names_ptr,0	" UPPER
                        000000    2-18  	equ	slte_uns.path_ptr,0		" LOWER
                                  2-19  
                        000001    2-20  	equ	slte_uns.access_word,1
                        000040    2-21  	equ	slte_uns.access_shift,32
                        000017    2-22  	bool	slte_uns.access_mask,000017
                        000001    2-23  	equ	slte_uns.cache_word,1
                        020000    2-24  	bool	slte_uns.cache,020000	" DU
                        000001    2-25  	equ	slte_uns.abs_seg_word,1
                        010000    2-26  	bool	slte_uns.abs_seg,010000	" DU
                        000001    2-27  	equ	slte_uns.firmware_seg_word,1
                        004000    2-28  	bool	slte_uns.firmware_seg,004000	" DU
                        000001    2-29  	equ	slte_uns.layout_seg_word,1
                        002000    2-30  	bool	slte_uns.layout_seg,002000	" DU
                        000001    2-31  	equ	slte_uns.breakpointable_word,1
                        001000    2-32  	bool	slte_uns.breakpointable,001000 " DU
                        000001    2-33  	equ	slte_uns.wired_word,1
                        000040    2-34  	bool	slte_uns.wired,000040	" DU
                        000001    2-35  	equ	slte_uns.paged_word,1
                        000020    2-36  	bool	slte_uns.paged,000020	" DU
                        000001    2-37  	equ	slte_uns.per_process_word,1
                        000010    2-38  	bool	slte_uns.per_process,000010	" DU
                        000001    2-39  	equ	slte_uns.acl_provided_word,1
                        000001    2-40  	bool	slte_uns.acl_provided,000001	" DU
                        000001    2-41  	equ	slte_uns.branch_required_word,1
                        040000    2-42  	bool	slte_uns.branch_required,040000 " DL
                        000001    2-43  	equ	slte_uns.init_seg_word,1
                        020000    2-44  	bool	slte_uns.init_seg,020000	" DL
                        000001    2-45  	equ	slte_uns.temp_seg_word,1
                        010000    2-46  	bool	slte_uns.temp_seg,010000	" DL
                        000001    2-47  	equ	slte_uns.link_provided_word,1
                        004000    2-48  	bool	slte_uns.link_provided,004000	" DL
                        000001    2-49  	equ	slte_uns.link_sect_word,1
                        002000    2-50  	bool	slte_uns.link_sect,002000	" DL
                        000001    2-51  	equ	slte_uns.link_sect_wired_word,1
                        001000    2-52  	bool	slte_uns.link_sect_wired,001000 " DL
                        000001    2-53  	equ	slte_uns.combine_link_word,1
                        000400    2-54  	bool	slte_uns.combine_link,000400	" DL
                        000001    2-55  	equ	slte_uns.pre_linked_word,1
                        000200    2-56  	bool	slte_uns.pre_linked,000200	" DL
                        000001    2-57  	equ	slte_uns.defs_word,1
                        000100    2-58  	bool	slte_uns.defs,000100	" DL
                                  2-59  
                        000002    2-60  	equ	slte_uns.cur_length_word,2
                        000033    2-61  	equ	slte_uns.cur_length_shift,27
                        000777    2-62  	bool	slte_uns.cur_length_mask,000777
                        000002    2-63  	equ	slte_uns.ringbrack_word,2
                        000030    2-64  	equ	slte_uns.ringbrack_shift,24
                        000007    2-65  	bool	slte_uns.ringbrack_mask,000007
                        000002    2-66  	equ	slte_uns.segno,2		" LOWER
                                  2-67  
                        000003    2-68  	equ	slte_uns.max_length_word,3
                        000030    2-69  	equ	slte_uns.max_length_shift,24
                        000777    2-70  	bool	slte_uns.max_length_mask,000777
                        000003    2-71  	equ	slte_uns.bit_count_word,3
                        000000    2-72  	equ	slte_uns.bit_count_shift,0
                                  2-73  
                                  2-74  "
                                  2-75  "	Structure slte
                                  2-76  "
                        000004    2-77  	equ	slte_size,4
                                  2-78  
                        000000    2-79  	equ	slte.names_ptr,0		" UPPER
                        000000    2-80  	equ	slte.path_ptr,0		" LOWER
                                  2-81  
                        000001    2-82  	equ	slte.access_word,1
                        000040    2-83  	equ	slte.access_shift,32
                        000017    2-84  	bool	slte.access_mask,000017
                        000001    2-85  	equ	slte.cache_word,1
                        020000    2-86  	bool	slte.cache,020000		" DU
                        000001    2-87  	equ	slte.abs_seg_word,1
                        010000    2-88  	bool	slte.abs_seg,010000		" DU
                        000001    2-89  	equ	slte.firmware_seg_word,1
                        004000    2-90  	bool	slte.firmware_seg,004000	" DU
                        000001    2-91  	equ	slte.layout_seg_word,1
                        002000    2-92  	bool	slte.layout_seg,002000	" DU
                        000001    2-93  	equ	slte.breakpointable_word,1
                        001000    2-94  	bool	slte.breakpointable,001000	" DU
                        000001    2-95  	equ	slte.wired_word,1
                        000040    2-96  	bool	slte.wired,000040		" DU
                        000001    2-97  	equ	slte.paged_word,1
                        000020    2-98  	bool	slte.paged,000020		" DU
                        000001    2-99  	equ	slte.per_process_word,1
                        000010   2-100  	bool	slte.per_process,000010	" DU
                        000001   2-101  	equ	slte.acl_provided_word,1
                        000001   2-102  	bool	slte.acl_provided,000001	" DU
                        000001   2-103  	equ	slte.branch_required_word,1
                        040000   2-104  	bool	slte.branch_required,040000	" DL
                        000001   2-105  	equ	slte.init_seg_word,1
                        020000   2-106  	bool	slte.init_seg,020000	" DL
                        000001   2-107  	equ	slte.temp_seg_word,1
                        010000   2-108  	bool	slte.temp_seg,010000	" DL
                        000001   2-109  	equ	slte.link_provided_word,1
                        004000   2-110  	bool	slte.link_provided,004000	" DL
                        000001   2-111  	equ	slte.link_sect_word,1
                        002000   2-112  	bool	slte.link_sect,002000	" DL
                        000001   2-113  	equ	slte.link_sect_wired_word,1
                        001000   2-114  	bool	slte.link_sect_wired,001000	" DL
                        000001   2-115  	equ	slte.combine_link_word,1
                        000400   2-116  	bool	slte.combine_link,000400	" DL
                        000001   2-117  	equ	slte.pre_linked_word,1
                        000200   2-118  	bool	slte.pre_linked,000200	" DL
                        000001   2-119  	equ	slte.defs_word,1
                        000100   2-120  	bool	slte.defs,000100		" DL
                                 2-121  
                        000002   2-122  	equ	slte.cur_length_word,2
                        000033   2-123  	equ	slte.cur_length_shift,27
                        000777   2-124  	bool	slte.cur_length_mask,000777
                        000002   2-125  	equ	slte.ringbrack_word,2
                        000030   2-126  	equ	slte.ringbrack_shift,24
                        000007   2-127  	bool	slte.ringbrack_mask,000007
                        000002   2-128  	equ	slte.segno,2		" LOWER
                                 2-129  
                        000003   2-130  	equ	slte.max_length_word,3
                        000030   2-131  	equ	slte.max_length_shift,24
                        000777   2-132  	bool	slte.max_length_mask,000777
                        000003   2-133  	equ	slte.bit_count_word,3
                        000000   2-134  	equ	slte.bit_count_shift,0
                                 2-135  
                                 2-136       "END INCLUDE FILE slte.incl.alm
                                    57  
                                    58  
                                    59  
                                    60  	include	stack_header
                                   3-1  "	BEGIN INCLUDE FILE ... stack_header.incl.alm  3/72  Bill Silver
                                   3-2  "
                                   3-3  "	modified 7/76 by M. Weaver for *system links and more system use of areas
                                   3-4  "	modified 3/77 by M. Weaver  to add rnt_ptr
                                   3-5  "	modified 7/77 by S. Webber to add run_unit_depth and assign_linkage_ptr
                                   3-6  "	modified 6/83 by J. Ives to add trace_frames and in_trace.
                                   3-7  
                                   3-8  " HISTORY COMMENTS:
                                   3-9  "  1) change(86-06-24,DGHowe), approve(86-06-24,MCR7396),
                                  3-10  "     audit(86-08-05,Schroth), install(86-11-03,MR12.0-1206):
                                  3-11  "     added the heap_header_ptr definition
                                  3-12  "  2) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
                                  3-13  "     audit(86-10-10,Fawcett), install(86-11-03,MR12.0-1206):
                                  3-14  "     Modified to support control point management.  These changes were
                                  3-15  "     actually made in February 1985 by G. Palter.
                                  3-16  "  3) change(86-10-22,Fawcett), approve(86-10-22,MCR7473),
                                  3-17  "     audit(86-10-22,Farley), install(86-11-03,MR12.0-1206):
                                  3-18  "     Remove the old_lot pointer and replace it with cpm_data_ptr. Use the 18
                                  3-19  "     bit pad after cur_lot_size for the cpm_enabled. This was done to save
                                  3-20  "     some space int the stack header and change the cpd_ptr unal to
                                  3-21  "     cpm_data_ptr (ITS pair).
                                  3-22  "                                                      END HISTORY COMMENTS
                                  3-23  
                        000004    3-24  	equ	stack_header.cpm_data_ptr,4		ptr to control point for this stack
                        000006    3-25  	equ	stack_header.combined_stat_ptr,6	ptr to separate static area
                                  3-26  
                        000010    3-27  	equ	stack_header.clr_ptr,8		ptr to area containing linkage sections
                        000012    3-28  	equ	stack_header.max_lot_size,10		number of words allowed in lot (DU)
                        000012    3-29  	equ	stack_header.main_proc_invoked,10	nonzero if main proc was invoked in run unit (DL)
                        000012    3-30  	equ	stack_header.run_unit_depth,10	number of active run units stacked (DL)
                        000013    3-31  	equ	stack_header.cur_lot_size,11		DU number of words (entries) in lot
                        000013    3-32            equ	stack_header.cpm_enabled,11		DL  non-zero if control point management is enabled
                        000014    3-33  	equ	stack_header.system_free_ptr,12	ptr to system storage area
                        000016    3-34  	equ	stack_header.user_free_ptr,14		ptr to user storage area
                                  3-35  
                        000020    3-36  	equ	stack_header.parent_ptr,16		ptr to parent stack or null
                        000022    3-37  	equ	stack_header.stack_begin_ptr,18	ptr to first stack frame
                        000024    3-38  	equ	stack_header.stack_end_ptr,20		ptr to next useable stack frame
                        000026    3-39  	equ	stack_header.lot_ptr,22		ptr to the lot for the current ring
                                  3-40  
                        000030    3-41  	equ	stack_header.signal_ptr,24		ptr to signal proc for current ring
                        000032    3-42  	equ	stack_header.bar_mode_sp,26		value of sp before entering bar mode
                        000034    3-43  	equ	stack_header.pl1_operators_ptr,28	ptr: pl1_operators_$operator_table
                        000036    3-44  	equ	stack_header.call_op_ptr,30		ptr to standard call operator
                                  3-45  
                        000040    3-46  	equ	stack_header.push_op_ptr,32		ptr to standard push operator
                        000042    3-47  	equ	stack_header.return_op_ptr,34		ptr to standard return operator
                        000044    3-48  	equ	stack_header.ret_no_pop_op_ptr,36	ptr: stand. return/ no pop operator
                        000046    3-49  	equ	stack_header.entry_op_ptr,38		ptr to standard entry operator
                                  3-50  
                        000050    3-51  	equ	stack_header.trans_op_tv_ptr,40	ptr to table of translator operator ptrs
                        000052    3-52  	equ	stack_header.isot_ptr,42		pointer to ISOT
                        000054    3-53  	equ	stack_header.sct_ptr,44		pointer to System Condition Table
                        000056    3-54  	equ	stack_header.unwinder_ptr,46		pointer to unwinder for current ring
                                  3-55  
                        000060    3-56  	equ	stack_header.sys_link_info_ptr,48	ptr to *system link name table
                        000062    3-57  	equ	stack_header.rnt_ptr,50		ptr to reference name table
                        000064    3-58  	equ	stack_header.ect_ptr,52		ptr to event channel table
                        000066    3-59  	equ	stack_header.assign_linkage_ptr,54	ptr to area for hcs_$assign_linkage calls
                        000070    3-60  	equ	stack_header.heap_header_ptr,56	ptr to heap header.
                        000072    3-61  	equ	stack_header.trace_frames,58		stack of trace_catch_ frames
                        000073    3-62  	equ	stach_header.trace_top_ptr,59		trace pointer
                        000074    3-63  	equ	stack_header.in_trace,60		trace antirecurse bit
                        000100    3-64  	equ	stack_header_end,64			length of stack header
                                  3-65  
                                  3-66  
                                  3-67  
                                  3-68  
                        000000    3-69  	equ	trace_frames.count,0		number of trace frames on stack
                        000001    3-70  	equ	trace_frames.top_ptr,1		packed pointer to top one
                                  3-71  
                                  3-72  "	The  following constant is an offset within the  pl1  operators table.
                                  3-73  "	It  references a  transfer vector table.
                                  3-74  
                        000551    3-75  	bool	tv_offset,551
                                  3-76  
                                  3-77  
                                  3-78  "	The  following constants are offsets within this transfer vector table.
                                  3-79  
                        001170    3-80  	equ	call_offset,tv_offset+271
                        001171    3-81  	equ	push_offset,tv_offset+272
                        001172    3-82  	equ	return_offset,tv_offset+273
                        001173    3-83  	equ	return_no_pop_offset,tv_offset+274
                        001174    3-84  	equ	entry_offset,tv_offset+275
                                  3-85  
                                  3-86  
                                  3-87  " 	END INCLUDE FILE stack_header.incl.alm
                                    61  
                                    62  
                                    63  
                                    64  	include	stack_frame
                                   4-1  "
                                   4-2  "	BEGIN INCLUDE FILE ... stack_frame.incl.alm   6/72 RBS
                                   4-3  "
                                   4-4  " Modified: 16 Dec 1977, D. Levin - to add fio_ps_ptr
                                   4-5  " Modified:  3 Feb 1978, P. Krupp - to add run_unit_manager_bit & main_proc_bit
                                   4-6  " Modified: 21 March 1978, D. Levin - change fio_ps_ptr to support_ptr
                                   4-7  "
                        000020     4-8  	equ	stack_frame.prev_sp,16
                        000020     4-9  	equ	stack_frame.condition_word,16
                        000022    4-10  	equ	stack_frame.next_sp,18
                        000022    4-11  	equ	stack_frame.signaller_word,18
                        000024    4-12  	equ	stack_frame.return_ptr,20
                        000026    4-13  	equ	stack_frame.entry_ptr,22
                        000030    4-14  	equ	stack_frame.operator_ptr,24
                        000030    4-15  	equ	stack_frame.lp_ptr,24
                        000032    4-16  	equ	stack_frame.arg_ptr,26
                        000034    4-17  	equ	stack_frame.static_ptr,28
                        000035    4-18  	equ	stack_frame.support_ptr,29	" only used by fortran I/O
                        000036    4-19  	equ	stack_frame.on_unit_rel_ptrs,30
                        000037    4-20  	equ	stack_frame.operator_ret_ptr,31
                        000037    4-21  	equ	stack_frame.translator_id,31
                        000040    4-22  	equ	stack_frame.regs,32
                        000060    4-23  	equ	stack_frame.min_length,48
                        000020    4-24  	equ	stack_frame.flag_word,16
                        020000    4-25  	bool	stack_frame.main_proc_bit,020000	(DL)
                        010000    4-26  	bool	stack_frame.run_unit_manager,010000	(DL)
                        004000    4-27  	bool	stack_frame.signal_bit,004000		(DL)
                        002000    4-28  	bool	stack_frame.crawl_out_bit,002000	(DL)
                        001000    4-29  	bool	stack_frame.signaller_bit,001000	(DL)
                        000400    4-30  	bool	stack_frame.link_trap_bit,000400	(DL)
                        000200    4-31  	bool	stack_frame.support_bit,000200	(DL)
                        000100    4-32  	bool	stack_frame.condition_bit,000100	(DL)
                                  4-33  
                                  4-34  "
                                  4-35  "	END INCLUDE FILE  ... stack_frame.incl.alm
                                  4-36  "
                                    65  
                                    66  
                                    67  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                    68  "
                                    69  "	call slt_manager$init(sltptr)
                                    70  "
                                    71  "
                                    72  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                    73  
                                    74  
                                    75  	use	transfer_vector
                                    76  
                        000006      77  	entry	init
    000000  0a   000006 7100 00     78  	tra	init
                                    79  
                                    80  	use	main
                                    81  
    000006                          82  init:
    000006  aa  0 00002 3715 20     83  	epplb	ap|2,*		lb -> SLT pointer
    000007  aa  5 00000 3715 20     84  	epplb	lb|0,*		lb -> SLT
    000010  4a  4 00010 6515 20     85  	sprilb	slt_ptr		save pointer to the SLT
                                    86  
    000011  aa  5 00000 3515 20     87  	eppab	lb|slt.name_seg_ptr,*  ab -> name table segment
    000012  aa  5 00003 3535 00     88  	eppbb	lb|slt.first_sup_seg  bb -> limits for sup segs
    000013  0a   000017 7020 00     89  	tsx2	search		search for and hash in sup seg names
                                    90  
    000014  aa  5 00005 3535 00     91  	eppbb	lb|slt.first_init_seg  bb -> limits for init segs
    000015  0a   000017 7020 00     92  	tsx2	search		search for and hash in init seg names
                                    93  
    000016  0a   000215 7100 00     94  	tra	return
                                    95  
                                    96  
                                    97  
    000017                          98  search:
    000017  aa  3 00001 2361 00     99  	ldq	bb|1		get last seg to examine
    000020  aa  3 00000 1761 00    100  	sbq	bb|0		minus first seg to examine
    000021  aa   000001 6250 06    101  	eax5	1,ql		number of segs to examine in X5
    000022  aa  3 00000 2361 00    102  	ldq	bb|0		first seg to examine in Q
    000023  aa   000000 6270 06    103  	eax7	0,ql		place segno in X7
    000024  aa   000004 4020 07    104  	mpy	slte_size,dl	compute SLT index
    000025  aa  5 00010 3701 06    105  	epplp	lb|slt.seg,ql	lp -> SLT entry
                                   106  
    000026                         107  search_loop:
    000026  aa   777777 6250 15    108  	eax5	-1,5		test for completion
    000027  aa   000000 6040 12    109  	tmi	0,2		return if not in this half of S(S)LT
                                   110  
    000030  aa  4 00000 2201 00    111  	ldx0	lp|slte.names_ptr	pick up pointer to names
    000031  aa  1 00002 3521 10    112  	eppbp	ab|segnam.name,0	bp -> first name
    000032  0a   000217 7060 00    113  	tsx6	hash_in		insert names in hash table
                                   114  
    000033  aa  4 00004 3701 00    115  	epplp	lp|slte_size	step to next SLT entry
    000034  aa   000001 6270 17    116  	eax7	1,7		step segment number
    000035  0a   000026 7100 00    117  	tra	search_loop	and keep looking
                                   118  
                                   119  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   120  "
                                   121  "	call slt_manager$build_entry(header, segptr, err)
                                   122  "
                                   123  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   124  
                                   125  
                                   126  	use	transfer_vector
                                   127  
                        000036     128  	entry	build_entry
    000001  0a   000036 7100 00    129  	tra	build_entry
                                   130  
                                   131  	use	main
                                   132  
    000036                         133  build_entry:
    000036  0a   000237 7010 00    134  	tsx1	setup		set everything up
                                   135  
    000037  aa  0 00002 3521 20    136  	eppbp	ap|2,*		bp -> header pointer
    000040  aa  2 00000 3521 20    137  	eppbp	bp|0,*		bp -> header
                                   138  
    000041  aa  2 00001 2351 00    139  	lda	bp|slte.init_seg_word is this an initialization segment?
    000042  aa   020000 3150 07    140  	cana	slte.init_seg,dl	..
    000043  0a   000047 6000 00    141  	tze	sup		if zero, supervisor segment
                                   142  
    000044  aa  5 00006 0541 00    143  	aos	lb|slt.last_init_seg otherwise, init segment
    000045  aa  5 00006 2361 00    144  	ldq	lb|slt.last_init_seg segment number in Q
    000046  0a   000053 7100 00    145  	tra	jn		..
                                   146  
    000047                         147  sup:
    000047  aa  5 00004 0541 00    148  	aos	lb|slt.last_sup_seg	supervisor segment
    000050  aa  5 00004 2361 00    149  	ldq	lb|slt.last_sup_seg	segment number in Q
    000051  aa  5 00005 1161 00    150  	cmpq	lb|slt.first_init_seg are we overlapping the init segs?
    000052  0a   000213 6030 00    151  	trc	error		fatal error if so
                                   152  
    000053                         153  jn:
    000053  aa   000066 7370 00    154  	lls	36+18		shift to left-half of A
    000054  0a   000246 2750 00    155  	ora	itspair		make an ITS pair
    000055  aa  0 00004 7571 20    156  	staq	ap|4,*		and return pointer to segment
    000056  aa   000066 7730 00    157  	lrl	36+18		back to the right-half Q
    000057  aa   000004 4020 07    158  	mpy	slte_size,dl	multiply by length of SLT entry
    000060  aa  5 00010 3701 06    159  	epplp	lb|slt.seg,ql	lp -> slot for new SLT entry
                                   160  
    000061  aa  0 00100 1005 00    161  	mlr	(pr),(pr)		fill in the SLT entry
    000062  aa   200000 000020     162  	desc9a	bp|0,slte_size*4
    000063  aa   400000 000020     163  	desc9a	lp|0,slte_size*4
    000064  aa  2 00004 3521 00    164  	eppbp	bp|slte_size	bp -> next part of header
                                   165  
    000065  aa  5 00000 3515 20    166  	eppab	lb|slt.name_seg_ptr,*  ab -> SLT name table
    000066  aa  1 00000 7211 00    167  	lxl1	ab|name_seg.next_loc  X1 contains first unused location
    000067  aa  4 00000 7411 00    168  	stx1	lp|slte.names_ptr	set name pointer in SLT entry
    000070  aa  1 00000 3515 11    169  	eppab	ab|0,1		ab -> place for names
                                   170  
    000071  aa  2 00000 2361 00    171  	ldq	bp|segnam.count	count of names in Q
    000072  aa   000011 4020 07    172  	mpy	wdsnm+1,dl	multiply by length of each name
    000073  aa   000001 0360 07    173  	adlq	1,dl		add 1 for name count itself
    000074  aa   000002 7360 00    174  	qls	2		multiply by 4
    000075  aa  0 00140 1005 40    175  	mlr	(pr,rl),(pr,rl)	copy the names
    000076  aa   200000 000006     176  	desc9a	bp|0,ql
    000077  aa   100000 000006     177  	desc9a	ab|0,ql
    000100  aa  2 00000 5005 06    178  	a9bd	bp|0,ql		step pointers
    000101  aa  1 00000 5005 06    179  	a9bd	ab|0,ql		..
                                   180  
    000102  aa  4 00001 2351 00    181  	lda	lp|slte.branch_required_word Look for branch-required switch
    000103  aa   040000 3150 07    182  	cana	slte.branch_required,dl Is path provided
    000104  0a   000133 6000 00    183  	tze	end_entry		No, all finished for this entry
                                   184  
    000105  aa  1 00000 6211 00    185  	eax1	ab|0		X1 -> path name
    000106  aa  4 00000 4411 00    186  	sxl1	lp|slte.path_ptr	set path name pointer in SLT entry
    000107  aa  2 00000 2361 00    187  	ldq	bp|0		character count of path name in Q
    000110  aa   000007 0360 07    188  	adlq	7,dl		add in to cover count and round up
    000111  aa   000002 7720 00    189  	qrl	2		round off
    000112  aa   000002 7360 00    190  	qls	2		..
    000113  aa  0 00140 1005 40    191  	mlr	(pr,rl),(pr,rl)	copy the path name
    000114  aa   200000 000006     192  	desc9a	bp|0,ql
    000115  aa   100000 000006     193  	desc9a	ab|0,ql
    000116  aa  2 00000 5005 06    194  	a9bd	bp|0,ql		step pointers
    000117  aa  1 00000 5005 06    195  	a9bd	ab|0,ql		..
                                   196  
    000120  aa  4 00001 2361 00    197  	ldq	lp|slte.acl_provided_word see if ACL was provided
    000121  aa   000001 3160 03    198  	canq	slte.acl_provided,du check the bit
    000122  0a   000133 6000 00    199  	tze	end_entry		no ACL provided
    000123  aa  2 00000 2361 00    200  	ldq	bp|0		get number of ACL items
    000124  aa   000013 4020 07    201  	mpy	11,dl		multiply by item size
    000125  aa   000001 0360 07    202  	adlq	1,dl		and add one for size word
    000126  aa   000002 7360 00    203  	qls	2		get character count
    000127  aa  0 00140 1005 40    204  	mlr	(pr,rl),(pr,rl)	copy the ACL
    000130  aa   200000 000006     205  	desc9a	bp|0,ql
    000131  aa   100000 000006     206  	desc9a	ab|0,ql
    000132  aa  1 00000 5005 06    207  	a9bd	ab|0,ql		bump output pointer
                                   208  
    000133                         209  end_entry:
    000133  aa  1 00000 6211 00    210  	eax1	ab|0		X1 -> free space in name table
    000134  aa  1 00000 3511 00    211  	epbpab	ab|0		ab -> base of name table segment
    000135  aa  1 00000 4411 00    212  	sxl1	ab|name_seg.next_loc  save first unused loc'n in name table
                                   213  
    000136  aa  4 00000 2201 00    214  	ldx0	lp|slte.names_ptr	get pointer to names again
    000137  aa  0 00004 2271 20    215  	ldx7	ap|4,*		X7 contains segment number
    000140  aa  1 00002 3521 10    216  	eppbp	ab|segnam.name,0		bp -> first name
    000141  0a   000217 7060 00    217  	tsx6	hash_in		hash in these names
                                   218  
    000142  0a   000215 7100 00    219  	tra	return
                                   220  
                                   221  
                                   222  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   223  "
                                   224  "	call slt_manager$get_seg_ptr(name, ptr, err)
                                   225  "
                                   226  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   227  
                                   228  
                                   229  	use	transfer_vector
                                   230  
                        000143     231  	entry	get_seg_ptr
    000002  0a   000143 7100 00    232  	tra	get_seg_ptr
                                   233  
                                   234  	use	main
                                   235  
    000143                         236  get_seg_ptr:
    000143  0a   000171 7060 00    237  	tsx6	get_seg		go search the SLT
                                   238  
    000144  0a   000246 2750 00    239  	ora	itspair		make segno into an ITS pair
    000145  aa   000000 2360 07    240  	ldq	0,dl		clear the Q
    000146  aa  0 00004 7571 20    241  	staq	ap|4,*		and return the pointer
                                   242  
    000147  0a   000215 7100 00    243  	tra	return		return
                                   244  
                                   245  
                                   246  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   247  "
                                   248  "	call slt_manager$get_seg_num(name, num, err)
                                   249  "
                                   250  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   251  
                                   252  
                                   253  	use	transfer_vector
                                   254  
                        000150     255  	entry	get_seg_num
    000003  0a   000150 7100 00    256  	tra	get_seg_num
                                   257  
                                   258  	use	main
                                   259  
    000150                         260  get_seg_num:
    000150  0a   000171 7060 00    261  	tsx6	get_seg		go search the SLT
                                   262  
    000151  aa   000022 7710 00    263  	arl	18		right-justify the segment number
    000152  aa  0 00004 7551 20    264  	sta	ap|4,*		and return the segment number
                                   265  
    000153  0a   000215 7100 00    266  	tra	return		return
                                   267  
                                   268  
                                   269  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   270  "
                                   271  "	call slt_manager$get_text_link_ptr(name, text_ptr, link_ptr, err)
                                   272  "
                                   273  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   274  
                                   275  
                                   276  	use	transfer_vector
                                   277  
                        000154     278  	entry	get_text_link_ptr
    000004  0a   000154 7100 00    279  	tra	get_text_link_ptr
                                   280  
                                   281  	use	main
                                   282  
    000154                         283  get_text_link_ptr:
    000154  0a   000171 7060 00    284  	tsx6	get_seg		go search the SLT
                                   285  
    000155  0a   000246 2750 00    286  	ora	itspair		make segno into a pointer
    000156  aa   000000 2360 07    287  	ldq	0,dl		clear the Q
    000157  aa  0 00004 7571 20    288  	staq	ap|4,*		return text pointer
                                   289  
    000160  aa  7 00026 3521 20    290  	eppbp	sb|stack_header.lot_ptr,*  bp -> LOT
    000161  aa  2 00000 2341 01    291  	szn	bp|0,au		linkage for this segment?
    000162  0a   000166 6000 00    292  	tze	no_lkg		if not, return null lkg ptr
    000163  aa  2 00000 7621 01    293  	lprpbp	bp|0,au		bp -> linkage
    000164  aa  0 00006 2521 20    294  	spribp	ap|6,*		return linkage ptr to caller
    000165  0a   000215 7100 00    295  	tra	return		and return
                                   296  
    000166  0a   000250 2370 00    297  no_lkg:	ldaq	nullptr		make link pointer null
    000167  aa  0 00006 7571 20    298  	staq	ap|6,*		..
                                   299  
    000170  0a   000215 7100 00    300  	tra	return		and then return
                                   301  
                                   302  
                                   303  " GET_SEG - Search the SLT for a Name.
                                   304  
    000171                         305  get_seg:
    000171  0a   000237 7010 00    306  	tsx1	setup		go to save sequence and initialization
    000172  aa  0 00002 3521 20    307  	eppbp	ap|2,*		bp -> segment name (char(32) aligned)
                                   308  
    000173  0a   000232 7010 00    309  	tsx1	hash_name		generate hash code from name
    000174  aa  1 00001 2221 05    310  	ldx2	ab|name_seg.ht,al	get start of thread from hash table
    000175                         311  get_seg_loop:
    000175  0a   000213 6000 00    312  	tze	error		if zero thread, name not found
                                   313  
    000176  aa  1 00000 3535 12    314  	eppbb	ab|0,2		bb -> name
    000177  aa  0 00100 1065 00    315  	cmpc	(pr),(pr)		is this the one?
    000200  aa   200000 000040     316  	desc9a	bp|0,32
    000201  aa   300001 000040     317  	desc9a	bb|segnam.name-segnam.hp,32
    000202  0a   000205 6000 00    318  	tze	get_seg_found	if so, return info
                                   319  
    000203  aa  3 00000 2221 00    320  	ldx2	bb|0		get thread to next name
    000204  0a   000175 7100 00    321  	tra	get_seg_loop	and loop
                                   322  
    000205                         323  get_seg_found:
    000205  aa   400000 2350 07    324  	lda	segnam.ref,dl	set referenced bit
    000206  aa  3 00000 2551 00    325  	orsa	bb|0		..
                                   326  
    000207  aa  3 00000 2351 00    327  	lda	bb|0		get thread word
    000210  aa   000022 7350 00    328  	als	18-segnam.segno_shift  shift segno to AU
    000211  aa   007777 3750 03    329  	ana	segnam.segno_mask,du  and mask
    000212  aa   000000 7100 16    330  	tra	0,6		return to caller with segno in AU
                                   331  
                                   332  
                                   333  
                                   334  " ERROR - Error Return Sequence.
                                   335  
    000213                         336  error:
    000213  aa  0 00000 2271 00    337  	ldx7	ap|0		pick up number of arguments
    000214  aa  0 00000 0541 37    338  	aos	ap|0,7*		set the error code
                                   339  
                                   340  " RETURN - Return Sequence.
                                   341  
    000215                         342  return:
    000215  aa  6 00030 3501 20    343  	eppap	sp|stack_frame.operator_ptr,*  restore ptr to caller's ops
    000216  aa  6 00024 6101 00    344  	rtcd	sp|stack_frame.return_ptr  return to caller
                                   345  
                                   346  
                                   347  " HASH_IN - Enter Names for New Segment in Hash Table.
                                   348  
    000217                         349  hash_in:
    000217  aa  2 77776 7231 00    350  	lxl3	bp|-segnam.name	count of names in X3
                                   351  
    000220  0a   000232 7010 00    352  hloop:	tsx1	hash_name		generate hash code from this name
    000221  aa  1 00001 2211 05    353  	ldx1	ab|name_seg.ht,al	X1 contains hash table entry
    000222  aa  2 77777 6201 00    354  	eax0	bp|-segnam.name+segnam.hp  X0 -> new name
    000223  aa  1 00001 7401 05    355  	stx0	ab|name_seg.ht,al	add new name to hash thread
    000224  aa  2 77777 7411 00    356  	stx1	bp|-segnam.name+segnam.hp  chain new entry to list
    000225  aa  2 77777 4471 00    357  	sxl7	bp|-segnam.name+segnam.hp  insert segno in thread word
                                   358  
    000226  aa  2 00011 3521 00    359  	eppbp	bp|wdsnm+1	step to next name
    000227  aa   777777 6230 13    360  	eax3	-1,3		count names
    000230  0a   000220 6010 00    361  	tnz	hloop		loop until all names processed
    000231  aa   000000 7100 16    362  	tra	0,6
                                   363  
                                   364  
                                   365  
                                   366  " HASH_NAME - Generate Hash Code from Segment Name.
                                   367  
    000232                         368  hash_name:
    000232  aa  2 00000 2361 00    369  	ldq	bp|0		get first word of name
    000233  aa  2 00002 6761 00    370  	erq	bp|2		exclusive in two more words
    000234  aa  2 00003 6761 00    371  	erq	bp|3		..
    000235  aa   000177 5060 07    372  	div	127,dl		divide to generate hash code
    000236  aa   000000 7100 11    373  	tra	0,1		return with hash code in A
                                   374  
                                   375  " 
                                   376  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   377  "
                                   378  "	Subroutines.
                                   379  "
                                   380  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   381  
                                   382  
                                   383  
                                   384  " SETUP - Execute SAVE Sequence and Get Pointer to SLT Segment.
                                   385  
    000237                         386  setup:
    000237  aa  0 00000 2201 00    387  	ldx0	ap|0		pick up number of arguments
    000240  aa  0 00000 4501 30    388  	stz	ap|0,0*		zero out the error code
                                   389  
    000241  4a  4 00012 3711 20    390  	epbplb	slt_ptr,*		lb -> base of SLT segment
    000242  aa  5 00010 3701 00    391  	epplp	lb|slt.seg	lp -> beginning of SLT entries
    000243  aa  5 00000 3515 20    392  	eppab	lb|slt.name_seg_ptr,*  ab -> name table segment
    000244  aa   000000 7100 11    393  	tra	0,1		return to caller
                                   394  
                                   395  
                                   396  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   397  "
                                   398  "	Storage and Constants.
                                   399  "
                                   400  "
                                   401  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   402  
                                   403  
    000245  aa   000000 0110 03    404  	even
    000246  aa   000000 000043     405  itspair:	its	0,0		ITS pair template
    000247  aa   000000 000000 
    000250  aa   077777 000043     406  nullptr:	its	-1,1		null pointer
    000251  aa   000001 000000 
                                   407  
    000252                         408  	segref	checker_data_,slt_ptr
                                   409  
                                   410  
                                   411  	join	/text/transfer_vector,main
                                   412  
                                   413  	end	slt_manager
ENTRY SEQUENCES
     
    000252  5a   000043 0000 00
    000253  aa  7 00046 2721 20
    000254  0a   000006 7100 00
    000255  5a   000035 0000 00
    000256  aa  7 00046 2721 20
    000257  0a   000036 7100 00
    000260  5a   000027 0000 00
    000261  aa  7 00046 2721 20
    000262  0a   000143 7100 00
    000263  5a   000021 0000 00
    000264  aa  7 00046 2721 20
    000265  0a   000150 7100 00
    000266  5a   000011 0000 00
    000267  aa  7 00046 2721 20
    000270  0a   000154 7100 00

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000272  5a   000003 000000 
    000273  5a   000057 600000 
    000274  aa   000000 000000 
    000275  55   000011 000002 
    000276  5a   000002 400003 
    000277  55   000006 000011 
    000300  aa  013 163 154 164
    000301  aa  137 155 141 156
    000302  aa  141 147 145 162
    000303  55   000021 000003 
    000304  0a   000267 500000 
    000305  55   000014 000003 
    000306  aa  021 147 145 164         get_text_link_ptr
    000307  aa  137 164 145 170
    000310  aa  164 137 154 151
    000311  aa  156 153 137 160
    000312  aa  164 162 000 000
    000313  55   000027 000011 
    000314  0a   000264 500000 
    000315  55   000024 000003 
    000316  aa  013 147 145 164         get_seg_num
    000317  aa  137 163 145 147
    000320  aa  137 156 165 155
    000321  55   000035 000021 
    000322  0a   000261 500000 
    000323  55   000032 000003 
    000324  aa  013 147 145 164         get_seg_ptr
    000325  aa  137 163 145 147
    000326  aa  137 160 164 162
    000327  55   000043 000027 
    000330  0a   000256 500000 
    000331  55   000040 000003 
    000332  aa  013 142 165 151         build_entry
    000333  aa  154 144 137 145
    000334  aa  156 164 162 171
    000335  55   000050 000035 
    000336  0a   000253 500000 
    000337  55   000046 000003 
    000340  aa  004 151 156 151         init
    000341  aa  164 000 000 000
    000342  55   000002 000043 
    000343  6a   000000 400002 
    000344  55   000053 000003 
    000345  aa  014 163 171 155         symbol_table
    000346  aa  142 157 154 137
    000347  aa  164 141 142 154
    000350  aa  145 000 000 000

DEFINITIONS HASH TABLE

    000351  aa   000000 000015 
    000352  aa   000000 000000 
    000353  aa   000000 000000 
    000354  aa   000000 000000 
    000355  aa   000000 000000 
    000356  5a   000011 000000 
    000357  5a   000035 000000 
    000360  5a   000050 000000 
    000361  aa   000000 000000 
    000362  5a   000021 000000 
    000363  5a   000027 000000 
    000364  5a   000043 000000 
    000365  aa   000000 000000 
    000366  aa   000000 000000 

EXTERNAL NAMES

    000367  aa  007 163 154 164         slt_ptr
    000370  aa  137 160 164 162
    000371  aa  015 143 150 145         checker_data_
    000372  aa  143 153 145 162
    000373  aa  137 144 141 164
    000374  aa  141 137 000 000

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    000375  aa   000004 000000 
    000376  55   000077 000075 
    000377  aa   000001 000000 
    000400  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    000401  5a   000103 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000272 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000014 
    000007  a2   000000 000000 
    000010  9a   777770 0000 46         checker_data_|slt_ptr
    000011  5a   000107 0000 00
    000012  9a   777766 0000 46         checker_data_|slt_ptr
    000013  5a   000107 0000 20
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000004 
    000004  aa   000000 114732 
    000005  aa   732732 062314 
    000006  aa   000000 114775 
    000007  aa   670513 601013 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000233 
    000020  aa   000000 000174 
    000021  aa   000000 000216 
    000022  aa   000222 000174 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   040066 056067 
    000030  aa   040040 117143 
    000031  aa   164157 142145 
    000032  aa   162040 061071 
    000033  aa   070066 040040 
    000034  aa   107112 157150 
    000035  aa   156163 157156 
    000036  aa   056123 171163 
    000037  aa   115141 151156 
    000040  aa   164056 141040 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   154151 163164 
    000045  aa   040040 040040 
    000046  aa   040040 040040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040040 040040 
    000057  aa   040040 040040 
    000060  aa   040040 040040 
    000061  aa   040040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000005 
    000066  aa   000112 000062 
    000067  aa   147740 446364 
    000070  aa   000000 114774 
    000071  aa   461327 600000 
    000072  aa   000127 000031 
    000073  aa   043243 130516 
    000074  aa   000000 104205 
    000075  aa   554413 200000 
    000076  aa   000136 000032 
    000077  aa   127236 043555 
    000100  aa   000000 112724 
    000101  aa   701750 000000 
    000102  aa   000145 000066 
    000103  aa   147714 750316 
    000104  aa   000000 114774 
    000105  aa   453561 000000 
    000106  aa   000163 000041 
    000107  aa   052721 247134 
    000110  aa   000000 105272 
    000111  aa   317215 400000 
    000112  aa   076163 160145          >special_ldd>install>MR12.0-1206>sslt_manager_.alm
    000113  aa   143151 141154 
    000114  aa   137154 144144 
    000115  aa   076151 156163 
    000116  aa   164141 154154 
    000117  aa   076115 122061 
    000120  aa   062056 060055 
    000121  aa   061062 060066 
    000122  aa   076163 163154 
    000123  aa   164137 155141 
    000124  aa   156141 147145 
    000125  aa   162137 056141 
    000126  aa   154155 040040 
    000127  aa   076154 144144          >ldd>include>slt.incl.alm
    000130  aa   076151 156143 
    000131  aa   154165 144145 
    000132  aa   076163 154164 
    000133  aa   056151 156143 
    000134  aa   154056 141154 
    000135  aa   155040 040040 
    000136  aa   076154 144144          >ldd>include>slte.incl.alm
    000137  aa   076151 156143 
    000140  aa   154165 144145 
    000141  aa   076163 154164 
    000142  aa   145056 151156 
    000143  aa   143154 056141 
    000144  aa   154155 040040 
    000145  aa   076163 160145          >special_ldd>install>MR12.0-1206>stack_header.incl.alm
    000146  aa   143151 141154 
    000147  aa   137154 144144 
    000150  aa   076151 156163 
    000151  aa   164141 154154 
    000152  aa   076115 122061 
    000153  aa   062056 060055 
    000154  aa   061062 060066 
    000155  aa   076163 164141 
    000156  aa   143153 137150 
    000157  aa   145141 144145 
    000160  aa   162056 151156 
    000161  aa   143154 056141 
    000162  aa   154155 040040 
    000163  aa   076154 144144          >ldd>include>stack_frame.incl.alm
    000164  aa   076151 156143 
    000165  aa   154165 144145 
    000166  aa   076163 164141 
    000167  aa   143153 137146 
    000170  aa   162141 155145 
    000171  aa   056151 156143 
    000172  aa   154056 141154 
    000173  aa   155040 040040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

           1    acls.acl                 slt:           62.
          13    acls.code                slt:           66.
           0    acls.count               slt:           61.
          11    acls.mode                slt:           65.
           1    acls.userid              slt:           64.
          36    build_entry              sslt_manager_:      128,  129,  133.
        1170    call_offset              stack_header:        80.
                checker_data_            sslt_manager_:      408.
         133    end_entry                sslt_manager_:      183,  199,  209.
        1174    entry_offset             stack_header:        84.
         213    error                    sslt_manager_:      151,  312,  336.
         171    get_seg                  sslt_manager_:      237,  261,  284,  305.
         205    get_seg_found            sslt_manager_:      318,  323.
         175    get_seg_loop             sslt_manager_:      311,  321.
         150    get_seg_num              sslt_manager_:      255,  256,  260.
         143    get_seg_ptr              sslt_manager_:      231,  232,  236.
         154    get_text_link_ptr        sslt_manager_:      278,  279,  283.
         217    hash_in                  sslt_manager_:      113,  217,  349.
         232    hash_name                sslt_manager_:      309,  352,  368.
         220    hloop                    sslt_manager_:      352,  361.
           6    init                     sslt_manager_:       77,   78,   82.
         246    itspair                  sslt_manager_:      155,  239,  286,  405.
          53    jn                       sslt_manager_:      145,  153.
           6    main                     sslt_manager_:       80,  131,  234,  258,  281,  411.
           1    name_seg.ht              sslt_manager_:      310,  353,  355,
                                         slt:           35.
           0    name_seg.next_loc        sslt_manager_:      167,  212,
                                         slt:           33.
         201    name_seg_size            slt:           31.
         166    no_lkg                   sslt_manager_:      292,  297.
         250    nullptr                  sslt_manager_:      297,  406.
           0    path.acls                slt:           56.
           1    path.name                slt:           55.
           0    path.size                slt:           54.
        1171    push_offset              stack_header:        81.
         215    return                   sslt_manager_:       94,  219,  243,  266,  295,  300,  342.
        1173    return_no_pop_offset     stack_header:        83.
        1172    return_offset            stack_header:        82.
          17    search                   sslt_manager_:       89,   92,   98.
          26    search_loop              sslt_manager_:      107,  117.
           0    segnam.count             sslt_manager_:      171,
                                         slt:           41.
           1    segnam.hp                sslt_manager_:      317,  354,  356,  357,
                                         slt:           44.
           2    segnam.name              sslt_manager_:      112,  216,  317,  350,  354,  356,  357,
                                         slt:           49.
           1    segnam.names             slt:           42.
      400000    segnam.ref               sslt_manager_:      324,
                                         slt:           45.
        7777    segnam.segno_mask        sslt_manager_:      329,
                                         slt:           47.
           0    segnam.segno_shift       sslt_manager_:      328,
                                         slt:           46.
         237    setup                    sslt_manager_:      134,  306,  386.
           5    slt.first_init_seg       sslt_manager_:       91,  150,
                                         slt:           21.
           3    slt.first_sup_seg        sslt_manager_:       88,
                                         slt:           19.
           7    slt.free_core_size       slt:           23.
           2    slt.free_core_start      slt:           18.
           6    slt.last_init_seg        sslt_manager_:      143,  144,
                                         slt:           22.
           4    slt.last_sup_seg         sslt_manager_:      148,  149,
                                         slt:           20.
           0    slt.name_seg_ptr         sslt_manager_:       87,  166,  392,
                                         slt:           17.
          10    slt.seg                  sslt_manager_:      105,  159,  391,
                                         slt:           24.
          10    slt.slte                 slt:           26.
       10000    slte.abs_seg             slte:          88.
           1    slte.abs_seg_word        slte:          87.
          17    slte.access_mask         slte:          84.
          40    slte.access_shift        slte:          83.
           1    slte.access_word         slte:          82.
           1    slte.acl_provided        sslt_manager_:      198,
                                         slte:         102.
           1    slte.acl_provided_word   sslt_manager_:      197,
                                         slte:         101.
           0    slte.bit_count_shift     slte:         134.
           3    slte.bit_count_word      slte:         133.
       40000    slte.branch_required     sslt_manager_:      182,
                                         slte:         104.
           1    slte.branch_required_word      sslt_manager_:      181,
                                               slte:         103.
        1000    slte.breakpointable      slte:          94.
           1    slte.breakpointable_word       slte:          93.
       20000    slte.cache               slte:          86.
           1    slte.cache_word          slte:          85.
         400    slte.combine_link        slte:         116.
           1    slte.combine_link_word   slte:         115.
         777    slte.cur_length_mask     slte:         124.
          33    slte.cur_length_shift    slte:         123.
           2    slte.cur_length_word     slte:         122.
         100    slte.defs                slte:         120.
           1    slte.defs_word           slte:         119.
        4000    slte.firmware_seg        slte:          90.
           1    slte.firmware_seg_word   slte:          89.
       20000    slte.init_seg            sslt_manager_:      140,
                                         slte:         106.
           1    slte.init_seg_word       sslt_manager_:      139,
                                         slte:         105.
        2000    slte.layout_seg          slte:          92.
           1    slte.layout_seg_word     slte:          91.
        4000    slte.link_provided       slte:         110.
           1    slte.link_provided_word  slte:         109.
        2000    slte.link_sect           slte:         112.
        1000    slte.link_sect_wired     slte:         114.
           1    slte.link_sect_wired_word      slte:         113.
           1    slte.link_sect_word      slte:         111.
         777    slte.max_length_mask     slte:         132.
          30    slte.max_length_shift    slte:         131.
           3    slte.max_length_word     slte:         130.
           0    slte.names_ptr           sslt_manager_:      111,  168,  214,
                                         slte:          79.
          20    slte.paged               slte:          98.
           1    slte.paged_word          slte:          97.
           0    slte.path_ptr            sslt_manager_:      186,
                                         slte:          80.
          10    slte.per_process         slte:         100.
           1    slte.per_process_word    slte:          99.
         200    slte.pre_linked          slte:         118.
           1    slte.pre_linked_word     slte:         117.
           7    slte.ringbrack_mask      slte:         127.
          30    slte.ringbrack_shift     slte:         126.
           2    slte.ringbrack_word      slte:         125.
           2    slte.segno               slte:         128.
       10000    slte.temp_seg            slte:         108.
           1    slte.temp_seg_word       slte:         107.
          40    slte.wired               slte:          96.
           1    slte.wired_word          slte:          95.
           4    slte_size                sslt_manager_:      104,  115,  158,  162,  163,  164,
                                         slte:          77.
       10000    slte_uns.abs_seg         slte:          26.
           1    slte_uns.abs_seg_word    slte:          25.
          17    slte_uns.access_mask     slte:          22.
          40    slte_uns.access_shift    slte:          21.
           1    slte_uns.access_word     slte:          20.
           1    slte_uns.acl_provided    slte:          40.
           1    slte_uns.acl_provided_word     slte:          39.
           0    slte_uns.bit_count_shift       slte:          72.
           3    slte_uns.bit_count_word  slte:          71.
       40000    slte_uns.branch_required       slte:          42.
           1    slte_uns.branch_required_word  slte:          41.
        1000    slte_uns.breakpointable  slte:          32.
           1    slte_uns.breakpointable_word   slte:          31.
       20000    slte_uns.cache           slte:          24.
           1    slte_uns.cache_word      slte:          23.
         400    slte_uns.combine_link    slte:          54.
           1    slte_uns.combine_link_word     slte:          53.
         777    slte_uns.cur_length_mask       slte:          62.
          33    slte_uns.cur_length_shift      slte:          61.
           2    slte_uns.cur_length_word       slte:          60.
         100    slte_uns.defs            slte:          58.
           1    slte_uns.defs_word       slte:          57.
        4000    slte_uns.firmware_seg    slte:          28.
           1    slte_uns.firmware_seg_word     slte:          27.
       20000    slte_uns.init_seg        slte:          44.
           1    slte_uns.init_seg_word   slte:          43.
        2000    slte_uns.layout_seg      slte:          30.
           1    slte_uns.layout_seg_word       slte:          29.
        4000    slte_uns.link_provided   slte:          48.
           1    slte_uns.link_provided_word    slte:          47.
        2000    slte_uns.link_sect       slte:          50.
        1000    slte_uns.link_sect_wired       slte:          52.
           1    slte_uns.link_sect_wired_word  slte:          51.
           1    slte_uns.link_sect_word  slte:          49.
         777    slte_uns.max_length_mask       slte:          70.
          30    slte_uns.max_length_shift      slte:          69.
           3    slte_uns.max_length_word       slte:          68.
           0    slte_uns.names_ptr       slte:          17.
          20    slte_uns.paged           slte:          36.
           1    slte_uns.paged_word      slte:          35.
           0    slte_uns.path_ptr        slte:          18.
          10    slte_uns.per_process     slte:          38.
           1    slte_uns.per_process_word      slte:          37.
         200    slte_uns.pre_linked      slte:          56.
           1    slte_uns.pre_linked_word       slte:          55.
           7    slte_uns.ringbrack_mask  slte:          65.
          30    slte_uns.ringbrack_shift       slte:          64.
           2    slte_uns.ringbrack_word  slte:          63.
           2    slte_uns.segno           slte:          66.
       10000    slte_uns.temp_seg        slte:          46.
           1    slte_uns.temp_seg_word   slte:          45.
          40    slte_uns.wired           slte:          34.
           1    slte_uns.wired_word      slte:          33.
           4    slte_uns_size            slte:          15.
                slt_ptr                  sslt_manager_:       85,  390,  408.
      100010    slt_size                 slt:           14.
          73    stach_header.trace_top_ptr     stack_header:        62.
          32    stack_frame.arg_ptr      stack_frame:   16.
         100    stack_frame.condition_bit      stack_frame:   32.
          20    stack_frame.condition_word     stack_frame:    9.
        2000    stack_frame.crawl_out_bit      stack_frame:   28.
          26    stack_frame.entry_ptr    stack_frame:   13.
          20    stack_frame.flag_word    stack_frame:   24.
         400    stack_frame.link_trap_bit      stack_frame:   30.
          30    stack_frame.lp_ptr       stack_frame:   15.
       20000    stack_frame.main_proc_bit      stack_frame:   25.
          60    stack_frame.min_length   stack_frame:   23.
          22    stack_frame.next_sp      stack_frame:   10.
          36    stack_frame.on_unit_rel_ptrs   stack_frame:   19.
          30    stack_frame.operator_ptr       sslt_manager_:      343,
                                               stack_frame:   14.
          37    stack_frame.operator_ret_ptr   stack_frame:   20.
          20    stack_frame.prev_sp      stack_frame:    8.
          40    stack_frame.regs         stack_frame:   22.
          24    stack_frame.return_ptr   sslt_manager_:      344,
                                         stack_frame:   12.
       10000    stack_frame.run_unit_manager   stack_frame:   26.
        1000    stack_frame.signaller_bit      stack_frame:   29.
          22    stack_frame.signaller_word     stack_frame:   11.
        4000    stack_frame.signal_bit   stack_frame:   27.
          34    stack_frame.static_ptr   stack_frame:   17.
         200    stack_frame.support_bit  stack_frame:   31.
          35    stack_frame.support_ptr  stack_frame:   18.
          37    stack_frame.translator_id      stack_frame:   21.
          66    stack_header.assign_linkage_ptr      stack_header:        59.
          32    stack_header.bar_mode_sp       stack_header:        42.
          36    stack_header.call_op_ptr       stack_header:        44.
          10    stack_header.clr_ptr     stack_header:        27.
           6    stack_header.combined_stat_ptr       stack_header:        25.
           4    stack_header.cpm_data_ptr      stack_header:        24.
          13    stack_header.cpm_enabled       stack_header:        32.
          13    stack_header.cur_lot_size      stack_header:        31.
          64    stack_header.ect_ptr     stack_header:        58.
          46    stack_header.entry_op_ptr      stack_header:        49.
          70    stack_header.heap_header_ptr   stack_header:        60.
          74    stack_header.in_trace    stack_header:        63.
          52    stack_header.isot_ptr    stack_header:        52.
          26    stack_header.lot_ptr     sslt_manager_:      290,
                                         stack_header:        39.
          12    stack_header.main_proc_invoked       stack_header:        29.
          12    stack_header.max_lot_size      stack_header:        28.
          20    stack_header.parent_ptr  stack_header:        36.
          34    stack_header.pl1_operators_ptr       stack_header:        43.
          40    stack_header.push_op_ptr       stack_header:        46.
          42    stack_header.return_op_ptr     stack_header:        47.
          44    stack_header.ret_no_pop_op_ptr       stack_header:        48.
          62    stack_header.rnt_ptr     stack_header:        57.
          12    stack_header.run_unit_depth    stack_header:        30.
          54    stack_header.sct_ptr     stack_header:        53.
          30    stack_header.signal_ptr  stack_header:        41.
          22    stack_header.stack_begin_ptr   stack_header:        37.
          24    stack_header.stack_end_ptr     stack_header:        38.
          14    stack_header.system_free_ptr   stack_header:        33.
          60    stack_header.sys_link_info_ptr       stack_header:        56.
          72    stack_header.trace_frames      stack_header:        61.
          50    stack_header.trans_op_tv_ptr   stack_header:        51.
          56    stack_header.unwinder_ptr      stack_header:        54.
          16    stack_header.user_free_ptr     stack_header:        34.
         100    stack_header_end         stack_header:        64.
          47    sup                      sslt_manager_:      141,  147.
           0    trace_frames.count       stack_header:        69.
           1    trace_frames.top_ptr     stack_header:        70.
           0    transfer_vector          sslt_manager_:       75,  126,  229,  253,  276,  411.
         551    tv_offset                stack_header:        75,   80,   81,   82,   83,   84.
          10    wdsnm                    sslt_manager_:       44,  172,  359.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
