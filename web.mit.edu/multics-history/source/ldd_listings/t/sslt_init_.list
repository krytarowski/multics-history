	COMPILATION LISTING OF SEGMENT sslt_init_
	Compiled by: Multics PL/I Compiler, Release 28d, of October 4, 1983
	Compiled at: Honeywell LCPD Phoenix, System M
	Compiled on: 12/15/83  1136.5 mst Thu
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 /* sslt_init_.pl1 -- copies template slt from template_slt_ into temp segs */
        7 /* for the checker. BIM 7/2/82 */
        8 /* format: style2 */
        9 
       10 sslt_init_:
       11      procedure (slt_ptr, name_table_ptr);
       12 
       13 	declare (slt_ptr, name_table_ptr)
       14 				 pointer parameter;
       15 
  1     1 /* BEGIN INCLUDE FILE slt.incl.pl1 --- Last modified 2/76 SHW */
  1     2 
  1     3 /* Declarations for Segment Loading Table header and array.
  1     4*
  1     5*   Used by Initialization and MST Checker subroutines */
  1     6 
  1     7 dcl sltp ptr,					/* pointer to base of SLT segment */
  1     8     names_ptr ptr,					/* pointer to base of SLT names segment */
  1     9     namep ptr,					/* pointer to segment name list block */
  1    10     pathp ptr,					/* pointer to segment's directory path name */
  1    11     aclp ptr;					/* pointer to acl structure */
  1    12 
  1    13 declare 1 slt based (sltp) aligned,			/* declaration of Segment Loading Table (SLT) */
  1    14 	2 name_seg_ptr ptr,				/* words 0-1, pointer (ITS pair) to name segment */
  1    15 	2 free_core_start fixed bin (24),		/* word 2, start of free core after perm-wired */
  1    16 	2 first_sup_seg fixed bin (18),		/* word 3, first supervisor segment number */
  1    17 	2 last_sup_seg fixed bin (18), 		/* word 4, last supervisor segment number */
  1    18 	2 first_init_seg fixed bin (18),		/* word 5, first initializer segment number */
  1    19 	2 last_init_seg fixed bin (18),		/* word 6, last initializer segment number */
  1    20 	2 free_core_size fixed bin (24),		/* size (in words) of free core after perm-wired */
  1    21 	2 seg (0:8191) aligned,			/* segment entries (4 words each) */
  1    22 	  3 slte (4) fixed bin (35);			/* Space for SLT entries */
  1    23 
  1    24 /* auxiliary segment of SLT for storing of segment names and directory path names */
  1    25 
  1    26 declare 1 name_seg based (names_ptr) aligned,		/* name segment header */
  1    27 	2 pad bit (18) unal,
  1    28 	2 next_loc bit (18) unal,			/* Next available free location in name seg */
  1    29 	2 ht (0:127) bit (18) aligned;		/* Names hash table */
  1    30 
  1    31 declare 1 segnam based (namep) aligned,			/* declaration for segment name block */
  1    32 	2 count fixed bin (17),			/* number of segment names in this block */
  1    33 	2 names (50 refer (segnam.count)),		/* segment name array */
  1    34 	  3 hp bit (18) unal,			/* hash thread pointer */
  1    35 	  3 ref bit (1) unal,			/* "1"b if name referenced */
  1    36 	  3 pad bit (5) unal,
  1    37 	  3 segno bit (12) unal,			/* segment number associated with this name */
  1    38 	  3 name char (32) unal;			/* space for name (max 32 characters) */
  1    39 
  1    40 declare 1 path based (pathp) aligned,			/* declaration for directory path name */
  1    41 	2 size fixed bin (17),			/* length of pathname */
  1    42 	2 name char (168 refer (path.size)) unal,	/* directory path name */
  1    43 	2 acls fixed bin;				/* ACL list starts here */
  1    44 
  1    45 declare 1 acls based (aclp) aligned,			/* declaration for acl list */
  1    46 	2 count fixed bin,				/* number of entries in acl list */
  1    47 	2 acl (50 refer (acls.count)),		/* array of acl entries */
  1    48 	  3 userid char (32),			/* user specification */
  1    49 	  3 mode bit (36) aligned,			/* mode for the specified user */
  1    50 	  3 pad bit (36) aligned,
  1    51 	  3 code fixed bin;
  1    52 
  1    53 
  1    54 /* END INCLUDE FILE slt.incl.pl1 */
       16 
       17 
       18 	declare addr		 builtin;
       19 
       20 	declare template_slt_$slt_length
       21 				 fixed bin ext;
       22 	declare template_slt_$name_table_length
       23 				 fixed bin ext;
       24 
       25 	declare template_slt_$t_slt	 bit (36) aligned ext;
       26 	declare template_slt_$t_name_table
       27 				 bit (36) aligned ext;
       28 
       29 	declare move_slt		 (template_slt_$slt_length) bit (36) aligned based;
       30 	declare move_nt		 (template_slt_$name_table_length) bit (36) aligned based;
       31 
       32 	declare (init_tox, init_fromx, x)
       33 				 fixed bin;
       34 
       35 	slt_ptr -> move_slt = addr (template_slt_$t_slt) -> move_slt;
       36 	name_table_ptr -> move_nt = addr (template_slt_$t_name_table) -> move_nt;
       37 
       38 	sltp = slt_ptr;
       39 
       40 /*  It still remains to relocate the init segs in their proper place */
       41 
       42 	init_fromx = slt.last_sup_seg + 1;
       43 	init_tox = slt.first_init_seg;
       44 
       45 	do x = 0 to slt.last_init_seg - slt.first_init_seg;
       46 	     slt.seg (init_tox + x) = slt.seg (init_fromx + x);
       47 	     slt.seg (init_fromx + x) = 0;
       48 	end;
       49 
       50 	slt_ptr -> slt.name_seg_ptr = name_table_ptr;
       51 	return;
       52      end sslt_init_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    12/15/83  1135.0  sslt_init_.pl1                    >special_ldd>on>12/15/83>sslt_init_.pl1
16           1    05/24/82  1005.0  slt.incl.pl1                      >ldd>include>slt.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
addr                                                   builtin function         dcl 18 ref 35 36
first_init_seg            5            based           fixed bin(18,0)          level 2 dcl 1-13 ref 43 45
init_fromx                      000103 automatic       fixed bin(17,0)          dcl 32 set ref 42* 46 47
init_tox                        000102 automatic       fixed bin(17,0)          dcl 32 set ref 43* 46
last_init_seg             6            based           fixed bin(18,0)          level 2 dcl 1-13 ref 45
last_sup_seg              4            based           fixed bin(18,0)          level 2 dcl 1-13 ref 42
move_nt                                based           bit(36)                  array dcl 30 set ref 36* 36
move_slt                               based           bit(36)                  array dcl 29 set ref 35* 35
name_seg_ptr                           based           pointer                  level 2 dcl 1-13 set ref 50*
name_table_ptr                         parameter       pointer                  dcl 13 ref 10 36 50
seg                      10            based           structure                array level 2 dcl 1-13 set ref 46* 46 47*
slt                                    based           structure                level 1 dcl 1-13
slt_ptr                                parameter       pointer                  dcl 13 ref 10 35 38 50
sltp                            000100 automatic       pointer                  dcl 1-7 set ref 38* 42 43 45 45 46 46 47
template_slt_$name_table_length 000012 external static fixed bin(17,0)          dcl 22 ref 36
template_slt_$slt_length        000010 external static fixed bin(17,0)          dcl 20 ref 35
template_slt_$t_name_table      000016 external static bit(36)                  dcl 26 set ref 36
template_slt_$t_slt             000014 external static bit(36)                  dcl 25 set ref 35
x                               000104 automatic       fixed bin(17,0)          dcl 32 set ref 45* 46 46 47*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
aclp                                   automatic       pointer                  dcl 1-7
acls                                   based           structure                level 1 dcl 1-45
name_seg                               based           structure                level 1 dcl 1-26
namep                                  automatic       pointer                  dcl 1-7
names_ptr                              automatic       pointer                  dcl 1-7
path                                   based           structure                level 1 dcl 1-40
pathp                                  automatic       pointer                  dcl 1-7
segnam                                 based           structure                level 1 dcl 1-31

NAME DECLARED BY EXPLICIT CONTEXT.
sslt_init_                      000005 constant        entry                    external dcl 10

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       174         214     112         204
Length       374     112        20         144      62           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
sslt_init_                           73 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
sslt_init_               000100 sltp                        sslt_init_
                         000102 init_tox                    sslt_init_
                         000103 init_fromx                  sslt_init_
                         000104 x                           sslt_init_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
return              ext_entry

NO EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
template_slt_$name_table_length                             template_slt_$slt_length      template_slt_$t_name_table
template_slt_$t_slt




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     10 000001        35 000012        36 000023        38 000033        42 000034        43 000037        45 000041
     46 000051        47 000066        48 000102        50 000104        51 000111


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
