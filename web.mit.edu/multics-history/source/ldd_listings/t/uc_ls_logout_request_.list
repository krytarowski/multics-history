	COMPILATION LISTING OF SEGMENT uc_ls_logout_request_
	Compiled by: Multics PL/I Compiler, Release 29, of July 28, 1986
	Compiled at: Honeywell Bull, Phx. Az., Sys-M 
	Compiled on: 08/04/87  1258.6 mst Tue
	    Options: optimize map

        1 /****^  ********************************************
        2*        *                                          *
        3*        * Copyright, (C) Honeywell Bull Inc., 1987 *
        4*        *                                          *
        5*        ******************************************** */
        6 
        7 
        8 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
        9 /*							       */
       10 /* This module is part of the Multics Network Architecture (MNA) version of  */
       11 /* user control.  MNA user control serves users coming into Multics via      */
       12 /* separate networks (eg, the Distributed Systems Architecture (DSA)	       */
       13 /* network.  MNA user control is not used for logins through the Multics     */
       14 /* Communications System (MCS).  A separate MCS user control system serves   */
       15 /* MCS users.						       */
       16 /*							       */
       17 /* To Be Supplied:						       */
       18 /*  1) Brief module description.  See MDD010 or MTBs 751 and 752 for details */
       19 /*     about this module, and its relationship to modules in the MCS user    */
       20 /*     control system.					       */
       21 /*  2) Operator error message documentation.  This program calls	       */
       22 /*     sys_log_$general but does not contain the required descriptions of    */
       23 /*     these messages.  This omission was waived for initial installation    */
       24 /*     of the subsystem by the auditor, security coordinator, and by MDC     */
       25 /*     management.						       */
       26 /*							       */
       27 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
       28 
       29 /****^  HISTORY COMMENTS:
       30*  1) change(86-04-27,Swenson), approve(87-07-13,MCR7737),
       31*     audit(87-05-18,GDixon), install(87-08-04,MR12.1-1055):
       32*     Initial coding.
       33*  2) change(87-04-29,GDixon), approve(87-07-13,MCR7737),
       34*     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
       35*     Change references from uc_user_table_mgr_ to user_table_mgr_.
       36*  3) change(87-05-18,GDixon), approve(87-07-13,MCR7737),
       37*     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
       38*      A) Use sys_log_$general for error reporting.
       39*      B) Correct coding standard violations.
       40*      C) Complete sys_log_ error messages.
       41*                                                   END HISTORY COMMENTS */
       42 
       43 /* format: style4,indattr */
       44 
       45 uc_ls_logout_request_:
       46      procedure (P_ls_request_server_info_ptr,
       47 	P_ls_request_ptr, P_ls_request_lth,
       48 	P_ls_response_ptr, P_ls_response_lth,
       49 	P_ls_ipc_reply_ptr, P_code);
       50 
       51 /**** This login server request is issued only when a user is in the
       52*      middle of a login dialogue and types "logout".  It is used to
       53*      notify the AS to clean up the ute entry for the user. */
       54 
       55 /* Parameters */
       56 
       57 dcl  P_ls_request_server_info_ptr ptr parameter;
       58 dcl  P_ls_request_ptr       ptr parameter;
       59 dcl  P_ls_request_lth       fixed bin (18) parameter;
       60 dcl  P_ls_response_ptr      ptr parameter;
       61 dcl  P_ls_response_lth      fixed bin (18) parameter;
       62 dcl  P_ls_ipc_reply_ptr     ptr parameter;
       63 dcl  P_code	        fixed bin (35) parameter;
       64 
       65 /* Automatic */
       66 
       67 dcl  code		        fixed bin (35) automatic;
       68 dcl  utep		        ptr automatic;
       69 
       70 /* Entries */
       71 
       72 dcl  user_table_mgr_$free entry (ptr);
       73 dcl  user_table_mgr_$utep_from_handle entry (bit (72) aligned)
       74 		        returns (ptr);
       75 dcl  uc_logout_	        entry (ptr, char (*));
       76 
       77 /* External */
       78 
       79 dcl  error_table_$id_not_found fixed bin (35) ext static;
       80 
       81 /* Constant */
       82 
       83 dcl  ME		        char (21) initial ("uc_ls_logout_request_") internal static options (constant);
       84 
       85 /* Builtins */
       86 
       87 dcl (addr, null)	        builtin;
       88 
       89 /* Program */
       90 
       91 	ls_request_ptr = P_ls_request_ptr;
       92 
       93 	code = 0;
       94 
       95 	utep = user_table_mgr_$utep_from_handle (
       96 	     login_server_logout_request.handle);
       97 	if utep = null () then
       98 	     call Abort (error_table_$id_not_found,
       99 		"Could not locate user table entry for handle ^24.3b.",
      100 		login_server_logout_request.handle);
      101 
      102 /**** Log the user out, if he is logged in. */
      103 
      104 	call uc_logout_ (utep, "logout, no process");
      105 
      106 /**** Free the user table entry. */
      107 
      108 	call user_table_mgr_$free (utep);
      109 
      110 /**** The login server will not expect any response */
      111 
      112 	P_ls_response_lth = 0;
      113 RETURN:
      114 	P_code = code;
      115 	return;
      116 
      117 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      118 /*							       */
      119 /* Abort:  Report errors via sys_log_$general and stop execution.	       */
      120 /*							       */
      121 /* Syntax:  call Abort (code, ioa_ctl, args);			       */
      122 /*							       */
      123 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      124 
      125 Abort:
      126      procedure options (variable);
      127 
      128 dcl  cu_$arg_list_ptr       entry returns (ptr);
      129 dcl  sys_log_$general       entry (ptr);
      130 
      131 	sl_info = sl_info_code_msg;
      132 	sl_info.arg_list_ptr = cu_$arg_list_ptr ();
      133 	sl_info.severity = SL_LOG_SILENT;
      134 	sl_info.caller = ME;
      135 	call sys_log_$general (addr (sl_info));
      136 	code = sl_info.code;
      137 	if code ^= 0 then go to RETURN;
      138 
      139      end Abort;
      140 
      141 /* format: off */
      142  /*  BEGIN:   ls_request_server_info.incl.pl1		  *  *  *  *  *  */
  1     2 
  1     3 /****^  HISTORY COMMENTS:
  1     4*  1) change(86-04-05,Swenson), approve(87-07-14,MCR7737),
  1     5*     audit(87-07-14,Parisek), install(87-08-04,MR12.1-1056):
  1     6*     Initial coding.
  1     7*                                                   END HISTORY COMMENTS */
  1     8 
  1     9 /* format: style4,indattr */
  1    10 
  1    11 dcl  ls_request_server_info_ptr ptr automatic;
  1    12 dcl  1 ls_request_server_info structure aligned
  1    13 		        based (ls_request_server_info_ptr),
  1    14        2 version	        char (8),
  1    15        2 reply_ptr	        ptr,
  1    16        2 flags,
  1    17          3 initialized      bit (1) unaligned,
  1    18          3 pad1	        bit (35) unaligned,
  1    19        2 request_ms,
  1    20          3 dirname	        char (168) unaligned,
  1    21          3 entryname        char (32) unaligned,
  1    22          3 index	        fixed bin,
  1    23        2 request_info,				/* only valid while executing a request */
  1    24          3 sender_process_id bit (36) aligned;
  1    25 
  1    26 dcl  LS_REQUEST_SERVER_INFO_VERSION_1 char (8) initial ("lsrsi001") internal static options (constant);
  1    27 
  1    28 /*  END OF:  ls_request_server_info.incl.pl1		  *  *  *  *  *  */
      142 
      143  /* BEGIN INCLUDE FILE ... login_server_messages.incl.pl1 */
  2     2 
  2     3 /****^  HISTORY COMMENTS:
  2     4*  1) change(86-06-30,Coren), approve(86-06-30,MCR7415),
  2     5*     audit(86-07-02,Margolin), install(86-07-11,MR12.0-1092):
  2     6*     Initial implementation.
  2     7*  2) change(87-04-16,GDixon), approve(87-07-13,MCR7679),
  2     8*     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1056):
  2     9*      A) Add REQUEST_TYPES and RESPONSE_TYPES arrays.
  2    10*      B) Add login_server_validate_response.last_incorrect_password.time.
  2    11*      C) Add user_connection_info.line_type.
  2    12*      D) Add login_server_process_request.minimum_ring.
  2    13*  3) change(87-05-14,GDixon), approve(87-07-13,MCR7737),
  2    14*     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1056):
  2    15*      A) Add login_server_process_response.brief.
  2    16*      B) Add login_server_list_response.initial_ring.
  2    17*      C) Separate login_server_process_response into fixed and variable parts.
  2    18*      D) Move user_connection_info into login_server_request_header.
  2    19*                                                   END HISTORY COMMENTS */
  2    20 
  2    21 /* This include file defines all the structures passed in message segments
  2    22*   between a login server process and the Initializer (or "answering service")
  2    23*   process. For convenience, messages from the server to the initializer,
  2    24*   passed using the send_ls_request_ subroutine, are called "requests"; 
  2    25*   messages from the initializer to the server, passed using the user_message_ 
  2    26*   mechanism, are called "responses".
  2    27**/
  2    28 
  2    29 /* Request types */
  2    30 
  2    31 dcl  (LS_VALIDATE_REQUEST initial (1),			/* validate user ID and password */
  2    32       LS_PROCESS_REQUEST initial (2),			/* create or connect to a process */
  2    33       LS_LIST_REQUEST initial (3),			/* list disconnected processes */
  2    34       LS_DIAL_REQUEST initial (4),			/* find a dial server */
  2    35       LS_DISCONNECT_REQUEST initial (5),		/* report disconnection of a login channel */
  2    36       LS_LOGOUT_REQUEST initial (6),			/* discard UTE (end of dialogue) */
  2    37       LS_OPERATOR_REQUEST initial (7))			/* log the user in as an operator */
  2    38       fixed bin internal static options (constant);
  2    39 
  2    40 dcl  LS_REQUEST_TYPES        (7) char (10) internal static options (constant) initial
  2    41 		        (
  2    42 		        "validate",
  2    43 		        "process",
  2    44 		        "list",
  2    45 		        "dial",
  2    46 		        "disconnect",
  2    47 		        "logout",
  2    48 		        "operator");
  2    49 
  2    50 dcl  ls_request_ptr pointer;
  2    51 
  2    52 /* common header for all requests */
  2    53 
  2    54 dcl 1 ls_request_header aligned based (ls_request_ptr),
  2    55     2 header_version char (8),			/* version for this header */
  2    56     2 request_version char (8),			/* varies depending on the request */
  2    57     2 request_type fixed bin,
  2    58     2 pad1 bit (36),
  2    59     2 reply_event_channel fixed bin (71),		/* event channel over which reply_message should be sent */
  2    60     2 reply_handle bit (72) aligned,			/* used for dispatching response */
  2    61     2 connection_info like user_connection_info;		/* connection making this request. */
  2    62 
  2    63 dcl  LS_REQUEST_HEADER_VERSION_1 char (8) initial ("lsrh0001") internal static options (constant);
  2    64 
  2    65 dcl 1 user_connection_info aligned based,		/* common info passed in most requests */
  2    66     2 connection_name char (32),
  2    67     2 access_class_range (2) bit (72),
  2    68     2 terminal_type char (32),
  2    69     2 terminal_id char (4),
  2    70     2 line_type fixed bin;
  2    71 
  2    72 
  2    73 
  2    74 /* "validate" request: validate user ID and password */
  2    75 
  2    76 dcl 1 login_server_validate_request aligned based (ls_request_ptr),
  2    77     2 header like ls_request_header,			/* request_type = LS_VALIDATE_REQUEST */
  2    78     2 current_password char (8),			/* scrambled */
  2    79     2 authorization bit (72),				/* only valid if auth_given = "1"b */
  2    80     2 terminate_event_channel fixed bin (71),		/* event channel to notify server when process terminates */
  2    81     2 person_id char (22),				/* as specified in login line */
  2    82     2 project_id char (9),				/* likewise, might be null string */
  2    83     2 network_connection_type fixed bin,		/* see below for values */
  2    84     2 new_password char (8),				/* only valid if change_password = "1"b */
  2    85     2 flags,
  2    86       3 gpw bit (1) unaligned,			/* password generated in response to -generate_password */
  2    87       3 auth_given bit (1) unaligned,			/* -authorization specified */
  2    88       3 anonymous bit (1) unaligned,			/* "enterp" request */
  2    89       3 anon_no_password bit (1) unaligned,		/* "enter" request */
  2    90       3 change_password bit (1) unaligned,		/* gave -cpw or -gpw */
  2    91       3 change_default_auth bit (1) unaligned,		/* gave -change_default_authorization */
  2    92       3 change_default_proj bit (1) unaligned,		/* gave -change_default_project */
  2    93       3 operator bit (1) unaligned,			/* gave -operator */
  2    94       3 pad bit (28) unaligned;
  2    95 
  2    96 
  2    97 dcl  LS_VALIDATE_REQUEST_VERSION_1 char (8) internal static options (constant) initial ("lsvr0001");
  2    98 
  2    99 
  2   100 
  2   101 /* "process" request: create a process or reconnect to an existing process for the specified user */
  2   102 
  2   103 dcl 1 login_server_process_request aligned based (ls_request_ptr),
  2   104     2 fixed_part,					/* to allow for automatic copies */
  2   105       3 header like ls_request_header,			/* request_type = LS_PROCESS_REQUEST */
  2   106       3 handle bit (72),				/* as provided in validate_response */
  2   107       3 person_id char (22),				/* the real one */
  2   108       3 project_id char (9),				/* likewise */
  2   109       3 project_pad fixed bin,
  2   110       3 command_type fixed bin,			/* login, connect, etc.; see below for names */
  2   111       3 process_number fixed bin,			/* 0 if unspecified or irrelevant */
  2   112       3 default_io_module char (32),			/* I/O module to use if no outer_module specified */
  2   113       3 switch_flags,				/* used to indicate if "switch"-type control args were specified */
  2   114         4 warn_given bit (1) unaligned,
  2   115         4 force_given bit (1) unaligned,
  2   116         4 save_given bit (1) unaligned,
  2   117         4 preempt_given bit (1) unaligned,
  2   118         4 brief_given bit (1) unaligned,
  2   119         4 pad2 bit (31) unaligned,
  2   120       3 switch_values,				/* these are only valid if corresponding bit in switch_flags is on */
  2   121         4 warn bit (1) unaligned,
  2   122         4 force bit (1) unaligned,
  2   123         4 save_on_disconnect bit (1) unaligned,
  2   124         4 preempt bit (1) unaligned,
  2   125         4 brief bit (1) unaligned,			/* "0"b & brief_given => -long */
  2   126         4 pad3 bit (31) unaligned,
  2   127       3 other_flags,
  2   128         4 init_ring_given bit (1) unaligned,		/* "1"b if -ring */
  2   129         4 minimum_ring_given bit (1) unaligned,		/* "1"b if MNA terminal interface ring > 1 */
  2   130         4 immediate bit (1) unaligned,			/* "1"b => -new_proc (or -destroy) -immediate */
  2   131         4 no_start_up bit (1) unaligned,		/* "1"b if -no_start_up */
  2   132         4 pad4 bit (32) unaligned,
  2   133       3 initial_ring fixed bin,			/* valid iff init_ring_given = "1"b */
  2   134       3 minimum_ring fixed bin,			/* ring in which MNA terminal mgr operates */
  2   135       3 home_dir char (168),				/* null if not specified */
  2   136       3 outer_module char (32),			/* likewise */
  2   137       3 process_overseer char (168),			/* likewise */
  2   138       3 subsystem char (168),				/* likewise */
  2   139       3 n_args fixed bin,				/* how many arguments specified after -ag; if 0, ignore the rest of the structure */
  2   140     2 login_arguments,				/* variable part, describes stuff after -ag */
  2   141       3 arg_string_length fixed bin (21),
  2   142       3 args (ls_process_request_n_args refer (login_server_process_request.n_args)),
  2   143         4 start_index fixed bin (21),			/* position in arg_string at which arg (i) starts */
  2   144         4 arg_length fixed bin (21),			/* length of arg (i) */
  2   145       3 arg_string char (ls_process_request_arg_string_length refer (login_server_process_request.arg_string_length));
  2   146 
  2   147 dcl ls_process_request_n_args fixed bin;
  2   148 dcl ls_process_request_arg_string_length fixed bin (21);
  2   149 
  2   150 dcl  LS_PROCESS_REQUEST_VERSION_1 char (8) internal static options (constant) initial ("lspr0001");
  2   151 
  2   152 
  2   153 
  2   154 /* "list" request: list the user's disconnected processes, if any */
  2   155 
  2   156 dcl 1 login_server_list_request aligned based (ls_request_ptr),
  2   157     2 header like ls_request_header,			/* request_type = LS_LIST_REQUEST */
  2   158     2 handle bit (72);
  2   159 
  2   160 dcl  LS_LIST_REQUEST_VERSION_1 char (8) internal static options (constant) initial ("lslr0001");
  2   161 
  2   162 
  2   163 
  2   164 /* "dial" request: find a process to accept a dial */
  2   165 
  2   166 /* Note: because a dial request may or may not have been preceded
  2   167*   by a validate request/response, the initializer_handle may be null.
  2   168**/
  2   169 
  2   170 dcl 1 login_server_dial_request aligned based (ls_request_ptr),
  2   171     2 header like ls_request_header,			/* request_type = LS_DIAL_REQUEST */
  2   172     2 initializer_handle bit (72),			/* as provided in validate_response (if any) */
  2   173     2 terminate_event_channel fixed bin (71),		/* event channel to wake up login server when master process terminates */
  2   174     2 dial_qualifier char (22),
  2   175     2 person_id char (22),				/* null if not specified */
  2   176     2 project_id char (9),				/* likewise */
  2   177     2 user_person_id char (22),			/* if -user was specified, otherwise "" */
  2   178     2 user_project_id char (9);			/* likewise */
  2   179 
  2   180 dcl LS_DIAL_REQUEST_VERSION_1 char (8) internal static options (constant) initial ("lsdr0001");
  2   181 
  2   182 
  2   183 
  2   184 /* "disconnect" request: report that a login channel has disconnected */
  2   185 /* Note: this message is sent if the connection is broken either during the login dialogue
  2   186*   or later on when the process was using it */
  2   187 
  2   188 dcl 1 login_server_disconnect_request aligned based (ls_request_ptr),
  2   189     2 header like ls_request_header,			/* request_type = LS_DISCONNECT_REQUEST */
  2   190     2 handle bit (72),				/* from original validate_response */
  2   191     2 process_id bit (36);				/* ""b if no process established */
  2   192 
  2   193 dcl LS_DISCONNECT_REQUEST_VERSION_1 char (8) internal static options (constant) initial ("lsdc0001");
  2   194 
  2   195 
  2   196 
  2   197 /* "logout" request: indicates that user entered the "logout" request, ending the dialogue; does not require any response */
  2   198 
  2   199 dcl 1 login_server_logout_request aligned based (ls_request_ptr),
  2   200     2 header like ls_request_header,			/* request_type = LS_LOGOUT_REQUEST */
  2   201     2 handle bit (72);
  2   202 
  2   203 dcl LS_LOGOUT_REQUEST_VERSION_1 char (8) internal static options (constant) initial ("lslg0001");
  2   204 
  2   205 
  2   206 
  2   207 /* "operator" request: sign the user on as an operator, the result of either
  2   208*   "login -operator" or "dial system". Note that in the latter case, there may
  2   209*   not have been a validate request (if the -user control argument wasn't specified),
  2   210*    in which case initializer_handle is null, and the person_id and project_id
  2   211*    are blank.
  2   212**/
  2   213 
  2   214 dcl 1 login_server_operator_request aligned based (ls_request_ptr),
  2   215     2 header like ls_request_header,			/* request_type = LS_OPERATOR_REQUEST */
  2   216     2 initializer_handle bit (72) aligned,		/* as provided in validate_response (if any) */
  2   217     2 terminate_event_channel fixed bin (71),		/* event channel for wakeup when connection is dropped */
  2   218     2 person_id char (22),				/* likewise */
  2   219     2 project_id char (9),				/* likewise */
  2   220     2 virtual_channel char (32);			/* if -virtual_channel specified, otherwise "" */
  2   221 
  2   222 dcl  LOGIN_SERVER_OPERATOR_REQUEST_VERSION_1 char (8) internal static options (constant) initial ("lsor0001");
  2   223 
  2   224 
  2   225 
  2   226 /* Response types */
  2   227 
  2   228 dcl (LS_UNKNOWN_RESPONSE initial (100),			/* unknown response type. */
  2   229      LS_VALIDATE_RESPONSE initial (101),		/* response to validation request */
  2   230      LS_PROCESS_RESPONSE initial (102),			/* response to process request */
  2   231      LS_LIST_RESPONSE initial (103),			/* response to list request */
  2   232      LS_DIAL_RESPONSE initial (104),			/* response to dial request */
  2   233      LS_TERMINATION_RESPONSE initial (105),		/* to notify server of a logout */
  2   234      LS_NEW_PROC_RESPONSE initial (106),		/* to notify server of process termination */
  2   235      LS_OPERATOR_RESPONSE initial (107))		/* response to operator request */
  2   236 	fixed bin internal static options (constant);
  2   237 
  2   238 dcl  LS_RESPONSE_TYPES        (100:107) char (10) internal static options (constant) initial
  2   239 		        (
  2   240 		        "UNKNOWN",
  2   241 		        "validate",
  2   242 		        "process",
  2   243 		        "list",
  2   244 		        "dial",
  2   245 		        "terminate",
  2   246 		        "new_proc",
  2   247 		        "operator");
  2   248 
  2   249 /* NOTE: the server_handle is not included in the response structures because 
  2   250*   it is provided in the user_message_ structures */
  2   251 
  2   252 
  2   253 
  2   254 dcl ls_response_ptr pointer;
  2   255 
  2   256 /* common header for all responses */
  2   257 
  2   258 dcl 1 login_server_response_header aligned based (ls_response_ptr),
  2   259     2 message_type fixed bin,
  2   260     2 header_pad bit (36),				/* force doubleword alignment */
  2   261     2 version char (8);
  2   262 
  2   263 
  2   264 
  2   265 /* "validate" response: indicate whether user_id/password is valid */
  2   266 
  2   267 dcl 1 login_server_validate_response aligned based (ls_response_ptr),
  2   268     2 header like login_server_response_header,		/* message_type = LS_VALIDATE_RESPONSE */
  2   269     2 handle bit (72),				/* to be provided by the server in subsequent */
  2   270 						/* messages for the same connection */		
  2   271     2 authorization bit (72),				/* default if none was supplied */
  2   272     2 authorization_range (2) bit (72),			/* authorization range permitted for this user */
  2   273     2 status_code fixed bin (35),			/* 0 iff user is validated */
  2   274     2 person_id char (22),				/* primary name from the PNT */
  2   275     2 project_id char (9),				/* primary name from the PNT or PDT */
  2   276     2 n_disconnected_processes fixed bin,		/* number of disconnected processes for specified user */
  2   277     2 validate_pad fixed bin,
  2   278     2 previous_login_info,				/* for printing login message */
  2   279       3 time fixed bin (71),
  2   280       3 terminal_type char (32),
  2   281       3 terminal_id char (4),
  2   282     2 incorrect_passwords fixed bin,			/* number of times password given incorrectly */
  2   283     2 last_incorrect_password,			/* where it came from */
  2   284       3 time fixed bin (71), 
  2   285       3 terminal_type char (32),
  2   286       3 terminal_id char (4),
  2   287     2 password_interval fixed bin,			/* limit (in days) for password use or change */
  2   288     2 flags,
  2   289       3 disconnect bit (1) unaligned,			/* if "1"b, close the connection immediately */
  2   290       3 password_changed bit (1) unal,			/* "1"b => changed password */
  2   291       3 default_auth_changed bit (1) unal,		/* "1"b => changed default authorization */
  2   292       3 default_proj_changed bit (1) unal,		/* "1"b => changed default project */
  2   293       3 password_expired bit (1) unal,			/* "1"b => password not changed recently enough */
  2   294       3 password_unused_too_long bit (1) unal,		/* "1"b => password hasn't been used recently */
  2   295       3 pad bit (30) unaligned;
  2   296 
  2   297 dcl LS_VALIDATE_RESPONSE_VERSION_1 char (8) internal static options (constant) initial ("lsvs0001");
  2   298 
  2   299 
  2   300 
  2   301 /* "process" response: responds to request to create or connect */
  2   302 
  2   303 dcl 1 login_server_process_response aligned based (ls_response_ptr),
  2   304     2 fixed_part,
  2   305       3 header like login_server_response_header,		/* message_type = LS_PROCESS_RESPONSE */
  2   306       3 status_code fixed bin (35),			/* 0 iff process was created or requested process exists */
  2   307       3 process_id bit (36),
  2   308       3 new_handle bit (72),				/* changed if reconnecting, etc. to preexisting process, all 0 otherwise */
  2   309       3 authorization bit (72),			/* authorization of created or existing process */
  2   310       3 process_group_id char (32),			/* Person.Project.tag */
  2   311       3 process_number fixed bin,			/* as in, "Your disconnected process #2..." */
  2   312       3 n_disconnected_processes fixed bin,		/* valid even if code ^= 0, e.g., if request was ambiguous */
  2   313       3 start_event_channel fixed bin (71),		/* event channel to wake up user process on */
  2   314       3 login_instance fixed bin,			/* "This is your Nth interactive login" */
  2   315       3 accounting_info,				/* for destroyed process, if any */
  2   316         4 cpu_usage fixed bin (71),
  2   317         4 cost float bin,
  2   318       3 flags,					/* except for disconnect and logout, invalid if status_code ^= 0 */
  2   319         4 disconnect bit (1) unaligned,			/* "1"b => break the connection immediately */
  2   320         4 logout bit (1) unaligned,			/* "1"b => restart login sequence */
  2   321         4 created bit (1) unaligned,			/* "1"b => new process created */
  2   322         4 connected bit (1) unaligned,			/* "1"b => connected to old process */
  2   323         4 new_proc bit (1) unaligned,			/* "1"b => connected after new_proc */
  2   324         4 destroyed bit (1) unaligned,			/* "1"b => process destroyed */
  2   325         4 anonymous bit (1) unaligned,			/* "1"b => anonymous user ("enter" or "enterp") */
  2   326         4 already_logged_in bit (1) unaligned,		/* "1"b => user can't log in because he already is */
  2   327         4 message_coordinator bit (1) unaligned,		/* "1"b => this connection is going to be used by the message coordinator */
  2   328         4 brief bit (1) unaligned,			/* "1"b => brief user attribute from PDT */
  2   329         4 pad bit (26) unaligned,
  2   330       3 initial_ring fixed bin,			/* ring in which process was created */
  2   331       3 already_logged_in_info,			/* relevant if already_logged_in flag is "1"b */
  2   332         4 connection_name char (32),
  2   333         4 terminal_type char (32),
  2   334         4 terminal_id char (4),
  2   335     2 accounting_message_struc,			/* character string assembled by initializer giving error or warnings about the user's account */
  2   336       3 accounting_message_length fixed bin,
  2   337       3 accounting_message char (ls_process_response_accounting_message_length refer (login_server_process_response.accounting_message_length));
  2   338 
  2   339 dcl  ls_process_response_accounting_message_length fixed bin;
  2   340 
  2   341 dcl LOGIN_SERVER_PROCESS_RESPONSE_VERSION_1 char (8) internal static options (constant) initial ("lsps0001");
  2   342 
  2   343 
  2   344 
  2   345 /* "list" response: used if create request specified "list" command */
  2   346 
  2   347 dcl 1 login_server_list_response aligned based (ls_response_ptr),
  2   348     2 header like login_server_response_header,		/* message_type = LS_LIST_RESPONSE */
  2   349     2 n_processes fixed bin,				/* number of disconnected processes (might be 0) */
  2   350     2 pad_header fixed bin,
  2   351     2 process_info (login_server_list_response_n_processes refer (login_server_list_response.n_processes)),
  2   352       3 creation_time fixed bin (71),
  2   353       3 authorization bit (72),
  2   354       3 initial_ring fixed bin,
  2   355       3 pad_process_info fixed bin,
  2   356       3 connection_info like user_connection_info;
  2   357 
  2   358 dcl login_server_list_response_n_processes fixed bin;
  2   359 
  2   360 dcl LOGIN_SERVER_LIST_RESPONSE_VERSION_1 char (8) internal static options (constant) initial ("lslr0001");
  2   361 
  2   362 
  2   363 
  2   364 /* "dial" response: response to dial request */
  2   365 
  2   366 dcl 1 login_server_dial_response aligned based (ls_response_ptr),
  2   367     2 header like login_server_response_header,		/* message_type = LS_DIAL_RESPONSE */
  2   368     2 status_code fixed bin (35),			/* 0 iff dial server was found and all is OK */
  2   369     2 process_id bit (36),				/* of dial server */
  2   370     2 process_group_id char (32),			/* likewise */
  2   371     2 authorization bit (72),				/* likewise, to make sure connection is usable */
  2   372     2 start_event_channel fixed bin (71),		/* event channel to wake up user process on */
  2   373     2 process_ring fixed bin,				/* initial ring of dial server */
  2   374     2 flags,
  2   375       3 disconnect bit (1) unaligned,			/* "1"b => break connection immediately */
  2   376       3 pad bit (35) unaligned;
  2   377 
  2   378 dcl LOGIN_SERVER_DIAL_RESPONSE_VERSION_1 char (8) internal static options (constant) initial ("lsds0001");
  2   379 
  2   380 
  2   381 
  2   382 /* "termination" response: (not a response to anything): notify server that a
  2   383*   process terminated other than by logout */
  2   384 
  2   385 dcl 1 login_server_termination_response aligned based (ls_response_ptr),
  2   386     2 header like login_server_response_header,		/* message_type =  LS_TERMINATION_RESPONSE */
  2   387     2 accounting_info,				/* for printing in logout message */
  2   388       3 cpu_usage fixed bin (71),
  2   389       3 cost float bin,
  2   390       3 pad bit (33) unaligned,
  2   391     2 process_id bit (36),				/* of the logged-out process */
  2   392     2 process_group_id char (32),
  2   393     2 status_code fixed bin (35),			/* e.g., to indicate reason for fatal error */ 
  2   394     2 flags,
  2   395       3 logout bit (1) aligned,			/* no new process coming */
  2   396       3 automatic_logout bit (1) unaligned,
  2   397       3 hold bit (1) unaligned,
  2   398       3 brief bit (1) unaligned,
  2   399       3 new_proc bit (1) unaligned,			/* user-requested new process */
  2   400       3 fatal_error bit (1) unaligned,			/* process died unexpectedly */
  2   401       3 fpe_caused_logout bit (1) unaligned,		/* fatal error doesn't generate new process */
  2   402       3 fpe_loop bit (1) unaligned,			/* fatal error loop: too many in too short a time */
  2   403       3 fpe_during_init bit (1) unaligned,		/* fatal error during process initialization */
  2   404       3 offer_help bit (1) unaligned,			/* print a message offering "help" */ 
  2   405       3 pad bit (27) unaligned;
  2   406 
  2   407 dcl LOGIN_SERVER_TERMINATION_RESPONSE_VERSION_1 char (8) internal static options (constant) initial ("lstr0001");
  2   408 
  2   409 
  2   410 
  2   411 /* "new_proc" response: (not actually a response to anything) -- describes a 
  2   412*    new process (after a termination_response) */
  2   413 
  2   414 dcl 1 login_server_new_proc_response aligned based (ls_response_ptr),
  2   415     2 header like login_server_response_header,		/* message_type = LS_NEW_PROC_RESPONSE */
  2   416     2 new_authorization bit (72),			/* in case of new_proc -auth */
  2   417     2 new_start_event_channel fixed bin (71),		/* event channel for starting new process */
  2   418     2 new_process_id bit (36);			/* process_id of newly-created process */
  2   419 
  2   420 dcl  LOGIN_SERVER_NEW_PROC_RESPONSE_VERSION_1 char (8) internal static options (constant) initial ("lsnp0001");
  2   421 
  2   422 
  2   423 
  2   424 /* "operator" response: indicates success or failure of operator request */
  2   425 
  2   426 dcl 1 login_server_operator_response aligned based (ls_response_ptr),
  2   427     2 header like login_server_response_header,		/* message_type = LS_OPERATOR_RESPONSE */
  2   428     2 status_code fixed bin (35),			/* indicates success or failure */
  2   429     2 process_id bit (36),				/* process ID of the message coordinator */
  2   430     2 process_group_id char (32),			/* Person.Project.tag */
  2   431     2 event_channel fixed bin (71),			/* event channel over which to send connect/disconnect wakeups */
  2   432     2 ring fixed bin,				/* ring of message coordinator */
  2   433     2 flags,
  2   434       3 disconnect bit (1) unaligned,			/* "1" => break the connection immediately */
  2   435       3 mbz bit (35) unaligned;
  2   436 
  2   437 
  2   438 dcl  LOGIN_SERVER_OPERATOR_RESPONSE_VERSION_1 char (8) internal static options (constant) initial ("lsos0001");
  2   439 
  2   440 
  2   441 /* format of reply message sent to acknowledge receipt of a request */
  2   442 
  2   443 dcl  ls_reply_message_ptr pointer;
  2   444 
  2   445 dcl 1 ls_reply_message aligned based (ls_reply_message_ptr),
  2   446     2 code fixed bin (35),
  2   447     2 flags,
  2   448       3 request_invalid bit (1) unaligned,		/* "1"b => could not process request */
  2   449       3 response_sent bit (1) unaligned,		/* "1"b => there is a response message */
  2   450       3 as_error_code bit (1) unaligned,		/* "1"b => code is from as_error_table_ */
  2   451       3 do_not_reply bit (1) unaligned, /* "1"b => special flag for AS to prevent any reply from being sent to login server */
  2   452       3 mbz bit (32) unaligned;
  2   453 
  2   454 /* The following are values used to identify the various requests internally; those from CREATE_REQ on 
  2   455*   can appear as "command_type" in ls_process_requests. */
  2   456 
  2   457 dcl (LOGIN_REQ initial (1),
  2   458      ENTER_REQ initial (2),
  2   459      ENTERP_REQ initial (3),
  2   460      CREATE_REQ initial (4),
  2   461      DESTROY_REQ initial (5),
  2   462      CONNECT_REQ initial (6),
  2   463      NEW_PROC_REQ initial (7),
  2   464      LIST_REQ initial (8))
  2   465 	fixed bin internal static options (constant);
  2   466 
  2   467 /* The following are the possible values for login_server_validate_request.network_connection_type.
  2   468*   They are used by the initializer to select a default process overseer and an instance tag.
  2   469**/
  2   470 
  2   471 dcl (NETWORK_CONNECTION_LOGIN initial (1),
  2   472      NETWORK_CONNECTION_DSA_FILE_TRANSFER initial (2))
  2   473 	fixed bin internal static options (constant);
  2   474 
  2   475 /* END INCLUDE FILE ... login_server_messages.incl.pl1 */
      143 
      144  /* BEGIN INCLUDE FILE sys_log_constants.incl.pl1 ... 82-09-24 E. N. Kittlitz */
  3     2 
  3     3 
  3     4 /****^  HISTORY COMMENTS:
  3     5*  1) change(87-04-22,GDixon), approve(87-06-10,MCR7708),
  3     6*     audit(87-06-02,Parisek), install(87-08-04,MR12.1-1056):
  3     7*     Added sl_info structure and associated named constants for use in calling
  3     8*     sys_log_$general.
  3     9*                                                   END HISTORY COMMENTS */
  3    10 
  3    11 
  3    12 /* format: style4 */
  3    13 
  3    14 dcl  (
  3    15      SL_TYPE_CRASH init (-3),				/* type message with banner & kill system */
  3    16      SL_TYPE_BEEP init (-2),				/* type message with banner */
  3    17      SL_TYPE init (-1),				/* type message */
  3    18      SL_LOG_SILENT init (0),				/* log message */
  3    19      SL_LOG init (1),				/* log & type message */
  3    20      SL_LOG_BEEP init (2),				/* log & type message with banner */
  3    21      SL_LOG_CRASH init (3)				/* log & type message with banner & kill system */
  3    22      ) fixed bin internal static options (constant);
  3    23 
  3    24 dcl  1 sl_info aligned automatic,
  3    25        2 version char(8),			/* structure version       */
  3    26        2 arg_list_ptr ptr,			/* arg_list with values    */
  3    27        2 loc,
  3    28          3 (mode, severity, code, caller, data, class, ioa_msg) fixed bin,
  3    29            /* These flags control where the corresponding data item is found.*/
  3    30 	 /*  -1: data appears in the corresponding structure element below */
  3    31 	 /*   0: data is not present anywhere			       */
  3    32 	 /*  +N: data is Nth item in argument list pointed to by 	       */
  3    33 	 /*      sl_info.arg_list_ptr.  Upon return, data copied into      */
  3    34 	 /*      corresponding structure element.		       */
  3    35 	 /*  if data = +N:					       */
  3    36 	 /*      argN is data_ptr, argN+1 is data_len		       */
  3    37 	 /*  if ioa_msg = +N:				       */
  3    38 	 /*      argN+1, ... argLAST are arguments substituted into the    */
  3    39 	 /*      ioa_msg control string.  The formatted msg is returned.   */
  3    40        2 flags,
  3    41          3 ioa_msg_is_error_code bit(1) unal,	/* ioa_ctl is error code.  */
  3    42          3 flags_pad bit(35) unal,
  3    43        2 mode fixed bin,			/* as-mode, command-mode   */
  3    44        2 severity fixed bin,			/* error severity	       */
  3    45        2 code fixed bin(35),			/* error table code        */
  3    46        2 caller char(65) varying,		/* caller refname$entryname*/
  3    47        2 data,				/* binary data ptr/length  */
  3    48          3 data_ptr ptr,
  3    49          3 data_lth fixed bin(21),
  3    50        2 class char(10) varying,		/* binary data class       */
  3    51        2 ioa_msg char(500) varying;		/* formatted message text  */
  3    52 
  3    53 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  3    54 /*							       */
  3    55 /* If data values (eg, sl_info.caller) are passed in the argument list,      */
  3    56 /* their data types should be as shown in the structure above, except that   */
  3    57 /* character strings should be char(*) nonvarying.		       */
  3    58 /*							       */
  3    59 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  3    60 
  3    61 /* value for sl_info.version */
  3    62 dcl  SL_INFO_version_1 char (8) int static options(constant) init("sl_info1");
  3    63 
  3    64 /* values for sl_info.mode */
  3    65 dcl (SL_INFO_as_mode init(1),
  3    66      SL_INFO_command_mode init(2)) fixed bin int static options(constant);
  3    67 
  3    68 /* values for sl_info.loc.(severity code caller data class ioa_ctl arg) */
  3    69 dcl (SL_INFO_arg_given_in_structure init(-1),
  3    70      SL_INFO_arg_not_given init(0)) fixed bin int static options(constant);
  3    71 
  3    72 
  3    73 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  3    74 /*							       */
  3    75 /* The following static structures are commonly used in the Login Server     */
  3    76 /* user control software.					       */
  3    77 /*							       */
  3    78 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  3    79 
  3    80 /* Syntax: call Abort (severity, code, ioa_ctl, args);		       */
  3    81 
  3    82 dcl  1 sl_info_sev_code_msg		aligned int static options(constant),
  3    83        2 version char(8)		init ("sl_info1"),
  3    84        2 arg_list_ptr ptr		init (null),
  3    85        2 loc,
  3    86          3 (mode			init (-1),
  3    87 	  severity  		init ( 1),
  3    88 	  code 			init ( 2),
  3    89 	  caller 			init (-1),
  3    90 	  data 			init ( 0),
  3    91 	  class 			init ( 0),
  3    92 	  ioa_msg			init ( 3)) fixed bin,
  3    93        2 flags,
  3    94          3 ioa_msg_is_error_code bit(1) unal init ("0"b),
  3    95          3 flags_pad bit(35) unal	init ("0"b),
  3    96        2 mode fixed bin		init ( 1),
  3    97        2 severity fixed bin		init ( 0),
  3    98        2 code fixed bin(35)		init ( 0),
  3    99        2 caller char(65) varying	init (""),
  3   100        2 data,
  3   101          3 data_ptr ptr		init (null),
  3   102          3 data_lth fixed bin(21)	init ( 0),
  3   103        2 class char(10) varying	init (""),
  3   104        2 ioa_msg char(500) varying	init ("");
  3   105 
  3   106 /* Syntax: call Abort (severity, ioa_ctl, args);			       */
  3   107 
  3   108 dcl  1 sl_info_sev_msg		aligned int static options(constant),
  3   109        2 version char(8)		init ("sl_info1"),
  3   110        2 arg_list_ptr ptr		init (null),
  3   111        2 loc,
  3   112          3 (mode			init (-1),
  3   113 	  severity  		init ( 1),
  3   114 	  code 			init ( 0),
  3   115 	  caller 			init (-1),
  3   116 	  data 			init ( 0),
  3   117 	  class 			init ( 0),
  3   118 	  ioa_msg			init ( 2)) fixed bin,
  3   119        2 flags,
  3   120          3 ioa_msg_is_error_code bit(1) unal init ("0"b),
  3   121          3 flags_pad bit(35) unal	init ("0"b),
  3   122        2 mode fixed bin		init ( 1),
  3   123        2 severity fixed bin		init ( 0),
  3   124        2 code fixed bin(35)		init ( 0),
  3   125        2 caller char(65) varying	init (""),
  3   126        2 data,
  3   127          3 data_ptr ptr		init (null),
  3   128          3 data_lth fixed bin(21)	init ( 0),
  3   129        2 class char(10) varying	init (""),
  3   130        2 ioa_msg char(500) varying	init ("");
  3   131 
  3   132 /* Syntax: call Abort (severity, ioa_ctl_as_error_code, args);	       */
  3   133 
  3   134 dcl  1 sl_info_sev_coded_msg		aligned int static options(constant),
  3   135        2 version char(8)		init ("sl_info1"),
  3   136        2 arg_list_ptr ptr		init (null),
  3   137        2 loc,
  3   138          3 (mode			init (-1),
  3   139 	  severity  		init ( 1),
  3   140 	  code 			init ( 0),
  3   141 	  caller 			init (-1),
  3   142 	  data 			init ( 0),
  3   143 	  class 			init ( 0),
  3   144 	  ioa_msg			init ( 2)) fixed bin,
  3   145        2 flags,
  3   146          3 ioa_msg_is_error_code bit(1) unal init ("1"b),
  3   147          3 flags_pad bit(35) unal	init ("0"b),
  3   148        2 mode fixed bin		init ( 1),
  3   149        2 severity fixed bin		init ( 0),
  3   150        2 code fixed bin(35)		init ( 0),
  3   151        2 caller char(65) varying	init (""),
  3   152        2 data,
  3   153          3 data_ptr ptr		init (null),
  3   154          3 data_lth fixed bin(21)	init ( 0),
  3   155        2 class char(10) varying	init (""),
  3   156        2 ioa_msg char(500) varying	init ("");
  3   157 
  3   158 
  3   159 /* Syntax: call Abort (severity, code, error_return_label, ioa_ctl, args);   */
  3   160 
  3   161 dcl  1 sl_info_sev_code_label_msg	aligned int static options(constant),
  3   162        2 version char(8)		init ("sl_info1"),
  3   163        2 arg_list_ptr ptr		init (null),
  3   164        2 loc,
  3   165          3 (mode			init (-1),
  3   166 	  severity  		init ( 1),
  3   167 	  code 			init ( 2),
  3   168 	  caller 			init (-1),
  3   169 	  data 			init ( 0),
  3   170 	  class 			init ( 0),
  3   171 	  ioa_msg			init ( 4)) fixed bin,
  3   172        2 flags,
  3   173          3 ioa_msg_is_error_code bit(1) unal init ("0"b),
  3   174          3 flags_pad bit(35) unal	init ("0"b),
  3   175        2 mode fixed bin		init ( 1),
  3   176        2 severity fixed bin		init ( 0),
  3   177        2 code fixed bin(35)		init ( 0),
  3   178        2 caller char(65) varying	init (""),
  3   179        2 data,
  3   180          3 data_ptr ptr		init (null),
  3   181          3 data_lth fixed bin(21)	init ( 0),
  3   182        2 class char(10) varying	init (""),
  3   183        2 ioa_msg char(500) varying	init ("");
  3   184 
  3   185 /* Syntax:  call Log_error (code, ioa_ctl, args);			       */
  3   186 
  3   187 dcl  1 sl_info_code_msg		aligned int static options(constant),
  3   188        2 version char(8)		init ("sl_info1"),
  3   189        2 arg_list_ptr ptr		init (null),
  3   190        2 loc,
  3   191          3 (mode			init (-1),
  3   192 	  severity  		init (-1),
  3   193 	  code 			init ( 1),
  3   194 	  caller 			init (-1),
  3   195 	  data 			init ( 0),
  3   196 	  class 			init ( 0),
  3   197 	  ioa_msg			init ( 2)) fixed bin,
  3   198        2 flags,
  3   199          3 ioa_msg_is_error_code bit(1) unal init ("0"b),
  3   200          3 flags_pad bit(35) unal	init ("0"b),
  3   201        2 mode fixed bin		init ( 1),
  3   202        2 severity fixed bin		init ( 0),
  3   203        2 code fixed bin(35)		init ( 0),
  3   204        2 caller char(65) varying	init (""),
  3   205        2 data,
  3   206          3 data_ptr ptr		init (null),
  3   207          3 data_lth fixed bin(21)	init ( 0),
  3   208        2 class char(10) varying	init (""),
  3   209        2 ioa_msg char(500) varying	init ("");
  3   210 
  3   211 
  3   212 /* Syntax:  call Trace (ioa_ctl, args);				       */
  3   213 
  3   214 dcl  1 sl_info_msg			aligned int static options(constant),
  3   215        2 version char(8)		init ("sl_info1"),
  3   216        2 arg_list_ptr ptr		init (null),
  3   217        2 loc,
  3   218          3 (mode			init (-1),
  3   219 	  severity  		init (-1),
  3   220 	  code 			init ( 0),
  3   221 	  caller 			init (-1),
  3   222 	  data 			init ( 0),
  3   223 	  class 			init ( 0),
  3   224 	  ioa_msg			init ( 1)) fixed bin,
  3   225        2 flags,
  3   226          3 ioa_msg_is_error_code bit(1) unal init ("0"b),
  3   227          3 flags_pad bit(35) unal	init ("0"b),
  3   228        2 mode fixed bin		init ( 1),
  3   229        2 severity fixed bin		init ( 0),
  3   230        2 code fixed bin(35)		init ( 0),
  3   231        2 caller char(65) varying	init (""),
  3   232        2 data,
  3   233          3 data_ptr ptr		init (null),
  3   234          3 data_lth fixed bin(21)	init ( 0),
  3   235        2 class char(10) varying	init (""),
  3   236        2 ioa_msg char(500) varying	init ("");
  3   237 
  3   238 /* END INCLUDE FILE sys_log_constants.incl.pl1 */
      144 
      145 
      146 end uc_ls_logout_request_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    08/04/87  1221.9  uc_ls_logout_request_.pl1         >special_ldd>install>MR12.1-1054>uc_ls_logout_request_.pl1
142          1    08/04/87  1139.8  ls_request_server_info.incl.pl1   >spec>install>1056>ls_request_server_info.incl.pl1
143          2    08/04/87  1139.9  login_server_messages.incl.pl1    >spec>install>1056>login_server_messages.incl.pl1
144          3    08/04/87  1139.0  sys_log_constants.incl.pl1        >spec>install>1056>sys_log_constants.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
ME                              000247 constant        char(21)                 initial unaligned dcl 83 ref 134
P_code                                 parameter       fixed bin(35,0)          dcl 63 set ref 45 113*
P_ls_ipc_reply_ptr                     parameter       pointer                  dcl 62 ref 45
P_ls_request_lth                       parameter       fixed bin(18,0)          dcl 59 ref 45
P_ls_request_ptr                       parameter       pointer                  dcl 58 ref 45 91
P_ls_request_server_info_ptr           parameter       pointer                  dcl 57 ref 45
P_ls_response_lth                      parameter       fixed bin(18,0)          dcl 61 set ref 45 112*
P_ls_response_ptr                      parameter       pointer                  dcl 60 ref 45
SL_LOG_SILENT                          constant        fixed bin(17,0)          initial dcl 3-14 ref 133
addr                                                   builtin function         dcl 87 ref 135 135
arg_list_ptr              2     000106 automatic       pointer                  level 2 dcl 3-24 set ref 132*
caller                   17     000106 automatic       varying char(65)         level 2 dcl 3-24 set ref 134*
code                     16     000106 automatic       fixed bin(35,0)          level 2 in structure "sl_info" dcl 3-24 in procedure
                                                                                  "uc_ls_logout_request_" set ref 136
code                            000100 automatic       fixed bin(35,0)          dcl 67 in procedure "uc_ls_logout_request_" set ref
                                                                                  93* 113 136* 137
cu_$arg_list_ptr                000020 constant        entry                    external dcl 128 ref 132
error_table_$id_not_found       000016 external static fixed bin(35,0)          dcl 79 set ref 97*
handle                   40            based           bit(72)                  level 2 dcl 2-199 set ref 95* 97*
login_server_logout_request            based           structure                level 1 dcl 2-199
login_server_response_header           based           structure                level 1 dcl 2-258
ls_request_header                      based           structure                level 1 dcl 2-54
ls_request_ptr                  000104 automatic       pointer                  dcl 2-50 set ref 91* 95 97
null                                                   builtin function         dcl 87 ref 97
severity                 15     000106 automatic       fixed bin(17,0)          level 2 dcl 3-24 set ref 133*
sl_info                         000106 automatic       structure                level 1 dcl 3-24 set ref 131* 135 135
sl_info_code_msg                000000 constant        structure                level 1 dcl 3-187 ref 131
sys_log_$general                000022 constant        entry                    external dcl 129 ref 135
uc_logout_                      000014 constant        entry                    external dcl 75 ref 104
user_connection_info                   based           structure                level 1 dcl 2-65
user_table_mgr_$free            000010 constant        entry                    external dcl 72 ref 108
user_table_mgr_$utep_from_handle
                                000012 constant        entry                    external dcl 73 ref 95
utep                            000102 automatic       pointer                  dcl 68 set ref 95* 97 104* 108*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
CONNECT_REQ                            internal static fixed bin(17,0)          initial dcl 2-457
CREATE_REQ                             internal static fixed bin(17,0)          initial dcl 2-457
DESTROY_REQ                            internal static fixed bin(17,0)          initial dcl 2-457
ENTERP_REQ                             internal static fixed bin(17,0)          initial dcl 2-457
ENTER_REQ                              internal static fixed bin(17,0)          initial dcl 2-457
LIST_REQ                               internal static fixed bin(17,0)          initial dcl 2-457
LOGIN_REQ                              internal static fixed bin(17,0)          initial dcl 2-457
LOGIN_SERVER_DIAL_RESPONSE_VERSION_1   internal static char(8)                  initial unaligned dcl 2-378
LOGIN_SERVER_LIST_RESPONSE_VERSION_1   internal static char(8)                  initial unaligned dcl 2-360
LOGIN_SERVER_NEW_PROC_RESPONSE_VERSION_1
                                       internal static char(8)                  initial unaligned dcl 2-420
LOGIN_SERVER_OPERATOR_REQUEST_VERSION_1
                                       internal static char(8)                  initial unaligned dcl 2-222
LOGIN_SERVER_OPERATOR_RESPONSE_VERSION_1
                                       internal static char(8)                  initial unaligned dcl 2-438
LOGIN_SERVER_PROCESS_RESPONSE_VERSION_1
                                       internal static char(8)                  initial unaligned dcl 2-341
LOGIN_SERVER_TERMINATION_RESPONSE_VERSION_1
                                       internal static char(8)                  initial unaligned dcl 2-407
LS_DIAL_REQUEST                        internal static fixed bin(17,0)          initial dcl 2-31
LS_DIAL_REQUEST_VERSION_1              internal static char(8)                  initial unaligned dcl 2-180
LS_DIAL_RESPONSE                       internal static fixed bin(17,0)          initial dcl 2-228
LS_DISCONNECT_REQUEST                  internal static fixed bin(17,0)          initial dcl 2-31
LS_DISCONNECT_REQUEST_VERSION_1        internal static char(8)                  initial unaligned dcl 2-193
LS_LIST_REQUEST                        internal static fixed bin(17,0)          initial dcl 2-31
LS_LIST_REQUEST_VERSION_1              internal static char(8)                  initial unaligned dcl 2-160
LS_LIST_RESPONSE                       internal static fixed bin(17,0)          initial dcl 2-228
LS_LOGOUT_REQUEST                      internal static fixed bin(17,0)          initial dcl 2-31
LS_LOGOUT_REQUEST_VERSION_1            internal static char(8)                  initial unaligned dcl 2-203
LS_NEW_PROC_RESPONSE                   internal static fixed bin(17,0)          initial dcl 2-228
LS_OPERATOR_REQUEST                    internal static fixed bin(17,0)          initial dcl 2-31
LS_OPERATOR_RESPONSE                   internal static fixed bin(17,0)          initial dcl 2-228
LS_PROCESS_REQUEST                     internal static fixed bin(17,0)          initial dcl 2-31
LS_PROCESS_REQUEST_VERSION_1           internal static char(8)                  initial unaligned dcl 2-150
LS_PROCESS_RESPONSE                    internal static fixed bin(17,0)          initial dcl 2-228
LS_REQUEST_HEADER_VERSION_1            internal static char(8)                  initial unaligned dcl 2-63
LS_REQUEST_SERVER_INFO_VERSION_1       internal static char(8)                  initial unaligned dcl 1-26
LS_REQUEST_TYPES                       internal static char(10)                 initial array unaligned dcl 2-40
LS_RESPONSE_TYPES                      internal static char(10)                 initial array unaligned dcl 2-238
LS_TERMINATION_RESPONSE                internal static fixed bin(17,0)          initial dcl 2-228
LS_UNKNOWN_RESPONSE                    internal static fixed bin(17,0)          initial dcl 2-228
LS_VALIDATE_REQUEST                    internal static fixed bin(17,0)          initial dcl 2-31
LS_VALIDATE_REQUEST_VERSION_1          internal static char(8)                  initial unaligned dcl 2-97
LS_VALIDATE_RESPONSE                   internal static fixed bin(17,0)          initial dcl 2-228
LS_VALIDATE_RESPONSE_VERSION_1         internal static char(8)                  initial unaligned dcl 2-297
NETWORK_CONNECTION_DSA_FILE_TRANSFER   internal static fixed bin(17,0)          initial dcl 2-471
NETWORK_CONNECTION_LOGIN               internal static fixed bin(17,0)          initial dcl 2-471
NEW_PROC_REQ                           internal static fixed bin(17,0)          initial dcl 2-457
SL_INFO_arg_given_in_structure         internal static fixed bin(17,0)          initial dcl 3-69
SL_INFO_arg_not_given                  internal static fixed bin(17,0)          initial dcl 3-69
SL_INFO_as_mode                        internal static fixed bin(17,0)          initial dcl 3-65
SL_INFO_command_mode                   internal static fixed bin(17,0)          initial dcl 3-65
SL_INFO_version_1                      internal static char(8)                  initial unaligned dcl 3-62
SL_LOG                                 internal static fixed bin(17,0)          initial dcl 3-14
SL_LOG_BEEP                            internal static fixed bin(17,0)          initial dcl 3-14
SL_LOG_CRASH                           internal static fixed bin(17,0)          initial dcl 3-14
SL_TYPE                                internal static fixed bin(17,0)          initial dcl 3-14
SL_TYPE_BEEP                           internal static fixed bin(17,0)          initial dcl 3-14
SL_TYPE_CRASH                          internal static fixed bin(17,0)          initial dcl 3-14
login_server_dial_request              based           structure                level 1 dcl 2-170
login_server_dial_response             based           structure                level 1 dcl 2-366
login_server_disconnect_request        based           structure                level 1 dcl 2-188
login_server_list_request              based           structure                level 1 dcl 2-156
login_server_list_response             based           structure                level 1 dcl 2-347
login_server_list_response_n_processes automatic       fixed bin(17,0)          dcl 2-358
login_server_new_proc_response         based           structure                level 1 dcl 2-414
login_server_operator_request          based           structure                level 1 dcl 2-214
login_server_operator_response         based           structure                level 1 dcl 2-426
login_server_process_request           based           structure                level 1 dcl 2-103
login_server_process_response          based           structure                level 1 dcl 2-303
login_server_termination_response      based           structure                level 1 dcl 2-385
login_server_validate_request          based           structure                level 1 dcl 2-76
login_server_validate_response         based           structure                level 1 dcl 2-267
ls_process_request_arg_string_length   automatic       fixed bin(21,0)          dcl 2-148
ls_process_request_n_args              automatic       fixed bin(17,0)          dcl 2-147
ls_process_response_accounting_message_length
                                       automatic       fixed bin(17,0)          dcl 2-339
ls_reply_message                       based           structure                level 1 dcl 2-445
ls_reply_message_ptr                   automatic       pointer                  dcl 2-443
ls_request_server_info                 based           structure                level 1 dcl 1-12
ls_request_server_info_ptr             automatic       pointer                  dcl 1-11
ls_response_ptr                        automatic       pointer                  dcl 2-254
sl_info_msg                            internal static structure                level 1 dcl 3-214
sl_info_sev_code_label_msg             internal static structure                level 1 dcl 3-161
sl_info_sev_code_msg                   internal static structure                level 1 dcl 3-82
sl_info_sev_coded_msg                  internal static structure                level 1 dcl 3-134
sl_info_sev_msg                        internal static structure                level 1 dcl 3-108

NAMES DECLARED BY EXPLICIT CONTEXT.
Abort                           000432 constant        entry                    internal dcl 125 ref 97
RETURN                          000425 constant        label                    dcl 113 ref 137
uc_ls_logout_request_           000316 constant        entry                    external dcl 45

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       620         644     502         630
Length      1112     502        24         232     116           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
uc_ls_logout_request_               274 external procedure  is an external procedure.  
Abort                                70 internal procedure  is declared options(variable).  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
uc_ls_logout_request_    000100 code                        uc_ls_logout_request_
                         000102 utep                        uc_ls_logout_request_
                         000104 ls_request_ptr              uc_ls_logout_request_
                         000106 sl_info                     uc_ls_logout_request_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        call_int_this_desc  return_mac          tra_ext_1           ext_entry
int_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
cu_$arg_list_ptr              sys_log_$general              uc_logout_                    user_table_mgr_$free
user_table_mgr_$utep_from_handle

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$id_not_found




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     45 000310        91 000323        93 000327        95 000330        97 000340       104 000371       108 000414
    112 000423       113 000425       115 000430       125 000431       131 000437       132 000443       133 000451
    134 000454       135 000461       136 000472       137 000475       139 000501


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
