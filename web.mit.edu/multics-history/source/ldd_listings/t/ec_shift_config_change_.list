	COMPILATION LISTING OF SEGMENT ec_shift_config_change_
	Compiled by: Multics PL/I Compiler, Release 29, of July 28, 1986
	Compiled at: Honeywell Bull, Phx, AZ, Sys-M  
	Compiled on: 09/21/87  1208.0 mst Mon
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Bull Inc., 1987                *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        6*        *                                                         *
        7*        * Copyright (c) 1972 by Massachusetts Institute of        *
        8*        * Technology and Honeywell Information Systems, Inc.      *
        9*        *                                                         *
       10*        *********************************************************** */
       11 
       12 
       13 
       14 
       15 /****^  HISTORY COMMENTS:
       16*  1) change(87-06-02,Parisek), approve(86-04-17,MCR7715),
       17*     audit(87-08-06,Fawcett), install(87-08-11,MR12.1-1080):
       18*     Establish the system_control ssu_subsystem_info_ptr so this
       19*     procedure will properly work in the system control environment.
       20*  2) change(87-08-18,Parisek), approve(87-08-18,PBF7715),
       21*     audit(87-09-03,Farley), install(87-09-10,MR12.1-1104):
       22*     Remove unnecessary sc_subsystem_info_ references.
       23*  3) change(87-09-17,Parisek), approve(87-09-18,PBF7715),
       24*     audit(87-09-18,Farley), install(87-09-21,MR12.1-1111):
       25*      a. Remove reference to sc_stat_$master_sci_ptr.
       26*      b. Create our own sci ptr and set sc_stat_$admin_sci_ptr equal to our
       27*         sci_ptr.
       28*      c. Get sc_subsystem_info_ptr based on our new sc_stat_$admin_sci_ptr
       29*         value.
       30*      d. Set sc_subsystem_info.real_iocb to sc_stat_$master_iocb for
       31*         signal_io_.
       32*                                                   END HISTORY COMMENTS */
       33 
       34 
       35 /* format: style4 */
       36 ec_shift_config_change_: proc (sysdir, old, new, auto_maxu, ncpu, nkmem, nbulk);
       37 
       38 /* Procedure to execute shift_config_change.ec, passing the old and new shift,
       39*   the auto_maxu switch, and the configuration parameters: cpu, mem, and bulk,
       40*   with an any_other handler set up to catch any errors in the exec_com and not
       41*   let them abort whatever the caller might be doing (e.g., an accounting update).
       42*
       43*   Written by T. Casey, May 1978
       44*   Modified by E. N. Kittlitz, November 1982, first shot at as_check_condition_.
       45*
       46**/
       47 
       48 dcl  sysdir char (*);				/* dir where shift_config_change.ec should be */
       49 dcl  (old, new, auto_maxu, ncpu, nkmem, nbulk) fixed bin;	/* old and new shift, and load control parameters */
       50 
       51 dcl  as_dump_ entry (char (*));
       52 dcl  condition_ entry (char (*), entry);
       53 dcl  cleanup condition;
       54 dcl  call_ec_ entry options (variable);
       55 dcl  hcs_$status_minf entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24), fixed bin (35));
       56 dcl  ioa_$rsnnl entry options (variable);
       57 dcl  sc_create_sci_ entry (ptr, fixed bin (35));
       58 dcl  sc_create_sci_$destroy entry (ptr);
       59 dcl  ssu_$get_info_ptr entry (ptr) returns (ptr);
       60 dcl  sys_log_ entry options (variable);
       61 dcl  sys_log_$error_log entry options (variable);
       62 
       63 dcl  code fixed bin (35);
       64 dcl  bc fixed bin (24);
       65 dcl  entry_type fixed bin (2);
       66 dcl  saved_admin_sci_ptr ptr;
       67 dcl  sci_ptr ptr;
       68 		     
       69 dcl  seg_type fixed bin int static options (constant) init (1);
       70 
       71 dcl  (char, ltrim, rtrim, null) builtin;
       72 
       73 
       74 /* See if there is a shift_config_change.ec (there doesn't have to be) */
       75 
       76 	call hcs_$status_minf (sysdir, "shift_config_change.ec", (1), entry_type, bc, code);
       77 
       78 /* If there is, execute it after setting up an any_other handler */
       79 
       80 	sci_ptr = null;
       81 	saved_admin_sci_ptr = sc_stat_$admin_sci_ptr;
       82 	if code = 0 & entry_type = seg_type then do;
       83 	     call sc_create_sci_ (sci_ptr, code);
       84 	     if code ^= 0 then do;
       85 		call sys_log_$error_log (SL_LOG_SILENT, code, "ec_shift_config_change_",
       86 
       87 		     "Failed to establish an SCI environment.");
       88 		goto return_to_caller;
       89 	     end;
       90 
       91 	     on cleanup begin;
       92 		sc_stat_$admin_sci_ptr = saved_admin_sci_ptr;
       93 		call sc_create_sci_$destroy (sci_ptr);
       94 	     end;
       95 
       96 	     sc_stat_$admin_sci_ptr = sci_ptr;		/* sc_command requires sc_stat_$admin_sci_ptr to be valid */
       97 
       98 	     sc_subsystem_info_ptr = ssu_$get_info_ptr (sci_ptr);
       99 	     sc_subsystem_info.real_iocb = sc_stat_$master_iocb;
      100 
      101 	     call condition_ ("any_other", ucs);
      102 	     call call_ec_ (rtrim (sysdir) || ">shift_config_change",
      103 		ltrim (char (old)), ltrim (char (new)), ltrim (char (auto_maxu)),
      104 		ltrim (char (ncpu)), ltrim (char (nkmem)), ltrim (char (nbulk)));
      105 	end;
      106 
      107 return_to_caller:
      108 	if sci_ptr ^= null then do;
      109 	     sc_stat_$admin_sci_ptr = saved_admin_sci_ptr;
      110 	     call sc_create_sci_$destroy (sci_ptr);
      111 	end;
      112 	return;
      113 
      114 ucs: proc (mcptr, condname, coptr, infoptr, continue);
      115 
      116 dcl  (mcptr, coptr, infoptr) ptr;
      117 dcl  condname char (*);
      118 dcl  continue bit (1);
      119 dcl  msg char (120);
      120 dcl  i fixed bin;
      121 dcl  non_local bit (1) unaligned;
      122 dcl  as_check_condition_ entry (char (*), bit (1), bit (1));
      123 
      124 	call as_check_condition_ (condname, continue, non_local);
      125 	if continue |				/* if not for us */
      126 	     non_local then return;			/* cleanup, but nothing to clean up. */
      127 	call ioa_$rsnnl ("ec_shift_config_change_: Error ^a while executing shift_config_change.ec",
      128 	     msg, i, condname);
      129 	call sys_log_ (SL_LOG_BEEP, "^a", msg);
      130 	call as_dump_ (rtrim (msg));
      131 	goto return_to_caller;
      132 
      133      end ucs;
      134 
  1     1 /* BEGIN INCLUDE FILE sys_log_constants.incl.pl1 ... 82-09-24 E. N. Kittlitz */
  1     2 
  1     3 
  1     4 /****^  HISTORY COMMENTS:
  1     5*  1) change(87-04-22,GDixon), approve(87-06-10,MCR7708),
  1     6*     audit(87-06-02,Parisek), install(87-08-04,MR12.1-1056):
  1     7*     Added sl_info structure and associated named constants for use in calling
  1     8*     sys_log_$general.
  1     9*                                                   END HISTORY COMMENTS */
  1    10 
  1    11 
  1    12 /* format: style4 */
  1    13 
  1    14 dcl  (
  1    15      SL_TYPE_CRASH init (-3),				/* type message with banner & kill system */
  1    16      SL_TYPE_BEEP init (-2),				/* type message with banner */
  1    17      SL_TYPE init (-1),				/* type message */
  1    18      SL_LOG_SILENT init (0),				/* log message */
  1    19      SL_LOG init (1),				/* log & type message */
  1    20      SL_LOG_BEEP init (2),				/* log & type message with banner */
  1    21      SL_LOG_CRASH init (3)				/* log & type message with banner & kill system */
  1    22      ) fixed bin internal static options (constant);
  1    23 
  1    24 dcl  1 sl_info aligned automatic,
  1    25        2 version char(8),			/* structure version       */
  1    26        2 arg_list_ptr ptr,			/* arg_list with values    */
  1    27        2 loc,
  1    28          3 (mode, severity, code, caller, data, class, ioa_msg) fixed bin,
  1    29            /* These flags control where the corresponding data item is found.*/
  1    30 	 /*  -1: data appears in the corresponding structure element below */
  1    31 	 /*   0: data is not present anywhere			       */
  1    32 	 /*  +N: data is Nth item in argument list pointed to by 	       */
  1    33 	 /*      sl_info.arg_list_ptr.  Upon return, data copied into      */
  1    34 	 /*      corresponding structure element.		       */
  1    35 	 /*  if data = +N:					       */
  1    36 	 /*      argN is data_ptr, argN+1 is data_len		       */
  1    37 	 /*  if ioa_msg = +N:				       */
  1    38 	 /*      argN+1, ... argLAST are arguments substituted into the    */
  1    39 	 /*      ioa_msg control string.  The formatted msg is returned.   */
  1    40        2 flags,
  1    41          3 ioa_msg_is_error_code bit(1) unal,	/* ioa_ctl is error code.  */
  1    42          3 flags_pad bit(35) unal,
  1    43        2 mode fixed bin,			/* as-mode, command-mode   */
  1    44        2 severity fixed bin,			/* error severity	       */
  1    45        2 code fixed bin(35),			/* error table code        */
  1    46        2 caller char(65) varying,		/* caller refname$entryname*/
  1    47        2 data,				/* binary data ptr/length  */
  1    48          3 data_ptr ptr,
  1    49          3 data_lth fixed bin(21),
  1    50        2 class char(10) varying,		/* binary data class       */
  1    51        2 ioa_msg char(500) varying;		/* formatted message text  */
  1    52 
  1    53 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  1    54 /*							       */
  1    55 /* If data values (eg, sl_info.caller) are passed in the argument list,      */
  1    56 /* their data types should be as shown in the structure above, except that   */
  1    57 /* character strings should be char(*) nonvarying.		       */
  1    58 /*							       */
  1    59 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  1    60 
  1    61 /* value for sl_info.version */
  1    62 dcl  SL_INFO_version_1 char (8) int static options(constant) init("sl_info1");
  1    63 
  1    64 /* values for sl_info.mode */
  1    65 dcl (SL_INFO_as_mode init(1),
  1    66      SL_INFO_command_mode init(2)) fixed bin int static options(constant);
  1    67 
  1    68 /* values for sl_info.loc.(severity code caller data class ioa_ctl arg) */
  1    69 dcl (SL_INFO_arg_given_in_structure init(-1),
  1    70      SL_INFO_arg_not_given init(0)) fixed bin int static options(constant);
  1    71 
  1    72 
  1    73 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  1    74 /*							       */
  1    75 /* The following static structures are commonly used in the Login Server     */
  1    76 /* user control software.					       */
  1    77 /*							       */
  1    78 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  1    79 
  1    80 /* Syntax: call Abort (severity, code, ioa_ctl, args);		       */
  1    81 
  1    82 dcl  1 sl_info_sev_code_msg		aligned int static options(constant),
  1    83        2 version char(8)		init ("sl_info1"),
  1    84        2 arg_list_ptr ptr		init (null),
  1    85        2 loc,
  1    86          3 (mode			init (-1),
  1    87 	  severity  		init ( 1),
  1    88 	  code 			init ( 2),
  1    89 	  caller 			init (-1),
  1    90 	  data 			init ( 0),
  1    91 	  class 			init ( 0),
  1    92 	  ioa_msg			init ( 3)) fixed bin,
  1    93        2 flags,
  1    94          3 ioa_msg_is_error_code bit(1) unal init ("0"b),
  1    95          3 flags_pad bit(35) unal	init ("0"b),
  1    96        2 mode fixed bin		init ( 1),
  1    97        2 severity fixed bin		init ( 0),
  1    98        2 code fixed bin(35)		init ( 0),
  1    99        2 caller char(65) varying	init (""),
  1   100        2 data,
  1   101          3 data_ptr ptr		init (null),
  1   102          3 data_lth fixed bin(21)	init ( 0),
  1   103        2 class char(10) varying	init (""),
  1   104        2 ioa_msg char(500) varying	init ("");
  1   105 
  1   106 /* Syntax: call Abort (severity, ioa_ctl, args);			       */
  1   107 
  1   108 dcl  1 sl_info_sev_msg		aligned int static options(constant),
  1   109        2 version char(8)		init ("sl_info1"),
  1   110        2 arg_list_ptr ptr		init (null),
  1   111        2 loc,
  1   112          3 (mode			init (-1),
  1   113 	  severity  		init ( 1),
  1   114 	  code 			init ( 0),
  1   115 	  caller 			init (-1),
  1   116 	  data 			init ( 0),
  1   117 	  class 			init ( 0),
  1   118 	  ioa_msg			init ( 2)) fixed bin,
  1   119        2 flags,
  1   120          3 ioa_msg_is_error_code bit(1) unal init ("0"b),
  1   121          3 flags_pad bit(35) unal	init ("0"b),
  1   122        2 mode fixed bin		init ( 1),
  1   123        2 severity fixed bin		init ( 0),
  1   124        2 code fixed bin(35)		init ( 0),
  1   125        2 caller char(65) varying	init (""),
  1   126        2 data,
  1   127          3 data_ptr ptr		init (null),
  1   128          3 data_lth fixed bin(21)	init ( 0),
  1   129        2 class char(10) varying	init (""),
  1   130        2 ioa_msg char(500) varying	init ("");
  1   131 
  1   132 /* Syntax: call Abort (severity, ioa_ctl_as_error_code, args);	       */
  1   133 
  1   134 dcl  1 sl_info_sev_coded_msg		aligned int static options(constant),
  1   135        2 version char(8)		init ("sl_info1"),
  1   136        2 arg_list_ptr ptr		init (null),
  1   137        2 loc,
  1   138          3 (mode			init (-1),
  1   139 	  severity  		init ( 1),
  1   140 	  code 			init ( 0),
  1   141 	  caller 			init (-1),
  1   142 	  data 			init ( 0),
  1   143 	  class 			init ( 0),
  1   144 	  ioa_msg			init ( 2)) fixed bin,
  1   145        2 flags,
  1   146          3 ioa_msg_is_error_code bit(1) unal init ("1"b),
  1   147          3 flags_pad bit(35) unal	init ("0"b),
  1   148        2 mode fixed bin		init ( 1),
  1   149        2 severity fixed bin		init ( 0),
  1   150        2 code fixed bin(35)		init ( 0),
  1   151        2 caller char(65) varying	init (""),
  1   152        2 data,
  1   153          3 data_ptr ptr		init (null),
  1   154          3 data_lth fixed bin(21)	init ( 0),
  1   155        2 class char(10) varying	init (""),
  1   156        2 ioa_msg char(500) varying	init ("");
  1   157 
  1   158 
  1   159 /* Syntax: call Abort (severity, code, error_return_label, ioa_ctl, args);   */
  1   160 
  1   161 dcl  1 sl_info_sev_code_label_msg	aligned int static options(constant),
  1   162        2 version char(8)		init ("sl_info1"),
  1   163        2 arg_list_ptr ptr		init (null),
  1   164        2 loc,
  1   165          3 (mode			init (-1),
  1   166 	  severity  		init ( 1),
  1   167 	  code 			init ( 2),
  1   168 	  caller 			init (-1),
  1   169 	  data 			init ( 0),
  1   170 	  class 			init ( 0),
  1   171 	  ioa_msg			init ( 4)) fixed bin,
  1   172        2 flags,
  1   173          3 ioa_msg_is_error_code bit(1) unal init ("0"b),
  1   174          3 flags_pad bit(35) unal	init ("0"b),
  1   175        2 mode fixed bin		init ( 1),
  1   176        2 severity fixed bin		init ( 0),
  1   177        2 code fixed bin(35)		init ( 0),
  1   178        2 caller char(65) varying	init (""),
  1   179        2 data,
  1   180          3 data_ptr ptr		init (null),
  1   181          3 data_lth fixed bin(21)	init ( 0),
  1   182        2 class char(10) varying	init (""),
  1   183        2 ioa_msg char(500) varying	init ("");
  1   184 
  1   185 /* Syntax:  call Log_error (code, ioa_ctl, args);			       */
  1   186 
  1   187 dcl  1 sl_info_code_msg		aligned int static options(constant),
  1   188        2 version char(8)		init ("sl_info1"),
  1   189        2 arg_list_ptr ptr		init (null),
  1   190        2 loc,
  1   191          3 (mode			init (-1),
  1   192 	  severity  		init (-1),
  1   193 	  code 			init ( 1),
  1   194 	  caller 			init (-1),
  1   195 	  data 			init ( 0),
  1   196 	  class 			init ( 0),
  1   197 	  ioa_msg			init ( 2)) fixed bin,
  1   198        2 flags,
  1   199          3 ioa_msg_is_error_code bit(1) unal init ("0"b),
  1   200          3 flags_pad bit(35) unal	init ("0"b),
  1   201        2 mode fixed bin		init ( 1),
  1   202        2 severity fixed bin		init ( 0),
  1   203        2 code fixed bin(35)		init ( 0),
  1   204        2 caller char(65) varying	init (""),
  1   205        2 data,
  1   206          3 data_ptr ptr		init (null),
  1   207          3 data_lth fixed bin(21)	init ( 0),
  1   208        2 class char(10) varying	init (""),
  1   209        2 ioa_msg char(500) varying	init ("");
  1   210 
  1   211 
  1   212 /* Syntax:  call Trace (ioa_ctl, args);				       */
  1   213 
  1   214 dcl  1 sl_info_msg			aligned int static options(constant),
  1   215        2 version char(8)		init ("sl_info1"),
  1   216        2 arg_list_ptr ptr		init (null),
  1   217        2 loc,
  1   218          3 (mode			init (-1),
  1   219 	  severity  		init (-1),
  1   220 	  code 			init ( 0),
  1   221 	  caller 			init (-1),
  1   222 	  data 			init ( 0),
  1   223 	  class 			init ( 0),
  1   224 	  ioa_msg			init ( 1)) fixed bin,
  1   225        2 flags,
  1   226          3 ioa_msg_is_error_code bit(1) unal init ("0"b),
  1   227          3 flags_pad bit(35) unal	init ("0"b),
  1   228        2 mode fixed bin		init ( 1),
  1   229        2 severity fixed bin		init ( 0),
  1   230        2 code fixed bin(35)		init ( 0),
  1   231        2 caller char(65) varying	init (""),
  1   232        2 data,
  1   233          3 data_ptr ptr		init (null),
  1   234          3 data_lth fixed bin(21)	init ( 0),
  1   235        2 class char(10) varying	init (""),
  1   236        2 ioa_msg char(500) varying	init ("");
  1   237 
  1   238 /* END INCLUDE FILE sys_log_constants.incl.pl1 */
      135 
      136 
  2     1 /*  BEGIN:   sc_subsystem_info_.incl.pl1		  *  *  *  *  *  */
  2     2 
  2     3 /* format:style3,idind30 */
  2     4 
  2     5 /* Created  1984-10-24  BIM */
  2     6 /* Modified 1985-01-07, BIM: access control flags that track admin and X */
  2     7 /* Modified 1985-02-18, E. Swenson to save away abort_line procedure. */
  2     8 
  2     9 
  2    10 /****^  HISTORY COMMENTS:
  2    11*  1) change(87-02-17,GDixon), approve(87-07-03,MCR7680),
  2    12*     audit(87-07-13,Parisek), install(87-08-04,MR12.1-1056):
  2    13*     Correct formatting problems.  Add sc_subsystem_info.flags.dont_mask_calls
  2    14*     switch.
  2    15*  2) change(87-07-03,GDixon), approve(87-07-03,MCR7680),
  2    16*     audit(87-07-13,Parisek), install(87-08-04,MR12.1-1056):
  2    17*     Removed dont_mask_calls flag.  It is no longer needed to correctly perform
  2    18*     masking on a per-request basis.
  2    19*                                                   END HISTORY COMMENTS */
  2    20 
  2    21 
  2    22 declare	sc_subsystem_info_ptr	pointer;
  2    23 declare	1 sc_subsystem_info		aligned based (sc_subsystem_info_ptr),
  2    24 	  2 restriction_flags	bit (36) aligned,	/* copied from mc atep or fabricated */
  2    25 	  2 flags			aligned,
  2    26 	    3 no_real_tty		bit (1) unaligned,	/* for sc_admin_command_ */
  2    27 	    3 print_ready		bit (1) unal,	/* on for all except the system console,	*/
  2    28 						/*  instructs sc_process_command_line_ to deal	*/
  2    29 						/*  with the prompt				*/
  2    30 	    3 the_system_console	bit (1) unal,	/* syserr messages are printed here (but console	*/
  2    31 						/*  recover doesn't try to fix this) copied here	*/
  2    32 						/*  from the mc_ate to save other looking in there*/
  2    33 	    3 printer_offed		bit (1) unal,	/* suppress logging */
  2    34 	    3 pad			bit (32) unaligned,
  2    35 	  2 source_name		char (32) unaligned,
  2    36 	  2 area_ptr		pointer,
  2    37 	  2 mc_atep		pointer,		/* needed to play with attachments */
  2    38 	  2 real_iocb		pointer,		/* for sc_signal_io_handler_ */
  2    39 	  2 hangup_entry		entry (pointer) variable,
  2    40 						/* called on io_no_permission. */
  2    41 	  2 real_execute_line	entry (ptr, ptr, fixed bin (21), fixed bin (35)),
  2    42 	  2 real_locate_request	entry (ptr, char (*), ptr, fixed bin (35)),
  2    43 	  2 access_control_name	char (32) unaligned,
  2    44 	  2 real_invoke_request	entry,		/* since MR11 ssu_ lacks the ability to	abort a	*/
  2    45 						/*  single request, we have an invoke_request that*/
  2    46 						/*  handles a condition to unwind the request	*/
  2    47 	  2 abort_request_label	label,		/* go here (nonlocally) to unwind a single request */
  2    48 	  2 real_abort_line		entry options (variable);
  2    49 
  2    50 declare	sc_ss_area		area based (sc_subsystem_info.area_ptr);
  2    51 
  2    52 /* The following defines the user flags for the request table. */
  2    53 
  2    54 declare	sc_rf_ptr			pointer;
  2    55 declare	1 sc_request_flags		unaligned based (sc_rf_ptr),
  2    56 	  2 dont_parse_arguments	bit,		/* reply, intercom */
  2    57 	  2 obsolete		bit,		/* warn opr to not use it */
  2    58 	  2 dont_mask_calls		bit,		/* this runs without masking ev calls */
  2    59 	  2 requires_as		bit,		/* not before AS */
  2    60 	  2 requires_no_as		bit,		/* only before AS */
  2    61 	  2 complete_disks_first	bit,		/* try to mount disks */
  2    62 	  2 no_login_needed		bit,		/* sign_on */
  2    63 	  2 pad			bit (5),
  2    64 	  2 restriction_type	fixed bin (6) unsigned;
  2    65 						/* index into restriction flag string */
  2    66 
  2    67 
  2    68 /*  END OF:  sc_subsystem_info_.incl.pl1		  *  *  *  *  *  */
      137 
      138 
  3     1 /*  BEGIN:   sc_stat_.incl.pl1			  *  *  *  *  *  */
  3     2 
  3     3 
  3     4 /****^  HISTORY COMMENTS:
  3     5*  1) change(87-02-04,GDixon), approve(87-05-25,MCR7690),
  3     6*     audit(87-06-02,Parisek), install(87-08-04,MR12.1-1056):
  3     7*     Add sc_stat_$vchn_requires_accept in support of DSA virtual channels.
  3     8*  2) change(87-02-04,GDixon), approve(87-05-25,MCR7680),
  3     9*     audit(87-06-02,Parisek), install(87-08-04,MR12.1-1056):
  3    10*     Reorganized by type of data to improve readability.
  3    11*                                                   END HISTORY COMMENTS */
  3    12 
  3    13 
  3    14 			      /* ACCESS NAMES		       */
  3    15 dcl (
  3    16  sc_stat_$exec_access_name,	      /* check MC access in an exec request    */
  3    17  sc_stat_$unidentified_access_name  /* check access if no one is logged in.  */
  3    18     ) char(32) ext static;
  3    19 
  3    20 		        /* PATHNAMES			       */
  3    21 dcl (
  3    22  sc_stat_$info_dir,	        /* admin info segs directory		       */
  3    23  sc_stat_$log_dir,	        /* as log segs directory		       */
  3    24  sc_stat_$mc_acs_dir,       /* message coordinator ACS segments (.mcacs) dir */
  3    25  sc_stat_$sysdir	        /* system control directory		       */
  3    26     ) char(168) ext static;
  3    27 
  3    28 		        /* OTHER CHAR STRINGS			       */
  3    29 dcl (
  3    30  sc_stat_$master_channel    /* Master TTY channel.		       */
  3    31     )  char(6) aligned ext static;
  3    32 
  3    33 			       /* LABELS			       */
  3    34 dcl (
  3    35  sc_stat_$admin_listener_exit_label, /* GO here to exit admin mode.  Set to  */
  3    36 			       /*    ssu_$null_label unless 	       */
  3    37 			       /*	   admin_listener is active.	       */
  3    38  sc_stat_$master_abort_label,	       /* GO here after fault that is not      */
  3    39 			       /*    attributable to a particular      */
  3    40 			       /*	   command.		       */
  3    41  sc_stat_$system_shutdown_label      /* GO here to shut down system	       */
  3    42     ) label variable ext static;
  3    43 
  3    44 			 /* POINTERS TO			       */
  3    45 dcl (
  3    46  sc_stat_$admin_log_iocb,	 /* IOCB for admin log		       */
  3    47  sc_stat_$admin_log_write_ptr, /* DATA for log_write_ calls on the admin log */
  3    48  sc_stat_$admin_sci_ptr,	 /* DATA ssu_ for terminal currently executing */
  3    49  sc_stat_$as_log_write_ptr,	 /* DATA for log_write_ calls on as log, used  */
  3    50 			 /*      by sys_log_.		       */
  3    51  sc_stat_$initzer_ttyp,	 /* ENT  mc_ate for initializer terminal       */
  3    52  sc_stat_$master_iocb,	 /* IOCB for "master_i/o"		       */
  3    53  sc_stat_$master_sci_ptr,	 /* DATA ssu_ (permanent) for system control   */
  3    54  sc_stat_$mc_ansp,		 /* HEAD of mc_anstbl		       */
  3    55  sc_stat_$mc_iocb,		 /* IOCB ptr for "mc_i/o"		       */
  3    56  sc_stat_$sv1_iocb,		 /* IOCB ptr for "severity1"		       */
  3    57  sc_stat_$sv2_iocb,		 /* IOCB ptr for "severity2"		       */
  3    58  sc_stat_$sv3_iocb		 /* IOCB ptr for "severity3"		       */
  3    59     ) ptr ext static;
  3    60 
  3    61 			   /* SWITCHES			       */
  3    62 dcl (
  3    63  sc_stat_$Go,		   /* TRUE after answering service is listening*/
  3    64  sc_stat_$Go_typed,		   /* TRUE immediately after 'go' is typed     */
  3    65  sc_stat_$Multics,		   /* TRUE after answering service started     */
  3    66  sc_stat_$Multics_typed,	   /* TRUE immediately after 'mult' is typed   */
  3    67  sc_stat_$Star_typed,	   /* TRUE if 'mult' and 'go' came from 'star' */
  3    68  sc_stat_$admin_listener_switch, /* TRUE if in the admin listener	       */
  3    69  sc_stat_$did_part1,	   /* TRUE if part 1 of system startup ec done */
  3    70  sc_stat_$did_part2,	   /* TRUE if part 2 of system startup ec done */
  3    71  sc_stat_$did_part3,	   /* TRUE if part 3 of system startup ec done */
  3    72  sc_stat_$mc_is_on,		   /* TRUE if message coordinator running      */
  3    73  sc_stat_$no_operator_login,	   /* TRUE if operator login not required, or  */
  3    74 			   /*	 if PNT not yet available.	       */
  3    75  sc_stat_$shutdown_typed,	   /* TRUE if 'shutdown' command in progress.  */
  3    76  sc_stat_$test_mode,	   /* TRUE if in test environment	       */
  3    77  sc_stat_$vchn_requires_accept   /* TRUE if vchn may only be used if accepted*/
  3    78 			   /*      by operator signed on system console*/
  3    79     ) bit(1) aligned ext static;
  3    80 
  3    81 
  3    82 /*  END OF:  sc_stat_.incl.pl1			  *  *  *  *  *  */
      139 
      140 
      141      end ec_shift_config_change_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    09/21/87  1109.0  ec_shift_config_change_.pl1       >spec>install>1111>ec_shift_config_change_.pl1
135          1    08/06/87  0913.5  sys_log_constants.incl.pl1        >ldd>include>sys_log_constants.incl.pl1
137          2    08/06/87  0913.5  sc_subsystem_info_.incl.pl1       >ldd>include>sc_subsystem_info_.incl.pl1
139          3    08/06/87  0913.5  sc_stat_.incl.pl1                 >ldd>include>sc_stat_.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
SL_LOG_BEEP                     000020 constant        fixed bin(17,0)          initial dcl 1-14 set ref 129*
SL_LOG_SILENT                   000011 constant        fixed bin(17,0)          initial dcl 1-14 set ref 85*
as_check_condition_             000040 constant        entry                    external dcl 122 ref 124
as_dump_                        000010 constant        entry                    external dcl 51 ref 130
auto_maxu                              parameter       fixed bin(17,0)          dcl 49 ref 36 102 102
bc                              000107 automatic       fixed bin(24,0)          dcl 64 set ref 76*
call_ec_                        000014 constant        entry                    external dcl 54 ref 102
char                                                   builtin function         dcl 71 ref 102 102 102 102 102 102 102 102 102 102
                                                                                  102 102
cleanup                         000100 stack reference condition                dcl 53 ref 91
code                            000106 automatic       fixed bin(35,0)          dcl 63 set ref 76* 82 83* 84 85*
condition_                      000012 constant        entry                    external dcl 52 ref 101
condname                               parameter       char                     unaligned dcl 117 set ref 114 124* 127*
continue                               parameter       bit(1)                   unaligned dcl 118 set ref 114 124* 125
coptr                                  parameter       pointer                  dcl 116 ref 114
entry_type                      000110 automatic       fixed bin(2,0)           dcl 65 set ref 76* 82
hcs_$status_minf                000016 constant        entry                    external dcl 55 ref 76
i                               000136 automatic       fixed bin(17,0)          dcl 120 set ref 127*
infoptr                                parameter       pointer                  dcl 116 ref 114
ioa_$rsnnl                      000020 constant        entry                    external dcl 56 ref 127
ltrim                                                  builtin function         dcl 71 ref 102 102 102 102 102 102 102 102 102 102
                                                                                  102 102
mcptr                                  parameter       pointer                  dcl 116 ref 114
msg                             000100 automatic       char(120)                unaligned dcl 119 set ref 127* 129* 130 130
nbulk                                  parameter       fixed bin(17,0)          dcl 49 ref 36 102 102
ncpu                                   parameter       fixed bin(17,0)          dcl 49 ref 36 102 102
new                                    parameter       fixed bin(17,0)          dcl 49 ref 36 102 102
nkmem                                  parameter       fixed bin(17,0)          dcl 49 ref 36 102 102
non_local                       000137 automatic       bit(1)                   unaligned dcl 121 set ref 124* 125
null                                                   builtin function         dcl 71 ref 80 107
old                                    parameter       fixed bin(17,0)          dcl 49 ref 36 102 102
real_iocb                16            based           pointer                  level 2 dcl 2-23 set ref 99*
rtrim                                                  builtin function         dcl 71 ref 102 130 130
saved_admin_sci_ptr             000112 automatic       pointer                  dcl 66 set ref 81* 92 109
sc_create_sci_                  000022 constant        entry                    external dcl 57 ref 83
sc_create_sci_$destroy          000024 constant        entry                    external dcl 58 ref 93 110
sc_stat_$admin_sci_ptr          000034 external static pointer                  dcl 3-45 set ref 81 92* 96* 109*
sc_stat_$master_iocb            000036 external static pointer                  dcl 3-45 ref 99
sc_subsystem_info                      based           structure                level 1 dcl 2-23
sc_subsystem_info_ptr           000116 automatic       pointer                  dcl 2-22 set ref 98* 99
sci_ptr                         000114 automatic       pointer                  dcl 67 set ref 80* 83* 93* 96 98* 107 110*
seg_type                               constant        fixed bin(17,0)          initial dcl 69 ref 82
ssu_$get_info_ptr               000026 constant        entry                    external dcl 59 ref 98
sys_log_                        000030 constant        entry                    external dcl 60 ref 129
sys_log_$error_log              000032 constant        entry                    external dcl 61 ref 85
sysdir                                 parameter       char                     unaligned dcl 48 set ref 36 76* 102

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
SL_INFO_arg_given_in_structure         internal static fixed bin(17,0)          initial dcl 1-69
SL_INFO_arg_not_given                  internal static fixed bin(17,0)          initial dcl 1-69
SL_INFO_as_mode                        internal static fixed bin(17,0)          initial dcl 1-65
SL_INFO_command_mode                   internal static fixed bin(17,0)          initial dcl 1-65
SL_INFO_version_1                      internal static char(8)                  initial unaligned dcl 1-62
SL_LOG                                 internal static fixed bin(17,0)          initial dcl 1-14
SL_LOG_CRASH                           internal static fixed bin(17,0)          initial dcl 1-14
SL_TYPE                                internal static fixed bin(17,0)          initial dcl 1-14
SL_TYPE_BEEP                           internal static fixed bin(17,0)          initial dcl 1-14
SL_TYPE_CRASH                          internal static fixed bin(17,0)          initial dcl 1-14
sc_request_flags                       based           structure                level 1 packed unaligned dcl 2-55
sc_rf_ptr                              automatic       pointer                  dcl 2-54
sc_ss_area                             based           area(1024)               dcl 2-50
sc_stat_$Go                            external static bit(1)                   dcl 3-62
sc_stat_$Go_typed                      external static bit(1)                   dcl 3-62
sc_stat_$Multics                       external static bit(1)                   dcl 3-62
sc_stat_$Multics_typed                 external static bit(1)                   dcl 3-62
sc_stat_$Star_typed                    external static bit(1)                   dcl 3-62
sc_stat_$admin_listener_exit_label     external static label variable           dcl 3-34
sc_stat_$admin_listener_switch         external static bit(1)                   dcl 3-62
sc_stat_$admin_log_iocb                external static pointer                  dcl 3-45
sc_stat_$admin_log_write_ptr           external static pointer                  dcl 3-45
sc_stat_$as_log_write_ptr              external static pointer                  dcl 3-45
sc_stat_$did_part1                     external static bit(1)                   dcl 3-62
sc_stat_$did_part2                     external static bit(1)                   dcl 3-62
sc_stat_$did_part3                     external static bit(1)                   dcl 3-62
sc_stat_$exec_access_name              external static char(32)                 unaligned dcl 3-15
sc_stat_$info_dir                      external static char(168)                unaligned dcl 3-21
sc_stat_$initzer_ttyp                  external static pointer                  dcl 3-45
sc_stat_$log_dir                       external static char(168)                unaligned dcl 3-21
sc_stat_$master_abort_label            external static label variable           dcl 3-34
sc_stat_$master_channel                external static char(6)                  dcl 3-29
sc_stat_$master_sci_ptr                external static pointer                  dcl 3-45
sc_stat_$mc_acs_dir                    external static char(168)                unaligned dcl 3-21
sc_stat_$mc_ansp                       external static pointer                  dcl 3-45
sc_stat_$mc_iocb                       external static pointer                  dcl 3-45
sc_stat_$mc_is_on                      external static bit(1)                   dcl 3-62
sc_stat_$no_operator_login             external static bit(1)                   dcl 3-62
sc_stat_$shutdown_typed                external static bit(1)                   dcl 3-62
sc_stat_$sv1_iocb                      external static pointer                  dcl 3-45
sc_stat_$sv2_iocb                      external static pointer                  dcl 3-45
sc_stat_$sv3_iocb                      external static pointer                  dcl 3-45
sc_stat_$sysdir                        external static char(168)                unaligned dcl 3-21
sc_stat_$system_shutdown_label         external static label variable           dcl 3-34
sc_stat_$test_mode                     external static bit(1)                   dcl 3-62
sc_stat_$unidentified_access_name      external static char(32)                 unaligned dcl 3-15
sc_stat_$vchn_requires_accept          external static bit(1)                   dcl 3-62
sl_info                                automatic       structure                level 1 dcl 1-24
sl_info_code_msg                       internal static structure                level 1 dcl 1-187
sl_info_msg                            internal static structure                level 1 dcl 1-214
sl_info_sev_code_label_msg             internal static structure                level 1 dcl 1-161
sl_info_sev_code_msg                   internal static structure                level 1 dcl 1-82
sl_info_sev_coded_msg                  internal static structure                level 1 dcl 1-134
sl_info_sev_msg                        internal static structure                level 1 dcl 1-108

NAMES DECLARED BY EXPLICIT CONTEXT.
ec_shift_config_change_         000116 constant        entry                    external dcl 36
return_to_caller                000676 constant        label                    dcl 107 ref 88 131
ucs                             000715 constant        entry                    internal dcl 114 ref 101 101

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1270        1332    1074        1300
Length      1600    1074        42         232     173           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
ec_shift_config_change_             206 external procedure  is an external procedure.  
on unit on line 91                   68 on unit               
ucs                                 152 internal procedure  is assigned to an entry variable.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
ec_shift_config_change_  000106 code                        ec_shift_config_change_
                         000107 bc                          ec_shift_config_change_
                         000110 entry_type                  ec_shift_config_change_
                         000112 saved_admin_sci_ptr         ec_shift_config_change_
                         000114 sci_ptr                     ec_shift_config_change_
                         000116 sc_subsystem_info_ptr       ec_shift_config_change_
ucs                      000100 msg                         ucs
                         000136 i                           ucs
                         000137 non_local                   ucs

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
alloc_char_temp     call_ext_out_desc   call_ext_out        return_mac          tra_ext_1           enable_op
shorten_stack       ext_entry_desc      int_entry           int_entry_desc

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
as_check_condition_           as_dump_                      call_ec_                      condition_
hcs_$status_minf              ioa_$rsnnl                    sc_create_sci_                sc_create_sci_$destroy
ssu_$get_info_ptr             sys_log_                      sys_log_$error_log

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
sc_stat_$admin_sci_ptr        sc_stat_$master_iocb




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     36 000110        76 000131        80 000176        81 000200        82 000204        83 000211        84 000221
     85 000223        88 000261        91 000262        92 000276        93 000301        94 000310        96 000311
     98 000314        99 000324       101 000331       102 000354       105 000675       107 000676       109 000702
    110 000705       112 000713       114 000714       124 000730       125 000750       127 000761       129 001012
    130 001035       131 001066


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
