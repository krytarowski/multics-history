	COMPILATION LISTING OF SEGMENT online_dump
	Compiled by: Multics PL/I Compiler, Release 28d, of October 4, 1983
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 01/22/85  1523.1 mst Tue
	    Options: optimize list

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 /* ONLINE-DUMP --- process dump image created by BOS */
       12 /* od_355 entry added by R. Mullen May 1973 */
       13 /* modified for multiple fnps by Robert Coren 10/08/75 */
       14 /* modified 7/25/76 by Noel I. Morris for MR4.1 */
       15 /* modified 79 Aug 14 by Art Beattie to handle longer erf numbers and identify entry called to com_err_. */
       16 /* modified 2/24/81 by J. A. Bush for larger fdump header size */
       17 
       18 online_dump: od: proc;
       19 
       20 dcl  procname char (16);				/* Identification for com_err_ calls */
       21 
       22 dcl  arg char (argl) based (argp),			/* Variables used to access arguments */
       23      argp ptr,
       24      argl fixed bin;
       25 
       26 dcl (erf_no char (18) aligned,			/* First arg aligned, ERF # */
       27      name char (32)) aligned;				/* Returned by "get_dump_ptrs_" */
       28 
       29 dcl  error_table_$badopt fixed bin (35) external static;
       30 
       31 dcl  num fixed bin init (1);
       32 dcl  n_blocks fixed bin;
       33 dcl  n_first fixed bin;
       34 
       35 dcl (ioname init ("od_output_"),			/* Arguments for I/O attachment */
       36      iotype init ("prtdim"),
       37      ioname2 init ("prta")) char (168) aligned int static;
       38 
       39 dcl  get_dump_ptrs_ entry (char (*) aligned, (0:31) ptr, (0:31) fixed bin, fixed bin, char (32) aligned),
       40      od_print_ entry options (variable),
       41      od_stack_ entry (ptr, fixed bin, ptr, ptr, ptr, ptr),
       42      ioa_ entry options (variable),
       43      ring0_get_$segptr_given_slt entry (char (*)aligned, char (*)aligned, ptr, fixed bin (35), ptr, ptr),
       44      hcs_$get_max_length_seg entry (ptr, fixed bin (18), fixed bin (35)),
       45      hcs_$make_seg entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (5), ptr, fixed bin (35)),
       46      com_err_ entry options (variable),
       47      ios_$attach entry (char (*) aligned, char (*) aligned, char (*) aligned, char (*) aligned, bit (72) aligned),
       48      ios_$detach entry (char (*) aligned, char (*) aligned, char (*) aligned, bit (72) aligned);
       49 
       50 dcl (od_print_$op_new_page, od_print_$op_finish) entry,	/* No args */
       51      od_print_$op_fmt_line entry (fixed bin, fixed bin, fixed bin (35)),
       52      od_print_$op_new_seg entry (fixed bin),
       53      od_print_$op_init entry (fixed bin, fixed bin (71)),
       54      online_355_dump_ entry (ptr, fixed bin),
       55      copy_dump_seg_ entry (fixed bin, fixed bin, (0:31) ptr, (0:31) fixed bin, ptr, fixed bin),
       56      print_dump_seg_name_ entry (fixed bin, fixed bin (71), ptr, ptr),
       57      print_dump_seg_name_$hard entry (fixed bin, fixed bin (71), ptr, ptr),
       58      hcs_$terminate_noname entry (ptr, fixed bin (35)),
       59      cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
       60 
       61 dcl (addr, addrel, baseno, bin, divide, index, mod, null, size, substr) builtin; /* PSI! */
       62 
       63 dcl (ds_seg_no int static init (0),			/* Seg # of descriptor segs */
       64      slt_seg_no, nam_seg_no, sstnt_seg_no, pds_seg_no, prds_seg_no, /* Miscellaneous system segment #-s */
       65      sst_seg_no) fixed bin;				/* .. */
       66 
       67 dcl (dslen, sstntlen, sltlen, namlen, sstlen, pdslen, prdslen, stklen) fixed bin; /* Lengths of copies of segs */
       68 
       69 dcl (slt_seg init (null), nam_seg, sst_seg, sstnt_seg, ds_seg, pds_seg, /* Static pointers to created segments */
       70      prds_seg /* , tc_data_seg, lot_seg */, stk_seg, shut_seg) ptr int static;
       71 
       72 dcl ( /* sstp, sltp, */ namp, dsp, pdsp, prdsp /* , tc_datap, lotp */) ptr; /* Automatic copies */
       73 
       74 dcl (astep, ptwp) ptr,
       75      code fixed bin (35);
       76 
       77 dcl ((m1 init (-1),
       78      five init (5),
       79      four init (4),
       80      three init (3),
       81      two init (2),
       82      one init (1)) fixed bin,
       83      seg_mode fixed bin (5) init (1011b),
       84      max_fnps fixed bin init (4),
       85      fnp_size fixed bin init (16384),			/* size of core image in 36-bit words */
       86      wps fixed bin (18)) int static;
       87 
       88 
       89 
       90 dcl  onechar char (1) aligned;
       91 dcl  twochar char (2) aligned;
       92 
       93 dcl  dsbr_stk_no fixed bin;				/* the first stack segno, judged by dsbr.stack */
       94 dcl  xreg (0:7) fixed bin (17) unaligned based;
       95 dcl  cv_oct_check_ entry (char (*), fixed bin) returns (fixed bin);
       96 dcl  ioargloc fixed bin init (2);
       97 dcl  seg_no fixed bin;
       98 dcl  restartsw bit (1) init ("0"b);
       99 dcl (rt_seg_no, rt_proc_no, cur_proc_no) fixed bin;
      100 dcl  fnp_index fixed bin;
      101 dcl  tag char (1);
      102 dcl  all_fnps bit (1);				/* indicator of whether dumping all fnps */
      103 dcl  segselsw bit (1) init ("0"b),
      104      wants_regs bit (1) init ("0"b),
      105      wants_seg (0:1151) bit (1) unal,
      106      ws16x72 (16) fixed bin (71) based,
      107      ask_ ext entry options (variable),
      108      zilch (16) fixed bin (71) init ((16) 0),
      109      ask_$ask_clr ext entry options (variable),
      110      argno fixed bin,
      111      fnp_only bit (1),
      112      seg_id char (32);
      113 
      114 dcl  based_ptr based ptr;
      115 
      116 dcl (fmtdbrh char (31) init ("^-^-DBR  ADDR   BOUND U STACK^/"),
      117      fmtdbr char (34) init ("^-^-  ^8.3b  ^5.3b ^1.3b ^4.3b^/^/"),
      118      fmtpprh char (28) init ("^-^-PPR  PRR   PSR      IC^/"),
      119      fmtppr char (35) init ("^-^-      ^1.3b   ^5.3b   ^6.3b^/^/"),
      120      fmtrar char (17) init ("^-^-RAR   ^1.3b^/"),
      121      fmtind char (17) init ("^-^-IND   ^6.3b^/"),
      122      fmta char (14) init ("^-^-A     ^12w"),
      123      fmtq char (14) init ("^-^-Q     ^12w"),
      124      fmte char (15) init ("^-^-EXP   ^3.3b"),
      125      fmtt char (20) init ("^-^-TIMER    ^9.3b^/"),
      126      fmtbar char (14) init ("^-^-BAR   ^w^/"),
      127      fmtx char (13) init ("^-^-X^o   ^7o"),
      128      fmtinter char (16) init ("^/^-^-INTER ^12w"),
      129      fmtmode char (22) init ("^/^-^-MODE  ^12w  ^12w"),
      130      fmtflt char (14) init ("^-^-FAULT ^12w"),
      131      fmtprh char (39) init ("^/^/^-^-PR    R    SEG     WORD  BITS^/"),
      132      fmtpr char (39) init ("^-       ^2a (^o)   ^o   ^5o   ^6o  ^2o"),
      133      fmtamsdwh char (81) init ("^/^/^-AM: SDW^/^-^-  ADDR   R1R2R3  F  BOUND  REWPUG    CL  POINTER  F/E  USAGE^/"),
      134      fmtamsdw char (51) init ("^-^-^8o  ^o ^o ^o     ^5o  ^8a^5o  ^5o    ^a    ^2o"),
      135      fmtamptwh char (63) init ("^/^/^-AM: PTW^/^-^- ADDR    M   POINTER    PAGE    F/E  USAGE^/"),
      136      fmtamptw char (41) init ("^-^-^6o   ^2a   ^5o     ^4o     ^a    ^2o"),
      137      fmtcbh char (33) init ("^/^/^-^-COREBLOCKS: FIRST   NUM^/"),
      138      fmtcbno char (13) init ("^-^-^- NO MEM"),
      139      fmtmcmh char (33) init ("^/^/^-^-MEMORY CONTROLLER MASKS^/"),
      140      fmtmcm char (40) init ("^-  ^2o ^14w^14w^14w^14w^14w^14w^14w^14w"),
      141      fmthrh char (29) init ("^/^/^-^-^-HISTORY REGISTERS^/")) aligned int static;
      142 
      143 dcl (fmteight char (37) init ("^-^4o^16w^14w^14w^14w^14w^14w^14w^14w"), /* For page table printing */
      144      fmtdesc char (66) init ("^-^-  ADDR   R1R2R3  F  BOUND  REWPUG    CL     SEGMENT     NAME^/"),
      145      fmtast char (64) init ("^/      ASTE      ^14w^14w^14w^14w^14w^14w^14w^14w^/PAGE TABLE^/"),
      146      fmtlth char (14) init ("^2-LENGTH = ^o"),
      147      fmteject char (2) init ("^|"),
      148      fmthdr char (11) init ("^|^a ERF ^a"),
      149      fmteq char (21) init ("^-^7o line^a repeated")) aligned int static;
      150 
      151 dcl 1 dsbr based aligned,
      152    (2 add bit (24),
      153     2 pad1 bit (12),
      154     2 pad2 bit (1),
      155     2 bound bit (14),
      156     2 pad3 bit (4),
      157     2 unpaged bit (1),
      158     2 pad4 bit (4),
      159     2 stack bit (12)) unaligned;
      160 
      161 dcl 1 scu based (scup) aligned,			/* SCU data needed by online_dump */
      162     2 ppr,					/* proceedure pointer register */
      163       3 prr bit (3) unal,				/* procedure ting register */
      164       3 psr bit (15) unal,				/* procedure segment register */
      165     2 pad1 bit (18) unal,				/*			*/
      166     2 pad2 (3) bit (36) unal,				/*			*/
      167     2 ilc bit (18) unal,				/* instruction counter */
      168     2 ir bit (18) unal,				/* indicator registers */
      169     2 pad3 (3) bit (36) unal;				/*		*/
      170 
      171 dcl (ptr_array ptr,					/* Pointers to, lengths of component segments of image */
      172      len_array fixed bin) (0:31);
      173 
      174 declare 1 cmp aligned,				/* Buffer containing contents of last printed line */
      175         2 (zero, two, four, six) fixed bin (71);
      176 
      177 declare 1 temp aligned,				/* Buffer used when current 8 words straddle image segment boundary */
      178         2 (zero, two, four, six) fixed bin (71);
      179 
      180 declare 1 dbl based aligned,				/* Template used to access current 8 words */
      181         2 (zero, two, four, six) fixed bin (71);
      182 
      183 declare 1 sgl based aligned,				/* Template for printing individual words */
      184         2 (zero, one, two, three, four, five, six, seven) fixed bin (35);
      185 
      186 dcl (cur, nxt, tmp, prt, eightp) ptr,			/* Pointers used in dumping */
      187     (ast_off, sst_abs_loc, sst_high_loc, abs_loc, jbdry, page_no) fixed bin,
      188     (b72 bit (72),					/* I/O status */
      189      bl char (l) based,				/* For format overlay */
      190      s char (1),					/* for singular/plural printing */
      191      c0 char (0)) aligned,				/* = null string */
      192     (i, j, l, j1, j2, eq_print) fixed bin,		/* Misc values */
      193      bin_array (0:1023) based fixed bin (35),
      194      dbl_array (0:1023) based fixed bin (71),
      195      cur_orig fixed bin (35),
      196     (cur_proc_index, cur_seg_no, given_length, half_gl) fixed bin,
      197 						/* Per-segment values */
      198     (nsegs, seg_index, ptr_index, wpsmsi) fixed bin (18);	/* More misc */
      199 
      200 declare 1 io_status based aligned,			/* To check 72-bits from ios_ calls */
      201         2 code fixed bin,				/* error code */
      202         2 substatus bit (36);				/* Bits */
      203 
      204 dcl  axbitsp ptr;
      205 dcl  axstring char (8) aligned;
      206 dcl  axbits (6) bit (1) unaligned based (axbitsp);
      207 
      208 dcl (amrp, ampp, scup) ptr;
      209 
  1     1 
  1     2 /* BEGIN INCLUDE FILE ... assoc_mem.incl.pl1 ... Last modified 1 March 1973 */
  1     3 
  1     4 dcl 1 amptwreg aligned based,				/* Associative Memory page table word register */
  1     5    (2 addr bit (18),				/* upper 18 bits of 24 bit core address of page */
  1     6     2 pad1 bit (11),
  1     7     2 modif bit (1),				/* page has been modified bit */
  1     8     2 pad2 bit (6)) unaligned;
  1     9 
  1    10 
  1    11 dcl 1 amptwptr aligned based,				/* Associative Memory page table word pointer */
  1    12    (2 pointer bit (15),				/* effective segment number */
  1    13     2 pageno bit (12),				/* page number to which this ptw refers */
  1    14     2 valid bit (1),				/* 1 => this register contains valid information */
  1    15     2 amptwptr_pad bit (4),
  1    16     2 usage bit (4)) unaligned;			/* relative usage, "1111"b is most recent */
  1    17 
  1    18 
  1    19 dcl 1 amsdwreg aligned based,				/* Associative Memory segment descriptor word register */
  1    20    (2 addr bit (24),				/* core address of page table or segment */
  1    21     2 r1 bit (3),					/* read/write ring bracket */
  1    22     2 r2 bit (3),					/* read/execute bracket */
  1    23     2 r3 bit (3),					/* call bracket  */
  1    24     2 pad1 bit (3),
  1    25 
  1    26     2 pad2 bit (1),
  1    27     2 bound bit (14),				/* boundary field (in 16 word blocks) */
  1    28     2 read bit (1),					/* read permission bit */
  1    29     2 execute bit (1),				/* execute permission bit */
  1    30     2 write bit (1),				/* write permission bit */
  1    31     2 privileged bit (1),				/* privileged mode bit */
  1    32     2 unpaged bit (1),				/* 1 =>  addr is base address of segment */
  1    33     2 entry_bound_sw bit (1),				/* 0 => cl is checked by hardware */
  1    34     2 cache bit (1),				/* segment is encacheable */
  1    35     2 cl bit (14)) unaligned;				/* entry bound */
  1    36 
  1    37 
  1    38 dcl 1 amsdwptr aligned based,				/* Associative Memory segment descriptor word pointer */
  1    39    (2 pointer bit (15),				/* effective segment number */
  1    40     2 pad1 bit (12),
  1    41     2 valid bit (1),				/* 1 => this register contains valid information */
  1    42     2 pad2 bit (4),
  1    43     2 usage bit (4)) unaligned;			/* relative usage,."1111"b is most recently used */
  1    44 
  1    45 /* END INCLUDE FILE ... assoc_mem.incl.pl1 ... */
      210 
      211 
  2     1 /* BEGIN INCLUDE FILE slt.incl.pl1 --- Last modified 2/76 SHW */
  2     2 
  2     3 /* Declarations for Segment Loading Table header and array.
  2     4*
  2     5*   Used by Initialization and MST Checker subroutines */
  2     6 
  2     7 dcl sltp ptr,					/* pointer to base of SLT segment */
  2     8     names_ptr ptr,					/* pointer to base of SLT names segment */
  2     9     namep ptr,					/* pointer to segment name list block */
  2    10     pathp ptr,					/* pointer to segment's directory path name */
  2    11     aclp ptr;					/* pointer to acl structure */
  2    12 
  2    13 declare 1 slt based (sltp) aligned,			/* declaration of Segment Loading Table (SLT) */
  2    14 	2 name_seg_ptr ptr,				/* words 0-1, pointer (ITS pair) to name segment */
  2    15 	2 free_core_start fixed bin (24),		/* word 2, start of free core after perm-wired */
  2    16 	2 first_sup_seg fixed bin (18),		/* word 3, first supervisor segment number */
  2    17 	2 last_sup_seg fixed bin (18), 		/* word 4, last supervisor segment number */
  2    18 	2 first_init_seg fixed bin (18),		/* word 5, first initializer segment number */
  2    19 	2 last_init_seg fixed bin (18),		/* word 6, last initializer segment number */
  2    20 	2 free_core_size fixed bin (24),		/* size (in words) of free core after perm-wired */
  2    21 	2 seg (0:8191) aligned,			/* segment entries (4 words each) */
  2    22 	  3 slte (4) fixed bin (35);			/* Space for SLT entries */
  2    23 
  2    24 /* auxiliary segment of SLT for storing of segment names and directory path names */
  2    25 
  2    26 declare 1 name_seg based (names_ptr) aligned,		/* name segment header */
  2    27 	2 pad bit (18) unal,
  2    28 	2 next_loc bit (18) unal,			/* Next available free location in name seg */
  2    29 	2 ht (0:127) bit (18) aligned;		/* Names hash table */
  2    30 
  2    31 declare 1 segnam based (namep) aligned,			/* declaration for segment name block */
  2    32 	2 count fixed bin (17),			/* number of segment names in this block */
  2    33 	2 names (50 refer (segnam.count)),		/* segment name array */
  2    34 	  3 hp bit (18) unal,			/* hash thread pointer */
  2    35 	  3 ref bit (1) unal,			/* "1"b if name referenced */
  2    36 	  3 pad bit (5) unal,
  2    37 	  3 segno bit (12) unal,			/* segment number associated with this name */
  2    38 	  3 name char (32) unal;			/* space for name (max 32 characters) */
  2    39 
  2    40 declare 1 path based (pathp) aligned,			/* declaration for directory path name */
  2    41 	2 size fixed bin (17),			/* length of pathname */
  2    42 	2 name char (168 refer (path.size)) unal,	/* directory path name */
  2    43 	2 acls fixed bin;				/* ACL list starts here */
  2    44 
  2    45 declare 1 acls based (aclp) aligned,			/* declaration for acl list */
  2    46 	2 count fixed bin,				/* number of entries in acl list */
  2    47 	2 acl (50 refer (acls.count)),		/* array of acl entries */
  2    48 	  3 userid char (32),			/* user specification */
  2    49 	  3 mode bit (36) aligned,			/* mode for the specified user */
  2    50 	  3 pad bit (36) aligned,
  2    51 	  3 code fixed bin;
  2    52 
  2    53 
  2    54 /* END INCLUDE FILE slt.incl.pl1 */
      212 
      213 
  3     1 /* Begin include file sstnt.incl.pl1   */
  3     2 
  3     3 /* Created 10/03/74 by Bernard Greenberg */
  3     4 /* modified 08/24/79 by J. A. Bush  for easier calculation of size of sstnt */
  3     5 /* Modified 08/27/84 by Keith Loepere to purge BOS */
  3     6 
  3     7 dcl  sst_names_$ ext;				/* Segment containing sst name table */
  3     8 
  3     9 dcl  sstnp ptr;					/* Pointer to sst name segment */
  3    10 
  3    11 dcl 1 sstnt based (sstnp) aligned,			/* Major structure */
  3    12     2 valid bit (1) aligned,				/* 1 => structure filled by Multics */
  3    13     2 multics_or_bce char (4) aligned,			/* Origin of data in table */
  3    14     2 nentries fixed bin,				/* number of entries in the sstnt */
  3    15     2 pad1 (5) fixed bin,
  3    16 
  3    17     2 (ast_sizes,					/* Sizes of ASTE's at each level */
  3    18      ast_name_offsets,				/* Starting index for names at each level */
  3    19      ast_offsets,					/* Starting rel addr of each AST region */
  3    20      pad2) (0 : 3) fixed bin,
  3    21 
  3    22     2 names (0 : 0 refer (sstnt.nentries)) char (32) varying; /* Names of AST entries */
  3    23 
  3    24 dcl (sstnmx, ptsi_a) fixed bin (17);			/* Index into name table */
  3    25 
  3    26 dcl  nm_astep ptr;					/* astep to be used */
  3    27 
  3    28 /* End include file sstnt.incl.pl1 */
      214 
      215 
  4     1 /* BEGIN INCLUDE FILE  ptw.incl.pl1  ---  09/13/74 for nss */
  4     2 
  4     3 dcl  ptp ptr;					/* pointer to either page table or page table word */
  4     4 
  4     5 dcl 1 ptw based (ptp) aligned,			/* page table word */
  4     6 
  4     7     (2 add bit (18),				/* address of page, type of which is defined by add_type */
  4     8     2 add_type bit (4),				/* 0000=null, 1000=core, 0100=disk, 0010=pd, 0001=swap */
  4     9     2 first bit (1),				/* the page has not yet been written out */
  4    10     2 processed bit (1),				/* temporary used during post-purging and error signalling */
  4    11     2 pad1 bit (1),
  4    12     2 unusable1 bit (1),				/* can't be used because hardware resets this bit */
  4    13     2 phu bit (1),					/* page has been used bit */
  4    14     2 phm1 bit (1),					/* Cumulative OR of hardware phm's */
  4    15     2 nypd bit (1),					/* must be moved to paging device */
  4    16     2 phm bit (1),					/* page has been modified bit */
  4    17     2 phu1 bit (1),					/* page has been used in the quantum */
  4    18     2 wired bit (1),				/* page is to remain in core */
  4    19     2 os bit (1),					/* page is out-of-service (I/O in progress) */
  4    20     2 df bit (1),					/* directed fault if this is 0 (page not in core) */
  4    21     2 df_no bit (2)) unaligned;			/* directed fault number for page faults */
  4    22 
  4    23 dcl 1 ptwa (0:255) based (ptp) aligned like ptw;		/* page table */
  4    24 
  4    25 dcl  ptwa_bits (0:255) based (ptp) bit (36) aligned;	/* page table array as raw bits */
  4    26 
  4    27 dcl 1 mptw based (ptp) aligned,			/* page table word while page is not in core */
  4    28     2 devadd bit (22) unaligned,			/* device address where page resides */
  4    29     2 pad bit (14) unaligned;
  4    30 
  4    31 dcl 1 mptwa (0 : 1) based (ptp) aligned,		/* page table while pages are not in core */
  4    32     2 devadd bit (22) unaligned,			/* device address where page resides */
  4    33     2 pad bit (14) unaligned;
  4    34 
  4    35 dcl 1 atptw based (ptp) aligned,			/* PL/I has problems on overlay-def based */
  4    36     2 add bit (18) unal,
  4    37     2 (core, disk, pd, reserved) bit (1) unal,		/* address types */
  4    38     2 pad bit (14) unal;
  4    39 
  4    40 dcl 1 atptwa (0:255) based (ptp) aligned like atptw;
  4    41 
  4    42 /* END INCLUDE FILE  ptw.incl.pl1 */
      216 
      217 
  5     1 /* BEGIN INCLUDE FILE its.incl.pl1
  5     2*   modified 27 July 79 by JRDavis to add its_unsigned
  5     3*   Internal format of ITS pointer, including ring-number field for follow-on processor */
  5     4 
  5     5 dcl 1 its based aligned,				/* declaration for ITS type pointer */
  5     6     2 pad1 bit (3) unaligned,
  5     7     2 segno bit (15) unaligned,			/* segment number within the pointer */
  5     8     2 ringno bit (3) unaligned,			/* ring number within the pointer */
  5     9     2 pad2 bit (9) unaligned,
  5    10     2 its_mod bit (6) unaligned,			/* should be 43(8) */
  5    11 
  5    12     2 offset bit (18) unaligned,			/* word offset within the addressed segment */
  5    13     2 pad3 bit (3) unaligned,
  5    14     2 bit_offset bit (6) unaligned,			/* bit offset within the word */
  5    15     2 pad4 bit (3) unaligned,
  5    16     2 mod bit (6) unaligned;				/* further modification */
  5    17 
  5    18 dcl 1 itp based aligned,				/* declaration for ITP type pointer */
  5    19     2 pr_no bit (3) unaligned,			/* number of pointer register to use */
  5    20     2 pad1 bit (27) unaligned,
  5    21     2 itp_mod bit (6) unaligned,			/* should be 41(8) */
  5    22 
  5    23     2 offset bit (18) unaligned,			/* word offset from pointer register word offset */
  5    24     2 pad2 bit (3) unaligned,
  5    25     2 bit_offset bit (6) unaligned,			/* bit offset relative to new word offset */
  5    26     2 pad3 bit (3) unaligned,
  5    27     2 mod bit (6) unaligned;				/* further modification */
  5    28 
  5    29 
  5    30 dcl 1 its_unsigned based aligned,			/* just like its, but with unsigned binary */
  5    31     2 pad1 bit (3) unaligned,
  5    32     2 segno fixed bin (15) unsigned unaligned,
  5    33     2 ringno fixed bin (3) unsigned unaligned,
  5    34     2 pad2 bit (9) unaligned,
  5    35     2 its_mod bit (6) unaligned,
  5    36 
  5    37     2 offset fixed bin (18) unsigned unaligned,
  5    38     2 pad3 bit (3) unaligned,
  5    39     2 bit_offset fixed bin (6) unsigned unaligned,
  5    40     2 pad4 bit (3) unaligned,
  5    41     2 mod bit (6) unaligned;
  5    42 
  5    43 dcl 1 itp_unsigned based aligned,			/* just like itp, but with unsigned binary where appropriate */
  5    44     2 pr_no fixed bin (3) unsigned unaligned,
  5    45     2 pad1 bit (27) unaligned,
  5    46     2 itp_mod bit (6) unaligned,
  5    47 
  5    48     2 offset fixed bin (18) unsigned unaligned,
  5    49     2 pad2 bit (3) unaligned,
  5    50     2 bit_offset fixed bin (6) unsigned unaligned,
  5    51     2 pad3 bit (3) unaligned,
  5    52     2 mod bit (6) unaligned;
  5    53 
  5    54 
  5    55 dcl  ITS_MODIFIER bit (6) unaligned internal static options (constant) init ("43"b3);
  5    56 dcl  ITP_MODIFIER bit (6) unaligned internal static options (constant) init ("41"b3);
  5    57 
  5    58 /* END INCLUDE FILE   its.incl.pl1 */
      218 
      219 
  6     1 /* BEGIN INCLUDE FILE ... sdw.incl.pl1 ... last modified 12 May 1976 */
  6     2 
  6     3 dcl  sdwp ptr;
  6     4 
  6     5 dcl 1 sdw based (sdwp) aligned,			/* Segment Descriptor Word */
  6     6 
  6     7    (2 add bit (24),					/* main memory address of page table */
  6     8     2 (r1, r2, r3) bit (3),				/* ring brackets for the segment */
  6     9     2 df bit (1),					/* directed fault bit (0 => fault) */
  6    10     2 df_no bit (2),				/* directed fault number */
  6    11 
  6    12     2 pad1 bit (1),
  6    13     2 bound bit (14),				/* boundary field (in 16 word blocks) */
  6    14     2 access,					/* access bits */
  6    15       3 read bit (1),				/* read permission bit */
  6    16       3 execute bit (1),				/* execute permission bit */
  6    17       3 write bit (1),				/* write permission bit */
  6    18       3 privileged bit (1),				/* privileged bit */
  6    19     2 unpaged bit (1),				/* segment is unpaged if this is 1 */
  6    20     2 entry_bound_sw bit (1),				/* if this is 0 the entry bound is checked by hardware */
  6    21     2 cache bit (1),				/* cache enable bit */
  6    22     2 entry_bound bit (14)) unaligned;			/* entry bound */
  6    23 
  6    24 dcl 1 sdwa (0: 1) based (sdwp) aligned like sdw;		/* SDW array (descriptor segment) */
  6    25 
  6    26 /* END INCLUDE FILE  sdw.incl.pl1 */
      220 
      221 
  7     1 /* BEGIN INCLUDE FILE ... bos_dump.incl.pl1 ... */
  7     2 /* Modified 1 September 1976 */
  7     3 /* Modified 11/11/80 by J. A. Bush for the DPS8/70M CPU */
  7     4 /* Modified 6/12/81 by Rich Coppola to extend the dps8 extended fault reg to 
  7     5*   15 bits  */
  7     6 /* Modified 02/23/81, W. Olin Sibert, to describe old and new FDUMP styles */
  7     7 
  7     8 
  7     9 dcl  dumpptr ptr;					/* pointer to following structure */
  7    10 
  7    11 dcl 1 dump based (dumpptr) aligned,			/* header of dump by fdump */
  7    12     2 dump_header aligned like dump_header,
  7    13 
  7    14     2 segs (1008),					/* segment array */
  7    15       3 segno bit (18) unal,				/* segment number */
  7    16       3 length bit (18) unal, 			/* length of segment in sector sized blocks */
  7    17 
  7    18     2 amptwregs (0 : 63) bit (36),			/* assoc. mem. page table word regs */
  7    19     2 amptwptrs (0 : 63) bit (36),			/* assoc. mem. page table word pointers */
  7    20     2 amsdwregs (0 : 63) bit (72),			/* assoc. mem. segment descriptor word registers */
  7    21     2 amsdwptrs (0 : 63) bit (36),			/* assoc. mem. segment descriptor word pointers */
  7    22 
  7    23     2 ouhist (0 : 63) bit (72), 			/* operations unit history registers */
  7    24     2 cuhist (0 : 63) bit (72), 			/* control unit history registers */
  7    25     2 duhist (0 : 63) bit (72), 			/* decimal unit history registers */
  7    26     2 auhist (0 : 63) bit (72), 			/* appending unit history registers */
  7    27 
  7    28     2 prs (0 : 7) ptr,				/* pointer registers */
  7    29 
  7    30     2 regs aligned like dump_registers, 		/* assorted machine registers */
  7    31 
  7    32     2 low_order_port bit (3), 			/* from which clock is read */
  7    33     2 pad4 bit (36),
  7    34     2 mctime fixed bin (52),				/* time conditions were taken */
  7    35     2 pad5 (0 : 3) bit (36),
  7    36 
  7    37     2 misc_registers like dump_misc_registers,		/* Assorted registers & processor data */
  7    38 
  7    39     2 ptrlen (0 : 7) bit (36),			/* pointers and lengths for EIS */
  7    40 
  7    41     2 coreblocks (0 : 7),
  7    42       3 num_first bit (18) unal,			/* first addr in coreblock */
  7    43       3 num_blocks bit (18) unal,			/* number of blocks used */
  7    44     2 pad7 (112) fixed bin;
  7    45 
  7    46 
  7    47 dcl 1 dump_header aligned based,			/* Standard header for FDUMP */
  7    48     2 words_dumped fixed bin (35),			/* total words in dump */
  7    49     2 valid bit (1),				/* = 1 if there is a 6180 dump to be had */
  7    50     2 time fixed bin (71),				/* time of dump */
  7    51     2 erfno fixed bin (18),				/* Error Report Form Number */
  7    52     2 num_segs fixed bin,				/* number of segments dumped */
  7    53     2 valid_355 bit (1),				/* = 1 if there is a dn355 dump to be had */
  7    54     2 dumped_355s bit (4),				/* indicates which 355s were dumped */
  7    55     2 time_355 fixed bin (71),			/* time of 355 dump */
  7    56     2 version fixed bin,				/* currently 2 */
  7    57     2 pad0 (5) fixed bin;				/* pad0 to 16 words */
  7    58 
  7    59 dcl 1 dump_registers aligned based,			/* Standard (SREG) arrangement of registers in dump */
  7    60    (2 x (0 : 7) bit (18),				/* index registers */
  7    61     2 a bit (36),					/* the a register */
  7    62     2 q bit (36),					/* the q register */
  7    63     2 e bit (8),					/* the e register */
  7    64     2 pad2 bit (28),				/* pad */
  7    65     2 t bit (27),					/* timer register */
  7    66     2 pad3 bit (6), 				/* pad */
  7    67     2 ralr bit (3)) unaligned;			/* ring alarm register */
  7    68 
  7    69 dcl 1 dump_misc_registers aligned based,
  7    70     2 scu (0 : 7) bit (36),				/* from store control unit instr. */
  7    71     2 mcm (0 : 7) bit (72),				/* memory controller masks every 64 K */
  7    72     2 dbr bit (72), 				/* descriptor segment base register */
  7    73     2 intrpts bit (36),				/* interrupts */
  7    74     2 bar bit (36), 				/* base address register */
  7    75     2 modereg bit (36),				/* mode register */
  7    76     2 cmodereg bit (36),				/* cache mode register */
  7    77     2 faultreg bit (36),				/* fault register */
  7    78     2 ext_fault_reg bit (15) unaligned,			/* DPS8 extended fault register */
  7    79     2 pad6 bit (21) unaligned;
  7    80     
  7    81     
  7    82 
  7    83 dcl 1 v1_dump aligned based (dumpptr),			/* Old version of FDUMP (pre March, 1981) */
  7    84     2 dump_header aligned like dump_header,
  7    85 
  7    86     2 segs (688),					/* segment array */
  7    87       3 segno bit (18) unal,				/* segment number */
  7    88       3 length bit (18) unal, 			/* length of segment in sector sized blocks */
  7    89 
  7    90     2 amsdwregs (0 : 15) bit (72),			/* assoc. mem. segment descriptor word registers */
  7    91     2 amsdwptrs (0 : 15) bit (36),			/* assoc. mem. segment descriptor word pointers */
  7    92     2 amptwregs (0 : 15) bit (36),			/* assoc. mem. page table word regs */
  7    93     2 amptwptrs (0 : 15) bit (36),			/* assoc. mem. page table word pointers */
  7    94     2 pad1 (0 : 15) bit (36),
  7    95 
  7    96     2 ouhist (0 : 15) bit (72), 			/* operations unit history registers */
  7    97     2 cuhist (0 : 15) bit (72), 			/* control unit history registers */
  7    98     2 auhist (0 : 15) bit (72), 			/* appending unit history registers */
  7    99     2 duhist (0 : 15) bit (72), 			/* decimal unit history registers */
  7   100 
  7   101     2 prs (0 : 7) ptr,				/* pointer registers */
  7   102 
  7   103     2 regs aligned like dump_registers, 		/* assorted machine registers */
  7   104 
  7   105     2 mctime fixed bin (52),				/* time conditions were taken */
  7   106     2 pad4 (0 : 5) bit (36),
  7   107 
  7   108     2 misc_registers aligned like dump_misc_registers,	/* Assorted registers */
  7   109 
  7   110     2 pad5 bit (36),
  7   111     2 ptrlen (0 : 7) bit (36),			/* pointers and lengths for EIS */
  7   112     2 pad6 (15) bit (36),
  7   113     2 low_order_port bit (3), 			/* from which clock was read */
  7   114 
  7   115     2 coreblocks (0 : 7),
  7   116       3 num_first bit (18) unal,			/* first addr in coreblock */
  7   117       3 num_blocks bit (18) unal;			/* number of blocks used */
  7   118 
  7   119 
  7   120 dcl  DUMP_VERSION_1 fixed bin internal static options (constant) init (1);
  7   121 dcl  DUMP_VERSION_2 fixed bin internal static options (constant) init (2);
  7   122 
  7   123 /* END INCLUDE FILE ... bos_dump.incl.pl1 ... */
      222 
      223 
  8     1 /*   BEGIN INCLUDE FILE ... sst.incl.pl1 ... January 1971 */
  8     2 /* Note: This include file has an ALM counterpart made with cif. Keep it up to date */
  8     3 /* Deleted paging device info and added pc segmove info, Benson Margulies 84-01-03 */
  8     4 /* Added covert channel meters, Keith Loepere 85-01-08. */
  8     5 
  8     6 dcl  sst_seg$ external;
  8     7 dcl  sstp ptr;
  8     8 
  8     9 dcl 1 sst based (sstp) aligned,
  8    10     2 space (8) fixed bin,				/* empty space to watch for bugs */
  8    11 
  8    12 /* SST HEADER */
  8    13 
  8    14     2 pre_page_time fixed bin (71),			/* total time spent pre-paging */
  8    15     2 post_purge_time fixed bin (71),			/* total time spent post-purging */
  8    16     2 post_in_core fixed bin,				/* total pages in core (and in list) at purge time */
  8    17     2 thrashing fixed bin,				/* meter of thrashing being done on system */
  8    18     2 npfs_misses fixed bin,				/* meter of times npfs was on when pre-paging */
  8    19     2 salv fixed bin,				/* flag which is ^=0 if and only if salvaging */
  8    20 
  8    21     2 ptl bit (36),					/* global page table loop lock */
  8    22     2 astl bit (36),				/* global ast allocation block lock */
  8    23     2 astl_event bit (36),				/* event used when waiting for AST lock */
  8    24     2 astl_notify_requested bit (1) aligned,		/* flag to notify AST lock */
  8    25     2 nused fixed bin,				/* number of pages on used list */
  8    26     2 ptwbase fixed bin (24),				/* absolute address of page table array */
  8    27     2 tfreep ptr,					/* pointer to first trailer on free list */
  8    28 
  8    29     2 astap ptr,					/* aste array pointer */
  8    30     2 ptl_wait_ct fixed bin,				/* pxss: number is >= # of processes waiting to ptl */
  8    31     2 astsize fixed bin,				/* size of an AST entry */
  8    32     2 cmesize fixed bin,				/* size of a CME entry */
  8    33     2 root_astep ptr,				/* pointer to the root AST entry */
  8    34 
  8    35     2 pts (0: 3) fixed bin,				/* array of page table sizes */
  8    36     2 level (0:3),					/* per-list information about ASTE's */
  8    37       3 (ausedp, no_aste) bit (18) unaligned,		/* used list and count of number of entries */
  8    38 
  8    39     2 (atempp, atempp1) bit (18) unal,			/* temp seg list pointer */
  8    40     2 dm_enabled bit (1) aligned,			/* ON => journal seg exists */
  8    41     2 (ainitp, ainitp1) bit (18) unal,			/* init seg list pointer */
  8    42     2 strsize fixed bin,				/* Trailer size in words. */
  8    43 
  8    44 /* CORE MAP HEADER */
  8    45 
  8    46     2 cmp ptr,					/* pointer to start of core map */
  8    47     2 usedp bit (18),				/* pointer to first used core block */
  8    48     2 wtct fixed bin,				/* count of pages being written */
  8    49 
  8    50     2 startp bit (18),				/* pointer to solid page for lap counting (fsdct) */
  8    51     2 removep bit (18),				/* pointer to list of pages being removed from use */
  8    52 						/* MISC */
  8    53 
  8    54     2 double_write fixed bin,				/* trigger for store through scheme */
  8    55 						/* 0 = no double writes,
  8    56*						   1 = all non-pd pages get written,
  8    57*						   2 = all directories get written */
  8    58     2 temp_w_event bit (36) aligned,			/* wait event for temp wiring lock */
  8    59     2 root_pvtx fixed bin,				/* pvtx or rpv */
  8    60     2 nolock bit (1) aligned,				/* if on, don't lock ptl on interrupts */
  8    61 
  8    62     2 fc_skips_pinned fixed bin (35),			/* number of skips over pinned page in find_core */
  8    63     2 cl_skips_pinned fixed bin (35),			/* number of skips over pinned page in claim_mod_core */
  8    64     2 ast_ht_ptr ptr,				/* AST hast table pointer */
  8    65     2 ast_ht_n_buckets fixed bin,			/* number of buckets in AST hash table */
  8    66     2 ast_ht_uid_mask bit (36) aligned,			/* mask to strip out low-order bits of uid */
  8    67     2 meter_ast_locking fixed bin,			/* non-zero enables AST lock meters */
  8    68     2 checksum_filemap fixed bin,			/* non-zero enables filemap checksumming */
  8    69 
  8    70     2 page_read_errors fixed bin,			/* read errors posted to page control */
  8    71     2 page_write_errors fixed bin,			/* write errors posted to page control */
  8    72 
  8    73     2 cycle_pv_allocation fixed bin,			/* flag to cycle VTOCE allocation among PVs */
  8    74 
  8    75     2 n_trailers fixed bin,				/* Number of trailer entries in str_seg */
  8    76     2 synch_activations fixed bin (35),			/* Activation attempts for synchronized segs */
  8    77     2 synch_skips fixed bin (35),			/* get_aste skips because not synchronized */
  8    78 
  8    79     2 lock_waits fixed bin,				/* Number of times we had to wait for a lock */
  8    80     2 total_locks_set fixed bin,			/* Total number of block locks set */
  8    81     2 pdir_page_faults fixed bin,			/* total page faults off >pdd */
  8    82     2 level_1_page_faults fixed bin,			/* total page faults in sys libes */
  8    83     2 dir_page_faults fixed bin,			/* Total page faults on directories */
  8    84     2 ring_0_page_faults fixed bin,			/* page faults in ring 0 */
  8    85     2 rqover fixed bin (35),				/* errcode for record quota overflow */
  8    86     2 pc_io_waits fixed bin,				/* Number of times pc had to wait on io */
  8    87 
  8    88 
  8    89 /*  The following (until pdmap) used to be the 'cnt' in cnt.incl.pl1 */
  8    90 
  8    91     2 steps fixed bin,				/* number of steps taken around used list */
  8    92     2 needc fixed bin,				/* number of times core page needed */
  8    93     2 ceiling fixed bin,				/* number of times ceiling hit */
  8    94     2 ctwait fixed bin,				/* number of times write counter was full */
  8    95     2 wired fixed bin,				/* number of pages wired by pc */
  8    96     2 laps fixed bin,				/* number of times around used list */
  8    97     2 skipw fixed bin,				/* number of pages skiped because they were wired */
  8    98     2 skipu fixed bin,				/* because of being used */
  8    99 
  8   100     2 skipm fixed bin,				/* because of being modified */
  8   101     2 skipos fixed bin,				/* because out of service */
  8   102     2 aused fixed bin,				/* number of AST entries on used list */
  8   103     2 damaged_ct fixed bin,				/* count of segments that system damaged */
  8   104     2 deact_count fixed bin,				/* count of deactivations */
  8   105     2 demand_deact_attempts fixed bin,			/* user requested deactivations */
  8   106     2 demand_deactivations fixed bin,			/* user instigated deactivations */
  8   107 
  8   108     2 reads (8) fixed bin,				/* number of reads for each did */
  8   109     2 writes (8) fixed bin,				/* number of writes for each did */
  8   110 
  8   111     2 short_pf_count fixed bin,			/* count of page faults on out of service pages */
  8   112     2 loop_locks fixed bin,				/* count of times locked PTL */
  8   113     2 loop_lock_time fixed bin (71),			/* time spent looping on PTL */
  8   114     2 cpu_sf_time fixed bin (71),			/* cpu time spent in seg_fault */
  8   115     2 total_sf_pf fixed bin,				/* total page faults while in seg_fault */
  8   116     2 total_sf fixed bin,				/* total number of seg_faults */
  8   117     2 pre_page_size fixed bin,			/* total pre-pagings expected */
  8   118     2 post_list_size fixed bin,
  8   119     2 post_purgings fixed bin,			/* total number of post-purgings */
  8   120     2 post_purge_calls fixed bin,			/* total number of calls to post-purge */
  8   121     2 pre_page_calls fixed bin,			/* total number of calls tp pre-page */
  8   122     2 pre_page_list_size fixed bin,
  8   123     2 pre_page_misses fixed bin,			/* total number of misses in pre-page list */
  8   124     2 pre_pagings fixed bin,				/* total number of pre-pagings */
  8   125 
  8   126 /*  TEMPORARY WIRED PROCEDURE INFO  */
  8   127 
  8   128     2 wire_proc_data (8) fixed bin (71),		/* data for wire_proc */
  8   129 
  8   130 /* MAIN MEMORY USAGE INFORMATION */
  8   131 
  8   132     2 abs_wired_count fixed bin,			/* count of abs-wired pages */
  8   133     2 system_type fixed bin,				/* ADP_SYSTEM or L68_SYSTEM */
  8   134     2 wired_copies fixed bin,				/* number of times a wired page was copied */
  8   135     2 recopies fixed bin,				/* number of times recopied because modified */
  8   136     2 first_core_block fixed bin,			/* core map index for first block of core */
  8   137     2 last_core_block fixed bin,			/* core map index for last block of core */
  8   138     2 fw_retries fixed bin (35),			/* force_write retries due to ASTE move */
  8   139     2 pvhtp ptr unaligned,				/* ptr to PV hold table for debugging */
  8   140 
  8   141 /*  AST METERS  */
  8   142 
  8   143     2 askipsize (0: 3) fixed bin,			/* array of skips because wrong AST size */
  8   144     2 aneedsize (0: 3) fixed bin,			/* array of times needed each size */
  8   145 
  8   146     2 stepsa fixed bin,				/* count of steps taken looking for an AST entry */
  8   147     2 askipsehs fixed bin,				/* count of skips because EHS was ON */
  8   148     2 asearches fixed bin,				/* count of full searches made */
  8   149     2 askipslevel fixed bin,				/* count of skips because pages were in core */
  8   150     2 askipsinit fixed bin,				/* count of times turned OFF init switch */
  8   151     2 acost fixed bin,				/* cumulative cost of deactivations */
  8   152     2 askipslock fixed bin,				/* count of skips because couldn't lock parent */
  8   153     2 askipdius fixed bin,				/* count of skips because DIUS was on */
  8   154 
  8   155     2 alaps fixed bin,				/* lap counter for AST list */
  8   156     2 updates fixed bin,				/* calls to updateb */
  8   157     2 setfaults_all fixed bin,			/* setfaults done to the entire SDW */
  8   158     2 setfaults_acc fixed bin,			/* setfaults done to the access field */
  8   159     2 total_bf fixed bin,				/* count of bound faults */
  8   160     2 total_bf_pf fixed bin,				/* page faults during bound faults */
  8   161     2 cpu_bf_time fixed bin (71),			/* cpu time spent in bound fault */
  8   162 
  8   163     2 asteps (0: 3) fixed bin,			/* per-size AST step counters */
  8   164 
  8   165     2 ast_locked_at_time fixed bin (71),		/* clock reading when ast last locked */
  8   166     2 ast_locked_total_time fixed bin (71),		/* total real time the ast lock was locked */
  8   167     2 ast_lock_wait_time fixed bin (71),		/* total real time of all waiting on ast lock */
  8   168     2 ast_locking_count fixed bin (35),			/* number of times ast was locked */
  8   169     2 cleanup_count fixed bin,			/* calls to pc$cleanup */
  8   170     2 cleanup_real_time fixed bin (71),			/* total real time in pc$cleanup */
  8   171 
  8   172 /* PRE-PAGE METERS */
  8   173 
  8   174     2 tree_count (0: 63) fixed bin,			/* counters for pre-page decisions */
  8   175 
  8   176     2 pp_meters (0: 63) fixed bin,			/* counters for measuring pre-page success */
  8   177 
  8   178 
  8   179     2 wusedp bit (18) aligned,			/* Relative cmep to next cme for writing */
  8   180     2 write_hunts fixed bin,				/* Times claim_mod_core invoked */
  8   181     2 claim_skip_cme fixed bin,			/* Times unacceptable cme found by c_m_c */
  8   182     2 claim_skip_free fixed bin,			/* Times free cme passed by c_m_c */
  8   183     2 claim_notmod fixed bin,				/* Times c_m_c passed pure page */
  8   184     2 claim_passed_used fixed bin,			/* Times used page seen */
  8   185     2 claim_skip_ptw fixed bin,			/* Times c_m_c saw unacceptable ptw */
  8   186     2 claim_writes fixed bin,				/* Writes queued by c_m_c */
  8   187     2 claim_steps fixed bin,				/* Steps passed in core claiming */
  8   188     2 pre_seeks_failed fixed bin,			/* counter of times quick find_core_ failed */
  8   189     2 resurrections fixed bin,			/* nulled addresses reinstated */
  8   190     2 volmap_seg_page_faults fixed bin (35),		/* Pseudo-page faults on volmap_seg */
  8   191     2 oopv fixed bin,				/* out-of-physical-volume page faults */
  8   192     2 dblw_resurrections fixed bin,			/* addresses resurrected by double-writing */
  8   193     2 sgm_time fixed bin (71),			/* Time (VCPU) in seg mover */
  8   194     2 sgm_pf fixed bin,				/* Page faults in seg moving */
  8   195     2 bad_sgms fixed bin,				/* Seg moves that failed */
  8   196     2 sgm_sgft fixed bin,				/* Seg faults in seg moves */
  8   197     2 good_sgms fixed bin,				/* Seg moves that completed */
  8   198     2 claim_runs fixed bin,				/* Times claim_mod_core had to run */
  8   199     2 activations fixed bin,				/* total count of activations */
  8   200     2 dir_activations fixed bin,			/* count of directory activations */
  8   201     2 hedge_updatevs fixed bin,			/* call-in updatevs */
  8   202     2 hedge_writes fixed bin,				/* call in core flush writes */
  8   203     2 evict_recover_data,				/* see evict_page.alm */
  8   204      3 evict_ptp bit (18) unal,			/* ptp of page being moved */
  8   205      3 evict_phmbit bit (18) unal,			/* N/Z if page was mod */
  8   206 
  8   207 /* Data for metering force_write facility 08/19/78 */
  8   208 
  8   209     2 force_swrites fixed bin,			/* Calls on segments to force write */
  8   210     2 force_pwrites fixed bin,			/* Mod pages so written */
  8   211     2 fw_none fixed bin,				/* Force write wrote none */
  8   212     2 force_updatevs fixed bin,			/* Updatev's so forced */
  8   213 
  8   214     2 pf_unlock_ptl_time fixed bin (71),		/* Time unlocking ptln page faults */
  8   215     2 pf_unlock_ptl_meterings fixed bin,
  8   216 
  8   217     2 makeknown_activations fixed bin (35),		/* activations at makeknown time */
  8   218     2 backup_activations fixed bin (35),		/* activations for backup */
  8   219     2 metering_flags aligned,				/* small chunks of misc. information */
  8   220       3 activate_activated bit (1) unal,		/* ON => last call to activate entry actually activated something */
  8   221       3 pad bit (35) unal,
  8   222     2 seg_fault_calls fixed bin (35),			/* number calls to seg_fault for explicit activation */
  8   223 
  8   224 /* METERS FOR STACK TRUNCATION */
  8   225 
  8   226     2 (stk_truncate_should_didnt,			/* counts */
  8   227        stk_truncate_should_did,
  8   228        stk_truncate_shouldnt_didnt,
  8   229        stk_truncate_shouldnt_did) fixed bin (35),
  8   230     2 stk_pages_truncated fixed bin (35),
  8   231     2 stk_pages_truncated_in_core fixed bin (35),
  8   232 
  8   233 /* SUPPORT FOR PC SEGMOVES */
  8   234 
  8   235     2 segmove_lock aligned,
  8   236       3 pid bit (36) aligned,
  8   237       3 event bit (36) aligned,
  8   238       3 notify bit (1) aligned,
  8   239     2 segmove_io_limit fixed bin, /* max read aheads */
  8   240     2 segmove_found_synch fixed bin (35), /* cme.synch_held */
  8   241     2 segmove_synch_disappeared fixed bin (35), /* page$check_synch fixed */
  8   242     2 segmove_n_reads fixed bin (35), /* total IO's queued. */
  8   243     2 segmove_max_tries fixed bin (35), /* max times through the read loop */
  8   244 
  8   245     2 segmove_astep ptr unal,				/* if non-null, addresses to be rescued from old_addr_astep */
  8   246     2 segmove_pvtx fixed bin,				/* if segmove_astep nonnull, valid */
  8   247     2 segmove_vtocx fixed bin,			/* ditto */
  8   248     2 segmove_old_addr_astep ptr unaligned,		/* ditto */
  8   249     2 segmove_new_addr_astep ptr unaligned,		/* if non-null, the addresses must be deposited. */
  8   250 
  8   251     2 mod_during_write fixed bin,			/* times a page was modified while it was being written */
  8   252     2 zero_pages fixed bin,				/* count of pages truncated because all zero */
  8   253     2 trace_sw aligned,				/* tracing control flags */
  8   254       3 pad_trace bit (32) unaligned,
  8   255       3 pc_trace_pf bit (1) unaligned,			/* tracing for page faults, done, etc. */
  8   256       3 tty_trace bit (1) unaligned,
  8   257       3 pc_trace bit (1) unaligned,			/* flag used by page control primitives */
  8   258       3 sc_trace bit (1) unaligned,			/* flag used by segment control primitives */
  8   259     2 new_pages fixed bin,				/* newly created pages */
  8   260     2 ast_track bit (1) aligned,			/* "1"b => keep SST name table */
  8   261     2 dirlock_writebehind fixed bin,			/* =1 to flush modified dir pages in lock$unlock */
  8   262     2 write_limit fixed bin,				/* Max # of outstanding writes by page control */
  8   263     2 crash_test_segmove bit (1) aligned,		/* crash in mid-segmove */
  8   264     2 delayed_seg_state_chg fixed bin (35),		/* count of times a process was delayed in affecting a seg state */
  8   265     2 audit_seg_state_chg fixed bin (35),		/* count of times a process was audited for excessive seg state changes */
  8   266     2 seg_state_chg_delay fixed bin (52),		/* total times processes were delayed for covert channels */
  8   267     2 seg_state_change_limit fixed bin,			/* number of events over which we determine covert channel bandwidth */
  8   268     2 max_seg_state_change_bw fixed bin,		/* maximum bps for covert channel before we delay */
  8   269     2 audit_seg_state_change_bw fixed bin,		/* maximum bps for covert channel before we audit */
  8   270     2 seg_state_chg_operation bit (36) aligned,		/* access_operation_ value for excessive_seg_state_chg */
  8   271     2 pad4 (126) bit (36) aligned;			/* padding to 512 words (1000)8 */
  8   272 
  8   273 /* END INCLUDE FILE sst.incl.pl1 */
      224 
      225 
      226 /* Initialization */
      227 
      228 	procname = "online_dump";
      229 	prt = addr (wants_seg (0));
      230 	prt -> ws16x72 = zilch;
      231 	fnp_only = "0"b;
      232 	go to get_erfno;
      233 
      234 online_dump_355: od_355: entry;
      235 	procname = "online_dump_355";
      236 	fnp_only = "1"b;
      237 	fnp_index = 1;				/* assume doing all starting with first */
      238 	tag = "a";
      239 	all_fnps = "1"b;
      240 
      241 get_erfno: call cu_$arg_ptr (1, argp, argl, code);	/* Get mandatory first arg */
      242 	if code ^= 0
      243 	then do;
      244 	     call com_err_ (code, procname, "ERF #");
      245 	     return;
      246 	end;
      247 
      248 	if ^fnp_only then erf_no = arg;		/* Copy arg */
      249 	else erf_no = arg || ".355";
      250 	call get_dump_ptrs_ (erf_no, ptr_array, len_array, j, name); /* Get pointers to image segments */
      251 	if j = 0
      252 	then do;
      253 	     call com_err_ (0, procname, "no pointers returned for arg ""^a""", erf_no);
      254 	     return;
      255 	end;
      256 
      257 	ptr_array (j) = null;			/* For terminate loop */
      258 	dumpptr = ptr_array (0);			/* Copy pointer for header access */
      259 	call hcs_$get_max_length_seg (dumpptr, wps, code);
      260 	if code ^= 0 then do;
      261 	     call com_err_ (code, procname, "unable to get max length of ^a", name);
      262 	     return;
      263 	end;
      264 						/* NEW STUFF */
      265 
      266 get_args:
      267 	argno = 1;
      268 
      269 next_arg:
      270 	argno = argno + 1;
      271 	call cu_$arg_ptr (argno, argp, argl, code);	/* any more args */
      272 	if code ^= 0 | argl = 0 then do;		/* if not, then leave */
      273 	     if fnp_only then go to no_more_segs;	/* nothing more to do before attach call */
      274 	     else go to no_more_args;
      275 	end;
      276 
      277 	if arg = "-dim" then do;			/* next arg is name of dim */
      278 	     argno = argno + 1;
      279 	     call cu_$arg_ptr (argno, argp, argl, code);
      280 	     if code ^= 0 | argl = 0 then do;
      281 		seg_id = "dim";
      282 		go to call_com;
      283 	     end;
      284 	     iotype = arg;
      285 	end;
      286 
      287 	else if arg = "-dev" then do;			/* next arg is name of device or stream */
      288 	     argno = argno + 1;
      289 	     call cu_$arg_ptr (argno, argp, argl, code);
      290 	     if code ^= 0 | argl = 0 then do;
      291 		seg_id = "device";
      292 		go to call_com;
      293 	     end;
      294 	     ioname2 = arg;
      295 	end;
      296 
      297 	else if arg = "-restart" & ^fnp_only then do;	/* if we are restarting */
      298 	     restartsw = "1"b;			/* note it so no segs will be dumped */
      299 	     argno = argno + 1;
      300 	     call cu_$arg_ptr (argno, argp, argl, code);
      301 	     if code ^= 0 | argl = 0 then do;
      302 		seg_id = "restart process_number";
      303 		go to call_com;
      304 	     end;
      305 	     rt_proc_no = cv_oct_check_ (arg, i);	/* except those following the seg with this proc_no */
      306 	     if i ^= 0 then do;
      307 		seg_id = "restart process_no is not octal";
      308 		go to call_com_oct;
      309 	     end;
      310 	     argno = argno + 1;
      311 	     call cu_$arg_ptr (argno, argp, argl, code);
      312 	     if code ^= 0 | argl = 0 then do;
      313 		seg_id = "restart segment number";
      314 		go to call_com;
      315 	     end;
      316 	     rt_seg_no = cv_oct_check_ (arg, i);	/* AND this seg_no */
      317 	     if i ^= 0 then do;
      318 		seg_id = "restart segment_no is not octal";
      319 		go to call_com_oct;
      320 	     end;
      321 	end;
      322 
      323 	else if arg = "-segs" & ^fnp_only then do;
      324 	     segselsw = "1"b;			/* later we will pick up selected segs */
      325 	end;
      326 
      327 	else if arg = "-tag" & fnp_only then do;
      328 	     argno = argno + 1;
      329 	     call cu_$arg_ptr (argno, argp, argl, code);
      330 	     if code ^= 0 | argl = 0 then do;
      331 		seg_id = "tag";
      332 		go to call_com;
      333 	     end;
      334 
      335 	     tag = arg;
      336 	     all_fnps = "0"b;			/* not doing all now */
      337 	     fnp_index = index ("abcdefgh", tag);	/* convert to number */
      338 	     if fnp_index = 0 then do;		/* not legal tag */
      339 		seg_id = "invalid tag";
      340 		go to call_com_oct;
      341 	     end;
      342 
      343 	     dumpptr = addrel (dumpptr, fnp_size* (fnp_index-1)); /* point to relevant core image */
      344 	end;
      345 
      346 	else do;
      347 	     seg_id = arg;
      348 	     code = error_table_$badopt;
      349 	     go to call_com;
      350 	end;
      351 
      352 	go to next_arg;
      353 
      354 call_com:
      355 	call com_err_ (code, procname, "^a", seg_id);
      356 	return;
      357 call_com_oct:
      358 	call com_err_ (0, procname, "^a:  ^a", seg_id, arg);
      359 	return;
      360 
      361 no_more_args:
      362 						/* Extract various system segment numbers, and copy per-system data bases */
      363 	if slt_seg = null
      364 	then do;
      365 	     call hcs_$make_seg (c0, "od.slt--", c0, seg_mode, slt_seg, code);
      366 	     call hcs_$make_seg (c0, "od.nam--", c0, seg_mode, nam_seg, code);
      367 	     call hcs_$make_seg (c0, "od.sst--", c0, seg_mode, sst_seg, code);
      368 	     call hcs_$make_seg (c0, "od.sstnt", c0, seg_mode, sstnt_seg, code);
      369 	     call hcs_$make_seg (c0, "od.dseg-", c0, seg_mode, ds_seg, code);
      370 	     call hcs_$make_seg (c0, "od.pds--", c0, seg_mode, pds_seg, code);
      371 	     call hcs_$make_seg (c0, "od.prds-", c0, seg_mode, prds_seg, code);
      372 	     call hcs_$make_seg (c0, "od.shut-", c0, seg_mode, shut_seg, code);
      373 	     call hcs_$make_seg (c0, "od.stk--", c0, seg_mode, stk_seg, code);
      374 						/* Following calls temporarily commented out:
      375*						   call hcs_$make_seg(c0, "od.pdf--", c0, seg_mode, pdf_seg, code);
      376*						   /* Need more temporary segments?  Add above this line */
      377 	end;
      378 	cur_proc_index = 1;				/* For copy_dump_seg_ */
      379 	namp, dsp, sstnp, sstp = null;		/* Just in case */
      380 	slt_seg_no = 7;
      381 
      382 	call copy_dump_seg_ (7, cur_proc_index, ptr_array, len_array, slt_seg, sltlen);
      383 	if sltlen = 0
      384 	then do;
      385 	     call ioa_ ("Can't find ""^a""", "slt");
      386 NOT_SLT:	     sltp = null;
      387 	     sst_seg_no = 10;			/* Subject to change */
      388 	     go to copy_sst;
      389 	end;
      390 
      391 	else do;					/* Pick out all interesting segment #-s */
      392 	     sltp = slt_seg;
      393 	     nam_seg_no = bin (baseno (sltp -> based_ptr), 18);
      394 	     call copy_dump_seg_ (nam_seg_no, cur_proc_index, ptr_array, len_array, nam_seg, namlen);
      395 	     if namlen ^= 0 then namp = nam_seg;
      396 	     else do;				/* well at best the SLT is useless... */
      397 		call ioa_ ("Cannot find name_table for slt");
      398 		go to NOT_SLT;
      399 	     end;
      400 
      401 	     call ring0_get_$segptr_given_slt ("", "slt", prt, code, sltp, namp); /* remember we guessed slt_seg_no = 7 */
      402 	     if bin (baseno (prt), 18) ^= 7 then do;	/* alleged SLT not able to figure its own number! */
      403 		call ioa_ ("Segments 7 and ^o not functioning as slt and name_table", nam_seg_no);
      404 		namp = null;
      405 		go to NOT_SLT;
      406 	     end;
      407 
      408 	     call ring0_get_$segptr_given_slt ("", "sst", prt, code, sltp, namp);
      409 	     if code = 0 then do;
      410 		sst_seg_no = bin (baseno (prt), 18);
      411 	     end;
      412 	     else do;
      413 		sst_seg_no = 9;
      414 	     end;
      415 	     call ring0_get_$segptr_given_slt ("", "sst_names_", prt, code, sltp, namp);
      416 	     sstnt_seg_no = bin (baseno (prt), 18);
      417 	     call ring0_get_$segptr_given_slt ("", "pds", prt, code, sltp, namp);
      418 	     pds_seg_no = bin (baseno (prt), 18);
      419 	     call ring0_get_$segptr_given_slt ("", "prds", prt, code, sltp, namp);
      420 	     prds_seg_no = bin (baseno (prt), 18);
      421 
      422 copy_sst:						/* Copying of SST must be the last in this sequence */
      423 	     call copy_dump_seg_ (sst_seg_no, cur_proc_index, ptr_array, len_array, sst_seg, sstlen);
      424 	     if sstlen = 0
      425 	     then do;
      426 		call ioa_ ("Can't find ""^a""", "sst");
      427 		sstp = null;
      428 	     end;
      429 	     else do;
      430 		sstp = sst_seg;
      431 		sst_abs_loc = sstp -> sst.ptwbase;
      432 		sst_high_loc = sst_abs_loc + sstlen ;
      433 		ast_off = - (sstp -> sst.astsize);
      434 	     end;
      435 						/* Copy the SST name table */
      436 
      437 	     call copy_dump_seg_ (sstnt_seg_no, cur_proc_index, ptr_array, len_array, sstnt_seg, sstntlen);
      438 	     if sstntlen = 0 then do;
      439 		call ioa_ ("Cannot find SST name table.");
      440 		sstnp = null;
      441 	     end;
      442 	     else do;
      443 		sstnp = sstnt_seg;
      444 		if ^sstnp -> sstnt.valid then do;
      445 		     call ioa_ ("SST name  table not filled in.");
      446 		     sstnp = null;
      447 		end;
      448 	     end;
      449 	end;
      450 	if segselsw then do;			/* now we pick up selected segnames or numbers */
      451 	     call ask_$ask_clr;			/* clear ask's internal line buffer */
      452 get_next_seg:
      453 	     call ask_ (c0, seg_id);			/* pick up specification of a seg */
      454 	     if seg_id = "quit" then go to no_more_segs;	/* no more  wanted */
      455 	     if seg_id = "regs" then do;
      456 		wants_regs = "1"b;
      457 		go to get_next_seg;
      458 	     end;
      459 	     seg_no = cv_oct_check_ (seg_id, i);	/* try it as octal segno */
      460 	     if i = 0 then wants_seg (seg_no) = "1"b;	/* it is octal and we mark it wanted */
      461 	     else if sltp ^= null then do;		/* not octal, see if its a name in SLT, if any */
      462 		call ring0_get_$segptr_given_slt ("", (seg_id), prt, code, sltp, namp);
      463 		if code = 0 then do;		/* it was found in SLT */
      464 		     seg_no = bin (baseno (prt), 18);
      465 		     wants_seg (seg_no) = "1"b;	/* and we mark it's segno as wanted */
      466 		end;
      467 		else do;				/* not in SLT,wasn't octal=> it loses */
      468 		     call ioa_ ("Cannot find segment ^a in slt", seg_id); /* name or slt is nonsense */
      469 		end;
      470 	     end;
      471 	     go to get_next_seg;			/* see if there are more */
      472 	end;
      473 no_more_segs:
      474 	call ioa_ ("Segment ""^a"", device ""^a"", module ""^a""", /* Print current attachment info etc */
      475 	     name, ioname2, iotype);
      476 	call ios_$attach (ioname, iotype, ioname2, "w", b72); /* Attach printer or other device */
      477 	tmp = addr (b72);				/* Pro _t_e_m_pore */
      478 	if tmp -> io_status.code ^= 0
      479 	then do;
      480 	     call com_err_ (tmp -> io_status.code, procname,
      481 		"attach call, sub-status ^w, contact programming staff", tmp -> io_status.substatus);
      482 	     return;
      483 	end;
      484 	call od_print_$op_init (bin (dumpptr -> dump.erfno, 17), dumpptr -> dump.time); /* Initialize print program */
      485 	call od_print_ (m1, fmthdr, "Start", erf_no);	/* Print header */
      486 	tmp = addr (temp);				/* For short lines, boundary conditions, etc */
      487 	eightp = addr (fmteight);			/* For page-table printout */
      488 	if restartsw then call ioa_ ("Continue dumping ^a", erf_no);
      489 	else
      490 	call ioa_ ("Begin dumping ^a", erf_no);		/* Send message to console */
      491 	if fnp_only then do while ("1"b);
      492 	     call od_print_$op_finish;
      493 	     call online_355_dump_ (dumpptr, fnp_index);
      494 	     if all_fnps & fnp_index < max_fnps then do;	/* more fnp dumps to process */
      495 		fnp_index = fnp_index + 1;
      496 		dumpptr = addrel (dumpptr, fnp_size);	/* point to next core image */
      497 	     end;
      498 
      499 	     else go to tm_loop;
      500 	end;
      501 
      502 /* Print register contents */
      503 
      504 	prt = addr (dumpptr -> dump.dbr);
      505 	dsbr_stk_no = bin (prt -> dsbr.stack, 12) * 8;
      506 	if (restartsw | (segselsw & ^wants_regs)) then go to skip_regs;
      507 
      508 	call od_print_ (two, fmtdbrh);		/* descriptor base register */
      509 	call od_print_ (three, fmtdbr,
      510 	     prt -> dsbr.add, prt -> dsbr.bound, prt -> dsbr.unpaged, prt -> dsbr.stack);
      511 
      512 
      513 	call od_print_ (four, fmtpprh);		/* proceedure pointer register */
      514 	scup = addr (dumpptr -> dump.scu (0));
      515 	call od_print_ (one, fmtppr,
      516 	     scup -> scu.ppr.prr, scup -> scu.ppr.psr, scup -> scu.ilc);
      517 
      518 
      519 	call od_print_ (two, fmtrar, dumpptr -> dump.regs.ralr);
      520 	call od_print_ (two, fmtind, scup -> scu.ir);
      521 	call od_print_ (one, fmta, dumpptr -> dump.regs.a);
      522 	call od_print_ (one, fmtq, dumpptr -> dump.regs.q);
      523 	call od_print_ (one, fmte, dumpptr -> dump.regs.e);
      524 	call od_print_ (two, fmtt, dumpptr -> dump.regs.t);
      525 
      526 	call od_print_ (two, fmtbar, dumpptr -> dump.bar);
      527 
      528 
      529 	prt = addr (dumpptr -> dump.regs.x (0));
      530 	do j = 0 by 1 while (j < 8);			/* index registers */
      531 	     call od_print_ (one, fmtx, j, prt -> xreg (j));
      532 	end;
      533 
      534 
      535 	call od_print_ (two, fmtmode, dumpptr -> dump.modereg, dumpptr -> dump.cmodereg);
      536 	call od_print_ (one, fmtflt, dumpptr -> dump.faultreg);
      537 
      538 
      539 	call od_print_ (two, fmtinter, dumpptr -> dump.intrpts); /* interrupts */
      540 
      541 
      542 	call od_print_ (four, fmtprh);		/* pointer registers */
      543 	do j = 0 by 1 while (j < 8);
      544 	     prt = addr (dumpptr -> dump.prs (j));
      545 	     call od_print_ (one, fmtpr,
      546 		substr ("APABBPBBLPLBSPSB", j*2+1, 2),
      547 		j,
      548 		bin (prt -> its.ringno, 3),
      549 		bin (prt -> its.segno, 15),
      550 		bin (prt -> its.offset, 18),
      551 		bin (prt -> its.bit_offset, 6));
      552 	end;
      553 
      554 	call od_print_$op_new_page;
      555 
      556 	call od_print_ (five, fmtamsdwh);		/* assoc. mem. segment descriptor words */
      557 
      558 	do j = 0 by 1 while (j < 16);
      559 	     amrp = addr (dumpptr -> dump.amsdwregs (j));
      560 	     ampp = addr (dumpptr -> dump.amsdwptrs (j));
      561 
      562 	     axstring = "REWPUG  ";			/* check some bits */
      563 	     axbitsp = addr (amrp -> amsdwreg.read);
      564 	     do l = 1 to 6;
      565 		if axbitsp -> axbits (l) = "0"b then substr (axstring, l, 1) = " ";
      566 	     end;
      567 
      568 	     call od_print_ (one, fmtamsdw,
      569 		bin (amrp -> amsdwreg.addr, 24),
      570 		bin (amrp -> amsdwreg.r1, 3),
      571 		bin (amrp -> amsdwreg.r2, 3),
      572 		bin (amrp -> amsdwreg.r3, 3),
      573 		bin (amrp -> amsdwreg.bound, 14),
      574 		axstring,
      575 		bin (amrp -> amsdwreg.cl, 14),
      576 		bin (ampp -> amsdwptr.pointer, 15),
      577 		substr ("EF", bin (ampp -> amsdwptr.valid, 1)+1, 1),
      578 		bin (ampp -> amsdwptr.usage, 4));
      579 	end;
      580 
      581 
      582 	call od_print_ (five, fmtamptwh);		/* assoc. mem. page table words */
      583 	do j = 0 by 1 while (j < 16);
      584 
      585 	     amrp = addr (dumpptr -> dump.amptwregs (j));
      586 	     ampp = addr (dumpptr -> dump.amptwptrs (j));
      587 
      588 	     if amrp -> amptwreg.modif then twochar = "  "; else twochar = "NO";
      589 	     if ampp -> amptwptr.valid then onechar = "F"; else onechar = "E";
      590 
      591 	     call od_print_ (one, fmtamptw,
      592 		bin (amrp -> amptwreg.addr, 18),
      593 		twochar,
      594 		bin (ampp -> amptwptr.pointer, 15),
      595 		bin (ampp -> amptwptr.pageno, 12),
      596 		onechar,
      597 		bin (ampp -> amptwptr.usage, 4));
      598 	end;
      599 
      600 	call od_print_$op_new_page;
      601 
      602 	call od_print_ (four, fmtcbh);		/* coreblocks */
      603 	do j = 0 by 1 while (j < 8);
      604 	     prt = addr (dumpptr -> dump.coreblocks (j).num_first);
      605 	     if prt -> sgl.zero = -1 then call od_print_ (one, fmtcbno);
      606 	     else do;
      607 		n_first = bin (dumpptr -> dump.coreblocks (j).num_first, 18);
      608 		n_blocks = bin (dumpptr -> dump.coreblocks (j).num_blocks, 18);
      609 		call od_print_ (one, "^-^-^- ^6o ^4o", n_first, n_blocks);
      610 	     end;
      611 	end;
      612 
      613 	call od_print_ (four, fmtmcmh);		/* memory controller masks */
      614 	do j = 0 by 4 while (j< 8);
      615 	     prt = addr (dumpptr -> dump.mcm (j));
      616 	     call od_print_ (1, fmtmcm,
      617 		2*j,
      618 		prt -> sgl.zero, prt -> sgl.one, prt -> sgl.two, prt -> sgl.three,
      619 		prt -> sgl.four, prt -> sgl.five, prt -> sgl.six, prt -> sgl.seven);
      620 	end;
      621 
      622 	call od_print_ (four, fmthrh);
      623 	call od_print_ (two, "^/^-OU");
      624 	do j = 0 by 4 while (j < 16);
      625 	     prt = addr (dumpptr -> dump.ouhist (j));	/* operations unit history regs */
      626 	     call od_print_ (one, fmtmcm,
      627 		2*j,
      628 		prt -> sgl.zero, prt -> sgl.one, prt -> sgl.two, prt -> sgl.three,
      629 		prt -> sgl.four, prt -> sgl.five, prt -> sgl.six, prt -> sgl.seven);
      630 	end;
      631 
      632 	call od_print_ (two, "^/^-CU");
      633 	do j = 0 by 4 while (j < 16);
      634 	     prt = addr (dumpptr -> dump.cuhist (j));	/* control unit history registers */
      635 	     call od_print_ (one, fmtmcm,
      636 		2*j,
      637 		prt -> sgl.zero, prt -> sgl.one, prt -> sgl.two, prt -> sgl.three,
      638 		prt -> sgl.four, prt -> sgl.five, prt -> sgl.six, prt -> sgl.seven);
      639 	end;
      640 
      641 	call od_print_ (two, "^/^-AU");
      642 	do j = 0 by 4 while (j < 16);
      643 	     prt = addr (dumpptr -> dump.auhist (j));	/* appending unit history registers */
      644 	     call od_print_ (one, fmtmcm,
      645 		2*j,
      646 		prt -> sgl.zero, prt -> sgl.one, prt -> sgl.two, prt -> sgl.three,
      647 		prt -> sgl.four, prt -> sgl.five, prt -> sgl.six, prt -> sgl.seven);
      648 	end;
      649 
      650 	call od_print_ (two, "^/^-DU");
      651 	do j = 0 by 4 while (j < 16);
      652 	     prt = addr (dumpptr -> dump.duhist (j));	/* decimal unit history registers */
      653 	     call od_print_ (one, fmtmcm,
      654 		2*j,
      655 		prt -> sgl.zero, prt -> sgl.one, prt -> sgl.two, prt -> sgl.three,
      656 		prt -> sgl.four, prt -> sgl.five, prt -> sgl.six, prt -> sgl.seven);
      657 	end;
      658 
      659 /* Now dump individual segments/processes */
      660 
      661 skip_regs:
      662 	nsegs = dumpptr -> dump.num_segs;		/* Copy for quicker reference */
      663 	cur_proc_no = 0;
      664 	do i = 1 to nsegs;
      665 	     cur_seg_no = bin (dumpptr -> dump.segs (i).segno, 18);
      666 	     if i > 1 then cur_orig = bin (dumpptr -> dump.segs (i-1).length, 18) * 64 + cur_orig ;
      667 	     else cur_orig = size (dump);
      668 	     given_length = bin (dumpptr -> dump.segs (i).length, 18) * 64;
      669 	     call od_print_$op_new_seg (cur_seg_no);
      670 	     if cur_seg_no = ds_seg_no then cur_proc_no = cur_proc_no + 1;
      671 	     if cur_seg_no = rt_seg_no then if cur_proc_no = rt_proc_no then restartsw = "0"b;
      672 	     if restartsw then if cur_seg_no ^= ds_seg_no then go to next_seg;
      673 	     if cur_seg_no = ds_seg_no & (^restartsw | cur_proc_no = rt_proc_no) /* Is it a new descriptor seg */
      674 	     then do;
      675 		cur_proc_index = i;			/* Yes, remember position for info for new process */
      676 		prdsp, pdsp = null;
      677 		if sltp ^= null then if namp ^= null	/* If we know where KST, PDS,PRDS are, copy them */
      678 		     then do;
      679 			call copy_dump_seg_ (pds_seg_no, cur_proc_index, ptr_array, len_array, pds_seg, pdslen);
      680 			if pdslen ^= 0 then pdsp = pds_seg;
      681 			call copy_dump_seg_ (prds_seg_no, cur_proc_index, ptr_array, len_array, prds_seg, prdslen);
      682 			if prdslen ^= 0 then prdsp = prds_seg;
      683 		     end;
      684 		call copy_dump_seg_ (cur_seg_no, cur_proc_index, ptr_array, len_array, ds_seg, dslen);
      685 						/* Copy descriptor segment for this process */
      686 		if dslen = 0
      687 		then dsp, sdwp = null;
      688 		else do;
      689 		     dsp = ds_seg;
      690 		     if (restartsw | (segselsw & ^wants_seg (ds_seg_no))) then go to next_seg;
      691 		     else do;
      692 			eq_print = 0;
      693 			call od_print_ (four, "^/^/^4-DESCRIPTOR SEGMENT^/");
      694 			call od_print_ (two, fmtdesc);
      695 			half_gl = divide (given_length, 2, 17, 0);
      696 			do j = 0 by 1 while (j ^= half_gl); /* Print symbolic breakout of descriptors */
      697 			     if dsp -> dbl_array (j) = 0 /* Don't print null SDW */
      698 			     then eq_print = eq_print + 1; /* merely note it for blank line later */
      699 			     else do;
      700 				if eq_print ^= 0
      701 				then call od_print_ (one, c0); /* Print blank line */
      702 				if sltp = null then go to CALL_PDSN_1;
      703 				if sltp -> slt.last_sup_seg >= j then do;
      704 				     call print_dump_seg_name_$hard (j, dsp -> dbl_array (j), sltp, namp);
      705 				end;
      706 				else do;
      707 CALL_PDSN_1:			     call print_dump_seg_name_ (j, dsp -> dbl_array (j), sstp, sstnp);
      708 				end;
      709 				eq_print = 0;	/* Reset counter */
      710 			     end;
      711 			end;
      712 		     end;
      713 		end;
      714 		call od_print_$op_new_page;		/* After descriptor breakout, new page for segment */
      715 	     end;
      716 
      717 	     if segselsw then if ^wants_seg (cur_seg_no) then go to next_seg;
      718 	     abs_loc = -wps;			/* Generate large negative number */
      719 	     jbdry = -1;				/* Such that comparison below will never succeed */
      720 	     if dsp ^= null
      721 	     then do;
      722 		sdwp = addr (dsp -> dbl_array (cur_seg_no));
      723 		call od_print_ (two, fmtdesc);
      724 		if sltp = null then go to CALL_PDSN_2;
      725 		if sltp -> slt.last_sup_seg >= cur_seg_no
      726 		then call print_dump_seg_name_$hard (cur_seg_no, dsp -> dbl_array (cur_seg_no), sltp, namp);
      727 		else do;
      728 CALL_PDSN_2:	     call print_dump_seg_name_ (cur_seg_no, dsp -> dbl_array (cur_seg_no), sstp, sstnp);
      729 		end;
      730 		if sdwp -> sdw.add
      731 		then if sdwp -> sdw.unpaged = "0"b
      732 		     then do;
      733 			if sstp ^= null		/* Get AST entry and page table */
      734 			then do;
      735 			     j = bin (sdwp -> sdw.add, 24);
      736 			     if j > sst_high_loc	/* Check for address beyond end of SST */
      737 			     then go to use_abs;
      738 			     jbdry = 0;		/* Where absolute location is next computed */
      739 			     page_no = 0;		/* for indexing into page table */
      740 			     ptp = addrel (sstp, j - sst_abs_loc);
      741 			     prt = ptp;
      742 			     astep = addrel (ptp, ast_off);
      743 
      744 			     j1 = bin (sdwp -> sdw.bound, 14) + 1; /* Extract bounds field */
      745 			     j2 = divide (j1 + 63, 64, 17, 0);
      746 			     j1 = divide (j2, 8, 17, 0);
      747 			     j2 = j2 - j1 * 8;
      748 
      749 			     call od_print_ (four, fmtast,
      750 				astep -> sgl.zero, astep -> sgl.one, astep -> sgl.two, astep -> sgl.three,
      751 				astep -> sgl.four, astep -> sgl.five, astep -> sgl.six, astep -> sgl.seven);
      752 			     do j = 0 by 8 while (j < j1); /* Print full lines */
      753 				call od_print_ (one, fmteight, j,
      754 				     prt -> sgl.zero, prt -> sgl.one, prt -> sgl.two, prt -> sgl.three,
      755 				     prt -> sgl.four, prt -> sgl.five, prt -> sgl.six, prt -> sgl.seven);
      756 				prt = addrel (prt, 8);
      757 			     end;
      758 			     if j2 ^= 0
      759 			     then do;
      760 				l = j2 * 4 + 5;	/* # of characters to use */
      761 				call od_print_ (one, eightp -> bl, j,
      762 				     prt -> sgl.zero, prt -> sgl.one, prt -> sgl.two, prt -> sgl.three,
      763 				     prt -> sgl.four, prt -> sgl.five, prt -> sgl.six);
      764 			     end;
      765 			end;
      766 		     end;
      767 		     else				/* ! */
      768 use_abs:		     abs_loc = bin (sdwp -> sdw.add, 24);
      769 		call od_print_ (one, c0);		/* Separate contents from header by blank line */
      770 	     end;
      771 	     if given_length <= 0
      772 	     then do;
      773 		call od_print_ (one, fmtlth, given_length);
      774 		go to next_seg;
      775 	     end;
      776 
      777 /* All preliminary work done, start to dump seg */
      778 /* Note: given_length is in words */
      779 
      780 	     prt = null;
      781 	     if cur_seg_no ^= 0 then do;
      782 		if (cur_seg_no = pds_seg_no & pdsp ^= null) then prt = pdsp;
      783 		else if (cur_seg_no = prds_seg_no & prdsp ^= null) then prt = prdsp;
      784 		else if (cur_seg_no >= dsbr_stk_no & dsbr_stk_no ^= 0 & cur_seg_no - dsbr_stk_no < 8) then do;
      785 		     call copy_dump_seg_ (cur_seg_no, cur_proc_index, ptr_array, len_array, stk_seg, stklen);
      786 		     if stklen ^= 0 then prt = stk_seg;
      787 		end;
      788 	     end;
      789 	     if prt = null then go to NOT_STACK;
      790 	     call od_stack_ (prt, given_length, sltp, namp, sstp, sstnp);
      791 	     go to next_seg;			/* this one is done */
      792 NOT_STACK:
      793 	     j1 = given_length;			/*  num lines in seg as dumped by bos, which dumps 64 wd blocks */
      794 	     if sdwp -> sdw.unpaged then do;
      795 		j2 = (bin (sdwp -> sdw.bound, 14) + 1) * 16; /* unpaged segs' lengths not necess multiple of 64 really */
      796 		if j2 < j1 then j1 = j2;		/* so we use the bounds field which gives num of 16 wd units */
      797 	     end;
      798 
      799 	     ptr_index = divide (cur_orig, wps, 17, 0);
      800 	     seg_index = mod (cur_orig, wps);
      801 	     cur = addrel (ptr_array (ptr_index), seg_index);
      802 
      803 	     eq_print = 0;				/* No suppressed lines */
      804 
      805 /* Note re-entry to loop at "compare": if Version II PL/I makes noises, change to "do while", etc */
      806 
      807 	     do j = 0 by 8 while (j < j1);		/* print all full lines */
      808 
      809 		wpsmsi = wps - seg_index;		/* Calculate # of words remaining in current image seg */
      810 
      811 		if wpsmsi >= 8			/* 8 or more, print directly */
      812 		then do;
      813 retry_8:
      814 		     prt = cur;
      815 compare:						/* Come here at most once after main loop to compare and */
      816 						/* print partial line */
      817 
      818 		     if j = jbdry
      819 		     then do;
      820 			ptwp = addr (ptp -> bin_array (page_no));
      821 			if ptwp -> ptw.df
      822 			then abs_loc = bin (ptwp -> ptw.add, 18) * 64;
      823 			else abs_loc = -wps;	/* Page not in core */
      824 
      825 			jbdry = jbdry + 1024;
      826 			page_no = page_no + 1;
      827 		     end;
      828 
      829 		     if j ^= 0			/* Don't check first time through */
      830 		     then if prt -> dbl.six = cmp.six	/* See if this line equals previous line */
      831 			then if prt -> dbl.four = cmp.four
      832 			     then if prt -> dbl.two = cmp.two
      833 				then if prt -> dbl.zero = cmp.zero
      834 				     then do;
      835 					eq_print = eq_print + 1; /* Note occurence of repeated line */
      836 					go to endj;
      837 				     end;
      838 
      839 		     if eq_print ^= 0		/* Line was different, were there suppressed lines? */
      840 		     then do;
      841 			if eq_print = 1		/* How many? */
      842 			then s = " ";
      843 			else s = "s";
      844 			call od_print_ (one, fmteq, eq_print, s);
      845 			eq_print = 0;		/* Reset counter */
      846 		     end;
      847 
      848 
      849 /*		     call od_print_(one, fmt, abs_loc, j,
      850*   prt -> sgl.zero, prt -> sgl.one, prt -> sgl.two, prt -> sgl.three,
      851*   prt -> sgl.four, prt -> sgl.five, prt -> sgl.six, prt -> sgl.seven); /* Print line */
      852 
      853 		     call od_print_$op_fmt_line (abs_loc, j, prt -> sgl.zero);
      854 
      855 		     cmp.six = prt -> dbl.six;	/* Copy for next comparison */
      856 		     cmp.four = prt -> dbl.four;
      857 		     cmp.two = prt -> dbl.two;
      858 		     cmp.zero = prt -> dbl.zero;
      859 		end;
      860 
      861 
      862 		else do;				/* fewer than 8, switch to next seg of image */
      863 		     nxt = ptr_array (ptr_index + 1);
      864 		     if wpsmsi = 0			/* If zero, trivial */
      865 		     then do;
      866 			cur = nxt;
      867 			seg_index = 0;
      868 			go to retry_8;
      869 		     end;
      870 
      871 		     seg_index = -wpsmsi;		/* Set for advancing at "endj" */
      872 		     cur = addrel (nxt, seg_index);
      873 		     prt = tmp;			/* Compare/print from special buffer */
      874 		     go to compare;
      875 		end;
      876 
      877 endj:		cur = addrel (cur, 8);		/* Advance pointer */
      878 		seg_index = seg_index + 8;		/* and index in parallel */
      879 		abs_loc = abs_loc + 8;		/* Augment absolute address */
      880 	     end;
      881 
      882 
      883 	     if eq_print ^= 0			/* See if last line was identical to last printed line */
      884 	     then do;
      885 		if eq_print = 1
      886 		then s = " ";
      887 		else s = "s";
      888 		call od_print_ (one, fmteq, eq_print, s);
      889 	     end;
      890 
      891 
      892 next_seg:
      893 	end;
      894 
      895 /* Cleanup */
      896 tm_loop:
      897 	do j = 0 by 1 to 9 while (ptr_array (j) ^= null); /* Terminate all segs of image */
      898 	     call hcs_$terminate_noname (ptr_array (j), code);
      899 	end;
      900 
      901 	call od_print_ (m1, fmthdr, "End", erf_no);
      902 
      903 od_cleanup: entry;					/* To close buffer and detach printer */
      904 	call od_print_ (m1, fmteject);
      905 
      906 	call od_print_$op_finish;
      907 	call ios_$detach (ioname, c0, c0, b72);
      908 	call ioa_ ("Finished dump");
      909      end online_dump;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    01/22/85  1311.1  online_dump.pl1                   >spec>temp>41-5>online_dump.pl1
210          1    08/12/81  2025.7  assoc_mem.incl.pl1                >ldd>include>assoc_mem.incl.pl1
212          2    05/24/82  1005.0  slt.incl.pl1                      >ldd>include>slt.incl.pl1
214          3    11/02/84  0912.2  sstnt.incl.pl1                    >ldd>include>sstnt.incl.pl1
216          4    05/03/78  1422.1  ptw.incl.pl1                      >ldd>include>ptw.incl.pl1
218          5    11/26/79  1320.6  its.incl.pl1                      >ldd>include>its.incl.pl1
220          6    09/14/76  0759.8  sdw.incl.pl1                      >ldd>include>sdw.incl.pl1
222          7    08/12/81  2025.8  bos_dump.incl.pl1                 >ldd>include>bos_dump.incl.pl1
224          8    01/22/85  1321.6  sst.incl.pl1                      >spec>temp>41-5>sst.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
a                      3524            based           bit(36)                  level 3 packed unaligned dcl 7-11 set ref 521*
abs_loc                         000511 automatic       fixed bin(17,0)          dcl 186 set ref 718* 767* 821* 823* 853* 879* 879
add                                    based           bit(18)                  level 2 in structure "ptw" packed unaligned dcl 4-5
                                                                                  in procedure "od" ref 821
add                                    based           bit(24)                  level 2 in structure "sdw" packed unaligned dcl 6-5
                                                                                  in procedure "od" ref 730 735 767
add                                    based           bit(24)                  level 2 in structure "dsbr" packed unaligned dcl 151
                                                                                  in procedure "od" set ref 509*
addr                                   based           bit(18)                  level 2 in structure "amptwreg" packed unaligned
                                                                                  dcl 1-4 in procedure "od" ref 591 591
addr                                   based           bit(24)                  level 2 in structure "amsdwreg" packed unaligned
                                                                                  dcl 1-19 in procedure "od" ref 568 568
addr                                                   builtin function         dcl 61 in procedure "od" ref 229 477 486 487 504 514
                                                                                  529 544 559 560 563 585 586 604 615 625 634 643
                                                                                  652 722 820
addrel                                                 builtin function         dcl 61 ref 343 496 740 742 756 801 872 877
all_fnps                        000176 automatic       bit(1)                   unaligned dcl 102 set ref 239* 336* 494
ampp                            000544 automatic       pointer                  dcl 208 set ref 560* 568 568 568 568 568 568 586*
                                                                                  589 591 591 591 591 591 591
amptwptr                               based           structure                level 1 dcl 1-11
amptwptrs              2100            based           bit(36)                  array level 2 dcl 7-11 set ref 586
amptwreg                               based           structure                level 1 dcl 1-4
amptwregs              2000            based           bit(36)                  array level 2 dcl 7-11 set ref 585
amrp                            000542 automatic       pointer                  dcl 208 set ref 559* 563 568 568 568 568 568 568 568
                                                                                  568 568 568 568 568 585* 588 591 591
amsdwptr                               based           structure                level 1 dcl 1-38
amsdwptrs              2400            based           bit(36)                  array level 2 dcl 7-11 set ref 560
amsdwreg                               based           structure                level 1 dcl 1-19
amsdwregs              2200            based           bit(72)                  array level 2 dcl 7-11 set ref 559
arg                                    based           char                     unaligned dcl 22 set ref 248 249 277 284 287 294 297
                                                                                  305* 316* 323 327 335 347 357*
argl                            000106 automatic       fixed bin(17,0)          dcl 22 set ref 241* 248 249 271* 272 277 279* 280
                                                                                  284 287 289* 290 294 297 300* 301 305 305 311* 312
                                                                                  316 316 323 327 329* 330 335 347 357 357
argno                           000302 automatic       fixed bin(17,0)          dcl 103 set ref 266* 269* 269 271* 278* 278 279*
                                                                                  288* 288 289* 299* 299 300* 310* 310 311* 328* 328
                                                                                  329*
argp                            000104 automatic       pointer                  dcl 22 set ref 241* 248 249 271* 277 279* 284 287
                                                                                  289* 294 297 300* 305 311* 316 323 327 329* 335
                                                                                  347 357
ask_                            000722 constant        entry                    external dcl 103 ref 452
ask_$ask_clr                    000724 constant        entry                    external dcl 103 ref 451
ast_off                         000506 automatic       fixed bin(17,0)          dcl 186 set ref 433* 742
astep                           000156 automatic       pointer                  dcl 74 set ref 742* 749 749 749 749 749 749 749 749
astsize                  33            based           fixed bin(17,0)          level 2 dcl 8-9 ref 433
atptw                                  based           structure                level 1 dcl 4-35
auhist                 3300            based           bit(72)                  array level 2 dcl 7-11 set ref 643
axbits                                 based           bit(1)                   array unaligned dcl 206 ref 565
axbitsp                         000536 automatic       pointer                  dcl 204 set ref 563* 565
axstring                        000540 automatic       char(8)                  dcl 205 set ref 562* 565* 568*
b72                             000514 automatic       bit(72)                  dcl 186 set ref 476* 477 907*
bar                    3573            based           bit(36)                  level 3 dcl 7-11 set ref 526*
based_ptr                              based           pointer                  dcl 114 ref 393
baseno                                                 builtin function         dcl 61 ref 393 402 410 416 418 420 464
bin                                                    builtin function         dcl 61 ref 393 402 410 416 418 420 464 484 484 505
                                                                                  545 545 545 545 545 545 545 545 568 568 568 568
                                                                                  568 568 568 568 568 568 568 568 568 568 568 568
                                                                                  568 568 591 591 591 591 591 591 591 591 607 608
                                                                                  665 666 668 735 744 767 795 821
bin_array                              based           fixed bin(35,0)          array dcl 186 set ref 820
bit_offset                1(21)        based           bit(6)                   level 2 packed unaligned dcl 5-5 ref 545 545
bl                                     based           char                     dcl 186 set ref 761*
bound                     1(01)        based           bit(14)                  level 2 in structure "sdw" packed unaligned dcl 6-5
                                                                                  in procedure "od" ref 744 795
bound                     1(01)        based           bit(14)                  level 2 in structure "amsdwreg" packed unaligned
                                                                                  dcl 1-19 in procedure "od" ref 568 568
bound                     1(01)        based           bit(14)                  level 2 in structure "dsbr" packed unaligned dcl 151
                                                                                  in procedure "od" set ref 509*
c0                              000517 automatic       char                     dcl 186 set ref 365* 365* 366* 366* 367* 367* 368*
                                                                                  368* 369* 369* 370* 370* 371* 371* 372* 372* 373*
                                                                                  373* 452* 700* 769* 907* 907*
cl                        1(22)        based           bit(14)                  level 2 packed unaligned dcl 1-19 ref 568 568
cmodereg               3575            based           bit(36)                  level 3 dcl 7-11 set ref 535*
cmp                             000454 automatic       structure                level 1 dcl 174
code                                   based           fixed bin(17,0)          level 2 in structure "io_status" dcl 200
                                                                                  in procedure "od" set ref 478 480*
code                            000162 automatic       fixed bin(35,0)          dcl 74 in procedure "od" set ref 241* 242 244* 259*
                                                                                  260 261* 271* 272 279* 280 289* 290 300* 301 311*
                                                                                  312 329* 330 348* 354* 365* 366* 367* 368* 369*
                                                                                  370* 371* 372* 373* 401* 408* 409 415* 417* 419*
                                                                                  462* 463 898*
com_err_                        000664 constant        entry                    external dcl 39 ref 244 253 261 354 357 480
copy_dump_seg_                  000706 constant        entry                    external dcl 50 ref 382 394 422 437 679 681 684 785
coreblocks             3610            based           structure                array level 2 dcl 7-11
cu_$arg_ptr                     000716 constant        entry                    external dcl 50 ref 241 271 279 289 300 311 329
cuhist                 2700            based           bit(72)                  array level 2 dcl 7-11 set ref 634
cur                             000474 automatic       pointer                  dcl 186 set ref 801* 813 866* 872* 877* 877
cur_orig                        000525 automatic       fixed bin(35,0)          dcl 186 set ref 666* 666 667* 799 800
cur_proc_index                  000526 automatic       fixed bin(17,0)          dcl 186 set ref 378* 382* 394* 422* 437* 675* 679*
                                                                                  681* 684* 785*
cur_proc_no                     000173 automatic       fixed bin(17,0)          dcl 99 set ref 663* 670* 670 671 673
cur_seg_no                      000527 automatic       fixed bin(17,0)          dcl 186 set ref 665* 669* 670 671 672 673 684* 717
                                                                                  722 725 725* 725 728* 728 781 782 783 784 784 785*
cv_oct_check_                   000720 constant        entry                    external dcl 95 ref 305 316 459
dbl                                    based           structure                level 1 dcl 180
dbl_array                              based           fixed bin(71,0)          array dcl 186 set ref 697 704* 707* 722 725* 728*
dbr                    3570            based           bit(72)                  level 3 dcl 7-11 set ref 504
df                        0(33)        based           bit(1)                   level 2 packed unaligned dcl 4-5 ref 821
divide                                                 builtin function         dcl 61 ref 695 745 746 799
ds_seg                          000216 internal static pointer                  dcl 69 set ref 369* 684* 689
ds_seg_no                              constant        fixed bin(17,0)          initial dcl 63 ref 670 672 673 690
dsbr                                   based           structure                level 1 dcl 151
dsbr_stk_no                     000165 automatic       fixed bin(17,0)          dcl 93 set ref 505* 784 784 784
dslen                           000135 automatic       fixed bin(17,0)          dcl 67 set ref 684* 686
dsp                             000150 automatic       pointer                  dcl 72 set ref 379* 686* 689* 697 704 707 720 722
                                                                                  725 728
duhist                 3100            based           bit(72)                  array level 2 dcl 7-11 set ref 652
dump                                   based           structure                level 1 dcl 7-11 set ref 667
dump_header                            based           structure                level 1 dcl 7-47 in procedure "od"
dump_header                            based           structure                level 2 in structure "dump" dcl 7-11 in procedure
                                                                                  "od"
dump_misc_registers                    based           structure                level 1 dcl 7-69
dump_registers                         based           structure                level 1 dcl 7-59
dumpptr                         000560 automatic       pointer                  dcl 7-9 set ref 258* 259* 343* 343 484 484 484 493*
                                                                                  496* 496 504 514 519 521 522 523 524 526 529 535
                                                                                  535 536 539 544 559 560 585 586 604 607 608 615
                                                                                  625 634 643 652 661 665 666 667 668
e                      3526            based           bit(8)                   level 3 packed unaligned dcl 7-11 set ref 523*
eightp                          000504 automatic       pointer                  dcl 186 set ref 487* 761
eq_print                        000524 automatic       fixed bin(17,0)          dcl 186 set ref 692* 697* 697 700 709* 803* 835* 835
                                                                                  839 841 844* 845* 883 885 888*
erf_no                          000107 automatic       char(18)                 dcl 26 set ref 248* 249* 250* 253* 485* 488* 489*
                                                                                  901*
erfno                     4            based           fixed bin(18,0)          level 3 dcl 7-11 ref 484 484
error_table_$badopt             000644 external static fixed bin(35,0)          dcl 29 ref 348
faultreg               3576            based           bit(36)                  level 3 dcl 7-11 set ref 536*
five                      5            based           fixed bin(35,0)          level 2 in structure "sgl" dcl 183 in procedure "od"
                                                                                  set ref 616* 626* 635* 644* 653* 749* 753* 761*
five                            000231 internal static fixed bin(17,0)          initial dcl 77 in procedure "od" set ref 556* 582*
fmta                            000313 internal static char(14)                 initial dcl 116 set ref 521*
fmtamptw                        000470 internal static char(41)                 initial dcl 116 set ref 591*
fmtamptwh                       000450 internal static char(63)                 initial dcl 116 set ref 582*
fmtamsdw                        000433 internal static char(51)                 initial dcl 116 set ref 568*
fmtamsdwh                       000406 internal static char(81)                 initial dcl 116 set ref 556*
fmtast                          000606 internal static char(64)                 initial dcl 143 set ref 749*
fmtbar                          000334 internal static char(14)                 initial dcl 116 set ref 526*
fmtcbh                          000503 internal static char(33)                 initial dcl 116 set ref 602*
fmtcbno                         000514 internal static char(13)                 initial dcl 116 set ref 605*
fmtdbr                          000250 internal static char(34)                 initial dcl 116 set ref 509*
fmtdbrh                         000240 internal static char(31)                 initial dcl 116 set ref 508*
fmtdesc                         000565 internal static char(66)                 initial dcl 143 set ref 694* 723*
fmte                            000323 internal static char(15)                 initial dcl 116 set ref 523*
fmteight                        000553 internal static char(37)                 initial dcl 143 set ref 487 753*
fmteject                        000632 internal static char(2)                  initial dcl 143 set ref 904*
fmteq                           000636 internal static char(21)                 initial dcl 143 set ref 844* 888*
fmtflt                          000356 internal static char(14)                 initial dcl 116 set ref 536*
fmthdr                          000633 internal static char(11)                 initial dcl 143 set ref 485* 901*
fmthrh                          000543 internal static char(29)                 initial dcl 116 set ref 622*
fmtind                          000306 internal static char(17)                 initial dcl 116 set ref 520*
fmtinter                        000344 internal static char(16)                 initial dcl 116 set ref 539*
fmtlth                          000626 internal static char(14)                 initial dcl 143 set ref 773*
fmtmcm                          000531 internal static char(40)                 initial dcl 116 set ref 616* 626* 635* 644* 653*
fmtmcmh                         000520 internal static char(33)                 initial dcl 116 set ref 613*
fmtmode                         000350 internal static char(22)                 initial dcl 116 set ref 535*
fmtppr                          000270 internal static char(35)                 initial dcl 116 set ref 515*
fmtpprh                         000261 internal static char(28)                 initial dcl 116 set ref 513*
fmtpr                           000374 internal static char(39)                 initial dcl 116 set ref 545*
fmtprh                          000362 internal static char(39)                 initial dcl 116 set ref 542*
fmtq                            000317 internal static char(14)                 initial dcl 116 set ref 522*
fmtrar                          000301 internal static char(17)                 initial dcl 116 set ref 519*
fmtt                            000327 internal static char(20)                 initial dcl 116 set ref 524*
fmtx                            000340 internal static char(13)                 initial dcl 116 set ref 531*
fnp_index                       000174 automatic       fixed bin(17,0)          dcl 100 set ref 237* 337* 338 343 493* 494 495* 495
fnp_only                        000303 automatic       bit(1)                   unaligned dcl 103 set ref 231* 236* 248 273 297 323
                                                                                  327 491
fnp_size                               constant        fixed bin(17,0)          initial dcl 77 ref 343 496
four                            000232 internal static fixed bin(17,0)          initial dcl 77 in procedure "od" set ref 513* 542*
                                                                                  602* 613* 622* 693* 749*
four                      4            based           fixed bin(35,0)          level 2 in structure "sgl" dcl 183 in procedure "od"
                                                                                  set ref 616* 626* 635* 644* 653* 749* 753* 761*
four                      4            based           fixed bin(71,0)          level 2 in structure "dbl" dcl 180 in procedure "od"
                                                                                  ref 829 856
four                      4     000454 automatic       fixed bin(71,0)          level 2 in structure "cmp" dcl 174 in procedure "od"
                                                                                  set ref 829 856*
get_dump_ptrs_                  000646 constant        entry                    external dcl 39 ref 250
given_length                    000530 automatic       fixed bin(17,0)          dcl 186 set ref 668* 695 771 773* 790* 792
half_gl                         000531 automatic       fixed bin(17,0)          dcl 186 set ref 695* 696
hcs_$get_max_length_seg         000660 constant        entry                    external dcl 39 ref 259
hcs_$make_seg                   000662 constant        entry                    external dcl 39 ref 365 366 367 368 369 370 371 372
                                                                                  373
hcs_$terminate_noname           000714 constant        entry                    external dcl 50 ref 898
i                               000517 automatic       fixed bin(17,0)          dcl 186 set ref 305* 306 316* 317 459* 460 664* 665
                                                                                  666 666 668 675*
ilc                       4(18)        based           bit(18)                  level 2 packed unaligned dcl 161 set ref 515*
index                                                  builtin function         dcl 61 ref 337
intrpts                3572            based           bit(36)                  level 3 dcl 7-11 set ref 539*
io_status                              based           structure                level 1 dcl 200
ioa_                            000654 constant        entry                    external dcl 39 ref 385 397 403 426 439 445 468 473
                                                                                  488 489 908
ioargloc                        000166 automatic       fixed bin(17,0)          initial dcl 96 set ref 96*
ioname                          000010 internal static char(168)                initial dcl 35 set ref 476* 907*
ioname2                         000134 internal static char(168)                initial dcl 35 set ref 294* 473* 476*
ios_$attach                     000666 constant        entry                    external dcl 39 ref 476
ios_$detach                     000670 constant        entry                    external dcl 39 ref 907
iotype                          000062 internal static char(168)                initial dcl 35 set ref 284* 473* 476*
ir                        5            based           bit(18)                  level 2 packed unaligned dcl 161 set ref 520*
its                                    based           structure                level 1 dcl 5-5
j                               000520 automatic       fixed bin(17,0)          dcl 186 set ref 250* 251 257 530* 530* 531* 531*
                                                                                  543* 543* 544 545 545 545* 558* 558* 559 560* 583*
                                                                                  583* 585 586* 603* 603* 604 607 608* 614* 614* 615
                                                                                  616* 624* 624* 625 626* 633* 633* 634 635* 642*
                                                                                  642* 643 644* 651* 651* 652 653* 696* 696* 697 703
                                                                                  704* 704 707* 707* 735* 736 740 752* 752* 753*
                                                                                  761* 807* 807* 815 829 853* 896* 896* 898*
j1                              000522 automatic       fixed bin(17,0)          dcl 186 set ref 744* 745 746* 747 752 792* 796 796*
                                                                                  807
j2                              000523 automatic       fixed bin(17,0)          dcl 186 set ref 745* 746 747* 747 758 760 795* 796
                                                                                  796
jbdry                           000512 automatic       fixed bin(17,0)          dcl 186 set ref 719* 738* 815 825* 825
l                               000521 automatic       fixed bin(17,0)          dcl 186 set ref 564* 565 565* 760* 761 761
last_sup_seg              4            based           fixed bin(18,0)          level 2 dcl 2-13 ref 703 725
len_array                       000414 automatic       fixed bin(17,0)          array dcl 171 set ref 250* 382* 394* 422* 437* 679*
                                                                                  681* 684* 785*
length                   20(18)        based           bit(18)                  array level 3 packed unaligned dcl 7-11 ref 666 668
m1                              000230 internal static fixed bin(17,0)          initial dcl 77 set ref 485* 901* 904*
max_fnps                               constant        fixed bin(17,0)          initial dcl 77 ref 494
mcm                    3550            based           bit(72)                  array level 3 dcl 7-11 set ref 615
misc_registers         3540            based           structure                level 2 dcl 7-11
mod                                                    builtin function         dcl 61 ref 800
modereg                3574            based           bit(36)                  level 3 dcl 7-11 set ref 535*
modif                     0(29)        based           bit(1)                   level 2 packed unaligned dcl 1-4 ref 588
n_blocks                        000125 automatic       fixed bin(17,0)          dcl 32 set ref 608* 609*
n_first                         000126 automatic       fixed bin(17,0)          dcl 33 set ref 607* 609*
nam_seg                         000210 internal static pointer                  dcl 69 set ref 366* 394* 395
nam_seg_no                      000130 automatic       fixed bin(17,0)          dcl 63 set ref 393* 394* 403*
name                            000114 automatic       char(32)                 dcl 26 set ref 250* 261* 473*
namlen                          000140 automatic       fixed bin(17,0)          dcl 67 set ref 394* 395
namp                            000146 automatic       pointer                  dcl 72 set ref 379* 395* 401* 404* 408* 415* 417*
                                                                                  419* 462* 677 704* 725* 790*
nsegs                           000532 automatic       fixed bin(18,0)          dcl 186 set ref 661* 664
null                                                   builtin function         dcl 61 ref 257 361 379 386 404 427 440 446 461 676
                                                                                  677 677 686 702 720 724 733 780 782 783 789 896
num                             000124 automatic       fixed bin(17,0)          initial dcl 31 set ref 31*
num_blocks             3610(18)        based           bit(18)                  array level 3 packed unaligned dcl 7-11 ref 608
num_first              3610            based           bit(18)                  array level 3 packed unaligned dcl 7-11 set ref 604
                                                                                  607
num_segs                  5            based           fixed bin(17,0)          level 3 dcl 7-11 ref 661
nxt                             000476 automatic       pointer                  dcl 186 set ref 863* 866 872
od_print_                       000650 constant        entry                    external dcl 39 ref 485 508 509 513 515 519 520 521
                                                                                  522 523 524 526 531 535 536 539 542 545 556 568
                                                                                  582 591 602 605 609 613 616 622 623 626 632 635
                                                                                  641 644 650 653 693 694 700 723 749 753 761 769
                                                                                  773 844 888 901 904
od_print_$op_finish             000674 constant        entry                    external dcl 50 ref 492 906
od_print_$op_fmt_line           000676 constant        entry                    external dcl 50 ref 853
od_print_$op_init               000702 constant        entry                    external dcl 50 ref 484
od_print_$op_new_page           000672 constant        entry                    external dcl 50 ref 554 600 714
od_print_$op_new_seg            000700 constant        entry                    external dcl 50 ref 669
od_stack_                       000652 constant        entry                    external dcl 39 ref 790
offset                    1            based           bit(18)                  level 2 packed unaligned dcl 5-5 ref 545 545
one                             000235 internal static fixed bin(17,0)          initial dcl 77 in procedure "od" set ref 515* 521*
                                                                                  522* 523* 531* 536* 545* 568* 591* 605* 609* 626*
                                                                                  635* 644* 653* 700* 753* 761* 769* 773* 844* 888*
one                       1            based           fixed bin(35,0)          level 2 in structure "sgl" dcl 183 in procedure "od"
                                                                                  set ref 616* 626* 635* 644* 653* 749* 753* 761*
onechar                         000163 automatic       char(1)                  dcl 90 set ref 589* 589* 591*
online_355_dump_                000704 constant        entry                    external dcl 50 ref 493
ouhist                 2500            based           bit(72)                  array level 2 dcl 7-11 set ref 625
page_no                         000513 automatic       fixed bin(17,0)          dcl 186 set ref 739* 820 826* 826
pageno                    0(15)        based           bit(12)                  level 2 packed unaligned dcl 1-11 ref 591 591
pds_seg                         000220 internal static pointer                  dcl 69 set ref 370* 679* 680
pds_seg_no                      000132 automatic       fixed bin(17,0)          dcl 63 set ref 418* 679* 782
pdslen                          000142 automatic       fixed bin(17,0)          dcl 67 set ref 679* 680
pdsp                            000152 automatic       pointer                  dcl 72 set ref 676* 680* 782 782
pointer                                based           bit(15)                  level 2 in structure "amptwptr" packed unaligned
                                                                                  dcl 1-11 in procedure "od" ref 591 591
pointer                                based           bit(15)                  level 2 in structure "amsdwptr" packed unaligned
                                                                                  dcl 1-38 in procedure "od" ref 568 568
ppr                                    based           structure                level 2 dcl 161
prds_seg                        000222 internal static pointer                  dcl 69 set ref 371* 681* 682
prds_seg_no                     000133 automatic       fixed bin(17,0)          dcl 63 set ref 420* 681* 783
prdslen                         000143 automatic       fixed bin(17,0)          dcl 67 set ref 681* 682
prdsp                           000154 automatic       pointer                  dcl 72 set ref 676* 682* 783 783
print_dump_seg_name_            000710 constant        entry                    external dcl 50 ref 707 728
print_dump_seg_name_$hard       000712 constant        entry                    external dcl 50 ref 704 725
procname                        000100 automatic       char(16)                 unaligned dcl 20 set ref 228* 235* 244* 253* 261*
                                                                                  354* 357* 480*
prr                                    based           bit(3)                   level 3 packed unaligned dcl 161 set ref 515*
prs                    3500            based           pointer                  array level 2 dcl 7-11 set ref 544
prt                             000502 automatic       pointer                  dcl 186 set ref 229* 230 401* 402 408* 410 415* 416
                                                                                  417* 418 419* 420 462* 464 504* 505 509 509 509
                                                                                  509 529* 531 544* 545 545 545 545 545 545 545 545
                                                                                  604* 605 615* 616 616 616 616 616 616 616 616 625*
                                                                                  626 626 626 626 626 626 626 626 634* 635 635 635
                                                                                  635 635 635 635 635 643* 644 644 644 644 644 644
                                                                                  644 644 652* 653 653 653 653 653 653 653 653 741*
                                                                                  753 753 753 753 753 753 753 753 756* 756 761 761
                                                                                  761 761 761 761 761 780* 782* 783* 786* 789 790*
                                                                                  813* 829 829 829 829 853 855 856 857 858 873*
psr                       0(03)        based           bit(15)                  level 3 packed unaligned dcl 161 set ref 515*
ptp                             000554 automatic       pointer                  dcl 4-3 set ref 740* 741 742 820
ptr_array                       000314 automatic       pointer                  array dcl 171 set ref 250* 257* 258 382* 394* 422*
                                                                                  437* 679* 681* 684* 785* 801 863 896 898*
ptr_index                       000534 automatic       fixed bin(18,0)          dcl 186 set ref 799* 801 863
ptw                                    based           structure                level 1 dcl 4-5
ptwbase                  25            based           fixed bin(24,0)          level 2 dcl 8-9 ref 431
ptwp                            000160 automatic       pointer                  dcl 74 set ref 820* 821 821
q                      3525            based           bit(36)                  level 3 packed unaligned dcl 7-11 set ref 522*
r1                        0(24)        based           bit(3)                   level 2 packed unaligned dcl 1-19 ref 568 568
r2                        0(27)        based           bit(3)                   level 2 packed unaligned dcl 1-19 ref 568 568
r3                        0(30)        based           bit(3)                   level 2 packed unaligned dcl 1-19 ref 568 568
ralr                   3527(33)        based           bit(3)                   level 3 packed unaligned dcl 7-11 set ref 519*
read                      1(15)        based           bit(1)                   level 2 packed unaligned dcl 1-19 set ref 563
regs                   3520            based           structure                level 2 dcl 7-11
restartsw                       000170 automatic       bit(1)                   initial unaligned dcl 98 set ref 98* 298* 488 506
                                                                                  671* 672 673 690
ring0_get_$segptr_given_slt     000656 constant        entry                    external dcl 39 ref 401 408 415 417 419 462
ringno                    0(18)        based           bit(3)                   level 2 packed unaligned dcl 5-5 ref 545 545
rt_proc_no                      000172 automatic       fixed bin(17,0)          dcl 99 set ref 305* 671 673
rt_seg_no                       000171 automatic       fixed bin(17,0)          dcl 99 set ref 316* 671
s                               000516 automatic       char(1)                  dcl 186 set ref 841* 843* 844* 885* 887* 888*
scu                                    based           structure                level 1 dcl 161 in procedure "od"
scu                    3540            based           bit(36)                  array level 3 in structure "dump" dcl 7-11
                                                                                  in procedure "od" set ref 514
scup                            000546 automatic       pointer                  dcl 208 set ref 514* 515 515 515 520
sdw                                    based           structure                level 1 dcl 6-5
sdwp                            000556 automatic       pointer                  dcl 6-3 set ref 686* 722* 730 730 735 744 767 794
                                                                                  795
seg_id                          000304 automatic       char(32)                 unaligned dcl 103 set ref 281* 291* 302* 307* 313*
                                                                                  318* 331* 339* 347* 354* 357* 452* 454 455 459*
                                                                                  462 468*
seg_index                       000533 automatic       fixed bin(18,0)          dcl 186 set ref 800* 801 809 867* 871* 872 878* 878
seg_mode                        000236 internal static fixed bin(5,0)           initial dcl 77 set ref 365* 366* 367* 368* 369* 370*
                                                                                  371* 372* 373*
seg_no                          000167 automatic       fixed bin(17,0)          dcl 97 set ref 459* 460 464* 465
segno                    20            based           bit(18)                  array level 3 in structure "dump" packed unaligned
                                                                                  dcl 7-11 in procedure "od" ref 665
segno                     0(03)        based           bit(15)                  level 2 in structure "its" packed unaligned dcl 5-5
                                                                                  in procedure "od" ref 545 545
segs                     20            based           structure                array level 2 dcl 7-11
segselsw                        000177 automatic       bit(1)                   initial unaligned dcl 103 set ref 103* 324* 450 506
                                                                                  690 717
seven                     7            based           fixed bin(35,0)          level 2 dcl 183 set ref 616* 626* 635* 644* 653*
                                                                                  749* 753*
sgl                                    based           structure                level 1 dcl 183
shut_seg                        000226 internal static pointer                  dcl 69 set ref 372*
six                       6            based           fixed bin(71,0)          level 2 in structure "dbl" dcl 180 in procedure "od"
                                                                                  ref 829 855
six                       6     000454 automatic       fixed bin(71,0)          level 2 in structure "cmp" dcl 174 in procedure "od"
                                                                                  set ref 829 855*
six                       6            based           fixed bin(35,0)          level 2 in structure "sgl" dcl 183 in procedure "od"
                                                                                  set ref 616* 626* 635* 644* 653* 749* 753* 761*
size                                                   builtin function         dcl 61 ref 667
slt                                    based           structure                level 1 dcl 2-13
slt_seg                         000206 internal static pointer                  initial dcl 69 set ref 361 365* 382* 392
slt_seg_no                      000127 automatic       fixed bin(17,0)          dcl 63 set ref 380*
sltlen                          000137 automatic       fixed bin(17,0)          dcl 67 set ref 382* 383
sltp                            000550 automatic       pointer                  dcl 2-7 set ref 386* 392* 393 401* 408* 415* 417*
                                                                                  419* 461 462* 677 702 703 704* 724 725 725* 790*
sst                                    based           structure                level 1 dcl 8-9
sst_abs_loc                     000507 automatic       fixed bin(17,0)          dcl 186 set ref 431* 432 740
sst_high_loc                    000510 automatic       fixed bin(17,0)          dcl 186 set ref 432* 736
sst_seg                         000212 internal static pointer                  dcl 69 set ref 367* 422* 430
sst_seg_no                      000134 automatic       fixed bin(17,0)          dcl 63 set ref 387* 410* 413* 422*
sstlen                          000141 automatic       fixed bin(17,0)          dcl 67 set ref 422* 424 432
sstnp                           000552 automatic       pointer                  dcl 3-9 set ref 379* 440* 443* 444 446* 707* 728*
                                                                                  790*
sstnt                                  based           structure                level 1 dcl 3-11
sstnt_seg                       000214 internal static pointer                  dcl 69 set ref 368* 437* 443
sstnt_seg_no                    000131 automatic       fixed bin(17,0)          dcl 63 set ref 416* 437*
sstntlen                        000136 automatic       fixed bin(17,0)          dcl 67 set ref 437* 438
sstp                            000562 automatic       pointer                  dcl 8-7 set ref 379* 427* 430* 431 433 707* 728* 733
                                                                                  740 790*
stack                     1(24)        based           bit(12)                  level 2 packed unaligned dcl 151 set ref 505 509*
stk_seg                         000224 internal static pointer                  dcl 69 set ref 373* 785* 786
stklen                          000144 automatic       fixed bin(17,0)          dcl 67 set ref 785* 786
substatus                 1            based           bit(36)                  level 2 dcl 200 set ref 480*
substr                                                 builtin function         dcl 61 set ref 545 545 565* 568 568
t                      3527            based           bit(27)                  level 3 packed unaligned dcl 7-11 set ref 524*
tag                             000175 automatic       char(1)                  unaligned dcl 101 set ref 238* 335* 337
temp                            000464 automatic       structure                level 1 dcl 177 set ref 486
three                           000233 internal static fixed bin(17,0)          initial dcl 77 in procedure "od" set ref 509*
three                     3            based           fixed bin(35,0)          level 2 in structure "sgl" dcl 183 in procedure "od"
                                                                                  set ref 616* 626* 635* 644* 653* 749* 753* 761*
time                      2            based           fixed bin(71,0)          level 3 dcl 7-11 set ref 484*
tmp                             000500 automatic       pointer                  dcl 186 set ref 477* 478 480 480 486* 873
two                       2     000454 automatic       fixed bin(71,0)          level 2 in structure "cmp" dcl 174 in procedure "od"
                                                                                  set ref 829 857*
two                             000234 internal static fixed bin(17,0)          initial dcl 77 in procedure "od" set ref 508* 519*
                                                                                  520* 524* 526* 535* 539* 623* 632* 641* 650* 694*
                                                                                  723*
two                       2            based           fixed bin(71,0)          level 2 in structure "dbl" dcl 180 in procedure "od"
                                                                                  ref 829 857
two                       2            based           fixed bin(35,0)          level 2 in structure "sgl" dcl 183 in procedure "od"
                                                                                  set ref 616* 626* 635* 644* 653* 749* 753* 761*
twochar                         000164 automatic       char(2)                  dcl 91 set ref 588* 588* 591*
unpaged                   1(19)        based           bit(1)                   level 2 in structure "sdw" packed unaligned dcl 6-5
                                                                                  in procedure "od" ref 730 794
unpaged                   1(19)        based           bit(1)                   level 2 in structure "dsbr" packed unaligned dcl 151
                                                                                  in procedure "od" set ref 509*
usage                     0(32)        based           bit(4)                   level 2 in structure "amptwptr" packed unaligned
                                                                                  dcl 1-11 in procedure "od" ref 591 591
usage                     0(32)        based           bit(4)                   level 2 in structure "amsdwptr" packed unaligned
                                                                                  dcl 1-38 in procedure "od" ref 568 568
valid                     0(27)        based           bit(1)                   level 2 in structure "amptwptr" packed unaligned
                                                                                  dcl 1-11 in procedure "od" ref 589
valid                     0(27)        based           bit(1)                   level 2 in structure "amsdwptr" packed unaligned
                                                                                  dcl 1-38 in procedure "od" ref 568 568
valid                                  based           bit(1)                   level 2 in structure "sstnt" dcl 3-11 in procedure
                                                                                  "od" ref 444
wants_regs                      000200 automatic       bit(1)                   initial unaligned dcl 103 set ref 103* 456* 506
wants_seg                       000201 automatic       bit(1)                   array unaligned dcl 103 set ref 229 460* 465* 690
                                                                                  717
wps                             000237 internal static fixed bin(18,0)          dcl 77 set ref 259* 718 799 800 809 823
wpsmsi                          000535 automatic       fixed bin(18,0)          dcl 186 set ref 809* 811 864 871
ws16x72                                based           fixed bin(71,0)          array dcl 103 set ref 230*
x                      3520            based           bit(18)                  array level 3 packed unaligned dcl 7-11 set ref 529
xreg                                   based           fixed bin(17,0)          array unaligned dcl 94 set ref 531*
zero                                   based           fixed bin(71,0)          level 2 in structure "dbl" dcl 180 in procedure "od"
                                                                                  ref 829 858
zero                                   based           fixed bin(35,0)          level 2 in structure "sgl" dcl 183 in procedure "od"
                                                                                  set ref 605 616* 626* 635* 644* 653* 749* 753*
                                                                                  761* 853*
zero                            000454 automatic       fixed bin(71,0)          level 2 in structure "cmp" dcl 174 in procedure "od"
                                                                                  set ref 829 858*
zilch                           000242 automatic       fixed bin(71,0)          initial array dcl 103 set ref 103* 230

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
DUMP_VERSION_1                         internal static fixed bin(17,0)          initial dcl 7-120
DUMP_VERSION_2                         internal static fixed bin(17,0)          initial dcl 7-121
ITP_MODIFIER                           internal static bit(6)                   initial unaligned dcl 5-56
ITS_MODIFIER                           internal static bit(6)                   initial unaligned dcl 5-55
aclp                                   automatic       pointer                  dcl 2-7
acls                                   based           structure                level 1 dcl 2-45
atptwa                                 based           structure                array level 1 dcl 4-40
itp                                    based           structure                level 1 dcl 5-18
itp_unsigned                           based           structure                level 1 dcl 5-43
its_unsigned                           based           structure                level 1 dcl 5-30
mptw                                   based           structure                level 1 dcl 4-27
mptwa                                  based           structure                array level 1 dcl 4-31
name_seg                               based           structure                level 1 dcl 2-26
namep                                  automatic       pointer                  dcl 2-7
names_ptr                              automatic       pointer                  dcl 2-7
nm_astep                               automatic       pointer                  dcl 3-26
path                                   based           structure                level 1 dcl 2-40
pathp                                  automatic       pointer                  dcl 2-7
ptsi_a                                 automatic       fixed bin(17,0)          dcl 3-24
ptwa                                   based           structure                array level 1 dcl 4-23
ptwa_bits                              based           bit(36)                  array dcl 4-25
sdwa                                   based           structure                array level 1 dcl 6-24
segnam                                 based           structure                level 1 dcl 2-31
sst_names_$                            external static fixed bin(17,0)          dcl 3-7
sst_seg$                               external static fixed bin(17,0)          dcl 8-6
sstnmx                                 automatic       fixed bin(17,0)          dcl 3-24
v1_dump                                based           structure                level 1 dcl 7-83

NAMES DECLARED BY EXPLICIT CONTEXT.
CALL_PDSN_1                     006071 constant        label                    dcl 707 ref 702
CALL_PDSN_2                     006207 constant        label                    dcl 728 ref 724
NOT_SLT                         002224 constant        label                    dcl 386 set ref 398 405
NOT_STACK                       006667 constant        label                    dcl 792 ref 789
call_com                        001430 constant        label                    dcl 354 ref 282 292 303 314 332 349
call_com_oct                    001460 constant        label                    dcl 357 ref 308 319 340
compare                         006743 constant        label                    dcl 815 ref 874
copy_sst                        002604 constant        label                    dcl 422 ref 388
endj                            007114 constant        label                    dcl 877 ref 836
get_args                        001022 constant        label                    dcl 266
get_erfno                       000565 constant        label                    dcl 241 ref 232
get_next_seg                    002764 constant        label                    dcl 452 ref 457 471
next_arg                        001024 constant        label                    dcl 269 ref 352
next_seg                        007161 constant        label                    dcl 892 ref 672 690 717 774 791
no_more_args                    001520 constant        label                    dcl 361 ref 274
no_more_segs                    003140 constant        label                    dcl 473 ref 273 454
od                              000503 constant        entry                    external dcl 18
od_355                          000534 constant        entry                    external dcl 234
od_cleanup                      007242 constant        entry                    external dcl 903
online_dump                     000513 constant        entry                    external dcl 18
online_dump_355                 000544 constant        entry                    external dcl 234
retry_8                         006741 constant        label                    dcl 813 ref 868
skip_regs                       005521 constant        label                    dcl 661 ref 506
tm_loop                         007163 constant        label                    dcl 896 ref 494
use_abs                         006510 constant        label                    dcl 767 ref 736

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      7660       10606    7337        7670
Length     11326    7337       726         503     321         634

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
od                                  544 external procedure  is an external procedure.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 ioname                      od
000062 iotype                      od
000134 ioname2                     od
000206 slt_seg                     od
000210 nam_seg                     od
000212 sst_seg                     od
000214 sstnt_seg                   od
000216 ds_seg                      od
000220 pds_seg                     od
000222 prds_seg                    od
000224 stk_seg                     od
000226 shut_seg                    od
000230 m1                          od
000231 five                        od
000232 four                        od
000233 three                       od
000234 two                         od
000235 one                         od
000236 seg_mode                    od
000237 wps                         od
000240 fmtdbrh                     od
000250 fmtdbr                      od
000261 fmtpprh                     od
000270 fmtppr                      od
000301 fmtrar                      od
000306 fmtind                      od
000313 fmta                        od
000317 fmtq                        od
000323 fmte                        od
000327 fmtt                        od
000334 fmtbar                      od
000340 fmtx                        od
000344 fmtinter                    od
000350 fmtmode                     od
000356 fmtflt                      od
000362 fmtprh                      od
000374 fmtpr                       od
000406 fmtamsdwh                   od
000433 fmtamsdw                    od
000450 fmtamptwh                   od
000470 fmtamptw                    od
000503 fmtcbh                      od
000514 fmtcbno                     od
000520 fmtmcmh                     od
000531 fmtmcm                      od
000543 fmthrh                      od
000553 fmteight                    od
000565 fmtdesc                     od
000606 fmtast                      od
000626 fmtlth                      od
000632 fmteject                    od
000633 fmthdr                      od
000636 fmteq                       od

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
od                       000100 procname                    od
                         000104 argp                        od
                         000106 argl                        od
                         000107 erf_no                      od
                         000114 name                        od
                         000124 num                         od
                         000125 n_blocks                    od
                         000126 n_first                     od
                         000127 slt_seg_no                  od
                         000130 nam_seg_no                  od
                         000131 sstnt_seg_no                od
                         000132 pds_seg_no                  od
                         000133 prds_seg_no                 od
                         000134 sst_seg_no                  od
                         000135 dslen                       od
                         000136 sstntlen                    od
                         000137 sltlen                      od
                         000140 namlen                      od
                         000141 sstlen                      od
                         000142 pdslen                      od
                         000143 prdslen                     od
                         000144 stklen                      od
                         000146 namp                        od
                         000150 dsp                         od
                         000152 pdsp                        od
                         000154 prdsp                       od
                         000156 astep                       od
                         000160 ptwp                        od
                         000162 code                        od
                         000163 onechar                     od
                         000164 twochar                     od
                         000165 dsbr_stk_no                 od
                         000166 ioargloc                    od
                         000167 seg_no                      od
                         000170 restartsw                   od
                         000171 rt_seg_no                   od
                         000172 rt_proc_no                  od
                         000173 cur_proc_no                 od
                         000174 fnp_index                   od
                         000175 tag                         od
                         000176 all_fnps                    od
                         000177 segselsw                    od
                         000200 wants_regs                  od
                         000201 wants_seg                   od
                         000242 zilch                       od
                         000302 argno                       od
                         000303 fnp_only                    od
                         000304 seg_id                      od
                         000314 ptr_array                   od
                         000414 len_array                   od
                         000454 cmp                         od
                         000464 temp                        od
                         000474 cur                         od
                         000476 nxt                         od
                         000500 tmp                         od
                         000502 prt                         od
                         000504 eightp                      od
                         000506 ast_off                     od
                         000507 sst_abs_loc                 od
                         000510 sst_high_loc                od
                         000511 abs_loc                     od
                         000512 jbdry                       od
                         000513 page_no                     od
                         000514 b72                         od
                         000516 s                           od
                         000517 i                           od
                         000517 c0                          od
                         000520 j                           od
                         000521 l                           od
                         000522 j1                          od
                         000523 j2                          od
                         000524 eq_print                    od
                         000525 cur_orig                    od
                         000526 cur_proc_index              od
                         000527 cur_seg_no                  od
                         000530 given_length                od
                         000531 half_gl                     od
                         000532 nsegs                       od
                         000533 seg_index                   od
                         000534 ptr_index                   od
                         000535 wpsmsi                      od
                         000536 axbitsp                     od
                         000540 axstring                    od
                         000542 amrp                        od
                         000544 ampp                        od
                         000546 scup                        od
                         000550 sltp                        od
                         000552 sstnp                       od
                         000554 ptp                         od
                         000556 sdwp                        od
                         000560 dumpptr                     od
                         000562 sstp                        od

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
alloc_cs            call_ext_out_desc   call_ext_out        return              mod_fx1             shorten_stack
ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
ask_                          ask_$ask_clr                  com_err_                      copy_dump_seg_
cu_$arg_ptr                   cv_oct_check_                 get_dump_ptrs_                hcs_$get_max_length_seg
hcs_$make_seg                 hcs_$terminate_noname         ioa_                          ios_$attach
ios_$detach                   od_print_                     od_print_$op_finish           od_print_$op_fmt_line
od_print_$op_init             od_print_$op_new_page         od_print_$op_new_seg          od_stack_
online_355_dump_              print_dump_seg_name_          print_dump_seg_name_$hard     ring0_get_$segptr_given_slt

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$badopt


CONSTANTS
000000  aa  105 156 144 000	End

000001  aa     524000000025

000002  aa     524000000045

000003  aa     524000000100

000004  aa     524000000102

000005  aa     524000000006

000006  aa     404000000027

000007  aa     524000000050

000010  aa     404000000014

000011  aa     524000000051

000012  aa     524000000077

000013  aa     404000000004

007335  aa  105 106 000 000	EF

000014  aa     404000000016

000015  aa     404000000030

000016  aa     524000000063

000017  aa     524000000121

000020  aa     404000000006

000021  aa     404000000022

000022  aa     404000000017

000023  aa     404000000003

000024  aa     524000000047

000025  aa     524000000026

000026  aa     406000000021

000027  aa     524000000015

000030  aa     516000000033

000031  aa     524000000024

000032  aa     516000000010

000033  aa     516000000044

000034  aa     524000000016

000035  aa     524000000021

000036  aa     516000000022

000037  aa     516000000017

000040  aa     516000000003

000041  aa     524000000043

000042  aa     524000000034

000043  aa     516000000014

000044  aa     516000000001

000045  aa     516000000016

000046  aa     516000000030

000047  aa     524000000042

000050  aa     524000000037

000051  aa     524000000020

000052  aa     524000000023

000053  aa     524000000013

000054  aa     514000000044

000055  aa     524000000065

000056  aa     514000000110

000057  aa     524000000001

000060  aa     524000000250

000061  aa     524000000046

000062  aa     524000000035

000063  aa  162 145 147 163	regs

000064  aa  161 165 151 164	quit

000065  aa     524000000033

000066  aa     524000000004

000067  aa  160 162 144 163	prds

000070  aa  160 144 163 000	pds

000071  aa     524000000012

000072  aa  163 163 164 000	sst

000073  aa     524000000067

000074  aa     524000000003

000075  aa  163 154 164 000	slt

000076  aa     524000000017

000077  aa     464000000000

000100  aa     524000000010

000101  aa     524000000000

000102  aa     524000000007

000103  aa     526000000040

000104  aa     524000000002

000105  aa  164 141 147 000	tag

000106  aa  055 164 141 147	-tag

000107  aa     526000000000

000110  aa  055 144 145 166	-dev

000111  aa  144 151 155 000	dim

000112  aa  055 144 151 155	-dim

000113  aa     524000000036

000114  aa     524000000041

000115  aa     404000000005

000116  aa     524000000040

000117  aa     524000000022

000120  aa  056 063 065 065	.355

000121  aa     524000000005

000122  aa     526000000020

000123  aa     404000000043

007336  aa     777777777777

000124  aa     404000000021

000126  aa     000000000000
000127  aa     000000000000

000130  aa  136 057 136 055	^/^-
000131  aa  104 125 000 000	DU

000132  aa  136 057 136 055	^/^-
000133  aa  101 125 000 000	AU

000134  aa  136 057 136 055	^/^-
000135  aa  103 125 000 000	CU

000136  aa  136 057 136 055	^/^-
000137  aa  117 125 000 000	OU

000140  aa  122 105 127 120	REWP
000141  aa  125 107 040 040	UG  

000142  aa  123 164 141 162	Star
000143  aa  164 000 000 000	t

000144  aa  157 144 056 163	od.s
000145  aa  164 153 055 055	tk--

000146  aa  157 144 056 163	od.s
000147  aa  150 165 164 055	hut-

000150  aa  157 144 056 160	od.p
000151  aa  162 144 163 055	rds-

000152  aa  157 144 056 160	od.p
000153  aa  144 163 055 055	ds--

000154  aa  157 144 056 144	od.d
000155  aa  163 145 147 055	seg-

000156  aa  157 144 056 163	od.s
000157  aa  163 164 156 164	stnt

000160  aa  157 144 056 163	od.s
000161  aa  163 164 055 055	st--

000162  aa  157 144 056 156	od.n
000163  aa  141 155 055 055	am--

000164  aa  157 144 056 163	od.s
000165  aa  154 164 055 055	lt--

000166  aa  136 141 072 040	^a: 
000167  aa  040 136 141 000	 ^a

000170  aa  141 142 143 144	abcd
000171  aa  145 146 147 150	efgh

000172  aa  055 163 145 147	-seg
000173  aa  163 000 000 000	s

000174  aa  055 162 145 163	-res
000175  aa  164 141 162 164	tart

000176  aa  144 145 166 151	devi
000177  aa  143 145 000 000	ce

000200  aa     077777000043
000201  aa     000001000000

000202  aa  105 122 106 040	ERF 
000203  aa  043 000 000 000	#

000204  aa  163 163 164 137	sst_
000205  aa  156 141 155 145	name
000206  aa  163 137 000 000	s_

000207  aa  151 156 166 141	inva
000210  aa  154 151 144 040	lid 
000211  aa  164 141 147 000	tag

000212  aa  157 156 154 151	onli
000213  aa  156 145 137 144	ne_d
000214  aa  165 155 160 000	ump

000215  aa  106 151 156 151	Fini
000216  aa  163 150 145 144	shed
000217  aa  040 144 165 155	 dum
000220  aa  160 000 000 000	p

000221  aa  136 055 136 055	^-^-
000222  aa  136 055 040 136	^- ^
000223  aa  066 157 040 136	6o ^
000224  aa  064 157 000 000	4o

000225  aa  101 120 101 102	APAB
000226  aa  102 120 102 102	BPBB
000227  aa  114 120 114 102	LPLB
000230  aa  123 120 123 102	SPSB

000231  aa  102 145 147 151	Begi
000232  aa  156 040 144 165	n du
000233  aa  155 160 151 156	mpin
000234  aa  147 040 136 141	g ^a

000235  aa  103 141 156 047	Can'
000236  aa  164 040 146 151	t fi
000237  aa  156 144 040 042	nd "
000240  aa  136 141 042 000	^a"

000241  aa     404100000021
000242  aa     000000000000
000243  aa     000000000037
000244  aa     000000000001

000245  aa     464100000000
000246  aa     000000000000
000247  aa     000000000037
000250  aa     000000000002

000251  aa  157 156 154 151	onli
000252  aa  156 145 137 144	ne_d
000253  aa  165 155 160 137	ump_
000254  aa  063 065 065 000	355

000255  aa  103 157 156 164	Cont
000256  aa  151 156 165 145	inue
000257  aa  040 144 165 155	 dum
000260  aa  160 151 156 147	ping
000261  aa  040 136 141 000	 ^a

000262  aa  162 145 163 164	rest
000263  aa  141 162 164 040	art 
000264  aa  163 145 147 155	segm
000265  aa  145 156 164 040	ent 
000266  aa  156 165 155 142	numb
000267  aa  145 162 000 000	er

000270  aa  162 145 163 164	rest
000271  aa  141 162 164 040	art 
000272  aa  160 162 157 143	proc
000273  aa  145 163 163 137	ess_
000274  aa  156 165 155 142	numb
000275  aa  145 162 000 000	er

000276  aa  136 057 136 057	^/^/
000277  aa  136 064 055 104	^4-D
000300  aa  105 123 103 122	ESCR
000301  aa  111 120 124 117	IPTO
000302  aa  122 040 123 105	R SE
000303  aa  107 115 105 116	GMEN
000304  aa  124 136 057 000	T^/

000305  aa  103 141 156 156	Cann
000306  aa  157 164 040 146	ot f
000307  aa  151 156 144 040	ind 
000310  aa  123 123 124 040	SST 
000311  aa  156 141 155 145	name
000312  aa  040 164 141 142	 tab
000313  aa  154 145 056 000	le.

000314  aa  103 141 156 156	Cann
000315  aa  157 164 040 146	ot f
000316  aa  151 156 144 040	ind 
000317  aa  163 145 147 155	segm
000320  aa  145 156 164 040	ent 
000321  aa  136 141 040 151	^a i
000322  aa  156 040 163 154	n sl
000323  aa  164 000 000 000	t

000324  aa  123 123 124 040	SST 
000325  aa  156 141 155 145	name
000326  aa  040 040 164 141	  ta
000327  aa  142 154 145 040	ble 
000330  aa  156 157 164 040	not 
000331  aa  146 151 154 154	fill
000332  aa  145 144 040 151	ed i
000333  aa  156 056 000 000	n.

000334  aa  103 141 156 156	Cann
000335  aa  157 164 040 146	ot f
000336  aa  151 156 144 040	ind 
000337  aa  156 141 155 145	name
000340  aa  137 164 141 142	_tab
000341  aa  154 145 040 146	le f
000342  aa  157 162 040 163	or s
000343  aa  154 164 000 000	lt

000344  aa  162 145 163 164	rest
000345  aa  141 162 164 040	art 
000346  aa  163 145 147 155	segm
000347  aa  145 156 164 137	ent_
000350  aa  156 157 040 151	no i
000351  aa  163 040 156 157	s no
000352  aa  164 040 157 143	t oc
000353  aa  164 141 154 000	tal

000354  aa  162 145 163 164	rest
000355  aa  141 162 164 040	art 
000356  aa  160 162 157 143	proc
000357  aa  145 163 163 137	ess_
000360  aa  156 157 040 151	no i
000361  aa  163 040 156 157	s no
000362  aa  164 040 157 143	t oc
000363  aa  164 141 154 000	tal

000364  aa  165 156 141 142	unab
000365  aa  154 145 040 164	le t
000366  aa  157 040 147 145	o ge
000367  aa  164 040 155 141	t ma
000370  aa  170 040 154 145	x le
000371  aa  156 147 164 150	ngth
000372  aa  040 157 146 040	 of 
000373  aa  136 141 000 000	^a

000374  aa  156 157 040 160	no p
000375  aa  157 151 156 164	oint
000376  aa  145 162 163 040	ers 
000377  aa  162 145 164 165	retu
000400  aa  162 156 145 144	rned
000401  aa  040 146 157 162	 for
000402  aa  040 141 162 147	 arg
000403  aa  040 042 136 141	 "^a
000404  aa  042 000 000 000	"

000405  aa  123 145 147 155	Segm
000406  aa  145 156 164 040	ent 
000407  aa  042 136 141 042	"^a"
000410  aa  054 040 144 145	, de
000411  aa  166 151 143 145	vice
000412  aa  040 042 136 141	 "^a
000413  aa  042 054 040 155	", m
000414  aa  157 144 165 154	odul
000415  aa  145 040 042 136	e "^
000416  aa  141 042 000 000	a"

000417  aa  141 164 164 141	atta
000420  aa  143 150 040 143	ch c
000421  aa  141 154 154 054	all,
000422  aa  040 163 165 142	 sub
000423  aa  055 163 164 141	-sta
000424  aa  164 165 163 040	tus 
000425  aa  136 167 054 040	^w, 
000426  aa  143 157 156 164	cont
000427  aa  141 143 164 040	act 
000430  aa  160 162 157 147	prog
000431  aa  162 141 155 155	ramm
000432  aa  151 156 147 040	ing 
000433  aa  163 164 141 146	staf
000434  aa  146 000 000 000	f

000435  aa  123 145 147 155	Segm
000436  aa  145 156 164 163	ents
000437  aa  040 067 040 141	 7 a
000440  aa  156 144 040 136	nd ^
000441  aa  157 040 156 157	o no
000442  aa  164 040 146 165	t fu
000443  aa  156 143 164 151	ncti
000444  aa  157 156 151 156	onin
000445  aa  147 040 141 163	g as
000446  aa  040 163 154 164	 slt
000447  aa  040 141 156 144	 and
000450  aa  040 156 141 155	 nam
000451  aa  145 137 164 141	e_ta
000452  aa  142 154 145 000	ble

BEGIN PROCEDURE od
PROLOGUE SEQUENCE
000453  aa  6 00567 4401 00	sxl0 	pr6|375
						STATEMENT 1 ON LINE 31
000454  aa   000001 2360 07	ldq  	1,dl
000455  aa  6 00124 7561 00	stq  	pr6|84		num
						STATEMENT 1 ON LINE 96
000456  aa   000002 2360 07	ldq  	2,dl
000457  aa  6 00166 7561 00	stq  	pr6|118		ioargloc
						STATEMENT 1 ON LINE 98
000460  aa  6 00170 4501 00	stz  	pr6|120		restartsw
						STATEMENT 1 ON LINE 103
000461  aa  6 00177 4501 00	stz  	pr6|127		segselsw
000462  aa  6 00200 4501 00	stz  	pr6|128		wants_regs
000463  aa  6 00564 4501 00	stz  	pr6|372
000464  aa   000001 2360 07	ldq  	1,dl
000465  aa  6 00565 7561 00	stq  	pr6|373
000466  aa  6 00564 0541 00	aos  	pr6|372
000467  aa  6 00564 2361 00	ldq  	pr6|372
000470  aa   000001 7360 00	qls  	1
000471  aa   000000 6270 06	eax7 	0,ql
000472  aa   777434 2370 04	ldaq 	-228,ic		000126 = 000000000000 000000000000
000473  aa  6 00240 7571 17	staq 	pr6|160,7		zilch
000474  aa  6 00565 2361 00	ldq  	pr6|373
000475  aa  6 00565 0541 00	aos  	pr6|373
000476  aa   000020 1160 07	cmpq 	16,dl
000477  aa   777767 6040 04	tmi  	-9,ic		000466
000500  aa  6 00567 7201 00	lxl0 	pr6|375
000501  aa   000000 7100 10	tra  	0,0
MAIN SEQUENCE
ENTRY TO od                                                 STATEMENT 1 ON LINE 18
online_dump: od: proc;

000502  da     000270200000
000503  aa   001040 6270 00	eax7 	544
000504  aa  7 00034 3521 20	epp2 	pr7|28,*
000505  aa  2 01045 2721 00	tsp2 	pr2|549		ext_entry
000506  aa     000000000000
000507  aa     000000000000
000510  aa   777743 7000 04	tsx0 	-29,ic		000453
000511  aa   000010 7100 04	tra  	8,ic		000521
ENTRY TO online_dump                                        STATEMENT 1 ON LINE 18
online_dump: od: proc;

000512  da     000273200000
000513  aa   001040 6270 00	eax7 	544
000514  aa  7 00034 3521 20	epp2 	pr7|28,*
000515  aa  2 01045 2721 00	tsp2 	pr2|549		ext_entry
000516  aa     000000000000
000517  aa     000000000000
000520  aa   777733 7000 04	tsx0 	-37,ic		000453
						STATEMENT 1 ON LINE 228
	procname = "online_dump";

000521  aa  040 100 100 404	mlr  	(ic),(pr),fill(040)
000522  aa   777471 00 0013	desc9a	-199,11		000212 = 157156154151
000523  aa  6 00100 00 0020	desc9a	pr6|64,16		procname
						STATEMENT 1 ON LINE 229
	prt = addr (wants_seg (0));

000524  aa  6 00201 3735 00	epp7 	pr6|129		wants_seg
000525  aa  6 00502 6535 00	spri7	pr6|322		prt
						STATEMENT 1 ON LINE 230
	prt -> ws16x72 = zilch;

000526  aa  000 100 100 500	mlr  	(pr),(pr),fill(000)
000527  aa  6 00242 00 0200	desc9a	pr6|162,128	zilch
000530  aa  7 00000 00 0200	desc9a	pr7|0,128		ws16x72
						STATEMENT 1 ON LINE 231
	fnp_only = "0"b;

000531  aa  6 00303 4501 00	stz  	pr6|195		fnp_only
						STATEMENT 1 ON LINE 232
	go to get_erfno;

000532  aa   000033 7100 04	tra  	27,ic		000565
ENTRY TO od_355                                             STATEMENT 1 ON LINE 234
online_dump_355: od_355: entry;

000533  da     000300200000
000534  aa   001040 6270 00	eax7 	544
000535  aa  7 00034 3521 20	epp2 	pr7|28,*
000536  aa  2 01045 2721 00	tsp2 	pr2|549		ext_entry
000537  aa     000000000000
000540  aa     000000000000
000541  aa   777712 7000 04	tsx0 	-54,ic		000453
000542  aa   000010 7100 04	tra  	8,ic		000552
ENTRY TO online_dump_355                                    STATEMENT 1 ON LINE 234
online_dump_355: od_355: entry;

000543  da     000307200000
000544  aa   001040 6270 00	eax7 	544
000545  aa  7 00034 3521 20	epp2 	pr7|28,*
000546  aa  2 01045 2721 00	tsp2 	pr2|549		ext_entry
000547  aa     000000000000
000550  aa     000000000000
000551  aa   777702 7000 04	tsx0 	-62,ic		000453
						STATEMENT 1 ON LINE 235
	procname = "online_dump_355";

000552  aa  040 100 100 404	mlr  	(ic),(pr),fill(040)
000553  aa   777477 00 0017	desc9a	-193,15		000251 = 157156154151
000554  aa  6 00100 00 0020	desc9a	pr6|64,16		procname
						STATEMENT 1 ON LINE 236
	fnp_only = "1"b;

000555  aa   400000 2350 03	lda  	131072,du
000556  aa  6 00303 7551 00	sta  	pr6|195		fnp_only
						STATEMENT 1 ON LINE 237
	fnp_index = 1;

000557  aa   000001 2360 07	ldq  	1,dl
000560  aa  6 00174 7561 00	stq  	pr6|124		fnp_index
						STATEMENT 1 ON LINE 238
	tag = "a";

000561  aa   141000 2350 03	lda  	49664,du
000562  aa  6 00175 7551 00	sta  	pr6|125		tag
						STATEMENT 1 ON LINE 239
	all_fnps = "1"b;

000563  aa   400000 2350 03	lda  	131072,du
000564  aa  6 00176 7551 00	sta  	pr6|126		all_fnps
						STATEMENT 1 ON LINE 241
get_erfno: call cu_$arg_ptr (1, argp, argl, code);

000565  aa   000001 2360 07	ldq  	1,dl
000566  aa  6 00570 7561 00	stq  	pr6|376
000567  aa  6 00570 3521 00	epp2 	pr6|376
000570  aa  6 00574 2521 00	spri2	pr6|380
000571  aa  6 00104 3521 00	epp2 	pr6|68		argp
000572  aa  6 00576 2521 00	spri2	pr6|382
000573  aa  6 00106 3521 00	epp2 	pr6|70		argl
000574  aa  6 00600 2521 00	spri2	pr6|384
000575  aa  6 00162 3521 00	epp2 	pr6|114		code
000576  aa  6 00602 2521 00	spri2	pr6|386
000577  aa  6 00572 6211 00	eax1 	pr6|378
000600  aa   020000 4310 07	fld  	8192,dl
000601  aa  6 00044 3701 20	epp4 	pr6|36,*
000602  la  4 00716 3521 20	epp2 	pr4|462,*		cu_$arg_ptr
000603  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 242
	if code ^= 0
	then do;

000604  aa  6 00162 2361 00	ldq  	pr6|114		code
000605  aa   000025 6000 04	tze  	21,ic		000632
						STATEMENT 1 ON LINE 244
	     call com_err_ (code, procname, "ERF #");

000606  aa   777374 2370 04	ldaq 	-260,ic		000202 = 105122106040 043000000000
000607  aa  6 00604 7571 00	staq 	pr6|388
000610  aa  6 00162 3521 00	epp2 	pr6|114		code
000611  aa  6 00610 2521 00	spri2	pr6|392
000612  aa  6 00100 3521 00	epp2 	pr6|64		procname
000613  aa  6 00612 2521 00	spri2	pr6|394
000614  aa  6 00604 3521 00	epp2 	pr6|388
000615  aa  6 00614 2521 00	spri2	pr6|396
000616  aa   777305 3520 04	epp2 	-315,ic		000123 = 404000000043
000617  aa  6 00616 2521 00	spri2	pr6|398
000620  aa   777302 3520 04	epp2 	-318,ic		000122 = 526000000020
000621  aa  6 00620 2521 00	spri2	pr6|400
000622  aa   777277 3520 04	epp2 	-321,ic		000121 = 524000000005
000623  aa  6 00622 2521 00	spri2	pr6|402
000624  aa  6 00606 6211 00	eax1 	pr6|390
000625  aa   014000 4310 07	fld  	6144,dl
000626  aa  6 00044 3701 20	epp4 	pr6|36,*
000627  la  4 00664 3521 20	epp2 	pr4|436,*		com_err_
000630  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 245
	     return;

000631  aa  0 00631 7101 00	tra  	pr0|409		return
						STATEMENT 1 ON LINE 246
	end;

						STATEMENT 1 ON LINE 248
	if ^fnp_only then erf_no = arg;

000632  aa  6 00303 2351 00	lda  	pr6|195		fnp_only
000633  aa   000007 6010 04	tnz  	7,ic		000642
000634  aa  6 00104 3735 20	epp7 	pr6|68,*		argp
000635  aa  6 00106 7271 00	lxl7 	pr6|70		argl
000636  aa  040 100 100 540	mlr  	(pr,rl),(pr),fill(040)
000637  aa  7 00000 00 0017	desc9a	pr7|0,x7		arg
000640  aa  6 00107 00 0022	desc9a	pr6|71,18		erf_no
000641  aa   000017 7100 04	tra  	15,ic		000660
						STATEMENT 1 ON LINE 249
	else erf_no = arg || ".355";

000642  aa  6 00106 2361 00	ldq  	pr6|70		argl
000643  aa   000004 0760 07	adq  	4,dl
000644  aa  0 00551 7001 00	tsx0 	pr0|361		alloc_cs
000645  aa  6 00104 3735 20	epp7 	pr6|68,*		argp
000646  aa  6 00106 7271 00	lxl7 	pr6|70		argl
000647  aa  040 140 100 540	mlr  	(pr,rl),(pr,rl),fill(040)
000650  aa  7 00000 00 0017	desc9a	pr7|0,x7		arg
000651  aa  2 00000 00 0017	desc9a	pr2|0,x7
000652  aa  040 117 100 404	mlr  	(ic),(pr,x7),fill(040)
000653  aa   777246 00 0004	desc9a	-346,4		000120 = 056063065065
000654  aa  2 00000 00 0004	desc9a	pr2|0,4
000655  aa  040 100 100 540	mlr  	(pr,rl),(pr),fill(040)
000656  aa  2 00000 00 0006	desc9a	pr2|0,ql
000657  aa  6 00107 00 0022	desc9a	pr6|71,18		erf_no
						STATEMENT 1 ON LINE 250
	call get_dump_ptrs_ (erf_no, ptr_array, len_array, j, name);

000660  aa  0 01014 7001 00	tsx0 	pr0|524		shorten_stack
000661  aa  6 00107 3521 00	epp2 	pr6|71		erf_no
000662  aa  6 00626 2521 00	spri2	pr6|406
000663  aa  6 00314 3521 00	epp2 	pr6|204		ptr_array
000664  aa  6 00630 2521 00	spri2	pr6|408
000665  aa  6 00414 3521 00	epp2 	pr6|268		len_array
000666  aa  6 00632 2521 00	spri2	pr6|410
000667  aa  6 00520 3521 00	epp2 	pr6|336		j
000670  aa  6 00634 2521 00	spri2	pr6|412
000671  aa  6 00114 3521 00	epp2 	pr6|76		name
000672  aa  6 00636 2521 00	spri2	pr6|414
000673  aa   777224 3520 04	epp2 	-364,ic		000117 = 524000000022
000674  aa  6 00640 2521 00	spri2	pr6|416
000675  aa   777350 3520 04	epp2 	-280,ic		000245 = 464100000000
000676  aa  6 00642 2521 00	spri2	pr6|418
000677  aa   777342 3520 04	epp2 	-286,ic		000241 = 404100000021
000700  aa  6 00644 2521 00	spri2	pr6|420
000701  aa   777223 3520 04	epp2 	-365,ic		000124 = 404000000021
000702  aa  6 00646 2521 00	spri2	pr6|422
000703  aa   777213 3520 04	epp2 	-373,ic		000116 = 524000000040
000704  aa  6 00650 2521 00	spri2	pr6|424
000705  aa  6 00624 6211 00	eax1 	pr6|404
000706  aa   024000 4310 07	fld  	10240,dl
000707  aa  6 00044 3701 20	epp4 	pr6|36,*
000710  la  4 00646 3521 20	epp2 	pr4|422,*		get_dump_ptrs_
000711  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 251
	if j = 0
	then do;

000712  aa  6 00520 2361 00	ldq  	pr6|336		j
000713  aa   000033 6010 04	tnz  	27,ic		000746
						STATEMENT 1 ON LINE 253
	     call com_err_ (0, procname, "no pointers returned for arg ""^a""", erf_no);

000714  aa  6 00570 4501 00	stz  	pr6|376
000715  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
000716  aa   777457 00 0044	desc9a	-209,36		000374 = 156157040160
000717  aa  6 00572 00 0044	desc9a	pr6|378,36
000720  aa  6 00570 3521 00	epp2 	pr6|376
000721  aa  6 00626 2521 00	spri2	pr6|406
000722  aa  6 00100 3521 00	epp2 	pr6|64		procname
000723  aa  6 00630 2521 00	spri2	pr6|408
000724  aa  6 00572 3521 00	epp2 	pr6|378
000725  aa  6 00632 2521 00	spri2	pr6|410
000726  aa  6 00107 3521 00	epp2 	pr6|71		erf_no
000727  aa  6 00634 2521 00	spri2	pr6|412
000730  aa   777165 3520 04	epp2 	-395,ic		000115 = 404000000005
000731  aa  6 00636 2521 00	spri2	pr6|414
000732  aa   777170 3520 04	epp2 	-392,ic		000122 = 526000000020
000733  aa  6 00640 2521 00	spri2	pr6|416
000734  aa   777160 3520 04	epp2 	-400,ic		000114 = 524000000041
000735  aa  6 00642 2521 00	spri2	pr6|418
000736  aa   777161 3520 04	epp2 	-399,ic		000117 = 524000000022
000737  aa  6 00644 2521 00	spri2	pr6|420
000740  aa  6 00624 6211 00	eax1 	pr6|404
000741  aa   020000 4310 07	fld  	8192,dl
000742  aa  6 00044 3701 20	epp4 	pr6|36,*
000743  la  4 00664 3521 20	epp2 	pr4|436,*		com_err_
000744  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 254
	     return;

000745  aa  0 00631 7101 00	tra  	pr0|409		return
						STATEMENT 1 ON LINE 255
	end;

						STATEMENT 1 ON LINE 257
	ptr_array (j) = null;

000746  aa   000001 7360 00	qls  	1
000747  aa   000000 6270 06	eax7 	0,ql
000750  aa   777230 2370 04	ldaq 	-360,ic		000200 = 077777000043 000001000000
000751  aa  6 00314 7571 17	staq 	pr6|204,7		ptr_array
						STATEMENT 1 ON LINE 258
	dumpptr = ptr_array (0);

000752  aa  6 00314 3735 20	epp7 	pr6|204,*		ptr_array
000753  aa  6 00560 6535 00	spri7	pr6|368		dumpptr
						STATEMENT 1 ON LINE 259
	call hcs_$get_max_length_seg (dumpptr, wps, code);

000754  aa  6 00560 3521 00	epp2 	pr6|368		dumpptr
000755  aa  6 00574 2521 00	spri2	pr6|380
000756  aa  6 00044 3701 20	epp4 	pr6|36,*
000757  ia  4 00237 3521 00	epp2 	pr4|159		wps
000760  aa  6 00576 2521 00	spri2	pr6|382
000761  aa  6 00162 3521 00	epp2 	pr6|114		code
000762  aa  6 00600 2521 00	spri2	pr6|384
000763  aa  6 00572 6211 00	eax1 	pr6|378
000764  aa   014000 4310 07	fld  	6144,dl
000765  la  4 00660 3521 20	epp2 	pr4|432,*		hcs_$get_max_length_seg
000766  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 260
	if code ^= 0 then do;

000767  aa  6 00162 2361 00	ldq  	pr6|114		code
000770  aa   000032 6000 04	tze  	26,ic		001022
						STATEMENT 1 ON LINE 261
	     call com_err_ (code, procname, "unable to get max length of ^a", name);

000771  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
000772  aa   777373 00 0040	desc9a	-261,32		000364 = 165156141142
000773  aa  6 00572 00 0040	desc9a	pr6|378,32
000774  aa  6 00162 3521 00	epp2 	pr6|114		code
000775  aa  6 00626 2521 00	spri2	pr6|406
000776  aa  6 00100 3521 00	epp2 	pr6|64		procname
000777  aa  6 00630 2521 00	spri2	pr6|408
001000  aa  6 00572 3521 00	epp2 	pr6|378
001001  aa  6 00632 2521 00	spri2	pr6|410
001002  aa  6 00114 3521 00	epp2 	pr6|76		name
001003  aa  6 00634 2521 00	spri2	pr6|412
001004  aa   777117 3520 04	epp2 	-433,ic		000123 = 404000000043
001005  aa  6 00636 2521 00	spri2	pr6|414
001006  aa   777114 3520 04	epp2 	-436,ic		000122 = 526000000020
001007  aa  6 00640 2521 00	spri2	pr6|416
001010  aa   777103 3520 04	epp2 	-445,ic		000113 = 524000000036
001011  aa  6 00642 2521 00	spri2	pr6|418
001012  aa   777104 3520 04	epp2 	-444,ic		000116 = 524000000040
001013  aa  6 00644 2521 00	spri2	pr6|420
001014  aa  6 00624 6211 00	eax1 	pr6|404
001015  aa   020000 4310 07	fld  	8192,dl
001016  aa  6 00044 3701 20	epp4 	pr6|36,*
001017  la  4 00664 3521 20	epp2 	pr4|436,*		com_err_
001020  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 262
	     return;

001021  aa  0 00631 7101 00	tra  	pr0|409		return
						STATEMENT 1 ON LINE 263
	end;

						STATEMENT 1 ON LINE 266
get_args:
	argno = 1;

001022  aa   000001 2360 07	ldq  	1,dl
001023  aa  6 00302 7561 00	stq  	pr6|194		argno
						STATEMENT 1 ON LINE 269
next_arg:
	argno = argno + 1;

001024  aa  6 00302 0541 00	aos  	pr6|194		argno
						STATEMENT 1 ON LINE 271
	call cu_$arg_ptr (argno, argp, argl, code);

001025  aa  6 00302 3521 00	epp2 	pr6|194		argno
001026  aa  6 00574 2521 00	spri2	pr6|380
001027  aa  6 00104 3521 00	epp2 	pr6|68		argp
001030  aa  6 00576 2521 00	spri2	pr6|382
001031  aa  6 00106 3521 00	epp2 	pr6|70		argl
001032  aa  6 00600 2521 00	spri2	pr6|384
001033  aa  6 00162 3521 00	epp2 	pr6|114		code
001034  aa  6 00602 2521 00	spri2	pr6|386
001035  aa  6 00572 6211 00	eax1 	pr6|378
001036  aa   020000 4310 07	fld  	8192,dl
001037  aa  6 00044 3701 20	epp4 	pr6|36,*
001040  la  4 00716 3521 20	epp2 	pr4|462,*		cu_$arg_ptr
001041  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 272
	if code ^= 0 | argl = 0 then do;

001042  aa  6 00162 2361 00	ldq  	pr6|114		code
001043  aa   000003 6010 04	tnz  	3,ic		001046
001044  aa  6 00106 2361 00	ldq  	pr6|70		argl
001045  aa   000004 6010 04	tnz  	4,ic		001051
						STATEMENT 1 ON LINE 273
	     if fnp_only then go to no_more_segs;

001046  aa  6 00303 2351 00	lda  	pr6|195		fnp_only
001047  aa   002071 6010 04	tnz  	1081,ic		003140
						STATEMENT 1 ON LINE 274
	     else go to no_more_args;

001050  aa   000450 7100 04	tra  	296,ic		001520
						STATEMENT 1 ON LINE 275
	end;

						STATEMENT 1 ON LINE 277
	if arg = "-dim" then do;

001051  aa  6 00104 3735 20	epp7 	pr6|68,*		argp
001052  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
001053  aa  7 00000 00 0006	desc9a	pr7|0,ql		arg
001054  aa   777040 00 0004	desc9a	-480,4		000112 = 055144151155
001055  aa   000035 6010 04	tnz  	29,ic		001112
						STATEMENT 1 ON LINE 278
	     argno = argno + 1;

001056  aa  6 00302 0541 00	aos  	pr6|194		argno
						STATEMENT 1 ON LINE 279
	     call cu_$arg_ptr (argno, argp, argl, code);

001057  aa  6 00302 3521 00	epp2 	pr6|194		argno
001060  aa  6 00574 2521 00	spri2	pr6|380
001061  aa  6 00104 3521 00	epp2 	pr6|68		argp
001062  aa  6 00576 2521 00	spri2	pr6|382
001063  aa  6 00106 3521 00	epp2 	pr6|70		argl
001064  aa  6 00600 2521 00	spri2	pr6|384
001065  aa  6 00162 3521 00	epp2 	pr6|114		code
001066  aa  6 00602 2521 00	spri2	pr6|386
001067  aa  6 00572 6211 00	eax1 	pr6|378
001070  aa   020000 4310 07	fld  	8192,dl
001071  aa  6 00044 3701 20	epp4 	pr6|36,*
001072  la  4 00716 3521 20	epp2 	pr4|462,*		cu_$arg_ptr
001073  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 280
	     if code ^= 0 | argl = 0 then do;

001074  aa  6 00162 2361 00	ldq  	pr6|114		code
001075  aa   000003 6010 04	tnz  	3,ic		001100
001076  aa  6 00106 2361 00	ldq  	pr6|70		argl
001077  aa   000005 6010 04	tnz  	5,ic		001104
						STATEMENT 1 ON LINE 281
		seg_id = "dim";

001100  aa  040 100 100 404	mlr  	(ic),(pr),fill(040)
001101  aa   777011 00 0003	desc9a	-503,3		000111 = 144151155000
001102  aa  6 00304 00 0040	desc9a	pr6|196,32	seg_id
						STATEMENT 1 ON LINE 282
		go to call_com;

001103  aa   000325 7100 04	tra  	213,ic		001430
						STATEMENT 1 ON LINE 283
	     end;

						STATEMENT 1 ON LINE 284
	     iotype = arg;

001104  aa  6 00044 3701 20	epp4 	pr6|36,*
001105  aa  6 00104 3735 20	epp7 	pr6|68,*		argp
001106  aa  040 100 100 540	mlr  	(pr,rl),(pr),fill(040)
001107  aa  7 00000 00 0006	desc9a	pr7|0,ql		arg
001110  ia  4 00062 00 0250	desc9a	pr4|50,168	iotype
						STATEMENT 1 ON LINE 285
	end;

001111  aa   777713 7100 04	tra  	-53,ic		001024
						STATEMENT 1 ON LINE 287
	else if arg = "-dev" then do;

001112  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
001113  aa  7 00000 00 0006	desc9a	pr7|0,ql		arg
001114  aa   776776 00 0004	desc9a	-514,4		000110 = 055144145166
001115  aa   000035 6010 04	tnz  	29,ic		001152
						STATEMENT 1 ON LINE 288
	     argno = argno + 1;

001116  aa  6 00302 0541 00	aos  	pr6|194		argno
						STATEMENT 1 ON LINE 289
	     call cu_$arg_ptr (argno, argp, argl, code);

001117  aa  6 00302 3521 00	epp2 	pr6|194		argno
001120  aa  6 00574 2521 00	spri2	pr6|380
001121  aa  6 00104 3521 00	epp2 	pr6|68		argp
001122  aa  6 00576 2521 00	spri2	pr6|382
001123  aa  6 00106 3521 00	epp2 	pr6|70		argl
001124  aa  6 00600 2521 00	spri2	pr6|384
001125  aa  6 00162 3521 00	epp2 	pr6|114		code
001126  aa  6 00602 2521 00	spri2	pr6|386
001127  aa  6 00572 6211 00	eax1 	pr6|378
001130  aa   020000 4310 07	fld  	8192,dl
001131  aa  6 00044 3701 20	epp4 	pr6|36,*
001132  la  4 00716 3521 20	epp2 	pr4|462,*		cu_$arg_ptr
001133  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 290
	     if code ^= 0 | argl = 0 then do;

001134  aa  6 00162 2361 00	ldq  	pr6|114		code
001135  aa   000003 6010 04	tnz  	3,ic		001140
001136  aa  6 00106 2361 00	ldq  	pr6|70		argl
001137  aa   000005 6010 04	tnz  	5,ic		001144
						STATEMENT 1 ON LINE 291
		seg_id = "device";

001140  aa  040 100 100 404	mlr  	(ic),(pr),fill(040)
001141  aa   777036 00 0006	desc9a	-482,6		000176 = 144145166151
001142  aa  6 00304 00 0040	desc9a	pr6|196,32	seg_id
						STATEMENT 1 ON LINE 292
		go to call_com;

001143  aa   000265 7100 04	tra  	181,ic		001430
						STATEMENT 1 ON LINE 293
	     end;

						STATEMENT 1 ON LINE 294
	     ioname2 = arg;

001144  aa  6 00044 3701 20	epp4 	pr6|36,*
001145  aa  6 00104 3735 20	epp7 	pr6|68,*		argp
001146  aa  040 100 100 540	mlr  	(pr,rl),(pr),fill(040)
001147  aa  7 00000 00 0006	desc9a	pr7|0,ql		arg
001150  ia  4 00134 00 0250	desc9a	pr4|92,168	ioname2
						STATEMENT 1 ON LINE 295
	end;

001151  aa   777653 7100 04	tra  	-85,ic		001024
						STATEMENT 1 ON LINE 297
	else if arg = "-restart" & ^fnp_only then do;

001152  aa  6 00303 2351 00	lda  	pr6|195		fnp_only
001153  aa  0 00002 6751 00	era  	pr0|2		= 400000000000
001154  aa  6 00570 7551 00	sta  	pr6|376
001155  aa   000144 6000 04	tze  	100,ic		001321
001156  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
001157  aa  7 00000 00 0006	desc9a	pr7|0,ql		arg
001160  aa   777016 00 0010	desc9a	-498,8		000174 = 055162145163
001161  aa   000140 6010 04	tnz  	96,ic		001321
						STATEMENT 1 ON LINE 298
	     restartsw = "1"b;

001162  aa   400000 2350 03	lda  	131072,du
001163  aa  6 00170 7551 00	sta  	pr6|120		restartsw
						STATEMENT 1 ON LINE 299
	     argno = argno + 1;

001164  aa  6 00302 0541 00	aos  	pr6|194		argno
						STATEMENT 1 ON LINE 300
	     call cu_$arg_ptr (argno, argp, argl, code);

001165  aa  6 00302 3521 00	epp2 	pr6|194		argno
001166  aa  6 00574 2521 00	spri2	pr6|380
001167  aa  6 00104 3521 00	epp2 	pr6|68		argp
001170  aa  6 00576 2521 00	spri2	pr6|382
001171  aa  6 00106 3521 00	epp2 	pr6|70		argl
001172  aa  6 00600 2521 00	spri2	pr6|384
001173  aa  6 00162 3521 00	epp2 	pr6|114		code
001174  aa  6 00602 2521 00	spri2	pr6|386
001175  aa  6 00572 6211 00	eax1 	pr6|378
001176  aa   020000 4310 07	fld  	8192,dl
001177  aa  6 00044 3701 20	epp4 	pr6|36,*
001200  la  4 00716 3521 20	epp2 	pr4|462,*		cu_$arg_ptr
001201  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 301
	     if code ^= 0 | argl = 0 then do;

001202  aa  6 00162 2361 00	ldq  	pr6|114		code
001203  aa   000003 6010 04	tnz  	3,ic		001206
001204  aa  6 00106 2361 00	ldq  	pr6|70		argl
001205  aa   000005 6010 04	tnz  	5,ic		001212
						STATEMENT 1 ON LINE 302
		seg_id = "restart process_number";

001206  aa  040 100 100 404	mlr  	(ic),(pr),fill(040)
001207  aa   777062 00 0026	desc9a	-462,22		000270 = 162145163164
001210  aa  6 00304 00 0040	desc9a	pr6|196,32	seg_id
						STATEMENT 1 ON LINE 303
		go to call_com;

001211  aa   000217 7100 04	tra  	143,ic		001430
						STATEMENT 1 ON LINE 304
	     end;

						STATEMENT 1 ON LINE 305
	     rt_proc_no = cv_oct_check_ (arg, i);

001212  aa   526000 2760 03	orq  	175104,du
001213  aa  6 00571 7561 00	stq  	pr6|377
001214  aa  6 00104 3521 20	epp2 	pr6|68,*		arg
001215  aa  6 00610 2521 00	spri2	pr6|392
001216  aa  6 00517 3521 00	epp2 	pr6|335		i
001217  aa  6 00612 2521 00	spri2	pr6|394
001220  aa  6 00172 3521 00	epp2 	pr6|122		rt_proc_no
001221  aa  6 00614 2521 00	spri2	pr6|396
001222  aa  6 00571 3521 00	epp2 	pr6|377
001223  aa  6 00616 2521 00	spri2	pr6|398
001224  aa   776700 3520 04	epp2 	-576,ic		000124 = 404000000021
001225  aa  6 00620 2521 00	spri2	pr6|400
001226  aa  6 00622 2521 00	spri2	pr6|402
001227  aa  6 00606 6211 00	eax1 	pr6|390
001230  aa   014000 4310 07	fld  	6144,dl
001231  aa  6 00044 3701 20	epp4 	pr6|36,*
001232  la  4 00720 3521 20	epp2 	pr4|464,*		cv_oct_check_
001233  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 306
	     if i ^= 0 then do;

001234  aa  6 00517 2361 00	ldq  	pr6|335		i
001235  aa   000005 6000 04	tze  	5,ic		001242
						STATEMENT 1 ON LINE 307
		seg_id = "restart process_no is not octal";

001236  aa  040 100 100 404	mlr  	(ic),(pr),fill(040)
001237  aa   777116 00 0037	desc9a	-434,31		000354 = 162145163164
001240  aa  6 00304 00 0040	desc9a	pr6|196,32	seg_id
						STATEMENT 1 ON LINE 308
		go to call_com_oct;

001241  aa   000217 7100 04	tra  	143,ic		001460
						STATEMENT 1 ON LINE 309
	     end;

						STATEMENT 1 ON LINE 310
	     argno = argno + 1;

001242  aa  6 00302 0541 00	aos  	pr6|194		argno
						STATEMENT 1 ON LINE 311
	     call cu_$arg_ptr (argno, argp, argl, code);

001243  aa  6 00302 3521 00	epp2 	pr6|194		argno
001244  aa  6 00574 2521 00	spri2	pr6|380
001245  aa  6 00104 3521 00	epp2 	pr6|68		argp
001246  aa  6 00576 2521 00	spri2	pr6|382
001247  aa  6 00106 3521 00	epp2 	pr6|70		argl
001250  aa  6 00600 2521 00	spri2	pr6|384
001251  aa  6 00162 3521 00	epp2 	pr6|114		code
001252  aa  6 00602 2521 00	spri2	pr6|386
001253  aa  6 00572 6211 00	eax1 	pr6|378
001254  aa   020000 4310 07	fld  	8192,dl
001255  aa  6 00044 3701 20	epp4 	pr6|36,*
001256  la  4 00716 3521 20	epp2 	pr4|462,*		cu_$arg_ptr
001257  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 312
	     if code ^= 0 | argl = 0 then do;

001260  aa  6 00162 2361 00	ldq  	pr6|114		code
001261  aa   000003 6010 04	tnz  	3,ic		001264
001262  aa  6 00106 2361 00	ldq  	pr6|70		argl
001263  aa   000005 6010 04	tnz  	5,ic		001270
						STATEMENT 1 ON LINE 313
		seg_id = "restart segment number";

001264  aa  040 100 100 404	mlr  	(ic),(pr),fill(040)
001265  aa   776776 00 0026	desc9a	-514,22		000262 = 162145163164
001266  aa  6 00304 00 0040	desc9a	pr6|196,32	seg_id
						STATEMENT 1 ON LINE 314
		go to call_com;

001267  aa   000141 7100 04	tra  	97,ic		001430
						STATEMENT 1 ON LINE 315
	     end;

						STATEMENT 1 ON LINE 316
	     rt_seg_no = cv_oct_check_ (arg, i);

001270  aa   526000 2760 03	orq  	175104,du
001271  aa  6 00571 7561 00	stq  	pr6|377
001272  aa  6 00104 3521 20	epp2 	pr6|68,*		arg
001273  aa  6 00610 2521 00	spri2	pr6|392
001274  aa  6 00517 3521 00	epp2 	pr6|335		i
001275  aa  6 00612 2521 00	spri2	pr6|394
001276  aa  6 00171 3521 00	epp2 	pr6|121		rt_seg_no
001277  aa  6 00614 2521 00	spri2	pr6|396
001300  aa  6 00571 3521 00	epp2 	pr6|377
001301  aa  6 00616 2521 00	spri2	pr6|398
001302  aa   776622 3520 04	epp2 	-622,ic		000124 = 404000000021
001303  aa  6 00620 2521 00	spri2	pr6|400
001304  aa  6 00622 2521 00	spri2	pr6|402
001305  aa  6 00606 6211 00	eax1 	pr6|390
001306  aa   014000 4310 07	fld  	6144,dl
001307  aa  6 00044 3701 20	epp4 	pr6|36,*
001310  la  4 00720 3521 20	epp2 	pr4|464,*		cv_oct_check_
001311  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 317
	     if i ^= 0 then do;

001312  aa  6 00517 2361 00	ldq  	pr6|335		i
001313  aa   777511 6000 04	tze  	-183,ic		001024
						STATEMENT 1 ON LINE 318
		seg_id = "restart segment_no is not octal";

001314  aa  040 100 100 404	mlr  	(ic),(pr),fill(040)
001315  aa   777030 00 0037	desc9a	-488,31		000344 = 162145163164
001316  aa  6 00304 00 0040	desc9a	pr6|196,32	seg_id
						STATEMENT 1 ON LINE 319
		go to call_com_oct;

001317  aa   000141 7100 04	tra  	97,ic		001460
						STATEMENT 1 ON LINE 320
	     end;

						STATEMENT 1 ON LINE 321
	end;

001320  aa   777504 7100 04	tra  	-188,ic		001024
						STATEMENT 1 ON LINE 323
	else if arg = "-segs" & ^fnp_only then do;

001321  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
001322  aa  7 00000 00 0006	desc9a	pr7|0,ql		arg
001323  aa   776651 00 0005	desc9a	-599,5		000172 = 055163145147
001324  aa   000006 6010 04	tnz  	6,ic		001332
001325  aa   400000 3150 03	cana 	131072,du
001326  aa   000004 6000 04	tze  	4,ic		001332
						STATEMENT 1 ON LINE 324
	     segselsw = "1"b;

001327  aa   400000 2350 03	lda  	131072,du
001330  aa  6 00177 7551 00	sta  	pr6|127		segselsw
						STATEMENT 1 ON LINE 325
	end;

001331  aa   777473 7100 04	tra  	-197,ic		001024
						STATEMENT 1 ON LINE 327
	else if arg = "-tag" & fnp_only then do;

001332  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
001333  aa  7 00000 00 0006	desc9a	pr7|0,ql		arg
001334  aa   776554 00 0004	desc9a	-660,4		000106 = 055164141147
001335  aa   000063 6010 04	tnz  	51,ic		001420
001336  aa  6 00303 2351 00	lda  	pr6|195		fnp_only
001337  aa   000061 6000 04	tze  	49,ic		001420
						STATEMENT 1 ON LINE 328
	     argno = argno + 1;

001340  aa  6 00302 0541 00	aos  	pr6|194		argno
						STATEMENT 1 ON LINE 329
	     call cu_$arg_ptr (argno, argp, argl, code);

001341  aa  6 00302 3521 00	epp2 	pr6|194		argno
001342  aa  6 00574 2521 00	spri2	pr6|380
001343  aa  6 00104 3521 00	epp2 	pr6|68		argp
001344  aa  6 00576 2521 00	spri2	pr6|382
001345  aa  6 00106 3521 00	epp2 	pr6|70		argl
001346  aa  6 00600 2521 00	spri2	pr6|384
001347  aa  6 00162 3521 00	epp2 	pr6|114		code
001350  aa  6 00602 2521 00	spri2	pr6|386
001351  aa  6 00572 6211 00	eax1 	pr6|378
001352  aa   020000 4310 07	fld  	8192,dl
001353  aa  6 00044 3701 20	epp4 	pr6|36,*
001354  la  4 00716 3521 20	epp2 	pr4|462,*		cu_$arg_ptr
001355  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 330
	     if code ^= 0 | argl = 0 then do;

001356  aa  6 00162 2361 00	ldq  	pr6|114		code
001357  aa   000003 6010 04	tnz  	3,ic		001362
001360  aa  6 00106 2361 00	ldq  	pr6|70		argl
001361  aa   000005 6010 04	tnz  	5,ic		001366
						STATEMENT 1 ON LINE 331
		seg_id = "tag";

001362  aa  040 100 100 404	mlr  	(ic),(pr),fill(040)
001363  aa   776523 00 0003	desc9a	-685,3		000105 = 164141147000
001364  aa  6 00304 00 0040	desc9a	pr6|196,32	seg_id
						STATEMENT 1 ON LINE 332
		go to call_com;

001365  aa   000043 7100 04	tra  	35,ic		001430
						STATEMENT 1 ON LINE 333
	     end;

						STATEMENT 1 ON LINE 335
	     tag = arg;

001366  aa  6 00175 4501 00	stz  	pr6|125		tag
001367  aa  6 00104 3735 20	epp7 	pr6|68,*		argp
001370  aa  040 100 100 540	mlr  	(pr,rl),(pr),fill(040)
001371  aa  7 00000 00 0006	desc9a	pr7|0,ql		arg
001372  aa  6 00175 00 0001	desc9a	pr6|125,1		tag
						STATEMENT 1 ON LINE 336
	     all_fnps = "0"b;

001373  aa  6 00176 4501 00	stz  	pr6|126		all_fnps
						STATEMENT 1 ON LINE 337
	     fnp_index = index ("abcdefgh", tag);

001374  aa  000 100 124 404	scm  	(ic),(pr),mask(000)
001375  aa   776574 00 0010	desc9a	-644,8		000170 = 141142143144
001376  aa  6 00175 00 0001	desc9a	pr6|125,1		tag
001377  aa  6 00056 0001 00	arg  	pr6|46
001400  aa  6 00056 2361 00	ldq  	pr6|46
001401  aa   000002 6070 04	ttf  	2,ic		001403
001402  aa   000001 3360 07	lcq  	1,dl
001403  aa   000001 0760 07	adq  	1,dl
001404  aa  6 00174 7561 00	stq  	pr6|124		fnp_index
						STATEMENT 1 ON LINE 338
	     if fnp_index = 0 then do;

001405  aa   000005 6010 04	tnz  	5,ic		001412
						STATEMENT 1 ON LINE 339
		seg_id = "invalid tag";

001406  aa  040 100 100 404	mlr  	(ic),(pr),fill(040)
001407  aa   776601 00 0013	desc9a	-639,11		000207 = 151156166141
001410  aa  6 00304 00 0040	desc9a	pr6|196,32	seg_id
						STATEMENT 1 ON LINE 340
		go to call_com_oct;

001411  aa   000047 7100 04	tra  	39,ic		001460
						STATEMENT 1 ON LINE 341
	     end;

						STATEMENT 1 ON LINE 343
	     dumpptr = addrel (dumpptr, fnp_size* (fnp_index-1));

001412  aa   000001 1760 07	sbq  	1,dl
001413  aa   040000 4020 07	mpy  	16384,dl
001414  aa  6 00560 3521 66	epp2 	pr6|368,*ql	dumpptr
001415  aa   000000 0520 03	adwp2	0,du
001416  aa  6 00560 2521 00	spri2	pr6|368		dumpptr
						STATEMENT 1 ON LINE 344
	end;

001417  aa   777405 7100 04	tra  	-251,ic		001024
						STATEMENT 1 ON LINE 346
	else do;

						STATEMENT 1 ON LINE 347
	     seg_id = arg;

001420  aa  040 100 100 540	mlr  	(pr,rl),(pr),fill(040)
001421  aa  7 00000 00 0006	desc9a	pr7|0,ql		arg
001422  aa  6 00304 00 0040	desc9a	pr6|196,32	seg_id
						STATEMENT 1 ON LINE 348
	     code = error_table_$badopt;

001423  aa  6 00044 3701 20	epp4 	pr6|36,*
001424  la  4 00644 2361 20	ldq  	pr4|420,*		error_table_$badopt
001425  aa  6 00162 7561 00	stq  	pr6|114		code
						STATEMENT 1 ON LINE 349
	     go to call_com;

001426  aa   000002 7100 04	tra  	2,ic		001430
						STATEMENT 1 ON LINE 350
	end;

						STATEMENT 1 ON LINE 352
	go to next_arg;

001427  aa   777375 7100 04	tra  	-259,ic		001024
						STATEMENT 1 ON LINE 354
call_com:
	call com_err_ (code, procname, "^a", seg_id);

001430  aa   136141 2350 03	lda  	48225,du
001431  aa  6 00570 7551 00	sta  	pr6|376
001432  aa  6 00162 3521 00	epp2 	pr6|114		code
001433  aa  6 00626 2521 00	spri2	pr6|406
001434  aa  6 00100 3521 00	epp2 	pr6|64		procname
001435  aa  6 00630 2521 00	spri2	pr6|408
001436  aa  6 00570 3521 00	epp2 	pr6|376
001437  aa  6 00632 2521 00	spri2	pr6|410
001440  aa  6 00304 3521 00	epp2 	pr6|196		seg_id
001441  aa  6 00634 2521 00	spri2	pr6|412
001442  aa   776461 3520 04	epp2 	-719,ic		000123 = 404000000043
001443  aa  6 00636 2521 00	spri2	pr6|414
001444  aa   776456 3520 04	epp2 	-722,ic		000122 = 526000000020
001445  aa  6 00640 2521 00	spri2	pr6|416
001446  aa   776436 3520 04	epp2 	-738,ic		000104 = 524000000002
001447  aa  6 00642 2521 00	spri2	pr6|418
001450  aa   776433 3520 04	epp2 	-741,ic		000103 = 526000000040
001451  aa  6 00644 2521 00	spri2	pr6|420
001452  aa  6 00624 6211 00	eax1 	pr6|404
001453  aa   020000 4310 07	fld  	8192,dl
001454  aa  6 00044 3701 20	epp4 	pr6|36,*
001455  la  4 00664 3521 20	epp2 	pr4|436,*		com_err_
001456  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 356
	return;

001457  aa  0 00631 7101 00	tra  	pr0|409		return
						STATEMENT 1 ON LINE 357
call_com_oct:
	call com_err_ (0, procname, "^a:  ^a", seg_id, arg);

001460  aa  6 00106 2361 00	ldq  	pr6|70		argl
001461  aa   526000 2760 03	orq  	175104,du
001462  aa  6 00570 7561 00	stq  	pr6|376
001463  aa  6 00571 4501 00	stz  	pr6|377
001464  aa   776502 2370 04	ldaq 	-702,ic		000166 = 136141072040 040136141000
001465  aa  6 00604 7571 00	staq 	pr6|388
001466  aa  6 00571 3521 00	epp2 	pr6|377
001467  aa  6 00626 2521 00	spri2	pr6|406
001470  aa  6 00100 3521 00	epp2 	pr6|64		procname
001471  aa  6 00630 2521 00	spri2	pr6|408
001472  aa  6 00604 3521 00	epp2 	pr6|388
001473  aa  6 00632 2521 00	spri2	pr6|410
001474  aa  6 00304 3521 00	epp2 	pr6|196		seg_id
001475  aa  6 00634 2521 00	spri2	pr6|412
001476  aa  6 00104 3521 20	epp2 	pr6|68,*		arg
001477  aa  6 00636 2521 00	spri2	pr6|414
001500  aa   776415 3520 04	epp2 	-755,ic		000115 = 404000000005
001501  aa  6 00640 2521 00	spri2	pr6|416
001502  aa   776420 3520 04	epp2 	-752,ic		000122 = 526000000020
001503  aa  6 00642 2521 00	spri2	pr6|418
001504  aa   776376 3520 04	epp2 	-770,ic		000102 = 524000000007
001505  aa  6 00644 2521 00	spri2	pr6|420
001506  aa   776375 3520 04	epp2 	-771,ic		000103 = 526000000040
001507  aa  6 00646 2521 00	spri2	pr6|422
001510  aa  6 00570 3521 00	epp2 	pr6|376
001511  aa  6 00650 2521 00	spri2	pr6|424
001512  aa  6 00624 6211 00	eax1 	pr6|404
001513  aa   024000 4310 07	fld  	10240,dl
001514  aa  6 00044 3701 20	epp4 	pr6|36,*
001515  la  4 00664 3521 20	epp2 	pr4|436,*		com_err_
001516  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 359
	return;

001517  aa  0 00631 7101 00	tra  	pr0|409		return
						STATEMENT 1 ON LINE 361
no_more_args:
						/* Extract various system segment numbers, and copy per-system data bases */
	if slt_seg = null
	then do;

001520  aa  6 00044 3701 20	epp4 	pr6|36,*
001521  ia  4 00206 2371 00	ldaq 	pr4|134		slt_seg
001522  aa   776456 6770 04	eraq 	-722,ic		000200 = 077777000043 000001000000
001523  aa  0 00460 3771 00	anaq 	pr0|304		= 077777000077 777777077077
001524  aa   000416 6010 04	tnz  	270,ic		002142
						STATEMENT 1 ON LINE 365
	     call hcs_$make_seg (c0, "od.slt--", c0, seg_mode, slt_seg, code);

001525  aa   776437 2370 04	ldaq 	-737,ic		000164 = 157144056163 154164055055
001526  aa  6 00604 7571 00	staq 	pr6|388
001527  aa  6 00517 3521 00	epp2 	pr6|335		c0
001530  aa  6 00654 2521 00	spri2	pr6|428
001531  aa  6 00604 3521 00	epp2 	pr6|388
001532  aa  6 00656 2521 00	spri2	pr6|430
001533  aa  6 00517 3521 00	epp2 	pr6|335		c0
001534  aa  6 00660 2521 00	spri2	pr6|432
001535  ia  4 00236 3521 00	epp2 	pr4|158		seg_mode
001536  aa  6 00662 2521 00	spri2	pr6|434
001537  ia  4 00206 3521 00	epp2 	pr4|134		slt_seg
001540  aa  6 00664 2521 00	spri2	pr6|436
001541  aa  6 00162 3521 00	epp2 	pr6|114		code
001542  aa  6 00666 2521 00	spri2	pr6|438
001543  aa   776336 3520 04	epp2 	-802,ic		000101 = 524000000000
001544  aa  6 00670 2521 00	spri2	pr6|440
001545  aa  6 00674 2521 00	spri2	pr6|444
001546  aa   776332 3520 04	epp2 	-806,ic		000100 = 524000000010
001547  aa  6 00672 2521 00	spri2	pr6|442
001550  aa   776345 3520 04	epp2 	-795,ic		000115 = 404000000005
001551  aa  6 00676 2521 00	spri2	pr6|446
001552  aa   776325 3520 04	epp2 	-811,ic		000077 = 464000000000
001553  aa  6 00700 2521 00	spri2	pr6|448
001554  aa   776347 3520 04	epp2 	-793,ic		000123 = 404000000043
001555  aa  6 00702 2521 00	spri2	pr6|450
001556  aa  6 00652 6211 00	eax1 	pr6|426
001557  aa   030000 4310 07	fld  	12288,dl
001560  la  4 00662 3521 20	epp2 	pr4|434,*		hcs_$make_seg
001561  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 366
	     call hcs_$make_seg (c0, "od.nam--", c0, seg_mode, nam_seg, code);

001562  aa   776400 2370 04	ldaq 	-768,ic		000162 = 157144056156 141155055055
001563  aa  6 00604 7571 00	staq 	pr6|388
001564  aa  6 00517 3521 00	epp2 	pr6|335		c0
001565  aa  6 00654 2521 00	spri2	pr6|428
001566  aa  6 00604 3521 00	epp2 	pr6|388
001567  aa  6 00656 2521 00	spri2	pr6|430
001570  aa  6 00517 3521 00	epp2 	pr6|335		c0
001571  aa  6 00660 2521 00	spri2	pr6|432
001572  aa  6 00044 3701 20	epp4 	pr6|36,*
001573  ia  4 00236 3521 00	epp2 	pr4|158		seg_mode
001574  aa  6 00662 2521 00	spri2	pr6|434
001575  ia  4 00210 3521 00	epp2 	pr4|136		nam_seg
001576  aa  6 00664 2521 00	spri2	pr6|436
001577  aa  6 00162 3521 00	epp2 	pr6|114		code
001600  aa  6 00666 2521 00	spri2	pr6|438
001601  aa   776300 3520 04	epp2 	-832,ic		000101 = 524000000000
001602  aa  6 00670 2521 00	spri2	pr6|440
001603  aa  6 00674 2521 00	spri2	pr6|444
001604  aa   776274 3520 04	epp2 	-836,ic		000100 = 524000000010
001605  aa  6 00672 2521 00	spri2	pr6|442
001606  aa   776307 3520 04	epp2 	-825,ic		000115 = 404000000005
001607  aa  6 00676 2521 00	spri2	pr6|446
001610  aa   776267 3520 04	epp2 	-841,ic		000077 = 464000000000
001611  aa  6 00700 2521 00	spri2	pr6|448
001612  aa   776311 3520 04	epp2 	-823,ic		000123 = 404000000043
001613  aa  6 00702 2521 00	spri2	pr6|450
001614  aa  6 00652 6211 00	eax1 	pr6|426
001615  aa   030000 4310 07	fld  	12288,dl
001616  la  4 00662 3521 20	epp2 	pr4|434,*		hcs_$make_seg
001617  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 367
	     call hcs_$make_seg (c0, "od.sst--", c0, seg_mode, sst_seg, code);

001620  aa   776340 2370 04	ldaq 	-800,ic		000160 = 157144056163 163164055055
001621  aa  6 00604 7571 00	staq 	pr6|388
001622  aa  6 00517 3521 00	epp2 	pr6|335		c0
001623  aa  6 00654 2521 00	spri2	pr6|428
001624  aa  6 00604 3521 00	epp2 	pr6|388
001625  aa  6 00656 2521 00	spri2	pr6|430
001626  aa  6 00517 3521 00	epp2 	pr6|335		c0
001627  aa  6 00660 2521 00	spri2	pr6|432
001630  aa  6 00044 3701 20	epp4 	pr6|36,*
001631  ia  4 00236 3521 00	epp2 	pr4|158		seg_mode
001632  aa  6 00662 2521 00	spri2	pr6|434
001633  ia  4 00212 3521 00	epp2 	pr4|138		sst_seg
001634  aa  6 00664 2521 00	spri2	pr6|436
001635  aa  6 00162 3521 00	epp2 	pr6|114		code
001636  aa  6 00666 2521 00	spri2	pr6|438
001637  aa   776242 3520 04	epp2 	-862,ic		000101 = 524000000000
001640  aa  6 00670 2521 00	spri2	pr6|440
001641  aa  6 00674 2521 00	spri2	pr6|444
001642  aa   776236 3520 04	epp2 	-866,ic		000100 = 524000000010
001643  aa  6 00672 2521 00	spri2	pr6|442
001644  aa   776251 3520 04	epp2 	-855,ic		000115 = 404000000005
001645  aa  6 00676 2521 00	spri2	pr6|446
001646  aa   776231 3520 04	epp2 	-871,ic		000077 = 464000000000
001647  aa  6 00700 2521 00	spri2	pr6|448
001650  aa   776253 3520 04	epp2 	-853,ic		000123 = 404000000043
001651  aa  6 00702 2521 00	spri2	pr6|450
001652  aa  6 00652 6211 00	eax1 	pr6|426
001653  aa   030000 4310 07	fld  	12288,dl
001654  la  4 00662 3521 20	epp2 	pr4|434,*		hcs_$make_seg
001655  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 368
	     call hcs_$make_seg (c0, "od.sstnt", c0, seg_mode, sstnt_seg, code);

001656  aa   776300 2370 04	ldaq 	-832,ic		000156 = 157144056163 163164156164
001657  aa  6 00604 7571 00	staq 	pr6|388
001660  aa  6 00517 3521 00	epp2 	pr6|335		c0
001661  aa  6 00654 2521 00	spri2	pr6|428
001662  aa  6 00604 3521 00	epp2 	pr6|388
001663  aa  6 00656 2521 00	spri2	pr6|430
001664  aa  6 00517 3521 00	epp2 	pr6|335		c0
001665  aa  6 00660 2521 00	spri2	pr6|432
001666  aa  6 00044 3701 20	epp4 	pr6|36,*
001667  ia  4 00236 3521 00	epp2 	pr4|158		seg_mode
001670  aa  6 00662 2521 00	spri2	pr6|434
001671  ia  4 00214 3521 00	epp2 	pr4|140		sstnt_seg
001672  aa  6 00664 2521 00	spri2	pr6|436
001673  aa  6 00162 3521 00	epp2 	pr6|114		code
001674  aa  6 00666 2521 00	spri2	pr6|438
001675  aa   776204 3520 04	epp2 	-892,ic		000101 = 524000000000
001676  aa  6 00670 2521 00	spri2	pr6|440
001677  aa  6 00674 2521 00	spri2	pr6|444
001700  aa   776200 3520 04	epp2 	-896,ic		000100 = 524000000010
001701  aa  6 00672 2521 00	spri2	pr6|442
001702  aa   776213 3520 04	epp2 	-885,ic		000115 = 404000000005
001703  aa  6 00676 2521 00	spri2	pr6|446
001704  aa   776173 3520 04	epp2 	-901,ic		000077 = 464000000000
001705  aa  6 00700 2521 00	spri2	pr6|448
001706  aa   776215 3520 04	epp2 	-883,ic		000123 = 404000000043
001707  aa  6 00702 2521 00	spri2	pr6|450
001710  aa  6 00652 6211 00	eax1 	pr6|426
001711  aa   030000 4310 07	fld  	12288,dl
001712  la  4 00662 3521 20	epp2 	pr4|434,*		hcs_$make_seg
001713  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 369
	     call hcs_$make_seg (c0, "od.dseg-", c0, seg_mode, ds_seg, code);

001714  aa   776240 2370 04	ldaq 	-864,ic		000154 = 157144056144 163145147055
001715  aa  6 00604 7571 00	staq 	pr6|388
001716  aa  6 00517 3521 00	epp2 	pr6|335		c0
001717  aa  6 00654 2521 00	spri2	pr6|428
001720  aa  6 00604 3521 00	epp2 	pr6|388
001721  aa  6 00656 2521 00	spri2	pr6|430
001722  aa  6 00517 3521 00	epp2 	pr6|335		c0
001723  aa  6 00660 2521 00	spri2	pr6|432
001724  aa  6 00044 3701 20	epp4 	pr6|36,*
001725  ia  4 00236 3521 00	epp2 	pr4|158		seg_mode
001726  aa  6 00662 2521 00	spri2	pr6|434
001727  ia  4 00216 3521 00	epp2 	pr4|142		ds_seg
001730  aa  6 00664 2521 00	spri2	pr6|436
001731  aa  6 00162 3521 00	epp2 	pr6|114		code
001732  aa  6 00666 2521 00	spri2	pr6|438
001733  aa   776146 3520 04	epp2 	-922,ic		000101 = 524000000000
001734  aa  6 00670 2521 00	spri2	pr6|440
001735  aa  6 00674 2521 00	spri2	pr6|444
001736  aa   776142 3520 04	epp2 	-926,ic		000100 = 524000000010
001737  aa  6 00672 2521 00	spri2	pr6|442
001740  aa   776155 3520 04	epp2 	-915,ic		000115 = 404000000005
001741  aa  6 00676 2521 00	spri2	pr6|446
001742  aa   776135 3520 04	epp2 	-931,ic		000077 = 464000000000
001743  aa  6 00700 2521 00	spri2	pr6|448
001744  aa   776157 3520 04	epp2 	-913,ic		000123 = 404000000043
001745  aa  6 00702 2521 00	spri2	pr6|450
001746  aa  6 00652 6211 00	eax1 	pr6|426
001747  aa   030000 4310 07	fld  	12288,dl
001750  la  4 00662 3521 20	epp2 	pr4|434,*		hcs_$make_seg
001751  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 370
	     call hcs_$make_seg (c0, "od.pds--", c0, seg_mode, pds_seg, code);

001752  aa   776200 2370 04	ldaq 	-896,ic		000152 = 157144056160 144163055055
001753  aa  6 00604 7571 00	staq 	pr6|388
001754  aa  6 00517 3521 00	epp2 	pr6|335		c0
001755  aa  6 00654 2521 00	spri2	pr6|428
001756  aa  6 00604 3521 00	epp2 	pr6|388
001757  aa  6 00656 2521 00	spri2	pr6|430
001760  aa  6 00517 3521 00	epp2 	pr6|335		c0
001761  aa  6 00660 2521 00	spri2	pr6|432
001762  aa  6 00044 3701 20	epp4 	pr6|36,*
001763  ia  4 00236 3521 00	epp2 	pr4|158		seg_mode
001764  aa  6 00662 2521 00	spri2	pr6|434
001765  ia  4 00220 3521 00	epp2 	pr4|144		pds_seg
001766  aa  6 00664 2521 00	spri2	pr6|436
001767  aa  6 00162 3521 00	epp2 	pr6|114		code
001770  aa  6 00666 2521 00	spri2	pr6|438
001771  aa   776110 3520 04	epp2 	-952,ic		000101 = 524000000000
001772  aa  6 00670 2521 00	spri2	pr6|440
001773  aa  6 00674 2521 00	spri2	pr6|444
001774  aa   776104 3520 04	epp2 	-956,ic		000100 = 524000000010
001775  aa  6 00672 2521 00	spri2	pr6|442
001776  aa   776117 3520 04	epp2 	-945,ic		000115 = 404000000005
001777  aa  6 00676 2521 00	spri2	pr6|446
002000  aa   776077 3520 04	epp2 	-961,ic		000077 = 464000000000
002001  aa  6 00700 2521 00	spri2	pr6|448
002002  aa   776121 3520 04	epp2 	-943,ic		000123 = 404000000043
002003  aa  6 00702 2521 00	spri2	pr6|450
002004  aa  6 00652 6211 00	eax1 	pr6|426
002005  aa   030000 4310 07	fld  	12288,dl
002006  la  4 00662 3521 20	epp2 	pr4|434,*		hcs_$make_seg
002007  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 371
	     call hcs_$make_seg (c0, "od.prds-", c0, seg_mode, prds_seg, code);

002010  aa   776140 2370 04	ldaq 	-928,ic		000150 = 157144056160 162144163055
002011  aa  6 00604 7571 00	staq 	pr6|388
002012  aa  6 00517 3521 00	epp2 	pr6|335		c0
002013  aa  6 00654 2521 00	spri2	pr6|428
002014  aa  6 00604 3521 00	epp2 	pr6|388
002015  aa  6 00656 2521 00	spri2	pr6|430
002016  aa  6 00517 3521 00	epp2 	pr6|335		c0
002017  aa  6 00660 2521 00	spri2	pr6|432
002020  aa  6 00044 3701 20	epp4 	pr6|36,*
002021  ia  4 00236 3521 00	epp2 	pr4|158		seg_mode
002022  aa  6 00662 2521 00	spri2	pr6|434
002023  ia  4 00222 3521 00	epp2 	pr4|146		prds_seg
002024  aa  6 00664 2521 00	spri2	pr6|436
002025  aa  6 00162 3521 00	epp2 	pr6|114		code
002026  aa  6 00666 2521 00	spri2	pr6|438
002027  aa   776052 3520 04	epp2 	-982,ic		000101 = 524000000000
002030  aa  6 00670 2521 00	spri2	pr6|440
002031  aa  6 00674 2521 00	spri2	pr6|444
002032  aa   776046 3520 04	epp2 	-986,ic		000100 = 524000000010
002033  aa  6 00672 2521 00	spri2	pr6|442
002034  aa   776061 3520 04	epp2 	-975,ic		000115 = 404000000005
002035  aa  6 00676 2521 00	spri2	pr6|446
002036  aa   776041 3520 04	epp2 	-991,ic		000077 = 464000000000
002037  aa  6 00700 2521 00	spri2	pr6|448
002040  aa   776063 3520 04	epp2 	-973,ic		000123 = 404000000043
002041  aa  6 00702 2521 00	spri2	pr6|450
002042  aa  6 00652 6211 00	eax1 	pr6|426
002043  aa   030000 4310 07	fld  	12288,dl
002044  la  4 00662 3521 20	epp2 	pr4|434,*		hcs_$make_seg
002045  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 372
	     call hcs_$make_seg (c0, "od.shut-", c0, seg_mode, shut_seg, code);

002046  aa   776100 2370 04	ldaq 	-960,ic		000146 = 157144056163 150165164055
002047  aa  6 00604 7571 00	staq 	pr6|388
002050  aa  6 00517 3521 00	epp2 	pr6|335		c0
002051  aa  6 00654 2521 00	spri2	pr6|428
002052  aa  6 00604 3521 00	epp2 	pr6|388
002053  aa  6 00656 2521 00	spri2	pr6|430
002054  aa  6 00517 3521 00	epp2 	pr6|335		c0
002055  aa  6 00660 2521 00	spri2	pr6|432
002056  aa  6 00044 3701 20	epp4 	pr6|36,*
002057  ia  4 00236 3521 00	epp2 	pr4|158		seg_mode
002060  aa  6 00662 2521 00	spri2	pr6|434
002061  ia  4 00226 3521 00	epp2 	pr4|150		shut_seg
002062  aa  6 00664 2521 00	spri2	pr6|436
002063  aa  6 00162 3521 00	epp2 	pr6|114		code
002064  aa  6 00666 2521 00	spri2	pr6|438
002065  aa   776014 3520 04	epp2 	-1012,ic		000101 = 524000000000
002066  aa  6 00670 2521 00	spri2	pr6|440
002067  aa  6 00674 2521 00	spri2	pr6|444
002070  aa   776010 3520 04	epp2 	-1016,ic		000100 = 524000000010
002071  aa  6 00672 2521 00	spri2	pr6|442
002072  aa   776023 3520 04	epp2 	-1005,ic		000115 = 404000000005
002073  aa  6 00676 2521 00	spri2	pr6|446
002074  aa   776003 3520 04	epp2 	-1021,ic		000077 = 464000000000
002075  aa  6 00700 2521 00	spri2	pr6|448
002076  aa   776025 3520 04	epp2 	-1003,ic		000123 = 404000000043
002077  aa  6 00702 2521 00	spri2	pr6|450
002100  aa  6 00652 6211 00	eax1 	pr6|426
002101  aa   030000 4310 07	fld  	12288,dl
002102  la  4 00662 3521 20	epp2 	pr4|434,*		hcs_$make_seg
002103  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 373
	     call hcs_$make_seg (c0, "od.stk--", c0, seg_mode, stk_seg, code);

002104  aa   776040 2370 04	ldaq 	-992,ic		000144 = 157144056163 164153055055
002105  aa  6 00604 7571 00	staq 	pr6|388
002106  aa  6 00517 3521 00	epp2 	pr6|335		c0
002107  aa  6 00654 2521 00	spri2	pr6|428
002110  aa  6 00604 3521 00	epp2 	pr6|388
002111  aa  6 00656 2521 00	spri2	pr6|430
002112  aa  6 00517 3521 00	epp2 	pr6|335		c0
002113  aa  6 00660 2521 00	spri2	pr6|432
002114  aa  6 00044 3701 20	epp4 	pr6|36,*
002115  ia  4 00236 3521 00	epp2 	pr4|158		seg_mode
002116  aa  6 00662 2521 00	spri2	pr6|434
002117  ia  4 00224 3521 00	epp2 	pr4|148		stk_seg
002120  aa  6 00664 2521 00	spri2	pr6|436
002121  aa  6 00162 3521 00	epp2 	pr6|114		code
002122  aa  6 00666 2521 00	spri2	pr6|438
002123  aa   775756 3520 04	epp2 	-1042,ic		000101 = 524000000000
002124  aa  6 00670 2521 00	spri2	pr6|440
002125  aa  6 00674 2521 00	spri2	pr6|444
002126  aa   775752 3520 04	epp2 	-1046,ic		000100 = 524000000010
002127  aa  6 00672 2521 00	spri2	pr6|442
002130  aa   775765 3520 04	epp2 	-1035,ic		000115 = 404000000005
002131  aa  6 00676 2521 00	spri2	pr6|446
002132  aa   775745 3520 04	epp2 	-1051,ic		000077 = 464000000000
002133  aa  6 00700 2521 00	spri2	pr6|448
002134  aa   775767 3520 04	epp2 	-1033,ic		000123 = 404000000043
002135  aa  6 00702 2521 00	spri2	pr6|450
002136  aa  6 00652 6211 00	eax1 	pr6|426
002137  aa   030000 4310 07	fld  	12288,dl
002140  la  4 00662 3521 20	epp2 	pr4|434,*		hcs_$make_seg
002141  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 377
	end;

						STATEMENT 1 ON LINE 378
	cur_proc_index = 1;

002142  aa   000001 2360 07	ldq  	1,dl
002143  aa  6 00526 7561 00	stq  	pr6|342		cur_proc_index
						STATEMENT 1 ON LINE 379
	namp, dsp, sstnp, sstp = null;

002144  aa   776034 3734 24	epp7 	-996,ic*
002145  aa  6 00146 6535 00	spri7	pr6|102		namp
002146  aa  6 00150 6535 00	spri7	pr6|104		dsp
002147  aa  6 00552 6535 00	spri7	pr6|362		sstnp
002150  aa  6 00562 6535 00	spri7	pr6|370		sstp
						STATEMENT 1 ON LINE 380
	slt_seg_no = 7;

002151  aa   000007 2360 07	ldq  	7,dl
002152  aa  6 00127 7561 00	stq  	pr6|87		slt_seg_no
						STATEMENT 1 ON LINE 382
	call copy_dump_seg_ (7, cur_proc_index, ptr_array, len_array, slt_seg, sltlen);

002153  aa  6 00570 7561 00	stq  	pr6|376
002154  aa  6 00570 3521 00	epp2 	pr6|376
002155  aa  6 00610 2521 00	spri2	pr6|392
002156  aa  6 00526 3521 00	epp2 	pr6|342		cur_proc_index
002157  aa  6 00612 2521 00	spri2	pr6|394
002160  aa  6 00314 3521 00	epp2 	pr6|204		ptr_array
002161  aa  6 00614 2521 00	spri2	pr6|396
002162  aa  6 00414 3521 00	epp2 	pr6|268		len_array
002163  aa  6 00616 2521 00	spri2	pr6|398
002164  aa  6 00044 3701 20	epp4 	pr6|36,*
002165  ia  4 00206 3521 00	epp2 	pr4|134		slt_seg
002166  aa  6 00620 2521 00	spri2	pr6|400
002167  aa  6 00137 3521 00	epp2 	pr6|95		sltlen
002170  aa  6 00622 2521 00	spri2	pr6|402
002171  aa  6 00606 6211 00	eax1 	pr6|390
002172  aa   030000 4310 07	fld  	12288,dl
002173  la  4 00706 3521 20	epp2 	pr4|454,*		copy_dump_seg_
002174  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 383
	if sltlen = 0
	then do;

002175  aa  6 00137 2361 00	ldq  	pr6|95		sltlen
002176  aa   000033 6010 04	tnz  	27,ic		002231
						STATEMENT 1 ON LINE 385
	     call ioa_ ("Can't find ""^a""", "slt");

002177  aa   776036 2350 04	lda  	-994,ic		000235 = 103141156047
002200  aa   776036 2360 04	ldq  	-994,ic		000236 = 164040146151
002201  aa  6 00572 7571 00	staq 	pr6|378
002202  aa   776035 2350 04	lda  	-995,ic		000237 = 156144040042
002203  aa   776035 2360 04	ldq  	-995,ic		000240 = 136141042000
002204  aa  6 00574 7571 00	staq 	pr6|380
002205  aa   775670 2350 04	lda  	-1096,ic		000075 = 163154164000
002206  aa  6 00570 7551 00	sta  	pr6|376
002207  aa  6 00572 3521 00	epp2 	pr6|378
002210  aa  6 00610 2521 00	spri2	pr6|392
002211  aa  6 00570 3521 00	epp2 	pr6|376
002212  aa  6 00612 2521 00	spri2	pr6|394
002213  aa   775663 3520 04	epp2 	-1101,ic		000076 = 524000000017
002214  aa  6 00614 2521 00	spri2	pr6|396
002215  aa   775657 3520 04	epp2 	-1105,ic		000074 = 524000000003
002216  aa  6 00616 2521 00	spri2	pr6|398
002217  aa  6 00606 6211 00	eax1 	pr6|390
002220  aa   010000 4310 07	fld  	4096,dl
002221  aa  6 00044 3701 20	epp4 	pr6|36,*
002222  la  4 00654 3521 20	epp2 	pr4|428,*		ioa_
002223  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 386
NOT_SLT:	     sltp = null;

002224  aa   775754 2370 04	ldaq 	-1044,ic		000200 = 077777000043 000001000000
002225  aa  6 00550 7571 00	staq 	pr6|360		sltp
						STATEMENT 1 ON LINE 387
	     sst_seg_no = 10;

002226  aa   000012 2360 07	ldq  	10,dl
002227  aa  6 00134 7561 00	stq  	pr6|92		sst_seg_no
						STATEMENT 1 ON LINE 388
	     go to copy_sst;

002230  aa   000354 7100 04	tra  	236,ic		002604
						STATEMENT 1 ON LINE 389
	end;

						STATEMENT 1 ON LINE 391
	else do;

						STATEMENT 1 ON LINE 392
	     sltp = slt_seg;

002231  aa  6 00044 3701 20	epp4 	pr6|36,*
002232  ia  4 00206 3735 20	epp7 	pr4|134,*		slt_seg
002233  aa  6 00550 6535 00	spri7	pr6|360		sltp
						STATEMENT 1 ON LINE 393
	     nam_seg_no = bin (baseno (sltp -> based_ptr), 18);

002234  aa  6 00550 3715 20	epp5 	pr6|360,*		based_ptr
002235  aa  5 00000 3715 20	epp5 	pr5|0,*		based_ptr
002236  aa  5 00000 2131 00	epaq 	pr5|0		based_ptr
002237  aa   077777 3750 03	ana  	32767,du
002240  aa   000066 7730 00	lrl  	54
002241  aa  6 00130 7561 00	stq  	pr6|88		nam_seg_no
						STATEMENT 1 ON LINE 394
	     call copy_dump_seg_ (nam_seg_no, cur_proc_index, ptr_array, len_array, nam_seg, namlen);

002242  aa  6 00130 3521 00	epp2 	pr6|88		nam_seg_no
002243  aa  6 00610 2521 00	spri2	pr6|392
002244  aa  6 00526 3521 00	epp2 	pr6|342		cur_proc_index
002245  aa  6 00612 2521 00	spri2	pr6|394
002246  aa  6 00314 3521 00	epp2 	pr6|204		ptr_array
002247  aa  6 00614 2521 00	spri2	pr6|396
002250  aa  6 00414 3521 00	epp2 	pr6|268		len_array
002251  aa  6 00616 2521 00	spri2	pr6|398
002252  ia  4 00210 3521 00	epp2 	pr4|136		nam_seg
002253  aa  6 00620 2521 00	spri2	pr6|400
002254  aa  6 00140 3521 00	epp2 	pr6|96		namlen
002255  aa  6 00622 2521 00	spri2	pr6|402
002256  aa  6 00606 6211 00	eax1 	pr6|390
002257  aa   030000 4310 07	fld  	12288,dl
002260  la  4 00706 3521 20	epp2 	pr4|454,*		copy_dump_seg_
002261  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 395
	     if namlen ^= 0 then namp = nam_seg;

002262  aa  6 00140 2361 00	ldq  	pr6|96		namlen
002263  aa   000005 6000 04	tze  	5,ic		002270
002264  aa  6 00044 3701 20	epp4 	pr6|36,*
002265  ia  4 00210 3735 20	epp7 	pr4|136,*		nam_seg
002266  aa  6 00146 6535 00	spri7	pr6|102		namp
002267  aa   000016 7100 04	tra  	14,ic		002305
						STATEMENT 1 ON LINE 396
	     else do;

						STATEMENT 1 ON LINE 397
		call ioa_ ("Cannot find name_table for slt");

002270  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
002271  aa   776044 00 0040	desc9a	-988,32		000334 = 103141156156
002272  aa  6 00572 00 0040	desc9a	pr6|378,32
002273  aa  6 00572 3521 00	epp2 	pr6|378
002274  aa  6 00610 2521 00	spri2	pr6|392
002275  aa   775616 3520 04	epp2 	-1138,ic		000113 = 524000000036
002276  aa  6 00612 2521 00	spri2	pr6|394
002277  aa  6 00606 6211 00	eax1 	pr6|390
002300  aa   004000 4310 07	fld  	2048,dl
002301  aa  6 00044 3701 20	epp4 	pr6|36,*
002302  la  4 00654 3521 20	epp2 	pr4|428,*		ioa_
002303  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 398
		go to NOT_SLT;

002304  aa   777720 7100 04	tra  	-48,ic		002224
						STATEMENT 1 ON LINE 399
	     end;

						STATEMENT 1 ON LINE 401
	     call ring0_get_$segptr_given_slt ("", "slt", prt, code, sltp, namp);

002305  aa   775570 2350 04	lda  	-1160,ic		000075 = 163154164000
002306  aa  6 00571 7551 00	sta  	pr6|377
002307  aa  6 00570 3521 00	epp2 	pr6|376
002310  aa  6 00654 2521 00	spri2	pr6|428
002311  aa  6 00571 3521 00	epp2 	pr6|377
002312  aa  6 00656 2521 00	spri2	pr6|430
002313  aa  6 00502 3521 00	epp2 	pr6|322		prt
002314  aa  6 00660 2521 00	spri2	pr6|432
002315  aa  6 00162 3521 00	epp2 	pr6|114		code
002316  aa  6 00662 2521 00	spri2	pr6|434
002317  aa  6 00550 3521 00	epp2 	pr6|360		sltp
002320  aa  6 00664 2521 00	spri2	pr6|436
002321  aa  6 00146 3521 00	epp2 	pr6|102		namp
002322  aa  6 00666 2521 00	spri2	pr6|438
002323  aa   775556 3520 04	epp2 	-1170,ic		000101 = 524000000000
002324  aa  6 00670 2521 00	spri2	pr6|440
002325  aa   775547 3520 04	epp2 	-1177,ic		000074 = 524000000003
002326  aa  6 00672 2521 00	spri2	pr6|442
002327  aa   775550 3520 04	epp2 	-1176,ic		000077 = 464000000000
002330  aa  6 00674 2521 00	spri2	pr6|444
002331  aa  6 00700 2521 00	spri2	pr6|448
002332  aa  6 00702 2521 00	spri2	pr6|450
002333  aa   775570 3520 04	epp2 	-1160,ic		000123 = 404000000043
002334  aa  6 00676 2521 00	spri2	pr6|446
002335  aa  6 00652 6211 00	eax1 	pr6|426
002336  aa   030000 4310 07	fld  	12288,dl
002337  la  4 00656 3521 20	epp2 	pr4|430,*		ring0_get_$segptr_given_slt
002340  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 402
	     if bin (baseno (prt), 18) ^= 7 then do;

002341  aa  6 00502 2131 20	epaq 	pr6|322,*		prt
002342  aa   077777 3750 03	ana  	32767,du
002343  aa   000066 7730 00	lrl  	54
002344  aa   000007 1160 07	cmpq 	7,dl
002345  aa   000024 6000 04	tze  	20,ic		002371
						STATEMENT 1 ON LINE 403
		call ioa_ ("Segments 7 and ^o not functioning as slt and name_table", nam_seg_no);

002346  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
002347  aa   776067 00 0070	desc9a	-969,56		000435 = 123145147155
002350  aa  6 00606 00 0070	desc9a	pr6|390,56
002351  aa  6 00606 3521 00	epp2 	pr6|390
002352  aa  6 00574 2521 00	spri2	pr6|380
002353  aa  6 00130 3521 00	epp2 	pr6|88		nam_seg_no
002354  aa  6 00576 2521 00	spri2	pr6|382
002355  aa   775516 3520 04	epp2 	-1202,ic		000073 = 524000000067
002356  aa  6 00600 2521 00	spri2	pr6|384
002357  aa   775545 3520 04	epp2 	-1179,ic		000124 = 404000000021
002360  aa  6 00602 2521 00	spri2	pr6|386
002361  aa  6 00572 6211 00	eax1 	pr6|378
002362  aa   010000 4310 07	fld  	4096,dl
002363  aa  6 00044 3701 20	epp4 	pr6|36,*
002364  la  4 00654 3521 20	epp2 	pr4|428,*		ioa_
002365  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 404
		namp = null;

002366  aa   775612 2370 04	ldaq 	-1142,ic		000200 = 077777000043 000001000000
002367  aa  6 00146 7571 00	staq 	pr6|102		namp
						STATEMENT 1 ON LINE 405
		go to NOT_SLT;

002370  aa   777634 7100 04	tra  	-100,ic		002224
						STATEMENT 1 ON LINE 406
	     end;

						STATEMENT 1 ON LINE 408
	     call ring0_get_$segptr_given_slt ("", "sst", prt, code, sltp, namp);

002371  aa   775501 2350 04	lda  	-1215,ic		000072 = 163163164000
002372  aa  6 00570 7551 00	sta  	pr6|376
002373  aa  6 00571 3521 00	epp2 	pr6|377
002374  aa  6 00654 2521 00	spri2	pr6|428
002375  aa  6 00570 3521 00	epp2 	pr6|376
002376  aa  6 00656 2521 00	spri2	pr6|430
002377  aa  6 00502 3521 00	epp2 	pr6|322		prt
002400  aa  6 00660 2521 00	spri2	pr6|432
002401  aa  6 00162 3521 00	epp2 	pr6|114		code
002402  aa  6 00662 2521 00	spri2	pr6|434
002403  aa  6 00550 3521 00	epp2 	pr6|360		sltp
002404  aa  6 00664 2521 00	spri2	pr6|436
002405  aa  6 00146 3521 00	epp2 	pr6|102		namp
002406  aa  6 00666 2521 00	spri2	pr6|438
002407  aa   775472 3520 04	epp2 	-1222,ic		000101 = 524000000000
002410  aa  6 00670 2521 00	spri2	pr6|440
002411  aa   775463 3520 04	epp2 	-1229,ic		000074 = 524000000003
002412  aa  6 00672 2521 00	spri2	pr6|442
002413  aa   775464 3520 04	epp2 	-1228,ic		000077 = 464000000000
002414  aa  6 00674 2521 00	spri2	pr6|444
002415  aa  6 00700 2521 00	spri2	pr6|448
002416  aa  6 00702 2521 00	spri2	pr6|450
002417  aa   775504 3520 04	epp2 	-1212,ic		000123 = 404000000043
002420  aa  6 00676 2521 00	spri2	pr6|446
002421  aa  6 00652 6211 00	eax1 	pr6|426
002422  aa   030000 4310 07	fld  	12288,dl
002423  aa  6 00044 3701 20	epp4 	pr6|36,*
002424  la  4 00656 3521 20	epp2 	pr4|430,*		ring0_get_$segptr_given_slt
002425  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 409
	     if code = 0 then do;

002426  aa  6 00162 2361 00	ldq  	pr6|114		code
002427  aa   000006 6010 04	tnz  	6,ic		002435
						STATEMENT 1 ON LINE 410
		sst_seg_no = bin (baseno (prt), 18);

002430  aa  6 00502 2131 20	epaq 	pr6|322,*		prt
002431  aa   077777 3750 03	ana  	32767,du
002432  aa   000066 7730 00	lrl  	54
002433  aa  6 00134 7561 00	stq  	pr6|92		sst_seg_no
						STATEMENT 1 ON LINE 411
	     end;

002434  aa   000003 7100 04	tra  	3,ic		002437
						STATEMENT 1 ON LINE 412
	     else do;

						STATEMENT 1 ON LINE 413
		sst_seg_no = 9;

002435  aa   000011 2360 07	ldq  	9,dl
002436  aa  6 00134 7561 00	stq  	pr6|92		sst_seg_no
						STATEMENT 1 ON LINE 414
	     end;

						STATEMENT 1 ON LINE 415
	     call ring0_get_$segptr_given_slt ("", "sst_names_", prt, code, sltp, namp);

002437  aa   775545 2370 04	ldaq 	-1179,ic		000204 = 163163164137 156141155145
002440  aa  6 00572 7571 00	staq 	pr6|378
002441  aa   163137 2350 03	lda  	58975,du
002442  aa  6 00574 7551 00	sta  	pr6|380
002443  aa  6 00570 3521 00	epp2 	pr6|376
002444  aa  6 00654 2521 00	spri2	pr6|428
002445  aa  6 00572 3521 00	epp2 	pr6|378
002446  aa  6 00656 2521 00	spri2	pr6|430
002447  aa  6 00502 3521 00	epp2 	pr6|322		prt
002450  aa  6 00660 2521 00	spri2	pr6|432
002451  aa  6 00162 3521 00	epp2 	pr6|114		code
002452  aa  6 00662 2521 00	spri2	pr6|434
002453  aa  6 00550 3521 00	epp2 	pr6|360		sltp
002454  aa  6 00664 2521 00	spri2	pr6|436
002455  aa  6 00146 3521 00	epp2 	pr6|102		namp
002456  aa  6 00666 2521 00	spri2	pr6|438
002457  aa   775422 3520 04	epp2 	-1262,ic		000101 = 524000000000
002460  aa  6 00670 2521 00	spri2	pr6|440
002461  aa   775410 3520 04	epp2 	-1272,ic		000071 = 524000000012
002462  aa  6 00672 2521 00	spri2	pr6|442
002463  aa   775414 3520 04	epp2 	-1268,ic		000077 = 464000000000
002464  aa  6 00674 2521 00	spri2	pr6|444
002465  aa  6 00700 2521 00	spri2	pr6|448
002466  aa  6 00702 2521 00	spri2	pr6|450
002467  aa   775434 3520 04	epp2 	-1252,ic		000123 = 404000000043
002470  aa  6 00676 2521 00	spri2	pr6|446
002471  aa  6 00652 6211 00	eax1 	pr6|426
002472  aa   030000 4310 07	fld  	12288,dl
002473  aa  6 00044 3701 20	epp4 	pr6|36,*
002474  la  4 00656 3521 20	epp2 	pr4|430,*		ring0_get_$segptr_given_slt
002475  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 416
	     sstnt_seg_no = bin (baseno (prt), 18);

002476  aa  6 00502 2131 20	epaq 	pr6|322,*		prt
002477  aa   077777 3750 03	ana  	32767,du
002500  aa   000066 7730 00	lrl  	54
002501  aa  6 00131 7561 00	stq  	pr6|89		sstnt_seg_no
						STATEMENT 1 ON LINE 417
	     call ring0_get_$segptr_given_slt ("", "pds", prt, code, sltp, namp);

002502  aa   775366 2350 04	lda  	-1290,ic		000070 = 160144163000
002503  aa  6 00571 7551 00	sta  	pr6|377
002504  aa  6 00570 3521 00	epp2 	pr6|376
002505  aa  6 00654 2521 00	spri2	pr6|428
002506  aa  6 00571 3521 00	epp2 	pr6|377
002507  aa  6 00656 2521 00	spri2	pr6|430
002510  aa  6 00502 3521 00	epp2 	pr6|322		prt
002511  aa  6 00660 2521 00	spri2	pr6|432
002512  aa  6 00162 3521 00	epp2 	pr6|114		code
002513  aa  6 00662 2521 00	spri2	pr6|434
002514  aa  6 00550 3521 00	epp2 	pr6|360		sltp
002515  aa  6 00664 2521 00	spri2	pr6|436
002516  aa  6 00146 3521 00	epp2 	pr6|102		namp
002517  aa  6 00666 2521 00	spri2	pr6|438
002520  aa   775361 3520 04	epp2 	-1295,ic		000101 = 524000000000
002521  aa  6 00670 2521 00	spri2	pr6|440
002522  aa   775352 3520 04	epp2 	-1302,ic		000074 = 524000000003
002523  aa  6 00672 2521 00	spri2	pr6|442
002524  aa   775353 3520 04	epp2 	-1301,ic		000077 = 464000000000
002525  aa  6 00674 2521 00	spri2	pr6|444
002526  aa  6 00700 2521 00	spri2	pr6|448
002527  aa  6 00702 2521 00	spri2	pr6|450
002530  aa   775373 3520 04	epp2 	-1285,ic		000123 = 404000000043
002531  aa  6 00676 2521 00	spri2	pr6|446
002532  aa  6 00652 6211 00	eax1 	pr6|426
002533  aa   030000 4310 07	fld  	12288,dl
002534  aa  6 00044 3701 20	epp4 	pr6|36,*
002535  la  4 00656 3521 20	epp2 	pr4|430,*		ring0_get_$segptr_given_slt
002536  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 418
	     pds_seg_no = bin (baseno (prt), 18);

002537  aa  6 00502 2131 20	epaq 	pr6|322,*		prt
002540  aa   077777 3750 03	ana  	32767,du
002541  aa   000066 7730 00	lrl  	54
002542  aa  6 00132 7561 00	stq  	pr6|90		pds_seg_no
						STATEMENT 1 ON LINE 419
	     call ring0_get_$segptr_given_slt ("", "prds", prt, code, sltp, namp);

002543  aa   775324 2350 04	lda  	-1324,ic		000067 = 160162144163
002544  aa  6 00570 7551 00	sta  	pr6|376
002545  aa  6 00571 3521 00	epp2 	pr6|377
002546  aa  6 00654 2521 00	spri2	pr6|428
002547  aa  6 00570 3521 00	epp2 	pr6|376
002550  aa  6 00656 2521 00	spri2	pr6|430
002551  aa  6 00502 3521 00	epp2 	pr6|322		prt
002552  aa  6 00660 2521 00	spri2	pr6|432
002553  aa  6 00162 3521 00	epp2 	pr6|114		code
002554  aa  6 00662 2521 00	spri2	pr6|434
002555  aa  6 00550 3521 00	epp2 	pr6|360		sltp
002556  aa  6 00664 2521 00	spri2	pr6|436
002557  aa  6 00146 3521 00	epp2 	pr6|102		namp
002560  aa  6 00666 2521 00	spri2	pr6|438
002561  aa   775320 3520 04	epp2 	-1328,ic		000101 = 524000000000
002562  aa  6 00670 2521 00	spri2	pr6|440
002563  aa   775303 3520 04	epp2 	-1341,ic		000066 = 524000000004
002564  aa  6 00672 2521 00	spri2	pr6|442
002565  aa   775312 3520 04	epp2 	-1334,ic		000077 = 464000000000
002566  aa  6 00674 2521 00	spri2	pr6|444
002567  aa  6 00700 2521 00	spri2	pr6|448
002570  aa  6 00702 2521 00	spri2	pr6|450
002571  aa   775332 3520 04	epp2 	-1318,ic		000123 = 404000000043
002572  aa  6 00676 2521 00	spri2	pr6|446
002573  aa  6 00652 6211 00	eax1 	pr6|426
002574  aa   030000 4310 07	fld  	12288,dl
002575  aa  6 00044 3701 20	epp4 	pr6|36,*
002576  la  4 00656 3521 20	epp2 	pr4|430,*		ring0_get_$segptr_given_slt
002577  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 420
	     prds_seg_no = bin (baseno (prt), 18);

002600  aa  6 00502 2131 20	epaq 	pr6|322,*		prt
002601  aa   077777 3750 03	ana  	32767,du
002602  aa   000066 7730 00	lrl  	54
002603  aa  6 00133 7561 00	stq  	pr6|91		prds_seg_no
						STATEMENT 1 ON LINE 422
copy_sst:						/* Copying of SST must be the last in this sequence */
	     call copy_dump_seg_ (sst_seg_no, cur_proc_index, ptr_array, len_array, sst_seg, sstlen);

002604  aa  6 00134 3521 00	epp2 	pr6|92		sst_seg_no
002605  aa  6 00610 2521 00	spri2	pr6|392
002606  aa  6 00526 3521 00	epp2 	pr6|342		cur_proc_index
002607  aa  6 00612 2521 00	spri2	pr6|394
002610  aa  6 00314 3521 00	epp2 	pr6|204		ptr_array
002611  aa  6 00614 2521 00	spri2	pr6|396
002612  aa  6 00414 3521 00	epp2 	pr6|268		len_array
002613  aa  6 00616 2521 00	spri2	pr6|398
002614  aa  6 00044 3701 20	epp4 	pr6|36,*
002615  ia  4 00212 3521 00	epp2 	pr4|138		sst_seg
002616  aa  6 00620 2521 00	spri2	pr6|400
002617  aa  6 00141 3521 00	epp2 	pr6|97		sstlen
002620  aa  6 00622 2521 00	spri2	pr6|402
002621  aa  6 00606 6211 00	eax1 	pr6|390
002622  aa   030000 4310 07	fld  	12288,dl
002623  la  4 00706 3521 20	epp2 	pr4|454,*		copy_dump_seg_
002624  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 424
	     if sstlen = 0
	     then do;

002625  aa  6 00141 2361 00	ldq  	pr6|97		sstlen
002626  aa   000031 6010 04	tnz  	25,ic		002657
						STATEMENT 1 ON LINE 426
		call ioa_ ("Can't find ""^a""", "sst");

002627  aa   775406 2350 04	lda  	-1274,ic		000235 = 103141156047
002630  aa   775406 2360 04	ldq  	-1274,ic		000236 = 164040146151
002631  aa  6 00572 7571 00	staq 	pr6|378
002632  aa   775405 2350 04	lda  	-1275,ic		000237 = 156144040042
002633  aa   775405 2360 04	ldq  	-1275,ic		000240 = 136141042000
002634  aa  6 00574 7571 00	staq 	pr6|380
002635  aa   775235 2350 04	lda  	-1379,ic		000072 = 163163164000
002636  aa  6 00570 7551 00	sta  	pr6|376
002637  aa  6 00572 3521 00	epp2 	pr6|378
002640  aa  6 00610 2521 00	spri2	pr6|392
002641  aa  6 00570 3521 00	epp2 	pr6|376
002642  aa  6 00612 2521 00	spri2	pr6|394
002643  aa   775233 3520 04	epp2 	-1381,ic		000076 = 524000000017
002644  aa  6 00614 2521 00	spri2	pr6|396
002645  aa   775227 3520 04	epp2 	-1385,ic		000074 = 524000000003
002646  aa  6 00616 2521 00	spri2	pr6|398
002647  aa  6 00606 6211 00	eax1 	pr6|390
002650  aa   010000 4310 07	fld  	4096,dl
002651  aa  6 00044 3701 20	epp4 	pr6|36,*
002652  la  4 00654 3521 20	epp2 	pr4|428,*		ioa_
002653  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 427
		sstp = null;

002654  aa   775324 2370 04	ldaq 	-1324,ic		000200 = 077777000043 000001000000
002655  aa  6 00562 7571 00	staq 	pr6|370		sstp
						STATEMENT 1 ON LINE 428
	     end;

002656  aa   000013 7100 04	tra  	11,ic		002671
						STATEMENT 1 ON LINE 429
	     else do;

						STATEMENT 1 ON LINE 430
		sstp = sst_seg;

002657  aa  6 00044 3701 20	epp4 	pr6|36,*
002660  ia  4 00212 3735 20	epp7 	pr4|138,*		sst_seg
002661  aa  6 00562 6535 00	spri7	pr6|370		sstp
						STATEMENT 1 ON LINE 431
		sst_abs_loc = sstp -> sst.ptwbase;

002662  aa  6 00562 3715 20	epp5 	pr6|370,*		sstp
002663  aa  5 00025 2361 00	ldq  	pr5|21		sst.ptwbase
002664  aa  6 00507 7561 00	stq  	pr6|327		sst_abs_loc
						STATEMENT 1 ON LINE 432
		sst_high_loc = sst_abs_loc + sstlen ;

002665  aa  6 00141 0761 00	adq  	pr6|97		sstlen
002666  aa  6 00510 7561 00	stq  	pr6|328		sst_high_loc
						STATEMENT 1 ON LINE 433
		ast_off = - (sstp -> sst.astsize);

002667  aa  5 00033 3361 00	lcq  	pr5|27		sst.astsize
002670  aa  6 00506 7561 00	stq  	pr6|326		ast_off
						STATEMENT 1 ON LINE 434
	     end;

						STATEMENT 1 ON LINE 437
	     call copy_dump_seg_ (sstnt_seg_no, cur_proc_index, ptr_array, len_array, sstnt_seg, sstntlen);

002671  aa  6 00131 3521 00	epp2 	pr6|89		sstnt_seg_no
002672  aa  6 00610 2521 00	spri2	pr6|392
002673  aa  6 00526 3521 00	epp2 	pr6|342		cur_proc_index
002674  aa  6 00612 2521 00	spri2	pr6|394
002675  aa  6 00314 3521 00	epp2 	pr6|204		ptr_array
002676  aa  6 00614 2521 00	spri2	pr6|396
002677  aa  6 00414 3521 00	epp2 	pr6|268		len_array
002700  aa  6 00616 2521 00	spri2	pr6|398
002701  aa  6 00044 3701 20	epp4 	pr6|36,*
002702  ia  4 00214 3521 00	epp2 	pr4|140		sstnt_seg
002703  aa  6 00620 2521 00	spri2	pr6|400
002704  aa  6 00136 3521 00	epp2 	pr6|94		sstntlen
002705  aa  6 00622 2521 00	spri2	pr6|402
002706  aa  6 00606 6211 00	eax1 	pr6|390
002707  aa   030000 4310 07	fld  	12288,dl
002710  la  4 00706 3521 20	epp2 	pr4|454,*		copy_dump_seg_
002711  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 438
	     if sstntlen = 0 then do;

002712  aa  6 00136 2361 00	ldq  	pr6|94		sstntlen
002713  aa   000020 6010 04	tnz  	16,ic		002733
						STATEMENT 1 ON LINE 439
		call ioa_ ("Cannot find SST name table.");

002714  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
002715  aa   775371 00 0034	desc9a	-1287,28		000305 = 103141156156
002716  aa  6 00572 00 0034	desc9a	pr6|378,28
002717  aa  6 00572 3521 00	epp2 	pr6|378
002720  aa  6 00610 2521 00	spri2	pr6|392
002721  aa   775144 3520 04	epp2 	-1436,ic		000065 = 524000000033
002722  aa  6 00612 2521 00	spri2	pr6|394
002723  aa  6 00606 6211 00	eax1 	pr6|390
002724  aa   004000 4310 07	fld  	2048,dl
002725  aa  6 00044 3701 20	epp4 	pr6|36,*
002726  la  4 00654 3521 20	epp2 	pr4|428,*		ioa_
002727  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 440
		sstnp = null;

002730  aa   775250 2370 04	ldaq 	-1368,ic		000200 = 077777000043 000001000000
002731  aa  6 00552 7571 00	staq 	pr6|362		sstnp
						STATEMENT 1 ON LINE 441
	     end;

002732  aa   000023 7100 04	tra  	19,ic		002755
						STATEMENT 1 ON LINE 442
	     else do;

						STATEMENT 1 ON LINE 443
		sstnp = sstnt_seg;

002733  aa  6 00044 3701 20	epp4 	pr6|36,*
002734  ia  4 00214 3735 20	epp7 	pr4|140,*		sstnt_seg
002735  aa  6 00552 6535 00	spri7	pr6|362		sstnp
						STATEMENT 1 ON LINE 444
		if ^sstnp -> sstnt.valid then do;

002736  aa  6 00552 2351 20	lda  	pr6|362,*		sstnt.valid
002737  aa   000016 6010 04	tnz  	14,ic		002755
						STATEMENT 1 ON LINE 445
		     call ioa_ ("SST name  table not filled in.");

002740  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
002741  aa   775364 00 0040	desc9a	-1292,32		000324 = 123123124040
002742  aa  6 00572 00 0040	desc9a	pr6|378,32
002743  aa  6 00572 3521 00	epp2 	pr6|378
002744  aa  6 00610 2521 00	spri2	pr6|392
002745  aa   775146 3520 04	epp2 	-1434,ic		000113 = 524000000036
002746  aa  6 00612 2521 00	spri2	pr6|394
002747  aa  6 00606 6211 00	eax1 	pr6|390
002750  aa   004000 4310 07	fld  	2048,dl
002751  la  4 00654 3521 20	epp2 	pr4|428,*		ioa_
002752  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 446
		     sstnp = null;

002753  aa   775225 2370 04	ldaq 	-1387,ic		000200 = 077777000043 000001000000
002754  aa  6 00552 7571 00	staq 	pr6|362		sstnp
						STATEMENT 1 ON LINE 447
		end;

						STATEMENT 1 ON LINE 448
	     end;

						STATEMENT 1 ON LINE 449
	end;

						STATEMENT 1 ON LINE 450
	if segselsw then do;

002755  aa  6 00177 2351 00	lda  	pr6|127		segselsw
002756  aa   000162 6000 04	tze  	114,ic		003140
						STATEMENT 1 ON LINE 451
	     call ask_$ask_clr;

002757  aa  6 00056 6211 00	eax1 	pr6|46
002760  aa   000000 4310 07	fld  	0,dl
002761  aa  6 00044 3701 20	epp4 	pr6|36,*
002762  la  4 00724 3521 20	epp2 	pr4|468,*		ask_$ask_clr
002763  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 452
get_next_seg:
	     call ask_ (c0, seg_id);

002764  aa  6 00517 3521 00	epp2 	pr6|335		c0
002765  aa  6 00574 2521 00	spri2	pr6|380
002766  aa  6 00304 3521 00	epp2 	pr6|196		seg_id
002767  aa  6 00576 2521 00	spri2	pr6|382
002770  aa   775111 3520 04	epp2 	-1463,ic		000101 = 524000000000
002771  aa  6 00600 2521 00	spri2	pr6|384
002772  aa   775111 3520 04	epp2 	-1463,ic		000103 = 526000000040
002773  aa  6 00602 2521 00	spri2	pr6|386
002774  aa  6 00572 6211 00	eax1 	pr6|378
002775  aa   010000 4310 07	fld  	4096,dl
002776  aa  6 00044 3701 20	epp4 	pr6|36,*
002777  la  4 00722 3521 20	epp2 	pr4|466,*		ask_
003000  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 454
	     if seg_id = "quit" then go to no_more_segs;

003001  aa  040 004 106 500	cmpc 	(pr),(ic),fill(040)
003002  aa  6 00304 00 0040	desc9a	pr6|196,32	seg_id
003003  aa   775063 00 0004	desc9a	-1485,4		000064 = 161165151164
003004  aa   000134 6000 04	tze  	92,ic		003140
						STATEMENT 1 ON LINE 455
	     if seg_id = "regs" then do;

003005  aa  040 004 106 500	cmpc 	(pr),(ic),fill(040)
003006  aa  6 00304 00 0040	desc9a	pr6|196,32	seg_id
003007  aa   775056 00 0004	desc9a	-1490,4		000063 = 162145147163
003010  aa   000004 6010 04	tnz  	4,ic		003014
						STATEMENT 1 ON LINE 456
		wants_regs = "1"b;

003011  aa   400000 2350 03	lda  	131072,du
003012  aa  6 00200 7551 00	sta  	pr6|128		wants_regs
						STATEMENT 1 ON LINE 457
		go to get_next_seg;

003013  aa   777751 7100 04	tra  	-23,ic		002764
						STATEMENT 1 ON LINE 458
	     end;

						STATEMENT 1 ON LINE 459
	     seg_no = cv_oct_check_ (seg_id, i);

003014  aa  6 00304 3521 00	epp2 	pr6|196		seg_id
003015  aa  6 00610 2521 00	spri2	pr6|392
003016  aa  6 00517 3521 00	epp2 	pr6|335		i
003017  aa  6 00612 2521 00	spri2	pr6|394
003020  aa  6 00167 3521 00	epp2 	pr6|119		seg_no
003021  aa  6 00614 2521 00	spri2	pr6|396
003022  aa   775061 3520 04	epp2 	-1487,ic		000103 = 526000000040
003023  aa  6 00616 2521 00	spri2	pr6|398
003024  aa   775100 3520 04	epp2 	-1472,ic		000124 = 404000000021
003025  aa  6 00620 2521 00	spri2	pr6|400
003026  aa  6 00622 2521 00	spri2	pr6|402
003027  aa  6 00606 6211 00	eax1 	pr6|390
003030  aa   014000 4310 07	fld  	6144,dl
003031  aa  6 00044 3701 20	epp4 	pr6|36,*
003032  la  4 00720 3521 20	epp2 	pr4|464,*		cv_oct_check_
003033  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 460
	     if i = 0 then wants_seg (seg_no) = "1"b;

003034  aa  6 00517 2361 00	ldq  	pr6|335		i
003035  aa   000006 6010 04	tnz  	6,ic		003043
003036  aa  6 00167 7271 00	lxl7 	pr6|119		seg_no
003037  aa  403 117 060 400	csl  	(),(pr,x7),fill(1),bool(move)
003040  aa   000000 00 0000	descb	0,0
003041  aa  6 00201 00 0001	descb	pr6|129,1		wants_seg
003042  aa   777722 7100 04	tra  	-46,ic		002764
						STATEMENT 1 ON LINE 461
	     else if sltp ^= null then do;

003043  aa  6 00550 2371 00	ldaq 	pr6|360		sltp
003044  aa   775134 6770 04	eraq 	-1444,ic		000200 = 077777000043 000001000000
003045  aa  0 00460 3771 00	anaq 	pr0|304		= 077777000077 777777077077
003046  aa   777716 6000 04	tze  	-50,ic		002764
						STATEMENT 1 ON LINE 462
		call ring0_get_$segptr_given_slt ("", (seg_id), prt, code, sltp, namp);

003047  aa  000 100 100 500	mlr  	(pr),(pr),fill(000)
003050  aa  6 00304 00 0040	desc9a	pr6|196,32	seg_id
003051  aa  6 00572 00 0040	desc9a	pr6|378,32
003052  aa  6 00570 3521 00	epp2 	pr6|376
003053  aa  6 00654 2521 00	spri2	pr6|428
003054  aa  6 00572 3521 00	epp2 	pr6|378
003055  aa  6 00656 2521 00	spri2	pr6|430
003056  aa  6 00502 3521 00	epp2 	pr6|322		prt
003057  aa  6 00660 2521 00	spri2	pr6|432
003060  aa  6 00162 3521 00	epp2 	pr6|114		code
003061  aa  6 00662 2521 00	spri2	pr6|434
003062  aa  6 00550 3521 00	epp2 	pr6|360		sltp
003063  aa  6 00664 2521 00	spri2	pr6|436
003064  aa  6 00146 3521 00	epp2 	pr6|102		namp
003065  aa  6 00666 2521 00	spri2	pr6|438
003066  aa   775013 3520 04	epp2 	-1525,ic		000101 = 524000000000
003067  aa  6 00670 2521 00	spri2	pr6|440
003070  aa   775026 3520 04	epp2 	-1514,ic		000116 = 524000000040
003071  aa  6 00672 2521 00	spri2	pr6|442
003072  aa   775005 3520 04	epp2 	-1531,ic		000077 = 464000000000
003073  aa  6 00674 2521 00	spri2	pr6|444
003074  aa  6 00700 2521 00	spri2	pr6|448
003075  aa  6 00702 2521 00	spri2	pr6|450
003076  aa   775025 3520 04	epp2 	-1515,ic		000123 = 404000000043
003077  aa  6 00676 2521 00	spri2	pr6|446
003100  aa  6 00652 6211 00	eax1 	pr6|426
003101  aa   030000 4310 07	fld  	12288,dl
003102  aa  6 00044 3701 20	epp4 	pr6|36,*
003103  la  4 00656 3521 20	epp2 	pr4|430,*		ring0_get_$segptr_given_slt
003104  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 463
		if code = 0 then do;

003105  aa  6 00162 2361 00	ldq  	pr6|114		code
003106  aa   000011 6010 04	tnz  	9,ic		003117
						STATEMENT 1 ON LINE 464
		     seg_no = bin (baseno (prt), 18);

003107  aa  6 00502 2131 20	epaq 	pr6|322,*		prt
003110  aa   077777 3750 03	ana  	32767,du
003111  aa   000066 7730 00	lrl  	54
003112  aa  6 00167 7561 00	stq  	pr6|119		seg_no
						STATEMENT 1 ON LINE 465
		     wants_seg (seg_no) = "1"b;

003113  aa  403 106 060 400	csl  	(),(pr,ql),fill(1),bool(move)
003114  aa   000000 00 0000	descb	0,0
003115  aa  6 00201 00 0001	descb	pr6|129,1		wants_seg
						STATEMENT 1 ON LINE 466
		end;

003116  aa   777646 7100 04	tra  	-90,ic		002764
						STATEMENT 1 ON LINE 467
		else do;

						STATEMENT 1 ON LINE 468
		     call ioa_ ("Cannot find segment ^a in slt", seg_id);

003117  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
003120  aa   775175 00 0040	desc9a	-1411,32		000314 = 103141156156
003121  aa  6 00572 00 0040	desc9a	pr6|378,32
003122  aa  6 00572 3521 00	epp2 	pr6|378
003123  aa  6 00610 2521 00	spri2	pr6|392
003124  aa  6 00304 3521 00	epp2 	pr6|196		seg_id
003125  aa  6 00612 2521 00	spri2	pr6|394
003126  aa   774734 3520 04	epp2 	-1572,ic		000062 = 524000000035
003127  aa  6 00614 2521 00	spri2	pr6|396
003130  aa   774753 3520 04	epp2 	-1557,ic		000103 = 526000000040
003131  aa  6 00616 2521 00	spri2	pr6|398
003132  aa  6 00606 6211 00	eax1 	pr6|390
003133  aa   010000 4310 07	fld  	4096,dl
003134  aa  6 00044 3701 20	epp4 	pr6|36,*
003135  la  4 00654 3521 20	epp2 	pr4|428,*		ioa_
003136  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 469
		end;

						STATEMENT 1 ON LINE 470
	     end;

						STATEMENT 1 ON LINE 471
	     go to get_next_seg;

003137  aa   777625 7100 04	tra  	-107,ic		002764
						STATEMENT 1 ON LINE 472
	end;

						STATEMENT 1 ON LINE 473
no_more_segs:
	call ioa_ ("Segment ""^a"", device ""^a"", module ""^a""", /* Print current attachment info etc */
	     name, ioname2, iotype);

003140  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
003141  aa   775245 00 0050	desc9a	-1371,40		000405 = 123145147155
003142  aa  6 00572 00 0050	desc9a	pr6|378,40
003143  aa  6 00572 3521 00	epp2 	pr6|378
003144  aa  6 00626 2521 00	spri2	pr6|406
003145  aa  6 00114 3521 00	epp2 	pr6|76		name
003146  aa  6 00630 2521 00	spri2	pr6|408
003147  aa  6 00044 3701 20	epp4 	pr6|36,*
003150  ia  4 00134 3521 00	epp2 	pr4|92		ioname2
003151  aa  6 00632 2521 00	spri2	pr6|410
003152  ia  4 00062 3521 00	epp2 	pr4|50		iotype
003153  aa  6 00634 2521 00	spri2	pr6|412
003154  aa   774705 3520 04	epp2 	-1595,ic		000061 = 524000000046
003155  aa  6 00636 2521 00	spri2	pr6|414
003156  aa   774740 3520 04	epp2 	-1568,ic		000116 = 524000000040
003157  aa  6 00640 2521 00	spri2	pr6|416
003160  aa   774700 3520 04	epp2 	-1600,ic		000060 = 524000000250
003161  aa  6 00642 2521 00	spri2	pr6|418
003162  aa  6 00644 2521 00	spri2	pr6|420
003163  aa  6 00624 6211 00	eax1 	pr6|404
003164  aa   020000 4310 07	fld  	8192,dl
003165  la  4 00654 3521 20	epp2 	pr4|428,*		ioa_
003166  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 476
	call ios_$attach (ioname, iotype, ioname2, "w", b72);

003167  aa   167000 2350 03	lda  	60928,du
003170  aa  6 00570 7551 00	sta  	pr6|376
003171  aa  6 00044 3701 20	epp4 	pr6|36,*
003172  ia  4 00010 3521 00	epp2 	pr4|8		ioname
003173  aa  6 00626 2521 00	spri2	pr6|406
003174  ia  4 00062 3521 00	epp2 	pr4|50		iotype
003175  aa  6 00630 2521 00	spri2	pr6|408
003176  ia  4 00134 3521 00	epp2 	pr4|92		ioname2
003177  aa  6 00632 2521 00	spri2	pr6|410
003200  aa  6 00570 3521 00	epp2 	pr6|376
003201  aa  6 00634 2521 00	spri2	pr6|412
003202  aa  6 00514 3521 00	epp2 	pr6|332		b72
003203  aa  6 00636 2521 00	spri2	pr6|414
003204  aa   774654 3520 04	epp2 	-1620,ic		000060 = 524000000250
003205  aa  6 00640 2521 00	spri2	pr6|416
003206  aa  6 00642 2521 00	spri2	pr6|418
003207  aa  6 00644 2521 00	spri2	pr6|420
003210  aa   774647 3520 04	epp2 	-1625,ic		000057 = 524000000001
003211  aa  6 00646 2521 00	spri2	pr6|422
003212  aa   774644 3520 04	epp2 	-1628,ic		000056 = 514000000110
003213  aa  6 00650 2521 00	spri2	pr6|424
003214  aa  6 00624 6211 00	eax1 	pr6|404
003215  aa   024000 4310 07	fld  	10240,dl
003216  la  4 00666 3521 20	epp2 	pr4|438,*		ios_$attach
003217  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 477
	tmp = addr (b72);

003220  aa  6 00514 3735 00	epp7 	pr6|332		b72
003221  aa  6 00500 6535 00	spri7	pr6|320		tmp
						STATEMENT 1 ON LINE 478
	if tmp -> io_status.code ^= 0
	then do;

003222  aa  7 00000 2361 00	ldq  	pr7|0		io_status.code
003223  aa   000032 6000 04	tze  	26,ic		003255
						STATEMENT 1 ON LINE 480
	     call com_err_ (tmp -> io_status.code, procname,
		"attach call, sub-status ^w, contact programming staff", tmp -> io_status.substatus);

003224  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
003225  aa   775173 00 0070	desc9a	-1413,56		000417 = 141164164141
003226  aa  6 00606 00 0070	desc9a	pr6|390,56
003227  aa  7 00000 3521 00	epp2 	pr7|0		io_status.code
003230  aa  6 00626 2521 00	spri2	pr6|406
003231  aa  6 00100 3521 00	epp2 	pr6|64		procname
003232  aa  6 00630 2521 00	spri2	pr6|408
003233  aa  6 00606 3521 00	epp2 	pr6|390
003234  aa  6 00632 2521 00	spri2	pr6|410
003235  aa  7 00001 3521 00	epp2 	pr7|1		io_status.substatus
003236  aa  6 00634 2521 00	spri2	pr6|412
003237  aa   774665 3520 04	epp2 	-1611,ic		000124 = 404000000021
003240  aa  6 00636 2521 00	spri2	pr6|414
003241  aa   774661 3520 04	epp2 	-1615,ic		000122 = 526000000020
003242  aa  6 00640 2521 00	spri2	pr6|416
003243  aa   774612 3520 04	epp2 	-1654,ic		000055 = 524000000065
003244  aa  6 00642 2521 00	spri2	pr6|418
003245  aa   774607 3520 04	epp2 	-1657,ic		000054 = 514000000044
003246  aa  6 00644 2521 00	spri2	pr6|420
003247  aa  6 00624 6211 00	eax1 	pr6|404
003250  aa   020000 4310 07	fld  	8192,dl
003251  aa  6 00044 3701 20	epp4 	pr6|36,*
003252  la  4 00664 3521 20	epp2 	pr4|436,*		com_err_
003253  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 482
	     return;

003254  aa  0 00631 7101 00	tra  	pr0|409		return
						STATEMENT 1 ON LINE 483
	end;

						STATEMENT 1 ON LINE 484
	call od_print_$op_init (bin (dumpptr -> dump.erfno, 17), dumpptr -> dump.time);

003255  aa  6 00560 3715 20	epp5 	pr6|368,*		dumpptr
003256  aa  5 00004 2361 00	ldq  	pr5|4		dump.erfno
003257  aa  6 00570 7561 00	stq  	pr6|376
003260  aa  6 00570 3521 00	epp2 	pr6|376
003261  aa  6 00574 2521 00	spri2	pr6|380
003262  aa  5 00002 3521 00	epp2 	pr5|2		dump.time
003263  aa  6 00576 2521 00	spri2	pr6|382
003264  aa  6 00572 6211 00	eax1 	pr6|378
003265  aa   010000 4310 07	fld  	4096,dl
003266  aa  6 00044 3701 20	epp4 	pr6|36,*
003267  la  4 00702 3521 20	epp2 	pr4|450,*		od_print_$op_init
003270  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 485
	call od_print_ (m1, fmthdr, "Start", erf_no);

003271  aa   774651 2370 04	ldaq 	-1623,ic		000142 = 123164141162 164000000000
003272  aa  6 00604 7571 00	staq 	pr6|388
003273  aa  6 00044 3701 20	epp4 	pr6|36,*
003274  ia  4 00230 3521 00	epp2 	pr4|152		m1
003275  aa  6 00626 2521 00	spri2	pr6|406
003276  ia  4 00633 3521 00	epp2 	pr4|411		fmthdr
003277  aa  6 00630 2521 00	spri2	pr6|408
003300  aa  6 00604 3521 00	epp2 	pr6|388
003301  aa  6 00632 2521 00	spri2	pr6|410
003302  aa  6 00107 3521 00	epp2 	pr6|71		erf_no
003303  aa  6 00634 2521 00	spri2	pr6|412
003304  aa   774620 3520 04	epp2 	-1648,ic		000124 = 404000000021
003305  aa  6 00636 2521 00	spri2	pr6|414
003306  aa   774545 3520 04	epp2 	-1691,ic		000053 = 524000000013
003307  aa  6 00640 2521 00	spri2	pr6|416
003310  aa   774611 3520 04	epp2 	-1655,ic		000121 = 524000000005
003311  aa  6 00642 2521 00	spri2	pr6|418
003312  aa   774605 3520 04	epp2 	-1659,ic		000117 = 524000000022
003313  aa  6 00644 2521 00	spri2	pr6|420
003314  aa  6 00624 6211 00	eax1 	pr6|404
003315  aa   020000 4310 07	fld  	8192,dl
003316  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
003317  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 486
	tmp = addr (temp);

003320  aa  6 00464 3735 00	epp7 	pr6|308		temp
003321  aa  6 00500 6535 00	spri7	pr6|320		tmp
						STATEMENT 1 ON LINE 487
	eightp = addr (fmteight);

003322  aa  6 00044 3701 20	epp4 	pr6|36,*
003323  ia  4 00553 3715 00	epp5 	pr4|363		fmteight
003324  aa  6 00504 6515 00	spri5	pr6|324		eightp
						STATEMENT 1 ON LINE 488
	if restartsw then call ioa_ ("Continue dumping ^a", erf_no);

003325  aa  6 00170 2351 00	lda  	pr6|120		restartsw
003326  aa   000021 6000 04	tze  	17,ic		003347
003327  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
003330  aa   774726 00 0024	desc9a	-1578,20		000255 = 103157156164
003331  aa  6 00572 00 0024	desc9a	pr6|378,20
003332  aa  6 00572 3521 00	epp2 	pr6|378
003333  aa  6 00610 2521 00	spri2	pr6|392
003334  aa  6 00107 3521 00	epp2 	pr6|71		erf_no
003335  aa  6 00612 2521 00	spri2	pr6|394
003336  aa   774514 3520 04	epp2 	-1716,ic		000052 = 524000000023
003337  aa  6 00614 2521 00	spri2	pr6|396
003340  aa   774557 3520 04	epp2 	-1681,ic		000117 = 524000000022
003341  aa  6 00616 2521 00	spri2	pr6|398
003342  aa  6 00606 6211 00	eax1 	pr6|390
003343  aa   010000 4310 07	fld  	4096,dl
003344  la  4 00654 3521 20	epp2 	pr4|428,*		ioa_
003345  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
003346  aa   000023 7100 04	tra  	19,ic		003371
						STATEMENT 1 ON LINE 489
	else
	call ioa_ ("Begin dumping ^a", erf_no);

003347  aa   774662 2350 04	lda  	-1614,ic		000231 = 102145147151
003350  aa   774662 2360 04	ldq  	-1614,ic		000232 = 156040144165
003351  aa  6 00572 7571 00	staq 	pr6|378
003352  aa   774661 2350 04	lda  	-1615,ic		000233 = 155160151156
003353  aa   774661 2360 04	ldq  	-1615,ic		000234 = 147040136141
003354  aa  6 00574 7571 00	staq 	pr6|380
003355  aa  6 00572 3521 00	epp2 	pr6|378
003356  aa  6 00610 2521 00	spri2	pr6|392
003357  aa  6 00107 3521 00	epp2 	pr6|71		erf_no
003360  aa  6 00612 2521 00	spri2	pr6|394
003361  aa   774470 3520 04	epp2 	-1736,ic		000051 = 524000000020
003362  aa  6 00614 2521 00	spri2	pr6|396
003363  aa   774534 3520 04	epp2 	-1700,ic		000117 = 524000000022
003364  aa  6 00616 2521 00	spri2	pr6|398
003365  aa  6 00606 6211 00	eax1 	pr6|390
003366  aa   010000 4310 07	fld  	4096,dl
003367  la  4 00654 3521 20	epp2 	pr4|428,*		ioa_
003370  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 491
	if fnp_only then do while ("1"b);

003371  aa  6 00303 2351 00	lda  	pr6|195		fnp_only
003372  aa   000032 6000 04	tze  	26,ic		003424
003373  aa   000000 0110 03	nop  	0,du
						STATEMENT 1 ON LINE 492
	     call od_print_$op_finish;

003374  aa  6 00056 6211 00	eax1 	pr6|46
003375  aa   000000 4310 07	fld  	0,dl
003376  aa  6 00044 3701 20	epp4 	pr6|36,*
003377  la  4 00674 3521 20	epp2 	pr4|444,*		od_print_$op_finish
003400  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 493
	     call online_355_dump_ (dumpptr, fnp_index);

003401  aa  6 00560 3521 00	epp2 	pr6|368		dumpptr
003402  aa  6 00574 2521 00	spri2	pr6|380
003403  aa  6 00174 3521 00	epp2 	pr6|124		fnp_index
003404  aa  6 00576 2521 00	spri2	pr6|382
003405  aa  6 00572 6211 00	eax1 	pr6|378
003406  aa   010000 4310 07	fld  	4096,dl
003407  aa  6 00044 3701 20	epp4 	pr6|36,*
003410  la  4 00704 3521 20	epp2 	pr4|452,*		online_355_dump_
003411  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 494
	     if all_fnps & fnp_index < max_fnps then do;

003412  aa  6 00176 2351 00	lda  	pr6|126		all_fnps
003413  aa   003550 6000 04	tze  	1896,ic		007163
003414  aa  6 00174 2361 00	ldq  	pr6|124		fnp_index
003415  aa   000004 1160 07	cmpq 	4,dl
003416  aa   003545 6050 04	tpl  	1893,ic		007163
						STATEMENT 1 ON LINE 495
		fnp_index = fnp_index + 1;

003417  aa  6 00174 0541 00	aos  	pr6|124		fnp_index
						STATEMENT 1 ON LINE 496
		dumpptr = addrel (dumpptr, fnp_size);

003420  aa  6 00560 3521 20	epp2 	pr6|368,*		dumpptr
003421  aa   040000 0520 03	adwp2	16384,du
003422  aa  6 00560 2521 00	spri2	pr6|368		dumpptr
						STATEMENT 1 ON LINE 497
	     end;

						STATEMENT 1 ON LINE 500
	end;

003423  aa   777751 7100 04	tra  	-23,ic		003374
						STATEMENT 1 ON LINE 504
	prt = addr (dumpptr -> dump.dbr);

003424  aa  6 00560 3735 20	epp7 	pr6|368,*		dumpptr
003425  aa  7 03570 3735 00	epp7 	pr7|1912		dump.dbr
003426  aa  6 00502 6535 00	spri7	pr6|322		prt
						STATEMENT 1 ON LINE 505
	dsbr_stk_no = bin (prt -> dsbr.stack, 12) * 8;

003427  aa  7 00001 2361 00	ldq  	pr7|1		dsbr.stack
003430  aa  0 00410 3771 00	anaq 	pr0|264		= 000000000000 000000007777
003431  aa   000003 7360 00	qls  	3
003432  aa  6 00165 7561 00	stq  	pr6|117		dsbr_stk_no
						STATEMENT 1 ON LINE 506
	if (restartsw | (segselsw & ^wants_regs)) then go to skip_regs;

003433  aa  6 00170 2351 00	lda  	pr6|120		restartsw
003434  aa   002065 6010 04	tnz  	1077,ic		005521
003435  aa  6 00177 2351 00	lda  	pr6|127		segselsw
003436  aa   000003 6000 04	tze  	3,ic		003441
003437  aa  6 00200 2351 00	lda  	pr6|128		wants_regs
003440  aa   002061 6000 04	tze  	1073,ic		005521
						STATEMENT 1 ON LINE 508
	call od_print_ (two, fmtdbrh);

003441  aa  6 00044 3701 20	epp4 	pr6|36,*
003442  ia  4 00234 3521 00	epp2 	pr4|156		two
003443  aa  6 00574 2521 00	spri2	pr6|380
003444  ia  4 00240 3521 00	epp2 	pr4|160		fmtdbrh
003445  aa  6 00576 2521 00	spri2	pr6|382
003446  aa   774456 3520 04	epp2 	-1746,ic		000124 = 404000000021
003447  aa  6 00600 2521 00	spri2	pr6|384
003450  aa   774400 3520 04	epp2 	-1792,ic		000050 = 524000000037
003451  aa  6 00602 2521 00	spri2	pr6|386
003452  aa  6 00572 6211 00	eax1 	pr6|378
003453  aa   010000 4310 07	fld  	4096,dl
003454  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
003455  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 509
	call od_print_ (three, fmtdbr,
	     prt -> dsbr.add, prt -> dsbr.bound, prt -> dsbr.unpaged, prt -> dsbr.stack);

003456  aa  6 00044 3701 20	epp4 	pr6|36,*
003457  ia  4 00233 3521 00	epp2 	pr4|155		three
003460  aa  6 00654 2521 00	spri2	pr6|428
003461  ia  4 00250 3521 00	epp2 	pr4|168		fmtdbr
003462  aa  6 00656 2521 00	spri2	pr6|430
003463  aa  6 00502 3521 20	epp2 	pr6|322,*		dsbr.add
003464  aa  6 00660 2521 00	spri2	pr6|432
003465  aa   000001 7270 07	lxl7 	1,dl
003466  aa  6 00502 3735 20	epp7 	pr6|322,*		prt
003467  aa  7 00001 3521 00	epp2 	pr7|1		dsbr.bound
003470  aa  2 00000 5035 17	abd  	pr2|0,7
003471  aa  6 00662 2521 00	spri2	pr6|434
003472  aa   000023 7260 07	lxl6 	19,dl
003473  aa  7 00001 3521 00	epp2 	pr7|1		dsbr.unpaged
003474  aa  2 00000 5035 16	abd  	pr2|0,6
003475  aa  6 00664 2521 00	spri2	pr6|436
003476  aa   000030 7250 07	lxl5 	24,dl
003477  aa  7 00001 3521 00	epp2 	pr7|1		dsbr.stack
003500  aa  2 00000 5035 15	abd  	pr2|0,5
003501  aa  6 00666 2521 00	spri2	pr6|438
003502  aa   774422 3520 04	epp2 	-1774,ic		000124 = 404000000021
003503  aa  6 00670 2521 00	spri2	pr6|440
003504  aa   774343 3520 04	epp2 	-1821,ic		000047 = 524000000042
003505  aa  6 00672 2521 00	spri2	pr6|442
003506  aa   774340 3520 04	epp2 	-1824,ic		000046 = 516000000030
003507  aa  6 00674 2521 00	spri2	pr6|444
003510  aa   774335 3520 04	epp2 	-1827,ic		000045 = 516000000016
003511  aa  6 00676 2521 00	spri2	pr6|446
003512  aa   774332 3520 04	epp2 	-1830,ic		000044 = 516000000001
003513  aa  6 00700 2521 00	spri2	pr6|448
003514  aa   774327 3520 04	epp2 	-1833,ic		000043 = 516000000014
003515  aa  6 00702 2521 00	spri2	pr6|450
003516  aa  6 00652 6211 00	eax1 	pr6|426
003517  aa   030000 4310 07	fld  	12288,dl
003520  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
003521  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 513
	call od_print_ (four, fmtpprh);

003522  aa  6 00044 3701 20	epp4 	pr6|36,*
003523  ia  4 00232 3521 00	epp2 	pr4|154		four
003524  aa  6 00574 2521 00	spri2	pr6|380
003525  ia  4 00261 3521 00	epp2 	pr4|177		fmtpprh
003526  aa  6 00576 2521 00	spri2	pr6|382
003527  aa   774375 3520 04	epp2 	-1795,ic		000124 = 404000000021
003530  aa  6 00600 2521 00	spri2	pr6|384
003531  aa   774311 3520 04	epp2 	-1847,ic		000042 = 524000000034
003532  aa  6 00602 2521 00	spri2	pr6|386
003533  aa  6 00572 6211 00	eax1 	pr6|378
003534  aa   010000 4310 07	fld  	4096,dl
003535  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
003536  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 514
	scup = addr (dumpptr -> dump.scu (0));

003537  aa  6 00560 3735 20	epp7 	pr6|368,*		dumpptr
003540  aa  7 03540 3735 00	epp7 	pr7|1888		dump.scu
003541  aa  6 00546 6535 00	spri7	pr6|358		scup
						STATEMENT 1 ON LINE 515
	call od_print_ (one, fmtppr,
	     scup -> scu.ppr.prr, scup -> scu.ppr.psr, scup -> scu.ilc);

003542  aa  6 00044 3701 20	epp4 	pr6|36,*
003543  ia  4 00235 3521 00	epp2 	pr4|157		one
003544  aa  6 00626 2521 00	spri2	pr6|406
003545  ia  4 00270 3521 00	epp2 	pr4|184		fmtppr
003546  aa  6 00630 2521 00	spri2	pr6|408
003547  aa  7 00000 3521 00	epp2 	pr7|0		scu.prr
003550  aa  6 00632 2521 00	spri2	pr6|410
003551  aa   000003 7270 07	lxl7 	3,dl
003552  aa  7 00000 3521 00	epp2 	pr7|0		scu.psr
003553  aa  2 00000 5035 17	abd  	pr2|0,7
003554  aa  6 00634 2521 00	spri2	pr6|412
003555  aa   000022 7260 07	lxl6 	18,dl
003556  aa  7 00004 3521 00	epp2 	pr7|4		scu.ilc
003557  aa  2 00000 5035 16	abd  	pr2|0,6
003560  aa  6 00636 2521 00	spri2	pr6|414
003561  aa   774343 3520 04	epp2 	-1821,ic		000124 = 404000000021
003562  aa  6 00640 2521 00	spri2	pr6|416
003563  aa   774256 3520 04	epp2 	-1874,ic		000041 = 524000000043
003564  aa  6 00642 2521 00	spri2	pr6|418
003565  aa   774253 3520 04	epp2 	-1877,ic		000040 = 516000000003
003566  aa  6 00644 2521 00	spri2	pr6|420
003567  aa   774250 3520 04	epp2 	-1880,ic		000037 = 516000000017
003570  aa  6 00646 2521 00	spri2	pr6|422
003571  aa   774245 3520 04	epp2 	-1883,ic		000036 = 516000000022
003572  aa  6 00650 2521 00	spri2	pr6|424
003573  aa  6 00624 6211 00	eax1 	pr6|404
003574  aa   024000 4310 07	fld  	10240,dl
003575  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
003576  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 519
	call od_print_ (two, fmtrar, dumpptr -> dump.regs.ralr);

003577  aa  6 00044 3701 20	epp4 	pr6|36,*
003600  ia  4 00234 3521 00	epp2 	pr4|156		two
003601  aa  6 00610 2521 00	spri2	pr6|392
003602  ia  4 00301 3521 00	epp2 	pr4|193		fmtrar
003603  aa  6 00612 2521 00	spri2	pr6|394
003604  aa   000041 7270 07	lxl7 	33,dl
003605  aa  6 00560 3735 20	epp7 	pr6|368,*		dumpptr
003606  aa  7 03527 3521 00	epp2 	pr7|1879		dump.ralr
003607  aa  2 00000 5035 17	abd  	pr2|0,7
003610  aa  6 00614 2521 00	spri2	pr6|396
003611  aa   774313 3520 04	epp2 	-1845,ic		000124 = 404000000021
003612  aa  6 00616 2521 00	spri2	pr6|398
003613  aa   774222 3520 04	epp2 	-1902,ic		000035 = 524000000021
003614  aa  6 00620 2521 00	spri2	pr6|400
003615  aa   774223 3520 04	epp2 	-1901,ic		000040 = 516000000003
003616  aa  6 00622 2521 00	spri2	pr6|402
003617  aa  6 00606 6211 00	eax1 	pr6|390
003620  aa   014000 4310 07	fld  	6144,dl
003621  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
003622  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 520
	call od_print_ (two, fmtind, scup -> scu.ir);

003623  aa  6 00044 3701 20	epp4 	pr6|36,*
003624  ia  4 00234 3521 00	epp2 	pr4|156		two
003625  aa  6 00610 2521 00	spri2	pr6|392
003626  ia  4 00306 3521 00	epp2 	pr4|198		fmtind
003627  aa  6 00612 2521 00	spri2	pr6|394
003630  aa  6 00546 3735 20	epp7 	pr6|358,*		scup
003631  aa  7 00005 3521 00	epp2 	pr7|5		scu.ir
003632  aa  6 00614 2521 00	spri2	pr6|396
003633  aa   774271 3520 04	epp2 	-1863,ic		000124 = 404000000021
003634  aa  6 00616 2521 00	spri2	pr6|398
003635  aa   774200 3520 04	epp2 	-1920,ic		000035 = 524000000021
003636  aa  6 00620 2521 00	spri2	pr6|400
003637  aa   774177 3520 04	epp2 	-1921,ic		000036 = 516000000022
003640  aa  6 00622 2521 00	spri2	pr6|402
003641  aa  6 00606 6211 00	eax1 	pr6|390
003642  aa   014000 4310 07	fld  	6144,dl
003643  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
003644  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 521
	call od_print_ (one, fmta, dumpptr -> dump.regs.a);

003645  aa  6 00044 3701 20	epp4 	pr6|36,*
003646  ia  4 00235 3521 00	epp2 	pr4|157		one
003647  aa  6 00610 2521 00	spri2	pr6|392
003650  ia  4 00313 3521 00	epp2 	pr4|203		fmta
003651  aa  6 00612 2521 00	spri2	pr6|394
003652  aa  6 00560 3735 20	epp7 	pr6|368,*		dumpptr
003653  aa  7 03524 3521 00	epp2 	pr7|1876		dump.a
003654  aa  6 00614 2521 00	spri2	pr6|396
003655  aa   774247 3520 04	epp2 	-1881,ic		000124 = 404000000021
003656  aa  6 00616 2521 00	spri2	pr6|398
003657  aa   774155 3520 04	epp2 	-1939,ic		000034 = 524000000016
003660  aa  6 00620 2521 00	spri2	pr6|400
003661  aa   774152 3520 04	epp2 	-1942,ic		000033 = 516000000044
003662  aa  6 00622 2521 00	spri2	pr6|402
003663  aa  6 00606 6211 00	eax1 	pr6|390
003664  aa   014000 4310 07	fld  	6144,dl
003665  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
003666  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 522
	call od_print_ (one, fmtq, dumpptr -> dump.regs.q);

003667  aa  6 00044 3701 20	epp4 	pr6|36,*
003670  ia  4 00235 3521 00	epp2 	pr4|157		one
003671  aa  6 00610 2521 00	spri2	pr6|392
003672  ia  4 00317 3521 00	epp2 	pr4|207		fmtq
003673  aa  6 00612 2521 00	spri2	pr6|394
003674  aa  6 00560 3735 20	epp7 	pr6|368,*		dumpptr
003675  aa  7 03525 3521 00	epp2 	pr7|1877		dump.q
003676  aa  6 00614 2521 00	spri2	pr6|396
003677  aa   774225 3520 04	epp2 	-1899,ic		000124 = 404000000021
003700  aa  6 00616 2521 00	spri2	pr6|398
003701  aa   774133 3520 04	epp2 	-1957,ic		000034 = 524000000016
003702  aa  6 00620 2521 00	spri2	pr6|400
003703  aa   774130 3520 04	epp2 	-1960,ic		000033 = 516000000044
003704  aa  6 00622 2521 00	spri2	pr6|402
003705  aa  6 00606 6211 00	eax1 	pr6|390
003706  aa   014000 4310 07	fld  	6144,dl
003707  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
003710  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 523
	call od_print_ (one, fmte, dumpptr -> dump.regs.e);

003711  aa  6 00044 3701 20	epp4 	pr6|36,*
003712  ia  4 00235 3521 00	epp2 	pr4|157		one
003713  aa  6 00610 2521 00	spri2	pr6|392
003714  ia  4 00323 3521 00	epp2 	pr4|211		fmte
003715  aa  6 00612 2521 00	spri2	pr6|394
003716  aa  6 00560 3735 20	epp7 	pr6|368,*		dumpptr
003717  aa  7 03526 3521 00	epp2 	pr7|1878		dump.e
003720  aa  6 00614 2521 00	spri2	pr6|396
003721  aa   774203 3520 04	epp2 	-1917,ic		000124 = 404000000021
003722  aa  6 00616 2521 00	spri2	pr6|398
003723  aa   774153 3520 04	epp2 	-1941,ic		000076 = 524000000017
003724  aa  6 00620 2521 00	spri2	pr6|400
003725  aa   774105 3520 04	epp2 	-1979,ic		000032 = 516000000010
003726  aa  6 00622 2521 00	spri2	pr6|402
003727  aa  6 00606 6211 00	eax1 	pr6|390
003730  aa   014000 4310 07	fld  	6144,dl
003731  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
003732  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 524
	call od_print_ (two, fmtt, dumpptr -> dump.regs.t);

003733  aa  6 00044 3701 20	epp4 	pr6|36,*
003734  ia  4 00234 3521 00	epp2 	pr4|156		two
003735  aa  6 00610 2521 00	spri2	pr6|392
003736  ia  4 00327 3521 00	epp2 	pr4|215		fmtt
003737  aa  6 00612 2521 00	spri2	pr6|394
003740  aa  6 00560 3735 20	epp7 	pr6|368,*		dumpptr
003741  aa  7 03527 3521 00	epp2 	pr7|1879		dump.t
003742  aa  6 00614 2521 00	spri2	pr6|396
003743  aa   774161 3520 04	epp2 	-1935,ic		000124 = 404000000021
003744  aa  6 00616 2521 00	spri2	pr6|398
003745  aa   774064 3520 04	epp2 	-1996,ic		000031 = 524000000024
003746  aa  6 00620 2521 00	spri2	pr6|400
003747  aa   774061 3520 04	epp2 	-1999,ic		000030 = 516000000033
003750  aa  6 00622 2521 00	spri2	pr6|402
003751  aa  6 00606 6211 00	eax1 	pr6|390
003752  aa   014000 4310 07	fld  	6144,dl
003753  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
003754  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 526
	call od_print_ (two, fmtbar, dumpptr -> dump.bar);

003755  aa  6 00044 3701 20	epp4 	pr6|36,*
003756  ia  4 00234 3521 00	epp2 	pr4|156		two
003757  aa  6 00610 2521 00	spri2	pr6|392
003760  ia  4 00334 3521 00	epp2 	pr4|220		fmtbar
003761  aa  6 00612 2521 00	spri2	pr6|394
003762  aa  6 00560 3735 20	epp7 	pr6|368,*		dumpptr
003763  aa  7 03573 3521 00	epp2 	pr7|1915		dump.bar
003764  aa  6 00614 2521 00	spri2	pr6|396
003765  aa   774137 3520 04	epp2 	-1953,ic		000124 = 404000000021
003766  aa  6 00616 2521 00	spri2	pr6|398
003767  aa   774045 3520 04	epp2 	-2011,ic		000034 = 524000000016
003770  aa  6 00620 2521 00	spri2	pr6|400
003771  aa   774063 3520 04	epp2 	-1997,ic		000054 = 514000000044
003772  aa  6 00622 2521 00	spri2	pr6|402
003773  aa  6 00606 6211 00	eax1 	pr6|390
003774  aa   014000 4310 07	fld  	6144,dl
003775  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
003776  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 529
	prt = addr (dumpptr -> dump.regs.x (0));

003777  aa  6 00560 3735 20	epp7 	pr6|368,*		dumpptr
004000  aa  7 03520 3735 00	epp7 	pr7|1872		dump.x
004001  aa  6 00502 6535 00	spri7	pr6|322		prt
						STATEMENT 1 ON LINE 530
	do j = 0 by 1 while (j < 8);

004002  aa  6 00520 4501 00	stz  	pr6|336		j
004003  aa   000000 0110 03	nop  	0,du
004004  aa  6 00520 2361 00	ldq  	pr6|336		j
004005  aa   000010 1160 07	cmpq 	8,dl
004006  aa   000031 6050 04	tpl  	25,ic		004037
						STATEMENT 1 ON LINE 531
	     call od_print_ (one, fmtx, j, prt -> xreg (j));

004007  aa   000022 4020 07	mpy  	18,dl
004010  aa  6 00044 3701 20	epp4 	pr6|36,*
004011  ia  4 00235 3521 00	epp2 	pr4|157		one
004012  aa  6 00626 2521 00	spri2	pr6|406
004013  ia  4 00340 3521 00	epp2 	pr4|224		fmtx
004014  aa  6 00630 2521 00	spri2	pr6|408
004015  aa  6 00520 3521 00	epp2 	pr6|336		j
004016  aa  6 00632 2521 00	spri2	pr6|410
004017  aa  6 00502 3521 20	epp2 	pr6|322,*		xreg
004020  aa  2 00000 5035 06	abd  	pr2|0,ql
004021  aa  6 00634 2521 00	spri2	pr6|412
004022  aa   774102 3520 04	epp2 	-1982,ic		000124 = 404000000021
004023  aa  6 00636 2521 00	spri2	pr6|414
004024  aa  6 00642 2521 00	spri2	pr6|418
004025  aa   774002 3520 04	epp2 	-2046,ic		000027 = 524000000015
004026  aa  6 00640 2521 00	spri2	pr6|416
004027  aa   773777 3520 04	epp2 	-2049,ic		000026 = 406000000021
004030  aa  6 00644 2521 00	spri2	pr6|420
004031  aa  6 00624 6211 00	eax1 	pr6|404
004032  aa   020000 4310 07	fld  	8192,dl
004033  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
004034  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 532
	end;

004035  aa  6 00520 0541 00	aos  	pr6|336		j
004036  aa   777746 7100 04	tra  	-26,ic		004004
						STATEMENT 1 ON LINE 535
	call od_print_ (two, fmtmode, dumpptr -> dump.modereg, dumpptr -> dump.cmodereg);

004037  aa  6 00044 3701 20	epp4 	pr6|36,*
004040  ia  4 00234 3521 00	epp2 	pr4|156		two
004041  aa  6 00626 2521 00	spri2	pr6|406
004042  ia  4 00350 3521 00	epp2 	pr4|232		fmtmode
004043  aa  6 00630 2521 00	spri2	pr6|408
004044  aa  6 00560 3735 20	epp7 	pr6|368,*		dumpptr
004045  aa  7 03574 3521 00	epp2 	pr7|1916		dump.modereg
004046  aa  6 00632 2521 00	spri2	pr6|410
004047  aa  7 03575 3521 00	epp2 	pr7|1917		dump.cmodereg
004050  aa  6 00634 2521 00	spri2	pr6|412
004051  aa   774053 3520 04	epp2 	-2005,ic		000124 = 404000000021
004052  aa  6 00636 2521 00	spri2	pr6|414
004053  aa   773752 3520 04	epp2 	-2070,ic		000025 = 524000000026
004054  aa  6 00640 2521 00	spri2	pr6|416
004055  aa   773777 3520 04	epp2 	-2049,ic		000054 = 514000000044
004056  aa  6 00642 2521 00	spri2	pr6|418
004057  aa  6 00644 2521 00	spri2	pr6|420
004060  aa  6 00624 6211 00	eax1 	pr6|404
004061  aa   020000 4310 07	fld  	8192,dl
004062  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
004063  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 536
	call od_print_ (one, fmtflt, dumpptr -> dump.faultreg);

004064  aa  6 00044 3701 20	epp4 	pr6|36,*
004065  ia  4 00235 3521 00	epp2 	pr4|157		one
004066  aa  6 00610 2521 00	spri2	pr6|392
004067  ia  4 00356 3521 00	epp2 	pr4|238		fmtflt
004070  aa  6 00612 2521 00	spri2	pr6|394
004071  aa  6 00560 3735 20	epp7 	pr6|368,*		dumpptr
004072  aa  7 03576 3521 00	epp2 	pr7|1918		dump.faultreg
004073  aa  6 00614 2521 00	spri2	pr6|396
004074  aa   774030 3520 04	epp2 	-2024,ic		000124 = 404000000021
004075  aa  6 00616 2521 00	spri2	pr6|398
004076  aa   773736 3520 04	epp2 	-2082,ic		000034 = 524000000016
004077  aa  6 00620 2521 00	spri2	pr6|400
004100  aa   773754 3520 04	epp2 	-2068,ic		000054 = 514000000044
004101  aa  6 00622 2521 00	spri2	pr6|402
004102  aa  6 00606 6211 00	eax1 	pr6|390
004103  aa   014000 4310 07	fld  	6144,dl
004104  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
004105  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 539
	call od_print_ (two, fmtinter, dumpptr -> dump.intrpts);

004106  aa  6 00044 3701 20	epp4 	pr6|36,*
004107  ia  4 00234 3521 00	epp2 	pr4|156		two
004110  aa  6 00610 2521 00	spri2	pr6|392
004111  ia  4 00344 3521 00	epp2 	pr4|228		fmtinter
004112  aa  6 00612 2521 00	spri2	pr6|394
004113  aa  6 00560 3735 20	epp7 	pr6|368,*		dumpptr
004114  aa  7 03572 3521 00	epp2 	pr7|1914		dump.intrpts
004115  aa  6 00614 2521 00	spri2	pr6|396
004116  aa   774006 3520 04	epp2 	-2042,ic		000124 = 404000000021
004117  aa  6 00616 2521 00	spri2	pr6|398
004120  aa   773731 3520 04	epp2 	-2087,ic		000051 = 524000000020
004121  aa  6 00620 2521 00	spri2	pr6|400
004122  aa   773732 3520 04	epp2 	-2086,ic		000054 = 514000000044
004123  aa  6 00622 2521 00	spri2	pr6|402
004124  aa  6 00606 6211 00	eax1 	pr6|390
004125  aa   014000 4310 07	fld  	6144,dl
004126  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
004127  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 542
	call od_print_ (four, fmtprh);

004130  aa  6 00044 3701 20	epp4 	pr6|36,*
004131  ia  4 00232 3521 00	epp2 	pr4|154		four
004132  aa  6 00574 2521 00	spri2	pr6|380
004133  ia  4 00362 3521 00	epp2 	pr4|242		fmtprh
004134  aa  6 00576 2521 00	spri2	pr6|382
004135  aa   773767 3520 04	epp2 	-2057,ic		000124 = 404000000021
004136  aa  6 00600 2521 00	spri2	pr6|384
004137  aa   773665 3520 04	epp2 	-2123,ic		000024 = 524000000047
004140  aa  6 00602 2521 00	spri2	pr6|386
004141  aa  6 00572 6211 00	eax1 	pr6|378
004142  aa   010000 4310 07	fld  	4096,dl
004143  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
004144  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 543
	do j = 0 by 1 while (j < 8);

004145  aa  6 00520 4501 00	stz  	pr6|336		j
004146  aa  6 00520 2361 00	ldq  	pr6|336		j
004147  aa   000010 1160 07	cmpq 	8,dl
004150  aa   000100 6050 04	tpl  	64,ic		004250
						STATEMENT 1 ON LINE 544
	     prt = addr (dumpptr -> dump.prs (j));

004151  aa   000001 7360 00	qls  	1
004152  aa  6 00560 3735 20	epp7 	pr6|368,*		dumpptr
004153  aa  7 03500 3735 06	epp7 	pr7|1856,ql	dump.prs
004154  aa  6 00502 6535 00	spri7	pr6|322		prt
						STATEMENT 1 ON LINE 545
	     call od_print_ (one, fmtpr,
		substr ("APABBPBBLPLBSPSB", j*2+1, 2),
		j,
		bin (prt -> its.ringno, 3),
		bin (prt -> its.segno, 15),
		bin (prt -> its.offset, 18),
		bin (prt -> its.bit_offset, 6));

004155  aa  6 00520 2361 00	ldq  	pr6|336		j
004156  aa   000001 7360 00	qls  	1
004157  aa  6 00570 4501 00	stz  	pr6|376
004160  aa  040 100 100 406	mlr  	(ql),(pr),fill(040)
004161  ta   000225 00 0002	desc9a	149,2
004162  aa  6 00570 00 0002	desc9a	pr6|376,2
004163  aa  7 00000 2351 00	lda  	pr7|0		its.ringno
004164  aa   000022 7350 00	als  	18
004165  aa   000105 7730 00	lrl  	69
004166  aa  6 00571 7561 00	stq  	pr6|377
004167  aa  7 00000 2351 00	lda  	pr7|0		its.segno
004170  aa   000003 7350 00	als  	3
004171  aa   000071 7730 00	lrl  	57
004172  aa  6 00704 7561 00	stq  	pr6|452
004173  aa  7 00001 2351 00	lda  	pr7|1		its.offset
004174  aa   000066 7730 00	lrl  	54
004175  aa  6 00705 7561 00	stq  	pr6|453
004176  aa  7 00001 2351 00	lda  	pr7|1		its.bit_offset
004177  aa   000025 7350 00	als  	21
004200  aa   000102 7730 00	lrl  	66
004201  aa  6 00706 7561 00	stq  	pr6|454
004202  aa  6 00044 3701 20	epp4 	pr6|36,*
004203  ia  4 00235 3521 00	epp2 	pr4|157		one
004204  aa  6 00712 2521 00	spri2	pr6|458
004205  ia  4 00374 3521 00	epp2 	pr4|252		fmtpr
004206  aa  6 00714 2521 00	spri2	pr6|460
004207  aa  6 00570 3521 00	epp2 	pr6|376
004210  aa  6 00716 2521 00	spri2	pr6|462
004211  aa  6 00520 3521 00	epp2 	pr6|336		j
004212  aa  6 00720 2521 00	spri2	pr6|464
004213  aa  6 00571 3521 00	epp2 	pr6|377
004214  aa  6 00722 2521 00	spri2	pr6|466
004215  aa  6 00704 3521 00	epp2 	pr6|452
004216  aa  6 00724 2521 00	spri2	pr6|468
004217  aa  6 00705 3521 00	epp2 	pr6|453
004220  aa  6 00726 2521 00	spri2	pr6|470
004221  aa  6 00706 3521 00	epp2 	pr6|454
004222  aa  6 00730 2521 00	spri2	pr6|472
004223  aa   773701 3520 04	epp2 	-2111,ic		000124 = 404000000021
004224  aa  6 00732 2521 00	spri2	pr6|474
004225  aa  6 00740 2521 00	spri2	pr6|480
004226  aa   773576 3520 04	epp2 	-2178,ic		000024 = 524000000047
004227  aa  6 00734 2521 00	spri2	pr6|476
004230  aa   773654 3520 04	epp2 	-2132,ic		000104 = 524000000002
004231  aa  6 00736 2521 00	spri2	pr6|478
004232  aa   773571 3520 04	epp2 	-2183,ic		000023 = 404000000003
004233  aa  6 00742 2521 00	spri2	pr6|482
004234  aa   773566 3520 04	epp2 	-2186,ic		000022 = 404000000017
004235  aa  6 00744 2521 00	spri2	pr6|484
004236  aa   773563 3520 04	epp2 	-2189,ic		000021 = 404000000022
004237  aa  6 00746 2521 00	spri2	pr6|486
004240  aa   773560 3520 04	epp2 	-2192,ic		000020 = 404000000006
004241  aa  6 00750 2521 00	spri2	pr6|488
004242  aa  6 00710 6211 00	eax1 	pr6|456
004243  aa   040000 4310 07	fld  	16384,dl
004244  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
004245  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 552
	end;

004246  aa  6 00520 0541 00	aos  	pr6|336		j
004247  aa   777677 7100 04	tra  	-65,ic		004146
						STATEMENT 1 ON LINE 554
	call od_print_$op_new_page;

004250  aa  6 00056 6211 00	eax1 	pr6|46
004251  aa   000000 4310 07	fld  	0,dl
004252  aa  6 00044 3701 20	epp4 	pr6|36,*
004253  la  4 00672 3521 20	epp2 	pr4|442,*		od_print_$op_new_page
004254  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 556
	call od_print_ (five, fmtamsdwh);

004255  aa  6 00044 3701 20	epp4 	pr6|36,*
004256  ia  4 00231 3521 00	epp2 	pr4|153		five
004257  aa  6 00574 2521 00	spri2	pr6|380
004260  ia  4 00406 3521 00	epp2 	pr4|262		fmtamsdwh
004261  aa  6 00576 2521 00	spri2	pr6|382
004262  aa   773642 3520 04	epp2 	-2142,ic		000124 = 404000000021
004263  aa  6 00600 2521 00	spri2	pr6|384
004264  aa   773533 3520 04	epp2 	-2213,ic		000017 = 524000000121
004265  aa  6 00602 2521 00	spri2	pr6|386
004266  aa  6 00572 6211 00	eax1 	pr6|378
004267  aa   010000 4310 07	fld  	4096,dl
004270  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
004271  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 558
	do j = 0 by 1 while (j < 16);

004272  aa  6 00520 4501 00	stz  	pr6|336		j
004273  aa   000000 0110 03	nop  	0,du
004274  aa  6 00520 2361 00	ldq  	pr6|336		j
004275  aa   000020 1160 07	cmpq 	16,dl
004276  aa   000170 6050 04	tpl  	120,ic		004466
						STATEMENT 1 ON LINE 559
	     amrp = addr (dumpptr -> dump.amsdwregs (j));

004277  aa   000001 7360 00	qls  	1
004300  aa  6 00560 3735 20	epp7 	pr6|368,*		dumpptr
004301  aa  7 02200 3735 06	epp7 	pr7|1152,ql	dump.amsdwregs
004302  aa  6 00542 6535 00	spri7	pr6|354		amrp
						STATEMENT 1 ON LINE 560
	     ampp = addr (dumpptr -> dump.amsdwptrs (j));

004303  aa  6 00520 7271 00	lxl7 	pr6|336		j
004304  aa  6 00560 3715 20	epp5 	pr6|368,*		dumpptr
004305  aa  5 02400 3715 17	epp5 	pr5|1280,7	dump.amsdwptrs
004306  aa  6 00544 6515 00	spri5	pr6|356		ampp
						STATEMENT 1 ON LINE 562
	     axstring = "REWPUG  ";

004307  aa   773631 2370 04	ldaq 	-2151,ic		000140 = 122105127120 125107040040
004310  aa  6 00540 7571 00	staq 	pr6|352		axstring
						STATEMENT 1 ON LINE 563
	     axbitsp = addr (amrp -> amsdwreg.read);

004311  aa   000017 7260 07	lxl6 	15,dl
004312  aa  7 00001 3521 00	epp2 	pr7|1		amsdwreg.read
004313  aa  2 00000 5035 16	abd  	pr2|0,6
004314  aa  6 00536 2521 00	spri2	pr6|350		axbitsp
						STATEMENT 1 ON LINE 564
	     do l = 1 to 6;

004315  aa   000001 2360 07	ldq  	1,dl
004316  aa  6 00521 7561 00	stq  	pr6|337		l
004317  aa   000000 0110 03	nop  	0,du
004320  aa  6 00521 2361 00	ldq  	pr6|337		l
004321  aa   000006 1160 07	cmpq 	6,dl
004322  aa   000013 6054 04	tpnz 	11,ic		004335
						STATEMENT 1 ON LINE 565
		if axbitsp -> axbits (l) = "0"b then substr (axstring, l, 1) = " ";

004323  aa  6 00536 3735 20	epp7 	pr6|350,*		axbitsp
004324  aa  000 000 066 506	cmpb 	(pr,ql),(),fill(0)
004325  aa  7 77777 70 0001	descb	pr7|-1(35),1	axbits
004326  aa   000000 00 0000	descb	0,0
004327  aa   000004 6010 04	tnz  	4,ic		004333
004330  aa  040 106 100 400	mlr  	(),(pr,ql),fill(040)
004331  aa   000000 00 0000	desc9a	0,0
004332  aa  6 00537 60 0001	desc9a	pr6|351(3),1	axstring
						STATEMENT 1 ON LINE 566
	     end;

004333  aa  6 00521 0541 00	aos  	pr6|337		l
004334  aa   777764 7100 04	tra  	-12,ic		004320
						STATEMENT 1 ON LINE 568
	     call od_print_ (one, fmtamsdw,
		bin (amrp -> amsdwreg.addr, 24),
		bin (amrp -> amsdwreg.r1, 3),
		bin (amrp -> amsdwreg.r2, 3),
		bin (amrp -> amsdwreg.r3, 3),
		bin (amrp -> amsdwreg.bound, 14),
		axstring,
		bin (amrp -> amsdwreg.cl, 14),
		bin (ampp -> amsdwptr.pointer, 15),
		substr ("EF", bin (ampp -> amsdwptr.valid, 1)+1, 1),
		bin (ampp -> amsdwptr.usage, 4));

004335  aa  6 00542 2351 20	lda  	pr6|354,*		amsdwreg.addr
004336  aa   000060 7730 00	lrl  	48
004337  aa  6 00706 7561 00	stq  	pr6|454
004340  aa  6 00542 2351 20	lda  	pr6|354,*		amsdwreg.r1
004341  aa   000030 7350 00	als  	24
004342  aa   000105 7730 00	lrl  	69
004343  aa  6 00705 7561 00	stq  	pr6|453
004344  aa  6 00542 2351 20	lda  	pr6|354,*		amsdwreg.r2
004345  aa   000033 7350 00	als  	27
004346  aa   000105 7730 00	lrl  	69
004347  aa  6 00704 7561 00	stq  	pr6|452
004350  aa  6 00542 2351 20	lda  	pr6|354,*		amsdwreg.r3
004351  aa   000036 7350 00	als  	30
004352  aa   000105 7730 00	lrl  	69
004353  aa  6 00571 7561 00	stq  	pr6|377
004354  aa  6 00542 3735 20	epp7 	pr6|354,*		amrp
004355  aa  7 00001 2351 00	lda  	pr7|1		amsdwreg.bound
004356  aa   000001 7350 00	als  	1
004357  aa   000072 7730 00	lrl  	58
004360  aa  6 00570 7561 00	stq  	pr6|376
004361  aa  7 00001 2361 00	ldq  	pr7|1		amsdwreg.cl
004362  aa  0 00404 3771 00	anaq 	pr0|260		= 000000000000 000000037777
004363  aa  6 00707 7561 00	stq  	pr6|455
004364  aa  6 00544 2351 20	lda  	pr6|356,*		amsdwptr.pointer
004365  aa   000071 7730 00	lrl  	57
004366  aa  6 00752 7561 00	stq  	pr6|490
004367  aa  6 00544 2351 20	lda  	pr6|356,*		amsdwptr.valid
004370  aa   000033 7350 00	als  	27
004371  aa   000107 7730 00	lrl  	71
004372  aa  6 00754 4501 00	stz  	pr6|492
004373  aa   002742 3714 04	epp5 	1506,ic		007335 = 105106000000
004374  aa  040 100 100 506	mlr  	(pr,ql),(pr),fill(040)
004375  aa  5 00000 00 0001	desc9a	pr5|0,1
004376  aa  6 00754 00 0001	desc9a	pr6|492,1
004377  aa  6 00544 2361 20	ldq  	pr6|356,*		amsdwptr.usage
004400  aa  0 00430 3771 00	anaq 	pr0|280		= 000000000000 000000000017
004401  aa  6 00753 7561 00	stq  	pr6|491
004402  aa  6 00044 3701 20	epp4 	pr6|36,*
004403  ia  4 00235 3521 00	epp2 	pr4|157		one
004404  aa  6 00760 2521 00	spri2	pr6|496
004405  ia  4 00433 3521 00	epp2 	pr4|283		fmtamsdw
004406  aa  6 00762 2521 00	spri2	pr6|498
004407  aa  6 00706 3521 00	epp2 	pr6|454
004410  aa  6 00764 2521 00	spri2	pr6|500
004411  aa  6 00705 3521 00	epp2 	pr6|453
004412  aa  6 00766 2521 00	spri2	pr6|502
004413  aa  6 00704 3521 00	epp2 	pr6|452
004414  aa  6 00770 2521 00	spri2	pr6|504
004415  aa  6 00571 3521 00	epp2 	pr6|377
004416  aa  6 00772 2521 00	spri2	pr6|506
004417  aa  6 00570 3521 00	epp2 	pr6|376
004420  aa  6 00774 2521 00	spri2	pr6|508
004421  aa  6 00540 3521 00	epp2 	pr6|352		axstring
004422  aa  6 00776 2521 00	spri2	pr6|510
004423  aa  6 00707 3521 00	epp2 	pr6|455
004424  aa  6 01000 2521 00	spri2	pr6|512
004425  aa  6 00752 3521 00	epp2 	pr6|490
004426  aa  6 01002 2521 00	spri2	pr6|514
004427  aa  6 00754 3521 00	epp2 	pr6|492
004430  aa  6 01004 2521 00	spri2	pr6|516
004431  aa  6 00753 3521 00	epp2 	pr6|491
004432  aa  6 01006 2521 00	spri2	pr6|518
004433  aa   773471 3520 04	epp2 	-2247,ic		000124 = 404000000021
004434  aa  6 01010 2521 00	spri2	pr6|520
004435  aa   773361 3520 04	epp2 	-2319,ic		000016 = 524000000063
004436  aa  6 01012 2521 00	spri2	pr6|522
004437  aa   773356 3520 04	epp2 	-2322,ic		000015 = 404000000030
004440  aa  6 01014 2521 00	spri2	pr6|524
004441  aa   773362 3520 04	epp2 	-2318,ic		000023 = 404000000003
004442  aa  6 01016 2521 00	spri2	pr6|526
004443  aa  6 01020 2521 00	spri2	pr6|528
004444  aa  6 01022 2521 00	spri2	pr6|530
004445  aa   773347 3520 04	epp2 	-2329,ic		000014 = 404000000016
004446  aa  6 01024 2521 00	spri2	pr6|532
004447  aa  6 01030 2521 00	spri2	pr6|536
004450  aa   773430 3520 04	epp2 	-2280,ic		000100 = 524000000010
004451  aa  6 01026 2521 00	spri2	pr6|534
004452  aa   773350 3520 04	epp2 	-2328,ic		000022 = 404000000017
004453  aa  6 01032 2521 00	spri2	pr6|538
004454  aa   773403 3520 04	epp2 	-2301,ic		000057 = 524000000001
004455  aa  6 01034 2521 00	spri2	pr6|540
004456  aa   773335 3520 04	epp2 	-2339,ic		000013 = 404000000004
004457  aa  6 01036 2521 00	spri2	pr6|542
004460  aa  6 00756 6211 00	eax1 	pr6|494
004461  aa   060000 4310 07	fld  	24576,dl
004462  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
004463  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 579
	end;

004464  aa  6 00520 0541 00	aos  	pr6|336		j
004465  aa   777607 7100 04	tra  	-121,ic		004274
						STATEMENT 1 ON LINE 582
	call od_print_ (five, fmtamptwh);

004466  aa  6 00044 3701 20	epp4 	pr6|36,*
004467  ia  4 00231 3521 00	epp2 	pr4|153		five
004470  aa  6 00574 2521 00	spri2	pr6|380
004471  ia  4 00450 3521 00	epp2 	pr4|296		fmtamptwh
004472  aa  6 00576 2521 00	spri2	pr6|382
004473  aa   773431 3520 04	epp2 	-2279,ic		000124 = 404000000021
004474  aa  6 00600 2521 00	spri2	pr6|384
004475  aa   773315 3520 04	epp2 	-2355,ic		000012 = 524000000077
004476  aa  6 00602 2521 00	spri2	pr6|386
004477  aa  6 00572 6211 00	eax1 	pr6|378
004500  aa   010000 4310 07	fld  	4096,dl
004501  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
004502  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 583
	do j = 0 by 1 while (j < 16);

004503  aa  6 00520 4501 00	stz  	pr6|336		j
004504  aa  6 00520 2361 00	ldq  	pr6|336		j
004505  aa   000020 1160 07	cmpq 	16,dl
004506  aa   000113 6050 04	tpl  	75,ic		004621
						STATEMENT 1 ON LINE 585
	     amrp = addr (dumpptr -> dump.amptwregs (j));

004507  aa  6 00560 3735 20	epp7 	pr6|368,*		dumpptr
004510  aa  7 02000 3735 06	epp7 	pr7|1024,ql	dump.amptwregs
004511  aa  6 00542 6535 00	spri7	pr6|354		amrp
						STATEMENT 1 ON LINE 586
	     ampp = addr (dumpptr -> dump.amptwptrs (j));

004512  aa  6 00560 3715 20	epp5 	pr6|368,*		dumpptr
004513  aa  5 02100 3715 06	epp5 	pr5|1088,ql	dump.amptwptrs
004514  aa  6 00544 6515 00	spri5	pr6|356		ampp
						STATEMENT 1 ON LINE 588
	     if amrp -> amptwreg.modif then twochar = "  ";

004515  aa  7 00000 2351 00	lda  	pr7|0		amptwreg.modif
004516  aa   000100 3150 07	cana 	64,dl
004517  aa   000004 6000 04	tze  	4,ic		004523
004520  aa   040040 2350 03	lda  	16416,du
004521  aa  6 00164 7551 00	sta  	pr6|116		twochar
004522  aa   000003 7100 04	tra  	3,ic		004525
						STATEMENT 2 ON LINE 588
 else twochar = "NO";

004523  aa   116117 2350 03	lda  	40015,du
004524  aa  6 00164 7551 00	sta  	pr6|116		twochar
						STATEMENT 1 ON LINE 589
	     if ampp -> amptwptr.valid then onechar = "F";

004525  aa  5 00000 2351 00	lda  	pr5|0		amptwptr.valid
004526  aa   000400 3150 07	cana 	256,dl
004527  aa   000004 6000 04	tze  	4,ic		004533
004530  aa   106000 2350 03	lda  	35840,du
004531  aa  6 00163 7551 00	sta  	pr6|115		onechar
004532  aa   000003 7100 04	tra  	3,ic		004535
						STATEMENT 2 ON LINE 589
 else onechar = "E";

004533  aa   105000 2350 03	lda  	35328,du
004534  aa  6 00163 7551 00	sta  	pr6|115		onechar
						STATEMENT 1 ON LINE 591
	     call od_print_ (one, fmtamptw,
		bin (amrp -> amptwreg.addr, 18),
		twochar,
		bin (ampp -> amptwptr.pointer, 15),
		bin (ampp -> amptwptr.pageno, 12),
		onechar,
		bin (ampp -> amptwptr.usage, 4));

004535  aa  7 00000 2351 00	lda  	pr7|0		amptwreg.addr
004536  aa   000066 7730 00	lrl  	54
004537  aa  6 00753 7561 00	stq  	pr6|491
004540  aa  5 00000 2351 00	lda  	pr5|0		amptwptr.pointer
004541  aa   000071 7730 00	lrl  	57
004542  aa  6 00754 7561 00	stq  	pr6|492
004543  aa  5 00000 2351 00	lda  	pr5|0		amptwptr.pageno
004544  aa   000017 7350 00	als  	15
004545  aa   000074 7730 00	lrl  	60
004546  aa  6 00752 7561 00	stq  	pr6|490
004547  aa  5 00000 2361 00	ldq  	pr5|0		amptwptr.usage
004550  aa  0 00430 3771 00	anaq 	pr0|280		= 000000000000 000000000017
004551  aa  6 00707 7561 00	stq  	pr6|455
004552  aa  6 00044 3701 20	epp4 	pr6|36,*
004553  ia  4 00235 3521 00	epp2 	pr4|157		one
004554  aa  6 00712 2521 00	spri2	pr6|458
004555  ia  4 00470 3521 00	epp2 	pr4|312		fmtamptw
004556  aa  6 00714 2521 00	spri2	pr6|460
004557  aa  6 00753 3521 00	epp2 	pr6|491
004560  aa  6 00716 2521 00	spri2	pr6|462
004561  aa  6 00164 3521 00	epp2 	pr6|116		twochar
004562  aa  6 00720 2521 00	spri2	pr6|464
004563  aa  6 00754 3521 00	epp2 	pr6|492
004564  aa  6 00722 2521 00	spri2	pr6|466
004565  aa  6 00752 3521 00	epp2 	pr6|490
004566  aa  6 00724 2521 00	spri2	pr6|468
004567  aa  6 00163 3521 00	epp2 	pr6|115		onechar
004570  aa  6 00726 2521 00	spri2	pr6|470
004571  aa  6 00707 3521 00	epp2 	pr6|455
004572  aa  6 00730 2521 00	spri2	pr6|472
004573  aa   773331 3520 04	epp2 	-2343,ic		000124 = 404000000021
004574  aa  6 00732 2521 00	spri2	pr6|474
004575  aa   773214 3520 04	epp2 	-2420,ic		000011 = 524000000051
004576  aa  6 00734 2521 00	spri2	pr6|476
004577  aa   773222 3520 04	epp2 	-2414,ic		000021 = 404000000022
004600  aa  6 00736 2521 00	spri2	pr6|478
004601  aa   773303 3520 04	epp2 	-2365,ic		000104 = 524000000002
004602  aa  6 00740 2521 00	spri2	pr6|480
004603  aa   773217 3520 04	epp2 	-2417,ic		000022 = 404000000017
004604  aa  6 00742 2521 00	spri2	pr6|482
004605  aa   773203 3520 04	epp2 	-2429,ic		000010 = 404000000014
004606  aa  6 00744 2521 00	spri2	pr6|484
004607  aa   773250 3520 04	epp2 	-2392,ic		000057 = 524000000001
004610  aa  6 00746 2521 00	spri2	pr6|486
004611  aa   773202 3520 04	epp2 	-2430,ic		000013 = 404000000004
004612  aa  6 00750 2521 00	spri2	pr6|488
004613  aa  6 00710 6211 00	eax1 	pr6|456
004614  aa   040000 4310 07	fld  	16384,dl
004615  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
004616  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 598
	end;

004617  aa  6 00520 0541 00	aos  	pr6|336		j
004620  aa   777664 7100 04	tra  	-76,ic		004504
						STATEMENT 1 ON LINE 600
	call od_print_$op_new_page;

004621  aa  6 00056 6211 00	eax1 	pr6|46
004622  aa   000000 4310 07	fld  	0,dl
004623  aa  6 00044 3701 20	epp4 	pr6|36,*
004624  la  4 00672 3521 20	epp2 	pr4|442,*		od_print_$op_new_page
004625  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 602
	call od_print_ (four, fmtcbh);

004626  aa  6 00044 3701 20	epp4 	pr6|36,*
004627  ia  4 00232 3521 00	epp2 	pr4|154		four
004630  aa  6 00574 2521 00	spri2	pr6|380
004631  ia  4 00503 3521 00	epp2 	pr4|323		fmtcbh
004632  aa  6 00576 2521 00	spri2	pr6|382
004633  aa   773271 3520 04	epp2 	-2375,ic		000124 = 404000000021
004634  aa  6 00600 2521 00	spri2	pr6|384
004635  aa   773257 3520 04	epp2 	-2385,ic		000114 = 524000000041
004636  aa  6 00602 2521 00	spri2	pr6|386
004637  aa  6 00572 6211 00	eax1 	pr6|378
004640  aa   010000 4310 07	fld  	4096,dl
004641  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
004642  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 603
	do j = 0 by 1 while (j < 8);

004643  aa  6 00520 4501 00	stz  	pr6|336		j
004644  aa  6 00520 2361 00	ldq  	pr6|336		j
004645  aa   000010 1160 07	cmpq 	8,dl
004646  aa   000070 6050 04	tpl  	56,ic		004736
						STATEMENT 1 ON LINE 604
	     prt = addr (dumpptr -> dump.coreblocks (j).num_first);

004647  aa  6 00560 3735 20	epp7 	pr6|368,*		dumpptr
004650  aa  7 03610 3735 06	epp7 	pr7|1928,ql	dump.num_first
004651  aa  6 00502 6535 00	spri7	pr6|322		prt
						STATEMENT 1 ON LINE 605
	     if prt -> sgl.zero = -1 then call od_print_ (one, fmtcbno);

004652  aa  7 00000 2361 00	ldq  	pr7|0		sgl.zero
004653  aa   002463 1160 04	cmpq 	1331,ic		007336 = 777777777777
004654  aa   000017 6010 04	tnz  	15,ic		004673
004655  aa  6 00044 3701 20	epp4 	pr6|36,*
004656  ia  4 00235 3521 00	epp2 	pr4|157		one
004657  aa  6 00574 2521 00	spri2	pr6|380
004660  ia  4 00514 3521 00	epp2 	pr4|332		fmtcbno
004661  aa  6 00576 2521 00	spri2	pr6|382
004662  aa   773242 3520 04	epp2 	-2398,ic		000124 = 404000000021
004663  aa  6 00600 2521 00	spri2	pr6|384
004664  aa   773143 3520 04	epp2 	-2461,ic		000027 = 524000000015
004665  aa  6 00602 2521 00	spri2	pr6|386
004666  aa  6 00572 6211 00	eax1 	pr6|378
004667  aa   010000 4310 07	fld  	4096,dl
004670  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
004671  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
004672  aa   000042 7100 04	tra  	34,ic		004734
						STATEMENT 1 ON LINE 606
	     else do;

						STATEMENT 1 ON LINE 607
		n_first = bin (dumpptr -> dump.coreblocks (j).num_first, 18);

004673  aa  6 00520 7271 00	lxl7 	pr6|336		j
004674  aa  6 00560 3715 20	epp5 	pr6|368,*		dumpptr
004675  aa  5 03610 2351 17	lda  	pr5|1928,7	dump.num_first
004676  aa   000066 7730 00	lrl  	54
004677  aa  6 00126 7561 00	stq  	pr6|86		n_first
						STATEMENT 1 ON LINE 608
		n_blocks = bin (dumpptr -> dump.coreblocks (j).num_blocks, 18);

004700  aa  5 03610 2361 17	ldq  	pr5|1928,7	dump.num_blocks
004701  aa  0 00374 3771 00	anaq 	pr0|252		= 000000000000 000000777777
004702  aa  6 00125 7561 00	stq  	pr6|85		n_blocks
						STATEMENT 1 ON LINE 609
		call od_print_ (one, "^-^-^- ^6o ^4o", n_first, n_blocks);

004703  aa   773316 2350 04	lda  	-2354,ic		000221 = 136055136055
004704  aa   773316 2360 04	ldq  	-2354,ic		000222 = 136055040136
004705  aa  6 00572 7571 00	staq 	pr6|378
004706  aa   773315 2350 04	lda  	-2355,ic		000223 = 066157040136
004707  aa   064157 2360 03	ldq  	26735,du
004710  aa  6 00574 7571 00	staq 	pr6|380
004711  aa  6 00044 3701 20	epp4 	pr6|36,*
004712  ia  4 00235 3521 00	epp2 	pr4|157		one
004713  aa  6 00626 2521 00	spri2	pr6|406
004714  aa  6 00572 3521 00	epp2 	pr6|378
004715  aa  6 00630 2521 00	spri2	pr6|408
004716  aa  6 00126 3521 00	epp2 	pr6|86		n_first
004717  aa  6 00632 2521 00	spri2	pr6|410
004720  aa  6 00125 3521 00	epp2 	pr6|85		n_blocks
004721  aa  6 00634 2521 00	spri2	pr6|412
004722  aa   773202 3520 04	epp2 	-2430,ic		000124 = 404000000021
004723  aa  6 00636 2521 00	spri2	pr6|414
004724  aa  6 00642 2521 00	spri2	pr6|418
004725  aa  6 00644 2521 00	spri2	pr6|420
004726  aa   773106 3520 04	epp2 	-2490,ic		000034 = 524000000016
004727  aa  6 00640 2521 00	spri2	pr6|416
004730  aa  6 00624 6211 00	eax1 	pr6|404
004731  aa   020000 4310 07	fld  	8192,dl
004732  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
004733  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 610
	     end;

						STATEMENT 1 ON LINE 611
	end;

004734  aa  6 00520 0541 00	aos  	pr6|336		j
004735  aa   777707 7100 04	tra  	-57,ic		004644
						STATEMENT 1 ON LINE 613
	call od_print_ (four, fmtmcmh);

004736  aa  6 00044 3701 20	epp4 	pr6|36,*
004737  ia  4 00232 3521 00	epp2 	pr4|154		four
004740  aa  6 00574 2521 00	spri2	pr6|380
004741  ia  4 00520 3521 00	epp2 	pr4|336		fmtmcmh
004742  aa  6 00576 2521 00	spri2	pr6|382
004743  aa   773161 3520 04	epp2 	-2447,ic		000124 = 404000000021
004744  aa  6 00600 2521 00	spri2	pr6|384
004745  aa   773147 3520 04	epp2 	-2457,ic		000114 = 524000000041
004746  aa  6 00602 2521 00	spri2	pr6|386
004747  aa  6 00572 6211 00	eax1 	pr6|378
004750  aa   010000 4310 07	fld  	4096,dl
004751  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
004752  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 614
	do j = 0 by 4 while (j< 8);

004753  aa  6 00520 4501 00	stz  	pr6|336		j
004754  aa  6 00520 2361 00	ldq  	pr6|336		j
004755  aa   000010 1160 07	cmpq 	8,dl
004756  aa   000067 6050 04	tpl  	55,ic		005045
						STATEMENT 1 ON LINE 615
	     prt = addr (dumpptr -> dump.mcm (j));

004757  aa   000001 7360 00	qls  	1
004760  aa  6 00560 3735 20	epp7 	pr6|368,*		dumpptr
004761  aa  7 03550 3735 06	epp7 	pr7|1896,ql	dump.mcm
004762  aa  6 00502 6535 00	spri7	pr6|322		prt
						STATEMENT 1 ON LINE 616
	     call od_print_ (1, fmtmcm,
		2*j,
		prt -> sgl.zero, prt -> sgl.one, prt -> sgl.two, prt -> sgl.three,
		prt -> sgl.four, prt -> sgl.five, prt -> sgl.six, prt -> sgl.seven);

004763  aa   000001 2360 07	ldq  	1,dl
004764  aa  6 00707 7561 00	stq  	pr6|455
004765  aa  6 00520 2361 00	ldq  	pr6|336		j
004766  aa   000001 7360 00	qls  	1
004767  aa  6 00752 7561 00	stq  	pr6|490
004770  aa  6 00707 3521 00	epp2 	pr6|455
004771  aa  6 00760 2521 00	spri2	pr6|496
004772  aa  6 00044 3701 20	epp4 	pr6|36,*
004773  ia  4 00531 3521 00	epp2 	pr4|345		fmtmcm
004774  aa  6 00762 2521 00	spri2	pr6|498
004775  aa  6 00752 3521 00	epp2 	pr6|490
004776  aa  6 00764 2521 00	spri2	pr6|500
004777  aa  7 00000 3521 00	epp2 	pr7|0		sgl.zero
005000  aa  6 00766 2521 00	spri2	pr6|502
005001  aa  7 00001 3521 00	epp2 	pr7|1		sgl.one
005002  aa  6 00770 2521 00	spri2	pr6|504
005003  aa  7 00002 3521 00	epp2 	pr7|2		sgl.two
005004  aa  6 00772 2521 00	spri2	pr6|506
005005  aa  7 00003 3521 00	epp2 	pr7|3		sgl.three
005006  aa  6 00774 2521 00	spri2	pr6|508
005007  aa  7 00004 3521 00	epp2 	pr7|4		sgl.four
005010  aa  6 00776 2521 00	spri2	pr6|510
005011  aa  7 00005 3521 00	epp2 	pr7|5		sgl.five
005012  aa  6 01000 2521 00	spri2	pr6|512
005013  aa  7 00006 3521 00	epp2 	pr7|6		sgl.six
005014  aa  6 01002 2521 00	spri2	pr6|514
005015  aa  7 00007 3521 00	epp2 	pr7|7		sgl.seven
005016  aa  6 01004 2521 00	spri2	pr6|516
005017  aa   773076 3520 04	epp2 	-2498,ic		000115 = 404000000005
005020  aa  6 01006 2521 00	spri2	pr6|518
005021  aa   772766 3520 04	epp2 	-2570,ic		000007 = 524000000050
005022  aa  6 01010 2521 00	spri2	pr6|520
005023  aa   772763 3520 04	epp2 	-2573,ic		000006 = 404000000027
005024  aa  6 01012 2521 00	spri2	pr6|522
005025  aa   773076 3520 04	epp2 	-2498,ic		000123 = 404000000043
005026  aa  6 01014 2521 00	spri2	pr6|524
005027  aa  6 01016 2521 00	spri2	pr6|526
005030  aa  6 01020 2521 00	spri2	pr6|528
005031  aa  6 01022 2521 00	spri2	pr6|530
005032  aa  6 01024 2521 00	spri2	pr6|532
005033  aa  6 01026 2521 00	spri2	pr6|534
005034  aa  6 01030 2521 00	spri2	pr6|536
005035  aa  6 01032 2521 00	spri2	pr6|538
005036  aa  6 00756 6211 00	eax1 	pr6|494
005037  aa   054000 4310 07	fld  	22528,dl
005040  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
005041  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 620
	end;

005042  aa   000004 2360 07	ldq  	4,dl
005043  aa  6 00520 0561 00	asq  	pr6|336		j
005044  aa   777710 7100 04	tra  	-56,ic		004754
						STATEMENT 1 ON LINE 622
	call od_print_ (four, fmthrh);

005045  aa  6 00044 3701 20	epp4 	pr6|36,*
005046  ia  4 00232 3521 00	epp2 	pr4|154		four
005047  aa  6 00574 2521 00	spri2	pr6|380
005050  ia  4 00543 3521 00	epp2 	pr4|355		fmthrh
005051  aa  6 00576 2521 00	spri2	pr6|382
005052  aa   773052 3520 04	epp2 	-2518,ic		000124 = 404000000021
005053  aa  6 00600 2521 00	spri2	pr6|384
005054  aa   773006 3520 04	epp2 	-2554,ic		000062 = 524000000035
005055  aa  6 00602 2521 00	spri2	pr6|386
005056  aa  6 00572 6211 00	eax1 	pr6|378
005057  aa   010000 4310 07	fld  	4096,dl
005060  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
005061  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 623
	call od_print_ (two, "^/^-OU");

005062  aa   773054 2370 04	ldaq 	-2516,ic		000136 = 136057136055 117125000000
005063  aa  6 00604 7571 00	staq 	pr6|388
005064  aa  6 00044 3701 20	epp4 	pr6|36,*
005065  ia  4 00234 3521 00	epp2 	pr4|156		two
005066  aa  6 00574 2521 00	spri2	pr6|380
005067  aa  6 00604 3521 00	epp2 	pr6|388
005070  aa  6 00576 2521 00	spri2	pr6|382
005071  aa   773033 3520 04	epp2 	-2533,ic		000124 = 404000000021
005072  aa  6 00600 2521 00	spri2	pr6|384
005073  aa   772712 3520 04	epp2 	-2614,ic		000005 = 524000000006
005074  aa  6 00602 2521 00	spri2	pr6|386
005075  aa  6 00572 6211 00	eax1 	pr6|378
005076  aa   010000 4310 07	fld  	4096,dl
005077  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
005100  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 624
	do j = 0 by 4 while (j < 16);

005101  aa  6 00520 4501 00	stz  	pr6|336		j
005102  aa  6 00520 2361 00	ldq  	pr6|336		j
005103  aa   000020 1160 07	cmpq 	16,dl
005104  aa   000065 6050 04	tpl  	53,ic		005171
						STATEMENT 1 ON LINE 625
	     prt = addr (dumpptr -> dump.ouhist (j));

005105  aa   000001 7360 00	qls  	1
005106  aa  6 00560 3735 20	epp7 	pr6|368,*		dumpptr
005107  aa  7 02500 3735 06	epp7 	pr7|1344,ql	dump.ouhist
005110  aa  6 00502 6535 00	spri7	pr6|322		prt
						STATEMENT 1 ON LINE 626
	     call od_print_ (one, fmtmcm,
		2*j,
		prt -> sgl.zero, prt -> sgl.one, prt -> sgl.two, prt -> sgl.three,
		prt -> sgl.four, prt -> sgl.five, prt -> sgl.six, prt -> sgl.seven);

005111  aa  6 00520 2361 00	ldq  	pr6|336		j
005112  aa   000001 7360 00	qls  	1
005113  aa  6 00752 7561 00	stq  	pr6|490
005114  aa  6 00044 3701 20	epp4 	pr6|36,*
005115  ia  4 00235 3521 00	epp2 	pr4|157		one
005116  aa  6 00760 2521 00	spri2	pr6|496
005117  ia  4 00531 3521 00	epp2 	pr4|345		fmtmcm
005120  aa  6 00762 2521 00	spri2	pr6|498
005121  aa  6 00752 3521 00	epp2 	pr6|490
005122  aa  6 00764 2521 00	spri2	pr6|500
005123  aa  7 00000 3521 00	epp2 	pr7|0		sgl.zero
005124  aa  6 00766 2521 00	spri2	pr6|502
005125  aa  7 00001 3521 00	epp2 	pr7|1		sgl.one
005126  aa  6 00770 2521 00	spri2	pr6|504
005127  aa  7 00002 3521 00	epp2 	pr7|2		sgl.two
005130  aa  6 00772 2521 00	spri2	pr6|506
005131  aa  7 00003 3521 00	epp2 	pr7|3		sgl.three
005132  aa  6 00774 2521 00	spri2	pr6|508
005133  aa  7 00004 3521 00	epp2 	pr7|4		sgl.four
005134  aa  6 00776 2521 00	spri2	pr6|510
005135  aa  7 00005 3521 00	epp2 	pr7|5		sgl.five
005136  aa  6 01000 2521 00	spri2	pr6|512
005137  aa  7 00006 3521 00	epp2 	pr7|6		sgl.six
005140  aa  6 01002 2521 00	spri2	pr6|514
005141  aa  7 00007 3521 00	epp2 	pr7|7		sgl.seven
005142  aa  6 01004 2521 00	spri2	pr6|516
005143  aa   772761 3520 04	epp2 	-2575,ic		000124 = 404000000021
005144  aa  6 01006 2521 00	spri2	pr6|518
005145  aa   772642 3520 04	epp2 	-2654,ic		000007 = 524000000050
005146  aa  6 01010 2521 00	spri2	pr6|520
005147  aa   772637 3520 04	epp2 	-2657,ic		000006 = 404000000027
005150  aa  6 01012 2521 00	spri2	pr6|522
005151  aa   772752 3520 04	epp2 	-2582,ic		000123 = 404000000043
005152  aa  6 01014 2521 00	spri2	pr6|524
005153  aa  6 01016 2521 00	spri2	pr6|526
005154  aa  6 01020 2521 00	spri2	pr6|528
005155  aa  6 01022 2521 00	spri2	pr6|530
005156  aa  6 01024 2521 00	spri2	pr6|532
005157  aa  6 01026 2521 00	spri2	pr6|534
005160  aa  6 01030 2521 00	spri2	pr6|536
005161  aa  6 01032 2521 00	spri2	pr6|538
005162  aa  6 00756 6211 00	eax1 	pr6|494
005163  aa   054000 4310 07	fld  	22528,dl
005164  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
005165  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 630
	end;

005166  aa   000004 2360 07	ldq  	4,dl
005167  aa  6 00520 0561 00	asq  	pr6|336		j
005170  aa   777712 7100 04	tra  	-54,ic		005102
						STATEMENT 1 ON LINE 632
	call od_print_ (two, "^/^-CU");

005171  aa   772743 2370 04	ldaq 	-2589,ic		000134 = 136057136055 103125000000
005172  aa  6 00604 7571 00	staq 	pr6|388
005173  aa  6 00044 3701 20	epp4 	pr6|36,*
005174  ia  4 00234 3521 00	epp2 	pr4|156		two
005175  aa  6 00574 2521 00	spri2	pr6|380
005176  aa  6 00604 3521 00	epp2 	pr6|388
005177  aa  6 00576 2521 00	spri2	pr6|382
005200  aa   772724 3520 04	epp2 	-2604,ic		000124 = 404000000021
005201  aa  6 00600 2521 00	spri2	pr6|384
005202  aa   772603 3520 04	epp2 	-2685,ic		000005 = 524000000006
005203  aa  6 00602 2521 00	spri2	pr6|386
005204  aa  6 00572 6211 00	eax1 	pr6|378
005205  aa   010000 4310 07	fld  	4096,dl
005206  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
005207  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 633
	do j = 0 by 4 while (j < 16);

005210  aa  6 00520 4501 00	stz  	pr6|336		j
005211  aa   000000 0110 03	nop  	0,du
005212  aa  6 00520 2361 00	ldq  	pr6|336		j
005213  aa   000020 1160 07	cmpq 	16,dl
005214  aa   000065 6050 04	tpl  	53,ic		005301
						STATEMENT 1 ON LINE 634
	     prt = addr (dumpptr -> dump.cuhist (j));

005215  aa   000001 7360 00	qls  	1
005216  aa  6 00560 3735 20	epp7 	pr6|368,*		dumpptr
005217  aa  7 02700 3735 06	epp7 	pr7|1472,ql	dump.cuhist
005220  aa  6 00502 6535 00	spri7	pr6|322		prt
						STATEMENT 1 ON LINE 635
	     call od_print_ (one, fmtmcm,
		2*j,
		prt -> sgl.zero, prt -> sgl.one, prt -> sgl.two, prt -> sgl.three,
		prt -> sgl.four, prt -> sgl.five, prt -> sgl.six, prt -> sgl.seven);

005221  aa  6 00520 2361 00	ldq  	pr6|336		j
005222  aa   000001 7360 00	qls  	1
005223  aa  6 00752 7561 00	stq  	pr6|490
005224  aa  6 00044 3701 20	epp4 	pr6|36,*
005225  ia  4 00235 3521 00	epp2 	pr4|157		one
005226  aa  6 00760 2521 00	spri2	pr6|496
005227  ia  4 00531 3521 00	epp2 	pr4|345		fmtmcm
005230  aa  6 00762 2521 00	spri2	pr6|498
005231  aa  6 00752 3521 00	epp2 	pr6|490
005232  aa  6 00764 2521 00	spri2	pr6|500
005233  aa  7 00000 3521 00	epp2 	pr7|0		sgl.zero
005234  aa  6 00766 2521 00	spri2	pr6|502
005235  aa  7 00001 3521 00	epp2 	pr7|1		sgl.one
005236  aa  6 00770 2521 00	spri2	pr6|504
005237  aa  7 00002 3521 00	epp2 	pr7|2		sgl.two
005240  aa  6 00772 2521 00	spri2	pr6|506
005241  aa  7 00003 3521 00	epp2 	pr7|3		sgl.three
005242  aa  6 00774 2521 00	spri2	pr6|508
005243  aa  7 00004 3521 00	epp2 	pr7|4		sgl.four
005244  aa  6 00776 2521 00	spri2	pr6|510
005245  aa  7 00005 3521 00	epp2 	pr7|5		sgl.five
005246  aa  6 01000 2521 00	spri2	pr6|512
005247  aa  7 00006 3521 00	epp2 	pr7|6		sgl.six
005250  aa  6 01002 2521 00	spri2	pr6|514
005251  aa  7 00007 3521 00	epp2 	pr7|7		sgl.seven
005252  aa  6 01004 2521 00	spri2	pr6|516
005253  aa   772651 3520 04	epp2 	-2647,ic		000124 = 404000000021
005254  aa  6 01006 2521 00	spri2	pr6|518
005255  aa   772532 3520 04	epp2 	-2726,ic		000007 = 524000000050
005256  aa  6 01010 2521 00	spri2	pr6|520
005257  aa   772527 3520 04	epp2 	-2729,ic		000006 = 404000000027
005260  aa  6 01012 2521 00	spri2	pr6|522
005261  aa   772642 3520 04	epp2 	-2654,ic		000123 = 404000000043
005262  aa  6 01014 2521 00	spri2	pr6|524
005263  aa  6 01016 2521 00	spri2	pr6|526
005264  aa  6 01020 2521 00	spri2	pr6|528
005265  aa  6 01022 2521 00	spri2	pr6|530
005266  aa  6 01024 2521 00	spri2	pr6|532
005267  aa  6 01026 2521 00	spri2	pr6|534
005270  aa  6 01030 2521 00	spri2	pr6|536
005271  aa  6 01032 2521 00	spri2	pr6|538
005272  aa  6 00756 6211 00	eax1 	pr6|494
005273  aa   054000 4310 07	fld  	22528,dl
005274  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
005275  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 639
	end;

005276  aa   000004 2360 07	ldq  	4,dl
005277  aa  6 00520 0561 00	asq  	pr6|336		j
005300  aa   777712 7100 04	tra  	-54,ic		005212
						STATEMENT 1 ON LINE 641
	call od_print_ (two, "^/^-AU");

005301  aa   772631 2370 04	ldaq 	-2663,ic		000132 = 136057136055 101125000000
005302  aa  6 00604 7571 00	staq 	pr6|388
005303  aa  6 00044 3701 20	epp4 	pr6|36,*
005304  ia  4 00234 3521 00	epp2 	pr4|156		two
005305  aa  6 00574 2521 00	spri2	pr6|380
005306  aa  6 00604 3521 00	epp2 	pr6|388
005307  aa  6 00576 2521 00	spri2	pr6|382
005310  aa   772614 3520 04	epp2 	-2676,ic		000124 = 404000000021
005311  aa  6 00600 2521 00	spri2	pr6|384
005312  aa   772473 3520 04	epp2 	-2757,ic		000005 = 524000000006
005313  aa  6 00602 2521 00	spri2	pr6|386
005314  aa  6 00572 6211 00	eax1 	pr6|378
005315  aa   010000 4310 07	fld  	4096,dl
005316  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
005317  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 642
	do j = 0 by 4 while (j < 16);

005320  aa  6 00520 4501 00	stz  	pr6|336		j
005321  aa   000000 0110 03	nop  	0,du
005322  aa  6 00520 2361 00	ldq  	pr6|336		j
005323  aa   000020 1160 07	cmpq 	16,dl
005324  aa   000065 6050 04	tpl  	53,ic		005411
						STATEMENT 1 ON LINE 643
	     prt = addr (dumpptr -> dump.auhist (j));

005325  aa   000001 7360 00	qls  	1
005326  aa  6 00560 3735 20	epp7 	pr6|368,*		dumpptr
005327  aa  7 03300 3735 06	epp7 	pr7|1728,ql	dump.auhist
005330  aa  6 00502 6535 00	spri7	pr6|322		prt
						STATEMENT 1 ON LINE 644
	     call od_print_ (one, fmtmcm,
		2*j,
		prt -> sgl.zero, prt -> sgl.one, prt -> sgl.two, prt -> sgl.three,
		prt -> sgl.four, prt -> sgl.five, prt -> sgl.six, prt -> sgl.seven);

005331  aa  6 00520 2361 00	ldq  	pr6|336		j
005332  aa   000001 7360 00	qls  	1
005333  aa  6 00752 7561 00	stq  	pr6|490
005334  aa  6 00044 3701 20	epp4 	pr6|36,*
005335  ia  4 00235 3521 00	epp2 	pr4|157		one
005336  aa  6 00760 2521 00	spri2	pr6|496
005337  ia  4 00531 3521 00	epp2 	pr4|345		fmtmcm
005340  aa  6 00762 2521 00	spri2	pr6|498
005341  aa  6 00752 3521 00	epp2 	pr6|490
005342  aa  6 00764 2521 00	spri2	pr6|500
005343  aa  7 00000 3521 00	epp2 	pr7|0		sgl.zero
005344  aa  6 00766 2521 00	spri2	pr6|502
005345  aa  7 00001 3521 00	epp2 	pr7|1		sgl.one
005346  aa  6 00770 2521 00	spri2	pr6|504
005347  aa  7 00002 3521 00	epp2 	pr7|2		sgl.two
005350  aa  6 00772 2521 00	spri2	pr6|506
005351  aa  7 00003 3521 00	epp2 	pr7|3		sgl.three
005352  aa  6 00774 2521 00	spri2	pr6|508
005353  aa  7 00004 3521 00	epp2 	pr7|4		sgl.four
005354  aa  6 00776 2521 00	spri2	pr6|510
005355  aa  7 00005 3521 00	epp2 	pr7|5		sgl.five
005356  aa  6 01000 2521 00	spri2	pr6|512
005357  aa  7 00006 3521 00	epp2 	pr7|6		sgl.six
005360  aa  6 01002 2521 00	spri2	pr6|514
005361  aa  7 00007 3521 00	epp2 	pr7|7		sgl.seven
005362  aa  6 01004 2521 00	spri2	pr6|516
005363  aa   772541 3520 04	epp2 	-2719,ic		000124 = 404000000021
005364  aa  6 01006 2521 00	spri2	pr6|518
005365  aa   772422 3520 04	epp2 	-2798,ic		000007 = 524000000050
005366  aa  6 01010 2521 00	spri2	pr6|520
005367  aa   772417 3520 04	epp2 	-2801,ic		000006 = 404000000027
005370  aa  6 01012 2521 00	spri2	pr6|522
005371  aa   772532 3520 04	epp2 	-2726,ic		000123 = 404000000043
005372  aa  6 01014 2521 00	spri2	pr6|524
005373  aa  6 01016 2521 00	spri2	pr6|526
005374  aa  6 01020 2521 00	spri2	pr6|528
005375  aa  6 01022 2521 00	spri2	pr6|530
005376  aa  6 01024 2521 00	spri2	pr6|532
005377  aa  6 01026 2521 00	spri2	pr6|534
005400  aa  6 01030 2521 00	spri2	pr6|536
005401  aa  6 01032 2521 00	spri2	pr6|538
005402  aa  6 00756 6211 00	eax1 	pr6|494
005403  aa   054000 4310 07	fld  	22528,dl
005404  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
005405  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 648
	end;

005406  aa   000004 2360 07	ldq  	4,dl
005407  aa  6 00520 0561 00	asq  	pr6|336		j
005410  aa   777712 7100 04	tra  	-54,ic		005322
						STATEMENT 1 ON LINE 650
	call od_print_ (two, "^/^-DU");

005411  aa   772517 2370 04	ldaq 	-2737,ic		000130 = 136057136055 104125000000
005412  aa  6 00604 7571 00	staq 	pr6|388
005413  aa  6 00044 3701 20	epp4 	pr6|36,*
005414  ia  4 00234 3521 00	epp2 	pr4|156		two
005415  aa  6 00574 2521 00	spri2	pr6|380
005416  aa  6 00604 3521 00	epp2 	pr6|388
005417  aa  6 00576 2521 00	spri2	pr6|382
005420  aa   772504 3520 04	epp2 	-2748,ic		000124 = 404000000021
005421  aa  6 00600 2521 00	spri2	pr6|384
005422  aa   772363 3520 04	epp2 	-2829,ic		000005 = 524000000006
005423  aa  6 00602 2521 00	spri2	pr6|386
005424  aa  6 00572 6211 00	eax1 	pr6|378
005425  aa   010000 4310 07	fld  	4096,dl
005426  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
005427  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 651
	do j = 0 by 4 while (j < 16);

005430  aa  6 00520 4501 00	stz  	pr6|336		j
005431  aa   000000 0110 03	nop  	0,du
005432  aa  6 00520 2361 00	ldq  	pr6|336		j
005433  aa   000020 1160 07	cmpq 	16,dl
005434  aa   000065 6050 04	tpl  	53,ic		005521
						STATEMENT 1 ON LINE 652
	     prt = addr (dumpptr -> dump.duhist (j));

005435  aa   000001 7360 00	qls  	1
005436  aa  6 00560 3735 20	epp7 	pr6|368,*		dumpptr
005437  aa  7 03100 3735 06	epp7 	pr7|1600,ql	dump.duhist
005440  aa  6 00502 6535 00	spri7	pr6|322		prt
						STATEMENT 1 ON LINE 653
	     call od_print_ (one, fmtmcm,
		2*j,
		prt -> sgl.zero, prt -> sgl.one, prt -> sgl.two, prt -> sgl.three,
		prt -> sgl.four, prt -> sgl.five, prt -> sgl.six, prt -> sgl.seven);

005441  aa  6 00520 2361 00	ldq  	pr6|336		j
005442  aa   000001 7360 00	qls  	1
005443  aa  6 00752 7561 00	stq  	pr6|490
005444  aa  6 00044 3701 20	epp4 	pr6|36,*
005445  ia  4 00235 3521 00	epp2 	pr4|157		one
005446  aa  6 00760 2521 00	spri2	pr6|496
005447  ia  4 00531 3521 00	epp2 	pr4|345		fmtmcm
005450  aa  6 00762 2521 00	spri2	pr6|498
005451  aa  6 00752 3521 00	epp2 	pr6|490
005452  aa  6 00764 2521 00	spri2	pr6|500
005453  aa  7 00000 3521 00	epp2 	pr7|0		sgl.zero
005454  aa  6 00766 2521 00	spri2	pr6|502
005455  aa  7 00001 3521 00	epp2 	pr7|1		sgl.one
005456  aa  6 00770 2521 00	spri2	pr6|504
005457  aa  7 00002 3521 00	epp2 	pr7|2		sgl.two
005460  aa  6 00772 2521 00	spri2	pr6|506
005461  aa  7 00003 3521 00	epp2 	pr7|3		sgl.three
005462  aa  6 00774 2521 00	spri2	pr6|508
005463  aa  7 00004 3521 00	epp2 	pr7|4		sgl.four
005464  aa  6 00776 2521 00	spri2	pr6|510
005465  aa  7 00005 3521 00	epp2 	pr7|5		sgl.five
005466  aa  6 01000 2521 00	spri2	pr6|512
005467  aa  7 00006 3521 00	epp2 	pr7|6		sgl.six
005470  aa  6 01002 2521 00	spri2	pr6|514
005471  aa  7 00007 3521 00	epp2 	pr7|7		sgl.seven
005472  aa  6 01004 2521 00	spri2	pr6|516
005473  aa   772431 3520 04	epp2 	-2791,ic		000124 = 404000000021
005474  aa  6 01006 2521 00	spri2	pr6|518
005475  aa   772312 3520 04	epp2 	-2870,ic		000007 = 524000000050
005476  aa  6 01010 2521 00	spri2	pr6|520
005477  aa   772307 3520 04	epp2 	-2873,ic		000006 = 404000000027
005500  aa  6 01012 2521 00	spri2	pr6|522
005501  aa   772422 3520 04	epp2 	-2798,ic		000123 = 404000000043
005502  aa  6 01014 2521 00	spri2	pr6|524
005503  aa  6 01016 2521 00	spri2	pr6|526
005504  aa  6 01020 2521 00	spri2	pr6|528
005505  aa  6 01022 2521 00	spri2	pr6|530
005506  aa  6 01024 2521 00	spri2	pr6|532
005507  aa  6 01026 2521 00	spri2	pr6|534
005510  aa  6 01030 2521 00	spri2	pr6|536
005511  aa  6 01032 2521 00	spri2	pr6|538
005512  aa  6 00756 6211 00	eax1 	pr6|494
005513  aa   054000 4310 07	fld  	22528,dl
005514  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
005515  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 657
	end;

005516  aa   000004 2360 07	ldq  	4,dl
005517  aa  6 00520 0561 00	asq  	pr6|336		j
005520  aa   777712 7100 04	tra  	-54,ic		005432
						STATEMENT 1 ON LINE 661
skip_regs:
	nsegs = dumpptr -> dump.num_segs;

005521  aa  6 00560 3735 20	epp7 	pr6|368,*		dumpptr
005522  aa  7 00005 2361 00	ldq  	pr7|5		dump.num_segs
005523  aa  6 00532 7561 00	stq  	pr6|346		nsegs
						STATEMENT 1 ON LINE 663
	cur_proc_no = 0;

005524  aa  6 00173 4501 00	stz  	pr6|123		cur_proc_no
						STATEMENT 1 ON LINE 664
	do i = 1 to nsegs;

005525  aa  6 00566 7561 00	stq  	pr6|374
005526  aa   000001 2360 07	ldq  	1,dl
005527  aa  6 00517 7561 00	stq  	pr6|335		i
005530  aa  6 00517 2361 00	ldq  	pr6|335		i
005531  aa  6 00566 1161 00	cmpq 	pr6|374
005532  aa   001431 6054 04	tpnz 	793,ic		007163
						STATEMENT 1 ON LINE 665
	     cur_seg_no = bin (dumpptr -> dump.segs (i).segno, 18);

005533  aa  6 00560 3735 20	epp7 	pr6|368,*		dumpptr
005534  aa  7 00017 2351 06	lda  	pr7|15,ql		dump.segno
005535  aa   000066 7730 00	lrl  	54
005536  aa  6 00527 7561 00	stq  	pr6|343		cur_seg_no
						STATEMENT 1 ON LINE 666
	     if i > 1 then cur_orig = bin (dumpptr -> dump.segs (i-1).length, 18) * 64 + cur_orig ;

005537  aa  6 00517 2361 00	ldq  	pr6|335		i
005540  aa   000001 1160 07	cmpq 	1,dl
005541  aa   000012 6044 04	tmoz 	10,ic		005553
005542  aa   000001 1760 07	sbq  	1,dl
005543  aa  7 00017 2361 06	ldq  	pr7|15,ql		dump.length
005544  aa  0 00374 3771 00	anaq 	pr0|252		= 000000000000 000000777777
005545  aa   000006 7360 00	qls  	6
005546  aa   000044 7770 00	llr  	36
005547  aa   000044 7330 00	lrs  	36
005550  aa  6 00525 0331 00	adl  	pr6|341		cur_orig
005551  aa  6 00525 7561 00	stq  	pr6|341		cur_orig
005552  aa   000003 7100 04	tra  	3,ic		005555
						STATEMENT 1 ON LINE 667
	     else cur_orig = size (dump);

005553  aa   004000 2360 07	ldq  	2048,dl
005554  aa  6 00525 7561 00	stq  	pr6|341		cur_orig
						STATEMENT 1 ON LINE 668
	     given_length = bin (dumpptr -> dump.segs (i).length, 18) * 64;

005555  aa  6 00517 7271 00	lxl7 	pr6|335		i
005556  aa  7 00017 2361 17	ldq  	pr7|15,7		dump.length
005557  aa  0 00374 3771 00	anaq 	pr0|252		= 000000000000 000000777777
005560  aa   000006 7360 00	qls  	6
005561  aa  6 00530 7561 00	stq  	pr6|344		given_length
						STATEMENT 1 ON LINE 669
	     call od_print_$op_new_seg (cur_seg_no);

005562  aa  6 00527 3521 00	epp2 	pr6|343		cur_seg_no
005563  aa  6 00574 2521 00	spri2	pr6|380
005564  aa  6 00572 6211 00	eax1 	pr6|378
005565  aa   004000 4310 07	fld  	2048,dl
005566  aa  6 00044 3701 20	epp4 	pr6|36,*
005567  la  4 00700 3521 20	epp2 	pr4|448,*		od_print_$op_new_seg
005570  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 670
	     if cur_seg_no = ds_seg_no then cur_proc_no = cur_proc_no + 1;

005571  aa  6 00527 2361 00	ldq  	pr6|343		cur_seg_no
005572  aa   000002 6010 04	tnz  	2,ic		005574
005573  aa  6 00173 0541 00	aos  	pr6|123		cur_proc_no
						STATEMENT 1 ON LINE 671
	     if cur_seg_no = rt_seg_no then if cur_proc_no = rt_proc_no then restartsw = "0"b;

005574  aa  6 00171 1161 00	cmpq 	pr6|121		rt_seg_no
005575  aa   000005 6010 04	tnz  	5,ic		005602
005576  aa  6 00173 2361 00	ldq  	pr6|123		cur_proc_no
005577  aa  6 00172 1161 00	cmpq 	pr6|122		rt_proc_no
005600  aa   000002 6010 04	tnz  	2,ic		005602
005601  aa  6 00170 4501 00	stz  	pr6|120		restartsw
						STATEMENT 1 ON LINE 672
	     if restartsw then if cur_seg_no ^= ds_seg_no then go to next_seg;

005602  aa  6 00170 2351 00	lda  	pr6|120		restartsw
005603  aa   000003 6000 04	tze  	3,ic		005606
005604  aa  6 00527 2361 00	ldq  	pr6|343		cur_seg_no
005605  aa   001354 6010 04	tnz  	748,ic		007161
						STATEMENT 1 ON LINE 673
	     if cur_seg_no = ds_seg_no & (^restartsw | cur_proc_no = rt_proc_no) /* Is it a new descriptor seg */
	     then do;

005606  aa  6 00527 2361 00	ldq  	pr6|343		cur_seg_no
005607  aa   000310 6010 04	tnz  	200,ic		006117
005610  aa   400000 3150 03	cana 	131072,du
005611  aa   000004 6000 04	tze  	4,ic		005615
005612  aa  6 00173 2361 00	ldq  	pr6|123		cur_proc_no
005613  aa  6 00172 1161 00	cmpq 	pr6|122		rt_proc_no
005614  aa   000303 6010 04	tnz  	195,ic		006117
						STATEMENT 1 ON LINE 675
		cur_proc_index = i;

005615  aa  6 00517 2361 00	ldq  	pr6|335		i
005616  aa  6 00526 7561 00	stq  	pr6|342		cur_proc_index
						STATEMENT 1 ON LINE 676
		prdsp, pdsp = null;

005617  aa   772361 3734 24	epp7 	-2831,ic*
005620  aa  6 00154 6535 00	spri7	pr6|108		prdsp
005621  aa  6 00152 6535 00	spri7	pr6|106		pdsp
						STATEMENT 1 ON LINE 677
		if sltp ^= null then if namp ^= null	/* If we know where KST, PDS,PRDS are, copy them */
		     then do;

005622  aa  6 00550 2371 00	ldaq 	pr6|360		sltp
005623  aa   772355 6770 04	eraq 	-2835,ic		000200 = 077777000043 000001000000
005624  aa  0 00460 3771 00	anaq 	pr0|304		= 077777000077 777777077077
005625  aa   000061 6000 04	tze  	49,ic		005706
005626  aa  6 00146 2371 00	ldaq 	pr6|102		namp
005627  aa   772351 6770 04	eraq 	-2839,ic		000200 = 077777000043 000001000000
005630  aa  0 00460 3771 00	anaq 	pr0|304		= 077777000077 777777077077
005631  aa   000055 6000 04	tze  	45,ic		005706
						STATEMENT 1 ON LINE 679
			call copy_dump_seg_ (pds_seg_no, cur_proc_index, ptr_array, len_array, pds_seg, pdslen);

005632  aa  6 00132 3521 00	epp2 	pr6|90		pds_seg_no
005633  aa  6 00610 2521 00	spri2	pr6|392
005634  aa  6 00526 3521 00	epp2 	pr6|342		cur_proc_index
005635  aa  6 00612 2521 00	spri2	pr6|394
005636  aa  6 00314 3521 00	epp2 	pr6|204		ptr_array
005637  aa  6 00614 2521 00	spri2	pr6|396
005640  aa  6 00414 3521 00	epp2 	pr6|268		len_array
005641  aa  6 00616 2521 00	spri2	pr6|398
005642  aa  6 00044 3701 20	epp4 	pr6|36,*
005643  ia  4 00220 3521 00	epp2 	pr4|144		pds_seg
005644  aa  6 00620 2521 00	spri2	pr6|400
005645  aa  6 00142 3521 00	epp2 	pr6|98		pdslen
005646  aa  6 00622 2521 00	spri2	pr6|402
005647  aa  6 00606 6211 00	eax1 	pr6|390
005650  aa   030000 4310 07	fld  	12288,dl
005651  la  4 00706 3521 20	epp2 	pr4|454,*		copy_dump_seg_
005652  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 680
			if pdslen ^= 0 then pdsp = pds_seg;

005653  aa  6 00142 2361 00	ldq  	pr6|98		pdslen
005654  aa   000004 6000 04	tze  	4,ic		005660
005655  aa  6 00044 3701 20	epp4 	pr6|36,*
005656  ia  4 00220 3735 20	epp7 	pr4|144,*		pds_seg
005657  aa  6 00152 6535 00	spri7	pr6|106		pdsp
						STATEMENT 1 ON LINE 681
			call copy_dump_seg_ (prds_seg_no, cur_proc_index, ptr_array, len_array, prds_seg, prdslen);

005660  aa  6 00133 3521 00	epp2 	pr6|91		prds_seg_no
005661  aa  6 00610 2521 00	spri2	pr6|392
005662  aa  6 00526 3521 00	epp2 	pr6|342		cur_proc_index
005663  aa  6 00612 2521 00	spri2	pr6|394
005664  aa  6 00314 3521 00	epp2 	pr6|204		ptr_array
005665  aa  6 00614 2521 00	spri2	pr6|396
005666  aa  6 00414 3521 00	epp2 	pr6|268		len_array
005667  aa  6 00616 2521 00	spri2	pr6|398
005670  aa  6 00044 3701 20	epp4 	pr6|36,*
005671  ia  4 00222 3521 00	epp2 	pr4|146		prds_seg
005672  aa  6 00620 2521 00	spri2	pr6|400
005673  aa  6 00143 3521 00	epp2 	pr6|99		prdslen
005674  aa  6 00622 2521 00	spri2	pr6|402
005675  aa  6 00606 6211 00	eax1 	pr6|390
005676  aa   030000 4310 07	fld  	12288,dl
005677  la  4 00706 3521 20	epp2 	pr4|454,*		copy_dump_seg_
005700  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 682
			if prdslen ^= 0 then prdsp = prds_seg;

005701  aa  6 00143 2361 00	ldq  	pr6|99		prdslen
005702  aa   000004 6000 04	tze  	4,ic		005706
005703  aa  6 00044 3701 20	epp4 	pr6|36,*
005704  ia  4 00222 3735 20	epp7 	pr4|146,*		prds_seg
005705  aa  6 00154 6535 00	spri7	pr6|108		prdsp
						STATEMENT 1 ON LINE 683
		     end;

						STATEMENT 1 ON LINE 684
		call copy_dump_seg_ (cur_seg_no, cur_proc_index, ptr_array, len_array, ds_seg, dslen);

005706  aa  6 00527 3521 00	epp2 	pr6|343		cur_seg_no
005707  aa  6 00610 2521 00	spri2	pr6|392
005710  aa  6 00526 3521 00	epp2 	pr6|342		cur_proc_index
005711  aa  6 00612 2521 00	spri2	pr6|394
005712  aa  6 00314 3521 00	epp2 	pr6|204		ptr_array
005713  aa  6 00614 2521 00	spri2	pr6|396
005714  aa  6 00414 3521 00	epp2 	pr6|268		len_array
005715  aa  6 00616 2521 00	spri2	pr6|398
005716  aa  6 00044 3701 20	epp4 	pr6|36,*
005717  ia  4 00216 3521 00	epp2 	pr4|142		ds_seg
005720  aa  6 00620 2521 00	spri2	pr6|400
005721  aa  6 00135 3521 00	epp2 	pr6|93		dslen
005722  aa  6 00622 2521 00	spri2	pr6|402
005723  aa  6 00606 6211 00	eax1 	pr6|390
005724  aa   030000 4310 07	fld  	12288,dl
005725  la  4 00706 3521 20	epp2 	pr4|454,*		copy_dump_seg_
005726  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 686
		if dslen = 0
		then dsp, sdwp = null;

005727  aa  6 00135 2361 00	ldq  	pr6|93		dslen
005730  aa   000005 6010 04	tnz  	5,ic		005735
005731  aa   772247 3734 24	epp7 	-2905,ic*
005732  aa  6 00150 6535 00	spri7	pr6|104		dsp
005733  aa  6 00556 6535 00	spri7	pr6|366		sdwp
005734  aa   000156 7100 04	tra  	110,ic		006112
						STATEMENT 1 ON LINE 688
		else do;

						STATEMENT 1 ON LINE 689
		     dsp = ds_seg;

005735  aa  6 00044 3701 20	epp4 	pr6|36,*
005736  ia  4 00216 3735 20	epp7 	pr4|142,*		ds_seg
005737  aa  6 00150 6535 00	spri7	pr6|104		dsp
						STATEMENT 1 ON LINE 690
		     if (restartsw | (segselsw & ^wants_seg (ds_seg_no))) then go to next_seg;

005740  aa  6 00170 2351 00	lda  	pr6|120		restartsw
005741  aa   001220 6010 04	tnz  	656,ic		007161
005742  aa  6 00177 2351 00	lda  	pr6|127		segselsw
005743  aa   000006 6000 04	tze  	6,ic		005751
005744  aa   000000 7270 07	lxl7 	0,dl
005745  aa  000 000 066 517	cmpb 	(pr,x7),(),fill(0)
005746  aa  6 00201 00 0001	descb	pr6|129,1		wants_seg
005747  aa   000000 00 0000	descb	0,0
005750  aa   001211 6000 04	tze  	649,ic		007161
						STATEMENT 1 ON LINE 691
		     else do;

						STATEMENT 1 ON LINE 692
			eq_print = 0;

005751  aa  6 00524 4501 00	stz  	pr6|340		eq_print
						STATEMENT 1 ON LINE 693
			call od_print_ (four, "^/^/^4-DESCRIPTOR SEGMENT^/");

005752  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
005753  aa   772324 00 0034	desc9a	-2860,28		000276 = 136057136057
005754  aa  6 00572 00 0034	desc9a	pr6|378,28
005755  ia  4 00232 3521 00	epp2 	pr4|154		four
005756  aa  6 00610 2521 00	spri2	pr6|392
005757  aa  6 00572 3521 00	epp2 	pr6|378
005760  aa  6 00612 2521 00	spri2	pr6|394
005761  aa   772143 3520 04	epp2 	-2973,ic		000124 = 404000000021
005762  aa  6 00614 2521 00	spri2	pr6|396
005763  aa   772102 3520 04	epp2 	-3006,ic		000065 = 524000000033
005764  aa  6 00616 2521 00	spri2	pr6|398
005765  aa  6 00606 6211 00	eax1 	pr6|390
005766  aa   010000 4310 07	fld  	4096,dl
005767  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
005770  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 694
			call od_print_ (two, fmtdesc);

005771  aa  6 00044 3701 20	epp4 	pr6|36,*
005772  ia  4 00234 3521 00	epp2 	pr4|156		two
005773  aa  6 00574 2521 00	spri2	pr6|380
005774  ia  4 00565 3521 00	epp2 	pr4|373		fmtdesc
005775  aa  6 00576 2521 00	spri2	pr6|382
005776  aa   772126 3520 04	epp2 	-2986,ic		000124 = 404000000021
005777  aa  6 00600 2521 00	spri2	pr6|384
006000  aa   772004 3520 04	epp2 	-3068,ic		000004 = 524000000102
006001  aa  6 00602 2521 00	spri2	pr6|386
006002  aa  6 00572 6211 00	eax1 	pr6|378
006003  aa   010000 4310 07	fld  	4096,dl
006004  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
006005  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 695
			half_gl = divide (given_length, 2, 17, 0);

006006  aa  6 00530 2361 00	ldq  	pr6|344		given_length
006007  aa   000002 5060 07	div  	2,dl
006010  aa  6 00531 7561 00	stq  	pr6|345		half_gl
						STATEMENT 1 ON LINE 696
			do j = 0 by 1 while (j ^= half_gl);

006011  aa  6 00520 4501 00	stz  	pr6|336		j
006012  aa  6 00520 2361 00	ldq  	pr6|336		j
006013  aa  6 00531 1161 00	cmpq 	pr6|345		half_gl
006014  aa   000076 6000 04	tze  	62,ic		006112
						STATEMENT 1 ON LINE 697
			     if dsp -> dbl_array (j) = 0 /* Don't print null SDW */
			     then eq_print = eq_print + 1;

006015  aa   000001 7360 00	qls  	1
006016  aa  6 00752 7561 00	stq  	pr6|490
006017  aa  6 00150 2371 66	ldaq 	pr6|104,*ql	dbl_array
006020  aa   000003 6010 04	tnz  	3,ic		006023
006021  aa  6 00524 0541 00	aos  	pr6|340		eq_print
006022  aa   000066 7100 04	tra  	54,ic		006110
						STATEMENT 1 ON LINE 699
			     else do;

						STATEMENT 1 ON LINE 700
				if eq_print ^= 0
				then call od_print_ (one, c0);

006023  aa  6 00524 2361 00	ldq  	pr6|340		eq_print
006024  aa   000016 6000 04	tze  	14,ic		006042
006025  aa  6 00044 3701 20	epp4 	pr6|36,*
006026  ia  4 00235 3521 00	epp2 	pr4|157		one
006027  aa  6 00574 2521 00	spri2	pr6|380
006030  aa  6 00517 3521 00	epp2 	pr6|335		c0
006031  aa  6 00576 2521 00	spri2	pr6|382
006032  aa   772072 3520 04	epp2 	-3014,ic		000124 = 404000000021
006033  aa  6 00600 2521 00	spri2	pr6|384
006034  aa   772045 3520 04	epp2 	-3035,ic		000101 = 524000000000
006035  aa  6 00602 2521 00	spri2	pr6|386
006036  aa  6 00572 6211 00	eax1 	pr6|378
006037  aa   010000 4310 07	fld  	4096,dl
006040  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
006041  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 702
				if sltp = null then go to CALL_PDSN_1;

006042  aa  6 00550 2371 00	ldaq 	pr6|360		sltp
006043  aa   772135 6770 04	eraq 	-2979,ic		000200 = 077777000043 000001000000
006044  aa  0 00460 3771 00	anaq 	pr0|304		= 077777000077 777777077077
006045  aa   000024 6000 04	tze  	20,ic		006071
						STATEMENT 1 ON LINE 703
				if sltp -> slt.last_sup_seg >= j then do;

006046  aa  6 00550 3735 20	epp7 	pr6|360,*		sltp
006047  aa  7 00004 2361 00	ldq  	pr7|4		slt.last_sup_seg
006050  aa  6 00520 1161 00	cmpq 	pr6|336		j
006051  aa   000020 6040 04	tmi  	16,ic		006071
						STATEMENT 1 ON LINE 704
				     call print_dump_seg_name_$hard (j, dsp -> dbl_array (j), sltp, namp);

006052  aa  6 00520 3521 00	epp2 	pr6|336		j
006053  aa  6 00574 2521 00	spri2	pr6|380
006054  aa  6 00752 7271 00	lxl7 	pr6|490
006055  aa  6 00150 3521 77	epp2 	pr6|104,*7	dbl_array
006056  aa  6 00576 2521 00	spri2	pr6|382
006057  aa  6 00550 3521 00	epp2 	pr6|360		sltp
006060  aa  6 00600 2521 00	spri2	pr6|384
006061  aa  6 00146 3521 00	epp2 	pr6|102		namp
006062  aa  6 00602 2521 00	spri2	pr6|386
006063  aa  6 00572 6211 00	eax1 	pr6|378
006064  aa   020000 4310 07	fld  	8192,dl
006065  aa  6 00044 3701 20	epp4 	pr6|36,*
006066  la  4 00712 3521 20	epp2 	pr4|458,*		print_dump_seg_name_$hard
006067  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 705
				end;

006070  aa   000017 7100 04	tra  	15,ic		006107
						STATEMENT 1 ON LINE 706
				else do;

						STATEMENT 1 ON LINE 707
CALL_PDSN_1:			     call print_dump_seg_name_ (j, dsp -> dbl_array (j), sstp, sstnp);

006071  aa  6 00520 3521 00	epp2 	pr6|336		j
006072  aa  6 00574 2521 00	spri2	pr6|380
006073  aa  6 00752 7271 00	lxl7 	pr6|490
006074  aa  6 00150 3521 77	epp2 	pr6|104,*7	dbl_array
006075  aa  6 00576 2521 00	spri2	pr6|382
006076  aa  6 00562 3521 00	epp2 	pr6|370		sstp
006077  aa  6 00600 2521 00	spri2	pr6|384
006100  aa  6 00552 3521 00	epp2 	pr6|362		sstnp
006101  aa  6 00602 2521 00	spri2	pr6|386
006102  aa  6 00572 6211 00	eax1 	pr6|378
006103  aa   020000 4310 07	fld  	8192,dl
006104  aa  6 00044 3701 20	epp4 	pr6|36,*
006105  la  4 00710 3521 20	epp2 	pr4|456,*		print_dump_seg_name_
006106  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 708
				end;

						STATEMENT 1 ON LINE 709
				eq_print = 0;

006107  aa  6 00524 4501 00	stz  	pr6|340		eq_print
						STATEMENT 1 ON LINE 710
			     end;

						STATEMENT 1 ON LINE 711
			end;

006110  aa  6 00520 0541 00	aos  	pr6|336		j
006111  aa   777701 7100 04	tra  	-63,ic		006012
						STATEMENT 1 ON LINE 712
		     end;

						STATEMENT 1 ON LINE 713
		end;

						STATEMENT 1 ON LINE 714
		call od_print_$op_new_page;

006112  aa  6 00056 6211 00	eax1 	pr6|46
006113  aa   000000 4310 07	fld  	0,dl
006114  aa  6 00044 3701 20	epp4 	pr6|36,*
006115  la  4 00672 3521 20	epp2 	pr4|442,*		od_print_$op_new_page
006116  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 715
	     end;

						STATEMENT 1 ON LINE 717
	     if segselsw then if ^wants_seg (cur_seg_no) then go to next_seg;

006117  aa  6 00177 2351 00	lda  	pr6|127		segselsw
006120  aa   000006 6000 04	tze  	6,ic		006126
006121  aa  6 00527 7271 00	lxl7 	pr6|343		cur_seg_no
006122  aa  000 000 066 517	cmpb 	(pr,x7),(),fill(0)
006123  aa  6 00201 00 0001	descb	pr6|129,1		wants_seg
006124  aa   000000 00 0000	descb	0,0
006125  aa   001034 6000 04	tze  	540,ic		007161
						STATEMENT 1 ON LINE 718
	     abs_loc = -wps;

006126  aa  6 00044 3701 20	epp4 	pr6|36,*
006127  ia  4 00237 3361 00	lcq  	pr4|159		wps
006130  aa  6 00511 7561 00	stq  	pr6|329		abs_loc
						STATEMENT 1 ON LINE 719
	     jbdry = -1;

006131  aa   000001 3360 07	lcq  	1,dl
006132  aa  6 00512 7561 00	stq  	pr6|330		jbdry
						STATEMENT 1 ON LINE 720
	     if dsp ^= null
	     then do;

006133  aa  6 00150 2371 00	ldaq 	pr6|104		dsp
006134  aa   772044 6770 04	eraq 	-3036,ic		000200 = 077777000043 000001000000
006135  aa  0 00460 3771 00	anaq 	pr0|304		= 077777000077 777777077077
006136  aa   000372 6000 04	tze  	250,ic		006530
						STATEMENT 1 ON LINE 722
		sdwp = addr (dsp -> dbl_array (cur_seg_no));

006137  aa  6 00527 2361 00	ldq  	pr6|343		cur_seg_no
006140  aa   000001 7360 00	qls  	1
006141  aa  6 00150 3735 66	epp7 	pr6|104,*ql	dbl_array
006142  aa  6 00556 6535 00	spri7	pr6|366		sdwp
						STATEMENT 1 ON LINE 723
		call od_print_ (two, fmtdesc);

006143  ia  4 00234 3521 00	epp2 	pr4|156		two
006144  aa  6 00574 2521 00	spri2	pr6|380
006145  ia  4 00565 3521 00	epp2 	pr4|373		fmtdesc
006146  aa  6 00576 2521 00	spri2	pr6|382
006147  aa   771755 3520 04	epp2 	-3091,ic		000124 = 404000000021
006150  aa  6 00600 2521 00	spri2	pr6|384
006151  aa   771633 3520 04	epp2 	-3173,ic		000004 = 524000000102
006152  aa  6 00602 2521 00	spri2	pr6|386
006153  aa  6 00752 7561 00	stq  	pr6|490
006154  aa  6 00572 6211 00	eax1 	pr6|378
006155  aa   010000 4310 07	fld  	4096,dl
006156  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
006157  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 724
		if sltp = null then go to CALL_PDSN_2;

006160  aa  6 00550 2371 00	ldaq 	pr6|360		sltp
006161  aa   772017 6770 04	eraq 	-3057,ic		000200 = 077777000043 000001000000
006162  aa  0 00460 3771 00	anaq 	pr0|304		= 077777000077 777777077077
006163  aa   000024 6000 04	tze  	20,ic		006207
						STATEMENT 1 ON LINE 725
		if sltp -> slt.last_sup_seg >= cur_seg_no
		then call print_dump_seg_name_$hard (cur_seg_no, dsp -> dbl_array (cur_seg_no), sltp, namp);

006164  aa  6 00550 3735 20	epp7 	pr6|360,*		sltp
006165  aa  7 00004 2361 00	ldq  	pr7|4		slt.last_sup_seg
006166  aa  6 00527 1161 00	cmpq 	pr6|343		cur_seg_no
006167  aa   000020 6040 04	tmi  	16,ic		006207
006170  aa  6 00527 3521 00	epp2 	pr6|343		cur_seg_no
006171  aa  6 00574 2521 00	spri2	pr6|380
006172  aa  6 00752 7271 00	lxl7 	pr6|490
006173  aa  6 00150 3521 77	epp2 	pr6|104,*7	dbl_array
006174  aa  6 00576 2521 00	spri2	pr6|382
006175  aa  6 00550 3521 00	epp2 	pr6|360		sltp
006176  aa  6 00600 2521 00	spri2	pr6|384
006177  aa  6 00146 3521 00	epp2 	pr6|102		namp
006200  aa  6 00602 2521 00	spri2	pr6|386
006201  aa  6 00572 6211 00	eax1 	pr6|378
006202  aa   020000 4310 07	fld  	8192,dl
006203  aa  6 00044 3701 20	epp4 	pr6|36,*
006204  la  4 00712 3521 20	epp2 	pr4|458,*		print_dump_seg_name_$hard
006205  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
006206  aa   000017 7100 04	tra  	15,ic		006225
						STATEMENT 1 ON LINE 727
		else do;

						STATEMENT 1 ON LINE 728
CALL_PDSN_2:	     call print_dump_seg_name_ (cur_seg_no, dsp -> dbl_array (cur_seg_no), sstp, sstnp);

006207  aa  6 00527 3521 00	epp2 	pr6|343		cur_seg_no
006210  aa  6 00574 2521 00	spri2	pr6|380
006211  aa  6 00752 7271 00	lxl7 	pr6|490
006212  aa  6 00150 3521 77	epp2 	pr6|104,*7	dbl_array
006213  aa  6 00576 2521 00	spri2	pr6|382
006214  aa  6 00562 3521 00	epp2 	pr6|370		sstp
006215  aa  6 00600 2521 00	spri2	pr6|384
006216  aa  6 00552 3521 00	epp2 	pr6|362		sstnp
006217  aa  6 00602 2521 00	spri2	pr6|386
006220  aa  6 00572 6211 00	eax1 	pr6|378
006221  aa   020000 4310 07	fld  	8192,dl
006222  aa  6 00044 3701 20	epp4 	pr6|36,*
006223  la  4 00710 3521 20	epp2 	pr4|456,*		print_dump_seg_name_
006224  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 729
		end;

						STATEMENT 1 ON LINE 730
		if sdwp -> sdw.add
		then if sdwp -> sdw.unpaged = "0"b
		     then do;

006225  aa  6 00556 2351 20	lda  	pr6|366,*		sdw.add
006226  aa  0 00060 3771 00	anaq 	pr0|48		= 777777770000 000000000000
006227  aa   000264 6000 04	tze  	180,ic		006513
006230  aa  6 00556 3735 20	epp7 	pr6|366,*		sdwp
006231  aa  6 00752 7551 00	sta  	pr6|490		sdw.add
006232  aa  7 00001 2351 00	lda  	pr7|1		sdw.unpaged
006233  aa   200000 3150 07	cana 	65536,dl
006234  aa   000254 6010 04	tnz  	172,ic		006510
						STATEMENT 1 ON LINE 733
			if sstp ^= null		/* Get AST entry and page table */
			then do;

006235  aa  6 00562 2371 00	ldaq 	pr6|370		sstp
006236  aa   771742 6770 04	eraq 	-3102,ic		000200 = 077777000043 000001000000
006237  aa  0 00460 3771 00	anaq 	pr0|304		= 077777000077 777777077077
006240  aa   000253 6000 04	tze  	171,ic		006513
						STATEMENT 1 ON LINE 735
			     j = bin (sdwp -> sdw.add, 24);

006241  aa  6 00752 2351 00	lda  	pr6|490		sdw.add
006242  aa   000060 7730 00	lrl  	48
006243  aa  6 00520 7561 00	stq  	pr6|336		j
						STATEMENT 1 ON LINE 736
			     if j > sst_high_loc	/* Check for address beyond end of SST */
			     then go to use_abs;

006244  aa  6 00510 1161 00	cmpq 	pr6|328		sst_high_loc
006245  aa   000243 6054 04	tpnz 	163,ic		006510
						STATEMENT 1 ON LINE 738
			     jbdry = 0;

006246  aa  6 00512 4501 00	stz  	pr6|330		jbdry
						STATEMENT 1 ON LINE 739
			     page_no = 0;

006247  aa  6 00513 4501 00	stz  	pr6|331		page_no
						STATEMENT 1 ON LINE 740
			     ptp = addrel (sstp, j - sst_abs_loc);

006250  aa  6 00507 1761 00	sbq  	pr6|327		sst_abs_loc
006251  aa  6 00562 3521 66	epp2 	pr6|370,*ql	sstp
006252  aa   000000 0520 03	adwp2	0,du
006253  aa  6 00554 2521 00	spri2	pr6|364		ptp
						STATEMENT 1 ON LINE 741
			     prt = ptp;

006254  aa  6 00502 2521 00	spri2	pr6|322		prt
						STATEMENT 1 ON LINE 742
			     astep = addrel (ptp, ast_off);

006255  aa  6 00506 2361 00	ldq  	pr6|326		ast_off
006256  aa  2 00000 3515 06	epp1 	pr2|0,ql
006257  aa   000000 0510 03	adwp1	0,du
006260  aa  6 00156 2515 00	spri1	pr6|110		astep
						STATEMENT 1 ON LINE 744
			     j1 = bin (sdwp -> sdw.bound, 14) + 1;

006261  aa  7 00001 2351 00	lda  	pr7|1		sdw.bound
006262  aa   000001 7350 00	als  	1
006263  aa   000072 7730 00	lrl  	58
006264  aa   000001 0760 07	adq  	1,dl
006265  aa  6 00522 7561 00	stq  	pr6|338		j1
						STATEMENT 1 ON LINE 745
			     j2 = divide (j1 + 63, 64, 17, 0);

006266  aa   000077 0760 07	adq  	63,dl
006267  aa   000100 5060 07	div  	64,dl
006270  aa  6 00523 7561 00	stq  	pr6|339		j2
						STATEMENT 1 ON LINE 746
			     j1 = divide (j2, 8, 17, 0);

006271  aa   000010 5060 07	div  	8,dl
006272  aa  6 00522 7561 00	stq  	pr6|338		j1
						STATEMENT 1 ON LINE 747
			     j2 = j2 - j1 * 8;

006273  aa   000003 7360 00	qls  	3
006274  aa  6 00707 7561 00	stq  	pr6|455
006275  aa  6 00707 3361 00	lcq  	pr6|455
006276  aa  6 00523 0561 00	asq  	pr6|339		j2
						STATEMENT 1 ON LINE 749
			     call od_print_ (four, fmtast,
				astep -> sgl.zero, astep -> sgl.one, astep -> sgl.two, astep -> sgl.three,
				astep -> sgl.four, astep -> sgl.five, astep -> sgl.six, astep -> sgl.seven);

006277  aa  6 00044 3701 20	epp4 	pr6|36,*
006300  ia  4 00232 3521 00	epp2 	pr4|154		four
006301  aa  6 00760 2521 00	spri2	pr6|496
006302  ia  4 00606 3521 00	epp2 	pr4|390		fmtast
006303  aa  6 00762 2521 00	spri2	pr6|498
006304  aa  1 00000 3521 00	epp2 	pr1|0		sgl.zero
006305  aa  6 00764 2521 00	spri2	pr6|500
006306  aa  1 00001 3521 00	epp2 	pr1|1		sgl.one
006307  aa  6 00766 2521 00	spri2	pr6|502
006310  aa  1 00002 3521 00	epp2 	pr1|2		sgl.two
006311  aa  6 00770 2521 00	spri2	pr6|504
006312  aa  1 00003 3521 00	epp2 	pr1|3		sgl.three
006313  aa  6 00772 2521 00	spri2	pr6|506
006314  aa  1 00004 3521 00	epp2 	pr1|4		sgl.four
006315  aa  6 00774 2521 00	spri2	pr6|508
006316  aa  1 00005 3521 00	epp2 	pr1|5		sgl.five
006317  aa  6 00776 2521 00	spri2	pr6|510
006320  aa  1 00006 3521 00	epp2 	pr1|6		sgl.six
006321  aa  6 01000 2521 00	spri2	pr6|512
006322  aa  1 00007 3521 00	epp2 	pr1|7		sgl.seven
006323  aa  6 01002 2521 00	spri2	pr6|514
006324  aa   771600 3520 04	epp2 	-3200,ic		000124 = 404000000021
006325  aa  6 01004 2521 00	spri2	pr6|516
006326  aa   771455 3520 04	epp2 	-3283,ic		000003 = 524000000100
006327  aa  6 01006 2521 00	spri2	pr6|518
006330  aa   771573 3520 04	epp2 	-3205,ic		000123 = 404000000043
006331  aa  6 01010 2521 00	spri2	pr6|520
006332  aa  6 01012 2521 00	spri2	pr6|522
006333  aa  6 01014 2521 00	spri2	pr6|524
006334  aa  6 01016 2521 00	spri2	pr6|526
006335  aa  6 01020 2521 00	spri2	pr6|528
006336  aa  6 01022 2521 00	spri2	pr6|530
006337  aa  6 01024 2521 00	spri2	pr6|532
006340  aa  6 01026 2521 00	spri2	pr6|534
006341  aa  6 00756 6211 00	eax1 	pr6|494
006342  aa   050000 4310 07	fld  	20480,dl
006343  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
006344  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 752
			     do j = 0 by 8 while (j < j1);

006345  aa  6 00520 4501 00	stz  	pr6|336		j
006346  aa  6 00520 2361 00	ldq  	pr6|336		j
006347  aa  6 00522 1161 00	cmpq 	pr6|338		j1
006350  aa   000061 6050 04	tpl  	49,ic		006431
						STATEMENT 1 ON LINE 753
				call od_print_ (one, fmteight, j,
				     prt -> sgl.zero, prt -> sgl.one, prt -> sgl.two, prt -> sgl.three,
				     prt -> sgl.four, prt -> sgl.five, prt -> sgl.six, prt -> sgl.seven);

006351  aa  6 00044 3701 20	epp4 	pr6|36,*
006352  ia  4 00235 3521 00	epp2 	pr4|157		one
006353  aa  6 00760 2521 00	spri2	pr6|496
006354  ia  4 00553 3521 00	epp2 	pr4|363		fmteight
006355  aa  6 00762 2521 00	spri2	pr6|498
006356  aa  6 00520 3521 00	epp2 	pr6|336		j
006357  aa  6 00764 2521 00	spri2	pr6|500
006360  aa  6 00502 3521 20	epp2 	pr6|322,*		sgl.zero
006361  aa  6 00766 2521 00	spri2	pr6|502
006362  aa  6 00502 3735 20	epp7 	pr6|322,*		prt
006363  aa  7 00001 3521 00	epp2 	pr7|1		sgl.one
006364  aa  6 00770 2521 00	spri2	pr6|504
006365  aa  7 00002 3521 00	epp2 	pr7|2		sgl.two
006366  aa  6 00772 2521 00	spri2	pr6|506
006367  aa  7 00003 3521 00	epp2 	pr7|3		sgl.three
006370  aa  6 00774 2521 00	spri2	pr6|508
006371  aa  7 00004 3521 00	epp2 	pr7|4		sgl.four
006372  aa  6 00776 2521 00	spri2	pr6|510
006373  aa  7 00005 3521 00	epp2 	pr7|5		sgl.five
006374  aa  6 01000 2521 00	spri2	pr6|512
006375  aa  7 00006 3521 00	epp2 	pr7|6		sgl.six
006376  aa  6 01002 2521 00	spri2	pr6|514
006377  aa  7 00007 3521 00	epp2 	pr7|7		sgl.seven
006400  aa  6 01004 2521 00	spri2	pr6|516
006401  aa   771523 3520 04	epp2 	-3245,ic		000124 = 404000000021
006402  aa  6 01006 2521 00	spri2	pr6|518
006403  aa  6 01012 2521 00	spri2	pr6|522
006404  aa   771376 3520 04	epp2 	-3330,ic		000002 = 524000000045
006405  aa  6 01010 2521 00	spri2	pr6|520
006406  aa   771515 3520 04	epp2 	-3251,ic		000123 = 404000000043
006407  aa  6 01014 2521 00	spri2	pr6|524
006410  aa  6 01016 2521 00	spri2	pr6|526
006411  aa  6 01020 2521 00	spri2	pr6|528
006412  aa  6 01022 2521 00	spri2	pr6|530
006413  aa  6 01024 2521 00	spri2	pr6|532
006414  aa  6 01026 2521 00	spri2	pr6|534
006415  aa  6 01030 2521 00	spri2	pr6|536
006416  aa  6 01032 2521 00	spri2	pr6|538
006417  aa  6 00756 6211 00	eax1 	pr6|494
006420  aa   054000 4310 07	fld  	22528,dl
006421  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
006422  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 756
				prt = addrel (prt, 8);

006423  aa  6 00502 3521 20	epp2 	pr6|322,*		prt
006424  aa   000010 0520 03	adwp2	8,du
006425  aa  6 00502 2521 00	spri2	pr6|322		prt
						STATEMENT 1 ON LINE 757
			     end;

006426  aa   000010 2360 07	ldq  	8,dl
006427  aa  6 00520 0561 00	asq  	pr6|336		j
006430  aa   777716 7100 04	tra  	-50,ic		006346
						STATEMENT 1 ON LINE 758
			     if j2 ^= 0
			     then do;

006431  aa  6 00523 2361 00	ldq  	pr6|339		j2
006432  aa   000061 6000 04	tze  	49,ic		006513
						STATEMENT 1 ON LINE 760
				l = j2 * 4 + 5;

006433  aa   000002 7360 00	qls  	2
006434  aa   000005 0760 07	adq  	5,dl
006435  aa  6 00521 7561 00	stq  	pr6|337		l
						STATEMENT 1 ON LINE 761
				call od_print_ (one, eightp -> bl, j,
				     prt -> sgl.zero, prt -> sgl.one, prt -> sgl.two, prt -> sgl.three,
				     prt -> sgl.four, prt -> sgl.five, prt -> sgl.six);

006436  aa   524000 2760 03	orq  	174080,du
006437  aa  6 00707 7561 00	stq  	pr6|455
006440  aa  6 00044 3701 20	epp4 	pr6|36,*
006441  ia  4 00235 3521 00	epp2 	pr4|157		one
006442  aa  6 00760 2521 00	spri2	pr6|496
006443  aa  6 00504 3521 20	epp2 	pr6|324,*		bl
006444  aa  6 00762 2521 00	spri2	pr6|498
006445  aa  6 00520 3521 00	epp2 	pr6|336		j
006446  aa  6 00764 2521 00	spri2	pr6|500
006447  aa  6 00502 3521 20	epp2 	pr6|322,*		sgl.zero
006450  aa  6 00766 2521 00	spri2	pr6|502
006451  aa  6 00502 3735 20	epp7 	pr6|322,*		prt
006452  aa  7 00001 3521 00	epp2 	pr7|1		sgl.one
006453  aa  6 00770 2521 00	spri2	pr6|504
006454  aa  7 00002 3521 00	epp2 	pr7|2		sgl.two
006455  aa  6 00772 2521 00	spri2	pr6|506
006456  aa  7 00003 3521 00	epp2 	pr7|3		sgl.three
006457  aa  6 00774 2521 00	spri2	pr6|508
006460  aa  7 00004 3521 00	epp2 	pr7|4		sgl.four
006461  aa  6 00776 2521 00	spri2	pr6|510
006462  aa  7 00005 3521 00	epp2 	pr7|5		sgl.five
006463  aa  6 01000 2521 00	spri2	pr6|512
006464  aa  7 00006 3521 00	epp2 	pr7|6		sgl.six
006465  aa  6 01002 2521 00	spri2	pr6|514
006466  aa   771436 3520 04	epp2 	-3298,ic		000124 = 404000000021
006467  aa  6 01004 2521 00	spri2	pr6|516
006470  aa  6 01010 2521 00	spri2	pr6|520
006471  aa  6 00707 3521 00	epp2 	pr6|455
006472  aa  6 01006 2521 00	spri2	pr6|518
006473  aa   771430 3520 04	epp2 	-3304,ic		000123 = 404000000043
006474  aa  6 01012 2521 00	spri2	pr6|522
006475  aa  6 01014 2521 00	spri2	pr6|524
006476  aa  6 01016 2521 00	spri2	pr6|526
006477  aa  6 01020 2521 00	spri2	pr6|528
006500  aa  6 01022 2521 00	spri2	pr6|530
006501  aa  6 01024 2521 00	spri2	pr6|532
006502  aa  6 01026 2521 00	spri2	pr6|534
006503  aa  6 00756 6211 00	eax1 	pr6|494
006504  aa   050000 4310 07	fld  	20480,dl
006505  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
006506  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 764
			     end;

						STATEMENT 1 ON LINE 765
			end;

						STATEMENT 1 ON LINE 766
		     end;

006507  aa   000004 7100 04	tra  	4,ic		006513
						STATEMENT 1 ON LINE 767
		     else				/* ! */
use_abs:		     abs_loc = bin (sdwp -> sdw.add, 24);

006510  aa  6 00752 2351 00	lda  	pr6|490		sdw.add
006511  aa   000060 7730 00	lrl  	48
006512  aa  6 00511 7561 00	stq  	pr6|329		abs_loc
						STATEMENT 1 ON LINE 769
		call od_print_ (one, c0);

006513  aa  6 00044 3701 20	epp4 	pr6|36,*
006514  ia  4 00235 3521 00	epp2 	pr4|157		one
006515  aa  6 00574 2521 00	spri2	pr6|380
006516  aa  6 00517 3521 00	epp2 	pr6|335		c0
006517  aa  6 00576 2521 00	spri2	pr6|382
006520  aa   771404 3520 04	epp2 	-3324,ic		000124 = 404000000021
006521  aa  6 00600 2521 00	spri2	pr6|384
006522  aa   771357 3520 04	epp2 	-3345,ic		000101 = 524000000000
006523  aa  6 00602 2521 00	spri2	pr6|386
006524  aa  6 00572 6211 00	eax1 	pr6|378
006525  aa   010000 4310 07	fld  	4096,dl
006526  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
006527  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 770
	     end;

						STATEMENT 1 ON LINE 771
	     if given_length <= 0
	     then do;

006530  aa  6 00530 2361 00	ldq  	pr6|344		given_length
006531  aa   000022 6054 04	tpnz 	18,ic		006553
						STATEMENT 1 ON LINE 773
		call od_print_ (one, fmtlth, given_length);

006532  aa  6 00044 3701 20	epp4 	pr6|36,*
006533  ia  4 00235 3521 00	epp2 	pr4|157		one
006534  aa  6 00610 2521 00	spri2	pr6|392
006535  ia  4 00626 3521 00	epp2 	pr4|406		fmtlth
006536  aa  6 00612 2521 00	spri2	pr6|394
006537  aa  6 00530 3521 00	epp2 	pr6|344		given_length
006540  aa  6 00614 2521 00	spri2	pr6|396
006541  aa   771363 3520 04	epp2 	-3341,ic		000124 = 404000000021
006542  aa  6 00616 2521 00	spri2	pr6|398
006543  aa  6 00622 2521 00	spri2	pr6|402
006544  aa   771270 3520 04	epp2 	-3400,ic		000034 = 524000000016
006545  aa  6 00620 2521 00	spri2	pr6|400
006546  aa  6 00606 6211 00	eax1 	pr6|390
006547  aa   014000 4310 07	fld  	6144,dl
006550  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
006551  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 774
		go to next_seg;

006552  aa   000407 7100 04	tra  	263,ic		007161
						STATEMENT 1 ON LINE 775
	     end;

						STATEMENT 1 ON LINE 780
	     prt = null;

006553  aa   771425 2370 04	ldaq 	-3307,ic		000200 = 077777000043 000001000000
006554  aa  6 00502 7571 00	staq 	pr6|322		prt
						STATEMENT 1 ON LINE 781
	     if cur_seg_no ^= 0 then do;

006555  aa  6 00527 2361 00	ldq  	pr6|343		cur_seg_no
006556  aa   000063 6000 04	tze  	51,ic		006641
						STATEMENT 1 ON LINE 782
		if (cur_seg_no = pds_seg_no & pdsp ^= null) then prt = pdsp;

006557  aa  6 00132 1161 00	cmpq 	pr6|90		pds_seg_no
006560  aa   000010 6010 04	tnz  	8,ic		006570
006561  aa  6 00152 2371 00	ldaq 	pr6|106		pdsp
006562  aa   771416 6770 04	eraq 	-3314,ic		000200 = 077777000043 000001000000
006563  aa  0 00460 3771 00	anaq 	pr0|304		= 077777000077 777777077077
006564  aa   000004 6000 04	tze  	4,ic		006570
006565  aa  6 00152 3735 20	epp7 	pr6|106,*		pdsp
006566  aa  6 00502 6535 00	spri7	pr6|322		prt
006567  aa   000052 7100 04	tra  	42,ic		006641
						STATEMENT 1 ON LINE 783
		else if (cur_seg_no = prds_seg_no & prdsp ^= null) then prt = prdsp;

006570  aa  6 00527 2361 00	ldq  	pr6|343		cur_seg_no
006571  aa  6 00133 1161 00	cmpq 	pr6|91		prds_seg_no
006572  aa   000010 6010 04	tnz  	8,ic		006602
006573  aa  6 00154 2371 00	ldaq 	pr6|108		prdsp
006574  aa   771404 6770 04	eraq 	-3324,ic		000200 = 077777000043 000001000000
006575  aa  0 00460 3771 00	anaq 	pr0|304		= 077777000077 777777077077
006576  aa   000004 6000 04	tze  	4,ic		006602
006577  aa  6 00154 3735 20	epp7 	pr6|108,*		prdsp
006600  aa  6 00502 6535 00	spri7	pr6|322		prt
006601  aa   000040 7100 04	tra  	32,ic		006641
						STATEMENT 1 ON LINE 784
		else if (cur_seg_no >= dsbr_stk_no & dsbr_stk_no ^= 0 & cur_seg_no - dsbr_stk_no < 8) then do;

006602  aa  6 00527 2361 00	ldq  	pr6|343		cur_seg_no
006603  aa  6 00165 1161 00	cmpq 	pr6|117		dsbr_stk_no
006604  aa   000035 6040 04	tmi  	29,ic		006641
006605  aa  6 00165 2361 00	ldq  	pr6|117		dsbr_stk_no
006606  aa   000033 6000 04	tze  	27,ic		006641
006607  aa  6 00527 2361 00	ldq  	pr6|343		cur_seg_no
006610  aa  6 00165 1761 00	sbq  	pr6|117		dsbr_stk_no
006611  aa   000010 1160 07	cmpq 	8,dl
006612  aa   000027 6050 04	tpl  	23,ic		006641
						STATEMENT 1 ON LINE 785
		     call copy_dump_seg_ (cur_seg_no, cur_proc_index, ptr_array, len_array, stk_seg, stklen);

006613  aa  6 00527 3521 00	epp2 	pr6|343		cur_seg_no
006614  aa  6 00610 2521 00	spri2	pr6|392
006615  aa  6 00526 3521 00	epp2 	pr6|342		cur_proc_index
006616  aa  6 00612 2521 00	spri2	pr6|394
006617  aa  6 00314 3521 00	epp2 	pr6|204		ptr_array
006620  aa  6 00614 2521 00	spri2	pr6|396
006621  aa  6 00414 3521 00	epp2 	pr6|268		len_array
006622  aa  6 00616 2521 00	spri2	pr6|398
006623  aa  6 00044 3701 20	epp4 	pr6|36,*
006624  ia  4 00224 3521 00	epp2 	pr4|148		stk_seg
006625  aa  6 00620 2521 00	spri2	pr6|400
006626  aa  6 00144 3521 00	epp2 	pr6|100		stklen
006627  aa  6 00622 2521 00	spri2	pr6|402
006630  aa  6 00606 6211 00	eax1 	pr6|390
006631  aa   030000 4310 07	fld  	12288,dl
006632  la  4 00706 3521 20	epp2 	pr4|454,*		copy_dump_seg_
006633  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 786
		     if stklen ^= 0 then prt = stk_seg;

006634  aa  6 00144 2361 00	ldq  	pr6|100		stklen
006635  aa   000004 6000 04	tze  	4,ic		006641
006636  aa  6 00044 3701 20	epp4 	pr6|36,*
006637  ia  4 00224 3735 20	epp7 	pr4|148,*		stk_seg
006640  aa  6 00502 6535 00	spri7	pr6|322		prt
						STATEMENT 1 ON LINE 787
		end;

						STATEMENT 1 ON LINE 788
	     end;

						STATEMENT 1 ON LINE 789
	     if prt = null then go to NOT_STACK;

006641  aa  6 00502 2371 00	ldaq 	pr6|322		prt
006642  aa   771336 6770 04	eraq 	-3362,ic		000200 = 077777000043 000001000000
006643  aa  0 00460 3771 00	anaq 	pr0|304		= 077777000077 777777077077
006644  aa   000023 6000 04	tze  	19,ic		006667
						STATEMENT 1 ON LINE 790
	     call od_stack_ (prt, given_length, sltp, namp, sstp, sstnp);

006645  aa  6 00502 3521 00	epp2 	pr6|322		prt
006646  aa  6 00610 2521 00	spri2	pr6|392
006647  aa  6 00530 3521 00	epp2 	pr6|344		given_length
006650  aa  6 00612 2521 00	spri2	pr6|394
006651  aa  6 00550 3521 00	epp2 	pr6|360		sltp
006652  aa  6 00614 2521 00	spri2	pr6|396
006653  aa  6 00146 3521 00	epp2 	pr6|102		namp
006654  aa  6 00616 2521 00	spri2	pr6|398
006655  aa  6 00562 3521 00	epp2 	pr6|370		sstp
006656  aa  6 00620 2521 00	spri2	pr6|400
006657  aa  6 00552 3521 00	epp2 	pr6|362		sstnp
006660  aa  6 00622 2521 00	spri2	pr6|402
006661  aa  6 00606 6211 00	eax1 	pr6|390
006662  aa   030000 4310 07	fld  	12288,dl
006663  aa  6 00044 3701 20	epp4 	pr6|36,*
006664  la  4 00652 3521 20	epp2 	pr4|426,*		od_stack_
006665  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 791
	     go to next_seg;

006666  aa   000273 7100 04	tra  	187,ic		007161
						STATEMENT 1 ON LINE 792
NOT_STACK:
	     j1 = given_length;

006667  aa  6 00530 2361 00	ldq  	pr6|344		given_length
006670  aa  6 00522 7561 00	stq  	pr6|338		j1
						STATEMENT 1 ON LINE 794
	     if sdwp -> sdw.unpaged then do;

006671  aa  6 00556 3735 20	epp7 	pr6|366,*		sdwp
006672  aa  7 00001 2351 00	lda  	pr7|1		sdw.unpaged
006673  aa   200000 3150 07	cana 	65536,dl
006674  aa   000012 6000 04	tze  	10,ic		006706
						STATEMENT 1 ON LINE 795
		j2 = (bin (sdwp -> sdw.bound, 14) + 1) * 16;

006675  aa  7 00001 2351 00	lda  	pr7|1		sdw.bound
006676  aa   000001 7350 00	als  	1
006677  aa   000072 7730 00	lrl  	58
006700  aa   000001 0760 07	adq  	1,dl
006701  aa   000004 7360 00	qls  	4
006702  aa  6 00523 7561 00	stq  	pr6|339		j2
						STATEMENT 1 ON LINE 796
		if j2 < j1 then j1 = j2;

006703  aa  6 00522 1161 00	cmpq 	pr6|338		j1
006704  aa   000002 6050 04	tpl  	2,ic		006706
006705  aa  6 00522 7561 00	stq  	pr6|338		j1
						STATEMENT 1 ON LINE 797
	     end;

						STATEMENT 1 ON LINE 799
	     ptr_index = divide (cur_orig, wps, 17, 0);

006706  aa  6 00525 2361 00	ldq  	pr6|341		cur_orig
006707  aa  6 00044 3701 20	epp4 	pr6|36,*
006710  ia  4 00237 5061 00	div  	pr4|159		wps
006711  aa  6 00534 7561 00	stq  	pr6|348		ptr_index
						STATEMENT 1 ON LINE 800
	     seg_index = mod (cur_orig, wps);

006712  aa  6 00525 2361 00	ldq  	pr6|341		cur_orig
006713  ia  4 00237 3521 00	epp2 	pr4|159		wps
006714  aa  0 00704 7001 00	tsx0 	pr0|452		mod_fx1
006715  aa  6 00533 7561 00	stq  	pr6|347		seg_index
						STATEMENT 1 ON LINE 801
	     cur = addrel (ptr_array (ptr_index), seg_index);

006716  aa  6 00534 2361 00	ldq  	pr6|348		ptr_index
006717  aa   000001 7360 00	qls  	1
006720  aa   000000 6270 06	eax7 	0,ql
006721  aa  6 00533 2361 00	ldq  	pr6|347		seg_index
006722  aa  6 00314 3515 37	epp1 	pr6|204,7*	ptr_array
006723  aa  1 00000 5075 06	awd  	pr1|0,ql
006724  aa  6 00474 2515 00	spri1	pr6|316		cur
						STATEMENT 1 ON LINE 803
	     eq_print = 0;

006725  aa  6 00524 4501 00	stz  	pr6|340		eq_print
						STATEMENT 1 ON LINE 807
	     do j = 0 by 8 while (j < j1);

006726  aa  6 00520 4501 00	stz  	pr6|336		j
006727  aa   000000 0110 03	nop  	0,du
006730  aa  6 00520 2361 00	ldq  	pr6|336		j
006731  aa  6 00522 1161 00	cmpq 	pr6|338		j1
006732  aa   000172 6050 04	tpl  	122,ic		007124
						STATEMENT 1 ON LINE 809
		wpsmsi = wps - seg_index;

006733  aa  6 00044 3701 20	epp4 	pr6|36,*
006734  ia  4 00237 2361 00	ldq  	pr4|159		wps
006735  aa  6 00533 1761 00	sbq  	pr6|347		seg_index
006736  aa  6 00535 7561 00	stq  	pr6|349		wpsmsi
						STATEMENT 1 ON LINE 811
		if wpsmsi >= 8			/* 8 or more, print directly */
		then do;

006737  aa   000010 1160 07	cmpq 	8,dl
006740  aa   000133 6040 04	tmi  	91,ic		007073
						STATEMENT 1 ON LINE 813
retry_8:
		     prt = cur;

006741  aa  6 00474 3735 20	epp7 	pr6|316,*		cur
006742  aa  6 00502 6535 00	spri7	pr6|322		prt
						STATEMENT 1 ON LINE 815
compare:						/* Come here at most once after main loop to compare and */
						/* print partial line */

		     if j = jbdry
		     then do;

006743  aa  6 00520 2361 00	ldq  	pr6|336		j
006744  aa  6 00512 1161 00	cmpq 	pr6|330		jbdry
006745  aa   000022 6010 04	tnz  	18,ic		006767
						STATEMENT 1 ON LINE 820
			ptwp = addr (ptp -> bin_array (page_no));

006746  aa  6 00513 7271 00	lxl7 	pr6|331		page_no
006747  aa  6 00554 3735 77	epp7 	pr6|364,*7	bin_array
006750  aa  6 00160 6535 00	spri7	pr6|112		ptwp
						STATEMENT 1 ON LINE 821
			if ptwp -> ptw.df
			then abs_loc = bin (ptwp -> ptw.add, 18) * 64;

006751  aa  7 00000 2351 00	lda  	pr7|0		ptw.df
006752  aa   000004 3150 07	cana 	4,dl
006753  aa   000006 6000 04	tze  	6,ic		006761
006754  aa  7 00000 2351 00	lda  	pr7|0		ptw.add
006755  aa   000066 7730 00	lrl  	54
006756  aa   000006 7360 00	qls  	6
006757  aa  6 00511 7561 00	stq  	pr6|329		abs_loc
006760  aa   000004 7100 04	tra  	4,ic		006764
						STATEMENT 1 ON LINE 823
			else abs_loc = -wps;

006761  aa  6 00044 3701 20	epp4 	pr6|36,*
006762  ia  4 00237 3361 00	lcq  	pr4|159		wps
006763  aa  6 00511 7561 00	stq  	pr6|329		abs_loc
						STATEMENT 1 ON LINE 825
			jbdry = jbdry + 1024;

006764  aa   002000 2360 07	ldq  	1024,dl
006765  aa  6 00512 0561 00	asq  	pr6|330		jbdry
						STATEMENT 1 ON LINE 826
			page_no = page_no + 1;

006766  aa  6 00513 0541 00	aos  	pr6|331		page_no
						STATEMENT 1 ON LINE 827
		     end;

						STATEMENT 1 ON LINE 829
		     if j ^= 0			/* Don't check first time through */
		     then if prt -> dbl.six = cmp.six	/* See if this line equals previous line */
			then if prt -> dbl.four = cmp.four
			     then if prt -> dbl.two = cmp.two
				then if prt -> dbl.zero = cmp.zero
				     then do;

006767  aa  6 00520 2361 00	ldq  	pr6|336		j
006770  aa   000020 6000 04	tze  	16,ic		007010
006771  aa  6 00502 3735 20	epp7 	pr6|322,*		prt
006772  aa  7 00006 2371 00	ldaq 	pr7|6		dbl.six
006773  aa  6 00462 1171 00	cmpaq	pr6|306		cmp.six
006774  aa   000014 6010 04	tnz  	12,ic		007010
006775  aa  7 00004 2371 00	ldaq 	pr7|4		dbl.four
006776  aa  6 00460 1171 00	cmpaq	pr6|304		cmp.four
006777  aa   000011 6010 04	tnz  	9,ic		007010
007000  aa  7 00002 2371 00	ldaq 	pr7|2		dbl.two
007001  aa  6 00456 1171 00	cmpaq	pr6|302		cmp.two
007002  aa   000006 6010 04	tnz  	6,ic		007010
007003  aa  7 00000 2371 00	ldaq 	pr7|0		dbl.zero
007004  aa  6 00454 1171 00	cmpaq	pr6|300		cmp.zero
007005  aa   000003 6010 04	tnz  	3,ic		007010
						STATEMENT 1 ON LINE 835
					eq_print = eq_print + 1;

007006  aa  6 00524 0541 00	aos  	pr6|340		eq_print
						STATEMENT 1 ON LINE 836
					go to endj;

007007  aa   000105 7100 04	tra  	69,ic		007114
						STATEMENT 1 ON LINE 837
				     end;

						STATEMENT 1 ON LINE 839
		     if eq_print ^= 0		/* Line was different, were there suppressed lines? */
		     then do;

007010  aa  6 00524 2361 00	ldq  	pr6|340		eq_print
007011  aa   000035 6000 04	tze  	29,ic		007046
						STATEMENT 1 ON LINE 841
			if eq_print = 1		/* How many? */
			then s = " ";

007012  aa   000001 1160 07	cmpq 	1,dl
007013  aa   000004 6010 04	tnz  	4,ic		007017
007014  aa   040000 2350 03	lda  	16384,du
007015  aa  6 00516 7551 00	sta  	pr6|334		s
007016  aa   000003 7100 04	tra  	3,ic		007021
						STATEMENT 1 ON LINE 843
			else s = "s";

007017  aa   163000 2350 03	lda  	58880,du
007020  aa  6 00516 7551 00	sta  	pr6|334		s
						STATEMENT 1 ON LINE 844
			call od_print_ (one, fmteq, eq_print, s);

007021  aa  6 00044 3701 20	epp4 	pr6|36,*
007022  ia  4 00235 3521 00	epp2 	pr4|157		one
007023  aa  6 00626 2521 00	spri2	pr6|406
007024  ia  4 00636 3521 00	epp2 	pr4|414		fmteq
007025  aa  6 00630 2521 00	spri2	pr6|408
007026  aa  6 00524 3521 00	epp2 	pr6|340		eq_print
007027  aa  6 00632 2521 00	spri2	pr6|410
007030  aa  6 00516 3521 00	epp2 	pr6|334		s
007031  aa  6 00634 2521 00	spri2	pr6|412
007032  aa   771072 3520 04	epp2 	-3526,ic		000124 = 404000000021
007033  aa  6 00636 2521 00	spri2	pr6|414
007034  aa  6 00642 2521 00	spri2	pr6|418
007035  aa   770744 3520 04	epp2 	-3612,ic		000001 = 524000000025
007036  aa  6 00640 2521 00	spri2	pr6|416
007037  aa   771020 3520 04	epp2 	-3568,ic		000057 = 524000000001
007040  aa  6 00644 2521 00	spri2	pr6|420
007041  aa  6 00624 6211 00	eax1 	pr6|404
007042  aa   020000 4310 07	fld  	8192,dl
007043  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
007044  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 845
			eq_print = 0;

007045  aa  6 00524 4501 00	stz  	pr6|340		eq_print
						STATEMENT 1 ON LINE 846
		     end;

						STATEMENT 1 ON LINE 853
		     call od_print_$op_fmt_line (abs_loc, j, prt -> sgl.zero);

007046  aa  6 00511 3521 00	epp2 	pr6|329		abs_loc
007047  aa  6 00574 2521 00	spri2	pr6|380
007050  aa  6 00520 3521 00	epp2 	pr6|336		j
007051  aa  6 00576 2521 00	spri2	pr6|382
007052  aa  6 00502 3521 20	epp2 	pr6|322,*		sgl.zero
007053  aa  6 00600 2521 00	spri2	pr6|384
007054  aa  6 00572 6211 00	eax1 	pr6|378
007055  aa   014000 4310 07	fld  	6144,dl
007056  aa  6 00044 3701 20	epp4 	pr6|36,*
007057  la  4 00676 3521 20	epp2 	pr4|446,*		od_print_$op_fmt_line
007060  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 855
		     cmp.six = prt -> dbl.six;

007061  aa  6 00502 3735 20	epp7 	pr6|322,*		prt
007062  aa  7 00006 2371 00	ldaq 	pr7|6		dbl.six
007063  aa  6 00462 7571 00	staq 	pr6|306		cmp.six
						STATEMENT 1 ON LINE 856
		     cmp.four = prt -> dbl.four;

007064  aa  7 00004 2371 00	ldaq 	pr7|4		dbl.four
007065  aa  6 00460 7571 00	staq 	pr6|304		cmp.four
						STATEMENT 1 ON LINE 857
		     cmp.two = prt -> dbl.two;

007066  aa  7 00002 2371 00	ldaq 	pr7|2		dbl.two
007067  aa  6 00456 7571 00	staq 	pr6|302		cmp.two
						STATEMENT 1 ON LINE 858
		     cmp.zero = prt -> dbl.zero;

007070  aa  7 00000 2371 00	ldaq 	pr7|0		dbl.zero
007071  aa  6 00454 7571 00	staq 	pr6|300		cmp.zero
						STATEMENT 1 ON LINE 859
		end;

007072  aa   000022 7100 04	tra  	18,ic		007114
						STATEMENT 1 ON LINE 862
		else do;

						STATEMENT 1 ON LINE 863
		     nxt = ptr_array (ptr_index + 1);

007073  aa  6 00534 2361 00	ldq  	pr6|348		ptr_index
007074  aa   000001 7360 00	qls  	1
007075  aa  6 00316 3735 26	epp7 	pr6|206,ql*	ptr_array
007076  aa  6 00476 6535 00	spri7	pr6|318		nxt
						STATEMENT 1 ON LINE 864
		     if wpsmsi = 0			/* If zero, trivial */
		     then do;

007077  aa  6 00535 2361 00	ldq  	pr6|349		wpsmsi
007100  aa   000004 6010 04	tnz  	4,ic		007104
						STATEMENT 1 ON LINE 866
			cur = nxt;

007101  aa  6 00474 6535 00	spri7	pr6|316		cur
						STATEMENT 1 ON LINE 867
			seg_index = 0;

007102  aa  6 00533 4501 00	stz  	pr6|347		seg_index
						STATEMENT 1 ON LINE 868
			go to retry_8;

007103  aa   777636 7100 04	tra  	-98,ic		006741
						STATEMENT 1 ON LINE 869
		     end;

						STATEMENT 1 ON LINE 871
		     seg_index = -wpsmsi;

007104  aa  6 00535 3361 00	lcq  	pr6|349		wpsmsi
007105  aa  6 00533 7561 00	stq  	pr6|347		seg_index
						STATEMENT 1 ON LINE 872
		     cur = addrel (nxt, seg_index);

007106  aa  7 00000 3521 06	epp2 	pr7|0,ql
007107  aa   000000 0520 03	adwp2	0,du
007110  aa  6 00474 2521 00	spri2	pr6|316		cur
						STATEMENT 1 ON LINE 873
		     prt = tmp;

007111  aa  6 00500 3715 20	epp5 	pr6|320,*		tmp
007112  aa  6 00502 6515 00	spri5	pr6|322		prt
						STATEMENT 1 ON LINE 874
		     go to compare;

007113  aa   777630 7100 04	tra  	-104,ic		006743
						STATEMENT 1 ON LINE 875
		end;

						STATEMENT 1 ON LINE 877
endj:		cur = addrel (cur, 8);

007114  aa  6 00474 3521 20	epp2 	pr6|316,*		cur
007115  aa   000010 0520 03	adwp2	8,du
007116  aa  6 00474 2521 00	spri2	pr6|316		cur
						STATEMENT 1 ON LINE 878
		seg_index = seg_index + 8;

007117  aa   000010 2360 07	ldq  	8,dl
007120  aa  6 00533 0561 00	asq  	pr6|347		seg_index
						STATEMENT 1 ON LINE 879
		abs_loc = abs_loc + 8;

007121  aa  6 00511 0561 00	asq  	pr6|329		abs_loc
						STATEMENT 1 ON LINE 880
	     end;

007122  aa  6 00520 0561 00	asq  	pr6|336		j
007123  aa   777605 7100 04	tra  	-123,ic		006730
						STATEMENT 1 ON LINE 883
	     if eq_print ^= 0			/* See if last line was identical to last printed line */
	     then do;

007124  aa  6 00524 2361 00	ldq  	pr6|340		eq_print
007125  aa   000034 6000 04	tze  	28,ic		007161
						STATEMENT 1 ON LINE 885
		if eq_print = 1
		then s = " ";

007126  aa   000001 1160 07	cmpq 	1,dl
007127  aa   000004 6010 04	tnz  	4,ic		007133
007130  aa   040000 2350 03	lda  	16384,du
007131  aa  6 00516 7551 00	sta  	pr6|334		s
007132  aa   000003 7100 04	tra  	3,ic		007135
						STATEMENT 1 ON LINE 887
		else s = "s";

007133  aa   163000 2350 03	lda  	58880,du
007134  aa  6 00516 7551 00	sta  	pr6|334		s
						STATEMENT 1 ON LINE 888
		call od_print_ (one, fmteq, eq_print, s);

007135  aa  6 00044 3701 20	epp4 	pr6|36,*
007136  ia  4 00235 3521 00	epp2 	pr4|157		one
007137  aa  6 00626 2521 00	spri2	pr6|406
007140  ia  4 00636 3521 00	epp2 	pr4|414		fmteq
007141  aa  6 00630 2521 00	spri2	pr6|408
007142  aa  6 00524 3521 00	epp2 	pr6|340		eq_print
007143  aa  6 00632 2521 00	spri2	pr6|410
007144  aa  6 00516 3521 00	epp2 	pr6|334		s
007145  aa  6 00634 2521 00	spri2	pr6|412
007146  aa   770756 3520 04	epp2 	-3602,ic		000124 = 404000000021
007147  aa  6 00636 2521 00	spri2	pr6|414
007150  aa  6 00642 2521 00	spri2	pr6|418
007151  aa   770630 3520 04	epp2 	-3688,ic		000001 = 524000000025
007152  aa  6 00640 2521 00	spri2	pr6|416
007153  aa   770704 3520 04	epp2 	-3644,ic		000057 = 524000000001
007154  aa  6 00644 2521 00	spri2	pr6|420
007155  aa  6 00624 6211 00	eax1 	pr6|404
007156  aa   020000 4310 07	fld  	8192,dl
007157  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
007160  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 889
	     end;

						STATEMENT 1 ON LINE 892
next_seg:
	end;

007161  aa  6 00517 0541 00	aos  	pr6|335		i
007162  aa   776346 7100 04	tra  	-794,ic		005530
						STATEMENT 1 ON LINE 896
tm_loop:
	do j = 0 by 1 to 9 while (ptr_array (j) ^= null);

007163  aa  6 00520 4501 00	stz  	pr6|336		j
007164  aa  6 00520 2361 00	ldq  	pr6|336		j
007165  aa   000011 1160 07	cmpq 	9,dl
007166  aa   000023 6054 04	tpnz 	19,ic		007211
007167  aa   000001 7360 00	qls  	1
007170  aa  6 00752 7561 00	stq  	pr6|490
007171  aa  6 00314 2371 06	ldaq 	pr6|204,ql	ptr_array
007172  aa   771006 6770 04	eraq 	-3578,ic		000200 = 077777000043 000001000000
007173  aa  0 00460 3771 00	anaq 	pr0|304		= 077777000077 777777077077
007174  aa   000015 6000 04	tze  	13,ic		007211
						STATEMENT 1 ON LINE 898
	     call hcs_$terminate_noname (ptr_array (j), code);

007175  aa  6 00752 7271 00	lxl7 	pr6|490
007176  aa  6 00314 3521 17	epp2 	pr6|204,7		ptr_array
007177  aa  6 00574 2521 00	spri2	pr6|380
007200  aa  6 00162 3521 00	epp2 	pr6|114		code
007201  aa  6 00576 2521 00	spri2	pr6|382
007202  aa  6 00572 6211 00	eax1 	pr6|378
007203  aa   010000 4310 07	fld  	4096,dl
007204  aa  6 00044 3701 20	epp4 	pr6|36,*
007205  la  4 00714 3521 20	epp2 	pr4|460,*		hcs_$terminate_noname
007206  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 899
	end;

007207  aa  6 00520 0541 00	aos  	pr6|336		j
007210  aa   777754 7100 04	tra  	-20,ic		007164
						STATEMENT 1 ON LINE 901
	call od_print_ (m1, fmthdr, "End", erf_no);

007211  aa   770567 2350 04	lda  	-3721,ic		000000 = 105156144000
007212  aa  6 00752 7551 00	sta  	pr6|490
007213  aa  6 00044 3701 20	epp4 	pr6|36,*
007214  ia  4 00230 3521 00	epp2 	pr4|152		m1
007215  aa  6 00626 2521 00	spri2	pr6|406
007216  ia  4 00633 3521 00	epp2 	pr4|411		fmthdr
007217  aa  6 00630 2521 00	spri2	pr6|408
007220  aa  6 00752 3521 00	epp2 	pr6|490
007221  aa  6 00632 2521 00	spri2	pr6|410
007222  aa  6 00107 3521 00	epp2 	pr6|71		erf_no
007223  aa  6 00634 2521 00	spri2	pr6|412
007224  aa   770700 3520 04	epp2 	-3648,ic		000124 = 404000000021
007225  aa  6 00636 2521 00	spri2	pr6|414
007226  aa   770625 3520 04	epp2 	-3691,ic		000053 = 524000000013
007227  aa  6 00640 2521 00	spri2	pr6|416
007230  aa   770644 3520 04	epp2 	-3676,ic		000074 = 524000000003
007231  aa  6 00642 2521 00	spri2	pr6|418
007232  aa   770665 3520 04	epp2 	-3659,ic		000117 = 524000000022
007233  aa  6 00644 2521 00	spri2	pr6|420
007234  aa  6 00624 6211 00	eax1 	pr6|404
007235  aa   020000 4310 07	fld  	8192,dl
007236  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
007237  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 903
od_cleanup: entry;

007240  aa   000010 7100 04	tra  	8,ic		007250
ENTRY TO od_cleanup                                         STATEMENT 1 ON LINE 903
od_cleanup: entry;

007241  da     000315200000
007242  aa   001040 6270 00	eax7 	544
007243  aa  7 00034 3521 20	epp2 	pr7|28,*
007244  aa  2 01045 2721 00	tsp2 	pr2|549		ext_entry
007245  aa     000000000000
007246  aa     000000000000
007247  aa   771204 7000 04	tsx0 	-3452,ic		000453
						STATEMENT 1 ON LINE 904
	call od_print_ (m1, fmteject);

007250  aa  6 00044 3701 20	epp4 	pr6|36,*
007251  ia  4 00230 3521 00	epp2 	pr4|152		m1
007252  aa  6 00574 2521 00	spri2	pr6|380
007253  ia  4 00632 3521 00	epp2 	pr4|410		fmteject
007254  aa  6 00576 2521 00	spri2	pr6|382
007255  aa   770647 3520 04	epp2 	-3673,ic		000124 = 404000000021
007256  aa  6 00600 2521 00	spri2	pr6|384
007257  aa   770625 3520 04	epp2 	-3691,ic		000104 = 524000000002
007260  aa  6 00602 2521 00	spri2	pr6|386
007261  aa  6 00572 6211 00	eax1 	pr6|378
007262  aa   010000 4310 07	fld  	4096,dl
007263  la  4 00650 3521 20	epp2 	pr4|424,*		od_print_
007264  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 906
	call od_print_$op_finish;

007265  aa  6 00056 6211 00	eax1 	pr6|46
007266  aa   000000 4310 07	fld  	0,dl
007267  aa  6 00044 3701 20	epp4 	pr6|36,*
007270  la  4 00674 3521 20	epp2 	pr4|444,*		od_print_$op_finish
007271  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 907
	call ios_$detach (ioname, c0, c0, b72);

007272  aa  6 00044 3701 20	epp4 	pr6|36,*
007273  ia  4 00010 3521 00	epp2 	pr4|8		ioname
007274  aa  6 00626 2521 00	spri2	pr6|406
007275  aa  6 00517 3521 00	epp2 	pr6|335		c0
007276  aa  6 00630 2521 00	spri2	pr6|408
007277  aa  6 00632 2521 00	spri2	pr6|410
007300  aa  6 00514 3521 00	epp2 	pr6|332		b72
007301  aa  6 00634 2521 00	spri2	pr6|412
007302  aa   770556 3520 04	epp2 	-3730,ic		000060 = 524000000250
007303  aa  6 00636 2521 00	spri2	pr6|414
007304  aa   770575 3520 04	epp2 	-3715,ic		000101 = 524000000000
007305  aa  6 00640 2521 00	spri2	pr6|416
007306  aa  6 00642 2521 00	spri2	pr6|418
007307  aa   770547 3520 04	epp2 	-3737,ic		000056 = 514000000110
007310  aa  6 00644 2521 00	spri2	pr6|420
007311  aa  6 00624 6211 00	eax1 	pr6|404
007312  aa   020000 4310 07	fld  	8192,dl
007313  la  4 00670 3521 20	epp2 	pr4|440,*		ios_$detach
007314  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 908
	call ioa_ ("Finished dump");

007315  aa   770700 2350 04	lda  	-3648,ic		000215 = 106151156151
007316  aa   770700 2360 04	ldq  	-3648,ic		000216 = 163150145144
007317  aa  6 00572 7571 00	staq 	pr6|378
007320  aa   770677 2350 04	lda  	-3649,ic		000217 = 040144165155
007321  aa   160000 2360 03	ldq  	57344,du
007322  aa  6 00574 7571 00	staq 	pr6|380
007323  aa  6 00572 3521 00	epp2 	pr6|378
007324  aa  6 00610 2521 00	spri2	pr6|392
007325  aa   770502 3520 04	epp2 	-3774,ic		000027 = 524000000015
007326  aa  6 00612 2521 00	spri2	pr6|394
007327  aa  6 00606 6211 00	eax1 	pr6|390
007330  aa   004000 4310 07	fld  	2048,dl
007331  aa  6 00044 3701 20	epp4 	pr6|36,*
007332  la  4 00654 3521 20	epp2 	pr4|428,*		ioa_
007333  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 909
     end online_dump;

007334  aa  0 00631 7101 00	tra  	pr0|409		return
  END PROCEDURE od


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
