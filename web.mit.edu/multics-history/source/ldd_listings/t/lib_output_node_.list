	COMPILATION LISTING OF SEGMENT lib_output_node_
	Compiled by: Multics PL/I Compiler, Release 28d, of October 4, 1983
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 02/15/84  0857.6 mst Wed
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 lib_output_node_:	procedure;
       12 
       13      dcl						/*	parameters			*/
       14 	ASrequirements		bit(72) aligned,	/* requirements bits determine output fields.	*/
       15 	level			fixed bin(35),	/* indentation level at which node is to be	*/
       16 						/* printed in the listing. (In)		*/
       17 	Inode			fixed bin,	/* number of this node in the node list. (In)	*/
       18 	Pprev_parent		ptr,		/* ptr to parent node of previous node which 	*/
       19 						/*   was output. (In)			*/
       20 	name			char(32),		/* name to be used in the cross reference	*/
       21 						/* entry. (In)				*/
       22 	path			char(168) varying;	/* path name to be used in the cross reference	*/
       23 						/* entry. (In)				*/
       24 
       25      dcl	Iaccess_string (8)		fixed bin,	/* starting indices of 50-char chunks of access	*/
       26 	Iacl			fixed bin,	/* number of ACL entries which have been output.	*/
       27 						/*   string.				*/
       28 	Idir_iacl			fixed bin,	/* number of directory IACLe output.		*/
       29 	Iiacl			fixed bin,	/* number of segment   IACLe output.		*/
       30 	Iname			fixed bin,	/* number of names which have been output.	*/
       31 	Laccess_string		fixed bin,	/* length of non-blank portion of access string.	*/
       32 	Lacl			fixed bin,	/* length of ACL we are outputting.		*/
       33 	Lname			fixed bin,	/* length of the name field in the output, 	*/
       34 	Llevel			fixed bin,	/* length of level field (in characters).	*/
       35 						/* adjusted for indentation level.		*/
       36 	Nindent			fixed bin,	/* number of spaces that names at this level are	*/
       37 						/* to be indented.				*/
       38 	Sfield_blank		bit(1) aligned init ("0"b),
       39 						/* on if all node fields which can be put in 	*/
       40 						/* right-hand column have been output.		*/
       41 	Scleanup			bit(1) aligned init ("0"b),
       42 						/* on if entered at the $cleanup entry point.	*/
       43 	Sinfo			bit(1) aligned init ("0"b),
       44 						/* on if output to go to user's terminal.	*/
       45 	Snames_first		bit(1) aligned init ("0"b),
       46 						/* on if all names to be output first.		*/
       47 	1 Squota			aligned,		/* switches dealing with output of quota info.	*/
       48 	  2 master_dir		bit(1) unal,	/*   on if master directory to be output.	*/ 
       49 	 (2 quota,				/*   on if quota to be output.		*/
       50 	  2 quota_used,				/*   on if quota used to be output.		*/
       51 	  2 terminal_account,			/*   on if terminal account switch to be output.	*/
       52 	  2 Ninf,					/*   on if number of inf directories with quota...*/
       53 	  2 trp,					/*   on if time/record product to be output.	*/
       54 	  2 dttrp)		bit(1) unal,	/*   on if date-time time/record product to be out*/
       55 	Stpd			bit(1) aligned,	/* on if transparent paging dev switch  output	*/
       56 
       57 	access_string		char(300),	/* character representation of an access class.	*/
       58 	aim			char(100) varying,	/* character representation of AIM access switches*/
       59 	attributes		char(100) varying,	/* object segment attributes string.		*/
       60 	code			fixed bin(35),	/* a status code.				*/
       61 	dir			char(168) varying,	/* dir part of a node's path name.		*/
       62 	e			fixed bin,	/* entry point indicator for out_ch proc.	*/
       63 	ent			char(32) varying,	/* entry part of a node's path name.		*/
       64 	field			char(108),	/* character string output in right-hand column.	*/
       65 	flag			char(1) aligned,	/* library_cleanup entry deletion flag.		*/
       66 	i			fixed bin,	/* a string index.				*/
       67 	iacc			fixed bin,	/* do-group index used in processing access string*/
       68 	iacle			char(104),	/* character string containing IACL entries.	*/
       69 	level_suppressed		bit(1) aligned,	/* on if no level field to be put into output line*/
       70 	long			char(100),	/* an error message character string.		*/
       71 	lvname			char(32),		/* a logical volume name.			*/
       72 	lv_name			char(32) varying,	/* lvname without trailing blanks.		*/
       73 	mode			char(4),		/* a mode character string.			*/
       74 	pvname			char(32),		/* a physical volume name.			*/
       75 	pv_name			char(32) varying,	/* pvname without trailing blanks.		*/
       76 	rbs			char(12) varying,	/* a ring bracket character string.		*/
       77 	saved_Iname		fixed bin,	/* save value of Iname across a test.		*/
       78 	short			char(8),		/* an abbreviated error message char string.	*/
       79 	type			char(20);		/* a character node type.			*/
       80 
       81      dcl (addr, binary, dimension, index, length, max, min, null, search, string, substr, reverse, verify)
       82 				builtin;
       83 
       84      dcl						/*	entries				*/
       85 	convert_authorization_$to_string_short entry (bit(72) aligned, char(*), fixed bin(35)),
       86 	convert_binary_integer_$long_octal_string
       87 				entry (fixed bin(71)) returns (char(25) varying),
       88 	convert_binary_integer_$octal_string
       89 				entry (fixed bin(35)) returns (char(13) varying),
       90 	convert_status_code_	entry (fixed bin(35), char(8), char(100)),
       91          (cv_acl			variable,
       92 	cv_acl_,
       93 	cv_dir_acl_)		entry (ptr, fixed bin, char(*), fixed bin, bit(*)),
       94 	date_time_		entry (fixed bin(71) aligned, char(*) aligned),
       95 	date_time_$fstime		entry (bit(36), char(*) aligned),
       96 	ioa_$ioa_switch		entry options (variable),
       97 	lib_next_name_		entry (bit(72) aligned, ptr, fixed bin, ptr) returns (char(32)),
       98 	lib_node_path_		entry (ptr, char(168) varying, char(32) varying),
       99 	mdc_$find_lvname		entry (bit(36), char(*), fixed bin(35)),
      100 	mdc_$find_volname		entry (bit(36), char(*), char(*), fixed bin(35));
      101 
      102      dcl						/*	static variables			*/
      103 	FT (0:1)			char(5) int static init ("false", "true"),
      104 	1 null_name_descriptor	aligned int static options(constant),
      105 						/* a fake name descriptor which has no names.	*/
      106 	  2 length		fixed bin(17) unal init (5),
      107 	  2 version		fixed bin(17) unal init (1),
      108 	  2 T			fixed bin init (1),
      109 	  2 Pnext			ptr init (null),
      110 	  2 N			fixed bin init (0),	/* no names in name array.			*/
      111 	1 null_user_descriptor	aligned int static options(constant),
      112 						/* a fake user descriptor which has no info.	*/
      113 	  2 length		fixed bin(17) unal init (5),
      114 	  2 version		fixed bin(17) unal init (1),
      115 	  2 T			fixed bin init (6),
      116 	  2 Pnext			ptr init (null),
      117 	  2 L			fixed bin init (0),	/* no user information.			*/
      118 	status_data_$dir_mode (0:7)	char(4) varying aligned ext static,
      119 						/* array which maps directory mode into a 	*/
      120 						/* printable string.			*/
      121 	status_data_$mode (0:7)	char(4) varying aligned ext static,
      122 						/* array which maps segment/msf/archive mode into	*/
      123 						/* a printable string.			*/
      124 	sys_info$max_seg_size	fixed bin(35) ext static;
      125 
      126 
      127 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
      128 
      129 
      130 cleanup:	entry	(Pfcb, Pnode, ASrequirements, level, Pstarname, Inode, Pprev_parent);
      131 
      132 	Scleanup = "1"b;
      133 
      134 info:	entry	(Pfcb, Pnode, ASrequirements, level, Pstarname);
      135 
      136 	Sinfo = "1"b;				/* output directed to user's terminal.		*/
      137 
      138 map:	entry	(Pfcb, Pnode, ASrequirements, level, Pstarname);
      139 
      140 print:	entry	(Pfcb, Pnode, ASrequirements, level, Pstarname);
      141 						/* format for printing on the online printer.	*/
      142 
      143 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      144 	/*									*/
      145 	/* SET UP REQUIREMENTS BITS WHICH WILL DRIVE OUTPUT OF THE VARIOUS FIELDS:		*/
      146 	/* 1) And requirements bits from node with those in our argument list; put result in our	*/
      147 	/*    bit string we can overlay and modify as we like without harm.			*/
      148 	/* 2) Turn off selected output bits to suppress "standard" data (zero bit count, bit	*/
      149 	/*    count author = author, etc).						*/
      150 	/*									*/
      151 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      152 
      153 	Srequirements = node.Sreq & ASrequirements;	/* copy req bits to overlay with structure.	*/
      154 
      155 	if S.dtc | S.compiler_name | S.compiler_version | S.compiler_options | S.object_info then
      156 		  				/* Don't tell user an object segment isn't	*/
      157 	     S.not_ascii = "0"b;			/*   printable.				*/
      158 	if S.copy then				/* if user wants to know about the copy switch,	*/
      159 	     S.copy = node.Scopy;			/* but it is not on, then don't mention it.	*/
      160 	if S.safety then				/* do same for safety switch setting.		*/
      161 	     S.safety = node.Ssafety;
      162 	if S.records_used then			/* if user wants to know about records used and	*/
      163 	     if S.current_length then			/* about current length, and if these two values	*/
      164 		if node.records_used = node.current_length then
      165 		     S.records_used = "0"b;		/* are equal, then don't mention records used.	*/
      166 	if S.max_length then			/* output max length only if different from	*/
      167 	     if node.max_length = sys_info$max_seg_size then
      168 		S.max_length = "0"b;		/*  the maximum segment size.			*/
      169 	if S.quota then do;				/* Set output switches for quota elements.	*/
      170 	     string(Squota) = ""b;
      171 	     Squota.master_dir = node.Smaster_dir;
      172 	     if node.segment.quota_used ^= 0 | node.directory.quota_used ^= 0 then Squota.quota_used = "1"b;
      173 	     if node.segment.quota ^= 0 | node.directory.quota ^= 0 then do;
      174 		Squota.quota = "1"b;
      175 		Squota.terminal_account = node.Sterminal_account | node.Sterminal_account_dir;
      176 		if node.segment.Ninf_quota ^= 0 | node.directory.Ninf_quota ^= 0 then Squota.Ninf = "1"b;
      177 		Squota.trp = "1"b;
      178 		Squota.dttrp = "1"b;
      179 		end;
      180 	     end;
      181 	else string(Squota) = "0"b;
      182 	if S.bit_count_author then			/* suppress bit count author if same as author.	*/
      183 	     if S.author then
      184 		if node.bit_count_author = node.author then
      185 		     S.bit_count_author = "0"b;
      186 	if S.aim then				/* suppress AIM switch settings if not on.	*/
      187 	     S.aim = node.Saim_security_oos | node.Saim_audit | node.Saim_multiple_class;
      188 	if S.lvid then				/* suppress TPD switch if not on.		*/
      189 	     Stpd = node.Stpd;
      190 	else Stpd = "0"b;
      191 
      192 
      193 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      194 	/*									*/
      195 	/* ADDRESS DESCRIPTORS FOR VARIABLE-LENGTH or OPTIONAL INFORMATION CHAINED OFF THE NODE.	*/
      196 	/*									*/
      197 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      198 
      199 	if Svalid.names then			/* access the name descriptor, if it exists.	*/
      200 	     do PDnames = node.PD repeat Dnames.Pnext while (Dnames.T ^= Tnames);
      201 		end;
      202 	else
      203 	     PDnames = addr (null_name_descriptor);	/* otherwise, fake a null name descriptor.	*/
      204 	if S.dtc | S.compiler_name | S.compiler_version | S.compiler_options | S.object_info then
      205 						/* address object info descriptor, if need be.	*/
      206 	     do PDobj = node.PD repeat Dobj.Pnext while (Dobj.T ^= Tobj);
      207 		end;
      208 	if S.root_search_proc then			/* address the search_proc info descriptor.	*/
      209 	     do PDsearch_proc = node.PD repeat Dsearch_proc.Pnext while (Dsearch_proc.T ^= Tsearch_proc);
      210 		end;
      211 	if S.user then				/* address user info descriptor, if need be.	*/
      212 	     do PDuser = node.PD repeat Duser.Pnext while (Duser.T ^= Tuser);
      213 		end;
      214 	if S.kids_error then			/* address node array descriptor, if needed.	*/
      215 	     do PDnodes = node.PD repeat Dnodes.Pnext while (Dnodes.header.T ^= Tnodes);
      216 		end;
      217 	if S.acl then do;				/* address ACL descriptor.			*/
      218 	     if node.T = Tdirectory then do;
      219 		do PDdir_acl = node.PD repeat Ddir_acl.Pnext while (Ddir_acl.T ^= Tdir_acl);
      220 		     end;
      221 		PDacl = PDdir_acl;			/* cheat by treating directory ACL descriptor	*/
      222 		cv_acl = cv_dir_acl_;		/*   as segment ACL descriptor, and letting the	*/
      223 		end;				/*   conversion routine worry about differences.	*/
      224 	     else do;
      225 		do PDacl = node.PD repeat Dacl.Pnext while (Dacl.T ^= Tacl);
      226 		     end;
      227 		cv_acl = cv_acl_;
      228 		end;
      229 	     end;
      230 	if S.iacl then do;				/* address segment/directory IACL descriptors.	*/
      231 	     do PDiacl = node.PD repeat Diacl.Pnext while (Diacl.T ^= Tiacl);
      232 		end;
      233 	     do PDdir_iacl = node.PD repeat Ddir_iacl.Pnext while (Ddir_iacl.T ^= Tdir_iacl);
      234 		end;
      235 	     end;
      236 
      237 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      238 	/*									*/
      239 	/* DO COMPLICATED FIELD CONVERSIONS BEFORE STARTING THE OUTPUT.			*/
      240 	/*									*/
      241 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      242 
      243 	if S.mode then
      244 	     if node.T = Tdirectory then
      245 		mode = status_data_$dir_mode (binary (node.Smode, 3));
      246 	     else
      247 		mode = status_data_$mode (binary (node.Smode, 3));
      248 	if S.rb then do;
      249 	     rbs = cv_dec(binary(node.rb(1), 35)) || ", ";
      250 	     rbs = rbs || cv_dec(binary(node.rb(2), 35));
      251 	     if node.T ^= Tdirectory then do;
      252 		rbs = rbs || ", ";
      253 		rbs = rbs || cv_dec(binary(node.rb(3), 35));
      254 		end;
      255 	     end;
      256 	if S.access_class then do;
      257 		call convert_authorization_$to_string_short (node.access_class, access_string, code);
      258 		if code ^= 0 then do;
      259 bad_access_class:        call convert_status_code_ (code, short, long);
      260 		     access_string = "Error -  " || long;
      261 		     Laccess_string = length(access_string) - verify (reverse (access_string), " ") + 1;
      262 		     end;
      263 		if access_string = "" then S.access_class = "0"b;
      264 		else do;
      265 		     Laccess_string = index(access_string," ");
      266 split_access_class:	     Iaccess_string(1) = 1;
      267 		     do iacc = 1 to dimension(Iaccess_string,1)-1;
      268 			if Iaccess_string(iacc) > Laccess_string then
      269 			     Iaccess_string(iacc+1) = Laccess_string+1;
      270 			else if Laccess_string - Iaccess_string(iacc) + 1 <= 50 then
      271 			     Iaccess_string(iacc+1) = Laccess_string+1;
      272 			else Iaccess_string(iacc+1) = Iaccess_string(iacc) + 52 -
      273 			     search (reverse (substr (access_string, Iaccess_string(iacc), 51)), " ,");
      274 			end;
      275 		     end;
      276 	     end;
      277 	if S.aim then do;
      278 	     aim = "";
      279 	     if node.Saim_audit then aim = "audit";
      280 	     if node.Saim_multiple_class then do;
      281 		if length(aim) ^= 0 then aim = aim || ", ";
      282 		aim = aim || "multiple-class";
      283 		end;
      284 	     if node.Saim_security_oos then do;
      285 		if length(aim) ^= 0 then aim = aim || ", ";
      286 		aim = aim || "out-of-service";
      287 		end;
      288 	     end;
      289 
      290 	if S.object_info then do;
      291 	     attributes = "";
      292 	     if Dobj.info.format.bound 	then attributes = attributes || "bound object";
      293 	     if Dobj.info.format.old_format 	then do;
      294 		if length (attributes) > 0 then attributes = attributes || ", ";
      295 		attributes = attributes || "old format";
      296 		end;
      297 	     if Dobj.info.format.standard 	then;
      298 	     else do;
      299 		if length (attributes) > 0 then attributes = attributes || ", ";
      300 		attributes = attributes || "non-standard format";
      301 		end;
      302 	     if Dobj.info.format.procedure	then;
      303 	     else do;
      304 		if length (attributes) > 0 then attributes = attributes || ", ";
      305 		attributes = attributes || "data";
      306 		end;
      307 	     if Dobj.info.format.relocatable 	then;
      308 	     else do;
      309 		if length (attributes) > 0 then attributes = attributes || ", ";
      310 		attributes = attributes || "non-relocatable";
      311 		end;
      312 	     if Dobj.info.format.gate 	then do;
      313 		if length (attributes) > 0 then attributes = attributes || ", ";
      314 		attributes = attributes || "gate (" ||
      315 		     convert_binary_integer_$octal_string (Dobj.info.entry_bound) || ")";
      316 		end;
      317 	     if Dobj.info.format.separate_static then do;
      318 		if length (attributes) > 0 then attributes = attributes || ", ";
      319 		attributes = attributes || "separate static";
      320 		end;
      321 	     if Dobj.info.format.links_in_text	then do;
      322 		if length (attributes) > 0 then attributes = attributes || ", ";
      323 		attributes = attributes || "links in text";
      324 		end;
      325 	     if length (attributes) = 0 then attributes = "standard object";
      326 	     end;
      327 	if S.pvid then do;
      328 	     S.pvid = "0"b;				/* NEVER OUTPUT THE PVNAME!			*/
      329 	     call mdc_$find_volname (node.pvid, pvname, lvname, 0);
      330 	     pv_name = substr(pvname,1, length(pvname) + 1 - verify(reverse(pvname)," "));
      331 	     lv_name = substr(lvname,1, length(lvname) + 1 - verify(reverse(lvname)," "));
      332 	     end;
      333 	else if S.lvid then do;
      334 	     call mdc_$find_lvname (node.lvid, lvname, 0);
      335 	     lv_name = substr(lvname,1, length(lvname) + 1 - verify(reverse(lvname)," "));
      336 	     end;
      337 
      338 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      339 	/*									*/
      340 	/* OUTPUT THE LINES DESCRIBING THIS NODE WHICH ARE REQUIRED AND HAVE NOT BEEN SUPPRESSED.	*/
      341 	/*									*/
      342 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      343 
      344 	call set_field_widths;			/* set length of level, indentation, name fields	*/
      345 	if S.new_line then				/* <NL> required at start of entry?		*/
      346 	     call out_nl;				/* put one into output.			*/
      347 
      348 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      349 	/*									*/
      350 	/* For library_cleanup, output directory pathname, followed by a list of nodes, with list	*/
      351 	/* entries numbered consecutively.  Flag entries to be deleted with *.		*/
      352 	/*									*/
      353 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      354 
      355 	if Scleanup then do;
      356 	     if S.pathname then do;
      357 		S.pathname = "0"b;
      358 		if Pprev_parent ^= null then
      359 		     if node.Pparent = Pprev_parent then;
      360 		     else do;
      361 CLEANUP_PATH:		call lib_node_path_ (Pnode, dir, ent);
      362 			if node.Pparent = null then
      363 			     if dir = ">" then
      364 				dir = dir || ent;
      365 			     else dir = dir || ">" || ent;
      366 			call out_pn (dir);
      367 			if S.new_line then
      368 			     call out_nl;
      369 			end;
      370 		else go to CLEANUP_PATH;
      371 		end;
      372 	     if Svalid.delete then
      373 		flag = "*";
      374 	     else flag = " ";
      375 	     if S.type then do;
      376 		S.type = "0"b;
      377 		type = brief_node_type (node.T);
      378 		end;
      379 	     else type = "";
      380 	     call out_cln (flag, Inode, type);
      381 	     end;
      382 
      383 
      384 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      385 	/*									*/
      386 	/* If short terminal length requires that all names be output first, followed by other	*/
      387 	/* fields, output the names, then make the <name> field zero length in lines which follow.*/
      388 	/*									*/
      389 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      390 
      391 	if Snames_first then do;
      392 	     ent = lib_next_name_ (Srequirements, PDnames, Iname, Pstarname);
      393 	     do while (ent ^= "");
      394 		call out_name (ent, "", "");
      395 		ent = lib_next_name_ (Srequirements, PDnames, Iname, Pstarname);
      396 		end;
      397 	     Lname = 0;
      398 	     end;
      399 
      400 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      401 	/*									*/
      402 	/*	LINE:<lv> <name>	<type>          in: <path-name>			*/
      403 	/*									*/
      404 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      405 
      406 	if Sinfo then do;				/* Special case short terminals.		*/
      407 	     if S.type then do;
      408 		type = brief_node_type(node.T);
      409 		call out_ch2 ("              type:", type);
      410 		end;
      411 	     if S.pathname & (level <= 1) then do;
      412 		call lib_node_path_ (Pnode, dir, ent);
      413 		if node.Pparent = null then do;
      414 		     type = "              path:";
      415 		     if dir = ">" then
      416 			dir = dir || ent;
      417 		     else dir = dir || ">" || ent;
      418 		     end;
      419 		else type = "              path:";
      420 		saved_Iname = Iname;
      421 		ent = lib_next_name_ (Srequirements, PDnames, Iname, Pstarname);
      422 		Iname = saved_Iname;
      423 		if ent = "" then do;
      424 		     if length (dir) <= 16 then do;
      425 			dir = dir || (19)" ";
      426 			dir = substr(dir,1,19);
      427 			dir = dir || get_field();
      428 			i = length(dir) + 1 - verify(reverse(dir), " ");
      429 			dir = substr(dir,1,i);
      430 			end;
      431 		     else do;
      432 			Lname = Lname - 40;
      433 			Sinfo = "0"b;
      434 			end;
      435 		     call out_vc2 (type, dir);
      436 		     S.pathname = "0"b;
      437 		     end;
      438 		else if Nindent+Llevel+Lname+21+length(dir) <= fcb.line_length then do;
      439 		     call out_vc2 (type, dir);
      440 		     S.pathname = "0"b;
      441 		     end;
      442 		end;
      443 	      end;
      444 
      445 
      446 	else if S.type | S.pathname then do;
      447 	     if S.type then
      448 		type = brief_node_type(node.T);
      449 	     else
      450 		type = "";
      451 	     if level > 1 then do;
      452 		dir = (19)" " || get_field();
      453 		i = length(dir) + 1 - verify(reverse(dir), " ");
      454 		dir = substr(dir,1,i);
      455 		end;
      456 	     else if S.pathname then do;
      457 		call lib_node_path_ (Pnode, dir, ent);
      458 		if node.Pparent = null then do;	/* special case a library root node.		*/
      459 		     substr (type, 15, 5) = "path:";
      460 		     if dir = ">" then
      461 			dir = dir || ent;
      462 		     else dir = dir || ">" || ent;
      463 		     end;
      464 		else substr (type, 17, 3) = "in:";
      465 		if length (dir) <= 16 then do;
      466 		     dir = dir || (19)" ";
      467 		     dir = substr(dir,1,19);
      468 		     dir = dir || get_field();
      469 		     i = length(dir) + 1 - verify(reverse(dir), " ");
      470 		     dir = substr(dir,1,i);
      471 		     end;
      472 		end;
      473 	     else
      474 		dir = "";
      475 	     call out_vc2 (type, dir);
      476 	     S.pathname = "0"b;
      477 	     end;
      478 
      479 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      480 	/*									*/
      481 	/*	LINE:	<name>	contents modified:	<date>		<field>		*/
      482 	/*	LINE:	<name>	entry modified:	<date>		<field>		*/
      483 	/*	LINE:	<name>	date used:	<date>		<field>		*/
      484 	/*	LINE:	<name>	date dumped:	<date>		<field>		*/
      485 	/*	LINE:	<name>	date compiled:	<date>		<field>		*/
      486 	/*									*/
      487 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      488 
      489 	if node.T = Tarchive_comp then if S.dtem then do;
      490 	     S.dtem = "0"b;
      491 	     call out_ch3 (" component updated:", cv_date(node.dtem), get_field());
      492 	     end;
      493 	if S.dtm then do;
      494 	     S.dtm = "0"b;
      495 	     call out_ch3 (" contents modified:", cv_date(node.dtm), get_field());
      496 	     end;
      497 	if S.dtem then do;
      498 	     S.dtem = "0"b;
      499 	     call out_ch3 ("    entry modified:", cv_date(node.dtem), get_field());
      500 	     end;
      501 	if S.dtu then do;
      502 	     S.dtu = "0"b;
      503 	     call out_ch3 ("         date used:", cv_date(node.dtu), get_field());
      504 	     end;
      505 	if S.dtd then do;
      506 	     S.dtd = "0"b;
      507 	     call out_ch3 ("       date dumped:", cv_date(node.dtd), get_field());
      508 	     end;
      509 	if S.dtc then do;
      510 	     S.dtc = "0"b;
      511 	     if Dobj.info.format.bound then
      512 		call out_ch3 ("        date bound:", cv_long_date(Dobj.info.compile_time), get_field());
      513 	     else call out_ch3 ("     date compiled:", cv_long_date(Dobj.info.compile_time), get_field());
      514 	     end;
      515 
      516 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      517 	/*									*/
      518 	/*	LINE:	<name>	msf indicator:	<decimal number>	<field>		*/
      519 	/*	LINE:	<name>	bit count:	<decimal number>	<field>		*/
      520 	/*	LINE:	<name>	length:		<decimal number>	<field>		*/
      521 	/*	LINE:	<name>	records used:	<decimal number>	<field>		*/
      522 	/*	LINE:	<name>	max length:	<decimal number>	<field>		*/
      523 	/*	LINE:	<name>	offset:		<octal number>	<field>		*/
      524 	/* 	LINE:	<name>	entry bound:	<octal number>	<field>		*/
      525 	/*									*/
      526 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      527 
      528 	if S.msf_indicator then do;
      529 	     S.msf_indicator = "0"b;
      530 	     call out_ch3 ("     msf indicator:", cv_dec(node.msf_indicator), get_field());
      531 	     end;
      532 	if S.bit_count then do;
      533 	     S.bit_count = "0"b;
      534 	     call out_ch3 ("         bit count:", cv_dec(node.bit_count), get_field());
      535 	     end;
      536 	if S.current_length then do;
      537 	     S.current_length = "0"b;
      538 	     call out_ch3 ("            length:", cv_dec(node.current_length), get_field());
      539 	     end;
      540 	if S.records_used then do;
      541 	     S.records_used = "0"b;
      542 	     call out_ch3 ("      records used:", cv_dec(node.records_used), get_field());
      543 	     end;
      544 	if S.max_length then do;
      545 	     S.max_length = "0"b;
      546 	     call out_ch3 ("        max length:", cv_dec(node.max_length), get_field());
      547 	     end;
      548 	if S.offset then do;
      549 	     S.offset = "0"b;
      550 	     call out_ch3 ("            offset:", convert_binary_integer_$octal_string(node.offset),
      551 		get_field());
      552 	     end;
      553 	if S.entry_bound then do;
      554 	     S.entry_bound = "0"b;
      555 	     call out_ch3 ("       entry bound:", convert_binary_integer_$octal_string(node.entry_bound),
      556 		get_field());
      557 	     end;
      558 
      559 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      560 	/*									*/
      561 	/*	LINE:	<name>	author:		<author>		<field>		*/
      562 	/*	LINE:	<name>	bit count author:	<bit count author>	<field>		*/
      563 	/*	LINE:	<name>	logical volume:	<lvname>		<field>		*/
      564 	/*	LINE:	<name>	physical volume:	<pvname>		<field>		*/
      565 	/*	LINE:	<name>	never on paging dv:	true		<field>		*/
      566 	/*	LINE:	<name>	master  directory:	true		<field>		*/
      567 	/*									*/
      568 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      569 
      570 	if S.author then if length(node.author) <= 16 then do;
      571 	     S.author = "0"b;
      572 	     call out_vc3 ("            author:", node.author, get_field());
      573 	     end;
      574 	if S.bit_count_author then if length(node.bit_count_author) <= 16 then do;
      575 	     S.bit_count_author = "0"b;
      576 	     call out_vc3 ("  bit count author:", node.bit_count_author, get_field());
      577 	     end;
      578 	if S.lvid then if length(lv_name) <= 16 then do;
      579 	     S.lvid = "0"b;
      580 	     if node.T = Tdirectory | node.T = Tmsf then
      581 		call out_vc3 ("  sons log. volume:", lv_name, get_field());
      582 	     else call out_vc3 ("    logical volume:", lv_name, get_field());
      583 	     end;
      584 	if S.pvid then if length (pv_name) <= 16 then do;
      585 	     S.pvid = "0"b;
      586 	     call out_vc3 ("   physical volume:", pv_name, get_field());
      587 	     end;
      588 	if Stpd then do;
      589 	     Stpd = "0"b;
      590 	     call out_ch3 ("never on paging dv:", "true", get_field());
      591 	     end;
      592 	if Squota.master_dir then do;
      593 	     Squota.master_dir = "0"b;
      594 	     call out_ch3 ("  master directory:", "true", get_field());
      595 	     end;
      596 
      597 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      598 	/*									*/
      599 	/*	LINE:	<name>	access class:	<class string>	<field>		*/
      600 	/*	LINE:	<name>	AIM attributes:	<aim attributes>	<field>		*/
      601 	/*	LINE:	<name>	mode:		<mode string>	<field>		*/
      602 	/*	LINE:	<name>	ring brackets:	<ring bracket>	<field>		*/
      603 	/*	LINE:	<name>	safety switch:	on		<field>		*/
      604 	/*									*/
      605 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      606 
      607 	if S.access_class then if Laccess_string <= 16 then do;
      608 	     S.access_class = "0"b;
      609 	     call out_ch3 ("      access class:", substr(access_string,1,Laccess_string), get_field());
      610 	     end;
      611 	if S.aim then if length(aim) <= 16 then do;
      612 	     S.aim = "0"b;
      613 	     call out_vc3 ("    AIM attributes:", aim, get_field());
      614 	     end;
      615 	if S.mode then do;
      616 	     S.mode = "0"b;
      617 	     call out_ch3 ("              mode:", mode, get_field());
      618 	     end;
      619 	if S.rb then do;
      620 	     S.rb = "0"b;
      621 	     call out_vc3 ("     ring brackets:", rbs, get_field());
      622 	     end;
      623 	if S.safety then do;
      624 	     S.safety = "0"b;
      625 	     call out_ch3 ("     safety switch:", "on", get_field());
      626 	     end;
      627 
      628 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      629 	/*									*/
      630 	/*	LINE:	<name>	copy switch:	on		<field>		*/
      631 	/*	LINE:	<name>	unique id:	<octal number>	<field>		*/
      632 	/*	LINE:	<name>	<user label>:	<user info>	<field>		*/
      633 	/*	LINE:	<name>	object attributes:	<object attributes>	<field>		*/
      634 	/*	LINE:	<name>	printable:	<yes-or-no>	<field>		*/
      635 	/*	LINE:	<name>	compiler:		<compiler-name>	<field>		*/
      636 	/*									*/
      637 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      638 
      639 	if S.copy then do;
      640 	     S.copy = "0"b;
      641 	     call out_ch3 ("       copy switch:", "on", get_field());
      642 	     end;
      643 	if S.unique_id then do;
      644 	     S.unique_id = "0"b;
      645 	     call out_ch3 ("         unique id:",
      646 		convert_binary_integer_$octal_string(binary (node.unique_id, 36)), get_field());
      647 	     end;
      648 	if S.user then if Duser.L <= 16 then do;
      649 	     S.user = "0"b;
      650 	     call out_ch3 (Duser.label || ":", Duser.info, get_field());
      651 	     end;
      652 	if S.object_info then if length (attributes) <= 16 then do;
      653 	     S.object_info = "0"b;
      654 	     call out_vc3 (" object attributes:", attributes, get_field());
      655 	     end;
      656 	if S.not_ascii then do;
      657 	     S.not_ascii = "0"b;
      658 	     call out_ch3 ("         printable:", "no", get_field());
      659 	     end;
      660 	if S.compiler_name then do;
      661 	     S.compiler_name = "0"b;
      662 	     call out_ch3 ("          compiler:", Dobj.info.compiler, get_field());
      663 	     end;
      664 
      665 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      666 	/*									*/
      667 	/* FINISH OUTPUTTING SHORT DATA BEFORE BEGINNING LONG DATA.				*/
      668 	/* 1) Output remaining ACL entries, unless on short terminal or in 1-datum per line mode.	*/
      669 	/* 2) Output remaining names, unless on short terminal.				*/
      670 	/*									*/
      671 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      672 
      673 	if S.acl then
      674 	     if Snames_first | Sinfo then;
      675 	     else do;
      676 		field = get_acl();
      677 		do while (field ^= "");
      678 		     call out_ch3 ("", "", field);
      679 		     field = get_acl();
      680 		     end;
      681 		end;
      682 	if ^Snames_first then if Sinfo then do;		/* For short terminals, print rest of names now.	*/
      683 	     ent = lib_next_name_ (Srequirements, PDnames, Iname, Pstarname);
      684 	     do while (ent ^= "");
      685 		call out_name (ent, "", "");
      686 		ent = lib_next_name_ (Srequirements, PDnames, Iname, Pstarname);
      687 		end;
      688 	     Lname = Lname - 40;
      689 	     end;
      690 
      691 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      692 	/*									*/
      693 	/* OUTPUT ITEMS LONGER THAN A SINGLE COLUMN					*/
      694 	/*									*/
      695 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      696 
      697 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      698 	/*									*/
      699 	/* 	LINE:	<name>	quota:		<quota>		<field>		*/
      700 	/*	LINE:	<name>	quota used:	<quota used>	<field>		*/
      701 	/*	LINE:	<name>	time * records(TR):	<time/record prod.>	<field>		*/
      702 	/*	LINE:	<name>	date TR modified:	<date trp modified>	<field>		*/
      703 	/*	LINE:	<name>	terminal account:	true		<field>		*/
      704 	/*	LINE:	<name>	inf. term. accts.:	<number of dirs>	<field>		*/
      705 	/*									*/
      706 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      707 
      708 	if Squota.quota then do;
      709 	     Squota.quota = "0"b;
      710 	     call out_ch3 ("             quota:",     cv_dec(node.segment.quota),
      711 		         "         dir quota:  " || cv_dec(node.directory.quota));
      712 	     end;
      713 	if Squota.quota_used then do;
      714 	     Squota.quota_used = "0"b;
      715 	     call out_ch3 ("        quota used:",     cv_dec(node.segment.quota_used),
      716 		         "    dir quota used:  " || cv_dec(node.directory.quota_used));
      717 	     end;
      718 	if Squota.trp then if length(cv_long_dec(node.segment.trp)) <= 16 then do;
      719 	     Squota.trp = "0"b;
      720 	     call out_ch3 ("time * records(TR):",     cv_long_dec(node.segment.trp), 
      721 		         "            dir TR:  " || cv_long_dec(node.directory.trp));
      722 	     end;
      723 	if Squota.dttrp then do;
      724 	     Squota.dttrp = "0"b;
      725 	     call out_ch3 ("       TR modified:",     cv_date(node.segment.dttrp),
      726 		         "   dir TR modified:  " || cv_date(node.directory.dttrp));
      727 	     end;
      728 	if Squota.terminal_account then do;
      729 	     Squota.terminal_account = "0"b;
      730 	     call out_ch3 (" terminal acct(TA):",     FT(binary(node.Sterminal_account,1)),
      731 		         "            dir TA:  " || FT(binary(node.Sterminal_account_dir,1)));
      732 	     end;
      733 	if Squota.Ninf then do;
      734 	     Squota.Ninf = "0"b;
      735 	     call out_ch3 ("     # inferior TA:",     cv_dec(node.segment.Ninf_quota),
      736 		         " dir # inferior TA:  " || cv_dec(node.directory.Ninf_quota));
      737 	     end;
      738 
      739 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      740 	/*									*/
      741 	/*	LINE:	<name>	time * records(TR):	<time/record prod.>	<field>		*/
      742 	/*	LINE:	<name>	           path:	<path>				*/
      743 	/*	LINE:	<name>	author:		<author>				*/
      744 	/*	LINE:	<name>	bit count author:	<bit count author>			*/
      745 	/*	LINE:	<name>	device:		<device name>			*/
      746 	/*	LINE:	<name>	compiler version:	<compiler version string>		*/
      747 	/*	LINE:	<name>	compiler comment:	<compiler comment string>		*/
      748 	/*	LINE:	<name>	search procedure:	<root search proc>			*/
      749 	/*									*/
      750 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      751 
      752 	if Squota.trp then do;
      753 	     Squota.trp = "0"b;
      754 	     call out_ch2 ("time * records(TR):", cv_long_dec(node.segment.trp));
      755 	     call out_ch2 ("	  dir TR:", cv_long_dec(node.directory.trp));
      756 	     end;
      757 	if S.pathname then if (level <= 1) then
      758 	     call out_vc2 (type, dir);
      759 	if S.author then do;
      760 	     S.author = "0"b;
      761 	     call out_vc2 ("            author:", node.author);
      762 	     end;
      763 	if S.bit_count_author then do;
      764 	     S.bit_count_author = "0"b;
      765 	     call out_vc2 ("  bit count author:", node.bit_count_author);
      766 	     end;
      767 	if S.lvid then do;
      768 	     S.lvid = "0"b;
      769 	     if node.T = Tdirectory | node.T = Tmsf then
      770 		call out_vc2 ("  sons log. volume:", lv_name);
      771 	     else call out_vc2 ("    logical volume:", lv_name);
      772 	     end;
      773 	if S.pvid then do;
      774 	     S.pvid = "0"b;
      775 	     call out_vc2 ("   physical volume:", pv_name);
      776 	     end;
      777 	if S.compiler_version then
      778 	     if length (Dobj.cversion) > 0 then
      779 		call out_vc2 ("  compiler version:", Dobj.cversion);
      780 	if S.compiler_options then
      781 	     if length (Dobj.comment) > 0 then
      782 		call out_vc2 ("  compiler comment:", Dobj.comment);
      783 	if S.root_search_proc then
      784 	     call out_vc2 ("  search procedure:", Dsearch_proc.search_proc);
      785 
      786 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      787 	/*									*/
      788 	/*	LINE:	<name>	object attributes:	<object attributes>			*/
      789 	/*	LINE:	<name>	<user label>:	<user information>			*/
      790 	/*									*/
      791 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      792 
      793 	if S.object_info then
      794 	     call out_vc2 (" object attributes:", attributes);
      795 	if S.user then
      796 	     call out_ch2 (Duser.label || ":", Duser.info);
      797 
      798 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      799 	/*									*/
      800 	/*	LINE:	<name>	links to:		<link path name>			*/
      801 	/*	LINE:	<name>	error:		<error message>			*/
      802 	/*	LINE:	<name>	access class:	<class string>			*/
      803 	/*	LINE:	<name>	AIM attributes:	<aim attributes>			*/
      804 	/*									*/
      805 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      806 
      807 	if S.link_target then
      808 	     call out_vc2 ("          links to:", link_node.link_target);
      809 	if S.kids_error then do;
      810 	     call convert_status_code_ (Dnodes.C, short, long);
      811 	     call out_ch2 ("             error:", long);
      812 	     end;
      813 	if S.access_class then do;
      814 	     S.access_class = "0"b;
      815 	     call out_ch2 ("      access class:",
      816 			substr(access_string, Iaccess_string(1), Iaccess_string(2)-Iaccess_string(1)));
      817 	     do iacc = 2 to dimension(Iaccess_string,1)-1 while (Iaccess_string(iacc) <= Laccess_string);
      818 		call out_ch2 ("",
      819 		     substr(access_string, Iaccess_string(iacc), Iaccess_string(iacc+1)-Iaccess_string(iacc)));
      820 		end;
      821 	     end;
      822 	if S.aim then do;
      823 	     S.aim = "0"b;
      824 	     call out_vc2 ("    AIM attributes:", aim);
      825 	     end;
      826 
      827 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      828 	/*									*/
      829 	/* Finish printing any names that haven't been printed yet.				*/
      830 	/*									*/
      831 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      832 
      833 	ent = lib_next_name_ (Srequirements, PDnames, Iname, Pstarname);
      834 	do while (ent ^= "");
      835 	     call out_name (ent, "", "");
      836 	     ent = lib_next_name_ (Srequirements, PDnames, Iname, Pstarname);
      837 	     end;
      838 
      839 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      840 	/*									*/
      841 	/* All names guaranteed printed, so we can force short terminal format.		*/
      842 	/*									*/
      843 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      844 
      845 	if ^Snames_first & Sinfo then Lname = Lname - 40;
      846 
      847 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      848 	/*									*/
      849 	/* Print ACL if hasn't been printed because of short terminal lengths.		*/
      850 	/*									*/
      851 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      852 
      853 	if S.acl then do;
      854 	     call out_ch2 ("               acl:", substr (get_acl(), 7));
      855 	     field = get_acl();
      856 	     do while (field ^= "");
      857 		call out_ch2 ("", substr(field, 7));
      858 		field = get_acl();
      859 		end;
      860 	     end;
      861 
      862 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      863 	/*									*/
      864 	/* Print Segment and Directory IACLs.						*/
      865 	/*									*/
      866 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      867 
      868 	if S.iacl then do;
      869 	     iacle = get_iacl();
      870 	     if iacle = "" then;
      871 	     else do;
      872 		call out_ch2 ("      segment IACL:", iacle);
      873 		iacle = get_iacl();
      874 		do while (iacle ^= "");
      875 		     call out_ch2 ("", iacle);
      876 		     iacle = get_iacl();
      877 		     end;
      878 		end;
      879 	     iacle = get_dir_iacl();
      880 	     if iacle = "" then;
      881 	     else do;
      882 		call out_ch2 ("    directory IACL:", iacle);
      883 		iacle = get_dir_iacl();
      884 		do while (iacle ^= "");
      885 		     call out_ch2 ("" , iacle);
      886 		     iacle = get_dir_iacl();
      887 		     end;
      888 		end;
      889 	     end;
      890 	return;
      891 
      892 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
      893 
      894 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
      895 
      896 
      897 cross_reference:	entry	(Pfcb, Pnode, ASrequirements, level, name, path);
      898 
      899 
      900 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      901 	/*									*/
      902 	/*	LINE:	<name>	<date>    see:	<parent-path>			*/
      903 	/*									*/
      904 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
      905 
      906 	Srequirements = node.Sreq & ASrequirements;	/* copy user-specified requirements to aligned	*/
      907 						/* bit string we can overlay, modifying 	*/
      908 						/* requirements according to which node fields	*/
      909 						/* are valid.				*/
      910 	call set_field_widths;			/* set length of level, indentaiton, name fields.	*/
      911 	if S.new_line then				/* <NL> req'd at start of entry?		*/
      912 	     call out_nl;				/* put one into the output.			*/
      913 	if S.user then				/* address user info descriptor, if need be.	*/
      914 	     do PDuser = node.PD repeat Duser.Pnext while (Duser.T ^= Tuser);
      915 		end;
      916 	else PDuser = addr(null_user_descriptor);
      917 	if S.user & Duser.L <= 14 then		/* if user info available, put it in cross-ref.	*/
      918 	     type = Duser.info;
      919 	else if node.T = Tarchive_comp then		/* for archive component, return dtem		*/
      920 	     if S.dtem then
      921 		type = cv_date (node.dtem);
      922 	     else if S.dtm then			/* or dtm, if dtem not requested.		*/
      923 		type = cv_date(node.dtm);
      924 	     else if S.type then			/* or type, if dates not requested.		*/
      925 		type = brief_node_type (node.T);
      926 	     else type = "";
      927 	else if node.T = Tlink then			/* for link, return dtem			*/
      928 	     if S.dtem then
      929 		type = cv_date (node.dtem);
      930 	     else if S.type then			/* or type, if dtem not requested.		*/
      931 		type = brief_node_type (node.T);
      932 	     else
      933 		type = "";
      934 	else if S.dtm then				/* for everything else, return dtm		*/
      935 	     type = cv_date (node.dtm);
      936 	else if S.type then				/* or type.				*/
      937 	     type = brief_node_type (node.T);
      938 	else
      939 	     type = "";
      940 	substr (type, 15, 5) = " see:";		/* put path header into type string.		*/
      941 	ent = name;
      942 	call out_name (ent, type, path);		/* output the cross-reference entry.		*/
      943 	return;
      944 
      945 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
      946 
      947 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
      948 
      949 
      950 cv_date:	procedure	(date)				/* Internal procedure which converts a file	*/
      951 	returns (char(16));				/* system date into a character string.		*/
      952 
      953      dcl	date			bit(36),		/* date to be converted.			*/
      954 	long_date			fixed bin(71) aligned,
      955 	date_string		char(16) aligned;	/* a date character string.			*/
      956 
      957 	call date_time_$fstime (date, date_string);
      958 
      959 	return (date_string);
      960 
      961 cv_long_date:	entry (long_date)
      962 		returns (char(16));
      963 
      964 	call date_time_ (long_date, date_string);
      965 
      966 	return (date_string);
      967 
      968 	end cv_date;
      969 
      970 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
      971 
      972 cv_dec:	procedure	(number)				/* Internal procedure to convert binary numbers	*/
      973 	returns	(char(13) varying);			/* to decimal character strings.		*/
      974 
      975      dcl	number			fixed bin(35),	/* number to be converted. (In)		*/
      976 	number_string		picture "------------9",
      977 	Ifirst_significant_digit	fixed bin;	/* index of first significant digit in number_st.	*/
      978 						/* form of converted number.			*/
      979 
      980 	number_string = number;
      981 	Ifirst_significant_digit = verify (number_string, " ");
      982 	return (substr (number_string, Ifirst_significant_digit));
      983 
      984 	end cv_dec;
      985 
      986 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
      987 
      988 
      989 
      990 cv_long_dec:	procedure (number)			/* Internal procedure to convert long binary	*/
      991 		returns	(char(23) varying);		/* to decimal character strings.		*/
      992 
      993      dcl	number			fixed bin(71),	/* number to be converted. (In)		*/
      994 	number_string		pic "----------------------9",
      995 	Ifirst_significant_digit	fixed bin;
      996 
      997 	number_string = number;
      998 	Ifirst_significant_digit = verify (number_string, " ");
      999 	return (substr (number_string, Ifirst_significant_digit));
     1000 
     1001 	end cv_long_dec;
     1002 
     1003 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     1004 
     1005 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     1006 
     1007 
     1008 get_acl:		procedure returns (char(106));	/* Internal procedure which returns the next	*/
     1009 						/* ACL entry, formatted for printed.		*/
     1010 
     1011      dcl	field			char(108);	/* temporary in which ACLe is formatted.	*/
     1012 	Iacl = Iacl + 1;				/* get index of next ACLe.			*/
     1013 	if Iacl > Dacl.N then do;			/* if there are no more ACLe's, return blank field*/
     1014 	     S.acl = "0"b;
     1015 	     if Iacl = 1 then			/* unless there is an error code.		*/
     1016 		if Dacl.C ^= 0 then do;
     1017 		     call convert_status_code_ (Dacl.C, short, long);
     1018 		     return ("acl:  " || long);
     1019 		     end;
     1020 	     return ("");
     1021 	     end;
     1022 	call cv_acl (addr(Dacl.acls), Iacl, field, 0, "100"b);
     1023 	if Iacl = 1 then return ("acl:  " || field);
     1024 	else return ("      " || field);		/* format/return the ACLe.			*/
     1025 
     1026 	end get_acl;
     1027 
     1028 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     1029 
     1030 
     1031 get_dir_iacl:	procedure returns(char(109));		/* Internal procedure to format segment IACLs.	*/
     1032 
     1033      dcl	iacle			char(42),
     1034 	i			fixed bin,	/* a do-group index.			*/
     1035 	r			pic "9";		/* Ring number.				*/
     1036 
     1037 	Idir_iacl = Idir_iacl + 1;			/* see if IACLs exhausted.			*/
     1038 	if Idir_iacl > Ddir_iacl.N then do;		/* if so, return a blank string, unless there	*/
     1039 	     if Idir_iacl = 1 then			/*   is a non-zero error code.		*/
     1040 		if Ddir_iacl.C ^= 0 then do;
     1041 		     call convert_status_code_ (Ddir_iacl.C, short, long);
     1042 		     return ("Error -  " || long);
     1043 		     end;
     1044 	     return ("");
     1045 	     end;
     1046 	do i = 0 to 7 while ((Ddir_iacl.Iring(i) ^= Idir_iacl) | (Ddir_iacl.Nring(i) = 0));
     1047 	     end;					/* see if we are beginning IACL for a ring.	*/
     1048 	call cv_dir_acl_ (addr(Ddir_iacl.acls), Idir_iacl, iacle, 0, "100"b);
     1049 	if i < 8 then do;				/* if so, return ring number before ACLe.	*/
     1050 	     r = i;
     1051 	     return (r || ":  " || iacle);
     1052 	     end;
     1053 	else return ("    " || iacle);
     1054 
     1055 	end get_dir_iacl;
     1056 
     1057 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     1058 
     1059 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     1060 
     1061 
     1062 get_field:	procedure				/* Internal procedure which returns either an	*/
     1063 		returns (char(108));		/* ACL entry or another field value.		*/
     1064 
     1065      dcl	blank_field		char(108) aligned int static init ((108)" "),
     1066 	field			char(108) aligned;
     1067 
     1068 
     1069 	if Snames_first then go to return_blank;	/* library_info:  short terminal, no 3rd column.	*/
     1070 
     1071 	if Sinfo then do;				/* library_info:  longer terminal, move 2nd col.	*/
     1072 	     saved_Iname = Iname;			/*    into names field after all names output.	*/
     1073 	     ent = lib_next_name_ (Srequirements, PDnames, Iname, Pstarname);
     1074 	     Iname = saved_Iname;
     1075 	     if ent = "" then do;
     1076 		Lname = Lname - 40;			/*    Output 3rd col. under 2nd's previous pos.	*/
     1077 		Sinfo = "0"b;
     1078 		end;
     1079 	     else go to return_blank;
     1080 	     end;
     1081 
     1082 	if Sfield_blank then go to return_blank;	/* 3rd column output exhausted.		*/
     1083 
     1084 	if S.acl then do;
     1085 	     field = get_acl();
     1086 	     go to return;
     1087 	     end;
     1088 	if S.access_class then if Laccess_string <= 22 then do;
     1089 	     S.access_class = "0"b;
     1090 	     field = "      access class:  " || access_string;
     1091 	     go to return;
     1092 	     end;
     1093 	if S.aim then if length(aim) <= 22 then do;
     1094 	     S.aim = "0"b;
     1095 	     field = "    AIM attributes:  " || aim;
     1096 	     go to return;
     1097 	     end;
     1098 	if S.mode then do;
     1099 	     S.mode = "0"b;
     1100 	     field = "              mode:  " || mode;
     1101 	     go to return;
     1102 	     end;
     1103 	if S.rb then do;
     1104 	     S.rb = "0"b;
     1105 	     field = "     ring brackets:  " || rbs;
     1106 	     go to return;
     1107 	     end;
     1108 	if S.safety then do;
     1109 	     S.safety = "0"b;
     1110 	     field = "     safety switch:  on";
     1111 	     go to return;
     1112 	     end;
     1113 	if S.user then if Duser.L <= 22 then do;
     1114 	     S.user = "0"b;
     1115 	     field = Duser.label || ":  " || Duser.info;
     1116 	     go to return;
     1117 	     end;
     1118 	if S.unique_id then do;
     1119 	     S.unique_id = "0"b;
     1120 	     field = "         unique id:  " ||
     1121 		convert_binary_integer_$long_octal_string((binary(node.unique_id,36)));
     1122 	     go to return;
     1123 	     end;
     1124 	if S.copy then do;
     1125 	     S.copy = "0"b;
     1126 	     field = "       copy switch:  on";
     1127 	     go to return;
     1128 	     end;
     1129 	if S.lvid then if length(lv_name) <= 22 then do;
     1130 	     S.lvid = "0"b;
     1131 	     if node.T = Tdirectory | node.T = Tmsf then
     1132 		field = "  sons log. volume:  " || lv_name;
     1133 	     else field = "    logical volume:  " || lv_name;
     1134 	     go to return;
     1135 	     end;
     1136 	if S.pvid then if length(pv_name) <= 22 then do;
     1137 	     S.pvid = "0"b;
     1138 	     field = "   physical volume:  " || pv_name;
     1139 	     go to return;
     1140 	     end;
     1141 	if Stpd then do;
     1142 	     Stpd = "0"b;
     1143 	     field = "never on paging dv:  " || "true";
     1144 	     go to return;
     1145 	     end;
     1146 	if S.author then if length(node.author) <= 22 then do;
     1147 	     S.author = "0"b;
     1148 	     field = "            author:  " || node.author;
     1149 	     go to return;
     1150 	     end;
     1151 	if S.bit_count_author then if length(node.bit_count_author) <= 22 then do;
     1152 	     S.bit_count_author = "0"b;
     1153 	     field = "  bit count author:  " || node.bit_count_author;
     1154 	     go to return;
     1155 	     end;
     1156 	if S.msf_indicator then do;
     1157 	     S.msf_indicator = "0"b;
     1158 	     field = "     msf indicator:  " || cv_dec (node.msf_indicator);
     1159 	     go to return;
     1160 	     end;
     1161 	if S.bit_count then do;
     1162 	     S.bit_count = "0"b;
     1163 	     field = "         bit count:  " || cv_dec (node.bit_count);
     1164 	     go to return;
     1165 	     end;
     1166 	if S.current_length then do;
     1167 	     S.current_length = "0"b;
     1168 	     field = "            length:  " || cv_dec (node.current_length);
     1169 	     go to return;
     1170 	     end;
     1171 	if S.records_used then do;
     1172 	     S.records_used = "0"b;
     1173 	     field = "      records used:  " || cv_dec (node.records_used);
     1174 	     go to return;
     1175 	     end;
     1176 	if S.max_length then do;
     1177 	     S.max_length = "0"b;
     1178 	     field = "        max length:  " || cv_dec (node.max_length);
     1179 	     go to return;
     1180 	     end;
     1181 	if S.offset then do;
     1182 	     S.offset = "0"b;
     1183 	     field = "            offset:  " || convert_binary_integer_$octal_string (node.offset);
     1184 	     go to return;
     1185 	     end;
     1186 	if S.entry_bound then do;
     1187 	     S.entry_bound = "0"b;
     1188 	     field = "       entry bound:  " || convert_binary_integer_$octal_string (node.entry_bound);
     1189 	     go to return;
     1190 	     end;
     1191 	if Squota.master_dir then do;
     1192 	     Squota.master_dir = "0"b;
     1193 	     field = "  master directory:" || "true";
     1194 	     go to return;
     1195 	     end;
     1196 	if node.T = Tarchive_comp then if S.dtem then do;
     1197 	     S.dtem = "0"b;
     1198 	     field = " component updated:  " || cv_date(node.dtem);
     1199 	     go to return;
     1200 	     end;
     1201 	if S.dtm then do;
     1202 	     S.dtm = "0"b;
     1203 	     field = " contents modified:  " || cv_date(node.dtm);
     1204 	     go to return;
     1205 	     end;
     1206 	if S.dtem then do;
     1207 	     S.dtem = "0"b;
     1208 	     field = "    entry modified:  " || cv_date(node.dtem);
     1209 	     go to return;
     1210 	     end;
     1211 	if S.dtu then do;
     1212 	     S.dtu = "0"b;
     1213 	     field = "         date used:  " || cv_date(node.dtu);
     1214 	     go to return;
     1215 	     end;
     1216 	if S.dtd then do;
     1217 	     S.dtd = "0"b;
     1218 	     field = "       date dumped:  " || cv_date(node.dtd);
     1219 	     go to return;
     1220 	     end;
     1221 	if S.dtc then do;
     1222 	     S.dtc = "0"b;
     1223 	     if Dobj.info.format.bound then
     1224 		field = "        date bound:  " || cv_long_date(Dobj.info.compile_time);
     1225 	     else field = "     date compiled:  " || cv_long_date(Dobj.info.compile_time);
     1226 	     go to return;
     1227 	     end;
     1228 	if S.compiler_name then do;
     1229 	     S.compiler_name = "0"b;
     1230 	     field = "          compiler:  " || Dobj.info.compiler;
     1231 	     go to return;
     1232 	     end;
     1233 	if S.object_info then if length (attributes) <= 22 then do;
     1234 	     S.object_info = "0"b;
     1235 	     field = " object attributes:  " || attributes;
     1236 	     go to return;
     1237 	     end;
     1238 	if S.not_ascii then do;
     1239 	     S.not_ascii = "0"b;
     1240 	     field = "         printable:  no";
     1241 	     go to return;
     1242 	     end;
     1243 
     1244 	Sfield_blank = "1"b;
     1245 return_blank:
     1246 	return (blank_field);
     1247 
     1248 return:	return (field);
     1249 
     1250 	end get_field;
     1251 
     1252 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     1253 
     1254 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     1255 
     1256 
     1257 get_iacl:		procedure returns(char(109));		/* Internal procedure to format segment IACLs.	*/
     1258 
     1259      dcl	iacle			char(42),
     1260 	i			fixed bin,	/* a do-group index.			*/
     1261 	r			pic "9";		/* Ring number.				*/
     1262 
     1263 	Iiacl = Iiacl + 1;				/* see if IACLs exhausted.			*/
     1264 	if Iiacl > Diacl.N then do;			/* if so, return a blank string, unless there	*/
     1265 	     if Iiacl = 1 then			/*   is a non-zero error code.		*/
     1266 		if Diacl.C ^= 0 then do;
     1267 		     call convert_status_code_ (Diacl.C, short, long);
     1268 		     return ("Error -  " || long);
     1269 		     end;
     1270 	     return ("");
     1271 	     end;
     1272 	do i = 0 to 7 while ((Diacl.Iring(i) ^= Iiacl) | (Diacl.Nring(i) = 0));
     1273 	     end;					/* see if we are beginning IACL for a ring.	*/
     1274 	call cv_acl_ (addr(Diacl.acls), Iiacl, iacle, 0, "100"b);
     1275 	if i < 8 then do;				/* if so, return ring number before ACLe.	*/
     1276 	     r = i;
     1277 	     return (r || ":  " || iacle);
     1278 	     end;
     1279 	else return ("    " || iacle);
     1280 
     1281 	end get_iacl;
     1282 
     1283 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     1284 
     1285 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     1286 
     1287 get_level:	procedure				/* Internal procedure to return the level field	*/
     1288 		returns	(char(2));
     1289 
     1290      dcl	blank_level		char(2) aligned int static init ("  "),
     1291 	level_string		char(2);		/* character representation of level.		*/
     1292 
     1293 	if level_suppressed then			/* if no level required, return a blank string.	*/
     1294 	     return (blank_level);
     1295 	level_suppressed = "1"b;			/* suppress level in lines which follow.	*/
     1296 	level_string = cv_dec(level);
     1297 	return (level_string);			/* and return the character string number.	*/
     1298 
     1299 	end get_level;
     1300 
     1301 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     1302 
     1303 
     1304 out_ch2:	procedure	(label, value_ch);
     1305 						/* Internal procedure to output a line.		*/
     1306 	e = 1;					/* indicate character value.			*/
     1307 	go to common;
     1308 
     1309 
     1310 out_vc2:	entry	(label, value_vc);
     1311 
     1312 	e = 2;					/* indicate varying character string value.	*/
     1313 	if length (value_vc) + 71 > fcb.line_length then
     1314 	     fcb.line_no = fcb.line_no + 1;
     1315 	go to common;
     1316 
     1317 
     1318 out_ch3:	entry	(label, value_ch, field);
     1319 
     1320 	e = 3;					/* indicate character value and field value.	*/
     1321 	go to common;
     1322 
     1323 
     1324 out_vc3:	entry	(label, value_vc, field);
     1325 
     1326 	e = 4;					/* indicate varying character value & field value.*/
     1327 	go to common;
     1328 
     1329 
     1330 out_name:	entry	(name, label, value_vc);
     1331 
     1332 	e = 5;					/* indicate special name line.		*/
     1333 	go to common;
     1334 
     1335 
     1336 out_nl:	entry;
     1337 
     1338 	e = 6;					/* indicate that a new_line char is to be output.	*/
     1339 	go to common;
     1340 
     1341 
     1342 out_pn:	entry 	(value_vc);			/* indicate that a new pathname to be output.	*/
     1343 
     1344 	e = 7;
     1345 	go to common;
     1346 
     1347 
     1348 out_cln:	entry	(flag, Inode, type);		/* indicate library_cleanup 1st line to be output.*/
     1349 
     1350 	e = 8;
     1351 
     1352      dcl	Inode			fixed bin,	/* node number.				*/
     1353 	field			char(108),	/* field to be placed in line.		*/
     1354 	flag			char(1) aligned,	/* deletion flag.				*/
     1355 	label			char(*),		/* label for the value field.			*/
     1356 	name			char(32) varying,	/* name to be placed in line.			*/
     1357 	type			char(20),		/* type of node.				*/
     1358 	value_ch			char(*),		/* a character string value.			*/
     1359 	value_no			fixed bin(35),	/* a number value.				*/
     1360 	value_vc			char(*) varying aligned;
     1361 						/* a varying character string value.		*/
     1362 
     1363      dcl	Lvalue			fixed bin,	/* maximum length of value part of field.	*/
     1364 	i			fixed bin;	/* a string index.				*/
     1365 
     1366 common:	if fcb.line_no = fcb.page_text_length then	/* if current page is full, skip to a new page.	*/
     1367 	     call fcb.Eend_page();
     1368 	fcb.line_no = fcb.line_no + 1;		/* increment number of lines on current page.	*/
     1369 
     1370 	go to out(e);				/* output line.				*/
     1371 out(1):	call ioa_$ioa_switch (fcb.Piocb, "^va^vx^va^21a^a", Llevel, get_level(), Nindent, 
     1372 			  Lname, lib_next_name_ (Srequirements, PDnames, Iname, Pstarname), label, value_ch);
     1373 	return;
     1374 
     1375 out(2):	if length (value_vc) + Nindent + Lname + Llevel + 21 <= fcb.line_length then
     1376 	     call ioa_$ioa_switch (fcb.Piocb, "^va^vx^va^21a^a", Llevel, get_level(), Nindent, 
     1377 		Lname, lib_next_name_ (Srequirements, PDnames, Iname, Pstarname), label, value_vc);
     1378 	else do;
     1379 	     Lvalue = fcb.line_length - (Nindent + Lname + Llevel + 21);
     1380 	     i = Lvalue + 1 - index(reverse(substr(value_vc,1,Lvalue)), " ");
     1381 	     call ioa_$ioa_switch (fcb.Piocb, "^va^vx^va^21a^a", Llevel, get_level(), Nindent,
     1382 		Lname, lib_next_name_ (Srequirements, PDnames, Iname, Pstarname),
     1383 		label, substr(value_vc,1,i));
     1384 	     call ioa_$ioa_switch (fcb.Piocb, "^va^vx^va^21x^a", Llevel, get_level(), Nindent,
     1385 		Lname, lib_next_name_ (Srequirements, PDnames, Iname, Pstarname), substr(value_vc,i+1));
     1386 	     end;
     1387 	return;
     1388 
     1389 out(3):	call ioa_$ioa_switch (fcb.Piocb, "^va^vx^va^21a^16a^3x^a", Llevel, get_level(), Nindent, 
     1390 			  Lname, lib_next_name_ (Srequirements, PDnames, Iname, Pstarname),
     1391 			  label, value_ch, field);
     1392 	return;
     1393 
     1394 out(4):	call ioa_$ioa_switch (fcb.Piocb, "^va^vx^va^21a^16a^3x^a", Llevel, get_level(), Nindent, 
     1395 			  Lname, lib_next_name_ (Srequirements, PDnames, Iname, Pstarname),
     1396 			  label, value_vc, field);
     1397 	return;
     1398 
     1399 out(5):	call ioa_$ioa_switch (fcb.Piocb, "^va^vx^va^21a^a", Llevel, get_level(), Nindent, 
     1400 			  Lname, name, label, value_vc);
     1401 	return;
     1402 
     1403 out(6):	if fcb.line_no = 2 then			/* if top of page, forget new_line char.	*/
     1404 	     fcb.line_no = 1;
     1405 	else
     1406 	     call ioa_$ioa_switch (fcb.Piocb, "");
     1407 	return;
     1408 
     1409 out(7):	call ioa_$ioa_switch (fcb.Piocb, "^/IN ^a:", value_vc);
     1410 	return;
     1411 
     1412 out(8):	call ioa_$ioa_switch (fcb.Piocb, "^1a^vd^1x^va^a", flag, Llevel-2, Inode,
     1413 			  Lname, lib_next_name_ (Srequirements, PDnames, Iname, Pstarname), type);
     1414 	return;
     1415 
     1416 	end out_ch2;
     1417 
     1418 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     1419 
     1420 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     1421 
     1422 
     1423 set_field_widths:	procedure;			/* Internal procedure which sets the lengths	*/
     1424 						/* of the level number, name indentation, and	*/
     1425 						/* name fields, initializes the names-output	*/
     1426 						/* counter, and computes initial value of	*/
     1427 						/* level_suppressed switch.			*/
     1428 
     1429 	Nindent = min (level+level-2, 14);		/* indent the names for nodes at successive levels*/
     1430 	Nindent = max (Nindent, 0);			/* of the tree by 2-spaces/node (max = 8 levels)	*/
     1431 	Llevel = min (level+level, 2);		/* level field is 2-char long, unless there is	*/
     1432 	Llevel = max (Llevel, 0);			/* no indentation.				*/
     1433 	level_suppressed = (Llevel = 0) | ^S.level;	/* suppress level field if there's no room for it	*/
     1434 						/* or if it's not required.			*/
     1435 	if Scleanup then				/* for library_cleanup, leave room for node list	*/
     1436 	     Llevel = 5;				/*   numbers, and for * deletion flag.		*/
     1437 	if Sinfo then				/* if output directed to user's terminal,	*/
     1438 	     if fcb.line_length >= 79 & ^S.acl then do;
     1439 		Nindent = 0;			/* shrink name column.			*/
     1440 		Lname = 34;
     1441 		end;
     1442 	     else if fcb.line_length >= 88 then do;
     1443 		Nindent = 0;
     1444 		Lname = 40;
     1445 		end;
     1446 	     else do;				/* For very short terminals, print 1 item/line.	*/
     1447 		Snames_first = "1"b;
     1448 		Nindent = 0;
     1449 		Lname = 34;
     1450 		end;
     1451 	else Lname = 48 - Nindent;			/* For file output, indent names by level.	*/
     1452 	if Sinfo then				/* For user's terminal, output single name 1st.	*/
     1453 	     if ^S.names & ^S.matching_names & S.primary_name then
     1454 		Snames_first = "1"b;
     1455 	Iname = 0;				/* so far, no names have been printed.		*/
     1456 	Iacl = 0;					/* so far, no ACL entries have been output.	*/
     1457 	Iiacl, Idir_iacl = 0;			/* so far, no IACL entries have been output.	*/
     1458 
     1459 	end set_field_widths;
     1460 
     1461 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     1462 
  1     1 /* START OF:	lib_fcb_.incl.pl1			  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
  1     2 
  1     3      dcl	1 fcb			based (Pfcb),	/* file control block for our output file.	*/
  1     4 	  2 version		fixed bin,	/*    version number = 1;			*/
  1     5 	  2 ioname		char(32),		/*    ioname of our I/O control block.		*/
  1     6 	  2 Piocb			ptr,		/*    ptr to our I/O control block.		*/
  1     7 	  2 Eend_page		entry variable,	/*    entry which handles endpage condition.	*/
  1     8 	  2 page_length		fixed bin,	/*    number of lines per page.		*/
  1     9 	  2 page_text_length	fixed bin,	/*    number of usable lines per page, excluding	*/
  1    10 						/*       footer lines generated by end-of-page	*/
  1    11 						/*       handler.				*/
  1    12 	  2 page_no		fixed bin,	/*    current page number.			*/
  1    13 	  2 line_length		fixed bin,	/*    number of characters per line.		*/
  1    14 	  2 line_no		fixed bin;	/*    number of lines on current page.		*/
  1    15      dcl	Pfcb			ptr;		/* ptr to file control block.			*/
  1    16      dcl	Vfcb_1			fixed bin int static options(constant) init (1);
  1    17 
  1    18 /* END OF:	lib_fcb_.incl.pl1			  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     1463 
     1464 
  2     1 /* START OF:	lib_based_args_.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
  2     2 
  2     3 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  2     4 	/*									*/
  2     5 	/* N__a_m_e:  lib_based_args_.incl.pl1						*/
  2     6 	/*									*/
  2     7 	/*      This include segment defines structures for the arrays of library names and search*/
  2     8 	/* names used by library descriptor commands.  This segment, lib_Svalid_req_.incl.pl1,	*/
  2     9 	/* and lib_Scontrol_.incl.pl1 define the complete set of structures required as input	*/
  2    10 	/* to the lib_descriptor_ subroutine.						*/
  2    11 	/*									*/
  2    12 	/* S__t_a_t_u_s									*/
  2    13 	/*									*/
  2    14 	/* 0) Created on:   March 1, 1975 by  A. J. Scherer				*/
  2    15 	/* 1) Modified on:  April 8, 1975 by  G. C. Dixon					*/
  2    16 	/* 2) Modified on:  May 13, 1976 by  G. C. Dixon					*/
  2    17 	/* 3) Modified on:  November 2, 1983 by Jim Lippard to align structures		*/
  2    18 	/*									*/
  2    19 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  2    20 
  2    21 
  2    22      dcl	1 library			aligned based (Plibrary),
  2    23 						/* a structure containing names of libraries to	*/
  2    24 						/*   be searched.				*/
  2    25 	  2 N			fixed bin,	/*   attribute: number of library names in array.	*/
  2    26 	  2 group (0 refer (library.N)),		/*   attribute: array of library names		*/
  2    27 	    3 V			char(32) unal,	/*   attribute: a library name (value).		*/
  2    28 	    3 C			fixed bin(35);	/*   attribute: code from check_star_name_ for	*/
  2    29      dcl	Plibrary			ptr;		/* ptr to:  library structure.		*/
  2    30 						/*     this library name.			*/
  2    31 
  2    32      dcl	1 starname		aligned based (Pstarname),
  2    33 						/* a structure containing names of library entries*/
  2    34 						/*   being searched for.			*/
  2    35 	  2 N			fixed bin,	/*   attribute: number of starnames in array.	*/
  2    36 	  2 group (0 refer (starname.N)),		/*   attribute: array of starnames		*/
  2    37 	    3 V			char(32) unal,	/*   attribute: a starname (value).		*/
  2    38 	    3 C			fixed bin(35);	/*   attribute: code from check_star_name_ for	*/
  2    39 						/*     this starname.			*/
  2    40      dcl	Pstarname			ptr;		/* ptr to:  starname structure.		*/
  2    41 
  2    42      dcl	1 exclude			aligned based (Pexclude),
  2    43 						/* a structure containing names of library entries*/
  2    44 						/*   being excluded from the search.		*/
  2    45 	  2 N			fixed bin,	/*   attribute: number of excludes in array.	*/
  2    46 	  2 group (0 refer (exclude.N)),		/*   attribute: array of excludes		*/
  2    47 	    3 V			char(32) unal,	/*   attribute: an exclude (value).		*/
  2    48 	    3 C			fixed bin(35);	/*   attribute: code from check_star_name_ for	*/
  2    49 						/*     this exclude.			*/
  2    50      dcl	Pexclude			ptr;		/* ptr to:  exclude structure.		*/
  2    51 
  2    52 /* END OF:	lib_based_args_.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     1465 
     1466 
  3     1 /*  START OF:	lib_node_.incl.pl1			  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
  3     2 
  3     3 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  3     4 	/*									*/
  3     5 	/* N__a_m_e:  lib_node_.incl.pl1							*/
  3     6 	/*									*/
  3     7 	/*      This include segment defines the structures which form the tree of status nodes	*/
  3     8 	/* created by lib_get_tree_.  Each node of the tree is associated with a directory	*/
  3     9 	/* entry or an archive component.  The node lists the attributes of that entry, which is	*/
  3    10 	/* called the node target.							*/
  3    11 	/*									*/
  3    12 	/* S__t_a_t_u_s									*/
  3    13 	/*									*/
  3    14 	/* 0) Created:  May, 1973 by G. C. Dixon					*/
  3    15 	/* 1) Modified: Aug, 1973 by G. C. Dixon - standardize descriptor format.		*/
  3    16 	/* 2) Modified: Oct, 1973 by G. C. Dixon - add object_info_ descriptor.		*/
  3    17 	/* 3) Modified: Apr, 1975 by G. C. Dixon - add ACL and IACL descriptors.		*/
  3    18 	/* 4) Modified: Oct, 1975 by G. C. Dixon - additional status info added.		*/
  3    19 	/*									*/
  3    20 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  3    21 
  3    22 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  3    23 	/*									*/
  3    24 	/*	The structure of each node whose target is a link is shown below.	The	*/
  3    25 	/* structure of nodes for other types of targets is shown on the next page.  Note that	*/
  3    26 	/* both types of nodes are the same length.					*/
  3    27 	/*									*/
  3    28 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  3    29 
  3    30      dcl  1 link_node		based (Pnode),	/* node of a status tree.			*/
  3    31 	  2 Pparent		ptr,		/* ptr to:    parent node (previous tree level).	*/
  3    32 	  2 PD			ptr,		/* ptr to:    descriptor chain attached to node.	*/
  3    33 	  2 Svalid		bit(72) aligned,	/* switches:  node data which is valid.		*/
  3    34 	  2 Sreq			bit(72) aligned,	/* switches:  node data which is req'd for output.*/
  3    35 						/*             (= node.Svalid & Srequirements)	*/
  3    36 	  2 T			fixed bin(35),	/* attribute: type of node target.		*/
  3    37 	  2 switches		unaligned,
  3    38 	    3 Smode		bit(3),		/* attribute: user's access mode to entry.	*/
  3    39 	    3 Sprev_mode		bit(3),		/* attribute: user's previous access mode to the	*/
  3    40 						/* 	     entry before lib_access_mode_$set.	*/
  3    41 	    3 pad			bit(22),
  3    42 	    3 Smaster_dir		bit(1),		/* attribute: master directory		*/
  3    43 	    3 Stpd		bit(1),		/* attribute: transparent (never on) paging device*/
  3    44 	    3 Ssafety		bit(1),		/* attribute: safety switch.			*/
  3    45 	    3 Saim_security_oos	bit(1),		/* attribute: security out-of-service.		*/
  3    46 	    3 Saim_audit		bit(1),		/* attribute: AIM audit use of node target.	*/
  3    47 	    3 Saim_multiple_class	bit(1),		/* attribute: AIM multiple class segment.	*/
  3    48 	    3 Sterminal_account	bit(1),		/* attribute: if on, records charged against quota*/
  3    49 						/*	     in this directory;  if off, records*/
  3    50 						/*	     charged against 1st superior	*/
  3    51 						/*	     directory with switch on.	*/
  3    52 	    3 Sterminal_account_dir	bit(1),		/* attribute: like Sterminal_account for dir quota*/
  3    53 	    3 Scopy		bit(1),		/* attribute: copy-on-write switch.		*/
  3    54 	  2 unique_id		bit(36),		/* attribute: unique identifier.		*/
  3    55 	  2 author		char(32) varying,	/* attribute: author of node target.		*/
  3    56 	  2 dtem			bit(36),		/* attribute: date-time attributes modified.	*/
  3    57 	  2 dtd			bit(36),		/* attribute: date-time node target dumped.	*/
  3    58 
  3    59 						/* From here on, link_nodes differ from nodes	*/
  3    60 						/*  for other types of node targets.		*/
  3    61 	  2 link_target		char(168) varying;	/* attribute: target pathname of the link.	*/
  3    62 
  3    63 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  3    64 	/*									*/
  3    65 	/*	The structure of nodes for other types of node targets is shown below.	*/
  3    66 	/*									*/
  3    67 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  3    68 
  3    69      dcl  1 node			based (Pnode),	/* node of a status tree.			*/
  3    70 	  2 Pparent		ptr,		/* ptr to:    parent node (previous tree level).	*/
  3    71 	  2 PD			ptr,		/* ptr to:    descriptor chain attached to node.	*/
  3    72 	  2 Svalid		bit(72) aligned,	/* switches:  node data which is valid.		*/
  3    73 	  2 Sreq			bit(72) aligned,	/* switches:  node data which is req'd for output.*/
  3    74 						/*             (= node.Svalid & Srequirements)	*/
  3    75 	  2 T			fixed bin(35),	/* attribute: type of node target.		*/
  3    76 	  2 switches		unaligned,
  3    77 	    3 Smode		bit(3),		/* attribute: user's access mode to entry.	*/
  3    78 	    3 Sprev_mode		bit(3),		/* attribute: user's previous access mode to the	*/
  3    79 						/* 	     entry before lib_access_mode_$set.	*/
  3    80 	    3 pad			bit(22),
  3    81 	    3 Smaster_dir		bit(1),		/* attribute: master directory		*/
  3    82 	    3 Stpd		bit(1),		/* attribute: transparent (never on) paging device*/
  3    83 	    3 Ssafety		bit(1),		/* attribute: safety switch.			*/
  3    84 	    3 Saim_security_oos	bit(1),		/* attribute: security out-of-service.		*/
  3    85 	    3 Saim_audit		bit(1),		/* attribute: AIM audit use of node target.	*/
  3    86 	    3 Saim_multiple_class	bit(1),		/* attribute: AIM multiple class segment.	*/
  3    87 	    3 Sterminal_account	bit(1),		/* attribute: if on, records charged against quota*/
  3    88 						/*	     in this directory;  if off, records*/
  3    89 						/*	     charged against 1st superior	*/
  3    90 						/*	     directory with switch on.	*/
  3    91 	    3 Sterminal_account_dir	bit(1),		/* attribute: like Sterminal_account for dir quota*/
  3    92 	    3 Scopy		bit(1),		/* attribute: copy-on-write switch.		*/
  3    93 	  2 unique_id		bit(36),		/* attribute: unique identifier.		*/
  3    94 	  2 author		char(32) varying,	/* attribute: author of node target.		*/
  3    95 	  2 dtem			bit(36),		/* attribute: date-time attributes modified.	*/
  3    96 	  2 dtd			bit(36),		/* attribute: date-time node target dumped.	*/
  3    97 
  3    98 						/* From here on, other nodes differ from	*/
  3    99 						/*  link_nodes.				*/
  3   100 	  2 dtm			bit(36),		/* attribute: date-time node target modified.	*/
  3   101 	  2 dtu			bit(36),		/* attribute: date-time node target last used.	*/
  3   102 	  2 rb (3)		fixed bin(3),	/* attribute: ring brackets.			*/
  3   103 	  2 pad1 (1)		fixed bin,
  3   104 	  2 access_class		bit(72) aligned,	/* attribute: access class assoc. with entry.	*/
  3   105 	  2 records_used		fixed bin(35),	/* attribute: storage used, in records.		*/
  3   106 	  2 current_length		fixed bin(35),	/* attribute: length, in records.		*/
  3   107 	  2 max_length		fixed bin(35),	/* attribute: maximum length.			*/
  3   108 	  2 msf_indicator		fixed bin(35),	/* attribute: msf indicator.			*/
  3   109 	  2 bit_count		fixed bin(35),	/* attribute: bit count.			*/
  3   110 	  2 bit_count_author	char(32) varying,	/* attribute: bit count/msf indicator author.	*/
  3   111 	  2 offset		fixed bin(35),	/* attribute: offset, in words, of an archive	*/
  3   112 						/*             component from the base of archive.*/
  3   113 	  2 entry_bound		fixed bin(35),	/* attribute: entry limit for calls to a gate.	*/
  3   114 	  2 segment,				/* group:  segment quota information for a dir.	*/
  3   115 	    3 quota		fixed bin(35),	/* attribute: quota set.			*/
  3   116 	    3 quota_used		fixed bin(35),	/* attribute: quota used.			*/
  3   117 	    3 trp			fixed bin(71),	/* attribute: time-record product.		*/
  3   118 	    3 dttrp		bit(36),		/* attribute: date-time time-record product last	*/
  3   119 						/*	     updated.			*/
  3   120 	    3 Ninf_quota		fixed bin(35),	/* attribute: number of immediately-inferior 	*/
  3   121 						/*	     directories with Sterminal_account	*/
  3   122 						/*	     on.				*/
  3   123 	  2 directory,				/* group:  directory quota information for a dir.	*/
  3   124 	    3 quota		fixed bin(35),	/* attribute: quota set.			*/
  3   125 	    3 quota_used		fixed bin(35),	/* attribute: quota used.			*/
  3   126 	    3 trp			fixed bin(71),	/* attribute: time-record product.		*/
  3   127 	    3 dttrp		bit(36),		/* attribute: date-time time-record product last	*/
  3   128 						/*	     updated.			*/
  3   129 	    3 Ninf_quota		fixed bin(35),	/* attribute: number of immediately-inferior 	*/
  3   130 						/*	     directories with Sterminal_account	*/
  3   131 						/*	     on.				*/
  3   132 	  2 pvid			bit(36),		/* attribute: physical volume id.		*/
  3   133 	  2 lvid			bit(36),		/* attribute: logical volume id.		*/
  3   134 	  2 pad2 (5)		fixed bin,
  3   135 	Pnode			ptr;		/* ptr to:    a tree node.			*/
  3   136 
  3   137 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  3   138 	/*									*/
  3   139 	/*      The descriptors attached to each node of the tree describe the variable-sized	*/
  3   140 	/* attributes of the directory entry or archive component associated with the node.	*/
  3   141 	/* Each descriptor must begin with a header shown in structure D below.  The following	*/
  3   142 	/* descriptors are the only ones that have been defined.				*/
  3   143 	/*									*/
  3   144 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  3   145 
  3   146      dcl	1 D			based (PD),	/* Header common to all descriptors.		*/
  3   147 	  2 length		fixed bin(17) unal,	/* descriptor: length, in words.		*/
  3   148 	  2 version		fixed bin(17) unal,	/* descriptor: version number.		*/
  3   149 	  2 T			fixed bin,	/* descriptor: type of descriptor.		*/
  3   150 	  2 Pnext		ptr,			/* ptr to:    next descriptor attached to node.	*/
  3   151 	PD			ptr;		/* ptr to:    a descriptor.			*/
  3   152 
  3   153      dcl	1 Dacl			based (PDacl),	/* a segment ACL descriptor.			*/
  3   154 	  2 length		fixed bin(17) unal,	/* descriptor: length, in words.		*/
  3   155 	  2 version		fixed bin(17) unal,	/* descriptor: version number = 1.		*/
  3   156 	  2 T			fixed bin,	/* descriptor: type = Tacl.			*/
  3   157 	  2 Pnext			ptr,		/* ptr to:    next descriptor attached to node.	*/
  3   158 	  2 C			fixed bin(35),	/* attribute: error code from filling descriptor.	*/
  3   159 	  2 N			fixed bin,	/* attribute: number of ACL entries.		*/
  3   160 	  2 acls (Nacls refer (Dacl.N)),		/* attribute: ACL entries.			*/
  3   161 	    3 access_name		char(32),		/* attribute: access name associated with entry.	*/
  3   162 	    3 modes		bit(36),		/* attribute: access modes associated with entry.	*/
  3   163 	    3 zero_pad		bit(36),
  3   164 	    3 status_code		fixed bin(35),	/* attribute: status code associated with entry.	*/
  3   165 	Nacls			fixed bin,	/* temporary: number of entries in ACL descriptor.*/
  3   166 	PDacl			ptr,		/* ptr to:    a segment ACL descriptor.		*/
  3   167 	Vacl_1			fixed bin int static options(constant) init (1),
  3   168 						/* version:   version of ACL descriptor.	*/
  3   169 	Tacl			fixed bin int static options(constant) init (7);
  3   170 						/* attribute: type of a segment ACL descriptor.	*/
  3   171 
  3   172      dcl	1 Ddir_acl		based (PDdir_acl),	/* a directory ACL descriptor.		*/
  3   173 	  2 length		fixed bin(17) unal,	/* descriptor: length, in words.		*/
  3   174 	  2 version		fixed bin(17) unal,	/* descriptor: version number = 1.		*/
  3   175 	  2 T			fixed bin,	/* descriptor: type = Tdir_acl.		*/
  3   176 	  2 Pnext			ptr,		/* ptr to:    next descriptor attached to node.	*/
  3   177 	  2 C			fixed bin(35),	/* attribute: error code from filling descriptor.	*/
  3   178 	  2 N			fixed bin,	/* attribute: number of ACL entries.		*/
  3   179 	  2 acls (Ndir_acls refer (Ddir_acl.N)),	/* attribute: ACL entries.			*/
  3   180 	    3 access_name		char(32),		/* attribute: access name associated with entry.	*/
  3   181 	    3 dir_modes		bit(36),		/* attribute: access modes associated with entry.	*/
  3   182 	    3 status_code		fixed bin(35),	/* attribute: status code associated with entry.	*/
  3   183 	Ndir_acls			fixed bin,	/* temporary: number of entries in ACL descriptor.*/
  3   184 	PDdir_acl			ptr,		/* ptr to:    a directory ACL descriptor.	*/
  3   185 	Vdir_acl_1		fixed bin int static options(constant) init (1),
  3   186 						/* version:   version of directory ACL descriptor.*/
  3   187 	Tdir_acl			fixed bin int static options(constant) init (8);
  3   188 						/* attribute: type of a directory ACL descriptor.	*/
  3   189 
  3   190      dcl	1 Ddir_iacl		based (PDdir_iacl),	/* a directory IACL descriptor.		*/
  3   191 	  2 length		fixed bin(17) unal,	/* descriptor: length, in words.		*/
  3   192 	  2 version		fixed bin(17) unal,	/* descriptor: version number = 1.		*/
  3   193 	  2 T			fixed bin,	/* descriptor: type = Tdir_iacl.		*/
  3   194 	  2 Pnext			ptr,		/* ptr to:    next descriptor attached to node.	*/
  3   195 	  2 C			fixed bin(35),	/* attribute: error code from filling descriptor.	*/
  3   196 	  2 N			fixed bin,	/* attribute: number of ACL entries.		*/
  3   197 	  2 Iring (0:7)		fixed bin,	/* attribute: index of first ACLe in each ring.	*/
  3   198 	  2 Nring (0:7)		fixed bin,	/* attribute: number of ACL entries in each ring.	*/
  3   199 	  2 acls (Ndir_iacls refer (Ddir_iacl.N)),	/* attribute: ACL entries.			*/
  3   200 	    3 access_name		char(32),		/* attribute: access name associated with entry.	*/
  3   201 	    3 dir_modes		bit(36),		/* attribute: access modes associated with entry.	*/
  3   202 	    3 status_code		fixed bin(35),	/* attribute: status code associated with entry.	*/
  3   203 	Ndir_iacls		fixed bin,	/* temporary: number of entries in IACL descriptor*/
  3   204 	PDdir_iacl		ptr,		/* ptr to:    a directory IACL descriptor.	*/
  3   205 	Vdir_iacl_1		fixed bin int static options(constant) init (1),
  3   206 						/* version:   version of dir IACL descriptor.	*/
  3   207 	Tdir_iacl			fixed bin int static options(constant) init (9);
  3   208 
  3   209      dcl	1 Diacl			based (PDiacl),	/* a segment IACL descriptor.			*/
  3   210 	  2 length		fixed bin(17) unal,	/* descriptor: length, in words.		*/
  3   211 	  2 version		fixed bin(17) unal,	/* descriptor: version number = 1.		*/
  3   212 	  2 T			fixed bin,	/* descriptor: type = Tiacl.			*/
  3   213 	  2 Pnext			ptr,		/* ptr to:    next descriptor attached to node.	*/
  3   214 	  2 C			fixed bin(35),	/* attribute: error code from filling descriptor.	*/
  3   215 	  2 N			fixed bin,	/* attribute: number of ACL entries.		*/
  3   216 	  2 Iring (0:7)		fixed bin,	/* attribute: index of first ACLe in each ring.	*/
  3   217 	  2 Nring (0:7)		fixed bin,	/* attribute: number of ACL entries in each ring.	*/
  3   218 	  2 acls (Niacls refer (Diacl.N)),		/* attribute: ACL entries.			*/
  3   219 	    3 access_name		char(32),		/* attribute: access name associated with entry.	*/
  3   220 	    3 modes		bit(36),		/* attribute: access modes associated with entry.	*/
  3   221 	    3 zero_pad		bit(36),
  3   222 	    3 status_code		fixed bin(35),	/* attribute: status code associated with entry.	*/
  3   223 	Niacls			fixed bin,	/* temporary: number of entries in IACL descriptor*/
  3   224 	PDiacl			ptr,		/* ptr to:    a segment IACL descriptor.	*/
  3   225 	Viacl_1			fixed bin int static options(constant) init (1),
  3   226 						/* version:   version of segment IACL descriptor.	*/
  3   227 	Tiacl			fixed bin int static options(constant) init (10);
  3   228 						/* attribute: type of a segment IACL descriptor.	*/
  3   229 
  3   230      dcl	1 Dnames			based (PDnames),	/* name attribute descriptor.			*/
  3   231 	  2 length		fixed bin(17) unal,	/* descriptor: length, in words.		*/
  3   232 	  2 version		fixed bin(17) unal,	/* descriptor: version number = 1.		*/
  3   233 	  2 T			fixed bin,	/* descriptor: type = Tnames.			*/
  3   234 	  2 Pnext			ptr,		/* ptr to:    next descriptor attached to node.	*/
  3   235 	  2 N			fixed bin,	/* attribute: number of names.		*/
  3   236 	  2 names (Nnames refer (Dnames.N))
  3   237 				char(32),		/* attribute: names.			*/
  3   238 	Nnames			fixed bin,	/* temporary: number of names in name descriptor.	*/
  3   239 	PDnames			ptr,		/* ptr to:    a name descriptor.		*/
  3   240 	Vnames_1			fixed bin int static options(constant) init (1),
  3   241 						/* version:   version of names descriptor.	*/
  3   242 	Tnames			fixed bin int static options(constant) init (1);
  3   243 						/* attribute: type of a name descriptor.	*/
  3   244 
  3   245      dcl	1 Dnodes			based (PDnodes),	/* descriptor for array of immediately-inferior	*/
  3   246 						/* nodes.					*/
  3   247 	  2 header,
  3   248 	    3 length		fixed bin(17) unal,	/* descriptor: length, in words.		*/
  3   249 	    3 version		fixed bin(17) unal,	/* descriptor: version number = 1.		*/
  3   250 	    3 T			fixed bin,	/* descriptor: type = Tnodes.			*/
  3   251 	    3 Pnext		ptr,		/* ptr to:    next descriptor attached to node.	*/
  3   252 	    3 C			fixed bin(35),	/* attribute: error code from filling array.	*/
  3   253 	    3 N			fixed bin,	/* attribute: number of nodes in node array.	*/
  3   254 	  2 nodes (Nnodes refer (Dnodes.N))		/* attribute: node array			*/
  3   255 				like node,
  3   256 	Nnodes			fixed bin,	/* temporary: number of nodes in node array.	*/
  3   257 	PDnodes			ptr,		/* ptr to:    a node array descriptor.		*/
  3   258 	Vnodes_1			fixed bin int static options(constant) init (1),
  3   259 						/* version:   version of nodes descriptor.	*/
  3   260 	Tnodes			fixed bin int static options(constant) init (2);
  3   261 						/* attribute: type of a node descriptor.	*/
  3   262 
  3   263      dcl	1 Dobj			based (PDobj),	/* an object_info_ descriptor.		*/
  3   264 	  2 length		fixed bin(17) unal,	/* descriptor: length, in words.		*/
  3   265 	  2 version		fixed bin(17) unal,	/* descriptor: version number = 1.		*/
  3   266 	  2 T			fixed bin,	/* descriptor: type = Tobj.			*/
  3   267 	  2 Pnext			ptr,		/* ptr to:    next descriptor attached to node.	*/
  3   268 	  2 info,
  3   269 	    3 Otext		fixed bin(35),	/* attribute: offset of text.			*/
  3   270 	    3 Odefinitions		fixed bin(35),	/* attribute: offset of definitions.		*/
  3   271 	    3 Olink		fixed bin(35),	/* attribute: offset of linkage section.	*/
  3   272 	    3 Ostatic		fixed bin(35),	/* attribute: offset of static section.		*/
  3   273 	    3 Osymbols		fixed bin(35),	/* attribute: offset of symbol section.		*/
  3   274 	    3 Obreaks		fixed bin(35),	/* attribute: offset of break map.		*/
  3   275 	    3 Ltext		fixed bin(35),	/* attribute: length of text, in words.		*/
  3   276 	    3 Ldefinitions		fixed bin(35),	/* attribute: length of definitions, in words.	*/
  3   277 	    3 Llink		fixed bin(35),	/* attribute: length of linkage section, in words.*/
  3   278 	    3 Lstatic		fixed bin(35),	/* attribute: length of static section, in words.	*/
  3   279 	    3 Lsymbols		fixed bin(35),	/* attribute: length of symbol section, in words.	*/
  3   280 	    3 Lbreaks		fixed bin(35),	/* attribute: length of break map, in words.	*/
  3   281 	    3 format		aligned,
  3   282 	      4 old_format		bit(1) unal,	/* attribute: segment is in old format.		*/
  3   283 	      4 bound		bit(1) unal,	/* attribute: a bound segment.		*/
  3   284 	      4 relocatable		bit(1) unal,	/* attribute: object is relocatable.		*/
  3   285 	      4 procedure		bit(1) unal,	/* attribute: executable procedure.		*/
  3   286 	      4 standard		bit(1) unal,	/* attribute: standard object segment.		*/
  3   287 	      4 gate		bit(1) unal,	/* attribute: gate procedure.			*/
  3   288 	      4 separate_static	bit(1) unal,	/* attribute: proc has separate static section.	*/
  3   289 	      4 links_in_text	bit(1) unal,	/* attribute: proc has links in text section.	*/
  3   290 	      4 pad		bit(28) unal,
  3   291 	    3 entry_bound		fixed bin(35),	/* attribute: entry point bound for a gate.	*/
  3   292 	    3 Otext_links		fixed bin(35),	/* attribute: offset of first link in text section*/
  3   293 	    3 compiler		char(8),		/* attribute: compiler of this object segment.	*/
  3   294 	    3 compile_time		fixed bin(71),	/* attribute: date/time of compilation.		*/
  3   295 	    3 userid		char(32),		/* attribute: id of user who compiled segment.	*/
  3   296 	    3 cversion,				/* attribite: compiler version string.		*/
  3   297 	      4 O			fixed bin(17) unal,	/*	    offset			*/
  3   298 	      4 L			fixed bin(17) unal,	/*	    length			*/
  3   299 	    3 comment,				/* attribute: compiler-generated comment.	*/
  3   300 	      4 O			fixed bin(17) unal,	/*	    offset			*/
  3   301 	      4 L			fixed bin(17) unal,	/*	    length			*/
  3   302 	    3 Osource		fixed bin(35),	/* attribute: offset of source map.		*/
  3   303 	  2 cversion		char(64) varying,	/* attribute: compiler version number      	*/
  3   304 	  2 comment		char(64) varying,	/* attribute: compiler's comment info	   	*/
  3   305 	PDobj			ptr,		/* ptr to:    an object_info_ descriptor.	*/
  3   306 	Vobj_1			fixed bin int static options(constant) init (1),
  3   307 						/* version:   version of object_info_ descriptor.	*/
  3   308 	Tobj			fixed bin int static options(constant) init (3);
  3   309 						/* attribute: type of a node descriptor.	*/
  3   310 
  3   311      dcl	1 Dsearch_proc		based (PDsearch_proc),
  3   312 						/* library root search_proc attribute descriptor.	*/
  3   313 	  2 length		fixed bin(17) unal,	/* descriptor: length, in words.		*/
  3   314 	  2 version		fixed bin(17) unal,	/* descriptor: version number = 1.		*/
  3   315 	  2 T			fixed bin,	/* descriptor: type = Tsearch_proc.		*/
  3   316 	  2 Pnext			ptr,		/* ptr to:    next descriptor attached to node.	*/
  3   317 	  2 search_proc		char(65) varying,	/* attribute: name of library search procedure.	*/
  3   318 	PDsearch_proc		ptr,		/* ptr to:    a search_proc info descriptor.	*/
  3   319 	Vsearch_proc_1		fixed bin int static options(constant) init (1),
  3   320 						/* version:   version of search_proc info descrip.*/
  3   321 	Tsearch_proc		fixed bin int static options(constant) init (5);
  3   322 						/* attribute: type of a search_proc descriptor.	*/
  3   323 
  3   324      dcl	1 Duser			based (PDuser),	/* user attribute descriptor.			*/
  3   325 	  2 length		fixed bin(17) unal,	/* descriptor: length, in words.		*/
  3   326 	  2 version		fixed bin(17) unal,	/* descriptor: version number = 1.		*/
  3   327 	  2 T			fixed bin,	/* descriptor: type = Tuser.			*/
  3   328 	  2 Pnext			ptr,		/* ptr to:    next descriptor attached to node.	*/
  3   329 	  2 label			char(18),		/* attribute: label to be used for this field in	*/
  3   330 						/*            output.			*/
  3   331 	  2 L			fixed bin,	/* attribute: length of user info string.	*/
  3   332 	  2 info			char(Luser refer (Duser.L)),
  3   333 						/* attribute: user info string.		*/
  3   334 	Luser			fixed bin,	/* temporary: length of user info string.	*/
  3   335 	PDuser			ptr,		/* ptr to:    a user info descriptor.		*/
  3   336 	Vuser_1			fixed bin int static options(constant) init (1),
  3   337 						/* version:   version of user info descriptor.	*/
  3   338 	Tuser			fixed bin int static options(constant) init (6);
  3   339 						/* attribute: type of a user descriptor.	*/
  3   340 
  4     1 /* START OF:	lib_Svalid_req_.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
  4     2 
  4     3 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  4     4 	/*									*/
  4     5 	/* N__a_m_e:  lib_Svalid_req_.incl.pl1						*/
  4     6 	/*									*/
  4     7 	/*      This include segment defines the switches which request/validate the fields	*/
  4     8 	/* in a status node produced by lib_get_tree_.  This segment, lib_Scontrol_.incl.pl1,	*/
  4     9 	/* and lib_args_.incl.pl1 define the complete set of structures required as input to	*/
  4    10 	/* the lib_descriptor_ subroutine.  This subroutine is called by all of the library	*/
  4    11 	/* descriptor commands to obtain information about entries in a library.		*/
  4    12 	/*									*/
  4    13 	/*      If a switch is on, then the corresponding information in the node is valid, or 	*/
  4    14 	/* is requested for output.							*/
  4    15 	/*									*/
  4    16 	/* S__t_a_t_u_s									*/
  4    17 	/*									*/
  4    18 	/* 0) Created on:   April 8, 1975  by  G. C. Dixon				*/
  4    19 	/*									*/
  4    20 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  4    21 
  4    22 
  4    23      dcl	1 Svalid_req		aligned based,
  4    24 	  2 primary_name		bit(1) unal,	/* switch: output includes primary name	   	*/
  4    25 	  2 matching_names		bit(1) unal,	/* switch: output includes matching names  	*/
  4    26 	  2 names			bit(1) unal,	/* switch: output includes all names	   	*/
  4    27 
  4    28 	  2 pathname		bit(1) unal,	/* switch: output include pathname of node target	*/
  4    29 	  2 kids			bit(1) unal,	/* switch: children nodes (inferior) exist	*/
  4    30 	  2 kids_error		bit(1) unal,	/* switch: error occurred obtaining kid's info	*/
  4    31 
  4    32 	  2 type			bit(1) unal,	/* switch: type 			   	*/
  4    33 	  2 mode			bit(1) unal,	/* switch: user's access mode to node target	*/
  4    34 	  2 safety		bit(1) unal,	/* switch: safety switch setting		*/
  4    35 
  4    36 	  2 aim			bit(1) unal,	/* switch: Access Isolation Mechanism switches	*/
  4    37 	  2 copy			bit(1) unal,	/* switch: copy-on-write switch setting		*/
  4    38 	  2 unique_id		bit(1) unal,	/* switch: unique identifier		   	*/
  4    39 
  4    40 	  2 author		bit(1) unal,	/* switch: author of node target		*/
  4    41 	  2 dtem			bit(1) unal,	/* switch: date attributes modified	   	*/
  4    42 	  2 dtd			bit(1) unal,	/* switch: date dumped		   	*/
  4    43 
  4    44 	  2 link_target		bit(1) unal,	/* switch: target pathname of link node		*/
  4    45 	  2 dtm			bit(1) unal,	/* switch: date modified		   	*/
  4    46 	  2 dtu			bit(1) unal,	/* switch: date used		   	*/
  4    47 
  4    48 	  2 rb			bit(1) unal,	/* switch: ring brackets		   	*/
  4    49 	  2 access_class		bit(1) unal,	/* switch: AIM access class		   	*/
  4    50 	  2 records_used		bit(1) unal,	/* switch: records used		   	*/
  4    51 
  4    52 	  2 current_length		bit(1) unal,	/* switch: current length		   	*/
  4    53 	  2 max_length		bit(1) unal,	/* switch: maximum length			*/
  4    54 	  2 msf_indicator		bit(1) unal,	/* switch: count of MSF components.		*/
  4    55 
  4    56 	  2 bit_count		bit(1) unal,	/* switch: bit count		   	*/
  4    57 	  2 bit_count_author	bit(1) unal,	/* switch: bit count author.			*/
  4    58 	  2 offset		bit(1) unal,	/* switch: offset from segment base	   	*/
  4    59 
  4    60 	  2 entry_bound		bit(1) unal,	/* switch: call limit for gate node		*/
  4    61 	  2 lvid			bit(1) unal,	/* switch: logical volume id	   		*/
  4    62 	  2 pvid			bit(1) unal,	/* switch: physical volume id			*/
  4    63 
  4    64 	  2 quota			bit(1) unal,	/* switch: directory quota information		*/
  4    65 	  2 acl			bit(1) unal,	/* switch: ACL			   	*/
  4    66 	  2 iacl			bit(1) unal,	/* switch: initial ACLs		   	*/
  4    67 
  4    68 	  2 dtc			bit(1) unal,	/* switch: date-time compiled      		*/
  4    69 	  2 compiler_name		bit(1) unal,	/* switch: name of compiler			*/
  4    70 	  2 compiler_version	bit(1) unal,	/* switch: compiler version number         	*/
  4    71 
  4    72 	  2 compiler_options	bit(1) unal,	/* switch: compiler options info	   	*/
  4    73 	  2 object_info		bit(1) unal,	/* switch: other object segment info       	*/
  4    74 	  2 not_ascii		bit(1) unal,	/* switch: contents is not printable       	*/
  4    75 
  4    76 	  2 user			bit(1) unal,	/* switch: user-defined node information	*/
  4    77 	  2 root_search_proc	bit(1) unal,	/* switch: root search procedure info.		*/
  4    78 	  2 prev_mode		bit(1) unal,	/* switch: user's previous acces mode set.	*/
  4    79 	  2 pad			bit(26) unal,
  4    80 
  4    81 	  2 delete		bit(1) unal,	/* switch: on (for lcln) if node to be deleted.	*/
  4    82 
  4    83 	  2 cross_ref		bit(1) unal,	/* switch: cross-reference all names       	*/
  4    84 	  2 level			bit(1) unal,	/* switch: output status tree level number	*/
  4    85 	  2 new_line		bit(1) unal;	/* switch: output begins with newline char	*/
  4    86 
  4    87 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  4    88 	/*									*/
  4    89 	/*      The following declarations define a series of bit strings to be overlaid by 	*/
  4    90 	/* structures which are exactly like Svalid_req above, except for their level 1 name.	*/
  4    91 	/* These structures are used throughout the library descriptor commands and subroutines.	*/
  4    92 	/*									*/
  4    93 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  4    94 
  4    95 
  4    96      dcl	1 S			aligned based (addr(Srequirements)) like Svalid_req,
  4    97 	Srequirements		bit(72) aligned;
  4    98 
  4    99 /* END OF:	lib_Svalid_req_.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
  3   341 
  3   342 
  3   343      dcl	1 Svalid			aligned based(addr(node.Svalid)) like Svalid_req,
  3   344 	1 Sreq			aligned based(addr(node.Sreq)) like Svalid_req;
  3   345 
  5     1 /* START OF:	lib_Scontrol_.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
  5     2 
  5     3 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  5     4 	/*									*/
  5     5 	/* N__a_m_e:  lib_Scontrol_.incl.pl1						*/
  5     6 	/*									*/
  5     7 	/*      This include segment defines the control switches used by library descriptor	*/
  5     8 	/* commands and subroutines.  These switches control the amount of information which is	*/
  5     9 	/* attached to each node of the tree by lib_get_tree_.  This segment, lib_args_.incl.pl1,	*/
  5    10 	/* and lib_Svalid_req_.incl.pl1 define the complete set of structures required as input	*/
  5    11 	/* to the lib_descriptor_ subroutine.						*/
  5    12 	/*									*/
  5    13 	/* S__t_a_t_u_s									*/
  5    14 	/*									*/
  5    15 	/* 0) Created on:  April 8, 1975  by  G. C. Dixon					*/
  5    16 	/* 1) Modified on: October 24, 1983 by Jim Lippard to add page_length, first_match	*/
  5    17 	/*									*/
  5    18 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  5    19 
  5    20      dcl	1 Sc			aligned based (addr (Scontrol)),
  5    21 	  2 acl			bit(1) unal,	/* switch: return ACL for library entries.	*/
  5    22 	  2 all_status		bit(1) unal,	/* switch: return extra status information.	*/
  5    23 	  2 chase			bit(1) unal,	/* switch: link entries are to be chased.	*/
  5    24 
  5    25 	  2 check_archive		bit(1) unal,	/* switch: see if contents of entry is archive.	*/
  5    26 	  2 check_ascii		bit(1) unal,	/* switch: see if contents of entry is ascii.	*/
  5    27 	  2 components		bit(1) unal,	/* switch: return info about parent of terminal	*/
  5    28 						/*         nodes of the tree, and about all the	*/
  5    29 						/*	 nodes below the parent.		*/
  5    30 
  5    31 	  2 container		bit(1) unal,	/* switch: return info about parent of terminal	*/
  5    32 						/*         nodes of the tree.			*/
  5    33 	  2 default		bit(1) unal,	/* switch: use default requirement switch settings*/
  5    34 	  2 iacl			bit(1) unal,	/* switch: return initial ACLs for library entries*/
  5    35 
  5    36 	  2 object_info		bit(1) unal,	/* switch: return object info for object segments.*/
  5    37 	  2 quota			bit(1) unal,	/* switch: return quota information.		*/
  5    38 	  2 retain		bit(1) unal,	/* switch: print information about nodes awaiting	*/
  5    39 						/*         deletion.			*/
  5    40 
  5    41 	  2 pad			bit(10) unal,
  5    42 
  5    43 	  2 first_match		bit(1) unal,	/* switch: stop after first match		*/
  5    44 	  2 page_length		bit(1) unal,	/* switch: page length of output		*/
  5    45 
  5    46 	  2 delete		bit(1) unal,	/* switch: delete library entries		*/
  5    47 	  2 descriptor		bit(1) unal,	/* switch: library descriptor			*/
  5    48 	  2 exclude		bit(1) unal,	/* switch: exclusion search names.		*/
  5    49 
  5    50 	  2 footing		bit(1) unal,	/* switch: footing for output pages.		*/
  5    51 	  2 heading		bit(1) unal,	/* switch: heading for 1st output page.		*/
  5    52 	  2 into_path		bit(1) unal,	/* switch: path into which entries are fetched.	*/
  5    53 
  5    54 	  2 library		bit(1) unal,	/* switch: library names			*/
  5    55 	  2 list			bit(1) unal,	/* switch: list library entries		*/
  5    56 	  2 long			bit(1) unal,	/* switch: long output format required.		*/
  5    57 
  5    58 	  2 output_file		bit(1) unal,	/* switch: pathname of output file		*/
  5    59 	  2 search_names		bit(1) unal,	/* switch: search names			*/
  5    60 	  2 time			bit(1) unal,	/* switch: grace time for deletion of entries.	*/
  5    61 	Scontrol			bit(36) aligned;	/* switches: aligned copy of control switches.	*/
  5    62 
  5    63 /* END OF:	lib_Scontrol_.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
  3   346 
  3   347 
  3   348 
  3   349 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  3   350 	/*									*/
  3   351 	/*      The following entry type attributes have been defined.  Note that the types 	*/
  3   352 	/* for segments, archive components, and msf components all have the characteristic	*/
  3   353 	/* that:		mod (type, 2) = 1;						*/
  3   354 	/*									*/
  3   355 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  3   356 
  3   357 
  3   358      dcl (Tlink			init (0),
  3   359 	Tsegment			init (1),
  3   360 	Tdirectory		init (2),
  3   361 	Tmsf			init (3),
  3   362 	Tmsf_comp			init (4),
  3   363 	Tarchive			init (5),
  3   364 	Tarchive_comp		init (6)) fixed bin(17) int static options(constant);
  3   365 
  3   366 
  3   367 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  3   368 	/*									*/
  3   369 	/*      The following character string arrays identify each entry type attribute by name.	*/
  3   370 	/* Both brief and long string arrays are provided.				*/
  3   371 	/*									*/
  3   372 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  3   373 
  3   374      dcl	node_type (0:6)		char(32) varying aligned int static options(constant) init (
  3   375 				"link",
  3   376 				"segment",
  3   377 				"directory",
  3   378 				"multisegment file",
  3   379 				"multi-segment file component",
  3   380 				"archive",
  3   381 				"archive component"),
  3   382 	brief_node_type (0:6)	char(12) varying aligned int static options(constant) init (
  3   383 				"link",
  3   384 				"segment",
  3   385 				"directory",
  3   386 				"msf",
  3   387 				"msf comp",
  3   388 				"archive",
  3   389 				"arch comp");
  3   390 
  3   391 
  3   392 /*  END OF:	lib_node_.incl.pl1			  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
     1467 
     1468 
     1469 
     1470 	end lib_output_node_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    02/15/84  0819.1  lib_output_node_.pl1              >special_ldd>on>6588>lib_output_node_.pl1
1463         1    01/05/79  1321.1  lib_fcb_.incl.pl1                 >ldd>include>lib_fcb_.incl.pl1
1465         2    02/15/84  0754.6  lib_based_args_.incl.pl1          >special_ldd>on>6588>lib_based_args_.incl.pl1
1467         3    08/16/79  1752.9  lib_node_.incl.pl1                >ldd>include>lib_node_.incl.pl1
3-341        4    02/28/77  1409.3  lib_Svalid_req_.incl.pl1          >ldd>include>lib_Svalid_req_.incl.pl1
3-346        5    02/15/84  0754.6  lib_Scontrol_.incl.pl1            >special_ldd>on>6588>lib_Scontrol_.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
ASrequirements                         parameter       bit(72)                  dcl 13 ref 130 134 138 140 153 897 906
C                         4            based           fixed bin(35,0)          level 2 in structure "Dacl" dcl 3-153 in procedure
                                                                                  "lib_output_node_" set ref 1015 1017*
C                         4            based           fixed bin(35,0)          level 2 in structure "Diacl" dcl 3-209 in procedure
                                                                                  "lib_output_node_" set ref 1265 1267*
C                         4            based           fixed bin(35,0)          level 3 in structure "Dnodes" dcl 3-245 in procedure
                                                                                  "lib_output_node_" set ref 810*
C                         4            based           fixed bin(35,0)          level 2 in structure "Ddir_iacl" dcl 3-190
                                                                                  in procedure "lib_output_node_" set ref 1039 1041*
Dacl                                   based           structure                level 1 unaligned dcl 3-153
Ddir_acl                               based           structure                level 1 unaligned dcl 3-172
Ddir_iacl                              based           structure                level 1 unaligned dcl 3-190
Diacl                                  based           structure                level 1 unaligned dcl 3-209
Dnames                                 based           structure                level 1 unaligned dcl 3-230
Dnodes                                 based           structure                level 1 unaligned dcl 3-245
Dobj                                   based           structure                level 1 unaligned dcl 3-263
Dsearch_proc                           based           structure                level 1 unaligned dcl 3-311
Duser                                  based           structure                level 1 unaligned dcl 3-324
Eend_page                14            based           entry variable           level 2 dcl 1-3 ref 1366
FT                              000010 internal static char(5)                  initial array unaligned dcl 102 set ref 730* 730
Iaccess_string                  000100 automatic       fixed bin(17,0)          array dcl 25 set ref 266* 267 268 268* 270 270* 272*
                                                                                  272 272 815 815 815 815 815 815 817 817 818 818
                                                                                  818 818 818 818
Iacl                            000110 automatic       fixed bin(17,0)          dcl 25 set ref 1012* 1012 1013 1015 1022* 1023 1456*
Idir_iacl                       000111 automatic       fixed bin(17,0)          dcl 25 set ref 1037* 1037 1038 1039 1046 1048* 1457*
Ifirst_significant_digit        000106 automatic       fixed bin(17,0)          dcl 993 in procedure "cv_long_dec" set ref 998* 999
Ifirst_significant_digit        000104 automatic       fixed bin(17,0)          dcl 975 in procedure "cv_dec" set ref 981* 982
Iiacl                           000112 automatic       fixed bin(17,0)          dcl 25 set ref 1263* 1263 1264 1265 1272 1274* 1457*
Iname                           000113 automatic       fixed bin(17,0)          dcl 25 set ref 392* 395* 420 421* 422* 683* 686*
                                                                                  833* 836* 1072 1073* 1074* 1371* 1371* 1375* 1375*
                                                                                  1381* 1381* 1384* 1384* 1389* 1389* 1394* 1394*
                                                                                  1412* 1412* 1455*
Inode                                  parameter       fixed bin(17,0)          dcl 13 in procedure "lib_output_node_" set ref 130
                                                                                  380*
Inode                                  parameter       fixed bin(17,0)          dcl 1352 in procedure "out_ch2" set ref 1348 1412*
Iring                     6            based           fixed bin(17,0)          array level 2 in structure "Ddir_iacl" dcl 3-190
                                                                                  in procedure "lib_output_node_" ref 1046
Iring                     6            based           fixed bin(17,0)          array level 2 in structure "Diacl" dcl 3-209
                                                                                  in procedure "lib_output_node_" ref 1272
L                        11            based           fixed bin(17,0)          level 2 dcl 3-324 ref 648 650 650 795 795 917 917
                                                                                  1113 1115
Laccess_string                  000114 automatic       fixed bin(17,0)          dcl 25 set ref 261* 265* 268 268 270 270 607 609 609
                                                                                  817 1088
Llevel                          000116 automatic       fixed bin(17,0)          dcl 25 set ref 438 1371* 1375 1375* 1379 1381* 1384*
                                                                                  1389* 1394* 1399* 1412 1431* 1432* 1432 1433 1435*
Lname                           000115 automatic       fixed bin(17,0)          dcl 25 set ref 397* 432* 432 438 688* 688 845* 845
                                                                                  1076* 1076 1371* 1375 1375* 1379 1381* 1384* 1389*
                                                                                  1394* 1399* 1412* 1440* 1444* 1449* 1451*
Lvalue                          000107 automatic       fixed bin(17,0)          dcl 1363 set ref 1379* 1380 1380
N                         5            based           fixed bin(17,0)          level 2 in structure "Dacl" dcl 3-153 in procedure
                                                                                  "lib_output_node_" ref 1013
N                         5            based           fixed bin(17,0)          level 2 in structure "Diacl" dcl 3-209 in procedure
                                                                                  "lib_output_node_" ref 1264
N                         5            based           fixed bin(17,0)          level 2 in structure "Ddir_iacl" dcl 3-190
                                                                                  in procedure "lib_output_node_" ref 1038
Nindent                         000117 automatic       fixed bin(17,0)          dcl 25 set ref 438 1371* 1375 1375* 1379 1381* 1384*
                                                                                  1389* 1394* 1399* 1429* 1430* 1430 1439* 1443*
                                                                                  1448* 1451
Ninf                      0(04) 000124 automatic       bit(1)                   level 2 packed unaligned dcl 25 set ref 176* 733
                                                                                  734*
Ninf_quota               65            based           fixed bin(35,0)          level 3 in structure "node" dcl 3-69 in procedure
                                                                                  "lib_output_node_" set ref 176 735*
Ninf_quota               73            based           fixed bin(35,0)          level 3 in structure "node" dcl 3-69 in procedure
                                                                                  "lib_output_node_" set ref 176 735*
Nring                    16            based           fixed bin(17,0)          array level 2 in structure "Diacl" dcl 3-209
                                                                                  in procedure "lib_output_node_" ref 1272
Nring                    16            based           fixed bin(17,0)          array level 2 in structure "Ddir_iacl" dcl 3-190
                                                                                  in procedure "lib_output_node_" ref 1046
PD                        2            based           pointer                  level 2 dcl 3-69 ref 199 204 208 211 214 219 225 231
                                                                                  233 913
PDacl                           000622 automatic       pointer                  dcl 3-153 set ref 221* 225* 225* 226 1013 1015 1017
                                                                                  1022 1022
PDdir_acl                       000624 automatic       pointer                  dcl 3-172 set ref 219* 219* 220 221
PDdir_iacl                      000626 automatic       pointer                  dcl 3-190 set ref 233* 233* 234 1038 1039 1041 1046
                                                                                  1046 1048 1048
PDiacl                          000630 automatic       pointer                  dcl 3-209 set ref 231* 231* 232 1264 1265 1267 1272
                                                                                  1272 1274 1274
PDnames                         000632 automatic       pointer                  dcl 3-230 set ref 199* 199* 201 202* 392* 395* 421*
                                                                                  683* 686* 833* 836* 1073* 1371* 1371* 1375* 1375*
                                                                                  1381* 1381* 1384* 1384* 1389* 1389* 1394* 1394*
                                                                                  1412* 1412*
PDnodes                         000634 automatic       pointer                  dcl 3-245 set ref 214* 214* 216 810
PDobj                           000636 automatic       pointer                  dcl 3-263 set ref 204* 204* 207 292 293 297 302 307
                                                                                  312 314 317 321 511 511 511 513 513 662 777 777
                                                                                  780 780 1223 1223 1225 1230
PDsearch_proc                   000640 automatic       pointer                  dcl 3-311 set ref 208* 208* 210 783
PDuser                          000642 automatic       pointer                  dcl 3-324 set ref 211* 211* 213 648 650 650 795 795
                                                                                  913* 913* 915 916* 917 917 1113 1115 1115
Pfcb                                   parameter       pointer                  dcl 1-15 ref 130 134 138 140 438 897 1313 1313 1313
                                                                                  1366 1366 1366 1368 1368 1371 1375 1375 1379 1381
                                                                                  1384 1389 1394 1399 1403 1403 1405 1409 1412 1437
                                                                                  1442
Piocb                    12            based           pointer                  level 2 dcl 1-3 set ref 1371* 1375* 1381* 1384*
                                                                                  1389* 1394* 1399* 1405* 1409* 1412*
Pnext                     2            based           pointer                  level 2 in structure "Dobj" dcl 3-263 in procedure
                                                                                  "lib_output_node_" ref 207
Pnext                     2            based           pointer                  level 2 in structure "Diacl" dcl 3-209 in procedure
                                                                                  "lib_output_node_" ref 232
Pnext                     2            based           pointer                  level 2 in structure "Dacl" dcl 3-153 in procedure
                                                                                  "lib_output_node_" ref 226
Pnext                     2            based           pointer                  level 2 in structure "Dnames" dcl 3-230 in procedure
                                                                                  "lib_output_node_" ref 201
Pnext                     2            based           pointer                  level 3 in structure "Dnodes" dcl 3-245 in procedure
                                                                                  "lib_output_node_" ref 216
Pnext                     2            based           pointer                  level 2 in structure "Ddir_acl" dcl 3-172
                                                                                  in procedure "lib_output_node_" ref 220
Pnext                     2            based           pointer                  level 2 in structure "Dsearch_proc" dcl 3-311
                                                                                  in procedure "lib_output_node_" ref 210
Pnext                     2            based           pointer                  level 2 in structure "Ddir_iacl" dcl 3-190
                                                                                  in procedure "lib_output_node_" ref 234
Pnext                     2            based           pointer                  level 2 in structure "Duser" dcl 3-324 in procedure
                                                                                  "lib_output_node_" ref 213 915
Pnode                                  parameter       pointer                  dcl 3-69 set ref 130 134 138 140 153 158 160 162 162
                                                                                  166 171 172 172 173 173 175 175 176 176 182 182
                                                                                  186 186 186 188 199 199 204 208 211 214 218 219
                                                                                  225 231 233 243 243 246 249 249 250 250 251 253
                                                                                  253 257 279 280 284 329 334 358 361* 362 372 377
                                                                                  408 412* 413 447 457* 458 489 491 491 495 495 499
                                                                                  499 503 503 507 507 530 534 538 542 546 550 555
                                                                                  570 572 574 576 580 580 645 645 710 710 715 715
                                                                                  718 720 720 725 725 725 730 730 735 735 754 755
                                                                                  761 765 769 769 807 897 906 913 919 919 922 924
                                                                                  927 927 930 934 936 1120 1131 1131 1146 1148 1151
                                                                                  1153 1158 1163 1168 1173 1178 1183 1188 1196 1198
                                                                                  1203 1208 1213 1218
Pparent                                based           pointer                  level 2 dcl 3-69 ref 358 362 413 458
Pprev_parent                           parameter       pointer                  dcl 13 ref 130 358 358
Pstarname                              parameter       pointer                  dcl 2-40 set ref 130 134 138 140 392* 395* 421* 683*
                                                                                  686* 833* 836* 1073* 1371* 1371* 1375* 1375* 1381*
                                                                                  1381* 1384* 1384* 1389* 1389* 1394* 1394* 1412*
                                                                                  1412*
S                                      based           structure                level 1 dcl 4-96
Saim_audit               11(32)        based           bit(1)                   level 3 packed unaligned dcl 3-69 ref 186 279
Saim_multiple_class      11(33)        based           bit(1)                   level 3 packed unaligned dcl 3-69 ref 186 280
Saim_security_oos        11(31)        based           bit(1)                   level 3 packed unaligned dcl 3-69 ref 186 284
Scleanup                        000121 automatic       bit(1)                   initial dcl 25 set ref 25* 132* 355 1435
Scopy                    12            based           bit(1)                   level 3 packed unaligned dcl 3-69 ref 158
Sfield_blank                    000120 automatic       bit(1)                   initial dcl 25 set ref 25* 1082 1244*
Sinfo                           000122 automatic       bit(1)                   initial dcl 25 set ref 25* 136* 406 433* 673 682 845
                                                                                  1071 1077* 1437 1452
Smaster_dir              11(28)        based           bit(1)                   level 3 packed unaligned dcl 3-69 ref 171
Smode                    11            based           bit(3)                   level 3 packed unaligned dcl 3-69 ref 243 246
Snames_first                    000123 automatic       bit(1)                   initial dcl 25 set ref 25* 391 673 682 845 1069
                                                                                  1447* 1452*
Squota                          000124 automatic       structure                level 1 dcl 25 set ref 170* 181*
Sreq                      6            based           bit(72)                  level 2 dcl 3-69 ref 153 906
Srequirements                   000644 automatic       bit(72)                  dcl 4-96 set ref 153* 155 155 155 155 155 155 158
                                                                                  158 160 160 162 162 162 166 166 169 182 182 182
                                                                                  186 186 188 204 204 204 204 204 208 211 214 217
                                                                                  230 243 248 256 263 277 290 327 328 333 345 356
                                                                                  357 367 375 376 392* 395* 407 411 421* 436 440 446
                                                                                  446 447 456 476 489 490 493 494 497 498 501 502
                                                                                  505 506 509 510 528 529 532 533 536 537 540 541
                                                                                  544 545 548 549 553 554 570 571 574 575 578 579
                                                                                  584 585 607 608 611 612 615 616 619 620 623 624
                                                                                  639 640 643 644 648 649 652 653 656 657 660 661
                                                                                  673 683* 686* 757 759 760 763 764 767 768 773 774
                                                                                  777 780 783 793 795 807 809 813 814 822 823 833*
                                                                                  836* 853 868 906* 911 913 917 919 922 924 927 930
                                                                                  934 936 1014 1073* 1084 1088 1089 1093 1094 1098
                                                                                  1099 1103 1104 1108 1109 1113 1114 1118 1119 1124
                                                                                  1125 1129 1130 1136 1137 1146 1147 1151 1152 1156
                                                                                  1157 1161 1162 1166 1167 1171 1172 1176 1177 1181
                                                                                  1182 1186 1187 1196 1197 1201 1202 1206 1207 1211
                                                                                  1212 1216 1217 1221 1222 1228 1229 1233 1234 1238
                                                                                  1239 1371* 1371* 1375* 1375* 1381* 1381* 1384*
                                                                                  1384* 1389* 1389* 1394* 1394* 1412* 1412* 1433
                                                                                  1437 1452 1452 1452
Ssafety                  11(30)        based           bit(1)                   level 3 packed unaligned dcl 3-69 ref 160
Sterminal_account        11(34)        based           bit(1)                   level 3 packed unaligned dcl 3-69 ref 175 730
Sterminal_account_dir
                         11(35)        based           bit(1)                   level 3 packed unaligned dcl 3-69 ref 175 730
Stpd                            000125 automatic       bit(1)                   dcl 25 in procedure "lib_output_node_" set ref 188*
                                                                                  190* 588 589* 1141 1142*
Stpd                     11(29)        based           bit(1)                   level 3 in structure "node" packed unaligned
                                                                                  dcl 3-69 in procedure "lib_output_node_" ref 188
Svalid                    4            based           bit(72)                  level 2 in structure "node" dcl 3-69 in procedure
                                                                                  "lib_output_node_" set ref 199 372
Svalid                                 based           structure                level 1 dcl 3-343 in procedure "lib_output_node_"
Svalid_req                             based           structure                level 1 dcl 4-23
T                         1            based           fixed bin(17,0)          level 2 in structure "Dnames" dcl 3-230 in procedure
                                                                                  "lib_output_node_" ref 199
T                         1            based           fixed bin(17,0)          level 2 in structure "Ddir_iacl" dcl 3-190
                                                                                  in procedure "lib_output_node_" ref 233
T                         1            based           fixed bin(17,0)          level 2 in structure "Dobj" dcl 3-263 in procedure
                                                                                  "lib_output_node_" ref 204
T                         1            based           fixed bin(17,0)          level 2 in structure "Dacl" dcl 3-153 in procedure
                                                                                  "lib_output_node_" ref 225
T                         1            based           fixed bin(17,0)          level 2 in structure "Duser" dcl 3-324 in procedure
                                                                                  "lib_output_node_" ref 211 913
T                         1            based           fixed bin(17,0)          level 2 in structure "Ddir_acl" dcl 3-172
                                                                                  in procedure "lib_output_node_" ref 219
T                         1            based           fixed bin(17,0)          level 2 in structure "Dsearch_proc" dcl 3-311
                                                                                  in procedure "lib_output_node_" ref 208
T                         1            based           fixed bin(17,0)          level 2 in structure "Diacl" dcl 3-209 in procedure
                                                                                  "lib_output_node_" ref 231
T                        10            based           fixed bin(35,0)          level 2 in structure "node" dcl 3-69 in procedure
                                                                                  "lib_output_node_" ref 218 243 251 377 408 447 489
                                                                                  580 580 769 769 919 924 927 930 936 1131 1131 1196
T                         1            based           fixed bin(17,0)          level 3 in structure "Dnodes" dcl 3-245 in procedure
                                                                                  "lib_output_node_" ref 214
Tacl                                   constant        fixed bin(17,0)          initial dcl 3-153 ref 225
Tarchive_comp                          constant        fixed bin(17,0)          initial dcl 3-358 ref 489 919 1196
Tdir_acl                               constant        fixed bin(17,0)          initial dcl 3-172 ref 219
Tdir_iacl                              constant        fixed bin(17,0)          initial dcl 3-190 ref 233
Tdirectory                             constant        fixed bin(17,0)          initial dcl 3-358 ref 218 243 251 580 769 1131
Tiacl                                  constant        fixed bin(17,0)          initial dcl 3-209 ref 231
Tlink                                  constant        fixed bin(17,0)          initial dcl 3-358 ref 927
Tmsf                                   constant        fixed bin(17,0)          initial dcl 3-358 ref 580 769 1131
Tnames                                 constant        fixed bin(17,0)          initial dcl 3-230 ref 199
Tnodes                                 constant        fixed bin(17,0)          initial dcl 3-245 ref 214
Tobj                                   constant        fixed bin(17,0)          initial dcl 3-263 ref 204
Tsearch_proc                           constant        fixed bin(17,0)          initial dcl 3-311 ref 208
Tuser                                  constant        fixed bin(17,0)          initial dcl 3-324 ref 211 913
access_class              0(19)        based           bit(1)                   level 2 in structure "S" packed unaligned dcl 4-96
                                                                                  in procedure "lib_output_node_" set ref 256 263*
                                                                                  607 608* 813 814* 1088 1089*
access_class             35            based           bit(72)                  level 2 in structure "node" dcl 3-69 in procedure
                                                                                  "lib_output_node_" set ref 257*
access_string                   000126 automatic       char(300)                unaligned dcl 25 set ref 257* 260* 261 261 263 265
                                                                                  272 609 609 815 815 818 818 1090
acl                       0(31)        based           bit(1)                   level 2 packed unaligned dcl 4-96 set ref 217 673
                                                                                  853 1014* 1084 1437
acls                     26            based           structure                array level 2 in structure "Diacl" unaligned
                                                                                  dcl 3-209 in procedure "lib_output_node_" set ref
                                                                                  1274 1274
acls                     26            based           structure                array level 2 in structure "Ddir_iacl" unaligned
                                                                                  dcl 3-190 in procedure "lib_output_node_" set ref
                                                                                  1048 1048
acls                      6            based           structure                array level 2 in structure "Dacl" unaligned
                                                                                  dcl 3-153 in procedure "lib_output_node_" set ref
                                                                                  1022 1022
addr                                                   builtin function         dcl 81 ref 155 155 155 155 155 155 158 158 160 160
                                                                                  162 162 162 166 166 169 182 182 182 186 186 188
                                                                                  199 202 204 204 204 204 204 208 211 214 217 230
                                                                                  243 248 256 263 277 290 327 328 333 345 356 357
                                                                                  367 372 375 376 407 411 436 440 446 446 447 456
                                                                                  476 489 490 493 494 497 498 501 502 505 506 509
                                                                                  510 528 529 532 533 536 537 540 541 544 545 548
                                                                                  549 553 554 570 571 574 575 578 579 584 585 607
                                                                                  608 611 612 615 616 619 620 623 624 639 640 643
                                                                                  644 648 649 652 653 656 657 660 661 673 757 759
                                                                                  760 763 764 767 768 773 774 777 780 783 793 795
                                                                                  807 809 813 814 822 823 853 868 911 913 916 917
                                                                                  919 922 924 927 930 934 936 1014 1022 1022 1048
                                                                                  1048 1084 1088 1089 1093 1094 1098 1099 1103 1104
                                                                                  1108 1109 1113 1114 1118 1119 1124 1125 1129 1130
                                                                                  1136 1137 1146 1147 1151 1152 1156 1157 1161 1162
                                                                                  1166 1167 1171 1172 1176 1177 1181 1182 1186 1187
                                                                                  1196 1197 1201 1202 1206 1207 1211 1212 1216 1217
                                                                                  1221 1222 1228 1229 1233 1234 1238 1239 1274 1274
                                                                                  1433 1437 1452 1452 1452
aim                       0(09)        based           bit(1)                   level 2 in structure "S" packed unaligned dcl 4-96
                                                                                  in procedure "lib_output_node_" set ref 186 186*
                                                                                  277 611 612* 822 823* 1093 1094*
aim                             000241 automatic       varying char(100)        dcl 25 in procedure "lib_output_node_" set ref 278*
                                                                                  279* 281 281* 281 282* 282 285 285* 285 286* 286
                                                                                  611 613* 824* 1093 1095
attributes                      000273 automatic       varying char(100)        dcl 25 set ref 291* 292* 292 294 294* 294 295* 295
                                                                                  299 299* 299 300* 300 304 304* 304 305* 305 309
                                                                                  309* 309 310* 310 313 313* 313 314* 314 318 318*
                                                                                  318 319* 319 322 322* 322 323* 323 325 325* 652
                                                                                  654* 793* 1233 1235
author                   14            based           varying char(32)         level 2 in structure "node" dcl 3-69 in procedure
                                                                                  "lib_output_node_" set ref 182 570 572* 761* 1146
                                                                                  1148
author                    0(12)        based           bit(1)                   level 2 in structure "S" packed unaligned dcl 4-96
                                                                                  in procedure "lib_output_node_" set ref 182 570
                                                                                  571* 759 760* 1146 1147*
binary                                                 builtin function         dcl 81 ref 243 246 249 249 250 250 253 253 645 645
                                                                                  730 730 1120
bit_count                 0(24)        based           bit(1)                   level 2 in structure "S" packed unaligned dcl 4-96
                                                                                  in procedure "lib_output_node_" set ref 532 533*
                                                                                  1161 1162*
bit_count                43            based           fixed bin(35,0)          level 2 in structure "node" dcl 3-69 in procedure
                                                                                  "lib_output_node_" set ref 534* 1163*
bit_count_author         44            based           varying char(32)         level 2 in structure "node" dcl 3-69 in procedure
                                                                                  "lib_output_node_" set ref 182 574 576* 765* 1151
                                                                                  1153
bit_count_author          0(25)        based           bit(1)                   level 2 in structure "S" packed unaligned dcl 4-96
                                                                                  in procedure "lib_output_node_" set ref 182 182*
                                                                                  574 575* 763 764* 1151 1152*
blank_field                            constant        char(108)                initial dcl 1065 ref 1245
blank_level                            constant        char(2)                  initial dcl 1290 ref 1293
bound                    20(01)        based           bit(1)                   level 4 packed unaligned dcl 3-263 ref 292 511 1223
brief_node_type                 000023 constant        varying char(12)         initial array dcl 3-374 ref 377 408 447 924 930 936
code                            000325 automatic       fixed bin(35,0)          dcl 25 set ref 257* 258 259*
comment                  64            based           varying char(64)         level 2 dcl 3-263 set ref 780 780*
compile_time             26            based           fixed bin(71,0)          level 3 dcl 3-263 set ref 511* 511* 513* 513* 1223*
                                                                                  1225*
compiler                 23            based           char(8)                  level 3 packed unaligned dcl 3-263 set ref 662* 1230
compiler_name             0(34)        based           bit(1)                   level 2 packed unaligned dcl 4-96 set ref 155 204
                                                                                  660 661* 1228 1229*
compiler_options          1            based           bit(1)                   level 2 packed unaligned dcl 4-96 ref 155 204 780
compiler_version          0(35)        based           bit(1)                   level 2 packed unaligned dcl 4-96 ref 155 204 777
convert_authorization_$to_string_short
                                000014 constant        entry                    external dcl 84 ref 257
convert_binary_integer_$long_octal_string
                                000016 constant        entry                    external dcl 84 ref 1120
convert_binary_integer_$octal_string
                                000020 constant        entry                    external dcl 84 ref 314 550 555 645 1183 1188
convert_status_code_            000022 constant        entry                    external dcl 84 ref 259 810 1017 1041 1267
copy                      0(10)        based           bit(1)                   level 2 packed unaligned dcl 4-96 set ref 158 158*
                                                                                  639 640* 1124 1125*
current_length           40            based           fixed bin(35,0)          level 2 in structure "node" dcl 3-69 in procedure
                                                                                  "lib_output_node_" set ref 162 538* 1168*
current_length            0(21)        based           bit(1)                   level 2 in structure "S" packed unaligned dcl 4-96
                                                                                  in procedure "lib_output_node_" set ref 162 536
                                                                                  537* 1166 1167*
cv_acl                          000616 automatic       entry variable           dcl 84 set ref 222* 227* 1022
cv_acl_                         000024 constant        entry                    external dcl 84 ref 227 1274
cv_dir_acl_                     000026 constant        entry                    external dcl 84 ref 222 1048
cversion                 43            based           varying char(64)         level 2 dcl 3-263 set ref 777 777*
date                                   parameter       bit(36)                  unaligned dcl 953 set ref 950 957*
date_string                     000100 automatic       char(16)                 dcl 953 set ref 957* 959 964* 966
date_time_                      000030 constant        entry                    external dcl 84 ref 964
date_time_$fstime               000032 constant        entry                    external dcl 84 ref 957
delete                    1(32)        based           bit(1)                   level 2 packed unaligned dcl 3-343 ref 372
dimension                                              builtin function         dcl 81 ref 267 817
dir                             000326 automatic       varying char(168)        dcl 25 set ref 361* 362 362* 362 365* 365 366* 412*
                                                                                  415 415* 415 417* 417 424 425* 425 426* 426 427*
                                                                                  427 428 428 429* 429 435* 438 439* 452* 453 453
                                                                                  454* 454 457* 460 460* 460 462* 462 465 466* 466
                                                                                  467* 467 468* 468 469 469 470* 470 473* 475* 757*
directory                66            based           structure                level 2 unaligned dcl 3-69
dtc                       0(33)        based           bit(1)                   level 2 packed unaligned dcl 4-96 set ref 155 204
                                                                                  509 510* 1221 1222*
dtd                       0(14)        based           bit(1)                   level 2 in structure "S" packed unaligned dcl 4-96
                                                                                  in procedure "lib_output_node_" set ref 505 506*
                                                                                  1216 1217*
dtd                      26            based           bit(36)                  level 2 in structure "node" packed unaligned
                                                                                  dcl 3-69 in procedure "lib_output_node_" set ref
                                                                                  507* 507* 1218*
dtem                      0(13)        based           bit(1)                   level 2 in structure "S" packed unaligned dcl 4-96
                                                                                  in procedure "lib_output_node_" set ref 489 490*
                                                                                  497 498* 919 927 1196 1197* 1206 1207*
dtem                     25            based           bit(36)                  level 2 in structure "node" packed unaligned
                                                                                  dcl 3-69 in procedure "lib_output_node_" set ref
                                                                                  491* 491* 499* 499* 919* 927* 1198* 1208*
dtm                      27            based           bit(36)                  level 2 in structure "node" packed unaligned
                                                                                  dcl 3-69 in procedure "lib_output_node_" set ref
                                                                                  495* 495* 922* 934* 1203*
dtm                       0(16)        based           bit(1)                   level 2 in structure "S" packed unaligned dcl 4-96
                                                                                  in procedure "lib_output_node_" set ref 493 494*
                                                                                  922 934 1201 1202*
dttrp                    64            based           bit(36)                  level 3 in structure "node" packed unaligned
                                                                                  dcl 3-69 in procedure "lib_output_node_" set ref
                                                                                  725* 725*
dttrp                    72            based           bit(36)                  level 3 in structure "node" packed unaligned
                                                                                  dcl 3-69 in procedure "lib_output_node_" set ref
                                                                                  725*
dttrp                     0(06) 000124 automatic       bit(1)                   level 2 in structure "Squota" packed unaligned
                                                                                  dcl 25 in procedure "lib_output_node_" set ref
                                                                                  178* 723 724*
dtu                       0(17)        based           bit(1)                   level 2 in structure "S" packed unaligned dcl 4-96
                                                                                  in procedure "lib_output_node_" set ref 501 502*
                                                                                  1211 1212*
dtu                      30            based           bit(36)                  level 2 in structure "node" packed unaligned
                                                                                  dcl 3-69 in procedure "lib_output_node_" set ref
                                                                                  503* 503* 1213*
e                               000401 automatic       fixed bin(17,0)          dcl 25 set ref 1306* 1312* 1320* 1326* 1332* 1338*
                                                                                  1344* 1350* 1370
ent                             000402 automatic       varying char(32)         dcl 25 set ref 361* 362 365 392* 393 394* 395* 412*
                                                                                  415 417 421* 423 457* 460 462 683* 684 685* 686*
                                                                                  833* 834 835* 836* 941* 942* 1073* 1075
entry_bound              56            based           fixed bin(35,0)          level 2 in structure "node" dcl 3-69 in procedure
                                                                                  "lib_output_node_" set ref 555* 1188*
entry_bound              21            based           fixed bin(35,0)          level 3 in structure "Dobj" dcl 3-263 in procedure
                                                                                  "lib_output_node_" set ref 314*
entry_bound               0(27)        based           bit(1)                   level 2 in structure "S" packed unaligned dcl 4-96
                                                                                  in procedure "lib_output_node_" set ref 553 554*
                                                                                  1186 1187*
fcb                                    based           structure                level 1 unaligned dcl 1-3
field                           000413 automatic       char(108)                unaligned dcl 25 in procedure "lib_output_node_" set
                                                                                  ref 676* 677 678* 679* 855* 856 857 857 858*
field                           000100 automatic       char(108)                unaligned dcl 1011 in procedure "get_acl" set ref
                                                                                  1022* 1023 1024
field                                  parameter       char(108)                unaligned dcl 1352 in procedure "out_ch2" set ref
                                                                                  1318 1324 1389* 1394*
field                           000100 automatic       char(108)                dcl 1065 in procedure "get_field" set ref 1085*
                                                                                  1090* 1095* 1100* 1105* 1110* 1115* 1120* 1126*
                                                                                  1131* 1133* 1138* 1143* 1148* 1153* 1158* 1163*
                                                                                  1168* 1173* 1178* 1183* 1188* 1193* 1198* 1203*
                                                                                  1208* 1213* 1218* 1223* 1225* 1230* 1235* 1240*
                                                                                  1248
flag                            000446 automatic       char(1)                  dcl 25 in procedure "lib_output_node_" set ref 372*
                                                                                  374* 380*
flag                                   parameter       char(1)                  dcl 1352 in procedure "out_ch2" set ref 1348 1412*
format                   20            based           structure                level 3 dcl 3-263
gate                     20(05)        based           bit(1)                   level 4 packed unaligned dcl 3-263 ref 312
header                                 based           structure                level 2 unaligned dcl 3-245
i                               000671 automatic       fixed bin(17,0)          dcl 1033 in procedure "get_dir_iacl" set ref 1046*
                                                                                  1046 1046* 1049 1050
i                               000110 automatic       fixed bin(17,0)          dcl 1363 in procedure "out_ch2" set ref 1380* 1381
                                                                                  1381 1384 1384
i                               000447 automatic       fixed bin(17,0)          dcl 25 in procedure "lib_output_node_" set ref 428*
                                                                                  429 453* 454 469* 470
i                               000715 automatic       fixed bin(17,0)          dcl 1259 in procedure "get_iacl" set ref 1272* 1272
                                                                                  1272* 1275 1276
iacc                            000450 automatic       fixed bin(17,0)          dcl 25 set ref 267* 268 268 270 270 272 272 272*
                                                                                  817* 817* 818 818 818 818 818 818*
iacl                      0(32)        based           bit(1)                   level 2 packed unaligned dcl 4-96 ref 230 868
iacle                           000656 automatic       char(42)                 unaligned dcl 1033 in procedure "get_dir_iacl" set
                                                                                  ref 1048* 1051 1053
iacle                           000702 automatic       char(42)                 unaligned dcl 1259 in procedure "get_iacl" set ref
                                                                                  1274* 1277 1279
iacle                           000451 automatic       char(104)                unaligned dcl 25 in procedure "lib_output_node_" set
                                                                                  ref 869* 870 872* 873* 874 875* 876* 879* 880 882*
                                                                                  883* 884 885* 886*
index                                                  builtin function         dcl 81 ref 265 1380
info                     12            based           char                     level 2 in structure "Duser" packed unaligned
                                                                                  dcl 3-324 in procedure "lib_output_node_" set ref
                                                                                  650* 795* 917 1115
info                      4            based           structure                level 2 in structure "Dobj" unaligned dcl 3-263
                                                                                  in procedure "lib_output_node_"
ioa_$ioa_switch                 000034 constant        entry                    external dcl 84 ref 1371 1375 1381 1384 1389 1394
                                                                                  1399 1405 1409 1412
kids_error                0(05)        based           bit(1)                   level 2 packed unaligned dcl 4-96 ref 214 809
label                     4            based           char(18)                 level 2 in structure "Duser" packed unaligned
                                                                                  dcl 3-324 in procedure "lib_output_node_" ref 650
                                                                                  795 1115
label                                  parameter       char                     unaligned dcl 1352 in procedure "out_ch2" set ref
                                                                                  1304 1310 1318 1324 1330 1371* 1375* 1381* 1389*
                                                                                  1394* 1399*
length                                                 builtin function         dcl 81 ref 261 281 285 294 299 304 309 313 318 322
                                                                                  325 330 331 335 424 428 438 453 465 469 570 574
                                                                                  578 584 611 652 718 777 780 1093 1129 1136 1146
                                                                                  1151 1233 1313 1375
level                     1(34)        based           bit(1)                   level 2 in structure "S" packed unaligned dcl 4-96
                                                                                  in procedure "lib_output_node_" ref 1433
level                                  parameter       fixed bin(35,0)          dcl 13 in procedure "lib_output_node_" set ref 130
                                                                                  134 138 140 411 451 757 897 1296* 1429 1429 1431
                                                                                  1431
level_string                    000106 automatic       char(2)                  unaligned dcl 1290 set ref 1296* 1297
level_suppressed                000503 automatic       bit(1)                   dcl 25 set ref 1293 1295* 1433*
lib_next_name_                  000036 constant        entry                    external dcl 84 ref 392 395 421 683 686 833 836 1073
                                                                                  1371 1371 1375 1375 1381 1381 1384 1384 1389 1389
                                                                                  1394 1394 1412 1412
lib_node_path_                  000040 constant        entry                    external dcl 84 ref 361 412 457
line_length              23            based           fixed bin(17,0)          level 2 dcl 1-3 ref 438 1313 1375 1379 1437 1442
line_no                  24            based           fixed bin(17,0)          level 2 dcl 1-3 set ref 1313* 1313 1366 1368* 1368
                                                                                  1403 1403*
link_node                              based           structure                level 1 unaligned dcl 3-30
link_target               0(15)        based           bit(1)                   level 2 in structure "S" packed unaligned dcl 4-96
                                                                                  in procedure "lib_output_node_" ref 807
link_target              27            based           varying char(168)        level 2 in structure "link_node" dcl 3-30
                                                                                  in procedure "lib_output_node_" set ref 807*
links_in_text            20(07)        based           bit(1)                   level 4 packed unaligned dcl 3-263 ref 321
long                            000504 automatic       char(100)                unaligned dcl 25 set ref 259* 260 810* 811* 1017*
                                                                                  1018 1041* 1042 1267* 1268
long_date                              parameter       fixed bin(71,0)          dcl 953 set ref 961 964*
lv_name                         000545 automatic       varying char(32)         dcl 25 set ref 331* 335* 578 580* 582* 769* 771*
                                                                                  1129 1131 1133
lvid                      0(28)        based           bit(1)                   level 2 in structure "S" packed unaligned dcl 4-96
                                                                                  in procedure "lib_output_node_" set ref 188 333
                                                                                  578 579* 767 768* 1129 1130*
lvid                     75            based           bit(36)                  level 2 in structure "node" packed unaligned
                                                                                  dcl 3-69 in procedure "lib_output_node_" set ref
                                                                                  334*
lvname                          000535 automatic       char(32)                 unaligned dcl 25 set ref 329* 331 331 331 334* 335
                                                                                  335 335
master_dir                      000124 automatic       bit(1)                   level 2 packed unaligned dcl 25 set ref 171* 592
                                                                                  593* 1191 1192*
matching_names            0(01)        based           bit(1)                   level 2 packed unaligned dcl 4-96 ref 1452
max                                                    builtin function         dcl 81 ref 1430 1432
max_length               41            based           fixed bin(35,0)          level 2 in structure "node" dcl 3-69 in procedure
                                                                                  "lib_output_node_" set ref 166 546* 1178*
max_length                0(22)        based           bit(1)                   level 2 in structure "S" packed unaligned dcl 4-96
                                                                                  in procedure "lib_output_node_" set ref 166 166*
                                                                                  544 545* 1176 1177*
mdc_$find_lvname                000042 constant        entry                    external dcl 84 ref 334
mdc_$find_volname               000044 constant        entry                    external dcl 84 ref 329
min                                                    builtin function         dcl 81 ref 1429 1431
mode                      0(07)        based           bit(1)                   level 2 in structure "S" packed unaligned dcl 4-96
                                                                                  in procedure "lib_output_node_" set ref 243 615
                                                                                  616* 1098 1099*
mode                            000556 automatic       char(4)                  unaligned dcl 25 in procedure "lib_output_node_" set
                                                                                  ref 243* 246* 617* 1100
msf_indicator             0(23)        based           bit(1)                   level 2 in structure "S" packed unaligned dcl 4-96
                                                                                  in procedure "lib_output_node_" set ref 528 529*
                                                                                  1156 1157*
msf_indicator            42            based           fixed bin(35,0)          level 2 in structure "node" dcl 3-69 in procedure
                                                                                  "lib_output_node_" set ref 530* 1158*
name                                   parameter       varying char(32)         dcl 1352 in procedure "out_ch2" set ref 1330 1399*
name                                   parameter       char(32)                 unaligned dcl 13 in procedure "lib_output_node_" ref
                                                                                  897 941
names                     0(02)        based           bit(1)                   level 2 in structure "Svalid" packed unaligned
                                                                                  dcl 3-343 in procedure "lib_output_node_" ref 199
names                     0(02)        based           bit(1)                   level 2 in structure "S" packed unaligned dcl 4-96
                                                                                  in procedure "lib_output_node_" ref 1452
new_line                  1(35)        based           bit(1)                   level 2 packed unaligned dcl 4-96 ref 345 367 911
node                                   based           structure                level 1 unaligned dcl 3-69
not_ascii                 1(02)        based           bit(1)                   level 2 packed unaligned dcl 4-96 set ref 155* 656
                                                                                  657* 1238 1239*
null                                                   builtin function         dcl 81 ref 358 362 413 458
null_name_descriptor            000000 constant        structure                level 1 dcl 102 set ref 202
null_user_descriptor            000006 constant        structure                level 1 dcl 102 set ref 916
number                                 parameter       fixed bin(71,0)          dcl 993 in procedure "cv_long_dec" ref 990 997
number                                 parameter       fixed bin(35,0)          dcl 975 in procedure "cv_dec" ref 972 980
number_string                   000100 automatic       picture(13)              unaligned dcl 975 in procedure "cv_dec" set ref 980*
                                                                                  981 982
number_string                   000100 automatic       picture(23)              unaligned dcl 993 in procedure "cv_long_dec" set ref
                                                                                  997* 998 999
object_info               1(01)        based           bit(1)                   level 2 packed unaligned dcl 4-96 set ref 155 204
                                                                                  290 652 653* 793 1233 1234*
offset                    0(26)        based           bit(1)                   level 2 in structure "S" packed unaligned dcl 4-96
                                                                                  in procedure "lib_output_node_" set ref 548 549*
                                                                                  1181 1182*
offset                   55            based           fixed bin(35,0)          level 2 in structure "node" dcl 3-69 in procedure
                                                                                  "lib_output_node_" set ref 550* 1183*
old_format               20            based           bit(1)                   level 4 packed unaligned dcl 3-263 ref 293
page_text_length         21            based           fixed bin(17,0)          level 2 dcl 1-3 ref 1366
path                                   parameter       varying char(168)        dcl 13 set ref 897 942*
pathname                  0(03)        based           bit(1)                   level 2 packed unaligned dcl 4-96 set ref 356 357*
                                                                                  411 436* 440* 446 456 476* 757
primary_name                           based           bit(1)                   level 2 packed unaligned dcl 4-96 ref 1452
procedure                20(03)        based           bit(1)                   level 4 packed unaligned dcl 3-263 ref 302
pv_name                         000567 automatic       varying char(32)         dcl 25 set ref 330* 584 586* 775* 1136 1138
pvid                     74            based           bit(36)                  level 2 in structure "node" packed unaligned
                                                                                  dcl 3-69 in procedure "lib_output_node_" set ref
                                                                                  329*
pvid                      0(29)        based           bit(1)                   level 2 in structure "S" packed unaligned dcl 4-96
                                                                                  in procedure "lib_output_node_" set ref 327 328*
                                                                                  584 585* 773 774* 1136 1137*
pvname                          000557 automatic       char(32)                 unaligned dcl 25 set ref 329* 330 330 330
quota                     0(01) 000124 automatic       bit(1)                   level 2 in structure "Squota" packed unaligned
                                                                                  dcl 25 in procedure "lib_output_node_" set ref
                                                                                  174* 708 709*
quota                    60            based           fixed bin(35,0)          level 3 in structure "node" dcl 3-69 in procedure
                                                                                  "lib_output_node_" set ref 173 710*
quota                    66            based           fixed bin(35,0)          level 3 in structure "node" dcl 3-69 in procedure
                                                                                  "lib_output_node_" set ref 173 710*
quota                     0(30)        based           bit(1)                   level 2 in structure "S" packed unaligned dcl 4-96
                                                                                  in procedure "lib_output_node_" ref 169
quota_used               61            based           fixed bin(35,0)          level 3 in structure "node" dcl 3-69 in procedure
                                                                                  "lib_output_node_" set ref 172 715*
quota_used               67            based           fixed bin(35,0)          level 3 in structure "node" dcl 3-69 in procedure
                                                                                  "lib_output_node_" set ref 172 715*
quota_used                0(02) 000124 automatic       bit(1)                   level 2 in structure "Squota" packed unaligned
                                                                                  dcl 25 in procedure "lib_output_node_" set ref
                                                                                  172* 713 714*
r                               000672 automatic       picture(1)               unaligned dcl 1033 in procedure "get_dir_iacl" set
                                                                                  ref 1050* 1051
r                               000716 automatic       picture(1)               unaligned dcl 1259 in procedure "get_iacl" set ref
                                                                                  1276* 1277
rb                        0(18)        based           bit(1)                   level 2 in structure "S" packed unaligned dcl 4-96
                                                                                  in procedure "lib_output_node_" set ref 248 619
                                                                                  620* 1103 1104*
rb                       31            based           fixed bin(3,0)           array level 2 in structure "node" dcl 3-69
                                                                                  in procedure "lib_output_node_" ref 249 249 250
                                                                                  250 253 253
rbs                             000600 automatic       varying char(12)         dcl 25 set ref 249* 250* 250 252* 252 253* 253 621*
                                                                                  1105
records_used              0(20)        based           bit(1)                   level 2 in structure "S" packed unaligned dcl 4-96
                                                                                  in procedure "lib_output_node_" set ref 162 162*
                                                                                  540 541* 1171 1172*
records_used             37            based           fixed bin(35,0)          level 2 in structure "node" dcl 3-69 in procedure
                                                                                  "lib_output_node_" set ref 162 542* 1173*
relocatable              20(02)        based           bit(1)                   level 4 packed unaligned dcl 3-263 ref 307
reverse                                                builtin function         dcl 81 ref 261 272 330 331 335 428 453 469 1380
root_search_proc          1(04)        based           bit(1)                   level 2 packed unaligned dcl 4-96 ref 208 783
safety                    0(08)        based           bit(1)                   level 2 packed unaligned dcl 4-96 set ref 160 160*
                                                                                  623 624* 1108 1109*
saved_Iname                     000604 automatic       fixed bin(17,0)          dcl 25 set ref 420* 422 1072* 1074
search                                                 builtin function         dcl 81 ref 272
search_proc               4            based           varying char(65)         level 2 dcl 3-311 set ref 783*
segment                  60            based           structure                level 2 unaligned dcl 3-69
separate_static          20(06)        based           bit(1)                   level 4 packed unaligned dcl 3-263 ref 317
short                           000606 automatic       char(8)                  unaligned dcl 25 set ref 259* 810* 1017* 1041* 1267*
standard                 20(04)        based           bit(1)                   level 4 packed unaligned dcl 3-263 ref 297
status_data_$dir_mode           000046 external static varying char(4)          array dcl 102 ref 243
status_data_$mode               000050 external static varying char(4)          array dcl 102 ref 246
string                                                 builtin function         dcl 81 set ref 170* 181*
substr                                                 builtin function         dcl 81 set ref 272 330 331 335 426 429 454 459* 464*
                                                                                  467 470 609 609 815 815 818 818 854 854 857 857
                                                                                  940* 982 999 1380 1381 1381 1384 1384
switches                 11            based           structure                level 2 packed unaligned dcl 3-69
sys_info$max_seg_size           000052 external static fixed bin(35,0)          dcl 102 ref 166
terminal_account          0(03) 000124 automatic       bit(1)                   level 2 packed unaligned dcl 25 set ref 175* 728
                                                                                  729*
trp                       0(05) 000124 automatic       bit(1)                   level 2 in structure "Squota" packed unaligned
                                                                                  dcl 25 in procedure "lib_output_node_" set ref
                                                                                  177* 718 719* 752 753*
trp                      62            based           fixed bin(71,0)          level 3 in structure "node" dcl 3-69 in procedure
                                                                                  "lib_output_node_" set ref 718* 720* 754*
trp                      70            based           fixed bin(71,0)          level 3 in structure "node" dcl 3-69 in procedure
                                                                                  "lib_output_node_" set ref 720* 755*
type                      0(06)        based           bit(1)                   level 2 in structure "S" packed unaligned dcl 4-96
                                                                                  in procedure "lib_output_node_" set ref 375 376*
                                                                                  407 446 447 924 930 936
type                            000610 automatic       char(20)                 unaligned dcl 25 in procedure "lib_output_node_" set
                                                                                  ref 377* 379* 380* 408* 409* 414* 419* 435* 439*
                                                                                  447* 449* 459* 464* 475* 757* 917* 919* 922* 924*
                                                                                  926* 927* 930* 932* 934* 936* 938* 940* 942*
type                                   parameter       char(20)                 unaligned dcl 1352 in procedure "out_ch2" set ref
                                                                                  1348 1412*
unique_id                12(01)        based           bit(36)                  level 2 in structure "node" packed unaligned
                                                                                  dcl 3-69 in procedure "lib_output_node_" ref 645
                                                                                  645 1120
unique_id                 0(11)        based           bit(1)                   level 2 in structure "S" packed unaligned dcl 4-96
                                                                                  in procedure "lib_output_node_" set ref 643 644*
                                                                                  1118 1119*
user                      1(03)        based           bit(1)                   level 2 packed unaligned dcl 4-96 set ref 211 648
                                                                                  649* 795 913 917 1113 1114*
value_ch                               parameter       char                     unaligned dcl 1352 set ref 1304 1318 1371* 1389*
value_vc                               parameter       varying char             dcl 1352 set ref 1310 1313 1324 1330 1342 1375 1375*
                                                                                  1380 1381 1381 1384 1384 1394* 1399* 1409*
verify                                                 builtin function         dcl 81 ref 261 330 331 335 428 453 469 981 998

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
D                                      based           structure                level 1 unaligned dcl 3-146
Lacl                                   automatic       fixed bin(17,0)          dcl 25
Luser                                  automatic       fixed bin(17,0)          dcl 3-324
Nacls                                  automatic       fixed bin(17,0)          dcl 3-153
Ndir_acls                              automatic       fixed bin(17,0)          dcl 3-172
Ndir_iacls                             automatic       fixed bin(17,0)          dcl 3-190
Niacls                                 automatic       fixed bin(17,0)          dcl 3-209
Nnames                                 automatic       fixed bin(17,0)          dcl 3-230
Nnodes                                 automatic       fixed bin(17,0)          dcl 3-245
PD                                     automatic       pointer                  dcl 3-146
Pexclude                               automatic       pointer                  dcl 2-50
Plibrary                               automatic       pointer                  dcl 2-29
Sc                                     based           structure                level 1 dcl 5-20
Scontrol                               automatic       bit(36)                  dcl 5-20
Sreq                                   based           structure                level 1 dcl 3-343
Tarchive                               internal static fixed bin(17,0)          initial dcl 3-358
Tmsf_comp                              internal static fixed bin(17,0)          initial dcl 3-358
Tsegment                               internal static fixed bin(17,0)          initial dcl 3-358
Vacl_1                                 internal static fixed bin(17,0)          initial dcl 3-153
Vdir_acl_1                             internal static fixed bin(17,0)          initial dcl 3-172
Vdir_iacl_1                            internal static fixed bin(17,0)          initial dcl 3-190
Vfcb_1                                 internal static fixed bin(17,0)          initial dcl 1-16
Viacl_1                                internal static fixed bin(17,0)          initial dcl 3-209
Vnames_1                               internal static fixed bin(17,0)          initial dcl 3-230
Vnodes_1                               internal static fixed bin(17,0)          initial dcl 3-245
Vobj_1                                 internal static fixed bin(17,0)          initial dcl 3-263
Vsearch_proc_1                         internal static fixed bin(17,0)          initial dcl 3-311
Vuser_1                                internal static fixed bin(17,0)          initial dcl 3-324
exclude                                based           structure                level 1 dcl 2-42
library                                based           structure                level 1 dcl 2-22
node_type                              internal static varying char(32)         initial array dcl 3-374
starname                               based           structure                level 1 dcl 2-32
value_no                               automatic       fixed bin(35,0)          dcl 1352

NAMES DECLARED BY EXPLICIT CONTEXT.
CLEANUP_PATH                    003224 constant        label                    dcl 361 ref 358
bad_access_class                002164 constant        label                    dcl 259
cleanup                         001220 constant        entry                    external dcl 130
common                          014720 constant        label                    dcl 1366 ref 1307 1315 1321 1327 1333 1339 1345
cross_reference                 011437 constant        entry                    external dcl 897
cv_date                         011736 constant        entry                    internal dcl 950 ref 491 491 495 495 499 499 503 503
                                                                                  507 507 725 725 725 919 922 927 934 1198 1203 1208
                                                                                  1213 1218
cv_dec                          012021 constant        entry                    internal dcl 972 ref 249 250 253 530 534 538 542 546
                                                                                  710 710 715 715 735 735 1158 1163 1168 1173 1178
                                                                                  1296
cv_long_date                    011767 constant        entry                    internal dcl 961 ref 511 511 513 513 1223 1225
cv_long_dec                     012070 constant        entry                    internal dcl 990 ref 718 720 720 754 755
get_acl                         012137 constant        entry                    internal dcl 1008 ref 676 679 854 854 855 858 1085
get_dir_iacl                    012313 constant        entry                    internal dcl 1031 ref 879 883 886
get_field                       012516 constant        entry                    internal dcl 1062 ref 427 452 468 491 491 495 495
                                                                                  499 499 503 503 507 507 511 511 513 513 530 530
                                                                                  534 534 538 538 542 542 546 546 550 550 555 555
                                                                                  572 572 576 576 580 580 582 582 586 586 590 590
                                                                                  594 594 609 609 613 613 617 617 621 621 625 625
                                                                                  641 641 645 645 650 650 654 654 658 658 662 662
get_iacl                        014232 constant        entry                    internal dcl 1257 ref 869 873 876
get_level                       014435 constant        entry                    internal dcl 1287 ref 1371 1371 1375 1375 1381 1381
                                                                                  1384 1384 1389 1389 1394 1394 1399 1399
info                            001236 constant        entry                    external dcl 134
lib_output_node_                001203 constant        entry                    external dcl 11
map                             001251 constant        entry                    external dcl 138
out                             000013 constant        label                    array(8) dcl 1371 ref 1370
out_ch2                         014477 constant        entry                    internal dcl 1304 ref 409 754 755 795 811 815 818
                                                                                  854 857 872 875 882 885
out_ch3                         014561 constant        entry                    internal dcl 1318 ref 491 495 499 503 507 511 513
                                                                                  530 534 538 542 546 550 555 590 594 609 617 625
                                                                                  641 645 650 658 662 678 710 715 720 725 730 735
out_cln                         014710 constant        entry                    internal dcl 1348 ref 380
out_name                        014632 constant        entry                    internal dcl 1330 ref 394 685 835 942
out_nl                          014656 constant        entry                    internal dcl 1336 ref 345 367 911
out_pn                          014670 constant        entry                    internal dcl 1342 ref 366
out_vc2                         014524 constant        entry                    internal dcl 1310 ref 435 439 475 757 761 765 769
                                                                                  771 775 777 780 783 793 807 824
out_vc3                         014606 constant        entry                    internal dcl 1324 ref 572 576 580 582 586 613 621
                                                                                  654
print                           001262 constant        entry                    external dcl 140
return                          014224 constant        label                    dcl 1248 ref 1086 1091 1096 1101 1106 1111 1116 1122
                                                                                  1127 1134 1139 1144 1149 1154 1159 1164 1169 1174
                                                                                  1179 1184 1189 1194 1199 1204 1209 1214 1219 1226
                                                                                  1231 1236 1241
return_blank                    014216 constant        label                    dcl 1245 ref 1069 1075 1082
set_field_widths                016115 constant        entry                    internal dcl 1423 ref 344 910
split_access_class              002251 constant        label                    dcl 266

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0     17146       17222   16553       17156
Length     17612   16553        54         354     372           4

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
lib_output_node_                    677 external procedure  is an external procedure.  
cv_date                              78 internal procedure  is called by several nonquick procedures.  
cv_dec                               74 internal procedure  is called during a stack extension.  
cv_long_dec                          78 internal procedure  is called during a stack extension.  
get_acl                             128 internal procedure  is called by several nonquick procedures.  
get_dir_iacl                            internal procedure  shares stack frame of external procedure lib_output_node_.  
get_field                           144 internal procedure  is called during a stack extension.  
get_iacl                                internal procedure  shares stack frame of external procedure lib_output_node_.  
get_level                               internal procedure  shares stack frame of internal procedure out_ch2.  
out_ch2                             206 internal procedure  is called during a stack extension.  
set_field_widths                        internal procedure  shares stack frame of external procedure lib_output_node_.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 FT                          lib_output_node_

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
cv_date                  000100 date_string                 cv_date
cv_dec                   000100 number_string               cv_dec
                         000104 Ifirst_significant_digit    cv_dec
cv_long_dec              000100 number_string               cv_long_dec
                         000106 Ifirst_significant_digit    cv_long_dec
get_acl                  000100 field                       get_acl
get_field                000100 field                       get_field
lib_output_node_         000100 Iaccess_string              lib_output_node_
                         000110 Iacl                        lib_output_node_
                         000111 Idir_iacl                   lib_output_node_
                         000112 Iiacl                       lib_output_node_
                         000113 Iname                       lib_output_node_
                         000114 Laccess_string              lib_output_node_
                         000115 Lname                       lib_output_node_
                         000116 Llevel                      lib_output_node_
                         000117 Nindent                     lib_output_node_
                         000120 Sfield_blank                lib_output_node_
                         000121 Scleanup                    lib_output_node_
                         000122 Sinfo                       lib_output_node_
                         000123 Snames_first                lib_output_node_
                         000124 Squota                      lib_output_node_
                         000125 Stpd                        lib_output_node_
                         000126 access_string               lib_output_node_
                         000241 aim                         lib_output_node_
                         000273 attributes                  lib_output_node_
                         000325 code                        lib_output_node_
                         000326 dir                         lib_output_node_
                         000401 e                           lib_output_node_
                         000402 ent                         lib_output_node_
                         000413 field                       lib_output_node_
                         000446 flag                        lib_output_node_
                         000447 i                           lib_output_node_
                         000450 iacc                        lib_output_node_
                         000451 iacle                       lib_output_node_
                         000503 level_suppressed            lib_output_node_
                         000504 long                        lib_output_node_
                         000535 lvname                      lib_output_node_
                         000545 lv_name                     lib_output_node_
                         000556 mode                        lib_output_node_
                         000557 pvname                      lib_output_node_
                         000567 pv_name                     lib_output_node_
                         000600 rbs                         lib_output_node_
                         000604 saved_Iname                 lib_output_node_
                         000606 short                       lib_output_node_
                         000610 type                        lib_output_node_
                         000616 cv_acl                      lib_output_node_
                         000622 PDacl                       lib_output_node_
                         000624 PDdir_acl                   lib_output_node_
                         000626 PDdir_iacl                  lib_output_node_
                         000630 PDiacl                      lib_output_node_
                         000632 PDnames                     lib_output_node_
                         000634 PDnodes                     lib_output_node_
                         000636 PDobj                       lib_output_node_
                         000640 PDsearch_proc               lib_output_node_
                         000642 PDuser                      lib_output_node_
                         000644 Srequirements               lib_output_node_
                         000656 iacle                       get_dir_iacl
                         000671 i                           get_dir_iacl
                         000672 r                           get_dir_iacl
                         000702 iacle                       get_iacl
                         000715 i                           get_iacl
                         000716 r                           get_iacl
out_ch2                  000106 level_string                get_level
                         000107 Lvalue                      out_ch2
                         000110 i                           out_ch2

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_e_as              alloc_cs            cat_realloc_cs      call_var_desc       call_var            call_ext_out_desc
call_ext_out        call_int_this_desc  call_int_this       call_int_other      return              shorten_stack
ext_entry           int_entry           int_entry_desc

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
convert_authorization_$to_string_short                      convert_binary_integer_$long_octal_string
convert_binary_integer_$octal_string                        convert_status_code_          cv_acl_
cv_dir_acl_                   date_time_                    date_time_$fstime             ioa_$ioa_switch
lib_next_name_                lib_node_path_                mdc_$find_lvname              mdc_$find_volname

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
status_data_$dir_mode         status_data_$mode             sys_info$max_seg_size




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     25 001174        11 001202       130 001211       132 001226       134 001230       136 001244       138 001246
    140 001257       153 001270       155 001301       158 001313       160 001323       162 001333       166 001346
    169 001357       170 001362       171 001363       172 001370       173 001376       174 001402       175 001404
    176 001417       177 001425       178 001427       180 001431       181 001432       182 001433       186 001451
    188 001475       190 001505       199 001506       201 001520       202 001524       204 001526       207 001550
    208 001553       210 001570       211 001573       213 001610       214 001613       216 001630       217 001633
    218 001636       219 001644       220 001652       221 001655       222 001656       223 001663       225 001664
    226 001672       227 001675       230 001702       231 001705       232 001716       233 001721       234 001732
    243 001735       246 001763       248 001775       249 002000       250 002037       251 002067       252 002075
    253 002107       256 002133       257 002136       258 002162       259 002164       260 002177       261 002212
    263 002231       265 002240       266 002251       267 002253       268 002263       270 002273       272 002305
    274 002324       277 002326       278 002333       279 002334       280 002346       281 002351       282 002365
    284 002377       285 002402       286 002416       290 002430       291 002433       292 002434       293 002452
    294 002455       295 002471       297 002503       299 002507       300 002523       302 002535       304 002541
    305 002555       307 002567       309 002573       310 002607       312 002621       313 002624       314 002640
    316 002715       317 002716       318 002722       319 002736       321 002750       322 002753       323 002767
    325 003001       327 003010       328 003015       329 003017       330 003047       331 003073       332 003116
    333 003117       334 003122       335 003147       344 003172       345 003173       355 003202       356 003204
    357 003207       358 003211       361 003224       362 003237       365 003265       366 003321       367 003332
    372 003341       374 003352       375 003354       376 003361       377 003363       378 003372       379 003373
    380 003376       391 003410       392 003412       393 003437       394 003445       395 003466       396 003513
    397 003514       406 003515       407 003517       408 003522       409 003534       411 003556       412 003565
    413 003600       414 003606       415 003611       417 003631       418 003665       419 003667       420 003672
    421 003674       422 003720       423 003722       424 003727       425 003732       426 003744       427 003746
    428 003766       429 004005       430 004011       432 004012       433 004014       435 004015       436 004031
    437 004033       438 004034       439 004046       440 004062       443 004064       446 004065       447 004100
    449 004115       451 004120       452 004124       453 004146       454 004166       455 004172       456 004173
    457 004175       458 004210       459 004216       460 004221       462 004241       463 004275       464 004277
    465 004301       466 004304       467 004316       468 004320       469 004340       470 004357       472 004363
    473 004364       475 004365       476 004401       489 004403       490 004414       491 004416       493 004462
    494 004465       495 004467       497 004533       498 004536       499 004540       501 004607       502 004612
    503 004614       505 004660       506 004663       507 004665       509 004734       510 004737       511 004741
    513 005007       528 005053       529 005056       530 005060       531 005136       532 005137       533 005142
    534 005144       535 005225       536 005226       537 005231       538 005233       539 005311       540 005312
    541 005315       542 005317       543 005400       544 005401       545 005404       546 005406       547 005464
    548 005465       549 005470       550 005472       552 005554       553 005555       554 005560       555 005562
    557 005641       570 005642       571 005653       572 005655       574 005714       575 005725       576 005727
    578 005763       579 005771       580 005773       582 006040       584 006071       585 006077       586 006101
    588 006135       589 006137       590 006140       592 006173       593 006176       594 006200       607 006236
    608 006244       609 006246       610 006307       611 006310       612 006316       613 006320       615 006354
    616 006357       617 006361       619 006412       620 006415       621 006417       623 006453       624 006456
    625 006460       639 006513       640 006516       641 006520       643 006556       644 006561       645 006563
    647 006647       648 006650       649 006657       650 006661       652 006720       653 006726       654 006730
    656 006764       657 006767       658 006771       660 007024       661 007027       662 007031       673 007066
    676 007076       677 007107       678 007114       679 007133       680 007144       682 007145       683 007151
    684 007176       685 007203       686 007224       687 007251       688 007252       708 007254       709 007257
    710 007261       712 007361       713 007362       714 007365       715 007367       717 007472       718 007473
    719 007514       720 007516       722 007616       723 007617       724 007622       725 007624       727 007713
    728 007714       729 007717       730 007721       732 007776       733 007777       734 010002       735 010004
    737 010107       752 010110       753 010113       754 010115       755 010157       756 010223       757 010224
    759 010247       760 010252       761 010254       763 010301       764 010304       765 010306       767 010330
    768 010333       769 010335       771 010370       773 010407       774 010412       775 010414       777 010436
    780 010463       783 010513       793 010536       795 010563       807 010614       809 010644       810 010647
    811 010663       813 010702       814 010705       815 010707       817 010740       818 010754       820 011003
    822 011006       823 011011       824 011013       833 011035       834 011062       835 011067       836 011110
    837 011135       845 011136       853 011144       854 011147       855 011202       856 011213       857 011220
    858 011237       859 011250       868 011251       869 011254       870 011261       872 011266       873 011305
    874 011312       875 011316       876 011332       877 011337       879 011340       880 011345       882 011352
    883 011374       884 011401       885 011406       886 011422       887 011427       890 011430       897 011431
    906 011445       910 011456       911 011457       913 011466       915 011502       916 011506       917 011510
    919 011525       922 011552       924 011571       926 011603       927 011607       930 011630       932 011642
    934 011646       936 011665       938 011677       940 011702       941 011705       942 011714       943 011734
    950 011735       957 011743       959 011760       961 011766       964 011774       966 012012       972 012020
    980 012026       981 012037       982 012051       990 012067       997 012075       998 012106       999 012120
   1008 012136      1012 012144      1013 012146      1014 012152      1015 012154      1017 012160      1018 012172
   1020 012211      1022 012217      1023 012253      1024 012275      1031 012313      1037 012315      1038 012316
   1039 012322      1041 012326      1042 012341      1044 012360      1046 012365      1047 012400      1048 012402
   1049 012440      1050 012443      1051 012453      1053 012476      1062 012515      1069 012523      1071 012526
   1072 012530      1073 012532      1074 012557      1075 012561      1076 012566      1077 012570      1082 012571
   1084 012573      1085 012600      1086 012612      1088 012613      1089 012621      1090 012623      1091 012636
   1093 012640      1094 012646      1095 012650      1096 012664      1098 012666      1099 012671      1100 012673
   1101 012706      1103 012710      1104 012713      1105 012715      1106 012732      1108 012734      1109 012737
   1110 012741      1111 012744      1113 012745      1114 012754      1115 012756      1116 013001      1118 013003
   1119 013006      1120 013010      1122 013046      1124 013050      1125 013053      1126 013055      1127 013060
   1129 013061      1130 013067      1131 013071      1133 013117      1134 013135      1136 013137      1137 013145
   1138 013147      1139 013163      1141 013165      1142 013167      1143 013170      1144 013173      1146 013174
   1147 013205      1148 013207      1149 013223      1151 013225      1152 013236      1153 013240      1154 013254
   1156 013256      1157 013261      1158 013263      1159 013314      1161 013316      1162 013321      1163 013323
   1164 013354      1166 013356      1167 013361      1168 013363      1169 013414      1171 013416      1172 013421
   1173 013423      1174 013454      1176 013456      1177 013461      1178 013463      1179 013514      1181 013516
   1182 013521      1183 013523      1184 013554      1186 013556      1187 013561      1188 013563      1189 013614
   1191 013616      1192 013621      1193 013623      1194 013626      1196 013627      1197 013640      1198 013642
   1199 013666      1201 013670      1202 013673      1203 013675      1204 013721      1206 013723      1207 013726
   1208 013730      1209 013754      1211 013756      1212 013761      1213 013763      1214 014007      1216 014011
   1217 014014      1218 014016      1219 014042      1221 014044      1222 014047      1223 014051      1225 014102
   1226 014130      1228 014132      1229 014135      1230 014137      1231 014153      1233 014155      1234 014163
   1235 014165      1236 014201      1238 014203      1239 014206      1240 014210      1241 014213      1244 014214
   1245 014216      1248 014224      1257 014232      1263 014234      1264 014235      1265 014241      1267 014245
   1268 014260      1270 014277      1272 014304      1273 014320      1274 014322      1275 014360      1276 014363
   1277 014373      1279 014416      1287 014435      1293 014437      1295 014447      1296 014451      1297 014470
   1304 014476      1306 014517      1307 014522      1310 014523      1312 014543      1313 014546      1315 014557
   1318 014560      1320 014601      1321 014604      1324 014605      1326 014625      1327 014630      1330 014631
   1332 014651      1333 014654      1336 014655      1338 014663      1339 014666      1342 014667      1344 014703
   1345 014706      1348 014707      1350 014715      1366 014720      1368 014733      1370 014740      1371 014742
   1373 015046      1375 015047      1379 015162      1380 015172      1381 015207      1384 015320      1386 015433
   1387 015434      1389 015435      1392 015547      1394 015550      1397 015661      1399 015662      1401 015744
   1403 015745      1405 015753      1407 015770      1409 015771      1410 016014      1412 016015      1414 016114
   1423 016115      1429 016116      1430 016135      1431 016141      1432 016147      1433 016153      1435 016164
   1437 016172      1439 016204      1440 016205      1441 016207      1442 016210      1443 016212      1444 016213
   1445 016215      1447 016216      1448 016220      1449 016221      1450 016223      1451 016224      1452 016227
   1455 016241      1456 016242      1457 016243      1459 016245


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
