	COMPILATION LISTING OF SEGMENT azm_requests_3_
	Compiled by: Multics PL/I Compiler, Release 29, of July 28, 1986
	Compiled at: Honeywell Bull, Phx. Az., Sys-M 
	Compiled on: 07/28/87  0934.2 mst Tue
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Bull Inc., 1987                *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        6*        *                                                         *
        7*        *********************************************************** */
        8 
        9 
       10 /****^  HISTORY COMMENTS:
       11*  1) change(87-01-06,Parisek), approve(87-07-09,MCR7746),
       12*     audit(87-07-20,Fawcett), install(87-07-28,MR12.1-1049):
       13*     Added check for the -match & -exclude control arguments.
       14*                                                   END HISTORY COMMENTS */
       15 
       16 
       17 azm_requests_3_: proc ();
       18 
       19 	return;					/* not an entrypoint */
       20 
       21 /* format: style4,delnl,insnl,ifthenstmt,indnoniterend,ifthendo,ifthen,^thendo */
       22 
       23 
       24 /* Assorted requests for analyze_multics. */
       25 
       26 
       27 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
       28 	/*									*/
       29 	/* 0) Created: 06/25/83 by B. Braun from the division of the original			*/
       30 	/* azm_misc_requests_. This guy contains azm requests events, sdw, syserr_log,		*/
       31 	/* traffic_control_queue.							*/
       32 	/*									*/
       33           /* Modified 19 Jan 84 by BLB changes to events request so -last and -time work correctly  */
       34 	/* (phx16720), to fix ioa string for invalid arg to events.                               */
       35           /* Modified 08 Nov 84 by BLB to syserr_log request to change default actions from 3 to 9  */
       36           /* Modified 21 Jan 85 by BLB to syserr_log request to change -action to take a range due  */
       37 	/* the print_sys_log changes.							*/
       38           /* Modified 23 Jan 85 by BLB to correct the default for events request to be "ev -tm 10"  */
       39 	/*									*/
       40 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
       41 
       42 
       43 dcl  (
       44      P_sci_ptr pointer,
       45      P_azm_info_ptr pointer
       46      ) parameter;
       47 
       48 /* Automatic */
       49 
       50 dcl  af_sw bit (1) aligned;
       51 dcl  all_sw bit (1);
       52 dcl  axp ptr init (null);
       53 dcl  argl fixed bin (21);
       54 dcl  argno fixed bin;
       55 dcl  argp pointer;
       56 dcl  axstring char (7) init ("");
       57 dcl  brief_sw bit (1) init ("0"b);
       58 dcl  code fixed bin (35);
       59 dcl  count fixed bin;
       60 dcl  count_sw bit(1);
       61 dcl  configp ptr init (null);
       62 dcl  cur_erf bit (1) init ("0"b);
       63 dcl  del_cur_erf bit (1) init ("0"b);
       64 dcl  del_erf bit (1) init ("0"b);
       65 dcl  dsegp ptr init (null);
       66 dcl  erfs_found bit (1) init ("0"b);
       67 dcl  expand_ptr_sw bit (1) init ("0"b);
       68 dcl  expand_sw bit (1) init ("0"b);			/* "1"b = expand syserr binary data */
       69 dcl  first_erf bit (1) init ("0"b);
       70 dcl  first_value_set bit (1) init ("0"b);
       71 dcl  forward_search bit (1) init ("0"b);
       72 dcl  frame_entry bit (1) init ("0"b);
       73 dcl  hdr_printed bit (1) init ("0"b);
       74 dcl  hold_index fixed bin;
       75 dcl  last fixed bin init (0);
       76 dcl  last_erf bit (1) init ("0"b);
       77 dcl  list_erfs bit (1) init ("0"b);
       78 dcl  ll fixed bin init (0);
       79 dcl  ln fixed bin init (0);
       80 dcl  long_sw bit (1);
       81 dcl  MATCH_STRING init (1) fixed bin int static options (constant);
       82 dcl  EXCLUDE_STRING init (2) fixed bin int static options (constant);
       83 dcl  looking_for fixed bin;
       84 dcl  match_ptr ptr;
       85 dcl  match_str char (256) var init ("");		/* the syserr string to match on */
       86 
       87 dcl  nargs fixed bin;
       88 dcl  next_erf bit (1) init ("0"b);
       89 dcl  prev_erf bit (1) init ("0"b);
       90 dcl  print_all_trans bit (1) init ("0"b);
       91 dcl  range_value_set bit (1) init ("0"b);
       92 dcl  raw_syserr_data bit (1) init ("0"b);		/* "1"b = print it in octal */
       93 dcl  ret_str char (168) var init ("");
       94 dcl  rv_lth fixed bin (21);
       95 dcl  rv_ptr ptr;
       96 dcl  sci_ptr pointer;				/* assorted info pointers */
       97 dcl  segln fixed bin (35) init (0);
       98 dcl  slog_code char(30) var;
       99 dcl  start_configp ptr init (null);
      100 dcl  struct_sw bit (1) init ("0"b);
      101 dcl  temp_str char (24) var init ("");
      102 dcl  time fixed bin (71);
      103 dcl  time_sw bit(1);
      104 dcl  why_erf bit (1) init ("0"b);
      105 
      106 
      107 /* Based */
      108 
      109 dcl  arg char (argl) based (argp);
      110 
      111 /* Constants */
      112 
      113 /* Builtins */
      114 
      115 dcl  (abs, char, fixed, null, substr, index) builtin;
      116 
      117 /* Conditions */
      118 
      119 dcl  (conversion, quit) condition;
      120 
      121 
      122 
      123 /* External Entries */
      124 
      125 dcl  amu_$fdump_mpt_change_idx entry (ptr, fixed bin);
      126 dcl  amu_$tc_data_tcq entry (ptr, bit(1), bit (1));
      127 dcl  match_strings_$add entry (ptr, bit (1) aligned, char (*));
      128 dcl  azm_syserr_$data entry (ptr, ptr, fixed bin(35), char(*) var, bit (1), bit (1), char(*) var, fixed bin (35));
      129 dcl  azm_syserr_$log entry (ptr, ptr, fixed bin(35), char(*) var, bit (1), bit (1), char(*) var, fixed bin (35));
      130 dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
      131 dcl  continue_to_signal_		entry (fixed bin(35));
      132 dcl  error_table_$noarg fixed bin (35) external static;
      133 dcl  error_table_$bad_arg fixed bin (35) external static;
      134 dcl  error_table_$inconsistent fixed bin (35) external static;
      135 dcl  azm_display_fdump_events entry (ptr, ptr, fixed bin, fixed bin (71), bit (1), ptr, fixed bin (35));
      136 dcl  ssu_$abort_line entry options (variable);
      137 dcl  ssu_$arg_count entry (pointer, fixed bin, bit (1) aligned);
      138 dcl  ssu_$arg_ptr entry (pointer, fixed bin, pointer, fixed bin (21));
      139 dcl  ssu_$return_arg entry (ptr, fixed bin, bit (1) aligned, ptr, fixed bin (21));
      140 
      141 azm_requests_3_$events:
      142      entry (P_sci_ptr, P_azm_info_ptr);
      143 
      144 	call set_up;
      145 	if ^trans_selected () then call ssu_$abort_line (sci_ptr, 0, "No dump selected.");
      146 
      147           /* first set all the defaults */
      148 	time_sw, count_sw, long_sw = "0"b;
      149 	match_ptr = null ();
      150 	looking_for = -1;
      151 	count = 10;            /* last ten events */
      152 	time  = 10000000;      /* 10 seconds */
      153 
      154 	do argno = 1 to nargs;
      155 	     call ssu_$arg_ptr (sci_ptr, argno, argp, argl);
      156 	     if arg = "-time" | arg = "-tm" then do;
      157 	        time_sw = "1"b;
      158 	        if argno + 1 <= nargs then do;
      159 		 argno = argno + 1;
      160 		 call ssu_$arg_ptr (sci_ptr, argno, argp, argl);
      161 		 if char(arg, 1) = "-" then argno = argno -1; /* next control arg */
      162 		 else do;
      163 		    on conversion goto BAD_TIME;
      164 		    time = fixed (arg) * 1000000;
      165 		    revert conversion;
      166 		    end;
      167 		 end;
      168                   end;
      169 	     else if arg = "-last" | arg = "-lt" then do;
      170 	        count_sw = "1"b;
      171 	        if argno + 1 <= nargs then do;
      172 		 argno = argno + 1;
      173 		 call ssu_$arg_ptr (sci_ptr, argno, argp, argl);
      174 		 if char(arg, 1) = "-" then argno = argno -1; /* next control arg */
      175 		 else do;
      176 		    count = cv_dec_check_ (arg, code);
      177 		    if code ^= 0 then call ssu_$abort_line (sci_ptr, error_table_$bad_arg,
      178 		       "-number requires a decimal arg ""^a"".", arg);
      179 		    end;
      180 		 end;
      181                   end;
      182 	     else if arg = "-long" | arg = "-lg" then long_sw = "1"b;
      183 	     else if arg = "-match" | arg = "-mh" then looking_for = MATCH_STRING;
      184 	     else if arg = "-exclude" | arg = "-ex" then looking_for = EXCLUDE_STRING;
      185 	     else if (char (arg, 1) = "-") then
      186 		call ssu_$abort_line (sci_ptr, error_table_$bad_arg, "^a.", arg);
      187 	     else call process_looking_for ();
      188 	end;
      189 
      190           if nargs = 0 then do;   /* set the default which is "ev -tm 10" */
      191              long_sw = "0"b;
      192 	   time =  10000000;
      193 	   count = -1;
      194 	   end;
      195 	else do;
      196              if (count_sw & time_sw) then call ssu_$abort_line (sci_ptr, error_table_$inconsistent, "-count and -time");
      197 
      198 	   if count_sw then time = -1;
      199 	   else if time_sw then count = -1;
      200 	   else if (^count_sw & ^time_sw & ^long_sw) & match_ptr ^= null () then do;
      201 	        time = 10000000;
      202 	        count = -1;
      203 	   end;
      204           end;
      205 
      206 	hold_index = amu_info.process_idx;
      207 	on quit begin;
      208 	   call amu_$fdump_mpt_change_idx (amu_info_ptr, hold_index);
      209 	   call continue_to_signal_(0);
      210 	   end;
      211 
      212 	call azm_display_fdump_events (sci_ptr, amu_info_ptr, count, time, long_sw, match_ptr, code);
      213 	call amu_$fdump_mpt_change_idx (amu_info_ptr, hold_index);
      214 						/* ensure we are in same proc_idx that we started in */
      215 	if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "");
      216 
      217 	return;
      218 
      219 BAD_TIME:
      220 	call ssu_$abort_line (sci_ptr, error_table_$bad_arg, "time.");
      221 
      222 azm_requests_3_$syserr_log:
      223      entry (P_sci_ptr, P_azm_info_ptr);
      224 
      225 dcl num_msgs fixed bin(35);
      226 dcl (match_sw, exclude_sw) bit(1);
      227 
      228           call set_up;
      229 	if ^trans_selected () then do;
      230 	     call ssu_$abort_line (sci_ptr, 0, "No dump selected.");
      231                return;
      232 	     end;
      233 
      234 	slog_code = "-100:100";     /* set the default */
      235 	num_msgs = -1;		
      236 	exclude_sw, match_sw = "0"b;
      237 	expand_sw = "0"b;
      238           match_str = "";
      239 
      240 	if nargs = 0 then go to no_wlog_args;
      241 
      242 	do argno = 1 to nargs;
      243 	   call ssu_$arg_ptr (sci_ptr, argno, argp, argl);
      244 
      245 	   if arg = "-expand" | arg = "-exp" then expand_sw = "1"b;
      246 	   else if arg = "-action" then do;
      247 	      call get_next_arg("Action code", argp, argl);
      248 	      if index(arg, ":") = 0 then     /* must construct the range */
      249 	         slog_code = "-100:" || arg;
      250 	      else slog_code = arg;
      251 	      end;
      252 
      253 	   else if arg = "-match" | arg = "-exclude" | arg = "-ex" then do;
      254 	      match_str = "";
      255 	      if arg = "-match" then do;
      256 	         match_sw = "1"b;
      257 	         exclude_sw = "0"b;
      258 	         end;
      259 	      else do;
      260 	         exclude_sw = "1"b;
      261 	         match_sw = "0"b;
      262 	         end;
      263                 call get_next_arg("String", argp, argl);
      264  	      if substr(arg, 1, 1) = "-" then call ssu_$abort_line(sci_ptr, error_table_$noarg, " Missing match strings.");
      265 	      match_str = arg;
      266 	      end;
      267 
      268 	   else if arg = "-last" | arg = "-lt" then do;
      269 	      call get_next_arg("Decimal Number", argp, argl);
      270 	      num_msgs = cv_dec_check_ (arg, code);
      271 	      if code ^= 0 then call ssu_$abort_line (sci_ptr, error_table_$bad_arg,
      272 	                        "-last requires a decimal arg ""^a"".", arg);
      273 	      end;
      274 
      275 	   else call ssu_$abort_line (sci_ptr, error_table_$bad_arg, """^a"".", arg);
      276 	end;
      277 
      278 no_wlog_args:
      279 
      280 	call azm_syserr_$data (sci_ptr, amu_info_ptr, num_msgs, match_str, match_sw, expand_sw, slog_code, code);
      281 	if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "");
      282 	call azm_syserr_$log (sci_ptr, amu_info_ptr, num_msgs, match_str, match_sw, expand_sw, slog_code, code);
      283 	if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "");
      284 
      285 	return;   /* end azm_requests_3_$syserr_log */
      286 
      287 azm_requests_3_$tcq:
      288      entry (P_sci_ptr, P_azm_info_ptr);
      289 
      290 dcl rdy_sw bit(1);
      291 
      292 	call set_up;
      293 	if ^trans_selected () then call ssu_$abort_line (sci_ptr, 0, "No dump selected.");
      294 
      295 	all_sw, rdy_sw = "0"b;
      296 	do argno = 1 to nargs;
      297 	     call ssu_$arg_ptr (sci_ptr, argno, argp, argl);
      298 	     if arg = "-all" | arg = "-a" then all_sw = "1"b;
      299 	     else if arg = "-rdy" | arg = "-ready" then rdy_sw = "1"b;
      300 	     else call ssu_$abort_line (sci_ptr, error_table_$bad_arg, """^a"".", arg);
      301 	     end;
      302 
      303           if all_sw & rdy_sw then call ssu_$abort_line (sci_ptr, error_table_$inconsistent, "-all -ready");
      304 	call amu_$tc_data_tcq (amu_info_ptr, all_sw, rdy_sw);
      305 	return;
      306 
      307 get_next_arg: proc(Arg_expected, ap1, al1);
      308 
      309 /*  This guy gets the next argument from the argument string, complaining if it's not there  */
      310 
      311 dcl Arg_expected			char(*);
      312 dcl (ap1				ptr,
      313      al1				fixed bin(21));
      314 	    
      315 	if (argno + 1) > nargs then do;
      316 	     call ssu_$abort_line(sci_ptr, error_table_$noarg, "A ^a expected after ^a.", Arg_expected, arg);
      317 	     return;
      318 	     end;
      319 
      320 	argno = argno + 1;
      321 	call ssu_$arg_ptr (sci_ptr, argno, ap1, al1);
      322      
      323 end get_next_arg;
      324 
      325 set_up:
      326      proc;
      327 
      328 	sci_ptr = P_sci_ptr;
      329 	azm_info_ptr = P_azm_info_ptr;
      330 	amu_info_ptr = azm_info.aip;
      331 	call ssu_$return_arg (sci_ptr, nargs, af_sw, rv_ptr, rv_lth);
      332 	if ^af_sw then call ssu_$arg_count (sci_ptr, nargs, af_sw);
      333 
      334      end set_up;
      335 
      336 trans_selected:
      337      proc () returns (bit (1));
      338 
      339 	if amu_info_ptr = null () then return ("0"b);
      340 	return ("1"b);
      341      end trans_selected;
      342 
      343 process_looking_for:
      344      proc ();
      345      
      346 dcl  really_looking_for fixed bin;
      347      
      348      really_looking_for = abs (looking_for);
      349      
      350      if really_looking_for = MATCH_STRING | really_looking_for = EXCLUDE_STRING then
      351 	if substr (arg, 1, 1) = "/" & substr (arg, argl, 1) ^= "/" then
      352 INVALID_REGULAR_EXPRESSION:
      353                call ssu_$abort_line (sci_ptr, error_table_$bad_arg, "Invalid regular expression ""^a""", arg);
      354           else if substr (arg, argl, 1) = "/" & substr (arg, 1, 1) ^= "/" then
      355 	     goto INVALID_REGULAR_EXPRESSION;
      356 	else if arg = "/" then goto INVALID_REGULAR_EXPRESSION;
      357 	
      358      if (really_looking_for = MATCH_STRING) then
      359 	call match_strings_$add (match_ptr, "1"b, arg);
      360      else if (really_looking_for = EXCLUDE_STRING) then
      361 	call match_strings_$add (match_ptr, "0"b, arg);
      362      return;
      363 end process_looking_for;
      364 
  1     1 /*	BEGIN INCLUDE FILE amu_info.incl.pl1		*/
  1     2 
  1     3 dcl 1 amu_info aligned based (amu_info_ptr),
  1     4     2 version char (8) aligned,			/* AMU_INFO_VERSION */
  1     5     2 flags aligned,
  1     6       3 early_dump bit(1) unal,
  1     7       3 pad  bit(35) unal,
  1     8     2 type fixed bin unal,				/* One of the types below */
  1     9     2 time_created fixed bin (71) aligned,		/* time created -- for debugging purposes */
  1    10     2 chain,					/* a chain of all the amu_info's which exist */
  1    11       3 prev pointer unaligned,
  1    12       3 next pointer unaligned,
  1    13 
  1    14     2 area_ptr pointer,				/* pointer to area used for allocating things */
  1    15 
  1    16     2 translation_table_ptr pointer,			/* pointer to address map -- always present */
  1    17 						/*   SEE: amu_translation.incl.pl1 */
  1    18     2 fdump_info_ptr pointer, 			
  1    19 						/* pointer to FDUMP info, present if looking at an FDUMP */
  1    20 						/*   SEE: amu_fdump_info.incl.pl1 */
  1    21 						/* old_uid_table pointer if looking at a SAVED PROC. */
  1    22 						/* See: amu_old_uid_table			*/
  1    23 	
  1    24 
  1    25     2 hardcore_info_ptr pointer,			/* pointer to hardcore information -- always present */
  1    26 						/*   SEE: amu_hardcore_info.incl.pl1 */
  1    27     2 copy_chain pointer,				/* pointer to info about segment copies */
  1    28 						/*   SEE: amu_copy_info.incl.pl1 */
  1    29     2 process_info_ptr pointer,			/* pointer to process info for this translation */
  1    30 						/*   SEE: amu_process_info.incl.pl1 */
  1    31     2 process_idx fixed bin,				/* index of process in translation-specifc process table */
  1    32 
  1    33     2 proc_idx_hold fixed bin,			/* a place to keep the index when a changing to another proc */
  1    34 
  1    35     2 error_info,					/* various info about how amu_error_ is to behave */
  1    36       3 error_flags aligned,
  1    37         4 handler_exists bit (1) unaligned,		/* set to indicate existence of an amu_error handler */
  1    38         4 in_subsystem bit (1) unaligned,		/* This amu_info belongs to an ssu_ maintained subsystem */
  1    39         4 pad bit (34) unaligned,
  1    40       3 sci_ptr pointer,				/* sci_ptr for subsystem, if in_subsystem = "1"b */
  1    41     2 definitions_info_ptr ptr;
  1    42 
  1    43 dcl  amu_area area based (amu_info.area_ptr);
  1    44 
  1    45 dcl  amu_info_ptr pointer;
  1    46 
  1    47 dcl (FDUMP_TYPE		init (1037),		/* the various legitimate types of amu_info's */
  1    48      FDUMP_PROCESS_TYPE	init (1038),
  1    49      ONLINE_TYPE		init (1039),
  1    50      ONLINE_PROCESS_TYPE	init (1040),
  1    51      NETWORK_FDUMP_TYPE	init (1041),
  1    52      NETWORK_ONLINE_TYPE	init (1042),
  1    53      SAVED_PROC_TYPE	init (1043),
  1    54      INDIRECT_TYPE		init (1044)) fixed bin internal static options (constant);
  1    55 
  1    56 dcl  AMU_INFO_VERSION_1 char (8) internal static options (constant) init ("amu_v1");
  1    57 dcl  AMU_INFO_VERSION char (8) internal static options (constant) init ("amu_v1");
  1    58 dcl  AMU_INFO_VERSION_2 char (8) internal static options (constant) init ("amu_v2");
  1    59 
  1    60 dcl  PDIR_SUFFIX		char(4) init("pdir") int static options(constant);
  1    61 
  1    62 /*	END INCLUDE FILE amu_info.incl.pl1		*/
      365 
      366 
  2     1 /*	BEGIN INCLUDE FILE azm_info.incl.pl1		*/
  2     2 
  2     3 dcl 1 azm_info aligned based (azm_info_ptr),
  2     4     2 version char(8),
  2     5     2 area_ptr ptr,					/* area pointer for azm to use when needed	*/
  2     6     2 aip pointer,					/* pointer for all amu_ calls */
  2     7     2 flags aligned,
  2     8       3 in_erf bit (1) unaligned,			/* examining an FDUMP */
  2     9       3 in_process bit (1) unaligned,			/* some specific process selected in FDUMP */
  2    10       3 online bit (1) unaligned,			/* examining online system, my process */
  2    11       3 saved_proc bit (1) unaligned,			/* examining "deadproc" */
  2    12       3 pad bit (33) unaligned,
  2    13 
  2    14     2 erf_name char (168),				/* name of ERF or deadproc path */
  2    15     2 pad fixed bin;
  2    16 
  2    17 dcl  azm_info_ptr pointer;
  2    18 
  2    19 dcl  AZM_INFO_VERSION_1 char (8) internal static options (constant) init ("azm_v1");
  2    20 dcl  AZM_INFO_VERSION_2 char (8) internal static options (constant) init ("azm_v2");
  2    21 
  2    22 /*	END INCLUDE FILE azm_info.incl.pl1		*/
      367 
      368 
      369      end azm_requests_3_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    07/28/87  0929.4  azm_requests_3_.pl1               >spec>install>MR12.1-1049>azm_requests_3_.pl1
365          1    11/20/84  0856.1  amu_info.incl.pl1                 >ldd>include>amu_info.incl.pl1
367          2    11/20/84  0854.8  azm_info.incl.pl1                 >ldd>include>azm_info.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
Arg_expected                           parameter       char                     unaligned dcl 311 set ref 307 316*
EXCLUDE_STRING                         constant        fixed bin(17,0)          initial dcl 82 ref 184 350 360
MATCH_STRING                           constant        fixed bin(17,0)          initial dcl 81 ref 183 350 358
P_azm_info_ptr                         parameter       pointer                  dcl 43 ref 141 222 287 329
P_sci_ptr                              parameter       pointer                  dcl 43 ref 141 222 287 328
abs                                                    builtin function         dcl 115 ref 348
af_sw                           000100 automatic       bit(1)                   dcl 50 set ref 331* 332 332*
aip                       4            based           pointer                  level 2 dcl 2-3 ref 330
al1                                    parameter       fixed bin(21,0)          dcl 312 set ref 307 321*
all_sw                          000101 automatic       bit(1)                   unaligned dcl 51 set ref 295* 298* 303 304*
amu_$fdump_mpt_change_idx       000010 constant        entry                    external dcl 125 ref 208 213
amu_$tc_data_tcq                000012 constant        entry                    external dcl 126 ref 304
amu_info                               based           structure                level 1 dcl 1-3
amu_info_ptr                    000410 automatic       pointer                  dcl 1-45 set ref 206 208* 212* 213* 278* 282* 304*
                                                                                  330* 339
ap1                                    parameter       pointer                  dcl 312 set ref 307 321*
arg                                    based           char                     unaligned dcl 109 set ref 156 156 161 164 169 169
                                                                                  174 176* 177* 182 182 183 183 184 184 185 185* 245
                                                                                  245 246 248 248 250 253 253 253 255 264 265 268
                                                                                  268 270* 271* 275* 298 298 299 299 300* 316* 350
                                                                                  350 350* 354 354 356 358* 360*
argl                            000104 automatic       fixed bin(21,0)          dcl 53 set ref 155* 156 156 160* 161 164 169 169
                                                                                  173* 174 176 176 177 177 182 182 183 183 184 184
                                                                                  185 185 185 243* 245 245 246 247* 248 248 250 253
                                                                                  253 253 255 263* 264 265 268 268 269* 270 270 271
                                                                                  271 275 275 297* 298 298 299 299 300 300 316 316
                                                                                  350 350 350 350 350 354 354 354 356 358 358 360
                                                                                  360
argno                           000105 automatic       fixed bin(17,0)          dcl 54 set ref 154* 155* 158 159* 159 160* 161* 161
                                                                                  171 172* 172 173* 174* 174* 242* 243* 296* 297*
                                                                                  315 320* 320 321*
argp                            000106 automatic       pointer                  dcl 55 set ref 155* 156 156 160* 161 164 169 169
                                                                                  173* 174 176 177 182 182 183 183 184 184 185 185
                                                                                  243* 245 245 246 247* 248 248 250 253 253 253 255
                                                                                  263* 264 265 268 268 269* 270 271 275 297* 298 298
                                                                                  299 299 300 316 350 350 350 354 354 356 358 360
axp                             000102 automatic       pointer                  initial dcl 52 set ref 52*
axstring                        000110 automatic       char(7)                  initial unaligned dcl 56 set ref 56*
azm_display_fdump_events        000034 constant        entry                    external dcl 135 ref 212
azm_info                               based           structure                level 1 dcl 2-3
azm_info_ptr                    000412 automatic       pointer                  dcl 2-17 set ref 329* 330
azm_syserr_$data                000016 constant        entry                    external dcl 128 ref 278
azm_syserr_$log                 000020 constant        entry                    external dcl 129 ref 282
brief_sw                        000112 automatic       bit(1)                   initial unaligned dcl 57 set ref 57*
char                                                   builtin function         dcl 115 ref 161 174 185
code                            000113 automatic       fixed bin(35,0)          dcl 58 set ref 176* 177 212* 215 215* 270* 271 278*
                                                                                  281 281* 282* 283 283*
configp                         000116 automatic       pointer                  initial dcl 61 set ref 61*
continue_to_signal_             000024 constant        entry                    external dcl 131 ref 209
conversion                      000370 stack reference condition                dcl 119 ref 163 165
count                           000114 automatic       fixed bin(17,0)          dcl 59 set ref 151* 176* 193* 199* 202* 212*
count_sw                        000115 automatic       bit(1)                   unaligned dcl 60 set ref 148* 170* 196 198 200
cur_erf                         000120 automatic       bit(1)                   initial unaligned dcl 62 set ref 62*
cv_dec_check_                   000022 constant        entry                    external dcl 130 ref 176 270
del_cur_erf                     000121 automatic       bit(1)                   initial unaligned dcl 63 set ref 63*
del_erf                         000122 automatic       bit(1)                   initial unaligned dcl 64 set ref 64*
dsegp                           000124 automatic       pointer                  initial dcl 65 set ref 65*
erfs_found                      000126 automatic       bit(1)                   initial unaligned dcl 66 set ref 66*
error_table_$bad_arg            000030 external static fixed bin(35,0)          dcl 133 set ref 177* 185* 219* 271* 275* 300* 350*
error_table_$inconsistent       000032 external static fixed bin(35,0)          dcl 134 set ref 196* 303*
error_table_$noarg              000026 external static fixed bin(35,0)          dcl 132 set ref 264* 316*
exclude_sw                      000406 automatic       bit(1)                   unaligned dcl 226 set ref 236* 257* 260*
expand_ptr_sw                   000127 automatic       bit(1)                   initial unaligned dcl 67 set ref 67*
expand_sw                       000130 automatic       bit(1)                   initial unaligned dcl 68 set ref 68* 237* 245* 278*
                                                                                  282*
first_erf                       000131 automatic       bit(1)                   initial unaligned dcl 69 set ref 69*
first_value_set                 000132 automatic       bit(1)                   initial unaligned dcl 70 set ref 70*
fixed                                                  builtin function         dcl 115 ref 164
forward_search                  000133 automatic       bit(1)                   initial unaligned dcl 71 set ref 71*
frame_entry                     000134 automatic       bit(1)                   initial unaligned dcl 72 set ref 72*
hdr_printed                     000135 automatic       bit(1)                   initial unaligned dcl 73 set ref 73*
hold_index                      000136 automatic       fixed bin(17,0)          dcl 74 set ref 206* 208* 213*
index                                                  builtin function         dcl 115 ref 248
last                            000137 automatic       fixed bin(17,0)          initial dcl 75 set ref 75*
last_erf                        000140 automatic       bit(1)                   initial unaligned dcl 76 set ref 76*
list_erfs                       000141 automatic       bit(1)                   initial unaligned dcl 77 set ref 77*
ll                              000142 automatic       fixed bin(17,0)          initial dcl 78 set ref 78*
ln                              000143 automatic       fixed bin(17,0)          initial dcl 79 set ref 79*
long_sw                         000144 automatic       bit(1)                   unaligned dcl 80 set ref 148* 182* 191* 200 212*
looking_for                     000145 automatic       fixed bin(17,0)          dcl 83 set ref 150* 183* 184* 348
match_ptr                       000146 automatic       pointer                  dcl 84 set ref 149* 200 212* 358* 360*
match_str                       000150 automatic       varying char(256)        initial dcl 85 set ref 85* 238* 254* 265* 278* 282*
match_strings_$add              000014 constant        entry                    external dcl 127 ref 358 360
match_sw                        000405 automatic       bit(1)                   unaligned dcl 226 set ref 236* 256* 261* 278* 282*
nargs                           000251 automatic       fixed bin(17,0)          dcl 87 set ref 154 158 171 190 240 242 296 315 331*
                                                                                  332*
next_erf                        000252 automatic       bit(1)                   initial unaligned dcl 88 set ref 88*
null                                                   builtin function         dcl 115 ref 52 61 65 99 149 200 339
num_msgs                        000404 automatic       fixed bin(35,0)          dcl 225 set ref 235* 270* 278* 282*
prev_erf                        000253 automatic       bit(1)                   initial unaligned dcl 89 set ref 89*
print_all_trans                 000254 automatic       bit(1)                   initial unaligned dcl 90 set ref 90*
process_idx              24            based           fixed bin(17,0)          level 2 dcl 1-3 ref 206
quit                            000376 stack reference condition                dcl 119 ref 207
range_value_set                 000255 automatic       bit(1)                   initial unaligned dcl 91 set ref 91*
raw_syserr_data                 000256 automatic       bit(1)                   initial unaligned dcl 92 set ref 92*
rdy_sw                          000407 automatic       bit(1)                   unaligned dcl 290 set ref 295* 299* 303 304*
really_looking_for              000450 automatic       fixed bin(17,0)          dcl 346 set ref 348* 350 350 358 360
ret_str                         000257 automatic       varying char(168)        initial dcl 93 set ref 93*
rv_lth                          000332 automatic       fixed bin(21,0)          dcl 94 set ref 331*
rv_ptr                          000334 automatic       pointer                  dcl 95 set ref 331*
sci_ptr                         000336 automatic       pointer                  dcl 96 set ref 145* 155* 160* 173* 177* 185* 196*
                                                                                  212* 215* 219* 230* 243* 264* 271* 275* 278* 281*
                                                                                  282* 283* 293* 297* 300* 303* 316* 321* 328* 331*
                                                                                  332* 350*
segln                           000340 automatic       fixed bin(35,0)          initial dcl 97 set ref 97*
slog_code                       000341 automatic       varying char(30)         dcl 98 set ref 234* 248* 250* 278* 282*
ssu_$abort_line                 000036 constant        entry                    external dcl 136 ref 145 177 185 196 215 219 230 264
                                                                                  271 275 281 283 293 300 303 316 350
ssu_$arg_count                  000040 constant        entry                    external dcl 137 ref 332
ssu_$arg_ptr                    000042 constant        entry                    external dcl 138 ref 155 160 173 243 297 321
ssu_$return_arg                 000044 constant        entry                    external dcl 139 ref 331
start_configp                   000352 automatic       pointer                  initial dcl 99 set ref 99*
struct_sw                       000354 automatic       bit(1)                   initial unaligned dcl 100 set ref 100*
substr                                                 builtin function         dcl 115 ref 264 350 350 354 354
temp_str                        000355 automatic       varying char(24)         initial dcl 101 set ref 101*
time                            000364 automatic       fixed bin(71,0)          dcl 102 set ref 152* 164* 192* 198* 201* 212*
time_sw                         000366 automatic       bit(1)                   unaligned dcl 103 set ref 148* 157* 196 199 200
why_erf                         000367 automatic       bit(1)                   initial unaligned dcl 104 set ref 104*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
AMU_INFO_VERSION                       internal static char(8)                  initial unaligned dcl 1-57
AMU_INFO_VERSION_1                     internal static char(8)                  initial unaligned dcl 1-56
AMU_INFO_VERSION_2                     internal static char(8)                  initial unaligned dcl 1-58
AZM_INFO_VERSION_1                     internal static char(8)                  initial unaligned dcl 2-19
AZM_INFO_VERSION_2                     internal static char(8)                  initial unaligned dcl 2-20
FDUMP_PROCESS_TYPE                     internal static fixed bin(17,0)          initial dcl 1-47
FDUMP_TYPE                             internal static fixed bin(17,0)          initial dcl 1-47
INDIRECT_TYPE                          internal static fixed bin(17,0)          initial dcl 1-47
NETWORK_FDUMP_TYPE                     internal static fixed bin(17,0)          initial dcl 1-47
NETWORK_ONLINE_TYPE                    internal static fixed bin(17,0)          initial dcl 1-47
ONLINE_PROCESS_TYPE                    internal static fixed bin(17,0)          initial dcl 1-47
ONLINE_TYPE                            internal static fixed bin(17,0)          initial dcl 1-47
PDIR_SUFFIX                            internal static char(4)                  initial unaligned dcl 1-60
SAVED_PROC_TYPE                        internal static fixed bin(17,0)          initial dcl 1-47
amu_area                               based           area(1024)               dcl 1-43

NAMES DECLARED BY EXPLICIT CONTEXT.
BAD_TIME                        001155 constant        label                    dcl 219 ref 163
INVALID_REGULAR_EXPRESSION      002471 constant        label                    dcl 350 ref 354 356
azm_requests_3_                 000250 constant        entry                    external dcl 17
azm_requests_3_$events          000263 constant        entry                    external dcl 141
azm_requests_3_$syserr_log      001203 constant        entry                    external dcl 222
azm_requests_3_$tcq             002025 constant        entry                    external dcl 287
get_next_arg                    002247 constant        entry                    internal dcl 307 ref 247 263 269
no_wlog_args                    001650 constant        label                    dcl 278 ref 240
process_looking_for             002441 constant        entry                    internal dcl 343 ref 187
set_up                          002351 constant        entry                    internal dcl 325 ref 144 228 292
trans_selected                  002421 constant        entry                    internal dcl 336 ref 145 229 293

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      3202        3250    2713        3212
Length      3534    2713        46         247     267           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
azm_requests_3_                     568 external procedure  is an external procedure.  
on unit on line 163                  64 on unit               
on unit on line 207                  71 on unit               
get_next_arg                            internal procedure  shares stack frame of external procedure azm_requests_3_.  
set_up                                  internal procedure  shares stack frame of external procedure azm_requests_3_.  
trans_selected                          internal procedure  shares stack frame of external procedure azm_requests_3_.  
process_looking_for                     internal procedure  shares stack frame of external procedure azm_requests_3_.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
azm_requests_3_          000100 af_sw                       azm_requests_3_
                         000101 all_sw                      azm_requests_3_
                         000102 axp                         azm_requests_3_
                         000104 argl                        azm_requests_3_
                         000105 argno                       azm_requests_3_
                         000106 argp                        azm_requests_3_
                         000110 axstring                    azm_requests_3_
                         000112 brief_sw                    azm_requests_3_
                         000113 code                        azm_requests_3_
                         000114 count                       azm_requests_3_
                         000115 count_sw                    azm_requests_3_
                         000116 configp                     azm_requests_3_
                         000120 cur_erf                     azm_requests_3_
                         000121 del_cur_erf                 azm_requests_3_
                         000122 del_erf                     azm_requests_3_
                         000124 dsegp                       azm_requests_3_
                         000126 erfs_found                  azm_requests_3_
                         000127 expand_ptr_sw               azm_requests_3_
                         000130 expand_sw                   azm_requests_3_
                         000131 first_erf                   azm_requests_3_
                         000132 first_value_set             azm_requests_3_
                         000133 forward_search              azm_requests_3_
                         000134 frame_entry                 azm_requests_3_
                         000135 hdr_printed                 azm_requests_3_
                         000136 hold_index                  azm_requests_3_
                         000137 last                        azm_requests_3_
                         000140 last_erf                    azm_requests_3_
                         000141 list_erfs                   azm_requests_3_
                         000142 ll                          azm_requests_3_
                         000143 ln                          azm_requests_3_
                         000144 long_sw                     azm_requests_3_
                         000145 looking_for                 azm_requests_3_
                         000146 match_ptr                   azm_requests_3_
                         000150 match_str                   azm_requests_3_
                         000251 nargs                       azm_requests_3_
                         000252 next_erf                    azm_requests_3_
                         000253 prev_erf                    azm_requests_3_
                         000254 print_all_trans             azm_requests_3_
                         000255 range_value_set             azm_requests_3_
                         000256 raw_syserr_data             azm_requests_3_
                         000257 ret_str                     azm_requests_3_
                         000332 rv_lth                      azm_requests_3_
                         000334 rv_ptr                      azm_requests_3_
                         000336 sci_ptr                     azm_requests_3_
                         000340 segln                       azm_requests_3_
                         000341 slog_code                   azm_requests_3_
                         000352 start_configp               azm_requests_3_
                         000354 struct_sw                   azm_requests_3_
                         000355 temp_str                    azm_requests_3_
                         000364 time                        azm_requests_3_
                         000366 time_sw                     azm_requests_3_
                         000367 why_erf                     azm_requests_3_
                         000404 num_msgs                    azm_requests_3_
                         000405 match_sw                    azm_requests_3_
                         000406 exclude_sw                  azm_requests_3_
                         000407 rdy_sw                      azm_requests_3_
                         000410 amu_info_ptr                azm_requests_3_
                         000412 azm_info_ptr                azm_requests_3_
                         000450 really_looking_for          process_looking_for

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
alloc_char_temp     call_ext_out_desc   call_ext_out        return_mac          tra_ext_1           enable_op
shorten_stack       ext_entry           int_entry           any_to_any_truncate_

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
amu_$fdump_mpt_change_idx     amu_$tc_data_tcq              azm_display_fdump_events      azm_syserr_$data
azm_syserr_$log               continue_to_signal_           cv_dec_check_                 match_strings_$add
ssu_$abort_line               ssu_$arg_count                ssu_$arg_ptr                  ssu_$return_arg

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$bad_arg          error_table_$inconsistent     error_table_$noarg




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     52 000201        56 000203        57 000205        61 000206        62 000210        63 000211        64 000212
     65 000213        66 000214        67 000215        68 000216        69 000217        70 000220        71 000221
     72 000222        73 000223        75 000224        76 000225        77 000226        78 000227        79 000230
     85 000231        88 000232        89 000233        90 000234        91 000235        92 000236        93 000237
     97 000240        99 000241       100 000242       101 000243       104 000244        17 000247        19 000256
    141 000257       144 000271       145 000272       148 000324       149 000327       150 000331       151 000333
    152 000335       154 000337       155 000347       156 000364       157 000376       158 000400       159 000404
    160 000405       161 000422       163 000436       164 000455       165 000474       168 000475       169 000476
    170 000506       171 000510       172 000514       173 000515       174 000532       176 000546       177 000573
    181 000630       182 000631       183 000644       184 000657       185 000672       187 000734       188 000735
    190 000737       191 000741       192 000743       193 000745       194 000747       196 000750       198 001003
    199 001010       200 001015       201 001030       202 001032       206 001034       207 001037       208 001053
    209 001064       210 001074       212 001075       213 001120       215 001131       217 001154       219 001155
    222 001200       228 001211       229 001212       230 001217       231 001244       234 001245       235 001251
    236 001253       237 001255       238 001257       240 001260       242 001262       243 001271       245 001306
    246 001323       247 001327       248 001337       250 001374       251 001405       253 001406       254 001422
    255 001423       256 001427       257 001431       258 001432       260 001433       261 001435       263 001437
    264 001444       265 001500       266 001511       268 001512       269 001522       270 001533       271 001556
    273 001613       275 001614       276 001646       278 001650       281 001712       282 001735       283 001777
    285 002022       287 002023       292 002033       293 002034       295 002066       296 002070       297 002077
    298 002114       299 002131       300 002144       301 002176       303 002200       304 002233       305 002246
    307 002247       315 002260       316 002264       317 002330       320 002331       321 002332       323 002350
    325 002351       328 002352       329 002356       330 002361       331 002363       332 002402       334 002420
    336 002421       339 002423       340 002434       343 002441       348 002442       350 002447       354 002525
    356 002533       358 002540       360 002572       362 002622


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
