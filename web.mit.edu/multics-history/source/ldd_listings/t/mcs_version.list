	COMPILATION LISTING OF SEGMENT mcs_version
	Compiled by: Multics PL/I Compiler, Release 32f, of October 9, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 10/25/89  1050.7 mst Wed
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 mcs_version: proc;
       12 
       13 /* a command/active function that returns/prints the name of the version
       14*   *  of MCS most recently bootloaded into a specified FNP (defaults to a)
       15*   *
       16*   *  Written 6/9/77 by Robert Coren
       17**/
       18 
       19 
       20 /* ENTRIES */
       21 
       22 dcl  cu_$af_return_arg entry (fixed bin, ptr, fixed bin, fixed bin (35));
       23 dcl  cu_$arg_count entry (fixed bin);
       24 dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
       25 dcl (ioa_, com_err_, active_fnc_err_) entry options (variable);
       26 dcl  ring0_get_$segptr entry (char (*), char (*), ptr, fixed bin (35));
       27 dcl  ring_zero_peek_ entry (ptr, ptr, fixed bin, fixed bin (35));
       28 dcl  parse_fnp_name_ entry (char (*), fixed bin);
       29 
       30 dcl  err_entry entry variable options (variable);
       31 
       32 
       33 /* ARGUMENT STUFF */
       34 
       35 dcl  ret_ptr ptr;
       36 dcl  ret_l fixed bin;
       37 dcl  ret_str char (ret_l) varying based (ret_ptr);
       38 
       39 dcl  argp ptr;
       40 dcl  argl fixed bin;
       41 dcl  arg char (argl) based (argp);
       42 
       43 
       44 /* EXT STATIC */
       45 
       46 dcl (error_table_$not_act_fnc,
       47      error_table_$too_many_args)
       48      fixed bin (35) ext static;
       49 
       50 
       51 /* INTERNAL STATIC */
       52 
       53 dcl  prog_name char (11) int static options (constant) init ("mcs_version");
       54 
       55 
       56 /* AUTOMATIC */
       57 
       58 dcl  code fixed bin (35);
       59 dcl  nargs fixed bin;
       60 dcl  fnp_no fixed bin;
       61 dcl  sourcep ptr;
       62 dcl  our_version char (4);
       63 dcl  af bit (1);
       64 
       65 
       66 dcl (addr, index) builtin;
       67 
  1     1 /*  BEGIN dn355_data.incl.pl1 */
  1     2 
  1     3 
  1     4 
  1     5 /****^  HISTORY COMMENTS:
  1     6*  1) change(88-06-15,Berno), approve(88-07-13,MCR7928),
  1     7*     audit(88-06-15,Parisek), install(88-07-19,MR12.2-1061):
  1     8*     Add data needed for the uncp multiplexer (DSA gateway) interface
  1     9*     implementation.
  1    10*  2) change(89-03-20,Parisek), approve(89-06-06,MCR8110),
  1    11*     audit(89-10-09,Farley), install(89-10-25,MR12.3-1100):
  1    12*     Add support of protocol mpx.
  1    13*                                                   END HISTORY COMMENTS */
  1    14 
  1    15 
  1    16 /* Date Last Modified and Reason
  1    17*
  1    18*   Created 07/25/74 by R. B. Snyder for new ttydim.
  1    19*   Modified 06/23/77 by J. Stern to add channel_work_reqd and cwork_count
  1    20*   Modified 08/14/78 by Robert Coren to remove devx_tab and invent PCBs
  1    21*   Modified 79 May 14 by Art Beattie to add fnp_mem_size
  1    22*   Modified December 1979 by Robert Coren to add FNP queue lock
  1    23*   Modified January 1980 by Larry Johnson to increase max number of FNPs to 8
  1    24*   Modified 02/12/80 by Robert Coren to add dcw_list_array_ptr
  1    25*   Modified 03/06/80 by Robert Coren to add some metering info
  1    26*   Modified 12/10/80 by Robert Coren to add get_meters_waiting flag
  1    27*   Modified 83-12-16 BIM to use a chanid instead of iom/channel fb's.
  1    28*   Modified 1984-07-26 BIM for paged iom.
  1    29*   Modified in September 1985 for the DN7100 version interim.
  1    30**/
  1    31 
  1    32 /* LOCKING RULES: A fnp is locked by its LCTE unless its LCTE is uninitialized.
  1    33*   In that case, the configuration_lock must be held.
  1    34*   if tty_lock$lock_lcte returns io_no_permission, then the caller must
  1    35*   lock$lock_fast the configuration lock and retry the LCTE lock. If
  1    36*   the lcte is now initialized, too bad. Otherwise, the config lock protects.
  1    37*
  1    38*   Configuration locking is interesting to init_multiplexer and
  1    39*   all of fnp t&d and reconfiguration. The guts of the multiplexer
  1    40*   pay no attention to it. Thus, if the LCTE can be locked, it MUST be
  1    41*   locked before changing the io_manager_assigned flag. */
  1    42 
  1    43 /* format: style4,delnl,insnl,^ifthendo */
  1    44 
  1    45 dcl  max_no_355s fixed bin int static init (8) options (constant);
  1    46 						/* max no of 355s we can handle (arbitrary) */
  1    47 dcl  dn355_data$ external fixed bin;
  1    48 
  1    49 dcl  infop pointer;
  1    50 dcl  fnpp ptr;
  1    51 
  1    52 dcl  1 datanet_info aligned based (infop),
  1    53        2 configuration_lock aligned,
  1    54          3 pid bit (36) aligned,
  1    55          3 event bit (36) aligned,
  1    56          3 flags aligned,
  1    57 	 4 notify_sw bit (1) unaligned,
  1    58 	 4 pad bit (35) aligned,
  1    59        2 no_of_355s fixed bin,			/* no. of FNP's */
  1    60        2 trace bit (1) aligned,			/* watch events on console */
  1    61        2 debug_stop bit (1) aligned,			/* crash on errors */
  1    62        2 uncp_bufp ptr,                                     /* pointer to the circular buffer */
  1    63        2 protocol_datap ptr,				/* pointer to protocol_mpx data */
  1    64        2 pad1 (6) bit (36) aligned,
  1    65        2 per_datanet (max_no_355s) aligned like fnp_info;	/* data per datanet */
  1    66 
  1    67 dcl  1 fnp_info aligned based (fnpp),			/* structure for each FNP */
  1    68        2 mbx_pt pointer,				/* pointer to mailbox NULL if not in config */
  1    69        2 pcb_array_ptr pointer,			/* pointer to array of physical channel blocks */
  1    70        2 dcw_list_array_ptr pointer,			/* pointer to array of space reserved for output DCW lists */
  1    71        2 no_of_channels fixed bin,			/* number of channels on this FNP */
  1    72        2 fnp_id,
  1    73          3 fnp_tag char (1) unaligned,			/* letter identifying FNP */
  1    74          3 fnp_number fixed bin (9) unsigned unaligned,	/* sequence number of FNP */
  1    75          3 padc bit (18) unaligned,
  1    76        2 io_chanid char (8) aligned,
  1    77        2 io_manager_chx fixed bin (35),			/* devx for DIA on iom */
  1    78        2 lsla_idx (0:5) fixed bin aligned,		/* index into PCB array for lsla lines */
  1    79        2 hsla_idx (0:2) fixed bin aligned,		/* index into PCB array for hsla lines */
  1    80        2 count fixed bin,				/* number of items in delay queue */
  1    81        2 cur_ptr fixed bin,				/* offset in tty_buf of next delay queue element */
  1    82        2 last_ptr fixed bin,				/* offset in tty_buf of last delay queue element */
  1    83        2 bleft_355 fixed bin,				/* number of free buffers in this 355 */
  1    84        2 flags,
  1    85          3 work_reqd bit (1) unaligned,			/* mailbox messages queued up */
  1    86          3 bootloading bit (1) unaligned,		/* currently being bootloaded */
  1    87          3 running bit (1) unaligned,			/* this FNP is running */
  1    88          3 wired bit (1) unaligned,			/* bootload buffer is wired */
  1    89          3 dump_patch_in_progress bit (1) unaligned,	/* a dump or patch order is in progress */
  1    90          3 level_3_pending bit (1) unaligned,		/* level 3 interrupt pending */
  1    91          3 level_7_pending bit (1) unaligned,		/* level 7 interrupt pending */
  1    92          3 dump_patch_disabled bit (1) unaligned,		/* dump & patch orders disabled because of timeout */
  1    93          3 t_and_d_in_progress bit (1) unaligned,		/* T & D using FNP */
  1    94          3 t_and_d_lev_3_occurred bit (1) unaligned,	/* A level 3 occurred */
  1    95          3 t_and_d_lev_7_occurred bit (1) unaligned,
  1    96          3 t_and_d_notify_requested bit (1) unaligned,
  1    97          3 t_and_d_assigned bit (1) unaligned,		/* AS has given fnp to process */
  1    98          3 get_meters_waiting bit (1) unaligned,		/* waiting for meter copy to complete */
  1    99          3 padb bit (7) unaligned,
  1   100          3 active_dial unaligned,
  1   101             4 active_bit (15) bit (1) unaligned,		/* ON if the process is active */
  1   102        2 lcte_ptr ptr,				/* pointer to this FNP's LCT entry */
  1   103        2 astep ptr,					/* pointer to aste of wired bootload buffer */
  1   104        2 boot_ev_chan fixed bin (71),			/* event channel over which to signal bootload completion */
  1   105        2 boot_process_id bit (36),			/* process that initiated bootload */
  1   106        2 version char (4),				/* version id of core image */
  1   107        2 fnp_mem_size fixed bin (18) unsigned,		/* memory size of this FNP in 18-bit words */
  1   108        2 queue_lock bit (36) aligned,			/* lock for interrupt queue */
  1   109        2 dump_patch_lock bit (36),			/* lock for fnp_dump or _patch operation */
  1   110        2 q_entries_made fixed bin (35),			/* count of delay queue entries made */
  1   111        2 input_reject_count fixed bin,			/* number of times input rejected */
  1   112        2 processed_from_q fixed bin (35),		/* number of interrupts processed from queue */
  1   113        2 fnp_channel_locked fixed bin (35),		/* number of times dn355 found per-FNP lock locked */
  1   114        2 input_data_transactions fixed bin (35),		/* number of mailbox transactions for input */
  1   115        2 output_data_transactions fixed bin (35),		/* number of mailbox transactions for output */
  1   116        2 input_control_transactions fixed bin (35),	/* number of mailbox transactions for inbound control info */
  1   117        2 output_control_transactions fixed bin (35),	/* number of mailbox transactions for outbound control info */
  1   118        2 cumulative_mbx_in_use fixed bin (35),		/* cumulative count of number of outbound mailboxes in use */
  1   119        2 max_mbx_in_use fixed bin,			/* maximum number of mailboxes in use at any given time */
  1   120        2 mbx_in_use_updated fixed bin (35),		/* number of increments to cumulative_mbx_in_use */
  1   121        2 mbx_unavailable fixed bin (35),		/* number of times had to queue mailbox transaction because none available */
  1   122        2 free_size fixed bin (35),			/* cumulative amount of bleft_355 */
  1   123        2 free_count fixed bin,			/* number of adds to above */
  1   124        2 fnp_space_restricted_output fixed bin (35),	/* number of times available FNP space restricted amount of output sent */
  1   125        2 tandd_pcbx fixed bin,			/* index of PCB for COLTS channel */
  1   126        2 n_pages_wired fixed bin,			/* pages wired for loading */
  1   127        2 config_flags aligned,
  1   128          3 available bit (1) unaligned,			/* reconfig says "yes" */
  1   129          3 io_manager_assigned bit (1) unaligned,		/* We have channel assigned to us */
  1   130          3 pad bit (34) unaligned,
  1   131        2 uncp_pcbx1 fixed bin (17) unaligned,		/* For the DN7100 */
  1   132        2 uncp_pcbx2 fixed bin (17) unaligned,		/* For the DN7100 */  
  1   133        2 ptx fixed bin,				/* page table index, used only at bootload */
  1   134        2 ptp pointer unaligned;			/* page table for this FNP */
  1   135 
  1   136 /**** The following named constants are used to lay out the
  1   137*      iom page tables. Each FNP has to have its own page
  1   138*      table because there is not enough room to have eight different
  1   139*      bootload images of 32 K and > 64 K of tty_buf 
  1   140*
  1   141*      THE MAX TTY BUF LENGTH IS 192 K words. We could have another 16 K
  1   142*      easily, and then after that it would get hard. */ 
  1   143 
  1   144 /**** The layout
  1   145*
  1   146*      Page   I/O address   Memory address     Comments
  1   147*      ----      ------     --------------     --------
  1   148*      0              0       xxxxxx           invalid PTW
  1   149*      1           2000         2000           write-enabled (mailbox)
  1   150*      2           4000         4000           write-enabled (mailbox)
  1   151*      3	        6000         6000           write-enabled (mailbox)
  1   152*      4          10000       as needed        bootload image segment page 0
  1   153*      ....        ....         ....           ....
  1   154*      35        110000       as needed        bootload image segment page 31
  1   155*      36        112000       xxxxxx           invalid PTW
  1   156*      ...         ....         ....           ....
  1   157*      63        160000         ....           invalid PTW
  1   158*      64        200000       as needed        tty_buf page 0
  1   159*      ...         ....         ....           ....
  1   160*      127       260000       as needed        tty_buf page 63
  1   161*      255       ......        .....           tty_buf page 191
  1   162**/
  1   163 
  1   164 /**** We assume that the page table starts at all zeros. */
  1   165 
  1   166 declare  FIRST_BOOTLOAD_PAGEX fixed bin init (4) int static options (constant);
  1   167 declare  FIRST_TTY_BUF_PAGEX fixed bin init (64) int static options (constant);
  1   168 
  1   169 /* End include file dn355_data.incl.pl1 */
       68 
       69 
       70 	call cu_$af_return_arg (nargs, ret_ptr, ret_l, code);
       71 	if code = error_table_$not_act_fnc
       72 	then do;
       73 	     af = "0"b;
       74 	     err_entry = com_err_;
       75 	     call cu_$arg_count (nargs);
       76 	end;
       77 
       78 	else if code ^= 0
       79 	then do;
       80 	     call active_fnc_err_ (code, prog_name);
       81 	     return;
       82 	end;
       83 
       84 	else do;
       85 	     af = "1"b;
       86 	     err_entry = active_fnc_err_;
       87 	end;
       88 
       89 	if nargs = 0
       90 	then fnp_no = 1;
       91 
       92 	else if nargs = 1
       93 	then do;
       94 	     call cu_$arg_ptr (1, argp, argl, code);
       95 	     call parse_fnp_name_ (arg, fnp_no);
       96 	     if fnp_no < 0
       97 	     then do;
       98 		call err_entry (0, prog_name, "Invalid FNP tag ^a", arg);
       99 		return;
      100 	     end;
      101 	end;
      102 
      103 	else do;
      104 	     call err_entry (error_table_$too_many_args, prog_name,
      105 		"Usage:  mcs_version {fnp_tag}");
      106 	     return;
      107 	end;
      108 
      109 	call ring0_get_$segptr ("", "dn355_data", infop, code);
      110 	if code ^= 0
      111 	then do;
      112 	     call err_entry (code, prog_name, "Could not get pointer to dn355_data");
      113 	     return;
      114 	end;
      115 
      116 	sourcep = addr (datanet_info.per_datanet (fnp_no).version);
      117 	call ring_zero_peek_ (sourcep, addr (our_version), 1, code);
      118 	if code ^= 0
      119 	then do;
      120 	     call err_entry (code, prog_name, "Could not copy version from dn355_data");
      121 	     return;
      122 	end;
      123 	if our_version = "" | our_version = low (4) then our_version = "none";
      124 
      125 	if af
      126 	then ret_str = our_version;
      127 	else call ioa_ (our_version);
      128 
      129 	return;
      130      end /* mcs_version */ ;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    10/25/89  1000.0  mcs_version.pl1                   >special_ldd>install>MR12.3-1100>mcs_version.pl1
68           1    10/25/89  0959.9  dn355_data.incl.pl1               >special_ldd>install>MR12.3-1100>dn355_data.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
active_fnc_err_                 000022 constant        entry                    external dcl 25 ref 80 86
addr                                                   builtin function         dcl 66 ref 116 117 117
af                              000121 automatic       bit(1)                   packed unaligned dcl 63 set ref 73* 85* 125
arg                                    based           char                     packed unaligned dcl 41 set ref 95* 98*
argl                            000112 automatic       fixed bin(17,0)          dcl 40 set ref 94* 95 95 98 98
argp                            000110 automatic       pointer                  dcl 39 set ref 94* 95 98
code                            000113 automatic       fixed bin(35,0)          dcl 58 set ref 70* 71 78 80* 94* 109* 110 112* 117*
                                                                                  118 120*
com_err_                        000020 constant        entry                    external dcl 25 ref 74
cu_$af_return_arg               000010 constant        entry                    external dcl 22 ref 70
cu_$arg_count                   000012 constant        entry                    external dcl 23 ref 75
cu_$arg_ptr                     000014 constant        entry                    external dcl 24 ref 94
datanet_info                           based           structure                level 1 dcl 1-52
err_entry                       000100 automatic       entry variable           dcl 30 set ref 74* 86* 98 104 112 120
error_table_$not_act_fnc        000032 external static fixed bin(35,0)          dcl 46 ref 71
error_table_$too_many_args      000034 external static fixed bin(35,0)          dcl 46 set ref 104*
fnp_info                               based           structure                level 1 dcl 1-67
fnp_no                          000115 automatic       fixed bin(17,0)          dcl 60 set ref 89* 95* 96 116
infop                           000122 automatic       pointer                  dcl 1-49 set ref 109* 116
ioa_                            000016 constant        entry                    external dcl 25 ref 127
max_no_355s                            internal static fixed bin(17,0)          initial dcl 1-45 ref 1-52
nargs                           000114 automatic       fixed bin(17,0)          dcl 59 set ref 70* 75* 89 92
our_version                     000120 automatic       char(4)                  packed unaligned dcl 62 set ref 117 117 123 123 123*
                                                                                  125 127*
parse_fnp_name_                 000030 constant        entry                    external dcl 28 ref 95
per_datanet              22            based           structure                array level 2 dcl 1-52
prog_name                       000000 constant        char(11)                 initial packed unaligned dcl 53 set ref 80* 98* 104*
                                                                                  112* 120*
ret_l                           000106 automatic       fixed bin(17,0)          dcl 36 set ref 70* 125
ret_ptr                         000104 automatic       pointer                  dcl 35 set ref 70* 125
ret_str                                based           varying char             dcl 37 set ref 125*
ring0_get_$segptr               000024 constant        entry                    external dcl 26 ref 109
ring_zero_peek_                 000026 constant        entry                    external dcl 27 ref 117
sourcep                         000116 automatic       pointer                  dcl 61 set ref 116* 117*
version                  63            based           char(4)                  array level 3 dcl 1-52 set ref 116

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
FIRST_BOOTLOAD_PAGEX                   internal static fixed bin(17,0)          initial dcl 1-166
FIRST_TTY_BUF_PAGEX                    internal static fixed bin(17,0)          initial dcl 1-167
dn355_data$                            external static fixed bin(17,0)          dcl 1-47
fnpp                                   automatic       pointer                  dcl 1-50
index                                                  builtin function         dcl 66

NAME DECLARED BY EXPLICIT CONTEXT.
mcs_version                     000065 constant        entry                    external dcl 11

NAME DECLARED BY CONTEXT OR IMPLICATION.
low                                                    builtin function         ref 123

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       652         710     512         662
Length      1114     512        36         170     140           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
mcs_version                         118 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
mcs_version              000100 err_entry                   mcs_version
                         000104 ret_ptr                     mcs_version
                         000106 ret_l                       mcs_version
                         000110 argp                        mcs_version
                         000112 argl                        mcs_version
                         000113 code                        mcs_version
                         000114 nargs                       mcs_version
                         000115 fnp_no                      mcs_version
                         000116 sourcep                     mcs_version
                         000120 our_version                 mcs_version
                         000121 af                          mcs_version
                         000122 infop                       mcs_version

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ent_var_desc   call_ext_out_desc   call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
active_fnc_err_               com_err_                      cu_$af_return_arg             cu_$arg_count
cu_$arg_ptr                   ioa_                          parse_fnp_name_               ring0_get_$segptr
ring_zero_peek_

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$not_act_fnc      error_table_$too_many_args




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000064        70 000072        71 000106        73 000112        74 000113        75 000117        76 000125
     78 000126        80 000130        81 000144        85 000145        86 000147        89 000153        92 000160
     94 000162        95 000201        96 000221        98 000223        99 000261       101 000262       104 000263
    106 000307       109 000310       110 000342       112 000344       113 000367       116 000370       117 000375
    118 000416       120 000420       121 000443       123 000444       125 000461       127 000475       129 000506


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
