	COMPILATION LISTING OF SEGMENT display_list
	Compiled by: Multics PL/I Compiler, Release 27d, of October 11, 1982
	Compiled at: Honeywell LISD Phoenix, System M
	Compiled on: 11/15/82  1624.4 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 display_list: proc(q,tree_level) recursive;			/* prints initial lists */
       12 
       13 /*	Modified on:	23 October 1970 by PG */
       14 /*	Modified on:	19 November 1979 by PCK to print a tree level indented listing */
       15 
       16 dcl	(p,q,r) ptr,
       17 	tree_level fixed bin,
       18 	(ioa_,ioa_$nnl) entry options(variable),
       19 	display_any_node_name entry(char(*) aligned,ptr,fixed bin),
       20 	display_exp entry(ptr,fixed bin),
       21 	(i,n) fixed bin(15);
       22 
       23 dcl	null builtin;
       24 
  1     1 /* BEGIN INCLUDE FILE ... token.incl.pl1 */
  1     2 
  1     3 dcl	1 token			based aligned,
  1     4 	2 node_type		bit(9) unaligned,
  1     5 	2 type			bit(9) unaligned,
  1     6 	2 loc			bit(18) unaligned,	/* symtab offset for identifiers, "p" flag for constants */
  1     7 	2 declaration		ptr unaligned,
  1     8 	2 next			ptr unaligned,
  1     9 	2 size			fixed(9),
  1    10 	2 string			char(n refer(token.size));
  1    11 
  1    12 /* END INCLUDE FILE ... token.incl.pl1 */
       25 
  2     1 /* BEGIN INCLUDE FILE ... list.incl.pl1 */
  2     2 
  2     3 /* Modified 26 June 81 by EBush to add max_list_elements */
  2     4 
  2     5 
  2     6 dcl	1 list		based aligned,
  2     7 	2 node_type	bit(9) unaligned,
  2     8 	2 reserved	bit(12) unaligned,
  2     9 	2 number		fixed(14) unaligned,
  2    10 	2 element		dimension(n refer(list.number)) ptr unaligned;
  2    11 
  2    12 dcl       max_list_elements   fixed bin(17) internal static options (constant)
  2    13 	                    init(16383);
  2    14 
  2    15 /* END INCLUDE FILE ... list.incl.pl1 */
       26 
  3     1 /* BEGIN INCLUDE FILE ... nodes.incl.pl1 */
  3     2 
  3     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
  3     4 
  3     5 dcl (	block_node		initial("000000001"b),
  3     6 	statement_node		initial("000000010"b),
  3     7 	operator_node		initial("000000011"b),
  3     8 	reference_node		initial("000000100"b),
  3     9 	token_node		initial("000000101"b),
  3    10 	symbol_node		initial("000000110"b),
  3    11 	context_node		initial("000000111"b),
  3    12 	array_node		initial("000001000"b),
  3    13 	bound_node		initial("000001001"b),
  3    14 	format_value_node		initial("000001010"b),
  3    15 	list_node			initial("000001011"b),
  3    16 	default_node		initial("000001100"b),
  3    17 	machine_state_node		initial("000001101"b),
  3    18 	source_node		initial("000001110"b),
  3    19 	label_node		initial("000001111"b),
  3    20 	cross_reference_node	initial("000010000"b),
  3    21 	sf_par_node		initial("000010001"b),
  3    22 	temporary_node		initial("000010010"b),
  3    23 	label_array_element_node	initial("000010011"b),
  3    24 	by_name_agg_node		initial("000010100"b))
  3    25 				bit(9) internal static aligned options(constant);
  3    26 
  3    27 dcl	1 node			based aligned,
  3    28 	2 type			unal bit(9),
  3    29 	2 source_id		unal structure,
  3    30 	  3 file_number		bit(8),
  3    31 	  3 line_number		bit(14),
  3    32 	  3 statement_number	bit(5);
  3    33 
  3    34 /* END INCLUDE FILE ... nodes.incl.pl1 */
       27 
       28 	p = q;
       29 begin:
       30 	if p=null then return;
       31 	if p->node.type ^= list_node
       32 	then do;
       33 		call display_any_node_name("display_list: arg is not a list node, arg=",p,tree_level+1);
       34 		return;
       35 	end;
       36 	n=p->list.number;
       37 	call ioa_("^/^vxLIST ^p, ^d elements",tree_level,p,n);
       38 	do i=1 to n;
       39 	r=p->list.element(i);
       40 	if r ^= null
       41 	then do; call ioa_("^vxELEMENT (^d) of ^p =",tree_level,i,p);
       42 		call display_exp(r,tree_level+1);  end;
       43 	else call ioa_("^vxELEMENT (^d) of ^p = NULL",tree_level,i,p);
       44 	end;
       45 
       46 	call ioa_("^vxEND LIST ^p^/",tree_level,p);
       47 
       48 	return;
       49 	end display_list;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/15/82  1503.1  display_list.pl1                  >dumps>old>recomp>display_list.pl1
25           1    09/14/77  1705.7  token.incl.pl1                    >ldd>include>token.incl.pl1
26           2    08/13/81  2211.5  list.incl.pl1                     >ldd>include>list.incl.pl1
27           3    07/21/80  1546.3  nodes.incl.pl1                    >ldd>include>nodes.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
display_any_node_name           000012 constant        entry                    external dcl 16 ref 33
display_exp                     000014 constant        entry                    external dcl 16 ref 42
element                   1            based           pointer                  array level 2 packed unaligned dcl 2-6 ref 39
i                               000104 automatic       fixed bin(15,0)          dcl 16 set ref 38* 39 41* 43*
ioa_                            000010 constant        entry                    external dcl 16 ref 37 41 43 46
list                                   based           structure                level 1 dcl 2-6
list_node                              constant        bit(9)                   initial dcl 3-5 ref 31
n                               000105 automatic       fixed bin(15,0)          dcl 16 set ref 36* 37* 38
node                                   based           structure                level 1 dcl 3-27
null                                                   builtin function         dcl 23 ref 29 40
number                    0(21)        based           fixed bin(14,0)          level 2 packed unaligned dcl 2-6 ref 36
p                               000100 automatic       pointer                  dcl 16 set ref 28* 29 31 33* 36 37* 39 41* 43* 46*
q                                      parameter       pointer                  dcl 16 ref 11 28
r                               000102 automatic       pointer                  dcl 16 set ref 39* 40 42*
tree_level                             parameter       fixed bin(17,0)          dcl 16 set ref 11 33 37* 41* 42 43* 46*
type                                   based           bit(9)                   level 2 packed unaligned dcl 3-27 ref 31

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
array_node                             internal static bit(9)                   initial dcl 3-5
block_node                             internal static bit(9)                   initial dcl 3-5
bound_node                             internal static bit(9)                   initial dcl 3-5
by_name_agg_node                       internal static bit(9)                   initial dcl 3-5
context_node                           internal static bit(9)                   initial dcl 3-5
cross_reference_node                   internal static bit(9)                   initial dcl 3-5
default_node                           internal static bit(9)                   initial dcl 3-5
format_value_node                      internal static bit(9)                   initial dcl 3-5
ioa_$nnl                        000000 constant        entry                    external dcl 16
label_array_element_node               internal static bit(9)                   initial dcl 3-5
label_node                             internal static bit(9)                   initial dcl 3-5
machine_state_node                     internal static bit(9)                   initial dcl 3-5
max_list_elements                      internal static fixed bin(17,0)          initial dcl 2-12
operator_node                          internal static bit(9)                   initial dcl 3-5
reference_node                         internal static bit(9)                   initial dcl 3-5
sf_par_node                            internal static bit(9)                   initial dcl 3-5
source_node                            internal static bit(9)                   initial dcl 3-5
statement_node                         internal static bit(9)                   initial dcl 3-5
symbol_node                            internal static bit(9)                   initial dcl 3-5
temporary_node                         internal static bit(9)                   initial dcl 3-5
token                                  based           structure                level 1 dcl 1-3
token_node                             internal static bit(9)                   initial dcl 3-5

NAMES DECLARED BY EXPLICIT CONTEXT.
begin                           000072 constant        label                    dcl 29
display_list                    000061 constant        entry                    external dcl 11

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       406         424     335         416
Length       634     335        16         173      51           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
display_list                        116 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
display_list             000100 p                           display_list
                         000102 r                           display_list
                         000104 i                           display_list
                         000105 n                           display_list

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return              ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
display_any_node_name         display_exp                   ioa_

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000055        28 000066        29 000072        31 000076        33 000102        34 000130        36 000131
     37 000135        38 000164        39 000173        40 000175        41 000201        42 000235        42 000252
     43 000253        44 000304        46 000306        48 000334


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
