	COMPILATION LISTING OF SEGMENT expand_mseg_msg_audit_info_
	Compiled by: Multics PL/I Compiler, Release 28e, of February 14, 1985
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 05/13/85  1536.9 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 
        7 /* format: style1,insnl,linecom,indcomtxt,^indnoniterdo,^inddcls */
        8 
        9 expand_mseg_msg_audit_info_:
       10      procedure (P_log_message_format_ptr, P_expand_mode_ptr, P_info_ptr,
       11 	P_info_size, P_expansion, P_code);
       12 
       13 /****
       14*      EXPAND_MSEG_MSG_AUDIT_INFO_
       15*
       16*      This is a secondary binary expander for log messages of the
       17*      "access_audit" data class.  It is called by expand_access_audit_msg_
       18*      when the extended binary data is of the proper type.
       19*
       20*      History:
       21*      1985-02-26, EJ Sharpe: initial coding
       22*****/
       23 
       24 /* Parameters */
       25 
       26 dcl     P_code		 fixed bin (35) parameter;	/* status code */
       27 dcl     P_expand_mode_ptr	 ptr parameter;
       28 dcl     P_expansion		 char (*) varying parameter;	/* character string to output */
       29 dcl     P_info_ptr		 ptr parameter;		/* pointer to binary info */
       30 dcl     P_info_size		 fixed bin (17) parameter;	/* size of binary info */
       31 dcl     P_log_message_format_ptr
       32 			 ptr parameter;
       33 
       34 /* Automatic */
       35 
       36 dcl     code		 fixed bin (35);		/* status code */
       37 dcl     temp		 char (1024) varying;	/* temporary string */
       38 
       39 /* Entries */
       40 
       41 dcl     display_access_class_	 entry (bit (72) aligned) returns (character (32) aligned);
       42 dcl     ioa_$rsnnl		 entry () options (variable);
       43 
       44 
       45 /* External */
       46 
       47 dcl     error_table_$bad_arg	 fixed bin (35) external static;
       48 dcl     error_table_$unimplemented_version
       49 			 fixed bin (35) external static;
       50 
       51 /* Builtin */
       52 
       53 dcl     addr		 builtin;
       54 dcl     size		 builtin;
       55 
       56 /* Program */
       57 
       58 	audit_mseg_msg_ptr = P_info_ptr;
       59 
       60 
       61 	if P_info_size < size (audit_mseg_msg_info)
       62 	then do;
       63 	     P_code = error_table_$bad_arg;
       64 	     return;
       65 	end;
       66 
       67 	if audit_mseg_msg_info.version ^= AUDIT_MSEG_MSG_INFO_VERSION_5
       68 	then do;
       69 	     P_code = error_table_$unimplemented_version;
       70 	     return;
       71 	end;
       72 
       73 	P_code = 0;
       74 
       75 	call ioa_$rsnnl (
       76 	     "MSEG V^d descriptor:^/Sender id=^a Sender level=^d Sender pid=^.3b^/Sender authorization=^a Sender max authorization=^a Sender audit=^.3b^/Message ID=^.3b Access class=^a",
       77 	     temp, (0),
       78 	     audit_mseg_msg_info.version,
       79 	     audit_mseg_msg_info.descriptor.sender_id,
       80 	     audit_mseg_msg_info.descriptor.sender_level,
       81 	     audit_mseg_msg_info.descriptor.sender_process_id,
       82 	     display_access_class_ ((audit_mseg_msg_info.descriptor.sender_authorization)),
       83 	     display_access_class_ ((audit_mseg_msg_info.descriptor.sender_max_authorization)),
       84 	     audit_mseg_msg_info.descriptor.sender_audit,
       85 	     audit_mseg_msg_info.descriptor.ms_id,
       86 	     display_access_class_ ((audit_mseg_msg_info.ms_access_class)));
       87 
       88 	P_expansion = P_expansion || temp;
       89 
       90 /* tell expand_access_audit_msg_ how much we've done */
       91 	P_info_size = P_info_size - size (audit_mseg_msg_info);
       92 
       93 	return;
       94 
       95 /* format: off */
       96  /* Begin include file - access_audit_mseg_info.incl.pl1 */
  1     2 
  1     3 /* format: style4,insnl,delnl */
  1     4 
  1     5 
  1     6 dcl  audit_mseg_msg_ptr pointer;
  1     7 
  1     8 dcl  1 audit_mseg_msg_info aligned based (audit_mseg_msg_ptr),
  1     9        2 info_type fixed bin (9) uns unal,		/* AAB_mseg_msg */
  1    10        2 version fixed bin (9) uns unal,
  1    11        2 descriptor unaligned,			/* by-name assignabme */
  1    12          3 sender_level fixed bin (3) unsigned,		/* with the version five message_descriptor */
  1    13          3 ms_id bit (72),
  1    14          3 sender_id char (32),
  1    15          3 sender_authorization bit (72),
  1    16          3 sender_max_authorization bit (72),
  1    17          3 ms_access_class bit (72),
  1    18          3 sender_process_id bit (36),
  1    19          3 sender_audit bit (36);
  1    20 
  1    21 dcl  AUDIT_MSEG_MSG_INFO_VERSION_5 fixed bin (9) uns unal static options (constant) init (5);
  1    22 						/* corresponds to Version 5 Message Segments */
  1    23 
  1    24 /* end include file - access_audit_mseg_info.incl.pl1 */
  1    25 
  1    26 
       96 
       97 
       98         end expand_mseg_msg_audit_info_;
       99 
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    05/13/85  1536.0  expand_mseg_msg_audit_info_.pl1   >spec>on>mseg>expand_mseg_msg_audit_info_.pl1
96           1    05/06/85  1121.6  access_audit_mseg_info.incl.pl1   >spec>on>mseg>access_audit_mseg_info.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
AUDIT_MSEG_MSG_INFO_VERSION_5          constant        fixed bin(9,0)           initial unsigned unaligned dcl 1-21 ref 67
P_code                                 parameter       fixed bin(35,0)          dcl 26 set ref 9 63* 69* 73*
P_expand_mode_ptr                      parameter       pointer                  dcl 27 ref 9
P_expansion                            parameter       varying char             dcl 28 set ref 9 88* 88
P_info_ptr                             parameter       pointer                  dcl 29 ref 9 58
P_info_size                            parameter       fixed bin(17,0)          dcl 30 set ref 9 61 91* 91
P_log_message_format_ptr               parameter       pointer                  dcl 31 ref 9
audit_mseg_msg_info                    based           structure                level 1 dcl 1-8 set ref 61 91
audit_mseg_msg_ptr              000502 automatic       pointer                  dcl 1-6 set ref 58* 61 67 75 75 75 75 75 75 75 75 75
                                                                                  75 75 75 91
descriptor                0(18)        based           structure                level 2 packed unaligned dcl 1-8
display_access_class_           000010 constant        entry                    external dcl 41 ref 75 75 75 75 75 75
error_table_$bad_arg            000014 external static fixed bin(35,0)          dcl 47 ref 63
error_table_$unimplemented_version
                                000016 external static fixed bin(35,0)          dcl 48 ref 69
ioa_$rsnnl                      000012 constant        entry                    external dcl 42 ref 75
ms_access_class          16(27)        based           bit(72)                  level 3 packed unaligned dcl 1-8 ref 75 75
ms_id                     0(21)        based           bit(72)                  level 3 packed unaligned dcl 1-8 set ref 75*
sender_audit             21(27)        based           bit(36)                  level 3 packed unaligned dcl 1-8 set ref 75*
sender_authorization     12(27)        based           bit(72)                  level 3 packed unaligned dcl 1-8 ref 75 75
sender_id                 2(27)        based           char(32)                 level 3 packed unaligned dcl 1-8 set ref 75*
sender_level              0(18)        based           fixed bin(3,0)           level 3 packed unsigned unaligned dcl 1-8 set ref
                                                                                  75*
sender_max_authorization
                         14(27)        based           bit(72)                  level 3 packed unaligned dcl 1-8 ref 75 75
sender_process_id        20(27)        based           bit(36)                  level 3 packed unaligned dcl 1-8 set ref 75*
size                                                   builtin function         dcl 54 ref 61 91
temp                            000100 automatic       varying char(1024)       dcl 37 set ref 75* 88
version                   0(09)        based           fixed bin(9,0)           level 2 packed unsigned unaligned dcl 1-8 set ref 67
                                                                                  75*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
addr                                                   builtin function         dcl 53
code                                   automatic       fixed bin(35,0)          dcl 36

NAME DECLARED BY EXPLICIT CONTEXT.
expand_mseg_msg_audit_info_     000076 constant        entry                    external dcl 9

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       420         440     325         430
Length       640     325        20         163      72           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
expand_mseg_msg_audit_info_         452 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
expand_mseg_msg_audit_info_
                         000100 temp                        expand_mseg_msg_audit_info_
                         000502 audit_mseg_msg_ptr          expand_mseg_msg_audit_info_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return              ext_entry_desc

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
display_access_class_         ioa_$rsnnl

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$bad_arg          error_table_$unimplemented_version




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
      9 000070        58 000111        61 000115        63 000120        64 000122        67 000123        69 000133
     70 000135        73 000136        75 000137        88 000306        91 000322        93 000324


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
