	COMPILATION LISTING OF SEGMENT library_fetch
	Compiled by: Multics PL/I Compiler, Release 28d, of October 4, 1983
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 09/25/84  1155.1 mst Tue
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 /* Modified October 26, 1983 by Jim Lippard to add -first_match (-fmch) and -all_matches (-amch)		*/
       11 /* Modified March 5, 1984 by Jim Lippard to assume -all_matches if more than one searchname or any starnames	*/
       12 /*    are supplied										*/
       13 /* Modified June 13, 1984 by Jim Lippard to assume -amch if -components is specified			*/
       14 
       15 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
       16 
       17 
       18 library_fetch: lf:	procedure;
       19 
       20      dcl						/*	automatic variables			*/
       21 	1 arg_struc_temp		like arg_struc,	/* storage for argument structure.		*/
       22 	code			fixed bin(35);	/* a status code.				*/
       23 
       24      dcl 	addr			builtin;
       25 
       26      dcl						/*	Entries Called			*/
       27 	com_err_			entry options(variable),
       28 	cu_$arg_count		entry returns (fixed bin),
       29 	cu_$arg_list_ptr		entry returns(ptr),
       30 	lib_args_			entry (1 aligned like LIBRARY, 1 aligned like STARNAME, 1 aligned like STARNAME, bit(72) aligned,
       31 				       bit(36) aligned, ptr, fixed bin(35)),
       32 	lib_fetch_		entry (ptr, ptr, ptr, bit(72) aligned, bit(36) aligned, ptr, fixed bin(35));
       33 
       34      dcl						/*	static variables			*/
       35 	True			bit(1) aligned int static options(constant) init ("1"b),
       36 	False			bit(1) aligned int static options(constant) init ("0"b);
       37 
       38 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
       39 
       40 
       41 	Parg_struc = addr(arg_struc_temp);		/* Initialize argument processing structure.	*/
       42 	arg_struc.version = Varg_struc_1;
       43 	arg_struc.program = "library_fetch";
       44 	arg_struc.Parg_list = cu_$arg_list_ptr();
       45 	arg_struc.Iarg_list = 1;
       46 	arg_struc.Larg_list = cu_$arg_count();
       47 	arg_struc.put_error = com_err_;
       48 	arg_struc.Srequirements_allowed = ""b;
       49 	arg_struc.Srequirements_initial = ""b;
       50 	arg_struc.Scontrol_allowed = ""b;
       51 	arg_struc.Scontrol_initial = ""b;
       52 
       53 	Sreq_allowed.access_class        = True;	/* Mark Sreq bits-  show which output args allowed*/
       54 	Sreq_allowed.acl                 = True;
       55 	Sreq_allowed.aim                 = True;
       56 	Sreq_allowed.author              = True;
       57 	Sreq_allowed.bit_count           = True;
       58 	Sreq_allowed.bit_count_author    = True;
       59 	Sreq_allowed.compiler_name       = True;
       60 	Sreq_allowed.compiler_options    = True;
       61 	Sreq_allowed.compiler_version    = True;
       62 	Sreq_allowed.copy                = True;
       63 	Sreq_allowed.current_length      = True;
       64 	Sreq_allowed.dtc                 = True;
       65 	Sreq_allowed.dtd                 = True;
       66 	Sreq_allowed.dtem                = True;
       67 	Sreq_allowed.dtm                 = True;
       68 	Sreq_allowed.dtu                 = True;
       69 	Sreq_allowed.entry_bound         = True;
       70 	Sreq_allowed.iacl                = True;
       71 	Sreq_allowed.kids                = True;
       72 	Sreq_allowed.kids_error          = True;
       73 	Sreq_allowed.level               = True;
       74 	Sreq_allowed.link_target         = True;
       75 	Sreq_allowed.lvid                = True;
       76 	Sreq_allowed.matching_names      = True;
       77 	Sreq_allowed.max_length          = True;
       78 	Sreq_allowed.mode                = True;
       79 	Sreq_allowed.msf_indicator       = True;
       80 	Sreq_allowed.names               = True;
       81 	Sreq_allowed.new_line            = True;
       82 	Sreq_allowed.not_ascii           = True;
       83 	Sreq_allowed.object_info         = True;
       84 	Sreq_allowed.offset              = True;
       85 	Sreq_allowed.pathname            = True;
       86 	Sreq_allowed.primary_name        = True;
       87 	Sreq_allowed.pvid                = True;
       88 	Sreq_allowed.quota               = True;
       89 	Sreq_allowed.rb                  = True;
       90 	Sreq_allowed.records_used        = True;
       91 	Sreq_allowed.root_search_proc    = True;
       92 	Sreq_allowed.safety              = True;
       93 	Sreq_allowed.type                = True;
       94 	Sreq_allowed.unique_id           = True;
       95 	Sreq_allowed.user                = True;
       96 
       97 
       98 
       99 	Sreq_init.user		   = True;	/* Mark bits on by default.			*/
      100 
      101 	Sc_allowed.acl            = True;		/* Mark Sc bits- show which ctl args allowed.	*/
      102 	Sc_allowed.all_status     = True;
      103 	Sc_allowed.chase          = True;
      104 	Sc_allowed.check_archive  = True;
      105 	Sc_allowed.check_ascii    = True;
      106 	Sc_allowed.components     = True;
      107 	Sc_allowed.container      = True;
      108 	Sc_allowed.default        = True;
      109 	Sc_allowed.iacl           = True;
      110 	Sc_allowed.object_info    = True;
      111 	Sc_allowed.quota          = True;
      112 	Sc_allowed.retain         = True;
      113 	Sc_allowed.descriptor     = True;
      114 	Sc_allowed.into_path      = True;
      115 	Sc_allowed.long           = True;
      116 	Sc_allowed.library        = True;
      117 	Sc_allowed.output_file    = True;
      118 	Sc_allowed.search_names   = True;
      119 	Sc_allowed.first_match    = True;
      120 
      121 	Sc_init.into_path 	      = True;		/* Mark bits for ctl args supplied by default.	*/
      122 	arg_struc.into_path = "==";
      123 	Sc_init.default           = True;
      124 	Sc_init.first_match       = True;
      125 
      126 	call lib_args_ (LIBRARY, STARNAME, EXCLUDE, Srequirements, Scontrol, addr(arg_struc), code);
      127 	if code ^= 0 then return;			/* call subr to process all arguments.		*/
      128 						/*   errors are reported by lib_args_.		*/
      129 
      130 	if ^Sc.default & ^S.names & ^S.matching_names & ^S.primary_name then
      131 	     S.matching_names = True;			/* use matching names by default.		*/
      132 
      133 	/* the following code does not work for a descriptor with default search names			*/
      134 	if STARNAME.N > 1 then Sc.first_match = False;	/* get all matches if more than one search name	*/
      135 	else if STARNAME.N = 1 then
      136 	     if STARNAME.C (1) ^= 0 then Sc.first_match = False; /* get all matches if it's a starname	*/
      137 	else if Sc.components then Sc.first_match = False; /* or if -components */
      138 
      139 	call lib_fetch_ (addr(LIBRARY), addr(STARNAME), addr(EXCLUDE), Srequirements, Scontrol,
      140 	     addr(arg_struc), code);
      141 	return;					/* errors reported by lib_fetch_.		*/
      142 
  1     1 /* START OF	lib_arg_struc_.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
  1     2 
  1     3 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  1     4 	/*									*/
  1     5 	/* NAME:  lib_arg_struc_.incl.pl1						*/
  1     6 	/*									*/
  1     7 	/*      This include segment defines structures used by the library maintenance tools	*/
  1     8 	/* to process their input arguments.  These structures are the arguments to the		*/
  1     9 	/* lib_args_ subroutine.							*/
  1    10 	/*									*/
  1    11 	/* STATUS									*/
  1    12 	/*									*/
  1    13 	/* 0) Created on:   May 25, 1976 by   Gary C. Dixon				*/
  1    14 	/* 1) Modified:     October 24, 1983 by Jim Lippard to add page_length		*/
  1    15 	/*									*/
  1    16 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  1    17 
  1    18 
  2     1 /* START OF:	lib_args_.incl.pl1			  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
  2     2 
  2     3 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  2     4 	/*									*/
  2     5 	/* N__a_m_e:  lib_args_.incl.pl1							*/
  2     6 	/*									*/
  2     7 	/*      This include segment defines structures for the arrays of library names and search*/
  2     8 	/* names used by library descriptor commands.  This segment, lib_Svalid_req_.incl.pl1,	*/
  2     9 	/* and lib_Scontrol_.incl.pl1 define the complete set of structures required as input	*/
  2    10 	/* to the lib_descriptor_ subroutine.						*/
  2    11 	/*									*/
  2    12 	/* S__t_a_t_u_s									*/
  2    13 	/*									*/
  2    14 	/* 0) Created on:   March 1, 1975 by  A. J. Scherer				*/
  2    15 	/* 1) Modified on:  April 8, 1975 by  G. C. Dixon					*/
  2    16 	/* 2) Modified on:  May 13, 1976 by  G. C. Dixon					*/
  2    17 	/* 3) Modified on:  January 17, 1984 by Jim Lippard to make structures aligned.		*/
  2    18 	/*									*/
  2    19 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  2    20 
  2    21 
  2    22      dcl	1 LIBRARY			aligned,		/* a structure containing names of libraries to	*/
  2    23 						/*   be searched.				*/
  2    24 	  2 N			fixed bin,	/*   attribute: number of library names in array.	*/
  2    25 	  2 group (100),				/*   attribute: array of library names		*/
  2    26 	    3 V			char(32) unal,	/*   attribute: a library name (value).		*/
  2    27 	    3 C			fixed bin(35);	/*   attribute: code from check_star_name_ for	*/
  2    28 						/*     this library name.			*/
  2    29 
  2    30      dcl	1 STARNAME		aligned,		/* a structure containing names of library entries*/
  2    31 						/*   being searched for.			*/
  2    32 	  2 N			fixed bin,	/*   attribute: number of starnames in array.	*/
  2    33 	  2 group (1000),				/*   attribute: array of starnames		*/
  2    34 	    3 V			char(32) unal,	/*   attribute: a starname (value).		*/
  2    35 	    3 C			fixed bin(35);	/*   attribute: code from check_star_name_ for	*/
  2    36 						/*     this starname.			*/
  2    37 
  2    38      dcl 	1 EXCLUDE			aligned like STARNAME;
  2    39 						/* structure containing names of library entries	*/
  2    40 						/*   to be excluded from a search.		*/
  2    41 
  2    42 /* END OF:	lib_args_.incl.pl1			  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
  1    19 
  1    20 
  1    21      dcl	Parg_struc		ptr;		/* ptr to the structure described below.	*/
  1    22 
  1    23      dcl	1 arg_struc		structure based (Parg_struc),
  1    24 	  2 version		fixed bin,	/* version number (currently 1).		*/
  1    25 	  2 program		char(32) varying,	/* name of calling program. 			*/
  1    26 	  2 Parg_list		ptr,		/* ptr to calling program's argument list. 	*/
  1    27 	  2 Iarg_list		fixed bin,	/* first arg of calling program's argument list	*/
  1    28 						/*   to be processed.			*/
  1    29 	  2 Larg_list		fixed bin,	/* total number of arguments in calling pgm's list*/
  1    30 	  2 put_error		entry options(variable),
  1    31 						/* program to call to output an error.		*/
  1    32 	  2 Srequirements_allowed	bit(72) aligned,	/* bits on if control argument associated with	*/
  1    33 						/*   that bit is acceptable to the program. 	*/
  1    34 	  2 Scontrol_allowed	bit(36) aligned,	/* bits on if control operation associated with	*/
  1    35 						/*   that bit is acceptable to the program. 	*/
  1    36 	  2 Srequirements_initial	bit(72) aligned,	/* bits on indicating initial settings for 	*/
  1    37 						/*   Srequirements. 			*/
  1    38 	  2 Scontrol_initial	bit(36) aligned,	/* bits on indicating initial settings for	*/
  1    39 						/*   Scontrol.  				*/
  1    40 	  2 descriptor		char(168) varying,	/* name of library descriptor to be used. 	*/
  1    41 	  2 footing		char(45) varying,	/* footing to be used on output pages. 		*/
  1    42 	  2 heading		char(120) varying,	/* heading to be used on 1st output page.	*/
  1    43 	  2 into_path		char(168) varying,	/* path into which library entries to be fetched.	*/
  1    44 	  2 output_file		char(168) varying,	/* path of output file to be written.		*/
  1    45 	  2 page_length		fixed bin,	/* length of output page			*/
  1    46 	  2 time			fixed bin;	/* grace period (in days) for library_cleanup.	*/
  1    47      dcl	1 Sreq_allowed		aligned like Svalid_req based (addr(arg_struc.Srequirements_allowed));
  1    48 						/* allowed requirements switches.		*/
  1    49      dcl	1 Sreq_init		aligned like Svalid_req based (addr(arg_struc.Srequirements_initial));
  1    50 						/* initial values for requirements switches.	*/
  1    51      dcl	1 Sc_allowed		aligned like Sc based (addr(arg_struc.Scontrol_allowed));
  1    52 						/* allowed control switches.			*/
  1    53      dcl	1 Sc_init			aligned like Sc based (addr(arg_struc.Scontrol_initial));
  1    54 						/* initial values for control switches.		*/
  1    55      dcl	Varg_struc_1		fixed bin int static init (1);
  1    56 
  1    57 /* END OF		lib_arg_struc_.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
      143 
      144 
  3     1 /* START OF:	lib_Svalid_req_.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
  3     2 
  3     3 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  3     4 	/*									*/
  3     5 	/* N__a_m_e:  lib_Svalid_req_.incl.pl1						*/
  3     6 	/*									*/
  3     7 	/*      This include segment defines the switches which request/validate the fields	*/
  3     8 	/* in a status node produced by lib_get_tree_.  This segment, lib_Scontrol_.incl.pl1,	*/
  3     9 	/* and lib_args_.incl.pl1 define the complete set of structures required as input to	*/
  3    10 	/* the lib_descriptor_ subroutine.  This subroutine is called by all of the library	*/
  3    11 	/* descriptor commands to obtain information about entries in a library.		*/
  3    12 	/*									*/
  3    13 	/*      If a switch is on, then the corresponding information in the node is valid, or 	*/
  3    14 	/* is requested for output.							*/
  3    15 	/*									*/
  3    16 	/* S__t_a_t_u_s									*/
  3    17 	/*									*/
  3    18 	/* 0) Created on:   April 8, 1975  by  G. C. Dixon				*/
  3    19 	/*									*/
  3    20 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  3    21 
  3    22 
  3    23      dcl	1 Svalid_req		aligned based,
  3    24 	  2 primary_name		bit(1) unal,	/* switch: output includes primary name	   	*/
  3    25 	  2 matching_names		bit(1) unal,	/* switch: output includes matching names  	*/
  3    26 	  2 names			bit(1) unal,	/* switch: output includes all names	   	*/
  3    27 
  3    28 	  2 pathname		bit(1) unal,	/* switch: output include pathname of node target	*/
  3    29 	  2 kids			bit(1) unal,	/* switch: children nodes (inferior) exist	*/
  3    30 	  2 kids_error		bit(1) unal,	/* switch: error occurred obtaining kid's info	*/
  3    31 
  3    32 	  2 type			bit(1) unal,	/* switch: type 			   	*/
  3    33 	  2 mode			bit(1) unal,	/* switch: user's access mode to node target	*/
  3    34 	  2 safety		bit(1) unal,	/* switch: safety switch setting		*/
  3    35 
  3    36 	  2 aim			bit(1) unal,	/* switch: Access Isolation Mechanism switches	*/
  3    37 	  2 copy			bit(1) unal,	/* switch: copy-on-write switch setting		*/
  3    38 	  2 unique_id		bit(1) unal,	/* switch: unique identifier		   	*/
  3    39 
  3    40 	  2 author		bit(1) unal,	/* switch: author of node target		*/
  3    41 	  2 dtem			bit(1) unal,	/* switch: date attributes modified	   	*/
  3    42 	  2 dtd			bit(1) unal,	/* switch: date dumped		   	*/
  3    43 
  3    44 	  2 link_target		bit(1) unal,	/* switch: target pathname of link node		*/
  3    45 	  2 dtm			bit(1) unal,	/* switch: date modified		   	*/
  3    46 	  2 dtu			bit(1) unal,	/* switch: date used		   	*/
  3    47 
  3    48 	  2 rb			bit(1) unal,	/* switch: ring brackets		   	*/
  3    49 	  2 access_class		bit(1) unal,	/* switch: AIM access class		   	*/
  3    50 	  2 records_used		bit(1) unal,	/* switch: records used		   	*/
  3    51 
  3    52 	  2 current_length		bit(1) unal,	/* switch: current length		   	*/
  3    53 	  2 max_length		bit(1) unal,	/* switch: maximum length			*/
  3    54 	  2 msf_indicator		bit(1) unal,	/* switch: count of MSF components.		*/
  3    55 
  3    56 	  2 bit_count		bit(1) unal,	/* switch: bit count		   	*/
  3    57 	  2 bit_count_author	bit(1) unal,	/* switch: bit count author.			*/
  3    58 	  2 offset		bit(1) unal,	/* switch: offset from segment base	   	*/
  3    59 
  3    60 	  2 entry_bound		bit(1) unal,	/* switch: call limit for gate node		*/
  3    61 	  2 lvid			bit(1) unal,	/* switch: logical volume id	   		*/
  3    62 	  2 pvid			bit(1) unal,	/* switch: physical volume id			*/
  3    63 
  3    64 	  2 quota			bit(1) unal,	/* switch: directory quota information		*/
  3    65 	  2 acl			bit(1) unal,	/* switch: ACL			   	*/
  3    66 	  2 iacl			bit(1) unal,	/* switch: initial ACLs		   	*/
  3    67 
  3    68 	  2 dtc			bit(1) unal,	/* switch: date-time compiled      		*/
  3    69 	  2 compiler_name		bit(1) unal,	/* switch: name of compiler			*/
  3    70 	  2 compiler_version	bit(1) unal,	/* switch: compiler version number         	*/
  3    71 
  3    72 	  2 compiler_options	bit(1) unal,	/* switch: compiler options info	   	*/
  3    73 	  2 object_info		bit(1) unal,	/* switch: other object segment info       	*/
  3    74 	  2 not_ascii		bit(1) unal,	/* switch: contents is not printable       	*/
  3    75 
  3    76 	  2 user			bit(1) unal,	/* switch: user-defined node information	*/
  3    77 	  2 root_search_proc	bit(1) unal,	/* switch: root search procedure info.		*/
  3    78 	  2 prev_mode		bit(1) unal,	/* switch: user's previous acces mode set.	*/
  3    79 	  2 pad			bit(26) unal,
  3    80 
  3    81 	  2 delete		bit(1) unal,	/* switch: on (for lcln) if node to be deleted.	*/
  3    82 
  3    83 	  2 cross_ref		bit(1) unal,	/* switch: cross-reference all names       	*/
  3    84 	  2 level			bit(1) unal,	/* switch: output status tree level number	*/
  3    85 	  2 new_line		bit(1) unal;	/* switch: output begins with newline char	*/
  3    86 
  3    87 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  3    88 	/*									*/
  3    89 	/*      The following declarations define a series of bit strings to be overlaid by 	*/
  3    90 	/* structures which are exactly like Svalid_req above, except for their level 1 name.	*/
  3    91 	/* These structures are used throughout the library descriptor commands and subroutines.	*/
  3    92 	/*									*/
  3    93 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  3    94 
  3    95 
  3    96      dcl	1 S			aligned based (addr(Srequirements)) like Svalid_req,
  3    97 	Srequirements		bit(72) aligned;
  3    98 
  3    99 /* END OF:	lib_Svalid_req_.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
      145 
      146 
  4     1 /* START OF:	lib_Scontrol_.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
  4     2 
  4     3 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  4     4 	/*									*/
  4     5 	/* N__a_m_e:  lib_Scontrol_.incl.pl1						*/
  4     6 	/*									*/
  4     7 	/*      This include segment defines the control switches used by library descriptor	*/
  4     8 	/* commands and subroutines.  These switches control the amount of information which is	*/
  4     9 	/* attached to each node of the tree by lib_get_tree_.  This segment, lib_args_.incl.pl1,	*/
  4    10 	/* and lib_Svalid_req_.incl.pl1 define the complete set of structures required as input	*/
  4    11 	/* to the lib_descriptor_ subroutine.						*/
  4    12 	/*									*/
  4    13 	/* S__t_a_t_u_s									*/
  4    14 	/*									*/
  4    15 	/* 0) Created on:  April 8, 1975  by  G. C. Dixon					*/
  4    16 	/* 1) Modified on: October 24, 1983 by Jim Lippard to add page_length, first_match	*/
  4    17 	/*									*/
  4    18 	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  4    19 
  4    20      dcl	1 Sc			aligned based (addr (Scontrol)),
  4    21 	  2 acl			bit(1) unal,	/* switch: return ACL for library entries.	*/
  4    22 	  2 all_status		bit(1) unal,	/* switch: return extra status information.	*/
  4    23 	  2 chase			bit(1) unal,	/* switch: link entries are to be chased.	*/
  4    24 
  4    25 	  2 check_archive		bit(1) unal,	/* switch: see if contents of entry is archive.	*/
  4    26 	  2 check_ascii		bit(1) unal,	/* switch: see if contents of entry is ascii.	*/
  4    27 	  2 components		bit(1) unal,	/* switch: return info about parent of terminal	*/
  4    28 						/*         nodes of the tree, and about all the	*/
  4    29 						/*	 nodes below the parent.		*/
  4    30 
  4    31 	  2 container		bit(1) unal,	/* switch: return info about parent of terminal	*/
  4    32 						/*         nodes of the tree.			*/
  4    33 	  2 default		bit(1) unal,	/* switch: use default requirement switch settings*/
  4    34 	  2 iacl			bit(1) unal,	/* switch: return initial ACLs for library entries*/
  4    35 
  4    36 	  2 object_info		bit(1) unal,	/* switch: return object info for object segments.*/
  4    37 	  2 quota			bit(1) unal,	/* switch: return quota information.		*/
  4    38 	  2 retain		bit(1) unal,	/* switch: print information about nodes awaiting	*/
  4    39 						/*         deletion.			*/
  4    40 
  4    41 	  2 pad			bit(10) unal,
  4    42 
  4    43 	  2 first_match		bit(1) unal,	/* switch: stop after first match		*/
  4    44 	  2 page_length		bit(1) unal,	/* switch: page length of output		*/
  4    45 
  4    46 	  2 delete		bit(1) unal,	/* switch: delete library entries		*/
  4    47 	  2 descriptor		bit(1) unal,	/* switch: library descriptor			*/
  4    48 	  2 exclude		bit(1) unal,	/* switch: exclusion search names.		*/
  4    49 
  4    50 	  2 footing		bit(1) unal,	/* switch: footing for output pages.		*/
  4    51 	  2 heading		bit(1) unal,	/* switch: heading for 1st output page.		*/
  4    52 	  2 into_path		bit(1) unal,	/* switch: path into which entries are fetched.	*/
  4    53 
  4    54 	  2 library		bit(1) unal,	/* switch: library names			*/
  4    55 	  2 list			bit(1) unal,	/* switch: list library entries		*/
  4    56 	  2 long			bit(1) unal,	/* switch: long output format required.		*/
  4    57 
  4    58 	  2 output_file		bit(1) unal,	/* switch: pathname of output file		*/
  4    59 	  2 search_names		bit(1) unal,	/* switch: search names			*/
  4    60 	  2 time			bit(1) unal,	/* switch: grace time for deletion of entries.	*/
  4    61 	Scontrol			bit(36) aligned;	/* switches: aligned copy of control switches.	*/
  4    62 
  4    63 /* END OF:	lib_Scontrol_.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
      147 
      148 
      149 
      150 	end library_fetch;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    09/25/84  1154.5  library_fetch.pl1                 >spec>on>6875-09/25/84>library_fetch.pl1
143          1    02/16/84  0928.6  lib_arg_struc_.incl.pl1           >ldd>include>lib_arg_struc_.incl.pl1
1-19         2    02/16/84  0928.6  lib_args_.incl.pl1                >ldd>include>lib_args_.incl.pl1
145          3    02/28/77  1409.3  lib_Svalid_req_.incl.pl1          >ldd>include>lib_Svalid_req_.incl.pl1
147          4    02/16/84  0928.6  lib_Scontrol_.incl.pl1            >ldd>include>lib_Scontrol_.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
C                        11     002215 automatic       fixed bin(35,0)          array level 3 dcl 2-30 set ref 135
EXCLUDE                         023666 automatic       structure                level 1 dcl 2-38 set ref 126* 139 139
False                                  constant        bit(1)                   initial dcl 34 ref 134 135 137
Iarg_list                14            based           fixed bin(17,0)          level 2 dcl 1-23 set ref 45*
LIBRARY                         000410 automatic       structure                level 1 dcl 2-22 set ref 126* 139 139
Larg_list                15            based           fixed bin(17,0)          level 2 dcl 1-23 set ref 46*
N                               002215 automatic       fixed bin(17,0)          level 2 dcl 2-30 set ref 134 135
Parg_list                12            based           pointer                  level 2 dcl 1-23 set ref 44*
Parg_struc                      045340 automatic       pointer                  dcl 1-21 set ref 41* 42 43 44 45 46 47 48 49 50 51
                                                                                  53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69
                                                                                  70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86
                                                                                  87 88 89 90 91 92 93 94 95 99 101 102 103 104 105
                                                                                  106 107 108 109 110 111 112 113 114 115 116 117
                                                                                  118 119 121 122 123 124 126 126 139 139
S                                      based           structure                level 1 dcl 3-96
STARNAME                        002215 automatic       structure                level 1 dcl 2-30 set ref 126* 139 139
Sc                                     based           structure                level 1 dcl 4-20
Sc_allowed                             based           structure                level 1 dcl 1-51
Sc_init                                based           structure                level 1 dcl 1-53
Scontrol                        045344 automatic       bit(36)                  dcl 4-20 set ref 126* 130 134 135 137 137 139*
Scontrol_allowed         24            based           bit(36)                  level 2 dcl 1-23 set ref 50* 101 102 103 104 105 106
                                                                                  107 108 109 110 111 112 113 114 115 116 117 118
                                                                                  119
Scontrol_initial         27            based           bit(36)                  level 2 dcl 1-23 set ref 51* 121 123 124
Sreq_allowed                           based           structure                level 1 dcl 1-47
Sreq_init                              based           structure                level 1 dcl 1-49
Srequirements                   045342 automatic       bit(72)                  dcl 3-96 set ref 126* 130 130 130 130 139*
Srequirements_allowed
                         22            based           bit(72)                  level 2 dcl 1-23 set ref 48* 53 54 55 56 57 58 59 60
                                                                                  61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77
                                                                                  78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94
                                                                                  95
Srequirements_initial
                         25            based           bit(72)                  level 2 dcl 1-23 set ref 49* 99
Svalid_req                             based           structure                level 1 dcl 3-23
True                                   constant        bit(1)                   initial dcl 34 ref 53 54 55 56 57 58 59 60 61 62 63
                                                                                  64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80
                                                                                  81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 99
                                                                                  101 102 103 104 105 106 107 108 109 110 111 112
                                                                                  113 114 115 116 117 118 119 121 123 124 130
Varg_struc_1                           constant        fixed bin(17,0)          initial dcl 1-55 ref 42
access_class              0(19)        based           bit(1)                   level 2 packed unaligned dcl 1-47 set ref 53*
acl                       0(31)        based           bit(1)                   level 2 in structure "Sreq_allowed" packed unaligned
                                                                                  dcl 1-47 in procedure "lf" set ref 54*
acl                                    based           bit(1)                   level 2 in structure "Sc_allowed" packed unaligned
                                                                                  dcl 1-51 in procedure "lf" set ref 101*
addr                                                   builtin function         dcl 24 ref 41 53 54 55 56 57 58 59 60 61 62 63 64 65
                                                                                  66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82
                                                                                  83 84 85 86 87 88 89 90 91 92 93 94 95 99 101 102
                                                                                  103 104 105 106 107 108 109 110 111 112 113 114
                                                                                  115 116 117 118 119 121 123 124 126 126 130 130
                                                                                  130 130 130 134 135 137 137 139 139 139 139 139
                                                                                  139 139 139
aim                       0(09)        based           bit(1)                   level 2 packed unaligned dcl 1-47 set ref 55*
all_status                0(01)        based           bit(1)                   level 2 packed unaligned dcl 1-51 set ref 102*
arg_struc                              based           structure                level 1 unaligned dcl 1-23 set ref 126 126 139 139
arg_struc_temp                  000100 automatic       structure                level 1 unaligned dcl 20 set ref 41
author                    0(12)        based           bit(1)                   level 2 packed unaligned dcl 1-47 set ref 56*
bit_count                 0(24)        based           bit(1)                   level 2 packed unaligned dcl 1-47 set ref 57*
bit_count_author          0(25)        based           bit(1)                   level 2 packed unaligned dcl 1-47 set ref 58*
chase                     0(02)        based           bit(1)                   level 2 packed unaligned dcl 1-51 set ref 103*
check_archive             0(03)        based           bit(1)                   level 2 packed unaligned dcl 1-51 set ref 104*
check_ascii               0(04)        based           bit(1)                   level 2 packed unaligned dcl 1-51 set ref 105*
code                            000407 automatic       fixed bin(35,0)          dcl 20 set ref 126* 127 139*
com_err_                        000010 constant        entry                    external dcl 26 ref 47
compiler_name             0(34)        based           bit(1)                   level 2 packed unaligned dcl 1-47 set ref 59*
compiler_options          1            based           bit(1)                   level 2 packed unaligned dcl 1-47 set ref 60*
compiler_version          0(35)        based           bit(1)                   level 2 packed unaligned dcl 1-47 set ref 61*
components                0(05)        based           bit(1)                   level 2 in structure "Sc" packed unaligned dcl 4-20
                                                                                  in procedure "lf" ref 137
components                0(05)        based           bit(1)                   level 2 in structure "Sc_allowed" packed unaligned
                                                                                  dcl 1-51 in procedure "lf" set ref 106*
container                 0(06)        based           bit(1)                   level 2 packed unaligned dcl 1-51 set ref 107*
copy                      0(10)        based           bit(1)                   level 2 packed unaligned dcl 1-47 set ref 62*
cu_$arg_count                   000012 constant        entry                    external dcl 26 ref 46
cu_$arg_list_ptr                000014 constant        entry                    external dcl 26 ref 44
current_length            0(21)        based           bit(1)                   level 2 packed unaligned dcl 1-47 set ref 63*
default                   0(07)        based           bit(1)                   level 2 in structure "Sc_init" packed unaligned
                                                                                  dcl 1-53 in procedure "lf" set ref 123*
default                   0(07)        based           bit(1)                   level 2 in structure "Sc_allowed" packed unaligned
                                                                                  dcl 1-51 in procedure "lf" set ref 108*
default                   0(07)        based           bit(1)                   level 2 in structure "Sc" packed unaligned dcl 4-20
                                                                                  in procedure "lf" ref 130
descriptor                0(25)        based           bit(1)                   level 2 packed unaligned dcl 1-51 set ref 113*
dtc                       0(33)        based           bit(1)                   level 2 packed unaligned dcl 1-47 set ref 64*
dtd                       0(14)        based           bit(1)                   level 2 packed unaligned dcl 1-47 set ref 65*
dtem                      0(13)        based           bit(1)                   level 2 packed unaligned dcl 1-47 set ref 66*
dtm                       0(16)        based           bit(1)                   level 2 packed unaligned dcl 1-47 set ref 67*
dtu                       0(17)        based           bit(1)                   level 2 packed unaligned dcl 1-47 set ref 68*
entry_bound               0(27)        based           bit(1)                   level 2 packed unaligned dcl 1-47 set ref 69*
first_match               0(22)        based           bit(1)                   level 2 in structure "Sc_init" packed unaligned
                                                                                  dcl 1-53 in procedure "lf" set ref 124*
first_match               0(22)        based           bit(1)                   level 2 in structure "Sc_allowed" packed unaligned
                                                                                  dcl 1-51 in procedure "lf" set ref 119*
first_match               0(22)        based           bit(1)                   level 2 in structure "Sc" packed unaligned dcl 4-20
                                                                                  in procedure "lf" set ref 134* 135* 137*
group                     1     002215 automatic       structure                array level 2 dcl 2-30
iacl                      0(08)        based           bit(1)                   level 2 in structure "Sc_allowed" packed unaligned
                                                                                  dcl 1-51 in procedure "lf" set ref 109*
iacl                      0(32)        based           bit(1)                   level 2 in structure "Sreq_allowed" packed unaligned
                                                                                  dcl 1-47 in procedure "lf" set ref 70*
into_path                 0(29)        based           bit(1)                   level 2 in structure "Sc_init" packed unaligned
                                                                                  dcl 1-53 in procedure "lf" set ref 121*
into_path               157            based           varying char(168)        level 2 in structure "arg_struc" dcl 1-23
                                                                                  in procedure "lf" set ref 122*
into_path                 0(29)        based           bit(1)                   level 2 in structure "Sc_allowed" packed unaligned
                                                                                  dcl 1-51 in procedure "lf" set ref 114*
kids                      0(04)        based           bit(1)                   level 2 packed unaligned dcl 1-47 set ref 71*
kids_error                0(05)        based           bit(1)                   level 2 packed unaligned dcl 1-47 set ref 72*
level                     1(34)        based           bit(1)                   level 2 packed unaligned dcl 1-47 set ref 73*
lib_args_                       000016 constant        entry                    external dcl 26 ref 126
lib_fetch_                      000020 constant        entry                    external dcl 26 ref 139
library                   0(30)        based           bit(1)                   level 2 packed unaligned dcl 1-51 set ref 116*
link_target               0(15)        based           bit(1)                   level 2 packed unaligned dcl 1-47 set ref 74*
long                      0(32)        based           bit(1)                   level 2 packed unaligned dcl 1-51 set ref 115*
lvid                      0(28)        based           bit(1)                   level 2 packed unaligned dcl 1-47 set ref 75*
matching_names            0(01)        based           bit(1)                   level 2 in structure "Sreq_allowed" packed unaligned
                                                                                  dcl 1-47 in procedure "lf" set ref 76*
matching_names            0(01)        based           bit(1)                   level 2 in structure "S" packed unaligned dcl 3-96
                                                                                  in procedure "lf" set ref 130 130*
max_length                0(22)        based           bit(1)                   level 2 packed unaligned dcl 1-47 set ref 77*
mode                      0(07)        based           bit(1)                   level 2 packed unaligned dcl 1-47 set ref 78*
msf_indicator             0(23)        based           bit(1)                   level 2 packed unaligned dcl 1-47 set ref 79*
names                     0(02)        based           bit(1)                   level 2 in structure "Sreq_allowed" packed unaligned
                                                                                  dcl 1-47 in procedure "lf" set ref 80*
names                     0(02)        based           bit(1)                   level 2 in structure "S" packed unaligned dcl 3-96
                                                                                  in procedure "lf" ref 130
new_line                  1(35)        based           bit(1)                   level 2 packed unaligned dcl 1-47 set ref 81*
not_ascii                 1(02)        based           bit(1)                   level 2 packed unaligned dcl 1-47 set ref 82*
object_info               0(09)        based           bit(1)                   level 2 in structure "Sc_allowed" packed unaligned
                                                                                  dcl 1-51 in procedure "lf" set ref 110*
object_info               1(01)        based           bit(1)                   level 2 in structure "Sreq_allowed" packed unaligned
                                                                                  dcl 1-47 in procedure "lf" set ref 83*
offset                    0(26)        based           bit(1)                   level 2 packed unaligned dcl 1-47 set ref 84*
output_file               0(33)        based           bit(1)                   level 2 packed unaligned dcl 1-51 set ref 117*
pathname                  0(03)        based           bit(1)                   level 2 packed unaligned dcl 1-47 set ref 85*
primary_name                           based           bit(1)                   level 2 in structure "S" packed unaligned dcl 3-96
                                                                                  in procedure "lf" ref 130
primary_name                           based           bit(1)                   level 2 in structure "Sreq_allowed" packed unaligned
                                                                                  dcl 1-47 in procedure "lf" set ref 86*
program                   1            based           varying char(32)         level 2 dcl 1-23 set ref 43*
put_error                16            based           entry variable           level 2 dcl 1-23 set ref 47*
pvid                      0(29)        based           bit(1)                   level 2 packed unaligned dcl 1-47 set ref 87*
quota                     0(30)        based           bit(1)                   level 2 in structure "Sreq_allowed" packed unaligned
                                                                                  dcl 1-47 in procedure "lf" set ref 88*
quota                     0(10)        based           bit(1)                   level 2 in structure "Sc_allowed" packed unaligned
                                                                                  dcl 1-51 in procedure "lf" set ref 111*
rb                        0(18)        based           bit(1)                   level 2 packed unaligned dcl 1-47 set ref 89*
records_used              0(20)        based           bit(1)                   level 2 packed unaligned dcl 1-47 set ref 90*
retain                    0(11)        based           bit(1)                   level 2 packed unaligned dcl 1-51 set ref 112*
root_search_proc          1(04)        based           bit(1)                   level 2 packed unaligned dcl 1-47 set ref 91*
safety                    0(08)        based           bit(1)                   level 2 packed unaligned dcl 1-47 set ref 92*
search_names              0(34)        based           bit(1)                   level 2 packed unaligned dcl 1-51 set ref 118*
type                      0(06)        based           bit(1)                   level 2 packed unaligned dcl 1-47 set ref 93*
unique_id                 0(11)        based           bit(1)                   level 2 packed unaligned dcl 1-47 set ref 94*
user                      1(03)        based           bit(1)                   level 2 in structure "Sreq_allowed" packed unaligned
                                                                                  dcl 1-47 in procedure "lf" set ref 95*
user                      1(03)        based           bit(1)                   level 2 in structure "Sreq_init" packed unaligned
                                                                                  dcl 1-49 in procedure "lf" set ref 99*
version                                based           fixed bin(17,0)          level 2 dcl 1-23 set ref 42*

NAMES DECLARED BY EXPLICIT CONTEXT.
lf                              000011 constant        entry                    external dcl 18
library_fetch                   000020 constant        entry                    external dcl 18

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       530         552     436         540
Length      1010     436        22         222      71           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
lf                                19202 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
lf                       000100 arg_struc_temp              lf
                         000407 code                        lf
                         000410 LIBRARY                     lf
                         002215 STARNAME                    lf
                         023666 EXCLUDE                     lf
                         045340 Parg_struc                  lf
                         045342 Srequirements               lf
                         045344 Scontrol                    lf

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        return              ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      cu_$arg_count                 cu_$arg_list_ptr              lib_args_
lib_fetch_

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     18 000010        41 000025        42 000030        43 000032        44 000037        45 000046        46 000052
     47 000062        48 000071        49 000074        50 000076        51 000077        53 000100        54 000102
     55 000104        56 000106        57 000110        58 000112        59 000114        60 000116        61 000120
     62 000122        63 000124        64 000126        65 000130        66 000132        67 000134        68 000136
     69 000140        70 000142        71 000144        72 000146        73 000150        74 000152        75 000154
     76 000156        77 000160        78 000162        79 000164        80 000166        81 000170        82 000172
     83 000174        84 000176        85 000200        86 000202        87 000204        88 000206        89 000210
     90 000212        91 000214        92 000216        93 000220        94 000222        95 000224        99 000226
    101 000230       102 000232       103 000234       104 000236       105 000240       106 000242       107 000244
    108 000246       109 000250       110 000252       111 000254       112 000256       113 000260       114 000262
    115 000264       116 000266       117 000270       118 000272       119 000274       121 000276       122 000300
    123 000304       124 000306       126 000310       127 000335       130 000337       134 000354       135 000362
    137 000370       139 000375       141 000431


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
