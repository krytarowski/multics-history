	COMPILATION LISTING OF SEGMENT dump_devq
	Compiled by: Multics PL/I Compiler, Release 28d, of October 4, 1983
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 02/06/85  1446.6 mst Wed
	    Options: optimize list

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 dump_devq: proc;
       12 
       13 dcl  char32 char (32) aligned,
       14      dn char (168) aligned init (">system_control_dir"),
       15      en char (32) aligned,
       16      c1 char (1) aligned,
       17      alrm char (1) aligned,
       18     (i, j, k, l, m, n) fixed bin,
       19      ap ptr,
       20      al fixed bin,
       21      bchr char (al) unaligned based (ap),
       22      ec fixed bin (35),
       23      qp ptr;
       24 
       25 dcl 1 xxx based aligned,
       26     2 w1 fixed bin (35),
       27     2 w2 fixed bin (35);
       28 
       29 dcl (addr, null, substr, index, unspec, length, bit, fixed, divide, mod, abs) builtin;
       30 
       31 dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35)),
       32      expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin (35)),
       33      ioa_ entry options (variable),
       34      ioa_$nnl entry options (variable),
       35      com_err_ entry options (variable);
       36 
       37 dcl  hcs_$initiate entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (1),
       38      fixed bin (2), ptr, fixed bin (35)),
       39      hcs_$terminate_noname entry (ptr, fixed bin (35)),
       40      hcs_$wakeup entry (bit (*) aligned, fixed bin (71), fixed bin (71), fixed bin (35));
       41 
  1     1 /* Beginning of include file device_queue.incl.pl1 */
  1     2 
  1     3 /* This structure describes the queue segment associated with
  1     4*each operator console in which are placed lines to be typed. */
  1     5 
  1     6 declare
  1     7 	1 device_queue aligned based(qp),	/* Header 24 dec 30 oct words */
  1     8 	  2 mc_atep	ptr,
  1     9 	  2 channel	fixed bin(71),
  1    10 	  2 device_name	char(32),
  1    11 	  2 no_of_messages	fixed bin,
  1    12 	  2 top_of_queue	fixed bin,
  1    13 	  2 end_of_queue	fixed bin,
  1    14 	  2 free_top	fixed bin,
  1    15 	  2 next_free	fixed bin,
  1    16 	  2 pad(7)	fixed bin,
  1    17 	  2 line (1),		/* 40 dec 50 oct words */
  1    18 	    3 not_done	bit(1) unal,
  1    19 	    3 alarm	bit (1) unal,
  1    20 	    3 xpad	bit (16) unal,
  1    21 	    3 source	fixed bin (17) unal,
  1    22 	    3 next_line	fixed bin,
  1    23 	    3 pad(3)	fixed bin,
  1    24 	    3 offset	fixed bin,
  1    25 	    3 line_length	fixed bin,
  1    26 	    3 string	char(132);
  1    27 
  1    28 /* End of include file device_queue.incl.pl1  */
       42 
       43 
       44 /* ------------------------- */
       45 
       46 	call cu_$arg_ptr (1, ap, al, ec);
       47 	if ec ^= 0 then do;
       48 er1:	     call com_err_ (ec, "dump_devq", "");
       49 	     return;
       50 	end;
       51 	if bchr = "-pn" then do;
       52 	     call cu_$arg_ptr (2, ap, al, ec);
       53 	     if ec ^= 0 then go to er1;
       54 	     call expand_path_ (ap, al, addr (dn), addr (en), ec);
       55 	     if ec ^= 0 then do;
       56 er:		call com_err_ (ec, "dump_devq", "^a", bchr);
       57 		return;
       58 	     end;
       59 	end;
       60 	else en = bchr;
       61 	if index (en, ".queue") = 0 then do;
       62 	     i = index (en, " ");
       63 	     substr (en, i) = ".queue";
       64 	end;
       65 
       66 	call hcs_$initiate (dn, en, "", 0, 1, qp, ec);
       67 	if qp = null then do;
       68 	     call com_err_ (ec, "dump_devq", "^a>^a", dn, en);
       69 	     return;
       70 	end;
       71 	call ioa_ ("^/DEVICE QUEUE - ^a", device_queue.device_name);
       72 	call ioa_ ("mc_atep:^9x^p", device_queue.mc_atep);
       73 	call ioa_ ("channel:^9x^w^w",
       74 	     addr (device_queue.channel) -> w1, addr (device_queue.channel) -> w2);
       75 	call ioa_ ("no_of_messages:^2x^d", device_queue.no_of_messages);
       76 	call ioa_ ("top_of_queue:^4x^d", device_queue.top_of_queue);
       77 	call ioa_ ("end_of_queue:^4x^d", device_queue.end_of_queue);
       78 	call ioa_ ("free_top:^8x^d", device_queue.free_top);
       79 	call ioa_ ("next_free:^7x^d", device_queue.next_free);
       80 
       81 	call ioa_ ("^/NUM  NEXT   OFF   LTH SC MESSAGE^/");
       82 	do i = 1 to device_queue.next_free;
       83 	     if device_queue.line (i).not_done then c1 = "+"; else c1 = " ";
       84 	     if device_queue.line (i).alarm then alrm = "*"; else alrm = " ";
       85 	     call ioa_$nnl ("^3d^1a^5d^6d^6d^3d^1a^a", i, c1,
       86 		device_queue.line (i).next_line, device_queue.line (i).offset, device_queue.line (i).line_length,
       87 		device_queue.line (i).source,
       88 		alrm, device_queue.line (i).string);
       89 	end;
       90 	call ioa_ ("");
       91 	call hcs_$terminate_noname (qp, ec);
       92 
       93      end;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    02/06/85  1403.7  dump_devq.pl1                     >spec>on>41-7>dump_devq.pl1
42           1    07/29/76  1747.7  device_queue.incl.pl1             >ldd>include>device_queue.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
addr                                                   builtin function         dcl 29 ref 54 54 54 54 73 73
al                              000170 automatic       fixed bin(17,0)          dcl 13 set ref 46* 51 52* 54* 56 56 60
alarm                    30(01)        based           bit(1)                   array level 3 packed unaligned dcl 1-6 ref 84
alrm                            000163 automatic       char(1)                  dcl 13 set ref 84* 84* 85*
ap                              000166 automatic       pointer                  dcl 13 set ref 46* 51 52* 54* 56 60
bchr                                   based           char                     unaligned dcl 13 set ref 51 56* 60
c1                              000162 automatic       char(1)                  dcl 13 set ref 83* 83* 85*
channel                   2            based           fixed bin(71,0)          level 2 dcl 1-6 set ref 73 73
com_err_                        000020 constant        entry                    external dcl 31 ref 48 56 68
cu_$arg_ptr                     000010 constant        entry                    external dcl 31 ref 46 52
device_name               4            based           char(32)                 level 2 dcl 1-6 set ref 71*
device_queue                           based           structure                level 1 dcl 1-6
dn                              000100 automatic       char(168)                initial dcl 13 set ref 13* 54 54 66* 68*
ec                              000171 automatic       fixed bin(35,0)          dcl 13 set ref 46* 47 48* 52* 53 54* 55 56* 66* 68*
                                                                                  91*
en                              000152 automatic       char(32)                 dcl 13 set ref 54 54 60* 61 62 63* 66* 68*
end_of_queue             16            based           fixed bin(17,0)          level 2 dcl 1-6 set ref 77*
expand_path_                    000012 constant        entry                    external dcl 31 ref 54
free_top                 17            based           fixed bin(17,0)          level 2 dcl 1-6 set ref 78*
hcs_$initiate                   000022 constant        entry                    external dcl 37 ref 66
hcs_$terminate_noname           000024 constant        entry                    external dcl 37 ref 91
i                               000164 automatic       fixed bin(17,0)          dcl 13 set ref 62* 63 82* 83 84 85* 85 85 85 85 85*
index                                                  builtin function         dcl 29 ref 61 62
ioa_                            000014 constant        entry                    external dcl 31 ref 71 72 73 75 76 77 78 79 81 90
ioa_$nnl                        000016 constant        entry                    external dcl 31 ref 85
line                     30            based           structure                array level 2 dcl 1-6
line_length              36            based           fixed bin(17,0)          array level 3 dcl 1-6 set ref 85*
mc_atep                                based           pointer                  level 2 dcl 1-6 set ref 72*
next_free                20            based           fixed bin(17,0)          level 2 dcl 1-6 set ref 79* 82
next_line                31            based           fixed bin(17,0)          array level 3 dcl 1-6 set ref 85*
no_of_messages           14            based           fixed bin(17,0)          level 2 dcl 1-6 set ref 75*
not_done                 30            based           bit(1)                   array level 3 packed unaligned dcl 1-6 ref 83
null                                                   builtin function         dcl 29 ref 67
offset                   35            based           fixed bin(17,0)          array level 3 dcl 1-6 set ref 85*
qp                              000172 automatic       pointer                  dcl 13 set ref 66* 67 71 72 73 73 75 76 77 78 79 82
                                                                                  83 84 85 85 85 85 85 91*
source                   30(18)        based           fixed bin(17,0)          array level 3 packed unaligned dcl 1-6 set ref 85*
string                   37            based           char(132)                array level 3 dcl 1-6 set ref 85*
substr                                                 builtin function         dcl 29 set ref 63*
top_of_queue             15            based           fixed bin(17,0)          level 2 dcl 1-6 set ref 76*
w1                                     based           fixed bin(35,0)          level 2 dcl 25 set ref 73*
w2                        1            based           fixed bin(35,0)          level 2 dcl 25 set ref 73*
xxx                                    based           structure                level 1 dcl 25

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
abs                                                    builtin function         dcl 29
bit                                                    builtin function         dcl 29
char32                                 automatic       char(32)                 dcl 13
divide                                                 builtin function         dcl 29
fixed                                                  builtin function         dcl 29
hcs_$wakeup                     000000 constant        entry                    external dcl 37
j                                      automatic       fixed bin(17,0)          dcl 13
k                                      automatic       fixed bin(17,0)          dcl 13
l                                      automatic       fixed bin(17,0)          dcl 13
length                                                 builtin function         dcl 29
m                                      automatic       fixed bin(17,0)          dcl 13
mod                                                    builtin function         dcl 29
n                                      automatic       fixed bin(17,0)          dcl 13
unspec                                                 builtin function         dcl 29

NAMES DECLARED BY EXPLICIT CONTEXT.
dump_devq                       000132 constant        entry                    external dcl 11
er                              000264 constant        label                    dcl 56
er1                             000162 constant        label                    dcl 48 ref 53

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1176        1224    1075        1206
Length      1422    1075        26         161     100           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
dump_devq                           242 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
dump_devq                000100 dn                          dump_devq
                         000152 en                          dump_devq
                         000162 c1                          dump_devq
                         000163 alrm                        dump_devq
                         000164 i                           dump_devq
                         000166 ap                          dump_devq
                         000170 al                          dump_devq
                         000171 ec                          dump_devq
                         000172 qp                          dump_devq

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return              ext_entry           set_cs_eis          index_cs_eis

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      cu_$arg_ptr                   expand_path_                  hcs_$initiate
hcs_$terminate_noname         ioa_                          ioa_$nnl

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.


CONSTANTS
000000  aa     524000000204

000001  aa     406000000021

000002  aa     524000000001

000003  aa     524000000027

000004  aa     524000000044

000005  aa     524000000016

000006  aa     524000000022

000007  aa     404000000021

000010  aa     524000000024

000011  aa     524000000017

000012  aa     524000000015

000013  aa     524000000023

000014  aa     524000000005

000015  aa     464000000000

000016  aa     404000000002

000017  aa     404000000001

000020  aa     524000000040

000021  aa     524000000250

000022  aa     526000000000

000023  aa     524000000002

000024  aa  055 160 156 000	-pn

000025  aa     524000000000

000026  aa     524000000011

000027  aa     404000000043

000030  aa  136 141 076 136	^a>^
000031  aa  141 000 000 000	a

000032  aa     077777000043
000033  aa     000001000000

000034  aa  056 161 165 145	.que
000035  aa  165 145 000 000	ue

000036  aa  144 165 155 160	dump
000037  aa  137 144 145 166	_dev
000040  aa  161 000 000 000	q

000041  aa  156 145 170 164	next
000042  aa  137 146 162 145	_fre
000043  aa  145 072 136 067	e:^7
000044  aa  170 136 144 000	x^d

000045  aa  146 162 145 145	free
000046  aa  137 164 157 160	_top
000047  aa  072 136 070 170	:^8x
000050  aa  136 144 000 000	^d

000051  aa  143 150 141 156	chan
000052  aa  156 145 154 072	nel:
000053  aa  136 071 170 136	^9x^
000054  aa  167 136 167 000	w^w

000055  aa  155 143 137 141	mc_a
000056  aa  164 145 160 072	tep:
000057  aa  136 071 170 136	^9x^
000060  aa  160 000 000 000	p

000061  aa  076 163 171 163	>sys
000062  aa  164 145 155 137	tem_
000063  aa  143 157 156 164	cont
000064  aa  162 157 154 137	rol_
000065  aa  144 151 162 000	dir

000066  aa  145 156 144 137	end_
000067  aa  157 146 137 161	of_q
000070  aa  165 145 165 145	ueue
000071  aa  072 136 064 170	:^4x
000072  aa  136 144 000 000	^d

000073  aa  164 157 160 137	top_
000074  aa  157 146 137 161	of_q
000075  aa  165 145 165 145	ueue
000076  aa  072 136 064 170	:^4x
000077  aa  136 144 000 000	^d

000100  aa  156 157 137 157	no_o
000101  aa  146 137 155 145	f_me
000102  aa  163 163 141 147	ssag
000103  aa  145 163 072 136	es:^
000104  aa  062 170 136 144	2x^d

000105  aa  136 057 104 105	^/DE
000106  aa  126 111 103 105	VICE
000107  aa  040 121 125 105	 QUE
000110  aa  125 105 040 055	UE -
000111  aa  040 136 141 000	 ^a

000112  aa  136 063 144 136	^3d^
000113  aa  061 141 136 065	1a^5
000114  aa  144 136 066 144	d^6d
000115  aa  136 066 144 136	^6d^
000116  aa  063 144 136 061	3d^1
000117  aa  141 136 141 000	a^a

000120  aa  136 057 116 125	^/NU
000121  aa  115 040 040 116	M  N
000122  aa  105 130 124 040	EXT 
000123  aa  040 040 117 106	  OF
000124  aa  106 040 040 040	F   
000125  aa  114 124 110 040	LTH 
000126  aa  123 103 040 115	SC M
000127  aa  105 123 123 101	ESSA
000130  aa  107 105 136 057	GE^/

BEGIN PROCEDURE dump_devq
ENTRY TO dump_devq                                          STATEMENT 1 ON LINE 11
dump_devq: proc;

000131  da     000074200000
000132  aa   000400 6270 00	eax7 	256
000133  aa  7 00034 3521 20	epp2 	pr7|28,*
000134  aa  2 01045 2721 00	tsp2 	pr2|549		ext_entry
000135  aa     000000000000
000136  aa     000000000000
						STATEMENT 1 ON LINE 13
000137  aa  040 100 100 404	mlr  	(ic),(pr),fill(040)
000140  aa   777722 00 0023	desc9a	-46,19		000061 = 076163171163
000141  aa  6 00100 00 0250	desc9a	pr6|64,168	dn
						STATEMENT 1 ON LINE 46
	call cu_$arg_ptr (1, ap, al, ec);

000142  aa   000001 2360 07	ldq  	1,dl
000143  aa  6 00175 7561 00	stq  	pr6|125
000144  aa  6 00175 3521 00	epp2 	pr6|125
000145  aa  6 00200 2521 00	spri2	pr6|128
000146  aa  6 00166 3521 00	epp2 	pr6|118		ap
000147  aa  6 00202 2521 00	spri2	pr6|130
000150  aa  6 00170 3521 00	epp2 	pr6|120		al
000151  aa  6 00204 2521 00	spri2	pr6|132
000152  aa  6 00171 3521 00	epp2 	pr6|121		ec
000153  aa  6 00206 2521 00	spri2	pr6|134
000154  aa  6 00176 6211 00	eax1 	pr6|126
000155  aa   020000 4310 07	fld  	8192,dl
000156  la  4 00010 3521 20	epp2 	pr4|8,*		cu_$arg_ptr
000157  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 47
	if ec ^= 0 then do;

000160  aa  6 00171 2361 00	ldq  	pr6|121		ec
000161  aa   000027 6000 04	tze  	23,ic		000210
						STATEMENT 1 ON LINE 48
er1:	     call com_err_ (ec, "dump_devq", "");

000162  aa   777654 2370 04	ldaq 	-84,ic		000036 = 144165155160 137144145166
000163  aa  6 00176 7571 00	staq 	pr6|126
000164  aa   161000 2350 03	lda  	57856,du
000165  aa  6 00200 7551 00	sta  	pr6|128
000166  aa  6 00171 3521 00	epp2 	pr6|121		ec
000167  aa  6 00212 2521 00	spri2	pr6|138
000170  aa  6 00176 3521 00	epp2 	pr6|126
000171  aa  6 00214 2521 00	spri2	pr6|140
000172  aa  6 00175 3521 00	epp2 	pr6|125
000173  aa  6 00216 2521 00	spri2	pr6|142
000174  aa   777633 3520 04	epp2 	-101,ic		000027 = 404000000043
000175  aa  6 00220 2521 00	spri2	pr6|144
000176  aa   777630 3520 04	epp2 	-104,ic		000026 = 524000000011
000177  aa  6 00222 2521 00	spri2	pr6|146
000200  aa   777625 3520 04	epp2 	-107,ic		000025 = 524000000000
000201  aa  6 00224 2521 00	spri2	pr6|148
000202  aa  6 00210 6211 00	eax1 	pr6|136
000203  aa   014000 4310 07	fld  	6144,dl
000204  aa  6 00044 3701 20	epp4 	pr6|36,*
000205  la  4 00020 3521 20	epp2 	pr4|16,*		com_err_
000206  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 49
	     return;

000207  aa  0 00631 7101 00	tra  	pr0|409		return
						STATEMENT 1 ON LINE 50
	end;

						STATEMENT 1 ON LINE 51
	if bchr = "-pn" then do;

000210  aa  6 00166 3735 20	epp7 	pr6|118,*		ap
000211  aa  6 00170 7271 00	lxl7 	pr6|120		al
000212  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
000213  aa  7 00000 00 0017	desc9a	pr7|0,x7		bchr
000214  aa   777612 00 0003	desc9a	-118,3		000024 = 055160156000
000215  aa   000107 6010 04	tnz  	71,ic		000324
						STATEMENT 1 ON LINE 52
	     call cu_$arg_ptr (2, ap, al, ec);

000216  aa   000002 2360 07	ldq  	2,dl
000217  aa  6 00175 7561 00	stq  	pr6|125
000220  aa  6 00175 3521 00	epp2 	pr6|125
000221  aa  6 00200 2521 00	spri2	pr6|128
000222  aa  6 00166 3521 00	epp2 	pr6|118		ap
000223  aa  6 00202 2521 00	spri2	pr6|130
000224  aa  6 00170 3521 00	epp2 	pr6|120		al
000225  aa  6 00204 2521 00	spri2	pr6|132
000226  aa  6 00171 3521 00	epp2 	pr6|121		ec
000227  aa  6 00206 2521 00	spri2	pr6|134
000230  aa  6 00176 6211 00	eax1 	pr6|126
000231  aa   020000 4310 07	fld  	8192,dl
000232  aa  6 00044 3701 20	epp4 	pr6|36,*
000233  la  4 00010 3521 20	epp2 	pr4|8,*		cu_$arg_ptr
000234  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 53
	     if ec ^= 0 then go to er1;

000235  aa  6 00171 2361 00	ldq  	pr6|121		ec
000236  aa   777724 6010 04	tnz  	-44,ic		000162
						STATEMENT 1 ON LINE 54
	     call expand_path_ (ap, al, addr (dn), addr (en), ec);

000237  aa  6 00100 3735 00	epp7 	pr6|64		dn
000240  aa  6 00226 6535 00	spri7	pr6|150
000241  aa  6 00152 3715 00	epp5 	pr6|106		en
000242  aa  6 00230 6515 00	spri5	pr6|152
000243  aa  6 00166 3521 00	epp2 	pr6|118		ap
000244  aa  6 00212 2521 00	spri2	pr6|138
000245  aa  6 00170 3521 00	epp2 	pr6|120		al
000246  aa  6 00214 2521 00	spri2	pr6|140
000247  aa  6 00226 3521 00	epp2 	pr6|150
000250  aa  6 00216 2521 00	spri2	pr6|142
000251  aa  6 00230 3521 00	epp2 	pr6|152
000252  aa  6 00220 2521 00	spri2	pr6|144
000253  aa  6 00171 3521 00	epp2 	pr6|121		ec
000254  aa  6 00222 2521 00	spri2	pr6|146
000255  aa  6 00210 6211 00	eax1 	pr6|136
000256  aa   024000 4310 07	fld  	10240,dl
000257  aa  6 00044 3701 20	epp4 	pr6|36,*
000260  la  4 00012 3521 20	epp2 	pr4|10,*		expand_path_
000261  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 55
	     if ec ^= 0 then do;

000262  aa  6 00171 2361 00	ldq  	pr6|121		ec
000263  aa   000044 6000 04	tze  	36,ic		000327
						STATEMENT 1 ON LINE 56
er:		call com_err_ (ec, "dump_devq", "^a", bchr);

000264  aa  6 00170 2361 00	ldq  	pr6|120		al
000265  aa   526000 2760 03	orq  	175104,du
000266  aa  6 00175 7561 00	stq  	pr6|125
000267  aa   777547 2370 04	ldaq 	-153,ic		000036 = 144165155160 137144145166
000270  aa  6 00176 7571 00	staq 	pr6|126
000271  aa   161000 2350 03	lda  	57856,du
000272  aa  6 00200 7551 00	sta  	pr6|128
000273  aa   136141 2350 03	lda  	48225,du
000274  aa  6 00232 7551 00	sta  	pr6|154
000275  aa  6 00171 3521 00	epp2 	pr6|121		ec
000276  aa  6 00236 2521 00	spri2	pr6|158
000277  aa  6 00176 3521 00	epp2 	pr6|126
000300  aa  6 00240 2521 00	spri2	pr6|160
000301  aa  6 00232 3521 00	epp2 	pr6|154
000302  aa  6 00242 2521 00	spri2	pr6|162
000303  aa  6 00166 3521 20	epp2 	pr6|118,*		bchr
000304  aa  6 00244 2521 00	spri2	pr6|164
000305  aa   777522 3520 04	epp2 	-174,ic		000027 = 404000000043
000306  aa  6 00246 2521 00	spri2	pr6|166
000307  aa   777517 3520 04	epp2 	-177,ic		000026 = 524000000011
000310  aa  6 00250 2521 00	spri2	pr6|168
000311  aa   777512 3520 04	epp2 	-182,ic		000023 = 524000000002
000312  aa  6 00252 2521 00	spri2	pr6|170
000313  aa  6 00175 3521 00	epp2 	pr6|125
000314  aa  6 00254 2521 00	spri2	pr6|172
000315  aa  6 00234 6211 00	eax1 	pr6|156
000316  aa   020000 4310 07	fld  	8192,dl
000317  aa  6 00044 3701 20	epp4 	pr6|36,*
000320  la  4 00020 3521 20	epp2 	pr4|16,*		com_err_
000321  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 57
		return;

000322  aa  0 00631 7101 00	tra  	pr0|409		return
						STATEMENT 1 ON LINE 58
	     end;

						STATEMENT 1 ON LINE 59
	end;

000323  aa   000004 7100 04	tra  	4,ic		000327
						STATEMENT 1 ON LINE 60
	else en = bchr;

000324  aa  040 100 100 540	mlr  	(pr,rl),(pr),fill(040)
000325  aa  7 00000 00 0017	desc9a	pr7|0,x7		bchr
000326  aa  6 00152 00 0040	desc9a	pr6|106,32	en
						STATEMENT 1 ON LINE 61
	if index (en, ".queue") = 0 then do;

000327  aa   000040 2360 07	ldq  	32,dl
000330  aa  6 00152 3521 00	epp2 	pr6|106		en
000331  aa  0 01227 7001 00	tsx0 	pr0|663		set_cs_eis
000332  aa   000006 2360 07	ldq  	6,dl
000333  aa   777501 3520 04	epp2 	-191,ic		000034 = 056161165145
000334  aa  0 01231 7001 00	tsx0 	pr0|665		index_cs_eis
000335  aa   000022 6010 04	tnz  	18,ic		000357
						STATEMENT 1 ON LINE 62
	     i = index (en, " ");

000336  aa  000 003 124 500	scm  	(pr),(du),mask(000)
000337  aa  6 00152 00 0040	desc9a	pr6|106,32	en
000340  aa   040000 00 0001	desc9a	16384,1
000341  aa  6 00056 0001 00	arg  	pr6|46
000342  aa  6 00056 2361 00	ldq  	pr6|46
000343  aa   000002 6070 04	ttf  	2,ic		000345
000344  aa   000001 3360 07	lcq  	1,dl
000345  aa   000001 0760 07	adq  	1,dl
000346  aa  6 00164 7561 00	stq  	pr6|116		i
						STATEMENT 1 ON LINE 63
	     substr (en, i) = ".queue";

000347  aa   000001 1760 07	sbq  	1,dl
000350  aa  6 00175 7561 00	stq  	pr6|125
000351  aa   000040 2360 07	ldq  	32,dl
000352  aa  6 00175 1761 00	sbq  	pr6|125
000353  aa  6 00164 7271 00	lxl7 	pr6|116		i
000354  aa  040 157 100 500	mlr  	(pr),(pr,rl,x7),fill(040)
000355  aa  2 00000 00 0006	desc9a	pr2|0,6
000356  aa  6 00151 60 0006	desc9a	pr6|105(3),ql	en
						STATEMENT 1 ON LINE 64
	end;

						STATEMENT 1 ON LINE 66
	call hcs_$initiate (dn, en, "", 0, 1, qp, ec);

000357  aa  6 00232 4501 00	stz  	pr6|154
000360  aa   000001 2360 07	ldq  	1,dl
000361  aa  6 00233 7561 00	stq  	pr6|155
000362  aa  6 00100 3521 00	epp2 	pr6|64		dn
000363  aa  6 00260 2521 00	spri2	pr6|176
000364  aa  6 00152 3521 00	epp2 	pr6|106		en
000365  aa  6 00262 2521 00	spri2	pr6|178
000366  aa  6 00175 3521 00	epp2 	pr6|125
000367  aa  6 00264 2521 00	spri2	pr6|180
000370  aa  6 00232 3521 00	epp2 	pr6|154
000371  aa  6 00266 2521 00	spri2	pr6|182
000372  aa  6 00233 3521 00	epp2 	pr6|155
000373  aa  6 00270 2521 00	spri2	pr6|184
000374  aa  6 00172 3521 00	epp2 	pr6|122		qp
000375  aa  6 00272 2521 00	spri2	pr6|186
000376  aa  6 00171 3521 00	epp2 	pr6|121		ec
000377  aa  6 00274 2521 00	spri2	pr6|188
000400  aa   777421 3520 04	epp2 	-239,ic		000021 = 524000000250
000401  aa  6 00276 2521 00	spri2	pr6|190
000402  aa   777416 3520 04	epp2 	-242,ic		000020 = 524000000040
000403  aa  6 00300 2521 00	spri2	pr6|192
000404  aa   777421 3520 04	epp2 	-239,ic		000025 = 524000000000
000405  aa  6 00302 2521 00	spri2	pr6|194
000406  aa   777411 3520 04	epp2 	-247,ic		000017 = 404000000001
000407  aa  6 00304 2521 00	spri2	pr6|196
000410  aa   777406 3520 04	epp2 	-250,ic		000016 = 404000000002
000411  aa  6 00306 2521 00	spri2	pr6|198
000412  aa   777403 3520 04	epp2 	-253,ic		000015 = 464000000000
000413  aa  6 00310 2521 00	spri2	pr6|200
000414  aa   777413 3520 04	epp2 	-245,ic		000027 = 404000000043
000415  aa  6 00312 2521 00	spri2	pr6|202
000416  aa  6 00256 6211 00	eax1 	pr6|174
000417  aa   034000 4310 07	fld  	14336,dl
000420  aa  6 00044 3701 20	epp4 	pr6|36,*
000421  la  4 00022 3521 20	epp2 	pr4|18,*		hcs_$initiate
000422  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 67
	if qp = null then do;

000423  aa  6 00172 2371 00	ldaq 	pr6|122		qp
000424  aa   777406 6770 04	eraq 	-250,ic		000032 = 077777000043 000001000000
000425  aa  0 00460 3771 00	anaq 	pr0|304		= 077777000077 777777077077
000426  aa   000041 6010 04	tnz  	33,ic		000467
						STATEMENT 1 ON LINE 68
	     call com_err_ (ec, "dump_devq", "^a>^a", dn, en);

000427  aa   777407 2370 04	ldaq 	-249,ic		000036 = 144165155160 137144145166
000430  aa  6 00176 7571 00	staq 	pr6|126
000431  aa   161000 2350 03	lda  	57856,du
000432  aa  6 00200 7551 00	sta  	pr6|128
000433  aa   777375 2370 04	ldaq 	-259,ic		000030 = 136141076136 141000000000
000434  aa  6 00230 7571 00	staq 	pr6|152
000435  aa  6 00171 3521 00	epp2 	pr6|121		ec
000436  aa  6 00260 2521 00	spri2	pr6|176
000437  aa  6 00176 3521 00	epp2 	pr6|126
000440  aa  6 00262 2521 00	spri2	pr6|178
000441  aa  6 00230 3521 00	epp2 	pr6|152
000442  aa  6 00264 2521 00	spri2	pr6|180
000443  aa  6 00100 3521 00	epp2 	pr6|64		dn
000444  aa  6 00266 2521 00	spri2	pr6|182
000445  aa  6 00152 3521 00	epp2 	pr6|106		en
000446  aa  6 00270 2521 00	spri2	pr6|184
000447  aa   777360 3520 04	epp2 	-272,ic		000027 = 404000000043
000450  aa  6 00272 2521 00	spri2	pr6|186
000451  aa   777355 3520 04	epp2 	-275,ic		000026 = 524000000011
000452  aa  6 00274 2521 00	spri2	pr6|188
000453  aa   777341 3520 04	epp2 	-287,ic		000014 = 524000000005
000454  aa  6 00276 2521 00	spri2	pr6|190
000455  aa   777344 3520 04	epp2 	-284,ic		000021 = 524000000250
000456  aa  6 00300 2521 00	spri2	pr6|192
000457  aa   777341 3520 04	epp2 	-287,ic		000020 = 524000000040
000460  aa  6 00302 2521 00	spri2	pr6|194
000461  aa  6 00256 6211 00	eax1 	pr6|174
000462  aa   024000 4310 07	fld  	10240,dl
000463  aa  6 00044 3701 20	epp4 	pr6|36,*
000464  la  4 00020 3521 20	epp2 	pr4|16,*		com_err_
000465  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 69
	     return;

000466  aa  0 00631 7101 00	tra  	pr0|409		return
						STATEMENT 1 ON LINE 70
	end;

						STATEMENT 1 ON LINE 71
	call ioa_ ("^/DEVICE QUEUE - ^a", device_queue.device_name);

000467  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
000470  aa   777416 00 0024	desc9a	-242,20		000105 = 136057104105
000471  aa  6 00176 00 0024	desc9a	pr6|126,20
000472  aa  6 00176 3521 00	epp2 	pr6|126
000473  aa  6 00212 2521 00	spri2	pr6|138
000474  aa  6 00172 3735 20	epp7 	pr6|122,*		qp
000475  aa  7 00004 3521 00	epp2 	pr7|4		device_queue.device_name
000476  aa  6 00214 2521 00	spri2	pr6|140
000477  aa   777314 3520 04	epp2 	-308,ic		000013 = 524000000023
000500  aa  6 00216 2521 00	spri2	pr6|142
000501  aa   777317 3520 04	epp2 	-305,ic		000020 = 524000000040
000502  aa  6 00220 2521 00	spri2	pr6|144
000503  aa  6 00210 6211 00	eax1 	pr6|136
000504  aa   010000 4310 07	fld  	4096,dl
000505  aa  6 00044 3701 20	epp4 	pr6|36,*
000506  la  4 00014 3521 20	epp2 	pr4|12,*		ioa_
000507  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 72
	call ioa_ ("mc_atep:^9x^p", device_queue.mc_atep);

000510  aa   777345 2350 04	lda  	-283,ic		000055 = 155143137141
000511  aa   777345 2360 04	ldq  	-283,ic		000056 = 164145160072
000512  aa  6 00176 7571 00	staq 	pr6|126
000513  aa   777344 2350 04	lda  	-284,ic		000057 = 136071170136
000514  aa   160000 2360 03	ldq  	57344,du
000515  aa  6 00200 7571 00	staq 	pr6|128
000516  aa  6 00176 3521 00	epp2 	pr6|126
000517  aa  6 00212 2521 00	spri2	pr6|138
000520  aa  6 00172 3521 20	epp2 	pr6|122,*		device_queue.mc_atep
000521  aa  6 00214 2521 00	spri2	pr6|140
000522  aa   777270 3520 04	epp2 	-328,ic		000012 = 524000000015
000523  aa  6 00216 2521 00	spri2	pr6|142
000524  aa   777271 3520 04	epp2 	-327,ic		000015 = 464000000000
000525  aa  6 00220 2521 00	spri2	pr6|144
000526  aa  6 00210 6211 00	eax1 	pr6|136
000527  aa   010000 4310 07	fld  	4096,dl
000530  aa  6 00044 3701 20	epp4 	pr6|36,*
000531  la  4 00014 3521 20	epp2 	pr4|12,*		ioa_
000532  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 73
	call ioa_ ("channel:^9x^w^w",
	     addr (device_queue.channel) -> w1, addr (device_queue.channel) -> w2);

000533  aa   777316 2350 04	lda  	-306,ic		000051 = 143150141156
000534  aa   777316 2360 04	ldq  	-306,ic		000052 = 156145154072
000535  aa  6 00176 7571 00	staq 	pr6|126
000536  aa   777315 2350 04	lda  	-307,ic		000053 = 136071170136
000537  aa   777315 2360 04	ldq  	-307,ic		000054 = 167136167000
000540  aa  6 00200 7571 00	staq 	pr6|128
000541  aa  6 00176 3521 00	epp2 	pr6|126
000542  aa  6 00212 2521 00	spri2	pr6|138
000543  aa  6 00172 3735 20	epp7 	pr6|122,*		qp
000544  aa  7 00002 3521 00	epp2 	pr7|2		xxx.w1
000545  aa  6 00214 2521 00	spri2	pr6|140
000546  aa  7 00003 3521 00	epp2 	pr7|3		xxx.w2
000547  aa  6 00216 2521 00	spri2	pr6|142
000550  aa   777241 3520 04	epp2 	-351,ic		000011 = 524000000017
000551  aa  6 00220 2521 00	spri2	pr6|144
000552  aa   777255 3520 04	epp2 	-339,ic		000027 = 404000000043
000553  aa  6 00222 2521 00	spri2	pr6|146
000554  aa  6 00224 2521 00	spri2	pr6|148
000555  aa  6 00210 6211 00	eax1 	pr6|136
000556  aa   014000 4310 07	fld  	6144,dl
000557  aa  6 00044 3701 20	epp4 	pr6|36,*
000560  la  4 00014 3521 20	epp2 	pr4|12,*		ioa_
000561  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 75
	call ioa_ ("no_of_messages:^2x^d", device_queue.no_of_messages);

000562  aa   777316 2370 04	ldaq 	-306,ic		000100 = 156157137157 146137155145
000563  aa  6 00176 7571 00	staq 	pr6|126
000564  aa   777316 2370 04	ldaq 	-306,ic		000102 = 163163141147 145163072136
000565  aa  6 00200 7571 00	staq 	pr6|128
000566  aa   777316 2350 04	lda  	-306,ic		000104 = 062170136144
000567  aa  6 00202 7551 00	sta  	pr6|130
000570  aa  6 00176 3521 00	epp2 	pr6|126
000571  aa  6 00212 2521 00	spri2	pr6|138
000572  aa  6 00172 3735 20	epp7 	pr6|122,*		qp
000573  aa  7 00014 3521 00	epp2 	pr7|12		device_queue.no_of_messages
000574  aa  6 00214 2521 00	spri2	pr6|140
000575  aa   777213 3520 04	epp2 	-373,ic		000010 = 524000000024
000576  aa  6 00216 2521 00	spri2	pr6|142
000577  aa   777210 3520 04	epp2 	-376,ic		000007 = 404000000021
000600  aa  6 00220 2521 00	spri2	pr6|144
000601  aa  6 00210 6211 00	eax1 	pr6|136
000602  aa   010000 4310 07	fld  	4096,dl
000603  aa  6 00044 3701 20	epp4 	pr6|36,*
000604  la  4 00014 3521 20	epp2 	pr4|12,*		ioa_
000605  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 76
	call ioa_ ("top_of_queue:^4x^d", device_queue.top_of_queue);

000606  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
000607  aa   777265 00 0024	desc9a	-331,20		000073 = 164157160137
000610  aa  6 00176 00 0024	desc9a	pr6|126,20
000611  aa  6 00176 3521 00	epp2 	pr6|126
000612  aa  6 00212 2521 00	spri2	pr6|138
000613  aa  6 00172 3735 20	epp7 	pr6|122,*		qp
000614  aa  7 00015 3521 00	epp2 	pr7|13		device_queue.top_of_queue
000615  aa  6 00214 2521 00	spri2	pr6|140
000616  aa   777170 3520 04	epp2 	-392,ic		000006 = 524000000022
000617  aa  6 00216 2521 00	spri2	pr6|142
000620  aa   777167 3520 04	epp2 	-393,ic		000007 = 404000000021
000621  aa  6 00220 2521 00	spri2	pr6|144
000622  aa  6 00210 6211 00	eax1 	pr6|136
000623  aa   010000 4310 07	fld  	4096,dl
000624  aa  6 00044 3701 20	epp4 	pr6|36,*
000625  la  4 00014 3521 20	epp2 	pr4|12,*		ioa_
000626  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 77
	call ioa_ ("end_of_queue:^4x^d", device_queue.end_of_queue);

000627  aa   777237 2370 04	ldaq 	-353,ic		000066 = 145156144137 157146137161
000630  aa  6 00176 7571 00	staq 	pr6|126
000631  aa   777237 2370 04	ldaq 	-353,ic		000070 = 165145165145 072136064170
000632  aa  6 00200 7571 00	staq 	pr6|128
000633  aa   136144 2350 03	lda  	48228,du
000634  aa  6 00202 7551 00	sta  	pr6|130
000635  aa  6 00176 3521 00	epp2 	pr6|126
000636  aa  6 00212 2521 00	spri2	pr6|138
000637  aa  6 00172 3735 20	epp7 	pr6|122,*		qp
000640  aa  7 00016 3521 00	epp2 	pr7|14		device_queue.end_of_queue
000641  aa  6 00214 2521 00	spri2	pr6|140
000642  aa   777144 3520 04	epp2 	-412,ic		000006 = 524000000022
000643  aa  6 00216 2521 00	spri2	pr6|142
000644  aa   777143 3520 04	epp2 	-413,ic		000007 = 404000000021
000645  aa  6 00220 2521 00	spri2	pr6|144
000646  aa  6 00210 6211 00	eax1 	pr6|136
000647  aa   010000 4310 07	fld  	4096,dl
000650  aa  6 00044 3701 20	epp4 	pr6|36,*
000651  la  4 00014 3521 20	epp2 	pr4|12,*		ioa_
000652  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 78
	call ioa_ ("free_top:^8x^d", device_queue.free_top);

000653  aa   777172 2350 04	lda  	-390,ic		000045 = 146162145145
000654  aa   777172 2360 04	ldq  	-390,ic		000046 = 137164157160
000655  aa  6 00176 7571 00	staq 	pr6|126
000656  aa   777171 2350 04	lda  	-391,ic		000047 = 072136070170
000657  aa   136144 2360 03	ldq  	48228,du
000660  aa  6 00200 7571 00	staq 	pr6|128
000661  aa  6 00176 3521 00	epp2 	pr6|126
000662  aa  6 00212 2521 00	spri2	pr6|138
000663  aa  6 00172 3735 20	epp7 	pr6|122,*		qp
000664  aa  7 00017 3521 00	epp2 	pr7|15		device_queue.free_top
000665  aa  6 00214 2521 00	spri2	pr6|140
000666  aa   777117 3520 04	epp2 	-433,ic		000005 = 524000000016
000667  aa  6 00216 2521 00	spri2	pr6|142
000670  aa   777117 3520 04	epp2 	-433,ic		000007 = 404000000021
000671  aa  6 00220 2521 00	spri2	pr6|144
000672  aa  6 00210 6211 00	eax1 	pr6|136
000673  aa   010000 4310 07	fld  	4096,dl
000674  aa  6 00044 3701 20	epp4 	pr6|36,*
000675  la  4 00014 3521 20	epp2 	pr4|12,*		ioa_
000676  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 79
	call ioa_ ("next_free:^7x^d", device_queue.next_free);

000677  aa   777142 2350 04	lda  	-414,ic		000041 = 156145170164
000700  aa   777142 2360 04	ldq  	-414,ic		000042 = 137146162145
000701  aa  6 00176 7571 00	staq 	pr6|126
000702  aa   777141 2350 04	lda  	-415,ic		000043 = 145072136067
000703  aa   777141 2360 04	ldq  	-415,ic		000044 = 170136144000
000704  aa  6 00200 7571 00	staq 	pr6|128
000705  aa  6 00176 3521 00	epp2 	pr6|126
000706  aa  6 00212 2521 00	spri2	pr6|138
000707  aa  6 00172 3735 20	epp7 	pr6|122,*		qp
000710  aa  7 00020 3521 00	epp2 	pr7|16		device_queue.next_free
000711  aa  6 00214 2521 00	spri2	pr6|140
000712  aa   777077 3520 04	epp2 	-449,ic		000011 = 524000000017
000713  aa  6 00216 2521 00	spri2	pr6|142
000714  aa   777073 3520 04	epp2 	-453,ic		000007 = 404000000021
000715  aa  6 00220 2521 00	spri2	pr6|144
000716  aa  6 00210 6211 00	eax1 	pr6|136
000717  aa   010000 4310 07	fld  	4096,dl
000720  aa  6 00044 3701 20	epp4 	pr6|36,*
000721  la  4 00014 3521 20	epp2 	pr4|12,*		ioa_
000722  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 81
	call ioa_ ("^/NUM  NEXT   OFF   LTH SC MESSAGE^/");

000723  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
000724  aa   777175 00 0044	desc9a	-387,36		000120 = 136057116125
000725  aa  6 00176 00 0044	desc9a	pr6|126,36
000726  aa  6 00176 3521 00	epp2 	pr6|126
000727  aa  6 00212 2521 00	spri2	pr6|138
000730  aa   777054 3520 04	epp2 	-468,ic		000004 = 524000000044
000731  aa  6 00214 2521 00	spri2	pr6|140
000732  aa  6 00210 6211 00	eax1 	pr6|136
000733  aa   004000 4310 07	fld  	2048,dl
000734  aa  6 00044 3701 20	epp4 	pr6|36,*
000735  la  4 00014 3521 20	epp2 	pr4|12,*		ioa_
000736  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 82
	do i = 1 to device_queue.next_free;

000737  aa  6 00172 3735 20	epp7 	pr6|122,*		qp
000740  aa  7 00020 2361 00	ldq  	pr7|16		device_queue.next_free
000741  aa  6 00174 7561 00	stq  	pr6|124
000742  aa   000001 2360 07	ldq  	1,dl
000743  aa  6 00164 7561 00	stq  	pr6|116		i
000744  aa  6 00164 2361 00	ldq  	pr6|116		i
000745  aa  6 00174 1161 00	cmpq 	pr6|124
000746  aa   000104 6054 04	tpnz 	68,ic		001052
						STATEMENT 1 ON LINE 83
	     if device_queue.line (i).not_done then c1 = "+";

000747  aa   000050 4020 07	mpy  	40,dl
000750  aa  6 00172 3735 20	epp7 	pr6|122,*		qp
000751  aa  7 77760 2351 06	lda  	pr7|-16,ql	device_queue.not_done
000752  aa   400000 3150 03	cana 	131072,du
000753  aa  6 00233 7561 00	stq  	pr6|155
000754  aa   000004 6000 04	tze  	4,ic		000760
000755  aa   053000 2350 03	lda  	22016,du
000756  aa  6 00162 7551 00	sta  	pr6|114		c1
000757  aa   000003 7100 04	tra  	3,ic		000762
						STATEMENT 2 ON LINE 83
 else c1 = " ";

000760  aa   040000 2350 03	lda  	16384,du
000761  aa  6 00162 7551 00	sta  	pr6|114		c1
						STATEMENT 1 ON LINE 84
	     if device_queue.line (i).alarm then alrm = "*";

000762  aa  7 77760 2351 06	lda  	pr7|-16,ql	device_queue.alarm
000763  aa   200000 3150 03	cana 	65536,du
000764  aa   000004 6000 04	tze  	4,ic		000770
000765  aa   052000 2350 03	lda  	21504,du
000766  aa  6 00163 7551 00	sta  	pr6|115		alrm
000767  aa   000003 7100 04	tra  	3,ic		000772
						STATEMENT 2 ON LINE 84
 else alrm = " ";

000770  aa   040000 2350 03	lda  	16384,du
000771  aa  6 00163 7551 00	sta  	pr6|115		alrm
						STATEMENT 1 ON LINE 85
	     call ioa_$nnl ("^3d^1a^5d^6d^6d^3d^1a^a", i, c1,
		device_queue.line (i).next_line, device_queue.line (i).offset, device_queue.line (i).line_length,
		device_queue.line (i).source,
		alrm, device_queue.line (i).string);

000772  aa   777120 2370 04	ldaq 	-432,ic		000112 = 136063144136 061141136065
000773  aa  6 00176 7571 00	staq 	pr6|126
000774  aa   777120 2370 04	ldaq 	-432,ic		000114 = 144136066144 136066144136
000775  aa  6 00200 7571 00	staq 	pr6|128
000776  aa   777120 2370 04	ldaq 	-432,ic		000116 = 063144136061 141136141000
000777  aa  6 00202 7571 00	staq 	pr6|130
001000  aa  6 00176 3521 00	epp2 	pr6|126
001001  aa  6 00316 2521 00	spri2	pr6|206
001002  aa  6 00164 3521 00	epp2 	pr6|116		i
001003  aa  6 00320 2521 00	spri2	pr6|208
001004  aa  6 00162 3521 00	epp2 	pr6|114		c1
001005  aa  6 00322 2521 00	spri2	pr6|210
001006  aa  6 00233 7271 00	lxl7 	pr6|155
001007  aa  7 77761 3521 17	epp2 	pr7|-15,7		device_queue.next_line
001010  aa  6 00324 2521 00	spri2	pr6|212
001011  aa  7 77765 3521 17	epp2 	pr7|-11,7		device_queue.offset
001012  aa  6 00326 2521 00	spri2	pr6|214
001013  aa  7 77766 3521 17	epp2 	pr7|-10,7		device_queue.line_length
001014  aa  6 00330 2521 00	spri2	pr6|216
001015  aa  7 77760 3521 17	epp2 	pr7|-16,7		device_queue.source
001016  aa   000022 7260 07	lxl6 	18,dl
001017  aa  2 00000 5035 16	abd  	pr2|0,6
001020  aa  6 00332 2521 00	spri2	pr6|218
001021  aa  6 00163 3521 00	epp2 	pr6|115		alrm
001022  aa  6 00334 2521 00	spri2	pr6|220
001023  aa  7 77767 3521 17	epp2 	pr7|-9,7		device_queue.string
001024  aa  6 00336 2521 00	spri2	pr6|222
001025  aa   776756 3520 04	epp2 	-530,ic		000003 = 524000000027
001026  aa  6 00340 2521 00	spri2	pr6|224
001027  aa   776760 3520 04	epp2 	-528,ic		000007 = 404000000021
001030  aa  6 00342 2521 00	spri2	pr6|226
001031  aa  6 00346 2521 00	spri2	pr6|230
001032  aa  6 00350 2521 00	spri2	pr6|232
001033  aa  6 00352 2521 00	spri2	pr6|234
001034  aa   776746 3520 04	epp2 	-538,ic		000002 = 524000000001
001035  aa  6 00344 2521 00	spri2	pr6|228
001036  aa  6 00356 2521 00	spri2	pr6|238
001037  aa   776742 3520 04	epp2 	-542,ic		000001 = 406000000021
001040  aa  6 00354 2521 00	spri2	pr6|236
001041  aa   776737 3520 04	epp2 	-545,ic		000000 = 524000000204
001042  aa  6 00360 2521 00	spri2	pr6|240
001043  aa  6 00314 6211 00	eax1 	pr6|204
001044  aa   044000 4310 07	fld  	18432,dl
001045  aa  6 00044 3701 20	epp4 	pr6|36,*
001046  la  4 00016 3521 20	epp2 	pr4|14,*		ioa_$nnl
001047  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 89
	end;

001050  aa  6 00164 0541 00	aos  	pr6|116		i
001051  aa   777673 7100 04	tra  	-69,ic		000744
						STATEMENT 1 ON LINE 90
	call ioa_ ("");

001052  aa  6 00233 3521 00	epp2 	pr6|155
001053  aa  6 00200 2521 00	spri2	pr6|128
001054  aa   776751 3520 04	epp2 	-535,ic		000025 = 524000000000
001055  aa  6 00202 2521 00	spri2	pr6|130
001056  aa  6 00176 6211 00	eax1 	pr6|126
001057  aa   004000 4310 07	fld  	2048,dl
001060  aa  6 00044 3701 20	epp4 	pr6|36,*
001061  la  4 00014 3521 20	epp2 	pr4|12,*		ioa_
001062  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 91
	call hcs_$terminate_noname (qp, ec);

001063  aa  6 00172 3521 00	epp2 	pr6|122		qp
001064  aa  6 00200 2521 00	spri2	pr6|128
001065  aa  6 00171 3521 00	epp2 	pr6|121		ec
001066  aa  6 00202 2521 00	spri2	pr6|130
001067  aa  6 00176 6211 00	eax1 	pr6|126
001070  aa   010000 4310 07	fld  	4096,dl
001071  aa  6 00044 3701 20	epp4 	pr6|36,*
001072  la  4 00024 3521 20	epp2 	pr4|20,*		hcs_$terminate_noname
001073  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 93
     end;

001074  aa  0 00631 7101 00	tra  	pr0|409		return
  END PROCEDURE dump_devq


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
