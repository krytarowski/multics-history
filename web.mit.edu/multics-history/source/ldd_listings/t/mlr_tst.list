ASSEMBLY LISTING OF SEGMENT >spec>on>6978-10/22/84>mlr_tst.alm                     
ASSEMBLED ON:	10/22/84  1114.4 mst Mon
OPTIONS USED:	list 
ASSEMBLED BY:	ALM Version  6.6  November 1982 
ASSEMBLER CREATED:	09/21/83  1227.3 mst Wed

                                     1  "  ******************************************************
                                     2  "  *                                                    *
                                     3  "  *                                                    *
                                     4  "  * Copyright (c) 1972 by Massachusetts Institute of   *
                                     5  "  * Technology and Honeywell Information Systems, Inc. *
                                     6  "  *                                                    *
                                     7  "  *                                                    *
                                     8  "  ******************************************************
                                     9  
                                    10  "  ******************************************************
                                    11  "  *                                                    *
                                    12  "  *                                                    *
                                    13  "  *    Copyright, (C) Honeywell Information Systems    *
                                    14  "  *    Inc., 1980.                                     *
                                    15  "  *                                                    *
                                    16  "  *                                                    *
                                    17  "  ******************************************************
                                    18  
                                    19  "
                                    20  "	Test to find mlr failure when doing move across 4K boundary
                                    21  "	which causes out-of-bounds fault and subsequent seg-fault
                                    22  "
                                    23  "	To run this test, you must create fresh each time a segment
                                    24  "	called testcpu_tempseg_1 and you must terminate mlr_tst. Then run the test.
                                    25  "	Afterwards, type:
                                    26  "
                                    27  "	abc testcpu_tempseg_1
                                    28  "	iomode edited
                                    29  "	print testcpu_tempseg_1
                                    30  "
                                    31  "	The test will have failed if the output printed is as follows:
                                    32  "
                                    33  "	abcdefghijklmnopqrstuvwxyaABCDEFGHIJKLEFGHIJKLMNOP....etc
                                    34  "
                                    35  "	Note: the 8 chars EFGHIJKL are repeated
                                    36  "
    000000                          37  	name	mlr_tst
                        000000      38  	entry	mlr_tst
                                    39  	temp	eis_misc
                                    40  	temp	ou_misc
                                    41  
    000000                          42  mlr_tst:
    000000  aa   000060 6270 00     43  	push
    000001  aa  7 00040 2721 20
    000002  aa  6 00050 4501 00     44  	stz	eis_misc
    000003  aa  6 00051 4501 00     45  	stz	ou_misc
    000004  aa   000070 2350 07     46  	lda	=o70,dl
    000005  aa   000001 2360 07     47  	ldq	1,dl
    000006  aa  0 00002 3715 20     48  	epplb	ap|2,*
    000007  aa  5 00000 3715 20     49  	epplb	lb|0,*	"get ptr to temp seg
    000010  aa  5 00000 3521 20     50  	eppbp	lb|0,*
    000011  aa   007767 1510 03     51  	adwplb	4087,du
    000012  aa   000002 6250 00     52  	eax5	2
    000013  aa  5 00000 5005 15     53  	a9bd	lb|0,5
    000014  0a   000057 3534 00     54  	eppbb	source
                                    55  
    000015  aa  0 40140 1005 46     56  	mlr	(pr,rl,ql),(pr,rl),fill(040)
    000016  aa   300000 600005      57  	desc9a	bb|0(3),al
    000017  aa   500000 000005      58  	desc9a	lb|0,al
                                    59  
                                    60  
    000020  aa  0 40140 1065 46     61  	cmpc	(pr,rl,ql),(pr,rl),fill(040)
    000021  aa   300000 600005      62  	desc9a	bb|0(3),al
    000022  aa   500000 000005      63  	desc9a	lb|0,al
    000023  0a   000045 6010 00     64  	tnz	fail1
                                    65  
    000024                          66  ou_check:
    000024  aa  2 07767 2351 00     67  	lda	bp|4087
    000025  0a   000124 1150 00     68  	cmpa	=o000000145146
    000026  0a   000047 6010 00     69  	tnz	fail2
    000027  aa   000000 6200 00     70  	eax0	0
                                    71  
    000030  aa  2 07770 2371 10     72  loop:	ldaq	bp|4088,x0
    000031  0a   000100 1170 10     73  	cmpaq	answer,x0
    000032  0a   000047 6010 00     74  	tnz	fail2
    000033  aa   000002 6200 10     75  	eax0	2,x0
    000034  aa   000016 1000 03     76  	cmpx0	=o16,du
    000035  0a   000030 6040 00     77  	tmi	loop
                                    78  
    000036                          79  validate:
    000036  aa  6 00050 2351 00     80  	lda	eis_misc
    000037  aa  6 00051 1151 00     81  	cmpa	ou_misc
    000040  0a   000053 6010 00     82  	tnz	eis_failed	"either the mlr or cmpc failed
    000041  aa   000000 2360 07     83  	ldq	0,dl
    000042  aa  6 00050 1161 00     84  	cmpq	eis_misc
    000043  0a   000051 6010 00     85  	tnz	mlr_failed
    000044  aa  7 00042 7101 20     86  	return
                                    87  
    000045                          88  fail1:
    000045  aa  6 00050 0541 00     89  	aos	eis_misc
    000046  0a   000024 7100 00     90  	tra	ou_check
    000047                          91  fail2:
    000047  aa  6 00051 0541 00     92  	aos	ou_misc
    000050  0a   000036 7100 00     93  	tra	validate
                                    94  
    000051                          95  mlr_failed:
    000051  aa   000000 0020 00     96  	drl			"mlr failed
                                    97  
    000052                          98  cmpc_failed:
    000052  aa   000000 0070 00     99  	mme4			"cmpc failed, mlr worked
                                   100  
    000053                         101  eis_failed:
    000053  aa  6 00051 2351 00    102  	lda	ou_misc
    000054  aa   000000 1150 07    103  	cmpa	0,dl
    000055  0a   000052 6000 00    104  	tze	cmpc_failed
    000056  aa   000000 0010 00    105  	mme1			"MLR and CMPC failed
                                   106  
                                   107  
    000057                         108  source:
    000057  aa  141 142 143 144    109  	aci	"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890$%"
    000060  aa  145 146 147 150
    000061  aa  151 152 153 154
    000062  aa  155 156 157 160
    000063  aa  161 162 163 164
    000064  aa  165 166 167 170
    000065  aa  171 172 101 102
    000066  aa  103 104 105 106
    000067  aa  107 110 111 112
    000070  aa  113 114 115 116
    000071  aa  117 120 121 122
    000072  aa  123 124 125 126
    000073  aa  127 130 131 132
    000074  aa  061 062 063 064
    000075  aa  065 066 067 070
    000076  aa  071 060 044 045
    000077  aa   000000 0110 03    110  	even
                                   111  
    000100  aa  147 150 151 152    112  answer:	aci	"ghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ12345678"
    000101  aa  153 154 155 156
    000102  aa  157 160 161 162
    000103  aa  163 164 165 166
    000104  aa  167 170 171 172
    000105  aa  101 102 103 104
    000106  aa  105 106 107 110
    000107  aa  111 112 113 114
    000110  aa  115 116 117 120
    000111  aa  121 122 123 124
    000112  aa  125 126 127 130
    000113  aa  131 132 061 062
    000114  aa  063 064 065 066
    000115  aa  067 070 000 000
    000116  aa   000000 000000     113  	oct	0
                                   114  
    000117  aa  7 00042 7101 20    115  RET:	return
                                   116  	end
ENTRY SEQUENCES
     
    000120  5a   000010 0000 00
    000121  aa  7 00046 2721 20
    000122  0a   000000 7100 00
LITERALS
     
    000124  aa   000000 145146 
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000125  5a   000003 000000 
    000126  5a   000024 600000 
    000127  aa   000000 000000 
    000130  55   000010 000002 
    000131  5a   000002 400003 
    000132  55   000006 000010 
    000133  aa  007 155 154 162
    000134  aa  137 164 163 164
    000135  55   000015 000003 
    000136  0a   000121 500000 
    000137  55   000013 000003 
    000140  aa  007 155 154 162         mlr_tst
    000141  aa  137 164 163 164
    000142  55   000002 000010 
    000143  6a   000000 400002 
    000144  55   000020 000003 
    000145  aa  014 163 171 155         symbol_table
    000146  aa  142 157 154 137
    000147  aa  164 141 142 154
    000150  aa  145 000 000 000

DEFINITIONS HASH TABLE

    000151  aa   000000 000015 
    000152  aa   000000 000000 
    000153  aa   000000 000000 
    000154  aa   000000 000000 
    000155  5a   000010 000000 
    000156  aa   000000 000000 
    000157  aa   000000 000000 
    000160  5a   000015 000000 
    000161  aa   000000 000000 
    000162  aa   000000 000000 
    000163  aa   000000 000000 
    000164  aa   000000 000000 
    000165  aa   000000 000000 
    000166  aa   000000 000000 

NO EXTERNAL NAMES

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    000167  aa   000001 000000 
    000170  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    000171  aa   000000 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000125 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000010 
    000007  a2   000000 000000 
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000004 
    000004  aa   000000 112143 
    000005  aa   305203 523135 
    000006  aa   000000 113126 
    000007  aa   355444 233440 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000125 
    000020  aa   000000 000103 
    000021  aa   000000 000114 
    000022  aa   000117 000103 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   040066 056066 
    000030  aa   040040 116157 
    000031  aa   166145 155142 
    000032  aa   145162 040061 
    000033  aa   071070 062040 
    000034  aa   107112 157150 
    000035  aa   156163 157156 
    000036  aa   056123 171163 
    000037  aa   115141 151156 
    000040  aa   164056 155040 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   154151 163164 
    000045  aa   040040 040040 
    000046  aa   040040 040040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040040 040040 
    000057  aa   040040 040040 
    000060  aa   040040 040040 
    000061  aa   040040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000001 
    000066  aa   000072 000042 
    000067  aa   131232 072506 
    000070  aa   000000 113126 
    000071  aa   347521 000000 
    000072  aa   076163 160145          >spec>on>6978-10/22/84>mlr_tst.alm
    000073  aa   143076 157156 
    000074  aa   076066 071067 
    000075  aa   070055 061060 
    000076  aa   057062 062057 
    000077  aa   070064 076155 
    000100  aa   154162 137164 
    000101  aa   163164 056141 
    000102  aa   154155 040040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

         100    answer                   mlr_tst:       73,  112.
          52    cmpc_failed              mlr_tst:       98,  104.
          53    eis_failed               mlr_tst:       82,  101.
          50    eis_misc                 mlr_tst:       39,   44,   80,   84,   89.
          45    fail1                    mlr_tst:       64,   88.
          47    fail2                    mlr_tst:       69,   74,   91.
          30    loop                     mlr_tst:       72,   77.
          51    mlr_failed               mlr_tst:       85,   95.
           0    mlr_tst                  mlr_tst:       38,   42.
          24    ou_check                 mlr_tst:       66,   90.
          51    ou_misc                  mlr_tst:       40,   45,   81,   92,  102.
         117    RET                      mlr_tst:      115.
          57    source                   mlr_tst:       54,  108.
          36    validate                 mlr_tst:       79,   93.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
