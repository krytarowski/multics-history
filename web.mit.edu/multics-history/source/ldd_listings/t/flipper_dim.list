	COMPILATION LISTING OF SEGMENT flipper_dim
	Compiled by: Multics PL/I Compiler, Release 27d, of October 11, 1982
	Compiled at: Honeywell LISD Phoenix, System M
	Compiled on: 11/15/82  1558.2 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 /* Flip cards "outer module".  Assumes card_out_stream attached to punch and creates and punches
        7*   flip card(s) for specified number of characters   coded by MAP, 3/70  */
        8 
        9 /* Modified by J. Stern on 7/29/71 to add standard SDB declaration
       10*   and to delete "flipper_attach" and "flipper_detach" entry points.  Common
       11*   attach and detach entry points for all card pseudo-DIMs are now in card_dim.  */
       12 
       13 /* Last modified 6/27/75 by Noel I. Morris	*/
       14 
       15 
       16 /* ******************************************************
       17*   *                                                    *
       18*   *                                                    *
       19*   * Copyright (c) 1972 by Massachusetts Institute of   *
       20*   * Technology and Honeywell Information Systems, Inc. *
       21*   *                                                    *
       22*   *                                                    *
       23*   ****************************************************** */
       24 
       25 
       26 flipper_write: proc (sdb_ptr, wksp, off, nel, nelt, iostatus);
       27 
       28 dcl  wksp ptr,					/* pointer to caller's workspace */
       29      off fixed bin,					/* offset of caller's data */
       30      nel fixed bin,					/* number of elements to transmit */
       31      nelt fixed bin,				/* number of elements actually transmitted */
       32      iostatus bit (72) aligned;			/* status bits */
       33 
       34 dcl  nleft fixed bin,				/* number of elements remaining to transmit */
       35      in ptr,					/* input pointer */
       36      out ptr,					/* output pointer */
       37      len fixed bin,					/* length of data on each iteration */
       38      pos fixed bin,					/* cell position on flip card */
       39      num fixed bin (9),				/* numeric value of ASCII character */
       40      i fixed bin,					/* character index */
       41      j fixed bin;					/* cell index */
       42 
       43 dcl  ios_$write ext entry (char (*) aligned, ptr, fixed bin, fixed bin, fixed bin, bit (72) aligned);
       44 
       45 dcl  card (0:159) bit (6) unal;			/* flip card cells */
       46 
       47 dcl  wks char (nleft) based unal;			/* caller's workspace */
       48 
       49 dcl  fliptab$flip_codes (0:127, 0:5) bit (6) ext unaligned;
       50 
       51 dcl (addr, bin, min, substr, unspec) builtin;
       52 
       53 
       54 		/*  */
       55 
  1     1 
  1     2 /* Begin include file ...... card_sdb.incl.pl1 */
  1     3 
  1     4 dcl  sdb_ptr ptr;					/* pointer to stream data block */
  1     5 
  1     6 dcl 1 SDB aligned based (sdb_ptr),
  1     7     2 outer_module_name char (32),
  1     8     2 attachment_list_ptr ptr,			/* ptr to list of stream names to which this SDB is attached */
  1     9     2 stream_name,
  1    10       3 next_stream_ptr ptr,				/* always null, single attachments only */
  1    11       3 name_size fixed bin (17),			/* length of stream name */
  1    12       3 stream char (32),				/* the stream to which this SDB is attached */
  1    13     2 areaptr ptr,					/* pointer to allocation area for SDB */
  1    14     2 modes bit (36);				/* mode bits */
  1    15 
  1    16 /* End of include file ...... card_sdb.incl.pl1 */
  1    17 
       56 
       57 
       58 		/*  */
       59 
       60 	iostatus = "0"b;				/* Clear status bits. */
       61 	out = addr (card);				/* Get pointer to flip card image. */
       62 	in = addr (substr (wksp -> wks, off+1));	/* Get pointer to caller's data. */
       63 	nelt = 0;					/* Initialize count of elements transmitted. */
       64 
       65 	do nleft = nel by -22 while (nleft > 0);	/* Process 22 characters at a time. */
       66 	     card = "0"b;				/* Clear the card image. */
       67 	     card (1), card (159) = "000101"b;		/* Insert 7-9 punches in columns 1 and 80. */
       68 	     pos = 154;				/* Set position of first cell. */
       69 
       70 	     len = min (22, nleft);			/* Take up to 22 characters. */
       71 	     do i = 0 to len - 1;			/* Process each character. */
       72 		num = bin (unspec (substr (in -> wks, i+1, 1)), 9);
       73 						/* Grab a character and convert to binary. */
       74 		do j = 0 to 5;			/* Fill in cells to make flip character. */
       75 		     card (pos) = fliptab$flip_codes (num, j);
       76 		     pos = pos - 2;			/* Chars go from right to left so card can be flipped. */
       77 		end;
       78 		pos = pos - 2;			/* Leave some blank space. */
       79 		if pos <= 0 then pos = pos + 155;	/* After 11 characters, do bottom row. */
       80 	     end;
       81 
       82 	     call ios_$write (stream, out, 0, 1, j, iostatus);
       83 	     if substr (iostatus, 1, 36) then return;
       84 
       85 	     nelt = nelt + len;			/* Increment elements transmitted. */
       86 	     in = addr (substr (in -> wks, len+1));	/* Step input pointer. */
       87 	end;
       88 
       89 	return;
       90 
       91 
       92 		/*  */
       93 
       94 flipper_getsize: entry (sdb_ptr, size, iostatus);
       95 
       96 dcl  size fixed bin;
       97 
       98 	iostatus = "0"b;
       99 
      100 	size = 9;					/* Works with 9-bit elements only */
      101 
      102 	return;
      103 
      104 
      105 
      106      end flipper_write;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/15/82  1458.4  flipper_dim.pl1                   >dumps>old>recomp>flipper_dim.pl1
56           1    09/09/75  1333.7  card_sdb.incl.pl1                 >ldd>include>card_sdb.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
SDB                                    based           structure                level 1 dcl 1-6
addr                                                   builtin function         dcl 51 ref 61 62 86
bin                                                    builtin function         dcl 51 ref 72
card                            000113 automatic       bit(6)                   array unaligned dcl 45 set ref 61 66* 67* 67* 75*
fliptab$flip_codes              000012 external static bit(6)                   array unaligned dcl 49 ref 75
i                               000111 automatic       fixed bin(17,0)          dcl 34 set ref 71* 72*
in                              000102 automatic       pointer                  dcl 34 set ref 62* 72 86* 86
ios_$write                      000010 constant        entry                    external dcl 43 ref 82
iostatus                               parameter       bit(72)                  dcl 28 set ref 26 60* 82* 83 94 98*
j                               000112 automatic       fixed bin(17,0)          dcl 34 set ref 74* 75* 82*
len                             000106 automatic       fixed bin(17,0)          dcl 34 set ref 70* 71 85 86
min                                                    builtin function         dcl 51 ref 70
nel                                    parameter       fixed bin(17,0)          dcl 28 ref 26 65
nelt                                   parameter       fixed bin(17,0)          dcl 28 set ref 26 63* 85* 85
nleft                           000100 automatic       fixed bin(17,0)          dcl 34 set ref 62 65* 65* 70 72 86*
num                             000110 automatic       fixed bin(9,0)           dcl 34 set ref 72* 75
off                                    parameter       fixed bin(17,0)          dcl 28 ref 26 62
out                             000104 automatic       pointer                  dcl 34 set ref 61* 82*
pos                             000107 automatic       fixed bin(17,0)          dcl 34 set ref 68* 75 76* 76 78* 78 79 79* 79
sdb_ptr                                parameter       pointer                  dcl 1-4 ref 26 82 94
size                                   parameter       fixed bin(17,0)          dcl 96 set ref 94 100*
stream                   15            based           char(32)                 level 3 dcl 1-6 set ref 82*
stream_name              12            based           structure                level 2 dcl 1-6
substr                                                 builtin function         dcl 51 ref 62 72 83 86
unspec                                                 builtin function         dcl 51 ref 72
wks                                    based           char                     unaligned dcl 47 set ref 62 72 86
wksp                                   parameter       pointer                  dcl 28 ref 26 62

NAMES DECLARED BY EXPLICIT CONTEXT.
flipper_getsize                 000226 constant        entry                    external dcl 94
flipper_write                   000014 constant        entry                    external dcl 26

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       324         340     246         334
Length       522     246        14         146      56           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
flipper_write                       134 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
flipper_write            000100 nleft                       flipper_write
                         000102 in                          flipper_write
                         000104 out                         flipper_write
                         000106 len                         flipper_write
                         000107 pos                         flipper_write
                         000110 num                         flipper_write
                         000111 i                           flipper_write
                         000112 j                           flipper_write
                         000113 card                        flipper_write

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   return              ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
ios_$write

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
fliptab$flip_codes




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     26 000006        60 000024        61 000027        62 000031        63 000036        65 000037        66 000043
     67 000056        68 000062        70 000064        71 000071        72 000077        74 000107        75 000113
     76 000131        77 000133        78 000135        79 000137        80 000143        82 000145        83 000206
     85 000210        86 000213        87 000216        89 000221        94 000222        98 000236       100 000242
    102 000245


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
