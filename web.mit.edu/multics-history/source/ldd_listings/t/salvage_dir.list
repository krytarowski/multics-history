	COMPILATION LISTING OF SEGMENT salvage_dir
	Compiled by: Multics PL/I Compiler, Release 28e, of February 14, 1985
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 07/11/86  0918.2 mst Fri
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*        *                                                         *
        5*        * Copyright (c) 1972 by Massachusetts Institute of        *
        6*        * Technology and Honeywell Information Systems, Inc.      *
        7*        *                                                         *
        8*        *********************************************************** */
        9 
       10 /****^  HISTORY COMMENTS:
       11*  1) change(86-05-23,Lippard), approve(86-06-17,MCR7433),
       12*     audit(86-06-24,Hartogs), install(86-07-11,MR12.0-1092):
       13*      Modified by Jim Lippard to mention -delete_connection_failure in
       14*      syntax line and display output on terminal when no output file
       15*      pathname is given.
       16*                                                   END HISTORY COMMENTS */
       17 
       18 
       19 salvage_dir: proc;
       20 
       21 /* This command rebuilds the directory specified.
       22*
       23*   Usage:	salvage_dir path  {output_path}  -debug  -dump dump_path  -compact  -rebuild  -check_vtoce
       24*	-delete_connection_failure
       25*   */
       26 
       27 /* AUTOMATIC */
       28 
       29 	dcl     arg		 char (arg_len) based (arg_ptr); /*  argument specified with the call */
       30 	dcl     arg_len		 fixed bin;
       31 	dcl     arg_ptr		 ptr;
       32 	dcl     close_io		 bit (1) aligned;	/* ON, if salv was open. */
       33 	dcl     detach_io		 bit (1) aligned;	/* ON, if salv was attached. */
       34 	dcl     code		 fixed bin (35);
       35 	dcl     path		 char (168);	/* name of directory */
       36 	dcl     ename		 char (32);	/* entry name */
       37 	dcl     nargs		 fixed bin;	/* number of arguments. Must be 1 */
       38 	dcl     output		 char (output_len) var based (output_p);
       39 	dcl     output_len		 fixed bin (21);
       40 	dcl     output_p		 ptr;
       41 	dcl     output_path		 char (168);	/* Name of the output segment specified with the call */
       42 	dcl     dump_p		 ptr;		/* ptr to copy of directory before salvage. */
       43 	dcl     temp_p		 (4) ptr;
       44 	dcl     time		 char (24) aligned;
       45 	dcl     dump_len		 fixed bin;
       46 	dcl     p			 ptr;
       47 	dcl     dump_dir		 char (168);
       48 	dcl     dump_ename		 char (32);
       49 	dcl     i			 fixed bin;
       50 	dcl     1 info		 aligned like salv_args;
       51 	dcl     iocbp		 ptr;
       52 
       53 	dcl     cleanup		 condition;
       54 	dcl     copy		 (dump_len) bit (36) aligned based; /* director y */
       55 
       56 	dcl     (null, ptr, substr, string) builtin;
       57 
       58 /* EXTERNAL */
       59 
       60 	dcl     get_temp_segments_	 entry (char (*), (*) ptr, fixed bin (35));
       61 	dcl     release_temp_segments_ entry (char (*), (*) ptr, fixed bin (35));
       62 	dcl     absolute_pathname_	 entry (char (*), char (*), fixed bin (35));
       63 	dcl     clock_		 entry returns (fixed bin (52));
       64 	dcl     com_err_		 entry options (variable);
       65 	dcl     cu_$arg_count	 entry (fixed bin);
       66 	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin, fixed bin (35));
       67 	dcl     date_time_		 entry (fixed bin (52), char (*) aligned);
       68 	dcl     error_table_$bad_arg	 fixed bin (35) ext;
       69 	dcl     expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35));
       70 	dcl     hcs_$make_seg	 entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
       71 	dcl     hcs_$set_bc_seg	 entry (ptr, fixed bin (24), fixed bin (35));
       72 	dcl     hphcs_$salv_directory	 entry (ptr, char (*) var, ptr, fixed bin, fixed bin (35));
       73 	dcl     ioa_$ioa_switch	 entry options (variable);
       74 	dcl     ioa_		 entry options (variable);
       75 	dcl     iox_$attach_ioname	 entry (char (*), ptr, char (*), fixed bin (35));
       76 	dcl     iox_$close		 entry (ptr, fixed bin (35));
       77 	dcl     iox_$detach_iocb	 entry (ptr, fixed bin (35));
       78 	dcl     iox_$open		 entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
       79 	dcl     iox_$put_chars	 entry (ptr, ptr, fixed bin (21), fixed bin (35));
       80 
       81 /* CONSTANT */
       82 
       83 	dcl     NAME		 char (11) int static options (constant) init ("salvage_dir");
       84 
       85 	temp_p (*) = null;
       86 	output_path, path = "";
       87 	close_io, detach_io = "0"b;
       88 
       89 /* Argument parse */
       90 
       91 	call cu_$arg_count (nargs);
       92 	if nargs = 0 then do;
       93 		call com_err_ (0, "salvage_dir", "Usage: salvage_dir dir_path {output_path} -compact -check_vtoce -delete_connection_failure -rebuild");
       94 		return;
       95 	     end;
       96 
       97 	string (info.options) = "0"b;
       98 	info.salv_time = bit (clock_ (), 36);
       99 	info.correct_oosw = "1"b;
      100 	do i = 1 to nargs;
      101 	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
      102 	     if code ^= 0 then do;
      103 		     call com_err_ (code, "salvage_dir", arg);
      104 		     return;
      105 		end;
      106 	     if substr (arg, 1, 1) = "-" then do;
      107 		     if arg = "-rebuild" then info.force_rebuild = "1"b;
      108 		     else if arg = "-check_vtoce" then info.check_vtoce = "1"b;
      109 		     else if arg = "-compact" then info.compact = "1"b;
      110 		     else if arg = "-delete_connection_failure" | arg = "-dcf" then info.delete_connection_failure = "1"b;
      111 
      112 /* -dump <dump_directory> */
      113 		     else if arg = "-debug" | arg = "-db" then info.print_trace = "1"b;
      114 		     else if arg = "-dump" then do;
      115 			     info.dump = "1"b;
      116 			     i = i + 1;
      117 			     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
      118 			     if code ^= 0 then do;
      119 				     call com_err_ (0, NAME, "-dump must be followed by the path of the dump directory");
      120 				     return;
      121 				end;
      122 
      123 			     call absolute_pathname_ (arg, dump_dir, code);
      124 			     if code ^= 0 | (substr (arg, 1, 1) = "-") then do;
      125 				     call com_err_ (code, NAME, "-dump must be followed by the path of the dump directory  ^a", arg);
      126 				     return;
      127 				end;
      128 			end;
      129 		     else do;
      130 			     call com_err_ (error_table_$bad_arg, NAME, arg);
      131 			     return;
      132 			end;
      133 		end;
      134 	     else if path = "" then do;
      135 		     call expand_pathname_ (arg, path, ename, code);
      136 		     if code ^= 0 then do;
      137 			     call com_err_ (code, NAME, arg);
      138 			     return;
      139 			end;
      140 		     if path = ">" then path = rtrim (path) || ename;
      141 		     else path = rtrim (path) || ">" || ename;
      142 		end;
      143 	     else if output_path = "" then do;
      144 		     call absolute_pathname_ (arg, output_path, code);
      145 		     if code ^= 0 then do;
      146 			     call com_err_ (code, NAME, "");
      147 			     return;
      148 			end;
      149 		end;
      150 	     else do;
      151 		     call com_err_ (error_table_$bad_arg, NAME, arg);
      152 		     return;
      153 		end;
      154 	end;
      155 
      156 	if path = "" then do;
      157 		call com_err_ (0, NAME, "Pathname missing. salvage_dir path {output_path}");
      158 		return;
      159 	     end;
      160 
      161 	info.check_vtoce = info.check_vtoce | info.delete_connection_failure;
      162 
      163 /* Get temp segments */
      164 
      165 	on cleanup call release;
      166 	call get_temp_segments_ (NAME, temp_p, code);
      167 	if code ^= 0 then do;
      168 		call com_err_ (code, NAME);
      169 		return;
      170 	     end;
      171 
      172 	output_p = temp_p (1);
      173 	info.temp1_ptr = temp_p (2);
      174 	info.temp2_ptr = temp_p (3);
      175 	if info.dump then dump_p = temp_p (4);
      176 	else dump_p = null;
      177 
      178 /* Salvage and print output. */
      179 
      180 	output_len = 64 * 1024 * 4;
      181 	output = "";
      182 	info.pathname = path;
      183 	call hphcs_$salv_directory (addr (info), output, dump_p, dump_len, code);
      184 
      185 
      186 /* Attach output segment. */
      187 
      188 	if output ^= "" then do;
      189 		if output_path ^= "" then do;
      190 			call iox_$attach_ioname ("salv", iocbp, "vfile_ " || rtrim (output_path) || " -append ", code);
      191 			if code ^= 0 then call com_err_ (code, NAME, output_path);
      192 			else do;
      193 				detach_io = "1"b;
      194 				call iox_$open (iocbp, Stream_output, "0"b, code);
      195 				if code ^= 0 then call com_err_ (code, NAME, output_path);
      196 				else do;
      197 					close_io = "1"b;
      198 
      199 					call ioa_$ioa_switch (iocbp, "^/^a:", path);
      200 					call iox_$put_chars (iocbp, ptr (output_p, 1), length (output), code);
      201 				     end;
      202 			     end;
      203 		     end;
      204 		else do;
      205 			call ioa_ ("^/^a:", path);
      206 			call ioa_ ("^a", output);
      207 		     end;
      208 	     end;
      209 
      210 /* If a copy of the directory, before salvage, is returned, then create a segment in the dump_dir with the name:
      211*   <date>.<time><dir_name> */
      212 	if info.dump & (dump_len > 0) then do;
      213 		call date_time_ (clock_ (), time);
      214 		dump_ename = substr (time, 1, 2) || substr (time, 4, 2) || substr (time, 7, 2) || "." || substr (time, 11, 5) || ename;
      215 		call hcs_$make_seg (dump_dir, dump_ename, "", 01010b, p, code);
      216 		if code ^= 0 then call com_err_ (code, NAME, "^a>^a", dump_dir, dump_ename);
      217 		else do;
      218 			p -> copy = dump_p -> copy;
      219 			call hcs_$set_bc_seg (p, dump_len * 36, code);
      220 			if code ^= 0 then call com_err_ (code, NAME, "^a>^a", dump_dir, dump_ename);
      221 		     end;
      222 	     end;
      223 
      224 	call release;
      225 
      226 	return;
      227 
      228 
      229 release: proc;
      230 
      231 	call release_temp_segments_ (NAME, temp_p, code);
      232 	if code ^= 0 then call com_err_ (code, NAME);
      233 
      234 	if output_path ^= "" then do;
      235 		if close_io then call iox_$close (iocbp, code);
      236 		if code ^= 0 then call com_err_ (code, NAME, output_path);
      237 		else do;
      238 			if detach_io then call iox_$detach_iocb (iocbp, code);
      239 			if code ^= 0 then call com_err_ (code, NAME, output_path);
      240 		     end;
      241 	     end;
      242 
      243      end release;
      244 
      245 
  1     1 /* BEGIN INCLUDE FILE . . . salv_args */
  1     2 /* Keith Loepere made pathname unal November 1984. */
  1     3 
  1     4 dcl 1 salv_args aligned based,
  1     5     2 temp1_ptr ptr,				/* ptr to temp segment */
  1     6     2 temp2_ptr ptr,				/* ptr to temp segment */
  1     7     2 salv_time bit (36) aligned,			/* Highest valid date/time  */
  1     8     2 options aligned,
  1     9       3 force_rebuild bit (1) unal,			/* ON, if should rebuild directory */
  1    10       3 print_trace bit (1) unal,			/* ON, if debugging trace information should be printed. */
  1    11       3 correct_oosw bit (1) unal,			/* ON, if directory's out-of-service switch should be reset */
  1    12       3 check_vtoce bit (1) unal,			/* ON, if VTOC entries of all branches should be checked. */
  1    13       3 dump bit (1) unal,				/* ON, if should dump directory on error condition */
  1    14       3 compact bit (1) unal,				/* ON, to force rebuild if one pages can be recovered. */
  1    15       3 delete_connection_failure bit (1) unal,		/* ON, to delete branches that have no VTOC entries */
  1    16       3 pad bit (29),
  1    17     2 branch_ptr ptr,				/* ptr to branch for directory */
  1    18     2 current_length fixed bin,			/* number of pages in directory */
  1    19     2 pathname char (168) unal,			/* pathname of directory being salvaged */
  1    20     2 master_dir_uid bit (36) aligned,			/* master UID for this directory */
  1    21     2 tree_depth fixed bin;				/* number of levels from root for this directory */
  1    22 
  1    23 /* END INCLUDE FILE . . . salv_args */
      246 
  2     1 /* Begin include file ..... iox_modes.incl.pl1 */
  2     2 
  2     3 /* Written by C. D. Tavares, 03/17/75 */
  2     4 /* Updated 10/31/77 by CDT to include short iox mode strings */
  2     5 
  2     6 dcl  iox_modes (13) char (24) int static options (constant) aligned initial
  2     7     ("stream_input", "stream_output", "stream_input_output",
  2     8      "sequential_input", "sequential_output", "sequential_input_output", "sequential_update",
  2     9      "keyed_sequential_input", "keyed_sequential_output", "keyed_sequential_update",
  2    10      "direct_input", "direct_output", "direct_update");
  2    11 
  2    12 dcl  short_iox_modes (13) char (4) int static options (constant) aligned initial
  2    13     ("si", "so", "sio", "sqi", "sqo", "sqio", "squ", "ksqi", "ksqo", "ksqu", "di", "do", "du");
  2    14 
  2    15 dcl (Stream_input initial (1),
  2    16      Stream_output initial (2),
  2    17      Stream_input_output initial (3),
  2    18      Sequential_input initial (4),
  2    19      Sequential_output initial (5),
  2    20      Sequential_input_output initial (6),
  2    21      Sequential_update initial (7),
  2    22      Keyed_sequential_input initial (8),
  2    23      Keyed_sequential_output initial (9),
  2    24      Keyed_sequential_update initial (10),
  2    25      Direct_input initial (11),
  2    26      Direct_output initial (12),
  2    27      Direct_update initial (13)) fixed bin int static options (constant);
  2    28 
  2    29 /* End include file ..... iox_modes.incl.pl1 */
      247 
      248      end salvage_dir;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    07/11/86  0915.5  salvage_dir.pl1                   >special_ldd>install>MR12.0-1092>salvage_dir.pl1
246          1    01/30/85  1523.9  salv_args.incl.pl1                >ldd>include>salv_args.incl.pl1
247          2    02/02/78  1229.7  iox_modes.incl.pl1                >ldd>include>iox_modes.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
NAME                            000000 constant        char(11)                 initial unaligned dcl 83 set ref 119* 125* 130* 137*
                                                                                  146* 151* 157* 166* 168* 191* 195* 216* 220* 231*
                                                                                  232* 236* 239*
Stream_output                   000031 constant        fixed bin(17,0)          initial dcl 2-15 set ref 194*
absolute_pathname_              000014 constant        entry                    external dcl 62 ref 123 144
arg                                    based           char                     unaligned dcl 29 set ref 103* 106 107 108 109 110
                                                                                  110 113 113 114 123* 124 125* 130* 135* 137* 144*
                                                                                  151*
arg_len                         000100 automatic       fixed bin(17,0)          dcl 30 set ref 101* 103 103 106 107 108 109 110 110
                                                                                  113 113 114 117* 123 123 124 125 125 130 130 135
                                                                                  135 137 137 144 144 151 151
arg_ptr                         000102 automatic       pointer                  dcl 31 set ref 101* 103 106 107 108 109 110 110 113
                                                                                  113 114 117* 123 124 125 130 135 137 144 151
check_vtoce               5(03) 000360 automatic       bit(1)                   level 3 packed unaligned dcl 50 set ref 108* 161*
                                                                                  161
cleanup                         000452 stack reference condition                dcl 53 ref 165
clock_                          000016 constant        entry                    external dcl 63 ref 98 213 213
close_io                        000104 automatic       bit(1)                   dcl 32 set ref 87* 197* 235
code                            000106 automatic       fixed bin(35,0)          dcl 34 set ref 101* 102 103* 117* 118 123* 124 125*
                                                                                  135* 136 137* 144* 145 146* 166* 167 168* 183*
                                                                                  190* 191 191* 194* 195 195* 200* 215* 216 216*
                                                                                  219* 220 220* 231* 232 232* 235* 236 236* 238* 239
                                                                                  239*
com_err_                        000020 constant        entry                    external dcl 64 ref 93 103 119 125 130 137 146 151
                                                                                  157 168 191 195 216 220 232 236 239
compact                   5(05) 000360 automatic       bit(1)                   level 3 packed unaligned dcl 50 set ref 109*
copy                                   based           bit(36)                  array dcl 54 set ref 218* 218
correct_oosw              5(02) 000360 automatic       bit(1)                   level 3 packed unaligned dcl 50 set ref 99*
cu_$arg_count                   000022 constant        entry                    external dcl 65 ref 91
cu_$arg_ptr                     000024 constant        entry                    external dcl 66 ref 101 117
date_time_                      000026 constant        entry                    external dcl 67 ref 213
delete_connection_failure
                          5(06) 000360 automatic       bit(1)                   level 3 packed unaligned dcl 50 set ref 110* 161
detach_io                       000105 automatic       bit(1)                   dcl 33 set ref 87* 193* 238
dump                      5(04) 000360 automatic       bit(1)                   level 3 packed unaligned dcl 50 set ref 115* 175 212
dump_dir                        000274 automatic       char(168)                unaligned dcl 47 set ref 123* 215* 216* 220*
dump_ename                      000346 automatic       char(32)                 unaligned dcl 48 set ref 214* 215* 216* 220*
dump_len                        000270 automatic       fixed bin(17,0)          dcl 45 set ref 183* 212 218 219
dump_p                          000250 automatic       pointer                  dcl 42 set ref 175* 176* 183* 218
ename                           000161 automatic       char(32)                 unaligned dcl 36 set ref 135* 140 141 214
error_table_$bad_arg            000030 external static fixed bin(35,0)          dcl 68 set ref 130* 151*
expand_pathname_                000032 constant        entry                    external dcl 69 ref 135
force_rebuild             5     000360 automatic       bit(1)                   level 3 packed unaligned dcl 50 set ref 107*
get_temp_segments_              000010 constant        entry                    external dcl 60 ref 166
hcs_$make_seg                   000034 constant        entry                    external dcl 70 ref 215
hcs_$set_bc_seg                 000036 constant        entry                    external dcl 71 ref 219
hphcs_$salv_directory           000040 constant        entry                    external dcl 72 ref 183
i                               000356 automatic       fixed bin(17,0)          dcl 49 set ref 100* 101* 116* 116 117*
info                            000360 automatic       structure                level 1 dcl 50 set ref 183 183
ioa_                            000044 constant        entry                    external dcl 74 ref 205 206
ioa_$ioa_switch                 000042 constant        entry                    external dcl 73 ref 199
iocbp                           000450 automatic       pointer                  dcl 51 set ref 190* 194* 199* 200* 235* 238*
iox_$attach_ioname              000046 constant        entry                    external dcl 75 ref 190
iox_$close                      000050 constant        entry                    external dcl 76 ref 235
iox_$detach_iocb                000052 constant        entry                    external dcl 77 ref 238
iox_$open                       000054 constant        entry                    external dcl 78 ref 194
iox_$put_chars                  000056 constant        entry                    external dcl 79 ref 200
nargs                           000171 automatic       fixed bin(17,0)          dcl 37 set ref 91* 92 100
null                                                   builtin function         dcl 56 ref 85 176
options                   5     000360 automatic       structure                level 2 dcl 50 set ref 97*
output                                 based           varying char             dcl 38 set ref 181* 183* 188 200 200 206*
output_len                      000172 automatic       fixed bin(21,0)          dcl 39 set ref 180* 181 183 206
output_p                        000174 automatic       pointer                  dcl 40 set ref 172* 181 183 188 200 200 200 200 206
output_path                     000176 automatic       char(168)                unaligned dcl 41 set ref 86* 143 144* 189 190 191*
                                                                                  195* 234 236* 239*
p                               000272 automatic       pointer                  dcl 46 set ref 215* 218 219*
path                            000107 automatic       char(168)                unaligned dcl 35 set ref 86* 134 135* 140 140* 140
                                                                                  141* 141 156 182 199* 205*
pathname                 13     000360 automatic       char(168)                level 2 packed unaligned dcl 50 set ref 182*
print_trace               5(01) 000360 automatic       bit(1)                   level 3 packed unaligned dcl 50 set ref 113*
ptr                                                    builtin function         dcl 56 ref 200 200
release_temp_segments_          000012 constant        entry                    external dcl 61 ref 231
salv_args                              based           structure                level 1 dcl 1-4
salv_time                 4     000360 automatic       bit(36)                  level 2 dcl 50 set ref 98*
string                                                 builtin function         dcl 56 set ref 97*
substr                                                 builtin function         dcl 56 ref 106 124 214 214 214 214
temp1_ptr                       000360 automatic       pointer                  level 2 dcl 50 set ref 173*
temp2_ptr                 2     000360 automatic       pointer                  level 2 dcl 50 set ref 174*
temp_p                          000252 automatic       pointer                  array dcl 43 set ref 85* 166* 172 173 174 175 231*
time                            000262 automatic       char(24)                 dcl 44 set ref 213* 214 214 214 214

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
Direct_input                           internal static fixed bin(17,0)          initial dcl 2-15
Direct_output                          internal static fixed bin(17,0)          initial dcl 2-15
Direct_update                          internal static fixed bin(17,0)          initial dcl 2-15
Keyed_sequential_input                 internal static fixed bin(17,0)          initial dcl 2-15
Keyed_sequential_output                internal static fixed bin(17,0)          initial dcl 2-15
Keyed_sequential_update                internal static fixed bin(17,0)          initial dcl 2-15
Sequential_input                       internal static fixed bin(17,0)          initial dcl 2-15
Sequential_input_output                internal static fixed bin(17,0)          initial dcl 2-15
Sequential_output                      internal static fixed bin(17,0)          initial dcl 2-15
Sequential_update                      internal static fixed bin(17,0)          initial dcl 2-15
Stream_input                           internal static fixed bin(17,0)          initial dcl 2-15
Stream_input_output                    internal static fixed bin(17,0)          initial dcl 2-15
iox_modes                              internal static char(24)                 initial array dcl 2-6
short_iox_modes                        internal static char(4)                  initial array dcl 2-12

NAMES DECLARED BY EXPLICIT CONTEXT.
release                         002127 constant        entry                    internal dcl 229 ref 165 224
salvage_dir                     000205 constant        entry                    external dcl 19

NAMES DECLARED BY CONTEXT OR IMPLICATION.
addr                                                   builtin function         ref 183 183
bit                                                    builtin function         ref 98
length                                                 builtin function         ref 200 200
rtrim                                                  builtin function         ref 140 141 190

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      2554        2634    2304        2564
Length      3104    2304        60         234     247           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
salvage_dir                         400 external procedure  is an external procedure.  
on unit on line 165                  64 on unit               
release                              78 internal procedure  is called by several nonquick procedures.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
salvage_dir              000100 arg_len                     salvage_dir
                         000102 arg_ptr                     salvage_dir
                         000104 close_io                    salvage_dir
                         000105 detach_io                   salvage_dir
                         000106 code                        salvage_dir
                         000107 path                        salvage_dir
                         000161 ename                       salvage_dir
                         000171 nargs                       salvage_dir
                         000172 output_len                  salvage_dir
                         000174 output_p                    salvage_dir
                         000176 output_path                 salvage_dir
                         000250 dump_p                      salvage_dir
                         000252 temp_p                      salvage_dir
                         000262 time                        salvage_dir
                         000270 dump_len                    salvage_dir
                         000272 p                           salvage_dir
                         000274 dump_dir                    salvage_dir
                         000346 dump_ename                  salvage_dir
                         000356 i                           salvage_dir
                         000360 info                        salvage_dir
                         000450 iocbp                       salvage_dir

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
alloc_cs            cat_realloc_cs      call_ext_out_desc   call_ext_out        call_int_this       call_int_other
return              enable              shorten_stack       ext_entry           int_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
absolute_pathname_            clock_                        com_err_                      cu_$arg_count
cu_$arg_ptr                   date_time_                    expand_pathname_              get_temp_segments_
hcs_$make_seg                 hcs_$set_bc_seg               hphcs_$salv_directory         ioa_
ioa_$ioa_switch               iox_$attach_ioname            iox_$close                    iox_$detach_iocb
iox_$open                     iox_$put_chars                release_temp_segments_

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$bad_arg




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     19 000204        85 000212        86 000225        87 000233        91 000235        92 000244        93 000246
     94 000277        97 000300        98 000303        99 000317       100 000321       101 000331       102 000346
    103 000350       104 000400       106 000401       107 000406       108 000416       109 000425       110 000434
    113 000447       114 000462       115 000466       116 000470       117 000471       118 000506       119 000510
    120 000535       123 000536       124 000562       125 000571       126 000624       128 000625       130 000626
    131 000652       133 000653       134 000654       135 000660       136 000710       137 000712       138 000736
    140 000737       141 000772       142 001032       143 001034       144 001040       145 001064       146 001066
    147 001107       149 001110       151 001111       152 001135       154 001136       156 001140       157 001144
    158 001171       161 001172       165 001177       166 001221       167 001242       168 001244       169 001261
    172 001262       173 001264       174 001266       175 001270       176 001276       180 001300       181 001302
    182 001303       183 001306       188 001342       189 001350       190 001354       191 001441       193 001466
    194 001470       195 001507       197 001533       199 001535       200 001560       203 001602       205 001603
    206 001622       212 001645       213 001652       214 001676       215 001741       216 002001       218 002037
    219 002046       220 002064       224 002121       226 002125       229 002126       231 002134       232 002155
    234 002175       235 002202       236 002215       238 002242       239 002255       243 002301


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
