	COMPILATION LISTING OF SEGMENT lap_dump_
	Compiled by: Multics PL/I Compiler, Release 30, of February 16, 1988
	Compiled at: Honeywell Bull, Phoenix AZ, SysM
	Compiled on: 08/08/88  1510.4 mst Mon
	    Options: optimize map

        1 /****^  **************************************************************
        2*        *                                                            *
        3*        * Copyright, (C) Honeywell Bull Inc., 1988                   *
        4*        *                                                            *
        5*        * Copyright, (C) Massachusetts Institute of Technology, 1983 *
        6*        *                                                            *
        7*        ************************************************************** */
        8 
        9 /* format: style4,delnl,insnl,ifthenstmt,indnoniterend */
       10 
       11 lap_dump_:
       12      procedure (P_ttybp, P_areap, P_lap_data_ptr, P_subchannel, P_brief);
       13 
       14 /* Created 1983 February by Olin Sibert to support LAP multiplexers. */
       15 
       16 /****^  HISTORY COMMENTS:
       17*  1) change(88-07-07,Beattie), approve(88-06-27,MCR7926),
       18*     audit(88-07-22,Brunelle), install(88-08-08,MR12.2-1082):
       19*     Prepared for installation.
       20*                                                   END HISTORY COMMENTS */
       21 
       22 	lap_data_ptr = P_lap_data_ptr;
       23 
       24 	call ioa_ ("LAP channel ^a, devx ^d (subchannel devx ^d)", lap_data.name, lap_data.devx, lap_data.subchannel);
       25 	call ioa_ ("State is ^[hungup^;listening^;active^]. Flags: ^[send_output ^]^[started ^]", (lap_data.state + 1),
       26 	     lap_data.send_output, lap_data.simplex_started);
       27 	call ioa_ ("Activate order: ^24.3b", unspec (lap_data.activate_order));
       28 	call ioa_ ("Dialup info:    ^24.3b", unspec (lap_data.dialup_info));
       29 	call ioa_ ("SC dialup info: ^24.3b", unspec (lap_data.sc_dialup_info));
       30 	call ioa_ ("Max frame size: ^d chars.  ^[No frame pending.^;Pending frame:^]", lap_data.max_frame_size,
       31 	     (lap_data.frame_start = null ()));
       32 	if (lap_data.frame_start ^= null ()) then do;
       33 	     call ioa_ ("Frame at ^p is ^d chars^[ ready for sending^]:", lap_data.frame_start, lap_data.frame_size,
       34 		lap_data.frame_ready);
       35 	     call tty_dump$print_chain (P_ttybp, "", binary (rel (lap_data.frame_start), 18), (P_brief));
       36 	     end;
       37 
       38 	call ioa_ ("");
       39 
       40 	return;
       41 
       42 lap_analyze_:
       43      entry (P_ttybp, P_areap, P_devx, P_check_used, P_long);
       44 
       45 	lctp = pointer (P_ttybp, rel (P_ttybp -> tty_buf.lct_ptr));
       46 	lctep = addr (lct.lcte_array (P_devx));
       47 	lap_data_ptr = pointer (P_ttybp, rel (lcte.data_base_ptr));
       48 
       49 	call lap_dump_ (P_ttybp, P_areap, lap_data_ptr, -1, (^P_long));
       50 
       51 	if (lap_data.frame_start ^= null ()) then do;
       52 	     buffer_offset = binary (rel (lap_data.frame_start), 18);
       53 	     do while ((buffer_offset ^= 0) & (buffer_offset < 261120));
       54 		blockp = pointer (P_ttybp, buffer_offset);
       55 		buffer_offset = buffer.next;
       56 		call P_check_used (blockp, (16 * (1 + binary (buffer.size_code, 3))));
       57 	     end;
       58 	     end;
       59 
       60 	call P_check_used (lap_data_ptr, size (lap_data));
       61 
       62 	return;
       63 
       64 dcl  P_ttybp pointer parameter;
       65 dcl  P_areap pointer parameter;
       66 dcl  P_lap_data_ptr pointer parameter;
       67 dcl  P_subchannel fixed bin parameter;
       68 dcl  P_brief bit (1) aligned parameter;
       69 dcl  P_devx fixed bin parameter;
       70 dcl  P_check_used entry (pointer, fixed bin) parameter;
       71 dcl  P_long bit (1) aligned parameter;
       72 
       73 dcl  buffer_offset fixed bin (18);
       74 
       75 dcl  ioa_ entry () options (variable);
       76 dcl  tty_dump$print_chain entry (ptr, char (*), fixed bin, bit (1));
       77 
       78 dcl  (addr, binary, null, pointer, rel, size, unspec) builtin;
       79 
  1     1 /* BEGIN INCLUDE FILE ... lap_simplex_data.incl.pl1 */
  1     2 
  1     3 /*
  1     4*   Created 2/1/83 by Olin Sibert to add support for LAP mulitiplexers.
  1     5**/
  1     6 
  1     7 /****^  HISTORY COMMENTS:
  1     8*  1) change(88-07-07,Beattie), approve(88-06-27,MCR7926),
  1     9*     audit(88-07-22,Brunelle), install(88-08-08,MR12.2-1082):
  1    10*     Prepared for installation.
  1    11*                                                   END HISTORY COMMENTS */
  1    12 
  1    13 dcl  lap_load_info_ptr pointer;
  1    14 dcl  lap_data_ptr pointer;
  1    15 
  1    16 dcl 1 lap_data aligned based (lap_data_ptr),
  1    17     2 name char (32) unaligned,
  1    18     2 devx fixed bin,
  1    19     2 subchannel fixed bin,
  1    20     2 state fixed bin,                                      /* One of the state values below */
  1    21     2 flags aligned,
  1    22       3 send_output bit (1) unaligned,
  1    23       3 simplex_started bit (1) unaligned,                      /* Whether to accept dialups */
  1    24       3 pad bit (34) unaligned,
  1    25     2 load_process_id bit (36) aligned,                     /* For notifications */
  1    26     2 load_event_channel fixed bin (71),
  1    27     2 activate_order aligned like lap_line_control_info,    /* Order used to activate the LAP tables */
  1    28     2 dialup_info aligned like dialup_info,                 /* Dialup info received from FNP */
  1    29     2 sc_dialup_info aligned like dialup_info,              /* and info sent on to our subchannel */
  1    30     2 max_frame_size fixed bin,                             /* Max number of characters stuffable into a frame */
  1    31     2 frame_ready bit (1) aligned,                          /* Frame (collected below) is complete and should be sent */
  1    32     2 frame_size fixed bin,                                 /* Number of characters */
  1    33     2 frame_start pointer,                                  /* Beginning and end of buffer chain */
  1    34     2 frame_end pointer;
  1    35 
  1    36 dcl  LAP_HUNGUP init (0) fixed bin internal static options (constant);
  1    37 dcl  LAP_LISTENING init (1) fixed bin internal static options (constant);
  1    38 dcl  LAP_ACTIVE init (2) fixed bin internal static options (constant);
  1    39 
  1    40 dcl 1 lap_load_info aligned based (lap_load_info_ptr),
  1    41     2 version char (8) aligned,
  1    42     2 event_channel fixed bin (71),                         /* For notifying loading process */
  1    43     2 process_id bit (36) aligned,
  1    44     2 activate_order aligned like lap_line_control_info;    /* Only "real" parameter */
  1    45 
  1    46 dcl  LAP_LOAD_INFO_VERSION_1 char (8) internal static options (constant) init ("lapload1");
  1    47 
  1    48 /* END INCLUDE FILE ... lap_simplex_data.incl.pl1 */
       80 
       81 
  2     1 /* BEGIN INCLUDE FILE ... lap_line_info.incl.pl1 */
  2     2 
  2     3 /*
  2     4*   Line status and control information for LAP -- extracted from x25_mpx
  2     5*
  2     6*   Created January 10, 1983 by Olin Sibert to support LAP multiplexers.
  2     7**/
  2     8 
  2     9 /****^  HISTORY COMMENTS:
  2    10*  1) change(88-07-07,Beattie), approve(88-06-27,MCR7926),
  2    11*     audit(88-07-22,Brunelle), install(88-08-08,MR12.2-1082):
  2    12*     Prepared for installation.
  2    13*                                                   END HISTORY COMMENTS */
  2    14 
  2    15 dcl  L2_HEADER_PAD fixed bin internal static options (constant) init (2);
  2    16 
  2    17 dcl  lap_line_control_info_ptr pointer;
  2    18 
  2    19 dcl 1 lap_line_control_info aligned based (lap_line_control_info_ptr),
  2    20     2 dce_or_dte bit (1) unaligned,                         /* ON = DCE */
  2    21     2 lap_or_lapb bit (1) unaligned,                        /* ON = lapb */
  2    22     2 disc_first bit (1) unaligned,                         /* ON = send disc upon physical connect */
  2    23     2 trace_off bit (1) unaligned,                          /* ON = turn off trace upon line crash */
  2    24     2 pad bit (5) unaligned,                                /* padding */
  2    25     2 command bit (9) unaligned,                            /* One of the values below */
  2    26     2 frame_size fixed bin (18) unsigned unaligned,         /* max size of I-frame */
  2    27 
  2    28     2 K fixed bin (9) unsigned unaligned,                   /* max un-acked frames allowed */
  2    29     2 N2 fixed bin (9) unsigned unaligned,                  /* number of retries */
  2    30     2 T1 fixed bin (9) unsigned unaligned,                  /* frame ack wait timer in tenths of seconds */
  2    31     2 T3 fixed bin (9) unsigned unaligned;                  /* init timer */
  2    32 
  2    33 dcl  ACTIVATE_COMMAND init ("001"b3) bit (9) internal static options (constant);
  2    34 dcl  DEACTIVATE_COMMAND init ("002"b3) bit (9) internal static options (constant);
  2    35 dcl  DISCONNECT_COMMAND init ("003"b3) bit (9) internal static options (constant);
  2    36 
  2    37 dcl  lap_line_status_info_ptr pointer;
  2    38 
  2    39 dcl 1 lap_line_status_info aligned based (lap_line_status_info_ptr),
  2    40     2 status_type fixed bin (18) unsigned unaligned,        /* One of the values below */
  2    41     2 last_function_process fixed bin (17) unaligned,       /* coded function */
  2    42 
  2    43     2 which_state_process fixed bin (9) unsigned unaligned, /* process state */
  2    44     2 main_state fixed bin (9) unsigned unaligned,          /* current frame level state */
  2    45     2 primary_sub_state fixed bin (9) unsigned unaligned,   /* sub link up state */
  2    46     2 secondary_sub_state fixed bin (9) unsigned unaligned;
  2    47 
  2    48 dcl  LINE_DOWN_STATUS init (1) fixed bin (18) unsigned internal static options (constant);
  2    49 
  2    50 dcl  FRAME_STATE_ARRAY (5) char (32) static options (constant) init
  2    51     ("Down", "T3", "SABM Sent", "Set Up", "Up");
  2    52 
  2    53 dcl  FRAME_SUB_STATE_ARRAY (0:14) char (32) static options (constant) init
  2    54     ("Link down: see frame", "Link down: down", "Link down: T3",                                    /* 0, 1, 2 */
  2    55      "Link down: SABM sent", "Link down: set up", "Primary normal",                                 /* 3, 4, 5 */
  2    56      "Primary remote busy", "Primary T1 expired", "Primary SARM reset",                             /* 6, 7, 8 */
  2    57      "Secondary normal", "Secondary local busy", "Secondary reject",                                /* 9, 10, 11 */
  2    58      "Secondary CMDR send", "Link up FRMR send", "Link up reset started (lapb)");                   /* 12, 13, 14 */
  2    59 
  2    60 dcl  FRAME_FUNCTION_CODE (0:19) char (32) static options (constant) init
  2    61     ("Recieved invalid command or data", "Recieved DISC", "Recieved DM (lapb)",                     /* 0, 1, 2 */
  2    62      "Recieved SARM (lap)", "Recieved SABM (lapb)", "Recieved UA",                                  /* 3, 4, 5 */
  2    63      "Recieved CMDR/FRMR", "Recieved RR", "Recieved RNR",                                           /* 6, 7, 8 */
  2    64      "Recieved REJ", "Recieved bad command or response", "Timer (T1) expired with rc<N2",           /* 9, 10, 11 */
  2    65      "Timer (T1) expired with rc=N2", "Recieved bad final bit", "Recieved bad I-frame (N(R))",      /* 12, 13, 14 */
  2    66      "Recieved bad I-frame (N(S))", "Recieved I-frame", "Recieved poll RR command (lapb)",          /* 15, 16, 17 */
  2    67      "Recieved poll RNR command (lapb)", "Recieved poll REJ command (lapb)");                       /* 18, 19 */
  2    68 
  2    69 /* END INCLUDE FILE ... lap_line_info.incl.pl1 */
       82 
       83 
  3     1 /* BEGIN INCLUDE FILE ... mcs_interrupt_info.incl.pl1 */
  3     2 
  3     3 /* Defines constants and structures  used by MCS interrupt handlers */
  3     4 
  3     5 /* Created 08/21/78 by Robert Coren */
  3     6 /* Echo negotiation types added sometime by Bernie Greenberg */
  3     7 /* TIMER and USER_INTERRUPT added in spring of 1982 by Olin Sibert */
  3     8 /* MASKED type added June 23, 1982, by Robert Coren */
  3     9 
  3    10 dcl  DIALUP fixed bin int static options (constant) init (1);
  3    11 dcl  HANGUP fixed bin int static options (constant) init (2);
  3    12 dcl  CRASH fixed bin int static options (constant) init (3);
  3    13 dcl  SEND_OUTPUT fixed bin int static options (constant) init (4);
  3    14 dcl  INPUT_AVAILABLE fixed bin int static options (constant) init (5);
  3    15 dcl  ACCEPT_INPUT fixed bin int static options (constant) init (6);
  3    16 dcl  INPUT_REJECTED fixed bin int static options (constant) init (7);
  3    17 dcl  QUIT fixed bin int static options (constant) init (8);
  3    18 dcl  LINE_STATUS fixed bin int static options (constant) init (9);
  3    19 dcl  DIAL_STATUS fixed bin int static options (constant) init (10);
  3    20 dcl  WRU_TIMEOUT fixed bin int static options (constant) init (11);
  3    21 dcl  SPACE_AVAILABLE fixed bin int static options (constant) init (12);
  3    22 dcl  ACKNOWLEDGE_ECHNEGO_INIT fixed bin int static options (constant) init (13);
  3    23 dcl  ACKNOWLEDGE_ECHNEGO_STOP fixed bin int static options (constant) init (14);
  3    24 dcl  TIMER fixed bin int static options (constant) init (15);
  3    25 dcl  USER_INTERRUPT fixed bin int static options (constant) init (16);
  3    26 dcl  MASKED fixed bin int static options (constant) init (17);
  3    27 
  3    28 dcl  interrupt_info bit (72) aligned;
  3    29 
  3    30 dcl 1 dialup_info aligned,				/* for use with DIALUP interrupt */
  3    31     2 line_type fixed bin (9) unal uns,
  3    32     2 buffer_pad fixed bin (9) unal uns,		/* free space multiplexer would like in output bufs */
  3    33     2 baud_rate fixed bin (18) unal uns,
  3    34     2 max_buf_size fixed bin (9) unal uns,
  3    35     2 receive_mode_device bit (1) unal,			/* device must be told to enter receive mode */
  3    36     2 pad bit (26) unal;
  3    37 
  3    38 dcl 1 rtx_info aligned,				/* for use with ACCEPT_INPUT interrupt */
  3    39     2 input_chain unaligned,
  3    40       3 chain_head bit (18) unaligned,
  3    41       3 chain_tail bit (18) unaligned,
  3    42     2 input_count fixed bin (18) unal uns,
  3    43     2 flags unaligned,
  3    44       3 break_char bit (1),				/* data contains a break character */
  3    45       3 output_in_fnp bit (1),			/* there is output in the FNP */
  3    46       3 output_in_ring_0 bit (1),			/* there is output in ring 0 */
  3    47       3 formfeed_present bit (1),			/* input contains a formfeed character */
  3    48       3 pad bit (14);
  3    49 
  3    50 dcl 1 timer_info aligned,				/* Info supplied with TIMER interrupt */
  3    51     2 id bit (36) aligned,				/* ID which was supplied in call to mcs_timer$set */
  3    52     2 subchan_idx fixed bin;				/* Index of subchannel on whose behalf timer was set */
  3    53 
  3    54 /* END INCLUDE FILE ... mcs_interrupt_info.incl.pl1 */
       84 
       85 
  4     1 /* BEGIN INCLUDE FILE ... tty_buf.incl.pl1 */
  4     2 
  4     3 /* Date Last Modified and Reason
  4     4*   Created 04/19/77 by J. Stern (from part of tty.incl.pl1)
  4     5*   Modified January 1978 by Robert Coren and Larry Johnson for variable-size buffers
  4     6*   Modified 2/6/78 by Robert Coren to make circular_queue size settable
  4     7*   Modified Aug 78 by J. Nicholls to move the buffer block format to a file of its own
  4     8*   and wtcb to its own plus other modification for ring 0 multiplexing, tty_buffer_block.incl.pl1
  4     9*   Modified 7/17/79 by B. Greenberg for echo negotiation meters.
  4    10*   Modified November 1979 by C. Hornig for MCS tracing.
  4    11*   Modified December 1979 by Robert Coren to add FNP channel lock meter
  4    12*   Modified February 1980 by Robert Coren to remove all references to circular buffer
  4    13*   Modified March 1980 by Robert Coren to reorganize metering information
  4    14*   Modified December 1980 by Robert Coren to add FNP-specific events
  4    15*   Modified 24 March 1982, W. Olin Sibert, to add mcs_timer support, recoverable_error_severity
  4    16*   Modified November 1984 by Robert Coren to add tty_area_lock
  4    17**/
  4    18 
  4    19 dcl  ttybp ptr,
  4    20      tty_buf$ ext static,				/* tty buffer segment */
  4    21      tty_ev fixed bin int static options (constant) init (57), /* event used for wait and notify */
  4    22      abs_buf_limit fixed bin (18) static options (constant) init (64), /* minimum number of words we will leave free */
  4    23      input_bpart fixed bin (18) static options (constant) init (2), /* fraction of bleft we will allow for input */
  4    24      output_bpart fixed bin (18) static options (constant) init (4); /* fraction of bleft we will allow for output */
  4    25 
  4    26 
  4    27 dcl  qblock_size fixed bin int static options (constant) init (16); /* size in words of a delay queue block */
  4    28 dcl  bsizec fixed bin int static options (constant) init (60); /* number of characters in smallest buffer */
  4    29 dcl  buf_per_second fixed bin int static options (constant) init (10); /* for figuring out max. buffer size based on speed */
  4    30 
  4    31 dcl  FNP_DUMP_PATCH_EVENT fixed bin int static options (constant) init (58);
  4    32 dcl  FNP_METER_EVENT fixed bin int static options (constant) init (59);
  4    33 dcl  TTY_AREA_LOCK_EVENT bit (36) aligned int static options (constant) init ("74"b3);
  4    34 
  4    35 dcl 1 tty_buf aligned based (ttybp),			/* declaration of tty buffer seg */
  4    36     2 slock bit (36),				/* per system lock */
  4    37     2 absorig fixed bin (24),				/* abs address of this seg */
  4    38     2 borig bit (18),				/* index of start of buffer area */
  4    39     2 bleft fixed bin (18),				/* words left in pool */
  4    40     2 free bit (18),				/* pointer to start of free pool */
  4    41     2 fnp_config_flags (8) bit (1) unal,		/* flag(i) ON if fnp(i) configured */
  4    42     2 padb1 bit (28) unaligned,
  4    43     2 lct_ptr ptr,					/* pointer to logical channel table */
  4    44 
  4    45     2 nrawread fixed bin (35),			/* number of raw chars input, total */
  4    46     2 nrawwrite fixed bin (35),			/* number of raw characters output */
  4    47     2 ninchars fixed bin (35),			/* total input chars after conversion */
  4    48     2 noutchars fixed bin (35),			/* total output chars before conversion */
  4    49     2 readblocked fixed bin (35),			/* number of times go input blocked */
  4    50     2 nblocked fixed bin (35),			/* number of times process output blocked */
  4    51     2 minbuf fixed bin (18),				/* min output buffer size */
  4    52     2 totbuf fixed bin (35),				/* divide by nblocked to get ave buffer size */
  4    53 
  4    54     2 preconverted fixed bin (35),			/* number of converted chars held in tty_buf */
  4    55     2 input_restart fixed bin,			/* number of times tty_read had to start over */
  4    56     2 output_restart fixed bin,			/* number of times tty_write has had to start over */
  4    57     2 output_buffer_overflow fixed bin,			/* number of times tty_write has run out of buffers */
  4    58     2 read_time fixed bin (71),			/* total time spent in tty_read */
  4    59     2 write_time fixed bin (71),			/* total time spent in tty_write */
  4    60 
  4    61     2 read_calls fixed bin (35),			/* number of calls to tty_read */
  4    62     2 write_calls fixed bin (35),			/* number of calls to tty_write */
  4    63     2 bfx fixed bin,				/* used in calls to iobm */
  4    64     2 nquits fixed bin (35),				/* number of quits */
  4    65     2 space_needed_data,
  4    66       3 space_needed bit (1) unal,			/* space_needed bit on in at least 1 lcte */
  4    67       3 space_needed_calls fixed bin (34) unal,		/* meter of uses of this facility */
  4    68     2 space_lock_count fixed bin (35),			/* count of times tty_buf.slock locked */
  4    69     2 space_lock_wait_count fixed bin (35),		/* count of times necessary to loop to lock it */
  4    70     2 space_lock_wait_time fixed bin (35),		/* total time looped trying to lock it */
  4    71 
  4    72     2 alloc_calls fixed bin (35),			/* total number of allocations performed in tty_buf */
  4    73     2 free_calls fixed bin (35),			/* total number of freeings in tty_buf */
  4    74     2 alloc_time fixed bin (35),			/* time spent masked in tty_space_man$get entries */
  4    75     2 free_time fixed bin (35),			/* time spent masked in tty_space_man$free entries */
  4    76     2 total_alloc_steps fixed bin (35),			/* number of steps thru free chain while doing above */
  4    77     2 alloc_failures fixed bin (35),			/* number of unsuccessful attempts to allocate space */
  4    78     2 cumulative_input_space fixed bin (71),		/* cumulative amount of space allocated for input */
  4    79 
  4    80     2 cumulative_output_space fixed bin (71),		/* cumulative amount of space allocated for output */
  4    81     2 cumulative_control_space fixed bin (71),		/* cumulative amount of space allocated by tty_space_man$get_space */
  4    82     2 input_space_updates fixed bin (35),		/* number of increments to cumulative_input_space */
  4    83     2 output_space_updates fixed bin (35),		/* number of increments to cumulative_output_space */
  4    84     2 control_space_updates fixed bin (35),		/* number of increments to cumulative_control_space */
  4    85     2 minimum_free_space fixed bin (18),		/* smallest amount of free space ever available */
  4    86 
  4    87     2 current_input_space fixed bin (18),		/* amount of space currently allocated for input */
  4    88     2 current_output_space fixed bin (18),		/* amount of space currently allocated for output */
  4    89     2 current_control_space fixed bin (18),		/* amount of space currently allocated by get_space */
  4    90     2 tty_lock_calls fixed bin (35),			/* number of calls to tty_lock$lock entries */
  4    91     2 found_channel_locked fixed bin (35),		/* number of times tty_lock found channel already locked */
  4    92     2 max_wait_time fixed bin (35),			/* longest time waited for any channel lock */
  4    93     2 total_wait_time fixed bin (71),			/* total amount of time spent waiting for channel locks */
  4    94 
  4    95     2 echo_neg_time fixed bin (71),			/* cumulative time spent doing echo negotiation */
  4    96     2 echo_neg_interrupts fixed bin (35),		/* Echo-negotiated shipments */
  4    97     2 echo_neg_r0_chars fixed bin (35),			/* Chars echoed by ring 0 */
  4    98     2 echo_neg_mux_chars fixed bin (35),		/* Chars echoed by mux */
  4    99     2 echo_neg_sndopt_restarts fixed bin (35),		/* Echo reinits */
  4   100     2 echo_neg_mux_nonecho fixed bin (35),
  4   101     2 echo_neg_entries fixed bin (35),			/* Entries into negotiate */
  4   102 
  4   103     2 echo_neg_mux_inhibit bit (1) aligned,		/* For testing */
  4   104     2 n_queued_interrupts fixed bin (35),		/* number of interrupts queued by tty_lock */
  4   105     2 trace unaligned,				/* tracing information */
  4   106       3 flags,
  4   107       4 enable bit,					/* global tracing control */
  4   108       4 default_mode bit,				/* whether to trace channels by default */
  4   109       4 read bit,					/* read */
  4   110       4 write bit,					/* write */
  4   111       4 data bit,					/* buffers on reads and writes */
  4   112       4 control bit,				/* control, priv_control, and hpriv_control */
  4   113       4 modes bit,					/* (get set check)_modes */
  4   114       4 interrupt bit,				/* interrupt, interrupt_later */
  4   115       4 init bit,					/* init_multiplexer, terminate_multiplexer */
  4   116       4 start bit,					/* start, stop */
  4   117       4 shutdown bit,				/* shutdown */
  4   118       4 space_man bit,				/* tty_space_man$* */
  4   119       4 pad_flags bit (6),
  4   120       3 data_offset bit (18),				/* offset of tracing data */
  4   121 
  4   122     2 recoverable_error_severity fixed bin,		/* Syserr severity for recoverable MCS errors */
  4   123 
  4   124     2 timer_lock bit (36) aligned,			/* Lock owned by mcs_timer */
  4   125     2 next_timer_offset bit (18) aligned,		/* Offset of next timer to come due */
  4   126     2 timer_count fixed bin,				/* Number of timers outstanding */
  4   127     2 timer_process bit (36) aligned,			/* Who is doing timers? */
  4   128 
  4   129     2 timer_ev_chn fixed bin (71),			/* How get get him */
  4   130     2 timer_lock_wait_time fixed bin (71),		/* CPU time spent spinning on timer lock */
  4   131 
  4   132     2 timer_lock_count fixed bin (35),			/* Number of times timer lock locked */
  4   133     2 timer_lock_wait_count fixed bin (35),		/* Number of times imer lock waited on */
  4   134     2 timer_call_time fixed bin (71),			/* CPU time spent in call side timer operations */
  4   135 
  4   136     2 timer_polling_time fixed bin (71),		/* CPU time spent polling (including channel_manager) */
  4   137     2 timer_set_calls fixed bin (35),			/* Number of calls to mcs_timer$set, set_wired */
  4   138     2 timer_reset_calls fixed bin (35), 		/* Number of calls to mcs_timer$reset, reset_wired */
  4   139 
  4   140     2 timer_change_calls fixed bin (35),		/* Number of calls to mcs_timer$change, change_wired */
  4   141     2 timer_poll_calls fixed bin (35),			/* Number of calls to mcs_timer$poll */
  4   142     2 timer_error_calls fixed bin (35), 		/* Number of mcs_timer calls ending with recoverable errors */
  4   143     2 timer_duplicate_pollings fixed bin (35),		/* Number of timer polling found in progress on other CPU */
  4   144 
  4   145     2 tty_area_lock like hc_fast_lock,			/* to prevent contention in allocating/freeing in tty_area */
  4   146 
  4   147     2 pad2 (13) fixed bin (35),
  4   148 
  4   149     2 free_space fixed bin;				/* start of free space region */
  4   150 
  4   151 
  5     1 /* BEGIN INCLUDE FILE...hc_fast_lock.incl.pl1 */
  5     2 
  5     3 /* Created November 1984 by Robert Coren to replace hc_lock.incl.pl1 */
  5     4 
  5     5 /* Lock format suitable for use with lock$lock_fast, unlock_fast */
  5     6 
  5     7 /* format: style3 */
  5     8 
  5     9 declare	lock_ptr		pointer;
  5    10 declare	1 hc_fast_lock	aligned based (lock_ptr),
  5    11 	  2 pid		bit (36) aligned,		/* holder of lock */
  5    12 	  2 event		bit (36) aligned,		/* event associated with lock */
  5    13 	  2 flags		aligned,
  5    14 	    3 notify_sw	bit (1) unaligned,
  5    15 	    3 pad		bit (35) unaligned;		/* certain locks use this pad, like dirs */
  5    16 
  5    17 /* END INCLUDE FILE...hc_fast_lock.incl.pl1 */
  4   152 
  4   153 
  4   154 /* END INCLUDE FILE ... tty_buf.incl.pl1 */
       86 
       87 
  6     1 /* BEGIN INCLUDE FILE ... lct.incl.pl1 */
  6     2 
  6     3 /* Created by J. Stern 7/26/78 */
  6     4 /* Metering information added by C. Hornig, March 1980. */
  6     5 /* Unwired saved meters added by Robert Coren, December 1980 */
  6     6 
  6     7 dcl  lctp ptr;					/* ptr to logical channel table */
  6     8 dcl  lctep ptr;					/* ptr to logical channel table entry */
  6     9 dcl  lct_size fixed bin;				/* size of lcte_array when allocated */
  6    10 
  6    11 dcl 1 lct aligned based (lctp),			/* logical channel table */
  6    12     2 max_no_lctes fixed bin,				/* maximum number of lct entries */
  6    13     2 cur_no_lctes fixed bin,				/* current number of lct entries used */
  6    14     2 lcnt_ptr ptr,					/* ptr to logical channel name table */
  6    15     2 queue_lock bit (36),				/* lock used to serialize queueing operations */
  6    16     2 pad (11) fixed bin,
  6    17     2 lcte_array (lct_size refer (lct.max_no_lctes)) like lcte; /* lct entries */
  6    18 
  6    19 
  6    20 dcl 1 lcte aligned based (lctep),			/* logical channel table entry */
  6    21     2 lock bit (36),				/* channel lock */
  6    22     2 data_base_ptr ptr unal,				/* ptr to channel data base */
  6    23     2 channel_type fixed bin (8) unal,			/* identifies channel manager program */
  6    24     2 flags unal,
  6    25       3 entry_in_use bit (1) unal,			/* ON if this entry in use */
  6    26       3 initialized bit (1) unal,			/* ON if this channel initialized */
  6    27       3 notify_reqd bit (1) unal,			/* ON if must notify when unlocking this channel */
  6    28       3 locked_for_interrupt bit (1) unal,		/* ON if lock set by interrupt handler */
  6    29       3 space_needed bit (1) unal,			/* ON if this channel needs buffer space */
  6    30       3 special_lock bit (1) unal,			/* ON if lock is managed by multiplexer */
  6    31       3 trace_force bit (1) unal,			/* ON to trace based on next bit only */
  6    32 						/* OFF to XOR next bit with tty_buf.default_tracing */
  6    33       3 trace bit (1) unal,				/* ON to trace this channel */
  6    34       3 unused bit (1) unal,
  6    35     2 physical_channel_devx fixed bin (17) unal,		/* devx of physical chan from which logical chan is derived */
  6    36     2 major_channel_info,
  6    37       3 major_channel_devx fixed bin unal,		/* major channel device index */
  6    38       3 subchannel fixed bin (17) unal,			/* subchannel id (or data ptr) wrt major channel */
  6    39     2 queue_entries,
  6    40       3 queue_head bit (18) unal,			/* ptr to first queue entry for this channel */
  6    41       3 queue_tail bit (18) unal,			/* ptr to last queue entry for this channel */
  6    42     2 word_counts,
  6    43       3 input_words fixed bin (17) unal,		/* number of input words charged to this channel */
  6    44       3 output_words fixed bin (17) unal,		/* number of output words charged to this channel */
  6    45 
  6    46     2 meters,
  6    47       3 in_bytes fixed bin (35),
  6    48       3 out_bytes fixed bin (35),
  6    49       3 in,
  6    50         4 calls fixed bin (35),
  6    51         4 interrupts fixed bin (35),
  6    52         4 call_time fixed bin (71),
  6    53         4 interrupt_time fixed bin (71),
  6    54       3 out like lcte.meters.in,
  6    55       3 control like lcte.meters.in,
  6    56     2 saved_meters_ptr ptr,				/* pointer to unwired copy of meters saved at last dialup */
  6    57 
  6    58     2 timer_offset bit (18) aligned,			/* Head of list of timers for this channel */
  6    59 
  6    60     2 pad (3) fixed bin (35);
  6    61 
  6    62 
  6    63 dcl  lcntp ptr;					/* ptr to logical channel name table */
  6    64 
  6    65 dcl 1 lcnt aligned based (lcntp),			/* logical channel name table */
  6    66     2 names (lct.max_no_lctes) char (32) unal;		/* channel names */
  6    67 
  6    68 dcl 1 saved_meters aligned based like lcte.meters;	/* meters saved at dialup, allocated in tty_area */
  6    69 
  6    70 
  6    71 /* END INCLUDE FILE ... lct.incl.pl1 */
       88 
       89 
  7     1 /* BEGIN INCLUDE FILE ... tty_buffer_block.incl.pl1 */
  7     2 
  7     3 
  7     4 
  7     5 /****^  HISTORY COMMENTS:
  7     6*  1) change(88-06-15,Berno), approve(88-07-13,MCR7928),
  7     7*     audit(88-06-15,Parisek), install(88-07-19,MR12.2-1061):
  7     8*     Add data needed for the uncp multiplexer (DSA gateway) interface
  7     9*     implementation.
  7    10*                                                   END HISTORY COMMENTS */
  7    11 
  7    12 
  7    13 /*
  7    14*   Separated from tty_buf.incl.pl1 aug 78 by J. Nicholls
  7    15*   Modified May 1979 by Larry Johnson to add max_buffer_tally array and to use unsigned variables.
  7    16*   Reported in February 1982 the modifications to add the "turn" bit in flags.
  7    17**/
  7    18 
  7    19 dcl  blockp ptr;					/* pointer which block entry is based on */
  7    20 dcl  free_blockp ptr;				/* pointer to head of free space chain */
  7    21 
  7    22 
  7    23 dcl 1 free_block aligned based (free_blockp),		/* format of start of free block */
  7    24     2 next bit (18),				/* foward pointer to next free block */
  7    25     2 size fixed bin;				/* number of words in this block */
  7    26 
  7    27 
  7    28 dcl 1 buffer based (blockp) aligned,			/* buffer definition */
  7    29     2 next fixed bin (18) unal uns,			/* addr of next buffer */
  7    30     2 flags unaligned,
  7    31       3 end_of_page bit (1) unaligned,			/* buffer contains end of page */
  7    32       3 converted bit (1) unaligned,			/* buffer contains converted input */
  7    33       3 break bit (1) unaligned,			/* buffer contains break character */
  7    34       3 mark bit (1) unaligned,			/* buffer contains first character after "mark" */
  7    35       3 turn bit (1) unaligned,			/* ON if the turn must be sent */
  7    36       3 pad bit (1) unaligned,
  7    37     2 size_code fixed bin (3) unal uns,			/* (nwords/16) - 1 */
  7    38     2 tally fixed bin (9) unal uns,			/* number of characters in buffer */
  7    39     2 chars (0:59) char (1) unaligned;			/* room for 60 data characters */
  7    40 
  7    41 /* the following array, if indexed by buffer.size_code will give maximum number of characters permitted in that buffer */
  7    42 
  7    43 dcl  max_buffer_tally (0:7) fixed bin int static options (constant) init (60, 124, 188, 252, 316, 380, 444, 508);
  7    44 
  7    45 /* END INCLUDE FILE ... tty_buffer_block.incl.pl1 */
       90 
       91 
       92      end lap_dump_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    08/08/88  1400.0  lap_dump_.pl1                     >special_ldd>install>MR12.2-1082>lap_dump_.pl1
80           1    08/08/88  1400.0  lap_simplex_data.incl.pl1         >special_ldd>install>MR12.2-1082>lap_simplex_data.incl.pl1
82           2    08/08/88  1400.0  lap_line_info.incl.pl1            >special_ldd>install>MR12.2-1082>lap_line_info.incl.pl1
84           3    10/20/82  0938.6  mcs_interrupt_info.incl.pl1       >ldd>include>mcs_interrupt_info.incl.pl1
86           4    01/06/85  1422.1  tty_buf.incl.pl1                  >ldd>include>tty_buf.incl.pl1
4-152        5    01/06/85  1422.1  hc_fast_lock.incl.pl1             >ldd>include>hc_fast_lock.incl.pl1
88           6    11/08/82  1005.8  lct.incl.pl1                      >ldd>include>lct.incl.pl1
90           7    07/21/88  2036.0  tty_buffer_block.incl.pl1         >ldd>include>tty_buffer_block.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
P_areap                                parameter       pointer                  dcl 65 set ref 11 42 49*
P_brief                                parameter       bit(1)                   dcl 68 ref 11 35
P_check_used                           parameter       entry variable           dcl 70 ref 42 56 60
P_devx                                 parameter       fixed bin(17,0)          dcl 69 ref 42 46
P_lap_data_ptr                         parameter       pointer                  dcl 66 ref 11 22
P_long                                 parameter       bit(1)                   dcl 71 ref 42 49
P_subchannel                           parameter       fixed bin(17,0)          dcl 67 ref 11
P_ttybp                                parameter       pointer                  dcl 64 set ref 11 35* 42 45 45 47 49* 54
activate_order           20            based           structure                level 2 dcl 1-16 ref 27 27
addr                                                   builtin function         dcl 78 ref 46
binary                                                 builtin function         dcl 78 ref 35 35 52 56
blockp                          000112 automatic       pointer                  dcl 7-19 set ref 54* 55 56* 56
buffer                                 based           structure                level 1 dcl 7-28
buffer_offset                   000100 automatic       fixed bin(18,0)          dcl 73 set ref 52* 53 53 54 55*
data_base_ptr             1            based           pointer                  level 2 packed packed unaligned dcl 6-20 ref 47
devx                     10            based           fixed bin(17,0)          level 2 dcl 1-16 set ref 24*
dialup_info              22            based           structure                level 2 in structure "lap_data" dcl 1-16
                                                                                  in procedure "lap_dump_" ref 28 28
dialup_info                     000104 automatic       structure                level 1 dcl 3-30 in procedure "lap_dump_"
flags                    13            based           structure                level 2 dcl 1-16
frame_ready              27            based           bit(1)                   level 2 dcl 1-16 set ref 33*
frame_size               30            based           fixed bin(17,0)          level 2 dcl 1-16 set ref 33*
frame_start              32            based           pointer                  level 2 dcl 1-16 set ref 30 32 33* 35 35 51 52
hc_fast_lock                           based           structure                level 1 dcl 5-10
in                        2            based           structure                level 2 in structure "saved_meters" dcl 6-68
                                                                                  in procedure "lap_dump_"
in                       30            based           structure                array level 4 in structure "lct" dcl 6-11
                                                                                  in procedure "lap_dump_"
in                       10            based           structure                level 3 in structure "lcte" dcl 6-20 in procedure
                                                                                  "lap_dump_"
ioa_                            000010 constant        entry                    external dcl 75 ref 24 25 27 28 29 30 33 38
lap_data                               based           structure                level 1 dcl 1-16 set ref 60 60
lap_data_ptr                    000102 automatic       pointer                  dcl 1-14 set ref 22* 24 24 24 25 25 25 27 27 28 28
                                                                                  29 29 30 30 32 33 33 33 35 35 47* 49* 51 52 60* 60
                                                                                  60
lap_line_control_info                  based           structure                level 1 dcl 2-19
lct                                    based           structure                level 1 dcl 6-11
lct_ptr                   6            based           pointer                  level 2 dcl 4-35 ref 45
lcte                                   based           structure                level 1 dcl 6-20
lcte_array               20            based           structure                array level 2 dcl 6-11 set ref 46
lctep                           000110 automatic       pointer                  dcl 6-8 set ref 46* 47
lctp                            000106 automatic       pointer                  dcl 6-7 set ref 45* 46
max_frame_size           26            based           fixed bin(17,0)          level 2 dcl 1-16 set ref 30*
meters                   26            based           structure                array level 3 in structure "lct" dcl 6-11
                                                                                  in procedure "lap_dump_"
meters                    6            based           structure                level 2 in structure "lcte" dcl 6-20 in procedure
                                                                                  "lap_dump_"
name                                   based           char(32)                 level 2 packed packed unaligned dcl 1-16 set ref 24*
next                                   based           fixed bin(18,0)          level 2 packed packed unsigned unaligned dcl 7-28
                                                                                  ref 55
null                                                   builtin function         dcl 78 ref 30 32 51
pointer                                                builtin function         dcl 78 ref 45 47 54
rel                                                    builtin function         dcl 78 ref 35 35 45 47 52
sc_dialup_info           24            based           structure                level 2 dcl 1-16 ref 29 29
send_output              13            based           bit(1)                   level 3 packed packed unaligned dcl 1-16 set ref 25*
simplex_started          13(01)        based           bit(1)                   level 3 packed packed unaligned dcl 1-16 set ref 25*
size                                                   builtin function         dcl 78 ref 60 60
size_code                 0(24)        based           fixed bin(3,0)           level 2 packed packed unsigned unaligned dcl 7-28
                                                                                  ref 56
state                    12            based           fixed bin(17,0)          level 2 dcl 1-16 ref 25
subchannel               11            based           fixed bin(17,0)          level 2 dcl 1-16 set ref 24*
tty_buf                                based           structure                level 1 dcl 4-35
tty_dump$print_chain            000012 constant        entry                    external dcl 76 ref 35
unspec                                                 builtin function         dcl 78 ref 27 27 28 28 29 29

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
ACCEPT_INPUT                           internal static fixed bin(17,0)          initial dcl 3-15
ACKNOWLEDGE_ECHNEGO_INIT               internal static fixed bin(17,0)          initial dcl 3-22
ACKNOWLEDGE_ECHNEGO_STOP               internal static fixed bin(17,0)          initial dcl 3-23
ACTIVATE_COMMAND                       internal static bit(9)                   initial packed unaligned dcl 2-33
CRASH                                  internal static fixed bin(17,0)          initial dcl 3-12
DEACTIVATE_COMMAND                     internal static bit(9)                   initial packed unaligned dcl 2-34
DIALUP                                 internal static fixed bin(17,0)          initial dcl 3-10
DIAL_STATUS                            internal static fixed bin(17,0)          initial dcl 3-19
DISCONNECT_COMMAND                     internal static bit(9)                   initial packed unaligned dcl 2-35
FNP_DUMP_PATCH_EVENT                   internal static fixed bin(17,0)          initial dcl 4-31
FNP_METER_EVENT                        internal static fixed bin(17,0)          initial dcl 4-32
FRAME_FUNCTION_CODE                    internal static char(32)                 initial array packed unaligned dcl 2-60
FRAME_STATE_ARRAY                      internal static char(32)                 initial array packed unaligned dcl 2-50
FRAME_SUB_STATE_ARRAY                  internal static char(32)                 initial array packed unaligned dcl 2-53
HANGUP                                 internal static fixed bin(17,0)          initial dcl 3-11
INPUT_AVAILABLE                        internal static fixed bin(17,0)          initial dcl 3-14
INPUT_REJECTED                         internal static fixed bin(17,0)          initial dcl 3-16
L2_HEADER_PAD                          internal static fixed bin(17,0)          initial dcl 2-15
LAP_ACTIVE                             internal static fixed bin(17,0)          initial dcl 1-38
LAP_HUNGUP                             internal static fixed bin(17,0)          initial dcl 1-36
LAP_LISTENING                          internal static fixed bin(17,0)          initial dcl 1-37
LAP_LOAD_INFO_VERSION_1                internal static char(8)                  initial packed unaligned dcl 1-46
LINE_DOWN_STATUS                       internal static fixed bin(18,0)          initial unsigned dcl 2-48
LINE_STATUS                            internal static fixed bin(17,0)          initial dcl 3-18
MASKED                                 internal static fixed bin(17,0)          initial dcl 3-26
QUIT                                   internal static fixed bin(17,0)          initial dcl 3-17
SEND_OUTPUT                            internal static fixed bin(17,0)          initial dcl 3-13
SPACE_AVAILABLE                        internal static fixed bin(17,0)          initial dcl 3-21
TIMER                                  internal static fixed bin(17,0)          initial dcl 3-24
TTY_AREA_LOCK_EVENT                    internal static bit(36)                  initial dcl 4-33
USER_INTERRUPT                         internal static fixed bin(17,0)          initial dcl 3-25
WRU_TIMEOUT                            internal static fixed bin(17,0)          initial dcl 3-20
abs_buf_limit                          internal static fixed bin(18,0)          initial dcl 4-19
bsizec                                 internal static fixed bin(17,0)          initial dcl 4-28
buf_per_second                         internal static fixed bin(17,0)          initial dcl 4-29
free_block                             based           structure                level 1 dcl 7-23
free_blockp                            automatic       pointer                  dcl 7-20
input_bpart                            internal static fixed bin(18,0)          initial dcl 4-19
interrupt_info                         automatic       bit(72)                  dcl 3-28
lap_line_control_info_ptr              automatic       pointer                  dcl 2-17
lap_line_status_info                   based           structure                level 1 dcl 2-39
lap_line_status_info_ptr               automatic       pointer                  dcl 2-37
lap_load_info                          based           structure                level 1 dcl 1-40
lap_load_info_ptr                      automatic       pointer                  dcl 1-13
lcnt                                   based           structure                level 1 dcl 6-65
lcntp                                  automatic       pointer                  dcl 6-63
lct_size                               automatic       fixed bin(17,0)          dcl 6-9
lock_ptr                               automatic       pointer                  dcl 5-9
max_buffer_tally                       internal static fixed bin(17,0)          initial array dcl 7-43
output_bpart                           internal static fixed bin(18,0)          initial dcl 4-19
qblock_size                            internal static fixed bin(17,0)          initial dcl 4-27
rtx_info                               automatic       structure                level 1 dcl 3-38
saved_meters                           based           structure                level 1 dcl 6-68
timer_info                             automatic       structure                level 1 dcl 3-50
tty_buf$                               external static fixed bin(17,0)          dcl 4-19
tty_ev                                 internal static fixed bin(17,0)          initial dcl 4-19
ttybp                                  automatic       pointer                  dcl 4-19

NAMES DECLARED BY EXPLICIT CONTEXT.
lap_analyze_                    000505 constant        entry                    external dcl 42
lap_dump_                       000141 constant        entry                    external dcl 11 ref 49

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       706         722     635         716
Length      1244     635        14         305      51           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
lap_dump_                           129 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
lap_dump_                000100 buffer_offset               lap_dump_
                         000102 lap_data_ptr                lap_dump_
                         000104 dialup_info                 lap_dump_
                         000106 lctp                        lap_dump_
                         000110 lctep                       lap_dump_
                         000112 blockp                      lap_dump_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_e_as              call_ent_var        call_ext_in         call_ext_out_desc   return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
ioa_                          tty_dump$print_chain

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000134        22 000146        24 000152        25 000200        27 000235        28 000264        29 000313
     30 000342        32 000374        33 000401        35 000431        38 000466        40 000477        42 000500
     45 000512        46 000521        47 000525        49 000531        51 000555        52 000562        53 000565
     54 000572        55 000577        56 000602        57 000620        60 000621        62 000634


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
