	COMPILATION LISTING OF SEGMENT spg_ring_0_info_
	Compiled by: Multics PL/I Compiler, Release 28d, of October 4, 1983
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 06/04/84  1301.8 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 /* Procedure to return the virtual cpu time spent in the
        7*   main gates into ring zero */
        8 
        9 /* Last Modified: (Date and Reason)
       10*   09/22/76	Noel I. Morris to use new get_gate_data_
       11*   07/09/75	Steve Webber to work with combined linkage segments for gates
       12*   10/27/73	Steve Webber to take into account call limiter type gates.
       13*   */
       14 
       15 
       16 /* ******************************************************
       17*   *                                                    *
       18*   *                                                    *
       19*   * Copyright (c) 1972 by Massachusetts Institute of   *
       20*   * Technology and Honeywell Information Systems, Inc. *
       21*   *                                                    *
       22*   *                                                    *
       23*   ****************************************************** */
       24 
       25 
       26 spg_ring_0_info_: proc (time);
       27 
       28 /* Parameters */
       29 
       30 dcl  time fixed bin (52);
       31 
       32 /* Automatic */
       33 
       34 dcl  code fixed bin (35);				/* error code */
       35 dcl  i fixed bin;					/* gate index */
       36 dcl  j fixed bin;					/* entry index */
       37 dcl  nentries fixed bin;				/* number of gate entries */
       38 
       39 dcl 1 table (512) like gate_table aligned;		/* table of gate information */
       40 
       41 /* Static */
       42 
       43 dcl  tempp ptr static init (null ());
       44 dcl  gate_name (6) char (32) static options (constant) init (
       45 	"hcs_",
       46 	"hphcs_",
       47 	"ioi_",
       48 	"netp_",
       49 	"net_",
       50 	"phcs_");
       51 
       52 /* Based */
       53 
       54 dcl 1 info based aligned,				/* metering info in gate */
       55     2 cpu_time fixed bin (52),			/* CPU time spent in gate entry */
       56     2 vcpu_time fixed bin (52),			/* virtual CPU time spent in gate entry */
       57     2 page_waits fixed bin,				/* number of page waits in gate entry */
       58     2 calls fixed bin;				/* number of calls to gate entry */
       59 
       60 /* Entries */
       61 
       62 dcl  get_gate_data_ entry (char (*), 1 dim (*) like gate_table aligned, fixed bin,
       63 	ptr, bit (1) aligned, fixed bin (35)),
       64      hcs_$make_seg entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
       65 
       66 
       67 dcl (hbound, null) builtin;
       68 
       69 
       70 
  1     1 
  1     2 /* Begin include file ...... gate_data.incl.pl1
  1     3*	Created 10/13/76 by Noel I. Morris	*/
  1     4 /* Modified 831107 for ring_alarms, Benson Margulies. */
  1     5 /* format: style3 */
  1     6 
  1     7 dcl	1 gate_table	aligned based,		/* gate information table */
  1     8 	  2 entryp	ptr unal,			/* pointer to entry name */
  1     9 	  2 entryl	fixed bin,		/* length of entry name */
  1    10 	  2 datap		ptr unal;			/* pointer to gate metering data */
  1    11 
  1    12 dcl	gate_datap	ptr;
  1    13 
  1    14 dcl	1 gate_entry_data	based (gate_datap) aligned,	/* gate data in gate segment */
  1    15 	  2 cpu_time	fixed bin (71),		/* total CPU time spent in entry (us) */
  1    16 	  2 vcpu_time	fixed bin (71),		/* virtual CPU time spent in entry (us) */
  1    17 	  2 page_waits	fixed bin (35),		/* number of page waits in entry */
  1    18 	  2 calls		fixed bin (35),		/* number of calls to entry */
  1    19 	  2 ring_alarms	fixed bin (35),		/* number of times RAR was nonzero on exit. */
  1    20 	  2 pad		fixed bin (35);		/* for future use */
  1    21 
  1    22 /* End of include file ...... gate_data.incl.pl1 */
  1    23 
       71 
       72 
       73 
       74 
       75 	time = 0;					/* start out with no time spent */
       76 
       77 	if tempp = null () then do;
       78 	     call hcs_$make_seg ("", "spg_ring_0_info_.temp", "", 01010b, tempp, code);
       79 	     if code ^= 0 then return;
       80 	end;
       81 
       82 	do i = 1 to hbound (gate_name, 1);
       83 	     call get_gate_data_ (gate_name (i), table, nentries, tempp, "1"b, code);
       84 	     if code = 0 then do j = 1 to nentries;
       85 		time = time + table (j).datap -> gate_entry_data.vcpu_time;
       86 	     end;
       87 	end;
       88 
       89 	return;
       90 
       91 
       92      end;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    06/04/84  1242.7  spg_ring_0_info_.pl1              >spec>temp>bce>on>spg_ring_0_info_.pl1
71           1    06/01/84  1103.2  gate_data.incl.pl1                >spec>temp>bce>on>gate_data.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
code                            000100 automatic       fixed bin(35,0)          dcl 34 set ref 78* 79 83* 84
datap                     2     000104 automatic       pointer                  array level 2 packed unaligned dcl 39 set ref 85
gate_entry_data                        based           structure                level 1 dcl 1-14
gate_name                       000000 constant        char(32)                 initial array unaligned dcl 44 set ref 82 83*
gate_table                             based           structure                level 1 dcl 1-7
get_gate_data_                  000012 constant        entry                    external dcl 62 ref 83
hbound                                                 builtin function         dcl 67 ref 82
hcs_$make_seg                   000014 constant        entry                    external dcl 62 ref 78
i                               000101 automatic       fixed bin(17,0)          dcl 35 set ref 82* 83*
j                               000102 automatic       fixed bin(17,0)          dcl 36 set ref 84* 85*
nentries                        000103 automatic       fixed bin(17,0)          dcl 37 set ref 83* 84
null                                                   builtin function         dcl 67 ref 77
table                           000104 automatic       structure                array level 1 dcl 39 set ref 83*
tempp                           000010 internal static pointer                  initial dcl 43 set ref 77 78* 83*
time                                   parameter       fixed bin(52,0)          dcl 30 set ref 26 75* 85* 85
vcpu_time                 2            based           fixed bin(71,0)          level 2 dcl 1-14 ref 85

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
gate_datap                             automatic       pointer                  dcl 1-12
info                                   based           structure                level 1 dcl 54

NAME DECLARED BY EXPLICIT CONTEXT.
spg_ring_0_info_                000127 constant        entry                    external dcl 26

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       350         366     302         360
Length       552     302        16         150      45           2

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
spg_ring_0_info_                   1640 external procedure  is an external procedure.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 tempp                       spg_ring_0_info_

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
spg_ring_0_info_         000100 code                        spg_ring_0_info_
                         000101 i                           spg_ring_0_info_
                         000102 j                           spg_ring_0_info_
                         000103 nentries                    spg_ring_0_info_
                         000104 table                       spg_ring_0_info_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   return              ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
get_gate_data_                hcs_$make_seg

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     26 000124        75 000134        77 000137        78 000143        79 000206        82 000210        83 000215
     84 000255        85 000267        86 000275        87 000277        89 000301


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
