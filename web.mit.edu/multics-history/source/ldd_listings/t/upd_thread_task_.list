	COMPILATION LISTING OF SEGMENT upd_thread_task_
	Compiled by: Multics PL/I Compiler, Release 27d, of October 11, 1982
	Compiled at: Honeywell LISD Phoenix, System M
	Compiled on: 11/15/82  1724.9 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 upd_thread_task_:	procedure (listp, taskp);
       12 
       13 
       14 /*
       15*
       16*	This procedure is used within the Multics Online Updater to insert
       17*	updater tasks into the task list.  Tasks are ordered by task sequence
       18*	number, which is argument 7 to all updater tasks.  This procedure is
       19*	restartable; if the task to be inserted is found to be already in the
       20*	task list, the call is ignored, otherwise insertion is completed at
       21*	the same place in the list.
       22*
       23*	P. Bos, June 1972
       24*
       25**/
       26 
       27 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
       28 
       29 
       30      dcl	listp			ptr,		/* pointer to first task in list */
       31 	taskp			ptr;		/* pointer to task to be inserted */
       32 
       33      dcl (addr, null)		builtin;
       34 
       35      dcl (p, q, r)			ptr;		/* previous, current, next tasks during insertion */
       36 
       37      dcl	seqno			fixed bin based;	/* used to access seqno argument via arglist */
       38 
       39      dcl	1 task			aligned based,	/* task element */
       40 	  2 nextp			ptr,		/* pointer to following task */
       41 	  2 backp			ptr,		/* pointer to previous task */
       42 	  2 procp			ptr,		/* procedure pointer */
       43 	  2 arglist,				/* argument list */
       44 	    3 hdr			bit(72),		/* argument count, etc. */
       45 	    3 p (100)		ptr;		/* arg pointer array */
       46 
       47 /**/
       48 
       49 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
       50 
       51 
       52 	p = addr (listp);				/* fudge: use listp as task.nextp */
       53 	r = listp;				/* window points ahead of first task */
       54 	q = taskp;				/* simplify accessing */
       55 	do while (r ^= null);			/* search task list for place to put him */
       56 	     if q = r then				/* already in list, must have been interrupted */
       57 		return;				/* just exit */
       58 	     if r -> task.arglist.p(7) -> seqno > q -> task.arglist.p(7) -> seqno then do;
       59 append:		q -> task.nextp = r;		/* set pointer to next task */
       60 		p -> task.nextp = q;		/* and make final connection */
       61 		return;				/* done, exit */
       62 		end;
       63 	     p = r;				/* advance window */
       64 	     r = p -> task.nextp;
       65 	     end;
       66 	go to append;				/* ran off end, append task there */
       67 
       68 
       69 	end upd_thread_task_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/15/82  1515.2  upd_thread_task_.pl1              >dumps>old>recomp>upd_thread_task_.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
addr                                                   builtin function         dcl 33 ref 52
arglist                   6            based           structure                level 2 dcl 39
listp                                  parameter       pointer                  dcl 30 set ref 11 52 53
nextp                                  based           pointer                  level 2 dcl 39 set ref 59* 60* 64
null                                                   builtin function         dcl 33 ref 55
p                               000100 automatic       pointer                  dcl 35 in procedure "upd_thread_task_" set ref 52*
                                                                                  60 63* 64
p                        10            based           pointer                  array level 3 in structure "task" dcl 39
                                                                                  in procedure "upd_thread_task_" ref 58 58
q                               000102 automatic       pointer                  dcl 35 set ref 54* 56 58 59 60
r                               000104 automatic       pointer                  dcl 35 set ref 53* 55 56 58 59 63 64*
seqno                                  based           fixed bin(17,0)          dcl 37 ref 58 58
task                                   based           structure                level 1 dcl 39
taskp                                  parameter       pointer                  dcl 30 ref 11 54

NAMES DECLARED BY EXPLICIT CONTEXT.
append                          000043 constant        label                    dcl 59 ref 66
upd_thread_task_                000010 constant        entry                    external dcl 11

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       104         114      56         114
Length       256      56        10         125      26           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
upd_thread_task_                     70 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
upd_thread_task_         000100 p                           upd_thread_task_
                         000102 q                           upd_thread_task_
                         000104 r                           upd_thread_task_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
return              ext_entry

NO EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000004        52 000015        53 000020        54 000023        55 000026        56 000032        58 000036
     59 000043        60 000045        61 000047        63 000050        64 000051        65 000054        66 000055


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
