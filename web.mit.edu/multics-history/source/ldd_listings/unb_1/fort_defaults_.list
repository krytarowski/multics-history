	COMPILATION LISTING OF SEGMENT fort_defaults_
	Compiled by: Multics PL/I Compiler, Release 29, of July 28, 1986
	Compiled at: Honeywell Bull, Phx. Az., Sys-M 
	Compiled on: 08/06/87  1112.8 mst Thu
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Bull Inc., 1987                *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1987 *
        6*        *                                                         *
        7*        * Copyright, (C) Honeywell Limited, 1983                  *
        8*        *                                                         *
        9*        *********************************************************** */
       10 
       11 
       12 
       13 /****^  HISTORY COMMENTS:
       14*  1) change(86-07-14,BWong), approve(86-07-14,MCR7286), audit(86-07-17,Ginter),
       15*     install(86-07-28,MR12.0-1105):
       16*     Fix fortran bug 468.
       17*  2) change(86-07-14,BWong), approve(86-07-14,MCR7382), audit(86-07-17,Ginter),
       18*     install(86-07-28,MR12.0-1105):
       19*     Fix fortran bugs 473, 478, and 480.
       20*  3) change(87-06-23,RWaters), approve(87-06-23,MCR7703), audit(87-07-10,Huen),
       21*     install(87-08-06,MR12.1-1069):
       22*     Implemented SCR 6315: Added a fortran runtime error-handler argument.
       23*                                                   END HISTORY COMMENTS */
       24 
       25 
       26 /* format: style3,^delnl,linecom */
       27 fort_defaults_:
       28      proc;
       29 
       30 /* Created:	June 1983, Michael Mabey
       31*
       32*   Modified:
       33*          12 May 87, RW SCP 6315 added control args -debug_io (-dbio)
       34*                    and -no_debug_io (-ndbio)
       35*	19 Feb 86, BW & AG - 473.a: Fix vla_auto, vla_static,
       36*		very_large_common, la_auto, and la_static control
       37*		arguments so they work in the following manner:
       38*		 o vla => vla_auto, vla_static, vlc, la_auto, la_static
       39*		   and vla_parm (unless no_vla_parm is specified)
       40*		 o la => la_auto, la_static
       41*		 o vla_auto | vla_static | vlc => vla_parm (unless 
       42*		   no_vla_parm is specified)
       43*		 o nvla disables all vla type arguments (except vla_parm
       44*		   when vla_parm is specified) and leaves on all la type
       45*		   arguments that are directly set.
       46*		 o nla disables all la type arguments
       47*		 o vla_auto => la_auto
       48*		 o vla_static => la_static
       49*		Move code to set maximum array sizes from
       50*		fort_defaults_$check_global_args to ext_parse so the
       51*		values are set properly.
       52*	11 Dec 85, BW - 480: Check for full_optimize before setting
       53*		subscriptrange, stringrange, and check_multiply in ansi77.
       54*          27 Nov 85, SH - 478: Allows "-severity N" as well as "-severityN"
       55*	09 Oct 85, BW - 473: Add vla_auto, vla_static, very_large_common,
       56*		la_auto, and la_static control arguments.  This causes
       57*		the following implications:
       58*		 o vla => vla_auto, vla_parm, vla_static, vlc,
       59*			la_auto, la_static
       60*		 o la => la_auto, la_static
       61*		 o vla_auto | vla_static | vlc => vla_parm
       62*		 o nvla disables all vla type arguments that are set but
       63*		   leaves on all la type arguments that are set.
       64*		   Thus -vla -nvla (in this order only) => -la
       65*		 o nla disables all la type arguments that are set
       66*		 o whenever vla_auto is set, la_auto must be set
       67*		 o whenever vla_static is set, la_static must be set
       68*	12 Sept 85, BW - 468: Indicate use of "-no_auto_zero" in listing
       69*		header.
       70*	05 Oct 84, MM - hfp_acs: To check if a user has access to use
       71*		HFP mode, add a dummy call to a fort_hfp_math routine
       72*		if the "hfp" user option is specified.
       73*          03 Aug 84, BW - 434: Allow option names of up to 32 characters.
       74*	28 Mar 84, MM - Install HFP support.
       75*	24 Oct 83, MM - 409: Prevent -nstrg and -nsubrg from giving an
       76*		"incompatible args" error message when used with -optimize
       77*	19 Sept 83, MM - 403: Fix defaulting to table if brief_table is
       78*		specified.
       79**/
       80 
       81 /* format: off */
       82 
       83 /* Although the length of "names" is 33 in the following structure, the
       84*   individual option names must never exceed 32 characters. */
       85 
       86 dcl   cmd2_string_ptr	ptr;
       87 dcl   cmd2_string_len	fixed bin(21);
       88 dcl   code		fixed bin(35);
       89 
       90 dcl  	01 cmd_names aligned static options (constant),
       91 	   02 space char(1) unaligned init(" "),
       92 	   02 names (111) char(33) unaligned init(
       93 	"ansi66",					/* 1 */
       94 	"ansi77",					/* 2 */
       95 	"auto",					/* 3 */
       96 	"auto_zero",				/* 4 */
       97 	"binary_floating_point", "bfp",		/* 5, 6 */
       98 	"brief", "bf",				/* 7, 8 */
       99 	"brief_table", "bftb",			/* 9, 10 */
      100 	"card",					/* 11 */
      101 	"check", "ck",				/* 12, 13 */
      102 	"check_multiply", "ckmpy",			/* 14, 15 */
      103 	"consolidate", "cons",			/* 16, 17 */
      104 	"debug", "db",				/* 18, 19 */
      105 	"debug_cg",				/* 20 */
      106           "debug_io", "dbio",                               /* 21, 22 */
      107 	"default_full", "dff",			/* 23, 24 */
      108 	"default_safe", "dfs",			/* 25, 26*/
      109 	"fold",					/* 27 */
      110 	"free",					/* 28 */
      111 	"full_optimize", "full_ot",			/* 29, 30 */
      112 	"hexadecimal_floating_point", "hfp",		/* 31, 32 */
      113 	"la_auto",				/* 33 */
      114 	"la_static",				/* 34 */
      115 	"large_array", "la",			/* 35, 36 */
      116 	"line_numbers", "ln",			/* 37, 38 */
      117 	"list", "ls",				/* 39, 40 */
      118 	"long", "lg",				/* 41, 42 */
      119 	"long_profile", "lpf",			/* 43, 44 */
      120 	"map",					/* 45 */
      121 	"nlno",					/* 46 */
      122 	"no_auto_zero",				/* 47 */
      123 	"no_check", "nck",				/* 48, 49 */
      124 	"no_check_multiply", "nckmpy",		/* 50, 51 */
      125           "no_debug_io", "ndbio",                           /* 52, 53 */
      126 	"no_fold",				/* 54 */
      127 	"no_large_array", "nla",			/* 55, 56 */
      128 	"no_line_numbers", "nln",			/* 57, 58 */
      129 	"no_map",					/* 59 */
      130 	"no_optimize", "not",			/* 60, 61 */
      131 	"no_stringrange", "nstrg", "nostrg",		/* 62, 63, 64 */
      132 	"no_subscriptrange", "nsubrg", "nosubrg",	/* 65, 66, 67 */
      133 	"no_table", "ntb",				/* 68, 69 */
      134 	"no_version",				/* 70 */
      135 	"no_very_large_array", "nvla",		/* 71, 72 */
      136 	"no_vla_parm",				/* 73 */
      137 	"non_relocatable", "nrlc",			/* 74, 75 */
      138 	"optimize", "ot",				/* 76, 77 */
      139 	"profile", "pf",				/* 78 79 */
      140 	"relocatable", "rlc",			/* 80, 81 */
      141 	"round",					/* 82 */
      142 	"safe",					/* 83 */
      143 	"safe_optimize", "safe_ot",			/* 84, 85 */
      144 	"source", "sc",				/* 86, 87 */
      145 	"static",					/* 88 */
      146 	"stringrange", "strg",			/* 89, 90 */
      147 	"subscriptrange", "subrg",			/* 91, 92 */
      148 	"super",					/* 93 */
      149 	"symbols", "sb",				/* 94, 95 */
      150 	"table", "tb",				/* 96, 97 */
      151 	"time", "tm",				/* 98, 99 */
      152 	"time_ot",				/* 100 */
      153 	"top_down",				/* 101 */
      154 	"truncate", "tc",				/* 102, 103 */
      155 	"version",				/* 104 */
      156 	"very_large_array", "vla",			/* 105, 106 */
      157 	"very_large_common", "vlc",			/* 107, 108 */
      158 	"vla_auto",				/* 109 */
      159 	"vla_parm",				/* 110 */
      160 	"vla_static");				/* 111 */
      161 /* format: on */
      162 
      163 /* parameters */
      164 
      165 dcl	arg_error		aligned bit (1);
      166 dcl	arg_fd_ptr	ptr;
      167 dcl	arg_num		fixed bin;
      168 dcl	arg_list_ptr	ptr;
      169 dcl	auto_option	bit (1) aligned;
      170 dcl	cmd_string_len	fixed bin;
      171 dcl	cmd_string_ptr	ptr;
      172 dcl	fd_ptr		ptr;
      173 dcl	fixed_24		fixed bin (24);
      174 dcl	fo_ptr		ptr;
      175 dcl	fort_op_ptr	ptr;
      176 dcl	global_fd_ptr	ptr;
      177 dcl	global_fo_ptr	ptr;
      178 dcl	op_string		char (256) varying;
      179 dcl	print_message	entry variable options (variable);
      180 dcl	01 shared_vars	aligned like fort_shared_variables based (shared_var_ptr);
      181 dcl	shared_var_ptr	ptr;
      182 dcl	static_option	bit (1) aligned;
      183 dcl	VLA_words_per_seg	fixed bin (19);
      184 
      185 /* automatic */
      186 
      187 dcl	01 arg_fd		based (arg_fd_ptr) like fortran_declared;
      188 dcl	cmd		fixed bin;
      189 dcl	cmd_string	based (cmd_string_ptr) char (cmd_string_len);
      190 dcl	cmd2_string	based (cmd2_string_ptr) char (cmd2_string_len);
      191 dcl	dummy_var		bit (72);
      192 dcl	01 fd		based (fd_ptr) like fortran_declared;
      193 dcl	01 fo		based (fo_ptr) like fortran_options;
      194 dcl	01 fort_op	structure based (fort_op_ptr),
      195 	  02 user_options	aligned like fortran_options,
      196 	  02 system_options aligned,
      197 	    03 is_fast	bit (1) unaligned,
      198 	    03 not_needed	bit (2) unaligned,
      199 	    03 VLA_is_256K	bit (1) unaligned,
      200 	    03 pad	bit (32) unaligned;
      201 dcl	01 global_fd	based (global_fd_ptr) like fortran_declared;
      202 dcl	01 global_fo	based (global_fo_ptr) like fortran_options;
      203 dcl	i		fixed bin;
      204 
      205 /* builtins */
      206 
      207 dcl	(convert, ltrim, substr)
      208 			builtin;
      209 dcl	cannot_enable_HFP_mode
      210 			condition;
      211 
      212 /* external */
      213 
      214 dcl	com_err_		entry options (variable);
      215 dcl	error_table_$badopt fixed bin (35) ext static;
      216 dcl	fort_bfp_math$conv_r_to_i_round
      217 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      218 dcl	fort_bfp_math$conv_dp_to_i_round
      219 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      220 dcl	fort_bfp_math$conv_cp_to_i_round
      221 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      222 dcl	fort_bfp_math$conv_i_to_r_round
      223 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      224 dcl	fort_bfp_math$conv_dp_to_r_round
      225 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      226 dcl	fort_bfp_math$conv_cp_to_r_round
      227 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      228 dcl	fort_bfp_math$conv_i_to_dp_round
      229 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      230 dcl	fort_bfp_math$conv_r_to_dp_round
      231 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      232 dcl	fort_bfp_math$conv_cp_to_dp_round
      233 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      234 dcl	fort_bfp_math$conv_i_to_cp_round
      235 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      236 dcl	fort_bfp_math$conv_r_to_cp_round
      237 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      238 dcl	fort_bfp_math$conv_dp_to_cp_round
      239 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      240 dcl	fort_bfp_math$conv_r_to_i_trunc
      241 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      242 dcl	fort_bfp_math$conv_dp_to_i_trunc
      243 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      244 dcl	fort_bfp_math$conv_cp_to_i_trunc
      245 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      246 dcl	fort_bfp_math$conv_i_to_r_trunc
      247 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      248 dcl	fort_bfp_math$conv_dp_to_r_trunc
      249 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      250 dcl	fort_bfp_math$conv_cp_to_r_trunc
      251 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      252 dcl	fort_bfp_math$conv_i_to_dp_trunc
      253 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      254 dcl	fort_bfp_math$conv_r_to_dp_trunc
      255 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      256 dcl	fort_bfp_math$conv_cp_to_dp_trunc
      257 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      258 dcl	fort_bfp_math$conv_i_to_cp_trunc
      259 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      260 dcl	fort_bfp_math$conv_r_to_cp_trunc
      261 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      262 dcl	fort_bfp_math$conv_dp_to_cp_trunc
      263 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      264 
      265 dcl	fort_bfp_math$binop_i_i_round
      266 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      267 dcl	fort_bfp_math$binop_r_i_round
      268 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      269 dcl	fort_bfp_math$binop_r_r_round
      270 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      271 dcl	fort_bfp_math$binop_i_r_round
      272 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      273 dcl	fort_bfp_math$binop_dp_i_round
      274 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      275 dcl	fort_bfp_math$binop_dp_r_round
      276 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      277 dcl	fort_bfp_math$binop_dp_dp_round
      278 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      279 dcl	fort_bfp_math$binop_r_dp_round
      280 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      281 dcl	fort_bfp_math$binop_i_dp_round
      282 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      283 dcl	fort_bfp_math$binop_cp_i_round
      284 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      285 dcl	fort_bfp_math$binop_cp_r_round
      286 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      287 dcl	fort_bfp_math$binop_cp_dp_round
      288 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      289 dcl	fort_bfp_math$binop_cp_cp_round
      290 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      291 dcl	fort_bfp_math$binop_dp_cp_round
      292 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      293 dcl	fort_bfp_math$binop_r_cp_round
      294 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      295 dcl	fort_bfp_math$binop_i_cp_round
      296 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      297 
      298 dcl	fort_bfp_math$binop_i_i_trunc
      299 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      300 dcl	fort_bfp_math$binop_r_i_trunc
      301 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      302 dcl	fort_bfp_math$binop_r_r_trunc
      303 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      304 dcl	fort_bfp_math$binop_i_r_trunc
      305 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      306 dcl	fort_bfp_math$binop_dp_i_trunc
      307 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      308 dcl	fort_bfp_math$binop_dp_r_trunc
      309 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      310 dcl	fort_bfp_math$binop_dp_dp_trunc
      311 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      312 dcl	fort_bfp_math$binop_r_dp_trunc
      313 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      314 dcl	fort_bfp_math$binop_i_dp_trunc
      315 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      316 dcl	fort_bfp_math$binop_cp_i_trunc
      317 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      318 dcl	fort_bfp_math$binop_cp_r_trunc
      319 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      320 dcl	fort_bfp_math$binop_cp_dp_trunc
      321 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      322 dcl	fort_bfp_math$binop_cp_cp_trunc
      323 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      324 dcl	fort_bfp_math$binop_dp_cp_trunc
      325 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      326 dcl	fort_bfp_math$binop_r_cp_trunc
      327 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      328 dcl	fort_bfp_math$binop_i_cp_trunc
      329 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      330 
      331 dcl	fort_bfp_math$comp_i_i
      332 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      333 dcl	fort_bfp_math$comp_r_i
      334 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      335 dcl	fort_bfp_math$comp_r_r
      336 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      337 dcl	fort_bfp_math$comp_i_r
      338 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      339 dcl	fort_bfp_math$comp_dp_i
      340 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      341 dcl	fort_bfp_math$comp_dp_r
      342 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      343 dcl	fort_bfp_math$comp_dp_dp
      344 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      345 dcl	fort_bfp_math$comp_r_dp
      346 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      347 dcl	fort_bfp_math$comp_i_dp
      348 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      349 dcl	fort_bfp_math$comp_cp_cp
      350 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      351 
      352 dcl	fort_bfp_math$bad_data_types
      353 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      354 dcl	fort_bfp_math$unary_bad_data
      355 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      356 
      357 dcl	fort_bfp_math$binop_lg_lg
      358 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      359 dcl	fort_bfp_math$binop_ch_ch
      360 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      361 dcl	fort_bfp_math$comp_lg_lg
      362 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      363 dcl	fort_bfp_math$comp_ch_ch
      364 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      365 dcl	fort_bfp_math$conv_ch_to_ch
      366 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      367 dcl	fort_bfp_math$unary_no_op
      368 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      369 dcl	fort_hfp_math$conv_r_to_i_round
      370 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      371 dcl	fort_hfp_math$conv_dp_to_i_round
      372 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      373 dcl	fort_hfp_math$conv_cp_to_i_round
      374 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      375 dcl	fort_hfp_math$conv_i_to_r_round
      376 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      377 dcl	fort_hfp_math$conv_dp_to_r_round
      378 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      379 dcl	fort_hfp_math$conv_cp_to_r_round
      380 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      381 dcl	fort_hfp_math$conv_i_to_dp_round
      382 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      383 dcl	fort_hfp_math$conv_r_to_dp_round
      384 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      385 dcl	fort_hfp_math$conv_cp_to_dp_round
      386 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      387 dcl	fort_hfp_math$conv_i_to_cp_round
      388 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      389 dcl	fort_hfp_math$conv_r_to_cp_round
      390 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      391 dcl	fort_hfp_math$conv_dp_to_cp_round
      392 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      393 dcl	fort_hfp_math$conv_r_to_i_trunc
      394 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      395 dcl	fort_hfp_math$conv_dp_to_i_trunc
      396 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      397 dcl	fort_hfp_math$conv_cp_to_i_trunc
      398 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      399 dcl	fort_hfp_math$conv_i_to_r_trunc
      400 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      401 dcl	fort_hfp_math$conv_dp_to_r_trunc
      402 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      403 dcl	fort_hfp_math$conv_cp_to_r_trunc
      404 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      405 dcl	fort_hfp_math$conv_i_to_dp_trunc
      406 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      407 dcl	fort_hfp_math$conv_r_to_dp_trunc
      408 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      409 dcl	fort_hfp_math$conv_cp_to_dp_trunc
      410 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      411 dcl	fort_hfp_math$conv_i_to_cp_trunc
      412 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      413 dcl	fort_hfp_math$conv_r_to_cp_trunc
      414 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      415 dcl	fort_hfp_math$conv_dp_to_cp_trunc
      416 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      417 
      418 dcl	fort_hfp_math$binop_i_i_round
      419 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      420 dcl	fort_hfp_math$binop_r_i_round
      421 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      422 dcl	fort_hfp_math$binop_r_r_round
      423 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      424 dcl	fort_hfp_math$binop_i_r_round
      425 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      426 dcl	fort_hfp_math$binop_dp_i_round
      427 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      428 dcl	fort_hfp_math$binop_dp_r_round
      429 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      430 dcl	fort_hfp_math$binop_dp_dp_round
      431 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      432 dcl	fort_hfp_math$binop_r_dp_round
      433 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      434 dcl	fort_hfp_math$binop_i_dp_round
      435 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      436 dcl	fort_hfp_math$binop_cp_i_round
      437 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      438 dcl	fort_hfp_math$binop_cp_r_round
      439 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      440 dcl	fort_hfp_math$binop_cp_dp_round
      441 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      442 dcl	fort_hfp_math$binop_cp_cp_round
      443 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      444 dcl	fort_hfp_math$binop_dp_cp_round
      445 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      446 dcl	fort_hfp_math$binop_r_cp_round
      447 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      448 dcl	fort_hfp_math$binop_i_cp_round
      449 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      450 
      451 dcl	fort_hfp_math$binop_i_i_trunc
      452 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      453 dcl	fort_hfp_math$binop_r_i_trunc
      454 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      455 dcl	fort_hfp_math$binop_r_r_trunc
      456 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      457 dcl	fort_hfp_math$binop_i_r_trunc
      458 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      459 dcl	fort_hfp_math$binop_dp_i_trunc
      460 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      461 dcl	fort_hfp_math$binop_dp_r_trunc
      462 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      463 dcl	fort_hfp_math$binop_dp_dp_trunc
      464 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      465 dcl	fort_hfp_math$binop_r_dp_trunc
      466 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      467 dcl	fort_hfp_math$binop_i_dp_trunc
      468 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      469 dcl	fort_hfp_math$binop_cp_i_trunc
      470 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      471 dcl	fort_hfp_math$binop_cp_r_trunc
      472 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      473 dcl	fort_hfp_math$binop_cp_dp_trunc
      474 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      475 dcl	fort_hfp_math$binop_cp_cp_trunc
      476 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      477 dcl	fort_hfp_math$binop_dp_cp_trunc
      478 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      479 dcl	fort_hfp_math$binop_r_cp_trunc
      480 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      481 dcl	fort_hfp_math$binop_i_cp_trunc
      482 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      483 
      484 dcl	fort_hfp_math$comp_i_i
      485 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      486 dcl	fort_hfp_math$comp_r_i
      487 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      488 dcl	fort_hfp_math$comp_r_r
      489 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      490 dcl	fort_hfp_math$comp_i_r
      491 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      492 dcl	fort_hfp_math$comp_dp_i
      493 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      494 dcl	fort_hfp_math$comp_dp_r
      495 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      496 dcl	fort_hfp_math$comp_dp_dp
      497 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      498 dcl	fort_hfp_math$comp_r_dp
      499 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      500 dcl	fort_hfp_math$comp_i_dp
      501 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      502 dcl	fort_hfp_math$comp_cp_cp
      503 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      504 
      505 dcl	fort_hfp_math$bad_data_types
      506 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      507 dcl	fort_hfp_math$unary_bad_data
      508 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      509 
      510 dcl	fort_hfp_math$binop_lg_lg
      511 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      512 dcl	fort_hfp_math$binop_ch_ch
      513 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      514 dcl	fort_hfp_math$comp_lg_lg
      515 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      516 dcl	fort_hfp_math$comp_ch_ch
      517 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      518 dcl	fort_hfp_math$conv_ch_to_ch
      519 			ext entry (fixed bin (35), bit (72), bit (72), fixed bin (35)) returns (bit (72));
      520 dcl	fort_hfp_math$unary_no_op
      521 			ext entry (bit (72), fixed bin (35)) returns (bit (72));
      522 dcl	cu_$arg_ptr_rel	entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
      523 
      524 
      525 /* include files */
      526 
  1     1 /* BEGIN INCLUDE FILE fort_options.incl.pl1  */
  1     2 
  1     3 /****^  ***********************************************************
  1     4*        *                                                         *
  1     5*        * Copyright, (C) Honeywell Information Systems Inc., 1987 *
  1     6*        *                                                         *
  1     7*        *********************************************************** */
  1     8 
  1     9 /****^  HISTORY COMMENTS:
  1    10*  1) change(86-07-14,BWong), approve(86-07-14,MCR7382), audit(86-07-17,Ginter),
  1    11*     install(86-07-28,MR12.0-1105):
  1    12*     Fix fortran bug 473.
  1    13*  2) change(87-06-23,RWaters), approve(87-06-23,MCR7703), audit(87-07-10,Huen),
  1    14*     install(87-08-06,MR12.1-1069):
  1    15*     Implemented SCP 6315: fortran error-handling argument.
  1    16*                                                   END HISTORY COMMENTS */
  1    17 
  1    18 
  1    19 /*
  1    20*          Modified: 12 May 87 by RWaters added debug_io
  1    21*	Modified: 19 February 1986 by B. Wong & A. Ginter - 473.a: Correct
  1    22*		comments and size of pad field in fort_declared
  1    23*		and pad out dfast and fast bit masks to two words.
  1    24*	Modified: 09 October 1985 by B. Wong - 473: add VLA_auto, VLA_static,
  1    25*		VLA_parm, VLC, LA_auto, and LA_static.  Remove VLA and LA.
  1    26*	Modified: 28 March 1984 by M. Mabey - Install HFP support.
  1    27*	Modified: 21 September 1983 by M. Mabey - correct size of pad field in  fortran_declared.
  1    28*	Modified: 16 May 1983 by M. Mabey - add fortran_declared
  1    29*	Modified: 18 December 1982 by T. Oke - Add 'long_profile'.
  1    30*	Modified: 22 September 1982 by T. Oke - add VLA and LA
  1    31*	Modified:  3 May  1982 by T. Oke - add check_multiply
  1    32*	Modified: 06/24/81 by S. Herbst - add do_rounding & auto_zero to fast_mask and dfast_mask
  1    33*	Modified: 26 February 1980 by C R Davis - add fast_mask,  fix dfast_mask.
  1    34*	Modified: 31 January 1980 by C R Davis - add stringrange.
  1    35*	Modified: 13 September 1979 by Paul E. Smee--add ansi_77.
  1    36*	Modified: 05 December 1978 by Paul E. Smee--add do_rounding, auto_zero.
  1    37*	Modified:	25 January 1978 by Richard A. Barnes for the loop optimizer
  1    38**/
  1    39 
  1    40 declare
  1    41 
  1    42     1 fortran_options aligned based,
  1    43       2 use_library bit (1) unaligned,		/* (1) ON if library statements will be parsed */
  1    44       2 optimize bit (1) unaligned,		/* (2) ON if optimized code is to be produced */
  1    45       2 time bit (1) unaligned,		/* (3) ON for compile timing */
  1    46       2 source_format unaligned,
  1    47         3 has_line_numbers bit (1) unaligned,	/* (4) ON if each line begins with a line number */
  1    48         3 fold bit (1) unaligned,		/* (5) ON if variable names are to be folded to lowercase */
  1    49         3 card bit (1) unaligned,		/* (6) ON for card format */
  1    50         3 convert bit (1) unaligned,		/* (7) ON for card format to be converted */
  1    51       2 listing unaligned,
  1    52         3 source bit (1) unaligned,		/* (8) ON for listing of numbered source */
  1    53         3 symbol bit (1) unaligned,		/* (9) ON for listing with symbol map */
  1    54         3 map bit (1) unaligned,		/* (10) ON for listing with statement map */
  1    55         3 list bit (1) unaligned,		/* (11) ON for listing with assembler instructions */
  1    56       2 error_messages unaligned,
  1    57         3 brief bit (1) unaligned,		/* (12) ON for brief error messages */
  1    58         3 severity fixed bin (3),		/* (13-16) suppresses messages below this severity */
  1    59       2 debugging unaligned,
  1    60         3 subscriptrange bit (1) unaligned,	/* (17) ON for subscript range checking */
  1    61         3 stringrange bit (1) unaligned,	/* (18) ON for string range checking */
  1    62         3 brief_table bit (1) unaligned,	/* (19) ON for statement table */
  1    63         3 table bit (1) unaligned,		/* (20) ON for statement and symbol table */
  1    64         3 profile bit (1) unaligned,		/* (21) ON to generate code to meter statements */
  1    65         3 check bit (1) unaligned,		/* (22) ON for syntactic and semantic checking only */
  1    66       2 system_debugging unaligned,
  1    67         3 stop_after_cg bit (1) unaligned,	/* (23) ON if debug stop after code generator */
  1    68         3 stop_after_parse bit (1) unaligned,	/* (24) ON if debug stop after parse */
  1    69       2 relocatable bit (1) unaligned,		/* (25) ON if relocatable object segment generated */
  1    70       2 optimizing unaligned,
  1    71         3 time_optimizer bit (1) unaligned,	/* (26) ON if timings for optimizer requested */
  1    72 					/* (27) ON if optimizer can loosen safety constraints */
  1    73         3 ignore_articulation_blocks bit (1) unaligned,
  1    74         3 consolidate bit(1) unaligned,		/* (28) ON if optimizer should run consolidation phase */
  1    75       2 do_rounding bit(1) unaligned,		/* (29) ON if floating point round should be used */
  1    76       2 auto_zero bit(1) unaligned,		/* (30) ON if auto storage should be zeroed when allocated */
  1    77       2 ansi_77 bit (1) unaligned,		/* (31) ON if ansi77 rules are to be followed */
  1    78       2 check_multiply bit (1) unaligned,	/* (32) ON if check integer multiply extent */
  1    79       2 VLA_auto bit (1) unaligned,		/* (33) ON if auto VLA's being done */
  1    80       2 VLA_parm bit (1) unaligned,		/* (34) ON if parm VLA's being done */
  1    81       2 VLA_static bit (1) unaligned,		/* (35) ON if static VLA's being done */
  1    82       2 VLC bit (1) unaligned,		/* (36) ON if VLC's being done */
  1    83       2 LA_auto bit (1) unaligned,		/* (1)  ON if auto LA's being done */
  1    84       2 LA_static bit (1) unaligned,		/* (2)  ON if static LA's being done */
  1    85       2 long_profile bit (1) unaligned,		/* (3)  ON to generate long_profile */
  1    86       2 static_storage bit (1) unaligned,	/* (4)  ON if static storage */
  1    87       2 hfp bit (1) unaligned,		/* (5)  ON if using hex floating point math */
  1    88       2 debug_io bit (1) unaligned,               /* (6) */
  1    89       2 pad bit(30) unaligned;		/* (7-36) Pad bits */
  1    90 
  1    91 declare
  1    92 
  1    93    1  fortran_declared aligned based,
  1    94       2  ansi66 bit(1) unaligned,		/* (1) First word */
  1    95       2  ansi77 bit(1) unaligned,		/* (2) */
  1    96       2  auto bit(1) unaligned,		/* (3) */
  1    97       2  auto_zero bit(1) unaligned,		/* (4) */
  1    98       2  brief bit(1) unaligned,		/* (5) */
  1    99       2  binary_floating_point bit(1) unaligned,	/* (6) */
  1   100       2  brief_table bit(1) unaligned,		/* (7) */
  1   101       2  card bit(1) unaligned,		/* (8) */
  1   102       2  check bit(1) unaligned,		/* (9) */
  1   103       2  check_multiply bit(1) unaligned,	/* (10) */
  1   104       2  consolidate bit(1) unaligned,		/* (11) */
  1   105       2  debug bit(1) unaligned,		/* (12) */
  1   106       2  debug_cg bit(1) unaligned,		/* (13) */
  1   107       2  debug_io bit(1) unaligned,		/* (14) */
  1   108       2  default_full bit(1) unaligned,		/* (15) */
  1   109       2  default_safe bit(1) unaligned,		/* (16) */
  1   110       2  fold bit(1) unaligned,		/* (17) */
  1   111       2  free bit(1) unaligned,		/* (18) */
  1   112       2  full_optimize bit(1) unaligned,	/* (19) */
  1   113       2  hexadecimal_floating_point bit(1) unaligned,
  1   114 					/* (20) */
  1   115       2  la_auto bit(1) unaligned,		/* (21) */
  1   116       2  la_static bit(1) unaligned,		/* (22) */
  1   117       2  large_array bit(1) unaligned,		/* (23) */
  1   118       2  line_numbers bit(1) unaligned,		/* (24) */
  1   119       2  list bit(1) unaligned,		/* (25) */
  1   120       2  long bit(1) unaligned,		/* (26) */
  1   121       2  long_profile bit(1) unaligned,		/* (27) */
  1   122       2  map bit(1) unaligned,		/* (28) */
  1   123       2  no_auto_zero bit(1) unaligned,		/* (29) */
  1   124       2  no_check bit(1) unaligned,		/* (30) */
  1   125       2  no_fold bit(1) unaligned,		/* (31) */
  1   126       2  no_large_array bit(1) unaligned,	/* (32) */
  1   127       2  no_line_numbers bit(1) unaligned,	/* (33) */
  1   128       2  no_map bit(1) unaligned,		/* (34) */
  1   129       2  no_optimize bit(1) unaligned,		/* (35) */
  1   130       2  no_check_multiply bit(1) unaligned,	/* (36) */
  1   131       2  no_debug_io bit(1) unal,                 /* (1) Second Word */
  1   132       2  no_stringrange bit(1) unaligned,	/* (2) */
  1   133       2  no_subscriptrange bit(1) unaligned,	/* (3) */
  1   134       2  no_table bit(1) unaligned,		/* (4) */
  1   135       2  no_very_large_array bit(1) unaligned,	/* (5) */
  1   136       2  no_vla_parm bit(1) unaligned,		/* (6) */
  1   137       2  no_version bit(1) unaligned,		/* (7) */
  1   138       2  non_relocatable bit(1) unaligned,	/* (8) */
  1   139       2  optimize bit(1) unaligned,		/* (9) */
  1   140       2  profile bit(1) unaligned,		/* (10) */
  1   141       2  relocatable bit(1) unaligned,		/* (11) */
  1   142       2  round bit(1) unaligned,		/* (12) */
  1   143       2  safe_optimize bit(1) unaligned,	/* (13) */
  1   144       2  severity fixed bin(3) unaligned,	/* (14-16) */
  1   145       2  static bit(1) unaligned,		/* (17) */
  1   146       2  stringrange bit(1) unaligned,		/* (18) */
  1   147       2  subscriptrange bit(1) unaligned,	/* (19) */
  1   148       2  table bit(1) unaligned,		/* (20) */
  1   149       2  time bit(1) unaligned,		/* (21) */
  1   150       2  time_ot bit(1) unaligned,		/* (22) */
  1   151       2  top_down bit(1) unaligned,		/* (23) */
  1   152       2  truncate bit(1) unaligned,		/* (24) */
  1   153       2  version bit(1) unaligned,		/* (25) */
  1   154       2  very_large_array bit(1) unaligned,	/* (26) */
  1   155       2  very_large_common bit(1) unaligned,	/* (27) */
  1   156       2  vla_auto bit(1) unaligned,		/* (28) */
  1   157       2  vla_parm bit(1) unaligned,		/* (29) */
  1   158       2  vla_static bit(1) unaligned,		/* (30) */
  1   159       2  pad bit(6) unaligned;		/* (31-36) */
  1   160 
  1   161 
  1   162 declare					/* Options used by DFAST */
  1   163 
  1   164      dfast_mask bit (72) internal static options (constant) initial ("100110000000000010100000000011"b);
  1   165 	/* use_library, has_line_numbers, fold, subscriptrange, brief_table */
  1   166 
  1   167 
  1   168 declare					/* Options used by FAST */
  1   169 
  1   170      fast_mask bit (72) internal static options (constant) initial ("000100000000000010100000000011"b);
  1   171 	/* has_line_numbers, subscriptrange, brief_table */
  1   172 
  1   173 /* END INCLUDE FILE fort_options.incl.pl1 */
      527 
      528 dcl	01 fort_shared_variables
      529 			structure aligned,
  2     1 
  2     2 /* BEGIN fort_shared_vars.incl.pl1 */
  2     3 
  2     4 
  2     5 
  2     6 /****^  HISTORY COMMENTS:
  2     7*  1) change(86-07-14,BWong), approve(86-07-14,MCR7286), audit(86-07-17,Ginter),
  2     8*     install(86-07-28,MR12.0-1105):
  2     9*     Fix fortran bug 463.
  2    10*                                                   END HISTORY COMMENTS */
  2    11 
  2    12 
  2    13 /* Created:	June 1976, David Levin
  2    14*
  2    15*	Modified:	30 Aug 76, David Levin - to add global variables for listing segment.
  2    16*	Modified:	22 Nov 76, Richard Barnes - to add profile_size
  2    17*	Modified: 24 Feb 77, Gabriel Chang - for the optimizer
  2    18*	Modified:	06 Oct 77, Richard Barnes - for the loop optimizer
  2    19*	Modified: 16 Nov 77, David Levin - add next_free_(temp array_ref).
  2    20*	Modified: 09 Oct 78, Paul Smee - for larger common and arrays.
  2    21*	Modified: 03 Apr 79, Paul Smee - add list of include file data.
  2    22*	Modified: 17 May 79, Paul Smee - add cur_statement_list.
  2    23*	Modified: 28 Jun 79, Paul Smee - add compile-time math entry arrays.
  2    24*	Modified: 13 Sep 79, Paul Smee - add default_char_size.
  2    25*	Modified:	18 Dec 79, Richard Barnes - add free and freei
  2    26*	Modified: 03 Mar 80, C R Davis - add must_save_stack_extent.
  2    27*	Modified: 15 Mar 82, T G Oke - add source (line_number, file_number).
  2    28*	Modified: 20 Sept 82, T G Oke - add VLA_is_256K flag
  2    29*	Modified: 22 Sept 82, T G Oke - add area creation info to pass to
  2    30*	     listing generator.
  2    31*	Modified: 17 May 83, M Mabey - add declared_options.
  2    32*	Modified: 02 Aug 85, B Wong - 463: changed 'must_save_stack_extent'
  2    33*	     to 'pad' since the variable is no longer used.
  2    34**/
  2    35 
  2    36 	  2 polish_base		ptr,
  2    37 	  2 operand_base		ptr,
  2    38 	  2 object_base		ptr,
  2    39 	  2 quadruple_base		ptr,
  2    40 	  2 opt_base		ptr,
  2    41 	  2 relocation_base		ptr,
  2    42 
  2    43 	  2 cref_base		ptr,		/* base of cross reference segment */
  2    44 	  2 source_line_base	ptr,		/* base of source line offset segment */
  2    45 	  2 listing_base		ptr,		/* base of listing info segment */
  2    46 	  2 cur_listing		ptr,		/* points to listing info for the active subprogram */
  2    47 
  2    48 	  2 free(2:4)		ptr,		/* free chains for optimizer */
  2    49 	  2 freei			ptr,		/* .. */
  2    50 
  2    51 	  2 polish_max_len		fixed bin (19),
  2    52 	  2 operand_max_len		fixed bin (19),
  2    53 	  2 object_max_len		fixed bin (19),
  2    54 	  2 quad_max_len		fixed bin (19),
  2    55 	  2 opt_max_len		fixed bin (19),
  2    56 
  2    57 	  2 next_free_polish	fixed bin (18),
  2    58 	  2 next_free_operand	fixed bin (18),
  2    59 	  2 next_free_object	fixed bin (18),
  2    60 	  2 next_free_listing	fixed bin (18),
  2    61 	  2 next_free_quad		fixed bin (18),
  2    62 	  2 next_free_array_ref	fixed bin (18),	/* Chain for freed array_ref nodes. */
  2    63 	  2 next_free_temp		fixed bin (18),	/* Chain for freed temporary nodes. */
  2    64 	  2 next_free_opt		fixed bin (18),
  2    65 
  2    66 	  2 first_segment		fixed bin,
  2    67 	  2 number_of_source_segments	fixed bin (8),
  2    68 	  2 number_of_lines		fixed bin,
  2    69 	  2 number_of_crefs		fixed bin,
  2    70 	  2 profile_size		fixed bin,
  2    71 
  2    72 	  2 main_entry_point_name	char (32) varying,
  2    73 
  2    74 	  2 cur_statement		fixed bin (18),
  2    75 	  2 cur_statement_list        fixed bin (17),
  2    76 	  2 cur_subprogram		fixed bin (18),
  2    77 	  2 first_subprogram	fixed bin (18),
  2    78 	  2 last_subprogram		fixed bin (18),
  2    79 	  2 unnamed_block_data_subprogram
  2    80 				fixed bin (18),
  2    81 	  2 first_entry_name	fixed bin (18),
  2    82 	  2 last_entry_name		fixed bin (18),
  2    83 
  2    84 	  2 constant_info (4)	aligned structure,
  2    85 	    3 constant_count	fixed bin (17),
  2    86 	    3 first_constant	fixed bin (18),
  2    87 	    3 last_constant		fixed bin (18),
  2    88 
  2    89 	  2 options		aligned,
  2    90 	    3 user_options		aligned like fortran_options,
  2    91 	    3 system_options	aligned,
  2    92 	      4 is_fast		bit (1) unaligned,
  2    93 	      4 namelist_used	bit (1) unaligned,
  2    94 	      4 compile_only	bit (1) unaligned,
  2    95 	      4 VLA_is_256K		bit (1) unaligned,	/* FLAG 255/256K code */
  2    96 	      4 pad		bit (32) unaligned,
  2    97 
  2    98 	  2 incl_data		aligned,
  2    99 	    3 incl_count		fixed bin,
  2   100 	    3 file_list (0:255),
  2   101 	      4 source_node_offset	fixed bin (18),
  2   102 	      4 incl_len		fixed bin (21),
  2   103 	      4 incl_ptr		unaligned ptr,
  2   104 
  2   105 	  2 create_constant		entry (fixed bin (4), bit (72) aligned) returns (fixed bin (18))
  2   106 				variable,
  2   107 	  2 create_char_constant	entry (char (*)) returns (fixed bin (18))
  2   108 				variable,
  2   109 	  2 print_message		entry options (variable)
  2   110 				variable,
  2   111 	  2 get_next_temp_segment	entry (ptr, fixed bin (18)) returns (ptr)
  2   112 				variable,
  2   113 	  2 negate_round (6)	entry (fixed bin (35), bit (72), bit (72), fixed bin (35))
  2   114 				returns (bit (72)) variable,
  2   115 	  2 negate_trunc (6)	entry (fixed bin (35), bit (72), bit (72), fixed bin (35))
  2   116 				returns (bit (72)) variable,
  2   117 	  2 binop_round (6,6)	entry (fixed bin (35), bit (72), bit (72), fixed bin (35))
  2   118 				returns (bit (72)) variable,
  2   119 	  2 binop_trunc (6,6)	entry (fixed bin (35), bit (72), bit (72), fixed bin (35))
  2   120 				returns (bit (72)) variable,
  2   121 	  2 comp_parm (6,6)		entry (fixed bin (35), bit (72), bit (72), fixed bin (35))
  2   122 				returns (bit (72)) variable,
  2   123 	  2 conv_round (6,6)		entry (bit (72), fixed bin (35))
  2   124 				returns (bit (72)) variable,
  2   125 	  2 conv_trunc (6,6)	entry (bit (72), fixed bin (35))
  2   126 				returns (bit (72)) variable,
  2   127 	  2 pad			bit (1) aligned,
  2   128 
  2   129 /* The following are used by "print_message - decode_source_id" if use_source_info set. */
  2   130 
  2   131 	  2 use_source_info		bit (1) aligned,
  2   132 	  2 source_file_number	fixed bin (35),
  2   133 	  2 source_line_number	fixed bin (35),
  2   134 	  2 Area_create_first	fixed bin (18),	/* start of text to do creation */
  2   135             2 Area_create_last	fixed bin (18),	/* Last item */
  2   136             2 Area_init_first		fixed bin (18),	/* start of text to init areas */
  2   137             2 Area_init_last		fixed bin (18),	/* Last item */
  2   138 	  2 declared_options	aligned like fortran_declared;
  2   139 
  2   140 dcl	num_of_word_constants	fixed bin (17) defined (constant_info (1).constant_count);
  2   141 dcl	first_word_constant		fixed bin (18) defined (constant_info (1).first_constant);
  2   142 dcl	last_word_constant		fixed bin (18) defined (constant_info (1).last_constant);
  2   143 
  2   144 dcl	num_of_dw_constants		fixed bin (17) defined (constant_info (2).constant_count);
  2   145 dcl	first_dw_constant		fixed bin (18) defined (constant_info (2).first_constant);
  2   146 dcl	last_dw_constant		fixed bin (18) defined (constant_info (2).last_constant);
  2   147 
  2   148 dcl	num_of_char_constants	fixed bin (17) defined (constant_info (3).constant_count);
  2   149 dcl	first_char_constant		fixed bin (18) defined (constant_info (3).first_constant);
  2   150 dcl	last_char_constant		fixed bin (18) defined (constant_info (3).last_constant);
  2   151 
  2   152 dcl	num_of_block_constants	fixed bin (17) defined (constant_info (4).constant_count);
  2   153 dcl	first_block_constant	fixed bin (18) defined (constant_info (4).first_constant);
  2   154 dcl	last_block_constant		fixed bin (18) defined (constant_info (4).last_constant);
  2   155 
  2   156 /* END   fort_shared_vars.incl.pl1 */
      530 
      531 
      532 	return;					/* illegal entry */
      533 
      534 argument:
      535      entry (cmd_string_ptr, cmd_string_len, arg_num, arg_list_ptr, fd_ptr, arg_error);
      536 	begin;
      537 
      538 dcl	arg_case		(0:111) label variable init (arg_not_found, arg_ansi66, arg_ansi77, arg_auto,
      539 			arg_auto_zero, arg_binary_floating_point, arg_binary_floating_point, arg_brief, arg_brief,
      540 			arg_brief_table, arg_brief_table, arg_card, arg_check, arg_check, arg_check_multiply,
      541 			arg_check_multiply, arg_consolidate, arg_consolidate, arg_debug, arg_debug, arg_debug_cg, arg_debug_io, arg_debug_io,
      542 			arg_default_full, arg_default_full, arg_default_safe, arg_default_safe, arg_fold,
      543 			arg_free, arg_full_optimize, arg_full_optimize, arg_hexadecimal_floating_point,
      544 			arg_hexadecimal_floating_point, arg_la_auto, arg_la_static,
      545 			arg_large_array, arg_large_array, arg_line_numbers,
      546 			arg_line_numbers, arg_list, arg_list, arg_long, arg_long, arg_long_profile,
      547 			arg_long_profile, arg_map, arg_nlno, arg_no_auto_zero, arg_no_check, arg_no_check,
      548 			arg_no_check_multiply, arg_no_check_multiply, 
      549 	                    arg_no_debug_io, arg_no_debug_io, arg_no_fold, arg_no_large_array,
      550 			arg_no_large_array, arg_no_line_numbers, arg_no_line_numbers, arg_no_map, arg_no_optimize,
      551 			arg_no_optimize, arg_no_stringrange, arg_no_stringrange, arg_no_stringrange,
      552 			arg_no_subscriptrange, arg_no_subscriptrange, arg_no_subscriptrange, arg_no_table,
      553 			arg_no_table, arg_no_version, arg_no_very_large_array, arg_no_very_large_array,
      554 			arg_no_vla_parm, arg_non_relocatable, arg_non_relocatable, arg_optimize, arg_optimize,
      555 			arg_profile, arg_profile, arg_relocatable, arg_relocatable, arg_round, arg_safe,
      556 			arg_safe_optimize, arg_safe_optimize, arg_source, arg_source, arg_static, arg_stringrange,
      557 			arg_stringrange, arg_subscriptrange, arg_subscriptrange, arg_super, arg_symbols,
      558 			arg_symbols, arg_table, arg_table, arg_time, arg_time, arg_time_ot, arg_top_down,
      559 			arg_truncate, arg_truncate, arg_version, arg_very_large_array, arg_very_large_array,
      560 			arg_very_large_common, arg_very_large_common, arg_vla_auto, arg_vla_parm, arg_vla_static);
      561 
      562 	     cmd = index (string (cmd_names), " " || substr (cmd_string, 2, cmd_string_len - 1) || " ");
      563 	     if cmd ^= 0
      564 	     then cmd = (cmd + 32) / 33;
      565 	     goto arg_case (cmd);
      566 
      567 arg_not_found:					/* cmd_string not found */
      568 
      569 	     if substr (cmd_string, 1, 9) = "-severity"
      570 	     then do;
      571 		     if (cmd_string_len = 9)
      572 		     then do;
      573 			     arg_num = arg_num + 1;
      574 			     call cu_$arg_ptr_rel (arg_num, cmd2_string_ptr, cmd2_string_len, code,
      575 				arg_list_ptr);
      576 			     if (code ^= 0) | (cmd2_string_len = 0)
      577 			     then do;
      578 				     arg_num = arg_num - 1;
      579 				     call com_err_ (0, "new_fortran",
      580 					"Missing Severity number (1, 2, 3, or 4).");
      581 				     arg_error = "1"b;
      582 				end;
      583 			     else call parse_severity (cmd2_string);
      584 			end;
      585 		     else call parse_severity (substr (cmd_string, 10));
      586 		end;
      587 
      588 	     else if substr (cmd_string, 1, 3) = "-sv"
      589 	     then do;
      590 		     if (cmd_string_len = 3)
      591 		     then do;
      592 			     arg_num = arg_num + 1;
      593 			     call cu_$arg_ptr_rel (arg_num, cmd2_string_ptr, cmd2_string_len, code,
      594 				arg_list_ptr);
      595 			     if (code ^= 0) | (cmd2_string_len = 0)
      596 			     then do;
      597 				     arg_num = arg_num - 1;
      598 				     call com_err_ (0, "new_fortran",
      599 					"Missing Severity number (1, 2, 3, or 4).");
      600 				     arg_error = "1"b;
      601 				end;
      602 			     else call parse_severity (cmd2_string);
      603 			end;
      604 		     else call parse_severity (substr (cmd_string, 4));
      605 		end;
      606 
      607 
      608 	     else do;
      609 		     call com_err_ (error_table_$badopt, "new_fortran", """^a""", cmd_string);
      610 		     arg_error = "1"b;
      611 		end;
      612 	     return;
      613 
      614 arg_ansi66:					/* "ansi66" */
      615 	     fd.ansi66 = "1"b;
      616 	     fd.ansi77 = "0"b;
      617 	     return;
      618 
      619 arg_ansi77:					/* "ansi77" */
      620 	     fd.ansi77 = "1"b;
      621 	     fd.ansi66 = "0"b;
      622 	     return;
      623 
      624 arg_auto:						/* "auto" */
      625 	     fd.auto = "1"b;
      626 	     fd.static = "0"b;
      627 	     return;
      628 
      629 arg_auto_zero:					/* "auto_zero" */
      630 	     fd.auto_zero = "1"b;
      631 	     fd.no_auto_zero = "0"b;
      632 	     return;
      633 
      634 arg_binary_floating_point:				/* "binary_floating_point", "bfp" */
      635 	     fd.binary_floating_point = "1"b;
      636 	     fd.hexadecimal_floating_point = "0"b;
      637 	     return;
      638 
      639 arg_brief:					/* "brief", "bf" */
      640 	     fd.brief = "1"b;
      641 	     fd.long = "0"b;
      642 	     return;
      643 
      644 arg_brief_table:					/* "brief_table", "bftb" */
      645 	     fd.brief_table = "1"b;
      646 	     fd.table = "0"b;
      647 	     fd.no_table = "0"b;
      648 	     return;
      649 
      650 arg_card:						/* "card" */
      651 	     fd.card = "1"b;
      652 	     fd.free = "0"b;
      653 	     return;
      654 
      655 arg_check:					/* "check", "ck" */
      656 	     fd.check = "1"b;
      657 	     fd.no_check = "0"b;
      658 	     return;
      659 
      660 arg_check_multiply:					/* "check_multiply", "ckmpy" */
      661 	     fd.check_multiply = "1"b;
      662 	     fd.no_check_multiply = "0"b;
      663 	     return;
      664 
      665 arg_consolidate:					/* "consolidate", "cons" */
      666 	     fd.consolidate = "1"b;
      667 	     fd.top_down = "0"b;
      668 	     return;
      669 
      670 arg_debug:					/* "debug", "db" */
      671 	     fd.debug = "1"b;
      672 	     return;
      673 
      674 arg_debug_cg:					/* "debug_cg" */
      675 	     fd.debug_cg = "1"b;
      676 	     return;
      677 
      678 arg_debug_io:					/* "debug_io", "dbio" */
      679 	     fd.debug_io = "1"b;
      680 	     fd.no_debug_io = "0"b;
      681 	     return;
      682 
      683 arg_default_full:					/* "default_full", "dff" */
      684 	     fd.default_full = "1"b;
      685 	     fd.default_safe = "0"b;
      686 	     return;
      687 
      688 arg_default_safe:					/* "default_safe", "dfs" */
      689 arg_safe:						/* "safe" */
      690 	     fd.default_safe = "1"b;
      691 	     fd.default_full = "0"b;
      692 	     return;
      693 
      694 arg_fold:						/* "fold" */
      695 	     fd.fold = "1"b;
      696 	     fd.no_fold = "0"b;
      697 	     return;
      698 
      699 arg_free:						/* "free" */
      700 	     fd.free = "1"b;
      701 	     fd.card = "0"b;
      702 	     return;
      703 
      704 arg_hexadecimal_floating_point:			/* "hexadecimal_floating_point", "hfp" */
      705 	     fd.hexadecimal_floating_point = "1"b;
      706 	     fd.binary_floating_point = "0"b;
      707 	     return;
      708 
      709 arg_full_optimize:					/* "full_optimize", "full_ot" */
      710 	     fd.full_optimize = "1"b;
      711 	     fd.safe_optimize = "0"b;
      712 	     fd.optimize = "0"b;
      713 	     fd.no_optimize = "0"b;
      714 	     return;
      715 
      716 arg_la_auto:					/* "la_auto" */
      717 	     fd.la_auto = "1"b;
      718 	     fd.no_large_array = "0"b;
      719 	     return;
      720 
      721 arg_la_static:					/* "la_static" */
      722 	     fd.la_static = "1"b;
      723 	     fd.no_large_array = "0"b;
      724 	     return;
      725 
      726 arg_large_array:					/* "large_array", "la" */
      727 	     fd.large_array = "1"b;
      728 	     fd.no_large_array = "0"b;
      729 	     return;
      730 
      731 arg_line_numbers:					/* "line_numbers", "ln" */
      732 	     fd.line_numbers = "1"b;
      733 	     fd.no_line_numbers = "0"b;
      734 	     return;
      735 
      736 arg_list:						/* "list", "ls" */
      737 	     fd.list = "1"b;
      738 	     fd.map = "0"b;
      739 	     fd.no_map = "0"b;
      740 	     return;
      741 
      742 arg_long:						/* "long", "lg" */
      743 	     fd.long = "1"b;
      744 	     fd.brief = "0"b;
      745 	     return;
      746 
      747 arg_long_profile:					/* "long_profile", "lpf" */
      748 	     fd.long_profile = "1"b;
      749 	     fd.profile = "0"b;
      750 	     return;
      751 
      752 arg_map:						/* "map" */
      753 	     fd.map = "1"b;
      754 	     fd.no_map = "0"b;
      755 	     fd.list = "0"b;
      756 	     return;
      757 
      758 arg_nlno:						/* "nlno" */
      759 	     call com_err_ (0, "new_fortran", "-nlno is obsolete. Use -line_numbers.");
      760 	     arg_error = "1"b;
      761 	     return;
      762 
      763 arg_no_auto_zero:					/* "no_auto_zero" */
      764 	     fd.no_auto_zero = "1"b;
      765 	     fd.auto_zero = "0"b;
      766 	     return;
      767 
      768 arg_no_check:					/* "no_check", "nck" */
      769 	     fd.no_check = "1"b;
      770 	     fd.check = "0"b;
      771 	     return;
      772 
      773 arg_no_check_multiply:				/* "no_check_multiply", "nckmpy" */
      774 	     fd.no_check_multiply = "1"b;
      775 	     fd.check_multiply = "0"b;
      776 	     return;
      777 
      778 arg_no_debug_io:					/* "no_debug_io", "ndbio" */
      779               fd.no_debug_io = "1"b;
      780 	    fd.debug_io = "0"b;
      781 	    return;
      782 
      783 arg_no_fold:					/* "no_fold" */
      784 	     fd.no_fold = "1"b;
      785 	     fd.fold = "0"b;
      786 	     return;
      787 
      788 arg_no_large_array:					/* "no_large_array", "nla" */
      789 	     fd.no_large_array = "1"b;
      790 	     fd.large_array = "0"b;
      791 	     fd.la_auto = "0"b;
      792 	     fd.la_static = "0"b;
      793 	     return;
      794 
      795 arg_no_line_numbers:				/* "no_line_numbers", "nln" */
      796 	     fd.no_line_numbers = "1"b;
      797 	     fd.line_numbers = "0"b;
      798 	     return;
      799 
      800 arg_no_map:					/* "no_map" */
      801 	     fd.no_map = "1"b;
      802 	     fd.map = "0"b;
      803 	     fd.list = "0"b;
      804 	     return;
      805 
      806 arg_no_optimize:					/* "no_optimize", "not" */
      807 	     fd.no_optimize = "1"b;
      808 	     fd.full_optimize = "0"b;
      809 	     fd.safe_optimize = "0"b;
      810 	     fd.optimize = "0"b;
      811 	     return;
      812 
      813 arg_no_stringrange:					/* "no_stringrange", "nstrg", "nostrg" */
      814 	     fd.no_stringrange = "1"b;
      815 	     fd.stringrange = "0"b;
      816 	     return;
      817 
      818 arg_no_subscriptrange:				/* "no_subscriptrange", "nsubrg", "nosubrg" */
      819 	     fd.no_subscriptrange = "1"b;
      820 	     fd.subscriptrange = "0"b;
      821 	     return;
      822 
      823 arg_no_table:					/* "no_table", "ntb" */
      824 	     fd.no_table = "1"b;
      825 	     fd.table = "0"b;
      826 	     fd.brief_table = "0"b;
      827 	     return;
      828 
      829 arg_no_version:					/* "no_version" */
      830 	     fd.no_version = "1"b;
      831 	     fd.version = "0"b;
      832 	     return;
      833 
      834 arg_no_very_large_array:				/* "no_very_large_array", "nvla" */
      835 	     fd.no_very_large_array = "1"b;
      836 	     fd.very_large_array = "0"b;
      837 	     fd.very_large_common = "0"b;
      838 	     fd.vla_auto = "0"b;
      839 	     fd.vla_static = "0"b;
      840 	     return;
      841 
      842 arg_no_vla_parm:					/* "no_vla_parm" */
      843 	     fd.no_vla_parm = "1"b;
      844 	     fd.vla_parm = "0"b;
      845 	     return;
      846 
      847 arg_non_relocatable:				/* "non_relocatable", "nrlc" */
      848 	     fd.non_relocatable = "1"b;
      849 	     fd.relocatable = "0"b;
      850 	     return;
      851 
      852 
      853 arg_optimize:					/* "optimize", "ot" */
      854 	     fd.optimize = "1"b;
      855 	     fd.full_optimize = "0"b;
      856 	     fd.safe_optimize = "0"b;
      857 	     fd.no_optimize = "0"b;
      858 	     return;
      859 
      860 arg_profile:					/* "profile", "pf" */
      861 	     fd.profile = "1"b;
      862 	     fd.long_profile = "0"b;
      863 	     return;
      864 
      865 arg_relocatable:					/* "relocatable", "rlc" */
      866 	     fd.relocatable = "1"b;
      867 	     fd.non_relocatable = "0"b;
      868 	     return;
      869 
      870 arg_round:					/* "round" */
      871 	     fd.round = "1"b;
      872 	     fd.truncate = "0"b;
      873 	     return;
      874 
      875 arg_safe_optimize:					/* "safe_optimize", "safe_ot" */
      876 	     fd.safe_optimize = "1"b;
      877 	     fd.full_optimize = "0"b;
      878 	     fd.optimize = "0"b;
      879 	     fd.no_optimize = "0"b;
      880 	     return;
      881 
      882 arg_source:					/* "source", "sc" */
      883 arg_symbols:					/* "symbols", "sb" */
      884 	     call com_err_ (0, "new_fortran", """-^a"" is obsolete. Use ""-map"".", cmd_string);
      885 	     arg_error = "1"b;
      886 	     return;
      887 
      888 arg_static:					/* "static" */
      889 	     fd.static = "1"b;
      890 	     fd.auto = "0"b;
      891 	     return;
      892 
      893 arg_stringrange:					/* "stringrange", "strg" */
      894 	     fd.stringrange = "1"b;
      895 	     fd.no_stringrange = "0"b;
      896 	     return;
      897 
      898 arg_subscriptrange:					/* "subscriptrange", "subrg" */
      899 	     fd.subscriptrange = "1"b;
      900 	     fd.no_subscriptrange = "0"b;
      901 	     return;
      902 
      903 arg_super:					/* "super" */
      904 	     call com_err_ (0, "new_fortran", """-super"" is now implied by -optimize; it will be ignored.");
      905 	     return;
      906 
      907 arg_table:					/* "table", "tb" */
      908 	     fd.table = "1"b;
      909 	     fd.no_table = "0"b;
      910 	     fd.brief_table = "0"b;
      911 	     return;
      912 
      913 arg_time:						/* "time", "tm" */
      914 	     fd.time = "1"b;
      915 	     return;
      916 
      917 arg_time_ot:					/* "time_ot */
      918 	     fd.time_ot = "1"b;
      919 	     return;
      920 
      921 arg_top_down:					/* "top_down" */
      922 	     fd.top_down = "1"b;
      923 	     fd.consolidate = "0"b;
      924 	     return;
      925 
      926 arg_truncate:					/* "truncate", "tc" */
      927 	     fd.truncate = "1"b;
      928 	     fd.round = "0"b;
      929 	     return;
      930 
      931 arg_version:					/* "version" */
      932 	     fd.version = "1"b;
      933 	     fd.no_version = "0"b;
      934 	     return;
      935 
      936 arg_very_large_array:				/* "very_large_array", "vla" */
      937 	     fd.very_large_array = "1"b;
      938 	     fd.no_very_large_array = "0"b;
      939 	     return;
      940 
      941 arg_very_large_common:				/* "very_large_common", "vlc" */
      942 	     fd.very_large_common = "1"b;
      943 	     fd.no_very_large_array = "0"b;
      944 	     return;
      945 
      946 arg_vla_auto:					/* "vla_auto" */
      947 	     fd.vla_auto = "1"b;
      948 	     fd.no_very_large_array = "0"b;
      949 	     return;
      950 
      951 arg_vla_parm:					/* "vla_parm" */
      952 	     fd.vla_parm = "1"b;
      953 	     fd.no_vla_parm = "0"b;
      954 	     return;
      955 
      956 arg_vla_static:					/* "vla_static" */
      957 	     fd.vla_static = "1"b;
      958 	     fd.no_very_large_array = "0"b;
      959 	     return;
      960 
      961 parse_severity:
      962      procedure (level);
      963 
      964 dcl	level		char (*);
      965 dcl	level_no		fixed bin;
      966 
      967 	level_no = index ("1234", substr (level, 1, 1));
      968 
      969 	if substr (level, 1, 1) = "-"
      970 	then do;
      971 		arg_num = arg_num - 1;
      972 		call com_err_ (0, "new_fortran", "Missing severity number (1, 2, 3, or 4) before ""^a"".", level);
      973 		arg_error = "1"b;
      974 	     end;
      975 
      976 	else if level_no = 0 | substr (level, 2) ^= " "
      977 	then do;
      978 		call com_err_ (0, "new_fortran", "Severity must be 1, 2, 3, or 4. Not ""^a"".", level);
      979 		arg_error = "1"b;
      980 	     end;
      981 	else fd.severity = level_no;
      982      end /* parse_severity */;
      983 	end /* of argument entry */;
      984 
      985 /* entry point for %global */
      986 
      987 global:
      988      entry (cmd_string_ptr, cmd_string_len, fd_ptr, print_message);
      989 	begin;
      990 
      991 dcl	glb_case		(0:111) label variable init (glb_not_found, glb_ansi66, glb_ansi77, glb_auto,
      992 			glb_auto_zero, glb_binary_floating_point, glb_binary_floating_point, glb_brief, glb_brief,
      993 			glb_brief_table, glb_brief_table, glb_card, glb_check, glb_check, glb_check_multiply,
      994 			glb_check_multiply, glb_consolidate, glb_consolidate, glb_debug, glb_debug, glb_debug_cg, glb_debug_io, glb_debug_io,
      995 			glb_default_full, glb_default_full, glb_default_safe, glb_default_safe, glb_fold,
      996 			glb_free, glb_full_optimize, glb_full_optimize, glb_hexadecimal_floating_point,
      997 			glb_hexadecimal_floating_point, glb_la_auto, glb_la_static,
      998 			glb_large_array, glb_large_array, glb_line_numbers,
      999 			glb_line_numbers, glb_list, glb_list, glb_long, glb_long, glb_long_profile,
     1000 			glb_long_profile, glb_map, glb_nlno, glb_no_auto_zero, glb_no_check, glb_no_check,
     1001 			glb_no_check_multiply, glb_no_check_multiply,
     1002 	                    glb_no_debug_io, glb_no_debug_io, glb_no_fold, glb_no_large_array,
     1003 			glb_no_large_array, glb_no_line_numbers, glb_no_line_numbers, glb_no_map, glb_no_optimize,
     1004 			glb_no_optimize, glb_no_stringrange, glb_no_stringrange, glb_no_stringrange,
     1005 			glb_no_subscriptrange, glb_no_subscriptrange, glb_no_subscriptrange, glb_no_table,
     1006 			glb_no_table, glb_no_version, glb_no_very_large_array, glb_no_very_large_array,
     1007 			glb_no_vla_parm, glb_non_relocatable, glb_non_relocatable, glb_optimize, glb_optimize,
     1008 			glb_profile, glb_profile, glb_relocatable, glb_relocatable, glb_round, glb_safe,
     1009 			glb_safe_optimize, glb_safe_optimize, glb_source, glb_source, glb_static, glb_stringrange,
     1010 			glb_stringrange, glb_subscriptrange, glb_subscriptrange, glb_super, glb_symbols,
     1011 			glb_symbols, glb_table, glb_table, glb_time, glb_time, glb_time_ot, glb_top_down,
     1012 			glb_truncate, glb_truncate, glb_version, glb_very_large_array, glb_very_large_array,
     1013 			glb_very_large_common, glb_very_large_common, glb_vla_auto, glb_vla_parm, glb_vla_static);
     1014 
     1015 	     cmd = index (string (cmd_names), " " || cmd_string || " ");
     1016 	     if cmd ^= 0
     1017 	     then cmd = (cmd + 32) / 33;
     1018 	     goto glb_case (cmd);
     1019 
     1020 glb_not_found:					/* cmd_string not found */
     1021 glb_brief:					/* "brief", "bf" */
     1022 glb_brief_table:					/* "brief_table", "bftb" */
     1023 glb_check:					/* "check", "ck" */
     1024 glb_debug:					/* "debug", "db" */
     1025 glb_debug_cg:					/* "debug_cg" */
     1026 glb_debug_io:					/* "debug_io", "dbio" */
     1027 glb_full_optimize:					/* "full_optimize", "full_ot" */
     1028 glb_line_numbers:					/* "line_numbers", "ln" */
     1029 glb_list:						/* "list", "ls" */
     1030 glb_long:						/* "long", "lg" */
     1031 glb_long_profile:					/* "long_profile", "lpf" */
     1032 glb_map:						/* "map" */
     1033 glb_nlno:						/* "nlno" */
     1034 glb_no_check:					/* "no_check", "nck" */
     1035 glb_no_debug_io:					/* "no_debug_io", "ndbio" */
     1036 glb_no_line_numbers:				/* "no_line_numbers", "nln" */
     1037 glb_no_map:					/* "no_map" */
     1038 glb_no_optimize:					/* "no_optimize", "not" */
     1039 glb_no_table:					/* "no_table", "ntb" */
     1040 glb_no_version:					/* "no_version" */
     1041 glb_non_relocatable:				/* "non_relocatable", "nrlc" */
     1042 glb_optimize:					/* "optimize", "ot" */
     1043 glb_profile:					/* "profile", "pf" */
     1044 glb_relocatable:					/* "relocatable", "rlc" */
     1045 glb_safe_optimize:					/* "safe_optimize", "safe_ot" */
     1046 glb_source:					/* "source", "sc" */
     1047 glb_super:					/* "super" */
     1048 glb_symbols:					/* "symbols", "sb" */
     1049 glb_table:					/* "table", "tb" */
     1050 glb_time:						/* "time", "tm" */
     1051 glb_time_ot:					/* "time_ot" */
     1052 glb_version:					/* "version" */
     1053 	     call print_message (150, cmd_string);
     1054 	     return;
     1055 
     1056 glb_ansi66:					/* "ansi66" */
     1057 	     fd.ansi66 = "1"b;
     1058 	     if fd.ansi77
     1059 	     then do;
     1060 		     call print_message (191, "%global", cmd_string, "ansi77");
     1061 		     fd.ansi77 = "0"b;
     1062 		end;
     1063 	     return;
     1064 
     1065 glb_ansi77:					/* "ansi77" */
     1066 	     fd.ansi77 = "1"b;
     1067 	     if fd.ansi66
     1068 	     then do;
     1069 		     call print_message (191, "%global", cmd_string, "ansi66");
     1070 		     fd.ansi66 = "0"b;
     1071 		end;
     1072 	     return;
     1073 
     1074 glb_auto:						/* "auto" */
     1075 	     fd.auto = "1"b;
     1076 	     if fd.static
     1077 	     then do;
     1078 		     call print_message (191, "%global", cmd_string, "static");
     1079 		     fd.static = "0"b;
     1080 		end;
     1081 	     return;
     1082 
     1083 glb_auto_zero:					/* "auto_zero" */
     1084 	     fd.auto_zero = "1"b;
     1085 	     if fd.no_auto_zero
     1086 	     then do;
     1087 		     call print_message (191, "%global", cmd_string, "no_auto_zero");
     1088 		     fd.no_auto_zero = "0"b;
     1089 		end;
     1090 	     return;
     1091 
     1092 glb_binary_floating_point:				/* "binary_floating_point", "bfp" */
     1093 	     fd.binary_floating_point = "1"b;
     1094 	     if fd.hexadecimal_floating_point
     1095 	     then do;
     1096 		     call print_message (191, "%global", cmd_string, "hexadecimal_floating_point");
     1097 		     fd.hexadecimal_floating_point = "0"b;
     1098 		end;
     1099 	     return;
     1100 
     1101 glb_card:						/* "card" */
     1102 	     fd.card = "1"b;
     1103 	     if fd.free
     1104 	     then do;
     1105 		     call print_message (191, "%global", cmd_string, "free");
     1106 		     fd.free = "0"b;
     1107 		end;
     1108 	     return;
     1109 
     1110 glb_check_multiply:					/* "check_mulitply", "ckmpy" */
     1111 	     fd.check_multiply = "1"b;
     1112 	     if fd.no_check_multiply
     1113 	     then do;
     1114 		     call print_message (191, "%global", cmd_string, "no_check_multiply");
     1115 		     fd.no_check_multiply = "0"b;
     1116 		end;
     1117 	     return;
     1118 
     1119 glb_consolidate:					/* "consolidate", "cons" */
     1120 	     fd.consolidate = "1"b;
     1121 	     if fd.top_down
     1122 	     then do;
     1123 		     call print_message (191, "%global", cmd_string, "top_down");
     1124 		     fd.top_down = "0"b;
     1125 		end;
     1126 	     return;
     1127 
     1128 glb_default_full:					/* "default_full", "dff" */
     1129 	     fd.default_full = "1"b;
     1130 	     if fd.default_safe
     1131 	     then do;
     1132 		     call print_message (191, "%global", cmd_string, "default_safe");
     1133 		     fd.default_safe = "0"b;
     1134 		end;
     1135 	     return;
     1136 
     1137 glb_default_safe:					/* "default_safe", "dfs" */
     1138 glb_safe:						/* "safe" */
     1139 	     fd.default_safe = "1"b;
     1140 	     if fd.default_full
     1141 	     then do;
     1142 		     call print_message (191, "%global", cmd_string, "default_full");
     1143 		     fd.default_full = "0"b;
     1144 		end;
     1145 	     return;
     1146 
     1147 glb_fold:						/* "fold" */
     1148 	     fd.fold = "1"b;
     1149 	     if fd.no_fold
     1150 	     then do;
     1151 		     call print_message (191, "%global", cmd_string, "no_fold");
     1152 		     fd.no_fold = "0"b;
     1153 		end;
     1154 	     return;
     1155 
     1156 glb_free:						/* "free" */
     1157 	     fd.free = "1"b;
     1158 	     if fd.card
     1159 	     then do;
     1160 		     call print_message (191, "%global", cmd_string, "card");
     1161 		     fd.card = "0"b;
     1162 		end;
     1163 	     return;
     1164 
     1165 glb_hexadecimal_floating_point:			/* "hexadecimal_floating_point", "hfp" */
     1166 	     fd.hexadecimal_floating_point = "1"b;
     1167 	     if fd.binary_floating_point
     1168 	     then do;
     1169 		     call print_message (191, "%global", cmd_string, "binary_floating_point");
     1170 		     fd.binary_floating_point = "0"b;
     1171 		end;
     1172 	     return;
     1173 
     1174 glb_la_auto:					/* "la_auto" */
     1175 	     fd.la_auto = "1"b;
     1176 	     if fd.no_large_array
     1177 	     then do;
     1178 		     call print_message (191, "%global", cmd_string, "no_large_array");
     1179 		     fd.no_large_array = "0"b;
     1180 		end;
     1181 	     return;
     1182 
     1183 glb_la_static:					/* "la_static" */
     1184 	     fd.la_static = "1"b;
     1185 	     if fd.no_large_array
     1186 	     then do;
     1187 		     call print_message (191, "%global", cmd_string, "no_large_array");
     1188 		     fd.no_large_array = "0"b;
     1189 		end;
     1190 	     return;
     1191 
     1192 glb_large_array:					/* "large_array", "la" */
     1193 	     fd.large_array = "1"b;
     1194 	     if fd.no_large_array
     1195 	     then do;
     1196 		     call print_message (191, "%global", cmd_string, "no_large_array");
     1197 		     fd.no_large_array = "0"b;
     1198 		end;
     1199 	     return;
     1200 
     1201 glb_no_auto_zero:					/* "no_auto_zero" */
     1202 	     fd.no_auto_zero = "1"b;
     1203 	     if fd.auto_zero
     1204 	     then do;
     1205 		     call print_message (191, "%global", cmd_string, "auto_zero");
     1206 		     fd.auto_zero = "0"b;
     1207 		end;
     1208 	     return;
     1209 
     1210 glb_no_check_multiply:				/* "no_check_multiply", "nckmpy" */
     1211 	     fd.no_check_multiply = "1"b;
     1212 	     if fd.check_multiply
     1213 	     then do;
     1214 		     call print_message (191, "%global", cmd_string, "check_multiply");
     1215 		     fd.check_multiply = "0"b;
     1216 		end;
     1217 	     return;
     1218 
     1219 glb_no_fold:					/* "no_fold" */
     1220 	     fd.no_fold = "1"b;
     1221 	     if fd.fold
     1222 	     then do;
     1223 		     call print_message (191, "%global", cmd_string, "fold");
     1224 		     fd.fold = "0"b;
     1225 		end;
     1226 	     return;
     1227 
     1228 glb_no_large_array:					/* "no_large_array", "nla" */
     1229 	     fd.no_large_array = "1"b;
     1230 	     if fd.large_array
     1231 	     then do;
     1232 		     call print_message (191, "%global", cmd_string, "large_array");
     1233 		     fd.large_array = "0"b;
     1234 		end;
     1235 	     if fd.la_auto
     1236 	     then do;
     1237 		     call print_message (191, "%global", cmd_string, "la_auto");
     1238 		     fd.la_auto = "0"b;
     1239 		end;
     1240 	     if fd.la_static
     1241 	     then do;
     1242 		     call print_message (191, "%global", cmd_string, "la_static");
     1243 		     fd.la_static = "0"b;
     1244 		end;
     1245 	     if fd.very_large_array
     1246 	     then do;
     1247 		     call print_message (191, "%global", cmd_string, "very_large_array");
     1248 		     fd.very_large_array = "0"b;
     1249 		end;
     1250 	     if fd.vla_auto
     1251 	     then do;
     1252 		     call print_message (191, "%global", cmd_string, "vla_auto");
     1253 		     fd.vla_auto = "0"b;
     1254 		end;
     1255 	     if fd.vla_static
     1256 	     then do;
     1257 		     call print_message (191, "%global", cmd_string, "vla_static");
     1258 		     fd.vla_static = "0"b;
     1259 		end;
     1260 	     return;
     1261 
     1262 glb_no_stringrange:					/* "no_stringrange", "nstrg", "nostrg" */
     1263 	     fd.no_stringrange = "1"b;
     1264 	     if fd.stringrange
     1265 	     then do;
     1266 		     call print_message (191, "%global", cmd_string, "stringrange");
     1267 		     fd.stringrange = "0"b;
     1268 		end;
     1269 	     return;
     1270 
     1271 glb_no_subscriptrange:				/* "no_subscriptrange", "nsubrg", "nosubrg" */
     1272 	     fd.no_subscriptrange = "1"b;
     1273 	     if fd.subscriptrange
     1274 	     then do;
     1275 		     call print_message (191, "%global", cmd_string, "subscriptrange");
     1276 		     fd.subscriptrange = "0"b;
     1277 		end;
     1278 	     return;
     1279 
     1280 glb_no_very_large_array:				/* "no_very_large_array", "nvla" */
     1281 	     fd.no_very_large_array = "1"b;
     1282 	     if fd.very_large_array
     1283 	     then do;
     1284 		     call print_message (191, "%global", cmd_string, "very_large_array");
     1285 		     fd.very_large_array = "0"b;
     1286 		end;
     1287 	     if fd.very_large_common
     1288 	     then do;
     1289 		     call print_message (191, "%global", cmd_string, "very_large_common");
     1290 		     fd.very_large_common = "0"b;
     1291 		end;
     1292 	     if fd.vla_auto
     1293 	     then do;
     1294 		     call print_message (191, "%global", cmd_string, "vla_auto");
     1295 		     fd.vla_auto = "0"b;
     1296 		end;
     1297 	     if fd.vla_static
     1298 	     then do;
     1299 		     call print_message (191, "%global", cmd_string, "vla_static");
     1300 		     fd.vla_static = "0"b;
     1301 		end;
     1302 	     return;
     1303 
     1304 glb_no_vla_parm:					/* "no_vla_parm" */
     1305 	     fd.no_vla_parm = "1"b;
     1306 	     if fd.vla_parm
     1307 	     then do;
     1308 		     call print_message (191, "%global", cmd_string, "vla_parm");
     1309 		     fd.vla_parm = "0"b;
     1310 		end;
     1311 	     return;
     1312 
     1313 glb_round:					/* "round" */
     1314 	     fd.round = "1"b;
     1315 	     if fd.truncate
     1316 	     then do;
     1317 		     call print_message (191, "%global", cmd_string, "truncate");
     1318 		     fd.truncate = "0"b;
     1319 		end;
     1320 	     return;
     1321 
     1322 glb_static:					/* "static" */
     1323 	     fd.static = "1"b;
     1324 	     if fd.auto
     1325 	     then do;
     1326 		     call print_message (191, "%global", cmd_string, "auto");
     1327 		     fd.auto = "0"b;
     1328 		end;
     1329 	     return;
     1330 
     1331 glb_stringrange:					/* "stringrange", "strg" */
     1332 	     fd.stringrange = "1"b;
     1333 	     if fd.no_stringrange
     1334 	     then do;
     1335 		     call print_message (191, "%global", cmd_string, "no_stringrange");
     1336 		     fd.no_stringrange = "0"b;
     1337 		end;
     1338 	     return;
     1339 
     1340 glb_subscriptrange:					/* "subscriptrange", "subrg" */
     1341 	     fd.subscriptrange = "1"b;
     1342 	     if fd.no_subscriptrange
     1343 	     then do;
     1344 		     call print_message (191, "%global", cmd_string, "no_subscriptrange");
     1345 		     fd.no_subscriptrange = "0"b;
     1346 		end;
     1347 	     return;
     1348 
     1349 glb_top_down:					/* "top_down" */
     1350 	     fd.top_down = "1"b;
     1351 	     if fd.consolidate
     1352 	     then do;
     1353 		     call print_message (191, "%global", cmd_string, "consolidate");
     1354 		     fd.consolidate = "0"b;
     1355 		end;
     1356 	     return;
     1357 
     1358 glb_truncate:					/* "truncate", "tc" */
     1359 	     fd.truncate = "1"b;
     1360 	     if fd.round
     1361 	     then do;
     1362 		     call print_message (191, "%global", cmd_string, "round");
     1363 		     fd.round = "0"b;
     1364 		end;
     1365 	     return;
     1366 
     1367 glb_very_large_array:				/* "very_large_array", "vla" */
     1368 	     fd.very_large_array = "1"b;
     1369 	     if fd.no_very_large_array
     1370 	     then do;
     1371 		     call print_message (191, "%global", cmd_string, "no_very_large_array");
     1372 		     fd.no_very_large_array = "0"b;
     1373 		end;
     1374 	     if fd.no_large_array
     1375 	     then do;
     1376 		     call print_message (191, "%global", cmd_string, "no_large_array");
     1377 		     fd.no_large_array = "0"b;
     1378 		end;
     1379 	     return;
     1380 
     1381 glb_very_large_common:				/* "very_large_common", "vlc" */
     1382 	     fd.very_large_common = "1"b;
     1383 	     if fd.no_very_large_array
     1384 	     then do;
     1385 		     call print_message (191, "%global", cmd_string, "no_very_large_array");
     1386 		     fd.no_very_large_array = "0"b;
     1387 		end;
     1388 	     return;
     1389 
     1390 glb_vla_auto:					/* "vla_auto" */
     1391 	     fd.vla_auto = "1"b;
     1392 	     if fd.no_very_large_array
     1393 	     then do;
     1394 		     call print_message (191, "%global", cmd_string, "no_very_large_array");
     1395 		     fd.no_very_large_array = "0"b;
     1396 		end;
     1397 	     if fd.no_large_array
     1398 	     then do;
     1399 		     call print_message (191, "%global", cmd_string, "no_large_array");
     1400 		     fd.no_large_array = "0"b;
     1401 		end;
     1402 	     return;
     1403 
     1404 glb_vla_parm:					/* "vla_parm" */
     1405 	     fd.vla_parm = "1"b;
     1406 	     if fd.no_vla_parm
     1407 	     then do;
     1408 		     call print_message (191, "%global", cmd_string, "no_vla_parm");
     1409 		     fd.no_vla_parm = "0"b;
     1410 		end;
     1411 	     return;
     1412 
     1413 glb_vla_static:					/* "vla_static" */
     1414 	     fd.vla_static = "1"b;
     1415 	     if fd.no_very_large_array
     1416 	     then do;
     1417 		     call print_message (191, "%global", cmd_string, "no_very_large_array");
     1418 		     fd.no_very_large_array = "0"b;
     1419 		end;
     1420 	     if fd.no_large_array
     1421 	     then do;
     1422 		     call print_message (191, "%global", cmd_string, "no_large_array");
     1423 		     fd.no_large_array = "0"b;
     1424 		end;
     1425 	     return;
     1426 
     1427 	end /* of global entry */;
     1428 
     1429 
     1430 /* entry point for %option */
     1431 
     1432 option:
     1433      entry (cmd_string_ptr, cmd_string_len, fo_ptr, fd_ptr, global_fo_ptr, auto_option, static_option, print_message);
     1434 	begin;
     1435 
     1436 dcl	opt_case		(0:111) label variable init (opt_not_found, opt_ansi66, opt_ansi77, opt_auto,
     1437 			opt_auto_zero, opt_binary_floating_point, opt_binary_floating_point, opt_brief, opt_brief,
     1438 			opt_brief_table, opt_brief_table, opt_card, opt_check, opt_check, opt_check_multiply,
     1439 			opt_check_multiply, opt_consolidate, opt_consolidate, opt_debug, opt_debug, opt_debug_cg, opt_debug_io, opt_debug_io,
     1440 			opt_default_full, opt_default_full, opt_default_safe, opt_default_safe, opt_fold,
     1441 			opt_free, opt_full_optimize, opt_full_optimize, opt_hexadecimal_floating_point,
     1442 			opt_hexadecimal_floating_point, opt_la_auto, opt_la_static,
     1443 			opt_large_array, opt_large_array, opt_line_numbers,
     1444 			opt_line_numbers, opt_list, opt_list, opt_long, opt_long, opt_long_profile,
     1445 			opt_long_profile, opt_map, opt_nlno, opt_no_auto_zero, opt_no_check, opt_no_check,
     1446 			opt_no_check_multiply, opt_no_check_multiply,
     1447                               opt_no_debug_io, opt_no_debug_io, opt_no_fold, opt_no_large_array,
     1448 			opt_no_large_array, opt_no_line_numbers, opt_no_line_numbers, opt_no_map, opt_no_optimize,
     1449 			opt_no_optimize, opt_no_stringrange, opt_no_stringrange, opt_no_stringrange,
     1450 			opt_no_subscriptrange, opt_no_subscriptrange, opt_no_subscriptrange, opt_no_table,
     1451 			opt_no_table, opt_no_version, opt_no_very_large_array, opt_no_very_large_array,
     1452 			opt_no_vla_parm, opt_non_relocatable, opt_non_relocatable, opt_optimize, opt_optimize,
     1453 			opt_profile, opt_profile, opt_relocatable, opt_relocatable, opt_round, opt_safe,
     1454 			opt_safe_optimize, opt_safe_optimize, opt_source, opt_source, opt_static, opt_stringrange,
     1455 			opt_stringrange, opt_subscriptrange, opt_subscriptrange, opt_super, opt_symbols,
     1456 			opt_symbols, opt_table, opt_table, opt_time, opt_time, opt_time_ot, opt_top_down,
     1457 			opt_truncate, opt_truncate, opt_version, opt_very_large_array, opt_very_large_array,
     1458 			opt_very_large_common, opt_very_large_common, opt_vla_auto, opt_vla_parm, opt_vla_static);
     1459 
     1460 	     cmd = index (string (cmd_names), " " || cmd_string || " ");
     1461 	     if cmd ^= 0
     1462 	     then cmd = (cmd + 32) / 33;
     1463 	     goto opt_case (cmd);
     1464 
     1465 opt_not_found:					/* cmd_string not found */
     1466 opt_auto_zero:					/* "auto_zero" */
     1467 opt_binary_floating_point:				/* "binary_floating_point", "bfp" */
     1468 opt_brief:					/* "brief", "bf" */
     1469 opt_brief_table:					/* "brief_table", "bftb" */
     1470 opt_check:					/* "check", "ck" */
     1471 opt_consolidate:					/* "consolidate, "cons" */
     1472 opt_debug:					/* "debug", "db" */
     1473 opt_debug_cg:					/* "debug_cg" */
     1474 opt_debug_io:					/* "debug_io", "dbio" */
     1475 opt_full_optimize:					/* "full_optimize" */
     1476 opt_hexadecimal_floating_point:			/* "hexadecimal_floating_point, "hfp" */
     1477 opt_la_auto:					/* "la_auto" */
     1478 opt_la_static:					/* "la_static" */
     1479 opt_large_array:					/* "large_array", "la" */
     1480 opt_line_numbers:					/* "line_numbers", "ln" */
     1481 opt_list:						/* "list", "ls" */
     1482 opt_long:						/* "long", "lg" */
     1483 opt_long_profile:					/* "long_profile", "lpf" */
     1484 opt_map:						/* "map" */
     1485 opt_nlno:						/* "nlno" */
     1486 opt_no_auto_zero:					/* "no_auto_zero" */
     1487 opt_no_check:					/* "no_check", "nck" */
     1488 opt_no_debug_io:					/* "no_debug_io", "ndbio" */
     1489 opt_no_large_array:					/* "no_large_array", "nla" */
     1490 opt_no_line_numbers:				/* "no_line_numbers", "nln" */
     1491 opt_no_map:					/* "no_map" */
     1492 opt_no_optimize:					/* "no_optimize", "not" */
     1493 opt_no_table:					/* "no_table", "ntb" */
     1494 opt_no_version:					/* "no_version" */
     1495 opt_no_very_large_array:				/* "no_very_large_array", "nvla" */
     1496 opt_no_vla_parm:					/* "no_vla_parm" */
     1497 opt_non_relocatable:				/* "non_relocatable", "nrlc" */
     1498 opt_optimize:					/* "optimize", "ot" */
     1499 opt_profile:					/* "profile", "pf" */
     1500 opt_relocatable:					/* "relocatable", "rlc" */
     1501 opt_safe_optimize:					/* "safe_optimize", "safe_ot" */
     1502 opt_source:					/* "source", "sc" */
     1503 opt_super:					/* "super" */
     1504 opt_symbols:					/* "symbols", "sb" */
     1505 opt_table:					/* "table", "tb" */
     1506 opt_time:						/* "time", "tm" */
     1507 opt_time_ot:					/* "time_ot" */
     1508 opt_top_down:					/* "top_down" */
     1509 opt_version:					/* "version" */
     1510 opt_very_large_array:				/* "very_large_array", "vla" */
     1511 opt_very_large_common:				/* "very_large_common", "vlc" */
     1512 opt_vla_auto:					/* "vla_auto" */
     1513 opt_vla_parm:					/* "vla_parm" */
     1514 opt_vla_static:					/* "vla_static" */
     1515 	     call print_message (151, cmd_string);
     1516 	     return;
     1517 
     1518 opt_ansi66:					/* "ansi66" */
     1519 	     fo.ansi_77 = "0"b;
     1520 	     fd.ansi77 = "1"b;
     1521 	     if fd.ansi66
     1522 	     then do;
     1523 		     call print_message (191, "%option", cmd_string, "ansi66");
     1524 		     fd.ansi66 = "0"b;
     1525 		end;
     1526 	     return;
     1527 
     1528 opt_ansi77:					/* "ansi77" */
     1529 	     fo.ansi_77 = "1"b;
     1530 	     fd.ansi77 = "1"b;
     1531 	     if fd.ansi66
     1532 	     then do;
     1533 		     call print_message (191, "%option", cmd_string, "ansi66");
     1534 		     fd.ansi66 = "0"b;
     1535 		end;
     1536 	     return;
     1537 
     1538 opt_auto:						/* "auto" */
     1539 	     auto_option = "1"b;
     1540 	     static_option = "0"b;
     1541 	     if fd.static
     1542 	     then do;
     1543 		     call print_message (191, "%option", cmd_string, "static");
     1544 		     fd.static = "0"b;
     1545 		end;
     1546 	     return;
     1547 
     1548 opt_card:						/* "card" */
     1549 	     fo.card = "1"b;
     1550 	     if ^fd.no_fold
     1551 	     then fo.fold = "1"b;
     1552 	     fd.card = "1"b;
     1553 	     if fd.free
     1554 	     then do;
     1555 		     call print_message (191, "%option", cmd_string, "free");
     1556 		     fd.free = "0"b;
     1557 		end;
     1558 	     return;
     1559 
     1560 opt_check_multiply:					/* "check_multiply", "ckmpy" */
     1561 	     fo.check_multiply = "1"b;
     1562 	     fd.check_multiply = "1"b;
     1563 	     if fd.no_check_multiply
     1564 	     then do;
     1565 		     call print_message (191, "%option", cmd_string, "no_check_multiply");
     1566 		     fd.no_check_multiply = "0"b;
     1567 		end;
     1568 	     return;
     1569 
     1570 opt_fold:						/* "fold" */
     1571 	     fo.fold = "1"b;
     1572 	     fd.fold = "1"b;
     1573 	     if fd.no_fold
     1574 	     then do;
     1575 		     call print_message (191, "%option", cmd_string, "no_fold");
     1576 		     fd.no_fold = "0"b;
     1577 		end;
     1578 	     return;
     1579 
     1580 opt_free:						/* "free" */
     1581 	     fo.card = "0"b;
     1582 	     if ^fd.fold
     1583 	     then fo.fold = "0"b;
     1584 	     fd.free = "1"b;
     1585 	     if fd.card
     1586 	     then do;
     1587 		     call print_message (191, "%option", cmd_string, "card");
     1588 		     fd.card = "0"b;
     1589 		end;
     1590 	     return;
     1591 
     1592 opt_no_check_multiply:				/* "no_check_multiply", "nckmpy" */
     1593 	     fo.check_multiply = "0"b;
     1594 	     fd.no_check_multiply = "1"b;
     1595 	     if fd.check_multiply
     1596 	     then do;
     1597 		     call print_message (191, "%option", cmd_string, "check_multiply");
     1598 		     fd.check_multiply = "0"b;
     1599 		end;
     1600 	     return;
     1601 
     1602 opt_default_full:					/* "default_full", "dff" */
     1603 	     if ^fd.safe_optimize
     1604 	     then fo.ignore_articulation_blocks = "1"b;
     1605 	     fd.default_full = "1"b;
     1606 	     if fd.default_safe
     1607 	     then do;
     1608 		     call print_message (191, "%option", cmd_string, "default_safe");
     1609 		     fd.default_safe = "0"b;
     1610 		end;
     1611 	     return;
     1612 
     1613 opt_default_safe:					/* "default_safe", "dfs" */
     1614 opt_safe:						/* "safe" */
     1615 	     if ^fd.full_optimize
     1616 	     then fo.ignore_articulation_blocks = "0"b;
     1617 	     fd.default_safe = "1"b;
     1618 	     if fd.default_full
     1619 	     then do;
     1620 		     call print_message (901, "%option", cmd_string, "default_full");
     1621 		     fd.default_full = "0"b;
     1622 		end;
     1623 	     return;
     1624 
     1625 opt_no_fold:					/* "no_fold" */
     1626 	     fo.fold = "0"b;
     1627 	     fd.no_fold = "1"b;
     1628 	     if fd.fold
     1629 	     then do;
     1630 		     call print_message (191, "%option", cmd_string, "fold");
     1631 		     fd.fold = "0"b;
     1632 		end;
     1633 	     return;
     1634 
     1635 opt_no_stringrange:					/* "no_stringrange", "nstrg", "nostrg" */
     1636 	     fo.stringrange = "0"b;
     1637 	     fd.no_stringrange = "1"b;
     1638 	     if fd.stringrange
     1639 	     then do;
     1640 		     call print_message (191, "%option", cmd_string, "stringrange");
     1641 		     fd.stringrange = "0"b;
     1642 		end;
     1643 	     return;
     1644 
     1645 opt_no_subscriptrange:				/* "no_subscriptrange", "nsubrg", "nosubrg" */
     1646 	     fo.subscriptrange = "0"b;
     1647 	     fd.no_subscriptrange = "1"b;
     1648 	     if fd.subscriptrange
     1649 	     then do;
     1650 		     call print_message (191, "%option", cmd_string, "subscriptrange");
     1651 		     fd.subscriptrange = "0"b;
     1652 		end;
     1653 	     return;
     1654 
     1655 opt_round:					/* "round" */
     1656 	     fo.do_rounding = "1"b;
     1657 	     fd.round = "1"b;
     1658 	     if fd.truncate
     1659 	     then do;
     1660 		     call print_message (191, "%option", cmd_string, "truncate");
     1661 		     fd.truncate = "0"b;
     1662 		end;
     1663 	     return;
     1664 
     1665 opt_static:					/* "static" */
     1666 	     static_option = "1"b;
     1667 	     auto_option = "0"b;
     1668 	     fd.static = "1"b;
     1669 	     if fd.auto
     1670 	     then do;
     1671 		     call print_message (191, "%option", cmd_string, "auto");
     1672 		     fd.auto = "0"b;
     1673 		end;
     1674 	     return;
     1675 
     1676 opt_stringrange:					/* "stringrange", "strg" */
     1677 	     fo.stringrange = "1"b;
     1678 	     fd.stringrange = "1"b;
     1679 	     if fd.no_stringrange
     1680 	     then do;
     1681 		     call print_message (191, "%option", cmd_string, "no_stringrange");
     1682 		     fd.no_stringrange = "0"b;
     1683 		end;
     1684 	     return;
     1685 
     1686 opt_subscriptrange:					/* "subscriptrange", "subrg" */
     1687 	     fo.subscriptrange = "1"b;
     1688 	     fd.subscriptrange = "1"b;
     1689 	     if fd.no_subscriptrange
     1690 	     then do;
     1691 		     call print_message (191, "%option", cmd_string, "no_subscriptrange");
     1692 		     fd.no_subscriptrange = "0"b;
     1693 		end;
     1694 	     return;
     1695 
     1696 opt_truncate:					/* "truncate", "tc" */
     1697 	     fo.do_rounding = "0"b;
     1698 	     fd.truncate = "1"b;
     1699 	     if fd.round
     1700 	     then do;
     1701 		     call print_message (191, "%option", cmd_string, "round");
     1702 		     fd.round = "0"b;
     1703 		end;
     1704 	     return;
     1705 						/* end of option processing */
     1706 	end /* of option entry */;
     1707 
     1708 /* entry point to set fortran options based on fortran_declared structure */
     1709 
     1710 set:
     1711      entry (fd_ptr, fo_ptr);
     1712 
     1713 	if fd.ansi66
     1714 	then fo.ansi_77 = "0"b;
     1715 
     1716 	if fd.ansi77
     1717 	then do;
     1718 		if ^(fd.optimize | fd.safe_optimize | fd.full_optimize)
     1719 		then
     1720 		     fo.subscriptrange, fo.stringrange, fo.check_multiply = "1"b;
     1721 		fo.ansi_77 = "1"b;
     1722 	     end;
     1723 
     1724 	if fd.auto
     1725 	then fo.static_storage = "0"b;
     1726 
     1727 	if fd.auto_zero
     1728 	then fo.auto_zero = "1"b;
     1729 
     1730 	if fd.binary_floating_point
     1731 	then fo.hfp = "0"b;
     1732 
     1733 	if fd.brief
     1734 	then fo.brief = "1"b;
     1735 
     1736 	if fd.brief_table
     1737 	then fo.brief_table = "1"b;
     1738 
     1739 	if fd.card
     1740 	then fo.card, fo.fold = "1"b;
     1741 
     1742 	if fd.check
     1743 	then fo.check = "1"b;
     1744 
     1745 	if fd.check_multiply
     1746 	then fo.check_multiply = "1"b;
     1747 
     1748 	if fd.consolidate
     1749 	then fo.consolidate = "1"b;
     1750 
     1751 	if fd.debug
     1752 	then fo.stop_after_cg = "1"b;
     1753 
     1754 	if fd.debug_cg
     1755 	then fo.stop_after_parse, fo.stop_after_cg = "1"b;
     1756 
     1757 	if fd.debug_io
     1758           then fo.debug_io = "1"b;
     1759 
     1760 	if fd.default_safe
     1761 	then fo.ignore_articulation_blocks = "0"b;
     1762 	else fo.ignore_articulation_blocks = "1"b;
     1763 
     1764 	if fd.fold
     1765 	then fo.fold = "1"b;
     1766 
     1767 	if fd.free
     1768 	then do;
     1769 		fo.card = "0"b;
     1770 		if ^fd.fold
     1771 		then fo.fold = "0"b;
     1772 	     end;
     1773 
     1774 	if fd.full_optimize
     1775 	then fo.optimize, fo.consolidate, fo.ignore_articulation_blocks = "1"b;
     1776 
     1777 	if fd.hexadecimal_floating_point
     1778 	then fo.hfp = "1"b;
     1779 
     1780 	if fd.la_auto
     1781 	then fo.LA_auto = "1"b;
     1782 
     1783 	if fd.la_static
     1784 	then fo.LA_static = "1"b;
     1785 
     1786 	if fd.large_array
     1787 	then do;
     1788 		fo.LA_auto = "1"b;
     1789 		fo.LA_static = "1"b;
     1790 	     end;
     1791 
     1792 	if fd.line_numbers
     1793 	then fo.has_line_numbers = "1"b;
     1794 
     1795 	if fd.long
     1796 	then fo.brief = "0"b;
     1797 
     1798 	if fd.long_profile
     1799 	then fo.profile, fo.long_profile = "1"b;
     1800 
     1801 	if fd.list
     1802 	then string (fo.listing) = "1111"b;
     1803 
     1804 	if fd.map
     1805 	then substr (string (fo.listing), 1, 3) = "111"b;
     1806 
     1807 	if fd.no_auto_zero
     1808 	then fo.auto_zero = "0"b;
     1809 
     1810 	if fd.no_check
     1811 	then fo.check = "0"b;
     1812 
     1813 	if fd.no_fold
     1814 	then fo.fold = "0"b;
     1815 
     1816 	if fd.no_large_array
     1817 	then do;
     1818 		fo.LA_auto = "0"b;
     1819 		fo.LA_static = "0"b;
     1820 	     end;
     1821 
     1822 	if fd.no_line_numbers
     1823 	then fo.has_line_numbers = "0"b;
     1824 
     1825 	if fd.no_map
     1826 	then string (fo.listing) = "0000"b;
     1827 
     1828 	if fd.no_optimize
     1829 	then fo.optimize = "0"b;
     1830 
     1831 	if fd.no_check_multiply
     1832 	then fo.check_multiply = "0"b;
     1833 
     1834 	if fd.no_stringrange
     1835 	then fo.stringrange = "0"b;
     1836 
     1837 	if fd.no_subscriptrange
     1838 	then fo.subscriptrange = "0"b;
     1839 
     1840 	if fd.no_table
     1841 	then fo.table = "0"b;
     1842 
     1843 /* This next bit of code is order dependant.  -no_vla and -vla_parm
     1844*	   are supposed to be independant of each other but -no_vla clears
     1845*	   fo.VLA_parm here.  This is corrected later on by -vla_parm if
     1846*	   it is set. */
     1847 
     1848 	if fd.no_very_large_array
     1849 	then do;
     1850 		fo.VLA_auto = "0"b;
     1851 		fo.VLA_parm = "0"b;
     1852 		fo.VLA_static = "0"b;
     1853 		fo.VLC = "0"b;
     1854 	     end;
     1855 
     1856 	if fd.no_vla_parm
     1857 	then fo.VLA_parm = "0"b;
     1858 
     1859 	if fd.non_relocatable
     1860 	then fo.relocatable = "0"b;
     1861 
     1862 	if fd.optimize
     1863 	then fo.optimize, fo.consolidate = "1"b;
     1864 
     1865 	if fd.profile
     1866 	then fo.profile = "1"b;
     1867 
     1868 	if fd.relocatable
     1869 	then fo.relocatable = "1"b;
     1870 
     1871 	if fd.round
     1872 	then fo.do_rounding = "1"b;
     1873 
     1874 	if fd.safe_optimize
     1875 	then do;
     1876 		fo.optimize, fo.consolidate = "1"b;
     1877 		fo.ignore_articulation_blocks = "0"b;
     1878 	     end;
     1879 
     1880 	fo.severity = fd.severity;
     1881 
     1882 	if fd.static
     1883 	then fo.static_storage = "1"b;
     1884 
     1885 	if fd.stringrange
     1886 	then fo.stringrange = "1"b;
     1887 
     1888 	if fd.subscriptrange
     1889 	then fo.subscriptrange = "1"b;
     1890 
     1891 	if fd.table | (^fd.no_table & ^fo.optimize & ^fd.brief_table)
     1892 	then fo.table = "1"b;
     1893 
     1894 	if fd.time
     1895 	then fo.time = "1"b;
     1896 
     1897 	if fd.time_ot
     1898 	then fo.time_optimizer = "1"b;
     1899 
     1900 	if fd.top_down
     1901 	then fo.consolidate = "0"b;
     1902 
     1903 	if fd.truncate
     1904 	then fo.do_rounding = "0"b;
     1905 
     1906 	if fd.very_large_array
     1907 	then do;
     1908 		fo.VLA_auto = "1"b;
     1909 		if ^fd.no_vla_parm
     1910 		then fo.VLA_parm = "1"b;
     1911 		fo.VLA_static = "1"b;
     1912 		fo.VLC = "1"b;
     1913 		fo.LA_auto = "1"b;
     1914 		fo.LA_static = "1"b;
     1915 	     end;
     1916 
     1917 	if fd.very_large_common
     1918 	then do;
     1919 		fo.VLC = "1"b;
     1920 		if ^fd.no_vla_parm
     1921 		then fo.VLA_parm = "1"b;
     1922 	     end;
     1923 
     1924 	if fd.vla_auto
     1925 	then do;
     1926 		fo.VLA_auto = "1"b;
     1927 		if ^fd.no_vla_parm
     1928 		then fo.VLA_parm = "1"b;
     1929 		fo.LA_auto = "1"b;
     1930 	     end;
     1931 
     1932 	if fd.vla_parm
     1933 	then do;
     1934 		if ^fd.no_vla_parm
     1935 		then fo.VLA_parm = "1"b;
     1936 	     end;
     1937 
     1938 	if fd.vla_static
     1939 	then do;
     1940 		fo.VLA_static = "1"b;
     1941 		if ^fd.no_vla_parm
     1942 		then fo.VLA_parm = "1"b;
     1943 		fo.LA_static = "1"b;
     1944 	     end;
     1945 
     1946 	return;					/* end of entry set */
     1947 
     1948 /* entry point for checking argument conflicts */
     1949 
     1950 check_args:
     1951      entry (fd_ptr, arg_error);
     1952 	begin;
     1953 
     1954 	     if fd.very_large_array & fd.no_large_array
     1955 	     then call incompatible_args ("-very_large_array", "-no_large_array");
     1956 
     1957 	     if fd.vla_auto & fd.no_large_array
     1958 	     then call incompatible_args ("-vla_auto", "-no_large_array");
     1959 
     1960 	     if fd.vla_static & fd.no_large_array
     1961 	     then call incompatible_args ("-vla_static", "-no_large_array");
     1962 
     1963 	     if fd.line_numbers & fd.card
     1964 	     then call incompatible_args ("-card", "-line_numbers");
     1965 
     1966 	     if fd.optimize
     1967 	     then do;
     1968 		     if fd.subscriptrange
     1969 		     then call incompatible_args ("-optimize", "-subscriptrange");
     1970 		     if fd.stringrange
     1971 		     then call incompatible_args ("-optimize", "-stringrange");
     1972 		end;
     1973 
     1974 	     if fd.safe_optimize
     1975 	     then do;
     1976 		     if fd.subscriptrange
     1977 		     then call incompatible_args ("-safe_optimize", "-subscriptrange");
     1978 		     if fd.stringrange
     1979 		     then call incompatible_args ("-safe_optimize", "-stringrange");
     1980 		end;
     1981 
     1982 	     if fd.full_optimize
     1983 	     then do;
     1984 		     if fd.subscriptrange
     1985 		     then call incompatible_args ("-full_optimize", "-subscriptrange");
     1986 		     if fd.stringrange
     1987 		     then call incompatible_args ("-full_optimize", "-stringrange");
     1988 		end;
     1989 	     return;
     1990 incompatible_args:
     1991      procedure (first_arg, second_arg);
     1992 
     1993 dcl	(first_arg,
     1994 	second_arg)	char (*);
     1995 
     1996 	call com_err_ (0, "new_fortran", "The options ""^a"" and ""^a"" are mutually incompatible.", first_arg,
     1997 	     second_arg);
     1998 	arg_error = "1"b;
     1999 	return;
     2000      end /* incompatible_args */;
     2001 	end /* of the arg_check entry */;
     2002 
     2003 /* entry point to resolve global/argument conflicts */
     2004 
     2005 check_global_args:
     2006      entry (global_fd_ptr, arg_fd_ptr, print_message);
     2007 	begin;
     2008 
     2009 	     if arg_fd.binary_floating_point & global_fd.hexadecimal_floating_point
     2010 	     then do;
     2011 		     call print_message (192, "-binary_floating_point", "hexadecimal_floating_point");
     2012 		     global_fd.hexadecimal_floating_point = "0"b;
     2013 		end;
     2014 	     else if arg_fd.hexadecimal_floating_point & global_fd.binary_floating_point
     2015 	     then do;
     2016 		     call print_message (192, "-hexadecimal_floating_point", "binary_floating_point");
     2017 		     global_fd.binary_floating_point = "0"b;
     2018 		end;
     2019 
     2020 /* In order to check if HFP mode is allowed, we generate a bogus call to
     2021*fort_hfp_math$conv_r_to_i_round.  If the user does not have access to use HFP
     2022*mode, the condition "cannot_enable_HFP_mode" will be signaled.  This is
     2023*admittedly a grotty way to do the test.  */
     2024 
     2025 	     if arg_fd.hexadecimal_floating_point | global_fd.hexadecimal_floating_point
     2026 	     then do;
     2027 		     on cannot_enable_HFP_mode
     2028 			begin;
     2029 			     call print_message (522);
     2030 			end;
     2031 		     dummy_var = fort_hfp_math$conv_r_to_i_round ("0"b, 0);
     2032 		     revert cannot_enable_HFP_mode;
     2033 		end;
     2034 
     2035 	     if arg_fd.optimize | arg_fd.safe_optimize | arg_fd.full_optimize
     2036 	     then do;
     2037 		     if global_fd.stringrange
     2038 		     then do;
     2039 			     if arg_fd.optimize
     2040 			     then call print_message (192, "-optimize", "stringrange");
     2041 			     else if arg_fd.safe_optimize
     2042 			     then call print_message (192, "-safe_optimize", "stringrange");
     2043 			     else if arg_fd.full_optimize
     2044 			     then call print_message (192, "-full_optimize", "stringrange");
     2045 			     global_fd.stringrange = "0"b;
     2046 			end;
     2047 		     if global_fd.subscriptrange
     2048 		     then do;
     2049 			     if arg_fd.optimize
     2050 			     then call print_message (192, "optimize", "subscriptrange");
     2051 			     else if fd.safe_optimize
     2052 			     then call print_message (192, "-safe_optimize", "subscriptrange");
     2053 			     else if fd.full_optimize
     2054 			     then call print_message (192, "-full_optimize", "subscriptrange");
     2055 			     global_fd.subscriptrange = "0"b;
     2056 			end;
     2057 		end;
     2058 
     2059 	     if arg_fd.stringrange & global_fd.no_stringrange
     2060 	     then do;
     2061 		     call print_message (192, "-stringrange", "no_stringrange");
     2062 		     global_fd.no_stringrange = "0"b;
     2063 		end;
     2064 	     else if arg_fd.no_stringrange & global_fd.stringrange
     2065 	     then do;
     2066 		     call print_message (192, "-no_stringrange", "stringrange");
     2067 		     global_fd.stringrange = "0"b;
     2068 		end;
     2069 
     2070 	     if arg_fd.subscriptrange & global_fd.no_subscriptrange
     2071 	     then do;
     2072 		     call print_message (192, "-subscriptrange", "no_subscriptrange");
     2073 		     global_fd.no_subscriptrange = "0"b;
     2074 		end;
     2075 	     else if arg_fd.no_subscriptrange & global_fd.subscriptrange
     2076 	     then do;
     2077 		     call print_message (192, "-no_subscriptrange", "subscriptrange");
     2078 		     global_fd.subscriptrange = "0"b;
     2079 		end;
     2080 
     2081 	     if arg_fd.auto_zero & global_fd.no_auto_zero
     2082 	     then do;
     2083 		     call print_message (192, "-auto_zero", "no_auto_zero");
     2084 		     global_fd.no_auto_zero = "0"b;
     2085 		end;
     2086 	     else if arg_fd.no_auto_zero & global_fd.auto_zero
     2087 	     then do;
     2088 		     call print_message (192, "-no_auto_zero", "auto_zero");
     2089 		     global_fd.auto_zero = "0"b;
     2090 		end;
     2091 
     2092 	     if arg_fd.round & global_fd.truncate
     2093 	     then do;
     2094 		     call print_message (192, "-round", "truncate");
     2095 		     global_fd.truncate = "0"b;
     2096 		end;
     2097 	     else if arg_fd.truncate & global_fd.round
     2098 	     then do;
     2099 		     call print_message (192, "-truncate", "round");
     2100 		     global_fd.round = "0"b;
     2101 		end;
     2102 
     2103 	     if arg_fd.card & global_fd.free
     2104 	     then do;
     2105 		     call print_message (192, "-card", "free");
     2106 		     global_fd.free = "0"b;
     2107 		end;
     2108 	     else if arg_fd.free & global_fd.card
     2109 	     then do;
     2110 		     call print_message (192, "-free", "card");
     2111 		     global_fd.card = "0"b;
     2112 		end;
     2113 
     2114 	     if arg_fd.fold & global_fd.no_fold
     2115 	     then do;
     2116 		     call print_message (192, "-fold", "no_fold");
     2117 		     global_fd.no_fold = "0"b;
     2118 		end;
     2119 	     else if arg_fd.no_fold & global_fd.fold
     2120 	     then do;
     2121 		     call print_message (192, "-no_fold", "fold");
     2122 		     global_fd.fold = "0"b;
     2123 		end;
     2124 
     2125 	     if arg_fd.ansi66 & global_fd.ansi77
     2126 	     then do;
     2127 		     call print_message (192, "-ansi66", "ansi77");
     2128 		     global_fd.ansi77 = "0"b;
     2129 		end;
     2130 	     else if arg_fd.ansi77 & global_fd.ansi66
     2131 	     then do;
     2132 		     call print_message (192, "-ansi77", "ansi66");
     2133 		     global_fd.ansi66 = "0"b;
     2134 		end;
     2135 
     2136 	     if arg_fd.check_multiply & global_fd.no_check_multiply
     2137 	     then do;
     2138 		     call print_message (192, "-check_multiply", "no_check_multiply");
     2139 		     global_fd.no_check_multiply = "0"b;
     2140 		end;
     2141 	     else if arg_fd.no_check_multiply & global_fd.check_multiply
     2142 	     then do;
     2143 		     call print_message (192, "-no_check_multiply", "check_multiply");
     2144 		     global_fd.check_multiply = "0"b;
     2145 		end;
     2146 
     2147 	     if arg_fd.consolidate & global_fd.top_down
     2148 	     then do;
     2149 		     call print_message (192, "-consolidate", "top_down");
     2150 		     global_fd.top_down = "0"b;
     2151 		end;
     2152 	     else if arg_fd.top_down & global_fd.consolidate
     2153 	     then do;
     2154 		     call print_message (192, "-top_down", "consolidate");
     2155 		     global_fd.consolidate = "0"b;
     2156 		end;
     2157 
     2158 	     if arg_fd.default_full & global_fd.default_safe
     2159 	     then do;
     2160 		     call print_message (192, "-default_full", "default_safe");
     2161 		     global_fd.default_safe = "0"b;
     2162 		end;
     2163 	     else if arg_fd.default_safe & global_fd.default_full
     2164 	     then do;
     2165 		     call print_message (192, "-default_safe", "default_full");
     2166 		     global_fd.default_full = "0"b;
     2167 		end;
     2168 
     2169 	     if arg_fd.auto & global_fd.static
     2170 	     then do;
     2171 		     call print_message (192, "-auto", "static");
     2172 		     global_fd.static = "0"b;
     2173 		end;
     2174 	     else if arg_fd.static & global_fd.auto
     2175 	     then do;
     2176 		     call print_message (192, "-static", "auto");
     2177 		     global_fd.auto = "0"b;
     2178 		end;
     2179 
     2180 	     if arg_fd.large_array & global_fd.no_large_array
     2181 	     then do;
     2182 		     call print_message (192, "-large_array", "no_large_array");
     2183 		     global_fd.no_large_array = "0"b;
     2184 		end;
     2185 	     else if arg_fd.no_large_array & global_fd.large_array
     2186 	     then do;
     2187 		     call print_message (192, "-no_large_array", "large_array");
     2188 		     global_fd.large_array = "0"b;
     2189 		end;
     2190 
     2191 	     if arg_fd.la_auto & global_fd.no_large_array
     2192 	     then do;
     2193 		     call print_message (192, "-la_auto", "no_large_array");
     2194 		     global_fd.no_large_array = "0"b;
     2195 		end;
     2196 	     else if arg_fd.no_large_array & global_fd.la_auto
     2197 	     then do;
     2198 		     call print_message (192, "-no_large_array", "la_auto");
     2199 		     global_fd.la_auto = "0"b;
     2200 		end;
     2201 
     2202 	     if arg_fd.la_static & global_fd.no_large_array
     2203 	     then do;
     2204 		     call print_message (192, "-la_static", "no_large_array");
     2205 		     global_fd.no_large_array = "0"b;
     2206 		end;
     2207 	     else if arg_fd.no_large_array & global_fd.la_static
     2208 	     then do;
     2209 		     call print_message (192, "-no_large_array", "la_static");
     2210 		     global_fd.la_static = "0"b;
     2211 		end;
     2212 
     2213 	     if arg_fd.no_large_array & global_fd.very_large_array
     2214 	     then do;
     2215 		     call print_message (192, "-no_large_array", "-very_large_array");
     2216 		     global_fd.very_large_array = "0"b;
     2217 		end;
     2218 	     else if arg_fd.very_large_array & global_fd.no_large_array
     2219 	     then do;
     2220 		     call print_message (192, "-very_large_array", "-no_large_array");
     2221 		     global_fd.no_large_array = "0"b;
     2222 		end;
     2223 
     2224 	     if arg_fd.no_large_array & global_fd.vla_auto
     2225 	     then do;
     2226 		     call print_message (192, "-no_large_array", "-vla_auto");
     2227 		     global_fd.vla_auto = "0"b;
     2228 		end;
     2229 	     else if arg_fd.vla_auto & global_fd.no_large_array
     2230 	     then do;
     2231 		     call print_message (192, "-vla_auto", "-no_large_array");
     2232 		     global_fd.no_large_array = "0"b;
     2233 		end;
     2234 
     2235 	     if arg_fd.no_large_array & global_fd.vla_static
     2236 	     then do;
     2237 		     call print_message (192, "-no_large_array", "-vla_static");
     2238 		     global_fd.vla_static = "0"b;
     2239 		end;
     2240 	     else if arg_fd.vla_static & global_fd.no_large_array
     2241 	     then do;
     2242 		     call print_message (192, "-vla_static", "-no_large_array");
     2243 		     global_fd.no_large_array = "0"b;
     2244 		end;
     2245 
     2246 	     if arg_fd.very_large_array & global_fd.no_very_large_array
     2247 	     then do;
     2248 		     call print_message (192, "-very_large_array", "no_very_large_array");
     2249 		     global_fd.no_very_large_array = "0"b;
     2250 		end;
     2251 	     else if arg_fd.no_very_large_array & global_fd.very_large_array
     2252 	     then do;
     2253 		     call print_message (192, "-no_very_large_array", "very_large_array");
     2254 		     global_fd.very_large_array = "0"b;
     2255 		end;
     2256 
     2257 	     if arg_fd.very_large_common & global_fd.no_very_large_array
     2258 	     then do;
     2259 		     call print_message (192, "-very_large_common", "no_very_large_array");
     2260 		     global_fd.no_very_large_array = "0"b;
     2261 		end;
     2262 	     else if arg_fd.no_very_large_array & global_fd.very_large_common
     2263 	     then do;
     2264 		     call print_message (192, "-no_very_large_array", "very_large_common");
     2265 		     global_fd.very_large_common = "0"b;
     2266 		end;
     2267 
     2268 	     if arg_fd.vla_auto & global_fd.no_very_large_array
     2269 	     then do;
     2270 		     call print_message (192, "-vla_auto", "no_very_large_array");
     2271 		     global_fd.no_very_large_array = "0"b;
     2272 		end;
     2273 	     else if arg_fd.no_very_large_array & global_fd.vla_auto
     2274 	     then do;
     2275 		     call print_message (192, "-no_very_large_array", "vla_auto");
     2276 		     global_fd.vla_auto = "0"b;
     2277 		end;
     2278 
     2279 	     if arg_fd.vla_parm & global_fd.no_vla_parm
     2280 	     then do;
     2281 		     call print_message (192, "-vla_parm", "no_vla_parm");
     2282 		     global_fd.no_vla_parm = "0"b;
     2283 		end;
     2284 	     else if arg_fd.no_vla_parm & global_fd.vla_parm
     2285 	     then do;
     2286 		     call print_message (192, "-no_vla_parm", "vla_parm");
     2287 		     global_fd.vla_parm = "0"b;
     2288 		end;
     2289 
     2290 	     if arg_fd.vla_static & global_fd.no_very_large_array
     2291 	     then do;
     2292 		     call print_message (192, "-vla_static", "no_very_large_array");
     2293 		     global_fd.no_very_large_array = "0"b;
     2294 		end;
     2295 	     else if arg_fd.no_very_large_array & global_fd.vla_static
     2296 	     then do;
     2297 		     call print_message (192, "-no_very_large_array", "vla_static");
     2298 		     global_fd.vla_static = "0"b;
     2299 		end;
     2300 
     2301 	     return;
     2302 	end /* of global_arg_check entry */;
     2303 
     2304 /* entry point to create fortran options string */
     2305 
     2306 options_string:
     2307      entry (fort_op_ptr, op_string, VLA_words_per_seg);
     2308 
     2309 	op_string = "";
     2310 	if fort_op.ansi_77
     2311 	then op_string = op_string || "ansi77 ";
     2312 	else op_string = op_string || "ansi66 ";
     2313 	if fort_op.hfp
     2314 	then op_string = op_string || "hexadecimal_floating_point ";
     2315 	else op_string = op_string || "binary_floating_point ";
     2316 	if fort_op.is_fast
     2317 	then op_string = op_string || "fast ";
     2318 	if fort_op.has_line_numbers
     2319 	then op_string = op_string || "line_numbers ";
     2320 	if fort_op.table
     2321 	then op_string = op_string || "table ";
     2322 	if fort_op.subscriptrange
     2323 	then op_string = op_string || "subscriptrange ";
     2324 	if fort_op.stringrange
     2325 	then op_string = op_string || "stringrange ";
     2326 	if fort_op.brief_table
     2327 	then op_string = op_string || "brief_table ";
     2328 	if fort_op.profile & ^fort_op.long_profile
     2329 	then op_string = op_string || "profile ";
     2330 	if fort_op.profile & fort_op.long_profile
     2331 	then op_string = op_string || "long_profile ";
     2332 	if fort_op.do_rounding
     2333 	then op_string = op_string || "round ";
     2334 	else op_string = op_string || "truncate ";
     2335 	if fort_op.check_multiply
     2336 	then op_string = op_string || "check_multiply ";
     2337 	if fort_op.LA_auto & fort_op.LA_static
     2338 	then op_string = op_string || "LA ";
     2339 	else if fort_op.LA_auto
     2340 	then op_string = op_string || "LA_AUTO ";
     2341 	else if fort_op.LA_static
     2342 	then op_string = op_string || "LA_STATIC ";
     2343 	if fort_op.VLA_auto | fort_op.VLA_parm | fort_op.VLA_static | fort_op.VLC
     2344 	then do;
     2345 		if VLA_words_per_seg = 262144
     2346 		then fort_op.VLA_is_256K = "1"b;
     2347 		else fort_op.VLA_is_256K = "0"b;
     2348 		if fort_op.VLA_auto & fort_op.VLA_parm & fort_op.VLA_static & fort_op.VLC
     2349 		then do;
     2350 			if fort_op.VLA_is_256K
     2351 			then op_string = op_string || "VLA/256K ";
     2352 			else op_string = op_string || "VLA ";
     2353 		     end;
     2354 		else do;
     2355 			if fort_op.VLA_auto
     2356 			then do;
     2357 				if fort_op.VLA_is_256K
     2358 				then op_string = op_string || "VLA_AUTO/256K ";
     2359 				else op_string = op_string || "VLA_AUTO ";
     2360 			     end;
     2361 			if fort_op.VLA_parm
     2362 			then do;
     2363 				if fort_op.VLA_is_256K
     2364 				then op_string = op_string || "VLA_PARM/256K ";
     2365 				else op_string = op_string || "VLA_PARM ";
     2366 			     end;
     2367 			if fort_op.VLA_static
     2368 			then do;
     2369 				if fort_op.VLA_is_256K
     2370 				then op_string = op_string || "VLA_STATIC/256K ";
     2371 				else op_string = op_string || "VLA_STATIC ";
     2372 			     end;
     2373 			if fort_op.VLC
     2374 			then do;
     2375 				if fort_op.VLA_is_256K
     2376 				then op_string = op_string || "VLC/256K ";
     2377 				else op_string = op_string || "VLC ";
     2378 			     end;
     2379 		     end;
     2380 	     end;
     2381 
     2382 	if fort_op.optimize
     2383 	then do;
     2384 		if fort_op.ignore_articulation_blocks
     2385 		then op_string = op_string || "full_optimize ";
     2386 		else op_string = op_string || "safe_optimize ";
     2387 		if ^fort_op.consolidate
     2388 		then op_string = op_string || "top_down ";
     2389 	     end;
     2390 	if fort_op.time
     2391 	then op_string = op_string || "time ";
     2392 	if fort_op.time_optimizer
     2393 	then op_string = op_string || "time_ot ";
     2394 	if fort_op.card
     2395 	then op_string = op_string || "card ";
     2396 	else if fort_op.fold
     2397 	then op_string = op_string || "fold ";
     2398 	if fort_op.brief
     2399 	then op_string = op_string || "brief ";
     2400 	if fort_op.check
     2401 	then op_string = op_string || "check ";
     2402 	if fort_op.static_storage
     2403 	then op_string = op_string || "static ";
     2404 	if (^fort_op.relocatable)
     2405 	then op_string = op_string || "non_relocatable ";
     2406 	if fort_op.auto_zero
     2407 	then op_string = op_string || "auto_zero ";
     2408 	else op_string = op_string || "no_auto_zero ";
     2409 	if fort_op.list
     2410 	then op_string = op_string || "list ";
     2411 	else if fort_op.map
     2412 	then op_string = op_string || "map ";
     2413 	if fort_op.severity > 0
     2414 	then do;
     2415 		op_string = op_string || "severity";
     2416 		op_string = op_string || ltrim (convert (op_string, fort_op.severity));
     2417 		op_string = op_string || " ";
     2418 	     end;
     2419 	if fort_op.stop_after_parse
     2420 	then op_string = op_string || "debug_cg ";
     2421 	else if fort_op.stop_after_cg
     2422 	then op_string = op_string || "debug ";
     2423 	else if fort_op.debug_io
     2424           then op_string = op_string || "debug_io ";
     2425 
     2426 	if length (op_string) > 0
     2427 	then op_string = substr (op_string, 1, length (op_string) - 1);
     2428 
     2429 	return;					/* end of options_string entry */
     2430 
     2431 init_shared_vars:
     2432      entry (shared_var_ptr);
     2433 
     2434 	if shared_vars.user_options.hfp
     2435 	then do;
     2436 		shared_vars.binop_round (1, 1) = fort_hfp_math$binop_i_i_round;
     2437 		shared_vars.binop_round (1, 2) = fort_hfp_math$binop_i_r_round;
     2438 		shared_vars.binop_round (1, 3) = fort_hfp_math$binop_i_dp_round;
     2439 		shared_vars.binop_round (1, 4) = fort_hfp_math$binop_i_cp_round;
     2440 		shared_vars.binop_round (1, 5) = fort_hfp_math$bad_data_types;
     2441 		shared_vars.binop_round (1, 6) = fort_hfp_math$bad_data_types;
     2442 		shared_vars.binop_round (2, 1) = fort_hfp_math$binop_r_i_round;
     2443 		shared_vars.binop_round (2, 2) = fort_hfp_math$binop_r_r_round;
     2444 		shared_vars.binop_round (2, 3) = fort_hfp_math$binop_r_dp_round;
     2445 		shared_vars.binop_round (2, 4) = fort_hfp_math$binop_r_cp_round;
     2446 		shared_vars.binop_round (2, 5) = fort_hfp_math$bad_data_types;
     2447 		shared_vars.binop_round (2, 6) = fort_hfp_math$bad_data_types;
     2448 		shared_vars.binop_round (3, 1) = fort_hfp_math$binop_dp_i_round;
     2449 		shared_vars.binop_round (3, 2) = fort_hfp_math$binop_dp_r_round;
     2450 		shared_vars.binop_round (3, 3) = fort_hfp_math$binop_dp_dp_round;
     2451 		shared_vars.binop_round (3, 4) = fort_hfp_math$binop_dp_cp_round;
     2452 		shared_vars.binop_round (3, 5) = fort_hfp_math$bad_data_types;
     2453 		shared_vars.binop_round (3, 6) = fort_hfp_math$bad_data_types;
     2454 		shared_vars.binop_round (4, 1) = fort_hfp_math$binop_cp_i_round;
     2455 		shared_vars.binop_round (4, 2) = fort_hfp_math$binop_cp_r_round;
     2456 		shared_vars.binop_round (4, 3) = fort_hfp_math$binop_cp_dp_round;
     2457 		shared_vars.binop_round (4, 4) = fort_hfp_math$binop_cp_cp_round;
     2458 		shared_vars.binop_round (4, 5) = fort_hfp_math$bad_data_types;
     2459 		shared_vars.binop_round (4, 6) = fort_hfp_math$bad_data_types;
     2460 		shared_vars.binop_round (5, 1) = fort_hfp_math$bad_data_types;
     2461 		shared_vars.binop_round (5, 2) = fort_hfp_math$bad_data_types;
     2462 		shared_vars.binop_round (5, 3) = fort_hfp_math$bad_data_types;
     2463 		shared_vars.binop_round (5, 4) = fort_hfp_math$bad_data_types;
     2464 		shared_vars.binop_round (5, 5) = fort_hfp_math$binop_lg_lg;
     2465 		shared_vars.binop_round (5, 6) = fort_hfp_math$bad_data_types;
     2466 		shared_vars.binop_round (6, 1) = fort_hfp_math$bad_data_types;
     2467 		shared_vars.binop_round (6, 2) = fort_hfp_math$bad_data_types;
     2468 		shared_vars.binop_round (6, 3) = fort_hfp_math$bad_data_types;
     2469 		shared_vars.binop_round (6, 4) = fort_hfp_math$bad_data_types;
     2470 		shared_vars.binop_round (6, 5) = fort_hfp_math$bad_data_types;
     2471 		shared_vars.binop_round (6, 6) = fort_hfp_math$binop_ch_ch;
     2472 
     2473 		shared_vars.binop_trunc (1, 1) = fort_hfp_math$binop_i_i_trunc;
     2474 		shared_vars.binop_trunc (1, 2) = fort_hfp_math$binop_i_r_trunc;
     2475 		shared_vars.binop_trunc (1, 3) = fort_hfp_math$binop_i_dp_trunc;
     2476 		shared_vars.binop_trunc (1, 4) = fort_hfp_math$binop_i_cp_trunc;
     2477 		shared_vars.binop_trunc (1, 5) = fort_hfp_math$bad_data_types;
     2478 		shared_vars.binop_trunc (1, 6) = fort_hfp_math$bad_data_types;
     2479 		shared_vars.binop_trunc (2, 1) = fort_hfp_math$binop_r_i_trunc;
     2480 		shared_vars.binop_trunc (2, 2) = fort_hfp_math$binop_r_r_trunc;
     2481 		shared_vars.binop_trunc (2, 3) = fort_hfp_math$binop_r_dp_trunc;
     2482 		shared_vars.binop_trunc (2, 4) = fort_hfp_math$binop_r_cp_trunc;
     2483 		shared_vars.binop_trunc (2, 5) = fort_hfp_math$bad_data_types;
     2484 		shared_vars.binop_trunc (2, 6) = fort_hfp_math$bad_data_types;
     2485 		shared_vars.binop_trunc (3, 1) = fort_hfp_math$binop_dp_i_trunc;
     2486 		shared_vars.binop_trunc (3, 2) = fort_hfp_math$binop_dp_r_trunc;
     2487 		shared_vars.binop_trunc (3, 3) = fort_hfp_math$binop_dp_dp_trunc;
     2488 		shared_vars.binop_trunc (3, 4) = fort_hfp_math$binop_dp_cp_trunc;
     2489 		shared_vars.binop_trunc (3, 5) = fort_hfp_math$bad_data_types;
     2490 		shared_vars.binop_trunc (3, 6) = fort_hfp_math$bad_data_types;
     2491 		shared_vars.binop_trunc (4, 1) = fort_hfp_math$binop_cp_i_trunc;
     2492 		shared_vars.binop_trunc (4, 2) = fort_hfp_math$binop_cp_r_trunc;
     2493 		shared_vars.binop_trunc (4, 3) = fort_hfp_math$binop_cp_dp_trunc;
     2494 		shared_vars.binop_trunc (4, 4) = fort_hfp_math$binop_cp_cp_trunc;
     2495 		shared_vars.binop_trunc (4, 5) = fort_hfp_math$bad_data_types;
     2496 		shared_vars.binop_trunc (4, 6) = fort_hfp_math$bad_data_types;
     2497 		shared_vars.binop_trunc (5, 1) = fort_hfp_math$bad_data_types;
     2498 		shared_vars.binop_trunc (5, 2) = fort_hfp_math$bad_data_types;
     2499 		shared_vars.binop_trunc (5, 3) = fort_hfp_math$bad_data_types;
     2500 		shared_vars.binop_trunc (5, 4) = fort_hfp_math$bad_data_types;
     2501 		shared_vars.binop_trunc (5, 5) = fort_hfp_math$binop_lg_lg;
     2502 		shared_vars.binop_trunc (5, 6) = fort_hfp_math$bad_data_types;
     2503 		shared_vars.binop_trunc (6, 1) = fort_hfp_math$bad_data_types;
     2504 		shared_vars.binop_trunc (6, 2) = fort_hfp_math$bad_data_types;
     2505 		shared_vars.binop_trunc (6, 3) = fort_hfp_math$bad_data_types;
     2506 		shared_vars.binop_trunc (6, 4) = fort_hfp_math$bad_data_types;
     2507 		shared_vars.binop_trunc (6, 5) = fort_hfp_math$bad_data_types;
     2508 		shared_vars.binop_trunc (6, 6) = fort_hfp_math$binop_ch_ch;
     2509 
     2510 		shared_vars.comp_parm (1, 1) = fort_hfp_math$comp_i_i;
     2511 		shared_vars.comp_parm (1, 2) = fort_hfp_math$comp_i_r;
     2512 		shared_vars.comp_parm (1, 3) = fort_hfp_math$comp_i_dp;
     2513 		shared_vars.comp_parm (1, 4) = fort_hfp_math$bad_data_types;
     2514 		shared_vars.comp_parm (1, 5) = fort_hfp_math$bad_data_types;
     2515 		shared_vars.comp_parm (1, 6) = fort_hfp_math$bad_data_types;
     2516 		shared_vars.comp_parm (2, 1) = fort_hfp_math$comp_r_i;
     2517 		shared_vars.comp_parm (2, 2) = fort_hfp_math$comp_r_r;
     2518 		shared_vars.comp_parm (2, 3) = fort_hfp_math$comp_r_dp;
     2519 		shared_vars.comp_parm (2, 4) = fort_hfp_math$bad_data_types;
     2520 		shared_vars.comp_parm (2, 5) = fort_hfp_math$bad_data_types;
     2521 		shared_vars.comp_parm (2, 6) = fort_hfp_math$bad_data_types;
     2522 		shared_vars.comp_parm (3, 1) = fort_hfp_math$comp_dp_i;
     2523 		shared_vars.comp_parm (3, 2) = fort_hfp_math$comp_dp_r;
     2524 		shared_vars.comp_parm (3, 3) = fort_hfp_math$comp_dp_dp;
     2525 		shared_vars.comp_parm (3, 4) = fort_hfp_math$bad_data_types;
     2526 		shared_vars.comp_parm (3, 5) = fort_hfp_math$bad_data_types;
     2527 		shared_vars.comp_parm (3, 6) = fort_hfp_math$bad_data_types;
     2528 		shared_vars.comp_parm (4, 1) = fort_hfp_math$bad_data_types;
     2529 		shared_vars.comp_parm (4, 2) = fort_hfp_math$bad_data_types;
     2530 		shared_vars.comp_parm (4, 3) = fort_hfp_math$bad_data_types;
     2531 		shared_vars.comp_parm (4, 4) = fort_hfp_math$comp_cp_cp;
     2532 		shared_vars.comp_parm (4, 5) = fort_hfp_math$bad_data_types;
     2533 		shared_vars.comp_parm (4, 6) = fort_hfp_math$bad_data_types;
     2534 		shared_vars.comp_parm (5, 1) = fort_hfp_math$bad_data_types;
     2535 		shared_vars.comp_parm (5, 2) = fort_hfp_math$bad_data_types;
     2536 		shared_vars.comp_parm (5, 3) = fort_hfp_math$bad_data_types;
     2537 		shared_vars.comp_parm (5, 4) = fort_hfp_math$bad_data_types;
     2538 		shared_vars.comp_parm (5, 5) = fort_hfp_math$comp_lg_lg;
     2539 		shared_vars.comp_parm (5, 6) = fort_hfp_math$bad_data_types;
     2540 		shared_vars.comp_parm (6, 1) = fort_hfp_math$bad_data_types;
     2541 		shared_vars.comp_parm (6, 2) = fort_hfp_math$bad_data_types;
     2542 		shared_vars.comp_parm (6, 3) = fort_hfp_math$bad_data_types;
     2543 		shared_vars.comp_parm (6, 4) = fort_hfp_math$bad_data_types;
     2544 		shared_vars.comp_parm (6, 5) = fort_hfp_math$bad_data_types;
     2545 		shared_vars.comp_parm (6, 6) = fort_hfp_math$comp_ch_ch;
     2546 
     2547 		shared_vars.conv_round (1, 1) = fort_hfp_math$unary_no_op;
     2548 		shared_vars.conv_round (1, 2) = fort_hfp_math$conv_r_to_i_round;
     2549 		shared_vars.conv_round (1, 3) = fort_hfp_math$conv_dp_to_i_round;
     2550 		shared_vars.conv_round (1, 4) = fort_hfp_math$conv_cp_to_i_round;
     2551 		shared_vars.conv_round (1, 5) = fort_hfp_math$unary_bad_data;
     2552 		shared_vars.conv_round (1, 6) = fort_hfp_math$unary_bad_data;
     2553 		shared_vars.conv_round (2, 1) = fort_hfp_math$conv_i_to_r_round;
     2554 		shared_vars.conv_round (2, 2) = fort_hfp_math$unary_no_op;
     2555 		shared_vars.conv_round (2, 3) = fort_hfp_math$conv_dp_to_r_round;
     2556 		shared_vars.conv_round (2, 4) = fort_hfp_math$conv_cp_to_r_round;
     2557 		shared_vars.conv_round (2, 5) = fort_hfp_math$unary_bad_data;
     2558 		shared_vars.conv_round (2, 6) = fort_hfp_math$unary_bad_data;
     2559 		shared_vars.conv_round (3, 1) = fort_hfp_math$conv_i_to_dp_round;
     2560 		shared_vars.conv_round (3, 2) = fort_hfp_math$conv_r_to_dp_round;
     2561 		shared_vars.conv_round (3, 3) = fort_hfp_math$unary_no_op;
     2562 		shared_vars.conv_round (3, 4) = fort_hfp_math$conv_cp_to_dp_round;
     2563 		shared_vars.conv_round (3, 5) = fort_hfp_math$unary_bad_data;
     2564 		shared_vars.conv_round (3, 6) = fort_hfp_math$unary_bad_data;
     2565 		shared_vars.conv_round (4, 1) = fort_hfp_math$conv_i_to_cp_round;
     2566 		shared_vars.conv_round (4, 2) = fort_hfp_math$conv_r_to_cp_round;
     2567 		shared_vars.conv_round (4, 3) = fort_hfp_math$conv_dp_to_cp_round;
     2568 		shared_vars.conv_round (4, 4) = fort_hfp_math$unary_no_op;
     2569 		shared_vars.conv_round (4, 5) = fort_hfp_math$unary_bad_data;
     2570 		shared_vars.conv_round (4, 6) = fort_hfp_math$unary_bad_data;
     2571 		shared_vars.conv_round (5, 1) = fort_hfp_math$unary_bad_data;
     2572 		shared_vars.conv_round (5, 2) = fort_hfp_math$unary_bad_data;
     2573 		shared_vars.conv_round (5, 3) = fort_hfp_math$unary_bad_data;
     2574 		shared_vars.conv_round (5, 4) = fort_hfp_math$unary_bad_data;
     2575 		shared_vars.conv_round (5, 5) = fort_hfp_math$unary_no_op;
     2576 		shared_vars.conv_round (5, 6) = fort_hfp_math$unary_bad_data;
     2577 		shared_vars.conv_round (6, 1) = fort_hfp_math$unary_bad_data;
     2578 		shared_vars.conv_round (6, 2) = fort_hfp_math$unary_bad_data;
     2579 		shared_vars.conv_round (6, 3) = fort_hfp_math$unary_bad_data;
     2580 		shared_vars.conv_round (6, 4) = fort_hfp_math$unary_bad_data;
     2581 		shared_vars.conv_round (6, 5) = fort_hfp_math$unary_bad_data;
     2582 		shared_vars.conv_round (6, 6) = fort_hfp_math$conv_ch_to_ch;
     2583 
     2584 		shared_vars.conv_trunc (1, 1) = fort_hfp_math$unary_no_op;
     2585 		shared_vars.conv_trunc (1, 2) = fort_hfp_math$conv_r_to_i_trunc;
     2586 		shared_vars.conv_trunc (1, 3) = fort_hfp_math$conv_dp_to_i_trunc;
     2587 		shared_vars.conv_trunc (1, 4) = fort_hfp_math$conv_cp_to_i_trunc;
     2588 		shared_vars.conv_trunc (1, 5) = fort_hfp_math$unary_bad_data;
     2589 		shared_vars.conv_trunc (1, 6) = fort_hfp_math$unary_bad_data;
     2590 		shared_vars.conv_trunc (2, 1) = fort_hfp_math$conv_i_to_r_trunc;
     2591 		shared_vars.conv_trunc (2, 2) = fort_hfp_math$unary_no_op;
     2592 		shared_vars.conv_trunc (2, 3) = fort_hfp_math$conv_dp_to_r_trunc;
     2593 		shared_vars.conv_trunc (2, 4) = fort_hfp_math$conv_cp_to_r_trunc;
     2594 		shared_vars.conv_trunc (2, 5) = fort_hfp_math$unary_bad_data;
     2595 		shared_vars.conv_trunc (2, 6) = fort_hfp_math$unary_bad_data;
     2596 		shared_vars.conv_trunc (3, 1) = fort_hfp_math$conv_i_to_dp_trunc;
     2597 		shared_vars.conv_trunc (3, 2) = fort_hfp_math$conv_r_to_dp_trunc;
     2598 		shared_vars.conv_trunc (3, 3) = fort_hfp_math$unary_no_op;
     2599 		shared_vars.conv_trunc (3, 4) = fort_hfp_math$conv_cp_to_dp_trunc;
     2600 		shared_vars.conv_trunc (3, 5) = fort_hfp_math$unary_bad_data;
     2601 		shared_vars.conv_trunc (3, 6) = fort_hfp_math$unary_bad_data;
     2602 		shared_vars.conv_trunc (4, 1) = fort_hfp_math$conv_i_to_cp_trunc;
     2603 		shared_vars.conv_trunc (4, 2) = fort_hfp_math$conv_r_to_cp_trunc;
     2604 		shared_vars.conv_trunc (4, 3) = fort_hfp_math$conv_dp_to_cp_trunc;
     2605 		shared_vars.conv_trunc (4, 4) = fort_hfp_math$unary_no_op;
     2606 		shared_vars.conv_trunc (4, 5) = fort_hfp_math$unary_bad_data;
     2607 		shared_vars.conv_trunc (4, 6) = fort_hfp_math$unary_bad_data;
     2608 		shared_vars.conv_trunc (5, 1) = fort_hfp_math$unary_bad_data;
     2609 		shared_vars.conv_trunc (5, 2) = fort_hfp_math$unary_bad_data;
     2610 		shared_vars.conv_trunc (5, 3) = fort_hfp_math$unary_bad_data;
     2611 		shared_vars.conv_trunc (5, 4) = fort_hfp_math$unary_bad_data;
     2612 		shared_vars.conv_trunc (5, 5) = fort_hfp_math$unary_no_op;
     2613 		shared_vars.conv_trunc (5, 6) = fort_hfp_math$unary_bad_data;
     2614 		shared_vars.conv_trunc (6, 1) = fort_hfp_math$unary_bad_data;
     2615 		shared_vars.conv_trunc (6, 2) = fort_hfp_math$unary_bad_data;
     2616 		shared_vars.conv_trunc (6, 3) = fort_hfp_math$unary_bad_data;
     2617 		shared_vars.conv_trunc (6, 4) = fort_hfp_math$unary_bad_data;
     2618 		shared_vars.conv_trunc (6, 5) = fort_hfp_math$unary_bad_data;
     2619 		shared_vars.conv_trunc (6, 6) = fort_hfp_math$conv_ch_to_ch;
     2620 	     end;
     2621 	else do;
     2622 		shared_vars.binop_round (1, 1) = fort_bfp_math$binop_i_i_round;
     2623 		shared_vars.binop_round (1, 2) = fort_bfp_math$binop_i_r_round;
     2624 		shared_vars.binop_round (1, 3) = fort_bfp_math$binop_i_dp_round;
     2625 		shared_vars.binop_round (1, 4) = fort_bfp_math$binop_i_cp_round;
     2626 		shared_vars.binop_round (1, 5) = fort_bfp_math$bad_data_types;
     2627 		shared_vars.binop_round (1, 6) = fort_bfp_math$bad_data_types;
     2628 		shared_vars.binop_round (2, 1) = fort_bfp_math$binop_r_i_round;
     2629 		shared_vars.binop_round (2, 2) = fort_bfp_math$binop_r_r_round;
     2630 		shared_vars.binop_round (2, 3) = fort_bfp_math$binop_r_dp_round;
     2631 		shared_vars.binop_round (2, 4) = fort_bfp_math$binop_r_cp_round;
     2632 		shared_vars.binop_round (2, 5) = fort_bfp_math$bad_data_types;
     2633 		shared_vars.binop_round (2, 6) = fort_bfp_math$bad_data_types;
     2634 		shared_vars.binop_round (3, 1) = fort_bfp_math$binop_dp_i_round;
     2635 		shared_vars.binop_round (3, 2) = fort_bfp_math$binop_dp_r_round;
     2636 		shared_vars.binop_round (3, 3) = fort_bfp_math$binop_dp_dp_round;
     2637 		shared_vars.binop_round (3, 4) = fort_bfp_math$binop_dp_cp_round;
     2638 		shared_vars.binop_round (3, 5) = fort_bfp_math$bad_data_types;
     2639 		shared_vars.binop_round (3, 6) = fort_bfp_math$bad_data_types;
     2640 		shared_vars.binop_round (4, 1) = fort_bfp_math$binop_cp_i_round;
     2641 		shared_vars.binop_round (4, 2) = fort_bfp_math$binop_cp_r_round;
     2642 		shared_vars.binop_round (4, 3) = fort_bfp_math$binop_cp_dp_round;
     2643 		shared_vars.binop_round (4, 4) = fort_bfp_math$binop_cp_cp_round;
     2644 		shared_vars.binop_round (4, 5) = fort_bfp_math$bad_data_types;
     2645 		shared_vars.binop_round (4, 6) = fort_bfp_math$bad_data_types;
     2646 		shared_vars.binop_round (5, 1) = fort_bfp_math$bad_data_types;
     2647 		shared_vars.binop_round (5, 2) = fort_bfp_math$bad_data_types;
     2648 		shared_vars.binop_round (5, 3) = fort_bfp_math$bad_data_types;
     2649 		shared_vars.binop_round (5, 4) = fort_bfp_math$bad_data_types;
     2650 		shared_vars.binop_round (5, 5) = fort_bfp_math$binop_lg_lg;
     2651 		shared_vars.binop_round (5, 6) = fort_bfp_math$bad_data_types;
     2652 		shared_vars.binop_round (6, 1) = fort_bfp_math$bad_data_types;
     2653 		shared_vars.binop_round (6, 2) = fort_bfp_math$bad_data_types;
     2654 		shared_vars.binop_round (6, 3) = fort_bfp_math$bad_data_types;
     2655 		shared_vars.binop_round (6, 4) = fort_bfp_math$bad_data_types;
     2656 		shared_vars.binop_round (6, 5) = fort_bfp_math$bad_data_types;
     2657 		shared_vars.binop_round (6, 6) = fort_bfp_math$binop_ch_ch;
     2658 
     2659 		shared_vars.binop_trunc (1, 1) = fort_bfp_math$binop_i_i_trunc;
     2660 		shared_vars.binop_trunc (1, 2) = fort_bfp_math$binop_i_r_trunc;
     2661 		shared_vars.binop_trunc (1, 3) = fort_bfp_math$binop_i_dp_trunc;
     2662 		shared_vars.binop_trunc (1, 4) = fort_bfp_math$binop_i_cp_trunc;
     2663 		shared_vars.binop_trunc (1, 5) = fort_bfp_math$bad_data_types;
     2664 		shared_vars.binop_trunc (1, 6) = fort_bfp_math$bad_data_types;
     2665 		shared_vars.binop_trunc (2, 1) = fort_bfp_math$binop_r_i_trunc;
     2666 		shared_vars.binop_trunc (2, 2) = fort_bfp_math$binop_r_r_trunc;
     2667 		shared_vars.binop_trunc (2, 3) = fort_bfp_math$binop_r_dp_trunc;
     2668 		shared_vars.binop_trunc (2, 4) = fort_bfp_math$binop_r_cp_trunc;
     2669 		shared_vars.binop_trunc (2, 5) = fort_bfp_math$bad_data_types;
     2670 		shared_vars.binop_trunc (2, 6) = fort_bfp_math$bad_data_types;
     2671 		shared_vars.binop_trunc (3, 1) = fort_bfp_math$binop_dp_i_trunc;
     2672 		shared_vars.binop_trunc (3, 2) = fort_bfp_math$binop_dp_r_trunc;
     2673 		shared_vars.binop_trunc (3, 3) = fort_bfp_math$binop_dp_dp_trunc;
     2674 		shared_vars.binop_trunc (3, 4) = fort_bfp_math$binop_dp_cp_trunc;
     2675 		shared_vars.binop_trunc (3, 5) = fort_bfp_math$bad_data_types;
     2676 		shared_vars.binop_trunc (3, 6) = fort_bfp_math$bad_data_types;
     2677 		shared_vars.binop_trunc (4, 1) = fort_bfp_math$binop_cp_i_trunc;
     2678 		shared_vars.binop_trunc (4, 2) = fort_bfp_math$binop_cp_r_trunc;
     2679 		shared_vars.binop_trunc (4, 3) = fort_bfp_math$binop_cp_dp_trunc;
     2680 		shared_vars.binop_trunc (4, 4) = fort_bfp_math$binop_cp_cp_trunc;
     2681 		shared_vars.binop_trunc (4, 5) = fort_bfp_math$bad_data_types;
     2682 		shared_vars.binop_trunc (4, 6) = fort_bfp_math$bad_data_types;
     2683 		shared_vars.binop_trunc (5, 1) = fort_bfp_math$bad_data_types;
     2684 		shared_vars.binop_trunc (5, 2) = fort_bfp_math$bad_data_types;
     2685 		shared_vars.binop_trunc (5, 3) = fort_bfp_math$bad_data_types;
     2686 		shared_vars.binop_trunc (5, 4) = fort_bfp_math$bad_data_types;
     2687 		shared_vars.binop_trunc (5, 5) = fort_bfp_math$binop_lg_lg;
     2688 		shared_vars.binop_trunc (5, 6) = fort_bfp_math$bad_data_types;
     2689 		shared_vars.binop_trunc (6, 1) = fort_bfp_math$bad_data_types;
     2690 		shared_vars.binop_trunc (6, 2) = fort_bfp_math$bad_data_types;
     2691 		shared_vars.binop_trunc (6, 3) = fort_bfp_math$bad_data_types;
     2692 		shared_vars.binop_trunc (6, 4) = fort_bfp_math$bad_data_types;
     2693 		shared_vars.binop_trunc (6, 5) = fort_bfp_math$bad_data_types;
     2694 		shared_vars.binop_trunc (6, 6) = fort_bfp_math$binop_ch_ch;
     2695 
     2696 		shared_vars.comp_parm (1, 1) = fort_bfp_math$comp_i_i;
     2697 		shared_vars.comp_parm (1, 2) = fort_bfp_math$comp_i_r;
     2698 		shared_vars.comp_parm (1, 3) = fort_bfp_math$comp_i_dp;
     2699 		shared_vars.comp_parm (1, 4) = fort_bfp_math$bad_data_types;
     2700 		shared_vars.comp_parm (1, 5) = fort_bfp_math$bad_data_types;
     2701 		shared_vars.comp_parm (1, 6) = fort_bfp_math$bad_data_types;
     2702 		shared_vars.comp_parm (2, 1) = fort_bfp_math$comp_r_i;
     2703 		shared_vars.comp_parm (2, 2) = fort_bfp_math$comp_r_r;
     2704 		shared_vars.comp_parm (2, 3) = fort_bfp_math$comp_r_dp;
     2705 		shared_vars.comp_parm (2, 4) = fort_bfp_math$bad_data_types;
     2706 		shared_vars.comp_parm (2, 5) = fort_bfp_math$bad_data_types;
     2707 		shared_vars.comp_parm (2, 6) = fort_bfp_math$bad_data_types;
     2708 		shared_vars.comp_parm (3, 1) = fort_bfp_math$comp_dp_i;
     2709 		shared_vars.comp_parm (3, 2) = fort_bfp_math$comp_dp_r;
     2710 		shared_vars.comp_parm (3, 3) = fort_bfp_math$comp_dp_dp;
     2711 		shared_vars.comp_parm (3, 4) = fort_bfp_math$bad_data_types;
     2712 		shared_vars.comp_parm (3, 5) = fort_bfp_math$bad_data_types;
     2713 		shared_vars.comp_parm (3, 6) = fort_bfp_math$bad_data_types;
     2714 		shared_vars.comp_parm (4, 1) = fort_bfp_math$bad_data_types;
     2715 		shared_vars.comp_parm (4, 2) = fort_bfp_math$bad_data_types;
     2716 		shared_vars.comp_parm (4, 3) = fort_bfp_math$bad_data_types;
     2717 		shared_vars.comp_parm (4, 4) = fort_bfp_math$comp_cp_cp;
     2718 		shared_vars.comp_parm (4, 5) = fort_bfp_math$bad_data_types;
     2719 		shared_vars.comp_parm (4, 6) = fort_bfp_math$bad_data_types;
     2720 		shared_vars.comp_parm (5, 1) = fort_bfp_math$bad_data_types;
     2721 		shared_vars.comp_parm (5, 2) = fort_bfp_math$bad_data_types;
     2722 		shared_vars.comp_parm (5, 3) = fort_bfp_math$bad_data_types;
     2723 		shared_vars.comp_parm (5, 4) = fort_bfp_math$bad_data_types;
     2724 		shared_vars.comp_parm (5, 5) = fort_bfp_math$comp_lg_lg;
     2725 		shared_vars.comp_parm (5, 6) = fort_bfp_math$bad_data_types;
     2726 		shared_vars.comp_parm (6, 1) = fort_bfp_math$bad_data_types;
     2727 		shared_vars.comp_parm (6, 2) = fort_bfp_math$bad_data_types;
     2728 		shared_vars.comp_parm (6, 3) = fort_bfp_math$bad_data_types;
     2729 		shared_vars.comp_parm (6, 4) = fort_bfp_math$bad_data_types;
     2730 		shared_vars.comp_parm (6, 5) = fort_bfp_math$bad_data_types;
     2731 		shared_vars.comp_parm (6, 6) = fort_bfp_math$comp_ch_ch;
     2732 
     2733 		shared_vars.conv_round (1, 1) = fort_bfp_math$unary_no_op;
     2734 		shared_vars.conv_round (1, 2) = fort_bfp_math$conv_r_to_i_round;
     2735 		shared_vars.conv_round (1, 3) = fort_bfp_math$conv_dp_to_i_round;
     2736 		shared_vars.conv_round (1, 4) = fort_bfp_math$conv_cp_to_i_round;
     2737 		shared_vars.conv_round (1, 5) = fort_bfp_math$unary_bad_data;
     2738 		shared_vars.conv_round (1, 6) = fort_bfp_math$unary_bad_data;
     2739 		shared_vars.conv_round (2, 1) = fort_bfp_math$conv_i_to_r_round;
     2740 		shared_vars.conv_round (2, 2) = fort_bfp_math$unary_no_op;
     2741 		shared_vars.conv_round (2, 3) = fort_bfp_math$conv_dp_to_r_round;
     2742 		shared_vars.conv_round (2, 4) = fort_bfp_math$conv_cp_to_r_round;
     2743 		shared_vars.conv_round (2, 5) = fort_bfp_math$unary_bad_data;
     2744 		shared_vars.conv_round (2, 6) = fort_bfp_math$unary_bad_data;
     2745 		shared_vars.conv_round (3, 1) = fort_bfp_math$conv_i_to_dp_round;
     2746 		shared_vars.conv_round (3, 2) = fort_bfp_math$conv_r_to_dp_round;
     2747 		shared_vars.conv_round (3, 3) = fort_bfp_math$unary_no_op;
     2748 		shared_vars.conv_round (3, 4) = fort_bfp_math$conv_cp_to_dp_round;
     2749 		shared_vars.conv_round (3, 5) = fort_bfp_math$unary_bad_data;
     2750 		shared_vars.conv_round (3, 6) = fort_bfp_math$unary_bad_data;
     2751 		shared_vars.conv_round (4, 1) = fort_bfp_math$conv_i_to_cp_round;
     2752 		shared_vars.conv_round (4, 2) = fort_bfp_math$conv_r_to_cp_round;
     2753 		shared_vars.conv_round (4, 3) = fort_bfp_math$conv_dp_to_cp_round;
     2754 		shared_vars.conv_round (4, 4) = fort_bfp_math$unary_no_op;
     2755 		shared_vars.conv_round (4, 5) = fort_bfp_math$unary_bad_data;
     2756 		shared_vars.conv_round (4, 6) = fort_bfp_math$unary_bad_data;
     2757 		shared_vars.conv_round (5, 1) = fort_bfp_math$unary_bad_data;
     2758 		shared_vars.conv_round (5, 2) = fort_bfp_math$unary_bad_data;
     2759 		shared_vars.conv_round (5, 3) = fort_bfp_math$unary_bad_data;
     2760 		shared_vars.conv_round (5, 4) = fort_bfp_math$unary_bad_data;
     2761 		shared_vars.conv_round (5, 5) = fort_bfp_math$unary_no_op;
     2762 		shared_vars.conv_round (5, 6) = fort_bfp_math$unary_bad_data;
     2763 		shared_vars.conv_round (6, 1) = fort_bfp_math$unary_bad_data;
     2764 		shared_vars.conv_round (6, 2) = fort_bfp_math$unary_bad_data;
     2765 		shared_vars.conv_round (6, 3) = fort_bfp_math$unary_bad_data;
     2766 		shared_vars.conv_round (6, 4) = fort_bfp_math$unary_bad_data;
     2767 		shared_vars.conv_round (6, 5) = fort_bfp_math$unary_bad_data;
     2768 		shared_vars.conv_round (6, 6) = fort_bfp_math$conv_ch_to_ch;
     2769 
     2770 		shared_vars.conv_trunc (1, 1) = fort_bfp_math$unary_no_op;
     2771 		shared_vars.conv_trunc (1, 2) = fort_bfp_math$conv_r_to_i_trunc;
     2772 		shared_vars.conv_trunc (1, 3) = fort_bfp_math$conv_dp_to_i_trunc;
     2773 		shared_vars.conv_trunc (1, 4) = fort_bfp_math$conv_cp_to_i_trunc;
     2774 		shared_vars.conv_trunc (1, 5) = fort_bfp_math$unary_bad_data;
     2775 		shared_vars.conv_trunc (1, 6) = fort_bfp_math$unary_bad_data;
     2776 		shared_vars.conv_trunc (2, 1) = fort_bfp_math$conv_i_to_r_trunc;
     2777 		shared_vars.conv_trunc (2, 2) = fort_bfp_math$unary_no_op;
     2778 		shared_vars.conv_trunc (2, 3) = fort_bfp_math$conv_dp_to_r_trunc;
     2779 		shared_vars.conv_trunc (2, 4) = fort_bfp_math$conv_cp_to_r_trunc;
     2780 		shared_vars.conv_trunc (2, 5) = fort_bfp_math$unary_bad_data;
     2781 		shared_vars.conv_trunc (2, 6) = fort_bfp_math$unary_bad_data;
     2782 		shared_vars.conv_trunc (3, 1) = fort_bfp_math$conv_i_to_dp_trunc;
     2783 		shared_vars.conv_trunc (3, 2) = fort_bfp_math$conv_r_to_dp_trunc;
     2784 		shared_vars.conv_trunc (3, 3) = fort_bfp_math$unary_no_op;
     2785 		shared_vars.conv_trunc (3, 4) = fort_bfp_math$conv_cp_to_dp_trunc;
     2786 		shared_vars.conv_trunc (3, 5) = fort_bfp_math$unary_bad_data;
     2787 		shared_vars.conv_trunc (3, 6) = fort_bfp_math$unary_bad_data;
     2788 		shared_vars.conv_trunc (4, 1) = fort_bfp_math$conv_i_to_cp_trunc;
     2789 		shared_vars.conv_trunc (4, 2) = fort_bfp_math$conv_r_to_cp_trunc;
     2790 		shared_vars.conv_trunc (4, 3) = fort_bfp_math$conv_dp_to_cp_trunc;
     2791 		shared_vars.conv_trunc (4, 4) = fort_bfp_math$unary_no_op;
     2792 		shared_vars.conv_trunc (4, 5) = fort_bfp_math$unary_bad_data;
     2793 		shared_vars.conv_trunc (4, 6) = fort_bfp_math$unary_bad_data;
     2794 		shared_vars.conv_trunc (5, 1) = fort_bfp_math$unary_bad_data;
     2795 		shared_vars.conv_trunc (5, 2) = fort_bfp_math$unary_bad_data;
     2796 		shared_vars.conv_trunc (5, 3) = fort_bfp_math$unary_bad_data;
     2797 		shared_vars.conv_trunc (5, 4) = fort_bfp_math$unary_bad_data;
     2798 		shared_vars.conv_trunc (5, 5) = fort_bfp_math$unary_no_op;
     2799 		shared_vars.conv_trunc (5, 6) = fort_bfp_math$unary_bad_data;
     2800 		shared_vars.conv_trunc (6, 1) = fort_bfp_math$unary_bad_data;
     2801 		shared_vars.conv_trunc (6, 2) = fort_bfp_math$unary_bad_data;
     2802 		shared_vars.conv_trunc (6, 3) = fort_bfp_math$unary_bad_data;
     2803 		shared_vars.conv_trunc (6, 4) = fort_bfp_math$unary_bad_data;
     2804 		shared_vars.conv_trunc (6, 5) = fort_bfp_math$unary_bad_data;
     2805 		shared_vars.conv_trunc (6, 6) = fort_bfp_math$conv_ch_to_ch;
     2806 	     end;
     2807 
     2808 	do i = 1 to 6;
     2809 	     shared_vars.negate_round (i) = shared_vars.binop_round (i, i);
     2810 	     shared_vars.negate_trunc (i) = shared_vars.binop_trunc (i, i);
     2811 	end;
     2812 	return;					/* end of init_shared_vars */
     2813 
     2814      end /* fort_defaults_ */;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    08/06/87  1045.0  fort_defaults_.pl1                >spec>install>MR12.1-1069>fort_defaults_.pl1
527          1    08/06/87  1045.4  fort_options.incl.pl1             >spec>install>MR12.1-1069>fort_options.incl.pl1
530          2    08/04/86  2015.0  fort_shared_vars.incl.pl1         >ldd>include>fort_shared_vars.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
LA_auto                   1            based           bit(1)                   level 2 in structure "fo" packed unaligned dcl 193
                                                                                  in procedure "fort_defaults_" set ref 1780* 1788*
                                                                                  1818* 1913* 1929*
LA_auto                   1            based           bit(1)                   level 3 in structure "fort_op" packed unaligned
                                                                                  dcl 194 in procedure "fort_defaults_" ref 2337
                                                                                  2339
LA_static                 1(01)        based           bit(1)                   level 3 in structure "fort_op" packed unaligned
                                                                                  dcl 194 in procedure "fort_defaults_" ref 2337
                                                                                  2341
LA_static                 1(01)        based           bit(1)                   level 2 in structure "fo" packed unaligned dcl 193
                                                                                  in procedure "fort_defaults_" set ref 1783* 1789*
                                                                                  1819* 1914* 1943*
VLA_auto                  0(32)        based           bit(1)                   level 3 in structure "fort_op" packed unaligned
                                                                                  dcl 194 in procedure "fort_defaults_" ref 2343
                                                                                  2348 2355
VLA_auto                  0(32)        based           bit(1)                   level 2 in structure "fo" packed unaligned dcl 193
                                                                                  in procedure "fort_defaults_" set ref 1850* 1908*
                                                                                  1926*
VLA_is_256K               2(03)        based           bit(1)                   level 3 packed unaligned dcl 194 set ref 2345* 2347*
                                                                                  2350 2357 2363 2369 2375
VLA_parm                  0(33)        based           bit(1)                   level 2 in structure "fo" packed unaligned dcl 193
                                                                                  in procedure "fort_defaults_" set ref 1851* 1856*
                                                                                  1909* 1920* 1927* 1934* 1941*
VLA_parm                  0(33)        based           bit(1)                   level 3 in structure "fort_op" packed unaligned
                                                                                  dcl 194 in procedure "fort_defaults_" ref 2343
                                                                                  2348 2361
VLA_static                0(34)        based           bit(1)                   level 2 in structure "fo" packed unaligned dcl 193
                                                                                  in procedure "fort_defaults_" set ref 1852* 1911*
                                                                                  1940*
VLA_static                0(34)        based           bit(1)                   level 3 in structure "fort_op" packed unaligned
                                                                                  dcl 194 in procedure "fort_defaults_" ref 2343
                                                                                  2348 2367
VLA_words_per_seg                      parameter       fixed bin(19,0)          dcl 183 ref 2306 2345
VLC                       0(35)        based           bit(1)                   level 3 in structure "fort_op" packed unaligned
                                                                                  dcl 194 in procedure "fort_defaults_" ref 2343
                                                                                  2348 2373
VLC                       0(35)        based           bit(1)                   level 2 in structure "fo" packed unaligned dcl 193
                                                                                  in procedure "fort_defaults_" set ref 1853* 1912*
                                                                                  1919*
ansi66                                 based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 614* 621*
                                                                                  1056* 1067 1070* 1521 1524* 1531 1534* 1713
ansi66                                 based           bit(1)                   level 2 in structure "global_fd" packed unaligned
                                                                                  dcl 201 in procedure "fort_defaults_" set ref 2130
                                                                                  2133*
ansi66                                 based           bit(1)                   level 2 in structure "arg_fd" packed unaligned
                                                                                  dcl 187 in procedure "fort_defaults_" ref 2125
ansi77                    0(01)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 616* 619*
                                                                                  1058 1061* 1065* 1520* 1530* 1716
ansi77                    0(01)        based           bit(1)                   level 2 in structure "global_fd" packed unaligned
                                                                                  dcl 201 in procedure "fort_defaults_" set ref 2125
                                                                                  2128*
ansi77                    0(01)        based           bit(1)                   level 2 in structure "arg_fd" packed unaligned
                                                                                  dcl 187 in procedure "fort_defaults_" ref 2130
ansi_77                   0(30)        based           bit(1)                   level 2 in structure "fo" packed unaligned dcl 193
                                                                                  in procedure "fort_defaults_" set ref 1518* 1528*
                                                                                  1713* 1721*
ansi_77                   0(30)        based           bit(1)                   level 3 in structure "fort_op" packed unaligned
                                                                                  dcl 194 in procedure "fort_defaults_" ref 2310
arg_case                        003276 automatic       label variable           initial array dcl 538 set ref 538* 538* 538* 538*
                                                                                  538* 538* 538* 538* 538* 538* 538* 538* 538* 538*
                                                                                  538* 538* 538* 538* 538* 538* 538* 538* 538* 538*
                                                                                  538* 538* 538* 538* 538* 538* 538* 538* 538* 538*
                                                                                  538* 538* 538* 538* 538* 538* 538* 538* 538* 538*
                                                                                  538* 538* 538* 538* 538* 538* 538* 538* 538* 538*
                                                                                  538* 538* 538* 538* 538* 538* 538* 538* 538* 538*
                                                                                  538* 538* 538* 538* 538* 538* 538* 538* 538* 538*
                                                                                  538* 538* 538* 538* 538* 538* 538* 538* 538* 538*
                                                                                  538* 538* 538* 538* 538* 538* 538* 538* 538* 538*
                                                                                  538* 538* 538* 538* 538* 538* 538* 538* 538* 538*
                                                                                  538* 538* 538* 538* 538* 538* 538* 538* 565
arg_error                              parameter       bit(1)                   dcl 165 set ref 534 581* 600* 610* 760* 885* 973*
                                                                                  979* 1950 1998*
arg_fd                                 based           structure                level 1 packed unaligned dcl 187
arg_fd_ptr                             parameter       pointer                  dcl 166 ref 2005 2009 2014 2025 2035 2035 2035 2039
                                                                                  2041 2043 2049 2059 2064 2070 2075 2081 2086 2092
                                                                                  2097 2103 2108 2114 2119 2125 2130 2136 2141 2147
                                                                                  2152 2158 2163 2169 2174 2180 2185 2191 2196 2202
                                                                                  2207 2213 2218 2224 2229 2235 2240 2246 2251 2257
                                                                                  2262 2268 2273 2279 2284 2290 2295
arg_list_ptr                           parameter       pointer                  dcl 168 set ref 534 574* 593*
arg_num                                parameter       fixed bin(17,0)          dcl 167 set ref 534 573* 573 574* 578* 578 592* 592
                                                                                  593* 597* 597 971* 971
auto                      0(02)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 624* 890*
                                                                                  1074* 1324 1327* 1669 1672* 1724
auto                      0(02)        based           bit(1)                   level 2 in structure "arg_fd" packed unaligned
                                                                                  dcl 187 in procedure "fort_defaults_" ref 2169
auto                      0(02)        based           bit(1)                   level 2 in structure "global_fd" packed unaligned
                                                                                  dcl 201 in procedure "fort_defaults_" set ref 2174
                                                                                  2177*
auto_option                            parameter       bit(1)                   dcl 169 set ref 1432 1538* 1667*
auto_zero                 0(03)        based           bit(1)                   level 2 in structure "global_fd" packed unaligned
                                                                                  dcl 201 in procedure "fort_defaults_" set ref 2086
                                                                                  2089*
auto_zero                 0(29)        based           bit(1)                   level 3 in structure "fort_op" packed unaligned
                                                                                  dcl 194 in procedure "fort_defaults_" ref 2406
auto_zero                 0(29)        based           bit(1)                   level 2 in structure "fo" packed unaligned dcl 193
                                                                                  in procedure "fort_defaults_" set ref 1727* 1807*
auto_zero                 0(03)        based           bit(1)                   level 2 in structure "arg_fd" packed unaligned
                                                                                  dcl 187 in procedure "fort_defaults_" ref 2081
auto_zero                 0(03)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 629* 765*
                                                                                  1083* 1203 1206* 1727
binary_floating_point
                          0(05)        based           bit(1)                   level 2 in structure "arg_fd" packed unaligned
                                                                                  dcl 187 in procedure "fort_defaults_" ref 2009
binary_floating_point
                          0(05)        based           bit(1)                   level 2 in structure "global_fd" packed unaligned
                                                                                  dcl 201 in procedure "fort_defaults_" set ref 2014
                                                                                  2017*
binary_floating_point
                          0(05)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 634* 706*
                                                                                  1092* 1167 1170* 1730
binop_round            1620            based           entry variable           array level 2 dcl 180 set ref 2436* 2437* 2438*
                                                                                  2439* 2440* 2441* 2442* 2443* 2444* 2445* 2446*
                                                                                  2447* 2448* 2449* 2450* 2451* 2452* 2453* 2454*
                                                                                  2455* 2456* 2457* 2458* 2459* 2460* 2461* 2462*
                                                                                  2463* 2464* 2465* 2466* 2467* 2468* 2469* 2470*
                                                                                  2471* 2622* 2623* 2624* 2625* 2626* 2627* 2628*
                                                                                  2629* 2630* 2631* 2632* 2633* 2634* 2635* 2636*
                                                                                  2637* 2638* 2639* 2640* 2641* 2642* 2643* 2644*
                                                                                  2645* 2646* 2647* 2648* 2649* 2650* 2651* 2652*
                                                                                  2653* 2654* 2655* 2656* 2657* 2809
binop_trunc            2040            based           entry variable           array level 2 dcl 180 set ref 2473* 2474* 2475*
                                                                                  2476* 2477* 2478* 2479* 2480* 2481* 2482* 2483*
                                                                                  2484* 2485* 2486* 2487* 2488* 2489* 2490* 2491*
                                                                                  2492* 2493* 2494* 2495* 2496* 2497* 2498* 2499*
                                                                                  2500* 2501* 2502* 2503* 2504* 2505* 2506* 2507*
                                                                                  2508* 2659* 2660* 2661* 2662* 2663* 2664* 2665*
                                                                                  2666* 2667* 2668* 2669* 2670* 2671* 2672* 2673*
                                                                                  2674* 2675* 2676* 2677* 2678* 2679* 2680* 2681*
                                                                                  2682* 2683* 2684* 2685* 2686* 2687* 2688* 2689*
                                                                                  2690* 2691* 2692* 2693* 2694* 2810
brief                     0(11)        based           bit(1)                   level 4 in structure "fort_op" packed unaligned
                                                                                  dcl 194 in procedure "fort_defaults_" ref 2398
brief                     0(11)        based           bit(1)                   level 3 in structure "fo" packed unaligned dcl 193
                                                                                  in procedure "fort_defaults_" set ref 1733* 1795*
brief                     0(04)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 639* 744*
                                                                                  1733
brief_table               0(18)        based           bit(1)                   level 4 in structure "fort_op" packed unaligned
                                                                                  dcl 194 in procedure "fort_defaults_" ref 2326
brief_table               0(18)        based           bit(1)                   level 3 in structure "fo" packed unaligned dcl 193
                                                                                  in procedure "fort_defaults_" set ref 1736*
brief_table               0(06)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 644* 826*
                                                                                  910* 1736 1891
cannot_enable_HFP_mode          000000 stack reference condition                dcl 209 ref 2027 2032
card                      0(05)        based           bit(1)                   level 3 in structure "fo" packed unaligned dcl 193
                                                                                  in procedure "fort_defaults_" set ref 1548* 1580*
                                                                                  1739* 1769*
card                      0(07)        based           bit(1)                   level 2 in structure "arg_fd" packed unaligned
                                                                                  dcl 187 in procedure "fort_defaults_" ref 2103
card                      0(05)        based           bit(1)                   level 4 in structure "fort_op" packed unaligned
                                                                                  dcl 194 in procedure "fort_defaults_" ref 2394
card                      0(07)        based           bit(1)                   level 2 in structure "global_fd" packed unaligned
                                                                                  dcl 201 in procedure "fort_defaults_" set ref 2108
                                                                                  2111*
card                      0(07)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 650* 701*
                                                                                  1101* 1158 1161* 1552* 1585 1588* 1739 1963
check                     0(21)        based           bit(1)                   level 4 in structure "fort_op" packed unaligned
                                                                                  dcl 194 in procedure "fort_defaults_" ref 2400
check                     0(08)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 655* 770*
                                                                                  1742
check                     0(21)        based           bit(1)                   level 3 in structure "fo" packed unaligned dcl 193
                                                                                  in procedure "fort_defaults_" set ref 1742* 1810*
check_multiply            0(31)        based           bit(1)                   level 3 in structure "fort_op" packed unaligned
                                                                                  dcl 194 in procedure "fort_defaults_" ref 2335
check_multiply            0(09)        based           bit(1)                   level 2 in structure "global_fd" packed unaligned
                                                                                  dcl 201 in procedure "fort_defaults_" set ref 2141
                                                                                  2144*
check_multiply            0(09)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 660* 775*
                                                                                  1110* 1212 1215* 1562* 1595 1598* 1745
check_multiply            0(09)        based           bit(1)                   level 2 in structure "arg_fd" packed unaligned
                                                                                  dcl 187 in procedure "fort_defaults_" ref 2136
check_multiply            0(31)        based           bit(1)                   level 2 in structure "fo" packed unaligned dcl 193
                                                                                  in procedure "fort_defaults_" set ref 1560* 1592*
                                                                                  1718* 1745* 1831*
cmd                             000104 automatic       fixed bin(17,0)          dcl 188 set ref 562* 563 563* 563 565 1015* 1016
                                                                                  1016* 1016 1018 1460* 1461 1461* 1461 1463
cmd2_string                            based           char                     unaligned dcl 190 set ref 583* 602*
cmd2_string_len                 000102 automatic       fixed bin(21,0)          dcl 87 set ref 574* 576 583 583 593* 595 602 602
cmd2_string_ptr                 000100 automatic       pointer                  dcl 86 set ref 574* 583 593* 602
cmd_names                       000000 constant        structure                level 1 dcl 90 ref 562 1015 1460
cmd_string                             based           char                     unaligned dcl 189 set ref 562 567 585 585 588 604
                                                                                  604 609* 882* 1015 1020* 1060* 1069* 1078* 1087*
                                                                                  1096* 1105* 1114* 1123* 1132* 1142* 1151* 1160*
                                                                                  1169* 1178* 1187* 1196* 1205* 1214* 1223* 1232*
                                                                                  1237* 1242* 1247* 1252* 1257* 1266* 1275* 1284*
                                                                                  1289* 1294* 1299* 1308* 1317* 1326* 1335* 1344*
                                                                                  1353* 1362* 1371* 1376* 1385* 1394* 1399* 1408*
                                                                                  1417* 1422* 1460 1465* 1523* 1533* 1543* 1555*
                                                                                  1565* 1575* 1587* 1597* 1608* 1620* 1630* 1640*
                                                                                  1650* 1660* 1671* 1681* 1691* 1701*
cmd_string_len                         parameter       fixed bin(17,0)          dcl 170 ref 534 562 562 567 571 585 585 588 590 604
                                                                                  604 609 609 882 882 987 1015 1020 1020 1060 1060
                                                                                  1069 1069 1078 1078 1087 1087 1096 1096 1105 1105
                                                                                  1114 1114 1123 1123 1132 1132 1142 1142 1151 1151
                                                                                  1160 1160 1169 1169 1178 1178 1187 1187 1196 1196
                                                                                  1205 1205 1214 1214 1223 1223 1232 1232 1237 1237
                                                                                  1242 1242 1247 1247 1252 1252 1257 1257 1266 1266
                                                                                  1275 1275 1284 1284 1289 1289 1294 1294 1299 1299
                                                                                  1308 1308 1317 1317 1326 1326 1335 1335 1344 1344
                                                                                  1353 1353 1362 1362 1371 1371 1376 1376 1385 1385
                                                                                  1394 1394 1399 1399 1408 1408 1417 1417 1422 1422
                                                                                  1432 1460 1465 1465 1523 1523 1533 1533 1543 1543
                                                                                  1555 1555 1565 1565 1575 1575 1587 1587 1597 1597
                                                                                  1608 1608 1620 1620 1630 1630 1640 1640 1650 1650
                                                                                  1660 1660 1671 1671 1681 1681 1691 1691 1701 1701
cmd_string_ptr                         parameter       pointer                  dcl 171 ref 534 562 567 585 585 588 604 604 609 882
                                                                                  987 1015 1020 1060 1069 1078 1087 1096 1105 1114
                                                                                  1123 1132 1142 1151 1160 1169 1178 1187 1196 1205
                                                                                  1214 1223 1232 1237 1242 1247 1252 1257 1266 1275
                                                                                  1284 1289 1294 1299 1308 1317 1326 1335 1344 1353
                                                                                  1362 1371 1376 1385 1394 1399 1408 1417 1422 1432
                                                                                  1460 1465 1523 1533 1543 1555 1565 1575 1587 1597
                                                                                  1608 1620 1630 1640 1650 1660 1671 1681 1691 1701
code                            000103 automatic       fixed bin(35,0)          dcl 88 set ref 574* 576 593* 595
com_err_                        000010 constant        entry                    external dcl 214 ref 579 598 609 758 882 903 972 978
                                                                                  1996
comp_parm              2260            based           entry variable           array level 2 dcl 180 set ref 2510* 2511* 2512*
                                                                                  2513* 2514* 2515* 2516* 2517* 2518* 2519* 2520*
                                                                                  2521* 2522* 2523* 2524* 2525* 2526* 2527* 2528*
                                                                                  2529* 2530* 2531* 2532* 2533* 2534* 2535* 2536*
                                                                                  2537* 2538* 2539* 2540* 2541* 2542* 2543* 2544*
                                                                                  2545* 2696* 2697* 2698* 2699* 2700* 2701* 2702*
                                                                                  2703* 2704* 2705* 2706* 2707* 2708* 2709* 2710*
                                                                                  2711* 2712* 2713* 2714* 2715* 2716* 2717* 2718*
                                                                                  2719* 2720* 2721* 2722* 2723* 2724* 2725* 2726*
                                                                                  2727* 2728* 2729* 2730* 2731*
consolidate               0(10)        based           bit(1)                   level 2 in structure "arg_fd" packed unaligned
                                                                                  dcl 187 in procedure "fort_defaults_" ref 2147
consolidate               0(27)        based           bit(1)                   level 3 in structure "fo" packed unaligned dcl 193
                                                                                  in procedure "fort_defaults_" set ref 1748* 1774*
                                                                                  1862* 1876* 1900*
consolidate               0(10)        based           bit(1)                   level 2 in structure "global_fd" packed unaligned
                                                                                  dcl 201 in procedure "fort_defaults_" set ref 2152
                                                                                  2155*
consolidate               0(10)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 665* 923*
                                                                                  1119* 1351 1354* 1748
consolidate               0(27)        based           bit(1)                   level 4 in structure "fort_op" packed unaligned
                                                                                  dcl 194 in procedure "fort_defaults_" ref 2387
conv_round             2500            based           entry variable           array level 2 dcl 180 set ref 2547* 2548* 2549*
                                                                                  2550* 2551* 2552* 2553* 2554* 2555* 2556* 2557*
                                                                                  2558* 2559* 2560* 2561* 2562* 2563* 2564* 2565*
                                                                                  2566* 2567* 2568* 2569* 2570* 2571* 2572* 2573*
                                                                                  2574* 2575* 2576* 2577* 2578* 2579* 2580* 2581*
                                                                                  2582* 2733* 2734* 2735* 2736* 2737* 2738* 2739*
                                                                                  2740* 2741* 2742* 2743* 2744* 2745* 2746* 2747*
                                                                                  2748* 2749* 2750* 2751* 2752* 2753* 2754* 2755*
                                                                                  2756* 2757* 2758* 2759* 2760* 2761* 2762* 2763*
                                                                                  2764* 2765* 2766* 2767* 2768*
conv_trunc             2720            based           entry variable           array level 2 dcl 180 set ref 2584* 2585* 2586*
                                                                                  2587* 2588* 2589* 2590* 2591* 2592* 2593* 2594*
                                                                                  2595* 2596* 2597* 2598* 2599* 2600* 2601* 2602*
                                                                                  2603* 2604* 2605* 2606* 2607* 2608* 2609* 2610*
                                                                                  2611* 2612* 2613* 2614* 2615* 2616* 2617* 2618*
                                                                                  2619* 2770* 2771* 2772* 2773* 2774* 2775* 2776*
                                                                                  2777* 2778* 2779* 2780* 2781* 2782* 2783* 2784*
                                                                                  2785* 2786* 2787* 2788* 2789* 2790* 2791* 2792*
                                                                                  2793* 2794* 2795* 2796* 2797* 2798* 2799* 2800*
                                                                                  2801* 2802* 2803* 2804* 2805*
convert                                                builtin function         dcl 207 ref 2416
cu_$arg_ptr_rel                 000464 constant        entry                    external dcl 522 ref 574 593
debug                     0(11)        based           bit(1)                   level 2 packed unaligned dcl 192 set ref 670* 1751
debug_cg                  0(12)        based           bit(1)                   level 2 packed unaligned dcl 192 set ref 674* 1754
debug_io                  1(05)        based           bit(1)                   level 2 in structure "fo" packed unaligned dcl 193
                                                                                  in procedure "fort_defaults_" set ref 1757*
debug_io                  1(05)        based           bit(1)                   level 3 in structure "fort_op" packed unaligned
                                                                                  dcl 194 in procedure "fort_defaults_" ref 2423
debug_io                  0(13)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 678* 780*
                                                                                  1757
debugging                 0(16)        based           structure                level 3 in structure "fort_op" packed unaligned
                                                                                  dcl 194 in procedure "fort_defaults_"
debugging                 0(16)        based           structure                level 2 in structure "fo" packed unaligned dcl 193
                                                                                  in procedure "fort_defaults_"
default_full              0(14)        based           bit(1)                   level 2 in structure "global_fd" packed unaligned
                                                                                  dcl 201 in procedure "fort_defaults_" set ref 2163
                                                                                  2166*
default_full              0(14)        based           bit(1)                   level 2 in structure "arg_fd" packed unaligned
                                                                                  dcl 187 in procedure "fort_defaults_" ref 2158
default_full              0(14)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 683* 691*
                                                                                  1128* 1140 1143* 1605* 1618 1621*
default_safe              0(15)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 685* 688*
                                                                                  1130 1133* 1137* 1606 1609* 1617* 1760
default_safe              0(15)        based           bit(1)                   level 2 in structure "global_fd" packed unaligned
                                                                                  dcl 201 in procedure "fort_defaults_" set ref 2158
                                                                                  2161*
default_safe              0(15)        based           bit(1)                   level 2 in structure "arg_fd" packed unaligned
                                                                                  dcl 187 in procedure "fort_defaults_" ref 2163
do_rounding               0(28)        based           bit(1)                   level 3 in structure "fort_op" packed unaligned
                                                                                  dcl 194 in procedure "fort_defaults_" ref 2332
do_rounding               0(28)        based           bit(1)                   level 2 in structure "fo" packed unaligned dcl 193
                                                                                  in procedure "fort_defaults_" set ref 1655* 1696*
                                                                                  1871* 1903*
dummy_var                       000106 automatic       bit(72)                  unaligned dcl 191 set ref 2031*
error_messages            0(11)        based           structure                level 2 in structure "fo" packed unaligned dcl 193
                                                                                  in procedure "fort_defaults_"
error_messages            0(11)        based           structure                level 3 in structure "fort_op" packed unaligned
                                                                                  dcl 194 in procedure "fort_defaults_"
error_table_$badopt             000012 external static fixed bin(35,0)          dcl 215 set ref 609*
fd                                     based           structure                level 1 packed unaligned dcl 192
fd_ptr                                 parameter       pointer                  dcl 172 ref 534 614 616 619 621 624 626 629 631 634
                                                                                  636 639 641 644 646 647 650 652 655 657 660 662
                                                                                  665 667 670 674 678 680 683 685 688 691 694 696
                                                                                  699 701 704 706 709 711 712 713 716 718 721 723
                                                                                  726 728 731 733 736 738 739 742 744 747 749 752
                                                                                  754 755 763 765 768 770 773 775 778 780 783 785
                                                                                  788 790 791 792 795 797 800 802 803 806 808 809
                                                                                  810 813 815 818 820 823 825 826 829 831 834 836
                                                                                  837 838 839 842 844 847 849 853 855 856 857 860
                                                                                  862 865 867 870 872 875 877 878 879 888 890 893
                                                                                  895 898 900 907 909 910 913 917 921 923 926 928
                                                                                  931 933 936 938 941 943 946 948 951 953 956 958
                                                                                  981 987 1056 1058 1061 1065 1067 1070 1074 1076
                                                                                  1079 1083 1085 1088 1092 1094 1097 1101 1103 1106
                                                                                  1110 1112 1115 1119 1121 1124 1128 1130 1133 1137
                                                                                  1140 1143 1147 1149 1152 1156 1158 1161 1165 1167
                                                                                  1170 1174 1176 1179 1183 1185 1188 1192 1194 1197
                                                                                  1201 1203 1206 1210 1212 1215 1219 1221 1224 1228
                                                                                  1230 1233 1235 1238 1240 1243 1245 1248 1250 1253
                                                                                  1255 1258 1262 1264 1267 1271 1273 1276 1280 1282
                                                                                  1285 1287 1290 1292 1295 1297 1300 1304 1306 1309
                                                                                  1313 1315 1318 1322 1324 1327 1331 1333 1336 1340
                                                                                  1342 1345 1349 1351 1354 1358 1360 1363 1367 1369
                                                                                  1372 1374 1377 1381 1383 1386 1390 1392 1395 1397
                                                                                  1400 1404 1406 1409 1413 1415 1418 1420 1423 1432
                                                                                  1520 1521 1524 1530 1531 1534 1541 1544 1550 1552
                                                                                  1553 1556 1562 1563 1566 1572 1573 1576 1582 1584
                                                                                  1585 1588 1594 1595 1598 1602 1605 1606 1609 1613
                                                                                  1617 1618 1621 1627 1628 1631 1637 1638 1641 1647
                                                                                  1648 1651 1657 1658 1661 1668 1669 1672 1678 1679
                                                                                  1682 1688 1689 1692 1698 1699 1702 1710 1713 1716
                                                                                  1718 1718 1718 1724 1727 1730 1733 1736 1739 1742
                                                                                  1745 1748 1751 1754 1757 1760 1764 1767 1770 1774
                                                                                  1777 1780 1783 1786 1792 1795 1798 1801 1804 1807
                                                                                  1810 1813 1816 1822 1825 1828 1831 1834 1837 1840
                                                                                  1848 1856 1859 1862 1865 1868 1871 1874 1880 1882
                                                                                  1885 1888 1891 1891 1891 1894 1897 1900 1903 1906
                                                                                  1909 1917 1920 1924 1927 1932 1934 1938 1941 1950
                                                                                  1954 1954 1957 1957 1960 1960 1963 1963 1966 1968
                                                                                  1970 1974 1976 1978 1982 1984 1986 2051 2053
first_arg                              parameter       char                     unaligned dcl 1993 set ref 1990 1996*
fo                                     based           structure                level 1 packed unaligned dcl 193
fo_ptr                                 parameter       pointer                  dcl 174 ref 1432 1518 1528 1548 1550 1560 1570 1580
                                                                                  1582 1592 1602 1613 1625 1635 1645 1655 1676 1686
                                                                                  1696 1710 1713 1718 1718 1718 1721 1724 1727 1730
                                                                                  1733 1736 1739 1739 1742 1745 1748 1751 1754 1754
                                                                                  1757 1760 1762 1764 1769 1770 1774 1774 1774 1777
                                                                                  1780 1783 1788 1789 1792 1795 1798 1798 1801 1804
                                                                                  1807 1810 1813 1818 1819 1822 1825 1828 1831 1834
                                                                                  1837 1840 1850 1851 1852 1853 1856 1859 1862 1862
                                                                                  1865 1868 1871 1876 1876 1877 1880 1882 1885 1888
                                                                                  1891 1891 1894 1897 1900 1903 1908 1909 1911 1912
                                                                                  1913 1914 1919 1920 1926 1927 1929 1934 1940 1941
                                                                                  1943
fold                      0(04)        based           bit(1)                   level 4 in structure "fort_op" packed unaligned
                                                                                  dcl 194 in procedure "fort_defaults_" ref 2396
fold                      0(16)        based           bit(1)                   level 2 in structure "arg_fd" packed unaligned
                                                                                  dcl 187 in procedure "fort_defaults_" ref 2114
fold                      0(04)        based           bit(1)                   level 3 in structure "fo" packed unaligned dcl 193
                                                                                  in procedure "fort_defaults_" set ref 1550* 1570*
                                                                                  1582* 1625* 1739* 1764* 1770* 1813*
fold                      0(16)        based           bit(1)                   level 2 in structure "global_fd" packed unaligned
                                                                                  dcl 201 in procedure "fort_defaults_" set ref 2119
                                                                                  2122*
fold                      0(16)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 694* 785*
                                                                                  1147* 1221 1224* 1572* 1582 1628 1631* 1764 1770
fort_bfp_math$bad_data_types    000220 constant        entry                    external dcl 352 ref 2626 2627 2632 2633 2638 2639
                                                                                  2644 2645 2646 2647 2648 2649 2651 2652 2653 2654
                                                                                  2655 2656 2663 2664 2669 2670 2675 2676 2681 2682
                                                                                  2683 2684 2685 2686 2688 2689 2690 2691 2692 2693
                                                                                  2699 2700 2701 2705 2706 2707 2711 2712 2713 2714
                                                                                  2715 2716 2718 2719 2720 2721 2722 2723 2725 2726
                                                                                  2727 2728 2729 2730
fort_bfp_math$binop_ch_ch       000226 constant        entry                    external dcl 359 ref 2657 2694
fort_bfp_math$binop_cp_cp_round 000124 constant        entry                    external dcl 289 ref 2643
fort_bfp_math$binop_cp_cp_trunc 000164 constant        entry                    external dcl 322 ref 2680
fort_bfp_math$binop_cp_dp_round 000122 constant        entry                    external dcl 287 ref 2642
fort_bfp_math$binop_cp_dp_trunc 000162 constant        entry                    external dcl 320 ref 2679
fort_bfp_math$binop_cp_i_round  000116 constant        entry                    external dcl 283 ref 2640
fort_bfp_math$binop_cp_i_trunc  000156 constant        entry                    external dcl 316 ref 2677
fort_bfp_math$binop_cp_r_round  000120 constant        entry                    external dcl 285 ref 2641
fort_bfp_math$binop_cp_r_trunc  000160 constant        entry                    external dcl 318 ref 2678
fort_bfp_math$binop_dp_cp_round 000126 constant        entry                    external dcl 291 ref 2637
fort_bfp_math$binop_dp_cp_trunc 000166 constant        entry                    external dcl 324 ref 2674
fort_bfp_math$binop_dp_dp_round 000110 constant        entry                    external dcl 277 ref 2636
fort_bfp_math$binop_dp_dp_trunc 000150 constant        entry                    external dcl 310 ref 2673
fort_bfp_math$binop_dp_i_round  000104 constant        entry                    external dcl 273 ref 2634
fort_bfp_math$binop_dp_i_trunc  000144 constant        entry                    external dcl 306 ref 2671
fort_bfp_math$binop_dp_r_round  000106 constant        entry                    external dcl 275 ref 2635
fort_bfp_math$binop_dp_r_trunc  000146 constant        entry                    external dcl 308 ref 2672
fort_bfp_math$binop_i_cp_round  000132 constant        entry                    external dcl 295 ref 2625
fort_bfp_math$binop_i_cp_trunc  000172 constant        entry                    external dcl 328 ref 2662
fort_bfp_math$binop_i_dp_round  000114 constant        entry                    external dcl 281 ref 2624
fort_bfp_math$binop_i_dp_trunc  000154 constant        entry                    external dcl 314 ref 2661
fort_bfp_math$binop_i_i_round   000074 constant        entry                    external dcl 265 ref 2622
fort_bfp_math$binop_i_i_trunc   000134 constant        entry                    external dcl 298 ref 2659
fort_bfp_math$binop_i_r_round   000102 constant        entry                    external dcl 271 ref 2623
fort_bfp_math$binop_i_r_trunc   000142 constant        entry                    external dcl 304 ref 2660
fort_bfp_math$binop_lg_lg       000224 constant        entry                    external dcl 357 ref 2650 2687
fort_bfp_math$binop_r_cp_round  000130 constant        entry                    external dcl 293 ref 2631
fort_bfp_math$binop_r_cp_trunc  000170 constant        entry                    external dcl 326 ref 2668
fort_bfp_math$binop_r_dp_round  000112 constant        entry                    external dcl 279 ref 2630
fort_bfp_math$binop_r_dp_trunc  000152 constant        entry                    external dcl 312 ref 2667
fort_bfp_math$binop_r_i_round   000076 constant        entry                    external dcl 267 ref 2628
fort_bfp_math$binop_r_i_trunc   000136 constant        entry                    external dcl 300 ref 2665
fort_bfp_math$binop_r_r_round   000100 constant        entry                    external dcl 269 ref 2629
fort_bfp_math$binop_r_r_trunc   000140 constant        entry                    external dcl 302 ref 2666
fort_bfp_math$comp_ch_ch        000232 constant        entry                    external dcl 363 ref 2731
fort_bfp_math$comp_cp_cp        000216 constant        entry                    external dcl 349 ref 2717
fort_bfp_math$comp_dp_dp        000210 constant        entry                    external dcl 343 ref 2710
fort_bfp_math$comp_dp_i         000204 constant        entry                    external dcl 339 ref 2708
fort_bfp_math$comp_dp_r         000206 constant        entry                    external dcl 341 ref 2709
fort_bfp_math$comp_i_dp         000214 constant        entry                    external dcl 347 ref 2698
fort_bfp_math$comp_i_i          000174 constant        entry                    external dcl 331 ref 2696
fort_bfp_math$comp_i_r          000202 constant        entry                    external dcl 337 ref 2697
fort_bfp_math$comp_lg_lg        000230 constant        entry                    external dcl 361 ref 2724
fort_bfp_math$comp_r_dp         000212 constant        entry                    external dcl 345 ref 2704
fort_bfp_math$comp_r_i          000176 constant        entry                    external dcl 333 ref 2702
fort_bfp_math$comp_r_r          000200 constant        entry                    external dcl 335 ref 2703
fort_bfp_math$conv_ch_to_ch     000234 constant        entry                    external dcl 365 ref 2768 2805
fort_bfp_math$conv_cp_to_dp_round
                                000034 constant        entry                    external dcl 232 ref 2748
fort_bfp_math$conv_cp_to_dp_trunc
                                000064 constant        entry                    external dcl 256 ref 2785
fort_bfp_math$conv_cp_to_i_round
                                000020 constant        entry                    external dcl 220 ref 2736
fort_bfp_math$conv_cp_to_i_trunc
                                000050 constant        entry                    external dcl 244 ref 2773
fort_bfp_math$conv_cp_to_r_round
                                000026 constant        entry                    external dcl 226 ref 2742
fort_bfp_math$conv_cp_to_r_trunc
                                000056 constant        entry                    external dcl 250 ref 2779
fort_bfp_math$conv_dp_to_cp_round
                                000042 constant        entry                    external dcl 238 ref 2753
fort_bfp_math$conv_dp_to_cp_trunc
                                000072 constant        entry                    external dcl 262 ref 2790
fort_bfp_math$conv_dp_to_i_round
                                000016 constant        entry                    external dcl 218 ref 2735
fort_bfp_math$conv_dp_to_i_trunc
                                000046 constant        entry                    external dcl 242 ref 2772
fort_bfp_math$conv_dp_to_r_round
                                000024 constant        entry                    external dcl 224 ref 2741
fort_bfp_math$conv_dp_to_r_trunc
                                000054 constant        entry                    external dcl 248 ref 2778
fort_bfp_math$conv_i_to_cp_round
                                000036 constant        entry                    external dcl 234 ref 2751
fort_bfp_math$conv_i_to_cp_trunc
                                000066 constant        entry                    external dcl 258 ref 2788
fort_bfp_math$conv_i_to_dp_round
                                000030 constant        entry                    external dcl 228 ref 2745
fort_bfp_math$conv_i_to_dp_trunc
                                000060 constant        entry                    external dcl 252 ref 2782
fort_bfp_math$conv_i_to_r_round 000022 constant        entry                    external dcl 222 ref 2739
fort_bfp_math$conv_i_to_r_trunc 000052 constant        entry                    external dcl 246 ref 2776
fort_bfp_math$conv_r_to_cp_round
                                000040 constant        entry                    external dcl 236 ref 2752
fort_bfp_math$conv_r_to_cp_trunc
                                000070 constant        entry                    external dcl 260 ref 2789
fort_bfp_math$conv_r_to_dp_round
                                000032 constant        entry                    external dcl 230 ref 2746
fort_bfp_math$conv_r_to_dp_trunc
                                000062 constant        entry                    external dcl 254 ref 2783
fort_bfp_math$conv_r_to_i_round 000014 constant        entry                    external dcl 216 ref 2734
fort_bfp_math$conv_r_to_i_trunc 000044 constant        entry                    external dcl 240 ref 2771
fort_bfp_math$unary_bad_data    000222 constant        entry                    external dcl 354 ref 2737 2738 2743 2744 2749 2750
                                                                                  2755 2756 2757 2758 2759 2760 2762 2763 2764 2765
                                                                                  2766 2767 2774 2775 2780 2781 2786 2787 2792 2793
                                                                                  2794 2795 2796 2797 2799 2800 2801 2802 2803 2804
fort_bfp_math$unary_no_op       000236 constant        entry                    external dcl 367 ref 2733 2740 2747 2754 2761 2770
                                                                                  2777 2784 2791 2798
fort_hfp_math$bad_data_types    000444 constant        entry                    external dcl 505 ref 2440 2441 2446 2447 2452 2453
                                                                                  2458 2459 2460 2461 2462 2463 2465 2466 2467 2468
                                                                                  2469 2470 2477 2478 2483 2484 2489 2490 2495 2496
                                                                                  2497 2498 2499 2500 2502 2503 2504 2505 2506 2507
                                                                                  2513 2514 2515 2519 2520 2521 2525 2526 2527 2528
                                                                                  2529 2530 2532 2533 2534 2535 2536 2537 2539 2540
                                                                                  2541 2542 2543 2544
fort_hfp_math$binop_ch_ch       000452 constant        entry                    external dcl 512 ref 2471 2508
fort_hfp_math$binop_cp_cp_round 000350 constant        entry                    external dcl 442 ref 2457
fort_hfp_math$binop_cp_cp_trunc 000410 constant        entry                    external dcl 475 ref 2494
fort_hfp_math$binop_cp_dp_round 000346 constant        entry                    external dcl 440 ref 2456
fort_hfp_math$binop_cp_dp_trunc 000406 constant        entry                    external dcl 473 ref 2493
fort_hfp_math$binop_cp_i_round  000342 constant        entry                    external dcl 436 ref 2454
fort_hfp_math$binop_cp_i_trunc  000402 constant        entry                    external dcl 469 ref 2491
fort_hfp_math$binop_cp_r_round  000344 constant        entry                    external dcl 438 ref 2455
fort_hfp_math$binop_cp_r_trunc  000404 constant        entry                    external dcl 471 ref 2492
fort_hfp_math$binop_dp_cp_round 000352 constant        entry                    external dcl 444 ref 2451
fort_hfp_math$binop_dp_cp_trunc 000412 constant        entry                    external dcl 477 ref 2488
fort_hfp_math$binop_dp_dp_round 000334 constant        entry                    external dcl 430 ref 2450
fort_hfp_math$binop_dp_dp_trunc 000374 constant        entry                    external dcl 463 ref 2487
fort_hfp_math$binop_dp_i_round  000330 constant        entry                    external dcl 426 ref 2448
fort_hfp_math$binop_dp_i_trunc  000370 constant        entry                    external dcl 459 ref 2485
fort_hfp_math$binop_dp_r_round  000332 constant        entry                    external dcl 428 ref 2449
fort_hfp_math$binop_dp_r_trunc  000372 constant        entry                    external dcl 461 ref 2486
fort_hfp_math$binop_i_cp_round  000356 constant        entry                    external dcl 448 ref 2439
fort_hfp_math$binop_i_cp_trunc  000416 constant        entry                    external dcl 481 ref 2476
fort_hfp_math$binop_i_dp_round  000340 constant        entry                    external dcl 434 ref 2438
fort_hfp_math$binop_i_dp_trunc  000400 constant        entry                    external dcl 467 ref 2475
fort_hfp_math$binop_i_i_round   000320 constant        entry                    external dcl 418 ref 2436
fort_hfp_math$binop_i_i_trunc   000360 constant        entry                    external dcl 451 ref 2473
fort_hfp_math$binop_i_r_round   000326 constant        entry                    external dcl 424 ref 2437
fort_hfp_math$binop_i_r_trunc   000366 constant        entry                    external dcl 457 ref 2474
fort_hfp_math$binop_lg_lg       000450 constant        entry                    external dcl 510 ref 2464 2501
fort_hfp_math$binop_r_cp_round  000354 constant        entry                    external dcl 446 ref 2445
fort_hfp_math$binop_r_cp_trunc  000414 constant        entry                    external dcl 479 ref 2482
fort_hfp_math$binop_r_dp_round  000336 constant        entry                    external dcl 432 ref 2444
fort_hfp_math$binop_r_dp_trunc  000376 constant        entry                    external dcl 465 ref 2481
fort_hfp_math$binop_r_i_round   000322 constant        entry                    external dcl 420 ref 2442
fort_hfp_math$binop_r_i_trunc   000362 constant        entry                    external dcl 453 ref 2479
fort_hfp_math$binop_r_r_round   000324 constant        entry                    external dcl 422 ref 2443
fort_hfp_math$binop_r_r_trunc   000364 constant        entry                    external dcl 455 ref 2480
fort_hfp_math$comp_ch_ch        000456 constant        entry                    external dcl 516 ref 2545
fort_hfp_math$comp_cp_cp        000442 constant        entry                    external dcl 502 ref 2531
fort_hfp_math$comp_dp_dp        000434 constant        entry                    external dcl 496 ref 2524
fort_hfp_math$comp_dp_i         000430 constant        entry                    external dcl 492 ref 2522
fort_hfp_math$comp_dp_r         000432 constant        entry                    external dcl 494 ref 2523
fort_hfp_math$comp_i_dp         000440 constant        entry                    external dcl 500 ref 2512
fort_hfp_math$comp_i_i          000420 constant        entry                    external dcl 484 ref 2510
fort_hfp_math$comp_i_r          000426 constant        entry                    external dcl 490 ref 2511
fort_hfp_math$comp_lg_lg        000454 constant        entry                    external dcl 514 ref 2538
fort_hfp_math$comp_r_dp         000436 constant        entry                    external dcl 498 ref 2518
fort_hfp_math$comp_r_i          000422 constant        entry                    external dcl 486 ref 2516
fort_hfp_math$comp_r_r          000424 constant        entry                    external dcl 488 ref 2517
fort_hfp_math$conv_ch_to_ch     000460 constant        entry                    external dcl 518 ref 2582 2619
fort_hfp_math$conv_cp_to_dp_round
                                000260 constant        entry                    external dcl 385 ref 2562
fort_hfp_math$conv_cp_to_dp_trunc
                                000310 constant        entry                    external dcl 409 ref 2599
fort_hfp_math$conv_cp_to_i_round
                                000244 constant        entry                    external dcl 373 ref 2550
fort_hfp_math$conv_cp_to_i_trunc
                                000274 constant        entry                    external dcl 397 ref 2587
fort_hfp_math$conv_cp_to_r_round
                                000252 constant        entry                    external dcl 379 ref 2556
fort_hfp_math$conv_cp_to_r_trunc
                                000302 constant        entry                    external dcl 403 ref 2593
fort_hfp_math$conv_dp_to_cp_round
                                000266 constant        entry                    external dcl 391 ref 2567
fort_hfp_math$conv_dp_to_cp_trunc
                                000316 constant        entry                    external dcl 415 ref 2604
fort_hfp_math$conv_dp_to_i_round
                                000242 constant        entry                    external dcl 371 ref 2549
fort_hfp_math$conv_dp_to_i_trunc
                                000272 constant        entry                    external dcl 395 ref 2586
fort_hfp_math$conv_dp_to_r_round
                                000250 constant        entry                    external dcl 377 ref 2555
fort_hfp_math$conv_dp_to_r_trunc
                                000300 constant        entry                    external dcl 401 ref 2592
fort_hfp_math$conv_i_to_cp_round
                                000262 constant        entry                    external dcl 387 ref 2565
fort_hfp_math$conv_i_to_cp_trunc
                                000312 constant        entry                    external dcl 411 ref 2602
fort_hfp_math$conv_i_to_dp_round
                                000254 constant        entry                    external dcl 381 ref 2559
fort_hfp_math$conv_i_to_dp_trunc
                                000304 constant        entry                    external dcl 405 ref 2596
fort_hfp_math$conv_i_to_r_round 000246 constant        entry                    external dcl 375 ref 2553
fort_hfp_math$conv_i_to_r_trunc 000276 constant        entry                    external dcl 399 ref 2590
fort_hfp_math$conv_r_to_cp_round
                                000264 constant        entry                    external dcl 389 ref 2566
fort_hfp_math$conv_r_to_cp_trunc
                                000314 constant        entry                    external dcl 413 ref 2603
fort_hfp_math$conv_r_to_dp_round
                                000256 constant        entry                    external dcl 383 ref 2560
fort_hfp_math$conv_r_to_dp_trunc
                                000306 constant        entry                    external dcl 407 ref 2597
fort_hfp_math$conv_r_to_i_round 000240 constant        entry                    external dcl 369 ref 2031 2548
fort_hfp_math$conv_r_to_i_trunc 000270 constant        entry                    external dcl 393 ref 2585
fort_hfp_math$unary_bad_data    000446 constant        entry                    external dcl 507 ref 2551 2552 2557 2558 2563 2564
                                                                                  2569 2570 2571 2572 2573 2574 2576 2577 2578 2579
                                                                                  2580 2581 2588 2589 2594 2595 2600 2601 2606 2607
                                                                                  2608 2609 2610 2611 2613 2614 2615 2616 2617 2618
fort_hfp_math$unary_no_op       000462 constant        entry                    external dcl 520 ref 2547 2554 2561 2568 2575 2584
                                                                                  2591 2598 2605 2612
fort_op                                based           structure                level 1 unaligned dcl 194
fort_op_ptr                            parameter       pointer                  dcl 175 ref 2306 2310 2313 2316 2318 2320 2322 2324
                                                                                  2326 2328 2328 2330 2330 2332 2335 2337 2337 2339
                                                                                  2341 2343 2343 2343 2343 2345 2347 2348 2348 2348
                                                                                  2348 2350 2355 2357 2361 2363 2367 2369 2373 2375
                                                                                  2382 2384 2387 2390 2392 2394 2396 2398 2400 2402
                                                                                  2404 2406 2409 2411 2413 2416 2419 2421 2423
fort_shared_variables           000112 automatic       structure                level 1 dcl 528
fortran_declared                       based           structure                level 1 dcl 1-91
fortran_options                        based           structure                level 1 dcl 1-40
free                      0(17)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 652* 699*
                                                                                  1103 1106* 1156* 1553 1556* 1584* 1767
free                      0(17)        based           bit(1)                   level 2 in structure "arg_fd" packed unaligned
                                                                                  dcl 187 in procedure "fort_defaults_" ref 2108
free                      0(17)        based           bit(1)                   level 2 in structure "global_fd" packed unaligned
                                                                                  dcl 201 in procedure "fort_defaults_" set ref 2103
                                                                                  2106*
full_optimize             0(18)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 709* 808*
                                                                                  855* 877* 1613 1718 1774 1982 2053
full_optimize             0(18)        based           bit(1)                   level 2 in structure "arg_fd" packed unaligned
                                                                                  dcl 187 in procedure "fort_defaults_" ref 2035
                                                                                  2043
glb_case                        004200 automatic       label variable           initial array dcl 991 set ref 991* 991* 991* 991*
                                                                                  991* 991* 991* 991* 991* 991* 991* 991* 991* 991*
                                                                                  991* 991* 991* 991* 991* 991* 991* 991* 991* 991*
                                                                                  991* 991* 991* 991* 991* 991* 991* 991* 991* 991*
                                                                                  991* 991* 991* 991* 991* 991* 991* 991* 991* 991*
                                                                                  991* 991* 991* 991* 991* 991* 991* 991* 991* 991*
                                                                                  991* 991* 991* 991* 991* 991* 991* 991* 991* 991*
                                                                                  991* 991* 991* 991* 991* 991* 991* 991* 991* 991*
                                                                                  991* 991* 991* 991* 991* 991* 991* 991* 991* 991*
                                                                                  991* 991* 991* 991* 991* 991* 991* 991* 991* 991*
                                                                                  991* 991* 991* 991* 991* 991* 991* 991* 991* 991*
                                                                                  991* 991* 991* 991* 991* 991* 991* 991* 1018
global_fd                              based           structure                level 1 packed unaligned dcl 201
global_fd_ptr                          parameter       pointer                  dcl 176 ref 2005 2009 2012 2014 2017 2025 2037 2045
                                                                                  2047 2055 2059 2062 2064 2067 2070 2073 2075 2078
                                                                                  2081 2084 2086 2089 2092 2095 2097 2100 2103 2106
                                                                                  2108 2111 2114 2117 2119 2122 2125 2128 2130 2133
                                                                                  2136 2139 2141 2144 2147 2150 2152 2155 2158 2161
                                                                                  2163 2166 2169 2172 2174 2177 2180 2183 2185 2188
                                                                                  2191 2194 2196 2199 2202 2205 2207 2210 2213 2216
                                                                                  2218 2221 2224 2227 2229 2232 2235 2238 2240 2243
                                                                                  2246 2249 2251 2254 2257 2260 2262 2265 2268 2271
                                                                                  2273 2276 2279 2282 2284 2287 2290 2293 2295 2298
global_fo_ptr                          parameter       pointer                  dcl 177 ref 1432
has_line_numbers          0(03)        based           bit(1)                   level 4 in structure "fort_op" packed unaligned
                                                                                  dcl 194 in procedure "fort_defaults_" ref 2318
has_line_numbers          0(03)        based           bit(1)                   level 3 in structure "fo" packed unaligned dcl 193
                                                                                  in procedure "fort_defaults_" set ref 1792* 1822*
hexadecimal_floating_point
                          0(19)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 636* 704*
                                                                                  1094 1097* 1165* 1777
hexadecimal_floating_point
                          0(19)        based           bit(1)                   level 2 in structure "arg_fd" packed unaligned
                                                                                  dcl 187 in procedure "fort_defaults_" ref 2014
                                                                                  2025
hexadecimal_floating_point
                          0(19)        based           bit(1)                   level 2 in structure "global_fd" packed unaligned
                                                                                  dcl 201 in procedure "fort_defaults_" set ref 2009
                                                                                  2012* 2025
hfp                     114(04)        based           bit(1)                   level 4 in structure "shared_vars" packed unaligned
                                                                                  dcl 180 in procedure "fort_defaults_" ref 2434
hfp                       1(04)        based           bit(1)                   level 2 in structure "fo" packed unaligned dcl 193
                                                                                  in procedure "fort_defaults_" set ref 1730* 1777*
hfp                       1(04)        based           bit(1)                   level 3 in structure "fort_op" packed unaligned
                                                                                  dcl 194 in procedure "fort_defaults_" ref 2313
i                               000110 automatic       fixed bin(17,0)          dcl 203 set ref 2808* 2809 2809 2809 2810 2810 2810*
ignore_articulation_blocks
                          0(26)        based           bit(1)                   level 4 in structure "fort_op" packed unaligned
                                                                                  dcl 194 in procedure "fort_defaults_" ref 2384
ignore_articulation_blocks
                          0(26)        based           bit(1)                   level 3 in structure "fo" packed unaligned dcl 193
                                                                                  in procedure "fort_defaults_" set ref 1602* 1613*
                                                                                  1760* 1762* 1774* 1877*
is_fast                   2            based           bit(1)                   level 3 packed unaligned dcl 194 ref 2316
la_auto                   0(20)        based           bit(1)                   level 2 in structure "arg_fd" packed unaligned
                                                                                  dcl 187 in procedure "fort_defaults_" ref 2191
la_auto                   0(20)        based           bit(1)                   level 2 in structure "global_fd" packed unaligned
                                                                                  dcl 201 in procedure "fort_defaults_" set ref 2196
                                                                                  2199*
la_auto                   0(20)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 716* 791*
                                                                                  1174* 1235 1238* 1780
la_static                 0(21)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 721* 792*
                                                                                  1183* 1240 1243* 1783
la_static                 0(21)        based           bit(1)                   level 2 in structure "arg_fd" packed unaligned
                                                                                  dcl 187 in procedure "fort_defaults_" ref 2202
la_static                 0(21)        based           bit(1)                   level 2 in structure "global_fd" packed unaligned
                                                                                  dcl 201 in procedure "fort_defaults_" set ref 2207
                                                                                  2210*
large_array               0(22)        based           bit(1)                   level 2 in structure "arg_fd" packed unaligned
                                                                                  dcl 187 in procedure "fort_defaults_" ref 2180
large_array               0(22)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 726* 790*
                                                                                  1192* 1230 1233* 1786
large_array               0(22)        based           bit(1)                   level 2 in structure "global_fd" packed unaligned
                                                                                  dcl 201 in procedure "fort_defaults_" set ref 2185
                                                                                  2188*
level                                  parameter       char                     unaligned dcl 964 set ref 961 967 969 972* 976 978*
level_no                        000100 automatic       fixed bin(17,0)          dcl 965 set ref 967* 976 981
line_numbers              0(23)        based           bit(1)                   level 2 packed unaligned dcl 192 set ref 731* 797*
                                                                                  1792 1963
list                      0(24)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 736* 755*
                                                                                  803* 1801
list                      0(10)        based           bit(1)                   level 4 in structure "fort_op" packed unaligned
                                                                                  dcl 194 in procedure "fort_defaults_" ref 2409
listing                   0(07)        based           structure                level 3 in structure "fort_op" packed unaligned
                                                                                  dcl 194 in procedure "fort_defaults_"
listing                   0(07)        based           structure                level 2 in structure "fo" packed unaligned dcl 193
                                                                                  in procedure "fort_defaults_" set ref 1801* 1804
                                                                                  1825*
long                      0(25)        based           bit(1)                   level 2 packed unaligned dcl 192 set ref 641* 742*
                                                                                  1795
long_profile              0(26)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 747* 862*
                                                                                  1798
long_profile              1(02)        based           bit(1)                   level 3 in structure "fort_op" packed unaligned
                                                                                  dcl 194 in procedure "fort_defaults_" ref 2328
                                                                                  2330
long_profile              1(02)        based           bit(1)                   level 2 in structure "fo" packed unaligned dcl 193
                                                                                  in procedure "fort_defaults_" set ref 1798*
ltrim                                                  builtin function         dcl 207 ref 2416
map                       0(27)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 738* 752*
                                                                                  802* 1804
map                       0(09)        based           bit(1)                   level 4 in structure "fort_op" packed unaligned
                                                                                  dcl 194 in procedure "fort_defaults_" ref 2411
negate_round           1540            based           entry variable           array level 2 dcl 180 set ref 2809*
negate_trunc           1570            based           entry variable           array level 2 dcl 180 set ref 2810*
no_auto_zero              0(28)        based           bit(1)                   level 2 in structure "arg_fd" packed unaligned
                                                                                  dcl 187 in procedure "fort_defaults_" ref 2086
no_auto_zero              0(28)        based           bit(1)                   level 2 in structure "global_fd" packed unaligned
                                                                                  dcl 201 in procedure "fort_defaults_" set ref 2081
                                                                                  2084*
no_auto_zero              0(28)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 631* 763*
                                                                                  1085 1088* 1201* 1807
no_check                  0(29)        based           bit(1)                   level 2 packed unaligned dcl 192 set ref 657* 768*
                                                                                  1810
no_check_multiply         0(35)        based           bit(1)                   level 2 in structure "global_fd" packed unaligned
                                                                                  dcl 201 in procedure "fort_defaults_" set ref 2136
                                                                                  2139*
no_check_multiply         0(35)        based           bit(1)                   level 2 in structure "arg_fd" packed unaligned
                                                                                  dcl 187 in procedure "fort_defaults_" ref 2141
no_check_multiply         0(35)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 662* 773*
                                                                                  1112 1115* 1210* 1563 1566* 1594* 1831
no_debug_io               1            based           bit(1)                   level 2 packed unaligned dcl 192 set ref 680* 778*
no_fold                   0(30)        based           bit(1)                   level 2 in structure "arg_fd" packed unaligned
                                                                                  dcl 187 in procedure "fort_defaults_" ref 2119
no_fold                   0(30)        based           bit(1)                   level 2 in structure "global_fd" packed unaligned
                                                                                  dcl 201 in procedure "fort_defaults_" set ref 2114
                                                                                  2117*
no_fold                   0(30)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 696* 783*
                                                                                  1149 1152* 1219* 1550 1573 1576* 1627* 1813
no_large_array            0(31)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 718* 723*
                                                                                  728* 788* 1176 1179* 1185 1188* 1194 1197* 1228*
                                                                                  1374 1377* 1397 1400* 1420 1423* 1816 1954 1957
                                                                                  1960
no_large_array            0(31)        based           bit(1)                   level 2 in structure "global_fd" packed unaligned
                                                                                  dcl 201 in procedure "fort_defaults_" set ref 2180
                                                                                  2183* 2191 2194* 2202 2205* 2218 2221* 2229 2232*
                                                                                  2240 2243*
no_large_array            0(31)        based           bit(1)                   level 2 in structure "arg_fd" packed unaligned
                                                                                  dcl 187 in procedure "fort_defaults_" ref 2185
                                                                                  2196 2207 2213 2224 2235
no_line_numbers           0(32)        based           bit(1)                   level 2 packed unaligned dcl 192 set ref 733* 795*
                                                                                  1822
no_map                    0(33)        based           bit(1)                   level 2 packed unaligned dcl 192 set ref 739* 754*
                                                                                  800* 1825
no_optimize               0(34)        based           bit(1)                   level 2 packed unaligned dcl 192 set ref 713* 806*
                                                                                  857* 879* 1828
no_stringrange            1(01)        based           bit(1)                   level 2 in structure "arg_fd" packed unaligned
                                                                                  dcl 187 in procedure "fort_defaults_" ref 2064
no_stringrange            1(01)        based           bit(1)                   level 2 in structure "global_fd" packed unaligned
                                                                                  dcl 201 in procedure "fort_defaults_" set ref 2059
                                                                                  2062*
no_stringrange            1(01)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 813* 895*
                                                                                  1262* 1333 1336* 1637* 1679 1682* 1834
no_subscriptrange         1(02)        based           bit(1)                   level 2 in structure "arg_fd" packed unaligned
                                                                                  dcl 187 in procedure "fort_defaults_" ref 2075
no_subscriptrange         1(02)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 818* 900*
                                                                                  1271* 1342 1345* 1647* 1689 1692* 1837
no_subscriptrange         1(02)        based           bit(1)                   level 2 in structure "global_fd" packed unaligned
                                                                                  dcl 201 in procedure "fort_defaults_" set ref 2070
                                                                                  2073*
no_table                  1(03)        based           bit(1)                   level 2 packed unaligned dcl 192 set ref 647* 823*
                                                                                  909* 1840 1891
no_version                1(06)        based           bit(1)                   level 2 packed unaligned dcl 192 set ref 829* 933*
no_very_large_array       1(04)        based           bit(1)                   level 2 in structure "arg_fd" packed unaligned
                                                                                  dcl 187 in procedure "fort_defaults_" ref 2251
                                                                                  2262 2273 2295
no_very_large_array       1(04)        based           bit(1)                   level 2 in structure "global_fd" packed unaligned
                                                                                  dcl 201 in procedure "fort_defaults_" set ref 2246
                                                                                  2249* 2257 2260* 2268 2271* 2290 2293*
no_very_large_array       1(04)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 834* 938*
                                                                                  943* 948* 958* 1280* 1369 1372* 1383 1386* 1392
                                                                                  1395* 1415 1418* 1848
no_vla_parm               1(05)        based           bit(1)                   level 2 in structure "arg_fd" packed unaligned
                                                                                  dcl 187 in procedure "fort_defaults_" ref 2284
no_vla_parm               1(05)        based           bit(1)                   level 2 in structure "global_fd" packed unaligned
                                                                                  dcl 201 in procedure "fort_defaults_" set ref 2279
                                                                                  2282*
no_vla_parm               1(05)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 842* 953*
                                                                                  1304* 1406 1409* 1856 1909 1920 1927 1934 1941
non_relocatable           1(07)        based           bit(1)                   level 2 packed unaligned dcl 192 set ref 847* 867*
                                                                                  1859
op_string                              parameter       varying char(256)        dcl 178 set ref 2306 2309* 2310* 2310 2312* 2312
                                                                                  2313* 2313 2315* 2315 2316* 2316 2318* 2318 2320*
                                                                                  2320 2322* 2322 2324* 2324 2326* 2326 2328* 2328
                                                                                  2330* 2330 2332* 2332 2334* 2334 2335* 2335 2337*
                                                                                  2337 2339* 2339 2341* 2341 2350* 2350 2352* 2352
                                                                                  2357* 2357 2359* 2359 2363* 2363 2365* 2365 2369*
                                                                                  2369 2371* 2371 2375* 2375 2377* 2377 2384* 2384
                                                                                  2386* 2386 2387* 2387 2390* 2390 2392* 2392 2394*
                                                                                  2394 2396* 2396 2398* 2398 2400* 2400 2402* 2402
                                                                                  2404* 2404 2406* 2406 2408* 2408 2409* 2409 2411*
                                                                                  2411 2415* 2415 2416* 2416 2416 2417* 2417 2419*
                                                                                  2419 2421* 2421 2423* 2423 2426 2426* 2426 2426
opt_case                        005102 automatic       label variable           initial array dcl 1436 set ref 1436* 1436* 1436*
                                                                                  1436* 1436* 1436* 1436* 1436* 1436* 1436* 1436*
                                                                                  1436* 1436* 1436* 1436* 1436* 1436* 1436* 1436*
                                                                                  1436* 1436* 1436* 1436* 1436* 1436* 1436* 1436*
                                                                                  1436* 1436* 1436* 1436* 1436* 1436* 1436* 1436*
                                                                                  1436* 1436* 1436* 1436* 1436* 1436* 1436* 1436*
                                                                                  1436* 1436* 1436* 1436* 1436* 1436* 1436* 1436*
                                                                                  1436* 1436* 1436* 1436* 1436* 1436* 1436* 1436*
                                                                                  1436* 1436* 1436* 1436* 1436* 1436* 1436* 1436*
                                                                                  1436* 1436* 1436* 1436* 1436* 1436* 1436* 1436*
                                                                                  1436* 1436* 1436* 1436* 1436* 1436* 1436* 1436*
                                                                                  1436* 1436* 1436* 1436* 1436* 1436* 1436* 1436*
                                                                                  1436* 1436* 1436* 1436* 1436* 1436* 1436* 1436*
                                                                                  1436* 1436* 1436* 1436* 1436* 1436* 1436* 1436*
                                                                                  1436* 1436* 1436* 1436* 1436* 1463
optimize                  1(08)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 712* 810*
                                                                                  853* 878* 1718 1862 1966
optimize                  1(08)        based           bit(1)                   level 2 in structure "arg_fd" packed unaligned
                                                                                  dcl 187 in procedure "fort_defaults_" ref 2035
                                                                                  2039 2049
optimize                  0(01)        based           bit(1)                   level 3 in structure "fort_op" packed unaligned
                                                                                  dcl 194 in procedure "fort_defaults_" ref 2382
optimize                  0(01)        based           bit(1)                   level 2 in structure "fo" packed unaligned dcl 193
                                                                                  in procedure "fort_defaults_" set ref 1774* 1828*
                                                                                  1862* 1876* 1891
optimizing                0(25)        based           structure                level 3 in structure "fort_op" packed unaligned
                                                                                  dcl 194 in procedure "fort_defaults_"
optimizing                0(25)        based           structure                level 2 in structure "fo" packed unaligned dcl 193
                                                                                  in procedure "fort_defaults_"
options                 113            based           structure                level 2 dcl 180
print_message                          parameter       entry variable           dcl 179 ref 987 1020 1060 1069 1078 1087 1096 1105
                                                                                  1114 1123 1132 1142 1151 1160 1169 1178 1187 1196
                                                                                  1205 1214 1223 1232 1237 1242 1247 1252 1257 1266
                                                                                  1275 1284 1289 1294 1299 1308 1317 1326 1335 1344
                                                                                  1353 1362 1371 1376 1385 1394 1399 1408 1417 1422
                                                                                  1432 1465 1523 1533 1543 1555 1565 1575 1587 1597
                                                                                  1608 1620 1630 1640 1650 1660 1671 1681 1691 1701
                                                                                  2005 2011 2016 2029 2039 2041 2043 2049 2051 2053
                                                                                  2061 2066 2072 2077 2083 2088 2094 2099 2105 2110
                                                                                  2116 2121 2127 2132 2138 2143 2149 2154 2160 2165
                                                                                  2171 2176 2182 2187 2193 2198 2204 2209 2215 2220
                                                                                  2226 2231 2237 2242 2248 2253 2259 2264 2270 2275
                                                                                  2281 2286 2292 2297
profile                   0(20)        based           bit(1)                   level 4 in structure "fort_op" packed unaligned
                                                                                  dcl 194 in procedure "fort_defaults_" ref 2328
                                                                                  2330
profile                   0(20)        based           bit(1)                   level 3 in structure "fo" packed unaligned dcl 193
                                                                                  in procedure "fort_defaults_" set ref 1798* 1865*
profile                   1(09)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 749* 860*
                                                                                  1865
relocatable               1(10)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 849* 865*
                                                                                  1868
relocatable               0(24)        based           bit(1)                   level 3 in structure "fort_op" packed unaligned
                                                                                  dcl 194 in procedure "fort_defaults_" ref 2404
relocatable               0(24)        based           bit(1)                   level 2 in structure "fo" packed unaligned dcl 193
                                                                                  in procedure "fort_defaults_" set ref 1859* 1868*
round                     1(11)        based           bit(1)                   level 2 in structure "global_fd" packed unaligned
                                                                                  dcl 201 in procedure "fort_defaults_" set ref 2097
                                                                                  2100*
round                     1(11)        based           bit(1)                   level 2 in structure "arg_fd" packed unaligned
                                                                                  dcl 187 in procedure "fort_defaults_" ref 2092
round                     1(11)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 870* 928*
                                                                                  1313* 1360 1363* 1657* 1699 1702* 1871
safe_optimize             1(12)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 711* 809*
                                                                                  856* 875* 1602 1718 1874 1974 2051
safe_optimize             1(12)        based           bit(1)                   level 2 in structure "arg_fd" packed unaligned
                                                                                  dcl 187 in procedure "fort_defaults_" ref 2035
                                                                                  2041
second_arg                             parameter       char                     unaligned dcl 1993 set ref 1990 1996*
severity                  0(12)        based           fixed bin(3,0)           level 3 in structure "fo" packed unaligned dcl 193
                                                                                  in procedure "fort_defaults_" set ref 1880*
severity                  1(13)        based           fixed bin(3,0)           level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 981* 1880
severity                  0(12)        based           fixed bin(3,0)           level 4 in structure "fort_op" packed unaligned
                                                                                  dcl 194 in procedure "fort_defaults_" ref 2413
                                                                                  2416
shared_var_ptr                         parameter       pointer                  dcl 181 ref 2431 2434 2436 2437 2438 2439 2440 2441
                                                                                  2442 2443 2444 2445 2446 2447 2448 2449 2450 2451
                                                                                  2452 2453 2454 2455 2456 2457 2458 2459 2460 2461
                                                                                  2462 2463 2464 2465 2466 2467 2468 2469 2470 2471
                                                                                  2473 2474 2475 2476 2477 2478 2479 2480 2481 2482
                                                                                  2483 2484 2485 2486 2487 2488 2489 2490 2491 2492
                                                                                  2493 2494 2495 2496 2497 2498 2499 2500 2501 2502
                                                                                  2503 2504 2505 2506 2507 2508 2510 2511 2512 2513
                                                                                  2514 2515 2516 2517 2518 2519 2520 2521 2522 2523
                                                                                  2524 2525 2526 2527 2528 2529 2530 2531 2532 2533
                                                                                  2534 2535 2536 2537 2538 2539 2540 2541 2542 2543
                                                                                  2544 2545 2547 2548 2549 2550 2551 2552 2553 2554
                                                                                  2555 2556 2557 2558 2559 2560 2561 2562 2563 2564
                                                                                  2565 2566 2567 2568 2569 2570 2571 2572 2573 2574
                                                                                  2575 2576 2577 2578 2579 2580 2581 2582 2584 2585
                                                                                  2586 2587 2588 2589 2590 2591 2592 2593 2594 2595
                                                                                  2596 2597 2598 2599 2600 2601 2602 2603 2604 2605
                                                                                  2606 2607 2608 2609 2610 2611 2612 2613 2614 2615
                                                                                  2616 2617 2618 2619 2622 2623 2624 2625 2626 2627
                                                                                  2628 2629 2630 2631 2632 2633 2634 2635 2636 2637
                                                                                  2638 2639 2640 2641 2642 2643 2644 2645 2646 2647
                                                                                  2648 2649 2650 2651 2652 2653 2654 2655 2656 2657
                                                                                  2659 2660 2661 2662 2663 2664 2665 2666 2667 2668
                                                                                  2669 2670 2671 2672 2673 2674 2675 2676 2677 2678
                                                                                  2679 2680 2681 2682 2683 2684 2685 2686 2687 2688
                                                                                  2689 2690 2691 2692 2693 2694 2696 2697 2698 2699
                                                                                  2700 2701 2702 2703 2704 2705 2706 2707 2708 2709
                                                                                  2710 2711 2712 2713 2714 2715 2716 2717 2718 2719
                                                                                  2720 2721 2722 2723 2724 2725 2726 2727 2728 2729
                                                                                  2730 2731 2733 2734 2735 2736 2737 2738 2739 2740
                                                                                  2741 2742 2743 2744 2745 2746 2747 2748 2749 2750
                                                                                  2751 2752 2753 2754 2755 2756 2757 2758 2759 2760
                                                                                  2761 2762 2763 2764 2765 2766 2767 2768 2770 2771
                                                                                  2772 2773 2774 2775 2776 2777 2778 2779 2780 2781
                                                                                  2782 2783 2784 2785 2786 2787 2788 2789 2790 2791
                                                                                  2792 2793 2794 2795 2796 2797 2798 2799 2800 2801
                                                                                  2802 2803 2804 2805 2809 2809 2810 2810
shared_vars                            based           structure                level 1 dcl 180
source_format             0(03)        based           structure                level 2 in structure "fo" packed unaligned dcl 193
                                                                                  in procedure "fort_defaults_"
source_format             0(03)        based           structure                level 3 in structure "fort_op" packed unaligned
                                                                                  dcl 194 in procedure "fort_defaults_"
static                    1(17)        based           bit(1)                   level 2 in structure "global_fd" packed unaligned
                                                                                  dcl 201 in procedure "fort_defaults_" set ref 2169
                                                                                  2172*
static                    1(17)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 626* 888*
                                                                                  1076 1079* 1322* 1541 1544* 1668* 1882
static                    1(17)        based           bit(1)                   level 2 in structure "arg_fd" packed unaligned
                                                                                  dcl 187 in procedure "fort_defaults_" ref 2174
static_option                          parameter       bit(1)                   dcl 182 set ref 1432 1540* 1665*
static_storage            1(03)        based           bit(1)                   level 2 in structure "fo" packed unaligned dcl 193
                                                                                  in procedure "fort_defaults_" set ref 1724* 1882*
static_storage            1(03)        based           bit(1)                   level 3 in structure "fort_op" packed unaligned
                                                                                  dcl 194 in procedure "fort_defaults_" ref 2402
stop_after_cg             0(22)        based           bit(1)                   level 4 in structure "fort_op" packed unaligned
                                                                                  dcl 194 in procedure "fort_defaults_" ref 2421
stop_after_cg             0(22)        based           bit(1)                   level 3 in structure "fo" packed unaligned dcl 193
                                                                                  in procedure "fort_defaults_" set ref 1751* 1754*
stop_after_parse          0(23)        based           bit(1)                   level 4 in structure "fort_op" packed unaligned
                                                                                  dcl 194 in procedure "fort_defaults_" ref 2419
stop_after_parse          0(23)        based           bit(1)                   level 3 in structure "fo" packed unaligned dcl 193
                                                                                  in procedure "fort_defaults_" set ref 1754*
stringrange               1(18)        based           bit(1)                   level 2 in structure "global_fd" packed unaligned
                                                                                  dcl 201 in procedure "fort_defaults_" set ref 2037
                                                                                  2045* 2064 2067*
stringrange               0(17)        based           bit(1)                   level 4 in structure "fort_op" packed unaligned
                                                                                  dcl 194 in procedure "fort_defaults_" ref 2324
stringrange               1(18)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 815* 893*
                                                                                  1264 1267* 1331* 1638 1641* 1678* 1885 1970 1978
                                                                                  1986
stringrange               0(17)        based           bit(1)                   level 3 in structure "fo" packed unaligned dcl 193
                                                                                  in procedure "fort_defaults_" set ref 1635* 1676*
                                                                                  1718* 1834* 1885*
stringrange               1(18)        based           bit(1)                   level 2 in structure "arg_fd" packed unaligned
                                                                                  dcl 187 in procedure "fort_defaults_" ref 2059
subscriptrange            0(16)        based           bit(1)                   level 3 in structure "fo" packed unaligned dcl 193
                                                                                  in procedure "fort_defaults_" set ref 1645* 1686*
                                                                                  1718* 1837* 1888*
subscriptrange            1(19)        based           bit(1)                   level 2 in structure "arg_fd" packed unaligned
                                                                                  dcl 187 in procedure "fort_defaults_" ref 2070
subscriptrange            1(19)        based           bit(1)                   level 2 in structure "global_fd" packed unaligned
                                                                                  dcl 201 in procedure "fort_defaults_" set ref 2047
                                                                                  2055* 2075 2078*
subscriptrange            0(16)        based           bit(1)                   level 4 in structure "fort_op" packed unaligned
                                                                                  dcl 194 in procedure "fort_defaults_" ref 2322
subscriptrange            1(19)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 820* 898*
                                                                                  1273 1276* 1340* 1648 1651* 1688* 1888 1968 1976
                                                                                  1984
substr                                                 builtin function         dcl 207 set ref 562 567 585 585 588 604 604 967 969
                                                                                  976 1804* 2426
system_debugging          0(22)        based           structure                level 2 in structure "fo" packed unaligned dcl 193
                                                                                  in procedure "fort_defaults_"
system_debugging          0(22)        based           structure                level 3 in structure "fort_op" packed unaligned
                                                                                  dcl 194 in procedure "fort_defaults_"
system_options            2            based           structure                level 2 dcl 194
table                     0(19)        based           bit(1)                   level 4 in structure "fort_op" packed unaligned
                                                                                  dcl 194 in procedure "fort_defaults_" ref 2320
table                     1(20)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 646* 825*
                                                                                  907* 1891
table                     0(19)        based           bit(1)                   level 3 in structure "fo" packed unaligned dcl 193
                                                                                  in procedure "fort_defaults_" set ref 1840* 1891*
time                      0(02)        based           bit(1)                   level 2 in structure "fo" packed unaligned dcl 193
                                                                                  in procedure "fort_defaults_" set ref 1894*
time                      1(21)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 913* 1894
time                      0(02)        based           bit(1)                   level 3 in structure "fort_op" packed unaligned
                                                                                  dcl 194 in procedure "fort_defaults_" ref 2390
time_optimizer            0(25)        based           bit(1)                   level 4 in structure "fort_op" packed unaligned
                                                                                  dcl 194 in procedure "fort_defaults_" ref 2392
time_optimizer            0(25)        based           bit(1)                   level 3 in structure "fo" packed unaligned dcl 193
                                                                                  in procedure "fort_defaults_" set ref 1897*
time_ot                   1(22)        based           bit(1)                   level 2 packed unaligned dcl 192 set ref 917* 1897
top_down                  1(23)        based           bit(1)                   level 2 in structure "global_fd" packed unaligned
                                                                                  dcl 201 in procedure "fort_defaults_" set ref 2147
                                                                                  2150*
top_down                  1(23)        based           bit(1)                   level 2 in structure "arg_fd" packed unaligned
                                                                                  dcl 187 in procedure "fort_defaults_" ref 2152
top_down                  1(23)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 667* 921*
                                                                                  1121 1124* 1349* 1900
truncate                  1(24)        based           bit(1)                   level 2 in structure "global_fd" packed unaligned
                                                                                  dcl 201 in procedure "fort_defaults_" set ref 2092
                                                                                  2095*
truncate                  1(24)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 872* 926*
                                                                                  1315 1318* 1358* 1658 1661* 1698* 1903
truncate                  1(24)        based           bit(1)                   level 2 in structure "arg_fd" packed unaligned
                                                                                  dcl 187 in procedure "fort_defaults_" ref 2097
user_options            113            based           structure                level 3 in structure "shared_vars" dcl 180
                                                                                  in procedure "fort_defaults_"
user_options                           based           structure                level 2 in structure "fort_op" dcl 194 in procedure
                                                                                  "fort_defaults_"
version                   1(25)        based           bit(1)                   level 2 packed unaligned dcl 192 set ref 831* 931*
very_large_array          1(26)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 836* 936*
                                                                                  1245 1248* 1282 1285* 1367* 1906 1954
very_large_array          1(26)        based           bit(1)                   level 2 in structure "global_fd" packed unaligned
                                                                                  dcl 201 in procedure "fort_defaults_" set ref 2213
                                                                                  2216* 2251 2254*
very_large_array          1(26)        based           bit(1)                   level 2 in structure "arg_fd" packed unaligned
                                                                                  dcl 187 in procedure "fort_defaults_" ref 2218
                                                                                  2246
very_large_common         1(27)        based           bit(1)                   level 2 in structure "arg_fd" packed unaligned
                                                                                  dcl 187 in procedure "fort_defaults_" ref 2257
very_large_common         1(27)        based           bit(1)                   level 2 in structure "global_fd" packed unaligned
                                                                                  dcl 201 in procedure "fort_defaults_" set ref 2262
                                                                                  2265*
very_large_common         1(27)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 837* 941*
                                                                                  1287 1290* 1381* 1917
vla_auto                  1(28)        based           bit(1)                   level 2 in structure "global_fd" packed unaligned
                                                                                  dcl 201 in procedure "fort_defaults_" set ref 2224
                                                                                  2227* 2273 2276*
vla_auto                  1(28)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 838* 946*
                                                                                  1250 1253* 1292 1295* 1390* 1924 1957
vla_auto                  1(28)        based           bit(1)                   level 2 in structure "arg_fd" packed unaligned
                                                                                  dcl 187 in procedure "fort_defaults_" ref 2229
                                                                                  2268
vla_parm                  1(29)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 844* 951*
                                                                                  1306 1309* 1404* 1932
vla_parm                  1(29)        based           bit(1)                   level 2 in structure "global_fd" packed unaligned
                                                                                  dcl 201 in procedure "fort_defaults_" set ref 2284
                                                                                  2287*
vla_parm                  1(29)        based           bit(1)                   level 2 in structure "arg_fd" packed unaligned
                                                                                  dcl 187 in procedure "fort_defaults_" ref 2279
vla_static                1(30)        based           bit(1)                   level 2 in structure "fd" packed unaligned dcl 192
                                                                                  in procedure "fort_defaults_" set ref 839* 956*
                                                                                  1255 1258* 1297 1300* 1413* 1938 1960
vla_static                1(30)        based           bit(1)                   level 2 in structure "arg_fd" packed unaligned
                                                                                  dcl 187 in procedure "fort_defaults_" ref 2240
                                                                                  2290
vla_static                1(30)        based           bit(1)                   level 2 in structure "global_fd" packed unaligned
                                                                                  dcl 201 in procedure "fort_defaults_" set ref 2235
                                                                                  2238* 2295 2298*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
dfast_mask                             internal static bit(72)                  initial unaligned dcl 1-162
fast_mask                              internal static bit(72)                  initial unaligned dcl 1-168
first_block_constant                   defined         fixed bin(18,0)          dcl 2-153
first_char_constant                    defined         fixed bin(18,0)          dcl 2-149
first_dw_constant                      defined         fixed bin(18,0)          dcl 2-145
first_word_constant                    defined         fixed bin(18,0)          dcl 2-141
fixed_24                               automatic       fixed bin(24,0)          dcl 173
global_fo                              based           structure                level 1 packed unaligned dcl 202
last_block_constant                    defined         fixed bin(18,0)          dcl 2-154
last_char_constant                     defined         fixed bin(18,0)          dcl 2-150
last_dw_constant                       defined         fixed bin(18,0)          dcl 2-146
last_word_constant                     defined         fixed bin(18,0)          dcl 2-142
num_of_block_constants                 defined         fixed bin(17,0)          dcl 2-152
num_of_char_constants                  defined         fixed bin(17,0)          dcl 2-148
num_of_dw_constants                    defined         fixed bin(17,0)          dcl 2-144
num_of_word_constants                  defined         fixed bin(17,0)          dcl 2-140

NAMES DECLARED BY EXPLICIT CONTEXT.
arg_ansi66                      004515 constant        label                    dcl 614 ref 538
arg_ansi77                      004527 constant        label                    dcl 619 ref 538
arg_auto                        004541 constant        label                    dcl 624 ref 538
arg_auto_zero                   004553 constant        label                    dcl 629 ref 538
arg_binary_floating_point       004565 constant        label                    dcl 634 ref 538 538
arg_brief                       004577 constant        label                    dcl 639 ref 538 538
arg_brief_table                 004611 constant        label                    dcl 644 ref 538 538
arg_card                        004626 constant        label                    dcl 650 ref 538
arg_check                       004640 constant        label                    dcl 655 ref 538 538
arg_check_multiply              004652 constant        label                    dcl 660 ref 538 538
arg_consolidate                 004664 constant        label                    dcl 665 ref 538 538
arg_debug                       004676 constant        label                    dcl 670 ref 538 538
arg_debug_cg                    004705 constant        label                    dcl 674 ref 538
arg_debug_io                    004714 constant        label                    dcl 678 ref 538 538
arg_default_full                004726 constant        label                    dcl 683 ref 538 538
arg_default_safe                004740 constant        label                    dcl 688 ref 538 538
arg_fold                        004752 constant        label                    dcl 694 ref 538
arg_free                        004764 constant        label                    dcl 699 ref 538
arg_full_optimize               005010 constant        label                    dcl 709 ref 538 538
arg_hexadecimal_floating_point  004776 constant        label                    dcl 704 ref 538 538
arg_la_auto                     005030 constant        label                    dcl 716 ref 538
arg_la_static                   005042 constant        label                    dcl 721 ref 538
arg_large_array                 005054 constant        label                    dcl 726 ref 538 538
arg_line_numbers                005066 constant        label                    dcl 731 ref 538 538
arg_list                        005100 constant        label                    dcl 736 ref 538 538
arg_long                        005115 constant        label                    dcl 742 ref 538 538
arg_long_profile                005127 constant        label                    dcl 747 set ref 538 538
arg_map                         005141 constant        label                    dcl 752 ref 538
arg_nlno                        005156 constant        label                    dcl 758 ref 538
arg_no_auto_zero                005214 constant        label                    dcl 763 ref 538
arg_no_check                    005226 constant        label                    dcl 768 ref 538 538
arg_no_check_multiply           005240 constant        label                    dcl 773 ref 538 538
arg_no_debug_io                 005252 constant        label                    dcl 778 ref 538 538
arg_no_fold                     005264 constant        label                    dcl 783 ref 538
arg_no_large_array              005276 constant        label                    dcl 788 ref 538 538
arg_no_line_numbers             005316 constant        label                    dcl 795 ref 538 538
arg_no_map                      005330 constant        label                    dcl 800 ref 538
arg_no_optimize                 005345 constant        label                    dcl 806 ref 538 538
arg_no_stringrange              005365 constant        label                    dcl 813 ref 538 538 538
arg_no_subscriptrange           005377 constant        label                    dcl 818 ref 538 538 538
arg_no_table                    005411 constant        label                    dcl 823 ref 538 538
arg_no_version                  005426 constant        label                    dcl 829 ref 538
arg_no_very_large_array         005440 constant        label                    dcl 834 ref 538 538
arg_no_vla_parm                 005463 constant        label                    dcl 842 ref 538
arg_non_relocatable             005475 constant        label                    dcl 847 ref 538 538
arg_not_found                   004167 constant        label                    dcl 567 ref 538
arg_optimize                    005507 constant        label                    dcl 853 ref 538 538
arg_profile                     005527 constant        label                    dcl 860 ref 538 538
arg_relocatable                 005541 constant        label                    dcl 865 ref 538 538
arg_round                       005553 constant        label                    dcl 870 set ref 538
arg_safe                        004740 constant        label                    dcl 688 ref 538
arg_safe_optimize               005565 constant        label                    dcl 875 ref 538 538
arg_source                      005605 constant        label                    dcl 882 ref 538 538
arg_static                      005654 constant        label                    dcl 888 ref 538
arg_stringrange                 005666 constant        label                    dcl 893 set ref 538 538
arg_subscriptrange              005700 constant        label                    dcl 898 set ref 538 538
arg_super                       005712 constant        label                    dcl 903 ref 538
arg_symbols                     005605 constant        label                    dcl 882 ref 538 538
arg_table                       005746 constant        label                    dcl 907 ref 538 538
arg_time                        005763 constant        label                    dcl 913 ref 538 538
arg_time_ot                     005772 constant        label                    dcl 917 ref 538
arg_top_down                    006001 constant        label                    dcl 921 ref 538
arg_truncate                    006013 constant        label                    dcl 926 ref 538 538
arg_version                     006025 constant        label                    dcl 931 ref 538
arg_very_large_array            006037 constant        label                    dcl 936 ref 538 538
arg_very_large_common           006051 constant        label                    dcl 941 ref 538 538
arg_vla_auto                    006063 constant        label                    dcl 946 ref 538
arg_vla_parm                    006075 constant        label                    dcl 951 ref 538
arg_vla_static                  006107 constant        label                    dcl 956 ref 538
argument                        002637 constant        entry                    external dcl 534
check_args                      020617 constant        entry                    external dcl 1950
check_global_args               021237 constant        entry                    external dcl 2005
fort_defaults_                  002623 constant        entry                    external dcl 27
glb_ansi66                      007667 constant        label                    dcl 1056 ref 991
glb_ansi77                      007746 constant        label                    dcl 1065 ref 991
glb_auto                        010025 constant        label                    dcl 1074 ref 991
glb_auto_zero                   010104 constant        label                    dcl 1083 ref 991
glb_binary_floating_point       010165 constant        label                    dcl 1092 ref 991 991
glb_brief                       007642 constant        label                    dcl 1020 ref 991 991
glb_brief_table                 007642 constant        label                    dcl 1020 ref 991 991
glb_card                        010245 constant        label                    dcl 1101 ref 991
glb_check                       007642 constant        label                    dcl 1020 ref 991 991
glb_check_multiply              010324 constant        label                    dcl 1110 ref 991 991
glb_consolidate                 010407 constant        label                    dcl 1119 ref 991 991
glb_debug                       007642 constant        label                    dcl 1020 ref 991 991
glb_debug_cg                    007642 constant        label                    dcl 1020 ref 991
glb_debug_io                    007642 constant        label                    dcl 1020 ref 991 991
glb_default_full                010466 constant        label                    dcl 1128 ref 991 991
glb_default_safe                010547 constant        label                    dcl 1137 ref 991 991
glb_fold                        010631 constant        label                    dcl 1147 ref 991
glb_free                        010707 constant        label                    dcl 1156 ref 991
glb_full_optimize               007642 constant        label                    dcl 1020 ref 991 991
glb_hexadecimal_floating_point  010766 constant        label                    dcl 1165 ref 991 991
glb_la_auto                     011046 constant        label                    dcl 1174 ref 991
glb_la_static                   011127 constant        label                    dcl 1183 ref 991
glb_large_array                 011210 constant        label                    dcl 1192 ref 991 991
glb_line_numbers                007642 constant        label                    dcl 1020 ref 991 991
glb_list                        007642 constant        label                    dcl 1020 ref 991 991
glb_long                        007642 constant        label                    dcl 1020 ref 991 991
glb_long_profile                007642 constant        label                    dcl 1020 ref 991 991
glb_map                         007642 constant        label                    dcl 1020 ref 991
glb_nlno                        007642 constant        label                    dcl 1020 ref 991
glb_no_auto_zero                011271 constant        label                    dcl 1201 ref 991
glb_no_check                    007642 constant        label                    dcl 1020 ref 991 991
glb_no_check_multiply           011352 constant        label                    dcl 1210 ref 991 991
glb_no_debug_io                 007642 constant        label                    dcl 1020 ref 991 991
glb_no_fold                     011433 constant        label                    dcl 1219 ref 991
glb_no_large_array              011512 constant        label                    dcl 1228 ref 991 991
glb_no_line_numbers             007642 constant        label                    dcl 1020 ref 991 991
glb_no_map                      007642 constant        label                    dcl 1020 ref 991
glb_no_optimize                 007642 constant        label                    dcl 1020 ref 991 991
glb_no_stringrange              012124 constant        label                    dcl 1262 ref 991 991 991
glb_no_subscriptrange           012205 constant        label                    dcl 1271 ref 991 991 991
glb_no_table                    007642 constant        label                    dcl 1020 ref 991 991
glb_no_version                  007642 constant        label                    dcl 1020 ref 991
glb_no_very_large_array         012266 constant        label                    dcl 1280 ref 991 991
glb_no_vla_parm                 012551 constant        label                    dcl 1304 ref 991
glb_non_relocatable             007642 constant        label                    dcl 1020 ref 991 991
glb_not_found                   007642 constant        label                    dcl 1020 ref 991
glb_optimize                    007642 constant        label                    dcl 1020 ref 991 991
glb_profile                     007642 constant        label                    dcl 1020 ref 991 991
glb_relocatable                 007642 constant        label                    dcl 1020 ref 991 991
glb_round                       012630 constant        label                    dcl 1313 ref 991
glb_safe                        010547 constant        label                    dcl 1137 ref 991
glb_safe_optimize               007642 constant        label                    dcl 1020 ref 991 991
glb_source                      007642 constant        label                    dcl 1020 ref 991 991
glb_static                      012710 constant        label                    dcl 1322 ref 991
glb_stringrange                 012767 constant        label                    dcl 1331 ref 991 991
glb_subscriptrange              013050 constant        label                    dcl 1340 ref 991 991
glb_super                       007642 constant        label                    dcl 1020 ref 991
glb_symbols                     007642 constant        label                    dcl 1020 ref 991 991
glb_table                       007642 constant        label                    dcl 1020 ref 991 991
glb_time                        007642 constant        label                    dcl 1020 ref 991 991
glb_time_ot                     007642 constant        label                    dcl 1020 ref 991
glb_top_down                    013133 constant        label                    dcl 1349 ref 991
glb_truncate                    013215 constant        label                    dcl 1358 ref 991 991
glb_version                     007642 constant        label                    dcl 1020 ref 991
glb_very_large_array            013274 constant        label                    dcl 1367 ref 991 991
glb_very_large_common           013430 constant        label                    dcl 1381 ref 991 991
glb_vla_auto                    013510 constant        label                    dcl 1390 ref 991
glb_vla_parm                    013644 constant        label                    dcl 1404 ref 991
glb_vla_static                  013725 constant        label                    dcl 1413 ref 991
global                          006314 constant        entry                    external dcl 987
incompatible_args               021145 constant        entry                    internal dcl 1990 ref 1954 1957 1960 1963 1968 1970
                                                                                  1976 1978 1984 1986
init_shared_vars                027161 constant        entry                    external dcl 2431
opt_ansi66                      015446 constant        label                    dcl 1518 ref 1436
opt_ansi77                      015532 constant        label                    dcl 1528 ref 1436
opt_auto                        015616 constant        label                    dcl 1538 ref 1436
opt_auto_zero                   015421 constant        label                    dcl 1465 ref 1436
opt_binary_floating_point       015421 constant        label                    dcl 1465 ref 1436 1436
opt_brief                       015421 constant        label                    dcl 1465 ref 1436 1436
opt_brief_table                 015421 constant        label                    dcl 1465 ref 1436 1436
opt_card                        015675 constant        label                    dcl 1548 ref 1436
opt_check                       015421 constant        label                    dcl 1465 ref 1436 1436
opt_check_multiply              015770 constant        label                    dcl 1560 ref 1436 1436
opt_consolidate                 015421 constant        label                    dcl 1465 ref 1436 1436
opt_debug                       015421 constant        label                    dcl 1465 ref 1436 1436
opt_debug_cg                    015421 constant        label                    dcl 1465 ref 1436
opt_debug_io                    015421 constant        label                    dcl 1465 ref 1436 1436
opt_default_full                016324 constant        label                    dcl 1602 ref 1436 1436
opt_default_safe                016416 constant        label                    dcl 1613 ref 1436 1436
opt_fold                        016060 constant        label                    dcl 1570 ref 1436
opt_free                        016143 constant        label                    dcl 1580 ref 1436
opt_full_optimize               015421 constant        label                    dcl 1465 ref 1436 1436
opt_hexadecimal_floating_point  015421 constant        label                    dcl 1465 ref 1436 1436
opt_la_auto                     015421 constant        label                    dcl 1465 ref 1436
opt_la_static                   015421 constant        label                    dcl 1465 ref 1436
opt_large_array                 015421 constant        label                    dcl 1465 ref 1436 1436
opt_line_numbers                015421 constant        label                    dcl 1465 ref 1436 1436
opt_list                        015421 constant        label                    dcl 1465 ref 1436 1436
opt_long                        015421 constant        label                    dcl 1465 ref 1436 1436
opt_long_profile                015421 constant        label                    dcl 1465 ref 1436 1436
opt_map                         015421 constant        label                    dcl 1465 ref 1436
opt_nlno                        015421 constant        label                    dcl 1465 ref 1436
opt_no_auto_zero                015421 constant        label                    dcl 1465 ref 1436
opt_no_check                    015421 constant        label                    dcl 1465 ref 1436 1436
opt_no_check_multiply           016236 constant        label                    dcl 1592 ref 1436 1436
opt_no_debug_io                 015421 constant        label                    dcl 1465 ref 1436 1436
opt_no_fold                     016511 constant        label                    dcl 1625 ref 1436
opt_no_large_array              015421 constant        label                    dcl 1465 ref 1436 1436
opt_no_line_numbers             015421 constant        label                    dcl 1465 ref 1436 1436
opt_no_map                      015421 constant        label                    dcl 1465 ref 1436
opt_no_optimize                 015421 constant        label                    dcl 1465 ref 1436 1436
opt_no_stringrange              016575 constant        label                    dcl 1635 ref 1436 1436 1436
opt_no_subscriptrange           016663 constant        label                    dcl 1645 ref 1436 1436 1436
opt_no_table                    015421 constant        label                    dcl 1465 ref 1436 1436
opt_no_version                  015421 constant        label                    dcl 1465 ref 1436
opt_no_very_large_array         015421 constant        label                    dcl 1465 ref 1436 1436
opt_no_vla_parm                 015421 constant        label                    dcl 1465 ref 1436
opt_non_relocatable             015421 constant        label                    dcl 1465 ref 1436 1436
opt_not_found                   015421 constant        label                    dcl 1465 ref 1436
opt_optimize                    015421 constant        label                    dcl 1465 ref 1436 1436
opt_profile                     015421 constant        label                    dcl 1465 ref 1436 1436
opt_relocatable                 015421 constant        label                    dcl 1465 ref 1436 1436
opt_round                       016751 constant        label                    dcl 1655 ref 1436
opt_safe                        016416 constant        label                    dcl 1613 ref 1436
opt_safe_optimize               015421 constant        label                    dcl 1465 ref 1436 1436
opt_source                      015421 constant        label                    dcl 1465 ref 1436 1436
opt_static                      017036 constant        label                    dcl 1665 ref 1436
opt_stringrange                 017120 constant        label                    dcl 1676 ref 1436 1436
opt_subscriptrange              017206 constant        label                    dcl 1686 ref 1436 1436
opt_super                       015421 constant        label                    dcl 1465 ref 1436
opt_symbols                     015421 constant        label                    dcl 1465 ref 1436 1436
opt_table                       015421 constant        label                    dcl 1465 ref 1436 1436
opt_time                        015421 constant        label                    dcl 1465 ref 1436 1436
opt_time_ot                     015421 constant        label                    dcl 1465 ref 1436
opt_top_down                    015421 constant        label                    dcl 1465 ref 1436
opt_truncate                    017276 constant        label                    dcl 1696 ref 1436 1436
opt_version                     015421 constant        label                    dcl 1465 ref 1436
opt_very_large_array            015421 constant        label                    dcl 1465 ref 1436 1436
opt_very_large_common           015421 constant        label                    dcl 1465 ref 1436 1436
opt_vla_auto                    015421 constant        label                    dcl 1465 ref 1436
opt_vla_parm                    015421 constant        label                    dcl 1465 ref 1436
opt_vla_static                  015421 constant        label                    dcl 1465 ref 1436
option                          014071 constant        entry                    external dcl 1432
options_string                  025645 constant        entry                    external dcl 2306
parse_severity                  006123 constant        entry                    internal dcl 961 ref 583 585 602 604
set                             017367 constant        entry                    external dcl 1710

NAMES DECLARED BY CONTEXT OR IMPLICATION.
index                                                  builtin function         ref 562 967 1015 1460
length                                                 builtin function         ref 2426 2426
string                                                 builtin function         set ref 562 1015 1460 1801 1804 1825*

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0     33020       33506   31225       33030
Length     34306   31225       466         563    1572           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
fort_defaults_                     3290 external procedure  is an external procedure.  
begin block on line 536                 begin block         shares stack frame of external procedure fort_defaults_.  
parse_severity                      104 internal procedure  is called during a stack extension.  
begin block on line 989                 begin block         shares stack frame of external procedure fort_defaults_.  
begin block on line 1434                begin block         shares stack frame of external procedure fort_defaults_.  
begin block on line 1952                begin block         shares stack frame of external procedure fort_defaults_.  
incompatible_args                       internal procedure  shares stack frame of external procedure fort_defaults_.  
begin block on line 2007            106 begin block         enables or reverts conditions.  
on unit on line 2027                 74 on unit               

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
fort_defaults_           000100 cmd2_string_ptr             fort_defaults_
                         000102 cmd2_string_len             fort_defaults_
                         000103 code                        fort_defaults_
                         000104 cmd                         fort_defaults_
                         000106 dummy_var                   fort_defaults_
                         000110 i                           fort_defaults_
                         000112 fort_shared_variables       fort_defaults_
                         003276 arg_case                    begin block on line 536
                         004200 glb_case                    begin block on line 989
                         005102 opt_case                    begin block on line 1434
parse_severity           000100 level_no                    parse_severity

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
alloc_char_temp     cat_realloc_chars   enter_begin_block   call_ent_var_desc   call_ext_out_desc   call_ext_out
call_int_this_desc  begin_return_mac    return_mac          tra_ext_2           enable_op           shorten_stack
ext_entry           int_entry           int_entry_desc      trunc_fx2           set_chars_eis       index_chars_eis
divide_fx1

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      cu_$arg_ptr_rel               fort_bfp_math$bad_data_types  fort_bfp_math$binop_ch_ch
fort_bfp_math$binop_cp_cp_round                             fort_bfp_math$binop_cp_cp_trunc
fort_bfp_math$binop_cp_dp_round                             fort_bfp_math$binop_cp_dp_trunc
fort_bfp_math$binop_cp_i_round                              fort_bfp_math$binop_cp_i_trunc
fort_bfp_math$binop_cp_r_round                              fort_bfp_math$binop_cp_r_trunc
fort_bfp_math$binop_dp_cp_round                             fort_bfp_math$binop_dp_cp_trunc
fort_bfp_math$binop_dp_dp_round                             fort_bfp_math$binop_dp_dp_trunc
fort_bfp_math$binop_dp_i_round                              fort_bfp_math$binop_dp_i_trunc
fort_bfp_math$binop_dp_r_round                              fort_bfp_math$binop_dp_r_trunc
fort_bfp_math$binop_i_cp_round                              fort_bfp_math$binop_i_cp_trunc
fort_bfp_math$binop_i_dp_round                              fort_bfp_math$binop_i_dp_trunc
fort_bfp_math$binop_i_i_round fort_bfp_math$binop_i_i_trunc fort_bfp_math$binop_i_r_round fort_bfp_math$binop_i_r_trunc
fort_bfp_math$binop_lg_lg     fort_bfp_math$binop_r_cp_round
fort_bfp_math$binop_r_cp_trunc                              fort_bfp_math$binop_r_dp_round
fort_bfp_math$binop_r_dp_trunc                              fort_bfp_math$binop_r_i_round fort_bfp_math$binop_r_i_trunc
fort_bfp_math$binop_r_r_round fort_bfp_math$binop_r_r_trunc fort_bfp_math$comp_ch_ch      fort_bfp_math$comp_cp_cp
fort_bfp_math$comp_dp_dp      fort_bfp_math$comp_dp_i       fort_bfp_math$comp_dp_r       fort_bfp_math$comp_i_dp
fort_bfp_math$comp_i_i        fort_bfp_math$comp_i_r        fort_bfp_math$comp_lg_lg      fort_bfp_math$comp_r_dp
fort_bfp_math$comp_r_i        fort_bfp_math$comp_r_r        fort_bfp_math$conv_ch_to_ch
fort_bfp_math$conv_cp_to_dp_round                           fort_bfp_math$conv_cp_to_dp_trunc
fort_bfp_math$conv_cp_to_i_round                            fort_bfp_math$conv_cp_to_i_trunc
fort_bfp_math$conv_cp_to_r_round                            fort_bfp_math$conv_cp_to_r_trunc
fort_bfp_math$conv_dp_to_cp_round                           fort_bfp_math$conv_dp_to_cp_trunc
fort_bfp_math$conv_dp_to_i_round                            fort_bfp_math$conv_dp_to_i_trunc
fort_bfp_math$conv_dp_to_r_round                            fort_bfp_math$conv_dp_to_r_trunc
fort_bfp_math$conv_i_to_cp_round                            fort_bfp_math$conv_i_to_cp_trunc
fort_bfp_math$conv_i_to_dp_round                            fort_bfp_math$conv_i_to_dp_trunc
fort_bfp_math$conv_i_to_r_round                             fort_bfp_math$conv_i_to_r_trunc
fort_bfp_math$conv_r_to_cp_round                            fort_bfp_math$conv_r_to_cp_trunc
fort_bfp_math$conv_r_to_dp_round                            fort_bfp_math$conv_r_to_dp_trunc
fort_bfp_math$conv_r_to_i_round                             fort_bfp_math$conv_r_to_i_trunc
fort_bfp_math$unary_bad_data  fort_bfp_math$unary_no_op     fort_hfp_math$bad_data_types  fort_hfp_math$binop_ch_ch
fort_hfp_math$binop_cp_cp_round                             fort_hfp_math$binop_cp_cp_trunc
fort_hfp_math$binop_cp_dp_round                             fort_hfp_math$binop_cp_dp_trunc
fort_hfp_math$binop_cp_i_round                              fort_hfp_math$binop_cp_i_trunc
fort_hfp_math$binop_cp_r_round                              fort_hfp_math$binop_cp_r_trunc
fort_hfp_math$binop_dp_cp_round                             fort_hfp_math$binop_dp_cp_trunc
fort_hfp_math$binop_dp_dp_round                             fort_hfp_math$binop_dp_dp_trunc
fort_hfp_math$binop_dp_i_round                              fort_hfp_math$binop_dp_i_trunc
fort_hfp_math$binop_dp_r_round                              fort_hfp_math$binop_dp_r_trunc
fort_hfp_math$binop_i_cp_round                              fort_hfp_math$binop_i_cp_trunc
fort_hfp_math$binop_i_dp_round                              fort_hfp_math$binop_i_dp_trunc
fort_hfp_math$binop_i_i_round fort_hfp_math$binop_i_i_trunc fort_hfp_math$binop_i_r_round fort_hfp_math$binop_i_r_trunc
fort_hfp_math$binop_lg_lg     fort_hfp_math$binop_r_cp_round
fort_hfp_math$binop_r_cp_trunc                              fort_hfp_math$binop_r_dp_round
fort_hfp_math$binop_r_dp_trunc                              fort_hfp_math$binop_r_i_round fort_hfp_math$binop_r_i_trunc
fort_hfp_math$binop_r_r_round fort_hfp_math$binop_r_r_trunc fort_hfp_math$comp_ch_ch      fort_hfp_math$comp_cp_cp
fort_hfp_math$comp_dp_dp      fort_hfp_math$comp_dp_i       fort_hfp_math$comp_dp_r       fort_hfp_math$comp_i_dp
fort_hfp_math$comp_i_i        fort_hfp_math$comp_i_r        fort_hfp_math$comp_lg_lg      fort_hfp_math$comp_r_dp
fort_hfp_math$comp_r_i        fort_hfp_math$comp_r_r        fort_hfp_math$conv_ch_to_ch
fort_hfp_math$conv_cp_to_dp_round                           fort_hfp_math$conv_cp_to_dp_trunc
fort_hfp_math$conv_cp_to_i_round                            fort_hfp_math$conv_cp_to_i_trunc
fort_hfp_math$conv_cp_to_r_round                            fort_hfp_math$conv_cp_to_r_trunc
fort_hfp_math$conv_dp_to_cp_round                           fort_hfp_math$conv_dp_to_cp_trunc
fort_hfp_math$conv_dp_to_i_round                            fort_hfp_math$conv_dp_to_i_trunc
fort_hfp_math$conv_dp_to_r_round                            fort_hfp_math$conv_dp_to_r_trunc
fort_hfp_math$conv_i_to_cp_round                            fort_hfp_math$conv_i_to_cp_trunc
fort_hfp_math$conv_i_to_dp_round                            fort_hfp_math$conv_i_to_dp_trunc
fort_hfp_math$conv_i_to_r_round                             fort_hfp_math$conv_i_to_r_trunc
fort_hfp_math$conv_r_to_cp_round                            fort_hfp_math$conv_r_to_cp_trunc
fort_hfp_math$conv_r_to_dp_round                            fort_hfp_math$conv_r_to_dp_trunc
fort_hfp_math$conv_r_to_i_round                             fort_hfp_math$conv_r_to_i_trunc
fort_hfp_math$unary_bad_data  fort_hfp_math$unary_no_op

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$badopt




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     27 002622       532 002630       534 002631       538 002651       562 004113       563 004152       565 004164
    567 004167       571 004176       573 004201       574 004202       576 004221       578 004225       579 004230
    581 004262       582 004264       583 004265       584 004277       585 004300       586 004320       588 004322
    590 004326       592 004331       593 004332       595 004351       597 004355       598 004360       600 004412
    601 004414       602 004415       603 004427       604 004430       605 004450       609 004452       610 004511
    612 004513       614 004515       616 004522       617 004525       619 004527       621 004534       622 004537
    624 004541       626 004546       627 004551       629 004553       631 004560       632 004563       634 004565
    636 004572       637 004575       639 004577       641 004604       642 004607       644 004611       646 004616
    647 004621       648 004624       650 004626       652 004633       653 004636       655 004640       657 004645
    658 004650       660 004652       662 004657       663 004662       665 004664       667 004671       668 004674
    670 004676       672 004703       674 004705       676 004712       678 004714       680 004721       681 004724
    683 004726       685 004733       686 004736       688 004740       691 004745       692 004750       694 004752
    696 004757       697 004762       699 004764       701 004771       702 004774       704 004776       706 005003
    707 005006       709 005010       711 005015       712 005020       713 005023       714 005026       716 005030
    718 005035       719 005040       721 005042       723 005047       724 005052       726 005054       728 005061
    729 005064       731 005066       733 005073       734 005076       736 005100       738 005105       739 005110
    740 005113       742 005115       744 005122       745 005125       747 005127       749 005134       750 005137
    752 005141       754 005146       755 005151       756 005154       758 005156       760 005210       761 005212
    763 005214       765 005221       766 005224       768 005226       770 005233       771 005236       773 005240
    775 005245       776 005250       778 005252       780 005257       781 005262       783 005264       785 005271
    786 005274       788 005276       790 005303       791 005306       792 005311       793 005314       795 005316
    797 005323       798 005326       800 005330       802 005335       803 005340       804 005343       806 005345
    808 005352       809 005355       810 005360       811 005363       813 005365       815 005372       816 005375
    818 005377       820 005404       821 005407       823 005411       825 005416       826 005421       827 005424
    829 005426       831 005433       832 005436       834 005440       836 005445       837 005450       838 005453
    839 005456       840 005461       842 005463       844 005470       845 005473       847 005475       849 005502
    850 005505       853 005507       855 005514       856 005517       857 005522       858 005525       860 005527
    862 005534       863 005537       865 005541       867 005546       868 005551       870 005553       872 005560
    873 005563       875 005565       877 005572       878 005575       879 005600       880 005603       882 005605
    885 005650       886 005652       888 005654       890 005661       891 005664       893 005666       895 005673
    896 005676       898 005700       900 005705       901 005710       903 005712       905 005744       907 005746
    909 005753       910 005756       911 005761       913 005763       915 005770       917 005772       919 005777
    921 006001       923 006006       924 006011       926 006013       928 006020       929 006023       931 006025
    933 006032       934 006035       936 006037       938 006044       939 006047       941 006051       943 006056
    944 006061       946 006063       948 006070       949 006073       951 006075       953 006102       954 006105
    956 006107       958 006114       959 006117       983 006121       961 006122       967 006136       969 006151
    971 006155       972 006161       973 006217       974 006222       976 006223       978 006233       979 006270
    980 006273       981 006274       982 006305       987 006306       991 006326      1015 007570      1016 007625
   1018 007637      1020 007642      1054 007665      1056 007667      1058 007674      1060 007700      1061 007737
   1063 007744      1065 007746      1067 007753      1069 007757      1070 010016      1072 010023      1074 010025
   1076 010032      1078 010036      1079 010075      1081 010102      1083 010104      1085 010111      1087 010115
   1088 010156      1090 010163      1092 010165      1094 010172      1096 010176      1097 010236      1099 010243
   1101 010245      1103 010252      1105 010256      1106 010315      1108 010322      1110 010324      1112 010331
   1114 010335      1115 010400      1117 010405      1119 010407      1121 010414      1123 010420      1124 010457
   1126 010464      1128 010466      1130 010473      1132 010477      1133 010540      1135 010545      1137 010547
   1140 010554      1142 010560      1143 010622      1145 010627      1147 010631      1149 010636      1151 010642
   1152 010700      1154 010705      1156 010707      1158 010714      1160 010720      1161 010757      1163 010764
   1165 010766      1167 010773      1169 010777      1170 011037      1172 011044      1174 011046      1176 011053
   1178 011057      1179 011120      1181 011125      1183 011127      1185 011134      1187 011140      1188 011201
   1190 011206      1192 011210      1194 011215      1196 011221      1197 011262      1199 011267      1201 011271
   1203 011276      1205 011302      1206 011343      1208 011350      1210 011352      1212 011357      1214 011363
   1215 011424      1217 011431      1219 011433      1221 011440      1223 011444      1224 011503      1226 011510
   1228 011512      1230 011517      1232 011523      1233 011565      1235 011572      1237 011600      1238 011636
   1240 011643      1242 011651      1243 011712      1245 011717      1247 011725      1248 011766      1250 011773
   1252 012001      1253 012040      1255 012045      1257 012053      1258 012115      1260 012122      1262 012124
   1264 012131      1266 012135      1267 012176      1269 012203      1271 012205      1273 012212      1275 012216
   1276 012257      1278 012264      1280 012266      1282 012273      1284 012277      1285 012340      1287 012345
   1289 012353      1290 012413      1292 012420      1294 012426      1295 012465      1297 012472      1299 012500
   1300 012542      1302 012547      1304 012551      1306 012556      1308 012562      1309 012621      1311 012626
   1313 012630      1315 012635      1317 012641      1318 012701      1320 012706      1322 012710      1324 012715
   1326 012721      1327 012760      1329 012765      1331 012767      1333 012774      1335 013000      1336 013041
   1338 013046      1340 013050      1342 013055      1344 013061      1345 013124      1347 013131      1349 013133
   1351 013140      1353 013144      1354 013206      1356 013213      1358 013215      1360 013222      1362 013226
   1363 013265      1365 013272      1367 013274      1369 013301      1371 013305      1372 013345      1374 013352
   1376 013360      1377 013421      1379 013426      1381 013430      1383 013435      1385 013441      1386 013501
   1388 013506      1390 013510      1392 013515      1394 013521      1395 013561      1397 013566      1399 013574
   1400 013635      1402 013642      1404 013644      1406 013651      1408 013655      1409 013716      1411 013723
   1413 013725      1415 013732      1417 013736      1418 013776      1420 014003      1422 014011      1423 014052
   1425 014057      1432 014061      1436 014105      1460 015347      1461 015404      1463 015416      1465 015421
   1516 015444      1518 015446      1520 015453      1521 015460      1523 015464      1524 015523      1526 015530
   1528 015532      1530 015537      1531 015544      1533 015550      1534 015607      1536 015614      1538 015616
   1540 015621      1541 015622      1543 015630      1544 015666      1546 015673      1548 015675      1550 015702
   1552 015713      1553 015716      1555 015722      1556 015761      1558 015766      1560 015770      1562 015775
   1563 016002      1565 016006      1566 016051      1568 016056      1570 016060      1572 016065      1573 016072
   1575 016076      1576 016134      1578 016141      1580 016143      1582 016150      1584 016161      1585 016164
   1587 016170      1588 016227      1590 016234      1592 016236      1594 016243      1595 016250      1597 016254
   1598 016315      1600 016322      1602 016324      1605 016337      1606 016342      1608 016346      1609 016407
   1611 016414      1613 016416      1617 016431      1618 016434      1620 016440      1621 016502      1623 016507
   1625 016511      1627 016516      1628 016523      1630 016527      1631 016566      1633 016573      1635 016575
   1637 016602      1638 016607      1640 016613      1641 016654      1643 016661      1645 016663      1647 016670
   1648 016675      1650 016701      1651 016742      1653 016747      1655 016751      1657 016756      1658 016763
   1660 016767      1661 017027      1663 017034      1665 017036      1667 017041      1668 017042      1669 017047
   1671 017053      1672 017111      1674 017116      1676 017120      1678 017125      1679 017132      1681 017136
   1682 017177      1684 017204      1686 017206      1688 017213      1689 017220      1691 017224      1692 017267
   1694 017274      1696 017276      1698 017303      1699 017310      1701 017314      1702 017353      1704 017360
   1710 017362      1713 017401      1716 017414      1718 017420      1721 017447      1724 017454      1727 017465
   1730 017476      1733 017507      1736 017520      1739 017531      1742 017545      1745 017556      1748 017567
   1751 017600      1754 017611      1757 017625      1760 017636      1762 017650      1764 017655      1767 017666
   1769 017672      1770 017677      1774 017706      1777 017725      1780 017736      1783 017747      1786 017760
   1788 017764      1789 017771      1792 017774      1795 020005      1798 020016      1801 020032      1804 020043
   1807 020054      1810 020065      1813 020076      1816 020107      1818 020113      1819 020120      1822 020123
   1825 020134      1828 020145      1831 020156      1834 020167      1837 020200      1840 020211      1848 020222
   1850 020226      1851 020233      1852 020236      1853 020241      1856 020244      1859 020255      1862 020266
   1865 020302      1868 020313      1871 020324      1874 020335      1876 020341      1877 020351      1880 020354
   1882 020361      1885 020370      1888 020377      1891 020406      1894 020431      1897 020440      1900 020447
   1903 020456      1906 020465      1908 020471      1909 020474      1911 020503      1912 020506      1913 020511
   1914 020514      1917 020517      1919 020523      1920 020526      1924 020535      1926 020541      1927 020544
   1929 020553      1932 020556      1934 020562      1938 020571      1940 020575      1941 020600      1943 020607
   1946 020612      1950 020613      1954 020631      1957 020660      1960 020706      1963 020733      1966 020756
   1968 020764      1970 021004      1974 021026      1976 021034      1978 021053      1982 021074      1984 021102
   1986 021121      1989 021142      2001 021144      1990 021145      1996 021163      1998 021227      1999 021231
   2005 021232      2007 021247      2009 021252      2011 021270      2012 021320      2013 021327      2014 021330
   2016 021342      2017 021372      2025 021401      2027 021415      2029 021431      2030 021445      2031 021446
   2032 021465      2035 021466      2037 021513      2039 021521      2041 021557      2043 021614      2045 021650
   2047 021657      2049 021665      2051 021724      2053 021764      2055 022021      2059 022030      2061 022044
   2062 022076      2063 022105      2064 022106      2066 022120      2067 022152      2070 022161      2072 022175
   2073 022231      2074 022240      2075 022241      2077 022253      2078 022304      2081 022313      2083 022327
   2084 022362      2085 022371      2086 022372      2088 022404      2089 022436      2092 022445      2094 022461
   2095 022510      2096 022517      2097 022520      2099 022532      2100 022562      2103 022571      2105 022605
   2106 022633      2107 022642      2108 022643      2110 022655      2111 022703      2114 022712      2116 022726
   2117 022754      2118 022763      2119 022764      2121 022776      2122 023024      2125 023033      2127 023047
   2128 023075      2129 023104      2130 023105      2132 023117      2133 023145      2136 023154      2138 023170
   2139 023224      2140 023233      2141 023234      2143 023246      2144 023302      2147 023311      2149 023325
   2150 023356      2151 023365      2152 023366      2154 023400      2155 023433      2158 023442      2160 023456
   2161 023510      2162 023517      2163 023520      2165 023532      2166 023565      2169 023574      2171 023610
   2172 023636      2173 023645      2174 023646      2176 023660      2177 023706      2180 023715      2182 023731
   2183 023764      2184 023773      2185 023774      2187 024006      2188 024041      2191 024050      2193 024064
   2194 024114      2195 024123      2196 024124      2198 024136      2199 024166      2202 024175      2204 024211
   2205 024243      2206 024252      2207 024253      2209 024265      2210 024317      2213 024326      2215 024342
   2216 024376      2217 024405      2218 024406      2220 024420      2221 024454      2224 024463      2226 024477
   2227 024532      2228 024541      2229 024542      2231 024554      2232 024607      2235 024616      2237 024632
   2238 024664      2239 024673      2240 024674      2242 024706      2243 024740      2246 024747      2248 024763
   2249 025016      2250 025025      2251 025026      2253 025040      2254 025071      2257 025100      2259 025114
   2260 025147      2261 025156      2262 025157      2264 025171      2265 025221      2268 025230      2270 025244
   2271 025276      2272 025305      2273 025306      2275 025320      2276 025347      2279 025356      2281 025372
   2282 025425      2283 025434      2284 025435      2286 025447      2287 025477      2290 025506      2292 025522
   2293 025553      2294 025562      2295 025563      2297 025575      2298 025627      2301 025636      2306 025640
   2309 025652      2310 025655      2312 025674      2313 025706      2315 025725      2316 025737      2318 025754
   2320 025771      2322 026006      2324 026023      2326 026040      2328 026055      2330 026103      2332 026121
   2334 026137      2335 026151      2337 026166      2339 026213      2341 026230      2343 026244      2345 026247
   2347 026255      2348 026257      2350 026305      2352 026323      2353 026335      2355 026336      2357 026340
   2359 026356      2361 026370      2363 026372      2365 026410      2367 026422      2369 026424      2371 026442
   2373 026454      2375 026456      2377 026474      2382 026506      2384 026511      2386 026527      2387 026541
   2390 026556      2392 026573      2394 026610      2396 026626      2398 026643      2400 026660      2402 026675
   2404 026712      2406 026727      2408 026745      2409 026757      2411 026775      2413 027012      2415 027017
   2416 027031      2417 027066      2419 027075      2421 027113      2423 027131      2426 027146      2429 027155
   2431 027156      2434 027166      2436 027174      2437 027201      2438 027204      2439 027207      2440 027212
   2441 027215      2442 027217      2443 027222      2444 027225      2445 027230      2446 027233      2447 027236
   2448 027240      2449 027243      2450 027246      2451 027251      2452 027254      2453 027257      2454 027261
   2455 027264      2456 027267      2457 027272      2458 027275      2459 027300      2460 027302      2461 027304
   2462 027306      2463 027310      2464 027312      2465 027315      2466 027320      2467 027322      2468 027324
   2469 027326      2470 027330      2471 027332      2473 027335      2474 027340      2475 027343      2476 027346
   2477 027351      2478 027354      2479 027356      2480 027361      2481 027364      2482 027367      2483 027372
   2484 027375      2485 027377      2486 027402      2487 027405      2488 027410      2489 027413      2490 027416
   2491 027420      2492 027423      2493 027426      2494 027431      2495 027434      2496 027437      2497 027441
   2498 027443      2499 027445      2500 027447      2501 027451      2502 027454      2503 027457      2504 027461
   2505 027463      2506 027465      2507 027467      2508 027471      2510 027474      2511 027477      2512 027502
   2513 027505      2514 027510      2515 027512      2516 027514      2517 027517      2518 027522      2519 027525
   2520 027530      2521 027532      2522 027534      2523 027537      2524 027542      2525 027545      2526 027550
   2527 027552      2528 027554      2529 027556      2530 027560      2531 027562      2532 027565      2533 027570
   2534 027572      2535 027574      2536 027576      2537 027600      2538 027602      2539 027605      2540 027610
   2541 027612      2542 027614      2543 027616      2544 027620      2545 027622      2547 027625      2548 027630
   2549 027633      2550 027636      2551 027641      2552 027644      2553 027646      2554 027651      2555 027654
   2556 027657      2557 027662      2558 027665      2559 027667      2560 027672      2561 027675      2562 027700
   2563 027703      2564 027706      2565 027710      2566 027713      2567 027716      2568 027721      2569 027724
   2570 027727      2571 027731      2572 027733      2573 027735      2574 027737      2575 027741      2576 027744
   2577 027747      2578 027751      2579 027753      2580 027755      2581 027757      2582 027761      2584 027764
   2585 027767      2586 027772      2587 027775      2588 030000      2589 030003      2590 030005      2591 030010
   2592 030013      2593 030016      2594 030021      2595 030024      2596 030026      2597 030031      2598 030034
   2599 030037      2600 030042      2601 030045      2602 030047      2603 030052      2604 030055      2605 030060
   2606 030063      2607 030066      2608 030070      2609 030072      2610 030074      2611 030076      2612 030100
   2613 030103      2614 030106      2615 030110      2616 030112      2617 030114      2618 030116      2619 030120
   2620 030123      2622 030124      2623 030131      2624 030134      2625 030137      2626 030142      2627 030145
   2628 030147      2629 030152      2630 030155      2631 030160      2632 030163      2633 030166      2634 030170
   2635 030173      2636 030176      2637 030201      2638 030204      2639 030207      2640 030211      2641 030214
   2642 030217      2643 030222      2644 030225      2645 030230      2646 030232      2647 030234      2648 030236
   2649 030240      2650 030242      2651 030245      2652 030250      2653 030252      2654 030254      2655 030256
   2656 030260      2657 030262      2659 030265      2660 030270      2661 030273      2662 030276      2663 030301
   2664 030304      2665 030306      2666 030311      2667 030314      2668 030317      2669 030322      2670 030325
   2671 030327      2672 030332      2673 030335      2674 030340      2675 030343      2676 030346      2677 030350
   2678 030353      2679 030356      2680 030361      2681 030364      2682 030367      2683 030371      2684 030373
   2685 030375      2686 030377      2687 030401      2688 030404      2689 030407      2690 030411      2691 030413
   2692 030415      2693 030417      2694 030421      2696 030424      2697 030427      2698 030432      2699 030435
   2700 030440      2701 030442      2702 030444      2703 030447      2704 030452      2705 030455      2706 030460
   2707 030462      2708 030464      2709 030467      2710 030472      2711 030475      2712 030500      2713 030502
   2714 030504      2715 030506      2716 030510      2717 030512      2718 030515      2719 030520      2720 030522
   2721 030524      2722 030526      2723 030530      2724 030532      2725 030535      2726 030540      2727 030542
   2728 030544      2729 030546      2730 030550      2731 030552      2733 030555      2734 030560      2735 030563
   2736 030566      2737 030571      2738 030574      2739 030576      2740 030601      2741 030604      2742 030607
   2743 030612      2744 030615      2745 030617      2746 030622      2747 030625      2748 030630      2749 030633
   2750 030636      2751 030640      2752 030643      2753 030646      2754 030651      2755 030654      2756 030657
   2757 030661      2758 030663      2759 030665      2760 030667      2761 030671      2762 030674      2763 030677
   2764 030701      2765 030703      2766 030705      2767 030707      2768 030711      2770 030714      2771 030717
   2772 030722      2773 030725      2774 030730      2775 030733      2776 030735      2777 030740      2778 030743
   2779 030746      2780 030751      2781 030754      2782 030756      2783 030761      2784 030764      2785 030767
   2786 030772      2787 030775      2788 030777      2789 031002      2790 031005      2791 031010      2792 031013
   2793 031016      2794 031020      2795 031022      2796 031024      2797 031026      2798 031030      2799 031033
   2800 031036      2801 031040      2802 031042      2803 031044      2804 031046      2805 031050      2808 031053
   2809 031061      2810 031076      2811 031102      2812 031104


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
