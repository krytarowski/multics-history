	COMPILATION LISTING OF SEGMENT show_symbols
	Compiled by: Multics PL/I Compiler, Release 26a, of September 3, 1980
	Compiled at: Honeywell LISD Phoenix, System M
	Compiled on: 01/06/81  1248.4 mst Tue
	    Options: optimize map

        1 /* ******************************************************
        2*   *                                                    *
        3*   *                                                    *
        4*   *    Copyright, (C) Honeywell Information Systems    *
        5*   *    Inc., 1980.                                     *
        6*   *                                                    *
        7*   *                                                    *
        8*   ****************************************************** */
        9 
       10 show_symbols: ssb: procedure;
       11 
       12 /*	This procedure implements the show_symbols command.
       13*   *	Created on 12/29/75 by Bill Silver as test_notescript.
       14*   *	Changed on 06/10/77 by Bill Silver to show_symbols.
       15*   *
       16*   *	The show_symbols (ssb) command will expand an input string using
       17*   *	the currently defined Speedtype symbol dictionary.
       18*   *	Its calling sequence is:
       19*   *
       20*   *	     show_symbols, ssb  term1 ... termi
       21**/
       22 
       23 dcl  in_buffer char (256);				/* Used to hold input string. */
       24 dcl  out_buffer char (512);				/* Used to hold expanded stroutg. */
       25 
       26 dcl  arg_len fixed bin (21);				/* Length of an input term argument. */
       27 dcl  arg_ptr ptr;					/* Pointer to an argument term. */
       28 dcl  argx fixed bin;				/* Number of argument term. */
       29 dcl  ecode fixed bin (35);				/* Error table code. */
       30 dcl  in_len fixed bin (21);				/* Length of input string. */
       31 dcl  in_ptr ptr;					/* Pointer to input string. */
       32 dcl  num_args fixed bin;				/* Number of command arguments. */
       33 dcl  out_used fixed bin (21);				/* Length of output string. */
       34 
       35 dcl  argument char (arg_len) based (arg_ptr);
       36 
       37 dcl  string char (in_len) based (in_ptr);		/* Input string. */
       38 
       39 dcl (addr, length, substr) builtin;
       40 
       41 dcl  error_table_$bad_arg fixed bin (35) external;
       42 dcl  error_table_$wrong_no_of_args fixed bin (35) external;
       43 
       44 dcl  com_err_ entry options (variable);
       45 dcl  cu_$arg_count entry (fixed bin);
       46 dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
       47 dcl  ioa_ entry options (variable);
       48 dcl  speedtype_expand_ entry (ptr, fixed bin (21), ptr, fixed bin (21), fixed bin (21), fixed bin (35));
       49 						/* 	*/
       50 	call cu_$arg_count (num_args);
       51 	if num_args = 0
       52 	then do;
       53 	     ecode = error_table_$wrong_no_of_args;
       54 	     call com_err_ (ecode, "Speedtype", "Usage is:  ssb term1 ... termi");
       55 	     return;
       56 	end;
       57 
       58 	in_buffer = " ";				/* Clear input buffer. */
       59 	in_ptr = addr (in_buffer);
       60 	in_len = 0;
       61 
       62 	do argx = 1 to num_args;			/* Each argument is an input term. */
       63 	     call cu_$arg_ptr (argx, arg_ptr, arg_len, ecode);
       64 	     if ecode ^= 0
       65 	     then do;
       66 		call com_err_ (ecode, "Speedtype", "Error getting argument");
       67 		return;
       68 	     end;
       69 	     if (in_len + arg_len) > length (in_buffer)
       70 	     then do;				/* Length of input buffer exceeded. */
       71 		ecode = error_table_$bad_arg;
       72 		call com_err_ (ecode, "Speedtype", "Length of input buffer exceeded.");
       73 		return;
       74 	     end;
       75 	     if argx > 1				/* Is this the second or greater term? */
       76 	     then in_len = in_len + 1;		/* Yes, sikp a space. */
       77 						/* Copy term to input string. */
       78 	     substr (in_buffer, (in_len + 1), (in_len + 1 + arg_len)) = argument;
       79 	     in_len = in_len + arg_len;
       80 	end;
       81 
       82 	call speedtype_expand_ (in_ptr, in_len, addr (out_buffer), length (out_buffer), out_used, ecode);
       83 	if ecode = 0
       84 	then call ioa_ ("^a", substr (out_buffer, 1, out_used));
       85 	else call com_err_ (0, "Speedtype", "Error expanding ^a", string);
       86 
       87      end show_symbols;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    01/06/81  1247.6  show_symbols.pl1                  >spec>on>speed>show_symbols.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
addr                                                   builtin function         dcl 39 ref 59 82 82
arg_len                         000400 automatic       fixed bin(21,0)          dcl 26 set ref 63* 69 78 78 79
arg_ptr                         000402 automatic       pointer                  dcl 27 set ref 63* 78
argument                               based           char                     unaligned dcl 35 ref 78
argx                            000404 automatic       fixed bin(17,0)          dcl 28 set ref 62* 63* 75*
com_err_                        000014 constant        entry                    external dcl 44 ref 54 66 72 85
cu_$arg_count                   000016 constant        entry                    external dcl 45 ref 50
cu_$arg_ptr                     000020 constant        entry                    external dcl 46 ref 63
ecode                           000405 automatic       fixed bin(35,0)          dcl 29 set ref 53* 54* 63* 64 66* 71* 72* 82* 83
error_table_$bad_arg            000010 external static fixed bin(35,0)          dcl 41 ref 71
error_table_$wrong_no_of_args   000012 external static fixed bin(35,0)          dcl 42 ref 53
in_buffer                       000100 automatic       char(256)                unaligned dcl 23 set ref 58* 59 69 78*
in_len                          000406 automatic       fixed bin(21,0)          dcl 30 set ref 60* 69 75* 75 78 78 79* 79 82* 85 85
in_ptr                          000410 automatic       pointer                  dcl 31 set ref 59* 82* 85
ioa_                            000022 constant        entry                    external dcl 47 ref 83
length                                                 builtin function         dcl 39 ref 69 82 82
num_args                        000412 automatic       fixed bin(17,0)          dcl 32 set ref 50* 51 62
out_buffer                      000200 automatic       char(512)                unaligned dcl 24 set ref 82 82 82 82 83 83
out_used                        000413 automatic       fixed bin(21,0)          dcl 33 set ref 82* 83 83
speedtype_expand_               000024 constant        entry                    external dcl 48 ref 82
string                                 based           char                     unaligned dcl 37 set ref 85*
substr                                                 builtin function         dcl 39 set ref 78* 83 83

NAMES DECLARED BY EXPLICIT CONTEXT.
show_symbols                    000060 constant        entry                    external dcl 10
ssb                             000051 constant        entry                    external dcl 10

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       532         560     421         542
Length       734     421        26         137     111           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
ssb                                 318 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
ssb                      000100 in_buffer                   ssb
                         000200 out_buffer                  ssb
                         000400 arg_len                     ssb
                         000402 arg_ptr                     ssb
                         000404 argx                        ssb
                         000405 ecode                       ssb
                         000406 in_len                      ssb
                         000410 in_ptr                      ssb
                         000412 num_args                    ssb
                         000413 out_used                    ssb

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
alloc_cs            call_ext_out_desc   call_ext_out        return              shorten_stack       ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      cu_$arg_count                 cu_$arg_ptr                   ioa_
speedtype_expand_

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$bad_arg          error_table_$wrong_no_of_args




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     10 000050        50 000065        51 000073        53 000075        54 000100        55 000127        58 000130
     59 000133        60 000135        62 000136        63 000144        64 000161        66 000163        67 000216
     69 000217        71 000223        72 000226        73 000255        75 000256        78 000262        79 000275
     80 000277        82 000301        83 000326        85 000357        87 000420


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
