	COMPILATION LISTING OF SEGMENT sort_build_keys
	Compiled by: Multics PL/I Compiler, Release 27d, of October 11, 1982
	Compiled at: Honeywell LISD Phoenix, System M
	Compiled on: 11/11/82  1307.4 mst Thu
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 
        7 /* ***************************************
        8*   *				 *
        9*   *				 *
       10*   * Copyright (c) 1975, 1976 by         *
       11*   * Honeywell Information Systems, Inc. *
       12*   *				 *
       13*   *				 *
       14*   *************************************** */
       15 sort_build_keys:  proc(keys_ptr, code);
       16 /*   EXTERNAL ENTRIES   */
       17 dcl  ioa_$ioa_stream entry options(variable);
       18 
       19 /*   EXTERNAL STATIC   */
  1     1 dcl 1 sort_ext$acl(1) ext,
  1     2    2 x_user_id char(32),
  1     3    2 x_modes bit(36),
  1     4    2 x_pad bit(36),
  1     5    2 x_acl_code fixed bin(35);
  1     6 dcl 1 acl(1)
  1     7 	 defined(sort_ext$acl),
  1     8    2 user_id char(32),
  1     9    2 modes bit(36),
  1    10    2 pad bit(36),
  1    11    2 acl_code fixed bin(35);
  1    12 dcl sort_ext$b(0: 31) fixed bin(30) ext;		/*  keys - bit offset (usually) for sort_comp  */
  1    13 dcl b(0: 31) fixed bin(30)
  1    14 	 defined (sort_ext$b);
  1    15 dcl sort_ext$compares_counter fixed bin(34) ext;		/*  compares executed, excluding sequence checker  */
  1    16 dcl compares_counter fixed bin(34)
  1    17 	 defined(sort_ext$compares_counter);
  1    18 dcl sort_ext$compare_sw fixed bin(1) ext;		/*  1 = user compare exit specified  */
  1    19 dcl compare_sw fixed bin(1)
  1    20 	 defined (sort_ext$compare_sw);
  1    21 dcl sort_ext$curr_input_file_attach char(256) ext;	/*  attach description, current input file (Sort)  */
  1    22 dcl curr_input_file_attach char(256)
  1    23 	 defined(sort_ext$curr_input_file_attach);
  1    24 dcl sort_ext$curr_input_file_name char(256) ext;		/*  pathname, current input file (Sort)  */
  1    25 dcl curr_input_file_name char(256)
  1    26 	 defined (sort_ext$curr_input_file_name);
  1    27 dcl sort_ext$curr_input_file_num fixed bin(17) ext;	/*  number for current input file (Sort)  */
  1    28 dcl curr_input_file_num fixed bin(17)
  1    29 	 defined (sort_ext$curr_input_file_num);
  1    30 dcl sort_ext$curr_output_file_attach char(256) ext;	/*  attach description, output file  */
  1    31 dcl curr_output_file_attach char(256)
  1    32 	 defined(sort_ext$curr_output_file_attach);
  1    33 dcl sort_ext$curr_output_file_name char(256) ext;		/*  pathname, output file  */
  1    34 dcl curr_output_file_name char(256)
  1    35 	 defined (sort_ext$curr_output_file_name);
  1    36 dcl sort_ext$debug_sw bit(1) ext;			/*  1 = -debug argument specified  */
  1    37 dcl debug_sw bit(1)
  1    38 	 defined(sort_ext$debug_sw);
  1    39 dcl sort_ext$disaster2 fixed bin(17) ext;		/*  0 = first call to sort_return or merge_return  */
  1    40 dcl disaster2 fixed bin(17)
  1    41 	 defined (sort_ext$disaster2);
  1    42 dcl sort_ext$dt(0: 31) fixed bin(30) ext;		/*  keys - datatype for sort_comp  */
  1    43 dcl dt(0: 31) fixed bin(30)
  1    44 	 defined (sort_ext$dt);
  1    45 dcl sort_ext$input_driver_is_sort bit(1) ext;		/*  1 = Sort reads input files, 0 = input_file exit  */
  1    46 dcl input_driver_is_sort bit(1)
  1    47 	 defined(sort_ext$input_driver_is_sort);
  1    48 dcl sort_ext$input_file_exit_sw bit(1) ext;		/*  1 = user input_file exit specified  */
  1    49 dcl input_file_exit_sw bit(1)
  1    50 	 defined(sort_ext$input_file_exit_sw);
  1    51 dcl sort_ext$input_file_max fixed bin(17) ext;		/*  number of input files specified [init(10)]  */
  1    52 		/*  must also change  merge_return:  merge_read_count  &  input_file_len  */
  1    53 dcl input_file_max fixed bin(17)
  1    54 	 defined(sort_ext$input_file_max);
  1    55 dcl sort_ext$input_record_exit_sw fixed bin(1) ext;	/*  1 = user input_record exit specified  */
  1    56 dcl input_record_exit_sw fixed bin(1)
  1    57 	 defined(sort_ext$input_record_exit_sw);
  1    58 dcl sort_ext$input_rec_deleted fixed bin(30) ext;		/*  number of records deleted at input_record exit  */
  1    59 dcl input_rec_deleted fixed bin(30)
  1    60 	 defined(sort_ext$input_rec_deleted);
  1    61 dcl sort_ext$input_rec_inserted fixed bin(30) ext;	/*  number of records inserted _record exit  */
  1    62 dcl input_rec_inserted fixed bin(30)
  1    63 	 defined(sort_ext$input_rec_inserted);
  1    64 dcl sort_ext$in_buff_ptr ptr ext;			/*  buffer for an input record (Sort or Merge reading)  */
  1    65 dcl in_buff_ptr ptr
  1    66 	 defined (sort_ext$in_buff_ptr);
  1    67 dcl sort_ext$leng(0: 31) fixed bin(30) ext;		/*  keys - length or precision for sort_comp  */
  1    68 dcl leng(0: 31) fixed bin(30)
  1    69 	 defined (sort_ext$leng);
  1    70 dcl sort_ext$max1 fixed bin(30) ext;			/*  limits size of unsorted string SS (sort_release)  */
  1    71 dcl max1 fixed bin(30)
  1    72 	 defined (sort_ext$max1);
  1    73 dcl sort_ext$max2 fixed bin(30) ext;			/*  limits size of unsorted string SS (sort_release)  */
  1    74 dcl max2 fixed bin(30)
  1    75 	 defined (sort_ext$max2);
  1    76 dcl sort_ext$max3 fixed bin(30) ext;			/*  maximum number of records per string SS  */
  1    77 dcl max3 fixed bin(30)
  1    78 	 defined (sort_ext$max3);
  1    79 dcl sort_ext$max4 fixed bin(30) ext;			/*  maximum merge order allowed (sort_presort)  */
  1    80 dcl max4 fixed bin(30)
  1    81 	 defined (sort_ext$max4);
  1    82 dcl sort_ext$max_rec_length fixed bin(30) ext;		/*  maximum record length permitted by Sort or Merge;  */
  1    83 						/*  slightly less than sys_info$max_seg_size  */
  1    84 dcl max_rec_length fixed bin(30)
  1    85 	 defined (sort_ext$max_rec_length);
  1    86 dcl sort_ext$merge_compares fixed bin(34) ext;		/*  number of compares in merge  */
  1    87 dcl merge_compares fixed bin(34)
  1    88 	 defined(sort_ext$merge_compares);
  1    89 dcl sort_ext$merge_in_iocb_ptrs(10) ptr ext;		/*  iox_ iocb's for Merge input files  */
  1    90 dcl merge_in_iocb_ptrs(10) ptr
  1    91 	 defined(sort_ext$merge_in_iocb_ptrs);
  1    92 dcl sort_ext$merge_input_file_attaches(10) char(256) ext;	/*  attach descriptions, Merge input files  */
  1    93 dcl merge_input_file_attaches(10) char(256)
  1    94 	 defined(sort_ext$merge_input_file_attaches);
  1    95 dcl sort_ext$merge_input_file_names(10) char(256) ext;	/*  pathnames, Merge input files  */
  1    96 dcl merge_input_file_names(10) char(256)
  1    97 	 defined(sort_ext$merge_input_file_names);
  1    98 dcl sort_ext$mii fixed bin(17) ext;			/*  merge order for Sort [init(0)]  */
  1    99 dcl mii fixed bin(17)
  1   100 	 defined (sort_ext$mii);
  1   101 dcl sort_ext$min_rec_length fixed bin(30) ext;		/*  record length required to include all key fields  */
  1   102 dcl min_rec_length fixed bin(30)
  1   103 	 defined (sort_ext$min_rec_length);
  1   104 dcl sort_ext$mip (1000) fixed bin(30) ext;		/*  number of records in each string MS for merge  */
  1   105 dcl mip (1000) fixed bin(30)
  1   106 	 defined (sort_ext$mip);
  1   107 dcl sort_ext$msp (1000) ptr ext;			/*  sorted strings MS(1:mii) to be merged  */
  1   108 dcl msp (1000) ptr
  1   109 	 defined (sort_ext$msp);
  1   110 dcl sort_ext$no_of_keys fixed bin(30) ext;		/*  number of keys specified  */
  1   111 dcl no_of_keys fixed bin(30)
  1   112 	 defined(sort_ext$no_of_keys);
  1   113 dcl sort_ext$old_input_file_num fixed bin(17) ext;	/*  used for identifying files with bad key data  */
  1   114 dcl old_input_file_num fixed bin(17)			/*       (illegal_procedure handler in sort_presort)  */
  1   115 	 defined(sort_ext$old_input_file_num);
  1   116 dcl sort_ext$output_driver_is_sort bit(1) ext;		/*  1 = Sort or Merge writes output file;  */
  1   117 dcl output_driver_is_sort bit(1)			/*  0 = output_file exit  */
  1   118 	 defined(sort_ext$output_driver_is_sort);
  1   119 dcl sort_ext$output_file_exit_sw bit(1) ext;		/*  1 = user output_file exit specified  */
  1   120 dcl output_file_exit_sw bit(1)
  1   121 	 defined(sort_ext$output_file_exit_sw);
  1   122 dcl sort_ext$output_rec_deleted fixed bin(30) ext;	/*  number of records deleted at output_record exit  */
  1   123 dcl output_rec_deleted fixed bin(30)
  1   124 	 defined(sort_ext$output_rec_deleted);
  1   125 dcl sort_ext$output_rec_inserted fixed bin(30) ext;	/*  number of record inserted at output_record exit  */
  1   126 dcl output_rec_inserted fixed bin(30)
  1   127 	 defined(sort_ext$output_rec_inserted);
  1   128 dcl sort_ext$output_record_exit_sw fixed bin(1) ext;	/*  1 = user output_record exit specified  */
  1   129 dcl output_record_exit_sw fixed bin(1)
  1   130 	 defined(sort_ext$output_record_exit_sw);
  1   131 dcl sort_ext$presort_compares fixed bin(34) ext;		/*  number of compares in presort  */
  1   132 dcl presort_compares fixed bin(34)
  1   133 	 defined(sort_ext$presort_compares);
  1   134 dcl 1 sort_ext$pu(5) ext,
  1   135    2 x_n fixed bin,					/*  [init((5) 1)]  */
  1   136    2 x_rcpu fixed bin(71);
  1   137 dcl 1 pu(5)
  1   138 	 defined(sort_ext$pu),
  1   139    2 n fixed bin,
  1   140    2 rcpu fixed bin(71);
  1   141 dcl sort_ext$read_count fixed bin(30) ext;		/*  number of records read by Sort (or by Merge)  */
  1   142 dcl read_count fixed bin(30)
  1   143 	 defined (sort_ext$read_count);
  1   144 dcl sort_ext$rec_ptr_a ptr ext;			/*  buffer for output_record exit and sequence checker  */
  1   145 dcl rec_ptr_a ptr
  1   146 	 defined(sort_ext$rec_ptr_a);
  1   147 dcl sort_ext$rec_ptr_b ptr ext;			/*  buffer for output_record exit and sequence checker  */
  1   148 dcl rec_ptr_b ptr
  1   149 	 defined(sort_ext$rec_ptr_b);
  1   150 dcl sort_ext$release_count fixed bin(30) ext;		/*  number of records released to Sort (Merge)  */
  1   151 dcl release_count fixed bin(30)
  1   152 	 defined (sort_ext$release_count);
  1   153 dcl sort_ext$report_sw bit(2) ext;			/*  00 = print summary report, 01 = suppress  */
  1   154 dcl report_sw bit(2)
  1   155 	 defined (sort_ext$report_sw);
  1   156 dcl sort_ext$return_count fixed bin(30) ext;		/*  number of records returned from Sort (Merge)  */
  1   157 dcl return_count fixed bin(30)
  1   158 	 defined (sort_ext$return_count);
  1   159 dcl sort_ext$rev(0: 31) fixed bin(1) ext;		/*  keys - descending indicator for sort_comp  */
  1   160 dcl rev(0: 31) fixed bin(1)
  1   161 	 defined (sort_ext$rev);
  1   162 dcl sort_ext$sii fixed bin(30) ext;			/*  number of records, current string (sort_release)  */
  1   163 dcl sii fixed bin(30)
  1   164 	 defined (sort_ext$sii);
  1   165 dcl sort_ext$sip ptr ext;				/*  SI - tree of indices (subscripts) for records  */
  1   166 dcl sip ptr					/*       being sorted or merged  */
  1   167 	 defined (sort_ext$sip);
  1   168 dcl sort_ext$sort_compare_exit variable			/*  entry point, user compare exit procedure  */
  1   169 	 entry(ptr, ptr) returns(fixed bin(1)) ext;
  1   170 dcl sort_ext$sort_desc_pn  char(168) ext;		/*  pathname, Sort (Merge) Description segment  */
  1   171 dcl sort_desc_pn char(168)
  1   172 	 defined(sort_ext$sort_desc_pn);
  1   173 dcl sort_ext$sort_input_record_exit variable		/*  entry point, user input_record exit procedure  */
  1   174 	 entry(ptr, fixed bin(21), fixed bin, bit(1)) ext;
  1   175 dcl sort_input_record_exit variable
  1   176 	entry(ptr, fixed bin(21), fixed bin, bit(1))
  1   177 	 defined(sort_ext$sort_input_record_exit);
  1   178 dcl sort_ext$sort_output_record_exit variable		/*  entry point, user output_record exit procedure  */
  1   179 	entry(ptr, fixed bin(21), ptr, fixed bin(21), fixed bin, fixed bin(1), bit(1), bit(1), bit(1)) ext;
  1   180 dcl sort_output_record_exit variable
  1   181 	entry(ptr, fixed bin(21), ptr, fixed bin(21), fixed bin, fixed bin(1), bit(1), bit(1), bit(1))
  1   182 	defined(sort_ext$sort_output_record_exit);
  1   183 dcl sort_ext$srp ptr ext;				/*  SR - position and length of each record  */
  1   184 dcl srp ptr					/*       in SS string for presort  */
  1   185 	 defined (sort_ext$srp);
  1   186 dcl sort_ext$ssi fixed bin(30) ext;			/*  char offset in SS of current record (sort_release)  */
  1   187 dcl ssi fixed bin(30)
  1   188 	 defined (sort_ext$ssi);
  1   189 dcl sort_ext$ssp ptr ext;				/*  SS - unsorted string during presort  */
  1   190 dcl ssp ptr
  1   191 	 defined (sort_ext$ssp);
  1   192 dcl sort_ext$state fixed bin(17) ext;			/*  state variable controlling sequence of calls to  */
  1   193 dcl state fixed bin(17)				/*    the various stages of the Sort (Merge) [init(0)]  */
  1   194 	 defined (sort_ext$state);
  1   195 dcl sort_ext$terminate_print_sw bit(1) ext;		/*  0 = command prints (sort_merge_print_report)  */
  1   196 dcl terminate_print_sw bit(1)				/*  1 = subroutine prints (sort_merge_terminate)  */
  1   197 	 defined (sort_ext$terminate_print_sw);
  1   198 dcl 1 sort_ext$time_info(5) ext,			/*  used for -time information  */
  1   199    2 x_etime fixed bin(71),
  1   200    2 x_vtime fixed bin(71),
  1   201    2 x_pf fixed bin,
  1   202    2 x_pd_f fixed bin;
  1   203 dcl 1 time_info(5)
  1   204 	 defined(sort_ext$time_info),
  1   205    2 etime fixed bin(71),
  1   206    2 vtime fixed bin(71),
  1   207    2 pf fixed bin,
  1   208    2 pd_f fixed bin;
  1   209 dcl sort_ext$time_sw bit(1) ext;			/*  1 = -time argument specified  */
  1   210 dcl time_sw bit(1)
  1   211 	 defined(sort_ext$time_sw);
  1   212 dcl sort_ext$user_out_sw char(32) ext;			/*  I/O switch for summary report, diagnostics:  */
  1   213 dcl user_out_sw char(32)				/*       "user_output", "" = suppress, other = user switch  */
  1   214 	 defined(sort_ext$user_out_sw);
  1   215 dcl sort_ext$unique_prefix char(16) ext;		/*  unique to each invocation, for temporary names  */
  1   216 dcl unique_prefix char(16)
  1   217 	 defined (sort_ext$unique_prefix); /* -4- */ 
  1   218 dcl sort_ext$w(0: 31) fixed bin(30) ext;		/*  keys - word (sometimes char) offset for sort_comp  */
  1   219 dcl w(0: 31) fixed bin(30)
  1   220 	 defined (sort_ext$w);
  1   221 dcl sort_ext$wf_dir_name char(168) aligned ext;		/*  -td directory pathname argument  */
  1   222 dcl wf_dir_name char(168) aligned
  1   223 	 defined(sort_ext$wf_dir_name);
  1   224 dcl sort_ext$wf_full_name char(168) ext;		/*  absolute -td directory pathname  */
  1   225 dcl wf_full_name char(168)
  1   226 	 defined (sort_ext$wf_full_name); /* -42- */ 
  1   227 dcl sort_ext$whoami char(6) ext;			/*  "sort", "merge", "sort_", "merge_" called  */
  1   228 dcl whoami char(6)
  1   229 	 defined (sort_ext$whoami); /* -2- */ 
  1   230 dcl sort_ext$write_count fixed bin(30) ext;		/*  number of records written by Sort (Merge)  */
  1   231 dcl write_count fixed bin(30)
  1   232 	 defined (sort_ext$write_count);
       20 
       21 
       22 /*   PARAMETERS, BASED, AUTOMATIC   */
       23 dcl (keys_ptr ptr,		/*   Pointer to keys substructure   */
       24      code fixed bin(35) ) parameter;		/*   status code          */
  2     1 /*   Sort Description, internal format.   	*/
  2     2 
  2     3 dcl 1 keys  based(work_ptr),
  2     4       2 version fixed bin init(1),
  2     5       2 number fixed bin,
  2     6       2 key_desc(0 refer(keys.number)),
  2     7         3 datatype char(8),
  2     8         3 len fixed bin(24),
  2     9         3 word_offset fixed bin(18),
  2    10         3 bit_offset fixed bin(6),
  2    11         3 rv     char(3),
  2    12       2 dummy fixed bin(71);
  2    13 
  2    14 dcl 1 io_exits  based(work_ptr),
  2    15       2 version fixed bin init(1),
  2    16       2 input_file_exit entry,
  2    17       2 output_file_exit entry,
  2    18       2 dummy fixed bin(71);
  2    19 
  2    20 dcl 1 exits  based(work_ptr),
  2    21       2 version fixed bin init(1),
  2    22       2 compare_exit entry,
  2    23       2 input_record_exit entry,
  2    24       2 output_record_exit entry,
  2    25       2 dummy fixed bin(71);
  2    26 
       25 
       26 dcl  work_ptr ptr,
       27    i fixed bin(17);
       28 
       29 /*   Start.     */
       30      work_ptr = keys_ptr;
       31      code = 0;
       32      min_rec_length = 0;
       33      do i = 1 to keys.number;
       34 	w(i-1) = word_offset(i);	/*  set word offset  */
       35 	b(i-1) = bit_offset(i);	/*  set bit offset  */
       36 	leng(i-1) = len(i);		/*  set key length  */
       37 	if rv(i) = "dsc" then rev(i-1) = 1;  /*  set descending ranking   */
       38 		      else rev(i-1) = 0;
       39 	if datatype(i) = "char"
       40 	    then do;		/*  data type = character  */
       41 		if mod(bit_offset(i),9) ^= 0 
       42 		   then do;
       43 			call bit_offset_warning("character", 9);
       44 		        end;
       45 		dt(i-1) = 1;  	/*  set type code  */
       46 		min_rec_length=max(min_rec_length,4*w(i-1)+leng(i-1)+divide(b(i-1),9,24));
       47 			/*  for this data type-set b(i-1) to first byte upon which to begin sort */
       48 		b(i-1)=4*w(i-1)+divide(b(i-1),9,24)+1;
       49 			/*  compute min_rec_length-in terms of bytes */
       50 	         end;
       51 	else if datatype(i) = "bit"
       52 	    then do;		/*  data type = bit  */
       53 		dt(i-1) = 2;	/*  set type code  */
       54 		min_rec_length=max(min_rec_length,4*w(i-1)+divide(b(i-1)+leng(i-1)-1,9,24)+1);
       55 		    /*  for this data type set b(i-1) to the first bit upon which to begin sort */
       56 		b(i-1) = w(i-1)*36 + b(i-1) + 1;
       57 	         end;
       58 	else if datatype(i) = "bin"
       59 	    then do;		/*  data type = binary  */
       60 		min_rec_length=max(min_rec_length,4*w(i-1)+divide(b(i-1)+leng(i-1)+1-1,9,24)+1);
       61 		if leng(i-1)=35 & b(i-1) = 0 then dt(i-1)=3;  /* aligned-occupying 1 word  */
       62 		else if leng(i-1)=71 & b(i-1) = 0 & mod(w(i-1),2)=0  /*  aligned-occupying 2 words  */
       63 						/*  latter tests for even word alignment  */
       64 		    then do;
       65 			dt(i-1) = 4;
       66 			w(i-1) = divide(w(i-1),2,24);  /*  set w(i-1) to index  in imaginary array of 2 word
       67*						fixed binary numbers  		*/
       68 		         end;
       69 		else do;		/*  unaligned  */
       70 		    dt(i-1) = 5;
       71 		    b(i-1)= w(i-1)*36 + b(i-1)+1;  /*  set b(i-1) to bit offset from the beginnng of the record  */
       72 		     end;
       73 	         end;
       74 	else if datatype(i) = "flbin"
       75 	    then do;		/*  data type = floating binary  */
       76 		min_rec_length=max(min_rec_length,4*w(i-1)+divide(b(i-1)+leng(i-1)+9-1,9,24)+1);
       77 		if leng(i-1)=27 & b(i-1) = 0 then dt(i-1)=6;  /*  aligned-occupying 1 word  */
       78 		else if leng(i-1)=63 & b(i-1) = 0 & mod(w(i-1),2)=0  /*  aligned-occupying 2 words  */
       79 						/*  latter tests for even word alignment  */
       80 			then do;
       81 			      dt(i-1) = 7;
       82 			      w(i-1) = divide(w(i-1),2,24);  /*  set to index in imaginary array of
       83*						2 word floating binary numbers  */
       84 			     end;
       85 		else do;  /*  unaligned  */
       86 		      dt(i-1)=8;
       87 		      b(i-1)=w(i-1)*36+b(i-1)+1;  /*  set to bit offset from beginning of record */
       88 		     end;
       89 	         end;
       90 	else if datatype(i) = "dec"
       91 	    then do;		/*  data type = decimal  */
       92 		if mod(bit_offset(i),9) ^= 0 
       93 		   then do;
       94 			call bit_offset_warning("fixed decimal", 9);
       95 		        end;
       96 		dt(i-1) = 9;
       97 		min_rec_length=max(min_rec_length,4*w(i-1)+leng(i-1)+1+divide(b(i-1),9,24));
       98 		    /*  set b(i-1) to byte offset from beginning of the record */
       99 		b(i-1)=w(i-1)*4 + divide(b(i-1),9,24)+1;
      100 	         end;
      101 	else if datatype(i) = "fldec"
      102 	    then do;		/*  data tupe = floating decimal  */
      103 		dt(i-1)=10;
      104 		min_rec_length=max(min_rec_length,4*w(i-1)+leng(i-1)+2+divide(b(i-1),9,24));
      105 		if mod(bit_offset(i),9) ^= 0 
      106 		   then do;
      107 			call bit_offset_warning("float decimal", 9);
      108 		        end;
      109 		    /*  set b(i-1) to first byte within record upon which to begin sort  */
      110 		b(i-1)=w(i-1)*4 + divide(b(i-1),9,24)+1;
      111 	         end;
      112 end;	/*   end do loop   */
      113      if min_rec_length > max_rec_length then do;
      114      	if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
      115 		"^a:  Record length required to contain keys is ^d.  Must be < ^d.",
      116 		     whoami, min_rec_length, max_rec_length);
      117 	code = 1;
      118 	end;
      119 	    no_of_keys = keys.number-1;  /*  set for comparison routine  */
      120 	return;
      121 
      122 
      123 bit_offset_warning:  proc(datatype, integer);
      124 dcl (datatype char(*),
      125      integer fixed bin ) parameter;
      126 
      127      if user_out_sw ^= "" then call ioa_$ioa_stream(user_out_sw,
      128 		"^a:  Warning:  Key ^d is ""^a"" but bit offset is not a multiple of ^d.",
      129 		whoami, i, datatype, integer);
      130 end bit_offset_warning;
      131 
      132 
      133 end sort_build_keys;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/11/82  1029.3  sort_build_keys.pl1               >spec>on>11/11/82>sort_build_keys.pl1
20           1    12/20/77  1614.2  sort_ext.incl.pl1                 >ldd>include>sort_ext.incl.pl1
25           2    04/26/76  1500.0  sort_sd.incl.pl1                  >ldd>include>sort_sd.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
b                                      defined         fixed bin(30,0)          array dcl 1-13 set ref 35* 46 48* 48 54 56* 56 60 61
                                                                                  62 71* 71 76 77 78 87* 87 97 99* 99 104 110* 110
bit_offset                6            based           fixed bin(6,0)           array level 3 dcl 2-3 ref 35 41 92 105
code                                   parameter       fixed bin(35,0)          dcl 23 set ref 15 31* 117*
datatype                               parameter       char                     unaligned dcl 124 in procedure "bit_offset_warning"
                                                                                  set ref 123 127*
datatype                  2            based           char(8)                  array level 3 in structure "keys" packed unaligned
                                                                                  dcl 2-3 in procedure "sort_build_keys" ref 39 51
                                                                                  58 74 90 101
dt                                     defined         fixed bin(30,0)          array dcl 1-43 set ref 45* 53* 61* 65* 70* 77* 81*
                                                                                  86* 96* 103*
i                               000102 automatic       fixed bin(17,0)          dcl 26 set ref 33* 34 34 35 35 36 36 37 37 38 39 41
                                                                                  45 46 46 46 48 48 48 51 53 54 54 54 56 56 56 58 60
                                                                                  60 60 61 61 61 62 62 62 65 66 66 70 71 71 71 74 76
                                                                                  76 76 77 77 77 78 78 78 81 82 82 86 87 87 87 90 92
                                                                                  96 97 97 97 99 99 99 101 103 104 104 104 105 110
                                                                                  110 110* 127*
integer                                parameter       fixed bin(17,0)          dcl 124 set ref 123 127*
ioa_$ioa_stream                 000010 constant        entry                    external dcl 17 ref 114 127
key_desc                  2            based           structure                array level 2 unaligned dcl 2-3
keys                                   based           structure                level 1 unaligned dcl 2-3
keys_ptr                               parameter       pointer                  dcl 23 ref 15 30
len                       4            based           fixed bin(24,0)          array level 3 dcl 2-3 ref 36
leng                                   defined         fixed bin(30,0)          array dcl 1-68 set ref 36* 46 54 60 61 62 76 77 78
                                                                                  97 104
max_rec_length                         defined         fixed bin(30,0)          dcl 1-84 set ref 113 114*
min_rec_length                         defined         fixed bin(30,0)          dcl 1-102 set ref 32* 46* 46 54* 54 60* 60 76* 76
                                                                                  97* 97 104* 104 113 114*
no_of_keys                             defined         fixed bin(30,0)          dcl 1-111 set ref 119*
number                    1            based           fixed bin(17,0)          level 2 dcl 2-3 ref 33 119
rev                                    defined         fixed bin(1,0)           array dcl 1-160 set ref 37* 38*
rv                        7            based           char(3)                  array level 3 packed unaligned dcl 2-3 ref 37
sort_ext$b                      000012 external static fixed bin(30,0)          array dcl 1-12 set ref 35* 35 46 46 48* 48 48 48 54
                                                                                  54 56* 56 56 56 60 60 61 61 62 62 71* 71 71 71 76
                                                                                  76 77 77 78 78 87* 87 87 87 97 97 99* 99 99 99 104
                                                                                  104 110* 110 110 110
sort_ext$dt                     000014 external static fixed bin(30,0)          array dcl 1-42 set ref 45* 45 53* 53 61* 61 65* 65
                                                                                  70* 70 77* 77 81* 81 86* 86 96* 96 103* 103
sort_ext$leng                   000016 external static fixed bin(30,0)          array dcl 1-67 set ref 36* 36 46 46 54 54 60 60 61
                                                                                  61 62 62 76 76 77 77 78 78 97 97 104 104
sort_ext$max_rec_length         000020 external static fixed bin(30,0)          dcl 1-82 ref 113 113 114 114
sort_ext$min_rec_length         000022 external static fixed bin(30,0)          dcl 1-101 set ref 32* 32 46* 46 46 46 54* 54 54 54
                                                                                  60* 60 60 60 76* 76 76 76 97* 97 97 97 104* 104
                                                                                  104 104 113 113 114 114
sort_ext$no_of_keys             000024 external static fixed bin(30,0)          dcl 1-110 set ref 119* 119
sort_ext$rev                    000026 external static fixed bin(1,0)           array dcl 1-159 set ref 37* 37 38* 38
sort_ext$user_out_sw            000030 external static char(32)                 unaligned dcl 1-212 ref 114 114 114 114 127 127 127
                                                                                  127
sort_ext$w                      000032 external static fixed bin(30,0)          array dcl 1-218 set ref 34* 34 46 46 48 48 54 54 56
                                                                                  56 60 60 62 62 66* 66 66 66 71 71 76 76 78 78 82*
                                                                                  82 82 82 87 87 97 97 99 99 104 104 110 110
sort_ext$whoami                 000034 external static char(6)                  unaligned dcl 1-227 ref 114 114 127 127
user_out_sw                            defined         char(32)                 unaligned dcl 1-213 set ref 114 114* 127 127*
w                                      defined         fixed bin(30,0)          array dcl 1-219 set ref 34* 46 48 54 56 60 62 66* 66
                                                                                  71 76 78 82* 82 87 97 99 104 110
whoami                                 defined         char(6)                  unaligned dcl 1-228 set ref 114* 127*
word_offset               5            based           fixed bin(18,0)          array level 3 dcl 2-3 ref 34
work_ptr                        000100 automatic       pointer                  dcl 26 set ref 30* 33 34 35 36 37 39 41 51 58 74 90
                                                                                  92 101 105 119

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
acl                                    defined         structure                array level 1 unaligned dcl 1-6
compare_sw                             defined         fixed bin(1,0)           dcl 1-19
compares_counter                       defined         fixed bin(34,0)          dcl 1-16
curr_input_file_attach                 defined         char(256)                unaligned dcl 1-22
curr_input_file_name                   defined         char(256)                unaligned dcl 1-25
curr_input_file_num                    defined         fixed bin(17,0)          dcl 1-28
curr_output_file_attach                defined         char(256)                unaligned dcl 1-31
curr_output_file_name                  defined         char(256)                unaligned dcl 1-34
debug_sw                               defined         bit(1)                   unaligned dcl 1-37
disaster2                              defined         fixed bin(17,0)          dcl 1-40
exits                                  based           structure                level 1 unaligned dcl 2-20
in_buff_ptr                            defined         pointer                  dcl 1-65
input_driver_is_sort                   defined         bit(1)                   unaligned dcl 1-46
input_file_exit_sw                     defined         bit(1)                   unaligned dcl 1-49
input_file_max                         defined         fixed bin(17,0)          dcl 1-53
input_rec_deleted                      defined         fixed bin(30,0)          dcl 1-59
input_rec_inserted                     defined         fixed bin(30,0)          dcl 1-62
input_record_exit_sw                   defined         fixed bin(1,0)           dcl 1-56
io_exits                               based           structure                level 1 unaligned dcl 2-14
max1                                   defined         fixed bin(30,0)          dcl 1-71
max2                                   defined         fixed bin(30,0)          dcl 1-74
max3                                   defined         fixed bin(30,0)          dcl 1-77
max4                                   defined         fixed bin(30,0)          dcl 1-80
merge_compares                         defined         fixed bin(34,0)          dcl 1-87
merge_in_iocb_ptrs                     defined         pointer                  array dcl 1-90
merge_input_file_attaches              defined         char(256)                array unaligned dcl 1-93
merge_input_file_names                 defined         char(256)                array unaligned dcl 1-96
mii                                    defined         fixed bin(17,0)          dcl 1-99
mip                                    defined         fixed bin(30,0)          array dcl 1-105
msp                                    defined         pointer                  array dcl 1-108
old_input_file_num                     defined         fixed bin(17,0)          dcl 1-114
output_driver_is_sort                  defined         bit(1)                   unaligned dcl 1-117
output_file_exit_sw                    defined         bit(1)                   unaligned dcl 1-120
output_rec_deleted                     defined         fixed bin(30,0)          dcl 1-123
output_rec_inserted                    defined         fixed bin(30,0)          dcl 1-126
output_record_exit_sw                  defined         fixed bin(1,0)           dcl 1-129
presort_compares                       defined         fixed bin(34,0)          dcl 1-132
pu                                     defined         structure                array level 1 unaligned dcl 1-137
read_count                             defined         fixed bin(30,0)          dcl 1-142
rec_ptr_a                              defined         pointer                  dcl 1-145
rec_ptr_b                              defined         pointer                  dcl 1-148
release_count                          defined         fixed bin(30,0)          dcl 1-151
report_sw                              defined         bit(2)                   unaligned dcl 1-154
return_count                           defined         fixed bin(30,0)          dcl 1-157
sii                                    defined         fixed bin(30,0)          dcl 1-163
sip                                    defined         pointer                  dcl 1-166
sort_desc_pn                           defined         char(168)                unaligned dcl 1-171
sort_ext$acl                           external static structure                array level 1 unaligned dcl 1-1
sort_ext$compare_sw                    external static fixed bin(1,0)           dcl 1-18
sort_ext$compares_counter              external static fixed bin(34,0)          dcl 1-15
sort_ext$curr_input_file_attach        external static char(256)                unaligned dcl 1-21
sort_ext$curr_input_file_name          external static char(256)                unaligned dcl 1-24
sort_ext$curr_input_file_num           external static fixed bin(17,0)          dcl 1-27
sort_ext$curr_output_file_attach       external static char(256)                unaligned dcl 1-30
sort_ext$curr_output_file_name         external static char(256)                unaligned dcl 1-33
sort_ext$debug_sw                      external static bit(1)                   unaligned dcl 1-36
sort_ext$disaster2                     external static fixed bin(17,0)          dcl 1-39
sort_ext$in_buff_ptr                   external static pointer                  dcl 1-64
sort_ext$input_driver_is_sort          external static bit(1)                   unaligned dcl 1-45
sort_ext$input_file_exit_sw            external static bit(1)                   unaligned dcl 1-48
sort_ext$input_file_max                external static fixed bin(17,0)          dcl 1-51
sort_ext$input_rec_deleted             external static fixed bin(30,0)          dcl 1-58
sort_ext$input_rec_inserted            external static fixed bin(30,0)          dcl 1-61
sort_ext$input_record_exit_sw          external static fixed bin(1,0)           dcl 1-55
sort_ext$max1                          external static fixed bin(30,0)          dcl 1-70
sort_ext$max2                          external static fixed bin(30,0)          dcl 1-73
sort_ext$max3                          external static fixed bin(30,0)          dcl 1-76
sort_ext$max4                          external static fixed bin(30,0)          dcl 1-79
sort_ext$merge_compares                external static fixed bin(34,0)          dcl 1-86
sort_ext$merge_in_iocb_ptrs            external static pointer                  array dcl 1-89
sort_ext$merge_input_file_attaches     external static char(256)                array unaligned dcl 1-92
sort_ext$merge_input_file_names        external static char(256)                array unaligned dcl 1-95
sort_ext$mii                           external static fixed bin(17,0)          dcl 1-98
sort_ext$mip                           external static fixed bin(30,0)          array dcl 1-104
sort_ext$msp                           external static pointer                  array dcl 1-107
sort_ext$old_input_file_num            external static fixed bin(17,0)          dcl 1-113
sort_ext$output_driver_is_sort         external static bit(1)                   unaligned dcl 1-116
sort_ext$output_file_exit_sw           external static bit(1)                   unaligned dcl 1-119
sort_ext$output_rec_deleted            external static fixed bin(30,0)          dcl 1-122
sort_ext$output_rec_inserted           external static fixed bin(30,0)          dcl 1-125
sort_ext$output_record_exit_sw         external static fixed bin(1,0)           dcl 1-128
sort_ext$presort_compares              external static fixed bin(34,0)          dcl 1-131
sort_ext$pu                            external static structure                array level 1 unaligned dcl 1-134
sort_ext$read_count                    external static fixed bin(30,0)          dcl 1-141
sort_ext$rec_ptr_a                     external static pointer                  dcl 1-144
sort_ext$rec_ptr_b                     external static pointer                  dcl 1-147
sort_ext$release_count                 external static fixed bin(30,0)          dcl 1-150
sort_ext$report_sw                     external static bit(2)                   unaligned dcl 1-153
sort_ext$return_count                  external static fixed bin(30,0)          dcl 1-156
sort_ext$sii                           external static fixed bin(30,0)          dcl 1-162
sort_ext$sip                           external static pointer                  dcl 1-165
sort_ext$sort_compare_exit             external static entry variable           dcl 1-168
sort_ext$sort_desc_pn                  external static char(168)                unaligned dcl 1-170
sort_ext$sort_input_record_exit        external static entry variable           dcl 1-173
sort_ext$sort_output_record_exit       external static entry variable           dcl 1-178
sort_ext$srp                           external static pointer                  dcl 1-183
sort_ext$ssi                           external static fixed bin(30,0)          dcl 1-186
sort_ext$ssp                           external static pointer                  dcl 1-189
sort_ext$state                         external static fixed bin(17,0)          dcl 1-192
sort_ext$terminate_print_sw            external static bit(1)                   unaligned dcl 1-195
sort_ext$time_info                     external static structure                array level 1 unaligned dcl 1-198
sort_ext$time_sw                       external static bit(1)                   unaligned dcl 1-209
sort_ext$unique_prefix                 external static char(16)                 unaligned dcl 1-215
sort_ext$wf_dir_name                   external static char(168)                dcl 1-221
sort_ext$wf_full_name                  external static char(168)                unaligned dcl 1-224
sort_ext$write_count                   external static fixed bin(30,0)          dcl 1-230
sort_input_record_exit                 defined         entry variable           dcl 1-175
sort_output_record_exit                defined         entry variable           dcl 1-180
srp                                    defined         pointer                  dcl 1-184
ssi                                    defined         fixed bin(30,0)          dcl 1-187
ssp                                    defined         pointer                  dcl 1-190
state                                  defined         fixed bin(17,0)          dcl 1-193
terminate_print_sw                     defined         bit(1)                   unaligned dcl 1-196
time_info                              defined         structure                array level 1 unaligned dcl 1-203
time_sw                                defined         bit(1)                   unaligned dcl 1-210
unique_prefix                          defined         char(16)                 unaligned dcl 1-216
wf_dir_name                            defined         char(168)                dcl 1-222
wf_full_name                           defined         char(168)                unaligned dcl 1-225
write_count                            defined         fixed bin(30,0)          dcl 1-231

NAMES DECLARED BY EXPLICIT CONTEXT.
bit_offset_warning              000733 constant        entry                    internal dcl 123 ref 43 94 107
sort_build_keys                 000110 constant        entry                    external dcl 15

NAMES DECLARED BY CONTEXT OR IMPLICATION.
divide                                                 builtin function         ref 46 48 54 60 66 76 82 97 99 104 110
max                                                    builtin function         ref 46 54 60 76 97 104
mod                                                    builtin function         ref 41 62 78 92 105

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1200        1236    1054        1210
Length      1476    1054        36         223     124           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
sort_build_keys                     172 external procedure  is an external procedure.  
bit_offset_warning                      internal procedure  shares stack frame of external procedure sort_build_keys.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
sort_build_keys          000100 work_ptr                    sort_build_keys
                         000102 i                           sort_build_keys

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_e_as              call_ext_out_desc   return              mod_fx1             ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
ioa_$ioa_stream

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
sort_ext$b                    sort_ext$dt                   sort_ext$leng                 sort_ext$max_rec_length
sort_ext$min_rec_length       sort_ext$no_of_keys           sort_ext$rev                  sort_ext$user_out_sw
sort_ext$w                    sort_ext$whoami




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     15 000104        30 000115        31 000121        32 000122        33 000123        34 000132        35 000142
     36 000145        37 000150        38 000161        39 000163        41 000172        43 000176        45 000207
     46 000214        48 000235        50 000245        51 000246        53 000255        54 000260        56 000303
     57 000310        58 000311        60 000320        61 000340        62 000353        65 000364        66 000367
     68 000372        70 000373        71 000376        73 000404        74 000405        76 000413        77 000434
     78 000447        81 000460        82 000463        84 000466        86 000467        87 000472        89 000500
     90 000501        92 000510        94 000514        96 000527        97 000534        99 000556       100 000566
    101 000567       103 000575       104 000600       105 000622       107 000626       110 000641       112 000655
    113 000657       114 000663       117 000722       119 000725       120 000732       123 000733       127 000744
    130 001012


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
