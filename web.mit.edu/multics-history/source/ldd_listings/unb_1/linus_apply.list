	COMPILATION LISTING OF SEGMENT linus_apply
	Compiled by: Multics PL/I Compiler, Release 28e, of February 14, 1985
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 07/29/86  0953.3 mst Tue
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 /* format: off */
        7 
        8 
        9 
       10 /*   This is the main level procedure called by ssu_ to implement the
       11*     linus apply request. Description and usage follows.
       12*
       13*     Description:
       14*
       15*     This request allows a user to edit the current query or a new query
       16*     through use of apply.
       17*     
       18*     Usage: apply {-new | -old} command_line
       19*
       20*     The control argument -new specifies that the user should start off with
       21*     an empty query. The control argument -old specifies that the user should
       22*     use the existing query. -old is the default.
       23*
       24*     Both parameters are passed to this request by ssu_.
       25*
       26*     Known Bugs:
       27*
       28*     Other Problems:
       29*
       30*     History:
       31*
       32*     Written - Al Dupuis - August 1983
       33*
       34**/
       35 
       36 linus_apply: proc (
       37 
       38 	sci_ptr_parm,   /* input: ptr to the subsystem control info structure */
       39 	lcb_ptr_parm    /* input: ptr to the linus control block info structure */
       40 		     );
       41 
       42 dcl sci_ptr_parm ptr parm;
       43 dcl lcb_ptr_parm ptr parm;
       44 
       45 /*
       46*     Mainline Processing Overview:
       47*
       48*     (1) Check to make sure a data base is open. Process control args.
       49*
       50*     (2) Get the subroutine to apply the query.
       51**/
       52 
       53 	call initialize;
       54 
       55 	if new_or_old_query_flag | lcb.liocb_ptr = null then
       56 	     call linus_query_mgr$initialize_query_file (lcb_ptr);
       57 
       58 	call linus_query_mgr$get (lcb_ptr, query_segment_ptr, query_segment_length, code);
       59 	if code ^= 0 & code ^= linus_error_$no_current_query
       60 	then call ssu_$abort_line (sci_ptr, code);
       61 
       62 	call ssu_$apply_request_util (sci_ptr, first_command_argument, query_segment_ptr, query_segment_length, new_length);
       63 
       64 	call linus_query_mgr$put (lcb_ptr, query_segment_ptr, new_length, code);
       65 	if code ^= 0
       66 	then call ssu_$abort_line (sci_ptr, code);
       67 
       68 	return;
       69 
       70 initialize: proc;
       71 
       72 
       73 	sci_ptr = sci_ptr_parm;
       74 	lcb_ptr = lcb_ptr_parm;
       75 
       76 	if lcb.db_index = 0
       77 	then call ssu_$abort_line (sci_ptr, linus_error_$no_db);
       78 
       79 	new_or_old_query_flag = OFF;
       80 
       81 	call ssu_$arg_count (sci_ptr, number_of_args_supplied);
       82 
       83 	first_command_argument = 0;
       84 	do current_arg_number = 1 to number_of_args_supplied while (first_command_argument = 0);
       85 	     call ssu_$arg_ptr (sci_ptr, current_arg_number, arg_ptr, arg_length);
       86 	     if arg = "-new"
       87 	     then new_or_old_query_flag = ON;
       88 	     else if arg = "-old"
       89 		then new_or_old_query_flag = OFF;
       90 	          else do;
       91 		     first_command_argument = current_arg_number;
       92 		     return;
       93 		end;
       94 	end;
       95 	call ssu_$abort_line (sci_ptr, 0, "Usage: apply {-new | -old} command_line");
       96 
       97           return;
       98 
       99      end initialize;
      100 
      101 dcl OFF bit (1) aligned static internal options (constant) init ("0"b);
      102 dcl ON bit (1) aligned static internal options (constant) init ("1"b);
      103 
      104 dcl addr builtin;
      105 dcl arg char (arg_length) based (arg_ptr);
      106 dcl arg_length fixed bin (21);
      107 dcl arg_ptr ptr;
      108 
      109 dcl code fixed bin (35);
      110 dcl current_arg_number fixed bin;
      111 
      112 dcl first_command_argument fixed bin;
      113 dcl fixed builtin;
      114 
      115 dcl linus_error_$no_current_query fixed bin(35) ext static;
      116 dcl linus_error_$no_db fixed bin(35) ext static;
      117 dcl linus_query_mgr$get entry (ptr, ptr, fixed bin(21), fixed bin(35));
      118 dcl linus_query_mgr$initialize_query_file entry (ptr);
      119 dcl linus_query_mgr$put entry (ptr, ptr, fixed bin(21), fixed bin(35));
      120 
      121 dcl new_length fixed bin (21);
      122 dcl new_or_old_query_flag bit (1) aligned;
      123 dcl null builtin;
      124 dcl number_of_args_supplied fixed bin;
      125 
      126 dcl query_segment_ptr ptr;
      127 dcl query_segment_length fixed bin (21);
      128 
      129 dcl rel builtin;
      130 
      131 dcl sci_ptr ptr;
      132 dcl ssu_$abort_line entry() options(variable);
      133 dcl ssu_$arg_count entry (ptr, fixed bin);
      134 dcl ssu_$arg_ptr entry (ptr, fixed bin, ptr, fixed bin(21));
      135 dcl ssu_$apply_request_util entry (ptr, fixed bin, ptr, fixed bin(21), fixed bin(21));
      136 dcl sys_info$max_seg_size fixed bin(35) ext static;
      137 
  1     1 /* BEGIN INCLUDE FILE linus_lcb.incl.pl1 -- jaw 8/30/77 */
  1     2    
  1     3 
  1     4 
  1     5 /****^  HISTORY COMMENTS:
  1     6*  1) change(86-04-23,Dupuis), approve(86-05-23,MCR7188), audit(86-07-23,GWMay),
  1     7*     install(86-07-29,MR12.0-1106):
  1     8*     Added general_work_area_ptr and renamed sfr_ptr to
  1     9*     force_retrieve_scope_ptr.
  1    10*                                                   END HISTORY COMMENTS */
  1    11 
  1    12 
  1    13 /* HISTORY:
  1    14*
  1    15*   78-09-29 J. C. C. Jagernauth: Modified for MR7.0.
  1    16*
  1    17*   81-05-11  Rickie E.  Brinegar: added security bit and andministrator bit as
  1    18*   a part of the attribute level control work.
  1    19*   
  1    20*   81-06-17  Rickie E.  Brinegar: deleted the sd_ptr as a part of removing the
  1    21*   scope_data  structure  from  LINUS.   LINUS now depends totally on MRDS for
  1    22*   scope information.
  1    23*   
  1    24*   81-11-11  Rickie  E.   Brinegar:  added the timing bit and three fields for
  1    25*   retaining  various  vcpu  times  to  be collected when in timing mode.  The
  1    26*   times  to  be collected are: LINUS parsing time, LINUS processing time, and
  1    27*   MRDS processing time.
  1    28*
  1    29*   82-01-15  DJ  Schimke:  Added the build_increment and build_start fields as
  1    30*   part of the line numbering implementation.  This allows for possible  later
  1    31*   LINUS control of the build defaults.
  1    32* 
  1    33*   82-03-01 Paul W. Benjamin: Removed linus_prompt_chars_ptr, as that 
  1    34*   information is now retained by ssu_.  Removed parse_timer as no longer
  1    35*   meaningful.  Added linus_version.  Added iteration bit.  Added 6 entry 
  1    36*   variables for ssu_ replaceable procedures.  Added actual_input_iocbp.
  1    37*
  1    38*   82-06-23 Al Dupuis: Added subsystem_control_info_ptr, 
  1    39*   subsystem_invocation_level, and selection_expression_identifier.
  1    40*
  1    41*   82-08-26 DJ Schimke: Added report_control_info_ptr, and
  1    42*   table_control_info_ptr. 
  1    43*
  1    44*   82-10-19 DJ Schimke: Added ssu_abort_line.
  1    45*
  1    46*   83-06-06 Bert Moberg: Added print_search_order (pso) and no_optimize (no_ot)
  1    47*
  1    48*   83-04-07 DJ Schimke: Added temp_seg_info_ptr.
  1    49*
  1    50*   83-08-26 Al Dupuis: Added query_temp_segment_ptr.
  1    51**/
  1    52     
  1    53 dcl 1 lcb aligned based (lcb_ptr),			/* LINUS control block */
  1    54     2 db_index fixed bin (35),			/* index of open data base, or 0 */
  1    55     2 rb_len fixed bin (21),				/* length of request buffer */
  1    56     2 lila_count fixed bin (35),			/* number of LILA text lines */
  1    57     2 lila_chars fixed bin (35),			/* number of LILA source test chars */
  1    58     2 trans_id fixed bin (35),			/* used by checkpoint and rollback facilities (MR7.0) */
  1    59     2 lila_fn char (32) unal,				/* entry name of lila data file */
  1    60     2 prompt_flag bit (1) unal,			/* on if in prompt mode */
  1    61     2 test_flag bit (1) unal,				/* on if in test mode */
  1    62     2 new_version bit (1) unal init (1),		/* on for new version data base (MR7.0) */
  1    63     2 secured_db bit (1) unal,                              /* on if the db is in a secure state */
  1    64     2 administrator bit (1) unal,                           /* on if the user is a db administrator */
  1    65     2 timing_mode bit (1) unal,                             /* on if timing is to be done */
  1    66     2 iteration bit (1) unal,				/* interpret parens as iteration sets */
  1    67     2 pso_flag bit (1) unal,				/* add print_search_order to select */
  1    68     2 no_ot_flag bit (1) unal,			/* add no_optimize to select */
  1    69     2 reserved bit (27) unal,
  1    70     2 liocb_ptr ptr,				/* iocb ptr for lila file */
  1    71     2 rb_ptr ptr,					/* ptr to request buffer */
  1    72     2 is_ptr ptr,					/* iocb ptr for currentinput stream switch */
  1    73     2 cal_ptr ptr,					/* ptr to current arg list for invoke (or null) */
  1    74     2 ttn_ptr ptr,					/* pointer to table info structure */
  1    75     2 force_retrieve_scope_info_ptr ptr,		/* structure pointer to force retrieve scope operation */
  1    76     2 lv_ptr ptr,					/* pointer linus variables */
  1    77     2 si_ptr ptr,					/* pointer to select_info structure */
  1    78     2 setfi_ptr ptr,				/* pointer to set function information */
  1    79     2 sclfi_ptr ptr,				/* pointer to user declared scalar fun. names */
  1    80     2 ivs_ptr ptr,					/* pointer to stack of invoke iocb pointers */
  1    81     2 lit_ptr ptr,					/* pointer to literal pool */
  1    82     2 lvv_ptr ptr,					/* pointer to linus variable alloc. pool  */
  1    83     2 rd_ptr ptr,					/* point to readied files mode information (MR7.0) */
  1    84     2 rt_ptr ptr,                                           /* point to table of relation names and their readied modes
  1    85*                                                               (MR7.0) */
  1    86     2 actual_input_iocbp ptr,				/* ptr to input while in macros */
  1    87     2 lila_promp_chars_ptr ptr,			/* pointer to the prompt characters for lila */
  1    88     2 linus_area_ptr ptr,				/* LINUS temporary segment pointer */
  1    89     2 lila_area_ptr ptr,				/* LILA temporary segment pointer */
  1    90     2 i_o_area_ptr ptr,				/* temporary segment pointer used by write, print, create_list */
  1    91     2 rel_array_ptr ptr,                                    /* ptr to array of names rslt info structure
  1    92*                                                               for current lila expression */
  1    93     2 unused_timer float bin (63),			/* future expansion */
  1    94     2 request_time float bin (63),                          /* How much request time was spent
  1    95*                                                                in LINUS. (-1 = user has just enabled 
  1    96*						    timing, do not report) */
  1    97     2 mrds_time float bin (63),                             /* How much time was spent in MRDS */
  1    98     2 build_increment fixed bin,			/* default increment for build mode */
  1    99     2 build_start fixed bin,				/* default start count for build mode */
  1   100     2 linus_version char (4),				/* current version of LINUS */
  1   101     2 subsystem_control_info_ptr ptr,                       /* the same ptr passed by ssu_ to each request procedure */
  1   102     2 subsystem_invocation_level fixed bin,                 /* identifies this invocation of LINUS */
  1   103     2 selection_expression_identifier fixed bin,            /* identifies the current processed selection expression */
  1   104     2 report_control_info_ptr ptr,			/* pointer to linus_report_control_info structure */
  1   105     2 table_control_info_ptr ptr,			/* pointer to linus_table control structure */
  1   106     2 temp_seg_info_ptr ptr,				/* pointer to linus_temp_seg_mgr control structure */
  1   107     2 query_temp_segment_ptr ptr,			/* points to temp seg used for manipulating query */
  1   108     2 general_work_area_ptr ptr,			/* a freeing area for general use */
  1   109     2 word_pad (6) bit (36) unal,
  1   110 						/* procedures that will be optionally */
  1   111 						/* replaced by the user.  Saved so they */
  1   112 						/* can be reinstated if desired. */
  1   113     2 ssu_abort_line entry options (variable),
  1   114     2 ssu_post_request_line variable entry (ptr),
  1   115     2 ssu_pre_request_line variable entry (ptr),
  1   116 
  1   117     2 curr_lit_offset fixed bin (35),			/* index of first free bit in lit. pool */
  1   118     2 curr_lv_val_offset fixed bin (35),		/* index of first free bit lv. val. pool */
  1   119     2 static_area area (sys_info$max_seg_size - fixed (rel (addr (lcb.static_area))) + 1);
  1   120 
  1   121 dcl  lcb_ptr ptr;
  1   122 
  1   123 /* END INCLUDE FILE linus_lcb.incl.pl1 */
      138 
      139 
      140 
      141 
      142      end linus_apply;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    07/29/86  0939.5  linus_apply.pl1                   >special_ldd>install>MR12.0-1106>linus_apply.pl1
138          1    07/29/86  0937.8  linus_lcb.incl.pl1                >special_ldd>install>MR12.0-1106>linus_lcb.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
OFF                                    constant        bit(1)                   initial dcl 101 ref 79 88
ON                                     constant        bit(1)                   initial dcl 102 ref 86
arg                                    based           char                     unaligned dcl 105 ref 86 88
arg_length                      000100 automatic       fixed bin(21,0)          dcl 106 set ref 85* 86 88
arg_ptr                         000102 automatic       pointer                  dcl 107 set ref 85* 86 88
code                            000104 automatic       fixed bin(35,0)          dcl 109 set ref 58* 59 59 59* 64* 65 65*
current_arg_number              000105 automatic       fixed bin(17,0)          dcl 110 set ref 84* 85* 91*
db_index                               based           fixed bin(35,0)          level 2 dcl 1-53 ref 76
first_command_argument          000106 automatic       fixed bin(17,0)          dcl 112 set ref 62* 83* 84 91*
lcb                                    based           structure                level 1 dcl 1-53
lcb_ptr                         000120 automatic       pointer                  dcl 1-121 set ref 55 55* 58* 64* 74* 76
lcb_ptr_parm                           parameter       pointer                  dcl 43 ref 36 74
linus_error_$no_current_query   000010 external static fixed bin(35,0)          dcl 115 ref 59
linus_error_$no_db              000012 external static fixed bin(35,0)          dcl 116 set ref 76*
linus_query_mgr$get             000014 constant        entry                    external dcl 117 ref 58
linus_query_mgr$initialize_query_file
                                000016 constant        entry                    external dcl 118 ref 55
linus_query_mgr$put             000020 constant        entry                    external dcl 119 ref 64
liocb_ptr                16            based           pointer                  level 2 dcl 1-53 ref 55
new_length                      000107 automatic       fixed bin(21,0)          dcl 121 set ref 62* 64*
new_or_old_query_flag           000110 automatic       bit(1)                   dcl 122 set ref 55 79* 86* 88*
null                                                   builtin function         dcl 123 ref 55
number_of_args_supplied         000111 automatic       fixed bin(17,0)          dcl 124 set ref 81* 84
query_segment_length            000114 automatic       fixed bin(21,0)          dcl 127 set ref 58* 62*
query_segment_ptr               000112 automatic       pointer                  dcl 126 set ref 58* 62* 64*
sci_ptr                         000116 automatic       pointer                  dcl 131 set ref 59* 62* 65* 73* 76* 81* 85* 95*
sci_ptr_parm                           parameter       pointer                  dcl 42 ref 36 73
ssu_$abort_line                 000022 constant        entry                    external dcl 132 ref 59 65 76 95
ssu_$apply_request_util         000030 constant        entry                    external dcl 135 ref 62
ssu_$arg_count                  000024 constant        entry                    external dcl 133 ref 81
ssu_$arg_ptr                    000026 constant        entry                    external dcl 134 ref 85

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
addr                                                   builtin function         dcl 104
fixed                                                  builtin function         dcl 113
rel                                                    builtin function         dcl 129
sys_info$max_seg_size                  external static fixed bin(35,0)          dcl 136

NAMES DECLARED BY EXPLICIT CONTEXT.
initialize                      000164 constant        entry                    internal dcl 70 ref 53
linus_apply                     000026 constant        entry                    external dcl 36

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       454         506     326         464
Length       712     326        32         167     125           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
linus_apply                         142 external procedure  is an external procedure.  
initialize                              internal procedure  shares stack frame of external procedure linus_apply.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
linus_apply              000100 arg_length                  linus_apply
                         000102 arg_ptr                     linus_apply
                         000104 code                        linus_apply
                         000105 current_arg_number          linus_apply
                         000106 first_command_argument      linus_apply
                         000107 new_length                  linus_apply
                         000110 new_or_old_query_flag       linus_apply
                         000111 number_of_args_supplied     linus_apply
                         000112 query_segment_ptr           linus_apply
                         000114 query_segment_length        linus_apply
                         000116 sci_ptr                     linus_apply
                         000120 lcb_ptr                     linus_apply

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return              ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
linus_query_mgr$get           linus_query_mgr$initialize_query_file                       linus_query_mgr$put
ssu_$abort_line               ssu_$apply_request_util       ssu_$arg_count                ssu_$arg_ptr

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
linus_error_$no_current_query linus_error_$no_db




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     36 000022        53 000033        55 000034        58 000052        59 000067        62 000110        64 000127
     65 000144        68 000163        70 000164        73 000165        74 000171        76 000174        79 000213
     81 000214        83 000225        84 000226        85 000237        86 000254        88 000265        91 000273
     92 000275        94 000276        95 000300        97 000325


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
