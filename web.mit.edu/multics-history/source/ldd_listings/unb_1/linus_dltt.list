	COMPILATION LISTING OF SEGMENT linus_dltt
	Compiled by: Multics PL/I Compiler, Release 28e, of February 14, 1985
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 07/29/86  1000.6 mst Tue
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   *                                                         *
        4*   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        5*   *                                                         *
        6*   *                                                         *
        7*   *********************************************************** */
        8 
        9 /* ******************************************************
       10*   *                                                    *
       11*   *                                                    *
       12*   * Copyright (c) 1972 by Massachusetts Institute of   *
       13*   * Technology and Honeywell Information Systems, Inc. *
       14*   *                                                    *
       15*   *                                                    *
       16*   ****************************************************** */
       17 
       18 
       19 linus_dltt:
       20      proc (sci_ptr, lcb_ptr);
       21 
       22 
       23 /* DESCRIPTION:
       24*
       25*   Temporary  tables  are  deleted  by  calling  dsl_define_temp_rel  with  the
       26*   negative value of the temporary table index.
       27*
       28*
       29*
       30*   HISTORY:
       31*
       32*   77-06-01 J. C. C. Jagernauth: Initially written.
       33*
       34*   80-03-14  Rickie  E.   Brinegar:  Modified  to  use  a  work area defined on
       35*   lcb.linus_area_ptr instead of getting system free area.
       36*
       37*   80-03-25 Rickie   E.  Brinegar: Modified from linus_dtt to linus_dltt.
       38*
       39*   81-02-03  Rickie  E.   Brinegar: Modified to return a zero return code after
       40*   printing  an error message.  This prevents blowing away the user when he/she
       41*   attempts to delete a temp table which does not exist.
       42*   
       43*   81-11-13 Rickie E. Brinegar: Added timing of call to dsl_$define_temp_rel.
       44*
       45*   82-02-10 Paul W. Benjamin: ssu_ conversion
       46*
       47**/
       48 
  1     1 /* BEGIN INCLUDE FILE linus_lcb.incl.pl1 -- jaw 8/30/77 */
  1     2    
  1     3 
  1     4 
  1     5 /****^  HISTORY COMMENTS:
  1     6*  1) change(86-04-23,Dupuis), approve(86-05-23,MCR7188), audit(86-07-23,GWMay),
  1     7*     install(86-07-29,MR12.0-1106):
  1     8*     Added general_work_area_ptr and renamed sfr_ptr to
  1     9*     force_retrieve_scope_ptr.
  1    10*                                                   END HISTORY COMMENTS */
  1    11 
  1    12 
  1    13 /* HISTORY:
  1    14*
  1    15*   78-09-29 J. C. C. Jagernauth: Modified for MR7.0.
  1    16*
  1    17*   81-05-11  Rickie E.  Brinegar: added security bit and andministrator bit as
  1    18*   a part of the attribute level control work.
  1    19*   
  1    20*   81-06-17  Rickie E.  Brinegar: deleted the sd_ptr as a part of removing the
  1    21*   scope_data  structure  from  LINUS.   LINUS now depends totally on MRDS for
  1    22*   scope information.
  1    23*   
  1    24*   81-11-11  Rickie  E.   Brinegar:  added the timing bit and three fields for
  1    25*   retaining  various  vcpu  times  to  be collected when in timing mode.  The
  1    26*   times  to  be collected are: LINUS parsing time, LINUS processing time, and
  1    27*   MRDS processing time.
  1    28*
  1    29*   82-01-15  DJ  Schimke:  Added the build_increment and build_start fields as
  1    30*   part of the line numbering implementation.  This allows for possible  later
  1    31*   LINUS control of the build defaults.
  1    32* 
  1    33*   82-03-01 Paul W. Benjamin: Removed linus_prompt_chars_ptr, as that 
  1    34*   information is now retained by ssu_.  Removed parse_timer as no longer
  1    35*   meaningful.  Added linus_version.  Added iteration bit.  Added 6 entry 
  1    36*   variables for ssu_ replaceable procedures.  Added actual_input_iocbp.
  1    37*
  1    38*   82-06-23 Al Dupuis: Added subsystem_control_info_ptr, 
  1    39*   subsystem_invocation_level, and selection_expression_identifier.
  1    40*
  1    41*   82-08-26 DJ Schimke: Added report_control_info_ptr, and
  1    42*   table_control_info_ptr. 
  1    43*
  1    44*   82-10-19 DJ Schimke: Added ssu_abort_line.
  1    45*
  1    46*   83-06-06 Bert Moberg: Added print_search_order (pso) and no_optimize (no_ot)
  1    47*
  1    48*   83-04-07 DJ Schimke: Added temp_seg_info_ptr.
  1    49*
  1    50*   83-08-26 Al Dupuis: Added query_temp_segment_ptr.
  1    51**/
  1    52     
  1    53 dcl 1 lcb aligned based (lcb_ptr),			/* LINUS control block */
  1    54     2 db_index fixed bin (35),			/* index of open data base, or 0 */
  1    55     2 rb_len fixed bin (21),				/* length of request buffer */
  1    56     2 lila_count fixed bin (35),			/* number of LILA text lines */
  1    57     2 lila_chars fixed bin (35),			/* number of LILA source test chars */
  1    58     2 trans_id fixed bin (35),			/* used by checkpoint and rollback facilities (MR7.0) */
  1    59     2 lila_fn char (32) unal,				/* entry name of lila data file */
  1    60     2 prompt_flag bit (1) unal,			/* on if in prompt mode */
  1    61     2 test_flag bit (1) unal,				/* on if in test mode */
  1    62     2 new_version bit (1) unal init (1),		/* on for new version data base (MR7.0) */
  1    63     2 secured_db bit (1) unal,                              /* on if the db is in a secure state */
  1    64     2 administrator bit (1) unal,                           /* on if the user is a db administrator */
  1    65     2 timing_mode bit (1) unal,                             /* on if timing is to be done */
  1    66     2 iteration bit (1) unal,				/* interpret parens as iteration sets */
  1    67     2 pso_flag bit (1) unal,				/* add print_search_order to select */
  1    68     2 no_ot_flag bit (1) unal,			/* add no_optimize to select */
  1    69     2 reserved bit (27) unal,
  1    70     2 liocb_ptr ptr,				/* iocb ptr for lila file */
  1    71     2 rb_ptr ptr,					/* ptr to request buffer */
  1    72     2 is_ptr ptr,					/* iocb ptr for currentinput stream switch */
  1    73     2 cal_ptr ptr,					/* ptr to current arg list for invoke (or null) */
  1    74     2 ttn_ptr ptr,					/* pointer to table info structure */
  1    75     2 force_retrieve_scope_info_ptr ptr,		/* structure pointer to force retrieve scope operation */
  1    76     2 lv_ptr ptr,					/* pointer linus variables */
  1    77     2 si_ptr ptr,					/* pointer to select_info structure */
  1    78     2 setfi_ptr ptr,				/* pointer to set function information */
  1    79     2 sclfi_ptr ptr,				/* pointer to user declared scalar fun. names */
  1    80     2 ivs_ptr ptr,					/* pointer to stack of invoke iocb pointers */
  1    81     2 lit_ptr ptr,					/* pointer to literal pool */
  1    82     2 lvv_ptr ptr,					/* pointer to linus variable alloc. pool  */
  1    83     2 rd_ptr ptr,					/* point to readied files mode information (MR7.0) */
  1    84     2 rt_ptr ptr,                                           /* point to table of relation names and their readied modes
  1    85*                                                               (MR7.0) */
  1    86     2 actual_input_iocbp ptr,				/* ptr to input while in macros */
  1    87     2 lila_promp_chars_ptr ptr,			/* pointer to the prompt characters for lila */
  1    88     2 linus_area_ptr ptr,				/* LINUS temporary segment pointer */
  1    89     2 lila_area_ptr ptr,				/* LILA temporary segment pointer */
  1    90     2 i_o_area_ptr ptr,				/* temporary segment pointer used by write, print, create_list */
  1    91     2 rel_array_ptr ptr,                                    /* ptr to array of names rslt info structure
  1    92*                                                               for current lila expression */
  1    93     2 unused_timer float bin (63),			/* future expansion */
  1    94     2 request_time float bin (63),                          /* How much request time was spent
  1    95*                                                                in LINUS. (-1 = user has just enabled 
  1    96*						    timing, do not report) */
  1    97     2 mrds_time float bin (63),                             /* How much time was spent in MRDS */
  1    98     2 build_increment fixed bin,			/* default increment for build mode */
  1    99     2 build_start fixed bin,				/* default start count for build mode */
  1   100     2 linus_version char (4),				/* current version of LINUS */
  1   101     2 subsystem_control_info_ptr ptr,                       /* the same ptr passed by ssu_ to each request procedure */
  1   102     2 subsystem_invocation_level fixed bin,                 /* identifies this invocation of LINUS */
  1   103     2 selection_expression_identifier fixed bin,            /* identifies the current processed selection expression */
  1   104     2 report_control_info_ptr ptr,			/* pointer to linus_report_control_info structure */
  1   105     2 table_control_info_ptr ptr,			/* pointer to linus_table control structure */
  1   106     2 temp_seg_info_ptr ptr,				/* pointer to linus_temp_seg_mgr control structure */
  1   107     2 query_temp_segment_ptr ptr,			/* points to temp seg used for manipulating query */
  1   108     2 general_work_area_ptr ptr,			/* a freeing area for general use */
  1   109     2 word_pad (6) bit (36) unal,
  1   110 						/* procedures that will be optionally */
  1   111 						/* replaced by the user.  Saved so they */
  1   112 						/* can be reinstated if desired. */
  1   113     2 ssu_abort_line entry options (variable),
  1   114     2 ssu_post_request_line variable entry (ptr),
  1   115     2 ssu_pre_request_line variable entry (ptr),
  1   116 
  1   117     2 curr_lit_offset fixed bin (35),			/* index of first free bit in lit. pool */
  1   118     2 curr_lv_val_offset fixed bin (35),		/* index of first free bit lv. val. pool */
  1   119     2 static_area area (sys_info$max_seg_size - fixed (rel (addr (lcb.static_area))) + 1);
  1   120 
  1   121 dcl  lcb_ptr ptr;
  1   122 
  1   123 /* END INCLUDE FILE linus_lcb.incl.pl1 */
       49 
       50 
  2     1 /* BEGIN INCLUDE FILE linus_char_argl.incl.pl1 -- jaw 2/11/77 */
  2     2 
  2     3 /* HISTORY:
  2     4*
  2     5*   82-02-05  Paul W. Benjamin:  Changed arg_len to fixed bin (21).
  2     6*
  2     7**/
  2     8 
  2     9 dcl 1 char_argl aligned based (ca_ptr),			/* structure for general char. arg. list */
  2    10     2 nargs fixed bin,				/* number of args */
  2    11     2 arg (nargs_init refer (char_argl.nargs)),
  2    12       3 arg_ptr ptr,				/* ptr to first char. of arg */
  2    13       3 arg_len fixed bin (21);			/* no. of chars. in arg */
  2    14 
  2    15 dcl  ca_ptr ptr;
  2    16 dcl  nargs_init fixed bin;
  2    17 
  2    18 /* END INCLUDE FILE linus_char_argl.incl.pl1 */
       51 
       52 
  3     1 /* BEGIN INCLUDE FILE linus_select_info.incl.pl1 */
  3     2 /* History:  77-07-29 J. A. Weeldreyer: Originally written.
  3     3*   Modified: 82-18-82 Dave Schimke: Added user_item.table_name
  3     4**/
  3     5 dcl 1 select_info aligned based (si_ptr),		/* info from LILA select clause */
  3     6     2 set_fn bit (1) unal,				/* on if  set fn to be applied */
  3     7     2 se_flags unal,				/* flags pertaining to selection expr. */
  3     8       3 val_ret bit (1) unal,				/* valid for retrieval */
  3     9       3 val_dtt bit (1) unal,				/* valid for define_temp_table */
  3    10       3 val_del bit (1) unal,				/* valid for delete */
  3    11       3 val_mod bit (1) unal,				/* valid for modify */
  3    12     2 dup_flag bit (1) unal,				/* on if dup explic. spec. somewhere */
  3    13     2 unique_flag bit (1) unal,			/* on if unique explic. spec. somewhere */
  3    14     2 pad bit (29) unal,				/* reserved */
  3    15     2 prior_sf_ptr ptr,				/* pointer to set fns for prior eval. */
  3    16     2 se_ptr ptr,					/* pointer to mrds selection expression */
  3    17     2 sel_items_ptr ptr,				/* pointer to list of selected items */
  3    18     2 sel_items_len fixed bin,			/* length in characters of list of selected items */
  3    19     2 se_len fixed bin (35),				/* length of mrds sel. expr. */
  3    20     2 nsv_alloc fixed bin,				/* no. of se. vals aloc. */
  3    21     2 nmi_alloc fixed bin,				/* no. of mrds items alloc. */
  3    22     2 nui_alloc fixed bin,				/* no. of user items alloc. */
  3    23     2 nsevals fixed bin,				/* number of selection expr. vaules */
  3    24     2 n_mrds_items fixed bin,				/* no. of items in mrds select list */
  3    25     2 n_user_items fixed bin,				/* no. of items user will see */
  3    26     2 se_vals (nsv_init refer (select_info.nsv_alloc)),
  3    27       3 arg_ptr ptr,
  3    28       3 desc_ptr ptr,
  3    29     2 mrds_item (nmi_init refer (select_info.nmi_alloc)),	/* mrds select items */
  3    30       3 arg_ptr ptr,				/* pointer to receiving field */
  3    31       3 bit_len fixed bin (35),			/* bit length of receiving field */
  3    32       3 desc bit (36),				/* descriptor for receiving field */
  3    33       3 assn_type fixed bin,				/* type code for assign_ */
  3    34       3 assn_len fixed bin (35),			/* length for assign_ */
  3    35     2 user_item (nui_init refer (select_info.nui_alloc)),	/* user select item */
  3    36       3 name char (32) var,				/* name for col. header */
  3    37       3 table_name char (32) var,                           /* name of containing linus table */
  3    38       3 item_type fixed bin,				/* indicates type of item:
  3    39*						   1 => raw mrds,
  3    40*						   2 => expr.  */
  3    41       3 rslt_desc bit (36),				/* descriptor for expr. result */
  3    42       3 rslt_bit_len fixed bin (35),			/* bit length of expr. result */
  3    43       3 rslt_assn_ptr ptr,				/* pointer to expr. result storage loc. */
  3    44       3 rslt_assn_type fixed bin,			/* assign_ type code of expr. result */
  3    45       3 rslt_assn_len fixed bin (35),			/* assign_ length for expr. result */
  3    46       3 item_ptr ptr;				/* pointer to item or expr. or applied set_func. structure */
  3    47 
  3    48 dcl (nsv_init, nmi_init, nui_init) fixed bin;
  3    49 dcl  si_ptr ptr;
  3    50 
  3    51 /* END INCLUDE FILE linus_select_info.incl.pl1 */
       53 
       54 
  4     1 /* BEGIN INCLUDE FILE linus_arg_list.incl.pl1 -- jccj 4/15/77 */
  4     2 
  4     3 dcl 1 char_desc aligned based (char_ptr),		/* Structure for character descriptors */
  4     4     2 fb_desc bit (36) aligned init ("100000100000000000000000000000100011"b), /* Fixed bin descriptor */
  4     5     2 n_chars fixed bin,
  4     6     2 arr (n_chars_init refer (char_desc.n_chars)),
  4     7       3 const bit (12) unal init ("101010100000"b),	/* Constant part */
  4     8       3 var bit (24) unal;				/* Variable part */
  4     9 
  4    10 dcl  char_ptr ptr;
  4    11 dcl  n_chars_init fixed bin;
  4    12 
  4    13 /* END INCLUDE FILE linus_arg_list.incl.pl1 */
       55 
       56 
  5     1 /* BEGIN mdbm_arg_list.incl.pl1 -- jaw 5/31/78 */
  5     2 /* the duplicate mrds_arg_list.incl.pl1 was eliminated by Jim Gray, Nov. 1979 */
  5     3 
  5     4 /* layout of argument list for IDS and DBM entries with options (variable) */
  5     5 
  5     6 dcl 1 arg_list based (al_ptr),
  5     7     2 arg_count fixed bin (17) unal,			/* 2 * no. of args. */
  5     8     2 code fixed bin (17) unal,			/* 4 => normal, 8 => special */
  5     9     2 desc_count fixed bin (17) unal,			/* 2 * no. of descriptors */
  5    10     2 pad fixed bin (17) unal,			/* must be 0 */
  5    11     2 arg_des_ptr (num_ptrs) ptr;			/* argument/descriptor pointer */
  5    12 
  5    13 dcl  al_ptr ptr;
  5    14 dcl  num_ptrs fixed bin;
  5    15 
  5    16 /* END mdbm_arg_list.incl.pl1  */
  5    17 
       57 
       58 
  6     1 /* BEGIN INCLUDE FILE  linus_temp_tab_names.incl.pl1 -- jaw  6/16/77 */
  6     2 
  6     3 dcl  temp_tab_names (mrds_data_$max_temp_rels) char (32) based (ttn_ptr); /* names of temp rels in slot corr. to rel. index */
  6     4 
  6     5 dcl  ttn_ptr ptr;
  6     6 
  6     7 /* END INCLUDE FILE linus_temp_tab_names.incl.pl1 */
       59 
       60 
       61 	dcl     sci_ptr		 ptr;		/* for ssu_ */
       62 
       63 	dcl     table_name		 char (char_argl.arg.arg_len (1))
       64 				 based (char_argl.arg.arg_ptr (1));
       65 
       66 	dcl     (
       67 	        e_ptr		 init (null),
       68 	        env_ptr		 init (null)
       69 	        )			 ptr;
       70 
       71 	dcl     cleanup		 condition;
       72 
       73 	dcl     (addr, fixed, null, rel, vclock) builtin;
       74 
       75 	dcl     (icode, code, out_code) fixed bin (35);
       76 
       77 	dcl     (i, l)		 fixed bin;
       78 
       79 	dcl     initial_mrds_vclock	 float bin (63);
       80 
       81 	dcl     (
       82 	        linus_data_$dltt_id,
       83 	        linus_error_$no_db,
       84 	        linus_error_$no_input_arg,
       85 	        linus_error_$no_temp_tables,
       86 	        linus_error_$undef_temp_table,
       87 	        mrds_data_$max_temp_rels,
       88 	        sys_info$max_seg_size
       89 	        )			 fixed bin (35) ext;
       90 
       91 	dcl     rel_index		 fixed bin (35);
       92 
       93 	dcl     dsl_$define_temp_rel	 entry options (variable);
       94 	dcl     linus_convert_code	 entry (fixed bin (35), fixed bin (35), fixed bin (35));
       95 	dcl     ssu_$abort_line	 entry options (variable);
       96 	dcl     ssu_$arg_count	 entry (ptr, fixed bin);
       97 	dcl     ssu_$arg_ptr	 entry (ptr, fixed bin, ptr, fixed bin (21));
       98 
       99 	ca_ptr = null;
      100 
      101 	icode, code = 0;
      102 
      103 	if lcb.db_index = 0 then
      104 	     call error (linus_error_$no_db, "");
      105 	else do;
      106 		call ssu_$arg_count (sci_ptr, nargs_init);
      107 		if nargs_init = 0
      108 		then call error (linus_error_$no_input_arg, "");
      109 	     end;
      110 
      111 	rel_index = 0;				/* Init for mrds define temp rel */
      112 	if lcb.ttn_ptr = null then
      113 	     call error (linus_error_$no_temp_tables, "");
      114 	ttn_ptr = lcb.ttn_ptr;
      115 	allocate char_argl in (lcb.static_area);
      116 	on cleanup begin;
      117 		if ca_ptr ^= null
      118 		then free char_argl;
      119 	     end;
      120 	do i = 1 to nargs_init;
      121 	     call ssu_$arg_ptr (sci_ptr, i, char_argl.arg.arg_ptr (i), char_argl.arg.arg_len (i));
      122 	end;
      123 	i = 0;
      124 	do l = 1 to mrds_data_$max_temp_rels while (i = 0);
      125 	     if temp_tab_names (l) = table_name then do;
      126 		     rel_index = 0 - l;		/* redefine temporary tables */
      127 		     i = 1;
      128 		end;
      129 	end;
      130 	l = l - i;				/* If I found it, then I am 1 (or i) beyond where I found it, so adjust */
      131 	if rel_index ^< 0 | l > mrds_data_$max_temp_rels then
      132 	     call error (linus_error_$undef_temp_table, table_name);
      133 	if lcb.timing_mode then
      134 	     initial_mrds_vclock = vclock;
      135 	call dsl_$define_temp_rel (lcb.db_index, "", rel_index, code);
      136 	if lcb.timing_mode then
      137 	     lcb.mrds_time = lcb.mrds_time + vclock - initial_mrds_vclock;
      138 	if code ^= 0 then
      139 	     call error (code, "");
      140 	temp_tab_names (l) = "";
      141 
      142 exit:
      143 	if ca_ptr ^= null
      144 	then free char_argl;
      145 	return;
      146 
      147 
      148 
      149 error:
      150      proc (err_code, string);
      151 
      152 	dcl     err_code		 fixed bin (35);
      153 	dcl     string		 char (*);
      154 
      155 	if ca_ptr ^= null
      156 	then free char_argl;
      157 	call linus_convert_code (err_code, out_code, linus_data_$dltt_id);
      158 	call ssu_$abort_line (sci_ptr, out_code, string);
      159 
      160      end error;
      161 
      162      end linus_dltt;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    07/29/86  0939.8  linus_dltt.pl1                    >special_ldd>install>MR12.0-1106>linus_dltt.pl1
49           1    07/29/86  0937.8  linus_lcb.incl.pl1                >special_ldd>install>MR12.0-1106>linus_lcb.incl.pl1
51           2    11/23/82  1327.3  linus_char_argl.incl.pl1          >ldd>include>linus_char_argl.incl.pl1
53           3    09/16/83  1338.0  linus_select_info.incl.pl1        >ldd>include>linus_select_info.incl.pl1
55           4    03/27/82  0434.5  linus_arg_list.incl.pl1           >ldd>include>linus_arg_list.incl.pl1
57           5    10/14/83  1609.0  mdbm_arg_list.incl.pl1            >ldd>include>mdbm_arg_list.incl.pl1
59           6    03/27/82  0434.5  linus_temp_tab_names.incl.pl1     >ldd>include>linus_temp_tab_names.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
arg                       2            based           structure                array level 2 dcl 2-9
arg_len                   4            based           fixed bin(21,0)          array level 3 dcl 2-9 set ref 121* 125 131 131
arg_ptr                   2            based           pointer                  array level 3 dcl 2-9 set ref 121* 125 131
ca_ptr                          000100 automatic       pointer                  dcl 2-15 set ref 99* 115* 117 117 121 121 125 125
                                                                                  131 131 131 142 142 155 155
char_argl                              based           structure                level 1 dcl 2-9 set ref 115 117 142 155
cleanup                         000112 stack reference condition                dcl 71 ref 116
code                            000121 automatic       fixed bin(35,0)          dcl 75 set ref 101* 135* 138 138*
db_index                               based           fixed bin(35,0)          level 2 dcl 1-53 set ref 103 135*
dsl_$define_temp_rel            000024 constant        entry                    external dcl 93 ref 135
e_ptr                           000106 automatic       pointer                  initial dcl 66 set ref 66*
env_ptr                         000110 automatic       pointer                  initial dcl 66 set ref 66*
err_code                               parameter       fixed bin(35,0)          dcl 152 set ref 149 157*
i                               000123 automatic       fixed bin(17,0)          dcl 77 set ref 120* 121* 121 121* 123* 124 127* 130
icode                           000120 automatic       fixed bin(35,0)          dcl 75 set ref 101*
initial_mrds_vclock             000126 automatic       float bin(63)            dcl 79 set ref 133* 136
l                               000124 automatic       fixed bin(17,0)          dcl 77 set ref 124* 125 126* 130* 130 131 140
lcb                                    based           structure                level 1 dcl 1-53
lcb_ptr                                parameter       pointer                  dcl 1-121 ref 19 103 112 114 115 133 135 136 136 136
linus_convert_code              000026 constant        entry                    external dcl 94 ref 157
linus_data_$dltt_id             000010 external static fixed bin(35,0)          dcl 81 set ref 157*
linus_error_$no_db              000012 external static fixed bin(35,0)          dcl 81 set ref 103*
linus_error_$no_input_arg       000014 external static fixed bin(35,0)          dcl 81 set ref 107*
linus_error_$no_temp_tables     000016 external static fixed bin(35,0)          dcl 81 set ref 112*
linus_error_$undef_temp_table   000020 external static fixed bin(35,0)          dcl 81 set ref 131*
mrds_data_$max_temp_rels        000022 external static fixed bin(35,0)          dcl 81 ref 124 131
mrds_time                74            based           float bin(63)            level 2 dcl 1-53 set ref 136* 136
nargs                                  based           fixed bin(17,0)          level 2 dcl 2-9 set ref 115* 117 142 155
nargs_init                      000102 automatic       fixed bin(17,0)          dcl 2-16 set ref 106* 107 115 115 120
null                                                   builtin function         dcl 73 ref 66 66 99 112 117 142 155
out_code                        000122 automatic       fixed bin(35,0)          dcl 75 set ref 157* 158*
rel_index                       000130 automatic       fixed bin(35,0)          dcl 91 set ref 111* 126* 131 135*
sci_ptr                                parameter       pointer                  dcl 61 set ref 19 106* 121* 158*
ssu_$abort_line                 000030 constant        entry                    external dcl 95 ref 158
ssu_$arg_count                  000032 constant        entry                    external dcl 96 ref 106
ssu_$arg_ptr                    000034 constant        entry                    external dcl 97 ref 121
static_area             144            based           area                     level 2 dcl 1-53 ref 115
string                                 parameter       char                     unaligned dcl 153 set ref 149 158*
table_name                             based           char                     unaligned dcl 63 set ref 125 131*
temp_tab_names                         based           char(32)                 array unaligned dcl 6-3 set ref 125 140*
timing_mode              15(05)        based           bit(1)                   level 2 packed unaligned dcl 1-53 ref 133 136
ttn_ptr                         000104 automatic       pointer                  dcl 6-5 in procedure "linus_dltt" set ref 114* 125
                                                                                  140
ttn_ptr                  26            based           pointer                  level 2 in structure "lcb" dcl 1-53 in procedure
                                                                                  "linus_dltt" ref 112 114
vclock                                                 builtin function         dcl 73 ref 133 136

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
addr                                                   builtin function         dcl 73
al_ptr                                 automatic       pointer                  dcl 5-13
arg_list                               based           structure                level 1 unaligned dcl 5-6
char_desc                              based           structure                level 1 dcl 4-3
char_ptr                               automatic       pointer                  dcl 4-10
fixed                                                  builtin function         dcl 73
n_chars_init                           automatic       fixed bin(17,0)          dcl 4-11
nmi_init                               automatic       fixed bin(17,0)          dcl 3-48
nsv_init                               automatic       fixed bin(17,0)          dcl 3-48
nui_init                               automatic       fixed bin(17,0)          dcl 3-48
num_ptrs                               automatic       fixed bin(17,0)          dcl 5-14
rel                                                    builtin function         dcl 73
select_info                            based           structure                level 1 dcl 3-5
si_ptr                                 automatic       pointer                  dcl 3-49
sys_info$max_seg_size                  external static fixed bin(35,0)          dcl 81

NAMES DECLARED BY EXPLICIT CONTEXT.
error                           000415 constant        entry                    internal dcl 149 ref 103 107 112 131 138
exit                            000403 constant        label                    dcl 142
linus_dltt                      000016 constant        entry                    external dcl 19

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       672         730     512         702
Length      1246     512        36         301     157           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
linus_dltt                          154 external procedure  is an external procedure.  
on unit on line 116                  64 on unit               
error                                   internal procedure  shares stack frame of external procedure linus_dltt.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
linus_dltt               000100 ca_ptr                      linus_dltt
                         000102 nargs_init                  linus_dltt
                         000104 ttn_ptr                     linus_dltt
                         000106 e_ptr                       linus_dltt
                         000110 env_ptr                     linus_dltt
                         000120 icode                       linus_dltt
                         000121 code                        linus_dltt
                         000122 out_code                    linus_dltt
                         000123 i                           linus_dltt
                         000124 l                           linus_dltt
                         000126 initial_mrds_vclock         linus_dltt
                         000130 rel_index                   linus_dltt

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return              enable              ext_entry           int_entry
alloc_based         free_based          vclock

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
dsl_$define_temp_rel          linus_convert_code            ssu_$abort_line               ssu_$arg_count
ssu_$arg_ptr

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
linus_data_$dltt_id           linus_error_$no_db            linus_error_$no_input_arg     linus_error_$no_temp_tables
linus_error_$undef_temp_table mrds_data_$max_temp_rels




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     19 000012        66 000023        99 000026       101 000027       103 000031       106 000052       107 000062
    111 000101       112 000102       114 000126       115 000133       116 000147       117 000163       119 000175
    120 000176       121 000205       122 000225       123 000227       124 000230       125 000243       126 000256
    127 000261       129 000263       130 000265       131 000267       133 000316       135 000330       136 000353
    138 000367       140 000374       142 000403       145 000414       149 000415       155 000426       157 000437
    158 000453       160 000477


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
