	COMPILATION LISTING OF SEGMENT sort_merge_sub_error
	Compiled by: Multics PL/I Compiler, Release 27d, of October 11, 1982
	Compiled at: Honeywell LISD Phoenix, System M
	Compiled on: 11/11/82  1308.2 mst Thu
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 
        7 /* ***************************************
        8*   *				 *
        9*   *				 *
       10*   * Copyright (c) 1975, 1976, 1977 by   *
       11*   * Honeywell Information Systems, Inc. *
       12*   *				 *
       13*   *				 *
       14*   *************************************** */
       15 sort_merge_sub_error:  proc;
       16 /*   Handler for sub_error_ condition for sort and merge commands.   */
       17 
       18 /*   EXTERNAL ENTRIES   */
       19 dcl  continue_to_signal_  entry(fixed bin(35));
       20 dcl  convert_status_code_  entry(fixed bin(35), char(8) aligned, char(100) aligned);
       21 dcl  find_condition_info_  entry(ptr, ptr, fixed bin(35));
       22 dcl  ioa_  entry options(variable);
       23 dcl  ioa_$ioa_switch  entry options(variable);
       24 
       25 /*   EXTERNAL STATIC   */
       26 dcl  iox_$user_output  ptr external static;
       27 
       28 /*   AUTOMATIC and BASED   */
       29 dcl  continue_code  fixed bin(35);
       30 dcl  cond_ptr ptr;
       31 dcl  find_cond_code fixed bin(35);
       32 dcl  shortinfo char(8) aligned,
       33      longinfo char(100) aligned;
       34 
       35 dcl 1 info aligned based(infoptr),
       36       2 length fixed bin,
       37       2 version fixed bin,
       38       2 action_flags aligned,
       39         3 cant_restart bit(1) unaligned,	/*   At present, always off (=  ).   */
       40         3 default_restart bit(1) unaligned,	/*   At present, always on (= 1).   */
       41         3 pad bit(34) unaligned,
       42       2 string char(256) varying,
       43       2 code fixed bin(35),
       44       2 retval fixed bin(35),
       45       2 name char(32),
       46       2 infop ptr;
       47 
       48 dcl 1 find_cond_info,
  1     1 	/* BEGIN INCLUDE FILE ... cond_info.incl.pl1
  1     2*	   coded by M. Weaver 12 July 1973 */
  1     3 
  1     4 	  2 mcptr ptr,				/* ptr to machine conditions at time of fault */
  1     5 	  2 version fixed bin,			/* version of this structure (now=1) */
  1     6 	  2 condition_name char(32) var,		/* name of condition */
  1     7 	  2 infoptr ptr,				/* ptr to software info structure */
  1     8 	  2 wcptr ptr,				/* ptr to wall crossing machine conditions */
  1     9 	  2 loc_ptr ptr,				/* ptr to location where condition occurred */
  1    10 	  2 flags aligned,
  1    11 	    3 crawlout bit(1) unal,			/* = "1"b if condition occurred in inner ring */
  1    12 	    3 pad1 bit(35) unal,
  1    13 	  2 pad_word bit(36) aligned,
  1    14 	  2 user_loc_ptr ptr,			/* ptr to last non-support loc before condition */
  1    15 	  2 pad (4) bit(36) aligned;
  1    16 
  1    17 	/* END INCLUDE FILE ... cond_info.incl.pl1 */
       49 
       50 
       51 
       52      cond_ptr = addr(find_cond_info);
       53      call find_condition_info_(null(), cond_ptr, find_cond_code);
       54      if cond_ptr = null() then do;
       55 	call continue_to_signal_(continue_code);
       56 	return;
       57 	end;
       58      if condition_name ^= "sub_error_" | infoptr = null()
       59      | (substr(name, 1, 4) ^= "sort" & substr(name, 1, 5) ^= "merge") then do;
       60 	call continue_to_signal_(continue_code);
       61 	return;
       62 	end;
       63      retval = 0;
       64      if code = 0 then call ioa_$ioa_switch(iox_$user_output,
       65 	"^a: ^a", name, string);
       66      else do;
       67 	call convert_status_code_(code, shortinfo, longinfo);
       68 	call ioa_$ioa_switch(iox_$user_output,
       69 		"^a:  ^a ^a", name, longinfo, string);
       70 	end;
       71 end sort_merge_sub_error;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/11/82  1029.6  sort_merge_sub_error.pl1          >spec>on>11/11/82>sort_merge_sub_error.pl1
49           1    05/06/74  1741.0  cond_info.incl.pl1                >ldd>include>cond_info.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
code                    104            based           fixed bin(35,0)          level 2 dcl 35 set ref 64 67*
cond_ptr                        000102 automatic       pointer                  dcl 30 set ref 52* 53* 54
condition_name            3     000142 automatic       varying char(32)         level 2 dcl 48 set ref 58
continue_code                   000100 automatic       fixed bin(35,0)          dcl 29 set ref 55* 60*
continue_to_signal_             000010 constant        entry                    external dcl 19 ref 55 60
convert_status_code_            000012 constant        entry                    external dcl 20 ref 67
find_cond_code                  000104 automatic       fixed bin(35,0)          dcl 31 set ref 53*
find_cond_info                  000142 automatic       structure                level 1 unaligned dcl 48 set ref 52
find_condition_info_            000014 constant        entry                    external dcl 21 ref 53
info                                   based           structure                level 1 dcl 35
infoptr                  14     000142 automatic       pointer                  level 2 dcl 48 set ref 58 58 58 63 64 64 64 67 68 68
ioa_$ioa_switch                 000016 constant        entry                    external dcl 23 ref 64 68
iox_$user_output                000020 external static pointer                  dcl 26 set ref 64* 68*
longinfo                        000110 automatic       char(100)                dcl 32 set ref 67* 68*
name                    106            based           char(32)                 level 2 dcl 35 set ref 58 58 64* 68*
retval                  105            based           fixed bin(35,0)          level 2 dcl 35 set ref 63*
shortinfo                       000106 automatic       char(8)                  dcl 32 set ref 67*
string                    3            based           varying char(256)        level 2 dcl 35 set ref 64* 68*

NAME DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
ioa_                            000000 constant        entry                    external dcl 22

NAME DECLARED BY EXPLICIT CONTEXT.
sort_merge_sub_error            000025 constant        entry                    external dcl 15

NAMES DECLARED BY CONTEXT OR IMPLICATION.
addr                                                   builtin function         ref 52
null                                                   builtin function         ref 53 53 54 58
substr                                                 builtin function         ref 58 58

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       324         346     223         334
Length       540     223        22         155     101           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
sort_merge_sub_error                174 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
sort_merge_sub_error     000100 continue_code               sort_merge_sub_error
                         000102 cond_ptr                    sort_merge_sub_error
                         000104 find_cond_code              sort_merge_sub_error
                         000106 shortinfo                   sort_merge_sub_error
                         000110 longinfo                    sort_merge_sub_error
                         000142 find_cond_info              sort_merge_sub_error

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return              ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
continue_to_signal_           convert_status_code_          find_condition_info_          ioa_$ioa_switch

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
iox_$user_output




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     15 000024        52 000032        53 000034        54 000050        55 000054        56 000063        58 000064
     60 000106        61 000115        63 000116        64 000117        67 000151        68 000164        71 000222


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
