	COMPILATION LISTING OF SEGMENT mrds_rst_file_cleanup
	Compiled by: Multics PL/I Compiler, Release 28e, of February 14, 1985
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 04/18/85  1057.4 mst Thu
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   *                                                         *
        4*   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        5*   *                                                         *
        6*   *                                                         *
        7*   *********************************************************** */
        8 
        9 /* ******************************************************
       10*   *                                                    *
       11*   *                                                    *
       12*   * Copyright (c) 1972 by Massachusetts Institute of   *
       13*   * Technology and Honeywell Information Systems, Inc. *
       14*   *                                                    *
       15*   *                                                    *
       16*   ****************************************************** */
       17 
       18 mrds_rst_file_cleanup:
       19      procedure (rsc_ptr);
       20 
       21 /* DESCRIPTION:
       22*
       23*   This  routine  is  invoked  to supply default unblocked files for relations
       24*   which  have  had  no files specified for them.  it produces dummy file list
       25*   structures identical to the input to mrds_rst_file_handler that have a file
       26*   name equal to the relation name, and then calls the file handler to put the
       27*   file models in place.
       28*
       29*
       30*
       31*   PARAMETERS:
       32*
       33*   rsc_ptr - - (input) pointer to the common control segment
       34*
       35*   global  lists  -  - (input) searched for relations without files since they
       36*   contain all database entities during RMDB/CMDB
       37*
       38*   parse  info  structures  - - (output) via calls to mrds_rst_file_handler to
       39*   build the file model as default for the given relation
       40*
       41*
       42*
       43*   HISTORY:
       44*
       45*   78-10-01 Jim Gray : Originally written.
       46*   
       47*   81-09-16  Rickie  E.   Brinegar:  changed  the  assignment  of  gl.name  to
       48*   file.name  to  be  done via a rtrim to remove the substring range condition
       49*   from compile.
       50*
       51**/
       52 
       53 /* get semantic structure pointers */
       54 
       55 	directive_ptr = rsc.directive_ptr;
       56 
       57 /* if trace is on call metering */
       58 
       59 	if ^rsc.trace_sw then
       60 	     ;
       61 	else do;
       62 		if directive.type = DEFINE then
       63 		     directive_mesg = "DEFINE";
       64 		else if directive.type = REDEFINE then
       65 		     directive_mesg = "REDEFINE";
       66 		else directive_mesg = "CMDB";
       67 		call
       68 		     mrds_rst_meter (rsc_ptr, "mrds_rst_file_cleanup", "1"b /* in */,
       69 		     directive_mesg);
       70 	     end;
       71 
       72 /* check for relations with no referencing files,
       73*   any found get default files of the same name
       74*   as that of the given relation, using unblocked file attributes */
       75 
       76 	if directive.type = REDEFINE then do;
       77 		call
       78 		     ioa_$rs ("^a ^a", message, message_length,
       79 		     "The file cleanup handler will not implement the ""redefine""",
       80 		     "directive until a later release.");
       81 		call
       82 		     mrds_rst_error (rsc_ptr, 2 /* severity */,
       83 		     mrds_error_$rst_undone_option, (message));
       84 	     end;
       85 	else do;
       86 
       87 /* initialize the successor function to get the first relation on the
       88*   global list of relations in the database */
       89 
       90 		root_ptr = rsc.h_grel_ptr;
       91 		node_ptr = root_ptr;		/* convention for first on list */
       92 		success = "1"b;			/* do at least one loop */
       93 
       94 		do while (success);
       95 
       96 		     call
       97 			mrds_rst_tree_successor (root_ptr, node_ptr, successor_ptr,
       98 			successor_parent_ptr, success);
       99 
      100 		     if ^success then
      101 			;			/* success off => no more in list */
      102 		     else do;			/* next relation found */
      103 
      104 			     node_ptr = successor_ptr;/* get pointer to next on list after last one */
      105 			     gl_ptr = node_ptr -> node.data; /* get element portion from tree head */
      106 
      107 			     if gl.superior_assigned then
      108 				;		/* file present for this relation */
      109 			     else do;		/* none found, set default file */
      110 
      111 /* make believe we are the parser, and that we
      112*   just found an file definition of "rel_name(rel_name) -unblocked" */
      113 
      114 				     call mrds_rst_rsc_alloc (rsc_ptr, FILE, file_ptr);
      115 				     file.name = rtrim (gl.name); /* set relation name as file's */
      116 				     file.type = 1; /* default file type = unblocked */
      117 				     file.ppb = 0;	/* zero out blocked file parameters */
      118 				     file.hbh = 0;
      119 				     file.block = 0;
      120 				     file.num_items = 1; /* one relation in file */
      121 				     file.default = "1"b; /* not from source definition */
      122 				     file.unused = "0"b;
      123 				     file.line_num = 0;
      124 
      125 /* set file relation list to one relation with this relation name */
      126 
      127 				     call mrds_rst_rsc_alloc (rsc_ptr, ITEM, item_ptr);
      128 				     file.i_ptr = item_ptr; /* link to file header */
      129 				     item.name = gl.name; /* set relation name */
      130 				     item.next = null (); /* no more in list */
      131 				     item.unused = "0"b;
      132 				     item.line_num = 0; /* dummy number */
      133 
      134 
      135 /* define the file just prepared */
      136 
      137 				     call mrds_rst_file_handler (rsc_ptr, file_ptr);
      138 
      139 				end;
      140 
      141 			end;
      142 
      143 		end;
      144 
      145 	     end;
      146 
      147 /* call trace if metering is on */
      148 
      149 	if ^rsc.trace_sw then
      150 	     ;
      151 	else call
      152 		mrds_rst_meter (rsc_ptr, "mrds_rst_file_cleanup", "0"b /* out */,
      153 		directive_mesg);
      154 
      155 	declare ioa_$rs		 entry options (variable); /* string manipulation routine */
      156 	declare mrds_rst_rsc_alloc	 entry (ptr, fixed bin, ptr); /* work area manager */
      157 	declare mrds_rst_error	 entry (ptr, fixed bin, fixed bin (35), char (*));
      158 						/* general error handler */
      159 	declare message		 char (96) varying; /* specifics of error message */
      160 	declare message_length	 fixed (21);	/* length of specifics message */
      161 	declare mrds_error_$rst_undone_option fixed bin (35) external;
      162 						/* unimplemented feature */
      163 	declare directive_mesg	 char (8);	/* meter call message */
      164 	declare mrds_rst_tree_successor entry (ptr, ptr, ptr, ptr, bit (1));
      165 						/* get next on list routine */
      166 	declare mrds_rst_file_handler	 entry (ptr, ptr);	/* file semantic routine */
      167 	declare mrds_rst_meter	 entry (ptr, char (*), bit (1), char (*));
      168 						/* trace/meter routine */
      169 	declare sys_info$max_seg_size	 fixed bin (35) external; /* system largest segment allowed */
      170 	declare (fixed, addr, null, rel, rtrim) builtin;	/* functions known to pl1 */
      171 
  1     1 /* BEGIN INCLUDE FILE mrds_rst_rsc.incl.pl1		RDL  7/7/78	*/
  1     2 
  1     3 /* Modified 8/21/78 by RDL */
  1     4 
  1     5 /* Modified 9/11/78 	by RDL to add directive and stmt pointers */
  1     6 
  1     7 /* Modified 11/4/78		by RDL to add debug,trace,meter switches
  1     8*
  1     9*   Modified 3/29/79 by RDL to change s_seg_info_ptr to source_seg_ptr
  1    10*
  1    11*   Modified by Jim Gray - - Jan. 1980, to add flags to disallow blocked files, forieng keys, and restructuring.
  1    12*
  1    13*   Modified by Jim Gray - - Feb. 1980, to add command level flag for cmdb subroutine interface.
  1    14*
  1    15*   Modified by Jim Gray - - 80-11-06, to add bit for cmdb -secure option.
  1    16*
  1    17*   81-05-18 Jim Gray : added bit for max_attributes error message, so that
  1    18*   it would only be issued on first occurence.
  1    19*
  1    20*   82-08-19 Davids: added the db_type field.
  1    21*
  1    22*   83-02-18 Mike Kubicar : Removed the db_type field and added the 
  1    23*   db_relation_mode_flags substructure to define the modes applicable
  1    24*   to the database's relations.  Also removed assorted unsed fields
  1    25*   (names that included the word unused).
  1    26*
  1    27**/
  1    28 
  1    29 dcl 1 rsc based (rsc_ptr),				/* Restructuring control info */
  1    30     2 rsc_dir char (200),				/* pathname of directory containing rsc segment */
  1    31     2 dbp char (168),				/* Database absolute path */
  1    32     2 temp_dir char (168),				/* Path name of temp restrucuring directory */
  1    33     2 temp_dir_sw bit (1) unal,			/* On => temp dir has been created */
  1    34     2 db_quiesced_sw bit (1) unal,			/* On => database has been quiesced */
  1    35     2 o_db_open_sw bit (1) unal,			/* On => old database has been opened */
  1    36     2 n_db_open_sw bit (1) unal,			/* On => temp database is open */
  1    37     2 listing_seg_sw bit (1) unal,			/* On => listing segment has been created */
  1    38     2 skip_scanner_conversion bit (1) unal,		/* Skip conversion in scanner */
  1    39     2 cmdb_option bit (1) unal,			/* ON => this is a cmdb source, not restructuring */
  1    40     2 trace_sw bit (1) unal,				/* On -> trace mode in affect */
  1    41     2 debug_sw bit (1) unal,				/* On = debug mode (NOT IMPLEMENTED) */
  1    42     2 meter_sw bit (1) unal,				/* On = procedures call metering procedure */
  1    43     2 delete_db_sw bit (1) unal,			/* On = delete data base in cleanup */
  1    44     2 model_consistent_sw bit (1) unal,			/* On => Model is consistent */
  1    45     2 physical_started_sw bit (1) unal,			/* On => Physical restructuring started */
  1    46     2 physical_complete_sw bit (1) unal,		/* On => Physical restructuring completed */
  1    47     2 model_overflow bit (1) unal,			/* ON => model segment area condition occurred */
  1    48     2 max_files bit (1) unal,				/* ON => maximum number of files reached */
  1    49     2 allow_foreign_keys bit (1) unal,			/* on => allow foreign key statment */
  1    50     2 foreign_key_seen bit (1) unal,			/* on => foreign key definition in source */
  1    51     2 allow_blocked_files bit (1) unal,			/* on => allow file statement with blocked option */
  1    52     2 blocked_file_seen bit (1) unal,			/* on => blocked file definition in source */
  1    53     2 allow_restructuring bit (1) unal,			/* on => allow RMDB entry point */
  1    54     2 command_level bit (1) unal,			/* on => called from command unal, not subroutine level */
  1    55     2 secure bit (1) unal,				/* on => -secure option given for cmdb */
  1    56     2 max_attrs bit (1) unal,				/* on => max attrs/rel or max indexes/rel exceeded */
  1    57     2 db_relation_mode_flags,
  1    58       3 dm_file_type bit (1) unal,			/* on => relations are dm files */
  1    59       3 protection_on bit (1) unal,			/* on => relations need transactions */
  1    60       3 concurrency_on bit (1) unal,			/* on => concurrency control enabled */
  1    61       3 rollback_on bit (1) unal,			/* on => before journalling is enabled */
  1    62     2 severity_high fixed bin,			/* Highest severity level error encountered */
  1    63     2 phase fixed bin,				/* 000 = init
  1    64*						   100 = global list init
  1    65*						   200 = parse
  1    66*						   300 = physical init
  1    67*						   400 = physical */
  1    68     2 h_o_seg_info_ls_ptr ptr,			/* Pointer to head of old db seg_info list */
  1    69     2 h_n_seg_info_ls_ptr ptr,			/* Pointer to head of new db seg_info list */
  1    70     2 h_gfile_ptr ptr,				/* Pointer to head of global file list */
  1    71     2 h_gdom_ptr ptr,				/* Pointer to head of global domain list */
  1    72     2 h_gattr_ptr ptr,				/* Pointer to head of global attribute list */
  1    73     2 h_grel_ptr ptr,				/* Pointer to head of global relation list */
  1    74     2 h_glink_ptr ptr,				/* Pointer to head of global link list */
  1    75     2 o_dm_ptr ptr,					/* Pointer to old data model seg  (dm_model ) */
  1    76     2 n_dm_ptr ptr,					/* Pointer to temp data model seg */
  1    77     2 o_fn_hdr_ptr ptr,				/* Pointer to head of original file list (fn structure) */
  1    78     2 source_seg_ptr ptr,				/* Pointer to source_seg */
  1    79     2 listing_iocb_ptr ptr,				/* Pointer to listing segment iocb */
  1    80     2 directive_ptr ptr,				/* Pointer to directive type str in mrds_rst_semactics.incl.pl1 */
  1    81     2 stmt_ptr ptr,					/* Pointer to statement str in mrds_rst_sematics.incl.pl1 */
  1    82     2 trace_metering_iocb_ptr ptr,			/* Pointer to seg used by trace and metering */
  1    83     2 tree_node_area_ptr ptr,				/* pointer to working storage for tree nodes */
  1    84     2 tree_data,
  1    85       3 seg_info_area_ptr ptr,			/* seg info working storage area */
  1    86       3 gl_area_ptr ptr,				/* global list data work storage area */
  1    87       3 sl_area_ptr ptr,				/* sublist data work storage area */
  1    88     2 parse_info_area_ptr ptr,			/* parse interface work area storage */
  1    89     2 static_info_area_ptr ptr,			/* directive, stmt and other static work storage area */
  1    90     2 variable_length_area_ptr ptr,			/* varibale allocates work storage area */
  1    91     2 other_area_ptr ptr,				/* unspecified work area storage */
  1    92     2 wa area (sys_info$max_seg_size - fixed (rel (addr (rsc.wa))) + 1); /* Work area */
  1    93 
  1    94 dcl  rsc_ptr ptr;					/* Pointer to base of rsc segment */
  1    95 
  1    96 
  1    97 
  1    98 /* END INCLUDE FILE mrds_rst_rsc.incl.pl1				*/
  1    99 
      172 
      173 
  2     1 /* BEGIN INCLUDE FILE mrds_rst_struct_types.incl.pl1 - - Jim Gray 2/20/79 */
  2     2 
  2     3 /* these constants are used to identify structures to be allocated
  2     4*   to the general purpose allocation routines */
  2     5 
  2     6 /*  HISTORY:
  2     7*    82-06-28 Roger Lackey : Removed struct types 52, 53, 54, 55, 56, 57, 58
  2     8*    Type 25 is no longer used and is handled with special code so bounds of 
  2     9*    array could continue to work */
  2    10 
  2    11 /* PARSE INFO STRUCTURES */
  2    12 
  2    13 declare  DOMAIN fixed bin internal static options (constant) init (1) ;
  2    14 declare  ATTRIBUTE_DOMAIN fixed bin internal static options (constant) init (2) ;
  2    15 declare  RELATION fixed bin internal static options (constant) init (3) ;
  2    16 declare  ATTRIBUTE fixed bin internal static options (constant) init (4) ;
  2    17 declare  FILE fixed bin internal static options (constant) init (5) ;
  2    18 declare  ITEM fixed bin internal static options (constant) init (6) ;
  2    19 declare  LINK fixed bin internal static options (constant) init (7) ;
  2    20 declare  FOREIGN_KEY fixed bin internal static options (constant) init (8) ;
  2    21 declare  CHILDREN fixed bin internal static options (constant) init (9) ;
  2    22 declare  INDEX fixed bin internal static options (constant) init (10) ;
  2    23 declare  DELETE_NAME fixed bin internal static options (constant) init (11) ;
  2    24 declare  DOM_LIST fixed bin internal static options (constant) init (12) ; /* in link handler */
  2    25 
  2    26 /* SEMANTIC STRUCTURES */
  2    27 
  2    28 declare  DIRECTIVE fixed bin internal static options (constant) init (13) ;
  2    29 declare  STMT fixed bin internal static options (constant) init (14) ;
  2    30 
  2    31 
  2    32 /* PARSING STRUCTURES */
  2    33 
  2    34 declare  LEX_STACK fixed bin internal static options (constant) init (15) ;
  2    35 declare  P_STRUCT fixed bin internal static options (constant) init (16) ;
  2    36 declare  CUR_LEX_TOP fixed bin internal static options (constant) init (17) ;
  2    37 declare  FIXUP_TOKEN fixed bin internal static options (constant) init (50) ; /* scanner */
  2    38 declare  STRING_SOURCE fixed bin internal static options (constant) init (51) ; /* semantics */
  2    39 declare  TOKEN fixed bin internal static options (constant) init (18) ;
  2    40 declare  OUTPUT_TEXT fixed bin internal static options (constant) init (19) ;
  2    41 
  2    42 
  2    43 /* DB_MODEL STRUCTURES */
  2    44 
  2    45 declare  DB_MODEL fixed bin internal static options (constant) init (0) ;
  2    46 declare  FILE_INFO fixed bin internal static options (constant) init (1) ;
  2    47 declare  DOMAIN_INFO fixed bin internal static options (constant) init (2) ;
  2    48 declare  PATH_ENTRY fixed bin internal static options (constant) init (3) ;
  2    49 declare  STACK_ITEM fixed bin internal static options (constant) init (4) ;
  2    50 declare  CONSTANT fixed bin internal static options (constant) init (30) ;
  2    51 declare  VERSION_STATUS fixed bin internal static options (constant) init (5) ;
  2    52 declare  CHANGER fixed bin internal static options (constant) init (6) ;
  2    53 
  2    54 
  2    55 /* FILE_MODEL STRUCTURES */
  2    56 
  2    57 declare  FILE_MODEL fixed bin internal static options (constant) init (7) ;
  2    58 declare  REL_INFO fixed bin internal static options (constant) init (8) ;
  2    59 declare  ATTR_INFO fixed bin internal static options (constant) init (9) ;
  2    60 declare  PARENT_LINK_INFO fixed bin internal static options (constant) init (10) ;
  2    61 declare  CHILD_LINK_INFO fixed bin internal static options (constant) init (11) ;
  2    62 declare  ATTR_LIST fixed bin internal static options (constant) init (12) ;
  2    63 declare  ATD fixed bin internal static options (constant) init (31) ;
  2    64 declare  COMP_NO_ARRAY fixed bin internal static options (constant) init (32) ;
  2    65 declare  SORT_KEY fixed bin internal static options (constant) init (13) ;
  2    66 declare  DUP_PREV fixed bin internal static options (constant) init (14) ;
  2    67 declare  SELECT_CHAIN fixed bin internal static options (constant) init (15) ;
  2    68 
  2    69 
  2    70 /* GLOBAL LIST STRUCTURES */
  2    71 
  2    72 declare  GL fixed bin internal static options (constant) init (20) ;
  2    73 declare  SL fixed bin internal static options (constant) init (21) ;
  2    74 declare  SEGINFO fixed bin internal static options (constant) init (22) ;
  2    75 declare  LIST_OVRLY fixed bin internal static options (constant) init (26) ;
  2    76 declare  SAVED_CHILD_COUNT fixed bin internal static options (constant) init (24) ; /* in global list build */
  2    77 declare  NODE fixed bin internal static options (constant) init (23) ;
  2    78 
  2    79 
  2    80 /* DISPLAY STRUCTURES */
  2    81 
  2    82 declare  DISPLAY_INFO fixed bin internal static options (constant) init (25) ;
  2    83 
  2    84 /*   Remove because nolonger used 82-06-28        
  2    85*  NAME_LIST fixed bin internal static options (constant) init (52) ;
  2    86*  PAI_ARRAY fixed bin internal static options (constant) init (53) ;
  2    87*  PAR_LK_ATTR_INFO fixed bin internal static options (constant) init (54) ;
  2    88*  CAI_ARRAY fixed bin internal static options (constant) init (55) ;
  2    89*  CHILD_LK_ATTR_INFO fixed bin internal static options (constant) init (56) ;
  2    90*  NAME_TABLE fixed bin internal static options (constant) init (57) ;
  2    91*  ATTR_TABLE fixed bin internal static options (constant) init (58) ;
  2    92**/
  2    93 
  2    94 /* END INCULDE FILE mrds_rst_struct_types */
  2    95 
      174 
      175 
  3     1 /* BEGIN INCLUDE FILE mrds_rst_global_lists.incl.pl1	jeg	7/17/78	*/
  3     2 
  3     3 /* note: mrds_rst_list_element$add and delete entries
  3     4*   makes use of the following structure type correspondence
  3     5*
  3     6*   structure_type = 1  refers to gl (global list element)
  3     7*
  3     8*   structure_type = 2 refers to sl (global sublist element)
  3     9*
  3    10*   structure_type = 3  refers to seg_info(segment information element)
  3    11*
  3    12**/
  3    13 
  3    14 
  3    15 dcl 1 gl aligned based (gl_ptr),			/* Template for global list entry */
  3    16     2 type fixed bin,				/* structure_type, usefull when overlay used */
  3    17     2 name char (32),				/* Item name */
  3    18     2 item_info_ptr ptr,				/* Pointer to info structure for this item */
  3    19     2 parse_info_ptr ptr,				/* Pointer to info obtained by parsing source */
  3    20     2 other_info_ptr ptr,				/* Pointer to additional info str if needed */
  3    21     2 item_sub_list_ptr ptr,				/* Pointer to sub list of items if neccessary for this his item */
  3    22     2 file_info_ptr ptr,				/* Pointer to file info for this entry */
  3    23     2 file_model_ptr ptr,				/* Pointer to file model for this entry */
  3    24     2 affected bit (1) unal,				/* ON => affected by some directive */
  3    25     2 cmdb bit (1) unal,				/* ON => affected by cmdb directive */
  3    26     2 undefine bit (1) unal,				/* ON => affected by undefine directive */
  3    27     2 define bit (1) unal,				/* ON => affected by define directive */
  3    28     2 redefine bit (1) unal,				/* ON => affected by redefine directive */
  3    29     2 superior_assigned bit (1) unal,			/* ON => has parent */
  3    30     2 inferior_assigned bit (1) unal,			/* ON => child present */
  3    31     2 complete bit (1) unal,				/* ON => all things present */
  3    32     2 consistant bit (1) unal,			/* ON => correct model */
  3    33     2 reserved bit (26) unal,				/* for future use */
  3    34     2 child_defined bit (1) unal ;			/* ON => global element entered by child */
  3    35 
  3    36 dcl  gl_ptr ptr;					/* Pointer to gl structure */
  3    37 
  3    38 
  3    39 
  3    40 dcl 1 sl aligned based (sl_ptr),			/* Template of sub list entry for global list */
  3    41     2 type fixed bin,				/* structure_type, usefull when overlay used */
  3    42     2 name char (32),				/* Name of item */
  3    43     2 item_info_ptr ptr,				/* Pointer to info structure for this entry */
  3    44     2 parse_info_ptr ptr,				/* Pointer to info obtained by parsing source */
  3    45     2 old_other_info_ptr ptr,				/* Pointer to old version of other info */
  3    46     2 new_other_info_ptr ptr,				/* Pointer to new version of other info */
  3    47     2 global_list_ptr ptr,				/* pointer to corresponding global list element */
  3    48     2 reserved bit (36) unal;				/* Reserved for future use */
  3    49 
  3    50 dcl  sl_ptr ptr;					/* Pointer to sub list structure */
  3    51 
  3    52 
  3    53 dcl 1 seg_info based (seg_info_ptr),			/* Info about segment initiated */
  3    54     2 name char (32),				/* Segment name */
  3    55     2 dir char (168),				/* Absolute path of containing directory */
  3    56     2 seg_ptr ptr,					/* Pointer to base of segment */
  3    57     2 bcnt fixed bin (24);				/* Bit count of segment */
  3    58 
  3    59 dcl  seg_info_ptr ptr;				/* Pointer to seg_info str */
  3    60 
  3    61 
  3    62 
  3    63 dcl  MAIN_LIST fixed bin internal static options (constant) init (1);
  3    64 dcl  SUB_LIST fixed bin internal static options (constant) init (2);
  3    65 dcl  SEG_INFO fixed bin internal static options (constant) init (3);
  3    66 
  3    67 declare 1 list_ovrly aligned based (list_ovrly_ptr),	/* overlay for top part of gl and sl list elements */
  3    68         2 type fixed bin,				/* structure_type, 1 => gl, 2 => sl */
  3    69         2 name char (32),				/* Name of item */
  3    70         2 item_info_ptr ptr,				/* pointer to info structure for this entry */
  3    71         2 parse_info_ptr ptr,				/* pointer to info obtained by parsing source */
  3    72         2 other_info_ptr ptr ;			/* pointer to additional info structure if needed */
  3    73 
  3    74 declare  list_ovrly_ptr ptr ;				/* pointer to overlay structure */
  3    75 
  3    76 
  3    77 declare  saved_child_count fixed bin based (saved_child_count_ptr) ; /* parent link structure child count */
  3    78 declare  saved_child_count_ptr ptr ;			/* pointer to remembered number of children */
  3    79 
  3    80 
  3    81 /* USES AND MEANING OF LIST ELEMENT ENTRIES
  3    82*
  3    83*   DOMAIN GLOBAL LIST --------------------------
  3    84*
  3    85*   gl.type - - MAIN_LIST
  3    86*   gl.name - - 32 char domain name
  3    87*   gl.item_info_ptr - - pointer to domain_info for this domain
  3    88*   gl.parse_info_ptr - - pointer to parse info structure
  3    89*   gl.other_info_ptr - - dbm_ptr, pointer to mdbm_db_model
  3    90*   gl.item_sub_list_ptr - - pointer to sublist of attributes using this domain
  3    91*   gl.file_info_ptr - - null ()
  3    92*   gl.file_model_ptr - - null ()
  3    93*   gl.superior_assigned - - ON => domain referenced by some relation
  3    94*   gl.inferior_assigned - - ON => referencing attribute present
  3    95*   gl.complete - - ON => domain_info present
  3    96*   gl.consistant - - always ON
  3    97*
  3    98*   DOMAIN GLOBAL LIST "REFERENCING ATTRIBUTES" SUBLIST ----------------
  3    99*
  3   100*   sl.type - - SUB_LIST
  3   101*   sl.name - - 32 char attribute name
  3   102*   sl.item_info_ptr - - pointer to this attribute's attribute_info
  3   103*   sl.parse_info_ptr - - pointer to parse info structure
  3   104*   sl.old_other_info_ptr - - null ()
  3   105*   sl.new_other_info_ptr - - pointer to this domain's global list element
  3   106*   sl.global_list_ptr - - pointer to attribute's global list element
  3   107*
  3   108*   ATTRIBUTE GLOBAL LIST -----------------
  3   109*
  3   110*   gl.type - - MAIN_LIST
  3   111*   gl.name - - 32 char attribute name
  3   112*   gl.item_info_ptr - - pointer to corresponding domain sublist element for this attribute
  3   113*   gl.parse_info_ptr - - pointer to parse info structure
  3   114*   gl.other_info_ptr - - domain_info of domain for this attribute
  3   115*   gl.item_sub_list_ptr - - pointer to sublist of relations that use this attribute
  3   116*   gl.file_info_ptr - - null (), use pointer(fm_ptr,file_model.fi_ptr)
  3   117*   gl.file_model_ptr - - null (), use pointer(ai_ptr,0), ai_ptr from corres. rel's attr sublist
  3   118*   gl.superior_assigned - - ON => relation contains this attribute
  3   119*   gl.inferior_assigned - - ON => attribute references known domain
  3   120*   gl.complete - - ON => attr_info present for this attribute
  3   121*   gl.consistant - - OFF => no domain for this attribute
  3   122*
  3   123*   ATTRIBUTE GLOBAL LIST "USED IN RELATION" SUBLIST ------------------
  3   124*
  3   125*   sl.type - - SUB_LIST
  3   126*   sl.name - - 32 char relation name
  3   127*   sl.item_info_ptr - - pointer to this relation's rel_info
  3   128*   sl.parse_info_ptr - - pointer to parse info structure
  3   129*   sl.old_other_info_ptr - - pointer to attribute's attr_info in this relation
  3   130*   sl.new_other_info_ptr - - pointer to this attribute's global list element
  3   131*   sl.global_list_ptr - - pointer to relation's global list element
  3   132*
  3   133*   RELATION GLOBAL LIST -------------------
  3   134*
  3   135*   gl.type - - MAIN_LIST
  3   136*   gl.name - - 32 char relation name
  3   137*   gl.item_info_ptr - - pointer to rel_info for this relation
  3   138*   gl.parse_info_ptr - - pointer to parse info structure
  3   139*   gl.other_info_ptr - - pointer to global list element of file containing this relation
  3   140*   gl.item_sub_list_ptr - - pointer to sublist of attributes in this relation
  3   141*   gl.file_info_ptr - - pointer to file_info of this relation's file
  3   142*   gl.file_model_ptr - - pointer to file_model of this relation's file
  3   143*   gl.superior_assigned - - ON => file present to hold this relation
  3   144*   gl.inferior_assigned - - ON => attribute's present in this relation
  3   145*   gl.complete - - ON => rel_info assigned to this relation
  3   146*   gl.consistant - - OFF => no attributes for this relation
  3   147*
  3   148*   RELATION GLOBAL LIST "CONTAINED ATTRIBUTE" SUBLIST ----------------
  3   149*
  3   150*   sl.type - - SUB_LIST
  3   151*   sl.name - - 32 char attribute name
  3   152*   sl.item_info_ptr - - pointer to this attribute's attribute_info
  3   153*   sl.parse_info_ptr - - pointer to parse info structure
  3   154*   sl.old_other_info_ptr - - pointer to domain_info for this attribute in old model
  3   155*   sl.new_other_info_ptr - - pointer to domain_info for this attribute in new model
  3   156*   sl.global_list_ptr - - pointer to attribute's global list element
  3   157*
  3   158*   FILE GLOBAL LIST -----------------------
  3   159*
  3   160*   gl.type - - MAIN_LIST
  3   161*   gl.name - - 30 char file name plus 2 trailing blanks
  3   162*   gl.item_info_ptr - - pointer to file_info for this file
  3   163*   gl.parse_info_ptr - - pointer to parse info structure
  3   164*   gl.other_info_ptr - - null ()
  3   165*   gl.item_sub_list_ptr - - pointer to sublist of relations contained in this file
  3   166*   gl.file_info_ptr - - pointer to file_info for this file
  3   167*   gl.file_model_ptr - - pointer to file_model for this file
  3   168*   gl.superior_assigned - - ON => file_model present for this file
  3   169*   gl.inferior_assigned - - ON => relation present for this file
  3   170*   gl.complete - - OFF => not formatted yet
  3   171*   gl.consistant - - ON => no relations present
  3   172*
  3   173*   FILE GLOBAL LIST "CONTAINED RELATION" SUBLIST ----------------
  3   174*
  3   175*   sl.type - - SUB_LIST
  3   176*   sl.name - - 32 char relation name
  3   177*   sl.item_info_ptr - - relation's rel_info pointer
  3   178*   sl.parse_info_ptr - - pointer to parse info structure
  3   179*   sl.old_other_info_ptr - - null ()
  3   180*   sl.new_other_info_ptr - - pointer to file global list element
  3   181*   sl.global_list_ptr - - pointer to relation's global list element
  3   182*
  3   183*   FOREIGN KEY GLOBAL LIST --------------------
  3   184*
  3   185*   gl.type - - MAIN_LIST
  3   186*   gl.name - - 32 char link(foreign key) name, parent_link_info.name
  3   187*   gl.item_info_ptr - - pointer to parent_link_info for this foreign key
  3   188*   gl.parse_info_ptr - - pointer to parse info structure
  3   189*   gl.other_info_ptr - - pointer to parent relation global list element
  3   190*   gl.item_sub_list_ptr - - pointer to sublist of child relations for this parent
  3   191*   gl.file_info_ptr - - pointer to file_info for parent relation's file
  3   192*   gl.file_model_ptr - - pointer to file_model for parent relation's file
  3   193*   gl.superior_assigned - - ON => parent present
  3   194*   gl.inferior_assigned - - ON => child present
  3   195*   gl.complete - - ON => pli_info and cli_info present
  3   196*   gl.consistant - - ON => rels/attrs found and corres domains match
  3   197*   gl.child_defined - - ON => not defined by parent, but by one of it's children
  3   198*
  3   199*   FOREIGN KEY GLOBAL LIST CHILDREN SUBLIST
  3   200*
  3   201*   sl.type - - SUB_LIST
  3   202*   sl.name - - 32 char name of relation representing this child
  3   203*   sl.item_info_ptr - - pointer to child_link_info for this child
  3   204*   sl.parse_info_ptr - - pointer to parse info structure
  3   205*   sl.old_other_info_ptr - - pointer to file_model holding this child relation
  3   206*   sl.new_other_info_ptr - - pointer to rel_info for this child
  3   207*   sl.global_list_ptr - - pointer to child relation global list element
  3   208*
  3   209*   NOTE: all pointers are to the new model unless otherwise indicated
  3   210*
  3   211**/
  3   212 
  3   213 /* END INCLUDE FILE mrds_rst_global_lists.incl.pl1	*/
  3   214 
      176 
      177 
  4     1 /* BEGIN INCLUDE FILE mrds_rst_tree.incl.pl1   jeg 7/19/78 */
  4     2 
  4     3 /* common declarations for threaded binary tree routines
  4     4*
  4     5*   The tree maintains an inorder list of it's keys.
  4     6*   this means that for a given node, any key in it's left subtree
  4     7*   is "less" than the given node's key and that any key in it's
  4     8*   right subtree is "greater" than the given node's key.
  4     9*
  4    10*   Threads are maintained to allow fast and easy traversal of the tree.
  4    11*   threads occupy the position of null pointers of an straight binary tree,
  4    12*   thus they only occur in leaf nodes.
  4    13*   left threads point to that nodes inorder predecessor.
  4    14*   right threads point to that nodes inorder successor.
  4    15*
  4    16*   note: root_ptr must be passed by reference
  4    17*   ( not by value ) so it can be changed .
  4    18*   Also, each parameter must be a different
  4    19*   variable. The same variable used for two
  4    20*   or more arguments when any of the tree
  4    21*   routines are called will produce errors */
  4    22 
  4    23 
  4    24 declare  key char (32) aligned ;			/* data key directing search */
  4    25 
  4    26 declare  root_ptr ptr ;				/* pointer to head of desired list */
  4    27 declare  node_ptr ptr ;				/* pointer to key node, when success */
  4    28 declare  parent_ptr ptr ;				/* pointer to direct parent of current node */
  4    29 declare  data_ptr ptr ;				/* pointer from tree node to data structure headed by node */
  4    30 declare  successor_ptr ptr ;				/* pointer to inorder successor of current node in tree */
  4    31 declare  successor_parent_ptr ptr ;			/* pointer to immediate tree parent of inorder successor node */
  4    32 declare  predecessor_ptr ptr ;			/* pointer to inorder predecessor of current node */
  4    33 declare  predecessor_parent_ptr ptr ;			/* pointer to direct parent of predecessor */
  4    34 declare  area_ptr ptr ;				/* pointer to based area for node allocation/freeing */
  4    35 
  4    36 declare  work_area area based (area_ptr) ;		/* area of storage for tree */
  4    37 
  4    38 declare  success bit (1) ;				/* on if operation successful */
  4    39 declare  thread bit (1) aligned ;			/* current thread indicator, on = thread, off = pointer */
  4    40 
  4    41 declare 1 node based (node_ptr) aligned,		/* tree element */
  4    42         2 data ptr,					/* data field link */
  4    43         2 key char (32),				/* data key */
  4    44         2 right,					/* right branch link */
  4    45 	3 thread bit (1),				/* indicates whether link is thread or pointer */
  4    46 	3 link ptr,				/* pointer to right descendent or thread to successor */
  4    47         2 left,					/* left branch link */
  4    48 	3 thread bit (1),				/* indicates whether link is thread or pointer */
  4    49 	3 link ptr,				/* pointer to left descendent or thread to predecessor */
  4    50         2 pad bit (34) ;				/* reserved for future flags */
  4    51 
  4    52 /* END INCLUDE FILE mrds_rst_tree.incl.pl1  */
  4    53 
  4    54 
  4    55 
  4    56 
      178 
      179 
  5     1 /* BEGIN INCLUDE FILE mrds_rst_parse_info.incl.pl1 -- oris, 6/30/78 */
  5     2 /* modified 9/6/78 -- jeg, for lrk parser - cmdb interface */
  5     3 /* modified 12/20/78 - - jeg, to add line number info for handlers */
  5     4 /* modified 3/15/79 - - jeg, to add scanner, semantic, and link handler variables to be allocated in rsc */
  5     5 /* Modified by Jim Gray - - 23-June-80, to separate max_string_size,
  5     6*   and max_line_size mrds_data_ items. */
  5     7 
  5     8 
  5     9 
  5    10 
  5    11 declare 1 domain aligned based (domain_ptr),
  5    12         2 name char (32),				/* name of this domain */
  5    13         2 descriptor bit (36),			/* Multics pl1 descriptor for domain type */
  5    14         2 varying_avg_length fixed bin (24),		/* average length of varying strings */
  5    15         2 options bit (1) unal,			/* ON => some option is present */
  5    16         2 pad bit (35) unal,
  5    17         2 check,
  5    18 	3 flag bit (1) unal,			/* ON => check option present */
  5    19 	3 pad bit (35) unal,
  5    20 	3 stack_ptr ptr,				/* pointer to postfix stack
  5    21*						   holding boolean expression */
  5    22 	3 stack_size fixed binary,			/* number of stack elements */
  5    23         2 check_proc,
  5    24 	3 flag bit (1) unal,			/* ON => check_proc option is present */
  5    25 	3 pad bit (35) unal,
  5    26 	3 path char (168),				/* check procedure pathname */
  5    27 	3 entry char (32),				/* check procedure entryname */
  5    28         2 encode_proc,
  5    29 	3 flag bit (1) unal,			/* ON => encode_proc option is present */
  5    30 	3 pad bit (35) unal,
  5    31 	3 path char (168),				/* encode procedure pathname */
  5    32 	3 entry char (32),				/* encode procedure entryname */
  5    33         2 decode_proc,
  5    34 	3 flag bit (1) unal,			/* ON => decode_proc option is present */
  5    35 	3 pad bit (35) unal,
  5    36 	3 path char (168),				/* decode procedure pathname */
  5    37 	3 entry char (32),				/* decode procedure entryname */
  5    38         2 decode_dcl,
  5    39 	3 flag bit (1) unal,			/* ON => decode declaration is present */
  5    40 	3 pad bit (35) unal,
  5    41 	3 descriptor bit (36),			/* decode declaration pl1 descriptor */
  5    42         2 line_num fixed bin (24) ;			/* line of domain name in source */
  5    43 
  5    44 
  5    45 declare  domain_ptr ptr ;
  5    46 
  5    47 
  5    48 
  5    49 
  5    50 
  5    51 dcl 1 relation aligned based (relation_ptr),
  5    52     2 a_ptr ptr,					/* ptr to attribute list for this relation */
  5    53     2 name char (32),				/* relation name */
  5    54     2 max_tup fixed bin,				/* maximum tuples for this relation if a blocked file */
  5    55     2 num_items fixed bin,				/* number of attributes in this relation */
  5    56     2 unused bit (36) unal,				/* future flags */
  5    57     2 line_num fixed bin (24) ;			/* line of relation name in source */
  5    58 
  5    59 
  5    60 dcl  relation_ptr ptr;
  5    61 
  5    62 
  5    63 dcl 1 attribute aligned based (attribute_ptr),
  5    64     2 next ptr,					/* ptr to next in list */
  5    65     2 name char (32),				/* name of attribute */
  5    66     2 pr_key bit (1) unal,				/* ON => part of primary key */
  5    67     2 pad bit (35) unal,
  5    68     2 defn_order fixed bin,				/* position within the relation */
  5    69     2 key_order fixed bin,				/* position within the primary key, if a key */
  5    70     2 line_num fixed bin (24) ;			/* line of attribute name in source */
  5    71 
  5    72 
  5    73 dcl  attribute_ptr ptr;
  5    74 
  5    75 
  5    76 
  5    77 dcl 1 attribute_domain aligned based (attdom_ptr),
  5    78     2 attr char (32),				/* attribute name */
  5    79     2 dom char (32),				/* domain name */
  5    80     2 default bit (1) unal,				/* on => defined as default attr, not by source */
  5    81     2 unused bit (35) unal,				/* future flags */
  5    82     2 line_num fixed bin (24) ;			/* line of attribute name in source */
  5    83 
  5    84 dcl  attdom_ptr ptr;				/* ptr to attribute_domain structure */
  5    85 
  5    86 
  5    87 
  5    88 
  5    89 dcl 1 file aligned based (file_ptr),
  5    90     2 i_ptr ptr,					/* ptr to item containing relation name */
  5    91     2 name char (30),				/* file name */
  5    92     2 type fixed bin,				/* blocked or unblocked */
  5    93 						/* type = 1 => unblocked,
  5    94*						   type = 2 => blocked */
  5    95     2 ppb fixed bin,				/* pages per block, if blocked */
  5    96     2 hbh fixed bin,				/* hash bucket headers per block */
  5    97     2 block fixed bin,				/* blocks per hash bucket headers */
  5    98     2 num_items fixed bin,				/* nbr. items -- relations -- in file */
  5    99     2 default bit (1) unal,				/* on => defined as default file, not by source */
  5   100     2 unused bit (35) unal,				/* future flags */
  5   101     2 line_num fixed bin (24) ;			/* line of file name in source */
  5   102 
  5   103 
  5   104 dcl  file_ptr ptr;					/* ptr to file structure */
  5   105 
  5   106 
  5   107 dcl 1 rel_index aligned based (index_ptr),
  5   108     2 i_ptr ptr,					/* ptr. to item containing index attr. name */
  5   109     2 rel_name char (32),				/* name of relation being indexed */
  5   110     2 num_items fixed bin,				/* nbr. items -- attributes -- indexed for a relation */
  5   111     2 unused bit (36) unal,				/* future flags */
  5   112     2 line_num fixed bin (24) ;			/* line of relation name in source */
  5   113 
  5   114 
  5   115 dcl  index_ptr ptr;					/* ptr to index structure */
  5   116 
  5   117 
  5   118 dcl 1 link aligned based (link_ptr),
  5   119     2 parent_ptr ptr,				/* ptr to foreign_key structure cont. parent rel. name */
  5   120     2 children_ptr ptr,				/* ptr. to list of children names for this link */
  5   121     2 clust_fl bit (1) unal,				/* ON => link is clustered in one file */
  5   122     2 pad bit (35) unal,
  5   123     2 name char (32),				/* name of this link */
  5   124     2 num_children fixed bin,				/* number of children for this link's parent */
  5   125     2 line_num fixed bin (24) ;			/* line of link name occurence in source */
  5   126 
  5   127 
  5   128 dcl  link_ptr ptr;					/* ptr to link structure */
  5   129 
  5   130 
  5   131 dcl 1 children aligned based (children_ptr),
  5   132     2 next ptr,					/* ptr to next in list */
  5   133     2 child_ptr ptr;				/* ptr. to foreign_key struct. containing child rel. name */
  5   134 
  5   135 
  5   136 dcl  children_ptr ptr;				/* ptr to children structure */
  5   137 
  5   138 
  5   139 dcl 1 foreign_key aligned based (forkey_ptr),
  5   140     2 i_ptr ptr,					/* ptr to item list containing foreign key attributes */
  5   141     2 rel_name char (32),				/* name of parent/child relation */
  5   142     2 num_items fixed bin,				/* nbr of attributes defining this foreign key */
  5   143     2 unused bit (36) unal,				/* future flags */
  5   144     2 line_num fixed bin (24) ;			/* line of relation occurence in source */
  5   145 
  5   146 
  5   147 dcl  forkey_ptr ptr;				/* ptr to foreign_key structure */
  5   148 
  5   149 
  5   150 dcl 1 item aligned based (item_ptr),
  5   151     2 next ptr,					/* ptr to next item in the list */
  5   152     2 name char (32),				/* name of item -- relation name or attribute name */
  5   153     2 unused bit (36) unal,				/* future flags */
  5   154     2 line_num fixed bin (24) ;			/* line of item occurence in source */
  5   155 
  5   156 
  5   157 dcl  item_ptr ptr;					/* ptr to item structure */
  5   158 
  5   159 
  5   160 declare 1 delete_name aligned based (delete_name_ptr),	/* overlay for  undefine parse information */
  5   161         2 overlay char (32),				/* name portion */
  5   162         2 unused bit (36) unal,			/* future flags */
  5   163         2 line_num fixed bin (24) ;			/* line number of name occurence in source */
  5   164 
  5   165 declare  delete_name_ptr ptr ;
  5   166 
  5   167 /* scanner variables */
  5   168 
  5   169 declare  token char (mrds_data_$max_string_size) varying
  5   170          based (accum_token_ptr) ;			/* temp store for accumulating the token */
  5   171 declare  accum_token_ptr ptr internal static ;		/* pointer to allocated accumulator store */
  5   172 declare  mrds_data_$max_string_size fixed bin (35) external ; /* max token  size in chars */
  5   173 declare  mrds_data_$max_line_size fixed bin (35) ext ;	/* max output listing line size */
  5   174 declare  token_length fixed binary (24) ;		/* current length of token */
  5   175 declare  output_text char (mrds_data_$max_line_size) varying
  5   176          based (output_text_ptr) ;			/* body of text for this line in output listing */
  5   177 declare  output_text_ptr ptr internal static ;		/* pointer to allocated output line storage */
  5   178 declare  fixup_token char (token_length) based ;		/* saved fixed up version of token */
  5   179 
  5   180 /* semantic variables */
  5   181 
  5   182 declare  source_size fixed bin (35) ;			/* length of source char string for any_to_any */
  5   183 declare  string_source_ptr ptr ;			/* pointer to source for any_to_any conversion */
  5   184 declare  string_source char (source_size) based (string_source_ptr) ; /* storage for expanded string constant */
  5   185 
  5   186 /* link handler variable */
  5   187 
  5   188 declare  dom_list_ptr ptr ;				/* pointer to domain list element */
  5   189 declare 1 dom_list based (dom_list_ptr),		/* element of parent attr domain ptr list */
  5   190         2 next ptr,					/* pointer to next in order on list */
  5   191         2 attr_name char (32) aligned,			/* parent attr's name */
  5   192         2 dom_info_ptr ptr ;				/* parent attr's domain ptr */
  5   193 
  5   194 /* END INCLUDE FILE mrds_rst_parse_info.incl.pl1 */
  5   195 
      180 
      181 
  6     1 /* BEGIN INCLUDE FILE mrds_rst_semantics.incl.pl1 jeg 8/31/78 */
  6     2 
  6     3 /* structure to remember what directives have been seen and are active */
  6     4 
  6     5 declare 1 directive based (directive_ptr),
  6     6         2 type fixed binary,				/* stmt structure index for given directive */
  6     7         2 undefine,
  6     8 	3 active bit (1) unal,
  6     9 	3 seen bit (1) unal,
  6    10 	3 pad bit (34) unal,
  6    11         2 define,
  6    12 	3 active bit (1) unal,
  6    13 	3 seen bit (1) unal,
  6    14 	3 pad bit (34) unal,
  6    15         2 redefine,
  6    16 	3 active bit (1) unal,
  6    17 	3 seen bit (1) unal,
  6    18 	3 pad bit (34) unal,
  6    19         2 cmdb,
  6    20 	3 active bit (1) unal,
  6    21 	3 seen bit (1) unal,
  6    22 	3 pad bit (34) unal ;
  6    23 
  6    24 declare  directive_ptr ptr internal static ;
  6    25 
  6    26 /* encoding for directive types */
  6    27 
  6    28 declare  UNDEFINE fixed bin internal static options (constant) init (1) ;
  6    29 declare  DEFINE fixed bin internal static options (constant) init (2) ;
  6    30 declare  REDEFINE fixed bin internal static options (constant) init (3) ;
  6    31 declare  CMDB fixed binary internal static options (constant) init (4) ;
  6    32 
  6    33 
  6    34 /* structure to remember what statements have been seen, are active,
  6    35*   and how many items are in the statement, and how big the list for the last item was */
  6    36 
  6    37 declare 1 stmt (4) based (stmt_ptr),
  6    38         2 domain,
  6    39 	3 active bit (1) unal,
  6    40 	3 pad bit (35) unal,
  6    41 	3 number fixed binary,
  6    42         2 attribute,
  6    43 	3 active bit (1) unal,
  6    44 	3 pad bit (35) unal,
  6    45 	3 number fixed binary,
  6    46         2 relation,
  6    47 	3 active bit (1) unal,
  6    48 	3 pad bit (35) unal,
  6    49 	3 number fixed binary,
  6    50         2 file,
  6    51 	3 active bit (1) unal,
  6    52 	3 pad bit (35) unal,
  6    53 	3 number fixed binary,
  6    54         2 foreign_key,
  6    55 	3 active bit (1) unal,
  6    56 	3 pad bit (35) unal,
  6    57 	3 number fixed binary,
  6    58         2 index,
  6    59 	3 active bit (1) unal,
  6    60 	3 pad bit (35) unal,
  6    61 	3 number fixed binary ;
  6    62 
  6    63 /* NOTE:
  6    64*   active ON => this stmt/directive is currently being processed
  6    65*   seen ON => this stmt/directive was or is being processed
  6    66**/
  6    67 
  6    68 declare  stmt_ptr ptr internal static ;
  6    69 
  6    70 /* END INCLUDE FILE mrds_rst_semantics.incl.pl1 */
  6    71 
      182 
      183 
      184      end;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    04/18/85  0909.1  mrds_rst_file_cleanup.pl1         >special_ldd>online>mrds.pbf-04/18/85>mrds_rst_file_cleanup.pl1
172          1    10/14/83  1609.1  mrds_rst_rsc.incl.pl1             >ldd>include>mrds_rst_rsc.incl.pl1
174          2    10/14/83  1609.0  mrds_rst_struct_types.incl.pl1    >ldd>include>mrds_rst_struct_types.incl.pl1
176          3    10/14/83  1608.4  mrds_rst_global_lists.incl.pl1    >ldd>include>mrds_rst_global_lists.incl.pl1
178          4    10/14/83  1608.6  mrds_rst_tree.incl.pl1            >ldd>include>mrds_rst_tree.incl.pl1
180          5    10/14/83  1608.6  mrds_rst_parse_info.incl.pl1      >ldd>include>mrds_rst_parse_info.incl.pl1
182          6    10/14/83  1608.4  mrds_rst_semantics.incl.pl1       >ldd>include>mrds_rst_semantics.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
DEFINE                                 constant        fixed bin(17,0)          initial dcl 6-29 ref 62
FILE                            000001 constant        fixed bin(17,0)          initial dcl 2-17 set ref 114*
ITEM                            000000 constant        fixed bin(17,0)          initial dcl 2-18 set ref 127*
REDEFINE                               constant        fixed bin(17,0)          initial dcl 6-30 ref 64 76
block                    15            based           fixed bin(17,0)          level 2 dcl 5-89 set ref 119*
data                                   based           pointer                  level 2 dcl 4-41 ref 105
default                  17            based           bit(1)                   level 2 packed unaligned dcl 5-89 set ref 121*
directive                              based           structure                level 1 unaligned dcl 6-5
directive_mesg                  000132 automatic       char(8)                  unaligned dcl 163 set ref 62* 64* 66* 67* 151*
directive_ptr           242            based           pointer                  level 2 in structure "rsc" dcl 1-29 in procedure
                                                                                  "mrds_rst_file_cleanup" ref 55
directive_ptr                   000010 internal static pointer                  dcl 6-24 in procedure "mrds_rst_file_cleanup" set
                                                                                  ref 55* 62 64 76
file                                   based           structure                level 1 dcl 5-89
file_ptr                        000150 automatic       pointer                  dcl 5-104 set ref 114* 115 116 117 118 119 120 121
                                                                                  122 123 128 137*
gl                                     based           structure                level 1 dcl 3-15
gl_ptr                          000134 automatic       pointer                  dcl 3-36 set ref 105* 107 115 129
h_grel_ptr              224            based           pointer                  level 2 dcl 1-29 ref 90
hbh                      14            based           fixed bin(17,0)          level 2 dcl 5-89 set ref 118*
i_ptr                                  based           pointer                  level 2 dcl 5-89 set ref 128*
ioa_$rs                         000012 constant        entry                    external dcl 155 ref 77
item                                   based           structure                level 1 dcl 5-150
item_ptr                        000152 automatic       pointer                  dcl 5-157 set ref 127* 128 129 130 131 132
line_num                 20            based           fixed bin(24,0)          level 2 in structure "file" dcl 5-89 in procedure
                                                                                  "mrds_rst_file_cleanup" set ref 123*
line_num                 13            based           fixed bin(24,0)          level 2 in structure "item" dcl 5-150 in procedure
                                                                                  "mrds_rst_file_cleanup" set ref 132*
message                         000100 automatic       varying char(96)         dcl 159 set ref 77* 81
message_length                  000131 automatic       fixed bin(21,0)          dcl 160 set ref 77*
mrds_error_$rst_undone_option   000020 external static fixed bin(35,0)          dcl 161 set ref 81*
mrds_rst_error                  000016 constant        entry                    external dcl 157 ref 81
mrds_rst_file_handler           000024 constant        entry                    external dcl 166 ref 137
mrds_rst_meter                  000026 constant        entry                    external dcl 167 ref 67 151
mrds_rst_rsc_alloc              000014 constant        entry                    external dcl 156 ref 114 127
mrds_rst_tree_successor         000022 constant        entry                    external dcl 164 ref 96
name                      1            based           char(32)                 level 2 in structure "gl" dcl 3-15 in procedure
                                                                                  "mrds_rst_file_cleanup" ref 115 129
name                      2            based           char(32)                 level 2 in structure "item" dcl 5-150 in procedure
                                                                                  "mrds_rst_file_cleanup" set ref 129*
name                      2            based           char(30)                 level 2 in structure "file" dcl 5-89 in procedure
                                                                                  "mrds_rst_file_cleanup" set ref 115*
next                                   based           pointer                  level 2 dcl 5-150 set ref 130*
node                                   based           structure                level 1 dcl 4-41
node_ptr                        000140 automatic       pointer                  dcl 4-27 set ref 91* 96* 104* 105
null                                                   builtin function         dcl 170 ref 130
num_items                16            based           fixed bin(17,0)          level 2 dcl 5-89 set ref 120*
ppb                      13            based           fixed bin(17,0)          level 2 dcl 5-89 set ref 117*
root_ptr                        000136 automatic       pointer                  dcl 4-26 set ref 90* 91 96*
rsc                                    based           structure                level 1 unaligned dcl 1-29
rsc_ptr                                parameter       pointer                  dcl 1-94 set ref 18 55 59 67* 81* 90 114* 127* 137*
                                                                                  149 151*
rtrim                                                  builtin function         dcl 170 ref 115
success                         000146 automatic       bit(1)                   unaligned dcl 4-38 set ref 92* 94 96* 100
successor_parent_ptr            000144 automatic       pointer                  dcl 4-31 set ref 96*
successor_ptr                   000142 automatic       pointer                  dcl 4-30 set ref 96* 104
superior_assigned        26(05)        based           bit(1)                   level 2 packed unaligned dcl 3-15 ref 107
trace_sw                206(07)        based           bit(1)                   level 2 packed unaligned dcl 1-29 ref 59 149
type                                   based           fixed bin(17,0)          level 2 in structure "directive" dcl 6-5
                                                                                  in procedure "mrds_rst_file_cleanup" ref 62 64 76
type                     12            based           fixed bin(17,0)          level 2 in structure "file" dcl 5-89 in procedure
                                                                                  "mrds_rst_file_cleanup" set ref 116*
unused                   12            based           bit(36)                  level 2 in structure "item" packed unaligned
                                                                                  dcl 5-150 in procedure "mrds_rst_file_cleanup" set
                                                                                  ref 131*
unused                   17(01)        based           bit(35)                  level 2 in structure "file" packed unaligned
                                                                                  dcl 5-89 in procedure "mrds_rst_file_cleanup" set
                                                                                  ref 122*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
ATD                                    internal static fixed bin(17,0)          initial dcl 2-63
ATTRIBUTE                              internal static fixed bin(17,0)          initial dcl 2-16
ATTRIBUTE_DOMAIN                       internal static fixed bin(17,0)          initial dcl 2-14
ATTR_INFO                              internal static fixed bin(17,0)          initial dcl 2-59
ATTR_LIST                              internal static fixed bin(17,0)          initial dcl 2-62
CHANGER                                internal static fixed bin(17,0)          initial dcl 2-52
CHILDREN                               internal static fixed bin(17,0)          initial dcl 2-21
CHILD_LINK_INFO                        internal static fixed bin(17,0)          initial dcl 2-61
CMDB                                   internal static fixed bin(17,0)          initial dcl 6-31
COMP_NO_ARRAY                          internal static fixed bin(17,0)          initial dcl 2-64
CONSTANT                               internal static fixed bin(17,0)          initial dcl 2-50
CUR_LEX_TOP                            internal static fixed bin(17,0)          initial dcl 2-36
DB_MODEL                               internal static fixed bin(17,0)          initial dcl 2-45
DELETE_NAME                            internal static fixed bin(17,0)          initial dcl 2-23
DIRECTIVE                              internal static fixed bin(17,0)          initial dcl 2-28
DISPLAY_INFO                           internal static fixed bin(17,0)          initial dcl 2-82
DOMAIN                                 internal static fixed bin(17,0)          initial dcl 2-13
DOMAIN_INFO                            internal static fixed bin(17,0)          initial dcl 2-47
DOM_LIST                               internal static fixed bin(17,0)          initial dcl 2-24
DUP_PREV                               internal static fixed bin(17,0)          initial dcl 2-66
FILE_INFO                              internal static fixed bin(17,0)          initial dcl 2-46
FILE_MODEL                             internal static fixed bin(17,0)          initial dcl 2-57
FIXUP_TOKEN                            internal static fixed bin(17,0)          initial dcl 2-37
FOREIGN_KEY                            internal static fixed bin(17,0)          initial dcl 2-20
GL                                     internal static fixed bin(17,0)          initial dcl 2-72
INDEX                                  internal static fixed bin(17,0)          initial dcl 2-22
LEX_STACK                              internal static fixed bin(17,0)          initial dcl 2-34
LINK                                   internal static fixed bin(17,0)          initial dcl 2-19
LIST_OVRLY                             internal static fixed bin(17,0)          initial dcl 2-75
MAIN_LIST                              internal static fixed bin(17,0)          initial dcl 3-63
NODE                                   internal static fixed bin(17,0)          initial dcl 2-77
OUTPUT_TEXT                            internal static fixed bin(17,0)          initial dcl 2-40
PARENT_LINK_INFO                       internal static fixed bin(17,0)          initial dcl 2-60
PATH_ENTRY                             internal static fixed bin(17,0)          initial dcl 2-48
P_STRUCT                               internal static fixed bin(17,0)          initial dcl 2-35
RELATION                               internal static fixed bin(17,0)          initial dcl 2-15
REL_INFO                               internal static fixed bin(17,0)          initial dcl 2-58
SAVED_CHILD_COUNT                      internal static fixed bin(17,0)          initial dcl 2-76
SEGINFO                                internal static fixed bin(17,0)          initial dcl 2-74
SEG_INFO                               internal static fixed bin(17,0)          initial dcl 3-65
SELECT_CHAIN                           internal static fixed bin(17,0)          initial dcl 2-67
SL                                     internal static fixed bin(17,0)          initial dcl 2-73
SORT_KEY                               internal static fixed bin(17,0)          initial dcl 2-65
STACK_ITEM                             internal static fixed bin(17,0)          initial dcl 2-49
STMT                                   internal static fixed bin(17,0)          initial dcl 2-29
STRING_SOURCE                          internal static fixed bin(17,0)          initial dcl 2-38
SUB_LIST                               internal static fixed bin(17,0)          initial dcl 3-64
TOKEN                                  internal static fixed bin(17,0)          initial dcl 2-39
UNDEFINE                               internal static fixed bin(17,0)          initial dcl 6-28
VERSION_STATUS                         internal static fixed bin(17,0)          initial dcl 2-51
accum_token_ptr                        internal static pointer                  dcl 5-171
addr                                                   builtin function         dcl 170
area_ptr                               automatic       pointer                  dcl 4-34
attdom_ptr                             automatic       pointer                  dcl 5-84
attribute                              based           structure                level 1 dcl 5-63
attribute_domain                       based           structure                level 1 dcl 5-77
attribute_ptr                          automatic       pointer                  dcl 5-73
children                               based           structure                level 1 dcl 5-131
children_ptr                           automatic       pointer                  dcl 5-136
data_ptr                               automatic       pointer                  dcl 4-29
delete_name                            based           structure                level 1 dcl 5-160
delete_name_ptr                        automatic       pointer                  dcl 5-165
dom_list                               based           structure                level 1 unaligned dcl 5-189
dom_list_ptr                           automatic       pointer                  dcl 5-188
domain                                 based           structure                level 1 dcl 5-11
domain_ptr                             automatic       pointer                  dcl 5-45
fixed                                                  builtin function         dcl 170
fixup_token                            based           char                     unaligned dcl 5-178
foreign_key                            based           structure                level 1 dcl 5-139
forkey_ptr                             automatic       pointer                  dcl 5-147
index_ptr                              automatic       pointer                  dcl 5-115
key                                    automatic       char(32)                 dcl 4-24
link                                   based           structure                level 1 dcl 5-118
link_ptr                               automatic       pointer                  dcl 5-128
list_ovrly                             based           structure                level 1 dcl 3-67
list_ovrly_ptr                         automatic       pointer                  dcl 3-74
mrds_data_$max_line_size               external static fixed bin(35,0)          dcl 5-173
mrds_data_$max_string_size             external static fixed bin(35,0)          dcl 5-172
output_text                            based           varying char             dcl 5-175
output_text_ptr                        internal static pointer                  dcl 5-177
parent_ptr                             automatic       pointer                  dcl 4-28
predecessor_parent_ptr                 automatic       pointer                  dcl 4-33
predecessor_ptr                        automatic       pointer                  dcl 4-32
rel                                                    builtin function         dcl 170
rel_index                              based           structure                level 1 dcl 5-107
relation                               based           structure                level 1 dcl 5-51
relation_ptr                           automatic       pointer                  dcl 5-60
saved_child_count                      based           fixed bin(17,0)          dcl 3-77
saved_child_count_ptr                  automatic       pointer                  dcl 3-78
seg_info                               based           structure                level 1 unaligned dcl 3-53
seg_info_ptr                           automatic       pointer                  dcl 3-59
sl                                     based           structure                level 1 dcl 3-40
sl_ptr                                 automatic       pointer                  dcl 3-50
source_size                            automatic       fixed bin(35,0)          dcl 5-182
stmt                                   based           structure                array level 1 unaligned dcl 6-37
stmt_ptr                               internal static pointer                  dcl 6-68
string_source                          based           char                     unaligned dcl 5-184
string_source_ptr                      automatic       pointer                  dcl 5-183
sys_info$max_seg_size                  external static fixed bin(35,0)          dcl 169
thread                                 automatic       bit(1)                   dcl 4-39
token                                  based           varying char             dcl 5-169
token_length                           automatic       fixed bin(24,0)          dcl 5-174
work_area                              based           area(1024)               dcl 4-36

NAME DECLARED BY EXPLICIT CONTEXT.
mrds_rst_file_cleanup           000070 constant        entry                    external dcl 18

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       630         660     510         640
Length      1174     510        30         277     120           2

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
mrds_rst_file_cleanup               166 external procedure  is an external procedure.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 directive_ptr               mrds_rst_file_cleanup

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
mrds_rst_file_cleanup    000100 message                     mrds_rst_file_cleanup
                         000131 message_length              mrds_rst_file_cleanup
                         000132 directive_mesg              mrds_rst_file_cleanup
                         000134 gl_ptr                      mrds_rst_file_cleanup
                         000136 root_ptr                    mrds_rst_file_cleanup
                         000140 node_ptr                    mrds_rst_file_cleanup
                         000142 successor_ptr               mrds_rst_file_cleanup
                         000144 successor_parent_ptr        mrds_rst_file_cleanup
                         000146 success                     mrds_rst_file_cleanup
                         000150 file_ptr                    mrds_rst_file_cleanup
                         000152 item_ptr                    mrds_rst_file_cleanup

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
alloc_cs            call_ext_out_desc   call_ext_out        return              shorten_stack       ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
ioa_$rs                       mrds_rst_error                mrds_rst_file_handler         mrds_rst_meter
mrds_rst_rsc_alloc            mrds_rst_tree_successor

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
mrds_error_$rst_undone_option




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     18 000065        55 000075        59 000102        62 000106        64 000114        66 000121        67 000123
     76 000157        77 000163        81 000223        84 000263        90 000265        91 000272        92 000273
     94 000275        96 000301       100 000320       104 000324       105 000326       107 000331       114 000335
    115 000351       116 000367       117 000371       118 000372       119 000373       120 000374       121 000375
    122 000377       123 000401       127 000402       128 000416       129 000420       130 000424       131 000426
    132 000427       137 000430       143 000442       149 000443       151 000452       184 000507


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
